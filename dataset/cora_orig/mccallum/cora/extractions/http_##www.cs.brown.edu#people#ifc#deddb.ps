URL: http://www.cs.brown.edu/people/ifc/deddb.ps
Refering-URL: http://www.informatik.uni-trier.de/~ley/db/conf/deductive/deductive94.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: catarci@infokit.dis.uniroma1.it  ifc@cs.brown.edu  
Title: On Expressing Stratified Datalog  
Author: Tiziana Catarci Isabel F. Cruz 
Address: Via Salaria 113, I-00198 Roma, Italy  Providence, RI 02912-1910, USA  
Affiliation: Dipartimento di Informatica e Sistemistica Universita di Roma "La Sapienza"  Department of Computer Science Brown University  
Abstract: We consider the broad class of stratified Datalog queries (which includes both linear and non-linear queries) and propose an extended closure operator that expresses such queries when added to the relational algebra. We show that there exists a canonical form for stratified Datalog queries, and that suitable hypergraphs can be used to express them. We anticipate the use of such hypergraphs in identifying special classes of stratified Datalog queries and in devising efficient algorithms for these classes, and outline the use of the visual representation of hypergraphs in a user interface for querying databases.
Abstract-found: 1
Intro-found: 1
Reference: [ACS90] <author> M. Angelaccio, T. Catarci, and G. Santucci. </author> <title> QBD fl : A Graphical Query Language with Recursion. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(10) </volume> <pages> 1150-1163, </pages> <year> 1990. </year>
Reference-contexts: We demonstrate that the evaluation of a subclass of these queries can be visualized by means of a particular kind of hypergraph. This visualization can be explored both conceptually and from a more practical point of view, if incorporated in a visual interface to databases as in <ref> [ACS90, CMW88, Cru92] </ref>. This paper is organized as follows. In Section 2 we show that any stratified Datalog program can be rewritten as a stratified program whose recursive rules are bilinear as in the example above. <p> We anticipate that this representation could be the basis of a visual interface to databases as in <ref> [ACS90, CMW88, Cru92] </ref>.
Reference: [Agr87] <author> R. Agrawal. </author> <title> Alpha: An Extension of Relational Algebra to Express a Class of Recursive Queries. </title> <booktitle> In IEEE Intl. Conference on Data Engineering, </booktitle> <pages> pages 580-590, </pages> <year> 1987. </year>
Reference-contexts: These operators are believed to be accessible to database users with no knowledge of database logic programs, but who are familiar with relational algebra (or relational calculus). For example, in <ref> [Agr87] </ref> an operator is proposed that makes it possible for a certain class of recursive queries to be expressed (basically transitive closure plus some aggregative queries).
Reference: [AU79] <author> Alfred V. Aho and Jeffrey D. Ulmann. </author> <title> Universality of Data Retrieval Languages. </title> <booktitle> In 6th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 110-120, </pages> <year> 1979. </year>
Reference-contexts: 1 Introduction The study of query languages that are more expressive than first order query languages has been the subject of much research, since the early results in <ref> [AU79] </ref> concerning the inability of first order queries to express the transitive closure of a binary relation. An important part of this work has been developed in the realm of database logic programs, usually also called Datalog programs (or queries). <p> to S according to A,F is defined by: R + 1 [ R i 5 Taking into account the fact that a least fixpoint exists, it is easy to see that R + S ; S) [ R Recall that the transitive closure of a binary relation is defined (see <ref> [AU79] </ref>) by first intro ducing the composition operator ffi on two binary relations R and S as R ffi S = $1;$4 $2=$3 (R fi S) and then letting the nth-power of a binary relation R be R n = R n = 1 ) The transitive closure R + of
Reference: [BR88] <author> Fran~cois Bancilhon and Raghu Ramakrishnan. </author> <title> Performance Evaluation of Data Intensive Programs. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 547-585. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Cal-ifornia, </address> <year> 1988. </year>
Reference-contexts: first recursive clause contains both of them. p (x; y) : p 0 (x; z); t (z; y); p (w; z): p 0 (x; y): p (z; x); s (z; z; y): 2 As also remarked in [IW91], this definition of linearity is more restrictive than the one given in <ref> [BR88] </ref>. 3 Definition 2.3 Consider a set of Datalog rules consisting of both recursive and nonrecursive rules, and let fp 1 ; : : : ; p n g be the predicates appearing in the heads of the rules.
Reference: [CC94] <author> T. Catarci and I. F. Cruz. </author> <title> Extended closure for nonlinear recursive queries. </title> <type> Technical report, </type> <institution> Universita degli Studi di Roma, La Sapienza, Dipartimento di Infor-matica e Sistemistica, </institution> <year> 1994. </year> <note> In printing. </note>
Reference-contexts: The content of this section summarizes some of the results obtained in [IW91] and in <ref> [CC94] </ref>. In [IW91] an algebraic framework for the study of recursion has been developed. For immediate linear recursion, a Datalog rule is represented by a relational algebra operator. <p> For immediate linear recursion, a Datalog rule is represented by a relational algebra operator. Regarding non-linear recursion, it has been shown that Datalog rules always give rise to multilinear recursion, which can always be reduced to bilinear recursion. The results of Ioannidis and Wong have been extended in <ref> [CC94] </ref> by showing that any multilinear stratified Datalog program can be reduced to a stratified Datalog program whose recursive rules are bilinear. In the rest of this section we briefly recall the above results. For the Datalog syntax and the basic definitions (e.g. recursive and non-recursive rules, stratification) see [Ull89]. <p> In <ref> [CC94] </ref> it has been shown that any stratified Datalog program can be rewritten as a stratified Datalog program whose recursive rules are bilinear.
Reference: [CCM92] <author> Mariano P. Consens, Isabel F. Cruz, and Alberto O. Mendelzon. </author> <title> Visualizing Queries and Querying Visualizations. </title> <booktitle> SIGMOD RECORD, Special Issue on Advanced User Interfaces, </booktitle> <volume> 21(1), </volume> <month> March </month> <year> 1992. </year>
Reference-contexts: These languages are based on graph representations of the data. For example, the evaluation of the transitive closure of a binary relation can be expressed as the transitive closure of the graph representing the binary relation, and can be optimized taking into account the graph representation [CMW88]. In <ref> [CM90, CCM92] </ref> it is shown how stratified linear Datalog queries can be expressed visually in the G + system.
Reference: [CH80] <author> Ashok K. Chandra and David Harel. </author> <title> Computable Queries for Relational Databases. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 21(2) </volume> <pages> 156-178, </pages> <year> 1980. </year>
Reference-contexts: An important part of this work has been developed in the realm of database logic programs, usually also called Datalog programs (or queries). Different classes of queries have been considered that are more expressive than first order queries (and less expressive than the computable queries of <ref> [CH80] </ref>).
Reference: [CH85] <author> Ashok K. Chandra and David Harel. </author> <title> Horn Clause Queries and Generalizations. </title> <editor> J. </editor> <booktitle> of Logical Programming, </booktitle> <volume> 2(1) </volume> <pages> 158-163, </pages> <year> 1985. </year>
Reference-contexts: Also, since in a stratified Datalog program each stratum can be evaluated having already computed the relations corresponding to the predicates at lower strata, we can evaluate one single stratum at a time. Each single stratum contains a set of directly recursive rules, since it has been shown in <ref> [CH85] </ref> that mutual recursion can be reduced to a recursion over a single relation. <p> first selector Z 1 has columns numbered from 1 to the arity of p, say g, the second selector W has column numbers from g + 1 to the arity of q, and so on. 6 Recall that mutual recursion can always be reduced to recursion over a single relation <ref> [CH85] </ref>. 7 Let us consider the c A;F operator introduced in Section 3.
Reference: [CM90] <author> Mariano P. Consens and Alberto O. Mendelzon. </author> <title> Graphlog: a Visual Formalism for Real Life Recursion. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 404-416, </pages> <year> 1990. </year> <month> 13 </month>
Reference-contexts: This important result is obtained by defining a canonical form in which linear recursive queries can be transformed. Clauses in this canonical form can be expressed by using a transitive closure operator. In <ref> [CM90] </ref> the class of stratified linear queries has been proven to be equivalent to both first order logic plus transitive closure queries and to non-deterministic logarithmic space queries, on the assumption of an ordering on the domain. <p> These languages are based on graph representations of the data. For example, the evaluation of the transitive closure of a binary relation can be expressed as the transitive closure of the graph representing the binary relation, and can be optimized taking into account the graph representation [CMW88]. In <ref> [CM90, CCM92] </ref> it is shown how stratified linear Datalog queries can be expressed visually in the G + system.
Reference: [CMW88] <author> Isabel F. Cruz, Alberto O. Mendelzon, and Peter T. Wood. </author> <title> G + : Recursive Queries Without Recursion. </title> <booktitle> In Expert Database Conference, </booktitle> <pages> pages 355-368, </pages> <year> 1988. </year> <note> Also in Larry Kershberg, </note> <editor> editor, </editor> <title> Expert Database Systems, </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <address> Redwood City, California, </address> <pages> pages 645-666, </pages> <year> 1989. </year>
Reference-contexts: These languages are based on graph representations of the data. For example, the evaluation of the transitive closure of a binary relation can be expressed as the transitive closure of the graph representing the binary relation, and can be optimized taking into account the graph representation <ref> [CMW88] </ref>. In [CM90, CCM92] it is shown how stratified linear Datalog queries can be expressed visually in the G + system. <p> We demonstrate that the evaluation of a subclass of these queries can be visualized by means of a particular kind of hypergraph. This visualization can be explored both conceptually and from a more practical point of view, if incorporated in a visual interface to databases as in <ref> [ACS90, CMW88, Cru92] </ref>. This paper is organized as follows. In Section 2 we show that any stratified Datalog program can be rewritten as a stratified program whose recursive rules are bilinear as in the example above. <p> We anticipate that this representation could be the basis of a visual interface to databases as in <ref> [ACS90, CMW88, Cru92] </ref>.
Reference: [CN89] <author> Isabel F. Cruz and Theodore S. Norvell. </author> <title> Aggregative Closure: An Extension of Transitive Closure. </title> <booktitle> In IEEE Intl. Conference on Data Engineering, </booktitle> <pages> pages 384-391, </pages> <year> 1989. </year>
Reference-contexts: Another extension to the class of first order queries is proposed in <ref> [CN89] </ref>, where an extended transitive closure operator, the aggregative closure operator , is introduced. This operator aggregates the values on paths in the graph representing the database and subsumes the transitive closure operator. In [CN89] efficient algorithms for computing the aggregative closure are provided. <p> Another extension to the class of first order queries is proposed in <ref> [CN89] </ref>, where an extended transitive closure operator, the aggregative closure operator , is introduced. This operator aggregates the values on paths in the graph representing the database and subsumes the transitive closure operator. In [CN89] efficient algorithms for computing the aggregative closure are provided. Visual query languages have also been considered that extend the expressive power of relational algebra. These languages are based on graph representations of the data.
Reference: [Cru92] <author> Isabel F. Cruz. DOODLE: </author> <title> A Visual Language for Object-Oriented Databases. </title> <booktitle> In ACM-SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pages 71-80, </pages> <year> 1992. </year>
Reference-contexts: We demonstrate that the evaluation of a subclass of these queries can be visualized by means of a particular kind of hypergraph. This visualization can be explored both conceptually and from a more practical point of view, if incorporated in a visual interface to databases as in <ref> [ACS90, CMW88, Cru92] </ref>. This paper is organized as follows. In Section 2 we show that any stratified Datalog program can be rewritten as a stratified program whose recursive rules are bilinear as in the example above. <p> We anticipate that this representation could be the basis of a visual interface to databases as in <ref> [ACS90, CMW88, Cru92] </ref>.
Reference: [HN84] <author> L. J. Henschen and S. A. Naqvi. </author> <title> On Compiling Queries in Recursive First-order Databases. </title> <journal> Journal of the ACM, </journal> <volume> 31(1) </volume> <pages> 47-85, </pages> <year> 1984. </year>
Reference-contexts: We recall that if there is more than one definition of a predicate in a stratified Datalog program, then the set of tuples in the corresponding relation is the union of all the tuples provided by each definition <ref> [HN84] </ref>. Thus, we can answer the query represented by the above Datalog program by computing the extended closure of P.
Reference: [IW91] <author> Y. E. Ioannidis and E. Wong. </author> <title> Towards an Algebraic Theory of Recursion. </title> <journal> Journal of the ACM, </journal> <volume> 38(2) </volume> <pages> 329-381, </pages> <year> 1991. </year>
Reference-contexts: The work of Ioannidis and Wong <ref> [IW91] </ref> considers non-linear recursive queries in an alge-braic context. Important work on the complexity of Datalog queries is reported in [Kan88], but extensions of first order queries with closure operators that are more expressive than stratified linear Datalog queries have seldom, if at all, been investigated. <p> Such programs are therefore canonical, and represent in general the hardest 2 computation that is expressed by any stratified Datalog program. Our results extend the important results of <ref> [IW91] </ref>. In Section 3 we present a simple extended closure operator for an interesting subclass of bilinear programs, and in Section 4 we generalize this operator to capture the whole class of stratified Datalog programs. <p> The content of this section summarizes some of the results obtained in <ref> [IW91] </ref> and in [CC94]. In [IW91] an algebraic framework for the study of recursion has been developed. For immediate linear recursion, a Datalog rule is represented by a relational algebra operator. <p> The content of this section summarizes some of the results obtained in <ref> [IW91] </ref> and in [CC94]. In [IW91] an algebraic framework for the study of recursion has been developed. For immediate linear recursion, a Datalog rule is represented by a relational algebra operator. Regarding non-linear recursion, it has been shown that Datalog rules always give rise to multilinear recursion, which can always be reduced to bilinear recursion. <p> In the rest of this section we briefly recall the above results. For the Datalog syntax and the basic definitions (e.g. recursive and non-recursive rules, stratification) see [Ull89]. The following definitions are presented in terms of Datalog rules and are direct consequences of the definitions given in <ref> [IW91] </ref> in algebraic terms. Definition 2.1 Consider a set of Datalog rules consisting of both recursive and nonrecursive rules, and let fp 1 ; : : : ; p n g be the predicates appearing in the heads of the rules. <p> head predicates are p and p 0 , and the body of the first recursive clause contains both of them. p (x; y) : p 0 (x; z); t (z; y); p (w; z): p 0 (x; y): p (z; x); s (z; z; y): 2 As also remarked in <ref> [IW91] </ref>, this definition of linearity is more restrictive than the one given in [BR88]. 3 Definition 2.3 Consider a set of Datalog rules consisting of both recursive and nonrecursive rules, and let fp 1 ; : : : ; p n g be the predicates appearing in the heads of the <p> In this paper we approached this problem by introducing the notion of extended closure as a uniform and elegant way for expressing stratified Datalog queries. Also, we have shown that hypergraphs can be used for visualizing the intuitive meaning of the extended closure. We build on the work of <ref> [IW91] </ref> who consider multilinear Datalog programs expressed algebraically and show that any stratified multilinear Datalog program can be expressed using a set of stratified bilinear Datalog rules.
Reference: [JAN87] <author> H. V. Jagadish, Rakesh Agrawal, and Linda Ness. </author> <title> A Study of Transitive Closure as a Recursion Mechanism. </title> <booktitle> In ACM-SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pages 331-344, </pages> <year> 1987. </year>
Reference-contexts: For example, in [Agr87] an operator is proposed that makes it possible for a certain class of recursive queries to be expressed (basically transitive closure plus some aggregative queries). In <ref> [JAN87] </ref> the link between transitive closure queries and linear Datalog is better clarified by showing that every linear recursive query can be expressed as a transitive closure query possibly preceded and followed by operations already available in relational algebra.
Reference: [Kan88] <author> Paris C. Kanellakis. </author> <title> Logic Programming and Parallel Complexity. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 547-585. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> California, </address> <year> 1988. </year>
Reference-contexts: The work of Ioannidis and Wong [IW91] considers non-linear recursive queries in an alge-braic context. Important work on the complexity of Datalog queries is reported in <ref> [Kan88] </ref>, but extensions of first order queries with closure operators that are more expressive than stratified linear Datalog queries have seldom, if at all, been investigated.
Reference: [Kan90] <author> Paris C. Kanellakis. </author> <title> Elements of Relational Database Theory. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, chapter 17, </booktitle> <pages> pages 1073-1156. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1990. </year>
Reference-contexts: bilinear program above. fl Proc. 2nd ICLP Workshop on Deductive Databases and Logic Programming, Italy, June 1994. y Research partially supported by EEC under the Esprit Project 6398 VENUS. z Partial support given by ONR Contract N00014-91-J-4052, ARPA Order 8225. 1 These two classes are however incomparable (see for example <ref> [Kan90] </ref>). The work of Ioannidis and Wong [IW91] considers non-linear recursive queries in an alge-braic context.
Reference: [SS88] <author> Seppo Sippu and Eljas Soisalon-Soininen. </author> <title> A Generalized Transitive Closure for Relational Queries. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 325-332, </pages> <year> 1988. </year>
Reference-contexts: In [CM90] the class of stratified linear queries has been proven to be equivalent to both first order logic plus transitive closure queries and to non-deterministic logarithmic space queries, on the assumption of an ordering on the domain. An operator is introduced in <ref> [SS88] </ref>, where the usual transitive closure is extended by defining a generalized composition operator (which may be applied to non-binary relations, with an arbitrary comparison condition) whose closure gives the analogous of the transitive closure for binary relations.
Reference: [Ull88] <author> Jeffrey D. Ullman. </author> <title> Principles of Database and Knowledge-Base Systems, volume I. </title> <publisher> Computer Science Press, Inc., </publisher> <year> 1988. </year>
Reference-contexts: In order to define the extended closure of R with respect to S, we introduce the operator c A;F that we express using relational algebra: c A;F (R; S) = R [ A F (R fi S fi R) where, as usual, and denote projection and selection, respectively <ref> [Ull88] </ref>. Notice that the result of applying c A;F to R and S is a new relation having the same arity as R. Now, we use the c A;F operator to define the i-th power of R w.r.t. <p> P 2n Q 2n1 [ : : : 3 We indicate with bold capital letters the relations corresponding to Datalog predicates; Datalog predicates are represented by italicized lower case letters. 4 Where PQP means A F (P fi Q fi P), as results from the algorithms 3.1 and 3.3 in <ref> [Ull88] </ref>. 6 Theorem 3.2 Let B be a simple bilinear Datalog program as specified above, and let * A = f$i 1 ; :::; $i n g such that $i k 2 A iff one of the x j is in position k 5 in one of the selectors of the
Reference: [Ull89] <author> Jeffrey D. Ullman. </author> <title> Principles of Database and Knowledge-Base Systems, volume II. </title> <publisher> Computer Science Press, Inc., </publisher> <address> Rockville, Maryland, </address> <year> 1989. </year>
Reference-contexts: An important body of work has identified special cases of stratified Datalog linear programs, which can be optimized (see, for example, <ref> [Ull89] </ref>). <p> In the rest of this section we briefly recall the above results. For the Datalog syntax and the basic definitions (e.g. recursive and non-recursive rules, stratification) see <ref> [Ull89] </ref>. The following definitions are presented in terms of Datalog rules and are direct consequences of the definitions given in [IW91] in algebraic terms.
Reference: [ZYT90] <author> Weining Zhang, Clement T. Yu, and Daniel Troy. </author> <title> Necessary and Sufficient Conditions to Linearize Double Recursive Programs in Logic Databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(3) </volume> <pages> 459-482, </pages> <month> September </month> <year> 1990. </year> <month> 14 </month>
Reference-contexts: First we recall this subclass as studied by <ref> [ZYT90] </ref> and then we introduce a special relational operator and show that the closure of this operator can express this class of programs. 3.1 Simple Bilinear Datalog programs These programs consist of two rules, one non recursive, and the other direct recursive. We use the notation introduced in [ZYT90]. <p> studied by <ref> [ZYT90] </ref> and then we introduce a special relational operator and show that the closure of this operator can express this class of programs. 3.1 Simple Bilinear Datalog programs These programs consist of two rules, one non recursive, and the other direct recursive. We use the notation introduced in [ZYT90]. Let p be a predicate of arity n. The recursive rule defining p will involve n distinct universally quantified variables, denoted by X = (x 1 ; x 2 ; : : : ; x n ).
References-found: 21

