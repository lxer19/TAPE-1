URL: ftp://ftp.cs.indiana.edu/pub/sdiwan/components.ps.gz
Refering-URL: http://www.cs.indiana.edu/hyplan/sdiwan.html
Root-URL: http://www.cs.indiana.edu
Title: Component Architectures for Distributed Scientific Problem Solving  
Author: D. Gannon, R. Bramley, T. Stuckey, J. Villacis, J. Balasubramanian, E. Akman, F. Breg, S. Diwan, M. Govindaraju 
Address: Bloomington, IN  
Affiliation: Department of Computer Science Indiana University  
Abstract: Component based technologies will play an increasingly significant role in the design and implementation of large scale distributed software systems during the next few years. The advantages of this model of programming include rapid prototyping of complex, distributed applications and a framework that provides a natural way to incorporate our existing scientific software code base as components of larger problem solutions. In this paper, we survey the design issues and theory of component based software. To illustrate the ideas we also present a prototype component based problem-solving environment (PSE) called the Linear System Analyzer (LSA) which we have built for the manipulation and solution of large sparse linear systems of equations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Fabian Breg, Shridhar Diwan, Juan Villacis, Jayashree Balasubramanian, Esra Akman, and Dennis Gannon. </author> <title> Java RMI performance and object model interoperability: Experiments with Java/HPC++. Concurrency and Experience, </title> <booktitle> 1998. Presented at 1998 ACM Workshop on Java for High-Performance Network Computing. </booktitle>
Reference-contexts: There are some problems with implementing the complete RMI semantics using non-Java objects that arise due to the Java serializability and reflection properties, but it is easy to avoid problems in practice <ref> [1] </ref>. Recently Sun has announced that RMI will be ported to run over the CORBA IIOP protocol to achieve exactly this sort of Java to foreign object interoperability.
Reference: [2] <author> H. Casanova, J. Dongarra, C. Johnson, and M. Miller. </author> <title> Tools for Building Distributed Scientific Applications and Network Enabled Servers, 1998. In Computational Grids. </title>
Reference-contexts: Legion [15] from the University of Virginia supports an extensive object model that meets many of these objectives. Another system that could have been used to build this system is the ACE framework from Washington University [10]. Although based on a client-server-agent model, NetSolve <ref> [2] </ref> can also be used to develop solution strategies for large linear systems. The NetSolve system closely targets the dynamic resource management problem of finding suitable hardware and software resources on which to run a module. Two other systems target high-performance distributed, parallel computation in a manner similar to LSA.
Reference: [3] <author> K. Mani Chandy and Carl Kesselman. </author> <title> CC++: A declarative concurrent object-oriented programming notation, </title> <booktitle> 1993. In Research Directions in Concurrent Object Oriented Programming, </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: HPC++Lib has been implemented using the Nexus [7] runtime system which is part of the 16 Globus [6] metacomputing infrastructure. To implement the Java to HPC++Lib/Nexus li-brary we have developed a version of the Java RMI layered over Nexus. HPC++Lib uses the concept of global pointers from CC++ <ref> [3] </ref> for remote method invocations. Consequently, a substantial subset of the RMI remote reference semantics can be converted to HPC++Lib global pointer operations. In other words, Java can see a remote HPC++ object as a remote Java object instance and execute RMI calls as remote method calls on that object.
Reference: [4] <author> K. Mani Chandy, Adam Rifkin, Paolo A.G. Sivilotti, Jacob Mandelson, Matthew Richardson, Wesley Tanaka, and Luke Weisman. </author> <title> A World-Wide Distributed System Using Java and the Internet. </title> <booktitle> In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> August </month> <year> 1996. </year>
Reference-contexts: Some modern research systems such as Infospheres <ref> [4] </ref> and WebFlow [8] use a similar approach but also address the concerns of high performance scientific and engineering applications. Legion [15] from the University of Virginia supports an extensive object model that meets many of these objectives.
Reference: [5] <author> B. J. Cox. </author> <title> Object Oriented Programming. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass, </address> <year> 1986. </year>
Reference-contexts: Each part has a specification sheet which describes the precise behavior of the device and the rules for connecting it to other components, including the protocol for its input and output buffers. However, this metaphor is not new <ref> [5] </ref>. In visualization, systems like IRIS Explorer [11] use it to construct specialized visualization tools by composing various filters, image preprocessors and rendering systems. More recently, Java Studio from Sun provides a complete system for composing Java components to build complete graphical user interfaces for Java applets.
Reference: [6] <author> I. Foster and C. Kesselman. Globus: </author> <title> A Metacomputing Infrastructure Toolkit. </title> <journal> International Journal of Supercomputer Applications, </journal> <note> 1997. To appear. </note>
Reference-contexts: HPC++ provides us support on all parallel processing platforms and it has a rich set of thread and remote object primitives. HPC++Lib has been implemented using the Nexus [7] runtime system which is part of the 16 Globus <ref> [6] </ref> metacomputing infrastructure. To implement the Java to HPC++Lib/Nexus li-brary we have developed a version of the Java RMI layered over Nexus. HPC++Lib uses the concept of global pointers from CC++ [3] for remote method invocations.
Reference: [7] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> The Nexus Approach to Integrating Multi-threading and Communication. </title> <journal> J. Parallel and Distributed Computing, </journal> <volume> 37 </volume> <pages> 70-82, </pages> <year> 1996. </year>
Reference-contexts: HPC++ provides us support on all parallel processing platforms and it has a rich set of thread and remote object primitives. HPC++Lib has been implemented using the Nexus <ref> [7] </ref> runtime system which is part of the 16 Globus [6] metacomputing infrastructure. To implement the Java to HPC++Lib/Nexus li-brary we have developed a version of the Java RMI layered over Nexus. HPC++Lib uses the concept of global pointers from CC++ [3] for remote method invocations.
Reference: [8] <author> G. Fox and W. Furmanski. </author> <title> Web Technologies in High Performance Distributed Computing, 1998. In Computational Grids. </title>
Reference-contexts: Some modern research systems such as Infospheres [4] and WebFlow <ref> [8] </ref> use a similar approach but also address the concerns of high performance scientific and engineering applications. Legion [15] from the University of Virginia supports an extensive object model that meets many of these objectives.
Reference: [9] <author> D. Gannon, P. Beckman, E. Johnson, and T. Green. </author> <title> Compilation Issues on Distributed Memory Systems, chapter 3 HPC++ and the HPC++Lib Toolkit. </title> <publisher> Springer-Verlag, </publisher> <year> 1998. </year>
Reference-contexts: The next level of programming is encountered when the user wishes to build a new component. In section four we describe the process of building components using a C++ based distributed and parallel computing library known as HPC++ <ref> [9] </ref> and Fortran. 2 2 LSA: A System for Composing Distributed Linear Algebra Solvers Component architecture concepts can be illustrated by a concrete example of a system we have developed to help the hypothetical scientist who needs to develop a solution strategy for her systems of equations. <p> The programmer then only needs to implement these operations. In the current LSA prototype we use HPC++Lib <ref> [9] </ref> to program the component wrapper code. The following implementation example uses synchronized queues for managing the input data streams. HPC++ is multithreaded. Synchronized queues provide a simple way for a producer thread to send data to a consumer thread. In our case, the producers are the input port objects.
Reference: [10] <author> A. Gokhale, D.C. Schmidt, T. Harrison, and G. Parulkar. </author> <title> Towards real-time CORBA. </title> <journal> IEEE Communications Magazine, </journal> <volume> 14(2), </volume> <month> Feb </month> <year> 1997. </year>
Reference-contexts: Legion [15] from the University of Virginia supports an extensive object model that meets many of these objectives. Another system that could have been used to build this system is the ACE framework from Washington University <ref> [10] </ref>. Although based on a client-server-agent model, NetSolve [2] can also be used to develop solution strategies for large linear systems. The NetSolve system closely targets the dynamic resource management problem of finding suitable hardware and software resources on which to run a module.
Reference: [11] <institution> Numerical Algorithms Group. </institution> <note> IRIS Explorer, visited 8-20-97. see http://www.nag.co.uk/Welcome IEC.html. 18 </note>
Reference-contexts: Each part has a specification sheet which describes the precise behavior of the device and the rules for connecting it to other components, including the protocol for its input and output buffers. However, this metaphor is not new [5]. In visualization, systems like IRIS Explorer <ref> [11] </ref> use it to construct specialized visualization tools by composing various filters, image preprocessors and rendering systems. More recently, Java Studio from Sun provides a complete system for composing Java components to build complete graphical user interfaces for Java applets.
Reference: [12] <author> Elias N. Houstis and John R. Rice. </author> <note> Parallel Ellpack, 1997. see http://www.cs.purdue.edu/research/pellpack.html. </note>
Reference-contexts: The NetSolve system closely targets the dynamic resource management problem of finding suitable hardware and software resources on which to run a module. Two other systems target high-performance distributed, parallel computation in a manner similar to LSA. The first is PELLPACK <ref> [12] </ref>, a PDE based distributed PSE, and PAWS [14], a parallel application workspace for scientists. The software architecture of PSEs is characterized by the integration model used to connect the software parts, underlying execution model used, the user interface, analytical tools, communication model and the medium used.
Reference: [13] <author> Kate Keahey and Dennis Gannon. PARDIS: </author> <title> A Parallel Approach to CORBA. </title> <booktitle> In 6th IEEE International Symposium on High Performance Distributed Computation, </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: In particular, for components that are based on parallel implementations, the communications channels may need to be implemented as multiple concurrent pathways (see <ref> [13] </ref> for an example.) A second problem with current commercial desktop component systems is the mechanism for encapsulating an existing scientific application (which may itself be a parallel distributed computation) into a component.
Reference: [14] <institution> LANL Advanced Computing Laboratory. </institution> <month> PAWS: </month> <title> Parallel Application WorkSpace, </title> <note> 1997. see http://bluemountain.acl.lanl.gov/PAWS/docs/proposal.htm. </note>
Reference-contexts: The NetSolve system closely targets the dynamic resource management problem of finding suitable hardware and software resources on which to run a module. Two other systems target high-performance distributed, parallel computation in a manner similar to LSA. The first is PELLPACK [12], a PDE based distributed PSE, and PAWS <ref> [14] </ref>, a parallel application workspace for scientists. The software architecture of PSEs is characterized by the integration model used to connect the software parts, underlying execution model used, the user interface, analytical tools, communication model and the medium used.

References-found: 14

