URL: http://mat.gsia.cmu.edu/assign.ps
Refering-URL: http://mat.gsia.cmu.edu/trick.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: A LINEAR RELAXATION HEURISTIC FOR THE GENERALIZED ASSIGNMENT PROBLEM  
Author: Michael A. Trick 
Date: April, 1989; Revised March, 1991  
Abstract: We examine the basis structure of the linear relaxation of the generalized assignment problem. The basis gives a surprising amount of information. This leads to a very simple heuristic that uses only generalized network optimization codes. Lower bounds can be generated by cut generation, where the violated inequalities are found directly from the relaxation basis. An improvement heuristic with the same flavor is also presented.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.F. Benders and J.A.E.E. van Nunen, </author> <title> "A property of assignment type mixed integer linear programming problems," O.R. </title> <journal> Letters, </journal> <volume> 2, </volume> <month> 47-52 </month> <year> (1982). </year>
Reference-contexts: The following theorem is proved by Benders and van Nunen <ref> [1] </ref>. This alternative proof stresses the basis structure, and will be used in later proofs (this proof is very similar to the proof of Lenstra, Shmoys, and Tardos that gives a solution within a factor of two of optimal for the non-identical machine makespan problem (theorem 1 of [11])).
Reference: [2] <author> G.G. Brown and R. McBride, </author> <title> "Solving generalized networks," </title> <journal> Management Science, </journal> <volume> 20, </volume> <month> 1497-1523 </month> <year> (1985). </year>
Reference-contexts: Since LGAP is a special generalized net-work (network with multipliers), the basis structure of LGAP is well known (see particularly Brown and McBride <ref> [2] </ref>). The variables in any basis can be represented by a set of one-trees (trees with one extra edge, possibly a slack edge, forming a single cycle in each component). <p> The nodes of these one-trees come in two types: job nodes and machine nodes, with one for each job and machine respectively. A variable x ij in the basis corresponds to an edge between job node j and machine node i. We can specialize the basis structure in <ref> [2] </ref> for LGAP. First, since the underlying problem is bipartite, so is any basis graph. Second, the basis cycles have special structure, outlined in the following lemma. We will state this lemma assuming that there are artificial variables associated with each job. <p> But an edge can become useless only if at least one job is scheduled. By theorem 1, after the first iteration only m jobs remain to be scheduled, so the theorem follows. 2 This heuristic can be effectively implemented using the data structures of Brown and McBride <ref> [2] </ref> or Nulty and Trick [15]. These implementations solve generalized networks orders of magnitude faster than general simplex codes. Assuming that n is much larger than m, only one large generalized network problem must be solved; all networks after the first have at most m jobs to be scheduled.
Reference: [3] <author> M.L. Fisher, </author> <title> "An applications oriented guide to Lagrangian relaxation," </title> <journal> Interfaces, </journal> <volume> 15, </volume> <month> 10-21 </month> <year> (1985). </year> <month> 22 </month>
Reference-contexts: & -1 % 1 ? 1/8 ? 1/4 dt - t t 1 dt - t dt - t 6 (a) (b) (c) a general linear programming code or a generalized network with side constraints code (McBride [13]), or the constraints can be relaxed by Lagrangian relaxation (for example, Fisher <ref> [3] </ref>).
Reference: [4] <author> M.L. Fisher and R. Jaikumar, </author> <title> "A generalized assignment heuristic for vehicle routing," </title> <journal> Networks, </journal> <volume> 11, </volume> <month> 109-124 </month> <year> (1981). </year>
Reference: [5] <author> M.L. Fisher, R. Jaikumar, and L. Van Wassenhove, </author> <title> "A multiplier adjustment method for the generalized assignment problem," </title> <journal> Management Science, </journal> <volume> 32, </volume> <month> 1095-1103 </month> <year> (1986). </year>
Reference-contexts: is NP-complete (<ref> [5] </ref>) so it is un-likely that any efficient solution method will be found. Previous work on the generalized assignment problem has concentrated on exact solutions to the problem using enumerative schemes with bounding methods (Martello and Toth [12], Ross and Soland [16], and Fisher, Jaikumar and Van Wassenhove [5]). Often, exact solutions are not necessary, and the time to find them may be prohibitive. Instead, good solutions are required quickly. <p> In the computational results that follow, this heuristic acted essentially the same as LR-Heuristic so we do not continue with this approach. Ideally, LR-Heuristic would not deviate from optimal by more than some constant factor. Unfortunately, it is easy to modify the NP-completeness result of <ref> [5] </ref> to show that no algorithm can guarantee closeness to optimality unless P = N P . This holds even for m = 3. However, an alternative measure of performance is number of jobs scheduled. <p> Because of the possibility of generating constraints not derivable from the individual knapsack constraints, it is pos sible that the resulting lower bound will be better than that of Fisher, Jaiku mar and Van Wassenhove <ref> [5] </ref>, who give bounds equivalent to adding all the constraints deducible from the individual knapsacks. Another advantage of this approach is that no knapsack problem need be solved. If the capacities of the machines are large, these knapsacks can be very time consuming. <p> The results for all heuristics are then improved by 1- and 2-opting. Other heuristics are discussed by Jacobs ([9]) and Klastorin ([10]). Furthermore, it would be interesting to compare this heuristics with the optimization based routines of <ref> [5] </ref> and [12]. These methods often find very good or optimal solutions early in the branch and bound search tree. To generate our problems, we begin with the same distributions used in previous studies [12, 5]. These distributions are denoted A, B, C, and D. <p> Furthermore, it would be interesting to compare this heuristics with the optimization based routines of [5] and [12]. These methods often find very good or optimal solutions early in the branch and bound search tree. To generate our problems, we begin with the same distributions used in previous studies <ref> [12, 5] </ref>. These distributions are denoted A, B, C, and D. The results in those papers concentrated on exact solutions, so the problem sizes examined are naturally quite small. This testing concentrates on heuristic solutions, so our sizes are much larger.
Reference: [6] <author> B.L. Golden and W.R. Stewart, </author> <title> "Empirical analysis of Heuristics," 207-249 of The Traveling Salesman Problem, edited by E.L. Lawler, </title> <editor> J.K. Lenstra, A.H.G. Rinooy Kan, D.B. Shmoys, </editor> <publisher> John Wiley and Sons, </publisher> <address> New York (1985). </address>
Reference: [7] <author> E.S. Gottlieb and M.R. Rao, </author> <title> "The generalized assignment problem: Valid inequalities and facets," </title> <journal> Mathematical Programming, </journal> <volume> 46, </volume> <month> 31-52 </month> <year> (1990). </year>
Reference-contexts: Let J be the set of jobs incident to an edge of E. The constraint X x ij J p 1 (6) is a valid inequality for GAP. It is straightforward to prove validity by showing that this is a special case of the cycle inequalities of <ref> [7] </ref>. The linear programming relaxation does not necessarily violate this constraint, but it will if the flow on the cycle is sufficiently high (for instance, if every job on the cycle is scheduled just by the machines on the cycle). <p> An interesting open question is to find all such inequalities violated by the linear relaxation. For a more general definition of cycle inequalities, see <ref> [7] </ref>. These constraints have the nice property that some instances of them are not derivable from just LGAP and all the facets of the individual knapsack constraints. Gottlieb and Rao provide an example of this fact.
Reference: [8] <author> E.S. Gottlieb and M.R. Rao, </author> <title> "(1; k) Configuration facets for the generalized assignment problem," </title> <journal> Mathematical Programming, </journal> <volume> 46, </volume> <month> 53-60 </month> <year> (1990). </year>
Reference: [9] <author> C.D. Jacobs, </author> <title> The Vehicle Routing Problem with Backhauls, </title> <publisher> Ph. </publisher> <address> D. </address> <institution> dissertation, Georgia Institute of Technology (1987). </institution>
Reference: [10] <author> T.D. Klastorin, </author> <title> "An effective subgradient algorithm for the generalized assignment problem," </title> <journal> Computers and Operations Research, </journal> <volume> 6, </volume> <month> 155-164 </month> <year> (1979). </year>
Reference: [11] <author> J.K. Lenstra, D.B. Shmoys, and E. Tardos, </author> <title> "Approximation algorithms for scheduling unrelated parallel machines," </title> <journal> Mathematical Programming, </journal> <volume> 46, </volume> <month> 53-60 </month> <year> (1990). </year>
Reference-contexts: This alternative proof stresses the basis structure, and will be used in later proofs (this proof is very similar to the proof of Lenstra, Shmoys, and Tardos that gives a solution within a factor of two of optimal for the non-identical machine makespan problem (theorem 1 of <ref> [11] </ref>)). Theorem 1 The number of split jobs in a basic solution to LGAP is at most the number of machines scheduled to capacity. 3 PROOF: For each split job, we will associate exactly one machine used to capacity. The process associates each machine with at most one split job.
Reference: [12] <author> S. Martello and P. Toth, </author> <title> "An algorithm for the generalized assignment problem," Operational Research '81, </title> <editor> J.P. Brams (editor), </editor> <publisher> North-Holland, </publisher> <address> New York (1981). </address>
Reference-contexts: Previous work on the generalized assignment problem has concentrated on exact solutions to the problem using enumerative schemes with bounding methods (Martello and Toth <ref> [12] </ref>, Ross and Soland [16], and Fisher, Jaikumar and Van Wassenhove [5]). Often, exact solutions are not necessary, and the time to find them may be prohibitive. Instead, good solutions are required quickly. <p> The first is the greedy algorithm, where each job is sequentially assigned to its "best" machine. In this test, modifying a suggestion of Martello and Toth <ref> [12] </ref>, we define the best machine for a job to be the one that has minimum cost divided by the remaining capacity of the machine. In a later test, we will modify the definition of "best machine" for highly congested systems. <p> Our second heuristic, called savings-regret, finds the difference between the best and second best machine for each job. The job with the largest difference is assigned to its best machine (this is essentially the heuristic in <ref> [12] </ref>). The results for all heuristics are then improved by 1- and 2-opting. Other heuristics are discussed by Jacobs ([9]) and Klastorin ([10]). Furthermore, it would be interesting to compare this heuristics with the optimization based routines of [5] and [12]. <p> to its best machine (this is essentially the heuristic in <ref> [12] </ref>). The results for all heuristics are then improved by 1- and 2-opting. Other heuristics are discussed by Jacobs ([9]) and Klastorin ([10]). Furthermore, it would be interesting to compare this heuristics with the optimization based routines of [5] and [12]. These methods often find very good or optimal solutions early in the branch and bound search tree. To generate our problems, we begin with the same distributions used in previous studies [12, 5]. These distributions are denoted A, B, C, and D. <p> Furthermore, it would be interesting to compare this heuristics with the optimization based routines of [5] and [12]. These methods often find very good or optimal solutions early in the branch and bound search tree. To generate our problems, we begin with the same distributions used in previous studies <ref> [12, 5] </ref>. These distributions are denoted A, B, C, and D. The results in those papers concentrated on exact solutions, so the problem sizes examined are naturally quite small. This testing concentrates on heuristic solutions, so our sizes are much larger.
Reference: [13] <author> R.D. McBride, </author> <title> "Solving embedded generalized network problems," </title> <journal> Eu-ropean Journal of Operational Research, </journal> <volume> 21, </volume> <month> 82-92 </month> <year> (1985). </year>
Reference-contexts: 8 4 16 9 5 8 6 8 6 4 t ? d & -1 % 1 ? 1/8 ? 1/4 dt - t t 1 dt - t dt - t 6 (a) (b) (c) a general linear programming code or a generalized network with side constraints code (McBride <ref> [13] </ref>), or the constraints can be relaxed by Lagrangian relaxation (for example, Fisher [3]). <p> In a production code, a network with side constraints program would be used, like that described <ref> [13] </ref>. Here we simply used a general linear programming code. The resulting improvement in the lower bound is reported in table 6, in the column labeled "L.P. with Cuts". Again, the entries are in percent over lower bound, and the values are the average of 10 runs.
Reference: [14] <author> G.L. Nemhauser and L.A. Wolsey, </author> <title> Combinatorial and Integer Programming, </title> <publisher> John Wiley, </publisher> <address> New York (1988). </address> <month> 23 </month>
Reference-contexts: We can strengthen the constraints found by removing variables from S i until S i [ fjg is a minimal cover (a minimal set that cannot be scheduled on 9 the machine) for constraint i (see the text by Nemhauser and Wolsey <ref> [14] </ref> for a survey of strengthening valid inequalities for the knapsack problem). There are more constraints that can be found directly from the linear relaxation. The following class of constraints is violated by the linear relaxation and is not prohibited by the constraints (4).
Reference: [15] <author> W.G. Nulty and M.A. </author> <title> Trick, "GNO/PC generalized network optimiza-tion system," O.R. </title> <journal> Letters, </journal> <volume> 2, </volume> <month> 101-102 </month> <year> (1988). </year>
Reference-contexts: By theorem 1, after the first iteration only m jobs remain to be scheduled, so the theorem follows. 2 This heuristic can be effectively implemented using the data structures of Brown and McBride [2] or Nulty and Trick <ref> [15] </ref>. These implementations solve generalized networks orders of magnitude faster than general simplex codes. Assuming that n is much larger than m, only one large generalized network problem must be solved; all networks after the first have at most m jobs to be scheduled.
Reference: [16] <author> G.T. Ross and R.M. Soland, </author> <title> "A branch and bound algorithm for the generalized assignment problem," </title> <journal> Mathematical Programming, </journal> <volume> 8, </volume> <month> 91-103 </month> <year> (1975). </year>
Reference-contexts: Previous work on the generalized assignment problem has concentrated on exact solutions to the problem using enumerative schemes with bounding methods (Martello and Toth [12], Ross and Soland <ref> [16] </ref>, and Fisher, Jaikumar and Van Wassenhove [5]). Often, exact solutions are not necessary, and the time to find them may be prohibitive. Instead, good solutions are required quickly.
Reference: [17] <author> G.T. Ross and R.M. Soland, </author> <title> "Modeling facility location problems as generalized assignment problems," </title> <journal> Management Science, </journal> <volume> 24, </volume> <month> 345-357 </month> <year> (1977). </year>
Reference: [18] <author> L. </author> <title> Schrage, Linear, integer, and quadratic programming with LINDO, </title> <publisher> The Scientific Press, </publisher> <address> Redwood City, CA (1986). </address> <month> 24 </month>
Reference-contexts: Further research on valid inequalities and, especially, separation algorithms is needed. Finally, we address the question of how good the heuristic is in absolute terms. For each of the smallest problems, we resolved each instance using the integer programming capabilities of LINDO <ref> [18] </ref>. The resulting integer solutions (again in terms of percentage over lower bound) are presented in Table 6 in the column "Integer Program". It is clear that LR-Heuristic finds reasonably good answers, but there is room to improve the lower bound generated.
References-found: 18

