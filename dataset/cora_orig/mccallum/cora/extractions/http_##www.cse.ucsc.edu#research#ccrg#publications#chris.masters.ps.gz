URL: http://www.cse.ucsc.edu/research/ccrg/publications/chris.masters.ps.gz
Refering-URL: http://www.cse.ucsc.edu/research/ccrg/publications.html
Root-URL: http://www.cse.ucsc.edu
Title: Improving TCP Performance over Wireless Networks at the Link Layer  
Author: J.J. Garcia-Luna-Aceves Anujan Varma Darrell D. E. Long Dean 
Degree: A thesis submitted in partial satisfaction of the requirements for the degree of Master of Science in Computer Science by Christina Parsa  The thesis of Christina Parsa is approved:  
Date: June 1998  
Affiliation: University of California Santa Cruz  of Graduate Studies and Research  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P802.11-Unapproved Draft: </author> <title> Wireless LAN Medium Access Control (MAC) and Physical Specifications. </title> <type> Technical report, </type> <institution> IEEE, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: For TULIP's implementation, we assume the specifications of the physical layer proposed in the IEEE 802.11 standard <ref> [1] </ref>. Our design allows at most one packet in transit at the MAC layer, which means that TULIP passes one packet at a time to the medium-access control (MAC) sub-layer. To accomplish packet interleaving, the service required by TULIP from the MAC layer is very simple, as Figure 3.1 indicates. <p> In the case of TDMA this time could be passed with the TRANS signal. However, because we are interested in contention-oriented MAC protocols (e.g., CSMA, DFWMAC <ref> [1] </ref>, FAMA [14]), the MAC is assumed to pass a signal WAIT that allows the TULIP sender to wait long enough for a data packet to arrive before it sends the next packet. <p> In particular, protocols based on four-way handshakes of the form: request-to-send (CTS), clear-to-send (CTS), data, and MAC-level ACK can be improved. The four-way handshake common to protocols such as DFWMAC <ref> [1] </ref> is effective only in one-way traffic scenarios, in which the MAC-level ACK 17 can be used to also transfer a TULIP ACK (or the ACK for any other link-control protocol). <p> Because of FAMA's handshake, the sender would not send more than one packet into the channel during a fading period, because it would not receive the necessary CTS to send any more data packets. The case would be the same for DWFMAC <ref> [1] </ref>.
Reference: [2] <author> Metricom Ricochet Network, </author> <month> April </month> <year> 1998. </year> <institution> http://www.metricom.com, Metricom Inc., Los Gatos, </institution> <address> CA 95032. </address>
Reference-contexts: Packets dropped on the channel are shown with arrows. BERR = 15 bits per million. (a) no link retransmissions (b) TULIP protocol 41 This is a well-known phenomenon in public wireless networks such as Metricom's Ricochet <ref> [2] </ref> which have a large delay variance through the RF portion of the network, which in effect causes very large TCP timeout values. 1 BERR of 15 bits/million with receiver window of 42Kbytes. 6.1.5 Delay protocol in every instance, and as the error rates increase, TULIP's standard deviation is also lower
Reference: [3] <author> A. DeSimone AND M.C. </author> <title> Chuah AND O.C. Yue. Throughput performance of transport-layer protocols over wireless lans. </title> <booktitle> In Proc. IEEE Globecom '93, </booktitle> <pages> pages 36-46, </pages> <address> Houston,TX, </address> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: Some previous work has even maintained that reliable link-layer approaches fail for large error rates on the wireless link because of competing retransmissions between the transport layer and the link layer <ref> [3] </ref>. However, during a TCP session, there are always TCP ACKs flowing in the reverse direction, and an efficient link-layer protocol can surely take advantage of this flow by piggybacking link-layer ACKs with transport layer ACKs. <p> DeSimone et al. <ref> [3] </ref> conclude that introducing reliability at the link layer introduces unnecessary and redundant retransmissions, because of competing retransmission strategies between the transport and link layers. <p> It is interesting to note in the plot that the variation in RTT is generally within the 500ms granularity of the TCP timer. Arguments against link-layer approaches <ref> [3] </ref> point out an increased variance when retransmissions are performed at the link layer; however, increased variance decreases TCP's susceptibility to timeouts (because the timeout value increases) and in effect reduces the number of timeouts! 40 (b) 2 seconds of the TCP transfer.
Reference: [4] <author> E. Ayanoglu, S. Paul, T. LaPorta, K. Sabnani, and R. Gitlin. Airmail: </author> <title> A link-layer protocol for wireless networks. </title> <journal> Wireless Networks, </journal> <volume> 1(1) </volume> <pages> 47-60, </pages> <year> 1995. </year>
Reference-contexts: Solutions based on higher-level protocols attempt to fool TCP by hiding the lossiness of the wireless link. Previous solutions fall into three major categories: Link Layer, Split Connection, and Proxy. The AIRMAIL protocol <ref> [4] </ref> provides a reliable link layer in conjunction with forward error correction (FEC). In this approach, the base station sends an entire window of data before an acknowledgment is returned by the mobile receiver. <p> In contrast to prior reliable link protocols, in TULIP, the sender does not stop and wait to receive a correct ACK after either every packet (as in the traditional Stop-and-wait ARQ strategy [9]) or after an entire window of packets (e.g., AIRMAIL <ref> [4] </ref>).
Reference: [5] <author> A. Bakre and B. R. Badrinath. I-TCP: </author> <title> indirect TCP for mobile hosts. </title> <booktitle> In Proc. 15th IEEE Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pages 136-43, </pages> <address> Vancouver, BC, Canada, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: In the split-connection approach, the TCP connection is split between the source and 10 base station and then between the base station and the wireless receiver <ref> [5] </ref>. The drawback to this approach is that it violates the semantics of TCP, and cannot therefore be easily deployed in the Internet. In the proxy approach, a proxy is inserted between sender and receiver TCP hosts to help TCP's performance.
Reference: [6] <author> H. Balakrishnan. </author> <type> Personal communication, </type> <month> Nov. </month> <year> 1997. </year> <institution> UC Berkeley, Berkeley, </institution> <address> CA. </address>
Reference-contexts: For optimization purposes retransmissions are performed after the receipt of 2 duplicate acknowledgments <ref> [6] </ref>. In addition, as specified [8], only 1 On-line source code available at ftp://daedalus.cs.berkeley.edu/pub/snoop/ 31 one rtt estimate is made per transmission window. For Experiment 2, the on-line version of Snoop was changed to fix a minor coding error.
Reference: [7] <author> H. Balakrishnan, V. Padmanabhan, S. Seshan, and R. Katz. </author> <title> A comparison of mechanisms for improving TCP performance over wireless links. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 6(5) </volume> <pages> 756-69, </pages> <month> Dec. </month> <year> 1997. </year>
Reference-contexts: However, this conclusion was reached based on an analysis that did not take into account the very generous timeout value calculated by TCP nor its granularity of 500ms, but rather an ideal case in which a timeout occurs at the estimated round-trip time value. Balakrishnan et al. <ref> [7] </ref> demonstrate that, as it can be expected, link-layer protocols that fail to provide in-order delivery to the application essentially compete with the upper layers by duplicating retransmissions. <p> The level-crossing rate, N (R) is the average number of times per second that the signal envelope crosses the fading level in a positive-going direction is: N = 2 f m e 2 51 6.3.1 Experiment 3a: Uniform Distribution of Burst Losses In the method used by Balakrishnan et. al. <ref> [7] </ref>, burst losses of a specific size are distributed uniformly over the run of the experiment. The results when bursts of sizes 2,4 and 6 data packets are spread every 64Kbytes of data are shown in Table 6.4.
Reference: [8] <author> H. Balakrishnan, S. Seshan, and R. Katz. </author> <title> Improving reliable transport and handoff performance in cellular wireless networks. </title> <booktitle> ACM Wireless Networks, </booktitle> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Other recent approaches to improve TCP's performance over wireless networks <ref> [8] </ref> overcome the problem of redundancy in retransmissions by making the link layer protocol aware of the state of the TCP connection. <p> We present the results of several simulation experiments showing that TULIP can dramatically improve the performance of TCP. Experiments assume a simple configuration with a base station and a single wireless host in order to compare the TULIP's performance against the performance of the Snoop protocol <ref> [8] </ref>, which is a TCP-aware solution. However, in contrast with Snoop and TCP-aware solutions, TULIP is a general solution that can 4 easily be extended for use with ad-hoc mobile networks and any type of reliable end-to-end protocol. <p> The proxy at the base station is responsible for retransmitting and intercepting duplicate TCP acknowledgment packets. The proxy residing at the base station, referred to as Snoop <ref> [8] </ref>, intercepts all packets entering an interface before the packets are passed on to IP. The Snoop protocol performs retransmissions of TCP packets when it detects a lost packet. <p> One packet per windowful of data is timed to obtain the round-trip time estimate. The second timer is a persist timer that senses idle periods. Snoop has been shown to improve TCP performance over wireless links with bit-error rates up to 15 bits per millions <ref> [8] </ref>; however, because Snoop relies only on the same cumulative acknowledgment as TCP and its own timeouts, losses are not recovered in a systematic fashion as Snoop must make reasonable guesses as to the pattern of losses. <p> Because t 1 &lt; t 3 and t 2 &lt; t 3 , t 3 is finite. 2 29 30 5. Implementation We have implemented TULIP and Snoop <ref> [8] </ref> in the C++ Protocol Toolkit (CPT) [10]. Wireless nodes in our simulation run the protocol stack shown in Figure 5.1. <p> The only higher-level protocol requesting reliable link service from TULIP is TCP, which in our implementation, has been ported from the TCP Reno code contained in the REAL simulator [20]. The code of the Snoop protocol <ref> [8] </ref> was modified from the on-line FreeBSD implementation 1 to run in CPT. Logically, Snoop is at the network layer as it monitors packets at the incoming interface and then passes them to IP. <p> to the FreeBSD implementation modified for use with CPT; however, hard coded values for the minimum timeout values for the retransmission timer and the persist timer were changed to 40ms and 200ms, respectively, and the retransmission timer's calculated value was set to 2 rtt to match that of published work <ref> [8] </ref>. For optimization purposes retransmissions are performed after the receipt of 2 duplicate acknowledgments [6]. In addition, as specified [8], only 1 On-line source code available at ftp://daedalus.cs.berkeley.edu/pub/snoop/ 31 one rtt estimate is made per transmission window. <p> the retransmission timer and the persist timer were changed to 40ms and 200ms, respectively, and the retransmission timer's calculated value was set to 2 rtt to match that of published work <ref> [8] </ref>. For optimization purposes retransmissions are performed after the receipt of 2 duplicate acknowledgments [6]. In addition, as specified [8], only 1 On-line source code available at ftp://daedalus.cs.berkeley.edu/pub/snoop/ 31 one rtt estimate is made per transmission window. For Experiment 2, the on-line version of Snoop was changed to fix a minor coding error. The algorithm followed by the Snoop protocol is described in Chapter 2.2. <p> Performance In this section we present the results of a series of simulation experiments used to compare the performance of TULIP, the Snoop protocol <ref> [8] </ref> and TCP implemented with no underlying link-layer protocol. We chose to compare TULIP against Snoop because the latter has been shown [8] to give very positive results in terms of throughput at low to moderate error rates in the radio link. <p> Performance In this section we present the results of a series of simulation experiments used to compare the performance of TULIP, the Snoop protocol <ref> [8] </ref> and TCP implemented with no underlying link-layer protocol. We chose to compare TULIP against Snoop because the latter has been shown [8] to give very positive results in terms of throughput at low to moderate error rates in the radio link. For both steady-state and in the early stages of a TCP data transfer, the performance metrics of primary interest are throughput, delay and goodput. <p> Experiment 3 examines performance when Raleigh fading [29] and burst losses are present on the channel. Table 6.1 gives the simulation parameters that are fixed for all experiments. These specifications are the same as those used in the Snoop experiments <ref> [8] </ref>, except for the radio characteristics and a lower transmission rate for our experiments. 6.1 Experiment One: Low Error Rates In this experiment the bit error rate is varied from 0 to 15 bits/million and the TCP receiver window is varied between 42kbytes and 16kbytes.
Reference: [9] <author> D. Bertsekas and R. Gallager. </author> <title> Data Networks. </title> <publisher> Prentice Hall, </publisher> <address> 2nd edition, </address> <year> 1992. </year>
Reference-contexts: In contrast to prior reliable link protocols, in TULIP, the sender does not stop and wait to receive a correct ACK after either every packet (as in the traditional Stop-and-wait ARQ strategy <ref> [9] </ref>) or after an entire window of packets (e.g., AIRMAIL [4]). <p> Flow control and error recovery are managed by the sender through a sliding window of size W , depicted in Figure 3.2 that is essentially the same as the window of a typical selective repeat ARQ strategy <ref> [9] </ref>. Data packets are assigned sequence numbers modulo 2W and sender and receiver maintain a buffer of W packets to ensure correct operation [9]. <p> through a sliding window of size W , depicted in Figure 3.2 that is essentially the same as the window of a typical selective repeat ARQ strategy <ref> [9] </ref>. Data packets are assigned sequence numbers modulo 2W and sender and receiver maintain a buffer of W packets to ensure correct operation [9]. The sender maintains a transmission buffer with all unacknowledged packets in its transmission window, and a retransmission list specifying the sequence numbers of those packets that must be retransmitted. <p> TULIP uses a connection establishment strategy that is much the same as those reported in the literature for selective repeat protocols <ref> [9] </ref>. 3.3 MAC-Level Acceleration For the case of reservation-oriented MAC protocols, transmission delays can be reduced by a closer interaction between the MAC protocol and TULIP. In particular, protocols based on four-way handshakes of the form: request-to-send (CTS), clear-to-send (CTS), data, and MAC-level ACK can be improved. <p> An ARQ protocol is live as long as it supplies the network with the correct results as long as the network layer requires the service, which implies that the protocol is free of deadlocks. The proofs follow the method presented by Bertsekas and Gallager <ref> [9] </ref>. The pseudocode covering TULIP's packet selection algorithm is given in Chapter 3. The sender's window is of size W and is managed through two sequence numbers, SN min and SN max which are maintained mod n, where n = 2 fl W .
Reference: [10] <author> D. Beyer and B. Nguyen. </author> <title> The C++ Protocol Toolkit: Overview. </title> <note> Rooftop Communications Technical Manual, </note> <year> 1995. </year>
Reference-contexts: Because t 1 &lt; t 3 and t 2 &lt; t 3 , t 3 is finite. 2 29 30 5. Implementation We have implemented TULIP and Snoop [8] in the C++ Protocol Toolkit (CPT) <ref> [10] </ref>. Wireless nodes in our simulation run the protocol stack shown in Figure 5.1. A key feature of our simulation is that it is based on the exact same source code that runs in the WING prototypes (which are wireless IP routers) [16], and in hosts attached to the WINGs.
Reference: [11] <author> R. Caceres and L. Iftode. </author> <title> Improving the performance of reliable transport protocols in mobile computing environments. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 13(5), </volume> <year> 1995. </year>
Reference: [12] <author> Kevin Fall and Sally Floyd. </author> <title> Simulation-based comparisons of tahoe,reno, and sack tcp. </title> <journal> In Computer Communication Review, </journal> <volume> volume 26 No. 3, </volume> <pages> pages 5 - 21, </pages> <month> July, </month> <year> 1996. </year>
Reference-contexts: We have demonstrated through simulations that current TCP does not correctly respond to wireless losses and that when appreciable losses occur (particularly multiple losses per window), TCP unnecessarily reduces its window and its throughput comes to a near standstill. New proposals for TCP, such as TCP-SACK <ref> [12] </ref>, will help to identify the precise lost segments; however, this algorithm will still interpret these losses as congestion and reduce the sender's window.
Reference: [13] <author> F.Swarts and H.C. Ferreira. </author> <title> Markov characterization of digital fading in mobile VHF channels. </title> <journal> IEEE Transactions on Vehicular Technology, </journal> <volume> 43(4) </volume> <pages> 977-985, </pages> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: packets are dropped for TULIP. (a) 53 6.3.2 Experiment 3b: Markov Model of Burst Losses This method to simulate channel fading consists of a two-state Markov model taken directly from the work by Lettieri et al. [21] which is also discussed by Wang et al. [30] and Swarts et al. <ref> [13] </ref>. The Markov model shown in Figure 6.14 is used to model the channel during periods of fading; the model consists of a two-state Markov chain representing Good and Bad states on the channel, transition probabilities into and out of the states, and channel loss probabilities associated with each state.
Reference: [14] <author> C. L. Fullmer and J.J. Garcia-Luna-Aceves. </author> <title> Solutions to hidden terminal problems in wireless networks. </title> <booktitle> In Proc. SIGCOMM'97, </booktitle> <pages> pages 39-49, </pages> <address> Cannes, France, </address> <month> Sept. </month> <year> 1997. </year>
Reference-contexts: In the case of TDMA this time could be passed with the TRANS signal. However, because we are interested in contention-oriented MAC protocols (e.g., CSMA, DFWMAC [1], FAMA <ref> [14] </ref>), the MAC is assumed to pass a signal WAIT that allows the TULIP sender to wait long enough for a data packet to arrive before it sends the next packet. <p> However, in two-way traffic scenarios, the MAC-level ACK is unnecessary, because a round of RTS-CTS handshakes has to take place for both sides of the logical link to transmit data. Our implementation of TULIP runs on top of FAMA-NCS <ref> [14] </ref> and includes a MAC-acceleration feature, depicted in Figure 3.6 (a), aimed at reducing link delays. In essence, after a data packet has been received by FAMA and passed up to TULIP, TULIP informs FAMA of the size of the packet it now needs to send. <p> Various parameters such as propagation delay, bit error rate, and offered load can be altered and are also specified through scripts. Either TULIP or a dummy link-layer that does not perform retransmissions is used at Layer 2. Our implementation of TULIP runs on top of FAMA-NCS <ref> [14] </ref> with the MAC acceleration feature described in Chapter 3. TULIP in turn interacts with IP [24] and the wireless Internet routing protocol (WIRP) [23] for packet forwarding. WIRP control packets are treated by TULIP as any other UDP packet (i.e., as unreliable link packets).
Reference: [15] <author> C.L. Fullmer. </author> <type> Personal communication, </type> <month> April </month> <year> 1998. </year> <institution> Rooftop Communications Corp., Mountain View, </institution> <address> CA 94041. </address>
Reference: [16] <author> J.J. Garcia-Luna-Aceves, C.L. Fullmer, E. Madruga, D. Beyer, and T. Frivold. </author> <title> Wireless Internet Gateways (WINGS). </title> <booktitle> In Proc. </booktitle> <address> MILCOM'97, Monterey,California, </address> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: In this thesis, we show by example that a properly designed link layer (medium access and logical link control) implemented in the "wireless modem" (e.g., WINGS <ref> [16] </ref>, WaveLAN) can allow TCP to operate efficiently over wireless networks, with no changes to the hosts and TCP's semantics, and without requiring proxies between sender and receiver TCP. <p> Wireless nodes in our simulation run the protocol stack shown in Figure 5.1. A key feature of our simulation is that it is based on the exact same source code that runs in the WING prototypes (which are wireless IP routers) <ref> [16] </ref>, and in hosts attached to the WINGs. The IEEE 802.11 specifications are used at the physical layer to simulate the broadcast medium. CPT simulates the wireless and wired transmission media with specific parameters and channel characteristics specified through script files read at runtime.
Reference: [17] <author> V. Jacobson and M. Karels. </author> <title> Congestion avoidance and control. </title> <booktitle> In Proc. SIGCOMM'88, </booktitle> <pages> pages 16-19, </pages> <address> Stanford, CA, </address> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: segment every round-trip time) [11]<ref> [17] </ref>. Maximum throughput occurs in a TCP connection when the TCP congestion window is as large as the bandwidth-delay product of the connection. Current versions of TCP react to losses differently and adjust the TCP congestion window in various ways. With the Reno [26] and Tahoe [17] versions the arrival of three duplicate acknowledgments allows for the fast retransmission of a lost packet. <p> Different strategies regarding how and when to decide a packet is missing, and thereafter how the algorithm should respond, have been implemented; various versions of TCP are present in the Internet. In 1988 the Tahoe version was implemented in 4.3 BSD Tahoe TCP <ref> [17] </ref>. It included slow start, congestion avoidance and fast retransmit. In 1990 Reno was implemented in 4.3 BSD Reno TCP [26]. <p> In addition, this value was rounded up to expire with a 500ms granularity, which is commonly referred to as TCP's coarse-grain timer. 6 In <ref> [17] </ref> Jacobson pointed out that the above approach fails to respond to wide fluctuations in RTT variance; in fact, fi = 2 can adapt to loads of at most 30%. Therefore, the RTT and RTO calculation were modified to also include the variance in the RTT estimate.
Reference: [18] <author> Van Jacobson and Michael J. Karels. </author> <title> Congestion avoidance and control. </title> <booktitle> In SIGCOMM Symposium on Communications Architectures and Protocols, </booktitle> <pages> pages 314 - 329, </pages> <year> 1988. </year> <month> 60 </month>
Reference-contexts: In wired networks (as opposed to wireless), packet damage is rare (t 1%); therefore, at the time TCP was written it was assumed that the most likely cause of packet loss was due to congestion in the network. Jacobson proposed <ref> [18] </ref> to use the following congestion avoidance algorithm if TCP determines congestion exists in the network.
Reference: [19] <author> P. Karn and C. Partridge. </author> <title> Improving round-trip time estimates in reliable transport protocols. </title> <journal> In Computer Communication Review, </journal> <volume> volume 17 No. 5, </volume> <pages> pages 2 - 7, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: The first time RTO will be multiplied by 2, then by 4 etc. Karn's Algorithm When a packet is retransmitted and an ACK is finally received back at the source, there is no way to determine to which actual transmitted packet the ACK corresponds. Therefore, in <ref> [19] </ref> Karn and Partridge specify that the RTT estimators should not be updated for retransmitted packets. In other words, the RTT estimator only applies to packets which 7 are transmitted successfully the first time.
Reference: [20] <author> S. Keshav. </author> <title> REAL: A network simulator. </title> <type> Technical report, </type> <institution> University of California, Berkeley, Berkeley, California, </institution> <year> 1988. </year> <type> Technical Report 88/472. </type>
Reference-contexts: WIRP control packets are treated by TULIP as any other UDP packet (i.e., as unreliable link packets). The only higher-level protocol requesting reliable link service from TULIP is TCP, which in our implementation, has been ported from the TCP Reno code contained in the REAL simulator <ref> [20] </ref>. The code of the Snoop protocol [8] was modified from the on-line FreeBSD implementation 1 to run in CPT. Logically, Snoop is at the network layer as it monitors packets at the incoming interface and then passes them to IP.
Reference: [21] <author> P. Lettieri, C. Fragouli, and M. Srivastava. </author> <title> Low power error control for wireless links. </title> <booktitle> In Proc. Third ACM/IEEE MobiCom Conference, </booktitle> <pages> pages 139-150, </pages> <address> Budapest,Hungary, </address> <month> Sept. </month> <year> 1997. </year>
Reference-contexts: In cases where error losses are high, retransmissions at any location other than the faulty link would result in reduced goodput over all links in the wired path from source to receiver. Arguments against link-layer retransmissions <ref> [21] </ref> claim that reliable links incur unnecessary transmissions due to the required transmission of acknowledgments in the reverse path (and therefore unnecessary power consumption resulting from transmission of the ACKs). <p> Snoop only suffers from 4 original packet losses (and 2 retransmissions), whereas 6 original packets are dropped for TULIP. (a) 53 6.3.2 Experiment 3b: Markov Model of Burst Losses This method to simulate channel fading consists of a two-state Markov model taken directly from the work by Lettieri et al. <ref> [21] </ref> which is also discussed by Wang et al. [30] and Swarts et al. [13]. <p> We have performed this experiment for the case of pedestrian speed with parameters f = 915MHz, v = 2km/hr, = -20dB. The transition probabilities to be in either a good or bad state were calculated by Lettieri et al. <ref> [21] </ref> to be t GB = 6:67e 7 and t BG = 6:65e 5 , respectively. 54 The results of this experiment are presented in Figures 6.15 (a) and (b) as the BERR in the Good state is varied from 0.01 to 100 bits/million and the loss probability in the Bad
Reference: [22] <author> M.Ritter and R.Friday. </author> <type> Personal communication, </type> <month> April </month> <year> 1998. </year> <institution> Metricom Inc., Los Gatos, </institution> <address> CA 95032. </address>
Reference: [23] <author> S. Murthy and J.J. Garcia-Luna-Aceves. </author> <title> An efficient routing protocol for wireless networks. </title> <journal> ACM Mobile Networks and Applications Journal, </journal> <volume> 1(2), </volume> <year> 1996. </year>
Reference-contexts: Either TULIP or a dummy link-layer that does not perform retransmissions is used at Layer 2. Our implementation of TULIP runs on top of FAMA-NCS [14] with the MAC acceleration feature described in Chapter 3. TULIP in turn interacts with IP [24] and the wireless Internet routing protocol (WIRP) <ref> [23] </ref> for packet forwarding. WIRP control packets are treated by TULIP as any other UDP packet (i.e., as unreliable link packets).
Reference: [24] <author> J.B. Postel. </author> <title> Internet Protocol. </title> <type> Technical report, </type> <institution> SRI Network Information Center, </institution> <month> September </month> <year> 1981. </year> <note> RFC 791. </note>
Reference-contexts: Either TULIP or a dummy link-layer that does not perform retransmissions is used at Layer 2. Our implementation of TULIP runs on top of FAMA-NCS [14] with the MAC acceleration feature described in Chapter 3. TULIP in turn interacts with IP <ref> [24] </ref> and the wireless Internet routing protocol (WIRP) [23] for packet forwarding. WIRP control packets are treated by TULIP as any other UDP packet (i.e., as unreliable link packets).
Reference: [25] <author> J.B. Postel. </author> <title> Transmission Control Protocol. </title> <type> Technical report, </type> <institution> SRI Network Information Center, </institution> <month> September </month> <year> 1981. </year> <note> RFC 793. </note>
Reference-contexts: 1. Introduction Wireless networks are quickly becoming an integral part of the Internet and reliable protocols such as TCP <ref> [25] </ref> must be supported over these networks. Unfortunately, although TCP works very well for wired networks with minimal losses other than those due to congestion, wired and wireless networks are significantly different in terms of bandwidth, speed, propagation delay, and channel reliability. <p> The formula used was: R ffR + (1 ff)M (1) where ff was typically equal to 0.9. Using this calculation, RFC 793 <ref> [25] </ref> recommended the retransmission timeout value (RTO) be set to RT O = Rfi (2) where fi is a delay variance factor with a recommended value of 2.
Reference: [26] <editor> W. Richard Stevens. TCP/IP Illustrated, </editor> <volume> Volume 1. </volume> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Maximum throughput occurs in a TCP connection when the TCP congestion window is as large as the bandwidth-delay product of the connection. Current versions of TCP react to losses differently and adjust the TCP congestion window in various ways. With the Reno <ref> [26] </ref> and Tahoe [17] versions the arrival of three duplicate acknowledgments allows for the fast retransmission of a lost packet. <p> In 1988 the Tahoe version was implemented in 4.3 BSD Tahoe TCP [17]. It included slow start, congestion avoidance and fast retransmit. In 1990 Reno was implemented in 4.3 BSD Reno TCP <ref> [26] </ref>. <p> Therefore, if a segment is transmitted while the timer is in use, then a timeout is not recorded for that segment. Timing is done by incrementing a counter every 500-ms when the TCP timer routine is invoked <ref> [26] </ref>. When a timeout value is calculated, the corresponding segment sequence number is also recorded. When an ACK for this segment arrives, the timer is turned off. Each time there is a timeout for a segment, an exponential back-off is applied to the RTO. <p> Slow start adds another window to the sender's TCP: the congestion window (cwnd), which is set equal to one segment when a connection is established or the slow start phase is entered <ref> [26] </ref> and never exceeds the receiver's advertised window. TCP uses a slow start threshhold (ssthresh) as a value to be used to determine if the slow start algorithm should be executed. Whenever an acknowledgment arrives, if cwnd &lt; ssthresh then slow start is performed.
Reference: [27] <author> W.T. Strayer, B.J. Dempsey, and A.C. Weaver. </author> <title> XTP The Xpress Transfer Protocol. </title> <publisher> Addison-Wesley, </publisher> <address> 1st edition, </address> <year> 1992. </year>
Reference-contexts: The sequence number, which we call cumulative acknowledgment (CACK), specifies the highest sequence number of a data packet received in sequence. The bit vector is a succinct way to specify negative acknowledgments (NACKs) and is taken from prior well-known selective-repeat protocols (e.g., XTP <ref> [27] </ref>). Starting with the sequence number specified in the CACK, the bit vector notifies the sender about the successful or unsuccessful reception of up to W 1 additional data packets.
Reference: [28] <author> F.A. Tobagi and L. Kleinrock. </author> <title> The effect of acknowledgment traffic on the capacity of packet-switched radio channels. </title> <journal> IEEE Transactions on Networking, </journal> <volume> COM-26(6):815-826, </volume> <year> 1978. </year>
Reference-contexts: If CSMA and ALOHA were to be used, they would have to be modified to use priority ACKS <ref> [28] </ref>, for example, in order to provide the WAIT signal needed by TULIP. This procedure of interleaving allows the two sources to be self-clocking during the bidirectional transfer of data over the link. The complete sender pseudo-code which describes the bidirectional sharing of the link is given in Figure 3.3.
Reference: [29] <author> V.Garg and J. Wilkes. </author> <title> Wireless and Personal Communications Systems. </title> <publisher> American Telephone and Telegraph Co., </publisher> <address> 1st edition, </address> <year> 1996. </year>
Reference-contexts: Experiment 1 examines low to moderate error levels and Experiment 2 examines performance as the error rate is increased to very high levels. Experiment 3 examines performance when Raleigh fading <ref> [29] </ref> and burst losses are present on the channel. Table 6.1 gives the simulation parameters that are fixed for all experiments. <p> Fading is often caused by the movement of mobile nodes, but can also be caused by objects which move in front of and around a mobile node. As described by Garg <ref> [29] </ref>, the average fade duration T for which a signal is below a specified signal level R is approximately calculated as: T (R) = 1 2f m where f m = v is the maximum Doppler frequency, and is the ratio between the specified level and the RM S amplitude of
Reference: [30] <author> H.S. Wang and N. Moayeri. </author> <title> Finite-state Markov channel-A useful model for radio communication channels. </title> <journal> IEEE Transactions on Vehicular Technology, </journal> <volume> 44(1) </volume> <pages> 163-171, </pages> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: 2 retransmissions), whereas 6 original packets are dropped for TULIP. (a) 53 6.3.2 Experiment 3b: Markov Model of Burst Losses This method to simulate channel fading consists of a two-state Markov model taken directly from the work by Lettieri et al. [21] which is also discussed by Wang et al. <ref> [30] </ref> and Swarts et al. [13].
References-found: 30

