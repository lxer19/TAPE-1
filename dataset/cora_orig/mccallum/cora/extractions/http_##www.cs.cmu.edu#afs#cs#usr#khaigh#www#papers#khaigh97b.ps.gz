URL: http://www.cs.cmu.edu/afs/cs/usr/khaigh/www/papers/khaigh97b.ps.gz
Refering-URL: http://www.cs.cmu.edu/afs/cs/usr/khaigh/www/papers/khaigh97b.abstract.html
Root-URL: http://www.cs.cmu.edu
Email: khaigh@cs.cmu.edu mmv@cs.cmu.edu  
Title: Autonomous Robots,  Interleaving Planning and Robot Execution for Asynchronous User Requests  
Author: KAREN ZITA HAIGH MANUELA M. VELOSO 
Address: Pittsburgh PA 15213-3891  
Affiliation: Computer Science Department, Carnegie Mellon University,  
Web: http://www.cs.cmu.edu/~khaigh http://www.cs.cmu.edu/~mmv  
Note: 1-18 c Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  
Abstract: Rogue is an architecture built on a real robot which provides algorithms for the integration of high-level planning, low-level robotic execution, and learning. Rogue addresses successfully several of the challenges of a dynamic office gopher environment. This article presents the techniques for the integration of planning and execution. Rogue uses and extends a classical planning algorithm to create plans for multiple interacting goals introduced by asynchronous user requests. Rogue translates the planner's actions to robot execution actions and monitors real world execution. Rogue is currently implemented using the prodigy4.0 planner and the Xavier robot. This article describes how plans are created for multiple asynchronous goals, and how task priority and compatibility information is used to achieve appropriate efficient execution. We describe how Rogue communicates with the planner and the robot to interleave planning with execution so that the planner can replan for failed actions, identify the actual outcome of an action with multiple possible outcomes, and take opportunities from changes in the environment. Rogue represents a successful integration of a classical artificial intelligence planner with a real mobile robot. 
Abstract-found: 1
Intro-found: 1
Reference: [Ambros-Ingerson & Steel, 1988] <author> Ambros-Ingerson, J. A., and Steel, S. </author> <year> (1988). </year> <title> Integrating planning, execution and monitoring. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence (AAAI-88). </booktitle> <editor> St. </editor> <title> Interleaving Planning and Robot Execution 17 Paul, </title> <address> MN, (Menlo Park, CA: </address> <publisher> AAAI Press), </publisher> <pages> pp. 83-88. </pages>
Reference: [Atkins, Durfee, & Shin, 1996] <author> Atkins, E. M.; Durfee, E. H.; and Shin, K. G. </author> <year> (1996). </year> <title> Detecting and reacting to unplanned-for world states. </title> <booktitle> In Papers from the 1996 AAAI Fall Symposium "Plan Execution: Problems and Issues". </booktitle> <address> Boston, MA, (Menlo Park, CA: </address> <publisher> AAAI Press), </publisher> <pages> pp. 1-7. </pages>
Reference-contexts: Conditional planning is one approach that aims at considering in the domain model all the possible contingencies of the world and planning ahead for each individual one <ref> [Atkins, Durfee, & Shin, 1996, Mansell, 1993, Pryor, 1994, Schoppers, 1989] </ref>. In most complex environments, the large number of possible contingencies means that complete conditional planning becomes infeasible, but may nevertheless be appropriate in particularly dangerous domains.
Reference: [Blythe, 1994] <author> Blythe, J. </author> <year> (1994). </year> <title> Planning with external events. </title> <booktitle> In Proceedings of the Tenth Conference on Uncertainty in Artificial Intelligence. </booktitle> <address> Seattle, WA, (San Mateo, CA: </address> <publisher> Morgan Kaufmann), </publisher> <pages> pp. 94-101. </pages>
Reference: [Bonasso & Kortenkamp, 1996] <author> Bonasso, R. P., and Ko-rtenkamp, D. </author> <year> (1996). </year> <title> Using a layered control architecture to alleviate planning with incomplete information. In Proceedings of the AAAI Spring Symposium "Planning with Incomplete Information for Robot Problems". </title> <publisher> Stanford, </publisher> <address> CA, (Menlo Park, CA: </address> <publisher> AAAI Press), </publisher> <pages> pp. 1-4. </pages>
Reference-contexts: Rogue however abstracts much of the lower level details that PRS explicitly reasons about, meaning that Rogue can be seen as more reliable and efficient because system functionality is suitably partitioned [Pell et al., 1997, Simmons et al., 1997]. NMRA [Pell et al., 1997] and 3 T <ref> [Bonasso & Kortenkamp, 1996] </ref> both function in domains with many asynchronous goals, but both planners respond to new goals and serious action failures by abandoning existing planning and restarting the planner.
Reference: [Carbonell, Knoblock, & Minton, 1990] <author> Carbonell, J. G.; Knoblock, C. A.; and Minton, S. </author> <year> (1990). </year> <title> Prodigy: An integrated architecture for planning and learning. </title> <editor> In VanLehn, K. (ed.), </editor> <booktitle> Architectures for Intelligence. </booktitle> <address> (Erl-baum: Hillsdale, NJ). </address> <note> Also available as Technical Report CMU-CS-89-189, </note> <institution> Computer Science Department, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: The deliberative behaviours include vision interpretation, maintenance of occupancy grids & topological maps, and path planning & global navigation. The underlying architecture is described in more detail by Simmons et al. [1997]. prodigy is a domain-independent planner that serves as a testbed for machine learning research <ref> [Carbonell, Knoblock, & Minton, 1990, Veloso et al., 1995] </ref>. The current version, prodigy4.0 is a nonlinear planner that follows a state-space Fig. 1. Rogue Architecture. Fig. 2. Xavier the Robot. search guided by means-ends analysis and backward chaining.
Reference: [Dean & Boddy, 1988] <author> Dean, T. L., and Boddy, M. </author> <year> (1988). </year> <title> An analysis of time-dependent planning. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence (AAAI-88). </booktitle> <address> St. Paul, MN, (Menlo Park, CA: </address> <publisher> AAAI Press), </publisher> <pages> pp. 49-54. </pages>
Reference: [Dean et al., 1990] <author> Dean, T.; Basye, K.; Chekaluk, R.; Hyun, S.; Lejter, M.; and Randazza, M. </author> <year> (1990). </year> <title> Coping with uncertainty in a control system for navigation and exploration. </title> <booktitle> In Proceedings of the Eigth National Conference on Artificial Intelligence (AAAI-90). </booktitle> <address> Boston, MA, (Cambridge, MA: </address> <publisher> MIT Press), </publisher> <pages> pp. 1010-1015. </pages>
Reference: [DellaFera et al., 1988] <author> DellaFera, C. A.; Eichin, M. W.; French, R. S.; Jedlinsky, D. C.; Kohl, J. T.; and Som-merfeld, W. E. </author> <year> (1988). </year> <title> The Zephyr notification service. </title> <booktitle> In Proceedings of the USENIX Winter Conference. </booktitle> <address> Dal-las, TX, (Berkeley, CA: </address> <publisher> USENIX Association), </publisher> <pages> pp. 213-219. </pages>
Reference-contexts: Interleaving Planning and Robot Execution 5 Fig. 3. User request interface. It successfully interleaves compatible requests and creates efficient plans for completing all the tasks. 2.1. Receiving a Request Users submit their task requests through one of three different interfaces: the World Wide Web [Simmons et al., 1997], Zephyr <ref> [DellaFera et al., 1988, Simmons et al., 1997] </ref>, or a specially de signed graphical user interface (Figure 3) [Haigh & Veloso, 1996].
Reference: [Drummond et al., 1993] <author> Drummond, M.; Swanson, K.; Bresina, J.; and Levinson, R. </author> <year> (1993). </year> <title> Reaction-first search. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence (IJCAI-93). </booktitle> <address> (San Mateo, CA: </address> <publisher> Morgan Kaufmann), </publisher> <pages> pp. 1408-1414. </pages>
Reference: [Fikes, Hart, & Nilsson, 1972] <author> Fikes, R. E.; Hart, P. E.; and Nilsson, N. J. </author> <year> (1972). </year> <title> Learning and executing generalized robot plans. </title> <journal> Artificial Intelligence, </journal> <volume> 3(4) </volume> <pages> 231-249. </pages>
Reference: [Firby, 1989] <author> Firby, R. J. </author> <year> (1989). </year> <title> Adaptive Execution in Complex Dynamic Worlds. </title> <type> Ph.D. Dissertation, </type> <institution> Yale University, </institution> <address> New Haven, CT. </address>
Reference-contexts: Some of these procedures also contain simple failure recovery procedures, particularly for ac tions that have common and known failures. For example, an action might simply be repeated, as in the navigateToGoal command. These procedures resemble schemas [Georgeff & Ingrand, 1989, Hor-mann, Meier, & Schloen, 1991] or RAPs <ref> [Firby, 1989, Gat, 1992, Pell et al., 1997] </ref>, in that they specify how to execute the action, what to monitor in the environment, and some recovery procedures.
Reference: [Gat, 1992] <author> Gat, E. </author> <year> (1992). </year> <title> Integrating planning and reacting in a heterogeneous asynchronous architecture for controlling real-world mobile robots. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence (AAAI-92). </booktitle> <pages> pp. 809-815. </pages>
Reference-contexts: Some of these procedures also contain simple failure recovery procedures, particularly for ac tions that have common and known failures. For example, an action might simply be repeated, as in the navigateToGoal command. These procedures resemble schemas [Georgeff & Ingrand, 1989, Hor-mann, Meier, & Schloen, 1991] or RAPs <ref> [Firby, 1989, Gat, 1992, Pell et al., 1997] </ref>, in that they specify how to execute the action, what to monitor in the environment, and some recovery procedures.
Reference: [Georgeff & Ingrand, 1989] <author> Georgeff, M. P., and Ingrand, F. F. </author> <year> (1989). </year> <title> Decision-makingin an embeddedreasoning system. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence (IJCAI-89). </booktitle> <address> Detroit, MI, (San Mateo, CA: </address> <publisher> Morgan Kaufmann), </publisher> <pages> pp. 972-978. </pages>
Reference-contexts: Rogue easily incorporates asynchronous goals into its system without losing context of existing tasks, allowing it to take advantage of opportunities as they arise. By intelligent combining of compatible tasks, Rogue can respond quickly and efficiently to user requests. Amongst the other interleaving planners, only PRS <ref> [Georgeff & Ingrand, 1989] </ref> handles multiple asynchronous goals. Rogue however abstracts much of the lower level details that PRS explicitly reasons about, meaning that Rogue can be seen as more reliable and efficient because system functionality is suitably partitioned [Pell et al., 1997, Simmons et al., 1997]. <p> Some of these procedures also contain simple failure recovery procedures, particularly for ac tions that have common and known failures. For example, an action might simply be repeated, as in the navigateToGoal command. These procedures resemble schemas <ref> [Georgeff & Ingrand, 1989, Hor-mann, Meier, & Schloen, 1991] </ref> or RAPs [Firby, 1989, Gat, 1992, Pell et al., 1997], in that they specify how to execute the action, what to monitor in the environment, and some recovery procedures.
Reference: [Gervasio & DeJong, 1991] <author> Gervasio, M. T., and DeJong, G. F. </author> <year> (1991). </year> <title> Learning probably completable plans. </title> <type> Technical Report UIUCDCS-R-91-1686, </type> <institution> University of Illinois at Urbana-Champaign, IL, Urbana, IL. </institution>
Reference: [Goodwin & Simmons, 1992] <author> Goodwin, R., and Simmons, R. G. </author> <year> (1992). </year> <title> Rational handling of multiple goals for mobile robots. </title> <editor> In Hendler, J. (ed.), </editor> <booktitle> Artificial Intelligence Planning Systems: Proceedings of the First International Conference (AIPS-92). </booktitle> <address> College Park, MD, (San Mateo, CA: </address> <publisher> Morgan Kaufmann), </publisher> <pages> pp. 86-91. </pages>
Reference: [Goodwin, 1994] <author> Goodwin, R. </author> <year> (1994). </year> <title> Reasoning about when to start acting. </title> <editor> In Hammond, K. (ed.), </editor> <booktitle> Artificial Intelligence Planning Systems: Proceedings of the Second International Conference (AIPS-94). </booktitle> <address> Chicago, IL, (Menlo Park, CA: </address> <publisher> AAAI Press), </publisher> <pages> pp. 86-91. </pages>
Reference: [Haigh & Veloso, 1996] <author> Haigh, K. Z., and Veloso, M. </author> <year> (1996). </year> <title> Interleaving planning and robot execution for asynchronous user requests. </title> <booktitle> In Proceedings of the International Conference on Intelligent Robots and Systems (IROS). </booktitle> <address> Osaka, Japan, (New York, NY: </address> <publisher> IEEE Press), </publisher> <pages> pp. 148-155. </pages>
Reference-contexts: Receiving a Request Users submit their task requests through one of three different interfaces: the World Wide Web [Simmons et al., 1997], Zephyr [DellaFera et al., 1988, Simmons et al., 1997], or a specially de signed graphical user interface (Figure 3) <ref> [Haigh & Veloso, 1996] </ref>. The slots in this last interface are automatically filled in with default information available from the user's plan file, and the deadline time defaults to one hour in the future. The interface can be extended with additional tasks at any time.
Reference: [Haigh & Veloso, 1997] <author> Haigh, K. Z., and Veloso, M. M. </author> <year> (1997). </year> <title> High-level planning and low-level execution: Towards a complete robotic agent. </title> <editor> In Johnson, W. L. (ed.), </editor> <booktitle> Proceedings of the First International Conference on Autonomous Agents. </booktitle> <address> Marina del Rey, CA, (New York, NY: </address> <publisher> ACM Press), </publisher> <pages> pp. 363-370. </pages>
Reference-contexts: Our framework consists of integrating Xavier [O'Sullivan, Haigh, & Armstrong, 1997, Simmons et al., 1997] with the prodigy4.0 planning and learning system [Veloso et al., 1995]. The resulting architecture and algorithms is Rogue <ref> [Haigh & Veloso, 1997] </ref>. Rogue provides a setup where users can post tasks for which the planner generates appropriate plans, delivers them to the robot, monitors their execution, and learns from feedback from execution performance. Rogue effectively enables the communication between Xavier, prodigy4.0 and the users.
Reference: [Haigh & Veloso, 1998] <author> Haigh, K. Z., and Veloso, M. M. </author> <year> (1998). </year> <title> Learning situation-dependent costs: Improving planning from probabilistic robot execution. </title> <editor> In Sycara, K. P. (ed.), </editor> <booktitle> Proceedings of the Second International Conference on Autonomous Agents. </booktitle> <address> Minneapolis, MN, (Menlo Park, CA: </address> <publisher> AAAI Press). Submission. </publisher>
Reference-contexts: Rogue effectively enables the communication between Xavier, prodigy4.0 and the users. In this article, we focus on presenting the techniques underlying the planning and execution control in Rogue. The learning algorithm is under development and results are being compiled and can be found in <ref> [Haigh & Veloso, 1998] </ref>. The planning and execution capabilities of Rogue form the 2 Haigh & Veloso foundation for a complete, learning, autonomous agent. Rogue generates and executes plans for multiple interacting goals which arrive asynchronously and whose task structure is not known a priori. <p> The goal of our research is to build a complete planning, executing and learning autonomous robotic agent. Rogue's contributions go beyond the integration of planning and execution. Rogue incorporates learning from execution experience <ref> [Haigh & Veloso, 1998] </ref>. The learning algorithm involves extracting relevant information from real execution traces in order to detect patterns in the environment to improve the robot's behaviour.
Reference: [Hormann, Meier, & Schloen, 1991] <author> Hormann, A.; Meier, W.; and Schloen, J. </author> <year> (1991). </year> <title> A control architecture for and advanced fault-tolerant robot system. </title> <booktitle> Robotics and Autonomous Systems, </booktitle> <address> 7(2-3):211-225. </address>
Reference: [Hughes & Ranganathan, 1994] <author> Hughes, K., and Ran-ganathan, N. </author> <year> (1994). </year> <title> Modeling sensor confidence for sensor integration tasks. </title> <journal> International Journal of Pattern Recognition and Artificial Intelligence, </journal> <volume> 8(6) </volume> <pages> 1301-1318. </pages> <note> [Kushmerick, Hanks, & Weld, 1993] Kushmerick, </note> <author> N.; Hanks, S.; and Weld, D. </author> <year> (1993). </year> <title> An algorithm for probabilistic planning. </title> <type> Technical Report 93-06-03, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA. </address>
Reference-contexts: We assume that verification step gives complete and correct information about the robot's actual location; other researchers are focussing on the open problem of sensor reliability <ref> [Hughes & Ranganathan, 1994, Thrun, 1996] </ref>. If Rogue detects that in fact the robot is not at the correct goal location, Rogue updates the navigation module with the new information and re-attempts to navigate to the desired location.
Reference: [Lyons & Hendriks, 1992] <author> Lyons, D. M., and Hendriks, A. J. </author> <year> (1992). </year> <title> A practical approach to integrating reaction and deliberation. </title> <editor> In Hendler, J. (ed.), </editor> <booktitle> Artificial Intelligence Planning Systems: Proceedings of the First International Conference (AIPS-92). </booktitle> <address> (San Mateo, CA: </address> <publisher> Morgan Kaufmann), </publisher> <pages> pp. 153-162. </pages>
Reference: [Mansell, 1993] <author> Mansell, T. M. </author> <year> (1993). </year> <title> A method for planning given uncertain and incomplete information. </title> <booktitle> In Proceedings of the Ninth Conference on Uncertainty in Artificial Intelligence. </booktitle> <address> Washington, DC, (San Mateo, CA: </address> <publisher> Morgan Kaufmann), </publisher> <pages> pp. 250-358. </pages>
Reference-contexts: Conditional planning is one approach that aims at considering in the domain model all the possible contingencies of the world and planning ahead for each individual one <ref> [Atkins, Durfee, & Shin, 1996, Mansell, 1993, Pryor, 1994, Schoppers, 1989] </ref>. In most complex environments, the large number of possible contingencies means that complete conditional planning becomes infeasible, but may nevertheless be appropriate in particularly dangerous domains.
Reference: [McDermott, 1992] <author> McDermott, D. </author> <year> (1992). </year> <title> Transformational planning of reactive behavior. </title> <type> Technical Report YALE/CSD/RR#941, </type> <institution> Computer Science Department, Yale University, New Haven, CT. </institution> <note> 18 Haigh & Veloso </note>
Reference: [Nilsson, 1984] <author> Nilsson, N. J. </author> <year> (1984). </year> <title> Shakey the robot. </title> <type> Technical Report 323, </type> <institution> AI Center, SRI International, </institution> <address> Menlo Park, CA. </address>
Reference-contexts: In combining the two systems, the challenges for Rogue include developing a communication mechanism for control and feedback, as well as extending the planner to handle the dynamics of a real-world task. 1.2. Planning and Execution in ROGUE There are a few approaches to creating plans for execution. Shakey <ref> [Nilsson, 1984] </ref> was the first system to use a planning system on a robot. This project was based on a classical planner that ignored real world uncertainty [Fikes, Hart, & Nils-son, 1972] and followed a deterministic model to generate a single executable plan. When execution failures occurred, replanning was invoked.
Reference: [Nourbakhsh, 1997] <author> Nourbakhsh, I. </author> <year> (1997). </year> <title> Interleaving Planning and Execution for Autonomous Robots. (Dordrecht, Netherlands: </title> <type> Kluwer Academic). PhD thesis. </type> <note> Also available as technical report STAN-CS-TR-97-1593, </note> <institution> Department of Computer Science, Stanford University, Stanford, </institution> <address> CA. </address>
Reference: [O'Sullivan, Haigh, & Armstrong, 1997] <author> O'Sullivan, J.; Haigh, K. Z.; and Armstrong, G. D. </author> <year> (1997). </year> <institution> Xavier. Carnegie Mellon University, Pittsburgh, PA. </institution> <note> Manual, Version 0.3, unpublished internal report. Available via http://www.cs.cmu.edu/~Xavier/. </note>
Reference-contexts: Our framework consists of integrating Xavier <ref> [O'Sullivan, Haigh, & Armstrong, 1997, Simmons et al., 1997] </ref> with the prodigy4.0 planning and learning system [Veloso et al., 1995]. The resulting architecture and algorithms is Rogue [Haigh & Veloso, 1997]. <p> System Architecture the task planner, prodigy4.0, which generates appropriate plans, and then posts actions to the robot, Xavier, for execution. Rogue provides appropriate search control knowledge to the planner and monitors the outcome of execution. Xavier is a mobile robot being developed at Carnegie Mellon University <ref> [O'Sullivan, Haigh, & Armstrong, 1997, Simmons et al., 1997] </ref> (see Figure 2). It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars, a color camera and a speech board.
Reference: [Pell et al., 1997] <author> Pell, B.; Bernard, D. E.; Chien, S. A.; Gat, E.; Muscettola, N.; Nayak, P. P.; Wagner, M. D.; and Williams, B. C. </author> <year> (1997). </year> <title> An autonomous spacecraft agent prototype. </title> <booktitle> In Proceedings of the First International Conference on Autonomous Agents. </booktitle> <address> Marina del Rey, CA, (New York, NY: </address> <publisher> ACM Press), </publisher> <pages> pp. 253-261. </pages>
Reference-contexts: Amongst the other interleaving planners, only PRS [Georgeff & Ingrand, 1989] handles multiple asynchronous goals. Rogue however abstracts much of the lower level details that PRS explicitly reasons about, meaning that Rogue can be seen as more reliable and efficient because system functionality is suitably partitioned <ref> [Pell et al., 1997, Simmons et al., 1997] </ref>. NMRA [Pell et al., 1997] and 3 T [Bonasso & Kortenkamp, 1996] both function in domains with many asynchronous goals, but both planners respond to new goals and serious action failures by abandoning existing planning and restarting the planner. <p> Rogue however abstracts much of the lower level details that PRS explicitly reasons about, meaning that Rogue can be seen as more reliable and efficient because system functionality is suitably partitioned [Pell et al., 1997, Simmons et al., 1997]. NMRA <ref> [Pell et al., 1997] </ref> and 3 T [Bonasso & Kortenkamp, 1996] both function in domains with many asynchronous goals, but both planners respond to new goals and serious action failures by abandoning existing planning and restarting the planner. <p> Some of these procedures also contain simple failure recovery procedures, particularly for ac tions that have common and known failures. For example, an action might simply be repeated, as in the navigateToGoal command. These procedures resemble schemas [Georgeff & Ingrand, 1989, Hor-mann, Meier, & Schloen, 1991] or RAPs <ref> [Firby, 1989, Gat, 1992, Pell et al., 1997] </ref>, in that they specify how to execute the action, what to monitor in the environment, and some recovery procedures.
Reference: [Pryor, 1994] <author> Pryor, L. M. </author> <year> (1994). </year> <title> Opportunities and Planning in an Unpredictable World. </title> <type> Ph.D. Dissertation, </type> <institution> Northwestern University, Evanston, Illinois. </institution> <note> Available as Technical Report number 53. </note>
Reference-contexts: Conditional planning is one approach that aims at considering in the domain model all the possible contingencies of the world and planning ahead for each individual one <ref> [Atkins, Durfee, & Shin, 1996, Mansell, 1993, Pryor, 1994, Schoppers, 1989] </ref>. In most complex environments, the large number of possible contingencies means that complete conditional planning becomes infeasible, but may nevertheless be appropriate in particularly dangerous domains.
Reference: [Schoppers, 1989] <author> Schoppers, M. J. </author> <year> (1989). </year> <title> Representation and Automatic Synthesis of Reaction Plans. </title> <type> Ph.D. Dissertation, </type> <institution> Department of Computer Science, University of Illinois, Urbana-Champaign, IL. </institution> <note> Available as Technical Report UIUCDCS-R-89-1546. </note>
Reference-contexts: Conditional planning is one approach that aims at considering in the domain model all the possible contingencies of the world and planning ahead for each individual one <ref> [Atkins, Durfee, & Shin, 1996, Mansell, 1993, Pryor, 1994, Schoppers, 1989] </ref>. In most complex environments, the large number of possible contingencies means that complete conditional planning becomes infeasible, but may nevertheless be appropriate in particularly dangerous domains.
Reference: [Simmons & Koenig, 1995] <author> Simmons, R., and Koenig, S. </author> <year> (1995). </year> <title> Probabilistic robot navigation in partially observable environments. </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence (IJCAI-95). </booktitle> <address> Montreal, Quebec, Canada, (San Mateo, CA: </address> <publisher> Morgan Kaufmann), </publisher> <pages> pp. 1080-1087. </pages>
Reference-contexts: The module is able to autonomously compensate for certain problems, such as obstacles and missing landmarks. Navigation is done using Partially Observable Markov Decision Process models <ref> [Simmons & Koenig, 1995] </ref>, and the inherent uncertainty of this probabilistic model means that the module may occasionally report success even when it has not actually arrived at the desired goal location. When navigateToG reports a failure or a low-probability success, Rogue verifies the location.
Reference: [Simmons et al., 1997] <author> Simmons, R.; Goodwin, R.; Haigh, K. Z.; Koenig, S.; and O'Sullivan, J. </author> <year> (1997). </year> <title> A layered architecture for office delivery robots. </title> <editor> In Johnson, W. L. (ed.), </editor> <booktitle> Proceedings of the First International Conference on Autonomous Agents. </booktitle> <address> Marina del Rey, CA, (New York, NY: </address> <publisher> ACM Press), </publisher> <pages> pp. 245-252. </pages>
Reference-contexts: Our framework consists of integrating Xavier <ref> [O'Sullivan, Haigh, & Armstrong, 1997, Simmons et al., 1997] </ref> with the prodigy4.0 planning and learning system [Veloso et al., 1995]. The resulting architecture and algorithms is Rogue [Haigh & Veloso, 1997]. <p> System Architecture the task planner, prodigy4.0, which generates appropriate plans, and then posts actions to the robot, Xavier, for execution. Rogue provides appropriate search control knowledge to the planner and monitors the outcome of execution. Xavier is a mobile robot being developed at Carnegie Mellon University <ref> [O'Sullivan, Haigh, & Armstrong, 1997, Simmons et al., 1997] </ref> (see Figure 2). It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars, a color camera and a speech board. <p> Amongst the other interleaving planners, only PRS [Georgeff & Ingrand, 1989] handles multiple asynchronous goals. Rogue however abstracts much of the lower level details that PRS explicitly reasons about, meaning that Rogue can be seen as more reliable and efficient because system functionality is suitably partitioned <ref> [Pell et al., 1997, Simmons et al., 1997] </ref>. NMRA [Pell et al., 1997] and 3 T [Bonasso & Kortenkamp, 1996] both function in domains with many asynchronous goals, but both planners respond to new goals and serious action failures by abandoning existing planning and restarting the planner. <p> Interleaving Planning and Robot Execution 5 Fig. 3. User request interface. It successfully interleaves compatible requests and creates efficient plans for completing all the tasks. 2.1. Receiving a Request Users submit their task requests through one of three different interfaces: the World Wide Web <ref> [Simmons et al., 1997] </ref>, Zephyr [DellaFera et al., 1988, Simmons et al., 1997], or a specially de signed graphical user interface (Figure 3) [Haigh & Veloso, 1996]. <p> Interleaving Planning and Robot Execution 5 Fig. 3. User request interface. It successfully interleaves compatible requests and creates efficient plans for completing all the tasks. 2.1. Receiving a Request Users submit their task requests through one of three different interfaces: the World Wide Web [Simmons et al., 1997], Zephyr <ref> [DellaFera et al., 1988, Simmons et al., 1997] </ref>, or a specially de signed graphical user interface (Figure 3) [Haigh & Veloso, 1996]. <p> Conclusion Rogue is fully implemented and operational. The system completes all requested tasks, running errands between offices in our building. Execution results are presented in detail elsewhere <ref> [Simmons et al., 1997] </ref>. We have presented one aspect of Rogue, an integrated planning and execution robot architecture.
Reference: [Simmons, 1994] <author> Simmons, R. </author> <year> (1994). </year> <title> Structured control for autonomous robots. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 10(1) </volume> <pages> 34-43. </pages>
Reference-contexts: It is built on an RWI B24 base and includes bump sensors, a laser range finder, sonars, a color camera and a speech board. The software controlling Xavier includes both reactive and deliberative behaviours, integrated using the Task Control Architecture (TCA) <ref> [Simmons, 1994] </ref>. TCA provides facilities for scheduling and synchronizing tasks, resource allocation, environment monitoring and exception handling. The reactive behaviours enable the robot to handle real-time local navigation, obstacle avoidance, and emergency situations (such as detecting a bump).
Reference: [Stone & Veloso, 1996] <author> Stone, P., and Veloso, M. M. </author> <year> (1996). </year> <title> User-guided interleaving of planning and execution. In New Directions in AI Planning. </title> <address> (Amsterdam, Netherlands: </address> <publisher> IOS Press). </publisher> <pages> pp. 103-112. </pages>
Reference-contexts: Executing Actions Each action that prodigy4.0 selects must be translated into a form that Xavier will understand. Rogue translates the high-level abstract action into a command sequence appropriate for execution. prodigy4.0 allows arbitrary procedural attachments that are called during the operator application phase of the planning cycle <ref> [Stone & Veloso, 1996] </ref>. Typically, we use these functions to give the planner additional information about the state of the world that might not be accurately predictable from the model of the environment. For example, this new information might show resource consumption or action outcomes.
Reference: [Thrun, 1996] <author> Thrun, S. </author> <year> (1996). </year> <title> A Bayesian approach to landmark discovery and active perception for mobile robot navigation. </title> <type> Technical Report CMU-CS-96-122, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: We assume that verification step gives complete and correct information about the robot's actual location; other researchers are focussing on the open problem of sensor reliability <ref> [Hughes & Ranganathan, 1994, Thrun, 1996] </ref>. If Rogue detects that in fact the robot is not at the correct goal location, Rogue updates the navigation module with the new information and re-attempts to navigate to the desired location.
Reference: [Veloso et al., 1995] <author> Veloso, M. M.; Carbonell, J.; Perez, M. A.; Borrajo, D.; Fink, E.; and Blythe, J. </author> <year> (1995). </year> <title> Integrating planning and learning: The prodigy architecture. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 7(1) </volume> <pages> 81-120. </pages>
Reference-contexts: Our framework consists of integrating Xavier [O'Sullivan, Haigh, & Armstrong, 1997, Simmons et al., 1997] with the prodigy4.0 planning and learning system <ref> [Veloso et al., 1995] </ref>. The resulting architecture and algorithms is Rogue [Haigh & Veloso, 1997]. Rogue provides a setup where users can post tasks for which the planner generates appropriate plans, delivers them to the robot, monitors their execution, and learns from feedback from execution performance. <p> The deliberative behaviours include vision interpretation, maintenance of occupancy grids & topological maps, and path planning & global navigation. The underlying architecture is described in more detail by Simmons et al. [1997]. prodigy is a domain-independent planner that serves as a testbed for machine learning research <ref> [Carbonell, Knoblock, & Minton, 1990, Veloso et al., 1995] </ref>. The current version, prodigy4.0 is a nonlinear planner that follows a state-space Fig. 1. Rogue Architecture. Fig. 2. Xavier the Robot. search guided by means-ends analysis and backward chaining. <p> to goal: - C ( C [ f (needs-item request-userid request-object) (pickup-loc request-userid request-pickup-loc) (deliver-loc request-userid request-deliver-loc) g - G ( (and G (has-item request-userid request-object)) - P G ( (and P G (has-item request-userid request-object)) request-completed ( nil 6 Haigh & Veloso Table 2. prodigy4.0 decision points, adapted from <ref> [Veloso et al., 1995] </ref>. PRODIGY4.0 1. If the goal statement G is satisfied in the current state, terminate. 2. Either (A) Subgoal: add an operator to Plan (Back-Chainer), or (B) Apply: apply an operator from Plan (Operator-Application). Decision point: Decide whether to apply or to subgoal. 3.

References-found: 36

