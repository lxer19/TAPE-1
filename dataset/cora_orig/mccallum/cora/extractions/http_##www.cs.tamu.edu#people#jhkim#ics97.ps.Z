URL: http://www.cs.tamu.edu/people/jhkim/ics97.ps.Z
Refering-URL: http://www.cs.tamu.edu/people/jhkim/publications.html
Root-URL: http://www.cs.tamu.edu
Email: Email: fjhkim,vaidyag@cs.tamu.edu  
Title: Adaptive Migratory Scheme for Distributed Shared Memory  
Author: Jai-Hoon Kim Nitin H. Vaidya 
Web: Web: http://www.cs.tamu.edu/faculty/vaidya/  
Address: College Station, TX 77843-3112, U.S.A.  
Affiliation: Department of Computer Science Texas A&M University  
Abstract: Thispaperpresentsanadaptive migratory scheme forsoftware Distributed SharedMemory(DSM). The proposedDSM systemallows each node to independently choose one of the following three protocols: migratory, invalidate, and competitive update. In software DSM systems the migratory protocol is notnecessarily optimal for amigratory accesspattern. We define some conditions underwhich the migratory protocol is to be preferred over other candidate protocols. In our scheme, each node independently and continuously collects statistics thatare used to determine the protocol to be used for each local copy of a page. Different nodes may select different protocols for the same page, based on their local view of the memory access patterns. The proposed scheme is an improvement over our previous adaptive scheme [9] that allowed only invalidate and competitive update protocols. The proposedscheme is implemented on a workstation cluster. Experimental results show that the new scheme is able to improve performance by choosing migratory protocol when appropriate. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Carter, D. Khandekar, and L. Kamb, </author> <title> Distributed shared memory: Where we are and where we should be headed, </title> <booktitle> in Proc. of the Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <pages> pp. 119-122, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: We implemented the adaptive protocol by modifying another DSM, named Quarks (Beta release 0.8) <ref> [1, 8] </ref>. This section presents the experimental results.
Reference: [2] <author> J. B. Carter, </author> <title> Effi cient Distributed Shared Memory Based On Multi-Protocol Release Consistency. </title> <type> PhD thesis, </type> <institution> Rice University, </institution> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: In a directory-based cache coherent multiprocessor, a home node maintainsdirectory entries. In these architectures, global state (number of cached copies, last invalidator of a block) can be known by some or all nodes. However, these schemes can not be used directly in software DSM such as Munin <ref> [2] </ref> or Quarks [8] where no node may have global knowledge. Our scheme can be incorporated into a software DSM in which memory coherency is maintained in a distributed manner. <p> Correctness and Cost for Protocol Switch Our scheme is designed for software DSM using release consistency (such as <ref> [2] </ref>), and each node independently chooses appropriate protocol by dynamically deciding whether to invalidate or update local copy of a page. This does not cause any consistency problem. The change in the choice of limit only determines when a copy of a page is invalidated.
Reference: [3] <author> A. Cox and R. Fower, </author> <title> The implementation of a coherent memory abstraction on a numamultiprocessor: Experience with platinum, </title> <booktitle> in Proc. of the 12th ACM Symposiumon Operating Systems Principles, </booktitle> <pages> pp. 32-44, </pages> <year> 1989. </year>
Reference-contexts: Our scheme can be incorporated into a software DSM in which memory coherency is maintained in a distributed manner. Each node tries to determine the best protocol using locally available information. 1 We use competitive update protocol with update limit L = 0 to implement invalidate protocol. Schemes in <ref> [3, 10] </ref> are proposed for dynamic page place--mentin NUMA architecture. Their dynamic page placement policy can not be applied to DSM due to architectural differences. On page fault, in NUMA architecture, a local node can access remote memory without page allocation in local memory. <p> Table 1: Adaptive Protocols Sc he me De s i gn domai n Pr ot oc ol s ( Sc he me s ) Fe at ur e s [4] Dir or Bus Inv+ Mig [12] Dir Comp+ Mig [11] Dir Inv+ Self-Inv <ref> [3, 10] </ref> MM-NUMA Remote + Replicate + Mig CC [9] SDSM Inv+ Comp CC Proposed SDSM Inv+ Comp+ Mig CC + TD * Bus = bus-basedcache coherence multiprocessor * Dir = directory-basedcache coherencemultiprocessor * MM-NUMA= memorymanagement system for NUMA multiprocessor * SDSM = software DistributedSharedMemory * Inv= invalidate protocol * Mig
Reference: [4] <author> A. Cox and R. Fowler, </author> <title> Adaptive cache coherency for detecting migratory shared data, </title> <booktitle> in Proceedings of the 20th Annual International Symposiumon Computer Architecture, </booktitle> <pages> pp. 98-108, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Experimental results show that the performance is improved by dynamically selecting the migratory protocol. Other researchers have also proposed adaptive schemes for migratory sharing. Our adaptive migratory scheme is implemented in a software DSM and is different from others as follows: * Design domain: The schemes in <ref> [4, 12, 13, 11] </ref> are based on bus-based ordirectory-basedcache coherentmultiprocessors. In a bus-basedmultiprocessor, requests (for read miss, write miss and invalidate) can be detected by all nodes via the bus. In a directory-based cache coherent multiprocessor, a home node maintainsdirectory entries. <p> Their dynamic page placement policy can not be applied to DSM due to architectural differences. On page fault, in NUMA architecture, a local node can access remote memory without page allocation in local memory. However, in many DSMs, remote memory access is not allowed. * Protocol Switch: <ref> [4, 13, 12] </ref> selectamigratory protocol when ever memory access pattern is migratory sharing. Our adaptive scheme requires each node to periodically estimate the cost of using each candidateprotocolforeach page in its local memory; the protocol with lowest estimated cost is used. <p> In a software DSM, a pagerequestmay have to be forwarded several times before it is served (a pagerequestis issued on a page fault). The proposed scheme chooses the migratory protocol only when its costis expected to be lower than the other candidate protocols. * Protocol Choices: <ref> [4, 13, 11] </ref> allow invalidate and migratory protocols, and [12] allows competitive update and migratory protocols. Our scheme allows invalidate, competitive update and migratory protocols. * Hybrid Protocol: In [4, 12, 13], all copies of a block enter migratory mode or exitfrom migratory mode. <p> Our scheme allows invalidate, competitive update and migratory protocols. * Hybrid Protocol: In <ref> [4, 12, 13] </ref>, all copies of a block enter migratory mode or exitfrom migratory mode. In our scheme, each node independently chooses the appropriate protocol. Therefore, some nodescan use amigratory protocol while the other nodes use another protocol (invalidate or competitive update protocol) for the same page. <p> Using the statistics, determine the protocol that minimizes the cost for each page P . Table 1: Adaptive Protocols Sc he me De s i gn domai n Pr ot oc ol s ( Sc he me s ) Fe at ur e s <ref> [4] </ref> Dir or Bus Inv+ Mig [12] Dir Comp+ Mig [11] Dir Inv+ Self-Inv [3, 10] MM-NUMA Remote + Replicate + Mig CC [9] SDSM Inv+ Comp CC Proposed SDSM Inv+ Comp+ Mig CC + TD * Bus = bus-basedcache coherence multiprocessor * Dir = directory-basedcache coherencemultiprocessor * MM-NUMA= memorymanagement system
Reference: [5] <author> F. Dahlgren and P. Stenstrom, </author> <title> Using write caches to improve performance of cache coherence protocols in shared-memory multiprocessors,Journalof Parallel andDistributedComputing,vol. </title> <type> 26, </type> <institution> pp.193-210, </institution> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: Use the minimum cost protocol for each page P to maintain consistency of page P over the next sampling period. 4. Repeat above steps. Essentially, this approach uses statistics collected during current execution to predict the optimal consistency protocol for the near-future. The competitive update protocol <ref> [7, 5, 6] </ref> is defined by a limit or threshold parameter. The adaptive scheme in [9] collects run-time statistics which are used periodically to determine a new limit for each copy of a page (limit = 0 results in the invalidate protocol).
Reference: [6] <author> H. Grahn, P. Stenstrom, and M. Dubois, </author> <title> Implementationand evaluation of update-basedcache protocolsunder relaxed memory consistency models,Future Generation Computer Systems,vol. </title> <booktitle> 11,pp. </booktitle> <pages> 247-271, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: However, only single copy is allowed for write opera tion. * competitive update protocol: This protocol is a variation of update protocol. Update protocol is the same as full-replication described in [14]. Page replication is allowed for both read and write operations. The competitive update protocol <ref> [6, 7] </ref> is defined using a threshold parameter in fl This work is supported in partby the National Science Foundation undergrant MIP-9502563. this paper, we will refer to the threshold as update limit or just limit. <p> Use the minimum cost protocol for each page P to maintain consistency of page P over the next sampling period. 4. Repeat above steps. Essentially, this approach uses statistics collected during current execution to predict the optimal consistency protocol for the near-future. The competitive update protocol <ref> [7, 5, 6] </ref> is defined by a limit or threshold parameter. The adaptive scheme in [9] collects run-time statistics which are used periodically to determine a new limit for each copy of a page (limit = 0 results in the invalidate protocol).
Reference: [7] <author> A. Karlin, M. Manasse, L. Rudolph, and D. Sleator, </author> <booktitle> Competitive snoopy caching,in Proc. of the 27'th AnnualSymposiumon Foundations of Computer Science, </booktitle> <pages> pp. 244-254, </pages> <year> 1986. </year>
Reference-contexts: However, only single copy is allowed for write opera tion. * competitive update protocol: This protocol is a variation of update protocol. Update protocol is the same as full-replication described in [14]. Page replication is allowed for both read and write operations. The competitive update protocol <ref> [6, 7] </ref> is defined using a threshold parameter in fl This work is supported in partby the National Science Foundation undergrant MIP-9502563. this paper, we will refer to the threshold as update limit or just limit. <p> Use the minimum cost protocol for each page P to maintain consistency of page P over the next sampling period. 4. Repeat above steps. Essentially, this approach uses statistics collected during current execution to predict the optimal consistency protocol for the near-future. The competitive update protocol <ref> [7, 5, 6] </ref> is defined by a limit or threshold parameter. The adaptive scheme in [9] collects run-time statistics which are used periodically to determine a new limit for each copy of a page (limit = 0 results in the invalidate protocol).
Reference: [8] <author> D. Khandekar, </author> <title> Quarks: Portable dsm on unix,tech. </title> <type> rep., </type> <institution> University of Utah. </institution>
Reference-contexts: In these architectures, global state (number of cached copies, last invalidator of a block) can be known by some or all nodes. However, these schemes can not be used directly in software DSM such as Munin [2] or Quarks <ref> [8] </ref> where no node may have global knowledge. Our scheme can be incorporated into a software DSM in which memory coherency is maintained in a distributed manner. <p> We implemented the adaptive protocol by modifying another DSM, named Quarks (Beta release 0.8) <ref> [1, 8] </ref>. This section presents the experimental results. <p> This section presents the experimental results. We evaluated the adaptive scheme using synthetic applications (qtest, ProdCons, and Reader/Writer) as well as other applications (Floyd-Warshall, SOR, QSORT, IS, Matmult, and Jacobi). qtest is a simple shared memory application based on a program available with the Quarksrelease <ref> [8] </ref>: all nodesaccessthe shareddataconcur-rently. A process acquires mutual exclusion before each accessand releases it after that. We measured the cost (i.e., number of messages and size of data transferred) by executing different instances of the synthetic application, as described below. <p> We measured the cost (i.e., number of messages and size of data transferred) by executing different instances of the synthetic application, as described below. Floyd-Warshall, QSORT, IS, and Jacobi were developed at Texas A&M University. SOR and Matmult are available with the Quarks release <ref> [8] </ref>. Prod-Cons and Reader/Writer are based on qtest. Sampling period (N s ) is chosen to be 2 for all applications. <p> The chosen protocol may change over time if the access patterns change. The paper presents experimental evaluation of the proposed adaptive migratory scheme using an implementation based on Quarks DSM <ref> [8] </ref>. Experimental results from the implementation suggestthat the proposed adaptive approach can usually reduce the cost. Specifically, the proposed scheme can typically reduce the number of messages as compared to the adaptive scheme in [9], as well as invalidate and competitive update protocols.
Reference: [9] <author> J.-H. Kim and N. H. Vaidya, </author> <booktitle> A cost-comparisonapproachfor adaptive distributedshared memory,in ACM InternationalConferenceon Supercomputing(ICS), </booktitle> <pages> pp. 44-51, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: A page is migrated to the node that accesses the page. The proposed scheme is an improvement over our previous adaptive scheme <ref> [9] </ref> that allowed only invalidate 1 and competitive update protocols (but not migratory protocol). With migratory sharing, a node that has a page fault, soon writes to the page and sends an update to other copies of the page. <p> Table 1 summarizes the above discussion. Rest of the paper is organized as follows. Section 2 presents an existing adaptive scheme <ref> [9] </ref>. The proposed approach for migratory optimization is presented in Section 3. Section 4 evaluates performance of the proposed scheme. Conclusionsare presented in Section 5. 2 BASIC ADAPTIVE PROTOCOL [9] The proposed adaptive migratory scheme is based on [9] in which each node can independently choose the invalidate protocol or the <p> Rest of the paper is organized as follows. Section 2 presents an existing adaptive scheme <ref> [9] </ref>. The proposed approach for migratory optimization is presented in Section 3. Section 4 evaluates performance of the proposed scheme. Conclusionsare presented in Section 5. 2 BASIC ADAPTIVE PROTOCOL [9] The proposed adaptive migratory scheme is based on [9] in which each node can independently choose the invalidate protocol or the competitive update protocol for each copy of a page (but not the migratory protocol). In this section, we summarize the adaptive scheme in [9]. <p> Section 2 presents an existing adaptive scheme <ref> [9] </ref>. The proposed approach for migratory optimization is presented in Section 3. Section 4 evaluates performance of the proposed scheme. Conclusionsare presented in Section 5. 2 BASIC ADAPTIVE PROTOCOL [9] The proposed adaptive migratory scheme is based on [9] in which each node can independently choose the invalidate protocol or the competitive update protocol for each copy of a page (but not the migratory protocol). In this section, we summarize the adaptive scheme in [9]. This scheme follows the steps below: 1. <p> 5. 2 BASIC ADAPTIVE PROTOCOL <ref> [9] </ref> The proposed adaptive migratory scheme is based on [9] in which each node can independently choose the invalidate protocol or the competitive update protocol for each copy of a page (but not the migratory protocol). In this section, we summarize the adaptive scheme in [9]. This scheme follows the steps below: 1. Collect statistics over a sampling period . (Accesses to each memory page are divided into sampling periods.) 2. Using the statistics, determine the protocol that minimizes the cost for each page P . <p> Adaptive Protocols Sc he me De s i gn domai n Pr ot oc ol s ( Sc he me s ) Fe at ur e s [4] Dir or Bus Inv+ Mig [12] Dir Comp+ Mig [11] Dir Inv+ Self-Inv [3, 10] MM-NUMA Remote + Replicate + Mig CC <ref> [9] </ref> SDSM Inv+ Comp CC Proposed SDSM Inv+ Comp+ Mig CC + TD * Bus = bus-basedcache coherence multiprocessor * Dir = directory-basedcache coherencemultiprocessor * MM-NUMA= memorymanagement system for NUMA multiprocessor * SDSM = software DistributedSharedMemory * Inv= invalidate protocol * Mig = migratory protocol (scheme) * Remote = remote memory <p> Repeat above steps. Essentially, this approach uses statistics collected during current execution to predict the optimal consistency protocol for the near-future. The competitive update protocol [7, 5, 6] is defined by a limit or threshold parameter. The adaptive scheme in <ref> [9] </ref> collects run-time statistics which are used periodically to determine a new limit for each copy of a page (limit = 0 results in the invalidate protocol). <p> The adaptive scheme is completely distributed in that each node independently determines the limit to be used for each page it has in its local memory. (Thus, different nodes may choose different limits for the same page.) The objective of the adaptive protocol <ref> [9] </ref> is to minimize the cost metric of interest. Two cost metrics considered are: (i) number of messages, and (ii) amount of data transferred. Let us focus on the accesses to a particular page P as observed at a node A. These accesses can be partitioned into segments. <p> Different protocols result in different costs during a given seg ment. In <ref> [9] </ref>, we evaluate the cost of using the invalidate protocol (or competitive update protocol with limit L = 0) and the update protocol (or competitive update protocol with limit L = 1), as a function of the number of remote updates U performed in that segment (each write by another node <p> Thus, there exists a critical value of U , named U critical , where the update protocol (L = 1) and the invalidate protocol (L = 0) result in an identical cost. The adaptive scheme in <ref> [9] </ref> determines U critical , and estimates average U at runtime. The runtime heuristic requires a node A to use invalidate protocol for page P if estimated U is greater than U critical . <p> The adaptive scheme in <ref> [9] </ref> can be summarized as follows: * Each node collects data over a sampling period for each local page, and estimates the average value of U . * At the end of the sampling period, if U U critical then the invalidate protocol (L = 0) is chosen for the next <p> In addition, one message is required to receive the page, and one message to acknowledge receipt of the page. Access Pattern) The number of messages required for an invalidate protocol (or competitive update protocol with L = 0) (M invalidate ) is F + 4 <ref> [9] </ref>. Invalidate protocol requires two more messagesthan migratory protocol for receiving an update message and sending anegative acknowledgement. (We use competitive update protocol with update limit L = 0 to implement invalidate protocol. <p> When node A sends an update message to node B that uses an invalidate protocol, node B invalidates local copy and sends negative acknowledgementto node A. Refer to <ref> [9] </ref> for more detail.) Note that the expression for M invalidate is correct for any access pattern, while the expression M migratory = F + 2 is valid only for a migratory access pattern. <p> The amount of data transferred in one segment, when using the invalidate protocol, is D invalidate = p update + (F + 2) p control + p page , where p update is the average size of an update message <ref> [9] </ref>. (Atthe beginning of eachsegment, page faultoccurs which requires data transfer of size F p control for forwarding pagerequest, p page for receiving page, and p control for sending acknowledgement. <p> After that, data transfer of size p update + p control is required for receiving update message and sending negative acknowledgement.) Similarly, amountof datatransferred whenusingthe updateprotocol is D update = U (p update + p control ) <ref> [9] </ref>. For the amountof datatransferred, critical value of U (U critical ) is obtained by solving the equation D update = D invalidate . Note that U critical for number of messages is different from that for amount of data transferred. <p> Self-Invalidation: Node A performs self-invalidation of a local copy of page P when sending page P to any other node, if node A selects migratory memory access pattern for page P (as described in item 1 above). Itis possible for eachnode to estimate U and p update independently <ref> [9] </ref>, without sending additional messages. Note that the value of U determined by each node (for the same page) may be different, as segments observed by each node are different. Therefore, each node needs to be able to estimate U independently. <p> In Figure 4, the curve named protocol denotes the number of messages required by the specified protocol, and #update denotes the average number of updates per segment (U avg ) calculated over the entire application. adapt i ve denotes the scheme in <ref> [9] </ref>. adapt i ve + denotes the proposed adaptive migratory protocol. As number of nodes N increases, the average number of updates per segment (U ) increases proportionally. For N 5, adaptive migratory protocol (adapt i ve +) performs best, becauseqt e s t 1 shows the migratory memory accesspattern. <p> The figures plot costs for five protocols: invalidate (I NV), update (UPD), competitive update with L = 3 (COMP), the adaptive scheme from <ref> [9] </ref> (ADAPT) and the proposed adaptive migratory scheme (ADAPT+). The costs are normalized using the protocol with maximum costfor each application as the base. Observe that, ADAPT+ typically achieves number of messages comparable to (or smaller than) the least among the other protocols, including ADAPT. <p> This protocol improves on our previous scheme <ref> [9] </ref> by detecting migratory patterns. The adaptive protocol attempts to detect migratory access pattern, and choosesthe migratory protocol when it is deemed most cost-effective. Due to the dynamic distributed ownership algorithm used in many DSMs, migratory protocol is notalways optimal even if the access pattern is migratory sharing. <p> Experimental results from the implementation suggestthat the proposed adaptive approach can usually reduce the cost. Specifically, the proposed scheme can typically reduce the number of messages as compared to the adaptive scheme in <ref> [9] </ref>, as well as invalidate and competitive update protocols. Acknowledgements We thank the referees for their detailed comments. We also thank John Carter and D.
Reference: [10] <author> R. LaRowe, C. Ellis, and L. Kaplan, </author> <booktitle> The robustnessof numamemory management, in Proc. of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 137-151, </pages> <year> 1991. </year>
Reference-contexts: Our scheme can be incorporated into a software DSM in which memory coherency is maintained in a distributed manner. Each node tries to determine the best protocol using locally available information. 1 We use competitive update protocol with update limit L = 0 to implement invalidate protocol. Schemes in <ref> [3, 10] </ref> are proposed for dynamic page place--mentin NUMA architecture. Their dynamic page placement policy can not be applied to DSM due to architectural differences. On page fault, in NUMA architecture, a local node can access remote memory without page allocation in local memory. <p> Table 1: Adaptive Protocols Sc he me De s i gn domai n Pr ot oc ol s ( Sc he me s ) Fe at ur e s [4] Dir or Bus Inv+ Mig [12] Dir Comp+ Mig [11] Dir Inv+ Self-Inv <ref> [3, 10] </ref> MM-NUMA Remote + Replicate + Mig CC [9] SDSM Inv+ Comp CC Proposed SDSM Inv+ Comp+ Mig CC + TD * Bus = bus-basedcache coherence multiprocessor * Dir = directory-basedcache coherencemultiprocessor * MM-NUMA= memorymanagement system for NUMA multiprocessor * SDSM = software DistributedSharedMemory * Inv= invalidate protocol * Mig
Reference: [11] <editor> A. LebeckandD. Wood,Dynamicself-invalidation: </editor> <booktitle> Reducingcoher-ence overhead in shared-memorymultiprocessors,in Proceedings of the 22nd Annual InternationalSymposiumon Computer Architecture, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: A message for sending a copy of a page to a remote node, on which a page fault occurs, is directly followed by an update request from the remote node. Our adaptive migratory algorithm eliminates an overhead for sending update message and negative acknowledgementby self-invalidation <ref> [11] </ref> on sending a copy of a page to the remote node (if migratory access pattern is detected). In adaptive migratory scheme, each node independently and continuously collects statistics that are used to determine the protocol to be used for each local copy of a page. <p> Experimental results show that the performance is improved by dynamically selecting the migratory protocol. Other researchers have also proposed adaptive schemes for migratory sharing. Our adaptive migratory scheme is implemented in a software DSM and is different from others as follows: * Design domain: The schemes in <ref> [4, 12, 13, 11] </ref> are based on bus-based ordirectory-basedcache coherentmultiprocessors. In a bus-basedmultiprocessor, requests (for read miss, write miss and invalidate) can be detected by all nodes via the bus. In a directory-based cache coherent multiprocessor, a home node maintainsdirectory entries. <p> In a software DSM, a pagerequestmay have to be forwarded several times before it is served (a pagerequestis issued on a page fault). The proposed scheme chooses the migratory protocol only when its costis expected to be lower than the other candidate protocols. * Protocol Choices: <ref> [4, 13, 11] </ref> allow invalidate and migratory protocols, and [12] allows competitive update and migratory protocols. Our scheme allows invalidate, competitive update and migratory protocols. * Hybrid Protocol: In [4, 12, 13], all copies of a block enter migratory mode or exitfrom migratory mode. <p> Table 1: Adaptive Protocols Sc he me De s i gn domai n Pr ot oc ol s ( Sc he me s ) Fe at ur e s [4] Dir or Bus Inv+ Mig [12] Dir Comp+ Mig <ref> [11] </ref> Dir Inv+ Self-Inv [3, 10] MM-NUMA Remote + Replicate + Mig CC [9] SDSM Inv+ Comp CC Proposed SDSM Inv+ Comp+ Mig CC + TD * Bus = bus-basedcache coherence multiprocessor * Dir = directory-basedcache coherencemultiprocessor * MM-NUMA= memorymanagement system for NUMA multiprocessor * SDSM = software DistributedSharedMemory * Inv=
Reference: [12] <author> H. Nilson and P. Stenstrom, </author> <title> An adaptive update-basedcache coherence protocolfor reduction of miss rate and traffic, </title> <type> tech. rep., </type> <institution> Lund University. </institution> <note> To appearin Parallel ArchitecturesandLanguagesEurope, </note> <month> July </month> <year> 1994. </year>
Reference-contexts: Experimental results show that the performance is improved by dynamically selecting the migratory protocol. Other researchers have also proposed adaptive schemes for migratory sharing. Our adaptive migratory scheme is implemented in a software DSM and is different from others as follows: * Design domain: The schemes in <ref> [4, 12, 13, 11] </ref> are based on bus-based ordirectory-basedcache coherentmultiprocessors. In a bus-basedmultiprocessor, requests (for read miss, write miss and invalidate) can be detected by all nodes via the bus. In a directory-based cache coherent multiprocessor, a home node maintainsdirectory entries. <p> Their dynamic page placement policy can not be applied to DSM due to architectural differences. On page fault, in NUMA architecture, a local node can access remote memory without page allocation in local memory. However, in many DSMs, remote memory access is not allowed. * Protocol Switch: <ref> [4, 13, 12] </ref> selectamigratory protocol when ever memory access pattern is migratory sharing. Our adaptive scheme requires each node to periodically estimate the cost of using each candidateprotocolforeach page in its local memory; the protocol with lowest estimated cost is used. <p> The proposed scheme chooses the migratory protocol only when its costis expected to be lower than the other candidate protocols. * Protocol Choices: [4, 13, 11] allow invalidate and migratory protocols, and <ref> [12] </ref> allows competitive update and migratory protocols. Our scheme allows invalidate, competitive update and migratory protocols. * Hybrid Protocol: In [4, 12, 13], all copies of a block enter migratory mode or exitfrom migratory mode. In our scheme, each node independently chooses the appropriate protocol. <p> Our scheme allows invalidate, competitive update and migratory protocols. * Hybrid Protocol: In <ref> [4, 12, 13] </ref>, all copies of a block enter migratory mode or exitfrom migratory mode. In our scheme, each node independently chooses the appropriate protocol. Therefore, some nodescan use amigratory protocol while the other nodes use another protocol (invalidate or competitive update protocol) for the same page. <p> Table 1: Adaptive Protocols Sc he me De s i gn domai n Pr ot oc ol s ( Sc he me s ) Fe at ur e s [4] Dir or Bus Inv+ Mig <ref> [12] </ref> Dir Comp+ Mig [11] Dir Inv+ Self-Inv [3, 10] MM-NUMA Remote + Replicate + Mig CC [9] SDSM Inv+ Comp CC Proposed SDSM Inv+ Comp+ Mig CC + TD * Bus = bus-basedcache coherence multiprocessor * Dir = directory-basedcache coherencemultiprocessor * MM-NUMA= memorymanagement system for NUMA multiprocessor * SDSM =
Reference: [13] <author> P. Stenstrom, M. Brorsson, and L. </author> <title> Sandberg, </title> <booktitle> An adaptive cache coherence protocoloptimized for migratory sharing,in Proceedings of the 20th Annual International Symposiumon Computer Architecture, </booktitle> <pages> pp. 109-118, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Experimental results show that the performance is improved by dynamically selecting the migratory protocol. Other researchers have also proposed adaptive schemes for migratory sharing. Our adaptive migratory scheme is implemented in a software DSM and is different from others as follows: * Design domain: The schemes in <ref> [4, 12, 13, 11] </ref> are based on bus-based ordirectory-basedcache coherentmultiprocessors. In a bus-basedmultiprocessor, requests (for read miss, write miss and invalidate) can be detected by all nodes via the bus. In a directory-based cache coherent multiprocessor, a home node maintainsdirectory entries. <p> Their dynamic page placement policy can not be applied to DSM due to architectural differences. On page fault, in NUMA architecture, a local node can access remote memory without page allocation in local memory. However, in many DSMs, remote memory access is not allowed. * Protocol Switch: <ref> [4, 13, 12] </ref> selectamigratory protocol when ever memory access pattern is migratory sharing. Our adaptive scheme requires each node to periodically estimate the cost of using each candidateprotocolforeach page in its local memory; the protocol with lowest estimated cost is used. <p> In a software DSM, a pagerequestmay have to be forwarded several times before it is served (a pagerequestis issued on a page fault). The proposed scheme chooses the migratory protocol only when its costis expected to be lower than the other candidate protocols. * Protocol Choices: <ref> [4, 13, 11] </ref> allow invalidate and migratory protocols, and [12] allows competitive update and migratory protocols. Our scheme allows invalidate, competitive update and migratory protocols. * Hybrid Protocol: In [4, 12, 13], all copies of a block enter migratory mode or exitfrom migratory mode. <p> Our scheme allows invalidate, competitive update and migratory protocols. * Hybrid Protocol: In <ref> [4, 12, 13] </ref>, all copies of a block enter migratory mode or exitfrom migratory mode. In our scheme, each node independently chooses the appropriate protocol. Therefore, some nodescan use amigratory protocol while the other nodes use another protocol (invalidate or competitive update protocol) for the same page.
Reference: [14] <author> M. Stumm and S. Zhou, </author> <booktitle> Algorithmsimplementingdistributedshared memory,IEEE Computer, </booktitle> <pages> pp. 54-64, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The proposed DSM system allows each node to independently choose one of the following three protocols: migratory, invalidate, and competitive update. These three protocols are summarized as follows: * invalidate protocol: This protocolis similarto read-replication described in <ref> [14] </ref>. Page replication is allowed for read operation. However, only single copy is allowed for write opera tion. * competitive update protocol: This protocol is a variation of update protocol. Update protocol is the same as full-replication described in [14]. Page replication is allowed for both read and write operations. <p> as follows: * invalidate protocol: This protocolis similarto read-replication described in <ref> [14] </ref>. Page replication is allowed for read operation. However, only single copy is allowed for write opera tion. * competitive update protocol: This protocol is a variation of update protocol. Update protocol is the same as full-replication described in [14]. Page replication is allowed for both read and write operations.
References-found: 14

