URL: http://cadlab.cs.ucla.edu:8080/~cong/papers/iccad97_interconnect.ps.gz
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Title: Interconnect Design for Deep Submicron ICs  
Author: Jason Cong Lei He, Kei-Yong Khoo, Cheng-Kok Koh and Zhigang Pan 
Address: Los Angeles, CA 90095  
Affiliation: Computer Science Department University of California,  
Abstract: Interconnect has become the dominating factor in determining circuit performance and reliability in deep submicron designs. In this embedded tutorial, we first discuss the trends and challenges of interconnect design as the technology feature size rapidly decreases towards below 0.1 micron. Then, we present commonly used interconnect models and a set of interconnect design and optimization techniques for improving interconnect performance and reliability. Finally, we present comparisons of different optimization techniques in terms of their efficiency and optimization results, and show the impact of these optimization techniques on interconnect performance in each technology generation from the 0.35m to 0.07m projected in the National Technology Roadmap for Semiconductors. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Semiconductor Industry Association, National Technology Roadmap for Semiconductors, </institution> <year> 1994. </year>
Reference: [2] <author> K. Nabors and J. White, Fastcap: </author> <title> A multipole accelerated 3-D capacitance extraction program, </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> vol. 10, </volume> <pages> pp. 14471459, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: For M1, we assume that the substrate and M2 are the ground planes; and for M4, we assume that M3 and M5 are the ground planes. The total capacitance, including the area capacitance, fringing capacitance, and coupling capacitance components, are obtained using the 3D field solver FastCap <ref> [2] </ref>. Based on these assumptions, our capacitance values for M1 closely match those given in the NTRS. Fig. 1 Global and local interconnect delays versus gate delays. Fig. 2.
Reference: [3] <author> J. Cong, L. He, C.-K. Koh, and P. H. Madden, </author> <title> Performance optimization of VLSI interconnect layout, Integration, </title> <journal> the VLSI Journal, </journal> <volume> vol. 21, </volume> <pages> pp. 194, </pages> <year> 1996. </year>
Reference-contexts: Due to the page limitation, the authors are able to present only a small subset of results on the topics covered in this paper. A more comprehensive survey and bibliography is available in <ref> [3] </ref>. II. DELAY MODELING A. <p> Z 1 t h (t)dt: (1) The i-moment of the transfer function m i is defined to be the un signed coefficient of the i-th power of s in Eqn. (1) m i = i! 0 i Moments of an RC tree can be computed efficiently using recursive methods (see <ref> [3] </ref> for details). The first moment m 1 = R 1 0 t h (t)dt, also called the Elmore delay model [4], is most commonly used for delay estimation in an RC tree. <p> It was shown that the Elmore delay model offers reasonably good fidelity for interconnect layout optimization, i.e., an optimal or near-optimal solution obtained under the Elmore delay model is also close to optimal according to actual (SPICE-computed) delays (see <ref> [3] </ref> for details). But the absolute value of Elmore delay may not be very accurate. So, it is not suitable to be used directly for accurate circuit timing analysis. Higher order moments can be used for more accurate reduced-order RC models. <p> Some delay metrics based on higher order moments, such as the central moments and the explicit RC delay using the first three moments, are summarized in <ref> [3] </ref>. Note that except for the Elmore delay model, which is defined for a monotonic response only, the techniques presented above still holds when interconnects are modeled as RLC trees. <p> The commonly used methods include it-erative addition of Steiner points, optimal merging of edges of a minimum spanning tree (MST), or iterative refinement of an MST. These methods are surveyed in <ref> [3] </ref>. However, when the interconnect resistance needs to be considered as well, wirelength minimization alone during global routing may not lead to the minimum interconnect delay. Interconnect topology optimization needs to be considered. B. <p> It first constructs an MST, then eliminates the long paths by adding `short-cuts' into the MST and computing a shortest path tree of the resulting graph. Other algorithms in this class include the AHHK tree construction and the `performance oriented spanning tree' construction, which are discussed in [22] and <ref> [3] </ref>. In particular, it was shown in [20] that a minimal length shortest path tree in the Manhattan plane (called the A-tree) can be constructed very efficiently using a bottom-up merging heuristic with sizable delay reduction yet only a small wire-length overhead compared to the OST. <p> Other methods, such as the alphabetical tree and P-tree construction are also summarized in <ref> [3] </ref>. C. Device Sizing When we have a good estimate of the interconnect capacitive load of a net, the size of its driving gate can be optimized for delay minimization. For a heavy capacitive load, a chain of cascaded drivers is usually used. <p> The gate sizing algorithm chooses an appropriate cell for each gate for performance optimization. These techniques are summarized in <ref> [3] </ref>. D. Buffer Insertion Buffer insertion (also called repeater insertion) is another common and effective technique to use active device areas to trade for reduction of interconnect delays. Since the Elmore delay of a long wire grows quadratically in terms of the wirelength, buffer insertion can reduce interconnect delay significantly. <p> It has been extended to optimize the routing trees with multiple drivers, routing trees without a priori segmentation of long wires, and to meet the target delays using La-grangian relaxation. The reader may refer to <ref> [3] </ref> for more details. An alternative approach to wiresizing optimization computes an optimal wiresizing solution using bottom-up merging and top-down selection [30] in a very similar way as the buffer insertion algorithm presented in the preceding subsection. <p> These results are discussed in more details in <ref> [3] </ref>. All these algorithms, however, optimize the wire widths of a single net and ignore the coupling capacitance between adjacent nets, which can be significant in deep submicron designs. <p> Other studies on simultaneous device and wire sizing include using higher order RC delay models for the interconnect by either matching to the target moments or using a q-pole transfer function for sensitivity analysis. The reader may refer to <ref> [3] </ref> for more details. F.2. Simultaneous Topology Construction with Buffer and Wire Sizing The wiresized buffered A-tree (WBA-tree) algorithm was proposed [38] for simultaneous routing tree topology construction, buffer insertion and wiresizing. <p> Other methods have also been proposed for simultaneous topology construction and wire sizing, including a greedy dynamic wire sizing during iterative routing tree construction and use of link insertion with dynamic wire sizing to create non-tree topologies. These algorithms are summarized in <ref> [3] </ref>. IV. OPTIMIZATION RESULTS AND COMPARATIVE STUDIES A. Impact of Interconnect Optimization on Future Technology Generations We applied three interconnect optimization techniques for interconnect delay minimization of a 2 cm global interconnect and a 1 mm local interconnect for each technology generation in NTRS.
Reference: [4] <author> W. C. </author> <title> Elmore, The transient response of damped linear networks with particular regard to wide-band amplifiers, </title> <journal> Journal of Applied Physics, </journal> <volume> vol. 19, </volume> <pages> pp. 5563, </pages> <month> Jan. </month> <year> 1948. </year>
Reference-contexts: The first moment m 1 = R 1 0 t h (t)dt, also called the Elmore delay model <ref> [4] </ref>, is most commonly used for delay estimation in an RC tree. In essence, the Elmore delay model uses the mean of the impulse response h (t) to approximate the 50% delay of the step response (un-der the step input), which corresponds to the median of the impulse response.
Reference: [5] <author> J. Rubinstein, P. Penfield, Jr., and M. A. Horowitz, </author> <title> Signal delay in RC tree networks, </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> vol. CAD-2, </volume> <pages> pp. </pages> <address> 202211, </address> <month> July </month> <year> 1983. </year>
Reference-contexts: It was shown that the Elmore delay from source s 0 to node i in an RC tree can be computed by the following simple equation <ref> [5] </ref>: t (s 0 ; i) = k2P ath (s 0 ;i) where P ath (s 0 ; i) is the unique path from source s 0 to node i in an RC tree, R k is the resistance at node k, and Cap (k) is the total capacitance of the
Reference: [6] <author> R. Gupta, B. Tutuianu, B. Krauter, and L. T. Pillage, </author> <title> The Elmore delay as a bound for RC trees with generalized input signals, </title> <booktitle> in Proc. Design Automation Conf, </booktitle> <pages> pp. 364369, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: In general, the Elmore delay of a sink in an RC tree gives an upper bound on the actual 50% delay of the sink under the step input <ref> [6] </ref>. The Elmore delay allows us to explicitly express the signal delay as a simple algebraic function of the geometric parameters of the interconnect (the lengths and widths of wires), so that it can be easily used for interconnect optimization.
Reference: [7] <author> L. T. Pillage and R. A. Rohrer, </author> <title> Asymptotic waveform evaluation for timing analysis, </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> vol. 9, </volume> <pages> pp. 352366, </pages> <month> Apr. </month> <year> 1990. </year>
Reference-contexts: But the absolute value of Elmore delay may not be very accurate. So, it is not suitable to be used directly for accurate circuit timing analysis. Higher order moments can be used for more accurate reduced-order RC models. The Asymptotic Waveform Evaluation (AWE) method <ref> [7] </ref> based on Pade approximation uses higher order moments to constructs a q-pole transfer function ^ H (s), called the reduced-order q-pole model, ^ H (s) = i=1 s p i to approximate the actual transfer function H (s), where p i are poles and k i are residues, all of <p> i=1 s p i to approximate the actual transfer function H (s), where p i are poles and k i are residues, all of which can be determined uniquely by matching the initial boundary conditions and the first 2q 1 moments of H (s) to those of ^ H (s) <ref> [7] </ref>. The response waveform in the time domain under the step input is given by ^ h (t) = i=1 p i t The choice of order q depends on the accuracy required but is usually much less than the order of the circuit.
Reference: [8] <author> P. Feldmann and R. W. Freund, </author> <title> Efficient linear circuit analysis by Pade approximation via the Lanczos process, </title> <booktitle> in Proc. European Design Automation Conf., </booktitle> <year> 1994. </year>
Reference-contexts: Recent progresses on reduced-order models include the use of the PVL (Pade Via Lanczos) method for Pade approximation without direct moment computation <ref> [8, 9] </ref>, the congruence transformations to create reduced RC networks which are guaranteed to be stable and passive [10], and the coordinate-transformed Arnoldi algorithm that can be applied to general RLC network [11].
Reference: [9] <author> P. Feldmann and R. W. Freund, </author> <title> Reduced-order modeling of large linear subcircuits via a block Lanczos algorithm, </title> <booktitle> in Proc. Design Automation Conf, </booktitle> <pages> pp. 474479, </pages> <year> 1995. </year>
Reference-contexts: Recent progresses on reduced-order models include the use of the PVL (Pade Via Lanczos) method for Pade approximation without direct moment computation <ref> [8, 9] </ref>, the congruence transformations to create reduced RC networks which are guaranteed to be stable and passive [10], and the coordinate-transformed Arnoldi algorithm that can be applied to general RLC network [11].
Reference: [10] <author> K. J. Kerns, I. L. Wemple, and A. T. Yang, </author> <title> Stable and efficient reduction of substrate model networks using congruence transforms, </title> <booktitle> in Proc. Int. Conf. on Computer Aided Design, </booktitle> <pages> pp. </pages> <address> 207214, </address> <year> 1995. </year>
Reference-contexts: Recent progresses on reduced-order models include the use of the PVL (Pade Via Lanczos) method for Pade approximation without direct moment computation [8, 9], the congruence transformations to create reduced RC networks which are guaranteed to be stable and passive <ref> [10] </ref>, and the coordinate-transformed Arnoldi algorithm that can be applied to general RLC network [11].
Reference: [11] <author> L. M. Silveira, M. Kamon, I. Elfadel, and J. White, </author> <title> A coordinate-transformed Arnoldi algorithm for generating guaranteed stable reduced-order models for RLC circuits, </title> <booktitle> in Proc. Int. Conf. on Computer Aided Design, </booktitle> <pages> pp. 288294, </pages> <year> 1996. </year>
Reference-contexts: models include the use of the PVL (Pade Via Lanczos) method for Pade approximation without direct moment computation [8, 9], the congruence transformations to create reduced RC networks which are guaranteed to be stable and passive [10], and the coordinate-transformed Arnoldi algorithm that can be applied to general RLC network <ref> [11] </ref>. The objective of these algorithms is to overcome the numerical instability of the AWE method. 3 Sensitivity-based methods have been proposed to use higher order moments for fast timing analysis to greedily guide the optimization process to a local optima.
Reference: [12] <author> J. K. Ousterhout, </author> <title> Switch-level delay models for digital MOS VLSI, </title> <booktitle> in Proc. Design Automation Conf, </booktitle> <pages> pp. 542548, </pages> <year> 1984. </year>
Reference-contexts: A more accurate model, called the slope model, uses a one-dimensional table to compute the effective driver resistance based on the concept of rise-time ratio <ref> [12] </ref>. It first uses the output load and transistor size to compute the intrinsic rise-time of the driver, which is the rise-time at the output under the step input.
Reference: [13] <author> N. H. E. Weste and K. Eshraghian, </author> <title> Principles of CMOS VLSI Design: a Systems Perspective. </title> <publisher> Addison-Wesley, </publisher> <editor> second ed., </editor> <year> 1993. </year>
Reference-contexts: Such a model can be very accurate if one can afford the time and space to generate a detailed multi-dimensional table for each gate. Alternatively, one can store the characterization data much more compactly in the form of k-factor equations <ref> [13, 14] </ref>, such as: t d = (k 1 + k 2 C L ) t t + k 3 C L + k 4 C L + k 5 (6) 0 0 0 2 0 0 where k 15 and k 0 15 are determined based on linear regression or
Reference: [14] <author> J. Qian, S. Pullela, and L. T. Pileggi, </author> <title> Modeling the effective capacitance for the RC interconnect of CMOS gates, </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> vol. 13, </volume> <pages> pp. 15261535, </pages> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Such a model can be very accurate if one can afford the time and space to generate a detailed multi-dimensional table for each gate. Alternatively, one can store the characterization data much more compactly in the form of k-factor equations <ref> [13, 14] </ref>, such as: t d = (k 1 + k 2 C L ) t t + k 3 C L + k 4 C L + k 5 (6) 0 0 0 2 0 0 where k 15 and k 0 15 are determined based on linear regression or <p> Since a very large look-up table or complex k-factor equations and very extensive simulations are needed to account for all possible combinations of C 1 , C 2 and R in a -model, the effective capacitance model <ref> [14] </ref> was proposed to allow drivers to be still pre-characterized in terms of a single load capacitance, even when used to drive dis tributed RC interconnects. <p> A so-called resistance model (R-model) was also proposed in <ref> [14] </ref> to better approximate the slow decaying tail portion of the response waveform when the driver is behaving like a resistance to ground. The model can be used to fur ther account for the interaction between the RC interconnect and the driver when computing the interconnect delay [16].
Reference: [15] <author> P. R. O'Brien and T. L. Savarino, </author> <title> Modeling the driving-point characteristic of resistive interconnect for accurate delay estimation, </title> <booktitle> in Proc. Design Automation Conf, </booktitle> <pages> pp. 512515, </pages> <month> Nov. </month> <year> 1989. </year>
Reference-contexts: Moreover, the interaction between the driver and the interconnect model should be considered during the driver pre-characterization. Since a distributed RC interconnect has many parameters, the information usually need to be compressed for driver pre-characterization. For example, the -model <ref> [15] </ref> was proposed to approximate the driving point (i.e, the output of the driver) admittance as shown in Fig. 4 (c).
Reference: [16] <author> N. Menezes, S. Pullela, and L. T. Pileggi, </author> <title> Simultaneous gate and interconnect sizing for circuit-level delay optimization, </title> <booktitle> in Proc. Design Automation Conf, </booktitle> <pages> pp. 690695, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: The model can be used to fur ther account for the interaction between the RC interconnect and the driver when computing the interconnect delay <ref> [16] </ref>. These methods illustrate the complication of the interaction between the driver model and the interconnect model in the deep submicron design. III. INTERCONNECT LAYOUT OPTIMIZATION Given the growing importance of interconnects, interconnect optimization needs to be considered in every step of the layout design process.
Reference: [17] <author> P. S. Hauge, R. Nair, and E. J. Yoffa, </author> <title> Circuit placement for predictable performance, </title> <booktitle> in Proc. Int. Conf. on Computer Aided Design, </booktitle> <pages> pp. 8891, </pages> <year> 1987. </year>
Reference-contexts: Placement has the biggest impact on the wire-length. Timing-driven placement methods can be classified into the net-based approaches and path-based approaches. For net-based approaches, a delay budgeting algorithm is first applied on the netlist to compute the timing slack for each net (or two-terminal subnet) (e.g. <ref> [17] </ref>). These slacks are then translated into wirelength upper bound constraints (e.g. [18]) or the net weights in the optimization objective function used by the placement engine. Path-based approaches usually use mathematical programming techniques and consider the path-based timing constraints directly in the problem formulation (e.g. [19]).
Reference: [18] <author> W. Swartz and C. Sechen, </author> <title> Timing driven placement for large standard cell circuits, </title> <booktitle> in Proc. Design Automation Conf, </booktitle> <pages> pp. 211215, </pages> <year> 1995. </year>
Reference-contexts: For net-based approaches, a delay budgeting algorithm is first applied on the netlist to compute the timing slack for each net (or two-terminal subnet) (e.g. [17]). These slacks are then translated into wirelength upper bound constraints (e.g. <ref> [18] </ref>) or the net weights in the optimization objective function used by the placement engine. Path-based approaches usually use mathematical programming techniques and consider the path-based timing constraints directly in the problem formulation (e.g. [19]).
Reference: [19] <author> A. Srinivasan, K. Chaudhary, and E. S. Kuh, RITUAL: </author> <title> Performance driven placement algorithm for small cell ics, </title> <booktitle> in Proc. Int. Conf. on Computer Aided Design, </booktitle> <pages> pp. 4851, </pages> <year> 1991. </year>
Reference-contexts: These slacks are then translated into wirelength upper bound constraints (e.g. [18]) or the net weights in the optimization objective function used by the placement engine. Path-based approaches usually use mathematical programming techniques and consider the path-based timing constraints directly in the problem formulation (e.g. <ref> [19] </ref>). In both cases, the estimated wirelengths of the timing critical nets (often measured in terms of the half perimeter of the net bounding box) are minimized during the placement, possibly at the expense of the wirelengths of non-timing critical nets.
Reference: [20] <author> J. Cong, K. S. Leung, and D. Zhou, </author> <title> Performance-driven interconnect design based on distributed RC delay model, </title> <booktitle> in Proc. Design Automation Conf, </booktitle> <pages> pp. 606611, </pages> <year> 1993. </year>
Reference-contexts: These methods are surveyed in [3]. However, when the interconnect resistance needs to be considered as well, wirelength minimization alone during global routing may not lead to the minimum interconnect delay. Interconnect topology optimization needs to be considered. B. Interconnect Topology Optimization It was shown in <ref> [20] </ref> that when the resistance ratio, defined to be the driver effective resistance over the unit wire resistance, is small enough, both the total wirelength (i.e. the total interconnect capacitance) and interconnect topology will impact the interconnect delay. <p> Other algorithms in this class include the AHHK tree construction and the `performance oriented spanning tree' construction, which are discussed in [22] and [3]. In particular, it was shown in <ref> [20] </ref> that a minimal length shortest path tree in the Manhattan plane (called the A-tree) can be constructed very efficiently using a bottom-up merging heuristic with sizable delay reduction yet only a small wire-length overhead compared to the OST. <p> Then, a top-down back-tracing procedure is carried out to select the buffer assignment solution that led to the optimal option at the source. E. Wiresizing Optimization It was first shown in <ref> [20, 29] </ref> that when wire resistance becomes significant, as in the deep submicron design, proper wire-sizing can effectively reduce the interconnect delay. <p> The reader may refer to [3] for more details. F.2. Simultaneous Topology Construction with Buffer and Wire Sizing The wiresized buffered A-tree (WBA-tree) algorithm was proposed [38] for simultaneous routing tree topology construction, buffer insertion and wiresizing. It naturally combines the A-tree construction algorithm <ref> [20] </ref> and the simultaneous buffer insertion and wiresizing algorithm [30], as both use bottom-up construction techniques. The WBA algorithm includes a bottom-up synthesis procedure and a top-down selection procedure.
Reference: [21] <author> J. Cong, A. B. Kahng, G. Robins, M. Sarrafzadeh, and C. K. Wong, </author> <title> Provably good performance-driven global routing, </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> vol. 11, </volume> <pages> pp. 739752, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: A number of algorithms have been developed to minimize both the path-lengths and the total wire-length in a routing tree. For example, the bounded-radius bounded-cost (BRBC) algorithm <ref> [21] </ref> bounds the radius (i.e. the maximum path-length between the driver and a sink) in the routing tree while minimizing its total wire-length. It first constructs an MST, then eliminates the long paths by adding `short-cuts' into the MST and computing a shortest path tree of the resulting graph.
Reference: [22] <author> A. B. Kahng and G. Robins, </author> <title> On Optimal Interconnections for VLSI. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1994. </year>
Reference-contexts: It first constructs an MST, then eliminates the long paths by adding `short-cuts' into the MST and computing a shortest path tree of the resulting graph. Other algorithms in this class include the AHHK tree construction and the `performance oriented spanning tree' construction, which are discussed in <ref> [22] </ref> and [3]. In particular, it was shown in [20] that a minimal length shortest path tree in the Manhattan plane (called the A-tree) can be constructed very efficiently using a bottom-up merging heuristic with sizable delay reduction yet only a small wire-length overhead compared to the OST.
Reference: [23] <author> J. Cong and P. H. Madden, </author> <title> Performance driven routing with multiple sources, </title> <booktitle> in Proc. IEEE Int. Symp. on Circuits and Systems, </booktitle> <pages> pp. </pages> <address> 1.203 1.206, </address> <year> 1995. </year>
Reference-contexts: The A-tree construction method has been extended to signal nets with multiple drivers (as in signal busses) <ref> [23] </ref>. Further optimization of interconnect topology involves using more accurate delay models during routing tree topology construction.
Reference: [24] <author> K. D. Boese, A. B. Kahng, and G. Robins, </author> <title> High-performance routing trees with identified critical sinks, </title> <booktitle> in Proc. Design Automation Conf, </booktitle> <pages> pp. 182187, </pages> <year> 1993. </year>
Reference-contexts: The A-tree construction method has been extended to signal nets with multiple drivers (as in signal busses) [23]. Further optimization of interconnect topology involves using more accurate delay models during routing tree topology construction. For example, the Elmore delay model was used in <ref> [24] </ref> and the 2-pole delay model was used in [25] to evaluate which node or edge to be added to the routing tree during iterative tree construction. Other methods, such as the alphabetical tree and P-tree construction are also summarized in [3]. C.
Reference: [25] <author> D. Zhou, F. Tsui, and D. S. Gao, </author> <title> High performance multichip interconnection design, </title> <booktitle> in Proc. 4th ACM/SIGDA Physical Design Workshop, </booktitle> <pages> pp. 3243, </pages> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: Further optimization of interconnect topology involves using more accurate delay models during routing tree topology construction. For example, the Elmore delay model was used in [24] and the 2-pole delay model was used in <ref> [25] </ref> to evaluate which node or edge to be added to the routing tree during iterative tree construction. Other methods, such as the alphabetical tree and P-tree construction are also summarized in [3]. C.
Reference: [26] <author> N. Hedenstierna and K. O. Jeppson, </author> <title> CMOS circuit speed and buffer optimization, </title> <journal> IEEE Trans. on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> vol. CAD-6, </volume> <pages> pp. 270281, </pages> <month> Mar. </month> <year> 1987. </year>
Reference-contexts: When N is not fixed, the optimal stage ratio f = e and the stage number is N = ln ( C g ). When the more accurate driver delay model is used with consideration of the driver input transition time and output capacitance, the result in <ref> [26] </ref> shows that the optimal stage ratio f satisfies f = e (ff+f)=f where ff is the ratio between the intrinsic output capacitance and the input gate capacitance of the inverter. For the technology used in [26], ff is about 1.35 and the optimal stage ratio is in the range of <p> with consideration of the driver input transition time and output capacitance, the result in <ref> [26] </ref> shows that the optimal stage ratio f satisfies f = e (ff+f)=f where ff is the ratio between the intrinsic output capacitance and the input gate capacitance of the inverter. For the technology used in [26], ff is about 1.35 and the optimal stage ratio is in the range of 35 instead of e. In general, transistor sizing can be used to determine the optimal width for each transistor to optimize the overall circuit performance.
Reference: [27] <author> J. P. Fishburn and A. E. Dunlop, TILOS: </author> <title> A posynomial programming approach to transistor sizing, </title> <booktitle> in Proc. Int. Conf. on Computer Aided Design, </booktitle> <pages> pp. 326328, </pages> <year> 1985. </year>
Reference-contexts: In general, transistor sizing can be used to determine the optimal width for each transistor to optimize the overall circuit performance. This technique is often used in cell generation and full-custom layout. It is usually assumed that the transistor can be assigned a continuous width. The early work TILOS <ref> [27] </ref> used the simple switch-resistor model for transistors, formulated the transistor sizing problem as a posynomial program, and applied a greedy sensitivity based method. The sensitivity of a transistor is defined to be the delay reduction due to a unit increment of its size.
Reference: [28] <author> L. P. P. P. van Ginneken, </author> <title> Buffer placement in distributed RC-tree networks for minimal Elmore delay, </title> <booktitle> in Proc. IEEE Int. Symp. on Circuits and Systems, </booktitle> <pages> pp. 865868, </pages> <year> 1990. </year>
Reference-contexts: Since the Elmore delay of a long wire grows quadratically in terms of the wirelength, buffer insertion can reduce interconnect delay significantly. A polynomial-time dynamic programming algorithm was presented in <ref> [28] </ref> to find the optimal buffer placement and sizing for RC trees under the Elmore delay model. The formulation assumes that the possible buffer positions (called legal positions), possible buffer sizes, and the required arrival times at sinks are given, and maximizes the required arrival time at the source.
Reference: [29] <author> J. Cong and K. S. Leung, </author> <title> Optimal wiresizing under the distributed Elmore delay model, </title> <booktitle> in Proc. Int. Conf. on Computer Aided Design, </booktitle> <pages> pp. 634639, </pages> <year> 1993. </year>
Reference-contexts: Then, a top-down back-tracing procedure is carried out to select the buffer assignment solution that led to the optimal option at the source. E. Wiresizing Optimization It was first shown in <ref> [20, 29] </ref> that when wire resistance becomes significant, as in the deep submicron design, proper wire-sizing can effectively reduce the interconnect delay.
Reference: [30] <author> J. Lillis, C. K. Cheng, and T. T. Y. Lin, </author> <title> Optimal wire sizing and buffer insertion for low power and a generalized delay model, </title> <booktitle> in Proc. Int. Conf. on Computer Aided Design, </booktitle> <pages> pp. 138143, </pages> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: The reader may refer to [3] for more details. An alternative approach to wiresizing optimization computes an optimal wiresizing solution using bottom-up merging and top-down selection <ref> [30] </ref> in a very similar way as the buffer insertion algorithm presented in the preceding subsection. <p> F.2. Simultaneous Topology Construction with Buffer and Wire Sizing The wiresized buffered A-tree (WBA-tree) algorithm was proposed [38] for simultaneous routing tree topology construction, buffer insertion and wiresizing. It naturally combines the A-tree construction algorithm [20] and the simultaneous buffer insertion and wiresizing algorithm <ref> [30] </ref>, as both use bottom-up construction techniques. The WBA algorithm includes a bottom-up synthesis procedure and a top-down selection procedure. During the bottom-up synthesis procedure, it selects two subtrees for merging with consideration of both minimization of wirelength and maximization of the estimated arrival time at the source.
Reference: [31] <author> N. Menezes, S. Pullela, F. Dartu, and L. T. Pillage, </author> <title> RC interconnect synthesisa moment fitting appraoch, </title> <booktitle> in Proc. Int. Conf. on Computer Aided Design, </booktitle> <pages> pp. 418425, </pages> <year> 1994. </year>
Reference-contexts: Further studies on wiresizing optimization include using more accurate delay models, such as higher-order RC delay models <ref> [31] </ref> and lossy transmission line models [32], and understanding the optimal wire shape under the assumption that non-uniform continuous wire-sizing is allowed to each wire segment [33]. These results are discussed in more details in [3].
Reference: [32] <author> T. Xue, E. S. Kuh, and Q. Yu, </author> <title> A sensitivity-based wiresizing approach to interconnect optimization of lossy transmission line topologies, </title> <booktitle> in Proc. IEEE Multi-Chip Module Conf., </booktitle> <pages> pp. 117121, </pages> <year> 1996. </year>
Reference-contexts: Further studies on wiresizing optimization include using more accurate delay models, such as higher-order RC delay models [31] and lossy transmission line models <ref> [32] </ref>, and understanding the optimal wire shape under the assumption that non-uniform continuous wire-sizing is allowed to each wire segment [33]. These results are discussed in more details in [3].
Reference: [33] <author> C.-P. Chen, H. Zhou, and D. F. Wong, </author> <title> Optimal non-uniform wire-sizing under the Elmore delay model, </title> <booktitle> in Proc. Int. Conf. on Computer Aided Design, </booktitle> <pages> pp. 3843, </pages> <year> 1996. </year>
Reference-contexts: Further studies on wiresizing optimization include using more accurate delay models, such as higher-order RC delay models [31] and lossy transmission line models [32], and understanding the optimal wire shape under the assumption that non-uniform continuous wire-sizing is allowed to each wire segment <ref> [33] </ref>. These results are discussed in more details in [3]. All these algorithms, however, optimize the wire widths of a single net and ignore the coupling capacitance between adjacent nets, which can be significant in deep submicron designs.
Reference: [34] <author> J. Cong, L. He, C.-K. Koh, and Z. Pan, </author> <title> Global interconnect sizing and spacing with consideration of coupling capacitance, </title> <booktitle> in Proc. Int. Conf. on Computer Aided Design, </booktitle> <year> 1997. </year>
Reference-contexts: Recently, an efficient algorithm named GISS (global interconnect sizing and spacing) was developed to optimize the widths and spacings for multiple nets simultaneously with consideration coupling capacitance for delay minimization <ref> [34] </ref>. It reported substantial further delay reduction compared to the single net wire sizing algorithms. F. Simultaneous Device and Interconnect Optimization The most effective approach to performance optimization is to consider the interaction between devices and interconnects, and optimize both of them at the same time.
Reference: [35] <author> J. Cong and C.-K. Koh, </author> <title> Simultaneous driver and wire sizing for performance and power optimization, </title> <journal> IEEE Trans. on Very Large Scale Integration (VLSI) Systems, </journal> <volume> vol. 2, </volume> <pages> pp. 408423, </pages> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Two approaches are discussed in this subsection. F.1. Simultaneous Device and Wire Sizing The simultaneous driver and wire sizing (SDWS) problem was studied in <ref> [35] </ref> and later generalized to simultaneous buffer and wire sizing (SBWS) in a buffered routing tree [36]. In both cases, the switch-resistor model is used for the driver and the Elmore delay model is used for the interconnects modeled as RC trees.
Reference: [36] <author> J. Cong, C.-K. Koh, and K.-S. Leung, </author> <title> Simultaneous buffer and wire sizing for performance and power optimization, </title> <booktitle> in Proc. Int. Symp. on Low Power Electronics and Design, </booktitle> <pages> pp. 271276, </pages> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: Two approaches are discussed in this subsection. F.1. Simultaneous Device and Wire Sizing The simultaneous driver and wire sizing (SDWS) problem was studied in [35] and later generalized to simultaneous buffer and wire sizing (SBWS) in a buffered routing tree <ref> [36] </ref>. In both cases, the switch-resistor model is used for the driver and the Elmore delay model is used for the interconnects modeled as RC trees.
Reference: [37] <author> J. Cong and L. </author> <title> He, An efficient approach to simultaneous transistor and interconnect sizing, </title> <booktitle> in Proc. Int. Conf. on Computer Aided Design, </booktitle> <pages> pp. 181186, </pages> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: This approach has been shown to be very effective for optimizing very large buffered trees, yielding substantial reduction on both delay and power dissipation compared to manual designs. In fact, it was recently shown in <ref> [37] </ref> that the dominance property holds for a large class of objective functions called general CH-posynomials. Based on this general result, the work in [37] is able Fig. 6. <p> In fact, it was recently shown in <ref> [37] </ref> that the dominance property holds for a large class of objective functions called general CH-posynomials. Based on this general result, the work in [37] is able Fig. 6. Delays of 1 mm and 2 cm M4 lines under driver sizing only (DS), buffer insertion and sizing (BIS) and buffer insertion and sizing and wiresizing (BISWS). to perform simultaneous transistor and wire sizing efficiently given a general netlist (not limited to buffered trees).
Reference: [38] <author> T. Okamoto and J. Cong, </author> <title> Buffered Steiner tree construction with wire sizing for interconnect layout optimization, </title> <booktitle> in Proc. Int. Conf. on Computer Aided Design, </booktitle> <pages> pp. 4449, </pages> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: The reader may refer to [3] for more details. F.2. Simultaneous Topology Construction with Buffer and Wire Sizing The wiresized buffered A-tree (WBA-tree) algorithm was proposed <ref> [38] </ref> for simultaneous routing tree topology construction, buffer insertion and wiresizing. It naturally combines the A-tree construction algorithm [20] and the simultaneous buffer insertion and wiresizing algorithm [30], as both use bottom-up construction techniques. The WBA algorithm includes a bottom-up synthesis procedure and a top-down selection procedure.
Reference: [39] <author> J. Cong and C.-K. Koh, </author> <title> Interconnect layout optimization under higher-order RLC model, </title> <booktitle> in Proc. Int. Conf. on Computer Aided Design, </booktitle> <year> 1997. </year>
Reference-contexts: The WBA algorithm has been extended recently to explore multiple interconnect topologies at each subtree and use high-order RLC delay models based on efficient incremental moment computation in partially constructed routing trees <ref> [39] </ref>. Other methods have also been proposed for simultaneous topology construction and wire sizing, including a greedy dynamic wire sizing during iterative routing tree construction and use of link insertion with dynamic wire sizing to create non-tree topologies. These algorithms are summarized in [3]. IV.
Reference: [40] <author> J. Cong and L. </author> <title> He, Optimal wiresizing for interconnects with multiple sources, </title> <journal> ACM Trans. on Design Automation of Electronics Systems, </journal> <volume> vol. 1, </volume> <pages> pp. 478511, </pages> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: In particular, we shall compare the following four optimization strategies: * T+B+W: A-tree construction (Section III.F.2), followed by optimal buffer insertion and sizing (Section III.F.1) with B=10 buffer sizes, then followed by optimal wiresizing using bundled local refinement <ref> [40] </ref> based on the dominance property (Section III.E) with W=18 wire widths. * TB+SBWS: simultaneous topology and buffer optimization (Section III.F.2) with B=3 followed by simultaneous buffer and wiresizing (Section III.F.1) with B=40 and W=18. * Tbw+SBWS: simultaneous topology, buffer insertion and sizing, and wiresize optimization (Section III.F.2) with very limited
References-found: 40

