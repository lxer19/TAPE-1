URL: http://www.cs.wustl.edu/~schmidt/RT-middleware.ps.gz
Refering-URL: http://www.cs.wustl.edu/~levine/research/cv.html
Root-URL: 
Email: fschmidt,rajeev,levine,sumedh,gurug@cs.wustl.edu  
Title: An ORB Endsystem Architecture for Statically Scheduled Real-time Applications  
Author: Douglas C. Schmidt, Rajeev Bector, David L. Levine, Sumedh Mungee, and Guru Parulkar 
Keyword: Real-time CORBA, Object Request Broker, Quality of Service, OO Middleware, I/O Subsystem  
Address: St. Louis, MO 63130, USA  
Affiliation: Department of Computer Science, Washington University  
Abstract: This paper appeared in the IEEE Workshop on Middleware for Real-Time Systems and Services, San Francisco, CA, De-cember 2nd, 1997. Abstract There is increasing demand to extend object-oriented middle-ware to support applications with stringent quality of service (QoS) requirements. However, conventional object-oriented middleware does not define standard features for specifying or enforcing end-to-end QoS for applications with deterministic or statistical real-time requirements. This paper focuses on strategies for integrating I/O subsystems with object-oriented middleware to produce ORB endsystems for statically scheduled real-time applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.2 ed., </editor> <month> Feb. </month> <year> 1998. </year>
Reference-contexts: 1 Introduction Existing Object Request Broker (ORB) middleware like CORBA <ref> [1] </ref>, DCOM [2], and Java RMI [3] is suitable for request/response applications with best-effort quality of service requirements. <p> ORB Core: When a client invokes an operation on a servant, the ORB Core is responsible for delivering the request to the servant and returning a response, if any, to the client. For servants executing remotely, a CORBA-compliant <ref> [1] </ref> ORB Core communicates via the Internet Inter-ORB Protocol (IIOP), a version of the General Inter-ORB Protocol (GIOP) which runs atop the TCP transport protocol. An ORB Core is typically implemented as a run-time library linked into client and server applications. <p> Clients making requests need not know whether the server ORB uses static skeletons or dynamic skeletons. Object Adapter: An Object Adapter associates a servant with an ORB, demultiplexes incoming requests to the servant, and dispatches the appropriate operation upcall on that servant. Recent CORBA portability enhancements <ref> [1] </ref> define the Portable Object Adapter (POA), which supports multiple nested POAs per ORB. 3 Designing a Real-time ORB Endsys tem 3.1 Real-time Support in TAO To support the QoS demands of distributed object computing applications, an ORB endsystem must be flexible, efficient, predictable, and convenient to program.
Reference: [2] <author> D. </author> <title> Box, Essential COM. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1997. </year>
Reference-contexts: 1 Introduction Existing Object Request Broker (ORB) middleware like CORBA [1], DCOM <ref> [2] </ref>, and Java RMI [3] is suitable for request/response applications with best-effort quality of service requirements.
Reference: [3] <author> A. Wollrath, R. Riggs, and J. Waldo, </author> <title> A Distributed Object Model for the Java System, </title> <booktitle> USENIX Computing Systems, </booktitle> <volume> vol. 9, </volume> <month> November/December </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Existing Object Request Broker (ORB) middleware like CORBA [1], DCOM [2], and Java RMI <ref> [3] </ref> is suitable for request/response applications with best-effort quality of service requirements.
Reference: [4] <author> D. C. Schmidt, A. Gokhale, T. Harrison, and G. </author> <month> Parulkar, </month>
Reference-contexts: However, existing ORB middleware is not yet suited for performance-sensitive, distributed real-time applications due to (1) lack of QoS specification interfaces, (2) lack of QoS enforcement, (3) lack of real-time programming features, and (4) lack of performance optimizations <ref> [4] </ref>. To address these shortcomings, we have developed The ACE ORB (TAO) [5]. TAO is a highly extensible, CORBA-compliant ORB endsystem targeted for applications with deterministic and statistical quality of service requirements, as well as best effort requirements.
References-found: 4

