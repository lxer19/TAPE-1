URL: ftp://rtcl.eecs.umich.edu/outgoing/farnam/ICDCS-97.ps.gz
Refering-URL: http://www.eecs.umich.edu/~farnam/papers/pubs.html
Root-URL: http://www.eecs.umich.edu
Title: Comparison of Two Middleware Data Dissemination Services in a Wide-Area Distributed System  
Author: G. Robert Malan, Farnam Jahanian, and Peter Knoop 
Note: This work is supported by the National Science Foundation under the cooperative agreement IRI-92-16848.  
Address: 1301 Beal Ave. Ann Arbor, Michigan 48109-2122  
Affiliation: University of Michigan Department of Electrical Engineering and Computer Science  
Abstract: This paper provides an experimental comparison of two middleware data dissemination services: a distributed object-based service, and a message-based service. This paper compares these two services in the context of a common application: a wide-area network collaboratory, namely the Upper Atmospheric Research Collaboratory (UARC). UARC is an example of an application that reliably-streams data from a set of suppliers to a set of receivers. This comparison highlights the tradeoffs between ease of implementation and performance for a data streaming middleware service. By relying on a rigid language primitive, namely remote method invocation, the object-based dissemination service gave up the control over its transport policies. In contrast, the lower-level socket-based service was specifically constructed to provide a flexible interface to its applications. This flexibility allowed the mid-dleware to better support data delivery to a heterogeneous set of receivers. This is important in a wide-area distributed system where hosts are connected together over a broad spectrum of network links. This paper provides a concrete example of the effects of high-level design choices in the implementation of a wide-area distributed system's communication middleware. y Copyright 1997 IEEE. Published in the Proceedings of ICDCS'97, May 27-30, 1997 in Baltimore, Maryland. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works, must be obtained from the IEEE. Contact: Manager, Copyrights and Permissions / IEEE Service Center 445 Hoes Lane / P.O. Box 1331 Piscataway, NJ 08855-1331, USA. Telephone: + Intl. 908-562-3966. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Berners-Lee, T., Fielding, R., and Frystyk, H. </author> <title> "Hypertext Transfer Protocol (HTTP) 1.0." </title> <booktitle> RFC 1945, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: These method invocations are implemented as reliable TCP streams. As such, the DDM effectively provides a mul-ticast data distribution service using multiple point-to-point network connections. This is similar to the graph-based NNTP protocol [7]; and data distribution over the World Wide Web using HTTP <ref> [1] </ref>. In the first version of the UARC system, instrument data is represented by an Objective C object. To send this data to a remote machine, a Distributed Object method invocation is used with the instrument data object as the parameter.
Reference: [2] <author> Cristian, F. </author> <title> "Probabilistic Clock Synchronization," </title> <booktitle> Distributed Computing, </booktitle> <pages> (3) pp. 146-158, </pages> <year> 1989. </year>
Reference-contexts: Since the analysis of data in these experiments relies on this distributed timestamp information, a method for synchronizing the clocks on an experiment's hosts was applied. To compensate for the difference in the clocks, a probabilistic clock synchronization technique, similar to the protocols developed by Cristian <ref> [2] </ref> was used. This is further described in [10]. The primary statistics collected during our experiments were: message latency between points in the distribution tree, and message loss between these points.
Reference: [3] <author> Clauer, C.R., Kelly, J.D., Rosenberg, T.J., Ras-mussen, C.E., Stauning, E., Friis-Christensen, E., Niciejewski, R.J., Killeen, T.L., Mende, S.B., Zambre, Y., Weymouth, T.E., Prakash, A., Ol-son, G.M., McDaniel, S.E., Finholt, T.A., and Atkins, D.E. </author> <title> "A New Project to Support Scientific Collaboration Electronically." </title> <journal> In EOS Transactions on American Geophysical Union, </journal> <month> June 28, </month> <year> 1994 </year> <month> (75). </month>
Reference-contexts: This paper provides an experimental comparison of these two middleware implementations in the context of a common application: a distributed scientific collaboratory over the Internet, called the Upper Atmospheric Research Collaboratory (UARC) <ref> [3] </ref>. The UARC project is a multi-institution research effort, whose focus is the creation of an experimental testbed for wide-area scientific collaboratory work. The UARC system provides a collaboratory environment in which a geographically dispersed community of space scientists perform real-time experiments at a remote facility in Greenland.
Reference: [4] <author> Deering, S., Cheriton, D. </author> <title> "Multicast Routing in Datagram Internetworks and Extended LANs." </title> <journal> In ACM Transactions on Computer Systems, </journal> <pages> pp. 85-110, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Clearly, any data distribution service implemented as multiple point-to-point data streams does not scale well. Scalability could be improved by an order of magnitude by utilizing an Internet multicast mechanism <ref> [4, 5] </ref>. The current integration between reliable multicast mechanisms [6] and language-level primitives, such as object method invocations, is nonexistent; providing an excellent opportunity for further study. In fact several organizations have just begun projects where Internet multicast is used to support communication between groups of objects.
Reference: [5] <author> Eriksson, H. "Mbone: </author> <title> The multicast backbone." </title> <journal> Communications of the ACM, </journal> <volume> 37, 8, </volume> <pages> pp. 54-60, </pages> <year> 1994. </year>
Reference-contexts: Clearly, any data distribution service implemented as multiple point-to-point data streams does not scale well. Scalability could be improved by an order of magnitude by utilizing an Internet multicast mechanism <ref> [4, 5] </ref>. The current integration between reliable multicast mechanisms [6] and language-level primitives, such as object method invocations, is nonexistent; providing an excellent opportunity for further study. In fact several organizations have just begun projects where Internet multicast is used to support communication between groups of objects.
Reference: [6] <author> Floyd, S., et. al. </author> <title> "A Reliable Multicast Framework for Light-weight Sessions and Application Level Framing." </title> <booktitle> In Proceedings of ACM SigComm '95, </booktitle> <pages> pp. 342-356, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Clearly, any data distribution service implemented as multiple point-to-point data streams does not scale well. Scalability could be improved by an order of magnitude by utilizing an Internet multicast mechanism [4, 5]. The current integration between reliable multicast mechanisms <ref> [6] </ref> and language-level primitives, such as object method invocations, is nonexistent; providing an excellent opportunity for further study. In fact several organizations have just begun projects where Internet multicast is used to support communication between groups of objects.
Reference: [7] <author> Kantor, B., Lapsley, P. </author> <title> "Network News Transfer Protocol (NNTP)." </title> <type> RFC 977, </type> <month> February </month> <year> 1986. </year>
Reference-contexts: These method invocations are implemented as reliable TCP streams. As such, the DDM effectively provides a mul-ticast data distribution service using multiple point-to-point network connections. This is similar to the graph-based NNTP protocol <ref> [7] </ref>; and data distribution over the World Wide Web using HTTP [1]. In the first version of the UARC system, instrument data is represented by an Objective C object.
Reference: [8] <author> Lampson, B.W. </author> <title> "Hints for Computer Systems Design." </title> <journal> In ACM Operating Systems Review, 21(5) Special Issue, </journal> <pages> pp. 33-48, </pages> <year> 1983. </year>
Reference-contexts: These results echo one of Lampson's hints: Don't Hide Power <ref> [8] </ref>. By relying on a language-level primitive that provided a high level programming abstraction, the object-based DDM gave up the ability to control its network management policies.
Reference: [9] <author> Jacobson, V., Leres, C., and McCanne, S. </author> <title> "The Tcpdump Manual Page." </title> <institution> Lawrence Berkeley Laboratory, Berkeley, </institution> <address> CA, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: TCP Data packet to Uranus (EECS U Michigan) Distributed Objects ACK from Uranus TCP Data packet to UISR (Alaska) Distributed Objects ACK from UISR DDM server and both Uranus and UISR. To further explain this interaction, a machine on the same Ethernet as the server was running tcpdump <ref> [9] </ref> to catch all of the packets exchanged between the object-based DDM server and the two clients. Figure 5 shows these results. The two lines in Figure 5 represent the TCP traffic between the object-based DDM server saturn and the two hosts, uranus and UISR.
Reference: [10] <author> Malan, G.R., Jahanian, F., and Knoop, P. </author> <title> "Comparison of Two Middleware Data Dissemination Services in a Wide-Area Distributed System." </title> <institution> University of Michigan EECS Department Technical Report. </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: To compensate for the difference in the clocks, a probabilistic clock synchronization technique, similar to the protocols developed by Cristian [2] was used. This is further described in <ref> [10] </ref>. The primary statistics collected during our experiments were: message latency between points in the distribution tree, and message loss between these points. The use of the term message in these statistics comes from the fact that both middleware use TCP to send data. <p> In general these results confirm that the interdependencies in the underlying distributed object layer artificially constrain the well-connected clients to a very low data rate, and that this effect vanishes in the direct message-based implementation. For a more detailed discussion of these experiments, refer to <ref> [10] </ref>. 6 Discussion of Results This paper provided the results from a series of experiments on two implementations of the UARC's Data Dissemination Middleware (DDM): one object-based, the other message-based. These results echo one of Lampson's hints: Don't Hide Power [8].
Reference: [11] <author> Malan, G.R., and Jahanian F. </author> <title> "An Application-level Quality of Service Architecture for Internet Collaboratories." </title> <booktitle> In Proceedings of the IEEE RTSS Workshop on Resource Allocation Problems in Multimedia Systems, </booktitle> <month> December </month> <year> 1996. </year>
Reference-contexts: The application can use an interface at the message-based DDM's client to specify a discrete data delivery policy to the server. This allows a client fine-grain control over its delivery policies as discussed in <ref> [11] </ref>. These policies are generally in the form of a skipover parameter that ranges from zero to infinity. These values respectively correspond to First-In-First-Out (FIFO) and Most-Recently-Inserted (MRI) policies. <p> We are working on an interface to the message-based DDM that allows applications to specify a semantic-based application-level Quality of Service for a given data stream <ref> [11] </ref>. Based on the content of the stream, various techniques from discrete data delivery policies to on-demand degradation can be used to provide an effective throughput to slower clients. Acknowledgments A profound debt of gratitude is owed to all the cooperative UARC sites around the world.
Reference: [12] <author> McCanne, S., Jacobson, V., Vetterli, M. </author> <title> "Receiver-driven Layered Multicast." </title> <booktitle> In Proceedings of 1996 SIGCOMM, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: In fact several organizations have just begun projects where Internet multicast is used to support communication between groups of objects. The problem of supporting a range of clients over an IP mul-ticast group has been addressed, (see McCanne <ref> [12] </ref>), but has not been optimally solved. A solution for distributing data to a mixture of both fast and slow hosts will always be needed.
Reference: [13] <institution> NeXT Computer, Inc. </institution> <note> "NeXTSTEP General Reference.", (2) Chapter 6, </note> <year> 1995. </year>
Reference-contexts: The support of objects at the system level made the development of familiar user interface idioms such as the ability to drag-and-drop data objects between UARC's collaboratory tools simple. The three DDM components were combined using NeXTSTEP's Distributed Object subsystem <ref> [13] </ref> to form a single distributed system. In the object-based DDM, Distributed Object method invocations are used to transparently send atmospheric data between the components over the Internet. These method invocations are implemented as reliable TCP streams.
Reference: [14] <author> Sansom, R. D. </author> <title> "Building a Secure Distributed System." </title> <type> PhD dissertation, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: In this case it was able to chose between synchronous and asynchronous message passing mechanisms. In general, the object-based DDM has no control over the communication policies that Distributed Objects uses for message transport. The Distributed Objects transport mechanism is derived from the Mach Netmsg server <ref> [14] </ref>, which in turn uses TCP for in-terhost communication. When a local object invokes a remote method, the Distributed Object subsystem creates a persistent TCP connection between the two hosts. This connection is used for all communication between the two objects, including subsequent method invocations.
Reference: [15] <author> Tannenbaum, </author> <title> A.S. </title> <booktitle> Computer Networks, Third Edition, Prentice-Hall, Chapter 2, </booktitle> <pages> pp. 102-138, </pages> <year> 1996. </year>
References-found: 15

