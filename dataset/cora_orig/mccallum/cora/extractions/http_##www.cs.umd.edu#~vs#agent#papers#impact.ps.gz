URL: http://www.cs.umd.edu/~vs/agent/papers/impact.ps.gz
Refering-URL: http://www.cs.umd.edu/~vs/agent/pubs.html
Root-URL: 
Title: IMPACT: The Interactive Maryland Platform for Agents Collaborating Together  
Author: Khaled Arisha Sarit Kraus Fatma Ozcan Robert Ross V.S. Subrahmanian 
Abstract: In this paper, we describe a platform called IMPACT to support multiagent interactions. The platform provides a set of servers (yellow pages, thesaurus, registration, type and interface) that facilitate agent interoperability in an application independent manner. In IMPACT, agents have an associated set of service descriptions, specifying the services they provide. We develop an HTML-like language for such service descriptions. When an agent wishes to identify another agent that provides a service, the requested service must be matched, using metric approach, against existing service descriptions. We provide a formal framework within which this may be done, and develop algorithms to compute the k nearest matches, as well as all matches within a given distance from the requested service. We report on experiments evaluating our algorithms with large data sets. Subject Area: Agent models and architectures 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. P. Birmingham, E. H. Durfee, T. Mullen and M. P. Wellman. </author> <title> (1995) The Distributed Agent Architecture Of The University of Michigan Digital Library (UMDL), </title> <booktitle> Spring Symposium Series on Software Agent. </booktitle>
Reference-contexts: However, we do not address issues such as load balancing and privacy issues addressed by Decker et. al. [3]. With respect to agent architectures, there have been numerous proposals in the literature (e.g., <ref> [4, 6, 1] </ref>) which have been broadly classified by Genesereth and Ketchpel [5] into four categories: in the first category, each agent has an associated "transducer" that converts all incoming messages and requests into a form that is intelligible to the agent.
Reference: [2] <author> S.E. Conry, K. Kuwabara, V.R. Lesser and R.A. Meyer. </author> <title> (1991) Multistage Negotiation for Distributed Satisfaction, </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, Special Issue on Distributed Artificial Intelligence, </journal> <volume> 21(6) </volume> <pages> 1462-1477. </pages>
Reference-contexts: In contrast, our framework allows point to point communication between agents without having to go through a mediator. There has also been extensive work on collaborative problem solving and negation in multiagent systems (e.g., <ref> [2, 7, 9, 11, 13] </ref>). As our approach supports point to point inter-agent communication, such negotiations can be built on top of our architecture, and thus this body of work complements 17 ours. 6 Conclusions IMPACT is a platform for the creation and deployment of multiagent applications.
Reference: [3] <author> K. Decker, K. Sycara and M. Williamson. </author> <title> (1997) Middle Agents for the Internet, </title> <booktitle> Proc. IJCAI 97, </booktitle> <address> Nagoya, Japan, pps 578-583. </address>
Reference-contexts: In contrast, COINS assumes that a message is a document (represented by a weighted term vector) and retrieves the "most similar" advertised services using the SMART algorithm of Salton [12]. Decker, Sycara, and Williamson <ref> [3] </ref> present matchmakers that store capability advertisements of different agents. They look for exact matches between requested services and retrieved services, and concentrate their efforts on architectures that support load balancing and protection of privacy of different agents. <p> However, we do not address issues such as load balancing and privacy issues addressed by Decker et. al. <ref> [3] </ref>.
Reference: [4] <author> L. Gasser and T. Ishida. </author> <title> (1991) A Dynamic Organizational Architecture For Adaptive Problem Solving, </title> <booktitle> Proc. of AAAI-91, </booktitle> <address> California, pps 185-190. </address>
Reference-contexts: However, we do not address issues such as load balancing and privacy issues addressed by Decker et. al. [3]. With respect to agent architectures, there have been numerous proposals in the literature (e.g., <ref> [4, 6, 1] </ref>) which have been broadly classified by Genesereth and Ketchpel [5] into four categories: in the first category, each agent has an associated "transducer" that converts all incoming messages and requests into a form that is intelligible to the agent.
Reference: [5] <author> M.R. Genesereth and S.P. Ketchpel. </author> <title> (1994) Software Agents, </title> <journal> CACM, </journal> <volume> Vol. 37, Nr. </volume> <pages> 7. </pages>
Reference-contexts: However, we do not address issues such as load balancing and privacy issues addressed by Decker et. al. [3]. With respect to agent architectures, there have been numerous proposals in the literature (e.g., [4, 6, 1]) which have been broadly classified by Genesereth and Ketchpel <ref> [5] </ref> into four categories: in the first category, each agent has an associated "transducer" that converts all incoming messages and requests into a form that is intelligible to the agent. This is clearly not what happens in IMPACT as noted in [5], the transducer has to anticipate what other agents will <p> which have been broadly classified by Genesereth and Ketchpel <ref> [5] </ref> into four categories: in the first category, each agent has an associated "transducer" that converts all incoming messages and requests into a form that is intelligible to the agent. This is clearly not what happens in IMPACT as noted in [5], the transducer has to anticipate what other agents will send us and translate that something which is clearly difficult to do. The second approach is based on wrappers which "inject code into a program to allow it to communicate" [5, p.51]. <p> The second approach is based on wrappers which "inject code into a program to allow it to communicate" <ref> [5, p.51] </ref>. The IMPACT architecture provides a language (the service description language) for expressing such wrappers, together with accompanying algorithms. The third approach described in [5] is to completely rewrite the code implementing an agent which is obviously a very expensive alternative. <p> The second approach is based on wrappers which "inject code into a program to allow it to communicate" [5, p.51]. The IMPACT architecture provides a language (the service description language) for expressing such wrappers, together with accompanying algorithms. The third approach described in <ref> [5] </ref> is to completely rewrite the code implementing an agent which is obviously a very expensive alternative. Last but not least, there is the mediation approach proposed by Wiederhold [14], whch assumes that all agents will communicate with a mediator which in turn may send messages to other agents.
Reference: [6] <author> L. Glicoe, R. Staats and M. Huhns. </author> <title> (1995) A Multi-Agent Environment for Department of Defense Distribution, </title> <booktitle> IJCAI95 Workshop on Intelligent Systems. </booktitle>
Reference-contexts: However, we do not address issues such as load balancing and privacy issues addressed by Decker et. al. [3]. With respect to agent architectures, there have been numerous proposals in the literature (e.g., <ref> [4, 6, 1] </ref>) which have been broadly classified by Genesereth and Ketchpel [5] into four categories: in the first category, each agent has an associated "transducer" that converts all incoming messages and requests into a form that is intelligible to the agent.
Reference: [7] <author> N. R. Jennings. </author> <title> (1995) Controlling Cooperative Problem Solving in Industrial Multi-Agent Systems Using Joint Intentions, </title> <journal> Artificial Intelligence Journal, </journal> <volume> 75(2) </volume> <pages> 1-46. </pages>
Reference-contexts: In contrast, our framework allows point to point communication between agents without having to go through a mediator. There has also been extensive work on collaborative problem solving and negation in multiagent systems (e.g., <ref> [2, 7, 9, 11, 13] </ref>). As our approach supports point to point inter-agent communication, such negotiations can be built on top of our architecture, and thus this body of work complements 17 ours. 6 Conclusions IMPACT is a platform for the creation and deployment of multiagent applications.
Reference: [8] <author> H. Korth and A. Silberschatz. </author> <title> (1986) Database System Concepts, </title> <publisher> McGraw Hill. </publisher> <pages> 18 </pages>
Reference: [9] <author> S. Kraus. </author> <title> (1997) Negotiation and Cooperation in Multi-Agent Environments, </title> <journal> Artificial Intel ligence journal, Special Issue on Economic Principles of Multi-Agent Systems. 94(1-2):79-98. </journal>
Reference-contexts: In contrast, our framework allows point to point communication between agents without having to go through a mediator. There has also been extensive work on collaborative problem solving and negation in multiagent systems (e.g., <ref> [2, 7, 9, 11, 13] </ref>). As our approach supports point to point inter-agent communication, such negotiations can be built on top of our architecture, and thus this body of work complements 17 ours. 6 Conclusions IMPACT is a platform for the creation and deployment of multiagent applications.
Reference: [10] <author> D. Kuokka and L. Harada. </author> <title> (1996) Integrating Information via Matchmaking, </title> <journal> Journal of In telligent Informations Systems, </journal> <volume> 6(2/3): </volume> <pages> 261-279. </pages>
Reference-contexts: Two of the best known examples of this class of work are given below. Kuokka and Harada <ref> [10] </ref> present the SHADE and COINS systems for matchmaking. SHADE uses logical rules to support matchmaking the logic used is a subset of KIF and is very expressive.
Reference: [11] <author> J. S. Rosenschein and G. Zlotkin. </author> <title> (1994) Rules of Encounter: Designing Conventions for Automated Negotiation Among Computers, </title> <publisher> MIT Press, </publisher> <address> Boston. </address>
Reference-contexts: In contrast, our framework allows point to point communication between agents without having to go through a mediator. There has also been extensive work on collaborative problem solving and negation in multiagent systems (e.g., <ref> [2, 7, 9, 11, 13] </ref>). As our approach supports point to point inter-agent communication, such negotiations can be built on top of our architecture, and thus this body of work complements 17 ours. 6 Conclusions IMPACT is a platform for the creation and deployment of multiagent applications.
Reference: [12] <author> G. Salton and M. McGill. </author> <title> (1983) Introduction to Modern Information Retrieval, </title> <publisher> McGraw Hill. </publisher>
Reference-contexts: SHADE uses logical rules to support matchmaking the logic used is a subset of KIF and is very expressive. In contrast, COINS assumes that a message is a document (represented by a weighted term vector) and retrieves the "most similar" advertised services using the SMART algorithm of Salton <ref> [12] </ref>. Decker, Sycara, and Williamson [3] present matchmakers that store capability advertisements of different agents. They look for exact matches between requested services and retrieved services, and concentrate their efforts on architectures that support load balancing and protection of privacy of different agents.
Reference: [13] <author> M. Wellman. </author> <title> (1993) A Market-Oriented Programming Environment and its Application to Distributed Multicommodity Flow Problems, </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 1-23. </pages>
Reference-contexts: In contrast, our framework allows point to point communication between agents without having to go through a mediator. There has also been extensive work on collaborative problem solving and negation in multiagent systems (e.g., <ref> [2, 7, 9, 11, 13] </ref>). As our approach supports point to point inter-agent communication, such negotiations can be built on top of our architecture, and thus this body of work complements 17 ours. 6 Conclusions IMPACT is a platform for the creation and deployment of multiagent applications.
Reference: [14] <author> G. Wiederhold. </author> <title> (1993) Intelligent Integration of Information, </title> <booktitle> Proc. 1993 ACM SIGMOD Conf. on Management of Data, </booktitle> <address> pps 434-437. </address> <month> 19 </month>
Reference-contexts: The third approach described in [5] is to completely rewrite the code implementing an agent which is obviously a very expensive alternative. Last but not least, there is the mediation approach proposed by Wiederhold <ref> [14] </ref>, whch assumes that all agents will communicate with a mediator which in turn may send messages to other agents. In contrast, our framework allows point to point communication between agents without having to go through a mediator.
References-found: 14

