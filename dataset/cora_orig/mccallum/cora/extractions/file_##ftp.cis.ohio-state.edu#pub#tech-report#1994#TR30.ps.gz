URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1994/TR30.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: spiro@cis.ohio-state.edu.  
Title: Skeletons and Techniques for the Systematic Development of Constraint Logic Programs  
Author: Spiro Michaylov 
Date: June 30, 1994  
Address: 228 Bolz Hall, 2036 Neil Avenue Mall, Columbus, OH 43210-1277, U.S.A.,  
Affiliation: Department of Computer and Information Science, The Ohio State University,  
Pubnum: Technical Report OSU-CISRC-6/94-TR30  
Abstract: We study the systematic development of Constraint Logic Programs from the viewpoint of Skeletons and Techniques as described by Kirschenbaum and Sterling. We describe a number of fundamental skeleton classes for CLP, and generalize the notion of skeletons to deal with non-structural recursion. Then we describe a range of useful techniques for extending these skeletons. Furthermore, we introduce important classes of techniques that alter the control flow of skeletons in certain well-defined and desirable ways. This work represents a step towards understanding how to develop complex CLP programs easily, and is expected to contribute to the adoption of CLP for applications projects. It may also lead to the development of semi-automated program development tools. Finally, it helps to justify a substantial body of present work on CLP compiler optimizations that depends on the procedure level structure of programs. fl A preliminary version of this paper appears in the Proceedings of the International Conference on Tools with Artificial Intelligence, New Orleans, November, 1994. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Nevin Heintze, Spiro Michaylov, and Peter Stuckey. </author> <title> CLP(R) and some electrical engineering problems. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 9 </volume> <pages> 231-260, </pages> <month> October </month> <year> 1992. </year> <month> 16 </month>
Reference-contexts: Extended discussion of CLP applications can be found in <ref> [1, 5, 8, 9, 18] </ref> and elsewhere. Our objective in this paper is to develop an understanding of how skeletons and techniques can be applied in general to constraint logic programming languages.
Reference: [2] <author> Joxan Jaffar and Jean-Louis Lassez. </author> <title> Constraint logic programming. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Principles of Programming Languages (POPL), </booktitle> <address> Munich, Germany, </address> <pages> pages 111-119. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1987. </year>
Reference-contexts: 1 Introduction The utility of Constraint Logic Programming <ref> [2] </ref> is widely recognized. Many different languages have been defined and implemented, and a wide range of applications have been investigated using those languages.
Reference: [3] <author> Joxan Jaffar, Spiro Michaylov, Peter J. Stuckey, and Roland H. C. Yap. </author> <title> The CLP(R) language and system. </title> <journal> ACM Transactions on Programming Languages and Systems (TOPLAS), </journal> <volume> 14(3) </volume> <pages> 339-395, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Sum is Sum1 + X. It has been clear for some time that Prolog programming methodology is quite applicable in the context of CLP, but it has also been quite clear that CLP offers a wider range of programming techniques, as discussed in <ref> [3] </ref> and elsewhere. Extended discussion of CLP applications can be found in [1, 5, 8, 9, 18] and elsewhere. Our objective in this paper is to develop an understanding of how skeletons and techniques can be applied in general to constraint logic programming languages.
Reference: [4] <author> Niels Jtrgensen, Kim Marriott, and Spiro Michaylov. </author> <title> Some global compile-time optimizations for CLP(R). </title> <editor> In Vijay Saraswat and Kazunori Ueda, editors, </editor> <booktitle> Logic Programming: Proceedings of the 1991 International Symposium, </booktitle> <pages> pages 420-434, </pages> <address> San Diego, CA, October 1991. </address> <publisher> MIT Press. </publisher>
Reference-contexts: In addition to providing a more systematic programming methodology for CLP, and thus contributing to the applicability of the languages, it is hoped that this work can also make a major contribution to the area of global program optimization, by demonstrating that global optimization methods as described in <ref> [4, 11, 10, 12, 13] </ref> correspond to fundamental skeletons and techniques for CLP. The remainder of this paper is organized as follows. In Section 2 we explore the types of skeletons that are useful for CLP programming, including non-structural skeletons.
Reference: [5] <author> Jean Jourdan and Raul E. Valdes Perez. </author> <title> Constraint logic programming applied to hypothetical reasoning in chemistry. </title> <editor> In Saumya Debray and Manuel Hermenegildo, editors, </editor> <booktitle> Logic Programming: Proceedings of the North American Conference, </booktitle> <address> Austin, Texas, </address> <pages> pages 154-172. </pages> <publisher> MIT Press, </publisher> <month> November </month> <year> 1990. </year>
Reference-contexts: Extended discussion of CLP applications can be found in <ref> [1, 5, 8, 9, 18] </ref> and elsewhere. Our objective in this paper is to develop an understanding of how skeletons and techniques can be applied in general to constraint logic programming languages.
Reference: [6] <author> Marc Kirschenbaum, Spiro Michaylov, and Leon Sterling. </author> <title> Skeletons and techniques as a normative approach to program develeopment in logic-based languages. </title> <type> Technical Report OSU-CISRC-5/94-TR25, </type> <institution> Department of Computer and Information Science, The Ohio State University, </institution> <year> 1994. </year>
Reference-contexts: However, for CLP programming they must be thought of from a different viewpoint|as constraints threaded over a skeleton of computation, rather than as a chain of evaluations and assignments. The use of skeletons for CLP was introduced by Kirschenbaum, Michaylov and Sterling <ref> [6] </ref>, with a number of simple examples. That paper explored the common aspects of the use of skeletons and techniques for logic-based languages. In contrast, this paper explores the specific skeletons and techniques needed to make CLP programming accessible to relatively naive programmers. <p> Now, such a circuit is pathological. However, there are numerous examples of CLP programs that fail in such a way for certain inputs that were written precisely to check properties of that input. For example, in <ref> [6] </ref>, a Prolog skeleton for traversing abstract 13 syntax tree representations is extended to produce a type checker. The constraints added by the Combine technique, on variables added by that technique, cause failure when the abstract syntax representation of a program is not well-typed.
Reference: [7] <author> Marc Kirschenbaum, Leon Sterling, and Ashish Jain. </author> <title> Relating logic programs via program maps. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <year> 1993. </year>
Reference-contexts: For example, the list traversal skeleton of Figure 1 can be extended to the programs in Figure 2 for determining the length and element sum of a list, respectively, by the use of the Calculate technique. They develop a catalog of useful skeletons and techniques, and in <ref> [7] </ref>, Kirschenbaum, Sterling and Jain show that the structure of computations is preserved by the application of a class of techniques in an important way. traverse ([]). traverse ([X|Xs]) :- traverse (Xs). length ([], Len) :- sum ([], Sum) :- Len is 0.
Reference: [8] <author> Sivand Lakmazaheri and William J. Rasdorf. </author> <title> Constraint logic programming for the analysis and partial synthesis of truss structures. </title> <booktitle> Artificial Intelligence for Engineering Design, Analysis, and Manufacturing, </booktitle> <volume> 3(3) </volume> <pages> 157-173, </pages> <year> 1989. </year>
Reference-contexts: Extended discussion of CLP applications can be found in <ref> [1, 5, 8, 9, 18] </ref> and elsewhere. Our objective in this paper is to develop an understanding of how skeletons and techniques can be applied in general to constraint logic programming languages.
Reference: [9] <author> Catherine Lassez, Ken McAloon, and Roland Yap. </author> <title> Constraint logic programming and options trading. </title> <journal> IEEE Expert, Special Issue on Financial Software, </journal> <volume> 2(3) </volume> <pages> 42-50, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: Extended discussion of CLP applications can be found in <ref> [1, 5, 8, 9, 18] </ref> and elsewhere. Our objective in this paper is to develop an understanding of how skeletons and techniques can be applied in general to constraint logic programming languages.
Reference: [10] <author> Kimbal G. Marriott and Peter J. Stuckey. </author> <title> The 3 R's of optimizing constraint logic programs: Refinement, removal and reordering. </title> <booktitle> In Proc. ACM SIGPLAN Symposium on Principles of Programming Languages (POPL), </booktitle> <address> Charleston, NC, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: In addition to providing a more systematic programming methodology for CLP, and thus contributing to the applicability of the languages, it is hoped that this work can also make a major contribution to the area of global program optimization, by demonstrating that global optimization methods as described in <ref> [4, 11, 10, 12, 13] </ref> correspond to fundamental skeletons and techniques for CLP. The remainder of this paper is organized as follows. In Section 2 we explore the types of skeletons that are useful for CLP programming, including non-structural skeletons.
Reference: [11] <author> Andrew D. McDonald, Peter J. Stuckey, and Roland H. C. Yap. </author> <title> Redundancy of variables in CLP(R). </title> <booktitle> In Logic Programming: Proceedings of the 1993 International Symposium, </booktitle> <address> Vancouver, October 1993. </address> <publisher> MIT Press. </publisher>
Reference-contexts: In addition to providing a more systematic programming methodology for CLP, and thus contributing to the applicability of the languages, it is hoped that this work can also make a major contribution to the area of global program optimization, by demonstrating that global optimization methods as described in <ref> [4, 11, 10, 12, 13] </ref> correspond to fundamental skeletons and techniques for CLP. The remainder of this paper is organized as follows. In Section 2 we explore the types of skeletons that are useful for CLP programming, including non-structural skeletons.
Reference: [12] <author> Spiro Michaylov. </author> <title> Repeated redundant inequalities in constraint logic programming. </title> <editor> In Jean-Pierre Jouannaud, editor, </editor> <booktitle> Proc. 1st International Conference on Constraints in Computational Logics, </booktitle> <address> Munich, Germany, </address> <month> September </month> <year> 1994. </year> <note> Longer version appears as Technical Report OSU-CISRC-6/94-TR31, </note> <institution> Department of Computer and Information Science, The Ohio State University. </institution> <month> 17 </month>
Reference-contexts: In addition to providing a more systematic programming methodology for CLP, and thus contributing to the applicability of the languages, it is hoped that this work can also make a major contribution to the area of global program optimization, by demonstrating that global optimization methods as described in <ref> [4, 11, 10, 12, 13] </ref> correspond to fundamental skeletons and techniques for CLP. The remainder of this paper is organized as follows. In Section 2 we explore the types of skeletons that are useful for CLP programming, including non-structural skeletons.
Reference: [13] <author> Spiro Michaylov and Bill Pippin. </author> <title> Optimizing compilation of linear constraints in a class of constraint logic programs. </title> <booktitle> In Logic Programming: Proceedings of the 1994 International Symposium, </booktitle> <address> Ithaca, New York, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: In addition to providing a more systematic programming methodology for CLP, and thus contributing to the applicability of the languages, it is hoped that this work can also make a major contribution to the area of global program optimization, by demonstrating that global optimization methods as described in <ref> [4, 11, 10, 12, 13] </ref> correspond to fundamental skeletons and techniques for CLP. The remainder of this paper is organized as follows. In Section 2 we explore the types of skeletons that are useful for CLP programming, including non-structural skeletons.
Reference: [14] <author> R. A. O'Keefe. </author> <title> The Craft of Prolog. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: The issue is a difficult one, as demonstrated by the continued controversy about the construction of imperative programs. Nevertheless, even partial progress can be tremendously useful. For example, the adoption of Prolog has been aided significantly by the availability of the texts by Sterling and Shapiro [16] and O'Keefe <ref> [14] </ref>, and the collection edited by Sterling [15]. In [17], Sterling and Kirschenbaum describe how to develop Prolog programs by first developing simple programs that traverse data structures in a certain way (skeletons), and then extending them to perform useful computation by the use of program transformations (techniques).
Reference: [15] <author> L. Sterling. </author> <title> The Practice of Prolog. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Nevertheless, even partial progress can be tremendously useful. For example, the adoption of Prolog has been aided significantly by the availability of the texts by Sterling and Shapiro [16] and O'Keefe [14], and the collection edited by Sterling <ref> [15] </ref>. In [17], Sterling and Kirschenbaum describe how to develop Prolog programs by first developing simple programs that traverse data structures in a certain way (skeletons), and then extending them to perform useful computation by the use of program transformations (techniques).
Reference: [16] <author> L. Sterling and E. Y. Shapiro. </author> <title> The Art of Prolog. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: The issue is a difficult one, as demonstrated by the continued controversy about the construction of imperative programs. Nevertheless, even partial progress can be tremendously useful. For example, the adoption of Prolog has been aided significantly by the availability of the texts by Sterling and Shapiro <ref> [16] </ref> and O'Keefe [14], and the collection edited by Sterling [15].
Reference: [17] <author> Leon Sterling and Marc Kirschenbaum. </author> <title> Applying techniques to skeletons. </title> <editor> In J.-M. Jacquet, editor, </editor> <booktitle> Constructing Logic Programs, </booktitle> <pages> pages 127-140. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: Nevertheless, even partial progress can be tremendously useful. For example, the adoption of Prolog has been aided significantly by the availability of the texts by Sterling and Shapiro [16] and O'Keefe [14], and the collection edited by Sterling [15]. In <ref> [17] </ref>, Sterling and Kirschenbaum describe how to develop Prolog programs by first developing simple programs that traverse data structures in a certain way (skeletons), and then extending them to perform useful computation by the use of program transformations (techniques).
Reference: [18] <author> Roland Yap Hoc Chuan. </author> <title> Restriction site mapping in CLP(R). </title> <editor> In Koichi Furukawa, editor, </editor> <booktitle> Proceedings of the Eighth International Conference on Logic Programming, </booktitle> <pages> pages 521-534, </pages> <address> Paris, France, June 1991. </address> <publisher> MIT Press. </publisher> <pages> 18 </pages>
Reference-contexts: Extended discussion of CLP applications can be found in <ref> [1, 5, 8, 9, 18] </ref> and elsewhere. Our objective in this paper is to develop an understanding of how skeletons and techniques can be applied in general to constraint logic programming languages.
References-found: 18

