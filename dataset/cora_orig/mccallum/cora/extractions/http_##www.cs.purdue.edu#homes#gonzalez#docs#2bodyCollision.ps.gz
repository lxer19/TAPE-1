URL: http://www.cs.purdue.edu/homes/gonzalez/docs/2bodyCollision.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/gonzalez/publications.html
Root-URL: http://www.cs.purdue.edu
Title: 2-Body Collision Detection using LRB-reps  
Author: Carlos Gonzalez-Ochoa 
Address: West Lafayette, IN 47907-1398  
Affiliation: Department of Computer Science Purdue University  
Abstract-found: 0
Intro-found: 1
Reference: [AP94] <author> P. Astheimer and M. </author> <title> Poche. Level-of-detail generation and its application in virtual reality. </title> <editor> In G. Singh, S. K. Feiner, and D. Thalmann, editors, </editor> <booktitle> Virtual Reality Software & Technology: Proceedings of the VRST '94 Conference, </booktitle> <pages> pages 299-309. </pages> <publisher> World Scientific, </publisher> <year> 1994. </year>
Reference-contexts: For non-convex objects other methods have been suggested to enhance or completely replace the B-rep representation, such as the octree [Sam89b, Sam89a], BSP tree [Nay90], MSP tree [Van91], sphere tree [Hub94], some hierarchical grid structure [FP94], or some hierarchical bounding-volume structure possibly combined with varying levels-of-detail <ref> [AP94] </ref> added to find which entities on the boundary are closest. Each one has advantages and disadvantages which depend on the application and the constraints imposed by it.
Reference: [BNT90] <author> J. Amanatides B. Naylor and W. Thibault. </author> <title> Merging BSP tress yields polyhedral set operations. </title> <journal> ACM Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 115-124, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: Each one has advantages and disadvantages which depend on the application and the constraints imposed by it. For example, the method used by BSP trees to detect collisions is achieved by tree merging, a method with a very low cost <ref> [BNT90] </ref>. Two problems that BSP trees have are, first, fl gonzalez@cs.purdue.edu 1 the set-theoretical intersection can not be computed, as it yields a zero volume region when two bodies are just in contact. And second, the lack of adjacency information in the BSP tree.
Reference: [BV94] <author> W. Bouma and G. Vanecek, Jr. </author> <title> Modeling contacts in a physically based simulation. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 26(6), </volume> <month> June </month> <year> 1994. </year>
Reference-contexts: The test not only should return whether any two or more objects collide but the region where the collision occurred. This information is important to other modules in the simulation, like the one controlling the dynamics <ref> [BV94] </ref>. However, for many applications the mayor bottleneck is computing the region of collision between 2 objects. In this systems, as the complexity of the objects increases the time it takes to the detection algorithm to resolve a collision grows at a much higher ratio.
Reference: [DK83] <author> D. Dobkin and D. Kirkpatrick. </author> <title> Fast detection of polyhedral intersection. </title> <journal> Theoretical Computer Science, </journal> <volume> 27 </volume> <pages> 241-253, </pages> <year> 1983. </year>
Reference-contexts: This solution is obviously unacceptable for objects with a large number of faces. A solution for convex objects described in <ref> [DK83] </ref>, reduced the quadratic complexity to sub-linear time. The solution to the similar problem, given by Lin and Canny's [LC91], to track the minimal distance between pairs of objects provides on the average a near constant-time incremental algorithm.
Reference: [FP94] <author> K. M. Fairchild and T. Poston. </author> <title> Efficient virtual collision detection for multiple users in large virtual spaces. </title> <editor> In G. Singh, S. K. Feiner, and D. Thalmann, editors, </editor> <booktitle> Virtual Reality Software & Technology: Proceedings of the VRST '94 Conference, </booktitle> <pages> pages 271-285. </pages> <publisher> World Scientific, </publisher> <year> 1994. </year>
Reference-contexts: For complex objects, n can be prohibitively large. For non-convex objects other methods have been suggested to enhance or completely replace the B-rep representation, such as the octree [Sam89b, Sam89a], BSP tree [Nay90], MSP tree [Van91], sphere tree [Hub94], some hierarchical grid structure <ref> [FP94] </ref>, or some hierarchical bounding-volume structure possibly combined with varying levels-of-detail [AP94] added to find which entities on the boundary are closest. Each one has advantages and disadvantages which depend on the application and the constraints imposed by it.
Reference: [GV94] <author> C. Gonzalez-Ochoa and G. Vanecek. </author> <title> Locally Resolvable B-rep. </title> <type> Technical report, </type> <institution> Purdue University, </institution> <month> September </month> <year> 1994. </year>
Reference-contexts: Although this method works for arbitrarily shaped objects, it is computational expensive when both objects are large and complex. Our algorithm exploits the properties of the LRB-rep structure <ref> [GV94] </ref>, which is based on ideas of cellular decomposition, multiresolution and hypergraph structures. This structure tries to solve the associated problems of fragmentation induced by adding local details producing changes globally. The LRB-rep abstracts an object into a simpler shape. <p> The termination is guaranteed by successive refinements, that starting at the lowest detail level, refined faces are substituted by regions closer to the object, thus separating intersecting regions of the objects <ref> [GV94] </ref>. It ends when the wrappers are completely separated and no pending testing is needed, or when a collision can be declared between real faces.
Reference: [Hub94] <author> Philip M. Hubbard. </author> <title> Collision Detection for Interative Graphics Applications. </title> <type> PhD thesis, </type> <institution> Department of Computer Science Box 1910, Brown University, </institution> <address> Providence, RI 02912, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: For complex objects, n can be prohibitively large. For non-convex objects other methods have been suggested to enhance or completely replace the B-rep representation, such as the octree [Sam89b, Sam89a], BSP tree [Nay90], MSP tree [Van91], sphere tree <ref> [Hub94] </ref>, some hierarchical grid structure [FP94], or some hierarchical bounding-volume structure possibly combined with varying levels-of-detail [AP94] added to find which entities on the boundary are closest. Each one has advantages and disadvantages which depend on the application and the constraints imposed by it.
Reference: [LC91] <author> M. C. Lin and J. F. Canny. </author> <title> A fast algorithm for incremental distance calculation. </title> <booktitle> In IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 1008-1014, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: This solution is obviously unacceptable for objects with a large number of faces. A solution for convex objects described in [DK83], reduced the quadratic complexity to sub-linear time. The solution to the similar problem, given by Lin and Canny's <ref> [LC91] </ref>, to track the minimal distance between pairs of objects provides on the average a near constant-time incremental algorithm. This algorithm, however, does not generalize well to non-convex and complex objects undergoing contact analysis.
Reference: [Nay90] <author> B. Naylor. </author> <title> Binary space partitioning trees as an alternative polytopes. </title> <booktitle> Computer-Aided Design, </booktitle> <pages> pages 250-252, </pages> <year> 1990. </year>
Reference-contexts: This convexification results in an O (n 2 ) complexity when n convex pieces result. For complex objects, n can be prohibitively large. For non-convex objects other methods have been suggested to enhance or completely replace the B-rep representation, such as the octree [Sam89b, Sam89a], BSP tree <ref> [Nay90] </ref>, MSP tree [Van91], sphere tree [Hub94], some hierarchical grid structure [FP94], or some hierarchical bounding-volume structure possibly combined with varying levels-of-detail [AP94] added to find which entities on the boundary are closest. Each one has advantages and disadvantages which depend on the application and the constraints imposed by it.
Reference: [Sam89a] <author> H. J. Samet. </author> <title> Applications of Spatial Data structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addison-Wesley, </publisher> <address> Redding, MA, </address> <year> 1989. </year>
Reference-contexts: This convexification results in an O (n 2 ) complexity when n convex pieces result. For complex objects, n can be prohibitively large. For non-convex objects other methods have been suggested to enhance or completely replace the B-rep representation, such as the octree <ref> [Sam89b, Sam89a] </ref>, BSP tree [Nay90], MSP tree [Van91], sphere tree [Hub94], some hierarchical grid structure [FP94], or some hierarchical bounding-volume structure possibly combined with varying levels-of-detail [AP94] added to find which entities on the boundary are closest.
Reference: [Sam89b] <author> H. J. Samet. </author> <title> Design and analysis of Spatial Data Structures: Quadtrees, Octrees, and other Hierarchical Methods. </title> <publisher> Addison-Wesley, </publisher> <address> Redding, MA, </address> <year> 1989. </year>
Reference-contexts: This convexification results in an O (n 2 ) complexity when n convex pieces result. For complex objects, n can be prohibitively large. For non-convex objects other methods have been suggested to enhance or completely replace the B-rep representation, such as the octree <ref> [Sam89b, Sam89a] </ref>, BSP tree [Nay90], MSP tree [Van91], sphere tree [Hub94], some hierarchical grid structure [FP94], or some hierarchical bounding-volume structure possibly combined with varying levels-of-detail [AP94] added to find which entities on the boundary are closest.
Reference: [Van91] <author> G. Vanecek, Jr. Brep-index: </author> <title> A multidimensional space partitioning tree (revised). </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(3) </volume> <pages> 243-262, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: For complex objects, n can be prohibitively large. For non-convex objects other methods have been suggested to enhance or completely replace the B-rep representation, such as the octree [Sam89b, Sam89a], BSP tree [Nay90], MSP tree <ref> [Van91] </ref>, sphere tree [Hub94], some hierarchical grid structure [FP94], or some hierarchical bounding-volume structure possibly combined with varying levels-of-detail [AP94] added to find which entities on the boundary are closest. Each one has advantages and disadvantages which depend on the application and the constraints imposed by it.
References-found: 12

