URL: http://www.cis.ohio-state.edu/~hartman/PUBLIC/papers/fr-rapide-tr-compressed.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~hartman/publications.html
Root-URL: 
Email: chandra@cis.ohio-state.edu  
Title: Functional Representation of Executable Software Architectures 1  
Author: John Hartman B. Chandrasekaran 
Note: 1 This work was supported by ARPA, Order No. A714, monitored by USAF Materiel Command Rome Laboratories, Contract F30602-93-C-0243.  
Date: December 1, 1995  
Address: hartman or  
Affiliation: Laboratory for Artificial Intelligence Research Dept. of Computer and Information Science The Ohio State University  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Dean Allemang and B. Chandrasekaran. </author> <title> Functional representation and program debugging. </title> <booktitle> In PROCEEDINGS of the 6TH ANNUAL KNOWLEDGE-BASED SOFTWARE ENGINEERING CONFERENCE. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference: [2] <author> B. Chandrasekaran. </author> <title> Functional representation and causal processes. </title> <editor> In Marshall Yovits, editor, </editor> <booktitle> ADVANCES in COMPUTERS. </booktitle> <publisher> Academic Press, </publisher> <year> 1994. </year>
Reference-contexts: More complex questions may cause larger explanations to be constructed and delivered by combining primitive answers. In this chapter we will mostly describe the primitive relationships of FR and the questions they answer. 4.2 FR Entities and Relationships The FR language is described in <ref> [2] </ref>, [7] and elsewhere. We will give a simplified FR-Rapide description based on [7] and FR-Rapide extensions. To illustrate this description, we will use the generalized example functional representation in Figure 4.2. The figure includes the elements of the X/Open FR in the preceding chapter.
Reference: [3] <author> David Garlan and Dewayne E. Perry. </author> <title> Introduction to the special issue on software architecture. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4), </volume> <month> April </month> <year> 1995. </year>
Reference: [4] <author> John Hartman and B. Chandrasekaran. </author> <title> Functional representation and understanding of software: Technology and application. </title> <booktitle> In 5TH ANNUAL DUAL-USE TECHNOLOGIES and APPLICATIONS CONFERENCE. </booktitle> <institution> Mohawk IEEE and Rome Lab, </institution> <month> May </month> <year> 1995. </year> <pages> Utica, </pages> <address> New York. </address>
Reference-contexts: The point is, there is no clear division between work in program understanding and work in architecture understanding. We are exploring the use of FR to capture and exploit understanding in both program understanding and architecture understanding. The use of FR in program understanding is described in <ref> [4] </ref> and elsewhere. Insights from FR-Rapide architecture understanding have helped program understanding work, and vice versa. 5.5 Contributions and Future Work The contributions of this work include: 1. A framework for discussing architecture understanding, its representation, and its applications. 2.
Reference: [5] <author> Y. Iwasaki and B. Chandrasekaran. </author> <title> Design verification through function-and behavior-oriented representations. </title> <booktitle> In Proceedings of the Conference on Artificial Intelligence and Design, </booktitle> <year> 1992. </year>
Reference-contexts: Tasks like architecture debugging, reverse engineering, analysis, and design verification can benefit from captured understanding that relates behavior to intentions. This is analogous to uses of FR with simulated behavior in physical devices, e.g. as described for simulation and design verification in [10] and <ref> [5] </ref>. 4.4 FR-Rapide-Explain Tool Design We now consider the design of a practical tool for delivering explanations. Recall that we are emphasizing explanation primitives, as shown by the question types above. Larger explanations can be constructed from these primitives. We suggest a tool design that combines two interface paradigms: 1.
Reference: [6] <author> W. Lewis Johnson and Ali Erdem. </author> <title> Interactive explanation of software systems. </title> <booktitle> In Proceedings KBSE'95 The Tenth Knowledge-Based Software Engineering Conference. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> November 12-15 1995. Boston, Mass. </address>
Reference: [7] <author> John R. Josephson. </author> <title> Technical note on formalizing functional representation. </title> <editor> In J. Hodges, editor, </editor> <title> AAAI-94 WORKSHOP on REPRESENTING and REASONING ABOUT DEVICE FUNCTION. </title> <publisher> AAAI, </publisher> <address> 1994. Seattle, Washington. </address>
Reference-contexts: More complex questions may cause larger explanations to be constructed and delivered by combining primitive answers. In this chapter we will mostly describe the primitive relationships of FR and the questions they answer. 4.2 FR Entities and Relationships The FR language is described in [2], <ref> [7] </ref> and elsewhere. We will give a simplified FR-Rapide description based on [7] and FR-Rapide extensions. To illustrate this description, we will use the generalized example functional representation in Figure 4.2. The figure includes the elements of the X/Open FR in the preceding chapter. <p> In this chapter we will mostly describe the primitive relationships of FR and the questions they answer. 4.2 FR Entities and Relationships The FR language is described in [2], <ref> [7] </ref> and elsewhere. We will give a simplified FR-Rapide description based on [7] and FR-Rapide extensions. To illustrate this description, we will use the generalized example functional representation in Figure 4.2. The figure includes the elements of the X/Open FR in the preceding chapter. The primitive boxes are states, with state names or predicates like "state2-1".
Reference: [8] <author> John J. Kenney. </author> <title> EXECUTABLE FORMAL MODELS of DISTRIBUTED TRANSACTION SYSTEMS BASED ON EVENT PROCESSING. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: The interface's abstract behavior then becomes a constraint. Module generated behavior is checked against this constraint. 2.3 X/Open Architecture We investigated FR-Rapide using the X/Open Reference Architecture. Kenney developed a Rapide prototype for this architecture <ref> [8] </ref>, and it is the main example in [11]. X/Open is a standard for distributed transaction processing (DTP). The standard defines system component interfaces and sequences of interactions between system components. <p> We will further narrow our focus to the connections and abstract behaviors involved in Poll-Decide. See [11] and <ref> [8] </ref> for more discussion of the interface definitions, services, constraints, and posets. 2.4 Poll-Decide Definition and Behavior Recall Kenney created an architecture for a version of the X/Open Reference architecture, just as every Rapide author describes an architecture in the Rapide language.
Reference: [9] <author> Paul Kogut and Paul Clements. </author> <title> The software architecture renaissance. </title> <journal> CrossTalk, </journal> <volume> 7(11) </volume> <pages> 20-23, </pages> <month> November </month> <year> 1994. </year> <month> 72 </month>
Reference: [10] <author> Susan T. Korda. </author> <title> USING FUNCTIONAL REPRESENTATION FOR SMART SIMULATION OF DEVICES. </title> <type> PhD thesis, </type> <institution> The Ohio State University, Dept. of Computer and Information Science, </institution> <year> 1993. </year>
Reference-contexts: Tasks like architecture debugging, reverse engineering, analysis, and design verification can benefit from captured understanding that relates behavior to intentions. This is analogous to uses of FR with simulated behavior in physical devices, e.g. as described for simulation and design verification in <ref> [10] </ref> and [5]. 4.4 FR-Rapide-Explain Tool Design We now consider the design of a practical tool for delivering explanations. Recall that we are emphasizing explanation primitives, as shown by the question types above. Larger explanations can be constructed from these primitives.
Reference: [11] <author> David C. Luckham, John J. Kenney, Larry M. Augustin, James Vera, Doug Bryan, and Walter Mann. </author> <title> Specification and analysis of system architecture using Rapide. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4) </volume> <pages> 336-355, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: The interface's abstract behavior then becomes a constraint. Module generated behavior is checked against this constraint. 2.3 X/Open Architecture We investigated FR-Rapide using the X/Open Reference Architecture. Kenney developed a Rapide prototype for this architecture [8], and it is the main example in <ref> [11] </ref>. X/Open is a standard for distributed transaction processing (DTP). The standard defines system component interfaces and sequences of interactions between system components. System components may be applications programs, e.g. a billing system; resource managers for resources, e.g. databases; and transaction managers, which mediate between applications programs and resource managers. <p> We will further narrow our focus to the connections and abstract behaviors involved in Poll-Decide. See <ref> [11] </ref> and [8] for more discussion of the interface definitions, services, constraints, and posets. 2.4 Poll-Decide Definition and Behavior Recall Kenney created an architecture for a version of the X/Open Reference architecture, just as every Rapide author describes an architecture in the Rapide language. <p> This experiment explored some of the intentions and issues discussed in Section 2.5. The functional description was constructed using the activities in Table 1.1. Here is a brief account of the process and some authoring decisions: Understanding the Architecture The architecture was understood from the descriptions in <ref> [11] </ref>, reasonable inference, and background reading about distributed transaction processing protocols. This is the understanding presented in Section 2.4. Intentions Example intentions were given in Table 2.1. <p> For algorithmic understanding, DTP systems and protocols are typically discussed 39 with respect to single transactions. This is the case in the X/Open and Rapide literature, much of the DTP literature, and in our descriptions of natural understanding of X/Open earlier in this report. Furthermore, the simulation example in <ref> [11] </ref>, given in Section 2.4, uses a single transaction for analysis. Rapide X/Open architecture. PD0 is a state transition diagram for a finite state machine showing all possible executions and internal states involving a given transaction. <p> Such correspondences could be permanently build into an FR, for one or more simulated executions. The correspondences could be given by a new annotation type or by functions with justifications specific for each execution. 4. X/Open Patient Billing System In <ref> [11] </ref> Luckham and Kenney give another Rapide architecture, Patient Billing System, which incorporates the X/Open architecture. FR's can be constructed for this combined architecture, and other architectures embedding X/Open. They show the interface and functionality of X/Open in the larger architectures.
Reference: [12] <author> David C. Luckham and James Vera. </author> <title> An event-based architecture definition language. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(9) </volume> <pages> 717-734, </pages> <month> September </month> <year> 1995. </year> <month> 73 </month>
References-found: 12

