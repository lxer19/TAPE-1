URL: http://theory.lcs.mit.edu/tds/papers/Lynch/TM-486.ps
Refering-URL: http://theory.lcs.mit.edu/tds/papers/Lynch/TM-486.html
Root-URL: 
Email: lynch@theory.lcs.mit.edu  fritsv@cwi.nl  
Title: Forward and Backward Simulations Part I: Untimed Systems  
Author: Nancy Lynch Frits Vaandrager 
Date: August 19, 1994  
Address: Cambridge, MA 02139, USA  P.O. Box 4079, 1009 AB Amsterdam, The Netherlands  Kruislaan 403, 1098 SJ Amsterdam, The Netherlands  
Affiliation: MIT Laboratory for Computer Science  CWI  University of Amsterdam, Programming Research Group  
Abstract: A comprehensive presentation of simulation techniques is given in terms of a simple (untimed) automaton model. In particular, we discuss (1) refinements, (2) forward and backward simulations, (3) forward-backward and backward-forward simulations, and (4) history and prophecy relations. History and prophecy relations are new and are abstractions of the history and prophecy variables of Abadi and Lamport, as well as the auxiliary variables of Owicki and Gries. We give elegant and short proofs of soundness and completeness results for complicated simulations in terms of soundness and (partial) completeness results for simple simulations. In Part II of this paper, it is shown how most of the results for untimed automata can be carried over smoothly to the setting of timed automata. 1991 Mathematics Subject Classification: 68Q60, 68Q68. 1991 CR Categories: F.1.1, F.3.1. Keywords and Phrases: Simulations, automata, refinement mappings, forward simulations, backward simulations, forward-backward simulations, backward-forward simulations, history variables, prophecy variables, history relations, prophecy relations. Notes: This work was supported by ONR contracts N00014-85-K-0168 and N00014-91-J-1988, by NSF grant CCR-8915206, and by DARPA contracts N00014-89-J-1988 and N00014-92-J-4033. Part of this work took place while the second author was employed by the Ecole des Mines, CMA, Sophia Antipolis, France. The second author also received partial support from the ESPRIT Basic Research Action 7166, CONCUR2. An earlier verion of this paper (Part I+II) appeared as [22]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abadi and L. Lamport. </author> <title> The existence of refinement mappings. </title> <journal> Theoretical Computer Science, </journal> <volume> 2(82) </volume> <pages> 253-284, </pages> <year> 1991. </year>
Reference-contexts: We prove basic results for these kinds of simulations, in particular, soundness and completeness theorems. We also define history relations and prophecy relations, which are abstract versions of the history and prophecy variables, respectively, of Abadi and Lamport <ref> [1] </ref>; history relations are also abstract versions of the auxiliary variables of Owicki and Gries [26]. We prove theorems describing the properties of these various kinds of simulations and relating the different kinds of simulations to each other. <p> In [24] and [10], where they are called prophecy mappings and backwards simulations, respectively, it is observed that they are closely related to the prophecy variables first defined in <ref> [1] </ref>. <p> The notion of a backward-forward simulation is suggested by symmetry with forward-backward simulations. While some of the results for this case are symmetric with the forward-backward case, others (notably, certain completeness results) do not hold. We also provide redefinitions of the history variable and prophecy variable notions of <ref> [1] </ref>, and generalize these to new notions of history relation and prophecy relation. We prove equivalence between these definitions and our notions of forward and backward simulations. Finally, we show how reachability can be integrated into the various simulation proof methods. <p> Abstraction mappings, which are essentially refinement mappings, comprise a basic proof method for implementations of abstract data types [6, 18]. Typical examples of forward simulation proofs appear in [20]. Backward simulations have been much less widely used. Abadi and Lamport <ref> [1] </ref> demonstrate the usefulness of prophecy variables (and hence backward simulations), with some simple examples, while [17] contains a more interesting example. There has not been much work on applying the hybrid forward and backward methods. <p> a second case saying that if B has fin and A flT B, then A iBF B. 6 Auxiliary Variable Constructions In this section, we present two new types of relations, history relations and prophecy relations, which correspond to the notions of history and prophecy variable of Abadi and Lamport <ref> [1] </ref>. We show that there is a close connection between history relations and forward simulations, and also between prophecy relations and backward simulations. <p> Using these connections together with the earlier results of this section, we can easily derive a completeness theorem for refinements similar to the one of Abadi and Lamport <ref> [1] </ref>. <p> It now follows that h 0 ffi h is a history relation from A to C. The notion of a history relation is a new contribution of this paper. It provides a simple and abstract view of the history variables of Abadi and Lamport <ref> [1] </ref> (which in turn are abstractions of the auxiliary variables of Owicki and Gries [26]). Translated into the setting of this paper, history variables can be simply defined in terms of history relations, as follows. <p> F B ) (By Theorem 6.16) 9E; C : A P C R E F B ) (By Propositions 4.7 and 4.9) 9C : A P C F B: 6.3 Completeness of History and Prophecy Relations We finish this section with versions of the completeness results of Abadi and Lamport <ref> [1] </ref>. Theorem 6.18 (Completeness of history relations, prophecy relations and refinements, [1]) Suppose A flT B. Then 1. 9C; D : A H C P D R B, and 2. if B has fin then 9C; D : A H C iP D R B. <p> C R E F B ) (By Propositions 4.7 and 4.9) 9C : A P C F B: 6.3 Completeness of History and Prophecy Relations We finish this section with versions of the completeness results of Abadi and Lamport <ref> [1] </ref>. Theorem 6.18 (Completeness of history relations, prophecy relations and refinements, [1]) Suppose A flT B. Then 1. 9C; D : A H C P D R B, and 2. if B has fin then 9C; D : A H C iP D R B.
Reference: [2] <editor> J.W. de Bakker, W.P. de Roever, and G. Rozenberg, editors. </editor> <title> REX Workshop on Stepwise Refinement of Distributed Systems: Models, Formalism, Correctness, Mook, </title> <booktitle> The Netherlands 1989, volume 430 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [3] <author> R. Gerth. </author> <title> Foundations of compositional program refinement (first version). </title> <editor> In de Bakker et al. </editor> <volume> [2], </volume> <pages> pages 777-808. </pages>
Reference-contexts: They also occur in the work of Jonsson [11] under the name subset simulations, and are related to the failure simulations of Gerth <ref> [3] </ref>. Forward-backward simulations combine in a single relation both a forward and a backward simulation. Below we present simple proofs of their soundness and completeness by making this connection explicit.
Reference: [4] <author> A. Ginzburg. </author> <title> Algebraic Theory of Automata. </title> <publisher> Academic Press, </publisher> <address> New York - London, </address> <year> 1968. </year>
Reference-contexts: The simplest kind of simulation we consider is a refinement, which is a functional simulation similar to those studied in [16] and very similar to a homomorphism between automata in the sense of classical automata theory <ref> [4] </ref>. <p> If s 0 a ! A s then r (s 0 ) ^a =) B r (s). We write A R B if there exists a refinement from A to B. This notion is similar to that of a homomorphism in classical automata theory; see for instance Ginzberg <ref> [4] </ref>. Besides our additional treatment of internal actions, a difference between the two notions is that the classical notion involves a mapping between the action sets of the automata, whereas our refinements do not.
Reference: [5] <author> J. </author> <title> He. Process simulation and refinement. </title> <journal> Journal of Formal Aspects of Computing Science, </journal> <volume> 1 </volume> <pages> 229-241, </pages> <year> 1989. </year>
Reference-contexts: Forward simulations are similar to the the simulations of [27, 8], the possibilities mappings of [19, 21], the downward simulations of <ref> [7, 12, 5] </ref>, the forward simulations of [11], and the history measures of [14]. <p> Again, we give soundness and partial completeness results. Backward simulations occurred first in [7] under the name of upward simulations and were used later in the setting of CSP in <ref> [12, 5] </ref>. In [24] and [10], where they are called prophecy mappings and backwards simulations, respectively, it is observed that they are closely related to the prophecy variables first defined in [1]. <p> Now 3 and 4 follow by combination of 2 and Lemma 3.4. Lemma 3.9 1. can (beh (A)) is a deterministic forest. 1 This terminology is due to He Jifeng <ref> [5] </ref>. 8 2. can (beh (A)) flT A. 4. If A has fin then can (beh (A)) T A. <p> a backward simulation from G to H, but even though H is deterministic there is no image-finite backward simulation. ? q q * fi ? G 6 iB 4.4 Combined Forward and Backward Simulations Several authors have observed that forward and backward simulations together give a complete proof method (see <ref> [7, 5, 12, 10, 11, 14] </ref>): if A flT B then there exists an intermediate automaton C with a forward simulation from A to C and a backward simulation from C to B.
Reference: [6] <author> C.A.R. Hoare. </author> <title> Proof of correctness of data representations. </title> <journal> Acta Informatica, </journal> <volume> 1 </volume> <pages> 271-281, </pages> <year> 1972. </year>
Reference-contexts: Finally, we show how reachability can be integrated into the various simulation proof methods. The usefulness of refinement mappings and forward simulations in proving correctness has been well demonstrated. Abstraction mappings, which are essentially refinement mappings, comprise a basic proof method for implementations of abstract data types <ref> [6, 18] </ref>. Typical examples of forward simulation proofs appear in [20]. Backward simulations have been much less widely used. Abadi and Lamport [1] demonstrate the usefulness of prophecy variables (and hence backward simulations), with some simple examples, while [17] contains a more interesting example.
Reference: [7] <author> C.A.R. Hoare, J. He, and J.W. Sanders. </author> <title> Prespecification in data refinement. </title> <journal> Information Processing Letters, </journal> <volume> 25 </volume> <pages> 71-76, </pages> <year> 1987. </year>
Reference-contexts: Forward simulations are similar to the the simulations of [27, 8], the possibilities mappings of [19, 21], the downward simulations of <ref> [7, 12, 5] </ref>, the forward simulations of [11], and the history measures of [14]. <p> Again, we give soundness and partial completeness results. Backward simulations occurred first in <ref> [7] </ref> under the name of upward simulations and were used later in the setting of CSP in [12, 5]. In [24] and [10], where they are called prophecy mappings and backwards simulations, respectively, it is observed that they are closely related to the prophecy variables first defined in [1]. <p> a backward simulation from G to H, but even though H is deterministic there is no image-finite backward simulation. ? q q * fi ? G 6 iB 4.4 Combined Forward and Backward Simulations Several authors have observed that forward and backward simulations together give a complete proof method (see <ref> [7, 5, 12, 10, 11, 14] </ref>): if A flT B then there exists an intermediate automaton C with a forward simulation from A to C and a backward simulation from C to B.
Reference: [8] <author> B. Jonsson. </author> <title> Compositional Verification of Distributed Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Systems, Uppsala University, </institution> <year> 1987. </year> <note> DoCS 87/09. </note>
Reference-contexts: We give soundness and partial completeness results. We then consider forward simulations and backward simulations, which are generalizations of refinements that allow a set of states of B to correspond to a single state of A. Forward simulations are similar to the the simulations of <ref> [27, 8] </ref>, the possibilities mappings of [19, 21], the downward simulations of [7, 12, 5], the forward simulations of [11], and the history measures of [14].
Reference: [9] <author> B. Jonsson. </author> <title> Modular verification of asynchronous networks. </title> <booktitle> In PODC 87 [28], </booktitle> <pages> pages 152-166. </pages>
Reference-contexts: For transitivity, use Lemma 4.8 to show that if f and f 0 are forward simulations from A to B and from B to C, respectively, f 0 ffi f is a forward simulation from A to C. Theorem 4.10 (Soundness of forward simulations, <ref> [21, 9, 30] </ref>) A F B ) A T B. Proof: Versions of this proof appears in the cited papers. The proof is similar to that of Theorem 4.4. Theorem 4.11 (Partial completeness of forward simulations) Suppose B is deterministic and A flT B. Then A F B.
Reference: [10] <author> B. Jonsson. </author> <title> On decomposing and refining specifications of distributed systems. </title> <editor> In de Bakker et al. </editor> <volume> [2], </volume> <pages> pages 361-387. </pages>
Reference-contexts: Again, we give soundness and partial completeness results. Backward simulations occurred first in [7] under the name of upward simulations and were used later in the setting of CSP in [12, 5]. In [24] and <ref> [10] </ref>, where they are called prophecy mappings and backwards simulations, respectively, it is observed that they are closely related to the prophecy variables first defined in [1]. <p> We do not explore this extension in this paper, primarily because it lacks a key feature of simulation techniques. Namely, it fails to reduce global reasoning about infinite behaviors to local reasoning about states and actions. The following partial completeness result slightly generalizes a similar result of Jonsson <ref> [10] </ref> in that it also allows for t -steps in the B automaton. Theorem 4.18 (Partial completeness of backward simulations) Suppose A is a forest and A flT B. Then 1. A B B, and 2. if B has fin then A iB B. <p> a backward simulation from G to H, but even though H is deterministic there is no image-finite backward simulation. ? q q * fi ? G 6 iB 4.4 Combined Forward and Backward Simulations Several authors have observed that forward and backward simulations together give a complete proof method (see <ref> [7, 5, 12, 10, 11, 14] </ref>): if A flT B then there exists an intermediate automaton C with a forward simulation from A to C and a backward simulation from C to B.
Reference: [11] <author> B. Jonsson. </author> <title> Simulations between specifications of distributed systems. </title> <editor> In J.C.M. Baeten and J.F. Groote, editors, </editor> <booktitle> Proceedings CONCUR 91, Amsterdam, volume 527 of Lecture Notes in Computer Science, </booktitle> <pages> pages 346-360. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Forward simulations are similar to the the simulations of [27, 8], the possibilities mappings of [19, 21], the downward simulations of [7, 12, 5], the forward simulations of <ref> [11] </ref>, and the history measures of [14]. <p> There has not been much work on applying the hybrid forward and backward methods. As far as the classification of simulations is concerned, our work is closely related to and extends that of Jonsson <ref> [11] </ref>. Jonsson, however, addresses liveness issues, which we do not do. Also, Jonsson has more powerful notion of backward simulation, which we prefer not to use since it fails to reduce global reasoning about infinite behaviors to local reasoning about states and actions. <p> This corresponds directly to an execution ff 0 of B having trace (ff 0 ) = trace (ff) = fi. Hence, fi 2 traces (B). In a recent paper, Jonsson <ref> [11] </ref> considers a weaker image-finiteness condition for backward simulations. <p> a backward simulation from G to H, but even though H is deterministic there is no image-finite backward simulation. ? q q * fi ? G 6 iB 4.4 Combined Forward and Backward Simulations Several authors have observed that forward and backward simulations together give a complete proof method (see <ref> [7, 5, 12, 10, 11, 14] </ref>): if A flT B then there exists an intermediate automaton C with a forward simulation from A to C and a backward simulation from C to B. <p> We prove this below by taking C to be the canonical automaton of A, as defined in Section 3. Alternative proofs can be given using different intermediate automata, for example the automaton obtained by applying the classical subset construction on B (see <ref> [11, 14] </ref>). Theorem 4.22 (Completeness of forward and backward simulations) If A flT B then the following are true. 1. 9C : A F C B B. 2. If B has fin then 9C : A F C iB B. Proof: Let C = can (beh (A)). <p> If B has fin then C iB B follows by Theorem 4.18 (2). 14 5 Hybrid Simulations 5.1 Forward-Backward Simulations Forward-backward simulations were introduced by Klarlund and Schneider who call them invariants in [13] and ND measures in [14]. They also occur in the work of Jonsson <ref> [11] </ref> under the name subset simulations, and are related to the failure simulations of Gerth [3]. Forward-backward simulations combine in a single relation both a forward and a backward simulation. Below we present simple proofs of their soundness and completeness by making this connection explicit.
Reference: [12] <author> M.B. Josephs. </author> <title> A state-based approach to communicating processes. </title> <journal> Distributed Computing, </journal> <volume> 3 </volume> <pages> 9-18, </pages> <year> 1988. </year>
Reference-contexts: Forward simulations are similar to the the simulations of [27, 8], the possibilities mappings of [19, 21], the downward simulations of <ref> [7, 12, 5] </ref>, the forward simulations of [11], and the history measures of [14]. <p> Again, we give soundness and partial completeness results. Backward simulations occurred first in [7] under the name of upward simulations and were used later in the setting of CSP in <ref> [12, 5] </ref>. In [24] and [10], where they are called prophecy mappings and backwards simulations, respectively, it is observed that they are closely related to the prophecy variables first defined in [1]. <p> a backward simulation from G to H, but even though H is deterministic there is no image-finite backward simulation. ? q q * fi ? G 6 iB 4.4 Combined Forward and Backward Simulations Several authors have observed that forward and backward simulations together give a complete proof method (see <ref> [7, 5, 12, 10, 11, 14] </ref>): if A flT B then there exists an intermediate automaton C with a forward simulation from A to C and a backward simulation from C to B.
Reference: [13] <author> N. Klarlund and F.B. Schneider. </author> <title> Verifying safety properties using infinite-state automata. </title> <type> Technical Report 89-1039, </type> <institution> Department of Computer Science, Cornell University, </institution> <address> Ithaca, New York, </address> <year> 1989. </year> <month> 35 </month>
Reference-contexts: Again, we give soundness and partial completeness results. We also consider forward-backward and backward-forward simulations, which are essen 2 tially compositions of one forward and one backward simulation, in the two possible orders. The definition of a forward-backward simulation has been inspired by the work of Klarlund and Schneider <ref> [13, 14] </ref>, for the case without internal actions. The notion of a backward-forward simulation is suggested by symmetry with forward-backward simulations. While some of the results for this case are symmetric with the forward-backward case, others (notably, certain completeness results) do not hold. <p> If B has fin then C iB B follows by Theorem 4.18 (2). 14 5 Hybrid Simulations 5.1 Forward-Backward Simulations Forward-backward simulations were introduced by Klarlund and Schneider who call them invariants in <ref> [13] </ref> and ND measures in [14]. They also occur in the work of Jonsson [11] under the name subset simulations, and are related to the failure simulations of Gerth [3]. Forward-backward simulations combine in a single relation both a forward and a backward simulation. <p> Finally, it is immediate from the definitions that, if g and g 0 are image-set-finite, g 0 * g is also image-set-finite. Proposition 5.4 FB and iFB are preorders. Proof: By Lemma 5.3. 16 Theorem 5.5 (Soundness of forward-backward simulations, <ref> [13] </ref>) 1. A FB B ) A flT B. Proof: For part 1, suppose A FB B. By Theorem 5.1, there exists an automaton C with A F C B B. <p> By soundness of forward simulations, Theorem 4.10, A T C, and by soundness of backward simulations, Theorem 4.17, C flT B. This implies A flT B. Part 2 is similar. Theorem 5.6 (Completeness of forward-backward simulations, <ref> [13] </ref>) Suppose A flT B. Then 1. A FB B, and 2. if B has fin then A iFB B. Proof: By Theorem 4.22, there exists an automaton C with A F C B B. Moreover, if B has fin then A F C iB B.
Reference: [14] <author> N. Klarlund and F.B. Schneider. </author> <title> Proving nondeterministically specified safety properties using progress measures, </title> <month> August </month> <year> 1991. </year> <note> To appear in Information and Computation. </note>
Reference-contexts: Forward simulations are similar to the the simulations of [27, 8], the possibilities mappings of [19, 21], the downward simulations of [7, 12, 5], the forward simulations of [11], and the history measures of <ref> [14] </ref>. <p> Again, we give soundness and partial completeness results. We also consider forward-backward and backward-forward simulations, which are essen 2 tially compositions of one forward and one backward simulation, in the two possible orders. The definition of a forward-backward simulation has been inspired by the work of Klarlund and Schneider <ref> [13, 14] </ref>, for the case without internal actions. The notion of a backward-forward simulation is suggested by symmetry with forward-backward simulations. While some of the results for this case are symmetric with the forward-backward case, others (notably, certain completeness results) do not hold. <p> a backward simulation from G to H, but even though H is deterministic there is no image-finite backward simulation. ? q q * fi ? G 6 iB 4.4 Combined Forward and Backward Simulations Several authors have observed that forward and backward simulations together give a complete proof method (see <ref> [7, 5, 12, 10, 11, 14] </ref>): if A flT B then there exists an intermediate automaton C with a forward simulation from A to C and a backward simulation from C to B. <p> We prove this below by taking C to be the canonical automaton of A, as defined in Section 3. Alternative proofs can be given using different intermediate automata, for example the automaton obtained by applying the classical subset construction on B (see <ref> [11, 14] </ref>). Theorem 4.22 (Completeness of forward and backward simulations) If A flT B then the following are true. 1. 9C : A F C B B. 2. If B has fin then 9C : A F C iB B. Proof: Let C = can (beh (A)). <p> If B has fin then C iB B follows by Theorem 4.18 (2). 14 5 Hybrid Simulations 5.1 Forward-Backward Simulations Forward-backward simulations were introduced by Klarlund and Schneider who call them invariants in [13] and ND measures in <ref> [14] </ref>. They also occur in the work of Jonsson [11] under the name subset simulations, and are related to the failure simulations of Gerth [3]. Forward-backward simulations combine in a single relation both a forward and a backward simulation.
Reference: [15] <author> D.E. Knuth. </author> <title> Fundamental Algorithms, </title> <booktitle> volume 1 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1973. </year> <note> Second edition. </note>
Reference-contexts: If f is a relation over X and P (Y ), then we say that f is image-set-finite if every set in the range of f is finite. 2.3 A Basic Graph Lemma We require the following lemma, a generalization of Konig's Lemma <ref> [15] </ref>. If G is a digraph, then a root of G is defined to be a node with no incoming edges. Lemma 2.1 Let G be an infinite digraph that satisfies the following properties. 1. G has finitely many roots. 2. Each node of G has finite outdegree. 3.
Reference: [16] <author> L. Lamport. </author> <title> Specifying concurrent program modules. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 5(2) </volume> <pages> 190-222, </pages> <year> 1983. </year>
Reference-contexts: The simulations we consider are derived from simulations studied in many places in the research literature. The simplest kind of simulation we consider is a refinement, which is a functional simulation similar to those studied in <ref> [16] </ref> and very similar to a homomorphism between automata in the sense of classical automata theory [4].
Reference: [17] <author> B. Lampson, N. Lynch, and J. Stgaard-Andersen. </author> <title> Correctness of at-most-once message delivery protocols, </title> <note> 1993. Submitted for publication. </note>
Reference-contexts: Typical examples of forward simulation proofs appear in [20]. Backward simulations have been much less widely used. Abadi and Lamport [1] demonstrate the usefulness of prophecy variables (and hence backward simulations), with some simple examples, while <ref> [17] </ref> contains a more interesting example. There has not been much work on applying the hybrid forward and backward methods. As far as the classification of simulations is concerned, our work is closely related to and extends that of Jonsson [11].
Reference: [18] <author> B.L. Liskov and J.V. Guttag. </author> <title> Abstraction and Specification in Program Development. </title> <publisher> MIT Press and McGraw Hill, </publisher> <year> 1986. </year>
Reference-contexts: Finally, we show how reachability can be integrated into the various simulation proof methods. The usefulness of refinement mappings and forward simulations in proving correctness has been well demonstrated. Abstraction mappings, which are essentially refinement mappings, comprise a basic proof method for implementations of abstract data types <ref> [6, 18] </ref>. Typical examples of forward simulation proofs appear in [20]. Backward simulations have been much less widely used. Abadi and Lamport [1] demonstrate the usefulness of prophecy variables (and hence backward simulations), with some simple examples, while [17] contains a more interesting example.
Reference: [19] <author> N.A. Lynch. </author> <title> Concurrency control for resilient nested transactions. Report TR-285, </title> <publisher> MIT, </publisher> <month> February </month> <year> 1983. </year>
Reference-contexts: We then consider forward simulations and backward simulations, which are generalizations of refinements that allow a set of states of B to correspond to a single state of A. Forward simulations are similar to the the simulations of [27, 8], the possibilities mappings of <ref> [19, 21] </ref>, the downward simulations of [7, 12, 5], the forward simulations of [11], and the history measures of [14].
Reference: [20] <author> N.A. Lynch. </author> <title> Multivalued possibilities mappings. </title> <editor> In de Bakker et al. </editor> <volume> [2], </volume> <pages> pages 519-543. </pages>
Reference-contexts: The usefulness of refinement mappings and forward simulations in proving correctness has been well demonstrated. Abstraction mappings, which are essentially refinement mappings, comprise a basic proof method for implementations of abstract data types [6, 18]. Typical examples of forward simulation proofs appear in <ref> [20] </ref>. Backward simulations have been much less widely used. Abadi and Lamport [1] demonstrate the usefulness of prophecy variables (and hence backward simulations), with some simple examples, while [17] contains a more interesting example. There has not been much work on applying the hybrid forward and backward methods.
Reference: [21] <author> N.A. Lynch and M.R. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <booktitle> In PODC 87 [28], </booktitle> <pages> pages 137-151. </pages> <note> A full version is available as MIT Technical Report MIT/LCS/TR-387. </note>
Reference-contexts: We then consider forward simulations and backward simulations, which are generalizations of refinements that allow a set of states of B to correspond to a single state of A. Forward simulations are similar to the the simulations of [27, 8], the possibilities mappings of <ref> [19, 21] </ref>, the downward simulations of [7, 12, 5], the forward simulations of [11], and the history measures of [14]. <p> For transitivity, use Lemma 4.8 to show that if f and f 0 are forward simulations from A to B and from B to C, respectively, f 0 ffi f is a forward simulation from A to C. Theorem 4.10 (Soundness of forward simulations, <ref> [21, 9, 30] </ref>) A F B ) A T B. Proof: Versions of this proof appears in the cited papers. The proof is similar to that of Theorem 4.4. Theorem 4.11 (Partial completeness of forward simulations) Suppose B is deterministic and A flT B. Then A F B.
Reference: [22] <author> N.A. Lynch and F.W. Vaandrager. </author> <title> Forward and backward simulations for timing-based systems. </title> <editor> In J.W. de Bakker, C. Huizing, W.P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Proceedings of the REX Workshop "Real-Time: Theory in Practice", volume 600 of Lecture Notes in Computer Science, </booktitle> <pages> pages 397-446. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [23] <author> N.A. Lynch and F.W. Vaandrager. </author> <title> Forward and backward simulations part II: </title> <journal> Timing-based systems, </journal> <note> 1993. In preparation. </note>
Reference-contexts: 1 Introduction In this paper, we give a comprehensive presentation of forward and backward simulation methods for proving trace inclusion relationships between concurrent systems. The concurrent systems we treat in this paper do not involve timing; there is a second paper, <ref> [23] </ref>, following this one in this same journal issue, which extends the ideas of this paper to timing-based systems. We present all the methods in terms of a simple and general automaton model, which includes internal actions. <p> Although these simulations do not lead to a complete proof method, they are sound and possibly useful in practice. They arise naturally as the dual notion of forward-backward simulations. (3) The notions of history and prophecy relations. In Part II <ref> [23] </ref>, we extend the results of this paper to timing-based systems. We do this by defining a new notion of automaton called a timed automaton, and using it to present all the definitions and results for timed automata.
Reference: [24] <author> M. Merritt. </author> <title> Completeness theorems for automata. </title> <editor> In de Bakker et al. </editor> <volume> [2], </volume> <pages> pages 544-560. </pages>
Reference-contexts: Again, we give soundness and partial completeness results. Backward simulations occurred first in [7] under the name of upward simulations and were used later in the setting of CSP in [12, 5]. In <ref> [24] </ref> and [10], where they are called prophecy mappings and backwards simulations, respectively, it is observed that they are closely related to the prophecy variables first defined in [1]. <p> For this reason, some of the other work on simulations (e.g., <ref> [24] </ref>) includes reachability restrictions in the simulation definitions. We have avoided doing this so far, in order to avoid cluttering up our results and proofs. However, we would like to be able to use our results to justify the soundness of methods that allow use of reachability conditions.
Reference: [25] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> Prentice-Hall International, </booktitle> <address> Englewood Cliffs, </address> <year> 1989. </year>
Reference-contexts: Theorem 6.5 (Soundness of history relations) A H B ) A T B. Proof: Immediate from the soundness of refinements and forward simulations. In fact, a history relation from A to B is just a functional bisimulation between A and B in the sense of Park [27] and Milner <ref> [25] </ref>. This implies that if there exists a history relation from A to B, both automata are bisimulation equivalent. Hence, history relations preserve the behavior of automata in a very strong sense. We can now state and prove the completeness results of Sistla [29]. <p> On the other hand, several weak relations coincide with their originals. Proposition 7.8 Suppose X 2 fF, iFB, FB, iBF, BFg. Then A X B , A wX B. 3 Note that our use of the words `weak' and `strong' in this subsection differs from that by Milner <ref> [25] </ref>, who uses it to indicate whether or not internal steps are abstracted away. 29 Proof: By Prop. 7.6, we only have to worry about the implication "(". * X=F.
Reference: [26] <author> S. Owicki and D. Gries. </author> <title> An axiomatic proof technique for parallel programs. </title> <journal> Acta Informatica, </journal> <volume> 6(4) </volume> <pages> 319-340, </pages> <year> 1976. </year>
Reference-contexts: We also define history relations and prophecy relations, which are abstract versions of the history and prophecy variables, respectively, of Abadi and Lamport [1]; history relations are also abstract versions of the auxiliary variables of Owicki and Gries <ref> [26] </ref>. We prove theorems describing the properties of these various kinds of simulations and relating the different kinds of simulations to each other. The simulations we consider are derived from simulations studied in many places in the research literature. <p> The notion of a history relation is a new contribution of this paper. It provides a simple and abstract view of the history variables of Abadi and Lamport [1] (which in turn are abstractions of the auxiliary variables of Owicki and Gries <ref> [26] </ref>). Translated into the setting of this paper, history variables can be simply defined in terms of history relations, as follows.
Reference: [27] <author> D.M.R. Park. </author> <title> Concurrency and automata on infinite sequences. </title> <editor> In P. Deussen, editor, </editor> <booktitle> 5 th GI Conference, volume 104 of Lecture Notes in Computer Science, </booktitle> <pages> pages 167-183. </pages> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: We give soundness and partial completeness results. We then consider forward simulations and backward simulations, which are generalizations of refinements that allow a set of states of B to correspond to a single state of A. Forward simulations are similar to the the simulations of <ref> [27, 8] </ref>, the possibilities mappings of [19, 21], the downward simulations of [7, 12, 5], the forward simulations of [11], and the history measures of [14]. <p> Theorem 6.5 (Soundness of history relations) A H B ) A T B. Proof: Immediate from the soundness of refinements and forward simulations. In fact, a history relation from A to B is just a functional bisimulation between A and B in the sense of Park <ref> [27] </ref> and Milner [25]. This implies that if there exists a history relation from A to B, both automata are bisimulation equivalent. Hence, history relations preserve the behavior of automata in a very strong sense. We can now state and prove the completeness results of Sistla [29].
Reference: [28] <institution> Proceedings of the 6 th Annual ACM Symposium on Principles of Distributed Computing, </institution> <month> August </month> <year> 1987. </year>
Reference: [29] <author> A.P. Sistla. </author> <title> Proving correctness with respect to nondeterministic safety specifications. </title> <journal> Information Processing Letters, </journal> <volume> 39(1) </volume> <pages> 45-49, </pages> <month> July </month> <year> 1991. </year> <month> 36 </month>
Reference-contexts: This implies that if there exists a history relation from A to B, both automata are bisimulation equivalent. Hence, history relations preserve the behavior of automata in a very strong sense. We can now state and prove the completeness results of Sistla <ref> [29] </ref>. Theorem 6.6 (Completeness of history relations and backward simulations, [29]) Suppose A flT B. Then 1. 9C : A H C B B, and 2. if B has fin then 9C : A H C iB B. <p> Hence, history relations preserve the behavior of automata in a very strong sense. We can now state and prove the completeness results of Sistla <ref> [29] </ref>. Theorem 6.6 (Completeness of history relations and backward simulations, [29]) Suppose A flT B. Then 1. 9C : A H C B B, and 2. if B has fin then 9C : A H C iB B. Proof: By Prop. 6.1, unfold (A) is a forest and A H unfold (A).
Reference: [30] <author> E.W. Stark. </author> <title> Proving entailment between conceptual state specifications. </title> <journal> Theoretical Computer Science, </journal> <volume> 56 </volume> <pages> 135-154, </pages> <year> 1988. </year> <month> 37 </month>
Reference-contexts: For transitivity, use Lemma 4.8 to show that if f and f 0 are forward simulations from A to B and from B to C, respectively, f 0 ffi f is a forward simulation from A to C. Theorem 4.10 (Soundness of forward simulations, <ref> [21, 9, 30] </ref>) A F B ) A T B. Proof: Versions of this proof appears in the cited papers. The proof is similar to that of Theorem 4.4. Theorem 4.11 (Partial completeness of forward simulations) Suppose B is deterministic and A flT B. Then A F B.
References-found: 30

