URL: ftp://ftp.cs.washington.edu/tr/1996/05/UW-CSE-96-05-02.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Email: -shaw,drupp-@cs.washington.edu  
Author: Alan Shaw and Douglas Rupp 
Address: Box 352350 Seattle, WA 98195-2350  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: 1 Real-Time Programming With TimeStamped Event Histories* Technical Report: UW-CSE-96-05-02 Abstract Assertions on timestamped event histories (TEHs) have been used in real-time theory for specifying, analyzing, and verifying requirements and designs, and also have been proposed for monitoring implementations. This paper investigates the direct use of TEHs for programming. We define some language and system support mechanisms, show by example the potential benefits of programming with TEHs, and describe an implementation that is an extension of a state-based system. Benefits include cleaner and more readable code, and programs that more closely resemble specifications. 
Abstract-found: 1
Intro-found: 1
Reference: [Attiya&Lynch89] <author> H.Attiya and N.Lynch, </author> <title> "Time bounds for real-time process control in the presence of uncertainty," </title> <booktitle> Proc. IEEE Real-Time Systems Symp., </booktitle> <month> Dec. </month> <year> 1989, </year> <month> pp.268-284. </month>
Reference-contexts: Examples include logics such as Real-Time Logic (RTL) [Jahanian&Mok86] that deal directly with timed events and histories, and also state and programming models such as Timed IO Automata (i.e., <ref> [Attiya&Lynch89] </ref>) and Timed CSP [Reed&Roscoe86], respectively, where traces are the underlying behavioral descriptions. A more recent application has been the monitoring or checking of real-time systems [Chodrow_et_al91, Jahanian_et_al94].
Reference: [Callison95] <author> H.Callison, </author> <title> "A timesensitive object model for real-time systems," </title> <journal> ACM Trans. on Software Engineering and Methodology, </journal> <note> vol.4, no.3 (July 1995), pp.287-317. </note>
Reference-contexts: These efforts within the RTL framework have significantly influenced the research reported in this paper. We have also been influenced by a new programming model, called timesensitive objects (TSOs) <ref> [Callison95] </ref>, that develops a data-centered approach to specifying and building real-time systems. The basic idea is to maintain histories of the values of data objects over time; operations are defined for updating and accessing these histories.
Reference: [Chodrow_et_al91] <author> S.Chodrow, F.Jahanian, and M.Donner, </author> <title> "Run-time monitoring of real-time systems," </title> <booktitle> Proc. IEEE Real-Time Systems Symp., </booktitle> <address> Dec.1991, pp.74-83. </address>
Reference-contexts: A more recent application has been the monitoring or checking of real-time systems <ref> [Chodrow_et_al91, Jahanian_et_al94] </ref>. In these works, timing constraints expressed in a language based on RTL are checked at runtime by a separate monitoring component of the software. We have used similar ideas for monitoring executable specifications in our Communicating Real-Time State Machine (CRSM) notation [Raju&Shaw94].
Reference: [Corbett94] <author> J.Corbett, </author> <title> "Modeling and analysis of real-time Ada tasking programs," </title> <booktitle> Proc. IEEE Real-Time Systems Symp., </booktitle> <address> Dec.1994, pp.132-141. </address>
Reference-contexts: Several examples have been run, including the general click recognizer of Example 3 in the last section (Click_Recognizer H ). The sensor and integrator tasks presented as Ada programs in <ref> [Corbett94] </ref> were also translated into both pure CRSM and CRSM+H machines and then simulated.
Reference: [Fujimoto90] <author> R.Fujimoto, </author> <title> "Parallel discrete event simulation," </title> <journal> Comm. of ACM, vol.33, no.10 (Oct.1990), pp.30-53. </journal>
Reference-contexts: Another application area that uses TEH-like objects in an interesting way is parallel debugging systems [McDowell&Helmbold89]. Many of these systems record event histories, sometimes with timestamps, as the principal debugging data. Parallel discrete event simulation languages also use timestamped event lists in a central way <ref> [Fujimoto90] </ref>. One example is the Rapide language which provides an event pattern language for defining triggers for processes [Luckham&Vera95]; the event patterns describe partially ordered sets of events. TEHs are the objects of convenience or necessity in these other theoretical and practical applications.
Reference: [Harel87] <author> D.Harel, "Statecharts: </author> <title> a visual formalism for complex systems," </title> <booktitle> Science of Computer Programming, vol.8, (1987), pp.231-274. </booktitle> <pages> 11 </pages>
Reference-contexts: Without TEH support, one could distribute pieces of the above code through the traffic controller, as is done in [Raju&Shaw94], encode the state through program variables, essentially storing the history, or allow references to actual labeled states such as provided by the statechart specification language <ref> [Harel87] </ref>. In the latter, a guard on a state transition could refer explicitly to the state of some other component. Generally, access to TEHs allows a programmer to recreate relevant state.
Reference: [Jaffe_et_al91] <author> M.Jaffe, N.Leveson, M.Heimdahl, and B.Melhart, </author> <title> "Software requirements analysis for real-time process control systems," </title> <journal> IEEE Trans. on Software Engineering, </journal> <note> vol.17, no.3 (March 1991), pp.241-258. </note>
Reference-contexts: For example, if E () = (D, U, D, U) then a DC message is output. Example 4: Part of a Coolant Controller This is a toy example in process control taken from <ref> [Jaffe_et_al91] </ref>, that shows the use of all components of the event triple as well as some history. The coolant temperature of a reactor tank is controlled to maintain a temperature of C o Celsius by moving two rods.
Reference: [Jahanian&Mok86] <author> F.Jahanian and A.Mok, </author> <title> "Safety analysis of timing properties in real-time systems," </title> <journal> IEEE Trans. on Software Engineering , vol.SE-12, </journal> <month> no.9 (Sept. </month> <year> 1986), </year> <month> pp.890-904. </month>
Reference-contexts: Examples include logics such as Real-Time Logic (RTL) <ref> [Jahanian&Mok86] </ref> that deal directly with timed events and histories, and also state and programming models such as Timed IO Automata (i.e., [Attiya&Lynch89]) and Timed CSP [Reed&Roscoe86], respectively, where traces are the underlying behavioral descriptions. A more recent application has been the monitoring or checking of real-time systems [Chodrow_et_al91, Jahanian_et_al94].
Reference: [Jahanian_et_al94] <author> F.Jahanian, R.Rajkumar, and S.Raju, </author> <title> "Runtime monitoring of timing constraints in distributed real-time systems," </title> <journal> Real-Time Systems Journal, vol.7, </journal> <volume> no.3, </volume> <year> 1994, </year> <month> pp.247-273. </month>
Reference-contexts: A more recent application has been the monitoring or checking of real-time systems <ref> [Chodrow_et_al91, Jahanian_et_al94] </ref>. In these works, timing constraints expressed in a language based on RTL are checked at runtime by a separate monitoring component of the software. We have used similar ideas for monitoring executable specifications in our Communicating Real-Time State Machine (CRSM) notation [Raju&Shaw94].
Reference: [Luckham&Vera95] <author> D.Luckham and J.Vera, </author> <title> "An event-based architecture definition language," </title> <journal> IEEE Trans. on Software Engineering, vol.21, no.9 (Sept.1995), pp.717-734. </journal>
Reference-contexts: Many of these systems record event histories, sometimes with timestamps, as the principal debugging data. Parallel discrete event simulation languages also use timestamped event lists in a central way [Fujimoto90]. One example is the Rapide language which provides an event pattern language for defining triggers for processes <ref> [Luckham&Vera95] </ref>; the event patterns describe partially ordered sets of events. TEHs are the objects of convenience or necessity in these other theoretical and practical applications.
Reference: [McDowell&Helmbold89] <author> C.McDowell and D.Helmbold, </author> <title> "Debugging concurrent programs," </title> <journal> ACM Computing Surveys, </journal> <note> vol.21, no.4 (Dec. 1989), pp.593-612. </note>
Reference-contexts: The TSO model is proposed as an alternative to the conventional process model, for example, timesensitive periodic objects replacing periodic processes. Another application area that uses TEH-like objects in an interesting way is parallel debugging systems <ref> [McDowell&Helmbold89] </ref>. Many of these systems record event histories, sometimes with timestamps, as the principal debugging data. Parallel discrete event simulation languages also use timestamped event lists in a central way [Fujimoto90].
Reference: [Raju&Shaw94] <author> S.C.V.Raju and A.Shaw, </author> <title> "A prototyping environment for specifying, executing, and checking communicating real-time state machines," </title> <journal> Software-Practice and Experience , vol.24, no.2 (Feb. </journal> <year> 1994), </year> <month> pp.175-195. </month>
Reference-contexts: In these works, timing constraints expressed in a language based on RTL are checked at runtime by a separate monitoring component of the software. We have used similar ideas for monitoring executable specifications in our Communicating Real-Time State Machine (CRSM) notation <ref> [Raju&Shaw94] </ref>. Here, event-triggered timing specifications expressed in an RTL variant are checked during simulation runs; the simulation and specification code are each a separate component as in the other works discussed in this paragraph. These efforts within the RTL framework have significantly influenced the research reported in this paper. <p> The program examples will use a conventional imperative notation with similarities to Ada and CSP/Occam. This is essentially a textual version of our graphical CRSM language <ref> [Raju&Shaw94] </ref>. Guarded commands and non-determinacy are used where appropriate. A guarded command is of the form guard fi command. <p> If an ambulance approaches the intersection, all lights are turned red, and the street or avenue direction of the ambulance is stored. A conventional state-based program containing the ambulance processing appears in <ref> [Raju&Shaw94] </ref>. The traffic light events sr, sg, sy, ar, ag, and ay are associated with commands that turn the street and avenue lights red, green, and yellow, respectively. An ambulance sensing event with a direction parameter, called amb_approaching (), signifies that an ambulance is approaching the intersection. <p> Conventional code for this task also requires knowledge of the state of the traffic lights when the amb_approaching event occurs. Ambulance H obtains this state directly from E -1 . Without TEH support, one could distribute pieces of the above code through the traffic controller, as is done in <ref> [Raju&Shaw94] </ref>, encode the state through program variables, essentially storing the history, or allow references to actual labeled states such as provided by the statechart specification language [Harel87]. In the latter, a guard on a state transition could refer explicitly to the state of some other component. <p> It would also require the usual amount of error-prone switching of values each time through the loop, for example: old_time := new_time . 5 Supporting Software Tools In order to permit some early experimentation, we have extended our communicating real-time state machine (CRSM) software <ref> [Raju&Shaw94] </ref> with TEH support. The resulting system, called CRSM+H, consists of a graphical editor and a simulator. The editor permits the creation of general state machines, where the transitions are guarded commands with time durations. A command can be a CSP-like send or receive, or any C++ program.
Reference: [Reed&Roscoe86] <author> G.Reed and A.Roscoe, </author> <title> "A timed model for communicating sequential processes," </title> <booktitle> Proc. ICALP '86, </booktitle> <publisher> Springer-Verlag LCNS 226, </publisher> <year> 1986, </year> <month> pp.314-323. </month>
Reference-contexts: Examples include logics such as Real-Time Logic (RTL) [Jahanian&Mok86] that deal directly with timed events and histories, and also state and programming models such as Timed IO Automata (i.e., [Attiya&Lynch89]) and Timed CSP <ref> [Reed&Roscoe86] </ref>, respectively, where traces are the underlying behavioral descriptions. A more recent application has been the monitoring or checking of real-time systems [Chodrow_et_al91, Jahanian_et_al94]. In these works, timing constraints expressed in a language based on RTL are checked at runtime by a separate monitoring component of the software.
Reference: [Shaw92] <author> A.Shaw, </author> <title> "Communicating real-time state machines," </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> vol.18, </volume> <month> no.9 (Sept. </month> <year> 1992), </year> <month> pp.805-816. </month>
Reference-contexts: A state machine solution to this problem is presented in <ref> [Shaw92] </ref>.
References-found: 14

