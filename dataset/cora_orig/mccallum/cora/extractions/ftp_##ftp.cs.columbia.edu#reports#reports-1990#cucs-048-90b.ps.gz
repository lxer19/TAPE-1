URL: ftp://ftp.cs.columbia.edu/reports/reports-1990/cucs-048-90b.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1990.html
Root-URL: http://www.cs.columbia.edu
Title: Dynamic Reconfiguration in an Object-Based Programming Language with Distributed Shared Data  
Author: Brent Hailpern Gail E. Kaiser Brent Hailpern and Gail E. Kaiser 
Keyword: topics: Coordination languages, tools and software engineering; Soft real-time issues and financial applications  
Note: Copyright 1990  
Address: Orchard Road Armonk, NY 10504 914-765-6481  New York, NY 10027  
Affiliation: IBM Old  Columbia University Department of Computer Science  
Email: kaiser@cs.columbia.edu  
Phone: 212-854-3856  
Date: 12 October 1990  
Abstract: On-line distributed applications generally allow reconfiguration while the application is running, but changes are usually limited to adding new client and server processes and changing the bindings among such processes. In some application domains, such as on-line financial services, it is necessary to support finer grained reconfiguration at the level of entities within processes, but for performance reasons it is desirable to avoid conventional approaches such as interpretation and dynamic storage allocation. We present a scheme for special cases of fine grained dynamic reconfiguration sufficient for our application domain and show how it can be used for practical changes. We introduce new language concepts to implement this scheme in the context of an object-based programming language that supports shared data in a distributed environment. Part of this work was completed at the IBM T.J. Watson Research Center while Dr. Hailpern was a Research Staff Member and Prof. Kaiser was an Academic Visitor. Prof. Kaiser is supported by National Science Foundation grants CCR-9000930, CDA-8920080 and CCR-8858029, by grants from AT&T, BNR, Citicorp, DEC, IBM, Siemens, SRA, Sun and Xerox, by the Center for Advanced Technology and by the Center for Telecommunications Research. 
Abstract-found: 1
Intro-found: 1
Reference: [Bal 88] <author> Henri E. Bal and Andrew S. Tanenbaum. [Haeberli 88] Paul E. Haeberli. </author> <title> Distributed Programming with Shared Data. </title> <booktitle> ConMan: A Visual Programming Language In International Conference on Computer for Interactive Graphics. Languages, </booktitle> <pages> pages 82-91. </pages> <address> Miami Beach In SIGGRAPH '88, </address> <pages> pages 103-111. </pages> <address> Atlanta FL, </address> <month> October, </month> <year> 1988. </year> <institution> GA, </institution> <month> August, </month> <year> 1988. </year> <journal> Special issue of Computer Graphics, </journal> <volume> 22(4), </volume>
Reference-contexts: SOS provides a mechanism for certain cases of dynamic reconfiguration in the form of dynamic classes, where all member functions are called via a dynamic table, but requires dynamic linking capabilities carefully avoided by PROFIT. The Orca programming language <ref> [Bal 88] </ref> is based on a shared data-object model, which provides reliable and efficient sharing of variables among the processes of a distributed application. There is no dynamic reconfiguration in the sense we describe here, addition of new entities and rebinding of existing entities, in a running system.
Reference: [Black 86] <author> Andrew Black, Norman Hutchinson, </author> <month> Eril Jul August </month> <year> 1988. </year> <title> and Henry Levy. Object Structure in the Emerald System. [Hailpern 90] Brent Hailpern and Harold Ossher. </title> <editor> In Norman Meyrowitz (editor), </editor> <title> Extending objects to provide multiple Object-Oriented Programming Systems, interfaces and access control. </title> <booktitle> Languages and Applications Conference, IEEE Transactions on Software Engineering pages 78-86. ACM, </booktitle> <address> Portland OR, 16(11), </address> <month> November, </month> <year> 1990. </year> <month> September, </month> <year> 1986. </year> <title> Technical Report RC 14016, </title> <journal> IBM Research Special issue of SIGPLAN Notices, </journal> <volume> 21(11), </volume> <pages> Division, </pages> <month> September </month> <year> 1988 </year> <month> (revised March November </month> <year> 1986. 1990). </year>
Reference-contexts: Facets may contain more slots than those included in the breed. For example, we can define any facet with procedure slots 1Q-option-price and 2Q-option-price to be a member of the Options breed. A breed corresponds to an abstract type in Emerald <ref> [Black 86] </ref> or a role in RPDE [Harrison 90]. A breed can be extended to include the ``signature'' of each of the procedure and data slots in the defining set, but in this paper we simplify the discussion by considering only the names of the slots. <p> Dynamic reconfiguration is supported to a minimal extent through server ports, which are reestablished after network failures and permit binding of new clients to servers during program execution. Thus the facility comparable to stalls/occupants is implicit, and there is nothing comparable to our pens/herds or registries. Emerald <ref> [Black 86] </ref> uses the notion of abstract types to provide the benefits of static type checking while retaining the flexibility and extensibility of untyped object-oriented languages. Abstract types are analogous to PROFIT breeds.
Reference: [Boult 90] <author> Terry Boult. [Harrison 87] William Harrison. </author> <title> 3 Private Communication. RPDE : A framework for integrating tool 1990 fragments. </title> <booktitle> IEEE Software 4(6) </booktitle> <pages> 46-56, </pages> <month> November, </month> <year> 1987. </year>
Reference-contexts: Our programming model also supports other architectures on this spectrum, and is not specific to financial services. It is suitable for other applications, such as network management [Mazumdar 89], machine vision <ref> [Boult 90] </ref> and animation [Haeberli 88], with similar characteristics. We have developed a language, called PROFIT (PROgrammed FInancial Trading), based on this model.
Reference: [Ciancarini 90] <author> Paola Ciancarini. </author> <title> Coordination Languages for Open System [Harrison 90] William Harrison and Harold Ossher. Design. Checking Evolving Interfaces in the Presence In International Conference on Computer of Persistent Objects. </title> <booktitle> Languages, </booktitle> <pages> pages 252-260. </pages> <institution> New Orleans Technical Report RC 15520, IBM Research LA, </institution> <month> March, </month> <year> 1990. </year> <institution> Division, </institution> <month> February, </month> <year> 1990. </year>
Reference-contexts: It is suitable for other applications, such as network management [Mazumdar 89], machine vision [Boult 90] and animation [Haeberli 88], with similar characteristics. We have developed a language, called PROFIT (PROgrammed FInancial Trading), based on this model. PROFIT is a coordination language <ref> [Ciancarini 90] </ref> that extends the declarations and statements of some base computation language, such as C or C++, with additional facilities to support distributed computation in the context of rapidly changing shared data.
Reference: [Donzeau-Gouge 87] <author> [Kaiser 90a] Gail E. Kaiser and Brent Hailpern. V. Donzeau-Gouge, C. Dubois, P. </author> <title> Facon and An Object Model for Shared Data. </title> <editor> F. Jean. </editor> <booktitle> In International Conference on Computer Development of a Programming Environment Languages, </booktitle> <pages> pages 135-144. </pages> <address> New Orleans for Setl. LA, </address> <month> March, </month> <year> 1990. </year> <editor> In H.K. Nichols and D. Simpson (editor), </editor> <booktitle> 1st </booktitle>
Reference-contexts: Elements of pens are not addressable by indices, but instead are operated on by various set operations, using SETL-like constructs (e.g., exists, forall, from) <ref> [Donzeau-Gouge 87] </ref>. Within the scope of one of these set operations, a pen can be treated like a stall to access the slots of an individual member of the herd and treat it as an occupant.
Reference: [Kaiser 90b] <author> Gail E. Kaiser and Brent Hailpern. </author> <booktitle> European Software Engineering An Object-Based Programming Model for Conference, </booktitle> <pages> pages 21-32. </pages> <publisher> Springer-Shared Data. Verlag, </publisher> <address> Strasbourg, France, </address> <month> September, </month> <type> Technical Report CUCS-046-90, </type> <institution> Columbia 1987. University Department of Computer Science, </institution> <month> May, </month> <year> 1990. </year> <note> Submitted for publication. 20 </note>
Reference-contexts: We discuss these components elsewhere <ref> [Kaiser 90b] </ref>. 6 operation that made the call from the point where it left off. So far, we have considered only the case where a facet is part of exactly one object, and thus there is exactly one binding table that needs to be considered.
Reference: [Liskov 88] <author> Barbara Liskov, Toby Bloom, David Gifford, Robert Scheifler and William Weihl. </author> <title> Communication in the Mercury System. </title> <editor> In Bruce D. Shriver (editor), </editor> <booktitle> 21st Annual Hawaii International Conference on System Sciences, </booktitle> <pages> pages 178-187. </pages> <publisher> IEEE Computer Society, </publisher> <address> Kona HI, </address> <month> January, </month> <year> 1988. </year>
Reference-contexts: The replicas are managed implicitly by the run-time system, and are invisible to the application programmer. In contrast, the placement of facets (shared or unshared) in processes is specified explicitly by the PROFIT programmer, and there is no migration or replication. The MIT Mercury system <ref> [Liskov 88] </ref> provides a general interprocess communication mechanism for heterogeneous systems. Servers are written independently of whether their application clients choose communication protocols to provide low latency or high throughput.
Reference: [Mazumdar 89] <author> Subrata Mazumdar and Aurel A. Lazar. </author> <title> Knowledge-Based Monitoring of Integrated Networks. </title> <editor> In Branislav Meandzija and Jil Westcott (editors), </editor> <booktitle> IFIP TC 6/WG 6.6 Symposium on Integrated Network Management, </booktitle> <pages> pages 235-243. </pages> <publisher> North-Holland, </publisher> <address> Boston MA, </address> <month> May, </month> <year> 1989. </year>
Reference-contexts: This approach falls in the middle of the spectrum from polling to active values, and combines the advantages of both extremes. Our programming model also supports other architectures on this spectrum, and is not specific to financial services. It is suitable for other applications, such as network management <ref> [Mazumdar 89] </ref>, machine vision [Boult 90] and animation [Haeberli 88], with similar characteristics. We have developed a language, called PROFIT (PROgrammed FInancial Trading), based on this model. <p> As networked systems get larger and faster, it has become necessary to automate these processes, so new management approaches are being developed to automatically change configurations, as well as to detect and correct performance bottlenecks and failures <ref> [Mazumdar 89] </ref>.
Reference: [Peinl 88] <author> Peter Peinl, Andrea Reuter and Harald Sammer. </author> <title> High Contention in a Stock Trading Database: A Case Study. </title> <booktitle> In ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 260-268. </pages> <address> Chicago IL, </address> <month> June, </month> <year> 1988. </year> <journal> Special issue of SIGMOD Record, </journal> <volume> 17(3), </volume> <month> September </month> <year> 1988. </year>
Reference-contexts: These problems have been articulated by other researchers, but not solved (e.g., <ref> [Peinl 88] </ref>). An on-line stock trading system might consist of a shared ``prices database'' and a number of analyst workstations that execute portfolio management programs. These portfolio managers would monitor the current prices of the stocks and options, and execute the appropriate purchases and sales as market conditions change.
Reference: [Shapiro 89] <author> Marc Shapiro, Philippe Gautron and Laurence Mosseri. </author> <title> Persistence and Migration for C++ Objects. </title> <editor> In Stephen Cook (editor), </editor> <booktitle> 3rd European Conference on Object-Oriented Programming, </booktitle> <pages> pages 191-204. </pages> <publisher> Cambridge University Press, </publisher> <address> Nottingham, UK, </address> <month> July, </month> <year> 1989. </year>
Reference-contexts: As networked systems get larger and faster, it has become necessary to automate these processes, so new management approaches are being developed to automatically change configurations, as well as to detect and correct performance bottlenecks and failures [Mazumdar 89]. The SOS operating system <ref> [Shapiro 89] </ref> is similar to PROFIT in that multiple objects (similar to our facets) 17 can be combined into a group (similar to our notion of object), with easy communication among the objects in the group, even though the objects reside in multiple contexts (similar to our processes).
Reference: [Strom 85] <author> Robert E. Strom and Shaula Yemini. </author> <title> Optimistic Recovery in Distributed Systems. </title> <journal> ACM Transactions on Computer Systems 3(3) </journal> <pages> 204-226, </pages> <month> August, </month> <year> 1985. </year>
Reference-contexts: This serves as a framework for describing different inheritance and delegation mechanisms and for orthogonally incorporating security, priority, and special controlled interfaces in an object-oriented system. Dynamic reconfiguration as discussed in this paper does not address migration [Theimer 86], crash recovery <ref> [Strom 85] </ref>, or general reflection [Watanabe 90]. 10. Conclusions We have presented a new approach to dynamic reconfiguration in on-line distributed applications based on a data sharing model. Our data sharing model consists of facets, objects and processes, with facets as the unit of sharing.
Reference: [Theimer 86] <author> Marvin M. Theimer. </author> <title> Preemptable Remote Execution Facilities for Loosely-Coupled Distributed Systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> June, </month> <year> 1986. </year> <month> STAN-CS-86-1128. </month>
Reference-contexts: This serves as a framework for describing different inheritance and delegation mechanisms and for orthogonally incorporating security, priority, and special controlled interfaces in an object-oriented system. Dynamic reconfiguration as discussed in this paper does not address migration <ref> [Theimer 86] </ref>, crash recovery [Strom 85], or general reflection [Watanabe 90]. 10. Conclusions We have presented a new approach to dynamic reconfiguration in on-line distributed applications based on a data sharing model. Our data sharing model consists of facets, objects and processes, with facets as the unit of sharing.
Reference: [Ungar 87] <author> David Ungar and Randall B. Smith. </author> <title> Self: The Power of Simplicity. </title> <editor> In Norman Meyrowitz (editor), </editor> <booktitle> Object-Oriented Programming Systems, Languages and Applications Conference Proceedings, </booktitle> <pages> pages 227-242. </pages> <publisher> ACM Press, </publisher> <address> Orlando FL, </address> <month> October, </month> <year> 1987. </year> <journal> Special issue of SIGPLAN Notices, </journal> <volume> 22(12), </volume> <month> December </month> <year> 1987. </year>
Reference-contexts: Data slots may be reassigned during execution to new values, but procedure slots cannot be changed. This structure is similar to objects in Self <ref> [Ungar 87] </ref>. Within a facet, every use of an identifier matches an identifier defined within the facet. There are no free variables. In order to support references from one facet to another, one or more slots of a facet may be declared indirect, as depicted in Figure 2-2.
Reference: [Watanabe 90] <author> Takuo Watanabe and Akinori Yonezawa. </author> <title> Reflection in an Object-Oriented Concurrent Language. ABCL: An Object-Oriented Concurrent System. </title> <publisher> MIT Press, </publisher> <address> Cambridge MA, </address> <year> 1990, </year> <pages> pages 45-70, </pages> <note> Chapter 2. </note>
Reference-contexts: This serves as a framework for describing different inheritance and delegation mechanisms and for orthogonally incorporating security, priority, and special controlled interfaces in an object-oriented system. Dynamic reconfiguration as discussed in this paper does not address migration [Theimer 86], crash recovery [Strom 85], or general reflection <ref> [Watanabe 90] </ref>. 10. Conclusions We have presented a new approach to dynamic reconfiguration in on-line distributed applications based on a data sharing model. Our data sharing model consists of facets, objects and processes, with facets as the unit of sharing.
References-found: 14

