URL: http://www.cs.toronto.edu/~ftp/pub/reports/na/hull-mathon-math-basis.ps.Z
Refering-URL: http://www.cs.toronto.edu/NA/reports.html
Root-URL: http://www.cs.toronto.edu
Title: The Mathematical Basis for a New Polynomial Rootfinder with Quadratic Convergence  
Author: T. E. HULL and R. MATHON 
Keyword: Categories and Subject Descriptors: G.1 [Numerical Analysis]: General|error analysis, numerical algorithms; Roots of Nonlinear Equations |convergence, error analysis, iterative methods, methods for polynomials; G.4 [Mathematical Software]: Algorithm analysis General Terms: Algorithms, design Additional Key Words and Phrases: Polynomial rootfinder, polynomial zerofinder, quadratic convergence  
Address: Toronto  
Affiliation: University of  
Abstract: Formulas developed originally by Weierstrass have been used since the 1960's by many others for the simultaneous determination of all the roots of a polynomial. Convergence to simple roots is quadratic, but individual approximations to a multiple root converge only linearly. However, it is shown here that the mean of such individual approximations converges quadratically to that root. This result, along with some detail about the behavior of such approximations in the neighborhood of the multiple root, suggests a new approach to the design of a polynomial rootfinder. This paper first provides the relevant mathematical results: a short derivation of the formulas, convergence proofs, an indication of the behavior near a multiple root, and finally some error bounds. It then provides the outline of an algorithm based on these results, along with some preliminary experimental results to illustrate the major points, and to demonstrate some of the potential for a future software package. It should also be noted that the method is well-suited to take advantage of a parallel environment. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Aberth, O. </author> <title> Iteration methods for finding all zeros of a polynomial simultaneously. </title> <journal> Math. Comp. </journal> <volume> 27, 122 (1973), </volume> <pages> 339-344. </pages> <note> (See also Statement of Priority. Math. Comp. 30, 135 (1976), 680.). </note>
Reference-contexts: This simple derivation of the formulas is essentially the one given by Aberth <ref> [1] </ref>. An earlier derivation was based on the fact that the roots of P (z) satisfy the fol lowing equations: n X r j = c n1 =c n ; j=1 k&gt;j . . . j=1 where the left sides are the elementary symmetric functions of the roots. <p> This kind of behavior, or something like it, has been observed experimentally by a number of authors, such as Aberth <ref> [1] </ref>, Pasquini and Trigiante [15], and Smith [17], and will be illustrated later (Section 8). Related results about the behavior of approximations near a multiple root have been given by Wilkinson [21, p.39]. Suppose we assume the approximations to a multiple root are distributed in such a manner.
Reference: 2. <author> Aberth, O. </author> <title> Precise Numerical Analysis. Wm. </title> <address> C. </address> <publisher> Brown Publishers, </publisher> <address> Dubuque, Iowa, </address> <year> 1988. </year>
Reference-contexts: It can also be shown by the usual continuation argument that, if the discs are disjoint, each disc contains exactly one root (e.g., see Aberth <ref> [2, p.79] </ref>).) Another bound can be obtained by first going back to 1 k=1 and noticing that if k is such that j r j z k j is a minimum for 1 k n, then, for that value of k, j z k r j j k=1 We have a <p> yields the bound j z k r j j max (n j d k` j) 1=` : We now have an error bound for the mean of a cluster. (If the j-th disc is disjoint from the rest, then it contains exactly m j roots of P (z) (see Aberth <ref> [2, p.83] </ref>).) It was indicated earlier in Section 1 that starting values could be obtained by distributing them around a circle which is known to contain all the roots of the polynomial.
Reference: 3. <author> Aberth, O., and Schaeffer, K. J. </author> <title> Precise computation using range arithmetic, via C++. </title> <journal> ACM Trans. Math. Softw. </journal> <volume> 18, </volume> <month> 4 (Dec. </month> <year> 1992), </year> <pages> 481-491. </pages>
Reference-contexts: We also very much appreciate the generosity of Harwell, IMSL and NAG for giving us Sun 4 versions of their rootfinding programs. And we found the high precision package developed by Aberth and Schaeffer <ref> [3] </ref> very helpful in finding true solutions for some of our test polynomials. 14
Reference: 4. <author> Adams, D. A. </author> <title> A stopping criterion for polynomial root finding. </title> <journal> ACM Comm. </journal> <volume> 10, 10 (1967), </volume> <pages> 655-658. </pages>
Reference-contexts: We have experimented with these formulas for a number of years, using starting values distributed around a circle which is known to contain all the roots of the polynomial, and using stopping criteria similar what was proposed by Adams <ref> [4] </ref> and Peters and Wilkinson [16]. <p> Isolated discs correspond to simple roots. The others form clusters, which are identified, and the mean of each cluster is determined. To determine if convergence has occurred, the program can use a running error analysis (e.g., as in Adams <ref> [4] </ref> or Peters and Wilkinson [16]) to determine if, for each cluster of multiplicity m, the error bounds in evaluating the polynomial and its first m1 derivatives are greater than the corresponding calculated values of the polynomial and its derivatives.
Reference: 5. <author> Dochev, K. </author> <title> A modified Newton method for the simultaneous approximate calculation of all the roots of a given algebraic equation. </title> <journal> Phys.-Math. Journal, Bulgarian Academy of Science, </journal> <note> 5 (1962), 136-139 (in Bulgarian). </note>
Reference-contexts: The formulas were introduced much earlier, by Weierstrass in 1891 [20], but in another context related to the fundamental theorem of algebra. In 1962 Dochev <ref> [5] </ref> developed these formulas for the solution of polynomial equations. <p> This leads to a system of n linear equations for our z's. Kerner [12] followed this line of reasoning as well, but he also found analytic solutions for the system of linear equations, which turn out to be exactly the WDK formulas. (Dochev's approach <ref> [5] </ref> was altogether different, but led to the same formulas.) 3 For later purposes (Section 4) it is worth noting that the first of the n linear equa- tions for the z's is n X z j = j=1 so that the sum of the new approximations in each iteration, and
Reference: 6. <author> Durand, E. </author> <title> Solutions Numeriques des Equations Algebriques, Tome I ( Equations du Type F(x) = 0, Racines d'un polynome). </title> <publisher> Masson, </publisher> <address> Paris, </address> <year> 1960. </year>
Reference-contexts: In 1962 Dochev [5] developed these formulas for the solution of polynomial equations. Using a different approach, they were rediscovered by Kerner [12] in 1966. (In 1960 Durand <ref> [6] </ref> had taken an approach like Kerner's but did not carry it to the point of developing formulas in the closed form shown here.) We will refer to the formulas as the WDK formulas. <p> An earlier derivation was based on the fact that the roots of P (z) satisfy the fol lowing equations: n X r j = c n1 =c n ; j=1 k&gt;j . . . j=1 where the left sides are the elementary symmetric functions of the roots. Durand <ref> [6] </ref> took this approach, and proposed using Newton's method for solving this system of n non-linear equations for the r's. This leads to a system of n linear equations for our z's.
Reference: 7. <author> Freeman, T. L. </author> <title> Calculating polynomial zeros on a local memory parallel computer. </title> <journal> Parallel Comput. </journal> <volume> 12 (1989), </volume> <pages> 351-358. </pages>
Reference-contexts: The other feature is that the formulas are obviously well-suited to take advantage of a parallel environment. This aspect has been investigated by Freeman <ref> [7] </ref> and Freeman and Bane [8].
Reference: 8. <author> Freeman, T. L., and Bane, M. K. </author> <title> Asynchronous polynomial zero-finding algorithms. </title> <journal> Parallel Comput. </journal> <volume> 17 (1991), </volume> <pages> 673-681. </pages>
Reference-contexts: The other feature is that the formulas are obviously well-suited to take advantage of a parallel environment. This aspect has been investigated by Freeman [7] and Freeman and Bane <ref> [8] </ref>.
Reference: 9. <author> Harwell Subroutine Library. </author> <title> A catalogue of subroutines, </title> <address> Harwell, </address> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: In earlier work with Trevizan [19] and Solowiej [18], as well as in more recent comparisons we have made with rootfinding programs in the Harwell <ref> [9] </ref>, IMSL [10] and NAG [14] libraries, we have found programs based on these formulas to be both accurate and reliable but relatively quite slow. <p> There are no multiplicities to contend with here. The point is only to illustrate that the rootfinder can handle some quite challenging polynomials. We also did some comparisons with rootfinding programs in the Harwell <ref> [9] </ref>, IMSL [10] and NAG [14] libraries. As mentioned earlier, our experience has been that our rootfinder has almost always been at least as accurate and reliable, but is frequently slower, and sometimes much slower. 9.
Reference: 10. <editor> IMSL User's Manual. </editor> <booktitle> International Mathemetical and Statistical Libraries, </booktitle> <address> Houston, </address> <year> 1985. </year>
Reference-contexts: In earlier work with Trevizan [19] and Solowiej [18], as well as in more recent comparisons we have made with rootfinding programs in the Harwell [9], IMSL <ref> [10] </ref> and NAG [14] libraries, we have found programs based on these formulas to be both accurate and reliable but relatively quite slow. <p> There are no multiplicities to contend with here. The point is only to illustrate that the rootfinder can handle some quite challenging polynomials. We also did some comparisons with rootfinding programs in the Harwell [9], IMSL <ref> [10] </ref> and NAG [14] libraries. As mentioned earlier, our experience has been that our rootfinder has almost always been at least as accurate and reliable, but is frequently slower, and sometimes much slower. 9.
Reference: 11. <author> Jenkins, M. A., and Traub, J. F. </author> <title> Principles for testing polynomial zerofinding programs. </title> <journal> ACM Trans. Math. Softw. </journal> <volume> 1, 1 (1975), </volume> <pages> 26-34. </pages>
Reference-contexts: The results for this test problem are typical of what happened with a large number of test problems, including all of the test problems suggested by Jenkins and Traub <ref> [11] </ref>. one like the last (and very challenging) problems suggested by Jenkins and Traub.
Reference: 12. <author> Kerner, I. O. </author> <title> Ein Gesamtschrittfahren zur Berechnung der Nullstellen von Polynomen. </title> <journal> Numer. Math. </journal> <volume> 8 (1966), </volume> <pages> 290-294. </pages>
Reference-contexts: The formulas were introduced much earlier, by Weierstrass in 1891 [20], but in another context related to the fundamental theorem of algebra. In 1962 Dochev [5] developed these formulas for the solution of polynomial equations. Using a different approach, they were rediscovered by Kerner <ref> [12] </ref> in 1966. (In 1960 Durand [6] had taken an approach like Kerner's but did not carry it to the point of developing formulas in the closed form shown here.) We will refer to the formulas as the WDK formulas. <p> Durand [6] took this approach, and proposed using Newton's method for solving this system of n non-linear equations for the r's. This leads to a system of n linear equations for our z's. Kerner <ref> [12] </ref> followed this line of reasoning as well, but he also found analytic solutions for the system of linear equations, which turn out to be exactly the WDK formulas. (Dochev's approach [5] was altogether different, but led to the same formulas.) 3 For later purposes (Section 4) it is worth noting
Reference: 13. <author> Milovanovi c, G. V., and Petkovi c. </author> <title> On computational efficiency of the iterative methods for the simultaneous appriximation of polynomial zeros. </title> <journal> ACM Trans. Math. Softw. </journal> <volume> 12, 4 (1986), </volume> <pages> 295-306. </pages>
Reference-contexts: This aspect has been investigated by Freeman [7] and Freeman and Bane [8]. In a serial environment it is natural to consider a Gauss-Seidel modification, and there is some experimental evidence that this is helpful (e.g., see Milovanovic and Petkovic <ref> [13] </ref>), but our further analysis will assume the Jacobi approach directly implied by the formulas, and some of our results would not be valid if the Gauss-Seidel modification is used. 3.
Reference: 14. <author> NAG Fortran Library Manual, Mark 15A. </author> <title> Numerical Algorithms Group Ltd., </title> <publisher> Oxford, </publisher> <year> 1991. </year>
Reference-contexts: In earlier work with Trevizan [19] and Solowiej [18], as well as in more recent comparisons we have made with rootfinding programs in the Harwell [9], IMSL [10] and NAG <ref> [14] </ref> libraries, we have found programs based on these formulas to be both accurate and reliable but relatively quite slow. <p> There are no multiplicities to contend with here. The point is only to illustrate that the rootfinder can handle some quite challenging polynomials. We also did some comparisons with rootfinding programs in the Harwell [9], IMSL [10] and NAG <ref> [14] </ref> libraries. As mentioned earlier, our experience has been that our rootfinder has almost always been at least as accurate and reliable, but is frequently slower, and sometimes much slower. 9.
Reference: 15. <author> Pasquini, L., and Trigiante, D. </author> <title> A globally convergent method for simultaneously finding polynomial roots. </title> <journal> Math. Comp. </journal> <volume> 44, 169 (1985), </volume> <pages> 135-149. 15 </pages>
Reference-contexts: This kind of behavior, or something like it, has been observed experimentally by a number of authors, such as Aberth [1], Pasquini and Trigiante <ref> [15] </ref>, and Smith [17], and will be illustrated later (Section 8). Related results about the behavior of approximations near a multiple root have been given by Wilkinson [21, p.39]. Suppose we assume the approximations to a multiple root are distributed in such a manner.
Reference: 16. <author> Peters, G., and Wilkinson, J. H. </author> <title> Practical problems arising in the solution of polynomial equations. </title> <journal> J. Inst. Math. Appl. </journal> <volume> 8 (1971), </volume> <pages> 16-35. </pages>
Reference-contexts: We have experimented with these formulas for a number of years, using starting values distributed around a circle which is known to contain all the roots of the polynomial, and using stopping criteria similar what was proposed by Adams [4] and Peters and Wilkinson <ref> [16] </ref>. <p> Isolated discs correspond to simple roots. The others form clusters, which are identified, and the mean of each cluster is determined. To determine if convergence has occurred, the program can use a running error analysis (e.g., as in Adams [4] or Peters and Wilkinson <ref> [16] </ref>) to determine if, for each cluster of multiplicity m, the error bounds in evaluating the polynomial and its first m1 derivatives are greater than the corresponding calculated values of the polynomial and its derivatives. <p> A collection of approximate roots is identified as a cluster if the union of their discs form a continuous region which is disjoint from all the other discs. The test for convergence is based on the running error analysis described by Peters and Wilkinson <ref> [16] </ref>, but using Kahan's suggestion for reducing the number of operations [16, p.20]. Our test program has two special features. <p> The test for convergence is based on the running error analysis described by Peters and Wilkinson [16], but using Kahan's suggestion for reducing the number of operations <ref> [16, p.20] </ref>. Our test program has two special features.
Reference: 17. <author> Smith, B. T. </author> <title> Error bounds for zeros of a polynomial based upon Gerschgorin's theorems. </title> <journal> JACM 17, </journal> <volume> 4 (1970), </volume> <pages> 661-674. </pages>
Reference-contexts: This kind of behavior, or something like it, has been observed experimentally by a number of authors, such as Aberth [1], Pasquini and Trigiante [15], and Smith <ref> [17] </ref>, and will be illustrated later (Section 8). Related results about the behavior of approximations near a multiple root have been given by Wilkinson [21, p.39]. Suppose we assume the approximations to a multiple root are distributed in such a manner.
Reference: 18. <author> Solowiej, M. </author> <title> N-Dimensional Newton Method with Precision Control for Determining Roots of Complex Polynomials. M.Sc. </title> <type> thesis, </type> <institution> Dept. of Comp. Sc., Univ. of Toronto, </institution> <year> 1983. </year>
Reference-contexts: In earlier work with Trevizan [19] and Solowiej <ref> [18] </ref>, as well as in more recent comparisons we have made with rootfinding programs in the Harwell [9], IMSL [10] and NAG [14] libraries, we have found programs based on these formulas to be both accurate and reliable but relatively quite slow.
Reference: 19. <author> Trevizan, C. A. </author> <title> A Zero Finding Algorithm for Complex Polynomials. M.Sc. </title> <type> thesis, </type> <institution> Dept. of Comp. Sc., Univ. of Toronto, </institution> <year> 1977. </year>
Reference-contexts: In earlier work with Trevizan <ref> [19] </ref> and Solowiej [18], as well as in more recent comparisons we have made with rootfinding programs in the Harwell [9], IMSL [10] and NAG [14] libraries, we have found programs based on these formulas to be both accurate and reliable but relatively quite slow.
Reference: 20. <author> Weierstrasse, K. </author> <title> Neuer Beweis des Satzes, dass jede ganze rationale Function einer Veranderlichen dargestellt werden kann als ein Product aus linearen Functionen derselben Veranderlichen (1891). Ges. </title> <booktitle> Werke 3 (1903), </booktitle> <pages> 251-269. </pages>
Reference-contexts: Since the 1960's these formulas have been used by many persons as the basis of methods for calculating approximations to all the roots of a polynomial simultaneously. The formulas were introduced much earlier, by Weierstrass in 1891 <ref> [20] </ref>, but in another context related to the fundamental theorem of algebra. In 1962 Dochev [5] developed these formulas for the solution of polynomial equations.
Reference: 21. <author> Wilkinson, J. H. </author> <title> Rounding Errors in Algebraic Processes. </title> <publisher> Prentice-Hall, </publisher> <address> En-glewood Cliffs, N.J., </address> <year> 1963. </year> <month> 16 </month>
Reference-contexts: Related results about the behavior of approximations near a multiple root have been given by Wilkinson <ref> [21, p.39] </ref>. Suppose we assume the approximations to a multiple root are distributed in such a manner. Specifically, let us assume that, for 1 j m, z j = r + ffie (2j=m+ff)i (1 + O (*)); for some fixed ffi and ff.
References-found: 21

