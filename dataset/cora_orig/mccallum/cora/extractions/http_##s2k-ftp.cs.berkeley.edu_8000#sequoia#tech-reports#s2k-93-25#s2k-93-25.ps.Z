URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-93-25/s2k-93-25.ps.Z
Refering-URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-93-25/
Root-URL: http://www.cs.berkeley.edu
Title: TR-0222-10-92-165 DARWIN: On the Incremental Migration of Legacy Information Systems 1  C  
Author: Michael L. Brodie Michael Stonebraker S 
Date: March 1993  
Address: 40 Sylvan Road  Waltham, MA 02254 Berkeley, CA 94720  
Affiliation: GTE Laboratories, Inc. College of Engineering  University of California, Berkeley  
Pubnum: SE AI  
Abstract: 1 This report is the result of the DARWIN project initiated by Michael Stonebraker in 1991. It is also available as a Technical Memorandum of Electronics Research Laboratory, College of Engineering, University of California, Berkeley. This is an advanced version of a monograph to be published by Morgan Kaufmann Publishers in the first quarter of 1994. 
Abstract-found: 1
Intro-found: 1
Reference: [BREI90] <author> Breibart, Y. et al., </author> <title> Reliable Transaction Management in a Multi-database System, </title> <booktitle> Proc. 1990 ACM SIGMOD Conference on Management of Data, </booktitle> <address> Atlantic City, N.J., </address> <month> May </month> <year> 1990. </year>
Reference-contexts: However, most legacy database services do not support 2PC. To guarantee that the inter-database dependencies are maintained, 2PC can be hand coded into the application modules. This exotic and difficult workaround is described in <ref> [BREI90] </ref>. Alternatively, the user can decompose a distributed transaction into two transactions, each updating only one database. If either transaction fails to commit, application logic can perform a compensating transaction to return the database to a consistent state. Compensating transactions are discussed in [GARC87, WACH92].
Reference: [BROD92] <editor> Brodie, M.L. and S. Ceri, </editor> <booktitle> On Intelligent and Cooperative Information Systems,, International Journal of Intelligent and Cooperative Information Systems 1, </booktitle> <month> 3 Fall </month> <year> 1992. </year>
Reference-contexts: RESEARCH AGENDA There are few concepts and almost no adequate tools or techniques to support legacy IS migration. Those that exist do not scale up to meet the challenges posed in the design, development, maintenance, or evolution of large scale ISs <ref> [BROD92] </ref>. This section comments briefly on technologies and tools that could dramatically help the migration methods described above. Many of these suggestions require research. 8.1 Gateways Gateways are critical to all migration methods and architectures proposed in this paper. <p> It is not clear how to achieve this level of performance. Requirements for IS interaction (often misleadingly called IS integration) and distributed computing (e.g., clientserver) are growing dramatically. Gateways are a frequently proposed solution. Indeed, some proposals for next generation computing <ref> [OMG91a, OMG91b, MANO92, BROD92, BROD93] </ref> are based on gateways. Research is required to understand and develop generic gateway technology. There is an increasing number of ad hoc (i.e., for a small number of specific systems) gateway products currently with minimal functionality (e.g., no update coordination). <p> Although the motivating problems are critical and some of the results useful, most results and related products are almost completely inadequate in providing solutions to real design problems such as those posed by real legacy ISs <ref> [BROD92] </ref>. <p> We believe that in the future, ISs will interact cooperatively and intelligently, more like humans in organizations interact to accomplish tasks than is the case with currently independent ISs which we call intelligent and cooperative information systems (ICIS) <ref> [BROD92] </ref>. Although this vision goes far beyond that described above, it illustrates the presence of continual change and aspects of next generation ISs towards which current (legacy) ISs might be required to migrate. 52 9. CONCLUSIONS AND EPILOGUE Future IS technology should support continuous, iterative evolution. <p> However, it is often optimal not to rewrite portions of legacy ISs, sometimes impossible. Rather they should be integrated, transparently into the target distributed IS. Again, gateways are the primary means of such integration via interoperability (as described in <ref> [BROD93, BROD92, MANO92] </ref>) and treating them as attached systems. Objectorientation was not explicitly addressed in this paper, nor was it considered in detail in the CMS and TPS migration plans. However, we do not preclude objectorientation. Rather, it is a real alternative to conventional languages and designs.
Reference: [BROD93] <author> Brodie, </author> <title> M.L., The Promise of Distributed Computing and the Challenge of Legacy Inforamtion Systems, </title> <editor> in Hsiao, D., E.J. Neuhold, and R. Sacks Davis (eds.), </editor> <booktitle> Proc. IFIP TC2/WG2.6 Conference on Semantics of Interoperable Database Systems, </booktitle> <address> Lorne, Australia, November 1992, </address> <publisher> Elsevier North Holland, </publisher> <address> Amsterdam 1993. </address>
Reference-contexts: It is not clear how to achieve this level of performance. Requirements for IS interaction (often misleadingly called IS integration) and distributed computing (e.g., clientserver) are growing dramatically. Gateways are a frequently proposed solution. Indeed, some proposals for next generation computing <ref> [OMG91a, OMG91b, MANO92, BROD92, BROD93] </ref> are based on gateways. Research is required to understand and develop generic gateway technology. There is an increasing number of ad hoc (i.e., for a small number of specific systems) gateway products currently with minimal functionality (e.g., no update coordination). <p> This goal underlies application architectures (e.g., modularity, objectorientation) and next generation computing architectures, such as middleware <ref> [BROD93] </ref>. In this paper, we are attempting to contribute to the support of continuous evolution. We have proposed the Chicken Little strategy and a spectrum of supporting methods with which to migrate legacy ISs into advanced target environments. <p> However, it is often optimal not to rewrite portions of legacy ISs, sometimes impossible. Rather they should be integrated, transparently into the target distributed IS. Again, gateways are the primary means of such integration via interoperability (as described in <ref> [BROD93, BROD92, MANO92] </ref>) and treating them as attached systems. Objectorientation was not explicitly addressed in this paper, nor was it considered in detail in the CMS and TPS migration plans. However, we do not preclude objectorientation. Rather, it is a real alternative to conventional languages and designs.
Reference: [BROO75] <author> Brooks, F., </author> <title> The Mythical Man Month, </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Philippines, </address> <year> 1975. </year>
Reference-contexts: Few organizations are capable of managing the development of an IS with the several hundred contributors that are common for ISs of the size and complexity we are considering. Managing more and more people inevitably brings on the famous Brooks effect <ref> [BROO75] </ref> resulting in less and less useful work. Lateness is seldom tolerated. Large projects are inevitably late due to the problems cited above. Management patience wears out quickly, especially in organizations whose basic function is not software production. This frequently results in the termination of partly or mostly completed projects.
Reference: [DATE87] <author> Date, C., </author> <title> Selected Readings in Database Systems, </title> <publisher> Addison Wesley, </publisher> <address> Reading, Mass., </address> <year> 1987. </year>
Reference-contexts: For certain DBMSs, a general purpose forward database gateway can be built. In some cases, constructing a forward database gateway can be very complex due to the low-level legacy database service calls which may have semantics that are unimplementable in SQL. See <ref> [DATE87] </ref> for a discussion of this point in the context of IMS to SQL conversion. Such cases require a special purpose gateway that handles calls on a case-by-case basis. 7 There is currently a trend back to these ideas.
Reference: [ELMA92] <editor> Elmagarmid, A.K. (ed.), </editor> <title> Database Transaction Models For Advanced Applications, </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: This may require a two-phase commit (2PC) protocol [SKEE82] to be used by both the legacy and target DBMSs and by the gateway coordinator, as is done in distributed DBMSs <ref> [ELMA92, OZSU91] </ref>.
Reference: [GARC87] <author> Garcia-Molina, H., and Salem, K., Sagas, </author> <booktitle> Proc. 1987 ACM SIGMOD Conference on Management of Data, </booktitle> <address> San Francisco, </address> <month> June </month> <year> 1987. </year>
Reference-contexts: Alternatively, the user can decompose a distributed transaction into two transactions, each updating only one database. If either transaction fails to commit, application logic can perform a compensating transaction to return the database to a consistent state. Compensating transactions are discussed in <ref> [GARC87, WACH92] </ref>. Another alternative that alleviates the application programmers from such concerns is to develop distributed transaction support in the coordinator, based on existing and special purpose components (e.g., build the coordinator on the target DBMS that might also support distributed transactions).
Reference: [GOLD92] <author> Goldman, N. and K. Narayanaswamy, </author> <title> Software Evolution through Iterative Prototyping, </title> <booktitle> in Proceedings of the 14th International Conference on Software Engineering, </booktitle> <address> Melbourne, Australia, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: The incremental and iterative evolution of IS, as well as all other software, is being considered in many related areas such as software systems evolution [HUFF91] specifications, prototyping <ref> [GOLD92] </ref>, and objectoriented design and development. IS evolution and migration must be considered to be a dominate factor in IS life cycles.
Reference: [HUFF91] <author> Huff, K.E. and O.G. Selfridge, </author> <title> Evolution in Future Intelligent Information Systems, </title> <booktitle> Proceedings of the International Workshop on the Development of Intelligent Information Systems, </booktitle> <address> Niagara-on-the-Lake, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: The primary challenge facing IS and related support technology is the ability to accommodate change (e.g., in requirements, operation, content, function, interfaces, and engineering). The incremental and iterative evolution of IS, as well as all other software, is being considered in many related areas such as software systems evolution <ref> [HUFF91] </ref> specifications, prototyping [GOLD92], and objectoriented design and development. IS evolution and migration must be considered to be a dominate factor in IS life cycles.
Reference: [MANO92] <author> Manola, F., S. Heiler, D. Georgakopoulos, M. Hornick, </author> <title> and M.L. Brodie, Distributed Object Management, </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 1, 1, </volume> <month> April </month> <year> 1992. </year>
Reference-contexts: It is not clear how to achieve this level of performance. Requirements for IS interaction (often misleadingly called IS integration) and distributed computing (e.g., clientserver) are growing dramatically. Gateways are a frequently proposed solution. Indeed, some proposals for next generation computing <ref> [OMG91a, OMG91b, MANO92, BROD92, BROD93] </ref> are based on gateways. Research is required to understand and develop generic gateway technology. There is an increasing number of ad hoc (i.e., for a small number of specific systems) gateway products currently with minimal functionality (e.g., no update coordination). <p> However, it is often optimal not to rewrite portions of legacy ISs, sometimes impossible. Rather they should be integrated, transparently into the target distributed IS. Again, gateways are the primary means of such integration via interoperability (as described in <ref> [BROD93, BROD92, MANO92] </ref>) and treating them as attached systems. Objectorientation was not explicitly addressed in this paper, nor was it considered in detail in the CMS and TPS migration plans. However, we do not preclude objectorientation. Rather, it is a real alternative to conventional languages and designs.
Reference: [OMG91a] <author> Object Management Group, </author> <title> "The Common Object Request Broker: Architecture and Specification", OMG Document Number 91.12.1, Revision 1.1, </title> <month> December </month> <year> 1991. </year>
Reference-contexts: It is not clear how to achieve this level of performance. Requirements for IS interaction (often misleadingly called IS integration) and distributed computing (e.g., clientserver) are growing dramatically. Gateways are a frequently proposed solution. Indeed, some proposals for next generation computing <ref> [OMG91a, OMG91b, MANO92, BROD92, BROD93] </ref> are based on gateways. Research is required to understand and develop generic gateway technology. There is an increasing number of ad hoc (i.e., for a small number of specific systems) gateway products currently with minimal functionality (e.g., no update coordination).
Reference: [OMG91b] <institution> Object Management Group Object Model Task Force, </institution> <note> "The OMG Object Model, draft 0.9, OMG Document Number 91.9.1, September 3, </note> <year> 1991. </year> <title> [OZSU91] zsu, M.T. and P Valduriez, </title> <booktitle> Principles of Distributed Database Systems, </booktitle> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year> <month> 56 </month>
Reference-contexts: It is not clear how to achieve this level of performance. Requirements for IS interaction (often misleadingly called IS integration) and distributed computing (e.g., clientserver) are growing dramatically. Gateways are a frequently proposed solution. Indeed, some proposals for next generation computing <ref> [OMG91a, OMG91b, MANO92, BROD92, BROD93] </ref> are based on gateways. Research is required to understand and develop generic gateway technology. There is an increasing number of ad hoc (i.e., for a small number of specific systems) gateway products currently with minimal functionality (e.g., no update coordination).
Reference: [SILB91] <author> Silberschatz, A., M. Stonebraker, and J. Ullman (Eds.) </author> <title> Database Systems: Achievements and Opportunities, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 34, No. 10, </volume> <month> October </month> <year> 1991. </year>
Reference-contexts: An appropriately designed target IS architecture can facilitate future evolution and integration with other ISs. If the target IS in not appropriately designed, it will become a next generation legacy IS to be migrated at additional cost. One of the greatest contributions of database technology <ref> [SILB91] </ref> is data independence, the goal of insulating any changes to the database or to the applications from each other (i.e., ability to change one without affecting the other). We must now extend data independence to other aspects of ISs.
Reference: [SKEE82] <author> Skeen, D., </author> <title> Non-Blocking Commit Protocols, </title> <booktitle> Proc. 1982 ACM SIGMOD Conference on Management of Data, </booktitle> <address> Orlando, Fla., </address> <month> June </month> <year> 1982. </year>
Reference-contexts: The most challenging requirement for the coordinator is to ensure the inter-database dependencies for updates as well as for queries mixed with the updates. This may require a two-phase commit (2PC) protocol <ref> [SKEE82] </ref> to be used by both the legacy and target DBMSs and by the gateway coordinator, as is done in distributed DBMSs [ELMA92, OZSU91].
Reference: [WACH92] <author> Wachter, H., and Reuter, A., </author> <title> The Contract Model, in Transaction Models for Advanced Database Application, </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1982. </year>
Reference-contexts: Alternatively, the user can decompose a distributed transaction into two transactions, each updating only one database. If either transaction fails to commit, application logic can perform a compensating transaction to return the database to a consistent state. Compensating transactions are discussed in <ref> [GARC87, WACH92] </ref>. Another alternative that alleviates the application programmers from such concerns is to develop distributed transaction support in the coordinator, based on existing and special purpose components (e.g., build the coordinator on the target DBMS that might also support distributed transactions).
References-found: 15

