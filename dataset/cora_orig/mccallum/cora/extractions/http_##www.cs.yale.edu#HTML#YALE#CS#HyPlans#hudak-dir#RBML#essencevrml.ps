URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/hudak-dir/RBML/essencevrml.ps
Refering-URL: http://www.cs.yale.edu/HTML/YALE/CS/HyPlans/hudak-dir/RBML/
Root-URL: http://www.cs.yale.edu
Title: The Essence of ActiveVRML  
Author: Conal Elliott Paul Hudak 
Date: July 10, 1996  
Affiliation: Microsoft Corporation Graphics Research Group  Yale University Dept. of Computer Science  
Abstract: ActiveVRML is a modeling language being developed at Microsoft for high-performance, richly interactive, multimedia animations. It is highly declarative and has an ML-like syntax. The essence of ActiveVRML can be summarized in its treatment of temporal modeling, event modeling, declarative reactivity, and polymorphic media. To capture this essence we present a collection of richly expressive, recursively defined data types for behaviors and events, as well as "media types" like images, 3D geometry, sound, etc. We define a formal semantics for behaviors and events and illustrate their use via a series of examples. We then describe a method to efficiently and effectively perform event detection using interval analysis, and we relate that analysis to a partial information structure on a domain of event times.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Kavi Arya. </author> <title> A functional approach to animation. </title> <journal> Computer Graphics Forum, </journal> <volume> 5(4) </volume> <pages> 297-311, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: Examples include [8, 11, 15, 3, 7]. Arya used a lazy functional language to model 2D animation as lazy lists of pictures <ref> [1, 2] </ref>, constructed using list combinators. While this work was quite elegant, the use of lists implies a discrete model of time, which is somewhat unnatural. The TBAG system modeled 3D animations as functions over continuous time, using a "behavior" type family [5, 13].
Reference: [2] <author> Kavi Arya. </author> <title> A functional animation starter-kit. </title> <journal> Journal of Functional Programming, </journal> <volume> 4(1) </volume> <pages> 1-18, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Examples include [8, 11, 15, 3, 7]. Arya used a lazy functional language to model 2D animation as lazy lists of pictures <ref> [1, 2] </ref>, constructed using list combinators. While this work was quite elegant, the use of lists implies a discrete model of time, which is somewhat unnatural. The TBAG system modeled 3D animations as functions over continuous time, using a "behavior" type family [5, 13].
Reference: [3] <author> Joel F. Bartlett. </author> <title> Don't fidget with widgets, </title> <type> draw! Technical Report 6, </type> <institution> DEC Western Digital Laboratory, 250 University Avenue, Palo Alto, California 94301, US, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: The idea is to place bounds on the rate or acceleration of the positional input, and then make a worst-case analysis based on these bounds. 12 5 Related Work Several researchers have found that declarative languages well-suited for modeling pictures and 3D models. Examples include <ref> [8, 11, 15, 3, 7] </ref>. Arya used a lazy functional language to model 2D animation as lazy lists of pictures [1, 2], constructed using list combinators. While this work was quite elegant, the use of lists implies a discrete model of time, which is somewhat unnatural.
Reference: [4] <author> Conal Elliott. </author> <title> A brief introduction to ActiveVRML. </title> <type> Technical Report MSR-TR-96-05, </type> <institution> Microsoft Research, </institution> <year> 1996. </year> <note> http://www.research.microsoft.com/research/graphics/ elliott/ActiveVRML/BriefIntro.ps. </note>
Reference-contexts: The platform independence of the modeling approach facilitates the construction of mobile applications that are provably safe in World Wide Web applications. 1.2 The Essence of ActiveVRML ActiveVRML is a language and presentation engine being developed at Microsoft for high-performance, richly interactive, multimedia animations <ref> [4] </ref>. As a language it is highly declarative, has an ML-like syntax, and incorporates a unique treatment of time and reactivity. <p> The "media types" we often use with events and behaviors will be treated formally in a later paper. For now the reader can surmise their informal meanings from the explanations given below or refer to <ref> [4] </ref>. 2.1 Semantic Domains The abstract domain of time is called Time. The abstract domains of polymorphic behaviors (ff-behaviors) and polymorphic events (ff-events) are denoted Behavior ff and Event ff , respectively. Most of our domains (integers, booleans, etc.) are conventional, and require no explanation.
Reference: [5] <author> Conal Elliott, Greg Schechter, Ricky Yeung, and Salim Abi-Ezzi. TBAG: </author> <title> A high level framework for interactive, animated 3D graphics applications. </title> <editor> In Andrew Glassner, editor, </editor> <booktitle> Proceedings of SIGGRAPH '94 (Orlando, Florida), </booktitle> <pages> pages 421-434. </pages> <publisher> ACM Press, </publisher> <month> July </month> <year> 1994. </year>
Reference-contexts: While this work was quite elegant, the use of lists implies a discrete model of time, which is somewhat unnatural. The TBAG system modeled 3D animations as functions over continuous time, using a "behavior" type family <ref> [5, 13] </ref>. These behaviors are built up via combinators that are automatically invoked during solution of high level constraints. Because it used continuous time, TBAG was able to support derivatives and integrals. It also used the idea of elevating functions on static values into functions on behaviors, which we adopted.
Reference: [6] <author> John Peterson et. al. </author> <title> Haskell 1.3: A non-strict, purely functional language. </title> <type> Technical Report YALEU/DCS/RR-1106, </type> <institution> Department of Computing Science, Yale University, </institution> <month> May </month> <year> 1996. </year> <note> World Wide Web version at http://haskell.cs.yale.edu/haskell-report. </note>
Reference-contexts: Moreover, we have found that non-strict semantics, higher-order functions, strong polymorphic typing, and systematic overloading are valuable language properties for supporting modeled animations. For these reasons, we have experimented with these data types by embedding them into the programming language Haskell <ref> [6] </ref>, and aside from the formal semantics, we present all examples as Haskell programs.
Reference: [7] <author> Sigbjorn Finne and Simon Peyton Jones. </author> <title> Pictures: A simple structured graphics model. </title> <booktitle> In Glasgow Functional Programming Workshop, </booktitle> <address> Ullapool, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: The idea is to place bounds on the rate or acceleration of the positional input, and then make a worst-case analysis based on these bounds. 12 5 Related Work Several researchers have found that declarative languages well-suited for modeling pictures and 3D models. Examples include <ref> [8, 11, 15, 3, 7] </ref>. Arya used a lazy functional language to model 2D animation as lazy lists of pictures [1, 2], constructed using list combinators. While this work was quite elegant, the use of lists implies a discrete model of time, which is somewhat unnatural.
Reference: [8] <author> Peter Henderson. </author> <title> Functional geometry. </title> <booktitle> In ACM Symposium on LISP and Functional Programming, </booktitle> <pages> pages 179-187, </pages> <year> 1982. </year>
Reference-contexts: The idea is to place bounds on the rate or acceleration of the positional input, and then make a worst-case analysis based on these bounds. 12 5 Related Work Several researchers have found that declarative languages well-suited for modeling pictures and 3D models. Examples include <ref> [8, 11, 15, 3, 7] </ref>. Arya used a lazy functional language to model 2D animation as lazy lists of pictures [1, 2], constructed using list combinators. While this work was quite elegant, the use of lists implies a discrete model of time, which is somewhat unnatural.
Reference: [9] <author> P. Hudak, T. Makucevich, S. Gadde, and B. Whong. </author> <title> Haskore music notation an algebra of music. </title> <journal> Journal of Functional Programming, </journal> <volume> 6(3), </volume> <month> June </month> <year> 1996. </year> <note> available via ftp://nebula.systemsz.cs.yale.edu/pub/yale-fp/papers/haskore/hmn-lhs.ps. </note>
Reference-contexts: That is, expressions are evaluated without side-effects to yield concurrent, imperative computations, which are executed to perform the implied side-effects. In contrast, modeling entire behaviors as implicitly concurrent functions of continuous time yields what we consider a more declarative feel. "Haskore" <ref> [9] </ref> is a purely functional approach to constructing, analyzing, and performing computer music.
Reference: [10] <author> Simon Peyton Jones, Andrew Gordon, and Sigbjorn Finne. </author> <title> Concurrent Haskell. </title> <booktitle> In ACM Symposium on the Principles of Programming Languages, </booktitle> <address> St. Petersburg Beach, Florida, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: In contrast, our events are used purely for the values they generate. These values often turn out to be behaviors, although they can also be new events, tuples, functions, etc. "Concurrent Haskell" <ref> [10] </ref> extends the pure lazy functional programming language Haskell with a small set of primitives for explicit concurrency, designed around Haskell's monadic support for I/O. In Concurrent Haskell, processes are explicitly spawned and can communicate with one another via typed synchronization variables.
Reference: [11] <author> Peter Lucas and Stephen N. Zilles. </author> <title> Graphics in an Applicative Context. </title> <type> Technical report, </type> <institution> IBM Almaden Research Center, </institution> <address> 650 Harry Road, San Jose, CA 95120-6099, </address> <month> July 8 </month> <year> 1987. </year>
Reference-contexts: The idea is to place bounds on the rate or acceleration of the positional input, and then make a worst-case analysis based on these bounds. 12 5 Related Work Several researchers have found that declarative languages well-suited for modeling pictures and 3D models. Examples include <ref> [8, 11, 15, 3, 7] </ref>. Arya used a lazy functional language to model 2D animation as lazy lists of pictures [1, 2], constructed using list combinators. While this work was quite elegant, the use of lists implies a discrete model of time, which is somewhat unnatural.
Reference: [12] <author> John H. Reppy. </author> <title> CML: A higher-order concurrent language. </title> <booktitle> Proceedings of the ACM SIG-PLAN'91 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 293-305, </pages> <year> 1991. </year>
Reference-contexts: It also used the idea of elevating functions on static values into functions on behaviors, which we adopted. Unlike our approach, however, reactivity was handled imperatively, through constraint assertion and retraction, performed by an application program. John Reppy's "CML" (Concurrent ML) formalized synchronous operations as first-class, purely functional, values <ref> [12] </ref>, which he called "events". Our event combinators ".|." and "==&gt;" correspond to Reppy's choose and wrap functions. There are substantial differences, however, between the meaning given to "events" in these two languages.
Reference: [13] <author> Greg Schechter, Conal Elliott, Ricky Yeung, and Salim Abi-Ezzi. </author> <title> Functional 3D graphics in C++ with an object-oriented, </title> <booktitle> multiple dispatching implementation. In Proceedings of the 1994 Eurographics Object-Oriented Graphics Workshop. Eurographics, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: While this work was quite elegant, the use of lists implies a discrete model of time, which is somewhat unnatural. The TBAG system modeled 3D animations as functions over continuous time, using a "behavior" type family <ref> [5, 13] </ref>. These behaviors are built up via combinators that are automatically invoked during solution of high level constraints. Because it used continuous time, TBAG was able to support derivatives and integrals. It also used the idea of elevating functions on static values into functions on behaviors, which we adopted.
Reference: [14] <author> John M. Snyder. </author> <title> Interval analysis for computer graphics. </title> <editor> In Edwin E. Catmull, editor, </editor> <booktitle> Computer Graphics (SIGGRAPH '92 Proceedings), </booktitle> <volume> volume 26, </volume> <pages> pages 121-130, </pages> <month> July </month> <year> 1992. </year> <month> 14 </month>
Reference-contexts: Unfortunately, except for very simple examples, equations cannot be solved symbolically. The technique we use to detect predicate events is interval analysis (IA), and lies somewhere between sampling and symbolic solution <ref> [14] </ref>. It uses more information from a behavior than can be extracted purely through sampling, but it does not require symbolic equation solving.
Reference: [15] <author> S.N. Zilles, P. Lucas, T.M. Linden, J.B. Lotspiech, and A.R. Harbury. </author> <title> The Escher document imaging model. </title> <booktitle> In Proceedings of the ACM Conference on Document Processing Systems (Santa Fe, </booktitle> <address> New Mexico), </address> <pages> pages 159-168, </pages> <month> December 5-9 </month> <year> 1988. </year>
Reference-contexts: The idea is to place bounds on the rate or acceleration of the positional input, and then make a worst-case analysis based on these bounds. 12 5 Related Work Several researchers have found that declarative languages well-suited for modeling pictures and 3D models. Examples include <ref> [8, 11, 15, 3, 7] </ref>. Arya used a lazy functional language to model 2D animation as lazy lists of pictures [1, 2], constructed using list combinators. While this work was quite elegant, the use of lists implies a discrete model of time, which is somewhat unnatural.
References-found: 15

