URL: http://charm.cs.uiuc.edu/manuals/devs.ps.gz
Refering-URL: http://charm.cs.uiuc.edu/manuals/
Root-URL: http://www.cs.uiuc.edu
Title: Distributed Simulation of DEVS-Based Multiformalism Models  
Author: Herbert Praehofer and Gernot Reisinger 
Address: A-4040 Linz, Austria  
Affiliation: Institute of Systems Science Systems Theory and Information Engineering Johannes Kepler University Linz  
Abstract: In this paper we introduce a new approach for parallel, distributed simulation of modular, hierarchical DEVS and DEVS-based combined discrete/continuous multiformalism models. The algorithm combines conservative and optimistic distributed simulation strategies and is able to optimally exploit lookahead capabilities of the model. The object oriented implementation in C++ is intended to serve as a powerful simulator in the STIMS modeling and simulation environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K.M. Chandy and J. Misra. </author> <title> Distributed simulation: A case study in design and verification of distributed systems. </title> <journal> IEEE Trans on Software Eng., </journal> <volume> 5 </volume> <pages> 440-452, </pages> <year> 1979. </year>
Reference-contexts: In their seminal work, Chandy and Misra introduced basic concepts for conservative distributed simulation <ref> [1, 2] </ref>. They defined causality requirements for correct distributed execution of events and schemes to fulfill those. Deadlocks which can occur are either recovered by a deadlock recovery scheme or avoided by special synchronization messages so-called null-messages. Our conservative mechanisms is based on those ideas.
Reference: [2] <author> K.M. Chandy and J. Misra. </author> <title> Asynchroneous distributed simulation via a sequence of parallel computations. </title> <journal> Comm. ACM, </journal> <volume> 11 </volume> <pages> 198-205, </pages> <month> Nov </month> <year> 1981. </year>
Reference-contexts: In their seminal work, Chandy and Misra introduced basic concepts for conservative distributed simulation <ref> [1, 2] </ref>. They defined causality requirements for correct distributed execution of events and schemes to fulfill those. Deadlocks which can occur are either recovered by a deadlock recovery scheme or avoided by special synchronization messages so-called null-messages. Our conservative mechanisms is based on those ideas.
Reference: [3] <author> E. R. Christensen and B. P. Zeigler. </author> <title> Hierarchical, distributed, object oriented and knowledge based simulation. </title> <booktitle> In 8th Military Operations Research Society Symposium, Annapolis, </booktitle> <address> MD, </address> <year> 1990. </year> <institution> US Naval Academy. </institution>
Reference-contexts: One variant for the global control mechanism is based on computation of earliest input time estimates in the same way as in our scheme. Our scheme also has been influenced by former efforts to parallelize simulation of DEVS models. Christensen <ref> [3] </ref> has implemented a DEVS simulator in Ada and the Time Warp operating system. Recently a new distributed simulation algorithm for networks of Sparse Output DEVS has been introduced [12]. Sparse Output DEVS are DEVS where outputs occur infrequently. Simulator processes synchronize at output times with their superior coordinator.
Reference: [4] <author> B. A. Cota and R. G. Sargent. </author> <title> Automatic looka-hed computation for conservative distributed simulation. </title> <type> Technical report, </type> <institution> CASE Center, Syracuse University, Syracuse, </institution> <address> NY, </address> <year> 1989. </year>
Reference-contexts: A centralized scheduler is used to make deadlock detection trivial and deadlock breaking inexpensive. A similar approach for parallel simulation on shared memory multiprocessors with special emphasis on exploitation of dynamic lookahead has been developed by Cota and Sargent <ref> [4] </ref>. Optimistic distributed simulation has been introduced by Jefferson [9]. Our optimistic algorithm differs from the Time Warp approach as it does not send messages to other processors optimistically.
Reference: [5] <author> E. DeBenedictus, S Ghosh, and M.-L-Yu. </author> <title> A novel algorithm for discrete event simulation. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 21-33, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Several variations of the Chandy-Misra approach have been developed. These new schemes try to exploit lookahead capabilities of the models extensively. Notable impact to our research has had the Bounded Lag Algorithm of Lubachevsky [13], the global window synchronization scheme of Nicol [14, 15], the Yaddes algorithm <ref> [5] </ref>, and the shared memory implementation of Wagner, Lazowska, and Bershad [22]. Lubachevsky's algorithm is synchronous which, with every synchronization cycle, computes input time estimates for each simulator process based on minimum propagation delays static lookahead assumptions - and opaque periods dynamic lookahead. <p> The global window synchronization algorithm [14, 15] is another synchronous algorithm which tries to exploit static and dynamic lookahead capabilities to define global time windows during which event processing is safe. Similar to our scheme the algorithms 4 is tailored for low grained parallelism. The Yaddes algorithm <ref> [5] </ref> uses a dataflow network to compute input time estimates to guarantee safe event processing. The algorithm in particular is tailored for network models which have a lot of feedback loops, like digital logic models, and therefore are difficult to parallelize using Chandy-Misra or Time Warp.
Reference: [6] <author> P. Dickens and P. Reynolds. </author> <title> A performance model for parallel simulation. </title> <booktitle> In Proc of the 1991 Winter Simulation Conference, </booktitle> <pages> pages 618-626, </pages> <address> San Diego, 1991. </address> <publisher> SCS. </publisher>
Reference-contexts: Our optimistic algorithm differs from the Time Warp approach as it does not send messages to other processors optimistically. Therefore, it is a riskfree optimistic scheme related to the Breathing Time Buckets algorithm of Steinman [20] and the approach of Dickens and Reynolds <ref> [6] </ref>. Riskfree optimistic schemes do not require antimessages to annihilate incorrect messages. Rollback is kept simple. Rollback in our scheme is kept local to the process and therefore can be done in an efficient way similar to [8].
Reference: [7] <author> A. Geist et al. </author> <title> PVM 3 user's guide and reference manual. </title> <type> Technical Report ORNL/TM/12187, </type> <institution> Oak Ridge National Laboratory, Oak Ridge, </institution> <address> Ten-nessee 37831, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: define internal couplings IC () - proc.out -&gt; bus.pin; bus.pout -&gt; proc.in; bus.mout -&gt; mem.in; mem.out -&gt; bus.min; // define external output couplings EOC () - proc.out -&gt; pout; mem.out -&gt; mout; - -; 4.2 Parallel Simulator using PVM The parallel simulation system is implemented using PVM (Parallel Virtual Machine) <ref> [7] </ref>. PVM is a defacto standard message passing library designed for heterogeneous environments and supports a wide range of hardware platforms. For parallel simulation, additionally to specifying the modular hierarchical model, the simulationist is responsible for decomposing the whole model into several clusters to run on different processors.
Reference: [8] <author> R. M. Fujimoto. </author> <title> Time warp on a shared memory multiprocessor. </title> <journal> Transaction of the Society of Computer Simulation, </journal> <volume> 6(3) </volume> <pages> 211-239, </pages> <year> 1990. </year>
Reference-contexts: Riskfree optimistic schemes do not require antimessages to annihilate incorrect messages. Rollback is kept simple. Rollback in our scheme is kept local to the process and therefore can be done in an efficient way similar to <ref> [8] </ref>. Our approach also differs from other optimistic schemes in the way fossil collection is done. Most optimistic schemes base the fossil collection on the Global Virtual Time (GVT) which is the minimum of the event times in the system.
Reference: [9] <author> D. Jefferson and H. Sowizral. </author> <title> Fast concurrent simulation using the time warp mechanism. </title> <booktitle> In Proc of the SCS Distributed Simulation Conf., </booktitle> <pages> pages 63-69, </pages> <address> San Diego, </address> <year> 1985. </year> <institution> Society of Computer Simulation. </institution>
Reference-contexts: A centralized scheduler is used to make deadlock detection trivial and deadlock breaking inexpensive. A similar approach for parallel simulation on shared memory multiprocessors with special emphasis on exploitation of dynamic lookahead has been developed by Cota and Sargent [4]. Optimistic distributed simulation has been introduced by Jefferson <ref> [9] </ref>. Our optimistic algorithm differs from the Time Warp approach as it does not send messages to other processors optimistically. Therefore, it is a riskfree optimistic scheme related to the Breathing Time Buckets algorithm of Steinman [20] and the approach of Dickens and Reynolds [6].
Reference: [10] <author> V. Jha and R. L. Bagrodia. </author> <title> A unified framework for conservative and optimistic distributed simulation. </title> <booktitle> In Proc of the 8th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> pages 12-19, </pages> <address> Edin-burgh, 1994. </address> <publisher> SCS. </publisher>
Reference-contexts: Our approach takes the earliest input time of each component as a better estimate. Strong similarities of our approach exist to the ADAPT system recently introduced by Jha and Bagrodia <ref> [10] </ref>. ADAPT is a simulation protocol which combines conservative and optimistic strategies. It distinguishes a local control mechanism and a global control mechanism and provides different variants of those which can be combined freely.
Reference: [11] <author> T. G. Kim and S. Park. </author> <title> The DEVS formalism: Hierarchical modular system specification in C++. </title> <booktitle> In Proc. 1992 European Simulation Mulit-conf., </booktitle> <pages> pages 152-156, </pages> <address> York, UK, 1992. </address> <publisher> SCS. </publisher>
Reference-contexts: We base our research on the DEVS approach to discrete event modeling and simulation. Several implementations of DEVS-based modeling and simulation concepts have been done <ref> [23, 21, 18, 11] </ref>. The STIMS modeling and simulation environment [18] is a CommonLisp based general purpose environment also allowing combined discrete/continuous mod-elling and simulation.The DEVS extension to combined discrete/continuous modeling introduced in [16] provides system theoretic modeling formalisms for modular, hierarchical combined modeling.
Reference: [12] <author> C. Liao, A. Motaabbed, D. Kim, and B.P. Zei-gler. </author> <title> Distributed simulation algorithms for sparce output devs. </title> <booktitle> In Proc. of AI, Simulation and Planning in High-Autonomy Systems, </booktitle> <address> Tucson AZ, </address> <month> Sept </month> <year> 1993. </year> <note> IEEE/CS Press. 7 </note>
Reference-contexts: That means that continuous states might have to be rolled back in the case a straggler input event from another process occurs. However, optimistic integration should have a high potential in several applications (as in Sparse Output DEVS <ref> [12] </ref>). 3 Relation to Other Distributed Simu lation Protocols The simulation protocol introduced above came into being by gathering many ideas emerged in the past 15 years of distributed simulation research. In their seminal work, Chandy and Misra introduced basic concepts for conservative distributed simulation [1, 2]. <p> Our scheme also has been influenced by former efforts to parallelize simulation of DEVS models. Christensen [3] has implemented a DEVS simulator in Ada and the Time Warp operating system. Recently a new distributed simulation algorithm for networks of Sparse Output DEVS has been introduced <ref> [12] </ref>. Sparse Output DEVS are DEVS where outputs occur infrequently. Simulator processes synchronize at output times with their superior coordinator. It is riskfree optimistic with local rollback only. 4 Object Oriented Implementation The modeling formalism and the parallel simulation concepts described above are implemented using C++ and PVM.
Reference: [13] <author> B. D. Lubachevsky. </author> <title> Efficient distributed event--driven simulations of multiple loop networks. </title> <journal> Comm of the ACM, </journal> <volume> 32(1) </volume> <pages> 111-131, </pages> <year> 1989. </year>
Reference-contexts: Several variations of the Chandy-Misra approach have been developed. These new schemes try to exploit lookahead capabilities of the models extensively. Notable impact to our research has had the Bounded Lag Algorithm of Lubachevsky <ref> [13] </ref>, the global window synchronization scheme of Nicol [14, 15], the Yaddes algorithm [5], and the shared memory implementation of Wagner, Lazowska, and Bershad [22].
Reference: [14] <author> D. Nicol. </author> <title> Performance bounds on paralel self-initiating discrete-event simulations. </title> <journal> ACM Trans. on Modelling and Computer Simulation, </journal> <volume> 1(1) </volume> <pages> 24-50, </pages> <year> 1991. </year>
Reference-contexts: The scheme has proven to avoid causality violations [17]. The output times estimates eot i;op for component i are computed exploiting lookahead capabilities of the 2 model. In case only static lookahead <ref> [14] </ref>, i.e., minimum time delays d i;ip;op between input at port ip and outputs at port op of components i, are known, the output times for a particular output port op can be derived by eot i;op = minftn i ; min ip feit i;ip + d i;ip;op gg where tn <p> For such a scheme of computation of the output times we proved that the simulation does not deadlock under the constraint that in every feedback loop there is at least one component with a minimum time delay d i;ip;op strictly greater than zero [17]. Dynamic lookahead <ref> [14] </ref> is lookahead computed based on the current state of the component. <p> Several variations of the Chandy-Misra approach have been developed. These new schemes try to exploit lookahead capabilities of the models extensively. Notable impact to our research has had the Bounded Lag Algorithm of Lubachevsky [13], the global window synchronization scheme of Nicol <ref> [14, 15] </ref>, the Yaddes algorithm [5], and the shared memory implementation of Wagner, Lazowska, and Bershad [22]. Lubachevsky's algorithm is synchronous which, with every synchronization cycle, computes input time estimates for each simulator process based on minimum propagation delays static lookahead assumptions - and opaque periods dynamic lookahead. <p> To limit the overhead needed to compute the input time estimates, the bounded lag restriction bounds the difference in the local simulation times of all simulator processes from above by a known finite constant B. The global window synchronization algorithm <ref> [14, 15] </ref> is another synchronous algorithm which tries to exploit static and dynamic lookahead capabilities to define global time windows during which event processing is safe. Similar to our scheme the algorithms 4 is tailored for low grained parallelism.
Reference: [15] <author> D. Nicol and S. Roy. </author> <title> Parallel simulation of timed petri nets. </title> <booktitle> In Proc. of the 1991 Winter Simulation Conference, </booktitle> <pages> pages 574-583, </pages> <address> San Diego, </address> <month> Dec </month> <year> 1991. </year> <pages> SCS. </pages>
Reference-contexts: Several variations of the Chandy-Misra approach have been developed. These new schemes try to exploit lookahead capabilities of the models extensively. Notable impact to our research has had the Bounded Lag Algorithm of Lubachevsky [13], the global window synchronization scheme of Nicol <ref> [14, 15] </ref>, the Yaddes algorithm [5], and the shared memory implementation of Wagner, Lazowska, and Bershad [22]. Lubachevsky's algorithm is synchronous which, with every synchronization cycle, computes input time estimates for each simulator process based on minimum propagation delays static lookahead assumptions - and opaque periods dynamic lookahead. <p> To limit the overhead needed to compute the input time estimates, the bounded lag restriction bounds the difference in the local simulation times of all simulator processes from above by a known finite constant B. The global window synchronization algorithm <ref> [14, 15] </ref> is another synchronous algorithm which tries to exploit static and dynamic lookahead capabilities to define global time windows during which event processing is safe. Similar to our scheme the algorithms 4 is tailored for low grained parallelism.
Reference: [16] <author> H. Praehofer. </author> <title> System Theoretic Foundations for Combined Discrete-Continuous System Simulation. </title> <type> PhD thesis, </type> <institution> Johannes Kepler University of Linz, Linz, Austria, </institution> <year> 1991. </year>
Reference-contexts: Several implementations of DEVS-based modeling and simulation concepts have been done [23, 21, 18, 11]. The STIMS modeling and simulation environment [18] is a CommonLisp based general purpose environment also allowing combined discrete/continuous mod-elling and simulation.The DEVS extension to combined discrete/continuous modeling introduced in <ref> [16] </ref> provides system theoretic modeling formalisms for modular, hierarchical combined modeling. STIMS is a fully integrated, interactive environment organized into several layers which are targeted to model development, simulation execution, and simulation data analysis. It provides an approach for visual interactive specification of atomic and coupled DEVS-based models [19].
Reference: [17] <author> H. Praehofer. </author> <title> Distributed discrete event simulation. </title> <type> Technical Report TR-93-1, </type> <institution> Dept of Systems Theory, Johanens Kepler University, Linz, Aus-tria, </institution> <month> Jan </month> <year> 1993. </year>
Reference-contexts: Obviously, an event in a component j with event time t smaller than eit j is safe to process. Additionally, a simulation process can process all events whose event time is smaller than the external input time estimate xeit p . The scheme has proven to avoid causality violations <ref> [17] </ref>. The output times estimates eot i;op for component i are computed exploiting lookahead capabilities of the 2 model. <p> For such a scheme of computation of the output times we proved that the simulation does not deadlock under the constraint that in every feedback loop there is at least one component with a minimum time delay d i;ip;op strictly greater than zero <ref> [17] </ref>. Dynamic lookahead [14] is lookahead computed based on the current state of the component. <p> Object oriented programming is employed to ease simulation modeling and make distributed simulation transparent to the user. The simulation protocol currently is under development. Although the simulation protocol is well defined and the correctness of the conservative strategy has formally been proved <ref> [17] </ref>, there are still several alternatives which will effect the performance of the simulator. One open question is, when and how often the input event estimates should be communicated to other processors, another, how far in time an optimistically executing processor should advance.
Reference: [18] <author> H. Praehofer, F. Auernig, and G. Reisinger. </author> <title> An environment for DEVS-based multiformalims simulation in Common Lisp / CLOS. Discrete Event Dynamic Systems: Theory and Application, </title> <booktitle> 3(2) </booktitle> <pages> 119-149, </pages> <year> 1993. </year>
Reference-contexts: We base our research on the DEVS approach to discrete event modeling and simulation. Several implementations of DEVS-based modeling and simulation concepts have been done <ref> [23, 21, 18, 11] </ref>. The STIMS modeling and simulation environment [18] is a CommonLisp based general purpose environment also allowing combined discrete/continuous mod-elling and simulation.The DEVS extension to combined discrete/continuous modeling introduced in [16] provides system theoretic modeling formalisms for modular, hierarchical combined modeling. <p> We base our research on the DEVS approach to discrete event modeling and simulation. Several implementations of DEVS-based modeling and simulation concepts have been done [23, 21, 18, 11]. The STIMS modeling and simulation environment <ref> [18] </ref> is a CommonLisp based general purpose environment also allowing combined discrete/continuous mod-elling and simulation.The DEVS extension to combined discrete/continuous modeling introduced in [16] provides system theoretic modeling formalisms for modular, hierarchical combined modeling. <p> However, if no continuous but only discrete couplings exist between different model parts, these model parts can be integrated independently and only have to be synchronized at event times. In the same way as the sequential simulation scheme <ref> [18] </ref> identifies different numerical clusters where numerical clusters are only coupled through events, the parallel simulation scheme employs numerical clusters. Numerical clusters can be integrated in parallel only communicating and synchronizing at event times. In the current work we focus on this type of parallelism in numerical integration. <p> modeling concepts, then some critical points in the realization of the parallel algorithm using PVM, and finally advantages of various hardware platforms. 4.1 DEVS-Based Modeling in C++ A major design decision in the realization of the modeling formalisms was that, in distinction to other implementations like DEVS-Scheme [23] or STIMS <ref> [18] </ref>, atomic models are defined by class definitions and not by instances of formalism classes. This has the advantage that the concepts of object oriented programming, like information hiding, inheritance, and polymorphism, are ready to use for simulation modeling.
Reference: [19] <author> H. Praehofer and D. Pree. </author> <title> Visual modeling of DEVS-based multiformalism systems based on Higraphs. </title> <booktitle> In Proc. 1993 Winter Simulation Conf., </booktitle> <pages> pages 595-603, </pages> <address> Los Angeles, CA, </address> <month> Dec </month> <year> 1993. </year> <pages> SCS. </pages>
Reference-contexts: STIMS is a fully integrated, interactive environment organized into several layers which are targeted to model development, simulation execution, and simulation data analysis. It provides an approach for visual interactive specification of atomic and coupled DEVS-based models <ref> [19] </ref>. In the research project presented here we will realize an object oriented implementation of DEVS-based models in C++ and a distributed simulation protocol. We introduce a new distributed simulation algorithm for DEVS-based models and discuss its object oriented implementation. The algorithm combines conservative and optimistic strategies.
Reference: [20] <author> J. Steinman. SPEEDES: </author> <title> a unified framework to parallel simulation. </title> <booktitle> In Proc of the 6th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> pages 75-83, </pages> <year> 1992. </year>
Reference-contexts: Optimistic distributed simulation has been introduced by Jefferson [9]. Our optimistic algorithm differs from the Time Warp approach as it does not send messages to other processors optimistically. Therefore, it is a riskfree optimistic scheme related to the Breathing Time Buckets algorithm of Steinman <ref> [20] </ref> and the approach of Dickens and Reynolds [6]. Riskfree optimistic schemes do not require antimessages to annihilate incorrect messages. Rollback is kept simple. Rollback in our scheme is kept local to the process and therefore can be done in an efficient way similar to [8].
Reference: [21] <author> C. Thomas. </author> <title> Hierarchical object nets ameth-odology for graphical modeling of discrete event systems. </title> <booktitle> In Proc. 1993 Winter Simulation Conf., </booktitle> <pages> pages 650-656, </pages> <address> Los Angeles, CA, </address> <month> Dec </month> <year> 1993. </year>
Reference-contexts: We base our research on the DEVS approach to discrete event modeling and simulation. Several implementations of DEVS-based modeling and simulation concepts have been done <ref> [23, 21, 18, 11] </ref>. The STIMS modeling and simulation environment [18] is a CommonLisp based general purpose environment also allowing combined discrete/continuous mod-elling and simulation.The DEVS extension to combined discrete/continuous modeling introduced in [16] provides system theoretic modeling formalisms for modular, hierarchical combined modeling.
Reference: [22] <author> D. Wagner, E. Lazowska, and B. Bershad. </author> <title> Techniques for efficient shared-memory parallel simulation. </title> <booktitle> In Distributed Simulation 1989, </booktitle> <pages> pages 29-37. </pages> <publisher> SCS Press, </publisher> <year> 1989. </year>
Reference-contexts: These new schemes try to exploit lookahead capabilities of the models extensively. Notable impact to our research has had the Bounded Lag Algorithm of Lubachevsky [13], the global window synchronization scheme of Nicol [14, 15], the Yaddes algorithm [5], and the shared memory implementation of Wagner, Lazowska, and Bershad <ref> [22] </ref>. Lubachevsky's algorithm is synchronous which, with every synchronization cycle, computes input time estimates for each simulator process based on minimum propagation delays static lookahead assumptions - and opaque periods dynamic lookahead. <p> The algorithm in particular is tailored for network models which have a lot of feedback loops, like digital logic models, and therefore are difficult to parallelize using Chandy-Misra or Time Warp. Wagner, Lazowska, and Bershad <ref> [22] </ref> improved the basic Chandy-Misra approach for implementation on a shared memory multiprocessor. Access to states of other processes through shared memory is exploited to compute better estimates of earliest input times.
Reference: [23] <author> B. P. Zeigler. </author> <title> Object-Oriented Simulation with Hierarchical, Modular Models. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1990. </year> <month> 8 </month>
Reference-contexts: 1 Introduction and Motivation The DEVS modeling and simulation <ref> [23] </ref> approach is an attractive alternative to conventional message-based modeling approaches used in distributed simulation. <p> We base our research on the DEVS approach to discrete event modeling and simulation. Several implementations of DEVS-based modeling and simulation concepts have been done <ref> [23, 21, 18, 11] </ref>. The STIMS modeling and simulation environment [18] is a CommonLisp based general purpose environment also allowing combined discrete/continuous mod-elling and simulation.The DEVS extension to combined discrete/continuous modeling introduced in [16] provides system theoretic modeling formalisms for modular, hierarchical combined modeling. <p> implementation of the modeling concepts, then some critical points in the realization of the parallel algorithm using PVM, and finally advantages of various hardware platforms. 4.1 DEVS-Based Modeling in C++ A major design decision in the realization of the modeling formalisms was that, in distinction to other implementations like DEVS-Scheme <ref> [23] </ref> or STIMS [18], atomic models are defined by class definitions and not by instances of formalism classes. This has the advantage that the concepts of object oriented programming, like information hiding, inheritance, and polymorphism, are ready to use for simulation modeling.
References-found: 23

