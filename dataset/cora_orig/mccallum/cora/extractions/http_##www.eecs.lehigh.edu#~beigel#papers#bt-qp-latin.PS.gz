URL: http://www.eecs.lehigh.edu/~beigel/papers/bt-qp-latin.PS.gz
Refering-URL: http://www.cs.umd.edu/projects/hcil/Research/1995/dq-for-eosdis.html
Root-URL: 
Email: beigel@eecs.lehigh.edu  egemen@cs.umd.edu  
Phone: 2  
Title: The Geometry of Browsing  
Author: Richard Beigel and Egemen Tanin 
Address: Dr W Ste 2, Bethlehem, PA 18015-3084, USA  College Park, MD 20742-3251, USA  
Affiliation: 1 Lehigh University, Dept. of EE&CS, 19 Memorial  University of Maryland, Human-Computer Interaction Laboratory,  
Abstract: We present a geometric counting problem that arises in browsing and solve it in constant time per query using nonexhaustive tables. On the other hand, we prove that several closely related problems require exhaustive tables, no matter how much time we allow per query. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Ahlberg, C. and Shneiderman, B., </author> <title> Visual Information Seeking: Tight Coupling of Dynamic Query Filters with Starfield Displays, </title> <booktitle> Proc. ACM SIGCHI (1994) 313-317 </booktitle>
Reference-contexts: The background for interfaces to EOSDIS is discussed further on the web at [6]. 1.2 What are Dynamic Queries? Dynamic queries are an interface paradigm that allow the user to interactively control query parameters and generate a rapidly animated visual display of 2 Beigel and Tanin database search results <ref> [1, 2, 5, 7, 8, 10-13, 15, 16] </ref>. As users adjust sliders or buttons, results are updated nearly continuously on the display. Each adjustment to a slider and each button click is called a query. The answer to the query is presented graphically. <p> Since the query pre-viewer is a dynamic-query interface, updates should ideally appear to be continuous. Studies suggest that most users will in fact tolerate a delay of at most 0.1 or 0.2 seconds per update <ref> [1] </ref>. Since even this is much slower than typical worldwide-web turnaround, it is necessary that the aforementioned table be stored on the user's own node. Thus, disk-space limitations and download times both dictate that the table not be very large; 1 megabyte seems like a good rule of thumb. <p> If i j, let #[i; j] denote the number of elements of D contained in the interval [i; j]. Then #[i; j] is equal to the number of elements of D (that intersect <ref> [1; n] </ref>) minus the number of elements of D that intersect fj + 1; : : : ; n; 1; : : : ; i 1g, so we can compute #[i; j] from T .
Reference: 2. <author> Ahlberg, C. and Wistrand, E., IVEE: </author> <title> An Information Visualization and Exploration Environment, </title> <booktitle> Proc. IEEE Info. Vis., </booktitle> <year> (1995) </year> <month> 66-73 </month>
Reference-contexts: The background for interfaces to EOSDIS is discussed further on the web at [6]. 1.2 What are Dynamic Queries? Dynamic queries are an interface paradigm that allow the user to interactively control query parameters and generate a rapidly animated visual display of 2 Beigel and Tanin database search results <ref> [1, 2, 5, 7, 8, 10-13, 15, 16] </ref>. As users adjust sliders or buttons, results are updated nearly continuously on the display. Each adjustment to a slider and each button click is called a query. The answer to the query is presented graphically. <p> Each adjustment to a slider and each button click is called a query. The answer to the query is presented graphically. Experimental results have shown that dynamic queries are a fast, effective, fun, and easy-to-use tool for novice and expert users to find trends and spot exceptions <ref> [2, 16] </ref>. Dynamic query user interfaces apply the principles of direct manipulation to query formulation and provide: a visual representation of the query and the results, rapid, incremental, and reversible actions, selection by pointing (not typing), and immediate and continuous display of results.
Reference: 3. <author> Bestul, T., </author> <title> Parallel paradigms and practices for spatial data, </title> <type> Ph.D. Thesis, </type> <institution> Univ. Maryland Dept. Comp. Sci., TR-2897, </institution> <year> (1992) </year>
Reference-contexts: Let dim (r) denote the dimension of a rectangle. If we stored (1) ddim (c) #(c) for each unit cube c, then we could compute the sum specified in Equation (1) by summing over each unit cube contained in Q. Better yet, as noted in <ref> [3] </ref>, if we store d-dimensional prefix sums, we can evaluate that sum in constant time. For each unit cube a we store P ba (1) ddim (b) #(b), where the inequality must hold on every coordinate.
Reference: 4. <author> Doan, K., Plaisant, C., and Shneiderman, B., </author> <title> Query Previews in Networked Information Systems, </title> <booktitle> Proc. Forum Adv. Digit. Libr., IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> (1996) </year> <month> 120-129 </month>
Reference-contexts: This would not only slow down the process of finding datasets, but would slow down the network and servers for all users. Query previews, as developed in <ref> [4] </ref>, take advantage of the fact that in many cases, perhaps most, users are only interested in a small subset of the entire collection. For example, a user might only be interested in data for Europe, instead of the whole world.
Reference: 5. <author> Eick, S., </author> <title> Data Visualization Sliders, </title> <journal> Proc. User Interf. Softw. Techn. </journal> <year> (1994) </year> <month> 119-120 </month>
Reference-contexts: The background for interfaces to EOSDIS is discussed further on the web at [6]. 1.2 What are Dynamic Queries? Dynamic queries are an interface paradigm that allow the user to interactively control query parameters and generate a rapidly animated visual display of 2 Beigel and Tanin database search results <ref> [1, 2, 5, 7, 8, 10-13, 15, 16] </ref>. As users adjust sliders or buttons, results are updated nearly continuously on the display. Each adjustment to a slider and each button click is called a query. The answer to the query is presented graphically.
Reference: 6. <author> HCIL, </author> <note> http://www.cs.umd.edu/projects/hcil/Research/1995/dq-for-eosdis.html </note>
Reference-contexts: HCIL is developing user interfaces that use the "dynamic query" paradigm and the "query preview" paradigm to facilitate the browsing and retrieval of data from this very large archive. The background for interfaces to EOSDIS is discussed further on the web at <ref> [6] </ref>. 1.2 What are Dynamic Queries? Dynamic queries are an interface paradigm that allow the user to interactively control query parameters and generate a rapidly animated visual display of 2 Beigel and Tanin database search results [1, 2, 5, 7, 8, 10-13, 15, 16].
Reference: 7. <author> Fishkin, K. and Stone, M. C., </author> <title> Enhanced Dynamic Queries via Movable Filters, </title> <booktitle> Proc. ACM SIGCHI (1995) 415-420 </booktitle>
Reference-contexts: The background for interfaces to EOSDIS is discussed further on the web at [6]. 1.2 What are Dynamic Queries? Dynamic queries are an interface paradigm that allow the user to interactively control query parameters and generate a rapidly animated visual display of 2 Beigel and Tanin database search results <ref> [1, 2, 5, 7, 8, 10-13, 15, 16] </ref>. As users adjust sliders or buttons, results are updated nearly continuously on the display. Each adjustment to a slider and each button click is called a query. The answer to the query is presented graphically.
Reference: 8. <author> Goldstein, J. and Roth, S. F., </author> <title> Using Aggregation and Dynamic Queries for Exploring Large Data Sets, </title> <booktitle> Proc. ACM SIGCHI (1994) 23-29 </booktitle>
Reference-contexts: The background for interfaces to EOSDIS is discussed further on the web at [6]. 1.2 What are Dynamic Queries? Dynamic queries are an interface paradigm that allow the user to interactively control query parameters and generate a rapidly animated visual display of 2 Beigel and Tanin database search results <ref> [1, 2, 5, 7, 8, 10-13, 15, 16] </ref>. As users adjust sliders or buttons, results are updated nearly continuously on the display. Each adjustment to a slider and each button click is called a query. The answer to the query is presented graphically.
Reference: 9. <author> Harary, F., </author> <title> Graph Theory, </title> <publisher> Addison-Wesley (1969) </publisher>
Reference-contexts: Let F k (S) denote the number of k-dimensional faces of S and let F fl k (S) denote the number of k-dimensional faces interior to S. Lemma 2. If S is a bounded, connected d-dimensional polytope then X (1) F fl Proof. By Euler's theorem (see, for example, <ref> [9] </ref>), X (1) F k (S) = 1 + (1) : 6 Beigel and Tanin Let B denote the boundary of S.
Reference: 10. <author> HCIL, ftp://ftp.cs.umd.edu/pub/hcil/Demos/DQ/dq-home.zip. </author> <title> Down-loadable PC demo </title>
Reference-contexts: Dynamic query user interfaces apply the principles of direct manipulation to query formulation and provide: a visual representation of the query and the results, rapid, incremental, and reversible actions, selection by pointing (not typing), and immediate and continuous display of results. Some demos of dynamic queries are available from <ref> [10, 12] </ref>. 1.3 What are Query Previews? In a networked information system, there are three major obstacles facing users in a querying process: slow network performance, large data volume, and data complexity. EOSDIS has all of these. The collection is predicted to reach into the petabytes (10 15 bytes).
Reference: 11. <author> Ioannidis, Y., </author> <title> Dynamic Information Visualization, </title> <journal> ACM SIGMOD Rec., </journal> <note> 25 (1996) 16-20 10 Beigel and Tanin </note>
Reference: 12. <institution> Information Visualization and Exploration Environment (IVEE) Development AB, </institution> <note> http://www.ivee.com/. Online Java demo and down-loadable demos for various platforms </note>
Reference-contexts: Dynamic query user interfaces apply the principles of direct manipulation to query formulation and provide: a visual representation of the query and the results, rapid, incremental, and reversible actions, selection by pointing (not typing), and immediate and continuous display of results. Some demos of dynamic queries are available from <ref> [10, 12] </ref>. 1.3 What are Query Previews? In a networked information system, there are three major obstacles facing users in a querying process: slow network performance, large data volume, and data complexity. EOSDIS has all of these. The collection is predicted to reach into the petabytes (10 15 bytes).
Reference: 13. <author> Shneiderman, B., </author> <title> Dynamic Queries for Visual Information Seeking, </title> <journal> IEEE Softw., </journal> <month> 11 </month> <year> (1994) </year> <month> 70-77 </month>
Reference: 14. <author> Shneiderman, B., </author> <title> Racing to the winning line with visual data mining, </title> <address> http://www.ivee.com/corporate/columns/race.html </address>
Reference-contexts: 1 Introduction In this paper we address some algorithmic problems that arise in connection with browsing a really large collection of datasets. The interface paradigms we present have been developed and user-tested as part of the visual data mining effort (cf. <ref> [14] </ref>) at the Human-Computer Interaction Laboratory (HCIL) in the University of Maryland. The target application is the EOSDIS collection of datasets in development by the U.S.
Reference: 15. <author> Tanin, E., Beigel, R., and Shneiderman, B., </author> <title> Incremental Data Structures and Algorithms for Dynamic Query Interfaces, </title> <booktitle> ACM SIGMOD Rec., </booktitle> <month> 25 </month> <year> (1996) </year> <month> 21-24 </month>
Reference-contexts: The background for interfaces to EOSDIS is discussed further on the web at [6]. 1.2 What are Dynamic Queries? Dynamic queries are an interface paradigm that allow the user to interactively control query parameters and generate a rapidly animated visual display of 2 Beigel and Tanin database search results <ref> [1, 2, 5, 7, 8, 10-13, 15, 16] </ref>. As users adjust sliders or buttons, results are updated nearly continuously on the display. Each adjustment to a slider and each button click is called a query. The answer to the query is presented graphically.
Reference: 16. <author> Williamson, C. and Shneiderman, B., </author> <title> The Dynamic HomeFinder: Evaluating Dynamic Queries in a Real-Estate Information Exploration System, </title> <booktitle> Proc. ACM SIGIR (1992) 339-346 </booktitle>
Reference-contexts: The background for interfaces to EOSDIS is discussed further on the web at [6]. 1.2 What are Dynamic Queries? Dynamic queries are an interface paradigm that allow the user to interactively control query parameters and generate a rapidly animated visual display of 2 Beigel and Tanin database search results <ref> [1, 2, 5, 7, 8, 10-13, 15, 16] </ref>. As users adjust sliders or buttons, results are updated nearly continuously on the display. Each adjustment to a slider and each button click is called a query. The answer to the query is presented graphically. <p> Each adjustment to a slider and each button click is called a query. The answer to the query is presented graphically. Experimental results have shown that dynamic queries are a fast, effective, fun, and easy-to-use tool for novice and expert users to find trends and spot exceptions <ref> [2, 16] </ref>. Dynamic query user interfaces apply the principles of direct manipulation to query formulation and provide: a visual representation of the query and the results, rapid, incremental, and reversible actions, selection by pointing (not typing), and immediate and continuous display of results.
References-found: 16

