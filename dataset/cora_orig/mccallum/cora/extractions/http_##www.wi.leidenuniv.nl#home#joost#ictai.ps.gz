URL: http://www.wi.leidenuniv.nl/home/joost/ictai.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/home/joost/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: elena@cwi.nl  max@math.unipd.it  joost@cs.leidenuniv.nl  
Phone: 2  3  
Title: Forward-Tracking: A Technique for Searching Beyond Failure  
Author: Elena Marchiori ; Massimo Marchiori Joost N. Kok 
Address: P.O. Box 94079, 1090 GB Amsterdam (NL)  via Belzoni 7, 35131 Padova (I)  P.O. Box 9512, 2300 RA Leiden (NL)  
Affiliation: 1 CWI  University of Padova  University of Leiden  
Abstract: In many applications, such as decision support, negotiation, planning, scheduling, etc., one needs to express requirements that can only be partially satisfied. In order to express such requirements, we propose a technique called forward-tracking. Intuitively, forward-tracking is a kind of dual of chronological back-tracking: if a program globally fails to find a solution, then a new execution is started from a program point and a state `forward' in the computation tree. This search technique is applied to constraint logic programming, obtaining a powerful extension that preserves all the useful properties of the original scheme. We report on the successful practical application of forward-tracking to the evolutionary training of (constrained) neural networks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Borning, B. Freeman-Benson, and M. Wilson. </author> <title> Constraint hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5 </volume> <pages> 223-270, </pages> <year> 1992. </year>
Reference-contexts: This design approach is illustrated in a practical application (Section 6), namely the training of constrained neural networks. We turn now to the relation of our proposal to previous work. Related work includes Hierarchical Constraint Solving and the corresponding Hierarchical Constraint Logic Programming (HCLP) systems (see e.g. <ref> [1, 9] </ref>). In these schemes, constraints hierarchies are used in order to express preferences as well as requirements among constraints. Intuitively, the constraints used in the problem are labeled by means of preferences, which express the strengths of the constraints. <p> Consider the set FTP of ft-points that can `reach' (via &lt; F ) a separation point, i.e., the points such that &lt; F i (for some i 2 <ref> [1; n 1] </ref>). From each of these points we can jump to the `nearest' (w.r.t. &lt; F ) separation point, by means of a function characterized as follows. <p> From each of these points we can jump to the `nearest' (w.r.t. &lt; F ) separation point, by means of a function characterized as follows. Proposition 5.2 For every 2 FTP there is a unique number () 2 <ref> [1; n] </ref> such that &lt; F -() , and if () &gt; 1 then ffi F -()1 . Then J S is defined by 8 2 FTP : J S () = -() . It can be proven that J S is a jump function respecting the forward ordering.
Reference: [2] <author> M.S. Fox. </author> <title> Constraint-Directed Search: A Case Study of Job-Shop Scheduling. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: Finally, forward-tracking, in its dynamic version (Subsection 5.3), allows to give preferences among constraints that are created during the execution of the program (i.e. `temporal' priorities), which is not possible in the hierarchical constraint solving paradigm. Other related work concerns the relaxation of constraints in case of conflicts (e.g. <ref> [3, 2] </ref>). Recently, in order to discard failed subproblems in a constraint satisfaction problem, [4] introduced a method that dynamically discards failed subproblems during forward checking search.
Reference: [3] <editor> E.C. Freuder and R.J. Wallace. </editor> <title> Partial constraint satisfaction. </title> <journal> Artificial Intelligence, </journal> <volume> 65 </volume> <pages> 363-376, </pages> <year> 1992. </year>
Reference-contexts: Finally, forward-tracking, in its dynamic version (Subsection 5.3), allows to give preferences among constraints that are created during the execution of the program (i.e. `temporal' priorities), which is not possible in the hierarchical constraint solving paradigm. Other related work concerns the relaxation of constraints in case of conflicts (e.g. <ref> [3, 2] </ref>). Recently, in order to discard failed subproblems in a constraint satisfaction problem, [4] introduced a method that dynamically discards failed subproblems during forward checking search.
Reference: [4] <editor> E.C. Freuder and P.D. Hubbe. </editor> <title> Extracting constraint satisfaction subproblems. </title> <booktitle> In IJCAI'95, </booktitle> <pages> pp. 548-555. </pages>
Reference-contexts: Other related work concerns the relaxation of constraints in case of conflicts (e.g. [3, 2]). Recently, in order to discard failed subproblems in a constraint satisfaction problem, <ref> [4] </ref> introduced a method that dynamically discards failed subproblems during forward checking search. This techniques can be successfully integrated with forward-tracking for constraint logic programming since the latter, as said, is a search technique that works on top of a constraint solver. 2.
Reference: [5] <author> S. Haykin. </author> <title> Neural Networks, A Comprehensive Foundation. </title> <publisher> Macmillan, </publisher> <year> 1994. </year>
Reference-contexts: Neural networks have been used in many applications, for example in planning, control, content-addressable memory, optimization, constraint satisfaction, and classification (see e.g. <ref> [5] </ref>). They are being promoted for their robustness, massive parallelism, and ability to learn.
Reference: [6] <author> J. Jaffar and M.J. Maher. </author> <title> Constraint logic programming: A survey. </title> <journal> J. of Logic Programming, </journal> <volume> 19,20:503-581, </volume> <year> 1994. </year>
Reference-contexts: These situations include for instance conflicting requirements, over-constrained problems, partial knowledge problems, prioritized reasoning and so on. In this paper we apply forward-tracking to constraint logic programming (cf. <ref> [6] </ref>), a general scheme that allows one to express in a declarative way reasoning in the presence of constraints. We investigate semi-automatic and (almost) fully-automatic methods for computing forward-trackings. <p> Forward-Tracking for CLP In this section we introduce a formalization of forward-tracking for the CLP paradigm (cf. <ref> [6] </ref>), and provide a sufficient condition for the correctness of a forward-tracking. In the operational model we introduce, the PROLOG left-to-right selection rule is assumed.
Reference: [7] <author> J.N. Kok, E. Marchiori, M. Marchiori, and C. Rossi. </author> <title> Constraining of weights using regularities. </title> <booktitle> In European Symp. on Artificial Neural Networks (ESANN'96), </booktitle> <pages> pp. 267-272. </pages>
Reference-contexts: The idea is to develop suitable constraints (via a CLP) that avoid multiple representations of individuals, and then performing an evolutionary training of the neural network by using only chromosomes satisfying these constraints. In <ref> [7] </ref> the study of regularities of the error function has revealed that single regularities are in some cases solvable: for example when the network has a single (hidden) layer.
Reference: [8] <author> J.N. Kok, E. Marchiori, M. Marchiori, and C. Rossi. </author> <title> Evolutionary training of clp-constrained neural networks. </title> <booktitle> In Int. Conf. on the Practical Application of Constraint Technology (PACT'96), </booktitle> <pages> pp. 129-142. </pages>
Reference-contexts: In order to solve the competing conventions problem, a novel approach has been introduced in <ref> [8] </ref>. The idea is to develop suitable constraints (via a CLP) that avoid multiple representations of individuals, and then performing an evolutionary training of the neural network by using only chromosomes satisfying these constraints.
Reference: [9] <author> F. Menezes and P. Barahona. </author> <title> Defeasible constraint solving. </title> <booktitle> In CP'95 post-workshop on over-constrained systems, </booktitle> <year> 1995. </year>
Reference-contexts: This design approach is illustrated in a practical application (Section 6), namely the training of constrained neural networks. We turn now to the relation of our proposal to previous work. Related work includes Hierarchical Constraint Solving and the corresponding Hierarchical Constraint Logic Programming (HCLP) systems (see e.g. <ref> [1, 9] </ref>). In these schemes, constraints hierarchies are used in order to express preferences as well as requirements among constraints. Intuitively, the constraints used in the problem are labeled by means of preferences, which express the strengths of the constraints.
Reference: [10] <author> Z. Michalewicz. </author> <title> Genetic Algorithms + Data Structures = Evolution Programs. </title> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Then the obtained constraints and the optimization function are given as input to a GA system, that searches for an optimal solution that satisfies the constraints. We have used the CLP system ECL i PS e (ECRC Common Logic Programming System) and the GA system GENOCOP <ref> [10] </ref> (GEnetic algorithm for Numerical Optimization for COnstrained Problems). Since the weights are real numbers, and they are constrained, a natural choice is to employ a system that can handle constraints and where the data are encoded using real numbers, instead of the original bit-encoding.
Reference: [11] <author> I. Sommerville. </author> <title> Software Engineering. </title> <publisher> Addison-Wesley, </publisher> <address> Fourth Edition, </address> <year> 1992. </year>
Reference-contexts: From a software engineering point of view, forward-tracking supports software reusability (cf. <ref> [11] </ref>). This was illustrated in the application we have considered, where programs developed to solve a particular case (one regularity, one layer) have been re-used almost without modifications, obtaining a system able to cope with the general case of neural networks.
References-found: 11

