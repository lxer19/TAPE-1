URL: http://www.cs.washington.edu/homes/rgrimm/research/papers/access.ps
Refering-URL: http://www.cs.washington.edu/homes/rgrimm/research/papers.html
Root-URL: 
Email: frgrimm, bershadg@cs.washington.edu  
Title: Access Control in Extensible Systems  
Author: Robert Grimm Brian N. Bershad 
Note: This research was sponsored by the Advanced Research Projects Agency, the National Science Foundation and by an equipment grant from Digital Equipment Corporation. Grimm was partially supported by a fellowship from the Microsoft Corporation. Bershad was partially supported by a National Science Foundation Presidential Faculty Fellowship and an Office of Naval Research Young Investigator Award.  
Address: Seattle, WA 98195, U.S.A. UW-CSE-97-11-01  
Affiliation: Dept. of Computer Science and Engineering University of Washington  
Abstract: The recent trend towards dynamically extensible systems holds the promise of more powerful and flexible systems. At the same time, the impact of extensibility on overall system security and, specifically, access control is still ill understood, and protection mechanisms in these extensible systems are rudimentary at best. In this paper, we identify the structure of extensible systems as it relates to system security, and present an access control mechanism that is user-friendly and complete. The mechanism, by using ideas first introduced by the security community, offers mandatory access control which can be used to enforce a given security policy. Additional discretionary access control allows users to express their own fine-grained access constraints. We introduce a new access mode, called the extend access mode, in addition to the familiar execute access mode, to reflect how extensions interact. Furthermore, in a departure from work in the security community, we treat both extensions and threads of control as subjects, i.e., as active entities, in order to correctly capture their interaction in an extensible system. We present the design of the access control mechanism and define a formal model. We describe an implementation of the access control mechanism in the SPIN extensible operating system, which allows us to evaluate its performance and to explore optimizations that reduce the overhead of access control. The measured end-to-end overhead of access control in our system is less than 2%. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Stanley R. Ames, Jr., Morrie Gasser, and Roger R. Schell. </author> <title> Security Kernel Design and Implementation: An Introduction. </title> <journal> Computer, </journal> <volume> 16(7) </volume> <pages> 14-22, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: Furthermore, it can be easily subverted and is thus not complete: an often cited example is the so-called "Trojan horse" attack <ref> [1, 11, 10] </ref> where an application appears legitimate but in fact also carries out some illicit action. Mandatory access control as a method of enforcing a given security policy has been developed within the security establishment of the United States.
Reference: [2] <author> Lee Badger, Karen A. Oostendorp, Wayne G. Mor-rison, Kenneth M. Walker, Christopher D. Vance, David L. Sherman, and Daniel F. Sterne. </author> <title> DTE Firewalls|Initial Measurement and Evaluation Report. </title> <type> Technical Report 0632R, </type> <institution> Trusted Information Systems, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: An efficient implementation is especially important for extensible systems which support fine-grained composition primarily for reasons of performance. The access control mechanism presented in this paper draws on ideas explored by the security community and provides non-discretionary (mandatory) access control based on domain and type enforcement (DTE) <ref> [3, 4, 2] </ref>. DTE associates all entities in a system with a label that represents an entity's privileges and access constraints. The label for subjects (i.e., the active entities in a system) is called a domain, and the label for objects (i.e., the passive entities) is called a type. <p> They also introduce the notion of changing a subject's label (on invocation of a program) to provide for a controlled way of changing privilege. This model is later expanded by Badger et al. <ref> [3, 4, 2] </ref>, who introduce a high-level language, called domain and type enforcement language, to express security policies, and who also apply DTE on the Unix operating system. <p> Our call-time optimizations have eliminated most call-time access checks, and we see a minimal end-to-end overhead for access control. It is difficult to compare these results to those reported for DTE in Unix by Badger et al. <ref> [2] </ref> and for DTE in Mach by Minear [31], since their performance data is inconclusive. Badger et al. report a small performance improvement for some network operations (since DTE eliminates the need for re-authentication), but also a 13% worst-case overhead for FTP and a factor two slowdown for HTTP.
Reference: [3] <author> Lee Badger, Daniel F. Sterne, David L. Sherman, Ken-neth M. Walker, and Sheila A. Haghighat. </author> <title> Practical Domain and Type Enforcement for UNIX. </title> <booktitle> In Proceed-igns of the 1995 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 66-77, </pages> <address> Oakland, California, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: An efficient implementation is especially important for extensible systems which support fine-grained composition primarily for reasons of performance. The access control mechanism presented in this paper draws on ideas explored by the security community and provides non-discretionary (mandatory) access control based on domain and type enforcement (DTE) <ref> [3, 4, 2] </ref>. DTE associates all entities in a system with a label that represents an entity's privileges and access constraints. The label for subjects (i.e., the active entities in a system) is called a domain, and the label for objects (i.e., the passive entities) is called a type. <p> They also introduce the notion of changing a subject's label (on invocation of a program) to provide for a controlled way of changing privilege. This model is later expanded by Badger et al. <ref> [3, 4, 2] </ref>, who introduce a high-level language, called domain and type enforcement language, to express security policies, and who also apply DTE on the Unix operating system. <p> Trusted extensions can then be used to implement the user interface to the basic access control mechanism and to support high-level abstractions such as DTEL, the domain and type enforcement language <ref> [3, 4] </ref>. 4.2 Call-Time Access Control Call-time access control determines whether a given thread can call the interfaces of a given extension. In T calls an interface in extension B from within extension A.
Reference: [4] <author> Lee Badger, Daniel F. Sterne, David L. Sherman, Ken-neth M. Walker, and Sheila A. Haghighat. </author> <title> A Domain and Type Enforcement UNIX Prototype. </title> <booktitle> In Proceedings of the Fifth USENIX UNIX Security Symposium, </booktitle> <pages> pages 127-140, </pages> <address> Salt Lake City, Utah, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: An efficient implementation is especially important for extensible systems which support fine-grained composition primarily for reasons of performance. The access control mechanism presented in this paper draws on ideas explored by the security community and provides non-discretionary (mandatory) access control based on domain and type enforcement (DTE) <ref> [3, 4, 2] </ref>. DTE associates all entities in a system with a label that represents an entity's privileges and access constraints. The label for subjects (i.e., the active entities in a system) is called a domain, and the label for objects (i.e., the passive entities) is called a type. <p> Mandatory access control policies allow an organization to define its security terms, and provide no path by which an individual can circumvent security. As security is generally first an organizational, and then an individual, concern, mandatory access control policies have become increasingly important <ref> [11, 9, 4] </ref>. Domain and type enforcement is mandatory in the sense that it is imposed on all relevant system operations and can only be changed by the security administrator. <p> They also introduce the notion of changing a subject's label (on invocation of a program) to provide for a controlled way of changing privilege. This model is later expanded by Badger et al. <ref> [3, 4, 2] </ref>, who introduce a high-level language, called domain and type enforcement language, to express security policies, and who also apply DTE on the Unix operating system. <p> Trusted extensions can then be used to implement the user interface to the basic access control mechanism and to support high-level abstractions such as DTEL, the domain and type enforcement language <ref> [3, 4] </ref>. 4.2 Call-Time Access Control Call-time access control determines whether a given thread can call the interfaces of a given extension. In T calls an interface in extension B from within extension A.
Reference: [5] <author> D. Elliott Bell and Leonard J. La Padula. </author> <title> Secure Computer System: Unified Exposition and Multics Interpretation. </title> <type> Technical Report MTR-2997 Rev. 1, </type> <institution> The MITRE Corporation, Bedford, Massachusetts, </institution> <month> March </month> <year> 1976. </year> <note> Also ADA023588, National Technical Information Service. </note>
Reference-contexts: Mandatory access control as a method of enforcing a given security policy has been developed within the security establishment of the United States. Most work in this context is based on a lattice of subject and object labels that implicitly defines legal types of operations <ref> [5, 13, 7] </ref> and that has become part of the Department of Defense's standard for trusted computer systems [14].
Reference: [6] <author> Brian N. Bershad, Stefan Savage, Przemys law Pardyak, Emin Gun Sirer, Marc Fiuczynski, David Becker, Susan Eggers, and Craig Chambers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th Symposium on Operating Systems Principles, </booktitle> <pages> pages 267-284, </pages> <address> Copper Mountain, Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Dynamically extensible systems can provide applications, and ultimately users, with new and better functionality as well as better performance. Motivated by this promise of more power and more flexibility, several projects are pursuing system designs that are extensible by their very design: SPIN <ref> [6] </ref> and VINO [37] address extensibility in the context of operating systems. Inferno [26] focuses on extensibility for distributed services. The Java system [22, 19, 24] provides an infrastructure for executable content on the world-wide web.
Reference: [7] <author> K. J. Biba. </author> <title> Integrity Considerations for Secure Computer Systems. </title> <type> Technical Report MTR-3153 Rev. 1, </type> <institution> The MITRE Corporation, Bedford, Massachusetts, </institution> <month> April </month> <year> 1977. </year> <note> Also ADA039324, National Technical Information Service. </note>
Reference-contexts: Mandatory access control as a method of enforcing a given security policy has been developed within the security establishment of the United States. Most work in this context is based on a lattice of subject and object labels that implicitly defines legal types of operations <ref> [5, 13, 7] </ref> and that has become part of the Department of Defense's standard for trusted computer systems [14].
Reference: [8] <author> W. E. Boebert and R. Y. Kain. </author> <title> A Practical Alternative to Hierarchical Integrity Policies. </title> <booktitle> In Proceedings of the 17th National Computer Security Conference, </booktitle> <pages> pages 18-27, </pages> <address> Gaithersburg, Maryland, </address> <year> 1985. </year>
Reference-contexts: And, it only supports two different access modes, namely read and write [25, 11, 23, 9, 28]. The idea of domain and type enforcement as a more flexible and user-friendly alternative to the lattice model is first developed by Boebert and Kain <ref> [8] </ref>. They introduce the domain and type labels that represent an entity's privileges and access constraints and the access matrix that explicitly and concisely lists all legal access modes.
Reference: [9] <author> David F. C. Brewer and Michael J. Nash. </author> <title> The Chinese Wall Security Policy. </title> <booktitle> In Proceedings of the 1989 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 206-214, </pages> <address> Oakland, California, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Mandatory access control policies allow an organization to define its security terms, and provide no path by which an individual can circumvent security. As security is generally first an organizational, and then an individual, concern, mandatory access control policies have become increasingly important <ref> [11, 9, 4] </ref>. Domain and type enforcement is mandatory in the sense that it is imposed on all relevant system operations and can only be changed by the security administrator. <p> The lattice model, while precise, is not very intuitive or user-friendly since access modes are implicit. It is not very flexible since the lattice structure dictates valid access modes. And, it only supports two different access modes, namely read and write <ref> [25, 11, 23, 9, 28] </ref>. The idea of domain and type enforcement as a more flexible and user-friendly alternative to the lattice model is first developed by Boebert and Kain [8].
Reference: [10] <institution> Center for Secure Information Systems, George Mason University. Security Glossary. </institution> <note> World-Wide Web. http://www.isse.gmu.edu/~csis/glossary/ merged_glossary.html. 11 </note>
Reference-contexts: Furthermore, it can be easily subverted and is thus not complete: an often cited example is the so-called "Trojan horse" attack <ref> [1, 11, 10] </ref> where an application appears legitimate but in fact also carries out some illicit action. Mandatory access control as a method of enforcing a given security policy has been developed within the security establishment of the United States.
Reference: [11] <author> David D. Clark and David R. Wilson. </author> <title> A Comparison of Commercial and Military Computer Security Policies. </title> <booktitle> In Proceedings of the 1987 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 184-194, </pages> <address> Oakland, Cali-fornia, </address> <month> April </month> <year> 1987. </year>
Reference-contexts: Mandatory access control policies allow an organization to define its security terms, and provide no path by which an individual can circumvent security. As security is generally first an organizational, and then an individual, concern, mandatory access control policies have become increasingly important <ref> [11, 9, 4] </ref>. Domain and type enforcement is mandatory in the sense that it is imposed on all relevant system operations and can only be changed by the security administrator. <p> Furthermore, it can be easily subverted and is thus not complete: an often cited example is the so-called "Trojan horse" attack <ref> [1, 11, 10] </ref> where an application appears legitimate but in fact also carries out some illicit action. Mandatory access control as a method of enforcing a given security policy has been developed within the security establishment of the United States. <p> The lattice model, while precise, is not very intuitive or user-friendly since access modes are implicit. It is not very flexible since the lattice structure dictates valid access modes. And, it only supports two different access modes, namely read and write <ref> [25, 11, 23, 9, 28] </ref>. The idea of domain and type enforcement as a more flexible and user-friendly alternative to the lattice model is first developed by Boebert and Kain [8].
Reference: [12] <author> Drew Dean, Edward W. Felten, and Dan S. Wallach. </author> <title> Java Security: From HotJava to Netscape and Beyond. </title> <booktitle> In Proceedings of the 1996 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 190-200, </pages> <address> Oakland, California, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: At the same time, the impact of extensibility on overall system security and specifically on access control is still ill understood. And, the protection mechanisms in these extensible systems are rudimentary at best, as illustrated by the continuous string of security breaches in the Java system <ref> [12, 29] </ref>. Exactly what constitutes a secure system is defined by a security policy. Security policies usually reflect the requirements of an organization to control unauthorized access to and dissemination of data as well as the integrity of data, and are thus external to the system. <p> This design makes it difficult to reason about the security of Java, and a design or implementation error in any one of the three prongs can break the security of the Java system, as has been repeatedly demonstrated <ref> [12, 29] </ref>. In SPIN, system services are partitioned into "domains" [38] (which are a separate concept from the domains used in domain and type enforcement), where each domain is a collection of Modula-3 interfaces.
Reference: [13] <author> Dorothy E. Denning. </author> <title> A Lattice Model of Secure Information Flow. </title> <journal> Communications of the ACM, </journal> <volume> 19(5) </volume> <pages> 236-243, </pages> <month> May </month> <year> 1976. </year>
Reference-contexts: Mandatory access control as a method of enforcing a given security policy has been developed within the security establishment of the United States. Most work in this context is based on a lattice of subject and object labels that implicitly defines legal types of operations <ref> [5, 13, 7] </ref> and that has become part of the Department of Defense's standard for trusted computer systems [14].
Reference: [14] <institution> Department of Defense Computer Security Center. Department of Defense Trusted Computer System Evaluation Criteria, </institution> <month> December </month> <year> 1985. </year> <institution> Department of Defense Standard DoD 5200.28-STD. </institution>
Reference-contexts: Most work in this context is based on a lattice of subject and object labels that implicitly defines legal types of operations [5, 13, 7] and that has become part of the Department of Defense's standard for trusted computer systems <ref> [14] </ref>. For example, to enforce the Department of Defense's security classifications, one would create four labels TopSecret, Secret, Confidential, and Unclassified (ordered as given with TopSecret being the top-most label) and assign them to all subjects and objects.
Reference: [15] <author> Jeffrey L. Eppinger, Lily B. Mummert, and Alfred Z. Spector. Camelot and Avalon: </author> <title> A Distributed Transaction Facility. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, Cal-ifornia, </address> <year> 1991. </year>
Reference-contexts: The storage manager used in our experiment provides an extent-based file system, and the structure of the transaction manager is similar to that of the Camelot system <ref> [15] </ref>. Both the storage and transaction manager are implemented as extensions while the benchmark runs as a user-space application. The benchmark itself is modeled after the TPC-A benchmark described in [35] and generates 100 transactions.
Reference: [16] <author> Michael Franz and Thomas Kistler. </author> <note> Introducing Juice. http://www.ics.uci.edu/~juice/intro.html, Octo-ber 1996. </note>
Reference-contexts: Inferno [26] focuses on extensibility for distributed services. The Java system [22, 19, 24] provides an infrastructure for executable content on the world-wide web. In addition, it is being proposed as the substrate for extensible operating systems on network computers. Finally, Juice <ref> [16] </ref>, which utilizes "slim binary" technology [17, 21] originally developed for the Oberon system [41], provides a faster and leaner alternative to Java. At the same time, the impact of extensibility on overall system security and specifically on access control is still ill understood.
Reference: [17] <author> Michael Franz and Thomas Kistler. </author> <title> Slim Binaries. </title> <type> Technical Report 96-24, </type> <institution> Department of Information and Computer Science, University of California, Irvine, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Inferno [26] focuses on extensibility for distributed services. The Java system [22, 19, 24] provides an infrastructure for executable content on the world-wide web. In addition, it is being proposed as the substrate for extensible operating systems on network computers. Finally, Juice [16], which utilizes "slim binary" technology <ref> [17, 21] </ref> originally developed for the Oberon system [41], provides a faster and leaner alternative to Java. At the same time, the impact of extensibility on overall system security and specifically on access control is still ill understood.
Reference: [18] <author> J. Steven Fritzinger and Marianne Mueller. </author> <title> Java Security. </title> <institution> Sun Microsystems, Inc., </institution> <note> White Paper, http:// www.javasoft.com/security/whitepaper.ps, 1996. </note>
Reference-contexts: The current Java security model <ref> [18, 29] </ref> distinguishes between trusted extensions (code stored on the local file system), which have access to the full functionality of the Java system, and untrusted extensions (all remote code).
Reference: [19] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1996. </year>
Reference-contexts: Motivated by this promise of more power and more flexibility, several projects are pursuing system designs that are extensible by their very design: SPIN [6] and VINO [37] address extensibility in the context of operating systems. Inferno [26] focuses on extensibility for distributed services. The Java system <ref> [22, 19, 24] </ref> provides an infrastructure for executable content on the world-wide web. In addition, it is being proposed as the substrate for extensible operating systems on network computers. <p> It requires support for dynamic loading and linking of extensions, for multiple concurrent threads of execution, and for overriding existing interfaces. Consequently, our access control mechanism could be implemented in other extensible systems that provide these three services, such as Java <ref> [19] </ref> or VINO [37]. Our implementation is guided by three constraints. First, it has to correctly enforce the security policy of a given environment.
Reference: [20] <author> Wilson C. Hsieh, Marc E. Fiuczynski, Charles Garrett, Stefan Savage, David Becker, and Brian N. Bershad. </author> <title> Language Support for Extensible Operating Systems. </title> <booktitle> Workshop on Compiler Support for System Software, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: Third, the implementation should be fast to impose as little performance overhead as possible. 4.1 Structure and Interfaces In SPIN, a statically linked core provides the most basic services, including hardware support, the Modula-3 runtime <ref> [39, 20] </ref>, the linker/loader [38], threads and the event dispatcher [32]. All other services, including networking and file system support, are provided by dynamically linked extensions. Services in the static core are trusted and, if they misbehave, can undermine the security of the system (and also crash the entire system).
Reference: [21] <author> Thomas Kistler and Michael Franz. </author> <title> A Tree-Based Alternative to Java Byte-Codes. </title> <type> Technical Report 96-58, </type> <institution> Department of Information and Computer Science, University of California, Irvine, </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: Inferno [26] focuses on extensibility for distributed services. The Java system [22, 19, 24] provides an infrastructure for executable content on the world-wide web. In addition, it is being proposed as the substrate for extensible operating systems on network computers. Finally, Juice [16], which utilizes "slim binary" technology <ref> [17, 21] </ref> originally developed for the Oberon system [41], provides a faster and leaner alternative to Java. At the same time, the impact of extensibility on overall system security and specifically on access control is still ill understood.
Reference: [22] <author> Douglas Kramer, Bill Joy, and David Spenhoff. </author> <title> The Java Platform|A White Paper. </title> <type> JavaSoft White Paper, </type> <institution> ftp://ftp.javasoft.com/docs/JavaPlatform. ps, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: Motivated by this promise of more power and more flexibility, several projects are pursuing system designs that are extensible by their very design: SPIN [6] and VINO [37] address extensibility in the context of operating systems. Inferno [26] focuses on extensibility for distributed services. The Java system <ref> [22, 19, 24] </ref> provides an infrastructure for executable content on the world-wide web. In addition, it is being proposed as the substrate for extensible operating systems on network computers.
Reference: [23] <author> Theodore M. P. Lee. </author> <title> Using Mandatory Integrity to Enforce "Commercial" Security. </title> <booktitle> In Proceedings of the 1988 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 140-146, </pages> <address> Oakland, California, </address> <month> April </month> <year> 1988. </year>
Reference-contexts: The lattice model, while precise, is not very intuitive or user-friendly since access modes are implicit. It is not very flexible since the lattice structure dictates valid access modes. And, it only supports two different access modes, namely read and write <ref> [25, 11, 23, 9, 28] </ref>. The idea of domain and type enforcement as a more flexible and user-friendly alternative to the lattice model is first developed by Boebert and Kain [8].
Reference: [24] <author> Tim Lindholm and Frank Yellin. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1996. </year>
Reference-contexts: Motivated by this promise of more power and more flexibility, several projects are pursuing system designs that are extensible by their very design: SPIN [6] and VINO [37] address extensibility in the context of operating systems. Inferno [26] focuses on extensibility for distributed services. The Java system <ref> [22, 19, 24] </ref> provides an infrastructure for executable content on the world-wide web. In addition, it is being proposed as the substrate for extensible operating systems on network computers.
Reference: [25] <author> Steven B. Lipner. </author> <title> Non-Discretionary Controls for Commercial Applications. </title> <booktitle> In Proceedings of the 1982 Symposium on Security and Privacy, </booktitle> <pages> pages 2-10, </pages> <address> Oak-land, California, </address> <month> April </month> <year> 1982. </year>
Reference-contexts: The lattice model, while precise, is not very intuitive or user-friendly since access modes are implicit. It is not very flexible since the lattice structure dictates valid access modes. And, it only supports two different access modes, namely read and write <ref> [25, 11, 23, 9, 28] </ref>. The idea of domain and type enforcement as a more flexible and user-friendly alternative to the lattice model is first developed by Boebert and Kain [8].
Reference: [26] <institution> Lucent Technologies Inc. Inferno: la Commedia In-terattiva. </institution> <address> http://inferno.bell-labs.com/inferno/ infernosum.html, </address> <year> 1996. </year>
Reference-contexts: Motivated by this promise of more power and more flexibility, several projects are pursuing system designs that are extensible by their very design: SPIN [6] and VINO [37] address extensibility in the context of operating systems. Inferno <ref> [26] </ref> focuses on extensibility for distributed services. The Java system [22, 19, 24] provides an infrastructure for executable content on the world-wide web. In addition, it is being proposed as the substrate for extensible operating systems on network computers.
Reference: [27] <institution> Lucent Technologies Inc. Security in Inferno. </institution> <address> http: //inferno.bell-labs.com/inferno/security.html, </address> <year> 1997. </year>
Reference-contexts: Little or no information is available on system security for other extensible systems: VINO distinguishes between regular and privileged users, and uses dynamic privilege checks before accessing sensitive data [36]. Inferno uses encryption for the mutual authentication of communicating parties and their messages <ref> [27] </ref>. No information is available on security in Juice. While these systems ensure the basic safety of the system by relying on either programming language support or software fault isolation, no security model and specifically no access control model is discussed in the publicly available literature.
Reference: [28] <author> Catherine Jensen McCollum, Judith R. Messing, and LouAnna Notargiacomo. </author> <title> Beyond the Pale of MAC and DAC|Defining New Forms of Access Control. </title> <booktitle> In Proceedings of the 1990 IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 190-200, </pages> <address> Oakland, Cali-fornia, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: The lattice model, while precise, is not very intuitive or user-friendly since access modes are implicit. It is not very flexible since the lattice structure dictates valid access modes. And, it only supports two different access modes, namely read and write <ref> [25, 11, 23, 9, 28] </ref>. The idea of domain and type enforcement as a more flexible and user-friendly alternative to the lattice model is first developed by Boebert and Kain [8].
Reference: [29] <author> Gary McGraw and Edward W. Felten. </author> <title> Java Security: Hostile Applets, Holes and Antidotes. </title> <publisher> Wiley Computer Publishing, John Wiley & Sons, Inc., </publisher> <address> New York, New York, </address> <year> 1997. </year>
Reference-contexts: At the same time, the impact of extensibility on overall system security and specifically on access control is still ill understood. And, the protection mechanisms in these extensible systems are rudimentary at best, as illustrated by the continuous string of security breaches in the Java system <ref> [12, 29] </ref>. Exactly what constitutes a secure system is defined by a security policy. Security policies usually reflect the requirements of an organization to control unauthorized access to and dissemination of data as well as the integrity of data, and are thus external to the system. <p> The current Java security model <ref> [18, 29] </ref> distinguishes between trusted extensions (code stored on the local file system), which have access to the full functionality of the Java system, and untrusted extensions (all remote code). <p> Untrusted extensions are placed into a so-called "sandbox" that limits extensions from using some system services, such as accessing the local file system. Ideally, it would also isolate extensions from each other, but see <ref> [29] </ref> for a counter example. Future versions of Java will provide authenticated extensions with a finer granularity of access control, such as allowing some extensions to access some files. <p> Furthermore, the security of the Java system, instead of relying on one central facility to enforce security (which is good design practice for secure systems [33]), relies on three facilities, or "prongs" <ref> [29] </ref>. This design makes it difficult to reason about the security of Java, and a design or implementation error in any one of the three prongs can break the security of the Java system, as has been repeatedly demonstrated [12, 29]. <p> This design makes it difficult to reason about the security of Java, and a design or implementation error in any one of the three prongs can break the security of the Java system, as has been repeatedly demonstrated <ref> [12, 29] </ref>. In SPIN, system services are partitioned into "domains" [38] (which are a separate concept from the domains used in domain and type enforcement), where each domain is a collection of Modula-3 interfaces.
Reference: [30] <author> Marshall Kirk McKusick, Keith Bostic, Michael J. Karels, and John S. Quarterman. </author> <title> The Design and Implementation of the 4.4BSD Operating System. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1996. </year>
Reference-contexts: that access control is still an open issue that needs to be addressed in these systems as well. 2.2 Related Work Discretionary access control based on users, groups, access modes and access control lists is a familiar and 3 flexible feature of mainstream file and operating sys-tems such as Unix <ref> [30] </ref>, the Andrew File System [34] and Windows NT [40]. However, it relies on all users to enforce a given security policy, since the owner or creator of a system resource also determines the access control list for that resource. <p> The intuition behind the use of target domains is that it allows for a controlled change of privilege for a given thread when executing a particular extension, comparable to setgid and setuid programs in Unix <ref> [30] </ref>. Since, in extensible systems, both the ability to execute code and to extend an interface are provided by a central mechanism, access control for extensions and threads is enforced by this central mechanism. <p> To give users the possibility of introducing their own, fine-grained access constraints, our access control mechanism also supports discretionary access control based on users, groups and access control lists (ACLs). Discretionary access control is a familiar feature of traditional file and operating systems <ref> [30, 34, 40] </ref> and is supported by associating subjects with a user and objects with an access control list.
Reference: [31] <author> Spencer E. Minear. </author> <title> Providing Policy Control Over Object Operations in a Mach Based System. </title> <booktitle> In Proceedings of the Fifth USENIX UNIX Security Symposium, </booktitle> <address> Salt Lake City, Utah, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Our call-time optimizations have eliminated most call-time access checks, and we see a minimal end-to-end overhead for access control. It is difficult to compare these results to those reported for DTE in Unix by Badger et al. [2] and for DTE in Mach by Minear <ref> [31] </ref>, since their performance data is inconclusive. Badger et al. report a small performance improvement for some network operations (since DTE eliminates the need for re-authentication), but also a 13% worst-case overhead for FTP and a factor two slowdown for HTTP.
Reference: [32] <author> Przemys law Pardyak and Brian N. Bershad. </author> <title> Dynamic Binding for an Extensible System. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 201-212, </pages> <address> Seattle, Washing-ton, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Both mechanisms are usually provided by a central facility, by either building on programming language support (for example, the use of inheritance in Java or VINO), or a dynamic dispatch model (for example, the event-dispatch model in SPIN <ref> [32] </ref>). While seemingly similar, the two mechanisms represent different semantics: In the first case, an extension invokes other services, while, in the second case, an extension is invoked by another service. <p> Third, the implementation should be fast to impose as little performance overhead as possible. 4.1 Structure and Interfaces In SPIN, a statically linked core provides the most basic services, including hardware support, the Modula-3 runtime [39, 20], the linker/loader [38], threads and the event dispatcher <ref> [32] </ref>. All other services, including networking and file system support, are provided by dynamically linked extensions. Services in the static core are trusted and, if they misbehave, can undermine the security of the system (and also crash the entire system). <p> So, instead of passing the DTE domain of the extension as a closure to the dynamic test, we execute the outer lookup at link-time and pass the inner hash table to the dynamic test. Transparent Implementation In SPIN, extensions interact through a central dispatcher <ref> [32] </ref> by raising events, which corresponds to calling an interface, and by handling events, which corresponds to extending an existing interface. The invocation mechanism for events is simply the procedure call.
Reference: [33] <author> Jerome H. Saltzer and Michael D. Schroeder. </author> <title> The Protection of Information in Computer Systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 63(9) </volume> <pages> 1278-1308, </pages> <month> September </month> <year> 1975. </year>
Reference-contexts: However, no clear and flexible access control model, detailing how this finer grain of access control will be provided, has been presented. Furthermore, the security of the Java system, instead of relying on one central facility to enforce security (which is good design practice for secure systems <ref> [33] </ref>), relies on three facilities, or "prongs" [29]. This design makes it difficult to reason about the security of Java, and a design or implementation error in any one of the three prongs can break the security of the Java system, as has been repeatedly demonstrated [12, 29]. <p> Furthermore, we changed the linker/loader to enforce access control on extensions at link-time and to set up call-time access control on threads and extensions. y We have not validated the implementation. However, a critical characteristic of any security mechanism is that it be small and well-structured <ref> [33] </ref>. 7 The AccessMode interface provides an immutable access mode abstraction. Each access mode consists of a set of simple, pre-defined permissions and a list of permission objects.
Reference: [34] <author> M. Satyanarayanan, John H. Howard, David A. Nichols, Robert N. Sidebotham, Alfred Z. Spector, and Michael J. West. </author> <title> The ITC Distributed File System: </title> <booktitle> Principles and Design. In Proceedings of the 10th Symposium on Operating Systems Principles, </booktitle> <pages> pages 35-50, </pages> <address> Orcas Island, Washington, </address> <month> December </month> <year> 1985. </year>
Reference-contexts: an open issue that needs to be addressed in these systems as well. 2.2 Related Work Discretionary access control based on users, groups, access modes and access control lists is a familiar and 3 flexible feature of mainstream file and operating sys-tems such as Unix [30], the Andrew File System <ref> [34] </ref> and Windows NT [40]. However, it relies on all users to enforce a given security policy, since the owner or creator of a system resource also determines the access control list for that resource. <p> To give users the possibility of introducing their own, fine-grained access constraints, our access control mechanism also supports discretionary access control based on users, groups and access control lists (ACLs). Discretionary access control is a familiar feature of traditional file and operating systems <ref> [30, 34, 40] </ref> and is supported by associating subjects with a user and objects with an access control list.
Reference: [35] <author> M. Satyanarayanan, Henry H. Mashburn, Puneet Kumar, David C. Steere, and James J. Kistler. </author> <title> Lightweight Recoverable Virtual Memory. </title> <booktitle> In Proceedings of the 14th Symposium on Operating Systems Principles, </booktitle> <pages> pages 146-160, </pages> <address> Asheville, North Carolina, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Both the storage and transaction manager are implemented as extensions while the benchmark runs as a user-space application. The benchmark itself is modeled after the TPC-A benchmark described in <ref> [35] </ref> and generates 100 transactions. For each transaction, it reads and then writes three 128 byte records and also writes a 64 byte record.
Reference: [36] <author> Margo I. Seltzer. </author> <type> Personal Communication, </type> <month> January </month> <year> 1997. </year>
Reference-contexts: Little or no information is available on system security for other extensible systems: VINO distinguishes between regular and privileged users, and uses dynamic privilege checks before accessing sensitive data <ref> [36] </ref>. Inferno uses encryption for the mutual authentication of communicating parties and their messages [27]. No information is available on security in Juice.
Reference: [37] <author> Margo I. Seltzer, Yasuhiro Endo, Christopher Small, and Keith A. Smith. </author> <title> Dealing With Disaster: Surviving Misbehaved Kernel Extensions. </title> <booktitle> In Proceedings of the Second Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 213-227, </pages> <address> Seattle, Washington, </address> <month> October </month> <year> 1996. </year> <month> 12 </month>
Reference-contexts: 1 Introduction Dynamically extensible systems can provide applications, and ultimately users, with new and better functionality as well as better performance. Motivated by this promise of more power and more flexibility, several projects are pursuing system designs that are extensible by their very design: SPIN [6] and VINO <ref> [37] </ref> address extensibility in the context of operating systems. Inferno [26] focuses on extensibility for distributed services. The Java system [22, 19, 24] provides an infrastructure for executable content on the world-wide web. In addition, it is being proposed as the substrate for extensible operating systems on network computers. <p> It requires support for dynamic loading and linking of extensions, for multiple concurrent threads of execution, and for overriding existing interfaces. Consequently, our access control mechanism could be implemented in other extensible systems that provide these three services, such as Java [19] or VINO <ref> [37] </ref>. Our implementation is guided by three constraints. First, it has to correctly enforce the security policy of a given environment. Second, it has to be simple, well-structured and break down into separate interfaces for the individual abstractions to allow for validation y and for easy transfer to other systems.
Reference: [38] <author> Emin Gun Sirer, Marc Fiuczynski, Przemys law Pardyak, and Brian Bershad. </author> <title> Safe Dynamic Linking in an Extensible Operating System. </title> <booktitle> Workshop on Compiler Support for System Software, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: This design makes it difficult to reason about the security of Java, and a design or implementation error in any one of the three prongs can break the security of the Java system, as has been repeatedly demonstrated [12, 29]. In SPIN, system services are partitioned into "domains" <ref> [38] </ref> (which are a separate concept from the domains used in domain and type enforcement), where each domain is a collection of Modula-3 interfaces. An extension is linked against one or more domains, and can only access and extend the system services that are in those domains. <p> Third, the implementation should be fast to impose as little performance overhead as possible. 4.1 Structure and Interfaces In SPIN, a statically linked core provides the most basic services, including hardware support, the Modula-3 runtime [39, 20], the linker/loader <ref> [38] </ref>, threads and the event dispatcher [32]. All other services, including networking and file system support, are provided by dynamically linked extensions. Services in the static core are trusted and, if they misbehave, can undermine the security of the system (and also crash the entire system).
Reference: [39] <author> Emin Gun Sirer, Stefan Savage, Przemys law Pardyak, Greg P. DeFouw, Mary Ann Alapat, and Brian N. Ber-shad. </author> <title> Writing an Operating System with Modula-3. </title> <booktitle> Workshop on Compiler Support for System Software, </booktitle> <month> February </month> <year> 1996. </year>
Reference-contexts: Third, the implementation should be fast to impose as little performance overhead as possible. 4.1 Structure and Interfaces In SPIN, a statically linked core provides the most basic services, including hardware support, the Modula-3 runtime <ref> [39, 20] </ref>, the linker/loader [38], threads and the event dispatcher [32]. All other services, including networking and file system support, are provided by dynamically linked extensions. Services in the static core are trusted and, if they misbehave, can undermine the security of the system (and also crash the entire system).
Reference: [40] <author> Karanjit S. Siyan. </author> <title> Windows NT Server Professional Reference. </title> <publisher> New Riders Publishing, </publisher> <address> Indianapolis, Indi-ana, </address> <year> 1995. </year>
Reference-contexts: needs to be addressed in these systems as well. 2.2 Related Work Discretionary access control based on users, groups, access modes and access control lists is a familiar and 3 flexible feature of mainstream file and operating sys-tems such as Unix [30], the Andrew File System [34] and Windows NT <ref> [40] </ref>. However, it relies on all users to enforce a given security policy, since the owner or creator of a system resource also determines the access control list for that resource. <p> To give users the possibility of introducing their own, fine-grained access constraints, our access control mechanism also supports discretionary access control based on users, groups and access control lists (ACLs). Discretionary access control is a familiar feature of traditional file and operating systems <ref> [30, 34, 40] </ref> and is supported by associating subjects with a user and objects with an access control list.
Reference: [41] <author> Niklaus Wirth and Jurg Gutknecht. </author> <title> Project Oberon| The Design of an Operating System and Compiler. </title> <publisher> Addison Wesley Longman, </publisher> <address> Reading, Massachusetts, </address> <year> 1992. </year>
Reference-contexts: The Java system [22, 19, 24] provides an infrastructure for executable content on the world-wide web. In addition, it is being proposed as the substrate for extensible operating systems on network computers. Finally, Juice [16], which utilizes "slim binary" technology [17, 21] originally developed for the Oberon system <ref> [41] </ref>, provides a faster and leaner alternative to Java. At the same time, the impact of extensibility on overall system security and specifically on access control is still ill understood.
References-found: 41

