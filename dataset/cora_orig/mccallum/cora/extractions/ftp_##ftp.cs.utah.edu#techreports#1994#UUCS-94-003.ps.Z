URL: ftp://ftp.cs.utah.edu/techreports/1994/UUCS-94-003.ps.Z
Refering-URL: http://www.cs.utah.edu/~gary/MSO-publications.html
Root-URL: 
Title: Persistence is Hard, Then You Die! or Compiler and Runtime Support for a Persistent Common Lisp  
Author: J. H. Jacobs M. R. Swanson R. R. Kessler 
Date: January 26, 1994  
Address: Salt Lake City, UT 84112 USA  
Affiliation: Department of Computer Science University of Utah  
Pubnum: UUCS-94-003  
Abstract: Integrating persistence into an existing programming language is a serious undertaking. Preserving the essence of the existing language, adequately supporting persistence, and maintaining efficiency require low-level support from the compiler and runtime systems. Pervasive, low-level changes were made to a Lisp compiler and runtime system to introduce persistence. The result is an efficient language which is worthy of the name Persistent Lisp. 1 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal and Gehani N. H. </author> <title> ODE (Object Database and Environment): The language and data model. </title> <booktitle> In Proc. Int'l. Conf. on Management of Data, </booktitle> <pages> pages 36-45, </pages> <address> Portland, Oregon, May-June 1989. ACM-SIGMOD. </address>
Reference-contexts: the persistent language are too slow or large, it may often benefit the programmer to use the original language and produce an ad hoc persistent program. 1.2 Existing Persistent Languages Many well known programming languages have been enhanced with the ability to manipulate persistent data: Algol [4], C++ [9] [13] <ref> [1] </ref>, Smalltalk [8], ML [11], and Lisp [12] [10] [2] [3] [6]. The C++ based implementations of persistence have been reasonably successful from a language design viewpoint. Their successful implementations have been due to the very explicit nature of value management in C++ .
Reference: [2] <author> Gilles Barbedette. </author> <title> LispO 2 : A persistent object-oriented LISP. </title> <editor> In F. Bancilhon, C. Delobel, and P. Kanellakkis, editors, </editor> <title> Building an Object-Oriented Database System: </title> <booktitle> The Story of O 2 , chapter 10, </booktitle> <pages> pages 215-233. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year> <note> Also in Proceeding of the 2nd EDBT. </note>
Reference-contexts: may often benefit the programmer to use the original language and produce an ad hoc persistent program. 1.2 Existing Persistent Languages Many well known programming languages have been enhanced with the ability to manipulate persistent data: Algol [4], C++ [9] [13] [1], Smalltalk [8], ML [11], and Lisp [12] [10] <ref> [2] </ref> [3] [6]. The C++ based implementations of persistence have been reasonably successful from a language design viewpoint. Their successful implementations have been due to the very explicit nature of value management in C++ . C++ variables are all strongly and statically typed; dynamically created values are explicitly allocated. <p> The Lisp symbol data type is another source of difficulty because of the variety of roles it serves. None of the Lisp systems mentioned above conform to the three principles. With the exception of LispO 2 <ref> [2] </ref> all of the systems forsake orthogonal persistence and limit persistence to an object data type; one even requires that updated values be explicitly marked by the programmer. LispO 2 provides a very limited transaction capability.
Reference: [3] <author> P. Broadbery and Burdorf C. </author> <title> Applications of Telos. </title> <journal> Lisp and Symbolic Computation, </journal> 6(1/2):139-158, August 1993. 
Reference-contexts: often benefit the programmer to use the original language and produce an ad hoc persistent program. 1.2 Existing Persistent Languages Many well known programming languages have been enhanced with the ability to manipulate persistent data: Algol [4], C++ [9] [13] [1], Smalltalk [8], ML [11], and Lisp [12] [10] [2] <ref> [3] </ref> [6]. The C++ based implementations of persistence have been reasonably successful from a language design viewpoint. Their successful implementations have been due to the very explicit nature of value management in C++ . C++ variables are all strongly and statically typed; dynamically created values are explicitly allocated.
Reference: [4] <author> W. P. Cockshott. </author> <title> PS-ALGOL Implementations: Applications in Persistent Object-oriented Programming. </title> <publisher> Ellis Horwood, </publisher> <year> 1990. </year>
Reference-contexts: If programs written in the persistent language are too slow or large, it may often benefit the programmer to use the original language and produce an ad hoc persistent program. 1.2 Existing Persistent Languages Many well known programming languages have been enhanced with the ability to manipulate persistent data: Algol <ref> [4] </ref>, C++ [9] [13] [1], Smalltalk [8], ML [11], and Lisp [12] [10] [2] [3] [6]. The C++ based implementations of persistence have been reasonably successful from a language design viewpoint. Their successful implementations have been due to the very explicit nature of value management in C++ .
Reference: [5] <author> C. J. Date. </author> <title> An Introduction to Database Systems, Volume I, Fifth Edition. </title> <publisher> Addison Wesley, </publisher> <year> 1990. </year>
Reference-contexts: Using general purpose programming languages requires the programmer to be intimately concerned with the low-level details of data access. Writing hybrid programs using a general purpose programming language to host queries in a database query language (e.g. embedded SQL <ref> [5] </ref>) allows the designer to escape some of the lower-level details of data access. However, data must be explicitly brought in from the store and explicitly saved; also the data must be translated between the representations of the database and the programming language.
Reference: [6] <author> S. Ford, J. Joseph, Langworthy D., D. Lively, G. Pathak, E. Perez, R. Peterson, D. Sparacin, S. Thatte, Wells D., and S. Agarwala. Zeitgeist: </author> <title> Database support for object-oriented programming. </title> <editor> In K. R. Dittrich, editor, </editor> <booktitle> Advances in Object-Oriented Database Systems. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: benefit the programmer to use the original language and produce an ad hoc persistent program. 1.2 Existing Persistent Languages Many well known programming languages have been enhanced with the ability to manipulate persistent data: Algol [4], C++ [9] [13] [1], Smalltalk [8], ML [11], and Lisp [12] [10] [2] [3] <ref> [6] </ref>. The C++ based implementations of persistence have been reasonably successful from a language design viewpoint. Their successful implementations have been due to the very explicit nature of value management in C++ . C++ variables are all strongly and statically typed; dynamically created values are explicitly allocated.
Reference: [7] <author> R. P. Gabriel. </author> <title> Perfomance and Evaluation of Lisp Systems. </title> <publisher> MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: Although we have not directly measured the effect, the loss of locality likely impacts both virtual memory and cache performance. 4.3 Performance As expected, adding support for transparent persistence slows down program execution. To measure the change in code performance we utilized the Gabriel benchmark set <ref> [7] </ref> which is tailored for Lisp programs; the results are shown in Table 1. When the tests were run, the runtime system used an IV that was 100% of the half heap size.
Reference: [8] <author> A. L. Hosking, J. E. B. Moss, and C. Bliss. </author> <title> Design of an object faulting persistent Smalltalk. </title> <type> Technical report, </type> <institution> Univerity of Massachusetts, </institution> <year> 1990. UM-CS-1990-045. </year>
Reference-contexts: language are too slow or large, it may often benefit the programmer to use the original language and produce an ad hoc persistent program. 1.2 Existing Persistent Languages Many well known programming languages have been enhanced with the ability to manipulate persistent data: Algol [4], C++ [9] [13] [1], Smalltalk <ref> [8] </ref>, ML [11], and Lisp [12] [10] [2] [3] [6]. The C++ based implementations of persistence have been reasonably successful from a language design viewpoint. Their successful implementations have been due to the very explicit nature of value management in C++ .
Reference: [9] <author> Charles Lamb, Gordon Landis, Jack Orenstein, and Dan Weinreb. </author> <title> The ObjectStore database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 50-63, </pages> <month> Oct </month> <year> 1991. </year>
Reference-contexts: written in the persistent language are too slow or large, it may often benefit the programmer to use the original language and produce an ad hoc persistent program. 1.2 Existing Persistent Languages Many well known programming languages have been enhanced with the ability to manipulate persistent data: Algol [4], C++ <ref> [9] </ref> [13] [1], Smalltalk [8], ML [11], and Lisp [12] [10] [2] [3] [6]. The C++ based implementations of persistence have been reasonably successful from a language design viewpoint. Their successful implementations have been due to the very explicit nature of value management in C++ .
Reference: [10] <author> Arthur H. Lee. </author> <title> The Persistent Object System MetaStore: Persistence via Metaprogramming. </title> <type> PhD thesis, </type> <institution> University of Utah, </institution> <month> Aug </month> <year> 1992. </year>
Reference-contexts: it may often benefit the programmer to use the original language and produce an ad hoc persistent program. 1.2 Existing Persistent Languages Many well known programming languages have been enhanced with the ability to manipulate persistent data: Algol [4], C++ [9] [13] [1], Smalltalk [8], ML [11], and Lisp [12] <ref> [10] </ref> [2] [3] [6]. The C++ based implementations of persistence have been reasonably successful from a language design viewpoint. Their successful implementations have been due to the very explicit nature of value management in C++ . C++ variables are all strongly and statically typed; dynamically created values are explicitly allocated.
Reference: [11] <author> S. M. Nettles and Wing J. M. </author> <title> Persistence + undoability = transactions. </title> <booktitle> In Proceedings of the Hawaii International Conference on Systems Science 25, </booktitle> <year> 1992. </year> <note> See also tech-report CMU-CS-91-173. </note>
Reference-contexts: too slow or large, it may often benefit the programmer to use the original language and produce an ad hoc persistent program. 1.2 Existing Persistent Languages Many well known programming languages have been enhanced with the ability to manipulate persistent data: Algol [4], C++ [9] [13] [1], Smalltalk [8], ML <ref> [11] </ref>, and Lisp [12] [10] [2] [3] [6]. The C++ based implementations of persistence have been reasonably successful from a language design viewpoint. Their successful implementations have been due to the very explicit nature of value management in C++ .
Reference: [12] <author> A. Paepcke. PCLOS: </author> <title> A flexible implementation of CLOS persistence. </title> <editor> In S. Gjessing and K. Nygaard, editors, </editor> <booktitle> Proceedings of the European Conference on Object-Oriented Programming. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: large, it may often benefit the programmer to use the original language and produce an ad hoc persistent program. 1.2 Existing Persistent Languages Many well known programming languages have been enhanced with the ability to manipulate persistent data: Algol [4], C++ [9] [13] [1], Smalltalk [8], ML [11], and Lisp <ref> [12] </ref> [10] [2] [3] [6]. The C++ based implementations of persistence have been reasonably successful from a language design viewpoint. Their successful implementations have been due to the very explicit nature of value management in C++ .
Reference: [13] <author> Joel E. Richardson, Michael J. Carey, and Daniel T. Schuh. </author> <title> The design of the E programming language. </title> <type> Technical report, </type> <institution> University of Wisconsin, </institution> <year> 1989. </year> <type> Tech Report 824. </type>
Reference-contexts: in the persistent language are too slow or large, it may often benefit the programmer to use the original language and produce an ad hoc persistent program. 1.2 Existing Persistent Languages Many well known programming languages have been enhanced with the ability to manipulate persistent data: Algol [4], C++ [9] <ref> [13] </ref> [1], Smalltalk [8], ML [11], and Lisp [12] [10] [2] [3] [6]. The C++ based implementations of persistence have been reasonably successful from a language design viewpoint. Their successful implementations have been due to the very explicit nature of value management in C++ .

References-found: 13

