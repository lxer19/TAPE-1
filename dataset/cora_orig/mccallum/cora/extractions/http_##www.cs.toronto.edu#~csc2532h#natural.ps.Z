URL: http://www.cs.toronto.edu/~csc2532h/natural.ps.Z
Refering-URL: http://www.cs.toronto.edu/~csc2532h/
Root-URL: http://www.cs.toronto.edu
Email: email: reiter@cs.toronto.edu  
Title: Natural Actions, Concurrency and Continuous Time in the Situation Calculus  
Author: Ray Reiter 
Web: http://www.cs.toronto.edu/~cogrobo/  
Note: and The Canadian Institute for Advanced Research  
Address: Toronto, Canada M5S 1A4  
Affiliation: Department of Computer Science University of Toronto  
Abstract: Our focus in this paper is on natural exogenous actions (Pinto [23]), namely those which occur in response to known laws of physics, like a ball bouncing at times determined by Newtonian equations of motion. The property of such actions that we wish to capture is that they must occur at their predicted times, provided no earlier actions (natural or agent initiated) prevent them from occurring. Because several such actions may occur simultaneously, we need a theory of concur-rency. Because such actions may be modeled by equations of motion, we need to represent continuous time. This paper shows how to gracefully accommodate all these features within the situation calculus, without sacrificing the simple solution to the frame problem of Reiter [25]. One nice consequence of this approach is a situation calculus specification of deductive planning, with continuous time and true concurrency, and where the agent can incorporate external natural event occurrences into her plans. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.F. Allen. </author> <title> Temporal reasoning and planning. </title> <editor> In J.F. Allen, H.A. Kautz, R.N. Pelavin, and J.D. Tenenberg, editors, </editor> <booktitle> Reasoning about Plans, </booktitle> <pages> pages 1-68. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: So, we will write formulas like: P oss (c; s) oe [picking up (x; do (c; s)) j (9t)start pickup (x; t) 2 c _ picking up (x; s) ^ :(9t)end pickup (x; t) 2 c]: A more interesting example is due to James Allen <ref> [1] </ref>. Imagine a door with a spring latch. The door can be unlocked by turning the latch, but the agent must keep the latch turned, for if not, the spring loaded mechanism returns the latch to its locked position. <p> This phenomenon of planning by abduction is quite widespread; it is used, for example, in the event calculus [5] and in Allen's temporal logic <ref> [1] </ref>. In fact, it is the only way to do planning in logics which do not provide for branching futures. Unfortunately, abductive planning suffers from a number of drawbacks, when compared with the deductive approach: 1. <p> As observed by Pelavin [22], for concurrent actions, abductive planning can yield incorrect plans in the presence of partial world descriptions. Pelavin [22] addresses the formalization of concurrent actions by extending the ontology of Allen's linear time logic <ref> [1] </ref> to include histories to represent branching fu tures, and suitable modal operators semantically characterized with respect to these histories. This allows a deductive account of planning within a temporal logic, but at the expense of a rather complicated logic.
Reference: [2] <author> F. Bacchus, J.Y. Halpern, and H.J. Levesque. </author> <title> Reasoning about noisy sensors in the situation calculus. </title> <booktitle> In Proc. IJCAI'95, </booktitle> <pages> pages 1933-1940, </pages> <year> 1995. </year>
Reference-contexts: Scherl and Levesque [28] have given a situation calculus account of sensing (knowledge-producing) actions, and Bacchus, Halpern and Levesque have extended this to include noisy sensors <ref> [2] </ref>. Lin [15] has extended Reiter's treatment for deterministic primitive actions to nondeterministic ones. Levesque [13] has given a situation calculus account of planning for agents which can sense their environments. Shapiro, Lesperance and Levesque [31] have formalized agent goals and rational actions in the situation calculus.
Reference: [3] <author> C. Baral and M. Gelfond. </author> <title> Reasoning about effects of concurrent actions. </title> <journal> Journal of Logic Programming, </journal> <note> 1996. to appear. </note>
Reference-contexts: as we did in the bouncing balls example, omit this constraint from the axioms when it is known from the problem description that the time variable t necessarily satisfies this constraint. 6 Discussion and Conclusions By basing it on the language A of Gelfond and Lif-schitz [6], Baral and Gelfond <ref> [3] </ref> provide a semantic account of concurrency which, although not formulated in the situation calculus, has many similarities with ours. The principal difference is that Baral and Gelfond focus exclusively on concurrency, so their ontology does not include time or natural actions.
Reference: [4] <author> Ernest Davis. </author> <title> Infinite loops in finite time. </title> <type> Technical report, </type> <institution> Department of Computer Science, </institution> <address> New York University, </address> <month> February, </month> <year> 1992. </year>
Reference-contexts: There does not appear to be any simple way to prevent Zeno's paradox from arising in temporal axiomatiza-tions like ours. Of course, this is not really a paradox, in the sense that such examples do not introduce any inconsistencies into the axiomatization. See E. Davis <ref> [4] </ref> for a deeper discussion of these issues. 4.4 The Natural World Condition This is the sentence: (8a)natural (a): (N W C) The Natural World Condition restricts the domain of discourse to natural actions only.
Reference: [5] <author> K. Eshghi. </author> <title> Abductive planning with event calculus. </title> <booktitle> In Proceedings of the Fifth International Conference on Logic Programming, </booktitle> <pages> pages 562-579. </pages> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: This phenomenon of planning by abduction is quite widespread; it is used, for example, in the event calculus <ref> [5] </ref> and in Allen's temporal logic [1]. In fact, it is the only way to do planning in logics which do not provide for branching futures. Unfortunately, abductive planning suffers from a number of drawbacks, when compared with the deductive approach: 1.
Reference: [6] <author> M. Gelfond and V. Lifschitz. </author> <title> Representing actions in extended logic programs. </title> <booktitle> In Proc. Joint Int. Conf. and Symp. on Logic Programming, </booktitle> <pages> pages 559-573, </pages> <year> 1992. </year>
Reference-contexts: as in (23), or, as we did in the bouncing balls example, omit this constraint from the axioms when it is known from the problem description that the time variable t necessarily satisfies this constraint. 6 Discussion and Conclusions By basing it on the language A of Gelfond and Lif-schitz <ref> [6] </ref>, Baral and Gelfond [3] provide a semantic account of concurrency which, although not formulated in the situation calculus, has many similarities with ours. The principal difference is that Baral and Gelfond focus exclusively on concurrency, so their ontology does not include time or natural actions.
Reference: [7] <author> M. Gelfond, V. Lifschitz, and A. Rabinov. </author> <title> What are the limitations of the situation calculus? In Working Notes, </title> <booktitle> AAAI Spring Symposium Series on the Logical Formalization of Commonsense Reasoning, </booktitle> <pages> pages 59-69, </pages> <year> 1991. </year>
Reference-contexts: So, start meeting (person; t) might be the instantaneous action of person starting a meeting at time t. This will make the notion of concurrent actions relatively unproblematic, which is not the case when actions have durations, and therefore may overlap in complicated ways (Gelfond, Lifs-chitz and Rabinov <ref> [7] </ref>). 2. A sort time ranging over the reals. 3. A function symbol time: time (a) denotes the oc currence time of the simple action a. 4. A function symbol start: start (s) denotes the start time of the situation s. 5.
Reference: [8] <author> C.C. Green. </author> <title> Theorem proving by resolution as a basis for question-answering systems. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 4, </booktitle> <pages> pages 183-205. </pages> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: 2 c, we infer lntp (s; time (ff)) and lntp (s; time (ff 0 )), so by Remark 1, time (ff 0 ) = time (ff), contradiction. 5 Some Consequences of this Approach 5.1 Planning with Concurrent and Natural Actions The classical specification of the planning task is by Green <ref> [8] </ref>, and concerns a single agent in complete control of all actions that can be performed in the world being modeled. A ground situation term oe is a plan for G iff Axioms j= S 0 oe ^ G (oe): Here, Axioms provide the relevant background theory.
Reference: [9] <author> A. R. Haas. </author> <title> The case for domain-specific frame axioms. </title> <editor> In F. M. Brown, editor, </editor> <booktitle> The frame problem in artificial intelligence. Proceedings of the 1987 workshop, </booktitle> <pages> pages 343-348, </pages> <address> Los Altos, California, 1987. </address> <publisher> Mor-gan Kaufmann Publishers, </publisher> <address> San Francisco, CA. </address>
Reference-contexts: true, we can describe those properties of the world, for example the position of the agent's hand as a function of t, which must be true during the evolution of the process picking up. 3.1 Successor State Axioms Reiter [25], building on the ideas of Pednault [21] and of Haas <ref> [9] </ref> and Schubert [29], proposes a solution to the frame problem for deterministic, nonconcurrent actions in the absence of state constraints. This provides a systematic way of obtaining so-called successor state axioms from the effect axioms. We have to generalize these successor state axioms slightly, to take concur-rency into account.
Reference: [10] <author> T.G. Kelley. </author> <title> Modeling complex systems in the situation calculus: A case study using the Dagstuhl steam boiler problem. In L.C. </title> <editor> Aiello, J. Doyle, and S.C. Shapiro, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proceedings of the Fifth International Conference (KR'96). </booktitle> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1996. </year>
Reference-contexts: Intuitively, this is as it should be for natural worlds. Theorem 3 provides the theoretical foundation for a situation calculus-based simulator for physical systems (Kelley <ref> [10] </ref>).
Reference: [11] <author> R.A. Kowalski and M.J. Sergot. </author> <title> A logic-based calculus of events. New Generation Computing, </title> <address> 4:267, </address> <year> 1986. </year>
Reference-contexts: There have been a few earlier papers on formalizing natural actions and continuous time. Shanahan's approach [30] is embedded in the event calculus (Kowal-ski and Sergot <ref> [11] </ref>); Sandewall [27] relies on a temporal logic. Accordingly, these proposals are difficult to compare with ours, based as it is on the situation calculus.
Reference: [12] <author> Y. Lesperance, H.J. Levesque, F. Lin, D. Marcu, R. Reiter, and R. Scherl. </author> <title> A logical approach to high-level robot programming a progress report. In Control of the Physical World by Intelligent Systems, </title> <booktitle> Working Notes of the 1994 AAAI Fall Symposium, November, 1994. </booktitle> <address> New Orleans, LA. </address>
Reference-contexts: Starting with a solution to the frame problem for deterministic, simple actions (Reiter [25]), we have defined and implemented a novel situation calculus-based logic programming language for defining complex agent behaviors (Levesque et al. [14]), and experimented with it in a robotics application (Lesperance et al. <ref> [12] </ref>), and for software agents (Marcu et al. [18]). Scherl and Levesque [28] have given a situation calculus account of sensing (knowledge-producing) actions, and Bacchus, Halpern and Levesque have extended this to include noisy sensors [2]. Lin [15] has extended Reiter's treatment for deterministic primitive actions to nondeterministic ones.
Reference: [13] <author> H.J. Levesque. </author> <booktitle> What is planning in the presence of sensing? In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: Scherl and Levesque [28] have given a situation calculus account of sensing (knowledge-producing) actions, and Bacchus, Halpern and Levesque have extended this to include noisy sensors [2]. Lin [15] has extended Reiter's treatment for deterministic primitive actions to nondeterministic ones. Levesque <ref> [13] </ref> has given a situation calculus account of planning for agents which can sense their environments. Shapiro, Lesperance and Levesque [31] have formalized agent goals and rational actions in the situation calculus. Pinto [23] has proposed a situation calculus-based account of concurrency, natural actions and continuous time. <p> This means we now have a situation calculus specification of deductive planning, with continuous time and true concurrency, and where the agent can incorporate external natural event occurrences into her plans. With the exception of Levesque's work on planning for agents with perceptual actions <ref> [13] </ref>, this appears to be the first significant generalization of Green's classical formulation of deductive planning. 5.2 Regression Lemma 1 provides a basis for establishing legality by regression (Waldinger [33], Pednault [21], Reiter [25]).
Reference: [14] <author> H.J. Levesque, R. Reiter, Y. Lesperance, F. Lin, and R. Scherl. GOLOG: </author> <title> a logic programming language for dynamic domains. </title> <journal> Journal of Logic Programming, </journal> <note> Special Issue on Actions, 1996. To appear. </note>
Reference-contexts: Starting with a solution to the frame problem for deterministic, simple actions (Reiter [25]), we have defined and implemented a novel situation calculus-based logic programming language for defining complex agent behaviors (Levesque et al. <ref> [14] </ref>), and experimented with it in a robotics application (Lesperance et al. [12]), and for software agents (Marcu et al. [18]). Scherl and Levesque [28] have given a situation calculus account of sensing (knowledge-producing) actions, and Bacchus, Halpern and Levesque have extended this to include noisy sensors [2].
Reference: [15] <author> F. Lin. </author> <title> Specifying the effects of indeterminate actions. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: Scherl and Levesque [28] have given a situation calculus account of sensing (knowledge-producing) actions, and Bacchus, Halpern and Levesque have extended this to include noisy sensors [2]. Lin <ref> [15] </ref> has extended Reiter's treatment for deterministic primitive actions to nondeterministic ones. Levesque [13] has given a situation calculus account of planning for agents which can sense their environments. Shapiro, Lesperance and Levesque [31] have formalized agent goals and rational actions in the situation calculus.
Reference: [16] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <journal> J. of Logic and Computation, special issue on actions and processes, </journal> <volume> 4 </volume> <pages> 655-678, </pages> <year> 1994. </year>
Reference-contexts: a situation calculus theory of deductive planning, with continuous time and true concurrency, and where the agent can incorporate external natural event occurrences into her plans. 2 Formal Preliminaries 2.1 The Language of the Situation Calculus We begin by expanding the situation calculus ontology beyond that of Lin and Reiter <ref> [16] </ref> and Reiter [26]. The situation calculus is a sorted second order language with the following sorts, function and predicate symbols: 1. There is a sort action of simple actions. <p> Finally, there are predicate symbols natural, coherent, legal and lntp, to be described later. 2.2 Foundational Axioms for the Concurrent, Temporal Situation Calculus Lin and Reiter <ref> [16] </ref> and Reiter [26] provide foundational axioms for the sequential situation calculus. These need to be generalized to the concurrent, temporal setting, which we now do. Our assumption that all simple actions are instantaneous makes this generalization relatively unproblematic. <p> Finally, we need to reconsider the relation &lt; on situations as axiomatized for the sequential, non-temporal situation calculus in Lin and Reiter <ref> [16] </ref> and Reiter [26].
Reference: [17] <author> F. Lin and Y. Shoham. </author> <title> Concurrent actions in the situation calculus. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 590-595, </pages> <year> 1992. </year>
Reference-contexts: In addition, free variables will always be implicitly universally prenex quantified. as, for example, in time (start meeting (person; t)) = t: Following Lin and Shoham <ref> [17] </ref>, Pinto [23] and others we treat concurrent actions as sets, possibly infinite, of simple actions. As we'll see later, the possibility of infinitely many actions occurring concurrently must be taken seriously, so that the obvious notation a 1 ka 2 k ka n cannot accommodate this possibility.
Reference: [18] <author> D. Marcu, Y. Lesperance, H. Levesque, F. Lin, R. Re-iter, and R. Scherl. </author> <title> Foundations of a logical approach to agent programming. </title> <editor> In M. Wooldridge, J.P. Muller, and M. Tambe, editors, </editor> <booktitle> Intelligent Agents Volume II Proceedings of the 1995 Workshop on Agent Theories, Architectures, and Languages (ATAL-95), </booktitle> <pages> pages 331-346. </pages> <note> Springer-Verlag, Lecture Notes in Artificial Intelligence, 1996. To appear. </note>
Reference-contexts: to the frame problem for deterministic, simple actions (Reiter [25]), we have defined and implemented a novel situation calculus-based logic programming language for defining complex agent behaviors (Levesque et al. [14]), and experimented with it in a robotics application (Lesperance et al. [12]), and for software agents (Marcu et al. <ref> [18] </ref>). Scherl and Levesque [28] have given a situation calculus account of sensing (knowledge-producing) actions, and Bacchus, Halpern and Levesque have extended this to include noisy sensors [2]. Lin [15] has extended Reiter's treatment for deterministic primitive actions to nondeterministic ones.
Reference: [19] <author> J. McCarthy. </author> <title> Situations, actions and causal laws. </title> <type> Technical report, </type> <institution> Stanford University, </institution> <year> 1963. </year> <note> Reprinted in Semantic Information Processing (M. </note> <editor> Minsky ed.), </editor> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1968, </year> <pages> pp. 410-417. </pages>
Reference-contexts: 1 Introduction For the past several years, the Cognitive Robotics Group at the University of Toronto has been exploring the feasibility of the situation calculus (McCarthy <ref> [19] </ref>) as a theoretical and computational foundation for modeling autonomous agents dwelling in dynamic environments.
Reference: [20] <author> R. Miller and M. Shanahan. </author> <title> Narratives in the situation calculus. </title> <journal> The Journal of Logic and Computation (Special Issue on Actions and Processes), </journal> <volume> 4 </volume> <pages> 513-530, </pages> <year> 1994. </year>
Reference-contexts: Below, we provide a comparison along one dimension: abductive planning, which seems to be required by these proposals, and the deductive planning approach of the situation calculus. The approaches of Pinto [23] and Pinto and Reiter [24], and of Miller and Shanahan <ref> [20] </ref> come closest to that of this paper in that they also rely on the situation calculus. These all differ from us in proposing something like an "actual" path in the tree of situations, corresponding to the way in which the world actually evolves.
Reference: [21] <author> E.P.D. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <editor> In R.J. Brachman, H. Levesque, and R. Reiter, editors, </editor> <booktitle> Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (KR'89), </booktitle> <pages> pages 324-332. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1989. </year>
Reference-contexts: (x; t; s) is true, we can describe those properties of the world, for example the position of the agent's hand as a function of t, which must be true during the evolution of the process picking up. 3.1 Successor State Axioms Reiter [25], building on the ideas of Pednault <ref> [21] </ref> and of Haas [9] and Schubert [29], proposes a solution to the frame problem for deterministic, nonconcurrent actions in the absence of state constraints. This provides a systematic way of obtaining so-called successor state axioms from the effect axioms. <p> With the exception of Levesque's work on planning for agents with perceptual actions [13], this appears to be the first significant generalization of Green's classical formulation of deductive planning. 5.2 Regression Lemma 1 provides a basis for establishing legality by regression (Waldinger [33], Pednault <ref> [21] </ref>, Reiter [25]). When LN T P C holds, Theorem 2 provides a better regression mechanism, and when also N W C is true, we can use Theorem 3.
Reference: [22] <author> R.N. Pelavin. </author> <title> Planning with simultaneous actions and external events. </title> <editor> In J.F. Allen, H.A. Kautz, R.N. Pelavin, and J.D. Tenenberg, editors, </editor> <booktitle> Reasoning about Plans, </booktitle> <pages> pages 127-211. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: These have the syntactic form (11). As pointed out by Pelavin <ref> [22] </ref> and Pinto [23], in the case of action preconditions for concurrent actions, the converse of (8) need not hold. Two simple actions may each be possible, their action preconditions may be jointly consistent, yet intuitively they should not be concurrently possible. Pinto calls this the precondition interaction problem. <p> Two simple actions may each be possible, their action preconditions may be jointly consistent, yet intuitively they should not be concurrently possible. Pinto calls this the precondition interaction problem. Here is a simple example, after a similar example of Pelavin <ref> [22] </ref>: P oss (start move left (t); s) j :moving (s): P oss (start move right (t); s) j :moving (s): Intuitively, P oss (fstart move left (t); start move right (t)g; s) should be false. <p> As observed by Pelavin <ref> [22] </ref>, for concurrent actions, abductive planning can yield incorrect plans in the presence of partial world descriptions. Pelavin [22] addresses the formalization of concurrent actions by extending the ontology of Allen's linear time logic [1] to include histories to represent branching fu tures, and suitable modal operators semantically characterized with respect <p> As observed by Pelavin <ref> [22] </ref>, for concurrent actions, abductive planning can yield incorrect plans in the presence of partial world descriptions. Pelavin [22] addresses the formalization of concurrent actions by extending the ontology of Allen's linear time logic [1] to include histories to represent branching fu tures, and suitable modal operators semantically characterized with respect to these histories.
Reference: [23] <author> J.A. Pinto. </author> <title> Temporal Reasoning in the Situation Calculus. </title> <type> PhD thesis, </type> <institution> University of Toronto, Department of Computer Science, </institution> <year> 1994. </year>
Reference-contexts: Lin [15] has extended Reiter's treatment for deterministic primitive actions to nondeterministic ones. Levesque [13] has given a situation calculus account of planning for agents which can sense their environments. Shapiro, Lesperance and Levesque [31] have formalized agent goals and rational actions in the situation calculus. Pinto <ref> [23] </ref> has proposed a situation calculus-based account of concurrency, natural actions and continuous time. These initial results have encouraged us in our belief that the situation calculus is well suited to the general problem of providing a formal and computational account of complex dynamic domains and agent behaviors. <p> This paper is a further step in the direction of appropriately enriching the situation calculus for this purpose. Specifically, we suitably modify, and build on, the earlier work mentioned above by Pinto <ref> [23] </ref> and also by Ternovskaia [32]. <p> In addition, free variables will always be implicitly universally prenex quantified. as, for example, in time (start meeting (person; t)) = t: Following Lin and Shoham [17], Pinto <ref> [23] </ref> and others we treat concurrent actions as sets, possibly infinite, of simple actions. As we'll see later, the possibility of infinitely many actions occurring concurrently must be taken seriously, so that the obvious notation a 1 ka 2 k ka n cannot accommodate this possibility. <p> What use, then, is a theory of actions in which all actions are instantaneous? As observed by Pinto <ref> [23] </ref> and Ternovskaia [32], the trick for making this work in the situation calculus is to conceive of such actions as processes, represented by fluents, and to introduce durationless actions which initiate and terminate these processes. <p> This provides a systematic way of obtaining so-called successor state axioms from the effect axioms. We have to generalize these successor state axioms slightly, to take concur-rency into account. This is quite straightforward, following the proposals of Pinto in his Ph.D. thesis <ref> [23] </ref> and Ternovskaia [32]. So, we will write formulas like: P oss (c; s) oe [picking up (x; do (c; s)) j (9t)start pickup (x; t) 2 c _ picking up (x; s) ^ :(9t)end pickup (x; t) 2 c]: A more interesting example is due to James Allen [1]. <p> These have the syntactic form (11). As pointed out by Pelavin [22] and Pinto <ref> [23] </ref>, in the case of action preconditions for concurrent actions, the converse of (8) need not hold. Two simple actions may each be possible, their action preconditions may be jointly consistent, yet intuitively they should not be concurrently possible. Pinto calls this the precondition interaction problem. <p> move right (t)g; s)): So, in the presence of a reasonable state constraint like: :[moving right (s) ^ moving lef t (s)]; we could derive :P oss (fstart move left (t); start move right (t)g; s): These are complicated issues which need to be looked at more closely; see Pinto <ref> [23] </ref> for a more extensive discussion. <p> So if x ranges over the natural numbers (or the reals, or ...) we get lots of possible co-occurrences. 4 Natural Actions Our focus in this paper is on natural exogenous actions (Pinto <ref> [23] </ref>), namely those which occur in response to known laws of physics, like a ball bouncing at times determined by Newtonian equations of motion. These laws of physics will be embodied in the action precondition axioms, in the style of Pinto's PhD thesis [23], but in a somewhat more natural form: <p> paper is on natural exogenous actions (Pinto <ref> [23] </ref>), namely those which occur in response to known laws of physics, like a ball bouncing at times determined by Newtonian equations of motion. These laws of physics will be embodied in the action precondition axioms, in the style of Pinto's PhD thesis [23], but in a somewhat more natural form: P oss (bounce (t); s) j is f alling (s) ^ fheight (s) + vel (s)[t start (s)] 1=2g [t start (s)] 2 = 0g: Here, height (s) and vel (s) are the height and velocity, respectively, of the ball at the start <p> a plan for agents in concurrent worlds with natural actions, we note that a regression-style planning algorithm could be based on Theorem 2, at least in the case when LN T P C holds. 5.3 Example We consider a generalization of an example that Pinto used in his Ph.D. thesis <ref> [23] </ref>, which involves two natural actions and an agent's "free will". Two perfectly elastic balls, B 1 and B 2 , are rolling parallel to each other on a frictionless floor, between two parallel walls. <p> Accordingly, these proposals are difficult to compare with ours, based as it is on the situation calculus. Below, we provide a comparison along one dimension: abductive planning, which seems to be required by these proposals, and the deductive planning approach of the situation calculus. The approaches of Pinto <ref> [23] </ref> and Pinto and Reiter [24], and of Miller and Shanahan [20] come closest to that of this paper in that they also rely on the situation calculus.
Reference: [24] <author> J.A. Pinto and R. Reiter. </author> <title> Adding a time line to the situation calculus. </title> <booktitle> In Second Symposium on Logical Formalizations of Commonsense Reasoning, </booktitle> <pages> pages 172-177, </pages> <address> Austin, Texas, </address> <month> Jan. </month> <pages> 11-13, </pages> <year> 1993. </year>
Reference-contexts: Below, we provide a comparison along one dimension: abductive planning, which seems to be required by these proposals, and the deductive planning approach of the situation calculus. The approaches of Pinto [23] and Pinto and Reiter <ref> [24] </ref>, and of Miller and Shanahan [20] come closest to that of this paper in that they also rely on the situation calculus. These all differ from us in proposing something like an "actual" path in the tree of situations, corresponding to the way in which the world actually evolves.
Reference: [25] <author> R. Reiter. </author> <title> The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Vladimir Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: While we remain far from achieving these long-range objectives, we have had some modest success in this undertaking. Starting with a solution to the frame problem for deterministic, simple actions (Reiter <ref> [25] </ref>), we have defined and implemented a novel situation calculus-based logic programming language for defining complex agent behaviors (Levesque et al. [14]), and experimented with it in a robotics application (Lesperance et al. [12]), and for software agents (Marcu et al. [18]). <p> those situations s in which picking up (x; t; s) is true, we can describe those properties of the world, for example the position of the agent's hand as a function of t, which must be true during the evolution of the process picking up. 3.1 Successor State Axioms Reiter <ref> [25] </ref>, building on the ideas of Pednault [21] and of Haas [9] and Schubert [29], proposes a solution to the frame problem for deterministic, nonconcurrent actions in the absence of state constraints. This provides a systematic way of obtaining so-called successor state axioms from the effect axioms. <p> ^ (9t)turnonHot (t) 2 c ^ :(9t)turnonCold (t) 2 c _:hot (s) ^ cold (s) ^ (9t)turnonHot (t) 2 c ^ (9t)turnoffCold (t) 2 c _hot (s) ^ cold (s) ^ :(9t)turnoffHot (t) 2 c ^ (9t)turnoffCold (t) 2 c _burn (s)]: 3.2 Action Precondition Axioms The approach of Reiter <ref> [25] </ref> to axiomatizing dynamic worlds in the situation calculus relies on a collection of action precondition axioms, one for each action type, and we also rely on such axioms here. These specify necessary and sufficient conditions under which the action is possible. <p> With the exception of Levesque's work on planning for agents with perceptual actions [13], this appears to be the first significant generalization of Green's classical formulation of deductive planning. 5.2 Regression Lemma 1 provides a basis for establishing legality by regression (Waldinger [33], Pednault [21], Reiter <ref> [25] </ref>). When LN T P C holds, Theorem 2 provides a better regression mechanism, and when also N W C is true, we can use Theorem 3.
Reference: [26] <author> R. Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 64 </volume> <pages> 337-351, </pages> <year> 1993. </year>
Reference-contexts: theory of deductive planning, with continuous time and true concurrency, and where the agent can incorporate external natural event occurrences into her plans. 2 Formal Preliminaries 2.1 The Language of the Situation Calculus We begin by expanding the situation calculus ontology beyond that of Lin and Reiter [16] and Reiter <ref> [26] </ref>. The situation calculus is a sorted second order language with the following sorts, function and predicate symbols: 1. There is a sort action of simple actions. <p> Finally, there are predicate symbols natural, coherent, legal and lntp, to be described later. 2.2 Foundational Axioms for the Concurrent, Temporal Situation Calculus Lin and Reiter [16] and Reiter <ref> [26] </ref> provide foundational axioms for the sequential situation calculus. These need to be generalized to the concurrent, temporal setting, which we now do. Our assumption that all simple actions are instantaneous makes this generalization relatively unproblematic. <p> Finally, we need to reconsider the relation &lt; on situations as axiomatized for the sequential, non-temporal situation calculus in Lin and Reiter [16] and Reiter <ref> [26] </ref>. The intended interpretation of s &lt; s 0 is that situation s 0 is reachable from situation s by some sequence of one or more concurrent actions, each concurrent action of which is possible in that situation resulting from executing the actions preceding it in the sequence.
Reference: [27] <author> E. Sandewall. </author> <title> Combining logic and differential equations for describing real-world systems. </title> <editor> In R.J. Brach-man, H. Levesque, and R. Reiter, editors, </editor> <booktitle> Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (KR'89), </booktitle> <pages> pages 412-420. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, CA, </address> <year> 1989. </year>
Reference-contexts: There have been a few earlier papers on formalizing natural actions and continuous time. Shanahan's approach [30] is embedded in the event calculus (Kowal-ski and Sergot [11]); Sandewall <ref> [27] </ref> relies on a temporal logic. Accordingly, these proposals are difficult to compare with ours, based as it is on the situation calculus. Below, we provide a comparison along one dimension: abductive planning, which seems to be required by these proposals, and the deductive planning approach of the situation calculus.
Reference: [28] <author> R. Scherl and H.J. Levesque. </author> <title> The frame problem and knowledge producing actions. </title> <booktitle> In Proc. AAAI-93, </booktitle> <pages> pages 689-695, </pages> <address> Washington, DC, </address> <year> 1993. </year>
Reference-contexts: Scherl and Levesque <ref> [28] </ref> have given a situation calculus account of sensing (knowledge-producing) actions, and Bacchus, Halpern and Levesque have extended this to include noisy sensors [2]. Lin [15] has extended Reiter's treatment for deterministic primitive actions to nondeterministic ones.
Reference: [29] <author> L.K. Schubert. </author> <title> Monotonic solution of the frame problem in the situation calculus: an efficient method for worlds with fully specified actions. In H.E. </title> <editor> Kyberg, R.P. Loui, and G.N. Carlson, editors, </editor> <booktitle> Knowledge Representation and Defeasible Reasoning, </booktitle> <pages> pages 23-67. </pages> <publisher> Kluwer Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: describe those properties of the world, for example the position of the agent's hand as a function of t, which must be true during the evolution of the process picking up. 3.1 Successor State Axioms Reiter [25], building on the ideas of Pednault [21] and of Haas [9] and Schubert <ref> [29] </ref>, proposes a solution to the frame problem for deterministic, nonconcurrent actions in the absence of state constraints. This provides a systematic way of obtaining so-called successor state axioms from the effect axioms. We have to generalize these successor state axioms slightly, to take concur-rency into account.
Reference: [30] <author> M.P. Shanahan. </author> <title> Representing continuous change in the event calculus. </title> <booktitle> In Proceedings ECAI 90, </booktitle> <pages> pages 598-603, </pages> <year> 1990. </year>
Reference-contexts: There have been a few earlier papers on formalizing natural actions and continuous time. Shanahan's approach <ref> [30] </ref> is embedded in the event calculus (Kowal-ski and Sergot [11]); Sandewall [27] relies on a temporal logic. Accordingly, these proposals are difficult to compare with ours, based as it is on the situation calculus.
Reference: [31] <author> S. Shapiro, Y. Lesperance, and H.J. Levesque. </author> <title> Goals and rational action in the situation calculus a preliminary report. </title> <booktitle> In Working Notes of the AAAI Fall Symposium on Rational Agency: Concepts, Theories, Models and Applications, </booktitle> <address> Cambridge, MA, </address> <year> 1995. </year>
Reference-contexts: Lin [15] has extended Reiter's treatment for deterministic primitive actions to nondeterministic ones. Levesque [13] has given a situation calculus account of planning for agents which can sense their environments. Shapiro, Lesperance and Levesque <ref> [31] </ref> have formalized agent goals and rational actions in the situation calculus. Pinto [23] has proposed a situation calculus-based account of concurrency, natural actions and continuous time.
Reference: [32] <author> E. Ternovskaia. </author> <title> Interval situation calculus. </title> <booktitle> In Proc. of ECAI'94 Workshop W5 on Logic and Change, </booktitle> <pages> pages 153-164, </pages> <address> Amsterdam, </address> <month> August 8-12, </month> <year> 1994. </year>
Reference-contexts: This paper is a further step in the direction of appropriately enriching the situation calculus for this purpose. Specifically, we suitably modify, and build on, the earlier work mentioned above by Pinto [23] and also by Ternovskaia <ref> [32] </ref>. <p> What use, then, is a theory of actions in which all actions are instantaneous? As observed by Pinto [23] and Ternovskaia <ref> [32] </ref>, the trick for making this work in the situation calculus is to conceive of such actions as processes, represented by fluents, and to introduce durationless actions which initiate and terminate these processes. <p> This provides a systematic way of obtaining so-called successor state axioms from the effect axioms. We have to generalize these successor state axioms slightly, to take concur-rency into account. This is quite straightforward, following the proposals of Pinto in his Ph.D. thesis [23] and Ternovskaia <ref> [32] </ref>. So, we will write formulas like: P oss (c; s) oe [picking up (x; do (c; s)) j (9t)start pickup (x; t) 2 c _ picking up (x; s) ^ :(9t)end pickup (x; t) 2 c]: A more interesting example is due to James Allen [1].
Reference: [33] <author> R. Waldinger. </author> <title> Achieving several goals simultaneously. </title> <editor> In E. Elcock and D. Michie, editors, </editor> <booktitle> Machine Intelligence 8, </booktitle> <pages> pages 94-136. </pages> <publisher> Ellis Horwood, Edinburgh, </publisher> <address> Scotland, </address> <year> 1977. </year>
Reference-contexts: With the exception of Levesque's work on planning for agents with perceptual actions [13], this appears to be the first significant generalization of Green's classical formulation of deductive planning. 5.2 Regression Lemma 1 provides a basis for establishing legality by regression (Waldinger <ref> [33] </ref>, Pednault [21], Reiter [25]). When LN T P C holds, Theorem 2 provides a better regression mechanism, and when also N W C is true, we can use Theorem 3.
References-found: 33

