URL: http://pertsserver.cs.uiuc.edu/members/mkgardne/papers/tacas-99.ps.gz
Refering-URL: http://pertsserver.cs.uiuc.edu/members/mkgardne/
Root-URL: http://www.cs.uiuc.edu
Email: fmkgardne,janeliug@cs.uiuc.edu  
Title: Analyzing Stochastic Fixed-Priority Real-Time Systems  
Author: Mark K. Gardner and Jane W.S. Liu 
Address: Urbana, IL 61801, USA  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: Traditionally, real-time systems require that the deadlines of all jobs be met. For many applications, however, this is an overly stringent requirement. An occasional missed deadline may cause decreased performance but is nevertheless acceptable. We present an analysis technique by which a lower bound on the percentage of deadlines that a periodic task meets is determined. We also discuss issues uncovered while implementing the technique in the PERTS real-time system prototyping environment [6, 7].
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. K. Atlas and A. Bestavros. </author> <title> Statistical rate monotonic scheduling. </title> <type> Technical Report BUCS-TR-98-010, </type> <institution> Boston University, </institution> <year> 1998. </year>
Reference-contexts: is still called a critical instant in the literature but it is not the original definition of a critical instant since J i;1 no longer has the longest response time among all jobs in T i . systems: Probabilistic Time Demand Analysis (PTDA) [10] and Statistical Rate Monotonic Scheduling (SRMS) <ref> [1] </ref>. Like the proposed method, PTDA attempts to provide a lower bound on the probability that jobs in a task will complete in time. <p> A job is released only if its task contains sufficient budget to complete in time and if higher priority jobs will not prevent its timely completion. All other jobs are dropped. The analysis given in <ref> [1] </ref> can only be used to compute the average percentage of jobs in each task that will be released for execution (and hence complete in time).
Reference: [2] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: The result is an O (N log 2 N ) algorithm for convolution. As there are many descriptions and implementations of the FFT readily available (e.g., <ref> [2, 8, 9] </ref>), this appears to be the preferred implementation approach. However, several subtleties make the use of the Convolution Theorem less attractive than it would first appear. First, the hidden constant in convolution via FFT is quite large even for efficient implementations.
Reference: [3] <author> J. Lehoczky. </author> <title> Fixed priority scheduling of periodic task sets with arbitrary deadlines. </title> <booktitle> In 11th IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 201-209, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: It ends at the first time instant t at which all jobs in T i and higher priority tasks released before t have completed.) We call such a busy interval an in-phase level- i busy interval. Analogous to the critical instant analysis in [5], it has been shown in <ref> [3] </ref> that it suffices for us to consider only an in-phase level- i busy interval. The reasons are 1. <p> For these reasons, if all jobs in an in-phase level-i busy interval meet their deadlines, the task is schedulable <ref> [3] </ref>. Stochastic Time Demand Analysis described in Section 3 uses this generalization of TDA. We know from the above analysis that the system of tasks in Table 1 is schedulable. However, suppose that a significantly less expensive processor is available which is half as fast.
Reference: [4] <author> J. Lehoczky, L. Sha, and Y. Ding. </author> <title> The rate monotonic scheduling algorithm: Exact characterization and average case behavior. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 166-171, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Table 1. Parameters of the Tasks in Example #1. T i i P i E + T 1 1 300 100 300 0.333 T 3 3 600 200 600 0.333 Total 0.917 Time Demand Analysis (TDA) <ref> [4] </ref> provides a more accurate and general characterization of the ability of arbitrary fixed-priority systems to meet all deadlines. It is based upon the observation that the worst-case response time of a job occurs when it is released at a critical instant.
Reference: [5] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard-real-time environment. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: Several issues uncovered as a result of implementing the algorithm are discussed in Section 4. Finally, Section 5 discusses possible directions of future research. 2 Background and Related Work The periodic task model <ref> [5] </ref> has proven useful in describing the essence of real-time systems. It is the foundation of state-of-the-art techniques for analyzing the behavior of hard real-time systems. <p> A system of real-time tasks is schedulable if all tasks in the system are schedulable. One of the most commonly used fixed-priority assignments is called Rate Monotonic (RM). According to this policy, the shorter the period P i of a task, the higher its priority. In <ref> [5] </ref> it is shown that a system of n tasks scheduled on a RM basis is schedulable if the sum of the maximum utilizations of the tasks, denoted U , satisfies the inequality U n (2 n 1) : (1) The expression on the right hand side of the inequality is <p> For a system of independent preemptive periodic tasks scheduled on a fixed-priority basis, a critical instant of a task occurs when a job in each task is released along with a job from all tasks of equal or higher priority <ref> [5] </ref>. To bound the worst case response time of all the jobs in a task T i , it suffices for us to look at a job that is released at a critical instant. We call this job J i;1 . <p> It ends at the first time instant t at which all jobs in T i and higher priority tasks released before t have completed.) We call such a busy interval an in-phase level- i busy interval. Analogous to the critical instant analysis in <ref> [5] </ref>, it has been shown in [3] that it suffices for us to consider only an in-phase level- i busy interval. The reasons are 1.
Reference: [6] <author> J. W. S. Liu, C. L. Liu, Z. Deng, T. S. Tia, J. Sun, M. Storch, D. Hull, J. L. Redondo, R. Bettati, and A. Silberman. PERTS: </author> <title> A prototyping environment for real-time systems. </title> <journal> International Journal of Software Engineering and Knowledge Engineering, </journal> <volume> 6(2) </volume> <pages> 161-177, </pages> <year> 1996. </year>
Reference-contexts: Table 3. A comparison of STDA bound with simulation results. T i STDA Simulation Ratio T 1 100.0 100:0 0:0 1.000 4 Implementing STDA In this section, we discuss several important issues that were uncovered during the implementation of STDA in the context of the PERTS real-time prototyping environment <ref> [6, 7] </ref>. PERTS is a tool which facilitates the design and analysis of real-time systems by applying theoretical results, where possible, or by simulating the system to determine its behavior. The issues we discuss are not particular to PERTS and must be addressed by any implementation of STDA.
Reference: [7] <author> J. W. S. Liu, J. L. Redondo, Z. Deng, T. S. Tia, R. Bettati, A. Silberman, M. Storch, R. Ha, and W. K. Shih. PERTS: </author> <title> A prototyping environment for real-time systems. </title> <booktitle> In Proceedings of the 14th IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 184-188, </pages> <address> Raleigh-Durham, North Carolina, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Table 3. A comparison of STDA bound with simulation results. T i STDA Simulation Ratio T 1 100.0 100:0 0:0 1.000 4 Implementing STDA In this section, we discuss several important issues that were uncovered during the implementation of STDA in the context of the PERTS real-time prototyping environment <ref> [6, 7] </ref>. PERTS is a tool which facilitates the design and analysis of real-time systems by applying theoretical results, where possible, or by simulating the system to determine its behavior. The issues we discuss are not particular to PERTS and must be addressed by any implementation of STDA.
Reference: [8] <author> H. J. Nussbaumer. </author> <title> Fast Fourier Transform and Convolution Algorithms. </title> <publisher> Springer-Verlag, </publisher> <address> second edition, </address> <year> 1982. </year>
Reference-contexts: The result is an O (N log 2 N ) algorithm for convolution. As there are many descriptions and implementations of the FFT readily available (e.g., <ref> [2, 8, 9] </ref>), this appears to be the preferred implementation approach. However, several subtleties make the use of the Convolution Theorem less attractive than it would first appear. First, the hidden constant in convolution via FFT is quite large even for efficient implementations.
Reference: [9] <author> W. H. Press, S. A. Teukolsky, W. T. Vetterling, and B. P. Flannery. </author> <title> Numerical Recipes in C. </title> <publisher> Cambridge University Press, </publisher> <address> second edition, </address> <year> 1992. </year>
Reference-contexts: The result is an O (N log 2 N ) algorithm for convolution. As there are many descriptions and implementations of the FFT readily available (e.g., <ref> [2, 8, 9] </ref>), this appears to be the preferred implementation approach. However, several subtleties make the use of the Convolution Theorem less attractive than it would first appear. First, the hidden constant in convolution via FFT is quite large even for efficient implementations. <p> Interpolation can be performed in O (N log 2 N ) time so the asymptotic complexity of convolution is not increased. However, it does increase the constant in the bound. Third, sufficient "zero padding" is required to ensure that aliasing does not occur <ref> [9] </ref> and the length of the input vectors are required to be a power of two, both of which increase the length of the input vectors. (Our experience indicates that input vectors are often only 50-75% filled with non-zero data.) In contrast, a direct implementation of convolution only requires that the <p> The time spent performing the FFT ranged from 69.2% (for 256 points) to 76.9% (for 4096 points). The time spent performing interpolation ranged from 15.9% (for 256 points) to 11.7% (for 4096 points). The remainder of the time was spent in manipulating the vectors in preparation for transformation (see <ref> [9] </ref>) and in multiplying the transformed vectors. Thus, reducing the cost of interpolation to zero will only have a small effect on the execution time.
Reference: [10] <author> T.-S. Tia, Z. Deng, M. Shankar, M. Storch, J. Sun, L.-C. Wu, and J. W.-S. Liu. </author> <title> Probabilistic performance guarantee for real-time tasks with varying computation times. </title> <booktitle> In Proceedings, Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 164-173, </pages> <address> Chicago, Illinois, </address> <month> May </month> <year> 1995. </year> <note> IEEE. </note>
Reference-contexts: design of soft real-time 2 This instant is still called a critical instant in the literature but it is not the original definition of a critical instant since J i;1 no longer has the longest response time among all jobs in T i . systems: Probabilistic Time Demand Analysis (PTDA) <ref> [10] </ref> and Statistical Rate Monotonic Scheduling (SRMS) [1]. Like the proposed method, PTDA attempts to provide a lower bound on the probability that jobs in a task will complete in time.
References-found: 10

