URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3794/3794.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: fseonho,agrawalag@cs.umd.edu  
Title: Scheduling Aperiodic and Sporadic Tasks in Hard Real-Time Systems  
Author: Seonho Choi Ashok K. Agrawala 
Date: May 7, 1997  
Address: College Park, MD 20742  
Affiliation: Institute for Advanced Computer Studies Department of Computer Science University of Maryland  
Abstract: The stringent timing constraints as well as the functional correctness are essential requirements of hard real-time systems. In such systems, scheduling plays a very important role in satisfying these constraints. The priority based scheduling schemes have been used commonly due to the simplicity of the scheduling algorithm. However, in the presence of task interdependencies and complex timing constraints, such scheduling schemes may not be appropriate due to the lack of an efficient mechanism to schedule them and to carry out the schedulability analysis. In contrast, the time based scheduling scheme may be used to schedule a set of tasks with greater degree of schedulability achieved at a cost of higher complexity of off-line scheduling. One of the drawbacks of currently available scheduling schemes, however, is known to be their inflexibility in dynamic environments where dynamic processes exist, such as aperiodic and sporadic processes. We develop and analyze scheduling schemes which efficiently provide the flexibility required in real-time systems for scheduling processes arriving dynamically. This enables static hard periodic processes and dynamic processes(aperiodic or sporadic) to be jointly scheduled. fl This work is supported in part by ONR and ARPA under contract N66001-95-C-8619 to the Computer Science Department at the University of Maryland. The views, opinions, and/or findings contained in this report are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of the Advanced Research Projects Agency, ONR or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ashok K. Agrawala, Seonho Choi, and Leyuan Shi. </author> <title> Designing temporal controls. </title> <type> Technical Report CS-TR-3504, </type> <institution> UMIACS-TR-95-81, Department of Computer Science, University of Maryland, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: We believe that this dynamic time-based scheduling scheme is a suitable framework for scheduling dynamic tasks especially in the presence of complex task dependencies and complex timing constraints such as relative timing constraints. The scheduling problem of tasks with relative timing constraints has been addresses in our paper <ref> [1] </ref>. The start time range of task instances are parameterized in terms of start or finish times of already executed task instances, and the parametric functions are evaluated to obtain the valid range of task instance start times.
Reference: [2] <author> N. C. Audsley. </author> <title> Deadline monotonic scheduling. </title> <type> YCS 146, </type> <institution> University of York, Department of Computer Science, </institution> <month> October </month> <year> 1990. </year>
Reference-contexts: A deadline monotonic scheduling algorithm is shown to be optimal for a set of tasks which have deadlines less than or equal to their periods. It assigns priorities according to their deadlines, the shorter the deadline, the higher priority is assigned regardless of their periods <ref> [20, 2] </ref>. For a set of tasks with arbitrary deadlines, it is shown that the optimal priority assignment can't be done in a simple priority assignment method, but requires a pseudo polynomial time algorithm [28]. A synchronization protocol becomes necessary when tasks use shared resources such as semaphores.
Reference: [3] <author> T. P. Baker. </author> <title> A Stack-Based Resource Allocation Policy for RealTime Processes. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <year> 1990. </year>
Reference-contexts: Then, a task, t , can start a new critical section only if t 's priority is higher than all priority ceilings of all the semaphores locked by tasks other than t . In stack-based protocol <ref> [3] </ref>, the concept of preemption level is used instead of the priorities to derive the protocol suitable for both fixed priority and dynamic priority based systems. Also, sharing of multiple-unit resources becomes possible with this protocol. Hard and non-realtime aperiodic tasks can be scheduled within a fixed priority scheduling scheme. <p> The necessary and sufficient schedulability condition for a set of independent tasks with their deadlines equal to their periods is that the total processor utilization of the tasks should be less than or equal to 1 [21]. A dynamic priority ceiling protocol [4] and a stack-based protocol <ref> [3] </ref> have been developed for dynamic priority systems to enable the use of shared resources and to bound the blocking times. Note that the stack based resource allocation protocol may be used for both fixed priority and dynamic priority scheduling algorithms. Also, in [3], it is shown that the stack-based protocol <p> ceiling protocol [4] and a stack-based protocol <ref> [3] </ref> have been developed for dynamic priority systems to enable the use of shared resources and to bound the blocking times. Note that the stack based resource allocation protocol may be used for both fixed priority and dynamic priority scheduling algorithms. Also, in [3], it is shown that the stack-based protocol provides a better schedulability test than that of dynamic priority ceiling protocol. An aperiodic task scheduling problem has been studied under the assumption that only hard periodic tasks exist [16, 15].
Reference: [4] <author> M. Chen and K. Lin. </author> <title> Dynamic Priority Ceilings: A Concurrency Control Protocol for Real-Time Systems. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 2(4) </volume> <pages> 325-346, </pages> <year> 1990. </year>
Reference-contexts: The necessary and sufficient schedulability condition for a set of independent tasks with their deadlines equal to their periods is that the total processor utilization of the tasks should be less than or equal to 1 [21]. A dynamic priority ceiling protocol <ref> [4] </ref> and a stack-based protocol [3] have been developed for dynamic priority systems to enable the use of shared resources and to bound the blocking times. Note that the stack based resource allocation protocol may be used for both fixed priority and dynamic priority scheduling algorithms.
Reference: [5] <author> S. T. Cheng and Ashok K. Agrawala. </author> <title> Allocation and scheduling of real-time periodic tasks with relative timing constraints. </title> <type> Technical Report CS-TR-3402, </type> <institution> UMIACS-TR-95-6, Department of Computer Science, University of Maryland, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: Even though the complexity of the off-line scheduling is NP-Complete in general, the scheduling can be done in a reasonable amount of time in most cases using techniques such as branch and bound or heuristic search algorithms <ref> [29, 12, 5, 32] </ref>. It has been shown that the complexity of non-preemptive scheduling can be dramatically reduced in many cases by decomposition scheduling approach where task instances are decomposed into a sequence of subsets, which are scheduled independently [31]. <p> Also, the time based scheduling scheme can efficiently schedule task sets with relative timing constraints which can't be easily accommodated in priority-based systems <ref> [14, 5] </ref>. Because of these reasons, it is claimed that the time-based scheduling scheme is the most appropriate scheduling approach for hard real-time systems [30]. The aperiodic scheduling problem in time-based scheduling scheme has been addressed in the paper [13].
Reference: [6] <author> H. Chetto and M. Chetto. </author> <title> Scheduling Periodic and Sporadic Task in a Real-Time System. </title> <journal> Information Processing Letters, </journal> <volume> 30(4) </volume> <pages> 177-184, </pages> <year> 1989. </year>
Reference-contexts: The O (N ) acceptance test for a hard aperiodic task is given when a set of independent periodic tasks is scheduled by EDF where N is the total number of task instances in an LCM 1 of the periods of periodic tasks <ref> [7, 6, 8] </ref>. Aperiodic scheduling schemes for EDF have been proposed and studied and the Improved Priority Exchange Algorithm is shown to perform well [26]. 3.1.3 Static Time-based Scheduling In a static time-based scheduling scheme, a calendar for a set of task instances is constructed at pre-runtime. <p> Then A (t) can be scheduled under the proposed EDF if 8 1 i m + 1 :: (t; D a i X (c a j (t)) Proof The proof can be easily derived from the theorem 3.2 and 3.3 in the paper <ref> [6] </ref>. Theorem 1 Let A (t) denote a set of aperiodic tasks defined above.
Reference: [7] <author> H. Chetto and M. Chetto. </author> <title> Some Results of the Earliest Deadline First Algorithm. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-15(10):1261-1269, </volume> <month> October </month> <year> 1989. </year>
Reference-contexts: The O (N ) acceptance test for a hard aperiodic task is given when a set of independent periodic tasks is scheduled by EDF where N is the total number of task instances in an LCM 1 of the periods of periodic tasks <ref> [7, 6, 8] </ref>. Aperiodic scheduling schemes for EDF have been proposed and studied and the Improved Priority Exchange Algorithm is shown to perform well [26]. 3.1.3 Static Time-based Scheduling In a static time-based scheduling scheme, a calendar for a set of task instances is constructed at pre-runtime.
Reference: [8] <author> H. Chetto, M. Silly, and T. Bouchentouf. </author> <title> Dynamic Scheduling of Real-Time Tasks under Precedence Constraints. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 2 </volume> <pages> 181-194, </pages> <year> 1990. </year>
Reference-contexts: The O (N ) acceptance test for a hard aperiodic task is given when a set of independent periodic tasks is scheduled by EDF where N is the total number of task instances in an LCM 1 of the periods of periodic tasks <ref> [7, 6, 8] </ref>. Aperiodic scheduling schemes for EDF have been proposed and studied and the Improved Priority Exchange Algorithm is shown to perform well [26]. 3.1.3 Static Time-based Scheduling In a static time-based scheduling scheme, a calendar for a set of task instances is constructed at pre-runtime. <p> Proposition 1 T and a set of additional aperiodic tasks are schedulable by EDF if and only if T with virtual deadlines and release times is schedulable with the additional aperiodic tasks by EDF. Proof Proof can be derived from the theorem in <ref> [8] </ref>. Optimal Scheduling Algorithm In this section, the optimal scheduling algorithm is presented and its optimality is proved.
Reference: [9] <author> R. I. Davis. </author> <title> Approximate slack stealing algorithms for fixed priority pre-emptive systems. </title> <type> Technical Report YCS 217 (1993), </type> <institution> Department of Computer Science, University of York, </institution> <address> England, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: The optimal slack stealing algorithm is found to be pseudo polynomial [10] and several approximation algorithms have been devised <ref> [9] </ref>. 3.1.2 Dynamic Priority Scheduling The priorities of tasks in dynamic priority scheme are decided at runtime. This means that the task instances from the same task may have different priorities at runtime while in the fixed priority scheme the same priority is used for scheduling them.
Reference: [10] <author> R. I. Davis, K. W. Tindell, and A. Burns. </author> <title> Scheduling slack time in fixed priority pre-emptive systems. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 222-231. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1993. </year> <month> 20 </month>
Reference-contexts: Another approach is slack stealing approach which tries to utilize as much processor time as possible by postponing the execution of hard periodic task executions as long as the schedulability of the hard tasks is not affected <ref> [10, 19, 27] </ref>. The optimal slack stealing algorithm is found to be pseudo polynomial [10] and several approximation algorithms have been devised [9]. 3.1.2 Dynamic Priority Scheduling The priorities of tasks in dynamic priority scheme are decided at runtime. <p> The optimal slack stealing algorithm is found to be pseudo polynomial <ref> [10] </ref> and several approximation algorithms have been devised [9]. 3.1.2 Dynamic Priority Scheduling The priorities of tasks in dynamic priority scheme are decided at runtime.
Reference: [11] <author> M. Dertouzos. </author> <title> Control Robotics: the Procedural Control of Physical Processes. </title> <booktitle> Proceedings of the IFIP Congress, </booktitle> <pages> pages 807-813, </pages> <year> 1974. </year>
Reference-contexts: The earliest deadline first (EDF) scheduling algorithm which assigns the highest priority to a task instance with the closest deadline is known to 5 be optimal for a set of periodic or aperiodic tasks <ref> [21, 11] </ref>. The necessary and sufficient schedulability condition for a set of independent tasks with their deadlines equal to their periods is that the total processor utilization of the tasks should be less than or equal to 1 [21].
Reference: [12] <author> G. Fohler and C. Koza. </author> <title> Heuristic Scheduling for Distributed Real-Time Systems. </title> <type> MARS 6/89, </type> <institution> Technische Universitat Wien, Vienna, Austria, </institution> <month> April </month> <year> 1989. </year>
Reference-contexts: Even though the complexity of the off-line scheduling is NP-Complete in general, the scheduling can be done in a reasonable amount of time in most cases using techniques such as branch and bound or heuristic search algorithms <ref> [29, 12, 5, 32] </ref>. It has been shown that the complexity of non-preemptive scheduling can be dramatically reduced in many cases by decomposition scheduling approach where task instances are decomposed into a sequence of subsets, which are scheduled independently [31]. <p> For example, no correct spare capacity can be obtained in the example case shown in Figure 2. t 1 t 2 12 D R 1 1 0 7 10 According to the algorithm presented in that paper, <ref> [0; 12] </ref> is an execution interval of spare capacity 2, which is not correct.
Reference: [13] <author> Gerhard Fohler. </author> <title> Joint scheduling of distributed complex periodic and hard aperiodic tasks in statically scheduled systems. </title> <booktitle> In IEEE Real-Time Systems Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1995. </year>
Reference-contexts: Because of these reasons, it is claimed that the time-based scheduling scheme is the most appropriate scheduling approach for hard real-time systems [30]. The aperiodic scheduling problem in time-based scheduling scheme has been addressed in the paper <ref> [13] </ref>. The initial schedule is assumed to be given and arriving aperiodic tasks are scheduled at runtime. First, the deadlines of task instances, t j , in the time-based schedule are sorted and the schedule is divided into a set of disjoint execution intervals, I i .
Reference: [14] <author> R. Gerber, W. Pugh, and M. Saksena. </author> <title> Parametric Dispatching of Hard Real-Time Tasks. </title> <journal> IEEE Transactions on Computers. </journal> <note> To appear. </note>
Reference-contexts: Traditionally, this is done by statically allocating resources (time intervals) to the task instances at pre-runtime. Recently, much research effort has been devoted to reduce the complexity of the off-line scheduling algorithms and some systems have been successfully implemented using this approach <ref> [24, 29, 31, 14, 30] </ref>. In this proposal, we develop a time-based scheduling scheme in which the scheduling of resource usages may be done dynamically at run-time and we employ this approach to incrementally schedule arriving tasks. <p> Also, the time based scheduling scheme can efficiently schedule task sets with relative timing constraints which can't be easily accommodated in priority-based systems <ref> [14, 5] </ref>. Because of these reasons, it is claimed that the time-based scheduling scheme is the most appropriate scheduling approach for hard real-time systems [30]. The aperiodic scheduling problem in time-based scheduling scheme has been addressed in the paper [13].
Reference: [15] <author> T.M. Ghazalie and T.P. Baker. </author> <title> Aperiodic servers in a deadline scheduling environment. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 9 </volume> <pages> 31-67, </pages> <year> 1995. </year>
Reference-contexts: Also, in [3], it is shown that the stack-based protocol provides a better schedulability test than that of dynamic priority ceiling protocol. An aperiodic task scheduling problem has been studied under the assumption that only hard periodic tasks exist <ref> [16, 15] </ref>. The O (N ) acceptance test for a hard aperiodic task is given when a set of independent periodic tasks is scheduled by EDF where N is the total number of task instances in an LCM 1 of the periods of periodic tasks [7, 6, 8].
Reference: [16] <author> Homayoun and P. Ramanathan. </author> <title> Dynamic priority scheduling of periodic and aperiodic tasks in hard real-time systems. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 6(2), </volume> <month> March </month> <year> 1994. </year>
Reference-contexts: Also, in [3], it is shown that the stack-based protocol provides a better schedulability test than that of dynamic priority ceiling protocol. An aperiodic task scheduling problem has been studied under the assumption that only hard periodic tasks exist <ref> [16, 15] </ref>. The O (N ) acceptance test for a hard aperiodic task is given when a set of independent periodic tasks is scheduled by EDF where N is the total number of task instances in an LCM 1 of the periods of periodic tasks [7, 6, 8].
Reference: [17] <author> J. P. Lehoczky, L. Sha, and Y. Ding. </author> <title> The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 166-171, </pages> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: This is a sufficient condition for a given set of tasks and not a necessary condition. The exact schedulability condition which is necessary and sufficient is found in <ref> [17] </ref> with the statistical simulation results showing that in general the utilization of the schedulable task set is higher than ln (2). A deadline monotonic scheduling algorithm is shown to be optimal for a set of tasks which have deadlines less than or equal to their periods.
Reference: [18] <author> J. P. Lehoczky, L. Sha, and J. K. Strosnider. </author> <title> Enhanced aperiodic responsiveness in hard real-time environments. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 261-270, </pages> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: One approach is to utilize the aperiodic server concept in which a certain percentage of the processor utilization is reserved for servicing the aperiodic tasks. Several algorithms have been developed and their performances have been compared <ref> [18, 25] </ref>. Another approach is slack stealing approach which tries to utilize as much processor time as possible by postponing the execution of hard periodic task executions as long as the schedulability of the hard tasks is not affected [10, 19, 27].
Reference: [19] <author> John P. Lehoczky and Sandra Ramos-Thuel. </author> <title> An optimal algorithm for scheduling soft-aperiodic tasks in fixed-priority preemptive systems. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 110-123. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1992. </year>
Reference-contexts: Another approach is slack stealing approach which tries to utilize as much processor time as possible by postponing the execution of hard periodic task executions as long as the schedulability of the hard tasks is not affected <ref> [10, 19, 27] </ref>. The optimal slack stealing algorithm is found to be pseudo polynomial [10] and several approximation algorithms have been devised [9]. 3.1.2 Dynamic Priority Scheduling The priorities of tasks in dynamic priority scheme are decided at runtime.
Reference: [20] <author> J.Y. Leung and J. Whitehead. </author> <title> On the Complexity of Fixed-Priority Scheduling of Periodic, Real-Time Tasks. Performance Evaluation, </title> <booktitle> 2(4) </booktitle> <pages> 237-250, </pages> <year> 1982. </year>
Reference-contexts: A deadline monotonic scheduling algorithm is shown to be optimal for a set of tasks which have deadlines less than or equal to their periods. It assigns priorities according to their deadlines, the shorter the deadline, the higher priority is assigned regardless of their periods <ref> [20, 2] </ref>. For a set of tasks with arbitrary deadlines, it is shown that the optimal priority assignment can't be done in a simple priority assignment method, but requires a pseudo polynomial time algorithm [28]. A synchronization protocol becomes necessary when tasks use shared resources such as semaphores.
Reference: [21] <author> C. L. Liu and J. Layland. </author> <title> Scheduling Algorithm for Multiprogramming in a Hard Real-Time Environment. </title> <journal> Journal of the ACM., </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> Jan. </month> <year> 1973. </year>
Reference-contexts: It is well known that rate monotonic scheduling algorithm is optimal for scheduling a set of independent periodic tasks with deadlines at the end of their periods <ref> [21] </ref>. It is optimal in a sense that it can schedule any set of tasks if that is schedulable by any fixed priority scheduling scheme. <p> The earliest deadline first (EDF) scheduling algorithm which assigns the highest priority to a task instance with the closest deadline is known to 5 be optimal for a set of periodic or aperiodic tasks <ref> [21, 11] </ref>. The necessary and sufficient schedulability condition for a set of independent tasks with their deadlines equal to their periods is that the total processor utilization of the tasks should be less than or equal to 1 [21]. <p> The necessary and sufficient schedulability condition for a set of independent tasks with their deadlines equal to their periods is that the total processor utilization of the tasks should be less than or equal to 1 <ref> [21] </ref>. A dynamic priority ceiling protocol [4] and a stack-based protocol [3] have been developed for dynamic priority systems to enable the use of shared resources and to bound the blocking times.
Reference: [22] <author> A. K. Mok. </author> <title> Fundamental Design Problems for the Hard Real-time Environments. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> May </month> <year> 1983. </year>
Reference-contexts: The algorithm to transform a sporadic task to an equivalent pseudo-periodic task has been proposed by Al Mok <ref> [22] </ref>. From the definition of the sporadic tasks, the events which invoke the sporadic task instances may occur at any time instants with the minimum inter-arrival time, ffi. And, once the task is invoked, it has to be finished within its relative deadline from the invocation time, d s .
Reference: [23] <author> L. Sha, R. Rajkumar, and J. P. Lehoczky. </author> <title> Priority Inheritance Protocols: An Approach to Real-Time Synchronization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(9) </volume> <pages> 1175-1185, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: This priority inversion may cause an unbounded blocking times. To solve this problem, several synchronization protocols have been developed. In a priority ceiling protocol <ref> [23] </ref>, a priority ceiling is first assigned to each semaphore, which is equal to the highest priority of the tasks that may use this semaphore.
Reference: [24] <author> T. Shepard and J. A. M. Gagne. </author> <title> A Model of The F-18 Mission Computer Software for Pre-Run Time Scheduling. </title> <booktitle> In IEEE 10 th International Conference on Distributed Computer Systems, </booktitle> <pages> pages 62-69, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Traditionally, this is done by statically allocating resources (time intervals) to the task instances at pre-runtime. Recently, much research effort has been devoted to reduce the complexity of the off-line scheduling algorithms and some systems have been successfully implemented using this approach <ref> [24, 29, 31, 14, 30] </ref>. In this proposal, we develop a time-based scheduling scheme in which the scheduling of resource usages may be done dynamically at run-time and we employ this approach to incrementally schedule arriving tasks.
Reference: [25] <author> B. Sprunt, L. Sha, and J. Lehoczky. </author> <title> Aperiodic task scheduling for hard-real-time systems. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 1(1) </volume> <pages> 27-60, </pages> <month> June </month> <year> 1989. </year> <month> 21 </month>
Reference-contexts: One approach is to utilize the aperiodic server concept in which a certain percentage of the processor utilization is reserved for servicing the aperiodic tasks. Several algorithms have been developed and their performances have been compared <ref> [18, 25] </ref>. Another approach is slack stealing approach which tries to utilize as much processor time as possible by postponing the execution of hard periodic task executions as long as the schedulability of the hard tasks is not affected [10, 19, 27].
Reference: [26] <author> Marco Spuri and Giorgio C. Buttazzo. </author> <title> Efficient aperiodic service under earliest deadline scheduling. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 2-11. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1994. </year>
Reference-contexts: Aperiodic scheduling schemes for EDF have been proposed and studied and the Improved Priority Exchange Algorithm is shown to perform well <ref> [26] </ref>. 3.1.3 Static Time-based Scheduling In a static time-based scheduling scheme, a calendar for a set of task instances is constructed at pre-runtime. At runtime this calendar is referred to execute each task instance at a scheduled time instant.
Reference: [27] <author> Sandra R. Thuel and John P. Lehoczky. </author> <title> Algorithm for scheduling hard aperiodic tasks in fixed-priority systems using slack stealing. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 22-33. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1994. </year>
Reference-contexts: Another approach is slack stealing approach which tries to utilize as much processor time as possible by postponing the execution of hard periodic task executions as long as the schedulability of the hard tasks is not affected <ref> [10, 19, 27] </ref>. The optimal slack stealing algorithm is found to be pseudo polynomial [10] and several approximation algorithms have been devised [9]. 3.1.2 Dynamic Priority Scheduling The priorities of tasks in dynamic priority scheme are decided at runtime.
Reference: [28] <author> K. Tindell, A. Burns, and A. Wellings. </author> <title> An Extendible Approach for Analyzing Fixed Priority Hard Real-Time Tasks. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 6(2), </volume> <month> March </month> <year> 1994. </year>
Reference-contexts: For a set of tasks with arbitrary deadlines, it is shown that the optimal priority assignment can't be done in a simple priority assignment method, but requires a pseudo polynomial time algorithm <ref> [28] </ref>. A synchronization protocol becomes necessary when tasks use shared resources such as semaphores. Sharing resources may lead to a possible priority inversion when a higher priority task is blocked due to the lower priority task possessing the required resource by a higher priority task.
Reference: [29] <author> J. Xu and D. L. Parnas. </author> <title> Scheduling processes with release times, deadlines, precedence, and exclusion relations. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-16(3):360-369, </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: Traditionally, this is done by statically allocating resources (time intervals) to the task instances at pre-runtime. Recently, much research effort has been devoted to reduce the complexity of the off-line scheduling algorithms and some systems have been successfully implemented using this approach <ref> [24, 29, 31, 14, 30] </ref>. In this proposal, we develop a time-based scheduling scheme in which the scheduling of resource usages may be done dynamically at run-time and we employ this approach to incrementally schedule arriving tasks. <p> Even though the complexity of the off-line scheduling is NP-Complete in general, the scheduling can be done in a reasonable amount of time in most cases using techniques such as branch and bound or heuristic search algorithms <ref> [29, 12, 5, 32] </ref>. It has been shown that the complexity of non-preemptive scheduling can be dramatically reduced in many cases by decomposition scheduling approach where task instances are decomposed into a sequence of subsets, which are scheduled independently [31].
Reference: [30] <author> J. Xu and D. L. Parnas. </author> <title> On Satisfying Timing Constraints in Hard-Real-Time Systems. </title> <booktitle> In ACM SIGSOFT'91 Conference on Software for Critical Systems, </booktitle> <pages> pages 132-146, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Traditionally, this is done by statically allocating resources (time intervals) to the task instances at pre-runtime. Recently, much research effort has been devoted to reduce the complexity of the off-line scheduling algorithms and some systems have been successfully implemented using this approach <ref> [24, 29, 31, 14, 30] </ref>. In this proposal, we develop a time-based scheduling scheme in which the scheduling of resource usages may be done dynamically at run-time and we employ this approach to incrementally schedule arriving tasks. <p> Also, the time based scheduling scheme can efficiently schedule task sets with relative timing constraints which can't be easily accommodated in priority-based systems [14, 5]. Because of these reasons, it is claimed that the time-based scheduling scheme is the most appropriate scheduling approach for hard real-time systems <ref> [30] </ref>. The aperiodic scheduling problem in time-based scheduling scheme has been addressed in the paper [13]. The initial schedule is assumed to be given and arriving aperiodic tasks are scheduled at runtime.
Reference: [31] <author> X. Yuan, M. Saksena, and A. Agrawala. </author> <title> A Decomposition Approach to Real-Time Scheduling. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 6(1), </volume> <year> 1994. </year>
Reference-contexts: Traditionally, this is done by statically allocating resources (time intervals) to the task instances at pre-runtime. Recently, much research effort has been devoted to reduce the complexity of the off-line scheduling algorithms and some systems have been successfully implemented using this approach <ref> [24, 29, 31, 14, 30] </ref>. In this proposal, we develop a time-based scheduling scheme in which the scheduling of resource usages may be done dynamically at run-time and we employ this approach to incrementally schedule arriving tasks. <p> It has been shown that the complexity of non-preemptive scheduling can be dramatically reduced in many cases by decomposition scheduling approach where task instances are decomposed into a sequence of subsets, which are scheduled independently <ref> [31] </ref>. Also, the time based scheduling scheme can efficiently schedule task sets with relative timing constraints which can't be easily accommodated in priority-based systems [14, 5]. Because of these reasons, it is claimed that the time-based scheduling scheme is the most appropriate scheduling approach for hard real-time systems [30].
Reference: [32] <author> W. Zhao and K. Ramamritham. </author> <title> Simple and Integrated Heuristic Algorithms for Scheduling Tasks with Time and Resource Constraints. </title> <journal> Journal of Systems and Software, </journal> <pages> pages 195-205, </pages> <year> 1987. </year>
Reference-contexts: Even though the complexity of the off-line scheduling is NP-Complete in general, the scheduling can be done in a reasonable amount of time in most cases using techniques such as branch and bound or heuristic search algorithms <ref> [29, 12, 5, 32] </ref>. It has been shown that the complexity of non-preemptive scheduling can be dramatically reduced in many cases by decomposition scheduling approach where task instances are decomposed into a sequence of subsets, which are scheduled independently [31].
References-found: 32

