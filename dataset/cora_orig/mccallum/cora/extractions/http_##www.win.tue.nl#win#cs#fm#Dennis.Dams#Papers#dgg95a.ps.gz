URL: http://www.win.tue.nl/win/cs/fm/Dennis.Dams/Papers/dgg95a.ps.gz
Refering-URL: http://www.win.tue.nl/cs/fm/Dennis.Dams/Papers/dgg95a-abs.html
Root-URL: http://www.win.tue.nl
Email: Dennis.Dams@phil.ruu.nl.  orna@cs.technion.ac.il.  robg@win.tue.nl.  
Title: Abstract Interpretation of Reactive Systems: Preservation of CTL  Building Correct Reactive Systems  
Author: Dennis Dams Orna Grumberg Rob Gerth (REACT). 
Address: Netherlands.  32000, Israel.  P.O. Box 513, 5600 MB Eindhoven, The Netherlands.  
Affiliation: Department of Philosophy, Utrecht University. Dept. of Philosophy, Utrecht University, Heidelberglaan 8, 3584 CS Utrecht, The  Computer Science Dept., Technion, Haifa  -Dept. of Math. and Computing Science, Eindhoven University of Technology,  
Note: Submitted for publication. This report is a revision of Computing Science Note 94/24 (also see [DGG94]) and also appears as report No. 132 in the Logic Group Preprint Series of the  Partially supported by the U.S.-Israeli Binational Science Foundation.  Currently working in ESPRIT project P6021:  
Abstract: The advent of ever more complex reactive systems in increasingly critical areas calls for the development of automated verification techniques. Model checking is one such technique, which has proven quite successful. However, the state explosion problem remains the stumbling block in many situations. Recent experience indicates that solutions are to be found in the application of techniques for property preserving abstraction and successive approximation of models. Most such applications have so far been based on the property-preserving characteristics of simulation relations. A major drawback of all these results is that they do not offer a satisfactory formalization of the notions of precision and optimality of abstractions. Furthermore, the use of simulation relations poses difficulties when formalizing the preservation of both existential and universal properties over the same abstract domain. The theory of Abstract Interpretation offers a framework for the definition and justification of property preserving abstractions. Furthermore, it provides a method for the effective computation of abstract models directly from the text of a program, thereby avoiding the need for intermediate storage of a full-blown model. Finally, it formalizes the notion of optimality, while allowing to trade precision for speed by computing sub-optimal approximations. However, Abstract Interpretation has traditionally been focussed on the analysis of deterministic programs, in particular through abstractions that preserve invariance properties, i.e., properties that hold in all states along every possible execution path. In this paper, we extend Abstract Interpretation to non-deterministic systems. This results in a uniform basis for the analysis of both existential and universal reactive properties, as expressible in the branching time logic CTL fl . It is shown how optimal abstract models may be constructed by symbolic execution of programs and that approximation may be used to find an optimum between precision and speed. Examples are given to illustrate this. We indicate conditions under which also the falsity of formulae is preserved. Finally, we compare our approach to those based on simulation relations. 
Abstract-found: 1
Intro-found: 1
Reference: [BCG88] <author> M. C. Brown, E. M. Clarke, and O. Grumberg. </author> <title> Characterizing finite Kripke structures in propositional temporal logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 59 </volume> <pages> 115-131, </pages> <year> 1988. </year>
Reference-contexts: However, such an abstract transition relation ff R will only exist if there exists a consistent bisimulation from (; R) to ( ff ; ff R) (see, e.g., <ref> [BCG88] </ref>), which is a much too strong condition, as it results in the falsity of CTL fl formulae being preserved as well. Our solution is to define instead two transition relations on ff ; one preserving universal properties, and the other existential properties. <p> CTL fl is strongly preserved iff the relation ae fi ff defined by ae (c; a) , ff (c) = a is a consistent bisimulation from (; I ; R) to ( ff ; ff I ; ff R F [ ff R C ). PROOF. See <ref> [BCG88] </ref>.
Reference: [BFH + 92] <author> A. Bouajjani, J.-C. Fernandez, N. Halbwachs, P. Raymond, and C.Ratel. </author> <title> Minimal state graph generation. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 18(3) </volume> <pages> 247-271, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: The argument for ' of the form 9 is similar. 2 So, mixed abstractions allow verification of full CTL fl while the degree of reduction is determined by the choice of the abstract domain and may hence be arbitrarily large. In contrast, reductions w.r.t. bisimulation equivalence <ref> [BFH + 92] </ref> only allow a limited reduction.
Reference: [BKS83] <author> R.J.R. Back and R. Kurki-Suonio. </author> <title> Decentralization of process nets with centralized control. </title> <booktitle> In 2nd ACM SIGACT-SIGOPS Symp. on PoDC, </booktitle> <pages> pages 131-142. </pages> <publisher> ACM, </publisher> <year> 1983. </year>
Reference-contexts: In order to further develop the theory, we first need to fix a programming language. We use a language which is based on action systems <ref> [BKS83] </ref>, which, although being very simple, will help to grasp the idea of how to abstractly interpret operations in real programming languages, as it contains rudimentary forms of the common notions of assignment, test and loop.
Reference: [CC77] <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation: A unified lattice model for static analysis of programs by construction or approximation of fixpoints. </title> <booktitle> In Proceedings 4th ACM Symp. Principles Prog. Lang., </booktitle> <pages> pages 238-252, </pages> <address> Los Angeles, California, </address> <year> 1977. </year>
Reference-contexts: Such abstraction techniques are formalized in the framework of Abstract Interpretation <ref> [CC77] </ref>, which was originally conceived as a unifying theory of compile-time (data-flow) analyses.
Reference: [CC79] <author> P. Cousot and R. Cousot. </author> <title> Systematic design of program analysis frameworks. </title> <booktitle> In Proceedings 6th ACM Symp. Principles Prog. Lang., </booktitle> <pages> pages 269-282, </pages> <address> San Antonio, Texas, </address> <year> 1979. </year>
Reference-contexts: See, e.g., <ref> [CC79] </ref>. Often, the abstract approximation order is defined in terms of the concrete by a a 0 , fl (a) v fl (a 0 ). <p> Hence, we should preferably choose the abstract domain in such a way that these atoms are small. See <ref> [CC79] </ref> for a variety of techniques for the construction of suitable abstract domains. Though being sufficient, the condition required in Lemma 5.1.1 is not necessary. <p> This approach corresponds to the merge over all paths analysis of <ref> [CC79] </ref>. 5.2 Computing approximations One may deliberately choose to compute non-optimal abstractions by specifying approximations to the abstract interpretations of the c i and t i .
Reference: [CC92a] <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation and application to logic programs. </title> <journal> Journal of Logic Programming, </journal> <volume> 13 </volume> <pages> 103-179, </pages> <year> 1992. </year>
Reference-contexts: An abstraction function is given which maps any concrete system to one such representative. Hence, by comparing a computed abstraction to this representative, we are still able to discuss optimality issues. A more extensive introduction to Abstract Interpretation and overview of its uses can be found in <ref> [CC92a] </ref> and [CC92b]. The relation transformers 99 and 89 ; (bi)simulations We use two relation transformers which lift transition relations on states to relations on sets of states. 2.0.4 DEFINITION. Let A and B be sets and R A fi B.
Reference: [CC92b] <author> P. Cousot and R. Cousot. </author> <title> Abstract interpretation frameworks. </title> <journal> Journal of Logic and Computation, </journal> <volume> 2(4) </volume> <pages> 511-547, </pages> <year> 1992. </year>
Reference-contexts: An abstraction function is given which maps any concrete system to one such representative. Hence, by comparing a computed abstraction to this representative, we are still able to discuss optimality issues. A more extensive introduction to Abstract Interpretation and overview of its uses can be found in [CC92a] and <ref> [CC92b] </ref>. The relation transformers 99 and 89 ; (bi)simulations We use two relation transformers which lift transition relations on states to relations on sets of states. 2.0.4 DEFINITION. Let A and B be sets and R A fi B.
Reference: [CES86] <author> E.M. Clarke, </author> <title> E.A. Emerson, and A.P. Sistla. Automatic verification of finite-state concurrent systems using temporal logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> January </month> <year> 1986. </year>
Reference-contexts: 1 Introduction In the model-checking approach <ref> [CES86, LP85, QS81] </ref> to program verification, a model of the program is constructed over which formulae are checked for satisfaction. The model reflects the possible behaviours of the program, the formulae express certain required properties of such behaviours.
Reference: [CFM94] <author> M. Codish, M. Falaschi, and K. Marriott. </author> <title> Suspension analysis for concurrent logic programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(3) </volume> <pages> 649-686, </pages> <month> May </month> <year> 1994. </year>
Reference: [CGL94] <author> E.M. Clarke, O. Grumberg, and D.E. </author> <title> Long. Model checking and abstraction. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(5), </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: Since then, it has been re-adapted to nondeterministic transition systems and has become popular in the areas of program refinement and verification, see, e.g., [Sif82, Sif83]. [Dil89, Kur89] focus on trace (linear time) semantics and universal safety and live-ness properties. More recently, <ref> [CGL94, GL93] </ref> consider branching time semantics and preservation of both 8CTL fl as well as CTL fl . <p> The abstract states are then representations of the equivalence classes of . It is shown that universal properties are preserved from the abstract to the concrete model. 21 <ref> [CGL94] </ref> also indicates how abstract models may be computed by abstract interpretations of the operations in a program. However, their notion of approximation is based on the subset ordering on abstract transition relations; they do not have the approximation relation which allows non-optimal abstract interpretations of individual operations.
Reference: [CIY94] <author> R. Cleaveland, S.P. Iyer, and D. Yankelevich. </author> <title> Abstractions for preserving all CTL fl formulae. </title> <type> Technical Report 94-03, </type> <institution> N.C. State University, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: As in [LGS + 93], the relation between abstract and concrete systems is defined through simulations. In addition, Kelb shows how formulae from the full -calculus may be verified by combining two types of abstractions through a so-called truth-failure-connection. <ref> [CIY94] </ref> is based on an early version ([DGG93b]) of this paper and independently develops the idea of mixing both free and constrained abstractions in a single abstract system in order to attain preservation of full CTL fl , and presents an optimality result about this. [CR94] presents a framework for the
Reference: [CR94] <author> R. Cleaveland and J. Riely. </author> <title> Testing-based abstractions for value-passing systems. </title> <editor> In B. Jonsson and J. Parrow, editors, </editor> <booktitle> CONCUR '94: Concurrency Theory, Lecture Notes in Computer Science 836, </booktitle> <pages> pages 417-432. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1994. </year>
Reference-contexts: abstractions through a so-called truth-failure-connection. [CIY94] is based on an early version ([DGG93b]) of this paper and independently develops the idea of mixing both free and constrained abstractions in a single abstract system in order to attain preservation of full CTL fl , and presents an optimality result about this. <ref> [CR94] </ref> presents a framework for the abstract interpretation of processes that pass values. Simulations to specify the relation between concrete and abstract systems are a generalization of our approach using Galois connections.
Reference: [DGD + 94] <author> D. Dams, R. Gerth, G. Dohmen, R. Herrmann, P. Kelb, and H. Pargmann. </author> <title> Model checking using adaptive state and data abstraction. </title> <note> In Dill [Dil94]. </note>
Reference-contexts: If true is returned, then we know that C j= :', i.e., C 6j= '. Of course, the dual abstraction should be well-chosen for this. We do not further investigate this point; solutions can be found in <ref> [DGD + 94] </ref>. The same idea of constructing an abstract model by abstract interpretation of program operations, although based on a different theoretical framework ([LGS + 93], see Sect. 8 for a comparison), is applied to a real-life example in [Gra94]. <p> In [KDG95], approximations to the transition relation of StateCharts ([Har87]) are used to verify -calculus properties of a production cell ([DHKS95]) in a compositional fashion. In [DGG93a] and <ref> [DGD + 94] </ref>, a method is developed which aims at full automation of these steps. 6 Example In this section we illustrate the theory on a small example. <p> However, it may well be the case that we can identify a subset of CTL fl in which all the properties of interest can be expressed. Such a subset induces a coarser equivalence on the concrete states, in general. In [DGG93a] and <ref> [DGD + 94] </ref>, we develop algorithms which can be used to reduce the system with respect to the equivalences induced by 8CTL fl and by a single ACTL formula. 8 Related Work Property-preserving abstractions of reactive systems have been the topic of intensive research lately. <p> In the light of the quest for fully automated verification methods, we are currently investigating the use of partition refinement algorithms for the construction of strongly preserving models; see the papers [DGG93a] and <ref> [DGD + 94] </ref>. Other, rather preliminary ideas point in the direction of using theorem provers and algebraic manipulation tools. Although the problem is undecidable in general, there may well be interesting subclasses that can be decided efficiently.
Reference: [DGG93a] <author> D. Dams, R. Gerth, and O. Grumberg. </author> <title> Generation of reduced models for checking fragments of CTL. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> Proc. Fifth Conf. on Computer-Aided Verification (CAV), number 697 in Lecture Notes in Computer Science, </booktitle> <pages> pages 479-490. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1993. </year>
Reference-contexts: In [KDG95], approximations to the transition relation of StateCharts ([Har87]) are used to verify -calculus properties of a production cell ([DHKS95]) in a compositional fashion. In <ref> [DGG93a] </ref> and [DGD + 94], a method is developed which aims at full automation of these steps. 6 Example In this section we illustrate the theory on a small example. <p> Hence, with our methodology, it is impossible to verify property (9) through a finite abstraction. Nevertheless, an interesting question is how the refinement of an abstract model, in order to decide indeterminate results, can be computed. In <ref> [DGG93a] </ref> we identify conditions under which a strongly preserving abstraction may be computed by a successive refinement which is guided by the form of the formula to be checked. <p> However, it may well be the case that we can identify a subset of CTL fl in which all the properties of interest can be expressed. Such a subset induces a coarser equivalence on the concrete states, in general. In <ref> [DGG93a] </ref> and [DGD + 94], we develop algorithms which can be used to reduce the system with respect to the equivalences induced by 8CTL fl and by a single ACTL formula. 8 Related Work Property-preserving abstractions of reactive systems have been the topic of intensive research lately. <p> In the light of the quest for fully automated verification methods, we are currently investigating the use of partition refinement algorithms for the construction of strongly preserving models; see the papers <ref> [DGG93a] </ref> and [DGD + 94]. Other, rather preliminary ideas point in the direction of using theorem provers and algebraic manipulation tools. Although the problem is undecidable in general, there may well be interesting subclasses that can be decided efficiently.
Reference: [DGG93b] <author> D. Dams, O. Grumberg, and R. Gerth. </author> <title> Abstract interpretation of reactive systems: </title> <address> Abstractions preserving ACTL fl , ECTL fl and CTL fl . Draft, </address> <month> July </month> <year> 1993. </year>
Reference: [DGG94] <author> D. Dams, O. Grumberg, and R. Gerth. </author> <title> Abstract interpretation of reactive systems: Abstractions preserving 8CTL fl , 9CTL fl and CTL fl . In E.-R. </title> <editor> Olderog, editor, </editor> <booktitle> Proceedings of the IFIP WG2.1/WG2.2/WG2.3 Working Conference on Programming Concepts, Methods and Calculi (PROCOMET), IFIP Transactions, </booktitle> <address> Amsterdam, </address> <month> June </month> <year> 1994. </year> <note> North-Holland/Elsevier. 25 </note>
Reference: [DHKS95] <author> W. Damm, H. Hungar, P. Kelb, and R. Schlor. </author> <title> Using graphical specification languages and symbolic model checking in the verification of a production cell. </title> <editor> In C. Lewerenz and T. Lindner, editors, </editor> <title> Formal Development of Reactive Systems: Case Study Production Cell, </title> <booktitle> number 891 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year>
Reference: [Dil89] <author> D.L. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-Independent Circuits. </title> <publisher> ACM Distinguished Dissertations. The MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: In [Mil71], Milner introduced the term simulation to denote a homomorphism between deterministic systems. Since then, it has been re-adapted to nondeterministic transition systems and has become popular in the areas of program refinement and verification, see, e.g., [Sif82, Sif83]. <ref> [Dil89, Kur89] </ref> focus on trace (linear time) semantics and universal safety and live-ness properties. More recently, [CGL94, GL93] consider branching time semantics and preservation of both 8CTL fl as well as CTL fl .
Reference: [Dil94] <editor> D. Dill, editor. </editor> <booktitle> Proc. Sixth Conf. on Computer-Aided Verification (CAV), number 818 in Lecture Notes in Computer Science, </booktitle> <year> 1994. </year>
Reference: [EH86] <author> E.A. Emerson and J.Y. Halpern. </author> <title> Sometimes and not never revisited: On branching versus linear time. </title> <journal> Journal of the ACM, </journal> <volume> 33(1) </volume> <pages> 151-178, </pages> <year> 1986. </year>
Reference-contexts: The properties may be formalized by expressing them in a formal logic whose formulae can be interpreted over transition systems. One commonly used logic is CTL fl (computation tree logic, see <ref> [EH86] </ref>). It contains universal and existential quantification over execution paths, as well as temporal operators that express that, along a path, some property will hold (a) in the next state, (b) in every state (safety), or (c) in some state (liveness). The structure of this paper is as follows.
Reference: [Gin68] <author> A. Ginzburg. </author> <title> Algebraic Theory of Automata. </title> <booktitle> ACM Monograph Series. </booktitle> <publisher> Academic Press, </publisher> <address> New York/London, </address> <year> 1968. </year>
Reference-contexts: Most of these efforts are based on the notion of simulation. Homomophisms (see, e.g., <ref> [Gin68] </ref>), used in automata theory to construct language preserving reductions of automata, can be seen as a precursor of this.
Reference: [GL93] <author> S. Graf and C. Loiseaux. </author> <title> A tool for symbolic program verification and abstraction. </title> <editor> In C. Cour-coubetis, editor, </editor> <booktitle> Proceedings of the Fifth Conference on Comput.-Aided Verification, </booktitle> <publisher> LNCS 697. Springer-Verlag, </publisher> <month> July </month> <year> 1993. </year>
Reference-contexts: Since then, it has been re-adapted to nondeterministic transition systems and has become popular in the areas of program refinement and verification, see, e.g., [Sif82, Sif83]. [Dil89, Kur89] focus on trace (linear time) semantics and universal safety and live-ness properties. More recently, <ref> [CGL94, GL93] </ref> consider branching time semantics and preservation of both 8CTL fl as well as CTL fl .
Reference: [Gra94] <author> S. Graf. </author> <title> Verification of a distributed cache memory by using abstractions. </title> <note> In Dill [Dil94]. To appear in Distributed Computing. </note>
Reference-contexts: The same idea of constructing an abstract model by abstract interpretation of program operations, although based on a different theoretical framework ([LGS + 93], see Sect. 8 for a comparison), is applied to a real-life example in <ref> [Gra94] </ref>. Graf shows in that paper how a distributed cache memory, which is in principle an infinite state system because request queues are unbounded, can be verified by providing a finite abstract domain and corresponding abstract operations. <p> Although the model checking procedure itself is an automated process, it is not obvious how the choice of an appropriate abstract domain with corresponding abstract operations, as well as the proofs that these operations satisfy the conditions of Def. 5.0.2, can be performed in an automated fashion. In <ref> [Gra94] </ref>, the abstract domain has to be provided by the user of the method, and the proofs for the abstract operators form a difficult step in the method.
Reference: [Har87] <author> D. Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference: [KDG95] <author> P. Kelb, D. Dams, and R. Gerth. </author> <title> Efficient symbolic model checking of the full -calculus using compositional abstractions. </title> <note> To appear, </note> <month> March </month> <year> 1995. </year>
Reference-contexts: In [Gra94], the abstract domain has to be provided by the user of the method, and the proofs for the abstract operators form a difficult step in the method. In <ref> [KDG95] </ref>, approximations to the transition relation of StateCharts ([Har87]) are used to verify -calculus properties of a production cell ([DHKS95]) in a compositional fashion. <p> Other, rather preliminary ideas point in the direction of using theorem provers and algebraic manipulation tools. Although the problem is undecidable in general, there may well be interesting subclasses that can be decided efficiently. In a recent paper, <ref> [KDG95] </ref>, we apply the ideas developed in this paper and in [Kel94] to verify -calculus properties of a production cell ([DHKS95]) in a compositional fashion. 24 Acknowledgements We thank Susanne Graf for many interesting and stimulating discussions, and Nissim Francez for his helpful comments. Anthony McIsaac pointed out some mistakes.
Reference: [Kel94] <author> P. Kelb. </author> <title> Model checking and abstraction: A framework preserving both truth and failure information, </title> <booktitle> 1994. </booktitle> <address> OFFIS, Oldenburg, Germany. </address>
Reference-contexts: Again, preservation of the full -calculus is only shown for bisimilar abstractions. A recent paper by Kelb, <ref> [Kel94] </ref>, also discusses the preservation of universal and existential - calculus properties within the framework of Abstract Interpretation. As in [LGS + 93], the relation between abstract and concrete systems is defined through simulations. <p> Other, rather preliminary ideas point in the direction of using theorem provers and algebraic manipulation tools. Although the problem is undecidable in general, there may well be interesting subclasses that can be decided efficiently. In a recent paper, [KDG95], we apply the ideas developed in this paper and in <ref> [Kel94] </ref> to verify -calculus properties of a production cell ([DHKS95]) in a compositional fashion. 24 Acknowledgements We thank Susanne Graf for many interesting and stimulating discussions, and Nissim Francez for his helpful comments. Anthony McIsaac pointed out some mistakes. The anony mous referees are acknowledged for their valuable suggestions.
Reference: [Kri63] <author> S. Kripke. </author> <title> A semantical analysis of modal logic I: normal modal propositional calculi. </title> <journal> Zeitschrift fur Mathematische Logik und Grundlagen der Mathematik, </journal> <volume> 9 </volume> <pages> 67-96, </pages> <year> 1963. </year> <note> Announced in Journal of Symbolic Logic, 24, 1959, p. 323. </note>
Reference: [Kur89] <author> R. P. Kurshan. </author> <title> Analysis of discrete event coordination. </title> <editor> In J. W. de Bakker, W.-P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Proceedings of the Workshop on Stepwise Refinement of Distributed Systems: Models, Formalisms, Correctness, volume 430 of Lecture Notes in Computer Science, </booktitle> <pages> pages 414-454. </pages> <publisher> Springer, </publisher> <year> 1989. </year>
Reference-contexts: In [Mil71], Milner introduced the term simulation to denote a homomorphism between deterministic systems. Since then, it has been re-adapted to nondeterministic transition systems and has become popular in the areas of program refinement and verification, see, e.g., [Sif82, Sif83]. <ref> [Dil89, Kur89] </ref> focus on trace (linear time) semantics and universal safety and live-ness properties. More recently, [CGL94, GL93] consider branching time semantics and preservation of both 8CTL fl as well as CTL fl . <p> More recently, [CGL94, GL93] consider branching time semantics and preservation of both 8CTL fl as well as CTL fl . In these papers, as well as in <ref> [Kur89] </ref>, the relation between concrete and abstract model is defined by means of a homomorphism h, which induces an equivalence relation on the concrete states, defined by c d , h (c) = h (d). The abstract states are then representations of the equivalence classes of .
Reference: [LGS + 93] <author> C. Loiseaux, S. Graf, J. Sifakis, A. Bouajjani, and S. Bensalem. </author> <title> Property preserving abstractions for the verification of concurrent systems. </title> <type> Spectre technical report RTC40, </type> <institution> LGI/IMAG, Grenoble, France, </institution> <year> 1993. </year> <note> To appear in Formal Methods in System Design. </note>
Reference-contexts: Also, preservation of existential properties is only possible via abstractions which are bisimilar to the concrete model, thus only allowing for relatively small reductions in the size of models. In <ref> [LGS + 93] </ref>, the preservation results for simulations are generalized for the case of the -calculus. <p> Again, preservation of the full -calculus is only shown for bisimilar abstractions. A recent paper by Kelb, [Kel94], also discusses the preservation of universal and existential - calculus properties within the framework of Abstract Interpretation. As in <ref> [LGS + 93] </ref>, the relation between abstract and concrete systems is defined through simulations. <p> This point is discussed in the following comparison of our work with that of <ref> [LGS + 93] </ref>. 8.1 Comparing the simulation and Galois connection approaches We focus on free abstractions. <p> In fact, requirement (11) implies that it is useless to have a ae which is not functional. This is expressed in the following lemma (which can be found in <ref> [LGS + 93] </ref>). It implies that whenever ae (c; a) and ae (c; a 0 ) (a 6= a 0 ) for some c i.e, ae is not functional then a and a 0 are bisimilar. <p> Because any minimal solution ff R satisfies ff R = ae 1 Rae (see <ref> [LGS + 93] </ref>), (*) is equivalent to ae 1 aeae 1 Rae ae 1 Raeae 1 ae. <p> Because aeae 1 ae = ae and therefore also ae 1 aeae 1 = ae 1 , this is equivalent to ae 1 Rae ae 1 Rae, which is true. 2 So, in order to be able to distinguish optimal abstractions from approximations, <ref> [LGS + 93] </ref> makes assumption (11), which renders their framework less general than the Galois connection approach, because, under the reasonable assumption that the abstract system does not contain bisimilar states, it forces ae to be functional. Consider Fig. 6 again.
Reference: [LP85] <author> O. Lichtenstein and A. Pnueli. </author> <title> Checking that finite state concurrent programs satisfy their linear specification. </title> <booktitle> In Proceedings of the Twelfth ACM Symposium on the Principles of Programming Languages (POPL), </booktitle> <pages> pages 97-107, </pages> <address> New Orleans, Louisiana, </address> <month> January </month> <year> 1985. </year> <note> ACM Press. </note>
Reference-contexts: 1 Introduction In the model-checking approach <ref> [CES86, LP85, QS81] </ref> to program verification, a model of the program is constructed over which formulae are checked for satisfaction. The model reflects the possible behaviours of the program, the formulae express certain required properties of such behaviours.
Reference: [Mar93] <author> K. Marriott. </author> <title> Frameworks for abstract interpretation. </title> <journal> Acta Informatica, </journal> <volume> 30(2) </volume> <pages> 103-129, </pages> <year> 1993. </year>
Reference-contexts: In the Galois insertion framework, if such an optimal function ff f exists, it is defined by ff f = ffffifffifl. A number of weaker frameworks than the Galois connection framework have been proposed in which the abstraction and/or concretization functions are replaced by relations (see <ref> [Mar93] </ref> for an overview).
Reference: [Mil71] <author> R. Milner. </author> <title> An algebraic definition of simulation between programs. </title> <booktitle> In Proceedings of the Second International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 481-489. BCS, </pages> <year> 1971. </year>
Reference-contexts: A (bi)simulation oe is consistent iff oe (s 1 ; s 2 ) implies fp 2 Lit j kpk 3 s 1 g = fp 2 Lit j kpk 3 s 2 g. An equivalent definition of simulation is the following (see, e.g., <ref> [Mil71] </ref>). <p> From this point of view, the by now standard terminology R 1 simulates R 2 , which was introduced in <ref> [Mil71] </ref>, is awkward. 6 3 Abstract Transition Systems The definition of an abstract system A starts from a given poset ( ff ; ) of abstract states together with a Galois insertion (ff; fl) from (P (); ) to ( ff ; ) which determines its relation to the concrete states. <p> In <ref> [Mil71] </ref>, Milner introduced the term simulation to denote a homomorphism between deterministic systems.
Reference: [Par81] <author> D. Park. </author> <title> Concurrency and automata on infinite sequences. </title> <booktitle> In 5th GI-Conference on Theoretical Computer Science, number 104 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference: [QS81] <author> J. P. Queille and J. Sifakis. </author> <title> Specification and verification of concurrent systems in CESAR. </title> <booktitle> In Proceedings of the 5th International Symposium on Programming, volume 137 of Lecture Notes in Computer Science, </booktitle> <pages> pages 337-351. </pages> <publisher> Springer, </publisher> <year> 1981. </year> <month> 26 </month>
Reference-contexts: 1 Introduction In the model-checking approach <ref> [CES86, LP85, QS81] </ref> to program verification, a model of the program is constructed over which formulae are checked for satisfaction. The model reflects the possible behaviours of the program, the formulae express certain required properties of such behaviours.
Reference: [Sif82] <author> J. Sifakis. </author> <title> Property preserving homomorphisms and a notion of simulation for transition systems. </title> <institution> Rapport de Recherche 332, IMAG, Grenoble, France, </institution> <month> November </month> <year> 1982. </year>
Reference-contexts: In [Mil71], Milner introduced the term simulation to denote a homomorphism between deterministic systems. Since then, it has been re-adapted to nondeterministic transition systems and has become popular in the areas of program refinement and verification, see, e.g., <ref> [Sif82, Sif83] </ref>. [Dil89, Kur89] focus on trace (linear time) semantics and universal safety and live-ness properties. More recently, [CGL94, GL93] consider branching time semantics and preservation of both 8CTL fl as well as CTL fl .
Reference: [Sif83] <author> J. Sifakis. </author> <title> Property preserving homomorphisms of transition systems. </title> <editor> In E. Clarke and D. Kozen, editors, </editor> <booktitle> 4th Workshop on Logics of Programs, number 164 in Lecture Notes in Computer Science, </booktitle> <pages> pages 458-473, </pages> <address> Pittsburgh, June 1983. </address> <publisher> Springer Verlag. </publisher> <pages> 27 </pages>
Reference-contexts: In [Mil71], Milner introduced the term simulation to denote a homomorphism between deterministic systems. Since then, it has been re-adapted to nondeterministic transition systems and has become popular in the areas of program refinement and verification, see, e.g., <ref> [Sif82, Sif83] </ref>. [Dil89, Kur89] focus on trace (linear time) semantics and universal safety and live-ness properties. More recently, [CGL94, GL93] consider branching time semantics and preservation of both 8CTL fl as well as CTL fl .
References-found: 36

