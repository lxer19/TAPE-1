URL: ftp://ftp.cs.unc.edu/pub/users/jeffay/papers/RTSS-91.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/real-time.html
Root-URL: http://www.cs.unc.edu
Title: On Non-Preemptive Scheduling of Periodic and Sporadic Tasks  
Author: Kevin Jeffay Donald F. Stanat Charles U. Martel 
Affiliation: University of North Carolina at Chapel Hill Department of Computer Science  University of California at Davis Computer Science Division  
Note: In: Proceedings of the Twelfth IEEE Real-Time Systems Symposium, San Antonio, Texas, December 1991, IEEE Computer Society Press, pp. 129-139.  1 Introduction Supported in parts by grants from the National Science Foundation (number CCR-9110938), and from Digital Equipment Corporation. Supported by a grant from the National Science Foundation (number CCR-9023727).  
Abstract: This paper examines a fundamental problem in the theory of real-time scheduling, that of scheduling a set of periodic or sporadic tasks on a uniprocessor without preemption and without inserted idle time. We exhibit a necessary and sufficient set of conditions C for a set of periodic or sporadic tasks to be schedulable for arbitrary release times of the tasks. We then show that any set of periodic or sporadic tasks that satisfies conditions C can be scheduled with an earliest deadline first (EDF) scheduling algorithm. We also address the question of schedulability of a set of tasks with specified release times. For sets of sporadic tasks with specified release times, we show that the conditions C are again necessary and sufficient for schedulability. However, for sets of periodic tasks with specified release times, the conditions C, while sufficient, are not necessary. In fact, we show that determining whether a set of periodic tasks with specified release times is schedulable is intractable (i.e., NP-hard in the strong sense). Moreover, we show that the existence of a universal algorithm for scheduling periodic tasks with specified release times would imply that P = NP. The concept of a task that is invoked repeatedly is central to both the design and analysis of real-time systems. In particular, formal studies of real-time systems frequently represent the time-constrained processing requirements of the system as a set of periodic or sporadic tasks with deadlines [Liu & Layland 73, Leung & Merrill 80, Mok 83]. A periodic task is invoked at regular intervals, while a sporadic task is invoked at arbitrary times but with a specified minimum time interval between invocations. In practice, periodic tasks are commonly found in applications such as avionics and process control when accurate control requires continual sampling and processing of data. Sporadic tasks are associated with event-driven processing such as responding to user inputs or non-periodic device interrupts; these events occur repeatedly, but the time interval between consecutive occurrences varies and can be arbitrarily large. Periodic and sporadic tasks were used, for example, to represent the timing constraints in an interactive 3-dimensional graphics display system used for research in virtual worlds [Chung et al. 89, Jeffay 91]. The graphics system uses a head-mounted display system consisting of a helmet with miniature television monitors embedded in it, and hardware for tracking the position of the helmet and a handheld pointing device. A computer generated image of a 3-dimensional virtual world is displayed on the television monitors in the helmet. The goal of the system is to track the users head and the pointing device in real-time and to update the image displayed in the helmet so as to maintain the illusion that the user is immersed in an artificial world. There are two separate real-time concerns in this application. First, the system must provide an image to update the display approximately every 30 milliseconds. Generating a new image is naturally represented as a periodic process. Second, as the users head or the pointing device is moved, the motions must be tracked and the consequences incorporated into the generation of the next image. Because both the users head and the pointing device may remain stationary for some time, the process associated with tracking them is invoked sporadically. Given a real-time system, the goal is to schedule the systems tasks on a processor, or processors, so that each task completes execution before a specified deadline. In this paper we consider a fundamental real-time scheduling problem, that of non-preemptive scheduling of a set of periodic or sporadic tasks on a uniprocessor. Non-preemptive scheduling on a uniprocessor is important for a variety of reasons: 
Abstract-found: 1
Intro-found: 1
References-found: 0

