URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-89-830/CS-TR-89-830.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-89-830/
Root-URL: http://www.cs.wisc.edu
Title: An Empirical Study of the Reliability of UNIX Utilities  
Author: Barton P. Miller Lars Fredriksen Bryan So 
Keyword: Content Indicators D.2.5 (Testing and Debugging), D.4.9 (Programs and Utilities), General term: reliability.  
Address: 1210 W. Dayton Street Madison, Wisconsin 53706  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  
Note: so  Research supported in part by National Science Foundation grants CCR-8703373 and CCR-8815928, Office of Naval Research grant N00014-89-J-1222, and a Digital Equipment Corporation External Research Grant. Copyright 1989 Miller, Fredriksen, and So.  
Email: bart  fredriks  Summary  
Web: cs.wisc.edu  asiago.cs.wisc.edu  cs.wisc.edu  
Abstract: Operating system facilities, such as the kernel and utility programs, are typically assumed to be reliable. In our recent experiments, we have been able to crash 25-33% of the utility programs on any version of UNIX that were tested. This report describes these tests and an analysis of the program bugs that caused the crashes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. W. Dijkstra, </author> <title> ``GOTO Statement Considered Harmful,'' </title> <journal> Communications of the ACM 11(3) pp. </journal> <month> 147-8 (March </month> <year> 1968). </year>
Reference-contexts: These routines should be thoroughly tested so that they do not intro duce new errors or obfuscate old ones. (8) Goto statements are generally a bad idea. Dijkstra observed this many years ago <ref> [1] </ref>, but some programmers are difficult to convince. Our search for the cause of a bad pointer in the prolog interpreter's main loop was - 18 - complicated by the interesting weaving of control flow caused by the goto statements. 5.2.
Reference: [2] <author> D. Seeley, </author> <title> ``A Tour of the Worm,'' </title> <booktitle> Proc. of the 1989 Winter USENIX Technical Conf., </booktitle> <pages> pp. </pages> <month> 287-304 (January </month> <year> 1989). </year>
Reference-contexts: These bugs can provide test cases against which researchers can evaluate more sophisticated testing and verification strategies. Second, the bugs that caused some of the crashes were the same type of bugs that have been responsible for recent security problems <ref> [2] </ref>. We have found additional bugs that might indicate future security holes. Third, some of the crashes were caused by input that you might carelessly type. Some strange and unexpected errors were uncovered by this method of testing.
Reference: [3] <author> D. A. Wood, G. A. Gibson, and R. H. Katz, </author> <title> ``Verifying a Multiprocessor Cache Controller Using Random Case Generation,'' </title> <institution> Computer Science Technical Report UCB/CSD 89/490, University of California, </institution> <month> Berke-ley (January </month> <year> 1989). </year> <month> - 21 </month> - 
Reference-contexts: This module randomly perturbs the packets (either destroying them or modifying them) to test the protocol's error detection and recovery features. Random testing has been used in evaluating complex hardware, such as a multiprocessor cache coherence protocols <ref> [3] </ref>. The state space of the device, when combined with the memory architecture, is large enough that it is difficult to generate systematic tests. Random generation of test cases can cover a large part of the state space and simplify the generation of cases. This paper proceeds as follows.
References-found: 3

