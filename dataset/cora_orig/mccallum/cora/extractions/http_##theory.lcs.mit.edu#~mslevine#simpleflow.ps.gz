URL: http://theory.lcs.mit.edu/~mslevine/simpleflow.ps.gz
Refering-URL: http://theory.lcs.mit.edu/~mslevine/
Root-URL: 
Title: Finding Maximum Flows in Undirected Graphs Seems Easier than Bipartite Matching  
Author: David R. Karger and Matthew S. Levine 
Abstract: Consider an n-vertex, m-edge, undirected graph with maximum flow value v. We give a method to find augmenting paths in such a graph in amortized sub-linear (O(n v)) time per path. This lets us improve the time bound of the classic augmenting path algorithm to O(m + nv 3=2 ) on simple graphs. The addition of a blocking flow subroutine gives a simple, deterministic O(nm 2=3 v 1=6 )-time algorithm. We also use our technique to improve known randomized algorithms, giving O(m+nv 5=4 )-time and O(m+n 11=9 v)-time algorithms for capacitated undirected graphs. For simple graphs, in which v n, the last bound is O(n 2:2 ), improving on the best previous bound of O(n 2:5 ), which is also the best known time bound for bipartite matching. p
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. A. Benczur and D. R. Karger. </author> <title> Approximate st min-cuts in O(n 2 ) time. </title> <editor> In G. Miller, editor, </editor> <booktitle> Proceedings of the 28 th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 4755. </pages> <publisher> ACM, ACM Press, </publisher> <month> May </month> <year> 1996. </year>
Reference-contexts: This would give the amortized O (n p v) time per path that we want. A complicated way to solve this problem is to use the graph compression technique of Benczur and Karger <ref> [1] </ref> to get a 2-approximation to v in O (m + nv) time.
Reference: [2] <author> E. A. Dinitz. </author> <title> Algorithm for Solution of a Problem of Maximum Flow in Networks with Power Estimation. </title> <journal> Soviet Math. Dokl., </journal> <volume> 11:12771280, </volume> <year> 1970. </year>
Reference-contexts: Traditionally, only a special case of this problem has been considered: unit-capacity graphs with no parallel edges (called simple graphs). Until recently, the best known algorithm for this special case used the blocking flow method of Dinitz <ref> [2] </ref>, which Karzanov [15] and Even and Tarjan [3] showed runs in O (m minfn 2=3 ; m 1=2 ; vg) time. Here n is the number of nodes, m is the number of edges, and v is the value of the maximum flow.
Reference: [3] <author> S. Even and R. E. Tarjan. </author> <title> Network Flow and Testing Graph Connectivity. </title> <journal> SIAM Journal on Computing, </journal> <volume> 4:507518, </volume> <year> 1975. </year>
Reference-contexts: Traditionally, only a special case of this problem has been considered: unit-capacity graphs with no parallel edges (called simple graphs). Until recently, the best known algorithm for this special case used the blocking flow method of Dinitz [2], which Karzanov [15] and Even and Tarjan <ref> [3] </ref> showed runs in O (m minfn 2=3 ; m 1=2 ; vg) time. Here n is the number of nodes, m is the number of edges, and v is the value of the maximum flow. <p> the capacitated case as well, running in O (m + nv 3=2 ) time. 1 f (n) = O (g (n)) if 9c such that f (n) = O (g (n) log c n) Source Year Time bound Capacities? Directed? Deterministic? Ford-Fulkerson [4] 1956 O (mv) p p p Even-Tarjan <ref> [3] </ref> 1975 O (m minfn 2=3 ; m 1=2 g) p p Karger [13] 1997 O (m 2=3 n 1=3 v) Goldberg-Rao [7] 1997 O (m minfn 2=3 ; m 1=2 g log v) p p p Goldberg-Rao [8] 1997 O (n p p Karger [14] 1998 O (v p p <p> Our proof is very much the same as that of Henzinger, Kleinberg and Rao, although we proved it independently. We use two lemmas to prove the theorem: Lemma 3.2 <ref> [3] </ref> In a simple graph with a flow f , the maximum residual flow value is at most 2 (n=d f ) 2 . (Recall that d f is the length of the shortest source-sink path in G f .) Proof. <p> Each edge of the residual graph has capacity at most 2 (one original unit and possibly one more if it is carrying flow in the wrong direction), so the maximum residual flow value is 2 (n=d f ) 2 . Lemma 3.3 (Small modification to Theorem 6 in <ref> [3] </ref>) In a simple graph, if a flow j f j is found by repeatedly finding and augmenting on a shortest path in G f , then the total length of the paths is at most 3n p Proof.
Reference: [4] <author> L. R. Ford, Jr. and D. R. Fulkerson. </author> <title> Maximal flow through a network. </title> <journal> Canadian Journal of Mathematics, </journal> <volume> 8:399404, </volume> <year> 1956. </year>
Reference-contexts: The first algorithm works for the capacitated case as well, running in O (m + nv 3=2 ) time. 1 f (n) = O (g (n)) if 9c such that f (n) = O (g (n) log c n) Source Year Time bound Capacities? Directed? Deterministic? Ford-Fulkerson <ref> [4] </ref> 1956 O (mv) p p p Even-Tarjan [3] 1975 O (m minfn 2=3 ; m 1=2 g) p p Karger [13] 1997 O (m 2=3 n 1=3 v) Goldberg-Rao [7] 1997 O (m minfn 2=3 ; m 1=2 g log v) p p p Goldberg-Rao [8] 1997 O (n p
Reference: [5] <author> Z. Galil and X. Yu. </author> <title> Short length versions of Menger's theorem (extended abstract). </title> <booktitle> In Proceedings of the 27 th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 499 508. </pages> <publisher> ACM, ACM Press, </publisher> <month> May </month> <year> 1995. </year>
Reference-contexts: Unfortunately, we do not know how to identify the right O (n p v) edges without finding a flow. Nevertheless, we devise methods to achieve all or part of this speedup on undirected graphs. Note that Galil and Yu <ref> [5] </ref> previously proved that flows need only use O (n p v) edges on simple graphs, but they did not show how to exploit the fact. Their proof was also somewhat complex. <p> Note that this theorem is very close to a theorem proved by Galil and Yu <ref> [5] </ref> and simplified by Henzinger, Klein-berg, and Rao [9] that says there exists a flow that uses only O (n v) edges. Our proof is very much the same as that of Henzinger, Kleinberg and Rao, although we proved it independently. <p> Besides extending to capacitated graphs, this theorem yields better constants, even for the simple-graph case, than the similar theorems of Galil and Yu <ref> [5] </ref> and Henzinger et al [9]. The lower-bound example of Figure 3 shows that our bound is tight to within a factor of 2.
Reference: [6] <author> A. Goldberg. </author> <type> Personal communication, </type> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: This suggests that we should be able to improve the time bound for bipartite matching! Unfortunately, the well known reduction from bipartite matching is to flow on a directed graph, and does not work if we try to make the graph undirected <ref> [6] </ref>. So we do not improve the time bound for bipartite matching, but this work suggests that it may be possible to do so. Another way to look at our results is as follows.
Reference: [7] <author> A. Goldberg and S. Rao. </author> <title> Beyond the flow decomposition barrier. </title> <booktitle> In Proceedings of the 30 th Annual Symposium on the Foundations of Computer Science [11], </booktitle> <pages> pages 211. </pages>
Reference-contexts: Note that for graphs with no parallel edges m n 2 and for simple graphs v n, so the above bound is O (n 8=3 ). In an exciting new result, Goldberg and Rao <ref> [7] </ref> extended Dinitz's algorithm to capacitated graphs, achieving Even-Tarjan-like bounds of O (m minfn 2=3 ; m 1=2 ; vg) = fl MIT Laboratory for Computer Science, Cambridge, MA 02138. Supported by NSF contract CCR-9624239 and an Alfred P. Sloane Foundation Fellowship. email: fkarger,mslevineg@theory.lcs.mit.edu. <p> 9c such that f (n) = O (g (n) log c n) Source Year Time bound Capacities? Directed? Deterministic? Ford-Fulkerson [4] 1956 O (mv) p p p Even-Tarjan [3] 1975 O (m minfn 2=3 ; m 1=2 g) p p Karger [13] 1997 O (m 2=3 n 1=3 v) Goldberg-Rao <ref> [7] </ref> 1997 O (m minfn 2=3 ; m 1=2 g log v) p p p Goldberg-Rao [8] 1997 O (n p p Karger [14] 1998 O (v p p this paper 1998 O (m + nv 3=2 ) p this paper 1998 O (nm 2=3 v 1=6 ) p this paper <p> Table 1 summarizes the history of the various algorithms we refer to in this paper. (The long history of Q (mn)-time algorithms, which are still best for large v, and were until recently <ref> [7] </ref> the only option for graphs with capacities, has been omitted.) Further, in order to show which algorithms have the best performance for different values of m and v relative to n, we have drawn pictures (Figures 1 and 2): one for deterministic algorithms only, and one including randomized algorithms. <p> Theorem 6.3 On undirected simple graphs, we can find a maximum flow in expected time O (m + n 11=9 v). Proof. Use Theorem 6.1 with A 1 = the O (mn 2=3 )-time al gorithm of Goldberg and Rao <ref> [7] </ref>, A 2 = newDAUG, and SparseAugment to find the augmenting paths at the end.
Reference: [8] <author> A. Goldberg and S. Rao. </author> <title> Flows in undirected unit capacity networks. </title> <booktitle> In Proceedings of the 30 th Annual Symposium on the Foundations of Computer Science [11], </booktitle> <pages> pages 3235. </pages>
Reference-contexts: Karger [12, 14], has given several randomized algorithms culminating in an O (v mn) = O (n 5=2 ) time bound. Note that Karger's latest algorithms do apply to graphs with capacities, although they are only useful when v is small. At the same time, Goldberg and Rao <ref> [8] </ref> gave a blocking-flow based algorithm that runs in O (n mn) = O (n 5=2 ) time on simple graphs. The main result of this paper is inspired by the simple-graph algorithm of Goldberg and Rao [8]. <p> At the same time, Goldberg and Rao <ref> [8] </ref> gave a blocking-flow based algorithm that runs in O (n mn) = O (n 5=2 ) time on simple graphs. The main result of this paper is inspired by the simple-graph algorithm of Goldberg and Rao [8]. They use bounds on the residual flow in a graph and a sparsification technique due to Nagamochi and Ibaraki [17] to throw away edges that need not be used by a maximum flow. <p> Capacities? Directed? Deterministic? Ford-Fulkerson [4] 1956 O (mv) p p p Even-Tarjan [3] 1975 O (m minfn 2=3 ; m 1=2 g) p p Karger [13] 1997 O (m 2=3 n 1=3 v) Goldberg-Rao [7] 1997 O (m minfn 2=3 ; m 1=2 g log v) p p p Goldberg-Rao <ref> [8] </ref> 1997 O (n p p Karger [14] 1998 O (v p p this paper 1998 O (m + nv 3=2 ) p this paper 1998 O (nm 2=3 v 1=6 ) p this paper 1998 O (m + nv 3=2 ) p p this paper 1998 O (m + nv <p> The latter time bound is O (n 2:2 ) in the worst case for simple graphs, which is better than O (n 2:5 ), the best bound previously known <ref> [8, 14] </ref>. These algorithms are complicated, so likely not practical, but they do demonstrate that O (n 2:5 ) is not the right time bound for maximum flow in undirected simple graphs. Both of these algorithms also work for the capacitated case. <p> It is always at least as good as the bound of O (n 3=2 m 1=2 ) given by Goldberg and Rao <ref> [8] </ref>, and in general better by a factor of (n 3 =mv) 1=6 .
Reference: [9] <author> M. R. Henzinger, J. Kleinberg, and S. Rao. </author> <title> Short-length Menger theorems. </title> <type> Technical Report 1997-022, </type> <institution> Digital Systems Research Center, </institution> <address> 130 Lytton Ave., Palo Alto, CA 94301, </address> <year> 1997. </year>
Reference-contexts: Note that Galil and Yu [5] previously proved that flows need only use O (n p v) edges on simple graphs, but they did not show how to exploit the fact. Their proof was also somewhat complex. Henzinger, Kleinberg, and Rao <ref> [9] </ref> indepen m m nm 2=3 v 1=6 Uninteresting log n m mv 1 for explanation.) dently simplified the proofs of Galil and Yu, using essentially the same argument we use. Our result is stronger: we show that any acyclic flow uses few edges, even on capacitated graphs. <p> Note that this theorem is very close to a theorem proved by Galil and Yu [5] and simplified by Henzinger, Klein-berg, and Rao <ref> [9] </ref> that says there exists a flow that uses only O (n v) edges. Our proof is very much the same as that of Henzinger, Kleinberg and Rao, although we proved it independently. <p> Besides extending to capacitated graphs, this theorem yields better constants, even for the simple-graph case, than the similar theorems of Galil and Yu [5] and Henzinger et al <ref> [9] </ref>. The lower-bound example of Figure 3 shows that our bound is tight to within a factor of 2.
Reference: [10] <author> J. Holm, K. de Lichtenberg, and M. </author> <title> Thorup. Poly-logarithmic deterministic fully-dynamic graph algorithms I: Connectivity and minimum spanning tree. </title> <type> Technical Report DIKU-TR-97/17, </type> <institution> University of Copenhagen, </institution> <year> 1997. </year> <note> To appear in STOC 1998. </note>
Reference-contexts: In this section we show how to exploit Theorem 3.4 in the most literal way: by maintaining an acyclic flow E f and a maximal spanning forest of G f E f . The most important piece of this implementation is a data structure for dynamic connectivity: Lemma 3.5 <ref> [10] </ref> It is possible to maintain a maximal spanning forest of an undirected graph under edge insertions and deletions in O (log 2 n) amortized time per operation. We also need to worry about whether our flow is acyclic, because Theorem 3.1 only applies if it is.
Reference: [11] <editor> IEEE. </editor> <booktitle> Proceedings of the 30 th Annual Symposium on the Foundations of Computer Science. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> Oct. </month> <year> 1997. </year>
Reference: [12] <author> D. R. Karger. </author> <title> Random sampling in cut, flow, and network design problems. </title> <note> Mathematics of Operations Research, 1998. To appear. A preliminary version appeared in STOC 1994. </note>
Reference-contexts: Sloane Foundation Fellowship. email: fkarger,mslevineg@theory.lcs.mit.edu. URL: http://theory.lcs.mit.edu/~fkarger,mslevineg O (n 8=3 ) time 1 on graphs whose edge capacities are polyno-mially bounded. Recently, several algorithms have been developed that exploit the special properties of undirected graphs to get better time bounds for finding small flows. Karger <ref> [12, 14] </ref>, has given several randomized algorithms culminating in an O (v mn) = O (n 5=2 ) time bound. Note that Karger's latest algorithms do apply to graphs with capacities, although they are only useful when v is small. <p> In Section 3 we give two algorithms for fast augmenting paths in simple graphs. In Section 4 we give two deterministic algorithms based on our fast augmenting paths subroutine. In Section 5 and 6, we apply fast augmenting paths to some randomized algorithms of Karger <ref> [12, 14] </ref>. In Section 7 we show how to extend fast augmenting paths to capacitated graphs, and discuss the implications for our other algorithms. <p> this limitation by either estimating v with another algorithm and computing a sparse certificate or using the iterative doubling trick of SparseAugment3. 5 New tricks for an old DAUG Using our fast augmentation, we can also improve the running time of the divide and augment algorithm (DAUG) given by Karger <ref> [12] </ref>. This result is of relatively minor interest in itself, but we make good use of it in the next section. <p> Theorem 5.2 <ref> [12] </ref> If G is c-connected and edges are sampled with probability p, then with high probability all cuts in the sampled graph are within (1 p 8 ln n=pc)) of their expected values. <p> We need to look at the recursion tree (See <ref> [12] </ref> for a full discussion). This proof is more technical than interesting, and goes the same way as in [12], so we just sketch it. <p> We need to look at the recursion tree (See <ref> [12] </ref> for a full discussion). This proof is more technical than interesting, and goes the same way as in [12], so we just sketch it. <p> By Theorem 5.2, at these nodes the flow is O (v=c). So by Theorem 3.14, the total time spent on successful augmenting paths is O (nv p v=c). At the nodes at depth d log (c= log n), the argument from <ref> [12] </ref> continues to apply, showing that the number of augmenting paths that need to found is O (v log n=2 d c).
Reference: [13] <author> D. R. Karger. </author> <title> Using random sampling to find maximum flows in uncapacitated undirected graphs. </title> <booktitle> In Proceedings of the 29 th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 240249. </pages> <publisher> ACM, ACM Press, </publisher> <month> May </month> <year> 1997. </year>
Reference-contexts: time. 1 f (n) = O (g (n)) if 9c such that f (n) = O (g (n) log c n) Source Year Time bound Capacities? Directed? Deterministic? Ford-Fulkerson [4] 1956 O (mv) p p p Even-Tarjan [3] 1975 O (m minfn 2=3 ; m 1=2 g) p p Karger <ref> [13] </ref> 1997 O (m 2=3 n 1=3 v) Goldberg-Rao [7] 1997 O (m minfn 2=3 ; m 1=2 g log v) p p p Goldberg-Rao [8] 1997 O (n p p Karger [14] 1998 O (v p p this paper 1998 O (m + nv 3=2 ) p this paper 1998
Reference: [14] <author> D. R. Karger. </author> <title> Better random sampling algorithms for flows in undirected graphs. </title> <booktitle> In Proceedings of the 9 th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 490499. ACM-SIAM, </pages> <month> Jan. </month> <year> 1998. </year>
Reference-contexts: Sloane Foundation Fellowship. email: fkarger,mslevineg@theory.lcs.mit.edu. URL: http://theory.lcs.mit.edu/~fkarger,mslevineg O (n 8=3 ) time 1 on graphs whose edge capacities are polyno-mially bounded. Recently, several algorithms have been developed that exploit the special properties of undirected graphs to get better time bounds for finding small flows. Karger <ref> [12, 14] </ref>, has given several randomized algorithms culminating in an O (v mn) = O (n 5=2 ) time bound. Note that Karger's latest algorithms do apply to graphs with capacities, although they are only useful when v is small. <p> (mv) p p p Even-Tarjan [3] 1975 O (m minfn 2=3 ; m 1=2 g) p p Karger [13] 1997 O (m 2=3 n 1=3 v) Goldberg-Rao [7] 1997 O (m minfn 2=3 ; m 1=2 g log v) p p p Goldberg-Rao [8] 1997 O (n p p Karger <ref> [14] </ref> 1998 O (v p p this paper 1998 O (m + nv 3=2 ) p this paper 1998 O (nm 2=3 v 1=6 ) p this paper 1998 O (m + nv 3=2 ) p p this paper 1998 O (m + nv 5=4 ) p this paper 1998 O <p> The long history of W (mn)-time algorithms, which are still best for large v, have been omitted. We also extend Karger's most recent algorithm <ref> [14] </ref>, getting two Las Vegas randomized algorithms with expected running times of O (m + nv 5=4 ) and O (m + n 11=9 v). <p> The latter time bound is O (n 2:2 ) in the worst case for simple graphs, which is better than O (n 2:5 ), the best bound previously known <ref> [8, 14] </ref>. These algorithms are complicated, so likely not practical, but they do demonstrate that O (n 2:5 ) is not the right time bound for maximum flow in undirected simple graphs. Both of these algorithms also work for the capacitated case. <p> In Section 3 we give two algorithms for fast augmenting paths in simple graphs. In Section 4 we give two deterministic algorithms based on our fast augmenting paths subroutine. In Section 5 and 6, we apply fast augmenting paths to some randomized algorithms of Karger <ref> [12, 14] </ref>. In Section 7 we show how to extend fast augmenting paths to capacitated graphs, and discuss the implications for our other algorithms. <p> Nevertheless, we can take advantage of it by using ideas from <ref> [14] </ref>. In that paper, a number of ideas are put together to get a fast flow algorithm, CompressAndFill, that runs in O (v p time on any undirected graph. For our purposes, that algorithm can be summarized with the following theorem: Theorem 6.1 [14] Let T (m; n; v; c) denote <p> advantage of it by using ideas from <ref> [14] </ref>. In that paper, a number of ideas are put together to get a fast flow algorithm, CompressAndFill, that runs in O (v p time on any undirected graph. For our purposes, that algorithm can be summarized with the following theorem: Theorem 6.1 [14] Let T (m; n; v; c) denote the time to find a maximum flow of value v in a c-connected undirected graph with m edges and n nodes. <p> Notice that BlockThenAugment does not extend, because it relies on Lemma 3.2 to bound the remaining flow after several blocking flow computations. However, the remaining algorithms do extend. In <ref> [14] </ref>, Karger shows how to extend DAUG to graphs with capacities. Ignoring the details, the bottom line is that m has to be increased to m + nc. The time bound for newDAUG is independent of m, so it remains O (nv v=c).
Reference: [15] <author> A. V. Karzanov. </author> <note> O nakhozhdenii maksimal 0 nogo potoka v setyakh spetsial 0 nogo vida i nekotorykh prilozheniyakh. </note> <editor> In Matematicheskie Voprosy Up-ravleniya Proizvodstvom, </editor> <volume> volume 5. </volume> <publisher> Moscow State University Press, </publisher> <address> Moscow, </address> <year> 1973. </year> <title> In Russian; title translation: On Finding Maximum Flows in a Network with Special Structure and Some Applications. </title>
Reference-contexts: Traditionally, only a special case of this problem has been considered: unit-capacity graphs with no parallel edges (called simple graphs). Until recently, the best known algorithm for this special case used the blocking flow method of Dinitz [2], which Karzanov <ref> [15] </ref> and Even and Tarjan [3] showed runs in O (m minfn 2=3 ; m 1=2 ; vg) time. Here n is the number of nodes, m is the number of edges, and v is the value of the maximum flow.
Reference: [16] <author> H. Nagamochi and T. Ibaraki. </author> <title> Computing edge connectivity in multigraphs and capacitated graphs. </title> <journal> SIAM Journal on Discrete Mathematics, </journal> <volume> 5(1):5466, </volume> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: Fortunately, the original Sleator-Tarjan decycling algorithm [18] already takes care of capacitated graphs, and a later paper of Nag amochi and Ibaraki <ref> [16] </ref> says that we can still find sparse certificates quickly. Lemma 7.3 [18] It is possible to take a flow f and find an acyclic flow f 0 of the same value (j f 0 j = j f j) in O (jE f j log n) time. Lemma 7.4 [16] <p> <ref> [16] </ref> says that we can still find sparse certificates quickly. Lemma 7.3 [18] It is possible to take a flow f and find an acyclic flow f 0 of the same value (j f 0 j = j f j) in O (jE f j log n) time. Lemma 7.4 [16] In an undirected graph, it is possible to construct a sparse connectivity certificate in O (m + n log n) time. It follows immediately that we can find augmenting paths in a capacitated graph in amortized O (n p v) time.
Reference: [17] <author> H. Nagamochi and T. Ibaraki. </author> <title> Linear time algorithms for finding k-edge connected and k-node connected spanning subgraphs. </title> <journal> Algorithmica, </journal> <volume> 7:583596, </volume> <year> 1992. </year>
Reference-contexts: The main result of this paper is inspired by the simple-graph algorithm of Goldberg and Rao [8]. They use bounds on the residual flow in a graph and a sparsification technique due to Nagamochi and Ibaraki <ref> [17] </ref> to throw away edges that need not be used by a maximum flow. We use a related idea, showing that we can find augmenting paths in O (n p v) amortized time per path by putting aside most of the edges and only bringing them back when necessary. <p> Each region is labeled by the best time bound that applies for values of m and v in that region. Note that the region m &gt; nv is uninteresting, because the sparsification algorithm of Nagamochi and Ibaraki <ref> [17] </ref> can always be used to make m nv in O (m) time. The shaded regions correspond to algorithms given in this paper. <p> To do this, we use an idea and algorithm given by Nagamochi and Ibaraki <ref> [17] </ref>: Definition 3.8 For an undirected graph G = (V; E), a sparse connectivity certificate is a partition of E such that E i is a maximal spanning forest in G E 1 [ E 2 [ [ E i1 , for i = 1; 2; : : : ; jEj, <p> Definition 3.9 A sparse k-certificate is the subgraph G i = (V; E 1 [ E 2 [ [ E k ) derived from a sparse connectivity certificate. Lemma 3.10 <ref> [17] </ref> The value of a minimum s-t cut in a sparse k-certificate G k of G is equal to the smaller of k and the value of the minimum s-t cut in G. Lemma 3.11 [17] In an undirected graph with unit capacity edges, it is possible to construct a sparse <p> Lemma 3.10 <ref> [17] </ref> The value of a minimum s-t cut in a sparse k-certificate G k of G is equal to the smaller of k and the value of the minimum s-t cut in G. Lemma 3.11 [17] In an undirected graph with unit capacity edges, it is possible to construct a sparse connectivity certificate in O (m) time. Notice that one easy application of this construction is to reduce m to nv.
Reference: [18] <author> D. D. Sleator and R. E. Tarjan. </author> <title> A data structure for dynamic trees. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 26(3):362391, </volume> <month> June </month> <year> 1983. </year>
Reference-contexts: We also need to worry about whether our flow is acyclic, because Theorem 3.1 only applies if it is. Fortunately, using a procedure due to Sleator and Tarjan <ref> [18] </ref>, it is easy to remove all cycles from a flow (we will refer to this proce-dure as decycling). <p> Given that jE f j is still small for a capacitated graph, we need to make sure that we can still decycle and that our methods to sparsify the unused edges still work. Fortunately, the original Sleator-Tarjan decycling algorithm <ref> [18] </ref> already takes care of capacitated graphs, and a later paper of Nag amochi and Ibaraki [16] says that we can still find sparse certificates quickly. Lemma 7.3 [18] It is possible to take a flow f and find an acyclic flow f 0 of the same value (j f 0 <p> Fortunately, the original Sleator-Tarjan decycling algorithm <ref> [18] </ref> already takes care of capacitated graphs, and a later paper of Nag amochi and Ibaraki [16] says that we can still find sparse certificates quickly. Lemma 7.3 [18] It is possible to take a flow f and find an acyclic flow f 0 of the same value (j f 0 j = j f j) in O (jE f j log n) time.
References-found: 18

