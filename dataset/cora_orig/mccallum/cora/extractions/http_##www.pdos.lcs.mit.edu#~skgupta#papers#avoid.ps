URL: http://www.pdos.lcs.mit.edu/~skgupta/papers/avoid.ps
Refering-URL: http://www.pdos.lcs.mit.edu/~skgupta/papers/index.html
Root-URL: 
Email: schaffer@cs.rice.edu skgupta@owlnet.rice.edu shriram@cs.rice.edu bwc@bcm.tmc.edu  
Title: Avoiding Recomputation in Linkage Analysis Keywords: Genetic linkage analysis, algorithms, recombination classes, check-pointing, crash-recovery. Address
Author: Alejandro A. Schaffer Sandeep K. Gupta K. Shriram Robert W. Cottingham Jr. Robert W. Cottingham Jr., 
Date: January 3, 1994  
Address: Houston  Houston  Houston  Houston  One Baylor Plaza, Houston, TX 77030, USA.  
Affiliation: Department of Computer Science Rice University  Department of Computer Science Rice University  Department of Computer Science Rice University  Department of Cell Biology Baylor College of Medicine  Department of Cell Biology, Baylor College of Medicine,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. H. Blanton, J. R. Heckenlively, A. W. Cottingham, J. Friedman, L. A. Sadler, M. Wagner, L. H. Friedman, and S. P. Daiger. </author> <title> Linkage mapping of autosomal 16 dominant retinitis pigmentosa (RP1) to the pericentric region of human chro-mosome 8. </title> <journal> Genomics, </journal> <volume> 11 </volume> <pages> 857-869, </pages> <year> 1991. </year>
Reference-contexts: Stephen P. Daiger at the University of Texas Health Science Center at Houston. This pedigree has 7 generations with 190 individuals containing 2 marriage loops <ref> [1] </ref>. As shown in [1], this pedigree had to be split into three pieces because desired computations with large allele products on the whole family together took prohibitively long. <p> Stephen P. Daiger at the University of Texas Health Science Center at Houston. This pedigree has 7 generations with 190 individuals containing 2 marriage loops <ref> [1] </ref>. As shown in [1], this pedigree had to be split into three pieces because desired computations with large allele products on the whole family together took prohibitively long.
Reference: [2] <author> R. W. Cottingham Jr., R. M. Idury, and A. A. Schaffer. </author> <title> Faster sequential genetic linkage computations. </title> <journal> American Journal of Human Genetics, </journal> <volume> 53 </volume> <pages> 252-263, </pages> <year> 1993. </year>
Reference-contexts: The computational requirements caused by better data collection methods and the desire to do multilocus analysis have grown at a much greater rate than the speed of readily available computers. We continue an investigation started in <ref> [2] </ref> concerning better sequential algorithms for linkage analysis. That paper showed significant hope that better algorithms can make much bigger linkage analysis problems computationally tractable. As in [2], we demonstrate the improvements described herein by implementing them in some of the programs in the LINKAGE software package and show the improvements <p> We continue an investigation started in <ref> [2] </ref> concerning better sequential algorithms for linkage analysis. That paper showed significant hope that better algorithms can make much bigger linkage analysis problems computationally tractable. As in [2], we demonstrate the improvements described herein by implementing them in some of the programs in the LINKAGE software package and show the improvements in computation time experimentally. <p> We have implemented the changes described herein in the already improved versions of the LINKAGE programs described in <ref> [2] </ref>, however they are essentially independent of our previous work. Our modified programs are in C. <p> The most fundamental goal in linkage analysis is to compute the probability, , that a recombination occurs between two genes G 1 and G 2 . The LINKAGE package contains four linkage analysis programs: LODSCORE, ILINK, LINKMAP, and MLINK. The improved sequential algorithms in <ref> [2] </ref> are applicable to all the programs. The four changes described here are applicable to LODSCORE and ILINK. The improved handling of recombination classes and loops are also applicable to LINKMAP and MLINK. <p> Further, since the state of the output files was saved before the crash occurred, these files can merely be copied into from the stored versions, thus yielding no indication that the script had to be re-started. 7 Methods We compared the LINKAGE programs described in <ref> [2] </ref> to the modified new versions described here on some sample runs. We first installed the three changes that improve the speed of the programs and measured the improvement. <p> We did a variety of sample runs always comparing the version of the code reported in <ref> [2] </ref> with the version described here. We tried to measure the cost of checkpointing by using new versions both with and without checkpointing. <p> fi 4 fi 4 7012 6285 1.12 CLP ILINK 2 fi 4 fi 4 fi 4 9705 9067 1.07 CLP LINKMAP 2 fi 4 fi 4 fi 4 3445 3455 1.00 Table 1: Execution Times in Seconds For simplicity and consistency, we report the times taken by the versions in <ref> [2] </ref> and the new version with checkpointing. Those are the two versions we have been and will be distributing. We used the three following disease data sets for our experiments: * RP01: data on a large family, UCLA-RP01, with autosomal dominant retini-tis pigmentosa (RP1) from the laboratory of Dr. <p> Pedigree 1200 has a loop, but it encompasses the entire family, so our new loop algorithm does not help. In most cases, we achieved noticeable speedups. The speedups here are not nearly as large as the speedups we obtained in going from LINKAGE 5.1 to the faster version in <ref> [2] </ref>, but are still worthwhile. Our changes helped the most on the RP01 pedigree because its second loop covers only a small part of the pedigree. The 14 above computations on the full RP01 pedigree are feasible in part because of the algorithmic changes in [2] and because the allele products <p> to the faster version in <ref> [2] </ref>, but are still worthwhile. Our changes helped the most on the RP01 pedigree because its second loop covers only a small part of the pedigree. The 14 above computations on the full RP01 pedigree are feasible in part because of the algorithmic changes in [2] and because the allele products for the loci we chose are not too high. Our changes had the least effect on CLP because the loop change is irrelevant there and its genarrays are not dense enough to benefit much from subdividing recombination classes.
Reference: [3] <author> R. C. Elston and J. Stewart. </author> <title> A general model for the analysis of pedigree data. </title> <booktitle> Human Heredity, </booktitle> <volume> 21 </volume> <pages> 523-542, </pages> <year> 1971. </year>
Reference-contexts: 1 Introduction Linkage analysis was fully thrust into the computer age by the discovery of the Elston-Stewart <ref> [3] </ref> algorithm for pedigree traversal and its implementation in LIPED [11]. From a computer science perspective, the reason the Elston-Stewart algorithm works efficiently is that it avoids recomputation on subtrees of the pedigree by traversing bottom-up towards the root. <p> This parameter is the root (in LINKAGE this is referred to as the proband) of the pedigree. The traversal order "peels" the pedigree towards the root so that the root belongs to the last nuclear family updated. A variety of peeling orders are possible <ref> [3, 12] </ref>. We have not changed the peeling order in LINKAGE, but we make no claim that the current order always minimizes the running time.
Reference: [4] <author> J. T. Hecht, Y. Wang, B. Connor, S. H. Blanton, and S. P. Daiger. Non-syndromic cleft lip and palate: </author> <title> No evidence of linkage to hla or factor 13a. </title> <journal> American Journal of Human Genetics, </journal> <volume> 52 </volume> <pages> 1230-1233, </pages> <year> 1993. </year>
Reference-contexts: Jacqueline T. Hecht at the University of Texas Health Science Center at Houston. Diagrams of the families are shown in <ref> [4] </ref>. The families include 110 individuals in all. Pedigrees 1000 and 1100 are significantly larger than the rest. Pedigree 1200 has a loop, but it encompasses the entire family, so our new loop algorithm does not help. In most cases, we achieved noticeable speedups.
Reference: [5] <author> J. M. Lalouel. </author> <title> GEMINI a computer program for optimization of general nonlinear functions. </title> <type> Technical Report 14, </type> <institution> University of Utah, Department of Medical Biophysics and Computing, </institution> <address> Salt Lake City, Utah, </address> <year> 1979. </year>
Reference-contexts: We will use n to represent the number of loci. The ILINK program searches for the maximum likelihood estimate of the multilocus vector. Both LODSCORE and ILINK start from an initial solution and use an iterative procedure called gemini <ref> [5] </ref> to find the estimate ^ . Like many iterative optimization procedures, gemini can only guarantee to find a local optimum and not a global optimum.
Reference: [6] <author> K. Lange and R. C. Elston. </author> <title> Extensions to pedigree analysis. I. Likelihood calculation for simple and complex pedigrees. </title> <booktitle> Human Heredity, </booktitle> <volume> 25 </volume> <pages> 95-105, </pages> <year> 1975. </year>
Reference-contexts: The subdivision of recombination classes improves on a proposal of Lathrop and Lalouel [8] that was implemented in LINKAGE. The new loop algorithm extends a proposal of Lange and Elston <ref> [6] </ref> for handling loopless pedigrees with multiple nuclear families at the earliest generation (Lange and Elston called such a pedigree complex). All four improvements help by avoiding recomputation of already known values. The first three improvements speed up uninterrupted runs. The checkpointing facility avoids significant recomputation when the computer crashes. <p> The algorithm used in LINKAGE to handle loops was first proposed by Lange and El-ston <ref> [6] </ref> and is also described on pages 170-171 of [12]. We review it here to keep the paper self-contained. 8 Suppose for simplicity that there is just one one loop in the pedigree; this is by far the most common case.
Reference: [7] <author> G. M. Lathrop and J. M. Lalouel. </author> <title> Easy calculations of lod scores and genetic risks on small computers. </title> <journal> American Journal of Human Genetics, </journal> <volume> 36 </volume> <pages> 460-465, </pages> <year> 1984. </year>
Reference-contexts: That paper showed significant hope that better algorithms can make much bigger linkage analysis problems computationally tractable. As in [2], we demonstrate the improvements described herein by implementing them in some of the programs in the LINKAGE software package and show the improvements in computation time experimentally. LINKAGE <ref> [7, 9] </ref> is one of the most popular linkage analysis packages and is particularly useful for multilocus analysis of large disease pedigrees. The four improvements described herein are: 1. Subdivision of recombination classes. 2. More efficient multiple traversals of pedigrees with loops. 3.
Reference: [8] <author> G. M. Lathrop and J. M. Lalouel. </author> <title> Efficient computations in multilocus linkage analysis. </title> <journal> American Journal of Human Genetics, </journal> <volume> 42 </volume> <pages> 498-505, </pages> <year> 1988. </year>
Reference-contexts: The first two improvements can be viewed as general algorithmic improvements based on proposals in the literature, while the latter two improvements correct weaknesses specific to programs in LINKAGE. The subdivision of recombination classes improves on a proposal of Lathrop and Lalouel <ref> [8] </ref> that was implemented in LINKAGE. The new loop algorithm extends a proposal of Lange and Elston [6] for handling loopless pedigrees with multiple nuclear families at the earliest generation (Lange and Elston called such a pedigree complex). All four improvements help by avoiding recomputation of already known values. <p> The gradient estimation usually takes n 1 FEs if forward differences are used and 2 fl (n 1) if central differences are used. The two gradient estimation methods are discussed in <ref> [8] </ref>. There are a few exceptions; e.g., if for males and females are assumed to be distinct then the number of FEs for the second phase is doubled. In contrast to LODSCORE and ILINK, LINKMAP and MLINK take multiple values of the vector and computes the likelihood for each one. <p> After traversing the part of the pedigree including the individual, genarray [j] stores the probability that the individual has genotype j and its associated phenotype, conditioned on the genotypes of relatives already visited in the traversal and the recombination fraction. Following the notation of Lathrop and Lalouel <ref> [8] </ref>, suppose we are updating the probability that individual with phenotype X has joint genotype G, conditioned on the collective joint genotypes Y of the relatives that have already been traversed and a candidate . <p> Therefore, LINKAGE scales all the values in genarray and undoes the scaling at the very end of the likelihood computation. 3 Subdividing Recombination Classes In this section, we describe how we improved the use of recombination classes, as previously proposed in <ref> [8] </ref>. We first need to review what recombination classes are and how they are used inside the likelihood computation. Throughout this section, we assume that all sample parental genotypes are heterozygous at all loci.
Reference: [9] <author> G. M. Lathrop, J. M. Lalouel, C. Julier, and J. Ott. </author> <title> Strategies for multilocus linkage analysis in humans. </title> <booktitle> Proc. </booktitle> <institution> Natl. Acad. Sci. USA, </institution> <month> 81 </month> <pages> 3443-3446, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: That paper showed significant hope that better algorithms can make much bigger linkage analysis problems computationally tractable. As in [2], we demonstrate the improvements described herein by implementing them in some of the programs in the LINKAGE software package and show the improvements in computation time experimentally. LINKAGE <ref> [7, 9] </ref> is one of the most popular linkage analysis packages and is particularly useful for multilocus analysis of large disease pedigrees. The four improvements described herein are: 1. Subdivision of recombination classes. 2. More efficient multiple traversals of pedigrees with loops. 3.
Reference: [10] <author> A. Law, C. W. Richard III, R. W. Cottingham Jr ., G. M. Lathrop, D. R. Cox, and R. M. Myers. </author> <title> Genetic linkage analysis of bipolar affective disorder in an old order amish pedigree. </title> <journal> Human Genetics, </journal> <volume> 88 </volume> <pages> 562-568, </pages> <year> 1992. </year>
Reference-contexts: David R. Cox and Richard M. Myers at the University of California at San Francisco. This pedigree spans 5 generations with 96 individuals and contains 1 marriage loop <ref> [10] </ref>. * CLP: Data on 12 families with autosomal dominant nonsyndromic cleft lift and palate (CLP) from the laboratory of Dr. Jacqueline T. Hecht at the University of Texas Health Science Center at Houston. Diagrams of the families are shown in [4]. The families include 110 individuals in all.
Reference: [11] <author> J. Ott. </author> <title> Estimation of the recombination fraction in human pedigrees- efficient computation of the likelihood for human linkage studies. </title> <journal> American Journal of Human Genetics, </journal> <volume> 26 </volume> <pages> 588-597, </pages> <year> 1974. </year>
Reference-contexts: 1 Introduction Linkage analysis was fully thrust into the computer age by the discovery of the Elston-Stewart [3] algorithm for pedigree traversal and its implementation in LIPED <ref> [11] </ref>. From a computer science perspective, the reason the Elston-Stewart algorithm works efficiently is that it avoids recomputation on subtrees of the pedigree by traversing bottom-up towards the root.
Reference: [12] <author> J. Ott. </author> <title> Analysis of Human Genetic Linkage. </title> <publisher> The Johns Hopkins University Press, </publisher> <address> Baltimore and London, </address> <year> 1991. </year> <note> Revised edition. 17 </note>
Reference-contexts: Sections 3 through 6 describe the four improvements. Sections 7 and 8 validate the improvements. We conclude with a short discussion. 2 Summary of LINKAGE and Related Work A thorough treatment of genetic linkage analysis, including a summary of the LINKAGE programs, is given in Ott's monograph <ref> [12] </ref>. In this section we review a few facts about LINKAGE relevant to this paper. The most fundamental goal in linkage analysis is to compute the probability, , that a recombination occurs between two genes G 1 and G 2 . <p> The basic structure of the likelihood computation is outlined in the section on Numerical and Computerized Methods in <ref> [12] </ref>. Inside the loop over pedigrees, the programs traverse a pedigree updating the probabilities of each joint genotype for each individual. There are several different updating routines, but they all start with a double nested loop over the possible genotypes for one parent and then the other parent. <p> The algorithm used in LINKAGE to handle loops was first proposed by Lange and El-ston [6] and is also described on pages 170-171 of <ref> [12] </ref>. We review it here to keep the paper self-contained. 8 Suppose for simplicity that there is just one one loop in the pedigree; this is by far the most common case. <p> For each possible genotype G i , the likelihood is computed conditioned on both b 1 and b 2 having genotype G i . Ott <ref> [12] </ref> denotes this by P (x; G i ), where x stands for the phenotype data observed on the pedigree members. <p> This parameter is the root (in LINKAGE this is referred to as the proband) of the pedigree. The traversal order "peels" the pedigree towards the root so that the root belongs to the last nuclear family updated. A variety of peeling orders are possible <ref> [3, 12] </ref>. We have not changed the peeling order in LINKAGE, but we make no claim that the current order always minimizes the running time.
References-found: 12

