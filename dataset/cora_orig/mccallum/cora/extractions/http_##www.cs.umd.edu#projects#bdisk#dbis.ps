URL: http://www.cs.umd.edu/projects/bdisk/dbis.ps
Refering-URL: http://http.cs.berkeley.edu/~randy/BTG.html
Root-URL: 
Email: franklin@cs.umd.edu  sbz@cs.brown.edu  
Title: Dissemination-Based Information Systems  
Author: Michael Franklin Stan Zdonik 
Address: College Park, MD 20742 USA  Providence, RI 02912 USA  
Affiliation: UMIACS and Dept. of Computer Science University of Maryland  Department of Computer Science Brown University  
Date: 3, September 1996.  
Note: Appears in IEEE Data Engineering Bulletin, Vol. 19, No.  
Abstract: This paper examines the construction of distributed information systems that incorporate the ability to push data out to clients (i.e., dissemination) in addition to having clients pull data from servers. One key issue that distinguishes such dissemination-based information systems (DBIS) from more traditional ones is communications asymmetry. Asymmetry arises in many new applications due to both physical characteristics such as network bandwidths, as well as to workload characteristics. We outline a number of different data delivery mechanisms, and then focus on one particular dissemination mechanism that we have developed, called Broadcast Disks. Finally, we discuss issues that arise in the design of a DBIS architecture that can provide many different modes of data delivery.
Abstract-found: 1
Intro-found: 1
Reference: [Acha95a] <author> S. Acharya, R. Alonso, M. Franklin, S. Zdonik, </author> <title> "Broadcast Disks: Data Management for Asymmetric Communications Environments", </title> <booktitle> Proc. ACM SIGMOD Conference, </booktitle> <address> San Jose, CA, </address> <month> May, </month> <year> 1995. </year>
Reference-contexts: the IEEE Computer Society Technical Committee on Data Engineering fl This work has been partially supported by NSF grant IRI-9501353, ONR grant number N00014-91-J-4085 under ARPA order number 8220, and by a gift from Intel Corporation. 1 The issues that we have studied include broadcast scheduling and client cache management <ref> [Acha95a] </ref>, client prefetching [Acha96a], and the dissemination of updates [Acha96b]. Our current work is focused on integrating the notion of Broadcast Disks and other forms of data dissemination into a coherent framework, which we refer to as a Dissemination-Based Information System (DBIS) architecture. <p> Clients that need to access a data item that is pushed periodically can wait until the item appears. In this way, periodic push can be thought of as a storage device whose average latency for an item is half the period at which that item repeats <ref> [Acha95a] </ref>. As with aperiodic push, periodic push can also be used with both point-to-point and one-to-N channels, but one-to-N is likely to be much more prevalent. <p> The pages B1 and B2 are said to be on a slower spinning disk that is twice the size of the fast disk. The desirable characteristics for a multi-level broadcast program have been outlined in <ref> [Acha95a] </ref>. Briefly, a good broadcast program is periodic, has fixed (or nearly fixed) inter-arrival times for repeated occurrences of a data item, and allocates bandwidth to items in accordance with (but not in direct proportion to) their access probabilities. <p> The algorithm used by the server to generate the broadcast program requires the following inputs: the number of levels , the relative frequency of each level and assignments of data items to the levels on which they are to be broadcast. The algorithm is described in detail in <ref> [Acha95a] </ref>. More recently, algorithms for automatically determining these inputs have been proposed [Baru96]. 4.2 Profiles, Feedback, and Client-side Storage Management In order to decide how to structure a broadcast schedule, the server must use its best knowledge and synthesis of the needs of the clients that require disseminated data. <p> We have developed implementable caching and prefetching algorithms to address this issue and have compared them to ideal policies <ref> [Acha95a, Acha96a] </ref>. The policies take into account both the local access probability (using heuristics such as LRU or usage frequency) and the expected latency of a data item; items that reside on slower levels have higher average latencies. <p> The policies take into account both the local access probability (using heuristics such as LRU or usage frequency) and the expected latency of a data item; items that reside on slower levels have higher average latencies. The caching policies <ref> [Acha95a] </ref> favor slow-level data items, allowing clients to use their local storage resources to retain pages which are important locally, but are not sufficiently popular across all clients to warrant placement on a faster level. Broadcast Disks presents an excellent opportunity for prefetching because objects continually flow past the receivers.
Reference: [Acha95b] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> "Dissemination-based Data Delivery Using Broadcast Disks", </title> <journal> IEEE Personal Communications, </journal> <volume> 2(6), </volume> <month> December, </month> <year> 1995. </year>
Reference-contexts: In this latter example, data dissemination is a natural way to exploit the base stations' advantage in bandwidth. In our work on the Broadcast Disk paradigm for data delivery <ref> [Zdon94, Acha95b] </ref>, we have identified a number of ways that the asymmetric nature of data dissemination can impact the design of an information system. Copyright 1996 IEEE. Personal use of this material is permitted. <p> of data delivery in more detail in the following section. 5 4 Broadcast Disks Having described the notion of data dissemination and outlined the different styles of data delivery that can be employed in a DBIS, we now focus on one particular approach that we have developed, called Broadcast Disks <ref> [Zdon94, Acha95b] </ref>. Using Broadcast Disks, a broadcast program containing all the data items to be disseminated is determined and this program is transmitted in a periodic manner.
Reference: [Acha96a] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> "Prefetching from a Broadcast Disk", </title> <booktitle> 12th International Conference on Data Engineering, </booktitle> <address> New Orleans, LA, </address> <month> February, </month> <year> 1996. </year>
Reference-contexts: Society Technical Committee on Data Engineering fl This work has been partially supported by NSF grant IRI-9501353, ONR grant number N00014-91-J-4085 under ARPA order number 8220, and by a gift from Intel Corporation. 1 The issues that we have studied include broadcast scheduling and client cache management [Acha95a], client prefetching <ref> [Acha96a] </ref>, and the dissemination of updates [Acha96b]. Our current work is focused on integrating the notion of Broadcast Disks and other forms of data dissemination into a coherent framework, which we refer to as a Dissemination-Based Information System (DBIS) architecture. <p> We have developed implementable caching and prefetching algorithms to address this issue and have compared them to ideal policies <ref> [Acha95a, Acha96a] </ref>. The policies take into account both the local access probability (using heuristics such as LRU or usage frequency) and the expected latency of a data item; items that reside on slower levels have higher average latencies. <p> Broadcast Disks presents an excellent opportunity for prefetching because objects continually flow past the receivers. We have also developed client prefetching algorithms <ref> [Acha96a] </ref>. These algorithms are more dynamic than the caching policies because they take into consideration the time-to-arrival for items at a given instant.
Reference: [Acha96b] <author> S. Acharya, M. Franklin, S. Zdonik, </author> <title> "Disseminating Updates on Broadcast Disks", </title> <booktitle> Proc. 22nd VLDB Conference, </booktitle> <address> Mumbai (Bombay), India, </address> <month> September, </month> <year> 1996. </year>
Reference-contexts: fl This work has been partially supported by NSF grant IRI-9501353, ONR grant number N00014-91-J-4085 under ARPA order number 8220, and by a gift from Intel Corporation. 1 The issues that we have studied include broadcast scheduling and client cache management [Acha95a], client prefetching [Acha96a], and the dissemination of updates <ref> [Acha96b] </ref>. Our current work is focused on integrating the notion of Broadcast Disks and other forms of data dissemination into a coherent framework, which we refer to as a Dissemination-Based Information System (DBIS) architecture. <p> Algorithms for dynamically maintaining profiles and adjusting the broadcast accordingly are thus, important directions in our current work. 4.3 Data Consistency We have extended the mechanisms described above in order to incorporate data item updates and have studied their effect on performance <ref> [Acha96b] </ref>. As in the previous work, the design considerations divide into client-side and server-side issues. The server must decide how to modify its broadcast program in order to most effectively communicate updates to the client. The server can use both invalidation and propagation.
Reference: [Amma85] <author> M. Ammar, J. Wong, </author> <title> "The Design of Teletext Broadcast Cycles", Perf. Evaluation, </title> <month> 5 </month> <year> (1985). </year>
Reference-contexts: Periodic push has been used for data dissemination in many systems such as TeleText <ref> [Amma85, Wong88] </ref> and DataCy- cle [Herm87, Bowe92]. Clients that need to access a data item that is pushed periodically can wait until the item appears. <p> Periodic broadcast has been studied by a number of researchers (e.g., <ref> [Amma85, Herm87, Giff90, Imie94] </ref>).
Reference: [Baru96] <author> S. Baruah and A. Bestavros, </author> <title> "Pinwheel Scheduling for Fault-tolerant Broadcast Disks in Real-time Database Systems",Technical Report TR-96-023, </title> <address> Boston University, </address> <month> August, </month> <year> 1996. </year>
Reference-contexts: The algorithm is described in detail in [Acha95a]. More recently, algorithms for automatically determining these inputs have been proposed <ref> [Baru96] </ref>. 4.2 Profiles, Feedback, and Client-side Storage Management In order to decide how to structure a broadcast schedule, the server must use its best knowledge and synthesis of the needs of the clients that require disseminated data. There are two potential pitfalls with this approach.
Reference: [Bowe92] <author> T. Bowen, G. Gopal, G. Herman, T. Hickey, K. Lee, W. Mansfield, J. Raitz, A. Weinrib, </author> <title> "The Datacycle Architecture", </title> <journal> CACM, </journal> <volume> 35(12), </volume> <month> December, </month> <year> 1992. </year>
Reference-contexts: Periodic push has been used for data dissemination in many systems such as TeleText [Amma85, Wong88] and DataCy- cle <ref> [Herm87, Bowe92] </ref>. Clients that need to access a data item that is pushed periodically can wait until the item appears. In this way, periodic push can be thought of as a storage device whose average latency for an item is half the period at which that item repeats [Acha95a].
Reference: [Giff90] <author> D. Gifford, </author> <title> "Polychannel Systems for Mass Digital Communication", </title> <journal> CACM, </journal> <volume> 33(2), </volume> <month> February, </month> <year> 1990. </year>
Reference-contexts: Periodic broadcast has been studied by a number of researchers (e.g., <ref> [Amma85, Herm87, Giff90, Imie94] </ref>).
Reference: [Herm87] <author> G. Herman, G. Gopal, K. Lee, A. Weinrib, </author> <title> "The Datacycle Architecture for Very High Throughput Database Systems", </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> San Francisco, CA, </address> <month> May, </month> <year> 1987. </year>
Reference-contexts: Periodic push has been used for data dissemination in many systems such as TeleText [Amma85, Wong88] and DataCy- cle <ref> [Herm87, Bowe92] </ref>. Clients that need to access a data item that is pushed periodically can wait until the item appears. In this way, periodic push can be thought of as a storage device whose average latency for an item is half the period at which that item repeats [Acha95a]. <p> Periodic broadcast has been studied by a number of researchers (e.g., <ref> [Amma85, Herm87, Giff90, Imie94] </ref>).
Reference: [Imie94] <author> T. Imielinski, S. Viswanathan, B. Badrinath, </author> <title> "Energy Efficient Indexing on Air", </title> <booktitle> Proc. ACM SIGMOD Conference, </booktitle> <address> Minneapolis, MN, </address> <month> May, </month> <year> 1994. </year>
Reference-contexts: Periodic broadcast has been studied by a number of researchers (e.g., <ref> [Amma85, Herm87, Giff90, Imie94] </ref>).
Reference: [Oki93] <author> B. Oki, M. Pfluegl, A. Siegel, D. Skeen, </author> <title> "The Information Bus An Architecture for Extensible Distributed Systems", </title> <booktitle> Proc. 14th SOSP Conference, </booktitle> <address> Ashville, NC, </address> <month> December, </month> <year> 1993. </year>
Reference-contexts: A solution to this problem to allow the clients to provide a profile of their interests to the servers. A popular mechanism for providing such profiles is known as a publish/subscribe protocol (e.g., <ref> [Oki93] </ref>). Using publish/subscribe, clients subscribe to given classes of information by providing a set of expressions that describe the data of interest. These subscriptions form a profile | they are in effect, a continuous query.
Reference: [Wong88] <author> J. Wong, </author> <title> "Broadcast Delivery", </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 76(12), </volume> <month> December, </month> <year> 1988. </year>
Reference-contexts: Periodic push has been used for data dissemination in many systems such as TeleText <ref> [Amma85, Wong88] </ref> and DataCy- cle [Herm87, Bowe92]. Clients that need to access a data item that is pushed periodically can wait until the item appears.
Reference: [Zdon94] <author> S. Zdonik, M. Franklin, R. Alonso, S. Acharya, </author> <title> "Are 'Disks in the Air' Just Pie in the Sky?", </title> <booktitle> IEEE Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> December, </month> <year> 1994. </year> <month> 9 </month>
Reference-contexts: In this latter example, data dissemination is a natural way to exploit the base stations' advantage in bandwidth. In our work on the Broadcast Disk paradigm for data delivery <ref> [Zdon94, Acha95b] </ref>, we have identified a number of ways that the asymmetric nature of data dissemination can impact the design of an information system. Copyright 1996 IEEE. Personal use of this material is permitted. <p> of data delivery in more detail in the following section. 5 4 Broadcast Disks Having described the notion of data dissemination and outlined the different styles of data delivery that can be employed in a DBIS, we now focus on one particular approach that we have developed, called Broadcast Disks <ref> [Zdon94, Acha95b] </ref>. Using Broadcast Disks, a broadcast program containing all the data items to be disseminated is determined and this program is transmitted in a periodic manner.
References-found: 13

