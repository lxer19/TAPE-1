URL: http://www.media.mit.edu/~brave/publications/AiGPII.ps
Refering-URL: http://www.media.mit.edu/~brave/resume.html
Root-URL: http://www.media.mit.edu
Title: 10 Evolving Recusive Programs for Tree Search  
Author: Scott Brave 
Note: 10.1 Introduction  
Abstract: This article compares basic genetic programming, genetic programming with automatically defined functions (ADFs), and genetic programming with ADFs using a restricted form of recursion on a planning problem involving tree search. The results show that evolution of a recursive program is possible and further that, of the three techniques explored, genetic programming with recursive ADFs performs the best for the tree search problem. Additionally, genetic programming using ADFs (recursive and non-recursive) outperforms genetic programming without ADFs. The scalability of these techniques is also investigated. The computational effort required to reach a solution using ADFs with recursion is shown to remain essentially constant with world size, while genetic programming with non-recursive ADFs scales linearly at best, and basic genetic programming scales exponentially. Finally, many solutions were found using genetic programming with recursive ADFs which generalized to any world size. Iterative structures are an essential component in programming. Iteration and recursion lead to more compact programs and, in many cases, facilitate generalization. Since genetic programming is a genetic algorithm which evolves programs, iterative and recursive capability is desirable. Additionally, the ability to create simpler programs means that an evolved solution may take less computational effort to find. The evolution of iteration and recursion using genetic programming was first explo red by Koza[1992]. To allow the evolution of iterative solutions to the block stacking problem, Koza introduced the Do Until (DU) operator. The DU operator takes two arguments: the first specifies the work to be iteratively executed, and the second specifies a predicate which when satisfied will end the iteration. To prevent infinite loops, an upper limit on the number of iterations is externally imposed. Variations of this form of restricted iteration have proven useful in several problem domains including protein sequencing and optical character recognition [Koza 1994], [Andre 1994a], [chapter 8]. Koza[1992] also investigates a very limited form of recursion for sequence induction. Programs capable of producing the Fibonacci sequence are achieved by allowing the S-expression to reference previously computed values in the sequence. Although much work has been done in the synthesis of recursive functional programs using other machine learning methods (see [Banerjee 1987], [Hutchinson 1994]), little has been done to explore the evolution of recursion using genetic programming (see [Nordin 1995]). This article investigates a method for evolving recursive programs for tree search. Many techniques used in AI systems, including those for game-playing and planning, depend on an agent's ability to search tree structures [Nilsson 1971], but are not optimal. These systems are thus prime candidates for genetic programming. Similar to restricted 
Abstract-found: 1
Intro-found: 1
Reference: <author> Andre, D. </author> <title> (1994a) "Evolution of Mapmaking: Learning, Planning, and Memory Using Genetic Programming," </title> <booktitle> in Proceedings of the First IEEE Conference on Evolutionary Computation. </booktitle> <address> New York, NY: </address> <publisher> IEEE Press. </publisher>
Reference: <institution> Volume I. </institution>
Reference: <author> Andre, D. </author> <title> (1994b) "Learning and Upgrading Rules for an OCR system using Genetic Programming," </title> <booktitle> in Proceedings of the First IEEE Conference on Evolutionary Computation. </booktitle> <address> New York, NY: </address> <publisher> IEEE Press. </publisher>
Reference: <institution> Volume I. </institution>
Reference: <author> Andre, D. (1996) and J. Koza, </author> <title> "Locating Transmembrane Domains in Proteins Using Genetic Programming," </title> <booktitle> in Advances in Genetic Programming 2 , 8, </booktitle> <editor> P. Angeline and K. Kinnear, Eds. </editor> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Banerjee, A. </author> <title> (1987) "A Methodology for Synthesis of Recursive Functional Programs," </title> <journal> in ACM TOPLAS </journal> . 
Reference: <author> Hutchinson, A. </author> <title> (1994) Algorithm Learning . Oxford: </title> <publisher> Clarendon Press. </publisher>
Reference: <author> Holland, J. (1986), K. Holyoak, R. Nisbett, and P. Thagard. </author> <title> Induction: Process of Inference, Learning, and Discovery . Cambridge, </title> <address> MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Koza, J. </author> <title> (1992) Genetic Programming: On the Programming of Computers by the Means of Natural Selection . Cambridge, </title> <address> MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Figure 10.7, therefore, does not include a graph for the non-recursive ADF technique. problem with 99% probability for the five world sizes. E is defined as the minimum number of individuals which need to be processed to achieve this probability <ref> ( Koza 1992) </ref>. E = minimum (M * i * R (z)) where M is the population size, i is the generation number, and R (z) is the number of runs required to achieve a probability of z.
Reference: <author> Koza, J. </author> <title> (1994) Genetic Programming 2: Automatic Creation of Reusable Subroutines . Cambridge, </title> <address> MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Nilsson, N. </author> <booktitle> (1971) ProblemSolving Methods in Artificial Intelligence . New York, </booktitle> <address> NY: </address> <publisher> McGraw Hill. </publisher>
Reference: <author> Nordin, J. (1995) and W. Banzhaf, </author> <title> "Evolving Turing Complete Programs for a Register Machine with Self-Modifying Code," </title> <booktitle> in Proceedings of the Sixth International Conference of Genetic Algorithms. </booktitle> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann Publishers Inc. </publisher>
Reference: <author> Teller, A. </author> <title> (1994) "The Evolution of Mental Models," </title> <booktitle> in Advances in Genetic Programming , P. </booktitle> <editor> Angeline and K. Kinnear, Eds. </editor> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
References-found: 13

