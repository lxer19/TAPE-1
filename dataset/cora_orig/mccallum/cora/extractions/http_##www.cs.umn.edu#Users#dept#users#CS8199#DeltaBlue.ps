URL: http://www.cs.umn.edu/Users/dept/users/CS8199/DeltaBlue.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/CS8199/
Root-URL: http://www.cs.umn.edu
Title: Multi-way versus One-way Constraints in User Interfaces: Experience with the DeltaBlue Algorithm  
Author: Michael Sannella, John Maloney, Bjorn Freeman-Benson, and Alan Borning 
Abstract: Technical Report 92-07-05a Dept. of Computer Science and Engineering University of Washington May 1993 Abstract The efficient satisfaction of constraints is essential to the performance of constraint-based user interfaces. In the past, most constraint-based user interfaces have used one-way rather than multi-way constraints because of a widespread belief that one-way constraints were more efficient. In this paper we argue that many user interface construction problems are handled more naturally and elegantly by multi-way constraints than by one-way constraints. We present pseudocode for an incremental multi-way constraint satisfaction algorithm, DeltaBlue, and describe experience in using the algorithm in two user interface toolkits. Finally, we provide performance figures demonstrating that multi-way constraint solvers can be entirely competitive in performance with one-way constraint solvers. This is a preprint of a paper that will appear in the journal Software|Practice and Experience in 1993. It is a slightly revised version of Technical Report 92-07-05, July 1992. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Paul Barth. </author> <title> An Object-Oriented Approach to Graphical Interfaces. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5(2) </volume> <pages> 142-172, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Constraints have been used in a fair number of user interfaces and user interface construction systems, including Animus [10], the Cactus statistics exploration environment [33], the Constraint Window System (CWS) [12], Coral [45], Fabrik [26], the FilterBrowser user interface construction tool [11], Garnet [35], GITS [37], GROW <ref> [1] </ref>, Peridot [34], Picasso [38], RENDEZVOUS [21, 22], the RTL/CRTL tiled window layout system [7], and ThingLab II [31, 32].
Reference: [2] <author> Alan Borning. </author> <title> The Programming Language Aspects of ThingLab, A Constraint-Oriented Simulation Laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 353-387, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: There is a large body of work applying constraints in different domains. Constraints have been applied to geometric layout in drawing programs including COOL [29], IDEAL [47], the IntelliDraw program from Aldus Corporation, Juno [36], Magritte [20], the celebrated Sketchpad system [44], and ThingLab I <ref> [2] </ref>. <p> Should we change just B, change just C, change both B and C, undo the change to A, or what? Earlier systems used a variety of heuristics in making this decision. In ThingLab I <ref> [2] </ref> the local propagation methods of a constraint were ordered to indicate which ones should be used in preference to others. In Magritte [20], the system performed a breadth-first search to change as few variables as possible. However, none of these methods was entirely satisfactory: sometimes they gave counterintuitive solutions. <p> plots and the data set when any of the plots may be changed would be considerably more complicated. (Reference [39] discusses one way to implement scatterplots using multi-way constraints.) The capability of having multiple editable displays of application data was used to good advantage in such systems as ThingLab I <ref> [2] </ref>, Animus [10], ThingLab II [31, 32], and RENDEZVOUS [21, 22]. In both ThingLabs, for example, one could have multiple views of a numeric application variable, e.g. a textual display of the number and a bar chart.
Reference: [3] <author> Alan Borning and Robert Duisberg. </author> <title> Constraint-Based Tools for Building User Interfaces. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5(4) </volume> <pages> 345-374, </pages> <month> October </month> <year> 1986. </year>
Reference-contexts: In user interfaces, constraints can be used to maintain consistency between application data and a display of that data, to maintain consistency among multiple views of data, to maintain layout relationships among graphical objects, and to compose complex user interface components from simpler ones <ref> [3, 31] </ref>. Giving the system responsibility for maintaining the various relationships in a user interface frees the programmer from the tedious and error-prone task of maintaining these relationships by hand, making it faster to develop complex graphical user interfaces.
Reference: [4] <author> Alan Borning, Robert Duisberg, Bjorn Freeman-Benson, Axel Kramer, and Michael Woolf. </author> <title> Constraint Hierarchies. </title> <booktitle> In Proceedings of the 1987 ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 48-60. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1987. </year>
Reference-contexts: Weak constraints can be used to specify default relationships, which can be overridden by adding stronger constraints. A complete discussion of a theory of constraint hierarchies is given in reference [5], with preliminary versions in references <ref> [6, 4] </ref>, and an alternative formulation in reference [18]. Briefly, a labeled constraint is a constraint labeled with a strength, written sc, where s is a strength and c is a constraint.
Reference: [5] <author> Alan Borning, Bjorn Freeman-Benson, and Molly Wilson. </author> <title> Constraint Hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5(3) </volume> <pages> 223-270, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Weak constraints can be used to specify default relationships, which can be overridden by adding stronger constraints. A complete discussion of a theory of constraint hierarchies is given in reference <ref> [5] </ref>, with preliminary versions in references [6, 4], and an alternative formulation in reference [18]. Briefly, a labeled constraint is a constraint labeled with a strength, written sc, where s is a strength and c is a constraint. <p> The annotations are specific to this constraint, rather than to the variables, so that other constraints could cause A to be changed. A declarative semantics for read-only annotations is given in reference <ref> [5] </ref>. 3 Multi-way versus One-way Constraints In this section, we will compare multi-way and one-way constraints, and argue that certain practical problems in user interface construction are handled more elegantly by multi-way constraints than by one-way constraints. A one-way constraint system can easily be simulated by a multi-way one.
Reference: [6] <author> Alan Borning, Michael Maher, Amy Martindale, and Molly Wilson. </author> <title> Constraint Hierarchies and Logic Programming. </title> <booktitle> In Proceedings of the Sixth International Conference on Logic Programming, </booktitle> <pages> pages 149-164, </pages> <address> Lisbon, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: Finally, researchers have developed several general-purpose languages that use constraints, in cluding Bertrand [30], Kaleidoscope [14, 18], Siri [23, 24], as well as a number of languages integrating constraints with logic programming including CAL [42], CHIP [9, 46], CLP (R) [27, 28], CLP (*) [48], HCLP (R) <ref> [6, 49] </ref>, Prolog III [8], and the cc (concurrent constraint) languages [41, 40]. 2.1 Refinement versus Perturbation We can roughly classify constraint-based languages and systems as using one of two approaches: the refinement model or the perturbation model. In both cases constraints restrict the values that variables may take on. <p> Weak constraints can be used to specify default relationships, which can be overridden by adding stronger constraints. A complete discussion of a theory of constraint hierarchies is given in reference [5], with preliminary versions in references <ref> [6, 4] </ref>, and an alternative formulation in reference [18]. Briefly, a labeled constraint is a constraint labeled with a strength, written sc, where s is a strength and c is a constraint.
Reference: [7] <author> Ellis S. Cohen, Edward T. Smith, and Lee A. Iverson. </author> <title> Constraint-Based Tiled Windows. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 35-45, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: and user interface construction systems, including Animus [10], the Cactus statistics exploration environment [33], the Constraint Window System (CWS) [12], Coral [45], Fabrik [26], the FilterBrowser user interface construction tool [11], Garnet [35], GITS [37], GROW [1], Peridot [34], Picasso [38], RENDEZVOUS [21, 22], the RTL/CRTL tiled window layout system <ref> [7] </ref>, and ThingLab II [31, 32].
Reference: [8] <author> Alain Colmerauer. </author> <title> An Introduction to Prolog III. </title> <journal> Communications of the ACM, </journal> <pages> pages 69-90, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: researchers have developed several general-purpose languages that use constraints, in cluding Bertrand [30], Kaleidoscope [14, 18], Siri [23, 24], as well as a number of languages integrating constraints with logic programming including CAL [42], CHIP [9, 46], CLP (R) [27, 28], CLP (*) [48], HCLP (R) [6, 49], Prolog III <ref> [8] </ref>, and the cc (concurrent constraint) languages [41, 40]. 2.1 Refinement versus Perturbation We can roughly classify constraint-based languages and systems as using one of two approaches: the refinement model or the perturbation model. In both cases constraints restrict the values that variables may take on.
Reference: [9] <author> M. Dincbas, P. Van Hentenryck, H. Simonis, A. Aggoun, T. Graf, and F. Bertheir. </author> <title> The Constraint Logic Programming Language CHIP. </title> <booktitle> In Proceedings Fifth Generation Computer Systems-88, </booktitle> <pages> pages 249-264, </pages> <year> 1988. </year>
Reference-contexts: Finally, researchers have developed several general-purpose languages that use constraints, in cluding Bertrand [30], Kaleidoscope [14, 18], Siri [23, 24], as well as a number of languages integrating constraints with logic programming including CAL [42], CHIP <ref> [9, 46] </ref>, CLP (R) [27, 28], CLP (*) [48], HCLP (R) [6, 49], Prolog III [8], and the cc (concurrent constraint) languages [41, 40]. 2.1 Refinement versus Perturbation We can roughly classify constraint-based languages and systems as using one of two approaches: the refinement model or the perturbation model.
Reference: [10] <author> Robert Duisberg. </author> <title> Animation Using Temporal Constraints: An Overview of the Animus System. </title> <journal> Human-Computer Interaction, </journal> <volume> 3(3) </volume> <pages> 275-308, </pages> <year> 1987. </year>
Reference-contexts: Constraints have been used in a fair number of user interfaces and user interface construction systems, including Animus <ref> [10] </ref>, the Cactus statistics exploration environment [33], the Constraint Window System (CWS) [12], Coral [45], Fabrik [26], the FilterBrowser user interface construction tool [11], Garnet [35], GITS [37], GROW [1], Peridot [34], Picasso [38], RENDEZVOUS [21, 22], the RTL/CRTL tiled window layout system [7], and ThingLab II [31, 32]. <p> the data set when any of the plots may be changed would be considerably more complicated. (Reference [39] discusses one way to implement scatterplots using multi-way constraints.) The capability of having multiple editable displays of application data was used to good advantage in such systems as ThingLab I [2], Animus <ref> [10] </ref>, ThingLab II [31, 32], and RENDEZVOUS [21, 22]. In both ThingLabs, for example, one could have multiple views of a numeric application variable, e.g. a textual display of the number and a bar chart.
Reference: [11] <author> Raimund Ege, David Maier, and Alan Borning. </author> <title> The Filter Browser|Defining Interfaces Graphically. </title> <booktitle> In Proceedings of the European Conference on Object-Oriented Programming, </booktitle> <pages> pages 155-165, </pages> <address> Paris, </address> <month> June </month> <year> 1987. </year> <institution> Association Fran~caise pour la Cybernetique Economique et Technique. </institution>
Reference-contexts: Constraints have been used in a fair number of user interfaces and user interface construction systems, including Animus [10], the Cactus statistics exploration environment [33], the Constraint Window System (CWS) [12], Coral [45], Fabrik [26], the FilterBrowser user interface construction tool <ref> [11] </ref>, Garnet [35], GITS [37], GROW [1], Peridot [34], Picasso [38], RENDEZVOUS [21, 22], the RTL/CRTL tiled window layout system [7], and ThingLab II [31, 32].
Reference: [12] <author> Danny Epstein and Wilf LaLonde. </author> <title> A Smalltalk Window System Based on Constraints. </title> <booktitle> In Proceedings of the 1988 ACM Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 83-94, </pages> <address> San Diego, </address> <month> September </month> <year> 1988. </year> <note> ACM. </note>
Reference-contexts: Constraints have been used in a fair number of user interfaces and user interface construction systems, including Animus [10], the Cactus statistics exploration environment [33], the Constraint Window System (CWS) <ref> [12] </ref>, Coral [45], Fabrik [26], the FilterBrowser user interface construction tool [11], Garnet [35], GITS [37], GROW [1], Peridot [34], Picasso [38], RENDEZVOUS [21, 22], the RTL/CRTL tiled window layout system [7], and ThingLab II [31, 32].
Reference: [13] <author> Bjorn Freeman-Benson. </author> <title> A Module Compiler for ThingLab II. </title> <booktitle> In Proceedings of the 1989 ACM Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 389-396, </pages> <address> New Orleans, </address> <month> October </month> <year> 1989. </year> <note> ACM. </note>
Reference-contexts: It would be convenient to specify a constraint that keeps the two representations consistent, using two methods each with multiple outputs: one setting x and y, the other setting and . More significantly, the single-output method restriction limits DeltaBlue's ability to interface to a constraint compiler <ref> [13] </ref>. Suppose DeltaBlue could treat a subgraph of the constraint graph (e.g., one containing simultaneous equations) as a black box. Then a more powerful constraint solver, one capable of solving simultaneous equations, could be called to find a solution for this subgraph.
Reference: [14] <author> Bjorn Freeman-Benson and Alan Borning. </author> <booktitle> The Design and Implementation of Kaleidoscope'90, </booktitle>
Reference-contexts: Finally, researchers have developed several general-purpose languages that use constraints, in cluding Bertrand [30], Kaleidoscope <ref> [14, 18] </ref>, Siri [23, 24], as well as a number of languages integrating constraints with logic programming including CAL [42], CHIP [9, 46], CLP (R) [27, 28], CLP (*) [48], HCLP (R) [6, 49], Prolog III [8], and the cc (concurrent constraint) languages [41, 40]. 2.1 Refinement versus Perturbation We can
References-found: 14

