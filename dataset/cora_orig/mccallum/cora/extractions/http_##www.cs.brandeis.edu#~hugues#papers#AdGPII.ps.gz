URL: http://www.cs.brandeis.edu/~hugues/papers/AdGPII.ps.gz
Refering-URL: http://demo.cs.brandeis.edu/~hugues/spirals.html
Root-URL: http://www.cs.brandeis.edu
Author: Hugues Juille and Jordan B. Pollack 
Note: 17.1 Introduction  
Abstract: As the field of Genetic Programming (GP) matures and its breadth of application increases, the need for parallel implementations becomes absolutely necessary. The transputer-based system presented in [Koza and Andre 1995] is one of the rare such parallel implementations. Until today, no implementation has been proposed for parallel GP using a SIMD architecture, except for a data-parallel approach [Tufts 1995], although others have exploited workstation farms and pipelined supercomputers. One reason is certainly the apparent difficulty of dealing with the parallel evaluation of different S-expressions when only a single instruction can be executed at the same time on every processor. The aim of this chapter is to present such an implementation of parallel GP on a SIMD system, where each processor can efficiently evaluate a different S-expression. We have implemented this approach on a MasPar MP-2 computer, and will present some timing results. To the extent that SIMD machines, like the MasPar are available to offer cost-effective cycles for scientific experimentation, this is a useful approach. The idea of simulating a MIMD machine using a SIMD architecture is not new [Hillis and Steele 1986; Littman and Metcalf 1990; Dietz and Cohen 1992]. One of the original ideas for the Connection Machine [Hillis and Steele 1986] was that it could simulate other parallel architectures. Indeed, in the extreme, each processor on a SIMD architecture can simulate a universal Turing machine (TM). With different turing machine specifications stored in each local memory, each processor would simply have its own tape, tape head, state table and state pointer, and the simulation would be performed by repeating the basic TM operations simultaneously. Of course, such a simulation would be very inefficient, and difficult to program, but would have the advantage of being really MIMD, where no SIMD processor would be in idle state, until its simulated machine halts. Now let us consider an alternative idea, that each SIMD processor would simulate an individual stored program computer using a simple instruction set. For each step of the simulation, the SIMD system would sequentially execute each possible instruction on the subset of processors whose next instruction match it. For a typical assembly language, even with a reduced instruction set, most processors would be idle most of the time. However, if the set of instructions implemented on the virtual processor is very small, this approach can be fruitful. In the case of Genetic Programming, the "instruction set" is composed of the specified set of functions designed for the task. We will show below that with a precompilation step, simply adding a push, a conditional, and unconditional branching and a stop instruction, we can get a very effective MIMD simulation running. 
Abstract-found: 1
Intro-found: 0
Reference: <author> Ackley, D. H. and Littman, M. L. </author> <year> (1994a). </year> <title> Altruism in the evolution of communication. </title> <editor> In Brooks and Maes (Eds.), </editor> <booktitle> Artificial Life IV, </booktitle> <pages> pp. 40-48. </pages> <publisher> MIT Press. </publisher>
Reference: <author> Ackley, D. H. and Littman, M. L. </author> <year> (1994b). </year> <title> A case for lamarckian evolution. </title> <editor> In Langton, C. G. (Ed.), </editor> <booktitle> Artificial Life III, </booktitle> <pages> pp. 3-10. </pages> <publisher> Addison-Wesley. </publisher>
Reference: <author> Angeline, P. J. </author> <year> (1995). </year> <title> Two self-adaptive crossover operations for genetic programming. </title> <booktitle> In Advances in Genetic Programming II. </booktitle> <publisher> MIT Press. </publisher>
Reference: <author> Angeline, P. J. and Pollack, J. B. </author> <year> (1992). </year> <title> The evolutionary induction of subroutines. </title> <booktitle> In The Fourteenth Annual Conference of the Cognitive Science Society, </booktitle> <pages> pp. 236-241. </pages>
Reference: <author> Angeline, P. J. and Pollack, J. B. </author> <year> (1993). </year> <title> Competitive environments evolve better solutions for complex tasks. </title> <booktitle> In The Fifth International Conference on Genetic Algorithms, </booktitle> <pages> pp. 264-270. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Carpenter, G., Grossberg, S., Markuzon, N., Reynolds, J., and Rosen, D. </author> <year> (1992). </year> <title> Fuzzy artmap: A neural network architecture for incremental supervised learning of analog multidimensional maps. </title> <journal> IEEE Transactions on Neural Networks, </journal> <volume> 3 </volume> <pages> 698-713. </pages>
Reference: <author> Dietz, H. and Cohen, W. </author> <year> (1992). </year> <title> A control-parallel programming model implemented on simd hardware. </title> <booktitle> In Languages and Compilers for Parallel Computing, volume 757 of LNCS, </booktitle> <pages> pp. 311-325. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Fahlman, S. E. and Lebiere, C. </author> <year> (1990). </year> <title> The cascade-correlation learning architecture. </title> <editor> In Touretzky (Ed.), </editor> <booktitle> Advances in Neural Information Processing Systems 2. </booktitle> <publisher> Morgan Kauffman. </publisher>
Reference: <author> Hillis, W. D. </author> <year> (1992). </year> <title> Co-evolving parasites improve simulated evolution as an optimization procedure. </title> <editor> In Langton, C. et al. (Eds.), </editor> <booktitle> Artificial Life II, </booktitle> <pages> pp. 313-324. </pages> <publisher> Addison Wesley. </publisher>
Reference: <author> Hillis, W. D. and Steele, G. L. </author> <year> (1986). </year> <title> Data parallel algorithms. </title> <journal> IEEE Computers, </journal> <volume> 29 </volume> <pages> 1170-1183. </pages>
Reference: <author> Jefferson, D., Collins, R., Cooper, C., Dyer, M., Flowers, M., Korf, R., Taylor, C., and Wang, A. </author> <year> (1992). </year> <title> Evolution as a theme in artificial life: The genesys/tracker system. </title> <editor> In Langton, C. et al. (Eds.), </editor> <booktitle> Artificial Life II, </booktitle> <pages> pp. 549-578. </pages> <publisher> Addison Wesley. </publisher>
Reference: <author> Koza, J. R. </author> <year> (1992). </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <publisher> MIT Press. </publisher>
Reference: <author> Koza, J. R. </author> <year> (1994). </year> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <publisher> MIT Press. </publisher>
Reference: <author> Koza, J. R. and Andre, D. </author> <year> (1995). </year> <title> Parallel genetic programming: a scalable implementation using the transputer architecture. </title> <booktitle> In Advances in Genetic Programming II. </booktitle> <publisher> MIT Press. </publisher>
Reference: <author> Lang, K. J. and Witbrock, M. J. </author> <year> (1988). </year> <title> Learning to tell two spirals apart. </title> <booktitle> In Proceedings of the 1988 Connectionist Summer Schools. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Littman, M. S. and Metcalf, C. D. </author> <year> (1990). </year> <title> An exploration of asynchronous data-parallelism. </title> <type> Personal communication. </type>
Reference: <author> Perkis, T. </author> <year> (1994). </year> <title> Stack-based genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence. </booktitle> <publisher> IEEE Press. </publisher>
Reference: <author> Rosin, C. D. and Belew, R. K. </author> <year> (1995). </year> <title> Methods for competitive co-evolution: Finding opponents worth beating. </title> <editor> In Eshelman, L. J. (Ed.), </editor> <booktitle> Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <address> San Mateo, California. </address> <publisher> Morgan Kauffmann. </publisher>
Reference: <author> Sims, K. </author> <year> (1994). </year> <title> Evolving 3d morphology and behavior by competition. </title> <editor> In Brooks and Maes (Eds.), </editor> <booktitle> Artificial Life IV, </booktitle> <pages> pp. 28-39. </pages> <publisher> MIT Press. </publisher>
Reference: <author> Tanese, R. </author> <year> (1989). </year> <title> Distributed genetic algorithms. </title> <booktitle> In Proceedings of the Third International Conference on Genetic Algorithms, </booktitle> <pages> pp. 434-439. </pages>
Reference: <author> Tufts, P. </author> <year> (1995). </year> <title> Parallel case evaluation for genetic programming. </title> <editor> In Nadel, L. and Stein, D. L. (Eds.), </editor> <booktitle> 1993 Lectures in Complex Systems, volume VI of Santa Fe Institute Studies in the Science of Complexity, </booktitle> <pages> pp. 591-596. </pages> <publisher> Addison-Wesley. </publisher>
References-found: 21

