URL: ftp://ftp.dcs.ex.ac.uk/pub/media/sv/ifip.ps.Z
Refering-URL: http://www.dcs.ex.ac.uk/~lindsey/CV/index.htm
Root-URL: 
Email: email: lindsey@dcs.exeter.ac.uk  
Title: Interactive learning and researching with visualization  
Author: Lindsey Ford 
Note: (Submitted to the IFIP WG3.2 Working Conference on Computers in University education)  
Date: May 8, 1993  
Address: Exeter EX4 4PT U.K.  
Affiliation: Department of Computer Science University of Exeter  
Abstract: Can the use of visualization promote links between learners, teachers, and researchers? Could such links improve learning, the quality of teaching, or stimulate new research? We report on our tentative experiment in this direction using animation software and conclude that it does indeed promote links and stimulate research. We present our plans for the future. 
Abstract-found: 1
Intro-found: 1
Reference: [Cha87] <author> S-K Chang. </author> <title> Visual languages: a tutorial and survey. </title> <journal> IEEE Software, </journal> <volume> 4(1) </volume> <pages> 29-39, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: We begin by summarising our research aims and activities prior to the experiment and some of our teaching commitments. We then describe our experiment in visualization, results, conclusions, and future plans. 2 Research Visualization is an active area of research that has been generally reviewed and explored <ref> [Cha87, Mye90, Sta92b, Mur93] </ref> and in particular related to programming languages and environments [Shu88, Hil92]. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [CR92] <author> K C Cox and G-C Roman. </author> <title> Abstraction in algorithm animation. </title> <booktitle> In Proceedings 1992 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 18-24. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: How can we analyse these visualizations from an animation standpoint? What characteristics do the animations have? Cox and Roman <ref> [CR92] </ref> present five levels in their classification of abstraction as applied to algorithm animation: 1. direct representations map some aspect of a program directly to a picture, with no abstraction other than a simple transformation to a visual form; 2. structural representations conceal or encapsulate extraneous data and present the resulting
Reference: [For93] <author> L Ford. </author> <title> A language for specifying graphical computer animations. </title> <type> Research Report 266, </type> <institution> Department of Computer Science, University of Exeter, Exeter, U.K., </institution> <year> 1993. </year>
Reference-contexts: In this way we hope that the programmer would achieve a better comprehension of the program than would be possible using the conventional single textual view. We are using animation techniques to provide these views. The animation software we have been developing for this purpose, called Goofy <ref> [For93] </ref>, is based on a general 2D animation system POLKA [Sta92a]. 3 Teaching Our major teaching commitment for first-year Computer Science, Cognitive Science, and Combined Computer Science/Mathematical Science students concerns students learning to program. This is given as a lecture course Languages and Programming and an associated practical course Project-I.
Reference: [FT93] <author> L Ford and D Tallis. </author> <title> Interacting visual abstractions of programs. </title> <type> Research Report 273, </type> <institution> Department of Computer Science, University of Exeter, Exeter, U.K., </institution> <year> 1993. </year>
Reference-contexts: We are experimenting with ways to reconcile these two dimensions. In partic 2 ular we are examining various abstractions to facilitate program visualization. We are looking at different abstractions of object-oriented programs (we call them views) and how they relate to each other <ref> [FT93] </ref>. We envisage a programmer being able to select and interact with different views of a program. As the programmer focuses on an element of a view (by selecting it) so related views are dynamically updated.
Reference: [Hil92] <author> D D Hils. </author> <title> Visual languages and computing survey: data flow visual programming languages. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 3(1) </volume> <pages> 69-101, </pages> <year> 1992. </year>
Reference-contexts: We then describe our experiment in visualization, results, conclusions, and future plans. 2 Research Visualization is an active area of research that has been generally reviewed and explored [Cha87, Mye90, Sta92b, Mur93] and in particular related to programming languages and environments <ref> [Shu88, Hil92] </ref>. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [Mur93] <author> B S Murray. </author> <title> Visualizing and representing knowledge for the end user: a review. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 38 </volume> <pages> 23-49, </pages> <year> 1993. </year>
Reference-contexts: We begin by summarising our research aims and activities prior to the experiment and some of our teaching commitments. We then describe our experiment in visualization, results, conclusions, and future plans. 2 Research Visualization is an active area of research that has been generally reviewed and explored <ref> [Cha87, Mye90, Sta92b, Mur93] </ref> and in particular related to programming languages and environments [Shu88, Hil92]. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [Mye90] <author> B A Myers. </author> <title> Taxonomies of visual programming and program visualization. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 1(1) </volume> <pages> 97-123, </pages> <year> 1990. </year>
Reference-contexts: We begin by summarising our research aims and activities prior to the experiment and some of our teaching commitments. We then describe our experiment in visualization, results, conclusions, and future plans. 2 Research Visualization is an active area of research that has been generally reviewed and explored <ref> [Cha87, Mye90, Sta92b, Mur93] </ref> and in particular related to programming languages and environments [Shu88, Hil92]. In the latter area two subdivisions are recognised namely program visualization and visual programming. <p> In the latter area two subdivisions are recognised namely program visualization and visual programming. Myers <ref> [Mye90] </ref> states program visualization is where a "program is specified in a conventional, textual manner, and the graphics is used to illustrate some aspect of the program or its runtime execution" and visual programming is the ability "to specify a program in a two- or more dimensional fashion". "Visual Programming and <p> of the program or its runtime execution" and visual programming is the ability "to specify a program in a two- or more dimensional fashion". "Visual Programming and Program Visualization are interesting areas that show promise for improving the programming process, especially for non-programmers, but more work needs to be done" <ref> [Mye90] </ref>. The reason for the "promise" is that two-dimensional pictorial displays can better meet the needs of human visual information processing than conventional single-dimensional textual representations. One of the reasons why more work needs to be done is that "many Visual Programming languages are 'unstructured' in the software engineering sense" [Mye90], <p> <ref> [Mye90] </ref>. The reason for the "promise" is that two-dimensional pictorial displays can better meet the needs of human visual information processing than conventional single-dimensional textual representations. One of the reasons why more work needs to be done is that "many Visual Programming languages are 'unstructured' in the software engineering sense" [Mye90], that is they lack appropriate abstraction mechanisms. The "promise" of easier programming will remain a myth until appropriate abstractions are provided.
Reference: [Raj90] <author> T. Rajan. </author> <title> Principles for the design of dynamic tracing environments for novice programmers. </title> <journal> Instructional Science, </journal> 19(4/5):377-406, 1990. 
Reference-contexts: These practical difficulties could contribute to the well-documented problems of learners: * learning dynamic concepts such as recursion, iteration, variable binding, flow of control, parameter passing [SE84]. * difficulty relating abstract concepts to concrete situations <ref> [Raj90] </ref>. 3 Undaunted, we taught 46 first-year students object-oriented programming using traditional teaching methods for two semesters with them using standard VT100 text terminals to undertake a series of programming assignments. During the second semester we had to decide on a suitable application for students to develop for their project.
Reference: [Rei86] <author> L A Reid. </author> <title> Ways of Understanding and Education. </title> <publisher> Heinemann Educational Books Ltd, </publisher> <address> London, </address> <year> 1986. </year>
Reference-contexts: Likewise teachers were eager to see these visualizations with far greater enthusiasm than they tackle the many pages of written material submitted by students. What was the essence of this? In talking about the visual arts, Reid <ref> [Rei86] </ref> states: Each work of art is 'new', not in the trifling sense in which each raindrop or each tick of the clock is new, but significantly and valuably new because it is a new creation with a form which requires a special act of of experientially aesthetic attention in order <p> Reid <ref> [Rei86] </ref> further states: The teacher who stimulates and encourages this engrossed engagement of pupils in whatever they are studying, is teaching ed-ucatively, and the outcome is educative learning.
Reference: [SE84] <author> E Soloway and K Ehrlich. </author> <title> Empirical studies of programming knowledge. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> September </month> <year> 1984. </year> <month> 10 </month>
Reference-contexts: These practical difficulties could contribute to the well-documented problems of learners: * learning dynamic concepts such as recursion, iteration, variable binding, flow of control, parameter passing <ref> [SE84] </ref>. * difficulty relating abstract concepts to concrete situations [Raj90]. 3 Undaunted, we taught 46 first-year students object-oriented programming using traditional teaching methods for two semesters with them using standard VT100 text terminals to undertake a series of programming assignments.
Reference: [Shu88] <author> N C Shu. </author> <title> Visual Programming. </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: We then describe our experiment in visualization, results, conclusions, and future plans. 2 Research Visualization is an active area of research that has been generally reviewed and explored [Cha87, Mye90, Sta92b, Mur93] and in particular related to programming languages and environments <ref> [Shu88, Hil92] </ref>. In the latter area two subdivisions are recognised namely program visualization and visual programming.
Reference: [Sta92a] <author> J T Stasko. </author> <title> Polka animation designer's package. </title> <type> Technical report, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <address> Atlanta, GA 30332-0280, </address> <year> 1992. </year>
Reference-contexts: We are using animation techniques to provide these views. The animation software we have been developing for this purpose, called Goofy [For93], is based on a general 2D animation system POLKA <ref> [Sta92a] </ref>. 3 Teaching Our major teaching commitment for first-year Computer Science, Cognitive Science, and Combined Computer Science/Mathematical Science students concerns students learning to program. This is given as a lecture course Languages and Programming and an associated practical course Project-I. <p> So, for example, a student might produce an animation to show how the inheritance mechanism of object-oriented programming works. The software in the Goofy system builds on the software and ideas of John T. Stasko <ref> [Sta92a] </ref>. Goofy provides a language and processor to provide smooth, 2 1/2-dimensional colour animations on top of the X11 Window System. The language provides the animation designer with object definition constructs, object movement descriptors, an object attribute change facility, a method for choreographing events, and several windows for animation.
Reference: [Sta92b] <author> J T Stasko. </author> <title> Understanding and characterizing software visualization systems. </title> <booktitle> In Proceedings 1992 IEEE Workshop on Visual Languages, </booktitle> <pages> pages 3-10. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year> <title> Acknowledgements I am indebted to John Stasko for providing the POLKA framework and its inspirational ideas. Also I should like to thank the first-year students of 1992/93 (Computer Science, Cognitive Science, Combined Honours Computer Science and Mathematics) for their enthusiastic response to a project involving Goofy. </title> <type> 11 </type>
Reference-contexts: We begin by summarising our research aims and activities prior to the experiment and some of our teaching commitments. We then describe our experiment in visualization, results, conclusions, and future plans. 2 Research Visualization is an active area of research that has been generally reviewed and explored <ref> [Cha87, Mye90, Sta92b, Mur93] </ref> and in particular related to programming languages and environments [Shu88, Hil92]. In the latter area two subdivisions are recognised namely program visualization and visual programming.
References-found: 13

