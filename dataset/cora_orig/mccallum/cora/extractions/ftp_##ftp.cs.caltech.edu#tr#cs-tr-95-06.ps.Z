URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-95-06.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Title: Parallel Programming Archetypes in Combinatorics and Optimization  
Author: Svetlana A. Kryukova Advisor: K. Mani Chandy 
Degree: Thesis by  In Partial Fulfillment of the Requirements for the Degree of Master of Science  
Date: June 12, 1995  
Address: Pasadena, California 91125  
Affiliation: California Institute of Technology Computer Science Department  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Paul Ainsworth and Svetlana Kryukova. </author> <title> A multimedia interactive environment using program archetypes: Divide-and-conquer. </title> <type> Technical Report Caltech-CS-TR-93-36, </type> <institution> Computer Science Department, Califor-nia Institute of Technology, </institution> <year> 1993. </year>
Reference-contexts: In one subpartition the object P.k is put into the knapsack, in the other one it is left out: int Branch (Partition t aPartition, Partition t subPartitions [2])f /fl copy the values of the fixed variables from aPartition fl/ subPartitions [0] = aPartition; subPartitions <ref> [1] </ref> = aPartition; /fl fix value of (aPartition.k)-th variable fl/ subPartitions [0].k = aPartition.k + 1; subPartitions [1].k = aPartition.k + 1; /fl do not put the object in the knapsack fl/ subPartitions [0].x [aPartition.k] = 0; /fl put the object into the knapsack (if possible) fl/ if (ObjectWeights [aPartition.k] subPartitions <p> Several chapters of the textbook are currently available on the World Wide Web at http://www.etext.caltech.edu. The structure and contents of the textbook are described in <ref> [1] </ref>. 45
Reference: [2] <author> Giles Brassard and Paul Bratley. </author> <title> Algorithmics: theory and practice. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1988. </year>
Reference-contexts: For example, if procedure proc (x, y) has input parameter x and output parameter y, then predicate proc (a; b) holds if and only if, after execution of proc (a,y), y = b. 4 Chapter 2 The Divide-and-Conquer Archetype 2.1 Introduction The Divide-and-Conquer Archetype is based on a well-known strategy <ref> [2, 11] </ref> for solving large problems, if there exists an algorithm for solving smaller problems of the same type. <p> The parallel mergesort was implemented using the depth predicted by the model. 26 27 Chapter 3 The Branch and Bound Archetype 3.1 Introduction Branch and Bound is a technique for searching an implicit directed graph which is usually acyclic or even a tree <ref> [2] </ref>. The Branch and Bound approach is often used for finding an optimal solution to some problem specified by a finite but possibly very large space of solutions. <p> any minimization problem can be easily converted into a maximization problem (by changing the sign of the objective function), the above assumptions hold for most problems that can be solved using the Branch and Bound approach. 3.2 Archetype Skeleton It has been suggested in many books on computer algorithms (e.g., <ref> [2] </ref>) that the set of open partitions | partitions yet to be expanded | should be stored in a heap.
Reference: [3] <author> P. Carlin, M. Chandy, and C. Kesselman. </author> <title> The compositional C ++ language definition. </title> <type> Technical Report CS-TR-92-02, </type> <institution> Computer Science Department, California Institute of Technology, </institution> <year> 1992. </year>
Reference: [4] <author> K. Mani Chandy and Svetlana Kryukova. </author> <title> Parallel software architectures. </title> <type> Technical Report forthcoming, </type> <institution> Computer Science Department, California Institute of Technology, </institution> <year> 1995. </year>
Reference-contexts: However, the scalability of the presented approach is far from perfect. A modified Divide-and-Conquer archetype with a more scalable parallel implementation would be even more useful. Such implementation is presented and discussed in <ref> [4] </ref>. 43 * A performance model for the Branch and Bound archetype that can predict the performance of a parallel implementation or choose an efficient implementation for target architecture can be a wonderful tool for programmers. 44 Appendix A Electronic Textbook The full text of the programming templates in CC ++
Reference: [5] <author> M. Chandy, R. Manohar, B. Massingill, and D. Meiron. </author> <title> Integrating task and data parallelism with the collective communication archetype. </title> <type> Technical Report CS-TR-94-08, </type> <institution> Computer Science Department, Cali-fornia Institute of Technology, </institution> <year> 1994. </year>
Reference: [6] <author> J. Eckstein. </author> <title> Control strategies for parallel mixed integer branch and bound. </title> <booktitle> In Supercomputing '94 Proceedings, </booktitle> <pages> pages 41-48. </pages> <institution> The Institute of Electrical and Electronics Engineers, Inc., </institution> <year> 1994. </year>
Reference-contexts: Many approaches that 32 have been already described and analyzed (for example, see <ref> [6, 9] </ref>) can be implemented as programming templates using the components described in section 3.3. One of the simplest centralized strategies is the master-and-slave strategy. One processor is assigned the role of "master" and stores the list of unexpanded partitions.
Reference: [7] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, and V. Sun-deram. </author> <title> PVM: Parallel Virtual Machine A Users' Guide and Tutorial for Networked Parallel Computing. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [8] <author> Intel Corporation. </author> <title> Touchstone Delta C System Calls Reference Manual, </title> <year> 1991. </year>
Reference: [9] <author> Vipin Kumar, Ananth Grama, Anshul Gupta, and George Karypis. </author> <title> In--troduction to Parallel Computing: design and analysis of parallel algorithms, chapter Search Algorithms for Discrete Optimization Problems. </title> <publisher> The Benjamin/ Cummings Publishing Company, </publisher> <year> 1994. </year>
Reference-contexts: Many approaches that 32 have been already described and analyzed (for example, see <ref> [6, 9] </ref>) can be implemented as programming templates using the components described in section 3.3. One of the simplest centralized strategies is the master-and-slave strategy. One processor is assigned the role of "master" and stores the list of unexpanded partitions.
Reference: [10] <author> Berna L. Massingill. </author> <title> Parallel Programming Archetypes in Scientific Computing (working title). </title> <type> PhD thesis, </type> <institution> Computer Science Department, Caltech, </institution> <year> 1995. </year> <note> working title. </note>
Reference: [11] <author> Bernard M.E. Moret and Henry D. Shapiro. </author> <title> Algorithms from P to NP - Volume I: Design and Efficiency. </title> <publisher> The Benjamin/ Cummings Publishing Company, </publisher> <year> 1991. </year>
Reference-contexts: For example, if procedure proc (x, y) has input parameter x and output parameter y, then predicate proc (a; b) holds if and only if, after execution of proc (a,y), y = b. 4 Chapter 2 The Divide-and-Conquer Archetype 2.1 Introduction The Divide-and-Conquer Archetype is based on a well-known strategy <ref> [2, 11] </ref> for solving large problems, if there exists an algorithm for solving smaller problems of the same type.
Reference: [12] <author> P. Sivilotti and P. Carlin. </author> <title> A tutorial for CC ++ . Technical Report CS-TR-94-02, </title> <institution> Computer Science Department, California Institute of Technology, </institution> <year> 1994. </year> <month> 47 </month>
Reference-contexts: public: Solution t ()fg; ~Solution t (); void BaseCaseSolution (Problem t& ); void Merge (Solution t fl); friend CCVoid& operatort (CCVoid& , const Solution t& ); friend CCVoid& operator (CCVoid& , Solution t& ); g; The last two functions in each class are data transfer functions required by CC ++ <ref> [12] </ref>. They define how the data of an object of the class should be transferred from one processor object to another. These functions are invoked when the objects of a class are used as arguments to procedures invoked on a remote processor object.
References-found: 12

