URL: http://www.cs.toronto.edu/~fpitt/papers/MSc-thesis.ps
Refering-URL: http://www.cs.toronto.edu/~fpitt/research.html
Root-URL: 
Title: The Bounded Linear Calculus: A characterization of the class of polynomial-time computable functions based on
Author: by Fran~cois Pitt 
Degree: A thesis submitted in conformity with the requirements for the degree of Master of Science  
Note: c flCopyright by Fran~cois Pitt, 1994  
Address: Toronto  
Affiliation: Graduate Department of Computer Science University of  
Abstract-found: 0
Intro-found: 1
Reference: <author> S. Abramski, </author> <title> Computational interpretations of linear logic. </title> <booktitle> Theoretical Computer Science 111 (1993), </booktitle> <pages> 3-57. </pages>
Reference: <author> N. Benton, J. Bierman, V. de Paiva, and M. Hyland, </author> <title> Term assignment for intuition-istic linear logic. </title> <type> Technical Report 262, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <year> 1992. </year>
Reference: <author> A. J. Field and P. G. Harrison, </author> <title> Functional Programming. </title> <booktitle> International Computer Science. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference: <author> J.-Y. Girard, </author> <title> Linear logic. </title> <booktitle> Theoretical Computer Science 50 (1987), </booktitle> <pages> 1-102. </pages>
Reference-contexts: These rules are reintroduced through the storage (or "of course") connective, !, in a controlled fashion so that a formula of the form !A (a "stored" formula) can be reused as often as wanted in a proof while all other formulas must be used exactly once <ref> (see Girard 1987 for more details) </ref>. Recently, a new refinement to linear logic was introduced by putting an explicit 1 CHAPTER 1. INTRODUCTION 2 bound on the number of times a stored formula can be reused.
Reference: <author> J.-Y. Girard, Y. Lafont, and P. Taylor, </author> <title> Proofs and Types. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 7. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1988. </year>
Reference-contexts: As was shown in Girard ( 1987 ) , the expressive power of ILL is equivalent to that of system F <ref> (i.e., second-order polymorphic lambda calculus, described in Girard et al. 1988) </ref>.
Reference: <author> J.-Y. Girard, A. Scedrov, and P. J. Scott, </author> <title> Bounded linear logic: A modular approach to polynomial time computability. </title> <booktitle> Theoretical Computer Science 97 (1992), </booktitle> <pages> 1-66. </pages>
Reference-contexts: INTRODUCTION 2 bound on the number of times a stored formula can be reused. The resulting system (bounded linear logic, or BLL for short) was shown to have one extremely interesting property: the class of functions representable in the system is exactly the class of polynomial time computable functions <ref> ( Girard et al. 1992 ) </ref> . This remarkable result is the motivation behind the present work, which extends the linear term calculi developed for linear logic to a "bounded linear calculus" corresponding to bounded linear logic.
Reference: <author> I. Mackie, </author> <title> Lilac a functional programming language based on linear logic. </title> <type> Master's Thesis, </type> <institution> Imperial College, </institution> <address> London, </address> <year> 1991. </year>
Reference: <author> A. Scedrov, </author> <title> A brief guide to linear logic. </title> <journal> EATCS Bulletin 41 (1990), </journal> <pages> 154-165. </pages>
Reference: <author> P. J. Scott. </author> <type> Personal Correspondence, </type> <year> 1993, 1994. </year> <month> 54 </month>
References-found: 9

