URL: http://www.cs.cmu.edu/afs/cs/project/rtmach/public/papers/rtoss94.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/raj/www/recent-papers.html
Root-URL: 
Title: Temporal Protection in Real-Time Operating Systems  
Author: Cliff Mercer Ragunathan Rajkumar and Jim Zelenka 
Address: Pittsburgh, PA 15213  
Affiliation: 1 Department of Computer Science 2 Software Engineering Institute Carnegie Mellon University  
Abstract: Real-time systems manipulate data types with inherent timing constraints. Priority-based scheduling is a popular approach to build hard real-time systems, when the timing requirements, supported run-time configurations, and task sets are known a priori. Future real-time systems would need to support these hard real-time constraints but in addition (a) provide friendly user-interfaces with audio and video data types (b) be able to communicate with more global networks and systems on demand, and (c) support critical command and control services despite potential risks introduced by such added flexibility and dynamics. In this paper, we argue that temporal protection mechanisms can be as beneficial in these systems as virtual memory protection. The processor reservation mechanism that we have implemented in Real-Time Mach, for example, provides guaranteed timing behavior for critical activities. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Agrawal, G., Chen, B., Zhao, W., Davari, S. </author> <title> "Guaranteeing Synchronous Message Deadlines in High Speed Token Ring Networks with Timed Token Protocol". </title> <booktitle> Proceedings of IEEE International Conference on Distributed Computing Systems (1992). </booktitle>
Reference-contexts: Resources shared by processes can be either physical or logical. Physical resources shared across processes include the CPU, buses, networks, memory pages, memory heap, I/O interfaces etc. Logical resources can include servers, shared queues, communication buffers etc. Scheduling theory for processors [9], buses [16] and networks <ref> [1] </ref> provides the means to determine whether a set of tasks using a physical resource can meet its timing requirements. Similarly, synchronization protocols [15, 4] provide the ability to analyze the needs of real-time tasks to share logical resources.
Reference: 2. <author> T. E. Anderson, B. N. Bershad, E. D. Lazowska and H. M. Levy. </author> <title> "Scheduler Activations: Effective Kernel Support for the User-Level Management of Parallelism". </title> <journal> ACM Transactions on Computer Systems 10, </journal> <month> 1 (Feb </month> <year> 1992), </year> <pages> 53-79. </pages>
Reference-contexts: Other Applications of Processor Reservation The temporal protection offered by processor reservation can be exploited to achieve other goals as well. Processor reservation provides a way of allocating processor time to the user-level schedulers enabled by scheduler activation types of interfaces <ref> [2] </ref>. A scheduling policy which allocates a percentage of the processor to various user-level scheduling domains alleviates the need for global scheduling decisions in such systems.
Reference: 3. <author> M. J. Bach. </author> <title> The Design of the UNIX Operating System. </title> <publisher> Prentice-Hall, </publisher> <year> 1986. </year>
Reference-contexts: Temporal Protection for Real-Time Programs Many real-time operating systems support a multitasking environment due to its inherent modularity, ease of program development and debugging, and programming (as well as conceptual) compatibility with traditional operating systems such as Unix <ref> [3] </ref>. The timing behavior of a real-time process in these multitasking environments depends upon its own behavior and its level of resource-sharing with other processes. Resources shared by processes can be either physical or logical.
Reference: 4. <author> Baker, T. </author> <title> "Stack-Based Scheduling of Realtime Processes". </title> <journal> Journal of Real-Time Systems 3, </journal> <month> 1 (March </month> <year> 1991), </year> <month> 67--100. </month>
Reference-contexts: Logical resources can include servers, shared queues, communication buffers etc. Scheduling theory for processors [9], buses [16] and networks [1] provides the means to determine whether a set of tasks using a physical resource can meet its timing requirements. Similarly, synchronization protocols <ref> [15, 4] </ref> provide the ability to analyze the needs of real-time tasks to share logical resources. However, these analytical techniques must necessarily make assumptions such as the worst-case execution time of a task, the maximum duration of a critical section, or the maximum bus transaction time.
Reference: 5. <author> Burns, A. </author> <title> "Scheduling Hard Real-Time Systems: A Review". </title> <journal> Software Engineering Journal (May 1991), </journal> <pages> 116-128. </pages>
Reference-contexts: 1. Introduction In real-time systems, the correctness of a computation depends upon both its logical and temporal correctness. As a result, earlier real-time systems were often hand-crafted in order to meet stringent timing constraints. Recently, more flexible priority-based scheduling approaches have become popular <ref> [5, 8, 15] </ref>. However, the design of such systems still requires a priori knowledge of tasks and their timing requirements, and therefore these systems tend to be very static in nature.
Reference: 6. <author> K. Jeffay, D. L. Stone and F. D. Smith. </author> <title> "Kernel Support for Live Digital Audio and Video". </title> <booktitle> Computer Communications (UK) 15, 6 (July-August 1992), </booktitle> <pages> 388-395. </pages>
Reference-contexts: Protection Mechanisms for Real-Time Programs Early on, real-time systems were often built without virtual memory protection because the stochastic nature, long delays and potential overhead introduced by demand paging were considered incompatible with real-time requirements. However, processors and memory have become faster, and real-time operating systems <ref> [6, 14, 18, 19] </ref> have become more sophisticated. Many modern real-time operating systems (such as Real-Time Mach [19], LynxOS, etc.) allow virtual memory pages to be "locked" into physical memory. Any associated overhead is now considered to be worth the address space protection enforced across process boundaries.
Reference: 7. <author> Leffler, S. J., McKusick, M. K., Karels, M. J. and Quarterman, J. S. </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: We refer to such protection as spatial protection. Traditional non-real-time operating systems also provide a simple notion of temporal protection because of the fact that fairness is a primary motivation. The scheduler in timesharing systems <ref> [7] </ref> typically uses a multi-level feedback queueing mechanism such that a process executing for a long time typically has its priority lowered in order to let other waiting processes execute.
Reference: 8. <author> Lehoczky, J. P. </author> <title> "Fixed Priority Scheduling of Periodic Task Sets with Arbitrary Deadlines". </title> <booktitle> IEEE Real-Time Systems Symposium (Dec. </booktitle> <year> 1990). </year>
Reference-contexts: 1. Introduction In real-time systems, the correctness of a computation depends upon both its logical and temporal correctness. As a result, earlier real-time systems were often hand-crafted in order to meet stringent timing constraints. Recently, more flexible priority-based scheduling approaches have become popular <ref> [5, 8, 15] </ref>. However, the design of such systems still requires a priori knowledge of tasks and their timing requirements, and therefore these systems tend to be very static in nature.
Reference: 9. <author> Liu, C. L. and Layland J. W. </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real Time Environment". </title> <journal> JACM 20 (1) (1973), </journal> <volume> 46 - 61. </volume> <pages> 6 </pages>
Reference-contexts: In real-time systems, where timeliness of critical activities (and not fairness) is the primary motivation, the issue of temporal protection needs to be substantially re-considered. For example, consider fixed priority scheduling approaches such as rate-monotonic scheduling <ref> [9, 17] </ref> to build real-time systems. Under a fixed priority scheduler, a process which enters an infinite loop will keep preempting all its lower priority tasks, which can then never run again. The only recourse is often to reboot the machine. <p> Resources shared by processes can be either physical or logical. Physical resources shared across processes include the CPU, buses, networks, memory pages, memory heap, I/O interfaces etc. Logical resources can include servers, shared queues, communication buffers etc. Scheduling theory for processors <ref> [9] </ref>, buses [16] and networks [1] provides the means to determine whether a set of tasks using a physical resource can meet its timing requirements. Similarly, synchronization protocols [15, 4] provide the ability to analyze the needs of real-time tasks to share logical resources.
Reference: 10. <author> C. W. Mercer and S. Savage and H. Tokuda. </author> <title> Processor Capacity Reserves for Multimedia Operating Systems. </title> <type> Tech. </type> <institution> Rept. CMU-CS-93-157, School of Computer Science, Carnegie Mellon University, </institution> <month> May, </month> <year> 1993. </year>
Reference-contexts: Guaranteed Processor Reservation for Real-Time Programs Processor and memory sharing are two critical pieces which can substantially affect (and dominate) the timing behavior of a real-time program. We have been investigating an operating system abstraction called processor reserve <ref> [10, 11] </ref> to provide temporal protection to a real-time process at the level of CPU sharing. In this abstraction, we view processor capacity as a quantifiable resource which can be reserved like physical memory or disk blocks.
Reference: 11. <author> C. W. Mercer and S. Savage and H. Tokuda. </author> <title> Processor Capacity Reserves: An Abstraction for Managing Processor Usage. </title> <booktitle> Proceedings of the Fourth Workshop on Workstation Operating Systems (WWOS-IV), </booktitle> <month> Oct, </month> <year> 1993. </year>
Reference-contexts: Guaranteed Processor Reservation for Real-Time Programs Processor and memory sharing are two critical pieces which can substantially affect (and dominate) the timing behavior of a real-time program. We have been investigating an operating system abstraction called processor reserve <ref> [10, 11] </ref> to provide temporal protection to a real-time process at the level of CPU sharing. In this abstraction, we view processor capacity as a quantifiable resource which can be reserved like physical memory or disk blocks.
Reference: 12. <author> C. W. Mercer, J. Zelenka and R. Rajkumar. </author> <title> "Resource Reserves for Operating System Protocol Processing". </title> <note> Submitted for publication (January 1994). </note>
Reference-contexts: Then messages containing requests for remote service will contain these "sub-reserves" which can be used to "charge" the remote service. Another aspect of reservation in distributed systems concerns the reservation of communications protocol processing on each of the hosts <ref> [12] </ref>. 3.0.4. Other Applications of Processor Reservation The temporal protection offered by processor reservation can be exploited to achieve other goals as well. Processor reservation provides a way of allocating processor time to the user-level schedulers enabled by scheduler activation types of interfaces [2].
Reference: 13. <author> S. E. Minzer. </author> <title> "Broadband ISDN and Asynchronous Transfer Mode (ATM)". </title> <journal> IEEE Communications Magazine 27, </journal> <month> 9 (Sep </month> <year> 1989), </year> <pages> 17-24. </pages>
Reference-contexts: Secondly, the continuing growth of computing power at ever falling prices enables more and more applications, with multitasking becoming a natural candidate to use up available cycles. The advent of high-performance networks such as ATM <ref> [13] </ref> opens up new applications with high bandwidth, low latency, and guaranteed service requirements. These applications include tele-medicine, distance learning, advanced air traffic control, sophisticated defense systems and networked patient monitoring. In these applications, any overload conditions because of dynamic requests and/or connections must not disrupt their basic mission.
Reference: 14. <institution> IEEE Standard P1003.4 (Real-time extensions to POSIX). IEEE, </institution> <address> 345 East 47th St., New York, NY 10017, </address> <year> 1991. </year>
Reference-contexts: Protection Mechanisms for Real-Time Programs Early on, real-time systems were often built without virtual memory protection because the stochastic nature, long delays and potential overhead introduced by demand paging were considered incompatible with real-time requirements. However, processors and memory have become faster, and real-time operating systems <ref> [6, 14, 18, 19] </ref> have become more sophisticated. Many modern real-time operating systems (such as Real-Time Mach [19], LynxOS, etc.) allow virtual memory pages to be "locked" into physical memory. Any associated overhead is now considered to be worth the address space protection enforced across process boundaries.
Reference: 15. <author> Sha, L., Rajkumar, R. and Lehoczky, J. P. </author> <title> "Priority Inheritance Protocols: An Approach to Real-Time Synchronization". </title> <journal> IEEE Transactions on Computers (September 1990), </journal> <pages> 1175-1185. </pages>
Reference-contexts: 1. Introduction In real-time systems, the correctness of a computation depends upon both its logical and temporal correctness. As a result, earlier real-time systems were often hand-crafted in order to meet stringent timing constraints. Recently, more flexible priority-based scheduling approaches have become popular <ref> [5, 8, 15] </ref>. However, the design of such systems still requires a priori knowledge of tasks and their timing requirements, and therefore these systems tend to be very static in nature. <p> Logical resources can include servers, shared queues, communication buffers etc. Scheduling theory for processors [9], buses [16] and networks [1] provides the means to determine whether a set of tasks using a physical resource can meet its timing requirements. Similarly, synchronization protocols <ref> [15, 4] </ref> provide the ability to analyze the needs of real-time tasks to share logical resources. However, these analytical techniques must necessarily make assumptions such as the worst-case execution time of a task, the maximum duration of a critical section, or the maximum bus transaction time.
Reference: 16. <author> Sha, L., Rajkumar, R. and Lehoczky, J. P. </author> <title> "Real-Time Scheduling Support in Futurebus+". </title> <booktitle> IEEE Real-Time Systems Symposium (Dec. </booktitle> <year> 1990). </year>
Reference-contexts: Resources shared by processes can be either physical or logical. Physical resources shared across processes include the CPU, buses, networks, memory pages, memory heap, I/O interfaces etc. Logical resources can include servers, shared queues, communication buffers etc. Scheduling theory for processors [9], buses <ref> [16] </ref> and networks [1] provides the means to determine whether a set of tasks using a physical resource can meet its timing requirements. Similarly, synchronization protocols [15, 4] provide the ability to analyze the needs of real-time tasks to share logical resources.
Reference: 17. <author> Sha, L., Rajkumar, R. and Sathaye, S. </author> <title> "Generalized Rate-Monotonic Scheduling Theory: A Framework for Developing Real-Time Systems". </title> <note> IEEE Proceedings Journal (January 1994). </note>
Reference-contexts: In real-time systems, where timeliness of critical activities (and not fairness) is the primary motivation, the issue of temporal protection needs to be substantially re-considered. For example, consider fixed priority scheduling approaches such as rate-monotonic scheduling <ref> [9, 17] </ref> to build real-time systems. Under a fixed priority scheduler, a process which enters an infinite loop will keep preempting all its lower priority tasks, which can then never run again. The only recourse is often to reboot the machine.
Reference: 18. <author> Stankovic, J. A. and Ramamritham, K. </author> <title> The Design of the Spring Kernel. </title> <booktitle> Proceedings of the Real-Time Systems Symposium, </booktitle> <month> Dec, </month> <year> 1987. </year>
Reference-contexts: Protection Mechanisms for Real-Time Programs Early on, real-time systems were often built without virtual memory protection because the stochastic nature, long delays and potential overhead introduced by demand paging were considered incompatible with real-time requirements. However, processors and memory have become faster, and real-time operating systems <ref> [6, 14, 18, 19] </ref> have become more sophisticated. Many modern real-time operating systems (such as Real-Time Mach [19], LynxOS, etc.) allow virtual memory pages to be "locked" into physical memory. Any associated overhead is now considered to be worth the address space protection enforced across process boundaries.
Reference: 19. <author> H. Tokuda and T. Nakajima and P. Rao. </author> <title> Real-Time Mach: Towards a Predictable Real-Time System. </title> <booktitle> Proceedings of USENIX Mach Workshop, </booktitle> <month> Oct, </month> <year> 1990. </year>
Reference-contexts: Protection Mechanisms for Real-Time Programs Early on, real-time systems were often built without virtual memory protection because the stochastic nature, long delays and potential overhead introduced by demand paging were considered incompatible with real-time requirements. However, processors and memory have become faster, and real-time operating systems <ref> [6, 14, 18, 19] </ref> have become more sophisticated. Many modern real-time operating systems (such as Real-Time Mach [19], LynxOS, etc.) allow virtual memory pages to be "locked" into physical memory. Any associated overhead is now considered to be worth the address space protection enforced across process boundaries. <p> However, processors and memory have become faster, and real-time operating systems [6, 14, 18, 19] have become more sophisticated. Many modern real-time operating systems (such as Real-Time Mach <ref> [19] </ref>, LynxOS, etc.) allow virtual memory pages to be "locked" into physical memory. Any associated overhead is now considered to be worth the address space protection enforced across process boundaries. <p> Together, reservation and the enforcement mechanism provide a scheduling firewall which protects reserved programs from outside interference in much the same way as memory protection isolates a program address space from access by other programs. Our processor reservation scheme has been implemented in Real-Time Mach <ref> [19] </ref>. Real-Time Mach supports a priority-driven paradigm to schedule real-time tasks 1 . The reservation scheme includes an admission control policy to prevent overload and a mechanism to accurately measure computation time consumed by programs.
Reference: 20. <author> H. Tokuda and T. Kitayama. </author> <title> Dynamic QOS Control Based on Real-Time Threads. </title> <type> ART Project Technical Memo, </type> <institution> School of Computer Science, Carnegie Mellon University. i Table of Contents </institution>
Reference-contexts: Experimentation with Processor Reservation We now describe an application built on our reservation scheme. The application consists of a number of instantiations of a QuickTime video player <ref> [20] </ref>, each of which displays a video stream on the screen. Each program reads a short video clip and then begins to output frames to the screen using a memory-mapped frame buffer. The video resolution is 160x120 with 8 bits of color.
Reference: 1. <institution> Introduction 1 </institution>
Reference-contexts: Resources shared by processes can be either physical or logical. Physical resources shared across processes include the CPU, buses, networks, memory pages, memory heap, I/O interfaces etc. Logical resources can include servers, shared queues, communication buffers etc. Scheduling theory for processors [9], buses [16] and networks <ref> [1] </ref> provides the means to determine whether a set of tasks using a physical resource can meet its timing requirements. Similarly, synchronization protocols [15, 4] provide the ability to analyze the needs of real-time tasks to share logical resources.
Reference: 2. <institution> Protection Mechanisms for Real-Time Programs 2 2.1. Temporal Protection for Real-Time Programs 3 </institution>
Reference-contexts: Other Applications of Processor Reservation The temporal protection offered by processor reservation can be exploited to achieve other goals as well. Processor reservation provides a way of allocating processor time to the user-level schedulers enabled by scheduler activation types of interfaces <ref> [2] </ref>. A scheduling policy which allocates a percentage of the processor to various user-level scheduling domains alleviates the need for global scheduling decisions in such systems.
Reference: 3. <editor> Guaranteed Processor Reservation for Real-Time Programs 3 3.0.1. </editor> <title> Experimentation with Processor Reservation 4 3.0.2. Processor Reservation Manager 4 3.0.3. </title> <booktitle> Processor Reservation in Distributed Systems 4 3.0.4. Other Applications of Processor Reservation 4 </booktitle>
Reference-contexts: Temporal Protection for Real-Time Programs Many real-time operating systems support a multitasking environment due to its inherent modularity, ease of program development and debugging, and programming (as well as conceptual) compatibility with traditional operating systems such as Unix <ref> [3] </ref>. The timing behavior of a real-time process in these multitasking environments depends upon its own behavior and its level of resource-sharing with other processes. Resources shared by processes can be either physical or logical.
Reference: 4. <institution> Conclusion 5 References 5 </institution>
Reference-contexts: Logical resources can include servers, shared queues, communication buffers etc. Scheduling theory for processors [9], buses [16] and networks [1] provides the means to determine whether a set of tasks using a physical resource can meet its timing requirements. Similarly, synchronization protocols <ref> [15, 4] </ref> provide the ability to analyze the needs of real-time tasks to share logical resources. However, these analytical techniques must necessarily make assumptions such as the worst-case execution time of a task, the maximum duration of a critical section, or the maximum bus transaction time.
References-found: 24

