URL: ftp://ftp.cs.vu.nl/pub/papers/theory/IR-218.ps.Z
Refering-URL: http://www.cs.vu.nl/vakgroepen/ti/ftpindex.html
Root-URL: 
Email: email: franck@cs.vu.nl  
Title: Semantic Models for a Language with Timed Atomic Actions  
Author: Franck van Breugel 
Address: 1081 HV Amsterdam  
Affiliation: Department of Mathematics and Computer Science Vrije Universiteit De Boelelaan 1081a  
Abstract: An operational and a denotational semantic model for a language incorporating time related aspects, viz. timed atomic actions and integration, is presented. With timed atomic actions we mean atomic actions each provided with a time stamp, which records the time at which the atomic action should be executed. Integration of a statement over some non-empty subset of the time domain gives rise to the execution of the statement with some non-deterministically chosen value of this subset passed to that statement. Both models are built on complete metric spaces. An equivalence result of the operational and the denotational semantic model concludes this paper. 
Abstract-found: 1
Intro-found: 1
Reference: [A81] <author> K.R. Apt. </author> <title> Recursive Assertions and Parallel Programs. </title> <journal> Acta Informatica 15 (1981), </journal> <pages> 219-232. </pages>
Reference-contexts: Failure is modelled by a special symbol ffi with ffi 62 Atom. We introduce two new statements linked to these notions of termination. The empty statement E is associated with successful termination as introduced by Apt in <ref> [A81] </ref> and the failure statement is associated with failure. and E have a different nature as will become clear in the equivalences given below and in the equivalence proof presented in section 5. The set of statements Stat is extended to Stat E .
Reference: [AB88] <author> P. America and J.W. de Bakker. </author> <title> Designing equivalent semantic models for process creation. </title> <booktitle> in: Proceedings Advanced School on Mathematical models for the Semantic Parallelism (M. </booktitle> <editor> Venturini Zilli, ed.), </editor> <booktitle> Lecture Notes in Computer Science 280, Springer (1988), </booktitle> <pages> 109-176. </pages>
Reference-contexts: 1 Introduction In this paper the question whether programming notions expressing time related behaviour can be described by models built on structures from metric topology in the style of De Bakker et al. is studied. In this style, programming notions related to concurrency [BZ82, BBKM84, BKMOZ86, KR88], object-oriented programming <ref> [ABKR86, AB88] </ref> and logic programming [B88, BK88] have already been described. An operational and a denotational semantic model for a simple language incorporating time related aspects is given. Also an equivalence result for these two semantic models is presented.
Reference: [ABKR86] <author> P. America, J.W. de Bakker, J.N. Kok and J.J.M.M. Rutten. </author> <title> Denotational semantics for a parallel object-oriented language. </title> <booktitle> Information and Computation 83 (1989), </booktitle> <pages> 152-205. </pages>
Reference-contexts: 1 Introduction In this paper the question whether programming notions expressing time related behaviour can be described by models built on structures from metric topology in the style of De Bakker et al. is studied. In this style, programming notions related to concurrency [BZ82, BBKM84, BKMOZ86, KR88], object-oriented programming <ref> [ABKR86, AB88] </ref> and logic programming [B88, BK88] have already been described. An operational and a denotational semantic model for a simple language incorporating time related aspects is given. Also an equivalence result for these two semantic models is presented.
Reference: [B88] <author> J.W. de Bakker. </author> <title> Comparative semantics for flow of control in logic programming without logic. </title> <type> Report CS-8840, </type> <institution> Centre for Mathematics and Computer Science, </institution> <address> Amsterdam (1988). </address> <note> To appear in Information and Computation. 24 </note>
Reference-contexts: In this style, programming notions related to concurrency [BZ82, BBKM84, BKMOZ86, KR88], object-oriented programming [ABKR86, AB88] and logic programming <ref> [B88, BK88] </ref> have already been described. An operational and a denotational semantic model for a simple language incorporating time related aspects is given. Also an equivalence result for these two semantic models is presented.
Reference: [BB89] <author> J.C.M. Baeten and J.A. Bergstra. </author> <title> Real Time Process Algebra. </title> <type> Report P8916, </type> <institution> Pro--gramming Research Group, University of Amsterdam (1989). </institution>
Reference-contexts: The operational model is based on Plotkin's transition systems as introduced by Hennessy and Plotkin in [HP79]. This operational semantic model is a modified version of the model presented by Baeten and Bergstra in <ref> [BB89] </ref>. The denotational model is defined compositionally using fixed points to deal with recursion. Such fixed points exist on the basis of Banach's theorem for contracting functions on complete metric spaces [KR88, BM88]. Most definitions and lemmas in this paper rely on this theorem. <p> This operational semantic model is a modified version of the model defined by Baeten and Bergstra in <ref> [BB89] </ref>. The operational semantics of a program describes the behaviour of an abstract machine running that program. The execution of a program on an abstract machine is characterised by strings of actions.
Reference: [BBKM84] <author> J.W. de Bakker, J.A. Bergstra, J.W. Klop and J.-J.Ch. Meyer. </author> <title> Linear time and branching time semantics for recursion with merge. </title> <booktitle> Theoretical Computer Science 34 (1984), </booktitle> <pages> 135-156. </pages>
Reference-contexts: 1 Introduction In this paper the question whether programming notions expressing time related behaviour can be described by models built on structures from metric topology in the style of De Bakker et al. is studied. In this style, programming notions related to concurrency <ref> [BZ82, BBKM84, BKMOZ86, KR88] </ref>, object-oriented programming [ABKR86, AB88] and logic programming [B88, BK88] have already been described. An operational and a denotational semantic model for a simple language incorporating time related aspects is given. Also an equivalence result for these two semantic models is presented.
Reference: [BC85] <author> G. Berry and L. Cosserat. </author> <title> The ESTEREL Synchronous Programming Language and its Semantics. </title> <booktitle> in: Proceedings CMU Seminar on Concurrency (S.D. </booktitle> <editor> Brookes, A.W. Roscoe and G. Winksel, eds.), </editor> <booktitle> Lecture Notes in Computer Science 197, Springer (1985), </booktitle> <pages> 389-448. </pages>
Reference-contexts: We assume that the execution of timed atomic actions and operators takes no time. We also assume that two successive atomic actions cannot be executed at the same time. These assumptions are very useful as is argued in a paper by Berry and Cosserat <ref> [BC85] </ref>. The operational model is based on Plotkin's transition systems as introduced by Hennessy and Plotkin in [HP79]. This operational semantic model is a modified version of the model presented by Baeten and Bergstra in [BB89]. The denotational model is defined compositionally using fixed points to deal with recursion. <p> We assume that the execution of atomic actions and operators takes no time. We further assume that two successive atomic actions cannot be executed at the same time. These assumptions are very useful as is argued in a paper by Berry and Cosserat <ref> [BC85] </ref>. Next we introduce the class of guarded statements, which will be used to administrate procedure bodies.
Reference: [BK82] <author> J.A. Bergstra and J.W. Klop. </author> <title> Fixed Point Semantics in Process Algebra. Report IW 206/82, </title> <publisher> Mathematical Centre, </publisher> <address> Amsterdam (1982). </address>
Reference-contexts: End 4.9 The semantic counterpart of the syntactic operator k is first defined on timed streams. This is done by defining a so-called left-merge bb, as introduced by Bergstra and Klop in <ref> [BK82] </ref>, which expresses a merge where the first element is taken from the left argument. Then we extend this definition to non-empty closed sets of timed streams.
Reference: [BK88] <author> J.W. de Bakker and J.N. Kok. </author> <title> Uniform abstraction, atomicity and contractions in the comparative semantics of Concurrent Prolog. </title> <booktitle> in: Proceedings International Conference on Fifth Generation Computer Systems 1988, Institute for New Generation Computer Technology (1988), </booktitle> <pages> 347-355. </pages>
Reference-contexts: In this style, programming notions related to concurrency [BZ82, BBKM84, BKMOZ86, KR88], object-oriented programming [ABKR86, AB88] and logic programming <ref> [B88, BK88] </ref> have already been described. An operational and a denotational semantic model for a simple language incorporating time related aspects is given. Also an equivalence result for these two semantic models is presented.
Reference: [BM88] <author> J.W. de Bakker and J.-J.Ch. Meyer. </author> <title> Metric semantics for concurrency. </title> <booktitle> BIT 28 (1988), </booktitle> <pages> 504-529. </pages>
Reference-contexts: This operational semantic model is a modified version of the model presented by Baeten and Bergstra in [BB89]. The denotational model is defined compositionally using fixed points to deal with recursion. Such fixed points exist on the basis of Banach's theorem for contracting functions on complete metric spaces <ref> [KR88, BM88] </ref>. Most definitions and lemmas in this paper rely on this theorem. Related work can be found in [RR86, RR87, R88] of Reed and Roscoe and [LZ88] of Lee and Zwarico.
Reference: [BMO87] <editor> J.W. de Bakker, J.-J.Ch. Meyer and E.-R. Olderog. </editor> <title> Infinite streams and finite observations in the semantics of uniform concurrency. </title> <booktitle> Theoretical Computer Science 49 (1987), </booktitle> <pages> 87-112. </pages>
Reference-contexts: We expect it to be possible to relate the denotational semantics defined in [RR86, RR87, R88] to a denotational semantics based on the denotational model presented in this paper following the lines of <ref> [BMO87] </ref>. Finding other criteria to restrict time sets and enriching the language with communication and global non-determinism are still issues for further research. Acknowledgements We would like to thank the members of the Amsterdam Concurrency Group for comments on a previous version of this paper.
Reference: [BKMOZ86] <author> J.W. de Bakker, J.N. Kok, J.-J.Ch. Meyer, E.-R. Olderog and I.J. Zucker. </author> <title> Contrasting themes in the semantics of imperative concurrency. in: Current Trends in Concurrency: </title> <editor> Overviews and Tutorials (J.W. de Bakker, W.P. de Roever and G. Rozenberg, eds.), </editor> <booktitle> Lecture Notes in Computer Science 224, Springer (1986), </booktitle> <pages> 51-121. </pages>
Reference-contexts: 1 Introduction In this paper the question whether programming notions expressing time related behaviour can be described by models built on structures from metric topology in the style of De Bakker et al. is studied. In this style, programming notions related to concurrency <ref> [BZ82, BBKM84, BKMOZ86, KR88] </ref>, object-oriented programming [ABKR86, AB88] and logic programming [B88, BK88] have already been described. An operational and a denotational semantic model for a simple language incorporating time related aspects is given. Also an equivalence result for these two semantic models is presented.
Reference: [BZ82] <author> J.W. de Bakker and J.I. Zucker. </author> <title> Processes and the denotational semantics of con-currency. </title> <booktitle> Information and Control 54 (1982), </booktitle> <pages> 70-120. </pages>
Reference-contexts: 1 Introduction In this paper the question whether programming notions expressing time related behaviour can be described by models built on structures from metric topology in the style of De Bakker et al. is studied. In this style, programming notions related to concurrency <ref> [BZ82, BBKM84, BKMOZ86, KR88] </ref>, object-oriented programming [ABKR86, AB88] and logic programming [B88, BK88] have already been described. An operational and a denotational semantic model for a simple language incorporating time related aspects is given. Also an equivalence result for these two semantic models is presented.
Reference: [DS89] <author> J.W. Davies and S.A. Schneider. </author> <title> An introduction to timed CSP. </title> <type> Report PRG-75, </type> <institution> Oxford University Computing Laboratory, </institution> <address> Oxford (1989). </address>
Reference-contexts: Related work can be found in [RR86, RR87, R88] of Reed and Roscoe and [LZ88] of Lee and Zwarico. In [RR86, RR87, R88] denotational semantic models based on metric spaces are presented for the language TCSP, as described by Davies and Schneider in <ref> [DS89] </ref>. All models incorporate timed traces. A timed trace is a finite trace of timed events which records the history of the execution of the program.
Reference: [E89] <author> R. Engelking. </author> <title> General Topology. Revised and completed version. Sigma Series in Pure Mathematics 6, </title> <publisher> Heldermann Verlag Berlin (1989). </publisher>
Reference: [GV89] <author> J.F. Groote and F.W. Vaandrager. </author> <title> Structured Operational Semantics and Bisim-ulation as a Congruence. </title> <booktitle> in: Proceedings 16th International Colloquium on Automata, Languages and Programming (G. </booktitle> <editor> Ausiello, M. Dezani-Ciancaglini and S. Ronchi Della Rocca, eds.), </editor> <booktitle> Lecture Notes in Computer Science 372, Springer (1989), </booktitle> <pages> 423-438. </pages>
Reference: [HP79] <author> M. Hennessy and G.D. Plotkin. </author> <title> Full abstraction for a simple parallel programming language. </title> <booktitle> in: Proceedings 8th Mathematical Foundations of Computer Science (J. </booktitle> <editor> Becvar, ed.), </editor> <booktitle> Lecture Notes in Computer Science 74, Springer (1979), </booktitle> <pages> 108-120. </pages>
Reference-contexts: We also assume that two successive atomic actions cannot be executed at the same time. These assumptions are very useful as is argued in a paper by Berry and Cosserat [BC85]. The operational model is based on Plotkin's transition systems as introduced by Hennessy and Plotkin in <ref> [HP79] </ref>. This operational semantic model is a modified version of the model presented by Baeten and Bergstra in [BB89]. The denotational model is defined compositionally using fixed points to deal with recursion.
Reference: [KR88] <author> J.N. Kok and J.J.M.M. Rutten. </author> <title> Contractions in Comparing Semantics. </title> <booktitle> in: Proceedings 15th International Colloquium on Automata, Languages and Programming (T. </booktitle> <editor> Lepisto, A. Salomaa, eds.), </editor> <booktitle> Lecture Notes in Computer Science 317, Springer (1988), </booktitle> <pages> 317-332. 25 </pages>
Reference-contexts: 1 Introduction In this paper the question whether programming notions expressing time related behaviour can be described by models built on structures from metric topology in the style of De Bakker et al. is studied. In this style, programming notions related to concurrency <ref> [BZ82, BBKM84, BKMOZ86, KR88] </ref>, object-oriented programming [ABKR86, AB88] and logic programming [B88, BK88] have already been described. An operational and a denotational semantic model for a simple language incorporating time related aspects is given. Also an equivalence result for these two semantic models is presented. <p> This operational semantic model is a modified version of the model presented by Baeten and Bergstra in [BB89]. The denotational model is defined compositionally using fixed points to deal with recursion. Such fixed points exist on the basis of Banach's theorem for contracting functions on complete metric spaces <ref> [KR88, BM88] </ref>. Most definitions and lemmas in this paper rely on this theorem. Related work can be found in [RR86, RR87, R88] of Reed and Roscoe and [LZ88] of Lee and Zwarico.
Reference: [LZ88] <author> I. Lee and A. Zwarico. </author> <title> Times Acceptances: A Model of Time Dependent Processes. in: Proceedings Formal Techniques in Real-Time and Fault-Tolerant Systems (M. </title> <editor> Joseph, ed.), </editor> <booktitle> Lecture Notes in Computer Science 331, Springer (1988), </booktitle> <pages> 128-130. </pages>
Reference-contexts: Such fixed points exist on the basis of Banach's theorem for contracting functions on complete metric spaces [KR88, BM88]. Most definitions and lemmas in this paper rely on this theorem. Related work can be found in [RR86, RR87, R88] of Reed and Roscoe and <ref> [LZ88] </ref> of Lee and Zwarico. In [RR86, RR87, R88] denotational semantic models based on metric spaces are presented for the language TCSP, as described by Davies and Schneider in [DS89]. All models incorporate timed traces. <p> This system delay constant is also used to introduce some guardedness with respect to procedure bodies. Although the language TCSP differs from the language studied in this paper, the denotational semantic models for TCSP show some resemblance to our denota-tional model. In <ref> [LZ88] </ref>, Lee and Zwarico present a model which is also based on timed traces. They use a temporal extension of acceptance trees to model the execution of a program In the second section of this paper the language definition is given.
Reference: [R88] <author> G.M. Reed. </author> <title> A Uniform Mathematical Theory of Real-time Distributed Computing. </title> <type> Ph.D. thesis, </type> <institution> Oxford University (1988). </institution>
Reference-contexts: The denotational model is defined compositionally using fixed points to deal with recursion. Such fixed points exist on the basis of Banach's theorem for contracting functions on complete metric spaces [KR88, BM88]. Most definitions and lemmas in this paper rely on this theorem. Related work can be found in <ref> [RR86, RR87, R88] </ref> of Reed and Roscoe and [LZ88] of Lee and Zwarico. In [RR86, RR87, R88] denotational semantic models based on metric spaces are presented for the language TCSP, as described by Davies and Schneider in [DS89]. All models incorporate timed traces. <p> Most definitions and lemmas in this paper rely on this theorem. Related work can be found in <ref> [RR86, RR87, R88] </ref> of Reed and Roscoe and [LZ88] of Lee and Zwarico. In [RR86, RR87, R88] denotational semantic models based on metric spaces are presented for the language TCSP, as described by Davies and Schneider in [DS89]. All models incorporate timed traces. A timed trace is a finite trace of timed events which records the history of the execution of the program. <p> End 2.4 All procedure bodies g i in a declaration d are restricted to guarded statements. This requirement corresponds to the usual Greibach condition in formal language theory. There are possibilities to eliminate this restriction as is illustrated in [RR86, RR87] and <ref> [R88] </ref> by Reed and Roscoe. However, in order to permit unguarded statements in declarations, we expect that we have to determine some fixed delay constant for some operators. <p> It seems possible to give another denotational model D leading to the equivalence result O = D. We expect it to be possible to relate the denotational semantics defined in <ref> [RR86, RR87, R88] </ref> to a denotational semantics based on the denotational model presented in this paper following the lines of [BMO87]. Finding other criteria to restrict time sets and enriching the language with communication and global non-determinism are still issues for further research.
Reference: [RR86] <author> G.M. Reed and A.W. Roscoe. </author> <title> A Timed Model for Communicating Sequential Processes. </title> <booktitle> in: Proceedings 13th International Colloquium on Automata, Languages and Programming (L. </booktitle> <editor> Kott, ed.), </editor> <booktitle> Lecture Notes in Computer Science 226, Springer (1986), </booktitle> <pages> 314-323. </pages> <booktitle> Theoretical Computer Science 58 (1988), </booktitle> <pages> 249-261. </pages>
Reference-contexts: The denotational model is defined compositionally using fixed points to deal with recursion. Such fixed points exist on the basis of Banach's theorem for contracting functions on complete metric spaces [KR88, BM88]. Most definitions and lemmas in this paper rely on this theorem. Related work can be found in <ref> [RR86, RR87, R88] </ref> of Reed and Roscoe and [LZ88] of Lee and Zwarico. In [RR86, RR87, R88] denotational semantic models based on metric spaces are presented for the language TCSP, as described by Davies and Schneider in [DS89]. All models incorporate timed traces. <p> Most definitions and lemmas in this paper rely on this theorem. Related work can be found in <ref> [RR86, RR87, R88] </ref> of Reed and Roscoe and [LZ88] of Lee and Zwarico. In [RR86, RR87, R88] denotational semantic models based on metric spaces are presented for the language TCSP, as described by Davies and Schneider in [DS89]. All models incorporate timed traces. A timed trace is a finite trace of timed events which records the history of the execution of the program. <p> End 2.4 All procedure bodies g i in a declaration d are restricted to guarded statements. This requirement corresponds to the usual Greibach condition in formal language theory. There are possibilities to eliminate this restriction as is illustrated in <ref> [RR86, RR87] </ref> and [R88] by Reed and Roscoe. However, in order to permit unguarded statements in declarations, we expect that we have to determine some fixed delay constant for some operators. <p> It seems possible to give another denotational model D leading to the equivalence result O = D. We expect it to be possible to relate the denotational semantics defined in <ref> [RR86, RR87, R88] </ref> to a denotational semantics based on the denotational model presented in this paper following the lines of [BMO87]. Finding other criteria to restrict time sets and enriching the language with communication and global non-determinism are still issues for further research.
Reference: [RR87] <author> G.M. Reed and A.W. Roscoe. </author> <title> Metric spaces as models for real-time concurrency. </title> <booktitle> in: Proceedings Mathematical Foundations of Programming Languages and Semantics (M. </booktitle> <editor> Main, A. Melton, M. Mislove and D. Schmidt, eds.), </editor> <booktitle> Lecture Notes in Computer Science 298, Springer (1987), </booktitle> <pages> 331-343. </pages>
Reference-contexts: The denotational model is defined compositionally using fixed points to deal with recursion. Such fixed points exist on the basis of Banach's theorem for contracting functions on complete metric spaces [KR88, BM88]. Most definitions and lemmas in this paper rely on this theorem. Related work can be found in <ref> [RR86, RR87, R88] </ref> of Reed and Roscoe and [LZ88] of Lee and Zwarico. In [RR86, RR87, R88] denotational semantic models based on metric spaces are presented for the language TCSP, as described by Davies and Schneider in [DS89]. All models incorporate timed traces. <p> Most definitions and lemmas in this paper rely on this theorem. Related work can be found in <ref> [RR86, RR87, R88] </ref> of Reed and Roscoe and [LZ88] of Lee and Zwarico. In [RR86, RR87, R88] denotational semantic models based on metric spaces are presented for the language TCSP, as described by Davies and Schneider in [DS89]. All models incorporate timed traces. A timed trace is a finite trace of timed events which records the history of the execution of the program. <p> End 2.4 All procedure bodies g i in a declaration d are restricted to guarded statements. This requirement corresponds to the usual Greibach condition in formal language theory. There are possibilities to eliminate this restriction as is illustrated in <ref> [RR86, RR87] </ref> and [R88] by Reed and Roscoe. However, in order to permit unguarded statements in declarations, we expect that we have to determine some fixed delay constant for some operators. <p> It seems possible to give another denotational model D leading to the equivalence result O = D. We expect it to be possible to relate the denotational semantics defined in <ref> [RR86, RR87, R88] </ref> to a denotational semantics based on the denotational model presented in this paper following the lines of [BMO87]. Finding other criteria to restrict time sets and enriching the language with communication and global non-determinism are still issues for further research.
References-found: 22

