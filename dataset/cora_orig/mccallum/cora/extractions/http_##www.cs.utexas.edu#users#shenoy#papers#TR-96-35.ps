URL: http://www.cs.utexas.edu/users/shenoy/papers/TR-96-35.ps
Refering-URL: http://www.cs.utexas.edu/users/shenoy/papers.html
Root-URL: 
Email: E-mail: fshenoy,ving@cs.utexas.edu,  
Phone: Phone: (512) 471-9732, Fax: (512) 471-8885  
Title: Efficient Support for Scan Operations in Video Servers  
Author: Prashant J. Shenoy and Harrick M. Vin 
Web: URL: http://www.cs.utexas.edu/users/dmcl  
Address: Taylor Hall 2.124, Austin, Texas 78712-1188  
Affiliation: Distributed Multimedia Computing Laboratory Department of Computer Sciences, University of Texas at Austin  
Abstract: In this paper, we present an algorithm that integrates scalable compression techniques with placement algorithms for disk arrays to efficiently support interactive scan operations (i.e., fast-forward and rewind) in video servers. We demonstrate that by suitably exploiting the characteristics of video streams and human perceptual tolerances, the overhead of such interactive operations can be substantially reduced. We present an analytical model for evaluating the impact of the fast-forward operation on the performance of disk-array-based servers. We validate the model through extensive simulations and analyze our results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Anderson, Y. Osawa, and R. Govindan. </author> <title> A File System for Continuous Media. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 311-337, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to its data rate and real-time performance requirements), several techniques for designing video servers that can meet the real-time playback requirement of video streams have been developed <ref> [1, 9, 15, 17, 19] </ref>.
Reference: [2] <author> E. Chang and A. Zakhor. </author> <title> Scalable Video Placement on Parallel Disk Arrays. </title> <booktitle> In Proceedings of IS&T/SPIE International Symposium on Electronic Imaging: Science and Technology, </booktitle> <address> San Jose, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Thus, depending on the type of media blocks used by the server, a request for a fixed number of frames in each round will require the server to access a fixed number of variable-size blocks or a variable number of fixed-size blocks <ref> [2, 13, 18] </ref>.
Reference: [3] <author> M. S. Chen and D. D. Kandlur. </author> <title> Downloading and Stream Conversion: Supporting Interactive Playout of Videos in a Client Station. </title> <booktitle> In Proceedings of the International Conference On Multimedia Computing and Systems (ICMCS), </booktitle> <address> Washington D.C., </address> <pages> pages 73-80, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Since rewind is similar to fast-forward, all of the above approaches for fast-forward can be easily extended to support rewind. In addition to these server-based approaches, several client-based approaches that do not require any server intervention during rewind have also been proposed <ref> [3, 7] </ref>. These techniques require a client to cache previously displayed frames for rewind. For instance, a scheme in which the client caches all previously displayed frames on a local disk has been recently proposed [3]. <p> These techniques require a client to cache previously displayed frames for rewind. For instance, a scheme in which the client caches all previously displayed frames on a local disk has been recently proposed <ref> [3] </ref>. In this scheme, frames decoded during normal playback are re-encoded such the stream does not contain any inter-frame dependencies, thereby enabling a client to independently decode every n-th frame during rewind. A limitation of this approach, however, is the additional storage space required at the client to support rewind.
Reference: [4] <author> M. S. Chen, D. D. Kandlur, and P. S. Yu. </author> <title> Support for Fully Interactive Playout in a Disk-Array-Based Video Server. </title> <booktitle> In Proceedings of the Second International Conference on Multimedia, </booktitle> <pages> pages 391-398, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: However, methods for efficiently supporting interactive scan operations (fast-forward and rewind) have not been adequately investigated. 1.1 Relation to Previous Work In general, a video server can support fast-forward by: (1) displaying frames at a rate higher than normal playback [6, 7], or (2) skipping frames <ref> [4, 12] </ref>, or (3) using an independently encoded fast-forward stream. In the first scheme, to support fast-forward at n-times the normal playback rate, the server is required to retrieve n-times as many frames (as compared to the normal playback), yielding an n-fold increase in the load. <p> To avoid this problem, a fast-forward scheme in which: (1) video streams are stored on disks in terms of segments that consist of a group of independently decodable frames; and (2) fast-forward at n-times the normal playback is achieved by accessing and displaying every n-th segment has been proposed <ref> [4] </ref>. Such an approach eliminates the problem introduced by inter-frame dependencies. However, since each segment may contain a large number of successive frames (10-15 frames in MPEG), skipping entire segments may result in noticeable discontinuities during fast-forward, and hence, may be unacceptable.
Reference: [5] <author> T. Chiang and D. Anastassiou. </author> <title> Heirarchichal Coding of Digital Television. </title> <journal> IEEE Communications, </journal> <volume> 32(4) </volume> <pages> 38-45, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Since P and B frames exploit temporal redundancies, they achieve much higher compression ratios as compared to I frames. Figure 2 depicts the main steps involved in the MPEG compression algorithm. The MPEG-2 standard extends this algorithm by supporting scalability in the spatial, temporal, and chroma dimensions <ref> [5, 10] </ref>. An important feature of the MPEG compression algorithm is that the encoding pattern (i.e., the relative frequency of occurrence of I, P , and B frames) can be controlled by the application.
Reference: [6] <author> J. K. Dey-Sircar, J. D. Salehi, J. F. Kurose, and D. Towsley. </author> <title> Providing VCR Capabilities in Large-Scale Video Servers. </title> <booktitle> In Proceedings of the Second ACM International Conference on Multimedia, </booktitle> <pages> pages 25-32, </pages> <month> October </month> <year> 1994. </year> <month> 17 </month>
Reference-contexts: However, methods for efficiently supporting interactive scan operations (fast-forward and rewind) have not been adequately investigated. 1.1 Relation to Previous Work In general, a video server can support fast-forward by: (1) displaying frames at a rate higher than normal playback <ref> [6, 7] </ref>, or (2) skipping frames [4, 12], or (3) using an independently encoded fast-forward stream. <p> The additional resources that must be set aside is dependent on the probability of clients requesting a transition from playback to fast-forward, as well as the duration for which a client remains in the fast-forward mode <ref> [6] </ref>. In schemes that skip frames, on the other hand, fast-forward at n-times the playback rate is achieved by displaying every n th frame at the normal playback rate.
Reference: [7] <author> W. Feng, F. Jahanian, and S. Sechrest. </author> <title> Providing VCR Functionality in a Constant Quality Video-On-Demand Transportation Service. </title> <booktitle> In Proceedings of the International Conference On Multimedia Computing and Systems (ICMCS), </booktitle> <address> Hiroshima, Japan, </address> <pages> pages 127-135, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: However, methods for efficiently supporting interactive scan operations (fast-forward and rewind) have not been adequately investigated. 1.1 Relation to Previous Work In general, a video server can support fast-forward by: (1) displaying frames at a rate higher than normal playback <ref> [6, 7] </ref>, or (2) skipping frames [4, 12], or (3) using an independently encoded fast-forward stream. <p> Since rewind is similar to fast-forward, all of the above approaches for fast-forward can be easily extended to support rewind. In addition to these server-based approaches, several client-based approaches that do not require any server intervention during rewind have also been proposed <ref> [3, 7] </ref>. These techniques require a client to cache previously displayed frames for rewind. For instance, a scheme in which the client caches all previously displayed frames on a local disk has been recently proposed [3]. <p> A limitation of this approach, however, is the additional storage space required at the client to support rewind. If the storage space available at the client is limited, then the client can cache only a small number of previously displayed frames <ref> [7] </ref>. In such a scenario, the duration of the rewind operation that can be supported without imposing any load on the server is limited by the size of the cache (referred to as a VCR-window).
Reference: [8] <author> D. Le Gall. </author> <title> MPEG: A Video Compression Standard for Multimedia Apllications. </title> <journal> Communications of the ACM, </journal> <volume> 34(4) </volume> <pages> 46-58, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: However, such frame skipping schemes may not be directly applicable for video streams encoded using compression algorithms that exploit temporal redundancy between successive frames (e.g., the MPEG compression standard <ref> [8] </ref>). This is because, such compression techniques create inter-frame dependencies which may prevent every n th frame to be independently decoded. <p> However, maintaining such a fast-forward stream may incur a substantial storage space overhead. To minimize storage space overhead, the MPEG standard has proposed the creation of a video stream containing D frames, which contain only the DC coefficients of the transform blocks <ref> [8] </ref>. However, this yields a video stream with very poor quality, which is not acceptable for most applications. Since rewind is similar to fast-forward, all of the above approaches for fast-forward can be easily extended to support rewind. <p> In intra-frame compression algorithms (e.g., JPEG [14]), since successive frames are encoded and decoded independently, both pre-compression and post-compression partitioning techniques are logically equivalent. Moreover, for such compression algorithms, temporal partitioning does not have any adverse effects on compression efficiency. In inter-frame compression algorithms (e.g., MPEG <ref> [8] </ref>), on the other hand, since the temporal redundancy between successive frames is used to efficiently encode the video stream, the degree of compression is critically dependent on the correlation between successive frames. <p> show how these techniques may be employed to support fast-forward and rewind in the MPEG compression algorithm. 2.2 Supporting Fast-Forward in MPEG 2.2.1 The MPEG Compression Standard The MPEG compression algorithm exploits the temporal and spatial redundancies present within a sequence of images to achieve a high degree of compression <ref> [8] </ref>. A group of pictures (GOP) in an MPEG stream is defined to be the smallest set of consecutive frames that is independently decodable.
Reference: [9] <author> J. Gemmell and S. Christodoulakis. </author> <title> Principles of Delay Sensitive Multimedia Data Storage and Retrieval. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 51-90, </pages> <year> 1992. </year>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to its data rate and real-time performance requirements), several techniques for designing video servers that can meet the real-time playback requirement of video streams have been developed <ref> [1, 9, 15, 17, 19] </ref>.
Reference: [10] <author> International Organisation for Standardisation. </author> <title> Information Technology Generic Coding of Moving Pictures and Associated Audio Systems: Systems, Video and Audio, International Standard (MPEG2), </title> <address> ISO/IEC 13818,, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Since P and B frames exploit temporal redundancies, they achieve much higher compression ratios as compared to I frames. Figure 2 depicts the main steps involved in the MPEG compression algorithm. The MPEG-2 standard extends this algorithm by supporting scalability in the spatial, temporal, and chroma dimensions <ref> [5, 10] </ref>. An important feature of the MPEG compression algorithm is that the encoding pattern (i.e., the relative frequency of occurrence of I, P , and B frames) can be controlled by the application. <p> The bit rate can be reduced by partitioning the base sub-stream into low-resolution and residual components, and utilizing only the low-resolution component for fast-forward. Examples of such chroma partitioning techniques include the SNR scalability and the data partitioning modes of the MPEG-2 standard <ref> [10] </ref>. Whereas the SNR scalability mode creates the low-resolution and residual components by controlling the granularity of quantization, the data partitioning technique achieves a similar effect by explicitly dividing the frequency domain coefficients between the two components.
Reference: [11] <author> E.K. Lee and R.H. Katz. </author> <title> An Analytic Performance Model for Disk Arrays. </title> <booktitle> In Proceedings of the 1993 ACM SIGMETRICS, </booktitle> <pages> pages 98-109, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Having determined the distribution of the number of blocks accessed from the most heavily loaded disk, the service time of the disk can then be computed by using a disk model. We use one such model that has been proposed in the literature <ref> [11, 18] </ref>. <p> equally spaced across the C cylinders of a disk, we define t s = t seek b B max , where: t seek (x) = a x 1 + b (x 1) + c otherwise (8) and a, b, and c are constants (determined using physical characteristics of a disk) <ref> [11] </ref>. The average rotational latency, t r , is defined to be half of the maximum rotational latency.
Reference: [12] <author> J. C. S. Lui and K. W. </author> <title> Law. Load Balancing and VCR Functionalities Support via Subband Coding Techniques. </title> <booktitle> In Proceedings of the Sixth International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pages 77-80, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: However, methods for efficiently supporting interactive scan operations (fast-forward and rewind) have not been adequately investigated. 1.1 Relation to Previous Work In general, a video server can support fast-forward by: (1) displaying frames at a rate higher than normal playback [6, 7], or (2) skipping frames <ref> [4, 12] </ref>, or (3) using an independently encoded fast-forward stream. In the first scheme, to support fast-forward at n-times the normal playback rate, the server is required to retrieve n-times as many frames (as compared to the normal playback), yielding an n-fold increase in the load.
Reference: [13] <author> S. Paek, P. Bocheck, and S. F. Chang. </author> <title> Scalable MPEG2 Video Servers with Heterogeneous QoS on Parallel Disk Arrays. </title> <booktitle> In Proceedings of the Fifth International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Thus, depending on the type of media blocks used by the server, a request for a fixed number of frames in each round will require the server to access a fixed number of variable-size blocks or a variable number of fixed-size blocks <ref> [2, 13, 18] </ref>.
Reference: [14] <author> W. B. Pennebaker and J. L. Mitchell. </author> <title> JPEG Still Image Data Compression Standard. </title> <publisher> Van Nostrand Reinhold, </publisher> <year> 1993. </year>
Reference-contexts: Observe that, such temporal partitioning can be accomplished either prior-to or after compression (referred to as pre-compression and post-compression partitioning, respectively) (see Figure 1). The effectiveness of these approaches, 4 however, is dependent on the compression algorithm. In intra-frame compression algorithms (e.g., JPEG <ref> [14] </ref>), since successive frames are encoded and decoded independently, both pre-compression and post-compression partitioning techniques are logically equivalent. Moreover, for such compression algorithms, temporal partitioning does not have any adverse effects on compression efficiency.
Reference: [15] <author> F.A. Tobagi, J. Pang, R. Baird, and M. Gang. </author> <title> Streaming RAID: A Disk Storage System for Video and Audio Files. </title> <booktitle> In Proceedings of ACM Multimedia'93, </booktitle> <address> Anaheim, CA, </address> <pages> pages 393-400, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to its data rate and real-time performance requirements), several techniques for designing video servers that can meet the real-time playback requirement of video streams have been developed <ref> [1, 9, 15, 17, 19] </ref>.
Reference: [16] <author> K. S. Trivedi. </author> <title> Probability & Statistics With Reliability, Queuing, </title> <booktitle> And Computer Science Applications. </booktitle> <publisher> Prentice-Hall, Inc., </publisher> <year> 1982. </year>
Reference-contexts: To precisely describe the model, let us assume that a client in the playback mode can switch to the fast-forward mode at any random instant and vice versa, and that such a behavior can be modeled using a two state Markov chain <ref> [16] </ref> (see Figure 6). Let F i denote the probability of switching from playback to fast-forward, and P i denote the 11 probability of switching from fast-forward to playback mode for client i as shown in the figure. <p> That is, X j i 's are independent. Hence, we get: Z (B j ) = i=1 j where Z (B j ) and Z (X j i ) are the z-transforms 1 of the random variables B j and X j i , respectively <ref> [16] </ref>. 2 Then the number of blocks accessed from the most heavily loaded disk is given by B max = max (B 1 ; B 2 ; ; B D ) Note that, sub-stream blocks are interleaved on the array in a round-robin manner and a client can access up to
Reference: [17] <author> H. M. Vin, P. Goyal, A. Goyal, and A. Goyal. </author> <title> A Statistical Admission Control Algorithm for Multimedia Servers. </title> <booktitle> In Proceedings of the ACM Multimedia'94, </booktitle> <address> San Francisco, </address> <pages> pages 33-40, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to its data rate and real-time performance requirements), several techniques for designing video servers that can meet the real-time playback requirement of video streams have been developed <ref> [1, 9, 15, 17, 19] </ref>.
Reference: [18] <author> H.M. Vin, S.S. Rao, and P. Goyal. </author> <title> Optimizing the Placement of Multimedia Objects on Disk Arrays. </title> <booktitle> In Proceedings of the Second IEEE International Conference on Multimedia Computing and Systems, </booktitle> <address> Washington, D.C., </address> <pages> pages 158-165, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Thus, depending on the type of media blocks used by the server, a request for a fixed number of frames in each round will require the server to access a fixed number of variable-size blocks or a variable number of fixed-size blocks <ref> [2, 13, 18] </ref>. <p> Having determined the distribution of the number of blocks accessed from the most heavily loaded disk, the service time of the disk can then be computed by using a disk model. We use one such model that has been proposed in the literature <ref> [11, 18] </ref>.
Reference: [19] <author> P. Yu, M.S. Chen, and D.D. Kandlur. </author> <title> Design and Analysis of a Grouped Sweeping Scheme for Multimedia Storage Management. </title> <booktitle> Proceedings of Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> San Diego, </address> <pages> pages 38-49, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Amongst all these data types, since video is the most demanding (with respect to its data rate and real-time performance requirements), several techniques for designing video servers that can meet the real-time playback requirement of video streams have been developed <ref> [1, 9, 15, 17, 19] </ref>.
References-found: 19

