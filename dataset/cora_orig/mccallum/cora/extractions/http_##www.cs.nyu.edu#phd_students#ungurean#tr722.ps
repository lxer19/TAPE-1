URL: http://www.cs.nyu.edu/phd_students/ungurean/tr722.ps
Refering-URL: http://www.cs.nyu.edu/phd_students/ungurean/index.html
Root-URL: http://www.cs.nyu.edu
Title: A Note on Scheduling Algorithms for Processors with Lookahead  
Author: Cristian Ungureanu 
Date: June 1996  
Affiliation: New York University  
Abstract-found: 0
Intro-found: 1
Reference: [LPU95] <author> Allen Leung, Krishna Palem, and Cristian Ungureanu. </author> <title> Run-time versus compile-time instruction scheduling in superscalar (risc) processors: Performance and tradeoffs. </title> <type> Technical Report TR-699, </type> <address> New York University, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Consequently, the algorithm we describe will not necessarily produce an optimum schedule for such a machine. For a more detailed discussion of the possible hardware models for out-of-order execution, and scheduling algorithms to take advantage of it, see <ref> [LPU95] </ref>. 4 Scheduling Algorithm The goal of instruction scheduling is to produce a schedule which has minimum completion time when run on the processor. Note that the completion time for an instruction stream run on a processor with out-of-order execution may be shorter that the length of the schedule.
Reference: [PS93] <author> Krishna Palem and Barbara Simons. </author> <title> Scheduling time-critical instructions on RISC machines. </title> <journal> ACM TOPLAS, </journal> <volume> 5(3), </volume> <year> 1993. </year> <month> 7 </month>
Reference-contexts: The procedure min makespan (figure 4) computes the minimum makespan of the basic block BB given the first and last two nodes. The underlying algorithm used for scheduling a basic block is that presented in <ref> [PS93] </ref>, henceforth called PS. However, our algorithm remains correct with any other algorithm computing an optimum (local) schedule.
References-found: 2

