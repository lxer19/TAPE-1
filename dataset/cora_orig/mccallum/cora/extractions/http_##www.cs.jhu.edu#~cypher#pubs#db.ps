URL: http://www.cs.jhu.edu/~cypher/pubs/db.ps
Refering-URL: http://www.cs.jhu.edu/~cypher/pubs/pubs.html
Root-URL: http://www.cs.jhu.edu
Email: cypher@cs.jhu.edu  
Title: Minimal, Deadlock-Free Routing in Hypercubic and Arbitrary Networks  
Author: Robert Cypher 
Keyword: Index Terms: Buffer requirements, deadlock, de Bruijn, hypercube, minimal routing, packet routing, shu*e-exchange, store-and-forward routing, virtual cut-through routing, wormhole routing  
Address: Baltimore, MD 21218  
Affiliation: Department of Computer Science Johns Hopkins University  
Abstract: In this paper we consider the problem of creating minimal, deadlock-free routing algorithms, where a routing algorithm is said to be minimal if it uses only shortest paths. In particular, we examine the possibility of creating scalable algorithms that use only a constant number of buffers per node. Minimal, scalable, deadlock-free routing algorithms are known for many important networks including meshes, tori, trees and hypercubes. In addition, it is known that a scalable, deadlock-free routing algorithm exists for every network. However, it is unknown whether or not a minimal, scalable, deadlock-free routing algorithm exists for every network, and no such algorithm is known for the de Bruijn or shu*e-exchange networks. We present three main results. First, we prove that there is no minimal, scalable, deadlock-free routing algorithm for the hypercube that uses only the standard Ascend (dimension-order) paths. Second, we prove that there exist networks for which no minimal, scalable, deadlock-free routing algorithm is possible. Third, we create minimal, scalable, deadlock-free routing algorithms for the de Bruijn and shu*e-exchange networks. The algorithm for the de Bruijn network appears to be of practical interest, as it uses only four buffers per node. Our results apply to oblivious and adaptive store-and-forward and virtual cut-through routing algorithms, and to oblivious wormhole routing algorithms. fl A preliminary version of this paper appeared in the Proceedings of the Seventh IEEE Symposium on Parallel and Distributed Processing, 1995. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Awerbuch, S. Kutten, and D. Peleg, </author> <title> "Efficient Deadlock-Free Routing", </title> <booktitle> in Proc. ACM Symp. on Principles of Distributed Computing, </booktitle> <pages> pp. 177-188, </pages> <year> 1991. </year>
Reference: [2] <author> P.E. Berman, L. Gravano, G.D. Pifarre, and J.L.C. Sanz, </author> <title> "Adaptive Deadlock- and Livelock-Free Routing with All Minimal Paths in Torus Networks", </title> <booktitle> in Proc. ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pp. 3-12, </pages> <year> 1992. </year>
Reference: [3] <author> J-C. Bermond and C. Peyrat, </author> <title> "de Bruijn and Kautz Networks: A Competitor for the Hypercube", in Hypercube and Distributed Computers, </title> <editor> F. Andre and J.P. Verjus (eds.), </editor> <publisher> North-Holland, </publisher> <pages> pp. 279-293, </pages> <year> 1989. </year>
Reference-contexts: However, no such algorithm is known for the de Bruijn <ref> [3, 21] </ref> or shu*e-exchange [27, 21] networks (although a non-minimal, scalable, deadlock-free algorithm is known for the shu*e-exchange [26]). <p> The creation of such an algorithm for the de Bruijn network is particularly important, as it has constant degree and small diameter, it can support many hypercube algorithms efficiently, and it can be packaged efficiently <ref> [3, 5, 21] </ref>. It is known that a scalable, deadlock-free routing algorithm exists for every connected network [23]. However, this algorithm forces some messages to take nonminimal paths.
Reference: [4] <author> A.A. Chien and J.H. Kim, </author> <title> "Planar-Adaptive Routing: Low-Cost Adaptive Networks for Multiprocessors", </title> <booktitle> in Proc. Intl. Symp. on Computer Architecture, </booktitle> <pages> pp. 268-277, </pages> <year> 1992. </year>
Reference: [5] <author> R. Cypher, </author> <title> "Theoretical Aspects of VLSI Pin Limitations", </title> <journal> SIAM J. on Computing, </journal> <volume> vol. 22, no. 2, </volume> <pages> pp. 356-378, </pages> <year> 1993. </year>
Reference-contexts: The creation of such an algorithm for the de Bruijn network is particularly important, as it has constant degree and small diameter, it can support many hypercube algorithms efficiently, and it can be packaged efficiently <ref> [3, 5, 21] </ref>. It is known that a scalable, deadlock-free routing algorithm exists for every connected network [23]. However, this algorithm forces some messages to take nonminimal paths.
Reference: [6] <author> R. Cypher and L. Gravano, </author> <title> "Requirements for Deadlock-Free, Adaptive Packet Routing", </title> <journal> SIAM J. on Computing, </journal> <volume> vol. 23, no. 6, </volume> <pages> pp. 1266-1274, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction This paper studies deadlock-free buffer-reservation algorithms, where a buffer-reservation algorithm <ref> [6] </ref> is a routing algorithm that specifies to which buffers a message may move based solely on the buffer currently holding the message and the message's source and destination nodes. <p> The following theorem was proven by Cypher and Gravano <ref> [6] </ref>.
Reference: [7] <author> R. Cypher and L. Gravano, "Storage-Efficient, </author> <title> Deadlock-Free Packet Routing Algorithms for Torus Networks", </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 43, no. 12, </volume> <pages> pp. 1376-1385, </pages> <year> 1994. </year>
Reference-contexts: great deal of research has been devoted to creating efficient, deadlock-free routing algorithms [1, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 22, 23, 25, 26, 28, 29, 30], and minimal, scalable, deadlock-free algorithms are known for many important networks including meshes [26], tori <ref> [7] </ref>, trees [23] and hypercubes [26] 1 . However, no such algorithm is known for the de Bruijn [3, 21] or shu*e-exchange [27, 21] networks (although a non-minimal, scalable, deadlock-free algorithm is known for the shu*e-exchange [26]).
Reference: [8] <author> W.J. Dally and C. Seitz, </author> <title> "Deadlock-Free Message Routing in Multiprocessor Interconnection Networks", </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 36, </volume> <pages> pp. 547-553, </pages> <year> 1987. </year>
Reference-contexts: We will consider routing algorithms that use three different switching modes. In store-and-forward routing [23] each message is stored completely in a buffer before being sent to the next buffer in its path. In contrast, wormhole routing <ref> [8] </ref> breaks each message into small pieces called flits. As soon as 2 a flit has been received in a buffer, it is sent to the next buffer in its path without waiting for the remaining flits to arrive. <p> algorithm is free from deadlock. 2 26 It should be noted that although the above theorem is stated in terms of the number of buffers required per node, it can also be used to create a minimal, deadlock-free wormhole routing algorithm for de Bruijn networks that uses four virtual channels <ref> [8] </ref> per arc (by simply creating a separate virtual channel for each buffer used in the theorem). Theorem 4.26 There exists a minimal, deadlock-free routing algorithm for the undirected de Bruijn network U B (m; n) that uses a constant number of buffers per node.
Reference: [9] <author> J. Duato, </author> <title> "Deadlock-Free Adaptive Routing Algorithms for Multicomputers: Evaluation of a New Algorithm", </title> <booktitle> in Proc. IEEE Symp. on Parallel and Distributed Processing, </booktitle> <pages> pp. 840-847, </pages> <year> 1991. </year>
Reference: [10] <author> S.A. Felperin, H. Laffitte, G. Buranits, and J.L.C. Sanz, </author> <title> "Deadlock-Free Minimal Packet Routing in the Torus Network", </title> <type> Tech. Rep. </type> <institution> TR:91-22, IBM Computer Research and Advanced Applications Group, Buenos Aires, Argentina, </institution> <year> 1991. </year>
Reference: [11] <author> B. Gavish, P.M. Merlin, and P.J. Schweitzer, </author> <title> "Minimal Buffer Requirements for Avoiding Store-and-Forward Deadlock", </title> <type> Tech. Rep. </type> <institution> RC6672, IBM T.J. Watson Res. Ctr., </institution> <year> 1977. </year>
Reference-contexts: It is also known that in a completely connected network in which messages are forced to take certain (highly nonminimal) paths, no scalable, deadlock-free routing algorithm is possible <ref> [11] </ref>. Thus a natural question is whether or not a minimal, scalable, deadlock-free routing algorithm exists for every network.
Reference: [12] <author> C.J. Glass and L.M. Ni, </author> <title> "The Turn Model for Adaptive Routing", </title> <booktitle> in Proc. Intl. Symp. on Computer Architecture, </booktitle> <pages> pp. 278-287, </pages> <year> 1992. </year>
Reference: [13] <author> I.S. Gopal, </author> <title> "Prevention of Store-and-Forward Deadlock in Computer Networks", </title> <journal> IEEE Trans. on Communication, </journal> <volume> vol. 33, </volume> <pages> pp. 1258-1264, </pages> <year> 1985. </year> <month> 28 </month>
Reference: [14] <author> K.D. Gunther, </author> <title> "Prevention of Deadlocks in Packet-Switched Data Transport Systems", </title> <journal> IEEE Trans. on Communication, </journal> <volume> vol. 29, </volume> <pages> pp. 512-524, </pages> <year> 1981. </year>
Reference-contexts: The following theorem is immediate from a proposition proven by Gunther <ref> [14] </ref>.
Reference: [15] <author> P.A.J. Hilbers and J.J. Lukkien, </author> <title> "Deadlock-Free Message Routing in Multicomputer Networks", </title> <journal> Distributed Computing, </journal> <volume> vol. 3, </volume> <pages> pp. 178-186, </pages> <year> 1989. </year>
Reference: [16] <author> C.R. Jesshope, P.R. Miller, and J.T. Yantchev, </author> <title> "High Performance Communications in Processor Networks", </title> <booktitle> in Proc. Intl. Symp. on Computer Architecture, </booktitle> <pages> pp. 150-157, </pages> <year> 1989. </year>
Reference: [17] <author> P. Kermani and L. Kleinrock, </author> <title> "Virtual Cut-Through: A New Computer Communication Switching Technique", </title> <journal> Computer Networks, </journal> <volume> vol. 3, </volume> <pages> pp. 267-286, </pages> <year> 1979. </year>
Reference-contexts: If the first flit in a message encounters congestion, the entire worm is prevented from making progress. Finally, virtual cut-through routing <ref> [17] </ref> is similar to wormhole routing in that each packet is sent as a sequence of flits, but virtual cut-through routing buffers the entire message in the buffer in which congestion occurs. 2.2 Known Results The following theorems provide necessary and sufficient conditions for the creation of deadlock-free oblivious and adaptive
Reference: [18] <author> S. Konstantinidou, </author> <title> "Adaptive, Minimal Routing in Hypercubes", </title> <booktitle> in Proc. MIT Conf. on Advanced Research in VLSI, </booktitle> <pages> pp. 139-153, </pages> <year> 1990. </year>
Reference: [19] <author> S. Konstantinidou and L. Snyder, </author> <title> "The Chaos Router", </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 43, no. 12, </volume> <pages> pp. 1386-1397, </pages> <year> 1994. </year>
Reference: [20] <author> T. Leighton, </author> <title> Complexity Issues ini VLSI: Optimal Layouts for the Shu*e-Exchange Graph and Other Networks, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1983. </year>
Reference-contexts: We will then exploit certain properties of minimal paths in de Bruijn networks (proven in Lemmas 4.20 and 4.21) to develop our deadlock-free routing algorithm. It should be noted that other researchers have created orderings and/or classifications of the nodes in de Bruijn and shu*e-exchange graphs in different contexts <ref> [20, 24] </ref>.
Reference: [21] <author> T. Leighton, </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: However, no such algorithm is known for the de Bruijn <ref> [3, 21] </ref> or shu*e-exchange [27, 21] networks (although a non-minimal, scalable, deadlock-free algorithm is known for the shu*e-exchange [26]). <p> However, no such algorithm is known for the de Bruijn [3, 21] or shu*e-exchange <ref> [27, 21] </ref> networks (although a non-minimal, scalable, deadlock-free algorithm is known for the shu*e-exchange [26]). These networks are known to be very powerful in a synchronous setting, but the lack of efficient, deadlock-free routing algorithms for these networks has hindered their use in asynchronous, MIMD, parallel computers. <p> The creation of such an algorithm for the de Bruijn network is particularly important, as it has constant degree and small diameter, it can support many hypercube algorithms efficiently, and it can be packaged efficiently <ref> [3, 5, 21] </ref>. It is known that a scalable, deadlock-free routing algorithm exists for every connected network [23]. However, this algorithm forces some messages to take nonminimal paths.
Reference: [22] <author> Y. Mansour and B. Patt-Shamir, </author> <title> "Greedy Packet Scheduling on Shortest Paths", </title> <booktitle> in Proc. ACM Symp. on Principles of Distributed Computing, </booktitle> <pages> pp. 165-175, </pages> <year> 1991. </year>
Reference: [23] <author> P.M. Merlin and P.J. Schweitzer, </author> <title> "Deadlock Avoidance in Store-and-Forward Networks. 1: Store-and-Forward Deadlock", </title> <journal> IEEE Trans. on Communication, </journal> <volume> vol. 28, </volume> <pages> pp. 345-354, </pages> <year> 1980. </year>
Reference-contexts: of research has been devoted to creating efficient, deadlock-free routing algorithms [1, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 22, 23, 25, 26, 28, 29, 30], and minimal, scalable, deadlock-free algorithms are known for many important networks including meshes [26], tori [7], trees <ref> [23] </ref> and hypercubes [26] 1 . However, no such algorithm is known for the de Bruijn [3, 21] or shu*e-exchange [27, 21] networks (although a non-minimal, scalable, deadlock-free algorithm is known for the shu*e-exchange [26]). <p> It is known that a scalable, deadlock-free routing algorithm exists for every connected network <ref> [23] </ref>. However, this algorithm forces some messages to take nonminimal paths. Furthermore, this algorithm uses a spanning tree of the network in order to construct the deadlock-free routing paths, so it may introduce congestion near the root of the spanning tree. <p> A routing algorithm is oblivious if every packet is forced to take a single, fixed path based on its source and destination nodes, and it is adaptive otherwise. We will consider routing algorithms that use three different switching modes. In store-and-forward routing <ref> [23] </ref> each message is stored completely in a buffer before being sent to the next buffer in its path. In contrast, wormhole routing [8] breaks each message into small pieces called flits.
Reference: [24] <author> B. Obrenic, </author> <title> "Embedding de Bruijn and Shu*e-Exchange Graphs in Five Pages", </title> <booktitle> in Proc. ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pp. 137-146, </pages> <year> 1991. </year>
Reference-contexts: We will then exploit certain properties of minimal paths in de Bruijn networks (proven in Lemmas 4.20 and 4.21) to develop our deadlock-free routing algorithm. It should be noted that other researchers have created orderings and/or classifications of the nodes in de Bruijn and shu*e-exchange graphs in different contexts <ref> [20, 24] </ref>.
Reference: [25] <author> Y. Ofek and M. Yung, </author> <title> "Principles for High Speed Network Control: Loss-Less and Deadlock-Freeness, Self-Routing and a Single Buffer per Link", </title> <booktitle> in Proc. ACM Symp. on Principles of Distributed Computing, </booktitle> <pages> pp. 161-175, </pages> <year> 1990. </year>
Reference: [26] <author> G.D. Pifarre, L. Gravano, S.A. Felperin, and J.L.C. Sanz, </author> <title> "Fully-Adaptive Minimal Deadlock-Free Packet Routing in Hypercubes, Meshes, and Other Networks", </title> <booktitle> in Proc. ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pp. 278-290, </pages> <year> 1991. </year>
Reference-contexts: A great deal of research has been devoted to creating efficient, deadlock-free routing algorithms [1, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 22, 23, 25, 26, 28, 29, 30], and minimal, scalable, deadlock-free algorithms are known for many important networks including meshes <ref> [26] </ref>, tori [7], trees [23] and hypercubes [26] 1 . However, no such algorithm is known for the de Bruijn [3, 21] or shu*e-exchange [27, 21] networks (although a non-minimal, scalable, deadlock-free algorithm is known for the shu*e-exchange [26]). <p> been devoted to creating efficient, deadlock-free routing algorithms [1, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 22, 23, 25, 26, 28, 29, 30], and minimal, scalable, deadlock-free algorithms are known for many important networks including meshes <ref> [26] </ref>, tori [7], trees [23] and hypercubes [26] 1 . However, no such algorithm is known for the de Bruijn [3, 21] or shu*e-exchange [27, 21] networks (although a non-minimal, scalable, deadlock-free algorithm is known for the shu*e-exchange [26]). <p> minimal, scalable, deadlock-free algorithms are known for many important networks including meshes <ref> [26] </ref>, tori [7], trees [23] and hypercubes [26] 1 . However, no such algorithm is known for the de Bruijn [3, 21] or shu*e-exchange [27, 21] networks (although a non-minimal, scalable, deadlock-free algorithm is known for the shu*e-exchange [26]). These networks are known to be very powerful in a synchronous setting, but the lack of efficient, deadlock-free routing algorithms for these networks has hindered their use in asynchronous, MIMD, parallel computers. <p> In fact, it is known that it is possible to perform minimal, deadlock-free routing on the hypercube using two buffers per node (but not using the Ascend paths) <ref> [26] </ref>. In this section we will present a network for which any minimal deadlock-free routing algorithm requires a nonconstant number of buffers per node. Definitions: An n-dimensional staggered array, denoted SA (n), contains 2 2 n 1 nodes.
Reference: [27] <author> H.S. Stone, </author> <title> "Parallel Processing with the Perfect Shu*e", </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 20, no. 2, </volume> <pages> pp. 153-161, </pages> <year> 1971. </year>
Reference-contexts: However, no such algorithm is known for the de Bruijn [3, 21] or shu*e-exchange <ref> [27, 21] </ref> networks (although a non-minimal, scalable, deadlock-free algorithm is known for the shu*e-exchange [26]). These networks are known to be very powerful in a synchronous setting, but the lack of efficient, deadlock-free routing algorithms for these networks has hindered their use in asynchronous, MIMD, parallel computers.
Reference: [28] <author> S. Toueg and K. Steiglitz, </author> <title> "Some Complexity Results in the Design of Deadlock-Free Packet Switching Networks", </title> <journal> SIAM J. on Computing, </journal> <volume> vol. 10, </volume> <pages> pp. 702-712, </pages> <year> 1981. </year> <month> 29 </month>
Reference-contexts: The following theorem was proven by Toueg and Steiglitz <ref> [28] </ref>. Theorem 2.2 Given any store-and-forward, virtual cut-through, or wormhole routing algorithm that is oblivious and deadlock-free, there exists a total ordering of the buffers such that every message is always allowed to move to a higher ordered buffer or to be delivered.
Reference: [29] <author> S. Toueg and J.D. Ullman, </author> <title> "Deadlock-Free Packet Switching Networks", </title> <journal> SIAM J. on Computing, </journal> <volume> vol. 10, </volume> <pages> pp. 594-611, </pages> <year> 1981. </year>
Reference: [30] <author> J. Yantchev and C.R. Jesshope, </author> <title> "Adaptive, Low Latency, Deadlock-Free Packet Routing for Networks of Processors", </title> <journal> IEE Proc., Pt. E, </journal> <volume> vol. 136, </volume> <pages> pp. 178-186, </pages> <year> 1989. </year> <month> 30 </month>
References-found: 30

