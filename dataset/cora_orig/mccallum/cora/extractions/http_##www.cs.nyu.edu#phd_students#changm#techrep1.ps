URL: http://www.cs.nyu.edu/phd_students/changm/techrep1.ps
Refering-URL: http://www.cs.nyu.edu/phd_students/changm/index.html
Root-URL: http://www.cs.nyu.edu
Email: changm@cs.nyu.edu  
Title: Building a Fast Double-Dummy Bridge Solver  
Author: Ming-Sheng Chang PhD student 
Date: August 1, 1996  
Address: New York University  
Affiliation: Department of Computer Science Courant Institute of Mathematics Sciences  
Abstract: Compared to other games, particularly chess, the research in computer bridge is immature, and the best bridge-playing programs are mediocre. In this paper we address the problem of designing a fast double-dummy bridge game (i.e., a simplified bridge game with perfect information) solver. Although th size of the game tree we generated for searching the best line of play is huge (about on the order of 13!2 39 10 21 , even if we assume the average branching factor for players to follow suit is just 2), we show that , through varieties of searching techniques and some efficient moves ordering and pruning heuristics, most double-dummy bridge hands can be solved within a reasonable amount of time. In this paper we first give a brief introduction to computer bridge and previous work on the card-playing phase of bridge. Next, we describe the top-level architecture of our double-dummy solver (dds), followed by a number of implementation techniques we employed in our dds. Finally we present experimental results, draw our conclusion and describe some future work toward automating card-playing in real bridge. fl This research is supported in part by NSF grant #IRI-9300446
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ian Frank. </author> <title> An adaptation of proof-planning techniques to declarer play in the game of bridge. </title> <type> Master's thesis, </type> <institution> Depart. of AI, Edinburgh, </institution> <year> 1991. </year>
Reference-contexts: In the domain of declarative planning for a single suit, they claim that FINESSE can suggest the proper lines of play for many example hands bridge texts and support its decisions with probabilistic and qualitative information <ref> [1, 2] </ref>. * Gamback proposed the idea of using AI planning methods to construct a global plan through merging sub-plans that are obtained for each individual suit by brute-force [3]. * Ginsberg [4] and Levy [5] make similar proposals for card-playing. Suppose we have a fast double-dummy bridge games solver.
Reference: [2] <author> Ian Frank, D. Basin, and A. Bundy. </author> <title> An adaptation of proof-planning to declarer play in bridge. </title> <booktitle> In Proc. of the European Conf. on AI, </booktitle> <year> 1992. </year>
Reference-contexts: In the domain of declarative planning for a single suit, they claim that FINESSE can suggest the proper lines of play for many example hands bridge texts and support its decisions with probabilistic and qualitative information <ref> [1, 2] </ref>. * Gamback proposed the idea of using AI planning methods to construct a global plan through merging sub-plans that are obtained for each individual suit by brute-force [3]. * Ginsberg [4] and Levy [5] make similar proposals for card-playing. Suppose we have a fast double-dummy bridge games solver. <p> Although there have been two research groups <ref> [3, 2] </ref> claiming to start writing a bridge card-playing program using this idea, up to now, no results are published yet. Moreover, the idea of using the results of single suit analysis in double-dummy search seems not yet been proposed before.
Reference: [3] <author> B. Gamback, M. Rayner, and B. Pell. </author> <title> Pragmatic reasoning in bridge. </title> <type> Technical Report 299, </type> <institution> Univ. of Cambridge, Computer Lab., </institution> <year> 1993. </year>
Reference-contexts: suggest the proper lines of play for many example hands bridge texts and support its decisions with probabilistic and qualitative information [1, 2]. * Gamback proposed the idea of using AI planning methods to construct a global plan through merging sub-plans that are obtained for each individual suit by brute-force <ref> [3] </ref>. * Ginsberg [4] and Levy [5] make similar proposals for card-playing. Suppose we have a fast double-dummy bridge games solver. <p> Although there have been two research groups <ref> [3, 2] </ref> claiming to start writing a bridge card-playing program using this idea, up to now, no results are published yet. Moreover, the idea of using the results of single suit analysis in double-dummy search seems not yet been proposed before.
Reference: [4] <author> Matt. Ginsberg. </author> <title> How computer will play bridge. </title> <address> Newsgroup rec.games.bridge, </address> <year> 1995. </year>
Reference-contexts: lines of play for many example hands bridge texts and support its decisions with probabilistic and qualitative information [1, 2]. * Gamback proposed the idea of using AI planning methods to construct a global plan through merging sub-plans that are obtained for each individual suit by brute-force [3]. * Ginsberg <ref> [4] </ref> and Levy [5] make similar proposals for card-playing. Suppose we have a fast double-dummy bridge games solver. <p> lower bound estimator for suit contracts * implement a better dynamic orderings of cards in the classes winner, loser, and unknown as we mentioned in the section about moves generation * incorporate to our system the ability of dealing with uncertainty in real bridge * test Levy's [5] or Ginsberg's <ref> [4] </ref> proposed card-playing mechanism in real bridge
Reference: [5] <editor> N.L. Levy and D.F. Beal, editors. </editor> <booktitle> Heuristic Programming in Artificial Intelligence The First Computer Olympiad. </booktitle> <publisher> Ellis Horwood Ltd. </publisher> <address> Chichester, </address> <year> 1989. </year>
Reference-contexts: for many example hands bridge texts and support its decisions with probabilistic and qualitative information [1, 2]. * Gamback proposed the idea of using AI planning methods to construct a global plan through merging sub-plans that are obtained for each individual suit by brute-force [3]. * Ginsberg [4] and Levy <ref> [5] </ref> make similar proposals for card-playing. Suppose we have a fast double-dummy bridge games solver. <p> * implement a lower bound estimator for suit contracts * implement a better dynamic orderings of cards in the classes winner, loser, and unknown as we mentioned in the section about moves generation * incorporate to our system the ability of dealing with uncertainty in real bridge * test Levy's <ref> [5] </ref> or Ginsberg's [4] proposed card-playing mechanism in real bridge
Reference: [6] <author> T.A. Marsland. </author> <title> A review of game-tree pruning. </title> <journal> In ICCA Journal, </journal> <pages> pages 3-19, </pages> <month> March </month> <year> 1988. </year> <month> 15 </month>
Reference-contexts: bridge games, the use of quick trick checking reduces over 50 percent of expanded nodes (or the number of times function ddsearch is called) on average. 5 3 Implementation of hash table In computer chess, the hash table has been widely used and has proved helpful in pruning expanded nodes <ref> [6] </ref>. From the codes in previous section, we see that re-visits of some nodes that have been searched before (in current or previous call of ddsearch) are common.
Reference: [7] <author> J. Pearl. </author> <title> Asymptotic properties of minimax trees and game searching procedures. </title> <journal> Artificial Intelligence, </journal> <volume> 14 </volume> <pages> 113-138, </pages> <year> 1980. </year>
Reference-contexts: way to justify Levy's or Ginsberg's proposed mechanism of card playing in computer bridge is to implement and test it. 3 2 Top-level architecture Before we present the techniques employed in our dds, let us take a look at a primitive implementation of its top-level structure, which is basically Scout <ref> [7] </ref> search.
Reference: [8] <author> D. Roth. </author> <title> The Expert Improver. </title> <type> Collins Willow, </type> <year> 1992. </year> <month> 16 </month>
Reference-contexts: In this section we first present an example hand, and then describe how we apply the analysis results to our dds and implement the single-suit analyzer. 8 An Example Hand <ref> [8] </ref> 3NT A7 - KQJT3 | 732 West leads Q QJT53 - 92 W S 964 - A87 K82 - 654 We assume no trump contract for simplicity and compute the following for each individual suit and possible leading player. sure tricks the maximal tricks that the side of leading player
References-found: 8

