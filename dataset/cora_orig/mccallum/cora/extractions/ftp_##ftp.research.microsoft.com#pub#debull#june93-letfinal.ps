URL: ftp://ftp.research.microsoft.com/pub/debull/june93-letfinal.ps
Refering-URL: http://www.research.microsoft.com/research/db/debull/issues-list.htm
Root-URL: http://www.research.microsoft.com
Title: Open Nested Transactions in Federated Database Systems. the Serializability Requirement. Integration and Interoperability of a
Author: Issue.. .Rakesh Agrawal, David Lomet Gerhard Weikum, Andrew Deacon, Werner Schaad, and Hans Schek Transcending Meichun Hsu, Ron Obermarck, and Roelof Vuurboom ActionWorkflow T M .Raul Medina-Mora, Harry K.T. Wong, and Pablo Flores InConcert Dennis R. McCarthy and Sunil K. Sarin 
Note: Bulletin of the Technical Committee on Data Engineering June, 1993 Vol. 16 No. 2 IEEE Computer Society Letters Important Membership Message- Repeated from March  1 Letter from the Editor-in-Chief. .David Lomet 2 Special Issue on Workflow and Extended Transaction Systems Letter from the Special Issue Editor. Meichun Hsu 3  Umeshwar Dayal and Mihg-Chien Shan 41  Workflow and Transactions in  Conference Notices 1993 FODO Conference back cover  
Abstract: Rajeev Rastogi, Sharad Mehrotra, Henry K. Korth, and Abraham Silberschatz 8 Accessing Imprecise Data: An Intervals Approach . . . . . . . . . . . . . . . . . . . . Roger S. Barga and Calton Pu 12 Delegation in ACTA as a Means to Control Sharing in Extended Transactions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Panos K. Chrysanthis and Krithi Ramamritham 16 Constraint Based Transaction Management . . . . . . . . . . . . . . . . . . Johannes Klein and Francis Upton IV 20 An Extended Transaction Environment for Workflows in Distributed Object Computing . . . . . . . . . . . . . D. Georgakopoulos, M. F. Hornick, F. Manola, M. L. Brodie, S. Heiler, F. Nayeri, B. Hurwitz 24 Implementation of the Flex Transaction Model . . Omran Bukhres, Ahmed Elmagarmid, and Eva Kuhn 28 Workflow Support in Carnot . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . C. Tomlinson, P. Attie, P. Cannata, G. Meredith, A. Sheth, M. Singh, and D. Woelk 33 On Transactional Workflows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . Amit Sheth and Marek Rusinkiewicz 37 Issues in Operation Flow Management for Long-Running Activities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ansari, M., Ness, L., Rusinkiewicz, M., Sheth, A., </author> <title> Using Flexible Transactions to Support Multi-system Telecommunication Applications, </title> <booktitle> VLDB Conference, </booktitle> <year> 1992 </year>
Reference-contexts: This notion of exported high-level operations corresponds to the "steps" of nested sagas [10] and ConTracts [21] (cf. also [6]). Many real-life examples of multidatabase interoperability seem to be based on such a high-level requestor-server model <ref> [1, 11, 12, 20] </ref>. These include, for example, networks of travel agencies, the international interbank clearing system SWIFT, etc. We are investigating both the foundations and implementation issues of dealing with GTs and their co-existence with LTs within such a framework.
Reference: [2] <author> Beeri, C., Bernstein, P.A., Goodman, N., </author> <title> A Model for Concurrency in Nested Transaction Systems, </title> <journal> Journal of the ACM, 36(1989),2 </journal>
Reference-contexts: In this model, a schedule is a set of transaction trees together with an execution order &lt; of the invoked operations (i.e., the nodes of the trees). A schedule is called semantically serializable if it is equivalent to a serial execution of the transaction roots in the following sense <ref> [2] </ref>: a serial execution can be stepwise constructed from the original execution by * Rule 1 (compatibility of operations): exchanging the order of two &lt;-ordered and (with respect to &lt;) adjacent subtrees the roots of which are compatible operation invocations and belong to different transaction trees, and * Rule 2 (reduction
Reference: [3] <author> Beeri, C., Schek, H.-J., Weikum, G., </author> <title> Multilevel Transaction Management: Theoretical Art or Practical Need?, </title> <booktitle> International Conference on Extending Database Technology, </booktitle> <address> Venice, 1988, </address> <publisher> Springer, LNCS 303 </publisher>
Reference-contexts: Subtransactions may be committed (i.e., their effects are made visible to other transactions) independently of the commit of the transaction root; therefore, this model is called the open nested transaction model <ref> [13, 3, 24] </ref>. In this model, a schedule is a set of transaction trees together with an execution order &lt; of the invoked operations (i.e., the nodes of the trees). <p> Schedules are augmented by making all recovery-related operations explicit operations. Compensating operations, including their children at the DML level, and the additional undo operations of the LTs are added to the corresponding transaction trees <ref> [3, 19, 22] </ref>.
Reference: [4] <author> Breitbart, Y., Garcia-Molina, H., Silberschatz, A., </author> <title> Overview of Multidatabase Transaction Management, </title> <journal> VLDB Journal, 1(1992),2 </journal>
Reference-contexts: In the past few years, substantial research has been carried out on this problem of federated transaction management. The following general model of a federated database system has evolved from this research <ref> [4] </ref>. A federated database system is composed of a number of pre-existing local databases (LDBs), which are managed by the same or by different database systems. An LDB is a collection of data and pre-existing applications. The applications run local transactions (LTs) that access only the LDB.
Reference: [5] <author> Breitbart, Y., Georgakopoulos, D., Rusinkiewicz, M., Silberschatz, A., </author> <title> On Rigorous Transaction Scheduling, </title> <journal> IEEE Trans. on Softw. Eng., 17(1991),9 </journal>
Reference-contexts: There are two approaches to federated transaction management. The first approach is to rely on some common properties of the underlying LDBs. It has been shown that global serializability and atomicity, i.e., ACID guarantees for both GTs and LTs, are self-guaranteed if all LDBs ensure commit-order serializability <ref> [5, 16] </ref> and are able and willing to participate in a global two-phase commit. Note, however, that some of today's widely used DBMSs do not necessarily ensure commit-order serializability, since they make use of multiversion concurrency control protocols.
Reference: [6] <author> Dayal, U., Hsu, M., Ladin, R., </author> <title> A Transactional Model for Long-Running Activities, </title> <booktitle> VLDB Conference, </booktitle> <year> 1991 </year>
Reference-contexts: Rather an LDB "exports" a well-defined set of high-level operations that may be invoked by global transactions. This notion of exported high-level operations corresponds to the "steps" of nested sagas [10] and ConTracts [21] (cf. also <ref> [6] </ref>). Many real-life examples of multidatabase interoperability seem to be based on such a high-level requestor-server model [1, 11, 12, 20]. These include, for example, networks of travel agencies, the international interbank clearing system SWIFT, etc.
Reference: [7] <author> Deacon, A., Schek, H.-J., Weikum, G., </author> <title> Semantics-based Multilevel Transaction Management in Federated Systems, </title> <type> Technical Report, </type> <institution> Dept. of Computer Science, ETH Zurich, </institution> <year> 1993 </year>
Reference-contexts: The rest of this synopsis discusses our semantics-based correctness model and gives a brief overview of a prototype that is being built within the COSMOS project at ETH Zurich. More details on the foundations of our approach and some background material can be found in <ref> [7, 18, 19, 22, 24] </ref>; more details on the implementation issues can be found in [15, 17, 22, 23]. 2 Semantics-based Global Serializability We assume that a compatibility specification for the exported operations of an LDB, usually in the form of a table, is provided by the administration staff of the
Reference: [8] <editor> A.K. Elmagarmid (ed.), </editor> <title> Database Transaction Models for Advanced Applications, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1992 </year>
Reference: [9] <author> Garcia-Molina, H., Salem, K., Sagas, </author> <booktitle> ACM SIGMOD Conference, </booktitle> <year> 1987 </year>
Reference-contexts: The 5 schedule is semantically serializable; it is equivalent to the serial execution GT1 &lt; LT3 &lt; GT2, which can be proven by applying the two rules and assuming that Deposit operations on the same account are compatible. Our model of federated transactions subsumes sagas <ref> [9] </ref> as a special case. Assume that there were no LTs and that all exported high-level operations of an LDB are compatible with each other.
Reference: [10] <author> Garcia-Molina, H., Gawlick, D., Klein, J., Kleissner, K., Salem, K., </author> <title> Modeling Long-Running Activities as Nested Sagas, </title> <journal> IEEE Data Engineering Bulletin, 14(1991),1 </journal>
Reference-contexts: Rather an LDB "exports" a well-defined set of high-level operations that may be invoked by global transactions. This notion of exported high-level operations corresponds to the "steps" of nested sagas <ref> [10] </ref> and ConTracts [21] (cf. also [6]). Many real-life examples of multidatabase interoperability seem to be based on such a high-level requestor-server model [1, 11, 12, 20]. These include, for example, networks of travel agencies, the international interbank clearing system SWIFT, etc.
Reference: [11] <author> Gray, J.N., </author> <title> An Approach to Decentralized Computer Systems, </title> <journal> IEEE Trans. on Softw. Eng., 12(1986),6 </journal>
Reference-contexts: This notion of exported high-level operations corresponds to the "steps" of nested sagas [10] and ConTracts [21] (cf. also [6]). Many real-life examples of multidatabase interoperability seem to be based on such a high-level requestor-server model <ref> [1, 11, 12, 20] </ref>. These include, for example, networks of travel agencies, the international interbank clearing system SWIFT, etc. We are investigating both the foundations and implementation issues of dealing with GTs and their co-existence with LTs within such a framework.
Reference: [12] <author> Gray, J.N., Anderton, M., </author> <title> Distributed Computer Systems: Four Case Studies, </title> <booktitle> Proceedings of the IEEE, </booktitle> <address> 75(1987),5 </address>
Reference-contexts: This notion of exported high-level operations corresponds to the "steps" of nested sagas [10] and ConTracts [21] (cf. also [6]). Many real-life examples of multidatabase interoperability seem to be based on such a high-level requestor-server model <ref> [1, 11, 12, 20] </ref>. These include, for example, networks of travel agencies, the international interbank clearing system SWIFT, etc. We are investigating both the foundations and implementation issues of dealing with GTs and their co-existence with LTs within such a framework.
Reference: [13] <author> Gray, J., Reuter, A., </author> <title> Transaction Processing: Concepts and Techniques, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993 </year>
Reference-contexts: The approach adopted is to restrict the way local systems cooperate with each other in a loosely coupled federation. We assume a federated system model that is based on a high-level requestor-server model <ref> [13] </ref>. For autonomy reasons, local systems may often restrict the operations that global transactions are allowed to invoke. For example, no airline, bank, or rental car agency allows other corporations to access and manipulate its data by means of SQL statements (not even with restricted access permissions and/or 4 views). <p> These include, for example, networks of travel agencies, the international interbank clearing system SWIFT, etc. We are investigating both the foundations and implementation issues of dealing with GTs and their co-existence with LTs within such a framework. Our approach is based on open nested transactions <ref> [13, 24] </ref>, which allows us to ensure semantics-based global serializability and atomicity, and, if desired, to relax these properties in a controlled manner [24]. <p> Subtransactions may be committed (i.e., their effects are made visible to other transactions) independently of the commit of the transaction root; therefore, this model is called the open nested transaction model <ref> [13, 3, 24] </ref>. In this model, a schedule is a set of transaction trees together with an execution order &lt; of the invoked operations (i.e., the nodes of the trees).
Reference: [14] <author> Levy, E., Korth, H.F., Silberschatz, A., </author> <title> A Theory of Relaxed Atomicity, </title> <booktitle> ACM PODC Conference, </booktitle> <year> 1991 </year>
Reference-contexts: Similar to relaxing com-mutativity towards compatibility, this definition of a compensating operation may be relaxed as follows (cf. also <ref> [14] </ref>). A subsequent operation invocation may have different return values if the observable differences are acceptable from an application point of view. For example, the cancelation of an order need not undo the possible restocking of inventory that was triggered by the order.
Reference: [15] <author> Muth, P., Rakow, T.C., Weikum, G., Brossler, P., Hasse, C., </author> <title> Semantic Concurrency Control in Object-Oriented Database Systems, </title> <booktitle> IEEE Data Engineering Conference, </booktitle> <year> 1993 </year>
Reference-contexts: More details on the foundations of our approach and some background material can be found in [7, 18, 19, 22, 24]; more details on the implementation issues can be found in <ref> [15, 17, 22, 23] </ref>. 2 Semantics-based Global Serializability We assume that a compatibility specification for the exported operations of an LDB, usually in the form of a table, is provided by the administration staff of the LDB. <p> The approach used to solve this problem is to treat GTs as open nested trans-actions only with respect to other GTs, and to treat them as closed nested transactions with respect to LTs (i.e., locks acquired by a subtransaction are retained by the parent) <ref> [15, 18] </ref>. A federated transaction management prototype is being built that incorporates several commercial DBMSs [17]. Messages at the native DML interface between the LDB server and its clients are intercepted, and fed into an additional layer of DML locking and logging on top of the LDB.
Reference: [16] <author> Raz, Y., </author> <title> The Principle of Commitment Ordering, </title> <booktitle> VLDB Conference, </booktitle> <year> 1992 </year>
Reference-contexts: There are two approaches to federated transaction management. The first approach is to rely on some common properties of the underlying LDBs. It has been shown that global serializability and atomicity, i.e., ACID guarantees for both GTs and LTs, are self-guaranteed if all LDBs ensure commit-order serializability <ref> [5, 16] </ref> and are able and willing to participate in a global two-phase commit. Note, however, that some of today's widely used DBMSs do not necessarily ensure commit-order serializability, since they make use of multiversion concurrency control protocols.
Reference: [17] <author> Schaad, W., Schek, H.-J., Weikum, G., </author> <title> Architecture and Implementation of a Federated Transaction Management Prototype, </title> <type> Technical Report, </type> <institution> Dept. of Computer Science, ETH Zurich, </institution> <year> 1993 </year>
Reference-contexts: More details on the foundations of our approach and some background material can be found in [7, 18, 19, 22, 24]; more details on the implementation issues can be found in <ref> [15, 17, 22, 23] </ref>. 2 Semantics-based Global Serializability We assume that a compatibility specification for the exported operations of an LDB, usually in the form of a table, is provided by the administration staff of the LDB. <p> A federated transaction management prototype is being built that incorporates several commercial DBMSs <ref> [17] </ref>. Messages at the native DML interface between the LDB server and its clients are intercepted, and fed into an additional layer of DML locking and logging on top of the LDB.
Reference: [18] <author> Schek, H.-J., Weikum, G., Schaad, W., </author> <title> A Multi-Level Transaction Approach to Federated DBMS Transaction Management, </title> <booktitle> International Workshop on Interoperability in Multidatabase Systems, </booktitle> <address> Kyoto, </address> <year> 1991 </year>
Reference-contexts: The rest of this synopsis discusses our semantics-based correctness model and gives a brief overview of a prototype that is being built within the COSMOS project at ETH Zurich. More details on the foundations of our approach and some background material can be found in <ref> [7, 18, 19, 22, 24] </ref>; more details on the implementation issues can be found in [15, 17, 22, 23]. 2 Semantics-based Global Serializability We assume that a compatibility specification for the exported operations of an LDB, usually in the form of a table, is provided by the administration staff of the <p> The approach used to solve this problem is to treat GTs as open nested trans-actions only with respect to other GTs, and to treat them as closed nested transactions with respect to LTs (i.e., locks acquired by a subtransaction are retained by the parent) <ref> [15, 18] </ref>. A federated transaction management prototype is being built that incorporates several commercial DBMSs [17]. Messages at the native DML interface between the LDB server and its clients are intercepted, and fed into an additional layer of DML locking and logging on top of the LDB.
Reference: [19] <author> Schek, H.-J., Weikum, G., Ye, H., </author> <title> Towards a Unified Theory of Concurrency Control and Recovery, </title> <booktitle> ACM PODS Conference, </booktitle> <year> 1993 </year>
Reference-contexts: The rest of this synopsis discusses our semantics-based correctness model and gives a brief overview of a prototype that is being built within the COSMOS project at ETH Zurich. More details on the foundations of our approach and some background material can be found in <ref> [7, 18, 19, 22, 24] </ref>; more details on the implementation issues can be found in [15, 17, 22, 23]. 2 Semantics-based Global Serializability We assume that a compatibility specification for the exported operations of an LDB, usually in the form of a table, is provided by the administration staff of the <p> Schedules are augmented by making all recovery-related operations explicit operations. Compensating operations, including their children at the DML level, and the additional undo operations of the LTs are added to the corresponding transaction trees <ref> [3, 19, 22] </ref>.
Reference: [20] <author> Veijalainen, J., Eliassen, F., Holtkamp, B., </author> <title> The S-Transaction Model, </title> <booktitle> in [8] </booktitle>
Reference-contexts: This notion of exported high-level operations corresponds to the "steps" of nested sagas [10] and ConTracts [21] (cf. also [6]). Many real-life examples of multidatabase interoperability seem to be based on such a high-level requestor-server model <ref> [1, 11, 12, 20] </ref>. These include, for example, networks of travel agencies, the international interbank clearing system SWIFT, etc. We are investigating both the foundations and implementation issues of dealing with GTs and their co-existence with LTs within such a framework.
Reference: [21] <author> Waechter, H., Reuter, A., </author> <title> The ConTract Model, </title> <booktitle> in [8] </booktitle>
Reference-contexts: Rather an LDB "exports" a well-defined set of high-level operations that may be invoked by global transactions. This notion of exported high-level operations corresponds to the "steps" of nested sagas [10] and ConTracts <ref> [21] </ref> (cf. also [6]). Many real-life examples of multidatabase interoperability seem to be based on such a high-level requestor-server model [1, 11, 12, 20]. These include, for example, networks of travel agencies, the international interbank clearing system SWIFT, etc.
Reference: [22] <author> Weikum, G., </author> <title> Principles and Realization Strategies of Multilevel Transaction Management, </title> <journal> ACM Trans. on Database Systems, 16(1991),1 </journal>
Reference-contexts: The rest of this synopsis discusses our semantics-based correctness model and gives a brief overview of a prototype that is being built within the COSMOS project at ETH Zurich. More details on the foundations of our approach and some background material can be found in <ref> [7, 18, 19, 22, 24] </ref>; more details on the implementation issues can be found in [15, 17, 22, 23]. 2 Semantics-based Global Serializability We assume that a compatibility specification for the exported operations of an LDB, usually in the form of a table, is provided by the administration staff of the <p> More details on the foundations of our approach and some background material can be found in [7, 18, 19, 22, 24]; more details on the implementation issues can be found in <ref> [15, 17, 22, 23] </ref>. 2 Semantics-based Global Serializability We assume that a compatibility specification for the exported operations of an LDB, usually in the form of a table, is provided by the administration staff of the LDB. <p> Schedules are augmented by making all recovery-related operations explicit operations. Compensating operations, including their children at the DML level, and the additional undo operations of the LTs are added to the corresponding transaction trees <ref> [3, 19, 22] </ref>. <p> This protocol follows the implementation techniques for multilevel transactions <ref> [22, 23] </ref>; however, an additional problem arises in the presence of LTs. Since LTs may invoke native DML statements directly, LTs may interfere 6 incorrectly with GTs.
Reference: [23] <author> Weikum, G., Hasse, C., </author> <title> Multi-Level Transaction Mangement for Complex Objects: Implementation, Performance, Parallelism, </title> <note> to appear in: VLDB Journal, </note> <year> 1993 </year>
Reference-contexts: More details on the foundations of our approach and some background material can be found in [7, 18, 19, 22, 24]; more details on the implementation issues can be found in <ref> [15, 17, 22, 23] </ref>. 2 Semantics-based Global Serializability We assume that a compatibility specification for the exported operations of an LDB, usually in the form of a table, is provided by the administration staff of the LDB. <p> This protocol follows the implementation techniques for multilevel transactions <ref> [22, 23] </ref>; however, an additional problem arises in the presence of LTs. Since LTs may invoke native DML statements directly, LTs may interfere 6 incorrectly with GTs.

Reference: [1] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1987. </year>
Reference-contexts: This notion of exported high-level operations corresponds to the "steps" of nested sagas [10] and ConTracts [21] (cf. also [6]). Many real-life examples of multidatabase interoperability seem to be based on such a high-level requestor-server model <ref> [1, 11, 12, 20] </ref>. These include, for example, networks of travel agencies, the international interbank clearing system SWIFT, etc. We are investigating both the foundations and implementation issues of dealing with GTs and their co-existence with LTs within such a framework.
Reference: [2] <author> Y. Breitbart, Garcia-Molina H., and A. Silberschatz. </author> <title> Overview of multidatabase transaction management. </title> <journal> VLDB Journal, </journal> <volume> 1(2), </volume> <year> 1992. </year>
Reference-contexts: In this model, a schedule is a set of transaction trees together with an execution order &lt; of the invoked operations (i.e., the nodes of the trees). A schedule is called semantically serializable if it is equivalent to a serial execution of the transaction roots in the following sense <ref> [2] </ref>: a serial execution can be stepwise constructed from the original execution by * Rule 1 (compatibility of operations): exchanging the order of two &lt;-ordered and (with respect to &lt;) adjacent subtrees the roots of which are compatible operation invocations and belong to different transaction trees, and * Rule 2 (reduction
Reference: [3] <author> H. Garcia-Molina. </author> <title> Using semantic knowledge for transaction processing in a distributed database. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(2) </volume> <pages> 186-213, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: Subtransactions may be committed (i.e., their effects are made visible to other transactions) independently of the commit of the transaction root; therefore, this model is called the open nested transaction model <ref> [13, 3, 24] </ref>. In this model, a schedule is a set of transaction trees together with an execution order &lt; of the invoked operations (i.e., the nodes of the trees). <p> Schedules are augmented by making all recovery-related operations explicit operations. Compensating operations, including their children at the DML level, and the additional undo operations of the LTs are added to the corresponding transaction trees <ref> [3, 19, 22] </ref>.
Reference: [4] <author> H. F. Korth, W. Kim, and F. Bancilhon. </author> <title> On long duration CAD transactions. </title> <journal> Information Sciences, </journal> <volume> 46 </volume> <pages> 73-107, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: In the past few years, substantial research has been carried out on this problem of federated transaction management. The following general model of a federated database system has evolved from this research <ref> [4] </ref>. A federated database system is composed of a number of pre-existing local databases (LDBs), which are managed by the same or by different database systems. An LDB is a collection of data and pre-existing applications. The applications run local transactions (LTs) that access only the LDB.
Reference: [5] <author> S. Mehrotra, R. Rastogi, H. F. Korth, and A. Silberschatz. </author> <title> Non-serializable executions in heterogeneous distributed database systems. </title> <booktitle> In Proceedings of the First International Conference on Parallel and Distibuted Information Systems, </booktitle> <address> Miami Beach, Florida, </address> <year> 1991. </year>
Reference-contexts: There are two approaches to federated transaction management. The first approach is to rely on some common properties of the underlying LDBs. It has been shown that global serializability and atomicity, i.e., ACID guarantees for both GTs and LTs, are self-guaranteed if all LDBs ensure commit-order serializability <ref> [5, 16] </ref> and are able and willing to participate in a global two-phase commit. Note, however, that some of today's widely used DBMSs do not necessarily ensure commit-order serializability, since they make use of multiversion concurrency control protocols.
Reference: [6] <author> S. Mehrotra, R. Rastogi, H. F. Korth, and A. Silberschatz. </author> <title> Relaxing serializability in multidatabase systems. </title> <booktitle> In Proceedings of the Second International Workshop on Research Issues on Data Engineering: Transaction and Query Processing, </booktitle> <address> Mission Palms, Arizona, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: Rather an LDB "exports" a well-defined set of high-level operations that may be invoked by global transactions. This notion of exported high-level operations corresponds to the "steps" of nested sagas [10] and ConTracts [21] (cf. also <ref> [6] </ref>). Many real-life examples of multidatabase interoperability seem to be based on such a high-level requestor-server model [1, 11, 12, 20]. These include, for example, networks of travel agencies, the international interbank clearing system SWIFT, etc.
Reference: [7] <author> R. Rastogi, H. F. Korth, and A. Silberschatz. </author> <title> Using semantics of operations to address waits in database systems. </title> <type> Technical Report TR-92-45, </type> <institution> Department of Computer Science, University of Texas at Austin, </institution> <year> 1992. </year>
Reference-contexts: The rest of this synopsis discusses our semantics-based correctness model and gives a brief overview of a prototype that is being built within the COSMOS project at ETH Zurich. More details on the foundations of our approach and some background material can be found in <ref> [7, 18, 19, 22, 24] </ref>; more details on the implementation issues can be found in [15, 17, 22, 23]. 2 Semantics-based Global Serializability We assume that a compatibility specification for the exported operations of an LDB, usually in the form of a table, is provided by the administration staff of the

Reference: [BGMP92] <author> D. Barbara, H. Garcia-Molina, and D. Porter. </author> <title> The management of probabilistic data. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 4(5) </volume> <pages> 487-502, </pages> <month> October </month> <year> 1992. </year>
Reference: [BP93] <author> R. Barga and C. Pu. </author> <title> Handling inconsistency in scientific data management: An approach based on intervals. </title> <type> Technical Report OGI-CSE-93-005, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <year> 1993. </year>
Reference: [DP93] <author> P. Drew and C. Pu. </author> <title> Asynchronous consistency restoration under epsilon serializability. </title> <type> Technical Report OGI-CSE-93-004, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <year> 1993. </year> <note> Also available as tech. report HKUST-CS93-002, </note> <institution> Department of Computer Science, Hong Kong University of Science and Technology. </institution>
Reference: [Lip79] <author> W. Lipski. </author> <title> On semantic issues connected with incomplete information databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 4(3) </volume> <pages> 262-296, </pages> <month> September </month> <year> 1979. </year>
Reference: [PHK + 93] <author> C. Pu, W.W. Hseush, G.E. Kaiser, P. S. Yu, and K.L. Wu. </author> <title> Distributed divergence control algorithms for epsilon serializability. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Distributed Computing Systems, </booktitle> <address> Pittsburgh, </address> <month> May </month> <year> 1993. </year>
Reference: [PL91] <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 377-386, </pages> <address> Denver, </address> <month> May </month> <year> 1991. </year>
Reference: [SMF90] <author> S. Shenoi, A. Melton, and L.T. Fan. </author> <title> An equivalence classes model of fuzzy relational databases. </title> <journal> Fuzzy Sets and Systems, </journal> <volume> 38 </volume> <pages> 153-170, </pages> <year> 1990. </year>

Reference: [1] <author> Bernstein, P. A., Hadzilacos, V., and Goodman, N. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1987. </year>
Reference-contexts: This notion of exported high-level operations corresponds to the "steps" of nested sagas [10] and ConTracts [21] (cf. also [6]). Many real-life examples of multidatabase interoperability seem to be based on such a high-level requestor-server model <ref> [1, 11, 12, 20] </ref>. These include, for example, networks of travel agencies, the international interbank clearing system SWIFT, etc. We are investigating both the foundations and implementation issues of dealing with GTs and their co-existence with LTs within such a framework.
Reference: [2] <author> Chrysanthis, P. K. and Ramamritham, K. </author> <title> ACTA: A Framework for Specifying and Reasoning about Transaction Structure and Behavior. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 194-203, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: In this model, a schedule is a set of transaction trees together with an execution order &lt; of the invoked operations (i.e., the nodes of the trees). A schedule is called semantically serializable if it is equivalent to a serial execution of the transaction roots in the following sense <ref> [2] </ref>: a serial execution can be stepwise constructed from the original execution by * Rule 1 (compatibility of operations): exchanging the order of two &lt;-ordered and (with respect to &lt;) adjacent subtrees the roots of which are compatible operation invocations and belong to different transaction trees, and * Rule 2 (reduction
Reference: [3] <author> Chrysanthis, P. K. </author> <title> ACTA, A Framework for Modeling and Reasoning about Extended Transactions. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <address> Amherst, MA, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Subtransactions may be committed (i.e., their effects are made visible to other transactions) independently of the commit of the transaction root; therefore, this model is called the open nested transaction model <ref> [13, 3, 24] </ref>. In this model, a schedule is a set of transaction trees together with an execution order &lt; of the invoked operations (i.e., the nodes of the trees). <p> Schedules are augmented by making all recovery-related operations explicit operations. Compensating operations, including their children at the DML level, and the additional undo operations of the LTs are added to the corresponding transaction trees <ref> [3, 19, 22] </ref>.
Reference: [4] <author> Chrysanthis, P. K. and Ramamritham, K. </author> <title> Synthesis of Extended Transaction Models using ACTA. </title> <note> Submitted for publication, </note> <month> April </month> <year> 1992. </year>
Reference-contexts: In the past few years, substantial research has been carried out on this problem of federated transaction management. The following general model of a federated database system has evolved from this research <ref> [4] </ref>. A federated database system is composed of a number of pre-existing local databases (LDBs), which are managed by the same or by different database systems. An LDB is a collection of data and pre-existing applications. The applications run local transactions (LTs) that access only the LDB.
Reference: [5] <author> Moss, J. E. B. </author> <title> Nested Transactions: An approach to reliable distributed computing. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <address> Cambridge, MA, </address> <month> April </month> <year> 1981. </year>
Reference-contexts: There are two approaches to federated transaction management. The first approach is to rely on some common properties of the underlying LDBs. It has been shown that global serializability and atomicity, i.e., ACID guarantees for both GTs and LTs, are self-guaranteed if all LDBs ensure commit-order serializability <ref> [5, 16] </ref> and are able and willing to participate in a global two-phase commit. Note, however, that some of today's widely used DBMSs do not necessarily ensure commit-order serializability, since they make use of multiversion concurrency control protocols.

Reference: [1] <author> Gray, J., Reuter, A., </author> <title> Transaction Processing: Concepts and Techniques, </title> <publisher> Morgan Kaufman, </publisher> <year> 1992. </year>
Reference-contexts: This notion of exported high-level operations corresponds to the "steps" of nested sagas [10] and ConTracts [21] (cf. also [6]). Many real-life examples of multidatabase interoperability seem to be based on such a high-level requestor-server model <ref> [1, 11, 12, 20] </ref>. These include, for example, networks of travel agencies, the international interbank clearing system SWIFT, etc. We are investigating both the foundations and implementation issues of dealing with GTs and their co-existence with LTs within such a framework.
Reference: [2] <author> Klein, J., </author> <title> Advanced Rule Drived Transaction Management, </title> <booktitle> IEEE COMPCON, </booktitle> <month> February </month> <year> 1991. </year>
Reference-contexts: In this model, a schedule is a set of transaction trees together with an execution order &lt; of the invoked operations (i.e., the nodes of the trees). A schedule is called semantically serializable if it is equivalent to a serial execution of the transaction roots in the following sense <ref> [2] </ref>: a serial execution can be stepwise constructed from the original execution by * Rule 1 (compatibility of operations): exchanging the order of two &lt;-ordered and (with respect to &lt;) adjacent subtrees the roots of which are compatible operation invocations and belong to different transaction trees, and * Rule 2 (reduction
Reference: [3] <author> Laing, W., Johnson, J.E., Landau, R.V., </author> <title> Transaction Management Support in the VMS Operating System Kernal, </title> <journal> Digital Technical Journal, </journal> <month> Winter </month> <year> 1991. </year>
Reference-contexts: Subtransactions may be committed (i.e., their effects are made visible to other transactions) independently of the commit of the transaction root; therefore, this model is called the open nested transaction model <ref> [13, 3, 24] </ref>. In this model, a schedule is a set of transaction trees together with an execution order &lt; of the invoked operations (i.e., the nodes of the trees). <p> Schedules are augmented by making all recovery-related operations explicit operations. Compensating operations, including their children at the DML level, and the additional undo operations of the LTs are added to the corresponding transaction trees <ref> [3, 19, 22] </ref>.
Reference: [4] <author> Upton IV, Francis, </author> <title> OSI Distributed Transaction Processing: An Overview, </title> <booktitle> International High Performance Transaction Processing Workshop, </booktitle> <year> 1991. </year>
Reference-contexts: In the past few years, substantial research has been carried out on this problem of federated transaction management. The following general model of a federated database system has evolved from this research <ref> [4] </ref>. A federated database system is composed of a number of pre-existing local databases (LDBs), which are managed by the same or by different database systems. An LDB is a collection of data and pre-existing applications. The applications run local transactions (LTs) that access only the LDB.

Reference: [CR92] <author> P. Chrysanthis and K. Ramamritham, </author> <title> "ACTA: The SAGA Continues", Advanced Transaction Models for New Applications, </title> <editor> A. Elmagarmid (ed.), </editor> <publisher> Morgan-Kaufmann, </publisher> <year> 1992. </year>
Reference: [DHL90] <author> U. Dayal, M. Hsu, and R. Ladin, </author> <title> "Organizing Long-Running Activities with Triggers and Transactions", </title> <booktitle> Proc. of the ACM SIGMOD Conf. on Management of Data, </booktitle> <year> 1990. </year>
Reference: [GH92] <author> D. Georgakopoulos and M. Hornick, </author> <title> An Environment for the Specification and Management of Extended Transactions and Workflows in DOMS, </title> <institution> TR-0218-09-92-165, GTE Laboratories Incorporated, </institution> <month> October </month> <year> 1992. </year>
Reference: [GRS92] <author> D. Georgakopoulos, M. Rusinkiewicz, and A. Sheth, </author> <title> "Using Ticket-based Methods to Enforce the Serializability of Multidatabase Transactions", </title> <note> to appear in IEEE Transactions on Data and Knowledge Engineering. </note>

Reference: [BCD + 93] <author> O. A. Bukhres, J. Chen, W. Du, A. K. Elmagarmid, and R. Pezzoli. </author> <title> InterBase : An Execution Environment for Global Applications over Distributed, Heterogeneous, </title> <booktitle> and Autonomous Software Systems. IEEE Computer, </booktitle> <month> August </month> <year> 1993. </year> <note> (to appear). </note>
Reference: [CBE93] <author> Jiansan Chen, Omran A. Bukhres, and Ahmed K. Elmagarmid. </author> <title> IPL: A Multidatabase Transaction Specification Language. </title> <booktitle> In Proc. of the 13th International Conference on Distributed Computing Systems, </booktitle> <address> Pittsburgh, PA, </address> <month> May </month> <year> 1993. </year>
Reference: [ELLR90] <author> A. Elmagarmid, Y. Leu, W. Litwin, and M. Rusinkiewicz. </author> <title> A Multidatabase Transaction Model for InterBase. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <pages> pages 507-581, </pages> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference: [Elm92] <editor> Ahmed K. Elmagarmid, editor. </editor> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1992. </year>
Reference: [KPE91] <author> E. Kuehn, F. Puntigam, and A. Elmagarmid. </author> <title> An Execution Model for Distributed Database Transactions and Its Implementation in VPL. </title> <booktitle> In Proc. of Extending Database Technology, </booktitle> <year> 1991. </year>
Reference: [Mul92] <author> James G. Mullen. FBASE: </author> <title> A federated objectbase system. </title> <journal> International Journal of Computer Systems Science and Engineering, </journal> <volume> 7(2) </volume> <pages> 91-99, </pages> <month> April </month> <year> 1992. </year> <title> 1 The execution step of a subtransaction is executed first. Its confirm step or undo step, if defined, will be executed when the execution of the IPL program is committed or aborted from its prepare-to-commit state, </title> <journal> respectively. </journal> <volume> 31 </volume>
References-found: 56

