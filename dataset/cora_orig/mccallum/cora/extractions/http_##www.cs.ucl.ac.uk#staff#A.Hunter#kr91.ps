URL: http://www.cs.ucl.ac.uk/staff/A.Hunter/kr91.ps
Refering-URL: http://www.cs.ucl.ac.uk/staff/A.Hunter/papers.html
Root-URL: http://www.cs.ucl.ac.uk
Email: fhoward,michaelg@cs.man.ac.uk  fdmg,abhg@doc.ic.ac.uk  
Title: Meta-Reasoning in Executable Temporal Logic  
Author: Howard Barringer Michael Fisher Dov Gabbay Anthony Hunter 
Address: Oxford Road, Manchester M13 9PL, UK.  London SW7 2BZ, UK.  
Affiliation: Department of Computer Science, University of Manchester,  Department of Computing, Imperial College of Science, Technology and Medicine, 180 Queen's Gate,  
Abstract: Temporal logic can be used as a programming language. If temporal formulae are represented in the form of an implication where the antecedent refers to the past, and the consequent refers to the present and the future, then formulae that have their antecedent satisfied can be satisfied by considering the consequent as an imperative to be obeyed. Such a language becomes a natural alternative to programming languages, such as Prolog, for temporal reasoning. Here, the approach is extended to include an executable meta-language. This is of importance in developing interpretation, debugging, loop-checking, and simulation tools, and provides a representation for providing control knowledge in the execution of planning and scheduling programs. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Abadi, M. </author> <year> (1987). </year> <title> Temporal-Logic Theorem Proving. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Stanford University. </institution>
Reference: <author> Allen, J. F. and Hayes, P. J. </author> <year> (1985). </year> <title> A Common Sense Theory of Time. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 528-531, </pages> <address> Los Angeles, California. </address>
Reference: <author> Barringer, H., Fisher, M., Gabbay, D., Gough, G., and Owens, R. </author> <year> (1989). </year> <title> METATEM: A Framework for Programming in Temporal Logic. </title> <booktitle> In REX Workshop on Stepwise Refinement of Distributed Systems: Models, Formalisms, Correctness (LNCS Volume 430), </booktitle> <pages> pages 94-129, </pages> <address> Mook, Netherlands. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: A METATEM execution mechanism has been defined for temporal logic programs that returns a model of the program if the program is satisfiable <ref> (Barringer et al., 1989) </ref>. This result is conditional on the program comprising only component propositions. If environment atoms are introduced into a program, then branching time logic may be required in order to represent all possible environments (Clarke and Emerson, 1982; Pnueli and Rosner, 1989). <p> The executable temporal logic considered in this report is one of the family of METATEM languages <ref> (Barringer et al., 1989) </ref>. Other members of this family have been implemented (Fisher, 1989; Owens, 1990) and such languages have been used successfully in large case studies, for example the development of a PAYE (`Pay As You Earn') tax system (Torsun and Manning, 1990). <p> In this paper, we focus on an executable meta-language. We indicate why a meta-language is of interest, outline the logical basis of a meta-language for executable temporal logic, and consider applications in knowledge representation and reasoning. 2 Why Use A Meta-Language? In <ref> (Barringer et al., 1989) </ref>, we introduced propositional and first-order temporal logics (PML and FML) as instances of METATEM. We suggested that a rather different logic is required to carry out meta-level reasoning within METATEM.
Reference: <author> Caspi, P., Pilaud, D., Halbwachs, N., and Plaice, J. A. </author> <year> (1987). </year> <title> LUSTRE: A Declarative Language for Programming Synchronous Systems. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on the Principles of Programming Languages, </booktitle> <pages> pages 178-188, </pages> <address> Munich, West Germany. </address>
Reference: <author> Clarke, E. M. and Emerson, E. A. </author> <year> (1982). </year> <title> Using Branching Time Temporal Logic to Synthesise Synchronisa-tion Skeletons. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 2 </volume> <pages> 241-266. </pages>
Reference: <author> Fisher, M. </author> <year> (1989). </year> <title> Implementing a Prototype METATEM Interpreter. </title> <type> SPEC Project Report, </type> <institution> Department of Computer Science, University of Manchester. </institution>
Reference: <author> Fisher, M. </author> <year> (1990). </year> <title> Meta-Programming in METATEM. </title> <type> Temple group report (draft), </type> <institution> Department of Computer Science, University of Manchester. </institution>
Reference-contexts: In the case of METATEM, such a logic, 2 Here, we use a discrete model of time and use ` v ' as the operator representing `at the last moment in time'. called FML * , based on quoting has been developed <ref> (Fisher, 1990) </ref>. The questions of the reduction of `naming' terms to their constituent parts, the quoting of variables, and the scope of quantification are discussed elsewhere (Per-lis, 1985; Fisher, 1990). Furthermore, the FML * approach corresponds to the ground representation described in (Hill and Lloyd, 1988).
Reference: <author> Fujita, M., Kono, S., Tanaka, T., and Moto-oka, T. </author> <year> (1986). </year> <title> Tokio: Logic Programming Language based on Temporal Logic and its compilation into Prolog. </title> <booktitle> In 3rd International Conference on Logic Programming (LNCS Volume 225), </booktitle> <pages> pages 695-708, </pages> <address> London. </address> <publisher> Springer-Verlag. </publisher>
Reference: <author> Gabbay, D. </author> <year> (1989). </year> <title> Declarative Past and Imperative Future: Executable Temporal Logic for Interactive Systems. </title> <editor> In Banieqbal, B., Barringer, H., and Pnueli, A., editors, </editor> <booktitle> Proceedings of Colloquium on Temporal Logic in Specification (LNCS Volume 398), </booktitle> <pages> pages 402-450, </pages> <address> Altrincham, U.K. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: If any of the necessary steps include an action in the future then this instruction must passed on to the future. Executable temporal logics of this form that have been developed include USF <ref> (Gabbay, 1989) </ref> and METATEM (Bar-ringer et al., 1989; Fisher, 1989). Such logics are based on US logic 1 and incorporate a notion of interaction with the environment of the program. <p> There may be more than one valid choice at each time, and the actual choice may vary over time. All formulae of propositional and first-order US-logic can be rewritten into the above executable form <ref> (Gabbay, 1989) </ref>, although the executable form is not, in general, unique, i.e. a specification can be written into more than one equivalent form. For the propositional case, the execution is decidable, i.e. if a US-logic program is satisfiable, then a model for the program can be found through execution.
Reference: <author> Hattori, T., Nakajima, R., Sakuragawa, T., Niide, N., and Takenaka, K. </author> <year> (1986). </year> <title> RACCO: a modal-logic programming language for writing models of real-time process-control systems. </title> <type> Technical report, </type> <institution> Research Institute for Mathematical Sciences, Kyoto University. </institution>
Reference: <author> Hill, P. M. and Lloyd, J. W. </author> <year> (1988). </year> <title> Analysis of Meta-Programs. </title> <booktitle> In Proceedings of the Workshop on Meta-Programming in Logic Programming, </booktitle> <pages> pages 27-42, </pages> <institution> University of Bristol, U.K. </institution>
Reference-contexts: The questions of the reduction of `naming' terms to their constituent parts, the quoting of variables, and the scope of quantification are discussed elsewhere (Per-lis, 1985; Fisher, 1990). Furthermore, the FML * approach corresponds to the ground representation described in <ref> (Hill and Lloyd, 1988) </ref>. In this report we will present an alternative approach which unifies object-level and meta-level into a single language without using explicit quoting. In our logic, called Meta-METATEM Logic, the set of terms is partitioned into object-level terms and meta-level terms. <p> In MML the domain over which terms range has been extended to incorporate the names of object-level formulae. As we are using MML as its own meta-language, this domain includes the names of all MML formulae. We use a typed representation <ref> (Hill and Lloyd, 1988) </ref> for the meta-language, and partition variables into two sorts, o, representing object-level terms, and m, representing meta-level terms. The terms of MML can thus be partitioned into two sets: L ot the set of object terms.
Reference: <author> Moszkowski, B. </author> <year> (1986). </year> <title> Executing Temporal Logic Programs. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, U.K. </address>
Reference: <author> Nilsson, U. </author> <title> and Mauszynski (1990). Logic, Programming and Prolog. </title> <publisher> John Wiley and Sons, </publisher> <address> Chichester, U.K.,. </address>
Reference: <author> Owens, R. P. </author> <year> (1990). </year> <title> Using TEQUEL. </title> <type> Internal Report, </type> <institution> Department of Computing, Imperial College. </institution>
Reference: <author> Perlis, D. </author> <year> (1985). </year> <title> Languages with Self Reference I: Foundations. </title> <journal> Artificial Intelligence, </journal> <volume> 25 </volume> <pages> 301-322. </pages>
Reference-contexts: There are several standard methods for developing meta-languages. One of the most widespread is the use of quoting. This technique, proposed by Frege and further developed by many others <ref> (Perlis, 1985) </ref>, gives a way of producing a term in the logic that represents or `names' a formula in the logic. Thus, if we have the formula p (x)q (x), a new term representing the formula is given by p (x)q (x).
Reference: <author> Pnueli, A. </author> <year> (1977). </year> <title> The Temporal Logic of Programs. </title> <booktitle> In Proceedings of the Eighteenth Symposium on the Foundations of Computer Science, </booktitle> <address> Providence. </address>
Reference: <author> Pnueli, A. and Rosner, R. </author> <year> (1989). </year> <title> On the Synthesis of a Reactive Module. </title> <booktitle> In Proceedings of the 16th ACM Symposium on the Principles of Programming Languages, </booktitle> <pages> pages 179-190. </pages>
Reference: <author> Torsun, I. S. and Manning, K. J. </author> <year> (1990). </year> <title> Execution and Application of Temporal Modal Logic. </title> <type> Internal Report, </type> <institution> Department of Computing, University of Brad-ford, </institution> <note> U.K. </note> <author> van Harmelen, F. </author> <year> (1988). </year> <title> A Classification of Meta-Level Architectures. </title> <booktitle> In Proceedings of the Workshop on Meta-Programming in Logic Programming, </booktitle> <pages> pages 81-94, </pages> <institution> University of Bristol, U.K. </institution>
Reference-contexts: Other members of this family have been implemented (Fisher, 1989; Owens, 1990) and such languages have been used successfully in large case studies, for example the development of a PAYE (`Pay As You Earn') tax system <ref> (Torsun and Manning, 1990) </ref>. In this paper, we focus on an executable meta-language.
Reference: <author> Vardi, M. Y. and Wolper, P. </author> <year> (1986). </year> <title> Automata-theoretic Techniques for Modal Logics of Programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 32(2) </volume> <pages> 183-219. </pages>
Reference-contexts: If the specification is being executed without interacting with its environment, the value n can be extracted from the specification itself as the upper bound on the size of the automaton representing models of the specification <ref> (Vardi and Wolper, 1986) </ref> 5 .
References-found: 19

