URL: ftp://ftp.cs.uchicago.edu/pub/publications/tech-reports/TR-90-13.ps
Refering-URL: http://cs-www.uchicago.edu/publications/tech-reports/
Root-URL: 
Title: Preliminary Notes on Version 4.1 of the Equational Compiler  
Author: Linda Sellie and David J. Sherman 
Note: For additional copies, write:  
Date: 90-013, January 9, 1990  
Address: Chicago  1100 E. 58th Street Chicago, Illinois 60637 U.S.A.  
Affiliation: University of  Department of Computer Science University of Chicago  
Pubnum: Technical Report  
Abstract-found: 0
Intro-found: 1
Reference: [ASU85] <author> Alfred V. Aho, Ravi Sethi, and Jeffery D. </author> <title> Ullmann. </title> <booktitle> Compilers, Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1985. </year>
Reference-contexts: The first phase decomposes the program into a set of basic blocks, finds various pieces of useful information such as the size of the symbol table and the names of the entry points, and expands the multiway tests into computed jumps (see sections 3.9 of <ref> [ASU85] </ref>). The second phase performs register optimization and analysis, collapsing the space of register names and performing a register lifetime analysis for the reference counting routines.
Reference: [HO82] <author> Christoph Hoffmann and Michael J. O'Donnell. </author> <title> Programming with equations. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <pages> pages 83-112, </pages> <year> 1982. </year>
Reference: [O'D85] <author> Michael J. O'Donnell. </author> <title> Equational Logic as a Programming Language. </title> <publisher> MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: (defaults to a.out) -s x use programming syntax x (defaults to LISP.M) -ci stop compilation after step i, where i 2 f1; 2; 3; 4; 5g -O turn partial-evaluation optimizations on The source language for equational programs has remained unchanged from the versions 2.1 and 3.1, and is documented in <ref> [O'D85] </ref>. The programming syntax specified with the -s option governs the notation used in the program for terms, and there is a programming syntax corresponding to each general-purpose I/O syntactic shell (see section 3.6). <p> Two are for specifying I/O options, and one is for program debugging. These options are summarized in figure 2. Equational programs read and write terms in the so-called abstract syntax described in <ref> [O'D85] </ref>. The system has a number of syntactic shells which convert between this abstract syntax and human-readable form (see section 3.6). <p> These steps and the files 1 See section 4.4, page 18, of <ref> [O'D85] </ref>. 6 that contribute to it are shown in figure 4. The first three steps are per-formed by library programs that perform the syntactic processing, the EM code generation, and the compilation to C code. <p> This automaton is represented by an EM program, instead of by an explicit state diagram. After this step the compilation process could be halted and the resulting EM program could be run by an interpreter. The pattern-matching automaton is generated based on the flattened pattern-matching method described in <ref> [O'D85] </ref>. This method works for the class of strongly left-sequential sets of equations. In fact Strandh demonstrated that EM code works for the larger class of forward-branching equational programs, and we hope to support this larger class in the near future. <p> These optimizations are basically an expansion and specialization of the pattern-matching automaton, and are performed by eqem in a second, optimization, pass. 4.3 Compilation: eqcom 2 See section 20.3 of <ref> [O'D85] </ref>. 7 EM structural transformation - register analysis code generation - C We compile the EM program into C code, using the C code as a high-level assembly code. This technique has several advantages over compiling to a specific machine code.
Reference: [RS90] <author> Samuel A. Rebelsky and David J. Sherman. </author> <title> Developing an interactive interface for equational logic programs. </title> <type> Technical Report 90-005, </type> <institution> University of Chicago Department of Computer Science, </institution> <month> January </month> <year> 1990. </year>
Reference-contexts: Recent work on the project has led to insight into the efficient compilation of equational logic using pattern-matching [HO82][Str88], run-time optimizations of term-rewriting systems [She90], and an interesting generalization of FIFO pipes to tree-like structure <ref> [RS90] </ref>. This paper is a report on the current status of the equational compiler, which is now in version 4.1. This version represents a nearly-total rewrite of fl Partially funded by NSF grant CCR 8805503. 1 the system, incorporating many new ideas generated by the group. <p> Specifically, a tabular method called Lazy Directed 9 Congruence Closure that we have developed (see [She90]) is being added to the run-time environment. * We are also currently working on an integration of the Tour Interface (a protocol developed by Sam Rebelsky for lazy communication of tree structure; see <ref> [RS90] </ref>) with the run-time library; this would supplant the left-right output strategy with an interface driven by the user's browsing requests. 7 Acknowledgements We would like to thank Bill Anderson for his help with some of the coding.
Reference: [She90] <author> David J. Sherman. </author> <title> Lazy directed congruence closure. </title> <type> Technical Report 90-028, </type> <institution> University of Chicago Department of Computer Science, </institution> <year> 1990. </year>
Reference-contexts: Recent work on the project has led to insight into the efficient compilation of equational logic using pattern-matching [HO82][Str88], run-time optimizations of term-rewriting systems <ref> [She90] </ref>, and an interesting generalization of FIFO pipes to tree-like structure [RS90]. This paper is a report on the current status of the equational compiler, which is now in version 4.1. <p> Specifically, a tabular method called Lazy Directed 9 Congruence Closure that we have developed (see <ref> [She90] </ref>) is being added to the run-time environment. * We are also currently working on an integration of the Tour Interface (a protocol developed by Sam Rebelsky for lazy communication of tree structure; see [RS90]) with the run-time library; this would supplant the left-right output strategy with an interface driven by
Reference: [Str88] <author> Robert I. Strandh. </author> <title> Compiling Equational Programs into Efficient Machine Code. </title> <type> PhD thesis, </type> <institution> Johns Hopkins University, Baltimore, Maryland, </institution> <year> 1988. </year> <month> 33 </month>
Reference-contexts: We were willing to sacrifice some of the performance advantages of compiling to native assembly code. Another goal was to incorporate the ideas developed by Robert Strandh in his dissertation <ref> [Str88] </ref>. Strandh investigated a number of compiler optimizations, including code optimization using lazy evaluation and source-level program modifications. Strandh offered strong evidence that a compiler using his techniques ran faster than compiled LISP and within a factor of two of compiled C for certain problems.
References-found: 6

