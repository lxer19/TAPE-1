URL: http://www.cs.ucsb.edu/~kienle/j2s.ps
Refering-URL: http://www.cs.ucsb.edu/~kienle/prj/prj.html
Root-URL: http://www.cs.ucsb.edu
Email: kienle@cs.uscb.edu  
Title: A SUIF Java Compiler  
Author: Holger M. Kienle 
Abstract: Technical Report TRCS98-18 August, 1998 
Abstract-found: 1
Intro-found: 1
Reference: [AD97] <author> Ole Agesen and David Detlefs. </author> <title> Finding references in Java stacks. </title> <booktitle> OOPSLA '97 Workshop on Garbage Collection and Memory Management, </booktitle> <month> August </month> <year> 1997. </year>
Reference: [Ada89] <author> Douglas Adams. </author> <title> The Hitchhiker's Guide to the Galaxy, 10th Anniversary Edition. </title> <publisher> Harmony Books, </publisher> <year> 1989. </year>
Reference: [ADM98] <author> Ole Agesen, David Detlefs, and J. Eliot Moss. </author> <title> Garbage collection and local variable type-precision and liveness in Java virtual machines. </title> <booktitle> PLDI '98, </booktitle> <month> June </month> <year> 1998. </year>
Reference: [AFM97] <author> Ole Agesen, Stephen Freud, and John C. Mitchell. </author> <title> Adding type parameterization to Java. </title> <booktitle> OOPSLA '97, </booktitle> <pages> pages 49-65, </pages> <month> October </month> <year> 1997. </year>
Reference: [AH95] <author> Ole Agesen and Urs Holzle. </author> <title> Type feedback vs. concrete type analysis: A comparison of optimization techniques for object-oriented languages. </title> <booktitle> OOPSLA '95, </booktitle> <pages> pages 91-107, </pages> <month> October </month> <year> 1995. </year>
Reference: [ANJN75] <author> U. Ammann, K. V. Nori, K. Jensen, and H. Nageli. </author> <title> The Pascal (P) compiler implementation notes. </title> <type> Technical report, </type> <institution> Institut fur Informatik, Eidgenoessische Technische Hochschule, Zurch, </institution> <year> 1975. </year>
Reference: [App98] <author> Andrew W. Appel. </author> <title> SSA is functional programming. </title> <journal> ACM SIGPLAN, </journal> <volume> 33(4) </volume> <pages> 17-20, </pages> <month> April </month> <year> 1998. </year>
Reference: [Arm98] <author> Eric Armstrong. HotSpot: </author> <title> A new breed of virtual machine. </title> <journal> JavaWorld, </journal> <volume> 3(3), </volume> <month> March </month> <year> 1998. </year>
Reference: [ASU86] <author> A. V. Aho, R. Sethi, and J. D. Ullman. </author> <booktitle> Compilers: principles, techniques, and tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: Since the source code of the javac compiler is part of the JDK source code distribution, it is possible to bootstrap javac. Figure 10.2 illustrates the bootstrapping with T-diagrams <ref> [ASU86] </ref>.
Reference: [Bak77] <author> B. Baker. </author> <title> An algorithm for structuring flowgraphs. </title> <journal> Journal of the ACM, </journal> <volume> 24(1) </volume> <pages> 98-120, </pages> <month> January </month> <year> 1977. </year>
Reference-contexts: It translates class files to a high-level IR. Machine dependent optimizations (such as array remapping, which requires information about memory organization) operate on the IR. Briki optimizes short-circuit operations and uses Baker's algorithm <ref> [Bak77] </ref> for goto elimination. The compiler can produce Java source (for ease of debugging and better understanding the quality of the generated code). * Harissa tries to reconcile JIT and off-line compilers by permitting to mix compiled and interpreted code [MMBC97]. The system provides a compiler and an interpreter.
Reference: [BG97a] <author> Aart Bik and Dennis Gannon. </author> <title> Javab|a prototype bytecode parallelization tool. </title> <type> Technical Report TR 489, </type> <institution> Indiana University, Computer Science Department, </institution> <month> July </month> <year> 1997. </year>
Reference: [BG97b] <author> Aart Bik and Dennis Gannon. </author> <title> Javar|a prototype Java restructuring compiler. </title> <type> Technical Report TR 487, </type> <institution> Indiana University, Computer Science Department, </institution> <month> July </month> <year> 1997. </year>
Reference: [BK97] <author> Zoran Budimlic and Ken Kennedy. </author> <title> Optimizing Java: </title> <journal> Theory and practice. Concurreny: Practice and Experience, </journal> <volume> 9(6) </volume> <pages> 445-463, </pages> <year> 1997. </year>
Reference: [BKMS98] <author> David F. Bacon, Ravi Konuru, Chet Murthy, and Mauricio Serrano. </author> <title> Thin locks: Featherweight synchronization in Java. </title> <booktitle> PLDI '98, </booktitle> <month> June </month> <year> 1998. </year> <note> BIBLIOGRAPHY 145 </note>
Reference-contexts: We argue that this runtime overhead is small particularly for the benchmarks introduced in section 11.1 because * they do not require threads, i.e., they are single-threaded. These kind of applications can profit from a lightweight synchronization scheme, such as thin locks <ref> [BKMS98] </ref>, which introduces only a small synchronization overhead. Thin locks could be implemented by the runtime system with only minor modifications to the j2s compiler. * they do not raise an exception.
Reference: [BOSW98] <author> Gilad Bracha, Martin Odersky, David Stoutamire, and Philip Wadler. </author> <title> Making the future safe for the past: Adding genericity to the Java programming language. </title> <address> OOPLSA '98, </address> <year> 1998. </year>
Reference: [Bot97] <author> Per Bothner. </author> <title> A Gcc-based Java implementation. </title> <booktitle> IEEE Compcon '97, </booktitle> <month> February </month> <year> 1997. </year>
Reference-contexts: It includes a Java bytecode to C compiler (off-line compilation) that covers the whole Java language specification. * Bothner is developing a gcc-based Java compiler <ref> [Bot97] </ref>.
Reference: [Bra95] <author> Marc Michael Brandis. </author> <title> Optimizing Compilers for Structured Programming Languages. </title> <type> PhD thesis, </type> <institution> Swiss Federal Institute of Technology Zurch, </institution> <year> 1995. </year>
Reference: [Bri96] <author> Preston Briggs. </author> <title> The massively scalar compiler project. </title> <type> Unpublished, </type> <month> September </month> <year> 1996. </year>
Reference: [BW88] <author> Hans-Juergen Boehm and Mark Weiser. </author> <title> Garbage collection in an uncooperative environment. </title> <journal> Software|Practice and Experience, </journal> <volume> 19(9) </volume> <pages> 807-820, </pages> <month> September </month> <year> 1988. </year>
Reference: [BW90] <author> Alan Burns and Andrew Wellings. </author> <title> Real-Time Systems and their Programming Languages. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference: [CC95] <author> Cliff Click and Keith D. Cooper. </author> <title> Combining analyses, combining optimizations. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 17(2) </volume> <pages> 181-196, </pages> <month> March </month> <year> 1995. </year>
Reference: [CD93] <author> Charles Consel and Oliver Danvy. </author> <title> Tutorial notes on partial evaluation. </title> <booktitle> POPL '93, </booktitle> <pages> pages 493-501, </pages> <month> January </month> <year> 1993. </year>
Reference: [CDG96] <author> Craig Chambers, Jeffrey Dean, and David Grove. </author> <title> Whole-program optimization of object-oriented languages. </title> <type> Technical Report 96-06-02, </type> <institution> University of Washington, Department of Computer Science, </institution> <month> June </month> <year> 1996. </year>
Reference: [CDG + 97a] <author> Andrew Chien, Julian Dolby, Bishwaroop Ganguly, Vijay Karamcheti, and Xingbin Zhang. </author> <title> Supporting high level programming with high performance: The Illinois Concert System. </title> <booktitle> High-level Parallel Programming Models and Supportive Environments (HIPS '97), </booktitle> <month> April </month> <year> 1997. </year>
Reference: [CDG97b] <author> Cyrille Comer, Gary Dismukes, and Franco Gasperoni. </author> <title> Targeting GNAT to the Java Virtual Machine. </title> <booktitle> TRI-Ada '97, </booktitle> <pages> pages 149-161, </pages> <year> 1997. </year>
Reference: [CFRW91] <author> R. Cytron, J. Ferrante, B. K. Rosen, and M. N. Wegman. </author> <title> Efficiently computing static single assignment form and the control dependency graph. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 13(4) </volume> <pages> 451-490, </pages> <month> October </month> <year> 1991. </year>
Reference: [Cha95] <author> David Chase. </author> <title> Implementation of exception handling | I. </title> <type> Unpublished, </type> <month> November </month> <year> 1995. </year>
Reference: [Cha96] <author> David Chase. </author> <title> Implementation of exception handling | II. </title> <type> Unpublished, </type> <month> September </month> <year> 1996. </year>
Reference: [Cif93] <author> Cristina Cifuentes. </author> <title> A structuring algorithm for decompilation. </title> <journal> XIX Conferencia Lati-noamericana de Informatica, </journal> <pages> pages 267-276, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Source-to-source transformations that replace goto statements with structured ones ("goto elimination") [Ram88] [EH93] are a similar form of high-level control structure recovery. High-level control structure recovery is an essential part of every decompilation process <ref> [Cif93] </ref> [Cif96]. A decompiler 3 is a software tool that translates a program written in a low-level language (source 1 Homepage of the TurboJ project: http://www.opengroup.org/RI/java/turbo/. 2 Homepage: http://HTTP.CS.Berkeley.EDU/~engberg/guavac/. 3 The Decompilation Page: http://www.csee.uq.edu.au/csm/decompilation/. 12.2. DECOMPILERS 139 language) into a semantically equivalent program in a high-level language.
Reference: [Cif94] <author> Cristina Cifuentes. </author> <title> Reverse Compilation Techniques. </title> <type> PhD thesis, </type> <institution> Queensland University of Technology, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: Cifuentes describes the implementation of the dcc decompiler, 5 an i80286 decompiler for DOS binary programs that generates C code <ref> [Cif94] </ref>. Her thesis gives a chronological overview of various research and commercial decompilation tools (from 1960 to 1993). Several decompilation tools that translate Java bytecode to Java source are available or in develop ment: * Mocha 6 is a decompiler written in Java.
Reference: [Cif96] <author> Cristina Cifuentes. </author> <title> Structuring decompiled graphs. </title> <booktitle> Lecture Notes in Computer Science Vol. 1060 | Compiler Construction, </booktitle> <pages> pages 91-105, </pages> <year> 1996. </year>
Reference-contexts: Source-to-source transformations that replace goto statements with structured ones ("goto elimination") [Ram88] [EH93] are a similar form of high-level control structure recovery. High-level control structure recovery is an essential part of every decompilation process [Cif93] <ref> [Cif96] </ref>. A decompiler 3 is a software tool that translates a program written in a low-level language (source 1 Homepage of the TurboJ project: http://www.opengroup.org/RI/java/turbo/. 2 Homepage: http://HTTP.CS.Berkeley.EDU/~engberg/guavac/. 3 The Decompilation Page: http://www.csee.uq.edu.au/csm/decompilation/. 12.2. DECOMPILERS 139 language) into a semantically equivalent program in a high-level language.
Reference: [CL97] <author> Michael Cierniak and Wei Li. Briki: </author> <title> An optimizing Java compiler. </title> <booktitle> IEEE Compcon '97, </booktitle> <month> February </month> <year> 1997. </year>
Reference-contexts: source to the intermediate representation of gcc [Sta95]. * CACAO is a JIT Java compiler that generates native code for the Alpha architecture [KG97] [Gra97] [KP88] [KEG98]. * Caffeine is an (optimizing) compiler from Java bytecode to native code [HGH96]. * Briki is a research compiler for Java class files <ref> [CL97] </ref> to test new compilation techniques. It translates class files to a high-level IR. Machine dependent optimizations (such as array remapping, which requires information about memory organization) operate on the IR. Briki optimizes short-circuit operations and uses Baker's algorithm [Bak77] for goto elimination.
Reference: [Coh81] <author> Norman H. Cohen. </author> <title> Type-extension type tests can be performed in constant time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 13(4) </volume> <pages> 626-629, </pages> <year> 1981. </year> <note> BIBLIOGRAPHY 146 </note>
Reference: [CS93] <author> Ron Cytron and David Shields. </author> <title> FRIL | a fractal intermediate language. </title> <type> Unpublished, </type> <month> July </month> <year> 1993. </year>
Reference: [CU90] <author> Craig Chambers and David Ungar. </author> <title> Iterative type analysis and extended message splitting: Optimizing dynamically-typed object-oriented languages. </title> <booktitle> PLDI '90, </booktitle> <pages> pages 150-164, </pages> <month> June </month> <year> 1990. </year>
Reference: [DCI + 97] <author> A. Duncan, B. Cocosel, C. Iancu, H. Kienle, R. Rugina, U. Holzle, and M. Rinard. OSUIF: </author> <title> SUIF with objects. </title> <booktitle> Second SUIF Compiler Workshop, </booktitle> <pages> pages 1-7, </pages> <month> August </month> <year> 1997. </year>
Reference: [DDG + 96] <author> Jeffrey Dean, Greg DeFouw, David Grove, Vassily Litvinov, and Craig Chambers. </author> <title> Vortex: An optimizing compiler for object-oriented languages. </title> <booktitle> OOPSLA '96, </booktitle> <pages> pages 83-100, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: Not too surprisingly, they are calling it j2s as well. Because SUIF 1.0 has no support to describe object-oriented constructs, annotations (see section 3.2.8) have been used to model them. * Part of the Vortex project <ref> [DDG + 96] </ref> is a Java front end (refer also to section 2.2). * JTA [FdFR96] [FdF96] is a Java bytecode to ANDF translator. * The TurboJ Java Compiler 1 is a Java compiler from the OSF Research Institute. It is written in Java and generates ANSI C code.
Reference: [DF84] <author> J. W. Davidson and C. W. Fraser. </author> <title> Code selection through object code optimization. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 6(4) </volume> <pages> 505-526, </pages> <year> 1984. </year>
Reference: [DFW96] <author> Drew Dean, Edward W. Felten, and Dan S. Wallach. </author> <title> Java security: From HotJava to Netscape and beyond. </title> <booktitle> IEEE Symposium on Security and Privacy (SOSP '96), </booktitle> <pages> pages 190-200, </pages> <month> May </month> <year> 1996. </year>
Reference: [DGC95] <author> Jeffrey Dean, David Grove, and Craig Chambers. </author> <title> Optimization of object-oriented pro-gramms using static class hierarchy analysis. </title> <booktitle> ECOOP '95, </booktitle> <pages> pages 77-101, </pages> <month> August </month> <year> 1995. </year>
Reference: [DH95] <author> Karel Driesen and Urs Holzle. </author> <title> Minimizing row displacement dispatch tables. </title> <booktitle> OOPSLA '95, </booktitle> <pages> pages 141-155, </pages> <month> October </month> <year> 1995. </year>
Reference: [DHV95] <author> Karel Driesen, Urs Holzle, and Jan Vitek. </author> <title> Message dispatch on piplined processors. </title> <booktitle> ECOOP '95, </booktitle> <pages> pages 253-282, </pages> <month> August </month> <year> 1995. </year>
Reference: [DMM96] <author> Amer Diwan, J. Eliot B. Moss, and Kathryn S. McKinley. </author> <title> Simple and effective analysis of statically-typed object-oriented programs. </title> <booktitle> OOPSLA '96, </booktitle> <pages> pages 292-305, </pages> <month> October </month> <year> 1996. </year>
Reference: [DS84] <author> L. Peter Deutsch and Allan Schiffman. </author> <title> Efficient implementation of the Smalltalk-80 system. </title> <booktitle> POPL '84, </booktitle> <pages> pages 297-302, </pages> <year> 1984. </year>
Reference: [Dye97] <author> Dave Dyer. </author> <title> Java decompilers compared. </title> <journal> JavaWorld, </journal> <volume> 2(7), </volume> <month> July </month> <year> 1997. </year>
Reference-contexts: For this reason Krakatoa applies rewriting rules based on reachability and equivalence properties of program points. The current Icon implementation was intended as a test-of-concept. The authors plan to reimplement the decompiler in Java. * Both WingDis 9 and DejaVu 10 are commercial decompilers. <ref> [Dye97] </ref> compares the quality of the generated Java code for Mocha, WingDis, and DejaVu with several small test class files. 4 Decompilation of class files is easier than decompilation of conventional object files because a class file has a well defined structure and conveys much more semantical information. 5 Homepage: http://www.it.uq.edu.au/groups/csm/dcc.html/.
Reference: [EH93] <author> Ana M. Erosa and Laurie J. Hendren. </author> <title> Taming control flow: A structured approach to eliminating goto statements. </title> <type> ACAPS Technical Memo 76, </type> <institution> McGill University, School of Computer Science, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Source-to-source transformations that replace goto statements with structured ones ("goto elimination") [Ram88] <ref> [EH93] </ref> are a similar form of high-level control structure recovery. High-level control structure recovery is an essential part of every decompilation process [Cif93] [Cif96].
Reference: [EM95] <author> M. Anton Ertl and Martin Maierhofer. </author> <title> Translating Forth to efficient C. </title> <type> EuroForth '95, </type> <year> 1995. </year>
Reference: [EP94] <author> Dawson R. Engler and Todd A. Proebsting. </author> <title> DCG: An effiecient, retargetable dynamic code generation system. </title> <booktitle> Architectural Support for Programming Languages and Operating Systems (ASPLOS '94), </booktitle> <pages> pages 263-272, </pages> <year> 1994. </year>
Reference: [Ert96] <author> Martin Anton Ertl. </author> <title> Implementation of Stack-Based Languages on Register Machines. </title> <type> PhD thesis, </type> <institution> Technische Universitat Wien, </institution> <month> April </month> <year> 1996. </year>
Reference: [FdF96] <author> Christian Fabre and Fran~cois de Ferriere. </author> <title> Java-ANDF feasibility study | intermediate report. </title> <institution> Open Software Foundation Research Institute, </institution> <month> June </month> <year> 1996. </year> <note> BIBLIOGRAPHY 147 </note>
Reference-contexts: Because SUIF 1.0 has no support to describe object-oriented constructs, annotations (see section 3.2.8) have been used to model them. * Part of the Vortex project [DDG + 96] is a Java front end (refer also to section 2.2). * JTA [FdFR96] <ref> [FdF96] </ref> is a Java bytecode to ANDF translator. * The TurboJ Java Compiler 1 is a Java compiler from the OSF Research Institute. It is written in Java and generates ANSI C code.
Reference: [FdFR96] <author> Christian Fabre, Fran~cois de Ferriere, and Fred Roy. </author> <title> Java-ANDF feasibility study | final report. </title> <institution> Open Software Foundation Research Institute, </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: Because SUIF 1.0 has no support to describe object-oriented constructs, annotations (see section 3.2.8) have been used to model them. * Part of the Vortex project [DDG + 96] is a Java front end (refer also to section 2.2). * JTA <ref> [FdFR96] </ref> [FdF96] is a Java bytecode to ANDF translator. * The TurboJ Java Compiler 1 is a Java compiler from the OSF Research Institute. It is written in Java and generates ANSI C code.
Reference: [Fer96] <author> Mary F. Fernandez. </author> <title> A retargetable, optimizing linker. </title> <type> PhD thesis, </type> <institution> Princeton Universitly, </institution> <month> January </month> <year> 1996. </year>
Reference: [FH91] <author> Christopher W. Fraser and David R. Hanson. </author> <title> A code generation interface for ANSI C. </title> <journal> Software|Practice and Experience, </journal> <volume> 21(9) </volume> <pages> 963-988, </pages> <year> 1991. </year>
Reference: [FK96] <author> Michael Franz and Thomas Kistler. </author> <title> Slim Binaries. </title> <journal> Communications of the ACM, </journal> <volume> 40(12) </volume> <pages> 87-94, </pages> <month> December </month> <year> 1996. </year>
Reference: [Fra94] <author> Michael Steffen Oliver Franz. </author> <title> Code-Generation On-the-Fly: A Key to Portable Software. </title> <type> PhD thesis, </type> <institution> Swiss Federal Institute of Technology Zurich, </institution> <year> 1994. </year>
Reference: [GHJV94] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns | Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference: [GJ87] <author> Carlo Ghezzi and Medhi Jazayeri. </author> <title> Programming Language Concepts. </title> <publisher> John Wiley & Sons, </publisher> <year> 1987. </year>
Reference: [GJS96] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. The Java Series. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference: [GM95] <author> James Gosling and Henry McGilton. </author> <title> The Java Language Environment | A White Paper. Sun Microsystems, </title> <month> October </month> <year> 1995. </year>
Reference: [Goo75] <author> J. B. Goodenough. </author> <title> Exception handling: Issues and a proposed notation. </title> <journal> Communications of the ACM, </journal> <volume> 18(12) </volume> <pages> 683-696, </pages> <month> December </month> <year> 1975. </year>
Reference: [GR83] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80: The language and its implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference: [Gra97] <author> Reinhard Grafl. </author> <title> CACAO: Ein 64bit Java VM just-in-time compiler. </title> <type> Master's thesis, </type> <institution> Tech-nische Universitat Wien, </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: A new gcc front end, cc1java, translates Java bytecode or Java source to the intermediate representation of gcc [Sta95]. * CACAO is a JIT Java compiler that generates native code for the Alpha architecture [KG97] <ref> [Gra97] </ref> [KP88] [KEG98]. * Caffeine is an (optimizing) compiler from Java bytecode to native code [HGH96]. * Briki is a research compiler for Java class files [CL97] to test new compilation techniques. It translates class files to a high-level IR.
Reference: [Hav97] <author> Paul Havlak. </author> <title> Nesting of reducible and irreducible loops. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 19(4) </volume> <pages> 557-567, </pages> <month> July </month> <year> 1997. </year>
Reference: [HBG + 97] <author> Urs Holzle, Lars Bak, Steffen Grarup, Robert Griesemer, and Srdjan Mitrovic. </author> <title> Java on steroids: Sun's high-performance Java implementation. Hot Chips IX, </title> <institution> Stanford University, </institution> <month> August </month> <year> 1997. </year>
Reference: [HCU91] <author> Urs Holzle, Craig Chambers, and David Ungar. </author> <title> Optimizing dynamically-typed object-oriented languages with polymorphic inline caches. </title> <booktitle> ECOOP '91, </booktitle> <pages> pages 21-38, </pages> <month> July </month> <year> 1991. </year>
Reference: [HGH96] <author> Cheg-Hsueh Hsieh, John C. Gyllenhaal, and Wen-mei Hwu. </author> <title> Java bytecode to native code translation: The Caffeine prototype and preliminary results. </title> <booktitle> 29th Annual International Symposium on Microarchitecture, </booktitle> <pages> pages 90-99, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: A new gcc front end, cc1java, translates Java bytecode or Java source to the intermediate representation of gcc [Sta95]. * CACAO is a JIT Java compiler that generates native code for the Alpha architecture [KG97] [Gra97] [KP88] [KEG98]. * Caffeine is an (optimizing) compiler from Java bytecode to native code <ref> [HGH96] </ref>. * Briki is a research compiler for Java class files [CL97] to test new compilation techniques. It translates class files to a high-level IR. Machine dependent optimizations (such as array remapping, which requires information about memory organization) operate on the IR.
Reference: [HS96] <author> Jonathan Hardwick and Jay Sipelstein. </author> <title> Java as an intermediate language. </title> <type> Technical Report CMU-CS-96-161, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> August </month> <year> 1996. </year>
Reference: [JCR97] <author> JavaSoft. </author> <title> Java Core Reflection | API and Specification, </title> <month> January </month> <year> 1997. </year> <note> BIBLIOGRAPHY 148 </note>
Reference: [JGZ88] <author> Ralph E. Johnson, Justin O. Graver, and Lawrence W. Zurawski. </author> <title> TS: An optimizing compiler for Smalltalk. </title> <booktitle> OOPSLA '88, </booktitle> <pages> pages 18-26, </pages> <month> September </month> <year> 1988. </year>
Reference: [JIC97] <author> JavaSoft. </author> <title> Inner Classes Specification, </title> <month> October </month> <year> 1997. </year>
Reference: [JNI97] <author> JavaSoft. </author> <title> Java Native Interface Specification, Release 1.1, </title> <month> January </month> <year> 1997. </year>
Reference: [Joh96] <author> Raph E. Johnson. </author> <title> Type-checking Smalltalk. </title> <booktitle> OOPSLA '86, </booktitle> <pages> pages 315-321, </pages> <month> September </month> <year> 1996. </year>
Reference: [KEG98] <author> Andreas Krall, Anton Ertl, and Michael Gschwind. </author> <title> JavaVM implementation: Compilers versus hardware. </title> <booktitle> Computer Architecture (ACAC '98), </booktitle> <pages> pages 101-110, </pages> <year> 1998. </year>
Reference-contexts: A new gcc front end, cc1java, translates Java bytecode or Java source to the intermediate representation of gcc [Sta95]. * CACAO is a JIT Java compiler that generates native code for the Alpha architecture [KG97] [Gra97] [KP88] <ref> [KEG98] </ref>. * Caffeine is an (optimizing) compiler from Java bytecode to native code [HGH96]. * Briki is a research compiler for Java class files [CL97] to test new compilation techniques. It translates class files to a high-level IR.
Reference: [KF96] <author> Thomas Kistler and Michael Franz. </author> <title> A tree-based alternative to Java byte-codes. </title> <type> Technical Report 96-58, </type> <institution> Department of Information and Computer Science, University of California, Irvine, </institution> <month> December </month> <year> 1996. </year>
Reference: [KG97] <author> Andreas Krall and Reinhard Grafl. </author> <title> CACAO | a 64bit Java VM just-in-time compiler. </title> <booktitle> PPoPP Workshop on Java for Science and Engineering Computation, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: A new gcc front end, cc1java, translates Java bytecode or Java source to the intermediate representation of gcc [Sta95]. * CACAO is a JIT Java compiler that generates native code for the Alpha architecture <ref> [KG97] </ref> [Gra97] [KP88] [KEG98]. * Caffeine is an (optimizing) compiler from Java bytecode to native code [HGH96]. * Briki is a research compiler for Java class files [CL97] to test new compilation techniques. It translates class files to a high-level IR.
Reference: [KH97a] <author> Holger Kienle and Urs Holzle. </author> <title> Introduction to the SUIF 2.0 compiler system. </title> <type> Technical Report TRCS97-22, </type> <institution> Department of Computer Science, University of California Santa Barbara, </institution> <month> December </month> <year> 1997. </year>
Reference-contexts: SUIF file. 4 We could not use C++ STL [Str97] as an alternative because is also was not available at this time. 5 Many C++ compiler either do not support it or are buggy. 6 URL: http://www.cs.ucsb.edu/~osuif/suif 2/public/suif96 faq.html. 7 An earlier version of this chapter appeared as technical report <ref> [KH97a] </ref> and is the only available documentation of the SUIF 2.0 system as of this writing. 13.1. CONCLUSIONS 142 was the first SUIF 2.0 client.
Reference: [KH97b] <author> Holger Kienle and Urs Holzle. j2s: </author> <title> A SUIF Java compiler. </title> <booktitle> Second SUIF Compiler Workshop, </booktitle> <pages> pages 8-15, </pages> <month> August </month> <year> 1997. </year> <note> Also available as Technical Report TRCS97-16, </note> <institution> Department of Computer Science, University of California Santa Barbara. </institution>
Reference-contexts: We briefly outlined the complicated nature of this endeavor in section 5.13. The first SUIF 2.0 alpha release became available after we finished the code generation for the imperative part of the Java language. Migrating the code generation to SUIF 2.0 was surprisingly easy and is briefly described in <ref> [KH97b] </ref>. At the early development stage of the code generation, SUIF 2.0 was a moving target. We had to rewrite code on a couple of occasion to reflect changes in the design.
Reference: [KH98] <author> Ralph Keller and Urs Holzle. </author> <title> Implementing binary component adaptation. </title> <type> Technical Report TRCS98-21, </type> <institution> Department of Computer Science, University of California Santa Barbara, </institution> <year> 1998. </year>
Reference-contexts: The header files are difficult to read, because every class contains a myriad of functions for 1 The loader has been implemented with Ralph Keller and is also used in his implementation for Binary Component Adaptation <ref> [KH98] </ref>. 2 A switch statement (that dispatches on class types) often indicate a deficiency in the design. 141 the SUIF standard functionality, such as tags, cloning, visitors, and the zot interface. Extending SUIF 2.0, as it had to be done for OSUIF, is a whole other story.
Reference: [Kli81] <author> Paul Klint. </author> <title> Interpretation techniques. </title> <journal> Software|Practice and Experience, </journal> <volume> 11(10) </volume> <pages> 963-973, </pages> <month> October </month> <year> 1981. </year>
Reference: [KN93] <author> Elefherios Koutsofios and Stephen North. </author> <title> Drawing graphs with dot. </title> <institution> AT&T Bell Laboratories, </institution> <month> October </month> <year> 1993. </year>
Reference: [KP88] <author> Andreas Krall and Mark Probst. </author> <title> Monitors and exceptions: How to implement Java efficiently. </title> <booktitle> ACM 1998 Workshop on Java for High-Performance Network Computing, </booktitle> <pages> pages 15-24, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: A new gcc front end, cc1java, translates Java bytecode or Java source to the intermediate representation of gcc [Sta95]. * CACAO is a JIT Java compiler that generates native code for the Alpha architecture [KG97] [Gra97] <ref> [KP88] </ref> [KEG98]. * Caffeine is an (optimizing) compiler from Java bytecode to native code [HGH96]. * Briki is a research compiler for Java class files [CL97] to test new compilation techniques. It translates class files to a high-level IR.
Reference: [Kra83] <author> Glenn Krasner. </author> <title> Smalltalk-80: bits of history, words of advice. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: Since we compile only correct Java programs, no exceptions are raised. 2 The javac test consists of: 1 One can draw a parallel to Smalltalk systems, which test a wide range of their functionality by simply printing the result of an integer addition <ref> [Kra83, page 57] </ref>. 2 Actually, there is a single program point where javac throws a ClassNotFound exception. We had to change three lines in sun.tools.java.Environment to work around this problem. 10.2.
Reference: [KVH97] <author> Andras Krall, Jan Vitek, and R. Nigel Horspool. </author> <title> Near optimal hierarchy encoding of types. </title> <booktitle> ECOOP '97, </booktitle> <pages> pages 128-145, </pages> <year> 1997. </year>
Reference: [LY96] <author> Tim Lindholm and Frank Yellin. </author> <title> The Java Virtual Machine Specification. The Java Series. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: The code in figure 8.8, for example, cannot be generated with javac (and most other compilers) because jsr/ret bytecodes are usually only generated for a try-finally statement <ref> [LY96, Section 7.13] </ref>. 3 Currently N=SPARC since the runtime system contains SPARC assembly. 4 In fact, a successful bootstrap requires that both javac and the bootstrapped javac are identical. 5 Homepage: http://www.mrl.nyu.edu/meyer/jvm/. 10.2.
Reference: [MBL97] <author> Andrew C. Myers, Joseph A. Bank, and Barbara Liskov. </author> <title> Parameterized types in Java. </title> <booktitle> POPL '97, </booktitle> <pages> pages 132-145, </pages> <month> January </month> <year> 1997. </year>
Reference: [MD97] <author> Jon Meyer and Troy Downing. </author> <title> Java Virtual Machine. </title> <address> O'Reilly, </address> <month> March </month> <year> 1997. </year> <note> BIBLIOGRAPHY 149 </note>
Reference-contexts: and pre-compiled class files) and j2s, which we assume to be already compiled for machine architecture N . 3 The actual bootstrapping first generates javac' (second row in figure 10.2) and then bootstraps javac with javac' (third row in figure 10.2). 4 10.2 The Jasmin Assembler The Jasmin assembler 5 <ref> [MD97] </ref> allows to generate class files that cannot be generated with a Java compiler.
Reference: [MDG97] <author> Sumith Mathew, Eric Dahlman, and Sandeep Gupta. </author> <title> Compiling Java to SUIF: Incorporating support for object-oriented languages. </title> <type> Technical Report CS-97-114, </type> <institution> Computer Science Department, Colorado State University, </institution> <month> July </month> <year> 1997. </year>
Reference-contexts: Thus, a compiled program is still able to dynamically load and execute 12.2. DECOMPILERS 138 classes. The compiler translates Java bytecode to C, incorporating optimizations based on class hierarchy analysis. * Colorado State University has written a Java front end for the SUIF 1.0 compiler system <ref> [MDG97] </ref>. Not too surprisingly, they are calling it j2s as well.
Reference: [ME98] <author> Martin Maierhofer and M. Anton Ertl. </author> <title> Local stack allocation. </title> <booktitle> Springer Lecture Notes in Computer Science 1383, </booktitle> <pages> pages 189-203, </pages> <year> 1998. </year>
Reference: [MMBC97] <author> Gilles Muller, Barbara Moura, Fabrice Bellard, and Charles Consel. Harissa: </author> <title> a flexible and efficient Java environment mixing bytecode and compiled code. </title> <type> COOTS '97, </type> <month> June </month> <year> 1997. </year>
Reference-contexts: Briki optimizes short-circuit operations and uses Baker's algorithm [Bak77] for goto elimination. The compiler can produce Java source (for ease of debugging and better understanding the quality of the generated code). * Harissa tries to reconcile JIT and off-line compilers by permitting to mix compiled and interpreted code <ref> [MMBC97] </ref>. The system provides a compiler and an interpreter. The interpreter is integrated in the runtime system. Thus, a compiled program is still able to dynamically load and execute 12.2. DECOMPILERS 138 classes.
Reference: [NAJ + 81] <author> K. Nori, U. Ammann, K. Jensen, H. Nageli, </author> <title> and C Jacobi. Pascal-P implementation notes. Pascal | The Language and its Implementation, </title> <publisher> John Wiley & Sons, </publisher> <pages> pages 107-136, </pages> <year> 1981. </year>
Reference: [OQL97] <author> Andrea Olgiati, Stuart Quick, and John Lumley. </author> <title> One year of experience with SUIF. </title> <booktitle> Second SUIF Compiler Workshop, </booktitle> <pages> pages 141-145, </pages> <month> August </month> <year> 1997. </year>
Reference: [OSF91] <author> Open Systems Foundation. </author> <title> OSF Architecture-Neutral Distribution Format Rationale, </title> <month> June </month> <year> 1991. </year>
Reference: [OW97] <author> Martin Odersky and Philip Wadler. </author> <title> Pizza into Java: Translation theory into practice. </title> <booktitle> POPL '97, </booktitle> <pages> pages 146-159, </pages> <month> January </month> <year> 1997. </year>
Reference: [PC94] <author> John Plevyak and Andrew A. Chien. </author> <title> Precise concrete type inference for object-oriented languages. </title> <booktitle> OOPSLA '94, </booktitle> <pages> pages 324-340, </pages> <month> October </month> <year> 1994. </year>
Reference: [PC97] <author> Michael P. Plezbert and Ron K. Cytron. </author> <title> Does "just in time" = "better late than never"? POPL '97, </title> <address> pages 120-131, </address> <month> January </month> <year> 1997. </year>
Reference: [Ple96] <author> John B. Plevyak. </author> <title> Optimization of Object-oriented and Concurrent Programms. </title> <type> PhD thesis, </type> <institution> Universiy of Illinois at Urbana-Champaign, </institution> <month> August </month> <year> 1996. </year>
Reference: [Plo94] <author> Prof. Dr. Erhard Plodereder. Syntaxanalyse. Vorlesungs-Skript, </author> <year> 1994. </year>
Reference: [PTB + 97] <author> T. Proebsting, G. Townsend, P. Bridges, J. Hartman, T. Newsham, and S. Watterson. Toba: </author> <title> Java for applications | a way ahead of time (WAT) compiler. </title> <type> COOTS '97, </type> <month> June </month> <year> 1997. </year>
Reference-contexts: Furthermore, assertions were disabled and various optimizations (e.g., lookup caches, type inclusion tests with relative numbering) enabled. As of this writing, we are not finished tuning the runtime system; further speedups can be expected. Our goal is to achieve a runtime performance close to Toba <ref> [PTB + 97] </ref>, which has a speedup of about 3.3 for javac compared to the JDK1.0.2 VM on SPARC. 6 The execution time reported for j2s seems to be not quite fair because j2s does not implement exception handling, threads, and locks. <p> Implementation techniques range from off-line to JIT compilation (see section 7.2 for a more detailed discussion of these techniques). Among the Java compilers that we looked at are: * Toba is a system for generating stand-alone Java applications developed at the University of Arizona <ref> [PTB + 97] </ref>. It includes a Java bytecode to C compiler (off-line compilation) that covers the whole Java language specification. * Bothner is developing a gcc-based Java compiler [Bot97].
Reference: [PW97] <author> Todd Proebsting and Scott Watterson. </author> <title> Krakatoa: Decompilation in Java. </title> <type> COOTS '97, </type> <month> June </month> <year> 1997. </year>
Reference-contexts: Jasmine 7 is a shareware decompiler that has been derived from Mocha. * Jad 8 is a freely availabe decompiler written in C++. It seems to be very stable and the recovered control flow is easy to read. * Krakatoa <ref> [PW97] </ref>, developed at the University of Arizona, is written in Icon. It uses a slightly modified version of Ramshaw's goto elimination algorithms [Ram88] to generate valid Java constructs for control flow. The Java source generated by this phase is hard to read.
Reference: [Ram88] <author> Lyle Ramshaw. </author> <title> Eliminating go to's while preserving program structure. </title> <journal> Journal of the ACM, </journal> <volume> 35(4) </volume> <pages> 893-920, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Source-to-source transformations that replace goto statements with structured ones ("goto elimination") <ref> [Ram88] </ref> [EH93] are a similar form of high-level control structure recovery. High-level control structure recovery is an essential part of every decompilation process [Cif93] [Cif96]. <p> It seems to be very stable and the recovered control flow is easy to read. * Krakatoa [PW97], developed at the University of Arizona, is written in Icon. It uses a slightly modified version of Ramshaw's goto elimination algorithms <ref> [Ram88] </ref> to generate valid Java constructs for control flow. The Java source generated by this phase is hard to read. For this reason Krakatoa applies rewriting rules based on reachability and equivalence properties of program points. The current Icon implementation was intended as a test-of-concept.
Reference: [Rob89] <author> Eric S. Roberts. </author> <title> Implementing exceptions in C. </title> <type> Technical Report 40, </type> <institution> DEC Systems Research Center, </institution> <address> Palo Alto, CA, </address> <month> March </month> <year> 1989. </year>
Reference: [Rut98] <author> Andrew Rutz. </author> <title> A runtime environment for a static Java compiler. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of California Santa Barbara, </institution> <year> 1998. </year> <note> To appear Fall 1998. </note>
Reference: [SCG94a] <institution> Stanford Compiler Group, Stanford University. </institution> <address> The BUILDER Library, </address> <note> Version 1.0, </note> <year> 1994. </year>
Reference: [SCG94b] <institution> Stanford Compiler Group, Stanford University. </institution> <address> The SUIF Library, </address> <note> Version 1.0, </note> <year> 1994. </year>
Reference: [Sha97a] <author> Zhong Shao. </author> <title> An overview of the FLINT/ML compiler. </title> <booktitle> ACM SIGPLAN Workshop on Types in Compilation (TIC'97), </booktitle> <address> Amsterdam, The Netherlands, </address> <month> June </month> <year> 1997. </year> <note> BIBLIOGRAPHY 150 </note>
Reference: [Sha97b] <author> Zhong Shao. </author> <title> Typed common intermediate format. </title> <booktitle> USENIX Conference on Domain-Specific Languages, </booktitle> <address> Santa Barbara, CA, </address> <pages> pages 89-101, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: On the other hand, this scheme is less general than actual compilation of a class file and introduces dependencies to a specific runtime system. The current implementation uses the JDK runtime environment (JRE). * A Java front end is planned for the FLINT compiler system <ref> [Sha97b] </ref> (refer also to section 2.2). * The guavac compiler 2 is an off-line compiler that expects Java source and generates Java bytecode. It is written in C++ and distributed under the Gnu public license. * There are various commercial (JIT) compilers from Borland, IBM, Micro$oft, SunSoft, Symantec, etc.
Reference: [Smi96] <author> Michael D. Smith. </author> <title> Extending SUIF for machine-dependent optimizations. </title> <booktitle> First SUIF Compiler Workshop, </booktitle> <month> January </month> <year> 1996. </year>
Reference: [Som92] <author> Ian Sommerville. </author> <title> Software Enginnering. </title> <publisher> Addison-Wesley, </publisher> <address> fourth edition, </address> <year> 1992. </year>
Reference-contexts: Otherwise, the runtime system terminates the program with an error message. rt Exit () currently only optionally prints out statistical information that has been gathered during the program run. Chapter 10 Testing Testing is an important part of every software development process <ref> [Som92] </ref>. We tested j2s with the following (glass-box) tests: * We ran small, isolated class files specifically written to test certain features of the compiler. One test lets the compiler generate code for every bytecode, which should yield a good path testing coverage.
Reference: [Sta95] <author> Richard M. Stallman. </author> <title> Porting GNU CC. Free Sofware Foundation, </title> <address> Boston, MA, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: It includes a Java bytecode to C compiler (off-line compilation) that covers the whole Java language specification. * Bothner is developing a gcc-based Java compiler [Bot97]. A new gcc front end, cc1java, translates Java bytecode or Java source to the intermediate representation of gcc <ref> [Sta95] </ref>. * CACAO is a JIT Java compiler that generates native code for the Alpha architecture [KG97] [Gra97] [KP88] [KEG98]. * Caffeine is an (optimizing) compiler from Java bytecode to native code [HGH96]. * Briki is a research compiler for Java class files [CL97] to test new compilation techniques.
Reference: [Str97] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> third edition, </address> <year> 1997. </year>
Reference-contexts: The author gained extensive knowledge of SUIF 2.0 while implementing j2s, which has been documented in the SUIF 2 FAQ 6 and chapter 4 of this thesis. 7 The j2s compiler 3 This printout is similar to printzot on a SUIF file. 4 We could not use C++ STL <ref> [Str97] </ref> as an alternative because is also was not available at this time. 5 Many C++ compiler either do not support it or are buggy. 6 URL: http://www.cs.ucsb.edu/~osuif/suif 2/public/suif96 faq.html. 7 An earlier version of this chapter appeared as technical report [KH97a] and is the only available documentation of the SUIF
Reference: [Taf96] <author> Tucker Taft. </author> <title> Programming the Internet in Ada 95. </title> <booktitle> Ada Europe 96 Conference: Reliable Software Technologies, </booktitle> <year> 1996. </year>
Reference: [TH92] <author> Steven W. K. Tjiang and John L. Hennessy. </author> <title> Sharlit | a tool for building optimizers. </title> <booktitle> PLDI '92, </booktitle> <pages> pages 82-93, </pages> <month> July </month> <year> 1992. </year>
Reference: [USCH92] <author> David Ungar, Randall B. Smith, Craig Chambers, and Urs Holzle. </author> <title> Object, message, and performance: How they coexist in Self. </title> <journal> IEEE Computer, </journal> <volume> 12(10) </volume> <pages> 53-64, </pages> <month> October </month> <year> 1992. </year>
Reference: [VHK97] <author> Jan Vitek, R. Nigel Horspool, and Andreas Krall. </author> <title> Efficient type inclusion tests. </title> <booktitle> OOPSLA '97, </booktitle> <pages> pages 142-157, </pages> <month> October </month> <year> 1997. </year>
Reference: [Wad97] <author> P. Wadler. </author> <title> Editorial: A HOT opportunity. </title> <journal> Journal of Functional Programming, </journal> <volume> 2(7) </volume> <pages> 127-128, </pages> <month> March </month> <year> 1997. </year>
Reference: [WFW + 94] <author> R. Wilson, R. French, C. Wilson, S. Amarasinghe, J. Anderson, S. Tjiang, S. Liao, C. Tseng, M. Hall, M. Lam, and J. Hennessy. </author> <title> SUIF: An infrastructure for research on parallelizing and imizing compilers. </title> <journal> ACM SIGPLAN Notices, </journal> <pages> pages 31-37, </pages> <month> December </month> <year> 1994. </year>
Reference: [Wil97a] <author> Chris Wilson. </author> <title> Private email communication, </title> <month> August </month> <year> 1997. </year>
Reference: [Wil97b] <author> Chris Wilson. </author> <title> Private email communication, </title> <month> November </month> <year> 1997. </year>
Reference: [Wil97c] <author> Chris Wilson. </author> <title> SUIF 2.0 tutorial. Given at the Second SUIF Compiler Workshop, </title> <month> August </month> <year> 1997. </year>
Reference: [Wir88] <author> Niklaus Wirth. </author> <title> Type extensions. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 10(2) </volume> <pages> 204-214, </pages> <year> 1988. </year>
Reference: [Yel95] <author> Frank Yellin. </author> <title> Low level security in Java. </title> <booktitle> Fourth International World Wide Web Conference, </booktitle> <address> Boston, MA, </address> <month> December </month> <year> 1995. </year>
References-found: 121

