URL: http://www.cs.berkeley.edu/~raph/cs267/report.ps
Refering-URL: http://www.cs.berkeley.edu/~raph/cs267/report.html
Root-URL: 
Email: micah@cs.berkeley.edu  raph@cs.berkeley.edu  stemm@cs.berkeley.edu  
Title: A Distributed Memory Concurrent B-tree Implementation  
Author: Micah Adler Raph Levien Mark Stemm 
Date: May 15, 1995  
Abstract: This project report describesour design, implementation, and measurements of a concurrentB-tree data structure. Our design departs from previous shared address space concurrent B-trees both in data distribution, which is blocked, and communication pattern, which is based on request and reply active messages, rather than arbitrary shared memory accesses. Our implemenation achieves 100% efficiency. In addition, our design allows us to leverage existing production quality serial B-tree code, which in combination with the high communication efficiency, gives us a factor of ten performance increase over a previous shared address space implementation for the CM-5. Our implementation supports two concurrency models: a very strong one, and a slightly weaker one with better performance. Our current implementation is suitable under the assumption that the distribution of requests in key space is known. We have designed and analyzed, but not implemented, a dynamic load balancing scheme that should make the implementation more robust when this assumption fails.
Abstract-found: 1
Intro-found: 1
Reference: [Mat94] <author> Clifford Mather. </author> <title> A split-c implementation of concurrent b-trees. CS267 class project, </title> <month> May </month> <year> 1994. </year>
Reference-contexts: Numerous examples of this architecture exist, including financial transaction systems and airline reservation databases. An efficient implementation for a distributed memory machine may not necessarily be an efficient implementation for a shared-memory machine [Wan91]. A previous attempt at a B-tree implementation <ref> [Mat94] </ref> simulated shared memory on a distributed memory machine by the use of Split-C's global pointers. Note that this approach has the disadvantage that as an operation traces down a path in the tree, each successive node may reside on a different processor.
Reference: [Wan91] <author> Paul Wang. </author> <title> An in-depth analysis of concurrent b-tree algorithms. </title> <type> Technical Report MIT/LCS/TR-496, </type> <institution> Massachusetts Institute of Technology, </institution> <month> January </month> <year> 1991. </year> <month> 13 </month>
Reference-contexts: Numerous examples of this architecture exist, including financial transaction systems and airline reservation databases. An efficient implementation for a distributed memory machine may not necessarily be an efficient implementation for a shared-memory machine <ref> [Wan91] </ref>. A previous attempt at a B-tree implementation [Mat94] simulated shared memory on a distributed memory machine by the use of Split-C's global pointers.
References-found: 2

