URL: file://ic.eecs.berkeley.edu/pub/Dist_Algs/papers/dd-supercomputing94.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/Respep/Research/dist-sim/publications.html
Root-URL: 
Title: The simulation of complex three-dimensional semiconductor devices requires computers with signif icant computational power. [1,2,3,4]
Author: E. Tomacruz, J. Sanghavi, A. Sangiovanni-Vincentelli t 
Keyword: 2: Problem definition  
Address: Berkeley 94720  
Affiliation: Department of Electrical Engineering Computer Sciences, University of California,  t  
Note: ISSN 1063-9535. Copyright (c) 1994 IEEE. All rights reserved. Abstract 1: Introduction  such as the Cray-2 [6]. Other applications such as SOI, parasitic MOSFETs [7], and silicon pixel  detectors [8] may require more computational power  where the dependent variables to be determined are the  
Abstract: We present the use of parallel pr ocessors for the solution of drift-diffusion semiconductor device equations using an irregular grid discretization. Preconditioning, partitioning, and communication scheduling algorithms are developed to implement an efficient and robust iterative linear solver with preconditioning. The parallel program is executed on a 64 node CM-5 and is compar ed with PILS running on a single pr ocessor. We observe an efficiency increase in obtaining parallel speedups as the pr oblem size increases. We obtain 60% efficiency for CGS with no preconditioning for large problems. Using CGS with processor ILU and magnitude threshold fill-in preconditioning for the CM-5 and CGS with ILU for PILS, we attain 50% efficiency for the solution of the large matrices. We present a Connection Machine 5 (CM-5) [9] device simulator that uses an irregular grid automatically generated by the Omega program [10,1 1]. For sequential device simulators, the nonlinear algebraic system of equations arising from the discretization is efficiently and accurately solved by a variation of the basic Newton-Raphson algorithm. As usual in this algorithm, most of the computation time is spent on the solution of the linearized system of equations. The focus of our work is to speedup this step. We present heuristics for partitioning, communication scheduling, and preconditioning for the ef ficient implementation of a parallel iterative linear solver . Parallel results are compared with a sequential program called PILS [12]. This paper is organized as follows. An overview of the device equations and how they are generally solved is f irst given. Section 3 describes a parallel linear solver . Results are provided and analyzed in Section 4. Finally , conclusions are drawn in Section 5. The timedependent drift-diffusion model of semiconductor devices, based on the Poisson equation and the continuity equations for electrons and holes [13], has been used in this paper: 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> D. Webber, E. Tomacruz, R. Guerrieri, T. Toyabe, and A. Sangiovanni-Vincentelli, </author> <title> A Massively Parallel Algorithm for Three-Dimensional Device Simulation, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 10, </volume> <pages> pp. 1201-1209, </pages> <month> Sept. </month> <year> 1991. </year>
Reference: [2] <author> E. Tomacruz, J. Sanghavi, and A. Sangiovanni-Vincentelli, </author> <title> Algorithms for Drift-Diffusion Device Simulation Using Massively Parallel Processors, </title> <journal> IEICE Trans. on Electronics, </journal> <volume> Vol. E77-C, </volume> <pages> pp. 248-254, </pages> <month> Feb. </month> <year> 1994. </year>
Reference-contexts: The node with the minimum degree is used as the starting node for the reverse Cuthill-Mckee ordering. Both ordering schemes maintain a significant portion of coupling between nodes when fill-ins are allowed. Maintaining the coupling of nodes for rectangular grids has been illustrated by <ref> [2] </ref> to give the best preconditioners. This also appears to be a good criteria for irregular grids. 4.6: Scalability node CM-5 using the ECL device. Sequential to parallel speedup increases as the number of processors is increased.
Reference: [3] <author> K. Wu, G. Chin, and R. Dutton, </author> <title> A STRIDE Towards Practical 3-D Device Simulation - Numerical and Visualization Considerations, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 10, </volume> <pages> pp. 1132-1140, </pages> <month> Sept. </month> <year> 1991. </year>
Reference: [4] <author> R. Dutton, </author> <title> Algorithms and TCAD Software using Parallel Computation, </title> <booktitle> VPAD Proceedings, </booktitle> <pages> pp. 10-12, </pages> <year> 1993. </year>
Reference: [5] <author> W. Coughran, M. Pinto, and R. Smith, </author> <title> Adaptive Grid Generation for VLSI Device Simulation, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 10, </volume> <pages> pp. 1259-1275, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: However, irregular grids are important in the f ield of device simulations since they allow the modeling of non-rectangular device boundaries and do not require grids for quasi-neutral regions. <ref> [5] </ref> gives an example of a diagonal alpha particle track that would require 2,000,000 rectangular grid points to model accurately whereas a general irregular grid would only require 6900 grid points to achieve the same accuracy.
Reference: [6] <author> G. Heiser, C. Pommerell, J. Weis, and W. Fichtner, </author> <title> Three-Dimensional Numerical Semiconductor Device Simulation: Algorithms, Architectures, Results, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 10, </volume> <pages> pp. </pages> <address> 1218--1230, </address> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: Even with the reduction of grid points obtained by the use of irregular grids, semiconductor simulation still requires significant computational power. A standard latch-up problem, which requires over 50,000 irregular grid nodes, may take f ive hours to simulate on vector machines such as the Cray-2 <ref> [6] </ref>. Other applications such as SOI, parasitic MOSFETs [7], and silicon pixel A Parallel Iterative Linear Solver for Solving Irregular Grid Semiconductor Device Matrices E. Tomacruz, J. Sanghavi, A. Sangiovanni-Vincentelli Department of Electrical Engineering & Computer Sciences, University of California, Berkeley 94720 detectors [8] may require more computational power . <p> be represented as fol lows: problem read-in and setup time integration loop Newton-Raphson loop evaluate the equations for the Jacobian and right-hand side of the Newton iteration solve the associated linear system post-processing of results Matrix generation and linear system solution are the computationally expensive steps of the solution process. <ref> [6] </ref> states that for a typical sequential 3-D simulation with a n p m n m p D n D p R n R p number of grid points of the order of 100,000, between 70 and 90% of the total simulation time is used to solve linear systems. <p> Hence, for the current implementation, linear device matrices are currently generated with the sequential program called Second <ref> [6] </ref>. Box discretization produces coupling between dif fer-ent grid points only if the points are neighbors. Hence, the linear system resulting from the Newton scheme is very sparse with about 10 nonzeroes per row. Each grid node maps into three rows of the matrix. <p> If a Cray-2 is used to run PILS, a 40X performance improvement over Sparc workstation performance is obtained <ref> [6] </ref>. Hence, it can be concluded that a 128 node CM-5 with no vector units will exceed Cray-2 performance for large irregular grid semiconductor drift-dif fusion device simulations. MFLOPS ratings for the solution of device matrices are not useful. <p> The parallel algorithm will require more total oating point operations to converge since paralleliza-tion degrades the quality of the preconditioner. The current implementation uses a sequential matrix generator which takes 10-30% of the total sequential CPU time <ref> [6] </ref>. This should be easy to parallelize since the communication requirement is the same as the matrix times vector operation. Also, the algorithm speed can be further increased with the use of vector units.
Reference: [7] <author> M. Noell, S. Poon, M. Orlowski, and G. Heiser, </author> <title> Study of 3-D Effects in Box Isolation Technologies, </title> <booktitle> SISDEP Proceedings, </booktitle> <pages> pp. 331-340, </pages> <year> 1991. </year>
Reference-contexts: A standard latch-up problem, which requires over 50,000 irregular grid nodes, may take f ive hours to simulate on vector machines such as the Cray-2 [6]. Other applications such as SOI, parasitic MOSFETs <ref> [7] </ref>, and silicon pixel A Parallel Iterative Linear Solver for Solving Irregular Grid Semiconductor Device Matrices E. Tomacruz, J. Sanghavi, A. Sangiovanni-Vincentelli Department of Electrical Engineering & Computer Sciences, University of California, Berkeley 94720 detectors [8] may require more computational power .
Reference: [8] <author> L. Bosisio, F. Forti, and E. Tomacruz, </author> <title> Measurement and Tridimensional Simulation of Silicon Pixel Detector Capacitance, </title> <booktitle> IEEE Nuclear Science Symposium, </booktitle> <volume> Vol. 1, </volume> <pages> pp. 338-342, </pages> <year> 1993. </year>
Reference-contexts: Other applications such as SOI, parasitic MOSFETs [7], and silicon pixel A Parallel Iterative Linear Solver for Solving Irregular Grid Semiconductor Device Matrices E. Tomacruz, J. Sanghavi, A. Sangiovanni-Vincentelli Department of Electrical Engineering & Computer Sciences, University of California, Berkeley 94720 detectors <ref> [8] </ref> may require more computational power . Although faster vector supercomputers may offer the computational power needed, parallel processors provide an attractive alternative. We present a Connection Machine 5 (CM-5) [9] device simulator that uses an irregular grid automatically generated by the Omega program [10,1 1].
Reference: [9] <author> J. Palmer, and G. Steele Jr., </author> <title> Connection Machine Model CM-5 System Overview, </title> <booktitle> IEEE 4th Symp. on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pp. 474-483, </pages> <year> 1992. </year>
Reference-contexts: Tomacruz, J. Sanghavi, A. Sangiovanni-Vincentelli Department of Electrical Engineering & Computer Sciences, University of California, Berkeley 94720 detectors [8] may require more computational power . Although faster vector supercomputers may offer the computational power needed, parallel processors provide an attractive alternative. We present a Connection Machine 5 (CM-5) <ref> [9] </ref> device simulator that uses an irregular grid automatically generated by the Omega program [10,1 1]. For sequential device simulators, the nonlinear algebraic system of equations arising from the discretization is efficiently and accurately solved by a variation of the basic Newton-Raphson algorithm.
Reference: [10] <author> P. Conti, N. Hitschfeld, and W. Fichtner, </author> <title> Omega - An Octree-Based Mixed Element Grid Allocator for the Simulation of Complex 3-D Device Structures, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 10, </volume> <pages> pp. 1231-1241, </pages> <year> 1991. </year>
Reference: [11] <author> N. Hitschfeld, P. Conti, and W. Fichtner, </author> <title> Mixed Element Trees: A Generalization of Modified Octrees for the Generation of Meshes for the Simulation of Complex 3-D Semiconductor Device Structures, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 12, </volume> <pages> pp. 1714-1725, </pages> <month> Nov. </month> <year> 1993. </year>
Reference: [12] <author> C. Pommerell and W. Fichtner, PILS: </author> <title> An Iterative Linear Solver Package for Ill-Conditioned Systems, </title> <booktitle> Supercomput-ing91, </booktitle> <pages> pp. 588-599, </pages> <year> 1991. </year>
Reference-contexts: The focus of our work is to speedup this step. We present heuristics for partitioning, communication scheduling, and preconditioning for the ef ficient implementation of a parallel iterative linear solver . Parallel results are compared with a sequential program called PILS <ref> [12] </ref>. This paper is organized as follows. An overview of the device equations and how they are generally solved is f irst given. Section 3 describes a parallel linear solver . Results are provided and analyzed in Section 4.
Reference: [13] <author> S. Selberherr, </author> <title> Analysis and Simulation of Semiconductor Devices, </title> <publisher> Springer-Verlag, Wien, </publisher> <address> Austria, </address> <year> 1984. </year>
Reference-contexts: Section 3 describes a parallel linear solver . Results are provided and analyzed in Section 4. Finally , conclusions are drawn in Section 5. 2: Problem definition The timedependent drift-diffusion model of semiconductor devices, based on the Poisson equation and the continuity equations for electrons and holes <ref> [13] </ref>, has been used in this paper: where the dependent variables to be determined are the electrostatic potential, , and the electron and hole carrier e y ( ) q p n N d N a -+-( )-= t = t = concentrations, and .
Reference: [14] <author> N. Hitschfeld, K. Kells, P. Conti, </author> <title> Omega 3.0 Users Guide, </title> <institution> Integrated Systems Laboratory, ETH-Zentrum, </institution> <address> Zurich, </address> <year> 1991. </year>
Reference-contexts: For spatial discret-ization, a grid consisting of a mixture of triangular and rectangular pyramids and prisms as provided by the grid generator Omega [10,11] is used. Figure 1 illustrates an ECL device with non-rectangular boundaries which is described further in <ref> [14] </ref>. The Scharfetter-Gummel method [15] along with the box method [16] is then used to obtain the discrete equations. These nonlinear equations are solved using either a fully-coupled or a decoupled Newton method. Trapezoidal/backward difference formula is used for time integration.
Reference: [15] <author> D. Scharfetter and H. Gummel, </author> <title> Large-Signal Analysis of a Silicon Read Diode Oscillator, </title> <journal> IEEE Trans. Electron Devices, </journal> <volume> Vol. 16, </volume> <pages> pp. 64-77, </pages> <year> 1969. </year>
Reference-contexts: For spatial discret-ization, a grid consisting of a mixture of triangular and rectangular pyramids and prisms as provided by the grid generator Omega [10,11] is used. Figure 1 illustrates an ECL device with non-rectangular boundaries which is described further in [14]. The Scharfetter-Gummel method <ref> [15] </ref> along with the box method [16] is then used to obtain the discrete equations. These nonlinear equations are solved using either a fully-coupled or a decoupled Newton method. Trapezoidal/backward difference formula is used for time integration.
Reference: [16] <author> R. Varga, </author> <title> Matrix Iterative Analysis, </title> <publisher> Prentice-Hall, </publisher> <address> Engle-wood Cliffs, NJ, </address> <year> 1962. </year>
Reference-contexts: Figure 1 illustrates an ECL device with non-rectangular boundaries which is described further in [14]. The Scharfetter-Gummel method [15] along with the box method <ref> [16] </ref> is then used to obtain the discrete equations. These nonlinear equations are solved using either a fully-coupled or a decoupled Newton method. Trapezoidal/backward difference formula is used for time integration. The asymmetric linear system of equations is solved using an iterative linear system solver with preconditioning. .
Reference: [17] <author> P. Sonneveld, </author> <title> CGS, A Fast Lanczos-type Solver for Nonsymmetric Linear Systems, </title> <journal> SIAM J. Sci. Stat. Comp., </journal> <volume> Vol. 10, </volume> <pages> pp. 36-52, </pages> <month> Jan. </month> <year> 1989. </year>
Reference-contexts: Modifications of the classical conjugate gradient method such as CGS <ref> [17] </ref> and BiCGSTAB [18] have emerged as preferred solution techniques for drift-diffusion device simulation. We have implemented a preconditioned CGS algorithm that shows rapid and robust convergence behavior.
Reference: [18] <author> H. Van der Vorst, </author> <title> Bi-CGSTAB: a fast and smoothly converging variant of Bi-CG for the solution of nonsymmetric linear systems, </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> Vol. 13, </volume> <pages> pp. 631-644, </pages> <year> 1992. </year>
Reference-contexts: Modifications of the classical conjugate gradient method such as CGS [17] and BiCGSTAB <ref> [18] </ref> have emerged as preferred solution techniques for drift-diffusion device simulation. We have implemented a preconditioned CGS algorithm that shows rapid and robust convergence behavior.
Reference: [19] <author> I. Duff and G. Meurant, </author> <title> The Effect of Ordering on Preconditioned Conjugate Gradients, </title> <journal> BIT, </journal> <pages> pp. 635-657, </pages> <year> 1989. </year>
Reference-contexts: For a sequential preconditioner such as sequential ILU, the ordering of processors is another factor to be considered. The ordering of processors affects the convergence behavior and also determines the amount of parallelism. The Reverse Cuthill-McKee, minimum degree, and maximum degree algorithms <ref> [19] </ref> are implemented for ordering pro cessors and grid nodes within each processor. 3.3: Partitioning 3.3.1: Complexity of the objective function: The goal is to minimize the total elapsed time needed to obtain the solution. <p> Again, the best results are still obtained with perfect node load balance. 4.5.4: Effects of ordering: As mentioned earlier, the Reverse Cuthill-Mckee, minimum degree, and maximum degree algorithms <ref> [19] </ref> are implemented for ordering processors and grid nodes within each processor. No ordering is needed for the processors since the links across processors during preconditioning have been removed for parallel execution.
Reference: [20] <author> M. Berger and S. Bokhari, </author> <title> A Partitioning Strategy for Nonuniform Problems on Multiprocessors, </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. C-36, </volume> <pages> pp. 570-580, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: We investigate the geometrical, topographical, and spectral partitioning heuristics that recursively bipartition <ref> [20] </ref> the graph representing the input mesh structure. Each partitioner has strengths and weaknesses based on the parameters presented above.
Reference: [21] <author> C. Fiduccia and R. Mattheyses, </author> <title> A Linear-Time Heuristic for Improving Network Partitions, </title> <booktitle> Design Automation Conference Proceedings, </booktitle> <volume> Vol. 19, </volume> <pages> pp. 175-181, </pages> <year> 1982. </year>
Reference-contexts: More heuristics may be used to choose the region in which to allow the swapping of nodes. The basic idea is to first swap nodes near the boundary and gradually move in until the desired sum of node degrees balance is obtained. 3.3.4: Topographical partitioner: The Fiduccia-Mat-theyses algorithm <ref> [21] </ref>, which is an improvement of a local search algorithm first presented by [22], is used to implement a topographical partitioner.
Reference: [22] <author> W. Kernighan and S. Lin, </author> <title> An Efficient Heuristic Procedure for Partitioning Graphs, </title> <journal> Bell System Technical Journal, </journal> <pages> pp. 291-307, </pages> <month> Feb. </month> <year> 1970. </year>
Reference-contexts: The basic idea is to first swap nodes near the boundary and gradually move in until the desired sum of node degrees balance is obtained. 3.3.4: Topographical partitioner: The Fiduccia-Mat-theyses algorithm [21], which is an improvement of a local search algorithm first presented by <ref> [22] </ref>, is used to implement a topographical partitioner. The basic algorithm moves a node from one partition to the other partition in an attempt to minimize the cutset while maintaining the load balance between the two partitions within a specified tolerance.
Reference: [23] <author> H. Simon, </author> <title> Partitioning of Unstructured Problems for Parallel Processing, </title> <journal> Computing Systems in Engineering, </journal> <volume> Vol. 2, </volume> <pages> pp. 135-148, </pages> <year> 1991. </year>
Reference-contexts: Ten trials are executed for each partitioning result in order to desensitize the partitioning outcome from the random initial guess. A 5% maximum load balance deviation tolerance is used for each binary partition. 3.3.5: Spectral partitioner: The spectral partitioner <ref> [23] </ref> is based on the computation of the second largest eigenvalue and the corresponding eigenvector of the Laplacian matrix of the connectivity graph. The connectivity graph is the device mesh structure. This eigenvector gives distance information about the nodes.
Reference: [24] <author> Z. Bozkus, S. Ranka, and G. Fox, </author> <title> Benchmarking the CM-5 multicomputer, </title> <booktitle> IEEE 4th Symp. on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pp. 100-107, </pages> <year> 1992. </year>
Reference-contexts: The partition number generated by the partitioner for each subdomain is also used as the processor number. The fat tree network of the CM-5 minimizes the maximum distance between processors <ref> [24] </ref>. Hence, we expect minimal communication penalty for using a simple domain to processor mapping. 3.5: Communication scheduling Given a partition of grid nodes among processors, the abstract model used for scheduling communication is a processor-communication graph.
Reference: [25] <institution> CMMD Reference Manual, Thinking Machines Corporation, Cambridge Massachusetts, </institution> <year> 1992. </year>
Reference-contexts: The algorithms are implemented using the C programming language with the CMMD 3.0 communications library <ref> [25] </ref>. Only blocking communication calls which prevents the overlap of computation and communication are currently used. Several device structures described in [26] are used to study the partitioning schemes described above.
Reference: [26] <author> N. Hitschfeld, P. Conti, and W. Fichtner, </author> <title> Grid Generation for 3-D Nonplanar Semiconductor Device Structures, </title> <booktitle> SIS-DEP Proceedings, </booktitle> <volume> Vol. 4, </volume> <pages> pp. 165-169, </pages> <year> 1991. </year>
Reference-contexts: The algorithms are implemented using the C programming language with the CMMD 3.0 communications library [25]. Only blocking communication calls which prevents the overlap of computation and communication are currently used. Several device structures described in <ref> [26] </ref> are used to study the partitioning schemes described above. ECL is a trench-isolated bipolar transistor, LOCOS is a short channel MOS transistor with surrounding locos isolation, and MCT is a MOS-controlled Thyristor with integrated MOS controlled n+ emitter shorts and a bipolar gate.
Reference: [27] <author> K. Kundert, </author> <title> Sparse Matrix Techniques and Their Application to Circuit Simulation, Circuit Analysis, Simulation, and Design, </title> <editor> A. Ruehli ed., </editor> <publisher> North-Holland, </publisher> <address> New York, NY, </address> <year> 1986. </year>
Reference-contexts: However, PLU is very computationally expensive in the calculation of L and U. This problem is alleviated by introducing an incomplete LU routine with some allowed fill-ins. The fill-ins are kept or discarded depending upon their magnitude. Gausss algorithm <ref> [27] </ref> described in Section 3.2 is used to generate the incomplete LU decomposition. Fill-ins are generated in Step 4 of the algorithm.
References-found: 27

