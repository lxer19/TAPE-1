URL: http://www.cs.gatech.edu/reverse/repository/uif_migration.ps
Refering-URL: http://www.cs.gatech.edu/reverse/repos.html
Root-URL: 
Email: spencer@cc.gatech.edu  
Title: User Interface Migration  
Author: Melody Moore Spencer Rugaber Phil Seaver 
Keyword: User Interface, reengineering, migration, reverse engineering, knowledge-based  
Address: Atlanta, Georgia 30332-0280 (v) (404) 894-8450 (f) (404) 853-9378  
Affiliation: College of Computing Georgia Institute of Technology  
Note: Knowledge-based  1.0 Introduction  
Abstract: Experience Report Abstract: A significant problem in reengineering large systems is adapting the user interface to a new environment. Often, drastic changes in the user interface are inevitable, as in migrating a text-based system to a workstation with Graphical User Interface capabilities. This experience report chronicles a study of user interface migration issues, examining and evaluating current tools and techniques. It also describes a case study undertaken to explore the use of knowledge engineering to aid in migrating interfaces across platforms. Imagine the following scenario: your software development group has just inherited responsibility for a personal computer (PC)-based personal information system. But your company is moving from PCs to workstations, and the program must be migrated. Compounding the problem is the fact that the user interface technology in the PC version is proprietary and will have to be replaced. Of course your users want identical functionality and a user interface that looks as much like the PC version as possible. What do you recommend? The scenario above typifies the user interface migration problem. Other variants include grafting a graphical user interface (GUI) onto a batch application, upgrading character-oriented display software to bit-mapped workstations, and keeping software up-to-date with respect to industry standards. Commercial software vendors are aware of the opportunities opened up by user interface migration, and they have proposed a variety of solutions that are discussed in Section II. While these products may help solve a part of the problem, they also are significantly limited in their power and exibility. In particular, they provide only a superficial understanding of the underlying user interface technology, and consequently they lack the knowledge to do a better job. 
Abstract-found: 1
Intro-found: 0
Reference: [ARA91] <author> Arango, Guillermo, and Prieto-Diaz, Ruben, </author> <title> Domain Analysis and Software Systems Modeling, </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: Radio buttons exhibit the properties of buttons, but also are mutually exclusive, which can be a property of widgets other than buttons. The process of characterizing user interface widgets and developing an ontology to support migration is an instance of domain analysis <ref> [ARA91] </ref>. In our particular case, we have used a knowledge engineering approach to domain analysis. Knowledge engineering consists of two parts: knowledge representation and inferencing. Knowledge representation describes what is known about a domain in such a way that inferencing is facilitated.
Reference: [BAL93] <author> Baldwin, Howard. </author> <title> Open Look to Motif Converters, </title> <booktitle> Open Systems Today, </booktitle> <month> October 25, </month> <year> 1993. </year>
Reference-contexts: Therefore customization of the new interface is not possible. However, this solution does support legacy code migration to different platforms, since the original GUI is used to describe the new GUI. 2.2.4 Translation A related migration technique is pure translation, as implemented by tools such as ACCENT STP <ref> [BAL93] </ref>. The original code is modified to substitute new GUI calls for original interface components.
Reference: [BRA90] <author> Brachman, Ronald J, McGuiness, Deborah L., Patel-Schneider, Peter, and Resnick, Lori Alperin, </author> <title> Living with CLASSIC: When and How to Use a KL-ONE-Like Language, </title> <institution> AT&T Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <month> June 8, </month> <year> 1990. </year>
Reference-contexts: We are interested in automating this process and decided to take advantage of an existing knowledge representation tool called CLASSIC. The next section describes CLASSIC and gives examples of its use in modeling the UI domain. 4.0 Domain Analysis with CLASSIC 4.1 CLASSIC CLASSIC <ref> [BRA90] </ref> is a knowledge representation language whose lineage includes Kandor and KL-ONE. Its domain of discourse includes concepts, roles and fillers, which correspond roughly to the object-oriented terms class, attribute, and value. CLASSIC concepts are organized into an inheritance hierarchy, and multiple inheritance is supported.
Reference: [CRC93] <institution> Construction Research Center, Georgia Institute of Technology, </institution> <note> Knowledge Worker System Version 1.60 Users Manual, </note> <institution> Prepared under U.S. Army contract number DACA88-90-0040-0010, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: The application to be migrated was the Knowledge Worker System (KWS) <ref> [CRC93] </ref>. It is a distributed organizing and scheduling tool that allows workers to keep track of work assignments and tasks. It also provides schedule notification and a scripting feature to allow tasks to be automated.
Reference: [FOL91] <author> Foley, James, Kim, Won Chul, Kovacevic, Srdjan, and Murray, Kevin, </author> <title> UIDE - an Intelligent User Interface Design Environment, Intelligent User Interfaces, edited by Sullivan & Tyler, </title> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference-contexts: Some GUI builders go a step further and allow the developer to associate code with the user interface actions directly (these tools are classified as User Interface Management Systems, or UIMSs <ref> [FOL91] </ref>). GUI builders can drastically speed up the development process since much of the code can be generated automatically. However, the graphical editor tools can only provide a subset of the options available to a developer for a given GUI.
Reference: [GT94] <institution> Cross Platform Development Workshop, College of Computing, Georgia Institute of Technology, </institution> <month> March 1, </month> <year> 1994. </year>
Reference-contexts: There is no support for legacy code, but once the code is developed in the abstract representation, migration across platforms is automated by the tool itself. Drawbacks of these tools, reported from developers that have used them <ref> [GT94] </ref>, indicate that the abstraction mechanisms tend to force the GUI to be described in terms that are too general.
Reference: [HEL92] <author> Heller, Dan, </author> <title> Motif Programming Manual, </title> <publisher> OReilly and Associates, Inc. </publisher> <year> 1992. </year>
Reference-contexts: August 11, 1994 2 We are exploring the use of knowledge engineering and knowledge-based tools to address the problem of user interface (UI) migration. In particular, we are designing a knowledge base that describes in detail not only existing UI toolkits like MS-Windows [REC92] and Motif <ref> [HEL92] </ref>, but also provides a framework into which non-graphical interfaces can be mapped.
Reference: [MER03]] <author> Merlo, E., Girard, J.F., Kontogiannis, K., Panangaden, P., and De Mori, R., </author> <title> Reverse Engineering of User Interfaces, </title> <booktitle> Proceedings of the Working Conference on Reverse Engineering, </booktitle> <address> May 21-23 1993, Baltimore, MD. </address> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference: [MOO93] <author> Moore, Melody, Rugaber, Spencer, and Astudillo, Hernan. </author> <title> Knowledge Worker Platform Analysis Final Report, prepared for the U.S. </title> <institution> Army Construction Engineering Research Laboratory (USACERL) under U.S. Army Contract Number: DACA88-90-D-0040-0010, </institution> <month> July 23, </month> <year> 1993. </year>
Reference-contexts: The exercise was mostly manual. We took advantage of an existing palette-based UI builder called Devguide, a graphical interface builder for Suns OLIT interface. A student was asked to design a UI for KWS using Devguide that was as close as possible to the original MS-Windows implementation <ref> [MOO93] </ref>. He observed that the fundamental problem in migrating the user interface was preserving the functionality of the original interface while accommodating the differing stylistic conventions of MS-Windows and Sunview. We are interested in automating this process and decided to take advantage of an existing knowledge representation tool called CLASSIC.
Reference: [REC92] <author> Rector, Brent E., </author> <title> Developing Windows 3.1 Applications with Microsoft C/C++, SAMS, </title> <publisher> Prentice Hall Publishing, </publisher> <year> 1992. </year>
Reference-contexts: August 11, 1994 2 We are exploring the use of knowledge engineering and knowledge-based tools to address the problem of user interface (UI) migration. In particular, we are designing a knowledge base that describes in detail not only existing UI toolkits like MS-Windows <ref> [REC92] </ref> and Motif [HEL92], but also provides a framework into which non-graphical interfaces can be mapped. <p> Our contribution consists of a framework in which the term functionality is meaningful. For example, the MS-Windows documentation describes a bs-autocheckbox as a check-box-style button that automatically toggles its state when clicked <ref> [REC92] </ref>. Stated this way, it would be hard to determine which, if any, of the Motif widgets satisfy the criteria. However, when expressed in the terms of the widget ontology we have defined, the widget can be described as a pushbutton with two states, state feedback, and an associated action.
Reference: [SUI93] <author> Little, Marie. </author> <title> The Simple User Interface Toolkit (SUIT), </title> <institution> Computer Science Department, University of Virginia, </institution> <year> 1993. </year>
Reference-contexts: The lack of automation for the reverse engineering process makes it tedious, error-prone, and time-consuming. 2.2.2 Abstract Application Programming Interfaces Other tools, such as XVT [XVT93] and SUIT <ref> [SUI93] </ref>, rely on a custom abstraction model for a generic user interface description. The developer describes the functionality of the user interface in an intermediate representation, and then the tool generates the actual code for the cross-platform GUI.
Reference: [VAN93] <author> Van Sickle, Larry, Liu, Zheng Yang, and Ballantyne, Michael, </author> <title> Recovering User Interface Specifications for Porting Transaction Processing Applications, </title> <institution> EDS Research, Austin Laboratory, 1601 Rio Grande, </institution> <address> Suite 500, Austin TX 78701, </address> <year> 1993. </year>
Reference-contexts: The systems detects anchor points for code fragments by matching user interface syntactic patterns in the code. Using the anchor points as a basis, details about modes of interaction and conditions of activation are identified using control ow analysis. Syntactic/Semantic Analysis - In <ref> [VAN93] </ref>, Van Sickle et. al. describe a method for detecting user input blocks from COBOL code by analyzing the code against a set of criteria for input and output. The recognition algorithm identifies an ACCEPT statement and attempts to incorporate the entire user exchange from that point by detecting groupings.
Reference: [WAG93] <author> Wagner, Mitch, </author> <title> New IXI Software Will Give Motif Apps Look and Feel of Microsoft Windows, Open Systems Today, </title> <journal> Oct. </journal> <volume> 11, </volume> <year> 1993. </year> <month> August 11, </month> <year> 1994 </year> <month> 14 </month>
Reference-contexts: To migrate the application to another platform, libraries can be substituted to support the new GUI interface, retaining the same library calls. For example the Win-tif <ref> [WAG93] </ref> software provides the Motif library, but creates a Microsoft Windows interface. Therefore, a Motif application can look like a Windows application by substituting the library calls. Problems with this technique occur because different GUI technologies are not completely compatible. Motif is not a subset of MS-Windows or vice versa.
Reference: [WIL90] <author> Wills, Linda Mary. </author> <title> Automated Program Recognition: A Feasibility Demonstration, </title> <booktitle> Artificial Intelligence, </booktitle> <publisher> Elsevier Science Publishers B.V., (North-Holland), </publisher> <year> 1990. </year>
Reference-contexts: Our approach centers on developing a rule base to detect user interface components from legacy systems. This rule base may then be used with other program understanding techniques, such as Cliche recognition <ref> [WIL90] </ref>, The final observation has to do with the range of applicability of our solution approach. In particular, we believe the approach can easily be extended to deal with the upgrading of applications that currently do not contain a GUI.
Reference: [XSI93] <author> Information Presentation Technologies and Xcelerated Systems, Inc., </author> <title> Partner and Liken Provide Interoperability and Application Compatibility for Networks of Suns and Macs, </title> <address> Florida SunFlash, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: However, since the code is available to be modified, customization is possible. This solution specifically supports legacy code because the original GUI is translated to the new GUI. 2.2.5 Emulation A final technique for cross-platform migration is emulation. Several emulators, such as Liken <ref> [XSI93] </ref>, which emulates the MacIntosh interface on X Windows, are available. These emulators require no modification to the original application code, since the application runs on top of an emulation of its native environment. While this solution is simple, it does not address the native look-and-feel problem.
Reference: [XVT93] <author> Meyer, Scott, Oberg, Roger, and Walton, Doug. </author> <title> XVT Technical Overview, </title> <institution> XVT Software Inc., 4900 Pearl East Circle, Boulder Colorado, </institution> <month> 80301, </month> <year> 1993. </year>
Reference-contexts: The lack of automation for the reverse engineering process makes it tedious, error-prone, and time-consuming. 2.2.2 Abstract Application Programming Interfaces Other tools, such as XVT <ref> [XVT93] </ref> and SUIT [SUI93], rely on a custom abstraction model for a generic user interface description. The developer describes the functionality of the user interface in an intermediate representation, and then the tool generates the actual code for the cross-platform GUI.
References-found: 16

