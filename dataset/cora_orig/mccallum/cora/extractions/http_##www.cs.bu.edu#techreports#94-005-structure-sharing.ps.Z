URL: http://www.cs.bu.edu/techreports/94-005-structure-sharing.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: shaban@cs.bu.edu  
Title: Structure Sharing and Parallelization in a GB Parser  
Author: Marwan Shaban 
Address: 111 Cummington Street Boston, MA 02215  
Affiliation: Computer Science Department Boston University  
Date: March 22, 1994  
Pubnum: BU-CS Tech Report 94-005  
Abstract: By utilizing structure sharing among its parse trees, a GB parser can increase its efficiency dramatically. Using a GB parser which has as its phrase structure recovery component an implementation of Tomita's algorithm (as described in [Tom86]), we investigate how a GB parser can preserve the structure sharing output by Tomita's algorithm. In this report, we discuss the implications of using Tomita's algorithm in GB parsing, and we give some details of the structure-sharing parser currently under construction. We also discuss a method of parallelizing a GB parser, and relate it to the existing literature on parallel GB parsing. Our approach to preserving sharing within a shared-packed forest is applicable not only to GB parsing, but anytime we want to preserve structure sharing in a parse forest in the presence of features. 
Abstract-found: 1
Intro-found: 1
Reference: [dM94] <author> Carl de Marcken. </author> <title> Methods for parallelizing search paths in parsing. </title> <type> AI Memo 1453, </type> <institution> A.I. Laboratory, Massachusetts Institute of Technology, </institution> <year> 1994. </year> <month> 38 </month>
Reference-contexts: Thus, in the best case, the performance gain of using compact forests is equal to the product of the branching factors of the parser's generators, minus the overhead of using compact forests. Similar speedups were obtained by de Marcken <ref> [dM94] </ref> by applying memoization techniques to a GB parser's modules. de Marcken's optimization was generalized to handle any generate-and-test search problem, not just GB parsing. de Marcken's solution and the solution presented by this paper, in effect, solve the same problem but approach it in different ways, and have different overhead <p> In addition, we must deal with issues of process synchronization and interprocess communication, which will impose additional overhead. Past work on parallelization of GB parsing was done by de Marcken <ref> [dM94] </ref>, Kuhns [Kuh90], and [Mil92]. Kuhns' approach was to use the parallel programming language PARLOG to coroutine certain GB operations. His research as reported in [Kuh90] was not yet fully implemented, and it was not clear to what extent his system successfully parallelized the execution of GB modules.
Reference: [Fon91] <author> Sandiway Fong. </author> <title> Computational Properties of Principle-Based Grammatical Theories. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, MIT, </institution> <address> Cambridge, Mass., </address> <year> 1991. </year>
Reference-contexts: In Fong's concluding remarks on principle interleaving (on page 207 of <ref> [Fon91] </ref>), he gives a rather bleak outlook for principle interleaving: "To make interleaving a considerably more attractive model, it seems that a large reduction in the amount of garden-pathing during phrase structure construction is necessary. <p> While it is possible to convert an epsilon-grammar into one without epsilon-productions, it is unacceptable to do this both on grounds of faithfulness and clarity. Fong's solution, described on pages 142-145 of <ref> [Fon91] </ref>, depends on an off-line analysis of the s-structure grammar to deduce which nonterminals may cause a problem, and how. Fong then uses a new "structure" stack which holds housekeeping information used by specially-coded hooks in the LR parser.
Reference: [KK85] <author> Lauri Karttunen and Martin Kay. </author> <title> Structure Sharing with Binary Trees. </title> <booktitle> In Proceedings of the 23rd Annual Meeting of the ACL. Association for Computational Linguistics, </booktitle> <year> 1985. </year>
Reference-contexts: In the case of our above example, the relative address would be "Go up one node, then take the leftmost branch down (to reach the A node), then take the leftmost branch down (to reach the proper governor)." A similar relative addressing scheme was devised by Karttunen and Kay (see <ref> [KK85] </ref>), but 12 wasn't used for this exact purpose in their system. We adopt their relative addressing idea to preserve our structure sharing and extend it to allow for node packing.
Reference: [Kuh90] <author> Robert J. Kuhns. </author> <title> A PARLOG Implementation of Government-Binding Theory. </title> <booktitle> In Proceedings of COLING '90. Association for Computational Linguistics, </booktitle> <year> 1990. </year>
Reference-contexts: In addition, we must deal with issues of process synchronization and interprocess communication, which will impose additional overhead. Past work on parallelization of GB parsing was done by de Marcken [dM94], Kuhns <ref> [Kuh90] </ref>, and [Mil92]. Kuhns' approach was to use the parallel programming language PARLOG to coroutine certain GB operations. His research as reported in [Kuh90] was not yet fully implemented, and it was not clear to what extent his system successfully parallelized the execution of GB modules. <p> Past work on parallelization of GB parsing was done by de Marcken [dM94], Kuhns <ref> [Kuh90] </ref>, and [Mil92]. Kuhns' approach was to use the parallel programming language PARLOG to coroutine certain GB operations. His research as reported in [Kuh90] was not yet fully implemented, and it was not clear to what extent his system successfully parallelized the execution of GB modules. His parser was deterministic in the sense that it did not pursue different parse paths simultaneously.
Reference: [Mil92] <author> Sebastian Millies. </author> <title> Modularity, Parallelism, and Licensing in a Principle-Based Parser for German. </title> <booktitle> In Proceedings of COLING '92. Association for Computational Linguistics, </booktitle> <year> 1992. </year>
Reference-contexts: In addition, we must deal with issues of process synchronization and interprocess communication, which will impose additional overhead. Past work on parallelization of GB parsing was done by de Marcken [dM94], Kuhns [Kuh90], and <ref> [Mil92] </ref>. Kuhns' approach was to use the parallel programming language PARLOG to coroutine certain GB operations. His research as reported in [Kuh90] was not yet fully implemented, and it was not clear to what extent his system successfully parallelized the execution of GB modules.
Reference: [NF91] <author> Rahman Nozohoor-Farshi. </author> <title> GLR parsing for *-grammars. In Masaru Tomita, editor, Generalized LR Parsing. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, </address> <year> 1991. </year>
Reference-contexts: If the s-structure grammar changes, the off-line analysis must be redone to make sure that the LR parser will still handle the epsilon-production-containing grammar correctly. A better solution would be to modify Tomita's algorithm to handle epsilon-productions. Farshi <ref> [NF91] </ref> gives a recognizer based on Tomita's algorithm which handles a larger class of epsilon-grammars than Tomita's algorithm. We converted Farshi's algorithm into a parsing algorithm, and using it, 10 are able to avoid most of the trouble that Fong went to. 1 However, there remains a problem.
Reference: [Per85] <author> Fernando Pereira. </author> <title> A Structure-Sharing Representation for Unification-Based Grammar Formalisms. </title> <booktitle> In Proceedings of the 23rd Annual Meeting of the ACL. Association for Computational Linguistics, </booktitle> <year> 1985. </year>
Reference: [Sha93] <author> Marwan Shaban. </author> <title> A Minimal GB Parser. </title> <type> Technical Report 93-013, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, Mass., </address> <year> 1993. </year>
Reference: [Sha94] <author> Marwan Shaban. </author> <title> A Hybrid GLR Algorithm for Parsing with Epsilon Grammars. </title> <type> Technical Report 94-004, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, Mass., </address> <year> 1994. </year>
Reference-contexts: Thus, the principle of non-discrimination can be stated as follows. Principle of Non-Discrimination: Every shared node X must hold the same relationships with each tree sharing X. 1 See <ref> [Sha94] </ref> for the details of our extensions to Farshi's algorithm. 11 It is important to note that by "shared node", we don't mean only nodes that have multiple immediate ancestors.
Reference: [Tom86] <author> Masaru Tomita. </author> <title> Efficient Parsing for Natural Language. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, </address> <year> 1986. </year>
Reference-contexts: Fong's scheme achieves a limited degree of parse tree sharing by passing fragments constructed before a "fork" in the search space into each branch, so during the exploration of each of the branches, the same fragment (which was 7 constructed before the fork was encountered) is used. In <ref> [Tom86] </ref>, Tomita presents a parser which maintains a tree-structured stack, and is similar to Fong's parser in that respect. However, the stack trees of the two parsers are rooted at different ends. <p> However, the question seems rather moot because of the obvious superiority of the graph-structured stack mechanism over both tree-structured stack mechanisms. 3.3 The Benefits of Using a Graph-Structured Stack Tomita <ref> [Tom86] </ref> showed that the use of a graph-structured stack is superior to using a tree-structured stack by virtue of reducing the amount of work used to traverse the search space for a parse.
Reference: [Tom91a] <author> Masaru Tomita, </author> <title> editor. Generalized LR Parsing. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, </address> <year> 1991. </year> <month> 39 </month>
Reference: [Tom91b] <author> Masaru Tomita. </author> <title> The generalized LR parsing algorithm. In Masaru Tomita, editor, Generalized LR Parsing. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, </address> <year> 1991. </year> <month> 40 </month>
References-found: 12

