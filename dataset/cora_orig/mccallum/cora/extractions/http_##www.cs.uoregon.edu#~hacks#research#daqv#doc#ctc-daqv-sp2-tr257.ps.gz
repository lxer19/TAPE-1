URL: http://www.cs.uoregon.edu/~hacks/research/daqv/doc/ctc-daqv-sp2-tr257.ps.gz
Refering-URL: http://www.cs.uoregon.edu/~hacks/research/daqv/doc/index.html
Root-URL: http://www.cs.uoregon.edu
Title: Porting the Distributed Array Query and Visualization Tool for High Performance Fortran to the SP2  
Author: David Presberg and Christopher Jaeger 
Keyword: multiprocessors, parallel programming tools, data access, DAQV, data distribution, data parallel, Fortran, HPF, SP2, SPMD  
Note: CTC96TR257  
Date: August 23, 1996  
Affiliation: Cornell Theory Center  
Abstract: Distributed Array Query and Visualization (DAQV) is a Parallel Tools Consortium sponsored project to create a tool for visualizing distributed data in High Performance Fortran (HPF). The DAQV tool is currently maintained at the University of Oregon, and our goals here at the Cornell Theory Center (CTC) are to verify the work done by the people there, and port the DAQV tool and its associated visualization clients to our IBM SP2 and IBM's HPF compiler, XL HPF. We describe in this paper the installation of the DAQV tool first on an SGI Onyx, using Portland Group Inc.'s HPF compiler, pghpf, which was already supported by DAQV. We make various modifications to the distribution to generalize the installation, and then port the DAQV tool to the IBM SP2, also using the pghpf compiler. Finally, we accomplish the port of DAQV to IBM's XL HPF compiler. We describe our approaches to overcoming various obstacles encountered in the porting process. These include re-analyzing the DAQV design to accommodate distinctions between the pghpf and XL HPF compiler run time implementations. The end result is not a single portable reference implementation of the DAQV tool, as was originally planned, but rather two different portable implementations that demonstrate different ways in which a vendor may choose to perform the gathering of distributed data from HPF programs in a DAQV-like tool. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Donna Bergmark and Marcia Pottle. </author> <title> Optimization and Parallelization of a Commodity Trade Model for the IBM SP1/2, Using Parallel Programming Tools. </title> <type> Technical Report CTC94TR181, </type> <institution> Cornell Theory Center, </institution> <month> July </month> <year> 1994. </year> <note> URL http://www.tc.cornell.edu/Dienst/UI/2.0/Describe/ncstrl.cornell.tc%2f94-181. </note>
Reference-contexts: Steven Hackstadt had put together a simple two-dimensional heat diffusion HPF program [12] (Laplace) and made the un-instrumented source publicly available. Here at CTC, we also have a commodity trade model program <ref> [1] </ref> that is used as a case study in HPF programming (Tariff). We obtained the source for these two programs and instrumented them using DAQV to display the surface array in Laplace and the demand, supply, and tar (tariff value) arrays in Tariff.
Reference: [2] <institution> The Parallel Tools Consortium. </institution> <note> The Parallel Tools Consortium Homepage. URL http://www-ptools.llnl.gov/ptools.html. </note>
Reference-contexts: The latter version of the PULL mode is heavily dependant on compiler support though, and thus may not be available for use with every HPF compiler. 1.2 Goals for DAQV Porting Project at Cornell Theory Center All Parallel Tools Consortium projects <ref> [2] </ref> are required to have reference implementations on at least two target platforms. HPF was the committed programming language for the application programs with which DAQV was to be used, and HPF language systems are relatively young in the field.
Reference: [3] <author> PTools Meeting Summary, </author> <title> Distributed Array Query and Visualization (DAQV) Project, </title> <month> May </month> <year> 1995. </year> <note> URL http://www.cs.uoregon.edu/ hacks/research/ptools-daqv/updates/95-daqv-summary.html. </note>
Reference-contexts: Unfortunately, Prism is a proprietary product, and while Thinking Machines is currently marketing GlobalWorks for a variety of environments, there isn't general availability of the Prism-like features on enough other platforms. In fact, as the proposal for the DAQV project was being debated at the 1995 PTOOLS general meeting <ref> [3] </ref>, there was a general cry for "Prism-like features". But for the purposes of a Parallel Tools Consortium project, Prism's design was not appropriate because its internals and interfaces are proprietary to the vendor.
Reference: [4] <author> CST Images, Inc., </author> <title> CST Images, </title> <publisher> Inc., </publisher> <address> 3836 Browning Street, San Diego, CA 92107. </address> <note> VIA, The Visual Information Analyzer: User's Guide for Version 4.1, April 1996. URL ftp://ftp.netcom.com/pub/cs/cstimage/www/products.html. </note>
Reference-contexts: But for the purposes of a Parallel Tools Consortium project, Prism's design was not appropriate because its internals and interfaces are proprietary to the vendor. Since the inception of the DAQV project, another tool has come to the attention of CTC: VIA, The Visual Information Analyzer <ref> [4] </ref>. This is generalized to both Fortran and C programming, but doesn't have any particular commitment to HPF. VIA is an instrumentation library much as the DAQV server is.
Reference: [5] <author> High Performance Fortran Forum. </author> <title> High Performance Fortran Language Specification Version 1.0, </title> <month> May </month> <year> 1993. </year> <note> URL http://www.crpc.rice.edu/HPFF/hpf1/index.html. </note>
Reference-contexts: The INHERIT directive is an official part of the HPF standard <ref> [5] </ref>, and is required for the general case where the user would like to pass an array decomposed in any manner to another subroutine which does not specify a specific mapping for that dummy array argument, and have the subroutine treat the dummy array argument as if it were decomposed in
Reference: [6] <author> High Performance Fortran Forum. </author> <title> High Performance Fortran Language Specification Version 1.1, </title> <month> November </month> <year> 1994. </year> <note> URL http://www.crpc.rice.edu/HPFF/hpf1/index.html. </note>
Reference-contexts: For more information on Distributed Array Query and Visualization, please see [12, 17, 10, 9, 8, 11]. Distributed Array Query and Visualization (DAQV), is a tool that allows users of High Performance Fortran (HPF) <ref> [6] </ref> to access data stored in distributed arrays during the execution of a program. The data may then be inspected or visualized, depending upon the user's desires. <p> However, the INHERIT directive is not part of the HPF subset <ref> [6] </ref>, as the standards committee felt that INHERIT might be a bit difficult to implement, and they wished to help compiler vendors get early HPF compilers out as early as possible [6]. <p> However, the INHERIT directive is not part of the HPF subset <ref> [6] </ref>, as the standards committee felt that INHERIT might be a bit difficult to implement, and they wished to help compiler vendors get early HPF compilers out as early as possible [6]. The INHERIT directive is used by DAQV in the server subroutines that are in charge of actually marshalling the data values to processor 0 in order for them to then be sent over sockets to the DAQV client program (s). <p> The HPF standard also specifies an HPF LOCAL library of routines <ref> [6] </ref> that may be called by Fortran subroutines that are declared as EXTRINSIC (HPF LOCAL). EXTRINSIC (HPF LOCAL) subroutines allow the HPF programmer to escape from the normal SPMD model of HPF program execution, and have each processor proceed along different instruction paths.
Reference: [7] <author> S. Grabner and R. Koppler. </author> <title> GDDT A Graphical Data Distribution Tool. </title> <booktitle> In Proceedings of ICOLE'94, </booktitle> <address> Lessach, Austria, </address> <month> September </month> <year> 1994. </year> <note> Workshop. </note>
Reference-contexts: If it were desired to use VIA with an HPF program, an EXTRINSIC (HPF LOCAL) "cover" layer would have to be written. VIA is under evaluation at CTC. GDDT <ref> [16, 7] </ref> is a research tool from GUP Linz, Johannes Kepler University Linz, Austria. It is part of the Vienna Fortran system, and although GDDT can handle HPF, it needs the infrastructure of the Vienna Fortran Compilation System.
Reference: [8] <author> Steven Hackstadt. </author> <title> HPF/DAQV Event Protocol. </title> <address> URL http://www.cs.uoregon.edu/~hacks/research/daqv/doc/prot/index.html. </address>
Reference-contexts: For more information on Distributed Array Query and Visualization, please see <ref> [12, 17, 10, 9, 8, 11] </ref>. Distributed Array Query and Visualization (DAQV), is a tool that allows users of High Performance Fortran (HPF) [6] to access data stored in distributed arrays during the execution of a program. The data may then be inspected or visualized, depending upon the user's desires.
Reference: [9] <author> Steven Hackstadt. </author> <title> HPF/DAQV Event Specification. </title> <address> URL http://www.cs.uoregon.edu/~hacks/research/daqv/doc/event.html. </address>
Reference-contexts: For more information on Distributed Array Query and Visualization, please see <ref> [12, 17, 10, 9, 8, 11] </ref>. Distributed Array Query and Visualization (DAQV), is a tool that allows users of High Performance Fortran (HPF) [6] to access data stored in distributed arrays during the execution of a program. The data may then be inspected or visualized, depending upon the user's desires.
Reference: [10] <author> Steven Hackstadt. </author> <title> HPF/DAQV Procedural Interface. </title> <address> URL http://www.cs.uoregon.edu/~hacks/research/daqv/doc/proc.html. </address>
Reference-contexts: For more information on Distributed Array Query and Visualization, please see <ref> [12, 17, 10, 9, 8, 11] </ref>. Distributed Array Query and Visualization (DAQV), is a tool that allows users of High Performance Fortran (HPF) [6] to access data stored in distributed arrays during the execution of a program. The data may then be inspected or visualized, depending upon the user's desires.
Reference: [11] <author> Steven Hackstadt. </author> <title> Distributed Array Query and Visualization Adopter's Guide Version 0.9. </title> <note> URL http://www.cs.uoregon.edu/~hacks/research/daqv/doc/adopt/index.html, July 1996. </note>
Reference-contexts: For more information on Distributed Array Query and Visualization, please see <ref> [12, 17, 10, 9, 8, 11] </ref>. Distributed Array Query and Visualization (DAQV), is a tool that allows users of High Performance Fortran (HPF) [6] to access data stored in distributed arrays during the execution of a program. The data may then be inspected or visualized, depending upon the user's desires.
Reference: [12] <author> Steven T. Hackstadt and Allen D. Malony. </author> <title> Distributed Array Query and Visualization for High Performance Fortran. </title> <type> Technical Report CIS-TR-96-02, </type> <institution> University of Oregon, </institution> <month> February </month> <year> 1996. </year> <note> URL http://www.cs.uoregon.edu/~hacks/research/daqv/doc/cis-tr-96-02/index.html. </note>
Reference-contexts: For more information on Distributed Array Query and Visualization, please see <ref> [12, 17, 10, 9, 8, 11] </ref>. Distributed Array Query and Visualization (DAQV), is a tool that allows users of High Performance Fortran (HPF) [6] to access data stored in distributed arrays during the execution of a program. The data may then be inspected or visualized, depending upon the user's desires. <p> Array access is achieved by instrumenting an HPF program with calls to the DAQV server, a library that is linked with the HPF program before execution. DAQV allows the user to access data in two different major modes <ref> [12] </ref>. The first mode is PUSH mode, where the HPF program sends the distributed array data out at predetermined times while executing. <p> To that end, Hackstadt made the interface between client programs and the DAQV library server fairly 4 clean. All data passed along socket connections from the DAQV server to the client programs is ASCII data, which may be translated by a parser that follows the grammar that Hackstadt <ref> [12] </ref> has written. <p> In order to be able to demonstrate the use of DAQV to potential users, we wished to obtain applications that were a bit more realistic. Steven Hackstadt had put together a simple two-dimensional heat diffusion HPF program <ref> [12] </ref> (Laplace) and made the un-instrumented source publicly available. Here at CTC, we also have a commodity trade model program [1] that is used as a case study in HPF programming (Tariff).
Reference: [13] <author> IBM. </author> <title> IBM Parallel Environment for AIX: MPI Programming and Subroutine Reference Version 2, Release 1, </title> <booktitle> first edition, </booktitle> <month> August </month> <year> 1995. </year> <month> GC23-3894-00. </month>
Reference-contexts: While browsing through IBM's manuals, we discovered a note in the section on the IBM Parallel Environment <ref> [13] </ref> that told us that the MPI calls used to perform communication in HPF programs could interrupt certain blocking system calls, like listen (), through the use of signals.
Reference: [14] <author> IBM. </author> <title> XL High Performance Fortran for AIX User's Guide, </title> <note> Version 1 Release 1, first edition, </note> <month> March </month> <year> 1996. </year> <month> SC09-2228-00. </month>
Reference-contexts: This too can be accounted for. With regards to HPF, however, the problem of inter-language calls becomes much more complicated. In fact, The IBM XL HPF manual states that you may not call HPF or HPF LOCAL routines from C, or vice-versa <ref> [14] </ref>. The DAQV library requires this ability though, since C abilities are used for registration of arrays and socket communication, and HPF abilities are used to control data movement.
Reference: [15] <author> Doug Kimelman, Pradeep Mittal, Edith Schonberg, Peter F. Sweeney, Ko-Yang Wang, and Dror Zernik. </author> <title> Visualizing the Execution of High Performance Fortran (HPF) Programs. </title> <address> URL http://www.almaden.ibm.com/watson/pv/ipps95abs.html. </address>
Reference-contexts: Finally, research at the IBM TJ Watson Research Lab produced a prototype tool for visualizing data in running HPF programs <ref> [15] </ref>. This was strongly tied to the structure of the IBM Research HPF Compiler, and was not represented to be portable to other systems. The current situation is that DAQV can now be a reference for vendors to create proprietary optimized tools for each of their HPF language processing systems.
Reference: [16] <author> R. Koppler, S. Grabner, and J. Volkert. </author> <title> Visualization of Distributed Data Structures for HPF-like Languages. </title> <note> To be published in Scientific Programming, spec. issue on implentations of High-Performance-Fortran. 15 </note>
Reference-contexts: If it were desired to use VIA with an HPF program, an EXTRINSIC (HPF LOCAL) "cover" layer would have to be written. VIA is under evaluation at CTC. GDDT <ref> [16, 7] </ref> is a research tool from GUP Linz, Johannes Kepler University Linz, Austria. It is part of the Vienna Fortran system, and although GDDT can handle HPF, it needs the infrastructure of the Vienna Fortran Compilation System.
Reference: [17] <author> Allen Malony, John May, Alan Karp, David Presberg, and Vince Schuster. </author> <title> PTOOLS Project Proposal: Dis--tributed Array Query and Visualization, </title> <month> January </month> <year> 1995. </year> <note> URL http://www.cs.uoregon.edu/ hacks/research/daqv/doc/proposal/. </note>
Reference-contexts: For more information on Distributed Array Query and Visualization, please see <ref> [12, 17, 10, 9, 8, 11] </ref>. Distributed Array Query and Visualization (DAQV), is a tool that allows users of High Performance Fortran (HPF) [6] to access data stored in distributed arrays during the execution of a program. The data may then be inspected or visualized, depending upon the user's desires.
Reference: [18] <institution> Thinking Machines, Inc. GlobalWorks Software Environment Technical Summary. </institution> <note> URL http://www.think.com/Prod.web/GWsoft/techsum/prism.html. 16 </note>
Reference-contexts: There is an abundance of tooling for post-execution, scientific data visualization, but this was too "heavy weight" for the usual problem of tuning and possibly debugging at the data-value level of a parallel application. There had been at least one pre-existing tool that gave that kind of view, Prism <ref> [18] </ref>, now a component of Thinking Machines, Inc., GlobalWorks parallel software environment. Prism seemed to have the smooth integration with the data-parallel programming language, Connection Machine Fortran, and its target Thinking Machines platforms (CM-2, CM-200, and CM-5).
References-found: 18

