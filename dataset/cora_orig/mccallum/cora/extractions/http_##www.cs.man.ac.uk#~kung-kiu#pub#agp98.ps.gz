URL: http://www.cs.man.ac.uk/~kung-kiu/pub/agp98.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~kung-kiu/pub/
Root-URL: http://www.cs.man.ac.uk
Title: Isoinitial Models for Logic Programs: A Preliminary Study  
Author: Kung-Kiu Lau, Mario Ornaghi 
Keyword: Semantics, isoinitial models, negation  
Abstract: The Herbrand model H of a definite logic program P is an initial model among the class of all the models of P , interpreting P as an initial theory. Such a theory proves (computes) only positive literals (atoms) in P , so it does not deal with negation. In this paper, we introduce isoinitial models of logic programs. We show that isoinitial semantics deals with negation, and works in a uniform way for definite and normal logic programs. Moreover, the lack of an isoinitial model signals the absence of information. Thus it also provides a unifying semantics for closed and open logic programs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K.R. Apt and R. Bol. </author> <title> Logic programming and negation: a survey. </title> <journal> J. Logic Programming 19,20:9-71, </journal> <note> 1994. Special issue: Ten years of logic programming. </note>
Reference-contexts: This view is therefore very much one of programming-in-the-small . For normal programs, other kinds of semantics have been proposed (for a survey see e.g. <ref> [1] </ref>). A comparison with these semantics is one of our next steps. Our (preliminary) results on isoinitial theories and models are motivated by a search for a suitable uniform semantics for both programming-in-the-large and programming-in-the-small . We believe that isoinitial semantics fits the bill, for logic programs.
Reference: [2] <author> A. Bertoni, G. Mauri and P. Miglioli. </author> <title> On the power of model theory in specifying abstract data types and in capturing their recursiveness. </title> <note> Fundamenta Informaticae VI(2):127-170, </note> <year> 1983. </year>
Reference-contexts: A distinguishing feature of an initial theory P is that, in general, it proves (computes) only positive literals (atoms) in P , so it does not deal with negation. In this paper, we introduce isoinitial models <ref> [2] </ref> of logic programs. If the completion Comp (P ) of a program P has an isoinitial model, then H is also such a model of Comp (P ). <p> Therefore, with respect to para-metricity, initial semantics also works in a larger class of cases, but yields less information. 9 I.e. it does not occur in the head of any clause. 134 APPIA-GULP-PRODE'98 5 Conclusion Starting from the general theory of isoinitial models <ref> [2] </ref>, we have presented some preliminary results on initial and isoinitial theories and models. They are oriented towards our approach to modular program synthesis, but, we believe, they are interesting in general. The traditional view of a definite logic program (e.g., [5]) treats it as an initial theory.
Reference: [3] <author> A. Brogi, P. Mancarella, D. Pedreschi and F. Turini. </author> <title> Modular logic programming. </title> <journal> ACM TOPLAS 16(4) </journal> <pages> 1361-1398, </pages> <year> 1994. </year>
Reference-contexts: Open theories are needed if we want to compose small well-defined theories to build new larger theories [7, 6]. In the case of programs, open programs are needed if we want to use and compose them as modules <ref> [3, 4] </ref>. In this paper, we do not treat the problem of theory or program composition. Rather, we study only the consequences of initial and isoinitial semantics in open theories and programs. Dealing with open theories, we have to consider different signatures.
Reference: [4] <author> M. Bugliesi, E. Lamma and P. Mello. </author> <title> Modularity in logic programming. </title> <journal> J. Logic Programming 19,20:443-502, </journal> <note> 1994. Special issue: Ten years of logic programming. </note>
Reference-contexts: Open theories are needed if we want to compose small well-defined theories to build new larger theories [7, 6]. In the case of programs, open programs are needed if we want to use and compose them as modules <ref> [3, 4] </ref>. In this paper, we do not treat the problem of theory or program composition. Rather, we study only the consequences of initial and isoinitial semantics in open theories and programs. Dealing with open theories, we have to consider different signatures.
Reference: [5] <author> W. Hodges. </author> <title> Logical features of horn clauses. In D.M. </title> <editor> Gabbay, C.J. Hogger, and J.A. Robinson. editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming , Volume 1: Logical Foundations, </booktitle> <pages> pages 449-503, </pages> <publisher> Oxford University Press, </publisher> <year> 1993. </year> <title> Isoinitial Models for Logic Programs: A Preliminary Study 135 </title>
Reference-contexts: 1 Introduction The intended model of a standard (Horn clause) logic program P is its Herbrand model H. It interprets P under the Closed World Assumption [11]. Considering the class of all the models of P , H interprets P as an initial (Horn) theory <ref> [5] </ref>. A distinguishing feature of an initial theory P is that, in general, it proves (computes) only positive literals (atoms) in P , so it does not deal with negation. In this paper, we introduce isoinitial models [2] of logic programs. <p> The Minimum Herbrand Model M (P ) is defined in the usual way. Theorem 3.2 M (P ) is an initial model of P and of Comp (P ), but it is not an isoinitial model of P . Proof. The initiality of M (P ) is well-known <ref> [5] </ref>. M (P ) cannot be an isoinitial model of P , because no negated formula is provable from P (that is, P is not and cannot be atomically complete). 2 One would expect that M (P ) is an isoinitial model of Comp (P ). <p> They are oriented towards our approach to modular program synthesis, but, we believe, they are interesting in general. The traditional view of a definite logic program (e.g., <ref> [5] </ref>) treats it as an initial theory. This in our opinion is too restrictive because it basically takes the Closed World view and does not provide a uniform semantics for negation and open programs, or parametricity. This view is therefore very much one of programming-in-the-small .
Reference: [6] <author> C. Kreitz, K.K. Lau, and M. Ornaghi. </author> <title> Formal reasoning about modules, reuse and their correctness. In D.M. </title> <editor> Gabbay and H.J. Ohlbach, editors, </editor> <booktitle> Proc. Int. Conf. on Formal and Applied Practical Reasoning , LNAI 1085, </booktitle> <pages> pages 384-399, </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: We consider a sem-open theory as an incomplete axiomatisation of a sem-model, to be completed by adding new axioms and, possibly, new symbols to the signature. Open theories are needed if we want to compose small well-defined theories to build new larger theories <ref> [7, 6] </ref>. In the case of programs, open programs are needed if we want to use and compose them as modules [3, 4]. In this paper, we do not treat the problem of theory or program composition.
Reference: [7] <author> K.-K. Lau and M. Ornaghi. </author> <title> Towards an object-oriented methodology for deductive synthesis of logic programs. </title> <editor> In M. Proietti, editor, </editor> <booktitle> Proc. </booktitle> <volume> LOPSTR 95 , LNCS 1048 </volume> <pages> 152-169, </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Indeed isoinitial semantics provides a unifying semantics for closed and open logic programs. It also deals with negation. We have used isoinitial semantics in our work in formal program development in computational logic (e.g. <ref> [7, 8] </ref>), since it provides a suitable semantic framework. In this paper we consider mainly definite programs, and we compare initial and isoini-tial semantics for such programs. Normal programs, for which other kinds of semantics should be considered, are only briefly addressed at the end of Section 3. <p> We consider a sem-open theory as an incomplete axiomatisation of a sem-model, to be completed by adding new axioms and, possibly, new symbols to the signature. Open theories are needed if we want to compose small well-defined theories to build new larger theories <ref> [7, 6] </ref>. In the case of programs, open programs are needed if we want to use and compose them as modules [3, 4]. In this paper, we do not treat the problem of theory or program composition.
Reference: [8] <author> K.-K. Lau and M. Ornaghi. </author> <title> A formal approach to deductive synthesis of constraint logic programs. </title> <editor> In J.W. Lloyd, editor, </editor> <booktitle> Proc. 1995 Int. Logic Programming Symp., </booktitle> <pages> pages 543-557, </pages> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Indeed isoinitial semantics provides a unifying semantics for closed and open logic programs. It also deals with negation. We have used isoinitial semantics in our work in formal program development in computational logic (e.g. <ref> [7, 8] </ref>), since it provides a suitable semantic framework. In this paper we consider mainly definite programs, and we compare initial and isoini-tial semantics for such programs. Normal programs, for which other kinds of semantics should be considered, are only briefly addressed at the end of Section 3.
Reference: [9] <author> P. Miglioli, U. Moscato and M. Ornaghi. </author> <title> Constructive theories with abstract data types for program synthesis. </title> <editor> In D.G. Skordev, editor, </editor> <booktitle> Mathematical Logic and its Applications, </booktitle> <pages> pages 293-302, </pages> <publisher> Plenum Press, </publisher> <year> 1986. </year>
Reference-contexts: We do not enter into further details here, because this paper is mainly on semantics of isoinitial models, and we use some proof-theoretical tools only in some examples. For a discussion, see <ref> [10, 9] </ref>, where semi-constructive systems are also introduced. 3 Closed Logic Programs We first introduce closed first-order theories.
Reference: [10] <author> P. Miglioli, U. Moscato and M. Ornaghi. </author> <title> Abstract parametric classes and abstract data types defined by classical and constructive logical methods. </title> <journal> J. Symb. Comp. </journal> <volume> 18 </volume> <pages> 41-81, </pages> <year> 1994. </year>
Reference-contexts: We do not enter into further details here, because this paper is mainly on semantics of isoinitial models, and we use some proof-theoretical tools only in some examples. For a discussion, see <ref> [10, 9] </ref>, where semi-constructive systems are also introduced. 3 Closed Logic Programs We first introduce closed first-order theories. <p> It turns out that the use of constructive systems allows us to develop a proof theory for stating iso-parametricity, based on Corollary 2.3 (see <ref> [10] </ref>). Moreover, the above notion of parametricity may be too restrictive. There are cases where it suffices to consider only particular classes of P.
Reference: [11] <author> R. Reiter. </author> <title> On closed world data bases. </title> <editor> In H. Gallaire and J. Minker, editors, </editor> <booktitle> Logic and Data Bases, </booktitle> <pages> pages 293-322. </pages> <publisher> Plenum Press, </publisher> <year> 1978. </year>
Reference-contexts: 1 Introduction The intended model of a standard (Horn clause) logic program P is its Herbrand model H. It interprets P under the Closed World Assumption <ref> [11] </ref>. Considering the class of all the models of P , H interprets P as an initial (Horn) theory [5]. A distinguishing feature of an initial theory P is that, in general, it proves (computes) only positive literals (atoms) in P , so it does not deal with negation.
References-found: 11

