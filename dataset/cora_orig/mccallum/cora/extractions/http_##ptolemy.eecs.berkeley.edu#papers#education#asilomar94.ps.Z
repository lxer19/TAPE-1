URL: http://ptolemy.eecs.berkeley.edu/papers/education/asilomar94.ps.Z
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/education/index.html
Root-URL: 
Email: fble,sgug@ohm.eecs.berkeley.edu  bamberg@eecs.wsu.edu  
Title: INTERACTIVE SOLUTION SETS AS COMPONENTS OF FULLY ELECTRONIC SIGNALS AND SYSTEMS COURSEWARE  
Author: Brian L. Evans and Steve X. Gu Roberto H. Bamberger 
Address: 211-105 Cory Hall  Berkeley, CA 94720-1772 USA  Pullman, WA 99164-2752 USA  
Affiliation: Dept. of Electrical Eng. and Comp. Sciences  University of California  School of Electrical Eng. and Comp. Science Washington State University  
Note: In 1994 Proc. of IEEE Asilomar Conf. on Signals, Systems, and Compu ters  
Abstract: The use of computers in teaching signals and systems has evolved. In understanding algorithms, computers were used first as simulation environments and then as real-time implementation environments. In learning the theory of signals and systems, passive tutorial systems have become interactive. Now, software is becoming more and more of an integral part of textbooks and may eventually include the textbook. This paper discusses two interdependent fundamental components of fully electronic courseware| the development of interactive problems and examples, and the supporting software to evaluate student solutions and to explain steps in a correct solution. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. D. Strum and D. E. Kirk, </author> <title> Contempory Linear Systems Using MATLAB. </title> <address> Boston, MA: </address> <publisher> PWS Publishing, </publisher> <year> 1994. </year>
Reference-contexts: Section 4 introduces our current research in expanding the computer's role in evaluating student answers to questions and in explaining answers to students. The section focuses on our development of an interactive companion to a linear systems textbook <ref> [1] </ref>. Section 5 concludes the paper. 2. The Role of the Computer In the context of signals and systems, the four primary areas of computer use in the curriculum are tutorials, theoretical investigation, simulation, and implementation. <p> The use of the commercial simulation packages Matlab, Monarch, ILS, and Hypercep-tion have overtaken locally authored tools [9]. Matlab, for example, benefits from its toolboxes, its successful student version, and the many signals and systems textbooks and laboratory manuals available for it, e.g. <ref> [1, 10, 11] </ref>. The next section shifts the focus away from simulation, implementation, and passive tutorial systems and towards recent trends in the use of theoretical investigation tools, interactive tutorial systems, and integrated computing environments. 3. <p> Based on our experience writing interactive tutorials [19] and self-evaluation exercises [22] for signals and systems, we have created an interactive solution set for the linear systems textbook Contemporary Linear Systems Using Matlab by Robert D. Strum and Donald E. Kirk <ref> [1] </ref>. Although the textbook heavily uses Matlab, we found that Matlab was only applicable to roughly half of the problems in the textbook. Furthermore, students would use Matlab is at the command line by evaluating sequences of commands, and besides the online help information, students would be on their own. <p> To demonstrate the use of CheckMyAnswer in an interactive notebook environment, we present the following scenario in which a student tries to use Mathematica functions to attack two linear system questions from <ref> [1] </ref> and use CheckMyAnswer to verify the solutions. 4.1. Example Interaction #1 A student is working on part (e) of Problem 5 in Chapter 10 [1], which is to use circular convolution to find the linear convolution of the sequences f2; 1; 4g and f3; 2; 1; 1; 5g. <p> an interactive notebook environment, we present the following scenario in which a student tries to use Mathematica functions to attack two linear system questions from <ref> [1] </ref> and use CheckMyAnswer to verify the solutions. 4.1. Example Interaction #1 A student is working on part (e) of Problem 5 in Chapter 10 [1], which is to use circular convolution to find the linear convolution of the sequences f2; 1; 4g and f3; 2; 1; 1; 5g. <p> The correct answer to this question is 6, -7, 12, -5, 5, -1, 20, which can also be found by using our DiscreteConvolution function: In [3]:= DiscreteConvolution <ref> [ -2, -1, 4-, -3, -2, -1, 1, 5-, n ] </ref> -6, -7, 12, -5, 5, -1, 20 This answer is programmed into CheckMyAnswer function for this problem when the problem set is initiated. <p> Assume the student neglects the necessity of zero padding and applies our function circularConvolution directly to these two sequences. The function will generate an error message, give hint to help the student apply the function correctly, and return an empty sequence: In [4]:= circularConvolution <ref> [ -2, -1, 4-, -3, -2, 1, 1, 5- ] </ref> Error: Sequences -2, -1, 4- and -3, -2, 1, 1, 5- have unequal length. Hint: Try applying zeroPadding to both inputs. <p> But, the student incorrectly calculates the output sequence length to be 3 + 5 = 8, instead of 3 + 5 1 = 7. So, the student proceeds with following command: In [5]:= circularConvolution [ zeroPadding [ -2, -1, 4-, 8 ], zeroPadding <ref> [ -3, -2, 1, 1, 5-, 8 ] </ref> ] Out [5]= The student thinks that answer is correct and now asks CheckMyAnswer to verify it (note that % refers to the previous output): In [6]:= CheckMyAnswer [ "P10.5e", % ] Out [6]:= False: list exceeded by 1 element (s). <p> The student would then proceed with the correct number; but this time, after editing the previous circularConvolution command by changing 8 to 7 to get circularConvolution [ zeroPadding [ -2, -1, 4-, 7 ], zeroPadding <ref> [ -3, -2, 1, 1, 5-, 7 ] </ref> ] Out [7]= Now, CheckMyAnswer will return a False message because the student typed 1 instead of -1 for the third element of the second sequence. <p> This typo will manifest itself by CheckMyAnswer pointing out that the third, fourth and fifth elements of the solution are incorrect: In [8]:= CheckMyAnswer [ "P10.5e", % ] False: incorrect list element (s). Out [8]= -6., -7., False <ref> [1] </ref>, False [2], False [3], -1., 20.- After closely examining the input command, the student finds the error and corrects the typographical error to obtain In [9]:= circularConvolution [ zeroPadding [ -2, -1, 4-, 7 ], zeroPadding [ -3, -2, -1, 1, 5-, 7 ] ] Out [9]= Now, CheckMyAnswer confirms <p> Out [8]= -6., -7., False [1], False [2], False [3], -1., 20.- After closely examining the input command, the student finds the error and corrects the typographical error to obtain In [9]:= circularConvolution [ zeroPadding [ -2, -1, 4-, 7 ], zeroPadding <ref> [ -3, -2, -1, 1, 5-, 7 ] </ref> ] Out [9]= Now, CheckMyAnswer confirms the solution. In [10]:= CheckMyAnswer [ "P10.5e", % ] Out [10]= True 4.2. <p> In [10]:= CheckMyAnswer [ "P10.5e", % ] Out [10]= True 4.2. Example Interaction #2 A student is working on problem P 8.2a in <ref> [1] </ref>, which gives the transfer function of a first-order linear-time-invariant system H (z) = (1 z 1) ) and asks the student to find the unit sample response h (n). <p> Here is how close you came to 3 forms of the answer, with False representing a mismatched term: Out [12]= 1 DiscreteStep [n] False <ref> [1] </ref> + False [2] KroneckerDelta [-1 + n] + False [3] KroneckerDelta [n] 2 False [1] 3 DiscreteStep [False [1]] False [2] + False [3] + False [4] KroneckerDelta [-1 + n] At any point, students can ask the inverse z-transform routine to explain how it arrived at an answer by <p> Here is how close you came to 3 forms of the answer, with False representing a mismatched term: Out [12]= 1 DiscreteStep [n] False <ref> [1] </ref> + False [2] KroneckerDelta [-1 + n] + False [3] KroneckerDelta [n] 2 False [1] 3 DiscreteStep [False [1]] False [2] + False [3] + False [4] KroneckerDelta [-1 + n] At any point, students can ask the inverse z-transform routine to explain how it arrived at an answer by enabling a Justification option. <p> Here is how close you came to 3 forms of the answer, with False representing a mismatched term: Out [12]= 1 DiscreteStep [n] False <ref> [1] </ref> + False [2] KroneckerDelta [-1 + n] + False [3] KroneckerDelta [n] 2 False [1] 3 DiscreteStep [False [1]] False [2] + False [3] + False [4] KroneckerDelta [-1 + n] At any point, students can ask the inverse z-transform routine to explain how it arrived at an answer by enabling a Justification option. <p> Our approach in this paper is based on Mathematica, an environment with a kernel to perform symbolic computations and a front end that supports the writing of interactive tutorials. We have taken advantage of both components in writing an interactive companion for a linear systems textbook <ref> [1] </ref>. Since any current implementation of interactive problems and examples is bound by the sophistication of computer software, we first identify the trends in the computer software.
Reference: [2] <author> S. S. Rao, </author> <title> "Interactive computer graphics-based software to support undergraduate signals and systems," </title> <booktitle> in Proc. Frontiers in Education Conference, </booktitle> <pages> pp. 247-254, </pages> <month> Oct. </month> <year> 1984. </year>
Reference-contexts: The Role of the Computer In the context of signals and systems, the four primary areas of computer use in the curriculum are tutorials, theoretical investigation, simulation, and implementation. Of these areas, educators in the early 1980's focused on simulation, by providing either a graphical interface <ref> [2] </ref> or a collection of library routines [3], as well as "passive" tutorials via computer-aided instruction [4]. Passive tutorials were primarily adaptations of printed textbook material onto the computer screen. The supporting software was generally written in house. <p> This typo will manifest itself by CheckMyAnswer pointing out that the third, fourth and fifth elements of the solution are incorrect: In [8]:= CheckMyAnswer [ "P10.5e", % ] False: incorrect list element (s). Out [8]= -6., -7., False [1], False <ref> [2] </ref>, False [3], -1., 20.- After closely examining the input command, the student finds the error and corrects the typographical error to obtain In [9]:= circularConvolution [ zeroPadding [ -2, -1, 4-, 7 ], zeroPadding [ -3, -2, -1, 1, 5-, 7 ] ] Out [9]= Now, CheckMyAnswer confirms the solution. <p> Here is how close you came to 3 forms of the answer, with False representing a mismatched term: Out [12]= 1 DiscreteStep [n] False [1] + False <ref> [2] </ref> KroneckerDelta [-1 + n] + False [3] KroneckerDelta [n] 2 False [1] 3 DiscreteStep [False [1]] False [2] + False [3] + False [4] KroneckerDelta [-1 + n] At any point, students can ask the inverse z-transform routine to explain how it arrived at an answer by enabling a Justification <p> Here is how close you came to 3 forms of the answer, with False representing a mismatched term: Out [12]= 1 DiscreteStep [n] False [1] + False <ref> [2] </ref> KroneckerDelta [-1 + n] + False [3] KroneckerDelta [n] 2 False [1] 3 DiscreteStep [False [1]] False [2] + False [3] + False [4] KroneckerDelta [-1 + n] At any point, students can ask the inverse z-transform routine to explain how it arrived at an answer by enabling a Justification option.
Reference: [3] <author> H. E. Hanrahan, </author> <title> "An open-ended computer package for signal processing teaching and design," </title> <journal> IEEE Trans. on Education, </journal> <volume> vol. 28, </volume> <pages> pp. 155-163, </pages> <month> Aug. </month> <year> 1985. </year>
Reference-contexts: Of these areas, educators in the early 1980's focused on simulation, by providing either a graphical interface [2] or a collection of library routines <ref> [3] </ref>, as well as "passive" tutorials via computer-aided instruction [4]. Passive tutorials were primarily adaptations of printed textbook material onto the computer screen. The supporting software was generally written in house. By the late 1980's, the use of locally authored software (e.g. [5]) was becoming prevalent. <p> The correct answer to this question is 6, -7, 12, -5, 5, -1, 20, which can also be found by using our DiscreteConvolution function: In <ref> [3] </ref>:= DiscreteConvolution [ -2, -1, 4-, -3, -2, -1, 1, 5-, n ] -6, -7, 12, -5, 5, -1, 20 This answer is programmed into CheckMyAnswer function for this problem when the problem set is initiated. <p> This typo will manifest itself by CheckMyAnswer pointing out that the third, fourth and fifth elements of the solution are incorrect: In [8]:= CheckMyAnswer [ "P10.5e", % ] False: incorrect list element (s). Out [8]= -6., -7., False [1], False [2], False <ref> [3] </ref>, -1., 20.- After closely examining the input command, the student finds the error and corrects the typographical error to obtain In [9]:= circularConvolution [ zeroPadding [ -2, -1, 4-, 7 ], zeroPadding [ -3, -2, -1, 1, 5-, 7 ] ] Out [9]= Now, CheckMyAnswer confirms the solution. <p> Here is how close you came to 3 forms of the answer, with False representing a mismatched term: Out [12]= 1 DiscreteStep [n] False [1] + False [2] KroneckerDelta [-1 + n] + False <ref> [3] </ref> KroneckerDelta [n] 2 False [1] 3 DiscreteStep [False [1]] False [2] + False [3] + False [4] KroneckerDelta [-1 + n] At any point, students can ask the inverse z-transform routine to explain how it arrived at an answer by enabling a Justification option. <p> Here is how close you came to 3 forms of the answer, with False representing a mismatched term: Out [12]= 1 DiscreteStep [n] False [1] + False [2] KroneckerDelta [-1 + n] + False <ref> [3] </ref> KroneckerDelta [n] 2 False [1] 3 DiscreteStep [False [1]] False [2] + False [3] + False [4] KroneckerDelta [-1 + n] At any point, students can ask the inverse z-transform routine to explain how it arrived at an answer by enabling a Justification option.
Reference: [4] <author> B. Onaral, D. Tashayyod, and J. M. Trosino, </author> <title> "Interactive computing and graphics in undergraduate digital signal processing," </title> <booktitle> in Proc. Frontiers in Education Conference, </booktitle> <address> (Worcester, MA), </address> <pages> pp. 468-474, </pages> <month> Oct. </month> <year> 1983. </year>
Reference-contexts: Of these areas, educators in the early 1980's focused on simulation, by providing either a graphical interface [2] or a collection of library routines [3], as well as "passive" tutorials via computer-aided instruction <ref> [4] </ref>. Passive tutorials were primarily adaptations of printed textbook material onto the computer screen. The supporting software was generally written in house. By the late 1980's, the use of locally authored software (e.g. [5]) was becoming prevalent. Commercially available environments were beginning to be used. <p> Assume the student neglects the necessity of zero padding and applies our function circularConvolution directly to these two sequences. The function will generate an error message, give hint to help the student apply the function correctly, and return an empty sequence: In <ref> [4] </ref>:= circularConvolution [ -2, -1, 4-, -3, -2, 1, 1, 5- ] Error: Sequences -2, -1, 4- and -3, -2, 1, 1, 5- have unequal length. Hint: Try applying zeroPadding to both inputs. Out [4]:= -- By following the instruction, the student would hopefully try to compute the maximum number of <p> give hint to help the student apply the function correctly, and return an empty sequence: In <ref> [4] </ref>:= circularConvolution [ -2, -1, 4-, -3, -2, 1, 1, 5- ] Error: Sequences -2, -1, 4- and -3, -2, 1, 1, 5- have unequal length. Hint: Try applying zeroPadding to both inputs. Out [4]:= -- By following the instruction, the student would hopefully try to compute the maximum number of non-zero values and then apply zero padding technique. But, the student incorrectly calculates the output sequence length to be 3 + 5 = 8, instead of 3 + 5 1 = 7. <p> is how close you came to 3 forms of the answer, with False representing a mismatched term: Out [12]= 1 DiscreteStep [n] False [1] + False [2] KroneckerDelta [-1 + n] + False [3] KroneckerDelta [n] 2 False [1] 3 DiscreteStep [False [1]] False [2] + False [3] + False <ref> [4] </ref> KroneckerDelta [-1 + n] At any point, students can ask the inverse z-transform routine to explain how it arrived at an answer by enabling a Justification option. The transform, convolution, signal analysis routines, signal simplification, some signal plotting routines, and some other routines will justify their answers. 5.
Reference: [5] <author> A. Kamas and E. A. Lee, </author> <title> Digital Signal Processing Experiments. </title> <address> Englewood Cliffs, New Jersey: </address> <publisher> Prentice-Hall Inc., </publisher> <year> 1989. </year>
Reference-contexts: Passive tutorials were primarily adaptations of printed textbook material onto the computer screen. The supporting software was generally written in house. By the late 1980's, the use of locally authored software (e.g. <ref> [5] </ref>) was becoming prevalent. Commercially available environments were beginning to be used. For example, Matlab [6] was especially attractive because of its Signal Processing and Controls Toolboxes. <p> But, the student incorrectly calculates the output sequence length to be 3 + 5 = 8, instead of 3 + 5 1 = 7. So, the student proceeds with following command: In <ref> [5] </ref>:= circularConvolution [ zeroPadding [ -2, -1, 4-, 8 ], zeroPadding [ -3, -2, 1, 1, 5-, 8 ] ] Out [5]= The student thinks that answer is correct and now asks CheckMyAnswer to verify it (note that % refers to the previous output): In [6]:= CheckMyAnswer [ "P10.5e", % ] <p> So, the student proceeds with following command: In <ref> [5] </ref>:= circularConvolution [ zeroPadding [ -2, -1, 4-, 8 ], zeroPadding [ -3, -2, 1, 1, 5-, 8 ] ] Out [5]= The student thinks that answer is correct and now asks CheckMyAnswer to verify it (note that % refers to the previous output): In [6]:= CheckMyAnswer [ "P10.5e", % ] Out [6]:= False: list exceeded by 1 element (s).
Reference: [6] <author> C. Moler, J. Little, and S. Bangert, </author> <title> Matlab User's Guide. </title> <address> Natick, MA: </address> <publisher> The MathWorks Inc., </publisher> <year> 1989. </year>
Reference-contexts: Passive tutorials were primarily adaptations of printed textbook material onto the computer screen. The supporting software was generally written in house. By the late 1980's, the use of locally authored software (e.g. [5]) was becoming prevalent. Commercially available environments were beginning to be used. For example, Matlab <ref> [6] </ref> was especially attractive because of its Signal Processing and Controls Toolboxes. During this time, implementing algorithms in hardware become more accessible to students with the advent of assemblers, debuggers, and other programming tools for digital signal processing (DSP) boards [7]. <p> proceeds with following command: In [5]:= circularConvolution [ zeroPadding [ -2, -1, 4-, 8 ], zeroPadding [ -3, -2, 1, 1, 5-, 8 ] ] Out [5]= The student thinks that answer is correct and now asks CheckMyAnswer to verify it (note that % refers to the previous output): In <ref> [6] </ref>:= CheckMyAnswer [ "P10.5e", % ] Out [6]:= False: list exceeded by 1 element (s). At this point, the student would realize that since the list is too long, the maximum number of non-zero values is incorrect. <p> [ zeroPadding [ -2, -1, 4-, 8 ], zeroPadding [ -3, -2, 1, 1, 5-, 8 ] ] Out [5]= The student thinks that answer is correct and now asks CheckMyAnswer to verify it (note that % refers to the previous output): In <ref> [6] </ref>:= CheckMyAnswer [ "P10.5e", % ] Out [6]:= False: list exceeded by 1 element (s). At this point, the student would realize that since the list is too long, the maximum number of non-zero values is incorrect.
Reference: [7] <author> D. L. Jones and T. W. Parks, </author> <title> A Digital Signal Processing Laboratory Using the TMS32010. </title> <address> Englewood Cliffs, New Jersey: </address> <publisher> Prentice-Hall, Inc., </publisher> <year> 1988. </year>
Reference-contexts: For example, Matlab [6] was especially attractive because of its Signal Processing and Controls Toolboxes. During this time, implementing algorithms in hardware become more accessible to students with the advent of assemblers, debuggers, and other programming tools for digital signal processing (DSP) boards <ref> [7] </ref>. In the 1990's, educators have continued to place emphasis on all of the above areas. Passive tutorials [8] are still in use, and programming tools for DSP boards are seeing wider use. <p> At this point, the student would realize that since the list is too long, the maximum number of non-zero values is incorrect. The student would then proceed with the correct number; but this time, after editing the previous circularConvolution command by changing 8 to 7 to get circularConvolution <ref> [ zeroPadding [ -2, -1, 4-, 7 ] </ref>, zeroPadding [ -3, -2, 1, 1, 5-, 7 ] ] Out [7]= Now, CheckMyAnswer will return a False message because the student typed 1 instead of -1 for the third element of the second sequence. <p> The student would then proceed with the correct number; but this time, after editing the previous circularConvolution command by changing 8 to 7 to get circularConvolution [ zeroPadding <ref> [ -2, -1, 4-, 7 ] </ref>, zeroPadding [ -3, -2, 1, 1, 5-, 7 ] ] Out [7]= Now, CheckMyAnswer will return a False message because the student typed 1 instead of -1 for the third element of the second sequence. <p> The student would then proceed with the correct number; but this time, after editing the previous circularConvolution command by changing 8 to 7 to get circularConvolution [ zeroPadding [ -2, -1, 4-, 7 ], zeroPadding <ref> [ -3, -2, 1, 1, 5-, 7 ] </ref> ] Out [7]= Now, CheckMyAnswer will return a False message because the student typed 1 instead of -1 for the third element of the second sequence. <p> The student would then proceed with the correct number; but this time, after editing the previous circularConvolution command by changing 8 to 7 to get circularConvolution [ zeroPadding [ -2, -1, 4-, 7 ], zeroPadding [ -3, -2, 1, 1, 5-, 7 ] ] Out <ref> [7] </ref>= Now, CheckMyAnswer will return a False message because the student typed 1 instead of -1 for the third element of the second sequence. <p> Out [8]= -6., -7., False [1], False [2], False [3], -1., 20.- After closely examining the input command, the student finds the error and corrects the typographical error to obtain In [9]:= circularConvolution <ref> [ zeroPadding [ -2, -1, 4-, 7 ] </ref>, zeroPadding [ -3, -2, -1, 1, 5-, 7 ] ] Out [9]= Now, CheckMyAnswer confirms the solution. In [10]:= CheckMyAnswer [ "P10.5e", % ] Out [10]= True 4.2. <p> Out [8]= -6., -7., False [1], False [2], False [3], -1., 20.- After closely examining the input command, the student finds the error and corrects the typographical error to obtain In [9]:= circularConvolution [ zeroPadding <ref> [ -2, -1, 4-, 7 ] </ref>, zeroPadding [ -3, -2, -1, 1, 5-, 7 ] ] Out [9]= Now, CheckMyAnswer confirms the solution. In [10]:= CheckMyAnswer [ "P10.5e", % ] Out [10]= True 4.2. <p> Out [8]= -6., -7., False [1], False [2], False [3], -1., 20.- After closely examining the input command, the student finds the error and corrects the typographical error to obtain In [9]:= circularConvolution [ zeroPadding [ -2, -1, 4-, 7 ], zeroPadding <ref> [ -3, -2, -1, 1, 5-, 7 ] </ref> ] Out [9]= Now, CheckMyAnswer confirms the solution. In [10]:= CheckMyAnswer [ "P10.5e", % ] Out [10]= True 4.2.
Reference: [8] <author> S. Wood, </author> <title> "Tutorial visualization software for concept reinforcement in digital signal processing education," </title> <booktitle> in Proc. IEEE Int. Conf. Acoust., Speech, and Signal Processing, </booktitle> <volume> vol. </volume> <pages> 4, </pages> <address> (San Francisco, CA), </address> <pages> pp. 77-80, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: During this time, implementing algorithms in hardware become more accessible to students with the advent of assemblers, debuggers, and other programming tools for digital signal processing (DSP) boards [7]. In the 1990's, educators have continued to place emphasis on all of the above areas. Passive tutorials <ref> [8] </ref> are still in use, and programming tools for DSP boards are seeing wider use. The use of the commercial simulation packages Matlab, Monarch, ILS, and Hypercep-tion have overtaken locally authored tools [9]. <p> But, the student incorrectly calculates the output sequence length to be 3 + 5 = 8, instead of 3 + 5 1 = 7. So, the student proceeds with following command: In [5]:= circularConvolution <ref> [ zeroPadding [ -2, -1, 4-, 8 ] </ref>, zeroPadding [ -3, -2, 1, 1, 5-, 8 ] ] Out [5]= The student thinks that answer is correct and now asks CheckMyAnswer to verify it (note that % refers to the previous output): In [6]:= CheckMyAnswer [ "P10.5e", % ] Out [6]:= <p> But, the student incorrectly calculates the output sequence length to be 3 + 5 = 8, instead of 3 + 5 1 = 7. So, the student proceeds with following command: In [5]:= circularConvolution [ zeroPadding <ref> [ -2, -1, 4-, 8 ] </ref>, zeroPadding [ -3, -2, 1, 1, 5-, 8 ] ] Out [5]= The student thinks that answer is correct and now asks CheckMyAnswer to verify it (note that % refers to the previous output): In [6]:= CheckMyAnswer [ "P10.5e", % ] Out [6]:= False: list <p> But, the student incorrectly calculates the output sequence length to be 3 + 5 = 8, instead of 3 + 5 1 = 7. So, the student proceeds with following command: In [5]:= circularConvolution [ zeroPadding [ -2, -1, 4-, 8 ], zeroPadding <ref> [ -3, -2, 1, 1, 5-, 8 ] </ref> ] Out [5]= The student thinks that answer is correct and now asks CheckMyAnswer to verify it (note that % refers to the previous output): In [6]:= CheckMyAnswer [ "P10.5e", % ] Out [6]:= False: list exceeded by 1 element (s). <p> This typo will manifest itself by CheckMyAnswer pointing out that the third, fourth and fifth elements of the solution are incorrect: In <ref> [8] </ref>:= CheckMyAnswer [ "P10.5e", % ] False: incorrect list element (s). Out [8]= -6., -7., False [1], False [2], False [3], -1., 20.- After closely examining the input command, the student finds the error and corrects the typographical error to obtain In [9]:= circularConvolution [ zeroPadding [ -2, -1, 4-, 7 <p> This typo will manifest itself by CheckMyAnswer pointing out that the third, fourth and fifth elements of the solution are incorrect: In <ref> [8] </ref>:= CheckMyAnswer [ "P10.5e", % ] False: incorrect list element (s). Out [8]= -6., -7., False [1], False [2], False [3], -1., 20.- After closely examining the input command, the student finds the error and corrects the typographical error to obtain In [9]:= circularConvolution [ zeroPadding [ -2, -1, 4-, 7 ], zeroPadding [ -3, -2, -1, 1, 5-, 7 ] ] Out
Reference: [9] <author> J. D. Mellot and F. J. Taylor, </author> <title> "Signal Processing's education survey results," </title> <journal> IEEE Signal Processing Magazine, </journal> <volume> vol. 9, </volume> <pages> pp. 16-19, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: In the 1990's, educators have continued to place emphasis on all of the above areas. Passive tutorials [8] are still in use, and programming tools for DSP boards are seeing wider use. The use of the commercial simulation packages Matlab, Monarch, ILS, and Hypercep-tion have overtaken locally authored tools <ref> [9] </ref>. Matlab, for example, benefits from its toolboxes, its successful student version, and the many signals and systems textbooks and laboratory manuals available for it, e.g. [1, 10, 11]. <p> Out [8]= -6., -7., False [1], False [2], False [3], -1., 20.- After closely examining the input command, the student finds the error and corrects the typographical error to obtain In <ref> [9] </ref>:= circularConvolution [ zeroPadding [ -2, -1, 4-, 7 ], zeroPadding [ -3, -2, -1, 1, 5-, 7 ] ] Out [9]= Now, CheckMyAnswer confirms the solution. In [10]:= CheckMyAnswer [ "P10.5e", % ] Out [10]= True 4.2. <p> -6., -7., False [1], False [2], False [3], -1., 20.- After closely examining the input command, the student finds the error and corrects the typographical error to obtain In <ref> [9] </ref>:= circularConvolution [ zeroPadding [ -2, -1, 4-, 7 ], zeroPadding [ -3, -2, -1, 1, 5-, 7 ] ] Out [9]= Now, CheckMyAnswer confirms the solution. In [10]:= CheckMyAnswer [ "P10.5e", % ] Out [10]= True 4.2.
Reference: [10] <author> C. S. Burrus, J. H. McClellan, A. V. Oppenheim, T. W. Parks, R. W. Schafer, and H. Schussler, </author> <title> Computer-Aided Exercises for Signal Processing. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice-Hall, Inc., </publisher> <year> 1994. </year>
Reference-contexts: The use of the commercial simulation packages Matlab, Monarch, ILS, and Hypercep-tion have overtaken locally authored tools [9]. Matlab, for example, benefits from its toolboxes, its successful student version, and the many signals and systems textbooks and laboratory manuals available for it, e.g. <ref> [1, 10, 11] </ref>. The next section shifts the focus away from simulation, implementation, and passive tutorial systems and towards recent trends in the use of theoretical investigation tools, interactive tutorial systems, and integrated computing environments. 3. <p> Other simulators include both freely distributable environments (e.g. the Thor register-transfer-level simulator from Stanford University) and commercial software (e.g. Matlab). Now, Ptolemy directly can access toolboxes, custom scripts, and exercises already written in Matlab (e.g. <ref> [10] </ref>). 4. Making Problems and Examples In teractive In this section, we will discuss programming strategies to evaluate student answers to design and analysis questions and to explain steps in a solution. <p> In <ref> [10] </ref>:= CheckMyAnswer [ "P10.5e", % ] Out [10]= True 4.2. <p> In <ref> [10] </ref>:= CheckMyAnswer [ "P10.5e", % ] Out [10]= True 4.2. Example Interaction #2 A student is working on problem P 8.2a in [1], which gives the transfer function of a first-order linear-time-invariant system H (z) = (1 z 1) ) and asks the student to find the unit sample response h (n).
Reference: [11] <author> K. Ogata, </author> <title> Solving Control Engineering Problems with MATLAB. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice-Hall, </publisher> <year> 1994. </year>
Reference-contexts: The use of the commercial simulation packages Matlab, Monarch, ILS, and Hypercep-tion have overtaken locally authored tools [9]. Matlab, for example, benefits from its toolboxes, its successful student version, and the many signals and systems textbooks and laboratory manuals available for it, e.g. <ref> [1, 10, 11] </ref>. The next section shifts the focus away from simulation, implementation, and passive tutorial systems and towards recent trends in the use of theoretical investigation tools, interactive tutorial systems, and integrated computing environments. 3. <p> Suppose the student leaves out the coefficient, 2, in front of the z 2 term in the numerator when typing in the command. CheckMyAnswer will check the consequently incorrect solution against all possible answers and point out where the errors are In <ref> [11] </ref>:= InverseZTransform [ ((1 + z^(-2)) / (1 - z^(-1))), z, n, RegionOfConvergence -&gt; -1, Infinity] Out [11]= 2 DiscreteStep [n] - KroneckerDelta [-1 + n] - KroneckerDelta [n] In [12]:= CheckMyAnswer [ "P8.2a", % ] False: incorrect expression. <p> CheckMyAnswer will check the consequently incorrect solution against all possible answers and point out where the errors are In <ref> [11] </ref>:= InverseZTransform [ ((1 + z^(-2)) / (1 - z^(-1))), z, n, RegionOfConvergence -&gt; -1, Infinity] Out [11]= 2 DiscreteStep [n] - KroneckerDelta [-1 + n] - KroneckerDelta [n] In [12]:= CheckMyAnswer [ "P8.2a", % ] False: incorrect expression.
Reference: [12] <author> B. Char, K. Geddes, G. Gonnet, B. Leong, M. Mona-gan, and S. Watt, </author> <title> Maple Reference Manual. </title> <address> Waterloo, Canada: </address> <publisher> WATCOM Publications, </publisher> <year> 1988. </year>
Reference-contexts: Tools for Theoretical Investigation Theoretical investigation refers to the design and analysis of signals and systems using algebraic (symbolic) transformations. In terms of users, the two leading symbolic mathematics environments are Maple <ref> [12] </ref> and Mathematica [13]. Both are being used to teach concepts such as z and Laplace transforms [14] and bilinear transformations. Although Maple has more knowledge of linear transforms and piecewise functions, more third-party development for signals and systems has occurred for Mathematica. <p> CheckMyAnswer will check the consequently incorrect solution against all possible answers and point out where the errors are In [11]:= InverseZTransform [ ((1 + z^(-2)) / (1 - z^(-1))), z, n, RegionOfConvergence -&gt; -1, Infinity] Out [11]= 2 DiscreteStep [n] - KroneckerDelta [-1 + n] - KroneckerDelta [n] In <ref> [12] </ref>:= CheckMyAnswer [ "P8.2a", % ] False: incorrect expression. Here is how close you came to 3 forms of the answer, with False representing a mismatched term: Out [12]= 1 DiscreteStep [n] False [1] + False [2] KroneckerDelta [-1 + n] + False [3] KroneckerDelta [n] 2 False [1] 3 DiscreteStep <p> - z^(-1))), z, n, RegionOfConvergence -&gt; -1, Infinity] Out [11]= 2 DiscreteStep [n] - KroneckerDelta [-1 + n] - KroneckerDelta [n] In <ref> [12] </ref>:= CheckMyAnswer [ "P8.2a", % ] False: incorrect expression. Here is how close you came to 3 forms of the answer, with False representing a mismatched term: Out [12]= 1 DiscreteStep [n] False [1] + False [2] KroneckerDelta [-1 + n] + False [3] KroneckerDelta [n] 2 False [1] 3 DiscreteStep [False [1]] False [2] + False [3] + False [4] KroneckerDelta [-1 + n] At any point, students can ask the inverse z-transform routine to explain how it
Reference: [13] <author> S. Wolfram, </author> <title> Mathematica: A System for Doing Mathematics by Computer. </title> <address> Redwood City, CA: </address> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: Tools for Theoretical Investigation Theoretical investigation refers to the design and analysis of signals and systems using algebraic (symbolic) transformations. In terms of users, the two leading symbolic mathematics environments are Maple [12] and Mathematica <ref> [13] </ref>. Both are being used to teach concepts such as z and Laplace transforms [14] and bilinear transformations. Although Maple has more knowledge of linear transforms and piecewise functions, more third-party development for signals and systems has occurred for Mathematica.
Reference: [14] <author> J. Mathews, </author> <title> "Using computer symbolic algebra in applied engineering mathematics to teach Laplace transforms," </title> <booktitle> Computers in Education Division of ASEE, </booktitle> <volume> vol. 1, no. 1, </volume> <pages> pp. 71-76, </pages> <year> 1991. </year>
Reference-contexts: Tools for Theoretical Investigation Theoretical investigation refers to the design and analysis of signals and systems using algebraic (symbolic) transformations. In terms of users, the two leading symbolic mathematics environments are Maple [12] and Mathematica [13]. Both are being used to teach concepts such as z and Laplace transforms <ref> [14] </ref> and bilinear transformations. Although Maple has more knowledge of linear transforms and piecewise functions, more third-party development for signals and systems has occurred for Mathematica. The signal processing packages [15] for Mathematica add a wide variety of signals and systems and implement common algebraic operations on them.
Reference: [15] <author> B. L. Evans and J. H. McClellan, </author> <title> "Symbolic analysis of signals and systems," in Symbolic and Knowledge-Based Signal Processing (A. </title> <editor> Oppenheim and H. Nawab, </editor> <booktitle> eds.), </booktitle> <pages> pp. 88-141, </pages> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice-Hall, Inc., </publisher> <year> 1992. </year>
Reference-contexts: Both are being used to teach concepts such as z and Laplace transforms [14] and bilinear transformations. Although Maple has more knowledge of linear transforms and piecewise functions, more third-party development for signals and systems has occurred for Mathematica. The signal processing packages <ref> [15] </ref> for Mathematica add a wide variety of signals and systems and implement common algebraic operations on them. The algebraic operations include convolution for discrete and continuous signals as well as the Laplace, Fourier, z, discrete-time Fourier, and discrete Fourier transforms.
Reference: [16] <author> B. L. Evans, R. H. Bamberger, and J. H. McClel-lan, </author> <title> "Rules for multidimensional multirate structures," </title> <journal> IEEE Trans. on Signal Processing, </journal> <volume> vol. 42, </volume> <pages> pp. 762-771, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: The convolution routines not only work for sampled signals, but also for signals represented by formulas. The packages can help redesign a given system using simplifications, rearrangements, and number theoretic transformations <ref> [16] </ref>. In terms of courseware, the key component of the signal processing packages is that they can explain their answers. For example, the linear transform routines can display the intermediate steps, and the convolution routines can animate the flip-and-slide approach to computing the convolution graphically.
Reference: [17] <author> A. Sekey, </author> <title> "Multimedia self-study courses in dsp and speech processing," </title> <booktitle> in Proc. IEEE Int. Conf. Acoust., Speech, and Signal Processing, </booktitle> <volume> vol. </volume> <pages> 4, </pages> <address> (San Francisco, CA), </address> <pages> pp. 73-76, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: This justification ability will be discussed further in Section 4. 3.2. Interactive tutorials Interactive tutorials combine passive information, such as text, tables, and graphs, with interactive examples involving sound, graphics, and animations. Several interactive tutorial systems have been developed for signals and systems. A multimedia self-study system <ref> [17] </ref> has been developed based on the HyperCard hypertext program by Claris Corp. The material in the course can be navigated sequentially, hierarchically, or randomly. HyperCard preserves links between related topics which the student can follow.
Reference: [18] <author> S. Pointer, J. Wawrzynek, and D. Wessel, </author> <title> "A multimedia digital signal processing tutoring system," </title> <booktitle> in Proc. Int. Computers in Music Conf., (Glasgow, UK), </booktitle> <pages> pp. 35-8, </pages> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: The benefit in using Mathematica notebooks is that any given examples also can contain solutions written in Mathematica code that can be altered and evaluated. Both the Digital Signal Processing Learning Environment (DISIPLE) <ref> [18] </ref> and the Signal Processing Notebooks [19] are based on the Mathematica notebook front end. DISIPLE focuses on numerical processing of music and speech signals, and was written for composers, psychoacousti-cians, and other people without an engineering background.
Reference: [19] <author> B. L. Evans, L. J. Karam, K. A. West, and J. H. Mc-Clellan, </author> <title> "Learning signals and systems with Mathe-matica," </title> <journal> IEEE Trans. on Education, </journal> <volume> vol. 36, </volume> <pages> pp. 72-78, </pages> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: The benefit in using Mathematica notebooks is that any given examples also can contain solutions written in Mathematica code that can be altered and evaluated. Both the Digital Signal Processing Learning Environment (DISIPLE) [18] and the Signal Processing Notebooks <ref> [19] </ref> are based on the Mathematica notebook front end. DISIPLE focuses on numerical processing of music and speech signals, and was written for composers, psychoacousti-cians, and other people without an engineering background. <p> Third, the Signal Processing Packages for Mathematica already define commonly used signals and systems and compute transforms and convolution on sampled sequences and algebraic expressions with explanation. Based on our experience writing interactive tutorials <ref> [19] </ref> and self-evaluation exercises [22] for signals and systems, we have created an interactive solution set for the linear systems textbook Contemporary Linear Systems Using Matlab by Robert D. Strum and Donald E. Kirk [1].
Reference: [20] <author> E. A. Lee, </author> <title> "A design lab for statistical signal processing," </title> <booktitle> in Proc. IEEE Int. Conf. Acoust., Speech, and Signal Processing, </booktitle> <volume> vol. </volume> <pages> 4, </pages> <address> (San Francisco, CA), </address> <pages> pp. 81-84, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: Much of the current research effort in integrated systems is in the context of developing environments for the rapid prototyping of signal processors, e.g. Ptolemy <ref> [20, 21] </ref> and Using these tools, students would layout algorithms as block diagrams and then connect the algorithms together to form a complex system. The tools can simulate a complex system and generate equivalent source code and download the code onto DSP boards.
Reference: [21] <author> J. Buck, S. Ha, E. A. Lee, and D. G. Messerschmitt, "Ptolemy: </author> <title> A platform for heterogeneous simulation and prototyping," </title> <booktitle> in Proc. of the 1991 European Simulation Conf., </booktitle> <address> (Copenhagen, Denmark), </address> <month> July </month> <year> 1991. </year>
Reference-contexts: Much of the current research effort in integrated systems is in the context of developing environments for the rapid prototyping of signal processors, e.g. Ptolemy <ref> [20, 21] </ref> and Using these tools, students would layout algorithms as block diagrams and then connect the algorithms together to form a complex system. The tools can simulate a complex system and generate equivalent source code and download the code onto DSP boards.
Reference: [22] <author> B. L. Evans, J. H. McClellan, and H. J. Trussell, </author> <title> "Investigating signal processing theory with Mathemat-ica," </title> <booktitle> in Proc. IEEE Int. Conf. Acoust., Speech, and Signal Processing, vol. I, </booktitle> <address> (Minneapolis, MN), </address> <pages> pp. 12-15, </pages> <month> Apr. </month> <year> 1993. </year>
Reference-contexts: Third, the Signal Processing Packages for Mathematica already define commonly used signals and systems and compute transforms and convolution on sampled sequences and algebraic expressions with explanation. Based on our experience writing interactive tutorials [19] and self-evaluation exercises <ref> [22] </ref> for signals and systems, we have created an interactive solution set for the linear systems textbook Contemporary Linear Systems Using Matlab by Robert D. Strum and Donald E. Kirk [1].
References-found: 22

