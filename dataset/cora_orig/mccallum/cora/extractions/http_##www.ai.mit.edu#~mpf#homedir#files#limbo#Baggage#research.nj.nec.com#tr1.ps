URL: http://www.ai.mit.edu/~mpf/homedir/files/limbo/Baggage/research.nj.nec.com/tr1.ps
Refering-URL: 
Root-URL: 
Email: sjsmith@cs.umd.edu  nau@cs.umd.edu  
Title: Toward an Analysis of Forward Pruning  
Author: Stephen J. J. Smith Dana S. Nau Dana S. Nau, 
Note: Address correspondence to  This work supported in part by an AT&T Ph.D. scholarship to Stephen J. J. Smith, Maryland Industrial Part nerships (MIPS) grant 501.15, Great Game Products, and NSF grants IRI-8907890 and NSFD CDR-88003012.  
Date: June 30, 1993  
Address: College Park, MD 20740  College Park, MD 20740  College Park, MD 20742.  
Affiliation: Computer Science Department University of Maryland  Institute for Advanced Computer Studies, Computer Science Department, and Institute for Systems Research University of Maryland  Computer Science Dept., University of Maryland,  
Abstract: Several early game-playing computer programs used forward pruning (i.e., the practice of deliberately ignoring nodes that are believed unlikely to affect a game tree's minimax value), but this technique did not seem to result in good decision-making. The poor performance of forward pruning presents a major puzzle for AI research on game playing, because some version of forward pruning seems to be "what people do," and the best chess-playing programs still do not play as well as the best humans. As a step toward deeper understanding of how forward pruning affects quality of play, in this paper we set up a model of forward pruning on two abstract classes of binary game trees, and we use this model to investigate how forward pruning affects the accuracy of the minimax values returned. The primary result of our study is that forward pruning does better when there is a high correlation among the minimax values of sibling nodes in a game tree. This result suggests that forward pruning may possibly be a useful decision-making technique in certain kinds of games. In particular, we believe that bridge may be such a game. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Berliner. </author> <title> The B* tree search algorithm: A best-first proof procedure. </title> <journal> Artificial Intelligence, </journal> <volume> 12 </volume> <pages> 23-40, </pages> <year> 1979. </year>
Reference-contexts: To decrease the number of nodes examined even further, a number of game-tree-search procedures have been developed such as alpha-beta [5], B* <ref> [1] </ref>, or SSS* [16]. These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). The above approach has worked well in games such as chess [2, 7], checkers [12], and othello [6].
Reference: [2] <author> H. J. Berliner, G. Goetsch, M. S. Campbell, and C. Ebeling. </author> <title> Measuring the performance potential of chess programs. </title> <journal> Artificial Intelligence, </journal> <volume> 43 </volume> <pages> 7-20, </pages> <year> 1990. </year>
Reference-contexts: These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). The above approach has worked well in games such as chess <ref> [2, 7] </ref>, checkers [12], and othello [6]. A more aggressive approach is forward pruning, in which the procedure deliberately ignores v if it believes v is unlikely to affect mm (u), even if there is no proof that v will not affect mm (u).
Reference: [3] <author> A. W. Biermann. </author> <title> Theoretical issues related to computer game playing programs. </title> <booktitle> Personal Computing, </booktitle> <pages> pages 86-88, </pages> <month> Sept. </month> <year> 1978. </year>
Reference-contexts: On perfect-information zero-sum games such as chess, forward pruning has not worked as well as approaches that do not use forward pruning <ref> [3, 19] </ref>. This presents a major puzzle for AI research on game playing, because some version of forward pruning seems to be "what people do," and the best chess-playing programs still do not play as well as the best humans. <p> Although several early computer chess programs used forward pruning, this approach is no longer widely used, because chess programs that used it did less well than those that did not <ref> [3, 19] </ref>. 2.1 N-Game-Like Trees 1 In particular, we are developing a forward-pruning search technique for the game of bridge [14, ?], by extending task-network planning techniques [17, 18, 11, 15] to represent multi-agency and uncertainty. 1 1 1 2 2 2 00 1 2 Leaf node values 1 2 2
Reference: [4] <author> Eugene Charniak and Drew McDermott. </author> <title> Introduction to Artificial Intelligence. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1985. </year>
Reference: [5] <author> D. E. Knuth and R. W. Moore. </author> <title> An analysis of alpha-beta pruning. </title> <journal> Artificial Intelligence, </journal> <volume> 6 </volume> <pages> 293-326, </pages> <year> 1975. </year>
Reference-contexts: To decrease the number of nodes examined even further, a number of game-tree-search procedures have been developed such as alpha-beta <ref> [5] </ref>, B* [1], or SSS* [16]. These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). The above approach has worked well in games such as chess [2, 7], checkers [12], and othello [6].
Reference: [6] <author> K.-F. Lee and S. Mahajan. </author> <title> The development of a world class othello program. </title> <journal> Artificial Intelligence, </journal> <volume> 43 </volume> <pages> 21-36, </pages> <year> 1990. </year>
Reference-contexts: These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). The above approach has worked well in games such as chess [2, 7], checkers [12], and othello <ref> [6] </ref>. A more aggressive approach is forward pruning, in which the procedure deliberately ignores v if it believes v is unlikely to affect mm (u), even if there is no proof that v will not affect mm (u).
Reference: [7] <author> D. Levy and M. Newborn. </author> <title> All About Chess and Computers. </title> <publisher> Computer Science Press, </publisher> <year> 1982. </year>
Reference-contexts: These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). The above approach has worked well in games such as chess <ref> [2, 7] </ref>, checkers [12], and othello [6]. A more aggressive approach is forward pruning, in which the procedure deliberately ignores v if it believes v is unlikely to affect mm (u), even if there is no proof that v will not affect mm (u).
Reference: [8] <author> D. S. Nau. </author> <title> An investigation of the causes of pathology in games. </title> <journal> Artificial Intelligence, </journal> <volume> 19 </volume> <pages> 257-278, </pages> <year> 1982. </year>
Reference-contexts: In this section, we define an class of abstract game trees that bears a superficial resemblance to the trick-scoring method used in bridge. These game trees are also similar to the N-games described in <ref> [8, 9] </ref>, and for this reason, we call them N-game-like trees. 2 Each N-game-like tree is a complete tree that contains the following types of nodes (an example appears in Fig. 1): 1. Max nodes, where it is Max's move. <p> Thus, the value of each leaf node falls in the range f0; 1=h; : : : ; 1g. 2.2 P-Game-Like Trees In this section, we define a class of abstract game trees called P-game-like trees, which are similar to the P-games described in <ref> [8, 9, 10] </ref>. 4 Each P-game-like tree is a complete tree that contains the following types of nodes (an example appears in Fig. 2): 1. Max nodes, where it is Max's move. <p> In N-game-like trees, the returned values generally get more accurate as the game tree's height increases|but in P-game-like trees, the returned values generally get less accurate as the game tree's height increases. We believe this behavior is related to the fact that P-games are pathological and N-games are not <ref> [8, 9] </ref>. 5 Conclusion In this paper, we have set up a model of forward pruning on two classes of game trees: binary N-game-like game trees, and binary P-game-like game trees.
Reference: [9] <author> D. S. Nau. </author> <title> Pathology on game trees revisited, and an alternative to minimaxing. </title> <journal> Artificial Intelligence, </journal> <volume> 21(1, </volume> 2):221-244, March 1983. 
Reference-contexts: In this section, we define an class of abstract game trees that bears a superficial resemblance to the trick-scoring method used in bridge. These game trees are also similar to the N-games described in <ref> [8, 9] </ref>, and for this reason, we call them N-game-like trees. 2 Each N-game-like tree is a complete tree that contains the following types of nodes (an example appears in Fig. 1): 1. Max nodes, where it is Max's move. <p> Thus, the value of each leaf node falls in the range f0; 1=h; : : : ; 1g. 2.2 P-Game-Like Trees In this section, we define a class of abstract game trees called P-game-like trees, which are similar to the P-games described in <ref> [8, 9, 10] </ref>. 4 Each P-game-like tree is a complete tree that contains the following types of nodes (an example appears in Fig. 2): 1. Max nodes, where it is Max's move. <p> In N-game-like trees, the returned values generally get more accurate as the game tree's height increases|but in P-game-like trees, the returned values generally get less accurate as the game tree's height increases. We believe this behavior is related to the fact that P-games are pathological and N-games are not <ref> [8, 9] </ref>. 5 Conclusion In this paper, we have set up a model of forward pruning on two classes of game trees: binary N-game-like game trees, and binary P-game-like game trees.
Reference: [10] <author> J. Pearl. </author> <title> Heuristics. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1984. </year>
Reference-contexts: Thus, the value of each leaf node falls in the range f0; 1=h; : : : ; 1g. 2.2 P-Game-Like Trees In this section, we define a class of abstract game trees called P-game-like trees, which are similar to the P-games described in <ref> [8, 9, 10] </ref>. 4 Each P-game-like tree is a complete tree that contains the following types of nodes (an example appears in Fig. 2): 1. Max nodes, where it is Max's move.
Reference: [11] <author> E. D. Sacerdoti. </author> <title> A Structure for Plans and Behavior. </title> <publisher> American Elsevier Publishing Company, </publisher> <year> 1977. </year>
Reference-contexts: forward pruning, this approach is no longer widely used, because chess programs that used it did less well than those that did not [3, 19]. 2.1 N-Game-Like Trees 1 In particular, we are developing a forward-pruning search technique for the game of bridge [14, ?], by extending task-network planning techniques <ref> [17, 18, 11, 15] </ref> to represent multi-agency and uncertainty. 1 1 1 2 2 2 00 1 2 Leaf node values 1 2 2 2 00 1 2 2 2 0 2 Max node Min nodes RVA nodes Random values Max nodes Min nodes RVA nodes Random values Max nodes In
Reference: [12] <author> A. L. Samuel. </author> <title> Some studies in machine learning using the game of checkers. </title> <journal> ii-recent progress. IBM Journal of Research and Development, </journal> <volume> 2 </volume> <pages> 601-617, </pages> <year> 1967. </year> <month> 8 </month>
Reference-contexts: These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). The above approach has worked well in games such as chess [2, 7], checkers <ref> [12] </ref>, and othello [6]. A more aggressive approach is forward pruning, in which the procedure deliberately ignores v if it believes v is unlikely to affect mm (u), even if there is no proof that v will not affect mm (u).
Reference: [13] <author> C. Shannon. </author> <title> Programming a computer for playing chess. </title> <journal> Philosophical Magazine, </journal> <volume> 7(14):256--275, </volume> <year> 1950. </year>
Reference-contexts: For this reason, game-playing programs usually mark some non-terminal nodes as terminal, and evaluate them using some static evaluation function e (u). The simplest version of this approach is what Shannon <ref> [13] </ref> called "Type A" pruning: choose some arbitrary cutoff depth d, and mark a non-terminal node u as terminal if and only if u's depth exceeds d.
Reference: [14] <author> S. J. Smith, D. Nau, and T. Throop. </author> <title> A hierarchical approach to strategic planning with non-cooperating agents under conditions of uncertainty. </title> <booktitle> In Proc. First Internat. Conf. AI Planning Systems, </booktitle> <pages> pages 299-300, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Although several early computer chess programs used forward pruning, this approach is no longer widely used, because chess programs that used it did less well than those that did not [3, 19]. 2.1 N-Game-Like Trees 1 In particular, we are developing a forward-pruning search technique for the game of bridge <ref> [14, ?] </ref>, by extending task-network planning techniques [17, 18, 11, 15] to represent multi-agency and uncertainty. 1 1 1 2 2 2 00 1 2 Leaf node values 1 2 2 2 00 1 2 2 2 0 2 Max node Min nodes RVA nodes Random values Max nodes Min nodes <p> well in bridge, because they have no chance of searching any significant portion of the game tree. * Our preliminary studies on the game of bridge show that by using forward-pruning techniques based on task-network planning, we can produce search trees of only about 1300 nodes in the worst case <ref> [14] </ref>. Thus, forward pruning will allow us to search all the way to the end of the game.
Reference: [15] <author> Mark Stefik. </author> <title> Planning with constraints (molgen: Part 1). </title> <journal> Artificial Intelligence, </journal> <volume> 16 </volume> <pages> 111-140, </pages> <year> 1981. </year>
Reference-contexts: forward pruning, this approach is no longer widely used, because chess programs that used it did less well than those that did not [3, 19]. 2.1 N-Game-Like Trees 1 In particular, we are developing a forward-pruning search technique for the game of bridge [14, ?], by extending task-network planning techniques <ref> [17, 18, 11, 15] </ref> to represent multi-agency and uncertainty. 1 1 1 2 2 2 00 1 2 Leaf node values 1 2 2 2 00 1 2 2 2 0 2 Max node Min nodes RVA nodes Random values Max nodes Min nodes RVA nodes Random values Max nodes In
Reference: [16] <author> G. C. Stockman. </author> <title> A minimax algorithm better than alpha-beta? Artificial Intelligence, </title> <booktitle> 12 </booktitle> <pages> 179-196, </pages> <year> 1979. </year>
Reference-contexts: To decrease the number of nodes examined even further, a number of game-tree-search procedures have been developed such as alpha-beta [5], B* [1], or SSS* <ref> [16] </ref>. These procedures will ignore any node v below u that they can prove will not affect u's minimax value mm (u). The above approach has worked well in games such as chess [2, 7], checkers [12], and othello [6].
Reference: [17] <author> Austin Tate. </author> <title> Project planning using a hierarchic non-linear planner. </title> <type> Technical Report 25, </type> <institution> Department of Artificial Intelligence, University of Edinburgh, </institution> <year> 1976. </year>
Reference-contexts: forward pruning, this approach is no longer widely used, because chess programs that used it did less well than those that did not [3, 19]. 2.1 N-Game-Like Trees 1 In particular, we are developing a forward-pruning search technique for the game of bridge [14, ?], by extending task-network planning techniques <ref> [17, 18, 11, 15] </ref> to represent multi-agency and uncertainty. 1 1 1 2 2 2 00 1 2 Leaf node values 1 2 2 2 00 1 2 2 2 0 2 Max node Min nodes RVA nodes Random values Max nodes Min nodes RVA nodes Random values Max nodes In
Reference: [18] <author> Austin Tate. </author> <title> Generating project networks. </title> <booktitle> In Proc. 5th International Joint Conf. Artificial Intelligence, </booktitle> <year> 1977. </year>
Reference-contexts: forward pruning, this approach is no longer widely used, because chess programs that used it did less well than those that did not [3, 19]. 2.1 N-Game-Like Trees 1 In particular, we are developing a forward-pruning search technique for the game of bridge [14, ?], by extending task-network planning techniques <ref> [17, 18, 11, 15] </ref> to represent multi-agency and uncertainty. 1 1 1 2 2 2 00 1 2 Leaf node values 1 2 2 2 00 1 2 2 2 0 2 Max node Min nodes RVA nodes Random values Max nodes Min nodes RVA nodes Random values Max nodes In
Reference: [19] <author> T. R. Truscott. </author> <title> Techniques used in minimax game-playing programs. </title> <type> Master's thesis, </type> <institution> Duke University, Durham, NC, </institution> <year> 1981. </year> <month> 9 </month>
Reference-contexts: On perfect-information zero-sum games such as chess, forward pruning has not worked as well as approaches that do not use forward pruning <ref> [3, 19] </ref>. This presents a major puzzle for AI research on game playing, because some version of forward pruning seems to be "what people do," and the best chess-playing programs still do not play as well as the best humans. <p> Although several early computer chess programs used forward pruning, this approach is no longer widely used, because chess programs that used it did less well than those that did not <ref> [3, 19] </ref>. 2.1 N-Game-Like Trees 1 In particular, we are developing a forward-pruning search technique for the game of bridge [14, ?], by extending task-network planning techniques [17, 18, 11, 15] to represent multi-agency and uncertainty. 1 1 1 2 2 2 00 1 2 Leaf node values 1 2 2
References-found: 19

