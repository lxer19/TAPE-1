URL: ftp://cse.ogi.edu/pub/tech-reports/1998/98-004.ps.gz
Refering-URL: ftp://cse.ogi.edu/pub/tech-reports/README.html
Root-URL: http://www.cse.ogi.edu
Title: View Consistency for Optimistic Replication better replica selection and improved consistency guarantees over a purely
Author: Ashvin Goel, Calton Pu Gerald J. Popek 
Note: due to  
Address: Portland  Los Angeles  
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute,  Computer Science Department University of California,  
Abstract: Optimistically replicated systems provide highly available data even when communication between data replicas is unreliable or unavailable. The high availability comes at the cost of allowing inconsistent accesses, since users can read and write old copies of data. Session guarantees [15] have been used to reduce such inconsistencies. They preserve most of the availability benefits of optimistic systems. We generalize session guarantees to apply to persistent as well as distributed entities. We implement these guarantees, called view consistency, on Ficus an optimistically replicated file system. Our implementation enforces consistency on a per-file basis and does not require changes to individual applications. View consistency is enforced by clients accessing the data and thus requires minimal changes to the replicated data servers. We show that view consistency allows access to available and high performing data replicas and can be implemented efficiently. Experimental results show that the consistency overhead for clients ranges from 1% to 8% of application runtime for the benchmarks studied in the prototype system. The benefits of the system are an improvement in access times 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Rafael Alonso, Daniel Barbara, and Luis L. Cova. </author> <title> Using stashing to increase node autonomy in distributed file systems. </title> <booktitle> In Proceedings of the Ninth IEEE Symposium on Reliability in Distributed Software and Database Systems, </booktitle> <pages> pages 12-21, </pages> <month> Oc-tober </month> <year> 1990. </year>
Reference-contexts: View consistency deals with this issue partially by combining the clients into a single entity and providing consistency guarantees to this entity group. The combining of the clients into a single entity can be done dynamically. Client-based consistency has been used by Alonso, et el., <ref> [1] </ref> to provide quasi-copy consistency. Quasi-copies are cached (or stashed) copies of data that may be somewhat out-of-date, but are guaranteed to meet certain consistency predicates. Client consistency for quasi-copies can generally be maintained for age-dependent predicates only.
Reference: [2] <author> Stephen M. Curry. </author> <title> An introduction to the java ring. Java World, </title> <month> April </month> <year> 1998. </year> <note> http://www.javaworld.com/javaworld/ w-04-1998/jw-04-javadev.html. </note>
Reference: [3] <author> Richard G. Guy, Gerald J. Popek, and Thomas W. Page, Jr. </author> <title> Consistency algorithms for optimistic replication. </title> <booktitle> In Proceedings of the First International Conference on Network Protocols. IEEE, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: In the first step, a replica learns about the state of the other replicas. In the second step, the replicas gossips this information to the other replicas, who now learn what other replicas know about themselves. See Guy <ref> [3] </ref> for further details. Acknowledgments have also been used by Wuu [17] and Ladin [9].
Reference: [4] <author> John S. Heidemann, Thomas W. Page, Jr., Rich-ard G. Guy, and Gerald J. Popek. </author> <title> Primarily disconnected operation: Experiences with Ficus. </title> <booktitle> In Proceedings of the Second Workshop on Management of Replicated Data, </booktitle> <pages> pages 2-5. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: Optimistically replicated systems provide high availability even in weakly connected environments by allowing accesses to any file replica. This continuous access, even during network partitions, is critical for many applications such as reservation systems, appointment calendars, design doc 1 uments, meeting notes, and in general, mobile file accesses <ref> [7, 4, 16] </ref>. Inconsistencies due to updates being made to old copies (conflicting updates) are eventually 1 detected and resolved. Unfortunately, the lack of consistency guarantees during accesses can be very confusing to users. Session guarantees [15] have been used to reduce inconsistencies observed in optimistic systems.
Reference: [5] <author> John S. Heidemann and Gerald J. Popek. </author> <title> Filesystem development with stackable layers. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(1) </volume> <pages> 58-89, </pages> <year> 1994. </year>
Reference-contexts: We discuss these issues in the next section. 5 Implementation We have implemented view consistency and replica selection as a separate stackable layer <ref> [5] </ref> on Ficus [10], an optimistically replicated file system. 5.1 Comparable File Versions Ficus allows accesses to any available file replica and detects writes to older replicas, when replicas communicate, by using vector timestamps [12]. <p> The difference between their work and ours is that they use acknowledgments for garbage collection at the replica servers while we use them at the clients also. 6 Experiments and Evaluation We have implemented view consistency as a stackable file-system layer over the Ficus file system <ref> [5] </ref>. A user-level view-entry database provides 9 view-entries to the kernel. These view-entries are garbage collected by a deletion server that obtains the acknowledgment information from the reconciliation process. A delay server determines the latency and bandwidth to different replicas and provides these values to the kernel for replica selection.
Reference: [6] <author> John Howard, Michael Kazar, Sherri Menees, Da-vid Nichols, Mahadev Satyanarayanan, Robert Sidebotham, and Michael West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: No tests were done with locally stored replicas because view consistency can then be provided with no overhead (Section 5.2). We performed seven benchmarks with one, two and three data replicas. The first test is the modified Andrew Benchmark (mab) <ref> [6] </ref> that is intended to model a mix of filing operations and hence be representative of performance in actual use. The second and third tests are local and remote recursive cp and the fourth test is grep. Each of these tests exercise the read and write file operations.
Reference: [7] <author> James J. Kistler and Mahadev Satyanarayanan. </author> <title> Disconnected operation in the Coda file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1) </volume> <pages> 3-25, </pages> <year> 1992. </year>
Reference-contexts: Optimistically replicated systems provide high availability even in weakly connected environments by allowing accesses to any file replica. This continuous access, even during network partitions, is critical for many applications such as reservation systems, appointment calendars, design doc 1 uments, meeting notes, and in general, mobile file accesses <ref> [7, 4, 16] </ref>. Inconsistencies due to updates being made to old copies (conflicting updates) are eventually 1 detected and resolved. Unfortunately, the lack of consistency guarantees during accesses can be very confusing to users. Session guarantees [15] have been used to reduce inconsistencies observed in optimistic systems.
Reference: [8] <author> Geoffrey H. Kuenning and Gerald J. Popek. </author> <title> Automated hoarding for mobile computers. </title> <booktitle> In Proceedings of the 16th Symposium on Operating Systems Principles, </booktitle> <address> St. Malo, France, </address> <month> October </month> <year> 1997. </year> <note> ACM. </note>
Reference-contexts: View consistency will disallow accesses to any other file replica, since these replicas are older than the replica on which the user was working. 3. A user accesses a replicated web page and caches (or stashes <ref> [8] </ref>) the page. Later, this page is evicted to make space for other more important pages. View consistency ensures that remote accesses of the original web page yield later versions of data.
Reference: [9] <author> Rivka Ladin, Barbara Liskov, Liuba Shrira, and Sanjay Ghemawat. </author> <title> Providing high availability using lazy replication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 360-391, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: In the second step, the replicas gossips this information to the other replicas, who now learn what other replicas know about themselves. See Guy [3] for further details. Acknowledgments have also been used by Wuu [17] and Ladin <ref> [9] </ref>. The difference between their work and ours is that they use acknowledgments for garbage collection at the replica servers while we use them at the clients also. 6 Experiments and Evaluation We have implemented view consistency as a stackable file-system layer over the Ficus file system [5]. <p> We discuss view consistency for distributed entities and believe that many more applications will benefit from such guarantees. We also show how replica selection interacts with view consistency. Causal ordering of reads and updates by Ladin, et al., <ref> [9] </ref> provides guarantees similar to view con sistency. Unlike view consistency, causal ordering requires application-specific changes since applications must specify the causal relation between their operations. Causal ordering is enforced by replicas while view consistency is enforced by clients or entities.
Reference: [10] <author> T. W. Page, R. G. Guy, J. S. Heidemann, D. Rat-ner, P. Reiher, A. Goel, G. H. Kuenning, and G. J. Popek. </author> <title> Perspectives on optimistically replicated peer-to-peer filing. </title> <journal> Software|Practice and Experience, </journal> <note> 1998. To appear. </note>
Reference-contexts: We discuss these issues in the next section. 5 Implementation We have implemented view consistency and replica selection as a separate stackable layer [5] on Ficus <ref> [10] </ref>, an optimistically replicated file system. 5.1 Comparable File Versions Ficus allows accesses to any available file replica and detects writes to older replicas, when replicas communicate, by using vector timestamps [12].
Reference: [11] <author> Jehan-Fran~cois P^aris. </author> <title> Using volatile witnesses to extend the applicability of available copy protocols. </title> <booktitle> In Proceedings of the Second Workshop on Management of Replicated Data. IEEE, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: This operation requires coordinating the accesses of a complex entity. In a distributed entity, the view-entry may exist separately from the components of the entity. As an example, volatile witnesses <ref> [11] </ref> can be used for storing and accessing the view-entries.
Reference: [12] <author> D. Stott Parker, Jr., Gerald Popek, Gerard Ru-disin, Allen Stoughton, Bruce J. Walker, Eve-lyn Walton, Johanna M. Chow, David Ed-wards, Stephen Kiser, and Charles Kline. </author> <title> Detection of mutual inconsistency in distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 9(3) </volume> <pages> 240-247, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: section. 5 Implementation We have implemented view consistency and replica selection as a separate stackable layer [5] on Ficus [10], an optimistically replicated file system. 5.1 Comparable File Versions Ficus allows accesses to any available file replica and detects writes to older replicas, when replicas communicate, by using vector timestamps <ref> [12] </ref>. Each file replica has a vector timestamp of length n, where n is the number of replicas of the file. A vector timestamp is later than another if each component of the timestamp is greater than or equal to the corresponding component of the other.
Reference: [13] <author> Mahadev Satyanarayanan, John H. Howard, Da-vid A. Nichols, Robert N. Sidebotham, Alfred Z. Spector, and Michael J. West. </author> <title> The ITC distributed file system: </title> <booktitle> Principles and design. In Proceedings of the Tenth Symposium on Operating Systems Principles, </booktitle> <pages> pages 35-50. </pages> <publisher> ACM, </publisher> <month> December </month> <year> 1985. </year>
Reference-contexts: Although it is possible to implement parallel kernel operations, we have not done so in the current implementation. Coordinating Accesses to View-Entries Currently, users specify the entity type in their user-profile. Entities can be defined per Ficus volume <ref> [13] </ref>. The entity type is encoded in the entity parameter in Figure 1. This parameter is only used by the readViewEntry and writeViewEntry routines. Therefore, the cost and the complexity of providing a consistent view to a specific entity depends on the cost of reading and writing view-entries.
Reference: [14] <author> Margo Seltzer. </author> <title> A new hashing package for UNIX. </title> <booktitle> In USENIX Conference Proceedings. USENIX, </booktitle> <month> January </month> <year> 1991. </year>
Reference-contexts: Thus their number can grow large. We chose Margo Seltzer's db database package <ref> [14] </ref> for view-entry storage. It is relatively small, and caches large chunks of the database in memory for efficient access. View consistency is implemented in the kernel while the database runs at the user level. Therefore, there is communication and context switch overhead every time the database is accessed.
Reference: [15] <author> D.B. Terry, A.J. Demers, K. Petersen, M.J. Spre-itzer, M.M. Theimer, and B.B. Welch. </author> <title> Session guarantees for weakly consistent replicated data. </title> <booktitle> In Proceedings of the Third International Conference on Parallel and Distributed Information Systems, </booktitle> <pages> pages 140-149, </pages> <month> sep </month> <year> 1994. </year>
Reference-contexts: Inconsistencies due to updates being made to old copies (conflicting updates) are eventually 1 detected and resolved. Unfortunately, the lack of consistency guarantees during accesses can be very confusing to users. Session guarantees <ref> [15] </ref> have been used to reduce inconsistencies observed in optimistic systems. They maintain most of the availability benefits of such systems. Session guarantees preserve read and write dependencies for processes. <p> This definition of session guarantees is a combination of the read your writes, monotonic reads, writes follow reads and monotonic writes guarantees as described by Terry, et al. <ref> [15] </ref>. View consistency can be defined for each individual session guarantee, but we will ignore these distinctions in this paper for simplicity. Session guarantees are provided for single clients. View consistency can be provided to groups of clients. A closely cooperating groups of clients is called an entity. <p> Thus the new replica is given higher preference and accessed, and switching happens naturally for most files. Therefore, the explicit cost of switching in Ficus is very low. 7 Related Work Our work is closely related to Bayou <ref> [15] </ref>, an eventually consistent system, that provides session guarantees to reduce client inconsistency. These session guarantees are provided to process and process groups. We extend session guarantees to handle other transient, persistent and distributed entities.
Reference: [16] <author> Douglas B. Terry, Marvin M. Theimer, Karin Pe-tersen, Alan J. Demers, Mike J. Spreitzer, and Carl H. Hauser. </author> <title> Managing update conflicts in Bayou, a weakly connected replicated storage system. </title> <booktitle> In Proceedings of the 15th Symposium on Operating Systems Principles, </booktitle> <pages> pages 172-183, </pages> <address> Copper Mountain Resort, Colorado, </address> <month> December </month> <year> 1995. </year> <note> ACM. </note>
Reference-contexts: Optimistically replicated systems provide high availability even in weakly connected environments by allowing accesses to any file replica. This continuous access, even during network partitions, is critical for many applications such as reservation systems, appointment calendars, design doc 1 uments, meeting notes, and in general, mobile file accesses <ref> [7, 4, 16] </ref>. Inconsistencies due to updates being made to old copies (conflicting updates) are eventually 1 detected and resolved. Unfortunately, the lack of consistency guarantees during accesses can be very confusing to users. Session guarantees [15] have been used to reduce inconsistencies observed in optimistic systems.
Reference: [17] <author> Gene T. J. Wuu and Arthur J. Bernstein. </author> <title> Efficient solutions to the replicated log and dictionary problems. </title> <booktitle> In Proceedings of the Third Annual ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1984. </year>
Reference-contexts: In the first step, a replica learns about the state of the other replicas. In the second step, the replicas gossips this information to the other replicas, who now learn what other replicas know about themselves. See Guy [3] for further details. Acknowledgments have also been used by Wuu <ref> [17] </ref> and Ladin [9].
Reference: [18] <author> Erez Zadok and Dan Duchamp. </author> <title> Discovery and hot replacement of replicated read-only file systems, with application to mobile computing. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 69-85, </pages> <address> Cincinnati, OH, </address> <month> June </month> <year> 1991. </year> <booktitle> USENIX. </booktitle> <pages> 15 </pages>
Reference-contexts: Client consistency for quasi-copies can generally be maintained for age-dependent predicates only. For example, the "not more than two versions old" predicate can only be enforced by the server. Zadok and Duchamp <ref> [18] </ref> address the problem of providing data from the fastest available replica. They improve the auto-mounting daemon in Unix systems and allow transparent switching of open files to replacement file systems that are dynamically discovered.
References-found: 18

