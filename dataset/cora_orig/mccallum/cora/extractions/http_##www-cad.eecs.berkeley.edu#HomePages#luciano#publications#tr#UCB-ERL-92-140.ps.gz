URL: http://www-cad.eecs.berkeley.edu/HomePages/luciano/publications/tr/UCB-ERL-92-140.ps.gz
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/luciano/async.html
Root-URL: http://www.cs.berkeley.edu
Title: Synthesis and Testing of Bounded Wire Delay Asynchronous Circuits from Signal Transition Graphs  
Author: by Luciano Lavagno 
Degree: A dissertation submitted in partial satisfaction of the requirements for the degree of Doctor of Philosophy in Electrical Engineering and Computer Science in the GRADUATE DIVISION of the UNIVERSITY of CALIFORNIA at BERKELEY Committee in charge: Professor Alberto Sangiovanni-Vincentelli, Chair Professor Robert K. Brayton Professor Maxwell A. Rosenlicht  
Date: 1983  1992  
Address: Torino, Italy)  
Affiliation: Dottore in Ingegneria (Politecnico di  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> T. Agerwala. </author> <title> Putting Petri Nets to work. </title> <booktitle> Computer, </booktitle> <pages> pages 85-93, </pages> <month> December </month> <year> 1979. </year>
Reference-contexts: The method was proposed by Hollaar ([52]) and is related to various direct methods for Petri net implementation, such as, for example, [93], [84] and <ref> [1] </ref>. One-hot encoding has some significant advantages over the standard FT synthesis method described in the previous sections. 1. The critical race problem disappears, since exactly two state signals change for each transition.
Reference: [2] <author> F. Aghdasi and M. Bolton. </author> <title> Self-clocked asynchronous finite state machine design with PAL22IP6 device. Microprocessors and Microsystems, </title> <month> February </month> <year> 1991. </year>
Reference-contexts: The clock is chosen to be slow enough to allow the output to settle before it is allowed to propagate to the feedback wires and to the environment. Various approaches to the design of self-clocked asynchronous circuits have been pre sented in the literature ([29], [135], [85, 101], [69], <ref> [2] </ref>, [90] to name but a few). Some distinctive points among them are: 62 CHAPTER 2.
Reference: [3] <author> V. Akella and G. Gopalakrishnan. SHILPA: </author> <title> a high-level synthesis system for self-timed circuits. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: It can also be used, for example, as a component in higher level synthesis methodologies for asynchronous circuits. Such methodologies, as for example [113], [40] or <ref> [3] </ref>, assume that a library of relatively 2.8. CONCLUSION 107 complex components has been implemented in the available technology. A flexible, automated solution would thus describe the components using an STG, and use the methodology described in Chapters 4 and 5 to implement them correctly and automatically. 108 CHAPTER 2.
Reference: [4] <author> R. Alur, C. Courcoubetis, and D. Dill. </author> <title> Model-Checking for Real-Time Systems. </title> <booktitle> In Proceedings of the Fifth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 414-425, </pages> <month> June </month> <year> 1990. </year>
Reference: [5] <author> D. B. Armstrong, A. D. Friedman, and P. R. Menon. </author> <title> Design of asynchronous circuits assuming unbounded gate delays. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-18(12):1110-1120, </volume> <month> December </month> <year> 1969. </year>
Reference-contexts: Speed-independence ensures correct operation of a circuit modeled 1.2. OVERVIEW OF THE DESIGN METHODOLOGY 5 using the unbounded gate delay model. This model is used in the synthesis methods proposed, for example, by <ref> [5] </ref>, [126], [87] and [8]. Unfortunately, the unbounded gate delay model is not realistic: it ignores technological limits on the delays, which is pessimistic, and ignores the wire delays, which is optimistic ([118]).
Reference: [6] <author> P. A. Beerel and T. H-Y. Meng. </author> <title> Semi-modularity and self-diagnostic asynchronous control circuits. </title> <booktitle> In Proceedings of the Conference on Advanced Research in VLSI, </booktitle> <month> March </month> <year> 1991. </year>
Reference-contexts: Armstrong et al. observed that the nature of the methodology ensures a high degree of self-checking, because almost half of the faults will stop the circuit operation (see also [126] and <ref> [6] </ref> for more general results on self-checking properties of speed-independent circuits). The dual-rail encoding is still the most common way of implementing data-oriented computations with unbounded delays, as opposed to control-oriented ones.
Reference: [7] <author> P. A. Beerel and T. H-Y. Meng. </author> <title> Automatic gate-level synthesis of speed-independent circuits. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: The delay model is slightly less realistic than the previous approaches, as gates with mixed inverting/non-inverting inputs cannot be easily designed with today's CMOS technology. On the other hand the gains in area can be substantial, providing an implementation that is competing with efficient bounded delay designs. Moreover <ref> [8, 7] </ref> uses an extended definition of semi-modular circuits which allows a limited amount of non-determinism in the environment. 2.5. SPEED-INDEPENDENT CIRCUITS 75 2.5.3 Synthesis from Signal Transition Graphs This section briefly introduces the work done on the Signal Transition Graph specification.
Reference: [8] <author> P. A. Beerel and T. H-Y. Meng. </author> <title> Gate-level synthesis of speed-independent asynchronous control circuits. </title> <booktitle> In Proceedings of the ACM International Workshop on Timing Issues in the Specification and Synthesis of Digital Systems (TAU), </booktitle> <month> March </month> <year> 1992. </year> <note> 276 BIBLIOGRAPHY </note>
Reference-contexts: Speed-independence ensures correct operation of a circuit modeled 1.2. OVERVIEW OF THE DESIGN METHODOLOGY 5 using the unbounded gate delay model. This model is used in the synthesis methods proposed, for example, by [5], [126], [87] and <ref> [8] </ref>. Unfortunately, the unbounded gate delay model is not realistic: it ignores technological limits on the delays, which is pessimistic, and ignores the wire delays, which is optimistic ([118]). <p> The delay model is slightly less realistic than the previous approaches, as gates with mixed inverting/non-inverting inputs cannot be easily designed with today's CMOS technology. On the other hand the gains in area can be substantial, providing an implementation that is competing with efficient bounded delay designs. Moreover <ref> [8, 7] </ref> uses an extended definition of semi-modular circuits which allows a limited amount of non-determinism in the environment. 2.5. SPEED-INDEPENDENT CIRCUITS 75 2.5.3 Synthesis from Signal Transition Graphs This section briefly introduces the work done on the Signal Transition Graph specification. <p> Once the above choices have been made, the STG describing the desired behavior can be verified against the chosen properties, using the results from the literature summarized in this chapter. 3. An implementation is produced using the synthesis algorithms described in Chapter 5 (or, for example, in [126] and <ref> [8] </ref>). 4.
Reference: [9] <author> C. Berthet and E. Cerny. </author> <title> Synthesis of speed-independent circuits using set-memory elements. </title> <editor> In G. Saucier, editor, </editor> <booktitle> Proceedings of the International Workshop Logic and Architectural Synthesis for Silicon Compilers. </booktitle> <address> Grenoble, France, </address> <month> May </month> <year> 1988. </year>
Reference: [10] <author> E. </author> <title> Best. Structural theory of Petri Nets: </title> <booktitle> the free-choice hiatus. Lecture Notes in Computer Science, </booktitle> <volume> 254 </volume> <pages> 168-206, </pages> <year> 1987. </year>
Reference-contexts: A transition-generated subnet P 0 is a Marked Graph component of a PN P if it is a Marked Graph. See, for example, the PN in Figure 2.3.(a), taken from <ref> [10] </ref> (circles denote places, boxes denote transitions). The subnet in Figure 2.3.(b) is not transition-generated, because there exists t 1 2 T 0 whose predecessor (e.g. p 2 ) or successor (e.g. p 3 ) is not in P 0 . <p> The restriction does not imply a loss of generality, because it can be easily shown that a free-choice STG with empty transitions can always be translated into an extended free-choice STG without empty transitions, and vice-versa. Moreover, as shown in <ref> [10] </ref>, all results proved for free-choice Petri nets are true also for extended free-choice ones, and vice-versa. 3.3.3 Signal Transition Graphs and State Transition Diagrams Both [102] and [26] gave also synthesis methods to translate the PN into an STD (called Transition Diagram in [102] and State Graph in [26]) and
Reference: [11] <author> E. Best and J. Esparza. </author> <title> Model checking of persistent Petri Nets. </title> <note> In Computer Science Logic 91 (LNCS), 1991. Also appeared as Hildesheimer Informatik Fachbericht 11/91. </note>
Reference-contexts: methods described in this section can deal also with the unbounded wire delay model, by inserting a non-inverting buffer gate on each wire (or on selected 14 This verification method is most likely connected with recent results on polynomial time verification methods for particular subclasses of Petri nets reported in <ref> [11] </ref>. 2.7. HAZARD ANALYSIS IN ASYNCHRONOUS CIRCUITS 93 wires whose delay is known to be long compared with gate delays, due to, e.g. layout considerations).
Reference: [12] <author> E. Best and K. Voss. </author> <title> Free choice systems have home states. </title> <journal> Acta Informatica, </journal> <volume> 21 </volume> <pages> 89-100, </pages> <year> 1984. </year>
Reference-contexts: A PN is free-choice (FCPN) if it is free-choice with respect to all its transitions (see, e.g., Figure 1.2.(a)). A PN is an extended free-choice Petri net (simply called free-choice in <ref> [12] </ref>) if any two transitions that share some predecessor places have exactly the same set of predecessor places. A PN is a behaviorally free-choice Petri net if any two transitions that share some predecessor places are enabled exactly in the same set of reachable markings. <p> The following Theorem was proved in <ref> [12] </ref>: Theorem 3.3.2 The ALTS of a PN is confluent if the net is free-choice, bounded and live. The following Theorems were proved in [132]: Theorem 3.3.3 The CD of a marked PN is a semi-modular lattice with a zero element if the net is persistent. Theorem 3.3.4 1.
Reference: [13] <author> D. L. Black. </author> <title> On the existence of delay-insensitive fair arbiters: Trace theory and its limitations. </title> <journal> Distributed Computing, </journal> <volume> 1 </volume> <pages> 205-225, </pages> <year> 1986. </year>
Reference-contexts: Such a TS is represented by a strongly connected graph 5 . The ALTS in Figure 3.1.(b) is strongly live. 3.1.4 Trace Models For an ACS defined by an ALTS we can define another representation, called Trace Structure ([100, 119, 120], <ref> [13] </ref>, [39]), or Trace Model 6 , of its behavior. This representation will be needed in Section 3.4.3, because delay-insensitive circuits were defined in the literature using Trace Models, so in order to define delay-insensitivity within our framework we must relate Trace Models with Arc-labeled Transition Systems.
Reference: [14] <author> G. Borriello. </author> <title> A New Interface Specification Methodology and its Application to Transducer Synthesis. </title> <type> PhD thesis, </type> <institution> U.C. Berkeley, </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: We allow only input signals of the circuit to have the kind of non-deterministic behavior outlined above. In timing diagram terms, causality relations are represented as directed arrows between signal transitions, and choice/merging points are described by informal textual notes (even though there have been formalization attempts, such as <ref> [14] </ref> or [54]). For example, Figure 1.1.(a) describes the interaction between three signals, x, y and z. When x rises, y falls and z rises. No order or explicit timing is specified: y and z + are concurrent and caused by x + .
Reference: [15] <author> R. K. Brayton, G. D. Hachtel, C. T. McMullen, and A. Sangiovanni-Vincentelli. </author> <title> Logic Minimization Algorithms for VLSI Synthesis. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1984. </year>
Reference-contexts: The remainder of the chapter is organized as follows. Section 2.2 briefly recalls some definitions from the theory of logic functions (see, e.g., <ref> [15] </ref>), Finite State Machines (see, e.g., [65] or [117]), Finite Automata (see, e.g., [43]) and Petri nets (see, e.g., [89] or [96]). Section 2.3 describes the classical synthesis techniques, derived from the work of Huffman ([53]). <p> A cover F is unate in a variable x i if variable x i appears in only one phase (i.e., either x i or x i ) in its cubes (respectively monotone increasing and monotone decreasing). Otherwise it is binate in x i . As shown in <ref> [15] </ref>, a function that is unate may have binate covers, but prime covers of unate functions are unate. A unate function has a unique prime and irredundant cover, which is the set of all its prime implicants. <p> Let R 0 be a cover of a completely specified logic function that has value 0 on the vertices covered by a cube in F and value 1 otherwise (it can be obtained by complementing cover F , as described, e.g, in <ref> [15] </ref>). Let d (c 0 ; c 00 ) be the Hamming distance between cubes c 0 and c 00 .
Reference: [16] <author> R. K. Brayton, R. Rudell, A. Sangiovanni-Vincentelli, and A. R. Wang. </author> <title> MIS: A multiple-level logic optimization system. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> CAD-6(6):1062-1081, </volume> <month> November </month> <year> 1987. </year>
Reference-contexts: Synchronizers and D-latches are similarly used to implement each signal when the circuit is synchronous or when it interfaces an asynchronous input to a synchronous subsystem. The initial circuit can be rather large, so Suture optimizes it with a set of combinational and sequential logic transformations, based on <ref> [16] </ref> and on pattern replacement guided by waveform analysis respectively. In the second case, for example, a reset-dominant SR flip-flop where the S input is always high when R rises can be replaced by the simpler circuit S R. <p> So if we want to implement the covers of s and m in a specific technology and improve the area and/or delay performance of the circuit, then we can use some multi-level logic synthesis techniques (e.g. those described in <ref> [16] </ref>, [32] and [108, 107]). In order to retain the hazard properties of the two-level circuit, though, we must restrict ourselves to the transformations listed in Theorems 5.1.3 and 5.1.4 (and, possibly, those listed in [68]).
Reference: [17] <author> E. Brunvand and R. F. Sproull. </author> <title> Translating concurrent programs into delay-insensitive circuits. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 262-265, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Authors who proposed design methodologies for circuits that operate correctly with this model (delay-insensitive circuits) are forced either to assume that some wire delays are almost zero (isochronic forks, [23]) or to take delays into account within hand-designed logic modules ([101], [40], <ref> [17] </ref>, [57], [113]). The Signal Transition Graph (STG) model was introduced independently by Rosenblum et al. ([102]) and by Chu ([26, 27]), to model formally both the circuit and the environment in which it operates.
Reference: [18] <author> R. Bryant. </author> <title> Graph-Based Algorithms for Boolean Function Manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35:677-691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: One way to find a minimum cost partitioning set given the clauses defining it is to combine the approach described in [73] to solve the binate covering problem using binary decision diagrams with the multi-valued extension of binary decision diagrams. A Multi-valued Decision Diagram (MDD, see <ref> [18] </ref> and [58]) is a rooted directed acyclic graph where: 4.3.
Reference: [19] <author> J. A. Brzozowski and C-J. Seger. </author> <title> Advances in asynchronous circuit theory part I: Gate and unbounded inertial delay models. </title> <journal> Bulletin of the European Association of Theoretical Computer Science, </journal> <month> October </month> <year> 1990. </year> <note> BIBLIOGRAPHY 277 </note>
Reference-contexts: Here we will only briefly list the methods that have most direct relevance for our work (see <ref> [19, 20] </ref> for a more complete description): 1. Three-valued simulation ([42], [105]) provides the fastest known algorithm for asynchronous circuit verification, but its usefulness is limited to static and steady-state hazard checking in Fundamental Mode using the pure unbounded wire (or bounded wire) delay model (Sec tion 2.7.1). 2. <p> In order to describe more precisely the simulation algorithm we need, as usual, some definitions (taken from <ref> [19] </ref>). Let denote a changing or undefined value. A partial order on the set of ternary values f0; 1; g is given by 0 &lt; and 1 &lt; (all other pairs are incomparable). <p> PREVIOUS WORK (a) compute Y from y and x by ternary simulation of each gate in the combinational logic part of the circuit (b) let y = Y until convergence (i.e., y = Y immediately after step 3a) As shown in <ref> [19] </ref>, both Procedure 2.7.1 and Procedure 2.7.2 converge in at most m iterations, where m is the number of state signals, because at least one signal must change at each iteration.
Reference: [20] <author> J. A. Brzozowski and C-J. Seger. </author> <title> Advances in asynchronous circuit theory part II: Bounded inertial delay models, mos circuits, design techniques. </title> <journal> Bulletin of the European Association of Theoretical Computer Science, </journal> <month> March </month> <year> 1991. </year>
Reference-contexts: PREVIOUS WORK 2. No FT with essential hazards has an implementation without steady-state hazards independent of the feedback delays. As noted in <ref> [20] </ref>, the Theorem of [117] is the first known proof that some behavior has no delay-insensitive implementation (see also Section 2.6). 3. <p> Here we will only briefly list the methods that have most direct relevance for our work (see <ref> [19, 20] </ref> for a more complete description): 1. Three-valued simulation ([42], [105]) provides the fastest known algorithm for asynchronous circuit verification, but its usefulness is limited to static and steady-state hazard checking in Fundamental Mode using the pure unbounded wire (or bounded wire) delay model (Sec tion 2.7.1). 2. <p> Problem 5.4.1 most likely is not NP-complete because, as shown in <ref> [20] </ref>, checking that a circuit is hazard-free is NP-hard. So a guessed answer most likely cannot be verified in polynomial time (i.e. unless the hazard checking problem can be solved in polynomial time).
Reference: [21] <author> J. R. Burch. </author> <title> Automatic Symbolic Verification of Real-Time Concurrent Systems. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <month> August </month> <year> 1992. </year>
Reference: [22] <author> J. R. Burch. </author> <title> Delay models for verifying speed-dependent asynchronous circuits. </title> <booktitle> In Proceedings of the ACM International Workshop on Timing Issues in the Specification and Synthesis of Digital Systems (TAU), </booktitle> <month> March </month> <year> 1992. </year>
Reference-contexts: The specification does not prescribe the behavior of internal signals, so their abnormal transitions do not constitute hazards per se. Let us examine the circuit described in Figure 2.24 (taken from <ref> [22] </ref>), where the numbers above each gate represent an upper and a lower bound on its delay (using the gate delay model). <p> In the example of Figure 2.23, we can use timing analysis to label each edge in the STG with a minimum delay between the predecessor and successor transition, as shown by the edge 5 The delays are different from the similar implementation shown in Figure 2.24, that was taken from <ref> [22] </ref>. 5.4. HAZARD ELIMINATION BY LINEAR PROGRAMMING 229 230 CHAPTER 5. THE SYNTHESIS METHODOLOGY labels. The result, using the delays of Figure 5.9, is shown in Figure 5.10. In this case, the input signal delays were conservatively assumed to be zero.
Reference: [23] <author> S. Burns and A. Martin. </author> <title> A synthesis method for self-timed VLSI circuits. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <year> 1987. </year>
Reference-contexts: Authors who proposed design methodologies for circuits that operate correctly with this model (delay-insensitive circuits) are forced either to assume that some wire delays are almost zero (isochronic forks, <ref> [23] </ref>) or to take delays into account within hand-designed logic modules ([101], [40], [17], [57], [113]). The Signal Transition Graph (STG) model was introduced independently by Rosenblum et al. ([102]) and by Chu ([26, 27]), to model formally both the circuit and the environment in which it operates.
Reference: [24] <author> S. M. Burns. </author> <title> Performance Analysis and Optimization of Asynchronous Circuits. </title> <type> PhD thesis, </type> <institution> California Institute of Technology, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: The next section describes in more detail the first of the methods listed above, in order to show its commonalities with STG-based methods. 2.6.1 Synthesis of Quasi-delay-insensitive Circuits Martin and his group developed the method described in ([23, 78, 76, 79] and <ref> [24] </ref>) for synthesizing quasi-delay-insensitive circuits from a formal specification (adapted from Hoare's Communicating Sequential Processes, CSP, [51]). The methodology was used to design various real circuits, including an asynchronous microprocessor ([80]). The data computation part is handled with self-synchronizing codes (namely dual-rail). <p> case we minimize C max , where C max is the maximum among the lengths C c of the simple cycles 6 ~ c of the STG: C c = z fl j 2~ c In general an STG can have an exponential number of cycles but, as shown in <ref> [24] </ref>, we can limit our analysis to a smaller set of cycles, and still reliably estimate the throughput. If the target technology is semi-custom, such as standard cells or gate array, then the delay padding must be done in a discrete fashion, adding enough buffers to satisfy the constraints.
Reference: [25] <author> T.-A. Chu. </author> <title> On the models for designing VLSI asynchronous digital systems. Integration: </title> <journal> the VLSI journal, </journal> <volume> 4 </volume> <pages> 99-113, </pages> <year> 1986. </year>
Reference: [26] <author> T.-A. Chu. </author> <title> Synthesis of self-timed control circuits from graphs: an example. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <pages> pages 565-571, </pages> <year> 1986. </year>
Reference-contexts: The STG can be used as a more user-friendly input also for the synthesis methods described in the previous section, like the similar Change Diagram model ([125, 60, 62]), described in more detail in Section 3.5. Two fundamental papers, [102] and <ref> [26] </ref>, independently introduced rather similar, Petri net-based, specification formalisms for asynchronous circuits. Both defined the Signal Transition Graph (called Signal Graph in [102]) as an interpreted Petri net (PN), in which each transition is labeled with a signal value change. <p> This bridge is the PN reachability graph labeled with a vector of signal values, called the State Transition Diagram ([102] used the term Transition Diagram and <ref> [26] </ref> used the term State Graph to denote the STD). An example of STG and of the corresponding STD appears in Figure 1.3. <p> Furthermore the classical definition of a valid Signal Transition Graph specification is unnecessarily restrictive, as [62] and [130] showed by presenting some useful, correctly implementable behaviors that cannot be described with the constrained STGs used by Chu in <ref> [26] </ref>. For example Chu required the Petri net underlying the STG to be safe, live and free-choice, in order to ease the STG analysis/synthesis task. <p> A HIGH-LEVEL BEHAVIORAL MODEL FOR ASYNCHRONOUS SYSTEMS 139 The model, called Signal Transition Graph (STG), is based on interpreted Petri nets, and is a development of similar, but less general, models presented by [102] and <ref> [26] </ref>. <p> A HIGH-LEVEL BEHAVIORAL MODEL FOR ASYNCHRONOUS SYSTEMS 141 3.3.2 Signal Transition Graphs An interpreted Petri net, where transitions represent changes of values of circuit signals, was proposed independently as a specification model for asynchronous circuits by [102] (where it was called Signal Graph) and <ref> [26] </ref> (where it was called Signal Transition Graph, STG). Both papers proposed to interpret a PN as the specification of a circuit C = hX; Z; F i (where Y denotes, as usual, X [ Z), by labeling each transition with an element of Y fi f+; g. <p> Moreover, as shown in [10], all results proved for free-choice Petri nets are true also for extended free-choice ones, and vice-versa. 3.3.3 Signal Transition Graphs and State Transition Diagrams Both [102] and <ref> [26] </ref> gave also synthesis methods to translate the PN into an STD (called Transition Diagram in [102] and State Graph in [26]) and hence into a circuit implementation of the specified behavior. <p> in [10], all results proved for free-choice Petri nets are true also for extended free-choice ones, and vice-versa. 3.3.3 Signal Transition Graphs and State Transition Diagrams Both [102] and <ref> [26] </ref> gave also synthesis methods to translate the PN into an STD (called Transition Diagram in [102] and State Graph in [26]) and hence into a circuit implementation of the specified behavior. <p> So for example if s m = 00 fl 1 for signal ordering y 0 y 1 y 2 , then the implied value of y 0 is 0, the implied value of y 1 is 1 and the implied value of y 2 is 1. Both [102] and <ref> [26] </ref> recognized that an STG has an STD-isomorphic circuit implementation if (but not only if) the STD is non-contradictory. As a matter of terminology, [121] introduced the term Unique State Coding to denote an STG with a non-contradictory STD.
Reference: [27] <author> T.-A. Chu. </author> <title> Synthesis of Self-timed VLSI Circuits from Graph-theoretic Specifications. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: Signal x has value 1, because x + has just fired. Signal y has value 0* because y + has not fired yet, but is enabled (similarly for signal z). In this section, following <ref> [27] </ref>, we will further restrict a valid STG to be * live: from every reachable marking there exists a sequence of transition firings that will eventually fire every transition. 10 CHAPTER 1. <p> An example of STG and of the corresponding STD appears in Figure 1.3. A sufficient condition for the STD to correspond to a logic circuit modeled with unbounded gate delay, as shown in [102] and <ref> [27] </ref>, is that the STG is normal, i.e., that no subset of the STG variables can change value twice without any other variable changing value. <p> Non-deterministic choice is limited to the environment of the circuit. To contrast the approaches of Rosenblum et al. and Chu: * [102] defined as valid any STG where, for all firing sequences, the transitions of each signal alternate (x + ! x ! x + : : :). * <ref> [27] </ref> defined the similar, but more restrictive, concept of live STG by requiring that for each signal there exist at least one SM to which all the transitions of this signal belong. <p> Let us examine the circuit described in Figure 2.24 (taken from [22]), where the numbers above each gate represent an upper and a lower bound on its delay (using the gate delay model). Its Signal Transition Graph specification (taken from <ref> [27] </ref>) appears in Figure 2.23, where L + 1 and L + represent two distinct rising transitions of the same signal L. The environment delay is assumed to be finite and positive, but no other assumption on its behavior is made except that it follows the STG specification. <p> The STG definition used in this work is a generalization of the original definition from <ref> [27] </ref>, that permits analysis of the global view and helps the designer decide which properties of the specification will ensure a behavior that does not depend on the global interconnection delays (as described in Chapter 3). <p> THE SIGNAL TRANSITION GRAPH MODEL An STG has the Complete State Coding property if all markings with the same binary label have the same set of enabled output signal transitions. So we can state the following Theorem (a straightforward extension of the results of <ref> [27] </ref>). Theorem 3.3.6 Let S be the STD of a valid STG. Let Y = X [ Z be its set of signals. Let C = hV; H; Y; i be a BACS whose STD is isomorphic to S. <p> For example, forcing 3 This marking, even though it marks every SM component of the PN exactly once, is not a live safe marking of any MG component, thus contradicting Theorem 3.15 of <ref> [27] </ref>. 4.1. OVERVIEW OF THE STATE ENCODING METHODOLOGY 163 a particular ordering of two originally concurrent transitions may not be considered desirable (since it can reduce the total system throughput), but is in general considered acceptable in an implementation. <p> The gate delay model may also fail, as shown by [118], if two gates have a different logic threshold voltage. The approach avoids two major drawbacks that were present in the original STG synthesis methodology, as defined by Chu (see <ref> [27] </ref>). <p> CIRCUIT IMPLEMENTATION OF THE NEXT STATE FUNCTION 209 210 CHAPTER 5. THE SYNTHESIS METHODOLOGY A more realistic example of the same kind of problem can be found in Figure 2.23 (taken from <ref> [27] </ref>). An on-set cover for signal A i is DL + DR i + LR i and an off-set cover for it is R = D L + DR i + LR i . <p> Section 5.3.1 gives necessary and sufficient conditions on the circuit delays for this implementation to be hazard-free. Section 5.3.2 describes a practical procedure to perform hazard detection on a circuit implementation given delay bounds. Section 5.3.3 compares our results with the claims of <ref> [27] </ref>. 5.3.1 Necessary and Sufficient Conditions for Hazard-free Implementation We must analyze the hazard behavior of a two-level implementation of the next state function of each STG output signal, as obtained from Procedure 5.2.1, under each transition cube 5.3. <p> Chu-persistency was considered to be a necessary and sufficient condition for the existence of a hazard-free circuit implementation, due to the following Theorem, taken from <ref> [27] </ref> (only the notation is changed here, for consistency with the rest of the chapter): Theorem 5.3.2 Let G be a live STG 4 . <p> See for example the STG in Figure 1.3.(b), where y + is not Chu-persistent. The logic equation for y is y = x + z, and using the unbounded gate delay model, as assumed by <ref> [27] </ref>, we know that x is caused by z + , so when x fires z is already at 1 (which determines the output of the or gate independent of the value of x), and x cannot disable y + . <p> So Chu-persistency is not necessary for a hazard-free implementation, because the implementation described in Figure 1.5 of this non-Chu-persistent STG is hazard-free using the unbounded gate delay model that <ref> [27] </ref> used. On the other hand Theorem 5.3.2 guaranteed hazard-free implementation only if the whole sub-circuit implementing each signal z i could be satisfactorily modeled as a single gate with the unbounded gate delay model. <p> But the gate delay model is a reasonable approximation of reality only for simple gates, such as a nand or a nor, or, in the most optimistic case, for and-or-not gates as in the approach described in Section 2.5.2. We can examine now the example in Figure 5.5 (from <ref> [27] </ref>), where a circuit implementation was derived from a Chu-persistent STG (only a fragment is shown here). The value of signals in the given marking is La = 0, Lr = 1, Sa = 0, Sr = 1, Ca = 0 and Cr = 0. <p> Note that the assumption that each excitation function may be modeled as a single gate was used, as shown above, by <ref> [27] </ref> and [81]. This completes the hazard analysis task. Now we can use the results derived so far to obtain a circuit implementation that is free from hazards, as described in the next section. 5.4 Hazard Elimination by Linear Programming This section concludes our hazard-free synthesis methodology.
Reference: [28] <author> T.-A. Chu. </author> <title> Synthesis of hazard-free control circuits from asynchronous finite state machine specifications. </title> <booktitle> In Proceedings of the ACM International Workshop on Timing Issues in the Specification and Synthesis of Digital Systems (TAU), </booktitle> <year> 1992. </year>
Reference-contexts: The latter model is more natural for expressing control-dominated protocols (e.g. [111]), so ideally a complete design methodology should be able to handle both types of specification. In this section we summarize an algorithm recently proposed in <ref> [28] </ref> for this purpose. It automatically translates an FSM, under reasonable hypotheses on the environment behavior, into an STG. 12 This is in general less expensive than the classical technique described in Section 2.3.4 that required using all the prime implicants of the function. 78 CHAPTER 2.
Reference: [29] <author> H. Y.H. Chuang and S. Das. </author> <title> Synthesis of multiple-input change asynchronous machines using controlled excitation and flip-flops. </title> <journal> IEEE Transactions on Computers, </journal> <pages> pages 1103-1109, </pages> <month> December </month> <year> 1973. </year>
Reference: [30] <author> F. Commoner, A. W. Holt, S. Even, and A. Pnueli. </author> <title> Marked directed graphs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 5 </volume> <pages> 511-523, </pages> <year> 1971. </year>
Reference: [31] <author> M. E. Dean, T. Williams, and D. Dill. </author> <title> Efficient self-timing with level-encoded 2-phase dual rail (LEDR). </title> <booktitle> In Proceedings of the Conference on Advanced Research in VLSI, </booktitle> <month> March </month> <year> 1991. </year> <note> 278 BIBLIOGRAPHY </note>
Reference-contexts: This ensures that the output is the spacer as long as a transient is present on the input. So spacer codes require less gates than alternating data sets (only about twice the size of a standard combinational logic implementation), but are slower, due to the idle phase ([5] and <ref> [31] </ref>). A similar methodology can also be used to implement sequential circuits from an FT specification without the need for Fundamental Mode or Huffman Mode hypotheses.
Reference: [32] <author> E. Detjens, G. Gannot, R. Rudell, A. Sangiovanni-Vincentelli, and A. Wang. </author> <title> Technology Mapping in MIS. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 116-119, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Note that, since M was obtained from T in a very restricted way, its gates can only be inverters, ands and ors. But we can use the following procedure to replace some sub-circuit of M with a single gate that computes the same function (technology mapping, <ref> [32] </ref>) and still be able to apply Theorem 5.1.3. The procedure takes as input a multi-level circuit M composed only of and, or and inverter gates and produces a multi-level circuit M 0 composed of arbitrary gates. Procedure 5.1.1 198 CHAPTER 5. THE SYNTHESIS METHODOLOGY 1. <p> So if we want to implement the covers of s and m in a specific technology and improve the area and/or delay performance of the circuit, then we can use some multi-level logic synthesis techniques (e.g. those described in [16], <ref> [32] </ref> and [108, 107]). In order to retain the hazard properties of the two-level circuit, though, we must restrict ourselves to the transformations listed in Theorems 5.1.3 and 5.1.4 (and, possibly, those listed in [68]).
Reference: [33] <author> S. Devadas and K. Keutzer. </author> <title> Necessary and Sufficient Conditions for Robust Delay-Fault Testability of Logic Circuits. </title> <booktitle> In Proceedings of the Sixth MIT Conference on Advanced Research on VLSI, </booktitle> <pages> pages 221-238, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Similar definitions hold for the robust gate delay fault test. A more stringent model is the hazard-free robust delay fault model 1 , treated in <ref> [98, 33] </ref>. A robust path delay fault test is said to be a hazard-free robust path delay fault test if no hazards can occur on the tested path during the application of the test, regardless of the delay values. <p> Note that an HFRPDFT test is valid for both transitions along a path , the second test being obtained by just reversing the order of application of the vectors. 1 The hazard free robust path delay fault model is simply called the robust path delay fault model in <ref> [34, 33] </ref>. 258 CHAPTER 6. <p> Starting now with an irredundant two-level cover we proceed to make the cover RGDFT through the introduction of a single test input. This procedure is modeled after the procedure given in [99] to improve stuck-open fault testability. To motivate this procedure we will employ the following Lemma from <ref> [33, 36] </ref>. Lemma 6.4.1 : Let C be a two-level single-output circuit and let z i be a gate in C. If a path through z i is HFRPDFT then z i is RGDFT. <p> Therefore by the necessary and sufficient conditions for HFRPDFT in two-level networks 6.5. DESIGN FOR DELAY TESTABILITY METHODOLOGY 267 given in <ref> [36, 33] </ref> the path associated with t in t c, call it is HFRPDFT. Now by Lemma 6.4.1 given above, because is HFRPDFT then the and gate associated with cube t v must also be RGDFT.
Reference: [34] <author> S. Devadas and K. Keutzer. </author> <title> Synthesis and Optimization Procedures for Robustly Delay-Fault Testable Logic Circuits. </title> <booktitle> In Proceedings of the 27 th Design Automation Conference, </booktitle> <pages> pages 221-227, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Note that an HFRPDFT test is valid for both transitions along a path , the second test being obtained by just reversing the order of application of the vectors. 1 The hazard free robust path delay fault model is simply called the robust path delay fault model in <ref> [34, 33] </ref>. 258 CHAPTER 6. <p> Furthermore, because is HFRPDFT, the output or gate of F must also be RGDFT, by the reasoning of the same Lemma. Thus Procedure 6.4.1 creates a two-level circuit that is completely RGDFT. To create an RGDFT multilevel circuit from this two-level circuit then the constrained factorization techniques of <ref> [34, 35] </ref> may be applied. To see that the output of Procedure 6.4.1 can be made hazard-free, observe that the input t does not change during normal operation, therefore its introduction does not create any hazards.
Reference: [35] <author> S. Devadas and K. Keutzer. </author> <title> Synthesis of Robust Delay-fault Testable Circuits: </title> <journal> Practice. IEEE Transactions on Computer-Aided Design of Integrate Circuits and Systems, </journal> <month> October </month> <year> 1991. </year>
Reference-contexts: This is due to the collapsing of paths that is a natural by-product of algebraic factorization. As a simple illustration of this consider the following example drawn from <ref> [35] </ref>: let C T be the two-level circuit ab + bc + bc and let C M be its multi-level algebraic factorization (a + c)b + bc. <p> Furthermore, because is HFRPDFT, the output or gate of F must also be RGDFT, by the reasoning of the same Lemma. Thus Procedure 6.4.1 creates a two-level circuit that is completely RGDFT. To create an RGDFT multilevel circuit from this two-level circuit then the constrained factorization techniques of <ref> [34, 35] </ref> may be applied. To see that the output of Procedure 6.4.1 can be made hazard-free, observe that the input t does not change during normal operation, therefore its introduction does not create any hazards.
Reference: [36] <author> S. Devadas and K. Keutzer. </author> <title> Synthesis of Robust Delay-fault Testable Circuits: </title> <journal> Theory. IEEE Transactions on Computer-Aided Design of Integrate Circuits and Systems, </journal> <month> September </month> <year> 1991. </year>
Reference-contexts: Starting now with an irredundant two-level cover we proceed to make the cover RGDFT through the introduction of a single test input. This procedure is modeled after the procedure given in [99] to improve stuck-open fault testability. To motivate this procedure we will employ the following Lemma from <ref> [33, 36] </ref>. Lemma 6.4.1 : Let C be a two-level single-output circuit and let z i be a gate in C. If a path through z i is HFRPDFT then z i is RGDFT. <p> Therefore by the necessary and sufficient conditions for HFRPDFT in two-level networks 6.5. DESIGN FOR DELAY TESTABILITY METHODOLOGY 267 given in <ref> [36, 33] </ref> the path associated with t in t c, call it is HFRPDFT. Now by Lemma 6.4.1 given above, because is HFRPDFT then the and gate associated with cube t v must also be RGDFT.
Reference: [37] <author> S. Devadas, K. Keutzer, S. Malik, and A. Wang. </author> <title> Verification of asynchronous interface circuits with bounded wire delays. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 188-195, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: If the circuit is operated in Fundamental Mode or Huffman Mode, rather than Input-Output Mode, then it is possible to use simplified approaches to exact bounded wire delay verification. For example [55] can be used for Fundamental Mode circuits or <ref> [37] </ref> can be used for Huffman Mode circuits. 2.7.1 Unbounded Delay in Fundamental Mode The objective of three-valued simulation ([42], [105]) is to provide a fast, pessimistic (i.e., no incorrect circuit can be accepted, but some correct ones may be rejected) method to check: * for potential static hazards in a
Reference: [38] <author> D. L. Dill. </author> <title> Timing assumptions and verification of finite-state concurrent systems. </title> <booktitle> In Proceedings of the LCNS Workshop on Automatic Verification Methods for Finite State Systems, </booktitle> <year> 1989. </year>
Reference-contexts: Muller's analysis ([88], [62]) and Trace Theory ([39]) can be used for hazard checking in Input-Output Mode using the inertial unbounded gate delay model (Section 2.7.2). 3. Chaos-mode discrete-time verification ([22, 21]) and timed automata ([72], <ref> [38] </ref>) perform circuit verification in Input-Output Mode using the more realistic inertial bounded wire delay model. Unfortunately they can be pessimistic in some cases (Section 2.7.3) or computationally too expensive (Section 2.7.4). <p> The methodology was proposed at the same time by <ref> [38] </ref> (whose notation and terminology we adopt here) and [72]. Time is treated as a continuous variable without pessimistic approximations. The result is an exact verification method, within 98 CHAPTER 2. <p> Note that the set of states is apparently infinite. <ref> [38] </ref> and [72] proved that it can be reduced to an equivalent finite form, using a finite set of equivalence classes. Unfortunately, the number of such classes is so large that the approach seems practically infeasible for all but the smallest circuits. More precisely, they showed that: 1. <p> Note that also in this case bounded wire delays can be modeled using non-inverting buffers with non-zero delay. An example will clarify the methodology. The example is taken from [72], but we will describe it using the notation of <ref> [38] </ref> for consistency. The primary input of Figure 2.26 rises from 0 to 1 at time 0, and the nand and the inverter are both initially at 1. The circuit is modeled using inertial bounded gate delays.
Reference: [39] <author> D.L. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-Independent Circuits. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1988. </year> <note> An ACM Distinguished Dissertation 1988. </note>
Reference-contexts: Internal states can sometimes be labeled with a vector of values of all the circuit signals, for the sake of clarity (e.g., in <ref> [39] </ref>). Finite Automata are used mainly as analysis tools in the context of asynchronous circuits. A sequence of input states is used to describe a sequence of events on a set of wires of the circuit under consideration. <p> The FA accepts the set of hazard-free input-output sequences (or successful traces) of the gate. For example, a nor gate with two inputs x 1 and x 2 and output z is represented by the FA shown in Figure 2.22 (from <ref> [39] </ref>). Each state is labeled with a vector of signal values, and each edge is labeled with a transition of an input or output signal. State H has an implicit self-loop under any input event. <p> other verification mechanisms are required in order to precisely assess whether an asynchronous circuit, designed with delay bounds in mind, actually operates according to the specification, as shown in the next section. 2.7.3 Bounded Delay in Input-Output Mode with Binary Chaos Model Burch ([21]) recently proposed extending the approach of <ref> [39] </ref> outlined in the previous section to verify asynchronous circuits modeled with bounded delay. <p> Such a TS is represented by a strongly connected graph 5 . The ALTS in Figure 3.1.(b) is strongly live. 3.1.4 Trace Models For an ACS defined by an ALTS we can define another representation, called Trace Structure ([100, 119, 120], [13], <ref> [39] </ref>), or Trace Model 6 , of its behavior. This representation will be needed in Section 3.4.3, because delay-insensitive circuits were defined in the literature using Trace Models, so in order to define delay-insensitivity within our framework we must relate Trace Models with Arc-labeled Transition Systems. <p> An implementation is produced using the synthesis algorithms described in Chapter 5 (or, for example, in [126] and [8]). 4. The resulting circuit can be verified (using, for example, <ref> [39] </ref> or [61]) against the very same properties selected in the first step, since our framework provides a uniform representation for such properties both at the specification and at the implementation level. 159 Chapter 4 The State Encoding Methodology As described in Section 3.3.4, a valid Signal Transition Graph specification can
Reference: [40] <author> J. C. Ebergen. </author> <title> Translating programs into delay-insensitive circuits. </title> <publisher> Centrum voor Wiskunde en Informatica, </publisher> <address> Amsterdam, </address> <year> 1989. </year>
Reference-contexts: Authors who proposed design methodologies for circuits that operate correctly with this model (delay-insensitive circuits) are forced either to assume that some wire delays are almost zero (isochronic forks, [23]) or to take delays into account within hand-designed logic modules ([101], <ref> [40] </ref>, [17], [57], [113]). The Signal Transition Graph (STG) model was introduced independently by Rosenblum et al. ([102]) and by Chu ([26, 27]), to model formally both the circuit and the environment in which it operates. <p> It can also be used, for example, as a component in higher level synthesis methodologies for asynchronous circuits. Such methodologies, as for example [113], <ref> [40] </ref> or [3], assume that a library of relatively 2.8. CONCLUSION 107 complex components has been implemented in the available technology.
Reference: [41] <author> E. Eichelberger and T. W. Williams. </author> <title> A logical design structure for LSI testing. </title> <booktitle> In Proceedings of the 14 th Design Automation Conference, </booktitle> <pages> pages 462-468, </pages> <month> June </month> <year> 1977. </year>
Reference-contexts: For the purposes of this chapter, we will assume that 1. each flip-flop is implemented so that it has a testing mode, in which an appropriate value can be scanned in and out <ref> [41] </ref>. 2. each designer-specified signal that is not implemented with a flip-flop is either a primary input or a primary output of the integrated circuit or is otherwise made accessible (for example by insertion of a scan D-latch normally held in transparent mode).
Reference: [42] <author> E. B. Eichelberger. </author> <title> Hazard detection in combinational and sequential switching circuits. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 9, </volume> <month> March </month> <year> 1965. </year> <note> BIBLIOGRAPHY 279 </note>
Reference-contexts: THE SYNTHESIS METHODOLOGY ) Suppose that a static hazard can occur in the circuit. We will show that the order of a pair of transitions as described in the Theorem statement is reversed. According to <ref> [42] </ref> a static hazard occurs only if we have applied to C a transition cube c that was not covered by a single on-set or off-set cube. Moreover, the transition cube must be associated with a valid state pair (s 0 ; s 00 ) because the hazard is static.
Reference: [43] <author> S. Eilenberg. </author> <title> Automata, Languages and Machines, volume A. </title> <publisher> Academic press, </publisher> <year> 1974. </year>
Reference-contexts: The remainder of the chapter is organized as follows. Section 2.2 briefly recalls some definitions from the theory of logic functions (see, e.g., [15]), Finite State Machines (see, e.g., [65] or [117]), Finite Automata (see, e.g., <ref> [43] </ref>) and Petri nets (see, e.g., [89] or [96]). Section 2.3 describes the classical synthesis techniques, derived from the work of Huffman ([53]). Section 2.4 outlines the design methodology proposed by Sutherland ([113]) to implement efficiently fast data processing asynchronous modules.
Reference: [44] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <year> 1979. </year>
Reference: [45] <author> J. Gimpel. </author> <title> A reduction technique for prime implicant tables. </title> <journal> IRE Transactions on Electronic Computers, </journal> <month> August </month> <year> 1965. </year>
Reference: [46] <author> A. Grasselli and F. Luccio. </author> <title> A method for minimizing the number of internal states in incompletely specified sequential networks. </title> <journal> IRE Transactions on Electronic Computers, </journal> <volume> EC-14(3):350-359, </volume> <month> June </month> <year> 1965. </year>
Reference-contexts: PREVIOUS WORK 2.3.2 Flow Table Minimization The initial FT describing the desired circuit behavior can be minimized using appropriate techniques (see, for example, [53], <ref> [46] </ref>, [65] or [117]). <p> A compatible c that is not dominated by any other compatible is a prime. The following basic theorem was proved in <ref> [46] </ref>: Theorem 2.3.1 For any FT T there is a minimum closed cover composed only of prime compatibles of T . <p> In order to find a minimum closed cover of prime compatibles, <ref> [46] </ref> proposed the con struction of a product-of-sums logic expression, with: * one variable for each prime compatible, which is true if the compatible is chosen as member of the cover, * one sum term (covering term) for each internal state of the original FT, stating that at least one prime
Reference: [47] <author> J. Gunawardena and M. Nielsen. Muller unfoldings. </author> <note> (in preparation), </note> <year> 1992. </year>
Reference: [48] <author> M. Hack. </author> <title> Analysis of production schemata by Petri Nets. </title> <type> Technical Report TR 94, </type> <institution> Project MAC, MIT, </institution> <year> 1972. </year>
Reference: [49] <author> S. Heath. </author> <title> VMEbus user's handbook. </title> <publisher> CRC press, </publisher> <year> 1988. </year>
Reference-contexts: We will also show in Chapter 5 that this delay insertion procedure always produces a hazard-free circuit. 1.2.3 The VMEbus Master Interface Protocol In this section we describe our main example, taken from [109]: a master interface designed according to the VMEbus asynchronous communication protocol (see also <ref> [49] </ref>). All the signals are active low, and bus lines are open-collector.
Reference: [50] <author> L. G. Heller, W. R. Griffin, J. W. Davis, and N. G. Thoma. </author> <title> Cascode voltage switch logic: A differential CMOS logic family. </title> <booktitle> In IEEE International Solid State Circuits Conference, </booktitle> <year> 1984. </year>
Reference: [51] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> In Communications of the ACM, </booktitle> <pages> pages 666-677, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: first of the methods listed above, in order to show its commonalities with STG-based methods. 2.6.1 Synthesis of Quasi-delay-insensitive Circuits Martin and his group developed the method described in ([23, 78, 76, 79] and [24]) for synthesizing quasi-delay-insensitive circuits from a formal specification (adapted from Hoare's Communicating Sequential Processes, CSP, <ref> [51] </ref>). The methodology was used to design various real circuits, including an asynchronous microprocessor ([80]). The data computation part is handled with self-synchronizing codes (namely dual-rail). Here we briefly outline the specification formalism and the control part synthesis steps.
Reference: [52] <author> L. A. Hollaar. </author> <title> Direct implementation of asynchronous control units. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31(12):1133-1141, </volume> <month> December </month> <year> 1982. </year>
Reference: [53] <author> D. A. Huffman. </author> <title> The synthesis of sequential switching circuits. </title> <journal> J. Franklin Institute, </journal> <volume> 257 161-190,275-303, </volume> <month> March </month> <year> 1954. </year>
Reference-contexts: The classical asynchronous circuit design methodology based on the Huffman model (see, e.g., <ref> [53] </ref>, [115] and [117]) starts from a Finite State Machine-like specification, the Flow Table, and produces logic equations implementing it. <p> PREVIOUS WORK 2.3.2 Flow Table Minimization The initial FT describing the desired circuit behavior can be minimized using appropriate techniques (see, for example, <ref> [53] </ref>, [46], [65] or [117]). <p> This decomposition is common, for example, to [106], [85, 101], <ref> [53] </ref> (within limits) and [113]. The Signal Transition Graph specification describes the complete system, circuit and environment, using events rather than logic levels or states (even though, under implementability conditions described in Chapter 3, a state-based model can be derived from the event-based one).
Reference: [54] <institution> IEEE Computer Society, </institution> <address> New York, N.Y. </address> <month> Futurebus+P896.1: </month> <title> Logical Layer Specifications (Draft 8.2), </title> <month> January </month> <year> 1990. </year>
Reference-contexts: In timing diagram terms, causality relations are represented as directed arrows between signal transitions, and choice/merging points are described by informal textual notes (even though there have been formalization attempts, such as [14] or <ref> [54] </ref>). For example, Figure 1.1.(a) describes the interaction between three signals, x, y and z. When x rises, y falls and z rises. No order or explicit timing is specified: y and z + are concurrent and caused by x + .
Reference: [55] <author> N. Ishiura, M. Takahashi, and S. Yajima. </author> <title> Time-symbolic simulation for accurate timing verification. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 497-502, </pages> <month> June </month> <year> 1989. </year> <note> 280 BIBLIOGRAPHY </note>
Reference-contexts: Unfortunately they can be pessimistic in some cases (Section 2.7.3) or computationally too expensive (Section 2.7.4). If the circuit is operated in Fundamental Mode or Huffman Mode, rather than Input-Output Mode, then it is possible to use simplified approaches to exact bounded wire delay verification. For example <ref> [55] </ref> can be used for Fundamental Mode circuits or [37] can be used for Huffman Mode circuits. 2.7.1 Unbounded Delay in Fundamental Mode The objective of three-valued simulation ([42], [105]) is to provide a fast, pessimistic (i.e., no incorrect circuit can be accepted, but some correct ones may be rejected) method <p> So the algorithm finds all the correct transition pairs. Note that similar conditions for hazard manifestation could be derived using the approach of <ref> [55, 56] </ref> for hazard analysis in combinational circuits with bounded delays, but only under the Fundamental Mode hypothesis. We do not require such hypothesis, because our only constraint is that the environment where the circuit operates satisfies the STG specification.
Reference: [56] <author> N. Ishiura, M. Takahashi, and S. Yajima. </author> <title> Coded time-symbolic simulation using shared binary decision diagrams. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 130-135, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: So the algorithm finds all the correct transition pairs. Note that similar conditions for hazard manifestation could be derived using the approach of <ref> [55, 56] </ref> for hazard analysis in combinational circuits with bounded delays, but only under the Fundamental Mode hypothesis. We do not require such hypothesis, because our only constraint is that the environment where the circuit operates satisfies the STG specification.
Reference: [57] <author> M. B. Josephs and J. T. Udding. </author> <title> Delay-insensitive circuits: An algebraic approach to their design. </title> <editor> In J. C. M. Baeten and J. W. Klop, editors, </editor> <title> CONCUR '90, Theories of Concurrency: Unification and Extension, </title> <booktitle> volume 458 of Lecture Notes in Computer Science, </booktitle> <pages> pages 342-366. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1990. </year>
Reference-contexts: Authors who proposed design methodologies for circuits that operate correctly with this model (delay-insensitive circuits) are forced either to assume that some wire delays are almost zero (isochronic forks, [23]) or to take delays into account within hand-designed logic modules ([101], [40], [17], <ref> [57] </ref>, [113]). The Signal Transition Graph (STG) model was introduced independently by Rosenblum et al. ([102]) and by Chu ([26, 27]), to model formally both the circuit and the environment in which it operates.
Reference: [58] <author> T. Kam. </author> <title> Multi-valued decision diagrams. </title> <type> Master's thesis, </type> <institution> U.C. Berkeley, </institution> <year> 1990. </year>
Reference-contexts: One way to find a minimum cost partitioning set given the clauses defining it is to combine the approach described in [73] to solve the binate covering problem using binary decision diagrams with the multi-valued extension of binary decision diagrams. A Multi-valued Decision Diagram (MDD, see [18] and <ref> [58] </ref>) is a rooted directed acyclic graph where: 4.3.
Reference: [59] <author> R.M. Keller. </author> <title> A fundamental theorem of asynchronous parallel computation. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 24 </volume> <pages> 103-112, </pages> <year> 1975. </year>
Reference-contexts: THE SIGNAL TRANSITION GRAPH MODEL 3.1.2 Transition Systems and State Transition Diagrams This section describes how the interconnected components of an ACS behave in time, that is how the signals associated with them change, using some key concepts from <ref> [59] </ref>. A Transition System (TS) is a pair hS; Ei: * S is a set of states, and * E S fi S, is a set of transitions . Note that we do not restrict S and E to be finite. <p> No matter who wins the race, we must still be able to reach the same state in the future. Similarly, local confluence will be shown to be related to the classical concept of static hazards in a circuit. 118 CHAPTER 3. THE SIGNAL TRANSITION GRAPH MODEL Following <ref> [59] </ref>, we call an ALTS hS; E; A; ffii : * confluent, if 8s; s 0 ; s 00 2 S, if sE fl s 0 (i.e. s 0 is reachable from s) and sE fl s 00 , then 9s 000 2 S such that s 0 E fl s <p> So, Figure 3.1.(b) is confluent (all pairs of states can reach any state), but not locally confluent, due to s1; s2 and s8 (s1Es2 and s1Es8, but there is no common immediate successor of s2 and s8). Keller, in <ref> [59] </ref>, gave three sufficient conditions for local confluence (and hence confluence) of an ALTS. <p> The following theorem was proved in <ref> [59] </ref>: Theorem 3.1.1 An ALTS is both locally confluent and confluent if it is deterministic, persistent and commutative. The definition of STD implies that if an STD satisfies these conditions, then it is uniquely locally confluent.
Reference: [60] <author> M. A. Kishinevsky, A. Y. Kondratyev, and A. R. Taubin. </author> <title> Formal method for self-timed design. </title> <booktitle> In Proceedings of the European Design Automation Conference, </booktitle> <year> 1991. </year>
Reference-contexts: Chu's approach allows a relatively easy formal characterization of concepts such as concurrent transitions. The price is a restriction of the class of specifiable behaviors, as pointed out recently by <ref> [60, 62] </ref> and by [130]. In this work, we try to combine the advantages of both approaches. Namely, in Chapter 3 we give a broad characterization of the circuit properties implied by various STG properties. <p> In order to describe a semi-modular circuit with a polynomial size model, Kishinevsky et al. introduced the Change Diagram (CD, see also Section 3.5 and <ref> [125, 60, 62] </ref>). They showed that the Change Diagram has the same expressive power as semi-modular STDs, i.e., an STD is semi-modular if and only if it has a corresponding Change Diagram. <p> on rule R 00 2 , if we identify y fl 1 with R a , y fl 2 with R b , y fl 3 with A a , and t with the empty trace. 3.5 Signal Transition Graphs and Change Diagrams Change Diagrams, described in more detail in <ref> [125, 60, 62] </ref>, are an event-based model for asynchronous circuits that bears some resemblance to Signal Transition Graphs, but has some interesting properties of its own. In this section we compare the two models, and show how, when we limit ourselves to semi-modular circuits, they have similar modeling power. <p> Note that this analysis, as outlined in Section 2.7.2, can be performed by direct construction of the Change Diagram, without going through the exponential size STD. Furthermore synthesis algorithms from Change Diagrams to circuits in various technologies were outlined in <ref> [60] </ref>. The main limitation of Change Diagrams is their inability to describe choice among alternative behaviors, as modeled by places with more than one successor in PNs. <p> Chu ([27]) used the term live to denote a similar notion. We prefer the term correct, borrowed from the literature on the Change Diagram model (see e.g. <ref> [60] </ref>), to avoid confusion between the very different concepts of live Petri net and live Signal Transition Graph. A Signal Transition Graph is defined to be correct if: 162 CHAPTER 4.
Reference: [61] <author> M. A. Kishinevsky, A. Y. Kondratyev, A. R. Taubin, and V. I. Varshavsky. </author> <title> Analysis and identification of self-timed circuits. </title> <booktitle> In Proceedings of IFIP 2 nd Workshop on Designing Correct Circuits, </booktitle> <pages> pages 275-287, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: An implementation is produced using the synthesis algorithms described in Chapter 5 (or, for example, in [126] and [8]). 4. The resulting circuit can be verified (using, for example, [39] or <ref> [61] </ref>) against the very same properties selected in the first step, since our framework provides a uniform representation for such properties both at the specification and at the implementation level. 159 Chapter 4 The State Encoding Methodology As described in Section 3.3.4, a valid Signal Transition Graph specification can be implemented
Reference: [62] <author> M. A. Kishinevsky, A. Y. Kondratyev, A. R. Taubin, and V. I. Varshavsky. </author> <title> On self-timed behavior verification. </title> <booktitle> In Proceedings of the ACM International Workshop on Timing Issues in the Specification and Synthesis of Digital Systems (TAU), </booktitle> <year> 1992. </year>
Reference-contexts: Chu's approach allows a relatively easy formal characterization of concepts such as concurrent transitions. The price is a restriction of the class of specifiable behaviors, as pointed out recently by <ref> [60, 62] </ref> and by [130]. In this work, we try to combine the advantages of both approaches. Namely, in Chapter 3 we give a broad characterization of the circuit properties implied by various STG properties. <p> Three-valued simulation ([42], [105]) provides the fastest known algorithm for asynchronous circuit verification, but its usefulness is limited to static and steady-state hazard checking in Fundamental Mode using the pure unbounded wire (or bounded wire) delay model (Sec tion 2.7.1). 2. Muller's analysis ([88], <ref> [62] </ref>) and Trace Theory ([39]) can be used for hazard checking in Input-Output Mode using the inertial unbounded gate delay model (Section 2.7.2). 3. Chaos-mode discrete-time verification ([22, 21]) and timed automata ([72], [38]) perform circuit verification in Input-Output Mode using the more realistic inertial bounded wire delay model. <p> In order to describe a semi-modular circuit with a polynomial size model, Kishinevsky et al. introduced the Change Diagram (CD, see also Section 3.5 and <ref> [125, 60, 62] </ref>). They showed that the Change Diagram has the same expressive power as semi-modular STDs, i.e., an STD is semi-modular if and only if it has a corresponding Change Diagram. <p> I.e. they can model only deterministic behavior, and as such the description, for example, of a bus protocol with different read and write phases is awkward and imprecise, as we informally argued above. Furthermore the classical definition of a valid Signal Transition Graph specification is unnecessarily restrictive, as <ref> [62] </ref> and [130] showed by presenting some useful, correctly implementable behaviors that cannot be described with the constrained STGs used by Chu in [26]. For example Chu required the Petri net underlying the STG to be safe, live and free-choice, in order to ease the STG analysis/synthesis task. <p> on rule R 00 2 , if we identify y fl 1 with R a , y fl 2 with R b , y fl 3 with A a , and t with the empty trace. 3.5 Signal Transition Graphs and Change Diagrams Change Diagrams, described in more detail in <ref> [125, 60, 62] </ref>, are an event-based model for asynchronous circuits that bears some resemblance to Signal Transition Graphs, but has some interesting properties of its own. In this section we compare the two models, and show how, when we limit ourselves to semi-modular circuits, they have similar modeling power. <p> Various authors (see <ref> [62] </ref>, [130] and Chapter 3), pointed out that the assumption to start from a correct STG can be unnecessarily restrictive, as there are some useful asynchronous circuit 206 CHAPTER 5. THE SYNTHESIS METHODOLOGY behaviors that cannot be described with live safe free-choice Petri nets.
Reference: [63] <author> M. A. Kishinevsky, A. Y. Kondratyev, A. R. Taubin, and V. I. Varshavsky. </author> <title> Concurrent Hardware. The Theory and Practice of Self-Timed Design. </title> <publisher> John Wiley and Sons Ltd., </publisher> <month> February </month> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: A more recent account of the latter will also appear in <ref> [63] </ref>. <p> The main theoretical result concerning Change Diagrams is stated in [125] (the proof will appear in <ref> [63] </ref>). A transient cycle in an STD is defined as a cycle where at least one signal is continuously excited with the same value (see, for example, the cycle s1; s2; s3; s4 for signal R b in 152 CHAPTER 3.
Reference: [64] <author> I. Kohavi and Z. Kohavi. </author> <title> Detection of multiple faults in combinational logic networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C21(6):556-568, </volume> <month> June </month> <year> 1972. </year>
Reference: [65] <author> Z. Kohavi. </author> <title> Switching and Finite Automata Theory. </title> <publisher> Computer Science Press, </publisher> <year> 1978. </year>
Reference-contexts: The remainder of the chapter is organized as follows. Section 2.2 briefly recalls some definitions from the theory of logic functions (see, e.g., [15]), Finite State Machines (see, e.g., <ref> [65] </ref> or [117]), Finite Automata (see, e.g., [43]) and Petri nets (see, e.g., [89] or [96]). Section 2.3 describes the classical synthesis techniques, derived from the work of Huffman ([53]). Section 2.4 outlines the design methodology proposed by Sutherland ([113]) to implement efficiently fast data processing asynchronous modules. <p> PREVIOUS WORK 2.3.2 Flow Table Minimization The initial FT describing the desired circuit behavior can be minimized using appropriate techniques (see, for example, [53], [46], <ref> [65] </ref> or [117]). <p> Our technique to translate an STG into an implementation uses classical state minimization ([46], <ref> [65] </ref>) and critical race-free state encoding ([115], [117]) in order to ensure imple-mentability (as described in Chapter 4). It also uses analysis techniques closely related to classical essential hazard analysis in order to guarantee a hazard-free circuit implementation (as described in Chapter 5).
Reference: [66] <author> A. Y. Kondratyev, L. Y. Rosenblum, and A. V. Yakovlev. </author> <title> Signal graphs: a model for designing concurrent logic. </title> <booktitle> In Proceedings of the 1988 International Conference on Parallel Processing. </booktitle> <publisher> The Pennsylvania State University Press, </publisher> <year> 1988. </year> <note> BIBLIOGRAPHY 281 </note>
Reference: [67] <author> S. Kundu and S. M. Reddy. </author> <title> On the Design of Robust Testable CMOS Combinational Logic Circuits. </title> <booktitle> In Proceedings of the Fault Tolerant Computing Symposium, </booktitle> <pages> pages 220-225, </pages> <year> 1988. </year>
Reference-contexts: F is then algebraically decomposed into x G + x H + R, so that the variable x does not appear in any one of G, H and R. The difference between this procedure and that of <ref> [67] </ref> is the ability to partition out a remainder R. This results in a more area efficient implementation but more importantly the factoring out of the remainder ensures hazard-free operation as we will show in Section 6.2.2 below. We now give the procedure in detail.
Reference: [68] <author> D. Kung. </author> <title> Hazard-non-increasing gate-level optimization algorithms. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: See Section 5.1.2 for a proof that this important result holds also under less restrictive circuit operating conditions. Also, see <ref> [68] </ref> for a longer list of hazard-non-increasing logic transformations. 3. Almost no logic function has a hazard-free implementation, under unrestricted Multiple Input Change. <p> This algorithm still gives a pessimistic result, but it is more accurate than Procedures 2.7.1 and 2.7.2. This limitation of ternary simulation to static hazard analysis was recently lifted by <ref> [68] </ref>, which extended three-valued logic to a nine-valued logic: * constant 1 and 0, * rising and falling transition, * static and dynamic hazards (four in total), 2.7. HAZARD ANALYSIS IN ASYNCHRONOUS CIRCUITS 91 * undefined value. <p> A similar result was proved in [117], but only under the Fundamental Mode assumption, while here we lift such restriction. Recently a larger class of hazard-non-increasing transformations has been reported in <ref> [68] </ref>, using an extension of three-valued simulation to handle dynamic hazards as well, but the applicability of such extension to our non-Fundamental Mode context is not clear yet. A circuit family is a set of circuits with the same structure but different delays. <p> In order to retain the hazard properties of the two-level circuit, though, we must restrict ourselves to the transformations listed in Theorems 5.1.3 and 5.1.4 (and, possibly, those listed in <ref> [68] </ref>). <p> DYNAMIC HAZARD ANALYSIS 247 5.5 Dynamic Hazard Analysis Dynamic hazard analysis is much more difficult than static hazard analysis, and we do not have yet powerful formal techniques to reason about this class of hazards. Even the nine-valued simulation procedure described in <ref> [68] </ref> (see also Section 2.7.1) could not be applied here. Static hazards have a very precise boundary condition: the next state function value must remain constant. This allowed us to define the concept of valid state pair and prove Theorem 5.3.1.
Reference: [69] <author> M. Ladd and W. P. </author> <title> Birmingham. Synthesis of multiple-input change asynchronous finite state machines. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 309-314, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: The clock is chosen to be slow enough to allow the output to settle before it is allowed to propagate to the feedback wires and to the environment. Various approaches to the design of self-clocked asynchronous circuits have been pre sented in the literature ([29], [135], [85, 101], <ref> [69] </ref>, [2], [90] to name but a few). Some distinctive points among them are: 62 CHAPTER 2.
Reference: [70] <author> T. Larrabee. </author> <title> Test pattern generation using boolean satisfiability. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11(8), </volume> <month> January </month> <year> 1992. </year>
Reference-contexts: This is especially true since the known heuristic techniques to speed up the solution of satisfiability problems are often very dependent on the nature of the problem that is being reduced to satisfiability (e.g. stuck-at fault testing, in <ref> [70] </ref>) and may not be suited for this particular case. Our approach, on the other hand, capitalizes on well-studied problems for which very efficient exact and heuristic methods have been found.
Reference: [71] <author> L. Lavagno, S. Malik, R.K. Brayton, and A. Sangiovanni-Vincentelli. MIS-MV: </author> <title> Optimization of multi-level logic with multiple-valued inputs. </title> <booktitle> In Proceedings of the Int'l Conference on Computer-Aided Design, </booktitle> <pages> pages 560-563, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Encoding constraints that are used to minimize a two-level or multi-level implementation of the circuit can also be expressed as dichotomies ([134], [104], <ref> [71] </ref>). So this encoding algorithm also allows the minimization of the implementation cost within the critical race-free constraint. Let us examine an example, the encoding of the FT in Figure 2.8, to clarify the above procedure. 1.
Reference: [72] <author> H. R. Lewis. </author> <title> Finite-state analysis of asynchronous circuits with bounded temporal uncertainty. </title> <type> Technical Report TR-15-89, </type> <institution> Harvard University, </institution> <year> 1989. </year>
Reference-contexts: The methodology was proposed at the same time by [38] (whose notation and terminology we adopt here) and <ref> [72] </ref>. Time is treated as a continuous variable without pessimistic approximations. The result is an exact verification method, within 98 CHAPTER 2. PREVIOUS WORK the limits of the bounded wire delay model (the method can be tailored both for inertial and pure delays). <p> Note that the set of states is apparently infinite. [38] and <ref> [72] </ref> proved that it can be reduced to an equivalent finite form, using a finite set of equivalence classes. Unfortunately, the number of such classes is so large that the approach seems practically infeasible for all but the smallest circuits. More precisely, they showed that: 1. <p> This FA can now be checked with a reachability analysis as in Section 2.7.3 for the presence of hazards. Note that also in this case bounded wire delays can be modeled using non-inverting buffers with non-zero delay. An example will clarify the methodology. The example is taken from <ref> [72] </ref>, but we will describe it using the notation of [38] for consistency. The primary input of Figure 2.26 rises from 0 to 1 at time 0, and the nand and the inverter are both initially at 1. The circuit is modeled using inertial bounded gate delays.
Reference: [73] <author> B. Lin and F. Somenzi. </author> <title> Minimization of symbolic relations. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1990. </year>
Reference-contexts: The problem is called binate covering ([103], <ref> [73] </ref>) if some variable appears both in positive and negative form, and unate covering ([45]) otherwise. Efficient heuristics to solve each problem have been reported in the cited papers. <p> One way to find a minimum cost partitioning set given the clauses defining it is to combine the approach described in <ref> [73] </ref> to solve the binate covering problem using binary decision diagrams with the multi-valued extension of binary decision diagrams. A Multi-valued Decision Diagram (MDD, see [18] and [58]) is a rooted directed acyclic graph where: 4.3. <p> Then, as shown in <ref> [73] </ref>, a shortest path from the root to the leaf labeled with 1 corresponds to a minimum cost assignment that satisfies all the constraints.
Reference: [74] <author> C. J. Lin and S. M. Reddy. </author> <title> On Delay Fault Testing in Logic Circuits. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <pages> pages 694-703, </pages> <month> September </month> <year> 1987. </year>
Reference: [75] <author> S. Malik. </author> <title> Combinational Logic Optimization Techniques in Sequential Logic Synthesis. </title> <type> PhD thesis, </type> <institution> U.C. Berkeley, </institution> <month> November </month> <year> 1990. </year>
Reference: [76] <author> A. Martin. </author> <title> Formal program transformations for VLSI synthesis. </title> <editor> In E. W. Dijkstra, editor, </editor> <booktitle> Formal Development of Programs and Proofs, The UT Year of Programming Series. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference: [77] <author> A. Martin. </author> <title> The limitations to delay-insensitivity in asynchronous circuits. </title> <booktitle> In Proceedings of the Conference on Advanced Research in VLSI, </booktitle> <month> April </month> <year> 1990. </year>
Reference-contexts: The unbounded wire delay model ([116]) can be, in principle, the delay model that is most realistic and robust with respect to manufacturing process and environmental variations. Unfortunately it cannot be used, as shown by [94] and <ref> [77] </ref>, to build circuits out of basic gates (and, or, : : : ).
Reference: [78] <author> A. Martin. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive circuits. </title> <editor> In C. A. R. Hoare, editor, </editor> <booktitle> Developments in Concurrency and Communications, The UT Year of Programming Series. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <note> 282 BIBLIOGRAPHY </note>
Reference: [79] <author> A. Martin. </author> <title> Synthesis of asynchronous VLSI circuits. </title> <editor> In J. Staunstrup, editor, </editor> <title> Formal Methods for VLSI Design. </title> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: This step includes a set of optimization operations which closely resemble those of classical logic synthesis. Let us examine an example (from <ref> [79] </ref>) to clarify the methodology. The specification is a 2.6. DELAY-INSENSITIVE CIRCUITS 85 one-place buffer, described by the CSP process: fl [L?x; R!x] with two channels, L and R, and one variable, x.
Reference: [80] <author> A. Martin, S. Burns, T. Lee, D. Borkovic, and P. Hazewindus. </author> <title> The design of an asynchronous microprocessor. </title> <booktitle> In Decennial Caltech Conference on VLSI, </booktitle> <pages> pages 351-373. </pages> <publisher> MIT press, </publisher> <year> 1987. </year>
Reference: [81] <author> T. Meng. </author> <title> Asynchronous Design for Digital Signal Processing Architectures. </title> <type> PhD thesis, </type> <institution> U.C. Berkeley, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: Unlike other proposed causality-based models, e.g. the Change Diagram ([62]), it allows the explicit description of data-dependent choice between various possible behaviors. The standard synthesis methodology from the STG specification ([27], <ref> [81] </ref>), though, still has the partial drawback of being based on the unrealistic Muller model of the circuit implementation. For these reasons, we chose to use the STG specification and the bounded wire delay model, providing the necessary level of formality and a realistic model of the circuit behavior. <p> Note that the assumption that each excitation function may be modeled as a single gate was used, as shown above, by [27] and <ref> [81] </ref>. This completes the hazard analysis task. Now we can use the results derived so far to obtain a circuit implementation that is free from hazards, as described in the next section. 5.4 Hazard Elimination by Linear Programming This section concludes our hazard-free synthesis methodology. <p> THE SYNTHESIS METHODOLOGY If we want to have a better estimate of the global impact of the delay padding on the system performance, then we can analyze the length of the cycles in the STG specification, since they are an estimate of the total system throughput <ref> [81] </ref>.
Reference: [82] <author> K. Mc Millan and D. Dill. </author> <title> Algorithms for interface timing verification. </title> <booktitle> In Proceedings of the ACM International Workshop on Timing Issues in the Specification and Synthesis of Digital Systems (TAU), </booktitle> <month> March </month> <year> 1992. </year>
Reference-contexts: i of z fl j has fired: either at time 1 if z fl i does not belong to T (H;M ) (this provides a worst case, because it allows for the earliest possible firing, but the bound could be improved using techniques such as those described in [123] or <ref> [82] </ref>), or at time D (i;H;M) if z fl i belongs to T (H;M) . Let (i;j) denote the minimum delay between the firing of z fl i and the firing of z fl j .
Reference: [83] <author> R. E. Miller. </author> <booktitle> Switching theory, </booktitle> <volume> volume 2, chapter 10, </volume> <pages> pages 192-244. </pages> <publisher> Wiley and Sons, </publisher> <year> 1965. </year>
Reference-contexts: Moreover, the methodology ensures hazard-free operation by increasing the delay of some state signals (to eliminate the so-called essential hazards). Muller (see [88] and <ref> [83] </ref>) introduces an analysis technique that verifies that a gate-level circuit is speed-independent. Speed-independence ensures correct operation of a circuit modeled 1.2. OVERVIEW OF THE DESIGN METHODOLOGY 5 using the unbounded gate delay model. <p> However, it offers a very efficient architectural framework for control-oriented automated synthesis methods such as ours and those based on the unbounded gate delay model as described in the next section. 2.5 Speed-independent Circuits The seminal work of Muller ([88], see also <ref> [83] </ref>) introduced the first formal model of an asynchronous circuit using the concept of a State Transition Diagram. A more complete and precise account of the relationship between the Muller model and the Signal Transition Graph and Change 2.5. SPEED-INDEPENDENT CIRCUITS 65 66 CHAPTER 2. <p> Muller showed that the behavior of the circuit can be equivalently described with a Finite Automaton called a State Transition Diagram (STD, called State Diagram in [88] and <ref> [83] </ref>). <p> It removes the usual structural limitation (used, e.g. by <ref> [83] </ref> or [117]) that each component has exactly one output signal. An ACS structure can represent an arbitrary interconnection of modules, with the only restriction that no two modules can drive a single signal. <p> The complete history of the system is represented by a set of traces, where each trace records exactly the order of occurrences of actions. The state of the Arc-labeled Transition System, on the other hand, describes only the final result of such execution. In this section, following <ref> [83] </ref>, we introduce a model to describe this history, called a Cumulative Diagram (CD), where only the number of occurrences of each action is recorded. Hence this representation will be of intermediate precision between a Trace Model and an ALTS. <p> MODELING ASYNCHRONOUS LOGIC CIRCUITS 131 3.2.1 A Low-level Model for Asynchronous Logic Circuits Here, as in Section 3.1.1, we describe a circuit as the conjunction of a structure (a graph) and a behavior (a set of logic functions and delays, see [88] and <ref> [83] </ref>).
Reference: [84] <author> D. Misunas. </author> <title> Petri Nets and speed-independent design. </title> <journal> Communications of the ACM, </journal> <pages> pages 474-481, </pages> <month> August </month> <year> 1973. </year>
Reference-contexts: The method was proposed by Hollaar ([52]) and is related to various direct methods for Petri net implementation, such as, for example, [93], <ref> [84] </ref> and [1]. One-hot encoding has some significant advantages over the standard FT synthesis method described in the previous sections. 1. The critical race problem disappears, since exactly two state signals change for each transition.
Reference: [85] <author> C. E. Molnar, T.-P. Fang, and F. U. Rosenberger. </author> <title> Synthesis of delay-insensitive modules. </title> <booktitle> In Chapel Hill Conference on VLSI, </booktitle> <pages> pages 67-86, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: The clock is chosen to be slow enough to allow the output to settle before it is allowed to propagate to the feedback wires and to the environment. Various approaches to the design of self-clocked asynchronous circuits have been pre sented in the literature ([29], [135], <ref> [85, 101] </ref>, [69], [2], [90] to name but a few). Some distinctive points among them are: 62 CHAPTER 2. <p> This decomposition is common, for example, to [106], <ref> [85, 101] </ref>, [53] (within limits) and [113]. The Signal Transition Graph specification describes the complete system, circuit and environment, using events rather than logic levels or states (even though, under implementability conditions described in Chapter 3, a state-based model can be derived from the event-based one).
Reference: [86] <author> C. W. Moon. </author> <title> On synthesizing logic from signal transition graphs. </title> <type> Personal communication, </type> <year> 1990. </year>
Reference-contexts: The feedback loop can always be implemented using a simple flip-flop, due to the following Theorem, first proved in <ref> [86] </ref> in the restricted case when the STG is persistent. Note the close analogy with the result on the perfect implementation of semi-modular STDs ([126], see also Section 2.5.2). Theorem 5.2.2 Let G be a correct STG with Complete State Coding.
Reference: [87] <author> C. W. Moon, P. R. Stephan, and R. K. Brayton. </author> <title> Synthesis of hazard-free asynchronous circuits from graphical specifications. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1991. </year>
Reference-contexts: Speed-independence ensures correct operation of a circuit modeled 1.2. OVERVIEW OF THE DESIGN METHODOLOGY 5 using the unbounded gate delay model. This model is used in the synthesis methods proposed, for example, by [5], [126], <ref> [87] </ref> and [8]. Unfortunately, the unbounded gate delay model is not realistic: it ignores technological limits on the delays, which is pessimistic, and ignores the wire delays, which is optimistic ([118]). <p> Chu also formulated a necessary and sufficient condition for the existence of a circuit implementation of a valid STG, calling it a problem with state-assignment ([27]). We will use the more explanatory term Complete State Coding (CSC), due to <ref> [87] </ref>. 144 CHAPTER 3. THE SIGNAL TRANSITION GRAPH MODEL An STG has the Complete State Coding property if all markings with the same binary label have the same set of enabled output signal transitions. So we can state the following Theorem (a straightforward extension of the results of [27]). <p> for such properties both at the specification and at the implementation level. 159 Chapter 4 The State Encoding Methodology As described in Section 3.3.4, a valid Signal Transition Graph specification can be implemented with a logic circuit if and only if the STG has the Complete State Coding property ([27], <ref> [87] </ref>). This, informally, amounts to say that the signals specified by the STG completely define the circuit state. Until now the burden of satisfying the CSC property has been placed mostly on the designer. <p> The initial two-level implementations produced by the two methods, however, are closely related, and can be used more or less interchangeably. The hazard elimination procedures, on the other hand, are very different between our approach and <ref> [87] </ref>. We perform delay padding on an optimized implementation that uses gates from an arbitrary library (standard cell or hand designed) with bounded wire delays.
Reference: [88] <author> D. E. Muller and W. C. Bartky. </author> <title> A theory of asynchronous circuits. </title> <journal> In Annals of Computing Laboratory of Harvard University, </journal> <pages> pages 204-243, </pages> <year> 1959. </year>
Reference-contexts: Moreover, the methodology ensures hazard-free operation by increasing the delay of some state signals (to eliminate the so-called essential hazards). Muller (see <ref> [88] </ref> and [83]) introduces an analysis technique that verifies that a gate-level circuit is speed-independent. Speed-independence ensures correct operation of a circuit modeled 1.2. OVERVIEW OF THE DESIGN METHODOLOGY 5 using the unbounded gate delay model. <p> Muller showed that the behavior of the circuit can be equivalently described with a Finite Automaton called a State Transition Diagram (STD, called State Diagram in <ref> [88] </ref> and [83]). <p> MODELING ASYNCHRONOUS LOGIC CIRCUITS 131 3.2.1 A Low-level Model for Asynchronous Logic Circuits Here, as in Section 3.1.1, we describe a circuit as the conjunction of a structure (a graph) and a behavior (a set of logic functions and delays, see <ref> [88] </ref> and [83]).
Reference: [89] <author> T. Murata. </author> <title> Petri Nets: Properties, analysis and applications. </title> <booktitle> Proceedings of the IEEE, </booktitle> <pages> pages 541-580, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: The remainder of the chapter is organized as follows. Section 2.2 briefly recalls some definitions from the theory of logic functions (see, e.g., [15]), Finite State Machines (see, e.g., [65] or [117]), Finite Automata (see, e.g., [43]) and Petri nets (see, e.g., <ref> [89] </ref> or [96]). Section 2.3 describes the classical synthesis techniques, derived from the work of Huffman ([53]). Section 2.4 outlines the design methodology proposed by Sutherland ([113]) to implement efficiently fast data processing asynchronous modules. <p> and only if its restriction to X (i.e. the sequence obtained removing from the input states not in X ) is accepted by the first FA and its restriction to X 0 is accepted by the second FA. 2.2.4 Petri Nets Petri nets (introduced in [97], see also [96] or <ref> [89] </ref>) are a widely used model for concurrent systems, because they have a very simple and intuitive semantics, that directly captures concepts like causality, concurrency and conflict between events.
Reference: [90] <author> S. M. Nowick and D. L. Dill. </author> <title> Automatic synthesis of locally-clocked asynchronous state machines. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1991. </year> <note> BIBLIOGRAPHY 283 </note>
Reference-contexts: The circuit is decomposed into three parts (e.g. as in Figure 2.12, from <ref> [90] </ref>): * a clock logic, which produces a clock pulse whenever the state and/or output signals must change. <p> Various approaches to the design of self-clocked asynchronous circuits have been pre sented in the literature ([29], [135], [85, 101], [69], [2], <ref> [90] </ref> to name but a few). Some distinctive points among them are: 62 CHAPTER 2. PREVIOUS WORK * Nowick et al. ([90]) use a restricted form of FT specification, called burst-mode FSM (see also Section 2.5.3), in which: 1. each state transition is restricted to occurring under a set of input <p> Moreover, both inputs and outputs are latched, so the circuit may in general be slower than in <ref> [90] </ref>. 2.4. MICROPIPELINES 63 * Rosenberger et al. ([85, 101]) use a special type of flip-flop with a completion signal, called Q-flop, to ensure that the circuit has stabilized when the clock pulse is issued. <p> PREVIOUS WORK b + c + s 1 1 1 2 2 d e a b c de de d + e + e + 1 x p 1 0 The FSM is restricted to operating in burst mode ([111], <ref> [90] </ref>, see also Section 2.3.6 for a synthesis methodology based on such a specification). That is, for each state, a collection of sets of inputs (bursts) can change. Each input in a burst can change at most once, and no burst can be a subset of another burst.
Reference: [91] <author> S. M. Nowick and D. L. Dill. </author> <title> Exact two-level minimization of hazard-free logic with multiple-input changes. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: This problem can be solved by enforcing the more restrictive Unique State Coding property on the STG and avoiding to expand the initial cover of cubes if they can intersect each other, as in the approach described by <ref> [91] </ref>.
Reference: [92] <author> C. H. Papadimitriou and K. Steiglitz. </author> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N. J., </address> <year> 1982. </year>
Reference: [93] <author> S. S. Patil. </author> <title> An asynchronous logic array. </title> <type> Technical Report MAC technical memorandum 62, </type> <institution> MIT, </institution> <year> 1975. </year>
Reference-contexts: The method was proposed by Hollaar ([52]) and is related to various direct methods for Petri net implementation, such as, for example, <ref> [93] </ref>, [84] and [1]. One-hot encoding has some significant advantages over the standard FT synthesis method described in the previous sections. 1. The critical race problem disappears, since exactly two state signals change for each transition.
Reference: [94] <author> S. S. Patil and J. B. Dennis. </author> <title> Speed independent asynchronous circuits. </title> <booktitle> In Proceedings of the Hawaii International Conference on System Sciences, </booktitle> <pages> pages 55-58, </pages> <year> 1971. </year>
Reference-contexts: The unbounded wire delay model ([116]) can be, in principle, the delay model that is most realistic and robust with respect to manufacturing process and environmental variations. Unfortunately it cannot be used, as shown by <ref> [94] </ref> and [77], to build circuits out of basic gates (and, or, : : : ).
Reference: [95] <author> S. S. Patil and J. B. Dennis. </author> <title> The description and realization of digital systems. </title> <booktitle> In Proceedings of the IEEE COMPCON, </booktitle> <pages> pages 223-226, </pages> <year> 1972. </year>
Reference: [96] <author> J. L. Peterson. </author> <title> Petri Nets, </title> <journal> volume 9. ACM Computing Surveys, </journal> <volume> No. 3, </volume> <month> September </month> <year> 1977. </year>
Reference-contexts: The remainder of the chapter is organized as follows. Section 2.2 briefly recalls some definitions from the theory of logic functions (see, e.g., [15]), Finite State Machines (see, e.g., [65] or [117]), Finite Automata (see, e.g., [43]) and Petri nets (see, e.g., [89] or <ref> [96] </ref>). Section 2.3 describes the classical synthesis techniques, derived from the work of Huffman ([53]). Section 2.4 outlines the design methodology proposed by Sutherland ([113]) to implement efficiently fast data processing asynchronous modules. <p> sequence if and only if its restriction to X (i.e. the sequence obtained removing from the input states not in X ) is accepted by the first FA and its restriction to X 0 is accepted by the second FA. 2.2.4 Petri Nets Petri nets (introduced in [97], see also <ref> [96] </ref> or [89]) are a widely used model for concurrent systems, because they have a very simple and intuitive semantics, that directly captures concepts like causality, concurrency and conflict between events.
Reference: [97] <author> C. A. </author> <title> Petri. Kommunikation mit Automaten. </title> <type> PhD thesis, </type> <institution> Bonn, Institut f ur Instrumentelle Mathematik, </institution> <year> 1962. </year>
Reference-contexts: FA accepts a sequence if and only if its restriction to X (i.e. the sequence obtained removing from the input states not in X ) is accepted by the first FA and its restriction to X 0 is accepted by the second FA. 2.2.4 Petri Nets Petri nets (introduced in <ref> [97] </ref>, see also [96] or [89]) are a widely used model for concurrent systems, because they have a very simple and intuitive semantics, that directly captures concepts like causality, concurrency and conflict between events.
Reference: [98] <author> A. Pramanick and S. Reddy. </author> <title> On The Design of Path Delay Fault Testable Combinational Circuits. </title> <booktitle> In Proceedings of the 20 th Fault Tolerant Computing Symposium, </booktitle> <pages> pages 374-381, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Similar definitions hold for the robust gate delay fault test. A more stringent model is the hazard-free robust delay fault model 1 , treated in <ref> [98, 33] </ref>. A robust path delay fault test is said to be a hazard-free robust path delay fault test if no hazards can occur on the tested path during the application of the test, regardless of the delay values.
Reference: [99] <author> S. M. Reddy and M. K. Reddy. </author> <title> Testable Realization for FET Stuck-Open Faults in CMOS Combinational Logic Circuits. </title> <journal> In IEEE Transactions on Computers, </journal> <volume> volume C-35, </volume> <pages> pages 742-754, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: For each redundant cube in the cover we add one test input. Starting now with an irredundant two-level cover we proceed to make the cover RGDFT through the introduction of a single test input. This procedure is modeled after the procedure given in <ref> [99] </ref> to improve stuck-open fault testability. To motivate this procedure we will employ the following Lemma from [33, 36]. Lemma 6.4.1 : Let C be a two-level single-output circuit and let z i be a gate in C.
Reference: [100] <author> M. Rem, J. L. A. van de Snepscheut, and J. T. Udding. </author> <title> Trace theory and the definition of hierarchical components. </title> <booktitle> In Proceedings of Third CalTech Conference on VLSI, </booktitle> <pages> pages 225-239. </pages> <publisher> Computer Science Press, Inc., </publisher> <year> 1983. </year>
Reference: [101] <author> F. U. Rosenberger, C. E. Molnar, T. J. Chaney, and T.-P. Fang. Q-modules: </author> <title> Internally clocked delay-insensitive modules. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37 </volume> <pages> 1005-1018, </pages> <year> 1988. </year>
Reference-contexts: The clock is chosen to be slow enough to allow the output to settle before it is allowed to propagate to the feedback wires and to the environment. Various approaches to the design of self-clocked asynchronous circuits have been pre sented in the literature ([29], [135], <ref> [85, 101] </ref>, [69], [2], [90] to name but a few). Some distinctive points among them are: 62 CHAPTER 2. <p> This decomposition is common, for example, to [106], <ref> [85, 101] </ref>, [53] (within limits) and [113]. The Signal Transition Graph specification describes the complete system, circuit and environment, using events rather than logic levels or states (even though, under implementability conditions described in Chapter 3, a state-based model can be derived from the event-based one). <p> It also uses analysis techniques closely related to classical essential hazard analysis in order to guarantee a hazard-free circuit implementation (as described in Chapter 5). Finally, a scan-based delay testing technique, similar to that of <ref> [101] </ref>, is used to ensure that the manufactured circuit delays are within the bounds assumed during synthesis, and that hazard-free operation is guaranteed (as described in Chapter 6).
Reference: [102] <author> L. Y. Rosenblum and A. V. Yakovlev. </author> <title> Signal graphs: from self-timed to timed ones. </title> <booktitle> In International Workshop on Timed Petri Nets, </booktitle> <address> Torino, Italy, </address> <year> 1985. </year> <note> 284 BIBLIOGRAPHY </note>
Reference-contexts: The STG can be used as a more user-friendly input also for the synthesis methods described in the previous section, like the similar Change Diagram model ([125, 60, 62]), described in more detail in Section 3.5. Two fundamental papers, <ref> [102] </ref> and [26], independently introduced rather similar, Petri net-based, specification formalisms for asynchronous circuits. Both defined the Signal Transition Graph (called Signal Graph in [102]) as an interpreted Petri net (PN), in which each transition is labeled with a signal value change. <p> Two fundamental papers, <ref> [102] </ref> and [26], independently introduced rather similar, Petri net-based, specification formalisms for asynchronous circuits. Both defined the Signal Transition Graph (called Signal Graph in [102]) as an interpreted Petri net (PN), in which each transition is labeled with a signal value change. The idea of using a PN to describe asynchronous behavior was not new. <p> (<ref> [102] </ref> used the term Transition Diagram and [26] used the term State Graph to denote the STD). An example of STG and of the corresponding STD appears in Figure 1.3. A sufficient condition for the STD to correspond to a logic circuit modeled with unbounded gate delay, as shown in [102] and [27], is that the STG is normal, i.e., that no subset of the STG variables can change value twice without any other variable changing value. <p> Non-deterministic choice is limited to the environment of the circuit. To contrast the approaches of Rosenblum et al. and Chu: * <ref> [102] </ref> defined as valid any STG where, for all firing sequences, the transitions of each signal alternate (x + ! x ! x + : : :). * [27] defined the similar, but more restrictive, concept of live STG by requiring that for each signal there exist at least one SM <p> A HIGH-LEVEL BEHAVIORAL MODEL FOR ASYNCHRONOUS SYSTEMS 139 The model, called Signal Transition Graph (STG), is based on interpreted Petri nets, and is a development of similar, but less general, models presented by <ref> [102] </ref> and [26]. <p> A HIGH-LEVEL BEHAVIORAL MODEL FOR ASYNCHRONOUS SYSTEMS 141 3.3.2 Signal Transition Graphs An interpreted Petri net, where transitions represent changes of values of circuit signals, was proposed independently as a specification model for asynchronous circuits by <ref> [102] </ref> (where it was called Signal Graph) and [26] (where it was called Signal Transition Graph, STG). <p> Moreover, as shown in [10], all results proved for free-choice Petri nets are true also for extended free-choice ones, and vice-versa. 3.3.3 Signal Transition Graphs and State Transition Diagrams Both <ref> [102] </ref> and [26] gave also synthesis methods to translate the PN into an STD (called Transition Diagram in [102] and State Graph in [26]) and hence into a circuit implementation of the specified behavior. <p> Moreover, as shown in [10], all results proved for free-choice Petri nets are true also for extended free-choice ones, and vice-versa. 3.3.3 Signal Transition Graphs and State Transition Diagrams Both <ref> [102] </ref> and [26] gave also synthesis methods to translate the PN into an STD (called Transition Diagram in [102] and State Graph in [26]) and hence into a circuit implementation of the specified behavior. <p> So for example if s m = 00 fl 1 for signal ordering y 0 y 1 y 2 , then the implied value of y 0 is 0, the implied value of y 1 is 1 and the implied value of y 2 is 1. Both <ref> [102] </ref> and [26] recognized that an STG has an STD-isomorphic circuit implementation if (but not only if) the STD is non-contradictory. As a matter of terminology, [121] introduced the term Unique State Coding to denote an STG with a non-contradictory STD.
Reference: [103] <author> R. Rudell. </author> <title> Logic Synthesis for VLSI Design. </title> <type> Technical Report UCB/ERL M89/49, </type> <address> U. C. Berkeley, </address> <month> April </month> <year> 1989. </year>
Reference: [104] <author> A. Saldanha, T. Villa, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> A framework for satisfying input and output encoding constraints. </title> <booktitle> In Proceedings of the 28 th Design Automation Conference, </booktitle> <pages> pages 170-175, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: An encoding algorithm based on this Theorem was first given in [115]. We describe a more efficient formulation, due to <ref> [104] </ref>, that has a complexity linear in the number of prime dichotomies and produces an encoding with the minimum number of bits that satisfies the Theorem. Procedure 2.3.4 1. Let D = f (s i ; s j )8i 6= jg be the set of uniqueness dichotomies 6 2. <p> Encoding constraints that are used to minimize a two-level or multi-level implementation of the circuit can also be expressed as dichotomies ([134], <ref> [104] </ref>, [71]). So this encoding algorithm also allows the minimization of the implementation cost within the critical race-free constraint. Let us examine an example, the encoding of the FT in Figure 2.8, to clarify the above procedure. 1.
Reference: [105] <author> C. J. Seger. </author> <title> Models and Algorithms for Race Analysis in Asynchronous Circuits. </title> <type> PhD thesis, </type> <institution> University of Waterloo, </institution> <address> Ontario, Canada, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: Here we will only briefly list the methods that have most direct relevance for our work (see [19, 20] for a more complete description): 1. Three-valued simulation ([42], <ref> [105] </ref>) provides the fastest known algorithm for asynchronous circuit verification, but its usefulness is limited to static and steady-state hazard checking in Fundamental Mode using the pure unbounded wire (or bounded wire) delay model (Sec tion 2.7.1). 2. <p> For example [55] can be used for Fundamental Mode circuits or [37] can be used for Huffman Mode circuits. 2.7.1 Unbounded Delay in Fundamental Mode The objective of three-valued simulation ([42], <ref> [105] </ref>) is to provide a fast, pessimistic (i.e., no incorrect circuit can be accepted, but some correct ones may be rejected) method to check: * for potential static hazards in a combinational logic circuit, * for potential steady-state hazards in a sequential logic circuit.
Reference: [106] <author> C. L. Seitz. </author> <note> Chapter 7. </note> <editor> In C. Mead and L. Conway, editors, </editor> <title> Introduction to VLSI Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1981. </year>
Reference-contexts: Namely, the problem of clock skew disappears completely or is replaced by much more local versions of it, in which the need for the same event to be received almost at the same time by various sub-circuits is not global to the system, but is a local property <ref> [106] </ref>. 1.1. MOTIVATION 3 The elimination of the clock may improve the overall power consumption of the circuit. Alternately, an asynchronous design methodology can be used to design the clock stopping subsystem. <p> This decomposition is common, for example, to <ref> [106] </ref>, [85, 101], [53] (within limits) and [113]. The Signal Transition Graph specification describes the complete system, circuit and environment, using events rather than logic levels or states (even though, under implementability conditions described in Chapter 3, a state-based model can be derived from the event-based one).
Reference: [107] <author> E. M. Sentovich, K. J. Singh, L. Lavagno, C. Moon, R. Murgai, A. Saldanha, H. Savoj, P. R. Stephan, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> SIS: A system for sequential circuit synthesis. </title> <type> Technical Report UCB/ERL M92/41, </type> <institution> U.C. Berkeley, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: So if we want to implement the covers of s and m in a specific technology and improve the area and/or delay performance of the circuit, then we can use some multi-level logic synthesis techniques (e.g. those described in [16], [32] and <ref> [108, 107] </ref>). In order to retain the hazard properties of the two-level circuit, though, we must restrict ourselves to the transformations listed in Theorems 5.1.3 and 5.1.4 (and, possibly, those listed in [68]).
Reference: [108] <author> E.M. Sentovich, K.J. Singh, C. Moon, H. Savoj, R.K. Brayton, and A.L. Sangiovanni-Vincentelli. </author> <title> Sequential circuit design using synthesis and optimization. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: So if we want to implement the covers of s and m in a specific technology and improve the area and/or delay performance of the circuit, then we can use some multi-level logic synthesis techniques (e.g. those described in [16], [32] and <ref> [108, 107] </ref>). In order to retain the hazard properties of the two-level circuit, though, we must restrict ourselves to the transformations listed in Theorems 5.1.3 and 5.1.4 (and, possibly, those listed in [68]).
Reference: [109] <author> K. Shankar and D. Lee. </author> <title> Build a VMEbus interface with PAL devices. </title> <journal> Electronic Design, </journal> <volume> 37(15) </volume> <pages> 55-62, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: For hazard elimination, the slow-down is done locally for each signal. We will also show in Chapter 5 that this delay insertion procedure always produces a hazard-free circuit. 1.2.3 The VMEbus Master Interface Protocol In this section we describe our main example, taken from <ref> [109] </ref>: a master interface designed according to the VMEbus asynchronous communication protocol (see also [49]). All the signals are active low, and bus lines are open-collector.
Reference: [110] <author> K. J. Singh. </author> <title> Performance Optimization of Digital Circuits. </title> <type> PhD thesis, </type> <institution> U.C. Berkeley, </institution> <month> November </month> <year> 1992. </year>
Reference: [111] <author> K. S. Stevens, S. V. Robinson, and A. L. Davis. </author> <title> The post office communication support for distributed ensemble architectures. </title> <booktitle> In Sixth International Conference on Distributed Computing Systems, </booktitle> <year> 1986. </year>
Reference-contexts: However, an asynchronous circuit specification is often given in terms of a set of asynchronous Finite State Machines. The latter model is more natural for expressing control-dominated protocols (e.g. <ref> [111] </ref>), so ideally a complete design methodology should be able to handle both types of specification. In this section we summarize an algorithm recently proposed in [28] for this purpose.
Reference: [112] <author> J. Sun and R. W. Brodersen. </author> <title> Design of system interface modules. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 478-481, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: The relationship between the two timing diagrams can be inferred automatically (in part) from data dependencies between wires with the same names that appear on both sides (see also <ref> [112] </ref> for a similar approach using STGs for the low-level synthesis task). The Event Graph can be considered an acyclic STG fragment which describes the causality relations extracted from the timing diagrams and can be augmented with some timing constraint information.
Reference: [113] <author> I. E. Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <month> June </month> <year> 1989. </year> <note> Turing Award Lecture. </note>
Reference-contexts: Authors who proposed design methodologies for circuits that operate correctly with this model (delay-insensitive circuits) are forced either to assume that some wire delays are almost zero (isochronic forks, [23]) or to take delays into account within hand-designed logic modules ([101], [40], [17], [57], <ref> [113] </ref>). The Signal Transition Graph (STG) model was introduced independently by Rosenblum et al. ([102]) and by Chu ([26, 27]), to model formally both the circuit and the environment in which it operates. <p> This decomposition is common, for example, to [106], [85, 101], [53] (within limits) and <ref> [113] </ref>. The Signal Transition Graph specification describes the complete system, circuit and environment, using events rather than logic levels or states (even though, under implementability conditions described in Chapter 3, a state-based model can be derived from the event-based one). <p> It can also be used, for example, as a component in higher level synthesis methodologies for asynchronous circuits. Such methodologies, as for example <ref> [113] </ref>, [40] or [3], assume that a library of relatively 2.8. CONCLUSION 107 complex components has been implemented in the available technology.
Reference: [114] <author> W. Thomas. </author> <title> Automata on infinite objects. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science. </booktitle> <publisher> Elsevier, </publisher> <year> 1990. </year> <note> BIBLIOGRAPHY 285 </note>
Reference: [115] <author> J. H. Tracey. </author> <title> Internal state assignments for asynchronous sequential machines. </title> <journal> IEEE Transactions on Electronic Computers, </journal> <volume> EC-15(4):551-560, </volume> <month> August </month> <year> 1966. </year>
Reference-contexts: The classical asynchronous circuit design methodology based on the Huffman model (see, e.g., [53], <ref> [115] </ref> and [117]) starts from a Finite State Machine-like specification, the Flow Table, and produces logic equations implementing it. <p> The basic idea is that whenever two different transitions (possibly including stable states) occur under the same input, there must exist at least one state signal that does not change and distinguishes between the transitions. An encoding algorithm based on this Theorem was first given in <ref> [115] </ref>. We describe a more efficient formulation, due to [104], that has a complexity linear in the number of prime dichotomies and produces an encoding with the minimum number of bits that satisfies the Theorem. Procedure 2.3.4 1. <p> We also address how to extract from the minimized FSM sufficient conditions for the STG to have the CSC property. We propose to apply a critical race-free state encoding algorithm (such as the one proposed by Tracey <ref> [115] </ref>). Using the new states codes, we insert appropriate signal transitions in the STG. At this point, the STG can be implemented using the technique described in Chapter 5.
Reference: [116] <author> J. T. Udding. </author> <title> A formal model for defining and classifying delay-insensitive circuits and systems. </title> <journal> Distributed Computing, </journal> <volume> 1 </volume> <pages> 197-204, </pages> <year> 1986. </year>
Reference-contexts: Theorem 3.4.3 holds also in the pure delay case. 3.4.3 Delay Insensitivity Informally, a delay-insensitive circuit operates correctly under the inertial gate and wire delay model in Input-Output Mode (see also Section 2.6). A more formal definition was given by Udding in <ref> [116] </ref>, using Trace theory. Let A = hV; H; Y; i be a BACS, let S = hS; E; i be its associated STD, and let T = hA; i be its associated Trace Model. <p> Let v 0 be a special node qualified as the environment (this distinction is necessary to speak about output persistency). The delay insensitivity of A is captured by the following four rules (given in <ref> [116] </ref> and adapted to our notation): R 0 For all s 2 A fl and y fl 1 2 A, we must have sy fl 1 y fl 1 62 , i.e. Property 3.1.2 must hold for T .
Reference: [117] <author> S. H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley Interscience, </publisher> <year> 1969. </year>
Reference-contexts: The classical asynchronous circuit design methodology based on the Huffman model (see, e.g., [53], [115] and <ref> [117] </ref>) starts from a Finite State Machine-like specification, the Flow Table, and produces logic equations implementing it. <p> This notion is similar to the classical notion of essential hazard, as described, e.g., in <ref> [117] </ref>. For example, transition y + enables transition z in Figure 1.3. <p> The remainder of the chapter is organized as follows. Section 2.2 briefly recalls some definitions from the theory of logic functions (see, e.g., [15]), Finite State Machines (see, e.g., [65] or <ref> [117] </ref>), Finite Automata (see, e.g., [43]) and Petri nets (see, e.g., [89] or [96]). Section 2.3 describes the classical synthesis techniques, derived from the work of Huffman ([53]). Section 2.4 outlines the design methodology proposed by Sutherland ([113]) to implement efficiently fast data processing asynchronous modules. <p> in Figure 1.2 marks exactly one place in every SM of the (only) cover of the FCPN. 2.3 The Huffman Model for Asynchronous Circuits This section describes a number of issues concerning the modeling, analysis and synthesis techniques for asynchronous circuits based on the work of Huffman ([53], see also <ref> [117] </ref>). Such techniques use an FSM-like specification called the Flow Table (Section 2.3.1). They are based on the Huffman model shown in Figure 2.6. This model decomposes the circuit into a combinational logic part and a feedback part. The inertial unbounded delay model is used for modeling delay on 2.3. <p> Each entry of the table contains a next state and an output state (or simply output). The FT in Figure 2.7 (from <ref> [117] </ref>) describes the operation of an asynchronous circuit that controls a simple traffic light. <p> PREVIOUS WORK 2.3.2 Flow Table Minimization The initial FT describing the desired circuit behavior can be minimized using appropriate techniques (see, for example, [53], [46], [65] or <ref> [117] </ref>). <p> So we obtain the two-level circuit given in Figure 2.10 (ignore the dashed gate for now). Let us examine now the circuit operation in more detail. The discussion follows that in <ref> [117] </ref>. <p> Sequential hazards that are inherent in the FT specification and occur regardless of the actual implementation (as opposed, e.g., to hazards due to critical races, that can be eliminated with a proper state encoding) are essential hazards. Such essential hazards, as shown in <ref> [117] </ref>, are identified by a simple property of a minimized FT: for some initial total state and input signal x i , the total state reached after three consecutive transitions on x i is different from the total state reached after one single transition on x i . <p> PREVIOUS WORK 2. No FT with essential hazards has an implementation without steady-state hazards independent of the feedback delays. As noted in [20], the Theorem of <ref> [117] </ref> is the first known proof that some behavior has no delay-insensitive implementation (see also Section 2.6). 3. <p> Our technique to translate an STG into an implementation uses classical state minimization ([46], [65]) and critical race-free state encoding ([115], <ref> [117] </ref>) in order to ensure imple-mentability (as described in Chapter 4). It also uses analysis techniques closely related to classical essential hazard analysis in order to guarantee a hazard-free circuit implementation (as described in Chapter 5). <p> It removes the usual structural limitation (used, e.g. by [83] or <ref> [117] </ref>) that each component has exactly one output signal. An ACS structure can represent an arbitrary interconnection of modules, with the only restriction that no two modules can drive a single signal. <p> Given the generality of the proposed framework, though, it is possible to use different cost functions, e.g. to optimize the estimated area of the circuit. The following result of <ref> [117] </ref> shows that using this framework we obtain a lower bound on the number of state signals: 4.3. <p> A similar result was proved in <ref> [117] </ref>, but only under the Fundamental Mode assumption, while here we lift such restriction. <p> It overruns the input change that caused it, and causes a hazard in some gate that was expecting the effect of the input change before the effect of the state variable change. Such hazards required (see, e.g., <ref> [117] </ref>) to increase the delay of the state signals, so that input changes finish their propagation before the changes due to the state transition are initiated. 5.4. HAZARD ELIMINATION BY LINEAR PROGRAMMING 227 2.
Reference: [118] <author> K. van Berkel. </author> <title> Beware the isochronic fork. Integration, </title> <journal> the VLSI journal, </journal> <volume> 13(2) </volume> <pages> 103-128, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: This list of critical wires can be used, for example, as a guide during the transistor sizing and layout phases, forcing those wires to be as short as possible. Another phase where isochronic forks must be taken into account is during transistor sizing, because as pointed out by <ref> [118] </ref> different logic thresholds may invalidate the isochronous hypothesis even without considering wire delays. 2. <p> Both the inertial and gate delay models can be too optimistic as the scale of integration decreases and transmission line delays are no longer negligible in comparison with gate switching delays. The gate delay model may also fail, as shown by <ref> [118] </ref>, if two gates have a different logic threshold voltage. The approach avoids two major drawbacks that were present in the original STG synthesis methodology, as defined by Chu (see [27]).
Reference: [119] <author> J. L. A. van de Snepscheut. </author> <title> Trace Theory and VLSI Design. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1983. </year>
Reference: [120] <author> J. L. A. van de Snepscheut. </author> <title> Trace Theory and VLSI Design, </title> <booktitle> volume 200 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference: [121] <author> P. Vanbekbergen. </author> <title> Optimized synthesis of asynchronous control circuits from graph-theoretic specifications. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 184-187, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Both [102] and [26] recognized that an STG has an STD-isomorphic circuit implementation if (but not only if) the STD is non-contradictory. As a matter of terminology, <ref> [121] </ref> introduced the term Unique State Coding to denote an STG with a non-contradictory STD. Chu also formulated a necessary and sufficient condition for the existence of a circuit implementation of a valid STG, calling it a problem with state-assignment ([27]). <p> Using the new states codes, we insert appropriate signal transitions in the STG. At this point, the STG can be implemented using the technique described in Chapter 5. The initial research in the area of Unique State Coding enforcement (for example [133] and <ref> [121] </ref>) concentrated on the introduction of constraints within an STG whose underlying Petri net is a Marked Graph, using a sufficient condition as a guidance. Namely both [133] and [121] recognized that if all pairs of signals in the STG are locked using a chain of handshaking pairs, 160 CHAPTER 4. <p> The initial research in the area of Unique State Coding enforcement (for example [133] and <ref> [121] </ref>) concentrated on the introduction of constraints within an STG whose underlying Petri net is a Marked Graph, using a sufficient condition as a guidance. Namely both [133] and [121] recognized that if all pairs of signals in the STG are locked using a chain of handshaking pairs, 160 CHAPTER 4. THE STATE ENCODING METHODOLOGY then the MG satisfies the Unique State Coding condition. <p> We can also reduce the number of state signals below the given bound if we are allowed to remove some state from the STD, because then we are modifying the FSM before realization. For example the method described in <ref> [121] </ref> adds constraints to the STG to remove from the FSM states that can cause incompatibilities, so that the resulting FSM has only one compatible and, by Theorem 4.2.1, the STG has CSC. However, this is not general and cannot always be done without adding state signals.
Reference: [122] <author> P. Vanbekbergen, G. Goossens, and H. De Man. </author> <title> A local optimization technique for asynchronous control circuits. </title> <booktitle> In Proceedings of the International Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: Minimization of this FSM allows us to prove necessary conditions on the number of state signals required to implement it. This proposed framework is general enough to embed also previous methods to solve the CSC problem for some specific sub-classes of STGs, such as <ref> [122] </ref>. We also address how to extract from the minimized FSM sufficient conditions for the STG to have the CSC property. We propose to apply a critical race-free state encoding algorithm (such as the one proposed by Tracey [115]). <p> The technique is based on the identification of pairs of STD states that cause a CSC violation. Each pair of such states is connected by an edge in an undirected graph called the constraint graph 1 . Then coloring this graph provides, according to <ref> [122] </ref>, a lower bound on the number of state signals required for CSC. This approach, even though it was originally proposed only for MGs, bears some resemblance with the framework that we propose for general STGs. <p> Vanbekbergen apparently did not recognize the need to use critical race-free encoding. Critical races would show up as further violations of CSC in the encoded STG. Thus the main advantage of our framework over <ref> [122] </ref> is the recognition that CSC falls within a much more general problem, previously known as state minimization/critical race-free encoding (Sections 2.3.2 and 2.3.3), and that constraint graph coloring can be considered only as a heuristic technique to solve the general problem. <p> Example master-read took a relatively long time to complete because most states were assigned to all the compatibles by the initial FSM minimization procedure, and then Procedure 4.3.2 was slow to converge. In comparison, the algorithm described in <ref> [122] </ref> found a solution 4 for STGs vbe4a and vbe6a with 5 and 34 literals respectively. Our procedure obtains a significantly larger circuit for vbe4a because we use state signals to eliminate CSC violation but preserve the concurrency of the specification as much as possible, while [122] does not add state <p> the algorithm described in <ref> [122] </ref> found a solution 4 for STGs vbe4a and vbe6a with 5 and 34 literals respectively. Our procedure obtains a significantly larger circuit for vbe4a because we use state signals to eliminate CSC violation but preserve the concurrency of the specification as much as possible, while [122] does not add state variables but reduces the concurrency. Presently we do not attempt to remove any state (by adding causality constraints), but we always add state signals, which accounts for the large area penalty in this case. Applying to vbe4a the state removal technique of [122] within our framework <p> as possible, while <ref> [122] </ref> does not add state variables but reduces the concurrency. Presently we do not attempt to remove any state (by adding causality constraints), but we always add state signals, which accounts for the large area penalty in this case. Applying to vbe4a the state removal technique of [122] within our framework led to a result that did not require any state signal and had 13 literals but more concurrency than the result shown in [122]. <p> Applying to vbe4a the state removal technique of <ref> [122] </ref> within our framework led to a result that did not require any state signal and had 13 literals but more concurrency than the result shown in [122].
Reference: [123] <author> P. Vanbekbergen, G. Goossens, and H. De Man. </author> <title> Specification and analysis of timing constraints in signal transition graphs. </title> <booktitle> In Proceedings of the European Design Automation Conference, </booktitle> <pages> pages 302-306, </pages> <year> 1992. </year>
Reference-contexts: z fl i of z fl j has fired: either at time 1 if z fl i does not belong to T (H;M ) (this provides a worst case, because it allows for the earliest possible firing, but the bound could be improved using techniques such as those described in <ref> [123] </ref> or [82]), or at time D (i;H;M) if z fl i belongs to T (H;M) . Let (i;j) denote the minimum delay between the firing of z fl i and the firing of z fl j .
Reference: [124] <author> P. Vanbekbergen, B. Lin, G. Goossens, and H. De Man. </author> <title> A generalized state assignment theory for transformations on signal transition graphs. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 112-117, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Our approach, on the other hand, capitalizes on well-studied problems for which very efficient exact and heuristic methods have been found. Also note that the main focus of our approach is to produce as output a Signal Transition Graph, rather than a State Transition Diagram as <ref> [124] </ref>. The encoded STG can be used to document to the designer the changes made to the specification to make it implementable.
Reference: [125] <author> V. I. Varshavsky, M. A. Kishinevsky, A. Y. Kondratyev, L. Y. Rosenblyum, and A. R. Taubin. </author> <title> Models for specification and analysis of processes in asynchronous circuits. </title> <journal> Izvestiia Akademii nauk SSSR, Tekhnicheskaya Kibernetika, </journal> <pages> pages 171-190, </pages> <year> 1988. </year> <title> English translation: </title> <journal> Soviet Journal of Computer and Systems Sciences. </journal> <volume> 286 BIBLIOGRAPHY </volume>
Reference-contexts: The two are also similar in that both assume some level of custom design for the library, one using generalized C gates, and one using arbitrary and-or-not gates. Martin's method, though, uses a higher-level specification formalism than Varshavsky's STD (or even than the more recent, signal transition-based, Change Diagram <ref> [125] </ref>) Martin's approach, obviously, must solve a more difficult synthesis problem that is harder to automate efficiently. 2.7 Hazard Analysis in Asynchronous Circuits In this section, we will examine a completely different problem: the analysis that verifies whether the designer (or the automated synthesis algorithm) has performed his task in a <p> In order to describe a semi-modular circuit with a polynomial size model, Kishinevsky et al. introduced the Change Diagram (CD, see also Section 3.5 and <ref> [125, 60, 62] </ref>). They showed that the Change Diagram has the same expressive power as semi-modular STDs, i.e., an STD is semi-modular if and only if it has a corresponding Change Diagram. <p> The only effort in this direction, to the best of our knowledge, is the so-called Change Diagram representation, that was shown in <ref> [125] </ref> to be formally equivalent to semi-modular circuits under the unbounded inertial gate delay model. Change 110 CHAPTER 3. THE SIGNAL TRANSITION GRAPH MODEL Diagrams, however, are not general enough, in that they can represent concurrency and causality, but not choice. <p> Section 3.3 defines Signal Transition Graphs as interpreted Petri nets and describes the problem of their implementation in asynchronous circuits. Section 3.4 presents a classification of Signal Transition Graphs according to the corresponding circuit properties. Section 3.5 compares the Change Diagram model proposed in <ref> [125] </ref> with the STG model. Section 3.6 summarizes the use of the proposed model within our integrated design methodology. 3.1 A Low-level Model for Asynchronous Systems This section introduces a low-level, state-transition-based, model of asynchronous systems. <p> on rule R 00 2 , if we identify y fl 1 with R a , y fl 2 with R b , y fl 3 with A a , and t with the empty trace. 3.5 Signal Transition Graphs and Change Diagrams Change Diagrams, described in more detail in <ref> [125, 60, 62] </ref>, are an event-based model for asynchronous circuits that bears some resemblance to Signal Transition Graphs, but has some interesting properties of its own. In this section we compare the two models, and show how, when we limit ourselves to semi-modular circuits, they have similar modeling power. <p> Each disengageable arc is removed from the Change Diagram after the first firing of its successor transition. They are used to represent the initialization sequence of a circuit, and we will not enter into details concerning their usage. Following <ref> [125] </ref>, a State Transition Diagram S = hS; E; i can be associated with a Change Diagram, as we did in Section 3.3.2 for STGs. Let S be the set of reachable activity vectors (similar to PN markings). <p> The main theoretical result concerning Change Diagrams is stated in <ref> [125] </ref> (the proof will appear in [63]). A transient cycle in an STD is defined as a cycle where at least one signal is continuously excited with the same value (see, for example, the cycle s1; s2; s3; s4 for signal R b in 152 CHAPTER 3.
Reference: [126] <author> V. I. Varshavsky, M. A. Kishinevsky, V. B. Marakhovsky, V. A. Peschansky, L. Y. Rosenblum, A. R. Taubin, and B. S. Tzirlin. </author> <title> Self-timed Control of Concurrent Processes. </title> <publisher> Kluwer Academic Publisher, </publisher> <year> 1990. </year> <note> (Russian edition: </note> <year> 1986). </year>
Reference-contexts: Speed-independence ensures correct operation of a circuit modeled 1.2. OVERVIEW OF THE DESIGN METHODOLOGY 5 using the unbounded gate delay model. This model is used in the synthesis methods proposed, for example, by [5], <ref> [126] </ref>, [87] and [8]. Unfortunately, the unbounded gate delay model is not realistic: it ignores technological limits on the delays, which is pessimistic, and ignores the wire delays, which is optimistic ([118]). <p> Several properties of combinational hazards have been established ([117]): 1. A two-level implementation of any logic function can be made static 1-hazard-free under Single Input Change by including every prime implicant in the implementation (this is sometimes referred to as a Disjunctive Normal Form implementation <ref> [126] </ref>). 2.3. THE HUFFMAN MODEL FOR ASYNCHRONOUS CIRCUITS 57 2. <p> The basic idea is to use a self-synchronizing code to encode the input and output states of the circuit (which can be combinational or sequential) and to use a request/acknowledge protocol to synchronize various cooperating circuits. A self-synchronizing code (see <ref> [126] </ref> for a detailed analysis) uses two classes of binary vectors to encode input and output signals. It is assumed that the two classes of codes alternate in time in the operation of the circuit, both on its inputs and its outputs (so that two such circuits can communicate successfully). <p> Armstrong et al. observed that the nature of the methodology ensures a high degree of self-checking, because almost half of the faults will stop the circuit operation (see also <ref> [126] </ref> and [6] for more general results on self-checking properties of speed-independent circuits). The dual-rail encoding is still the most common way of implementing data-oriented computations with unbounded delays, as opposed to control-oriented ones. <p> So the STD has a term takeover with respect to signal y. The first result of <ref> [126] </ref> is the proof that every term takeover can be eliminated from a circuit without losing semi-modularity. The proof itself contains a constructive method for adding at most three additional signals for each takeover. <p> Here we will use the more restrictive notion, as in <ref> [126] </ref>. 74 CHAPTER 2. PREVIOUS WORK S i z i This perfect implementation of the STD is described in Figure 2.19, where S i and R i are the Disjunctive Normal Form of each excitation function of z i . <p> The interested reader is referred to <ref> [126] </ref> for more details. In the same direction as [126], recent work by Beerel et al. ([8, 7]) has shown that a more efficient speed-independent implementation of an STG specification can be obtained using n-input not-nand and not-C gates (i.e., nand and C gates where an arbitrary number of inputs can <p> The interested reader is referred to <ref> [126] </ref> for more details. In the same direction as [126], recent work by Beerel et al. ([8, 7]) has shown that a more efficient speed-independent implementation of an STG specification can be obtained using n-input not-nand and not-C gates (i.e., nand and C gates where an arbitrary number of inputs can be complemented). <p> Another class of ALTSs, significant because of some interesting analysis and synthesis results (see Section 2.7.2 and <ref> [126] </ref>) is connected with the definition of strict causality (or, informally, of a unique set of actions causing an action) described in Section 3.1.3. 1. An ALTS (STD) is called distributive-1 if it is strictly causal and locally confluent. 2. <p> Once the above choices have been made, the STG describing the desired behavior can be verified against the chosen properties, using the results from the literature summarized in this chapter. 3. An implementation is produced using the synthesis algorithms described in Chapter 5 (or, for example, in <ref> [126] </ref> and [8]). 4. <p> In other words, Chu-persistency would be sufficient to guarantee an implementation without any term takeover. Unfortunately even this turns out to be false, because <ref> [126] </ref> reports an example of a Chu-persistent STG whose STD has a term takeover.
Reference: [127] <author> T. Villa. </author> <title> A heuristic incompletely specified finite state machine minimizer. </title> <type> Personal communication, </type> <year> 1985. </year>
Reference: [128] <author> T. E. Williams. </author> <title> Analyzing and improving latency and throughput in self-timed pipelines and rings. </title> <booktitle> In Proceedings of the ACM International Workshop on Timing Issues in the Specification and Synthesis of Digital Systems (TAU), </booktitle> <month> March </month> <year> 1992. </year>
Reference: [129] <author> D. Wong, G. De Micheli, and M Flynn. </author> <title> Inserting active delay elements to achieve wave pipelining. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 270-273, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: If we choose to assign the same weight to all variables, then we minimize an estimate of the area impact of delay padding. This is similar to the delay re-padding done in <ref> [129] </ref>, where, for example, two equal delays padded before a two-input gate are moved after the gate, halving the area cost of the buffers. 234 CHAPTER 5.
Reference: [130] <author> A. V. Yakovlev. </author> <title> On limitations and extensions of STG model for designing asynchronous control circuits. </title> <booktitle> In Proceedings of the International Conference on Computer Design, </booktitle> <pages> pages 396-400, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Chu's approach allows a relatively easy formal characterization of concepts such as concurrent transitions. The price is a restriction of the class of specifiable behaviors, as pointed out recently by [60, 62] and by <ref> [130] </ref>. In this work, we try to combine the advantages of both approaches. Namely, in Chapter 3 we give a broad characterization of the circuit properties implied by various STG properties. <p> Furthermore the classical definition of a valid Signal Transition Graph specification is unnecessarily restrictive, as [62] and <ref> [130] </ref> showed by presenting some useful, correctly implementable behaviors that cannot be described with the constrained STGs used by Chu in [26]. For example Chu required the Petri net underlying the STG to be safe, live and free-choice, in order to ease the STG analysis/synthesis task. <p> Various authors (see [62], <ref> [130] </ref> and Chapter 3), pointed out that the assumption to start from a correct STG can be unnecessarily restrictive, as there are some useful asynchronous circuit 206 CHAPTER 5. THE SYNTHESIS METHODOLOGY behaviors that cannot be described with live safe free-choice Petri nets.
Reference: [131] <author> A. V. Yakovlev. </author> <title> A structural technique for fault-protection in asynchronous interfaces. </title> <booktitle> In Proceedings of 22 nd International Symposium on Fault-tolerant Computing (FTCS), </booktitle> <pages> pages 288-295, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: This means that the environment is supposed to be hazard-free (see <ref> [131] </ref> for a discussion of techniques that increase circuit robustness with respect to environmental hazards). These assertions should be taken with care, as we are dealing with wire delays and we cannot assume, in general, that the STG describes a delay-insensitive behavior.
Reference: [132] <author> A. V. Yakovlev. </author> <title> Analysis of concurrent systems through lattices. </title> <note> Theoretical Computer Science, Submitted for publication. </note>
Reference-contexts: Hence it is also locally confluent and confluent. As in Section 3.1.5, we can define the Cumulative Diagram (CD) of a Petri net, and analyze its properties as a lattice. This will be useful in order to establish the desired correspondence between PN properties and circuit properties. According to <ref> [132] </ref>, we define the Cumulative Diagram of a marked PN as follows. <p> The set V , called the Cumulative Diagram of P, was shown in <ref> [132] </ref> to be a partial order when we define V 1 v V 2 if: * V 1 (t) v V 2 (t) for all t and * marking (V 2 ) is reachable from marking (V 1 ). <p> The following Theorem was proved in [12]: Theorem 3.3.2 The ALTS of a PN is confluent if the net is free-choice, bounded and live. The following Theorems were proved in <ref> [132] </ref>: Theorem 3.3.3 The CD of a marked PN is a semi-modular lattice with a zero element if the net is persistent. Theorem 3.3.4 1. The CD of a marked PN is a distributive lattice with a zero element if the net is safe and persistent. 2.
Reference: [133] <author> A. V. Yakovlev and A. Petrov. </author> <title> Petri nets and parallel bus controller design. </title> <booktitle> In International Conference on Application and Theory of Petri Nets, </booktitle> <address> Paris, France. </address> <publisher> IEEE Computer Society, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: Using the new states codes, we insert appropriate signal transitions in the STG. At this point, the STG can be implemented using the technique described in Chapter 5. The initial research in the area of Unique State Coding enforcement (for example <ref> [133] </ref> and [121]) concentrated on the introduction of constraints within an STG whose underlying Petri net is a Marked Graph, using a sufficient condition as a guidance. Namely both [133] and [121] recognized that if all pairs of signals in the STG are locked using a chain of handshaking pairs, 160 <p> The initial research in the area of Unique State Coding enforcement (for example <ref> [133] </ref> and [121]) concentrated on the introduction of constraints within an STG whose underlying Petri net is a Marked Graph, using a sufficient condition as a guidance. Namely both [133] and [121] recognized that if all pairs of signals in the STG are locked using a chain of handshaking pairs, 160 CHAPTER 4. THE STATE ENCODING METHODOLOGY then the MG satisfies the Unique State Coding condition.
Reference: [134] <author> S. Yang and M. Ciesielski. </author> <title> Optimum and suboptimum algorithms for input encoding and its relationship to logic minimization. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 10(1) </volume> <pages> 4-12, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Unfortunately, the number of prime dichotomies can still be exponential in the number of states, so heuristic algorithms such as those described in <ref> [134] </ref> or [136] should be used when the number of FT states precludes the application of the exact algorithm above. Encoding constraints that are used to minimize a two-level or multi-level implementation of the circuit can also be expressed as dichotomies ([134], [104], [71]). <p> Because the number of the states in the minimized FSM is usually quite small, we were able to find an exact solution to the encoding problem for all our examples. For large FSMs we can use heuristic techniques which do not generate all the prime dichotomies (e.g. <ref> [134] </ref> or [136]). 4.4 State Signal Insertion We have partitioned, as shown in Section 4.3, the states in the original FSM F into a closed partition , whose blocks are distinguishable using a selected subset of signals D.
Reference: [135] <author> O. Yenersoy. </author> <title> Synthesis of asynchronous machines using mixed-operation mode. </title> <journal> IEEE Transactions on Computers, </journal> <pages> pages 325-329, </pages> <month> April </month> <year> 1979. </year>
Reference-contexts: The clock is chosen to be slow enough to allow the output to settle before it is allowed to propagate to the feedback wires and to the environment. Various approaches to the design of self-clocked asynchronous circuits have been pre sented in the literature ([29], <ref> [135] </ref>, [85, 101], [69], [2], [90] to name but a few). Some distinctive points among them are: 62 CHAPTER 2.

References-found: 135

