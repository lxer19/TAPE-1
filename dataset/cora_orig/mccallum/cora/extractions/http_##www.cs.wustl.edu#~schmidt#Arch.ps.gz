URL: http://www.cs.wustl.edu/~schmidt/Arch.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/events_tutorial.html
Root-URL: 
Email: flevine,schmidt,cdgillg@cs.wustl.edu  
Title: Architectural Considerations for Deterministic Real-Time ORB Endsystems and Applications  Task 3C/D Deliverable  
Author: David L. Levine, Douglas C. Schmidt, and Chris Gill 
Keyword: Real-time CORBA, Object Request Broker, Quality of Service, Object-Oriented Architecture  
Date: October 28, 1997  
Address: St. Louis, MO 63130, USA  
Affiliation: Department of Computer Science, Washington University  
Abstract: There is increasing demand to extend object-oriented middle-ware to support applications with stringent quality of service (QoS) requirements. However, conventional object-oriented middleware does not define standard features for specifying or enforcing end-to-end QoS for applications with deterministic or statistical real-time requirements. This paper describes how QoS can be integrated into object-oriented middleware, using the TAO real-time object request broker (ORB). It focuses on the architectural design of the TAO endsystem and on the recommended design of real-time application components that use TAO and CORBA. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Johnson, </author> <title> Frameworks = Patterns + Components, </title> <journal> Communications of the ACM, </journal> <volume> vol. 40, </volume> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: 1 Introduction 1.1 Emerging Trends Several trends are shaping the future of distributed, real-time system development. First, industry is moving away from programming applications from scratch to integrating applications using reusable components based on object-oriented (OO) middleware <ref> [1] </ref>. Second, there is great demand for remote method invocation and messaging technology that simplifies the collaboration of distributed application components [2]. Third, there are increasing efforts to define standard software infrastructures that allow applications to interwork seamlessly throughout heterogeneous environments [3].
Reference: [2] <author> S. Landis and S. Maffeis, </author> <title> Building Reliable Distributed Systems with CORBA, </title> <booktitle> Theory and Practice of Object Systems, </booktitle> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: First, industry is moving away from programming applications from scratch to integrating applications using reusable components based on object-oriented (OO) middleware [1]. Second, there is great demand for remote method invocation and messaging technology that simplifies the collaboration of distributed application components <ref> [2] </ref>. Third, there are increasing efforts to define standard software infrastructures that allow applications to interwork seamlessly throughout heterogeneous environments [3].
Reference: [3] <author> S. Vinoski, </author> <title> CORBA: Integrating Diverse Applications Within Distributed Heterogeneous Environments, </title> <journal> IEEE Communications Magazine, </journal> <volume> vol. 14, </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: Second, there is great demand for remote method invocation and messaging technology that simplifies the collaboration of distributed application components [2]. Third, there are increasing efforts to define standard software infrastructures that allow applications to interwork seamlessly throughout heterogeneous environments <ref> [3] </ref>. Finally, next-generation distributed and real-time applications such as video-on-demand, teleconferencing, and avionics require end fl This work was supported in part by Boeing. systems that can provide quality of service (QoS) guarantees for latency, bandwidth, and reliability [4]. <p> CORBA allows clients to invoke operations on objects without concern for where the objects reside, what language the objects are written in, what OS/hardware platform they run on, or what communication protocols and networks are used to interconnect distributed objects <ref> [3] </ref>. Several research efforts [9, 10, 11] are focusing on integrating QoS into the CORBA model. In addition, several OMG groups, notably the Real-Time Special Interest Group and the Telecom Domain Task Force, are actively investigating extensions to CORBA to support distributed real-time applications. <p> We first discuss the high-level characteristics of ORBs, followed by a detailed consideration of the tradeoffs among various features and architectural alternatives. 2.1 Open System Features Open systems are designed to interoperate with other systems and to be extensible <ref> [3] </ref>. Interoperability permits decoupled development of systems that often span organizational boundaries. Systems that are extensible can be more easily enhanced and upgraded. Because we focus primarily on developing reusable mid-dleware for real-time systems, this paper examines software architectures for ORB endsystems [9].
Reference: [4] <author> R. Gopalakrishnan and G. Parulkar, </author> <title> Quality of Service Support for Protocol Processing Within Endsystems, in High-Speed Networking for Multimedia Applications (W. Effelsberg, </title> <editor> et. al., ed.), </editor> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: Finally, next-generation distributed and real-time applications such as video-on-demand, teleconferencing, and avionics require end fl This work was supported in part by Boeing. systems that can provide quality of service (QoS) guarantees for latency, bandwidth, and reliability <ref> [4] </ref>. Existing OO middleware like CORBA [5], DCOM [6], and Java RMI [7] is suitable for request/response applications with best-effort quality of service requirements.
Reference: [5] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.0 ed., </editor> <month> July </month> <year> 1995. </year>
Reference-contexts: Finally, next-generation distributed and real-time applications such as video-on-demand, teleconferencing, and avionics require end fl This work was supported in part by Boeing. systems that can provide quality of service (QoS) guarantees for latency, bandwidth, and reliability [4]. Existing OO middleware like CORBA <ref> [5] </ref>, DCOM [6], and Java RMI [7] is suitable for request/response applications with best-effort quality of service requirements. <p> Several international efforts are currently addressing QoS for OO middleware. The most prominent is the OMG CORBA standardization effort <ref> [5] </ref>. CORBA allows clients to invoke operations on objects without concern for where the objects reside, what language the objects are written in, what OS/hardware platform they run on, or what communication protocols and networks are used to interconnect distributed objects [3]. <p> In this model, distribution was planned for, but not initially implemented. After successful demonstration of a statically scheduled, single processor system [9, 13], we are implementing a distributed solution based on CORBA <ref> [5] </ref>. <p> For servers executing remotely, CORBA 2.0-compliant <ref> [5] </ref> ORB Cores communicate via the General Inter-ORB Protocol (GIOP) and the Internet Inter-ORB Protocol (IIOP), which runs atop the TCP transport protocol.
Reference: [6] <author> D. </author> <title> Box, Understanding COM. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1997. </year>
Reference-contexts: Finally, next-generation distributed and real-time applications such as video-on-demand, teleconferencing, and avionics require end fl This work was supported in part by Boeing. systems that can provide quality of service (QoS) guarantees for latency, bandwidth, and reliability [4]. Existing OO middleware like CORBA [5], DCOM <ref> [6] </ref>, and Java RMI [7] is suitable for request/response applications with best-effort quality of service requirements.
Reference: [7] <author> A. Wollrath, R. Riggs, and J. Waldo, </author> <title> A Distributed Object Model for the Java System, </title> <booktitle> USENIX Computing Systems, </booktitle> <volume> vol. 9, </volume> <month> November/December </month> <year> 1996. </year>
Reference-contexts: Finally, next-generation distributed and real-time applications such as video-on-demand, teleconferencing, and avionics require end fl This work was supported in part by Boeing. systems that can provide quality of service (QoS) guarantees for latency, bandwidth, and reliability [4]. Existing OO middleware like CORBA [5], DCOM [6], and Java RMI <ref> [7] </ref> is suitable for request/response applications with best-effort quality of service requirements.
Reference: [8] <author> D. C. Schmidt, A. Gokhale, T. Harrison, and G. </author> <month> Parulkar, </month>
Reference-contexts: However, existing OO middleware is not yet suited for performance-sensitive, distributed real-time applications due to (1) lack of QoS specification interfaces, (2) lack of QoS enforcement, (3) lack of real-time programming features, and (4) lack of performance optimizations <ref> [8] </ref>. Several international efforts are currently addressing QoS for OO middleware. The most prominent is the OMG CORBA standardization effort [5]. <p> excessively [20] and overflows processor caches [27]; (2) internal message buffering strategies that produce non-uniform behavior for different message sizes [28]; (3) inefficient demulti-plexing and dispatching algorithms [12]; (4) long chains of intra-ORB virtual method calls [29]; and (5) lack of integration with underlying real-time OS and network QoS mechanisms <ref> [8] </ref>. 4.2 Overview of TAO TAO is an ORB endsystem that contains the network interface, operating system, communication protocol, and CORBA mid-dleware components and features shown in Figure 3.
References-found: 8

