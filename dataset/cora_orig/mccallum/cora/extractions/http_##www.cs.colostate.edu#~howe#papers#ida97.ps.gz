URL: http://www.cs.colostate.edu/~howe/papers/ida97.ps.gz
Refering-URL: http://www.cs.colostate.edu/~howe/students.html
Root-URL: 
Email: email: fhowe,somlog@cs.colostate.edu  
Title: Modeling Discrete Event Sequences as State Transition Diagrams  
Author: Adele E. Howe and Gabriel Somlo 
Address: Fort Collins CO 80523, USA,  
Affiliation: Computer Science Dept, Colorado State University,  
Abstract: Discrete event sequences have been modeled with two types of representation: snapshots and overviews. Snapshot models describe the process as a collection of relatively short sequences. Overview models collect key relationships into a single structure, providing an integrated but abstract view. This paper describes a new algorithm for constructing one type of overview model: state transition diagrams. The algorithm, called State Transition Dependency Detection (STDD), is the latest in a family of statistics based algorithms for modeling event sequences called Dependency Detection. We present accuracy results for the algorithm on synthetic data and data from the execution of two AI systems.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Marc Abrams, Alan Batongbacal, Randy Ribler, and Devendra Vazirani. CHI TRA94: </author> <title> A tool to dynamically characterize ensembles of traces for input data modeling and output analysis. </title> <institution> Department of Computer Science 94-21, Virginia Polytechnical Institute and State University, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Based on this experience, we developed an overview modeling algorithm that constructs complete, Semi-Markov models of the event sequences [10]. Abrams et al. generate Semi-Markov models to debug interactions of distributed computational processes <ref> [1] </ref>. Their method constructs Semi-Markov models from the most strongly associated pairs of events in execution traces; CHAID analysis determines which are most strongly associated [5].
Reference: 2. <author> Rakesh Agrawal, Manish Mehta, John Shafer, and Ramakrishnan Srikant. </author> <title> The Quest data mining system. </title> <booktitle> In Proceedings of the Second International Conferrence on Knowledge Discovery and Data Mining, </booktitle> <address> Portland, OR, </address> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: These rules relate key events to each other. For example, a rule in a grammar indicates that an adjective should be followed by a noun or that the purchase of the first book in a best-selling trilogy is often followed by the purchase of the second and third books <ref> [2] </ref>. Overview models collect key relationships into a single structure, providing an integrated but abstract view. For example, finite state machines drive some language parsers, and Markov and Bayesian networks structure probabilistic dependencies [14]. Each representation has its purposes. <p> Business and medical applications dominate the applications of data mining methods to event sequence modeling. The Quest system at IBM has been used in business for attached mailing, add-on sales and customer satisfaction as well as medical diagnosis <ref> [2] </ref>. The algorithm for finding sequential patterns counts subsequences and then generalizes the frequently occurring ones to include sets of possible values in positions; the algorithm is extremely efficient and has been designed for mining massive databases [3].
Reference: 3. <author> Rakesh Agrawal and Ramakrishnan Srikant. </author> <title> Mining sequential patterns. </title> <booktitle> In Pro ceedings of the Int'l Conference on Data Engineering (ICDE), </booktitle> <address> Taipei, Taiwan, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: We also wish to thank Larry Pyeatt for his contributions on the previous version of the algorithm and for collecting the RARS data. basket problem <ref> [3] </ref>) and tend to include even extremely rare relationships or events. Overviews provide a more comprehensive view, clarifying longer term relationships and interaction effects. This paper presents a new overview modeling method, called State Transition Dependency Detection (STDD), that automatically generates state transition models from event sequences. <p> The algorithm for finding sequential patterns counts subsequences and then generalizes the frequently occurring ones to include sets of possible values in positions; the algorithm is extremely efficient and has been designed for mining massive databases <ref> [3] </ref>. Intelligent agents may use operators for deciding what action to take to achieve a desired state. Agents can learn these operators by modeling their perceptions of state changes in the environment using Multi-Stream Dependency Detection (MSDD) [13].
Reference: 4. <author> Wray Buntine. </author> <title> Graphical models for discovering knowledge. </title> <editor> In U. Fayyad, G. Piatetsky-Shapiro, P. Smyth, and R. Uthurusamy, editors, </editor> <booktitle> Advances in Knowledge Discovery and Data Mining. </booktitle> <publisher> AAAI Press, </publisher> <address> Menlo Park, CA, </address> <year> 1996. </year>
Reference-contexts: A variety of other methods have been developed for generating graphical models, especially Bayesian Networks and Markov models, most of which are for acyclic graphs <ref> [4] </ref>. Business and medical applications dominate the applications of data mining methods to event sequence modeling. The Quest system at IBM has been used in business for attached mailing, add-on sales and customer satisfaction as well as medical diagnosis [2].
Reference: 5. <author> Horacio T. Cadiz. </author> <title> The development of a CHAID-based model for CHITRA93. </title> <institution> Computer science dept., Virginia Polytechnic Institute, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: Abrams et al. generate Semi-Markov models to debug interactions of distributed computational processes [1]. Their method constructs Semi-Markov models from the most strongly associated pairs of events in execution traces; CHAID analysis determines which are most strongly associated <ref> [5] </ref>. A variety of other methods have been developed for generating graphical models, especially Bayesian Networks and Markov models, most of which are for acyclic graphs [4]. Business and medical applications dominate the applications of data mining methods to event sequence modeling. <p> As to the other two, we are currently exploring principled methods of setting these. One option is to use CHAID based analysis to determine seq-length. CHAID constructs an n-step transition matrix, which indicates what earlier point in the event sequences was most predictive of the occurrence of each event <ref> [5] </ref>. Unfortunately, integrating CHAID based analysis requires significant modification to the underlying code to accommodate multiple dependency lengths simultaneously, and so is yet to be completed. The significance threshold (probability for the contingency table test) is the primary mechanism for adjusting the complexity of the daigram.
Reference: 6. <editor> Usama Fayyad, Gregory Piatetsky-Shapiro, and Padhraic Smyth. </editor> <title> From data min ing to knowledge discovery in databases. </title> <journal> AI Magazine, </journal> <volume> 17(3) </volume> <pages> 37-54, </pages> <month> Fall </month> <year> 1996. </year>
Reference-contexts: By modeling these sequences, we can predict likely future states and describe what led to the current state. For example, ecologists perform flora/fauna counts regularly within small areas to monitor ecosystems; credit card companies record and track customer transactions to detect fraud and identify opportunities for additional sales <ref> [6] </ref>. Discrete event sequences have been modeled with two types of representation: snapshots and overviews. Snapshot models describe the process as a collection of relatively short sequences or rules. These rules relate key events to each other.
Reference: 7. <author> Adele E. Howe. </author> <title> Detecting imperfect patterns in event streams using local search. </title> <editor> In D. Fisher and H. Lenz, editors, </editor> <booktitle> Learning from Data: Artificial Intelligence and Statistics V. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Due to the contingency table test, dependencies include both frequently and infrequently co-occurring sequences; we call the types positive and negative dependencies, respectively. DD has been extended to find more complex patterns <ref> [8, 7] </ref>. One version collects dependencies up to some length while pruning overlapping dependencies based on an analysis of which is the best descriptor. Another detects partial order sequences, which is robust to the introduction of intervening events.
Reference: 8. <author> Adele E. Howe and Paul R. Cohen. </author> <title> Detecting and explaining dependencies in execution traces. </title> <editor> In P. Cheeseman and R.W. Oldford, editors, </editor> <booktitle> Selecting Models from Data; Artificial Intelligence and Statistics IV, volume 89 of Lecture Notes in Statistics, chapter 8, </booktitle> <pages> pages 71-78. </pages> <publisher> Springer-Verlag, </publisher> <address> NY,NY, </address> <year> 1994. </year>
Reference-contexts: Snapshot DD methods discover unusually frequently or infrequently co-occurring sequences of events (called dependencies) using contingency table analysis <ref> [8] </ref> (see Section 2.1). Mannila et al. [12] find serial (i.e., a strict ordering of events, perhaps with intervening events) and parallel (i.e., events occurring within some time period of one another, the exact ordering is irrelevant) patterns of events that occur more than some number of times. <p> Due to the contingency table test, dependencies include both frequently and infrequently co-occurring sequences; we call the types positive and negative dependencies, respectively. DD has been extended to find more complex patterns <ref> [8, 7] </ref>. One version collects dependencies up to some length while pruning overlapping dependencies based on an analysis of which is the best descriptor. Another detects partial order sequences, which is robust to the introduction of intervening events.
Reference: 9. <author> Adele E. Howe and Paul R. Cohen. </author> <title> Understanding planner behavior. </title> <journal> Artificial Intelligence, </journal> <volume> 76(1-2):125-166, </volume> <year> 1995. </year>
Reference-contexts: Our method for generating snapshot models, called dependency detection (DD), has been used to support debugging failure recovery in the Phoenix planner <ref> [9] </ref> and to identify search control problems in UCPOP [16]. Snapshot DD methods discover unusually frequently or infrequently co-occurring sequences of events (called dependencies) using contingency table analysis [8] (see Section 2.1).
Reference: 10. <author> Adele E. Howe and Larry D. Pyeatt. </author> <title> Constructing transition models of AI plan ner behavior. </title> <booktitle> In Proceedings of the 11th Knowledge-Based Software Engineering Conference, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Based on this experience, we developed an overview modeling algorithm that constructs complete, Semi-Markov models of the event sequences <ref> [10] </ref>. Abrams et al. generate Semi-Markov models to debug interactions of distributed computational processes [1]. Their method constructs Semi-Markov models from the most strongly associated pairs of events in execution traces; CHAID analysis determines which are most strongly associated [5].
Reference: 11. <author> Eleftherios Koutsofios and Stephen C. </author> <title> North. Drawing graphs with dot. </title> <institution> AT&T Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: If the user wishes (by setting loose-ends? to true), these states can be added in as dangling states: states with outgoing, but not incoming links. We display the diagram using the Dot graphing package <ref> [11] </ref>.
Reference: 12. <author> Heikki Mannila, Hannu Toivonen, and A. Inkeri Verkamo. </author> <title> Discovering fre quent episodes in sequences. </title> <booktitle> In Proceedings of the International Conference on Knowledge Discovery in Databases and Data Mining (KDD-95), </booktitle> <address> Montreal, CA, </address> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: Snapshot DD methods discover unusually frequently or infrequently co-occurring sequences of events (called dependencies) using contingency table analysis [8] (see Section 2.1). Mannila et al. <ref> [12] </ref> find serial (i.e., a strict ordering of events, perhaps with intervening events) and parallel (i.e., events occurring within some time period of one another, the exact ordering is irrelevant) patterns of events that occur more than some number of times.
Reference: 13. <author> Tim Oates and Paul R. Cohen. </author> <title> Searching for planning operators with context dependenct and probabilistic effects. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <year> 1996. </year>
Reference-contexts: Overview models collect key relationships into a single structure, providing an integrated but abstract view. For example, finite state machines drive some language parsers, and Markov and Bayesian networks structure probabilistic dependencies [14]. Each representation has its purposes. Snapshots are convenient, easily exploited representations for rule-based systems (e.g., planning <ref> [13] </ref>) and are well-suited for short sequences over a large set of separate processes (the market ? This research was supported in part by by NSF Career Award IRI-9624058 and by DARPA-AFOSR contract F30602-93-C-0100 and F30602-95-0257. <p> Intelligent agents may use operators for deciding what action to take to achieve a desired state. Agents can learn these operators by modeling their perceptions of state changes in the environment using Multi-Stream Dependency Detection (MSDD) <ref> [13] </ref>. MSDD performs a simple best first search for dependencies, where the sequences are composed of a set of parallel event streams. 2 Building Transition Models of System Execution State transition models are built by iteratively combining frequently occurring sequences.
Reference: 14. <author> Judea Pearl. </author> <title> Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Palo Alto, CA, </address> <year> 1988. </year>
Reference-contexts: Overview models collect key relationships into a single structure, providing an integrated but abstract view. For example, finite state machines drive some language parsers, and Markov and Bayesian networks structure probabilistic dependencies <ref> [14] </ref>. Each representation has its purposes.
Reference: 15. <author> Larry D. Pyeatt, Adele E. Howe, and Charles W. Anderson. </author> <title> Learning coordinated behaviors for control of a simulated robot. </title> <type> Technical report, </type> <institution> Computer Science Dept, Colorado State University, </institution> <year> 1996. </year>
Reference-contexts: Debugging the RARS Controller The RARS (Robot Automobile Racing Simulator) controller must regulate the acceleration and steering of a race car on simulated tracks, which requires that it negotiate the track, avoid crashing into the walls, pass cars and go in for pit stops <ref> [15] </ref>. We would like to the controller to avoid failures: when the controller loses control of the car and runs off of the track (crashed event). For example, Figure 5 shows a fragment of a transition diagram 2 generated from event data from RARS.
Reference: 16. <author> Raghavan Srinivasan and Adele E. Howe. </author> <title> Comparison of methods for improving search efficiency in a partial-order planner. </title> <booktitle> In Proceedings of the 14th International Joint Conference on Artificial Intelligence, </booktitle> <address> Montreal, CA, </address> <month> August </month> <year> 1995. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: Our method for generating snapshot models, called dependency detection (DD), has been used to support debugging failure recovery in the Phoenix planner [9] and to identify search control problems in UCPOP <ref> [16] </ref>. Snapshot DD methods discover unusually frequently or infrequently co-occurring sequences of events (called dependencies) using contingency table analysis [8] (see Section 2.1).
References-found: 16

