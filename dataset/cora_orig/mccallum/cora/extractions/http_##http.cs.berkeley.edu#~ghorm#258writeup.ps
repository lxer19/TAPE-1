URL: http://http.cs.berkeley.edu/~ghorm/258writeup.ps
Refering-URL: http://http.cs.berkeley.edu/~ghorm/258project.html
Root-URL: 
Title: Distributing Kernel Data Structures in a NOW  
Author: Steve Rodrigues Douglas Ghormley 
Date: May 20, 1995  
Address: UC Berkeley  
Affiliation: Computer Science Division  
Abstract: The goal of this project is to discuss the problems found in distributing kernel data structures over a large-scale (1000-node) network of workstations, and to examine some approaches to solving this problem. We examine some of the characteristics, such as access patterns, of kernel data structures, and discuss the implications of these characteristics on the design of a distributed data structure. Finally, we present a number of techniques which can be used to implement these data structures. 
Abstract-found: 1
Intro-found: 1
Reference: [Arpaci et al. 1994] <author> Arpaci, R., Dusseau, A., Vahdat, A., Liu, L., Anderson, T., and Patterson, D. </author> <title> The Interaction of Parallel and Sequential Workload on a Network of Workstations. </title> <type> Technical Report CSD-94-838, </type> <institution> U.C. Berkeley, </institution> <month> October </month> <year> 1994. </year> <note> Also submitted for publication. </note>
Reference-contexts: Balancing the load across the NOW requires knowledge of the load currently placed upon other nodes in the system. To minimize the impact of a machine owner returning to the console, machine loads will likely be updated on the order of once every few seconds <ref> [Arpaci et al. 1994] </ref>. Note that 2 entries in the machine load table are only written by a single node, but are cached by potentially every other node in the system. Communication endpoints. Communication endpoints are created by a TAC daemon to serve a local process.
Reference: [Baker et al. 1991] <author> Baker, M., Hartman, J., Kupfer, M., Shirriff, K., and Ousterhout, J. </author> <title> Measurements of a Distributed File System. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 198-212, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: This can be alleviated by the use of delayed actions (see below). However, we expect these type of reallocations to be quite rare. 4.3 Delayed Actions Data in an operating system is more than simply non-persistent: it is extremely short lived. Both files <ref> [Baker et al. 1991] </ref> and processes [Harchol-Balter & Downey 1995] tend to be short-lived. The upshot of this is that migration loads can be substantially alleviated by simply waiting some predefined amount of time; the data is likely to be gone by the end of that period.
Reference: [Gray & Reuter 1993] <author> Gray, J. and Reuter, A. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Most systems can search the database on any of a number of fields, or keys, and do so quickly, using query optimization techniques. The use of transactions provides a number of nice properties to databases, called the ACID properties: Atomicity, Consistency, Isolation, and Durability <ref> [Gray & Reuter 1993] </ref>. The properties of atomicity, consistency, and isolation are desirable for kernel data structures as well, although, for reasons noted below, durability is not a primary concern. There are other differences between kernel data structures and a true database.
Reference: [Harchol-Balter & Downey 1995] <author> Harchol-Balter, M. and Downey, A. </author> <title> Exploiting Process Lifetime Distributions for Dynamic Load Balancing. </title> <type> Technical Report TR-95-021, </type> <institution> International Computer Science Institute, </institution> <month> May </month> <year> 1995. </year> <month> 6 </month>
Reference-contexts: This can be alleviated by the use of delayed actions (see below). However, we expect these type of reallocations to be quite rare. 4.3 Delayed Actions Data in an operating system is more than simply non-persistent: it is extremely short lived. Both files [Baker et al. 1991] and processes <ref> [Harchol-Balter & Downey 1995] </ref> tend to be short-lived. The upshot of this is that migration loads can be substantially alleviated by simply waiting some predefined amount of time; the data is likely to be gone by the end of that period.
References-found: 4

