URL: ftp://ftp.cs.washington.edu/pub/ai/tr96-01-09.ps.gz
Refering-URL: http://www.cs.washington.edu/homes/weld/pubs.html
Root-URL: 
Title: Planning with Execution and Incomplete Information  
Author: Keith Golden, Oren Etzioni and Daniel Weld 
Address: Seattle, WA 98195-2350  
Affiliation: Department of Computer Science and Engineering University of Washington Department of Computer Science and Engineering University of Washington  
Pubnum: Technical Report UW-CSE-96-01-09  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Allen. </author> <title> Planning as temporal reasoning. </title> <booktitle> In Proceedings of the Second International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 3-14, </pages> <year> 1991. </year>
Reference-contexts: By incorporating an explicit temporal annotation, one could define a more general notion of an information goal that demands the value of a particular fluent over some arbitrary interval. Such goals would fit nicely in the framework of the ilp <ref> [1] </ref> or zeno [39] planners, since they support temporally quantified goals. Unfortunately, at present these planners seem too inefficient for our needs. For tractability, xii's language does not contain complex temporal primitives, so our ability to specify temporal intervals is severely limited.
Reference: [2] <author> J Ambros-Ingerson and S. Steel. </author> <title> Integrating planning, execution, and monitoring. </title> <booktitle> In Proc. 7th Nat. Conf. on A.I., </booktitle> <pages> pages 735-740, </pages> <year> 1988. </year>
Reference-contexts: One might imagine buying out of the physical backtracking problem entirely, by simply re-planning from scratch whenever such backtracking would be required. This is the approach taken by ipem <ref> [2] </ref>. It has the advantage that backtracking is simpler, but the disadvantage of doing considerably more search. It is also vulnerable to the kind of looping described above, and the approach described above to prevent looping would be useless. <p> It builds on ucpop by dealing with information goals and effects, interleaving planning with execution, LCW, and substantial additions to the action language. The algorithm we used for interleaving planning with execution closely follows ipem <ref> [2] </ref>. xii differs from ipem in that xii can represent actions that combine sensing and action, and can represent information goals as distinct from satisfaction goals. ipem makes no such distinction, and thus cannot plan for "look but don't touch" information goals. occam [26], and sage [22] can both create plans
Reference: [3] <author> A. Barrett, K. Golden, J.S. Penberthy, and D. Weld. </author> <note> UCPOP user's manual, (version 2.0). Technical Report 93-09-06, </note> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> September </month> <year> 1993. </year> <note> Available via FTP from pub/ai/ at ftp.cs.washington.edu. </note>
Reference-contexts: For example, sensors in the Internet domain are relatively noise-free; thus, we do not concern ourselves with that issue. However, redundant sensing is an extremely important issue, and so we have developed a solution to this problem [13, 12]. xii is an extension of ucpop <ref> [38, 3] </ref>, a partial-order planner that handles universal quantification and conditional effects. In addition to the expressiveness of ucpop, xii supports the uwl [14] language for representing sensory actions and information goals. The combined action language, xiil, is described in Section 2.
Reference: [4] <author> R. Brost. </author> <title> Automatic grasp planning in the presence of uncertainty. </title> <journal> International Journal of Robotics Research, </journal> <volume> 7(1) </volume> <pages> 3-17, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Our approach sacrifices the elegance of a probabilistic framework for an implemented system capable of tackling practical problems. Robotics researchers have also addressed the problem of planning with actions whose effects are uncertain, exploring combinations of sensory actions and compliant motion to gain information <ref> [27, 11, 4, 8] </ref>.
Reference: [5] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Classical planners such as nonlin [45], tweak <ref> [5] </ref>, or ucpop [38, 47] presuppose correct and complete information about the world. Having complete information facilitates planning since the planning agent need not obtain information from the external world | all relevant information is present in the agent's world model (this is the infamous closed world assumption [42]). <p> 2 parent.directory (f, /bin)) find-out (readable (f ), F))) Note the difference between this information goal and the (corresponding) achievement goal of making all files in /bin read-protected: 8 (file (f ) 2 (parent.directory f /bin)) satisfy (readable (f ) F) Thanks to the formalization of the Modal Truth Criterion <ref> [5] </ref> and Causality Theorem [36], the semantics of satisfy goals are well understood. <p> First, the former can be satisfied by cause or observe effects while the latter are limited to observe effects. Second, find-out goals require that ' remain unchanged by every action, not just those after the establishing action <ref> [5] </ref>. When one specifies a find-out goal, a period of time elapses (during which the agent may plan and execute actions) before the agent returns the answer.
Reference: [6] <author> E. Davis. </author> <title> Representations of Commonsense Knowledge. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, CA, </address> <year> 1990. </year> <month> 28 </month>
Reference-contexts: Unfortunately, at present these planners seem too inefficient for our needs. For tractability, xii's language does not contain complex temporal primitives, so our ability to specify temporal intervals is severely limited. In addition, xiil does not allow one to pose some types of information goals <ref> [33, 6] </ref>. For example, one can not ask "Does paper.tex have a length?" In principle, one might express this goal as find-out (9 (number (l)) length paper.tex (l)), however this isn't legal xiil since satisfy and find-out annotations only apply to primitive (literal) goals (See Table 1).
Reference: [7] <author> T. Dean, L. P. Kaelbling, J. Kirman, and A. Nicholson. </author> <title> Planning under time constraints in stochastic domains. </title> <journal> Artificial Intelligence, </journal> <volume> 76, </volume> <year> 1995. </year>
Reference-contexts: While this strategy is appropriate for safety-critical domains with irreversible actions, the exponential increase in planning time is daunting. Some planners encode uncertainty in terms of conditional probabilities [25, 9], or Markov Decision Processes <ref> [23, 7] </ref>. Our approach sacrifices the elegance of a probabilistic framework for an implemented system capable of tackling practical problems. Robotics researchers have also addressed the problem of planning with actions whose effects are uncertain, exploring combinations of sensory actions and compliant motion to gain information [27, 11, 4, 8].
Reference: [8] <author> B. Donald. </author> <title> A geometric approach to error detection and recovery for robot motion planning with uncertainty. </title> <journal> Artificial Intelligence, </journal> <volume> 37 </volume> <pages> 223-271, </pages> <year> 1988 1988. </year>
Reference-contexts: Our approach sacrifices the elegance of a probabilistic framework for an implemented system capable of tackling practical problems. Robotics researchers have also addressed the problem of planning with actions whose effects are uncertain, exploring combinations of sensory actions and compliant motion to gain information <ref> [27, 11, 4, 8] </ref>.
Reference: [9] <author> D. Draper, S. Hanks, and D. Weld. </author> <title> Probabilistic planning with information gathering and contingent execution. </title> <booktitle> In Proc. 2nd Intl. Conf. on A.I. Planning Systems, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: While we adopted an approach that interleaves planning and execution [16, 35, 24], other researchers have investigated contingent or probabilistic planning. Contingent planners <ref> [46, 43, 19, 40, 9, 41] </ref> circumvent the need to interleave planning with execution by enumerating all possible courses of action and deferring execution until every possible contingency has been planned for. <p> While this strategy is appropriate for safety-critical domains with irreversible actions, the exponential increase in planning time is daunting. Some planners encode uncertainty in terms of conditional probabilities <ref> [25, 9] </ref>, or Markov Decision Processes [23, 7]. Our approach sacrifices the elegance of a probabilistic framework for an implemented system capable of tackling practical problems.
Reference: [10] <author> M. Drummond. </author> <title> A representation of action and belief for automatic planning systems. </title> <editor> In M. Georgeff and A. Lansky, editors, </editor> <booktitle> Reasoning about Actions and Plans. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1986. </year> <booktitle> Proceedings of the 1986 Timberline Workshop. </booktitle>
Reference-contexts: More broadly, our work is inspired by previous work which introduced and formalized the notion of knowledge preconditions for plans and informative actions <ref> [29, 32, 10, 33, 34] </ref>. While we adopted an approach that interleaves planning and execution [16, 35, 24], other researchers have investigated contingent or probabilistic planning.
Reference: [11] <author> M. Erdmann. </author> <title> On Motion Planning with Uncertainty. </title> <institution> AI-TR-810, MIT AI LAB, </institution> <month> August </month> <year> 1984. </year>
Reference-contexts: Our approach sacrifices the elegance of a probabilistic framework for an implemented system capable of tackling practical problems. Robotics researchers have also addressed the problem of planning with actions whose effects are uncertain, exploring combinations of sensory actions and compliant motion to gain information <ref> [27, 11, 4, 8] </ref>.
Reference: [12] <author> O. Etzioni, K. Golden, and D. Weld. </author> <title> Sound and efficient closed-world reasoning for planning. </title> <journal> Artificial Intelligence. </journal> <note> (To appear). </note>
Reference-contexts: For example, sensors in the Internet domain are relatively noise-free; thus, we do not concern ourselves with that issue. However, redundant sensing is an extremely important issue, and so we have developed a solution to this problem <ref> [13, 12] </ref>. xii is an extension of ucpop [38, 3], a partial-order planner that handles universal quantification and conditional effects. In addition to the expressiveness of ucpop, xii supports the uwl [14] language for representing sensory actions and information goals. The combined action language, xiil, is described in Section 2. <p> LCW goals can also be handled by two other techniques, known as Intersection Cover and Enumeration. These techniques correspond directly to the Conjunction and Composition rules described in <ref> [12] </ref>. Both techniques can be easily understood by thinking of LCW formulae in terms of sets. The conjunction of two LCW formulae, and can be thought of as representing knowledge about the intersection of the sets described by and .
Reference: [13] <author> O. Etzioni, K. Golden, and D. Weld. </author> <title> Tractable closed-world reasoning with updates. </title> <booktitle> In Proc. 4th Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 178-189, </pages> <address> San Francisco, CA, June 1994. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: For example, sensors in the Internet domain are relatively noise-free; thus, we do not concern ourselves with that issue. However, redundant sensing is an extremely important issue, and so we have developed a solution to this problem <ref> [13, 12] </ref>. xii is an extension of ucpop [38, 3], a partial-order planner that handles universal quantification and conditional effects. In addition to the expressiveness of ucpop, xii supports the uwl [14] language for representing sensory actions and information goals. The combined action language, xiil, is described in Section 2.
Reference: [14] <author> O. Etzioni, S. Hanks, D. Weld, D. Draper, N. Lesh, and M. Williamson. </author> <title> An Approach to Planning with Incomplete Information. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <address> San Francisco, CA, </address> <month> October </month> <year> 1992. </year> <note> Morgan Kaufmann. Available via FTP from pub/ai/ at ftp.cs.washington.edu. </note>
Reference-contexts: However, redundant sensing is an extremely important issue, and so we have developed a solution to this problem [13, 12]. xii is an extension of ucpop [38, 3], a partial-order planner that handles universal quantification and conditional effects. In addition to the expressiveness of ucpop, xii supports the uwl <ref> [14] </ref> language for representing sensory actions and information goals. The combined action language, xiil, is described in Section 2. Section 3 describes the partial-order planning algorithm used by xii, while Sections 3.3 and 3.4 detail our extensions relating to handling open goals and resolving threats. <p> It also explicitly represents information that is unknown at plan time but will be provided at run time by sensing actions (see Section 2.2). xiil melds elements of both adl [37] and uwl <ref> [14] </ref>. adl gives us logical expressiveness including universal quantification, conditional effects, disjunction and negation. uwl provides a means of representing information goals and information-gathering actions. <p> The xiil language is the synthesis and extension of uwl <ref> [14] </ref> and the subset of adl [36] supported by ucpop. Our research has its roots in the socrates planner. Like xii, socrates utilized the Softbot domain as its testbed, supported the uwl representation language and interleaved planning with execution. <p> Run-time variables may be bound or unbound prior to execution, but if a run-time variable is bound, and sensing reveals the correct value to be different than the expected value, then the plan will be rejected. This is a departure from <ref> [14] </ref>, where run-time variables are treated as constants, and cannot be bound prior to execution. Plan-time or run-time variables may appear in quantified expressions, and will be labeled as universally or existentially quantified. <p> Preconditions consist of alits and codesignation constraints, connected by conjunction, disjunction, and quantifiers. The alits may have annotations find-out or satisfy, introduced in section 2.3. There are other annotations, such as hands-off <ref> [14] </ref>, which means the truth value of the literal is not to be modified, and contemplate, which means only the agent's beliefs about the literal are to be queried.
Reference: [15] <author> O. Etzioni and D. Weld. </author> <title> A softbot-based interface to the internet. </title> <journal> CACM, </journal> <volume> 37(7) </volume> <pages> 72-76, </pages> <month> July </month> <year> 1994. </year> <note> See http://www.cs.washington.edu/research/softbots. </note>
Reference-contexts: However, in many cases, an agent does not have complete information about its world. For instance, a robot may not know the size of a bolt or the location of an essential tool [35]. Similarly, a software agent, such as the Internet Softbot <ref> [15] </ref> cannot be familiar with the contents of all the bulletin boards, FTP sites, and files accessible through the Internet. 1 An agent might have incomplete information about the world state, its own actions, or exogenous events (e.g., the actions of other agents).
Reference: [16] <author> R. Fikes and N. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2(3/4), </volume> <year> 1971. </year>
Reference-contexts: More broadly, our work is inspired by previous work which introduced and formalized the notion of knowledge preconditions for plans and informative actions [29, 32, 10, 33, 34]. While we adopted an approach that interleaves planning and execution <ref> [16, 35, 24] </ref>, other researchers have investigated contingent or probabilistic planning. Contingent planners [46, 43, 19, 40, 9, 41] circumvent the need to interleave planning with execution by enumerating all possible courses of action and deferring execution until every possible contingency has been planned for.
Reference: [17] <author> M. Genesereth and N. Nilsson. </author> <booktitle> Logical Foundations of Artificial Intelligence. </booktitle> <publisher> Morgan Kauf-mann Publishers, Inc., </publisher> <address> Los Altos, CA, </address> <year> 1987. </year>
Reference-contexts: current directory; supposing that d is bound to the current directory, then the effect can be encoded in xiil as: 8 (file (f) 2 parent.directory (f, d)) cause (readable (f)) The notation provides a convenient way to specify a universe of discourse (i.e., the set of objects being quantified over <ref> [17, p. 10] </ref>) based on the extension of a predicate in the world. For example, parent.directory (f, /bin) means the set of files actually in directory /bin. The universe of discourse may be specified by a conjunction of predicates, but disjunction is not allowed. <p> base of such a formula equals the conjunction 1 ^ : : : ^ n in which the i s correspond to each possible interpretation of (v) under the universe of discourse, fC 1 ; : : : ; C n g, i.e. the possible objects x satisfying q (x) <ref> [17, p. 10] </ref>. In each i , all references to v have been replaced with the constant C i .
Reference: [18] <editor> M. Ginsberg, editor. </editor> <booktitle> Readings in Nonmonotonic Reasoning. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1987. </year>
Reference: [19] <author> Leslie Pack Kaelbling. </author> <title> Goals as parallel program specifications. </title> <booktitle> In Proc. 7th Nat. Conf. on A.I. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: While we adopted an approach that interleaves planning and execution [16, 35, 24], other researchers have investigated contingent or probabilistic planning. Contingent planners <ref> [46, 43, 19, 40, 9, 41] </ref> circumvent the need to interleave planning with execution by enumerating all possible courses of action and deferring execution until every possible contingency has been planned for.
Reference: [20] <author> S. Kambhampati, C. Knoblock, and Q. Yang. </author> <title> Planning as refinement search: A unified framework for evaluating design tradeoffs in partial order planning. </title> <journal> Artificial Intelligence, </journal> <volume> 76 </volume> <pages> 167-238, </pages> <year> 1995. </year>
Reference-contexts: We instead take a more proactive approach, by adding new constraints to the plan whenever a causal link is potentially violated, to ensure that it is not violated. See <ref> [20] </ref> for an excellent discussion of the various tradeoffs involved. When the condition is potentially violated, but could be saved, this is referred to as a threat to the link, and the planner must take evasive action to avoid the threat.
Reference: [21] <author> S. Kambhampati and B. Srivastava. </author> <title> Universal classical planner: An algorithm for unifying state-space and plan-space planning. </title> <booktitle> In Proc. 2nd European Planning Workshop, </booktitle> <year> 1995. </year>
Reference-contexts: be running for ls to succeed, and a robot's arm must not be broken if it is to pick up a tool. 8 In 7 An alternative to this approach, which also preserves completeness, but at the expense of a large (in our case infinite) branching factor is discussed in <ref> [21] </ref>. 8 Modeling such preconditions is pointless, since they are outside the ability of the agent to either control or reliably detect. <p> Recent complaints about "Sensor abuse" [28, 30] suggest that the robotics community is aware of the high cost of sensing and is interested in techniques for eliminating redundant sensing. xii's search space can be understood in terms of Kambhampati's Universal Classical Planner (UCP) <ref> [21] </ref>, which unifies plan-space planning with forward-chaining and backward-chaining planning. When xii works on open conditions or threats, it is following a version of the Refine-plan-plan-space algorithm with bookkeeping constraints and conflict resolution.
Reference: [22] <author> C. Knoblock. </author> <title> Planning, executing, </title> <booktitle> sensing, and replanning for information gathering. In Proc. 15th Int. Joint Conf. on A.I., </booktitle> <pages> pages 1686-1693, </pages> <year> 1995. </year> <month> 29 </month>
Reference-contexts: Knowing that a action is executing is useful when executing multiple actions simultaneously, for example to handle resource conflicts <ref> [22] </ref>. <p> execution closely follows ipem [2]. xii differs from ipem in that xii can represent actions that combine sensing and action, and can represent information goals as distinct from satisfaction goals. ipem makes no such distinction, and thus cannot plan for "look but don't touch" information goals. occam [26], and sage <ref> [22] </ref> can both create plans to obtain new information, but unlike xii, they can do nothing else; both planners are specialized to the problem of information gathering or database retrieval. occam derives significant computational speedup and representational compression from the assumption that actions don't 22 change the world, and thus seems
Reference: [23] <author> S. Koenig. </author> <title> Optimal probabilistic and decision-theoretic planning using markovian decision theory. </title> <address> UCB/CSD 92/685, Berkeley, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: While this strategy is appropriate for safety-critical domains with irreversible actions, the exponential increase in planning time is daunting. Some planners encode uncertainty in terms of conditional probabilities [25, 9], or Markov Decision Processes <ref> [23, 7] </ref>. Our approach sacrifices the elegance of a probabilistic framework for an implemented system capable of tackling practical problems. Robotics researchers have also addressed the problem of planning with actions whose effects are uncertain, exploring combinations of sensory actions and compliant motion to gain information [27, 11, 4, 8].
Reference: [24] <author> K. Krebsbach, D. Olawsky, and M. Gini. </author> <title> An empirical study of sensing and defaulting in planning. </title> <booktitle> In Proc. 1st Intl. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 136-144, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: More broadly, our work is inspired by previous work which introduced and formalized the notion of knowledge preconditions for plans and informative actions [29, 32, 10, 33, 34]. While we adopted an approach that interleaves planning and execution <ref> [16, 35, 24] </ref>, other researchers have investigated contingent or probabilistic planning. Contingent planners [46, 43, 19, 40, 9, 41] circumvent the need to interleave planning with execution by enumerating all possible courses of action and deferring execution until every possible contingency has been planned for.
Reference: [25] <author> N. Kushmerick, S. Hanks, and D. Weld. </author> <title> An Algorithm for Probabilistic Planning. </title> <journal> Artificial Intelligence, </journal> <volume> 76 </volume> <pages> 239-286, </pages> <year> 1995. </year>
Reference-contexts: While this strategy is appropriate for safety-critical domains with irreversible actions, the exponential increase in planning time is daunting. Some planners encode uncertainty in terms of conditional probabilities <ref> [25, 9] </ref>, or Markov Decision Processes [23, 7]. Our approach sacrifices the elegance of a probabilistic framework for an implemented system capable of tackling practical problems.
Reference: [26] <author> C. Kwok and D. Weld. </author> <title> Planning to gather information. </title> <type> Technical Report 96-01-04, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> January </month> <year> 1996. </year> <note> Available via FTP from pub/ai/ at ftp.cs.washington.edu. </note>
Reference-contexts: interleaving planning with execution closely follows ipem [2]. xii differs from ipem in that xii can represent actions that combine sensing and action, and can represent information goals as distinct from satisfaction goals. ipem makes no such distinction, and thus cannot plan for "look but don't touch" information goals. occam <ref> [26] </ref>, and sage [22] can both create plans to obtain new information, but unlike xii, they can do nothing else; both planners are specialized to the problem of information gathering or database retrieval. occam derives significant computational speedup and representational compression from the assumption that actions don't 22 change the world,
Reference: [27] <author> T. Lozano-Perez, M. Mason, and R. Taylor. </author> <title> Automatic synthesis of fine motion strategies for robots. </title> <journal> International Journal of Robotics Research, </journal> <volume> 3(1) </volume> <pages> 3-24, </pages> <month> Spring </month> <year> 1984. </year>
Reference-contexts: Our approach sacrifices the elegance of a probabilistic framework for an implemented system capable of tackling practical problems. Robotics researchers have also addressed the problem of planning with actions whose effects are uncertain, exploring combinations of sensory actions and compliant motion to gain information <ref> [27, 11, 4, 8] </ref>.
Reference: [28] <author> M. Mason. </author> <title> Kicking the sensing habit. </title> <journal> AI Magazine, </journal> <volume> 14(1) </volume> <pages> 58-59, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: Robotics researchers have also addressed the problem of planning with actions whose effects are uncertain, exploring combinations of sensory actions and compliant motion to gain information [27, 11, 4, 8]. Recent complaints about "Sensor abuse" <ref> [28, 30] </ref> suggest that the robotics community is aware of the high cost of sensing and is interested in techniques for eliminating redundant sensing. xii's search space can be understood in terms of Kambhampati's Universal Classical Planner (UCP) [21], which unifies plan-space planning with forward-chaining and backward-chaining planning.
Reference: [29] <author> J. McCarthy and P. J. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <booktitle> In Machine Intelligence 4, </booktitle> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year>
Reference-contexts: More broadly, our work is inspired by previous work which introduced and formalized the notion of knowledge preconditions for plans and informative actions <ref> [29, 32, 10, 33, 34] </ref>. While we adopted an approach that interleaves planning and execution [16, 35, 24], other researchers have investigated contingent or probabilistic planning.
Reference: [30] <author> D. Miller. </author> <title> A twelve-step program to more efficient robotics. </title> <journal> AI Magazine, </journal> <volume> 14(1) </volume> <pages> 60-63, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: Robotics researchers have also addressed the problem of planning with actions whose effects are uncertain, exploring combinations of sensory actions and compliant motion to gain information [27, 11, 4, 8]. Recent complaints about "Sensor abuse" <ref> [28, 30] </ref> suggest that the robotics community is aware of the high cost of sensing and is interested in techniques for eliminating redundant sensing. xii's search space can be understood in terms of Kambhampati's Universal Classical Planner (UCP) [21], which unifies plan-space planning with forward-chaining and backward-chaining planning.
Reference: [31] <author> Steven Minton, Jaime G. Carbonell, Craig A. Knoblock, Daniel R. Kuokka, Oren Etzioni, and Yolanda Gil. </author> <title> Explanation-based learning: A problem-solving perspective. </title> <journal> Artificial Intelligence, </journal> <volume> 40 </volume> <pages> 63-118, </pages> <year> 1989. </year> <note> Available as technical report CMU-CS-89-103. </note>
Reference-contexts: Classical planners such as prodigy <ref> [31] </ref> or ucpop [38] reduce a universally quantified goal to the set of ground instances of the goal, and satisfy each instance in turn.
Reference: [32] <author> R. Moore. </author> <title> A Formal Theory of Knowledge and Action. </title> <editor> In J. Hobbs and R. Moore, editors, </editor> <title> Formal Theories of the Commonsense World. </title> <publisher> Ablex, </publisher> <address> Norwood, NJ, </address> <year> 1985. </year>
Reference-contexts: More broadly, our work is inspired by previous work which introduced and formalized the notion of knowledge preconditions for plans and informative actions <ref> [29, 32, 10, 33, 34] </ref>. While we adopted an approach that interleaves planning and execution [16, 35, 24], other researchers have investigated contingent or probabilistic planning.
Reference: [33] <author> Leora Morgenstern. </author> <title> Knowledge preconditions for actions and plans. </title> <booktitle> In Proceedings of IJCAI-87, </booktitle> <pages> pages 867-874, </pages> <year> 1987. </year>
Reference-contexts: Unfortunately, at present these planners seem too inefficient for our needs. For tractability, xii's language does not contain complex temporal primitives, so our ability to specify temporal intervals is severely limited. In addition, xiil does not allow one to pose some types of information goals <ref> [33, 6] </ref>. For example, one can not ask "Does paper.tex have a length?" In principle, one might express this goal as find-out (9 (number (l)) length paper.tex (l)), however this isn't legal xiil since satisfy and find-out annotations only apply to primitive (literal) goals (See Table 1). <p> More broadly, our work is inspired by previous work which introduced and formalized the notion of knowledge preconditions for plans and informative actions <ref> [29, 32, 10, 33, 34] </ref>. While we adopted an approach that interleaves planning and execution [16, 35, 24], other researchers have investigated contingent or probabilistic planning.
Reference: [34] <author> Leora Morgenstern. </author> <title> Foundations of a Logic of Knowledge, Action, and Communication. </title> <type> PhD thesis, </type> <address> New York University, </address> <year> 1988. </year>
Reference-contexts: More broadly, our work is inspired by previous work which introduced and formalized the notion of knowledge preconditions for plans and informative actions <ref> [29, 32, 10, 33, 34] </ref>. While we adopted an approach that interleaves planning and execution [16, 35, 24], other researchers have investigated contingent or probabilistic planning.
Reference: [35] <author> D. Olawsky and M. Gini. </author> <title> Deferred planning and sensor use. In Proceedings, DARPA Workshop on Innovative Approaches to Planning, Scheduling, and Control. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: However, in many cases, an agent does not have complete information about its world. For instance, a robot may not know the size of a bolt or the location of an essential tool <ref> [35] </ref>. <p> More broadly, our work is inspired by previous work which introduced and formalized the notion of knowledge preconditions for plans and informative actions [29, 32, 10, 33, 34]. While we adopted an approach that interleaves planning and execution <ref> [16, 35, 24] </ref>, other researchers have investigated contingent or probabilistic planning. Contingent planners [46, 43, 19, 40, 9, 41] circumvent the need to interleave planning with execution by enumerating all possible courses of action and deferring execution until every possible contingency has been planned for. <p> An approach to planning similar in spirit to xii's use of LCW is to count the number of relevant ground propositions in the model, before inserting information-gathering actions into the plan, to check whether the desired information is already known <ref> [44, 35] </ref>. However, this heuristic is only effective when the number of sought-after facts is known in advance.
Reference: [36] <author> E. Pednault. </author> <title> Toward a Mathematical Theory of Plan Synthesis. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> December </month> <year> 1986. </year>
Reference-contexts: find-out (readable (f ), F))) Note the difference between this information goal and the (corresponding) achievement goal of making all files in /bin read-protected: 8 (file (f ) 2 (parent.directory f /bin)) satisfy (readable (f ) F) Thanks to the formalization of the Modal Truth Criterion [5] and Causality Theorem <ref> [36] </ref>, the semantics of satisfy goals are well understood. <p> The semantics of complex goal satisfaction is defined in terms of the primitives in the same manner as for adl <ref> [36] </ref>. 3 Planning in the Face of Incomplete Information We have described the legal goals and action schemata of xiil, but we have not yet discussed how to generate plans for this language or how to relax the assumptions made by classical planners. <p> The xiil language is the synthesis and extension of uwl [14] and the subset of adl <ref> [36] </ref> supported by ucpop. Our research has its roots in the socrates planner. Like xii, socrates utilized the Softbot domain as its testbed, supported the uwl representation language and interleaved planning with execution.
Reference: [37] <author> E. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <booktitle> In Proc. 1st Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 324-332, </pages> <year> 1989. </year>
Reference-contexts: It also explicitly represents information that is unknown at plan time but will be provided at run time by sensing actions (see Section 2.2). xiil melds elements of both adl <ref> [37] </ref> and uwl [14]. adl gives us logical expressiveness including universal quantification, conditional effects, disjunction and negation. uwl provides a means of representing information goals and information-gathering actions.
Reference: [38] <author> J.S. Penberthy and D. Weld. UCPOP: </author> <title> A sound, complete, partial order planner for ADL. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 103-114, </pages> <month> October </month> <year> 1992. </year> <note> Available via FTP from pub/ai/ at ftp.cs.washington.edu. 30 </note>
Reference-contexts: 1 Introduction Classical planners such as nonlin [45], tweak [5], or ucpop <ref> [38, 47] </ref> presuppose correct and complete information about the world. Having complete information facilitates planning since the planning agent need not obtain information from the external world | all relevant information is present in the agent's world model (this is the infamous closed world assumption [42]). <p> Classical planners such as prodigy [31] or ucpop <ref> [38] </ref> reduce a universally quantified goal to the set of ground instances of the goal, and satisfy each instance in turn. <p> For example, sensors in the Internet domain are relatively noise-free; thus, we do not concern ourselves with that issue. However, redundant sensing is an extremely important issue, and so we have developed a solution to this problem [13, 12]. xii is an extension of ucpop <ref> [38, 3] </ref>, a partial-order planner that handles universal quantification and conditional effects. In addition to the expressiveness of ucpop, xii supports the uwl [14] language for representing sensory actions and information goals. The combined action language, xiil, is described in Section 2. <p> The three standard threat avoidance mechanisms are promotion, demotion, and confrontation. Promotion and demotion order the threatening action before the link's producer or after its consumer, respectively. Confrontation works when the threatening effect is conditional; the link is protected by subgoaling on the negation of the threat's antecedent <ref> [38] </ref>. For ordinary causal links, xii uses these standard techniques for handles dynamic universes, using the approach of [47]. Furthermore, xii's policy of linking to 8 effects handles infinite universes, but this is not of practical import. 15 resolving threats. <p> which provides a way of describing incomplete knowledge, sensory actions and information goals, and the xii algorithm, which supports the xiil language and LCW knowledge, interleaves planning with execution, and solves universally quantified goals in the presence of incomplete information. 5.2 Related Work xii is based on the ucpop algorithm <ref> [38] </ref>. It builds on ucpop by dealing with information goals and effects, interleaving planning with execution, LCW, and substantial additions to the action language.
Reference: [39] <author> J.S. Penberthy and D. Weld. </author> <title> Temporal planning with continuous change. </title> <booktitle> In Proc. 12th Nat. Conf. on A.I., </booktitle> <month> July </month> <year> 1994. </year>
Reference-contexts: By incorporating an explicit temporal annotation, one could define a more general notion of an information goal that demands the value of a particular fluent over some arbitrary interval. Such goals would fit nicely in the framework of the ilp [1] or zeno <ref> [39] </ref> planners, since they support temporally quantified goals. Unfortunately, at present these planners seem too inefficient for our needs. For tractability, xii's language does not contain complex temporal primitives, so our ability to specify temporal intervals is severely limited.
Reference: [40] <author> M. Peot and D. Smith. </author> <title> Conditional Nonlinear Planning. </title> <booktitle> In Proc. 1st Intl. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 189-197, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: While we adopted an approach that interleaves planning and execution [16, 35, 24], other researchers have investigated contingent or probabilistic planning. Contingent planners <ref> [46, 43, 19, 40, 9, 41] </ref> circumvent the need to interleave planning with execution by enumerating all possible courses of action and deferring execution until every possible contingency has been planned for.
Reference: [41] <author> L. Pryor and G. Collins. CASSANDRA: </author> <title> Planning for contingencies. </title> <type> Technical Report 41, </type> <institution> Northwestern University, The Institute for the Learning Sciences, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: While we adopted an approach that interleaves planning and execution [16, 35, 24], other researchers have investigated contingent or probabilistic planning. Contingent planners <ref> [46, 43, 19, 40, 9, 41] </ref> circumvent the need to interleave planning with execution by enumerating all possible courses of action and deferring execution until every possible contingency has been planned for.
Reference: [42] <author> R. Reiter. </author> <title> On closed world databases. </title> <editor> In H. Gallaire and J. Minker, editors, </editor> <booktitle> Logic and Data Bases, </booktitle> <pages> pages 55-76. </pages> <publisher> Plenum Press, </publisher> <year> 1978. </year> <note> Reprinted in [18]. </note>
Reference-contexts: Having complete information facilitates planning since the planning agent need not obtain information from the external world | all relevant information is present in the agent's world model (this is the infamous closed world assumption <ref> [42] </ref>). However, in many cases, an agent does not have complete information about its world. For instance, a robot may not know the size of a bolt or the location of an essential tool [35].
Reference: [43] <author> M. Schoppers. </author> <title> Universal plans for reactive robots in unpredictable environments. </title> <booktitle> In Proceedings of IJCAI-87, </booktitle> <pages> pages 1039-1046, </pages> <month> August </month> <year> 1987. </year>
Reference-contexts: While we adopted an approach that interleaves planning and execution [16, 35, 24], other researchers have investigated contingent or probabilistic planning. Contingent planners <ref> [46, 43, 19, 40, 9, 41] </ref> circumvent the need to interleave planning with execution by enumerating all possible courses of action and deferring execution until every possible contingency has been planned for.
Reference: [44] <author> D. Smith. </author> <title> Finding all of the solutions to a problem. </title> <booktitle> In Proc. 3rd Nat. Conf. on A.I., </booktitle> <pages> pages 373-377, </pages> <year> 1983. </year>
Reference-contexts: An approach to planning similar in spirit to xii's use of LCW is to count the number of relevant ground propositions in the model, before inserting information-gathering actions into the plan, to check whether the desired information is already known <ref> [44, 35] </ref>. However, this heuristic is only effective when the number of sought-after facts is known in advance.
Reference: [45] <author> A. Tate. </author> <title> Generating project networks. </title> <booktitle> In Proc. 5th Int. Joint Conf. on A.I., </booktitle> <pages> pages 888-893, </pages> <year> 1977. </year>
Reference-contexts: 1 Introduction Classical planners such as nonlin <ref> [45] </ref>, tweak [5], or ucpop [38, 47] presuppose correct and complete information about the world. <p> plan consists of a tuple hA; O; B; L; E i, where A is of a set of actions, O is a partial temporal ordering relation over the actions, B is an equivalence relation over 10 the variables and constants in the plan, L is a set of causal links <ref> [45] </ref> and E is a function mapping each action to its execution status. * O consists of two ordering relations: The intransitive successor relation j and the transitive closure of j, .
Reference: [46] <author> D. Warren. </author> <title> Generating Conditional Plans and Programs. </title> <booktitle> In Proceedings of AISB Summer Conference, </booktitle> <pages> pages 344-354, </pages> <institution> University of Edinburgh, </institution> <year> 1976. </year>
Reference-contexts: While we adopted an approach that interleaves planning and execution [16, 35, 24], other researchers have investigated contingent or probabilistic planning. Contingent planners <ref> [46, 43, 19, 40, 9, 41] </ref> circumvent the need to interleave planning with execution by enumerating all possible courses of action and deferring execution until every possible contingency has been planned for.
Reference: [47] <author> D. Weld. </author> <title> An introduction to least-commitment planning. </title> <journal> AI Magazine, </journal> <pages> pages 27-61, </pages> <month> Winter </month> <year> 1994. </year> <note> Available via FTP from pub/ai/ at ftp.cs.washington.edu. 31 </note>
Reference-contexts: 1 Introduction Classical planners such as nonlin [45], tweak [5], or ucpop <ref> [38, 47] </ref> presuppose correct and complete information about the world. Having complete information facilitates planning since the planning agent need not obtain information from the external world | all relevant information is present in the agent's world model (this is the infamous closed world assumption [42]). <p> Note that nested universal and existential quantification is allowed (with some restrictions) in both the effects and preconditions of schemata and in goals. Conditional effects and disjunctive goals are also supported, since algorithms for planning with these constructs have become well understood <ref> [47] </ref>. 2.1 Local Closed World Information Our agent's model of the world is represented as a set of ground literals stored in a database D M . <p> Like all classical planners, ucpop builds plans in isolation, relying on the CWA to circumvent the problem of sensing. To address these inadequacies in the planning algorithm, we extended it to cope with incomplete information, use LCW knowledge, and interleave planning with execution. As described in <ref> [47] </ref>, a classical planner takes as input a description of the world w, a description of a goal G, and a theory of action D, and produces as output a sequence of actions which, when executed in order from state w, brings the world into some state satisfying G. <p> Traditionally, planners that have dealt with goals of the form "Forall v such that q (v) make (v) true" have done so by expanding the goal into a universally-ground, conjunctive goal called the universal base <ref> [47] </ref>. <p> Confrontation works when the threatening effect is conditional; the link is protected by subgoaling on the negation of the threat's antecedent [38]. For ordinary causal links, xii uses these standard techniques for handles dynamic universes, using the approach of <ref> [47] </ref>. Furthermore, xii's policy of linking to 8 effects handles infinite universes, but this is not of practical import. 15 resolving threats.
References-found: 47

