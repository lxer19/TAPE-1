URL: ftp://ftp.cs.umass.edu/pub/lesser/garvey-dtt-smc.ps
Refering-URL: http://dis.cs.umass.edu/~garvey/publications.html
Root-URL: 
Email: CSNET: GARVEY@CS.UMASS.EDU  
Title: Design-to-time Real-Time Scheduling  
Author: Alan Garvey Victor Lesser 
Date: April 14, 1994  
Address: Amherst, Massachusetts 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: Design-to-time is an approach to problem-solving in resource-constrained domains where: multiple solution methods are available for tasks, those solution methods make tradeoffs in solution quality versus time, and satisficing solutions are acceptable. Design-to-time involves designing a solution to a problem that uses all available resources to maximize the solution quality within the available time. This paper defines the design-to-time approach in detail, contrasting it to the anytime algorithm approach, and presents a heuristic algorithm for design-to-time real-time scheduling. Our blackboard architecture that implements the design-to-time approach is discussed and an example problem and solution from the Distributed Vehicle Monitoring Testbed (DVMT) is described in detail. Experimental results, generated using a simulation, show the effects of various parameters on scheduler performance. Finally we discuss future research goals and plans. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. R. Lesser, J. Pavlin, and E. Durfee, </author> <title> Approximate processing in real-time problem solving, </title> <journal> AI Magazine, </journal> <volume> vol. 9, </volume> <pages> pp. 49-61, </pages> <month> Spring </month> <year> 1988. </year>
Reference-contexts: 1 Introduction to Design-to-time Design-to-time (a generalization of what we have previously called approximate processing <ref> [1] </ref>) is an approach to solving problems in domains where * there is not necessarily enough time available for all processing, * there are soft and hard real-time deadlines, * multiple solution methods (which make tradeoffs in solution quality and timeli ness) are available for tasks, * solutions not completely satisfying <p> Approximations reduce problem-solving time at the expense of a degradation in other aspects of solution quality <ref> [1, 10] </ref>. Approximate processing is a useful reconfiguration method when the effects on solution quality are within the bounds allowed by the goal associated with the task. <p> With minimal overhead, the problem solver should dynamically respond to the current situation by altering its operators and state space abstraction to produce a range of acceptable answers <ref> [10, 1] </ref>.
Reference: [2] <author> B. D'Ambrosio, </author> <title> Resource bounded-agents in an uncertain world, </title> <booktitle> in Proceedings of the Workshop on Real-Time Artificial Intelligence Problems, (IJCAI-89, </booktitle> <address> Detroit), </address> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: The methodology is known as design-to-time because it advocates the use of all available time to generate the best solutions possible. It is a problem-solving method of the type described by D'Ambrosio <ref> [2] </ref> as those which given a time bound, dynamically construct and execute a problem solving procedure which will (probably) produce a reasonable answer within (approximately) the time available. 1 This form of problem-solving is related to (but distinct from) the use of anytime algorithms [4, 5, 6].
Reference: [3] <author> P. P. Bonissone and P. C. Halverson, </author> <title> Time-constrained reasoning under uncertainty, </title> <journal> The Journal of Real-Time Systems, </journal> <volume> vol. 2, no. 1/2, </volume> <pages> pp. 25-45, </pages> <year> 1990. </year>
Reference-contexts: Contract anytime algorithms can generate a solution method of any duration; that duration just has to be specified before task execution begins. Figure 1 is a graph showing 1 It appears that Bonissone and Halverson <ref> [3] </ref> were the first to use the term design-to-time to refer to systems of the form described by D'Ambrosio. 1 what an example of the difference in solution quality versus time tradeoffs in design--to-time and anytime algorithms might look like.
Reference: [4] <author> M. Boddy and T. Dean, </author> <title> Solving time-dependent planning problems, </title> <booktitle> in Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <address> (De-troit, MI), </address> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: of the type described by D'Ambrosio [2] as those which given a time bound, dynamically construct and execute a problem solving procedure which will (probably) produce a reasonable answer within (approximately) the time available. 1 This form of problem-solving is related to (but distinct from) the use of anytime algorithms <ref> [4, 5, 6] </ref>. Anytime algorithms as described by Dean and Boddy are interruptible procedures that always have a result available and that are expected to produce better results as they are given additional time.
Reference: [5] <author> T. Dean and M. Boddy, </author> <title> An analysis of time-dependent planning, </title> <booktitle> in Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <address> (St. Paul, </address> <publisher> Minnesota), </publisher> <pages> pp. 49-54, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: of the type described by D'Ambrosio [2] as those which given a time bound, dynamically construct and execute a problem solving procedure which will (probably) produce a reasonable answer within (approximately) the time available. 1 This form of problem-solving is related to (but distinct from) the use of anytime algorithms <ref> [4, 5, 6] </ref>. Anytime algorithms as described by Dean and Boddy are interruptible procedures that always have a result available and that are expected to produce better results as they are given additional time.
Reference: [6] <author> S. J. Russell and S. Zilberstein, </author> <title> Composing real-time systems, </title> <booktitle> in Proceedings of the Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <address> (Sydney, Australia), </address> <pages> pp. 212-217, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: of the type described by D'Ambrosio [2] as those which given a time bound, dynamically construct and execute a problem solving procedure which will (probably) produce a reasonable answer within (approximately) the time available. 1 This form of problem-solving is related to (but distinct from) the use of anytime algorithms <ref> [4, 5, 6] </ref>. Anytime algorithms as described by Dean and Boddy are interruptible procedures that always have a result available and that are expected to produce better results as they are given additional time.
Reference: [7] <author> J. W. S. Liu, K. J. Lin, W. K. Shih, A. C. Yu, J. Y. Chung, and W. Zhao, </author> <title> Algorithms for scheduling imprecise computations, </title> <journal> IEEE Computer, </journal> <volume> vol. 24, </volume> <pages> pp. 58-68, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Other research that addresses real-time scheduling concerns by providing multiple solution methods includes the work on imprecise computation <ref> [7] </ref>, the GARTL real-time programming language [8], and the Flex language [9]. In this paper we investigate the implications of design-to-time on the real-time scheduling and controlling of task execution for tasks with soft and hard deadlines 2 .
Reference: [8] <author> C. Marlin, W. Zhao, G. Doherty, and A. Bohonis, GARTL: </author> <title> A real-time programming language based on multi-version computation, </title> <booktitle> in Proceedings of the International Conference on Computer Languages, </booktitle> <address> (New Orleans, LA), </address> <pages> pp. 107-115, </pages> <month> Mar. </month> <year> 1990. </year>
Reference-contexts: Other research that addresses real-time scheduling concerns by providing multiple solution methods includes the work on imprecise computation [7], the GARTL real-time programming language <ref> [8] </ref>, and the Flex language [9]. In this paper we investigate the implications of design-to-time on the real-time scheduling and controlling of task execution for tasks with soft and hard deadlines 2 .
Reference: [9] <author> K. B. Kenny and K.-J. Lin, </author> <title> Building flexible real-time systems using the Flex language, </title> <journal> IEEE Computer, </journal> <volume> vol. 24, </volume> <pages> pp. 70-78, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Other research that addresses real-time scheduling concerns by providing multiple solution methods includes the work on imprecise computation [7], the GARTL real-time programming language [8], and the Flex language <ref> [9] </ref>. In this paper we investigate the implications of design-to-time on the real-time scheduling and controlling of task execution for tasks with soft and hard deadlines 2 .
Reference: [10] <author> K. S. Decker, V. R. Lesser, and R. C. Whitehair, </author> <title> Extending a blackboard architecture for approximate processing, </title> <journal> The Journal of Real-Time Systems, </journal> <volume> vol. 2, no. 1/2, </volume> <pages> pp. 47-79, </pages> <year> 1990. </year>
Reference-contexts: Feedback from the execution subsystem to the controller allows the rescheduling of tasks when necessary because of inaccurate predictions or unexpected events. A high-level picture of this architecture is shown in Figure 2. 2 In previous work <ref> [10, 11] </ref> we examined the effects of the design-to-time approach on other aspects of a problem-solving architecture. 2 3 The controller makes decisions about resource allocation for the current time and for discrete times in the future. <p> Approximations reduce problem-solving time at the expense of a degradation in other aspects of solution quality <ref> [1, 10] </ref>. Approximate processing is a useful reconfiguration method when the effects on solution quality are within the bounds allowed by the goal associated with the task. <p> With minimal overhead, the problem solver should dynamically respond to the current situation by altering its operators and state space abstraction to produce a range of acceptable answers <ref> [10, 1] </ref>. <p> but two illustrativeexamples of what such a layout looks like. 6 We have found that predictability can be increased, at least for situation assessment problems, when the character of the search space or the way it is searched is changed as a result of lowering the criteria for solution acceptability <ref> [10] </ref>. 6 Steps in design-to-time scheduling. In this example, Tasks A, B, and C each have a deadline at the time indicated by the double line labelled Deadline. <p> To solve a problem, the system must choose from among several different general strategies and fine tune them, including the choice of different strategies for different kinds of data and different strategies at different stages of processing. Also available in the DVMT are approximations for various problem-solving tasks <ref> [10] </ref>. Data from the sensors arrives periodically, and the time between two data arrivals is known as a sensor cycle. dots along the lines represent the location of the object at the sensor time given by the adjoining number.
Reference: [11] <author> K. S. Decker, A. J. Garvey, M. A. Humphrey, and V. R. Lesser, </author> <title> Control heuristics for scheduling in a parallel blackboard system, </title> <journal> International Journal of Pattern Recognition and Artificial Intelligence, </journal> <volume> vol. 7, no. 2, </volume> <pages> pp. 243-264, </pages> <year> 1993. </year>
Reference-contexts: Feedback from the execution subsystem to the controller allows the rescheduling of tasks when necessary because of inaccurate predictions or unexpected events. A high-level picture of this architecture is shown in Figure 2. 2 In previous work <ref> [10, 11] </ref> we examined the effects of the design-to-time approach on other aspects of a problem-solving architecture. 2 3 The controller makes decisions about resource allocation for the current time and for discrete times in the future.
Reference: [12] <author> R. Graham, E. L. Lawler, J. K. Lenstra, and A. H. G. R. Kan, </author> <title> Optimization and approximation in deterministic sequencing and scheduling: A survey, in Discrete Optimization II (P. </title> <editor> L. Hammer, E. L. Johnson, and B. H. Korte, eds.), </editor> <publisher> North-Holland Publishing Company, </publisher> <year> 1979. </year>
Reference-contexts: This problem is analogous to the basic scheduling problem of scheduling a set of tasks with different start times, end times and deadlines, which is known to be NP-Complete <ref> [12] </ref>. Because of this our design-to-time scheduling algorithm does heuristic scheduling, potentially using both application-specific and general control heuristics.
Reference: [13] <author> P. P. Bonissone, S. S. Gans, and K. S. Decker, RUM: </author> <title> A layered architecture for reasoning with uncertainty, </title> <booktitle> in Proceedings of the Tenth International Joint Conference on Artificial Intelligence, </booktitle> <month> Aug. </month> <year> 1987. </year> <month> 26 </month>
Reference-contexts: A liberal approach could calculate the best possible change. Another approach could use some kind of average, such as the centers of each range. Different approaches are needed for different parts of the problem and at different times <ref> [13] </ref>. In fact, variability in solution methods can lead to a need for careful monitoring of tasks. Every task should have a fall back method that produces a minimal quality result in a predictable amount of time 6 .
Reference: [14] <author> K. S. Decker, A. J. Garvey, M. A. Humphrey, and V. R. Lesser, </author> <title> A real-time con-trol architecture for an approximate processing blackboard system, </title> <journal> International Journal of Pattern Recognition and Artificial Intelligence, </journal> <volume> vol. 7, no. 2, </volume> <pages> pp. 265-284, </pages> <year> 1993. </year>
Reference-contexts: This architecture (especially details about the execution subsystem) is described in more detail in <ref> [14] </ref>. 3.1 The Controller A design-to-time problem-solver has a system goal, which is the high-level goal that the system is working to achieve. Dynamically, at runtime, a plan/goal hierarchy is constructed as shown in Figure 4. <p> Low-level control of each channel is provided by a parameterized, low-level control loop that is described in detail in <ref> [14] </ref>. control goals and the ellipses represent strategies and foci. A dashed line rectangle represents a future control goal. Channels are created and modified by the controller in response to dynamically created control goals. Channels are modified to use various approximations by the controller as required to meet timing constraints. <p> In the example below, if the processing of the data for any task takes longer than estimated, the execution subsystem signals the controller, which recalculates its resource allocations to take this into account. A more detailed description of the execution subsystem is available in Decker et al <ref> [14] </ref>. 9 4 An Example of Design-to-time Problem-Solving This section first describes our application environment, then shows how the system works when enough resources are available for all processing, and finally illustrates how problem solving changes when resources become more scarce. 4.1 The Distributed Vehicle Monitoring Testbed The Distributed Vehicle Monitoring
Reference: [15] <author> B. Hayes-Roth, </author> <title> A blackboard architecture for control, </title> <journal> Artificial Intelligence, </journal> <volume> vol. 26, </volume> <pages> pp. 251-321, </pages> <year> 1985. </year>
Reference-contexts: Dynamically, at runtime, a plan/goal hierarchy is constructed as shown in Figure 4. This hierarchy consists of control goals, which describe subproblems that need to be solved; and a BB1-style control plan <ref> [15] </ref>, which embodies the plan the agent intends to use to meet the control goals. At the lowest level of the control plan are foci which control specific execution channels.
Reference: [16] <author> V. R. Lesser and D. D. Corkill, </author> <title> The distributed vehicle monitoring testbed, </title> <journal> AI Magazine, </journal> <volume> vol. 4, </volume> <pages> pp. 63-109, </pages> <month> Fall </month> <year> 1983. </year>
Reference: [17] <author> K. S. Decker and V. R. Lesser, </author> <title> An approach to analyzing the need for meta-level communication, </title> <booktitle> in Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <address> (Chamb ery, France), </address> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: However we have begun investigating multi-agent design-to-time scheduling in our simulator <ref> [17, 18, 19] </ref>. 10 * There is a deadline that fish must be warned that they are part of a duck attacking fish pattern in at most six sensor-cycles from when the later of the two vehicles comes within sensor range. 4.2 An example problem with adequate resources Before problem solving
Reference: [18] <author> K. S. Decker and V. R. Lesser, </author> <title> A one-shot dynamic coordination algorithm for distributed sensor networks, </title> <booktitle> in Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <address> (Washington), </address> <pages> pp. 210-216, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: However we have begun investigating multi-agent design-to-time scheduling in our simulator <ref> [17, 18, 19] </ref>. 10 * There is a deadline that fish must be warned that they are part of a duck attacking fish pattern in at most six sensor-cycles from when the later of the two vehicles comes within sensor range. 4.2 An example problem with adequate resources Before problem solving
Reference: [19] <author> K. S. Decker and V. R. Lesser, </author> <title> Quantitative modeling of complex computational task environments, </title> <booktitle> in Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <address> (Washington), </address> <pages> pp. 217-224, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: However we have begun investigating multi-agent design-to-time scheduling in our simulator <ref> [17, 18, 19] </ref>. 10 * There is a deadline that fish must be warned that they are part of a duck attacking fish pattern in at most six sensor-cycles from when the later of the two vehicles comes within sensor range. 4.2 An example problem with adequate resources Before problem solving
Reference: [20] <author> K. Decker, A. Garvey, M. Humphrey, and V. Lesser, </author> <title> Effects of parallelism on blackboard system scheduling, </title> <booktitle> in Proceedings of the Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <address> (Sydney, Australia), </address> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: These interactions are used by the DVMT scheduler to order the execution of subtasks <ref> [20] </ref>. Another aspect of real problems that is not completely handled is penalties associated with missing deadlines. The effect of missing particular deadlines is domain-specific and can range from catastrophic to merely inconvenient.
Reference: [21] <author> K. S. Decker, A. J. Garvey, V. R. Lesser, and M. A. Humphrey, </author> <title> An approach to modeling environment and task characteristics for coordination, in Enterprise Integration Modeling: </title> <booktitle> Proceedings of the First International Conference (C. </booktitle> <editor> J. Petrie, Jr., </editor> <publisher> ed.), </publisher> <pages> pp. 379-388, </pages> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: In the future we plan to extend our simulation work extensively. We have recently began work on a much more detailed simulator that represents the complex interactions that can exist among tasks <ref> [21, 22] </ref>. This increased sophistication in our simulator will both allow and encourage increased sophistication in our scheduler. Eventually we hope to take the knowledge about scheduling that we acquire in this process and integrate it back into the DVMT or another complex AI application.
Reference: [22] <author> A. Garvey, M. Humphrey, and V. Lesser, </author> <title> Task interdependencies in design-to-time real-time scheduling, </title> <booktitle> in Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <address> (Washington, D.C.), </address> <pages> pp. 580-585, </pages> <month> July </month> <year> 1993. </year> <month> 27 </month>
Reference-contexts: In the future we plan to extend our simulation work extensively. We have recently began work on a much more detailed simulator that represents the complex interactions that can exist among tasks <ref> [21, 22] </ref>. This increased sophistication in our simulator will both allow and encourage increased sophistication in our scheduler. Eventually we hope to take the knowledge about scheduling that we acquire in this process and integrate it back into the DVMT or another complex AI application.
References-found: 22

