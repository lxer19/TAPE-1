URL: ftp://www.cs.rutgers.edu/pub/technical-reports/dcs-tr-354.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: paffy@paffendorf.sj.ca.us  
Title: Automating Software Documentation  supervised by  
Author: Karen Paffendorf Diane L. Souvaine 
Degree: submitted by  
Affiliation: Department of Computer Science Rutgers University  
Date: April 13, 1998  
Pubnum: Technical Report dcs-tr-354  
Abstract: This paper describes automating the documentation of a software control structure. The code is preprocessed to take the form of directed graphs. The following tools are used for drawing the directed graphs: DaVinci, Graphlet, Graphviz, and VCG. The tools are described and compared. 
Abstract-found: 1
Intro-found: 1
Reference: [Chv83] <author> V. Chvatal. </author> <title> Linear Programming. </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: The other tools within this package will not be addressed. 3.4.1 Determine Rank of Nodes [GKNV93] breaks rank assignment into two major pieces: making the graph acyclic and applying the network simplex formulation <ref> [Chv83] </ref> to node ranking with a goal of short edges. A depth-first search starting at either source or sink nodes partitions the edges into tree edges and non-tree edges. The tree defines a partial order on nodes. The non-tree edges can be further classified.
Reference: [DETT94] <author> Giuseppe Di Battista, Peter Eades, Roberto Tamas-sia, and Ioannis G. Tollis. </author> <title> Algorithms for drawing graphs: an annotated bibliography. Computational Geometry: </title> <journal> Theory and Applications, </journal> <volume> 4 </volume> <pages> 235-282, </pages> <year> 1994. </year> <month> file://ftp.cs.brown.edu/pub/papers/compgeo/gdbiblio.ps.gz. </month>
Reference: [Ead84] <author> P. Eades. </author> <title> A heuristic for graph drawing. </title> <journal> Congr. Numer., </journal> <volume> 42 </volume> <pages> 149-160, </pages> <year> 1984. </year>
Reference: [EW86] <author> P. Eades and N. Wormald. </author> <title> The median heuristic for drawing 2-layers networks. </title> <type> Technical Report 69, </type> <institution> Department of Computer Science; University of Queensland, </institution> <year> 1986. </year>
Reference-contexts: This rank is used to reorder the vertices in the rank. Variations of the heuristic vary the number of iterations and the directions traversed. Two common weighting methods are the barycenter function [STT81] and the median function <ref> [EW86] </ref>. 3. Position the nodes with the rank and order information. Vertical spacing is relatively trivial using the rank information. (In these diagrams the nodes are the same size, so all of the nodes in a rank have the same height.) 4.
Reference: [FW94] <author> M. Frhlich and M. Werner. </author> <title> The graph visualization system davinci a user interface for applications. </title> <type> Technical Report 5/94, </type> <institution> Department of Computer Science; Universitt Bremen, </institution> <month> September </month> <year> 1994. </year> <month> ftp://ftp.uni-bremen.de/pub/graphics/daVinci/papers/techrep0594.ps.gz. </month>
Reference-contexts: Add edges. 14 3.2 DaVinci 5 The online documentation gives the following description. The graph layout algorithm of DaVinci is based on the heuristical approach of Sugiyama et al. ([STT81], [SM91]) and was refined by a non-deterministic component to get better results (discussed in <ref> [FW94] </ref>). 3.2.1 Determine Rank of Nodes The rank appears to be inherent in the recursive nature of the input. 3.2.2 Node Ordering Within Ranks The layout algorithm does not overcome a bad initial ordering of nodes near the top of the page.
Reference: [GKNV93] <author> E. R. Gansner, Eleftherios Koutsofios, Stephen C. North, and K. P. Vo. </author> <title> A technique for drawing directed graphs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 19 </volume> <pages> 214-230, </pages> <year> 1993. </year> <note> http://www.research.att.com/sw/tools/graphviz/TSE93.ps.gz. 43 </note>
Reference-contexts: The other tools within this package will not be addressed. 3.4.1 Determine Rank of Nodes <ref> [GKNV93] </ref> breaks rank assignment into two major pieces: making the graph acyclic and applying the network simplex formulation [Chv83] to node ranking with a goal of short edges. A depth-first search starting at either source or sink nodes partitions the edges into tree edges and non-tree edges.
Reference: [PEW86] <author> B. McKay P. Eades and N. Wormald. </author> <title> On an edge crossing problem. </title> <booktitle> In Proceedings 9th Australian Computer Science Conference, </booktitle> <pages> pages 175-198, </pages> <year> 1986. </year>
Reference-contexts: Dummy nodes are often added so that no edge crosses several levels. 2. Order the nodes from left to right within a rank to reduce the number of edge crossings in the layout. Minimizing the number of edge crossings is NP-Complete <ref> [PEW86] </ref>. A heuristic to avoid this complexity follows. Given an initial ordering within a rank, a sequence of iterations is performed to improve the orderings. An iteration traverses through the ranks from first to last or vice versa. <p> A forward edge connects a node to a descendant. A back edge connects a descendant to an ancestor. A cycle can be broken by reversing a back edge. Determining a minimum set of edges to reverse is NP-complete <ref> [PEW86] </ref>. The heuristic used takes each non-trivial strongly connected component, counts the number of times each edge forms a cycle, and reverses the edge with the maximum count. The initial step in ranking the acyclic graph is to determine a feasible spanning tree and a cut value for each edge.
Reference: [San95] <author> Georg Sander. </author> <title> Graph layout through the VCG tool. </title> <editor> In Roberto Tamassia and Ioannis G. Tollis, editors, </editor> <booktitle> Graph Drawing (Proceedings 1994), volume 894 of Lecture Notes Computer Science, </booktitle> <pages> pages 194-205. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <month> ftp://ftp.cs.uni-sb.de/pub/graphics/vcg/doc/tr-A03-94.ps.gz. </month>
Reference: [SM91] <author> K. Sugiyama and K. Misue. </author> <title> Visualization of structural information: Automatic drawing of compound digraphs. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> SMC-21(4):876-892, </volume> <month> July </month> <year> 1991. </year>
Reference-contexts: Add edges. 14 3.2 DaVinci 5 The online documentation gives the following description. The graph layout algorithm of DaVinci is based on the heuristical approach of Sugiyama et al. ([STT81], <ref> [SM91] </ref>) and was refined by a non-deterministic component to get better results (discussed in [FW94]). 3.2.1 Determine Rank of Nodes The rank appears to be inherent in the recursive nature of the input. 3.2.2 Node Ordering Within Ranks The layout algorithm does not overcome a bad initial ordering of nodes near
Reference: [STT81] <author> K. Sugiyama, S. Tagawa, and M. </author> <title> Toda. Methods for visual understanding of hierarchical systems. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> SMC-11(2):109-125, </volume> <month> February </month> <year> 1981. </year>
Reference-contexts: This rank is used to reorder the vertices in the rank. Variations of the heuristic vary the number of iterations and the directions traversed. Two common weighting methods are the barycenter function <ref> [STT81] </ref> and the median function [EW86]. 3. Position the nodes with the rank and order information. Vertical spacing is relatively trivial using the rank information. (In these diagrams the nodes are the same size, so all of the nodes in a rank have the same height.) 4.
Reference: [Tam97] <author> Roberto Tamassia. </author> <title> Graph drawing. </title> <editor> In Jacob E. Good-man and Joseph O'Rourke, editors, </editor> <title> CRC Handbook of Discrete and Computational Geometry. </title> <publisher> CRC Press, </publisher> <year> 1997. </year> <note> http://www.cs.brown.edu/cgc/papers/t-gd-97.ps.gz. </note>
Reference: [War77] <author> John Warfield. </author> <title> Crossing theory and hierarchy mapping. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 7 </volume> <pages> 502-523, </pages> <year> 1977. </year>
References-found: 12

