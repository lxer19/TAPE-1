URL: ftp://ftp.cs.vu.nl/pub/papers/theory/IR-304.ps.Z
Refering-URL: http://www.cs.vu.nl/vakgroepen/ti/ftpindex.html
Root-URL: 
Email: email: eliens@cs.vu.nl vink@cs.vu.nl  
Title: Asynchronous rendez-vous in distributed logic programming  
Author: A. Eliens E.P. de Vink 
Keyword: concurrency, metric semantics, distributed logic programming, continuations  
Note: Contents  
Address: Boelelaan 1081, 1081 HV Amsterdam The Netherlands  
Affiliation: Vrije Universiteit, Department of Mathematics and Computer Science De  
Abstract: In this paper the semantics of the communication mechanism of the distributed logic programming language DLP is studied. DLP combines logic programming with object oriented features and parallelism. For an abstract subset of DLP both an operational and denotational semantics is given. The language DLP supports active objects, method call by rendez-vous and moreover (distributed) backtracking over the results of such a rendez-vous. To enable further exploitation of parallelism, the rendez-vous provided is asynchronous. A distinction is made between the creation of a process for evaluating the method call on the one hand, and the request for an answer on the other hand. To model this communication mechanism (syntactic) resumptions are employed. The notion of a resumption explains the backtracking taking place in the asynchronous rendez-vous. In addition, resumptions facilitate the systematic comparison of the operational and denotational semantics presented. 
Abstract-found: 1
Intro-found: 1
Reference: [America, 1987] <author> P. America, POOL-T: </author> <title> a parallel object oriented language, </title> <editor> in: [Yonezawa and Tokoro, </editor> <year> 1987] </year>
Reference-contexts: For non-concurrent examples of extending Prolog with object oriented features we refer to [Zaniolo, 1984] or [Yokoi, 1986].) A prototype of DLP has been implemented in a variant of the language introduced in <ref> [America, 1987] </ref> and is described in [Eliens, 1992]. In [Eliens, 1991b] the implementation of a distributed medical expert system is described, illustrating the distribution of control over multiple active objects using DLP. Semantics In this paper we will focus mainly on the behavioral aspects of DLP.
Reference: [America and de Bakker, 1988] <author> P. America and J.W. de Bakker, </author> <title> Designing equiv alent models for process creation, </title> <booktitle> Theoretical Computer Science, 60 (2) (1988) pp. </booktitle> <pages> 109-176 </pages>
Reference: [America et al, 1989] <author> P. America, J.W. de Bakker, J.N. Kok and J.J.M.M. Rut ten, </author> <title> Denotational semantics of a Parallel Object Oriented Language, </title> <journal> Information and Computation, </journal> <volume> 83 (2) (1989) pp. </volume> <pages> 152-205 </pages>
Reference-contexts: We think that this approach drastically reduces the requirements we have to impose on our semantic domain since (in opposition to e.g. <ref> [America et al, 1989] </ref>) we do not need a domain equation of the form PI ~ = PI ! Afi PI where the process domain PI occurs on the left-hand side of a function arrow. 2. DLP a language for distributed logic programming 4 Syntactic resumptions come in three flavors. <p> The use of metric topology for the formulation of denotational semantics of programming languages has been advocated over the years by De Bakker and co-workers. See, e.g., [de Bakker and Zucker, 1982], [de Bakker et al, 1988], <ref> [America et al, 1989] </ref>, [de Boer et al, 1990].
Reference: [America and Rutten, 1989a] <author> P. America and J.J.M.M. Rutten, </author> <title> A parallel object oriented language: design and foundations, </title> <type> Joint Ph.D. thesis, </type> <institution> Vrije Universiteit Amsterdam (1989) </institution>
Reference: [America and Rutten, 1989b] <author> P. America and J.J.M.M. Rutten, </author> <title> Solving reflexive domain equations in a category of complete metric spaces, </title> <journal> Journal of Computer and System Sciences, </journal> <note> 39 (1989) pp. 343-375 </note>
Reference: [America and Rutten, 1991] <author> P. America and J.J.M.M. Rutten, </author> <title> A layered seman tics for a parallel object-oriented language, </title> <booktitle> in: Foundations of Object-Oriented Languages, </booktitle> <editor> J.W. de Bakker, W.P. de Roever and G. Rozenberg (eds.), </editor> <booktitle> Lecture Notes in Computer Science 489, Springer (1991) pp. </booktitle> <pages> 91-123 </pages>
Reference-contexts: The use of contractions to characterize a variety of models has been advocated in [Kok and Rutten, 1990], and has moreover proven its usefulness in verifying the equality of operational and denotational semantics. See [de Bakker, 1991], [Jacquet and Monteiro, 1990], [Rutten, 1990], <ref> [America and Rutten, 1991] </ref>, [van Breugel, 1991] for several applications in imperative, logical, object oriented and real-time programming languages. See also [de Bakker and Meyer, 1988], [de Bakker, 1989], [de Bakker and de Vink, 1991], for some more introductory overviews of the method for the several programming paradigms.
Reference: [de Bakker et al, 1986] <author> J.W. de Bakker, J.N. Kok, J.-J.Ch. Meyer, E.-R. Olderog and J.I. Zucker, </author> <title> Contrasting themes in the semantics of imperative concurrency, in: Current Trends in Concurrency: </title> <editor> Overviews and Tutorials, J.W. de Bakker, W.P. de Roever and G. Rozenberg (eds.), </editor> <booktitle> Lecture Notes in Computer Science 224, Springer (1986) pp. </booktitle> <pages> 51-121 </pages>
Reference: [de Bakker et al, 1988] <author> J.W. de Bakker, J.-J.Ch. Meyer, E.-R. Olderog and J.I. Zucker, </author> <title> Transition systems, metric spaces and ready sets in the semantics of uniform concurrency, </title> <journal> Journal of Computer and System Sciences 36 (1988), </journal> <pages> 158-224 </pages>
Reference-contexts: Metric spaces The development of the semantics of B takes place in a metrical setting. The use of metric topology for the formulation of denotational semantics of programming languages has been advocated over the years by De Bakker and co-workers. See, e.g., [de Bakker and Zucker, 1982], <ref> [de Bakker et al, 1988] </ref>, [America et al, 1989], [de Boer et al, 1990].
Reference: [de Boer et al, 1990] <author> F.S. de Boer, J.N. Kok, C. Palamidessi, J.J.M.M. Rutten, </author> <title> From failure to success: Comparing a denotational and a declarative semantics for Horn Clause Logic, </title> <booktitle> in: Proc. International BCS-FACS Workshop on Semantics for Concurrency, </booktitle> <editor> M.Z. Kwiatkowska, M.W. Shields and R.M. Thomas (eds.), </editor> <booktitle> Workshops in Computing, Springer (1990), </booktitle> <pages> pp. 38-60 29 </pages>
Reference-contexts: The use of metric topology for the formulation of denotational semantics of programming languages has been advocated over the years by De Bakker and co-workers. See, e.g., [de Bakker and Zucker, 1982], [de Bakker et al, 1988], [America et al, 1989], <ref> [de Boer et al, 1990] </ref>.
Reference: [Bal et al, 1989] <author> H. Bal, J. Steiner and A. Tanenbaum, </author> <title> Programming languages for distributed systems, </title> <journal> ACM Computing Surveys, </journal> <volume> 21 (3) (1989) pp. </volume> <pages> 262-322 </pages>
Reference-contexts: DLP is a distributed language in the sense that it supports processes, communication between processes and is able to handle failure arising in a communication. C.f. <ref> [Bal et al, 1989] </ref>. The distinguishing feature of DLP, compared with other approaches at combining logic programming with object oriented features and parallelism, is the possible occurrence of distributed backtracking in a rendez-vous.
Reference: [de Bakker, 1989] <author> J.W. de Bakker, </author> <title> Designing concurrency semantics, </title> <booktitle> in: Proc. 11th World Computer Congress, </booktitle> <editor> G.X. Ritter (ed.), </editor> <publisher> North Holland (1989) pp. </publisher> <pages> 591-598 </pages>
Reference-contexts: See [de Bakker, 1991], [Jacquet and Monteiro, 1990], [Rutten, 1990], [America and Rutten, 1991], [van Breugel, 1991] for several applications in imperative, logical, object oriented and real-time programming languages. See also [de Bakker and Meyer, 1988], <ref> [de Bakker, 1989] </ref>, [de Bakker and de Vink, 1991], for some more introductory overviews of the method for the several programming paradigms.
Reference: [de Bakker and Meyer, 1988] <author> J.W. de Bakker and J.-J.Ch. Meyer, </author> <title> Metric seman tics for concurrency, </title> <note> BIT 28 (1988) pp. 504-529 </note>
Reference-contexts: See [de Bakker, 1991], [Jacquet and Monteiro, 1990], [Rutten, 1990], [America and Rutten, 1991], [van Breugel, 1991] for several applications in imperative, logical, object oriented and real-time programming languages. See also <ref> [de Bakker and Meyer, 1988] </ref>, [de Bakker, 1989], [de Bakker and de Vink, 1991], for some more introductory overviews of the method for the several programming paradigms.
Reference: [de Bakker and de Vink, 1991] <editor> J.W. de Bakker and E.P. de Vink, </editor> <title> CCS for OO and LP, </title> <booktitle> in: Proc. Theory and Practice of Software Development '91, </booktitle> <volume> Vol. 2, </volume> <editor> S. Abramsky and T.S.E. Maibaum (eds.), </editor> <booktitle> Lecture Notes in Computer Science 494, Springer (1991) pp. </booktitle> <pages> 1-28 </pages>
Reference-contexts: See [de Bakker, 1991], [Jacquet and Monteiro, 1990], [Rutten, 1990], [America and Rutten, 1991], [van Breugel, 1991] for several applications in imperative, logical, object oriented and real-time programming languages. See also [de Bakker and Meyer, 1988], [de Bakker, 1989], <ref> [de Bakker and de Vink, 1991] </ref>, for some more introductory overviews of the method for the several programming paradigms.
Reference: [de Bakker and Zucker, 1982] <author> J.W. de Bakker and J.I. Zucker, </author> <title> Processes and the denotational semantics of concurrency, </title> <booktitle> Information and Control 54 (1982) pp. </booktitle> <pages> 70-120 </pages>
Reference-contexts: Metric spaces The development of the semantics of B takes place in a metrical setting. The use of metric topology for the formulation of denotational semantics of programming languages has been advocated over the years by De Bakker and co-workers. See, e.g., <ref> [de Bakker and Zucker, 1982] </ref>, [de Bakker et al, 1988], [America et al, 1989], [de Boer et al, 1990].
Reference: [de Bakker, 1991] <author> J.W. de Bakker, </author> <title> Comparative semantics for flow of control in logic programming without logic, </title> <booktitle> Information and Computation 91 (1991) pp. </booktitle> <pages> 123-179 </pages>
Reference-contexts: In [Eliens, 1991b] the implementation of a distributed medical expert system is described, illustrating the distribution of control over multiple active objects using DLP. Semantics In this paper we will focus mainly on the behavioral aspects of DLP. Following the "logic programming without logic" approach (cf. <ref> [de Bakker, 1991] </ref>) we will propose an abstract, uninterpreted language B that will serve as a vehicle for an examination of the asynchronous rendez-vous as present in DLP. <p> Since the semantics for (the core of) Prolog including the cut operator, and therefore of individual DLP objects, has been extensively studied in [Jones and Mycroft, 1984], [de Vink, 1990] and <ref> [de Bakker, 1991] </ref>, attention is given primarily to the creation of processes and the flow of control during communication. Complementary to the approach followed here one could stress the logical aspects of DLP by studying a declarative semantics as done, e.g., for contextual logic programming in [Monteiro and Porto, 1988]. <p> The use of contractions to characterize a variety of models has been advocated in [Kok and Rutten, 1990], and has moreover proven its usefulness in verifying the equality of operational and denotational semantics. See <ref> [de Bakker, 1991] </ref>, [Jacquet and Monteiro, 1990], [Rutten, 1990], [America and Rutten, 1991], [van Breugel, 1991] for several applications in imperative, logical, object oriented and real-time programming languages. <p> This technique has been used here for structuring the equivalence proof, following <ref> [de Bakker, 1991] </ref>. 4 Operational semantics The abstract language B includes actions, recursive procedure calls, and has primitives that support object creation and the asynchronous rendez-vous. These primitives reflect the functionality of similar primitives in DLP. 4.
Reference: [van Breugel, 1991] <author> F. van Breugel, </author> <title> Comparative semantics for a real-time program ming language with integration, </title> <booktitle> in: Proc. Theory and Practice of Software Development '91 S. </booktitle> <editor> Abramsky and T.S.E. Maibaum (eds.) </editor> <volume> vol. 1, </volume> <booktitle> Lecture Notes in Computer Science 493, </booktitle> <pages> Springer (1991) pp 397-411 </pages>
Reference-contexts: The use of contractions to characterize a variety of models has been advocated in [Kok and Rutten, 1990], and has moreover proven its usefulness in verifying the equality of operational and denotational semantics. See [de Bakker, 1991], [Jacquet and Monteiro, 1990], [Rutten, 1990], [America and Rutten, 1991], <ref> [van Breugel, 1991] </ref> for several applications in imperative, logical, object oriented and real-time programming languages. See also [de Bakker and Meyer, 1988], [de Bakker, 1989], [de Bakker and de Vink, 1991], for some more introductory overviews of the method for the several programming paradigms.
Reference: [de Bruin and de Vink, 1989] <author> A. de Bruin, </author> <title> E.P. de Vink, Continuation semantics for PROLOG with cut, </title> <booktitle> in: Proc. Theory and Practice of Software Development '89, </booktitle> <volume> Vol I, </volume> <editor> J. Diaz and F. Orejas (eds.), </editor> <booktitle> Lecture Notes in Computer Science 351, Springer (1989) pp. </booktitle> <pages> 178-192 </pages>
Reference-contexts: The strategy of analyzing the control flow of a skeletal language first, before given an account of the full programming language under consideration has been shown profitable in, e.g., [Kok, 1988] and <ref> [de Bruin and de Vink, 1989] </ref>.
Reference: [Davison, 1989] <author> A. Davison, Polka: </author> <title> A Parlog object oriented language, </title> <type> Ph.D. thesis, </type> <institution> Dept. of Computing, Imperial College, </institution> <address> London (1989) </address>
Reference: [DeGroot, 1984] <author> D. </author> <title> DeGroot, Restricted and-parallelism, </title> <booktitle> in: Proc. Future Generation Computer Systems, ICOT (1984) pp. </booktitle> <pages> 471-478 </pages>
Reference-contexts: Such goals may however occur only in passive objects, since only passive objects allow internal concurrency. An advantage of this approach is that the programmer may restrict the cases where parallel evaluation occurs by imposing extra conditions (cf. <ref> [DeGroot, 1984] </ref>) as in A&B :- ground (B),!, Q = self ! B, A, Q?. A&B :- A, B. where splitting of a new process is allowed only when B is ground.
Reference: [Eliens, 1989] <author> A. </author> <title> Eli ens, Extending Prolog to a Parallel Object Oriented Language, </title> <booktitle> Proc. IFIP W.G. 10.3 Working Conference on Decentralized Systems (1989) Lyon </booktitle>
Reference: [Eliens, 1991] <author> A. </author> <title> Eli ens, </title> <journal> Distributed Logic Programming for Artificial Intelligence, AI Communications Vol. </journal> <volume> 4 No. 1, </volume> <year> 1991, </year> <pages> pp. 11-21 </pages>
Reference: [Eliens and de Vink, 1991] <author> A. Eli ens and E.P. de Vink, </author> <title> Asynchronous rendez-vous in the presence of backtracking, ISLP'91 Workshop on Asynchronous Communication, november 1991, </title> <address> San Diego </address>
Reference: [Eliens, 1992] <author> A. </author> <title> Eli ens, DLP A language for Distributed Logic Programming, </title> <publisher> Wiley (1992) </publisher>
Reference-contexts: For non-concurrent examples of extending Prolog with object oriented features we refer to [Zaniolo, 1984] or [Yokoi, 1986].) A prototype of DLP has been implemented in a variant of the language introduced in [America, 1987] and is described in <ref> [Eliens, 1992] </ref>. In [Eliens, 1991b] the implementation of a distributed medical expert system is described, illustrating the distribution of control over multiple active objects using DLP. Semantics In this paper we will focus mainly on the behavioral aspects of DLP.
Reference: [Jones and Mycroft, 1984] <author> N. Jones and A. Mycroft, </author> <title> Stepwise development of op erational and denotational semantics for Prolog, </title> <booktitle> in: Proc. Int. Symp. on Logic Programming, Atlantic City (1984) pp. </booktitle> <pages> 281-288 30 </pages>
Reference-contexts: Since the semantics for (the core of) Prolog including the cut operator, and therefore of individual DLP objects, has been extensively studied in <ref> [Jones and Mycroft, 1984] </ref>, [de Vink, 1990] and [de Bakker, 1991], attention is given primarily to the creation of processes and the flow of control during communication.
Reference: [Jacquet and Monteiro, 1990] <author> J.-M. Jacquet & L. Monteiro, </author> <title> Comparative Seman tics for a Parallel Contextual Programming Language, </title> <booktitle> in: Proc. North-American Logic Programming Conf., </booktitle> <editor> S. Debray and M. Hermenegildo (eds.), </editor> <publisher> MIT Press (1990) pp. </publisher> <pages> 195-214, </pages>
Reference-contexts: The use of contractions to characterize a variety of models has been advocated in [Kok and Rutten, 1990], and has moreover proven its usefulness in verifying the equality of operational and denotational semantics. See [de Bakker, 1991], <ref> [Jacquet and Monteiro, 1990] </ref>, [Rutten, 1990], [America and Rutten, 1991], [van Breugel, 1991] for several applications in imperative, logical, object oriented and real-time programming languages.
Reference: [Karam, 1988] <author> G.M. Karam, </author> <title> Prototyping Concurrent systems with Multilog, </title> <type> Technical Report Dept. </type> <institution> of Systems and Computer Engineering Carleton University (1988) </institution>
Reference: [Kahn et al, 1986] <author> K. Kahn, E. Tribble, M. Millar, D. Bobrow, </author> <title> Objects in con current logic programming languages, OOPSLA 86, </title> <editor> N. Meyrowitz (ed.), </editor> <booktitle> SIGPLAN Notices Vol. </booktitle> <volume> 21, No. 11, </volume> <pages> 1986 pp. 242-257 </pages>
Reference: [Kok, 1988] <author> J.N. Kok, </author> <title> A compositional semantics for Concurrent Prolog, </title> <booktitle> in: Proc. 5th Annual Symp. on Theoretical Aspects of Computer Science, Bordeaux, </booktitle> <month> February </month> <year> 1988, </year> <editor> R. Cori and M. Wirsing (eds.), </editor> <booktitle> Lecture Notes in Computer Science 294, Springer (1988) pp. </booktitle> <pages> 373-388 </pages>
Reference-contexts: The strategy of analyzing the control flow of a skeletal language first, before given an account of the full programming language under consideration has been shown profitable in, e.g., <ref> [Kok, 1988] </ref> and [de Bruin and de Vink, 1989].
Reference: [Kok and Rutten, 1988] <author> J. Kok and J. Rutten, </author> <title> Contractions in comparing concur rency semantics, </title> <booktitle> in: Proc. Automata, Languages and Programming, </booktitle> <editor> T. Lepisto and A. Salomaa (eds.), </editor> <booktitle> Lecture Notes in Computer Science 317, Springer (1988) pp. </booktitle> <pages> 317-332 </pages>
Reference: [Monteiro and Porto, 1988] <author> L. Monteiro and A. Porto, </author> <title> Contextual Logic Program ming, </title> <type> Report UNL-50/88, </type> <institution> University Lisboa (1988) </institution>
Reference-contexts: Complementary to the approach followed here one could stress the logical aspects of DLP by studying a declarative semantics as done, e.g., for contextual logic programming in <ref> [Monteiro and Porto, 1988] </ref>.
Reference: [Pereira and Nasr, 1984] <author> L.M. Pereira and R. Nasr, </author> <title> Delta Prolog: A distributed logic programming language, </title> <booktitle> in: Proc. FGCS, ICOT (1984) pp. </booktitle> <pages> 283-231 </pages>
Reference-contexts: 1. Introduction 3 language that does support backtracking over the results of a communication is Delta Prolog <ref> [Pereira and Nasr, 1984] </ref>. However Delta Prolog lacks any object oriented features and supports a communication mechanism that is less powerful method call by rendezvous.
Reference: [Rutten, 1990] <author> J.J.M.M. Rutten, </author> <title> Semantic correctness for a parallel object-oriented language, </title> <journal> SIAM Journal on Computing 19, </journal> <year> 1990, </year> <pages> pp. 341-383 </pages>
Reference-contexts: The use of contractions to characterize a variety of models has been advocated in [Kok and Rutten, 1990], and has moreover proven its usefulness in verifying the equality of operational and denotational semantics. See [de Bakker, 1991], [Jacquet and Monteiro, 1990], <ref> [Rutten, 1990] </ref>, [America and Rutten, 1991], [van Breugel, 1991] for several applications in imperative, logical, object oriented and real-time programming languages. See also [de Bakker and Meyer, 1988], [de Bakker, 1989], [de Bakker and de Vink, 1991], for some more introductory overviews of the method for the several programming paradigms.
Reference: [de Vink, 1990] <author> E.P. de Vink, </author> <title> Comparative semantics for Prolog with cut, </title> <booktitle> Science of Computer Programming 13 (1990), </booktitle> <pages> pp. 237-264 </pages>
Reference-contexts: Since the semantics for (the core of) Prolog including the cut operator, and therefore of individual DLP objects, has been extensively studied in [Jones and Mycroft, 1984], <ref> [de Vink, 1990] </ref> and [de Bakker, 1991], attention is given primarily to the creation of processes and the flow of control during communication.
Reference: [Yokoi, 1986] <author> S. Yokoi, </author> <title> A Prolog based object oriented language SPOOL and its com piler, </title> <booktitle> in: Proc. Logic Programming 86, Tokyo, </booktitle> <editor> E. Wada (ed.), </editor> <booktitle> Lecture Notes in Computer Science 264, Springer (1986) pp. </booktitle> <pages> 116-125 </pages>
Reference-contexts: However Delta Prolog lacks any object oriented features and supports a communication mechanism that is less powerful method call by rendezvous. For non-concurrent examples of extending Prolog with object oriented features we refer to [Zaniolo, 1984] or <ref> [Yokoi, 1986] </ref>.) A prototype of DLP has been implemented in a variant of the language introduced in [America, 1987] and is described in [Eliens, 1992]. In [Eliens, 1991b] the implementation of a distributed medical expert system is described, illustrating the distribution of control over multiple active objects using DLP.
Reference: [Zaniolo, 1984] <author> C. Zaniolo, </author> <title> Object oriented programming in Prolog, </title> <booktitle> in: Proc. Int. Symp. on Logic Programming, Atlantic City, IEEE (1984) pp. </booktitle> <pages> 265-270 </pages>
Reference-contexts: However Delta Prolog lacks any object oriented features and supports a communication mechanism that is less powerful method call by rendezvous. For non-concurrent examples of extending Prolog with object oriented features we refer to <ref> [Zaniolo, 1984] </ref> or [Yokoi, 1986].) A prototype of DLP has been implemented in a variant of the language introduced in [America, 1987] and is described in [Eliens, 1992].
References-found: 35

