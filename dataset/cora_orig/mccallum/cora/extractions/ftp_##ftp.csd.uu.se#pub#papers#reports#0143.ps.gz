URL: ftp://ftp.csd.uu.se/pub/papers/reports/0143.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Email: email fanatoli,voronkovg@csd.uu.se  
Title: What You Always Wanted to Know About Rigid E-Unification  
Author: Anatoli Degtyarev Andrei Voronkov 
Note: Supported by grants from INTAS, TFR and the Swedish Royal Academy of Sciences Supported by a TFR grant  
Address: Box 311, S-751 05 Uppsala, Sweden  
Affiliation: Computing Science Department Uppsala University  
Abstract: UPMAIL Technical Report No. 143 April 4, 1997 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P.B. Andrews. </author> <title> Theorem proving via general matings. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 28(2) </volume> <pages> 193-214, </pages> <year> 1981. </year>
Reference-contexts: Until recently, most approaches to introducing equality in such matrix-based methods tried to generalize such algorithms by a suitable modification of the notion of a unifier. Such a modification using simultaneous rigid E-unification was introduced by Gallier, Raatz and Snyder [36] for the method of matings due to Andrews <ref> [1] </ref> or the connection method due to Bibel [12]. It can easily be represented in the tableau formalism. The method of matings interleaves two steps: amplification by quantifier duplication and search for mating for a given amplification. <p> There is a satisfiability-preserving structure-preserving translation of formulas without equivalences into formulas in Skolem negation normal form consisting 5 Section 2. Preliminaries of the standard skolemization and a translation into negation normal form used e.g. in Andrews <ref> [1] </ref>. In order to prove an arbitrary formula ', we translate :' in Skolem negation normal form obtaining a formula and try to establish unsatisfiability of . For this reason, theorems in this paper are formulated in terms of unsatisfiability.
Reference: [2] <author> A. Avron. </author> <title> Gentzen-type systems, resolution and tableaux. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 10 </volume> <pages> 256-281, </pages> <year> 1993. </year>
Reference-contexts: In fact, path paramodulation of Plaisted [58] simulates resolution-paramodulation inference in a connection-like calculus. Although it is not noted in [58], but this technique has been demonstrated for resolution in many papers, for example by Bibel [12], Eder [30, 31], Mints [50], Baumgartner and Furbach [6] and Avron <ref> [2] </ref>. The generalization of this simulation to paramodulation is straightforward.
Reference: [3] <author> L. Bachmair, H. Ganzinger, C. Lynch, and W. Snyder. </author> <title> Basic paramodulation and superposition. </title> <editor> In D. Kapur, editor, </editor> <booktitle> 11th International Conference on Automated Deduction, volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 462-476, </pages> <address> Saratoga Springs, NY, USA, June 1992. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Some results on minus-normalization are proved by Norgela [55]. In this paper we describe a logical calculus BSE for rigid E-unification based on the rigid basic superposition rule that is an adaptation of basic superposition of Bachmair et.al. <ref> [3] </ref> and Nieuwenhuis and Rubio [52], for "rigid" variables. For a given rigid E-unification problem (called rigid equation in this paper), there is only a finite number of BSE-derivations for this problem. Thus, BSE gives us an algorithm returning a finite set of solutions to this rigid equation.
Reference: [4] <author> L. Bachmair, H. Ganzinger, C. Lynch, and W. Snyder. </author> <title> Basis paramodulation. </title> <journal> Information and Computation, </journal> <volume> 121 </volume> <pages> 172-192, </pages> <year> 1995. </year>
Reference-contexts: For simplicity, we assume that ' is the only predicate symbol of our first-order language. As usual, arbitrary first-order languages can be represented in such language by introducing a sort bool and replacing any non-equational atom A by A ' true (for details see e.g. <ref> [4] </ref>). By a ground expression (i.e. term or literal) we mean an expression containing no variables. For any expression E, var (E) denotes the set of all variables occurring in E. For a sequence of variables x, we shall sometimes denote x also the corresponding set of variables.
Reference: [5] <author> Peter Baumgartner. </author> <title> An ordered theory resolution calculus. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Logic Programming and Automated Reasoning (LPAR'92), volume 624 of Lecture Notes in Computer Science, </booktitle> <pages> pages 119-130, </pages> <year> 1992. </year>
Reference-contexts: cannot be closed without the use of the functional reflexivity. 1 Since the invention of simultaneous rigid E-unification by Gallier, Raatz and Snyder [36], there were a number of publications on simultaneous rigid E-unification itself and its use in theorem proving, for example Gallier et.al. [35, 37, 33, 34], Baumgartner <ref> [5] </ref>, Beckert and Hahnle [11], Becher and Petermann [8], Beckert [9], Goubault [39] and Petermann [56]. Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable. There were several faulty proofs of the decidability of this problem (e.g. [35, 33, 39]).
Reference: [6] <author> P. Baumgartner and U. Furbach. </author> <title> Consolution as a framework for comparing calculi. </title> <journal> Journal of Symbolic Computations, </journal> <volume> 16 </volume> <pages> 445-477, </pages> <year> 1993. </year>
Reference-contexts: In fact, path paramodulation of Plaisted [58] simulates resolution-paramodulation inference in a connection-like calculus. Although it is not noted in [58], but this technique has been demonstrated for resolution in many papers, for example by Bibel [12], Eder [30, 31], Mints [50], Baumgartner and Furbach <ref> [6] </ref> and Avron [2]. The generalization of this simulation to paramodulation is straightforward.
Reference: [7] <author> P. Baumgartner and U. Furbach. </author> <title> PROTEIN: A PROver with a Theory Extension INterface. </title> <editor> In A. Bundy, editor, </editor> <booktitle> Automated Deduction | CADE-12. 12th International Conference on Automated Deduction., volume 814 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 769-773, </pages> <address> Nancy, France, </address> <month> June/July </month> <year> 1994. </year>
Reference-contexts: These issues contain a survey by Schumann [61] of implementations of tableau-based provers. Among 24 systems mentioned in the survey only two are able to handle equality. The system PROTEIN <ref> [7] </ref> (and also KoMeT [13]) implement the modification method of Brand [14]. This method transforms a set of clauses with equality into a set of clauses without equality. This transformation usually yields a considerably larger set of clauses.
Reference: [8] <author> G. Becher and U. Petermann. </author> <title> Rigid unification by completion and rigid paramodulation. </title> <editor> In B. Nebel and L. Dreschler-Fischer, editors, </editor> <booktitle> KI-94: Advances in Artificial Intelligence. 18th German Annual Conference on Artificial Intelligence, volume 861 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 319-330, </pages> <address> Saarbrucken, Germany, September 1994. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: functional reflexivity. 1 Since the invention of simultaneous rigid E-unification by Gallier, Raatz and Snyder [36], there were a number of publications on simultaneous rigid E-unification itself and its use in theorem proving, for example Gallier et.al. [35, 37, 33, 34], Baumgartner [5], Beckert and Hahnle [11], Becher and Petermann <ref> [8] </ref>, Beckert [9], Goubault [39] and Petermann [56]. Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable. There were several faulty proofs of the decidability of this problem (e.g. [35, 33, 39]). <p> For the inclusion of multisets we shall use notation S 1 v S 2 . 6 A.Degtyarev and A.Voronkov. What you always wanted to know about rigid E-unification. Section 3 Rigid basic superposition The term "rigid paramodulation" has already been used by Becher and Petermann <ref> [8] </ref> and Plaisted [58] for systems of inference rules in which all variables are treated as "rigid". For example, rigid clause paramodulation of Plaisted [58] is essentially paramodulation and resolution over a set of clauses, where all substitutions are applied to the whole set of clauses. <p> We do not consider numerous works dedicated to the non-simultaneous rigid E-unifiability. This problem is NP-complete and there exist a number of complete algorithms for its solution (Gallier et.al. [35, 33], Goubault [38], Becher and Petermann <ref> [8] </ref>, De Kogel [29] and Plaisted [58]). Since simultaneous rigid E-unification is undecidable (Degtyarev and Voronkov [23, 27]), their completeness is useless from the viewpoint of general purpose theorem proving as proposed by Gallier et.al. [36, 34].
Reference: [9] <author> B. Beckert. </author> <title> A completion-based method for mixed universal and rigid E-unification. </title> <editor> In A. Bundy, editor, </editor> <booktitle> Automated Deduction | CADE-12. 12th International Conference on Automated Deduction., volume 814 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 678-692, </pages> <address> Nancy, France, </address> <month> June/July </month> <year> 1994. </year>
Reference-contexts: 1 Since the invention of simultaneous rigid E-unification by Gallier, Raatz and Snyder [36], there were a number of publications on simultaneous rigid E-unification itself and its use in theorem proving, for example Gallier et.al. [35, 37, 33, 34], Baumgartner [5], Beckert and Hahnle [11], Becher and Petermann [8], Beckert <ref> [9] </ref>, Goubault [39] and Petermann [56]. Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable. There were several faulty proofs of the decidability of this problem (e.g. [35, 33, 39]). The refutation procedure for first-order logic with equality using simultaneous rigid E-unification (e.g. <p> The implementation of the method of [56] uses a completion-based procedure by Beckert <ref> [9] </ref> of generation of complete sets of rigid E-unifiers. This procedure is developed with the aim of solving a more general problem | so-called mixed E-unification and has been implemented as part of the tableau-based theorem prover 3 T A P .
Reference: [10] <author> B. Beckert. </author> <title> Are minimal solutions to simultaneous rigid E-unification sufficient for adding equality to semantic tableaux? Privately circulated manuscript, </title> <institution> University of Karlsruhe, </institution> <year> 1995. </year> <title> 22 A.Degtyarev and A.Voronkov. What you always wanted to know about rigid E-unification. </title>
Reference-contexts: Completeness of Gallier et.al.'s procedure or existence of a procedure complete for first-order logic with equality based on some set of solutions to rigid E-unification was an open problem (see e.g. Petermann [56] and Beckert <ref> [10] </ref>). Our paper gives a positive solution to this problem. An advantage of Gallier et.al.'s procedure is that it allows one to extend the proof-search technology developed for tableaux without equality to the case with equality, using solutions to rigid E-unification instead of most general unifiers.
Reference: [11] <author> B. Beckert and R. Hahnle. </author> <title> An improved method for adding equality to free variable semantic tableaux. </title> <editor> In D. Kapur, editor, </editor> <booktitle> 11th International Conference on Automated Deduction (CADE), volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 678-692, </pages> <address> Saratoga Springs, NY, USA, June 1992. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: the use of the functional reflexivity. 1 Since the invention of simultaneous rigid E-unification by Gallier, Raatz and Snyder [36], there were a number of publications on simultaneous rigid E-unification itself and its use in theorem proving, for example Gallier et.al. [35, 37, 33, 34], Baumgartner [5], Beckert and Hahnle <ref> [11] </ref>, Becher and Petermann [8], Beckert [9], Goubault [39] and Petermann [56]. Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable. There were several faulty proofs of the decidability of this problem (e.g. [35, 33, 39]). <p> Recently, we proposed a new translation method based on the so-called basic folding demonstrated for Horn clauses in [22]. According to Schumann [61], the system 3 T A P uses the method of Beckert and Hahnle <ref> [11] </ref>. Paper [11] claims the completeness of the method, but this claim is not true. The method expands the tableau using the standard tableau rules, including fl-rules. For finding a closing substitution, an analog of linear paramodulation without function reflexivity has been proposed. <p> Recently, we proposed a new translation method based on the so-called basic folding demonstrated for Horn clauses in [22]. According to Schumann [61], the system 3 T A P uses the method of Beckert and Hahnle <ref> [11] </ref>. Paper [11] claims the completeness of the method, but this claim is not true. The method expands the tableau using the standard tableau rules, including fl-rules. For finding a closing substitution, an analog of linear paramodulation without function reflexivity has been proposed. <p> For finding a closing substitution, an analog of linear paramodulation without function reflexivity has been proposed. As it is well known, linear paramodulation is incomplete without function reflexivity. The same is true for the method of Beckert and Hahnle <ref> [11] </ref>, as the following example shows. Suppose that we prove the formula 9x (a ' b ^ g (f a; f b) ' h (f a; f b) g (x; x) ' h (x; x)). <p> In order to prove it using paramodulation, we need to paramodulate a ' b into g (f a; f b) ' h (f a; f b). The method of Beckert and Hahnle <ref> [11] </ref> only allows for paramodulation into copies of g (x; x) ' h (x; x) obtained by the application of fl-rules. Thus, this (provable) formula cannot be proved using the method of Beckert and Hahnle [11]. <p> The method of Beckert and Hahnle <ref> [11] </ref> only allows for paramodulation into copies of g (x; x) ' h (x; x) obtained by the application of fl-rules. Thus, this (provable) formula cannot be proved using the method of Beckert and Hahnle [11]. Consider now approaches based on the simultaneous rigid E-unifiability by Gallier et.al. [36, 34] and related methods. We do not consider numerous works dedicated to the non-simultaneous rigid E-unifiability.
Reference: [12] <author> W. Bibel. </author> <title> On matrices with connections. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 28(4) </volume> <pages> 633-645, </pages> <year> 1981. </year>
Reference-contexts: Such a modification using simultaneous rigid E-unification was introduced by Gallier, Raatz and Snyder [36] for the method of matings due to Andrews [1] or the connection method due to Bibel <ref> [12] </ref>. It can easily be represented in the tableau formalism. The method of matings interleaves two steps: amplification by quantifier duplication and search for mating for a given amplification. For formulas in disjunctive normal form this method was formulated earlier by Prawitz [59]. <p> In fact, path paramodulation of Plaisted [58] simulates resolution-paramodulation inference in a connection-like calculus. Although it is not noted in [58], but this technique has been demonstrated for resolution in many papers, for example by Bibel <ref> [12] </ref>, Eder [30, 31], Mints [50], Baumgartner and Furbach [6] and Avron [2]. The generalization of this simulation to paramodulation is straightforward.
Reference: [13] <author> W. Bibel. </author> <title> Issues in theorem proving based on the connection method. </title> <editor> In P. Baumgartner, R. Hahnle, and J. Posegga, editors, </editor> <title> Theorem Proving with Analytic Tableaux and Related Methods, </title> <booktitle> number 918 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 1-16, </pages> <address> Schlo Rheinfels, St. Goar, Germany, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: These issues contain a survey by Schumann [61] of implementations of tableau-based provers. Among 24 systems mentioned in the survey only two are able to handle equality. The system PROTEIN [7] (and also KoMeT <ref> [13] </ref>) implement the modification method of Brand [14]. This method transforms a set of clauses with equality into a set of clauses without equality. This transformation usually yields a considerably larger set of clauses.
Reference: [14] <author> D. Brand. </author> <title> Proving theorems with the modification method. </title> <journal> SIAM Journal of Computing, </journal> <volume> 4 </volume> <pages> 412-430, </pages> <year> 1975. </year>
Reference-contexts: These issues contain a survey by Schumann [61] of implementations of tableau-based provers. Among 24 systems mentioned in the survey only two are able to handle equality. The system PROTEIN [7] (and also KoMeT [13]) implement the modification method of Brand <ref> [14] </ref>. This method transforms a set of clauses with equality into a set of clauses without equality. This transformation usually yields a considerably larger set of clauses. In particular, the symmetry and the transitivity axioms must be explicitly applied to all positive occurrences of the equality predicate.
Reference: [15] <author> C.L. Chang. </author> <title> Theorem proving with variable-constrained resolution. </title> <journal> Information Sciences, </journal> <volume> 4 </volume> <pages> 217-231, </pages> <year> 1972. </year>
Reference-contexts: For example, rigid clause paramodulation of Plaisted [58] is essentially paramodulation and resolution over a set of clauses, where all substitutions are applied to the whole set of clauses. A similar system for resolution has been proposed earlier by Chang <ref> [15] </ref> as V-resolution and by Chang and Lee [43] for resolution with paramodulation as V-resolution and V-paramodulation. We shall use the term "rigid basic superposition" to denote a "rigid" version of basic superposition.
Reference: [16] <author> N. Dershowitz. </author> <title> Orderings for term rewriting systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 17 </volume> <pages> 279-301, </pages> <year> 1982. </year>
Reference-contexts: By Kruskal's Tree Theorem [42] there exist i; j such that i &lt; j and t j t i . It is easy to see that the constraint t i t j is unsatisfiable. 2 Similar statements have been proven by Dershowitz <ref> [16] </ref> and Plaisted [57]. Theorem 3.9 (Termination of BSE) For any constraint rigid equation R C, there exists a finite number of derivations from R C. Proof. Suppose that there exists an infinite number of derivations from R C.
Reference: [17] <author> A. Degtyarev, Yu. Gurevich, and A. Voronkov. </author> <title> Herbrand's theorem and equational reasoning: Problems and solutions. </title> <type> UPMAIL Technical Report 128, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> September </month> <year> 1996. </year>
Reference: [18] <author> A. Degtyarev, Yu. Matiyasevich, and A. Voronkov. </author> <title> Simultaneous rigid E-unification and related algorithmic problems. </title> <booktitle> In Eleventh Annual IEEE Symposium on Logic in Computer Science (LICS'96), </booktitle> <pages> pages 494-502, </pages> <address> New Brunswick, NJ, July 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: This implies that our method based on BSE does not give a complete procedure for intuitionistic logic with equality. Other results on relations between simultaneous rigid E-unification and intuitionistic logic are considered by Degtyarev and Voronkov [24], Degtyarev, Matiyasevich and Voronkov <ref> [18] </ref>. 21 Section 6. Related work
Reference: [19] <author> A. Degtyarev and A. Voronkov. </author> <title> Equality elimination for semantic tableaux. </title> <type> UPMAIL Technical Report 90, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: Proof. Soundness follows from soundness of BSE. The proof of completeness is quite lengthy and is given in Appendix A. It is based on the completeness of the equality elimination method <ref> [19, 21, 26] </ref>. 2 To illustrate this theorem, consider the formula of Example 1.1.
Reference: [20] <author> A. Degtyarev and A. Voronkov. </author> <title> General connections via equality elimination. </title> <editor> In M. De Glas and Z. Pawlak, editors, </editor> <booktitle> Second World Conference on the Fundamentals of Artificial Intelligence (WOCFAI-95), </booktitle> <pages> pages 109-120, </pages> <address> Paris, </address> <month> July </month> <year> 1995. </year> <pages> Angkor. </pages>
Reference-contexts: The use of factoring prevents not only from the independent search for solutions for tableau branches, but even from the incremental solving of rigid equations on tableau branches as proposed by Gallier et.al. Our equality elimination method <ref> [26, 20, 21] </ref> is based on extending a tableau prover by a bottom-up equation solver using basic superposition. Solutions to equations are generated by this solver and used to close branches of a tableau. Thus, the method combines (non-local) tableau proof search with the (local) equation solving.
Reference: [21] <author> A. Degtyarev and A. Voronkov. </author> <title> Equality elimination for the inverse method and extension procedures. In C.S. </title> <editor> Mellish, editor, </editor> <booktitle> Proc. International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <volume> volume 1, </volume> <pages> pages 342-347, </pages> <address> Montreal, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: Proof. Soundness follows from soundness of BSE. The proof of completeness is quite lengthy and is given in Appendix A. It is based on the completeness of the equality elimination method <ref> [19, 21, 26] </ref>. 2 To illustrate this theorem, consider the formula of Example 1.1. <p> The use of factoring prevents not only from the independent search for solutions for tableau branches, but even from the incremental solving of rigid equations on tableau branches as proposed by Gallier et.al. Our equality elimination method <ref> [26, 20, 21] </ref> is based on extending a tableau prover by a bottom-up equation solver using basic superposition. Solutions to equations are generated by this solver and used to close branches of a tableau. Thus, the method combines (non-local) tableau proof search with the (local) equation solving.
Reference: [22] <author> A. Degtyarev and A. Voronkov. </author> <title> Handling equality in logic programs via basic folding. </title> <editor> In R. Dyckhoff, H. Herre, and P. Schroeder-Heister, editors, </editor> <booktitle> Extensions of Logic Programming (5th International Workshop, ELP'96), volume 1050 of Lecture Notes in Computer Science, </booktitle> <pages> pages 119-136, </pages> <address> Leipzig, Germany, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: This transformation usually yields a considerably larger set of clauses. In particular, the symmetry and the transitivity axioms must be explicitly applied to all positive occurrences of the equality predicate. Recently, we proposed a new translation method based on the so-called basic folding demonstrated for Horn clauses in <ref> [22] </ref>. According to Schumann [61], the system 3 T A P uses the method of Beckert and Hahnle [11]. Paper [11] claims the completeness of the method, but this claim is not true. The method expands the tableau using the standard tableau rules, including fl-rules.
Reference: [23] <author> A. Degtyarev and A. Voronkov. </author> <title> Simultaneous rigid E-unification is undecidable. </title> <editor> In H. Kleine Buning, editor, </editor> <booktitle> Computer Science Logic. 9th International Workshop, CSL'95, volume 1092 of Lecture Notes in Computer Science, </booktitle> <pages> pages 178-190, </pages> <address> Paderborn, Germany, </address> <month> September </month> <year> 1995, 1996. </year> <title> 23 Section 6. Related work </title>
Reference-contexts: The refutation procedure for first-order logic with equality using simultaneous rigid E-unification (e.g. Gallier et.al. [34]) was based on a faulty assumption that solutions to simultaneous rigid E-unification can be found by consecutive combination of finite complete sets of solutions for (non-simultaneous) rigid E-unification [33, 35]. Later we <ref> [23, 27] </ref> proved that simultaneous rigid E-unification is undecidable, which implied that Gallier et.al.'s procedure cannot, in general, find solutions to simultaneous rigid E-unification. <p> This problem is NP-complete and there exist a number of complete algorithms for its solution (Gallier et.al. [35, 33], Goubault [38], Becher and Petermann [8], De Kogel [29] and Plaisted [58]). Since simultaneous rigid E-unification is undecidable (Degtyarev and Voronkov <ref> [23, 27] </ref>), their completeness is useless from the viewpoint of general purpose theorem proving as proposed by Gallier et.al. [36, 34]. Our system BSE can easily be extended to a calculus complete for rigid E-unifiability, but such completeness was not our aim.
Reference: [24] <author> A. Degtyarev and A. Voronkov. </author> <title> Decidability problems for the prenex fragment of intuitionistic logic. </title> <booktitle> In Eleventh Annual IEEE Symposium on Logic in Computer Science (LICS'96), </booktitle> <pages> pages 503-512, </pages> <address> New Brunswick, NJ, July 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: This implies that our method based on BSE does not give a complete procedure for intuitionistic logic with equality. Other results on relations between simultaneous rigid E-unification and intuitionistic logic are considered by Degtyarev and Voronkov <ref> [24] </ref>, Degtyarev, Matiyasevich and Voronkov [18]. 21 Section 6. Related work
Reference: [25] <author> A. Degtyarev and A. Voronkov. </author> <title> What you always wanted to know about rigid E-unification. </title> <editor> In J.J. Alferes, L.M. Pereira, and E. Orlowska, editors, </editor> <booktitle> Logics in Artificial Intelligence. European Workshop, JELIA'96, volume 1126 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 50-69, </pages> <address> Evora, Portugal, </address> <month> September/October </month> <year> 1996. </year>
Reference-contexts: Thus, C is satisfiable. But satisfiability of C implies satisfiability of t i t j . Contradiction. 2 Note. In Degtyarev and Voronkov <ref> [25] </ref> the left rigid basic superposition has been formulated incorrectly in the following way: E [ fl ' r; s [p] ' tg ` 8 e C (lrbs) With this formulation, termination is not guaranteed as the following example shows.
Reference: [26] <author> A. Degtyarev and A. Voronkov. </author> <title> Equality elimination for the tableau method. </title> <editor> In J. Calmet and C. Limongelli, editors, </editor> <booktitle> Design and Implementation of Symbolic Computation Systems. International Symposium, DISCO'96, volume 1128 of Lecture Notes in Computer Science, </booktitle> <pages> pages 46-60, </pages> <address> Karlsruhe, Germany, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: Proof. Soundness follows from soundness of BSE. The proof of completeness is quite lengthy and is given in Appendix A. It is based on the completeness of the equality elimination method <ref> [19, 21, 26] </ref>. 2 To illustrate this theorem, consider the formula of Example 1.1. <p> The use of factoring prevents not only from the independent search for solutions for tableau branches, but even from the incremental solving of rigid equations on tableau branches as proposed by Gallier et.al. Our equality elimination method <ref> [26, 20, 21] </ref> is based on extending a tableau prover by a bottom-up equation solver using basic superposition. Solutions to equations are generated by this solver and used to close branches of a tableau. Thus, the method combines (non-local) tableau proof search with the (local) equation solving.
Reference: [27] <author> A. Degtyarev and A. Voronkov. </author> <title> The undecidability of simultaneous rigid E-unification. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 166(1-2):291-300, </address> <year> 1996. </year>
Reference-contexts: The refutation procedure for first-order logic with equality using simultaneous rigid E-unification (e.g. Gallier et.al. [34]) was based on a faulty assumption that solutions to simultaneous rigid E-unification can be found by consecutive combination of finite complete sets of solutions for (non-simultaneous) rigid E-unification [33, 35]. Later we <ref> [23, 27] </ref> proved that simultaneous rigid E-unification is undecidable, which implied that Gallier et.al.'s procedure cannot, in general, find solutions to simultaneous rigid E-unification. <p> This problem is NP-complete and there exist a number of complete algorithms for its solution (Gallier et.al. [35, 33], Goubault [38], Becher and Petermann [8], De Kogel [29] and Plaisted [58]). Since simultaneous rigid E-unification is undecidable (Degtyarev and Voronkov <ref> [23, 27] </ref>), their completeness is useless from the viewpoint of general purpose theorem proving as proposed by Gallier et.al. [36, 34]. Our system BSE can easily be extended to a calculus complete for rigid E-unifiability, but such completeness was not our aim.
Reference: [28] <author> A. Degtyarev and A. Voronkov. </author> <title> Equality reasoning in sequent-based calculi: a tutorial. </title> <type> Upmail technical report, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> August </month> <year> 1996. </year> <note> To appear. </note>
Reference: [29] <author> E. De Kogel. </author> <title> Rigid E-unification simplified. </title> <editor> In P. Baumgartner, R. Hahnle, and J. Posegga, editors, </editor> <title> Theorem Proving with Analytic Tableaux and Related Methods, </title> <booktitle> number 918 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 17-30, </pages> <address> Schlo Rheinfels, St. Goar, Germany, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: We do not consider numerous works dedicated to the non-simultaneous rigid E-unifiability. This problem is NP-complete and there exist a number of complete algorithms for its solution (Gallier et.al. [35, 33], Goubault [38], Becher and Petermann [8], De Kogel <ref> [29] </ref> and Plaisted [58]). Since simultaneous rigid E-unification is undecidable (Degtyarev and Voronkov [23, 27]), their completeness is useless from the viewpoint of general purpose theorem proving as proposed by Gallier et.al. [36, 34].
Reference: [30] <author> E. Eder. </author> <title> A comparison of the resolution calculus and the connection method, and a new calculus generalizing both methods. </title> <editor> In E. Borger, G. Jager, H. Kleine Buning, and M.M. Richter, editors, </editor> <booktitle> CSL'88 (Proc. 2nd Workshop on Computer Science Logic), volume 385 of Lecture Notes in Computer Science, </booktitle> <pages> pages 80-98. </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: In fact, path paramodulation of Plaisted [58] simulates resolution-paramodulation inference in a connection-like calculus. Although it is not noted in [58], but this technique has been demonstrated for resolution in many papers, for example by Bibel [12], Eder <ref> [30, 31] </ref>, Mints [50], Baumgartner and Furbach [6] and Avron [2]. The generalization of this simulation to paramodulation is straightforward.
Reference: [31] <author> E. Eder. </author> <title> Consolution and its relation with resolution. </title> <booktitle> In Proc. International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <pages> pages 132-136, </pages> <year> 1991. </year>
Reference-contexts: In fact, path paramodulation of Plaisted [58] simulates resolution-paramodulation inference in a connection-like calculus. Although it is not noted in [58], but this technique has been demonstrated for resolution in many papers, for example by Bibel [12], Eder <ref> [30, 31] </ref>, Mints [50], Baumgartner and Furbach [6] and Avron [2]. The generalization of this simulation to paramodulation is straightforward.
Reference: [32] <author> M. </author> <title> Fitting. First Order Logic and Automated Theorem Proving. </title> <publisher> Springer Verlag, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: Procedures of this kind were used in later formalizations and implementations of the tableau method, the method of matings or the connection method for formulas without equality. For example, Fitting <ref> [32] </ref> formulates this via an inference rule called MGU atomic closure rule. Gallier, Raatz and Snyder [36] tried to describe a similar procedure for logic with equality. <p> After several applications of tableau expansion rules to the negation normal form of :' (ff-, fi-and fl-rules in the terminology of Smullyan [63] or Fitting <ref> [32] </ref>) we obtain the following tableau (we only consider the part of the tableau containing literals, omitting non-literal formulas): 2 A.Degtyarev and A.Voronkov. <p> This substitution can be found by applying the functional reflexivity rule and MGU replacement rule of <ref> [32] </ref> (in fact, the reformulation of the paramodulation rule for tableaux). <p> Variables in a matrix (or a tableau) could be consecutively substituted by ground terms already occurring in the matrix. This procedure does not solve simultaneous rigid E-unifiability, but it gives a procedure complete for first-order logic with equality. In the terminology of Fitting <ref> [32] </ref> it means that a closing substitution can be found after a sufficiently high (but not necessarily minimal) number of applications of the fl-rule. The approach to substitutions based on this idea has been characterized as minus-normalization in Matulis [49] and Maslov [48]. <p> Thus, BSE gives us an algorithm returning a finite set of solutions to this rigid equation. We use these solutions to close a tableau branch in the same way as most general unifiers are used to close a branch in the MGU atomic closure rule of Fitting <ref> [32] </ref>. 4 A.Degtyarev and A.Voronkov. What you always wanted to know about rigid E-unification. Section 2 Preliminaries We present here a brief overview of notions and preliminary definitions necessary for understanding the paper. We assume basic knowledge of substitutions and unification. <p> Tableau basic superposition Section 5 Tableau basic superposition As a simple consequence of our results, we prove a completeness result for a paramodulation rule working on tableaux. A paramodulation rule working directly on tableaux was proposed by Loveland [45] in the context of model elimination and later by Fitting <ref> [32] </ref>. However, their formulations have all disadvantages of the early paramodulation rule of Robinson and Wos [60]: 1. Functional reflexivity rule is used; 2. Paramodulation into variables is allowed; 3. Increasing applications of paramodulation are allowed (for example, x can be rewritten to f (x). <p> Thus, we work with constraint tableaux: Definition 5.1 (Constraint tableau) A constraint tableau is a pair consisting of a tableau T and a constraint C, denoted T C. Now we adapt the tableau rules of <ref> [32] </ref> to the case of constraint tableaux. For simplicity, we only consider signatures whose only predicate symbol is '. <p> Thus, the method combines (non-local) tableau proof search with the (local) equation solving. Only completely solved equations are used in the tableau part of the proof, thus reducing non-determinism created by applications of MGU replacement rule of Fitting <ref> [32] </ref>. The equation solution is even more restricted by the use of orderings, basic simplification and subsumption. A similar idea: combination of proof-search in tableaux with a bottom-up equality saturation of the original formula, is used in [51] for constructing a goal-directed version of model elimination and paramodulation.
Reference: [33] <author> J. Gallier, P. Narendran, D. Plaisted, and W. Snyder. </author> <title> Rigid E-unification: NP-completeness and applications to equational matings. </title> <journal> Information and Computation, </journal> 87(1/2):129-195, 1990. 
Reference-contexts: Obviously, this tableau cannot be closed without the use of the functional reflexivity. 1 Since the invention of simultaneous rigid E-unification by Gallier, Raatz and Snyder [36], there were a number of publications on simultaneous rigid E-unification itself and its use in theorem proving, for example Gallier et.al. <ref> [35, 37, 33, 34] </ref>, Baumgartner [5], Beckert and Hahnle [11], Becher and Petermann [8], Beckert [9], Goubault [39] and Petermann [56]. Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable. <p> Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable. There were several faulty proofs of the decidability of this problem (e.g. <ref> [35, 33, 39] </ref>). The refutation procedure for first-order logic with equality using simultaneous rigid E-unification (e.g. Gallier et.al. [34]) was based on a faulty assumption that solutions to simultaneous rigid E-unification can be found by consecutive combination of finite complete sets of solutions for (non-simultaneous) rigid E-unification [33, 35]. <p> The refutation procedure for first-order logic with equality using simultaneous rigid E-unification (e.g. Gallier et.al. [34]) was based on a faulty assumption that solutions to simultaneous rigid E-unification can be found by consecutive combination of finite complete sets of solutions for (non-simultaneous) rigid E-unification <ref> [33, 35] </ref>. Later we [23, 27] proved that simultaneous rigid E-unification is undecidable, which implied that Gallier et.al.'s procedure cannot, in general, find solutions to simultaneous rigid E-unification. <p> Consider now approaches based on the simultaneous rigid E-unifiability by Gallier et.al. [36, 34] and related methods. We do not consider numerous works dedicated to the non-simultaneous rigid E-unifiability. This problem is NP-complete and there exist a number of complete algorithms for its solution (Gallier et.al. <ref> [35, 33] </ref>, Goubault [38], Becher and Petermann [8], De Kogel [29] and Plaisted [58]). Since simultaneous rigid E-unification is undecidable (Degtyarev and Voronkov [23, 27]), their completeness is useless from the viewpoint of general purpose theorem proving as proposed by Gallier et.al. [36, 34]. <p> Even if it is complete, our procedure based on BSE has some advantages over Gallier et.al.'s procedure. For example, for every tableau branch with p equations and q disequations, we consider q rigid equations, while Gallier et.al.'s procedure checks q 2 p rigid equations. Gallier et.al. <ref> [35, 33] </ref> introduced the notion of a complete set of solutions for rigid E-unification, proved finiteness of such sets and gave an algorithm computing finite complete set of solutions.
Reference: [34] <author> J. Gallier, P. Narendran, S. Raatz, and W. Snyder. </author> <title> Theorem proving using equational matings and rigid E-unification. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 39(2) </volume> <pages> 377-429, </pages> <year> 1992. </year>
Reference-contexts: For example, Fitting [32] formulates this via an inference rule called MGU atomic closure rule. Gallier, Raatz and Snyder [36] tried to describe a similar procedure for logic with equality. For example, Gallier et.al. <ref> [34] </ref> describe such a procedure in which a substitution condition is formalized via rigid E-unification, and the set of substitution conditions via simultaneous rigid E-unification. Simultaneous rigid E-unification can be formulated as follows. <p> Obviously, this tableau cannot be closed without the use of the functional reflexivity. 1 Since the invention of simultaneous rigid E-unification by Gallier, Raatz and Snyder [36], there were a number of publications on simultaneous rigid E-unification itself and its use in theorem proving, for example Gallier et.al. <ref> [35, 37, 33, 34] </ref>, Baumgartner [5], Beckert and Hahnle [11], Becher and Petermann [8], Beckert [9], Goubault [39] and Petermann [56]. Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable. <p> Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable. There were several faulty proofs of the decidability of this problem (e.g. [35, 33, 39]). The refutation procedure for first-order logic with equality using simultaneous rigid E-unification (e.g. Gallier et.al. <ref> [34] </ref>) was based on a faulty assumption that solutions to simultaneous rigid E-unification can be found by consecutive combination of finite complete sets of solutions for (non-simultaneous) rigid E-unification [33, 35]. <p> It has one solution fga=xg. However, no rule of BSE is applicable to x ' a ` 8 gx ' x ;. This means that BSE can yield less solutions to a rigid equation than any other known procedure, for example that of Gallier et.al. <ref> [34] </ref> because all these procedures are existentially complete. At the same time, BSE can yield more solutions than the procedure of [34] as the following example shows. For the rigid equation a ' f a ` 8 x ' f a the procedure of [34] will find one solution fa=xg, but <p> This means that BSE can yield less solutions to a rigid equation than any other known procedure, for example that of Gallier et.al. <ref> [34] </ref> because all these procedures are existentially complete. At the same time, BSE can yield more solutions than the procedure of [34] as the following example shows. For the rigid equation a ' f a ` 8 x ' f a the procedure of [34] will find one solution fa=xg, but there are two answer constraints whose solutions are the substitutions fa=xg and ff a=xg respectively. <p> for example that of Gallier et.al. <ref> [34] </ref> because all these procedures are existentially complete. At the same time, BSE can yield more solutions than the procedure of [34] as the following example shows. For the rigid equation a ' f a ` 8 x ' f a the procedure of [34] will find one solution fa=xg, but there are two answer constraints whose solutions are the substitutions fa=xg and ff a=xg respectively. In order to show that there is only finite number of derivations in BSE from a given constraint rigid equation, we prove an auxiliary statement. <p> Thus, this (provable) formula cannot be proved using the method of Beckert and Hahnle [11]. Consider now approaches based on the simultaneous rigid E-unifiability by Gallier et.al. <ref> [36, 34] </ref> and related methods. We do not consider numerous works dedicated to the non-simultaneous rigid E-unifiability. This problem is NP-complete and there exist a number of complete algorithms for its solution (Gallier et.al. [35, 33], Goubault [38], Becher and Petermann [8], De Kogel [29] and Plaisted [58]). <p> Since simultaneous rigid E-unification is undecidable (Degtyarev and Voronkov [23, 27]), their completeness is useless from the viewpoint of general purpose theorem proving as proposed by Gallier et.al. <ref> [36, 34] </ref>. Our system BSE can easily be extended to a calculus complete for rigid E-unifiability, but such completeness was not our aim. We tried to restrict the number of possible BSE-derivations preserving completeness of the general-purpose method of Section 4. <p> We tried to restrict the number of possible BSE-derivations preserving completeness of the general-purpose method of Section 4. It is not known whether the procedure described in Gallier et.al. <ref> [34] </ref> is complete for theorem 19 Section 6. Related work proving 1 . Even if it is complete, our procedure based on BSE has some advantages over Gallier et.al.'s procedure. <p> In this case, a non-simultaneous problem can have an infinite number of solutions and no finite complete set of solutions. For example, for the rigid E-unification problem f (a) ' a ` 8 x ' a the complete set of solutions in the sense of Gallier et.al. <ref> [34] </ref> consists of one substitution fa=xg (and there is only one answer constraint fx ' ag obtained by our method), but the complete set of solutions in the sense of Petermann [56] is infinite and consists of substitutions ff n (a)=xg, for all n 2 f0; 1; : : :g. <p> This implies that the proof-search by the method of Petermann [56] can be non-terminating even for a limited number of applications of fl-rule (i.e. for a particular tableau), unlike algorithms based on the finite complete sets of unifiers in the sense of Gallier et.al. <ref> [34] </ref> or based on minus-normalization (Kanger [41]). The implementation of the method of [56] uses a completion-based procedure by Beckert [9] of generation of complete sets of rigid E-unifiers. <p> This procedure is developed with the aim of solving a more general problem | so-called mixed E-unification and has been implemented as part of the tableau-based theorem prover 3 T A P . Complete sets of unifiers both in the sense of Gallier et.al. <ref> [34] </ref> and in the sense of Petermann [56] can be computed by this procedure in the case when all variables are treated as rigid. However, the termination is not guaranteed even for complete sets of rigid E-unifiers in the sense of Gallier et.al. [34]. <p> both in the sense of Gallier et.al. <ref> [34] </ref> and in the sense of Petermann [56] can be computed by this procedure in the case when all variables are treated as rigid. However, the termination is not guaranteed even for complete sets of rigid E-unifiers in the sense of Gallier et.al. [34]. Plaisted [58] gives "techniques for incorporating equality into theorem proving; these techniques have a rigid flavor". His method called path paramodulation guarantees termination for a given amplification and, in the case of success "solves the simultaneous rigid E-unification problem", in a sense. <p> However, this does not solve the problem attacked by a number of researchers: extend the method of matings to languages with equality by rigid E-unification. First, unlike <ref> [34] </ref> the search for solutions for a given amplification is not incremental (the method does not allow "branch-wise" computation of solutions to rigid E-unification for separate branches). Second, within a given amplification Plaisted uses factoring rules which involves two branches (paths).
Reference: [35] <author> J.H. Gallier, P. Narendran, D. Plaisted, and W. Snyder. </author> <title> Rigid E-unification is NP-complete. </title> <booktitle> In Proc. IEEE Conference on Logic in Computer Science (LICS), </booktitle> <pages> pages 338-346. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1988. </year>
Reference-contexts: Obviously, this tableau cannot be closed without the use of the functional reflexivity. 1 Since the invention of simultaneous rigid E-unification by Gallier, Raatz and Snyder [36], there were a number of publications on simultaneous rigid E-unification itself and its use in theorem proving, for example Gallier et.al. <ref> [35, 37, 33, 34] </ref>, Baumgartner [5], Beckert and Hahnle [11], Becher and Petermann [8], Beckert [9], Goubault [39] and Petermann [56]. Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable. <p> Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable. There were several faulty proofs of the decidability of this problem (e.g. <ref> [35, 33, 39] </ref>). The refutation procedure for first-order logic with equality using simultaneous rigid E-unification (e.g. Gallier et.al. [34]) was based on a faulty assumption that solutions to simultaneous rigid E-unification can be found by consecutive combination of finite complete sets of solutions for (non-simultaneous) rigid E-unification [33, 35]. <p> The refutation procedure for first-order logic with equality using simultaneous rigid E-unification (e.g. Gallier et.al. [34]) was based on a faulty assumption that solutions to simultaneous rigid E-unification can be found by consecutive combination of finite complete sets of solutions for (non-simultaneous) rigid E-unification <ref> [33, 35] </ref>. Later we [23, 27] proved that simultaneous rigid E-unification is undecidable, which implied that Gallier et.al.'s procedure cannot, in general, find solutions to simultaneous rigid E-unification. <p> Consider now approaches based on the simultaneous rigid E-unifiability by Gallier et.al. [36, 34] and related methods. We do not consider numerous works dedicated to the non-simultaneous rigid E-unifiability. This problem is NP-complete and there exist a number of complete algorithms for its solution (Gallier et.al. <ref> [35, 33] </ref>, Goubault [38], Becher and Petermann [8], De Kogel [29] and Plaisted [58]). Since simultaneous rigid E-unification is undecidable (Degtyarev and Voronkov [23, 27]), their completeness is useless from the viewpoint of general purpose theorem proving as proposed by Gallier et.al. [36, 34]. <p> Even if it is complete, our procedure based on BSE has some advantages over Gallier et.al.'s procedure. For example, for every tableau branch with p equations and q disequations, we consider q rigid equations, while Gallier et.al.'s procedure checks q 2 p rigid equations. Gallier et.al. <ref> [35, 33] </ref> introduced the notion of a complete set of solutions for rigid E-unification, proved finiteness of such sets and gave an algorithm computing finite complete set of solutions.
Reference: [36] <author> J.H. Gallier, S. Raatz, and W. Snyder. </author> <title> Theorem proving using rigid E-unification: Equational matings. </title> <booktitle> In Proc. IEEE Conference on Logic in Computer Science (LICS), </booktitle> <pages> pages 338-346. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: Until recently, most approaches to introducing equality in such matrix-based methods tried to generalize such algorithms by a suitable modification of the notion of a unifier. Such a modification using simultaneous rigid E-unification was introduced by Gallier, Raatz and Snyder <ref> [36] </ref> for the method of matings due to Andrews [1] or the connection method due to Bibel [12]. It can easily be represented in the tableau formalism. The method of matings interleaves two steps: amplification by quantifier duplication and search for mating for a given amplification. <p> Procedures of this kind were used in later formalizations and implementations of the tableau method, the method of matings or the connection method for formulas without equality. For example, Fitting [32] formulates this via an inference rule called MGU atomic closure rule. Gallier, Raatz and Snyder <ref> [36] </ref> tried to describe a similar procedure for logic with equality. For example, Gallier et.al. [34] describe such a procedure in which a substitution condition is formalized via rigid E-unification, and the set of substitution conditions via simultaneous rigid E-unification. Simultaneous rigid E-unification can be formulated as follows. <p> Obviously, this tableau cannot be closed without the use of the functional reflexivity. 1 Since the invention of simultaneous rigid E-unification by Gallier, Raatz and Snyder <ref> [36] </ref>, there were a number of publications on simultaneous rigid E-unification itself and its use in theorem proving, for example Gallier et.al. [35, 37, 33, 34], Baumgartner [5], Beckert and Hahnle [11], Becher and Petermann [8], Beckert [9], Goubault [39] and Petermann [56]. <p> Thus, this (provable) formula cannot be proved using the method of Beckert and Hahnle [11]. Consider now approaches based on the simultaneous rigid E-unifiability by Gallier et.al. <ref> [36, 34] </ref> and related methods. We do not consider numerous works dedicated to the non-simultaneous rigid E-unifiability. This problem is NP-complete and there exist a number of complete algorithms for its solution (Gallier et.al. [35, 33], Goubault [38], Becher and Petermann [8], De Kogel [29] and Plaisted [58]). <p> Since simultaneous rigid E-unification is undecidable (Degtyarev and Voronkov [23, 27]), their completeness is useless from the viewpoint of general purpose theorem proving as proposed by Gallier et.al. <ref> [36, 34] </ref>. Our system BSE can easily be extended to a calculus complete for rigid E-unifiability, but such completeness was not our aim. We tried to restrict the number of possible BSE-derivations preserving completeness of the general-purpose method of Section 4.
Reference: [37] <author> J.H. Gallier, S. Raatz, and W. Snyder. </author> <title> Rigid E-unification and its applications to equational matings. </title> <editor> In H. At Kaci and M. Nivat, editors, </editor> <booktitle> Resolution of Equations in Algebraic Structures, </booktitle> <volume> volume 1, </volume> <pages> pages 151-216. </pages> <publisher> Academic Press, </publisher> <year> 1989. </year> <title> 24 A.Degtyarev and A.Voronkov. What you always wanted to know about rigid E-unification. </title>
Reference-contexts: Obviously, this tableau cannot be closed without the use of the functional reflexivity. 1 Since the invention of simultaneous rigid E-unification by Gallier, Raatz and Snyder [36], there were a number of publications on simultaneous rigid E-unification itself and its use in theorem proving, for example Gallier et.al. <ref> [35, 37, 33, 34] </ref>, Baumgartner [5], Beckert and Hahnle [11], Becher and Petermann [8], Beckert [9], Goubault [39] and Petermann [56]. Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable.
Reference: [38] <author> J. Goubault. </author> <title> A rule-based algorithm for rigid E-unification. </title> <editor> In Georg Gottlob, Alexander Leitsch, and Daniele Mundici, editors, </editor> <booktitle> Computational Logic and Proof Theory. Proceedings of the Third Kurt Godel Colloquium, KGC'93, volume 713 of Lecture Notes in Computer Science, </booktitle> <pages> pages 202-210, </pages> <address> Brno, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Consider now approaches based on the simultaneous rigid E-unifiability by Gallier et.al. [36, 34] and related methods. We do not consider numerous works dedicated to the non-simultaneous rigid E-unifiability. This problem is NP-complete and there exist a number of complete algorithms for its solution (Gallier et.al. [35, 33], Goubault <ref> [38] </ref>, Becher and Petermann [8], De Kogel [29] and Plaisted [58]). Since simultaneous rigid E-unification is undecidable (Degtyarev and Voronkov [23, 27]), their completeness is useless from the viewpoint of general purpose theorem proving as proposed by Gallier et.al. [36, 34].
Reference: [39] <author> J. Goubault. </author> <title> Rigid E-unifiability is DEXPTIME-complete. </title> <booktitle> In Proc. IEEE Conference on Logic in Computer Science (LICS). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: the invention of simultaneous rigid E-unification by Gallier, Raatz and Snyder [36], there were a number of publications on simultaneous rigid E-unification itself and its use in theorem proving, for example Gallier et.al. [35, 37, 33, 34], Baumgartner [5], Beckert and Hahnle [11], Becher and Petermann [8], Beckert [9], Goubault <ref> [39] </ref> and Petermann [56]. Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable. There were several faulty proofs of the decidability of this problem (e.g. [35, 33, 39]). The refutation procedure for first-order logic with equality using simultaneous rigid E-unification (e.g. <p> Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable. There were several faulty proofs of the decidability of this problem (e.g. <ref> [35, 33, 39] </ref>). The refutation procedure for first-order logic with equality using simultaneous rigid E-unification (e.g. Gallier et.al. [34]) was based on a faulty assumption that solutions to simultaneous rigid E-unification can be found by consecutive combination of finite complete sets of solutions for (non-simultaneous) rigid E-unification [33, 35]. <p> Gallier et.al. [35, 33] introduced the notion of a complete set of solutions for rigid E-unification, proved finiteness of such sets and gave an algorithm computing finite complete set of solutions. According to this result, Goubault <ref> [39] </ref> proposed to solve simultaneous rigid E-unifiability by using finite complete sets of solutions to the components of the simultaneous problem. Paper [39] contained faulty results. The undecidability of simultaneous rigid E-unification shows that finite complete sets of solutions do not give a solution to the simultaneous problem. <p> According to this result, Goubault <ref> [39] </ref> proposed to solve simultaneous rigid E-unifiability by using finite complete sets of solutions to the components of the simultaneous problem. Paper [39] contained faulty results. The undecidability of simultaneous rigid E-unification shows that finite complete sets of solutions do not give a solution to the simultaneous problem. The reason for this is that substitutions belonging to complete sets of solutions for different rigid equations are minimal modulo different congruences.
Reference: [40] <author> R. Hahnle, B. Beckert, and S. Gerberding. </author> <title> The many-valued tableau-based theorem prover 3 T A P . Technical Report 30/94, </title> <institution> Universitat Karlsruhe, Fakultat fur Informatik, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: Introduction et.al.'s procedure always terminates. A procedure of this kind is used in the theorem prover 3 T A P <ref> [40] </ref> (R.Hahnle, private communication). In this paper we define a procedure extending the tableau method to logic with equality based on an incomplete procedure for rigid E-unification. Nevertheless, our procedure is complete for first-order logic with equality. Hence, we rehabilitate Gallier et.al.'s program for adding equality to semantic tableaux.
Reference: [41] <author> S. Kanger. </author> <title> A simplified proof method for elementary logic. </title> <editor> In J. Siekmann and G. Wrightson, editors, </editor> <booktitle> Automation of Reasoning. Classical Papers on Computational Logic, </booktitle> <volume> volume 1, </volume> <pages> pages 364-371. </pages> <publisher> Springer Verlag, </publisher> <year> 1983. </year> <note> Originally appeared in 1963. </note>
Reference-contexts: Moreover, our procedure solves rigid equations laying on different tableau branches independently. This strongly improves Gallier et.al.'s procedure which uses solutions of some rigid equations to solve rigid equations on other branches. A similar approach has already been defined by Kanger <ref> [41] </ref> based on a more straightforward way of variable instantiation. As a method for finding a closing substitution, Kanger proposed an algorithm which can now be characterized as an incomplete (but terminating) algorithm for simultaneous rigid E-unifiability. <p> This implies that the proof-search by the method of Petermann [56] can be non-terminating even for a limited number of applications of fl-rule (i.e. for a particular tableau), unlike algorithms based on the finite complete sets of unifiers in the sense of Gallier et.al. [34] or based on minus-normalization (Kanger <ref> [41] </ref>). The implementation of the method of [56] uses a completion-based procedure by Beckert [9] of generation of complete sets of rigid E-unifiers.
Reference: [42] <author> J. Kruskal. </author> <title> Well quasi ordering, the tree problem and Vazsonyi's conjecture. </title> <journal> Transactions of the American Mathematical Society, </journal> <volume> 95 </volume> <pages> 210-225, </pages> <year> 1960. </year>
Reference-contexts: Then there are numbers i; j such that i &lt; j and the constraint t i t j is unsatisfiable. Proof. Following Kruskal <ref> [42] </ref> we introduce a partial ordering on terms as the smallest reflexive and transitive relation satisfying 2 Suggested by G.Becher (private communication). 9 Section 3. <p> Rigid basic superposition 1. f (s 1 ; : : : ; s n ) s i for all i 2 f1; : : : ; ng; 2. if s t then r [s] r [t]. By Kruskal's Tree Theorem <ref> [42] </ref> there exist i; j such that i &lt; j and t j t i . It is easy to see that the constraint t i t j is unsatisfiable. 2 Similar statements have been proven by Dershowitz [16] and Plaisted [57].
Reference: [43] <author> R.C.T. Lee and C.L. Chang. </author> <title> Symbolic Logic and Mechanical Theorem Proving. </title> <publisher> Academic Press, </publisher> <year> 1973. </year>
Reference-contexts: For example, rigid clause paramodulation of Plaisted [58] is essentially paramodulation and resolution over a set of clauses, where all substitutions are applied to the whole set of clauses. A similar system for resolution has been proposed earlier by Chang [15] as V-resolution and by Chang and Lee <ref> [43] </ref> for resolution with paramodulation as V-resolution and V-paramodulation. We shall use the term "rigid basic superposition" to denote a "rigid" version of basic superposition. We formalize rigid basic superposition using constraints that is close to the presentation of Nieuwenhuis and Rubio [54].
Reference: [44] <author> D.W. Loveland. </author> <title> Mechanical theorem proving by model elimination. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 15 </volume> <pages> 236-251, </pages> <year> 1968. </year>
Reference: [45] <author> D.W. Loveland. </author> <title> Automated Theorem Proving: a Logical Basis. </title> <publisher> North Holland, </publisher> <year> 1978. </year>
Reference-contexts: Tableau basic superposition Section 5 Tableau basic superposition As a simple consequence of our results, we prove a completeness result for a paramodulation rule working on tableaux. A paramodulation rule working directly on tableaux was proposed by Loveland <ref> [45] </ref> in the context of model elimination and later by Fitting [32]. However, their formulations have all disadvantages of the early paramodulation rule of Robinson and Wos [60]: 1. Functional reflexivity rule is used; 2. Paramodulation into variables is allowed; 3. <p> As a consequence, for a given tableau expansion there may be an infinite sequence of paramodula-tions, in particular due to the use of functional reflexivity or increasing applications of paramodula-tion. Since the publication of Loveland's book <ref> [45] </ref>, no improvements of the paramodulation-based tableau calculi have been described except for Plaisted [58] who has shown how to transform derivations with resolution and paramodulation to tableaux by introducing a tableau factoring rule. Here we show that paramodulation is complete under the following restrictions: 1.
Reference: [46] <author> U. Martin. </author> <title> How to choose weights in the Knuth-Bendix ordering. In Rewriting Technics and Applications, </title> <booktitle> volume 256 of Lecture Notes in Computer Science, </booktitle> <pages> pages 42-53, </pages> <year> 1987. </year>
Reference-contexts: The symbol ; fl denotes the reflexive and transitive closure of ;. Example 3.5 Consider the rigid equation ha ' a; hx ' a; hb ' f y ` 8 y ' gf y. The ordering is the Knuth-Bendix ordering (see Martin <ref> [46] </ref>) in which all weights of symbols are equal to 1 and which uses the precedence relation f &gt; h &gt; b &gt; a. Under this ordering we have ht a and f t hb for every ground term t.
Reference: [47] <author> S.Yu. Maslov. </author> <title> The inverse method of establishing deducibility in the classical predicate calculus. </title> <journal> Soviet Mathematical Doklady, </journal> <volume> 5 </volume> <pages> 1420-1424, </pages> <year> 1964. </year>
Reference: [48] <author> S.Yu. Maslov. </author> <title> An invertible sequential variant of constructive predicate calculus (in Russian). </title> <journal> Zapiski Nauchnyh Seminarov LOMI, </journal> <volume> 4, </volume> <year> 1967. </year> <note> English Translation in: Seminars in Mathematics: </note> <institution> Steklov Math. Inst. 4, Consultants Bureau, NY-London, </institution> <year> 1969, </year> <month> p.36-42. </month>
Reference-contexts: In the terminology of Fitting [32] it means that a closing substitution can be found after a sufficiently high (but not necessarily minimal) number of applications of the fl-rule. The approach to substitutions based on this idea has been characterized as minus-normalization in Matulis [49] and Maslov <ref> [48] </ref>. However, for a language with function symbols minus-normalization is interesting mostly theoretically. Even in simplest cases, minus-normalization requires a huge number of instantiations.
Reference: [49] <author> V.A. Matulis. </author> <title> On variants of classical predicate calculus with the unique deduction tree (in Russian). </title> <journal> Soviet Mathematical Doklady, </journal> <volume> 148 </volume> <pages> 768-770, </pages> <year> 1963. </year>
Reference-contexts: In the terminology of Fitting [32] it means that a closing substitution can be found after a sufficiently high (but not necessarily minimal) number of applications of the fl-rule. The approach to substitutions based on this idea has been characterized as minus-normalization in Matulis <ref> [49] </ref> and Maslov [48]. However, for a language with function symbols minus-normalization is interesting mostly theoretically. Even in simplest cases, minus-normalization requires a huge number of instantiations.
Reference: [50] <author> G. Mints. </author> <title> Gentzen-type systems and resolution rules. part I. propositional logic. </title> <editor> In P. Martin-Lof and G. Mints, editors, </editor> <booktitle> COLOG-88, volume 417 of Lecture Notes in Computer Science, </booktitle> <pages> pages 198-231. </pages> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: In fact, path paramodulation of Plaisted [58] simulates resolution-paramodulation inference in a connection-like calculus. Although it is not noted in [58], but this technique has been demonstrated for resolution in many papers, for example by Bibel [12], Eder [30, 31], Mints <ref> [50] </ref>, Baumgartner and Furbach [6] and Avron [2]. The generalization of this simulation to paramodulation is straightforward.
Reference: [51] <author> M. Moser, C. Lynch, and J. Steinbach. </author> <title> Model elimination with basic ordered paramodula-tion. </title> <type> Technical Report AR-95-11, </type> <institution> Fakultat fur Informatik, Technische Universitat Munchen, Munchen, </institution> <year> 1995. </year>
Reference-contexts: The equation solution is even more restricted by the use of orderings, basic simplification and subsumption. A similar idea: combination of proof-search in tableaux with a bottom-up equality saturation of the original formula, is used in <ref> [51] </ref> for constructing a goal-directed version of model elimination and paramodulation. One of advantages of the tableau method is its applicability to non-classical logics. However, handling equality in non-classical logics seems to be much more difficult problem than that in classical logic.
Reference: [52] <author> R. Nieuwenhuis and A. Rubio. </author> <title> Basic superposition is complete. </title> <booktitle> In ESOP'92, volume 582 of Lecture Notes in Computer Science, </booktitle> <pages> pages 371-389. </pages> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Some results on minus-normalization are proved by Norgela [55]. In this paper we describe a logical calculus BSE for rigid E-unification based on the rigid basic superposition rule that is an adaptation of basic superposition of Bachmair et.al. [3] and Nieuwenhuis and Rubio <ref> [52] </ref>, for "rigid" variables. For a given rigid E-unification problem (called rigid equation in this paper), there is only a finite number of BSE-derivations for this problem. Thus, BSE gives us an algorithm returning a finite set of solutions to this rigid equation.
Reference: [53] <author> R. Nieuwenhuis. </author> <title> Simple LPO constraint solving methods. </title> <journal> Information Processing Letters, </journal> <volume> 47 </volume> <pages> 65-69, </pages> <year> 1993. </year> <title> 25 Section 6. Related work </title>
Reference-contexts: Constraints C 1 and C 2 are called equivalent iff they have the same sets of solutions. We assume that there is an effective procedure for checking constraint satisfiability. For example, there are efficient methods for solving ordering constraints for lexicographic path orderings given by Nieuwenhuis <ref> [53] </ref> and Nieuwenhuis and Rubio [54]. Definition 3.2 A rigid equation is an expression of the form E ` 8 s ' t, where E is a finite multiset of equations and s; t are terms. Its solution is any substitution such that E ` s ' t 1 .
Reference: [54] <author> R. Nieuwenhuis and A. Rubio. </author> <title> Theorem proving with ordering and equality constrained clauses. </title> <journal> Journal of Symbolic Computations, </journal> <volume> 19 </volume> <pages> 321-351, </pages> <year> 1995. </year>
Reference-contexts: We shall use the term "rigid basic superposition" to denote a "rigid" version of basic superposition. We formalize rigid basic superposition using constraints that is close to the presentation of Nieuwenhuis and Rubio <ref> [54] </ref>. Definition 3.1 (Constraints) By an (ordering) constraint we mean a set of expressions which can be of two kinds: an equality constraint s ' t, or an inequality constraint s t, where s; t are terms. <p> We assume that there is an effective procedure for checking constraint satisfiability. For example, there are efficient methods for solving ordering constraints for lexicographic path orderings given by Nieuwenhuis [53] and Nieuwenhuis and Rubio <ref> [54] </ref>. Definition 3.2 A rigid equation is an expression of the form E ` 8 s ' t, where E is a finite multiset of equations and s; t are terms. Its solution is any substitution such that E ` s ' t 1 . <p> The negation normal form of :~ is 8xyzu ((a ' b ^ g (x; u; v) 6' g (y; f c; f d)) _ (c ' d ^ g (u; x; y) 6' g (v; f a; f b))) The ordering is the lexicographic path ordering (see e.g. <ref> [54] </ref>) based on the precedence g &gt; f &gt; a &gt; b &gt; c &gt; d. For purely illustrative purpose, we shall display tableaux in the tree form.
Reference: [55] <author> S.A. Norgela. </author> <title> On the size of derivations under minus-normalization (in Russian). In V.A. Smirnov, editor, The Theory of Logical Inference. </title> <booktitle> Institute of Philosophy, </booktitle> <address> Moscow, </address> <year> 1974. </year>
Reference-contexts: Moreover, it was proved that the use of minus-normalization can lead to considerable growth of derivations. Some results on minus-normalization are proved by Norgela <ref> [55] </ref>. In this paper we describe a logical calculus BSE for rigid E-unification based on the rigid basic superposition rule that is an adaptation of basic superposition of Bachmair et.al. [3] and Nieuwenhuis and Rubio [52], for "rigid" variables.
Reference: [56] <author> U. Petermann. </author> <title> A complete connection calculus with rigid E-unification. </title> <booktitle> In JELIA'94, volume 838 of Lecture Notes in Computer Science, </booktitle> <pages> pages 152-166, </pages> <year> 1994. </year>
Reference-contexts: simultaneous rigid E-unification by Gallier, Raatz and Snyder [36], there were a number of publications on simultaneous rigid E-unification itself and its use in theorem proving, for example Gallier et.al. [35, 37, 33, 34], Baumgartner [5], Beckert and Hahnle [11], Becher and Petermann [8], Beckert [9], Goubault [39] and Petermann <ref> [56] </ref>. Some of these articles were based on the conjecture that simultaneous rigid E-unification is decidable. There were several faulty proofs of the decidability of this problem (e.g. [35, 33, 39]). The refutation procedure for first-order logic with equality using simultaneous rigid E-unification (e.g. <p> Completeness of Gallier et.al.'s procedure or existence of a procedure complete for first-order logic with equality based on some set of solutions to rigid E-unification was an open problem (see e.g. Petermann <ref> [56] </ref> and Beckert [10]). Our paper gives a positive solution to this problem. An advantage of Gallier et.al.'s procedure is that it allows one to extend the proof-search technology developed for tableaux without equality to the case with equality, using solutions to rigid E-unification instead of most general unifiers. <p> The undecidability of simultaneous rigid E-unification shows that finite complete sets of solutions do not give a solution to the simultaneous problem. The reason for this is that substitutions belonging to complete sets of solutions for different rigid equations are minimal modulo different congruences. Petermann <ref> [56] </ref> introduces a "complete connection calculus with rigid E-unification". Here the completeness is achieved by changing the notion of a complete set of unifiers so that solutions to all subproblems are compared modulo the same congruence (generated by the empty equality theory). <p> (a) ' a ` 8 x ' a the complete set of solutions in the sense of Gallier et.al. [34] consists of one substitution fa=xg (and there is only one answer constraint fx ' ag obtained by our method), but the complete set of solutions in the sense of Petermann <ref> [56] </ref> is infinite and consists of substitutions ff n (a)=xg, for all n 2 f0; 1; : : :g. This implies that the proof-search by the method of Petermann [56] can be non-terminating even for a limited number of applications of fl-rule (i.e. for a particular tableau), unlike algorithms based on <p> one answer constraint fx ' ag obtained by our method), but the complete set of solutions in the sense of Petermann <ref> [56] </ref> is infinite and consists of substitutions ff n (a)=xg, for all n 2 f0; 1; : : :g. This implies that the proof-search by the method of Petermann [56] can be non-terminating even for a limited number of applications of fl-rule (i.e. for a particular tableau), unlike algorithms based on the finite complete sets of unifiers in the sense of Gallier et.al. [34] or based on minus-normalization (Kanger [41]). The implementation of the method of [56] uses a completion-based <p> method of Petermann <ref> [56] </ref> can be non-terminating even for a limited number of applications of fl-rule (i.e. for a particular tableau), unlike algorithms based on the finite complete sets of unifiers in the sense of Gallier et.al. [34] or based on minus-normalization (Kanger [41]). The implementation of the method of [56] uses a completion-based procedure by Beckert [9] of generation of complete sets of rigid E-unifiers. This procedure is developed with the aim of solving a more general problem | so-called mixed E-unification and has been implemented as part of the tableau-based theorem prover 3 T A P . <p> Complete sets of unifiers both in the sense of Gallier et.al. [34] and in the sense of Petermann <ref> [56] </ref> can be computed by this procedure in the case when all variables are treated as rigid. However, the termination is not guaranteed even for complete sets of rigid E-unifiers in the sense of Gallier et.al. [34].
Reference: [57] <author> D.A. Plaisted. </author> <title> A simple non-termination test for the Knuth-Bendix method. </title> <booktitle> In Proc. 8th CADE, volume 230 of Lecture Notes in Computer Science, </booktitle> <pages> pages 79-88, </pages> <year> 1986. </year>
Reference-contexts: By Kruskal's Tree Theorem [42] there exist i; j such that i &lt; j and t j t i . It is easy to see that the constraint t i t j is unsatisfiable. 2 Similar statements have been proven by Dershowitz [16] and Plaisted <ref> [57] </ref>. Theorem 3.9 (Termination of BSE) For any constraint rigid equation R C, there exists a finite number of derivations from R C. Proof. Suppose that there exists an infinite number of derivations from R C.
Reference: [58] <author> D.A. Plaisted. </author> <title> Special cases and substitutes for rigid E-unification. </title> <type> Technical Report MPI-I-95-2-010, </type> <institution> Max-Planck-Institut fur Informatik, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: In particular, for a given amplification Gallier 1 The system of clauses corresponding to this example improves a result proved in Plaisted <ref> [58] </ref> by using a more complicated example. <p> In this system of clauses a ' b _ c ' d c ' d _ g (x; u; v) 6' g (y; fc; fd) there is no refutation even by unrestricted rigid paramodulation (i.e. using non-ordered rigid paramodulation and paramodulation into variables), while Plaisted <ref> [58] </ref> gives an example showing incompleteness of ordered rigid paramod-ulation only. 3 Section 1. Introduction et.al.'s procedure always terminates. A procedure of this kind is used in the theorem prover 3 T A P [40] (R.Hahnle, private communication). <p> For the inclusion of multisets we shall use notation S 1 v S 2 . 6 A.Degtyarev and A.Voronkov. What you always wanted to know about rigid E-unification. Section 3 Rigid basic superposition The term "rigid paramodulation" has already been used by Becher and Petermann [8] and Plaisted <ref> [58] </ref> for systems of inference rules in which all variables are treated as "rigid". For example, rigid clause paramodulation of Plaisted [58] is essentially paramodulation and resolution over a set of clauses, where all substitutions are applied to the whole set of clauses. <p> Section 3 Rigid basic superposition The term "rigid paramodulation" has already been used by Becher and Petermann [8] and Plaisted <ref> [58] </ref> for systems of inference rules in which all variables are treated as "rigid". For example, rigid clause paramodulation of Plaisted [58] is essentially paramodulation and resolution over a set of clauses, where all substitutions are applied to the whole set of clauses. A similar system for resolution has been proposed earlier by Chang [15] as V-resolution and by Chang and Lee [43] for resolution with paramodulation as V-resolution and V-paramodulation. <p> Since the publication of Loveland's book [45], no improvements of the paramodulation-based tableau calculi have been described except for Plaisted <ref> [58] </ref> who has shown how to transform derivations with resolution and paramodulation to tableaux by introducing a tableau factoring rule. Here we show that paramodulation is complete under the following restrictions: 1. No functional reflexivity is needed; 2. Paramodulation into variables is not allowed; 3. <p> We do not consider numerous works dedicated to the non-simultaneous rigid E-unifiability. This problem is NP-complete and there exist a number of complete algorithms for its solution (Gallier et.al. [35, 33], Goubault [38], Becher and Petermann [8], De Kogel [29] and Plaisted <ref> [58] </ref>). Since simultaneous rigid E-unification is undecidable (Degtyarev and Voronkov [23, 27]), their completeness is useless from the viewpoint of general purpose theorem proving as proposed by Gallier et.al. [36, 34]. <p> However, the termination is not guaranteed even for complete sets of rigid E-unifiers in the sense of Gallier et.al. [34]. Plaisted <ref> [58] </ref> gives "techniques for incorporating equality into theorem proving; these techniques have a rigid flavor". His method called path paramodulation guarantees termination for a given amplification and, in the case of success "solves the simultaneous rigid E-unification problem", in a sense. <p> Second, within a given amplification Plaisted uses factoring rules which involves two branches (paths). As a consequence, even when the original formula contains no equality, his method results in the standard tableau calculus plus the factoring rule. In fact, path paramodulation of Plaisted <ref> [58] </ref> simulates resolution-paramodulation inference in a connection-like calculus. Although it is not noted in [58], but this technique has been demonstrated for resolution in many papers, for example by Bibel [12], Eder [30, 31], Mints [50], Baumgartner and Furbach [6] and Avron [2]. <p> As a consequence, even when the original formula contains no equality, his method results in the standard tableau calculus plus the factoring rule. In fact, path paramodulation of Plaisted <ref> [58] </ref> simulates resolution-paramodulation inference in a connection-like calculus. Although it is not noted in [58], but this technique has been demonstrated for resolution in many papers, for example by Bibel [12], Eder [30, 31], Mints [50], Baumgartner and Furbach [6] and Avron [2]. The generalization of this simulation to paramodulation is straightforward.
Reference: [59] <author> D. Prawitz. </author> <title> An improved proof procedure. </title> <editor> In J. Siekmann and G. Wrightson, editors, </editor> <booktitle> Automation of Reasoning. Classical Papers on Computational Logic, </booktitle> <volume> volume 1, </volume> <pages> pages 162-201. </pages> <publisher> Springer Verlag, </publisher> <year> 1983. </year> <note> Originally appeared in 1960. </note>
Reference-contexts: It can easily be represented in the tableau formalism. The method of matings interleaves two steps: amplification by quantifier duplication and search for mating for a given amplification. For formulas in disjunctive normal form this method was formulated earlier by Prawitz <ref> [59] </ref>. In this case amplification is represented by a matrix and mating is represented by a set of simultaneously satisfiable substitution conditions (mated pairs). Prawitz proposed a procedure for constructing substitution conditions one by one, closing the corresponding paths in the matrix through search with backtracking.
Reference: [60] <author> G. Robinson and L.T. Wos. </author> <title> Paramodulation and theorem-proving in first order theories with equality. </title> <editor> In Meltzer and Michie, editors, </editor> <booktitle> Machine Intelligence, </booktitle> <volume> volume 4, </volume> <pages> pages 135-150. </pages> <publisher> Edinburgh University Press, Edinburgh, </publisher> <year> 1969. </year>
Reference-contexts: A paramodulation rule working directly on tableaux was proposed by Loveland [45] in the context of model elimination and later by Fitting [32]. However, their formulations have all disadvantages of the early paramodulation rule of Robinson and Wos <ref> [60] </ref>: 1. Functional reflexivity rule is used; 2. Paramodulation into variables is allowed; 3. Increasing applications of paramodulation are allowed (for example, x can be rewritten to f (x).
Reference: [61] <author> J. Schumann. </author> <title> Tableau-based theorem provers: Systems and implementations. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 13(3) </volume> <pages> 409-421, </pages> <year> 1994. </year>
Reference-contexts: At the same time tableau methods of automated deduction play an important role in various areas of artificial intelligence and computer science | see e.g. special issues of the Journal of Automated Reasoning, v. 13, no. 2,3, 1994. These issues contain a survey by Schumann <ref> [61] </ref> of implementations of tableau-based provers. Among 24 systems mentioned in the survey only two are able to handle equality. The system PROTEIN [7] (and also KoMeT [13]) implement the modification method of Brand [14]. <p> In particular, the symmetry and the transitivity axioms must be explicitly applied to all positive occurrences of the equality predicate. Recently, we proposed a new translation method based on the so-called basic folding demonstrated for Horn clauses in [22]. According to Schumann <ref> [61] </ref>, the system 3 T A P uses the method of Beckert and Hahnle [11]. Paper [11] claims the completeness of the method, but this claim is not true. The method expands the tableau using the standard tableau rules, including fl-rules.
Reference: [62] <author> R. Shostak. </author> <title> An algorithm for reasoning about equality. </title> <journal> Communications of the ACM, </journal> <volume> 21 </volume> <pages> 583-585, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: For such formulas provability can be tested by the congruence closure algorithm <ref> [62] </ref>. For the inclusion of multisets we shall use notation S 1 v S 2 . 6 A.Degtyarev and A.Voronkov. What you always wanted to know about rigid E-unification.
Reference: [63] <author> R.M. Smullyan. </author> <title> First-Order Logic. </title> <publisher> Springer Verlag, </publisher> <year> 1968. </year>
Reference-contexts: After several applications of tableau expansion rules to the negation normal form of :' (ff-, fi-and fl-rules in the terminology of Smullyan <ref> [63] </ref> or Fitting [32]) we obtain the following tableau (we only consider the part of the tableau containing literals, omitting non-literal formulas): 2 A.Degtyarev and A.Voronkov.
Reference: [64] <author> A. Voronkov. </author> <title> Proof search in intuitionistic logic with equality, or back to simultaneous rigid E-unification. In M.A. </title> <editor> McRobbie and J.K. Slaney, editors, </editor> <booktitle> Automated Deduction | CADE-13, volume 1104 of Lecture Notes in Computer Science, </booktitle> <pages> pages 32-46, </pages> <address> New Brunswick, NJ, USA, </address> <year> 1996. </year> <title> 26 A.Degtyarev and A.Voronkov. What you always wanted to know about rigid E-unification. </title>
Reference-contexts: One of advantages of the tableau method is its applicability to non-classical logics. However, handling equality in non-classical logics seems to be much more difficult problem than that in classical logic. For example, it is shown by Voronkov <ref> [64] </ref> that procedures for intuitionistic logic with equality must handle simultaneous rigid E-unification. This implies that our method based on BSE does not give a complete procedure for intuitionistic logic with equality.
References-found: 64

