URL: ftp://ftp.cs.berkeley.edu/ucb/sprite/papers/trans-proc-mig.ps
Refering-URL: http://www.cs.berkeley.edu/projects/sprite/sprite.papers.html
Root-URL: http://www.cs.berkeley.edu
Email: Summary  
Title: Transparent Process Migration: Design Alternatives and the Sprite Implementation  
Author: Fred Douglis John Ousterhout 
Keyword: Process migration, Load sharing, Operating systems, Distributed Systems, Experience  
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division Electrical Engineering and Computer Sciences University of California  
Abstract: The Sprite operating system allows executing processes to be moved between hosts at any time. We use this process migration mechanism to o*oad work onto idle machines, and also to evict migrated processes when idle workstations are reclaimed by their owners. Sprite's migration mechanism provides a high degree of transparency both for migrated processes and for users. Idle machines are identified, and eviction is invoked, automatically by daemon processes. On Sprite it takes up to a few hundred milliseconds on SPARCstation 1 workstations to perform a remote exec, while evictions typically occur in a few seconds. The pmake program uses remote invocation to invoke tasks concurrently. Compilations commonly obtain speedup factors in the range of three to six; they are limited primarily by contention for centralized resources such as file servers. CPU-bound tasks such as simulations can make more effective use of idle hosts, obtaining as much as eight-fold speedup over a period of hours. Process migration has been in regular service for over two years. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> D. Nichols. </author> <title> Using idle workstations in a shared computing environment. </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 5-12, </pages> <address> Austin, TX, </address> <month> November </month> <year> 1987. </year> <note> ACM. </note>
Reference: 2. <author> E. Roberts and J. Ellis. </author> <title> parmake and dp: Experience with a distributed, parallel implementation of make. </title> <booktitle> In Proceedings from the Second Workshop on Large-Grained Parallelism. </booktitle> <institution> Software Engineering Institute, Carnegie-Mellon University, </institution> <month> November </month> <year> 1987. </year> <note> Report CMU/SEI-87-SR-5. </note>
Reference: 3. <author> M. Theimer, K. Lantz, and D. Cheriton. </author> <title> Preemptable remote execution facilities for the V-System. </title> <booktitle> In Proceedings of the 10th Symposium on Operating System Principles, </booktitle> <pages> pages 2-12, </pages> <month> December </month> <year> 1985. </year>
Reference: 4. <author> E. Zayas. </author> <title> Attacking the process migration bottleneck. </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 13-22, </pages> <address> Austin, TX, </address> <month> November </month> <year> 1987. </year>
Reference: 5. <author> G. J. Popek and B. J. Walker, </author> <title> editors. The LOCUS Distributed System Architecture. </title> <booktitle> Computer Systems Series. </booktitle> <publisher> The MIT Press, </publisher> <year> 1985. </year>
Reference: 6. <author> A. Barak, A. Shiloh, and R. Wheeler. </author> <title> Flood prevention in the MOSIX load-balancing scheme. </title> <journal> IEEE Computer Society Technical Committee on Operating Systems Newsletter, </journal> <volume> 3(1) </volume> <pages> 23-27, </pages> <month> Winter </month> <year> 1989. </year>
Reference: 7. <author> S. I. Feldman. </author> <title> Make | a program for maintaining computer programs. </title> <journal> Software|Practice and Experience, </journal> <volume> 9(4) </volume> <pages> 255-265, </pages> <month> April </month> <year> 1979. </year>
Reference: 8. <author> M. Theimer. </author> <title> Preemptable Remote Execution Facilities for Loosely-Coupled Distributed Systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1986. </year>
Reference: 9. <author> Y. Artsy and R. Finkel. </author> <title> Designing a process migration facility: The Charlotte experience. </title> <journal> IEEE Computer, </journal> <volume> 22(9) </volume> <pages> 47-56, </pages> <month> September </month> <year> 1989. </year>
Reference: 10. <author> J. K. Ousterhout, A. R. Cherenson, F. Douglis, M. N. Nelson, and B. B. Welch. </author> <title> The Sprite network operating system. </title> <journal> IEEE Computer, </journal> <volume> 21(2) </volume> <pages> 23-36, </pages> <month> February </month> <year> 1988. </year>
Reference: 11. <author> M. Nelson, B. Welch, and J. Ousterhout. </author> <title> Caching in the Sprite network file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 134-154, </pages> <month> February </month> <year> 1988. </year>
Reference: 12. <author> A. D. Birrell and B. J. Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference: 13. <institution> Computer Science Division, University of California, Berkeley. </institution> <note> UNIX User's Reference Manual, 4.3 Berkeley Software Distribution, Virtual VAX-11 Version, </note> <month> April </month> <year> 1986. </year>
Reference: 14. <author> M. Litzkow. </author> <title> Remote UNIX. </title> <booktitle> In Proceedings of the USENIX 1987 Summer Conference, </booktitle> <month> June </month> <year> 1987. </year>
Reference: 15. <author> M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: A new kernel foundation for UNIX development. </title> <booktitle> In Proceedings of the USENIX 1986 Summer Conference, </booktitle> <month> July </month> <year> 1986. </year>
Reference: 16. <author> D. R. Cheriton. </author> <title> The V distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 31(3) </volume> <pages> 314-333, </pages> <month> March </month> <year> 1988. </year>
Reference: 17. <author> E. Zayas. </author> <title> The Use of Copy-On-Reference in a Process Migration System. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> April </month> <year> 1987. </year> <note> Report No. CMU-CS-87-121. </note>
Reference: 18. <author> K. Li and P. Hudak. </author> <title> Memory coherence in shared virtual memory systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(4) </volume> <pages> 321-359, </pages> <month> November </month> <year> 1989. </year> <month> 26 </month>
Reference: 19. <author> D. L. Eager, E. D. Lazowska, and J. Zahorjan. </author> <title> The limited performance benefits of migrating active processes for load sharing. </title> <booktitle> In ACM SIGMETRICS 1988, </booktitle> <month> May </month> <year> 1988. </year>
Reference: 20. <author> D. L. Eager, E. D. Lazowska, and J. Zahorjan. </author> <title> Adaptive load sharing in homogeneous distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(5):662-675, </volume> <month> May </month> <year> 1986. </year>
Reference: 21. <author> E. H. Baalbergen. </author> <title> Parallel and distributed compilations in loosely-coupled systems: A case study. </title> <booktitle> In Proceedings of Workshop on Large Grain Parallelism, </booktitle> <address> Providence, RI, </address> <month> October </month> <year> 1986. </year>
Reference: 22. <author> F. Douglis. </author> <title> Transparent Process Migration in the Sprite Operating System. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <address> CA 94720, </address> <month> September </month> <year> 1990. </year> <note> Available as Technical Report UCB/CSD 90/598. </note>
Reference: 23. <author> F. Douglis and J. Ousterhout. </author> <title> Process migration in the Sprite operating system. </title> <booktitle> In Proceedings of the 7th International Conference on Distribu ted Computing Systems, </booktitle> <pages> pages 18-25, </pages> <address> Berlin, West Germany, </address> <month> September </month> <year> 1987. </year> <journal> IEEE. </journal> <volume> 27 </volume>
References-found: 23

