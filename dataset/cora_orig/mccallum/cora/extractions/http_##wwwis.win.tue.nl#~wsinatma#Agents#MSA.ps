URL: http://wwwis.win.tue.nl/~wsinatma/Agents/MSA.ps
Refering-URL: http://wwwis.win.tue.nl/~wsinatma/
Root-URL: http://www.win.tue.nl
Email: Email: mdalmeijer@baan.nl  Email: fhammerjwsinatmag@win.tue.nl  
Title: Mobile Software Agents  
Author: M. Dalmeijer a D.K. Hammer b A.T.M. Aerts b 
Note: Submitted to: Computers in Industry.  
Address: Ede, Netherlands.  Eindhoven, Netherlands.  
Affiliation: a Baan Labs,  b Department of Mathematics and Computing Science, Eindhoven University of Technology,  
Abstract: In this article we discuss an architecture for mobile agents. We focus on the components in the architecture that provide efficient, reliable, secure transportation of agents and ditto communication between agents and their environment. These components provide the basis for building a wide variety of agents with various levels of intelligence. We further discuss a prototype of the system, built in Java. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Browne, P.J. Sackett, and J.C. Wortmann. </author> <title> Future manufacturing systems towards the extended enterprise. </title> <journal> Computers and Industry, </journal> <volume> 25 </volume> <pages> 235-254, </pages> <year> 1995. </year> <title> Including references. </title>
Reference-contexts: It will be a matter of experimenting and taking measurements to find out which mix of communication will perform best. A workflow management system uses the mobile agent architecture in the concept of an extended virtual enterprises <ref> [1] </ref>. Current work at Baan Labs addresses the extension and refinement of this system.
Reference: [2] <author> Mary Campione and Kathy Walrath. </author> <title> The Java Tutorial. The Java Series. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference: [3] <author> Manfred Dalmeijer. </author> <title> Mobile agents design of an architecture for mobile agents. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, Eindhoven, Netherlands, </institution> <year> 1996. </year>
Reference-contexts: Furthermore, CORBA does not support object serialisation and deserialisation. This means that for dock-to-dock (see next section) communication we will have to use RMI. 3 Architecture This section provides an overview of the mobile agent architecture that is being build at Baan Labs. More details can be found in <ref> [3] </ref>. Mobile agents need locations where they can enter a node and "anchor". In this document these locations are named docks 3 .
Reference: [4] <author> Tim Finin, Jay Weber, et al. </author> <title> Specification of the KQML Agent-Communication Language. The DARPA Knowledge Sharing Initiative, 1993. </title> <type> draft. </type>
Reference-contexts: KQML forms a complement to languages for a specific domain content, for example KIF [5]. KQML can be implemented on top of various types of transport services such as OMG's CORBA or Javasoft's RMI. A KQML message is called a performative. The KQML specification <ref> [4] </ref> defines a considerable number of reserved performatives. A KQML-compliant agent (or any software component that "speaks" KQML) does not have to support all 2 A good introduction to the OSI model can be found in [16] 3 reserved performatives.
Reference: [5] <author> Michael R. Genesereth and Richard E. Fikes. </author> <title> Knowledge interchange format. </title> <type> Technical Report Logic-92-1, </type> <institution> Stanford University, </institution> <year> 1994. </year>
Reference-contexts: Currently it is the only open standard. This language has been specifically designed for agent-like programs, thus sustaining autonomous and asynchronous operation. KQML forms a complement to languages for a specific domain content, for example KIF <ref> [5] </ref>. KQML can be implemented on top of various types of transport services such as OMG's CORBA or Javasoft's RMI. A KQML message is called a performative. The KQML specification [4] defines a considerable number of reserved performatives.
Reference: [6] <author> Michael R. Genesereth and Steven P. Ketchpel. </author> <title> Software agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 48-53, </pages> <year> 1994. </year>
Reference-contexts: For this purpose the ARPA Knowledge Sharing Effort proposed an ACL called KQML, which will be discussed below. The use of an ACL implies that an agent should abide to the following principles <ref> [6] </ref>: (i) Veracity; an agent should tell (what it "thinks" is) the truth. (ii) Autonomy; an agent should have some degree of independence.
Reference: [7] <author> Timothy A. Howes. </author> <title> The lightweight directory access protocol: X.500 lite. </title> <type> Technical Report CITI Technical Report 95-8, </type> <institution> University of Michigan, </institution> <year> 1995. </year>
Reference-contexts: JNDI provides a generic interface to a variety of directories. As JNDI does not require a particular directory service, the user is free to select one. 12 Although in principle any JNDI-supported directory service can be used, di-rectories based on the LDAP-standard <ref> [7] </ref> are rapidly becoming more popular. LDAP uses a subset of the full X.500 5 [19] functionality. LDAP clients are generally smaller and faster than X.500 clients.
Reference: [8] <author> Joseph Kiniry and Daniel Zimmerman. </author> <title> A hands-on look at java mobile agents. </title> <journal> IEEE Internet Computing, </journal> <volume> 1(4) </volume> <pages> 21-30, </pages> <year> 1997. </year>
Reference-contexts: In RPC-based applications the interaction between local and remote program parts is often very complex. In addition to this, some applications can be more naturally modeled in the mobile agent paradigm than in the RPC paradigm. A drawback is that communication in KQML involves a considerable amount of complexity <ref> [8] </ref>. 5 Conclusion We have discussed an architecture for mobile software agents. Experiments with prototypes of the system have demonstrated that agent provide a viable mechanism for asynchronous forms of communication and service provision. We have focussed on a pure agent system.
Reference: [9] <author> David Kotz et al. </author> <title> Agent tcl. </title> <journal> IEEE Internet Computing, </journal> <volume> 1(4) </volume> <pages> 58-67, </pages> <year> 1997. </year>
Reference-contexts: Docks provide agents with a facility that enables them to communicate with other agents and resources on the node they are visiting. 3 The concept of a dock can be found in most mobile agent architectures, e.g. Servers in Agent Tcl <ref> [9] </ref> or Aglet Hosts in the Aglet architecture [17]. 5 Fig. 1. Interaction Behaviour An agent can travel as it pleases to accomplish its task. On its voyage, hopping from node to node, it interacts with docks and (through the docks) with other agents and software objects.
Reference: [10] <author> Rine le Comte. </author> <title> Business objects & workflow. </title> <type> Technical report, </type> <institution> Baan Technology Labs, </institution> <year> 1997. </year> <type> Internal report. </type>
Reference-contexts: The prototype supports agent migration and KQML-communication. An agent base class is implemented that can easily be extended with application specific behaviour. 5 X.500 is the directory standard of the International Telecommunication Union (ITU) The agent prototype has been embedded in a workflow management system prototype <ref> [10] </ref>. Using the agent base class, a workflow agent was constructed. Our current experience with the prototype is, that programming an application based on mobile agents can be simpler than building its RPC-based equivalent.
Reference: [11] <author> Patrick Naughton. </author> <title> The Java Handbook. </title> <address> Osborne/McGraw-Hill, </address> <year> 1996. </year>
Reference: [12] <institution> Object Management Group. </institution> <month> CORBAservices: </month> <title> Common Object Services Specification, </title> <month> August </month> <year> 1997. </year>
Reference-contexts: In order to find the docks it should visit, we need a mapping from a service description to the dock where the services can be performed. This mapping can be provided by the Trading Object Service <ref> [12] </ref>, a submission to OMG by a number of major software companies. At this point, however, no implementation of the trading service exists.
Reference: [13] <author> Robert Orfali and Dan Harkey. </author> <title> Client/Server Programming with Java and CORBA. </title> <publisher> John Wiley & Sons, </publisher> <year> 1997. </year> <month> 15 </month>
Reference-contexts: Deserialisation is the reverse process of restoring the data structure that was serialised. RMI uses object (de-)serialisation for parameter marshalling and unmarshalling in a remote method call. Common Object Request Broker Architecture (CORBA) <ref> [13] </ref> as specified by the Object Management Group (OMG). Also with CORBA, object methods can be invoked from other virtual machines. Contrary to Java, it is language independent. At present, no complete CORBA implementation is available that implements both the client and the server-side in Java.
Reference: [14] <editor> K. Rothermel and R. Popescu-Zeletin, editors. </editor> <booktitle> Mobile Agents, volume 1219 of Lecture Notes in Computer Science. First International Workshop, </booktitle> <address> MA'97, Berlin (Germany), </address> <publisher> Springer, </publisher> <year> 1997. </year>
Reference: [15] <author> Sun Microsystems Inc. JNDI: </author> <title> Java Naming & Directory Service, </title> <address> 1.2 edition, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: In our agent architecture we will use JNDI <ref> [15] </ref>, the Java Naming and Directory Interface, that JavaSoft recently introduced. JNDI provides a generic interface to a variety of directories.
Reference: [16] <author> Andrew S. Tanenbaum. </author> <title> Computer Networks. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: A KQML message is called a performative. The KQML specification [4] defines a considerable number of reserved performatives. A KQML-compliant agent (or any software component that "speaks" KQML) does not have to support all 2 A good introduction to the OSI model can be found in <ref> [16] </ref> 3 reserved performatives. However, if an agent supports a specific performative, it must do so in conformance with the specification. Agents are free to use new performatives that are not in the language specification. A performative consists of a performative name and a number of parameters.
Reference: [17] <author> Bill Venners. </author> <title> The architecture of aglets. </title> <address> JavaWorld, </address> <month> April </month> <year> 1997. </year> <note> http://www.javaworld.com/javaworld/jw-04-1997/jw-04-hood.html. </note>
Reference-contexts: Docks provide agents with a facility that enables them to communicate with other agents and resources on the node they are visiting. 3 The concept of a dock can be found in most mobile agent architectures, e.g. Servers in Agent Tcl [9] or Aglet Hosts in the Aglet architecture <ref> [17] </ref>. 5 Fig. 1. Interaction Behaviour An agent can travel as it pleases to accomplish its task. On its voyage, hopping from node to node, it interacts with docks and (through the docks) with other agents and software objects.
Reference: [18] <editor> Jan Vitek and Christian Tschudin, editors. </editor> <booktitle> Mobile Object Systems, volume 1222 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <year> 1996. </year>
Reference: [19] <author> Chris Weider, Joyce K. Reynolds, and Sergio Heker. </author> <title> Using the X.500 Protocol, 1992. </title> <type> RFC 1309. 16 </type>
Reference-contexts: As JNDI does not require a particular directory service, the user is free to select one. 12 Although in principle any JNDI-supported directory service can be used, di-rectories based on the LDAP-standard [7] are rapidly becoming more popular. LDAP uses a subset of the full X.500 5 <ref> [19] </ref> functionality. LDAP clients are generally smaller and faster than X.500 clients. When an agent is created at a dock, the dock creates an entry in the directory for that agent, containing information about its owner, type and location.
References-found: 19

