URL: http://www.cs.tamu.edu/people/debjyoti/paper.ps
Refering-URL: http://www.cs.tamu.edu/people/debjyoti/
Root-URL: http://www.cs.tamu.edu
Title: VERILAT: Verification Using Logic Augmentation and Transformations  
Author: Dhiraj K. Pradhan Debjyoti Paul Mitrajit Chatterjee 
Address: Texas A&M University, College Station, TX 77843  
Affiliation: Laboratory for Computers and Digital Systems Research Dept. of Computer Science  
Abstract: This paper presents a new framework for formal logic verification. What is depicted here is fundamentally different from previous approaches. In earlier appraoches, the circuit is either not changed during the verification process, as in OBDD or implication-based methods, or the circuit is progressively reduced during verification. Whereas in our approach, we actually enlarge the circuits by adding gates during the verification process. Specifically introduced here is a new technique that transforms the reference circuit as well as the circuit to be verified, so that the similarity between the two is progressively enhanced. This requires addition of gates to the reference circuit and/or the circuit to be verified. In the process, we reduce the dissimilarity between the two circuits, which makes it easier to verify the circuits. In this paper, we first introduce a method to identify parts of the two circuits which are dissimilar. We use the number of implications that exist between the nodes of one circuit and the nodes of the other circuit as a metric of similarity. As demonstrated, this can be a very useful metric. We formulate transformations that can reduce the dissimilarity. These are performed on those parts of the circuits which are found to be dissimilar. These admissible transformations are functionality-preserving and based on certain Boolean difference formulations. The dissimilarity reduction transformations introduce new logical relationships between the two circuits that did not previously exist. These logical relationships are extracted as new implications, which are then used to reduce the complexity of the verification problem. These two steps are repeated in succession until the verification process is complete. A complete procedure is presented which demonstrates the power of our logic verification technique. The concept presented in this paper can be useful in accelerating verification frameworks which rely on structural methods. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abramovichi, M.A. Breuer, A.D. Friedman, </author> <title> "Digital Testing and Testable Design," </title> <publisher> Computer Science Press. </publisher>
Reference-contexts: As seen later, as the number of gates in the circuits increases during verification, it becomes easier to verify. As the circuit size grows during verification, it gets easier to verify, somewhat counter to the conventional wisdom of reducing the circuit <ref> [1] </ref> or partitioning the circuit [5]. logic verification methods based on how the circuit structure changes during the verification process. The first category keeps the circuit unchanged [5], [10]-[11]. The second category tries to simplify the verification process by reducing the circuit size physically [7] or logically [5]. <p> However, multiple SETs cannot be performed simultaneously, unless they form a compatible set. This follows from the well-known result that even if two stuck-at faults are undetectable individually, they can be detectable as a multiple fault <ref> [1] </ref>. Note that the order of choosing SETs is important. We use certain heuristics [3] to accept or discard a particular SETs depending on certain cost-benefit function. Given a set of single SETs, one can form a subset of a SET compatible SETs using fault-detection theory.
Reference: [2] <author> D.K. Pradhan, W.Kunz, </author> <title> "Method for Circuit Verification and Multi-level Circuit Optimization based on Structural Implications," Patent Application # 5,526,514, </title> <address> Granted, </address> <month> June 11, </month> <year> 1996. </year>
Reference-contexts: fail 2 fail 1 2:19 20 c5315 0:13 2 10:24 1 1:37 38 c6288 fail 2 fail 1 1:09 0 c7552 fail 2 fail 1 5:07 20 Table 4: Comparison of proposed method on synthesized circuits (Times are in [mm:ss]). circuits, should be used only after the other simpler approaches <ref> [2] </ref>- [8] fail. Importantly, it has a stable performance over a wide variety of circuits. Our procedure and underlying heuristics [3] seem to provide maximum benefit for difficult-to-verify circuits with little similarity with the reference circuit.
Reference: [3] <author> D.K.Pradhan, D.Paul, M.Chatterjee, </author> <title> "Method for Comparative Circuit Verification, " Patent Application # 08/671,421, applied June, </title> <year> 1996. </year>
Reference-contexts: When this fails to verify the circuits, the procedure changes to the second verification mode. This consists of performing similarity-enhancing transformations to induce similarity in an ordered manner. Because structurally transforming a circuit is a step which cannot be reversed, this process is guided using certain heuristics <ref> [3] </ref> which are also crucial. Experimental results have shown that this approach is powerful to verify dissimilar circuits efficiently. 3 Proposed Verification Procedure Our verification procedure aims to identify structurally dissimilar regions of the circuit. <p> A node f 2 F for which f = 0 is a necessary assignment and thus a candidate for the transformation g 0 = f +g. Whether this transformation <ref> [3] </ref> is actually performed or not depends on certain heuristics. 3.2.1 SET Implementation What is proposed here is to first attempt verification using only implications and equivalences. If this fails, a new transformation is attempted. <p> Using certain heuristics, a node, say g 2 G, is selected which is in the dissimilar region.Here f is selected from a similar region of F . If the search fails to find a suitable f , a new g 2 G is selected using certain heuristics <ref> [3] </ref>. The line selected for transformation always lies in the dissimilar region. If no transformation can be found then the level of recursion is incremented and the process of verification is repeated from the beginning with this higher level of recursion. <p> This follows from the well-known result that even if two stuck-at faults are undetectable individually, they can be detectable as a multiple fault [1]. Note that the order of choosing SETs is important. We use certain heuristics <ref> [3] </ref> to accept or discard a particular SETs depending on certain cost-benefit function. Given a set of single SETs, one can form a subset of a SET compatible SETs using fault-detection theory. These compatible SETs can be performed in one step. <p> A series of SETs adds numerous connections between the two circuits. Therefore heuristics <ref> [3] </ref> are formulated to decide whether to accept or discard a particular SET. These depend on what specific new complications that are induced because of a transformation and their overall effectiveness. Our objective is to increase recursion level only as a last resort. <p> Importantly, it has a stable performance over a wide variety of circuits. Our procedure and underlying heuristics <ref> [3] </ref> seem to provide maximum benefit for difficult-to-verify circuits with little similarity with the reference circuit. No more than approximately 5 minutes was needed to verify any of the optimized circuits. 5 Conclusions We have presented a new approach for formal logic verification which is fundamentally different from previous approaches.
Reference: [4] <institution> W.Kunz and D.K.Pradhan,"Recursive Learning: </institution>
Reference-contexts: Direct implications are derived from the truth tables of the states and are of limited use. Indirect implications, on the other hand, provide a powerful tool for identifying logical relationships. Recursive learning procedure identifies all indirect implications, given sufficient levels of recursion <ref> [4] </ref>. These indirect implications form the basis of our secondary metric and illustrated below. For the circuit in Figure 3, Consider the primary output, t = 1 We can invoke recursive learning to determine any indirect implications of this value assignment. <p> However, it may be noted that the maximum recursion level is bounded by the levels of logic and importantly the memory requirements for recursive learning are linear in terms of size of the circuit <ref> [4] </ref>. Furthermore, for certain types of circuits or given a fixed level of recursion, the complexity is only polynomial. Also, recursive learning is self-guided in that the search is automatically guided by the topology of the circuit to precisely those nodes that are indirectly implied. <p> We will denote the similarity index as ffi. Consider for example the circuit shown in Figure 4, in particular, the output of node 3. The following indirect implications exist which can be identified using level 1 recursive learning <ref> [4] </ref>. (3 in F)=0 ! (3 in G)=0 (3 in F)=0 ! (9 in G)=0 Thus it can be seen that the node representing output of gate 3 has a similarity index of ffi = 3. <p> These capture not only controllability and observability implications but also more general conditions for admissibilty. Controllability and observability implications are special cases of this formulation of admissibility. A SET can exist where neither a controllability implication <ref> [4] </ref> nor an observability implication [9] exists. In this example, the fault is excitable and observable separately, but it cannot be excited and ob Circuits. served simultaneously. Importantly, the following example illustrates that SETs are more powerful than controllability and observability implications treated independently.
References-found: 4

