URL: http://www.pmg.lcs.mit.edu/~umesh/pubs/proportional_scheduling.ps.gz
Refering-URL: http://www.pmg.lcs.mit.edu/~umesh/pubs/
Root-URL: 
Title: Charge-Based Proportional Scheduling  
Author: Umesh Maheshwari 
Date: January, 1995  
Address: Cambridge, MA 02139  
Affiliation: M.I.T. Laboratory for Computer Science  
Pubnum: Technical Memo MIT/LCS/TM-529  
Abstract: Most priority-based schedulers lack the ability to control the relative execution rates of applications. A recent scheme, called lottery scheduling [WW94], uses randomization to control the execution rates of threads in proportion to the tickets allocated to them. However, randomization does not afford sufficient control over short periods of time; e.g., it would fail to provide the intended execution rates for threads that run for less than 10 timeslices. This paper presents a new scheme that controls execution rates over much smaller intervals and provides better service guarantees. Simulation results prove its advantage over lottery scheduling. The scheme is based on charging threads for CPU usage and occasionally skipping some threads to keep the usage close to the intended proportion. Unlike earlier charge-based schemes, which adjust the priorities of running threads, this scheme schedules threads in round-robin order. Despite its improved quality of service, the scheduler processing overhead is low. Keywords: scheduling, resource allocation, proportional share 
Abstract-found: 1
Intro-found: 1
Reference: [Bre65] <author> J. E. Bresenham. </author> <title> Algorithm for computer control of a digital plotter. </title> <journal> IBM Systems Journal, </journal> <volume> 4(1) </volume> <pages> 25-30, </pages> <year> 1965. </year>
Reference-contexts: Here, T's quanta are clumped together into the the first 2 rounds. Analysis Perhaps surprisingly, the maximum-share algorithm given above is similar to Bresenham's digitized line-drawing algorithm, which is used heavily in computer graphics <ref> [Bre65] </ref>. The line-drawing algorithm plots pixels in a 2-D grid so as to approximate a line between two points in the grid. Suppose the line is to be drawn from the point (0; 0) to (X; Y ).
Reference: [FS95] <author> L. L. Fong and M. S. Squillante. Time-functions: </author> <title> A general approach to controllable resource management. </title> <type> Working draft, </type> <institution> IBM Research Division, T. J. Watson Research Center, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: At the time this paper was originally written (January 1995), the only existing work aimed at proportional schedul 6 7 ing over small intervals was lottery scheduling. Since then three other deterministic schemes have appeared <ref> [FS95, SAW95, WW95] </ref>. A comparison between them and charge-based scheduling is found in [WW95]. Comparison with Lottery Scheduling The charge-based scheme provides proportional execution rates over smaller time periods than provided by lottery scheduling.
Reference: [KL88] <author> J. Kay and P. Lauder. </author> <title> A fair share scheduler. </title> <journal> CACM, </journal> <volume> 31(1) </volume> <pages> 44-55, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: The scheme is different from usage-charging schemes added on top of priority scheduling, which adjust the priorities of running threads and schedule the thread with the highest priority. The fair share scheduler proposed in <ref> [KL88] </ref> also works through adjusting priorities, and therefore suffers from unpredictable execution rates. Actually, this work is focused on providing fairness on a per-user basis over longer periods of time, not on controlling the execution rates of individual threads. <p> As an example of scheduling of more than two threads, Figures 10 and 11 show the cumulative quanta received by four threads with shares 47, 31, 23, and 11. 5 Related Work The fair-share scheduler proposed in <ref> [KL88] </ref> is based on usage charging but it works through adjusting priorities and running the process of highest priority. Processes with higher priority get charged more for same execution time.
Reference: [LMKQ89] <author> S. J. Leffler, M. K. McKusick, M. J. Karels, and J. S. Quarterman. </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: When there are no threads left with positive account, the scheduler refunds the accounts of all runnable threads with the number of shares they have. The concept of a refund is similar to aging of the usage charge in priority scheduling <ref> [LMKQ89] </ref>, except that a refund is targeted to achieve a more predictable effect. The algorithm is depicted in Figure 1. Setting the appropriate level of charge is crucial for the efficacy of the algorithm and is discussed in Section 2.1.
Reference: [PM88] <author> S. K. Park and K. W. Miller. </author> <title> Random Number Generators: Good ones are hard to find. </title> <journal> CACM, </journal> <month> October </month> <year> 1988. </year>
Reference-contexts: Poor random number generators resulted in perceptibly worse deviations in execution rates. I used the Park-Miller pseudo-random number generator <ref> [PM88] </ref>, which is fast and yet of high quality and is the one used in [WW94]. For fixed-term charging, the target term size was fixed at 10. The choice of the target term size favors certain combinations of shares.
Reference: [SAW95] <author> I. Stoica and H. Abdel-Wahab. </author> <title> A new approach to proportional share resource allocation. </title> <type> Technical Report 95-05, </type> <institution> Department of Computer Science, Old Dominion University, </institution> <address> Norfolk, VA, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: At the time this paper was originally written (January 1995), the only existing work aimed at proportional schedul 6 7 ing over small intervals was lottery scheduling. Since then three other deterministic schemes have appeared <ref> [FS95, SAW95, WW95] </ref>. A comparison between them and charge-based scheduling is found in [WW95]. Comparison with Lottery Scheduling The charge-based scheme provides proportional execution rates over smaller time periods than provided by lottery scheduling.
Reference: [WW94] <author> C. A. Waldspurger and W. E. Weihl. </author> <title> Lottery scheduling: Flexible proportional-share resource management. </title> <booktitle> In Proceedings of the First OSDI, </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: For instance, if the charge parameter is not set correctly, two high priority threads can keep alternating and starve a lower priority thread. Proportional scheduling has been proposed for predictable control over execution rates <ref> [WW94] </ref>. Here, threads are al located tickets in order that runnable threads will execute at rates proportional to their tickets. Proportional execution rates are useful in situations where services of varying importance must proceed concurrently. <p> This is the case, for example, in a server handling multiple clients, a multi-media application processing audio and video, or a multi-threaded scientific computation where accuracy is governed by the amount of processing. The implementation of proportional scheduling in <ref> [WW94] </ref> is called lottery scheduling. It uses randomization to select threads in proportion to the tickets allocated to them. However, randomization does not afford sufficient control on the execution rates over short periods of time such as 10 timeslices. <p> Poor random number generators resulted in perceptibly worse deviations in execution rates. I used the Park-Miller pseudo-random number generator [PM88], which is fast and yet of high quality and is the one used in <ref> [WW94] </ref>. For fixed-term charging, the target term size was fixed at 10. The choice of the target term size favors certain combinations of shares. For example, a term size of 10 is well suited for 20-30 shares, because then the charge is 5, which exactly divides both 20 and 30. <p> Without experimental results it is difficult to predict with certainty which scheme would result in lower overhead, and whether the difference is significant. I expect the charge-based scheme to be better because it avoids random number generation. Fortunately, many of the supplementary techniques proposed for lottery scheduling in <ref> [WW94] </ref> are also applicable to the charge-based scheme presented in this paper. Note that the charge-based scheme only replaces the randomized-selection aspect of lottery scheduling with a deterministic accounting method. For example, the charge-based scheme admits the same kind of modular decomposition as lottery 8 scheduling.
Reference: [WW95] <author> Carl A. Waldspurger and William E. Weihl. </author> <title> Stride scheduling: Deterministic proportional-share resource management. </title> <type> Technical Memo MIT/LCS/TM-528, </type> <institution> MIT Laboratory for Computer Science, </institution> <address> Cambridge, MA, </address> <month> June </month> <year> 1995. </year> <month> 9 </month>
Reference-contexts: At the time this paper was originally written (January 1995), the only existing work aimed at proportional schedul 6 7 ing over small intervals was lottery scheduling. Since then three other deterministic schemes have appeared <ref> [FS95, SAW95, WW95] </ref>. A comparison between them and charge-based scheduling is found in [WW95]. Comparison with Lottery Scheduling The charge-based scheme provides proportional execution rates over smaller time periods than provided by lottery scheduling. <p> At the time this paper was originally written (January 1995), the only existing work aimed at proportional schedul 6 7 ing over small intervals was lottery scheduling. Since then three other deterministic schemes have appeared [FS95, SAW95, WW95]. A comparison between them and charge-based scheduling is found in <ref> [WW95] </ref>. Comparison with Lottery Scheduling The charge-based scheme provides proportional execution rates over smaller time periods than provided by lottery scheduling. This is evident from simulation results, which show that the charge-based scheme achieves lower deviations over 10 quanta than what lottery scheduling achieves over 100 quanta.
References-found: 8

