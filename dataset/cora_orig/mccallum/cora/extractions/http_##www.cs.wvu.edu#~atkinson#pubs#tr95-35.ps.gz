URL: http://www.cs.wvu.edu/~atkinson/pubs/tr95-35.ps.gz
Refering-URL: http://www.cs.wvu.edu/~atkinson/publications.html
Root-URL: http://www.cs.wvu.edu
Email: E-mail: atkis@cs.uq.oz.au  
Phone: Phone: +61 7 3365 1009 Fax: +61 7 3365  
Title: Formalizing the Proposed Eiffel Kernel Library Standard  
Author: Steven Atkinson 
Keyword: formal methods, Eiffel, standards  
Address: AUSTRALIA  1999  
Affiliation: Software Verification Research Centre Department of Computer Science The University of Queensland QLD 4072  
Abstract: The Proposed Eiffel Library Kernel Standard has been created for the purpose of promoting multi-platform interoperability using the Eiffel language. It consists of a set of twenty class specifications, called the library kernel, which serve as a benchmark against which proposed library implementations can be tested for compatibility with the standard. The rules for kernel compatibility should be clear and unambiguous in order to ensure that the interoperability sought is not compromised. A formal specification language offers the precision and degree of confidence required. This paper presents a model of the Proposed Eiffel Library Kernel Standard in the formal specification language Object-Z, which has been advocated for the specification of standards. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Banahan, Declan Brady, and Mark Doran. </author> <title> The C book : featuring the ANSI C standard. Instruction set series. </title> <publisher> Addison-Wesley, </publisher> <address> Wokingham, England and Reading, Mass. USA, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction The process of computer language standardization aims to promote multi-platform software development. This has usually been achieved through the standardization of library facilities offered across many platforms <ref> [1] </ref>. The underlying principle of interoperability behind a standard library is that any program which adheres to the standard library facilities can be readily compiled and executed on any platform which supports these facilities.
Reference: [2] <author> J.S. Dong and R. Duke. </author> <title> The Geometry of Object Containment. </title> <booktitle> Object-Oriented Systems, </booktitle> <volume> 2 </volume> <pages> 41-63, </pages> <year> 1995. </year>
Reference-contexts: classof : Identifier 7 7ae ClassDecl parent : Identifier $ Identifier # dom classof = #classes ran classof = classes dom parent [ ran parent = dom classof Kernel names dom classof (2.2.1.1) Ancestry links parent (2.2.1.2) [ fc : classes * dependents (c)g classes (2.2.1.4) 3 Each kernel contains <ref> [2] </ref> a set of class declarations. This means that no class decla-ration can appear in two distinct kernels. In other words if identical declarations do appear in separate kernels then they are considered to be distinct.
Reference: [3] <author> J.S. Dong, G. Rose, and R. Duke. </author> <title> The Role of Secondary Attributes in Formal Object Modelling. </title> <type> Technical Report 95-20, </type> <institution> Software Verification Research Centre, Dept. of Computer Science , Univ. of Queensland, Australia, </institution> <year> 1995. </year> <note> To appear in The IEEE International Conference on Engineering Complex Computer Systems (ICECCS'95). </note>
Reference-contexts: ClassDecl Class Base parents : F ParentDecl flC creators : F CreationDecl flC inherited features : F FeatureDecl all features : F FeatureDecl all features = inherited features [ features 8 f : features * f :origin = self The two secondary attributes <ref> [3] </ref> inherited features and all features respectively represent the collection of feature declarations implicitly included via parents, and the collection of all inherited and immediate (i.e. non-inherited) feature declarations. Because this information depends on and can be derived from the kernel environment, these two collections are modelled as secondary attributes.
Reference: [4] <author> R. Duke, P. King, G. Rose, and G. Smith. </author> <title> The Object-Z specification language. </title> <editor> In T. Korson, V. Vaishnavi, and B. Meyer, editors, </editor> <booktitle> Technology of Object-Oriented Languages and Systems: TOOLS 5, </booktitle> <pages> pages 465-483. </pages> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: This paper presents a model of the PELKS standard in the formal specification language Object-Z <ref> [4] </ref>, which has been advocated for the specification of standards [5]. The focus of the model will be on specifying the compatibility rules; hence the specific detail about the features each class offers will not be discussed.
Reference: [5] <author> R. Duke, G. Rose, and G. Smith. Object-Z: </author> <title> a Specification Language Advocated for the Description of Standards. </title> <type> Technical Report 94-45, </type> <institution> Software Verification Research Centre, Dept. of Computer Science , Univ. of Queensland, Australia, </institution> <year> 1994. </year> <note> To appear in a special issue of Computer Standards and Interfaces on Formal Methods and Standards, </note> <month> September </month> <year> 1995. </year>
Reference-contexts: This paper presents a model of the PELKS standard in the formal specification language Object-Z [4], which has been advocated for the specification of standards <ref> [5] </ref>. The focus of the model will be on specifying the compatibility rules; hence the specific detail about the features each class offers will not be discussed. The aim of the model is to disambiguate and discuss the adequacy of the compatibility rules as they are currently specified.
Reference: [6] <author> B. Meyer. </author> <title> Eiffel: The Language. </title> <publisher> Prentice Hall Object-Oriented Series. Prentice Hall (UK) Ltd, </publisher> <address> 66 Wood Lane End, Hertforshire HP24RG, </address> <year> 1992. </year>
Reference-contexts: The paper concludes with a summary of the issues raised by the formal model. 2 Modelling Eiffel Declarations In this section, mathematical models of a kernel, a class declaration and a feature declaration of the Eiffel language are presented. These models are based upon the definitions provided in <ref> [6] </ref> and [7]. It should be noted that a number of terms used in this section will be left undefined because their definitions can be considered auxiliary to the theme of the paper; they are described in Appendix H of [6]. <p> These models are based upon the definitions provided in <ref> [6] </ref> and [7]. It should be noted that a number of terms used in this section will be left undefined because their definitions can be considered auxiliary to the theme of the paper; they are described in Appendix H of [6]. These terms are the sets Message (all possible messages displayed to an Eiffel user), Index value (all possible descriptions used to index a class), Comment (all possible class and feature comments), Type (and Class type) (all possible Eiffel (class) types) and Boolean expression (all possible boolean expressions). <p> This is designed to disallow classes external to a kernel to have an effect upon compatibility testing. The formal definition of the dependents function is omitted as it is not central to the issues in this paper. However the semi-formal definition can be found on p35 of <ref> [6] </ref>. 2.2 Class and Flatshort Declaration Models A class declaration is defined by text that is written to describe an Eiffel class. A flatshort declaration is defined as the text that results from computing the flatshort form (see p106 of [6]) of a class. <p> However the semi-formal definition can be found on p35 of <ref> [6] </ref>. 2.2 Class and Flatshort Declaration Models A class declaration is defined by text that is written to describe an Eiffel class. A flatshort declaration is defined as the text that results from computing the flatshort form (see p106 of [6]) of a class. Class and flatshort declarations have certain properties in common, such as indexing clauses, whether a class is deferred or expanded, and their name. These properties are modelled below in the class Class Base. <p> Firstly, the number of creation declarations in f must equal the number of generally available (see page 285 of <ref> [6] </ref>) creation declarations in c. Secondly, each creation declaration cr in f must be available to any client (cr :clients = f"ANY "g). Thirdly, any such declaration cr must be equal in value to only one of the creation declarations in c. <p> Also note that the type relation conform used below refers to conformance between Eiffel types, but its definition (see page 219 of <ref> [6] </ref>) is omitted because it is not directly relevant. <p> This violates the signature conformance validity constraint (labelled VNCS on p219 of <ref> [6] </ref>) even though Rule 2.4.1.8 says the difference between the argument types is permitted. Here we have a case of a program written with respect to the standard declarations which behaves differently in distinct certified library implementations, due to the existence of rule 2.4.1.8.
Reference: [7] <author> B. Meyer. </author> <title> The Proposed Eiffel Kernel Library Standard. </title> <type> Technical Report TR-EI-48/KL, </type> <institution> Interactive Software Engineering, Inc., </institution> <address> 225 Storke Rd, Suite 7, Goleta, CA 93117 USA, </address> <month> January </month> <year> 1995. </year> <note> Available from ftp://ftp.eiffel.com/pub/nice/library/pelks/ . 21 </note>
Reference-contexts: The underlying principle of interoperability behind a standard library is that any program which adheres to the standard library facilities can be readily compiled and executed on any platform which supports these facilities. The Proposed Eiffel Library Kernel Standard (PELKS <ref> [7] </ref>) has been created for the purpose of promoting multi-platform development using the Eiffel language. The standard consists of a collection of twenty class specifications (the kernel classes) which serve as a benchmark against which proposed library implementations can be tested for compatibility. <p> The aim of the model is to disambiguate and discuss the adequacy of the compatibility rules as they are currently specified. The organization of this paper coincides with the first four sections of <ref> [7] </ref>. The second section of this paper models the Eiffel declarations necessary for talking about compatibility, providing models of a kernel, a class declaration, a feature declaration and other subsidiaries. <p> These models are based upon the definitions provided in [6] and <ref> [7] </ref>. It should be noted that a number of terms used in this section will be left undefined because their definitions can be considered auxiliary to the theme of the paper; they are described in Appendix H of [6]. <p> Also, where appropriate, the predicates in the models of this section have cross references to the rule numbers of the PELKS document in the right margin. 2.1 A Kernel Model The PELKS document <ref> [7] </ref> defines the names of the required kernel classes, as well as the required ancestry links between those classes. <p> Additionally, there are a set of ten conventions which all flatshort forms must adhere to before they are compared with the standard decls. These ten conventions are listed in Section 2.3 of <ref> [7] </ref>, and place both semantic and syntactic restrictions upon the shape of flatshort declarations. The flatshort function incorporates these flatshort conventions, and the predicates in the relations below have cross-references to the rule numbers of the PELKS document 1 .
References-found: 7

