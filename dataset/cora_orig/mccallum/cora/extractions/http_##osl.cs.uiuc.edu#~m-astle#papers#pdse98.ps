URL: http://osl.cs.uiuc.edu/~m-astle/papers/pdse98.ps
Refering-URL: http://osl.cs.uiuc.edu/~m-astle/
Root-URL: http://www.cs.uiuc.edu
Email: fastley, aghag@cs.uiuc.edu  
Title: Modular Construction and Composition of Distributed Software Architectures  
Author: Mark Astley and Gul A. Agha 
Address: 1304 W. Springfield, Urbana, IL, 61801, USA  
Affiliation: Department of Computer Science Univ. of Illinois at Urbana-Champaign  
Abstract: A complete specification of a distributed software architecture describes two different aspects. First, it decomposes the software into its components and their interconnection. Second, it specifies the policies that are required to manage an architecture. Such policies are dependent on the nature of the execution environment. They are complicated by requirements such as heteroge-niety, availability, and adaptability. Embedding architecture management policies in components and connectors sacrifices modularity. We describe an architecture description language, the Distributed Connection Language (dcl), for specifying distributed software architectures. Components in dcl are concurrent and distributed, and implement application functionality. Connectors specify policies governing component interactions and resource use. Thus connectors may specify load balancing or fault-tolerance policies. We base our approach on the Actor model and a meta-architecture which allows transparent customization of actor behaviors. Specifically, connector policies are implemented by coordinating meta-level customizations over a collection of actors. We describe component and connector abstractions as they are specified in dcl, and illustrate their use by way of several examples. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Agha. </author> <title> Actors: A Model of Concurrent Computation. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: The remainder of this paper describes the Distributed Connection Language (DCL), an ADL which emphasizes component resource management and deployment for distributed software architectures. In Section 3, we introduce modules for the linguistic specification of components and their interconnection. Modules encapsulate collections of Actors <ref> [1] </ref> which are an atomic unit for distributed software architectures. Interactions between modules are modeled as asynchronous messages between actors. In Section 4, we describe protocols which provide a representation for connectors. Protocols implement connector policies by accessing an open implementation (cf. [8]) of the actors within a module. <p> Thus, dcl abstractions represent an attempt at integrating both connection and deployment management policies within a single, uniform framework. 3. Specifying Distributed Software Ar chitectures Distributed architectures are specified in terms of a set of components and their interconnection. We model components as hierarchical collections of Actors <ref> [1] </ref>. Actor computation implements the functional behavior of components while actor interactions (i.e. asynchronous message passing) define the mechanism by which component services are invoked. In dcl, components are defined by modules.
Reference: [2] <author> G. Agha, S. Frtlund, W. Kim, R. Panwar, A. Pat-terson, and D. Sturman. </author> <title> Abstraction and modularity mechanisms for concurrent computing. </title> <booktitle> IEEE Parallel and Distributed Technology, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Moreover, actor interactions may be used to model standard distributed system communication mechanisms such as remote procedure call (RPC), transactions, and other forms of synchronization <ref> [2, 12, 5] </ref>. Conceptually, an actor encapsulates a state, a thread of control, and a set of procedures which manipulate the state. Actors coordinate by asynchronously sending messages to one another. Each actor has a unique mail address and a mail buffer to receive messages.
Reference: [3] <author> R. Allen and D. Garlan. </author> <title> Formalizing architectural connection. </title> <booktitle> In International Conference on Software Engineering (ICSE '94), </booktitle> <pages> pages 71-80. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1994. </year>
Reference-contexts: Both modules and protocols are illustrated by a number of examples. The last section discusses future directions. 2 2. Related Work Several architecture description languages have been proposed in the literature. Of these languages, Rapide [9] and Wright <ref> [3] </ref> are useful representatives due to their formal nature and the scope of their specifications.
Reference: [4] <author> P. C. Clements. </author> <title> A survey of architecture description languages. </title> <booktitle> In Eighth International Workshop on Software Specification and Design, Paderborn, </booktitle> <address> Germany, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Of these languages, Rapide [9] and Wright [3] are useful representatives due to their formal nature and the scope of their specifications. Thus, rather than detail the features of each of the many existing ADLs, we describe the approach used in Rapide and Wright and refer the reader to <ref> [4] </ref> for an interesting survey of architecture description languages in general. Rapide is an object-oriented language designed for event-based prototyping of distributed software architectures. A Rapide architecture contains a set of module specifications called interfaces which define a collection of named entry points.
Reference: [5] <author> S. Frtlund. </author> <title> Coordinating Distributed Objects: An Actor-Based Approach to Synchronization. </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: Moreover, actor interactions may be used to model standard distributed system communication mechanisms such as remote procedure call (RPC), transactions, and other forms of synchronization <ref> [2, 12, 5] </ref>. Conceptually, an actor encapsulates a state, a thread of control, and a set of procedures which manipulate the state. Actors coordinate by asynchronously sending messages to one another. Each actor has a unique mail address and a mail buffer to receive messages.
Reference: [6] <author> W. W. Gibbs. </author> <title> Software's chronic crisis. </title> <journal> Scientific American, </journal> <volume> 271(3) </volume> <pages> 86-95, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Wright and Rapide abstract away most of the behavior of components and focus on interaction mechanisms. Practical experience has shown that these issues are not independent and changes to one often imply changes to the other, usually at great cost <ref> [6] </ref>. Thus, dcl abstractions represent an attempt at integrating both connection and deployment management policies within a single, uniform framework. 3. Specifying Distributed Software Ar chitectures Distributed architectures are specified in terms of a set of components and their interconnection. We model components as hierarchical collections of Actors [1].
Reference: [7] <author> C. Hoare. </author> <title> Communicating sequential processes. </title> <journal> Communications of the ACM, </journal> <volume> 21(8) </volume> <pages> 666-677, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: These default connection policies may be augmented with formal constraints which ensure global properties. While Rapide defines architectural computation and connection in terms of event patterns, the Wright language defines architectural structure in terms of extensions to Communicating Sequential Processes (CSP) <ref> [7] </ref>. A Wright architecture consists of an in-terlinked set of components and connectors. Wright components are specified by an interface and a computation. An interface describes a fixed set of ports through which the component may interact. A computation describes component behavior in terms of interactions triggered at ports.
Reference: [8] <author> G. Kiczales. </author> <title> Beyond the black box: Open implementation. </title> <journal> IEEE Software, </journal> <volume> 13(1) </volume> <pages> 8-10, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: Modules encapsulate collections of Actors [1] which are an atomic unit for distributed software architectures. Interactions between modules are modeled as asynchronous messages between actors. In Section 4, we describe protocols which provide a representation for connectors. Protocols implement connector policies by accessing an open implementation (cf. <ref> [8] </ref>) of the actors within a module. In particular, a meta-architecture allows the customization of basic actor operations. Meta-level customizations may be composed to allow multiple policies to be applied to components. Both modules and protocols are illustrated by a number of examples.
Reference: [9] <author> D. C. Luckham, J. J. Kenney, L. M. Augustin, J. Vera, D. Bryan, and W. Mann. </author> <title> Specification and analysis of system architecture using Rapide. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4) </volume> <pages> 336-355, </pages> <year> 1995. </year> <note> Special Issue on Software Architecture. </note>
Reference-contexts: Meta-level customizations may be composed to allow multiple policies to be applied to components. Both modules and protocols are illustrated by a number of examples. The last section discusses future directions. 2 2. Related Work Several architecture description languages have been proposed in the literature. Of these languages, Rapide <ref> [9] </ref> and Wright [3] are useful representatives due to their formal nature and the scope of their specifications.
Reference: [10] <author> Object Management Group. </author> <title> CORBA services: Common object services specification version 2. </title> <type> Technical report, </type> <institution> Object Management Group, </institution> <month> June </month> <year> 1997. </year> <note> Available at http://www.omg.org/corba. </note>
Reference-contexts: 1. Introduction The complexity of modern distributed systems has lead to an emphasis on compositional approaches for system development. For example, middleware solutions such as the Common Object Request Broker Architecture (CORBA) <ref> [10] </ref> and Java's Remote Method Invocation (RMI) [13] have incorporated compositional design by separating functional aspects of a system (e.g. objects) from the mechanisms used for interconnection, e.g. remote procedure call through stubs and skeletons. Separating objects from the policies which govern their interaction simplifies debugging and makes reuse feasible.
Reference: [11] <author> M. Shaw, R. DeLine, D. V. Klein, T. L. Ross, D. M. Young, and G. Zelesnik. </author> <title> Abstractions for software architecture and tools to support them. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> April </month> <year> 1995. </year>
Reference-contexts: To verify correctness and reason about com-posability, researchers have introduced the notion of architecture description languages (ADLs) which factor systems into a collection of components, which encapsulate computation, and a set of connectors, which describe how components are integrated into the architecture <ref> [11] </ref>. ADL specifications define the basic structure of a system as well as the semantics of each architectural element. Composition operators in ADLs are used to specify larger systems from smaller components and verify the semantics of the resulting composition.
Reference: [12] <author> D. C. Sturman. </author> <title> Modular Specification of Interaction Policies in Distributed Computing. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: Moreover, actor interactions may be used to model standard distributed system communication mechanisms such as remote procedure call (RPC), transactions, and other forms of synchronization <ref> [2, 12, 5] </ref>. Conceptually, an actor encapsulates a state, a thread of control, and a set of procedures which manipulate the state. Actors coordinate by asynchronously sending messages to one another. Each actor has a unique mail address and a mail buffer to receive messages.
Reference: [13] <author> The Java Team. </author> <title> Rmi specification. </title> <note> Available at ftp://ftp.javasoft.com/docs/jdk1.1/rmi-spec.ps. 11 </note>
Reference-contexts: 1. Introduction The complexity of modern distributed systems has lead to an emphasis on compositional approaches for system development. For example, middleware solutions such as the Common Object Request Broker Architecture (CORBA) [10] and Java's Remote Method Invocation (RMI) <ref> [13] </ref> have incorporated compositional design by separating functional aspects of a system (e.g. objects) from the mechanisms used for interconnection, e.g. remote procedure call through stubs and skeletons. Separating objects from the policies which govern their interaction simplifies debugging and makes reuse feasible.
References-found: 13

