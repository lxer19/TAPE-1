URL: http://www.cs.cmu.edu/~softagents/papers/autoag96.ps.gz
Refering-URL: http://www.cs.cmu.edu/~softagents/publications_old.html
Root-URL: 
Title: Designing Behaviors for Information Agents Application Area: Softbots Technical Issues: agent architectures, adaptation to run-time
Author: Keith Decker, Anandeep Pannu, Katia Sycara, and Mike Williamson 
Keyword: Word Count: 6483  
Note: Category: Paper  
Address: 5000 Forbes Ave., Pittsburgh, PA 15213  
Affiliation: The Robotics Institute, Carnegie-Mellon University  
Email: decker@cs.cmu.edu,  
Phone: Phone 412-268-8780, Fax 412-268-5569  
Date: July 5, 1996  
Abstract: To facilitate the rapid development and open system interoperability of autonomous agents we need to carefully specify and effectively implement various classes of agent behaviors. Our current focus is on the behaviors and underlying architecture of WWW-based autonomous software agents that collect and supply information to humans and other computational agents. This paper discusses a set of architectural building blocks that support the specification of behaviors for these information agents in a way that allows periodic actions, interleaving of planning and execution, and the concurrent activation of multiple behaviors with asynchronous components. We present an initial set of information agent behaviors, including responding to repetitive queries, monitoring information sources, advertising capabilities, and self cloning. We have implemented and tested these behaviors on the WWW in the context of WARREN, an open multi-agent organization for Abstract ID: A132 financial portfolio management.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Arens and C.A. Knoblock. </author> <title> Intelligent caching: Selecting, representing, and reusing data in an information server. </title> <booktitle> In Proc. 3rd Intl. Conf. on Information and Knowledge Management, </booktitle> <year> 1994. </year>
Reference-contexts: This type of caching is not without tradeoffs; it uses more memory, and one must be careful to not introduce inconsistencies between the external source and the cache. A recent discussion of some of these tradeoffs in the context of higher-level multi-source information agent caching can be found in <ref> [1] </ref>. 3 Agent Architecture: Building Blocks for Agent Behaviors An information agent's reusable behaviors are facilitated by its reusable agent architecture, i.e. the domain-independent abstraction of the local infobase schema, and a set of generic software components for knowledge representation, agent control, and interaction with other agents.
Reference: [2] <author> Philip R. Cohen and Hector J. Levesque. </author> <title> Intention is choice with commitment. </title> <journal> Artificial Intelligence, </journal> <volume> 42(3) </volume> <pages> 213-261, </pages> <year> 1990. </year>
Reference-contexts: The generic software components, based on DECAF [7, 14], are common to all classes of information agents as well as task and interface agents we have built. The architecture presented here is consistent with formal BDI agent theory <ref> [2, 15] </ref>. The larger part of the architecture (outside of the local infobase cache) is shared by all of our software agent classes. This differentiates our approach from approaches such as SIMS [12] that are focused on providing what we would call multi-source information agent behaviors (see section 5).
Reference: [3] <author> C. Collet, M.N. Huhns, and W. Shen. </author> <title> Resource integration using a large knowledge base in Carnot. </title> <booktitle> Computer, </booktitle> <pages> pages 55-62, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: The work described here is focussing on WWW-based information where most of the information is unstructured and where an information agent does not have access to the contents of the whole information source at once but only through an external query interface. Projects such as Carnot <ref> [3] </ref> have shown that different types of traditional databases (e.g. relational, object-oriented) can be mapped via articulation axioms to a shared global context language (in Carnot's case, based on CYC).
Reference: [4] <author> K. Decker, K. Sycara, and D. Zeng. </author> <title> Designing a multi-agent portfolio management system. </title> <booktitle> In Proceedings of the AAAI Workshop on Internet Information Systems, </booktitle> <year> 1996. </year>
Reference-contexts: We have used (and reused) the architectural components and agent behaviors for multiple coordination agents in various domains. These domains span projects such as PLEIADES, in the domain of organizational decision making [16] and WARREN, in the financial portfolio management domain <ref> [17, 4] </ref> 2 A Functional Overview of Information Agents Typically, a single information agent will serve the information needs of many other machine or human agents. An information agent is quite different from a typical WWW service that provides data to multiple users.
Reference: [5] <author> K. Decker, M. Williamson, and K. Sycara. </author> <title> Intelligent adaptive information agents. </title> <booktitle> In Proceedings of the AAAI-96 Workshop on Intelligent Adaptive Agents, </booktitle> <year> 1996. </year> <month> 14 </month>
Reference-contexts: In this way, the information agent can make a rational meta--control decision about whether or not it should undertake a cloning behavior. A formal presentation of the cloning criteria and the results of empirical evaluation can be found in <ref> [5] </ref>. 5 Multi-Source Information Agents Basic information agents are certainly useful, but there is a great deal of reusable behavior that is involved with manipulating queries themselves, independent of the ultimate sources of data.
Reference: [6] <author> K. Decker, M. Williamson, and K. Sycara. </author> <title> Matchmaking and brokering. </title> <booktitle> Submitted to 2nd Intl. Conf. on Multi-Agent Systems, </booktitle> <year> 1996. </year>
Reference-contexts: Information agents do not function in a vacuum. They have to make themselves known as information providers to the larger agent society. When an agent is created, it advertises itself to some entity such as a matchmaker or broker <ref> [9, 8, 13, 6] </ref>. This advertisement, expressed in terms of an agent's information base schema (section 3.4), specifies the information services that the agent is making available, the associated ontology (ies) and any associated query limitations. <p> A query brokering agent takes a request from a task agent and farms it out to one or more basic information agents, insulating the requesting task agent from certain types of source errors and efficiently balancing the computational load <ref> [6] </ref>. A newly instantiated query broker needs only to be provided the names of the basic information agents for which it is responsible. It can then contact the appropriate basic information agents, have them unadvertise with the matchmaker, advertise itself to the matchmaker, and begin providing query brokering services.
Reference: [7] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Designing a family of coordination algorithms. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 73-80, </pages> <address> San Francisco, </address> <month> June </month> <year> 1995. </year> <note> AAAI Press. Longer version available as UMass CS-TR 94-14. </note>
Reference-contexts: Thus, these simpler agents can work effectively with one another as well as with more complex agents, such as task agents, that reason about commitments explicitly to produce coordinated behavior <ref> [7] </ref>. In particular, in the WARREN portfolio management multi-agent system (see section 6), basic and multi-source information agents work alongside more complex task- and interface-agents. We have used (and reused) the architectural components and agent behaviors for multiple coordination agents in various domains. <p> The generic software components, based on DECAF <ref> [7, 14] </ref>, are common to all classes of information agents as well as task and interface agents we have built. The architecture presented here is consistent with formal BDI agent theory [2, 15].
Reference: [8] <author> T. Finin, R. Fritzson, D. McKay, and R. McEntire. </author> <title> KQML as an agent communication language. </title> <booktitle> In Proceedings of the Third International Conference on Information and Knowledge Management CIKM'94. </booktitle> <publisher> ACM Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: Information agents do not function in a vacuum. They have to make themselves known as information providers to the larger agent society. When an agent is created, it advertises itself to some entity such as a matchmaker or broker <ref> [9, 8, 13, 6] </ref>. This advertisement, expressed in terms of an agent's information base schema (section 3.4), specifies the information services that the agent is making available, the associated ontology (ies) and any associated query limitations. <p> One of the reusable behaviors inherited by a matchmaker is the ability to process persistent queries as described in [13]. The agents in our system communicate using KQML <ref> [8] </ref>. Our focus on long-term behaviors, such as periodic queries and information monitoring, has required us to extend the language with perfor-mative parameters to allow the specification of deadlines, task frequencies, and other temporal behavioral constraints.
Reference: [9] <author> M.R. Genesereth and S.P. Katchpel. </author> <title> Software agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) 48-53,147, </volume> <year> 1994. </year>
Reference-contexts: Information agents do not function in a vacuum. They have to make themselves known as information providers to the larger agent society. When an agent is created, it advertises itself to some entity such as a matchmaker or broker <ref> [9, 8, 13, 6] </ref>. This advertisement, expressed in terms of an agent's information base schema (section 3.4), specifies the information services that the agent is making available, the associated ontology (ies) and any associated query limitations.
Reference: [10] <author> T.R. Gruber. </author> <title> Toward principles for the design of ontologies used for knowledge sharing. </title> <type> Technical Report KSL-93-4, </type> <institution> Knowledge Systems Laboratory, Stanford University, </institution> <year> 1993. </year>
Reference-contexts: Such an approach is compatible with ours and can be used to add traditional structured database external sources to our basic information agents. The ontological mismatch problem (e.g. <ref> [10] </ref>) is still a difficult one and is outside the scope of this paper. information agent has three conceptual functional parts: the agent's current activity information, the agent's local infobase, and the problem-solving library that includes site-specific external interface code. The current activity information supports agent communication and planning.
Reference: [11] <author> W. Kim and J. Seo. </author> <title> Classifying schematic and data heterogeneity in multidatabase systems. </title> <booktitle> Computer, </booktitle> <pages> pages 12-18, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: A large amount of previous work has concentrated on how to deal with access and information integration from heterogeneous databases (e.g. relational databases) which contain structured information. Many problems arise due to semantic schema conflicts and ontological mismatches <ref> [11] </ref>. The work described here is focussing on WWW-based information where most of the information is unstructured and where an information agent does not have access to the contents of the whole information source at once but only through an external query interface.
Reference: [12] <author> C.A. Knoblock, Y. arens, and C. Hsu. </author> <title> Cooperating agents for information retrieval. </title> <booktitle> In Proc. 2nd Intl. Conf. on Cooperative Information Systems. </booktitle> <institution> Univ. of Toronto Press, </institution> <year> 1994. </year>
Reference-contexts: The architecture presented here is consistent with formal BDI agent theory [2, 15]. The larger part of the architecture (outside of the local infobase cache) is shared by all of our software agent classes. This differentiates our approach from approaches such as SIMS <ref> [12] </ref> that are focused on providing what we would call multi-source information agent behaviors (see section 5). <p> These types of new behaviors can be achieved by supplying new reductions to the existing query answering behaviors. More extensive multi-source integration (for example, breaking up queries, making multiple requests, and integrating the results <ref> [12] </ref>) might require not only new reductions, but additional new behaviors. 6 WARREN WARREN, our multi-agent portfolio management system, currently consists of a matchmaker, two task agents, 6 information agents and one interface agent, the Portfolio agent, for each user.
Reference: [13] <author> D. Kuokka and L. Harada. </author> <title> On using KQML for matchmaking. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 239-245, </pages> <address> San Francisco, June 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Information agents do not function in a vacuum. They have to make themselves known as information providers to the larger agent society. When an agent is created, it advertises itself to some entity such as a matchmaker or broker <ref> [9, 8, 13, 6] </ref>. This advertisement, expressed in terms of an agent's information base schema (section 3.4), specifies the information services that the agent is making available, the associated ontology (ies) and any associated query limitations. <p> One of the reusable behaviors inherited by a matchmaker is the ability to process persistent queries as described in <ref> [13] </ref>. The agents in our system communicate using KQML [8]. Our focus on long-term behaviors, such as periodic queries and information monitoring, has required us to extend the language with perfor-mative parameters to allow the specification of deadlines, task frequencies, and other temporal behavioral constraints.
Reference: [14] <author> Tim Oates, M. V. Nagendra Prasad, Victor R. Lesser, and Keith S. Decker. </author> <title> A distributed problem solving approach to cooperative information gathering. </title> <booktitle> In AAAI Spring Symposium on Information Gathering in Distributed Environments, </booktitle> <institution> Stanford University, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: The generic software components, based on DECAF <ref> [7, 14] </ref>, are common to all classes of information agents as well as task and interface agents we have built. The architecture presented here is consistent with formal BDI agent theory [2, 15].
Reference: [15] <author> A.S. Rao and M.P. Georgeff. </author> <title> BDI agents: From theory to practice. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 312-319, </pages> <address> San Francisco, June 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: The generic software components, based on DECAF [7, 14], are common to all classes of information agents as well as task and interface agents we have built. The architecture presented here is consistent with formal BDI agent theory <ref> [2, 15] </ref>. The larger part of the architecture (outside of the local infobase cache) is shared by all of our software agent classes. This differentiates our approach from approaches such as SIMS [12] that are focused on providing what we would call multi-source information agent behaviors (see section 5).
Reference: [16] <author> K. Sycara and D. Zeng. </author> <title> Coordination of multiple intelligent software agents. </title> <journal> International Journal of Intelligent and Cooperative Information Systems. </journal>
Reference-contexts: Our framework comprises interface agents interacting with an individual user, task agents involved in the processes associated with arbitrary problem-solving tasks, and information agents that are closely tied to a source or sources of data <ref> [16] </ref>. These three broad agent categories share common architectural components (section 3) but have different sets of agent behaviors. The behaviors in each class of agent are reusable. We have identified the behaviors that would be desirable for an autonomous information agent functioning in the context of the WWW. <p> We have used (and reused) the architectural components and agent behaviors for multiple coordination agents in various domains. These domains span projects such as PLEIADES, in the domain of organizational decision making <ref> [16] </ref> and WARREN, in the financial portfolio management domain [17, 4] 2 A Functional Overview of Information Agents Typically, a single information agent will serve the information needs of many other machine or human agents.
Reference: [17] <author> Katia Sycara and Dajun Zeng. </author> <title> Multi-agent integration of information gathering and decision support. </title> <booktitle> In The Proceedings of ECAI-96. </booktitle>
Reference-contexts: We have used (and reused) the architectural components and agent behaviors for multiple coordination agents in various domains. These domains span projects such as PLEIADES, in the domain of organizational decision making [16] and WARREN, in the financial portfolio management domain <ref> [17, 4] </ref> 2 A Functional Overview of Information Agents Typically, a single information agent will serve the information needs of many other machine or human agents. An information agent is quite different from a typical WWW service that provides data to multiple users.
Reference: [18] <author> M. Williamson, K. Decker, and K. Sycara. </author> <title> Unified information and control flow in hierarchical task networks. </title> <booktitle> In Proceedings of the AAAI-96 workshop on Theories of Planning, Action, and Control, </booktitle> <year> 1996. </year>
Reference-contexts: An action is enabled when all the required inputs have been provided. (See <ref> [18] </ref> for a complete description of our task network representation.) The task reduction schemas are retrieved and instantiated by the planner to provide task structures that are subsequently scheduled and executed. The execution of the resulting task structures composes the agent's behaviors.
References-found: 18

