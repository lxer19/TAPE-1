URL: http://www.cs.gatech.edu/computing/Telecomm/people/Phd/mjd/papers/aid98.ps.gz
Refering-URL: http://www.cs.gatech.edu/computing/Telecomm/people/Phd/mjd/mjd.html
Root-URL: 
Title: METHOD-SPECIFIC KNOWLEDGE COMPILATION: TOWARDS PRACTICAL DESIGN SUPPORT SYSTEMS  
Author: J. WILLIAM MURDOCK AND ASHOK K. GOEL MICHAEL J. DONAHOO SHAMKANT NAVATHE 
Date: July 20-23, 1998.]  
Note: [Source: Proceedings of the 5th International Conferenceon Artificial Intelligence and Design (AID'98). Lisbon, Portugal,  
Address: Atlanta, Georgia 30332-0280, USA  
Affiliation: Intelligent Systems Group  Networking and Telecommunications Group AND  Database Systems Group College of Computing Georgia Institute of Technology  
Abstract: Modern knowledge systems for design typically employ multiple problem-solving methods which in turn use different kinds of knowledge. The construction of a heterogeneous knowledge system that can support practical design thus raises two fundamental questions: how to accumulate huge volumes of design information, and how to support heterogeneous design processing? Fortunately, partial answers to both questions exist separately. Legacy databases already contain huge amounts of general-purpose design information. In addition, modern knowledge systems typically characterize the kinds of knowledge needed by specific problem-solving methods quite precisely. This leads us to hypothesize method-specific data-to-knowledge compilation as a potential mechanism for integrating heterogeneous knowledge systems and legacy databases for design. In this paper, first we outline a general computational architecture called HIPED for this integration. Then, we focus on the specific issue of how to convert data accessed from a legacy database into a form appropriate to the problem-solving method used in a heterogeneous knowledge system. We describe an experiment in which a legacy knowledge system called Interactive Kritik is integrated with an ORACLE database using IDI as the communication tool. The limited experiment indicates the computational feasibility of method-specific data-to-knowledge compilation, but also raises additional research issues. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Barber, J., Jacobson, M., Penberthy, L., Simpson, R., Bhatta, S., Goel, A. K., Pearce, M., Shankar, M., and Stroulia, E. </author> <year> (1992). </year> <title> Integrating artificial intelligence and multimedia technologies for interface design advising. </title> <journal> NCR Journal of Research and Development, </journal> <volume> 6(1) </volume> <pages> 75-85. </pages>
Reference-contexts: But it is also applicable to systems that have directly led to real applications such as R1 (McDermott, 1982), PRIDE (Mit-tal et al., 1986), VT (Marcus et al., 1988), CLAVIER (Hennessy and Hinkle, 1992), and ASK-JEF <ref> (Barber et al., 1992) </ref>. The problem is the limited scale and scope of knowledge systems for design. The scale of these systems is quite small both in the size and complexity of problems they solve and the amount and variety of knowledge they contain.
Reference: <author> Batini, C., Lenzernini, M., and Navathe, S. B. </author> <year> (1986). </year> <title> A comparative analysis of methodologies for database schema integration. </title> <journal> ACM Computing Surveys, </journal> <volume> 18(4) </volume> <pages> 325-364. </pages>
Reference-contexts: That is, database designers of the various legacy systems create a global schema capable of representing the collection of data in the legacy databases and provide a mapping between the legacy system schemas and this global schema <ref> (Batini et al., 1986) </ref>. Clearly, this approach does not work for integration of a large number of database systems. We propose (see the right side of Figure 1) to allow the database designers to develop a metadata description, called an augmented export schema, of their database system.
Reference: <author> Bhatta, S., Goel, A. K., and Prabhakar, S. </author> <year> (1994). </year> <title> Analogical design: A model-based approach. </title> <booktitle> In Proceedings of the Third International Conference on Artificial Intelligence in Design, </booktitle> <address> Lausanne, Switzerland. </address>
Reference: <author> Brodie, M. </author> <year> (1988). </year> <title> Future intelligent systems: AI and database technologies working together. </title> <editor> In Mylopoulos and Brodie, editors, </editor> <booktitle> Reading in Artificial Intelligence and Databases, </booktitle> <pages> pages 623-641. </pages> <publisher> Morgan Kauffman. </publisher>
Reference-contexts: Various projects on information integration have focused on different aspects of information integration. For example, KQML (Finin and Wieder-hold, 1991) provides a protocol language for communication among database systems, and KIF (Genesreth and Fikes, 1991) provides a meta-language for enabling translation between knowledge systems. In contrast, <ref> (Brodie, 1988) </ref> has emphasized the need for integrating knowledge systems and databases. (McKay et al., 1990) in particular have pointed out that a key question is how to convert data in a database into knowledge useful to a knowledge system.
Reference: <author> Brown, D. and Chandrasekaran, B. </author> <year> (1989). </year> <title> Design Problem Solving: Knowledge Structures and Control Strategies. </title> <publisher> Pitman, </publisher> <address> London, UK. </address>
Reference-contexts: 1. Motivations, Background, And Goals Knowledge systems for design developed thus far appear incapable of supporting practical design. This critique surely is valid for all laboratory knowledge systems such as AIR-CYL <ref> (Brown and Chandrasekaran, 1989) </ref>, COMADE (Lenz et al., 1996), and our own Kritik series of systems described at earlier AI in Design conferences (Stroulia et al., 1992; Bhatta et al., 1994; Goel et al., 1996b).
Reference: <author> Codd, E. </author> <year> (1970). </year> <title> A relational model for large shared data banks. </title> <journal> CACM, </journal> <volume> 13(6). </volume>
Reference-contexts: Substep 4.2 Knowledge attributes are constructed from fields in the data item. Substep 4.3 Knowledge attributes are synthesized into a knowledge ele ment. The particular legacy systems for which we have implemented these algorithms are Interactive Kritik and a relational database system <ref> (Codd, 1970) </ref> developed under Oracle. Thus the experimental system serves as an interface between Interactive Kritik and our Oracle database. 5.2. AN ILLUSTRATIVE EXAMPLE Our experiment takes place during a session in which Interactive Kri-tik is designing an electric light circuit.
Reference: <author> Finin, T. and Wiederhold, G. </author> <year> (1991). </year> <title> An overview of KQML: A knowledge query and manipulation language. </title> <institution> Available through the Stanford University Computer Science Department. </institution>
Reference-contexts: The strategy appears especially attractive with the advent of the World Wide Web which provides potential access to huge numbers of heterogeneous information sources such as electronic databases and digital libraries. Various projects on information integration have focused on different aspects of information integration. For example, KQML <ref> (Finin and Wieder-hold, 1991) </ref> provides a protocol language for communication among database systems, and KIF (Genesreth and Fikes, 1991) provides a meta-language for enabling translation between knowledge systems.
Reference: <author> Genesreth, M. R. and Fikes, R. </author> <year> (1991). </year> <title> Knowledge Interchange Format Version 2 Reference Manual. </title> <institution> Stanford University Logic Group. </institution>
Reference-contexts: Various projects on information integration have focused on different aspects of information integration. For example, KQML (Finin and Wieder-hold, 1991) provides a protocol language for communication among database systems, and KIF <ref> (Genesreth and Fikes, 1991) </ref> provides a meta-language for enabling translation between knowledge systems.
Reference: <author> Goel, A. K., Bhatta, S., and Stroulia, E. </author> <year> (1996a). </year> <title> Kritik: An early case-based design system. </title> <editor> In Maher, M. L. and Pu, P., editors, </editor> <title> Issues and Applications of Case-Based Reasoning to Design. </title> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference: <author> Goel, A. K. and Chandrasekaran, B. </author> <year> (1989). </year> <title> Functional representation of designs and redesign problem solving. </title> <booktitle> In Proc. Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1388-1394. </pages> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference: <author> Goel, A. K., Gomez, A., Grue, N., Murdock, J. W., Recker, M., and Govindaraj, T. </author> <year> (1996b). </year> <title> Explanatory interface in interactive design environments. </title> <editor> In Gero, J. S. and Sudweeks, F., editors, </editor> <booktitle> Proceedings of the Fourth International Conference on Artificial Intelligence in Design, </booktitle> <address> Stanford, California. </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: This educational work, however, does not use Kritik or any other computer-based knowledge system. In parallel, we have been incrementally converting Kri-tik from a laboratory system to a prototype tool for potential introduction in a design classroom. Interactive Kritik, which we described in the last AI in Design conference <ref> (Goel et al., 1996b) </ref>, provides a graphical explanatory "front-end" to Kritik. HIPED attempts to provide a database "back-end" to Interactive Kritik.
Reference: <author> Goel, A. K., Gomez, A., Grue, N., Murdock, J. W., Recker, M., and Govindaraj, T. </author> <year> (1996c). </year> <title> Towards design learning environments I: Exploring how devices work. </title> <editor> In Frasson, C., Gauthier, G., and Lesgold, A., editors, </editor> <booktitle> Proceedings of the Third International Conference on Intelligent Tutoring Systems, number 1086 in Lecture Notes in Computer Science, </booktitle> <address> Montreal, Canada. </address> <publisher> Springer. </publisher>
Reference: <author> Goel (ed.), A. K. </author> <year> (1991). </year> <title> Knowledge compilation: A symposium. </title> <journal> IEEE Expert, </journal> <note> 6(2). Method-Specific Knowledge Compilation 19 Gruber, </note> <author> T. R. </author> <year> (1993). </year> <title> A translation approach to portable ontology specification. </title> <journal> Knowledge Acquisition, </journal> <volume> 5(2) </volume> <pages> 199-220. </pages>
Reference: <author> Hennessy, D. and Hinkle, D. </author> <year> (1992). </year> <title> Applying case-based reasoning to autoclave loading. </title> <journal> IEEE Expert, </journal> <pages> pages 21-26. </pages>
Reference-contexts: But it is also applicable to systems that have directly led to real applications such as R1 (McDermott, 1982), PRIDE (Mit-tal et al., 1986), VT (Marcus et al., 1988), CLAVIER <ref> (Hennessy and Hinkle, 1992) </ref>, and ASK-JEF (Barber et al., 1992). The problem is the limited scale and scope of knowledge systems for design. The scale of these systems is quite small both in the size and complexity of problems they solve and the amount and variety of knowledge they contain.
Reference: <author> Hmelo, C. </author> <year> (1997). </year> <title> Using structure-behavior-function models in design problems for science learning. Presented to the NSF Design Education Workshop, </title> <institution> Georgia Institute of Technology, Atlanta. </institution>
Reference: <author> Keller, R. M. </author> <year> (1991). </year> <title> Applying knowledge compilation techniques to model-based reasoning. </title> <journal> IEEE Expert, </journal> <volume> 6(2). </volume>
Reference-contexts: Knowledge in a generally useful organization may be transformed into a different organization which is more efficient for a specific application. For example, a model of a device may be transformed into a set of rules for diagnosing faults of that device, as per <ref> (Keller, 1991) </ref>. 3. Declarative knowledge may be transformed into procedural knowledge, i.e. a specification of a task may be compiled into a procedure for accomplishing that task.
Reference: <author> Koch, G. and Loney, K. </author> <year> (1995). </year> <title> Oracle: The Complete Reference. </title> <journal> Osborne/McGraw Hill/Oracle, </journal> <note> 3rd edition. </note>
Reference-contexts: HIPED integrates Interactive Kritik (Goel et al., 1996b; Goel et al., 1996c), the current version of Kritik, with an external database represented in Oracle <ref> (Koch and Loney, 1995) </ref>. The knowledge system and the database communicate through IDI (Paramax, 1993). 2.
Reference: <author> Lenat, D. and Guha, R. </author> <year> (1990). </year> <title> Building Large Knowledge Based Systems: Representation and Inference in the CYC Project. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: PAST RESEARCH The above two questions are among the core issues in AI research on knowledge systems in general. AI strategies for answering them may be divided into two general categories: (i) ontological engineering, and (ii) information integration. The well known CYC project <ref> (Lenat and Guha, 1990) </ref>, which seeks to provide a global ontology for constructing knowledge systems, exemplifies the strategy of ontological engineering. Ontolingua (Gruber, 1993) provides another, domain-specific example of this strategy.
Reference: <author> Lenz, T., McDowell, J., Kamel, A., Sticklen, J., and Hawley, M. C. </author> <year> (1996). </year> <title> The evolution of a decision support architecture for polymer composites design. </title> <journal> IEEE Expert, </journal> <volume> 11(5) </volume> <pages> 77-83. </pages>
Reference-contexts: 1. Motivations, Background, And Goals Knowledge systems for design developed thus far appear incapable of supporting practical design. This critique surely is valid for all laboratory knowledge systems such as AIR-CYL (Brown and Chandrasekaran, 1989), COMADE <ref> (Lenz et al., 1996) </ref>, and our own Kritik series of systems described at earlier AI in Design conferences (Stroulia et al., 1992; Bhatta et al., 1994; Goel et al., 1996b).
Reference: <author> Marcus, S., Stout, J., and McDermott, J. </author> <year> (1988). </year> <title> VT: An expert elevator designer that uses knowledge-based backtracking. </title> <journal> AI Magazine, </journal> <volume> 9(1) </volume> <pages> 95-112. </pages>
Reference-contexts: But it is also applicable to systems that have directly led to real applications such as R1 (McDermott, 1982), PRIDE (Mit-tal et al., 1986), VT <ref> (Marcus et al., 1988) </ref>, CLAVIER (Hennessy and Hinkle, 1992), and ASK-JEF (Barber et al., 1992). The problem is the limited scale and scope of knowledge systems for design.
Reference: <author> McDermott, J. </author> <year> (1982). </year> <title> R1: A rule-based configurer of computer systems. </title> <journal> Artificial Intelligence, </journal> <volume> 19 </volume> <pages> 39-88. </pages>
Reference-contexts: But it is also applicable to systems that have directly led to real applications such as R1 <ref> (McDermott, 1982) </ref>, PRIDE (Mit-tal et al., 1986), VT (Marcus et al., 1988), CLAVIER (Hennessy and Hinkle, 1992), and ASK-JEF (Barber et al., 1992). The problem is the limited scale and scope of knowledge systems for design.
Reference: <author> McKay, D., Finin, T., and O'Hare, A. </author> <year> (1990). </year> <title> The intelligent database interface. </title> <booktitle> In Proceedings of the Eight National Conference on Artificial Intelligence, </booktitle> <pages> pages 677-684, </pages> <address> Menlo Park, CA. </address> <publisher> AAAI. </publisher>
Reference-contexts: For example, KQML (Finin and Wieder-hold, 1991) provides a protocol language for communication among database systems, and KIF (Genesreth and Fikes, 1991) provides a meta-language for enabling translation between knowledge systems. In contrast, (Brodie, 1988) has emphasized the need for integrating knowledge systems and databases. <ref> (McKay et al., 1990) </ref> in particular have pointed out that a key question is how to convert data in a database into knowledge useful to a knowledge system. The answer to this question clearly depends in part on the problem-solving method used by the knowledge system. 1.2.
Reference: <author> Mittal, S., Dym, C., and Morjaria, M. </author> <year> (1986). </year> <title> PRIDE: An expert system for the design of paper handling systems. </title> <journal> Computer, </journal> <volume> 19(7) </volume> <pages> 102-114. </pages>
Reference: <author> Navathe, S. B. and Donahoo, M. J. </author> <year> (1995). </year> <title> Towards intelligent integration of heterogeneous information sources. </title> <booktitle> In Proceedings of the 6th International Workshop on Database Re-engineering and Interoperability. </booktitle>
Reference-contexts: A collection of augmented export schemas can then be automatically processed by a schema builder to create a partially integrated global schema 1 which can be as simple as the actual database schema, allowing any database to easily participate, or as complicated as the schema builder can understand (See <ref> (Navathe and Donahoo, 1995) </ref> for details on possible components of an augmented export schema). A user can then submit queries on the partially integrated global schema to a query processor which fragments the query into sub-queries on the local databases.
Reference: <author> Navathe, S. B., Mahajan, S., and Omiecinski, E. </author> <year> (1996). </year> <title> Rule based database integration in HIPED: </title> <booktitle> Heterogeneous intelligent processing in engineering design. In Proceedings of the International Symposium on Cooperative Database Systems for Advanced Applications. </booktitle> <publisher> World Scientific Press. </publisher> <month> Paramax </month> <year> (1993). </year> <title> Software User's Manual for the Cache-Based Intelligent Database Interface of the Intelligent Database Interface. Paramax Systems Organization, </title> <address> 70 East Swedesford Road, Paoll, PA, 19301. Rev. 2.3. </address>
Reference-contexts: The experiment described in Section 5 models only a small portion of the general architecture described in Section 2 and addresses only one of the applications of knowledge compilation presented in Section 3. In a related experiment, we have worked with another portion of the architecture <ref> (Navathe et al., 1996) </ref>. Here, five types of queries that Interactive Kritik may create are expressed in an SQL-like syntax.
Reference: <author> Punch, W., Goel, A. K., and Brown, D. </author> <year> (1996). </year> <title> A knowledge-based selection mechanism for strategic control with application in design, diagnosis and planning. </title> <journal> International Journal of Artificial Intelligence Tools, </journal> <volume> 4(3) </volume> <pages> 323-348. </pages>
Reference-contexts: The third generation of knowledge systems for design, such as COMADE and Kritik, not only use a richer array of problem-solving methods, but also allow for flexible strategic control and enable dynamic method selection <ref> (Punch et al., 1996) </ref>. Given the variety and complexity of design, the above evolution is only natural. But it introduces a new element in the AI strategy of information integration: how to accommodate heterogeneity of processing. For heterogeneous knowledge systems that employ multiple problem-solving methods, 4 J.
Reference: <author> Puntambekar, S. and Hubscher, R. </author> <year> (1997). </year> <title> A structure-behavior-function analysis of the design process. Presented to the NSF Design Education Workshop, </title> <institution> Georgia Institute of Technology, Atlanta. </institution>
Reference: <author> Ramakrishnan, R., Srivastava, D., and Sudarshan, S. </author> <year> (1992). </year> <title> CORAL: Control, relations, </title> <booktitle> and logic. In Proceedings of the International Conference of the Internation Conference on Very Large Databases. </booktitle>
Reference-contexts: The rules enable query evaluation in multiple ways in which the tokens in a given query may match relation names, attribute names, or values in the underlying databases' tables. The query processing is implemented using the CORAL deductive database system <ref> (Ramakrishnan et al., 1992) </ref>. While the experiment described in this paper shows method-specific compilation of data into knowledge usable by Interactive Kritik, the other experiment shows how queries from Interactive Kritik can be flexibly evaluated in multiple ways.
Reference: <author> Stroulia, E. and Goel, A. K. </author> <year> (1995). </year> <title> Functional representation and reasoning in reflective systems. </title> <journal> Journal of Applied Intelligence, </journal> <note> 9(1). Special Issue on Functional Reasoning. </note>
Reference-contexts: Once again, this approach does not work for integration of a large number of knowledge systems. We propose (see the left side of Figure 1) to allow knowledge system designers to develop a description, called a "task-method schema," of the tasks each local knowledge system can perform <ref> (Stroulia and Goel, 1995) </ref>. In this approach, a set of knowledge systems, defined at the level of tasks and 1 A mechanism for complete, automated integration is unlikely. Method-Specific Knowledge Compilation 7 methods, are organized into a coherent whole by a query processor or central control agent.
Reference: <author> Stroulia, E., Shankar, M., Goel, A. K., and Penberthy, L. </author> <year> (1992). </year> <title> A model-based approach to blame assignment in design. </title> <editor> In Gero, J. S., editor, </editor> <booktitle> Proceedings of the Second International Conference on Artificial Intelligence in Design. </booktitle>
Reference: <author> Tong, C. </author> <year> (1991). </year> <title> The nature and significance of knowledge compilation. </title> <journal> IEEE Expert, </journal> <volume> 6(2). </volume>
Reference-contexts: This is really an extreme form of the former approach; the result is a knowledge element which only supports one application, its execution, but presumably does so in the most effi Method-Specific Knowledge Compilation 9 cient way that the compiler can generate. <ref> (Tong, 1991) </ref> embodies this approach. 4. Knowledge of patterns or categories can be inductively inferred from elements.
References-found: 31

