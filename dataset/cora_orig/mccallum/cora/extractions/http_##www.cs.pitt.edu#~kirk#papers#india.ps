URL: http://www.cs.pitt.edu/~kirk/papers/india.ps
Refering-URL: http://www.cs.pitt.edu/~kirk/papers/index.html
Root-URL: 
Title: An Optimal Deterministic Algorithm for Online b-Matching Hence, Balance is optimally competitive, including low order
Author: Bala Kalyanasundaram Kirk R. Pruhs 
Affiliation: e :63.  
Note: (1+ 1 b b  
Pubnum: 1 1  
Abstract: We study the online unweighted b-matching problem where at most b 1 requests can be matched to any server site. We present a deterministic algorithm Balance whose competitive ratio is 1 1 (1+ 1 b ) b . We show that the competitive ratio of every deterministic online algorithm is at least 1 1 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Grove, M. Kao, P. Krishnan, and J. Vitter, </author> <title> "Online Perfect Matching and Mobile Computing", </title> <booktitle> Proceedings of the Workshop on Algorithms and Data Structures, </booktitle> <year> 1995. </year>
Reference-contexts: Note that the instance I specifies G as well as the order in which the r i 's appear. As one example application, consider the problem of assigning client computers to support stations studied by Grove, Kao, Krishnan and Vit-ter <ref> [1] </ref>. In this problem each support station has a maximum range of service and a limit on the number of clients that it can support. Clients arrive over time and must each be assigned to a support station that is not too distant and that is not fully utilized. <p> Kao and Tate [4] extended the results of [5] by considering the case where requests appear in batches. They showed that the results of [5] cannot be improved even if request appear in batches of size o (n) each. Grove, Kao, Krishnan and Vitter <ref> [1] </ref> consider the problem of maintaining a maximum cardinality matching with a minimal number of reassignments of servers in the special case that the maximum degree of each r i = 2. [1] show that the greedy algorithm, that switches assignments along the shortest augmenting path, is O (log n)-competitive, i.e. <p> Grove, Kao, Krishnan and Vitter <ref> [1] </ref> consider the problem of maintaining a maximum cardinality matching with a minimal number of reassignments of servers in the special case that the maximum degree of each r i = 2. [1] show that the greedy algorithm, that switches assignments along the shortest augmenting path, is O (log n)-competitive, i.e. the greedy algorithm makes at most O (log n) times as many reassignments as the optimal number of reassignments required to maintain a maximum cardinality matching. [1] show the competitive ratio of <p> each r i = 2. <ref> [1] </ref> show that the greedy algorithm, that switches assignments along the shortest augmenting path, is O (log n)-competitive, i.e. the greedy algorithm makes at most O (log n) times as many reassignments as the optimal number of reassignments required to maintain a maximum cardinality matching. [1] show the competitive ratio of every deterministic algorithm for this problem is (log n). [1] also give some results for case that requests may depart. Results for online weighted matching problems, on graphs where the edge weights satisfy the triangle inequality, can be found in [2, 3, 6]. <p> the shortest augmenting path, is O (log n)-competitive, i.e. the greedy algorithm makes at most O (log n) times as many reassignments as the optimal number of reassignments required to maintain a maximum cardinality matching. <ref> [1] </ref> show the competitive ratio of every deterministic algorithm for this problem is (log n). [1] also give some results for case that requests may depart. Results for online weighted matching problems, on graphs where the edge weights satisfy the triangle inequality, can be found in [2, 3, 6].
Reference: [2] <author> B. Kalyanasundaram, and K. Pruhs, </author> <title> "Online weighted matching", </title> <journal> Journal of Algorithms, </journal> <volume> 14, </volume> <pages> 478-488, </pages> <year> 1993. </year>
Reference-contexts: Results for online weighted matching problems, on graphs where the edge weights satisfy the triangle inequality, can be found in <ref> [2, 3, 6] </ref>. In particular, an optimally competitive deterministic algorithm for the case 2 b = 1 can be found in [2, 6]. In [3], the case of arbitrary b is studied under the assumption that the online algorithm has more servers per site than the adversary. <p> Results for online weighted matching problems, on graphs where the edge weights satisfy the triangle inequality, can be found in [2, 3, 6]. In particular, an optimally competitive deterministic algorithm for the case 2 b = 1 can be found in <ref> [2, 6] </ref>. In [3], the case of arbitrary b is studied under the assumption that the online algorithm has more servers per site than the adversary.
Reference: [3] <author> B. Kalyanasundaram, and K. Pruhs, </author> <title> "The Online Transportation Problem", </title> <booktitle> Proc. of European Symposium on Algorithms, </booktitle> <volume> Vol. 979 (LNCS), </volume> <pages> 484-493, </pages> <year> 1995. </year>
Reference-contexts: Results for online weighted matching problems, on graphs where the edge weights satisfy the triangle inequality, can be found in <ref> [2, 3, 6] </ref>. In particular, an optimally competitive deterministic algorithm for the case 2 b = 1 can be found in [2, 6]. In [3], the case of arbitrary b is studied under the assumption that the online algorithm has more servers per site than the adversary. <p> Results for online weighted matching problems, on graphs where the edge weights satisfy the triangle inequality, can be found in [2, 3, 6]. In particular, an optimally competitive deterministic algorithm for the case 2 b = 1 can be found in [2, 6]. In <ref> [3] </ref>, the case of arbitrary b is studied under the assumption that the online algorithm has more servers per site than the adversary. <p> The idea of trying to balance the number of servers used per site can also be found in an online matching algorithm given in <ref> [3] </ref>. As in [3, 7], we also compare the performance of the online algorithm against the performance of an o*ine algorithm with fewer servers. This will give us an idea on how well Balance peforms against a less malicious input given by the adversary. <p> The idea of trying to balance the number of servers used per site can also be found in an online matching algorithm given in [3]. As in <ref> [3, 7] </ref>, we also compare the performance of the online algorithm against the performance of an o*ine algorithm with fewer servers. This will give us an idea on how well Balance peforms against a less malicious input given by the adversary.
Reference: [4] <author> M. Kao, and S. Tate, </author> <title> "Online Matching with Blocked Input", </title> <journal> Information Processing Letters, </journal> <volume> 38, </volume> <pages> 113-116, </pages> <year> 1991. </year>
Reference-contexts: Hence, Ranking is optimally competitive, up to low order terms. Kao and Tate <ref> [4] </ref> extended the results of [5] by considering the case where requests appear in batches. They showed that the results of [5] cannot be improved even if request appear in batches of size o (n) each.
Reference: [5] <author> R. Karp, U. Vazirani, and V. Vazirani, </author> <title> "An Optimal Algorithm for Online Bipartite Matching", </title> <booktitle> STOC, </booktitle> <pages> 352-358, </pages> <year> 1990. </year>
Reference-contexts: So the competitive ratio will be the fraction (relative to the maximum matching) of the clients that can be guaranteed support without reassignment. 1.1 Related Results Karp, Vazirani, and Vazirani <ref> [5] </ref> give the following results for online bipartite matching, the special case of b-matching where b = 1. <p> It is not hard to observe that any deterministic algorithm that never refuses to match a request, if it is possible to do so, is 1 2 -competitive, and that no deterministic algorithm can be better than 1 2 -competitive. <ref> [5] </ref> give a randomized algorithm Ranking whose competitive ratio is 1 1 e + o (1) against an oblivious adversary that must specify the input a priori. <p> Ranking initially selects uniformly at random a linear order of the server sites, and then matches each request with the the first available server. <ref> [5] </ref> show that the competitive ratio of every randomized algorithm is at least 1 1 e + o (1). Hence, Ranking is optimally competitive, up to low order terms. Kao and Tate [4] extended the results of [5] by considering the case where requests appear in batches. <p> server sites, and then matches each request with the the first available server. <ref> [5] </ref> show that the competitive ratio of every randomized algorithm is at least 1 1 e + o (1). Hence, Ranking is optimally competitive, up to low order terms. Kao and Tate [4] extended the results of [5] by considering the case where requests appear in batches. They showed that the results of [5] cannot be improved even if request appear in batches of size o (n) each. <p> Hence, Ranking is optimally competitive, up to low order terms. Kao and Tate [4] extended the results of <ref> [5] </ref> by considering the case where requests appear in batches. They showed that the results of [5] cannot be improved even if request appear in batches of size o (n) each.
Reference: [6] <author> S. Khuller, S. Mitchell, and V. Vazirani, </author> <title> "On-line algorithms for weighted matchings and stable marriages", </title> <journal> Theoretical Computer Science, </journal> <volume> 127(2), </volume> <pages> 255-267, </pages> <year> 1994. </year>
Reference-contexts: Results for online weighted matching problems, on graphs where the edge weights satisfy the triangle inequality, can be found in <ref> [2, 3, 6] </ref>. In particular, an optimally competitive deterministic algorithm for the case 2 b = 1 can be found in [2, 6]. In [3], the case of arbitrary b is studied under the assumption that the online algorithm has more servers per site than the adversary. <p> Results for online weighted matching problems, on graphs where the edge weights satisfy the triangle inequality, can be found in [2, 3, 6]. In particular, an optimally competitive deterministic algorithm for the case 2 b = 1 can be found in <ref> [2, 6] </ref>. In [3], the case of arbitrary b is studied under the assumption that the online algorithm has more servers per site than the adversary.
Reference: [7] <author> D. Sleator and R. Tarjan, </author> <title> "Amortized efficiency of list update and paging rules", </title> <journal> Communications of the ACM, </journal> <volume> 28, </volume> <pages> 202-208, </pages> <year> 1985. </year> <month> 9 </month>
Reference-contexts: The idea of trying to balance the number of servers used per site can also be found in an online matching algorithm given in [3]. As in <ref> [3, 7] </ref>, we also compare the performance of the online algorithm against the performance of an o*ine algorithm with fewer servers. This will give us an idea on how well Balance peforms against a less malicious input given by the adversary.
References-found: 7

