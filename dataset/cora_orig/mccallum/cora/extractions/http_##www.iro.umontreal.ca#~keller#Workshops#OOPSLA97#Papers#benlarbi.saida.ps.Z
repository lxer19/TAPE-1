URL: http://www.iro.umontreal.ca/~keller/Workshops/OOPSLA97/Papers/benlarbi.saida.ps.Z
Refering-URL: http://www.iro.umontreal.ca/~keller/Workshops/OOPSLA97/index.html
Root-URL: http://www.iro.umontreal.ca
Email: email: saida.benlarbi@crim.ca  
Title: Object-Oriented Design Metrics for Early Quality Prediction  
Author: Saida Benlarbi 
Address: Montreal, Canada  
Affiliation: CRIM  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> G. Booch. </author> <title> Object-Oriented Analysis and Design with Application. </title> <publisher> Benjamin/Cummings Publishing Compagny, Inc., </publisher> <address> Santa Clara, California, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction Coupling is one of the design properties that characterize the quality of OO software products <ref> [1] </ref>. Modularity suggests that OO design quality should be ruled by the low coupling principle which minimizes interdependencies across encapsulation boundaries [1, 3]. Better yet, the combined OO structuring concepts of encapsulation and inheritance suggest that a OO design quality may depend on much more complex interactions. <p> 1 Introduction Coupling is one of the design properties that characterize the quality of OO software products [1]. Modularity suggests that OO design quality should be ruled by the low coupling principle which minimizes interdependencies across encapsulation boundaries <ref> [1, 3] </ref>. Better yet, the combined OO structuring concepts of encapsulation and inheritance suggest that a OO design quality may depend on much more complex interactions. <p> In fact, it may depend on any type of interaction that involves two software units U 1 and U 2 pertaining to two different encapsulation and scope boundaries and where at least one change in U 1 requires a change in U 2 to preserve correctness <ref> [1, 3, 4] </ref>. In this paper we propose a set of coupling metrics that can be mapped direclty to design concepts offered by OO design methods, e.g., aggregation and association. Consequently, our metrics allow to quantify the quality impact of these OO design concepts. <p> Thus, for example, in a class coupling relation that involve function member parameters, access refers to the parameter-passing mechanisms provided by the evaluated programming language. It is worth mentioning that our set of distinct coupling measures can be mapped to a set of commonly used OO design relationship concepts <ref> [1] </ref>.
Reference: [2] <author> L. Briand, P. Devanbu, and W. Melo. </author> <title> An Investigation into Coupling Measures for C++. </title> <booktitle> In International Conference on Software Engineering (ICSE '97), </booktitle> <address> Boston, Ma., USA, </address> <month> May 17-24 </month> <year> 1997. </year>
Reference-contexts: For example, in the present work we have focused on design features provided by the C++ language such as the friendship feature. Our metrics extend the set of coupling metrics developed and validated by Briand et al. in <ref> [2] </ref>. We identify new coupling forms that may occur in C++ designed systems. <p> In <ref> [2] </ref>, the authors have proposed three views for high level class coupling: locus, type and relationship. Here we introduce a fourth view visibility, which describe more precisely the class coupling relations. <p> Type: refers to the kind of the exchanged items that are involved in a class coupling interaction. Design mechanisms such as information hiding, aggregation or usage create different kind of class members 1 dependencies at the design level, three of which have been considered in <ref> [2] </ref>: Class-Attribute interactions, Class-Method interactions, and Method-Method interactions. The scope and the visibility of the involved information in an interaction constitute a fourth independent view along which coupling may be detected. In their original work, Briand et al. [2] have considered class coupling regardless to the scope of the data or <p> dependencies at the design level, three of which have been considered in <ref> [2] </ref>: Class-Attribute interactions, Class-Method interactions, and Method-Method interactions. The scope and the visibility of the involved information in an interaction constitute a fourth independent view along which coupling may be detected. In their original work, Briand et al. [2] have considered class coupling regardless to the scope of the data or function members involved in an interaction. For example, the C++ friendship feature allows access in a given direction to data or function members from all scope levels [4]. <p> However, the reverse friendship relation allows access to data or function members from any scope level whereas the friendship relation allows access only to the public information. Figure 1 shows an example of a C++ class hierarchy adapted from <ref> [2] </ref>. Consider for example, the attribute imports of the class C 4 , it may imports any public or protected information from its ancestors (here class C 1 ). It may also imports all kind of information (public, private and protected) from its reverse friends (here C 5 ).
Reference: [3] <author> M. Page-Jones. </author> <title> Comparing Techniques by Means of Encapsulation and Connascence. </title> <journal> Communications of the ACM, </journal> <pages> pages 147-151, </pages> <month> september </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Coupling is one of the design properties that characterize the quality of OO software products [1]. Modularity suggests that OO design quality should be ruled by the low coupling principle which minimizes interdependencies across encapsulation boundaries <ref> [1, 3] </ref>. Better yet, the combined OO structuring concepts of encapsulation and inheritance suggest that a OO design quality may depend on much more complex interactions. <p> In fact, it may depend on any type of interaction that involves two software units U 1 and U 2 pertaining to two different encapsulation and scope boundaries and where at least one change in U 1 requires a change in U 2 to preserve correctness <ref> [1, 3, 4] </ref>. In this paper we propose a set of coupling metrics that can be mapped direclty to design concepts offered by OO design methods, e.g., aggregation and association. Consequently, our metrics allow to quantify the quality impact of these OO design concepts.
Reference: [4] <author> M. A. Weiss. </author> <title> Algorithms, Data Structures, and Problem Solving with C++. </title> <publisher> Addison-Wesley Publishing Compagny, </publisher> <year> 1996. </year> <month> 4 </month>
Reference-contexts: In fact, it may depend on any type of interaction that involves two software units U 1 and U 2 pertaining to two different encapsulation and scope boundaries and where at least one change in U 1 requires a change in U 2 to preserve correctness <ref> [1, 3, 4] </ref>. In this paper we propose a set of coupling metrics that can be mapped direclty to design concepts offered by OO design methods, e.g., aggregation and association. Consequently, our metrics allow to quantify the quality impact of these OO design concepts. <p> In their original work, Briand et al. [2] have considered class coupling regardless to the scope of the data or function members involved in an interaction. For example, the C++ friendship feature allows access in a given direction to data or function members from all scope levels <ref> [4] </ref>. This makes some combinations of the coupling interactions considered in the other three views not occur in C++ systems. Thus, for example, in class-attribute import coupling interactions, both directions of a friendship relation should be considered. <p> It is generally argued that pointers are faster than other access mechanisms. This makes software practitioners 2 extensively use pointers in designing access modes though pointers are not always optimal <ref> [4] </ref>. Moreover, the intense use of pointers may cause for some languages like C++ a number of design problems that generate hard to maintain code. <p> For example, the call by value to an object of pointer type may be an expensive operation if the pointed object is a somewhat large structure. On the other hand, the use of a shallow copy <ref> [4] </ref> that is a copy of pointers to objects rather than the data pointed at, may cause a major destruction if not manipulated with caution. Good readability and high maintainability require an appropriate selection of the parameter-passing mechanisms [4]. <p> On the other hand, the use of a shallow copy <ref> [4] </ref> that is a copy of pointers to objects rather than the data pointed at, may cause a major destruction if not manipulated with caution. Good readability and high maintainability require an appropriate selection of the parameter-passing mechanisms [4]. In order to clearly distinguish and quantify the influence of different access modes we consider yet another explicit form of class coupling: access, which refers to the way the information is accessed in a class coupling interaction.
References-found: 4

