URL: http://www.cs.virginia.edu/~son/publications/rtas96.ps
Refering-URL: http://www.cs.virginia.edu/~son/publications.html
Root-URL: http://www.cs.virginia.edu
Email: (ykim@cs.chungnam.ac.kr) (son@virginia.edu)  
Title: Supporting Predictability in Real-Time Database Systems  
Author: Young-Kuk Kim Sang H. Son 
Address: Taejon, 305-764, Korea Charlottesville, VA 22903  
Affiliation: Department of Computer Science Department of Computer Science Chungnam National University University of Virginia  
Abstract: Real-time database systems (RTDBS) have timing constraints in the specification, such as ready times, deadlines, and temporal constraints. In addition, RT-DBS must adapt to changes in the operating environment and guarantee the completion of critical transactions. Previous research efforts in RTDBS have been focused on scheduling transactions with soft or firm deadlines with serializability as the sole correctness criterion. Not much results have been reported for supporting predictable transaction execution and guaranteeing the temporal consistency of data. The goal has been to minimize the deadline miss ratio and to maintain the logical consistency of data. In this paper, we address the issues on predictability and temporal consistency in RTDBS. We briefly discuss characteristics and requirements of RTDBS, and present a transaction processing scheme that supports multiple levels of predictability for real-time transactions. The performance of the proposed scheme and the cost of achieving high-level of predictability is studied using simulation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Abbott and H. Garcia-Molina. </author> <title> Scheduling Real-Time Transactions: A Performance Evaluation. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 17(3) </volume> <pages> 513-560, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Some of them assume process control systems having highly perishable data and hard deadline transactions as their target applications [13, 16, 3, 18]. Others consider full-fledged information management systems supporting only soft or firm deadline transactions <ref> [1, 5, 6, 17] </ref>. In this paper, we present a scheme for transaction processing that supports various types of real-time transactions with various levels of guarantees. We focus on two issues, predictability and consistency, which are fundamental to real-time transaction processing, but sometimes require conflicting actions. <p> Using the semantics and requirements of data and transactions, RTDBS can apply such an extended correctness criteria under various situations. 3 Real-Time Database System Model Most real-time database scheduling algorithms have been developed and evaluated under almost the same workload and operating environment model used in conventional database systems <ref> [1, 5, 6, 17] </ref>. That is, transactions are assumed to arrive in a Poisson stream at a specified mean rate, and each transaction consists of a random sequence of pages to be read, a subset of which are also updated. <p> For example, a priori knowledge of the attributes of a transaction is sometimes available for some soft real-time transactions and should be utilized to improve the system performance. However, we do not pursue it further in this paper, since much work has been already done for Class III transactions <ref> [1, 5, 6, 17] </ref>. We assume that all Class III transactions have the same level of importance (non-critical) and do not require any individual performance guarantee. The classification is summarized in Table 1. <p> The classification is summarized in Table 1. Note that most real-time database research uses the models which include only a subset of the above classes (e.g., fClass Ig [16, 3, 18] or fClass IIIg <ref> [1, 5, 6, 17] </ref>), and 4 The fraction of the data objects accessed by a transaction is referred to as the selectivity of the transaction. <p> If all Class III transactions have the same values when they complete, the obvious goal of the scheduler is to meet as many deadlines as possible. In this case, we can assign priorities to Class III transactions using either Earliest Deadline First (EDF) or Least Slack First (LSF) <ref> [1] </ref>. Note that the soft deadline task model used in the original slack stealing studies [12, 4] is different from our Class III transaction model in that its performance goal is to minimize the average response time of soft tasks.
Reference: [2] <author> N. C. Audsley, A. Burns, M. F. Richardson, and A. J. Wellings. </author> <title> Hard Real-Time Scheduling: The Deadline Monotonic Approach. </title> <booktitle> In Proceedings of the 8th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <address> Atlanta, GA, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: This scheme is different from other temporal consistency maintenance schemes in that it provides a total guarantee on temporal consistency, while others just try to minimize its violation ratio [14, 18]. We assume that transactions are scheduled under a fixed-priority scheduling framework, called deadline-monotonic scheduling <ref> [2] </ref>, where priorities assigned to processes are inversely proportional to the length of the deadline. Class IA Transactions. A Class IA transaction t x is responsible for maintaining the absolute temporal consistency of an image object x. <p> Statistical Guarantee on Class II Transactions. If the worst-case execution time is available, hard sporadic transactions can be guaranteed to meet their deadlines under a deadline-monotonic scheduling framework, as shown in <ref> [2] </ref>. Unfortunately, this is not the case for transactions in T II : its execution time is not necessarily bounded. <p> We claim that if the value t s is used as the transaction's maximum execution time budget and the sporadic task scheduling scheme presented in <ref> [2] </ref> is employed, the transaction will meet its deadline with the probability no less than p s (i.e., it will achieve the given guarantee level p s ). <p> The Class II transaction scheduling protocol can be summarized as follows: 5 In deadline-monotonic approach, the deadline and period of a process do not have to be equal. Such a relaxation enables sporadic processes to be directly incorporated without alteration to the process model <ref> [2] </ref>. 1. Derive the selectivity s of a transaction t in T II from the given performance requirement (its guarantee level , p s ) and the selectivity distribution (S t ), and then calculate the execution-time bud get t s using s. 2.
Reference: [3] <author> N. C. Audsley, A. Burns, M. F. Richardson, and A. J. Wellings. </author> <title> Absolute and Relative Temporal Constraints in Hard Real-Time Databases. </title> <booktitle> In Proceedings of 1992 IEEE EuroMicro Workshop on Real Time Systems, </booktitle> <month> February </month> <year> 1992. </year>
Reference-contexts: Some of them assume process control systems having highly perishable data and hard deadline transactions as their target applications <ref> [13, 16, 3, 18] </ref>. Others consider full-fledged information management systems supporting only soft or firm deadline transactions [1, 5, 6, 17]. In this paper, we present a scheme for transaction processing that supports various types of real-time transactions with various levels of guarantees. <p> The classification is summarized in Table 1. Note that most real-time database research uses the models which include only a subset of the above classes (e.g., fClass Ig <ref> [16, 3, 18] </ref> or fClass IIIg [1, 5, 6, 17]), and 4 The fraction of the data objects accessed by a transaction is referred to as the selectivity of the transaction.
Reference: [4] <author> R. I. Davis, K. W. Tindell, and A. Burns. </author> <title> Scheduling Slack Time in Fixed Priority Pre-emptive Systems. </title> <booktitle> In Proceedings of the 14th Real-Time Systems Symposium, </booktitle> <pages> pages 222-231, </pages> <address> Raleigh-Durham, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Exploiting Spare Capacity. Within the fixed-priority preemptive scheduling framework, a number of approaches have been developed for scheduling soft real-time tasks along with the guaranteed hard real-time tasks. Our approach to scheduling non-guaranteed transactions is based on dynamic slack stealing approach, presented in <ref> [4] </ref>, which is shown to have better flexibility and performance than other approaches [19]. <p> In this case, we can assign priorities to Class III transactions using either Earliest Deadline First (EDF) or Least Slack First (LSF) [1]. Note that the soft deadline task model used in the original slack stealing studies <ref> [12, 4] </ref> is different from our Class III transaction model in that its performance goal is to minimize the average response time of soft tasks. <p> Spare-Capacity Finding (SCF) policy a policy to exploit the spare capacity for Class III transaction execution in a fixed-priority preemptive system, in the context of our framework: background processing (Background), optimal slack stealing (Optimal), and approximate slack stealing (ASS) <ref> [4] </ref>. Level, EDF 2. Class III scheduling (CIII) policy priority assignment and concurrency control algorithms for Class III transactions: FCFS without concurrency control (FCFS/NO-CC) and EDF with concurrency control (EDF/CC). Cost of Timing Constraint Guarantee.
Reference: [5] <author> J. R. Haritsa. </author> <title> Transaction Scheduling in Firm Real-Time Database Systems. </title> <type> PhD thesis, </type> <institution> University of Wisconsin-Madison, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: Some of them assume process control systems having highly perishable data and hard deadline transactions as their target applications [13, 16, 3, 18]. Others consider full-fledged information management systems supporting only soft or firm deadline transactions <ref> [1, 5, 6, 17] </ref>. In this paper, we present a scheme for transaction processing that supports various types of real-time transactions with various levels of guarantees. We focus on two issues, predictability and consistency, which are fundamental to real-time transaction processing, but sometimes require conflicting actions. <p> Using the semantics and requirements of data and transactions, RTDBS can apply such an extended correctness criteria under various situations. 3 Real-Time Database System Model Most real-time database scheduling algorithms have been developed and evaluated under almost the same workload and operating environment model used in conventional database systems <ref> [1, 5, 6, 17] </ref>. That is, transactions are assumed to arrive in a Poisson stream at a specified mean rate, and each transaction consists of a random sequence of pages to be read, a subset of which are also updated. <p> For example, a priori knowledge of the attributes of a transaction is sometimes available for some soft real-time transactions and should be utilized to improve the system performance. However, we do not pursue it further in this paper, since much work has been already done for Class III transactions <ref> [1, 5, 6, 17] </ref>. We assume that all Class III transactions have the same level of importance (non-critical) and do not require any individual performance guarantee. The classification is summarized in Table 1. <p> The classification is summarized in Table 1. Note that most real-time database research uses the models which include only a subset of the above classes (e.g., fClass Ig [16, 3, 18] or fClass IIIg <ref> [1, 5, 6, 17] </ref>), and 4 The fraction of the data objects accessed by a transaction is referred to as the selectivity of the transaction. <p> Utilizing the inherent semantic information about transactions in specific classes, RTDBS can make different decisions for different classes of transactions. Our semantic concurrency control scheme is based on an optimistic real-time concurrency control algorithm (OCC-TI) proposed in [10]. According to the recent study, optimistic approach appears well-suited to RTDBS <ref> [5] </ref>. Especially, OCC-TI is shown to outperform other real-time optimistic concurrency control algorithms and it can be easily integrated with non-serializable transaction scheduling. Under our Semantic Optimistic Concurrency Control (SOCC) scheme, each class of transactions is managed as follows: Class I Transactions. <p> This is not the case in conventional real-time optimistic concur-rency control algorithms (e.g., OCC-TI), which assume no semantic knowledge of transactions. However, if a conflict occurs between two Class III transactions, it should be resolved based on their priorities (e.g., WAIT-50 <ref> [5] </ref> and Feasible Sacrifice [11]). Class III transactions under the SOCC algorithm go through the validation phase and read phase as detailed in [7]. 5 Cost and Performance Evaluation The performance of the proposed scheme is evaluated and compared with other algorithms through simulation study.
Reference: [6] <author> J. Huang. </author> <title> Real-Time Transaction Processing: Design, Implementation, and Performance Evaluation. </title> <type> PhD thesis, </type> <institution> University of Massachusetts at Amherst, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Some of them assume process control systems having highly perishable data and hard deadline transactions as their target applications [13, 16, 3, 18]. Others consider full-fledged information management systems supporting only soft or firm deadline transactions <ref> [1, 5, 6, 17] </ref>. In this paper, we present a scheme for transaction processing that supports various types of real-time transactions with various levels of guarantees. We focus on two issues, predictability and consistency, which are fundamental to real-time transaction processing, but sometimes require conflicting actions. <p> Using the semantics and requirements of data and transactions, RTDBS can apply such an extended correctness criteria under various situations. 3 Real-Time Database System Model Most real-time database scheduling algorithms have been developed and evaluated under almost the same workload and operating environment model used in conventional database systems <ref> [1, 5, 6, 17] </ref>. That is, transactions are assumed to arrive in a Poisson stream at a specified mean rate, and each transaction consists of a random sequence of pages to be read, a subset of which are also updated. <p> For example, a priori knowledge of the attributes of a transaction is sometimes available for some soft real-time transactions and should be utilized to improve the system performance. However, we do not pursue it further in this paper, since much work has been already done for Class III transactions <ref> [1, 5, 6, 17] </ref>. We assume that all Class III transactions have the same level of importance (non-critical) and do not require any individual performance guarantee. The classification is summarized in Table 1. <p> The classification is summarized in Table 1. Note that most real-time database research uses the models which include only a subset of the above classes (e.g., fClass Ig [16, 3, 18] or fClass IIIg <ref> [1, 5, 6, 17] </ref>), and 4 The fraction of the data objects accessed by a transaction is referred to as the selectivity of the transaction.
Reference: [7] <author> Young-Kuk Kim. </author> <title> Predictability and Consistency in Real-Time Transaction Processing. </title> <type> PhD thesis, </type> <institution> Computer Science Department, University of Virginia, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: As long as the above conditions hold, the temporal consistency requirements related with a derived object are always satisfied. The justification of this statement can be found in <ref> [7] </ref>. Class IC Transactions. Since a Class IC transaction is read-only, the values of data objects read by the transaction have only to be in a correct state until the transaction finishes. <p> In case D o i = D t , t must be assigned a higher priority than that of t o i so that it reads o i before the next update of o i by t o i . The justifications for the above conditions are given in <ref> [7] </ref>. 4.2 Meeting Timing Constraints Since the STCE scheme transforms the temporal consistency constraints into timing constraints of transactions, RTDBS need only to satisfy the timing constraints. <p> We employ a deadline-monotonic approach for hard deadline guarantee, since it is more flexible than the rate-monotonic approach and easily extendible. 5 An extended schedu-lability test for our RTDBS model under this approach is presented in <ref> [7] </ref>. Statistical Guarantee on Class II Transactions. If the worst-case execution time is available, hard sporadic transactions can be guaranteed to meet their deadlines under a deadline-monotonic scheduling framework, as shown in [2]. <p> However, if a conflict occurs between two Class III transactions, it should be resolved based on their priorities (e.g., WAIT-50 [5] and Feasible Sacrifice [11]). Class III transactions under the SOCC algorithm go through the validation phase and read phase as detailed in <ref> [7] </ref>. 5 Cost and Performance Evaluation The performance of the proposed scheme is evaluated and compared with other algorithms through simulation study.
Reference: [8] <author> Young-Kuk Kim and Sang H. Son. </author> <title> An Approach Towards Predictable Real-Time Transaction Processing. </title> <booktitle> In Proceedings of the 5th Euromicro Workshop on Real-Time Systems, </booktitle> <pages> pages 70-75, </pages> <address> Oulu, Finland, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: In a static approach, temporal consistency requirements are transformed into timing constraints of transactions. The system has only to provide a guarantee on the timing constraints, since as long as the corresponding transactions meet their deadlines, the temporal consistency of the data accessed by the transactions is automatically maintained <ref> [8, 13, 14] </ref>.
Reference: [9] <author> Tei-Wei Kuo and Aloysius K. Mok. </author> <title> SSP: A Semantics-Based Protocol for Real-Time Data Access. </title> <booktitle> In Proceedings of the 14th Real-Time Systems Symposium, </booktitle> <pages> pages 76-86, </pages> <address> Raleigh-Durham, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: In a dynamic approach, the system keeps checking the temporal consistency at run time and tries to meet them dynamically, by either using multiple versions of data objects [18] or delaying some transactions in favor of more urgent transactions in terms of temporal consistency enforcement at the specific moment <ref> [9] </ref>. In this section, we present a Static Temporal Consistency Enforcement (STCE) scheme. This scheme is different from other temporal consistency maintenance schemes in that it provides a total guarantee on temporal consistency, while others just try to minimize its violation ratio [14, 18].
Reference: [10] <author> J. Lee and S. H. Son. </author> <title> Using Dynamic Adjustment of Serialization Order for Real-Time Database Systems. </title> <booktitle> In Proceedings of the 14th Real-Time Systems Symposium, </booktitle> <pages> pages 66-75, </pages> <address> Raleigh-Durham, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Utilizing the inherent semantic information about transactions in specific classes, RTDBS can make different decisions for different classes of transactions. Our semantic concurrency control scheme is based on an optimistic real-time concurrency control algorithm (OCC-TI) proposed in <ref> [10] </ref>. According to the recent study, optimistic approach appears well-suited to RTDBS [5]. Especially, OCC-TI is shown to outperform other real-time optimistic concurrency control algorithms and it can be easily integrated with non-serializable transaction scheduling.
Reference: [11] <author> J. Lee and S. H. Son. </author> <title> Deadline-Sensitive Conflict Resolution for Real-Time Optimistic Concurrency Control. </title> <note> submitted for publication, </note> <year> 1994. </year>
Reference-contexts: This is not the case in conventional real-time optimistic concur-rency control algorithms (e.g., OCC-TI), which assume no semantic knowledge of transactions. However, if a conflict occurs between two Class III transactions, it should be resolved based on their priorities (e.g., WAIT-50 [5] and Feasible Sacrifice <ref> [11] </ref>). Class III transactions under the SOCC algorithm go through the validation phase and read phase as detailed in [7]. 5 Cost and Performance Evaluation The performance of the proposed scheme is evaluated and compared with other algorithms through simulation study.
Reference: [12] <author> J. P. Lehoczky and S. Ramos-Thuel. </author> <title> An Optimal Algorithm for Scheduling Soft-Aperiodic Tasks in Fixed-Priority Preemptive Systems. </title> <booktitle> In Proceedings of the 13th Real-Time Systems Symposium, </booktitle> <pages> pages 110-123, </pages> <address> Phoenix, AZ, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: In this case, we can assign priorities to Class III transactions using either Earliest Deadline First (EDF) or Least Slack First (LSF) [1]. Note that the soft deadline task model used in the original slack stealing studies <ref> [12, 4] </ref> is different from our Class III transaction model in that its performance goal is to minimize the average response time of soft tasks.
Reference: [13] <author> K.-J. Lin, F. Jahanian, A. Jhingran, and C. D. </author> <note> Locke. </note>
Reference-contexts: Some of them assume process control systems having highly perishable data and hard deadline transactions as their target applications <ref> [13, 16, 3, 18] </ref>. Others consider full-fledged information management systems supporting only soft or firm deadline transactions [1, 5, 6, 17]. In this paper, we present a scheme for transaction processing that supports various types of real-time transactions with various levels of guarantees. <p> In a static approach, temporal consistency requirements are transformed into timing constraints of transactions. The system has only to provide a guarantee on the timing constraints, since as long as the corresponding transactions meet their deadlines, the temporal consistency of the data accessed by the transactions is automatically maintained <ref> [8, 13, 14] </ref>.
References-found: 13

