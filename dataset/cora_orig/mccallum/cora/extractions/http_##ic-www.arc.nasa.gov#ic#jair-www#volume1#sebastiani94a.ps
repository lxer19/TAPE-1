URL: http://ic-www.arc.nasa.gov/ic/jair-www/volume1/sebastiani94a.ps
Refering-URL: http://www.cs.washington.edu/research/jair/abstracts/sebastiani94a.html
Root-URL: 
Email: rseba@dist.unige.it  
Title: Applying GSAT to Non-Clausal Formulas  
Author: Roberto Sebastiani 
Address: DIST, viale Causa 13, 16145 Genova, Italy.  IRST, loc. Pante, 38050 Povo, Trento, Italy.  
Affiliation: Mechanized Reasoning Group,  Mechanized Reasoning Group,  
Note: Journal of Artificial Intelligence Research 1 (1994) 309-314 Submitted 1/94; published 6/94 Research Note  
Abstract: In this paper we describe how to modify GSAT so that it can be applied to non-clausal formulas. The idea is to use a particular "score" function which gives the number of clauses of the CNF conversion of a formula which are false under a given truth assignment. Its value is computed in linear time, without constructing the CNF conversion itself. The proposed methodology applies to most of the variants of GSAT proposed so far.
Abstract-found: 1
Intro-found: 1
Reference: <author> Artosi, A., & Governatori, G. </author> <year> (1994). </year> <title> Labelled Model Modal Logic. </title> <booktitle> In Proc. of CADE12 Workshop on Automated Model Building. </booktitle>
Reference: <author> Ballantyne, M., & Bledsoe, W. </author> <year> (1982). </year> <title> On Generating and Using Examples in Proof Discovery. </title> <editor> In Michie, D. (Ed.), </editor> <booktitle> Machines intelligence, </booktitle> <volume> Vol. 10, </volume> <pages> pp. 3-39. </pages> <publisher> Halsted Press. </publisher>
Reference: <author> Davis, M., & Putnam, H. </author> <year> (1960). </year> <title> A computing procedure for quantification theory. </title> <journal> Journal of the ACM, </journal> <volume> 7, </volume> <month> 201-215. </month> <title> 313 Sebastiani de la Tour, </title> <editor> T. B. </editor> <year> (1990). </year> <title> Minimizing the Number of Clauses by Renaming. </title> <booktitle> In Proc. of the 10th Conference on Automated Deduction, </booktitle> <pages> pp. 558-572. </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: 1. Introduction GSAT (Selman, Levesque, & Mitchell, 1992; Selman & Kautz, 1993) is an incomplete model-finding algorithm for clausal propositional formulas which performs a randomized local search. GSAT has been shown to solve many "hard" problems much more efficiently than other traditional algorithms like, e.g., DP <ref> (Davis & Putnam, 1960) </ref>. Since GSAT applies only to clausal formulas, using it to find models for ordinary propositional formulas requires some previous clausal-form conversion. This requires extra computation (which can be extremely heavy if the "standard" clausal conversion is used).
Reference: <author> Gent, I. P., & Walsh, T. </author> <year> (1992). </year> <title> The Enigma of SAT Hill-climbing Procedures. </title> <type> Tech. rep. 605, </type> <institution> University of Edinburgh, Dept. of Artificial Intelligence. </institution>
Reference-contexts: All these variants, proposed in <ref> (Gent & Walsh, 1992, 1993) </ref>, can be transposed into NC-GSAT as well, as they are independent of the structure of the input formula. Selman and Kautz (1993) suggest some variants which improve the performance and overcome some problems, such as that of escaping local minima.
Reference: <author> Gent, I. P., & Walsh, T. </author> <year> (1993). </year> <title> Towards an Understanding of Hill-climbing Procedures for SAT. </title> <booktitle> In Proc. of the 11th National Conference on Artificial Intelligence, </booktitle> <pages> pp. 28-33. </pages>
Reference-contexts: The notion of score plays a key role in GSAT, as it is considered as the "distance" from a truth assignment to a satisfying one. The schema of Figure 2 describes GSAT as well as many of its possible variants. We use the notation from <ref> (Gent & Walsh, 1993) </ref>. GSAT performs an iterative search for a satisfying truth assignment for , starting from a random assignment provided by initial (). At each step, the successive assignment is obtained by flipping (inverting) the truth value of one single variable V in T .
Reference: <author> Jeroslow, R. </author> <year> (1988). </year> <title> Computation-Oriented Reduction of Predicate to Propositional Logic. Decision Support System, </title> <booktitle> 4, </booktitle> <pages> 183-197. </pages>
Reference-contexts: In automated theorem proving (a.t.p.) some applications of model-finding have been proposed (see, e.g., (Artosi & Governatori, 1994; Klingerbeck, 1994)). For instance, some decision procedures for decidable subclasses of first-order logic iteratively perform non-clausal model-finding for propositional instances of the input formulas <ref> (Jeroslow, 1988) </ref>. More generally, some model-guided techniques for proof search, like goal deletion (Ballan-tyne & Bledsoe, 1982), false preference, or semantic resolution (Slaney, 1993), seem to be applicable to non-clausal a.t.p. as well. c fl1994 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.
Reference: <author> Kautz, H., & Selman, B. </author> <year> (1992). </year> <title> Planning as Satisfiability. </title> <booktitle> In Proc. 10th European Conference on Artificial Intelligence, </booktitle> <pages> pp. 359-363. </pages>
Reference-contexts: This achievement could enlarge GSAT's application domain. Selman et al. (1992) suggest that some traditional AI problems can be formulated as model-finding tasks; e.g., visual interpretation (Reiter & Mackworth, 1989), planning <ref> (Kautz & Selman, 1992) </ref>, generation of "vivid" knowledge representation (Levesque, 1986). It is often the case that non-clausal representations are more compact for such problems.
Reference: <author> Klingerbeck, S. </author> <year> (1994). </year> <title> Generating Finite Counter Examples with Semantic Tableaux and Interpretation Revision. </title> <booktitle> In Proc. of CADE12 Workshop on Automated Model Building. </booktitle>
Reference: <author> Levesque, H. </author> <year> (1986). </year> <title> Making believers out of computers. </title> <journal> Artificial Intelligence., </journal> <volume> 30, </volume> <pages> 81-108. </pages>
Reference-contexts: This achievement could enlarge GSAT's application domain. Selman et al. (1992) suggest that some traditional AI problems can be formulated as model-finding tasks; e.g., visual interpretation (Reiter & Mackworth, 1989), planning (Kautz & Selman, 1992), generation of "vivid" knowledge representation <ref> (Levesque, 1986) </ref>. It is often the case that non-clausal representations are more compact for such problems. For instance, each rule in the form " i i " gives rise to several distinct clauses if some i are disjuncts or is a conjunct.
Reference: <author> Plaisted, D., & Greenbaum, S. </author> <year> (1986). </year> <title> A Structure-preserving Clause Form Translation. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 2, </volume> <pages> 293-304. </pages>
Reference-contexts: In fact, any model for is also a model for ', but for any model of ' we only know that one of its 2 k extensions is a model of <ref> (Plaisted & Greenbaum, 1986) </ref>. Acknowledgements Fausto Giunchiglia and Enrico Giunchiglia have given substantial and continuous feedback during the whole development of this paper. Toby Walsh provided important feedback about a previous version of this paper. Aaron Noble, Paolo Pecchiari, and Luciano Serafini helped with the final revision.
Reference: <author> Reiter, R., & Mackworth, A. </author> <year> (1989). </year> <title> A logical framework for depiction and image interpretation. </title> <journal> Artificial Intelligence., </journal> <volume> 41 (2), </volume> <pages> 125-155. </pages>
Reference-contexts: An extended version of the paper (Sebastiani, 1994) provides the proofs of the theorems and a detailed description of the algorithm introduced. This achievement could enlarge GSAT's application domain. Selman et al. (1992) suggest that some traditional AI problems can be formulated as model-finding tasks; e.g., visual interpretation <ref> (Reiter & Mackworth, 1989) </ref>, planning (Kautz & Selman, 1992), generation of "vivid" knowledge representation (Levesque, 1986). It is often the case that non-clausal representations are more compact for such problems.
Reference: <author> Sebastiani, R. </author> <year> (1994). </year> <title> Applying GSAT to Non-Clausal Formulas. </title> <type> Tech. rep. 94-0018, DIST, </type> <institution> University of Genova, Italy. </institution> <note> Available via anonimous ftp from mrg.dist.unige.it, /pub/mrg-ftp/. </note>
Reference-contexts: In this paper we describe how to modify GSAT so that it can be applied to non-clausal formulas directly, i.e., with no previous clausal form conversion. An extended version of the paper <ref> (Sebastiani, 1994) </ref> provides the proofs of the theorems and a detailed description of the algorithm introduced. This achievement could enlarge GSAT's application domain. <p> The current implementation of GSAT (Selman & Kautz, 1993) provides a highly-optimized implementation of Updatescores (; V ), which analyzes only the clauses which the last-flipped variable V occurs in. This allows a strong reduction in computational cost. In <ref> (Sebastiani, 1994) </ref> we describe in detail an analogous optimized version of the updating procedure for NC-GSAT, called NC-Updatescores ('; V ), and prove the following properties: (i) if ' is in clausal form, i.e., ' = cnf ('), then NC-UpdateScores ('; V ) has the same complexity as UpdateScores ('; V
Reference: <author> Selman, B., & Kautz, H. </author> <year> (1993). </year> <title> Domain-Independent Extension to GSAT: Solving Large Structured Satisfiability Problems. </title> <booktitle> In Proc. of the 13th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 290-295. </pages>
Reference-contexts: Theorem 3.2 ensures that every score computation is performed in linear time. The current implementation of GSAT <ref> (Selman & Kautz, 1993) </ref> provides a highly-optimized implementation of Updatescores (; V ), which analyzes only the clauses which the last-flipped variable V occurs in. This allows a strong reduction in computational cost.
Reference: <author> Selman, B., Levesque, H., & Mitchell, D. </author> <year> (1992). </year> <title> A New Method for Solving Hard Satisfi-ability Problems. </title> <booktitle> In Proc. of the 10th National Conference on Artificial Intelligence, </booktitle> <pages> pp. 440-446. </pages>
Reference-contexts: This achievement could enlarge GSAT's application domain. Selman et al. (1992) suggest that some traditional AI problems can be formulated as model-finding tasks; e.g., visual interpretation (Reiter & Mackworth, 1989), planning <ref> (Kautz & Selman, 1992) </ref>, generation of "vivid" knowledge representation (Levesque, 1986). It is often the case that non-clausal representations are more compact for such problems.
Reference: <author> Slaney, J. </author> <year> (1993). </year> <title> SCOTT: A Model-Guided Theorem Prover. </title> <booktitle> In Proc. of the 13th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 109-114. </pages> <publisher> Morgan Kaufmann. </publisher> <pages> 314 </pages>
Reference-contexts: For instance, some decision procedures for decidable subclasses of first-order logic iteratively perform non-clausal model-finding for propositional instances of the input formulas (Jeroslow, 1988). More generally, some model-guided techniques for proof search, like goal deletion (Ballan-tyne & Bledsoe, 1982), false preference, or semantic resolution <ref> (Slaney, 1993) </ref>, seem to be applicable to non-clausal a.t.p. as well. c fl1994 AI Access Foundation and Morgan Kaufmann Publishers. All rights reserved.
References-found: 15

