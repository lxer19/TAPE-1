URL: ftp://ftp.cs.columbia.edu/reports/reports-1988/cucs-365-88.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1988.html
Root-URL: http://www.cs.columbia.edu
Title: Notes on the Implementation of a Remote Fork Mechanism  
Author: Jonathan M. Smith John Ioannidis 
Address: New York, NY 10027  
Affiliation: Computer Science Department Columbia University  
Abstract: We describe a method for implementing a remote fork , a primitive with the semantics of a UNIX fork() call which begins the execution of the child process on a remote machine. We begin by examining the subject of process migration, and conclude that most of the relevant process state can be captured and transferred to a remote system without operating system support. We then show how our implementation is easily optimized to achieve a performance improvement of greater than 10 times when measuring execution time. We conclude with some comments on limitations and applications of the remote fork mechanism. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Amnon Barak and Amnon Shiloh, </author> <title> ``A Distributed Load-balancing Policy for a Multicomputer,'' </title> <journal> SOFTWARE PRACTICE AND EXPERIENCE 15(9), </journal> <pages> pp. </pages> <month> 901-913 (September </month> <year> 1985). </year>
Reference-contexts: Several systems provide facilities to migrate processes. Among these are the LOCUS [5, 16] system, the DEMOS/MP [6] system, Stanford's V [14] system, the Amoeba [12, 13] system, and the MOS <ref> [1, 2] </ref> system. DEMOS/MP, V, and Amoeba are message-based; the design is that of a small kernel for passing messages between processes, coupled with server processes which provide access to system resources. These systems have relatively little trouble implementing transparent process migration.
Reference: [2] <author> Amnon Barak and Ami Litman, </author> <title> ``MOS: A Multicomputer Distributed Operating System,'' </title> <journal> SOFTWARE PRACTICE AND EXPERIENCE 15(8), </journal> <pages> pp. </pages> <month> 725-737 (August </month> <year> 1985). </year>
Reference-contexts: Several systems provide facilities to migrate processes. Among these are the LOCUS [5, 16] system, the DEMOS/MP [6] system, Stanford's V [14] system, the Amoeba [12, 13] system, and the MOS <ref> [1, 2] </ref> system. DEMOS/MP, V, and Amoeba are message-based; the design is that of a small kernel for passing messages between processes, coupled with server processes which provide access to system resources. These systems have relatively little trouble implementing transparent process migration.
Reference: [3] <author> BSD, </author> <title> UNIX User's Manual, </title> <institution> 4.2 BSD, University of California, Berkeley (1982). </institution>
Reference-contexts: Performance The checkpoint/restart facility was implemented and tested on Hewlett-Packard HP9000 (Series 320) and SUN-2 workstations connected via a 10Mbit Ethernet in Columbia University's Computer Science Department in the Fall of 1986. This in turn has been used to construct a process migration mechanism, by using the rcp <ref> [3] </ref> command to perform the remote file transfer and the rsh [3] command to execute the newly transferred image. This process migration mechanism has been used to move running processes between 20 of these workstations. <p> This in turn has been used to construct a process migration mechanism, by using the rcp <ref> [3] </ref> command to perform the remote file transfer and the rsh [3] command to execute the newly transferred image. This process migration mechanism has been used to move running processes between 20 of these workstations. By distinguishing between the state saving (checkpointing) activity and the state transfer activity, we were able to measure and refine the performance of each activity independently.
Reference: [4] <author> BSD, </author> <title> Unix Programmer's Manual (4.2BSD), </title> <institution> University of California, Berkeley (1983). </institution>
Reference-contexts: For these reasons, we wrote our own simple remote execution server. Thus, on all the machines that we wanted to be able to move to, we run a small program that would accept a UDP datagram <ref> [4] </ref> containing some rudimentary authentication information and the name of an executable program (usually the program just saved in the rfork spool directory). In addition to that, we also wrote a notification system, again using UDP datagrams.
Reference: [5] <author> David A. Butterfield and Gerald J. Popek, </author> <title> ``Network Tasking in the LOCUS Distributed UNIX System,'' </title> <booktitle> in USENIX Summer 1984 Conference Proceedings (June 1984), </booktitle> <pages> pp. 62-71. </pages>
Reference-contexts: In most systems, the fact that some parts of the system interact with processes in a location-dependent way has meant that the system is not free to move a process at any point in time. Several systems provide facilities to migrate processes. Among these are the LOCUS <ref> [5, 16] </ref> system, the DEMOS/MP [6] system, Stanford's V [14] system, the Amoeba [12, 13] system, and the MOS [1, 2] system.
Reference: [6] <author> Michael L. Powell and Barton P. Miller, </author> <title> ``Process Migration in DEMOS/MP,'' </title> <booktitle> in Proceedings of the Ninth ACM Symposium on Operating Systems Principles (1983). </booktitle>
Reference-contexts: A typical environment where process migration is interesting is autonomous computers connected by a network. 2.1. Work in Process Migration The introduction to the paper <ref> [6] </ref> describing DEMOS/MP's process migration scheme makes the following observation: Process migration has been proposed as a feature in a number of systems, but successful implementations are rare. <p> Several systems provide facilities to migrate processes. Among these are the LOCUS [5, 16] system, the DEMOS/MP <ref> [6] </ref> system, Stanford's V [14] system, the Amoeba [12, 13] system, and the MOS [1, 2] system. DEMOS/MP, V, and Amoeba are message-based; the design is that of a small kernel for passing messages between processes, coupled with server processes which provide access to system resources.
Reference: [7] <author> Ram Rao and Smokey Wallace, </author> <title> ``The X Toolkit: The Standard Toolkit for X Version 11,'' </title> <booktitle> in Proceedings, Summer 1987 USENIX Conference, </booktitle> <address> Phoenix, AZ (June, </address> <year> 1987), </year> <pages> pp. 117-130. </pages>
Reference-contexts: When it's exiting, it may reset the terminal modes; however if it has migrated to a system which is of a different type, it may cause an error even if we have reopened the file. Use of X-windows <ref> [7] </ref> , NeWS, or similar network window systems can eliminate many of the terminal interface problems, but they illustrate the problems with detailed examination of process state.
Reference: [8] <author> D.M. Ritchie and K.L. Thompson, </author> <title> ``The UNIX Operating System,'' </title> <journal> Communications of the ACM 17, </journal> <pages> pp. </pages> <month> 365-375 (July </month> <year> 1974). </year>
Reference-contexts: The reason for this is the message-oriented system's designs; a small kernel of message-passing routines contains little state not in the process's context, and thus there is little at a given location that a process can be dependent upon. LOCUS, being based on UNIX <ref> [8, 10] </ref> has a somewhat trickier job, as the UNIX process model [15] requires a great deal of context to be maintained.
Reference: [9] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and R. Lyon, </author> <title> ``The Design and Implementation of the Sun Network File System,'' </title> <booktitle> in USENIX Proceedings (June 1985), </booktitle> <pages> pp. 119-130. </pages>
Reference-contexts: One way we can do this by using a remote copy command (e.g., rcp ). Alternatively, we can take advantage of the homogeneous namespace provided by a distributed file system, such as the Sun NFS <ref> [9] </ref> and just checkpoint the process in a globally accessible file. This has the advantage that the image of the executable file goes accross the ethernet at most twice (once when dumping and maybe once more when loading it, if the execution is restarted on a diskless workstation).
Reference: [10] <author> Jonathan M. Smith, </author> <title> ``Approaches to Distributed UNIX Systems,'' </title> <type> Technical Report CUCS-223-86, </type> <institution> Columbia University Computer Science Department (1986). </institution>
Reference-contexts: The reason for this is the message-oriented system's designs; a small kernel of message-passing routines contains little state not in the process's context, and thus there is little at a given location that a process can be dependent upon. LOCUS, being based on UNIX <ref> [8, 10] </ref> has a somewhat trickier job, as the UNIX process model [15] requires a great deal of context to be maintained.
Reference: [11] <author> Jonathan M. Smith and Gerald Q. Maguire,Jr., </author> <title> ``Process Migration: Effects on Scientific Computation,'' </title> <journal> ACM SIGPLAN Notices 23(3), </journal> <pages> pp. </pages> <month> 102-106 (March </month> <year> 1988). </year>
Reference-contexts: We note that the information in the address space is dependent on the architecture of the machine and the operating system; the program only runs on this kind of "UNIX virtual machine", and hence the proposed migration is referred to as homogeneous, as opposed to heterogeneous <ref> [11] </ref> process migration, where the process's state could be transferred between unlike machines. We note that heterogeneous migration can be accomplished by inserting an intervening "virtual machine", e.g., an interpreter.
Reference: [12] <author> Andrew S. Tanenbaum and Robbert Van Renesse, </author> <title> ``Distributed Operating Systems,'' </title> <journal> ACM Computing Surveys 17(4,), </journal> <pages> pp. </pages> <month> 419-470 (December </month> <year> 1985). </year>
Reference-contexts: Several systems provide facilities to migrate processes. Among these are the LOCUS [5, 16] system, the DEMOS/MP [6] system, Stanford's V [14] system, the Amoeba <ref> [12, 13] </ref> system, and the MOS [1, 2] system. DEMOS/MP, V, and Amoeba are message-based; the design is that of a small kernel for passing messages between processes, coupled with server processes which provide access to system resources. These systems have relatively little trouble implementing transparent process migration.
Reference: [13] <author> A.S. Tanenbaum, S.J. Mullender, and R. Van Renesse, </author> <title> ``Using sparse capabilities in a distributed operating system,'' </title> <booktitle> in Proceedings of the 6th International Conference on Distributed Computer Systems (IEEE) (1986), </booktitle> <pages> pp. 558-563. </pages>
Reference-contexts: Several systems provide facilities to migrate processes. Among these are the LOCUS [5, 16] system, the DEMOS/MP [6] system, Stanford's V [14] system, the Amoeba <ref> [12, 13] </ref> system, and the MOS [1, 2] system. DEMOS/MP, V, and Amoeba are message-based; the design is that of a small kernel for passing messages between processes, coupled with server processes which provide access to system resources. These systems have relatively little trouble implementing transparent process migration.
Reference: [14] <author> Marvin M. Theimer, Keith A. Lantz, and David R. Cheriton, </author> <title> ``Preemptable Remote Execution Facilities for the V-System,'' </title> <booktitle> in Proceedings, 10th ACM Symposium on Operating Systems Principles (1985), </booktitle> <pages> pp. 2-12. </pages>
Reference-contexts: Several systems provide facilities to migrate processes. Among these are the LOCUS [5, 16] system, the DEMOS/MP [6] system, Stanford's V <ref> [14] </ref> system, the Amoeba [12, 13] system, and the MOS [1, 2] system. DEMOS/MP, V, and Amoeba are message-based; the design is that of a small kernel for passing messages between processes, coupled with server processes which provide access to system resources.
Reference: [15] <author> K.L. Thompson, </author> <title> ``UNIX Implementation,'' </title> <journal> The Bell System Technical Journal 57(6, </journal> <volume> Part 2), </volume> <pages> pp. </pages> <year> 1931-1946 </year> <month> (July-August </month> <year> 1978). </year>
Reference-contexts: LOCUS, being based on UNIX [8, 10] has a somewhat trickier job, as the UNIX process model <ref> [15] </ref> requires a great deal of context to be maintained.
Reference: [16] <author> Bruce J. Walker, Gerald J. Popek, Robert English, Charles Kline, and Greg Thiel, </author> <title> ``The LOCUS Distributed Operating System,'' </title> <booktitle> ACM SIGOPS Operating Systems Review (Ninth ACM Symposium on Operating Systems Principles) 17, </booktitle> <pages> pp. </pages> <month> 49-70 (October </month> <year> 1983). </year>
Reference-contexts: In most systems, the fact that some parts of the system interact with processes in a location-dependent way has meant that the system is not free to move a process at any point in time. Several systems provide facilities to migrate processes. Among these are the LOCUS <ref> [5, 16] </ref> system, the DEMOS/MP [6] system, Stanford's V [14] system, the Amoeba [12, 13] system, and the MOS [1, 2] system.
Reference: [17] <author> P.J. Weinberger, </author> <title> ``The Version 8 Network File System,'' </title> <booktitle> in USENIX Proceedings (June 1984), </booktitle> <address> p. </address> <month> 86. </month>
Reference-contexts: Of course, this may require special handling to deal with devices such as terminals; disk files seem relatively simple, especially with a network file system <ref> [17] </ref>. Other examples are: 1) The process group in which a given process is contained.
References-found: 17

