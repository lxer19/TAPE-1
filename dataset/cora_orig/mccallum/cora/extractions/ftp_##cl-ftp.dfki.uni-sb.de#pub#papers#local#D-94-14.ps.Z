URL: ftp://cl-ftp.dfki.uni-sb.de/pub/papers/local/D-94-14.ps.Z
Refering-URL: http://cl-www.dfki.uni-sb.de/cl/papers/cl-abstracts.html
Root-URL: 
Phone: Tel.: 49 (631) 205-3211 Stuhlsatzenhausweg 3  Tel.: 49 (681) 302-5252  
Title: Document D-94-14 A Type Description Language for HPSG Part 2: User Guide  
Author: f ur K unstliche Hans-Ulrich Krieger, Ulrich Schafer f ur K unstliche Intelligenz 
Address: Postfach 20 80 67608 Kaiserslautern, FRG  66123 Saarbrucken, FRG  
Note: Deutsches Forschungszentrum  
Date: December 1994  
Affiliation: Deutsches Forschungszentrum  Intelligenz GmbH  GmbH  
Abstract-found: 0
Intro-found: 1
Reference: [ At-Kaci & Nasr 86 ] <author> Hassan At-Kaci and Roger Nasr. Residuation: </author> <title> A Paradigm for Integrating Logic and Functional Programming. </title> <type> Technical Report AI-359-86, </type> <institution> MCC, Austin, TX, </institution> <year> 1986. </year>
Reference-contexts: The usual representation for functional constraints is: 2 6 add-prefix WORD 1 PREFIX 2 WHOLE 3 3 7 4.6 Type Environment and Type Definitions 23 Functional Constraints: 3 = String-Append ( 2 ; 1 ) The evaluation of functional constraints will be postponed until all parameters are instantiated (residuation; cf. <ref> [ At-Kaci & Nasr 86; Smolka 91 ] </ref> for theoretical backgrounds). The evaluation can be enforced by using the function EVAL-CONSTRAINTS of the UNIFY package.
Reference: [ At-Kaci 86 ] <author> Hassan At-Kaci. </author> <title> An Algebraic Semantics Approach to the Effective Resolution of Type Equations. </title> <journal> Theoretical Computer Science, </journal> <volume> 45 </volume> <pages> 293-351, </pages> <year> 1986. </year>
Reference-contexts: An example of a recursion that stops like this is the recursive version of the list type (see below). A counter example, i.e., a type that will not stop without a finite input (using the default resolved predicate always-false and no delay pattern), is At-Kaci's append type <ref> [ At-Kaci 86 ] </ref> . That's life.
Reference: [ Backofen & Weyers 95 ] <author> Rolf Backofen and Christoph Weyers. </author> <title> UDiNeA Feature Constraint Solver with Distributed Disjunction and Classical Negation. </title> <type> Technical report, </type> <institution> Deutsches Forschungszentrum fur Kunstliche Intelligenz, Saarbrucken, Germany, </institution> <year> 1995. </year> <month> Forthcoming. </month>
Reference-contexts: Section 4.6.4). Disjunction elements can be atoms, conjunctive feature descriptions, simple disjunctions, distributed disjunctions, lists, template calls or negated values. In simple disjunctions, the alternatives must not contain coreferences to values outside the alternative itself (see <ref> [ Backofen & Weyers 95 ] </ref> for the reasons). Distributed disjunctions provide a restricted way to use coreferences to outside disjunction alternatives (Section 4.6.10). An example of disjunctions in a type definition: person-1-or-2 := [ SYN person-number-type & [ PERSON 1 ] | person-number-type & [ PERSON 2 ] ]. <p> The evaluation can be enforced by using the function EVAL-CONSTRAINTS of the UNIFY package. Further details are described in <ref> [ Backofen & Weyers 95 ] </ref> . 4.6.16 Template Calls Templates are pure textual macros which allow specification of (parts of) type or instance definitions by means of some shorthand. The definition of templates will be explained in Section 4.8.
Reference: [ Carpenter 93 ] <author> Bob Carpenter. </author> <title> The Logic of Typed Feature Structures. </title> <booktitle> Tracts in Theoretical Computer Science. </booktitle> <address> Cambridge: </address> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: The function is called by the two functions described below if necessary. The function print-approp [:domain domain]. prints the current appropriateness table of a domain. This table is comparable to the Approp function in <ref> [ Carpenter 93, Chapter 6 ] </ref> . <p> Feature ((Intro-Type . Value-Type)*) ------------------------------------- QUE ((NON-LOCAL-TYPE . *TOP*)) SLADJ ((NON-LOCAL-TYPE . *TOP*)) SLASH ((NON-LOCAL-TYPE . *TOP*)) HOUR ((TIME-VALUE . *TOP*)) NON-LOC ((NON-LOCAL . NON-LOCAL-TYPE)) SUBJ-SC ((SUBJ-SUBCAT-TYPE . *TOP*)) LIST ((*DIFF-LIST* . *TOP*)) SEM-MOOD ((QUESTION-SEMANTICS . SYMBOL)) SUBCAT ((SUBCAT-TYPE . *TOP*)) FILLER-DTR ((FILLER-DTR-TYPE . MAX-SIGN-TYPE)) 6 <ref> [ Carpenter 93, Chapter 6 ] </ref> calls such an appropriateness condition unacceptable and stipulates that there exists exactly one most general type which introduces a feature. TDL is not so restrictive, but the warnings can be employed to write grammars that do not make use of such `unacceptable' appropriateness conditions. <p> Its purpose is to select the index of a T DL instance. Example: Modifying the Output Style The following settings can be used for an output style as it is used in <ref> [ Carpenter 93 ] </ref> . &lt;MY-DOMAIN:TYPE&gt; set-switch *ATOM-COMMAND* """newcommand-""atom-[1] -""mbox-[-""bf #1-]--". &lt;MY-DOMAIN:TYPE&gt; set-switch *ATTRIB-COMMAND* """newcommand-""attrib-[1] -""mbox-""sc""lowercase-#1-:"" --". &lt;MY-DOMAIN:TYPE&gt; set-switch *TYPE-COMMAND* """newcommand-""type-[1] -""mbox-""bf #1""/--".
Reference: [ Dorre & Dorna 93 ] <author> Jochen Dorre and Michael Dorna. </author> <title> CUFA Formalism for Linguistic Knowledge Representation. </title> <editor> In: Jochen Dorre (ed.), </editor> <booktitle> Computational Aspects of Constraint-Based Linguistic Description I, </booktitle> <pages> pp. 1-22. </pages> <institution> ILLC/Department of Philosophy, University of Amsterdam, </institution> <year> 1993. </year> <note> DYANA-2 Deliverable R1.2.A. </note>
Reference-contexts: TDL is not so restrictive, but the warnings can be employed to write grammars that do not make use of such `unacceptable' appropriateness conditions. Our treatment is comparable to polyfeatures in CUF <ref> [ Dorre & Dorna 93 ] </ref> . 38 5 USEFUL FUNCTIONS, SWITCHES, AND VARIABLES PFORM ((PFORM-TYPE . *TOP*)) FEM ((GENDER-VAL . *TOP*)) MAS ((GENDER-VAL . *TOP*)) RES ((DL-APPEND . *TOP*)) ARG2 ((DL-APPEND . *TOP*)) ARG1 ((DL-APPEND . *TOP*)) ... 5.6 Deleting Types and Instance Definitions * function delete-type [ type [:domain
Reference: [ Eisele & Dorre 90 ] <author> Andreas Eisele and Jochen Dorre. </author> <title> Disjunctive Unification. </title> <type> IWBS Report 124, </type> <institution> IWBS-IBM Germany, Stuttgart, </institution> <year> 1990. </year>
Reference-contexts: Disjoint type partitions can be declared in the declare environment (Section 4.5). 4.6.10 Distributed Disjunctions A very useful feature of T DL, implemented in the underlying unification system UDiNe, is distributed (or named) disjunction <ref> [ Eisele & Dorre 90 ] </ref> . This kind of disjunction has a specification restricted to a local domain, although it may affect more than one attribute. The main advantage of distributed disjunction is a more succinct representation.
Reference: [ Fra 92 ] <author> Allegro CL User Guide. </author> <type> Technical report, </type> <institution> Berkeley, </institution> <address> CA, </address> <month> March </month> <year> 1992. </year> <note> 2 volumes. </note>
Reference-contexts: to function goto-begin-of-tdl-expression moves the cursor to the beginning of T DL definition or statement T DL mode can also be switched on `by hand' with M-x tdl-mode. 60 9 TOP LEVEL ABBREVIATIONS (ALLEGRO COMMON LISP ONLY) 9 Top Level Abbreviations (ALLEGRO COMMON LISP Only) In the ALLEGRO COMMON LISP <ref> [ Fra 92 ] </ref> version of T DL, some often used commands are also available as top level abbreviations. <p> Example: &lt;MY-DOMAIN:TYPE&gt; pgp 'agr-en-type :label-hide-list '(GOV OBL). but MY-DOMAIN (49): :PGP agr-en-type :label-hide-list (GOV OBL) :tdl, :composer and :fegramed don't take any parameter. In addition to these T DL specific commands, the user may define its own abbreviations. Details are described in the ALLEGRO COMMON LISP manual <ref> [ Fra 92 ] </ref> . 61 10 Sample Session ;;; -*- Mode: TDL -*- ;;; --------------------------------------------------------------- ;;; Parametrized Type Expansion in TDL.
Reference: [ Goossens et al. 94 ] <author> Michel Goossens, Frank Mittelbach, and Alexander Samarin. </author> <title> The L A T E X Companion. </title> <address> Reading, MA: </address> <publisher> Addison Wesley, </publisher> <year> 1994. </year>
Reference-contexts: An example screen dump of a feature structure in FEGRAMED is shown in Figure 3. 5.18.3 T DL2L A T E X T DL2L A T E X is a tool which generates L A T E X compatible high-quality output of T DL feature structure types <ref> [ Lamport 86; Goossens et al. 94 ] </ref> . T DL Interface Functions to T DL2L A T E X * function llp [type flatex-optiong fl ]. llp starts T DL2L A T E X with the local prototype (skeleton) of the feature structure with name type. <p> Default value is """documentstyle-article-". It could be replaced by a document style with additional options such as "a4", "times", etc., or, for new L A T E X <ref> [ Goossens et al. 94 ] </ref> , by """documentclass-article ""usepackage-times-" * :mathmode string default value: value of *MATHMODE* = "displaymath" This parameter sets the L A T E X display mode for feature structures.
Reference: [ Jameson et al. 94 ] <author> Anthony Jameson, Bernhard Kipper, Alassane Ndiaye, Ralph Schafer, Joep Simons, Thomas Weis, and Detlev Zimmermann. </author> <title> Cooperating to be Noncooperative: The Dialog System PRACMA. </title> <type> Technical report, </type> <institution> Universitat des Saarlandes, </institution> <type> SFB 314, KI - Wissensbasierte Systeme, </type> <institution> Saarbrucken, Germany, </institution> <year> 1994. </year>
Reference-contexts: The T DL system is integrated into various natural language systems such as DISCO [ Uszkoreit et al. 94 ] , and PRACMA <ref> [ Jameson et al. 94 ] </ref> . Corrections and other information can be ftp'd from ftp://cl-ftp.dfki.uni-sb.de:/pub/tdl.
Reference: [ Kantrowitz 91 ] <author> Mark Kantrowitz. </author> <title> Portable Utilities for Common Lisp. </title> <type> Technical Report CMU-CS-91-143, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <year> 1991. </year>
Reference-contexts: Alternatively, (load-system "tdl-grapher") can be used to start system tdl and the type grapher. The portable system definition facility DEFSYSTEM is described in <ref> [ Kantrowitz 91 ] </ref> . 2 Thanks to Stephan Oepen and Bernd Kiefer for checking and improving portability. 3 The availability of this function presupposes that the DISCO loadup environment (file loadup.lisp) has been successfully loaded into the COMMON LISP system. <p> The COMMON LISP function (EXIT) quits the interpreter. If you are in an Emacs environment, C-x C-c kills the Emacs process. It is also possible to define one's own portable system definitions in the <ref> [ Kantrowitz 91 ] </ref> paradigm which could then automatically start T DL and include grammar definitions, etc. 4 Syntax of T DL The T DL syntax provides type definitions, instance definitions (for rules and lexicon entries), templates (parameterized macros), specification of declarative control information, as well as statements (calls to built-in
Reference: [ Kiefer & Fettig 94 ] <author> Bernd Kiefer and Thomas Fettig. </author> <title> FEGRAMEDAn Interactive Graphics Editor for Feature Structures. </title> <type> Technical report, </type> <institution> Deutsches Forschungszentrum fur Kunstliche Intelligenz, Saarbrucken, Germany, </institution> <year> 1994. </year> <month> Forthcoming. </month>
Reference-contexts: Otherwise a pretty print is done. To be read in, feature structures have to be printed with print mode :read-in (see section 7). Otherwise, type information may be incomplete. 5.18.2 FEGRAMED FEGRAMED is a feature structure editor <ref> [ Kiefer & Fettig 94 ] </ref> . It can be started from T DL through the function fegramed. <p> If flag is nil, the file will be generated and FEGRAMED will be called. Further details are described in <ref> [ Kiefer & Fettig 94 ] </ref> .
Reference: [ Krieger & Schafer 93a ] <author> Hans-Ulrich Krieger and Ulrich Schafer. </author> <title> T DL AType Description Language for Unification-Based Grammars. </title> <booktitle> In: Proceedings Neuere Entwicklungen der deklarativen KI-Programmierung, </booktitle> <pages> pp. 67-82, </pages> <address> Saarbrucken, Germany, </address> <month> September </month> <year> 1993. </year> <institution> Deutsches Forschungszen-trum fur Kunstliche Intelligenz. </institution> <note> DFKI Research Report RR-93-35. </note>
Reference-contexts: For motivation, architecture, properties of the type hierarchy, implementational issues and comparison to related systems, refer to <ref> [ Krieger & Schafer 93a ] </ref> , [ Krieger & Schafer 94a ] , [ Krieger & Schafer 94b ] , [ Krieger 95 ] , and [ Schafer 95 ] .
Reference: [ Krieger & Schafer 93b ] <author> Hans-Ulrich Krieger and Ulrich Schafer. </author> <title> T DLExtraLight User's Guide. </title> <type> Technical report, </type> <institution> Deutsches Forschungszentrum fur Kunstliche Intelligenz, Saarbrucken, Germany, </institution> <year> 1993. </year> <note> DFKI Document D-93-09. </note>
Reference-contexts: The T DL Recycler is a tool which translates grammar files from T DLExtraLight <ref> [ Krieger & Schafer 93b ] </ref> into the new T DL syntax. T DL2L A T E X and T DL Grapher are part of the T DL system.
Reference: [ Krieger & Schafer 94a ] <author> Hans-Ulrich Krieger and Ulrich Schafer. </author> <title> TDLA Type Description Language for HPSG. Part 1: Overview. </title> <type> Technical report, </type> <institution> Deutsches Forschungszentrum fur Kunstliche Intelligenz, Saarbrucken, Germany, </institution> <year> 1994. </year> <note> DFKI Research Report RR-94-37. </note>
Reference-contexts: For motivation, architecture, properties of the type hierarchy, implementational issues and comparison to related systems, refer to [ Krieger & Schafer 93a ] , <ref> [ Krieger & Schafer 94a ] </ref> , [ Krieger & Schafer 94b ] , [ Krieger 95 ] , and [ Schafer 95 ] . <p> This declaration is useful for avm types in an open world (i.e., if *AND-OPEN-WORLD-REASONING-P* has value t). * exhaustive partitions: supertype = type f | type g fl . declares an exhaustive partition (cf. <ref> [ Krieger & Schafer 94a ] </ref> ). * disjoint exhaustive partitions: supertype = type f type g fl . declares an exhaustive disjoint partition (cf. [ Krieger & Schafer 94a ] ). All other relations between types (conjunctions, disjunctions) must be defined in the :type environment. <p> open world (i.e., if *AND-OPEN-WORLD-REASONING-P* has value t). * exhaustive partitions: supertype = type f | type g fl . declares an exhaustive partition (cf. <ref> [ Krieger & Schafer 94a ] </ref> ). * disjoint exhaustive partitions: supertype = type f type g fl . declares an exhaustive disjoint partition (cf. [ Krieger & Schafer 94a ] ). All other relations between types (conjunctions, disjunctions) must be defined in the :type environment. The type hierarchy for avm types will be inferred from the avm type definitions. <p> Switches are set to t for ON or nil for OFF. * Global variable *AND-OPEN-WORLD-REASONING-P* default value: t possible values: t or nil This variable controls whether avm types live in an open or in closed world. Cf. <ref> [ Krieger & Schafer 94a ] </ref> . * Global variable *SIGNAL-BOTTOM-P* default value: t possible values: t or nil If t, an error is signaled if the conjunction of two types is bottom. * Global variable *IGNORE-BOTTOM-P* default value: nil possible values: t or nil If t, typed unification skips over
Reference: [ Krieger & Schafer 94b ] <author> Hans-Ulrich Krieger and Ulrich Schafer. </author> <title> TDLA Type Description Language for Constraint-Based Grammars. </title> <booktitle> In: Proceedings of the 15 th International Conference on Computational Linguistics (COLING), </booktitle> <pages> pp. 893-899, </pages> <address> Kyoto, Japan, </address> <year> 1994. </year>
Reference-contexts: For motivation, architecture, properties of the type hierarchy, implementational issues and comparison to related systems, refer to [ Krieger & Schafer 93a ] , [ Krieger & Schafer 94a ] , <ref> [ Krieger & Schafer 94b ] </ref> , [ Krieger 95 ] , and [ Schafer 95 ] . The T DL system is integrated into various natural language systems such as DISCO [ Uszkoreit et al. 94 ] , and PRACMA [ Jameson et al. 94 ] .
Reference: [ Krieger 93 ] <author> Hans-Ulrich Krieger. </author> <title> Single Link OverwritingA Conservative Non-Monotonic Extension of Unification-Based Inheritance Networks. </title> <type> Technical report, </type> <institution> Deutsches Forschungszentrum fur Kunstliche Intelligenz, Saarbrucken, Germany, </institution> <year> 1993. </year> <note> Draft version. 72 REFERENCES </note>
Reference-contexts: A special extension of typed unification will handle nonmonotonic unification in a future version of T DL <ref> [ Krieger 93 ] </ref> . Currently, one has to be careful when using this feature. A suitable application would be lexical types that normally will not be unified with a nonmonotonically defined lexicon entry.
Reference: [ Krieger 95 ] <author> Hans-Ulrich Krieger. </author> <title> T DLA Type Description Language for Constraint-Based Grammars. Foundations, Implementation, and Applications. </title> <type> PhD thesis, </type> <institution> Universitat des Saarlandes, Department of Computer Science, Saarbrucken, Germany, </institution> <year> 1995. </year> <month> Forthcoming. </month>
Reference-contexts: For motivation, architecture, properties of the type hierarchy, implementational issues and comparison to related systems, refer to [ Krieger & Schafer 93a ] , [ Krieger & Schafer 94a ] , [ Krieger & Schafer 94b ] , <ref> [ Krieger 95 ] </ref> , and [ Schafer 95 ] . The T DL system is integrated into various natural language systems such as DISCO [ Uszkoreit et al. 94 ] , and PRACMA [ Jameson et al. 94 ] . Corrections and other information can be ftp'd from ftp://cl-ftp.dfki.uni-sb.de:/pub/tdl.
Reference: [ Lamport 86 ] <author> Leslie Lamport. </author> <title> L A T E X User's Guide & Reference Manual. A document preparation system. </title> <address> Reading, Massachusetts: </address> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: An example screen dump of a feature structure in FEGRAMED is shown in Figure 3. 5.18.3 T DL2L A T E X T DL2L A T E X is a tool which generates L A T E X compatible high-quality output of T DL feature structure types <ref> [ Lamport 86; Goossens et al. 94 ] </ref> . T DL Interface Functions to T DL2L A T E X * function llp [type flatex-optiong fl ]. llp starts T DL2L A T E X with the local prototype (skeleton) of the feature structure with name type.
Reference: [ McKay et al. 92 ] <author> Scott McKay, William York, John Aspinall, Dennis Doughty, Charles Hornig, Richard Lamson, David Linden, David Moon, and Ramana Rao. </author> <title> Common Lisp Interface Manager, </title> <month> May </month> <year> 1992. </year>
Reference-contexts: The T DL grapher has been implemented first in CLIM 1.2 and is now ported to CLIM 2.0 <ref> [ McKay et al. 92 ] </ref> . Start: either type (load-system "tdl-grapher") instead of (load-system "tdl") at the beginning or with the function grapher. from the T DL reader. An example screen dump of a T DL grapher session is shown in Figure 5.
Reference: [ Pollard & Sag 87 ] <author> Carl Pollard and Ivan Sag. </author> <title> Information-Based Syntax and Semantics. Vol. I: Fundamentals. </title> <booktitle> CSLI Lecture Notes, Number 13. Stanford: Center for the Study of Language and Information, </booktitle> <year> 1987. </year>
Reference-contexts: This documentation serves as a user guide to T DL. It is intended as a guide for grammar writers rather than as a comprehensive internal documentation. Some familiarity with grammar formalisms theories such as Head-Driven Phrase Structure Grammar <ref> [ Pollard & Sag 87; Pollard & Sag 94 ] </ref> is assumed.
Reference: [ Pollard & Sag 94 ] <author> Carl Pollard and Ivan A. Sag. </author> <title> Head-Driven Phrase Structure Grammar. </title> <booktitle> Studies in Contemporary Linguistics. </booktitle> <address> Chicago: </address> <publisher> University of Chicago Press, </publisher> <year> 1994. </year>
Reference-contexts: This documentation serves as a user guide to T DL. It is intended as a guide for grammar writers rather than as a comprehensive internal documentation. Some familiarity with grammar formalisms theories such as Head-Driven Phrase Structure Grammar <ref> [ Pollard & Sag 87; Pollard & Sag 94 ] </ref> is assumed.
Reference: [ Rokicki 93 ] <author> Tomas Rokicki. DVIPS: </author> <title> A T E X driver, 1993. Documentation included in the DVIPS distribution, ftpable from most T E X sites. </title>
Reference-contexts: An example for command is the following shell script with name tdl2ps which starts L A T E X with the output file of T DL2L A T E X and generates a PostScript TM file using <ref> [ Rokicki 93 ] </ref> 's DVIPS. #!/bin/sh #tdl2ps generates PostScript file latex $1 dvips $1 -o $1.ps The following script tdl2epsf generates an encapsulated PostScript TM file (EPSF). <p> When generated with a PostScript TM font (such as option times in the document header), the EPSF file can be used to scale a feature structure in order to fit into an arbitrary box (e.g., in T E X documents using "epsfbox, see <ref> [ Rokicki 93 ] </ref> ). To achieve this, the output file of T DL2L A T E X must consist of exactly one page. Large feature structure may lead to 2 or 3 pages of output.
Reference: [ Schafer 95 ] <author> Ulrich Schafer. </author> <title> Parametrizable Type Expansion for TDL. </title> <type> Master's thesis, </type> <institution> Universitat des Saarlandes, Department of Computer Science, Saarbrucken, Germany, </institution> <year> 1995. </year> <month> Forthcoming. </month>
Reference-contexts: For motivation, architecture, properties of the type hierarchy, implementational issues and comparison to related systems, refer to [ Krieger & Schafer 93a ] , [ Krieger & Schafer 94a ] , [ Krieger & Schafer 94b ] , [ Krieger 95 ] , and <ref> [ Schafer 95 ] </ref> . The T DL system is integrated into various natural language systems such as DISCO [ Uszkoreit et al. 94 ] , and PRACMA [ Jameson et al. 94 ] . Corrections and other information can be ftp'd from ftp://cl-ftp.dfki.uni-sb.de:/pub/tdl. <p> For further details, see <ref> [ Schafer 95 ] </ref> . 5.5 Checking Welltypedness/Appropriateness 37 5.5 Checking Welltypedness/Appropriateness T DL supports optional welltypedness checks at run time as well as at definition time. The appropriateness specification for a feature is inferred by the type definition of the most general type that introduces this feature.
Reference: [ Smolka 88 ] <author> Gert Smolka. </author> <title> A Feature Logic with Subsorts. </title> <type> LILOG Report 33, </type> <institution> WT LILOG-IBM Germany, Stuttgart, </institution> <month> Mai </month> <year> 1988. </year>
Reference-contexts: Example: not-mas-type := [ GENDER ~'mas ]. The resulting feature structure is not-mas-type GENDER : mas Negation of types will be pushed down to atoms according the schema of <ref> [ Smolka 88; Smolka 89 ] </ref> .
Reference: [ Smolka 89 ] <author> Gert Smolka. </author> <title> Feature Constraint Logic for Unification Grammars. </title> <type> IWBS Report 93, </type> <institution> IWBS-IBM Germany, Stuttgart, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: Example: not-mas-type := [ GENDER ~'mas ]. The resulting feature structure is not-mas-type GENDER : mas Negation of types will be pushed down to atoms according the schema of <ref> [ Smolka 88; Smolka 89 ] </ref> . <p> :index 1. fgp 'd :index 1. wait. ;;; --------------------------------------------------------------- 62 10 SAMPLE SESSION ;;; Interactively ask for disjunct order ;;; --------------------------------------------------------------- inter := [disj a1 | b2 | c, disj2 b2 | d | 42]. defcontrol inter ((:ask-disj-preference t)). expand-type 'inter. fgp 'inter. wait. ;;; --------------------------------------------------------------- ;;; Negation `a la <ref> [Smolka 89] </ref> ;;; --------------------------------------------------------------- nx := [n ~xn]. expand-type 'nx. fgp 'nx. wait. ;;; --------------------------------------------------------------- ;;; Nonmonotonicity (single link overwriting) ;;; --------------------------------------------------------------- a := [ person_x:INTEGER, person_y:INTEGER ]. b := a & [ person_x 1 | 2 ]. px3 != b & [ person_x 3 ]. expand-type 'px3. fgp 'px3. wait.
Reference: [ Smolka 91 ] <author> Gert Smolka. </author> <title> Residuation and Guarded Rules for Constraint-Logic Programming. </title> <note> Research Report RR-91-13, DFKI, Saarbrucken, </note> <year> 1991. </year>
Reference-contexts: The usual representation for functional constraints is: 2 6 add-prefix WORD 1 PREFIX 2 WHOLE 3 3 7 4.6 Type Environment and Type Definitions 23 Functional Constraints: 3 = String-Append ( 2 ; 1 ) The evaluation of functional constraints will be postponed until all parameters are instantiated (residuation; cf. <ref> [ At-Kaci & Nasr 86; Smolka 91 ] </ref> for theoretical backgrounds). The evaluation can be enforced by using the function EVAL-CONSTRAINTS of the UNIFY package.
Reference: [ Steele 90 ] <author> Guy L. Steele. </author> <title> Common Lisp: </title> <booktitle> The Language. </booktitle> <address> Bedford, MA: </address> <publisher> Digital Press, </publisher> <address> 2nd edition, </address> <year> 1990. </year>
Reference-contexts: T DL2L A T E X and T DL Grapher are part of the T DL system. The system is implemented in portable COMMON LISP <ref> [ Steele 90 ] </ref> and has been tested with Franz Allegro Common Lisp, Macintosh Common Lisp, Lucid Common Lisp, and CLISP 2 . 3 Starting T DL To start T DL, 1.
Reference: [ Uszkoreit et al. 94 ] <author> Hans Uszkoreit, Rolf Backofen, Stephan Busemann, Abdel Kader Diagne, Eliza-beth A. Hinkelman, Walter Kasper, Bernd Kiefer, Hans-Ulrich Krieger, Klaus Netter, Gunter Neumann, Stephan Oepen, and Stephen P. Spackman. </author> <title> DISCO-An HPSG-based NLP System and its Application for Appointment Scheduling. </title> <booktitle> In: Proceedings of the 15 th International Conference on Computational Linguistics (COLING), </booktitle> <address> Kyoto, Japan, </address> <year> 1994. </year> <note> also as DFKI Research Report RR-94-38. </note>
Reference-contexts: The T DL system is integrated into various natural language systems such as DISCO <ref> [ Uszkoreit et al. 94 ] </ref> , and PRACMA [ Jameson et al. 94 ] . Corrections and other information can be ftp'd from ftp://cl-ftp.dfki.uni-sb.de:/pub/tdl.
Reference: [ Uszkoreit 91 ] <author> Hans Uszkoreit. </author> <title> Adding Control Information to Declarative Grammars. </title> <booktitle> In: Proceedings of the 29 th Annual Meeting of the Association for Computational Linguistics (ACL), </booktitle> <pages> pp. 237-245, </pages> <address> Berkeley, CA, </address> <year> 1991. </year>
Reference-contexts: Alternative 2: (:Type B :Expanded NIL) [] Which alternative in G under path X should be expanded next (1, 2, or 0 to leave them unexpanded, or :all to expand all alternatives in this order, or :quiet to continue without asking again in G) ? _ * :use-conj-heuristics and :use-disj-heuristics <ref> [ Uszkoreit 91 ] </ref> suggested that exploitation of numerical preference information for features and disjunctions would speed up unification. These slots control the use of this information in conjunctive and disjunctive structures respectively. * :resolved-predicate This slot specifies a user definable predicate that may be used to stop recursion.
Reference: [ van Zandt 93 ] <author> Timothy van Zandt. </author> <title> Documentation for poster.tex/poster.sty, Posters and banners with generic T E X, </title> <month> May </month> <year> 1993. </year> <title> Documentation included in the poster distribution, ftpable from most T E X sites. </title>
Reference-contexts: If flag is nil, no title will be printed. * :domain domain default value: value of variable *DOMAIN* possible values: name of a valid domain, only in T DL. * :poster flag default value: value of variable *POSTER* = nil If t, <ref> [ van Zandt 93 ] </ref> 's poster macros are used to print large feature structures on as many sheets as are needed. <p> shell process will be started. * Global variable *LATEX-HEADER-P* default value: t possible values: t or nil if nil, no L A T E X header (documentstyle: : :, etc.) will be written to output file. * Global variable *POSTER* default value: nil possible values: t or nil If t, <ref> [ van Zandt 93 ] </ref> 's poster macros are used to print feature structures on as many sheets as are needed.
References-found: 30

