URL: http://www.cs.utexas.edu/users/dagh/Papers/samr.ps
Refering-URL: http://www.cs.utexas.edu/users/dagh/papers.html
Root-URL: 
Title: SYSTEMS ENGINEERING FOR HIGH PERFORMANCE COMPUTING SOFTWARE: THE HDDA/DAGH INFRASTRUCTURE FOR IMPLEMENTATION OF PARALLEL STRUCTURED
Author: MANISH PARASHAR AND JAMES C. BROWNE 
Keyword: Key words. Software systems engineering, Structured adaptive mesh-refinement, High performance software development, Distributed dynamic data-structures.  
Abstract: This paper defines, describes and illustrates a systems engineering process for development of software systems implementing high performance computing applications. The example which drives the creation of this process is development of a flexible and extendible program development infrastructure for parallel structured adaptive meshes, the HDDA/DAGH package. The fundamental systems engineering principles used (hierarchical abstractions based on separation of concerns) are well-known but are not commonly applied in the context of high performance computing software. Application of these principles will be seen to enable implementation of an infrastructure which combines breadth of applicability and portability with high performance. 1. Overview. This paper describes the systems engineering process 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ian Sommerville, </author> <title> Software Engineering, </title> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference: [2] <author> Roger Pressman, </author> <title> Software Engineering: A Practitioner,s Approach, </title> <address> MacGraw-Hill, NY, NY, </address> <year> 1987. </year>
Reference: [3] <author> E. W. Dijkstra, </author> <title> "The Structure of the THE Operating System", </title> <journal> CACM, </journal> <pages> pp. 341-346, </pages> <month> Nov. </month> <year> 1968. </year>
Reference-contexts: A design model founded on the principles of hierarchical abstraction and separation of concerns. Use of hierarchical abstractions in software system development was formalized by Dijkstra in 1968 <ref> [3] </ref>. But development of effective abstraction hierarchies is not simple. We propose that definition and realization of effective abstraction hierarchies should be based on the principle of separation of concerns [4,5]. Construction of abstraction hierarchies based on separation of concerns is discussed in detail in Section 2.2.
Reference: [4] <author> James C. Browne, </author> <title> "A Language for Specification and Programming of Reconfigurable Parallel Computation Structures", </title> <booktitle> Proceedings of the Internation Conference on Parallel Processing, </booktitle> <address> Bellaire, MI, </address> <month> Aug. </month> <year> 1982. </year> <title> SYSTEMS ENGINEERING FOR HPC SOFTWARE 15 </title>
Reference: [5] <author> Raju Pande and James C. Browne, </author> <title> "A Compositional Approach to Concurrent Object-Oriented Programming", </title> <booktitle> Proceedings of the Internation Conference on Compilers and Languages, </booktitle> <address> Paris, France, </address> <month> May </month> <year> 1994. </year>
Reference: [6] <author> Carter Edwards and James C. Browne, </author> <title> "Scalable Distributed Dynamic Array and its Application to a Parallel hp-Adaptive Finite Element Code", Presentation at Parallel Objec-Oriented Methods and Applications Workshop, </title> <address> Santa Fe, NM, </address> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: Case Study Design and Implementation of the HDDA/DAGH Infrastructure. The foundations for HDDA/DAGH originated in the development of a similar infrastructure for support of hp-adaptive finite element computational methods which was begun in 1991 <ref> [6] </ref>. Thus development of application requirements extends over some seven years. The mapping to design requirements also owes intellectual debts to other projects SYSTEMS ENGINEERING FOR HPC SOFTWARE 7 and contributors as noted in the acknowledgments. 3.1. Translation of Application Requirements to System Design Requirements.
Reference: [7] <author> Marsha J. Berger and Joseph Oliger, </author> <title> "Adaptive Mesh Refinement for Hyperbolic Partial Differential Equations", </title> <journal> Jounal of Computational Physics, </journal> <pages> pp. 484-512, </pages> <year> 1984. </year>
Reference-contexts: Translation of Application Requirements to System Design Requirements. The HDDA/DAGH infrastructure was initially developed to support the computational requirements of the Binary Black Hole (BBH) NSF Grand Challenge project beginning in 1993. The BBH project had already settled on using the Berger-Oliger AMR algorithm <ref> [7] </ref> as its means of coping with the rapid changes in the solution of Einstein's equations in the vicinity of a black hole. Support for several variants of multigrid solution methods was also a requirement. HDDA/DAGH has later been adapted and extended to support several other applications.
Reference: [8] <author> Hans Sagan, </author> <title> Space-Filling Curves, </title> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Hierarchical, Extendible Index Space. The hierarchical, extendible index space component of the HDDA is derived directly from the application domain using space-filling mappings <ref> [8] </ref> which are com-putationally efficient, recursive mappings from N-dimensional space to 1-dimensional space. Figure 3.3 illustrates a 2-dimensional Peano-Hilbert curve. The solution space is first partitioned into segments. The space filling curve then passes through the midpoints of these segments.
Reference: [9] <author> R. Fagin, </author> <title> "Extendible Hashing A Fast Access Mechanism for Dynamic Files", </title> <journal> ACM TODS, </journal> <volume> 4 </volume> <pages> 315-344, </pages> <year> 1979. </year>
Reference-contexts: This mapping produces a unique key set which defines a global address space. Coalescing segments of the linear key space into a single key, blocks of arbitrary granularity can be created. 3.3.3. Storage and Access. Data storage is implemented using extendible hashing techniques <ref> [9] </ref> to provide a dynamically extendible, globally indexed storage (see Figure 3.4). The keys for the Extendible Hash Table are contractions of the unique keys defined as described preceding. Entries into the HDDA correspond to DAGH blocks. Expansion and contraction are local operations involving at most two buckets.
Reference: [10] <author> Scott B. Baden, Scott R. Kohn, Silvia M. Figueria, and Stephen J. Fink, </author> <title> "The LPARX User's Guide v1.0", </title> <type> Technical report, </type> <institution> Department of Computer Science and Engineering, University of California, </institution> <address> San Diego, La Jolla, CA 92093-0114 USA, </address> <month> Apr. </month> <year> 1994. </year>
Reference: [11] <author> S. J. Fink, S. R. Kohn, and S. B. Baden, </author> <title> "Flexible Communication Mechanisms for Dynamic Structured Applications", </title> <booktitle> Proceedings of IRREGULAR '96, </booktitle> <address> Santa Barbara, CA, </address> <month> Aug. </month> <year> 1996. </year>
Reference: [12] <author> Rebecca Parsons, </author> <title> "A++/P++ Array Classes for Architecture Independent Finite Difference Computations", </title> <booktitle> OON-SKI'94 The Object-Oriented Numerics Conference, Sunriver, Oregon, </booktitle> <pages> pp. 408-418, </pages> <month> Apr. </month> <year> 1994. </year>
Reference: [13] <author> Mary Shaw and David Garlan, </author> <title> Software Architecture: Perspectives on an Emerging Discipline, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1996. </year>
Reference-contexts: But for the most part the process of design for these systems has largely gone unrecorded. If HPC is to be an effective discipline we must document good practice so that best practice can be identified. The most closely related body of research is that of "Software Architectures" <ref> [13] </ref>. Our design models are closely related to software architectures. But little attention has been paid to "software architectures" for high performance computing. Smith and Browne [14] and Smith [15] have defined a discipline of performance engineering for information management software systems.
Reference: [14] <author> C. Smith and James C. Browne, </author> <title> "The Structure of the THE Operating System", </title> <booktitle> Proceedings of NCC'82, </booktitle> <publisher> AFIPS Press, </publisher> <address> NY, NY, </address> <pages> pp. 217-224, </pages> <year> 1982. </year>
Reference-contexts: The most closely related body of research is that of "Software Architectures" [13]. Our design models are closely related to software architectures. But little attention has been paid to "software architectures" for high performance computing. Smith and Browne <ref> [14] </ref> and Smith [15] have defined a discipline of performance engineering for information management software systems. There are thousands of books and papers on conventional software engineering. Fundamental concepts such as hierarchical structuring and orderly process are well covered in the standard books ([1,2] among others).

References-found: 14

