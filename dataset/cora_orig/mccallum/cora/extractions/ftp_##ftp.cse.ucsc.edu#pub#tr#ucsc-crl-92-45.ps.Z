URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-92-45.ps.Z
Refering-URL: http://www.cse.ucsc.edu/~golding/
Root-URL: http://www.cse.ucsc.edu
Title: Design choices for weak-consistency group communication  
Author: Richard A. Golding and Darrell D. E. Long 
Keyword: group membership, weak consistency replication, mobile computing systems, bibliographic databases, reliability measurements  
Address: Santa Cruz, CA 95064  
Affiliation: Concurrent Systems Laboratory Computer and Information Sciences University of California, Santa Cruz  
Date: October 12, 1992  
Pubnum: UCSC-TR-92-45  
Abstract: Many wide-area distributed applications can be implemented using distributed group communication, a mechanism for coordinating the activities of related processes running at different sites. We have developed a modular architecture for group communication systems that can be used to build a system tailored to application requirements. We focus on weak consistency mechanisms for group communication, since these allow highly efficient operation on wide-area internetworks. We examine several design choices that can be made in building a weakly-consistent group communication mechanism, and discuss the decisions we made in building two very different wide-area applications. The architecture accommodates both systems well, and allows several application-specific decisions that increase efficiency and flexibility. 
Abstract-found: 1
Intro-found: 1
Reference: [Agrawal91] <author> D. Agrawal and A. Malpani. </author> <title> Efficient dissemination of information in computer networks. </title> <journal> Computer Journal, </journal> <volume> 34(6) </volume> <month> 534-41 (December </month> <year> 1991). </year>
Reference-contexts: This protocol requires Q (n) state for the timestamp vectors, and the clocks at every host must be synchronized to within some *. We have developed a similar protocol, also developed independently by Agrawal and Malpani <ref> [Agrawal91] </ref>, that uses O (n 2 ) size timestamp arrays but allows unsynchronized clocks. We have found that most Internet hosts are synchronized to within a few minutes. The Grapevine distributed database used similar mechanisms [Birrell82, Demers88].
Reference: [Birman87] <author> Kenneth P. Birman and Thomas A. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <month> 47-76 (February </month> <year> 1987). </year>
Reference-contexts: Processes join and leave the group using a separate group membership protocol. Many existing group communication systems, among them Isis <ref> [Birman87, Birman91] </ref>, Psync [Mishra89], Arjuna [Little90], and Lazy Replication [Ladin91] provide strong consistency guarantees, meaning that the system provides a multicast message service that ensures that every process views every message in a strictly controlled order, and that no two processes can differ at any moment by more than a limited
Reference: [Birman90] <author> Kenneth Birman, Andre Schiper, and Pat Stephenson. </author> <title> Fast causal multicast. </title> <note> Technical report TR-1105 (13 April 1990). </note> <institution> Department of Computer Science, Cornell University. </institution>
Reference-contexts: Some of these ensure that every process delivers messages in the same order. An application can use this property to ensure that updates occur in the same order everywhere. Total causal ordering, for example, is provided by the Isis ABCAST protocol <ref> [Birman90] </ref>. Other orderings respect potential causality [Lamport78]. That is, if there is any possibility that the contents of one message were caused by another message, the other message will be delivered first at every process.
Reference: [Birman91] <author> Kenneth P. Birman, Robert Cooper, and Barry Gleeson. </author> <title> Programming with process groups: group and multicast semantics. </title> <note> Technical report TR-91-1185 (29 January 1991). </note> <institution> Department of Computer Science, Cornell University. </institution>
Reference-contexts: Processes join and leave the group using a separate group membership protocol. Many existing group communication systems, among them Isis <ref> [Birman87, Birman91] </ref>, Psync [Mishra89], Arjuna [Little90], and Lazy Replication [Ladin91] provide strong consistency guarantees, meaning that the system provides a multicast message service that ensures that every process views every message in a strictly controlled order, and that no two processes can differ at any moment by more than a limited
Reference: [Birrell82] <author> A. D. Birrell, R. Levin, R. M. Needham, and M. D. Schroeder. Grapevine: </author> <title> an exercise in distributed computing. </title> <journal> Communications of the ACM, </journal> <volume> 25(4) </volume> <month> 260-74 (April </month> <year> 1982). </year>
Reference-contexts: We have developed a similar protocol, also developed independently by Agrawal and Malpani [Agrawal91], that uses O (n 2 ) size timestamp arrays but allows unsynchronized clocks. We have found that most Internet hosts are synchronized to within a few minutes. The Grapevine distributed database used similar mechanisms <ref> [Birrell82, Demers88] </ref>. In that system, replicated data was updated first at one site, then the results were propagated to other sites in the background. Updates were propagated using a combination of best effort multicast, unreliable message exchange, and a form of anti-entropy session. Only anti-entropy provided reliable delivery.
Reference: [Bloch87] <author> Joshua J. Bloch, Dean S. Daniels, and Alfred Z. Spector. </author> <title> A weighted voting algorithm for replicated directories. </title> <journal> Journal of the ACM, </journal> <volume> 34(4) </volume> <month> 859-909 (October </month> <year> 1987). </year>
Reference-contexts: A record of the deletion must be maintained until the deletion has been observed by all processes so that no process can miss the operation and re-introduce the entry to other processes. In Grapevine these records were called death certificates [Demers88], while the Bloch-Daniels-Spector distributed dictionary algorithm <ref> [Bloch87] </ref> places timestamps on the gaps between entries as well as on the entries themselves.
Reference: [Cristian91] <author> Flaviu Cristian. </author> <title> Reaching agreement on processor-group membership in synchronous distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 4(4) </volume> <month> 175-87 </month> <year> (1991). </year>
Reference-contexts: The first mechanism is used in many existing systems, including Isis, Arjuna, most replication protocols, and our systems. The second mechanism has been proposed by Cristian <ref> [Cristian91] </ref>, and works by discovering what processes believe they are members. It generally requires global broadcast, which is infeasible in networks the size of the Internet. We do not consider this mechanism further. Four operations can be performed on the membership view: hosts can join, leave, fail, and recover.
Reference: [Demers88] <author> Alan Demers, Dan Greene, Carl Hauser, Wes Irish, John Larson, Scott Shenker, Howard Sturgis, Dan Swinehart, and Doug Terry. </author> <title> Epidemic algorithms for replicated database maintenance. </title> <journal> Operating Systems Review, </journal> <volume> 22(1) </volume> <month> 8-32 (January </month> <year> 1988). </year> <month> 14 </month>
Reference-contexts: We have developed a similar protocol, also developed independently by Agrawal and Malpani [Agrawal91], that uses O (n 2 ) size timestamp arrays but allows unsynchronized clocks. We have found that most Internet hosts are synchronized to within a few minutes. The Grapevine distributed database used similar mechanisms <ref> [Birrell82, Demers88] </ref>. In that system, replicated data was updated first at one site, then the results were propagated to other sites in the background. Updates were propagated using a combination of best effort multicast, unreliable message exchange, and a form of anti-entropy session. Only anti-entropy provided reliable delivery. <p> A record of the deletion must be maintained until the deletion has been observed by all processes so that no process can miss the operation and re-introduce the entry to other processes. In Grapevine these records were called death certificates <ref> [Demers88] </ref>, while the Bloch-Daniels-Spector distributed dictionary algorithm [Bloch87] places timestamps on the gaps between entries as well as on the entries themselves.
Reference: [Golding92a] <author> Richard Golding. </author> <title> A weak-consistency architecture for distributed information services. </title> <journal> Computing Systems (1992). Usenix Association. </journal> <note> To appear. </note>
Reference-contexts: In this section we will overview the architecture. In Section 2 we discuss how we used this architecture to build two different systems: the Refdbms bibliographic database <ref> [Golding92a] </ref> and the Tattler distributed reliability monitor [Long92]. In Sections 3, 4, and 5 we detail the components of this architecture and the customizations we used for each application.
Reference: [Golding92b] <author> Richard A. Golding. </author> <title> The timestamped anti-entropy weak-consistency group communication protocol. </title> <note> Technical report UCSC-CRL-92-29 (July 1992). </note> <institution> Computer and Information Sciences Board, University of California at Santa Cruz. </institution>
Reference-contexts: Details can be found in other papers <ref> [Golding92d, Golding92b, Golding93] </ref>. It maintains a summary of the messages and acknowledgments it has received, and periodically exchanges batches of messages between pairs of processes. As long as every process periodically performs these exchanges, every message will eventually be delivered to every process reliable eventual delivery.
Reference: [Golding92c] <author> Richard A. Golding and Darrell D. E. </author> <title> Long. The performance of weak-consistency replication protocols. </title> <note> Technical report UCSC-CRL-92-30 (June 1992). </note> <institution> Computer and Information Sciences Board, University of California at Santa Cruz. </institution>
Reference-contexts: At the end of this exchange both processes adjust their timestamp vectors to reflect the messages just received. Acknowledgments are transmitted implicitly by exchanging acknowledgment vectors. Our performance evaluations have shown that messages propagate much faster when anti-entropy is coupled with an unreliable best effort multicast <ref> [Golding92c] </ref>. In addition, different policies can be used to select partners for anti-entropy sessions, and these policies affect the time required to propagate messages and the network traffic generated by the application.
Reference: [Golding92d] <author> Richard A. Golding and Kim Taylor. </author> <title> Group membership in the epidemic style. </title> <note> Technical report UCSC-CRL-92-13 (22 April 1992). </note> <institution> Computer and Information Sciences Board, University of California at Santa Cruz. </institution>
Reference-contexts: Details can be found in other papers <ref> [Golding92d, Golding92b, Golding93] </ref>. It maintains a summary of the messages and acknowledgments it has received, and periodically exchanges batches of messages between pairs of processes. As long as every process periodically performs these exchanges, every message will eventually be delivered to every process reliable eventual delivery.
Reference: [Golding93] <author> Richard A. Golding and Darrell D. E. </author> <title> Long. Simulation modeling of weak-consistency protocols. </title> <booktitle> Proceedings of International Workshop on Modeling, Analysis, </booktitle> <institution> and Simulation of Computer and Telecommunication Systems (MASCOTS) (January 1993). </institution> <note> To appear. </note>
Reference-contexts: Details can be found in other papers <ref> [Golding92d, Golding92b, Golding93] </ref>. It maintains a summary of the messages and acknowledgments it has received, and periodically exchanges batches of messages between pairs of processes. As long as every process periodically performs these exchanges, every message will eventually be delivered to every process reliable eventual delivery.
Reference: [Ladin91] <author> Rivka Ladin, Barbara Liskov, and Liuba Shrira. </author> <title> Lazy replication: exploiting the semantics of distributed services. </title> <booktitle> Position paper for 4th ACM-SIGOPS European Workshop (Bologna, </booktitle> <month> 3-5 September </month> <year> 1990). </year> <note> Published as Operating Systems Review, 25(1) </note> <month> 49-55 (January </month> <year> 1991). </year>
Reference-contexts: Processes join and leave the group using a separate group membership protocol. Many existing group communication systems, among them Isis [Birman87, Birman91], Psync [Mishra89], Arjuna [Little90], and Lazy Replication <ref> [Ladin91] </ref> provide strong consistency guarantees, meaning that the system provides a multicast message service that ensures that every process views every message in a strictly controlled order, and that no two processes can differ at any moment by more than a limited degree. <p> If they are not, they may be delivered in different orders. FIFO Messages from each process will be delivered in order, but the messages from different processes may be interleaved in any order. Unordered Messages are delivered without regard for order. <ref> [Ladin91] </ref> provides ways to order messages by any potential causal relation that can be detected by a process, even those caused by activities outside the group.
Reference: [Lamport78] <author> Leslie Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <month> 558-65 </month> <year> (1978). </year>
Reference-contexts: Some of these ensure that every process delivers messages in the same order. An application can use this property to ensure that updates occur in the same order everywhere. Total causal ordering, for example, is provided by the Isis ABCAST protocol [Birman90]. Other orderings respect potential causality <ref> [Lamport78] </ref>. That is, if there is any possibility that the contents of one message were caused by another message, the other message will be delivered first at every process. <p> Some causally-consistent mechanisms require that messages be tagged with a number of timestamps or message identifiers [Mishra89]. Total orderings can be accomplished with a per-process counter or timestamp, though the resulting order will not be causal unless the counter or timestamp respects the happens-before relation <ref> [Lamport78] </ref>. 4.1 Using message ordering The Tattler does not require a message order because the operation of merging a sample into the database is not order-dependent. A sample represents a range of times that a host was known to be continuously available.
Reference: [Little90] <author> Mark C. Little and Santosh K. Shrivastava. </author> <title> Replicated k-resilient objects in Arjuna. </title> <booktitle> Proceedings of Workshop on Management of Replicated Data (Houston, </booktitle> <address> Texas), </address> <month> pages 53-8 (November </month> <year> 1990). </year>
Reference-contexts: Processes join and leave the group using a separate group membership protocol. Many existing group communication systems, among them Isis [Birman87, Birman91], Psync [Mishra89], Arjuna <ref> [Little90] </ref>, and Lazy Replication [Ladin91] provide strong consistency guarantees, meaning that the system provides a multicast message service that ensures that every process views every message in a strictly controlled order, and that no two processes can differ at any moment by more than a limited degree.
Reference: [Long92] <author> Darrell D. E. </author> <title> Long. A replicated monitoring tool. </title> <booktitle> Proceedings of 2nd Workshop on the Management of Replicated Data (November 1992). </booktitle>
Reference-contexts: In this section we will overview the architecture. In Section 2 we discuss how we used this architecture to build two different systems: the Refdbms bibliographic database [Golding92a] and the Tattler distributed reliability monitor <ref> [Long92] </ref>. In Sections 3, 4, and 5 we detail the components of this architecture and the customizations we used for each application. <p> We will discuss how conflicts are resolved in more detail in Section 4. 2.2 The Tattler system The Tattler system is a distributed availability monitor for the Internet <ref> [Long92] </ref>. It monitors a set of Internet hosts, measuring how often they are rebooted and what fraction of the time they are available. The measurements are taken from several different network sites to minimize the effect of network failure on the results, and to make the sampling mechanism very reliable.
Reference: [Mishra89] <author> Shikavant Mishra, Larry L. Peterson, and Richard D. Schlichting. </author> <title> Implementing fault-tolerant replicated objects using Psync. </title> <booktitle> Proceedings of 8th Symposium on Reliable Distributed Systems (Seattle, </booktitle> <address> WA), pages 42-52 (10-12 October 1989). </address> <publisher> IEEE Computer Society Press, </publisher> <address> catalog number 88CH2807-6. </address>
Reference-contexts: Processes join and leave the group using a separate group membership protocol. Many existing group communication systems, among them Isis [Birman87, Birman91], Psync <ref> [Mishra89] </ref>, Arjuna [Little90], and Lazy Replication [Ladin91] provide strong consistency guarantees, meaning that the system provides a multicast message service that ensures that every process views every message in a strictly controlled order, and that no two processes can differ at any moment by more than a limited degree. <p> Some causally-consistent mechanisms require that messages be tagged with a number of timestamps or message identifiers <ref> [Mishra89] </ref>.
Reference: [Tanenbaum81] <author> A. S. Tanenbaum. </author> <title> Computer networks (1981). </title> <publisher> Prentice-Hall. </publisher>
Reference-contexts: If that point is contained in the previous interval, then that interval is extended. Otherwise the machine has been rebooted and a new interval begins. 3 Message delivery The message delivery component fills the same function as the transport layer in the ISO layered network model <ref> [Tanenbaum81] </ref>, in that it exchanges messages with other processes without interpreting message 5 FIGURE 3: Structure of a Tattler. TABLE 1: Possible message delivery reliability guarantees, from strongest to weakest. Kind Guarantee Atomic Message is either delivered to every group member, or to none.
Reference: [Turek92] <author> John Turek and Dennis Shasha. </author> <title> The many faces of consensus in distributed systems. </title> <journal> IEEE Computer, </journal> <volume> 25(6) </volume> <month> 8-17 (June </month> <year> 1992). </year> <month> 15 </month>
Reference-contexts: We assume that the network is sufficiently reliable that any two processes can eventually exchange messages, but it need never be completely free of partitions. Many of these assumptions about networks, processes, and hosts are necessary to make consensus possible <ref> [Turek92] </ref>. The Internet approximates synchronous processors with unbounded communication; when combined with processes that do not fail, or at least are reincarnated on demand, multiple processes can reach a shared decision. 1.2 Group communication architecture We are developing an architecture for building custom weak-consistency group communication systems.
References-found: 20

