URL: http://www.isi.edu/sims/papers/93-sims-icikm93.ps
Refering-URL: http://www.isi.edu/~knoblock/
Root-URL: 
Email: fchunnan, knoblockg@isi.edu  
Phone: (310)822-1511  
Title: Reformulating Query Plans For Multidatabase Systems  
Author: Chun-Nan Hsu Craig A. Knoblock 
Date: 1993  
Note: Published in the Proceedings of the Second International Conference on  
Address: 4676 Admiralty Way Marina del Rey, CA 90292  DC,  
Affiliation: Information Sciences Institute and Department of Computer Science University of Southern California  Information and Knowledge Management, Washington,  
Abstract: A practical heterogeneous, distributed multidatabase system must answer queries efficiently. Conventional query optimization techniques are not adequate here because these techniques are dependent on the database structure, and rely on limited information which is not sufficient in complicated multidatabase queries. This paper presents an automated approach to reformulating query plans to improve the efficiency of multidatabase queries. This approach uses database abstractions, the knowledge about the contents of databases, to reformulate a query plan into less expensive but semantically equivalent one. We present two algorithms. The first algorithm reformulates subqueries to individual databases, the second algorithm extends the first one and reformulates the entire query plan. Empirical results show that the reformulations can provide significant savings with minimal overhead. The reformulation approach provides a global reduction in the amount of the intermediate data as well as local optimizations on the subqueries. 1 fl The research reported here was supported by Rome Laboratory of the Air Force Systems Command and the Defense Advanced Research Projects Agency under contract no. F30602-91-C-0081. Views and conclusions contained in this report are the authors' and should not be interpreted as representing the official opinion or policy of DARPA, RL, the U.S. Government, or any person or agency connected with them. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Apers, P., Hevner, A., and Yao, S.B., </author> <year> 1983. </year> <title> Optimizing algorithms for distributed queries. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 9 </volume> <pages> 57-68. </pages>
Reference: <author> Arens, Y., Chee, C., Hsu, C.-N., </author> <title> and Knoblock, </title> <address> C.A., </address> <year> 1993. </year> <title> Retrieving and integrating data from multiple information sources. </title> <journal> International Journal on Intelligent and Cooperative Information Systems. </journal> <note> In press. </note>
Reference: <editor> Arens, Y. and Knoblock, </editor> <address> C.A., </address> <year> 1992. </year> <title> Planning and reformulating queries for semantically-modeled multi-database systems. </title> <booktitle> In Proceedings of the First International Conference on Information and Knowledge Management, </booktitle> <address> Baltimore, MD. </address>
Reference: <author> Cai, Y., Cercone, N., and Han, J., </author> <year> 1991. </year> <title> Learning in relational databases: An attribute-oriented approach. </title> <journal> Computational Intelligence, </journal> <volume> 7(3) </volume> <pages> 119-132. </pages>
Reference: <author> Chakravarthy, U., Grant, J., and Minker, J., </author> <year> 1990. </year> <title> Logic-based approach to semantic query optimization. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(2) </volume> <pages> 162-207. </pages>
Reference: <author> Carbonell, J., Knoblock, C.A., and Minton, S., </author> <year> 1991. </year> <title> PRODIGY: An integrated architecture for planning and learning. </title> <editor> In Kurt VanLehn, editor, </editor> <booktitle> Architectures for Intelligence, </booktitle> <pages> pages 241-278. </pages> <publisher> Lawrence Erlbaum, </publisher> <address> Hillsdale, NJ. </address>
Reference-contexts: The interface enables the user to inspect the domain model as an aid to composing queries. SIMS proceeds to decompose the user's query into a collection of more elementary statements that refer to data stored in available information sources. SIMS then uses Prodigy <ref> (Carbonell, Knoblock, and Minton, 1991) </ref> to create a plan for retrieving the desired information, establishing the order and content of the various plan steps/subqueries.
Reference: <author> Chu, W.W., Lee, R.-C., </author> <year> 1990. </year> <title> Semantic query processing via database restructuring. </title> <booktitle> In Proceedings of the Eighth International Congress of Cybernetics and Systems. </booktitle> <address> New York, NY. </address>
Reference: <author> Forgy. C.L., </author> <year> 1982. </year> <title> RETE: A fast algorithm for the many pattern/many object pattern matching problem. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> pages 17-37. </pages>
Reference-contexts: A very large set of database abstractions could make the reformulation costly. To avoid this problem, we plan to adopt a more sophisticated rule match algorithm, such as the RETE algorithm <ref> (Forgy, 1982) </ref>, or its more efficient variations, to reduce this impact. One important issue not addressed in this paper is how to automatically acquire the database abstractions for reformulation (Siegel, 1988). We are now developing a learning algorithm that is driven by example queries (Hsu and Knoblock, 1993).
Reference: <author> Haussler, D., </author> <year> 1988. </year> <title> Quantifying inductive bias: AI learning algorithms and Valiant's learning framework. </title> <journal> Artificial Intelligence, </journal> <volume> 36 </volume> <pages> 177-222. </pages>
Reference: <editor> Hsu, C.-N., and Knoblock, </editor> <address> C.A., </address> <year> 1993. </year> <title> Learning database abstractions for query reformulation. </title> <booktitle> In Proceedings of AAAI-93 Workshop on Knowledge Discovery in Databases, </booktitle> <address> Washington, DC. </address>
Reference-contexts: One important issue not addressed in this paper is how to automatically acquire the database abstractions for reformulation (Siegel, 1988). We are now developing a learning algorithm that is driven by example queries <ref> (Hsu and Knoblock, 1993) </ref>. We plan to use inductive learning (Cai, Cercone, and Han 1991; Haussler, 1988; Michalski, 1983) to identify the costly aspects of the example subqueries and propose candidate rules. The candidate rules will then be refined and learned by the system.
Reference: <author> Hammer, M., and Zdonik, S., </author> <year> 1980. </year> <title> Knowledge-based query processing. </title> <booktitle> In Proceedings of the Sixth VLDB Conference, </booktitle> <pages> pages 137-146, </pages> <address> Washington, DC. </address>
Reference-contexts: Given a multi-database query, the planner of SIMS generates a partially ordered query plan to retrieve the data. The reformulation algorithm presented here is used to reformulate this initial query plan to reduce the cost of retrieval. The query reformulation approach was initially proposed by (King, 1981) and <ref> (Hammer and Zdonik, 1980) </ref>. Our approach differs from theirs and the following related work (Siegel, 1988; Chakravarthy, Grant and Minker, 1990) in that we do not rely on heuristics to guide the search in a hill-climbing manner, which often results in local optima.
Reference: <author> Jarke, M. and Koch, J., </author> <year> 1984. </year> <title> Query optimization in database systems. </title> <journal> ACM Computer Surveys, </journal> <volume> 16 </volume> <pages> 111-152. </pages>
Reference-contexts: Some semi-join approaches assume a unrealistically simplified model to reduce the overhead, but to make semi-join approach effective, the system still need to bring to bear extensive statistical knowledge to estimate relation sizes <ref> (Jarke and Koch, 1984) </ref>. Another difference between our approach and the conventional distributed query optimization techniques is that they assume a homogeneous environment. They can transfer data from one site to another without any transformation. They can also distribute a relation into fragments and store them in different sites.
Reference: <author> King, J.J., </author> <title> 1981 Query Optimization by Semantic Reasoning. </title> <type> PhD thesis, </type> <institution> Stanford University, Department of Computer Science. </institution>
Reference-contexts: Given a multi-database query, the planner of SIMS generates a partially ordered query plan to retrieve the data. The reformulation algorithm presented here is used to reformulate this initial query plan to reduce the cost of retrieval. The query reformulation approach was initially proposed by <ref> (King, 1981) </ref> and (Hammer and Zdonik, 1980). Our approach differs from theirs and the following related work (Siegel, 1988; Chakravarthy, Grant and Minker, 1990) in that we do not rely on heuristics to guide the search in a hill-climbing manner, which often results in local optima.
Reference: <author> MacGregor, R., </author> <year> 1990. </year> <title> The evolving technology of classification-based knowledge representation systems. </title> <editor> In John Sowa, editor, </editor> <booktitle> Principles of Semantic Networks: Explorations in the Representation of Knowledge. </booktitle> <publisher> Mor-gan Kaufmann. </publisher>
Reference-contexts: SIMS accepts queries in the form of a description of a class of objects about which information is desired. This description is composed of statements in the Loom knowledge representation language <ref> (Macgregor, 1990) </ref>. The user is not presumed to know how information is distributed over the data- and knowledge bases to which SIMS has access | but he/she is assumed to be familiar with the application domain, and to use standard terminology to compose the Loom query.
Reference: <author> Michalski, R.S., </author> <year> 1983. </year> <title> A theory and methodology of inductive learning. </title> <booktitle> In Machine Learning: An Artificial Intelligence Approach, </booktitle> <volume> volume I, </volume> <pages> pages 83-134. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> Los Altos, CA. </address>
Reference: <author> Piatetsky-Shapiro, G., </author> <year> 1991. </year> <title> Discovery, analysis, and presentation of strong rules. </title> <editor> In G. Piatetsky-Shapiro, editor, </editor> <booktitle> Knowledge Discovery in Databases, </booktitle> <pages> pages 229-248. </pages> <publisher> MIT Press. </publisher>
Reference: <author> Sheth, A.P., and Larson, J.A., </author> <year> 1990. </year> <title> Federated database systems for managing distributed, heterogeneous, and autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22 </volume> <pages> 183-236. </pages>
Reference-contexts: 1 Introduction An important and difficult problem is how to efficiently retrieve information from distributed, heterogeneous multidatabase systems <ref> (Sheth and Larson, 1990) </ref>. Retrieving and integrating distributed data often requires processing and storage of large amounts of intermediate data, which can be very costly.
Reference: <author> Siegel, M.D., </author> <year> 1988. </year> <title> Automatic rule derivation for semantic query optimization. </title> <editor> In Larry Kerschberg, editor, </editor> <booktitle> Proceedings of the Second International Conference on Expert Database Systems, </booktitle> <pages> pages 371-385. </pages> <institution> George Mason Foundation, Fairfax, VA. </institution>
Reference-contexts: To overcome this problem, they use heuristics and hill-climbing to prune the search space, but as a consequence, the reformulated query is usually only locally optimal. Sometimes, this process causes infinite loops that require more heuristics to resolve <ref> (Siegel, 1988) </ref>. To illustrate the problem of previous work, consider the following situation. Suppose there are two rules in the set of database abstractions, A ! B, and B ! C. <p> To avoid this problem, we plan to adopt a more sophisticated rule match algorithm, such as the RETE algorithm (Forgy, 1982), or its more efficient variations, to reduce this impact. One important issue not addressed in this paper is how to automatically acquire the database abstractions for reformulation <ref> (Siegel, 1988) </ref>. We are now developing a learning algorithm that is driven by example queries (Hsu and Knoblock, 1993). We plan to use inductive learning (Cai, Cercone, and Han 1991; Haussler, 1988; Michalski, 1983) to identify the costly aspects of the example subqueries and propose candidate rules.
Reference: <author> Ullman, J.D., </author> <year> 1988. </year> <title> Principles of Database and Knowledge-base Systems, volume II. </title> <publisher> Computer Science Press, </publisher> <address> Palo Alto, CA. </address>
References-found: 19

