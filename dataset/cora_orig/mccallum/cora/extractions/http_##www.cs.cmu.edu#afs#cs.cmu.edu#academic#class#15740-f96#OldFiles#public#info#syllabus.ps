URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15740-f96/OldFiles/public/info/syllabus.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/academic/class/15740-f96/OldFiles/public/info/
Root-URL: http://www.cs.cmu.edu
Title: Syllabus 1. Electronic Connections  
Date: Fall 1996  
Note: 15-740 Basic Computer Systems  2. Logistics Class meetings Tuesdays and Thursdays, 1:00 2:50 p.m. in 5409 Wean Hall  
Abstract: Much of the material for the course will be available electronically in the AFS directory: /afs/cs.cmu.edu/academic/class/15740-f96/public In the following subdirectories you will find: doc Copies of many of the readings. asst Subdirectories with supporting material for each assignment. info Copies of handouts. bin Executable programs lib Program libraries We will use the World Wide Web (WWW) to provide up-to-date information regarding all aspects of the course. Refer to Web page: http://www.cs.cmu.edu /afs/cs.cmu.edu/academic/class/15740-f96/www/home.html You can obtain copies of all handouts (including assignments), track the course schedule, and learn all kinds of other interesting things from this Web page. You should also follow the newsgroup cmu.cs.class.cs740. You are free to post on this group. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> Many of the papers are available as postscript files in the directory /afs/cs.cmu.edu/academic/class/15740-f96/public/doc The file names are indicated for these documents. </institution> <note> Copies of all other papers are on reserve in the E&S Library. References </note>
Reference: [Aho+86] <author> Aho, A. V. and Sethi, R. and Ullman J. D., </author> <title> Compilers. </title> <publisher> Addison-Wesley, </publisher> <year> 1986. </year> <pages> Background. </pages>
Reference-contexts: For each of the areas, a reference is suggested for self study. * A working knowledge of C, including pointers and memory allocation [Kernighan+88]. * An introductory compiler course, especially aspects of code generation such as data formats, procedure linkages, and translation of control constructs <ref> [Aho+86, Chs. 12, 79] </ref>. * An introductory operating system course, especially aspects of protection, scheduling, and concurrency [Silberschatz+91, Chs. 4.14.3, 5.15.4, 5.7, and 79] * Bit-level representation of and manipulation of numbers [HenPat96, App. A.1A.2]. 4.
Reference: [Blelloch96] <author> Blelloch, G. E., </author> <title> Programming Parallel Algorithms, </title> <journal> Communications of the ACM, </journal> <month> March, </month> <year> 1996. </year> <note> A postscript version is available as Blelloch.ps. An online version is available as http://web.scandal.cs.cmu.edu/cacm.html </note>
Reference-contexts: Routing Virtual channels, deadlock avoidance [Leighton92] and [Dally90] General Issues in Parallel Computing Applications and technology [HenPat96, Chs. 8.18.2, 8.7, and 8.98.11]. 5 Data Parallel Computing Programming Model Algorithms and linguistic expression <ref> [Blelloch96] </ref> Vector machines Vector machine design [HenPat96, App. B], Memory subsystem [Smith+91]. Control Parallel Computing Dynamic Threads Cilk [Cilk]. Message-passing processes PVM [Sunderam+94] and MPI [Dongarra+95]. 5. Schedule The following is a tentative schedule. There might be some variations. 6
Reference: [Cilk] <author> Cilk 3.0 Reference Manual, </author> <title> pp. </title> <type> 161. </type> <institution> Massachusetts Institute of Technology, </institution> <month> October, </month> <year> 1995. </year> <note> Available as Cilk.ps </note>
Reference-contexts: B], Memory subsystem [Smith+91]. Control Parallel Computing Dynamic Threads Cilk <ref> [Cilk] </ref>. Message-passing processes PVM [Sunderam+94] and MPI [Dongarra+95]. 5. Schedule The following is a tentative schedule. There might be some variations. 6
Reference: [Clarke+92] <author> Clarke, </author> <title> E.M., </title> <editor> et al, </editor> <title> Verification of the Futurebus+ Cache Coherence Protocol, </title> <type> Technical Report CMU-CS-92-206, </type> <year> 1992. </year> <note> Available as Clarke.ps. </note>
Reference-contexts: Memory Hierarchies Caches Processor-memory interface, indexing, associativity, write policies [HenPat96, Chs. 5.1 5.6]. Virtual Memory Memory mapping, protection, page tables, and TLBs [HenPat96, Chs. 5.75.12]. Shared memory Bus and directory-based schemes. Consistency models [HenPat96, Chs. 8.38.6, 8.8, and App. E]. Protocol verification Temporal logic model checking <ref> [Clarke+92] </ref> Input, Output, and Storage Storage devices Characteristics of disks and other devices [HenPat96, Chs. 6.16.2]. Buses I/O subsystems, [HenPat96, Chs. 6.3, 6.66.7, and 6.96.11] Reliability and performance I/O performance [HenPat96, Chs. 6.4, 6.8], system reliability and use of redundancy [HenPat96, Chs. 6.5].
Reference: [Comer95] <author> Comer, D. E., </author> <title> Internetworking with TCP/IP Volume 1: Principles, Protocols, and Architecture, Third Edition, </title> <publisher> Prentice-Hall, </publisher> <year> 1995 </year>
Reference-contexts: Local and Wide Area Networks Network technology Ethernet, token ring, packet switching, ATM [HenPat96, Ch. 7]. Network protocols TCP/IP as an example of a layered protocol <ref> [Comer95, Chs. 113] </ref> Processor Interconnection Networks Topologies Direct (hypercube, torus, ring) and indirect (butterfly) networks [Dally90].
Reference: [Dally90] <author> Dally, W. J., </author> <title> Network and Processor Architectures for Message-Driven Computers, VLSI and Parallel Computation, </title> <editor> Suaya, R., and Birtwistle, G., eds., </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1990, </year> <note> Chapter 3.1, pp. 140169. </note>
Reference-contexts: Local and Wide Area Networks Network technology Ethernet, token ring, packet switching, ATM [HenPat96, Ch. 7]. Network protocols TCP/IP as an example of a layered protocol [Comer95, Chs. 113] Processor Interconnection Networks Topologies Direct (hypercube, torus, ring) and indirect (butterfly) networks <ref> [Dally90] </ref>. Routing Virtual channels, deadlock avoidance [Leighton92] and [Dally90] General Issues in Parallel Computing Applications and technology [HenPat96, Chs. 8.18.2, 8.7, and 8.98.11]. 5 Data Parallel Computing Programming Model Algorithms and linguistic expression [Blelloch96] Vector machines Vector machine design [HenPat96, App. B], Memory subsystem [Smith+91]. <p> Local and Wide Area Networks Network technology Ethernet, token ring, packet switching, ATM [HenPat96, Ch. 7]. Network protocols TCP/IP as an example of a layered protocol [Comer95, Chs. 113] Processor Interconnection Networks Topologies Direct (hypercube, torus, ring) and indirect (butterfly) networks <ref> [Dally90] </ref>. Routing Virtual channels, deadlock avoidance [Leighton92] and [Dally90] General Issues in Parallel Computing Applications and technology [HenPat96, Chs. 8.18.2, 8.7, and 8.98.11]. 5 Data Parallel Computing Programming Model Algorithms and linguistic expression [Blelloch96] Vector machines Vector machine design [HenPat96, App. B], Memory subsystem [Smith+91]. Control Parallel Computing Dynamic Threads Cilk [Cilk].
Reference: [Dongarra+95] <author> Dongarra, J. J., Otto, S. W., Snir, M., and Walker, D., </author> <title> An Introduction to the MPI Standard, </title> <month> April, </month> <year> 1995. </year> <note> Available as Dongarra.ps. </note>
Reference-contexts: B], Memory subsystem [Smith+91]. Control Parallel Computing Dynamic Threads Cilk [Cilk]. Message-passing processes PVM [Sunderam+94] and MPI <ref> [Dongarra+95] </ref>. 5. Schedule The following is a tentative schedule. There might be some variations. 6
Reference: [HenPat96] <author> Hennessy, J. L, and Patterson, D. A., </author> <title> Computer Architecture A Quantitative Approach, 2nd Edition. </title> <publisher> Morgan Kaufman, </publisher> <year> 1996. </year> <title> Main textbook. </title>
Reference-contexts: A.1A.2]. 4. Syllabus Uniprocessor design Instruction Set Design Classes of instruction set architectures, addressing memory and operands, compiler perspective <ref> [HenPat96, Ch. 2] </ref>. We will actually use the MIPS architecture as our basis. This instruction set is very similar to DLX. It is documented more completely in [Kane92]. Comparison between RISC [HenPat96, App. C] and CISC [HenPat96, App. <p> Syllabus Uniprocessor design Instruction Set Design Classes of instruction set architectures, addressing memory and operands, compiler perspective [HenPat96, Ch. 2]. We will actually use the MIPS architecture as our basis. This instruction set is very similar to DLX. It is documented more completely in [Kane92]. Comparison between RISC <ref> [HenPat96, App. C] </ref> and CISC [HenPat96, App. D] architectures. 4 Pipelined processor implementation The DLX pipeline, including techniques for handling haz- ards, multicycle operations, and exceptions [HenPat96, Ch. 3]. <p> We will actually use the MIPS architecture as our basis. This instruction set is very similar to DLX. It is documented more completely in [Kane92]. Comparison between RISC [HenPat96, App. C] and CISC <ref> [HenPat96, App. D] </ref> architectures. 4 Pipelined processor implementation The DLX pipeline, including techniques for handling haz- ards, multicycle operations, and exceptions [HenPat96, Ch. 3]. <p> This instruction set is very similar to DLX. It is documented more completely in [Kane92]. Comparison between RISC [HenPat96, App. C] and CISC [HenPat96, App. D] architectures. 4 Pipelined processor implementation The DLX pipeline, including techniques for handling haz- ards, multicycle operations, and exceptions <ref> [HenPat96, Ch. 3] </ref>. Advanced pipelining Instruction level parallelism, branch prediction, and multiple issue. [HenPat96, Ch. 4.14.7, and 4.94.11] Case Study IBM/Motorola Power and PowerPC architectures and implementations [HenPat96, Ch. 4.8], and [Smith+94]. This architecture blends RISC and CISC concepts, and there are several generations of implementations to compare. <p> It is documented more completely in [Kane92]. Comparison between RISC [HenPat96, App. C] and CISC [HenPat96, App. D] architectures. 4 Pipelined processor implementation The DLX pipeline, including techniques for handling haz- ards, multicycle operations, and exceptions [HenPat96, Ch. 3]. Advanced pipelining Instruction level parallelism, branch prediction, and multiple issue. <ref> [HenPat96, Ch. 4.14.7, and 4.94.11] </ref> Case Study IBM/Motorola Power and PowerPC architectures and implementations [HenPat96, Ch. 4.8], and [Smith+94]. This architecture blends RISC and CISC concepts, and there are several generations of implementations to compare. Memory Hierarchies Caches Processor-memory interface, indexing, associativity, write policies [HenPat96, Chs. 5.1 5.6]. <p> D] architectures. 4 Pipelined processor implementation The DLX pipeline, including techniques for handling haz- ards, multicycle operations, and exceptions [HenPat96, Ch. 3]. Advanced pipelining Instruction level parallelism, branch prediction, and multiple issue. [HenPat96, Ch. 4.14.7, and 4.94.11] Case Study IBM/Motorola Power and PowerPC architectures and implementations <ref> [HenPat96, Ch. 4.8] </ref>, and [Smith+94]. This architecture blends RISC and CISC concepts, and there are several generations of implementations to compare. Memory Hierarchies Caches Processor-memory interface, indexing, associativity, write policies [HenPat96, Chs. 5.1 5.6]. Virtual Memory Memory mapping, protection, page tables, and TLBs [HenPat96, Chs. 5.75.12]. <p> This architecture blends RISC and CISC concepts, and there are several generations of implementations to compare. Memory Hierarchies Caches Processor-memory interface, indexing, associativity, write policies <ref> [HenPat96, Chs. 5.1 5.6] </ref>. Virtual Memory Memory mapping, protection, page tables, and TLBs [HenPat96, Chs. 5.75.12]. Shared memory Bus and directory-based schemes. Consistency models [HenPat96, Chs. 8.38.6, 8.8, and App. E]. <p> This architecture blends RISC and CISC concepts, and there are several generations of implementations to compare. Memory Hierarchies Caches Processor-memory interface, indexing, associativity, write policies [HenPat96, Chs. 5.1 5.6]. Virtual Memory Memory mapping, protection, page tables, and TLBs <ref> [HenPat96, Chs. 5.75.12] </ref>. Shared memory Bus and directory-based schemes. Consistency models [HenPat96, Chs. 8.38.6, 8.8, and App. E]. Protocol verification Temporal logic model checking [Clarke+92] Input, Output, and Storage Storage devices Characteristics of disks and other devices [HenPat96, Chs. 6.16.2]. <p> This architecture blends RISC and CISC concepts, and there are several generations of implementations to compare. Memory Hierarchies Caches Processor-memory interface, indexing, associativity, write policies [HenPat96, Chs. 5.1 5.6]. Virtual Memory Memory mapping, protection, page tables, and TLBs [HenPat96, Chs. 5.75.12]. Shared memory Bus and directory-based schemes. Consistency models <ref> [HenPat96, Chs. 8.38.6, 8.8, and App. E] </ref>. Protocol verification Temporal logic model checking [Clarke+92] Input, Output, and Storage Storage devices Characteristics of disks and other devices [HenPat96, Chs. 6.16.2]. <p> Virtual Memory Memory mapping, protection, page tables, and TLBs [HenPat96, Chs. 5.75.12]. Shared memory Bus and directory-based schemes. Consistency models [HenPat96, Chs. 8.38.6, 8.8, and App. E]. Protocol verification Temporal logic model checking [Clarke+92] Input, Output, and Storage Storage devices Characteristics of disks and other devices <ref> [HenPat96, Chs. 6.16.2] </ref>. Buses I/O subsystems, [HenPat96, Chs. 6.3, 6.66.7, and 6.96.11] Reliability and performance I/O performance [HenPat96, Chs. 6.4, 6.8], system reliability and use of redundancy [HenPat96, Chs. 6.5]. Local and Wide Area Networks Network technology Ethernet, token ring, packet switching, ATM [HenPat96, Ch. 7]. <p> Shared memory Bus and directory-based schemes. Consistency models [HenPat96, Chs. 8.38.6, 8.8, and App. E]. Protocol verification Temporal logic model checking [Clarke+92] Input, Output, and Storage Storage devices Characteristics of disks and other devices [HenPat96, Chs. 6.16.2]. Buses I/O subsystems, <ref> [HenPat96, Chs. 6.3, 6.66.7, and 6.96.11] </ref> Reliability and performance I/O performance [HenPat96, Chs. 6.4, 6.8], system reliability and use of redundancy [HenPat96, Chs. 6.5]. Local and Wide Area Networks Network technology Ethernet, token ring, packet switching, ATM [HenPat96, Ch. 7]. <p> Consistency models [HenPat96, Chs. 8.38.6, 8.8, and App. E]. Protocol verification Temporal logic model checking [Clarke+92] Input, Output, and Storage Storage devices Characteristics of disks and other devices [HenPat96, Chs. 6.16.2]. Buses I/O subsystems, [HenPat96, Chs. 6.3, 6.66.7, and 6.96.11] Reliability and performance I/O performance <ref> [HenPat96, Chs. 6.4, 6.8] </ref>, system reliability and use of redundancy [HenPat96, Chs. 6.5]. Local and Wide Area Networks Network technology Ethernet, token ring, packet switching, ATM [HenPat96, Ch. 7]. <p> E]. Protocol verification Temporal logic model checking [Clarke+92] Input, Output, and Storage Storage devices Characteristics of disks and other devices [HenPat96, Chs. 6.16.2]. Buses I/O subsystems, [HenPat96, Chs. 6.3, 6.66.7, and 6.96.11] Reliability and performance I/O performance [HenPat96, Chs. 6.4, 6.8], system reliability and use of redundancy <ref> [HenPat96, Chs. 6.5] </ref>. Local and Wide Area Networks Network technology Ethernet, token ring, packet switching, ATM [HenPat96, Ch. 7]. Network protocols TCP/IP as an example of a layered protocol [Comer95, Chs. 113] Processor Interconnection Networks Topologies Direct (hypercube, torus, ring) and indirect (butterfly) networks [Dally90]. <p> Buses I/O subsystems, [HenPat96, Chs. 6.3, 6.66.7, and 6.96.11] Reliability and performance I/O performance [HenPat96, Chs. 6.4, 6.8], system reliability and use of redundancy [HenPat96, Chs. 6.5]. Local and Wide Area Networks Network technology Ethernet, token ring, packet switching, ATM <ref> [HenPat96, Ch. 7] </ref>. Network protocols TCP/IP as an example of a layered protocol [Comer95, Chs. 113] Processor Interconnection Networks Topologies Direct (hypercube, torus, ring) and indirect (butterfly) networks [Dally90]. <p> Network protocols TCP/IP as an example of a layered protocol [Comer95, Chs. 113] Processor Interconnection Networks Topologies Direct (hypercube, torus, ring) and indirect (butterfly) networks [Dally90]. Routing Virtual channels, deadlock avoidance [Leighton92] and [Dally90] General Issues in Parallel Computing Applications and technology <ref> [HenPat96, Chs. 8.18.2, 8.7, and 8.98.11] </ref>. 5 Data Parallel Computing Programming Model Algorithms and linguistic expression [Blelloch96] Vector machines Vector machine design [HenPat96, App. B], Memory subsystem [Smith+91]. Control Parallel Computing Dynamic Threads Cilk [Cilk]. Message-passing processes PVM [Sunderam+94] and MPI [Dongarra+95]. 5. Schedule The following is a tentative schedule. <p> Routing Virtual channels, deadlock avoidance [Leighton92] and [Dally90] General Issues in Parallel Computing Applications and technology [HenPat96, Chs. 8.18.2, 8.7, and 8.98.11]. 5 Data Parallel Computing Programming Model Algorithms and linguistic expression [Blelloch96] Vector machines Vector machine design <ref> [HenPat96, App. B] </ref>, Memory subsystem [Smith+91]. Control Parallel Computing Dynamic Threads Cilk [Cilk]. Message-passing processes PVM [Sunderam+94] and MPI [Dongarra+95]. 5. Schedule The following is a tentative schedule. There might be some variations. 6
Reference: [Kane92] <author> Kane, G., and Heinrich, J., </author> <title> MIPS RISC Architecture, </title> <publisher> Prentice-Hall, </publisher> <year> 1992. </year> <note> On reserve in E&S Library. </note>
Reference-contexts: A.1A.2]. 4. Syllabus Uniprocessor design Instruction Set Design Classes of instruction set architectures, addressing memory and operands, compiler perspective [HenPat96, Ch. 2]. We will actually use the MIPS architecture as our basis. This instruction set is very similar to DLX. It is documented more completely in <ref> [Kane92] </ref>. Comparison between RISC [HenPat96, App. C] and CISC [HenPat96, App. D] architectures. 4 Pipelined processor implementation The DLX pipeline, including techniques for handling haz- ards, multicycle operations, and exceptions [HenPat96, Ch. 3].
Reference: [Kernighan+88] <author> Kernighan, B. W., and Ritchie, D. M., </author> <title> The C Programming Language, 2nd edition, </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year> <pages> Background. </pages>
Reference-contexts: If you feel uncertain whether you have adequate preparation, discuss this with one of the instructors. For each of the areas, a reference is suggested for self study. * A working knowledge of C, including pointers and memory allocation <ref> [Kernighan+88] </ref>. * An introductory compiler course, especially aspects of code generation such as data formats, procedure linkages, and translation of control constructs [Aho+86, Chs. 12, 79]. * An introductory operating system course, especially aspects of protection, scheduling, and concurrency [Silberschatz+91, Chs. 4.14.3, 5.15.4, 5.7, and 79] * Bit-level representation of and
Reference: [Leighton92] <author> Leighton, T., </author> <title> Methods for Message Routing in Parallel Machines, </title> <booktitle> 24th ACM Symposium on Theory of Computing (STOC '92), </booktitle> <month> May, </month> <year> 1992, </year> <pages> pp. 7796. 7 </pages>
Reference-contexts: Local and Wide Area Networks Network technology Ethernet, token ring, packet switching, ATM [HenPat96, Ch. 7]. Network protocols TCP/IP as an example of a layered protocol [Comer95, Chs. 113] Processor Interconnection Networks Topologies Direct (hypercube, torus, ring) and indirect (butterfly) networks [Dally90]. Routing Virtual channels, deadlock avoidance <ref> [Leighton92] </ref> and [Dally90] General Issues in Parallel Computing Applications and technology [HenPat96, Chs. 8.18.2, 8.7, and 8.98.11]. 5 Data Parallel Computing Programming Model Algorithms and linguistic expression [Blelloch96] Vector machines Vector machine design [HenPat96, App. B], Memory subsystem [Smith+91]. Control Parallel Computing Dynamic Threads Cilk [Cilk].
Reference: [Silberschatz+91] <author> Silberschatz, A., Peterson, J., and Galvin, T., </author> <title> Operating System Concepts, 3rd Edition, </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year> <pages> Background. </pages>
Reference-contexts: * A working knowledge of C, including pointers and memory allocation [Kernighan+88]. * An introductory compiler course, especially aspects of code generation such as data formats, procedure linkages, and translation of control constructs [Aho+86, Chs. 12, 79]. * An introductory operating system course, especially aspects of protection, scheduling, and concurrency <ref> [Silberschatz+91, Chs. 4.14.3, 5.15.4, 5.7, and 79] </ref> * Bit-level representation of and manipulation of numbers [HenPat96, App. A.1A.2]. 4. Syllabus Uniprocessor design Instruction Set Design Classes of instruction set architectures, addressing memory and operands, compiler perspective [HenPat96, Ch. 2]. We will actually use the MIPS architecture as our basis.
Reference: [Smith+94] <author> Smith, J. E., and Weiss, S., </author> <title> PowerPC 601 and Alpha 21064: A Tale of Two RISCs, </title> <booktitle> IEEE Computer, </booktitle> <month> June, </month> <year> 1994, </year> <pages> pp. 4658. </pages>
Reference-contexts: Advanced pipelining Instruction level parallelism, branch prediction, and multiple issue. [HenPat96, Ch. 4.14.7, and 4.94.11] Case Study IBM/Motorola Power and PowerPC architectures and implementations [HenPat96, Ch. 4.8], and <ref> [Smith+94] </ref>. This architecture blends RISC and CISC concepts, and there are several generations of implementations to compare. Memory Hierarchies Caches Processor-memory interface, indexing, associativity, write policies [HenPat96, Chs. 5.1 5.6]. Virtual Memory Memory mapping, protection, page tables, and TLBs [HenPat96, Chs. 5.75.12]. Shared memory Bus and directory-based schemes.
Reference: [Smith+91] <author> Smith, J. R., and Taylor, W. R., </author> <title> Accurate Modeling of Interconnection Networks in Vector Supercomputers, </title> <booktitle> 1991 International Conference on Supercomputing, ACM, </booktitle> <year> 1991, </year> <pages> pp. 264272. </pages>
Reference-contexts: Routing Virtual channels, deadlock avoidance [Leighton92] and [Dally90] General Issues in Parallel Computing Applications and technology [HenPat96, Chs. 8.18.2, 8.7, and 8.98.11]. 5 Data Parallel Computing Programming Model Algorithms and linguistic expression [Blelloch96] Vector machines Vector machine design [HenPat96, App. B], Memory subsystem <ref> [Smith+91] </ref>. Control Parallel Computing Dynamic Threads Cilk [Cilk]. Message-passing processes PVM [Sunderam+94] and MPI [Dongarra+95]. 5. Schedule The following is a tentative schedule. There might be some variations. 6
Reference: [Sunderam+94] <author> Sunderam, V. S., Geist, G. A., Dongarra, J., and Manchek, R., </author> <title> The PVM Concurrent Computing System: Evolution, Experiences, </title> <booktitle> and Trends, </booktitle> <year> 1994. </year> <note> Available as Sunderam.ps. 8 </note>
Reference-contexts: B], Memory subsystem [Smith+91]. Control Parallel Computing Dynamic Threads Cilk [Cilk]. Message-passing processes PVM <ref> [Sunderam+94] </ref> and MPI [Dongarra+95]. 5. Schedule The following is a tentative schedule. There might be some variations. 6
References-found: 16

