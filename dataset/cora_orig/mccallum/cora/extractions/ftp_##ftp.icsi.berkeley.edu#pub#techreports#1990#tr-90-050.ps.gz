URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1990/tr-90-050.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1990.html
Root-URL: http://www.icsi.berkeley.edu
Title: Ring Array Processor (RAP): Software Architecture  
Phone: 1-415-642-4274 FAX 1-415-643-7684  
Author: Jeff Bilmes Phil Kohn 
Date: January 1991  
Address: I 1947 Center Street Suite 600 Berkeley, California 94704  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  
Pubnum: TR-90-050  
Abstract: The design and implementation of software for the Ring Array Processor (RAP), a high performance parallel computer, involved development for three hardware platforms: Sun SPARC workstations, Heurikon MC68020 boards running the VxWorks real-time operating system, and Texas Instruments TMS320C30 DSPs. The RAP now runs in Sun workstations under UNIX and in a VME based system using VxWorks. A flexible set of tools has been provided both to the RAP user and programmer. Primary emphasis has been placed on improving the efficiency of layered artificial neural network algorithms. This was done by providing a library of assembly language routines, some of which use node-custom compilation. An object-oriented RAP interface in C++ is provided that allows programmers to incorporate the RAP as a computational server into their own UNIX applications. For those not wishing to program in C++, a command interpreter has been built that provides interactive and shell-script style RAP manipulation. 
Abstract-found: 1
Intro-found: 1
Reference: [BBK91] <author> Jeff Bilmes, James Beck, and Phil Kohn. </author> <title> Installing a RAP System. </title> <booktitle> International Computer Science Institute, </booktitle> <year> 1991. </year>
Reference-contexts: Two different device drivers exist, rapmem and rap. A user wishing to install several RAP boards in a Sun will install one of these device drivers by editing the necessary kernel configuration files and rebuilding and installing a new UNIX kernel <ref> [BBK91] </ref>. A user should name the RAP devices files consecutively from /dev/rap0 to /dev/rapn where n+1 is the number of RAP boards in the Sun. These files should correspond directly to RAP boards with physical board IDs ranging from 0 to n.
Reference: [Bec90] <author> James Beck. </author> <title> The Ring Array Processor (RAP): Hardware. </title> <type> Technical Report 90-048, </type> <institution> International Computer Science Institute, </institution> <month> September </month> <year> 1990. </year>
Reference-contexts: 1 Introduction This document describes the Ring Array Processor (RAP) software architecture design, implementation, and system evolution. A user's manual for the RAP is available [KB90], along with reports on the system architecture [Mor90] and hardware implementation <ref> [Bec90] </ref>. The Ring Array Processor [MBK + 90] [Mor90] is a multi-DSP system targeted for speech recognition using connectionist algorithms. A RAP system consists of 1 to 16 9U VME bus boards, each of which contains 4 Texas Instruments TMS320C30 DSP chips running at 16MHz [Tex88a]. <p> These routines provide all the RAP's synchronization primitives. The nodes may become unsynchronized during periods of no ring usage, but will re-synchronize upon initiation of ring usage. The RAP ring and the VME memory interfaces were implemented using Xilinx Programmable Gate Arrays <ref> [Bec90] </ref>. While the hardware is fixed, these parts provide flexible ring semantics in that the ring parts may be re-programmed to provide different operations. <p> A rapClient references nodes using virtual node numbers. A virtual node number ranges from 0 to 4 fi numBoards 1 and is translated by the rapServer to a hardware (board ID, node ID) tuple. There will be many boards with different hardware board ID and node ID values <ref> [Bec90] </ref>. With virtual node numbers, any configuration of hardware board ID and node ID RAP boards may be installed in any order, and the user will only see consecutive nodes numbers starting at zero. 4.2.1 C++ rapClient Classes The rapClient class hierarchy is shown in figure 2. <p> Since TMS320C30 on-chip memory is not addressable from the VME bus <ref> [Bec90] </ref>, the data must be copied from the stack to real TMS320C30 on-chip memory by the DSP boot code. rapNode also copies a fresh version of the .cinit section to RAP memory. * Keeps track of and uses node communication addresses for sending and receiving data transfer requests from the DSP.
Reference: [Ent] <institution> Entropic Research Laboratory, Inc., </institution> <address> 600 Pennsylvania Avenue, SE, Suite 202, Wash-ington, DC. </address> <note> Entropic Signal Processing System. </note>
Reference-contexts: An application can thus use the RAP as a computational server for an interactive graphics application (although no form of real-time is guaranteed) or for a UNIX filter (some waveform display programs like the Entropic Signal Processing System (ESPS) <ref> [Ent] </ref> use UNIX filters as a means of adding custom behavior). A rapClient references nodes using virtual node numbers. A virtual node number ranges from 0 to 4 fi numBoards 1 and is translated by the rapServer to a hardware (board ID, node ID) tuple.
Reference: [ES90] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: in a Sun VME bus backplane, a rapServer daemon process will wait for connections from 1 UNIX is a trademark of AT&T Bell Laboratories 2 3 rapClients and acknowledge interrupts from the RAP board). rapServer software runs both on VxWorks (written in C) and on UNIX workstations (written in C++ <ref> [ES90] </ref>, and C for the device driver). A user may write RAP code and run it on either type of rapServer without recompiling. A rapServer may directly manipulate a RAP whereas a rapClient only indirectly effects a RAP through its current rapServer.
Reference: [Heu] <editor> Heurikon Corperation, </editor> <address> 3201 Latham Drive Madison, WI 53517. </address> <note> Heurikon HK86/V20 Manual. </note>
Reference-contexts: read disk files from the kernel nor did it seem reasonable to keep a copy of the Xilinx program file in the kernel, all memory testing is deferred until user process time. 5 VxWorks/Heurikon Platform The initial RAP host consisted of the VxWorks operating system [Win] running on a Heurkon <ref> [Heu] </ref> MC68020 board. 5.1 RAP Server: VxWorks/Heurikon VxWorks, supplied by Wind River Systems, is a real-time operating system. It is real-time in that it uses priority based preemptive scheduling; the highest priority runnable process always runs.
Reference: [IEE85] <editor> IEEE standard for binary floating-point arithmetic. </editor> <booktitle> SIGPLAN Notices 22:2, </booktitle> <pages> 9-25, </pages> <year> 1985. </year> <month> 31 </month>
Reference-contexts: The rapServer will discard a RAP message if it does not strictly follow the format. * Floating-point number conversion: Floating-point numbers on the rapClient end of the connection must be in IEEE <ref> [IEE85] </ref> format, but on the server end must be in in TMS320C30 format.
Reference: [KB90] <author> Phil Kohn and Jeff Bilmes. </author> <title> The Ring Aray Processor (RAP): Software Users Manual. </title> <type> Technical Report 90-049, </type> <institution> International Computer Science Institute, </institution> <month> September </month> <year> 1990. </year>
Reference-contexts: 1 Introduction This document describes the Ring Array Processor (RAP) software architecture design, implementation, and system evolution. A user's manual for the RAP is available <ref> [KB90] </ref>, along with reports on the system architecture [Mor90] and hardware implementation [Bec90]. The Ring Array Processor [MBK + 90] [Mor90] is a multi-DSP system targeted for speech recognition using connectionist algorithms. <p> A typical command script for RAPMC follows: 0&gt; node * *&gt; 2 &gt; yo.out1 *&gt; 3 | egrep -i error *&gt; load yo *&gt; run foo *&gt; wait *&gt; 2examine i 0x2c *&gt; reset See <ref> [KB90] </ref> for a complete user's reference on RAPMC. 4.2.4 Mandelbrot: Graphical RAP Client The RAP Mandelbrot program is an example of using the RAP as a computational server for an interactive graphical UNIX application. <p> This minimizes the amount of time it takes to port an application to the RAP. A general description of the libraries follow. A complete list and description is given in <ref> [KB90] </ref>. * Entry to a RAP program starts in the standard C main () function. argv is obtained from the argument to the run protocol request. * A I/O library exists supporting common UNIX routines like open (), close (), lseek (), creat (), read (), write (), and cd (). <p> The one large forward skip per cycle is done with the post-displacement add and modify addressing mode with IR1. These addressing modes allow the output pointer to be changed without incurring any pipeline delays <ref> [KB90] </ref>. As an example, lets look at the inner loop for the case of 4 nodes. <p> This run-time "custom compilation" approach has the efficiency of the space intensive solution, but takes up the space of the compute intensive solution. 27 7 Existing Applications on the RAP mlp: mlp is a general program for running and training feed-forward back-propagation networks <ref> [KB90] </ref>. Many parameters exist (specified in a parameter file) which can control the topology of the desired network and adjust variables that affect the way the network operates. <p> A better solution would use MC68020 assembly language. TMS320C30 pipeline hazard avoidance: While coding for the TMS320C30, we needed to take care not to introduce unnecessary pipeline delays introduced by hazards in the DSP's instruction pipeline. See the guidelines outlined in <ref> [KB90] </ref>. 30 10 Conclusion Over the past several months, we have been running real problems on one, two, and three board RAP machines. The RAP machine with its software has provided an easy to use but very fast computational server.
Reference: [Koh] <author> Phil Kohn. </author> <title> CLONES: A Connectionist Layerd Object-oriented NEtwork Simulator. </title> <institution> International Computer Science Institute. </institution> <note> In preparation. </note>
Reference-contexts: Without the RAP, our problems would have taken intolerable amounts of time on the alternative machines we have available (like the Sun SPARCstation). Several programs have been ported from UNIX to the RAP, and we have plans for several more, including a general purpose object-oriented multi-layer perceptron simulation program <ref> [Koh] </ref> and a Sather language [Omo90] environment.
Reference: [MB90] <author> Nelson Morgan and Herve Bourlard. </author> <title> Continuous speech recognition using multilayer perceptrons with hidden markov models. </title> <booktitle> In Proc. International Conference on Acoustics, Speech, and Signal Processing, </booktitle> <pages> pages 413-416, </pages> <address> Albuquerque, NJ, </address> <year> 1990. </year>
Reference-contexts: The RAP was designed for a particular subset of layered artificial neural network algorithms. The initial use of the RAP is for the back-propagation algorithm [RHW86] used as part of a probability estimator for a Hidden Markov Model speech recognizer <ref> [MB90] </ref>. When this algorithm is partitioned in a particular way, a SIMD style of programming parallel machines is quite suitable. Additionally, for these algorithms shared memory between nodes is not necessary. The RAP has no shared memory between nodes but still supports a MIMD style of programming.
Reference: [MBK + 90] <author> Nelson Morgan, James Beck, Phil Kohn, Jeff Bilmes, Eric Allman, and Joachim Beer. </author> <title> The RAP: a Ring Array Processor for Layered Network Calculations. </title> <booktitle> In Proc. International Conference on Application Specific Array Processors, </booktitle> <pages> pages 296-308, </pages> <address> Princeton, NJ, 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: 1 Introduction This document describes the Ring Array Processor (RAP) software architecture design, implementation, and system evolution. A user's manual for the RAP is available [KB90], along with reports on the system architecture [Mor90] and hardware implementation [Bec90]. The Ring Array Processor <ref> [MBK + 90] </ref> [Mor90] is a multi-DSP system targeted for speech recognition using connectionist algorithms. A RAP system consists of 1 to 16 9U VME bus boards, each of which contains 4 Texas Instruments TMS320C30 DSP chips running at 16MHz [Tex88a].
Reference: [Mor90] <author> Nelson Morgan. </author> <title> The Ring Array Processor (RAP): Algorithms and Architecture. </title> <type> Technical Report 90-047, </type> <institution> International Computer Science Institute, </institution> <month> September </month> <year> 1990. </year>
Reference-contexts: 1 Introduction This document describes the Ring Array Processor (RAP) software architecture design, implementation, and system evolution. A user's manual for the RAP is available [KB90], along with reports on the system architecture <ref> [Mor90] </ref> and hardware implementation [Bec90]. The Ring Array Processor [MBK + 90] [Mor90] is a multi-DSP system targeted for speech recognition using connectionist algorithms. A RAP system consists of 1 to 16 9U VME bus boards, each of which contains 4 Texas Instruments TMS320C30 DSP chips running at 16MHz [Tex88a]. <p> 1 Introduction This document describes the Ring Array Processor (RAP) software architecture design, implementation, and system evolution. A user's manual for the RAP is available [KB90], along with reports on the system architecture <ref> [Mor90] </ref> and hardware implementation [Bec90]. The Ring Array Processor [MBK + 90] [Mor90] is a multi-DSP system targeted for speech recognition using connectionist algorithms. A RAP system consists of 1 to 16 9U VME bus boards, each of which contains 4 Texas Instruments TMS320C30 DSP chips running at 16MHz [Tex88a].
Reference: [Omo90] <author> Stephen M. Omohundro. </author> <title> The Sather Language. </title> <booktitle> International Computer Science Institute, </booktitle> <year> 1990. </year>
Reference-contexts: Several programs have been ported from UNIX to the RAP, and we have plans for several more, including a general purpose object-oriented multi-layer perceptron simulation program [Koh] and a Sather language <ref> [Omo90] </ref> environment. Additionally, the C++ object-oriented interface from UNIX workstations has proven to be an easy way to integrate the RAP into interactive graphics applications and other programs needing a computationally powerful server. 11 Acknowledgements The RAP Machine project is a group effort by the Realization group at ICSI.
Reference: [PGTK88] <author> D. Pomerleau, G. Gusciora, D. Touretzky, and H. Kung. </author> <title> Neural Network Simulation at Warp Speed: How we got 17 Million Connections per Second. </title> <booktitle> In IEEE International Conference on Neural Networks, </booktitle> <address> San Diego, CA, </address> <month> July </month> <year> 1988. </year>
Reference-contexts: All communication between the TMS320C30 processors (or nodes) of a RAP board and between boards in a RAP system is done through a unidirectional ring that is independent of the VME bus where the RAP resides. The RAP is similar to the WARP <ref> [PGTK88] </ref> and other systolic array processing machines but differs in the nature of the communication process.
Reference: [RHW86] <author> D.E. Rumelhart, G.E. Hinton, and R.J. Williams. </author> <title> Learning internal representations by error propagation. In Parallel Distributed Processing. Explorations in the Microstructure of Cognition, chapter 8. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1986. </year>
Reference-contexts: The RAP was designed for a particular subset of layered artificial neural network algorithms. The initial use of the RAP is for the back-propagation algorithm <ref> [RHW86] </ref> used as part of a probability estimator for a Hidden Markov Model speech recognizer [MB90]. When this algorithm is partitioned in a particular way, a SIMD style of programming parallel machines is quite suitable. Additionally, for these algorithms shared memory between nodes is not necessary. <p> In SIMD style, each node contains the same code. Small differences in control flow might occur based on the NODE ID, but each node performs essentially the same function. This style is ideal for the back-propagation artificial neural net algorithm <ref> [RHW86] </ref> which is currently being widely used. Additionally, a parallel SIMD Fourier Transform looks potentially viable using the provided distributed matrix routines. The Mandelbrot demonstration and dynamic programming application also use this style. <p> We will see how a typical problem, the forward propagation phase in the back-propagation algorithm <ref> [RHW86] </ref>, is parallelized and how data structures are distributed among the RAP nodes. As shown in figure 8, each node of the RAP must each have a copy of the input layer.
Reference: [Tex88a] <institution> Texas Instruments. </institution> <note> Third-Generation TMS320 User's Guide, 1988. Document Title: SPRU031. </note>
Reference-contexts: The Ring Array Processor [MBK + 90] [Mor90] is a multi-DSP system targeted for speech recognition using connectionist algorithms. A RAP system consists of 1 to 16 9U VME bus boards, each of which contains 4 Texas Instruments TMS320C30 DSP chips running at 16MHz <ref> [Tex88a] </ref>. Each RAP processing node consists of a TMS320C30 and 4MB or 16MB of dynamic RAM (with either 1 or 4 Mb chips respectively), 1MB of fast static RAM, and 8KB of very fast on-chip RAM. <p> Thus, we recommend using the Sun platform for any software development research involving the RAP. 6 TMS320C30 Platform The platform where RAP code runs is composed primarily of TMS320C30 DSP chips <ref> [Tex88a] </ref> [Tex88b] [Tex89]. In order to run a new application on the RAP, a user must first explicitly parallelize an algorithm for the RAP architecture. <p> Then, templates for the instructions in the loop are copied into the buffer. The number and order of these instructions depends on N NODE and NODE ID. The only instruction template that must be modified before being copied is the loop size field of the repeat block instruction <ref> [Tex88a] </ref>. The ring distribute () routine provides a good example of this technique. First, various TMS320C30 registers are setup as shown in figure 11. Then, the first element of the input partial vector is sent out to the ring and the first ring shift is performed into R0.
Reference: [Tex88b] <institution> Texas Instruments. TMS320C30 Assembly Language Tools, </institution> <year> 1988. </year> <note> Document Title: SPRU035. </note>
Reference-contexts: Thus, we recommend using the Sun platform for any software development research involving the RAP. 6 TMS320C30 Platform The platform where RAP code runs is composed primarily of TMS320C30 DSP chips [Tex88a] <ref> [Tex88b] </ref> [Tex89]. In order to run a new application on the RAP, a user must first explicitly parallelize an algorithm for the RAP architecture. <p> The Mandelbrot demonstration and dynamic programming application also use this style. A user wishing to write RAP code ultimately must be faced with one or more of the following three languages: * C with the UNIX style C environment. * TMS320C30 assembly language <ref> [Tex88b] </ref>. * C++ using AT&T Cfront 2.0. Most likely, the amount of assembly language programming will be minimal since many of the common functions of the ring are written very efficiently in assembly language.
Reference: [Tex89] <institution> Texas Instruments. </institution> <note> TMS320C30 C Compiler Reference Guide, 1989. Document Title: SPRU034A. </note>
Reference-contexts: Therefore, we wanted to apply the RAP to real problems soon. We did not want to spend much more than six months of software development time. * Use the C compiler for the TMS320C30 <ref> [Tex89] </ref> provided by Texas Instruments for as much of the system related code as possible without sacrificing computational efficiency. Use TMS320C30 assembly coding only where necessary. * Delay the implementation of ideas for more complex node communication (such as general message passing, RPC, RAP multi-programming, and mail boxes). <p> Thus, we recommend using the Sun platform for any software development research involving the RAP. 6 TMS320C30 Platform The platform where RAP code runs is composed primarily of TMS320C30 DSP chips [Tex88a] [Tex88b] <ref> [Tex89] </ref>. In order to run a new application on the RAP, a user must first explicitly parallelize an algorithm for the RAP architecture.
Reference: [Win] <institution> Wind River Systems, Inc., 1351 Ocean Ave. Emeryville, </institution> <address> CA 94608. VxWorks. </address> <month> 32 </month>
Reference-contexts: is no easy way to read disk files from the kernel nor did it seem reasonable to keep a copy of the Xilinx program file in the kernel, all memory testing is deferred until user process time. 5 VxWorks/Heurikon Platform The initial RAP host consisted of the VxWorks operating system <ref> [Win] </ref> running on a Heurkon [Heu] MC68020 board. 5.1 RAP Server: VxWorks/Heurikon VxWorks, supplied by Wind River Systems, is a real-time operating system. It is real-time in that it uses priority based preemptive scheduling; the highest priority runnable process always runs.
References-found: 18

