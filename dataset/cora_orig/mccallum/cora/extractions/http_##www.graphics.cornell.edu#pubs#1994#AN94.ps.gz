URL: http://www.graphics.cornell.edu/pubs/1994/AN94.ps.gz
Refering-URL: http://www.graphics.cornell.edu/pubs/1994/AN94.html
Root-URL: 
Title: Iso-Contour Volume Rendering  
Author: James Arvo Kevin Novins 
Address: 1  2  
Affiliation: Program of Computer Graphics Cornell University  Laboratoire iMAGIS Institut IMAG  
Abstract: In this paperwe presenta newapproachto volumerenderingin which curvesof constant intensity in image space,or iso-contours,are computed directly for eachview. The generatediso-contours can be used to drive various visualization and feature-detection algorithms. The approachimposes no restriction on the organization of the data points and can accommodatea large class of radially-symmetric filter functions. The technique works well for both perspective and orthographic viewing projections. Each iso-contour is defined by an ordinary differential equation, which is solved numerically using a predictor-corrector method. A key element of the algorithm is the use of image intensity gradients, which we compute by means of a closed-form expression that holds at every point on the image plane. A caching algorithm is described that dramatically accelerates the gradient computations on large datasets. The algorithm is demonstrated on emission-only datasets. We conclude by describing a number of possible enhancements. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ACTON, F. S. </author> <title> Numerical Methods that Work. </title> <publisher> Harper & Row, </publisher> <address> New York, </address> <year> 1970. </year>
Reference-contexts: Given any point on the image plane, the algorithm 1 Address:580 Engineering and Theory Center, Ithaca, New York 14853 USA 2 iMAGIS is a joint project between CNRS, INRIA, INPG, andUJF. Address: BP53, 38041 Grenoble Cedex 09 France uses a predictor-corrector method <ref> [1] </ref> to follow the contour along which the image intensity remains constant. A key element of the curve-following algorithm is analytic computation of image-space intensity gradients. <p> Graphs of the func tions f i , F i , and F 0 i for this filter are given in Figure 3. f i () F (s) F 0 (s) horizontal axis for all graphs is <ref> [0; 1] </ref>. The vertical axis of the graphs of f i () and F (s) is [0; 1] while that of F 0 (s) is [2; 0]. 2.2.2 Other Filters Aside from spherical-symmetry, the only requirement we place on our filter kernels that that they do not introduce value or derivative <p> func tions f i , F i , and F 0 i for this filter are given in Figure 3. f i () F (s) F 0 (s) horizontal axis for all graphs is <ref> [0; 1] </ref>. The vertical axis of the graphs of f i () and F (s) is [0; 1] while that of F 0 (s) is [2; 0]. 2.2.2 Other Filters Aside from spherical-symmetry, the only requirement we place on our filter kernels that that they do not introduce value or derivative discontinuities in the image plane. <p> These methods are well suited to iso-contour volume rendering because they require relatively few gradient evaluations, which are generally expensive to obtain in volume rendering applications. Our implementation, corresponds to an Euler predictor coupled with a Newton corrector. More sophisticated predictors may be used for greater efficiency <ref> [1, 2] </ref>. Several iso-contours that were identified in each of the test datasets are shown in Figures 5 and 6. In the pseudo-code below, we present the curve following algorithm. The function ComputeIntensity corresponds to equation (4) while ComputeGradient generates an image-space gradient using either equation (25) or equation (27). <p> Extremal values are stored as single-point contours in our data structures for use in subsequent rendering. Our current algorithm employs the gradient as part of a descent method to locate local extrema. Efficiency and accuracy can be enhanced by using other numeric techniques such as more sophisticated line searches <ref> [1] </ref>. Ultimately, second derivatives should be used to accelerate the convergence of the search algorithm, as simple descent methods converge slowly at extrema and perform poorly in flat regions. The magnitude of the image intensity gradient is often used as an edge strength operator in image processing applications. <p> There are many efficiency schemes that have yet to be investigated. The curve-following algorithm would benefit greatly from a higher-order predictor and corrector. A multi-step predictor, such as Milne's method <ref> [1, 2] </ref> could greatly reduce the number of corrector steps needed. A look-ahead cache could reduce the number of cache updates by using the current direction and curvature of the contour.
Reference: [2] <author> ARVO, J. </author> <title> The irradiance Jacobian for partially occluded polyhedral sources. </title> <booktitle> In Computer Graphics Proceedings (1994), Annual Conference Series, ACM SIGGRAPH. </booktitle>
Reference-contexts: A key element of the curve-following algorithm is analytic computation of image-space intensity gradients. In previous work, a similar approach has been applied to the direct computation of curves of constant irradiance for lighting calculations in polyhedral environments <ref> [2] </ref>. Intensity gradients may also be used to drive related image analysis tasks. We have implemented efficient algorithms for locating local extrema, and for semi-automatic edge detection based on the magnitude of the gradient. <p> The vertical axis of the graphs of f i () and F (s) is [0; 1] while that of F 0 (s) is <ref> [2; 0] </ref>. 2.2.2 Other Filters Aside from spherical-symmetry, the only requirement we place on our filter kernels that that they do not introduce value or derivative discontinuities in the image plane. <p> These methods are well suited to iso-contour volume rendering because they require relatively few gradient evaluations, which are generally expensive to obtain in volume rendering applications. Our implementation, corresponds to an Euler predictor coupled with a Newton corrector. More sophisticated predictors may be used for greater efficiency <ref> [1, 2] </ref>. Several iso-contours that were identified in each of the test datasets are shown in Figures 5 and 6. In the pseudo-code below, we present the curve following algorithm. The function ComputeIntensity corresponds to equation (4) while ComputeGradient generates an image-space gradient using either equation (25) or equation (27). <p> There are many efficiency schemes that have yet to be investigated. The curve-following algorithm would benefit greatly from a higher-order predictor and corrector. A multi-step predictor, such as Milne's method <ref> [1, 2] </ref> could greatly reduce the number of corrector steps needed. A look-ahead cache could reduce the number of cache updates by using the current direction and curvature of the contour.
Reference: [3] <author> ARVO, J., AND KIRK, D. </author> <title> Fast ray tracing by ray classification. </title> <booktitle> Computer Graphics 21, </booktitle> <month> 4 (July </month> <year> 1987). </year>
Reference-contexts: Top-down subdivision of the screen into regions can be done using a Warnock-style divide-and-conquer approach [16]. If used to lazily create candidate sets, this approach is essentially a 2D version of the ray-classification algorithm <ref> [3] </ref>. One disadvantage of the screen-space approach is that each data point typically belongs to multiple candidate sets. For small datasets, this replication poses no problem. For large datasets, however, it is often impractical to store all the candidate sets at once.
Reference: [4] <author> ARVO, J., AND KIRK, D. </author> <title> A survey of ray tracing acceleration techniques. In An Introduction to Ray Tracing, </title> <editor> A. S. Glassner, Ed. </editor> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1989, </year> <note> ch. 6. </note>
Reference-contexts: In contrast, object-space approaches classify the data points into 3D regions, which remain valid for all views. For a given ray, the candidate set of data points can be constructed using any ray tracing acceleration scheme for locating the regions pierced by the ray <ref> [4] </ref>; for instance, the data may be organized into an octree, kd-tree, or a uniform lattice. While the object-space organization need only be computed once, the candidate set must be created anew for each ray by tracing it through the volume.
Reference: [5] <author> DREBIN, R. A., CARPENTER, L., AND HANRAHAN, P. </author> <title> Volume rendering. </title> <booktitle> Computer Graphics 22, </booktitle> <month> 4 (Aug. </month> <year> 1988), </year> <pages> 65-74. </pages>
Reference-contexts: The magnitude of the image intensity gradient is often used as an edge strength operator in image processing applications. In volume rendering, a three-dimensional analog to this idea has been used to find surfaces in object-space <ref> [5, 9] </ref>. We make use of this by generating more contours in regions where the gradient is large, since these are likely to be important feature boundaries in image space. We have implemented a tool that allows the user to examine the gradient magnitude along lines in screen-space.
Reference: [6] <author> GUIBAS, L., AND STOLFI, J. </author> <title> Primitives for the manipulation of general subdivisions and the computation of voronoi diagrams. </title> <journal> ACM Transactions on Graphics 4, </journal> <month> 2 (April </month> <year> 1985), </year> <pages> 74-123. </pages>
Reference-contexts: While this method is very simple, the value dis-continuities can be visually distracting. Smoother renderings may iso-contours with constrained Delaunay triangulation. be produced by first meshing the iso-contour grid into triangles, then rendering the triangles by interpolating the vertex values. We use Delaunay triangulation <ref> [6] </ref> to create the triangle mesh from the set of points defining the contours. The segments along the contours are constrained to be edges of triangles, which guarantees that no triangle will cross an iso-contour.
Reference: [7] <author> HELMAN, J. L., AND HESSELINK, L. </author> <title> Visualizing vector field topology in fluid flows. </title> <journal> IEEE Computer Graphics and Applications 11, </journal> <month> 3 (May </month> <year> 1991). </year>
Reference-contexts: The contours thus depend on the viewing projection of the volume data as well as the line integrals used to map the 3D data to image intensities. A similar object space versus screen space distinction can be made between our approach and that of Helman and Hesselink <ref> [7] </ref>. Their approach generates contour lines and other indicators of vector field topology in object space, which are later projected.
Reference: [8] <author> KALRA, D., AND BARR, A. H. </author> <title> Guaranteed ray intersections with implicit surfaces. </title> <booktitle> Computer Graphics 23, </booktitle> <month> 3 (July </month> <year> 1989), </year> <pages> 297-306. </pages>
Reference-contexts: With appropriately chosen contour intensities, this would result in truly resolution-independent images. One way to obtaining this information is by means of interval arithmetic <ref> [8, 14] </ref>. As demonstrated by Snyder [14], interval arithmetic can also be used to produce a more robust curve follower, eliminating the need for the user-supplied step-size parameter that we currently employ. Appendix A: Computing the Distance Gradient To derive equations (8) and (9) we introduce two vector identities.
Reference: [9] <author> LEVOY, M. </author> <title> Display of surfaces from volume data. </title> <journal> IEEE Computer Graphics and Applications 8, </journal> <month> 3 (May </month> <year> 1988), </year> <pages> 29-37. </pages>
Reference-contexts: The magnitude of the image intensity gradient is often used as an edge strength operator in image processing applications. In volume rendering, a three-dimensional analog to this idea has been used to find surfaces in object-space <ref> [5, 9] </ref>. We make use of this by generating more contours in regions where the gradient is large, since these are likely to be important feature boundaries in image space. We have implemented a tool that allows the user to examine the gradient magnitude along lines in screen-space.
Reference: [10] <author> LISCHINSKI, D., TAMPIERI, F., AND GREENBERG, D. P. </author> <title> Combining hierarchical radiosity and discontinuity meshing. </title> <booktitle> In Computer Graphics Proceedings (1993), Annual Conference Series, ACM SIG-GRAPH, </booktitle> <pages> pp. 199-208. </pages>
Reference-contexts: We use Delaunay triangulation [6] to create the triangle mesh from the set of points defining the contours. The segments along the contours are constrained to be edges of triangles, which guarantees that no triangle will cross an iso-contour. This constraint method was used earlier by Lischinski et al. <ref> [10] </ref> in connection with discontinuity meshing for radiosity. An example of a mesh generated in this way is given in Figure 8. Images of the urchin and pelvis datasets made by linearly interpolating the triangular meshes are shown in Figures 9 and 10.
Reference: [11] <author> LORENSEN, W. E., AND CLINE, H. E. </author> <title> Marching cubes: A high resolution 3d surface construction algorithm. </title> <booktitle> Computer Graphics 21, </booktitle> <month> 4 (July </month> <year> 1987). </year>
Reference-contexts: Iso-Contours The iso-contour approach differs fundamentally from iso-surface extraction. Iso-surface techniques convert volume data into surface data, based on analyses of the volume data in local neighborhoods. These techniques often operate in a totally view-independent manner <ref> [11] </ref>. During rendering, it is the extracted surface rather than the original volume data that is illuminated and projected onto the image plane. In contrast, the iso-contour method operates directly in continuous image space, driven by features of the final 2D image rather than those of a 3D surface.
Reference: [12] <author> MALZBENDER, T. </author> <title> Fourier volume rendering. </title> <journal> ACM Transactions on Graphics 12, </journal> <month> 3 (July </month> <year> 1993). </year>
Reference-contexts: In this section we derive closed-form expressions for the intensity and intensity gradient at points in the image plane. Visualization techniques that make use of this information are presented in Section 3. We shall assume an emission-only projection model, such as employed in the Fourier volume rendering algorithms <ref> [12, 15] </ref>. This model allows the effect of each data point to be considered in isolation; filter kernel overlap and ordering are unimportant. This property allows us to compute both the intensity and the intensity gradient quite simply.
Reference: [13] <author> SHEROUSE, G. W., NOVINS, K. L., AND CHANEY, E. L. </author> <title> Computation of digitally reconstructed radiographs for use in radiotherapy treatment design. </title> <journal> International Journal of Radiation Oncology, Biology and Physics 18, </journal> <month> 3 (March </month> <year> 1990), </year> <pages> 651-658. </pages>
Reference-contexts: We note that emission line integrals can be easily re-interpreted as optical depth by applying an exponential function. Thus, all of our results also apply to absorption-only models, which can be used to compute simulated X-ray images that are useful in medical applications <ref> [13] </ref>. Such an exponential transformation affects the isoval-ues but not the shapes of the contours. To state the problem more formally, we introduce some nomenclature.
Reference: [14] <author> SNYDER, J. M. </author> <title> Interval analysis for computer graphics. </title> <booktitle> Computer Graphics 26, </booktitle> <month> 2 (July </month> <year> 1992), </year> <pages> 121-130. </pages>
Reference-contexts: With appropriately chosen contour intensities, this would result in truly resolution-independent images. One way to obtaining this information is by means of interval arithmetic <ref> [8, 14] </ref>. As demonstrated by Snyder [14], interval arithmetic can also be used to produce a more robust curve follower, eliminating the need for the user-supplied step-size parameter that we currently employ. Appendix A: Computing the Distance Gradient To derive equations (8) and (9) we introduce two vector identities. <p> With appropriately chosen contour intensities, this would result in truly resolution-independent images. One way to obtaining this information is by means of interval arithmetic [8, 14]. As demonstrated by Snyder <ref> [14] </ref>, interval arithmetic can also be used to produce a more robust curve follower, eliminating the need for the user-supplied step-size parameter that we currently employ. Appendix A: Computing the Distance Gradient To derive equations (8) and (9) we introduce two vector identities.
Reference: [15] <author> TOTSUKA, T., AND LEVOY, M. </author> <title> Frequency domain volume rendering. </title> <booktitle> Computer Graphics (August 1993), </booktitle> <pages> 271-278. </pages>
Reference-contexts: In this section we derive closed-form expressions for the intensity and intensity gradient at points in the image plane. Visualization techniques that make use of this information are presented in Section 3. We shall assume an emission-only projection model, such as employed in the Fourier volume rendering algorithms <ref> [12, 15] </ref>. This model allows the effect of each data point to be considered in isolation; filter kernel overlap and ordering are unimportant. This property allows us to compute both the intensity and the intensity gradient quite simply.
Reference: [16] <author> WARNOCK, J. E. </author> <title> A Hidden-Surface Algorithm for Computer Generated Half-tone Pictures. </title> <type> PhD thesis, </type> <institution> University of Utah, </institution> <year> 1969. </year> <month> TR-4-15. </month>
Reference-contexts: Aside from the seed point, each evaluation of and r occurs at a point very near the previous point. Top-down subdivision of the screen into regions can be done using a Warnock-style divide-and-conquer approach <ref> [16] </ref>. If used to lazily create candidate sets, this approach is essentially a 2D version of the ray-classification algorithm [3]. One disadvantage of the screen-space approach is that each data point typically belongs to multiple candidate sets. For small datasets, this replication poses no problem.
Reference: [17] <author> WESTOVER, L. </author> <title> Footprint evaluation for volume rendering. </title> <booktitle> Computer Graphics 24, </booktitle> <month> 4 (August </month> <year> 1990), </year> <pages> 367-376. </pages>
Reference-contexts: In these cases we may resort to precomputed tables and interpolation. For instance, both F (s) and F 0 (s) can be approximated to high accuracy using polynomial splines. This approach is similar in some respects to precomputing generic footprint tables for splat-ting <ref> [17] </ref>. 2.3 Image Space Gradients In equation (5), the intensity gradient is expressed in object space. In this section, we compute the 2D image-space gradient that is used by the applications of Section 3.
References-found: 17

