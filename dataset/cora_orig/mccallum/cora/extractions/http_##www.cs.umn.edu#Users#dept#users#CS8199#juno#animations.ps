URL: http://www.cs.umn.edu/Users/dept/users/CS8199/juno/animations.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/CS8199/juno/
Root-URL: http://www.cs.umn.edu
Email: fheydon,gnelsong@pa.dec.com  
Title: Constraint-Based Animations  
Author: Allan Heydon Greg Nelson 
Note: Copyright c fl1995, Digital Equipment Corporation. All right reserved.  
Address: 130 Lytton Ave., Palo Alto, CA 94301  
Affiliation: Digital Systems Research Center  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Marc H. Brown. Zeus: </author> <title> A system for algorithm animation. </title> <booktitle> In Proc. 1991 Workshop on Visual Languages, </booktitle> <month> October, </month> <year> 1991. </year> <note> Also available as Research Report 75, </note> <institution> Digital Systems Research Center, </institution> <month> Feb., </month> <year> 1992. </year>
Reference-contexts: Unlike one-way constraint solvers such as Delta-Blue [2] and Garnet [4], Juno-2 can solve cyclic constraint systems using numerical methods. Moreover, constraint definitions in Juno-2 are declarative, rather than imperative. We now develop the constraints for the tree skeleton. First, we relate the tree's angle factor ang 2 <ref> [1; 1] </ref> to the time value t 2 [0; 1]. <p> Moreover, constraint definitions in Juno-2 are declarative, rather than imperative. We now develop the constraints for the tree skeleton. First, we relate the tree's angle factor ang 2 [1; 1] to the time value t 2 <ref> [0; 1] </ref>. <p> Similarly, each part can be subdivided into a sequence of simpler steps. So far, we have produced animations of algorithms, of geometric theorems, and of dance steps. We have also used the Zeus algorithm animation system <ref> [1] </ref> to drive our animations. This allows us to implement the animated algorithm in another language like Modula-3 or C, and to use the constraint-based system to implement the algorithm's animated views. We were able to produce animations using Juno-2 with minimal modifications to the system.
Reference: [2] <author> Bjorn N. Freeman-Benson, John Maloney, and Alan Borning. </author> <title> An incremental constraint solver. </title> <journal> Communications of the ACM, v. </journal> <volume> 33, no. 1, </volume> <pages> pp. 5463, </pages> <month> Jan., </month> <year> 1990. </year>
Reference-contexts: In Juno-2, a constraint is a predicate on program variables. Solving a constraint is the action of finding values for the unknown variables that make the predicate true. Unlike one-way constraint solvers such as Delta-Blue <ref> [2] </ref> and Garnet [4], Juno-2 can solve cyclic constraint systems using numerical methods. Moreover, constraint definitions in Juno-2 are declarative, rather than imperative. We now develop the constraints for the tree skeleton.
Reference: [3] <author> Allan Heydon and Greg Nelson. </author> <title> The Juno-2 Constraint-Based Drawing Editor. </title> <institution> Research Report 131a, Digital Systems Research Center, </institution> <month> Dec., </month> <year> 1994. </year>
Reference-contexts: There are also operators for stretching, padding, reversing, and repeating animations, but we won't describe them here. We've used the Juno-2 constraint-based drawing editor <ref> [3] </ref> for our animation experiments. One of the novel things about Juno-2 is that it allows constraints to be defined in a powerful declarative extension language.
Reference: [4] <author> Brad A. Myers, Dario A. Giuse, Roger B. Dannen-berg, Brad Vander Zanden, David S. Kosbie, Ed Per-vin, Andrew Mickish, and Philippe Marchal. Garnet: </author> <title> comprehensive support for graphical, highly interactive user interfaces. </title> <journal> IEEE Computer, v. </journal> <volume> 23, no. 11, </volume> <pages> pp. 7185, </pages> <month> Nov., </month> <year> 1990. </year> <month> 2 </month>
Reference-contexts: In Juno-2, a constraint is a predicate on program variables. Solving a constraint is the action of finding values for the unknown variables that make the predicate true. Unlike one-way constraint solvers such as Delta-Blue [2] and Garnet <ref> [4] </ref>, Juno-2 can solve cyclic constraint systems using numerical methods. Moreover, constraint definitions in Juno-2 are declarative, rather than imperative. We now develop the constraints for the tree skeleton. First, we relate the tree's angle factor ang 2 [1; 1] to the time value t 2 [0; 1].
References-found: 4

