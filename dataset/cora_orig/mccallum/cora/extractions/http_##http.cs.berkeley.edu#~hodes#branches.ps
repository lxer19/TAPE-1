URL: http://http.cs.berkeley.edu/~hodes/branches.ps
Refering-URL: http://http.cs.berkeley.edu/~hodes/research.html
Root-URL: 
Email: fasah, hodesg@cs.berkeley.edu  
Title: Characterizing the Mispredicted Branches  
Author: Adam Sah and Todd Hodes 
Date: December 1, 1994  
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division Electrical Engineering and Computer Sciences University of California Berkeley  
Abstract: Studies of branch prediction have tended to emphasize aggregate measurement of prediction performance. Instead, we have taken the approach that there are likely to be a small number of branch addresses (sites) in the program causing the majority of all mispredictions. Using a graphical tool we developed for analyzing program traces on-the-fly, we present three interesting results, all based on measurement of benchmarks including a subset of the SPEC92 suite of programs: * More than 90% of all misses can be attributed to the top 0.5% of sites causing branch mispredictions. Additionally, the top fifty sites account for more than 86% all mispredictions. * For these popular misprediction sites, the distance in dynamic instructions until the next mispredicted site is quite large on average (more than 50-200 instructions), making exotic techniques such as guarded execution seem feasible. * Finally, we found that these sites exhibited larger than average miss rates, indicating that these sites are both executed many times and have high miss rates. Our study was limited to correlating, stateful hardware prediction schemes. 
Abstract-found: 1
Intro-found: 1
Reference: [DEC92] <institution> Digital Equipment Corp. Alpha Architecture Handbook. </institution> <year> 1992. </year>
Reference-contexts: Generally, this imposes penalties proportional to the depth of the fl supported in part by grant #NSF-IRI9107455 from the National Science Foundation and California MICRO fellowship #12629288. instruction pipeline. In the future, this penalty may worsen, both with increasing pipeline lengths <ref> [DEC92] </ref>, VLIW architectures, and superscalar architectures such as the IBM Power2 [WS94]. Part and parcel with this improvement is characterizing the reasons for mispredictions. Our hypothesis was that a few places in the code are responsible for the majority of mispredicted branches.
Reference: [HP94] <author> J. Hennessey and D. Patterson. </author> <title> Computer Architecture A Quantitative Approach. </title> <publisher> Morgan-Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: This has immediate implications. First, it disproves the unstated assumption that branch prediction behavior should be studied in the aggregate: like the cheater optimizations compiler writers use to make microbenchmarks run quickly <ref> [HP94] </ref>, accurate branch prediction can probably be achieved by tailoring algorithms to the popular sites in benchmark programs. <p> Please see Figure 1, below. We then implemented a tool for analyzing these traces. As you might imagine, the heart of this tool is a simulator of hardware branch prediction techniques; currently implemented are the (m,n) style predictors described in <ref> [HP94] </ref> and elsewhere. In these schemes, m refers to the number of bits of correlation to recently executed branches and n refers to the number of bits of "stickiness" which disallow the predictor from being too mercurial in the face of a periodic misprediction. <p> The notation (n; m) predictor means a hardware prediction scheme where n is the number of bits of correlation and m is the number of bits of state <ref> [HP94] </ref>. In the case of rounding, the method used was round-to-nearest with four significant digits. Thus, total error is less than 0.05%.
Reference: [Smi81] <author> J.E. Smith. </author> <title> A Study of Branch Prediction strategies, </title> <booktitle> Proc. 8th Symposium on Computer Architecture (May), Minneapolis, </booktitle> <pages> 135-48. </pages>
Reference: [SE94] <author> A. Srivastava and A. Eustace. </author> <title> ATOM: a system for building customized program analysis tools. </title> <booktitle> ACM SIGPLAN PLDI, </booktitle> <year> 1994, </year> <pages> 196-205. </pages>
Reference-contexts: A larger number of available instructions should allow for better scheduling of these instructions. In conducting this experiment, we were annoyed by the lack of tools for analyzing such traces, even as excellent tools for collecting them on particular architectures <ref> [SE94] </ref> are becoming available. We thus built an extensible tool for stuudying branch prediction behavior.
Reference: [PKR92] <author> S.-T. Pan, K. So and J.Rahme. </author> <title> Improving the accuracy of dynamic branch prediction using branch correlation. </title> <booktitle> ACM SIGARCH ASPLOS V, </booktitle> <year> 1992, </year> <pages> 76-84. </pages>
Reference-contexts: Our contribution in this regard is to verify the results for correlating branch predictors <ref> [PKR92] </ref> and for available misprediction windows (eg. for trace scheduling) [PFS93].
Reference: [PS93] <author> D.N. Pnevmatikatos and G.S. Sohi, </author> <title> Guarded Execution and Branch Prediction in Dynamic ILP Processors. </title> <institution> Univ. of Wisconsin-Madison Technical Report #1193. </institution> <month> November, </month> <year> 1993. </year>
Reference-contexts: In a sense then, correlation is good in terms of our metricit tends to concentrate the misses at a small subset of the branch sites. 5 Related Work There have been many studies of branch prediction behavior [Smi81][YP92], many as part of papers describing new algorithms <ref> [PS93] </ref>. Our contribution in this regard is to verify the results for correlating branch predictors [PKR92] and for available misprediction windows (eg. for trace scheduling) [PFS93].
Reference: [PFS93] <author> D.N. Pnevmatikatos, M. Franklin and G.S. Sohi, </author> <title> Control Flow Prediction for Dynamic ILP Processors. </title> <institution> Univ. of Wisconsin-Madison Unpublished? ftp://ftp.cs.wisc.edu:/sohi/micro26.Z </institution>
Reference-contexts: Our contribution in this regard is to verify the results for correlating branch predictors [PKR92] and for available misprediction windows (eg. for trace scheduling) <ref> [PFS93] </ref>. We have also further characterized miss sites as individual locations in the source programs, as opposed to the aggregate measurements traditionally taken. 6 Future Work As implied in various ways in this paper, there are lots of open questions still begging to be nailed down.
Reference: [WD94] <author> S. Weiss, and J.E. Smith. </author> <title> Inside IBM Power and PowerPC, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference: [YP92] <author> T. Yeh, and Y.N. Patt. </author> <title> A Comparison of Dynamic Branch Predictors that Use Two Levels of Branch History, </title> <booktitle> Proc. 20th Symposium on Computer Architecture (May), </booktitle> <address> San Diego, </address> <pages> 257-66. </pages>
References-found: 9

