URL: ftp://ftp.cs.washington.edu/pub/ai/tr92-05-01a.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/weld/pubs.html
Root-URL: 
Title: Partial-Order Planning: Evaluating Possible Efficiency Gains  
Author: Anthony Barrett Daniel S. Weld 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering 1 University of Washington,  
Abstract: Technical Report 92-05-01 Expanded Version February 19, 1993 Abstract Although most people believe that planners that delay step-ordering decisions as long as possible are more efficient than those that manipulate totally ordered sequences of actions, this intuition has received little formal justification or empirical validation. In this paper we do both, characterizing the types of domains that offer performance differentiation and the features that distinguish the relative overhead of three planning algorithms. As expected, the partial-order (nonlinear) planner often has an advantage when confronted with problems in which the specific order of the plan steps is critical. We argue that the observed performance differences are best understood with an extension of Korf's taxonomy of subgoal collections. Each planner quickly solved problems whose subgoals were independent or trivially serializable, but problems with laboriously serializable or nonserializable subgoals were intractable for all planners. Since different plan representations induce distinct search spaces, the subgoals for a given problem may be trivially serializable for one planner, laboriously serializable for another, and nonserializable for a third. We contend that the partial-order representation yields superior performance because it more frequently results in trivial serializability. 
Abstract-found: 1
Intro-found: 1
Reference: [ 1 ] <editor> J. Allen, J. Hendler, and A. Tate, editors. </editor> <booktitle> Readings in Planning. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <month> August </month> <year> 1990. </year>
Reference: [ 2 ] <author> A. Barrett, S. Soderland, and D. Weld. </author> <title> The Effect of Step-Order Representations on Planning. </title> <type> Technical Report 91-05-06, </type> <institution> University of Wash-ington, Department of Computer Science and Engineering, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: In our last experiment, we explored the interaction of different sets of subgoals. We discovered that even though two sets are independent with respect to each other, solving problems with both sets together is harder than solving each set separately. 37 5 Related Work In previous work <ref> [ 2, 30 ] </ref> we reported on preliminary experiments regarding the effect of step-order representations on planning. Besides an increased number of experiments, this paper analyzes the results in terms of an extended version of Korf's [ 17 ] taxonomy of subgoals and domain complexity.
Reference: [ 3 ] <author> T. Bylander. </author> <title> Complexity Results for Serial Decomposability. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <year> 1992. </year>
Reference-contexts: First, while it may be possible to determine if a set of subgoals is independent, little work has been done on the problem of determining that a set of subgoals is serializable and finding the order <ref> [ 3, 4, 15 ] </ref> . The obvious method for verifying the serializability of a set of subgoals is harder than simply solving the problem without subgoals.
Reference: [ 4 ] <author> Prasad Chalasani, Oren Etzioni, and John Mount. </author> <title> Integrating Efficient Model-Learning and Problem-Solving Algorithms in Permutation Environments. </title> <booktitle> In Proceedings of KR-91, </booktitle> <year> 1991. </year>
Reference-contexts: First, while it may be possible to determine if a set of subgoals is independent, little work has been done on the problem of determining that a set of subgoals is serializable and finding the order <ref> [ 3, 4, 15 ] </ref> . The obvious method for verifying the serializability of a set of subgoals is harder than simply solving the problem without subgoals.
Reference: [ 5 ] <author> D. Chapman. </author> <title> Planning for Conjunctive Goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 333-377, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Related and future work are discussed in sections 5 and 6 respectively. Finally, section 7 closes by stating our contributions. 5 2 Planners Before presenting our results, we summarize the algorithms and representations used. Each planner uses what is known as the STRIPS action representation <ref> [ 5 ] </ref> although it is in fact a simplification of that used by STRIPS [ 7, 11 ] . <p> For example, a step with action (puton ?x 1 ?y 1 ) can be constrained to clear block C by adding the codesignation constraint: (= ?z 1 C). Although the limitations of this action representation have been clearly documented <ref> [ 5 ] </ref> , we have succeeded in encoding a number of domains, including the blocks world, several artificial worlds, a discrete time version of Minton's scheduling world [ 21 ] , a simple transportation scheduling world, and an approximation of Stefik's MOLGEN molecular biology domain [ 31 ] . <p> Definition 3 A solution plan-state S; O; Bis a plan-state in which the preconditions of each step s i 2 S are all necessarily true in the input situation of s i . To make this definition precise, we recall the following terminology from Chapman's formalization of planning <ref> [ 5 ] </ref> . The input situation of a step is a set of propositions that are true immediately prior to the execution of that step [ 5 ] . <p> To make this definition precise, we recall the following terminology from Chapman's formalization of planning <ref> [ 5 ] </ref> . The input situation of a step is a set of propositions that are true immediately prior to the execution of that step [ 5 ] . <p> The first algorithm, called POCL and shown in figure 3, uses a partially ordered step representation for defining plans. POCL is a lifted version of McAllester's algorithm. The algorithm is loosely descended from TWEAK <ref> [ 5 ] </ref> and NONLIN [ 33 ] , but is conceptually simpler. Like some previous planners (e.g., [ 14, 33, 34, 35 ] ) but unlike TWEAK, McAllester's algorithm uses causal links to record the purpose for introducing a step into a plan and to protect that purpose. <p> P is necessarily true in the input situation of s 1 . Proving that a proposition P is necessarily true can be done using Chap-man's modal truth criterion <ref> [ 5 ] </ref> . Certain properties of our algorithms make this proof process easier. For example, in TOPI the operator selection step has the restriction that added steps cannot delete open goals.
Reference: [ 6 ] <author> E. Charniak and D. McDermott. </author> <title> Introduction to Artificial Intelligence. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1984. </year>
Reference-contexts: We also extend Korf's treatment of subgoals from search through states of the world to search through a space of incomplete plans, since this is the representation of choice in modern planners <ref> [ 6 ] </ref> . With this reformulation the computational advantages of the various algorithms becomes clearer: the natural subgoal decomposition of a problem might be trivially serializable for the search space of one planner, laboriously serializable for another, and nonserializable for a third (table 3 on page 37).
Reference: [ 7 ] <author> E. Davis. </author> <title> Representations of Commonsense Knowledge. </title> <publisher> Morgan Kauf-mann Publishers, Inc., </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference-contexts: Finally, section 7 closes by stating our contributions. 5 2 Planners Before presenting our results, we summarize the algorithms and representations used. Each planner uses what is known as the STRIPS action representation [ 5 ] although it is in fact a simplification of that used by STRIPS <ref> [ 7, 11 ] </ref> . Each operator has sets of preconditions, an add list and a delete list (the members of which are propositional schemata that are function-free atomic) and a set of codesignation (and noncodesignation) constraints.
Reference: [ 8 ] <author> M. Drummond and K. Currie. </author> <title> Goal Ordering in Partially Ordered Plans. </title> <booktitle> In Proceedings IJCAI-89, </booktitle> <pages> pages 960-965, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: In this paper we focus on the former and hold the latter fixed; we evaluate the relative efficiency of total-order and partial order representations in planners that focus on a single subgoal before shifting to the next goal. 3 To alleviate confusion, we follow the advice of <ref> [ 8 ] </ref> and avoid the adjective "linear" in the rest of this paper. By holding the subgoal elaboration strategy fixed, we present an objective evaluation of early ordering commitment on planning efficiency.
Reference: [ 9 ] <author> Oren Etzioni. </author> <title> Static: A problem-space compiler for prodigy. </title> <booktitle> In the Proceedings of the Ninth National Conference on Artificial Intelligence., </booktitle> <year> 1991. </year>
Reference-contexts: In fact, much of the work on abstraction in planning can be viewed as doing exactly this. Perhaps it might be possible to generalize the techniques in ALPINE [ 15, 16 ] or the subgoal interaction analysis of STATIC <ref> [ 9 ] </ref> in this direction. A major weakness in our work is its dependence on the STRIPS representation.
Reference: [ 10 ] <author> Oren Etzioni and Ruth Etzioni. </author> <title> Statistical methods for analyzing speedup learning experiments. </title> <booktitle> Machine Learning, </booktitle> <year> 1992. </year> <note> Technical note, to appear. </note>
Reference: [ 11 ] <author> R. Fikes and N. Nilsson. </author> <title> STRIPS: A New Approach to the Application of Theorem Proving to Problem Solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2(3/4), </volume> <year> 1971. </year>
Reference-contexts: We believe that the partial-order representation yields superior performance because it more frequently produces trivial serializability. 1.1 Algorithms & Methodology We performed this evaluation by implementing three planners that share key subroutines but differ in important ways. All planners operate on action schemata that conform to the STRIPS representation <ref> [ 11 ] </ref> . <p> Finally, section 7 closes by stating our contributions. 5 2 Planners Before presenting our results, we summarize the algorithms and representations used. Each planner uses what is known as the STRIPS action representation [ 5 ] although it is in fact a simplification of that used by STRIPS <ref> [ 7, 11 ] </ref> . Each operator has sets of preconditions, an add list and a delete list (the members of which are propositional schemata that are function-free atomic) and a set of codesignation (and noncodesignation) constraints.
Reference: [ 12 ] <author> M. Garey and D. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: The most costly step in TOPI is the termination detection step because finding a set of variable bindings to make G a subset of I takes exponential time. We can prove that this problem is NP-hard by reducing the 3-Dimensional Matching problem <ref> [ 12 ] </ref> , which is NP-complete, to it. The step by step per-plan-state complexity comparison is summarized in table 1.
Reference: [ 13 ] <author> D. Joslin and J. Roach. </author> <title> A Theoretical Analysis of Conjunctive-Goal Problems. </title> <journal> Artificial Intelligence, </journal> <volume> 41 </volume> <pages> 97-106, </pages> <address> 1989/90. </address> <month> 49 </month>
Reference-contexts: A STRIPS planning problem is a triple O; ; in which O denotes a set of STRIPS operators, denotes a set of initial propositions, and denotes a set of goal propositions. Previous analyses of planning problems <ref> [ 13, 17 ] </ref> viewed planning as a search through a graph of world-states | i.e., a graph in which nodes are labeled with a set of propositions that specify what is true in that state of the world. <p> The number of ordering constraints O can be O (jSj 2 ). For TOPI the sets I and G are the initial conditions and open goals respectively. 13 3 Analysis of Domains In the view of <ref> [ 13 ] </ref> and [ 17 ] planning is modeled as search through a directed graph of world-states, and the difficulty of a problem is measured in terms of how hard it is to break it up into subproblems and use these subproblems to guide the search for a final solution. <p> We start by discussing subgoals and how they decompose world-state searches and plan-state searches. Next we review and extend Korf's subgoal hierarchy. Finally we define example domains and show how the classification of subgoals varies from planner to planner. 3.1 Subgoals Like <ref> [ 13 ] </ref> and [ 17 ] we are concerned with analyzing the effect of using various subgoals on the speed of planning algorithms. In the simplest case a subgoal is an intermediate state on the path from initial state to goal. <p> It is frequently awkward to refer to subgoals explicitly as sets of states. A common technique used in <ref> [ 13 ] </ref> and [ 17 ] is to use elements of to specify sub-goals. A world-state is in a subgoal if the subgoal's associated goal proposition is true in the world-state. <p> Besides an increased number of experiments, this paper analyzes the results in terms of an extended version of Korf's [ 17 ] taxonomy of subgoals and domain complexity. Joslin and Roach <ref> [ 13 ] </ref> extend Korf's analysis of nonserializable subgoals 12 with a topological analysis of subgoals in terms of their connected components. <p> For example, it would be interesting to consider iterative sampling techniques described in [ 18, 23 ] . On a more basic level, it is unclear that our definition of subgoals for plan-state searches is the best one. Our work, as well as <ref> [ 13 ] </ref> and [ 17 ] , defines subgoals using elements of , but such need not be the case. Our causal link algorithms focused on reaching subgoals, as we defined them, by using a FILO strategy for selecting open goals to resolve.
Reference: [ 14 ] <author> S. Kambhampati and J. Hendler. </author> <title> A Validation Structure Based Theory of Plan Modification and Reuse. </title> <journal> Artificial Intelligence, </journal> <volume> 55 </volume> <pages> 193-258, </pages> <year> 1992. </year>
Reference-contexts: POCL is a lifted version of McAllester's algorithm. The algorithm is loosely descended from TWEAK [ 5 ] and NONLIN [ 33 ] , but is conceptually simpler. Like some previous planners (e.g., <ref> [ 14, 33, 34, 35 ] </ref> ) but unlike TWEAK, McAllester's algorithm uses causal links to record the purpose for introducing a step into a plan and to protect that purpose.
Reference: [ 15 ] <author> C. Knoblock. </author> <title> Learning Abstraction Hierarchies for Problem Solving. </title> <booktitle> In Proceedings of AAAI-90, </booktitle> <pages> pages 923-928, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: First, while it may be possible to determine if a set of subgoals is independent, little work has been done on the problem of determining that a set of subgoals is serializable and finding the order <ref> [ 3, 4, 15 ] </ref> . The obvious method for verifying the serializability of a set of subgoals is harder than simply solving the problem without subgoals. <p> In fact, much of the work on abstraction in planning can be viewed as doing exactly this. Perhaps it might be possible to generalize the techniques in ALPINE <ref> [ 15, 16 ] </ref> or the subgoal interaction analysis of STATIC [ 9 ] in this direction. A major weakness in our work is its dependence on the STRIPS representation.
Reference: [ 16 ] <author> C. Knoblock. </author> <title> Automatically Generating Abstractions for Problem Solving. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1991. </year> <note> Available as technical report CMU-CS-91-120. </note>
Reference-contexts: In fact, much of the work on abstraction in planning can be viewed as doing exactly this. Perhaps it might be possible to generalize the techniques in ALPINE <ref> [ 15, 16 ] </ref> or the subgoal interaction analysis of STATIC [ 9 ] in this direction. A major weakness in our work is its dependence on the STRIPS representation.
Reference: [ 17 ] <author> R. Korf. </author> <title> Planning as Search: A Quantitative Approach. </title> <journal> Artificial Intelligence, </journal> <volume> 33(1), </volume> <month> September </month> <year> 1987. </year>
Reference-contexts: We argue that the observed performance differences are best understood with an extension of Korf's taxonomy of subgoal collections <ref> [ 17 ] </ref> . <p> We link the contributions by analyzing the experimental results in terms of our augmented taxonomy. Korf's <ref> [ 17 ] </ref> insightful definition of independent, serializable, and nonserial-izable collections of subgoals forms the foundation of our work. <p> The bulk of the paper is our analysis of the performance of 4 the planners on a number of different domains. We start, in section 3, by extending Korf's <ref> [ 17 ] </ref> characterization of problem domains, and then we perform a sequence of experiments that isolate the domain features that give the partial-order planner a major advantage over total-order approaches. Section 4 summarizes our results and proves several generalizations. <p> The most important such subroutine is the variable binding and unification code that handles all of the variable constraints. 2.1 Planning as Search Like <ref> [ 17 ] </ref> , we view planning as a search problem. In order to discuss our planners, we need to define a planning problem, and how it can be considered as a search. <p> A STRIPS planning problem is a triple O; ; in which O denotes a set of STRIPS operators, denotes a set of initial propositions, and denotes a set of goal propositions. Previous analyses of planning problems <ref> [ 13, 17 ] </ref> viewed planning as a search through a graph of world-states | i.e., a graph in which nodes are labeled with a set of propositions that specify what is true in that state of the world. <p> The number of ordering constraints O can be O (jSj 2 ). For TOPI the sets I and G are the initial conditions and open goals respectively. 13 3 Analysis of Domains In the view of [ 13 ] and <ref> [ 17 ] </ref> planning is modeled as search through a directed graph of world-states, and the difficulty of a problem is measured in terms of how hard it is to break it up into subproblems and use these subproblems to guide the search for a final solution. <p> We start by discussing subgoals and how they decompose world-state searches and plan-state searches. Next we review and extend Korf's subgoal hierarchy. Finally we define example domains and show how the classification of subgoals varies from planner to planner. 3.1 Subgoals Like [ 13 ] and <ref> [ 17 ] </ref> we are concerned with analyzing the effect of using various subgoals on the speed of planning algorithms. In the simplest case a subgoal is an intermediate state on the path from initial state to goal. <p> Therefore, we formally define a subgoal to be a set of states, with the interpretation that a state is an element of a subgoal set if and only if it has properties that satisfy the subgoal <ref> [ 17, page 68 ] </ref> . It is frequently awkward to refer to subgoals explicitly as sets of states. A common technique used in [ 13 ] and [ 17 ] is to use elements of to specify sub-goals. <p> It is frequently awkward to refer to subgoals explicitly as sets of states. A common technique used in [ 13 ] and <ref> [ 17 ] </ref> is to use elements of to specify sub-goals. A world-state is in a subgoal if the subgoal's associated goal proposition is true in the world-state. This supposes that world-states with more elements of are closer to a goal world-state than those with less elements of . <p> each operator only changes the distance to a single subgoal. : : : One of the impor tant properties of independent subgoals, which is clear from the definition, is that an optimal global solution can be achieved by simply concatenating together optimal solutions to the individual subproblems in any order <ref> [ 17, page 71 ] </ref> . Solving a single independent subgoal might be nontrivial, but the complexity of problems with independent subgoals increases only linearly with the number of subgoals. Korf defines serializable subgoals, those that do interact in a limited manner, with the following statements. <p> We define a set of subgoals to be serializable if there exists an ordering among the subgoals such that the subgoals can always be solved sequentially without ever violating a previously solved subgoal in the order <ref> [ 17, page 71 ] </ref> . Thus, serializability means that for every state in the intersection of the first n subgoals there exists a path to a state in the n + 1st subgoal that lies wholly within the intersection. <p> Such a collection of subgoals will be called non-serializable <ref> [ 17, pages 72-73 ] </ref> . Since nonserializable subgoals may need to be violated and reestablished many times, they offer little guidance to a planner: solution time will likely rise superlinearly with the number of subgoals. This completes our review of Korf's subgoal hierarchy. <p> If U is nonserializable, then V may be independent, serializable, or non serializable. In some sense, the only surprising aspect of this result is that a subset of a set of serializable subgoals may be nonserializable. In fact, the proof of this is due to an observation of Korf's <ref> [ 17 ] </ref> regarding the Sussman Anomaly. <p> Besides an increased number of experiments, this paper analyzes the results in terms of an extended version of Korf's <ref> [ 17 ] </ref> taxonomy of subgoals and domain complexity. Joslin and Roach [ 13 ] extend Korf's analysis of nonserializable subgoals 12 with a topological analysis of subgoals in terms of their connected components. <p> For example, it would be interesting to consider iterative sampling techniques described in [ 18, 23 ] . On a more basic level, it is unclear that our definition of subgoals for plan-state searches is the best one. Our work, as well as [ 13 ] and <ref> [ 17 ] </ref> , defines subgoals using elements of , but such need not be the case. Our causal link algorithms focused on reaching subgoals, as we defined them, by using a FILO strategy for selecting open goals to resolve. <p> Our paper makes several major contributions: * We demonstrate that Korf's <ref> [ 17 ] </ref> subgoal taxonomy fails to differentiate between classes that have vastly different computational properties. In particular, we argue that some serializable sets are easy to solve while others are difficult.
Reference: [ 18 ] <author> P. Langley. </author> <title> Systematic and Nonsystematic Search Strategies. </title> <booktitle> In Proceedings of the First International Conference on AI Planning Systems, </booktitle> <pages> pages 145-152, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Another research direction that begs for attention is consideration of other subgoal focusing mechanisms. In this paper we assumed that each subgoal was completely solved before attempting the next, but there are numerous other control strategies. For example, it would be interesting to consider iterative sampling techniques described in <ref> [ 18, 23 ] </ref> . On a more basic level, it is unclear that our definition of subgoals for plan-state searches is the best one.
Reference: [ 19 ] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic Nonlinear Planning. </title> <booktitle> In Proceedings of AAAI-91, </booktitle> <pages> pages 634-639, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: All planners operate on action schemata that conform to the STRIPS representation [ 11 ] . The planner that turned out to perform the best is a lifted version of McAllester and Rosenblitt's <ref> [ 19 ] </ref> propositional planner; since it represents plans with a partial order and uses tagged pointers, called "causal links," to mark protections, we call it POCL. 4 The second planner represents plans as totally ordered sequences of steps; since this planner also uses causal links to determine appropriate locations for <p> In order to discuss our planners, we need to define a planning problem, and how it can be considered as a search. From <ref> [ 19 ] </ref> we adopt: Definition 1 A STRIPS operator consists of an operator name plus a precondition list, an add list and a delete list. The elements of the precondition, add, and delete lists are all function-free, atomic expressions. <p> Each of these algorithms is sound and complete and each exhibits what McAllester terms the "systematic" property <ref> [ 19 ] </ref> 6 . Loosely speaking, 6 We note that the utility of systematicity has not been clearly documented. <p> Just as there are other strategies for selecting open goals, there are other ways to define a subgoal. For example, one selection strategy prioritizes open goals based on predicate type and leads to a form of abstraction <ref> [ 19 ] </ref> . A plan-state is in a subgoal 39 when it contains an abstract solution to a problem, and the next less abstract solution is the next subgoal.
Reference: [ 20 ] <author> D. McDermott. </author> <title> Regression Planning. </title> <journal> International Journal of Intelligent Systems, </journal> <volume> 6 </volume> <pages> 357-416, </pages> <year> 1991. </year>
Reference-contexts: All planners treat variables the same way in that they use least-commitment, constraint-posting techniques when reasoning about the arguments to the operators, and all planners operate via backward chaining. To ensure fairness, 5 Symbols that start with question marks denote variables (which are also known as formal objects <ref> [ 20 ] </ref> ). 6 the planners were implemented in Common Lisp using a shared set of data structures and subroutines.
Reference: [ 21 ] <author> S. Minton. </author> <title> Quantitative Results Concerning the Utility of Explanation-Based Learning. </title> <booktitle> In Proceedings of AAAI-88, </booktitle> <pages> pages 564-569, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Although the limitations of this action representation have been clearly documented [ 5 ] , we have succeeded in encoding a number of domains, including the blocks world, several artificial worlds, a discrete time version of Minton's scheduling world <ref> [ 21 ] </ref> , a simple transportation scheduling world, and an approximation of Stefik's MOLGEN molecular biology domain [ 31 ] . The planners each require three arguments: a set of operators, a set of initial conditions, and a set of goal conditions; they return sequences of steps. <p> We plan to use UCPOP [ 27 ] to explore whether partial-order representations are useful given more expressive domains, such as ADL [ 26 ] , which include conditional effects and universally quantified effects. Also using UCPOP, we hope to replicate the experiments of Minton <ref> [ 21 ] </ref> to see if explanation based learning can speed up a partial-order planner as much as it has PRODIGY [ 24 ] . All of the experiments reported in this paper challenged planners only with solvable problems.
Reference: [ 22 ] <author> S. Minton, J. Bresina, and M. Drummond. </author> <title> Commitment Strategies in Planning: A Comparative Analysis. </title> <booktitle> In Proceedings of IJCAI-91, </booktitle> <pages> pages 259-265, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Backtrack point: Each insertion point between R's steps must be considered for completeness. 7. Recursive invocation: TOCL (S 0 ; O 0 ; B 0 ,G',L'). POCL generates the partially ordered plan. This similarity lets us compare the two algorithms using techniques developed in <ref> [ 22 ] </ref> . The third algorithm, TOPI, only adds steps to the beginning of the plan (i.e., immediately after s 0 ). <p> Besides our earlier papers, there has been little other work comparing the performance of partial-order and total-order planners. A notable exception is the excellent work of Minton et al. <ref> [ 22 ] </ref> . This paper considers the to and ua algorithms which resemble propositional versions of our TOCL and POCL algorithms with one difference: unlike our planners, to and ua are not systematic.
Reference: [ 23 ] <author> S. Minton, M. Drummond, J. Bresina, and A. Phillips. </author> <title> Total Order vs. Partial Order Planning: Factors Influencing Performance. </title> <booktitle> In Proceedings of KR-92, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: In a recent extension to their earlier work, Minton et al. <ref> [ 23 ] </ref> consider the effects of different search strategies and the distribution of solutions on performance. 12 Unfortunately, Joslin and Roach did not phrase their work in these terms, appearing unaware of Korf's work. 38 6 Future Work There are several other limitations to this work that point to future <p> Another research direction that begs for attention is consideration of other subgoal focusing mechanisms. In this paper we assumed that each subgoal was completely solved before attempting the next, but there are numerous other control strategies. For example, it would be interesting to consider iterative sampling techniques described in <ref> [ 18, 23 ] </ref> . On a more basic level, it is unclear that our definition of subgoals for plan-state searches is the best one.
Reference: [ 24 ] <author> Steven Minton, Jaime G. Carbonell, Craig A. Knoblock, Daniel R. Kuokka, Oren Etzioni, and Yolanda Gil. </author> <title> Explanation-based learning: A problem-solving perspective. </title> <journal> Artificial Intelligence, </journal> <volume> 40 </volume> <pages> 63-118, </pages> <year> 1989. </year> <note> Available as technical report CMU-CS-89-103. </note>
Reference-contexts: Also using UCPOP, we hope to replicate the experiments of Minton [ 21 ] to see if explanation based learning can speed up a partial-order planner as much as it has PRODIGY <ref> [ 24 ] </ref> . All of the experiments reported in this paper challenged planners only with solvable problems. A natural extension would be to investigate the performance of the algorithms when confronted with impossible goals. Our intuition is that the advantage of POCL would be amplified.
Reference: [ 25 ] <author> N. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Tioga Publishing Company, </publisher> <address> Palo Alto, CA, </address> <year> 1980. </year>
Reference-contexts: This similarity lets us compare the two algorithms using techniques developed in [ 22 ] . The third algorithm, TOPI, only adds steps to the beginning of the plan (i.e., immediately after s 0 ). Thus it can be seen that TOPI is equivalent to the regression planner of <ref> [ 25, section 7.4 ] </ref> which performs backward-chaining search through the space of lifted world states. TOPI works by defining the the goal conditions as planning subgoals and building a plan backwards (figure 5). It considers all steps that could possibly add a subgoal without deleting any other unsolved subgoal. <p> This last algorithm is radically different from the previous two: although it uses plan-states, it structures the search space in a way that makes it equivalent to a backward chaining world-state search such as the regression planner of <ref> [ 25 ] </ref> . The performance of each algorithm is determined by the number of plan-states that it visits to find a solution and the complexity of visiting each plan-state. We first compared the three algorithms in terms of the complexity of visiting a plan-state.
Reference: [ 26 ] <author> E.P.D. Pednault. </author> <title> ADL: Exploring the Middle Ground between STRIPS and the Situation Calculus. </title> <booktitle> In Proceedings Knowledge Representation Conf.,, </booktitle> <year> 1989. </year> <month> 50 </month>
Reference-contexts: A major weakness in our work is its dependence on the STRIPS representation. We plan to use UCPOP [ 27 ] to explore whether partial-order representations are useful given more expressive domains, such as ADL <ref> [ 26 ] </ref> , which include conditional effects and universally quantified effects. Also using UCPOP, we hope to replicate the experiments of Minton [ 21 ] to see if explanation based learning can speed up a partial-order planner as much as it has PRODIGY [ 24 ] .
Reference: [ 27 ] <author> J.S. Penberthy and D. Weld. UCPOP: </author> <title> A Sound, Complete, Partial Order Planner for ADL. </title> <booktitle> In Proceedings of KR-92, </booktitle> <pages> pages 103-114, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Perhaps it might be possible to generalize the techniques in ALPINE [ 15, 16 ] or the subgoal interaction analysis of STATIC [ 9 ] in this direction. A major weakness in our work is its dependence on the STRIPS representation. We plan to use UCPOP <ref> [ 27 ] </ref> to explore whether partial-order representations are useful given more expressive domains, such as ADL [ 26 ] , which include conditional effects and universally quantified effects.
Reference: [ 28 ] <author> S. Russell. </author> <title> Efficient Memory-Bounded Search Algorithms. </title> <booktitle> In Proceedings of the Tenth European Conference on Artificial Intelligence. </booktitle> <publisher> Wiley, </publisher> <year> 1992. </year>
Reference-contexts: unbolting the lugs, etc., eventually restoring all tools to the trunk) whose optimal solution required 19 steps and took six hours to solve (e.g., required exploring 3 million partial plans) even when using extremely efficient search techniques (in fact, Russell invented the problem to test his bounded-memory IE search technique <ref> [ 28 ] </ref> ). We took as our challenge, the problem of rendering this problem tractable. Our theory predicted that the eight subgoals of the problem were nonse-rializable for TOPI yet laboriously serializable for POCL and TOCL.
Reference: [ 29 ] <author> E. Sacerdoti. </author> <title> The Nonlinear Nature of Plans. </title> <booktitle> In Proceedings of IJCAI-75, </booktitle> <pages> pages 206-214, </pages> <year> 1975. </year>
Reference-contexts: 1 Introduction Since the early work on NOAH <ref> [ 29 ] </ref> , the common wisdom of the planning community has been that nonlinear planners are more efficient than linear algorithms, but this intuition has never been convincingly demonstrated. Furthermore, the very term "linear planner" is often confusingly given two different meanings: 1. <p> The solution to the planning problem consists of the actions associated with the edges of this path. An example of such a search space appears in figure 2. One of the major contributions of Sacerdoti's NOAH <ref> [ 29 ] </ref> was a conceptual shift: instead of viewing planning as search through a space of world-states, NOAH searched through a space of (possibly incomplete) plan-states. Our planners perform similar searches. <p> The challenge is finding a serialization ordering. A partial order planner's ability to delay step ordering decisions often increases the number of serializable orderings, sometimes quite drastically (i.e., trivial serializability). 34 4 Discussion One of the major advances of Sacerdoti's NOAH <ref> [ 29 ] </ref> was the shift from searching through a space of world-states to searching through a space of partially ordered, plan-states. This paper analyzed that contribution by comparing the performance of three different planning algorithms on a variety of domains.
Reference: [ 30 ] <author> S. Soderland and D. Weld. </author> <title> Evaluating Nonlinear Planning. </title> <type> Technical Report 91-02-03, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> January </month> <year> 1991. </year>
Reference-contexts: In our last experiment, we explored the interaction of different sets of subgoals. We discovered that even though two sets are independent with respect to each other, solving problems with both sets together is harder than solving each set separately. 37 5 Related Work In previous work <ref> [ 2, 30 ] </ref> we reported on preliminary experiments regarding the effect of step-order representations on planning. Besides an increased number of experiments, this paper analyzes the results in terms of an extended version of Korf's [ 17 ] taxonomy of subgoals and domain complexity.
Reference: [ 31 ] <author> M. Stefik. </author> <title> Planning with Constraints (MOLGEN: Part 1). </title> <journal> Artificial Intelligence, </journal> <volume> 14(2), </volume> <year> 1981. </year>
Reference-contexts: To assure a fair comparison, the three planners share data structures and utility routines to the maximum extent possible. We tested the set of planners on large sets of randomly generated problems from both classical (e.g., the blocks world, transportation planning, and a reconstruction of Stefik's <ref> [ 31 ] </ref> MOLGEN molecular biology domain) and artificial domains. In this paper we limit our report almost exclusively to artificial domains. While the "real" domains were a rich source of intuitions, the difficulty of decoupling different causes of combinatorial explosion made them uninformative testbeds for empirical experiments. <p> have been clearly documented [ 5 ] , we have succeeded in encoding a number of domains, including the blocks world, several artificial worlds, a discrete time version of Minton's scheduling world [ 21 ] , a simple transportation scheduling world, and an approximation of Stefik's MOLGEN molecular biology domain <ref> [ 31 ] </ref> . The planners each require three arguments: a set of operators, a set of initial conditions, and a set of goal conditions; they return sequences of steps.
Reference: [ 32 ] <author> G. Sussman. </author> <title> A Computer Model of Skill Acquisition. </title> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1975. </year>
Reference-contexts: Each planner performed well when dealing with problems whose subgoals were independent or trivially 2 In fact, Sussman's original definition of the "linear assumption" is satisfied only by a planner that assumes that subgoals can be solved independently and in any order <ref> [ 32, p. 58 ] </ref> , but few consider this a viable strategy. 3 Note that it is crucial to distinguish between a planner's plan-time and execution-time commitments.
Reference: [ 33 ] <author> A. Tate. </author> <title> Generating Project Networks. </title> <booktitle> In Proceedings of IJCAI-77, </booktitle> <pages> pages 888-893, </pages> <year> 1977. </year>
Reference-contexts: The first algorithm, called POCL and shown in figure 3, uses a partially ordered step representation for defining plans. POCL is a lifted version of McAllester's algorithm. The algorithm is loosely descended from TWEAK [ 5 ] and NONLIN <ref> [ 33 ] </ref> , but is conceptually simpler. Like some previous planners (e.g., [ 14, 33, 34, 35 ] ) but unlike TWEAK, McAllester's algorithm uses causal links to record the purpose for introducing a step into a plan and to protect that purpose. <p> POCL is a lifted version of McAllester's algorithm. The algorithm is loosely descended from TWEAK [ 5 ] and NONLIN [ 33 ] , but is conceptually simpler. Like some previous planners (e.g., <ref> [ 14, 33, 34, 35 ] </ref> ) but unlike TWEAK, McAllester's algorithm uses causal links to record the purpose for introducing a step into a plan and to protect that purpose.
Reference: [ 34 ] <author> D. Warren. WARPLAN: </author> <title> A System for Generating Plans. Memo No. </title> <type> 76, </type> <institution> Univerity of Edinburgh, Department of Computational Logic, </institution> <year> 1974. </year>
Reference-contexts: POCL is a lifted version of McAllester's algorithm. The algorithm is loosely descended from TWEAK [ 5 ] and NONLIN [ 33 ] , but is conceptually simpler. Like some previous planners (e.g., <ref> [ 14, 33, 34, 35 ] </ref> ) but unlike TWEAK, McAllester's algorithm uses causal links to record the purpose for introducing a step into a plan and to protect that purpose.
Reference: [ 35 ] <author> Q. Yang and J. Tenenberg. ABTWEAK: </author> <title> Abstracting a Nonlinear, Least-Commitment Planner. </title> <booktitle> In Proceedings of AAAI-90, </booktitle> <pages> pages 204-209, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: POCL is a lifted version of McAllester's algorithm. The algorithm is loosely descended from TWEAK [ 5 ] and NONLIN [ 33 ] , but is conceptually simpler. Like some previous planners (e.g., <ref> [ 14, 33, 34, 35 ] </ref> ) but unlike TWEAK, McAllester's algorithm uses causal links to record the purpose for introducing a step into a plan and to protect that purpose.
References-found: 35

