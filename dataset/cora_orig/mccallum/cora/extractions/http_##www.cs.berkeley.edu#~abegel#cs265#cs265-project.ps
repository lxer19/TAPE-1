URL: http://www.cs.berkeley.edu/~abegel/cs265/cs265-project.ps
Refering-URL: http://www.cs.berkeley.edu/~abegel/
Root-URL: 
Email: abegel@cs.berkeley.edu  
Title: Applying General Compiler Optimizations to a Packet Filter Generator  
Author: Andrew Begel 
Address: Berkeley, CA 94720  
Affiliation: Dept. of Computer Science UC Berkeley  
Abstract: This paper describes the architecture of the BSD Packet Filter package, which consists of a code generator, optimizer and virtual machine. The ability to do per-packet statistical sampling was added to the package. In addition, several modifications were made to the optimizer to increase the quality of the code output. While these modifications dont produce drastic improvements in the resulting code, they do illustrate the advantages of using an SSA-like representation for the intermediate byte code. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M.L. Bailey, B. Gopal, M.A. Pagels, L.L. Peterson, and P. Sarkar. PathFinder: </author> <title> A pattern based packet classifier. </title> <booktitle> In Proceedings of the First Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 115-123, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Mach Packet Filter [6] was an extension to BPF that incorporated caching and the ability to handle fragmented packets. It claimed to be over four times faster than BPF due to its caching of filter results across network ports. Pathfinder <ref> [1] </ref> implements a declarative language for filter specification. Each predicate is a tuple of &lt;offset, length, mask, value&gt; which may be joined together. Pathfinder takes all of the predicates and unifies them into a prefix tree of patterns.
Reference: [2] <author> J. Cocke, and J.T. Schwartz. </author> <title> Programming Languages and Their Compilers. </title> <note> Preliminary Notes. 2nd revised version. </note> <institution> Courant Institute of Mathematical Sciences, </institution> <year> 1970. </year>
Reference-contexts: Finally, it performs several control-flow optimizations on the resulting information until no more changes are detected. 5 These control flow optimizations consist of constant propagation, partial evaluation, common subexpression elimination, dead store elimination, and conditional elimination. The optimizer uses Cocke and Schwartz <ref> [2] </ref> value numbering to keep track of values stored in the registers. Each block keeps track of the values that are used inside. The control flow is used to flow values between basic blocks.
Reference: [3] <author> D.R. Engler, and M.F. Kaashoek. DPF: </author> <title> Fast, flexible demultiplexing using dynamic code generation. </title> <booktitle> In ACM Communication Architectures, Protocols, and Applications. SIGCOMM 1996. </booktitle>
Reference-contexts: Pathfinder also employs caching and supports packet fragmentation. It performs about twice as fast as MPF in its software-based implementation. DPF <ref> [3] </ref>, from Engler and Kaashoek at MIT, is the latest work on packet filters. It aggressively optimizes packet filters using dynamic code generation and gets about 13-26 times the performance of Pathfinder.
Reference: [4] <author> S. McCanne and V. Jacobson. </author> <title> The BSD packet filter: A new architecture for user-level packet capture. </title> <booktitle> In USENIX Technical Conference Proceedings, </booktitle> <pages> pages 259-269, </pages> <address> San Diego, CA, </address> <booktitle> Winter 1993. USENIX. </booktitle>
Reference-contexts: This paper discusses the BPF code generation and optimization architecture. It adds a new sampling feature to BPF and rearchitects the optimization infrastructure to achieve greater levels of code elimination and simplification. 2. Related Work The BSD Packet Filter (BPF) package <ref> [4] </ref>, created by S. McCanne and V. Jacobson at LBL in 1992, introduced a virtual machine for running safe packet filters. Using a simple predicate language, users could specify properties of packet headers, such as TCP and SRC beech.cs.berkeley.edu, which would be compiled into instructions for the VM.
Reference: [5] <author> J.C. Mogul, R.F. Rashid, and M.J. Accetta. </author> <title> The packet filter: An efficient mechanism for user-level network code. </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 39-51, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: The VM ensured safety by prohibiting backward branches, checking forward branches to see whether they stayed within the code block, and checking for division by 0 and writes to read-only registers. BPF was based on work done by Mogul, Rashid and Accetta on kernel-level packet filters <ref> [5] </ref>. The packet filter used a stack-based virtual machine and was general enough to be programmed for new packet types as they became available. Since then, there have been several new packet filters that improve upon BPF, each one better than the last.
Reference: [6] <author> M. Yahara, B. Bershad, C. Maeda, and E. Moss. </author> <title> Efficient packet demultiplexing for multiple endpoints and large messages. </title> <booktitle> In Proceedings of the Winter 1994 USENIX Conference. </booktitle> <year> 1994. </year>
Reference-contexts: The packet filter used a stack-based virtual machine and was general enough to be programmed for new packet types as they became available. Since then, there have been several new packet filters that improve upon BPF, each one better than the last. Mach Packet Filter <ref> [6] </ref> was an extension to BPF that incorporated caching and the ability to handle fragmented packets. It claimed to be over four times faster than BPF due to its caching of filter results across network ports. Pathfinder [1] implements a declarative language for filter specification.
References-found: 6

