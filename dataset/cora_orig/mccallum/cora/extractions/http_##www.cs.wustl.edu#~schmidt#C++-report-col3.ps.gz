URL: http://www.cs.wustl.edu/~schmidt/C++-report-col3.ps.gz
Refering-URL: http://www.acl.lanl.gov/CORBA/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: schmidt@cs.wustl.edu vinoski@ch.hp.com  
Title: Object Interconnections Comparing Alternative Client-side Distributed Programming Techniques (Column 3)  
Author: Douglas C. Schmidt Steve Vinoski 
Note: This column appeared in the May 1995 issue of the SIGS C++ Report magazine.  
Address: St. Louis, MO 63130 Chelmsford, MA 01824  
Affiliation: Department of Computer Science Hewlett-Packard Company Washington University,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. J. Leffler, M. McKusick, M. Karels, and J. Quarterman, </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year> <month> 8 </month>
Reference-contexts: Each solution illustrates various tradeoffs between extensibility, robustness, portability, and efficiency. 2 The Socket Client Solution Distributed applications have traditionally been written using network programming interfaces such as sockets or TLI. Sockets were developed in BSD UNIX to interface with the TCP/IP protocol suite <ref> [1] </ref>. The Transport Layer Interface (TLI) is another network programming interface available on System V UNIX platforms. Our primary focus in this article is on sockets since it is widely available on many platforms, including most variants of UNIX, Windows, Windows NT, OS/2, Mac OS, etc.
Reference: [2] <author> W. R. Stevens, </author> <title> UNIX Network Programming, First Edition. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: The standard socket interface is defined using C functions. It contains several dozen routines that perform tasks such as locating address information for network services, establish 1 ing and terminating connections, and sending and receiving data. In-depth coverage of sockets and TLI appears in <ref> [2] </ref>. 2.1 Socket/C Code The following code illustrates the relevant steps required to program the client-side of the stock quote program using sockets and C.
Reference: [3] <author> D. C. Schmidt, </author> <title> IPC SAP: An Object-Oriented Interface to Interprocess Communication Services, </title> <journal> C++ Report, </journal> <volume> vol. 4, </volume> <month> November/December </month> <year> 1992. </year>
Reference-contexts: The C++ wrappers shown below are part of the IPC SAP interprocess communication class library described in <ref> [3] </ref>.
Reference: [4] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: It is a factory <ref> [4] </ref> that connects to the server located at the INET Addr address and produces a SOCK Stream object when the connection completes. The SOCK Stream object performs 3 the message exchange for the stock query transaction and handles short-writes automatically.
Reference: [5] <author> J. Dilley, OODCE: </author> <title> A C++ Framework for the OSF Distributed Computing Environment, </title> <booktitle> in Proceedings of the Winter Usenix Conference, USENIX Association, </booktitle> <month> January </month> <year> 1995. </year>
Reference-contexts: In the following section, we motivate, describe, and evaluate such a DOC solution based upon CORBA. In subsequent columns, we'll examine solutions based on other DOC tools and environments (such as OODCE <ref> [5] </ref> and OLE/COM [6]). 4 The CORBA Client Solution 4.1 Overview of CORBA As described in [7], an Object Request Broker (ORB) is a system that supports distributed object computing in accordance with the OMG CORBA specification (currently CORBA 1.2 [8], though major pieces of CORBA 2.0 have already been completed).
Reference: [6] <institution> Microsoft Press, Redmond, WA, </institution> <note> Object Linking and Embedding Version 2 (OLE2) Programmer's Reference, Volumes 1 and 2, </note> <year> 1993. </year>
Reference-contexts: In the following section, we motivate, describe, and evaluate such a DOC solution based upon CORBA. In subsequent columns, we'll examine solutions based on other DOC tools and environments (such as OODCE [5] and OLE/COM <ref> [6] </ref>). 4 The CORBA Client Solution 4.1 Overview of CORBA As described in [7], an Object Request Broker (ORB) is a system that supports distributed object computing in accordance with the OMG CORBA specification (currently CORBA 1.2 [8], though major pieces of CORBA 2.0 have already been completed).
Reference: [7] <author> S. Vinoski, </author> <title> Distributed Object Computing with CORBA, </title> <journal> C++ Report, </journal> <volume> vol. 5, </volume> <month> July/August </month> <year> 1993. </year>
Reference-contexts: In the following section, we motivate, describe, and evaluate such a DOC solution based upon CORBA. In subsequent columns, we'll examine solutions based on other DOC tools and environments (such as OODCE [5] and OLE/COM [6]). 4 The CORBA Client Solution 4.1 Overview of CORBA As described in <ref> [7] </ref>, an Object Request Broker (ORB) is a system that supports distributed object computing in accordance with the OMG CORBA specification (currently CORBA 1.2 [8], though major pieces of CORBA 2.0 have already been completed).
Reference: [8] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 1.2 ed., </editor> <year> 1993. </year>
Reference-contexts: based on other DOC tools and environments (such as OODCE [5] and OLE/COM [6]). 4 The CORBA Client Solution 4.1 Overview of CORBA As described in [7], an Object Request Broker (ORB) is a system that supports distributed object computing in accordance with the OMG CORBA specification (currently CORBA 1.2 <ref> [8] </ref>, though major pieces of CORBA 2.0 have already been completed). CORBA delegates much of the tedious and error-prone complexity associated with developing distributed applications to its reusable infrastructure. Application developers are then freed to focus their knowledge of the domain upon the problem at hand.
Reference: [9] <institution> Object Management Group, </institution> <note> Universal Networked Objects, TC Document 95-3-xx ed., </note> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: As with any other software tool, the cost of learning the new technology must be amortized over time and/or successive projects. * Interoperability and Portability: Interoperability between different ORBs has traditionally been a major problem with CORBA. This problem was solved recently when the OMG approved an Interoperability protocol <ref> [9] </ref>. However, few if any ORBs actually implement the Interoperability protocol at this time. Therefore, interoperability will remain a real problem for CORBA-based applications in the near future. Likewise, portability of applications from ORB to ORB will be limited until conformance becomes more commonplace.
Reference: [10] <author> B. Meyer, </author> <title> Object Oriented Software Construction. </title> <address> Engle-wood Cliffs, NJ: </address> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: operation could simply be added to a new derived interface: interface Stat_Quoter : Quoter // a Stat_Quoter IS-A Quoter - void get_stats (in string stock_name, out double percent_change, out long trading_volume) raises (Invalid_Stock); -; CORBA's support for interface inheritance enables it to satisfy the open/closed principle of OO library design <ref> [10] </ref>. By using inheritance, existing clients may continue using the old interface (i.e., existing library components are closed, which ensures backwards compatibility). Conversely, clients requiring the new features and services use the new one (i.e., the library components are open to future extensions).
Reference: [11] <author> A. Stepanov and M. Lee, </author> <title> The Standard Template Library, </title> <type> Tech. Rep. </type> <institution> HPL-94-34, Hewlett-Packard Laboratories, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: Relying on an ORB in this manner is not unlike relying on a good general-purpose library (such as as the C++ Standard Templates Library <ref> [11] </ref>) for non-distributed C++ applications. The ORB allows the application developer to focus mainly on the application and not worry nearly as much about the infrastructure required to support it. Note that CORBA is only one of several key technologies that are emerging to support DOC.
References-found: 11

