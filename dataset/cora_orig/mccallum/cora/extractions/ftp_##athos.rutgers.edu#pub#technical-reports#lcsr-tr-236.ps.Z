URL: ftp://athos.rutgers.edu/pub/technical-reports/lcsr-tr-236.ps.Z
Refering-URL: http://www.csd.uu.se/~thomasl/wpo/oo-compilation-papers.html
Root-URL: 
Email: email: fpande,ryderg@cs.rutgers.edu  
Title: Static Type Determination and Aliasing for C  
Author: Hemant D. Pande Barbara G. Ryder 
Keyword: C Interprocedural static analysis, Type determination, Aliasing, Virtual func tions, Pointers.  
Web: LCSR-TR-236  
Address: Piscataway, NJ 08855  
Affiliation: Department of Computer Science Rutgers University Hill Center, Busch Campus  
Abstract: Static type determination involves compile time calculation of the type of object a pointer may point to, at a particular program point during some execution. We show that the problem of precise interprocedural type determination is NP-hard in the presence of inheritance, virtual functions and pointers. We highlight the significance of type determination in improving code efficiency and precision of other static analyses. First we present a safe, approximate type determination algorithm for C ++ programs with single level pointers, using the conditional analysis technique [LR91]. Then we present a generalization of this approach to simultaneously solve the aliasing and type determination problems for C ++ programs with multiple levels of pointer dereferencing, and explain why this is a more complicated analysis. 
Abstract-found: 1
Intro-found: 1
Reference: [APS93] <author> Ole Agesen, Jens Palsberg, and Michael Schwartzbach. </author> <title> Type inference of SELF: Analysis of objects with dynamic and multiple inheritance. </title> <booktitle> In ECOOP '93 Conference Proceedings, </booktitle> <pages> pages 247-267, </pages> <month> July </month> <year> 1993. </year>
Reference: [BCC + 94] <author> M. Burke, P. Carini, J-D. Choi and M. Hind. </author> <title> Flow-insensitive interprocedural alias analysis in the presence of pointers. </title> <booktitle> In Proceedings of the Seventh International Workshop on Languages and Compilers for Parallel Computing, </booktitle> <month> August </month> <year> 19994. </year>
Reference: [Bur90] <author> M. Burke. </author> <title> An interval-based approach to exhaustive and incremental interprocedural data flow analysis. </title> <journal> In ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(3) </volume> <pages> 341-395, </pages> <month> July </month> <year> 1990. </year>
Reference: [CBC93] <author> J.-D. Choi, M. Burke, and P. Carini. </author> <title> Efficient flow-sensitive interprocedural computation of pointer-induced aliases and side effects. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1993. </year>
Reference: [CG94] <author> B. Calder and D. Grunwald. </author> <title> Reducing indirect function call overhead in C ++ programs. </title> <booktitle> In Proceedings of the Twenty First Annual ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1994. </year>
Reference: [CK88] <author> K. Cooper and K. Kennedy. </author> <title> Interprocedural side-effect analysis in linear time. </title> <booktitle> In Proceedings of the SIGPLAN '88 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 57-66, </pages> <month> June </month> <year> 1988. </year>
Reference: [CK89] <author> K. Cooper and K. Kennedy. </author> <title> Fast interprocedural alias analysis. </title> <booktitle> In Conference Record of the Sixteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 49-59, </pages> <month> January </month> <year> 1989. </year> <month> 26 </month>
Reference: [CU89] <author> C. Chambers and D. Ungar. </author> <title> Customization: optimizing compiler technology for SELF, a dynamically--typed object-oriented programming language. </title> <booktitle> In Proceedings of the SIGPLAN '89 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 146-160, </pages> <month> June </month> <year> 1989. </year>
Reference: [CU90] <author> C. Chambers and D. Ungar. </author> <title> Iterative type analysis and extended message splitting: optimizing dynamically-typed object-oriented programs. </title> <booktitle> In Proceedings of the SIGPLAN '90 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 150-164, </pages> <month> June </month> <year> 1990. </year>
Reference: [Cal88] <author> D. Callahan. </author> <title> The program summary graph and flow-sensitive interprocedural data flow analysis. </title> <booktitle> In Proceedings of the SIGPLAN '88 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 47-56, </pages> <month> June </month> <year> 1988. </year>
Reference: [MGH94] <author> M. Emami, R. Ghiya and L. Hendren. </author> <title> Context-sensitive interprocedural points-to analysis in the presence of function pointers. </title> <booktitle> In Proceedings of the SIGPLAN '94 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 242-256, </pages> <month> June </month> <year> 1994. </year>
Reference: [FW85] <author> P. G. Frankl and E. J. Weyuker. </author> <title> A data flow testing tool. </title> <booktitle> In Proceedings of IEEE Softfair II, </booktitle> <month> December </month> <year> 1985. </year>
Reference: [HCU91] <author> U. Holzle, C. Chambers and D. Ungar. </author> <title> Optimizing dynamically-typed object-oriented languages with polymorphic inline caches. </title> <booktitle> In Proceedings of the European Conference on Object Oriented Programming, </booktitle> <month> July </month> <year> 1991. </year>
Reference: [HCU94] <author> U. Holzle, C. Chambers and D. Ungar. </author> <title> Optimizing dynamically-dispatched calls with tun-time type feedback. </title> <booktitle> In Proceedings of the SIGPLAN '94 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 326-336, </pages> <month> June </month> <year> 1994. </year>
Reference: [HK92] <author> Mary Hall and Ken Kennedy. </author> <title> Efficient call graph analysis. </title> <journal> ACM Letters on Programming Languages and Systems, </journal> <volume> Vol. 1, No. 3, </volume> <month> September </month> <year> 1992. </year>
Reference: [HRB90] <author> S. Horwitz, T. Reps, and D. Binkley. </author> <title> Interprocedural slicing using dependence graphs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(1) </volume> <pages> 26-60, </pages> <month> January </month> <year> 1990. </year>
Reference: [HS89] <author> M. J. Harrold and M. L. Soffa. </author> <title> Interprocedural data flow testing. </title> <booktitle> In Proceedings of the Third Testing, Analysis and Verification Symposium, </booktitle> <pages> pages 158-167, </pages> <month> December </month> <year> 1989. </year>
Reference: [HS94] <author> M. J. Harrold and M. L. Soffa. </author> <title> Efficient computation of interprocedural definition-use chains. </title> <journal> In ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(2) </volume> <pages> 175-204, </pages> <month> March </month> <year> 1994. </year>
Reference: [LR91] <author> W. Landi and B. G. Ryder. </author> <title> Pointer-induced aliasing: A problem classification. </title> <booktitle> In Conference Record of the Eighteenth Annual ACM symposium on Principles of Programming Languages, </booktitle> <pages> pages 93-103, </pages> <month> January </month> <year> 1991. </year>
Reference: [LR92] <author> W. Landi and B. G. Ryder. </author> <title> A safe approximate algorithm for interprocedural pointer aliasing. </title> <booktitle> In Proceedings of the SIGPLAN '92 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 235-248, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: We also initialize the worklist to EMPTY. The time complexity of the initialization of the entire points-to predicate may appear as proportional to the number of predicates possible, but we have a constant time initialization by following a lazy approach <ref> [LR92] </ref>. The first entries in the worklist come from the introduction phase during which we make-true certain predicates at a node by looking at the local information available in the node itself. Figure 3 lists the nodes examined in the introduction phase and their associated actions. <p> This interleaved calculation is facilitated by two new predicates: may-hold (n; AAP T; &lt;a; b&gt;) and points-to (n; AAP T; &lt;q ) C&gt;). The former is related to the may-hold in <ref> [LR92, PRL91, PLR94] </ref>. The latter is a variant of our points-to predicate from the previous section. <p> == true) o If we required information about pointer-type pairs at node, it would also be easily computable given the solution for points-to: pointer-type-info (n) = n fi fi 9AAP T (points-to (n; AAP T; &lt;p ) C&gt;) == true) o As a significant departure from the aliasing algorithm in <ref> [LR92] </ref>, we do not dereference a pointer until we can (statically) determine that it points to an object. <p> P T ) imposing AAPT at entry through either type-bind (call; entry; P T ) or alias-bind (call; entry; P T ), we make-true (points-to (return; AAP T 0 ; pointer-type)). 5.3 Sources of Approximation The aliasing calculation of our algorithm is based on the algorithm by Landi and Ryder <ref> [LR92] </ref> and inherits the approximations made by them. During calculation of points-to predicates, we make the same approximations as listed in Section 4.5. <p> We are using the MasterCraft C ++ system of Tata Consultancy Services as the front end C ++ parser for our implementation. Our aliasing and type determination algorithm is similar in design to the aliasing algorithm from Landi and Ryder <ref> [LR92] </ref>; our prototype reuses some code from their implementation with suitable modifications. We are currently working on improving the execution efficiency of the implementation as well as lifting the restriction to non-recursive structures so that the implementation can accept a broader range of C ++ programs.
Reference: [LRZ93] <author> W. Landi, B. G. Ryder, and S. Zhang. </author> <title> Interprocedural modification side effect analysis with pointer aliasing. </title> <booktitle> In Proceedings of the SIGPLAN '93 Conference on Programming Language Design and Implementation, </booktitle> <month> June </month> <year> 1993. </year>
Reference: [Lak93] <author> Arun Lakhotia. </author> <title> Constructing call multigraphs using dependence graphs. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1993. </year>
Reference: [Lan92] <author> W. Landi. </author> <title> Undecidability of static analysis. </title> <journal> ACM Letters on Programming Languages and Systems, </journal> <volume> 1(4) </volume> <pages> 323-337, </pages> <month> December </month> <year> 1992. </year>
Reference: [Lar92] <author> J. M. Larcheveque. </author> <title> Interprocedural type propagation for object-oriented languages. </title> <booktitle> In proceedings of the Fourth European Symposium on Programming (ESOP '92), </booktitle> <month> February </month> <year> 1992. </year>
Reference: [MLR + 93] <author> T. J. Marlowe, W. A. Landi, B. G. Ryder, J. Choi, M. Burke, and P. Carini. </author> <title> Pointer-induce aliasing: A clarification. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 28(9), </volume> <month> September </month> <year> 1993. </year>
Reference: [Mey81] <author> E. M. Myers. </author> <title> A precise interprocedural data flow algorithm. </title> <booktitle> In Conference Record of the Eighth Annual ACM Symposium on the Principles of Programming Languages, </booktitle> <pages> pages 219-230, </pages> <month> January </month> <year> 1981. </year> <month> 27 </month>
Reference: [OW91] <author> T. J. Ostrand and E. Weyuker. </author> <title> Data flow based test adequacy analysis for languages with pointers. </title> <booktitle> In Proceedings of the 1991 Symposium on Software Testing, Analysis and Verification (TAV4), </booktitle> <month> October </month> <year> 1991. </year>
Reference: [PLR94] <author> H. D. Pande, W. Landi and B. G. Ryder. </author> <title> Interprocedural def-use associations for C systems with single level pointers. </title> <journal> In IEEE Transactions on Software Engineering, </journal> <volume> SE-20(5):385-403, </volume> <month> May </month> <year> 1994. </year>
Reference-contexts: This interleaved calculation is facilitated by two new predicates: may-hold (n; AAP T; &lt;a; b&gt;) and points-to (n; AAP T; &lt;q ) C&gt;). The former is related to the may-hold in <ref> [LR92, PRL91, PLR94] </ref>. The latter is a variant of our points-to predicate from the previous section.
Reference: [PR94] <author> H. D. Pande and B. G. Ryder. </author> <booktitle> Static type determination for C ++ . In Proceedings of USENIX Sixth C ++ Technical Conference, </booktitle> <pages> pages 85-97, </pages> <month> April </month> <year> 1994. </year>
Reference: [PRL91] <author> H. D. Pande, B. G. Ryder and W. Landi. </author> <title> Interprocedural def-use associations in C programs. </title> <booktitle> In Proceedings of the 1991 Symposium on Software Testing, Analysis and Verification (TAV4), </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: This interleaved calculation is facilitated by two new predicates: may-hold (n; AAP T; &lt;a; b&gt;) and points-to (n; AAP T; &lt;q ) C&gt;). The former is related to the may-hold in <ref> [LR92, PRL91, PLR94] </ref>. The latter is a variant of our points-to predicate from the previous section.
Reference: [PS91] <author> Jens Palsberg and Michael Schwartzbach. </author> <title> Object-oriented type inference. </title> <booktitle> In Proceedings of Conference on Object-Oriented Programming Systems, Languages, and Applications (OOPSLA), </booktitle> <pages> pages 146-161, </pages> <month> October </month> <year> 1991. </year>
Reference: [Pan94] <author> Hemant D. Pande. </author> <title> Interprocedural compile time analysis of C and C ++ systems. </title> <type> PhD Thesis, </type> <institution> Department of Computer Science, Rutgers University, </institution> <note> in preparation, </note> <year> 1994. </year>
Reference-contexts: The visibility of automatic variables across function boundaries complicates the analysis 16 significantly. We leave out the visibility issue from the following description. The details of the complete algorithm appear in <ref> [Pan94] </ref>. 5.1 Parameter Bindings Before providing the algorithm details, we describe some auxiliary functions to capture type and aliasing effects on the entry of the invoked function by the types and aliases present at the invocation site. bind0 (call,entry) : This function calculates the aliasing effects from call to entry without
Reference: [Par92] <author> Ramesh Parameswaran. </author> <title> Interprocedural alias and type analysis for pointers. </title> <type> Masters Thesis, </type> <institution> Department of Computer Science, University of Wisconsin - Madison, </institution> <year> 1992. </year>
Reference: [RW85] <author> S. Rapps and E. Weyuker. </author> <title> Selecting software test data using data flow information. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(4):367-375, </volume> <month> April </month> <year> 1985. </year>
Reference: [Ryd79] <author> B. G. Ryder. </author> <title> Constructing the call graph of a program. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-5(3):216-225, </volume> <month> May </month> <year> 1979. </year>
Reference: [SP81] <author> M. Sharir and A. Pnueli. </author> <title> Two approaches to interprocedural data flow analysis. In Program Flow Analysis: Theory and Applications, </title> <editor> ed. S. S. Muchnick and N. D. Jones, </editor> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ. </address> <pages> Pages 189-233, </pages> <year> 1981. </year>
Reference: [SS92] <author> Mario Suedholt and Christopher Steigner. </author> <title> On interprocedural data flow analysis for object oriented languages. </title> <booktitle> In Proceedings of the International Conference on Compiler Construction, </booktitle> <address> Germany, </address> <year> 1992. </year>
Reference: [Suz81] <author> Norihisa Suzuki. </author> <title> Inferring types in smalltalk. </title> <booktitle> In Eighth Symposium on Principles of Programming Languages, </booktitle> <pages> pages 187-199, </pages> <month> January </month> <year> 1981. </year>
Reference: [VHU92] <author> Jan Vitek, R. Nigel Harspool and James S. Uhl. </author> <title> Compile-time analysis of object oriented programs. </title> <booktitle> In Proceedings of the International Conference on Compiler Construction, </booktitle> <address> Germany, </address> <year> 1992. </year>
Reference: [Wei84] <author> Mark Weiser. </author> <title> Program slicing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(4):352-357, </volume> <month> July </month> <year> 1984. </year>
Reference: [YHR92] <author> W. Yang, S. Horwitz and T. Reps. </author> <title> A program integration algorithm that accommodates semantic preserving transformations. </title> <journal> In ACM Transactions on Software Engineering and Methodology, </journal> <volume> 1(3) </volume> <pages> 310-354, </pages> <month> July </month> <year> 1992. </year>
Reference: [ZR94] <author> X. Zhang and B. G. Ryder. </author> <title> Complexity of interprocedural function pointer aliasing analysis. </title> <institution> Laboratory of Computer Science Research Technical Report LCSR-TR-233, Rutgers University, </institution> <month> October </month> <year> 1994. </year> <month> 28 </month>
References-found: 42

