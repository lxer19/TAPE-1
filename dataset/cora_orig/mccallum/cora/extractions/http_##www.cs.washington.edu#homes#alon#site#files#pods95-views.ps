URL: http://www.cs.washington.edu/homes/alon/site/files/pods95-views.ps
Refering-URL: http://www.cs.washington.edu/homes/alon/site/PaperAbstractPresentation_bib13.html
Root-URL: 
Email: levy@research.att.com  mendel@db.toronto.edu  sagiv@cs.huji.ac.il  divesh@research.att.com  
Title: Answering Queries Using Views (Extended Abstract)  
Author: Alon Y. Levy Alberto O. Mendelzon Yehoshua Sagiv Divesh Srivastava 
Address: Toronto  Jerusalem  
Affiliation: AT&T Bell Laboratories  University of  Hebrew University,  AT&T Bell Laboratories  
Abstract: We consider the problem of computing answers to queries by using materialized views. Aside from its potential in optimizing query evaluation, the problem also arises in applications such as Global Information Systems, Mobile Computing and maintaining physical data independence. We consider the problem of finding a rewriting of a query that uses the materialized views, the problem of finding minimal rewritings, and finding complete rewritings (i.e., rewritings that use only the views). We show that all the possible rewritings can be obtained by considering containment mappings from the views to the query, and that the problems we consider are NP-complete when both the query and the views are conjunctive and don't involve built-in comparison predicates. We show that the problem has two independent sources of complexity (the number of possible containment mappings, and the complexity of deciding which literals from the original query can be deleted). We describe a polynomial time algorithm for finding rewritings, and show that under certain conditions, it will find the minimal rewriting. Finally, we analyze the complexity of the problems when the queries and views may be disjunctive and involve built-in comparison predicates. 
Abstract-found: 1
Intro-found: 1
Reference: [BI94] <author> Daniel Barbara and Tomasz Imielinski. Sleepers and workaholics: </author> <title> Caching strategies in mobile environments. </title> <booktitle> In Proceedings of SIGMOD-94, </booktitle> <pages> pages 1-12, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction We consider the problem of using materialized views to answer queries. Aside from its potential of improving performance of query evaluation [LY85, YL87, KB94, CKPS95], the ability to use views is important in other applications. For example, in applications such as Global Information Systems [LSK95], Mobile Computing <ref> [BI94, HSW94] </ref>, view adaptation [GMR95], maintaining physical data independence [TSI94], the relations mentioned in the query may either not actually fl Work performed while visiting AT&T Bell Laboratories.
Reference: [CKPS95] <author> Surajit Chaudhuri, Ravi Krishnamurthy, Spy-ros Potamianos, and Kyuseok Shim. </author> <title> Optimizing queries with materialized views. </title> <booktitle> In Proceedings of International Conference on Data Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: 1 Introduction We consider the problem of using materialized views to answer queries. Aside from its potential of improving performance of query evaluation <ref> [LY85, YL87, KB94, CKPS95] </ref>, the ability to use views is important in other applications. <p> can be removed, resulting in the following rewriting: q (X; Y; U; W ) : r (U; W ); r (W; U ); v (X; Y; C; D): 5 Related Work Several authors have considered the problem of implementing a query processor that uses the results of materialized views (e.g., <ref> [YL87, Sel88, SJGP90, CR94, TSI94, CKPS95] </ref>), but the formal aspects of finding the equivalent (and minimal) rewritings have received little attention. Yang and Larson [YL87] considered the problem of finding rewritings for select-project-join queries and views. <p> In their analysis they considered what amounts to one-to-one mappings from the views to query, and do not search the entire space of rewritings (and therefore may not always find all the possible rewritings of the query). Chaudhuri et al. <ref> [CKPS95] </ref> considered the problem of finding rewritings for select-project-join queries and views, such that the rewritten query preserves the bag semantics. <p> They show that in this case all the usages of views are obtained by 1-1 mappings from the views to the query, and therefore their algorithm would not find all the usages in the case where the relations are sets. Chaudhuri et al. <ref> [CKPS95] </ref> also considered the question of how to extend a query processor to chose between the different rewritings, a question that was not addressed in this paper. Dar et al. [DJLS95] recently extended the work in [CKPS95] to consider queries that involve 103 aggregation. <p> Chaudhuri et al. <ref> [CKPS95] </ref> also considered the question of how to extend a query processor to chose between the different rewritings, a question that was not addressed in this paper. Dar et al. [DJLS95] recently extended the work in [CKPS95] to consider queries that involve 103 aggregation. Finally, Rajaraman et al. [RSU95] built on our results and considered the problem of finding rewritings when the views may only be queried using specific binding patterns.
Reference: [CM77] <author> A.K. Chandra and P.M. Merlin. </author> <title> Optimal implementation of conjunctive queries in relational databases. </title> <booktitle> In Proceedings of the Ninth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 77-90, </pages> <year> 1977. </year>
Reference-contexts: The observation underlying our solution of the problem is a general characterization of the usability of views in terms of the problem of query containment. As a consequence, we show that all possible rewritings of a query can be obtained by considering containment mappings <ref> [CM77] </ref> from the bodies of the views to the body of the query. Given this characterization, we show that the problem of finding rewritings that mention as few of the database relations as possible is NP-complete for conjunctive queries with no built-in predicates. <p> Finding the complete rewriting requires that we consider the usages of both views in parallel. 2 96 2.2 Containment Mappings In the next section we show that the problem of finding a rewriting is closely related to the query containment problem. Containment mappings <ref> [CM77] </ref> have been used to show containment among conjunctive queries. In this paper we show that they also provide the core of the solution to the problem of finding the possible usages of a view. <p> When neither Q 1 nor Q 2 contain built-in predicates, finding a containment mapping is a necessary and sufficient condition for deciding that Q 1 contains Q 2 , and is an NP-complete problem <ref> [CM77] </ref>. This remains true also when Q 2 contains built-in predicates. However, when Q 1 contains built-in predicates, finding a containment mapping provides only a sufficient condition, and the containment problem in this case is p complete [vdM92]. <p> The importance of this proposition is in the fact that it provides a complete characterization of the problem of using views, thereby enabling us to explore the different aspects of the problem. Proposition 3.1 and earlier results on the complexity of containment <ref> [CM77, vdM92] </ref> entail the following complexity results on the problem of finding a rewriting of Q that uses a set of views V: Proposition 3.2: Let Q be a query and V be a set of views. 1.
Reference: [CR94] <author> C. M. Chen and N. Roussopoulos. </author> <title> The implementation and performance evaluation of the ADMS query optimizer: Integrating query result caching and matching. </title> <booktitle> In Proceedings of the International Conference on Extending Database Technology, </booktitle> <year> 1994. </year>
Reference-contexts: can be removed, resulting in the following rewriting: q (X; Y; U; W ) : r (U; W ); r (W; U ); v (X; Y; C; D): 5 Related Work Several authors have considered the problem of implementing a query processor that uses the results of materialized views (e.g., <ref> [YL87, Sel88, SJGP90, CR94, TSI94, CKPS95] </ref>), but the formal aspects of finding the equivalent (and minimal) rewritings have received little attention. Yang and Larson [YL87] considered the problem of finding rewritings for select-project-join queries and views.
Reference: [CV92] <author> Surajit Chaudhuri and Moshe Vardi. </author> <title> On the equivalence of recursive and nonrecursive data-log programs. </title> <booktitle> In The Proceedings of the PODS-92, </booktitle> <pages> pages 55-66, </pages> <year> 1992. </year>
Reference: [DJLS95] <author> Shaul Dar, H.V. Jagadish, Alon Y. Levy and Divesh Srivastava. </author> <title> Answering SQL queries with aggregation using views. </title> <type> AT&T Technical Memorandum, </type> <year> 1995. </year>
Reference-contexts: Chaudhuri et al. [CKPS95] also considered the question of how to extend a query processor to chose between the different rewritings, a question that was not addressed in this paper. Dar et al. <ref> [DJLS95] </ref> recently extended the work in [CKPS95] to consider queries that involve 103 aggregation. Finally, Rajaraman et al. [RSU95] built on our results and considered the problem of finding rewritings when the views may only be queried using specific binding patterns.
Reference: [GMR95] <author> Ashish Gupta, Inderpal Singh Mumick, and Kenneth A. Ross. </author> <title> Adapting Materialized Views after Redefinitions. </title> <booktitle> In Proceedings of SIGMOD-95, </booktitle> <year> 1995. </year>
Reference-contexts: Aside from its potential of improving performance of query evaluation [LY85, YL87, KB94, CKPS95], the ability to use views is important in other applications. For example, in applications such as Global Information Systems [LSK95], Mobile Computing [BI94, HSW94], view adaptation <ref> [GMR95] </ref>, maintaining physical data independence [TSI94], the relations mentioned in the query may either not actually fl Work performed while visiting AT&T Bell Laboratories.
Reference: [HSW94] <author> Yixiu Huang, Prasad Sistla, and Ouri Wolfson. </author> <title> Data replication for mobile computers. </title> <booktitle> In Proceedings of SIGMOD-94, </booktitle> <pages> pages 13-24, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction We consider the problem of using materialized views to answer queries. Aside from its potential of improving performance of query evaluation [LY85, YL87, KB94, CKPS95], the ability to use views is important in other applications. For example, in applications such as Global Information Systems [LSK95], Mobile Computing <ref> [BI94, HSW94] </ref>, view adaptation [GMR95], maintaining physical data independence [TSI94], the relations mentioned in the query may either not actually fl Work performed while visiting AT&T Bell Laboratories.
Reference: [KB94] <author> Arthur M. Keller and Julie Basu. </author> <title> A predicate-based caching scheme for client-server database architectures. </title> <booktitle> In Proceedings of PDIS-94, </booktitle> <year> 1994. </year>
Reference-contexts: 1 Introduction We consider the problem of using materialized views to answer queries. Aside from its potential of improving performance of query evaluation <ref> [LY85, YL87, KB94, CKPS95] </ref>, the ability to use views is important in other applications.
Reference: [LSK95] <author> Alon Y. Levy, Divesh Srivastava, and Thomas Kirk. </author> <title> Data model and query evaluation in global information systems. </title> <journal> Journal of Intelligent Information Systems, </journal> <note> 1995. Special Issue on Networked Information Discovery and Retrieval (to appear). </note>
Reference-contexts: 1 Introduction We consider the problem of using materialized views to answer queries. Aside from its potential of improving performance of query evaluation [LY85, YL87, KB94, CKPS95], the ability to use views is important in other applications. For example, in applications such as Global Information Systems <ref> [LSK95] </ref>, Mobile Computing [BI94, HSW94], view adaptation [GMR95], maintaining physical data independence [TSI94], the relations mentioned in the query may either not actually fl Work performed while visiting AT&T Bell Laboratories. <p> It restricts the set of values of X to those that appear in the join of p and p 1 . 2 In some applications we may not have access to any of the database relations. For example, in Global Information Systems <ref> [LSK95] </ref>, the relations used in a query are only virtual, and the actual data is all stored in views defined over these relations. Therefore, it is important to consider the problem of whether the query can be rewritten using only the views.
Reference: [LS93] <author> Alon Y. Levy and Yehoshua Sagiv. </author> <title> Queries independent of updates. </title> <booktitle> In Proceedings of the 19th VLDB Conference, Dublin, Ireland, </booktitle> <pages> pages 171-181, </pages> <year> 1993. </year>
Reference-contexts: In order to generalize our results to queries containing built-in predicates it is useful to note how containment mappings are also used to show containment of such queries. In particular, it follows from <ref> [LS93] </ref> that if Q 1 contains Q 2 , then there exist queries Q 1 2 ; : : :; Q n 2 such that: * Q 1 2 differ only in their built-in literals, and * Q 2 is equivalent to the union of Q 1 2 ; : : <p> Using the results of [SY81] for unions of conjunctive queries and of <ref> [LS93] </ref> for unions of conjunctive queries with built-in predicates, we can generalize the above theorem as follows: Theorem 3.9 : Let Q and V be disjunctions of conjunctive queries.
Reference: [LY85] <author> P. A. Larson and H.Z. Yang. </author> <title> Computing queries from derived relations. </title> <booktitle> In Proceedings of the 11th International VLDB Conference, </booktitle> <pages> pages 259-269, </pages> <year> 1985. </year>
Reference-contexts: 1 Introduction We consider the problem of using materialized views to answer queries. Aside from its potential of improving performance of query evaluation <ref> [LY85, YL87, KB94, CKPS95] </ref>, the ability to use views is important in other applications.
Reference: [RSU95] <author> Anand Rajaraman, Yehoshua Sagiv, and Jef-frey D. Ullman. </author> <title> Answering Queries Using Templates with Binding Patterns. </title> <booktitle> In Proceedings of the ACM Symposium on Principles of Database Systems, </booktitle> <address> San Jose, CA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Dar et al. [DJLS95] recently extended the work in [CKPS95] to consider queries that involve 103 aggregation. Finally, Rajaraman et al. <ref> [RSU95] </ref> built on our results and considered the problem of finding rewritings when the views may only be queried using specific binding patterns.
Reference: [SJGP90] <author> M. Stonebraker, A. Jhingran, J. Goh, and S. Potamianos. </author> <title> On rules, procedures, caching and views in database systems. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <year> 1990. </year>
Reference-contexts: can be removed, resulting in the following rewriting: q (X; Y; U; W ) : r (U; W ); r (W; U ); v (X; Y; C; D): 5 Related Work Several authors have considered the problem of implementing a query processor that uses the results of materialized views (e.g., <ref> [YL87, Sel88, SJGP90, CR94, TSI94, CKPS95] </ref>), but the formal aspects of finding the equivalent (and minimal) rewritings have received little attention. Yang and Larson [YL87] considered the problem of finding rewritings for select-project-join queries and views.
Reference: [SY81] <author> Y. Sagiv and M. Yannakakis. </author> <title> Equivalence among relational expressions with the union and difference operators. </title> <journal> In J. ACM 27:4 pp. </journal> <pages> 633-655, </pages> <year> 1981. </year>
Reference-contexts: The other parts of the theorem are proved in a similar fashion. 2 Corollary 3.8 : The problem of finding a globally minimal rewriting of a conjunctive query without built-in predicates, using conjunctive views with no built-in predicates is in P 2 . Using the results of <ref> [SY81] </ref> for unions of conjunctive queries and of [LS93] for unions of conjunctive queries with built-in predicates, we can generalize the above theorem as follows: Theorem 3.9 : Let Q and V be disjunctions of conjunctive queries. <p> unique maximal set of redundant p i ( U i ) in Rule (4). 2 It is well known that a containment mapping can be found in polynomial time if each literal has at most two potential destinations; the exact algorithm is based on a reduction to the 2-SAT problem <ref> [SY81] </ref>. In some sense, this is the case in the minimization algorithm presented in Theorem 4.4, since each p i ( U i ) can be mapped either to itself or to its associate. However, the contribution of Theorem 4.4 is twofold.
Reference: [Sel88] <author> Timos Sellis. </author> <title> Intelligent caching and indexing techniques for relational database systems. </title> <booktitle> Information Systems, </booktitle> <pages> pages 175-185, </pages> <year> 1988. </year>
Reference-contexts: can be removed, resulting in the following rewriting: q (X; Y; U; W ) : r (U; W ); r (W; U ); v (X; Y; C; D): 5 Related Work Several authors have considered the problem of implementing a query processor that uses the results of materialized views (e.g., <ref> [YL87, Sel88, SJGP90, CR94, TSI94, CKPS95] </ref>), but the formal aspects of finding the equivalent (and minimal) rewritings have received little attention. Yang and Larson [YL87] considered the problem of finding rewritings for select-project-join queries and views.
Reference: [Shm87] <author> Oded Shmueli. </author> <title> Decidability and expressiveness aspects of logic queries. </title> <booktitle> In Proceedings of the Sixth Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 237-249, </pages> <address> San Diego, CA, </address> <month> March </month> <year> 1987. </year>
Reference: [TSI94] <author> Odysseas G. Tsatalos, Marvin H. Solomon, and Yannis E. Ioannidis. </author> <title> The GMAP: A versatile tool for physical data independence. </title> <booktitle> In Proceedings of VLDB-94, </booktitle> <pages> pages 367-378, </pages> <year> 1994. </year>
Reference-contexts: Aside from its potential of improving performance of query evaluation [LY85, YL87, KB94, CKPS95], the ability to use views is important in other applications. For example, in applications such as Global Information Systems [LSK95], Mobile Computing [BI94, HSW94], view adaptation [GMR95], maintaining physical data independence <ref> [TSI94] </ref>, the relations mentioned in the query may either not actually fl Work performed while visiting AT&T Bell Laboratories. <p> can be removed, resulting in the following rewriting: q (X; Y; U; W ) : r (U; W ); r (W; U ); v (X; Y; C; D): 5 Related Work Several authors have considered the problem of implementing a query processor that uses the results of materialized views (e.g., <ref> [YL87, Sel88, SJGP90, CR94, TSI94, CKPS95] </ref>), but the formal aspects of finding the equivalent (and minimal) rewritings have received little attention. Yang and Larson [YL87] considered the problem of finding rewritings for select-project-join queries and views.
Reference: [YL87] <author> H. Z. Yang and P. A. Larson. </author> <title> Query transformation for PSJ-queries. </title> <booktitle> In Proceedings of the 13th International VLDB Conference, </booktitle> <pages> pages 245-254, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction We consider the problem of using materialized views to answer queries. Aside from its potential of improving performance of query evaluation <ref> [LY85, YL87, KB94, CKPS95] </ref>, the ability to use views is important in other applications. <p> can be removed, resulting in the following rewriting: q (X; Y; U; W ) : r (U; W ); r (W; U ); v (X; Y; C; D): 5 Related Work Several authors have considered the problem of implementing a query processor that uses the results of materialized views (e.g., <ref> [YL87, Sel88, SJGP90, CR94, TSI94, CKPS95] </ref>), but the formal aspects of finding the equivalent (and minimal) rewritings have received little attention. Yang and Larson [YL87] considered the problem of finding rewritings for select-project-join queries and views. <p> Yang and Larson <ref> [YL87] </ref> considered the problem of finding rewritings for select-project-join queries and views. In their analysis they considered what amounts to one-to-one mappings from the views to query, and do not search the entire space of rewritings (and therefore may not always find all the possible rewritings of the query).
Reference: [SY81] <author> Y. Sagiv and M. Yannakakis. </author> <title> Equivalence among relational expressions with the union and difference operators. </title> <journal> In J. ACM 27:4 pp. </journal> <pages> 633-655, </pages> <year> 1981. </year>
Reference-contexts: The other parts of the theorem are proved in a similar fashion. 2 Corollary 3.8 : The problem of finding a globally minimal rewriting of a conjunctive query without built-in predicates, using conjunctive views with no built-in predicates is in P 2 . Using the results of <ref> [SY81] </ref> for unions of conjunctive queries and of [LS93] for unions of conjunctive queries with built-in predicates, we can generalize the above theorem as follows: Theorem 3.9 : Let Q and V be disjunctions of conjunctive queries. <p> unique maximal set of redundant p i ( U i ) in Rule (4). 2 It is well known that a containment mapping can be found in polynomial time if each literal has at most two potential destinations; the exact algorithm is based on a reduction to the 2-SAT problem <ref> [SY81] </ref>. In some sense, this is the case in the minimization algorithm presented in Theorem 4.4, since each p i ( U i ) can be mapped either to itself or to its associate. However, the contribution of Theorem 4.4 is twofold.
Reference: [vdM92] <author> Ron van der Meyden. </author> <title> The complexity of querying indefinite data about linearly ordered domains. </title> <booktitle> In The Proceedings of PODS-92, </booktitle> <pages> pages 331-345, </pages> <year> 1992. </year>
Reference-contexts: This remains true also when Q 2 contains built-in predicates. However, when Q 1 contains built-in predicates, finding a containment mapping provides only a sufficient condition, and the containment problem in this case is p complete <ref> [vdM92] </ref>. In order to generalize our results to queries containing built-in predicates it is useful to note how containment mappings are also used to show containment of such queries. <p> The importance of this proposition is in the fact that it provides a complete characterization of the problem of using views, thereby enabling us to explore the different aspects of the problem. Proposition 3.1 and earlier results on the complexity of containment <ref> [CM77, vdM92] </ref> entail the following complexity results on the problem of finding a rewriting of Q that uses a set of views V: Proposition 3.2: Let Q be a query and V be a set of views. 1.
References-found: 21

