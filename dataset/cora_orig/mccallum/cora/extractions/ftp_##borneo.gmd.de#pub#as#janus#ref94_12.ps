URL: ftp://borneo.gmd.de/pub/as/janus/ref94_12.ps
Refering-URL: http://borneo.gmd.de/AS/janus/publi/publi.html
Root-URL: 
Title: Adaptive Control of a Robot Arm Using Driver Programs  
Author: Frank Smieja, Uwe Beyer and Gernot Richter 
Note: Report number: 1994/12  
Abstract: In Artificial Intelligence in Engineering, 10(1):39-60, 1996 Also available as GMD report #886 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> U. Beyer and F. J. Smieja. </author> <title> Quantitative aspects of data-driven information processing. </title> <type> Technical Report 732, </type> <institution> GMD German National Research Center for Information Technology, </institution> <address> Sankt Augustin, Germany, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: Also realistic is a maximal 25% distortion per driver program length. 3.8 Merging to a point in a mission path Consider the case depicted in Figure 11. The TCP is at current position x and jx * ij &gt; 8i 2 <ref> [1; SIZE ()] </ref>. In other words the TCP is not within positioning accuracy of a mission path point. It is nevertheless required that the mission path is followed further. <p> This involves manipulation of inexact or estimated quantities. This ability allows the system to function in a more open environment with the flexibility that is required. A natural drawback is that such openness also gives rise to the appro-ximator limitation effect <ref> [1] </ref> of only being able to perform tasks up to a certain bound on accuracy.
Reference: [2] <author> U. Beyer and F. J. Smieja. </author> <title> A heuristic approach to the inverse differential kinematics problem. </title> <journal> Journal of Intelligent Robotic Systems: Theory and Applications, </journal> <note> 1995. (to be published). </note>
Reference-contexts: We use a very simple IDK method combined with relaxation for our 8-DOF arm <ref> [2] </ref>. The important property about the iterative IDK procedures is that they send the TCP every step a small displacement in the direction of the current goal point. Also important is that when applied recursively the procedure converges reasonably quickly to this goal point. <p> The size of a basis driver program, l, is confined to lie in the range <ref> [2; 2L] </ref>, L 2. The size chosen depends on the number of remaining reference points in the mission path, M : Case 1: M 2L: l = L. 14 Smieja et al taken from the simulation. Case 2: L M &lt; 2L: l = M . <p> The end points are never discarded. Thus the next point to be discarded is that with the lowest value of importance: DISCARD (D) = j : I (D; j) &lt; I (D; i); 8i 6= j; 2 <ref> [2; SIZE (D) 1] </ref>: (51) If the jth reference point (D * j) is to be removed, the remaining driver program is adjusted in the following way: D * (j 1) ) D * (j 1) + D * j (52) 8i 2 [j + 1; SIZE (D) 1]:(53) Driver Programs <p> Our experiments with the driver program technique are still in their infancy, but the results are already remarkable. Their use on pick and place experiments lead to transferable, smooth and fast movements automatically and with the use of only a few extremely simple basis procedures (such as IDK <ref> [2] </ref>). Our current emphasis is on transferring these methods to the real hardware arm we have acquired in our laboratory. Acknowledgments This work is part of the GMD Adaptive Systems REFLEX project, supported by BMFT grant number 01IN111A/4.
Reference: [3] <author> U. Beyer and F. J. Smieja. </author> <title> Data exploration with reflective adaptive models. </title> <journal> Computational Statistics and Data Analysis, </journal> <volume> 22 </volume> <pages> 193-211, </pages> <year> 1996. </year>
Reference-contexts: If a system is to display even the smallest semblance of what we recognize to be "intelligence", Driver Programs 3 then the ability to cope with unforeseen events is perhaps the most essential ingredient it should possess. Such is the nature of open environments <ref> [15, 3] </ref>, and the robot that acts reasonably under such conditions will need to fulfill different requirements than the standard industrial robot. For most industrial applications the adoption of a full IK solution method does not pose significant problems, since the robots are generally to be used in well-defined environments.
Reference: [4] <author> U. Beyer and F. J. Smieja. </author> <title> Learning from examples, agent teams and the concept of reflection. </title> <journal> International Journal of Pattern Recognition and Artificial Intelligence, </journal> <volume> 10(3) </volume> <pages> 251-272, </pages> <year> 1996. </year>
Reference-contexts: Such methods belong to the general category learning from examples. Depending on whether they are, for example, statistically, neural network, or nearest-neighbor based, they involve particular assumptions about the sample of exemplar pairs and Driver Programs 13 also the functional form of A (see, for example, <ref> [4] </ref>). The driver program method goes a step further: we store in effect (hqi l+1 ; hxi l+1 ) pairs. From the first sequence we extract the information (q; D) and the second we rewrite as a template t . <p> Section 4.5 discusses this issue. A lower limit on the size of driver programs is a similar process as increasing the bias of other types of approximating system <ref> [4, 10] </ref>. In section 5.8 we investigate the effect on adaptation of varying L. 4.4 Concatenating driver programs Although it is more general to possess a driver program database with many basic and nonspecific driver programs, it is also advantageous to allow the possibility of specialization. <p> In open environments however it becomes limiting and gives rise to "over-precise" movements, in tasks where 100% precision may not even be necessary. In our approach we implicitly use the idea of "self-assessment" (positive and negative feedback) in the architecture, which we have also handled more particularly as "reflection" <ref> [19, 4, 18] </ref>. This involves manipulation of inexact or estimated quantities. This ability allows the system to function in a more open environment with the flexibility that is required.
Reference: [5] <author> E. Bizzi, N. Hogan, F. A. Mussa-Ivaldi, and S. Giszter. </author> <title> Does the nervous system use equilibrium-point control to quide single and multiple joint movements? Behavioral and Brain Sciences, </title> <booktitle> 15(4) </booktitle> <pages> 603-613, </pages> <year> 1992. </year>
Reference-contexts: A common mission path would consist of a few key reference points, such as the final TCP position and main obstacle-avoidance sub-goals, with the intermediate arm positions being determined mainly by such competing factors as "minimum jerk" [9], "equilibrium-point movement" <ref> [5] </ref>, non-complex obstacle avoidance of the bulk of the arm, and shortest distance to goal.
Reference: [6] <author> M. Brady, J. M. Hollenbach, T. L. John-son, T. Lozano-Perez, and M. T. Mason, </author> <title> editors. Robot Motion, </title> <booktitle> chapter Trajectory Planning, </booktitle> <pages> pages 221-243. </pages> <publisher> MIT Press, </publisher> <address> Cam-bridge, </address> <year> 1982. </year>
Reference-contexts: 1 Introduction The goal of control tasks for industrial robot arms is generally to move the tool center point (TCP) of the arm along a given path, which we call the mission path, with as high a pre cision and speed as possible (see, for example, <ref> [6] </ref>).
Reference: [7] <author> J. H. Connell. </author> <title> Minimalist Mobile Robotics. </title> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: Their characteristics are listed roughly in Table 1. Current systems lie mostly between these two extremes, with the most successful being those employed full-time in industrial applications, and they generally belong to the first extreme. The second extreme has also had some positive exemplars, notably <ref> [7] </ref>. In this paper we use an iterative method to obtain online inverse differential kinematics solutions, and demonstrate how it may produce acceptable results when coupled with a driver program control paradigm.
Reference: [8] <author> R. Featherstone. </author> <title> Position and velocity transformations between robot end-effector coordinates and joint angles. </title> <journal> The International Journal of Robotics Research, </journal> <volume> 2(2) </volume> <pages> 35-45, </pages> <year> 1983. </year>
Reference-contexts: nature of the inverse kinematics transformation, two TCP path templates that result from the same driver program executed at different initial configurations will in general be different. 3.3 Construction of a driver program Iterative inverse differential kinematics procedures (IDK) come in various shapes and sizes (examples can be found in <ref> [11, 8, 20, 16] </ref>). We use a very simple IDK method combined with relaxation for our 8-DOF arm [2]. The important property about the iterative IDK procedures is that they send the TCP every step a small displacement in the direction of the current goal point.
Reference: [9] <author> T. Flash and N. Hogan. </author> <title> The coordination of arm movements; an experimentally confirmed mathematical model. </title> <journal> Journal of Neuroscience, </journal> <pages> 5(1688-1703), </pages> <year> 1985. </year>
Reference-contexts: A common mission path would consist of a few key reference points, such as the final TCP position and main obstacle-avoidance sub-goals, with the intermediate arm positions being determined mainly by such competing factors as "minimum jerk" <ref> [9] </ref>, "equilibrium-point movement" [5], non-complex obstacle avoidance of the bulk of the arm, and shortest distance to goal.
Reference: [10] <author> S. Geman, E. Bienenstock, and R. Doursat. </author> <title> Neural networks and the bias/variance dilemma. </title> <journal> Neural Computation, </journal> <volume> 4 </volume> <pages> 1-58, </pages> <year> 1992. </year>
Reference-contexts: Section 4.5 discusses this issue. A lower limit on the size of driver programs is a similar process as increasing the bias of other types of approximating system <ref> [4, 10] </ref>. In section 5.8 we investigate the effect on adaptation of varying L. 4.4 Concatenating driver programs Although it is more general to possess a driver program database with many basic and nonspecific driver programs, it is also advantageous to allow the possibility of specialization. <p> This results in them being chosen less often, and consequently more of them being generated. Thus one typically obtains an optimum, representing the best tradeoff between bias and variance <ref> [10] </ref>. Our standard value of L = 10 is also seen to be near this optimum. We expect such an optimum to be highly dependent on the problem and its scale. A calibration phase is therefore likely to be advantageous for optimal behavior.
Reference: [11] <author> A. A. Goldenberg, B. Benhabib, and R. G. Fenton. </author> <title> A complete generalized solution to the inverse kinematics of robots. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-1(1):14-20, </volume> <year> 1985. </year>
Reference-contexts: nature of the inverse kinematics transformation, two TCP path templates that result from the same driver program executed at different initial configurations will in general be different. 3.3 Construction of a driver program Iterative inverse differential kinematics procedures (IDK) come in various shapes and sizes (examples can be found in <ref> [11, 8, 20, 16] </ref>). We use a very simple IDK method combined with relaxation for our 8-DOF arm [2]. The important property about the iterative IDK procedures is that they send the TCP every step a small displacement in the direction of the current goal point.
Reference: [12] <author> W. Iba. </author> <title> Human motor behaviour: A short review of phenomena, theories and systems. </title> <type> Technical Report 89-34, </type> <institution> Department of Information and Computer Science, University of California, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: Nature does exactly this by the development of motor programs. Motor programs are low-level motor-neuron sequences stored in the nervous system that may be quickly executed without need for continual conscious feedback from the higher motor areas of the brain <ref> [12] </ref>. That is, they represent open-loop behavior (no planning phase during the motion), enabling learned motions to be quickly executed. An important feature of motor program execution ("recall") is that of "recognition" (a term used by Schmidt [17] in the development of his schema theory for motor programs).
Reference: [13] <author> Konrad Lorenz. </author> <title> Die Ruckseite des Spiegels - Versuch einer Naturgeschichte menschli-chen Erkennens. </title> <publisher> Deutscher Taschenbuch Verlag, </publisher> <address> Munchen, </address> <year> 1977. </year>
Reference-contexts: It is reasonable to expect that knowledge gained from previously planned and executed mission paths might be used to simplify and improve the execution of subsequent mission paths. This idea of the "open program" is well known in biology and is described among others by Lorenz <ref> [13] </ref> and Mayr [14]. This paper introduces a method that is based on such a philosophy applied to robot arm control. From observation of real open environments, it appears that similarities between mission paths, or parts of mission paths, is a very common feature.
Reference: [14] <author> E. Mayr. </author> <title> Artbegriff und Evolution. </title> <address> Parey, Berlin, </address> <year> 1967. </year> <note> 30 Smieja et al </note>
Reference-contexts: It is reasonable to expect that knowledge gained from previously planned and executed mission paths might be used to simplify and improve the execution of subsequent mission paths. This idea of the "open program" is well known in biology and is described among others by Lorenz [13] and Mayr <ref> [14] </ref>. This paper introduces a method that is based on such a philosophy applied to robot arm control. From observation of real open environments, it appears that similarities between mission paths, or parts of mission paths, is a very common feature.
Reference: [15] <author> H. Muhlenbein. </author> <title> Algorithms, data and hypotheses learning in an open world. In Schrei-ber May, Mahler, editor, Molecular Electronics: From Basic Principles to Preliminary Applications. </title> <publisher> Wiley, </publisher> <year> 1995. </year>
Reference-contexts: If a system is to display even the smallest semblance of what we recognize to be "intelligence", Driver Programs 3 then the ability to cope with unforeseen events is perhaps the most essential ingredient it should possess. Such is the nature of open environments <ref> [15, 3] </ref>, and the robot that acts reasonably under such conditions will need to fulfill different requirements than the standard industrial robot. For most industrial applications the adoption of a full IK solution method does not pose significant problems, since the robots are generally to be used in well-defined environments.
Reference: [16] <author> S. Y. Oh, D. Orin, and M. Bach. </author> <title> An inverse kinematically solution for kinematically redundant manipulators. </title> <journal> Journal of Robot Systems, </journal> <volume> 1(3) </volume> <pages> 235-249, </pages> <year> 1984. </year>
Reference-contexts: nature of the inverse kinematics transformation, two TCP path templates that result from the same driver program executed at different initial configurations will in general be different. 3.3 Construction of a driver program Iterative inverse differential kinematics procedures (IDK) come in various shapes and sizes (examples can be found in <ref> [11, 8, 20, 16] </ref>). We use a very simple IDK method combined with relaxation for our 8-DOF arm [2]. The important property about the iterative IDK procedures is that they send the TCP every step a small displacement in the direction of the current goal point.
Reference: [17] <author> R. A. Schmidt. </author> <title> A schema theory of discrete motor skill learning. </title> <journal> Psychological Review, </journal> <volume> 82(4) </volume> <pages> 225-260, </pages> <year> 1975. </year>
Reference-contexts: That is, they represent open-loop behavior (no planning phase during the motion), enabling learned motions to be quickly executed. An important feature of motor program execution ("recall") is that of "recognition" (a term used by Schmidt <ref> [17] </ref> in the development of his schema theory for motor programs). Recognition involves (among other things) the prediction and evaluation of the effect of a motor program on the TCP in workspace, if the motor program is to be executed from the current arm configuration.
Reference: [18] <author> F. J. Smieja. </author> <title> The Pandemonium system of reflective agents. </title> <journal> IEEE Transactions on Neural Networks, </journal> <volume> 7(1) </volume> <pages> 97-106, </pages> <year> 1996. </year>
Reference-contexts: In open environments however it becomes limiting and gives rise to "over-precise" movements, in tasks where 100% precision may not even be necessary. In our approach we implicitly use the idea of "self-assessment" (positive and negative feedback) in the architecture, which we have also handled more particularly as "reflection" <ref> [19, 4, 18] </ref>. This involves manipulation of inexact or estimated quantities. This ability allows the system to function in a more open environment with the flexibility that is required.
Reference: [19] <author> F. J. Smieja and H. Muhlenbein. </author> <title> Reflective modular neural network systems. </title> <type> Technical Report 633, </type> <institution> GMD German National Research Center for Information Technology, </institution> <address> Sankt Augustin, Germany, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: In open environments however it becomes limiting and gives rise to "over-precise" movements, in tasks where 100% precision may not even be necessary. In our approach we implicitly use the idea of "self-assessment" (positive and negative feedback) in the architecture, which we have also handled more particularly as "reflection" <ref> [19, 4, 18] </ref>. This involves manipulation of inexact or estimated quantities. This ability allows the system to function in a more open environment with the flexibility that is required.
Reference: [20] <author> J. J. Uicker, J. Denavit, and R. S. Harten-berg. </author> <title> An interactive method for the displacement analysis of spatial mechanisms. </title> <journal> Journal of Applied Mechanics, ASME, </journal> <pages> pages 309-314, </pages> <year> 1984. </year>
Reference-contexts: nature of the inverse kinematics transformation, two TCP path templates that result from the same driver program executed at different initial configurations will in general be different. 3.3 Construction of a driver program Iterative inverse differential kinematics procedures (IDK) come in various shapes and sizes (examples can be found in <ref> [11, 8, 20, 16] </ref>). We use a very simple IDK method combined with relaxation for our 8-DOF arm [2]. The important property about the iterative IDK procedures is that they send the TCP every step a small displacement in the direction of the current goal point.
References-found: 20

