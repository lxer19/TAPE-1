URL: ftp://ftp.lcs.mit.edu/student-workshop/1996/abstracts/Babb_Frank.ps
Refering-URL: http://www.cag.lcs.mit.edu/student96/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: jbabb@lcs.mit.edu, mfrank@lcs.mit.edu  
Title: Dynamic Computation Structures: User-level Hardware for Reconfigurable Architectures  
Author: Jonathan Babb and Matthew Frank 
Affiliation: MIT Laboratory for Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Babb, R. Tessier, and A. Agarwal. </author> <title> Virtual Wires: Overcoming pin limitations in FPGA-based logic emulators. </title> <booktitle> In Proceedings IEEE Workshop on FPGA-based Custom Computing Machines, </booktitle> <pages> pages 142-151, </pages> <address> Napa, CA, </address> <month> April </month> <year> 1993. </year> <note> IEEE. Also as MIT/LCS TM-491, Jan-uary 1993. </note>
Reference-contexts: This work leverages our previous FPGA work, Virtual Wires <ref> [1] </ref>, in conjunction with behavioral compilation technology, to view an array of FPGAs as a machine-independent computing fabric. The RAW machine comprises very simple commodity hardware including SRAMs, DRAMs, a large amount of primitive programmable logic in the form of Field-Programmable Gate Arrays (FPGAs), and fast microprocessors.
Reference: [2] <author> D. R. Engler. </author> <title> Vcode: A very fast, retargetable, and extensible dynamic code generation system. </title> <booktitle> In PLDI '96, </booktitle> <year> 1996. </year>
Reference-contexts: Agar-wal. Matthew Frank is in part supported by an NSF Graduate Fellowship. Address: Room 633 (Babb) and Room 627 (Frank), 545 Technology Square, Cambridge MA 02139. Web: http://www.cag.lcs.mit.edu/ jbabb, http://www.cag.lcs.mit.edu/ mfrank Dynamic Computation Structures To explore user-level hardware for RAW, we introduce dynamic computation structures, dynamic code <ref> [2] </ref> for reconfigurable computing. Rather than dynamically generating new processor instructions based on the input data-set, we dynamically modify the underlying hardware architecture as a function of the user's input. Our system translates specific user input into dynamic computation structures, generating synthesizable behavioral verilog.
Reference: [3] <author> M. Gokhale, W. Holmes, A. Kopser, S. Lucas, R. Min-nich, D. Sweeney, and D. Lopresti. </author> <title> Building and using a highly parallel programmable logic array. </title> <journal> Computer, </journal> <volume> 24(1), </volume> <month> Jan. </month> <year> 1991. </year> <month> 2 </month>
Reference-contexts: Introduction Configurable computers based on Field Programmable Gate Arrays (FPGAs) are capable of accelerating suitable applications by several orders of magnitude when compared to traditional processor-based architectures <ref> [3] </ref>. However, the programming paradigm for such machines is often no more than a set of hand-crafted circuits, one per FPGA in the system. Programmers must explicitly account for machine-level details, such as FPGA capacity and interconnect, prohibiting the development of architecturally-independent applications.
References-found: 3

