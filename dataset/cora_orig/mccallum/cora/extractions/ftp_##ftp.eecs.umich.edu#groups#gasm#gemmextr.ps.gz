URL: ftp://ftp.eecs.umich.edu/groups/gasm/gemmextr.ps.gz
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.eecs.umich.edu
Email: ma@first.gmd.de kutter@tik.ee.ethz.ch alfonso@univaq.it  
Title: Montages/Gem-Mex: a Meta Visual Programming Generator a visual domain-specific formalism for specifying all the aspects
Author: M. Anlauff P.W. Kutter A. Pierantonio 
Note: Montages is  
Address: Berlin, Germany Zurich, Switzerland L'Aquila, Italy  
Affiliation: GMD FIRST ETH Zurich Universita di L'Aquila  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [AKP97] <author> M. Anlauff, P.W. Kutter, and A. Pieranto-nio. </author> <title> Formal aspects and development environments of montages. </title> <year> 1997. </year>
Reference-contexts: This is usual for most of the control statements, but there are also cases in which an additional transition rule is needed to define the complete dynamic semantics as illustrate, for instance, in Fig. 3. With respect to earlier works <ref> [KP97b, AKP97] </ref> the implicit control flow is a recent enhancement of the visual formalism of Montages.
Reference: [Anl97] <author> M. Anlauff. GemMex-Homepage, </author> <year> 1997. </year> <note> http://www.first.gmd.de/ma/gemmex/. </note>
Reference-contexts: condition DefTab [I]=undef @":=": CT:=CT.NT Evaluation::= "?" E condition DefTab [I]=undef @":=": CT:=CT.NT Assignment::= I ":=" E condition DefTab [I]=undef @":=": CT:=CT.NT HTML LaTeX global.asm Mex Generated Montages executable Mex Debugger 3 Gem-Mex: The Development Envi ronment for Montages The development environment for Montages is given by the Gem-Mex tool <ref> [Anl97] </ref>, whose architecture is depicted in figure 2. It is a complex system which assists the designer in a number of activities related with the language life cycle, from early design to routine programmer usage.
Reference: [ASM95] <author> ASM-Homepage. </author> <year> 1995. </year> <note> http://www.eecs.umich.edu/gasm/. </note>
Reference-contexts: Montages are designed to provide a theoretical basis for a number of activities from initial language design to prototyping. The mathematical semantics of Montages is given with Abstract State Machines (formally called Evolving Algebras) <ref> [Gur95, ASM95] </ref> In short, ASMs are a state-based formalism in which a state is updated in discrete time steps. Unlike most state based systems, the state is given by an algebra, that is, a collection of functions and universes.
Reference: [BDR94] <author> E. Borger, I. Durdanovic, and D. Rosen-zweig. </author> <title> Occam: Specification and Compiler Correctness. Part I: Simple Mathematical Interpreters. </title> <editor> In U. Montanari and E. R. Olderog, editors, </editor> <booktitle> Proc. PRO-COMET'94 (IFIP Working Conference on Programming Concepts, Methods and Calculi), </booktitle> <pages> pages 489-508. </pages> <publisher> North-Holland, </publisher> <year> 1994. </year>
Reference-contexts: The state transitions are given by rules that update functions pointwise and extend universes with new elements. ASMs have already been used to model the dynamic semantics of a number of programming languages, such as Occam <ref> [BDR94] </ref>, C [GH93], C++ [Wal95] and Oberon [Kut97] to mention a few. At the risk of oversimplifying somewhat, one defines the initial state of the functions and specifies how they evolve by means of transition rules. The initial state is assumed to include the results of a static analysis.
Reference: [GH93] <author> Y. Gurevich and J. Huggins. </author> <title> The Semantics of the C Programming Language. </title> <editor> In E. Borger, H. Kleine Buning, G. Jager, S. Martini, and M. M. Richter, editors, </editor> <booktitle> Computer Science Logic, volume 702 of LNCS, </booktitle> <pages> pages 274-309. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: The state transitions are given by rules that update functions pointwise and extend universes with new elements. ASMs have already been used to model the dynamic semantics of a number of programming languages, such as Occam [BDR94], C <ref> [GH93] </ref>, C++ [Wal95] and Oberon [Kut97] to mention a few. At the risk of oversimplifying somewhat, one defines the initial state of the functions and specifies how they evolve by means of transition rules. The initial state is assumed to include the results of a static analysis.
Reference: [Gur95] <author> Y. Gurevich. </author> <title> Evolving Algebras 1993: Li-pari Guide. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specification and Validation Methods, </booktitle> <pages> pages 9-36. </pages> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: Montages are designed to provide a theoretical basis for a number of activities from initial language design to prototyping. The mathematical semantics of Montages is given with Abstract State Machines (formally called Evolving Algebras) <ref> [Gur95, ASM95] </ref> In short, ASMs are a state-based formalism in which a state is updated in discrete time steps. Unlike most state based systems, the state is given by an algebra, that is, a collection of functions and universes.
Reference: [KP97a] <author> P.W. Kutter and A. Pierantonio. </author> <title> The formal specification of oberon. </title> <journal> Journal of Universal Computer Science, </journal> <volume> 3(5), </volume> <year> 1997. </year>
Reference-contexts: In figure 5 the animation session based on the above example is shown. 4 Conclusions In Section 2 we introduce a new way of specifying control flow, which enhances the visualization and simplifies existing Montages specifications consid-erably. If applied to the Montages specification of Oberon <ref> [KP97a] </ref>, most dynamic rules are simplified to about three lines. We showed how Montages can be used to generate program animation tools.
Reference: [KP97b] <author> P.W. Kutter and A. Pierantonio. </author> <title> Montages specifications of realistic programming languages. </title> <journal> Journal of Universal Computer Science, </journal> <volume> 3(5), </volume> <year> 1997. </year>
Reference-contexts: They are usually incomplete and/or inaccurate, and considered as not definitive. Language designers still rely in informal specifications which are open to incompleteness, inconsistency and ambiguity. In order to make the language designer reconsider their attitude to formal methods, we proposed a formalism, called Montages <ref> [KP97b] </ref>. The main aim of such a mathematical framework is to adopt a "user-friendly" interface to the underlying mathematical machinery. By mean of visual descriptions the designer can map her/his intuitions to semantical definitions, which can be fed to a rapid prototyping tool, called Gem-Mex. <p> Sect. 3 the Gem-Mex tool is present by giving an overall picture of the system and how it can assist the user in editing the visual specifications and generating program animation and debugging tools. Finally, in Sect. 4 we draw some conclusions. 2 Background: Montages Montages <ref> [KP97b] </ref> constitute a specification formalism for describing all aspects of programming languages. Syntax, static analysis and semantics, and dynamic semantics are given in an unambiguous and coherent way by means of semi-visual descriptions. <p> This is usual for most of the control statements, but there are also cases in which an additional transition rule is needed to define the complete dynamic semantics as illustrate, for instance, in Fig. 3. With respect to earlier works <ref> [KP97b, AKP97] </ref> the implicit control flow is a recent enhancement of the visual formalism of Montages. <p> A more leisured and detailed discussion can be found in <ref> [KP97b] </ref>. * the dynamic semantics part is a transition rules which is fired whenever the control reach that given construct. <p> The logical and formal aspects of Montages are not supposed to be illustrated deeply in this work, a more detailed discussion can be found in <ref> [KP97b] </ref>. Nevertheless, it should be stressed how Montages represents a rigorous and formal instrument providing a mathematical framework which can be used by the designer to record unambiguously decisions about a particular language and obtaining new insight into the nature of the language developing description of it.
Reference: [Kut97] <author> P.W. Kutter. </author> <title> Dynamic semantics of the programming language oberon. </title> <type> Technical report, </type> <institution> ETH Zurich, </institution> <year> 1997. </year>
Reference-contexts: The state transitions are given by rules that update functions pointwise and extend universes with new elements. ASMs have already been used to model the dynamic semantics of a number of programming languages, such as Occam [BDR94], C [GH93], C++ [Wal95] and Oberon <ref> [Kut97] </ref> to mention a few. At the risk of oversimplifying somewhat, one defines the initial state of the functions and specifies how they evolve by means of transition rules. The initial state is assumed to include the results of a static analysis.
Reference: [Wal95] <author> C. Wallace. </author> <title> The Semantics of the C++ Programming Language. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specification and Validation Methods, </booktitle> <pages> pages 131-164. </pages> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: The state transitions are given by rules that update functions pointwise and extend universes with new elements. ASMs have already been used to model the dynamic semantics of a number of programming languages, such as Occam [BDR94], C [GH93], C++ <ref> [Wal95] </ref> and Oberon [Kut97] to mention a few. At the risk of oversimplifying somewhat, one defines the initial state of the functions and specifies how they evolve by means of transition rules. The initial state is assumed to include the results of a static analysis.

References-found: 10

