URL: ftp://ftp.cc.gatech.edu/pub/software/missionlab/mlab_manual.ps.Z
Refering-URL: http://www.cc.gatech.edu/aimosaic/robot-lab/research/MissionLab/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: mlab@cc.gatech.edu  
Title: MissionLab User Manual for MissionLab version 2.0  
Author: Douglas C. MacKenzie Khaled S. Ali Tucker Balch Jonathan M. Cameron Zhong Chen 
Date: February 24, 1997  
Address: Atlanta, GA 30332  
Affiliation: College of Computing Georgia Institute of Technology  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Ronald C. Arkin, </author> <title> "Motor Schema-Based Mobile Robot Navigation", </title> <journal> International Journal of Robotics Research, </journal> <volume> Vol. 8, No. 4, </volume> <month> August </month> <year> 1989, </year> <pages> pp. 92-112. </pages>
Reference-contexts: The main goal for this task is to control the motion of groups of robots in highly dynamic, unpredictable, and possibly hostile environments. Much of our work in reactive control is applicable to suitably controlling the motion of individual robots <ref> [1] </ref> as well as the motion of teams of robots [2]. <p> See Table table:variables for details. A detailed description of motor schema-based navigation and associated parameters is given in <ref> [1] </ref>.
Reference: [2] <author> Tucker Balch, Ronald C. Arkin, </author> <title> "Communication in Reactive Multiagent Robotic Systems," </title> <booktitle> Autonomous Robots, </booktitle> <volume> Vol. 1, </volume> <year> 1994, </year> <pages> pp. 1-25. </pages>
Reference-contexts: Much of our work in reactive control is applicable to suitably controlling the motion of individual robots [1] as well as the motion of teams of robots <ref> [2] </ref>. As we have developed software to control teams of robots, it has became apparent that manually determining each configuration of robots and their control software, hard-coding a task, and controlling task 3 DESCRIPTION OF MISSIONLAB 2 execution is complex and error-prone.
Reference: [3] <author> Karsten Schwan, et. al., </author> <title> A C Thread Library for Multiprocessors, </title> <type> Georgia Tech Technical report #GIT-ICS-91/02, </type> <year> 1991. </year>
Reference-contexts: C-Threads is a light-weight non-preemptive user level process scheduler package developed at Georgia Tech <ref> [3] </ref> to support multiprocessor computers. It allows development of multi-threaded programs which at run time can take maximum advantage of the available free processors. Support for inter-thread communication and synchronization mechanisms are also provided.
Reference: [4] <author> Douglas C. MacKenzie, Ronald C. Arkin, </author> <title> "Formal Specification for Behavior-Based Mobile Robots," </title> <booktitle> SPIE Mobile Robots VIII, </booktitle> <address> Boston, MA, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Part of our research is aimed at reducing this complexity by developing tools for configuring robots and their individual control software <ref> [4] </ref>. Another area we have begun to address is the ability to specify the instructions for a task in such a manner that computer software can interpret the instructions and decide which commands to send to each robot (simulated or real).
Reference: [5] <author> Christopher Fedor, "TCX: </author> <title> Task Communication," (User manual for TCX, available through the Robotics Institute), </title> <institution> Carnegie Mellon University, </institution> <month> Feb. 15, </month> <year> 1993. </year>
Reference-contexts: These packages are described briefly here. 6.3.1 Communications software IPT Communication between the robot programs and the console program (mlab) is accomplished using the communication package IPT <ref> [5] </ref>. IPT is a transaction-oriented communication layer that sits above NSF sockets to simplify their use. As was described in Section 6.1.1, an IPT name server must be executing to enable the robots to find the console.
References-found: 5

