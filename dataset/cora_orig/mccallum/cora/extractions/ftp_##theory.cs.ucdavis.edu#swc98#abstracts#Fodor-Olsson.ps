URL: ftp://theory.cs.ucdavis.edu/swc98/abstracts/Fodor-Olsson.ps
Refering-URL: http://theory.cs.ucdavis.edu/~blackj/swc98/proceedings/
Root-URL: http://www.cs.ucdavis.edu
Email: (fodor@cs.ucdavis.edu,  (olsson@cs.ucdavis.edu)  
Title: Concurrent Language Support for Rapidly Prototyping Interoperable Applications  
Author: Eugene F. Fodor Ronald A. Olsson 
Address: 95616  
Affiliation: Department of Computer Science, University of California, Davis  
Web: http://avalon.cs.ucdavis.edu/)  
Abstract-found: 0
Intro-found: 1
Reference: [AO93] <author> Gregory Andrews and Ronald Olsson. </author> <title> The SR Programming Language: Concurrency in Practice. </title> <address> Benjamin/Cummings, Redwood City, CA, </address> <year> 1993. </year>
Reference-contexts: ILU [JSLJ97] uses an intermediate language to provide a language neutral environment for distributed systems. SR Background The expressive power of SR's communication mechanisms helps the programmer create complex communication patterns with relative ease <ref> [AO93] </ref>. For example, a file server written in SR can service "open" invocations only when file descriptors are available. Furthermore, it can schedule invocation servicing by priority. The following code fragment accomplishes this easily through SR's in statement.
Reference: [BK98] <author> Nat Brown and Charlie Kindel. </author> <title> Distributed Component Object Model Protocol (DCOM/1.0), </title> <month> January </month> <year> 1998. </year> <institution> Microsoft. </institution>
Reference-contexts: This paper presents an alternative approach to this problem. Synchronizing Interoperable Resources (SIR) extends the communication mechanisms in the SR programming language. This work will benefit distributed system researchers and developers as SIR's expressive communication facilitates prototype development. Related Work Many systems contain mechanisms for performing distributed communication. DCOM <ref> [BK98] </ref>, Java RMI [Mic98], and CORBA [Gro98] allow remote methods to be invoked through remote objects. RPC (Remote Procedure Call) was first investigated by [BN84], which subsequently lead to a significant body of research. ILU [JSLJ97] uses an intermediate language to provide a language neutral environment for distributed systems.
Reference: [BN84] <author> Andrew Birrell and Bruce Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Trans. Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: Related Work Many systems contain mechanisms for performing distributed communication. DCOM [BK98], Java RMI [Mic98], and CORBA [Gro98] allow remote methods to be invoked through remote objects. RPC (Remote Procedure Call) was first investigated by <ref> [BN84] </ref>, which subsequently lead to a significant body of research. ILU [JSLJ97] uses an intermediate language to provide a language neutral environment for distributed systems. SR Background The expressive power of SR's communication mechanisms helps the programmer create complex communication patterns with relative ease [AO93].
Reference: [Gro98] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification., </title> <month> Feb </month> <year> 1998. </year>
Reference-contexts: Synchronizing Interoperable Resources (SIR) extends the communication mechanisms in the SR programming language. This work will benefit distributed system researchers and developers as SIR's expressive communication facilitates prototype development. Related Work Many systems contain mechanisms for performing distributed communication. DCOM [BK98], Java RMI [Mic98], and CORBA <ref> [Gro98] </ref> allow remote methods to be invoked through remote objects. RPC (Remote Procedure Call) was first investigated by [BN84], which subsequently lead to a significant body of research. ILU [JSLJ97] uses an intermediate language to provide a language neutral environment for distributed systems.
Reference: [JSLJ97] <author> Bill Janssen, Mike Spreitzer, Dan Larner, and Chris Jacobi. </author> <title> ILU 2.0alpha12 Reference Manual, </title> <month> November </month> <year> 1997. </year> <note> XEROX PARC. </note>
Reference-contexts: Related Work Many systems contain mechanisms for performing distributed communication. DCOM [BK98], Java RMI [Mic98], and CORBA [Gro98] allow remote methods to be invoked through remote objects. RPC (Remote Procedure Call) was first investigated by [BN84], which subsequently lead to a significant body of research. ILU <ref> [JSLJ97] </ref> uses an intermediate language to provide a language neutral environment for distributed systems. SR Background The expressive power of SR's communication mechanisms helps the programmer create complex communication patterns with relative ease [AO93].
Reference: [Mic98] <author> Sun Microsystems. </author> <title> Java remote method invocation specification. </title> <month> July </month> <year> 1998. </year> <month> 2 </month>
Reference-contexts: Synchronizing Interoperable Resources (SIR) extends the communication mechanisms in the SR programming language. This work will benefit distributed system researchers and developers as SIR's expressive communication facilitates prototype development. Related Work Many systems contain mechanisms for performing distributed communication. DCOM [BK98], Java RMI <ref> [Mic98] </ref>, and CORBA [Gro98] allow remote methods to be invoked through remote objects. RPC (Remote Procedure Call) was first investigated by [BN84], which subsequently lead to a significant body of research. ILU [JSLJ97] uses an intermediate language to provide a language neutral environment for distributed systems.
References-found: 6

