URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P601.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts96.htm
Root-URL: http://www.mcs.anl.gov
Email: ffoster,geisler,tueckeg@mcs.anl.gov  carl@compbio.caltech.edu  
Title: Multimethod Communication for High-Performance Metacomputing Applications  
Author: Ian Fostery Jonathan Geislery Carl Kesselmanz Steve Tueckey 
Note: Preprint ANL/MCS-P601-0596  
Address: Argonne, IL 60439 U.S.A.  Pasadena, CA 91125 U.S.A.  
Affiliation: yMathematics and Computer Science Division Argonne National Laboratory  zBeckman Institute California Institute of Technology  
Abstract: Metacomputing systems use high-speed networks to connect supercomputers, mass storage systems, scientific instruments, and display devices with the objective of enabling parallel applications to access geographically distributed computing resources. However, experience shows that high performance often can be achieved only if applications can integrate diverse communication substrates, transport mechanisms, and protocols, chosen according to where communication is directed, what is communicated, or when communication is performed. In this article, we describe a software architecture that addresses this requirement. This architecture allows multiple communication methods to be supported transparently in a single application, with either automatic or user-specified selection criteria guiding the methods used for each communication. We describe an implementation of this architecture, based on the Nexus communication library, and use this implementation to evaluate performance issues. The implementation supported a wide variety of applications in the I-WAY metacomputing experiment at Supercomputing 95; we use one of these applications to provide a quantitative demonstration of the advantages of multimethod communication in a heterogeneous networked environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. E. Bal, J. G. Steiner, and A. S. Tanenbaum. </author> <title> Programming languages for distributed computing systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 261-322, </pages> <year> 1989. </year>
Reference-contexts: This result can be explained by the fact that nodes on the SP have good TCP connectivity and the use of a forwarder incurs additional overhead not found in the polling implementation. 13 5 Related Work Many researchers have proposed and investigated communication mechanisms for heterogeneous computing systems (for example, <ref> [1, 3, 23] </ref>). However, this work has typically been concerned with hiding heterogeneity by providing a uniform user-level interface rather than with exploiting and exposing the heterogeneous nature of networks and applications. Some communication libraries permit different communication methods to coexist.
Reference: [2] <author> E. Biagioni. </author> <title> A structured TCP in Standard ML. </title> <booktitle> In Proc. SIGCOMM '94, </booktitle> <year> 1994. </year> <note> Also as Technical Report CMU-CS-94-171, Carnegie Mellon. </note>
Reference-contexts: Early results with Horus suggest that these compositional formulations simplify implementation but can introduce overheads similar to those encountered when layering MPICH on Nexus: additional message header information, function calls, and messages. Tschudin [28] and the Fox project <ref> [2] </ref> have explored similar concepts and report similar results. Finally, we note that concepts similar to the Nexus communication link are used in other systems. For example, Split-C [9] uses a global pointer construct to support remote put and get operations within homogeneous systems.
Reference: [3] <author> A. Birrell and B. Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computing Systems, </journal> <volume> 2 </volume> <pages> 39-59, </pages> <year> 1984. </year>
Reference-contexts: This result can be explained by the fact that nodes on the SP have good TCP connectivity and the use of a forwarder incurs additional overhead not found in the polling implementation. 13 5 Related Work Many researchers have proposed and investigated communication mechanisms for heterogeneous computing systems (for example, <ref> [1, 3, 23] </ref>). However, this work has typically been concerned with hiding heterogeneity by providing a uniform user-level interface rather than with exploiting and exposing the heterogeneous nature of networks and applications. Some communication libraries permit different communication methods to coexist.
Reference: [4] <author> R. Braden, L. Zhang, D. Herzog, and S. Jamin. </author> <title> Resource ReSerVation Protocol (RSVP) Version 1 functional specification. </title> <type> Technical report, </type> <institution> ISI/PARC/UCS, </institution> <year> 1995. </year> <title> Work in progress. </title>
Reference-contexts: Future networks will support channel-based QoS reservation and negotiation <ref> [26, 4] </ref>. High-performance multimedia applications probably will want to reserve several channels providing different QoS; for example, they might use a low-latency, low-bandwidth channel for control information and a high-bandwidth, unreliable channel for image data transfer. * Interoperability of tools.
Reference: [5] <author> R. Butler and E. Lusk. </author> <title> Monitors, message, and clusters: The p4 parallel programming system. </title> <journal> Parallel Computing, </journal> <volume> 20 </volume> <pages> 547-564, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Some communication libraries permit different communication methods to coexist. For example, p4 and PVM on the Intel Paragon use the NX communication library for internal communication and TCP for external communication <ref> [5, 17] </ref>; p4 supports NX and TCP within a single process, while PVM uses a forwarding process for TCP. In both systems, the choice of method is hard coded and cannot be extended or changed without substantial re-engineering.
Reference: [6] <author> C. Catlett and L. </author> <title> Smarr. Metacomputing. </title> <journal> Communications of the ACM, </journal> <volume> 35(6) </volume> <pages> 44-52, </pages> <year> 1992. </year>
Reference-contexts: At the same time, the applications that run on these networks are becoming more sophisticated 1 in terms of the computations they perform and the types of data that they communicate <ref> [6] </ref>. The various gigabit testbeds showcased early examples of high-performance networked applications, while in the I-WAY networking experiment at Supercomputing 95, around sixty groups demonstrated applications designed to exploit networked supercomputers, mass storage systems, scientific instruments, and advanced display devices [10].
Reference: [7] <author> K. M. Chandy and C. Kesselman. </author> <title> CC ++ : A declarative concurrent object oriented programming notation. In Research Directions in Object Oriented Programming. </title> <publisher> The MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: These multimethod communication techniques have been implemented in the context of the Nexus multithreaded runtime system [15, 16]. Nexus has been used to implement a variety of parallel languages and communication libraries <ref> [7, 14, 12] </ref>, including the MPI implementation used extensively in the I-WAY wide area computing experiment [10]. We use Nexus to study the performance of alternative approaches to the implementation of various multimethod communication structures.
Reference: [8] <author> D. E. Comer. </author> <title> Internetworking with TCP/IP. </title> <publisher> Prentice Hall, 3rd edition, </publisher> <year> 1995. </year>
Reference-contexts: Complex applications such as those demonstrated on the I-WAY may integrate diverse computational resources, including visualization engines, parallel supercomputers, and database computers [10, 20, 21, 22]. While the Internet Protocol (IP) provides a standard transport mechanism for routed networks <ref> [8] </ref>, parallel computers and local area networks often support alternative, more efficient mechanisms. As we will show in Section 4, the use of specialized transport mechanisms can be crucial to application performance. * Network protocols.
Reference: [9] <author> D. Culler, A. Dusseau, S. Goldstein, A. Krishnamurthy, S. Lumetta, T. von Eicken, and K. Yelick. </author> <title> Parallel programming in Split-C. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 262-273. </pages> <publisher> ACM, </publisher> <year> 1993. </year>
Reference-contexts: Tschudin [28] and the Fox project [2] have explored similar concepts and report similar results. Finally, we note that concepts similar to the Nexus communication link are used in other systems. For example, Split-C <ref> [9] </ref> uses a global pointer construct to support remote put and get operations within homogeneous systems. Nexus mechanisms also share similarities with Active Messages [29] and Fast Messages [25].
Reference: [10] <author> T. DeFanti, I. Foster, M. Papka, R. Stevens, and T. Kuhfuss. </author> <title> Overview of the I-WAY: Wide area visual supercomputing. </title> <journal> International Journal of Supercomputer Applications, </journal> <volume> 10(2), </volume> <year> 1996. </year> <month> 15 </month>
Reference-contexts: The various gigabit testbeds showcased early examples of high-performance networked applications, while in the I-WAY networking experiment at Supercomputing 95, around sixty groups demonstrated applications designed to exploit networked supercomputers, mass storage systems, scientific instruments, and advanced display devices <ref> [10] </ref>. Experiences on the I-WAY and other networking testbeds show that metacomputing applications often need to exploit multiple network interfaces, low-level protocols, data encodings, and quality of service choices if they are to achieve acceptable performance. <p> These multimethod communication techniques have been implemented in the context of the Nexus multithreaded runtime system [15, 16]. Nexus has been used to implement a variety of parallel languages and communication libraries [7, 14, 12], including the MPI implementation used extensively in the I-WAY wide area computing experiment <ref> [10] </ref>. We use Nexus to study the performance of alternative approaches to the implementation of various multimethod communication structures. We conclude with a case study in which our multimethod communication techniques are used to improve dramatically the performance of an MPI-based climate model. <p> Complex applications such as those demonstrated on the I-WAY may integrate diverse computational resources, including visualization engines, parallel supercomputers, and database computers <ref> [10, 20, 21, 22] </ref>. While the Internet Protocol (IP) provides a standard transport mechanism for routed networks [8], parallel computers and local area networks often support alternative, more efficient mechanisms. <p> TCP forwarding in Nexus; performance results are presented in the next section. 4 Case Study: A Coupled Climate Model The multimethod communication techniques described in this article were used in the I-WAY networking experiment to support a variety of applications, ranging from coupled simulations to collaborative environments and networked instruments <ref> [10, 20] </ref>. In this section, we consider one such application|a coupled simulation|and study its behavior in a controlled environment similar to the I-WAY wide area network. In general, scientific simulations synchronize too frequently to permit distributed execution.
Reference: [11] <author> D. Diachin, L. Freitag, D. Heath, J. Herzog, W. Michels, and P. Plassmann. </author> <title> Remote engineering tools for the design of pollution control systems for commercial boilers. </title> <journal> International Journal of Supercomputer Applications, </journal> <volume> 10(2), </volume> <year> 1996. </year>
Reference-contexts: Collaborative environments require a mixture of protocols providing different combinations of high throughput, multicast, and high reliability <ref> [11, 12] </ref>. Applications that connect scientific instruments or other data sources to remote computing capabilities need to be able to switch among alternative communication substrates in the event of error or high load [20].
Reference: [12] <author> T. L. Disz, M. E. Papka, M. Pellegrino, and R. Stevens. </author> <title> Sharing visualization experiences among remote virtual environments. </title> <booktitle> In International Workshop on High Performance Computing for Computer Graphics and Visualization, </booktitle> <pages> pages 217-237. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Collaborative environments require a mixture of protocols providing different combinations of high throughput, multicast, and high reliability <ref> [11, 12] </ref>. Applications that connect scientific instruments or other data sources to remote computing capabilities need to be able to switch among alternative communication substrates in the event of error or high load [20]. <p> These multimethod communication techniques have been implemented in the context of the Nexus multithreaded runtime system [15, 16]. Nexus has been used to implement a variety of parallel languages and communication libraries <ref> [7, 14, 12] </ref>, including the MPI implementation used extensively in the I-WAY wide area computing experiment [10]. We use Nexus to study the performance of alternative approaches to the implementation of various multimethod communication structures. <p> As we will show in Section 4, the use of specialized transport mechanisms can be crucial to application performance. * Network protocols. Many network services are available in addition to the point-to-point reliable delivery typically provided by message-passing libraries. Applications such as collaborative engineering <ref> [12] </ref> can exploit specialized protocols such as Unreliable Data-gram Protocol (UDP), IP multicast, reliable multicast, and Realtime Transport Protocol (RTP) or application-specific protocols for selected data, such as shared state updates and video. * Quality of service (QoS). Future networks will support channel-based QoS reservation and negotiation [26, 4].
Reference: [13] <author> J. Drake, I. Foster, J. Michalakes, B. Toonen, and P. Worley. </author> <title> Design and performance of a scalable parallel Community Climate Model. </title> <journal> Parallel Computing, </journal> <volume> 21(10) </volume> <pages> 1571-1591, </pages> <year> 1995. </year>
Reference-contexts: The model that we study here is the Millenia coupled climate model, designed to run at relatively low resolutions for multicentury simulations. This model uses MPI for communication and combines a large atmosphere model (the Parallel Community Climate Model <ref> [13] </ref>) with an ocean model (from U. Wisconsin). The two models execute concurrently and perform considerable internal communication. Every two atmosphere steps, the models exchange information such as sea surface temperature and various fluxes. The models typically run for tens or hundreds of thousands of timesteps.
Reference: [14] <author> I. Foster and K. M. Chandy. </author> <title> Fortran M: A language for modular parallel programming. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 26(1) </volume> <pages> 24-35, </pages> <year> 1995. </year>
Reference-contexts: These multimethod communication techniques have been implemented in the context of the Nexus multithreaded runtime system [15, 16]. Nexus has been used to implement a variety of parallel languages and communication libraries <ref> [7, 14, 12] </ref>, including the MPI implementation used extensively in the I-WAY wide area computing experiment [10]. We use Nexus to study the performance of alternative approaches to the implementation of various multimethod communication structures.
Reference: [15] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> The Nexus task-parallel runtime system. </title> <booktitle> In Proc. 1st Intl Workshop on Parallel Processing, </booktitle> <pages> pages 457-462. </pages> <publisher> Tata McGraw Hill, </publisher> <year> 1994. </year>
Reference-contexts: These multimethod communication techniques have been implemented in the context of the Nexus multithreaded runtime system <ref> [15, 16] </ref>. Nexus has been used to implement a variety of parallel languages and communication libraries [7, 14, 12], including the MPI implementation used extensively in the I-WAY wide area computing experiment [10]. <p> In our system, communication is directed over a communication link that connects a communication startpoint to a communication endpoint. (We have adopted this terminology in preference to the term global pointer used in prior publications <ref> [15, 16] </ref>, because the latter led many readers to assume a distributed shared memory.) Before a startpoint can be used, it must be explicitly bound to an endpoint to form a communication link. <p> In general, then, the communication link and RSR abstractions overcome the limitations of two-sided communication primitives for multimethod communication. 3 Implementing Multimethod Communication We now turn our attention to the techniques used to implement multimethod communication. We describe these techniques in the context of Nexus <ref> [15, 16] </ref>, a portable, multithreaded communication library designed for use by parallel language compilers and higher-level communication libraries. In the discussion that follows, we refer to an address space, or virtual processor, as a context.
Reference: [16] <author> I. Foster, C. Kesselman, and S. Tuecke. </author> <title> The Nexus approach to integrating multithreading and communication. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <note> 1996. To appear. </note>
Reference-contexts: These multimethod communication techniques have been implemented in the context of the Nexus multithreaded runtime system <ref> [15, 16] </ref>. Nexus has been used to implement a variety of parallel languages and communication libraries [7, 14, 12], including the MPI implementation used extensively in the I-WAY wide area computing experiment [10]. <p> In our system, communication is directed over a communication link that connects a communication startpoint to a communication endpoint. (We have adopted this terminology in preference to the term global pointer used in prior publications <ref> [15, 16] </ref>, because the latter led many readers to assume a distributed shared memory.) Before a startpoint can be used, it must be explicitly bound to an endpoint to form a communication link. <p> In general, then, the communication link and RSR abstractions overcome the limitations of two-sided communication primitives for multimethod communication. 3 Implementing Multimethod Communication We now turn our attention to the techniques used to implement multimethod communication. We describe these techniques in the context of Nexus <ref> [15, 16] </ref>, a portable, multithreaded communication library designed for use by parallel language compilers and higher-level communication libraries. In the discussion that follows, we refer to an address space, or virtual processor, as a context. <p> Both MPL and TCP operate over the switch and can achieve maximum bandwidths of about 36 and 8 MB/sec, respectively. messages, the message-driven execution model supported by Nexus introduces some overhead on the SP2, relative to native MPL; we have provided a detailed analysis of these overheads elsewhere <ref> [16] </ref>. In the other graph, these same two lines coincide, thus indicating that Nexus overheads are not significant for larger messages. The upper two lines in each graph reveal a disadvantage of the unified polling scheme.
Reference: [17] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jiang, B. Manchek, and V. Sunderam. </author> <title> PVM: Parallel Virtual Machine|A User's Guide and Tutorial for Network Parallel Computing. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: We start with the observation that two-sided communication defines a specific protocol for synchronizing and extracting data at the receive side of the transfer. This protocol can hinder communication methods, such as stream communication, in which an explicit receive operation may not be appropriate. Message-passing libraries such as PVM <ref> [17] </ref>, MPL, or NX provide no notion of communication context: a receive can potentially match any send. This feature makes it difficult to associate a communication method with a specific set of communication operations or to support different methods on different communication operations. <p> Some communication libraries permit different communication methods to coexist. For example, p4 and PVM on the Intel Paragon use the NX communication library for internal communication and TCP for external communication <ref> [5, 17] </ref>; p4 supports NX and TCP within a single process, while PVM uses a forwarding process for TCP. In both systems, the choice of method is hard coded and cannot be extended or changed without substantial re-engineering.
Reference: [18] <author> W. Gropp, E. Lusk, N. Doss, and A. Skjellum. </author> <title> A high-performance, portable implementation of the MPI message passing interface standard. </title> <type> Preprint MCS-P567-0296, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, Ill., </institution> <year> 1996. </year>
Reference-contexts: In our experiments, the atmosphere model runs on 16 processors and the ocean model on 8 processors. Communication is achieved by using the MPICH <ref> [18] </ref> implementation of MPI layered on top of Nexus. This layering adds an execution time overhead of about 6 percent when compared with MPICH running on top of MPL. We measured execution times for the coupled model both without multimethod communication and with various multimethod communication techniques.
Reference: [19] <author> W. Gropp, E. Lusk, and A. Skjellum. </author> <title> Using MPI: Portable Parallel Programming with the Message Passing Interface. </title> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: While effective, this approach is tedious, error prone, and nonportable. A simpler approach would be to allow programmers to develop applications using a single high-level notation, such as the Message Passing Interface (MPI) <ref> [19] </ref> or a parallel language, and then provide mechanisms that allow the methods used for each communication to be determined independently of the program text. <p> This feature makes it difficult to associate a communication method with a specific set of communication operations or to support different methods on different communication operations. The situation is improved in MPI <ref> [19] </ref> by the introduction of communicators, which provide a scope for communication. 4 SP SP 0 1 2 spaces; three startpoints in address space 1, labeled SP, are linked to endpoints labeled EP in address spaces 0 and 2. One could associate a communication method with a communicator.
Reference: [20] <author> C. Lee, C. Kesselman, and S. Schwab. </author> <title> Near-real-time satellite image processing: Metacomputing in CC++. </title> <journal> Computer Graphics and Applications, </journal> <note> 1996. to appear. </note>
Reference-contexts: Applications that connect scientific instruments or other data sources to remote computing capabilities need to be able to switch among alternative communication substrates in the event of error or high load <ref> [20] </ref>. In general, the choice of communication method can vary according to where communication is directed, what is communicated, or when communication is performed. Metacomputing applications requiring multiple communication methods have previously been developed in an ad hoc fashion, with different program components coded to use different low-level communication mechanisms. <p> Complex applications such as those demonstrated on the I-WAY may integrate diverse computational resources, including visualization engines, parallel supercomputers, and database computers <ref> [10, 20, 21, 22] </ref>. While the Internet Protocol (IP) provides a standard transport mechanism for routed networks [8], parallel computers and local area networks often support alternative, more efficient mechanisms. <p> TCP forwarding in Nexus; performance results are presented in the next section. 4 Case Study: A Coupled Climate Model The multimethod communication techniques described in this article were used in the I-WAY networking experiment to support a variety of applications, ranging from coupled simulations to collaborative environments and networked instruments <ref> [10, 20] </ref>. In this section, we consider one such application|a coupled simulation|and study its behavior in a controlled environment similar to the I-WAY wide area network. In general, scientific simulations synchronize too frequently to permit distributed execution.
Reference: [21] <author> C. Mechoso et al. </author> <title> Distribution of a Coupled-ocean General Circulation Model across high-speed networks. </title> <booktitle> In Proceedings of the 4th International Symposium on Computational Fluid Dynamics, </booktitle> <year> 1991. </year>
Reference-contexts: Coupled models, which use multiple supercomputers to exploit large aggregate memory or to run different components more quickly on different architectures, need to use machine-specific communication methods within computers and optimized wide area protocols between computers <ref> [21, 22] </ref>. Collaborative environments require a mixture of protocols providing different combinations of high throughput, multicast, and high reliability [11, 12]. <p> Complex applications such as those demonstrated on the I-WAY may integrate diverse computational resources, including visualization engines, parallel supercomputers, and database computers <ref> [10, 20, 21, 22] </ref>. While the Internet Protocol (IP) provides a standard transport mechanism for routed networks [8], parallel computers and local area networks often support alternative, more efficient mechanisms. <p> In this section, we consider one such application|a coupled simulation|and study its behavior in a controlled environment similar to the I-WAY wide area network. In general, scientific simulations synchronize too frequently to permit distributed execution. One exception is multicomponent models constructed by coupling models of distinct subsystems <ref> [21, 22] </ref>. In such models, communication and synchronization between submodels is often less frequent than internal communication and synchronization. Hence, it can be feasible to execute distinct components on different supercomputers. <p> In some cases, different models may execute more efficiently on one computer than another; for example, one component may execute more quickly on a vector supercomputer, while another is better suited to an parallel computer <ref> [21] </ref>. In other cases, distributed execution can provide access to larger aggregate memory and hence permit the solution of larger problems [22]. The model that we study here is the Millenia coupled climate model, designed to run at relatively low resolutions for multicentury simulations.
Reference: [22] <author> M. Norman et al. </author> <title> Galaxies collide on the I-WAY: An example of heterogeneous wide-area collaborative supercomputing. </title> <journal> International Journal of Supercomputer Applications, </journal> <volume> 10(2), </volume> <year> 1996. </year>
Reference-contexts: Coupled models, which use multiple supercomputers to exploit large aggregate memory or to run different components more quickly on different architectures, need to use machine-specific communication methods within computers and optimized wide area protocols between computers <ref> [21, 22] </ref>. Collaborative environments require a mixture of protocols providing different combinations of high throughput, multicast, and high reliability [11, 12]. <p> Complex applications such as those demonstrated on the I-WAY may integrate diverse computational resources, including visualization engines, parallel supercomputers, and database computers <ref> [10, 20, 21, 22] </ref>. While the Internet Protocol (IP) provides a standard transport mechanism for routed networks [8], parallel computers and local area networks often support alternative, more efficient mechanisms. <p> In this section, we consider one such application|a coupled simulation|and study its behavior in a controlled environment similar to the I-WAY wide area network. In general, scientific simulations synchronize too frequently to permit distributed execution. One exception is multicomponent models constructed by coupling models of distinct subsystems <ref> [21, 22] </ref>. In such models, communication and synchronization between submodels is often less frequent than internal communication and synchronization. Hence, it can be feasible to execute distinct components on different supercomputers. <p> In other cases, distributed execution can provide access to larger aggregate memory and hence permit the solution of larger problems <ref> [22] </ref>. The model that we study here is the Millenia coupled climate model, designed to run at relatively low resolutions for multicentury simulations. This model uses MPI for communication and combines a large atmosphere model (the Parallel Community Climate Model [13]) with an ocean model (from U. Wisconsin).
Reference: [23] <author> D. Notkin, A. Black, E. Lazowska, H. Levy, J. Sanislo, and J. Zahorjan. </author> <title> Interconnecting heterogeneous computer systems. </title> <journal> Communications of the ACM, </journal> <volume> 31(3) </volume> <pages> 259-273, </pages> <year> 1988. </year>
Reference-contexts: This result can be explained by the fact that nodes on the SP have good TCP connectivity and the use of a forwarder incurs additional overhead not found in the polling implementation. 13 5 Related Work Many researchers have proposed and investigated communication mechanisms for heterogeneous computing systems (for example, <ref> [1, 3, 23] </ref>). However, this work has typically been concerned with hiding heterogeneity by providing a uniform user-level interface rather than with exploiting and exposing the heterogeneous nature of networks and applications. Some communication libraries permit different communication methods to coexist.
Reference: [24] <author> S. O'Malley and L. Peterson. </author> <title> A dynamic network architecture. </title> <journal> ACM Transactions on Computing Systems, </journal> <volume> 10(2) </volume> <pages> 110-143, </pages> <year> 1992. </year>
Reference-contexts: In both systems, the choice of method is hard coded and cannot be extended or changed without substantial re-engineering. The x-kernel <ref> [24] </ref> and the Horus distributed systems toolkit [30] both support the concurrent use of different communication methods. Horus provides some support for varying the communication method associated with an entire group.
Reference: [25] <author> S. Pakin, M. Lauria, and A. Chien. </author> <title> High performance messaging on workstations: Illi-nois Fast Messages (FM) for Myrinet. </title> <booktitle> In Proceedings of Supercomputing '95, </booktitle> <year> 1995. </year> <note> http://www.supercomp.org/sc95/proceedings/. </note>
Reference-contexts: Finally, we note that concepts similar to the Nexus communication link are used in other systems. For example, Split-C [9] uses a global pointer construct to support remote put and get operations within homogeneous systems. Nexus mechanisms also share similarities with Active Messages [29] and Fast Messages <ref> [25] </ref>. However the association of communication method choices with startpoints is unique to Nexus. 6 Conclusions We have described techniques for representing and implementing multimethod communication in heterogeneous environments.
Reference: [26] <author> C. Partridge. </author> <title> Gigabit Networking. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Future networks will support channel-based QoS reservation and negotiation <ref> [26, 4] </ref>. High-performance multimedia applications probably will want to reserve several channels providing different QoS; for example, they might use a low-latency, low-bandwidth channel for control information and a high-bandwidth, unreliable channel for image data transfer. * Interoperability of tools.
Reference: [27] <author> B. Schneier. </author> <title> Applied Cryptography. </title> <publisher> John Wiley and Sons, </publisher> <year> 1993. </year>
Reference-contexts: In heterogeneous environments, an MPI program may need to interoperate with other MPI implementations. In each case, different protocols must be used to communicate with different processes. * Security. Different mechanisms may be used to authenticate or protect the integrity or confidentiality of communicated data <ref> [27] </ref>, depending on where communication is directed and what is communicated. For example, control information might be encrypted outside a site, but not within, while data is not encrypted in either case.
Reference: [28] <author> C. Tschudin. </author> <title> Flexible protocol stacks. </title> <booktitle> In Proc. ACM SIGCOMM '91. ACM, </booktitle> <year> 1991. </year> <month> 16 </month>
Reference-contexts: These mechanisms could be used within Nexus to simplify the development of new communication modules. Early results with Horus suggest that these compositional formulations simplify implementation but can introduce overheads similar to those encountered when layering MPICH on Nexus: additional message header information, function calls, and messages. Tschudin <ref> [28] </ref> and the Fox project [2] have explored similar concepts and report similar results. Finally, we note that concepts similar to the Nexus communication link are used in other systems. For example, Split-C [9] uses a global pointer construct to support remote put and get operations within homogeneous systems.
Reference: [29] <author> T. v. Eicken, D. Culler, S. Goldstein, and K. Schauser. </author> <title> Active messages: A mechanism for integrated communication and computation. </title> <booktitle> In Proceedings of the 19th International Symposium on Computer Architecture, </booktitle> <address> Gold Coast, Australia, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: Finally, we note that concepts similar to the Nexus communication link are used in other systems. For example, Split-C [9] uses a global pointer construct to support remote put and get operations within homogeneous systems. Nexus mechanisms also share similarities with Active Messages <ref> [29] </ref> and Fast Messages [25]. However the association of communication method choices with startpoints is unique to Nexus. 6 Conclusions We have described techniques for representing and implementing multimethod communication in heterogeneous environments.
Reference: [30] <author> R. van Renesse, K. Birman, R. Friedman, M. Hayden, and D. Karr. </author> <title> A framework for protocol composition in Horus. </title> <booktitle> In Proc. Principles of Distributed Computing Conf., </booktitle> <year> 1995. </year> <note> http://www.cs.cornell.edu/Info/People/rvr/papers/podc/podc.html. 17 </note>
Reference-contexts: In both systems, the choice of method is hard coded and cannot be extended or changed without substantial re-engineering. The x-kernel [24] and the Horus distributed systems toolkit <ref> [30] </ref> both support the concurrent use of different communication methods. Horus provides some support for varying the communication method associated with an entire group. However, it does not provide for automatic method selection or for the migration of communication capabilities (with associated method information) between processes.
References-found: 30

