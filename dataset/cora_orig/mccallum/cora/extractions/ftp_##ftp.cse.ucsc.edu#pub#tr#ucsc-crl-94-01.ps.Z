URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-94-01.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: Classifying Networks: When Can Two Anonymous Networks Compute The Same Vector-Valued Functions?  
Author: Nancy E. Norris 
Address: Santa Cruz, CA 95064 USA  
Affiliation: Baskin Center for Computer Engineering Information Sciences University of California, Santa Cruz  
Date: March 30, 1994  
Pubnum: UCSC-CRL-94-01  
Abstract: An "anonymous network" is a computer network in which all processors run the same algorithm during a computation. We will consider two classifications of anonymous networks: Networks will be called "f-equivalent" if the set of vector-valued functions each can anonymously compute is the same, and "p-equivalent" if the set of functions each can compute is the same, "up to a permutation". We first give a characterization of the vector-valued functions a given network can anonymously compute. This extends a result in [YK88] characterizing the scalar-valued functions a network can compute. Next, we develop algebraic and graph-theoretic techniques for handling edge-labeled digraphs. We will use these techniques, along with results from algebraic automata theory and permutation group theory, to derive a polynomial-time algorithm for determining whether two networks are f - equivalent. This will yield a polynomial-time algorithm for determining whether two edge-labeled digraphs have the same lattice of quotient-graph isomorphisms, and will let us conclude that classifying networks by what they can compute is easy. Classifying networks by "p-equivalence", on the other hand, is likely to be a much harder problem. We will present a polynomial-time transformation of the group-isomorphism problem to the problem of "p-equivalence". As of this writing, the best known algorithm solves group-isomorphism in O(n lg n ) time for a group of order n. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: [ABR87] <author> Fred Annextein, Marc Baumslag, and Arnold Rosenberg. </author> <title> Group action graphs and parallel architectures. </title> <type> Technical Report COINS Technical Report 87-133, </type> <institution> Department of Computer and Information Science, University of Massachusetts at Amherst, </institution> <year> 1987. </year>
Reference-contexts: Then is a covering map from G 1 to G 2 , where G 1 and G 2 are the operator graphs with respect to X, for T 1 and T 2 , respectively. 3 The term "operator graph" may be due to F.R.K. Chung of Bellcore. See also <ref> [ABR87] </ref>. Every operator graph is isomorphic with a Schrier coset graph [Bol79], which is an operator graph in which V (G) is the set of left cosets of a subgroup of G and G acts on the left cosets by left multiplication. (Corollary 4.4.1). 4.4. <p> Chung of Bellcore. An older name for operator graph is "group action graph"; see <ref> [ABR87] </ref> and [BR91]. As mentioned in the footnote in Section 4.4, any operator graph of G is isomorphic with a Schrier coset graph of a group G, which is an operator graph of the action of G on the left cosets of a subgroup of G. See [Bol79].
Reference: [AHU74] <author> A. Aho, J. Hopcroft, and J. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison Wesley, </publisher> <year> 1974. </year>
Reference-contexts: P generates the set of reduced closed paths through v in G under concatenation with cancellation. 6.3. Complexity 91 Proof of (1): Use a graph traversal algorithm (e.g., a depth-first tree algorithm as in <ref> [AHU74] </ref>) to find T in O (m) steps.
Reference: [Ang80] <author> D. Angluin. </author> <title> Local and global properties in networks of processors. </title> <booktitle> In ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 82-93, </pages> <year> 1980. </year>
Reference-contexts: Definition 2.2.4: A function is said to be computable if it can be computed on a Turing machine. 1 For instance, see [MA89] and [SS89]. The papers [YK87b,YK88] and <ref> [Ang80] </ref>, along with others, also discuss leader election. 2 There are a number of alternative ways to define the synchronous execution that we could have used here; e.g., a computation begun at time t could be completed at time t + 1. 2.2. <p> That is, there is a covering map from U to G. U is infinite unless G is a finite tree. The following results are standard in algebraic topology, for instance, see [Mas67] and the papers <ref> [Ang80] </ref> and [Lei82]. <p> This consruction is given in <ref> [Ang80] </ref> and [Lei82]. 20 2. Characterizing The Functions A Network Can Compute U v . That is, the vertices in the set ffi 1 (i) 2 V (U)g are labeled with the ith component of ~x. <p> In 1956 Moore ([Moo56]) showed that states s 1 and s 2 are n 2 equivalent in an n state machine iff they are k-equivalent for all positive k. An argument similar to Moore's gives us Proposition 2.4.1 in this paper. Anonymous Computing: The papers <ref> [Ang80] </ref>, [YK87b,YK87a,YK88] and [KKvdB90] all require that an algorithm which runs on an anonymous network work for any edge-labeling of the network satisfying Property 2.
Reference: [ASW88] <author> H. Attiya, M. Snir, and M. Warmuth. </author> <title> Computing on an anonymous ring. </title> <journal> J. ACM, </journal> <volume> 35 </volume> <pages> 845-875, </pages> <year> 1988. </year>
Reference-contexts: The viewpoint of this paper is that a network's edge-labeling is an intrinsic part of the network, and we require an algorithm to work only on a particular edge-labeling. In <ref> [ASW88] </ref>, Attiya, Snir and Warmuth gave the following characterization of the functions computable on a ring of n processors: Theorem 2.6.1: 1. Let G be an "oriented" ring of n processors. <p> The anonymous computing literature explores a number of issues which we do not address in this paper. For instance, <ref> [ASW88] </ref> and [YK88] show that certain computations are impossible for an anonymous network if the network does not `know' how many processors it has. Most of the papers on anonymous computing consider the running time of algorithms, which we do not, except to differentiate hard from easy problems.
Reference: [B 89] <author> J. Richard Buchi. </author> <title> Finite Automata, Their Algebras and Grammars. </title> <publisher> Springer Verlag, </publisher> <year> 1989. </year>
Reference-contexts: By Property 2 in Chapter 2 the elements of E (G) are one-to-one on V (G), and so f a induces a bijection from [v] to [w]. Hence j [v]j = j [w]j. 2 1 <ref> [B 89] </ref> page 91, also [BS81] 3.2. Universal Covers And Vertex Partitions 35 The next lemma gives a relationship between graph covering maps and c-partitions. It states that the partition induced by the inverse image of a covering map is a c-partition. <p> Voltage graphs are used in [GT87] to compute covering graphs for given graphs; that is, for reconstructing a graph from one of its quotients. The lattices of quotient graphs and of subgroups: In <ref> [B 89] </ref>, Buchi derives related results for "k-algebras". <p> Congruence relations induce quotient algebras in the usual way. Buchi proves the following: Theorem 4.7.1: (Theorem 4 in <ref> [B 89] </ref> ) The lattice of quotients of a reduced k-algebra A is anti-isomorphic to the lattice of all congruences on A, where the anti-isomorphism maps each quotient A= ~ to the congruence ~. <p> Buchi also shows the following for a family ff i of congruences on a k-algebra A: Theorem 4.7.2: (Theorem 4 part 2 in <ref> [B 89] </ref> ) A=( i ff i ) is isomorphic to N (A=ff i ), where ` T ' is the meet-operator on the lattice of congruences and ` N ' is the "reduced direct sum"; 64 4.
Reference: [BB89] <author> Paul Beame and Hans L. Bodlaender. </author> <title> Distributed computing on transitive networks: The torus. </title> <booktitle> In Proceedings of The Sixth Annual Symposium on Theoretical Aspects of Computer Science, Springer Verlag Lecture Notes in Computer Science, </booktitle> <pages> pages 294-303, </pages> <address> Heidelberg, </address> <year> 1989. </year>
Reference-contexts: In [BMW93], Bodlander, Moran and Warmuth show that this lower bound remains even if the set of possible ids is small, i.e., is n 1+* for positive *. In <ref> [BB89] </ref>, Beame and Bodlander investigate the message complexity of distributed computing The papers by Scheiber and Snir ([SS89]) and by Matias and Afek ([MA89]) show that the processors in an anonymous network can distributively compute distinct ids for themselves by using probabalistic algorithms to break symmetry.
Reference: [BMW93] <author> H. L. Bodlaender, S. Moran, and M. Warmuth. </author> <title> The distributed bit-complexity of the ring: From the anonymous to the non-anonymous case. </title> <note> To appear in Journal of Information and Computation, </note> <year> 1993. </year>
Reference-contexts: In <ref> [BMW93] </ref>, Bodlander, Moran and Warmuth show that this lower bound remains even if the set of possible ids is small, i.e., is n 1+* for positive *.
Reference: [Bol79] <author> Bela Bollobas. </author> <title> Graph Theory, An Introductory Course. </title> <publisher> Springer Verlag, </publisher> <year> 1979. </year>
Reference-contexts: Chung of Bellcore. See also [ABR87]. Every operator graph is isomorphic with a Schrier coset graph <ref> [Bol79] </ref>, which is an operator graph in which V (G) is the set of left cosets of a subgroup of G and G acts on the left cosets by left multiplication. (Corollary 4.4.1). 4.4. <p> As mentioned in the footnote in Section 4.4, any operator graph of G is isomorphic with a Schrier coset graph of a group G, which is an operator graph of the action of G on the left cosets of a subgroup of G. See <ref> [Bol79] </ref>. An operator graph is a special case of a "G-graph", defined in [Coh89]. If G is a group, a "G-graph" is a graph G such that G acts on V (G) and E (G) in such a way that the orientations and inverses of the edges are preserved.
Reference: [BR91] <author> Marc Baumslag and Arnold Rosenberg. </author> <title> Processor-time tradeoffs for Cayley graph interconection networks. </title> <booktitle> In Proc. of the Sixth Distributed Memory Computing Conference, </booktitle> <pages> pages 630-636, </pages> <year> 1991. </year>
Reference-contexts: Chung of Bellcore. An older name for operator graph is "group action graph"; see [ABR87] and <ref> [BR91] </ref>. As mentioned in the footnote in Section 4.4, any operator graph of G is isomorphic with a Schrier coset graph of a group G, which is an operator graph of the action of G on the left cosets of a subgroup of G. See [Bol79].
Reference: [BS81] <author> Stanley Burris and H. P. Sankappanavar. </author> <title> Algebraic Topology: An Introduction. </title> <publisher> Springer Verlag, </publisher> <year> 1981. </year>
Reference-contexts: By Property 2 in Chapter 2 the elements of E (G) are one-to-one on V (G), and so f a induces a bijection from [v] to [w]. Hence j [v]j = j [w]j. 2 1 [B 89] page 91, also <ref> [BS81] </ref> 3.2. Universal Covers And Vertex Partitions 35 The next lemma gives a relationship between graph covering maps and c-partitions. It states that the partition induced by the inverse image of a covering map is a c-partition. <p> Hence ff is a bijection. It remains to show that ff preserves the lattice meet- and join operations. We recall a proposition from lattice theory: 1: (Theorem 2.3 in <ref> [BS81] </ref>). A bijective map ff between lattices is a lattice isomorphism iff both ff and ff 1 are order-preserving.
Reference: [Coh89] <author> Daniel E. Cohen. </author> <title> Combinatorial Group Theory: A Topological Approach. </title> <publisher> London Mathematical Society, Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: From combinatorial group theory we obtain the related notion of a "groupoid". (See <ref> [Coh89] </ref>.) A groupoid is a set G together with a partial multiplication which is associative where defined, such that any element in G has a partial inverse. <p> See [Bol79]. An operator graph is a special case of a "G-graph", defined in <ref> [Coh89] </ref>. If G is a group, a "G-graph" is a graph G such that G acts on V (G) and E (G) in such a way that the orientations and inverses of the edges are preserved. <p> Thus G= can be constructed in time polynomial in m. 2 To construct the set P defined above we will make use of a result which is presented in the literature on combinatorial group theory as follows: Proposition 6.3.2: (Corollary 1, page 128 in <ref> [Coh89] </ref>. See also Theorem 5.2 in [Mas67].) Let G be a connected graph and let T be a spanning tree of G with root v.
Reference: [DP90] <author> B. A. Davey and H. A. Priestley. </author> <title> Introduction to Lattices and Order. </title> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: This induces a lattice structure on the set of symmetries of G in a natural way. We will make use of the following proposition from lattice theory: Proposition 5.3.1: (Corollary 2.17 in <ref> [DP90] </ref> ) Let X be a set and L a family of subsets of X, ordered by inclusion, such that 1. X 2 L T i2I A i 2 L for every non-empty family fA i g i2I L.
Reference: [FLM85] <author> M. J. Fischer, N. A. Lynch, and M. Merritt. </author> <title> Easy impossiblilty proofs for distributed consensus problems. </title> <booktitle> In Proceedings of The Fourth Annual ACM Symp. on Principles of Distributed Computing, </booktitle> <pages> pages 59-70, </pages> <address> Minaki, Ontario, </address> <year> 1985. </year>
Reference: [FLP85] <author> M. J. Fischer, N. A. Lynch, and M. S. Patterson. </author> <title> Impossiblity of distributed consensus with one faulty processor. </title> <journal> J. ACM, </journal> <volume> 32 </volume> <pages> 374-382, </pages> <year> 1985. </year>
Reference: [GT87] <author> J. Gross and T. Tucker. </author> <title> Topological Graph Theory. </title> <publisher> Wiley Interscience, </publisher> <year> 1987. </year>
Reference-contexts: The term voltage graph was coined by J Gross (<ref> [GT87] </ref>) and refers to a digraph G whose edges are given "plus" and "minus" directions, together with a map from the plus-directed edges into a permutation group. Voltage graphs are used in [GT87] to compute covering graphs for given graphs; that is, for reconstructing a graph from one of its quotients. The lattices of quotient graphs and of subgroups: In [B 89], Buchi derives related results for "k-algebras".
Reference: [Hol82] <author> W. M. L. Holcombe. </author> <title> Algebraic Automata Theory. Cambridge Studies in Advanced Mathematics, </title> <publisher> Cambridge University Press, </publisher> <year> 1982. </year>
Reference-contexts: In subsequent chapters we will make heavy use of Proposition 2.3.1, which defines graph isomorphism in terms of a monoid associated with the graph. Related Results: The "edge-label monoid", which we introduce in this chapter, is standard in algebraic automata theory; e.g., see <ref> [Hol82] </ref>. We also define what it means for one graph to "cover" another graph and define the "universal cover" of a graph. These definitions are from algebraic topology; see [Mas67]. <p> The monoid E (G) is isomorphic to the quotient of the free semigroup mod this relation. See <ref> [Hol82] </ref> 16 2. <p> ) j whenever U 2n1 i ~x ' U 2n1 and so processor i computes the correct value. 2 2.6 Related Work The Edge-Label Monoid: There is an extensive literature on the semigroups associated with finite-state machines, usually presented under the heading of "algebraic automata theory" (e.g., see Holcombe's book, <ref> [Hol82] </ref>). Any finite-state machine M has associated with it a graph G = hV (G); E (G); A (G)i, where G need not satisfy Property 2. <p> Then G 2 and G 1 compute the same set of functions, so S 2 = S 1 . 2 3.6 Related Work A generalization of our "correct partition" appears in algebraic automata theory under the name "admissible partition". (See <ref> [Hol82] </ref>). <p> It is not unreasonable to allow two edges directed towards a vertex in a computer network to have the same label. If the edge-label condition were dropped, edge-label functions would become edge-label relations. Graphs with edge-label relations are well-studied in algebraic automata theory (e.g., see <ref> [Hol82] </ref>), and some of the results of that field might transfer to this case. In particular, the definition of "covering map" found in algebraic automata theory extends the definition we gave to graphs with edge-label relations.
Reference: [HU79] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year> <note> References 99 </note>
Reference-contexts: Proposition 6.3.1 (next) gives an algorithm for finding the coarsest partition of a graph G. Propostion 6.3.1 uses a modification of a DFA minimization algorithm ( Page 68 in <ref> [HU79] </ref>) to find . Recall that vertices v and w are in the same block of iff U v ' U w (Proposition 3.2.2 in Chapter 3).
Reference: [Jac74] <author> Nathan Jacobson. Basic Algebra I. W. H. Freeman, </author> <year> 1974. </year>
Reference-contexts: We will find a close correspondence between block-systems and subgroups, and between the cosets of a subgroup and the blocks of a block-system. The results in this section are well-known; see <ref> [Jac74] </ref>, [Rob82], [Sco87], and [Wei64]. Notation: 1. Write (G; S) for a permutation group G on a finite set S. 2. Write Sym (S) for the symmetric group on S. 3. Write G v for the stabilizer subgroup of G of the point v 2 S. <p> The aim is to formalize the idea of a group action for use in the next section, where we will construct graphs from groups and actions. Again, the material in this section is review. See <ref> [Jac74] </ref> for a description of action and equivalence and [Mas67] for a definition of equivariant maps. <p> In this case H = G v and Proposition 4.3.2 shows that G acts on the left cosets of G v in the same way that it acts on S. 2 Massey pg 255. The notion of equivalent actions is from <ref> [Jac74] </ref>, page 72. 54 4. Group Graphs 4.4 Operator Graphs Recall that a group-graph is a graph whose edge-label monoid is a group. The next three sections examine the structure of group-graphs.
Reference: [KKvdB90] <author> E. Kranakis, D. Krizanc, and J. van den Berg. </author> <title> Computing boolean functions on anonymous networks. </title> <booktitle> In Proceedings of The International Conference on Algorithms, Languages and Programming, </booktitle> <pages> pages 254-267, </pages> <year> 1990. </year>
Reference-contexts: In 1956 Moore ([Moo56]) showed that states s 1 and s 2 are n 2 equivalent in an n state machine iff they are k-equivalent for all positive k. An argument similar to Moore's gives us Proposition 2.4.1 in this paper. Anonymous Computing: The papers [Ang80], [YK87b,YK87a,YK88] and <ref> [KKvdB90] </ref> all require that an algorithm which runs on an anonymous network work for any edge-labeling of the network satisfying Property 2.
Reference: [Koc70] <author> R. Kochendorffer. </author> <title> Group Theory. </title> <publisher> McGraw-Hill, </publisher> <year> 1970. </year>
Reference: [Lei82] <author> F. Thomas Leighton. </author> <title> Finite covers of graphs. </title> <journal> Journal of Combinatorial Theory b, </journal> <volume> 33 </volume> <pages> 231-238, </pages> <year> 1982. </year>
Reference-contexts: That is, there is a covering map from U to G. U is infinite unless G is a finite tree. The following results are standard in algebraic topology, for instance, see [Mas67] and the papers [Ang80] and <ref> [Lei82] </ref>. <p> This consruction is given in [Ang80] and <ref> [Lei82] </ref>. 20 2. Characterizing The Functions A Network Can Compute U v . That is, the vertices in the set ffi 1 (i) 2 V (U)g are labeled with the ith component of ~x.
Reference: [Luk90] <author> Eugene Luks. </author> <title> Lectures in polynomial-time computation in groups. </title> <type> Technical Report CIS-TR-90-21, </type> <institution> Department of Computer and Information Science, University of Oregon, Eugene, </institution> <address> OR, </address> <year> 1990. </year>
Reference-contexts: C. Sims, in <ref> [Luk90] </ref>. The version of the algorithm we use is from [Luk90]. 5.5. <p> C. Sims, in <ref> [Luk90] </ref>. The version of the algorithm we use is from [Luk90]. 5.5. Computing Constraints 75 * For i = 2 until A i1 = A i ; A i = A i1 [ f (g (r); g (s)) : (r; s) 2 A i1 and g 2 Xg. 2 Theorem 5.5.1: Fix a vertex v 2 V (G).
Reference: [MA89] <author> Y. Matias and Y. Afek. </author> <title> Simple and efficient election algorithms for anonymous networks. </title> <editor> In J. C. Bermond and M. Raynal, editors, </editor> <booktitle> Third International Workshop on Distributed Algorithms, Springer Verlag Lecture Notes in Computer Science, </booktitle> <volume> volume 392, </volume> <pages> pages 183-194, </pages> <address> Heidelberg, </address> <year> 1989. </year>
Reference-contexts: Definition 2.2.4: A function is said to be computable if it can be computed on a Turing machine. 1 For instance, see <ref> [MA89] </ref> and [SS89]. The papers [YK87b,YK88] and [Ang80], along with others, also discuss leader election. 2 There are a number of alternative ways to define the synchronous execution that we could have used here; e.g., a computation begun at time t could be completed at time t + 1. 2.2. <p> The synchronous execution of an algorithm is in some sense the "hardest case" for an anonymous network. In aynchronous executions, processors may be able to make use of the random arrival-time of messages to break symmetry and to distinguish among themselves. (For instance, see the papers <ref> [MA89] </ref> and [SS89] in which the authors showed that processors in an anonymous network can choose distinct id's for themselves if they have access to a coin-flip).
Reference: [Mas67] <author> W. S. Massey. </author> <title> Algebraic Topology: An Introduction. </title> <publisher> Springer Verlag, </publisher> <year> 1967. </year>
Reference-contexts: Related Results: The "edge-label monoid", which we introduce in this chapter, is standard in algebraic automata theory; e.g., see [Hol82]. We also define what it means for one graph to "cover" another graph and define the "universal cover" of a graph. These definitions are from algebraic topology; see <ref> [Mas67] </ref>. We will review these and some results from the anonymous computing literature at the end of the chapter. 2.2 The Model Intuitively, a network is nothing more than a collection of processors connected by two-way links. <p> Definition 2.4.1: The universal cover U of a graph G is a tree covering G. That is, there is a covering map from U to G. U is infinite unless G is a finite tree. The following results are standard in algebraic topology, for instance, see <ref> [Mas67] </ref> and the papers [Ang80] and [Lei82]. <p> Thus instead of completing the partial functions in our edge-label monoid, we could have defined the "edge-label groupoid" of a graph in this paper. Covering Maps: The definition of covering map we use is borrowed more-or-less intact from algebraic topology (for instance, see <ref> [Mas67] </ref>). Algebraic automata theory uses a generalization of this notion of covering. In our notation, it is given as follows: Let G and H be edge-labeled digraphs, not necessarily satisfying Property 2. <p> The aim is to formalize the idea of a group action for use in the next section, where we will construct graphs from groups and actions. Again, the material in this section is review. See [Jac74] for a description of action and equivalence and <ref> [Mas67] </ref> for a definition of equivariant maps. <p> See also Theorem 5.2 in <ref> [Mas67] </ref>.) Let G be a connected graph and let T be a spanning tree of G with root v. Then the fundamental group (G; v) of G at v is free, with one basis element for each edge e = hu a wi not in T .
Reference: [Mil78] <author> Gary Miller. </author> <title> On the n lg n isomorphism technique. </title> <booktitle> In Proceedings of the Tenth ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 51-58, </pages> <year> 1978. </year>
Reference-contexts: We will see that a network can have a subexponential number of both block-systems and symmetries. The following proposition is folklore in computational group theory. It may be due to Tarjan (See <ref> [Mil78] </ref>). Proposition 5.2.1: A group G of order n has O (n lg n ) subgroups. G is generated by a set of size no bigger than lg n. <p> The group isomorphism problem is the following: Problem: Group Isomorphism Given: Groups G 1 and G 2 of order n, given as group tables. Question: Are G 1 and G 2 isomorphic? Proposition 5.6.1: (From <ref> [Mil78] </ref>) Group isomorphism can be solved in O (n log n+O (1) ) steps. We have: Theorem 5.6.1: There is a polynomial-time transformation of the group-isomorphism problem to the problem of determining if two networks are p-equivalent. 5.6.
Reference: [Moo56] <author> E. F. Moore. </author> <title> Gedanken-experiments on sequential machines. </title> <journal> Annals of Mathematics Studies, </journal> <volume> 34 </volume> <pages> 129-153, </pages> <year> 1956. </year>
Reference: [MW93] <author> S. Moran and M. Warmuth. </author> <title> Gap theorems for distributed computation. </title> <note> To appear in SIAM Journal on Computing, </note> <year> 1993. </year>
Reference: [Nor93] <author> Nancy Norris. </author> <title> Universal covers of graphs: Isomorphism to depth n 1 implies isomorphism to all depths. </title> <note> To appear in Discrete Applied Mathematics, </note> <year> 1993. </year>
Reference-contexts: The main result of this section is Proposition 2.4.1, which states that two rooted universal covers are isomorphic if they are isomorphic out to finite (small) depth. This result is proved in greater generality in <ref> [Nor93] </ref>. Here we give a shortened proof for the class of graphs considered in this paper. Definition 2.4.1: The universal cover U of a graph G is a tree covering G. That is, there is a covering map from U to G.
Reference: [RFH72] <author> P. Rosenstiehl, J. R. Fiskel, and A. Hollinger. </author> <title> Intelligent graphs: Networks of finite automata capable of solving graph problems. </title> <editor> In Ronald Read, editor, </editor> <booktitle> Graph Theory and Computing, </booktitle> <pages> pages 219 - 265. </pages> <publisher> Academic Press, </publisher> <year> 1972. </year>
Reference: [Rob82] <author> Derek J. S. Robinson. </author> <title> A Course in the Theory of Groups. </title> <publisher> Springer Verlag, </publisher> <year> 1982. </year>
Reference-contexts: We will find a close correspondence between block-systems and subgroups, and between the cosets of a subgroup and the blocks of a block-system. The results in this section are well-known; see [Jac74], <ref> [Rob82] </ref>, [Sco87], and [Wei64]. Notation: 1. Write (G; S) for a permutation group G on a finite set S. 2. Write Sym (S) for the symmetric group on S. 3. Write G v for the stabilizer subgroup of G of the point v 2 S. <p> on itself by right multiplication. 1 If we fix a group G and a set S, there is a one-to-one correspondence between the set of group actions T : G fi S ! S and the set of group homomorphisms T : G ! Sym (S) (See Proposition 1.6.5 in <ref> [Rob82] </ref>). This is given as follows: If T is an action: G fi S ! S, then the corresponding homomorphism T maps each group element g 2 G to the permutation s ! T (g; s). That is, T (g)(s) = T (g; s). <p> Then the subgroup hgG v ; J i generated by gG v and J contains at least twice as many left cosets of G v as J contains. Recall that jGj=jG v j = n for any transitive group G. (See Proposition 1.6.1 in <ref> [Rob82] </ref>.) Therefore, there is a collection of no more than lg n left cosets of G v which generates G (that is, G is generated by the set of group-elements comprising these cosets).
Reference: [Sco87] <author> W. R. Scott. </author> <title> Group Theory. </title> <publisher> Dover Publications, </publisher> <year> 1987. </year>
Reference-contexts: We will find a close correspondence between block-systems and subgroups, and between the cosets of a subgroup and the blocks of a block-system. The results in this section are well-known; see [Jac74], [Rob82], <ref> [Sco87] </ref>, and [Wei64]. Notation: 1. Write (G; S) for a permutation group G on a finite set S. 2. Write Sym (S) for the symmetric group on S. 3. Write G v for the stabilizer subgroup of G of the point v 2 S. <p> Example 4.2.1: If G is a connected graph for which E (G) is a group, then the block-systems of E (G) are the c-partitions of G. Proposition 4.2.3: (Proposition 10.5.4 in <ref> [Sco87] </ref>) Let B be a block and a collection of blocks containing B. Then is a block-system iff is the set of all distinct blocks fgB : g 2 Gg. Note that: Remark 4.2.1: A block-system is uniquely determined by a single block. <p> If we fix an element v 2 S, there is a one-to-one correspondence between the blocks of G containing v and the subgroups of G containing the stabilizer subgroup G v : Proposition 4.2.4: (Proposition 10.5.6 in <ref> [Sco87] </ref>) There is a bijection T from the set of all subgroups of G containing G v onto the set of all blocks of G containing v. T is given by: T (H) = H (v). <p> Group Graphs C Sym (S) G = fh 2 Sym (S) : hg = gh for all g 2 Gg. Note that: Proposition 4.6.1: (Proposition 10.3.6 in <ref> [Sco87] </ref>) If (G; S) is a regular permutation group then C Sym (S) G is regular and isomorphic to G. The next proposition is an immediate corollary of Proposition 2.3.1 in Chapter 2.
Reference: [SS89] <author> B. Schieber and M. Snir. </author> <title> Calling names on nameless networks. </title> <booktitle> In Eighth Annual ACM Symposium on the Principles of Distributed Computation, </booktitle> <pages> pages 319-328, </pages> <year> 1989. </year>
Reference-contexts: Definition 2.2.4: A function is said to be computable if it can be computed on a Turing machine. 1 For instance, see [MA89] and <ref> [SS89] </ref>. The papers [YK87b,YK88] and [Ang80], along with others, also discuss leader election. 2 There are a number of alternative ways to define the synchronous execution that we could have used here; e.g., a computation begun at time t could be completed at time t + 1. 2.2. <p> The synchronous execution of an algorithm is in some sense the "hardest case" for an anonymous network. In aynchronous executions, processors may be able to make use of the random arrival-time of messages to break symmetry and to distinguish among themselves. (For instance, see the papers [MA89] and <ref> [SS89] </ref> in which the authors showed that processors in an anonymous network can choose distinct id's for themselves if they have access to a coin-flip).
Reference: [Tch87] <author> Maurice Tchuente. </author> <title> Computation on a finite network of automata. </title> <editor> In C. Chof-frut, editor, </editor> <booktitle> Automata Networks, </booktitle> <pages> pages 53 - 67. </pages> <publisher> Springer Verlag Lecture Notes In Computer Science, </publisher> <year> 1987. </year>
Reference: [Wei64] <author> Helmut Weilandt. </author> <title> Finite Permutation Groups. </title> <publisher> Academic Press, </publisher> <year> 1964. </year>
Reference-contexts: We will find a close correspondence between block-systems and subgroups, and between the cosets of a subgroup and the blocks of a block-system. The results in this section are well-known; see [Jac74], [Rob82], [Sco87], and <ref> [Wei64] </ref>. Notation: 1. Write (G; S) for a permutation group G on a finite set S. 2. Write Sym (S) for the symmetric group on S. 3. Write G v for the stabilizer subgroup of G of the point v 2 S. <p> In the sequel we will assume that all permutation groups are transitive, unless stated otherwise. Weilandt proves the following about blocks: Proposition 4.2.1: (Proposition 6.2 in <ref> [Wei64] </ref>) If B is a block of a transitive permutation group G, then gB is a block of G, for all g 2 G. We also have: Proposition 4.2.2: (Proposition 6.3 in [Wei64]) If B is a block of G then jBj divides jSj. <p> Weilandt proves the following about blocks: Proposition 4.2.1: (Proposition 6.2 in <ref> [Wei64] </ref>) If B is a block of a transitive permutation group G, then gB is a block of G, for all g 2 G. We also have: Proposition 4.2.2: (Proposition 6.3 in [Wei64]) If B is a block of G then jBj divides jSj.
Reference: [YK87a] <author> M. Yamashita and T. Kameda. </author> <title> Computing functions on an anonymous network. </title> <type> Technical Report LCCR 87-16, </type> <institution> Simon Fraser University, Vancouver, Vancouver, British Columbia, </institution> <year> 1987. </year>
Reference-contexts: In <ref> [YK87a] </ref>, Yamashita and Kameda obtained similar results for scalar valued functions: See Theorem 4.1 in [YK87a], and also the related results section at the end of this chapter. Theorem 2.5.1: Let G be a network. <p> In <ref> [YK87a] </ref>, Yamashita and Kameda obtained similar results for scalar valued functions: See Theorem 4.1 in [YK87a], and also the related results section at the end of this chapter. Theorem 2.5.1: Let G be a network. <p> There exists an algorithm that computes f on any ring with n processors (that is, with any edge-labeling) iff f is invariant under cyclic shifts and reversals of the input. In <ref> [YK87a] </ref>, Yamashita and Kameda generalized the second part of this result to arbitrary anonymous networks. <p> In our notation, Yamashita and Kameda's characterization is as follows: Theorem 2.6.2: (Theorem 4.1 in <ref> [YK87a] </ref>) Let G be a network with n processors. Let ~ be the equivalence-relation on the set of all input-vectors ~x 2 I n , given as follows: 2.6.
Reference: [YK87b] <author> M. Yamashita and T. Kameda. </author> <title> Computing on an anonymous network. </title> <type> Technical Report LCCR 87-15, </type> <institution> Simon Fraser University, Vancouver, Vancouver, British Columbia, </institution> <year> 1987. </year> <note> 100 References </note>
Reference: [YK88] <author> M. Yamashita and T. Kameda. </author> <title> Computing on anonymous networks. </title> <booktitle> In Proc. 7th ACM Symp. on Principles of Distributed Computing, </booktitle> <pages> pages 117-131, </pages> <address> Ontario, </address> <year> 1988. </year>
Reference-contexts: 2.4.1.) The next lemma states that if U v ~x and U w ~y are isomorphic, then so are are the trees obtained by `translating' U v ~x and U w ~y by a path with word w. (See Example 2.4.1 below.) This result is standard; see Proposition 3.1 in <ref> [YK88] </ref>. Lemma 2.4.2: Let G be a graph with universal cover U. <p> Their proof applies to our model with few modifications. Lemma 2.5.2: Let G be a network and let G have input ~x. A processor v in G can anonymously compute a graph isomorphic to U k v ~x for any k 0. Proof See Lemma 3.4 in <ref> [YK88] </ref>. Here we sketch an algorithm for reference. Algorithm 2.5.1: Step 1: Each processor v sends its input-value to adjacent processors. <p> The anonymous computing literature explores a number of issues which we do not address in this paper. For instance, [ASW88] and <ref> [YK88] </ref> show that certain computations are impossible for an anonymous network if the network does not `know' how many processors it has. Most of the papers on anonymous computing consider the running time of algorithms, which we do not, except to differentiate hard from easy problems.
References-found: 38

