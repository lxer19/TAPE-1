URL: http://www.isi.edu/ariadne/papers/97-ecp-graphplan.ps
Refering-URL: http://www.isi.edu/~knoblock/
Root-URL: 
Title: Combining the Expressivity of UCPOP with the Efficiency of Graphplan  
Author: B. Cenk Gazen and Craig A. Knoblock 
Address: Marina del Rey, CA 90292  
Affiliation: Information Sciences Institute and Department of Computer Science University of Southern California  
Abstract: There has been a great deal of recent work on new approaches to efficiently generating plans in systems such as Graphplan and SATplan. However, these systems only provide an impoverished representation language compared to other planners, such as UCPOP, ADL, or Prodigy. This makes it difficult to represent planning problems using these new planners. This paper addresses this problem by providing a completely automated set of transformations for converting a UCPOP domain representation into a Graphplan representation. The set of transformations extends the Graphplan representation language to include disjunctions, negations, universal quantification, conditional effects, and axioms. We tested the resulting planner on the 18 test domains and 41 problems that come with the UCPOP 4.0 distribution. Graphplan with the new preprocessor is able to solve every problem in the test set and on the hard problems (i.e., those that require more than one second of CPU time) it can solve them significantly faster than UCPOP. While UCPOP was unable to solve 7 of the test problems within a search limit of 100,000 nodes (which requires 414 to 980 CPU seconds), Graphplan with the preprocessor solved them all in under 15 CPU seconds (includ ing the preprocessing time).
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Edwin P.D. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <booktitle> In Proc. 1st. Int. Conf. On Principles of Knowledge Representation and Reasoning, </booktitle> <year> 1989. </year>
Reference-contexts: On the other, the more complex the language, the harder it is for the planner to solve the problems. Some of the planners that support a high-level language are ADL <ref> [1] </ref>, Prodigy [2] and UCPOP [3]. UCPOP is a partial order planner that supports a very expressive domain definition language. The characteristic features of such a language are negations, conditional effects, disjunctive preconditions, universal and existential quantification, axioms, and facts.
Reference: 2. <author> Steven Minton, Craig A. Knoblock, D. Koukka, Yolanda Gil, Robert L. Joseph, and Jaime G. Carbonell. </author> <title> Prodigy 2.0: The manual and the tutorial. </title> <type> Technical report, </type> <institution> Department of Computer Science, Carnegie Mellon University, </institution> <year> 1989. </year>
Reference-contexts: On the other, the more complex the language, the harder it is for the planner to solve the problems. Some of the planners that support a high-level language are ADL [1], Prodigy <ref> [2] </ref> and UCPOP [3]. UCPOP is a partial order planner that supports a very expressive domain definition language. The characteristic features of such a language are negations, conditional effects, disjunctive preconditions, universal and existential quantification, axioms, and facts.
Reference: 3. <author> Daniel S. Weld. </author> <title> An introduction to least commitment planning. </title> <journal> AI Magazine, </journal> <volume> 15(4), </volume> <year> 1994. </year>
Reference-contexts: On the other, the more complex the language, the harder it is for the planner to solve the problems. Some of the planners that support a high-level language are ADL [1], Prodigy [2] and UCPOP <ref> [3] </ref>. UCPOP is a partial order planner that supports a very expressive domain definition language. The characteristic features of such a language are negations, conditional effects, disjunctive preconditions, universal and existential quantification, axioms, and facts.
Reference: 4. <author> Avrim L. Blum and Merrick L. Furst. </author> <title> Fast planning through planning graph analysis. </title> <booktitle> Artifical Intelligence, </booktitle> <address> 90(1-2):281-300, </address> <year> 1997. </year>
Reference-contexts: The characteristic features of such a language are negations, conditional effects, disjunctive preconditions, universal and existential quantification, axioms, and facts. Given these constructs, it is usually possible to find a natural representation for a given domain. Graphplan <ref> [4] </ref> is a graph algorithmic planner that runs much faster than traditional planners but supports a minimal language for defining domains and problems.
Reference: 5. <author> Jana Koehler, Bernhard Nebel, Jorg Hoffman, and Yannis Dimopoulos. </author> <title> Extending planning graphs to an ADL subset. </title> <booktitle> In Proc. </booktitle> <address> ECP-97, Toulouse, France, </address> <year> 1997. </year>
Reference-contexts: For most domains, this language is awkward to use, although once the domain is defined in this language, problems can be solved much faster than it is possible with UCPOP. One approach to support a more expressive language is to extend the `Planning Graph' of Graphplan <ref> [5] </ref>. Another is to develop a preprocessor that translates domains from an expressive representation language into a simpler one. Advantages of the second approach are that it is conceptually simple and that it is not necessarily specific to one planner. <p> However, preprocessing is still a practical technique in that, for most problems, the exponential blow-up can be avoided by partial evaluation or object typing or both. Also, it is possible to avoid the problem altogether by using a planner, such as IPP <ref> [5] </ref>, that can handle conditional effects efficiently. One interesting improvement to the preprocessor is to eliminate some of the operators from a domain by looking at the problem at hand.
Reference: 6. <author> Henry Kautz and Bart Selman. </author> <title> Pushing the envelope: Planning, propositional logic, and stochastic search. </title> <booktitle> In Proc. AAAI-96, </booktitle> <address> Portland, OR, </address> <year> 1996. </year>
Reference-contexts: In this paper, we present a set of algorithms that transform a UCPOP domain and problem into an equivalent Graphplan domain and problem, although the same methods can be used with other fast planners, notably SATplan <ref> [6] </ref>, that are based on simple representations. The goal is to make the best of both planners. UCPOP supports a rich set of domain definition language features, but is much slower compared to Graphplan, which only supports a minimal language. <p> Graphplan is one example of such a planner, but the same approach will also work with SATplan, which in some domains can perform an order of magnitude better than Graphplan. In fact, a similar rewriting approach <ref> [6] </ref> is followed to Table 1.
Reference: 7. <author> A. Barrett, Dave Christianson, Marc Friedman, Chung Kwok, Keith Golden, Scott Penberthy, Ying Sun, and Daniel Weld. </author> <title> UCPOP user's manual, version 4.0. </title> <type> Technical report, </type> <institution> Department of Computer Science and Engineering, University of Wash-ington, </institution> <year> 1995. </year>
Reference-contexts: The result of each step is an equivalent representation of the domain where some of the language constructs have been replaced with simpler ones. 2 Rewriting UCPOP domains as Graphplan domains In UCPOP, domains are defined by operators, axioms, facts, and safety constraints <ref> [7] </ref>. Problems are defined by a list of initial conditions and a goal expression. UCPOP operators are represented by a list of parameters, a precondition expression, and an effect expression.
Reference: 8. <author> Richard E. Fikes and Nils J. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> 2(3/4):189-208, 1971. 
Reference-contexts: A fact is an arbitrary piece of code that is executed during planning. In UCPOP, they can only appear in the preconditions of operators. Safety constraints are conditions that the planner must maintain throughout the plan. Although both are based on the STRIPS representation <ref> [8] </ref>, Graphplan has a very restrictive language as compared to UCPOP. A Graphplan domain definition consists of a list of operators. Each operator has a list of parameters, a list of preconditions, a list of `add' effects and a list of `delete' effects.
References-found: 8

