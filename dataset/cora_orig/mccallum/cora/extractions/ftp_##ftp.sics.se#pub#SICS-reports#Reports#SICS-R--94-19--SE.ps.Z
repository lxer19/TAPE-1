URL: ftp://ftp.sics.se/pub/SICS-reports/Reports/SICS-R--94-19--SE.ps.Z
Refering-URL: http://www.sics.se/libindex.html
Root-URL: 
Title: On Adaptable Support for Cooperative Work  
Author: Mads Dam 
Note: 1 Work supported by ESPRIT BRA project 6225 COMIC  
Affiliation: Swedish Institute for Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Steve Benford and Lennart E. Fahlen. </author> <title> A spatial model of interaction in large virtual environments. </title> <booktitle> In Proceedings of ECSCW'93, </booktitle> <address> Milan, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: What may be surprising is that even though no CSCW-specific distinctions (in the sense of Flores et al [6]) are built into our calculus the few primitives that are provided are nonetheless sufficient for describing central concepts in CSCW such as dynamic conversation management or the awareness models of <ref> [1] </ref>, the examples studied in the present note. These examples have been chosen to illustrate two orthogonal types of device of relevance to CSCW. First, the conversation manager provides an example of a device for dynamically modifying articulation procedures. <p> Thus conversation systems have very natural representations in our calculus. Conversation systems can conceivably be subjected to modification in a variety of ways. Here, as an example, we consider supporting the dynamic addition and removal of states, illucutionary points, and transitions. Secondly, the awareness model <ref> [1] </ref> provides an example of a device for dynamically modifying information visibility. This model has been developed to support navigation in large shared data spaces. Its key feature is the support of dynamically modifiable levels of awareness between objects. <p> in this example in order to illustrate the situation when no such references remain and thus to the outside observer the system has been brought into a state from which it can not in fact be structurally modified. 17 4 An Awareness Manager The awareness model of Benford and Fahlen <ref> [1] </ref> was introduced as a device for dynamically modifying information access capabilities among users and resources in large shared data spaces. As the number of users or devices in such spaces gets large, maintaining full visibility between objects gets both computationally and cognitively infeasible. <p> When an aura collision takes place a channel of communication is created for passing (in this case) information from A to B. Conversely, when a state of collision ceases to hold this communication channel is removed. This basic aura mechanism was introduced by Benford and Fahlen <ref> [1] </ref> (better ref?) for the handling of connection establishment and removal, and enabler of the mechanisms that support focus and nimbus. <p> A primitive mechanism is needed to glue together awareness heirarchies belonging to different media, as well as receptive and emissive awareness hierarchies. Such a gluing mechanism could furthermore be used to give the effect of adapters (c.f. <ref> [1] </ref>) in analogy with e.g. loudspeakers, or binoculars. On a somewhat deeper level it may be of considerable value to divorce the concept of space governing awareness structures from its representation as e.g. 3D space in a virtual reality environment such as DIVE [2]. <p> The types of change that objects can be exposed to are superficially rather modest: They can be dynamically created and their interconnection structure can be dynamically altered. We considered two examples to illustrate the basic ideas: An adaptable conversation manager, and a rudimentary awareness model along the lines of <ref> [1] </ref>. We don not regard the notation as presented here as very final. More work, both theoretical and practical, is needed to identify the `right" primitives and their relation to more well-known and standard concepts from object-oriented languages.
Reference: [2] <author> Christer Carlsson and Olof Hagsand. </author> <title> The MultiG distributed interactive virtual environment. </title> <booktitle> In Proceedings of the 5th MultiG Workshop, </booktitle> <address> Stockholm, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: On a somewhat deeper level it may be of considerable value to divorce the concept of space governing awareness structures from its representation as e.g. 3D space in a virtual reality environment such as DIVE <ref> [2] </ref>. In this manner | by relying on a more abstract notion of "position" | a potentially much finer control of awareness level is possible than that 30 achievable by just using "position in 3D space".
Reference: [3] <author> M. Dam. </author> <title> Model checking mobile processes. </title> <booktitle> In Proc. CONCUR'93, Lecture Notes in Computer Science, </booktitle> <volume> 715 </volume> <pages> 22-36, </pages> <year> 1993. </year> <note> Full version in SICS report RR94:1, </note> <year> 1994. </year>
Reference-contexts: The specification language is based on the -calculus of Milner, Parrow, and Walker [14]. Other object-based extensions of the -calculus have been considered by Walker [21] and Jones [9]. Algorithms exists for deciding properties such as deadlock freedom, equivalence, safety, or liveness properties for large classes of processes <ref> [3, 4] </ref>, and rudimentary tools for automatically performing analyses are beginning to emerge [20]. The class of processes that can be captured is, however, still too small. It includes processes that are, in essence, finite state up to naming of communication channels.
Reference: [4] <author> M. Dam. </author> <title> On the decidability of process equivalences for the - calculus. </title> <note> Submitted for publication, </note> <year> 1994. </year>
Reference-contexts: The specification language is based on the -calculus of Milner, Parrow, and Walker [14]. Other object-based extensions of the -calculus have been considered by Walker [21] and Jones [9]. Algorithms exists for deciding properties such as deadlock freedom, equivalence, safety, or liveness properties for large classes of processes <ref> [3, 4] </ref>, and rudimentary tools for automatically performing analyses are beginning to emerge [20]. The class of processes that can be captured is, however, still too small. It includes processes that are, in essence, finite state up to naming of communication channels.
Reference: [5] <author> R. E. Young (ed.). COSMOS. </author> <title> Specification of a configurable structured message passing system. </title> <institution> Queen Mary College, </institution> <address> London, </address> <year> 1989. </year> <month> 32 </month>
Reference-contexts: Oval [12], for instance, is a system for implementing devices which can be modified by for example adding, changing, or removing subtypes, fields, or views of objects. Other related approaches include the schemas and schema instances of EGRET [8] and the communication structures of COSMOS <ref> [5] </ref>. Compared to these approaches ours is much more primitive. Users are not provided with any facilities whatsoever for accessing, modifying or editing source code.
Reference: [6] <author> F. Flores, M. Graves, B. Hartfield, and T. Winograd. </author> <title> Computer sys-tems and the design of organizational interaction. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 6(2) </volume> <pages> 153-172, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: This is the basic mechanism for modelling the dynamic modifiability of interconnection topology or information visibility. What may be surprising is that even though no CSCW-specific distinctions (in the sense of Flores et al <ref> [6] </ref>) are built into our calculus the few primitives that are provided are nonetheless sufficient for describing central concepts in CSCW such as dynamic conversation management or the awareness models of [1], the examples studied in the present note. <p> These examples have been chosen to illustrate two orthogonal types of device of relevance to CSCW. First, the conversation manager provides an example of a device for dynamically modifying articulation procedures. Conversation systems such as Conversation-for-Action <ref> [6] </ref> are nothing but state transition systems with transitions labelled by so-called illocutionary points. It is natural to identify illocutionary points with channel names. Thus conversation systems have very natural representations in our calculus. Conversation systems can conceivably be subjected to modification in a variety of ways.
Reference: [7] <author> C. Heath and P. Luff. </author> <title> Collaboration and control. Crisis management and multimedia technology in london underground control rooms. Computer Supported Cooperative Work (CSCW), </title> <address> 1(1-2):69-94, </address> <year> 1992. </year>
Reference-contexts: Such as: Talking out loud to open a channel of communication to your supervisors and peers (c.f. <ref> [7] </ref>), or "cocking out" flight strips to point attention to potential future conflicts in an air traffic control room (c.f. [17]). * Token passing manufacturing systems such as the kanban systems considered by Schmidt [17] have devices for changing their configu ration (e.g. by pocketing or reinserting kanban cards).
Reference: [8] <author> P. Johnson. </author> <title> Supporting exploratory CSCW with the EGRET framework. </title> <booktitle> In Proceedings CSCW'92, </booktitle> <pages> pages 298-305, </pages> <year> 1992. </year>
Reference-contexts: Oval [12], for instance, is a system for implementing devices which can be modified by for example adding, changing, or removing subtypes, fields, or views of objects. Other related approaches include the schemas and schema instances of EGRET <ref> [8] </ref> and the communication structures of COSMOS [5]. Compared to these approaches ours is much more primitive. Users are not provided with any facilities whatsoever for accessing, modifying or editing source code.
Reference: [9] <author> C. B. Jones. </author> <title> A pi-calculus semantics for an object-based design notation. </title> <booktitle> In Proceedings CONCUR'93, Lecture Notes in Computer Science, </booktitle> <volume> 715 </volume> <pages> 158-172, </pages> <year> 1993. </year>
Reference-contexts: Also left for 31 future work is the development of analysis tools based on the notation. The specification language is based on the -calculus of Milner, Parrow, and Walker [14]. Other object-based extensions of the -calculus have been considered by Walker [21] and Jones <ref> [9] </ref>. Algorithms exists for deciding properties such as deadlock freedom, equivalence, safety, or liveness properties for large classes of processes [3, 4], and rudimentary tools for automatically performing analyses are beginning to emerge [20]. The class of processes that can be captured is, however, still too small.
Reference: [10] <author> S. M. Kaplan, W. J. Tolone, D. P. Bogia, and C. Bignoli. </author> <title> Flexible, active support for collaborative work with conversation builder. </title> <booktitle> In Proc. CSCW'92, </booktitle> <pages> pages 378-385, </pages> <year> 1992. </year>
Reference-contexts: One straightforward way of following such an approach is to furnish end-users with unlimited and unrestrained visibility and power of modification of programs, scripts, programming languages, and devices. Several recent suggestions for building adaptability and flexibility into CSCW devices appear to advocate doing just this (c.f. <ref> [12, 10, 19, 18] </ref>). For instance, in the approach of [19], a three-level language is introduced which on its lowest level has device instances, on its second level device specifications, and on its third level the device specification meta-language.
Reference: [11] <author> K. Lyytinen, Petri Maaranen, and J. Knuuttila. </author> <title> Groups are not always the same. Computer Supported Cooperative Work, </title> <journal> An International Journal, </journal> <volume> 2(4) </volume> <pages> 261-284, </pages> <year> 1994. </year>
Reference-contexts: It is the system designers themselves who cooperate, they are familiar with the programming and script languages concerned, they are familiar with the workings of the devices, and they act in a "friendly" manner. These conditions, however, do not invariably hold true (c.f. <ref> [11] </ref>) if we have in mind the much more demanding regime 1 of large-scale use in modern industrial and administrative organisations.
Reference: [12] <author> T. W. Malone, Kum-Yew Lai, and C. Fry. </author> <title> Experiments with Oval: A radically tailorable tool for cooperative work. </title> <booktitle> In in Proc. CSCW'92, </booktitle> <pages> pages 289-297, </pages> <year> 1992. </year>
Reference-contexts: One straightforward way of following such an approach is to furnish end-users with unlimited and unrestrained visibility and power of modification of programs, scripts, programming languages, and devices. Several recent suggestions for building adaptability and flexibility into CSCW devices appear to advocate doing just this (c.f. <ref> [12, 10, 19, 18] </ref>). For instance, in the approach of [19], a three-level language is introduced which on its lowest level has device instances, on its second level device specifications, and on its third level the device specification meta-language. <p> We offer a small statically typed calculus of objects based on the -calculus and give example specifications of user reconfigurable devices that illustrate the use of this calculus. Object-based notations have been used in other contexts for describing user modifiable systems for cooperative work. Oval <ref> [12] </ref>, for instance, is a system for implementing devices which can be modified by for example adding, changing, or removing subtypes, fields, or views of objects. Other related approaches include the schemas and schema instances of EGRET [8] and the communication structures of COSMOS [5].
Reference: [13] <author> R. Milner. </author> <title> The polyadic -calculus: A tutorial. </title> <type> Technical Report ECS-LFCS-91-180, </type> <institution> Laboratory for the Foundations of Computer Science, Department of Computer Science, University of Edinburgh, </institution> <year> 1991. </year>
Reference-contexts: In the field of concurrency, however, dynamically reconfigurable systems have recently been the subject of considerable attention with the advent of the -calculus of Milner, Parrow, and Walker [14] and the discovery of the remarkable usefulness and power of this calculus (c.f. <ref> [13, 16, 15] </ref>). The purpose of the present paper is to investigate the extent to which concepts introduced with the -calculus can be used as a basis for deriving notations useful for describing dynamically evolving systems such as those encountered in CSCW. <p> This process of referencing and instantiating will be well-known to those familiar with the -calculus. It is the same mechanism that under 9 pins, for instance, the encoding of data types in the polyadic version of the -calculus of <ref> [13] </ref>. Object references are nothing but channels, and instantiating, e.g., in and out by referencing b in the example above amounts to passing from EmptyBuf along b a new unique pair (in 0 ; out 0 ) of channel names.
Reference: [14] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes, I and II. </title> <journal> Information and Computation, </journal> <volume> 100(1) </volume> <pages> 1-40 and 41-77, </pages> <year> 1992. </year>
Reference-contexts: In the field of concurrency, however, dynamically reconfigurable systems have recently been the subject of considerable attention with the advent of the -calculus of Milner, Parrow, and Walker <ref> [14] </ref> and the discovery of the remarkable usefulness and power of this calculus (c.f. [13, 16, 15]). <p> For instance an analysis of inheritance in terms of the ideas presented here should be attempted. Also left for 31 future work is the development of analysis tools based on the notation. The specification language is based on the -calculus of Milner, Parrow, and Walker <ref> [14] </ref>. Other object-based extensions of the -calculus have been considered by Walker [21] and Jones [9]. Algorithms exists for deciding properties such as deadlock freedom, equivalence, safety, or liveness properties for large classes of processes [3, 4], and rudimentary tools for automatically performing analyses are beginning to emerge [20].
Reference: [15] <author> F. Orava and J. Parrow. </author> <title> An algebraic verification of a mobile network. </title> <journal> Formal Aspects of Computing, </journal> <pages> pages 497-543, </pages> <year> 1992. </year>
Reference-contexts: In the field of concurrency, however, dynamically reconfigurable systems have recently been the subject of considerable attention with the advent of the -calculus of Milner, Parrow, and Walker [14] and the discovery of the remarkable usefulness and power of this calculus (c.f. <ref> [13, 16, 15] </ref>). The purpose of the present paper is to investigate the extent to which concepts introduced with the -calculus can be used as a basis for deriving notations useful for describing dynamically evolving systems such as those encountered in CSCW.
Reference: [16] <author> D. Sangiorgi. </author> <title> From -calculus to higher-order -calculus|and back. </title> <note> To appear in Proc. TAPSOFT'93, </note> <year> 1993. </year>
Reference-contexts: In the field of concurrency, however, dynamically reconfigurable systems have recently been the subject of considerable attention with the advent of the -calculus of Milner, Parrow, and Walker [14] and the discovery of the remarkable usefulness and power of this calculus (c.f. <ref> [13, 16, 15] </ref>). The purpose of the present paper is to investigate the extent to which concepts introduced with the -calculus can be used as a basis for deriving notations useful for describing dynamically evolving systems such as those encountered in CSCW.
Reference: [17] <author> K. Schmidt. </author> <title> Modes and mechanisms of interaction in cooperative work, outline of a conceptual framework. Esprit BRA project COMIC report, </title> <month> September </month> <year> 1993. </year> <month> 33 </month>
Reference-contexts: Such as: Talking out loud to open a channel of communication to your supervisors and peers (c.f. [7]), or "cocking out" flight strips to point attention to potential future conflicts in an air traffic control room (c.f. <ref> [17] </ref>). * Token passing manufacturing systems such as the kanban systems considered by Schmidt [17] have devices for changing their configu ration (e.g. by pocketing or reinserting kanban cards). <p> as: Talking out loud to open a channel of communication to your supervisors and peers (c.f. [7]), or "cocking out" flight strips to point attention to potential future conflicts in an air traffic control room (c.f. <ref> [17] </ref>). * Token passing manufacturing systems such as the kanban systems considered by Schmidt [17] have devices for changing their configu ration (e.g. by pocketing or reinserting kanban cards). Certainly these articulation change devices are not always considered part of the "normal" operation of the larger device they are meant to support (i.e. kanban systems, assemblies).
Reference: [18] <author> K. Schmidt, C. Simone, P. Carstensen, B. Hewitt, and C. Strensen. </author> <title> Computational mechanisms of interaction: Notations and facilities. Esprit BRA project COMIC report, </title> <month> September </month> <year> 1993. </year>
Reference-contexts: One straightforward way of following such an approach is to furnish end-users with unlimited and unrestrained visibility and power of modification of programs, scripts, programming languages, and devices. Several recent suggestions for building adaptability and flexibility into CSCW devices appear to advocate doing just this (c.f. <ref> [12, 10, 19, 18] </ref>). For instance, in the approach of [19], a three-level language is introduced which on its lowest level has device instances, on its second level device specifications, and on its third level the device specification meta-language.
Reference: [19] <author> C. Simone, A. Pozzoli, K. Schmidt, and B. Hewitt. </author> <title> An architecture for malleable and linkable mechanisms of interaction. </title> <type> manuscript, </type> <year> 1994. </year>
Reference-contexts: One straightforward way of following such an approach is to furnish end-users with unlimited and unrestrained visibility and power of modification of programs, scripts, programming languages, and devices. Several recent suggestions for building adaptability and flexibility into CSCW devices appear to advocate doing just this (c.f. <ref> [12, 10, 19, 18] </ref>). For instance, in the approach of [19], a three-level language is introduced which on its lowest level has device instances, on its second level device specifications, and on its third level the device specification meta-language. <p> Several recent suggestions for building adaptability and flexibility into CSCW devices appear to advocate doing just this (c.f. [12, 10, 19, 18]). For instance, in the approach of <ref> [19] </ref>, a three-level language is introduced which on its lowest level has device instances, on its second level device specifications, and on its third level the device specification meta-language. <p> The example offered is based on the conversation model of Winograd and Flores, considered also by Simone et al <ref> [19] </ref>. This model provides suitable example material since it is both well known and quite simple. Essentially, a conversation manager is just a finite state automaton with transitions labelled by socalled illocutionary points, or actions.
Reference: [20] <author> B. Victor and F. Moller. </author> <title> The mobility workbench: A tool for the -calculus. </title> <booktitle> In Proc. Conf. Computer Aided Verification, </booktitle> <year> 1994. </year>
Reference-contexts: Other object-based extensions of the -calculus have been considered by Walker [21] and Jones [9]. Algorithms exists for deciding properties such as deadlock freedom, equivalence, safety, or liveness properties for large classes of processes [3, 4], and rudimentary tools for automatically performing analyses are beginning to emerge <ref> [20] </ref>. The class of processes that can be captured is, however, still too small. It includes processes that are, in essence, finite state up to naming of communication channels.
Reference: [21] <author> D. Walker. </author> <title> Objects in the -calculus. </title> <journal> Information and Computation, </journal> <note> 1994. (To appear). 34 </note>
Reference-contexts: Also left for 31 future work is the development of analysis tools based on the notation. The specification language is based on the -calculus of Milner, Parrow, and Walker [14]. Other object-based extensions of the -calculus have been considered by Walker <ref> [21] </ref> and Jones [9]. Algorithms exists for deciding properties such as deadlock freedom, equivalence, safety, or liveness properties for large classes of processes [3, 4], and rudimentary tools for automatically performing analyses are beginning to emerge [20]. The class of processes that can be captured is, however, still too small.
References-found: 21

