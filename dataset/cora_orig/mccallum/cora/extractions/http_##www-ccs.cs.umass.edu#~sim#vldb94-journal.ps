URL: http://www-ccs.cs.umass.edu/~sim/vldb94-journal.ps
Refering-URL: http://www-ccs.cs.umass.edu/rtdb/priority.html
Root-URL: 
Title: Priority Assignment in Real-Time Active Databases  
Author:  Rajendran M. Sivasankaran, John A. Stankovic, Don Towsley Bhaskar Purimetla, Krithi Ramamritham 
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts,  
Abstract: Active databases and real-time databases have been important areas of research in the recent past. It has been recognized that many benefits can be gained by integrating active and real-time database technologies. However, there has not been much work done in the area of transaction processing in active real-time databases. This paper deals with an important aspect of transaction processing in active real-time databases, namely the problem of assigning priorities to transactions. In these systems time-constrained transactions trigger other transactions during their execution. We present three policies, namely PD, DIV and SL, for assigning priorities to parent, immediate and deferred transactions executing on a multiprocessor system and then evaluate the policies through simulation. The policies use different amount of semantic information about transactions to assign the priorities. The simulator has been validated by comparing to three sets of published results. We conducted experiments in three settings: task model, main memory database model and disk resident database model. Our new results demonstrate that dynamically changing the priorities of transactions, depending on their behavior (triggering rules), yields a substantial improvement in the number of triggering transactions that meet their deadline in all the three settings.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.K. Abbott, and H. Garcia-Molina, </author> <title> "Scheduling Real-Time Transactions: A Performance Evaluation," </title> <journal> ACM Trans. on Database Systems, </journal> <volume> Vol. 17, No. 3, </volume> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: Scheduling policies such as Earliest Deadline First (EDF) and Least Slack First (LSF) are examples of policies that account for deadlines. The performance implications of time cognizant priority assignment policies have been studied in detail in soft real-time database systems in <ref> [1, 6] </ref>. These studies have concluded that deadline-cognizant priority assignment provide significantly higher performance than priority assignments that ignore deadlines. In this paper, our goal is to study and evaluate time cognizant priority assignment policies in a real-time active database. <p> We discuss the simulator, experiments and results in Section 5. We summarize our main results and discuss future work in Section 6. 2 Related Work Over the past few years active databases and real-time databases have become important areas of research. Experimental studies reported in <ref> [1, 6, 15] </ref> are very comprehensive and cover most aspects of real-time transaction processing, but have not considered active workloads (workloads that generate additional transactions dynamically) and have not addressed the problem of subtransaction priority assignment. <p> The explanation of the parameters and the experiments can be found in [2]. In figure 3, we observe that our results are within 10 percent of the original results. * We validated the real-time part of the simulator by trying to duplicate the results in <ref> [1] </ref>. In the NT 5 (not tardy) overload management policy, a transaction is aborted as soon as it becomes tardy. In the AE (all eligible) policy, a transaction is run until it finishes. The results are illustrated in figure 4. Again our results were very similar to previously published results. <p> We experimented with UD and DIV-1 policies mentioned in [7] and our missed deadline percentages were lower by no more than 5-10%. In our validations we did not perform the complete set of experiments that are found in [2], <ref> [1] </ref> or [7], but just certain baseline experiments. 5.3 Baseline Parameters In this section we describe the workload model and the calculation of estimates required by DIV and SL. Let us assume a transaction T arrives at time t 0 and triggers a subtransaction at time t 1 .
Reference: [2] <author> M.J. Carey, R. Jauhari, and M. Livny, </author> <title> "On Transaction Boundaries in Active Databases: A Performance Perspective," </title> <journal> IEEE Trans. on Knowledge and Data Engg., </journal> <volume> Vol. 3, No. 3, </volume> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: There have been both theoretical and experimental studies in active databases <ref> [2] </ref>, [3], [11], [4]. Most of the studies have concentrated on the specification of Event-Condition-Action (ECA) rules [5]. Experimental work on active databases in [2] has been performed in a non real-time setting. Experiments in [2] show the impact of transaction boundaries and data sharing on the performance of active databases. <p> There have been both theoretical and experimental studies in active databases <ref> [2] </ref>, [3], [11], [4]. Most of the studies have concentrated on the specification of Event-Condition-Action (ECA) rules [5]. Experimental work on active databases in [2] has been performed in a non real-time setting. Experiments in [2] show the impact of transaction boundaries and data sharing on the performance of active databases. We address a different problem, that of assigning priorities to triggered transactions in real-time active databases. <p> There have been both theoretical and experimental studies in active databases <ref> [2] </ref>, [3], [11], [4]. Most of the studies have concentrated on the specification of Event-Condition-Action (ECA) rules [5]. Experimental work on active databases in [2] has been performed in a non real-time setting. Experiments in [2] show the impact of transaction boundaries and data sharing on the performance of active databases. We address a different problem, that of assigning priorities to triggered transactions in real-time active databases. <p> The validation was accomplished in three steps. * We validated the active part of the simulator against the results in <ref> [2] </ref>. The results are illustrated in the figure 3. We mapped the model in [2] onto ours as closely as possible. We were not able 11 to obtain the exact results because of the following differences in the two models. <p> The validation was accomplished in three steps. * We validated the active part of the simulator against the results in <ref> [2] </ref>. The results are illustrated in the figure 3. We mapped the model in [2] onto ours as closely as possible. We were not able 11 to obtain the exact results because of the following differences in the two models. <p> The explanation of the parameters and the experiments can be found in <ref> [2] </ref>. In figure 3, we observe that our results are within 10 percent of the original results. * We validated the real-time part of the simulator by trying to duplicate the results in [1]. <p> We experimented with UD and DIV-1 policies mentioned in [7] and our missed deadline percentages were lower by no more than 5-10%. In our validations we did not perform the complete set of experiments that are found in <ref> [2] </ref>, [1] or [7], but just certain baseline experiments. 5.3 Baseline Parameters In this section we describe the workload model and the calculation of estimates required by DIV and SL. Let us assume a transaction T arrives at time t 0 and triggers a subtransaction at time t 1 .
Reference: [3] <author> U. Dayal, et. al., </author> <title> "The HIPAC Project: Combining Active Databases and Timing Constraints," </title> <booktitle> SIGMOD Record, </booktitle> <volume> 17, 1, </volume> <month> March </month> <year> 1988. </year>
Reference-contexts: There have been both theoretical and experimental studies in active databases [2], <ref> [3] </ref>, [11], [4]. Most of the studies have concentrated on the specification of Event-Condition-Action (ECA) rules [5]. Experimental work on active databases in [2] has been performed in a non real-time setting. Experiments in [2] show the impact of transaction boundaries and data sharing on the performance of active databases.
Reference: [4] <author> U. Dayal, M. Hsu, and R. Ladin, </author> <title> "Organizing Long-Running Activities with Triggers and Transactions," </title> <booktitle> ACM SIGMOD, </booktitle> <year> 1990. </year>
Reference-contexts: An active transaction has a set of triggered transactions that are either executed as part of the active transaction or separately, depending on the type of the coupling mode between the parent and the triggered transactions <ref> [4] </ref>. There are three types of coupling modes: immediate, deferred and independent. The transactions triggered in those modes are referred to as immediate, deferred and independent transactions, respectively. Immediate and deferred transactions are executed as part of the parent transaction whereas independent transactions are executed independently. <p> There have been both theoretical and experimental studies in active databases [2], [3], [11], <ref> [4] </ref>. Most of the studies have concentrated on the specification of Event-Condition-Action (ECA) rules [5]. Experimental work on active databases in [2] has been performed in a non real-time setting. Experiments in [2] show the impact of transaction boundaries and data sharing on the performance of active databases.
Reference: [5] <editor> Special Issue on Active Databases, </editor> <booktitle> Bulletin of The Technical Committee on Data Engineering, </booktitle> <volume> Vol. 15, No. </volume> <pages> 1-4, </pages> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: There have been both theoretical and experimental studies in active databases [2], [3], [11], [4]. Most of the studies have concentrated on the specification of Event-Condition-Action (ECA) rules <ref> [5] </ref>. Experimental work on active databases in [2] has been performed in a non real-time setting. Experiments in [2] show the impact of transaction boundaries and data sharing on the performance of active databases. We address a different problem, that of assigning priorities to triggered transactions in real-time active databases.
Reference: [6] <author> J. Huang, J. Stankovic, D. Towsley, and K. Ramamritham, </author> <title> "Experimental Evaluation of Real-time Transaction Processing," </title> <booktitle> Proceedings of the Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1989, </year> <pages> 144-153. </pages>
Reference-contexts: Scheduling policies such as Earliest Deadline First (EDF) and Least Slack First (LSF) are examples of policies that account for deadlines. The performance implications of time cognizant priority assignment policies have been studied in detail in soft real-time database systems in <ref> [1, 6] </ref>. These studies have concluded that deadline-cognizant priority assignment provide significantly higher performance than priority assignments that ignore deadlines. In this paper, our goal is to study and evaluate time cognizant priority assignment policies in a real-time active database. <p> We discuss the simulator, experiments and results in Section 5. We summarize our main results and discuss future work in Section 6. 2 Related Work Over the past few years active databases and real-time databases have become important areas of research. Experimental studies reported in <ref> [1, 6, 15] </ref> are very comprehensive and cover most aspects of real-time transaction processing, but have not considered active workloads (workloads that generate additional transactions dynamically) and have not addressed the problem of subtransaction priority assignment. <p> It has been shown in previous studies that the choice of the transaction to be aborted to resolve a deadlock does not have a significant impact on the performance <ref> [6] </ref>. 18 The results are illustrated in figures 16 and 17 for workloads consisting of only immediate, and only deferred subtransactions, respectively.
Reference: [7] <author> B. Kao, and H. Garcia Molina, </author> <title> "Subtask Deadline Assignment for Complex Distributed Soft Real-Time Tasks," </title> <type> Technical Report STAN-CS-93-1491, </type> <institution> Stanford University, </institution> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: In short, past studies on real-time transaction processing have not dealt with active workloads and studies on active databases have not dealt with real-time transactions. 3 The problem of assigning deadlines to the parallel and serial subtasks of complex distributed tasks in a real-time system has been studied in <ref> [7] </ref> through simulation. This work differs from the present work in two ways. First, the structures of all of the complex tasks are assumed to be known in advance. Second, the experimental system considered in [7] is not a database system nor does it have an active component. <p> and serial subtasks of complex distributed tasks in a real-time system has been studied in <ref> [7] </ref> through simulation. This work differs from the present work in two ways. First, the structures of all of the complex tasks are assumed to be known in advance. Second, the experimental system considered in [7] is not a database system nor does it have an active component. <p> The slight performance improvement obtained by our policies in the not tardy case, can be explained by the fact that checking for tardiness is done more often in our model. * Finally, we validated our simulator against the results in <ref> [7] </ref>, where the policies for assigning deadlines to parallel and serial subtasks of complex distributed tasks in a real-time system have been evaluated. We do not present the result graph for this experiment to save space. There was an inherent difference in the two models because the one in [7] is <p> in <ref> [7] </ref>, where the policies for assigning deadlines to parallel and serial subtasks of complex distributed tasks in a real-time system have been evaluated. We do not present the result graph for this experiment to save space. There was an inherent difference in the two models because the one in [7] is for a distributed system whereas ours is for a single site multiprocessor system. The system in [7] has multiple servers with a queue for each server whereas ours has multiple servers with a single queue. We experimented with UD and DIV-1 policies mentioned in [7] and our missed deadline <p> We do not present the result graph for this experiment to save space. There was an inherent difference in the two models because the one in <ref> [7] </ref> is for a distributed system whereas ours is for a single site multiprocessor system. The system in [7] has multiple servers with a queue for each server whereas ours has multiple servers with a single queue. We experimented with UD and DIV-1 policies mentioned in [7] and our missed deadline percentages were lower by no more than 5-10%. <p> because the one in <ref> [7] </ref> is for a distributed system whereas ours is for a single site multiprocessor system. The system in [7] has multiple servers with a queue for each server whereas ours has multiple servers with a single queue. We experimented with UD and DIV-1 policies mentioned in [7] and our missed deadline percentages were lower by no more than 5-10%. In our validations we did not perform the complete set of experiments that are found in [2], [1] or [7], but just certain baseline experiments. 5.3 Baseline Parameters In this section we describe the workload model and the <p> We experimented with UD and DIV-1 policies mentioned in <ref> [7] </ref> and our missed deadline percentages were lower by no more than 5-10%. In our validations we did not perform the complete set of experiments that are found in [2], [1] or [7], but just certain baseline experiments. 5.3 Baseline Parameters In this section we describe the workload model and the calculation of estimates required by DIV and SL. Let us assume a transaction T arrives at time t 0 and triggers a subtransaction at time t 1 . <p> Therefore, transactions that trigger only immediate subtransactions will get more slack than those that trigger deferred subtransactions. We use a parameter load in our experiments which is very similar to the one in <ref> [7] </ref>. In order to define load we specify the arrival rates and service rates of class T and NT transactions. The arrivals of class T and class NT transactions are generated according to Poisson processes with mean interarrival times of 1= T and 1= NT time units, respectively.
Reference: [8] <author> M. H. Klein, T. Ralya, B. Pollak, R. Obenza, and M. G. Harbour, </author> <title> "A Practitioners Handbook for Real-Time Systems Guide to Rate Monotonic Analysis for Rea-Time Systems," </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: In order for the time-cognizant scheduling policies to perform well, they should take into account the work that is dynamically generated. This aspect of the problem makes this scheduling problem different from the classical hard real-time scheduling problem where execution times are assumed to be known in advance <ref> [8, 9, 16] </ref>. The priority driven nature of real-time transaction processing gives rise to the question of how to assign priorities to the parent and to all triggered actions [12, 14].
Reference: [9] <author> E. L. Lawler, </author> <title> "Recent Results in Theory of Machine Scheduling", Mathematical Programming: The State of the Art, </title> <editor> A.Bachem et. al., </editor> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: In order for the time-cognizant scheduling policies to perform well, they should take into account the work that is dynamically generated. This aspect of the problem makes this scheduling problem different from the classical hard real-time scheduling problem where execution times are assumed to be known in advance <ref> [8, 9, 16] </ref>. The priority driven nature of real-time transaction processing gives rise to the question of how to assign priorities to the parent and to all triggered actions [12, 14].
Reference: [10] <author> M. Livny, </author> <note> "DeNet Users Guide," version 1.5, </note> <institution> Dept. Comp. Science, Univ. of Wisconsin, Madison, WI 1990. </institution>
Reference-contexts: In the experiments, 95% confidence intervals have been obtained whose widths are less than 5% of the point estimate for the Missed Deadline Percentage (MDP). 9 5.1 Simulation Model Our performance model of an active real-time active database was implemented using the DeNet Simulation Language <ref> [10] </ref>. RADEx is made up of five active modules : Source, Transaction Manager, Object Manager, Resource Manager, Rule Manager, and a passive module DB Manager. Figure 2 illustrates the architecture of the simulator.
Reference: [11] <author> D. McCarthy, and U. Dayal, </author> <title> "The Architecture of an Active Data Base Management System," </title> <booktitle> ACM SIGMOD, </booktitle> <month> June </month> <year> 1989. </year> <month> 24 </month>
Reference-contexts: There have been both theoretical and experimental studies in active databases [2], [3], <ref> [11] </ref>, [4]. Most of the studies have concentrated on the specification of Event-Condition-Action (ECA) rules [5]. Experimental work on active databases in [2] has been performed in a non real-time setting. Experiments in [2] show the impact of transaction boundaries and data sharing on the performance of active databases.
Reference: [12] <author> B. Purimetla, R. M. Sivasankaran and J. Stankovic, </author> <title> "A Study of Distributed Real-Time Active Database Applications," </title> <booktitle> IEEE Workshop on Parallel and Distributed Real-time Systems, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: There are many applications such as cooperative distributed navigation systems and intelligent network services where real-time active database technology is extremely useful <ref> [12, 14] </ref>. Before presenting a detailed description of the problem we are addressing for a real-time active database, we give a brief introduction to active databases. The building block of an active database system is the Event-Condition-Action (ECA) rule. <p> The priority driven nature of real-time transaction processing gives rise to the question of how to assign priorities to the parent and to all triggered actions <ref> [12, 14] </ref>. We believe that the strategy to assign priorities has a significant impact on the performance of the system as triggered actions must contend with ongoing transactions for resources. In this paper, we address the problem of assigning priorities to triggering and triggered transactions. <p> We introduce and evaluate three policies for assigning priorities to immediate and deferred transactions. Our main contributions are: 3 The begin event may, in turn, have been caused by some external environment event such as an obstacle identified by a sensor <ref> [12, 14] </ref>. 2 * the development of two priority assignment policies that account for the work dynamically generated by active transactions; * an evaluation of the two priority assignment policies against a baseline policy using a real-time active database simulator in three settings, i.e., in a real-time task setting, a main
Reference: [13] <author> K. Ramamritham, </author> <title> "Real-Time Databases," </title> <journal> International Journal of Distributed and Parallel Databases, </journal> <volume> Vol. 1, </volume> <pages> No.2, </pages> <year> 1993. </year>
Reference-contexts: Experiments in [2] show the impact of transaction boundaries and data sharing on the performance of active databases. We address a different problem, that of assigning priorities to triggered transactions in real-time active databases. The relationship between real-time databases and active databases was discussed briefly in <ref> [13] </ref> where it was noted that a missing ingredient in active databases is the active pursuit of timely processing of actions to do real-time processing.
Reference: [14] <author> R. M. Sivasankaran, B. Purimetla, J. Stankovic, and K. Ramamritham, </author> <title> "Network Services Databases A Distributed Active Real-Time Database (DARTDB) Application," </title> <booktitle> IEEE Workshop on Real-Time Applications, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: There are many applications such as cooperative distributed navigation systems and intelligent network services where real-time active database technology is extremely useful <ref> [12, 14] </ref>. Before presenting a detailed description of the problem we are addressing for a real-time active database, we give a brief introduction to active databases. The building block of an active database system is the Event-Condition-Action (ECA) rule. <p> The priority driven nature of real-time transaction processing gives rise to the question of how to assign priorities to the parent and to all triggered actions <ref> [12, 14] </ref>. We believe that the strategy to assign priorities has a significant impact on the performance of the system as triggered actions must contend with ongoing transactions for resources. In this paper, we address the problem of assigning priorities to triggering and triggered transactions. <p> We introduce and evaluate three policies for assigning priorities to immediate and deferred transactions. Our main contributions are: 3 The begin event may, in turn, have been caused by some external environment event such as an obstacle identified by a sensor <ref> [12, 14] </ref>. 2 * the development of two priority assignment policies that account for the work dynamically generated by active transactions; * an evaluation of the two priority assignment policies against a baseline policy using a real-time active database simulator in three settings, i.e., in a real-time task setting, a main
Reference: [15] <author> S. H. Son and S. Park, </author> <title> "Scheduling Transactions for Distributed Time-Critical Applications", Readings in Distributed Computing Systems, edited by T. </title> <editor> L. Casavant and M. Singhal, </editor> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: We discuss the simulator, experiments and results in Section 5. We summarize our main results and discuss future work in Section 6. 2 Related Work Over the past few years active databases and real-time databases have become important areas of research. Experimental studies reported in <ref> [1, 6, 15] </ref> are very comprehensive and cover most aspects of real-time transaction processing, but have not considered active workloads (workloads that generate additional transactions dynamically) and have not addressed the problem of subtransaction priority assignment.
Reference: [16] <author> J. Xu and D. L. Parnas, </author> <title> "Scheduling Processes with Release Times, Deadlines, Precedence and Exclusion Relations," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 16, No. 3, March 1990. 25 26 27 28 29 30 31 32 33 34 35 </volume>
Reference-contexts: In order for the time-cognizant scheduling policies to perform well, they should take into account the work that is dynamically generated. This aspect of the problem makes this scheduling problem different from the classical hard real-time scheduling problem where execution times are assumed to be known in advance <ref> [8, 9, 16] </ref>. The priority driven nature of real-time transaction processing gives rise to the question of how to assign priorities to the parent and to all triggered actions [12, 14].
References-found: 16

