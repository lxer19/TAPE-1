URL: http://www.cs.berkeley.edu/~amc/research/contractor/class-paper.ps.gz
Refering-URL: http://www.cs.berkeley.edu/~amc/research/contractor/
Root-URL: http://www.cs.berkeley.edu
Email: http://www.cs.berkeley.edu/~schenney/  http://www.cs.berkeley.edu/~fscho/  http://www.cs.berkeley.edu/~amc/  
Title: Contractor: A Remote Computation Environment for Java TM Applications  
Author: Stephen Chenney Franklin S. Cho Adam M. Costello 
Date: 16 Dec 1996  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Eric A. Brewer, J. Eric Baldeschwieler, and Robert D. Blumofe. </author> <title> Atlas: An infrastructure for global computing. Obtained from Eric Brewer, </title> <year> 1996. </year>
Reference-contexts: Hierarchical organization would greatly improve the scalability of the system. 8 Related Work There are undoubtedly a large number of related projects on record and in progress. We mention only a few of them here. ATLAS <ref> [1] </ref> is a proposal for global network computing with goals almost identical to those of Contractor. It is more ambitious in its checkpointing and migration of jobs. It does not address issues of resource allocation among jobs at a single worker.
Reference: [2] <author> Stephen Chenney, Franklin S. Cho, and Adam M. Costello. </author> <note> Contractor. http://www. cs.berkeley.com/~amc/research/contractor/. </note>
Reference-contexts: The dispatcher uses a list of round-robin queues, each traversed half as often as the previous one, to achieve proportional scheduling with average O (1) overhead per context switch. Many more details can be found in the software and its documentation <ref> [2] </ref>. 4.1.2 Precautions The worker must take a few subtle precautions to make sure that jobs cannot cheat and get more CPU than they are entitled to. <p> Many more details can be found in the software and its documentation <ref> [2] </ref>. 4.3.2 Limitations The bandwidth limits are absolute, not proportional, so it is easy to allocate more or less bandwidth than is actually available. However, the limits can be altered on the fly.
Reference: [3] <author> Armando Fox, Steven D. Gribble, Eric A. Brewer, and Elan Amir. </author> <title> Adapting to network and client variability via on-demand dynamic distillation. </title> <note> We don't know where this was published, </note> <year> 1996. </year>
Reference-contexts: Penguin [4] is a package for the widely-deployed language Perl that provides authentication and sandboxing services. A system like Contractor could probably be built on Penguin instead of Java, sacrificing some performance and perhaps some resource management in exchange for greater ease of use. Dynamic Distillation <ref> [3] </ref> is a technique for improving the quality of network services for poorly connected or low-power clients. A proxy running on a well-connected powerful machine distills content into smaller forms more easily digested by the client.
Reference: [4] <author> Felix Sebastian Gallo. </author> <note> Penguin! http://www. eden.com/~fsg/penguin.html. </note>
Reference-contexts: They do not (yet) deal with resource allocation. Janus runs under Solaris, whereas Contractor runs under Java, which is expected soon to be more widely deployed. The WebOS authors are considering using Java in the future. Penguin <ref> [4] </ref> is a package for the widely-deployed language Perl that provides authentication and sandboxing services. A system like Contractor could probably be built on Penguin instead of Java, sacrificing some performance and perhaps some resource management in exchange for greater ease of use.
Reference: [5] <author> Ian Goldberg, David Wagner, Randi Thomas, and Eric Brewer. </author> <title> A secure environment for untrusted helper applications. </title> <booktitle> In Proceedings Sixth USENIX Security Symposium, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: It is more ambitious in its checkpointing and migration of jobs. It does not address issues of resource allocation among jobs at a single worker. It is implemented in a combination of C and Java, whereas the Contractor is implemented entirely in Java. 8 WebOS [6] and Janus <ref> [5] </ref> (formerly known as SRHA) address some issues of safe execution of untrusted code, particularly authentication and sand-boxing. They do not (yet) deal with resource allocation. Janus runs under Solaris, whereas Contractor runs under Java, which is expected soon to be more widely deployed.
Reference: [6] <author> Amin Vahdat, Michael Dahlin, and Thomas Anderson. </author> <title> Turning the web into a computer. </title> <address> http://now.cs.berkeley.edu/WebOS/ webos.ps, </address> <month> May </month> <year> 1996. </year> <month> 9 </month>
Reference-contexts: It is more ambitious in its checkpointing and migration of jobs. It does not address issues of resource allocation among jobs at a single worker. It is implemented in a combination of C and Java, whereas the Contractor is implemented entirely in Java. 8 WebOS <ref> [6] </ref> and Janus [5] (formerly known as SRHA) address some issues of safe execution of untrusted code, particularly authentication and sand-boxing. They do not (yet) deal with resource allocation. Janus runs under Solaris, whereas Contractor runs under Java, which is expected soon to be more widely deployed.
References-found: 6

