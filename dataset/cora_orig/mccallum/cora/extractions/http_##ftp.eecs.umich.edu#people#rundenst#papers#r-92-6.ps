URL: http://ftp.eecs.umich.edu/people/rundenst/papers/r-92-6.ps
Refering-URL: http://ftp.eecs.umich.edu/people/rundenst/papers/
Root-URL: http://www.eecs.umich.edu
Title: A Class Integration Algorithm and Its Application for Supporting Consistent Object Views  
Author: Elke A. Rundensteiner 
Date: May, 1992  92-50  
Affiliation: Department of Information and Computer Science University of California, Irvine  
Pubnum: Technical Report  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Abiteboul, S., and Bonner, A., </author> <title> "Objects and Views," </title> <booktitle> in Proc. SIGMOD'91, </booktitle> <pages> pp. 238 - 247. </pages>
Reference-contexts: Scholl et al. [21] do not consider the problem of generating multiple view schemata, which is an integral part of MultiView. MultiView can thus be considered to be a compatible extension of their work. Abiteboul and Bonner <ref> [1] </ref> present a view mechanism for the O 2 database system. In this context, they also discuss class integration as an important problem. However, their suggested solution is again a simplistic approach that results in partial rather in complete classification (See Section 4).
Reference: [2] <author> Aho, A. V., Hopcroft, J. E., and Jeffrey, D. U., </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley Pub. Company, </publisher> <year> 1974. </year>
Reference: [3] <author> Banerjee, J., Kim, W., Kim, H. J., and Korth, F., </author> <title> "Semantics and Implementation of Schema Evolution in Object-Oriented Databases," </title> <booktitle> Proc. of ACM SIMOD'87, </booktitle> <month> May </month> <year> 1987, </year> <pages> pp. </pages> <address> 311- 322. </address>
Reference: [4] <author> Bouzeghoub, M., "MORSE: </author> <title> a functional query language and its semantic data model," </title> <booktitle> Proc. of 84 Trends and Applications of Databases, </booktitle> <address> IEEE-NBS, Gaithersburg, </address> <year> 1984. </year>
Reference: [5] <author> Brachman, R. J., and Schmolze, J. G., </author> <title> "An Overview of the KL-ONE Knowledge Representation System," </title> <journal> Cognitive Science, </journal> <volume> 9, </volume> <year> 1985. </year>
Reference: [6] <author> Date, C. J., </author> <title> An Introduction to Database Systems, Vol. I, Fifth Edition, </title> <publisher> Addison-Wesley Publishing Company, Inc., </publisher> <year> 1990. </year>
Reference: [7] <author> Gilbert, J. P., </author> <title> "Supporting User Views", </title> <booktitle> OODB Task Group Workshop Proceedings, </booktitle> <address> Ot-tawa, Canada, </address> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: MultiView would Class Integration | Elke A. Rundensteiner | September 28, 1992 | 88 enrich these systems by allowing them to support a more powerful notion of views. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals <ref> [22, 7] </ref>, and hence the potential ease in implementing it with existing OODB technology. 12.2 Future Work While the correctness of the algorithms presented in this paper has been tested in isolation, a prototype implementation of the complete MultiView system on top of some existing object-oriented database system would represent a
Reference: [8] <author> Heiler, S., and Zdonik, S. B., </author> <title> "Object views: Extending the vision", </title> <booktitle> In Proc. IEEE Data Engineering Conf., </booktitle> <address> Los Angeles, </address> <month> Feb. </month> <year> 1990, </year> <journal> pg. </journal> <volume> 86 - 93. </volume>
Reference-contexts: In fact, many efforts of defining views for OODBs follow this approach; that is, they suggest the use of the query language defined for their respective object model to derive a virtual class. Some examples are view mechanisms for the Fugue Model in <ref> [8] </ref>, for the Orion model in [11], and for integrating databases in [9]. MultiView can use any of these proposed class derivation mechanisms to implement the first phase of view schema generation, i.e., the customization of individual classes. In this sense, MultiView is a superset of these approaches. <p> In this sense, MultiView is a superset of these approaches. Most of these approaches do not discuss the integration of derived classes into the global schema. Instead, the derived classes are treated as "stand-alone" objects <ref> [8] </ref>, or they are attached directly as subclasses of the schema root class [11]. Scholl et al.'s recent work [21] is one of the exceptions. They sketch the class integration process for a selected subset of the operators of the query language COOL. <p> We believe strongly that this is sufficient for many application domains, in particular, since the join operator can be simulated using the refine operator. However, it would be interesting to investigate whether, and if so how, MultiView could be extended to also handle object-generating algebra operators <ref> [11, 8] </ref>. As indicated in Section 4, the classification problem for object-oriented models is not decidable since it may involve the comparison of arbitrary functions and predicates. Hence, the development of a realistic subsumes () function for some of the emerging object models needs to be investigated.
Reference: [9] <author> Kaul, M., Drosten, K., and Neuhold, E.J., "ViewSystem: </author> <title> Integrating Heterogeneous Information Bases by Object-Oriented Views", </title> <booktitle> In Proc. IEEE Data Engineering Conf., </booktitle> <address> Los Angeles, </address> <month> Feb. </month> <year> 1990, </year> <journal> pg. </journal> <volume> 2 - 10. </volume>
Reference-contexts: Some examples are view mechanisms for the Fugue Model in [8], for the Orion model in [11], and for integrating databases in <ref> [9] </ref>. MultiView can use any of these proposed class derivation mechanisms to implement the first phase of view schema generation, i.e., the customization of individual classes. In this sense, MultiView is a superset of these approaches.
Reference: [10] <author> S. N. Khoshafian and G. P. Copeland, </author> <title> "Object Identity," </title> <booktitle> in Proc. OOPSLA'86, ACM, </booktitle> <month> Sep. </month> <year> 1986, </year> <pages> pp. 406-416. </pages>
Reference: [11] <author> Kim, W., </author> <title> A model of queries in object-oriented databases, </title> <booktitle> In Proc. Int. Conf. on Very Large Databases, </booktitle> <pages> pp. 423 - 432, </pages> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: In fact, many efforts of defining views for OODBs follow this approach; that is, they suggest the use of the query language defined for their respective object model to derive a virtual class. Some examples are view mechanisms for the Fugue Model in [8], for the Orion model in <ref> [11] </ref>, and for integrating databases in [9]. MultiView can use any of these proposed class derivation mechanisms to implement the first phase of view schema generation, i.e., the customization of individual classes. In this sense, MultiView is a superset of these approaches. <p> In this sense, MultiView is a superset of these approaches. Most of these approaches do not discuss the integration of derived classes into the global schema. Instead, the derived classes are treated as "stand-alone" objects [8], or they are attached directly as subclasses of the schema root class <ref> [11] </ref>. Scholl et al.'s recent work [21] is one of the exceptions. They sketch the class integration process for a selected subset of the operators of the query language COOL. This work is similar in flavor to what we present in Section 3.2 on object algebra. <p> We believe strongly that this is sufficient for many application domains, in particular, since the join operator can be simulated using the refine operator. However, it would be interesting to investigate whether, and if so how, MultiView could be extended to also handle object-generating algebra operators <ref> [11, 8] </ref>. As indicated in Section 4, the classification problem for object-oriented models is not decidable since it may involve the comparison of arbitrary functions and predicates. Hence, the development of a realistic subsumes () function for some of the emerging object models needs to be investigated.
Reference: [12] <author> D. Maier, J. Stein, A. Otis, and A. Purdy, </author> <title> "Development of an Object-Oriented DBMS," </title> <booktitle> in Proc. </booktitle> <address> OOPSLA'86, </address> <month> Sep. </month> <year> 1986, </year> <pages> pp. 472-482. </pages>
Reference: [13] <author> Missikoff, M., and Scholl, M., </author> <title> "An Algorithm for Insertion into a Lattice: Application to Type Classification", </title> <booktitle> Foundations of Data Organization and Algorithms, 3 rd Int. Conf., </booktitle> <address> FODD'89, France, </address> <month> June </month> <year> 1989, </year> <pages> pp. 64 - 82. </pages>
Reference-contexts: This issue is not addressed in [20]. Our work on classification probably comes the closest to the research by Missikoff et al. <ref> [13] </ref> on inserting types into a lattice structure. Rather than dealing with an object-oriented model, they assume a simple record-oriented type system. Our classification algorithm, on the other hand, is extended to be applicable to a class generalization hierarchy. <p> Our classification algorithm, on the other hand, is extended to be applicable to a class generalization hierarchy. Since a class represents both a type and a set, our classification algorithm solves the is-a incompatibility problem. This problem does not arise, and thus is not addressed in <ref> [13] </ref>, when dealing with classification in a type structure rather than in a schema graph. Class Integration | Elke A.
Reference: [14] <author> Missikoff, M., "MOKA: </author> <title> A User-friendly Front-End for Knowledge Acquisition," </title> <booktitle> Int'l Workshop on Database Machines and Artificial Intelligence, </booktitle> <address> Minowbrook, N.Y., </address> <month> July </month> <year> 1987. </year>
Reference: [15] <author> J. Mylopoulos, P. A. Bernstein, and H.K.T. Wong. </author> <title> "A Language Facility for Designing Database-Intensive Applications," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 5, issue 2, </volume> <pages> pp. 185-207, </pages> <month> June </month> <year> 1980. </year>
Reference: [16] <author> E. A. Rundensteiner, L. Bic, J. Gilbert, and M. Yin, </author> <title> "Set-Restricted Semantic Groupings," </title> <journal> in IEEE Trans. on Data and Knowledge Engineering, </journal> <note> to appear in April 1993. </note>
Reference: [17] <author> Rundensteiner, E. A., </author> <title> "MultiView: A Methodology for Supporting Multiple View Schemata in Object-Oriented Databases", </title> <booktitle> 18th Int. Conference on Very Large Data Bases (VLDB'92), </booktitle> <address> Vancouver, Canada, </address> <month> Aug. </month> <year> 1992. </year> <title> Class Integration | Elke A. </title> <type> Rundensteiner | September 28, </type> <year> 1992 </year> <month> | 91 </month>
Reference-contexts: In this paper, we have presented a solution to the second subtask, while solutions to the first and the third subtasks of MultiView are given in <ref> [17] </ref> and in [19], respectively. This second subtask, namely, the integration of all virtual classes into one global schema graph is the key feature of MultiView that ultimately supports the formation of arbitrarily complex view schema graphs composed of both base and virtual classes.
Reference: [18] <author> Rundensteiner, E. A., and Bic, L., </author> <title> "Set Operations in Object-Based Data Models", </title> <journal> in IEEE Transaction on Data and Knowledge Engineering, </journal> <note> to appear in Volume 4, Issue 3, </note> <month> June </month> <year> 1992. </year>
Reference-contexts: In this context, they also discuss class integration as an important problem. However, their suggested solution is again a simplistic approach that results in partial rather in complete classification (See Section 4). No precise algorithm for class integration is presented. Rundensteiner et al. <ref> [18] </ref> discuss the integration of virtual classes derived using set operators into a schema graph. Their work focuses on the semantics of set operators and the inheritance of property characteristics, such as, single- versus multi-valued or required versus optional.
Reference: [19] <author> Rundensteiner, E. A. and Bic, L., </author> <title> "Automatic View Schema Generation in Object-Oriented Databases", </title> <institution> Dept. of Information and Computer Science, Univ. of Cal., Irvine, </institution> <type> Tech. Rep. </type> <pages> 92-15, </pages> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: In this paper, we have presented a solution to the second subtask, while solutions to the first and the third subtasks of MultiView are given in [17] and in <ref> [19] </ref>, respectively. This second subtask, namely, the integration of all virtual classes into one global schema graph is the key feature of MultiView that ultimately supports the formation of arbitrarily complex view schema graphs composed of both base and virtual classes.
Reference: [20] <author> Schmolze, J. G., and Lipkis, T. A., </author> <title> Classification in the KL-ONE Knowledge Representation System, </title> <booktitle> The Eigth Int. Joint Conf. on Artificial Intelligence, </booktitle> <address> (IJCAI'83), </address> <month> Aug. </month> <year> 1983, </year> <title> vol.1, </title> <journal> pg. </journal> <volume> 330 - 332. </volume>
Reference-contexts: Of course, class integration, which does not become an issue when dealing with an individual class only, is not addressed. Algorithms for special forms of the classification problem have been proposed in the Artificial Intelligence literature. Schmolze and Lipkis <ref> [20] </ref>, for instance, describe a classifier for `concepts' in the KL-ONE Knowledge Representation System. The KL-ONE Knowledge Representation scheme does not include behavioral abstractions and abstract data types as done in an object-oriented model. Hence, the type inheritance mismatch problem is not addressed by their solution. <p> Lastly, since the derivation of new classes is accomplished in MultiView using well-defined object algebra operators, we are able to reduce the complexity of classification depending on the operator used for derivation. This issue is not addressed in <ref> [20] </ref>. Our work on classification probably comes the closest to the research by Missikoff et al. [13] on inserting types into a lattice structure. Rather than dealing with an object-oriented model, they assume a simple record-oriented type system.
Reference: [21] <author> Scholl, M. H., Laasch, C. and Tresch, M., </author> <title> Updatable Views in Object-Oriented Databases, </title> <booktitle> Proc. 2nd DOOD Conf., </booktitle> <address> Muenich, </address> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: Most of these approaches do not discuss the integration of derived classes into the global schema. Instead, the derived classes are treated as "stand-alone" objects [8], or they are attached directly as subclasses of the schema root class [11]. Scholl et al.'s recent work <ref> [21] </ref> is one of the exceptions. They sketch the class integration process for a selected subset of the operators of the query language COOL. This work is similar in flavor to what we present in Section 3.2 on object algebra. <p> This localized class integration approach is directly guided by the derivation of a virtual class, and it is not, as we have shown in this paper, a solution to finding the globally most appropriate location in the schema graph. Scholl et al. <ref> [21] </ref> do not consider the problem of generating multiple view schemata, which is an integral part of MultiView. MultiView can thus be considered to be a compatible extension of their work. Abiteboul and Bonner [1] present a view mechanism for the O 2 database system. <p> We are in the process of evaluating available OODBs for their suitability. This evaluation includes the requirement for the OODB to support some basic features, such as that an object instance can be a member of many classes simultaneously and thus can take on different types <ref> [21] </ref>. Several implementation issues immediately arise from this requirement, such as the development of efficient strategies for method resolution. <p> In this paper, we have restricted the set of object algebra operators to be object-preserving <ref> [21] </ref>. We believe strongly that this is sufficient for many application domains, in particular, since the join operator can be simulated using the refine operator. However, it would be interesting to investigate whether, and if so how, MultiView could be extended to also handle object-generating algebra operators [11, 8].
Reference: [22] <author> Shilling, J. J., and Sweeney, P. F., </author> <title> Three Steps to Views: Extending the Object-Oriented Paradigm, </title> <booktitle> in Proc. of the Int. Conf. on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA'89), </booktitle> <address> New Orleans , Sep. </address> <year> 1989, </year> <pages> 353 - 361. </pages>
Reference-contexts: In fact, by breaking the view schemata definition process into a number of distinct phases, we were able to reduce the view definition to a simple yet powerful mechanism. In summary, MultiView is a more systematic solution approach compared to their rather ad-hoc proposal. Shilling and Sweeney's approach <ref> [22] </ref> for supporting object-oriented views is based on extending the concept of a class from having one type (one ADT interface) to having multiple type interfaces. We accomplish the same goal of specializing types by using the type refinement capability of the generalization hierarchy. <p> MultiView would Class Integration | Elke A. Rundensteiner | September 28, 1992 | 88 enrich these systems by allowing them to support a more powerful notion of views. A major contribution of the proposed approach lies in its simplicity compared to alternative proposals <ref> [22, 7] </ref>, and hence the potential ease in implementing it with existing OODB technology. 12.2 Future Work While the correctness of the algorithms presented in this paper has been tested in isolation, a prototype implementation of the complete MultiView system on top of some existing object-oriented database system would represent a
Reference: [23] <author> D. W. Shipman, </author> <title> "The Functional Data Model and the Data Language DAPLEX," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 6, issue 1, </volume> <pages> pp. 140-173, </pages> <month> Mar. </month> <year> 1981. </year>
Reference: [24] <author> Tanaka, K., Yoshikawa, M., and Ishihara, K., </author> <title> Schema Virtualization in Object-Oriented Databases, </title> <booktitle> In Proc. IEEE Data Engineering Conf., </booktitle> <month> Feb. </month> <year> 1988, </year> <journal> pg. </journal> <volume> 23 - 30. </volume>
Reference-contexts: Again, they discuss the relative positioning of the virtual class with respect to its source classes without presenting a general solution for classification. Tanaka et al.'s work on schema virtualization <ref> [24] </ref> does not distinguish between the task of integrating derived classes into a common schema and the task of generating view schemata. While recognizing the need for class integration, they do not present a general classification algorithm.
References-found: 24

