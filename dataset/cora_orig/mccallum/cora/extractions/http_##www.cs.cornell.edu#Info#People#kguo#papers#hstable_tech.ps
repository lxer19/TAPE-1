URL: http://www.cs.cornell.edu/Info/People/kguo/papers/hstable_tech.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/kguo/home.html
Root-URL: 
Email: fkguo,rvr,vogels,keng@cs.cornell.edu  
Title: Hierarchical Message Stability Tracking Protocols  
Author: Katherine Guo, Robbert van Renesse, Werner Vogels and Ken Birman 
Keyword: message stability, protocol simulation, reliable multicast  
Note: This work was supported by the ARPA/ONR grant N00014-96-1-1014 and the GTE graduate student grant to Horus research group.  
Address: Ithaca NY, 14853  
Affiliation: Department of Computer Science Cornell University  
Abstract: Protocols which track message stability are an important part of reliable multicast protocols in fault-tolerant distributed systems. To reliably deliver multicast messages in a process group, each process maintains copies of all messages it sends and receives. If a member fails to receive a message, any process which has the message in its buffer can retransmit it. In order to prevent these buffers from growing out of bound, stability tracking protocols must be used. That is, whenever a process learns that a message has been received by everyone, it declares this message stable and releases it from the buffer. We investigate several message stability tracking protocols commonly used in a number of popular reliable multicast protocols with a focus on their performance in large scale settings with thousands of participants. To improve the scalability of these protocols significantly, we derive a set of new protocols using a spanning tree structure which scale to at least tens of thousands of participants. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Ahuja, S. Keshav, and H. Saran. </author> <title> Design, implementation, and performance of a native mode ATM transport layer. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 4(4) </volume> <pages> 502-515, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: The time a message spends in a router is 1 millisecond 3 . The time needed for a host to send message in microseconds follows the formula t s (u) = 100 + 2 (94 + 35u=4000 + 50u=1000) + 50 = 338 + 47u=400 <ref> [1, 11] </ref>. <p> higher than the sending time since 3 Typical value for router processing time is 1 to 10 milliseconds with today's technology. 12 z 1 2 3 4 b = 3 202 283 364 Table 3: Group Size (height p = 5) interrupts need to be handled to receive a message <ref> [1] </ref>. Therefore, we set t r (u) = 1:1 fi t s (u). We set the header size of each message to h = 32 bytes which is enough for most transport protocols [1, 18]. A real network can have a chain, star, or tree topology. <p> Therefore, we set t r (u) = 1:1 fi t s (u). We set the header size of each message to h = 32 bytes which is enough for most transport protocols <ref> [1, 18] </ref>. A real network can have a chain, star, or tree topology. The tree structure is a generalization of both a chain and a star.
Reference: [2] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A communication sub-system for high availability. </title> <booktitle> In Digest of Papers, The 22nd IEEE International Symposium on Fault-Tolerant Computing Systems, </booktitle> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Such protocols are implemented as an integral part of reliable multicast protocols in many distributed systems <ref> [2, 4, 5, 7, 10, 19] </ref>. We study three representative protocols dubbed CoordP, FullDist and Train. 2.1 The basic assumptions To compare these stability protocols, we assume that the underlying communication layer offers FIFO delivery and that group membership remains constant.
Reference: [3] <author> P.A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison Wesley, </publisher> <year> 1987. </year>
Reference-contexts: In distributed database systems, partial failures of transactions can lead to inconsistent results. Therefore, termination of a transaction that updates distributed data has to be coordinated among its participants. In the atomic commit protocols <ref> [3] </ref>, a process can not commit a transaction until everybody else has agreed to commit. This is similar to message stability protocols in which all processes must deliver a message if any does so.
Reference: [4] <author> K. Birman. </author> <title> The process group approach to reliable distributed computing. </title> <journal> Communications of the ACM, </journal> <volume> 9(12) </volume> <pages> 36-53, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Such protocols are implemented as an integral part of reliable multicast protocols in many distributed systems <ref> [2, 4, 5, 7, 10, 19] </ref>. We study three representative protocols dubbed CoordP, FullDist and Train. 2.1 The basic assumptions To compare these stability protocols, we assume that the underlying communication layer offers FIFO delivery and that group membership remains constant.
Reference: [5] <author> R. Carr. </author> <title> The Tandem global update protocol, </title> <month> June </month> <year> 1985. </year>
Reference-contexts: Such protocols are implemented as an integral part of reliable multicast protocols in many distributed systems <ref> [2, 4, 5, 7, 10, 19] </ref>. We study three representative protocols dubbed CoordP, FullDist and Train. 2.1 The basic assumptions To compare these stability protocols, we assume that the underlying communication layer offers FIFO delivery and that group membership remains constant. <p> A non-coordinator sends 1 point-to-point ACK message, receives 1 START and 1 INFO messages. The total number of messages processed by a non-coordinator is 3, of which 1 is sent and 2 are received. In the Tandem global update protocol <ref> [5] </ref> and the Amoeba total ordering protocol [10] [12], a particular version of CoordP is employed as their stability tracking algorithm. In both systems, there is a sequencer (or a coordinator) which assigns the global sequence number to each data message.
Reference: [6] <author> F. Cristian. </author> <title> Asynchronous atomic broadcast. </title> <journal> IBM Technical Disclosure Bulletin, </journal> <volume> 33(9) </volume> <month> 115-116 ???, February </month> <year> 1991. </year>
Reference-contexts: Hence, 2n rounds are required. Each member sends out and also receives 1 ACK and 1 INFO message. The total number of messages processed by each member is 4, out of which 2 are sent and 2 are received. In the Train <ref> [6] </ref>, Pinwheel [7] and Totem [14] protocols, the Train protocol is used to offer message stability tracking. 4 The structured protocols Later in this section, we will show that the three basic protocols have their limitation in scalability. The most obvious way to improve scalability is to use hierarchy.
Reference: [7] <author> F. Cristian and S. Mishra. </author> <title> The pinwheel asynchronous atomic broadcast protocols. </title> <booktitle> In Proceedings of the 2nd International Symposium on Autonomous Decentralized Systems, </booktitle> <address> Phoenix, AZ, </address> <year> 1995. </year>
Reference-contexts: Such protocols are implemented as an integral part of reliable multicast protocols in many distributed systems <ref> [2, 4, 5, 7, 10, 19] </ref>. We study three representative protocols dubbed CoordP, FullDist and Train. 2.1 The basic assumptions To compare these stability protocols, we assume that the underlying communication layer offers FIFO delivery and that group membership remains constant. <p> Hence, 2n rounds are required. Each member sends out and also receives 1 ACK and 1 INFO message. The total number of messages processed by each member is 4, out of which 2 are sent and 2 are received. In the Train [6], Pinwheel <ref> [7] </ref> and Totem [14] protocols, the Train protocol is used to offer message stability tracking. 4 The structured protocols Later in this section, we will show that the three basic protocols have their limitation in scalability. The most obvious way to improve scalability is to use hierarchy.
Reference: [8] <author> S. Deering. </author> <title> Host extensions for ip multicasting. </title> <type> Technical Report RFC 1112, </type> <month> August </month> <year> 1989. </year>
Reference-contexts: It is beyond the scope of this paper to show that these message stability protocols can be made fault-tolerant in the case of message loss or process failure. 3 * A routing architecture similar to IP multicast <ref> [8] </ref> is used. 2.2 Performance indices We define five indices that can be used to characterize the performance of stability protocols. To measure message complexity, we use total number of messages on all hops in the system. To measure time complexity, we use round-trip time and message rounds.
Reference: [9] <author> K. Guo, W. Vogels, and R. van Renesse. </author> <title> Structured virtual synchrony: Exploring the bounds of virtually synchronous group communication. </title> <booktitle> In Proceedings of the 7th ACM SIGOPS European Workshop, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: This protocol includes n multicast INFO messages. Every member sends 1 INFO multicast and receives n INFO messages. Hence, the total number of messages processed by each member is n + 1. The Horus/Ensemble <ref> [9, 19] </ref> system implements a set of stability protocols in separate layers so users can pick the appropriate one for their application. <p> The most obvious way to improve scalability is to use hierarchy. Tree structures have been used in reliable multicast protocols in distributed systems <ref> [9, 14] </ref> and barrier synchronization algorithms [13] in parallel systems. To improve scalability significantly, we derive two structured stability tracking protocols by adding a spanning tree structure to the basic protocols. They are dubbed S CoordP and S Train since they are derived from CoordP and Train respectively.
Reference: [10] <author> M. F. Kaashoek, A. S. Tanenbaum, S. F. Hummel, and H. E. Bal. </author> <title> An efficient reliable broadcast protocol. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-19, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Such protocols are implemented as an integral part of reliable multicast protocols in many distributed systems <ref> [2, 4, 5, 7, 10, 19] </ref>. We study three representative protocols dubbed CoordP, FullDist and Train. 2.1 The basic assumptions To compare these stability protocols, we assume that the underlying communication layer offers FIFO delivery and that group membership remains constant. <p> A non-coordinator sends 1 point-to-point ACK message, receives 1 START and 1 INFO messages. The total number of messages processed by a non-coordinator is 3, of which 1 is sent and 2 are received. In the Tandem global update protocol [5] and the Amoeba total ordering protocol <ref> [10] </ref> [12], a particular version of CoordP is employed as their stability tracking algorithm. In both systems, there is a sequencer (or a coordinator) which assigns the global sequence number to each data message.
Reference: [11] <author> J. Kay and J. Pasquale. </author> <title> The importance of non-data touching processing overheads in TCP/IP. </title> <booktitle> In Proceedings of ACM SIGCOMM'93, </booktitle> <address> San Francisco, CA, </address> <month> September 13-17 </month> <year> 1993. </year>
Reference-contexts: The time a message spends in a router is 1 millisecond 3 . The time needed for a host to send message in microseconds follows the formula t s (u) = 100 + 2 (94 + 35u=4000 + 50u=1000) + 50 = 338 + 47u=400 <ref> [1, 11] </ref>.
Reference: [12] <author> S. McCanne and S. Floyd. </author> <title> Ns (network simulator). </title> <note> Available via http://www-nrg.ee.lbl.gov/ns, 1995. </note>
Reference-contexts: A non-coordinator sends 1 point-to-point ACK message, receives 1 START and 1 INFO messages. The total number of messages processed by a non-coordinator is 3, of which 1 is sent and 2 are received. In the Tandem global update protocol [5] and the Amoeba total ordering protocol [10] <ref> [12] </ref>, a particular version of CoordP is employed as their stability tracking algorithm. In both systems, there is a sequencer (or a coordinator) which assigns the global sequence number to each data message. <p> We have conducted our simulation in this environment. We simulate the stability protocols in a single group of multicast servers running on distinct processors in a point-to-point network. We use the ns <ref> [12] </ref> simulator to explore the behavior of these protocols. In our simulation, each link is bi-directional and each direction has a bandwidth of 100 Mbps (Fast Ethernet, FDDI and ATM can achieve this bandwidth). <p> Our simulation is designed to satisfy all the assumptions in Section 2. IP multicast is provided by the ns <ref> [12] </ref> simulator. We simulate the sending of a data message to n 1 group members as sending point-to-point messages along the multicast spanning tree which coincides with the underlying tree network. Alternatively, this could be done by sending n 1 point-to-point messages.
Reference: [13] <author> J. M. Mellor-Crummey and M. L. Scott. </author> <title> Synchronization without contention. </title> <booktitle> In Proceedings of the Fourth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <address> Santa Clara, CA, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: The most obvious way to improve scalability is to use hierarchy. Tree structures have been used in reliable multicast protocols in distributed systems [9, 14] and barrier synchronization algorithms <ref> [13] </ref> in parallel systems. To improve scalability significantly, we derive two structured stability tracking protocols by adding a spanning tree structure to the basic protocols. They are dubbed S CoordP and S Train since they are derived from CoordP and Train respectively.
Reference: [14] <author> L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, R. K. Budhia, and C. A. Lingley-Papadopoulos. Totem: </author> <title> A fault-tolerant multicast group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 54-63, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Hence, 2n rounds are required. Each member sends out and also receives 1 ACK and 1 INFO message. The total number of messages processed by each member is 4, out of which 2 are sent and 2 are received. In the Train [6], Pinwheel [7] and Totem <ref> [14] </ref> protocols, the Train protocol is used to offer message stability tracking. 4 The structured protocols Later in this section, we will show that the three basic protocols have their limitation in scalability. The most obvious way to improve scalability is to use hierarchy. <p> The most obvious way to improve scalability is to use hierarchy. Tree structures have been used in reliable multicast protocols in distributed systems <ref> [9, 14] </ref> and barrier synchronization algorithms [13] in parallel systems. To improve scalability significantly, we derive two structured stability tracking protocols by adding a spanning tree structure to the basic protocols. They are dubbed S CoordP and S Train since they are derived from CoordP and Train respectively.
Reference: [15] <author> S. Mullender, </author> <title> editor. Distributed Systems. </title> <publisher> ACM Press, Addison-Wesley, </publisher> <year> 1993. </year> <pages> page 104. 24 </pages>
Reference-contexts: Informally, reliable multicast in a group requires that all correct processes deliver the same set of messages, and that this set include all messages multicast by correct processes, and no spurious messages <ref> [15] </ref>. Protocols which track message stability are an important part of reliable multicast protocols. To deliver multicast messages reliably in a process group, each process maintains in a buffer copies of all messages it sends and receives.
Reference: [16] <author> E. Palmer. </author> <title> Graphical Evolution: An Introduction to the Theory of Random Graphs. </title> <publisher> John Wiley & Sons, </publisher> <year> 1985. </year> <pages> page 99. </pages>
Reference-contexts: For a large group size n, the probability that a particular node in a random labeled tree has a degree of at most four approaches 0:98 <ref> [16] </ref>, therefore we construct trees with fixed degrees of 2 to 4.
Reference: [17] <author> M. Simmons, R. Koshela, and I. Bucher, </author> <title> editors. Instrumentation for Future Parallel Computing Systems. </title> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: In the atomic commit protocols [3], a process can not commit a transaction until everybody else has agreed to commit. This is similar to message stability protocols in which all processes must deliver a message if any does so. In parallel computing, barrier synchronization <ref> [17] </ref> requires that all processes execute the barrier construct before any process can proceed past it to the next statement. Every process has to know if all other processes have reached the barrier before it can proceed again.
Reference: [18] <author> R. van Renesse. </author> <title> Masking the overhead of protocol layering. </title> <booktitle> In Proceedings of the ACM SIG-COMM'96, </booktitle> <pages> pages 96-104, </pages> <institution> Stanford University, California, USA, </institution> <month> August </month> <year> 1996. </year>
Reference-contexts: Therefore, we set t r (u) = 1:1 fi t s (u). We set the header size of each message to h = 32 bytes which is enough for most transport protocols <ref> [1, 18] </ref>. A real network can have a chain, star, or tree topology. The tree structure is a generalization of both a chain and a star.
Reference: [19] <author> R. van Renesse, K. P. Birman, and S. Maffeis. Horus, </author> <title> a flexible group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 76-83, </pages> <month> April </month> <year> 1996. </year> <month> 25 </month>
Reference-contexts: Such protocols are implemented as an integral part of reliable multicast protocols in many distributed systems <ref> [2, 4, 5, 7, 10, 19] </ref>. We study three representative protocols dubbed CoordP, FullDist and Train. 2.1 The basic assumptions To compare these stability protocols, we assume that the underlying communication layer offers FIFO delivery and that group membership remains constant. <p> This protocol includes n multicast INFO messages. Every member sends 1 INFO multicast and receives n INFO messages. Hence, the total number of messages processed by each member is n + 1. The Horus/Ensemble <ref> [9, 19] </ref> system implements a set of stability protocols in separate layers so users can pick the appropriate one for their application.
References-found: 19

