URL: ftp://ftp.cs.toronto.edu/pub/kbms/cbr-depthp.ps.Z
Refering-URL: ftp://ftp.cs.toronto.edu/pub/kbms/readme.html
Root-URL: http://www.cs.toronto.edu
Email: juris@ai.utoronto.ca  
Title: Representation and Management Issues for Case-Based Reasoning Systems  
Author: Igor Jurisica 
Note: Contents  
Date: September 15, 1993  
Address: Toronto, Ontario M5S 1A4, Canada  
Affiliation: Department of Computer Science University of Toronto  
Abstract-found: 0
Intro-found: 1
Reference: <author> Adelson, B., Burstein, M. H., Gentner, D., Hammond, K. J., Holyoak, K. J., and Thagard, P. R. </author> <year> (1988). </year> <title> The role of analogy in a theory of problem-solving. </title> <booktitle> In Proc. of the 10 th Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 298-304, </pages> <address> Montreal, Quebec. </address>
Reference: <author> Aha, D. </author> <year> (1992). </year> <title> Tolerating noisy, irrelevant and novel attributes in instance- based learning algorithms. </title> <journal> International Journal of Man Machine Studies, </journal> <volume> 36(2) </volume> <pages> 267-287. </pages>
Reference: <author> Aha, D., Kibler, D., and Albert, M. </author> <year> (1991). </year> <title> Instance-based learning algorithms. </title> <journal> Machine Learning, </journal> <volume> 6(1) </volume> <pages> 37-66. </pages>
Reference: <author> Alterman, R. </author> <year> (1986). </year> <title> An adaptive planner. </title> <booktitle> In Proc. of AAAI-86, </booktitle> <pages> pages 65-69, </pages> <address> Philadelphia, PA. </address>
Reference-contexts: Parametrized solutions, a structural adaptation, is probably best understood. It is based on the comparison of the retrieved and input problem descriptions along the specified parameters. Parametrized adaptation is used in HYPO (Ashley, 1990), PERSUADER (Sycara, 1987), and PLEXUS <ref> (Alterman, 1986) </ref>. 3. Abstraction and respecialization is a general structural adaptation technique that abstracts the piece of the retrieved solution, and respecializes it later. Respecialization results in applying other specializations of the abstractions to the current situation. Thus, it results in analogical problem solving. <p> <ref> (Alterman, 1986) </ref>. 3. Abstraction and respecialization is a general structural adaptation technique that abstracts the piece of the retrieved solution, and respecializes it later. Respecialization results in applying other specializations of the abstractions to the current situation. Thus, it results in analogical problem solving. This technique is used in PLEXUS (Alterman, 1986) as a second step in adaptation process (first, a null adaptation is used, and only if something fails, the system replans it using abstraction and respecialization). A similar approach is used in PERSUADER (Sycara, 1987). 4.
Reference: <author> Alterman, R. </author> <year> (1988). </year> <title> Adaptive planning. </title> <journal> Cognitive Science, </journal> <volume> 12 </volume> <pages> 393-422. </pages>
Reference-contexts: A brief description of some case-based planning systems follows: * CHEF (Hammond, 1989a) is an early case-based planner, which works in the domain of Chinese recipes. CHEF address the problem of anticipating problems before execution time by learning from its problematic experiences. * PLEXUS <ref> (Alterman, 1988) </ref> is a program to demonstrate the skills required to ride a subway.
Reference: <author> Alterman, R. </author> <year> (1989). </year> <title> A concept space for reasoning about cases involving event structure. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 16-19, </pages> <address> Pensacola Beach, FL. </address>
Reference: <author> Alterman, R. and Wentworth, M. </author> <year> (1989). </year> <title> Determining the important features of a case. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 193-196, </pages> <address> Pensacola Beach, FL. </address>
Reference: <author> Anthony G. Francis, J. and Ram, A. </author> <year> (1993). </year> <title> Computational models of the utility problem and their application to a utility analysis of case-based reasoning. </title> <booktitle> In Proc. of the AAAI-93 Workshop on Case-Based Reasoning, </booktitle> <address> Washington, DC. </address> <note> 30 Ashley, </note> <author> K. D. </author> <year> (1988). </year> <title> Modelling legal argument: Reasoning with cases and hypotheticals. </title> <type> PhD the-sis, </type> <institution> Department of Computer and Information Science University of Massachusetts, Amherst. </institution> <note> Also available as a COINS Technical Report No. 88-01. </note>
Reference: <author> Ashley, K. D. </author> <year> (1990). </year> <title> Modeling Legal Argument: Reasoning with Case and Hypotheticals. </title> <publisher> MIT Press/Bradford Books, </publisher> <address> Cambridge, MA. </address>
Reference-contexts: The emphasize is on meeting different constraints simultaneously. * XBE (Pankakoski et al., 1991) is applied to manufacturing systems design. The system allows the user to represent and use different types of knowledge; it also uses hypothetical cases (similarly as HYPO system <ref> (Ashley, 1990) </ref>); * ARCHIE (Pearce et al., 1992) is used to help architects in the high-level task of conceptual design. The cases are used both for proposing and critiquing. <p> Previous cases are used to provide context to the case selection process. * HYPO <ref> (Ashley, 1990) </ref> does not start to work in this step since it has necessary information already given in the form of dimensions. * CLAVIER (Barletta and Hennessy, 1989; Hennessy and Hinkle, 1992) proposes several relevant cases; one case is presented as an overall layout and the other cases are used to <p> Parametrized solutions, a structural adaptation, is probably best understood. It is based on the comparison of the retrieved and input problem descriptions along the specified parameters. Parametrized adaptation is used in HYPO <ref> (Ashley, 1990) </ref>, PERSUADER (Sycara, 1987), and PLEXUS (Alterman, 1986). 3. Abstraction and respecialization is a general structural adaptation technique that abstracts the piece of the retrieved solution, and respecializes it later. Respecialization results in applying other specializations of the abstractions to the current situation. <p> It is reported, that the PROTOS is correct 100% of the time (while COBWEB only 58% of the time and ID3 only 29% of the time). * In HYPO <ref> (Ashley, 1990) </ref>, the validation was performed by the comparative analysis of four (out of thirty) legal cases by a system. * In CSI Battle Planner (Goodman, 1989), a set of 10% of the cases were put aside before classification.
Reference: <author> Ashley, K. D. and Rissland, E. L. </author> <year> (1988). </year> <title> Waiting on weighting: A symbolic least commitment approach. </title> <booktitle> In Proc. of AAAI-88, </booktitle> <pages> pages 239-244, </pages> <address> St. Paul, MN. </address>
Reference: <author> Bailey, D., Thompson, D., and Feinstein, J. </author> <year> (1987). </year> <title> Similarity networks as a knowledge represen tation for space application. </title> <booktitle> In Proc. of 3 rd Conference on Artificial Intelligence for Space Application, </booktitle> <pages> pages 279-284, </pages> <address> Huntsville, AL. </address>
Reference: <author> Bareiss, E. R. </author> <year> (1988). </year> <title> A unified approach to concept representation, classification, and learning. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Texas. </institution> <note> Also published as a Technical Report CS 88-10, </note> <institution> Dept. of Computer Science, Vanderbilt University, Nashville, TN. </institution>
Reference-contexts: different systems: * JULIA (Kolodner, 1987) presents a piece of an old plan as a ballpark solution if it is attempting to derive some piece of a meal plan; it proposes a similar meal plan as a ballpark solution, if the task is to derive a meal plan. * PROTOS <ref> (Bareiss, 1988) </ref> uses a coarse evaluation function to distinguish which of the many possible interpretations proposed by the recalled cases is closest to its new case. * PARADYME (Kolodner, 1989) uses preference heuristic after retrieval to choose the most useful cases from the set of cases returned by memory access functions. <p> Validation ensures corectness of the final system with respect to the user needs and requirements. On the one hand, verification of the CBR system is virtually non-existent. On the other hand, validation is presented in some systems, namely: * In PROTOS <ref> (Bareiss, 1988) </ref>, the accuracy serve as a validation method.
Reference: <author> Bareiss, E. R. </author> <year> (1989a). </year> <title> Exemplar-Based Knowledge Acquisition: A Unified Approach to Concept Representation, Classification, and Learning. </title> <publisher> Academic Press, </publisher> <address> Boston, MA. </address>
Reference-contexts: CASEY is built on top of an existing model-based diagnostic program. Because adaptation is based on a valid causal model, its diagnoses are as accurate as those made from scratch based on the same causal model and they also tend to be more time efficient. * PROTOS <ref> (Bareiss, 1989a) </ref>, a hearing disorders diagnostic system, is designed to ensure that cases are used in pointing the way out of previously experienced reasoning predicaments. In its application domain, many of the diagnoses manifest themselves in similar ways, and only subtle differences differentiate them.
Reference: <author> Bareiss, E. R. </author> <year> (1989b). </year> <title> The experimental evaluation of a case-based learning apprentice. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 162-167, </pages> <address> Pensacola Beach, FL. </address>
Reference: <author> Barletta, R. </author> <year> (1989). </year> <title> Case adaptation in autoclave layout design. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 203-207, </pages> <address> Pensacola Beach, FL. </address>
Reference-contexts: Cases are used to propose solutions; the model is used to verify these solutions, to point out where adaptation is needed, and to suggest specific adaptation. * CLAVIER <ref> (Barletta and Hennessy, 1989) </ref> is being used to lay out pieces made of composite materials in an oven to bake. There is no complete causal model of what works and why; however, the system's goal is to avoid placing pieces in the wrong places. <p> As an example, CHEF (Hammond, 1989a) modifies particular recipes, and JULIA (Kolodner, 1987) modifies prior criminal sentences. The CLAVIER system <ref> (Barletta, 1989) </ref> uses pieces of other cases to adapt the current case. This approach is more suitable than the rule-based approach since extremely large number of rules would be required to represent contextual information (in the case of CLAVIER, this information include material, shape, and position constraints of individual parts).
Reference: <author> Barletta, R. and Hennessy, D. </author> <year> (1989). </year> <title> Case adaptation in autoclave layout design. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <address> Pensacola Beach, FL. </address>
Reference-contexts: Cases are used to propose solutions; the model is used to verify these solutions, to point out where adaptation is needed, and to suggest specific adaptation. * CLAVIER <ref> (Barletta and Hennessy, 1989) </ref> is being used to lay out pieces made of composite materials in an oven to bake. There is no complete causal model of what works and why; however, the system's goal is to avoid placing pieces in the wrong places. <p> As an example, CHEF (Hammond, 1989a) modifies particular recipes, and JULIA (Kolodner, 1987) modifies prior criminal sentences. The CLAVIER system <ref> (Barletta, 1989) </ref> uses pieces of other cases to adapt the current case. This approach is more suitable than the rule-based approach since extremely large number of rules would be required to represent contextual information (in the case of CLAVIER, this information include material, shape, and position constraints of individual parts).
Reference: <author> Barletta, R. and Mark, W. </author> <year> (1988). </year> <title> Explanation-based indexing of cases. </title> <booktitle> In Proc. of AAAI-88, </booktitle> <pages> pages 541-546, </pages> <address> St. Paul, MN. </address>
Reference-contexts: The main advantage of the method is the possibility to automate the case classificaton. This process helps to incrementally refine the system's understanding of the case. The EBI system (Explanation-Based Indexing) <ref> (Barletta and Mark, 1988) </ref> can use any automatically selected feature for a classification; however, the system may select features which are hard to observe (or compute) or which does not provide sufficient discrimination (e.g., many cases would be retrieved using this feature).
Reference: <author> Berger, J. </author> <year> (1993). </year> <title> Knowledge acquisition and design support in a medical domain. </title> <booktitle> In Proc. of the AAAI-93 Workshop on Case-Based Reasoning, </booktitle> <address> Washington, DC. </address>
Reference: <author> Berman, D. H. and Hafner, C. D. </author> <year> (1993). </year> <title> Representing teleological structure in case-based le gal reasoning: The missing link. </title> <booktitle> In Proc. of the 4 rd International Conference on Artificial Intelligence and Law, </booktitle> <address> Amsterdam, The Netherlands. </address>
Reference: <author> Bhansali, S. and Harandi, M. </author> <year> (1993). </year> <title> Synthesis of UNIX programs using derivational analogy. </title> <journal> Machine Learning, </journal> <volume> 10(1) </volume> <pages> 7-55. </pages>
Reference: <author> Birnbaum, L. and Collins, G. C. </author> <year> (1988). </year> <title> The transfer of experience across planning domains through the acquisition of abstract strategies. </title> <booktitle> In Proc. of the 1 st Workshop on Case-Based Reasoning, </booktitle> <pages> pages 61-79, </pages> <address> Clearwater Beach, FL. </address>
Reference: <author> Birnbaum, L. and Collins, G. C. </author> <year> (1989). </year> <title> Remindings and engineering design themes: A case study in indexing vocabulary. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 47-51, </pages> <address> Pensacola Beach, FL. </address>
Reference: <author> Birnbaum, L., Collins, G. C., Freed, M., and Krulwich, B. </author> <year> (1990). </year> <title> Model-based diagnosis of planning failures. </title> <booktitle> In Proc. of AAAI-90, </booktitle> <pages> pages 318-323, </pages> <address> Boston, MA. </address>
Reference: <author> Bostrom, H. and Idestam-Almquist, P. </author> <year> (1989). </year> <title> APPRENTICE88 A case-based refiner for heuristic classification systems. </title> <type> Technical Report 157, </type> <institution> Department of Computer and Systems Sciences, University of Stokholm, Stokholm, Sweden. </institution>
Reference-contexts: On the one hand, there are systems which use only instances of cases; on the other hand, there are systems which use both instances of cases and their generalizations. There are also systems <ref> (Bostrom and Idestam-Almquist, 1989) </ref> which use the generalization process as a way of evolving useful rules from cases. Rules could be used when they match cases exactly, while cases would be used when rules were not immediately applicable.
Reference: <author> Bradtke, S. and Lehnert, W. G. </author> <year> (1988a). </year> <title> Some experiments with case-based search. </title> <booktitle> In Proc. of AAAI-88, </booktitle> <pages> pages 80-93, </pages> <address> St. Paul, MN. </address> <note> 31 Bradtke, </note> <author> S. and Lehnert, W. G. </author> <year> (1988b). </year> <title> Some experiments with case-based search. </title> <booktitle> In Proc. of the 1 st Workshop on Case-Based Reasoning, </booktitle> <pages> pages 80-93, </pages> <address> Clearwater Beach, FL. </address>
Reference-contexts: Some of these differences are captured next: * Bradtke and Lehnert's CBS system (Case-Based Search system) <ref> (Bradtke and Lehnert, 1988a) </ref> represents cases as complete problem solutions. A case is a list of problem states from a start state to a goal state.
Reference: <author> Brandau, R., Lemmon, A., and Lafond, C. </author> <year> (1991). </year> <title> Experience with extended episodes: Cases with complex temporal structure. </title> <booktitle> In Proc. of the 4 th Workshop on Case-Based Reasoning, </booktitle> <pages> pages 1-12, </pages> <address> Washington, D.C. </address>
Reference-contexts: case base; instead, the mechanism for adapting old plans is used. * Branting's GREBE system (Branting, 1991) uses a representation language in which arbitrary causal, temporal, and intensional relations in a legal domain could be stated explicitly through propositions (an average case consists of 89 propositions). * The NETTRAC system <ref> (Brandau, Lemmon and Lafond, 1991) </ref> represents cases as a complete history of a single network problem and all the control actions that alleviated the problem.
Reference: <author> Branting, L. K. </author> <year> (1988). </year> <title> The role of explanation in reasoning from legal precedent. </title> <booktitle> In Proc. of the 1 st Workshop on Case-Based Reasoning, </booktitle> <pages> pages 94-103, </pages> <address> Clearwater Beach, FL. </address>
Reference: <author> Branting, L. K. </author> <year> (1989). </year> <title> Integrating generalizations with exemplar-based reasoning. </title> <booktitle> In Proc. of the 11 th Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 139-146, </pages> <address> Ann Arbor, MI. </address>
Reference: <author> Branting, L. K. </author> <year> (1991). </year> <title> Integrating rules and precedents for classification and explanation: Automating legal analysis. </title> <type> PhD thesis, </type> <institution> University of Texas, Austin. </institution>
Reference-contexts: Because cases include background knowledge about the goals, PLEXUS does not have a significant case base; instead, the mechanism for adapting old plans is used. * Branting's GREBE system <ref> (Branting, 1991) </ref> uses a representation language in which arbitrary causal, temporal, and intensional relations in a legal domain could be stated explicitly through propositions (an average case consists of 89 propositions). * The NETTRAC system (Brandau, Lemmon and Lafond, 1991) represents cases as a complete history of a single network problem
Reference: <author> Branting, L. K. </author> <year> (1992). </year> <title> A case-based approach to problem formulation. </title> <booktitle> In Proc. of the 14 th Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 726-731, </pages> <address> Bloomington, </address> <note> IN. </note>
Reference-contexts: As was presented, case representation depends (at least partially) on the task for which a CBR system is used. In <ref> (Branting, 1992) </ref> it is argued that for a general-purpose knowledge base, intended to support a variety of different tasks, a featural representation language, capable of expressing only case attributes relevant to a single task, is not sufficient. Instead, a relational representation is required. <p> The FGP Machine is a software architecture that processes large databases 2 and makes the knowledge from them explicit. * A special intelligent system is used as an assistance to case acquisition. A representative of this approach is the CBF system (Case-Based Formulation) <ref> (Branting, 1992) </ref>. The system is based on the use of previous cases as a model and guide for expressing new cases. A copy-and-edit approach is used, where a frame is added to a case base by finding a similar frame, copying it, and modifying the copy.
Reference: <author> Broos, P. and Branting, L. K. </author> <year> (1993). </year> <title> Compositional instance-based acquisition of preference predicates. </title> <booktitle> In Proc. of the AAAI-93 Workshop on Case-Based Reasoning, </booktitle> <address> Washington, DC. </address>
Reference: <author> Buchanan, B. G. and Wilkins, D. C. </author> <year> (1993). </year> <title> Readings in Knowledge Acquisition and Learning. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA. </address>
Reference-contexts: There has not been sufficient progress in the area of knowledge acquisition, mainly because the knowledge acquisition problem can be defined only after the issues of knowledge organization, representation, and inference are settled <ref> (Buchanan and Wilkins, 1993) </ref>. Knowledge-based system should satisfy three main concerns of related areas, namely: 1. The program should have a model that is well understood. <p> The most similar case is used as a basis for a new appraisal, while the others serve as a guideline for an adaptation of it. * Protein secondary structure prediction system <ref> (Leng, Buchanan and Nicholas, 1993) </ref> retrieves first k similar cases (protein structures) from the case base (the number of selected cases is variable and depends on the precision of the similarity metric). The most similar protein is considered as a reference case. <p> Later tests revealed 81.3% accuracy in predicting these situations. * In PSSP (Protein Secondary Structure Prediction) system <ref> (Leng, Buchanan and Nicholas, 1993) </ref> authors used varying reference proteins number (1 to 55) and varying window size (20 to 24) to comparatively evaluate the system's performance. The best results were obtained with 55 reference proteins and the window size of 22.
Reference: <author> Burstein, M. H. </author> <year> (1986). </year> <title> Concept formation by incremental analogical reasoning and debugging. </title> <editor> In Michalski, R. S., Carbonell, J. G., and Mitchell, T. M., editors, </editor> <booktitle> Machine Learning: An Artificial Intelligence Approach, volume 2, </booktitle> <address> Los Altos, CA. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Burstein, M. H. </author> <year> (1989). </year> <title> Analogy vs. CBR: The purpose of mapping. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 133-136, </pages> <address> Pensacola Beach, FL. </address>
Reference: <author> Carbonell, J. G. </author> <year> (1981). </year> <title> A computational model of analogical problem solving. </title> <booktitle> In Proc. of the 7 th IJCAI, </booktitle> <pages> pages 147-152, </pages> <address> Vancouver, Canada. </address>
Reference: <author> Carbonell, J. G. </author> <year> (1983a). </year> <title> Derivational analogy and its role in problem solving. </title> <booktitle> In Proc. of AAAI-83, </booktitle> <pages> pages 64-69, </pages> <address> Washington, DC. </address>
Reference: <author> Carbonell, J. G. </author> <year> (1983b). </year> <title> Derivational analogy in problem solving and knowledge acquisition. </title> <booktitle> In Proc. of the 2 nd International Workshop on Machine Learning, </booktitle> <address> Monticello, IL. </address>
Reference: <author> Carbonell, J. G. </author> <year> (1986). </year> <title> Learning by analogy: Formulating and generalizing plans from past experience. </title> <editor> In Michalski, R. S., Carbonell, J. G., and Mitchell, T. M., editors, </editor> <booktitle> Machine Learning: An Artificial Intelligence Approach, </booktitle> <volume> volume 2. </volume>
Reference: <author> Carbonell, J. G. and Veloso, M. M. </author> <year> (1988). </year> <title> Integrating derivational analogy into a general problem solving architecture. </title> <booktitle> In Proc. of the 1 st Workshop on Case-Based Reasoning, </booktitle> <pages> pages 104-123, </pages> <address> Clearwater Beach, FL. </address>
Reference: <author> Cardie, C. </author> <year> (1993a). </year> <title> A case-based approach to knowledge acquisition for domain-specific sentence analysis. </title> <booktitle> In Proc. of AAAI-93, </booktitle> <address> Washington, DC. </address>
Reference: <author> Cardie, C. </author> <year> (1993b). </year> <title> A case-based approach to knowledge acquisition for domain-specific sentence analysis. </title> <type> Personal communication. </type>
Reference-contexts: Noted exception is the SQUAD system for software quality control (Kitano et al., 1992; Kitano, Shibata and Shimazu, 1993) with 25,000 cases, the ANAPRON system for the task of pronouncing names (Golding and Rosenbloom, 1991) with 5,000 cases, and a case based system for knowledge acquisition <ref> (Cardie, 1993b) </ref> with 3,060 cases. 3 Because CBR systems are studied as both psychological and computational systems, one should evaluate such systems accordingly. A psychological model should prove to be useful for explanation of psychological data, whereas computational system should prove to be useful in the real-world applications.
Reference: <author> Cardie, C. </author> <year> (1993c). </year> <title> Using decision trees to improve case-based learning. </title> <booktitle> In Proc. of the 10 th International Conference on Machine Learning, </booktitle> <address> Amherst, MA. </address>
Reference: <author> Cohen, P. R. </author> <year> (1989). </year> <title> Evaluation and case-based reasoning. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 168-172, </pages> <address> Pensacola Beach, FL. 32 Collins, </address> <publisher> G. </publisher> <address> C. </address> <year> (1989). </year> <title> Plan adaptation: A transformational approach. </title> <booktitle> In Proc. of the 2 nd Work--shop on Case-Based Reasoning, </booktitle> <pages> pages 90-93, </pages> <address> Pensacola Beach, FL. </address>
Reference: <author> Collins, G. C. and Birnbaum, L. </author> <year> (1990). </year> <title> Problem-solver state descriptions as abstract indices for case retrieval. </title> <booktitle> In AAAI Spring Symposium on Case-Based Reasoning, </booktitle> <pages> pages 32-35. </pages>
Reference: <author> Converse, T., Hammond, K. J., and Marks, M. </author> <year> (1989). </year> <title> Learning modification rules from expectation failure. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 110-114, </pages> <address> Pensacola Beach, FL. </address>
Reference-contexts: of the system on a particular domain. * The system uses only domain dependent rules for adaptation (Kass, 1989; Goel and Chan drasekaran, 1989; Alterman, 1988; Carbonell, 1986). * The initial set of techniques is domain independent; later, some domain specific rules are incorporated through the explanation of expectation failures <ref> (Converse, Hammond and Marks, 1989) </ref>. * Modification techniques are domain independent (Hinrichs, 1989; Hanks and Weld, 1992). * The system has a set of meta-goals that span across domains and above them specific trans formations are constructed to optimize plans (Collins, 1989). 6.1 Adaptation Strategies Based on the decision what needs
Reference: <author> Cook, D. J. </author> <year> (1991). </year> <title> The base selection task in analogical planning. </title> <booktitle> In Proc. of the 12 th IJCAI, </booktitle> <pages> pages 790-795, </pages> <address> Sidney, Australia. </address>
Reference: <author> DeJong, G. F. and Mooney, R. J. </author> <year> (1986). </year> <title> Explanation-based learning: An alternative view. </title> <journal> Machine Learning, </journal> <volume> 1(2) </volume> <pages> 145-176. </pages>
Reference: <author> Deraedt, L. and Bruynooghe, M. </author> <year> (1992). </year> <title> Interactive concept-learning and constructive induction by analogy. </title> <journal> Machine Learning, </journal> <volume> 8(2) </volume> <pages> 107-150. </pages>
Reference: <author> Dierbach, C. and Chester, D. L. </author> <year> (1991). </year> <title> A formal basis for analogical reasoning. </title> <booktitle> In Proc. of 2 rd International Conference on Principles of Knowledge Representation and Reasoning. </booktitle>
Reference: <author> Domeshek, E. A. </author> <year> (1992). </year> <title> Do the right thing: A component theory for indexing stories as social advice. </title> <type> PhD thesis, </type> <institution> Yale University. </institution> <note> Also available as a Technical Report 92-26 from the Northwestern University. </note>
Reference-contexts: In (Schank et al., 1990), an attempt is made to unify different approaches to the indexing problem. The authors present ideas about the 13 representational issues required for efficient retrieval. More theoretical work on this problem was presented in <ref> (Domeshek, 1992) </ref>. However, in both cases only certain domains (story understanding) were considered and no attempts were made to consider other domains.
Reference: <author> Falkenhainer, B., Forbus, K. D., and Gentner, D. </author> <year> (1989). </year> <title> Structure-maping engine. </title> <journal> Artificial Intelligence, </journal> <volume> 41 </volume> <pages> 1-63. </pages>
Reference-contexts: Analogical problem solving has also been studied as a psychological model. In SME (Structure Mapping Engine, <ref> (Falkenhainer, Forbus and Gentner, 1989) </ref>) structural and semantic constraints (Gentner, 1983; Keane, Ledgeway and Duff, 1991) are used to generate all possible matches between two domains. Later, the resulting set is processed using structural criteria and the best match set is identified.
Reference: <author> Feret, M. P. and Glasgow, J. I. </author> <year> (1993). </year> <title> Hybrid case-based reasoning for the diagnosis of complex devices. </title> <booktitle> In Proc. of AAAI-93, </booktitle> <address> Washington, DC. </address>
Reference-contexts: In its application domain, many of the diagnoses manifest themselves in similar ways, and only subtle differences differentiate them. By using feedback from the user, PROTOS learns these subtle differences. * EAD (Explanation-Aided Diagnosis) <ref> (Feret and Glasgow, 1993) </ref> is a model-based diagnostic system with a case-based reasoning module, applied for diagnosis of complex devices. The system uses hierarchical knowledge representation and the model-based reasoner is used to identify relevant experience.
Reference: <author> Fertig, S. and Gelertner, D. H. </author> <year> (1991). </year> <title> FGP: A virtual machine for acquiring knowledge from cases. </title> <booktitle> In Proc. of the 12 th IJCAI, </booktitle> <pages> pages 796-802, </pages> <address> Sidney, Australia. </address>
Reference-contexts: The process of a case base construction can be simplified as follows: * A case base is created automatically from an existing database. An example of this approach is the FGP Machine (Fetch, Generalize, and Project) <ref> (Fertig and Gelertner, 1991) </ref>. The FGP Machine is a software architecture that processes large databases 2 and makes the knowledge from them explicit. * A special intelligent system is used as an assistance to case acquisition. A representative of this approach is the CBF system (Case-Based Formulation) (Branting, 1992).
Reference: <author> Fisher, D. </author> <year> (1987). </year> <title> Knowledge acquisition via incremental concept clustering. </title> <journal> Machine Learning, </journal> <volume> 2(1) </volume> <pages> 39-172. </pages>
Reference-contexts: feature weights are context dependent and thus they must be either predefined (and consequently fixed) or a special method must be used (e.g., inductive learning) to specify them in more dynamic way (not necessarily after each case acquisition). * The inductive approach (e.g., ID3 (Quinlan, 1986), UNIMEM (Lebowitz, 1987), COBWEB <ref> (Fisher, 1987) </ref>) automatically extracts relevant features for retrieval or creates hierarchies of cases by comparing the classification and discrimination abilities (the ability to characterize and distinguish a particular case from the others) of individual features (Goodman, 1989; Simoudis, 1992).
Reference: <author> Gaschnig, J. </author> <year> (1979). </year> <title> A problem similarity approach to devising heuristics: First results. </title> <booktitle> In Proc. of AAAI-79, </booktitle> <pages> pages 301-307. </pages>
Reference: <author> Gentner, D. </author> <year> (1983). </year> <title> Structure-mapping: A theoretical framework for analogy. </title> <journal> Cognitive Science, </journal> <volume> 7(2) </volume> <pages> 155-170. </pages>
Reference: <author> Gentner, D. </author> <year> (1989). </year> <title> The mechanisms of analogical learning. </title> <editor> In Vosniadou, S. and Ortony, A., editors, </editor> <booktitle> Similarity and Analogical Reasoning, </booktitle> <pages> pages 199-241, </pages> <address> New York, NY. </address> <publisher> Cambridge University Press. </publisher>
Reference-contexts: Analogical problem solving has also been studied as a psychological model. In SME (Structure Mapping Engine, <ref> (Falkenhainer, Forbus and Gentner, 1989) </ref>) structural and semantic constraints (Gentner, 1983; Keane, Ledgeway and Duff, 1991) are used to generate all possible matches between two domains. Later, the resulting set is processed using structural criteria and the best match set is identified.
Reference: <author> Gentner, D. and Forbus, K. D. </author> <year> (1991). </year> <title> MAC/FAC: A model of similarity-based retrieval. </title> <booktitle> In Proc. of the 13 th Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 504-509, </pages> <address> Chicago, IL. </address>
Reference-contexts: Later, the resulting set is processed using structural criteria and the best match set is identified. In the ARCS system (Analog Retrieval by Constraint Satisfaction) (Thagard et al., 1990), analogs are retrieved using multiple constraints (the system retrieves superficially and analogically similar analogs). In the MAC/FAC system <ref> (Gentner and Forbus, 1991) </ref>, a two stage retrieval is used as in ARCS. First, analogs are retrieved based on superficial similarities. Second, a retrieved set of analogs is refined based on structural similarities (second stage is similar to the SME approach).
Reference: <author> Gick, M. and Holyoak, K. J. </author> <year> (1980). </year> <title> Analogical problem solving. </title> <journal> Cognitive Psychology, </journal> <volume> 12 </volume> <pages> 306-355. </pages>
Reference: <author> Goel, A. K. </author> <year> (1989). </year> <title> Integration of case-based reasoning and model-based reasoning for adaptive design problem solving. </title> <type> PhD thesis, </type> <institution> Department of Computer and Information Science. The Ohio State University. </institution>
Reference-contexts: Knowledge differences specify the character and amount of domain knowledge required for adaptation. * System uses deep understanding of the dependencies in a domain. An example is a system presented in <ref> (Goel and Chandrasekaran, 1989) </ref>, where design modification techniques are guided by the internal dependency structure of the plan. 21 * System uses only surface level techniques to adapt cases.
Reference: <author> Goel, A. K. and Chandrasekaran, B. </author> <year> (1989). </year> <title> Use of device models in adaptation of design cases. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 100-109, </pages> <address> Pensacola Beach, FL. </address> <note> 33 Golding, </note> <author> A. R. and Rosenbloom, P. S. </author> <year> (1991). </year> <title> Improving rule-based systems through case-based reasoning. </title> <booktitle> In Proc. of AAAI-91, </booktitle> <pages> pages 22-27, </pages> <address> Anaheim, CA. </address>
Reference-contexts: Knowledge differences specify the character and amount of domain knowledge required for adaptation. * System uses deep understanding of the dependencies in a domain. An example is a system presented in <ref> (Goel and Chandrasekaran, 1989) </ref>, where design modification techniques are guided by the internal dependency structure of the plan. 21 * System uses only surface level techniques to adapt cases.
Reference: <author> Gonzalez, A. J. and Laureano-Ortiz, R. </author> <year> (1992). </year> <title> A case-based reasoning approach to real estate property appraisal. </title> <journal> Expert Systems with Applications, </journal> <volume> 4 </volume> <pages> 229-246. </pages>
Reference-contexts: since it has necessary information already given in the form of dimensions. * CLAVIER (Barletta and Hennessy, 1989; Hennessy and Hinkle, 1992) proposes several relevant cases; one case is presented as an overall layout and the other cases are used to complete the layout where required. * CBA (Case-Based Appraisal) <ref> (Gonzalez and Laureano-Ortiz, 1992) </ref> retrieves ten most similar cases which are used to compute the similarity match score. <p> Hypothetical cases are incomplete; thus, they cannot be used in matching to the same extent as actual cases. However, they are used to introduce new design choices to case-based system and to integrate case-based and rule-based reasoning. In the case of PERSUADER (Sycara, 1987) and CBA <ref> (Gonzalez and Laureano-Ortiz, 1992) </ref> the adaptation is performed using adaptation critics, which uses similarity metrics. This allows for meaningful adaptation but it is a domain-dependent approach.
Reference: <author> Goodman, M. </author> <year> (1989). </year> <title> CBR in battle planning. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 264-269, </pages> <address> Pensacola Beach, FL. </address>
Reference-contexts: If everything about the situation is known, projection is just running known inferences forward from a solution. However, 4 in many cases, all effects cannot be predicted. Here, cases provide a way to projecting effects based on what has been true in the past <ref> (Goodman, 1989) </ref>. A natural application for interpretative systems is the American legal system: relevant cases form an argument for or against a case. There is no need to modify the past case, the problem is solved by finding and presenting the relevant cases. 2. <p> MEDIC also compares the importance of goals and decides which plan to use to achieve the most important goal. Because of its emphasize on planning, the system is considered to be a case-based planning system, rather than case-based diagnostic system. * CSI BATTLE PLANNER <ref> (Goodman, 1989) </ref> is an example where cases are used to criticize and repair plans before they are executed. * SPA (Hanks and Weld, 1992) is a domain-independent case-based planning system. <p> the PROTOS is correct 100% of the time (while COBWEB only 58% of the time and ID3 only 29% of the time). * In HYPO (Ashley, 1990), the validation was performed by the comparative analysis of four (out of thirty) legal cases by a system. * In CSI Battle Planner <ref> (Goodman, 1989) </ref>, a set of 10% of the cases were put aside before classification.
Reference: <author> Hammond, K. J. </author> <year> (1989a). </year> <title> Case-Based Planning: Viewing Planning as a Memory Task. </title> <publisher> Academic Press, </publisher> <address> Boston, MA. </address>
Reference-contexts: Case-based planning uses previously successful plans, classified according to the conjunction of goals they achieve. Case-based planning inherently diminishes the problem of combining planning and execution. A brief description of some case-based planning systems follows: * CHEF <ref> (Hammond, 1989a) </ref> is an early case-based planner, which works in the domain of Chinese recipes. CHEF address the problem of anticipating problems before execution time by learning from its problematic experiences. * PLEXUS (Alterman, 1988) is a program to demonstrate the skills required to ride a subway. <p> A case is a list of problem states from a start state to a goal state. Each case implicitly contains many others as sub-cases. * Hammond's CHEF <ref> (Hammond, 1989a) </ref> represents cases as plans, which are either positive (they lead to a successful solution) or negative (they represent failures). Failures are used to predict potential problems. <p> The problem description is filtered prior to memory retrieval. During this stage, only relevant features are used. The problem with this approach is that the salient features have to be somehow selected for each problem: in <ref> (Hammond, 1989a) </ref> they are predefined and in (Lauzon and Rose, 1993) they are dynamically specified by the user. 3. Retrieved cases are filtered after retrieval (Rissland and Ashley, 1986; Koton, 1988b; Kolod-ner, 1989; Simoudis and Miller, 1990). <p> As an example, CHEF <ref> (Hammond, 1989a) </ref> modifies particular recipes, and JULIA (Kolodner, 1987) modifies prior criminal sentences. The CLAVIER system (Barletta, 1989) uses pieces of other cases to adapt the current case. <p> Even though the adaptation strategies are usually domain dependent, there are some common characteristics among them. The following approaches have been suggested: * Use of a set of domain-dependent adaptation rules (Hammond, 1989a; Kass, 1991). In addition to domain dependency, the rules in CHEF <ref> (Hammond, 1989a) </ref> are usable only for local changes; they cannot be used to make global changes to the whole recipe. Difficulty 22 in obtaining reliable adaptation rules, together with an impossibility of using these specific rules in other domains, is an obvious problem of domain-dependent adaptation.
Reference: <author> Hammond, K. J. </author> <year> (1989b). </year> <title> Opportunistic memory. </title> <booktitle> In Proc. of the 11 th IJCAI, </booktitle> <address> Detroit, MI. </address>
Reference: <author> Hammond, K. J., Converse, T., Marks, M., and Seifert, C. M. </author> <year> (1993). </year> <title> Opportunism and learning. </title> <journal> Machine Learning, </journal> <volume> 10(3) </volume> <pages> 279-309. </pages>
Reference: <author> Hanks, S. and Weld, D. S. </author> <year> (1992). </year> <title> The systematic plan adaptor: A formal foundation for case-based planning. </title> <type> Technical Report 92-09-04, </type> <institution> University of Washington, </institution> <address> Washington, DC. </address> <note> Submitted to CACM. </note>
Reference-contexts: Because of its emphasize on planning, the system is considered to be a case-based planning system, rather than case-based diagnostic system. * CSI BATTLE PLANNER (Goodman, 1989) is an example where cases are used to criticize and repair plans before they are executed. * SPA <ref> (Hanks and Weld, 1992) </ref> is a domain-independent case-based planning system. A plan is represented as a set of steps, various links, and constraints describing interrelationships among the steps. 2.3.3 Case-Based Diagnosis In case-based diagnosis, a solver is given a set of symptoms and is asked to explain them.
Reference: <author> Heckerman, D. </author> <year> (1991). </year> <title> Similarity networks for the construction of multiple-fault belief networks. </title> <booktitle> Uncertainty in Artificial Intelligence 6, </booktitle> <volume> 12 </volume> <pages> 51-64. </pages>
Reference: <author> Hennessy, D. and Hinkle, D. </author> <year> (1991). </year> <title> Initial results from Clavier: A case-based autoclave loading assistant. </title> <booktitle> In Proc. of the 4 th Workshop on Case-Based Reasoning, </booktitle> <pages> pages 225-232, </pages> <address> Washington, D.C. </address>
Reference: <author> Hennessy, D. and Hinkle, D. </author> <year> (1992). </year> <title> Applying case-based reasoning to autoclave loading. </title> <journal> IEEE Expert, </journal> <volume> 7 </volume> <pages> 21-26. </pages>
Reference-contexts: Here, the CBR paradigm provides the possibility to solve the problems at once and to adapt only those parts of the solution which do not fit the new situation <ref> (Hennessy and Hinkle, 1992) </ref>. Solving the problem by adapting an old solution allows the problem solver to avoid dealing with many constraints, and keeps it from having to break the problem in to pieces which would require subsequent recomposition (Kolodner, 1992).
Reference: <author> Hinrichs, T. R. </author> <year> (1988). </year> <title> Towards an architecture for open world problem solving. </title> <booktitle> In Proc. of the 1 st Workshop on Case-Based Reasoning, </booktitle> <pages> pages 182-189, </pages> <address> Clearwater Beach, FL. </address>
Reference: <author> Hinrichs, T. R. </author> <year> (1989). </year> <title> Strategies for adaptation and recovery in a design problem solver. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 115-118, </pages> <address> Pensacola Beach, FL. </address>
Reference: <author> Holyoak, K. J. </author> <year> (1985). </year> <title> The pragmatics of analogical transfer. </title> <editor> In Bower, G., editor, </editor> <booktitle> The Psychology of Learning and Motivation, </booktitle> <address> New York, NY. </address> <publisher> Academic Press. </publisher>
Reference: <author> Hunter, L. </author> <year> (1989). </year> <title> Finding paradigm cases, or when is a case worth remembering? In Proc. </title> <booktitle> of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 57-61, </pages> <address> Pensacola Beach, FL. </address>
Reference: <author> Indurkhya, B. </author> <year> (1990). </year> <title> On the role of interpretive analogy in learning. </title> <journal> New Generation Computing, </journal> <volume> 8(4) </volume> <pages> 385-402. </pages>
Reference: <author> Jagadish, H. </author> <year> (1991). </year> <title> A retrieval technique for similar shapes. </title> <booktitle> In Proc. of the 10 th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 208-217, </pages> <address> Denver, </address> <publisher> CO. </publisher>
Reference-contexts: It was shown (Watanabe, 1985) that if we take this approach and we use all available primary (observed) and derived attributes, then any object is equally similar to any other ("Ugly Duckling Effect"). In database community, namely in spatial databases, the problem of similarity has also been studied <ref> (Jagadish, 1991) </ref>. The author proposes an organization for a database of objects that permits an efficient retrieval of objects with a shape similar to an input shape.
Reference: <author> Jones, E. K. </author> <year> (1989). </year> <title> Case-based analogical reasoning using proverbs. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 275-279, </pages> <address> Pensacola Beach, FL. </address>
Reference-contexts: Another example of analogical problem solving using a case-based approach is the SWALE system (Kass and Leake, 1988), a case-based creative explainer. When SWALE can not explain an anomalous event, it starts to look for other explanations in other contexts. The analogical reasoner in the planning system BRAINSTORMER <ref> (Jones, 1989) </ref> is similar to TWEAKER (a descendant of the SWALE system, which focuses on the tasks of explanation application and adaptation (Kass and Leake, 1988)); it is a failure-driven process and is invoked to answer requests from the planner.
Reference: <author> Jones, E. K. </author> <year> (1991). </year> <title> Adapting abstract knowledge. </title> <booktitle> In Proc. of the 13 th Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 155-160, </pages> <address> Chicago, IL. </address>
Reference: <author> Jones, E. K. </author> <year> (1992). </year> <title> Model-based case adaptation. </title> <booktitle> In Proc. of AAAI-92, </booktitle> <pages> pages 673-678, </pages> <address> San Jose, CA. </address>
Reference-contexts: It is not possible to divide the case into a subcases since it would sacrifice the context of the complex case. * In Jones's BRAINSTORMER <ref> (Jones, 1992) </ref>, cases represent abstract planning advice. This allows using of the same cases in different planning situations, which is usually not possible in other CBR systems. <p> Thus, ABE is less domain-dependant than CHEF. * Use of a domain model (Koton, 1988b; Jones, 1992). The model is used to adapt the retrieved diagnosis, taking into account differences in symptoms between retrieved and input cases (Koton, 1988b, CASEY). In the case of BRAINSTORMER <ref> (Jones, 1992) </ref>, the adaptation converts generic knowledge into specific knowledge. The model-based adaptation suffers from the same problems as a set of an adaptation rules in CHEF. * Use of pieces of existing cases (Hennessy and Hinkle, 1992; Gonzalez and Laureano-Ortiz, 1992; Tanaka, Hattori and Sueda, 1992). <p> There are also systems (Bostrom and Idestam-Almquist, 1989) which use the generalization process as a way of evolving useful rules from cases. Rules could be used when they match cases exactly, while cases would be used when rules were not immediately applicable. In <ref> (Jones, 1992) </ref>, a system which uses only abstract cases is presented (see also page 11). Usually, the learning in CBRSs is opportunistic, which means that it is invoked only when some opportunities are recognized and it is not planned in advance.
Reference: <author> Kambhampati, S. </author> <year> (1989). </year> <title> Representational requirements for plan reuse. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 20-23, </pages> <address> Pensacola Beach, FL. </address> <note> 34 Kass, </note> <author> A. </author> <year> (1990). </year> <title> Developing creative hypotheses by adapting explanations. </title> <type> PhD thesis, </type> <institution> Yale Uni--versity. </institution> <note> Also available as an ILS technical report No. 6, </note> <institution> Northwestern University. </institution>
Reference-contexts: Failures are used to predict potential problems. For adaptation process, failure explanation, and credit assignment in CHEF, a strong domain model is used. * Kambhampati's PRIAR <ref> (Kambhampati, 1989) </ref> uses plans augmented with causal representation.
Reference: <author> Kass, A. M. </author> <year> (1989). </year> <title> Strategies for adapting explanations. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 119-123, </pages> <address> Pensacola Beach, FL. </address>
Reference-contexts: An example is a system presented in (Goel and Chandrasekaran, 1989), where design modification techniques are guided by the internal dependency structure of the plan. 21 * System uses only surface level techniques to adapt cases. As an example, Kass's system <ref> (Kass, 1989) </ref> relies on external evaluation to ensure that no impossibilities are introduced to explanation during modification.
Reference: <author> Kass, A. M. </author> <year> (1991). </year> <title> Adaptation strategies for case-based plan recognition. </title> <booktitle> In Proc. of the 13 th Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 161-166, </pages> <address> Chicago, IL. </address>
Reference: <author> Kass, A. M. and Leake, D. B. </author> <year> (1988). </year> <title> Case-based reasoning applied to constructing explanations. </title> <booktitle> In Proc. of the 1 st Workshop on Case-Based Reasoning, </booktitle> <pages> pages 190-208, </pages> <address> Clearwater Beach, FL. </address>
Reference-contexts: It is a story understanding program which uses analogical problem solving if it cannot find direct answer to a query. Another example of analogical problem solving using a case-based approach is the SWALE system <ref> (Kass and Leake, 1988) </ref>, a case-based creative explainer. When SWALE can not explain an anomalous event, it starts to look for other explanations in other contexts. <p> When SWALE can not explain an anomalous event, it starts to look for other explanations in other contexts. The analogical reasoner in the planning system BRAINSTORMER (Jones, 1989) is similar to TWEAKER (a descendant of the SWALE system, which focuses on the tasks of explanation application and adaptation <ref> (Kass and Leake, 1988) </ref>); it is a failure-driven process and is invoked to answer requests from the planner. Analogical problem solving has also been studied as a psychological model.
Reference: <author> Keane, M. T. </author> <year> (1988). </year> <title> Analogical Problem Solving. </title> <publisher> Ellis Horwood, </publisher> <address> Chichester, UK. </address>
Reference: <author> Keane, M. T., Ledgeway, T., and Duff, S. </author> <year> (1991). </year> <title> Constraint on analogical mapping: The effects of similarity & order. </title> <booktitle> In Proc. of the 13 th Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 275-280, </pages> <address> Chicago, IL. </address>
Reference: <author> Kibler, D. and Aha, D. </author> <year> (1987). </year> <title> Learning representative exemplars of concepts: An initial case study. </title> <booktitle> In Proc. of the 4 th International Workshop on Machine Learning, </booktitle> <pages> pages 24-30, </pages> <address> Irvine, CA. </address>
Reference-contexts: The first group tries to model human problem solving in its all deepness and to build systems psychologically valid. In contrast, artificial intelligence community attempts to build useful systems, even if they function differently from the way humans do. The paper <ref> (Kibler and Aha, 1987) </ref> presents some initial baseline for evaluating the performance of complex similarity assessment strategies. The simplest systems are based on the assumptions 18 that uniform featural description exists and that the exhaustive search is tractable.
Reference: <author> King, J., Klein, G., Whitaker, L., and Wiggins, S. </author> <year> (1988). </year> <title> SURVER III: An application of case based reasoning. </title> <booktitle> In Proceedings of the 4 th Annual Aerospace Applications of AI Conference, </booktitle> <address> Dayton, OH. </address>
Reference-contexts: Usually, only featural similarities are used, systems are restricted only to a single problem-solving context. Because there is a difference in understanding similarity among AI researchers, cognitive psychologists, and information retrieval experts an effort was made which tried to unify different views on similarity <ref> (King et al., 1988) </ref>. Some of the most important issues are the following ones: * Similarity of one situation to another is highly domain dependent.
Reference: <author> Kitano, H., Shibata, A., and Shimazu, H. </author> <year> (1993). </year> <title> Case-method: A methodology for building large-scale case-based systems. </title> <booktitle> In Proc. of AAAI-93, </booktitle> <address> Washington, DC. </address>
Reference-contexts: This allows using of the same cases in different planning situations, which is usually not possible in other CBR systems. Moreover, fewer number of abstract cases are required for the same functionality compared to the system with instances of cases. * In the SQUAD system <ref> (Kitano, Shibata and Shimazu, 1993) </ref>, cases represent analysis of problems under the status quo, possible causes, counter-measures taken, and effects of the counter-measures. The case structure is dynamically changing as new cases are acquired. <p> Instead, a relational representation is required. This should form a common ground which serves all applications. 1 In <ref> (Kitano, Shibata and Shimazu, 1993) </ref> it is reported that the system uses 25,000 cases with 3,000 cases added every year, 1,500 employees is responsible for case accumulation, and the utilization of the system in the NEC Corporation saves $100 million per year. 11 3.2 Case Base Construction An important issue, related <p> ertner, 1991; Jones, 1991; Yang, Robertson and Lee, 1993; Ram, 1993b); * the algorithm can depend heavily on a special computer architecture (Stanfill and Waltz, 1986; Kolodner, 1989; Waltz, 1989; Rubin, 1992), or it can be implemented on a standard computer; * the classification algorithm assumes large, real-world case bases <ref> (Kitano, Shibata and Shi mazu, 1993) </ref> or it can assume only small ones; * in addition to functionality, the algorithm may or may not be psychologically plausible. <p> In such cases, the system only presents relevant experience to the user as an advice and it is up to the user to adapt presented cases as necessary. Because of this fact, it is desirable that the case base is larger than in other systems <ref> (Kitano, Shibata and Shimazu, 1993) </ref>.
Reference: <author> Kitano, H., Shibata, A., Shimazu, H., Kajihara, J., and Sato, A. </author> <year> (1992). </year> <title> Building large-scale and corporate-wide case-based systems: Integration of organizational and machine executable algorithms. </title> <booktitle> In Proc. of AAAI-92, </booktitle> <pages> pages 843-849, </pages> <address> San Jose, CA. </address>
Reference: <author> Kolodner, J. L. </author> <year> (1983). </year> <title> Maintaining organization in a dynamic long-term memory. </title> <journal> Cognitive Science, </journal> <volume> 7(4) </volume> <pages> 281-328. </pages>
Reference-contexts: When given a new problem, the program compares features between a new problem and all stored cases. Based on matching features, the overall similarity score is computed. More advanced approach is presented in <ref> (Kolodner, 1983, CYRUS) </ref>, (Kolodner and Kolodner, 1987, SHRINK), and (Kolodner, 1987, JULIA). Here, the similarity assessment is combined with the classification process. All similar cases are stored in the hierarchy under the same classification. <p> An example of such learning is failure-driven learning where goals and situations that are likely to cause problems in the future are identified (Hammond, 1989a; Hunter, 1989; Hammond et al., 1993). 7.2 Analogy Analogical problem solving has been used in case-based reasoning systems in various ways. The CYRUS <ref> (Kolodner, 1983) </ref> is the first computer implementation of many of the themes expressed in Schank's work (Schank, 1982). It is a story understanding program which uses analogical problem solving if it cannot find direct answer to a query.
Reference: <author> Kolodner, J. L. </author> <year> (1987). </year> <title> Capitalizing on failure through case-based inference. </title> <booktitle> In Proc. of the 9 th Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 715-726, </pages> <address> Seatle, WA. </address>
Reference-contexts: However, there are also diagnosis systems which are model-based (Koton, 1988b; Goel, 1989; Goel and Chandrasekaran, 1989; Birnbaum et al., 1990; Feret and Glasgow, 1993). In these cases, categorization is easier since the distinctive features are easily perceivable. A brief description of some case-based diagnosis systems follows: * SHRINK <ref> (Kolodner and Kolodner, 1987) </ref> is an early case-based reasoning system, designed to be a psychiatric diagnostician. <p> A system can propose a single case or a set of applicable cases. A set of cases can be used for justification, argumentation, or one solution can be constructed using all possible cases. What follows is a brief description of methods used in different systems: * JULIA <ref> (Kolodner, 1987) </ref> presents a piece of an old plan as a ballpark solution if it is attempting to derive some piece of a meal plan; it proposes a similar meal plan as a ballpark solution, if the task is to derive a meal plan. * PROTOS (Bareiss, 1988) uses a coarse <p> When given a new problem, the program compares features between a new problem and all stored cases. Based on matching features, the overall similarity score is computed. More advanced approach is presented in (Kolodner, 1983, CYRUS), <ref> (Kolodner and Kolodner, 1987, SHRINK) </ref>, and (Kolodner, 1987, JULIA). Here, the similarity assessment is combined with the classification process. All similar cases are stored in the hierarchy under the same classification. <p> When given a new problem, the program compares features between a new problem and all stored cases. Based on matching features, the overall similarity score is computed. More advanced approach is presented in (Kolodner, 1983, CYRUS), (Kolodner and Kolodner, 1987, SHRINK), and <ref> (Kolodner, 1987, JULIA) </ref>. Here, the similarity assessment is combined with the classification process. All similar cases are stored in the hierarchy under the same classification. If, however, the retrieved case proves not to be useful, the system make use of secondary classification based on failures. <p> As an example, CHEF (Hammond, 1989a) modifies particular recipes, and JULIA <ref> (Kolodner, 1987) </ref> modifies prior criminal sentences. The CLAVIER system (Barletta, 1989) uses pieces of other cases to adapt the current case.
Reference: <author> Kolodner, J. L. </author> <year> (1989). </year> <title> Selecting the best case for a case-based reasoner. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 77-81, </pages> <address> Pensacola Beach, FL. </address>
Reference-contexts: protection annotations left by a nonlinear planner. * Carbonell's work on derivational analogy (Carbonell, 1983a; Carbonell, 1983b; Carbonell and Veloso, 1988; Veloso and Carbonell, 1989) is more elaborated, compared to CHEF and PRIAR, in the sense that plans include the rationale for decisions as well as the results. * Kolodner <ref> (Kolodner, 1989) </ref> and Zito-Wolf (Zito-Wolf, 1993), suggest to use more vague definition of a case. <p> Implementation of a CBR system on a parallel computer without using case classification (Stanfill and Waltz, 1986; Waltz, 1989; Rubin, 1992). 3. Classification is supported by parallel implementation <ref> (Kolodner, 1989) </ref>. 4. Neither classification nor the parallel implementation is used (Thagard et al., 1990; Hennessy and Hinkle, 1991; Gentner and Forbus, 1991). However, this approach is only usable for small case bases. 4.1 Classification Methods Different systems use different classification methods. There are several possibilities to categorize these methods. <p> There is a tradeoff between an efficient retrieval and a quality of retrieval: the system should represent sufficient number of features while guarantee efficient processing for large case base. In order to control the number of retrieved cases the following order of preference heuristic was suggested <ref> (Kolodner, 1989) </ref>: 1. goal directed preference prefers cases that address the current reasoning goal; it orders them according to number of constraints, preferring more constraints; 2. salient-feature preference prefers matching on features which are more important in a particular situation over the matching on other features; 3. specificity preference prefers more <p> plan; it proposes a similar meal plan as a ballpark solution, if the task is to derive a meal plan. * PROTOS (Bareiss, 1988) uses a coarse evaluation function to distinguish which of the many possible interpretations proposed by the recalled cases is closest to its new case. * PARADYME <ref> (Kolodner, 1989) </ref> uses preference heuristic after retrieval to choose the most useful cases from the set of cases returned by memory access functions.
Reference: <author> Kolodner, J. L. </author> <year> (1992). </year> <title> An introduction to case-based reasoning. </title> <journal> Artificial Intelligence Review, </journal> <volume> 6(1) </volume> <pages> 3-34. </pages>
Reference-contexts: for or against the problem (Ashley, 1988; Gonzalez and Laureano-Ortiz, 1992; Berman and Hafner, 1993). 2.3 Application Areas of Case-Based Systems 2.3.1 Case-Based Design In case-based design, problems are defined as a set of constraints; the problem solver is required to provide a concrete artifact that solves the constraint problem <ref> (Kolodner, 1992) </ref>. The constraints can either underspecify the problem, i.e., there are many possible solutions or overconstrain the problem, i.e., there is no solution if all constraints are fulfilled. In solving either of these cases, the design specifications must be re-specified while solving the problem. <p> Solving the problem by adapting an old solution allows the problem solver to avoid dealing with many constraints, and keeps it from having to break the problem in to pieces which would require subsequent recomposition <ref> (Kolodner, 1992) </ref>. It is beneficial to keep track of near-miss cases and to use hypothetical cases for better adaptation process. In the HYPO system (Ashley, 1988; Rissland and Ashley, 1987b), this information helps the reasoner to focus on important features, which, if they were present, would yield a better solution.
Reference: <author> Kolodner, J. L. and Kolodner, R. </author> <year> (1987). </year> <title> Using experience in clinical problem solving: Introduction and framework. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 17(3) </volume> <pages> 420-431. </pages> <note> Also published as a TR GIT-ICS-85/21. </note>
Reference-contexts: However, there are also diagnosis systems which are model-based (Koton, 1988b; Goel, 1989; Goel and Chandrasekaran, 1989; Birnbaum et al., 1990; Feret and Glasgow, 1993). In these cases, categorization is easier since the distinctive features are easily perceivable. A brief description of some case-based diagnosis systems follows: * SHRINK <ref> (Kolodner and Kolodner, 1987) </ref> is an early case-based reasoning system, designed to be a psychiatric diagnostician. <p> A system can propose a single case or a set of applicable cases. A set of cases can be used for justification, argumentation, or one solution can be constructed using all possible cases. What follows is a brief description of methods used in different systems: * JULIA <ref> (Kolodner, 1987) </ref> presents a piece of an old plan as a ballpark solution if it is attempting to derive some piece of a meal plan; it proposes a similar meal plan as a ballpark solution, if the task is to derive a meal plan. * PROTOS (Bareiss, 1988) uses a coarse <p> When given a new problem, the program compares features between a new problem and all stored cases. Based on matching features, the overall similarity score is computed. More advanced approach is presented in (Kolodner, 1983, CYRUS), <ref> (Kolodner and Kolodner, 1987, SHRINK) </ref>, and (Kolodner, 1987, JULIA). Here, the similarity assessment is combined with the classification process. All similar cases are stored in the hierarchy under the same classification. <p> When given a new problem, the program compares features between a new problem and all stored cases. Based on matching features, the overall similarity score is computed. More advanced approach is presented in (Kolodner, 1983, CYRUS), (Kolodner and Kolodner, 1987, SHRINK), and <ref> (Kolodner, 1987, JULIA) </ref>. Here, the similarity assessment is combined with the classification process. All similar cases are stored in the hierarchy under the same classification. If, however, the retrieved case proves not to be useful, the system make use of secondary classification based on failures. <p> As an example, CHEF (Hammond, 1989a) modifies particular recipes, and JULIA <ref> (Kolodner, 1987) </ref> modifies prior criminal sentences. The CLAVIER system (Barletta, 1989) uses pieces of other cases to adapt the current case.
Reference: <author> Kolodner, J. L. and Riesbeck, C. K. </author> <year> (1986). </year> <title> Experience, Memory, and Reasoning. </title> <publisher> Lawrence Erlbaum Assoc., Inc., </publisher> <address> Hillsdale, NJ. </address>
Reference: <author> Kolodner, J. L. and Wills, L. W. </author> <year> (1993). </year> <title> Paying attention to the right thing: Issues of focus in case-based creative design. </title> <booktitle> In Proc. of the AAAI-93 Workshop on Case-Based Reasoning, </booktitle> <address> Washington, DC. </address>
Reference: <author> Koton, P. </author> <year> (1988a). </year> <title> Reasoning about evidence in causal explanation. </title> <booktitle> In Proc. of the 1 st Workshop on Case-Based Reasoning, </booktitle> <pages> pages 260-270, </pages> <address> Clearwater Beach, FL. 35 Koton, P. </address> <year> (1988b). </year> <title> Using experience in learning and problem solving. </title> <type> PhD thesis, </type> <institution> Computer Science Department, MIT. </institution>
Reference: <author> Koton, P. </author> <year> (1989). </year> <title> Evaluating case-based problem solving. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 173-175, </pages> <address> Pensacola Beach, FL. </address>
Reference-contexts: A theoretical analysis (in terms of default logic) of a case representation in early CBR systems is presented in <ref> (Koton and Chase, 1989) </ref>. Cases are considered to be a collection of features (attribute-value pairs) which are organized in a generalization structures. In this study, gens are structures which represent groups of similar cases. Each gen stores a list of common features (norms) for all cases it organizes.
Reference: <author> Koton, P. and Chase, M. P. </author> <year> (1989). </year> <title> Knowledge representation in a case-based reasoning system: Defaults and exceptions. </title> <booktitle> In Proc. of 1 st International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 203-211, </pages> <address> Toronto, Ontario. </address>
Reference-contexts: A theoretical analysis (in terms of default logic) of a case representation in early CBR systems is presented in <ref> (Koton and Chase, 1989) </ref>. Cases are considered to be a collection of features (attribute-value pairs) which are organized in a generalization structures. In this study, gens are structures which represent groups of similar cases. Each gen stores a list of common features (norms) for all cases it organizes.
Reference: <author> Krovvidy, S. and Wee, W. G. </author> <year> (1993). </year> <title> Wastewater treatment systems from case-based reasoning. </title> <journal> Machine Learning, </journal> <volume> 10(3) </volume> <pages> 341-363. </pages>
Reference: <author> Lauzon, D. and Rose, T. </author> <year> (1993). </year> <title> Task-oriented and similarity-based retrieval. </title> <booktitle> In Proc. of the 12 th International Conference on Entity-Relationship Approach, </booktitle> <address> Dallas, TX. </address> <note> Submitted. </note>
Reference-contexts: The problem description is filtered prior to memory retrieval. During this stage, only relevant features are used. The problem with this approach is that the salient features have to be somehow selected for each problem: in (Hammond, 1989a) they are predefined and in <ref> (Lauzon and Rose, 1993) </ref> they are dynamically specified by the user. 3. Retrieved cases are filtered after retrieval (Rissland and Ashley, 1986; Koton, 1988b; Kolod-ner, 1989; Simoudis and Miller, 1990). All these methods are domain-dependent and they have restrictions keeping them from being general. <p> A somewhat different approach is used in the FRANK system (Rissland et al., 1993); if the initial query is unsuccessful, then the CBR-task mechanism alters the particular initial values and resubmits the query. This is similar to the principle how task-oriented retrieval works in the system described in <ref> (Lauzon and Rose, 1993) </ref>; however, this system is more flexible than FRANK system thanks to the knowledge representation language TELOS (Mylopoulos et al., 1990). From the description of above mentioned retrieval algorithms follows that the associative retrieval is desirable if the flexibility is required.
Reference: <author> Lebowitz, M. </author> <year> (1986). </year> <title> Not the path to perdition: The utility of similarity-based learning. </title> <booktitle> In Proc. of AAAI-86, </booktitle> <pages> pages 533-537, </pages> <address> Philadelphia, PA. </address>
Reference: <author> Lebowitz, M. </author> <year> (1987). </year> <title> Experiments with incremental concept formation. </title> <journal> Machine Learning, </journal> <volume> 2(1) </volume> <pages> 103-138. </pages>
Reference-contexts: is that the feature weights are context dependent and thus they must be either predefined (and consequently fixed) or a special method must be used (e.g., inductive learning) to specify them in more dynamic way (not necessarily after each case acquisition). * The inductive approach (e.g., ID3 (Quinlan, 1986), UNIMEM <ref> (Lebowitz, 1987) </ref>, COBWEB (Fisher, 1987)) automatically extracts relevant features for retrieval or creates hierarchies of cases by comparing the classification and discrimination abilities (the ability to characterize and distinguish a particular case from the others) of individual features (Goodman, 1989; Simoudis, 1992).
Reference: <author> Leng, B., Buchanan, B. G., and Nicholas, H. B. </author> <year> (1993). </year> <title> Protein secondary structure prediction using two-level case-based reasoning. </title> <editor> In Searls, D. and Shavlik, J., editors, </editor> <booktitle> Proc. of the 1 st International Conference on Intelligent Systems for Molecular Biology, </booktitle> <address> Washington, DC. </address>
Reference-contexts: The most similar case is used as a basis for a new appraisal, while the others serve as a guideline for an adaptation of it. * Protein secondary structure prediction system <ref> (Leng, Buchanan and Nicholas, 1993) </ref> retrieves first k similar cases (protein structures) from the case base (the number of selected cases is variable and depends on the precision of the similarity metric). The most similar protein is considered as a reference case. <p> Later tests revealed 81.3% accuracy in predicting these situations. * In PSSP (Protein Secondary Structure Prediction) system <ref> (Leng, Buchanan and Nicholas, 1993) </ref> authors used varying reference proteins number (1 to 55) and varying window size (20 to 24) to comparatively evaluate the system's performance. The best results were obtained with 55 reference proteins and the window size of 22.
Reference: <author> Louis, S., McGraw, G., and Wyckoff, R. O. </author> <year> (1992). </year> <title> CBR assisted explanation of GA results. </title> <type> Technical Report 361, </type> <institution> Department of Computer Science, Indiana University, Bloomington, </institution> <note> IN. Also in the Journal of Theoretical and Experimental Artificial Intelligence, 5, </note> <year> 1993, </year> <pages> pages 21-37. </pages>
Reference-contexts: A case-based explanation requires the following mechanisms: * a retrieval mechanism that can retrieve similar cases; * an adaptation mechanism that must be quite creative; * a validation mechanism that can decide if a proposed explanation has any merit. An interesting application of case-based explanation is presented in <ref> (Louis, McGraw and Wyck-off, 1992) </ref>. Here, a case-based approach is used to explain solutions generated by a genetic algorithm. This task is quite difficult because the solutions cannot be easily explained. An explanation is later used to tune the genetic algorithm.
Reference: <author> McCarthy, J. </author> <year> (1958). </year> <title> Programs with common sense. </title> <booktitle> In Proc. of the Symposium on the Mechani-sation of Thought Precesses, </booktitle> <pages> pages 77-84, </pages> <institution> National Physical Laboratory. </institution>
Reference: <author> McDougal, T. F., Hammond, K. J., and Seifert, C. M. </author> <year> (1991). </year> <title> A functional perspective on remind ing. </title> <booktitle> In Proc. of the 13 th Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 510-515, </pages> <address> Chicago, IL. </address>
Reference: <author> Minton, S. N. </author> <year> (1988). </year> <title> Learning search control knowledge: An explanation-based approach. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Hingham, MA. </address>
Reference-contexts: On the other hand, if the case base is small, then the possible solutions are limited. However, based on the experience in machine learning <ref> (Minton, 1988) </ref>, and more recently in the case-based reasoning community (Ram and Santamaria, 1993; Anthony G.
Reference: <author> Mylopoulos, J., Borgida, A., Jarke, M., and Koubarakis, M. </author> <year> (1990). </year> <title> Telos: Representing knowledge about information systems. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(4) </volume> <pages> 325-362. </pages>
Reference-contexts: This is similar to the principle how task-oriented retrieval works in the system described in (Lauzon and Rose, 1993); however, this system is more flexible than FRANK system thanks to the knowledge representation language TELOS <ref> (Mylopoulos et al., 1990) </ref>. From the description of above mentioned retrieval algorithms follows that the associative retrieval is desirable if the flexibility is required. The hierarchical approach is advantageous if the retrieval task is well-defined.
Reference: <author> Navinchandra, D., Sycara, K. P., and Narasimhan, S. </author> <year> (1991). </year> <title> Behavioral synthesis in CADET, a case-based design tool. </title> <booktitle> In Proc. of the 7 th IEEE Computer Society Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 217-221, </pages> <address> Miami, CA. </address>
Reference: <author> O'Leary, D. E. </author> <year> (1993). </year> <title> Verification and validation of case-based systems. </title> <journal> Expert Systems with Applications, </journal> <volume> 6(1) </volume> <pages> 57-66. </pages>
Reference: <author> Owens, C. </author> <year> (1989). </year> <title> Plan transformations as abstract indices. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 62-65, </pages> <address> Pensacola Beach, FL. </address>
Reference: <author> Owens, C. </author> <year> (1993). </year> <title> Integrating feature extraction and memory search. </title> <journal> Machine Learning, </journal> <volume> 10(3) </volume> <pages> 311-339. </pages>
Reference: <author> Pankakoski, J., Eloranta, E., Luhtala, M., and Nikkola, J. </author> <year> (1991). </year> <title> Applying case-based reasoning to manufacturing systems design. </title> <journal> Computer Integrated Manufacturing Systems, </journal> <volume> 4(4) </volume> <pages> 212-220. </pages> <note> 36 Pearce, </note> <author> M., Goel, A. K., Kolodner, J., Zimring, C., Santosa, L., and Billington, R. </author> <year> (1992). </year> <title> Case--based design support A case study in architectural design. </title> <journal> IEEE Expert, </journal> 7(5):14-20. 
Reference-contexts: If no possible contract can be retrieved, the system generates a new contract from scratch. The emphasize is on meeting different constraints simultaneously. * XBE <ref> (Pankakoski et al., 1991) </ref> is applied to manufacturing systems design. <p> In the HYPO system (Ashley, 1988; Rissland and Ashley, 1987b), this information helps the reasoner to focus on important features, which, if they were present, would yield a better solution. In the case of XBE <ref> (Pankakoski et al., 1991) </ref> hypothetical cases are theories formalized to the situation-means-ends forms (basic structure of a case in XBE). Hypothetical cases are incomplete; thus, they cannot be used in matching to the same extent as actual cases.
Reference: <author> Porter, B. W. </author> <year> (1989). </year> <title> Similarity assessment: Computation vs. </title> <booktitle> representation. In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 82-84, </pages> <address> Pensacola Beach, FL. </address>
Reference-contexts: Neither classification nor the parallel implementation is used (Thagard et al., 1990; Hennessy and Hinkle, 1991; Gentner and Forbus, 1991). However, this approach is only usable for small case bases. 4.1 Classification Methods Different systems use different classification methods. There are several possibilities to categorize these methods. Porter <ref> (Porter, 1989) </ref> categorize the methods based on the source of knowledge for classification. He identifies two possibilities: an explicit representation using a fixed vocabulary 2 However, the current implementation is inadequate to handle case databases of more than 1,000 cases assuming 10-20 features per case. <p> The process of classification is crucial for the system's performance. If the system uses a predefined set of features for a classification, then its problem-solving abilities are constrained since the system becomes a single context system <ref> (Porter, 1989) </ref>. Several strategies for solving the problem of predefined indexing vocabularies were identified, namely: 1. All features are used for classification. This naive approach suggests an extension that probably not all features are equally useful. Thus, next approaches try to (somehow) select appropriate features for indexing. 2.
Reference: <author> Porter, B. W., Bareiss, E., </author> <title> and R.C.Holte (1989). Knowledge acquisition and heuristic classification in weak-theory domains. </title> <type> Technical Report AI89-96, </type> <institution> Artificial Intelligence Laboratory, University of Texas, Austin. </institution>
Reference-contexts: Neither classification nor the parallel implementation is used (Thagard et al., 1990; Hennessy and Hinkle, 1991; Gentner and Forbus, 1991). However, this approach is only usable for small case bases. 4.1 Classification Methods Different systems use different classification methods. There are several possibilities to categorize these methods. Porter <ref> (Porter, 1989) </ref> categorize the methods based on the source of knowledge for classification. He identifies two possibilities: an explicit representation using a fixed vocabulary 2 However, the current implementation is inadequate to handle case databases of more than 1,000 cases assuming 10-20 features per case. <p> The process of classification is crucial for the system's performance. If the system uses a predefined set of features for a classification, then its problem-solving abilities are constrained since the system becomes a single context system <ref> (Porter, 1989) </ref>. Several strategies for solving the problem of predefined indexing vocabularies were identified, namely: 1. All features are used for classification. This naive approach suggests an extension that probably not all features are equally useful. Thus, next approaches try to (somehow) select appropriate features for indexing. 2.
Reference: <author> Porter, B. W., Bareiss, E., </author> <title> and R.C.Holte (1990). Concept learning and heuristic classification in weak-theory domains. </title> <journal> Artificial Intelligence, </journal> <volume> 45 </volume> <pages> 229-263. </pages>
Reference: <author> Porter, B. W., Lester, J. C., Murray, K., Pittman, K. E., Souther, A., Acker, L., and Jones, T. </author> <year> (1988). </year> <title> AI research in the context of multifunctional knowledge base: The botany knowledge base project. </title> <type> Technical Report AI-TR-88-88, </type> <institution> Department of Computer Sciences, University of Texas, Austin, TX. </institution>
Reference: <author> Quinlan, J. R. </author> <year> (1986). </year> <title> Induction of decision trees. </title> <journal> Machine Learning, </journal> <volume> 1(1) </volume> <pages> 81-106. </pages>
Reference-contexts: with the method is that the feature weights are context dependent and thus they must be either predefined (and consequently fixed) or a special method must be used (e.g., inductive learning) to specify them in more dynamic way (not necessarily after each case acquisition). * The inductive approach (e.g., ID3 <ref> (Quinlan, 1986) </ref>, UNIMEM (Lebowitz, 1987), COBWEB (Fisher, 1987)) automatically extracts relevant features for retrieval or creates hierarchies of cases by comparing the classification and discrimination abilities (the ability to characterize and distinguish a particular case from the others) of individual features (Goodman, 1989; Simoudis, 1992).
Reference: <author> Ram, A. </author> <year> (1993a). </year> <title> AQUA: Questions that drive the explanation process. In Inside Computer Explanation. Lawrence Erlbaum. </title> <note> Also available as the Technical Report GIT-CC-93/47. </note>
Reference: <author> Ram, A. </author> <year> (1993b). </year> <title> Indexing, elaboration and refinement: Incremental learning of explanatory cases. </title> <journal> Machine Learning, </journal> <volume> 10(3) </volume> <pages> 201-248. </pages>
Reference: <author> Ram, A. and Santamaria, J. C. </author> <year> (1993). </year> <title> A multistrategy case-based and reinforcement learning approach to self-improving reactive control systems for autonomous robotic navigation. </title> <booktitle> In Proc. of the 2 nd International Workshop on Machine Learning, </booktitle> <address> Harpers Ferry, WV. </address>
Reference-contexts: resulted in case representation ranging from simple flat lists of features (Bareiss, 1988; Gonzalez and Laureano-Ortiz, 1992; Kitano, Shibata and Shimazu, 1993) through complex descriptions of episodic experience (Bradtke and Lehnert, 1988a; Hammond, 1989a; Bran-dau, Lemmon and Lafond, 1991; Hennessy and Hinkle, 1992; Branting, 1992), to vectors of analog values <ref> (Ram and Santamaria, 1993) </ref>. Some of these differences are captured next: * Bradtke and Lehnert's CBS system (Case-Based Search system) (Bradtke and Lehnert, 1988a) represents cases as complete problem solutions. A case is a list of problem states from a start state to a goal state. <p> 1991; Hanks and Weld, 1992; Feret and Glasgow, 1993), to the performance of other systems (Bradtke and Lehnert, 1988a; Bradtke and Lehnert, 1988b; Bareiss, 1989b; Hanks and Weld, 1992; Cardie, 1993c; Krovvidy and Wee, 1993; Skalak, 1993), or to evaluate the system's performance before and after learning in novel environments <ref> (Ram and Santa-maria, 1993) </ref>. It should be noted that even in many of these cases the evaluation is only limited. * Presented systems have only a small case base and thus the problem of scaling up is impossible to evaluate.
Reference: <author> Rissland, E. L. and Ashley, K. D. </author> <year> (1986). </year> <title> Hypotheticals as heuristic device. </title> <booktitle> In Proc. of AAAI-86, </booktitle> <pages> pages 289-297, </pages> <address> Philadelphia, PA. </address>
Reference: <author> Rissland, E. L. and Ashley, K. D. </author> <year> (1987a). </year> <title> A case-based system for trade secrets law. </title> <booktitle> In Proc. of the 1 st International Conference on Artificial Intelligence and Law. </booktitle>
Reference: <author> Rissland, E. L. and Ashley, K. D. </author> <year> (1987b). </year> <title> HYPO: A case-based reasoning system. </title> <booktitle> In Proc. of the 10 th IJCAI, </booktitle> <address> Milan, Italy. </address>
Reference: <author> Rissland, E. L., Daniels, J. J., Rubinstein, Z. B., and Skalak, D. B. </author> <year> (1993). </year> <title> Case-based diagnostic analysis in a blackboard architecture. </title> <booktitle> In Proc. of AAAI-93, </booktitle> <address> Washington, DC. </address>
Reference-contexts: A somewhat different approach is used in the FRANK system <ref> (Rissland et al., 1993) </ref>; if the initial query is unsuccessful, then the CBR-task mechanism alters the particular initial values and resubmits the query.
Reference: <author> Ross, B. H. </author> <year> (1989). </year> <title> Remindings in learning: Objects and tools. </title> <editor> In Vosniadou, S. and Ortony, A., editors, </editor> <booktitle> Similarity and Analogical Reasoning, </booktitle> <pages> pages 438-469, </pages> <address> New York, NY. </address> <publisher> Cambridge University Press. </publisher>
Reference: <author> Rubin, S. H. </author> <year> (1992). </year> <title> Case-based learning Anew paradigm for automated knowledge acquisition. </title> <journal> ISA Transactions, </journal> <volume> 31(2) </volume> <pages> 181-209. </pages>
Reference: <author> Schank, R. C. </author> <year> (1982). </year> <title> Dynamic Memory: A Theory of Learning in Computers and People. </title> <publisher> Cam-bridge University Press, </publisher> <address> New York, NY. </address>
Reference-contexts: The CYRUS (Kolodner, 1983) is the first computer implementation of many of the themes expressed in Schank's work <ref> (Schank, 1982) </ref>. It is a story understanding program which uses analogical problem solving if it cannot find direct answer to a query. Another example of analogical problem solving using a case-based approach is the SWALE system (Kass and Leake, 1988), a case-based creative explainer.
Reference: <author> Schank, R. C. </author> <year> (1986). </year> <title> Explanation Patterns: Understanding Mechanically and Creatively. </title> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, NJ. </address>
Reference: <author> Schank, R. C., Brand, M., Burke, R., Domeshek, E., Edelson, D. J., Ferguson, W., Freed, M., Jona, M., Krulwich, B., Ohmaye, E., Osgood, R., and Pryor, L. </author> <year> (1990). </year> <title> Towards a general content theory of indices. </title> <booktitle> In AAAI Spring Symposium on Case-Based Reasoning, </booktitle> <pages> pages 36-40. </pages> <note> 37 Scott, </note> <author> P. and Sage, K. </author> <year> (1992). </year> <title> Why generalize? Hybrid representations and instance-based learning. </title> <booktitle> In Proc. of the 10 th ECAI, </booktitle> <pages> pages 484-486, </pages> <address> Vienna, Austria. </address>
Reference-contexts: In <ref> (Schank et al., 1990) </ref>, an attempt is made to unify different approaches to the indexing problem. The authors present ideas about the 13 representational issues required for efficient retrieval. More theoretical work on this problem was presented in (Domeshek, 1992).
Reference: <author> Shinn, H. S. </author> <year> (1988). </year> <title> Abstractional analogy: A model of analogical reasoning. </title> <booktitle> In Proc. of the 1 st Workshop on Case-Based Reasoning, </booktitle> <pages> pages 370-387, </pages> <address> Clearwater Beach, FL. </address>
Reference: <author> Simmons, R. G. </author> <year> (1988). </year> <title> A theory of debugging. </title> <booktitle> In Proc. of the 1 st Workshop on Case-Based Reasoning, </booktitle> <pages> pages 388-401. </pages>
Reference: <author> Simon, H. </author> <year> (1983). </year> <title> Why should machines learn? In Michalski, </title> <editor> R., Carbonell, J., and Mitchell, T., editors, </editor> <booktitle> Machine learning. An artificial intelligence approach, </booktitle> <volume> volume 1, </volume> <pages> pages 25-38, </pages> <address> San Mateo, CA. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Even though learning is common for humans, it is difficult to build learning machines. Despite the differences between existing machine learning algorithms, they all allow for the changes in the system that are adaptive in the sense that the system's efficiency improves over time <ref> (Simon, 1983) </ref>. This requires that the knowledge is represented in structures that can be modified when new knowledge arrives (McCarthy, 1958; Buchanan and Wilkins, 1993). Thus, the knowledge organization often is the source of power of the learning method.
Reference: <author> Simoudis, E. </author> <year> (1992). </year> <title> Using case-based retrieval for customer technical support. </title> <journal> IEEE Expert, </journal> <volume> 7(5) </volume> <pages> 7-12. </pages>
Reference: <author> Simoudis, E. and Miller, J. </author> <year> (1990). </year> <title> Validated retrieval in case-based reasoning. </title> <booktitle> In Proc. of AAAI-90, </booktitle> <pages> pages 310-315, </pages> <address> Boston, MA. </address>
Reference-contexts: In addition, the reasoner must evaluate the solution (store the feedback information), in order to make sure that pure solutions are not repeated along with the good ones (this is also referred to as validated retrieval <ref> (Simoudis and Miller, 1990) </ref>). 2.2 Case-Based Reasoning Systems Case-based reasoning systems differ in decision making methods. Based on this classification, the following systems are usually recognized: 1. Interpretative systems compare new situation to recalled experience.
Reference: <author> Simpson, R. </author> <year> (1985). </year> <title> A computer model of case-based reasoning in problem solving: An investigation in the domain of dispute mediation. </title> <type> PhD thesis, </type> <institution> School of Information and Computer Science, Georgia Institute of Technology, </institution> <address> Atlanta, GA. </address> <note> Also published as a Technical Report GIT-ICS-85/18. </note>
Reference-contexts: When a case is retrieved via such a link, it is assumed to have greater similarity to the new case being processed because of its past involvement in a similar failure. The MEDIATOR system <ref> (Simpson, 1985) </ref> works similarly. All possible classification paths are used and generally multiple cases are retrieved. Retrieved cases are ranked based on similarity and heuristic is used to prune this set further. <p> Similar approach is also used as a basis in structure mapping analogical problem-solving (Gentner, 1983; Falkenhainer, Forbus and Gentner, 1989; Gentner and Forbus, 1991). * Derivational adaptation uses rules that generated the original solution to generate the new solution by their re-application (Carbonell, 1983a; Veloso and Carbonell, 1993). MEDIATOR <ref> (Simpson, 1985) </ref> uses this approach and takes advantage of storing not only a solution with a case, but the planning sequence that contributed to the solution. <p> Reinstantiation is a derivational adaptation method since it operates on the plan that was used to generate a particular solution. This imposes a limitation on reinstantiation, based on the problem solver's planning capabilities, because reinstantiation of a plan is planning. In MEDIATOR <ref> (Simpson, 1985) </ref> reinstantiation is used to generate resolutions between two disputants, which allows analogical reasoning. There are domains, where problems are difficult to solve in one chunk while they are also difficult to decompose and solve separately because of the strong interaction between pieces.
Reference: <author> Skalak, D. B. </author> <year> (1993). </year> <title> Using genetic algorithm to learn prototypes for case retreival and classification. </title> <booktitle> In Proc. of the AAAI-93 Workshop on Case-Based Reasoning, </booktitle> <address> Washington, DC. </address>
Reference: <author> Smyth, B. and Cunningham, P. </author> <year> (1992). </year> <title> Deja Vu: A hierarchical case-based reasoning system for software design. </title> <booktitle> In Proc. of the 10 th ECAI, </booktitle> <pages> pages 587-589, </pages> <address> Vienna, Austria. </address>
Reference-contexts: The cases are used both for proposing and critiquing. A case consists of design goals, design plans, outcomes, and lessons to be learned. * DejaVu <ref> (Smyth and Cunningham, 1992) </ref> is a hierarchical CBR system for the development of plant control software for controlling autonomous vehicles in loading and unloading metal coils in a steel milling process. 2.3.2 Case-Based Planning Planning is the process of coming up with a sequence of steps or a schedule for achieving
Reference: <author> Stanfill, C. and Waltz, D. L. </author> <year> (1986). </year> <title> Toward memory-based reasoning. </title> <journal> Communications of the ACM, </journal> <volume> 29(12) </volume> <pages> 1213-1228. </pages>
Reference-contexts: Considering different methods used in case-based reasoning systems, one can classify existing CBRSs into the following categories: * Statistically oriented conditional probabilities that the problem should be solved as the previous case are computed <ref> (Stanfill and Waltz, 1986) </ref>. * Model based explain the cases in terms of a theoretical model.
Reference: <author> Sutton, R., </author> <title> editor (1992). </title> <journal> Machine Learning, volume 8. </journal> <note> A special issue on reinforcement learning. </note>
Reference: <author> Suzuki, H., Ohnishi, H., and Shigemasu, K. </author> <year> (1992). </year> <title> Goal-directed processes in similarity judge ment. </title> <booktitle> In Proc. of the 14 th Annual Conference of the Cognitive Science Society, </booktitle> <pages> pages 343-348, </pages> <address> Bloomington, </address> <note> IN. </note>
Reference: <author> Sycara, K. P. </author> <year> (1987). </year> <title> Resolving adversarial conflicts: An approach to integrating case-based and analytic methods. </title> <type> PhD thesis, </type> <institution> School of Information and Computer Science, Georgia Institute of Technology, </institution> <address> Atlanta, GA. </address> <note> Also published as a Technical Report No. GIT-ICS-87/26. </note>
Reference-contexts: One case provides an overall layout, which is adapted appropriately, the others are used to fill in holes in the layout. This system is distinct from others because it is used on a daily basis in Lockheed Inc. since September 1990. * PERSUADER <ref> (Sycara, 1987) </ref> solves labor management disputes by adapting similar contracts. If no possible contract can be retrieved, the system generates a new contract from scratch. The emphasize is on meeting different constraints simultaneously. * XBE (Pankakoski et al., 1991) is applied to manufacturing systems design. <p> Parametrized solutions, a structural adaptation, is probably best understood. It is based on the comparison of the retrieved and input problem descriptions along the specified parameters. Parametrized adaptation is used in HYPO (Ashley, 1990), PERSUADER <ref> (Sycara, 1987) </ref>, and PLEXUS (Alterman, 1986). 3. Abstraction and respecialization is a general structural adaptation technique that abstracts the piece of the retrieved solution, and respecializes it later. Respecialization results in applying other specializations of the abstractions to the current situation. Thus, it results in analogical problem solving. <p> Thus, it results in analogical problem solving. This technique is used in PLEXUS (Alterman, 1986) as a second step in adaptation process (first, a null adaptation is used, and only if something fails, the system replans it using abstraction and respecialization). A similar approach is used in PERSUADER <ref> (Sycara, 1987) </ref>. 4. Critic-based adaptation is a structural adaptation based on using critics to debug almost correct solutions (Simmons, 1988; Hammond, 1989a; Gonzalez and Laureano-Ortiz, 1992). A critic checks if a particular combination of features can cause a problem in a plan. <p> If such a feature is found, a specific repair strategy is applied for repair. In CHEF, several critic-based adaptation rules are used, e.g., deletion of unnecessary steps in a meal plan, insertion of missing steps to the plan, and separation of interfering steps. Similarly, in PERSUADER <ref> (Sycara, 1987) </ref> a critic checks if the goals of the various actors would be satisfied by the particular solution, e.g., if there is no interference among different goals. 23 5. Reinstantiation is a derivational adaptation method since it operates on the plan that was used to generate a particular solution. <p> Hypothetical cases are incomplete; thus, they cannot be used in matching to the same extent as actual cases. However, they are used to introduce new design choices to case-based system and to integrate case-based and rule-based reasoning. In the case of PERSUADER <ref> (Sycara, 1987) </ref> and CBA (Gonzalez and Laureano-Ortiz, 1992) the adaptation is performed using adaptation critics, which uses similarity metrics. This allows for meaningful adaptation but it is a domain-dependent approach.
Reference: <author> Tanaka, T., Hattori, M., and Sueda, N. </author> <year> (1992). </year> <title> Use of multiple cases in case-based design. </title> <booktitle> In Proc. of the 8 th IEEE Computer Society Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 233-239, </pages> <address> Monterey, CA. </address>
Reference: <author> Thagard, P. R. and Holyoak, K. J. </author> <year> (1989). </year> <title> Why indexing is the wrong way to think about analog retrieval. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 36-40, </pages> <address> Pensacola Beach, FL. </address>
Reference: <author> Thagard, P. R., Holyoak, K. J., Nelson, G., and Gotchfeld, D. </author> <year> (1990). </year> <title> Analog retrieval by constraint satisfaction. </title> <journal> Artificial Intelligence, </journal> <volume> 46 </volume> <pages> 259-310. </pages>
Reference-contexts: Explanations are represented as cases and CBR is recursively invoked to map facts to legal relationships. Similarity assessment is simplified in the similar way as in PROTOS single context similarity. The most referenced systems that use both types of features for retrieval are <ref> (Thagard et al., 1990, ARCS) </ref> and (Gentner and Forbus, 1991, MAC/FAC). Both systems use two stage retrieval. The second stage is used for filtering out retrieved cases based on both surface and abstract features. <p> Later, the resulting set is processed using structural criteria and the best match set is identified. In the ARCS system (Analog Retrieval by Constraint Satisfaction) <ref> (Thagard et al., 1990) </ref>, analogs are retrieved using multiple constraints (the system retrieves superficially and analogically similar analogs). In the MAC/FAC system (Gentner and Forbus, 1991), a two stage retrieval is used as in ARCS. First, analogs are retrieved based on superficial similarities.
Reference: <author> Thompson, K. and Langley, P. </author> <year> (1989). </year> <title> Organization and retrieval of composite concepts. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 329-333, </pages> <address> Pensacola Beach, FL. </address>
Reference: <author> Turner, R. M. </author> <year> (1989). </year> <title> A schema-based model of adaptive problem solving. </title> <type> PhD thesis, </type> <institution> School of Information and Computer Science, Georgia Institute of Technology, </institution> <address> Atlanta, GA. </address> <note> Also published as Technical Report GIT-ICS-89/42. 38 Tversky, </note> <author> A. </author> <year> (1977). </year> <title> Features of similarity. </title> <journal> Psychological Review, </journal> <volume> 84(4) </volume> <pages> 327-352. </pages>
Reference-contexts: is able to do execution-time repairs by adapting and substituting semantically similar steps for those that have failed. * TRUCKER (Hammond, 1989b; Hammond et al., 1993) keeps track of pending goals and takes advantage of opportunities that arise and allow it to achieve these goals earlier than expected. * MEDIC <ref> (Turner, 1989) </ref> is a diagnosis program, which is able to reuse previous plans for diagnosis; it is flexible enough in its reuse to be able to follow up on unexpected turns of events. <p> On the other hand, if the space of possible explanations is significant, one can view diagnosis as the problem of creating an explanation. Similarly to the comparison of design and planning case-based systems, case-based diagnosis system can rely on planning and thus can be classified as a planning system <ref> (Turner, 1989) </ref>. However, there are also diagnosis systems which are model-based (Koton, 1988b; Goel, 1989; Goel and Chandrasekaran, 1989; Birnbaum et al., 1990; Feret and Glasgow, 1993). In these cases, categorization is easier since the distinctive features are easily perceivable.
Reference: <author> Veloso, M. M. and Carbonell, J. G. </author> <year> (1989). </year> <title> Learning analogies by analogy The closed loop of memory organizationand problem solving. </title> <booktitle> In Proc. of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 153-158, </pages> <address> Pensacola Beach, FL. </address>
Reference: <author> Veloso, M. M. and Carbonell, J. G. </author> <year> (1993). </year> <title> Derivational analogy in PRODIGY: Automating case acquisition, storage,and utilization. </title> <journal> Machine Learning, </journal> <volume> 10(3) </volume> <pages> 249-278. </pages>
Reference: <author> Vosniadou, S. and Ortony, A. </author> <year> (1989). </year> <title> Similarity and Analogical Reasoning. </title> <publisher> Cambridge University Press, </publisher> <address> New York, NY. </address>
Reference: <author> Waltz, D. </author> <year> (1989). </year> <title> Is indexing used for retrieval? In Proc. </title> <booktitle> of the 2 nd Workshop on Case-Based Reasoning, </booktitle> <pages> pages 41-44, </pages> <address> Pensacola Beach, FL. </address>
Reference: <author> Watanabe, S. </author> <year> (1985). </year> <title> Pattern Recognition. Human and Mechanical. </title> <publisher> John Wiley, </publisher> <address> New York. </address>
Reference-contexts: A straightforward approach is to compare the proportion between the number of attributes which share the value by two objects to the number of all attributes defined for those objects (Tversky, 1977). It was shown <ref> (Watanabe, 1985) </ref> that if we take this approach and we use all available primary (observed) and derived attributes, then any object is equally similar to any other ("Ugly Duckling Effect"). In database community, namely in spatial databases, the problem of similarity has also been studied (Jagadish, 1991).
Reference: <author> Yang, S.-A., Robertson, D., and Lee, J. </author> <year> (1993). </year> <title> KICS: A knowledge-intensive case-based reasoning system for building regulations and case histories. </title> <booktitle> In Proc. of the 4 rd International Conference on Artificial Intelligence and Law, </booktitle> <address> Amsterdam, The Netherlands. </address>
Reference: <author> Zito-Wolf, R. </author> <year> (1993). </year> <title> Case-based organization using multicases. </title> <booktitle> In Proc. of the AAAI-93 Workshop on Case-Based Reasoning, </booktitle> <address> Washington, DC. </address> <month> 39 </month>
References-found: 155

