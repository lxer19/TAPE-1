URL: ftp://theory.cs.uni-bonn.de/pub/reports/cs-reports/1996/85156-cs.ps.gz
Refering-URL: http://cs.uni-bonn.de/info5/publications/CS-1996-en.html
Root-URL: http://cs.uni-bonn.de
Email: Email:berman@cse.psu.edu  Email:marek@cs.uni-bonn.de  Email:larmore@cs.unlv.edu  Email:wojtekpl@mimuw.edu.pl and rytter@mimuw.edu.pl.  
Title: The Complexity of Two-Dimensional Compressed Pattern-Matching matching for two dimensional compressed images is NP-complete. Fully
Author: Piotr Berman Marek Karpinski Lawrence L. Larmore Wojciech Plandowski Wojciech Rytter 
Address: Park, PA16802, USA  Bonn, D-53117, Bonn, Germany.  Nevada, Las Vegas, NV 89154-4019.  Bonn, Germany.  
Affiliation: Dept. of Computer Science Eng., Pensylvania State University, University  Dept. of Computer Science, University of  Department of Computer Science, University of  Institut Informatik V, Universitat  
Note: Compressed  This research was partially supported by the DFG Grant KA 673/4-1  Research partially supported by National Science Foundation grant CCR-9503441. Part of this work was done while the author was visiting  Instytut Informatyki, Uniwersytet Warszawski, Banacha 2, 02-097 Warszawa, Poland. Supported by the grant KBN 8T11C01208.  
Abstract: We consider the complexity of problems for highly compressed 2-dimensional texts: compressed pattern-matching (when the pattern is not compressed and the text is compressed) and fully compressed pattern-matching (when also the pattern is compressed). First we consider 2-dimensional compression in terms of straight-line programs, see [9]. It is a natural way for representing very highly compressed images, by describing larger parts in terms of smaller (earlier described) ones. For 1-dimensional strings there exist polynomial-time deterministic algorithms for similar types of compression [2, 6, 8, 9]. We show that the complexity dramatically increases in a 2-dimensional setting: On the other hand we show efficient algorithms for some related problems: We also show the surprising fact that the compressed size of a subrectangle of a compressed two dimensional array can grow exponentially, unlike the one dimensional case. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman, </author> <title> The design and analysis of computer algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1974. </year>
Reference-contexts: Define an kfi2 n image A as follows: A i;m = C i ( e m). Then the 3SAT question is equivalent to the following: does A contain a column consisting of k 1's (i.e. the pattern <ref> [1] </ref> 1 m )? We will reduce 3SAT to the compressed matching problem by showing how to compress A to a SLP with O (kn) statements. <p> We define the pattern and the test as follows: P 1 [0] 1 S 0 [0] 2 n S 1 V <ref> [1] </ref> 2 m S 2 [0] 2 n T R 1 R 2 R 2 The subimages S i 's are stripes of the text T . Observe first that T contains P if and only if there exists a column of T , say c, that contains P . <p> For each variable, edge and corner queries are stored in a list. The data structure for storing strip queries is more sophisticated. For each variable it is a 2-3-tree <ref> [1] </ref> in which keys are positions of strip rectangles in the variable. Recall that 2-3 trees provide operations split and join in O (log s) time where s is the number of elements in the tree.
Reference: [2] <author> A. Amir, G. Benson and M. Farach, </author> <title> Let sleeping files lie: pattern-matching in Z-compressed files, </title> <booktitle> in SODA'94. </booktitle> <pages> 11 </pages>
Reference: [3] <author> A. Amir, G. Benson, </author> <title> Efficient two dimensional compressed matching, </title> <booktitle> Proc. of the 2nd IEEE Data Compression Conference 279-288 (1992). </booktitle>
Reference: [4] <author> A. Amir, G. Benson and M. Farach, </author> <title> Optimal two-dimensional compressed matching, </title> <booktitle> in ICALP'94 pp.215-225. </booktitle>
Reference: [5] <author> M. Crochemore and W. Rytter, </author> <title> Text Algorithms, </title> <publisher> Oxford University Press, </publisher> <address> New York (1994). </address>
Reference: [6] <author> M. Farach and M. </author> <title> Thorup, String matching in Lempel-Ziv compressed strings, </title> <booktitle> in STOC'95, </booktitle> <pages> pp. 703-712. </pages>
Reference-contexts: By Lemma 2.1 there is an algorithm which solves the compressed pattern checking problem in O (njP j) time. We improve that by replacing n by log N log m. This is similar to the approach of <ref> [6] </ref>. If the text image is not very highly compressed then log (N ) is close to log (n). The idea behind the algorithm is to consider point tests in groups, each group called a query. Denote by V a text which is generated by a variable V . <p> Implementation of the Split operation, if it is not a division, requires merging 2-3 trees and this may result in a large number of splits of 2-3 trees. Fortunatelly, it is possible to prove, using arguments similar to those of <ref> [6] </ref>, to prove the following lemma. Lemma 6.3 The number of splits of 2-3 trees in algorithm CHECKING is O (m log N ). Theorem 6.4 The algorithm CHECKING works in O (jP j + n + (m log N )(log m)) time.
Reference: [7] <author> M.R. Garey and D.S. Johnson, </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman (1979). </publisher>
Reference: [8] <author> L. Gasieniec, M. Karpinski, W. Plandowski and W. Rytter, </author> <title> Efficient Algorithms for Compressed Strings. </title> <booktitle> in proceedings of the SWAT'96 (1996). </booktitle>
Reference: [9] <author> M. Karpinski, W. Rytter and A. Shinohara, </author> <title> Pattern-matching for strings with short description, in Combinatorial Pattern Matching, </title> <year> 1995. </year>
Reference: [10] <author> D. Knuth, </author> <title> The Art of Computing, Vol. II: Seminumerical Algorithms. Second edition. </title> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference: [11] <author> A. Lempel and J. Ziv, </author> <title> On the complexity of finite sequences, </title> <journal> IEEE Trans. on Inf. Theory 22, </journal> <month> 75-81 </month> <year> (1976). </year>
Reference: [12] <author> A. Lempel and J. Ziv, </author> <title> Compression of two-dimensional images sequences, Combinatorial algorithms on words (ed. </title> <editor> A. Apostolico, </editor> <publisher> Z.Galil) Springer Verlag (1985) 141-156. </publisher>
Reference: [13] <author> R. Motwani, P. Raghavan, </author> <title> Randomized algorithms, </title> <publisher> Cambridge University Press 1995. </publisher>
Reference-contexts: The following basic theorem is a version of theorems given by Schwartz and (independently) by Zippel <ref> [13] </ref>. Theorem 5.1 (nonzero-test theorem) Let P be a nonzero polynomial of degree at most d. Assume that we assign to each variable in P a random value from a set of integers of cardinality R. Then P robfP (x) 6= 0 g 1 d R .
Reference: [14] <author> W. Plandowski, </author> <title> Testing equivalence of morphisms on context-free languages, </title> <booktitle> ESA'94, Lecture Notes in Computer Science 855, </booktitle> <publisher> Springer-Verlag, </publisher> <month> 460-470 </month> <year> (1994). </year>
Reference: [15] <author> J. Storer, </author> <title> Data compression: methods and theory, </title> <publisher> Computer Science Press, </publisher> <address> Rockville, Maryland, </address> <year> 1988. </year>
Reference: [Zi] <author> R.E. Zippel, </author> <title> Probabilistic algorithms for sparse polynomials, </title> <booktitle> in EUROSAM 79, Lecture Notes in Comp. Science 72, </booktitle> <month> 216-226 </month> <year> (1979) </year>
Reference: [16] <author> J. Ziv and A. Lempel, </author> <title> A universal algorithm for sequential data compression, </title> <journal> IEEE Trans. on Inf. Theory vo. </journal> <volume> IT-23(3), </volume> <pages> 337-343, </pages> <year> 1977. </year> <month> 12 </month>
References-found: 17

