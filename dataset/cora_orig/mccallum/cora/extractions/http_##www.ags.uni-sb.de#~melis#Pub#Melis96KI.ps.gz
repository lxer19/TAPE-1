URL: http://www.ags.uni-sb.de/~melis/Pub/Melis96KI.ps.gz
Refering-URL: http://jswww.cs.uni-sb.de/~melis/
Root-URL: 
Email: email:melis@cs.uni-sb.de  
Title: When to Prove Theorems by Analogy?  
Author: Erica Melis 
Address: D-66041 Saarbrucken, Germany  
Affiliation: Universitat des Saarlandes, FB Informatik  
Abstract: In recent years several computational systems and techniques for theorem proving by analogy have been developed. The obvious practical question, however, as to whether and when to use analogy has been neglected badly in these developments. This paper addresses this question, identifies situations where analogy is useful, and discusses the merits of theorem proving by analogy in these situations. The results can be generalized to other domains.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R.S. Boyer and J.S. Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> San Diego, </address> <year> 1988. </year>
Reference-contexts: We rather present examples of what these analogy facilities achieve. 2 Personal communication with Christoph Walther who is an author of one of the approaches 2 Analogy in Interactive Theorem Provers: Omega Current interactive theorem provers, e.g. Nqthm <ref> [1] </ref>, require laborious user interactions. For instance, Shankar's proof of Godel's theorem had 1741 lemmata that were formulated interactively for Nqthm.
Reference: 2. <author> A. Bundy, Stevens A, F. Van Harmelen, A. Ireland, and A. Smaill. </author> <title> A heuristic for guiding inductive proofs. </title> <journal> Artificial Intelligence, </journal> <volume> 63 </volume> <pages> 185-253, </pages> <year> 1993. </year>
Reference-contexts: In CL A M strong domain-specific search heuristics, such as rippling <ref> [6, 2] </ref>, restrict the search for methods. Rippling systematically uses rewrites to remove differences between the induction hypothesis and the induction conclusion in a very goal-directed way so the former can be used in the proof.
Reference: 3. <author> A. Bundy, F. van Harmelen, J. Hesketh, and A. Smaill. </author> <title> Experiments with proof plans for induction. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 7 </volume> <pages> 303-324, </pages> <year> 1991. </year>
Reference-contexts: CL A M , described in <ref> [3] </ref>, has successfully been applied to inductive theorem proving. 4 As opposed to interactive systems, CL A M is an automated proof planner. It constructs proof plans that consist of methods. <p> Because of the strong domain-specific control heuristics and because of the common plan patterns of inductive proofs 5 , CL A M is a proof planner that, opposed to most planners, typically performs little search for methods. For a comprehensive introduction to CL A M see <ref> [3] </ref>. Given this behavior, usually CL A M succeeds quickly if it masters a theorem at all. 8k (P (k) ! P (k +1)) is proved in a step case. P (k) is called the induction hypothesis and P (k + 1) the induction conclusion.
Reference: 4. <author> J.G. Carbonell. </author> <title> Derivational analogy: A theory of reconstructive problem solving and expertise acquisition. In R.S. </title> <editor> Michalsky, J.G. Carbonell, and T.M. Mitchell, editors, </editor> <booktitle> Machine Learning: An Artificial Intelligence Approach, </booktitle> <pages> pages 371-392. </pages> <publisher> Morgan Kaufmann Publ., </publisher> <address> Los Altos, </address> <year> 1986. </year>
Reference-contexts: Example 7 : The source theorem div3: :y = 0 ! div (plus (y; x); y) = s (div (x; y)) has the proof plan NORMAL (...) then EVAL_DEF (div) then ELEMENTARY (...) 6 Derivational analogy <ref> [4] </ref> guides the target solution by replaying decisions of the source problem solving process, and it uses information about reasons for the de cisions (justifications) 7 In the remainder of the paper s denotes the successor function, div division, rev denotes the reversion of lists, length the length of lists, and
Reference: 5. <author> X. Huang, M. Kerber, M. Kohlhase, E. Melis, D. Nesmith, J. Richts, and J. Siekmann. Omega-MKRP: </author> <title> A Proof Development Environment. </title> <booktitle> In Proc. 12th International Conference on Automated Deduction (CADE), </booktitle> <address> Nancy, </address> <year> 1994. </year>
Reference-contexts: This applies in particular in long and complex proofs because they require many user interactions. Take, for instance, the interactive Omega system <ref> [5] </ref>, where automated theorem provers and tactics/methods can be invoked and Natural Deduction-rules can be applied. The analogy extension of its proof planner, as described in [13], works as a control strategy for the proof planner.
Reference: 6. <author> D. Hutter. </author> <title> Guiding inductive proofs. In M.E. </title> <editor> Stickel, editor, </editor> <booktitle> Proc. of 10th International Conference on Automated Deduction (CADE), volume Lecture Notes in Artificial Intelligence 449. </booktitle> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: In CL A M strong domain-specific search heuristics, such as rippling <ref> [6, 2] </ref>, restrict the search for methods. Rippling systematically uses rewrites to remove differences between the induction hypothesis and the induction conclusion in a very goal-directed way so the former can be used in the proof.
Reference: 7. <author> A. Ireland and A. Bundy. </author> <title> Productive use of failure in inductive proof. </title> <type> Technical report, </type> <institution> Department of AI Edinburgh, </institution> <year> 1994. </year> <note> Available from Edinburgh as DAI Research Paper 716. </note>
Reference-contexts: CL A M 3 is a version of CL A M that is extended by critics which are very search-intensive procedures that help to continue the proof planning when CL A M itself gets stuck. Critics <ref> [7] </ref> are an extension of proof planning that patch failed proof attempts. For instance, it can happen that induction selects an inappropriate induction scheme. Then planning using an incorrect scheme becomes blocked.
Reference: 8. <author> R.E. Kling. </author> <title> A paradigm for reasoning by analogy. </title> <journal> Artificial Intelligence, </journal> <volume> 2:147--178, </volume> <year> 1971. </year>
Reference-contexts: Several attempts to implement theorem proving Fig. 1. Analogy in theorem proving ? The work was supported by the HC&M grant CHBICT930806 and by a grant in the SFB378 by analogy, e.g. <ref> [8, 18, 20, 9, 13] </ref>, have been published. Most papers about analogy in theorem proving did refer to the well known use of analogy by mathematicians (e.g., [19]), but did not consider the actual tradeoff of automated theorem proving by analogy.
Reference: 9. <author> Th. Kolbe and Ch. Walther. </author> <title> Reusing proofs. </title> <booktitle> In Proceedings of ECAI-94, </booktitle> <address> Amster-dam, </address> <year> 1994. </year>
Reference-contexts: Several attempts to implement theorem proving Fig. 1. Analogy in theorem proving ? The work was supported by the HC&M grant CHBICT930806 and by a grant in the SFB378 by analogy, e.g. <ref> [8, 18, 20, 9, 13] </ref>, have been published. Most papers about analogy in theorem proving did refer to the well known use of analogy by mathematicians (e.g., [19]), but did not consider the actual tradeoff of automated theorem proving by analogy.
Reference: 10. <author> J Laird, A. Newell, and P. Rosenbloom. </author> <title> SOAR:an architecture for general intelligence. </title> <journal> Artificial Intelligence, </journal> <volume> 33(1) </volume> <pages> 1-64, </pages> <year> 1987. </year>
Reference-contexts: This also compares to empirical results of VanLehn and Jones for good physics learners who use analogy to fill knowledge gaps. Apart from analogy, other learning techniques such as EBL [16] and chunking <ref> [10] </ref> can provide control knowledge. We do not discuss them here. 6 Acknowledgment I would like to thank Alan Bundy who influenced my struggle with CL A M considerably by asking `what does analogy buy?'. Thanks to Jorg Siekmann and Wolf Schaarschmidt for reading drafts of this paper.
Reference: 11. <author> W.W. McCune. </author> <title> Otter 2.0 users guide. </title> <type> Technical Report ANL-90/9, </type> <institution> Argonne National Laboratory, Maths and CS Division, Argonne, Illinois, </institution> <year> 1990. </year>
Reference-contexts: In this example, the analogy procedure reduced the user interactions that provided subgoals to be proved by Natural Deduction inferences, by the automated theorem prover OTTER <ref> [11] </ref>, or by a subplan from 32 to 1. Most of the HB1 proof plan was transferable by analogy as apparent from Figures 2 and 3. All reformulated source methods but method-2', reformulated from method-2, are transferred. Only the submethod method-21' of the reformulated method-2' was transferable to the target.
Reference: 12. <author> E. Melis. </author> <title> Analogy in CLAM. </title> <type> Technical Report DAI Research Paper No 766, </type> <institution> University of Edinburgh, AI Dept, Dept. of Artificial Intelligence, Edinburgh, </institution> <year> 1995. </year> <note> available from http://jswww.cs.uni-sb.de/ melis/. </note>
Reference-contexts: It is not a cognitive study, although the results resemble some findings of VanLehn and Jones as mentioned in the conclusion. In this paper it is impossible to explain all details of these analogy facilities ANALOG, ABALONE, and internal analogy which are published in <ref> [13, 12, 15] </ref>, respectively. We rather present examples of what these analogy facilities achieve. 2 Personal communication with Christoph Walther who is an author of one of the approaches 2 Analogy in Interactive Theorem Provers: Omega Current interactive theorem provers, e.g. Nqthm [1], require laborious user interactions. <p> Therefore, the derivational analogy 6 facility, ABALONE, is invoked only if CL A M does not succeed in a decent time limit (with the commonly loaded methods). Then the target planning process is guided by analogy to a source plan <ref> [12] </ref>. ABALONE's input is a source theorem, source rewrites, a source proof plan, a target theorem, and target rewrites. First, it incrementally produces second-mappings of the source and the target theorem and of the source and target rewrites as far as possible. <p> If a legal justification is violated in the target, no replay of the method takes place. The replay transfers a method if the failed justification is marked as "heuristic" rather than "legal". For a detailed description see <ref> [12] </ref> which is available via www. In case no given target rewrite matches some source rewrite S, the analogical mapping can suggest a target rewrite by applying the mappings to S.
Reference: 13. <author> E. Melis. </author> <title> A model of analogy-driven proof-plan construction. </title> <booktitle> In Proceedings of the 14th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 182-189, </pages> <address> Montreal, </address> <year> 1995. </year>
Reference-contexts: Several attempts to implement theorem proving Fig. 1. Analogy in theorem proving ? The work was supported by the HC&M grant CHBICT930806 and by a grant in the SFB378 by analogy, e.g. <ref> [8, 18, 20, 9, 13] </ref>, have been published. Most papers about analogy in theorem proving did refer to the well known use of analogy by mathematicians (e.g., [19]), but did not consider the actual tradeoff of automated theorem proving by analogy. <p> It is not a cognitive study, although the results resemble some findings of VanLehn and Jones as mentioned in the conclusion. In this paper it is impossible to explain all details of these analogy facilities ANALOG, ABALONE, and internal analogy which are published in <ref> [13, 12, 15] </ref>, respectively. We rather present examples of what these analogy facilities achieve. 2 Personal communication with Christoph Walther who is an author of one of the approaches 2 Analogy in Interactive Theorem Provers: Omega Current interactive theorem provers, e.g. Nqthm [1], require laborious user interactions. <p> This applies in particular in long and complex proofs because they require many user interactions. Take, for instance, the interactive Omega system [5], where automated theorem provers and tactics/methods can be invoked and Natural Deduction-rules can be applied. The analogy extension of its proof planner, as described in <ref> [13] </ref>, works as a control strategy for the proof planner. The proof planner (interactively) produces a source plan that consists of methods, often supplied by the user. Roughly, the analogy procedure works as follows: it higher-order matches the (parametrized) source and the target theorem and lemmata. The match triggers reformulations.
Reference: 14. <author> E. Melis. </author> <title> Theorem proving by analogy a compelling example. </title> <editor> In C.Pinto-Ferreira and N.J. Mamede, editors, </editor> <booktitle> Progress in Artificial Intelligence, 7th Portuguese Conference on Artificial Intelligence, EPIA'95, Lecture Notes in Artificial Intelligence, </booktitle> <volume> 990, </volume> <pages> pages 261-272, </pages> <address> Madeira, 1995. </address> <publisher> Springer. </publisher>
Reference-contexts: If a target lemma is missing, lemma suggestion can yield certain reasons. Thereby it avoids the user interactions needed in order to provide the methods the target proof plan is constructed from, and to choose the right method. In <ref> [14] </ref> we demonstrated how a user-supplied source proof plan for a Heine-Borel theorem HB1 can be transferred to a proof plan for another Heine-Borel theorem HB2, thus solving an open problem suggested by Bledsoe. Theorem 1 Heine-Borel-1 (HB1).
Reference: 15. <author> E. Melis and J. Whittle. </author> <title> Internal analogy in inductive theorem proving. </title> <booktitle> In Proceedings of the 13th Conference on Automated Deduction (CADE-96), </booktitle> <publisher> LNAI, </publisher> <address> Berlin, New York, </address> <year> 1996. </year> <note> Springer. also published as DAI Research Paper 803. </note>
Reference-contexts: It is not a cognitive study, although the results resemble some findings of VanLehn and Jones as mentioned in the conclusion. In this paper it is impossible to explain all details of these analogy facilities ANALOG, ABALONE, and internal analogy which are published in <ref> [13, 12, 15] </ref>, respectively. We rather present examples of what these analogy facilities achieve. 2 Personal communication with Christoph Walther who is an author of one of the approaches 2 Analogy in Interactive Theorem Provers: Omega Current interactive theorem provers, e.g. Nqthm [1], require laborious user interactions.
Reference: 16. <author> T.M. Mitchell, R.M. Keller, and S.T. Kedar-Cabelli. </author> <title> Explanation-based generalization: A unifying view. </title> <journal> Machine Learning, </journal> <volume> 1 </volume> <pages> 47-80, </pages> <year> 1986. </year>
Reference-contexts: This also compares to empirical results of VanLehn and Jones for good physics learners who use analogy to fill knowledge gaps. Apart from analogy, other learning techniques such as EBL <ref> [16] </ref> and chunking [10] can provide control knowledge. We do not discuss them here. 6 Acknowledgment I would like to thank Alan Bundy who influenced my struggle with CL A M considerably by asking `what does analogy buy?'. Thanks to Jorg Siekmann and Wolf Schaarschmidt for reading drafts of this paper.
Reference: 17. <author> B. Nebel and J. Koehler. </author> <title> Plan reuse versus plan generation. a theoretical and empirical analysis. </title> <journal> Artificial Intelligence, 1995. Special Issue on Planning and Scheduling. </journal>
Reference-contexts: Presumably, these results naturally transfer to theorem proving by analogy although no empirical tests have been conducted so far. For practical purposes, a worst case complexity analysis as in <ref> [17] </ref> will not do the job.
Reference: 18. <author> S. Owen. </author> <title> Analogy for Automated Reasoning. </title> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: Several attempts to implement theorem proving Fig. 1. Analogy in theorem proving ? The work was supported by the HC&M grant CHBICT930806 and by a grant in the SFB378 by analogy, e.g. <ref> [8, 18, 20, 9, 13] </ref>, have been published. Most papers about analogy in theorem proving did refer to the well known use of analogy by mathematicians (e.g., [19]), but did not consider the actual tradeoff of automated theorem proving by analogy.
Reference: 19. <author> G. Polya. </author> <title> How to Solve it. 2nd ed. </title> <publisher> Doubleday, </publisher> <address> New York, </address> <year> 1957. </year>
Reference-contexts: Most papers about analogy in theorem proving did refer to the well known use of analogy by mathematicians (e.g., <ref> [19] </ref>), but did not consider the actual tradeoff of automated theorem proving by analogy. On the contrary, for some approaches the storing, retrieval, and analogical replay take more time than regular theorem proving 2 .
Reference: 20. <author> W. Reif and K. Stenzel. </author> <title> Reuse of proofs in software verification. </title> <editor> In R.K. Shyama-sundar, editor, </editor> <booktitle> Proc. 13th Conference on Foundations of Software Technology and Theoretical Computer Science, volume 761 of LNCS. </booktitle> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: Several attempts to implement theorem proving Fig. 1. Analogy in theorem proving ? The work was supported by the HC&M grant CHBICT930806 and by a grant in the SFB378 by analogy, e.g. <ref> [8, 18, 20, 9, 13] </ref>, have been published. Most papers about analogy in theorem proving did refer to the well known use of analogy by mathematicians (e.g., [19]), but did not consider the actual tradeoff of automated theorem proving by analogy. <p> With respect to the resource "human interaction", the bias is always in favor of analogy, in particular for long or complex solutions. This is independent of the complexity of the analogy procedure. Even if the retrieval is done interactively, user interaction is saved. Similarly, Reif and Stenzel <ref> [20] </ref> report substantial savings in software verification when a reuse facility is integrated into their system. This is because user interaction accounts for the lions share of formal software verification. (b) In assistance systems, analogy can be a feature of human-like problem solving that contributes to the system's user acceptance.
Reference: 21. <author> K. VanLehn and R.M. Jones. </author> <title> Better learners use analogical problem solving sparingly. </title> <booktitle> In Proceedings of the Tenth International Conference on Machine Learning, </booktitle> <pages> pages 338-345, </pages> <address> Amherst, MA, 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Knowledge: Whereas too many given axioms, definitions, and lemmata blow up the search space immensely, missing axioms etc. prevent an automated theorem prover from finding a proof at all. For problem solving in Newtonian physics, VanLehn and Jones <ref> [21] </ref> cogni-tively analyzed and characterized situations in which humans use analogy. They report different results for poor and good problem solvers. Similarly, we found that a distinction of different types of theorem proving systems is necessary in assessing the tradeoff in theorem proving by analogy.
Reference: 22. <author> M.M. Veloso. </author> <title> Planning and Learning by Analogical Reasoning. </title> <publisher> Springer, </publisher> <address> Berlin, New York, </address> <year> 1994. </year>
Reference-contexts: Here, the time taken for retrieval has to be taken as part of the (time) effort needed for analogy and the savings have to outweight the additional effort. Veloso <ref> [22] </ref> compares run times of regular problem solving vs. problem solving by analogy for domains or problems for which the problem solving involves a lot of search. Presumably, these results naturally transfer to theorem proving by analogy although no empirical tests have been conducted so far.
References-found: 22

