URL: http://www.cs.ucl.ac.uk/staff/t.yu/pgp.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: ABSTRACT  
Abstract: In general, the machine learning process can be accelerated through the use of heuristic knowledge about the problem solution. For example, monomorphic typed Genetic Programming (GP) uses type information to reduce the search space and improve performance. Unfortunately, monomorphic typed GP also loses the generality of untyped GP: the generated programs are only suitable for inputs with the specified type. Polymorphic typed GP improves over mono-morphic and untyped GP by allowing the type information to be expressed in a more generic manner, and yet still imposes constraints on the search space. This paper describes a polymorphic GP system which can generate polymorphic programs: programs which take inputs of more than one type and produces outputs of more than one type. We also demonstrate its operation through the generation of the map polymorphic program.
Abstract-found: 1
Intro-found: 1
Reference: <author> Brave, S. </author> <year> (1996). </year> <title> Evolving recursive programs for tree search. </title> <booktitle> Advances in Genetic Programming II, P.J.Ange-line and K.E.Kinnear, </booktitle> <address> Jr.(eds.), </address> <publisher> MIT Press, </publisher> <address> Cambridge, MA, pp.203-220. </address>
Reference: <author> Cardelli, L., and Wegner, P. </author> <year> (1985). </year> <title> On understanding types, data abstraction, and polymorphism, </title> <journal> Computing Surveys, </journal> <volume> Vol. 17:4, </volume> <month> pp.471-522. </month>
Reference: <author> Cardelli, L. </author> <year> (1987). </year> <title> Basic polymorphic type checking. </title> <booktitle> Science of Computer Programming. </booktitle> <volume> Vol. 8, </volume> <pages> pp. 147-172. </pages>
Reference: <author> Clack, C., and Yu, T. </author> <year> (1997). </year> <title> Performance enhanced genetic programming, </title> <booktitle> Proceedings of the Sixth International Conference on Evolutionary Programming, </booktitle> <editor> P.J. Angeline, R. Reynolds, J. McDonnell and R. Eberhart (eds.), </editor> <publisher> Springer-Verlag, </publisher> <address> Berlin, pp.87-100. </address>
Reference: <author> Cox, A.L. Jr., Davis, L. and Qiu, Y. </author> <year> (1991). </year> <title> Dynamic anticipatory routing in circuit-switched telecommunications networks. Handbook of Genetic Algorithms. </title> <editor> L. Davis (ed.), </editor> <publisher> Van Nostrand Reinhold, </publisher> <address> NY, pp.124-143. </address>
Reference: <author> Haynes, T.D., Wainwright, R., Sen, S., and Schoenefeld, D. </author> <year> (1995), </year> <title> Strongly typed genetic programming in evolving cooperation strategies. </title> <booktitle> In Proceedings of the Sixth International Conference on Genetic Algorithms, </booktitle> <editor> Eshelman, L. (ed), </editor> <publisher> Morgan Kaufmann Publishers, Inc. </publisher> <pages> pp. 271-278. </pages>
Reference: <author> Haynes, T.D., Schoenefeld, D.A., and Wainwright, R.L. </author> <year> (1996). </year> <title> Type inheritance in strongly typed genetic programming. </title> <booktitle> Advances in Genetic Programming II, </booktitle> <address> P.J. </address>
Reference: <editor> Angeline and K.E. Kinnear, Jr. (eds), </editor> <publisher> MIT Press, </publisher> <address> Cam-bridge, MA, </address> <pages> pp. 359-376. </pages>
Reference: <author> Hudak, P., Peterson, J., and Fasel, J.H. </author> <year> (1997), </year> <title> A gentle introduction to Haskell. </title> <note> version 1.4. http://haskell.org/ tutoral/index.html. </note>
Reference: <author> Koza, J. R. </author> <year> (1992). </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference: <author> Mitchell, T., Utgoff, P., and Banerji, R. </author> <year> (1984). </year> <title> Learning by experimentation: Acquiring and refining problem-solving heuristics. </title> <booktitle> In Machine Learning: An Artificial Intelligence Approach, chapter 6, </booktitle> <pages> pp. 163-190. </pages> <publisher> Springer-Verlag. </publisher>
Reference: <author> Montana, D. J. </author> <year> (1995). </year> <title> Strongly typed genetic programming. </title> <journal> Journal of Evolutionary Computation, </journal> <volume> Vol. 3:3, </volume> <pages> pp. 199-230. </pages>
Reference: <author> Robinson, J.A. </author> <year> (1965). </year> <title> A machine-oriented logic based on the resolution principle. </title> <journal> Journal of ACM. </journal> <volume> Vol. 12:1, </volume> <pages> pp. 23-49, </pages> <month> January. </month>
Reference: <author> Rosser, J.B. </author> <year> (1982). </year> <title> Highlights of the history of the lambda-calculus. </title> <booktitle> Proceedings 1982 ACM Conference on LISP and Functional Programming. ACM, </booktitle> <pages> pp. 216-225. </pages>
Reference: <author> Syswerda, G. </author> <year> (1989). </year> <title> Uniform crossover in genetic algorithms. </title> <booktitle> Proceedings of the Third International Conference on Genetic Algorithms and Their Applications, </booktitle> <address> J.D. </address>
Reference: <editor> Schaffer (ed.), </editor> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <pages> pp. 2-9. </pages>
Reference: <author> Yu, T., and Clack, C. </author> <year> (1997). </year> <title> Hierarchical learning using abstractions in polymorphic genetic programming. In preparation. l </title>
References-found: 17

