URL: http://www.cs.msu.edu/~assemnas/814_paper/Literature.ps.gz
Refering-URL: http://www.cs.msu.edu/~assemnas/814_paper/
Root-URL: http://www.cs.msu.edu
Title: Formal Specification for Distributed Databases Nasser Assem CPS 814 Midterm Term Paper (Literature Review)  
Author: Instructor: Dr. Betty Cheng 
Date: Nov 8, 1995  
Abstract: This work is about the formal specification of distributed databases. It covers some critical properties of distributed databases, in particular safety and integrity with respect to transactions. In this literature review, a wide range of formal methods and languages developed for the specification of both distributed systems and databases are investigated. A comparison of such tools is made, and suggestions are drawn for the specification of transaction based distributed databases.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Lamport, </author> <title> "Specifying Concurrent Program Modules," </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> vol. 5, </volume> <pages> pp. 190-222, </pages> <month> Apr. </month> <year> 1983. </year>
Reference: [2] <author> M. T. -Ozsu and P. Valduriez, </author> <title> Principles of distributed database systems. </title> <publisher> Prentice hall, </publisher> <year> 1991. </year>
Reference-contexts: In Section 5, these methods are discussed. Finally in Section 6, conclusions are drawn about the approach to follow in adapting these methods to the context of distributed databases, and future investigations are discussed. 2 Background A distributed database is defined by Ozsu <ref> [2] </ref> as a collection of multiple, logically interrelated databases distributed over a computer network.
Reference: [3] <author> F. Lustman, </author> <title> "Specifying Transaction-based Information Systems with Regular Expressions," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 20, </volume> <pages> pp. 207-217, </pages> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: In fact, most information systems <ref> [3] </ref> are transaction-based.
Reference: [4] <author> S. Abiteboul and V. Vianu, </author> <title> "A transaction based approach to relational database Specification ," Journal of the ACM, </title> <journal> vol. </journal> <volume> 36, </volume> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: Constraints can be automatically maintained. This preserves constraints and soundness. <ref> [4] </ref> 3.2 TM: Specification Language for Object Oriented Database In [5] is proposed an object oriented data model TM. The TM language is a specification language that is formally founded in the language FM (a strongly typed lambda calculus that allows for subtyping and multiple inheritance).
Reference: [5] <author> H. Balsters, R. de By, and R. Zicari, </author> <title> "Typed sets as a basis for object-oriented database schema," </title> <booktitle> in Proceedings Computer Science in The Netherlands, </booktitle> <pages> pp. 62-77, </pages> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: Constraints can be automatically maintained. This preserves constraints and soundness. [4] 3.2 TM: Specification Language for Object Oriented Database In <ref> [5] </ref> is proposed an object oriented data model TM. The TM language is a specification language that is formally founded in the language FM (a strongly typed lambda calculus that allows for subtyping and multiple inheritance). The language TM gives a database designer the full dictionary of object-oriented data models.
Reference: [6] <author> G. Roman, </author> <title> "Formal specification of geographic data processing requirements," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> vol. 2, </volume> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: The architecture of this tool is set up in such a way, to allow prototyping in different languages. This requires a backend for the type checker for each language, responsible for translating the specification to the target language. 6 3.3 Formal Specification of Geographic Information Systems Roman in <ref> [6] </ref> developed a formal foundation for the specification of geographic data processing (GDP) requirements. The emphasis is placed on modeling data and knowledge requirements rather than processing needs. First-order logic is used as a means for constructing formalizations of the GDP requirements, independently of data representation.
Reference: [7] <author> U. W. Lipeck, </author> <title> "Stepwise Specification of dynamic database behaviour," </title> <booktitle> in 86 ACM-SIGMOD Int. Conf. on Mgmt. of data, </booktitle> <address> Washington, </address> <year> 1986. </year>
Reference-contexts: Some of them are accompanied with support tools allowing syntax and type checking, verification.. Other tools however should be developed to support users in the documentation, proof tools ... Besides the methods described in this section, Lipeck in <ref> [7] </ref> proposed a stepwise specification of dynamic database behaviour. We need to review this specification for the next part of the project. We believe that inspired with these methods, we will be able to come up with a specification foundation for distributed databases.
Reference: [8] <author> L. Lamport, </author> <title> "A Simple Approach to Specifying Concurrent Systems," </title> <journal> Communications of the ACM, </journal> <volume> vol. 32, </volume> <month> Jan. </month> <year> 1989. </year>
Reference-contexts: Some formal methods used in the specification and development of distributed systems include: Transition Axiom, FOCUS, CONFER, CONCUR2. We'll see also how a system ENFORMS has been developed using formal specification. The following subsections describe these methods. 4.1 Transition Axiom Method Lamport in <ref> [8] </ref> developed the transition axiom method: an approach to the formal specifiaction of concurrent systems. Though the method proposed is not a specification language, it provides a conceptual and logical foundation for writing formal specifications.
Reference: [9] <author> M. Broy, F. Dederich, C. Dendorfer, M. Fuchs, T. Gritzner, and R. Weber, </author> <title> "The Design of Distributed Systems An Introduction to FOCUS," </title> <type> tech. rep., </type> <institution> Institut fur Informatik, Technische Universitat Munchen, </institution> <year> 1992. </year>
Reference-contexts: do anything; it asserts that fl cannot perform a database operation unless the result agrees with the one that the fi action had already decided to return. 4.2 FOCUS FOCUS is a formal system development method for the systematic formal specification and development of distributed interactive systems and their components <ref> [9] </ref>. It is based on descriptive and functional system models [10]. FOCUS suggests to organize the development of systems in four phases: * requirement specification, * design specification, * abstract programming, 10 * concrete programming. For all phases specific formalisms and methods are provided.
Reference: [10] <author> M. Broy, M. Fuchs, T. Gritzner, B. Schatz, K. Spies, and K. Stolen, </author> <title> "Summary of case studies in FOCUS A Design Method for Distributed Systems," </title> <type> tech. rep., </type> <institution> Institut fur Informatik, Technische Universitat Munchen, </institution> <year> 1994. </year>
Reference-contexts: It is based on descriptive and functional system models <ref> [10] </ref>. FOCUS suggests to organize the development of systems in four phases: * requirement specification, * design specification, * abstract programming, 10 * concrete programming. For all phases specific formalisms and methods are provided.
Reference: [11] <author> B. Cheng, R. Bourdeau, and G. Gannod, </author> <title> "The Object-Oriented Development of a Distributed Multimedia Environmental Information System," </title> <booktitle> Proc. of IEEE 6th International Conference on Software Engineering and knowledge Engineering, </booktitle> <pages> pp. 70-77, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: CONFER attempts to use fourth generation programming technology. In fact, in most cases problems of distribution and parallelism are attacked with second generation programming techniques. 14 4.5 ENFORMS ENFORMS <ref> [11] </ref> is currently being developed by the Software Engineering Research Group at Michi-gan State University, to provide decision support services as part of the Environmental Information System Project.
Reference: [12] <author> M. J. Morin and B. Cheng, </author> <title> "Final Report for ENFORMS: LAC Layer Specification," </title> <type> tech. rep., </type> <institution> MSU, Department of Computer Science, </institution> <year> 1993. </year> <month> 17 </month>
Reference-contexts: Eventhough ENFORMS itself is not a specification language for distributed object systems, ENFORMS has been developed using a formal method for specifying such systems. ENFORMS is composed of three layers <ref> [12] </ref>: a model server layer, a distributed archive control, and a local archive control. For the purpose of this project, the local archive control (LAC) will be a good reference to see how objects and the methods are formally specified.
References-found: 12

