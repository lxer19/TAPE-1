URL: http://www.cs.jhu.edu/~cowen/sodasap.ps
Refering-URL: http://www.cs.jhu.edu/~cowen/
Root-URL: http://www.cs.jhu.edu
Title: Compact Routing with Minimum Stretch  
Author: L. J. Cowen 
Date: July 6, 1998  
Address: Baltimore, MD 21218  
Affiliation: Department of Mathematical Sciences Johns Hopkins University  
Abstract: We present the first universal compact routing algorithm with maximum stretch bounded by 3 that uses sublinear space at every vertex. The algorithm uses local routing tables of size O(n 2=3 log 4=3 n) and achieves paths that are most 3 times the length of the shortest path distances for all nodes in an arbitrary weighted undirected network. This answers an open question of Gavoille and Gengler who showed that any universal compact routing algorithm with maximum stretch strictly less than 3 must use (n) local space at some vertex. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Aingworth, C. Chekuri, P. Indyk, and R. Motwani. </author> <title> Fast estimation of diameter and shortest paths (without matrix multiplication). </title> <type> Unpublished manuscript. </type>
Reference-contexts: The approximate all-pairs shortest path problem involves a tradeoff of stretch against time- short paths with stretch bounded by a constant are computed in time less than it would take to compute exact all-pairs shortest paths (see <ref> [1, 2, 6, 8, 9, 11] </ref>). The compact routing problem considers instead a tradeoff of stretch for space, in the setting where each node locally stores its own routing tables. <p> The principal ingredients of our algorithm include the following: * A known algorithm for optimal compact routing on trees. * The O (log n) greedy approximation to dominating set, coupled with truncated and full Dijkstra's algorithms as used in <ref> [1, 2, 9, 11] </ref> and in the same fashion as to how it is used in [4]. * A new density dependent algorithm for landmark selection. It is possible to give a careful distributed implementation of our algorithms, along the same lines as in [5]. <p> cost of ~ O (mjLj), where jLj will be shown to be O (n 1ff log n + n 1+ff 2 ) by Lemma 5.3 below. 2 We remark that the labeling and storage algorithms (which form the pre-processing for our routing algorithm) resemble the approximate shortest path algorithms of <ref> [1, 2, 9, 11] </ref>. In fact, we are constructing a 3-spanner (see [3, 11, 18]). However, we are doing more work than the best tradeoffs achieved by those other algorithms, because our goal is not only to produce approximate shortest paths, but to have small local space.
Reference: [2] <author> D. Aingworth, C. Chekuri, and R. Motwani. </author> <title> Fast estimation of diameter and shortest paths (without matrix multiplication). </title> <booktitle> In Proceedings of the Seventh Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 547-553, </pages> <address> Atlanta, Georgia, </address> <month> 28-30 Jan. </month> <year> 1996. </year>
Reference-contexts: The approximate all-pairs shortest path problem involves a tradeoff of stretch against time- short paths with stretch bounded by a constant are computed in time less than it would take to compute exact all-pairs shortest paths (see <ref> [1, 2, 6, 8, 9, 11] </ref>). The compact routing problem considers instead a tradeoff of stretch for space, in the setting where each node locally stores its own routing tables. <p> The principal ingredients of our algorithm include the following: * A known algorithm for optimal compact routing on trees. * The O (log n) greedy approximation to dominating set, coupled with truncated and full Dijkstra's algorithms as used in <ref> [1, 2, 9, 11] </ref> and in the same fashion as to how it is used in [4]. * A new density dependent algorithm for landmark selection. It is possible to give a careful distributed implementation of our algorithms, along the same lines as in [5]. <p> cost of ~ O (mjLj), where jLj will be shown to be O (n 1ff log n + n 1+ff 2 ) by Lemma 5.3 below. 2 We remark that the labeling and storage algorithms (which form the pre-processing for our routing algorithm) resemble the approximate shortest path algorithms of <ref> [1, 2, 9, 11] </ref>. In fact, we are constructing a 3-spanner (see [3, 11, 18]). However, we are doing more work than the best tradeoffs achieved by those other algorithms, because our goal is not only to produce approximate shortest paths, but to have small local space.
Reference: [3] <author> B. Awerbuch. </author> <title> Complexity of network synchronization. </title> <journal> J. of the ACM, </journal> <volume> 32(4) </volume> <pages> 804-823, </pages> <month> Oct. </month> <year> 1985. </year>
Reference-contexts: In fact, we are constructing a 3-spanner (see <ref> [3, 11, 18] </ref>). However, we are doing more work than the best tradeoffs achieved by those other algorithms, because our goal is not only to produce approximate shortest paths, but to have small local space.
Reference: [4] <author> B. Awerbuch, A. Bar-Noy, N. Linial, and D. Peleg. </author> <title> Compact distributed data structures for adaptive network routing. </title> <booktitle> In Proc. 21st ACM Symp. on Theory of Computing, </booktitle> <pages> pages 479-489, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: An algorithm of [5] achieves the optimum of stretch 3 and O (n 3=2 log n) space total, but some individual nodes use O (n log n) space in this scheme. Further work (see <ref> [4] </ref>) argued successfully that it was most important to bound the maximum space, and this has been the focus of recent work. <p> algorithm include the following: * A known algorithm for optimal compact routing on trees. * The O (log n) greedy approximation to dominating set, coupled with truncated and full Dijkstra's algorithms as used in [1, 2, 9, 11] and in the same fashion as to how it is used in <ref> [4] </ref>. * A new density dependent algorithm for landmark selection. It is possible to give a careful distributed implementation of our algorithms, along the same lines as in [5]. <p> With the exception of the naive scheme (and also <ref> [4] </ref>, see below), all compact routing schemes including ours that guarantee some upper bound on maximum stretch begin with the assignment of a new O (log n) bit label to every node, this time dependent on network topology- whether this is referred to as a "renaming" or as an "address" is <p> bound on maximum stretch begin with the assignment of a new O (log n) bit label to every node, this time dependent on network topology- whether this is referred to as a "renaming" or as an "address" is dependent on the particular terminology used in the paper. (The paper of <ref> [4] </ref> uses topology-independent node names, by putting a distributed dictionary on top of the renaming scheme, so that packets learn the address of the node they are looking for online, as they explore the graph, but to achieve this they need a stronger model: they require writable headers so that packets <p> Our algorithm uses a two-tiered method of selecting landmarks, and a density dependent notion of near and far distances in order to achieve its bounds, as described in Section 4. 3 3 Preliminaries The algorithm uses the following known tools as building blocks. Theorem 3.1 (Extended dominating set theorem <ref> [4, 17] </ref>) Let G = (V; E) be a weighted undi-rected graph. Let B v denote the set of v's n ff closest neighbors (with ties broken lexicographically according to original node names).
Reference: [5] <author> B. Awerbuch, A. Bar-Noy, N. Linial, and D. Peleg. </author> <title> Improved routing strategies with succinct tables. </title> <journal> J. of Algorithms, </journal> <volume> 11 </volume> <pages> 307-341, </pages> <year> 1990. </year>
Reference-contexts: Some of the earlier work on this problem presented schemes that bounded only average space, rather than maximum space at each node. An algorithm of <ref> [5] </ref> achieves the optimum of stretch 3 and O (n 3=2 log n) space total, but some individual nodes use O (n log n) space in this scheme. <p> It is possible to give a careful distributed implementation of our algorithms, along the same lines as in <ref> [5] </ref>. The improvements we present are at the algorithmic, not at the protocol level, and go through in the same distributed model with no additional complication. The reader is also referred to the excellent survey of [15], particularly for implementation issues associated with our single-source compact routing subroutine (section 3).
Reference: [6] <author> B. Awerbuch, B. Berger, L. Cowen, and D. Peleg. </author> <title> Near-linear cost constructions of neighborhood covers in sequential and distributed environments and their applications. </title> <booktitle> In Proc. 34rd IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 638-647. </pages> <publisher> IEEE, </publisher> <month> Nov. </month> <year> 1993. </year> <month> 8 </month>
Reference-contexts: The approximate all-pairs shortest path problem involves a tradeoff of stretch against time- short paths with stretch bounded by a constant are computed in time less than it would take to compute exact all-pairs shortest paths (see <ref> [1, 2, 6, 8, 9, 11] </ref>). The compact routing problem considers instead a tradeoff of stretch for space, in the setting where each node locally stores its own routing tables.
Reference: [7] <author> B. Awerbuch and D. Peleg. </author> <title> Routing with polynomial communication space trade-off. </title> <journal> SIAM J. Disc. Math, </journal> <volume> 5(2) </volume> <pages> 151-162, </pages> <year> 1992. </year>
Reference-contexts: The best bounds on maximum local space were achieved for different ranges of stretch by different papers: A recent algorithm of [12] achieves O (n 1=2 log n) maximum local space with maximum stretch bounded by 5; the paper of <ref> [7] </ref> give tradeoffs of stretch versus space that result in sublinear local space when the maximum stretch is 16, and beat the space requirements of [12] for maximum stretch &gt; 64.
Reference: [8] <author> E. Cohen. </author> <title> Fast algorithms for constructing t-spanners and paths with stretch t. </title> <booktitle> In Proc. 34rd IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 648-657. </pages> <publisher> IEEE, </publisher> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: The approximate all-pairs shortest path problem involves a tradeoff of stretch against time- short paths with stretch bounded by a constant are computed in time less than it would take to compute exact all-pairs shortest paths (see <ref> [1, 2, 6, 8, 9, 11] </ref>). The compact routing problem considers instead a tradeoff of stretch for space, in the setting where each node locally stores its own routing tables.
Reference: [9] <author> E. Cohen and U. Zwick. </author> <title> All-pairs small-stretch paths. </title> <booktitle> In Proceedings of the Eighth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 93-102, </pages> <address> New Orleans, Louisiana, </address> <month> 5-7 Jan. </month> <year> 1997. </year>
Reference-contexts: The approximate all-pairs shortest path problem involves a tradeoff of stretch against time- short paths with stretch bounded by a constant are computed in time less than it would take to compute exact all-pairs shortest paths (see <ref> [1, 2, 6, 8, 9, 11] </ref>). The compact routing problem considers instead a tradeoff of stretch for space, in the setting where each node locally stores its own routing tables. <p> The principal ingredients of our algorithm include the following: * A known algorithm for optimal compact routing on trees. * The O (log n) greedy approximation to dominating set, coupled with truncated and full Dijkstra's algorithms as used in <ref> [1, 2, 9, 11] </ref> and in the same fashion as to how it is used in [4]. * A new density dependent algorithm for landmark selection. It is possible to give a careful distributed implementation of our algorithms, along the same lines as in [5]. <p> cost of ~ O (mjLj), where jLj will be shown to be O (n 1ff log n + n 1+ff 2 ) by Lemma 5.3 below. 2 We remark that the labeling and storage algorithms (which form the pre-processing for our routing algorithm) resemble the approximate shortest path algorithms of <ref> [1, 2, 9, 11] </ref>. In fact, we are constructing a 3-spanner (see [3, 11, 18]). However, we are doing more work than the best tradeoffs achieved by those other algorithms, because our goal is not only to produce approximate shortest paths, but to have small local space.
Reference: [10] <author> E. W. Dijsktra. </author> <title> A note on two problems in connection with graphs. </title> <journal> Numerische Mathematik, </journal> <volume> 1 </volume> <pages> 269-271, </pages> <year> 1959. </year>
Reference-contexts: We show at the end of this argument how to modify the known algorithm to use only O ( p n log n) storage at large degree vertices. The initial algorithm works as follows: consider the tree constructed by Dijkstra's algorithm <ref> [10] </ref> for single-source shortest paths spanning G with l as the root. Then the shortest path from l to any node v in G is its unique path on this tree.
Reference: [11] <author> D. Dor, S. Halperin, and U. Zwick. </author> <title> All pairs almost shortest paths. </title> <booktitle> In 37th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 452-461, </pages> <address> Burlington, Vermont, 14-16 Oct. 1996. </address> <publisher> IEEE. </publisher>
Reference-contexts: The approximate all-pairs shortest path problem involves a tradeoff of stretch against time- short paths with stretch bounded by a constant are computed in time less than it would take to compute exact all-pairs shortest paths (see <ref> [1, 2, 6, 8, 9, 11] </ref>). The compact routing problem considers instead a tradeoff of stretch for space, in the setting where each node locally stores its own routing tables. <p> The principal ingredients of our algorithm include the following: * A known algorithm for optimal compact routing on trees. * The O (log n) greedy approximation to dominating set, coupled with truncated and full Dijkstra's algorithms as used in <ref> [1, 2, 9, 11] </ref> and in the same fashion as to how it is used in [4]. * A new density dependent algorithm for landmark selection. It is possible to give a careful distributed implementation of our algorithms, along the same lines as in [5]. <p> Truncated Dijkstra takes ~ O time (see <ref> [11] </ref>), since the labeling and storage algorithms each perform truncated Dijkstra for all n vertices, this takes a total of ~ O time. Construction of L is dominated by the construction of D which takes ~ O time. <p> cost of ~ O (mjLj), where jLj will be shown to be O (n 1ff log n + n 1+ff 2 ) by Lemma 5.3 below. 2 We remark that the labeling and storage algorithms (which form the pre-processing for our routing algorithm) resemble the approximate shortest path algorithms of <ref> [1, 2, 9, 11] </ref>. In fact, we are constructing a 3-spanner (see [3, 11, 18]). However, we are doing more work than the best tradeoffs achieved by those other algorithms, because our goal is not only to produce approximate shortest paths, but to have small local space. <p> In fact, we are constructing a 3-spanner (see <ref> [3, 11, 18] </ref>). However, we are doing more work than the best tradeoffs achieved by those other algorithms, because our goal is not only to produce approximate shortest paths, but to have small local space.
Reference: [12] <author> T. Eilam, C. Gavoille, and D. Peleg. </author> <title> Compact routing schemes with low stretch factor. </title> <type> Technical Memo RR-1195-98, </type> <institution> Laboratoire Bordelais de Recherche en Informatique, </institution> <month> Jan. </month> <year> 1998. </year> <note> To appear in PODC98. </note>
Reference-contexts: Further work (see [4]) argued successfully that it was most important to bound the maximum space, and this has been the focus of recent work. The best bounds on maximum local space were achieved for different ranges of stretch by different papers: A recent algorithm of <ref> [12] </ref> achieves O (n 1=2 log n) maximum local space with maximum stretch bounded by 5; the paper of [7] give tradeoffs of stretch versus space that result in sublinear local space when the maximum stretch is 16, and beat the space requirements of [12] for maximum stretch &gt; 64. <p> different papers: A recent algorithm of <ref> [12] </ref> achieves O (n 1=2 log n) maximum local space with maximum stretch bounded by 5; the paper of [7] give tradeoffs of stretch versus space that result in sublinear local space when the maximum stretch is 16, and beat the space requirements of [12] for maximum stretch &gt; 64. No algorithm which beat the O (n log n) local space of the naive algorithm for stretch &lt; 5 was previously known. This is over a 2/3 reduction in the quality of the approximate solution, which is now tight for stretch. Our results.
Reference: [13] <author> G. N. Frederickson and R. Janardan. </author> <title> Designing networks with compact routing tables. </title> <journal> Algorithmica, </journal> <volume> 3 </volume> <pages> 171-190, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: Early work on the compact routing problem focused on routing schemes for spe-cial case networks such as rings, trees [21], complete networks and grids [22, 23]. Fredrickson and Janardan <ref> [13, 14] </ref> considered compact routing in networks with small separators, such as outerplanar networks, and also derived small stretch algorithms for compact routing in planar networks.
Reference: [14] <author> G. N. Frederickson and R. Janardan. </author> <title> Efficient message routing in planar networks. </title> <journal> SIAM J. on Comput., </journal> <volume> 18 </volume> <pages> 843-857, </pages> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: Early work on the compact routing problem focused on routing schemes for spe-cial case networks such as rings, trees [21], complete networks and grids [22, 23]. Fredrickson and Janardan <ref> [13, 14] </ref> considered compact routing in networks with small separators, such as outerplanar networks, and also derived small stretch algorithms for compact routing in planar networks.
Reference: [15] <author> C. Gavoille. </author> <title> A survey on interval routing scheme. </title> <type> Technical Memo RR-1182-97, </type> <institution> Laboratoire Bordelais de Recherche en Informatique, </institution> <month> Oct. </month> <year> 1997. </year>
Reference-contexts: The improvements we present are at the algorithmic, not at the protocol level, and go through in the same distributed model with no additional complication. The reader is also referred to the excellent survey of <ref> [15] </ref>, particularly for implementation issues associated with our single-source compact routing subroutine (section 3). For those unfamiliar with past work in the area, however, it is worth making a remark, about node-names and output edge-names, both of which are implementation issues common to all papers in the area. <p> Clearly this uses O (deg (v) log n) storage at node v, and it is easy to see that given the in-order of a destination node, one routes optimally from l (see also <ref> [15, 21] </ref>).
Reference: [16] <author> C. Gavoille and M. Gengler. </author> <title> Space-efficiency of routing schemes of stretch factor three. </title> <booktitle> In 4th International Colloquium on Structural Informtion and Communication Complexity (SIROCCO), </booktitle> <pages> pages 162-175, </pages> <month> July </month> <year> 1997. </year>
Reference-contexts: This paper answers the question: what is the minimum achievable stretch of any compact routing scheme with sublinear space at each node. It does so by presenting the first such algorithm with stretch 3. The matching lower bound comes from a recent paper of Gavoille and Gengler <ref> [16] </ref> who proved that there exists an n-node network that requires (n) space at some node for any routing scheme with stretch strictly less than 3. fl Supported in part by ONR grant N00014-96-1-0829 1 Previous work.
Reference: [17] <author> L. Lovasz. </author> <title> On the ratio of optimal integral and fractional covers. </title> <journal> Discrete Mathematics, </journal> <volume> 13 </volume> <pages> 383-390, </pages> <year> 1975. </year>
Reference-contexts: Our algorithm uses a two-tiered method of selecting landmarks, and a density dependent notion of near and far distances in order to achieve its bounds, as described in Section 4. 3 3 Preliminaries The algorithm uses the following known tools as building blocks. Theorem 3.1 (Extended dominating set theorem <ref> [4, 17] </ref>) Let G = (V; E) be a weighted undi-rected graph. Let B v denote the set of v's n ff closest neighbors (with ties broken lexicographically according to original node names).
Reference: [18] <author> D. Peleg and A. A. Schaffer. </author> <title> Graph spanners. </title> <journal> J. of Graph Theory, </journal> <volume> 13 </volume> <pages> 99-116, </pages> <year> 1989. </year>
Reference-contexts: In fact, we are constructing a 3-spanner (see <ref> [3, 11, 18] </ref>). However, we are doing more work than the best tradeoffs achieved by those other algorithms, because our goal is not only to produce approximate shortest paths, but to have small local space.
Reference: [19] <author> D. Peleg and E. Upfal. </author> <title> A tradeoff between size and efficiency for routing tables. </title> <booktitle> In Proceedings of the 20 th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 43-52. </pages> <publisher> ACM, </publisher> <month> May </month> <year> 1988. </year>
Reference-contexts: Fredrickson and Janardan [13, 14] considered compact routing in networks with small separators, such as outerplanar networks, and also derived small stretch algorithms for compact routing in planar networks. Peleg and Upfal <ref> [19, 20] </ref> were the first to construct universal compact routing schemes, that is, compact routing schemes that worked on all undirected networks. Some of the earlier work on this problem presented schemes that bounded only average space, rather than maximum space at each node.
Reference: [20] <author> D. Peleg and E. Upfal. </author> <title> A tradeoff between size and efficiency for routing tables. </title> <journal> J. of the ACM, </journal> <volume> 36 </volume> <pages> 510-530, </pages> <year> 1989. </year>
Reference-contexts: Fredrickson and Janardan [13, 14] considered compact routing in networks with small separators, such as outerplanar networks, and also derived small stretch algorithms for compact routing in planar networks. Peleg and Upfal <ref> [19, 20] </ref> were the first to construct universal compact routing schemes, that is, compact routing schemes that worked on all undirected networks. Some of the earlier work on this problem presented schemes that bounded only average space, rather than maximum space at each node.
Reference: [21] <author> N. Santoro and R. Khatib. </author> <title> Implicit routing in networks. </title> <journal> The Computer Science Journal, </journal> <volume> 28 </volume> <pages> 5-8, </pages> <year> 1985. </year>
Reference-contexts: Early work on the compact routing problem focused on routing schemes for spe-cial case networks such as rings, trees <ref> [21] </ref>, complete networks and grids [22, 23]. Fredrickson and Janardan [13, 14] considered compact routing in networks with small separators, such as outerplanar networks, and also derived small stretch algorithms for compact routing in planar networks. <p> Proof. First consider the following scheme, which is identical to the algorithms originally found by <ref> [21] </ref> for compact routing on trees. It has all the properties except the first; instead of a maximum of O ( n log n) local storage at each vertex, it uses O (deg (v) log n) storage at node v. <p> Clearly this uses O (deg (v) log n) storage at node v, and it is easy to see that given the in-order of a destination node, one routes optimally from l (see also <ref> [15, 21] </ref>).
Reference: [22] <author> J. van Leeuwen and R. Tan. </author> <title> Routing with compact routing tables. </title> <editor> In G. Roznenberg and A. Salomaa, editors, </editor> <booktitle> The Book of L, </booktitle> <pages> pages 259-273. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, New York, </address> <year> 1986. </year>
Reference-contexts: Early work on the compact routing problem focused on routing schemes for spe-cial case networks such as rings, trees [21], complete networks and grids <ref> [22, 23] </ref>. Fredrickson and Janardan [13, 14] considered compact routing in networks with small separators, such as outerplanar networks, and also derived small stretch algorithms for compact routing in planar networks.
Reference: [23] <author> J. van Leeuwen and R. Tan. </author> <title> Interval routing. </title> <journal> The Computer Journal, </journal> <volume> 30 </volume> <pages> 259-273, </pages> <year> 1987. </year>
Reference-contexts: Early work on the compact routing problem focused on routing schemes for spe-cial case networks such as rings, trees [21], complete networks and grids <ref> [22, 23] </ref>. Fredrickson and Janardan [13, 14] considered compact routing in networks with small separators, such as outerplanar networks, and also derived small stretch algorithms for compact routing in planar networks.
References-found: 23

