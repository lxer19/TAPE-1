URL: ftp://ftp.cs.cornell.edu/pub/chandra/undec.ps.Z
Refering-URL: http://www.cs.cornell.edu/Info/People/chandra/undec.html
Root-URL: 
Title: Undecidability in Economics: A Formal Challenge to Rational Expectations (Preliminary Draft)  
Author: Siddharth Chandra and Tushar Deepak Chandra 
Address: Ithaca, NY  
Affiliation: Department of Computer Science, Upson Hall, Cornell University,  
Note: Research supported by NSF grant CCR-9102231, DARPA/NASA Ames grant NAG-2-593, grants from the IBM Endicott Programming Laboratory and Siemens Corp. Department of Economics, Uris Hall, Cornell University, Ithaca, NY 14853. This author is also supported by a Cornell Sage fellowship.  14853. This author is also supported by an IBM graduate fellowship.  
Date: August 15, 1993  
Abstract: In this paper we study the difficulty of solving problems in economics. For this purpose, we adopt the notion of undecidability from recursion theory. We show that certain problems in economics are undecidable, i.e., cannot be solved by a Turing Machine, a device that is at least as powerful as any computational device that can be constructed [1]. In particular, we prove that even in finite closed economies subject to a variable initial condition, in which the behavior of every agent in the economy is known, certain important problems are undecidable. Philosophically, this result formally brings into question the Rational Expectations Hypothesis which assumes that each agent is able to determine what it should do if it wishes to maximize its utility. We show that even when an optimal rational forecast exists for each agent (based on the information currently available to it), agents may lack the ability to make these forecasts. For example, Lucas [6] describes economic models as "mechanical, artificial world(s), populated by .... interacting robots". Since any mechanical robot can be at most as computationally powerful as a Turing Machine, such economies are vulnerable to the phenomenon of undecidability. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Church. </author> <title> An unsolvable problem of elementary number theory. </title> <journal> American Journal of Mathematics, </journal> <volume> 58 </volume> <pages> 345-363, </pages> <year> 1936. </year>
Reference-contexts: Introduction The Turing Machine was invented in 1936 by Alan Turing [11]. It was conceived at a time when mathematicians were trying to define the concept of computability of functions. Examples of such efforts are Church's -calculus <ref> [1] </ref>, Post's Post systems [7], Godel's -recursive functions [2], etc. Later mathematicians showed that all of these systems are computationally equivalent, leading Church to declare that each system captured the intuitive notion of "computable". This declaration is known as Church's Thesis.
Reference: [2] <author> Kurt Godel. </author> <title> On Formally Undecidable Propositions. </title> <publisher> Basic Books, </publisher> <address> New York, NY, </address> <year> 1962. </year>
Reference-contexts: Introduction The Turing Machine was invented in 1936 by Alan Turing [11]. It was conceived at a time when mathematicians were trying to define the concept of computability of functions. Examples of such efforts are Church's -calculus [1], Post's Post systems [7], Godel's -recursive functions <ref> [2] </ref>, etc. Later mathematicians showed that all of these systems are computationally equivalent, leading Church to declare that each system captured the intuitive notion of "computable". This declaration is known as Church's Thesis.
Reference: [3] <author> Douglas R. Hofstadter. </author> <title> Godel, Escher, Bach: An Eternal Golden Braid. Random House, </title> <publisher> Inc., </publisher> <address> New York, NY, </address> <year> 1989. </year>
Reference-contexts: The terms "decidable" and "undecidable" apply to properties of elements of sets. By a slight abuse of terminology, we say that a language is undecidable if there is no Turing Machine that can determine whether an arbitrary given string belongs to that language. <ref> [3] </ref> contains a good intuitive description of the above concepts. Universal Turing Machines As we saw earlier, a Turing Machine is specified by an 8-tuple hQ; ; ?; ; ffi; q 0 ; q a ; q r i. <p> In this case, the sentence is false|a contradiction. 2. The sentence is false. In this case, it is false that the sentence is false, i.e., the sentence is true|a contradiction. 2 Note that the above sentence refers to itself. The technique of diagonalization was first used by Cantor <ref> [3] </ref> at the end of the last century to show that there does not exist a one-to-one correspondence between the natural numbers N and 2 N , the power set of N , which is defined as follows. <p> In this case, M i;i = 0. Hence i 2 S. Since f (i) = S, we have a contradiction. Note that this argument can applied to a wide variety of sets other than N . A similar argument was also used in "Russell's paradox" <ref> [3] </ref>. 29 Undecidability of the Halting Problem Cantor's simple cardinality argument allows us to prove the existence of undecidable decision problems. Informally, the proof is as follows: there are uncountably many languages over f0; 1g fl but only countably many Turing Machines.
Reference: [4] <author> J. Hopcroft and J. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, </address> <year> 1979. </year>
Reference-contexts: The Turing Machine is said to halt on input x if it either accepts x or rejects x. Note that it may do neither, by running infinitely on input x without ever accepting or rejecting. A Formal Description of Turing Machines Definition 12 A Turing Machine <ref> [4] </ref> is a 8-tuple M = hQ; ; ?; ; ffi; q 0 ; q a ; q r i 23 Finite Control Tape . . . a a a b b b b . . .b a a ReadnWrite Head where: 1. <p> More precisely, the alphabet of a Universal Turing Machine is f0; 1g. The Universal Turing Machine accepts the string hx; yi if and only if x accepts y. To see the construction of a Universal Turing Machine, the reader is referred to <ref> [4] </ref>. Since the Universal Turing Machine is capable of simulating every Turing Machine, it is capable of simulating itself. The property by which a Turing Machine can simulate itself is called self reference. This allows us to use a proof technique called diagonalization to prove that some problems are undecidable. <p> Thus there must exist many languages that are not accepted by any Turing Machine. In this section, we prove the undecidability of one such problem, known as the Halting Problem and denoted H <ref> [4] </ref>. Informally, H is stated as follows: given a Turing Machine specification i and a string x, does i halt on x? More formally H is the language defined as follows: H = fhi; xij i (x) haltsg Theorem 4 The halting problem is undecidable. <p> Other ways of eliminating determinism such as non-determinism and alternation have also been considered. For a detailed description, the reader is referred to <ref> [4] </ref>. None of the enhancements mentioned above increase the power of the Turing Machine model. Furthermore, even if we apply a combination of these enhancements, the computing power of the Turing Machine model remains unchanged. <p> The proof of this fact is beyond the scope of this paper: for this, the reader is referred to <ref> [4] </ref>. 33 Acknowledgments We would like to thank Karl Shell for his valuable advice and comments on the result.
Reference: [5] <author> Dexter Kozen. </author> <title> Lecture notes for introduction to theory of computation. </title> <institution> Lecture notes for Cornell University course CS381, </institution> <year> 1992. </year>
Reference: [6] <author> Robert E. Lucas Jr. </author> <title> On the mechanics of economic development. </title> <journal> Journal of Monetary Economics, </journal> <volume> 22, </volume> <year> 1988. </year>
Reference: [7] <author> E. Post. </author> <title> Finite combinatory processes | formulation, I. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 1, </volume> <year> 1936. </year>
Reference-contexts: Introduction The Turing Machine was invented in 1936 by Alan Turing [11]. It was conceived at a time when mathematicians were trying to define the concept of computability of functions. Examples of such efforts are Church's -calculus [1], Post's Post systems <ref> [7] </ref>, Godel's -recursive functions [2], etc. Later mathematicians showed that all of these systems are computationally equivalent, leading Church to declare that each system captured the intuitive notion of "computable". This declaration is known as Church's Thesis.
Reference: [8] <author> John H. Reif, J.D. Tygar, and Akitoshi Yoshida. </author> <title> The computability and complexity of optical beam tracing. </title> <booktitle> In Proceedings of the Thirty-first Symposium on Foundations of Computer Science, </booktitle> <pages> pages 106-114, </pages> <month> June </month> <year> 1990. </year>
Reference: [9] <author> Eugene Silberberg. </author> <title> The structure of economics : a mathematical analysis. </title> <publisher> McGraw-Hill, </publisher> <year> 1978. </year>
Reference: [10] <author> Stephen E. Spear. </author> <title> Learning rational expectations under computability constraints. </title> <journal> Econometrica, </journal> <volume> 57(4) </volume> <pages> 889-910, </pages> <year> 1989. </year>
Reference: [11] <author> A.M. </author> <title> Turing. On computable numbers with an application to the Entscheidungs-problem. </title> <journal> Proceedings of the London Math. Society, </journal> <volume> 2, </volume> <year> 1936. </year>
Reference-contexts: Introduction The Turing Machine was invented in 1936 by Alan Turing <ref> [11] </ref>. It was conceived at a time when mathematicians were trying to define the concept of computability of functions. Examples of such efforts are Church's -calculus [1], Post's Post systems [7], Godel's -recursive functions [2], etc.
Reference: [12] <author> Henry Y. Wan (Jr.). </author> <title> The new classical economics|a game-theoretic critique. </title> <editor> In George R Feiwel, editor, </editor> <title> Issues in contemporary macroeconomics and distribution, </title> <type> page 237. </type> <institution> State University of New York Press, Albany, </institution> <year> 1985. </year>
References-found: 12

