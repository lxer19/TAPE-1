URL: http://www.cs.washington.edu/research/projects/lis/www/papers/postscript/cronquist-FPGA96.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/www/emerald/
Root-URL: 
Email: darrenc,larry@cs.washington.edu  
Title: Emerald An Architecture-Driven Tool Compiler for FPGAs  
Author: Darren C. Cronquist and Larry McMurchie 
Address: Box 352350 Seattle, WA 98195-2350  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: Ideally, the development phase of a new FPGA architecture would make use of a reliable set of mapping tools to produce accurate performance evaluations of proposed designs. Unfortunately, given the quick production time frames faced by most developers, tool construction is often postponed until after many architectural features have been frozen. To satisfy the need for fast tool prototyping, we have designed Emerald, a powerful architecture-driven system for quick development of FPGA tools. At its heart Emerald provides the basic features needed in all FPGA systems logic block analysis, synthesis and technology mapping, global placement and partitioning, and detailed placement and routing. Its CAD environment provides an efficient way to thoroughly specify an FPGA's routing and logic block architectures, as well as architecture-specific metrics to tailor placement and routing. Moreover, Emerald's parameterized schematic specifications allow architectural variations to be quickly captured and evaluated. The overall system is demonstrated on a bus-oriented sea-of-gates FPGA similar to the Atmel 6000. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. McMurchie and C. Ebeling, "PathFinder: </author> <title> A Negotiation-Based Performance-Driven Router for FP-GAs," </title> <booktitle> Proc. of the 1995 ACM Third International Symposium on Field-Programmable Gate Arrays, </booktitle> <address> Monterey, CA, </address> <pages> pp. 111-117, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: the synthesis and technology mapping phase makes use of the Berkeley's synthesis system, SIS [4]; global placement is built around the Tomus partitioning tool [2]; detailed placement uses standard simulated annealing techniques along with adaptable cost function metrics; the final phase, detailed routing, is based on the Pathfinder routing algorithm <ref> [1] </ref>. The customization of these tools is described in detail in sections 4 - 7. The last section of this paper provides a case study. 2 Routing Architecture Specification The routing resources of an FPGA architecture consist of switches, multiplexers, demultiplexers and other programmable routing elements. <p> The router used in this work is derived from the Pathfinder router as described in <ref> [1] </ref>. Pathfinder uses an iterative algorithm in which signals negotiate for resources. Delay is minimized by allowing more critical signals a greater say in this negotiation. In order to reduce the runtime, the router employs an A* algorithm.
Reference: [2] <author> K. Roy, </author> <title> "A timing-driven multi-way partitioning system for integrated circuits and multi-chip systems," </title> <publisher> Ph. </publisher> <address> D. </address> <institution> Dissertation, University of Washington, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: The Emerald system is built on top of a set of robust and extensively tested tools: the synthesis and technology mapping phase makes use of the Berkeley's synthesis system, SIS [4]; global placement is built around the Tomus partitioning tool <ref> [2] </ref>; detailed placement uses standard simulated annealing techniques along with adaptable cost function metrics; the final phase, detailed routing, is based on the Pathfinder routing algorithm [1]. The customization of these tools is described in detail in sections 4 - 7. <p> For the purpose of computing the semiperimeter, a cell's location at any instant is taken to be the center of the sector to which it currently belongs. Further details of the partitioning algorithm can be found in <ref> [2] </ref> and [3]. 6 Detailed Placement After the completion of global placement, every function has been assigned to a sector on the FPGA. Detailed placement assigns functions to specific logic blocks within each sector. A simulated annealing algorithm with a cost function tailored to the specified FPGA is used.
Reference: [3] <author> K. Roy, B. Guan, and C. Sechen, </author> <title> "A sea-of-gate style FPGA placement algorithm," </title> <booktitle> in Proceedings of Seventh IEEE International Conference VLSI Design, Calcutta, India, </booktitle> <pages> pp. 221-224, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: For the purpose of computing the semiperimeter, a cell's location at any instant is taken to be the center of the sector to which it currently belongs. Further details of the partitioning algorithm can be found in [2] and <ref> [3] </ref>. 6 Detailed Placement After the completion of global placement, every function has been assigned to a sector on the FPGA. Detailed placement assigns functions to specific logic blocks within each sector. A simulated annealing algorithm with a cost function tailored to the specified FPGA is used. <p> As a result of these factors, nearest-neighbor-only inputs must be handled with a specialized metric in order to produce routable placements. In previous work <ref> [3] </ref>, Roy, Guan, and Sechen handled these nearest-neighbor routing constraints on sea-of-gates style architectures via a "repulsion force" metric which pushed macros apart, creating empty cells for route-throughs .
Reference: [4] <author> E. Sentovich et al., </author> <title> "SIS: A System for Sequential Circuit Synthesis," </title> <note> Electronics Research Laboratory Memorandum No. </note> <institution> UCB/ERL M92/41, Dept. of Electrical Engineering and Computer Science, University of Cali-fornia, Berkeley, </institution> <address> CA, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: In both cases a level of abstraction is employed that exploits the commonality of target architectures. The Emerald system is built on top of a set of robust and extensively tested tools: the synthesis and technology mapping phase makes use of the Berkeley's synthesis system, SIS <ref> [4] </ref>; global placement is built around the Tomus partitioning tool [2]; detailed placement uses standard simulated annealing techniques along with adaptable cost function metrics; the final phase, detailed routing, is based on the Pathfinder routing algorithm [1]. <p> Because of its availability, flexibility, and support for both multiplexer and LUT-based logic block architectures, the synthesis and technology mapping tool SIS, developed at Berkeley <ref> [4] </ref>, was chosen.
Reference: [5] <author> L. Trevillyan, </author> <title> "An Experiment in Technology Mapping for FPGAs using a Fixed Library," </title> <booktitle> IWLS Workshop Notes, </booktitle> <pages> pp. </pages> <address> P9c1-P9c7, </address> <year> 1993. </year>
Reference: [6] <author> D. Hill, </author> <title> "A CAD System for the Design of Field Programmable Gate Arrays," </title> <booktitle> Proc. of the 28th Design Automation Conference, </booktitle> <month> June </month> <year> 1991, </year> <pages> pp. 187-192. </pages>
Reference: [7] <author> Atmel Corp., </author> <title> "AT6000 Series Field Programmable Gate Arrays", </title> <month> August </month> <year> 1993. </year>
Reference-contexts: First, an architecture is broken up into sectors of equal size, typically formed along architectural boundaries within the chip (such as global buses). For example, in the Atmel architecture <ref> [7] </ref> the 56 fi 56 array of cells is broken down into a 7 fi 7 array of sectors, each containing an 8 fi 8 array of cells. Then, a simulated-annealing-based rectilinear partitioning algorithm ([2]) partitions the netlist by making each sector a partition and the sector edges cut lines.
Reference: [8] <institution> Gatefield (a division of Zycad Corp.), "GF100K series DATAbook", </institution> <year> 1994. </year>
Reference-contexts: Although architectures based upon lookup tables are common, there are numerous examples of fine-grained cell architectures that employ combinations of logic gates and multiplexers or switches to achieve higher densities ([7], <ref> [8] </ref>). Some of these architectures have additional constraints, such as logic block inputs that must be obtained from a neighboring block. Quick production of tools that can not only map circuits to such "difficult" architectures but also explore various configurations of logic and routing resources requires a robust development system.
References-found: 8

