URL: http://s2k-ftp.cs.berkeley.edu:8000/postgres/papers/pods97-index.ps.Z
Refering-URL: http://gist.cs.berkeley.edu:8000/gist/gist1.html
Root-URL: http://www.cs.berkeley.edu
Email: jmh@cs.berkeley.edu  elias@cs.ucla.edu  christos@cs.berkeley.edu  
Title: On the Analysis of Indexing Schemes  
Author: Joseph M. Hellerstein Elias Koutsoupias Christos H. Papadimitriou 
Address: UC Berkeley, Berkeley, CA 94720  Los Angeles, CA 90095  UC Berkeley, Berkeley, CA 94720  
Affiliation: Division of Computer Science  Department of Computer Science UCLA,  Division of Computer Science  
Abstract: We consider the problem of indexing general database workloads (combinations of data sets and sets of potential queries). We define a framework for measuring the efficiency of an indexing scheme for a workload based on two characterizations: storage redundancy (how many times each item in the data set is stored), and access overhead (how many times more blocks than necessary does a query retrieve). Using this framework we present some initial results, showing upper and lower bounds and trade-offs between them in the case of multi-dimensional range queries and set queries. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, J. E. Hopcroft, J. D. Ullman. </author> <title> Data Structures and Algorithms. </title> <publisher> Addison Wesley, </publisher> <year> 1983. </year>
Reference-contexts: This important technological parameter, which is usually ignored in the data structures literature, is at center stage in our work. Interestingly, the size of the instance does not enter the statements of our results at all. Related Work There is extensive work on data structures (see, for example, <ref> [16, 1, 29, 19] </ref>), which only occasionally focuses on the external memory aspects of the problem. Work-loads that can be optimized off-line have also been occasionally considered in the data structure literature (see, for example, [31, 12, 21]).
Reference: [2] <author> R. Bayer and C. McCreight. </author> <title> Organization and Maintenance of Large Ordered Indexes. </title> <journal> Acta In-formatica 1(3) </journal> <pages> 173-189, </pages> <year> 1972. </year>
Reference-contexts: 1 Introduction The success and ubiquity of the relational data model arguably owes much to the B-tree, the access method breakthrough that accompanied it with superb timing <ref> [2] </ref>. It seems likely that access methods will continue to play an important role in, and largely determine the viability of, the novel data models currently under intense scrutiny in the database research community.
Reference: [3] <author> A. Belussi and C. Faloutsos. </author> <title> Estimating the Selectivity of Spatial Queries Using the `Correlation' Fractal Dimension. </title> <booktitle> In Proc. 21st International Conference on Very Large Data Bases, </booktitle> <pages> pages 299-310, </pages> <address> Zurich, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Finally, in the database literature there have been analyses (worst case, expected case, or empirical) of many access methods for multi-dimensional searching (see, for example, <ref> [22, 7, 3] </ref>). <p> The fractal dimension has been mentioned as a parameter with some explanatory power in this regard <ref> [7, 3] </ref>; however, this does not address the impact of the set of queries on the performance of indexing schemes. Dynamic and on-line workloads. In this work, we consider only static workloads.
Reference: [4] <author> D. Comer. </author> <title> The Ubiquitous B-Tree. </title> <journal> Computing Surveys, </journal> <volume> 11(2) </volume> <pages> 121-137, </pages> <month> June </month> <year> 1979. </year>
Reference-contexts: Work-loads that can be optimized off-line have also been occasionally considered in the data structure literature (see, for example, [31, 12, 21]). A survey of B-trees and their variants appears in <ref> [4] </ref>; the variant in common use in database systems is the B+-tree, which stores all data in the leaf nodes, and fits our model well. <p> This is clearly a simplification in the case of set workloads, and indeed even in the case of simpler workloads such as those of the B-tree, which typically use "key compression" schemes when possible <ref> [4] </ref>. Even if all items require the same storage, most structures allow some empty space in the blocks. For most index structures, blocks are required to have between B=2 and B items.
Reference: [5] <author> R. A. Finkel and J. L. Bentley. Quad-Trees: </author> <title> A Data Structure For Retrieval On Composite Keys. </title> <journal> Acta Informatica, </journal> <volume> 4(1) </volume> <pages> 1-9, </pages> <year> 1974. </year>
Reference: [6] <author> C. Faloutsos. </author> <title> Searching Multimedia Databases By Content. </title> <publisher> Kluwer Academic, </publisher> <year> 1996. </year>
Reference-contexts: Typically this is done by mapping objects to points in an n-dimensional space (e.g. based on a binary distance function), and mapping "similarity" queries over the objects to range queries or nearest-neighbor queries over the resulting space <ref> [6] </ref>. A similar process of analogy motivates our work: by defining a general framework for studying in-dexability, we can analyze new workloads by showing them to be isomorphic to well-understood workloads. Of course this approach harks back to seminal techniques in complexity theory as well.
Reference: [7] <author> C. Faloutsos and I. Kamel. </author> <title> Beyond Uniformity and Independence: Analysis of R-trees Using the Concept of Fractal Dimension. </title> <booktitle> In Proc. 13th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 4-13, </pages> <address> Minneapo-lis, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Finally, in the database literature there have been analyses (worst case, expected case, or empirical) of many access methods for multi-dimensional searching (see, for example, <ref> [22, 7, 3] </ref>). <p> The fractal dimension has been mentioned as a parameter with some explanatory power in this regard <ref> [7, 3] </ref>; however, this does not address the impact of the set of queries on the performance of indexing schemes. Dynamic and on-line workloads. In this work, we consider only static workloads.
Reference: [8] <author> C. Faloutsos and V. </author> <title> Gaede. Analysis of n-Dimensional Quadtrees using the Hausdorff Fractal Dimension. </title> <booktitle> In Proc. 22nd International Conference on Very Large Data Bases, Mombai(Bombay), </booktitle> <pages> pages 40-50, </pages> <month> September </month> <year> 1996. </year>
Reference: [9] <author> C. Faloutsos, Y. Matias and A. Silberschatz. </author> <title> Modeling Skewed Distribution Using Multifractals and the `80-20' Law. </title> <booktitle> In Proc. 22nd International Conference on Very Large Data Bases, Mom-bai(Bombay), </booktitle> <pages> pages 307-317, </pages> <month> September </month> <year> 1996. </year>
Reference: [10] <author> A. Guttman. R-Trees: </author> <title> A Dynamic Index Structure For Spatial Searching. </title> <booktitle> In Proc. ACM-SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 47-57, </pages> <address> Boston, </address> <month> June </month> <year> 1984. </year>
Reference-contexts: A variety of external memory multidimensional data structures exists, including both hash structures (see, for example, [20]) and tree structures (see, for example, <ref> [10, 28, 24, 18] </ref>). The Generalized Search Tree (GiST) [11] is an extensible data structure which simplifies the development of tree-based indexing schemes. Although our framework for studying indexability is new, there are some previous results that fit into it rather naturally. <p> And third, secondary storage techniques such as buffer management mask and absorb many of these auxiliary cost components. Though our framework is simple, it captures the essence of previous heuristic approaches taken for indexing complex workloads. For example, a common multidimensional index for database systems is the R-tree <ref> [10] </ref>, which has redundancy 1. Three years after the initial R-tree paper, the R+-tree was proposed as an improvement [28]; the main innovation of the R+- tree was (in our terms) to lower access overhead by increasing storage redundancy.
Reference: [11] <author> J. M. Hellerstein, J. F. Naughton and A. Pfeffer. </author> <title> Generalized Search Trees for Database Systems. </title> <booktitle> In Proc. 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: A systems approach to this "generalized indexing" problem has been proposed and implemented <ref> [11] </ref>. The need for theoretical tools for the rigorous analysis of indexing problems was one of the main conclusions of that work. <p> A variety of external memory multidimensional data structures exists, including both hash structures (see, for example, [20]) and tree structures (see, for example, [10, 28, 24, 18]). The Generalized Search Tree (GiST) <ref> [11] </ref> is an extensible data structure which simplifies the development of tree-based indexing schemes. Although our framework for studying indexability is new, there are some previous results that fit into it rather naturally.
Reference: [12] <author> L. Hellerstein, P. Klein, R. Wilber. </author> <title> On the Time-Space Complexity of Reachability Queries for Preprocessed Graphs. </title> <journal> Information Processing Letters, </journal> <volume> 25, </volume> <pages> pages 261-267, </pages> <year> 1990. </year>
Reference-contexts: Related Work There is extensive work on data structures (see, for example, [16, 1, 29, 19]), which only occasionally focuses on the external memory aspects of the problem. Work-loads that can be optimized off-line have also been occasionally considered in the data structure literature (see, for example, <ref> [31, 12, 21] </ref>). A survey of B-trees and their variants appears in [4]; the variant in common use in database systems is the B+-tree, which stores all data in the leaf nodes, and fits our model well.
Reference: [13] <author> S. Irani, A. Karlin. </author> <title> Online Computation. Chapter in Approximation Algorithms for NP-hard Problems, edited by D. </title> <publisher> Hochbaum. PWS Publishing, </publisher> <pages> pages 261-267, </pages> <year> 1996. </year>
Reference-contexts: Our emphasis on the two ratios (storage and access) as the salient performance parameters of an indexing scheme reflects influ ences from the area of on-line algorithms <ref> [13] </ref>. 2 Framework and Definitions In this section, we set out a simple framework for defining an indexing problem, and for measuring the effi ciency of a particular indexing scheme for the problem. 2.1 Workload Access methods must be evaluated in the context of a particular workload. <p> The goal is to minimize the sum of the re-organization cost and the access cost. This on-line problem seems to capture the essence of many practical indexing problems and it will be very interesting to seek competitive algorithms for it <ref> [13] </ref>. Complexity of indexing schemes. Our framework suppresses important aspects of indexing by focusing on the trade-off between redundancy and access overhead. However, it may also help us to refocus our research on the complexity of indexability.
Reference: [14] <author> H. V. Jagadish. </author> <title> Linear Clustering of Objects With Multiple Attributes. </title> <booktitle> In Proc. ACM-SIGMOD International Conference on Management of Data, </booktitle> <address> Atlantic City, </address> <month> May </month> <year> 1990, </year> <pages> pages 332-342. </pages>
Reference: [15] <author> P. C. Kanellakis, S. Ramaswamy, D. E. Vengroff, J. S. Vitter. </author> <title> Indexing for Data Models with Constraints and Classes. </title> <booktitle> In Proc. 12th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 233-243, </pages> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year> <note> (Recent version available from the www.) </note>
Reference-contexts: Although our framework for studying indexability is new, there are some previous results that fit into it rather naturally. Analyses along the lines we are suggesting here have been emerging in the past few years, most notably in the work of the late Paris Kanellakis and his collaborators <ref> [15, 23, 25, 27, 30] </ref>. Most of this work involves upper bounds, and is therefore mainly concerned with the analysis of the searching aspect of the problem. There are two exceptions. <p> Most of this work involves upper bounds, and is therefore mainly concerned with the analysis of the searching aspect of the problem. There are two exceptions. First, in a recent version of <ref> [15] </ref> there is an argument (proof of Lemma 2.7) that anticipates our Theorem 1, namely, that the access overhead must be p B in the special case in which the blocks are restricted to be rectangular. <p> The result below was implicitly shown for the special case when the blocks are restricted to be rectangular, in <ref> [15] </ref>. Theorem 1 Any indexing scheme of redundancy 1 for 2-dimensional range queries has access overhead at least B 2 . For the d-dimensional case, the lower bound is B 1 1 Sketch of proof. We only sketch the 2-dimensional case, the general case being a straightforward generalization.
Reference: [16] <author> D. E. Knuth. </author> <title> The Art of Computer Programming; Volume III: Searching and Sorting. </title> <publisher> Addison Wes-ley, </publisher> <year> 1973. </year>
Reference-contexts: This important technological parameter, which is usually ignored in the data structures literature, is at center stage in our work. Interestingly, the size of the instance does not enter the statements of our results at all. Related Work There is extensive work on data structures (see, for example, <ref> [16, 1, 29, 19] </ref>), which only occasionally focuses on the external memory aspects of the problem. Work-loads that can be optimized off-line have also been occasionally considered in the data structure literature (see, for example, [31, 12, 21]).
Reference: [17] <author> L. Lovasz. </author> <title> Combinatorial Problems and Exercises. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1979. </year>
Reference-contexts: The redundant case To prove a lower bound for the case in which redun dancy is allowed to be greater than one, we will use an interesting result from extremal set theory. A similar result is given as exercise 13.3 in <ref> [17] </ref>, attributed to K. Corradi; it is also apparently known in coding theory as Johnson's Lemma (Z. Furedi, private communication).
Reference: [18] <author> D. B. Lomet and B. Salzberg. </author> <title> The hB-Tree: A Multiattribute Indexing Method. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(4), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: A variety of external memory multidimensional data structures exists, including both hash structures (see, for example, [20]) and tree structures (see, for example, <ref> [10, 28, 24, 18] </ref>). The Generalized Search Tree (GiST) [11] is an extensible data structure which simplifies the development of tree-based indexing schemes. Although our framework for studying indexability is new, there are some previous results that fit into it rather naturally.
Reference: [19] <author> K. Mehlhorn. </author> <title> Data Structures and Algorithms 3: Multidimensional Searching and Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1984. </year>
Reference-contexts: This important technological parameter, which is usually ignored in the data structures literature, is at center stage in our work. Interestingly, the size of the instance does not enter the statements of our results at all. Related Work There is extensive work on data structures (see, for example, <ref> [16, 1, 29, 19] </ref>), which only occasionally focuses on the external memory aspects of the problem. Work-loads that can be optimized off-line have also been occasionally considered in the data structure literature (see, for example, [31, 12, 21]). <p> The question of lower bounds in multi-dimensional searching has been addressed in <ref> [19] </ref>, without, however, our emphasis on block accesses. Lower bounds for multidimensional searching are also studied in [26], where the bounds are derived in a model involving binary trees with certain further restrictions; the block size is considered in that paper as a function of n, the number of points.
Reference: [20] <author> J. Nievergelt, H. Hinterberger, and K. C. Sevcik. </author> <title> The Grid File: An Adaptable, Symmetric Multikey File Structure. </title> <journal> ACM Transactions On Database Systems, </journal> <volume> 9(1) </volume> <pages> 38-71, </pages> <year> 1984. </year>
Reference-contexts: A variety of external memory multidimensional data structures exists, including both hash structures (see, for example, <ref> [20] </ref>) and tree structures (see, for example, [10, 28, 24, 18]). The Generalized Search Tree (GiST) [11] is an extensible data structure which simplifies the development of tree-based indexing schemes. Although our framework for studying indexability is new, there are some previous results that fit into it rather naturally.
Reference: [21] <author> M. H. Nodine, M. T. Goodrich, and J. S. Vitter. </author> <title> Blocking for External Graph Searching. </title> <journal> Algorith-mica, </journal> <volume> 16 </volume> (2):181-214, August 1996. 
Reference-contexts: Related Work There is extensive work on data structures (see, for example, [16, 1, 29, 19]), which only occasionally focuses on the external memory aspects of the problem. Work-loads that can be optimized off-line have also been occasionally considered in the data structure literature (see, for example, <ref> [31, 12, 21] </ref>). A survey of B-trees and their variants appears in [4]; the variant in common use in database systems is the B+-tree, which stores all data in the leaf nodes, and fits our model well.
Reference: [22] <author> B.-U. Pagel, H.-W. Six, H. Toben, and P. Wid-mayer. </author> <title> Towards an Analysis of Range Query Performance in Spatial Data Structures. </title> <booktitle> In Proc. 12th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 214-221, </pages> <address> Washington, D. C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Finally, in the database literature there have been analyses (worst case, expected case, or empirical) of many access methods for multi-dimensional searching (see, for example, <ref> [22, 7, 3] </ref>).
Reference: [23] <author> S. Ramaswamy, P. C. Kanellakis. </author> <title> OODB Indexing by Class Division. </title> <booktitle> In Proc. 12th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 233-243, </pages> <year> 1993. </year>
Reference-contexts: Although our framework for studying indexability is new, there are some previous results that fit into it rather naturally. Analyses along the lines we are suggesting here have been emerging in the past few years, most notably in the work of the late Paris Kanellakis and his collaborators <ref> [15, 23, 25, 27, 30] </ref>. Most of this work involves upper bounds, and is therefore mainly concerned with the analysis of the searching aspect of the problem. There are two exceptions.
Reference: [24] <author> J. T. Robinson. </author> <title> The k-D-B-Tree: A Search Structure for Large Multidimensional Dynamic Indexes. </title> <booktitle> In Proc. ACM-SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 10-18, </pages> <address> Ann Arbor, </address> <month> April/May </month> <year> 1981. </year>
Reference-contexts: A variety of external memory multidimensional data structures exists, including both hash structures (see, for example, [20]) and tree structures (see, for example, <ref> [10, 28, 24, 18] </ref>). The Generalized Search Tree (GiST) [11] is an extensible data structure which simplifies the development of tree-based indexing schemes. Although our framework for studying indexability is new, there are some previous results that fit into it rather naturally.
Reference: [25] <author> S. Ramaswamy, S. Subramanian. </author> <title> Path Caching: </title>
Reference-contexts: Although our framework for studying indexability is new, there are some previous results that fit into it rather naturally. Analyses along the lines we are suggesting here have been emerging in the past few years, most notably in the work of the late Paris Kanellakis and his collaborators <ref> [15, 23, 25, 27, 30] </ref>. Most of this work involves upper bounds, and is therefore mainly concerned with the analysis of the searching aspect of the problem. There are two exceptions.
References-found: 25

