URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3811/3811.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: Laurent.Amsaleg@irisa.fr  franklin@cs.umd.edu  Anthony.Tomasic@inria.fr  
Author: Michael J. Franklin Anthony Tomasic 
Keyword: Dynamic Query Operator Scheduling for Wide-Area Remote Access Laurent Amsaleg  Keywords: distributed query processing, mediators, iterator execution model, performance analysis, query scrambling, dynamic query optimization  
Date: October 22, 1997  
Affiliation: IRISA INRIA  University of Maryland  INRIA  
Abstract: University of Maryland Technical Report CS-TR-3811 and UMIACS-TR-97-54 Abstract Distributed databases operating over wide-area networks such as the Internet, must deal with the unpredictable nature of the performance of communication. The response times of accessing remote sources can vary widely due to network congestion, link failure, and other problems. In such an unpredictable environment, the traditional iterator-based query execution model performs poorly. We have developed a class of methods, called query scrambling, for dealing explicitly with the problem of unpredictable response times. Query scrambling dynamically modifies query execution plans on-the-fly in reaction to unexpected delays in data access. In this paper we focus on the dynamic scheduling of query operators in the context of query scrambling. We explore various choices for dynamic scheduling and examine, through a detailed simulation, the effects of these choices. Our experimental environment considers pipelined and non-pipelined join processing in a client with multiple remote data sources and delayed or possibly bursty arrivals of data. Our performance results show that scrambling rescheduling is effective in hiding the impact of delays on query response time for a number of different delay scenarios. 
Abstract-found: 1
Intro-found: 1
Reference: [ACPS96] <author> S. Adali, K. Candan, Y. Papakonstantinou, and V. Subrahmanian. </author> <title> Query caching and optimization in distributed mediator systems. </title> <booktitle> In Proc. of the ACM SIGMOD Int. Conf., </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year>
Reference-contexts: In general, methods that attack poor run-time performance for queries fall into two broad categories: proactive and reactive. Proactive methods (e.g., <ref> [ACPS96, CG94, SAL + 96] </ref>) attempt at compile-time to predict the behavior of query execution and plan ahead for possible contingencies. These approaches use a form of late binding in order to postpone making certain execution choices until the state of the system can be assessed at run-time. <p> Volcano [CG94, Gra93] introduces at optimization time choose-plan operators in the query tree that enable the selection of a particular query execution plan at runtime once enough information has been gathered. HERMES <ref> [ACPS96] </ref> records the costs of remote accesses into an history used to better estimate the costs of future accesses. Mariposa [SAL + 96] builds query plans after having negotiated a price-performance trade-off with data providers.
Reference: [AFT96] <author> Laurent Amsaleg, Michael J. Franklin, and Anthony Tomasic. </author> <title> Query scrambling for bursty data arrival. </title> <type> Technical Report UMCP-CSD CS-TR-3714, </type> <institution> University of Maryland, College Park, Maryland, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: The scheduler's objective is to maximize the overall system throughput. As stated in Section 1, the work described here builds on our initial definition of Query Scrambling [AFTU96]. Additional experimental results are also available in reference <ref> [AFT96, pages 11-21] </ref>. 8 Conclusions Query scrambling is a reactive technique for coping with unpredictable delays for wide-area remote data access. Query scrambling, in its most general sense, monitors query execution and reacts to delays by on-the-fly rescheduling query operators and possibly synthesizing new operators to run.
Reference: [AFTU96] <author> L. Amsaleg, M. Franklin, A. Tomasic, and T. Urhan. </author> <title> Scrambling query plans to cope with unexpected delays. </title> <booktitle> In Proc. of the Int. Conf. on Parallel and Distributed Information Systems (PDIS), </booktitle> <address> Miami Beach, Florida, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: That is, a query can execute in the presence of certain delays with little or no response time penalty observable to the user. 1.1 Coping With Bursty Arrival In a previous paper <ref> [AFTU96] </ref>, we identified three types of delay that can arise when requesting data from remote sources: Initial Delay There is an unexpected delay in the arrival of the first tuple from a particular remote source. <p> Bursty Arrival Data is arriving at an unpredictable rate, typically with bursts of data followed by long periods of no arrivals. This problem can arise from fluctuating resource demands and the lack of a global scheduling mechanism in the wide-area environment. The algorithm presented in <ref> [AFTU96] </ref> focused on the problem of Initial Delay. As such, it was assumed that once data started to arrive from a remote source, the remaining data from that source would arrive in an uninterrupted fashion. <p> The scheduler's objective is to maximize the overall system throughput. As stated in Section 1, the work described here builds on our initial definition of Query Scrambling <ref> [AFTU96] </ref>. Additional experimental results are also available in reference [AFT96, pages 11-21]. 8 Conclusions Query scrambling is a reactive technique for coping with unpredictable delays for wide-area remote data access.
Reference: [Ant93] <author> G. Antoshenkov. </author> <title> Dynamic query optimization in Rdb/VMS. </title> <booktitle> In Proc. of the Data Engineering Int. Conf., </booktitle> <pages> pages 538-547, </pages> <address> Vienna, Austria, </address> <year> 1993. </year>
Reference-contexts: These approaches use a form of late binding in order to postpone making certain execution choices until the state of the system can be assessed at run-time. Typically the binding is done immediately prior to executing the compiled plan, and remains fixed for the entire execution. Reactive methods (e.g., <ref> [TTC + 90, Ant93, ONK + 96] </ref>) monitor the behavior of the run-time system during query execution. When a significant event is detected, the run-time system reacts to the event. Query scrambling is a reactive approach | the query execution is changed on-the-fly in response to run-time events. <p> A similar approach is used in Rdb/VMS <ref> [Ant93] </ref>. Both InterViso [TTC + 90] and MOOD [ONK + 96] are heterogeneous distributed databases that perform query optimization while the query is executing. Heterogeneous distributed database divide a query into a collection of subqueries and a composition query.
Reference: [BE96] <author> O. Bukhres and A. Elmagarmid. </author> <title> Object-Oriented Multidatabase Systems. </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction The continued dramatic growth in global interconnectivity via the Internet has made around-the-clock, on demand access to widely-distributed data a common expectation for many computer users. At present, such access is typically obtained through non-database facilities such as the World-Wide-Web. Advances in distributed heterogeneous databases (e.g., <ref> [Kim95, SAD + 95, BE96, TRV96] </ref>) and other non-traditional approaches (e.g., WebSQL [MMM96]), however, aim to make the Internet a viable and important platform for distributed database technology. The Internet environment presents many interesting problems for database systems.
Reference: [BMG93] <author> J. Blakeley, W. McKenna, and G. Graefe. </author> <title> Experiences building the open OODB query optimizer. </title> <booktitle> In Proc. of the ACM SIGMOD Int. Conf., </booktitle> <pages> page 287, </pages> <address> Washington, DC, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: types of policy decisions that must be made with respect to the extent of scrambling: i) where in the tree to initiate scrambling; and ii) how many scrambling operations should be initiated. 2 This notion of a materialization operator is not related to the operator for path expressions described in <ref> [BMG93] </ref>. 6 For the first question, we consider two options: i) early initiation of a non-leaf operator in the plan; and ii) early retrieval of data from a remote source. The first case, initiating a non-leaf operator, requires the scrambling system to artificially call open () on that operator.
Reference: [BRJ89] <author> P. Bodorik, J. Riordon, and C. Jacob. </author> <title> Dynamic distributed query processing techniques. </title> <booktitle> In Proc. of the 17th annual ACM Computer Science Conf., </booktitle> <pages> pages 348-357, </pages> <address> Louisville, Kentucky, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: Reasons include inaccurate estimates for intermediate result sizes and direct considerations of problems with response times from remote sources are not accounted for. <ref> [BRJ89] </ref> proposes a reactive technique in which the execution of a distributed query proceeds through three phases: (i) a monitoring phase observing the progress of the execution of the query; (ii) a decision making phase during which a new strategy for executing the query is computed; and (iii) a corrective phase
Reference: [Bro92] <author> K. Brown. Prpl: </author> <title> A database workload specification language. </title> <type> Master's thesis, </type> <institution> University of Winsconsin, Madison, Winsconsin, </institution> <year> 1992. </year>
Reference-contexts: Disks are modeled using a detailed characterization and settings adapted from the ZetaSim model <ref> [Bro92] </ref>. The disk model includes costs for random and sequential physical accesses and also charges for software operations implementing I/Os. The unit of disk I/O for the database is pages of size DskPageSize. The disks prefetch pages when reads are performed.
Reference: [CDF + 94] <author> M. Carey, D. DeWitt, M. Franklin, N. Hall, M. McAuliffe, J. Naughton, D. Schuh, M. Solomon, C. Tan, O. Tsatalos, S. White, and M. Zwilling. </author> <title> Shoring up persistent applications. </title> <booktitle> In Proc. of the ACM SIGMOD Int. Conf., </booktitle> <address> Minneapolis, Minnesota, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: page from disk Table 2: Simulation Parameters and Main Settings 5.1 Simulation Environment To study the performance of scrambling rescheduling, we implemented the scrambling architecture of Section 3 and the policies described in Section 4 on top an existing simulator that models a heterogeneous, peer-to-peer database system such as SHORE <ref> [CDF + 94] </ref>. The simulator we used provides a detailed model of query processing costs in such a system. Here, we briefly describe the simulator, focusing on the aspects that are pertinent to our experiments. More detailed descriptions of the simulator can be found in [FJK96, DFJ + 96].
Reference: [CG94] <author> R. Cole and G. Graefe. </author> <title> Optimization of dynamic query execution plans. </title> <booktitle> In Proc. of the ACM SIGMOD Int. Conf., </booktitle> <pages> pages 150-160, </pages> <address> Minneapolis, Minnesota, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: In general, methods that attack poor run-time performance for queries fall into two broad categories: proactive and reactive. Proactive methods (e.g., <ref> [ACPS96, CG94, SAL + 96] </ref>) attempt at compile-time to predict the behavior of query execution and plan ahead for possible contingencies. These approaches use a form of late binding in order to postpone making certain execution choices until the state of the system can be assessed at run-time. <p> Materializations can be added to the plan by placing a materialization operator between 1 Note that this blocking phenomenon arises even if operators are ones that support intra-operator parallelism such the exchange operator of Volcano <ref> [CG94] </ref>. 5 the re-scheduled operator and its parent. 2 A materialization operator is a unary operator, which when opened, obtains the entire input from its child and places it in storage (typically disk, unless there is sufficient memory). <p> In the proactive category, the techniques gather as much information as possible to predict the state of the run-time system during query execution and use this information to construct the best query execution plan. Volcano <ref> [CG94, Gra93] </ref> introduces at optimization time choose-plan operators in the query tree that enable the selection of a particular query execution plan at runtime once enough information has been gathered. HERMES [ACPS96] records the costs of remote accesses into an history used to better estimate the costs of future accesses.
Reference: [DFJ + 96] <author> S. Dar, M. Franklin, B. Jonsson, D. Srivastava, and M. Tan. </author> <title> Semantic data caching and replacement. </title> <booktitle> In Proc. of the 22th VLDB Int. Conf, </booktitle> <address> Bombay, India, </address> <month> September </month> <year> 1996. </year> <month> 27 </month>
Reference-contexts: The simulator we used provides a detailed model of query processing costs in such a system. Here, we briefly describe the simulator, focusing on the aspects that are pertinent to our experiments. More detailed descriptions of the simulator can be found in <ref> [FJK96, DFJ + 96] </ref>. Table 2 shows the main parameters for configuring the simulator, and the settings used for this study. Every site has a CPU whose speed is specified by the Mips parameter, NumDisks disks, and a main-memory buffer pool of size Memory.
Reference: [FJK96] <author> M. Franklin, B. Jonsson, and D. Kossmann. </author> <title> Performance tradeoffs for client-server query pro-cessing. </title> <booktitle> In Proc. of the ACM SIGMOD Int. Conf., </booktitle> <address> Montreal, Canada, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: In this article, we focus on query processing using a data-shipping or hybrid-shipping approach <ref> [FJK96] </ref>, where data is ultimately collected from remote sources and integrated at the query source. This approach models remote data access and is also typical of mediated database systems that integrate data from distributed, heterogeneous sources, (e.g., [TRV96]). <p> The simulator we used provides a detailed model of query processing costs in such a system. Here, we briefly describe the simulator, focusing on the aspects that are pertinent to our experiments. More detailed descriptions of the simulator can be found in <ref> [FJK96, DFJ + 96] </ref>. Table 2 shows the main parameters for configuring the simulator, and the settings used for this study. Every site has a CPU whose speed is specified by the Mips parameter, NumDisks disks, and a main-memory buffer pool of size Memory.
Reference: [Gra93] <author> G. Graefe. </author> <title> Query evaluation techniques for large databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 25(2) </volume> <pages> 73-170, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: We examine several sets of policies to control scrambling rescheduling, and we describe the architecture of a run-time scheduler that is capable of implementing these policies. We then use a detailed simulation of a run-time system based on the iterator query processing model <ref> [Gra93] </ref> in order to examine the tradeoffs of the various scrambling policies for both 3 pipelined and non-pipelined execution. In this article, we focus on query processing using a data-shipping or hybrid-shipping approach [FJK96], where data is ultimately collected from remote sources and integrated at the query source. <p> The iterator 4 model is one way to structure such an execution engine <ref> [Gra93] </ref>. In this model, each node of the query tree is an iterator. Iterators support three different calls: open () to prepare an operator for producing data; next () to produce a single tuple, and close () to perform final housekeeping. <p> In the proactive category, the techniques gather as much information as possible to predict the state of the run-time system during query execution and use this information to construct the best query execution plan. Volcano <ref> [CG94, Gra93] </ref> introduces at optimization time choose-plan operators in the query tree that enable the selection of a particular query execution plan at runtime once enough information has been gathered. HERMES [ACPS96] records the costs of remote accesses into an history used to better estimate the costs of future accesses.
Reference: [Kim95] <author> W. Kim. </author> <title> Modern Database Systems: The Object Model, Interoperability, and Beyond. </title> <publisher> ACM Press, </publisher> <address> New York, NY, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction The continued dramatic growth in global interconnectivity via the Internet has made around-the-clock, on demand access to widely-distributed data a common expectation for many computer users. At present, such access is typically obtained through non-database facilities such as the World-Wide-Web. Advances in distributed heterogeneous databases (e.g., <ref> [Kim95, SAD + 95, BE96, TRV96] </ref>) and other non-traditional approaches (e.g., WebSQL [MMM96]), however, aim to make the Internet a viable and important platform for distributed database technology. The Internet environment presents many interesting problems for database systems.
Reference: [MMM96] <author> A. Mendelzon, G. Mihaila, and T. Milo. </author> <title> Querying the world wide web. </title> <booktitle> In Proc. of the Int. Conf. on Parallel and Distribution Information Systems (PDIS), </booktitle> <address> Miami Beach, Florida, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: At present, such access is typically obtained through non-database facilities such as the World-Wide-Web. Advances in distributed heterogeneous databases (e.g., [Kim95, SAD + 95, BE96, TRV96]) and other non-traditional approaches (e.g., WebSQL <ref> [MMM96] </ref>), however, aim to make the Internet a viable and important platform for distributed database technology. The Internet environment presents many interesting problems for database systems.
Reference: [ONK + 96] <author> F. Ozcan, S. Nural, P. Koksal, C. Evrendilek, and A. Dogac. </author> <title> Dynamic query optimization on a distributed object management platform. </title> <booktitle> In Conference on Information and Knowledge Management, </booktitle> <address> Baltimore, Maryland, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: These approaches use a form of late binding in order to postpone making certain execution choices until the state of the system can be assessed at run-time. Typically the binding is done immediately prior to executing the compiled plan, and remains fixed for the entire execution. Reactive methods (e.g., <ref> [TTC + 90, Ant93, ONK + 96] </ref>) monitor the behavior of the run-time system during query execution. When a significant event is detected, the run-time system reacts to the event. Query scrambling is a reactive approach | the query execution is changed on-the-fly in response to run-time events. <p> A similar approach is used in Rdb/VMS [Ant93]. Both InterViso [TTC + 90] and MOOD <ref> [ONK + 96] </ref> are heterogeneous distributed databases that perform query optimization while the query is executing. Heterogeneous distributed database divide a query into a collection of subqueries and a composition query. There is one subquery for each remote source and a composition query than combines the results of the subqueries.
Reference: [SAD + 95] <author> M. Shan, R. Ahmen, J. Davis, W. Du, and W. Kent. </author> <title> Modern Database Systems: The Object Model, Interoperability, and Beyond, chapter Pegasus: A Heterogeneous Information Management System. </title> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction The continued dramatic growth in global interconnectivity via the Internet has made around-the-clock, on demand access to widely-distributed data a common expectation for many computer users. At present, such access is typically obtained through non-database facilities such as the World-Wide-Web. Advances in distributed heterogeneous databases (e.g., <ref> [Kim95, SAD + 95, BE96, TRV96] </ref>) and other non-traditional approaches (e.g., WebSQL [MMM96]), however, aim to make the Internet a viable and important platform for distributed database technology. The Internet environment presents many interesting problems for database systems.
Reference: [SAL + 96] <author> M. Stonebraker, P. Aoki, W. Litwin, A. Pfeffer, A. Sah, J. Sidell, C. Staelin, and A. Yu. Mariposa: </author> <title> A wide-area distributed database system. </title> <journal> The VLDB Journal, </journal> <volume> 5(1) </volume> <pages> 48-63, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: In general, methods that attack poor run-time performance for queries fall into two broad categories: proactive and reactive. Proactive methods (e.g., <ref> [ACPS96, CG94, SAL + 96] </ref>) attempt at compile-time to predict the behavior of query execution and plan ahead for possible contingencies. These approaches use a form of late binding in order to postpone making certain execution choices until the state of the system can be assessed at run-time. <p> HERMES [ACPS96] records the costs of remote accesses into an history used to better estimate the costs of future accesses. Mariposa <ref> [SAL + 96] </ref> builds query plans after having negotiated a price-performance trade-off with data providers. All these approaches ultimately decide at query start-up time the execution plan of a query, which however remains fixed for the whole duration of the query execution.
Reference: [SS96] <author> S. Sarawagi and M. Stonebraker. </author> <title> Reordering execution in tertiary memory databases. </title> <booktitle> In VLDB, </booktitle> <address> Bombay, India, </address> <year> 1996. </year>
Reference-contexts: A technique similar in spirit to scrambling rescheduling is used to improve the access time to tertiary storage in <ref> [SS96] </ref>.
Reference: [Tra95] <institution> Transaction Processing Performance Council (TPC). TPC Benchmark D (Decision Support), </institution> <month> May </month> <year> 1995. </year> <title> Standard Specification, Revision 1.0. </title>
Reference-contexts: The experiments use a simplification of the query Q2 of the TPC-D benchmark <ref> [Tra95] </ref>. We chose this query because it is relatively simple, yet processes a five-way join.
Reference: [TRV96] <author> A. Tomasic, L. Raschid, and P. Valduriez. </author> <title> Scaling heterogeneous databases and the design of DISCO. </title> <booktitle> In The IEEE Int. Conf. on Distributed Computing Systems (ICDCS-16), </booktitle> <address> Hong Kong, </address> <year> 1996. </year>
Reference-contexts: 1 Introduction The continued dramatic growth in global interconnectivity via the Internet has made around-the-clock, on demand access to widely-distributed data a common expectation for many computer users. At present, such access is typically obtained through non-database facilities such as the World-Wide-Web. Advances in distributed heterogeneous databases (e.g., <ref> [Kim95, SAD + 95, BE96, TRV96] </ref>) and other non-traditional approaches (e.g., WebSQL [MMM96]), however, aim to make the Internet a viable and important platform for distributed database technology. The Internet environment presents many interesting problems for database systems. <p> This approach models remote data access and is also typical of mediated database systems that integrate data from distributed, heterogeneous sources, (e.g., <ref> [TRV96] </ref>). In this work, the remote sources are treated as black boxes, regardless of whether they provide raw data or the answers to subqueries. Only the query processing that is performed at the query source is subject to scrambling.
Reference: [TTC + 90] <author> G. Thomas, G. Thompson, C. Chung, E. Barkmeyer, F. Carter, M. Templeton, S. Fox, and B. Hartman. </author> <title> Heterogeneous distributed database systems for product use. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3), </volume> <year> 1990. </year> <month> 28 </month>
Reference-contexts: These approaches use a form of late binding in order to postpone making certain execution choices until the state of the system can be assessed at run-time. Typically the binding is done immediately prior to executing the compiled plan, and remains fixed for the entire execution. Reactive methods (e.g., <ref> [TTC + 90, Ant93, ONK + 96] </ref>) monitor the behavior of the run-time system during query execution. When a significant event is detected, the run-time system reacts to the event. Query scrambling is a reactive approach | the query execution is changed on-the-fly in response to run-time events. <p> A similar approach is used in Rdb/VMS [Ant93]. Both InterViso <ref> [TTC + 90] </ref> and MOOD [ONK + 96] are heterogeneous distributed databases that perform query optimization while the query is executing. Heterogeneous distributed database divide a query into a collection of subqueries and a composition query.
References-found: 22

