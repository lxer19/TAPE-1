URL: ftp://ftp.cs.unc.edu/pub/users/jeffay/papers/RTSS-92.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/real-time.html
Root-URL: http://www.cs.unc.edu
Email: jeffay@cs.unc.edu  
Title: Scheduling Sporadic Tasks with Shared Resources in Hard-Real-Time Systems a resource is never accessed by
Author: Kevin Jeffay 
Address: Chapel Hill, NC 27599-3175  
Affiliation: University of North Carolina at Chapel Hill Department of Computer Science  
Date: December 1992, pp. 89-99.  
Note: In: Proceedings of the 13 th IEEE Real-Time Systems Symposium, Phoenix, AZ,  1 Introduction  
Abstract: The problem of scheduling a set of sporadic tasks that share a set of serially reusable, single unit software resources on a single processor is considered. The correctness conditions are that (1) each invocation of each task completes execution at or before a well-defined deadline, and (2) a resource is never accessed by more than one task simultaneously. We present an optimal online algorithm for scheduling a set of sporadic tasks. The algorithm results from the integration of a synchronization scheme for access to shared resources with the earliest deadline first algorithm. A set of relations on task parameters that are necessary and sufficient for a set of tasks to be schedulable is also derived. Our model for the analysis of processor scheduling policies is novel in that it incorporates minimum as well as maximum processing time requirements of tasks. The scheduling algorithm and the sporadic tasking model have been incorporated into an operating system Hard-real-time systems are commonly structured as a set of tasks that are invoked repetitively. Two frequently studied classes of repetitive tasks are periodic tasks, i.e., tasks that are invoked at constant intervals [16], and sporadic tasks, i.e., tasks that are invoked at random but with a minimum inter-invocation interval [17]. In both cases, each invocation of a task must complete execution before a well-defined deadline. Our contribution to the study of repetitive, real-time workloads is the consideration of tasks that share a set of serially reusable resources. Our notion of a resource is a software object, e.g., a data structure, that is shared among a group of tasks and must be accessed in a mutually exclusive manner. Operations on a shared resource therefore constitute a critical section. For example, within the context of a concurrent programming language in which shared data is encapsulated within a monitor [14], a resource would be an individual monitor. We consider a characterization of a hard-real-time system as a set of sporadic tasks that share a set of serially reusable software resources. This paper examines the prob * Supported by a grant from the National Science Foundation (number CCR-9110938). lem of scheduling sporadic tasks that require exclusive access to a set of software resources. The problem is to sequence a set of sporadic tasks on a uniprocessor such that in all cases it is guaranteed that: each invocation of each task completes execution at or before its deadline, and Our work makes two contributions to the theory of real-time scheduling and resource allocation. The first is the development of an online algorithm for sequencing a set of sporadic tasks on a uniprocessor such that the above criteria are met. The algorithm results from the integration of a synchronization scheme for access to shared resources with the earliest deadline first algorithm of Liu and Layland; a preemptive, priority-driven scheduling algorithm with dynamic priority assignment [16]. The algorithm is optimal with respect to the class of scheduling policies that do not use inserted idle time [6]. The algorithm is optimal in the sense that it can schedule a set of tasks, without inserted idle time, whenever it will be possible to do so. The second contribution is a derivation of a set of relations on task parameters that are necessary and sufficient for a set of tasks to be schedulable. With these conditions one can efficiently decide whether it will be possible to schedule a set of tasks without executing or simulating the execution of the tasks. Our model for the analysis of processor scheduling policies is novel in that it incorporates minimum as well as maximum processing time requirements of tasks. This work is part of a larger design system for hard-real-time systems. The online scheduling algorithm we develop has been implemented in the YARTOS operating system kernel [9,12] and the sporadic tasking model we present has been used to implement and analyze several fully functional real-time systems. These include a workstation-based conferencing system using digital audio and video [8], an interactive 3-dimensional graphics display system used for research in virtual realities [5], and a HiPPI data link controller [2]. Several approaches to scheduling real-time tasks that share resources have been described in the literature [3,4,10,15,17-21]. Most consider the case where tasks are periodic and develop heuristic algorithms for scheduling the tasks. The model we present is simpler than many previously considered, however, for this model we are able to kernel and used to implement several real-time systems.
Abstract-found: 1
Intro-found: 1
References-found: 0

