URL: http://www.cs.washington.edu/homes/egs/papers/m3os.ps
Refering-URL: http://www.cs.washington.edu/homes/egs/
Root-URL: http://www.cs.washington.edu
Title: Writing an Operating System with Modula-3  
Author: Emin Gun Sirer Stefan Savage Przemys law Pardyak Greg P. DeFouw Brian N. Bershad 
Date: November 3, 1995  
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract-found: 0
Intro-found: 1
Reference: [AEL88] <author> Andrew W. Appel, John R. Ellis, and Kai Li. </author> <title> Real-time concurrent collection on stock multiprocessors. </title> <booktitle> In Proceedings of ACM SIGPLAN '88 Conf. on Programming Language Design and Implementation, </booktitle> <month> June </month> <year> 1988. </year>
Reference-contexts: A typical collection takes about 100 ms. on our platform, which introduces perceptible delays into the system. We are dealing with the collector overhead in two ways. The first is to use a better collector. We are examining concurrent and incremental garbage collection techniques <ref> [SG95, AEL88] </ref> to reduce disruptive system pauses. While a better collector can reduce the pause times, it will not directly address the overhead problem. If garbage is created, there is going to be a penalty to clean it up.
Reference: [BSP + 95] <author> Brian N. Bershad, Stefan Savage, Przemyslaw Pardyak, Emin G n Sirer, Marc Fiuczynski, David Becker, Susan Eggers, and Craig Chambers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: 1 Introduction We are using Modula-3 to write an operating system called SPIN at the University of Washington <ref> [BSP + 95] </ref>. Modula-3 is an ALGOL-like typesafe, high-level programming language that supports interfaces, objects, threads, exceptions, garbage collection, and generic interfaces. <p> We were able to strip out 25% of the runtime simply by identifying those portions which were not needed by the operating system. We also created a dynamic linking facility <ref> [BSP + 95, SFPB96] </ref> that eliminates multiple copies of the runtime by allowing clients access to shared code and data. <p> As part of the initial development of our kernel, we reimplemented the Modula-3 thread, scheduler and synchronization services directly on top of a lightweight kernel threading interface called strands <ref> [BSP + 95] </ref>. The strands interface allows thread packages and schedulers to be tightly integrated with each other as well as with their clients.
Reference: [Gro95] <author> Cecil Group. </author> <title> UW Vortex Compiler, An Optimizing Compiler for Object-Oriented Languages. </title> <note> http://www.cs.washington.edu/research/projects/cecil/www/cecil-home.html, December 1995. </note>
Reference-contexts: Table 1, for example, illustrates the difference in code quality that results when using different compilers to generate semantically equivalent executables. The table shows the execution time of the MD-5 digital signature algorithm implemented in Modula-3 using the DEC SRC compiler and the Vortex research compiler <ref> [Gro95] </ref> being developed at the University of Washington. We also measured the execution time of the same program written in C and compiled with GCC. The C version included no explicit runtime array bounds checks, and we also compiled the Modula-3 version without bounds checking.
Reference: [Gup90] <author> Rajiv Gupta. </author> <title> A fresh look at optimizing array bound checking. </title> <journal> SIGPLAN Notices, </journal> <volume> 25(6) </volume> <pages> 272-282, </pages> <month> June </month> <year> 1990. </year> <booktitle> In &lt;italic&gt;Proceedings of the ACM SIGPLAN '90 Conference on Programming Language Design and Implementation&lt;noitalic&gt;. </booktitle>
Reference-contexts: As mentioned in the introduction, this is not an issue with the language, but with the implementation of the language. Techniques to eliminate unnecessary range checks are well-known within the compiler community <ref> [Gup90, Gup93, KW95] </ref>, and are clearly applicable to Modula-3. For example, when we apply the bounds checking optimizations within the Vortex compiler, MD-5 execution time with bounds checking enabled goes from 27.6 seconds to 23 seconds.
Reference: [Gup93] <author> Rajiv Gupta. </author> <title> Optimizing array bounds checks using flow analysis. </title> <journal> ACM Letters on Programming Languages and Systems, </journal> <volume> 2(1) </volume> <pages> 135-150, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: As mentioned in the introduction, this is not an issue with the language, but with the implementation of the language. Techniques to eliminate unnecessary range checks are well-known within the compiler community <ref> [Gup90, Gup93, KW95] </ref>, and are clearly applicable to Modula-3. For example, when we apply the bounds checking optimizations within the Vortex compiler, MD-5 execution time with bounds checking enabled goes from 27.6 seconds to 23 seconds.
Reference: [HFC + 96] <author> W.C. Hsieh, M.E. Fiuczynsko, C.Garrett, S.Savage, D.Becker, and B.N. Bershad. </author> <title> Language Support for Extensible Systems. </title> <booktitle> Submitted to the First Workshop on Compiler Support for Systems Software, </booktitle> <month> November </month> <year> 1996. </year>
Reference-contexts: For example, the language does not allow for safe casting operations, whereby a data structure is represented as a union of possible types, even though the cast would not create a situation that might result in a possible unchecked runtime error. In a companion paper <ref> [HFC + 96] </ref> we describe some of the changes that we have made to the language and its compiler in order to satisfy these types of problems. 2 Evaluating the concerns We discuss the major concerns about Modula-3 from several angles.
Reference: [KW95] <author> Priyadarshan Kolte and Michael Wolfe. </author> <title> Elimination of redundant array subscript range checks. </title> <journal> SIGPLAN Notices, </journal> <pages> pages 270-278, </pages> <month> June </month> <year> 1995. </year> <booktitle> In &lt;italic&gt;Proceedings of the ACM SIGPLAN '95 Conference on Programming Language Design and Implementation&lt;noitalic&gt;. </booktitle>
Reference-contexts: As mentioned in the introduction, this is not an issue with the language, but with the implementation of the language. Techniques to eliminate unnecessary range checks are well-known within the compiler community <ref> [Gup90, Gup93, KW95] </ref>, and are clearly applicable to Modula-3. For example, when we apply the bounds checking optimizations within the Vortex compiler, MD-5 execution time with bounds checking enabled goes from 27.6 seconds to 23 seconds.
Reference: [Nel91] <author> Greg Nelson, </author> <title> editor. System Programming in Modula-3. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Our borrowed sources implement platform specific services, such as device drivers, and are available to the Modula-3 component of the system through about 80 functions in a dozen interfaces. Despite the fact that the primary reference for Modula-3 is entitled "Systems Programming with Modula-3," <ref> [Nel91] </ref> we have found that the general systems community has remained skeptical of the language. Instead, they hold to languages such as C and C++ which offer little more than an environment for advanced assembly language programming.
Reference: [SFPB96] <author> E.G. Sirer, M. Fiuczynski, P. Pardyak, and B.N. Bershad. </author> <title> Safe Dynamic Linking in an Extensible Operating System. </title> <booktitle> Submitted to the First Workshop on Compiler Support for Systems Software, </booktitle> <month> November </month> <year> 1996. </year>
Reference-contexts: We were able to strip out 25% of the runtime simply by identifying those portions which were not needed by the operating system. We also created a dynamic linking facility <ref> [BSP + 95, SFPB96] </ref> that eliminates multiple copies of the runtime by allowing clients access to shared code and data.
Reference: [SG95] <author> Jacob Seligmannand Steffen Grarup. </author> <title> Incremental mature garbage collection using the train algorithm. </title> <booktitle> In Proceedings of ECOOP'95, Ninth European Conference on Object-Oriented Programming, </booktitle> <volume> volume 952, </volume> <pages> pages 235-252, </pages> <year> 1995. </year>
Reference-contexts: A typical collection takes about 100 ms. on our platform, which introduces perceptible delays into the system. We are dealing with the collector overhead in two ways. The first is to use a better collector. We are examining concurrent and incremental garbage collection techniques <ref> [SG95, AEL88] </ref> to reduce disruptive system pauses. While a better collector can reduce the pause times, it will not directly address the overhead problem. If garbage is created, there is going to be a penalty to clean it up.
Reference: [Sta90] <author> Richard M. Stallman. </author> <title> Using and porting GNU CC. </title> <type> Technical report, </type> <institution> Free Software Foundation, </institution> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: The DEC SRC implementation is a publicly available, highly portable Modula-3 system that consists of a compiler front-end, a code-generator, a set of runtime services, standard libraries, a debugger, and a distributed object library. The compiler front-end translates Modula-3 source code into GNU RTL intermediate representation <ref> [Sta90] </ref>, and a gcc based code generator emits object code directly. The goals of the DEC SRC implementation have always been portability (the system runs on 12 different architectures and 25 different operating systems) and functionality (the system's runtime services consist of over 230 interfaces).
References-found: 11

