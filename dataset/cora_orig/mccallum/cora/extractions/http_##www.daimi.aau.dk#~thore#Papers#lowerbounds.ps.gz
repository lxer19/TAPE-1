URL: http://www.daimi.aau.dk/~thore/Papers/lowerbounds.ps.gz
Refering-URL: http://www.daimi.aau.dk/~thore/Papers/lowerbounds.html
Root-URL: http://www.daimi.aau.dk
Title: Lower Bounds for Dynamic Transitive Closure, Planar Point Location, and Parentheses Matching implies the same
Author: Thore Husfeldt, Theis Rauhe, and Soren Skyum 
Keyword: (log n= log log n) dynamic membership problem  
Note: of any Dyck language with two or more letters. This  
Address: Ny Munkegade, DK-8000 Arhus C, Denmark  
Affiliation: BRICS Department of Computer Science, University of Aarhus  
Abstract: We give a number of new lower bounds in the cell probe model with logarithmic cell size, which entails the same bounds on the random access computer with logarithmic word size and unit cost operations. We study the signed prefix sum problem: given a string of length n of 0s and signed 1s, compute the sum of its ith prefix during updates. We show a lower bound of (log n= log log n) time per operations, even if the prefix sums are bounded by log n= log log n during all updates. We also show that if the update time is bounded by the product of the worst-case update time and the answer to the query, then the update time must be . These results allow us to prove lower bounds for a variety of seemingly unrelated dynamic problems. We give a lower bound for the dynamic planar point location in monotone subdivisions of (log n= log log n) per operation. We give a lower bound for dynamic transitive closure on upward planar graphs with one source and one sink of (log n=(log log n) 2 ) per operation. We give a lower bound of p for the free group with k generators. We also give lower bounds for the dynamic prefix majority and prefix equality problems. 1 Introduction 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Arne Andersson. </author> <title> Sublogarithmic searching without multiplications. </title> <booktitle> In Proc. 36th FOCS, </booktitle> <pages> pages 655-663. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1995. </year>
Reference-contexts: This is discouraging in light of the fact that the best known algorithm for many dynamic problems is `recompute from scratch.' However, recent breakthroughs in algorithms for random access machines <ref> [1, 2, 18] </ref> show that widely-held beliefs about the relevance for real computers of lower bounds in weaker models may be mistaken. Unfortunately, cell probe lower bounds are often hard to come by and the range of general techniques is limited.
Reference: 2. <author> Arne Andersson, Torben Hagerup, Stefan Nilsson, and Rajeev Raman. </author> <booktitle> Sorting in linear time? In Proc 27thSTOC, </booktitle> <pages> pages 427-436, </pages> <year> 1995. </year>
Reference-contexts: This is discouraging in light of the fact that the best known algorithm for many dynamic problems is `recompute from scratch.' However, recent breakthroughs in algorithms for random access machines <ref> [1, 2, 18] </ref> show that widely-held beliefs about the relevance for real computers of lower bounds in weaker models may be mistaken. Unfortunately, cell probe lower bounds are often hard to come by and the range of general techniques is limited.
Reference: 3. <author> Paul Beame and Faith Fich, </author> <year> 1994. </year> <type> Personal communication, </type> <note> reported by Peter Bro Miltersen. </note>
Reference-contexts: (in the cell probe model) for any of these problems have been published to the knowledge of the authors, even though an exponentially worse bound of (log log n= log log log n) can be seen to hold for most of them, using an unpublished result by Beame and Fich <ref> [3] </ref>, that improves work of Miltersen [13]. Lower bounds for harder variants of dynamic transitive closure and dynamic planar point location follow from [9, 12].
Reference: 4. <author> Yi-Jen Chiang and Roberto Tamassia. </author> <title> Dynamic algorithms in Computational Geometry. </title> <type> Technical Report CS-91-24, </type> <institution> Dept. of Comp. Sc., Brown University, </institution> <year> 1991. </year>
Reference-contexts: Preparata and Tamassia [16] give an algorithm that runs in time O (log 2 n) per operation. Several other dynamic algorithms for this and other types of subdivisions have been found since, see <ref> [4] </ref> for a survey. To prove a lower bound for this problem we construct a monotone subdivision from the signed prefix sum instance y 2 f0; 1g n .
Reference: 5. <author> Giuseppe Di Battista, Peter Eades, Roberto Tamassia, and Ioannis G. Tollis. </author> <title> Algorithms for drawing graphs: an annotated bibliography. </title> <note> Available via anonymous ftp from wilma.cs.brown.edu in /pub/papers/compgeo/gdbiblio.ps.Z, </note> <year> 1994. </year>
Reference-contexts: It is well known that a graph is upward planar iff it is the subgraph of an acyclic planar st-graph that has s and t on the same face. Fig. 2 shows the last condition to be necessary. The survey <ref> [5] </ref> contains a recent list of references to other characterisations of these classes and many applications in graph drawing; see [17] for more applications.
Reference: 6. <author> Paul F. Dietz. </author> <title> Optimal algorithms for list indexing and subset rank. </title> <booktitle> In Proc. First Workshop on Algorithms and Data Structures (WADS), volume 382 of Lecture Notes in Computer Science, </booktitle> <pages> pages 39-46. </pages> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: Then t q 2 log (t u log n) : (1) Especially, no algorithm can run faster than (log n= log log n) time per operation. Dietz <ref> [6] </ref> shows this bound to be tight. We mention at this point that the Fredman-Saks bound holds for amortised complexity also. <p> The data structure of Dietz <ref> [6] </ref> can be used for an optimal fi (log n= log log n) implementation. 2.2 Range Reduction We first show that signed prefix sum remains difficult even when the range of P ji y j is reduced. Theorem 1. <p> We know no better upper bound than O (log n= log log n) per operation (again, Dietz' data structure <ref> [6] </ref>), so the result leaves a double-logarithmic gap. To see that (4) holds, let y 2 f0; 1g n be an instance of signed prefix sum.
Reference: 7. <author> Gudmund Skovbjerg Frandsen, Thore Husfeldt, Peter Bro Miltersen, Theis Rauhe, and Soren Skyum. </author> <title> Dynamic algorithms for the Dyck languages. </title> <booktitle> In Proc. 4th WADS, volume 955 of Lecture Notes in Computer Science, </booktitle> <pages> pages 98-108. </pages> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Tamassia and Preparata [17] achieve a logarithmic upper bound for this problem. Parentheses matching: The dynamic membership problem for the Dyck languages (alternatively, the dynamic word problem for the free group) cannot be solved faster than p per operation. Frandsen et al. <ref> [7] </ref> show polylogarithmic upper bounds for this problem. <p> In many of them, a rudimentary syntax check is performed during editing, we focus on the feature of matching parentheses. Frandsen et al. <ref> [7] </ref> give polylogarithmic upper bounds for this problem; their lower bounds leave an exponential gap. Using the last theorem, we improve these bounds. 5.1 Dyck Languages The language of properly balanced parentheses contains strings like ( ) and ( )(( )) but not )).
Reference: 8. <author> Gudmund Skovbjerg Frandsen, Peter Bro Miltersen, and Sven Skyum. </author> <title> Dynamic word problems. </title> <booktitle> In Proc 34th FOCS, </booktitle> <pages> pages 470-479, </pages> <year> 1993. </year>
Reference-contexts: Frandsen, Miltersen, and Skyum <ref> [8] </ref> study dynamic word problems for other monoids. 5.3 Interval Queries We begin by showing that (8) is a lower bound for the two single-letter languages with a more powerful query: interval (i; j): return `yes' if x i : : : x j 2 D.
Reference: 9. <author> Michael L. Fredman and Monika Rauch Henzinger. </author> <title> Lower bounds for fully dynamic connectivity problems in graphs. </title> <type> Manuscript, </type> <note> preliminary version in STOC 94. </note>
Reference-contexts: Lower bounds for harder variants of dynamic transitive closure and dynamic planar point location follow from <ref> [9, 12] </ref>. <p> The prize for this generality, compared to a related result <ref> [9, 12] </ref>, is a double-logarithmic factor in the lower bound. The construction is very similar to that for planar point location in Sect. 2.3. From an instance y 2 f0; 1g n of signed prefix sum, we construct a digraph G = (V; E).
Reference: 10. <author> Michael L. Fredman and Michael E. Saks. </author> <title> The cell probe complexity of dynamic data structures. </title> <booktitle> In Proc. 21st STOC, </booktitle> <pages> pages 345-354, </pages> <year> 1989. </year>
Reference-contexts: In the rest of the paper, our nomenclature for dynamic problems omits the prefix `dynamic' for brevity, since all our problems are of this type. 1.1 Roadmap The Introduction contains a short presentation of our model of computation and recalls a seminal result for this, the Fredman-Saks bound <ref> [10] </ref>, that will be important to us. The main part of this paper proves two theorems that can be viewed as generalisations of the Fredman-Saks bound. <p> Much of the present paper can be enjoyed without knowledge of the proof of the Fredman-Saks bound; hence we present our results as a reduction to that result rather than modifying the original proof <ref> [10] </ref>, trading elegance for (what we hope is) readability. 1.2 The Cell Probe Model Our lower bounds work in the cell probe model [19], where the only resource is memory access|all computation is for free; we consider word size O (log n) for concreteness. <p> We believe that the techniques of the present paper are widely applicable; we substantiate this claim by proving new lower bounds for several well-studied problems from various fields. 1.3 Prefix Parity We use a result of Fredman and Saks <ref> [10] </ref> that gives a lower bound on the complexity of the prefix parity problem: given a vector x 1 ; : : : ; x n of bits, maintain a data structure that is able to react to the following operations for all i = 1; : : : ; n: <p> Lemma 3. Let t u denote the worst-case update time and let t q denote the expected query time for any solution of the prefix parity problem. Then t q = log (t u log n) : Sketch of proof. Equation (2) in Theorem 3 of <ref> [10] </ref> states the bound for q being the worst-case query time. This can be extended to expected time using Yao's Minimax principle. ut Proof of Theorem. We return to the proof of Theorem 1 and modify our scheme for giving values f1; +1g to the nonzero elements of y.
Reference: 11. <author> Michael A. Harrison. </author> <title> Introduction to Formal Language Theory. </title> <publisher> Addison-Wesley, </publisher> <year> 1978. </year>
Reference-contexts: The Dyck languages bear the name of the German mathematician Walther von Dyck (1856-1934). They are covered in detail in Harrison's classical treat ment <ref> [11] </ref>. 5.2 The Membership Problem We consider the problem of maintaining membership in D k or D 0 k of a string from (A [ A) n dynamically.
Reference: 12. <author> P. B. Miltersen, S. Subramanian, J. S. Vitter, and R. Tamassia. </author> <title> Complexity models for incremental computation. </title> <journal> Theoretical Computer Science, </journal> <volume> 130 </volume> <pages> 203-236, </pages> <year> 1994. </year>
Reference-contexts: Lower bounds for harder variants of dynamic transitive closure and dynamic planar point location follow from <ref> [9, 12] </ref>. <p> The prize for this generality, compared to a related result <ref> [9, 12] </ref>, is a double-logarithmic factor in the lower bound. The construction is very similar to that for planar point location in Sect. 2.3. From an instance y 2 f0; 1g n of signed prefix sum, we construct a digraph G = (V; E).
Reference: 13. <author> Peter Bro Miltersen. </author> <title> Lower bounds for union-split-find related problems on random access machines. </title> <booktitle> In Proc. 26th STOC, </booktitle> <pages> pages 625-634. </pages> <publisher> ACM, </publisher> <year> 1994. </year>
Reference-contexts: any of these problems have been published to the knowledge of the authors, even though an exponentially worse bound of (log log n= log log log n) can be seen to hold for most of them, using an unpublished result by Beame and Fich [3], that improves work of Miltersen <ref> [13] </ref>. Lower bounds for harder variants of dynamic transitive closure and dynamic planar point location follow from [9, 12].
Reference: 14. <author> Peter Bro Miltersen, Noam Nisan, Shmuel Safra, and Avi Wigderson. </author> <title> On data structures and asymmetric communication complexity. </title> <booktitle> In Proc. 27th STOC, </booktitle> <pages> pages 103-111. </pages> <publisher> ACM, </publisher> <year> 1995. </year>
Reference-contexts: For counting (as above), the Fredman-Saks bound applies even in one dimension. On the other hand, the problem of existential range queries (return `yes' iff R "S is nonempty) is among the most interesting problems at the time of writing, see <ref> [14] </ref> for some results. Our lower bound applies to versions of the problem where the query operation involves the majority function in some disguise.
Reference: 15. <author> Rajeev Motwani and Prabhakar Raghavan. </author> <title> Randomized Algorithms. </title> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: well-known fact that in a series of independent and fair coin flips, even though the difference between the number of heads and tails after the nth trail may be as big as n, the expected value is much smaller: E j#heads #tailsj p For a proof, solve Problem 1.6 of <ref> [15] </ref>. For this idea to work, we first have to observe that the Fredman-Saks bound works for expected query time as well. Lemma 3. Let t u denote the worst-case update time and let t q denote the expected query time for any solution of the prefix parity problem.
Reference: 16. <author> Franco P. Preparata and Roberto Tamassia. </author> <title> Fully dynamic point location in a monotone subdivision. </title> <journal> SIAM Journal of Computing, </journal> <volume> 18(4) </volume> <pages> 811-830, </pages> <year> 1989. </year>
Reference-contexts: With this, we easily derive lower bounds for half a dozen natural problems, including the following: Computational Geometry: Dynamic planar point location in monotone sub divisions cannot be solved faster than (log n= log log n). The important algorithm of Preparata and Tamassia <ref> [16] </ref> achieves upper bounds of O (log 2 n) per operation. ? Basic Research in Computer Science, Centre of the Danish National Research Foundation Graph algorithms: Dynamic transitive closure in planar acyclic digraphs with one source and one sink that are on the same face cannot be solved faster than (log <p> An important restriction of the problem, for which our bound will apply, considers only monotone subdivisions, where the subdivision consists of polygons that are monotone (so no straight line crosses any polygon more than twice). Preparata and Tamassia <ref> [16] </ref> give an algorithm that runs in time O (log 2 n) per operation. Several other dynamic algorithms for this and other types of subdivisions have been found since, see [4] for a survey.
Reference: 17. <author> Roberto Tamassia and Franco P. Preparata. </author> <title> Dynamic maintenance of planar digraphs, with applications. </title> <journal> Algorithmica, </journal> <volume> 5 </volume> <pages> 509-527, </pages> <year> 1990. </year>
Reference-contexts: Tamassia and Preparata <ref> [17] </ref> achieve a logarithmic upper bound for this problem. Parentheses matching: The dynamic membership problem for the Dyck languages (alternatively, the dynamic word problem for the free group) cannot be solved faster than p per operation. Frandsen et al. [7] show polylogarithmic upper bounds for this problem. <p> Fig. 2 shows the last condition to be necessary. The survey [5] contains a recent list of references to other characterisations of these classes and many applications in graph drawing; see <ref> [17] </ref> for more applications.
Reference: 18. <author> Mikkel Thorup. </author> <title> On RAM priority queue. </title> <booktitle> In Proc 7th Ann. Symp. on Discrete Algorithms (SODA), </booktitle> <pages> pages 59-67, </pages> <year> 1996. </year>
Reference-contexts: This is discouraging in light of the fact that the best known algorithm for many dynamic problems is `recompute from scratch.' However, recent breakthroughs in algorithms for random access machines <ref> [1, 2, 18] </ref> show that widely-held beliefs about the relevance for real computers of lower bounds in weaker models may be mistaken. Unfortunately, cell probe lower bounds are often hard to come by and the range of general techniques is limited.
Reference: 19. <author> Andrew Chi-Chih Yao. </author> <title> Should tables be sorted? Journal of the ACM, </title> <booktitle> 28(3) </booktitle> <pages> 615-628, </pages> <month> July </month> <year> 1981. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: enjoyed without knowledge of the proof of the Fredman-Saks bound; hence we present our results as a reduction to that result rather than modifying the original proof [10], trading elegance for (what we hope is) readability. 1.2 The Cell Probe Model Our lower bounds work in the cell probe model <ref> [19] </ref>, where the only resource is memory access|all computation is for free; we consider word size O (log n) for concreteness. Hence our bounds hold on all natural (and some unnatural) models of random access machines with logarithmic word size.
References-found: 19

