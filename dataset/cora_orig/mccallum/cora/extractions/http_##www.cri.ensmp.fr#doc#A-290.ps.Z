URL: http://www.cri.ensmp.fr/doc/A-290.ps.Z
Refering-URL: http://www.cri.ensmp.fr/rapports.html
Root-URL: 
Title: Exact vs. Approximate Array Region Analyses array region analyses cannot be defined on lattices. It
Author: Beatrice Creusillet and Fran~cois Irigoin 
Keyword: Array region analysis, semantical analysis, exactness.  
Note: It is first recalled that must  
Date: April 30, 1996  
Address: 35, rue Saint-Honore, F-77305 FONTAINEBLEAU Cedex FRANCE  
Affiliation: Centre de Recherche en Informatique, Ecole des mines de Paris  
Abstract: Advanced program optimizations, such as array privatization, require precise array data flow analyses, usually relying on conservative over- (or may) and under- (or must) approximations of array element sets [26, 32, 21]. In a recent study [14], we proposed to compute exact sets whenever possible. But the advantages of this approach were still an open issue which is discussed in this paper. For that purpose, it is suggested to perform under- and over-approximate analyses at the same time, and to enhance the results of must analyses with those of may analyses, when the latter can be proved exact according to an exactness criterion. This is equivalent to our previous approach, and is more effective than using only traditional techniques such as widening and narrowing operators which may fail to expose exact solutions even though their computability is decidable. This method is very general and could be applied to other types of analyses. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Beatrice Apvrille-Creusillet. </author> <title> Regions exactes et privatisation de tableaux (Exact array region analyses and array privatization). </title> <type> Master's thesis, </type> <institution> Universite Paris VI, France, </institution> <month> September </month> <year> 1994. </year> <note> Available via http://www.cri.ensmp.fr/~creusil. 12 </note>
Reference-contexts: Solving such problems requires a precise intra- and inter-procedural analysis of array data flow. fl E-mail: fcreusillet,irigoing@cri.ensmp.fr 1 Several algorithms for array privatization or array expansion (a similar tech-nique for shared memory machines) have already been proposed <ref> [16, 27, 26, 33, 22, 1, 14] </ref>, based on different types of array data flow analyses. The first approach [16, 27] performs an exact analysis of array data flow, but for a restricted source language 1 . <p> Most of the other methods use conservative approximations of array element sets, such as MayBeDefined and MustBeDefined sets. In fact, may sets are over-approximations of exact solutions, while must sets are under-approximations, according to a predefined approximation ordering. On the contrary, the last approach <ref> [1, 14] </ref> tries to compute exact solutions whenever possible, switching to conservative approximations only when exactness cannot be preserved anymore. However, except for specific applications [7, 8] requiring the knowledge of exactness, the advantages of our approach were still an open issue, which is discussed in this paper. <p> In this case, Bourdoncle [5] suggests to approximate fix-points by decreasing under-approximate iterations 2 , using a narrowing operator 3 . However, this approach may fail to compute under-approximations equal to the corresponding exact solutions while the computation of the latter is decidable, which is possible as shown in <ref> [1, 14] </ref>.
Reference: [2] <author> V. Balasundaram and K. Kennedy. </author> <title> A technique for summarizing data access and its use in parallelism enhancing transformations. </title> <booktitle> In International Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 41-53, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: For instance, array element index sets are parts of Z n . Due to the com plexity of being able to represent any part of Z n , several compact repre sentations have been defined: convex polyhedra [30], rsd [6], dad <ref> [2] </ref>, : : : The approximate analyses we are interested in are then such that: A : ~ L ! (D ! A 0 ) and A : ~ L ! (D ! A 00 ) 2.3 Non-lattice frameworks: Why? A natural question that arises is why we may need non-continuous,
Reference: [3] <author> Garrett Birkhoff. </author> <title> Lattice Theory, </title> <publisher> volume XXV of AMS Colloqium Publications. American Mathematical Society, </publisher> <address> Providence, Rhode Island, third edition, </address> <year> 1967. </year>
Reference-contexts: A lower closure is reductive ( v x:x). 5 Exact regionunder-approximations (convex polyhedra) over-approximation (convex polyhedron) 2.4 Usual ad-hoc solutions When the approximate solution space A 00 is a lattice or cpo, its relations with the exact solution space A can be described by a Galois connection <ref> [3, 10] </ref>, which defines two monotone functions: An abstraction function ff : A ! A 00 , and a concretization or meaning function fl : A 00 ! A (see Figure 3).
Reference: [4] <author> W. Blume and R. Eigenmann. </author> <title> Performance analysis of parallelizing compilers on the Perfect Benchmarks programs. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 3(6) </volume> <pages> 643-656, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Several studies <ref> [18, 4] </ref> have highlighted the need for advanced program optimizations to deal with memory management issues when compiling programs for massively parallel machines or hierarchical memory systems. For instance, Blume and Eigenmann [4] have shown that array privatization could greatly enhance the amount of potential parallelism in sequential programs. <p> 1 Introduction Several studies [18, 4] have highlighted the need for advanced program optimizations to deal with memory management issues when compiling programs for massively parallel machines or hierarchical memory systems. For instance, Blume and Eigenmann <ref> [4] </ref> have shown that array privatization could greatly enhance the amount of potential parallelism in sequential programs. This technique basically aims at discovering array sections that are used as temporaries in loops, and can thus be replaced by local copies on each processor. <p> a posteriori that the exactness criterion for IF constructs could be deduced from trivial and intuitive definitions of R and R derived from the exact semantics R. 11 choice of the representation are still alive: Time and space complexity versus accuracy is the main issue, but usefulness is widely acknowledged <ref> [31, 4, 24, 21, 15] </ref>. The need for under-approximations appeared only recently [32, 26, 21], mainly for locality analysis, to allow advanced program transformations such as array privatization.
Reference: [5] <author> Fran~cois Bourdoncle. </author> <title> Semantique des Langages Imperatifs d'Ordre Superieur et Interpretation Abstraite. </title> <type> PhD thesis, </type> <institution> Ecole Polytechnique, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: This is due to the fact that, given an exact array region, no best under-approximation can be defined. This is illustrated in Figure 1 where several possible under-approximations of an array region are provided. In this case, Bourdoncle <ref> [5] </ref> suggests to approximate fix-points by decreasing under-approximate iterations 2 , using a narrowing operator 3 . However, this approach may fail to compute under-approximations equal to the corresponding exact solutions while the computation of the latter is decidable, which is possible as shown in [1, 14]. <p> It intuitively corresponds to the fact that the greatest convex polyhedron or rsd contained into any array region is not uniquely defined. An ad-hoc computable under-approximation must then be chosen. Some possible choices have already been described in <ref> [5] </ref>. This is the subject of the next subsection. 5 An upper closure is an internal operator, which is monotone (x y =) (x) (y)), extensive (x:x v ), and idempotent ( ffi = ). <p> approximated by successive iterations relying on sequences of narrowing operators in the case of under-approximations [10, 9]. ff abstraction function approximate solution space exact solution space meaning function fl To handle cases where the approximate solution space is not a lattice or a cpo, but a mere partial order, Bourdoncle <ref> [5] </ref> generalizes the traditional approach of Galois connections by defining representations, in which ff is not required to be a monotone function.
Reference: [6] <author> D. Callahan and K. Kennedy. </author> <title> Analysis of interprocedural side effects in a parallel programming environment. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 5 </volume> <pages> 517-550, </pages> <year> 1988. </year>
Reference-contexts: Over-approximate analyses of array regions are also defined on lattices: lattice of convex polyhedra in pips [25] (our interprocedu-ral parallelizer of scientific programs), or regular section lattice in the case of rsds <ref> [6] </ref> for instance. However, as will be shown in Section 2.3, under-approximate solutions do not belong to a predefined lattice. This is due to the fact that, given an exact array region, no best under-approximation can be defined. <p> For instance, array element index sets are parts of Z n . Due to the com plexity of being able to represent any part of Z n , several compact repre sentations have been defined: convex polyhedra [30], rsd <ref> [6] </ref>, dad [2], : : : The approximate analyses we are interested in are then such that: A : ~ L ! (D ! A 0 ) and A : ~ L ! (D ! A 00 ) 2.3 Non-lattice frameworks: Why? A natural question that arises is why we may
Reference: [7] <author> Fabien Coelho. </author> <title> Compilation of I/O communications for HPF. </title> <booktitle> In Frontiers'95, </booktitle> <pages> pages 102-109, </pages> <month> February </month> <year> 1995. </year> <note> Available via http://www.cri.ensmp.fr/~coelho. </note>
Reference-contexts: On the contrary, the last approach [1, 14] tries to compute exact solutions whenever possible, switching to conservative approximations only when exactness cannot be preserved anymore. However, except for specific applications <ref> [7, 8] </ref> requiring the knowledge of exactness, the advantages of our approach were still an open issue, which is discussed in this paper. Traditionally, semantical analyses are defined on lattices. This ensures that they be precisely defined even in case of recursive semantical equations. <p> It can be useful for every type of analysis where one of the approximation is not defined on a predefined lattice. But also when exact results are required for specific applications <ref> [7, 8] </ref>. Indeed, we show how to obtain an optimal exactness criterion valid for both may and must analyses.
Reference: [8] <author> Fabien Coelho and Corinne Ancourt. </author> <title> Optimal compilation of HPF remappings. </title> <type> Technical Report A-277-CRI, </type> <institution> CRI, Ecole des Mines de Paris, </institution> <month> October </month> <year> 1995. </year> <note> To appear in JPDC in 1996. </note>
Reference-contexts: On the contrary, the last approach [1, 14] tries to compute exact solutions whenever possible, switching to conservative approximations only when exactness cannot be preserved anymore. However, except for specific applications <ref> [7, 8] </ref> requiring the knowledge of exactness, the advantages of our approach were still an open issue, which is discussed in this paper. Traditionally, semantical analyses are defined on lattices. This ensures that they be precisely defined even in case of recursive semantical equations. <p> It can be useful for every type of analysis where one of the approximation is not defined on a predefined lattice. But also when exact results are required for specific applications <ref> [7, 8] </ref>. Indeed, we show how to obtain an optimal exactness criterion valid for both may and must analyses.
Reference: [9] <author> Patrick Cousot. </author> <title> Methodes Iteratives de Construction et d'Approximation de Points Fixes d'Operateurs Monotones sur un Treillis, Analyse Semantique des Programmes. </title> <type> PhD thesis, </type> <institution> Institut National Polytechnique de Grenoble, </institution> <month> March </month> <year> 1978. </year>
Reference-contexts: Facing these obstacles, the solution is either to restrict the input language (as in [16, 17, 29, 27]), or to perform conservative approximate analyses <ref> [9] </ref>. This section describes some usual characteristics of exact and approximate semantical analysis frameworks. It is then shown that some analyses do not respect these properties. <p> If such a closure existed, (-convex (Z n ); ?; Z n ; [; xy:(x " y)) would be a complete lattice (see <ref> [9] </ref>, Corollary 2.3.0.5); this is not possible, because convex (Z n ) is not closed under [. The same conclusion holds for rsds, dads, and lists of convex polyhedra with a maximum length. <p> Least fixed points can then be safely approximated by successive iterations relying on sequences of narrowing operators in the case of under-approximations <ref> [10, 9] </ref>. ff abstraction function approximate solution space exact solution space meaning function fl To handle cases where the approximate solution space is not a lattice or a cpo, but a mere partial order, Bourdoncle [5] generalizes the traditional approach of Galois connections by defining representations, in which ff is not <p> Indeed, we show how to obtain an optimal exactness criterion valid for both may and must analyses. Finally, and from a theoretical point of view, being able to detect the exactness of an analysis gives a partial answer to a still unresolved question from Cousot's thesis <ref> [9] </ref>, about the distance between an approximation and its corresponding exact solution. Acknowledgments We are very thankful to Fran~cois Bourdoncle and Pierre Jouvelot for insightful discussions about semantical analyses, and to Denis Barthou for reading this paper.
Reference: [10] <author> Patrick Cousot and Radhia Cousot. </author> <title> Abstract interpretation : a unified lattice model for static analysis of programs by construction or approximation of fix-points. </title> <booktitle> In Symposium on Principles of Programming Languages, </booktitle> <pages> pages 238-252, </pages> <year> 1977. </year>
Reference-contexts: A lower closure is reductive ( v x:x). 5 Exact regionunder-approximations (convex polyhedra) over-approximation (convex polyhedron) 2.4 Usual ad-hoc solutions When the approximate solution space A 00 is a lattice or cpo, its relations with the exact solution space A can be described by a Galois connection <ref> [3, 10] </ref>, which defines two monotone functions: An abstraction function ff : A ! A 00 , and a concretization or meaning function fl : A 00 ! A (see Figure 3). <p> Least fixed points can then be safely approximated by successive iterations relying on sequences of narrowing operators in the case of under-approximations <ref> [10, 9] </ref>. ff abstraction function approximate solution space exact solution space meaning function fl To handle cases where the approximate solution space is not a lattice or a cpo, but a mere partial order, Bourdoncle [5] generalizes the traditional approach of Galois connections by defining representations, in which ff is not
Reference: [11] <author> Patrick Cousot and Radhia Cousot. </author> <title> Higher-order abstract interpretation (and application to comportment analysis generalizing strictness, termination, projection and PER analysis of functional languages). </title> <booktitle> In International Conference on Computer Languages, </booktitle> <publisher> IEEE Computer Socitey Press, </publisher> <pages> pages 95-112, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Hence the idea to replace A by approximate analyses, comparable to A by a partial order v: A is an over-approximation of A () A v A A is an under-approximation of A () A v A This approximation ordering <ref> [11] </ref> is a logical ordering, and is not necessarily related to a partial ordering between semantic values.
Reference: [12] <author> Beatrice Creusillet. </author> <title> Array regions for interprocedural parallelization and array privatization. </title> <type> Report A-279, </type> <institution> CRI, Ecole des Mines de Paris, </institution> <month> November </month> <year> 1995. </year> <note> Available at http://www.cri.ensmp.fr/~creusil. </note>
Reference-contexts: The idea is to perform corresponding may and must analyses at the same time, and to enhance the results of must analyses with those of may analyses according to an exactness criterion. In our implementation, whose results are already used in pips for privatizing array regions <ref> [12] </ref>, must regions are not even computed; instead, may regions are flagged as exact whenever the exactness criterion is true; under-approximations are thus always equal to the empty set, unless they are exact and equal to the corresponding over-approximations.
Reference: [13] <author> Beatrice Creusillet. </author> <title> IN and OUT array region analyses. </title> <booktitle> In Fifth International Workshop on Compilers for Parallel Computers, </booktitle> <pages> pages 233-246, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: However, this approach may fail to compute under-approximations equal to the corresponding exact solutions while the computation of the latter is decidable, which is possible as shown in [1, 14]. We thus propose another approach, based on our previous experience of exact array dataflow analyses <ref> [14, 13, 15] </ref>: We suggest to perform under- and over-approximate analyses at the same time, and to enhance the results of must analyses with those of may analyses, when the latter can be proved exact according to an exactness criterion. The paper is organized as follows.
Reference: [14] <author> Beatrice Creusillet and Fran~cois Irigoin. </author> <title> Interprocedural array region analyses. </title> <booktitle> In Languages and Compilers for Parallel Computing, Lecture Notes in Computer Science, </booktitle> <pages> pages 46-60. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1995. </year>
Reference-contexts: Solving such problems requires a precise intra- and inter-procedural analysis of array data flow. fl E-mail: fcreusillet,irigoing@cri.ensmp.fr 1 Several algorithms for array privatization or array expansion (a similar tech-nique for shared memory machines) have already been proposed <ref> [16, 27, 26, 33, 22, 1, 14] </ref>, based on different types of array data flow analyses. The first approach [16, 27] performs an exact analysis of array data flow, but for a restricted source language 1 . <p> Most of the other methods use conservative approximations of array element sets, such as MayBeDefined and MustBeDefined sets. In fact, may sets are over-approximations of exact solutions, while must sets are under-approximations, according to a predefined approximation ordering. On the contrary, the last approach <ref> [1, 14] </ref> tries to compute exact solutions whenever possible, switching to conservative approximations only when exactness cannot be preserved anymore. However, except for specific applications [7, 8] requiring the knowledge of exactness, the advantages of our approach were still an open issue, which is discussed in this paper. <p> In this case, Bourdoncle [5] suggests to approximate fix-points by decreasing under-approximate iterations 2 , using a narrowing operator 3 . However, this approach may fail to compute under-approximations equal to the corresponding exact solutions while the computation of the latter is decidable, which is possible as shown in <ref> [1, 14] </ref>. <p> However, this approach may fail to compute under-approximations equal to the corresponding exact solutions while the computation of the latter is decidable, which is possible as shown in [1, 14]. We thus propose another approach, based on our previous experience of exact array dataflow analyses <ref> [14, 13, 15] </ref>: We suggest to perform under- and over-approximate analyses at the same time, and to enhance the results of must analyses with those of may analyses, when the latter can be proved exact according to an exactness criterion. The paper is organized as follows. <p> Repeating the process for the outermost loop, we then obtain f 1 = 1g, which is far from the set of array elements actually referenced by the loop nest: f1 1 5g. However, this last set is computable and can even be proved to exactly represent the actual set <ref> [14] </ref>. The previous example has been chosen for its simplicity, and it could be objected that the chosen representation or operators could be enhanced. But similar examples can be built for more complex representations or sequences of ( i ) i2N ) operators. <p> In this case, if a computable exactness criterion for the opposite analysis (C AA ) is available, then A can be refined by using A whenever C AA is true. 3.3 Relation with previous work <ref> [14, 15] </ref> In previous papers, and in accordance with our implementation in pips, only may array region analyses (R) were presented, as well as exactness criteria to flag them as exact (C RR ) whenever possible. <p> We show that traditional ad-hoc solutions based on iteration techniques do not bring interesting results, even though problems can be lessened by more accurate representations and more complex approximations of fixed points. We thus propose a method based on our previous experience of array region analyses <ref> [14, 15] </ref>. The idea is to perform corresponding may and must analyses at the same time, and to enhance the results of must analyses with those of may analyses according to an exactness criterion.
Reference: [15] <author> Beatrice Creusillet and Fran~cois Irigoin. </author> <title> Interprocedural array region analyses. </title> <note> Accepted to IJPP special issue on LCPC A/282/CRI, </note> <institution> CRI, Ecole des Mines de Paris, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: However, this approach may fail to compute under-approximations equal to the corresponding exact solutions while the computation of the latter is decidable, which is possible as shown in [1, 14]. We thus propose another approach, based on our previous experience of exact array dataflow analyses <ref> [14, 13, 15] </ref>: We suggest to perform under- and over-approximate analyses at the same time, and to enhance the results of must analyses with those of may analyses, when the latter can be proved exact according to an exactness criterion. The paper is organized as follows. <p> The next section brings a solution to this problem. 3 Approximations and Exactness The previous section has just shown that under-approximate analyses may fail to expose interesting results. This section describes a method to alleviate this problem, based on our previous experience of array region analyses <ref> [15] </ref>. It relies on the use of an exactness criterion which is introduced in a first subsection. Its optimality and applications are then discussed in Section 3.2. <p> In this case, if a computable exactness criterion for the opposite analysis (C AA ) is available, then A can be refined by using A whenever C AA is true. 3.3 Relation with previous work <ref> [14, 15] </ref> In previous papers, and in accordance with our implementation in pips, only may array region analyses (R) were presented, as well as exactness criteria to flag them as exact (C RR ) whenever possible. <p> a posteriori that the exactness criterion for IF constructs could be deduced from trivial and intuitive definitions of R and R derived from the exact semantics R. 11 choice of the representation are still alive: Time and space complexity versus accuracy is the main issue, but usefulness is widely acknowledged <ref> [31, 4, 24, 21, 15] </ref>. The need for under-approximations appeared only recently [32, 26, 21], mainly for locality analysis, to allow advanced program transformations such as array privatization. <p> We show that traditional ad-hoc solutions based on iteration techniques do not bring interesting results, even though problems can be lessened by more accurate representations and more complex approximations of fixed points. We thus propose a method based on our previous experience of array region analyses <ref> [14, 15] </ref>. The idea is to perform corresponding may and must analyses at the same time, and to enhance the results of must analyses with those of may analyses according to an exactness criterion.
Reference: [16] <author> Paul Feautrier. </author> <title> Array expansion. </title> <booktitle> In International Conference on Supercomputing, </booktitle> <pages> pages 429-441, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: Solving such problems requires a precise intra- and inter-procedural analysis of array data flow. fl E-mail: fcreusillet,irigoing@cri.ensmp.fr 1 Several algorithms for array privatization or array expansion (a similar tech-nique for shared memory machines) have already been proposed <ref> [16, 27, 26, 33, 22, 1, 14] </ref>, based on different types of array data flow analyses. The first approach [16, 27] performs an exact analysis of array data flow, but for a restricted source language 1 . <p> The first approach <ref> [16, 27] </ref> performs an exact analysis of array data flow, but for a restricted source language 1 . Most of the other methods use conservative approximations of array element sets, such as MayBeDefined and MustBeDefined sets. <p> Facing these obstacles, the solution is either to restrict the input language (as in <ref> [16, 17, 29, 27] </ref>), or to perform conservative approximate analyses [9]. This section describes some usual characteristics of exact and approximate semantical analysis frameworks. It is then shown that some analyses do not respect these properties.
Reference: [17] <author> Paul Feautrier. </author> <title> Dataflow analysis of array and scalar references. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 20(1) </volume> <pages> 23-53, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Facing these obstacles, the solution is either to restrict the input language (as in <ref> [16, 17, 29, 27] </ref>), or to perform conservative approximate analyses [9]. This section describes some usual characteristics of exact and approximate semantical analysis frameworks. It is then shown that some analyses do not respect these properties.
Reference: [18] <author> Kyle Gallivan, William Jalby, and Dennis Gannon. </author> <title> On the problem of optimizing data transfers for complex memory systems. </title> <booktitle> In International Conference on Supercomputing, </booktitle> <pages> pages 238-253, </pages> <month> July </month> <year> 1988. </year> <month> 13 </month>
Reference-contexts: 1 Introduction Several studies <ref> [18, 4] </ref> have highlighted the need for advanced program optimizations to deal with memory management issues when compiling programs for massively parallel machines or hierarchical memory systems. For instance, Blume and Eigenmann [4] have shown that array privatization could greatly enhance the amount of potential parallelism in sequential programs.
References-found: 18

