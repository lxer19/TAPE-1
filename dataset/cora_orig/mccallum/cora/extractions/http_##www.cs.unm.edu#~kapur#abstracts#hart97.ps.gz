URL: http://www.cs.unm.edu/~kapur/abstracts/hart97.ps.gz
Refering-URL: http://www.cs.unm.edu/~kapur/abstracts/hart97.html
Root-URL: http://www.cs.unm.edu
Email: kapur@cs.albany.edu  shyam@tcs.tifr.res.in  
Phone: 2  
Title: Synthesizing Controllers for Hybrid Systems  
Author: Deepak Kapur and R.K. Shyamasundar 
Address: New York, Albany, NY, USA,  005, India,  
Affiliation: 1 Department of Computer Science, State University of  Computer Science Group, Tata Institute of Fundamental Research, Bombay 400  
Abstract: A methodology for synthesizing control laws of hybrid systems is proposed using the hybrid automaton framework. The objective is to synthesize guards for making phase transitions to ensure that the system satisfies global invariance over the whole state space. Classical analysis is used to derive a controller given the phases, transitions and global invariance of a hybrid system. The methodology seems to be general in the sense that control laws can be synthesized even if the hybrid system is modeled by an automaton more general than bounded-drift linear hybrid automaton model frequently discussed in the literature. The main requirement is that it should be possible to generate a closed form expression for state variables in every phase, as a function of time elapsed in that phase. Conditions on system parameters can be identified for which the control laws can be synthesized. Optimality criteria can be incorporated for selecting among different control strategies. The methodology is illustrated using three examples. This work is in contrast to most of the work on hybrid systems in which the focus has been on the analysis problem. 
Abstract-found: 1
Intro-found: 1
Reference: [ACHH93] <author> R. Alur, C. Courcoubetis, T. A. Henzinger and P.-H. Ho, </author> <title> Hybrid automata: an algorithmic approach to the specification and verification of hybrid systems, </title> <publisher> LNCS, 736, Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 209-229, </pages> <note> enhanced version is in [ACHHH95]. </note>
Reference: [ACHHH95] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T. A. Henzinger and P.-H. Ho, X. Nicollin , A. Olivero, J. Sifakis, and S. Yovine, </author> <title> The algorithmic analysis of hybrid systems, </title> <journal> Theoretical Computer Science, </journal> <volume> 138, pp.3-34, </volume> <year> 1995 </year>
Reference-contexts: The first author was partially supported by an NSF grant nos. CCR-9303394, CCR-9308016, and CCR-9404930. The study of hybrid systems is interdisciplinary, lying at the junction of computer science and control. Automata-theoretic and logical approaches have been primarily used for verification and synthesis. Hybrid automata <ref> [ACHHH95, De94] </ref> are used for modeling hybrid systems. Following [De94], informally, a hybrid transition system has finitely many discrete states, called phases (or locations), and infinitely many continuous states (henceforth just called states). A phase is used for modeling a dynamic subsystem specified by a set of differential equations. <p> A slightly nontrivial version of a nonlinear water-level controller (in which the rates of change of water level are nonlinear functions as well as depend upon a system parameter) [SM94] is discussed later. This is followed by a discussion of a more general version of nuclear reactor temperature control <ref> [ACHHH95, Ho95] </ref>. It is illustrated that adopting different policies can lead to different controllers. The work on the synthesis of controllers for discrete and timed systems has been elucidated in [AMP95]. <p> We explain and illustrate the main steps of the methodology using a water-level controller, an example discussed extensively in the literature <ref> [HRP93, ACHHH95, Ho95] </ref>. 21Phase Phase Phase Phase 4 3 dw/dt = -2 dtc/dt = 1 tc = d : tc = d : g2 : tc := 0 Water-Level Controller: The water level in a tank is controlled through a controller, which continuously senses the water level and turns a valve <p> The control law can be synthesized even if lower and upper bounds on water level in the global invariant are given as parameters. It is possible to determine conditions on L; U for which a controller cannot be synthesized. 4.2 Nuclear Reactor Temperature Control In <ref> [ACHHH95, Ho95] </ref>, variations of a nuclear reactor temperature controller are discussed. The system has a reactor core and two control rods that control the temperature of the reactor core. One of the rods cools slowly and the other rod cools faster. <p> One of the rods cools slowly and the other rod cools faster. Further, once a rod is immersed in the core, it has to remain outside for a certain period of time. In the discussion in <ref> [ACHHH95, Ho95] </ref>, the controller is straightforward: Put one of the rods in if the temperature reaches U , and take the rod out if temperature reaches L. If the time for which rods have to be outside is beyond a certain period, then rods 1 and 2 are alternated. <p> And, f = 1=10; t c = 50; k 1 = 6; and k 2 = 10, L = 510; U = 550, giving us a system similar to the one in <ref> [ACHHH95, Ho95] </ref>. For measuring time when a rod is outside the reactor after it was taken out last, as well as to measure time, a rod is inside the reactor, time counters are introduced.
Reference: [AHS96] <editor> R. Alur, T.A. Henzinger, and E.D. Sontag, editors, </editor> <title> Hybrid Systems III:Verification and Control, </title> <publisher> LNCS, 1066, Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Design, analysis (verification) and synthesis (control) of hybrid systems have been an important area of active research <ref> [GNRR93, AKNS95, AHS96] </ref>. In verification, an objective is to show that a given hybrid system will satisfy a certain (temporal) property and will never enter any unsafe state.
Reference: [AKNS95] <author> P. Antsaklis, W. Kohn, A. Nerode and S. Shastry (Eds.), </author> <title> Hybrid Systems II, </title> <publisher> LNCS, 999, Springer Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Design, analysis (verification) and synthesis (control) of hybrid systems have been an important area of active research <ref> [GNRR93, AKNS95, AHS96] </ref>. In verification, an objective is to show that a given hybrid system will satisfy a certain (temporal) property and will never enter any unsafe state.
Reference: [AMP95] <author> E. Asarin, O. Maler, and A. Pnueli, </author> <title> Symbolic Controller Synthesis for Discrete and Timed Systems, </title> <booktitle> Proc. of Hybrid Systems II, LNCS 999, </booktitle> <year> 1995. </year>
Reference-contexts: This is followed by a discussion of a more general version of nuclear reactor temperature control [ACHHH95, Ho95]. It is illustrated that adopting different policies can lead to different controllers. The work on the synthesis of controllers for discrete and timed systems has been elucidated in <ref> [AMP95] </ref>. The core idea lies in finding a winning strategy for certain two-player games defined by an automaton or by a timed automaton (both of which have the set of designated final states).
Reference: [De94] <author> A. Deshpande, </author> <title> Control of Hybrid Systems, </title> <type> Ph.D. Thesis, </type> <institution> University of California at Berkeley, </institution> <year> 1994. </year>
Reference-contexts: The first author was partially supported by an NSF grant nos. CCR-9303394, CCR-9308016, and CCR-9404930. The study of hybrid systems is interdisciplinary, lying at the junction of computer science and control. Automata-theoretic and logical approaches have been primarily used for verification and synthesis. Hybrid automata <ref> [ACHHH95, De94] </ref> are used for modeling hybrid systems. Following [De94], informally, a hybrid transition system has finitely many discrete states, called phases (or locations), and infinitely many continuous states (henceforth just called states). A phase is used for modeling a dynamic subsystem specified by a set of differential equations. <p> CCR-9303394, CCR-9308016, and CCR-9404930. The study of hybrid systems is interdisciplinary, lying at the junction of computer science and control. Automata-theoretic and logical approaches have been primarily used for verification and synthesis. Hybrid automata [ACHHH95, De94] are used for modeling hybrid systems. Following <ref> [De94] </ref>, informally, a hybrid transition system has finitely many discrete states, called phases (or locations), and infinitely many continuous states (henceforth just called states). A phase is used for modeling a dynamic subsystem specified by a set of differential equations. <p> conditions for the transitions to achieve the desired property from the designated final states whereas in hybrid control, one tries to derive the control events and law from the continuous dynamics of the system and the plausible transitions among phases. 2 Hybrid Automaton Model We adopt the framework proposed in <ref> [De94] </ref>, and reproduce relevant definitions below. Definition 1. A hybrid transition system H is a quintuple (Q; R n ; ; E; D), where 1. Q is a finite set of discrete phases, also called locations. 2. <p> Each differential equation is assumed to be of the form: _x = e; where x 2 V c is a continuous state variable, and e is an expression over V , where V includes V c , other noncontinuous variables and parameters, if any. As in <ref> [De94] </ref>, a hybrid transition system executes in a sequence of phases. In each phase, it first evolves continuously by allowing time to pass, and then it evolves discretely by making an instantaneous transition. <p> It is possible to generate a viable controller (in the sense of <ref> [De94, DV95] </ref>) which will enable the system to run forever. If guards on transitions can be synthesized that would lead to a repeatable cycle of phases being executed without the global invariant being violated, then it can be shown that the resulting controller is viable.
Reference: [DV95] <author> A. Deshpande and P. Varaiya, </author> <title> Viability in Hybrid Systems, </title> <booktitle> in [AKNS95], </booktitle> <pages> pp. 128-147. </pages>
Reference-contexts: It is possible to generate a viable controller (in the sense of <ref> [De94, DV95] </ref>) which will enable the system to run forever. If guards on transitions can be synthesized that would lead to a repeatable cycle of phases being executed without the global invariant being violated, then it can be shown that the resulting controller is viable.
Reference: [GNRR93] <author> R. L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel (Eds.), </author> <title> Hybrid Systems I, </title> <publisher> LNCS, 736, Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Design, analysis (verification) and synthesis (control) of hybrid systems have been an important area of active research <ref> [GNRR93, AKNS95, AHS96] </ref>. In verification, an objective is to show that a given hybrid system will satisfy a certain (temporal) property and will never enter any unsafe state.
Reference: [HRP93] <author> N. Halbwachs, P. Raymond, Y.-E. Proy. </author> <title> Verifying linear hybrid systems by means of convex approximations, </title> <booktitle> Proc. SAS 94, LNCS 864, </booktitle> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: We explain and illustrate the main steps of the methodology using a water-level controller, an example discussed extensively in the literature <ref> [HRP93, ACHHH95, Ho95] </ref>. 21Phase Phase Phase Phase 4 3 dw/dt = -2 dtc/dt = 1 tc = d : tc = d : g2 : tc := 0 Water-Level Controller: The water level in a tank is controlled through a controller, which continuously senses the water level and turns a valve
Reference: [HKPV95] <author> T. A. Henzinger, W. Kopke, A. Puri, P. Varaiya, </author> <title> What's decidable about Hybrid automata, </title> <booktitle> Proc. of the 27th Annual ACM Symposium on Theory of Computing STOC 1995. </booktitle>
Reference: [Ho95] <author> P.-H. Ho, </author> <title> The Algorithmic Analysis of Hybrid Systems, </title> <type> Ph.D Thesis, </type> <institution> Cor-nell University, </institution> <year> 1995. </year>
Reference-contexts: Transitions among phases are made based on conditions on continuous states. Since the behavior of a hybrid automaton can be complex, much research has been devoted to identifying subclasses of hybrid automata for which verification problems are decidable. Model checking techniques have been studied for verification <ref> [Ho95] </ref>. The controller synthesis problem discussed in this paper is that of identifying conditions on transitions among phases such that the continuous state of a given hybrid automaton always satisfies a given global invariant. We propose an approach using the classical techniques. <p> If so, deduce possible constraints on system parameters so that the global invariant remains satisfied. The methodology is illustrated using three examples. A linear water-level controller (in which the rates of change of water level are constants in different phases) <ref> [Ho95] </ref> is used as a running example as the methodology is presented. A slightly nontrivial version of a nonlinear water-level controller (in which the rates of change of water level are nonlinear functions as well as depend upon a system parameter) [SM94] is discussed later. <p> A slightly nontrivial version of a nonlinear water-level controller (in which the rates of change of water level are nonlinear functions as well as depend upon a system parameter) [SM94] is discussed later. This is followed by a discussion of a more general version of nuclear reactor temperature control <ref> [ACHHH95, Ho95] </ref>. It is illustrated that adopting different policies can lead to different controllers. The work on the synthesis of controllers for discrete and timed systems has been elucidated in [AMP95]. <p> These requirements are less restrictive than the requirement that the state change in a phase (or a location) has to be governed by differential equations in which variables are bounded in a fixed range (called bounded-drift linear hybrid automata in <ref> [Ho95] </ref>). <p> We explain and illustrate the main steps of the methodology using a water-level controller, an example discussed extensively in the literature <ref> [HRP93, ACHHH95, Ho95] </ref>. 21Phase Phase Phase Phase 4 3 dw/dt = -2 dtc/dt = 1 tc = d : tc = d : g2 : tc := 0 Water-Level Controller: The water level in a tank is controlled through a controller, which continuously senses the water level and turns a valve <p> may have been introduced in a phase transition model of a hybrid system to model delays involved in certain actions, e.g., opening and closing of valves in the running example, or pre-emptive signals at regular intervals using variables modeling clocks, e.g., a variation of water-tank example in chapter 5 in <ref> [Ho95] </ref>. Clock or timer is modeled using a clock variable whose derivative is 1, e. g., the variable tc in the running example. Such constraints also enforce the exact time or maximum time that could be spent in a phase. <p> For d 1 = d 2 = 2, we get the desired values of water levels as assumed in <ref> [Ho95] </ref>. It is easy to see that the controllers can be synthesized even if lower and upper bounds on water level, say L and U , respectively, in the global invariant are given as parameters. <p> The rate of net inflow into the tank is a function of the extent to which the valve is open and a system parameter. The third example is a variation on the temperature controller for a nuclear reactor discussed in <ref> [Ho95] </ref>. <p> The control law can be synthesized even if lower and upper bounds on water level in the global invariant are given as parameters. It is possible to determine conditions on L; U for which a controller cannot be synthesized. 4.2 Nuclear Reactor Temperature Control In <ref> [ACHHH95, Ho95] </ref>, variations of a nuclear reactor temperature controller are discussed. The system has a reactor core and two control rods that control the temperature of the reactor core. One of the rods cools slowly and the other rod cools faster. <p> One of the rods cools slowly and the other rod cools faster. Further, once a rod is immersed in the core, it has to remain outside for a certain period of time. In the discussion in <ref> [ACHHH95, Ho95] </ref>, the controller is straightforward: Put one of the rods in if the temperature reaches U , and take the rod out if temperature reaches L. If the time for which rods have to be outside is beyond a certain period, then rods 1 and 2 are alternated. <p> And, f = 1=10; t c = 50; k 1 = 6; and k 2 = 10, L = 510; U = 550, giving us a system similar to the one in <ref> [ACHHH95, Ho95] </ref>. For measuring time when a rod is outside the reactor after it was taken out last, as well as to measure time, a rod is inside the reactor, time counters are introduced.
Reference: [SM94] <author> H.B. Sipma and Z. Manna, </author> <title> Specification and Verification of Controlled Systems, </title> <booktitle> Proc. FTRTFT, LNCS, </booktitle> <volume> 863, </volume> <pages> 641-659, </pages> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: A slightly nontrivial version of a nonlinear water-level controller (in which the rates of change of water level are nonlinear functions as well as depend upon a system parameter) <ref> [SM94] </ref> is discussed later. This is followed by a discussion of a more general version of nuclear reactor temperature control [ACHHH95, Ho95]. It is illustrated that adopting different policies can lead to different controllers. <p> Below, we discuss two slightly nontrivial examples in which system dynamics exhibits nonlinear behavior. The second example taken from <ref> [SM94] </ref> is a variation over the first example. The rate of net inflow into the tank is a function of the extent to which the valve is open and a system parameter. The third example is a variation on the temperature controller for a nuclear reactor discussed in [Ho95].
Reference: [TE95] <author> M. Tittus and B. Egardt, </author> <title> Hybrid Objects, </title> <booktitle> in [AKNS95], </booktitle> <pages> pp. </pages> <month> 493-508. </month> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
References-found: 13

