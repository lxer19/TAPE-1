URL: http://www.cs.rice.edu:80/~dbaker/publications/memento-phd.ps
Refering-URL: http://www.cs.rice.edu:80/~dbaker/publications/phdabs.html
Root-URL: 
Title: Copyright  
Author: Donald G. Baker 
Date: 1997  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Ronald M. Baecker, </author> <title> editor. Readings in Groupware and Computer-Supported Cooperative Work. </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, California, </address> <year> 1993. </year>
Reference: [2] <author> Donald Baker, Jerry Fowler, Vram Kouramajian, Ross Dargahi, Gwyn Guidy, and Tom Lytle. Memento: </author> <title> A collaborative metaphor-independent architecture. </title> <type> Technical Report TR94-230, </type> <institution> Rice University Computer Science Department, </institution> <address> 6100 Main St., Houston, TX 77005-1892, </address> <month> February </month> <year> 1994. </year>
Reference: [3] <author> Donald G. Baker, Jerry Fowler, and G. Anthony Gorry. </author> <title> The Memento collaboration infrastructure. </title> <type> Technical Report CTTL-96-1, </type> <institution> Center for Technology in Teaching and Learning, Rice University, </institution> <address> 6100 Main St., Houston, TX 77005-1892, </address> <year> 1996. </year>
Reference: [4] <author> Liam J. Bannon and Kjeld Schmidt. </author> <title> CSCW: Four characters in search of a context. </title> <editor> In J. M. Bowers and S. D. Benford, editors, </editor> <booktitle> Studies in Computer Supported Cooperative Work: Theory, Practice, and Design. Proceedings of the First European Conference on Computer Supported Cooperative Work, </booktitle> <pages> pages 3-16, </pages> <publisher> North-Holland, </publisher> <year> 1991. </year> <note> Elsevier Science Publishers. Also published in [1]. </note>
Reference-contexts: Here, the collaboration need not occur simultaneously or in a strict ordering but can span time as well as distance. Collaboration over meaningful information artifacts has been recognized as an important type of shared work <ref> [4, 60] </ref>. In artifact-based collaboration, a collection of shared information artifacts can play the role of a group memory that might grow and evolve over a long period. <p> Another way to classify CSCW systems is by the extent the system is artifact-based. Artifact-based collaboration systems address a core CSCW problem of sharing an information space <ref> [4, 60, 92] </ref>. In artifact-based collaboration, information artifacts 19 are shared among the participants and are usually the focus of the collaboration. Note that whether a system is artifact-based is, to some extent, independent of the space and time dimensions.
Reference: [5] <author> Douglas Barry. </author> <title> Charting the feature coverage of odbmss. </title> <journal> Object Magazine, </journal> <volume> 6(12) </volume> <pages> 29-42, </pages> <month> February </month> <year> 1997. </year>
Reference-contexts: Memento's collaboration capabilities might be replaced through an OODB's support for dynamic change or assisted by an OODB's support for cooperative transactions. However, such features are supported by only a few of the commercial OODBs <ref> [5] </ref>. A typical OODB relies heavily on object versioning for concurrency resolution and leaves the onus on the developer to resolve conflicts. With a typical OODB feature set, Memento would be required to poll the database for changed MObjects and merge versions, as necessary.
Reference: [6] <author> David Beard, Murugappan Palaniappan, Alan Humm, David Banks, Anil Nair, and Yen-Ping Shan. </author> <title> A visual calendar for scheduling group meetings. </title> <booktitle> In Proceedings of the ACM 1990 Conference on Computer Supported Cooperative Work (CSCW '90), </booktitle> <pages> pages 279-290, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Domain-Specific Systems There are many artifact-based systems that address specific information or problem domains. Domain-specific systems may be well suited to their specific problem area, but often are useless outside that area. A representative list of systems in this diverse category include: * Visual Scheduler <ref> [6] </ref>, a group calendar and scheduling application; * BIBDB [83], a collaborative system for bibliographic data; * XNetwork [92], a collaborative system for designing network layouts; * ICICLE [14] for code inspection and annotation; * IBIS/gIBIS [23, 24, 110] and SIBYL [74], collaborative systems for group design deliberation; * Colab [104],
Reference: [7] <author> Edward V. Berard. </author> <booktitle> Essays on Object-Oriented Software Engineering, </booktitle> <volume> volume 1. </volume> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1993. </year> <month> 137 </month>
Reference-contexts: Often, this result takes the form of diagrams and a formalized notation for capturing and communicating the design such as semantic networks, petri-nets, or state diagrams <ref> [7] </ref>. Once an assistant is built, it becomes a programmatic embodiment of its domain. Here, the semantic constraints are hard-coded into the assistant application. The hard-coded semantic constraints are used during all of the assistant's key processes. <p> These components are derived from an analysis of the target domain. Object-oriented analysis and design <ref> [10, 7] </ref> is one such analysis method. The declarative MObjectClass and ModelClass instances describe the assistant's semantic constraints that Memento can directly enforce. An MObjectClass instance characterizes a domain-specific MType and its expected attributes. MObjectClass 102 instances were described in Section 2.4.2. <p> Several methodologies have been proposed for this process <ref> [10, 7] </ref>. The result of the object-oriented design is usually a set of diagrams that capture the essence of the software system to be built. It is often a straightforward process to translate the design diagrams into Memento metamodels, described in Section 3.2.
Reference: [8] <author> Lucy M. Berlin, Robin Jeffries, Vicki L. O'Day, Andreas Paepcke, and Cathleen Wharton. </author> <title> Where did you put it? Issues in the design and use of a group memory. </title> <booktitle> In Human Factors in Computing Systems: INTERCHI '93 Conference Proceedings, </booktitle> <pages> pages 23-30. </pages> <publisher> ACM, </publisher> <year> 1993. </year>
Reference-contexts: * how organizational memories must undergo periodic reorganizations, called re seeding [44], to maintain their usefulness; 128 * how the domain of the organizational memory can co-evolve with its content through a process called incremental formalization [99]; and * how groups must come to a consensus on their filing patterns <ref> [8] </ref>. At present, Memento provides no direct support for the reorganization of an organizational memory stored therein. Memento does, however, provide several mechanisms that support the evolution of its information spaces and their domains that are described above.
Reference: [9] <author> Daniel G. Bobrow, Sanjay Mittal, and Mark J. </author> <title> Stefik. </title> <journal> Expert systems: Perils and promise. Communications of the ACM, </journal> <volume> 29(9) </volume> <pages> 880-894, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: Like most applications, assistants generally have a significant user interface component. For example, it has been estimated that one-third to one-half of an expert system application's code size is devoted to its user interface <ref> [9] </ref>. There is no reason to expect that this estimate would not generalize to the broader class of assistants. Unfortunately, user interfaces 16 take a disproportionate share of development time and effort. Unlike most software projects, a user interface cannot be specified in advance.
Reference: [10] <author> Grady Booch. </author> <title> Object-Oriented Design with Applications. </title> <publisher> Benjamin Cummings Publishing Company, </publisher> <address> Redwood City, California, </address> <year> 1991. </year>
Reference-contexts: These components are derived from an analysis of the target domain. Object-oriented analysis and design <ref> [10, 7] </ref> is one such analysis method. The declarative MObjectClass and ModelClass instances describe the assistant's semantic constraints that Memento can directly enforce. An MObjectClass instance characterizes a domain-specific MType and its expected attributes. MObjectClass 102 instances were described in Section 2.4.2. <p> Several methodologies have been proposed for this process <ref> [10, 7] </ref>. The result of the object-oriented design is usually a set of diagrams that capture the essence of the software system to be built. It is often a straightforward process to translate the design diagrams into Memento metamodels, described in Section 3.2.
Reference: [11] <author> R. J. Brachman and J. G. Schmolze. </author> <title> An overview of the KL-ONE knowledge representation system. </title> <journal> Cognitive Science, </journal> <volume> 9(2) </volume> <pages> 171-185, </pages> <year> 1985. </year>
Reference-contexts: Through the separation of Memento's first and second layers, Memento could be adapted for use with other knowledge representation schemes. A likely candidate is the well-known graph-based knowledge representation system KL-ONE <ref> [11] </ref>. Rather than survey the extensive area of knowledge representation in this section, attention is given to three systems that use knowledge representation schemes to achieve applications that augment the human intellect|systems that meet the definition of assistants.
Reference: [12] <institution> Brtderbund Software, Inc., </institution> <address> 500 Redwood Blvd., Novato, California 94948-6121. Myst, Macintosh edition, </address> <year> 1993. </year>
Reference-contexts: The acknowledgments section credits the various people who have contributed to the development of these assistants. 4.2.1 "Virtual Reality" Walker The Virtual Reality Walker (VRW) assistant is a simple, non-collaborative, modeler application inspired by the popular computer game "Myst" <ref> [12] </ref>. In the game, the user navigates around a computer-generated island and solves puzzles. For the most part, what the user sees is rendered images from various positions on the island.
Reference: [13] <author> Frederick P. Brooks, Jr. </author> <title> No silver bullet: </title> <journal> Essence and accidents of software engineering. IEEE Computer, </journal> <volume> 20(4) </volume> <pages> 10-19, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: EGRET provides mechanisms for evolution similar to those of Memento. EGRET's developer, Philip Johnson, coined the term exploratory collaboration to describe situations in which evolution is anticipated. Frederick Brooks argued, however, that growing programs is a more apt metaphor of software development than building programs <ref> [13] </ref>. Section 1.1.2 identifies the user interface component as a significant source of evolutionary change in assistant applications. Because evolution of any software system is an important part of its life cycle, support for assistant evolution is a goal of Memento. <p> Due to the limited scope of this dissertation, this third potential reuse scenario has yet to be demonstrated. Such a scenario might only arise after several years of usage of the Memento infrastructure. 131 5.3.3 Software Evolution Change is an inevitable part of any successful computer system <ref> [13] </ref>. Section 1.3 identified the user interface component as an important source of change in assistants. Support for an assistant's evolution is an important goal and contribution of Memento. Memento provides two mechanisms to support assistant evolution.
Reference: [14] <author> L. Brothers, V. Sembugamoorthy, and M. Muller. ICICLE: </author> <title> Groupware for code inspection. </title> <booktitle> In Proceedings of the ACM 1990 Conference on Computer Supported Cooperative Work (CSCW '90), </booktitle> <pages> pages 169-181, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: A representative list of systems in this diverse category include: * Visual Scheduler [6], a group calendar and scheduling application; * BIBDB [83], a collaborative system for bibliographic data; * XNetwork [92], a collaborative system for designing network layouts; * ICICLE <ref> [14] </ref> for code inspection and annotation; * IBIS/gIBIS [23, 24, 110] and SIBYL [74], collaborative systems for group design deliberation; * Colab [104], an early system to support group meetings; and * systems for group decision making, surveyed in [70, 29].
Reference: [15] <author> Eric W. Brown, James P. Callan, and W. Bruce Croft. </author> <title> Fast incremental indexing for full-text information retrieval. </title> <booktitle> In Proceedings of the 20th International Conference on Very Large Databases (VLDB). ACM, </booktitle> <year> 1994. </year>
Reference-contexts: URLs, documents, and ES pages become WWW links to their destination. 4.2.5 INQUERY Document Indexing Agent Another Electronic Studio agent adds a query capability over documents contained in the ES information space. The INQUERY Document Indexing Agent is built upon the INQUERY full-text information retrieval system <ref> [15] </ref>, developed at the University of Massachusetts. The agent maintains indices for all documents in the information space by watching for newly created documents, document modifications, and document destructions, and invoking INQUERY to index documents, as needed.
Reference: [16] <author> Vannevar Bush. </author> <title> As we may think. </title> <journal> The Atlantic Monthly, </journal> <volume> 176(1) </volume> <pages> 101-108, </pages> <month> July </month> <year> 1945. </year>
Reference-contexts: One such worthwhile end is augmenting human intelligence. Using computers to augment human intelligence is not a new idea. As early as 1945, Vannevar Bush proposed a system called Memex which would allow the user to quickly access and annotate information which was relevant to him <ref> [16] </ref>. A user of Memex could navigate through cross-references and save his exploratory trails for later recall. Bush did not speak of computers when he proposed Memex, however he correctly identified knowledge accessibility and the interlinking of related knowledge as central themes in the augmentation of human intelligence. <p> As such, Memento is a contribution to the broad area of augmentation, or the use of computers to enhance human intellectual capabilities. Early contributions to this field include the Memex system proposed by Vannevar Bush in 1945 <ref> [16] </ref> and Doug Engelbart's ground-breaking NLS/Augment system [36] in 1968. Both contributions have made a profound impact on computer science and have served as the premier systems in several subsequently spawned fields of research, most notably that of hypertext and hypermedia.
Reference: [17] <author> Stuart K. Card, George G. Robertson, and Jock D. Mackinlay. </author> <title> The information visualizer, an information workspace. </title> <booktitle> In Human Factors in Computer Systems: CHI '91 Conference Proceedings, </booktitle> <pages> pages 181-188, </pages> <address> New Orleans, LA, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: The semantic level of the user interface is far more difficult to study. Only a few research groups have addressed it. Researchers at Xerox have undertaken a program to explore how user interface metaphors lend themselves to various general information domains <ref> [17, 93] </ref>. Their goal is to develop a rich vocabulary of reusable metaphors. A group at George Washington University explored separating the semantic level of the user interface from the more concrete levels so that they may be parameterized for different user communities [39, 48].
Reference: [18] <author> Michael J. Carey, Laura M. Haas, Peter M. Schwarz, Manish Arya, William F. Cody, Ronald Fagin, Myron Flickner, Allen W. Luniewski, Wayne Niblack, Dragutin Petkovic, John Thomas, John H. Williams, and Edward L. Wimmers. </author> <title> Towards heterogeneous multimedia information systems: The garlic approach. </title> <booktitle> 138 In Proceedings of the Fifth International Workshop on Research Issues in Data Engineering (RIDE): Distributed Object Management, </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: CORBA [86] is a distributed object middleware standard that allows for the integration of a diversity of cooperating network-based information producers and consumers. IBM Almaden's ongoing Garlic <ref> [18] </ref> project attempts to integrate a variety of databases and other information stores to create a unified multimedia information system. Memento, too, could be considered a middleware infrastructure for the integration of divergent information stores. Through Memento's repository concept, diverse information stores are coherently unified.
Reference: [19] <author> John M. Carroll, Robert L. Mack, and Wendy A. Kellogg. </author> <title> Interface metaphors and user interface design. </title> <editor> In Martin Helander, editor, </editor> <title> Handbook of Human-Computer Interaction, </title> <booktitle> chapter 3, </booktitle> <pages> pages 67-85. </pages> <publisher> Elsevier Science Publishers, North Holland, </publisher> <year> 1988. </year>
Reference-contexts: Such research dovetails nicely with the notion of a domain-based infrastructure such as that discussed in this dissertation. Often there is a close connection between the visible user interface metaphor of an application and its information domain <ref> [19] </ref>. Research into the semantic level of the user interface has lagged behind that of the other levels. As a result, there are no tools that aid in the development of the semantic level of the user interface.
Reference: [20] <author> John M. Carroll and Judith Reitman Olson. </author> <title> Mental models in human-computer interaction. </title> <editor> In M. Helander, editor, </editor> <title> Handbook of Human-Computer Interaction, </title> <booktitle> chapter 2, </booktitle> <pages> pages 45-65. </pages> <publisher> Elsevier Science Publishers, North Holland, </publisher> <year> 1988. </year>
Reference-contexts: It is the range of the assistant's "knowledge." Items in the domain are meaningful information groupings called models. A domain can be thought of as a space of possible models. Models originate in the mind of a user, perhaps in the form of mental models <ref> [85, 20] </ref>. In order to take advantage of an assistant's abilities, a user must be able to communicate a model to an assistant. When this happens, the model becomes the subject of a conversation between the user and assistant.
Reference: [21] <author> R. G. G. Cattell. </author> <title> Object Data Management. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: Memento's relation to the other two technologies is now discussed. Object-Oriented Databases Memento's first level, as presented in this chapter, addresses many of the same issues as object-oriented databases (OODBs). Both have an object-based data model. Both deal with persistence of objects, inheritance hierarchies, coherent transactions, and schema evolution <ref> [21] </ref>. In order to explore the relationship between OODBs and Memento's first layer, three scenarios are explored: * replace Memento's first layer with an OODB, * claim that Memento's first layer is an OODB, or * use an OODB as a specific MObject repository.
Reference: [22] <author> Peter Pin-Shan Chen. </author> <title> The entity-relationship model|toward a unified view of data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <year> 1976. </year>
Reference-contexts: Section 3.1.2 describes this simplification and others in more detail. 73 Comparison with the Entity-Relationship Model The Entity-Relationship model, first proposed by Peter Chen in 1976 <ref> [22] </ref>, is a well-known data representation scheme which closely resembles conceptual graphs. Concepts correspond closely with entities, relations with relationships, and relation positions with roles.
Reference: [23] <author> Jeff Conklin and Michael L. Begeman. gIBIS: </author> <title> A hypertext tool for team design deliberation. </title> <booktitle> In Hypertext '87 Papers, </booktitle> <pages> pages 247-251. </pages> <publisher> ACM, </publisher> <month> November </month> <year> 1987. </year>
Reference-contexts: A representative list of systems in this diverse category include: * Visual Scheduler [6], a group calendar and scheduling application; * BIBDB [83], a collaborative system for bibliographic data; * XNetwork [92], a collaborative system for designing network layouts; * ICICLE [14] for code inspection and annotation; * IBIS/gIBIS <ref> [23, 24, 110] </ref> and SIBYL [74], collaborative systems for group design deliberation; * Colab [104], an early system to support group meetings; and * systems for group decision making, surveyed in [70, 29]. <p> CSCW toolkits will be discussed in Section 5.1.2. Collaborative hypermedia systems for specific domains include Baylor College of Medicine's Virtual Notebook System [50] 20 , whose hyperlinked documents are pages organized into notebooks, and gIBIS <ref> [110, 23, 24] </ref>, a collaborative hypertext tool specialized for team design deliberation developed at the Microelectronics and Computer Technology Corporation (MCC). The relation between Memento and collaborative hypermedia is discussed later, in Section 5.1.2 where Memento is compared with various hypermedia toolkits. <p> Two important uses of organizational memories are for shared design environments and for computer supported collaborative learning (CSCL). Examples of design environments are XNetwork [92] for network designs and IBIS/gIBIS <ref> [23, 24, 110] </ref> for capturing design deliberation. Both systems have been mentioned earlier. Another domain in which design has been extensively studied is software engineering design environments [42, 107]. Computer supported collaborative learning (CSCL) uses artifact-based collaboration for the end of education. CSCL systems are sometimes called collaboratories [69].
Reference: [24] <author> Jeff Conklin and Michael L. Begeman. gIBIS: </author> <title> A hypertext tool for exploratory policy discussion. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 6(4), </volume> <month> Oc-tober </month> <year> 1988. </year> <note> Also appears in the 1988 Conference on Computer Supported Cooperative Work (CSCW '88). </note>
Reference-contexts: A representative list of systems in this diverse category include: * Visual Scheduler [6], a group calendar and scheduling application; * BIBDB [83], a collaborative system for bibliographic data; * XNetwork [92], a collaborative system for designing network layouts; * ICICLE [14] for code inspection and annotation; * IBIS/gIBIS <ref> [23, 24, 110] </ref> and SIBYL [74], collaborative systems for group design deliberation; * Colab [104], an early system to support group meetings; and * systems for group decision making, surveyed in [70, 29]. <p> CSCW toolkits will be discussed in Section 5.1.2. Collaborative hypermedia systems for specific domains include Baylor College of Medicine's Virtual Notebook System [50] 20 , whose hyperlinked documents are pages organized into notebooks, and gIBIS <ref> [110, 23, 24] </ref>, a collaborative hypertext tool specialized for team design deliberation developed at the Microelectronics and Computer Technology Corporation (MCC). The relation between Memento and collaborative hypermedia is discussed later, in Section 5.1.2 where Memento is compared with various hypermedia toolkits. <p> Two important uses of organizational memories are for shared design environments and for computer supported collaborative learning (CSCL). Examples of design environments are XNetwork [92] for network designs and IBIS/gIBIS <ref> [23, 24, 110] </ref> for capturing design deliberation. Both systems have been mentioned earlier. Another domain in which design has been extensively studied is software engineering design environments [42, 107]. Computer supported collaborative learning (CSCL) uses artifact-based collaboration for the end of education. CSCL systems are sometimes called collaboratories [69].
Reference: [25] <author> Nancy Jaworski Cooke. </author> <title> A methodology for capturing the illusive mental model. </title> <booktitle> In Proceedings of USICON '88, 3rd Annual User-System Interface Conference, </booktitle> <pages> pages 167-175, </pages> <year> 1988. </year>
Reference-contexts: In such a case, the assistant may employ a user interface metaphor to help its users map the "real world" onto the target domain. The semantic constraints of a domain can be extracted from a single expert or representatives of a user community by means of knowledge elicitation techniques <ref> [25] </ref>. Assistants are the result of conscious design by software engineers. Designers, therefore, must have a means of formally describing domains and their semantic constraints as part of an assistant's design.
Reference: [26] <author> Brad J. Cox and Andrew J. Novobilski. </author> <title> Object Oriented Programming: an Evolutionary Approach. </title> <publisher> Addison Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1991. </year>
Reference-contexts: Each framework is intended to be reused in a variety of situations. A given framework can be specialized to solve a more specific problem. To solve more complex problems, frameworks for different problems can be combined like software integrated circuits <ref> [26] </ref>. Historically, the first software systems called frameworks were application frameworks. Application frameworks try to solve the general problem of building applications on a particular platform. Such a framework embodies the hard part of building an application.
Reference: [27] <author> Pavel Curtis and David A. Nichols. </author> <title> MUDs grow up: Social virtual reality in the real world. </title> <booktitle> In Proceedings of the Third International Conference on Cyberspace, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Typically, the locales are portrayed as interconnected rooms where the participants in each room have an awareness of the others present. Representative systems include WORLDS [47, 108] from the University of Illinois at Urbana-Champaign and Xerox's Jupiter multi-user dungeon (MUD) <ref> [27] </ref>. Studies 20 The Virtual Notebook System is now a commercial product marketed by the Forefront Group. 120 of these systems focus on the social interaction that occurs in the workspace [46]. Virtual workspace systems are artifact-based in the sense that the presence of locales and participants are shared artifacts.
Reference: [28] <author> Harry S. Delugach. </author> <title> Specifying multiple-viewed software requirements with conceptual graphs. </title> <journal> Journal of Systems Software, </journal> <volume> 19(3) </volume> <pages> 207-224, </pages> <month> November </month> <year> 1992. </year> <month> 139 </month>
Reference-contexts: The domain representation construction process was discussed in Section 4.1. Note that assistant developers are not required to use OOAD methodologies to create an assistant's metamodels. Algorithms are available to convert from other requirements formalisms to that of conceptual graph schemata <ref> [28] </ref>. 5.4 Knowledge Representation Knowledge representation is a broad area with many diverse contributions. A single, widely-accepted knowledge representation scheme was chosen as the basis for Memento's second layer.
Reference: [29] <author> A. R. Dennis, F. G. Joey, L. M. Jessup, J. F. Nunamaker, and D. R. Vo-gel. </author> <title> Information technology to support electronic meetings. </title> <journal> MIS Quarterly, </journal> <volume> 12(4) </volume> <pages> 591-619, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: XNetwork [92], a collaborative system for designing network layouts; * ICICLE [14] for code inspection and annotation; * IBIS/gIBIS [23, 24, 110] and SIBYL [74], collaborative systems for group design deliberation; * Colab [104], an early system to support group meetings; and * systems for group decision making, surveyed in <ref> [70, 29] </ref>. Domain-specific artifact-based collaboration systems such as these are considered assistants because they each have an understanding of their specific domain. These systems can be implemented using the domain-independent Memento infrastructure.
Reference: [30] <author> Prasun Dewan. </author> <title> Tools for implementing multiuser user interfaces. </title> <editor> In Len Bass and Prasun Dewan, editors, </editor> <booktitle> User Interface Software, chapter 8, </booktitle> <pages> pages 149-174. </pages> <publisher> John Wiley and Sons, Ltd., </publisher> <address> Chichester, West Sussex, England, </address> <year> 1993. </year>
Reference-contexts: This section describes how Memento relates to other toolkits that support collaboration. The classification of computer supported cooperative work (CSCW) toolkits developed by Dewan <ref> [30] </ref> categorizes Memento as a shared object system. Shared object CSCW toolkits are well suited for use with assistants; because they are artifact-based, they can provide for real-time updates without embodying assumptions about the user interfaces of their applications.
Reference: [31] <author> Prasun Dewan and Rajiv Choudhary. </author> <title> A high-level and flexible framework for implementing multiuser user interfaces. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(4) </volume> <pages> 345-380, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: In many of these systems, applications have little or no semantic knowledge of their data, but simply act to coordinate the shared input stream and maintain view consistency. Important toolkits that address the sharing of user interface components include GroupKit [94], Suite <ref> [31] </ref>, COAST [97], DistView [91], and Rendezvous [89]. Often, the focus of these systems is on the process of collaboration, specifically with regard to coordination of actions, and not on the information artifacts being manipulated.
Reference: [32] <institution> Digital Equipment Corporation. </institution> <note> Linkworks Version 3.0 User's Guide, </note> <year> 1995. </year>
Reference-contexts: CSCW assistants that facilitate workflow coordinate the ordering of work done by members of a group. Such assistants may use a mail box or in-basket to notify group members of new work to be done. Lotus Notes [75] and Digital Equipment Corporation's Linkworks <ref> [32] </ref> are two commercial CSCW applications that facilitate workflow. Finally, artifact-based collaboration assistants can facilitate access to meaningful models in a shared information repository. Here, the collaboration need not occur simultaneously or in a strict ordering but can span time as well as distance. <p> WORLDS can be considered a generalization of the workflow concept found in many commercial collaboration products, most notably DEC's Linkworks <ref> [32] </ref>. Memento currently provides no direct support for representing actions and flows. However, Memento could support such artifact-based extensions. Information flows and actions could be expressed in a Memento-based domain representation. A Memento-based information agent could act as an engine for dynamically executing the actions specified within flows. <p> Section 1.1.1 identified agents as an important class of assistants. Memento supports information agents primarily through its MObject change notification mechanism, described in Section 2.3. Two Memento-based information agents were demonstrated in Chapter 4. Other collaborative systems, including Oval [76, 77], HOS [99], Linkworks <ref> [32] </ref>, WORLDS [47, 108] (all mentioned earlier) provide support for agents. Oval even supports the end-user construction of information agents. One key difference between Memento and these systems, however, is that like any other Memento-based assistant, a Memento-based agent operates only on the models from its specified domain.
Reference: [33] <author> Paul Dourish. </author> <title> Consistency guarantees: Exploiting application semantics for consistency management in a collaboration toolkit. </title> <booktitle> In Proceedings of the ACM 1996 Conference on Computer Supported Cooperative Work (CSCW '96), </booktitle> <pages> pages 268-277, </pages> <month> November </month> <year> 1996. </year>
Reference-contexts: As currently developed, Memento does not provide mechanisms to aid in the process of collaboration, however, such mechanisms could be built as a layer upon Memento. There is often a trade-off in such toolkits between being general purpose and exploiting the semantics of the collaborative application to optimize performance <ref> [33] </ref>. While Memento's focus is on domain-independence, 121 Memento may be able to make use of an assistant's explicit semantic information to improve performance. This possibility was discussed in Section 3.6.1. Memento's focus is on meaningful information artifacts, called models, that are manipulated by Memento-based assistants.
Reference: [34] <author> Ernest A. Edmonds, Linda Candy, Rachel Jones, and Bassel Soufi. </author> <title> Support for collaborative design: Agents and emergence. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 41-47, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: As mentioned earlier, Memento addresses both of these issues. Capturing semantic information allows the organizational memory to have more meaning and richness. It also enables the use of more powerful software tools, such as information agents. Agents can provide critical assistance to designers <ref> [34] </ref>. Semantic information can be incorporated either through direct programming of domain-specific collaborative tools, or through the use of a domain-independent knowledge representation scheme. Memento uses the latter approach. Knowledge representation schemes are discussed in Section 5.4.
Reference: [35] <author> C. A. Ellis, S. J. Gibbs, and G. L. Rein. </author> <title> Groupware: Some issues and experiences. </title> <journal> Communications of the ACM, </journal> <volume> 34(1) </volume> <pages> 38-58, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Because the infrastructure solves the difficult problem of collaboration over an assistant's models in an generalized way, collaborative assistants can be more easily constructed using the infrastructure. Collaborative systems over specific domains are generally regarded as difficult to build from the ground up <ref> [35] </ref>. A generalized infrastructure can solve the difficult problem of meaning maintenance: the representation, storage, coherent manipulation, and transmission of models from each assistant's domain. <p> CSCW is a broad field that includes computer conferencing, multi-user dungeons (MUDs), blackboard technologies, collaborative document authoring, workflow applications, and electronic mail <ref> [35] </ref>. Unfortunately, because of the commercial importance of CSCW, many important and useful systems are not described in the academic literature. First-hand study of such proprietary systems is either difficult or prohibitively expensive. The few commercial systems that are available to the author will be mentioned here. <p> First-hand study of such proprietary systems is either difficult or prohibitively expensive. The few commercial systems that are available to the author will be mentioned here. CSCW systems are often classified as to their ability to support collaboration across space and/or time <ref> [35, 96] </ref>. In one extreme of the space dimension, an electronic classroom might require the co-location of the participants. In the other extreme, distributed systems, such as electronic mail, place few constraints on the users' physical locations. <p> In doing so, a bulk responsibility of domain-specific artifact-based collaboration in each assistant could be delegated to the resuable Memento infrastructure. Collaborative Document Editing Collaborative document editing systems assist with the important task of group authoring. Representative systems include GROVE <ref> [35] </ref>, Quilt [45], and the collaborative editor toolkit, DistEdit [67]. As mentioned in Section 3.6.4, Memento is probably 119 not suitable for the development of collaborative document editing systems because of the fine information granularity required by such systems.
Reference: [36] <author> D. C. Engelbart and W. K. </author> <title> English. A research center for augmenting the human intellect. </title> <booktitle> In AFIPS Conference Proceedings, 1968 Fall Joint Computer Conference, </booktitle> <pages> pages 395-410, </pages> <address> San Francisco, CA, </address> <month> December </month> <year> 1968. </year>
Reference-contexts: Englebart's group realized the importance of the user interface to their task at hand. The group invented many new technologies such as showing video on computer screens, hypertext authoring, and several user interface devices, including the mouse <ref> [36] </ref>. This dissertation does not concern itself with a single system to augment the human intellect. Instead, a broad class of such systems, called assistants, is considered. Assistants and their users form an intellectual synergism. <p> As such, Memento is a contribution to the broad area of augmentation, or the use of computers to enhance human intellectual capabilities. Early contributions to this field include the Memex system proposed by Vannevar Bush in 1945 [16] and Doug Engelbart's ground-breaking NLS/Augment system <ref> [36] </ref> in 1968. Both contributions have made a profound impact on computer science and have served as the premier systems in several subsequently spawned fields of research, most notably that of hypertext and hypermedia. Today, important subfields of augmentation include human-computer interaction and computer-supported cooperative work (CSCW). <p> Hypermedia has grown in importance due to its natural flexibility. While the focus in hypermedia is usually on the reader of static hypermedia webs, many systems support authoring. A subset of those systems support the real-time collaborative construction of hypermedia webs. These systems include NLS/Augment <ref> [36] </ref> from the Stanford Research Institute, Xerox's NoteCards [57, 59], Brown University's Intermedia [80, 73], the University of North Carolina's Artifact Based Collaboration (ABC) System [60, 102], and SEPIA [105] from the Integrated Publication and Information Systems Institute at the German National Research Center for Information Technology (GMD).
Reference: [37] <author> Douglas C. Engelbart. </author> <title> Knowledge-domain interoperability and an open hyper-document system. </title> <booktitle> In Proceedings of the ACM 1990 Conference on Computer Supported Cooperative Work (CSCW '90), </booktitle> <pages> pages 143-156, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Future work on Memento will attempt to realize this potential in several areas. First, Memento might transparently support cross-domain interoperability through the simultaneous enforcement of related metamodels in a single information space shared by multiple assistants. Cross-domain interoperability is considered an important goal of computer-supported cooperative work <ref> [37] </ref>. This scenario was described in Section 3.6.2. Next, Memento may facilitate the reuse of high-level user interface components when shared between suites of related assistants. This type of potential software reuse was discussed in Section 5.3.2. Finally, Memento may facilitate the construction of entirely new types of assistants.
Reference: [38] <author> George Ernst and Allen Newell. </author> <title> GPS: A Case Study in Generality and Problem Solving. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: An ideal assistant would be a logical consequence of machine intelligence. The field of artificial intelligence is devoted to the problem of making computers more intelligent. Early artificial intelligence research met with surprising successes. During the 1960s and 1970s, systems like the General Problem Solver <ref> [38] </ref> and MYCIN [101] were solving problems in areas (math and disease diagnosis) thought to be the exclusive domain of human experts. More recent research, however, has forced us to reevaluate our expectations of computer intelligence (and hence, assistants).
Reference: [39] <author> Michael Feldman and George T. Rogers. </author> <title> Towards the design and development of style-independent interactive systems. </title> <booktitle> In Human Factors In Computer Systems: CHI '82 Conference Proceedings, </booktitle> <pages> pages 111-116. </pages> <publisher> ACM, </publisher> <year> 1982. </year> <month> 140 </month>
Reference-contexts: Their goal is to develop a rich vocabulary of reusable metaphors. A group at George Washington University explored separating the semantic level of the user interface from the more concrete levels so that they may be parameterized for different user communities <ref> [39, 48] </ref>. In their research, the semantic layer of the user interface is not varied. Other groups have explored the notion of reusable user interface widgets that convey semantic information via familiar visual information organizations [58, 84, 111, 61].
Reference: [40] <author> Gerhard Fischer. </author> <title> Symbiotic, knowledge-based computer support systems. </title> <journal> Au-tomatica, </journal> <volume> 19(6) </volume> <pages> 627-637, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: The three systems are: Fischer's Information Management System (IMS) developed at the University of Stuttgart; SHADE, from the Stanford Knowledge System Laboratory, mentioned earlier; and Graves' WEAVE System, developed at the University of Michigan. The Information Management System (IMS), described in <ref> [40] </ref>, is a programming environment that is based on an object-oriented LISP derivative called OBJTALK. <p> While the IMS system has not had a big impact on later systems, the discussion in <ref> [40] </ref> of symbiotic, knowledge-based computer support systems has influenced the author's philosophy of assistants and their support by Memento. SHADE [79], mentioned earlier, is an infrastructure for the sharing of engineering design information among computer-aided engineering systems. SHADE uses the LISP-like Knowledge Interchange Format (KIF) as its knowledge representation scheme.
Reference: [41] <author> Gerhard Fischer. </author> <title> Human-computer interaction software: Lessons learned, challenges ahead. </title> <journal> IEEE Software, </journal> <volume> 6(1) </volume> <pages> 44-52, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: Ideally, the user must have the feeling that he is interacting directly with the assistant's models. Fischer and Lemke have used the term human-problem domain communication to describe this idea <ref> [43, 41] </ref>. Their ideas apply just as well to assistants' information domains. They make the point that there is currently too little focus on this deeper level of communication in the construction of user interfaces. <p> Meaning is conveyed through the semantic level of the user interface via models that have representations both inside an assistant and in the mind of its user. Fischer and Lemke have used the term human-problem domain communication to describe this general idea <ref> [43, 41] </ref>. Memento supports human-problem domain communication in assistants through mechanisms which convey models and their domains via the semantic level of the user interface. <p> Section 3.6.3 described these mechanisms. * Memento provides mechanisms for the communication of models and semantic constraints via the semantic level of the user interface. These mechanisms, described in Section 3.5, facilitate human-problem domain communication <ref> [41, 43] </ref> in Memento-based assistants.
Reference: [42] <author> Gerhard Fischer, Andreas Girgensohn, Kumiyo Nakakoji, and David Redmiles. </author> <title> Supporting software designers with integrated domain-oriented design environments. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(6) </volume> <pages> 511-522, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Design environments are suites of applications where one or more users design something such as a computer network topology, a kitchen layout, or a program <ref> [92, 43, 42] </ref>. Design environments have domain-specific knowledge of the objects being designed by their users. <p> Examples of design environments are XNetwork [92] for network designs and IBIS/gIBIS [23, 24, 110] for capturing design deliberation. Both systems have been mentioned earlier. Another domain in which design has been extensively studied is software engineering design environments <ref> [42, 107] </ref>. Computer supported collaborative learning (CSCL) uses artifact-based collaboration for the end of education. CSCL systems are sometimes called collaboratories [69]. Not surprisingly, the focus of these systems is on their effectiveness as a teaching tool and the experience of the learner using them [109].
Reference: [43] <author> Gerhard Fischer and Andreas C. Lemke. </author> <title> Construction kits and design environments: Steps toward human problem-domain communication. </title> <journal> Human-Computer Interaction, </journal> <volume> 3(3) </volume> <pages> 179-222, 1987-1988. </pages>
Reference-contexts: Design environments are suites of applications where one or more users design something such as a computer network topology, a kitchen layout, or a program <ref> [92, 43, 42] </ref>. Design environments have domain-specific knowledge of the objects being designed by their users. <p> Ideally, the user must have the feeling that he is interacting directly with the assistant's models. Fischer and Lemke have used the term human-problem domain communication to describe this idea <ref> [43, 41] </ref>. Their ideas apply just as well to assistants' information domains. They make the point that there is currently too little focus on this deeper level of communication in the construction of user interfaces. <p> Meaning is conveyed through the semantic level of the user interface via models that have representations both inside an assistant and in the mind of its user. Fischer and Lemke have used the term human-problem domain communication to describe this general idea <ref> [43, 41] </ref>. Memento supports human-problem domain communication in assistants through mechanisms which convey models and their domains via the semantic level of the user interface. <p> Section 3.6.3 described these mechanisms. * Memento provides mechanisms for the communication of models and semantic constraints via the semantic level of the user interface. These mechanisms, described in Section 3.5, facilitate human-problem domain communication <ref> [41, 43] </ref> in Memento-based assistants.
Reference: [44] <author> Gerhard Fischer, Ray McCall, Jonathan Ostwald, Brent Reeves, and Frank Shipman. </author> <title> Seeding, evolutionary growth and reseeding: Supporting the incremental development of design environments. </title> <booktitle> In Human Factors in Computing Systems: CHI '94 Conference Proceedings, </booktitle> <pages> pages 292-298. </pages> <publisher> ACM, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: Memento uses the latter approach. Knowledge representation schemes are discussed in Section 5.4. Issues arising in the evolution of group memory include: * how organizational memories must undergo periodic reorganizations, called re seeding <ref> [44] </ref>, to maintain their usefulness; 128 * how the domain of the organizational memory can co-evolve with its content through a process called incremental formalization [99]; and * how groups must come to a consensus on their filing patterns [8].
Reference: [45] <author> R. Fish, R. Kraut, M. Leland, and M. Cohen. Quilt: </author> <title> A collaborative tool for cooperative writing. </title> <booktitle> In Proceedings of the Conference on Office Information Systems, </booktitle> <pages> pages 30-37, </pages> <address> New York, 1988. </address> <publisher> ACM. </publisher>
Reference-contexts: In doing so, a bulk responsibility of domain-specific artifact-based collaboration in each assistant could be delegated to the resuable Memento infrastructure. Collaborative Document Editing Collaborative document editing systems assist with the important task of group authoring. Representative systems include GROVE [35], Quilt <ref> [45] </ref>, and the collaborative editor toolkit, DistEdit [67]. As mentioned in Section 3.6.4, Memento is probably 119 not suitable for the development of collaborative document editing systems because of the fine information granularity required by such systems.
Reference: [46] <author> Geraldine Fitzpatrick, Simon Kaplan, and Tim Mansfield. </author> <title> Physical spaces, virtual places and social worlds: A study of work in the virtual. </title> <booktitle> In Proceedings of the ACM 1996 Conference on Computer Supported Cooperative Work (CSCW '96), </booktitle> <pages> pages 334-343, </pages> <month> November </month> <year> 1996. </year>
Reference-contexts: Studies 20 The Virtual Notebook System is now a commercial product marketed by the Forefront Group. 120 of these systems focus on the social interaction that occurs in the workspace <ref> [46] </ref>. Virtual workspace systems are artifact-based in the sense that the presence of locales and participants are shared artifacts. In some systems, participants can bring information artifacts, such as documents, to be shared with other participants in their locale.
Reference: [47] <author> Geraldine Fitzpatrick, William Tolone, and Simon M. Kaplan. </author> <title> Work, locales and distributed social worlds. </title> <editor> In H. Marmolin, Y. Sundblad, and K. Schmidt, editors, </editor> <booktitle> Proceedings of the Fourth European Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 1-16. </pages> <publisher> Kluwer Academic Publishers, </publisher> <month> September </month> <year> 1995. </year>
Reference-contexts: Two key components of virtual workspaces are a sense of locale and an awareness of others also present in one's locale. Typically, the locales are portrayed as interconnected rooms where the participants in each room have an awareness of the others present. Representative systems include WORLDS <ref> [47, 108] </ref> from the University of Illinois at Urbana-Champaign and Xerox's Jupiter multi-user dungeon (MUD) [27]. Studies 20 The Virtual Notebook System is now a commercial product marketed by the Forefront Group. 120 of these systems focus on the social interaction that occurs in the workspace [46]. <p> Other important systems to support collaboration over graph structures include MIT's Oval [76, 77], based on the earlier ObjectLens [72] and the University of Illinois at Urbana-Champaign's WORLDS <ref> [47, 108] </ref>, which uses graph structures to specify activities and workflows. Oval, which stands for objects, views, agents and links, is a collaborative environment which supports the end-user development of applications. Objects in Oval are typed collections of fields and actions. <p> Two contrasting approaches for dealing with explicit semantic information could be called the programming approach and the data approach. In the programming approach, semantic information is captured in the meta-classes of an object-oriented programming language. For example, WORLDS <ref> [47, 108] </ref> uses meta-specifications in the programming language, Introspect [108], to allow the dynamic creation and modification of workflows. <p> Section 1.1.1 identified agents as an important class of assistants. Memento supports information agents primarily through its MObject change notification mechanism, described in Section 2.3. Two Memento-based information agents were demonstrated in Chapter 4. Other collaborative systems, including Oval [76, 77], HOS [99], Linkworks [32], WORLDS <ref> [47, 108] </ref> (all mentioned earlier) provide support for agents. Oval even supports the end-user construction of information agents. One key difference between Memento and these systems, however, is that like any other Memento-based assistant, a Memento-based agent operates only on the models from its specified domain.
Reference: [48] <author> James Foley, Christina Gibbs, Won Chul Kim, and Srdjan Kovacevic. </author> <title> A knowledge-based user interface management system. </title> <booktitle> In Human Factors in Computer Systems: CHI '88 Conference Proceedings, </booktitle> <pages> pages 67-72, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Their goal is to develop a rich vocabulary of reusable metaphors. A group at George Washington University explored separating the semantic level of the user interface from the more concrete levels so that they may be parameterized for different user communities <ref> [39, 48] </ref>. In their research, the semantic layer of the user interface is not varied. Other groups have explored the notion of reusable user interface widgets that convey semantic information via familiar visual information organizations [58, 84, 111, 61].
Reference: [49] <author> Jerry Fowler. </author> <title> The Virtual Object Model for Distributed Hypertext. </title> <type> PhD thesis, </type> <institution> Rice University Computer Science Department, </institution> <address> 6100 Main St., Houston, TX 77005-1892, </address> <year> 1994. </year> <month> 141 </month>
Reference: [50] <author> Jerry Fowler, Donald G. Baker, Vram Kouramajian, Hillary Gilson, Ross Dar-gahi, Kevin Brook Long, Cynthia Petermann, and G. Anthony Gorry. </author> <title> Experience with the virtual notebook system: Abstraction in hypertext. </title> <booktitle> In Proceedings of the ACM 1994 Conference on Computer Supported Cooperative Work (CSCW '94), </booktitle> <pages> pages 133-143, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Real-time refers to the fact that all users are made immediately aware of any edits performed by others. 1 The Virtual Notebook System <ref> [50] </ref> is an assistant that facilitates real-time (and artifact-based) collaboration. CSCW assistants that facilitate workflow coordinate the ordering of work done by members of a group. Such assistants may use a mail box or in-basket to notify group members of new work to be done. <p> Similar commercial products, most notably Farallon's Timbuktu, send partial image updates, rather than entire images. Such products sacrifice generality for better performance. 109 4.2.3 Electronic Studio The Electronic Studio (ES) is Memento's flagship assistant. ES was heavily influenced by the Virtual Notebook System (VNS) <ref> [50] </ref>. The VNS is a mature commercial product which includes many features and mechanisms currently unaddressed by Memento, including user authentication, object permissions, client and server licensing, crash recovery, and intellectual property management. <p> Note that all of these systems, with perhaps the exception of NLS/Augment, are also considered toolkits for supporting artifact-based collaboration. CSCW toolkits will be discussed in Section 5.1.2. Collaborative hypermedia systems for specific domains include Baylor College of Medicine's Virtual Notebook System <ref> [50] </ref> 20 , whose hyperlinked documents are pages organized into notebooks, and gIBIS [110, 23, 24], a collaborative hypertext tool specialized for team design deliberation developed at the Microelectronics and Computer Technology Corporation (MCC).
Reference: [51] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk 80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: The MType and the MObject MObjects both have "mtype" attributes that point to the MType MObject. This is tantamount to saying that MType and MObject are both MTypes. The MType MObject describes itself and is self-referential in much the same way that Smalltalk's <ref> [51] </ref> MetaClass class is self-referential. Transactions involving MTypes must undergo additional validity checks. The MType tree must remain singly-rooted at MObject and doubly-linked through its "supertype" and "subtypes" attributes. MType names must be globally unique. <p> Memento's generic change notification mechanism is based on that of the Small-talk <ref> [51] </ref> system. Smalltalk's change notification mechanism is an integral part of its well known Model-View-Controller (MVC) user interface paradigm [71]. Within the paradigm, the model is an abstract representation of something to be manipulated, like a counter.
Reference: [52] <author> John D. Gould and Clayton Lewis. </author> <title> Designing for usability|key principles and what designers think. </title> <booktitle> In Human Factors in Computing Systems: CHI '83 Conference Proceedings, </booktitle> <pages> pages 50-53. </pages> <publisher> ACM, </publisher> <month> November </month> <year> 1983. </year>
Reference-contexts: There are no fool-proof procedures a developer can follow in isolation that will result in a good user interface. The only proven way of developing high quality user interfaces is through iterative development and user testing with each cycle feeding into the next <ref> [52] </ref>. User testing involves placing people who have similar aptitudes and training as the target user group in front of the trial application; capturing their responses, errors, comments, and frustrations. Later, these results are analyzed with an eye toward determining the difficulties' root causes. <p> Assistants often have a significant user interface component that is specialized for its domain. Construction of high quality user interfaces requires iterative development and user testing with each cycle feeding into the next <ref> [52] </ref>. Iterative development exerts an evolutionary force on both an assistant's domain and its user interface. Memento provides mechanisms to address the evolution of domains and their associated information spaces, described in Section 3.6.3. Additionally, Memento allows a clean separation of concerns in the construction of an assistant's user interface.
Reference: [53] <author> Mark Graves. </author> <title> Theories and Tools for Designing Application-Specific Knowledge Base Data Models. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, University of Michigan, </institution> <year> 1993. </year>
Reference-contexts: Because of Memento's more modest goals, it is architecturally much simpler than SHADE. Memento, by contrast, assumes a shared, graph-structured information space over which various semantic-based graph patterns are applied. 133 Graves' WEAVE system <ref> [53, 54] </ref> starts with a formal knowledge specification and generates a functional programming language API to access and manipulate a domain-specific knowledge base. Memento's domain representation can also be thought of as a domain-specific API. WEAVE's specification language, WEB, extends constructive type theory to construct, access, and manipulate graph structures.
Reference: [54] <author> Mark Graves. </author> <title> Application of knowledge base design techniques to genetic markers. </title> <editor> In Niki Pissinou, Ave Silberschatz, E. K. Park, and Kia Makki, editors, </editor> <booktitle> Proceedings of the 1995 ACM CIKM Fourth International Conference on Information and Knowledge Management, </booktitle> <pages> pages 348-354, </pages> <month> November-December </month> <year> 1995. </year>
Reference-contexts: Because of Memento's more modest goals, it is architecturally much simpler than SHADE. Memento, by contrast, assumes a shared, graph-structured information space over which various semantic-based graph patterns are applied. 133 Graves' WEAVE system <ref> [53, 54] </ref> starts with a formal knowledge specification and generates a functional programming language API to access and manipulate a domain-specific knowledge base. Memento's domain representation can also be thought of as a domain-specific API. WEAVE's specification language, WEB, extends constructive type theory to construct, access, and manipulate graph structures.
Reference: [55] <author> Kaj Grtnbaek, Jens A. Hem, Ole L. Madsen, and Lennert Sloth. </author> <title> Designing dexter-based cooperative hypermedia systems. </title> <booktitle> In Hypertext '93 Proceedings: The Fifth ACM Conference on Hypertext, </booktitle> <pages> pages 25-38, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: SEPIA only allows interlinking between atomic document components, but allows components to be aggregated into compound documents. Important hypermedia toolkits include Intermedia [80, 73], NoteCards [57, 59], ABC [102, 60, 98], and DeVise Hypermedia System <ref> [55] </ref>. Of the mentioned systems, ABC's foundational component, the Distributed Graph Server [98], is most similar to Memento. Within it, primitive objects include attributed nodes and attributed links. Both nodes and links may additionally have "content," which is often a raw data file.
Reference: [56] <author> Anja Haake and Jorg M. Haake. </author> <title> Take CoVer: Exploiting version support in cooperative systems. </title> <booktitle> In Human Factors in Computing Systems: INTERCHI '93 Conference Proceedings, </booktitle> <pages> pages 406-413. </pages> <publisher> ACM, </publisher> <year> 1993. </year>
Reference-contexts: HOS does not address evolutionary mechanisms involving its links. A well-known way for dealing with the evolution of an information space is by versioning the contained information. However, few collaborative systems have addressed this issue. CoVer <ref> [56] </ref> is a hypermedia versioning server that is part of the SEPIA [105] hypermedia toolkit, mentioned earlier. Memento does not currently address the issue of versioning, but such support would be quite useful to assistant developers. Memento will likely include mechanisms for MObject versioning in the future.
Reference: [57] <author> Frank Halasz, Thomas P. Moran, and Randall H. Trigg. </author> <title> Notecards in a nutshell. </title> <booktitle> In Proceedings, ACM CHI+GI '87 Conference Proceedings Human Factors in Computing Systems and Graphics Interface, </booktitle> <pages> pages 45-52, </pages> <year> 1987. </year>
Reference-contexts: While the focus in hypermedia is usually on the reader of static hypermedia webs, many systems support authoring. A subset of those systems support the real-time collaborative construction of hypermedia webs. These systems include NLS/Augment [36] from the Stanford Research Institute, Xerox's NoteCards <ref> [57, 59] </ref>, Brown University's Intermedia [80, 73], the University of North Carolina's Artifact Based Collaboration (ABC) System [60, 102], and SEPIA [105] from the Integrated Publication and Information Systems Institute at the German National Research Center for Information Technology (GMD). <p> It would be possible to build a collaborative hypermedia application using Memento, if one used the strategy employed by SEPIA [105]. SEPIA only allows interlinking between atomic document components, but allows components to be aggregated into compound documents. Important hypermedia toolkits include Intermedia [80, 73], NoteCards <ref> [57, 59] </ref>, ABC [102, 60, 98], and DeVise Hypermedia System [55]. Of the mentioned systems, ABC's foundational component, the Distributed Graph Server [98], is most similar to Memento. Within it, primitive objects include attributed nodes and attributed links.
Reference: [58] <author> David Harel. </author> <title> On visual formalisms. </title> <journal> Communications of the ACM, </journal> <volume> 31(5) </volume> <pages> 514-530, </pages> <month> May </month> <year> 1988. </year> <month> 142 </month>
Reference-contexts: In their research, the semantic layer of the user interface is not varied. Other groups have explored the notion of reusable user interface widgets that convey semantic information via familiar visual information organizations <ref> [58, 84, 111, 61] </ref>. They have investigated tables and outlines as potential bridges between the syntactic and semantic levels of communication in the user inter 15 face. Such research dovetails nicely with the notion of a domain-based infrastructure such as that discussed in this dissertation.
Reference: [59] <author> Peggy M. Irish and Randall H. Trigg. </author> <title> Supporting collaboration in hypermedia: Issues and experiences. </title> <editor> In Edward Barrett, editor, </editor> <booktitle> The Society of Text, </booktitle> <pages> pages 90-106. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: While the focus in hypermedia is usually on the reader of static hypermedia webs, many systems support authoring. A subset of those systems support the real-time collaborative construction of hypermedia webs. These systems include NLS/Augment [36] from the Stanford Research Institute, Xerox's NoteCards <ref> [57, 59] </ref>, Brown University's Intermedia [80, 73], the University of North Carolina's Artifact Based Collaboration (ABC) System [60, 102], and SEPIA [105] from the Integrated Publication and Information Systems Institute at the German National Research Center for Information Technology (GMD). <p> It would be possible to build a collaborative hypermedia application using Memento, if one used the strategy employed by SEPIA [105]. SEPIA only allows interlinking between atomic document components, but allows components to be aggregated into compound documents. Important hypermedia toolkits include Intermedia [80, 73], NoteCards <ref> [57, 59] </ref>, ABC [102, 60, 98], and DeVise Hypermedia System [55]. Of the mentioned systems, ABC's foundational component, the Distributed Graph Server [98], is most similar to Memento. Within it, primitive objects include attributed nodes and attributed links.
Reference: [60] <author> K. Jeffay, J. K. Lin, J. Menges, F. D. Smith, and J. B. Smith. </author> <title> Architecture of the artifact-based collaboration system matrix. </title> <booktitle> In Proceedings of the ACM 1992 Conference on Computer Supported Cooperative Work (CSCW '92), </booktitle> <pages> pages 195-202, </pages> <month> October-November </month> <year> 1992. </year>
Reference-contexts: Here, the collaboration need not occur simultaneously or in a strict ordering but can span time as well as distance. Collaboration over meaningful information artifacts has been recognized as an important type of shared work <ref> [4, 60] </ref>. In artifact-based collaboration, a collection of shared information artifacts can play the role of a group memory that might grow and evolve over a long period. <p> Another way to classify CSCW systems is by the extent the system is artifact-based. Artifact-based collaboration systems address a core CSCW problem of sharing an information space <ref> [4, 60, 92] </ref>. In artifact-based collaboration, information artifacts 19 are shared among the participants and are usually the focus of the collaboration. Note that whether a system is artifact-based is, to some extent, independent of the space and time dimensions. <p> A subset of those systems support the real-time collaborative construction of hypermedia webs. These systems include NLS/Augment [36] from the Stanford Research Institute, Xerox's NoteCards [57, 59], Brown University's Intermedia [80, 73], the University of North Carolina's Artifact Based Collaboration (ABC) System <ref> [60, 102] </ref>, and SEPIA [105] from the Integrated Publication and Information Systems Institute at the German National Research Center for Information Technology (GMD). Note that all of these systems, with perhaps the exception of NLS/Augment, are also considered toolkits for supporting artifact-based collaboration. <p> It would be possible to build a collaborative hypermedia application using Memento, if one used the strategy employed by SEPIA [105]. SEPIA only allows interlinking between atomic document components, but allows components to be aggregated into compound documents. Important hypermedia toolkits include Intermedia [80, 73], NoteCards [57, 59], ABC <ref> [102, 60, 98] </ref>, and DeVise Hypermedia System [55]. Of the mentioned systems, ABC's foundational component, the Distributed Graph Server [98], is most similar to Memento. Within it, primitive objects include attributed nodes and attributed links. Both nodes and links may additionally have "content," which is often a raw data file.
Reference: [61] <author> Jeff Johnson. Selectors: </author> <title> Going beyond user-interface widgets. </title> <booktitle> In Human Factors in Computer Systems: CHI '92 Conference Proceedings, </booktitle> <pages> pages 273-280, </pages> <year> 1992. </year>
Reference-contexts: In their research, the semantic layer of the user interface is not varied. Other groups have explored the notion of reusable user interface widgets that convey semantic information via familiar visual information organizations <ref> [58, 84, 111, 61] </ref>. They have investigated tables and outlines as potential bridges between the syntactic and semantic levels of communication in the user inter 15 face. Such research dovetails nicely with the notion of a domain-based infrastructure such as that discussed in this dissertation.
Reference: [62] <author> Philip Johnson. </author> <title> Supporting exploratory CSCW with the EGRET framework. </title> <booktitle> In Proceedings of the ACM 1992 Conference on Computer Supported Cooperative Work (CSCW '92), </booktitle> <pages> pages 298-305. </pages> <publisher> ACM, </publisher> <month> October-November </month> <year> 1992. </year>
Reference-contexts: Memento is one of only a few artifact-based collaborative systems to address these issues. EGRET, HOS, and CoVer are three other such systems. The EGRET Framework from the University of Hawaii addresses artifact-based collaboration in the context of evolutionary change <ref> [62, 63] </ref>. EGRET provides mechanisms for evolution similar to those of Memento. EGRET's developer, Philip Johnson, coined the term exploratory collaboration to describe situations in which evolution is anticipated. Frederick Brooks argued, however, that growing programs is a more apt metaphor of software development than building programs [13].
Reference: [63] <author> Philip Johnson. EGRET: </author> <title> A framework for advanced CSCW applications. </title> <journal> Software Engineering Notes, </journal> <volume> 21(5) </volume> <pages> 70-71, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: Memento is one of only a few artifact-based collaborative systems to address these issues. EGRET, HOS, and CoVer are three other such systems. The EGRET Framework from the University of Hawaii addresses artifact-based collaboration in the context of evolutionary change <ref> [62, 63] </ref>. EGRET provides mechanisms for evolution similar to those of Memento. EGRET's developer, Philip Johnson, coined the term exploratory collaboration to describe situations in which evolution is anticipated. Frederick Brooks argued, however, that growing programs is a more apt metaphor of software development than building programs [13].
Reference: [64] <author> Ralph E. Johnson and Brian Foote. </author> <title> Designing reusable classes. </title> <journal> Journal of Object Oriented Programming, </journal> <volume> 1(1), </volume> <month> June/July </month> <year> 1988. </year>
Reference-contexts: Each framework represents a substantial intellectual contribution and many are of academic interest. By now, enough frameworks been constructed to allow meaningful categorization and comparison <ref> [64] </ref>. Memento is a contribution to the study of frameworks in that it attempts to solve the novel problem of assisting with construction of the semantic level of user interfaces by facilitating collaboration over semantically meaningful information.
Reference: [65] <author> Ralph E. Johnson and Vincent F. Russo. </author> <title> Reusing object-oriented designs. </title> <type> Technical Report UIUCDSC 91-1696, </type> <institution> University of Illinois, Department of Computer Science, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: User interface code associated with the shared sub-domain can potentially be shared among all applications that use that sub-domain. Reuse is greatly facilitated if the components are designed from the outset to be used again <ref> [65] </ref>. Reuse of high-level user interface components is currently difficult without a clean separation of responsibilities that would be imposed by a generalized model and domain infrastructure. <p> Code that can be reused does not have to be written|a huge savings in effort. Software reuse is not completely free, however, as it does not happen by accident. The intent of reuse must be deliberately factored into the design and coding of the target software component <ref> [65] </ref>. Memento facilitates code reuse at three levels. First, the Memento infrastructure itself is intended to be used in a wide variety of assistants. Chapter 4 demonstrated Memento-based assistants in a variety of assistant categories.
Reference: [66] <author> Wolfgang Klas, Karl Aberer, and Erich Neuhold. </author> <title> Object-oriented modelling for hypermedia systems using the VODAK model language. </title> <editor> In A. Dogac, T. Ozsu, A. Biliris, and T. Sellis, editors, </editor> <booktitle> Advances in Object-Oriented Database Systems. </booktitle> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, Germany, </address> <year> 1994. </year>
Reference-contexts: In the programming approach, semantic information is captured in the meta-classes of an object-oriented programming language. For example, WORLDS [47, 108] uses meta-specifications in the programming language, Introspect [108], to allow the dynamic creation and modification of workflows. Similarly, the VODAK Model Language <ref> [66] </ref>, which is the basis for the collaborative hypermedia system SEPIA [105], uses an open object-oriented data model, based on the concept of meta-classes, to embody semantic information.
Reference: [67] <author> Michael J. Knister and Atul Prakash. DistEdit: </author> <title> A distributed toolkit for supporting multiple group editors. </title> <booktitle> In Proceedings of the ACM 1990 Conference on Computer Supported Cooperative Work (CSCW '90), </booktitle> <pages> pages 343-355, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: In doing so, a bulk responsibility of domain-specific artifact-based collaboration in each assistant could be delegated to the resuable Memento infrastructure. Collaborative Document Editing Collaborative document editing systems assist with the important task of group authoring. Representative systems include GROVE [35], Quilt [45], and the collaborative editor toolkit, DistEdit <ref> [67] </ref>. As mentioned in Section 3.6.4, Memento is probably 119 not suitable for the development of collaborative document editing systems because of the fine information granularity required by such systems.
Reference: [68] <author> Vram Kouramajian, Ross Dargahi, Donald Baker, and Jerry Fowler. </author> <title> Consortium: A framework for transactions in collaborative environments. </title> <booktitle> In Proceed 143 ings of the 1995 ACM CIKM: Fourth International Conference on Information and Knowledge Management, </booktitle> <pages> pages 260-265, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: An assistant's transactions do not nest or overlap. This restriction is the result of a design decision for simplicity's sake. Research into transaction mechanisms for collaboration are beyond the scope of this dissertation. However, Memento has served as the vehicle for such research <ref> [68] </ref>. Collaboration among assistants is achieved via coordination through one or more shared MObject repositories. One assistant's transactions are isolated from those of other assistants through the mechanisms of transaction MObject read- and write-locking and synchronization which are part of the responsibilities of an MObject repository.
Reference: [69] <author> Richard T. Kouzes, James D. Myers, and William A. Wulf. Collaboratories: </author> <title> Doing science on the Internet. </title> <journal> IEEE Computer, </journal> <volume> 29(8) </volume> <pages> 40-46, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: Both systems have been mentioned earlier. Another domain in which design has been extensively studied is software engineering design environments [42, 107]. Computer supported collaborative learning (CSCL) uses artifact-based collaboration for the end of education. CSCL systems are sometimes called collaboratories <ref> [69] </ref>. Not surprisingly, the focus of these systems is on their effectiveness as a teaching tool and the experience of the learner using them [109]. Two important issues in organizational memories are how to capture and use semantic information and how such memories grow and evolve over time.
Reference: [70] <author> K. L. Kraemer and J. L. King. </author> <title> Computer-based systems for cooperative work and group decision making. </title> <journal> ACM Computing Surveys, </journal> <volume> 20(2) </volume> <pages> 115-146, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: XNetwork [92], a collaborative system for designing network layouts; * ICICLE [14] for code inspection and annotation; * IBIS/gIBIS [23, 24, 110] and SIBYL [74], collaborative systems for group design deliberation; * Colab [104], an early system to support group meetings; and * systems for group decision making, surveyed in <ref> [70, 29] </ref>. Domain-specific artifact-based collaboration systems such as these are considered assistants because they each have an understanding of their specific domain. These systems can be implemented using the domain-independent Memento infrastructure.
Reference: [71] <author> Glenn E. Krasner and Stephen T. Pope. </author> <title> A cookbook for using the model-view-controller user interface paradigm in Smalltalk-80. </title> <journal> Journal of Object Oriented Programming, </journal> <volume> 1(3) </volume> <pages> 26-49, </pages> <month> August-September </month> <year> 1988. </year>
Reference-contexts: Memento's generic change notification mechanism is based on that of the Small-talk [51] system. Smalltalk's change notification mechanism is an integral part of its well known Model-View-Controller (MVC) user interface paradigm <ref> [71] </ref>. Within the paradigm, the model is an abstract representation of something to be manipulated, like a counter. The view provides a visual display of the model, perhaps a digital readout of the counter.
Reference: [72] <author> K.-Y. Lai, T. W. Malone, and K.-C. Yu. </author> <title> Object Lens: A `spreadsheet' for cooperative work. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 6(4) </volume> <pages> 332-353, </pages> <year> 1988. </year>
Reference-contexts: Other important systems to support collaboration over graph structures include MIT's Oval [76, 77], based on the earlier ObjectLens <ref> [72] </ref> and the University of Illinois at Urbana-Champaign's WORLDS [47, 108], which uses graph structures to specify activities and workflows. Oval, which stands for objects, views, agents and links, is a collaborative environment which supports the end-user development of applications. Objects in Oval are typed collections of fields and actions.
Reference: [73] <author> George P. Landow. </author> <title> Hypertext and collaborative work: The example of inter-media. </title> <editor> In J. Galegher, R. Kraut, and C. Egido, editors, </editor> <booktitle> Intellectual Teamwork: Social and Technological Foundations of Cooperative Work, </booktitle> <pages> pages 407-415. </pages> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, New Jersey, </address> <year> 1990. </year> <note> Excerpts published in [1]. </note>
Reference-contexts: While the focus in hypermedia is usually on the reader of static hypermedia webs, many systems support authoring. A subset of those systems support the real-time collaborative construction of hypermedia webs. These systems include NLS/Augment [36] from the Stanford Research Institute, Xerox's NoteCards [57, 59], Brown University's Intermedia <ref> [80, 73] </ref>, the University of North Carolina's Artifact Based Collaboration (ABC) System [60, 102], and SEPIA [105] from the Integrated Publication and Information Systems Institute at the German National Research Center for Information Technology (GMD). <p> It would be possible to build a collaborative hypermedia application using Memento, if one used the strategy employed by SEPIA [105]. SEPIA only allows interlinking between atomic document components, but allows components to be aggregated into compound documents. Important hypermedia toolkits include Intermedia <ref> [80, 73] </ref>, NoteCards [57, 59], ABC [102, 60, 98], and DeVise Hypermedia System [55]. Of the mentioned systems, ABC's foundational component, the Distributed Graph Server [98], is most similar to Memento. Within it, primitive objects include attributed nodes and attributed links.
Reference: [74] <author> Jintae Lee. SIBYL: </author> <title> A tool for managing group design rationale. </title> <booktitle> In Proceedings of the ACM 1990 Conference on Computer Supported Cooperative Work (CSCW '90), </booktitle> <pages> pages 79-92, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: systems in this diverse category include: * Visual Scheduler [6], a group calendar and scheduling application; * BIBDB [83], a collaborative system for bibliographic data; * XNetwork [92], a collaborative system for designing network layouts; * ICICLE [14] for code inspection and annotation; * IBIS/gIBIS [23, 24, 110] and SIBYL <ref> [74] </ref>, collaborative systems for group design deliberation; * Colab [104], an early system to support group meetings; and * systems for group decision making, surveyed in [70, 29]. Domain-specific artifact-based collaboration systems such as these are considered assistants because they each have an understanding of their specific domain.
Reference: [75] <institution> Lotus Development Corporation. </institution> <note> Lotus Notes User's Guide, </note> <year> 1994. </year>
Reference-contexts: CSCW assistants that facilitate workflow coordinate the ordering of work done by members of a group. Such assistants may use a mail box or in-basket to notify group members of new work to be done. Lotus Notes <ref> [75] </ref> and Digital Equipment Corporation's Linkworks [32] are two commercial CSCW applications that facilitate workflow. Finally, artifact-based collaboration assistants can facilitate access to meaningful models in a shared information repository. Here, the collaboration need not occur simultaneously or in a strict ordering but can span time as well as distance.
Reference: [76] <author> Thomas W. Malone, Kum-Yew Lai, and Christopher Fry. </author> <title> Experiments with Oval: A radically tailorable tool for cooperative work. </title> <booktitle> In Proceedings of the ACM 1992 Conference on Computer Supported Cooperative Work (CSCW '92), </booktitle> <pages> pages 289-297, </pages> <month> October-November </month> <year> 1992. </year>
Reference-contexts: Memento's architecture is based on an extended client-server model using the network repository as the bridge between an assistant playing the role of a server to a set of assistants playing the role of clients. Other important systems to support collaboration over graph structures include MIT's Oval <ref> [76, 77] </ref>, based on the earlier ObjectLens [72] and the University of Illinois at Urbana-Champaign's WORLDS [47, 108], which uses graph structures to specify activities and workflows. Oval, which stands for objects, views, agents and links, is a collaborative environment which supports the end-user development of applications. <p> Section 1.1.1 identified agents as an important class of assistants. Memento supports information agents primarily through its MObject change notification mechanism, described in Section 2.3. Two Memento-based information agents were demonstrated in Chapter 4. Other collaborative systems, including Oval <ref> [76, 77] </ref>, HOS [99], Linkworks [32], WORLDS [47, 108] (all mentioned earlier) provide support for agents. Oval even supports the end-user construction of information agents.
Reference: [77] <author> Thomas W. Malone, Kum-Yew Lai, and Christopher Fry. </author> <title> Experiments with Oval: A radically tailorable tool for cooperative work. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 13(2) </volume> <pages> 177-205, </pages> <month> April </month> <year> 1995. </year> <month> 144 </month>
Reference-contexts: Memento's architecture is based on an extended client-server model using the network repository as the bridge between an assistant playing the role of a server to a set of assistants playing the role of clients. Other important systems to support collaboration over graph structures include MIT's Oval <ref> [76, 77] </ref>, based on the earlier ObjectLens [72] and the University of Illinois at Urbana-Champaign's WORLDS [47, 108], which uses graph structures to specify activities and workflows. Oval, which stands for objects, views, agents and links, is a collaborative environment which supports the end-user development of applications. <p> Section 1.1.1 identified agents as an important class of assistants. Memento supports information agents primarily through its MObject change notification mechanism, described in Section 2.3. Two Memento-based information agents were demonstrated in Chapter 4. Other collaborative systems, including Oval <ref> [76, 77] </ref>, HOS [99], Linkworks [32], WORLDS [47, 108] (all mentioned earlier) provide support for agents. Oval even supports the end-user construction of information agents.
Reference: [78] <author> Aaron Marcus. </author> <title> Human communications issues in advanced UIs. </title> <journal> Communications of the ACM, </journal> <volume> 36(4) </volume> <pages> 101-109, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: One can speak of the language|primarily visual and tactile|between the executing program and the user sitting in front of the machine. Like any language, the user interface can be broken down into its semiotic levels: lexical, syntactic, and semantic <ref> [78] </ref>. The lexical level of the user interface deals with things like font selection and menu layout when 14 the program is communicating to the user or, when the human is communicating to the program, events like key strokes and mouse clicks.
Reference: [79] <author> James G. McGuire, Daniel R. Kuokka, Jay C. Weber, Jay M. Tenenbaum, Thomas R. Gruber, and Gregory R. Olsen. SHADE: </author> <title> Technology for knowledge-based collaborative engineering. </title> <journal> Journal of Concurrent Engineering: Research and Applications (CERA), </journal> <volume> 1(2), </volume> <year> 1993. </year>
Reference-contexts: This issue was discussed in Section 2.0.2. Additionally, the data approach is more amenable to evolutionary change, as described Memento in Section 3.6.3. Another system that follows the data approach is SHADE <ref> [79] </ref>, a collaborative engineering design system developed at the Stanford Knowledge Systems Laboratory. SHADE uses the Knowledge Interchange Format (KIF) to represent the semantics of the information to be shared between cooperating components. KIF-based information appears as LISP-like statements. <p> While the IMS system has not had a big impact on later systems, the discussion in [40] of symbiotic, knowledge-based computer support systems has influenced the author's philosophy of assistants and their support by Memento. SHADE <ref> [79] </ref>, mentioned earlier, is an infrastructure for the sharing of engineering design information among computer-aided engineering systems. SHADE uses the LISP-like Knowledge Interchange Format (KIF) as its knowledge representation scheme. Like Memento, SHADE uses meaningful information artifacts as the basis for collaboration among cooperating applications.
Reference: [80] <author> Norman Meyrowitz. </author> <title> Intermedia: The architecture and construction of an object-oriented hypermedia system and applications framework. </title> <booktitle> In OOPSLA '86 Conference Proceedings, </booktitle> <pages> pages 186-201. </pages> <publisher> ACM, </publisher> <month> November </month> <year> 1986. </year> <note> Also catalogued as SIGPLAN Notices, 21(11). </note>
Reference-contexts: While the focus in hypermedia is usually on the reader of static hypermedia webs, many systems support authoring. A subset of those systems support the real-time collaborative construction of hypermedia webs. These systems include NLS/Augment [36] from the Stanford Research Institute, Xerox's NoteCards [57, 59], Brown University's Intermedia <ref> [80, 73] </ref>, the University of North Carolina's Artifact Based Collaboration (ABC) System [60, 102], and SEPIA [105] from the Integrated Publication and Information Systems Institute at the German National Research Center for Information Technology (GMD). <p> It would be possible to build a collaborative hypermedia application using Memento, if one used the strategy employed by SEPIA [105]. SEPIA only allows interlinking between atomic document components, but allows components to be aggregated into compound documents. Important hypermedia toolkits include Intermedia <ref> [80, 73] </ref>, NoteCards [57, 59], ABC [102, 60, 98], and DeVise Hypermedia System [55]. Of the mentioned systems, ABC's foundational component, the Distributed Graph Server [98], is most similar to Memento. Within it, primitive objects include attributed nodes and attributed links.
Reference: [81] <institution> Microsoft Corporation, </institution> <address> Redmond, Washington. The Microsoft Foundation Class Library, </address> <year> 1991. </year>
Reference-contexts: An MObject repository, which is usually based on a persistent store, allows for the sharing and storage of MObjects. MObject repositories were described in Section 2.5. Most often, an assistant's user interface component is constructed from an application framework, such as the Microsoft 103 Foundation Class Library <ref> [81] </ref>. This is the case for many of the assistants described in this chapter. Application frameworks are discussed further in Section 5.3. 4.2 Assistant Case Studies In this section, a number of Memento-based assistants are described. <p> A carefully constructed set of interconnected images can give the user a real sense of navigating in a physical space. This simple model of interconnected views is the basis for the VRW assistant, a 32-bit Windows application built with 104 the Microsoft Foundation Class Library <ref> [81] </ref>. VRW's images were generated from a digital camera in an office building's atrium and hallways. Figure 4.2 shows a screen snapshot of the VRW assistant showing a view down a hallway. <p> Elmo is a 32-bit Windows application built with the Microsoft Foundation Class Library <ref> [81] </ref>. The tool attempts to address the need to share visual information during a telephone conference. Using Elmo, a user can specify a window on his screen to "broadcast" to others. The specified window can be the entire screen. <p> ES will be compared and contrasted to the VNS throughout this discussion. Like the VRW assistant discussed above, ES was developed in several stages. ES is a 32-bit Windows application built with the Microsoft Foundation Class Library <ref> [81] </ref>. The Electronic Studio assistant's information space contains a set of interlinked pages. Each page shows a set of objects arranged in a two dimensional layout. The initial version of ES allowed three different object types on the page: a text document, an image, or a link to another page.
Reference: [82] <editor> Guy W. Mineau, Bernard Moulin, and John F. Sowa, editors. </editor> <booktitle> Conceptual Graphs for Knowledge Representation; First International Conference on Conceptual Structures (ICCS '93), </booktitle> <address> Berlin, </address> <month> August </month> <year> 1993. </year> <title> Springer-Verlag. </title> <booktitle> Lecture Notes in Artificial Intelligence #699. </booktitle>
Reference-contexts: First, it is not the intent of this dissertation to invent a new knowledge representation. An existing, mature representation is strongly preferable to a new one. The study of conceptual structures has continued for more than a decade and has spawned a yearly conference on the subject <ref> [82, 90] </ref>. Next, during early experimental work on Memento, a representation scheme was tried that allowed the sharing of information nodes in the context of one or more other nodes. Nodes were linked by contextual relationships called elements.
Reference: [83] <author> David J. Musliner, James W. Dolter, and Kang G. Shin. BIBDB: </author> <title> A bibliographic database for collaboration. </title> <booktitle> In Proceedings of the ACM 1992 Conference on Computer Supported Cooperative Work (CSCW '92), </booktitle> <pages> pages 386-393, </pages> <month> October-November </month> <year> 1992. </year>
Reference-contexts: Domain-specific systems may be well suited to their specific problem area, but often are useless outside that area. A representative list of systems in this diverse category include: * Visual Scheduler [6], a group calendar and scheduling application; * BIBDB <ref> [83] </ref>, a collaborative system for bibliographic data; * XNetwork [92], a collaborative system for designing network layouts; * ICICLE [14] for code inspection and annotation; * IBIS/gIBIS [23, 24, 110] and SIBYL [74], collaborative systems for group design deliberation; * Colab [104], an early system to support group meetings; and *
Reference: [84] <author> Bonnie A. Nardi and Craig L. Zarmer. </author> <title> Beyond models and metaphors: Visual formalisms in user interface design. </title> <booktitle> In Proceedings of the 24th Annual Hawaii International Conference on Systems Science, </booktitle> <volume> volume 2, </volume> <pages> pages 478-493, </pages> <address> Koloa, HI, </address> <month> January </month> <year> 1991. </year>
Reference-contexts: In their research, the semantic layer of the user interface is not varied. Other groups have explored the notion of reusable user interface widgets that convey semantic information via familiar visual information organizations <ref> [58, 84, 111, 61] </ref>. They have investigated tables and outlines as potential bridges between the syntactic and semantic levels of communication in the user inter 15 face. Such research dovetails nicely with the notion of a domain-based infrastructure such as that discussed in this dissertation.
Reference: [85] <author> Donald A. Norman. </author> <title> Some observations on mental models. </title> <editor> In Albert L. Stevens and Dedre Gentner, editors, </editor> <title> Mental Models, </title> <booktitle> chapter 1, </booktitle> <pages> pages 7-14. </pages> <publisher> Lawrence Erlbaum Associates, </publisher> <editor> Hillsdale, N. J., </editor> <year> 1983. </year>
Reference-contexts: It is the range of the assistant's "knowledge." Items in the domain are meaningful information groupings called models. A domain can be thought of as a space of possible models. Models originate in the mind of a user, perhaps in the form of mental models <ref> [85, 20] </ref>. In order to take advantage of an assistant's abilities, a user must be able to communicate a model to an assistant. When this happens, the model becomes the subject of a conversation between the user and assistant.
Reference: [86] <institution> Object Management Group, </institution> <note> Framingham, </note> <author> MA. </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <address> 1.1 edition, </address> <year> 1992. </year> <month> 145 </month>
Reference-contexts: The latter two are really just two different perspectives on the same problem of sharing information. The user interface middleware infrastructure, OpenDoc [87], allows a variety of small applications to work together in the context of a single document. CORBA <ref> [86] </ref> is a distributed object middleware standard that allows for the integration of a diversity of cooperating network-based information producers and consumers. IBM Almaden's ongoing Garlic [18] project attempts to integrate a variety of databases and other information stores to create a unified multimedia information system.
Reference: [87] <author> OpenDoc Design Team. </author> <title> The OpenDoc Technical Summary. </title> <institution> Apple Computer Inc., </institution> <year> 1994. </year>
Reference-contexts: Recent middleware infrastructures have tended to address one of three areas: the user inter 65 face, network distribution of information, and heterogeneous data repositories. The latter two are really just two different perspectives on the same problem of sharing information. The user interface middleware infrastructure, OpenDoc <ref> [87] </ref>, allows a variety of small applications to work together in the context of a single document. CORBA [86] is a distributed object middleware standard that allows for the integration of a diversity of cooperating network-based information producers and consumers.
Reference: [88] <author> David A. Patterson. </author> <title> Microprocessors in 2020. </title> <journal> Scientific American, </journal> <volume> 273(3) </volume> <pages> 62-67, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: Introduction The computer has revolutionized the way people deal with information. The revolution is far from over, however. Every eighteen months computers have doubled in speed and storage capacity owing to advances in miniaturization, mass production, and materials science. This trend is likely to continue for some time <ref> [88] </ref>. Powerful, inexpensive computers are becoming ubiquitous, yet system builders have only begun to explore the computer's potential to enrich peoples' lives. Many of the challenges that lie ahead are in the arena of computer software which seeks to harness the computer's potential for specific ends.
Reference: [89] <author> John F. Patterson, Ralph Hill, and Steven L. Rohall. </author> <title> Rendezvous: An architecture for synchronous multi-user applications. </title> <booktitle> In Proceedings of the ACM 1990 Conference on Computer Supported Cooperative Work (CSCW '90), </booktitle> <pages> pages 317-328, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: In many of these systems, applications have little or no semantic knowledge of their data, but simply act to coordinate the shared input stream and maintain view consistency. Important toolkits that address the sharing of user interface components include GroupKit [94], Suite [31], COAST [97], DistView [91], and Rendezvous <ref> [89] </ref>. Often, the focus of these systems is on the process of collaboration, specifically with regard to coordination of actions, and not on the information artifacts being manipulated.
Reference: [90] <author> Heather D. Pfeiffer and Tomothy E. Nagle, </author> <title> editors. Conceptual Structures: </title> <booktitle> Theory and Implementation; 7th Annual Workshop, </booktitle> <address> Berlin, </address> <month> July </month> <year> 1992. </year> <title> Springer-Verlag. </title> <booktitle> Lecture Notes in Artificial Intelligence #754. </booktitle>
Reference-contexts: First, it is not the intent of this dissertation to invent a new knowledge representation. An existing, mature representation is strongly preferable to a new one. The study of conceptual structures has continued for more than a decade and has spawned a yearly conference on the subject <ref> [82, 90] </ref>. Next, during early experimental work on Memento, a representation scheme was tried that allowed the sharing of information nodes in the context of one or more other nodes. Nodes were linked by contextual relationships called elements.
Reference: [91] <author> Atul Prakash and Hyong Sop Shim. DistView: </author> <title> Support for building efficient collaborative applications using replicated objects. </title> <booktitle> In Proceedings of the ACM 1994 Conference on Computer Supported Cooperative Work (CSCW '94), </booktitle> <pages> pages 153-164, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: In many of these systems, applications have little or no semantic knowledge of their data, but simply act to coordinate the shared input stream and maintain view consistency. Important toolkits that address the sharing of user interface components include GroupKit [94], Suite [31], COAST [97], DistView <ref> [91] </ref>, and Rendezvous [89]. Often, the focus of these systems is on the process of collaboration, specifically with regard to coordination of actions, and not on the information artifacts being manipulated.
Reference: [92] <author> Brent Reeves and Frank Shipman. </author> <title> Supporting communication between designers with artifact-centered evolving information spaces. </title> <booktitle> In Proceedings of the ACM 1992 Conference on Computer Supported Cooperative Work (CSCW '92), </booktitle> <pages> pages 394-401, </pages> <address> Toronto, Canada, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Design environments are suites of applications where one or more users design something such as a computer network topology, a kitchen layout, or a program <ref> [92, 43, 42] </ref>. Design environments have domain-specific knowledge of the objects being designed by their users. <p> Another way to classify CSCW systems is by the extent the system is artifact-based. Artifact-based collaboration systems address a core CSCW problem of sharing an information space <ref> [4, 60, 92] </ref>. In artifact-based collaboration, information artifacts 19 are shared among the participants and are usually the focus of the collaboration. Note that whether a system is artifact-based is, to some extent, independent of the space and time dimensions. <p> Domain-specific systems may be well suited to their specific problem area, but often are useless outside that area. A representative list of systems in this diverse category include: * Visual Scheduler [6], a group calendar and scheduling application; * BIBDB [83], a collaborative system for bibliographic data; * XNetwork <ref> [92] </ref>, a collaborative system for designing network layouts; * ICICLE [14] for code inspection and annotation; * IBIS/gIBIS [23, 24, 110] and SIBYL [74], collaborative systems for group design deliberation; * Colab [104], an early system to support group meetings; and * systems for group decision making, surveyed in [70, 29]. <p> Two important uses of organizational memories are for shared design environments and for computer supported collaborative learning (CSCL). Examples of design environments are XNetwork <ref> [92] </ref> for network designs and IBIS/gIBIS [23, 24, 110] for capturing design deliberation. Both systems have been mentioned earlier. Another domain in which design has been extensively studied is software engineering design environments [42, 107]. Computer supported collaborative learning (CSCL) uses artifact-based collaboration for the end of education.
Reference: [93] <author> George G. Robertson, Stuart K. Card, and Jock D. Mackinlay. </author> <title> Information visualization using 3D interactive animation. </title> <journal> Communications of the ACM, </journal> <volume> 36(4) </volume> <pages> 57-71, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: The semantic level of the user interface is far more difficult to study. Only a few research groups have addressed it. Researchers at Xerox have undertaken a program to explore how user interface metaphors lend themselves to various general information domains <ref> [17, 93] </ref>. Their goal is to develop a rich vocabulary of reusable metaphors. A group at George Washington University explored separating the semantic level of the user interface from the more concrete levels so that they may be parameterized for different user communities [39, 48].
Reference: [94] <author> Mark Roseman and Saul Greenberg. GroupKit: </author> <title> A groupware toolkit for building real-time conferencing applications. </title> <booktitle> In Proceedings of the ACM 1992 Conference on Computer Supported Cooperative Work (CSCW '92), </booktitle> <pages> pages 43-50, </pages> <month> October-November </month> <year> 1992. </year>
Reference-contexts: In many of these systems, applications have little or no semantic knowledge of their data, but simply act to coordinate the shared input stream and maintain view consistency. Important toolkits that address the sharing of user interface components include GroupKit <ref> [94] </ref>, Suite [31], COAST [97], DistView [91], and Rendezvous [89]. Often, the focus of these systems is on the process of collaboration, specifically with regard to coordination of actions, and not on the information artifacts being manipulated.
Reference: [95] <author> Kurt J. Schmucker. Macapp: </author> <title> An application framework. </title> <journal> BYTE, </journal> <volume> 11(8) </volume> <pages> 189-193, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: When a user interface standard is adopted by a vendor, it can be embodied in a user interface tool, such as an application framework or user interface toolkit. Apple Computer's MacApp is one example of an application framework that embodies the Macintosh user interface standard <ref> [95] </ref>. Such tools make it much easier to develop applications that adhere to the embodied standard. The semantic level of the user interface is far more difficult to study. Only a few research groups have addressed it. <p> Application frameworks also usually contain a class library of user interface components. Ideally, an application framework embodies a good user interface standard that allows applications to inherit many of the properties of that standard. MacApp is a successful and well-known application framework for building Macintosh applications <ref> [95] </ref>. With most application frameworks, developers start from the "null application," which does everything an application must do in a completely generic way, and then they customize the application for their own needs. Frameworks need not be limited, however, to the domain of building applications.
Reference: [96] <author> Eve M. Schooler. </author> <title> Conferencing and collaborative computing. </title> <journal> Multimedia Systems, </journal> <volume> 4(5) </volume> <pages> 210-225, </pages> <month> October </month> <year> 1996. </year> <month> 146 </month>
Reference-contexts: First-hand study of such proprietary systems is either difficult or prohibitively expensive. The few commercial systems that are available to the author will be mentioned here. CSCW systems are often classified as to their ability to support collaboration across space and/or time <ref> [35, 96] </ref>. In one extreme of the space dimension, an electronic classroom might require the co-location of the participants. In the other extreme, distributed systems, such as electronic mail, place few constraints on the users' physical locations.
Reference: [97] <author> Christian Schuckmann, Lutz Kirchner, Jan Schummer, and Jorg M. Haake. </author> <title> Designing object-oriented synchronous groupware with COAST. </title> <booktitle> In Proceedings of the ACM 1996 Conference on Computer Supported Cooperative Work (CSCW '96), </booktitle> <pages> pages 30-38, </pages> <month> November </month> <year> 1996. </year>
Reference-contexts: In many of these systems, applications have little or no semantic knowledge of their data, but simply act to coordinate the shared input stream and maintain view consistency. Important toolkits that address the sharing of user interface components include GroupKit [94], Suite [31], COAST <ref> [97] </ref>, DistView [91], and Rendezvous [89]. Often, the focus of these systems is on the process of collaboration, specifically with regard to coordination of actions, and not on the information artifacts being manipulated.
Reference: [98] <author> Douglas E. Shackelford, John B. Smith, and F. Donelson Smith. </author> <title> The architecture and implementation of a distributed hypermedia storage system. </title> <booktitle> In Hypertext '93 Proceedings: The Fifth ACM Conference on Hypertext, </booktitle> <pages> pages 1-13, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: It would be possible to build a collaborative hypermedia application using Memento, if one used the strategy employed by SEPIA [105]. SEPIA only allows interlinking between atomic document components, but allows components to be aggregated into compound documents. Important hypermedia toolkits include Intermedia [80, 73], NoteCards [57, 59], ABC <ref> [102, 60, 98] </ref>, and DeVise Hypermedia System [55]. Of the mentioned systems, ABC's foundational component, the Distributed Graph Server [98], is most similar to Memento. Within it, primitive objects include attributed nodes and attributed links. Both nodes and links may additionally have "content," which is often a raw data file. <p> SEPIA only allows interlinking between atomic document components, but allows components to be aggregated into compound documents. Important hypermedia toolkits include Intermedia [80, 73], NoteCards [57, 59], ABC [102, 60, 98], and DeVise Hypermedia System [55]. Of the mentioned systems, ABC's foundational component, the Distributed Graph Server <ref> [98] </ref>, is most similar to Memento. Within it, primitive objects include attributed nodes and attributed links. Both nodes and links may additionally have "content," which is often a raw data file.
Reference: [99] <author> Frank M. Shipman, III and Raymond McCall. </author> <title> Supporting knowledge-base evolution with incremental formalization. </title> <booktitle> In Human Factors in Computing Systems: CHI '94 Conference Proceedings, </booktitle> <pages> pages 285-291. </pages> <publisher> ACM, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: Specifically, the operations of adding unrequired attributes, adding new types, changing the type of an MObject to a more specific type, and adding relations of new types are cannot violate the semantic constraints of any domain and are therefore always allowable. The Hypertext Object Substrate (HOS) <ref> [99] </ref>, developed by Shipman, provides mechanisms to aid in the evolutionary process of adding structure and detail to the 22 Note that EGRET's type system does not have the property that a node conforming to a schema must also conform to its parent schema. 126 information space, called incremental formalization. <p> Section 1.1.1 identified agents as an important class of assistants. Memento supports information agents primarily through its MObject change notification mechanism, described in Section 2.3. Two Memento-based information agents were demonstrated in Chapter 4. Other collaborative systems, including Oval [76, 77], HOS <ref> [99] </ref>, Linkworks [32], WORLDS [47, 108] (all mentioned earlier) provide support for agents. Oval even supports the end-user construction of information agents. One key difference between Memento and these systems, however, is that like any other Memento-based assistant, a Memento-based agent operates only on the models from its specified domain. <p> Issues arising in the evolution of group memory include: * how organizational memories must undergo periodic reorganizations, called re seeding [44], to maintain their usefulness; 128 * how the domain of the organizational memory can co-evolve with its content through a process called incremental formalization <ref> [99] </ref>; and * how groups must come to a consensus on their filing patterns [8]. At present, Memento provides no direct support for the reorganization of an organizational memory stored therein.
Reference: [100] <author> Ben Shneiderman. </author> <title> Designing the User Interface: Strategies for Effective Human-Computer Interaction. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1987. </year>
Reference-contexts: Great advances have been made in the study of the lexical and syntactic user interface levels. It is relatively straightforward to study usability on menu orderings, icon shapes, window layout and the like. From these studies, good user interface guidelines and standards have emerged <ref> [100] </ref>. When a user interface standard is adopted by a vendor, it can be embodied in a user interface tool, such as an application framework or user interface toolkit. Apple Computer's MacApp is one example of an application framework that embodies the Macintosh user interface standard [95].
Reference: [101] <author> Edward Shortliffe. </author> <title> Computer Based Medical Consultations: MYCIN. </title> <publisher> Elsevier Science Publishers, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: An ideal assistant would be a logical consequence of machine intelligence. The field of artificial intelligence is devoted to the problem of making computers more intelligent. Early artificial intelligence research met with surprising successes. During the 1960s and 1970s, systems like the General Problem Solver [38] and MYCIN <ref> [101] </ref> were solving problems in areas (math and disease diagnosis) thought to be the exclusive domain of human experts. More recent research, however, has forced us to reevaluate our expectations of computer intelligence (and hence, assistants).
Reference: [102] <author> John B. Smith and F. Donelson Smith. </author> <title> Abc: A hypermedia system for artifact-based collaboration. </title> <booktitle> In Hypertext '91 Proceedings, </booktitle> <pages> pages 179-192. </pages> <publisher> ACM, </publisher> <month> De-cember </month> <year> 1991. </year>
Reference-contexts: A subset of those systems support the real-time collaborative construction of hypermedia webs. These systems include NLS/Augment [36] from the Stanford Research Institute, Xerox's NoteCards [57, 59], Brown University's Intermedia [80, 73], the University of North Carolina's Artifact Based Collaboration (ABC) System <ref> [60, 102] </ref>, and SEPIA [105] from the Integrated Publication and Information Systems Institute at the German National Research Center for Information Technology (GMD). Note that all of these systems, with perhaps the exception of NLS/Augment, are also considered toolkits for supporting artifact-based collaboration. <p> It would be possible to build a collaborative hypermedia application using Memento, if one used the strategy employed by SEPIA [105]. SEPIA only allows interlinking between atomic document components, but allows components to be aggregated into compound documents. Important hypermedia toolkits include Intermedia [80, 73], NoteCards [57, 59], ABC <ref> [102, 60, 98] </ref>, and DeVise Hypermedia System [55]. Of the mentioned systems, ABC's foundational component, the Distributed Graph Server [98], is most similar to Memento. Within it, primitive objects include attributed nodes and attributed links. Both nodes and links may additionally have "content," which is often a raw data file.
Reference: [103] <author> John F. Sowa. </author> <title> Conceptual Structures: Information Processing in Mind and Machine. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1984. </year>
Reference-contexts: Whereas this section concentrates on the abstract conceptual graph data model, Section 3.1.2 describes the more concrete aspects of conceptual graph usage in Memento. Reasons for Using Conceptual Graphs Memento's representation of models are based on John Sowa's conceptual graphs as described in his book Conceptual Structures <ref> [103] </ref>. There are several reasons for this choice. First, it is not the intent of this dissertation to invent a new knowledge representation. An existing, mature representation is strongly preferable to a new one. <p> Depending on the specific use of conceptual graph theory, a given conceptual graph may not be required to exactly match the schema, but instead satisfy some measure of closeness. In other applications, a high-level concept may be 17 <ref> [103] </ref>, p. 128. 78 required to match a set of schemata called a schematic cluster. For the sake of this dissertation, exact matches of single schemata will be required. Schemata effectively extend the type system over concepts for conceptual graphs. <p> Algorithms are available to convert from other requirements formalisms to that of conceptual graph schemata [28]. 5.4 Knowledge Representation Knowledge representation is a broad area with many diverse contributions. A single, widely-accepted knowledge representation scheme was chosen as the basis for Memento's second layer. Sowa's conceptual graphs <ref> [103] </ref> have served Memento's semantic needs through a simple and extensible model that is amenable to simple 132 graph pattern matching. Through the separation of Memento's first and second layers, Memento could be adapted for use with other knowledge representation schemes.
Reference: [104] <author> Mark Stefik, Gregg Foster, Daniel G. Bobrow, Kenneth Kahn, Stan Lanning, and Lucy Suchman. </author> <title> Beyond the chalkboard: Computer support for collaboration and problem solving in meetings. </title> <journal> Communications of the ACM, </journal> <volume> 30(1) </volume> <pages> 32-46, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: [6], a group calendar and scheduling application; * BIBDB [83], a collaborative system for bibliographic data; * XNetwork [92], a collaborative system for designing network layouts; * ICICLE [14] for code inspection and annotation; * IBIS/gIBIS [23, 24, 110] and SIBYL [74], collaborative systems for group design deliberation; * Colab <ref> [104] </ref>, an early system to support group meetings; and * systems for group decision making, surveyed in [70, 29]. Domain-specific artifact-based collaboration systems such as these are considered assistants because they each have an understanding of their specific domain. These systems can be implemented using the domain-independent Memento infrastructure.
Reference: [105] <author> Norbert Streitz, Jorg Haake, Jorg Hannemann, Andreas Lemke, Wolfgang Schuler, Helge Schutt, and Manfred Thuring. SEPIA: </author> <title> A cooperative hyper-media authoring environment. </title> <booktitle> In Proceedings of the Fourth ACM Conference on Hypertext (ECHT '92), </booktitle> <pages> pages 11-22, </pages> <month> November-December </month> <year> 1992. </year> <month> 147 </month>
Reference-contexts: A subset of those systems support the real-time collaborative construction of hypermedia webs. These systems include NLS/Augment [36] from the Stanford Research Institute, Xerox's NoteCards [57, 59], Brown University's Intermedia [80, 73], the University of North Carolina's Artifact Based Collaboration (ABC) System [60, 102], and SEPIA <ref> [105] </ref> from the Integrated Publication and Information Systems Institute at the German National Research Center for Information Technology (GMD). Note that all of these systems, with perhaps the exception of NLS/Augment, are also considered toolkits for supporting artifact-based collaboration. CSCW toolkits will be discussed in Section 5.1.2. <p> Memento's graphs are composed of atomic data items, whereas hypertext links may anchor within portions of documents that are the nodes of a hypermedia graph. It would be possible to build a collaborative hypermedia application using Memento, if one used the strategy employed by SEPIA <ref> [105] </ref>. SEPIA only allows interlinking between atomic document components, but allows components to be aggregated into compound documents. Important hypermedia toolkits include Intermedia [80, 73], NoteCards [57, 59], ABC [102, 60, 98], and DeVise Hypermedia System [55]. <p> For example, WORLDS [47, 108] uses meta-specifications in the programming language, Introspect [108], to allow the dynamic creation and modification of workflows. Similarly, the VODAK Model Language [66], which is the basis for the collaborative hypermedia system SEPIA <ref> [105] </ref>, uses an open object-oriented data model, based on the concept of meta-classes, to embody semantic information. While the programming approach provides for powerful specification mechanisms, it is often at odds with the goals of collaboration and the evolution of applications. <p> HOS does not address evolutionary mechanisms involving its links. A well-known way for dealing with the evolution of an information space is by versioning the contained information. However, few collaborative systems have addressed this issue. CoVer [56] is a hypermedia versioning server that is part of the SEPIA <ref> [105] </ref> hypermedia toolkit, mentioned earlier. Memento does not currently address the issue of versioning, but such support would be quite useful to assistant developers. Memento will likely include mechanisms for MObject versioning in the future.
Reference: [106] <author> T. J. Teorey, D. Yang, and J. P. Fry. </author> <title> A logical design methodology for relational databases using the extended entity-relationship model. </title> <journal> ACM Computing Surveys, </journal> <volume> 18(2) </volume> <pages> 197-222, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: By contrast, the Entity-Relationship model does not admit to a system of types over entities or relationships. Such a type system has been subsequently added to the model, however <ref> [106] </ref>. Entity-Relationship diagrams from the model are graphs that characterize all possible entities and relationships in a specific data set. The diagrams include information about whether (binary) relationships are 1 to 1, 1 to n, or n to m.
Reference: [107] <author> Loren G. Terveen, Peter G. Selfridge, and M. David Long. </author> <title> From `folklore' to `living design memory'. </title> <booktitle> In Human Factors in Computing Systems: INTERCHI '93 Conference Proceedings, </booktitle> <pages> pages 15-22. </pages> <publisher> ACM, </publisher> <year> 1993. </year>
Reference-contexts: Examples of design environments are XNetwork [92] for network designs and IBIS/gIBIS [23, 24, 110] for capturing design deliberation. Both systems have been mentioned earlier. Another domain in which design has been extensively studied is software engineering design environments <ref> [42, 107] </ref>. Computer supported collaborative learning (CSCL) uses artifact-based collaboration for the end of education. CSCL systems are sometimes called collaboratories [69]. Not surprisingly, the focus of these systems is on their effectiveness as a teaching tool and the experience of the learner using them [109].
Reference: [108] <author> William J. Tolone, Simon M. Kaplan, and Geraldine Fitzpatrick. </author> <title> Specifying dynamic support for collaborative work in WORLDS. </title> <booktitle> In Conference on Organizational Computing Systems, </booktitle> <pages> pages 55-65. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1995. </year>
Reference-contexts: Two key components of virtual workspaces are a sense of locale and an awareness of others also present in one's locale. Typically, the locales are portrayed as interconnected rooms where the participants in each room have an awareness of the others present. Representative systems include WORLDS <ref> [47, 108] </ref> from the University of Illinois at Urbana-Champaign and Xerox's Jupiter multi-user dungeon (MUD) [27]. Studies 20 The Virtual Notebook System is now a commercial product marketed by the Forefront Group. 120 of these systems focus on the social interaction that occurs in the workspace [46]. <p> Other important systems to support collaboration over graph structures include MIT's Oval [76, 77], based on the earlier ObjectLens [72] and the University of Illinois at Urbana-Champaign's WORLDS <ref> [47, 108] </ref>, which uses graph structures to specify activities and workflows. Oval, which stands for objects, views, agents and links, is a collaborative environment which supports the end-user development of applications. Objects in Oval are typed collections of fields and actions. <p> The Electronic Studio assistant and related Electronic Studio WWW Gateway Agent, described in Chapter 4, demonstrated potability and the potential for robust, real-world applications. WORLDS is a collaboration environment based on the specification language Introspect <ref> [108] </ref>. Unlike most artifact-based systems, WORLDS focuses on the dynamic and situated collaboration in the context of social worlds. <p> Two contrasting approaches for dealing with explicit semantic information could be called the programming approach and the data approach. In the programming approach, semantic information is captured in the meta-classes of an object-oriented programming language. For example, WORLDS <ref> [47, 108] </ref> uses meta-specifications in the programming language, Introspect [108], to allow the dynamic creation and modification of workflows. <p> Two contrasting approaches for dealing with explicit semantic information could be called the programming approach and the data approach. In the programming approach, semantic information is captured in the meta-classes of an object-oriented programming language. For example, WORLDS [47, 108] uses meta-specifications in the programming language, Introspect <ref> [108] </ref>, to allow the dynamic creation and modification of workflows. Similarly, the VODAK Model Language [66], which is the basis for the collaborative hypermedia system SEPIA [105], uses an open object-oriented data model, based on the concept of meta-classes, to embody semantic information. <p> As with all strictly programmed systems, care must be taken to prevent incompatible versions of the same application from using the same information space. In the data approach, semantic information is represented as data. The data approach is less powerful because data representations of semantic information are 21 <ref> [108] </ref> p. 56. 124 less expressive than programming languages. Memento follows the data approach; Memento's metamodels and MType system are data. In contrast to the programming approach, semantic specifications can be used in the collaboration process to ensure meaningful interchange. This issue was discussed in Section 2.0.2. <p> Section 1.1.1 identified agents as an important class of assistants. Memento supports information agents primarily through its MObject change notification mechanism, described in Section 2.3. Two Memento-based information agents were demonstrated in Chapter 4. Other collaborative systems, including Oval [76, 77], HOS [99], Linkworks [32], WORLDS <ref> [47, 108] </ref> (all mentioned earlier) provide support for agents. Oval even supports the end-user construction of information agents. One key difference between Memento and these systems, however, is that like any other Memento-based assistant, a Memento-based agent operates only on the models from its specified domain.
Reference: [109] <author> Dadong Wan and Philip M. Johnson. </author> <title> Computer supported collaborative learning using CLARE: the approach and the experimental findings. </title> <booktitle> In Proceedings of the ACM 1994 Conference on Computer Supported Cooperative Work (CSCW '94), </booktitle> <pages> pages 187-198, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Computer supported collaborative learning (CSCL) uses artifact-based collaboration for the end of education. CSCL systems are sometimes called collaboratories [69]. Not surprisingly, the focus of these systems is on their effectiveness as a teaching tool and the experience of the learner using them <ref> [109] </ref>. Two important issues in organizational memories are how to capture and use semantic information and how such memories grow and evolve over time. As mentioned earlier, Memento addresses both of these issues. Capturing semantic information allows the organizational memory to have more meaning and richness.
Reference: [110] <author> K. C. Burgess Yakemovic and E. Jeffery Conklin. </author> <title> Report on a development project use of an issue-based information system. </title> <booktitle> In Proceedings of the ACM 1990 Conference on Computer Supported Cooperative Work (CSCW '90), </booktitle> <pages> pages 105-118, </pages> <month> October </month> <year> 1990. </year> <note> Also published in [1]. </note>
Reference-contexts: A representative list of systems in this diverse category include: * Visual Scheduler [6], a group calendar and scheduling application; * BIBDB [83], a collaborative system for bibliographic data; * XNetwork [92], a collaborative system for designing network layouts; * ICICLE [14] for code inspection and annotation; * IBIS/gIBIS <ref> [23, 24, 110] </ref> and SIBYL [74], collaborative systems for group design deliberation; * Colab [104], an early system to support group meetings; and * systems for group decision making, surveyed in [70, 29]. <p> CSCW toolkits will be discussed in Section 5.1.2. Collaborative hypermedia systems for specific domains include Baylor College of Medicine's Virtual Notebook System [50] 20 , whose hyperlinked documents are pages organized into notebooks, and gIBIS <ref> [110, 23, 24] </ref>, a collaborative hypertext tool specialized for team design deliberation developed at the Microelectronics and Computer Technology Corporation (MCC). The relation between Memento and collaborative hypermedia is discussed later, in Section 5.1.2 where Memento is compared with various hypermedia toolkits. <p> Two important uses of organizational memories are for shared design environments and for computer supported collaborative learning (CSCL). Examples of design environments are XNetwork [92] for network designs and IBIS/gIBIS <ref> [23, 24, 110] </ref> for capturing design deliberation. Both systems have been mentioned earlier. Another domain in which design has been extensively studied is software engineering design environments [42, 107]. Computer supported collaborative learning (CSCL) uses artifact-based collaboration for the end of education. CSCL systems are sometimes called collaboratories [69].
Reference: [111] <author> Craig L. Zarmer and Chee Chew. </author> <title> Frameworks for interactive, extensible, </title> <booktitle> information-intensive applications. In Proceedings of the ACM Symposium on User Interface Software and Technology (UIST '92), </booktitle> <pages> pages 33-41, </pages> <year> 1992. </year>
Reference-contexts: In their research, the semantic layer of the user interface is not varied. Other groups have explored the notion of reusable user interface widgets that convey semantic information via familiar visual information organizations <ref> [58, 84, 111, 61] </ref>. They have investigated tables and outlines as potential bridges between the syntactic and semantic levels of communication in the user inter 15 face. Such research dovetails nicely with the notion of a domain-based infrastructure such as that discussed in this dissertation.
References-found: 111

