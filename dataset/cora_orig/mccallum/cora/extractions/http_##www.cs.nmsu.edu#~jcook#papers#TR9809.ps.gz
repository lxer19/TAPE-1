URL: http://www.cs.nmsu.edu/~jcook/papers/TR9809.ps.gz
Refering-URL: http://www.cs.nmsu.edu/~jcook/papers/
Root-URL: http://www.cs.nmsu.edu
Email: jcook@cs.nmsu.edu alw@cs.colorado.edu  
Title: Balboa: A Framework for Event-Based Process Data Analysis  
Author: Jonathan E. Cook Alexander L. Wolf 
Address: Las Cruces, NM 88003 USA Boulder, CO 80309 USA  
Affiliation: Department of Computer Science Department of Computer Science New Mexico State University University of Colorado  
Abstract: University of Colorado Department of Computer Science Technical Report CU-CS-851-98 February 1998 New Mexico State University Department of Computer Science Technical Report NMSU-CSTR-9809 April 1998 A version of this report to appear in Proceedings of the 5th International Conference on the Software Process This work was supported in part by the National Science Foundation under grant CCR-93-02739 and by the Air Force Material Command, Rome Laboratory, and the Defense Advanced Research Projects Agency under Contract Number F30602-94-C-0253. The content of the information does not necessarily reflect the position or the policy of the Government and no official endorsement should be inferred. c fl 1998 Jonathan E. Cook and Alexander L. Wolf
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G.S. Avrunin, U.A. Buy, J.C. Corbett, L.K. Dillon, and J.C. Wileden. </author> <title> Automated Analysis of Concurrent Systems with the Constrained Expression Toolset. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(11) </volume> <pages> 1204-1222, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: They are also concurrent because they have multiple agents, both people and machines, performing activities that overlap in time and are independent. Analysis of real-time, concurrent systems has long used event data to characterize executions of a system [22, 30]. Event data have been used for checking against specifications <ref> [1] </ref>, for debugging [6, 15], and for behavioral analysis [22]. Temporal and interval logics are also used to perform real-time correctness analysis based on the time between event occurrences [26].
Reference: [2] <author> S. Bandinelli, A. Fuggetta, C. Ghezzi, and L. Lavazza. SPADE: </author> <title> An Environment for Software Process Analysis, Design, </title> <editor> and Enactment. In A. Finkelstein, J. Kramer, and B. Nuseibeh, editors, </editor> <booktitle> Software Process Modeling and Technology, </booktitle> <pages> pages 223-248. </pages> <publisher> Wiley, </publisher> <year> 1994. </year>
Reference-contexts: The Endeavors [8] process infrastructure provides an event-based integration and communication infrastructure, which could easily report events to Balboa for collection purposes. Other process enactment systems such as Oz [7] and SPADE <ref> [2] </ref> are also capable of being instrumented to collect event data. Process integration components, such as ProcessWall [18], are likewise a natural focal point for such instrumentation. Many software engineering environments, even those that are not process based, can supply event data relatively easily.
Reference: [3] <author> N.S. Barghouti and B. Krishnamurthy. </author> <title> Using Event Contexts and Matching Constraints to Monitor Software Processes. </title> <booktitle> In Proceedings of the 17th International Conference on Software Engineering, </booktitle> <pages> pages 83-92. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1995. </year>
Reference-contexts: It also provides functionality for reporting any type of off-computer event as well. Some enactment systems, such as Provence <ref> [3] </ref>, are already centered around monitoring events, and these types of systems would naturally provide event data collection mechanisms. The Endeavors [8] process infrastructure provides an event-based integration and communication infrastructure, which could easily report events to Balboa for collection purposes.
Reference: [4] <author> V.R. Basili and H.D. Rombach. </author> <title> The TAME Project: Towards Improvement-oriented Software Environments. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-14(6):758-773, </volume> <month> June </month> <year> 1988. </year>
Reference-contexts: However, it is essentially a system for registering process events and triggering actions on the occurrence of those events. Thus it cannot be considered a complete framework for collecting, managing, and providing event data to a variety of analysis tools. Similarly, the TAME project <ref> [4] </ref> is centered around an integrated environment, but is not intended to manage data collected outside of itself and to integrate external analysis tools. This paper has the following organization. Section 2 describes the nature of event data, its strengths and weaknesses, and how it can be collected and used.
Reference: [5] <author> V.R. Basili and D.M. Weiss. </author> <title> A Methodology for Collecting Valid Software Engineering Data. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 10(6) </volume> <pages> 728-737, </pages> <year> 1984. </year>
Reference-contexts: This work, so far, has seen the creation of single tools that access process data in an ad hoc manner. Several methods for collecting process data have been proposed and constructed (e.g., <ref> [5, 9, 27, 29] </ref>). However, there has not been a significant effort to propose a coherent framework in which to perform analysis of process data. Lott [23] gives an extensive summary of process support and measurement support in seventeen software engineering environments. <p> Event Data Collection Techniques for event data analysis clearly depend on an ability to collect event data from an executing process, but we do not address this topic in this paper, since a variety of methods for collecting process execution data have already been devised: 2 * Basili and Weiss <ref> [5] </ref> describe a method for manual, forms-based collection of data for use in evaluating and comparing software development methods.
Reference: [6] <author> P. Bates. </author> <title> Debugging Heterogenous Systems Using Event-Based Models of Behavior. </title> <booktitle> In Proceedings of a Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 11-22. </pages> <publisher> ACM Press, </publisher> <month> January </month> <year> 1989. </year>
Reference-contexts: Analysis of real-time, concurrent systems has long used event data to characterize executions of a system [22, 30]. Event data have been used for checking against specifications [1], for debugging <ref> [6, 15] </ref>, and for behavioral analysis [22]. Temporal and interval logics are also used to perform real-time correctness analysis based on the time between event occurrences [26].
Reference: [7] <author> I.S. Ben-Shaul and G.E. Kaiser. </author> <title> A Paradigm for Decentralized Process Modeling and it Realization in the Oz Environment. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <pages> pages 179-188. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: The Endeavors [8] process infrastructure provides an event-based integration and communication infrastructure, which could easily report events to Balboa for collection purposes. Other process enactment systems such as Oz <ref> [7] </ref> and SPADE [2] are also capable of being instrumented to collect event data. Process integration components, such as ProcessWall [18], are likewise a natural focal point for such instrumentation. Many software engineering environments, even those that are not process based, can supply event data relatively easily.
Reference: [8] <author> G.A. Bolcer and R.N. Taylor. Endeavors: </author> <title> A Process System Integration Infrastructure. </title> <booktitle> In Proceedings of the Fourth International Conference on the Software Process, </booktitle> <pages> pages 76-85. </pages> <publisher> IEEE Computer Society, </publisher> <month> December </month> <year> 1996. </year>
Reference-contexts: It also provides functionality for reporting any type of off-computer event as well. Some enactment systems, such as Provence [3], are already centered around monitoring events, and these types of systems would naturally provide event data collection mechanisms. The Endeavors <ref> [8] </ref> process infrastructure provides an event-based integration and communication infrastructure, which could easily report events to Balboa for collection purposes. Other process enactment systems such as Oz [7] and SPADE [2] are also capable of being instrumented to collect event data.
Reference: [9] <author> M.G. Bradac, D.E. Perry, and L.G. Votta. </author> <title> Prototyping a Process Monitoring Experiment. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 774-784, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: This work, so far, has seen the creation of single tools that access process data in an ad hoc manner. Several methods for collecting process data have been proposed and constructed (e.g., <ref> [5, 9, 27, 29] </ref>). However, there has not been a significant effort to propose a coherent framework in which to perform analysis of process data. Lott [23] gives an extensive summary of process support and measurement support in seventeen software engineering environments. <p> Our use would simply collect the events into an event stream. * Wolf and Rosenblum [29] use a hybrid of manual and automated collection methods to collect event data from a build process. * Bradac et al. <ref> [9] </ref>, provided the user with a menu-based tool that collects sampled task and state information.
Reference: [10] <author> J.E. Cook, L.G. Votta, and A.L. Wolf. </author> <title> A Methodology for Cost-Effective Analysis of In-Place Software Processes. </title> <type> Technical Report CU-CS-825-97, </type> <institution> Department of Computer Science, University of Colorado, </institution> <month> January </month> <year> 1997. </year> <note> Submitted for journal publication. </note>
Reference-contexts: This approach helps ease the burden of collecting off-computer, manual events. * Cook et al. <ref> [10] </ref> extracted event data from existing historical repositories and logs automati cally kept by tools. * Krishnamurthy and Rosenblum [21] built a system event monitor, Yeast, that monitors events that occur on computer, and reacts to those events. <p> We do not assume that event streams are homogeneous, but rather that it is more likely that they are non-homogeneous, coming from a variety of sources. This was our experience in an industrial study, where events came from a variety of historical repositories <ref> [10] </ref>. The mechanism to interpret 6 events (i.e., map them into event types and attribute values) is a two-tiered one based on regular expressions and attribute values. For a given event stream, an ordered set of regular expressions is specified for describing the events in that event stream. <p> view and browse the event collections, optionally interpret ing the events in various ways. 8 These three tools are discussed in the next section. 4 Using Balboa in Practice To illustrate Balboa and its managerial tools, we present example uses of Balboa in the study of an industrial software process <ref> [10] </ref>. Our extensive use of an earlier version of Balboa in the actual study led to several improvements that are reflected in the presentation below. Note that the data we give are a sanitized rendering of the proprietary data used in the study.
Reference: [11] <author> J.E. Cook and A.L. Wolf. </author> <title> Toward Metrics for Process Validation. </title> <booktitle> In Proceedings of the Third International Conference on the Software Process, </booktitle> <pages> pages 33-44. </pages> <publisher> IEEE Computer Society, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: machine model, with the transitions annotated with the event types that are matched (or produced) when they fire. 4.2.2 Process Validation The second analysis that we undertook was process validation, which measures the correspondence between a formal model of intended process behavior and the actual behavior exhibited by a process <ref> [11, 13] </ref>. Implicit in our methods is the assumption that a process execution cannot, and indeed should not, exactly follow the model [17]. But the model still represents the idealized process, and relating the actual process executions to the model is necessary in order to understand what is really happening.
Reference: [12] <author> J.E. Cook and A.L. Wolf. </author> <title> Automating Process Discovery through Event-Data Analysis. </title> <booktitle> In Proceedings of the 17th International Conference on Software Engineering, </booktitle> <pages> pages 73-82. </pages> <institution> Association for Computer Machinery, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: Below we describe how the tools that realize these techniques make use of Balboa. 4.2.1 Process Discovery The first analysis we undertook was applying our technique for automated process discovery, which is the use of event data to generate formal models of processes <ref> [12, 14] </ref>. The goal is to create models with which one can reliably reason about and understand a process, and from which one can construct complete process models. The process discovery methods analyze streams of event data collected from executing processes to infer nondeterministic state machine models of behavioral patterns.
Reference: [13] <author> J.E. Cook and A.L. Wolf. </author> <title> Software Process Validation: Quantitatively Measuring the Correspondence of a Process to a Model Using Event-Based Data. </title> <type> Technical Report CU-CS-820-96, </type> <institution> Department of Computer Science, University of Colorado, </institution> <month> November </month> <year> 1996. </year>
Reference-contexts: machine model, with the transitions annotated with the event types that are matched (or produced) when they fire. 4.2.2 Process Validation The second analysis that we undertook was process validation, which measures the correspondence between a formal model of intended process behavior and the actual behavior exhibited by a process <ref> [11, 13] </ref>. Implicit in our methods is the assumption that a process execution cannot, and indeed should not, exactly follow the model [17]. But the model still represents the idealized process, and relating the actual process executions to the model is necessary in order to understand what is really happening.
Reference: [14] <author> J.E. Cook and A.L. Wolf. </author> <title> Discovering Models of Software Processes from Event-Based Data. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 7(3), </volume> <month> July </month> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: Below we describe how the tools that realize these techniques make use of Balboa. 4.2.1 Process Discovery The first analysis we undertook was applying our technique for automated process discovery, which is the use of event data to generate formal models of processes <ref> [12, 14] </ref>. The goal is to create models with which one can reliably reason about and understand a process, and from which one can construct complete process models. The process discovery methods analyze streams of event data collected from executing processes to infer nondeterministic state machine models of behavioral patterns.
Reference: [15] <author> J. Cuny, G. Forman, A. Hough, J. Kundu, C. Lin, L. Snyder, and D. Stemple. </author> <title> The Adriane Debugger: Scalable Application of Event-Based Abstraction. </title> <booktitle> In Proceedings of the ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pages 85-95. </pages> <publisher> ACM Press, </publisher> <month> May </month> <year> 1993. </year> <month> 17 </month>
Reference-contexts: Analysis of real-time, concurrent systems has long used event data to characterize executions of a system [22, 30]. Event data have been used for checking against specifications [1], for debugging <ref> [6, 15] </ref>, and for behavioral analysis [22]. Temporal and interval logics are also used to perform real-time correctness analysis based on the time between event occurrences [26].
Reference: [16] <author> C. Gerety. </author> <title> HP SoftBench: A New Generation of Software Development Tools. </title> <type> Technical Report SESD--89-25, </type> <institution> Hewlett-Packard Software Engineering Systems Division, Fort Collins, Colorado, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: Process integration components, such as ProcessWall [18], are likewise a natural focal point for such instrumentation. Many software engineering environments, even those that are not process based, can supply event data relatively easily. Message-based systems, such as Field [25], Softbench <ref> [16] </ref>, and ToolTalk [28], provide a natural framework from which to collect data about activities. Efforts to collect events across the Internet (e.g., user interface events [19]) are also compatible with our approach. Of the existing tools that developers already use, many naturally provide some event data collection as well.
Reference: [17] <author> J. Grudin. </author> <title> Groupware and Cooperative Work: Problems and Prospects. In R.M. </title> <editor> Baeker, editor, </editor> <booktitle> Groupware and Computer-Supported Cooperative Work, </booktitle> <pages> pages 97-105. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Implicit in our methods is the assumption that a process execution cannot, and indeed should not, exactly follow the model <ref> [17] </ref>. But the model still represents the idealized process, and relating the actual process executions to the model is necessary in order to understand what is really happening. For the validation analysis techniques, accessing the event data from a Balboa server as mapped event types is the method of choice.
Reference: [18] <author> D. Heimbigner. </author> <title> The ProcessWall: A Process State Server Approach to Process Programming. </title> <booktitle> In SIGSOFT '92: Proceedings of the Fifth Symposium on Software Development Environments, </booktitle> <pages> pages 159-168. </pages> <booktitle> ACM SIGSOFT, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: The Endeavors [8] process infrastructure provides an event-based integration and communication infrastructure, which could easily report events to Balboa for collection purposes. Other process enactment systems such as Oz [7] and SPADE [2] are also capable of being instrumented to collect event data. Process integration components, such as ProcessWall <ref> [18] </ref>, are likewise a natural focal point for such instrumentation. Many software engineering environments, even those that are not process based, can supply event data relatively easily. Message-based systems, such as Field [25], Softbench [16], and ToolTalk [28], provide a natural framework from which to collect data about activities.
Reference: [19] <author> D.M. Hilbert and D.F. Redmiles. </author> <title> An Approach to Large-Scale Collection of Application Usage Data Over the Internet. </title> <booktitle> In Proceedings of the 1998 International Conference on Software Engineering. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1998. </year> <note> (to appear). </note>
Reference-contexts: Message-based systems, such as Field [25], Softbench [16], and ToolTalk [28], provide a natural framework from which to collect data about activities. Efforts to collect events across the Internet (e.g., user interface events <ref> [19] </ref>) are also compatible with our approach. Of the existing tools that developers already use, many naturally provide some event data collection as well.
Reference: [20] <author> W.S. Humphrey. </author> <title> A Discipline for Software Engineering. SEI Series in Software Engineering. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: Such a metric is often used in deciding when to stop testing or to switch testing methods, and in predicting when software will be ready to release. Thus, many typical measures defined in existing process improvement paradigms (e.g., PSP <ref> [20] </ref>) could be supported by Balboa. A number of possible enhancements to Balboa can be explored as future work. * While event data supports many varieties of analyses, certainly there are other forms of valid data to be used.
Reference: [21] <author> B. Krishnamurthy and D.S. Rosenblum. Yeast: </author> <title> A General Purpose Event-Action System. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(10) </volume> <pages> 845-857, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: This approach helps ease the burden of collecting off-computer, manual events. * Cook et al. [10] extracted event data from existing historical repositories and logs automati cally kept by tools. * Krishnamurthy and Rosenblum <ref> [21] </ref> built a system event monitor, Yeast, that monitors events that occur on computer, and reacts to those events. It also provides functionality for reporting any type of off-computer event as well. <p> For example, one can use the announce mechanism in Yeast to collect data about meeting and phone communication events <ref> [21] </ref>. 3 We do not address the issue of data integrity in this paper. We assume that prior to the application of analysis tools the data have been examined and, if necessary, cleaned.
Reference: [22] <author> R.J. LeBlanc and A.D. Robbins. </author> <title> Event-Driven Monitoring of Distributed Programs. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 10(6) </volume> <pages> 515-522, </pages> <year> 1985. </year>
Reference-contexts: They are also concurrent because they have multiple agents, both people and machines, performing activities that overlap in time and are independent. Analysis of real-time, concurrent systems has long used event data to characterize executions of a system <ref> [22, 30] </ref>. Event data have been used for checking against specifications [1], for debugging [6, 15], and for behavioral analysis [22]. Temporal and interval logics are also used to perform real-time correctness analysis based on the time between event occurrences [26]. <p> Analysis of real-time, concurrent systems has long used event data to characterize executions of a system [22, 30]. Event data have been used for checking against specifications [1], for debugging [6, 15], and for behavioral analysis <ref> [22] </ref>. Temporal and interval logics are also used to perform real-time correctness analysis based on the time between event occurrences [26].
Reference: [23] <editor> C.M. Lott. </editor> <booktitle> Process and Measurement Support in SEEs. SIGSOFT Software Engineering Notes, </booktitle> <volume> 18(4) </volume> <pages> 83-93, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Several methods for collecting process data have been proposed and constructed (e.g., [5, 9, 27, 29]). However, there has not been a significant effort to propose a coherent framework in which to perform analysis of process data. Lott <ref> [23] </ref> gives an extensive summary of process support and measurement support in seventeen software engineering environments.
Reference: [24] <author> J.K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. Professional Computing Series. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Rather, language-specific client libraries support the building of tools at a higher level than the messaging layer provides. Balboa currently supports client tools written in both the C++ and Tcl <ref> [24] </ref> programming languages, thus allowing both the construction of robust, "polished" tools and the fast exploration of ideas using an interpreted prototyping language. The language support is tailored to the specific programming language, rather than being consistent across all languages. <p> An embedded scripting language such as Tcl <ref> [24] </ref> would be ideal in providing the ability for tools to download scripts that manipulate and/or filter the event data before they are transmitted. * A Web interface capability would enhance the interactivity and manageability of the server and data. 16
Reference: [25] <author> S.P. Reiss. </author> <title> Connecting Tools Using Message Passing in the Field Environment. </title> <journal> IEEE Software, </journal> <pages> pages 57-66, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Process integration components, such as ProcessWall [18], are likewise a natural focal point for such instrumentation. Many software engineering environments, even those that are not process based, can supply event data relatively easily. Message-based systems, such as Field <ref> [25] </ref>, Softbench [16], and ToolTalk [28], provide a natural framework from which to collect data about activities. Efforts to collect events across the Internet (e.g., user interface events [19]) are also compatible with our approach.
Reference: [26] <author> R.L. Schwartz, P.M. Melliar-Smith, and F.H. Vogt. </author> <title> An Interval Logic for Higher-Level Reasoning. </title> <booktitle> In Proceedings of the Second ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 173-186. </pages> <publisher> ACM Press, </publisher> <month> August </month> <year> 1983. </year>
Reference-contexts: Event data have been used for checking against specifications [1], for debugging [6, 15], and for behavioral analysis [22]. Temporal and interval logics are also used to perform real-time correctness analysis based on the time between event occurrences <ref> [26] </ref>. Because of the large body of work applying analysis of event data to systems similar to software processes, we have created the Balboa framework to allow tools easy and consistent access to event data.
Reference: [27] <author> R.W. Selby, A.A. Porter, D.C. Schmidt, and J. Berney. </author> <title> Metric-Driven Analysis and Feedback Systems for Enabling Empirically Guided Software Development. </title> <booktitle> In Proceedings of the 13th International Conference on Software Engineering, </booktitle> <pages> pages 288-298. </pages> <publisher> IEEE Computer Society, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: This work, so far, has seen the creation of single tools that access process data in an ad hoc manner. Several methods for collecting process data have been proposed and constructed (e.g., <ref> [5, 9, 27, 29] </ref>). However, there has not been a significant effort to propose a coherent framework in which to perform analysis of process data. Lott [23] gives an extensive summary of process support and measurement support in seventeen software engineering environments. <p> Balboa is a freely available system, along with several analysis tools that we have built in the course of our software process research. 1 An existing system that comes closest to claiming the position of a data analysis framework is Amadeus <ref> [27] </ref>. It is flexible in the specification of what data to collect and what to do with the data. It is positioned as a supporting unit to a process-guidance system, so it is meant to integrate other tools. <p> Their methods would be a good place to begin in creating a system for manual event data collection. * Selby et al. <ref> [27] </ref> built a system, Amadeus, for automated collection and analysis of process metrics. It acts as an event monitor, allowing the triggering of actions based on certain events.
Reference: [28] <institution> An Introduction to the ToolTalk Service. Sun Microsystems, Inc., </institution> <year> 1991. </year>
Reference-contexts: Process integration components, such as ProcessWall [18], are likewise a natural focal point for such instrumentation. Many software engineering environments, even those that are not process based, can supply event data relatively easily. Message-based systems, such as Field [25], Softbench [16], and ToolTalk <ref> [28] </ref>, provide a natural framework from which to collect data about activities. Efforts to collect events across the Internet (e.g., user interface events [19]) are also compatible with our approach. Of the existing tools that developers already use, many naturally provide some event data collection as well.
Reference: [29] <author> A.L. Wolf and D.S. Rosenblum. </author> <title> A Study in Software Process Data Capture and Analysis. </title> <booktitle> In Proceedings of the Second International Conference on the Software Process, </booktitle> <pages> pages 115-124. </pages> <publisher> IEEE Computer Society, </publisher> <month> February </month> <year> 1993. </year>
Reference-contexts: This work, so far, has seen the creation of single tools that access process data in an ad hoc manner. Several methods for collecting process data have been proposed and constructed (e.g., <ref> [5, 9, 27, 29] </ref>). However, there has not been a significant effort to propose a coherent framework in which to perform analysis of process data. Lott [23] gives an extensive summary of process support and measurement support in seventeen software engineering environments. <p> Because of the large body of work applying analysis of event data to systems similar to software processes, we have created the Balboa framework to allow tools easy and consistent access to event data. Following Wolf and Rosenblum <ref> [29] </ref>, we define an event as an identifiable, instantaneous action, such as invoking a development tool or deciding upon the next activity to be performed. <p> It acts as an event monitor, allowing the triggering of actions based on certain events. Our use would simply collect the events into an event stream. * Wolf and Rosenblum <ref> [29] </ref> use a hybrid of manual and automated collection methods to collect event data from a build process. * Bradac et al. [9], provided the user with a menu-based tool that collects sampled task and state information.
Reference: [30] <author> P.H. Worley. </author> <title> A New PICL Trace File Format. </title> <type> Technical Report ORNL/TM-12125, </type> <institution> Oak Ridge National Laboratory, </institution> <year> 1992. </year> <month> 18 </month>
Reference-contexts: They are also concurrent because they have multiple agents, both people and machines, performing activities that overlap in time and are independent. Analysis of real-time, concurrent systems has long used event data to characterize executions of a system <ref> [22, 30] </ref>. Event data have been used for checking against specifications [1], for debugging [6, 15], and for behavioral analysis [22]. Temporal and interval logics are also used to perform real-time correctness analysis based on the time between event occurrences [26].
References-found: 30

