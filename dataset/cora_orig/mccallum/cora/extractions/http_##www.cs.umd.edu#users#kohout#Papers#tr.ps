URL: http://www.cs.umd.edu/users/kohout/Papers/tr.ps
Refering-URL: http://www.cs.umd.edu/users/kohout/
Root-URL: 
Email: kohout@cs.umd.edu musliner@umiacs.umd.edu hendler@cs.umd.edu  
Title: Dynamic Reaction on the Maruti Hard Real-Time Operating System  
Author: Robert C. Kohout David J. Musliner James A. Hendler 
Address: College Park, MD 20742  
Affiliation: Institute for Advanced Computer Studies and Computer Science Department University of Maryland,  
Abstract: The search-based techniques of classical AI Planning systems are ill-suited to the demands of highly dynamic and complex environments. As a result, research has turned towards stimulus-driven "reactive" systems in an effort to develop intelligent control systems that can operate in rapidly changing and unpredictable environments. An important class of control systems, known as "mission-critical" real-time systems, is further complicated by the potential for catastrophic failure if the system does not produce acceptable behavior within strict deadlines. This makes it imperative that system operation can be proven correct before deployment. In this paper, we discuss the Dynamic Reaction (DR) model of reactive system design, and its use on the Maruti hard real-time operating system. Together, DR and Maruti provide the basis for demonstrable properties of behavioral correctness and timeliness in mission-critical environments. We show how the DR/Maruti combination allows us to develop control systems which are capable of producing intelligent behavior with provable safety properties. This research was supported in part by grants from NSF(IRI-9306580), ONR (N00014-J-91-1451), AFOSR (F49620-93-1-0065), the ARPA/Rome Laboratory Planning Initiative (F30602-93-C-0039), and the ARPA I3 Initiative (N00014-94-10907)and by ARI (MDA-903-92-R-0035, subcontract through Microelectronics and Design, Inc.) Dr. Hendler is also affiliated with the UM Institute for Systems Research (NSF Grant NSF EEC 94-02384). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. E. Agre and D. Chapman, "Pengi: </author> <title> An Implementation of a Theory of Activity," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 268-272. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: Others have chosen to abandon strong models of the environment. Several researchers (e.g., <ref> [1, 16, 36] </ref>) have demonstrated that the regularities of the world can be exploited to allow a relatively small set of behaviors to produce desirable global effects. <p> While these systems have important differences, they can all be viewed as attempts to "speed-up" the classical paradigm. At the same time, several other researchers had begun to explore ways to achieve reactivity outside of the classical paradigm. In 1987, Agre and Chapman <ref> [1] </ref> described a system which achieved a modest level of performance at playing a highly dynamic video game, while using a control regimen that was completely driven by responses to environmental influences. <p> Demonstrating the efficacy of reaction in the absence of a deliberative component (e.g. <ref> [1, 16, 36] </ref>). 2. Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., [12, 17, 22, 37]). 3. Developing formal models of reactive systems (e.g., [22, 24]). 4. <p> Much of the work in reactivity has been motivated by application areas where intelligent behavior in the presence of hard temporal deadlines and constraints is desirable. The timing requirements of such problem domains make the techniques of classical planning difficult, if not impossible, to apply. Agre's Pengi program <ref> [1] </ref> is a good example of this. In this system, the program is responsible for controlling a character in a video game that has to react quickly to a variety of environmental stimuli.
Reference: [2] <author> J. S. Albus, </author> <title> "Outline for a Theory of Intelligence," </title> <journal> IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> vol. 21, no. 3, </volume> <pages> pp. 473-509, </pages> <year> 1991. </year>
Reference-contexts: The Command Monitor is responsible for making sense out of all of these "outside influences," and for deciding whether or not a message telling the controller to change its goal is warranted. In more complex systems, we envision a hierarchical system of controllers, much like that described in <ref> [2, 40] </ref>. At each level of the hierarchy, a separate control system would be responsible for achieving a goal that is provided to it by a higher level, while (if needed) using a set of monitors to ensure that safety conditions are maintained.
Reference: [3] <author> R. C. Arkin, </author> <title> "Integrating Behavioral, Perceptual, and World Knowledge in Reactive Navigation," </title> <booktitle> in Robotics and Autonomous Systems 6, </booktitle> <pages> pp. 105-122, </pages> <year> 1990. </year>
Reference-contexts: Since they rely fundamentally upon their developers for their proper functioning in the world, systems designed in this way offer little insight into how other reactive systems can be built. A third approach has been to construct "hybrid" systems, comprised of separate reactive and deliberative components (e.g., <ref> [3, 19] </ref>). While such systems have the potential for combining the timeliness of purely reactive behaviors with the correctness achievable through state-space search, current implementations suffer from all the weaknesses attributed to the reactive systems discussed above, as well as many of those of conventional planners. <p> Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., [12, 17, 22, 37]). 3. Developing formal models of reactive systems (e.g., [22, 24]). 4. Combining reactive circuitry with other, more established models, especially conventional planners (e.g., <ref> [3, 19, 25, 32, 40] </ref>). Much of the work in reactivity has been motivated by application areas where intelligent behavior in the presence of hard temporal deadlines and constraints is desirable. The timing requirements of such problem domains make the techniques of classical planning difficult, if not impossible, to apply.
Reference: [4] <author> R. Brooks, </author> <title> "Intelligence Without Reason," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 569-595, </pages> <year> 1991. </year>
Reference-contexts: Once again, it is difficult to construct a precise chronology based solely upon the publication record. Brooks <ref> [4] </ref> claims that early researchers were aware of the inadequacies of classical planning, but that as the field developed, people gradually lost sight of these problems, or at the very least overlooked their importance. <p> A flurry of activity of the sort described above generally marks the emergence of a new paradigm, and we can expect that it will be some time before the planning community reaches consensus about what reactive systems are, or should be. Brooks <ref> [4, 7] </ref> has taken the extreme position that the techniques of classical planning will be of little use to systems actively responding to and acting in real-world situations. <p> If no "safe harbor" can be found, the Dodger is directed to use up one of its shields. 7.2.7 Interfacing with a Conventional Planner With the notable exception of Brooks <ref> [4] </ref>, most researchers acknowledge the desirability of interfacing a reactive systems with longer-term planners employing search-based technologies. In the work described here, we have not needed to do this. Nonetheless, we have designed the controller to support such an interface.
Reference: [5] <author> R. A. Brooks, </author> <title> "A Robust Layered Control System for a Mobile Robot," </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> vol. RA-2, no. 1, </volume> <pages> pp. 14-22, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: In 1987, Agre and Chapman [1] described a system which achieved a modest level of performance at playing a highly dynamic video game, while using a control regimen that was completely driven by responses to environmental influences. Brooks <ref> [5, 8] </ref> began a disciplined approach to the design and construction of mobile robots that dogmatically rejected the techniques of classical planning. <p> As we will discuss below, this simple capability can be used as the basis for a hierarchical system of control, such as those advocated by Brooks <ref> [5] </ref> and Spector [40]. In the current implementation, there are times when the Dodger control program projects a collision with a ray that it will not be able to avoid.
Reference: [6] <author> R. A. Brooks, </author> <title> "Elephants Don't Play Chess," in Designing Autonomous Agents, </title> <editor> P. Maes, editor, MIT/Elsevier, </editor> <year> 1990. </year>
Reference-contexts: the state of the practice, as exemplified by implemented systems, and the cultural vision of possible applications is so wide that it is sometimes difficult to see what the two extremes have in common. 1 For example Kaelbling [22] points to the bounded depth of the GAPPS circuits, and Brooks <ref> [6] </ref> relies upon the nature of the hardware he employs to make claims of adequate "real-time" response. 2 One well recognized sub-discipline in the field of AI is the domain of planning, which we will characterize generally as the study of how to select sequences of primitive, effector-level actions, in such
Reference: [7] <author> R. A. Brooks, </author> <title> "Intelligence Without Representation," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 47, </volume> <pages> pp. 139-159, </pages> <year> 1991. </year>
Reference-contexts: Others have chosen to abandon strong models of the environment. Several researchers (e.g., [1, 16, 36]) have demonstrated that the regularities of the world can be exploited to allow a relatively small set of behaviors to produce desirable global effects. Brooks <ref> [7] </ref> has taken the extreme position that the world models of traditional systems are unnecessary, and that intelligent behavior is possible in systems that minimize symbolic representation of the external world. <p> A flurry of activity of the sort described above generally marks the emergence of a new paradigm, and we can expect that it will be some time before the planning community reaches consensus about what reactive systems are, or should be. Brooks <ref> [4, 7] </ref> has taken the extreme position that the techniques of classical planning will be of little use to systems actively responding to and acting in real-world situations.
Reference: [8] <author> R. A. Brooks and J. H. Connell, </author> <title> "Asynchronous Distributed Control System for a Mobile Robot," </title> <booktitle> in SPIE Vol. 727 Mobile Robots, </booktitle> <pages> pp. 77-84, </pages> <year> 1986. </year>
Reference-contexts: In 1987, Agre and Chapman [1] described a system which achieved a modest level of performance at playing a highly dynamic video game, while using a control regimen that was completely driven by responses to environmental influences. Brooks <ref> [5, 8] </ref> began a disciplined approach to the design and construction of mobile robots that dogmatically rejected the techniques of classical planning.
Reference: [9] <author> D. Chapman, </author> <title> "Planning for Conjunctive Goals," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 32, no. 3, </volume> <pages> pp. 333-374, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: Chapman developed a broad characterization of the STRIPS paradigm in <ref> [9] </ref>, and Erol, Hendler and Nau, have recently extended this to other systems in [13]. A more complete treatment of the history of this research tradition can be found in [17] and [43].
Reference: [10] <author> A. Damm, J. Reisinger, W. Schwabl, and H. Kopetz, </author> <title> "The Real-Time Operating System of MARS," </title> <journal> SIGOPS, </journal> <volume> vol. 23, no. 3, </volume> , <year> 1989. </year>
Reference-contexts: A number of such operating systems have been developed, including the Spring kernel [41], CHAOS [38],HARTOS [23], MARS <ref> [10] </ref> and Maruti [26]. In this paper, we describe a series of programs that were designed to address increasingly complex issues of intelligent real-time control, and which take advantage of the systems-level support offered by the Maruti HRTOS.
Reference: [11] <author> T. Dean and M. Boddy, </author> <title> "An Analysis of Time-Dependent Planning," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 49-54, </pages> <year> 1988. </year>
Reference-contexts: However, the system has made no attempt to guarantee, or even to reason about, 5 the adequacy of this response time. Similarly, Dean and Boddy's any-time algorithms <ref> [11] </ref> can be seen as guaranteeing adequate response at the expense of the quality of solution. Georgeff has shown [17] that, under certain assumptions, PRS can be guaranteed to notice an external event within a bounded amount of time. While this is necessary for hard real-time performance, it hardly suffices.
Reference: [12] <author> T. Dean, L. P. Kaelbling, J. Kirman, and A. Nicholson, </author> <title> "Planning With Deadlines in Stochastic Domains," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 574-579, </pages> <year> 1993. </year>
Reference-contexts: Demonstrating the efficacy of reaction in the absence of a deliberative component (e.g. [1, 16, 36]). 2. Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., <ref> [12, 17, 22, 37] </ref>). 3. Developing formal models of reactive systems (e.g., [22, 24]). 4. Combining reactive circuitry with other, more established models, especially conventional planners (e.g., [3, 19, 25, 32, 40]).
Reference: [13] <author> K. Erol, J. Hendler, and D. Nau, "UMCP: </author> <title> A Sound and Complete Procedure for Hierarchical Task-Network Planning," </title> <note> submitted to AAAI-94, </note> <month> July </month> <year> 1994. </year> <month> 21 </month>
Reference-contexts: Chapman developed a broad characterization of the STRIPS paradigm in [9], and Erol, Hendler and Nau, have recently extended this to other systems in <ref> [13] </ref>. A more complete treatment of the history of this research tradition can be found in [17] and [43].
Reference: [14] <author> J. Feldman and R. Sproull, </author> <booktitle> "Decision Theory and Artificial Intelligence II: the Hungry Mon--key," Cognitive Science, </booktitle> <volume> vol. 1, no. 2, </volume> <pages> pp. 158-192, </pages> <year> 1977. </year>
Reference-contexts: The controller then decides whether to go back to the base or to pursue the next goal that appears on the screen. In order to make this decision quickly, the controller uses decision theoretic techniques <ref> [14] </ref> to make this determination. The system knows where it is, where the next goal is and where the base is. It uses this information, along with the number of shields it has remaining, to rapidly decide what it should do next.
Reference: [15] <author> R. Fikes, P. E. Hart, and N. Nilsson, </author> <title> "Learning and Executing Generalized Robot Plans," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 3, no. 4, </volume> <pages> pp. 251-288, </pages> <year> 1972. </year>
Reference-contexts: It is difficult to say exactly when and where planning emerged as a recognized sub-domain of AI, but it is certainly no later than the descriptions of the STRIPS <ref> [15] </ref> system that were published in the early 70's. STRIPS, in turn, can be seen as a descendant of both the state-space search paradigm pioneered by Newell and Simon [30] in their GPS program, and the use of formal logic and the predicate calculus exemplified by Green in [18].
Reference: [16] <author> R. J. Firby, </author> <title> "An Investigation into Reactive Planning in Complex Domains," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 202-206, </pages> <year> 1987. </year>
Reference-contexts: Others have chosen to abandon strong models of the environment. Several researchers (e.g., <ref> [1, 16, 36] </ref>) have demonstrated that the regularities of the world can be exploited to allow a relatively small set of behaviors to produce desirable global effects. <p> Sanborn and Hendler [36] advocated a system where several cooperating processes, making strictly local computations and working without a strong model of the world, could be combined to produce desirable, dynamic behaviors. Firby <ref> [16] </ref> developed a system for modeling reactive circuitry which, instead of projecting future world states, relied solely upon persistent, goal-directed behaviors to control the operation of a mobile robot. All of these systems rely heavily upon the system developer to create and coordinate the appropriate set of low-level reactions. <p> Demonstrating the efficacy of reaction in the absence of a deliberative component (e.g. <ref> [1, 16, 36] </ref>). 2. Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., [12, 17, 22, 37]). 3. Developing formal models of reactive systems (e.g., [22, 24]). 4.
Reference: [17] <author> M. P. Georgeff and A. L. Lansky, </author> <title> "Reactive Reasoning and Planning," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 677-682, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: One approach has been to essentially "precompile" traditional deliberative systems, in an effort to calculate the appropriate response to a broad set of environmental conditions ahead of time <ref> [17, 22, 37] </ref>. Such systems are founded upon the deductive correctness of conventional planners, and focus upon extending this paradigm to achieve timeliness. <p> Chapman developed a broad characterization of the STRIPS paradigm in [9], and Erol, Hendler and Nau, have recently extended this to other systems in [13]. A more complete treatment of the history of this research tradition can be found in <ref> [17] </ref> and [43]. With few exceptions, this early work in AI planning focused upon the sorts of action-sequencing problems that are known to be solvable by humans, and perhaps only a handful of other organisms. <p> turned their attention to addressing the problems posed by dynamic, uncertain and/or unpredictable environments, which we shall simply refer to as "reactive systems." Several early papers came out of the same SRI laboratory where STRIPS had been used in one of the very first robot planning projects: Georgeff and Lansky <ref> [17] </ref> describe PRS, a system in which plan generation, monitoring and execution are interleaved, and in which it is possible to pursue multiple goals simultaneously. <p> Demonstrating the efficacy of reaction in the absence of a deliberative component (e.g. [1, 16, 36]). 2. Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., <ref> [12, 17, 22, 37] </ref>). 3. Developing formal models of reactive systems (e.g., [22, 24]). 4. Combining reactive circuitry with other, more established models, especially conventional planners (e.g., [3, 19, 25, 32, 40]). <p> However, the system has made no attempt to guarantee, or even to reason about, 5 the adequacy of this response time. Similarly, Dean and Boddy's any-time algorithms [11] can be seen as guaranteeing adequate response at the expense of the quality of solution. Georgeff has shown <ref> [17] </ref> that, under certain assumptions, PRS can be guaranteed to notice an external event within a bounded amount of time. While this is necessary for hard real-time performance, it hardly suffices.
Reference: [18] <author> C. Green, </author> <title> "The application of theorem proving to problem solving," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, Walker, editor, </booktitle> <pages> pp. 219-239. </pages> <address> Mitre Co., </address> <year> 1969. </year>
Reference-contexts: STRIPS, in turn, can be seen as a descendant of both the state-space search paradigm pioneered by Newell and Simon [30] in their GPS program, and the use of formal logic and the predicate calculus exemplified by Green in <ref> [18] </ref>. GPS introduced search as a general problem solving strategy, 2 and Green's formalism was an early attempt to extend and improve upon this method by using the methods of formal logic. <p> the frame problem that existed in Green's formulation, but also restricted its problem domain to "the class of problems faced by a robot in re-arranging objects and in navigating, i.e., problems that require quite complex and general world models compared to those needed in the solutions of puzzles and games <ref> [18] </ref>." Thus began a long tradition of improvements on the basic STRIPS paradigm which came to be known as AI planning research, and which throughout the rest of this paper is referred to as "Classical" planning.
Reference: [19] <author> B. Hayes-Roth, </author> <title> "An architecture for adaptive intelligent systems," </title> <note> accepted for publication in Artificial Intelligence,Special Issue on Agents and Interactivity, </note> <year> 1994. </year>
Reference-contexts: Since they rely fundamentally upon their developers for their proper functioning in the world, systems designed in this way offer little insight into how other reactive systems can be built. A third approach has been to construct "hybrid" systems, comprised of separate reactive and deliberative components (e.g., <ref> [3, 19] </ref>). While such systems have the potential for combining the timeliness of purely reactive behaviors with the correctness achievable through state-space search, current implementations suffer from all the weaknesses attributed to the reactive systems discussed above, as well as many of those of conventional planners. <p> Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., [12, 17, 22, 37]). 3. Developing formal models of reactive systems (e.g., [22, 24]). 4. Combining reactive circuitry with other, more established models, especially conventional planners (e.g., <ref> [3, 19, 25, 32, 40] </ref>). Much of the work in reactivity has been motivated by application areas where intelligent behavior in the presence of hard temporal deadlines and constraints is desirable. The timing requirements of such problem domains make the techniques of classical planning difficult, if not impossible, to apply.
Reference: [20] <author> J. Hendler, </author> <title> "Planning in uncertain Unpredictable or Changing Environments," </title> <type> Technical Report SRC TR 90-45, </type> <institution> Systems Research Center,University of Maryland, </institution> <year> 1990. </year>
Reference: [21] <author> F. F. Ingrand and M. P. Georgeff, </author> <title> "Managing Deliberation and Reasoning in Real-Time AI Systems," </title> <booktitle> in Proc. Workshop on Innovative Approaches to Planning, Scheduling and Control, </booktitle> <pages> pp. 284-291, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: Georgeff has shown [17] that, under certain assumptions, PRS can be guaranteed to notice an external event within a bounded amount of time. While this is necessary for hard real-time performance, it hardly suffices. In <ref> [21] </ref>, it is claimed that, in principle, it is possible to bound the time required to determine a correct output in PRS.
Reference: [22] <author> L. P. Kaelbling, </author> <title> "Goals as Parallel Program Specifications," </title> <booktitle> in Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 60-65, </pages> <year> 1988. </year>
Reference-contexts: One approach has been to essentially "precompile" traditional deliberative systems, in an effort to calculate the appropriate response to a broad set of environmental conditions ahead of time <ref> [17, 22, 37] </ref>. Such systems are founded upon the deductive correctness of conventional planners, and focus upon extending this paradigm to achieve timeliness. <p> The gulf between the state of the practice, as exemplified by implemented systems, and the cultural vision of possible applications is so wide that it is sometimes difficult to see what the two extremes have in common. 1 For example Kaelbling <ref> [22] </ref> points to the bounded depth of the GAPPS circuits, and Brooks [6] relies upon the nature of the hardware he employs to make claims of adequate "real-time" response. 2 One well recognized sub-discipline in the field of AI is the domain of planning, which we will characterize generally as the <p> Schoppers [37] developed the idea of "universal plans," in which all of the possible relevant world states are anticipated during plan generation, the appropriate response is predetermined, and compiled into what is essentially a decision tree. Kaelbling and Rosenschien <ref> [22] </ref> developed GAPPS, a formalism for constructing reactive circuits. While these systems have important differences, they can all be viewed as attempts to "speed-up" the classical paradigm. At the same time, several other researchers had begun to explore ways to achieve reactivity outside of the classical paradigm. <p> Demonstrating the efficacy of reaction in the absence of a deliberative component (e.g. [1, 16, 36]). 2. Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., <ref> [12, 17, 22, 37] </ref>). 3. Developing formal models of reactive systems (e.g., [22, 24]). 4. Combining reactive circuitry with other, more established models, especially conventional planners (e.g., [3, 19, 25, 32, 40]). <p> Demonstrating the efficacy of reaction in the absence of a deliberative component (e.g. [1, 16, 36]). 2. Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., [12, 17, 22, 37]). 3. Developing formal models of reactive systems (e.g., <ref> [22, 24] </ref>). 4. Combining reactive circuitry with other, more established models, especially conventional planners (e.g., [3, 19, 25, 32, 40]). Much of the work in reactivity has been motivated by application areas where intelligent behavior in the presence of hard temporal deadlines and constraints is desirable. <p> Thus, the reactive circuits of GAPPS <ref> [22] </ref> represent a reasonable first step towards an intelligent real-time system, providing logically correct responses within a bounded response time. However, the system has made no attempt to guarantee, or even to reason about, 5 the adequacy of this response time.
Reference: [23] <author> D. Kandlur, D. Kiskis, and K. Shin, </author> <title> "A Real-Time Operating System for HARTS," </title> <booktitle> in Mission Critical Operating Systems, </booktitle> <pages> pp. 146-158, </pages> <year> 1992. </year>
Reference-contexts: A number of such operating systems have been developed, including the Spring kernel [41], CHAOS [38],HARTOS <ref> [23] </ref>, MARS [10] and Maruti [26]. In this paper, we describe a series of programs that were designed to address increasingly complex issues of intelligent real-time control, and which take advantage of the systems-level support offered by the Maruti HRTOS.
Reference: [24] <author> D. M. Lyons, </author> <title> "A Formal Model for Reactive Robot Plans," </title> <booktitle> in Proc. Rensselaer's 2nd Int'l Conf. on Computer Integrated Manufacturing, </booktitle> <pages> pp. 418-423, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Demonstrating the efficacy of reaction in the absence of a deliberative component (e.g. [1, 16, 36]). 2. Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., [12, 17, 22, 37]). 3. Developing formal models of reactive systems (e.g., <ref> [22, 24] </ref>). 4. Combining reactive circuitry with other, more established models, especially conventional planners (e.g., [3, 19, 25, 32, 40]). Much of the work in reactivity has been motivated by application areas where intelligent behavior in the presence of hard temporal deadlines and constraints is desirable.
Reference: [25] <author> P. Maes, </author> <title> "The Dynamics of Action Selection," </title> <booktitle> in Proceedings of IJCAI-89, </booktitle> <volume> volume 2, </volume> <pages> pp. 991-997, </pages> <year> 1989. </year>
Reference-contexts: Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., [12, 17, 22, 37]). 3. Developing formal models of reactive systems (e.g., [22, 24]). 4. Combining reactive circuitry with other, more established models, especially conventional planners (e.g., <ref> [3, 19, 25, 32, 40] </ref>). Much of the work in reactivity has been motivated by application areas where intelligent behavior in the presence of hard temporal deadlines and constraints is desirable. The timing requirements of such problem domains make the techniques of classical planning difficult, if not impossible, to apply.
Reference: [26] <author> D. Mosse, O. Gudmundsson, and A. K. Agrawala, </author> <title> "The Maruti System and its Implementation," </title> <journal> IEEE TCOS Newsletter, </journal> <volume> vol. 5, no. 3, </volume> , <month> September </month> <year> 1991. </year>
Reference-contexts: A number of such operating systems have been developed, including the Spring kernel [41], CHAOS [38],HARTOS [23], MARS [10] and Maruti <ref> [26] </ref>. In this paper, we describe a series of programs that were designed to address increasingly complex issues of intelligent real-time control, and which take advantage of the systems-level support offered by the Maruti HRTOS. <p> In order to use DR in mission-critical applications, the performance of the individual monitors must be guaranteed: they must be scheduled so that they will always have the resources necessary to respond in a timely fashion. The Maruti Hard Real-Time Operating System <ref> [26, 35] </ref> provides these capabilities. Maruti is designed to support hard real-time applications on a variety of distributed systems while providing fault tolerant operation. <p> The additional complexity of the Dodger domain raises a number of fundamental issues in the design of intelligent control systems for mission-critical applications, and shows how the DR/Maruti approach is able to address these issues. 4 There have been two implementations of Maruti. The first proof-of-concept implementation (described in <ref> [26] </ref>) was used to develop both the Dodger and the Pursuer/Evader systems discussed below.
Reference: [27] <author> D. J. Musliner, </author> <title> "Scheduling Issues Arising from Automated Real-Time Scheduling," </title> <type> Technical Report CS-TR-3364, </type> <institution> UMIACS-TR-94-118, University of Maryland Department of Computer Science, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: The worst-case invocation separation is actually (2 fl period) process execution time. The inadequacies of period-based scheduling are discussed at greater length in <ref> [27] </ref>. 19 * Isolating the use of a model of a dynamic environment from the problem of keeping the model current is conducive to the early detection of resource limitations. * The DR model uses monitors to check for the potential violation of safety conditions and override normal system operation if
Reference: [28] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> "CIRCA: A Cooperative Intelligent Real-Time Control Architecture," </title> <journal> IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> vol. 23, no. 6, </volume> <pages> pp. 1561-1574, </pages> <year> 1993. </year>
Reference-contexts: None of these approaches has directly addressed the issue of timeliness. Almost no research has been done to ensure that reactions occur in a timely fashion, or even to establish the conditions 1 under which appropriate responses can be made. With the exception of the CIRCA system <ref> [28] </ref>, claims of real-time performance are based upon either empirical testing or the restricted nature of the computations allowed in the computing model. 1 This may be sufficient for systems in which there is little or no penalty for delay, but in "mission-critical" systems, where timely response is crucial, bounded response <p> However, except in certain well behaved cases, this involves sacrificing the quality of solution (for example, by using some form of any-time algorithm), and does not at all address the need to determine exactly what is an adequate response time. Musliner, Durfee, and Shin's CIRCA program <ref> [28, 29] </ref> integrates AI with hard real-time capabilities by separating the system into two functionally distinct sub-systems. A real-time component is responsible for ensuring that various competences meet their execution deadlines, and an AI component reasons about developing guaranteed control plans for the real-time component to execute.
Reference: [29] <author> D. J. Musliner, E. H. Durfee, and K. G. Shin, </author> <title> "World Modeling for the Dynamic Construction of Real-Time Control Plans," </title> <note> to appear in Artificial Intelligence, 1995. 22 </note>
Reference-contexts: However, except in certain well behaved cases, this involves sacrificing the quality of solution (for example, by using some form of any-time algorithm), and does not at all address the need to determine exactly what is an adequate response time. Musliner, Durfee, and Shin's CIRCA program <ref> [28, 29] </ref> integrates AI with hard real-time capabilities by separating the system into two functionally distinct sub-systems. A real-time component is responsible for ensuring that various competences meet their execution deadlines, and an AI component reasons about developing guaranteed control plans for the real-time component to execute.
Reference: [30] <author> A. Newell and H. Simon, </author> <title> "GPS: A Program that Simulates Human Thought," in Computers and Thought, </title> <editor> E. Feigenbaum and J. Feldman, editors, </editor> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1963. </year>
Reference-contexts: STRIPS, in turn, can be seen as a descendant of both the state-space search paradigm pioneered by Newell and Simon <ref> [30] </ref> in their GPS program, and the use of formal logic and the predicate calculus exemplified by Green in [18].
Reference: [31] <author> E. Panzieri and R. Davoli, </author> <title> "Real Time Systems: A Tutorial," </title> <type> Technical Report UBLCS -93-22, </type> <institution> Laboratory for Computer Science, University of Bologna,Italy, </institution> <year> 1993. </year>
Reference-contexts: In the case of mission-critical systems, where the cost of failure is known to be high, it is imperative that the system be designed not merely to be fast, but so that the designers know that it is fast enough. As one survey article <ref> [31, p. 2] </ref> puts it "The principle responsibility of a real-time (RT) system can be summarized as that of producing correct results while meeting predefined deadlines in doing so.
Reference: [32] <author> D. W. Payton, J. K. Rosenblatt, and D. M. Keirsey, </author> <title> "Plan Guided Reaction," </title> <journal> IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> vol. 20, no. 6, </volume> <pages> pp. 1370-1382, </pages> <year> 1990. </year>
Reference-contexts: Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., [12, 17, 22, 37]). 3. Developing formal models of reactive systems (e.g., [22, 24]). 4. Combining reactive circuitry with other, more established models, especially conventional planners (e.g., <ref> [3, 19, 25, 32, 40] </ref>). Much of the work in reactivity has been motivated by application areas where intelligent behavior in the presence of hard temporal deadlines and constraints is desirable. The timing requirements of such problem domains make the techniques of classical planning difficult, if not impossible, to apply.
Reference: [33] <author> E. D. Sacerdoti, </author> <title> "Planning in a Hierarchy of Abstraction Spaces," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 5, no. 2, </volume> <pages> pp. 115-135, </pages> <year> 1974. </year>
Reference-contexts: Research issues included: using abstraction to control the state-space explosion (e.g., ABSTRIPS <ref> [33] </ref>); detecting, avoiding, and controlling interactions between various plan elements [34, 45]); representing the world, goals and actions (e.g., NOAH [34], SIPE [47], WARPLAN [46]); and the representation of time (e.g., DEVISER [44]).
Reference: [34] <author> E. D. Sacerdoti, </author> <title> "The Nonlinear Nature of Plans," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 206-214, </pages> <year> 1975. </year>
Reference-contexts: Research issues included: using abstraction to control the state-space explosion (e.g., ABSTRIPS [33]); detecting, avoiding, and controlling interactions between various plan elements <ref> [34, 45] </ref>); representing the world, goals and actions (e.g., NOAH [34], SIPE [47], WARPLAN [46]); and the representation of time (e.g., DEVISER [44]). Chapman developed a broad characterization of the STRIPS paradigm in [9], and Erol, Hendler and Nau, have recently extended this to other systems in [13]. <p> Research issues included: using abstraction to control the state-space explosion (e.g., ABSTRIPS [33]); detecting, avoiding, and controlling interactions between various plan elements [34, 45]); representing the world, goals and actions (e.g., NOAH <ref> [34] </ref>, SIPE [47], WARPLAN [46]); and the representation of time (e.g., DEVISER [44]). Chapman developed a broad characterization of the STRIPS paradigm in [9], and Erol, Hendler and Nau, have recently extended this to other systems in [13].
Reference: [35] <author> M. Saksena, J. da Silva, and A. Agrawala, </author> <title> "Design and Implementation of Maruti," </title> <type> Technical Report CS-TR-3181, </type> <institution> University of Maryland Department of Computer Science, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: In order to use DR in mission-critical applications, the performance of the individual monitors must be guaranteed: they must be scheduled so that they will always have the resources necessary to respond in a timely fashion. The Maruti Hard Real-Time Operating System <ref> [26, 35] </ref> provides these capabilities. Maruti is designed to support hard real-time applications on a variety of distributed systems while providing fault tolerant operation. <p> The first proof-of-concept implementation (described in [26]) was used to develop both the Dodger and the Pursuer/Evader systems discussed below. Dodger has since been ported to the new implementation of Maruti (described in <ref> [35] </ref>), and while the mapping between the two versions of Maruti is straightforward, we use the old terminology in this paper. 10 6 Pursuer/Evader In the Pursuer/Evader program, shown in Figure 3, a simulated "pursuer" airplane is responsible for tracking the path of another plane, known as the Evader, and then
Reference: [36] <author> J. C. Sanborn and J. A. Hendler, </author> <title> "A Model of Reaction for Planning in Dynamic Environments," </title> <journal> Int'l Journal for Artificial Intelligence in Engineering, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 95-102, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Others have chosen to abandon strong models of the environment. Several researchers (e.g., <ref> [1, 16, 36] </ref>) have demonstrated that the regularities of the world can be exploited to allow a relatively small set of behaviors to produce desirable global effects. <p> In fact, STRIPS was coupled to an execution system and used to control a mobile robot in the mid-1970's. By the mid-1980's, it was clear that the existing paradigm was inadequate for this task in many respects. To begin with, most planners implicitly make the static world assumption <ref> [36] </ref>, that the only possible changes in the world were the results of actions of the agent. While various mechanisms were developed to handle exceptions to this assumption as they occured, these violations were treated as exactly that: exceptions, rather than the rule. <p> Brooks [5, 8] began a disciplined approach to the design and construction of mobile robots that dogmatically rejected the techniques of classical planning. Sanborn and Hendler <ref> [36] </ref> advocated a system where several cooperating processes, making strictly local computations and working without a strong model of the world, could be combined to produce desirable, dynamic behaviors. <p> Demonstrating the efficacy of reaction in the absence of a deliberative component (e.g. <ref> [1, 16, 36] </ref>). 2. Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., [12, 17, 22, 37]). 3. Developing formal models of reactive systems (e.g., [22, 24]). 4. <p> By combining the two, we have taken an important first step towards the goal of ensuring both temporal and behavioral adequacy in systems which are intended to operate in highly dynamic and potentially threatening environments. 4 Dynamic Reaction The concept of Dynamic Reaction was introduced by Sanborn and Hendler in <ref> [36] </ref>. DR was designed to solve problems in dynamic worlds by separating the need to respond appropriately to frequent and potentially threatening changes in the world from the rest of the planning process. <p> Otherwise, it would either stop or move left, assuming that neither of these actions were inhibited. Action choice was thus controlled merely by constraining the set of possible actions. The reader is referred to <ref> [36] </ref> for additional details, but as this work motivated much of what follows, there are several salient points: * Monitors are responsible for examining changes in the world, and determining whether or not they reflect changes in the state of affairs, which we can think of as the agent's abstraction of
Reference: [37] <author> M. Schoppers, </author> <title> "Universal Plans for Reactive Robots in Unpredictable Environments," </title> <booktitle> in Proc. Int'l Joint Conf. on Artificial Intelligence, </booktitle> <pages> pp. 1039-1046, </pages> <year> 1987. </year>
Reference-contexts: One approach has been to essentially "precompile" traditional deliberative systems, in an effort to calculate the appropriate response to a broad set of environmental conditions ahead of time <ref> [17, 22, 37] </ref>. Such systems are founded upon the deductive correctness of conventional planners, and focus upon extending this paradigm to achieve timeliness. <p> Schoppers <ref> [37] </ref> developed the idea of "universal plans," in which all of the possible relevant world states are anticipated during plan generation, the appropriate response is predetermined, and compiled into what is essentially a decision tree. Kaelbling and Rosenschien [22] developed GAPPS, a formalism for constructing reactive circuits. <p> Demonstrating the efficacy of reaction in the absence of a deliberative component (e.g. [1, 16, 36]). 2. Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., <ref> [12, 17, 22, 37] </ref>). 3. Developing formal models of reactive systems (e.g., [22, 24]). 4. Combining reactive circuitry with other, more established models, especially conventional planners (e.g., [3, 19, 25, 32, 40]).
Reference: [38] <author> K. Schwan, P. Gopinath, and W. Bo, </author> <title> "CHAOS-Kernel Support for Objects in the Real-Time Domain," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. C-36, no. 8, </volume> <pages> pp. 904-916, </pages> <month> August </month> <year> 1987. </year>
Reference: [39] <author> K. G. Shin and P. Ramanathan, </author> <title> "Real-Time Computing: A New Discipline of Computer Science and Engineering," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 82, no. 1, </volume> <pages> pp. 6-24, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Historically, the issue of ensuring timeliness has been the province of real-time systems research. <ref> [39, 42] </ref> Operating systems designed to address the needs of mission-critical applications are known as "hard" real-time operating systems (HRTOS). <p> That is, while these systems may be "fast," and they may be able to react in a strictly bounded amount of time, no evidence is offered that the capabilities in question are, in fact, "fast enough" (see <ref> [39, 42] </ref> for general discussions of real-time systems). In the real-time research community, a system that can be said to meet all of its temporal constraints in the worst case is said to be a "hard" real-time system.
Reference: [40] <author> L. Spector, </author> <title> Supervenience in Dynamic World Planning, </title> <type> PhD thesis, </type> <institution> University of Maryland, College Park, MD, </institution> <month> May </month> <year> 1992. </year> <note> Also available as CS-TR-2899 and UMIACS-TR-92-55. </note>
Reference-contexts: All of these systems rely heavily upon the system developer to create and coordinate the appropriate set of low-level reactions. Spector <ref> [40] </ref> addressed the coordination issue when he designed a system in which a very large number of complex, goal-directed operators ran concurrently, with a formal hierarchy for arbitrating operator conflicts and priority. <p> Pre-processing the constructs of a conventional planning model in an effort to achieve time liness (e.g., [12, 17, 22, 37]). 3. Developing formal models of reactive systems (e.g., [22, 24]). 4. Combining reactive circuitry with other, more established models, especially conventional planners (e.g., <ref> [3, 19, 25, 32, 40] </ref>). Much of the work in reactivity has been motivated by application areas where intelligent behavior in the presence of hard temporal deadlines and constraints is desirable. The timing requirements of such problem domains make the techniques of classical planning difficult, if not impossible, to apply. <p> As we will discuss below, this simple capability can be used as the basis for a hierarchical system of control, such as those advocated by Brooks [5] and Spector <ref> [40] </ref>. In the current implementation, there are times when the Dodger control program projects a collision with a ray that it will not be able to avoid. <p> The Command Monitor is responsible for making sense out of all of these "outside influences," and for deciding whether or not a message telling the controller to change its goal is warranted. In more complex systems, we envision a hierarchical system of controllers, much like that described in <ref> [2, 40] </ref>. At each level of the hierarchy, a separate control system would be responsible for achieving a goal that is provided to it by a higher level, while (if needed) using a set of monitors to ensure that safety conditions are maintained.
Reference: [41] <author> J. A. Stankovic and K. Ramamritham, </author> <title> "The Spring Kernel: A New Paradigm for Real-Time Operating Systems," </title> <journal> SIGOPS, </journal> <volume> vol. 23, no. 3, </volume> , <year> 1989. </year>
Reference-contexts: A number of such operating systems have been developed, including the Spring kernel <ref> [41] </ref>, CHAOS [38],HARTOS [23], MARS [10] and Maruti [26]. In this paper, we describe a series of programs that were designed to address increasingly complex issues of intelligent real-time control, and which take advantage of the systems-level support offered by the Maruti HRTOS.
Reference: [42] <author> J. A. Stankovic, </author> <title> "Misconceptions about Real-Time Computing: A Serious Problem for Next-Generation Systems," </title> <journal> IEEE Computer, </journal> <volume> vol. 21, no. 10, </volume> <pages> pp. 10-19, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Historically, the issue of ensuring timeliness has been the province of real-time systems research. <ref> [39, 42] </ref> Operating systems designed to address the needs of mission-critical applications are known as "hard" real-time operating systems (HRTOS). <p> That is, while these systems may be "fast," and they may be able to react in a strictly bounded amount of time, no evidence is offered that the capabilities in question are, in fact, "fast enough" (see <ref> [39, 42] </ref> for general discussions of real-time systems). In the real-time research community, a system that can be said to meet all of its temporal constraints in the worst case is said to be a "hard" real-time system.
Reference: [43] <editor> A. Tate, J. Hendler, and M. </editor> <title> Drummond, "A Review of AI Planning Techniques," </title> <note> in Readings in Planning, </note> <editor> J. Allen, J. Hendler, and A. Tate, </editor> <booktitle> editors, </booktitle> <pages> pp. 26-49, </pages> <publisher> Morgan Kaufman, </publisher> <year> 1990. </year>
Reference-contexts: Chapman developed a broad characterization of the STRIPS paradigm in [9], and Erol, Hendler and Nau, have recently extended this to other systems in [13]. A more complete treatment of the history of this research tradition can be found in [17] and <ref> [43] </ref>. With few exceptions, this early work in AI planning focused upon the sorts of action-sequencing problems that are known to be solvable by humans, and perhaps only a handful of other organisms.
Reference: [44] <author> S. A. Vere, </author> <title> "Planning in Time: Windows and Durations for Activities and Goals," </title> <journal> IEEE Trans. Pattern Analysis and Machine Intelligence, </journal> <volume> vol. PAMI-5, no. 3, </volume> <pages> pp. 246-267, </pages> <year> 1983. </year>
Reference-contexts: Research issues included: using abstraction to control the state-space explosion (e.g., ABSTRIPS [33]); detecting, avoiding, and controlling interactions between various plan elements [34, 45]); representing the world, goals and actions (e.g., NOAH [34], SIPE [47], WARPLAN [46]); and the representation of time (e.g., DEVISER <ref> [44] </ref>). Chapman developed a broad characterization of the STRIPS paradigm in [9], and Erol, Hendler and Nau, have recently extended this to other systems in [13]. A more complete treatment of the history of this research tradition can be found in [17] and [43].
Reference: [45] <author> R. Waldinger, </author> <title> "Achieving several goals simultaneously," </title> <booktitle> in Machine Intelligence 8, </booktitle> <editor> M. D., </editor> <booktitle> editor, </booktitle> <pages> pp. 94-136, </pages> <publisher> Ellis Horwood, </publisher> <address> Chichester, England, </address> <year> 1977. </year> <month> 23 </month>
Reference-contexts: Research issues included: using abstraction to control the state-space explosion (e.g., ABSTRIPS [33]); detecting, avoiding, and controlling interactions between various plan elements <ref> [34, 45] </ref>); representing the world, goals and actions (e.g., NOAH [34], SIPE [47], WARPLAN [46]); and the representation of time (e.g., DEVISER [44]). Chapman developed a broad characterization of the STRIPS paradigm in [9], and Erol, Hendler and Nau, have recently extended this to other systems in [13].
Reference: [46] <author> D. Warren, "WARPLAN: </author> <title> A System for Generating Plans," </title> <type> Memo 76, </type> <institution> University of Edinburgh School of Artificial Intelligence, Dept. of Computational Logic, </institution> <month> June </month> <year> 1974. </year>
Reference-contexts: Research issues included: using abstraction to control the state-space explosion (e.g., ABSTRIPS [33]); detecting, avoiding, and controlling interactions between various plan elements [34, 45]); representing the world, goals and actions (e.g., NOAH [34], SIPE [47], WARPLAN <ref> [46] </ref>); and the representation of time (e.g., DEVISER [44]). Chapman developed a broad characterization of the STRIPS paradigm in [9], and Erol, Hendler and Nau, have recently extended this to other systems in [13].
Reference: [47] <author> D. Wilkins, </author> <title> "Domain-Independent Planning: Representation and Plan Generation," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 22, no. 3, </volume> <pages> pp. 269-301, </pages> <month> April </month> <year> 1984. </year> <month> 24 </month>
Reference-contexts: Research issues included: using abstraction to control the state-space explosion (e.g., ABSTRIPS [33]); detecting, avoiding, and controlling interactions between various plan elements [34, 45]); representing the world, goals and actions (e.g., NOAH [34], SIPE <ref> [47] </ref>, WARPLAN [46]); and the representation of time (e.g., DEVISER [44]). Chapman developed a broad characterization of the STRIPS paradigm in [9], and Erol, Hendler and Nau, have recently extended this to other systems in [13].
References-found: 47

