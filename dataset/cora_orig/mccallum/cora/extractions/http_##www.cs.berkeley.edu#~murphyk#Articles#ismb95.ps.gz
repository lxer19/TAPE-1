URL: http://www.cs.berkeley.edu/~murphyk/Articles/ismb95.ps.gz
Refering-URL: http://www.cs.berkeley.edu/~murphyk/publ.html
Root-URL: 
Email: dsearls@cbil.humgen.upenn.edu,  
Phone: (215)573-3107, FAX -3111  
Title: Automata-Theoretic Models of Mutation and Alignment  
Author: David B. Searls and Kevin P. Murphy 
Note: Submitted to ISMB-95  
Address: Genetics, Rm. 475CRB  Boulevard, Philadelphia, PA 19104-6145 USA  
Affiliation: Department of  University of Pennsylvania School of Medicine 422 Curie  
Abstract: Finite-state automata called transducers, which have both input and output, can be used to model simple mechanisms of biological mutation. We present a methodology whereby numerically-weighted versions of such specifications can be mechanically adapted to create string edit machines that are essentially equivalent to recurrence relations of the sort that characterize dynamic programming alignment algorithms. Based on this, we have developed a visual pro gramming system for designing new alignment algorithms in a rapid-prototyping fashion.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho and J. D. Ullman. </author> <title> The Theory of Parsing, Translation, and Compiling. </title> <booktitle> Volume 1: Parsing. </booktitle> <address> Printice-Hall, Englewood Cliffs, NJ, </address> <year> 1972. </year>
Reference-contexts: the formal methodology described above, several novel alignment algorithms will be presented in this paper based on such finite-state automata. fl Current address: Department of Computer Science, University of California at Davis, murphyk@cs.ucdavis.edu - 1 - 2 Models The basic theoretical construct with which we will deal is the following <ref> [1] </ref>: Definition 2.1 (Finite Transducer) A finite transducer is a 6-tuple T = hQ; ; ; ffi; s; F i where Q is a finite nonempty set of states, and are finite nonempty input and ouput alphabets, respectively, s 2 Q is a distinguished start state, F Q is a set
Reference: [2] <author> L. Allison, C.S. Wallace, and C.N. Yee. </author> <title> Finite-state models in the alignment of macromolecules. </title> <journal> J. Mol. Evol., </journal> <volume> 35(1) </volume> <pages> 77-89, </pages> <year> 1992. </year> <title> 2 The derivation of the novel and elegant recurrence associated with this model is left as an easy exercise, given the methodology presented in the previous section. </title> - <type> 11 </type> - 
Reference-contexts: A wide variety of such automata have been intensively studied, including weighted automata which have numbers associated with transitions between states, and transducers which have both input and output. Allison and co-workers <ref> [2] </ref> have proposed the use of finite-state models for mutation, and furthermore shown how some simple versions of such models (corresponding to constant and piecewise linear gap penalties) can be related to dynamic programming alignment algorithms.
Reference: [3] <author> T.H. Cormen, C.E. Leiserson, and R.L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press/McGraw-Hill, </publisher> <address> Cambridge, MA, </address> <year> 1989. </year>
Reference-contexts: Because Prolog still provides top-down control for the algorithms thus generated, they are properly classified as a form of dynamic programming termed memoization <ref> [3] </ref>. We have investigated whether greater speedups could be obtained by generating true bottom-up, iterative code at the back end of the system.
Reference: [4] <author> O. Gotoh. </author> <title> An improved algorithm for matching biological sequences. </title> <journal> J. Mol. Biol., </journal> <volume> 162 </volume> <pages> 705-708, </pages> <year> 1982. </year>
Reference-contexts: These, in fact, are exactly the recurrences for affine gaps derived by Gotoh algebraically (and rather less concisely) <ref> [4] </ref>. To review and recapitulate this methodology, we consider yet another model of indels that takes potential reading frames into account.
Reference: [5] <author> R.M. Karp and M. </author> <title> Held. Finite-state processes and dynamic programming. </title> <journal> SIAM J. Appl. Math., </journal> <volume> 13(3) </volume> <pages> 693-718, </pages> <year> 1967. </year>
Reference-contexts: Allison and co-workers [2] have proposed the use of finite-state models for mutation, and furthermore shown how some simple versions of such models (corresponding to constant and piecewise linear gap penalties) can be related to dynamic programming alignment algorithms. This builds upon early work by Karp and Held <ref> [5] </ref> establishing the relationship between weighted finite-state automata and generalized dynamic programming. We have been working to extend this notion in a biological context and to rigorously capture the relationships between simple mutational models, edit distance, and alignment.
Reference: [6] <author> A. Krogh, M. Brown, I.S. Mian, K. Sjolander, and D. Haussler. </author> <title> Hidden Markov models in computational biology: Applications to protein modeling. </title> <journal> J. Mol. Biol., </journal> <volume> 235(5) </volume> <pages> 1501-1531, </pages> <year> 1994. </year>
Reference-contexts: We find that not only can these transitions be neatly formalized, but that the resulting methodologies can be used to create tools to assist in the design of new algorithms. Haussler and colleagues <ref> [6] </ref> have also made imaginative use of simple mutational models and finite-state automata, as embodied in hidden Markov models (HMMs) that they use to learn profile descriptors of multiply-aligned protein families.
Reference: [7] <author> W. Miller and E.W. Myers. </author> <title> Sequence comparison with concave weighting functions. </title> <journal> Bull. Math. Biol., </journal> <volume> 50 </volume> <pages> 97-120, </pages> <year> 1988. </year>
Reference-contexts: Of course, this comes at the cost of adding new matrices, and because there are finite states it is not possible to model forms such as concave gap functions <ref> [7] </ref> without additional features, e.g. a pushdown automaton would be required to model inversions. However, we can use this framework to incorporate certain "meta" models of alignment in a very intuitive manner.
Reference: [8] <author> Y. Nakamura, M. Leppert, P. O'Connell, R. Wolff, T. Holm, M. Culver, C. Martin, E. Fujimoto, M. Hoff, E. Kumlin, and R. White. </author> <title> Variable number of tandem repeat (VNTR) markers for human gene mapping. </title> <journal> Science, </journal> <volume> 235 </volume> <pages> 1616-1622, </pages> <year> 1987. </year>
Reference-contexts: The editor in Figure 7b is based on the observation that regions of the genome with multiple short tandem repeats are observed to exhibit great variability in the number of those repeats <ref> [8] </ref>. In comparing these highly polymorphic segments, an alignment algorithm would be more effective if it penalized gaps within such VNTRs much less than it did gaps in other sequence, since such gaps are known to arise more frequently than elsewhere.
Reference: [9] <author> S.B. Needleman and C.D. Wunsch. </author> <title> A general method applicable to the search for similarities in the amino acid sequence of two proteins. </title> <journal> J. Mol. Biol., </journal> <volume> 48 </volume> <pages> 443-453, </pages> <year> 1970. </year>
Reference-contexts: Boundary conditions are established by requiring the automaton to arrive in a final state with empty input and completed output. Note that this is also, in essence, the basis of the Needleman-Wunsch-Sellers dynamic programming algorithm <ref> [9, 10] </ref>, as can be seen more clearly by way of an exactly analogous definition for a matrix interpretation of distance: Definition 2.7 (Matrix Edit Distance) Given a weighted editor E and a pair of strings x; y 2 fl , for each state q i 2 Q construct a matrix
Reference: [10] <author> P. H. Sellers. </author> <title> On the theory and computation of evolutionary distances. </title> <journal> SIAM J. Appl. Math., </journal> <volume> 26(4) </volume> <pages> 787-793, </pages> <year> 1974. </year>
Reference-contexts: Boundary conditions are established by requiring the automaton to arrive in a final state with empty input and completed output. Note that this is also, in essence, the basis of the Needleman-Wunsch-Sellers dynamic programming algorithm <ref> [9, 10] </ref>, as can be seen more clearly by way of an exactly analogous definition for a matrix interpretation of distance: Definition 2.7 (Matrix Edit Distance) Given a weighted editor E and a pair of strings x; y 2 fl , for each state q i 2 Q construct a matrix
Reference: [11] <author> T.F. Smith and M.S. Waterman. </author> <title> Identification of common molecular sequences. </title> <journal> J. Mol. Biol., </journal> <volume> 147 </volume> <pages> 195-197, </pages> <year> 1981. </year>
Reference-contexts: These are the same equations derived by Smith and Waterman <ref> [11] </ref>. Other uses of meta-alignment scanning nodes include best-fit alignments that specify containment or overlap as required by fragment assembly algorithms.
Reference: [12] <author> T.F. Smith, M.S. Waterman, and W.M. Fitch. </author> <title> Comparative biosequence metrics. </title> <journal> J. Mol. Evol., </journal> <volume> 18 </volume> <pages> 38-46, </pages> <year> 1981. </year>
Reference-contexts: For example, practical alignment algorithms used for purposes of detecting sequence similarities differ from those shown above in several respects. First, they are constructed so as to maximize similarity rather than minimize distance (see <ref> [12] </ref> for a discussion), and this is easily accomplished by reconsidering the weights on arcs and by substituting max functions in Definition 2.7. More importantly, the best-fitting substrings of the inputs are desired, for a so-called local alignment.
References-found: 12

