URL: http://www.ai.mit.edu/projects/transit/transit-notes/tn113.ps.Z
Refering-URL: http://www.ai.mit.edu/projects/transit/reconfigurable_computing.html
Root-URL: 
Title: Transit Note #113 Specialization versus Configuration  
Author: Andre DeHon 
Date: January, 1995 Last Updated: March 15, 1996  
Note: Original Issue:  
Abstract: Exploiting the full potential of reconfigurable computing devices requires a different design style than that normally employed for fixed computing devices. To achieve adequate flexibility, fixed computing devices such as ASICs or microprocessors, can be configured to adapt their behavior to match the needs of a particular application. While this configurability costs performance and area, it is generally necessary so that a single design can achieve wide-spread applicability. With reconfigurable computing devices, however, the fact that the whole device can be configured on a per application and per use basis means that reconfigurable designs can be specialized to the behavior required rather than configured. The reconfigurable architect, therefore, needs to more carefully consider the binding time for various parameters in the logic design and exploit the fact that many parameters are known prior to an operational epoch and will remain constant throughout use.
Abstract-found: 1
Intro-found: 1
Reference: [Act90] <institution> Actel Corporation, </institution> <address> 955 East Arques Avenue, Sunnyvale, CA 94086. ACT 2 Field Programmable Gate Array, </address> <year> 1990. </year>
Reference-contexts: For brevity, we primarily report the results of synthesizing to the Xilinx 4000 [Xil93] family of FPGAs. For most of the cases reported here, we also synthesized to the Altera Flex 8000 [Alt93] family and Actel Act2 <ref> [Act90] </ref> family to convince ourselves that the results were not artifacts of the Xilinx architecture. Comparable results were achieved across all architectures targeted. 3 Transit Note #113 March 15, 1996 2.2 Logic Subcircuits Table 1 summarizes specialization results for a number of logic circuits.
Reference: [Alt93] <institution> Altera Corporation, </institution> <address> 2619 Orchard Parkway, San Jose, CA 95314-2020. </address> <publisher> Data Book, </publisher> <month> August </month> <year> 1993. </year>
Reference-contexts: For brevity, we primarily report the results of synthesizing to the Xilinx 4000 [Xil93] family of FPGAs. For most of the cases reported here, we also synthesized to the Altera Flex 8000 <ref> [Alt93] </ref> family and Actel Act2 [Act90] family to convince ourselves that the results were not artifacts of the Xilinx architecture. Comparable results were achieved across all architectures targeted. 3 Transit Note #113 March 15, 1996 2.2 Logic Subcircuits Table 1 summarizes specialization results for a number of logic circuits.
Reference: [BDK93] <author> Michael Bolotski, Andre DeHon, and Thomas F. Knight Jr. </author> <title> Unifying FPGAs and SIMD Arrays. </title> <type> Transit Note 95, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> September </month> <year> 1993. </year> <note> Anonymous FTP transit.ai.mit.edu: transit-notes/tn95.ps.Z. </note>
Reference-contexts: of acquiring a new specialization can vary widely: * New specializations may take 10's of minutes to compute, requiring processing by synthesis, placement, and routing tools. * Reloading conventional FPGAs takes 10's of milliseconds once an available con figuration exists. * Swapping to a loaded configuration on a DPGA design <ref> [BDK93] </ref> [DeH94] can occur in 10's of nanoseconds. In cases where the number of desired specializations is small, it will be beneficial to precompute the specialized logic and store it on disk or Flash ROM so that it can be loaded quickly as needed.
Reference: [Cha93] <author> Kenneth David Chapman. </author> <title> Fast Integer Multipliers fit in FPGAs. EDN, </title> <address> 39(10):80, </address> <month> May 12 </month> <year> 1993. </year> <note> See ftp://www.ednmag.com/EDN/DI1223Z.ZIP. </note>
Reference-contexts: Here we highlight three to fill out the picture. Multiplier Specialization EDN's 1993 Design Idea winner was a specialized multiplier <ref> [Cha93] </ref>. The 8 fi 8 multiplication was effectively performed by looking up the 12-bit result of each 4-bit fi 8-bit partial product in a 16 fi 12 lookup table preloaded with all 16 possible 12-bit product results obtainable by multiplying a 4-bit value by an 8-bit constant.
Reference: [DCB + 93] <author> Andre DeHon, Frederic Chong, Matthew Becker, Eran Egozy, Henry Min-sky, Samuel Peretz, and Thomas F. Knight, Jr. metro: </author> <title> A Router Architecture for High-Performance, Short-Haul Routing Networks. </title> <type> Transit Note 96, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> September </month> <year> 1993. </year> <note> Anonymous FTP transit.ai.mit.edu:transit-notes/tn96.ps.Z. </note>
Reference-contexts: Consequently, the reconfigurable architect needs to pay careful attention to the binding time of values in the applications he designs. Values bound early and changing infrequently present opportunities to benefit from specialized designs. 13 Transit Note #113 March 15, 1996 7 See Also: : : * metro <ref> [DCB + 93] </ref> * mlink [DeH92] [DeH93a]
Reference: [DCB + 94] <author> Andre DeHon, Frederic Chong, Matthew Becker, Eran Egozy, Henry Min-sky, Samuel Peretz, and Thomas F. Knight, Jr. metro: </author> <title> A Router Architecture for High-Performance, Short-Haul Routing Networks. </title> <booktitle> In Proceedings of the International Symposium on Computer Architecture, </booktitle> <pages> pages 266-277, </pages> <month> May </month> <year> 1994. </year> <note> Anonymous FTP transit.ai.mit.edu: papers/metro-isca94.ps.Z. </note>
Reference-contexts: The specialization only succeeds in removing the xor stage and very little of the encoding logic. 2.3 Finite State Machine Examples Table 2 summarizes several finite-state machine designs which can be specialized around various configurations. * metro forward metro is a self-routing, dilated, pipelined, crossbar routing component <ref> [DCB + 94] </ref>. This FSM interprets signaling on the incoming link and arbitrates for output connections through the crossbar. * mlink node i/o - mlink is an interface between a host node and a metro network [DeH93b].
Reference: [DeH92] <author> Andre DeHon. </author> <title> metro link metro Network Interface. </title> <type> Transit Note 75, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> September </month> <year> 1992. </year> <note> Anonymous FTP transit.ai.mit.edu:transit-notes/tn75.ps.Z. </note>
Reference-contexts: Values bound early and changing infrequently present opportunities to benefit from specialized designs. 13 Transit Note #113 March 15, 1996 7 See Also: : : * metro [DCB + 93] * mlink <ref> [DeH92] </ref> [DeH93a]
Reference: [DeH93a] <author> Andre DeHon. </author> <title> metro link Programmer's Quick Reference. </title> <type> Transit Note 81, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> March </month> <year> 1993. </year> <note> Anonymous FTP transit.ai.mit.edu:transit-notes/tn81.ps.Z. 14 Transit Note #113 March 15, </note> <year> 1996 </year>
Reference-contexts: Values bound early and changing infrequently present opportunities to benefit from specialized designs. 13 Transit Note #113 March 15, 1996 7 See Also: : : * metro [DCB + 93] * mlink [DeH92] <ref> [DeH93a] </ref>
Reference: [DeH93b] <author> Andre DeHon. </author> <title> Robust, High-Speed Network Design for Large-Scale Multiprocessing. </title> <type> AI Technical Report 1445, </type> <institution> MIT Artificial Intelligence Laboratory, 545 Technology Sq., </institution> <address> Cambridge, MA 02139, </address> <month> February </month> <year> 1993. </year> <note> Anonymous FTP publications.ai.mit.edu:ai-publications/1993/ AITR-1445.ps.Z. </note>
Reference-contexts: This FSM interprets signaling on the incoming link and arbitrates for output connections through the crossbar. * mlink node i/o - mlink is an interface between a host node and a metro network <ref> [DeH93b] </ref>.
Reference: [DeH94] <author> Andre DeHon. </author> <title> DPGA-Coupled Microprocessors: </title> <booktitle> Commodity ICs for the Early 21st Century. In Proceedings of the IEEE Workshop on FPGAs for Custom Computing Machines, </booktitle> <year> 1994. </year> <note> Anonymous FTP transit.ai.mit. edu:papers/dpga-proc-fccm94.ps.Z. </note>
Reference-contexts: acquiring a new specialization can vary widely: * New specializations may take 10's of minutes to compute, requiring processing by synthesis, placement, and routing tools. * Reloading conventional FPGAs takes 10's of milliseconds once an available con figuration exists. * Swapping to a loaded configuration on a DPGA design [BDK93] <ref> [DeH94] </ref> can occur in 10's of nanoseconds. In cases where the number of desired specializations is small, it will be beneficial to precompute the specialized logic and store it on disk or Flash ROM so that it can be loaded quickly as needed.
Reference: [Int89] <institution> Intel Corporation, </institution> <address> 3065 Bowers Avenue, Santa Clara, CA 95051. Micro-communications Handbook, </address> <year> 1989. </year>
Reference-contexts: i/o operation handles autonomous block data transfer between the node's memory and the mlink component. * mlink central The central state machine is the master controller responsible for mlink operation including link signaling, packet formation, and status and error handling. * I8251 processor i/o Intel's 8251 is a programmable USART <ref> [Int89] </ref>.
Reference: [Min93] <author> Les Mintzer. </author> <title> FIR Filters with Field-Programmable Gate Arrays. </title> <journal> Journal of VLSI Signal Processing, </journal> <volume> 6 </volume> <pages> 119-127, </pages> <year> 1993. </year>
Reference-contexts: Modulus Specialization In their implementation of modular multiplication on PAM [SBV91], the multiplier operation is specialized around the multiplication modulus. FIR Filter Mitzner introduces an FIR Filter architecture for FPGAs <ref> [Min93] </ref> designed to specialize the tap filter coefficients into the array product generation. The filter inputs are presented in bit serial fashion to a lookup table such that the lookup table sees the n-th input bit from each of the k inputs on the n-th cycle of operation.
Reference: [Nat77] <institution> National Bureau of Standards, </institution> <address> Washington, DC. </address> <booktitle> Data Encryption Standard, </booktitle> <month> January </month> <year> 1977. </year> <note> FIPS PUB 46. </note>
Reference-contexts: Using the fast carry support, an n-bit adder can be implemented in d n+1 2 e CLBs [Xil93]. DES F Function The F function which forms the kernel of the DES <ref> [Nat77] </ref> algorithm takes a 32-bit data input and a 48-bit key input to generate a 32-bit output. The F function includes an expansion of the input, an xor with the key, lookup through 8 S-boxes and a permutation of the output bits.
Reference: [SBV91] <author> Mark Shand, Patrice Bertin, and Jean Vuillemin. </author> <title> Hardware Speedups in Long Integer Multiplication. </title> <journal> Computer Architecture News, </journal> <volume> 19(1) </volume> <pages> 106-114, </pages> <year> 1991. </year>
Reference-contexts: The design is thus specialized to multiply by a constant. Since the multiplier is trivially a lookup table, Chapman also details circuitry to recalculate and reload the lookup table in case the specialized operand needs to change. Modulus Specialization In their implementation of modular multiplication on PAM <ref> [SBV91] </ref>, the multiplier operation is specialized around the multiplication modulus. FIR Filter Mitzner introduces an FIR Filter architecture for FPGAs [Min93] designed to specialize the tap filter coefficients into the array product generation.
Reference: [Syn92] <author> Synopsys. </author> <title> Design Compiler Reference Manual. </title> <institution> Synopsys, Inc., </institution> <note> version 3.0 edition, </note> <month> December </month> <year> 1992. </year>
Reference-contexts: We break the experiment into three pieces: simple logic subcircuits, finite-state machines, and composite designs. 2.1 Basic Framework For all these experiments, we started with the generic function described in an RTL-level hardware-description language. Designs were synthesized down to FPGA logic netlists using the Synopsys Design Compiler <ref> [Syn92] </ref> with FPGA vendor design libraries. Where applicable the designs were synthesized separately to minimize area and to minimize latency. In many cases where this did not generate distinct and interesting mapped logic points, only a single mapped point is reported.
Reference: [Tho68] <author> Ken Thompson. </author> <title> Regular Expression Search Algorithm. </title> <journal> Communications of the ACM, </journal> <volume> 11(6) </volume> <pages> 419-422, </pages> <month> June </month> <year> 1968. </year>
Reference-contexts: Regular expression searches, for example, have often tended to compile matching code at run-time to generate highly efficient search code tailored to the target expression <ref> [Tho68] </ref>. In a similar manner, a hardware pattern matcher can be specialized at run-time to the pattern of interest, yielding a leaner and faster hardware matching implementation.
Reference: [Xil93] <author> Xilinx, Inc., </author> <title> 2100 Logic Drive, </title> <address> San Jose, CA 95124. </address> <note> The Programmable Logic Data Book, 1993. 15 Transit Note #113 March 15, </note> <year> 1996 </year>
Reference-contexts: Where feasible, the space of possible constants was tested. In other cases, constants were judiciously chosen in an attempt to elicit the worst-case size and speed results and to characterize the space of specializations. For brevity, we primarily report the results of synthesizing to the Xilinx 4000 <ref> [Xil93] </ref> family of FPGAs. For most of the cases reported here, we also synthesized to the Altera Flex 8000 [Alt93] family and Actel Act2 [Act90] family to convince ourselves that the results were not artifacts of the Xilinx architecture. <p> Using the fast carry support, an n-bit adder can be implemented in d n+1 2 e CLBs <ref> [Xil93] </ref>. DES F Function The F function which forms the kernel of the DES [Nat77] algorithm takes a 32-bit data input and a 48-bit key input to generate a 32-bit output.
References-found: 17

