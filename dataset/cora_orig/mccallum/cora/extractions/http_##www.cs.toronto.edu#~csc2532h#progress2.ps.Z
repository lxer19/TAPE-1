URL: http://www.cs.toronto.edu/~csc2532h/progress2.ps.Z
Refering-URL: http://www.cs.toronto.edu/~csc2532h/
Root-URL: http://www.cs.toronto.edu
Email: email: ffl, reiterg@ai.toronto.edu  
Title: How to Progress a Database II: The STRIPS Connection  
Author: Fangzhen Lin and Ray Reiter 
Address: Toronto, Canada M5S 1A4  
Affiliation: Department of Computer Science University of Toronto  
Abstract: Ever since STRIPS was first introduced (Fikes and Nilsson [ 3 ] ), its logical semantics has been problematic. There have been many proposals in the literature (e.g. Lifschitz [ 4 ] , Erol, Nau and Subrahmanian [ 2 ] , Bacchus and Yang [ 1 ] ). These all have in common a reliance on meta-theoretic operations on logical theories to capture the add and delete lists of STRIPS operators, but it has never been clear exactly what these operations correspond to declaratively, especially when they are applied to logically incomplete theories. In this paper we provide a semantics for STRIPS-like systems in terms of a purely declarative situation calculus axiomatization for actions and their effects. On our view, STRIPS is a mechanism for computing the progression (Lin and Reiter [ 6 ] , Pednault [ 8 ] ) of an initial situation calculus database under the effects of an action. We illustrate this idea by describing two different STRIPS mechanisms, and proving their correctness with respect to their situation calculus specifications. 
Abstract-found: 1
Intro-found: 1
Reference: [ 1 ] <author> F. Bacchus and Q. Yang. </author> <title> Downward refinement and the efficiency of hierarchical problem solving. </title> <journal> Artificial Intelligence, </journal> <note> 1995. To appear. </note>
Reference: [ 2 ] <author> K. Erol, </author> <title> D.S. Nau, and V.S. Subrahmanian. On the complexity of domain-independent planning. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 381-386, </pages> <address> San Jose, CA, </address> <year> 1992. </year> <journal> American Association for Artificial Intelligence. </journal>
Reference: [ 3 ] <author> R.E. Fikes and N.J. Nilsson. </author> <title> STRIPS: a new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> 2(3/4):189-208, 1971. 
Reference-contexts: With these definitions in hand, we can show (Lin and Reiter [ 5 ] : the full version of this paper) that, with respect to a suitable action theory, the main example STRIPS system considered in (Fikes and Nilsson <ref> [ 3 ] </ref> ) is both sound, and adequate for the class of goals considered there. This is of interest because it shows that our semantics is sophisticated enough to handle the concepts of non-literal and/or non-essential formulas considered in Lifschitz's [ 4 ] analysis of this same example.
Reference: [ 4 ] <author> V. Lifschitz. </author> <title> On the semantics of STRIPS. </title> <booktitle> In Reasoning about Actions and Plans: Proceedings of the 1986 Workshop, </booktitle> <pages> pages 1-9. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> 1986. June 30-July 2, Timberline, Ore-gon. </address>
Reference-contexts: Our intuition about the semantics of STRIPS operators is that they are mechanisms for progressing situation calculus databases. This is the central idea of this paper, which is devoted to making this intuition precise. 2 STRIPS Following Lifschitz ( <ref> [ 4 ] </ref> ), define an operator description to be a triple (P; D; A), where P is a sentence of a first order language L STRIP S and D (the delete list) and A (the add list) are sets of sentences of L STRIP S . <p> ADL, Pednault's generalization of STRIPS, is just such a mapping between structures. For us, as for Lifschitz <ref> [ 4 ] </ref> , STRIPS is a mapping from first order theories to (possibly second order) theories, where this mapping is effected by add and delete lists of sentences applied to the theory. <p> This is of interest because it shows that our semantics is sophisticated enough to handle the concepts of non-literal and/or non-essential formulas considered in Lifschitz's <ref> [ 4 ] </ref> analysis of this same example. Acknowledgements: Thanks to the other members of the University of Toronto Cognitive Robotics Group (Yves Lesperance, Hector Levesque, Richard Mann, Daniel Marcu and Richard Scherl) for their comments and suggestions.
Reference: [ 5 ] <author> F. Lin and R. Reiter. </author> <title> How to progress a database II: The STRIPS connection. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1993. </year>
Reference-contexts: This can indeed be done, and an appropriate semantics defined in terms of a situation calculus axiomatization that relaxes the context free restriction on successor state axioms of Section 3.2 (Lin and Reiter <ref> [ 5 ] </ref> : the full version of this paper). 5. We have considered only STRIPS systems that compute the full result of progression. Sometimes, for instance for computational purposes, it may be bet-ter to compute only that part of the progression that is relevant to the goals of interest. <p> With these definitions in hand, we can show (Lin and Reiter <ref> [ 5 ] </ref> : the full version of this paper) that, with respect to a suitable action theory, the main example STRIPS system considered in (Fikes and Nilsson [ 3 ] ) is both sound, and adequate for the class of goals considered there.
Reference: [ 6 ] <author> F. Lin and R. Reiter. </author> <title> How to progress a database (and why) I. Logical foundations. </title> <editor> In Jon Doyle, Erik Sandewall, and Pietro Torasso, editors, </editor> <booktitle> Proc. KR'94, Fourth Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 425-436, </pages> <year> 1994. </year>
Reference-contexts: Reiter [ 13 ] and Lin and Reiter [ 7 ] ) D = [ D ss [ D ap [ D una [ D S 0 ; where * is the set of foundational axioms for the situation calculus (Lin and Reiter <ref> [ 6 ] </ref> ). <p> (x; y; s) ^ a 6= movetotable (x; y) ^ :(9z)a = move (x; y; z)]; P oss (a; s) oe [ontable (x; do (a; s)) j (9y)a = movetotable (x; y) _ ontable (x; s) ^ :(9y)a = movef romtable (x; y)]: The central concept of (Lin and Reiter <ref> [ 6 ] </ref> ) is this: Imagine performing an action ff in an initial database D S 0 . Let S ff denote the resulting situation do (ff; S 0 ). <p> Notice that the new database is defined only up to logical equivalence. The new database is allowed to contain second-order sentences because, as shown in (Lin and Reiter <ref> [ 6 ] </ref> ), progression is not always first order definable, but D S ff can always be captured by a set of second order sentences. However, Lin and Reiter specify some important special cases, which we shall exploit in this paper, for which progression is first order definable. <p> If we 3 Notice that this is a slightly more restricted definition for context free successor state axioms than that of (Lin and Reiter <ref> [ 6 ] </ref> ). <p> This turns out to be easy, since the necessary work has already been done (Lin and Reiter <ref> [ 6 ] </ref> , Section 6). Let S be the following set of sentences: 1. Initialize S to f' 2 D S 0 j ' is state independentg. 2. <p> The resulting set S enjoys the property that S [ D una is a progression of D S 0 under action ff (Lin and Reiter <ref> [ 6 ] </ref> , Theorem 4). 5 Moreover, the state dependent sentences of S are all ground literals, and the results of Lin and Reiter [ 6 ] guarantee that S contains no pair of complementary literals. <p> The resulting set S enjoys the property that S [ D una is a progression of D S 0 under action ff (Lin and Reiter <ref> [ 6 ] </ref> , Theorem 4). 5 Moreover, the state dependent sentences of S are all ground literals, and the results of Lin and Reiter [ 6 ] guarantee that S contains no pair of complementary literals. It follows that S can serve as a new initial database for the purposes of iterating the above progression mechanism. Now we interpret the above construction of the set S as a STRIPS operator. <p> Example 3.2 Continuing with our blocks world example, we can "read off" the OCF-STRIPS operator schema for move from the instances of the successor state axioms given in Example 3.1: 5 The consistency condition (3) was inadvertently omitted from the assumptions underlying Theorem 4 of Lin and Reiter <ref> [ 6 ] </ref> . 6 See Section 2 for the relevant definitions. 7 We take it as self evident what is meant formally by the language obtained by suppressing objects of sort state from the language L 2 . move (X; Y; Z) 8 P: clear (X) ^ clear (Z) ^ <p> These are the only state dependent sentences of D S 0 . (Initial databases of this form are special cases of the relatively complete databases defined in (Lin and Reiter <ref> [ 6 ] </ref> ).) The case n = 0 is permitted, in which case this axiom is F (~x; S 0 ) j f alse. <p> To do so, we appeal to the results in (Lin and Reiter <ref> [ 6 ] </ref> , Section 5). Consider the context free successor state axiom (2) for fluent F which we rel-ativized to the initial state S 0 . <p> For each fluent F do: Add the sentence (8) to S. The resulting set S enjoys the property that S [ D una is a progression of D S 0 under action ff (Lin and Reiter <ref> [ 6 ] </ref> , Theorem 3). Moreover, S has the same syntactic form as D S 0 , and so can serve as a new initial database for the purposes of iterating the above progression mechanism. Now we interpret the above construction of the set S as a STRIPS operator.
Reference: [ 7 ] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <journal> J. of Logic and Computation, special issue on actions and processes, </journal> <volume> 4 </volume> <pages> 655-678, </pages> <year> 1994. </year>
Reference-contexts: We denote by L 2 the second-order extension of L. Our foundational axioms for the situa fl Fellow of the Canadian Institute for Advanced Research tion calculus will be in L 2 (Lin and Reiter <ref> [ 7 ] </ref> ), because we need induction on situations (Reiter [ 12 ] ). Often, we must restrict the situation calculus to a particular situation. <p> Our situation calculus theory of actions, D, will have the form (cf. Reiter [ 13 ] and Lin and Reiter <ref> [ 7 ] </ref> ) D = [ D ss [ D ap [ D una [ D S 0 ; where * is the set of foundational axioms for the situation calculus (Lin and Reiter [ 6 ] ).
Reference: [ 8 ] <author> E.P.D. Pednault. </author> <title> Toward a Mathematical Theory of Plan Synthesis. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering, Stanford University, </institution> <year> 1986. </year>
Reference-contexts: D: on (X; Y ). A: clear (X); clear (Y ); ontable (X). 4 Pednault's ADL The only prior literature similar to our progression semantics for STRIPS-like systems is by Pednault ( [ 9 ] , <ref> [ 8 ] </ref> ). Like us, Pednault relates a STRIPS database to the initial state of a situation calculus axiomatization.
Reference: [ 9 ] <author> E.P.D. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <editor> In R.J. Brachman, H. Levesque, and R. Re-iter, editors, </editor> <booktitle> Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (KR'89), </booktitle> <pages> pages 324-332. </pages> <publisher> Mor-gan Kaufmann Publishers, Inc., </publisher> <year> 1989. </year>
Reference-contexts: The consistency condition (3) deserves a brief expla-nation. Following Pednault <ref> [ 9 ] </ref> and Schubert [ 14 ] , Reiter [ 11 ] provides a solution to the frame problem in the absence of state constraints which syntactically transforms a pair of effect axioms for a given fluent F into a successor state axiom for F . <p> D: on (X; Y ). A: clear (X); clear (Y ); ontable (X). 4 Pednault's ADL The only prior literature similar to our progression semantics for STRIPS-like systems is by Pednault ( <ref> [ 9 ] </ref> , [ 8 ] ). Like us, Pednault relates a STRIPS database to the initial state of a situation calculus axiomatization.
Reference: [ 10 ] <author> R. Reiter. </author> <title> Towards a logical reconstruction of relational database theory. In M.L. </title> <editor> Brodie, J. My-lopoulos, and J.W. Schmidt, editors, </editor> <booktitle> On Conceptual Modelling: Perspectives from Artificial Intelligence, Databases and Programming Languages, </booktitle> <pages> pages 191-233. </pages> <publisher> Springer, </publisher> <address> New York, </address> <year> 1984. </year>
Reference-contexts: This, we claim, is what some versions of STRIPS do (but suppressing the state argument). This is also what relational databases do; in fact, the unique names assumption together with the condition (5) on D S 0 are the defining properties for a relational database (Reiter <ref> [ 10 ] </ref> ).
Reference: [ 11 ] <author> R. Reiter. </author> <title> The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Vladimir Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: Successor state axioms embody a solution to the frame problem, as de scribed in Reiter <ref> [ 11 ] </ref> . * D ap is a set of action precondition axioms, one for each action A (~x), of the form: P oss (A (~x); s) j A (~x; s); where A (~x; s) is in L s . * D una is the set of unique names axioms <p> Each successor state axiom of D ss is context free. 6. We are progressing with respect to ff, a ground ac tion term, and ff is possible initially: D j= P oss (ff; S 0 ): 7. For each fluent F , the following consistency condi tion (Reiter <ref> [ 11 ] </ref> ) is satisfied: D ap [ D una j= :(9~x; a; s):P oss (a; s) ^ F (~x; a; s) ^ fl (3) where F 's successor state axiom has the form P oss (a; s) oe [F (~x; do (a; s)) j F (~x; a; s) _ <p> The consistency condition (3) deserves a brief expla-nation. Following Pednault [ 9 ] and Schubert [ 14 ] , Reiter <ref> [ 11 ] </ref> provides a solution to the frame problem in the absence of state constraints which syntactically transforms a pair of effect axioms for a given fluent F into a successor state axiom for F .
Reference: [ 12 ] <author> R. Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 64 </volume> <pages> 337-351, </pages> <year> 1993. </year>
Reference-contexts: We denote by L 2 the second-order extension of L. Our foundational axioms for the situa fl Fellow of the Canadian Institute for Advanced Research tion calculus will be in L 2 (Lin and Reiter [ 7 ] ), because we need induction on situations (Reiter <ref> [ 12 ] </ref> ). Often, we must restrict the situation calculus to a particular situation. For instance, the initial database is a finite set of sentences in L that do not mention any state terms except S 0 , and do not mention P oss and &lt;.
Reference: [ 13 ] <author> R. Reiter. </author> <title> On specifying database updates. </title> <journal> Journal of Logic Programming, </journal> <note> to appear. </note>
Reference-contexts: Our situation calculus theory of actions, D, will have the form (cf. Reiter <ref> [ 13 ] </ref> and Lin and Reiter [ 7 ] ) D = [ D ss [ D ap [ D una [ D S 0 ; where * is the set of foundational axioms for the situation calculus (Lin and Reiter [ 6 ] ).
Reference: [ 14 ] <author> L.K. Schubert. </author> <title> Monotonic solution of the frame problem in the situation calculus: an efficient method for worlds with fully specified actions. In H.E. </title> <editor> Kyberg, R.P. Loui, and G.N. Carlson, editors, </editor> <booktitle> Knowledge Representation and Defeasible Reasoning, </booktitle> <pages> pages 23-67. </pages> <publisher> Kluwer Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: The consistency condition (3) deserves a brief expla-nation. Following Pednault [ 9 ] and Schubert <ref> [ 14 ] </ref> , Reiter [ 11 ] provides a solution to the frame problem in the absence of state constraints which syntactically transforms a pair of effect axioms for a given fluent F into a successor state axiom for F . <p> The effect axioms are assumed to have the syntactic forms: P oss (a; s) ^ fl + and F (~x; a; s) oe :F (~x; do (a; s)): Reiter applies the explanation closure idea of Schubert <ref> [ 14 ] </ref> to obtain the following frame axioms for F : P oss (a; s) ^ :F (~x; s) ^ F (~x; do (a; s)) oe fl + P oss (a; s) ^ F (~x; s) ^ :F (~x; do (a; s)) oe fl The successor state axiom (4) is
References-found: 14

