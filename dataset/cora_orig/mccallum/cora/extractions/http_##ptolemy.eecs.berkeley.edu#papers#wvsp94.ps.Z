URL: http://ptolemy.eecs.berkeley.edu/papers/wvsp94.ps.Z
Refering-URL: http://ptolemy.eecs.berkeley.edu/annual95.html
Root-URL: 
Email: email: teich@hoff.eecs.berkeley.edu email: thiele@ee.uni-sb.de  
Title: Performance Analysis of Mixed Asynchronous Synchronous Systems  
Author: J. Teich, S. Sriram L. Thiele, M. Martin 
Address: Berkeley, CA 94720 D-66041 Saarbrucken, Germany  
Affiliation: Department of EECS Institute on Microelectronics University of California at Berkeley University of Saarland  
Note: In Proc. 1994 IEEE Workshop on VLSI Signal Processing  
Abstract: The paper is concerned with the timing analysis of a class digital systems we call mixed asynchronous-synchronous systems. In such a system, each computation module is either synchronous (i.e. clocked) or asynchronous (i.e. selftimed). The communication between modules is assumed to be selftimed for all modules. We introduce a graph model called MASS for describing the timing behaviour of such architectures. The graph contains two kinds of nodes, synchronous and asynchronous nodes. The operation model of a MASS is similar to that of a timed marked graph, however, additional schedule constraints are imposed on synchronous nodes: A synchronous node can only fire at ticks of its local module clock. We analyze the behaviour of MASS, in particular period, periodicity and maximal throughput rate. 
Abstract-found: 1
Intro-found: 1
Reference: [BCOQ92] <author> F. Baccelli, G. Cohen, G.J. Olsder, and J.-P. Quadrat. </author> <title> Synchronization and Linearity. </title> <publisher> John Wiley, Sons, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: In [Rei68], it is shown that under certain conditions, systems modeled by these graphs have an asymptotically periodic behaviour and that the minimal period of such a system is given by the maximal cycle mean. A detailed analysis of this class of discrete event systems is contained in <ref> [BCOQ92] </ref>. Based on these results, we will now define a graph model called MASS (mixed asynchronous-synchronous system) that is basically an extended marked graph with two kinds of nodes: synchronous and asynchronous nodes. <p> A MASS is therefore basically a marked graph with a modified model of computation. We assume that the reader is familiar with the notion of a marked graph and its model of computation. For more details, see [Pet81], <ref> [BCOQ92] </ref> and references therein. Definition 1 (Mixed Asynchronous-Synchronous System) A mixed asynchronous-synchronous system (MASS) denotes an extended marked graph G = (V; A; d; h; p) with * nodes V = fv 1 ; v 2 ; ; v jV j g representing the set of computation modules.
Reference: [GJ93] <author> G. Gopalakrishnan and L. Josephson. </author> <title> Towards amalgating the synchronous and asynchronous styles. In TAU'93, ACM Workshop on Timing Issues in the specification and synthesis of digital systems, </title> <type> page paper 10, </type> <address> Malente, Germany, </address> <year> 1993. </year>
Reference-contexts: Some of these architectures are also referred to as globally asynchronous, locally synchronous systems (GALS) ([Sha84],[WB93]). For a discussion on advantages and disadvantages of synchronous, asynchronous and mixed styles, see <ref> [GJ93] </ref>. Aspects of describing such systems can be found in [Sei80], [Sha84] and [WB93]. Whereas [Sei80] and [Sha84] describe implementation aspects, [WB93] describes a language oriented approach to the design of GALS. The generation of the hardware of the asynchronous parts is done using delay insensitive elements [Sut89].
Reference: [Kar78] <author> R.M. Karp. </author> <title> A characterization of the minimum cycle mean in a digraph. </title> <journal> Discrete Mathematics, </journal> <volume> 23 </volume> <pages> 309-311, </pages> <year> 1978. </year>
Reference-contexts: Now, bounds on the average period of the above determined maximal-rate schedule will be given which can be related to the maximal cycle mean of marked graphs. Therefore, the bounds may be computed in time O (jV j jAj) using a modification of Karp's algorithm described in <ref> [Kar78] </ref>.
Reference: [LRS83] <author> C.E. Leiserson, F.M. Rose, and J.B. Saxe. </author> <title> Optimizing synchronous circuitry by retiming. </title> <booktitle> In Proc. Third Caltech Conf. on VLSI, </booktitle> <pages> pages 87-116, </pages> <year> 1983. </year>
Reference: [Pet81] <author> J.L. Peterson. </author> <title> Petri Net Theory and Modeling of Systems. </title> <publisher> Pren-tice Hall, </publisher> <address> Reading, Mass., </address> <year> 1981. </year>
Reference-contexts: For modeling selftimed communication and computation, Reiter [Rei68] describes a graph model called computation graph. Sometimes, these graphs are also called marked graphs; for a classification see e.g. <ref> [Pet81] </ref>. In [Rei68], it is shown that under certain conditions, systems modeled by these graphs have an asymptotically periodic behaviour and that the minimal period of such a system is given by the maximal cycle mean. A detailed analysis of this class of discrete event systems is contained in [BCOQ92]. <p> A MASS is therefore basically a marked graph with a modified model of computation. We assume that the reader is familiar with the notion of a marked graph and its model of computation. For more details, see <ref> [Pet81] </ref>, [BCOQ92] and references therein. Definition 1 (Mixed Asynchronous-Synchronous System) A mixed asynchronous-synchronous system (MASS) denotes an extended marked graph G = (V; A; d; h; p) with * nodes V = fv 1 ; v 2 ; ; v jV j g representing the set of computation modules.
Reference: [Rei68] <author> R. Reiter. </author> <title> Scheduling parallel computations. </title> <journal> J. of the ACM, </journal> <volume> 15 </volume> <pages> 590-599, </pages> <year> 1968. </year>
Reference-contexts: In the realm of synchronous architecture design, Leiserson et al. ([LRS83]) have developed a theory for analysis and optimization of synchronous circuits modeled by signal flow graphs. For modeling selftimed communication and computation, Reiter <ref> [Rei68] </ref> describes a graph model called computation graph. Sometimes, these graphs are also called marked graphs; for a classification see e.g. [Pet81]. In [Rei68], it is shown that under certain conditions, systems modeled by these graphs have an asymptotically periodic behaviour and that the minimal period of such a system is <p> For modeling selftimed communication and computation, Reiter <ref> [Rei68] </ref> describes a graph model called computation graph. Sometimes, these graphs are also called marked graphs; for a classification see e.g. [Pet81]. In [Rei68], it is shown that under certain conditions, systems modeled by these graphs have an asymptotically periodic behaviour and that the minimal period of such a system is given by the maximal cycle mean. A detailed analysis of this class of discrete event systems is contained in [BCOQ92].
Reference: [Sei80] <author> C. E. Seitz. </author> <title> System Timing, pages 219-262. Introduction to VLSI Systems, </title> <editor> C. A. Mead and L. A. Conway eds. </editor> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1980. </year>
Reference-contexts: Some of these architectures are also referred to as globally asynchronous, locally synchronous systems (GALS) ([Sha84],[WB93]). For a discussion on advantages and disadvantages of synchronous, asynchronous and mixed styles, see [GJ93]. Aspects of describing such systems can be found in <ref> [Sei80] </ref>, [Sha84] and [WB93]. Whereas [Sei80] and [Sha84] describe implementation aspects, [WB93] describes a language oriented approach to the design of GALS. The generation of the hardware of the asynchronous parts is done using delay insensitive elements [Sut89]. <p> Some of these architectures are also referred to as globally asynchronous, locally synchronous systems (GALS) ([Sha84],[WB93]). For a discussion on advantages and disadvantages of synchronous, asynchronous and mixed styles, see [GJ93]. Aspects of describing such systems can be found in <ref> [Sei80] </ref>, [Sha84] and [WB93]. Whereas [Sei80] and [Sha84] describe implementation aspects, [WB93] describes a language oriented approach to the design of GALS. The generation of the hardware of the asynchronous parts is done using delay insensitive elements [Sut89].
Reference: [Sha84] <author> D. M. Shapiro. </author> <title> Globally Asynchronous, Locally Synchronous Systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1984. </year>
Reference-contexts: Some of these architectures are also referred to as globally asynchronous, locally synchronous systems (GALS) (<ref> [Sha84] </ref>,[WB93]). For a discussion on advantages and disadvantages of synchronous, asynchronous and mixed styles, see [GJ93]. Aspects of describing such systems can be found in [Sei80], [Sha84] and [WB93]. Whereas [Sei80] and [Sha84] describe implementation aspects, [WB93] describes a language oriented approach to the design of GALS. The generation of the hardware of the asynchronous parts is done using delay insensitive elements [Sut89]. <p> Some of these architectures are also referred to as globally asynchronous, locally synchronous systems (GALS) (<ref> [Sha84] </ref>,[WB93]). For a discussion on advantages and disadvantages of synchronous, asynchronous and mixed styles, see [GJ93]. Aspects of describing such systems can be found in [Sei80], [Sha84] and [WB93]. Whereas [Sei80] and [Sha84] describe implementation aspects, [WB93] describes a language oriented approach to the design of GALS. The generation of the hardware of the asynchronous parts is done using delay insensitive elements [Sut89].
Reference: [Sut89] <author> I. E. Sutherland. </author> <title> Micropipelines. </title> <journal> Communication of the ACM, </journal> <volume> 32 </volume> <pages> 720-738, </pages> <year> 1989. </year>
Reference-contexts: Aspects of describing such systems can be found in [Sei80], [Sha84] and [WB93]. Whereas [Sei80] and [Sha84] describe implementation aspects, [WB93] describes a language oriented approach to the design of GALS. The generation of the hardware of the asynchronous parts is done using delay insensitive elements <ref> [Sut89] </ref>. Goals Unfortunately, none of the work described above proposes a model that enables the determination of the exact timing behavior of a system containing synchronous and asynchronous modules communicating asynchronously.
Reference: [WB93] <author> K. Wolinski and M. Belhadj. </author> <title> Vers la synthese automatique de programmes signal. </title> <type> Technical Report 746, </type> <institution> IRISA, Rennes, France, </institution> <year> 1993. </year>
Reference-contexts: Some of these architectures are also referred to as globally asynchronous, locally synchronous systems (GALS) ([Sha84],<ref> [WB93] </ref>). For a discussion on advantages and disadvantages of synchronous, asynchronous and mixed styles, see [GJ93]. Aspects of describing such systems can be found in [Sei80], [Sha84] and [WB93]. Whereas [Sei80] and [Sha84] describe implementation aspects, [WB93] describes a language oriented approach to the design of GALS. The generation of the hardware of the asynchronous parts is done using delay insensitive elements [Sut89]. <p> of these architectures are also referred to as globally asynchronous, locally synchronous systems (GALS) ([Sha84],<ref> [WB93] </ref>). For a discussion on advantages and disadvantages of synchronous, asynchronous and mixed styles, see [GJ93]. Aspects of describing such systems can be found in [Sei80], [Sha84] and [WB93]. Whereas [Sei80] and [Sha84] describe implementation aspects, [WB93] describes a language oriented approach to the design of GALS. The generation of the hardware of the asynchronous parts is done using delay insensitive elements [Sut89].
References-found: 10

