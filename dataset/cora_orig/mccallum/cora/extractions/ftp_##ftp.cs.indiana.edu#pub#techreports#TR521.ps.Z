URL: ftp://ftp.cs.indiana.edu/pub/techreports/TR521.ps.Z
Refering-URL: http://www.cs.indiana.edu/ftp/techreports/index.html
Root-URL: http://www.cs.indiana.edu
Title: Leader Election in Asynchronous Distributed Systems  
Author: Scott D. Stoller 
Keyword: Index terms: leader election, group membership, asynchronous distributed systems, crash failures  
Date: January 17, 1999  
Abstract: In a classic paper, Garcia-Molina specifies the leader election problem for synchronous and asynchronous distributed systems with crash and link failures and gives an elegant algorithm for each type of system. This paper points out a flaw in Garcia-Molina's specification of leader election in asynchronous systems and proposes a new specification. In a classic paper, Garcia-Molina specifies the leader election problem for synchronous and asynchronous distributed systems with crash and link failures and gives an elegant algorithm for each type of system; the algorithm for asynchronous systems is called the Invitation Algorithm [3]. The group communication system in Amoeba [5, 6] uses the Invitation Algorithm to reconfigure a group after a node crashes. In a recent textbook [1], Chow and Johnson write: "We will examine the classic election algorithms of Garcia-Molina. Several variations of election have been proposed, but the Garcia-Molina algorithm best defines and handles the possible failures." Garcia-Molina's specification of leader election in asynchronous systems is based on the idea of groups: a group is a set of nodes that agree on a leader. To prohibit trivial algorithms, Garcia-Molina's specification requires, roughly, that if a set R of nodes can all communicate with each other during an election, then at the end of the election, the nodes in R are in a single group. However, Garcia-Molina's specification is unintentionally strong: contrary to his Theorem A4, the Invitation Algorithm, through no fault of its own, does not satisfy it. Furthermore, Garcia-Molina's specification is undesirably strong for some systems: it sometimes forces nodes that cannot directly communicate to be in the same group. These problems are not mentioned in [1]. This paper proposes a new specification, which is satisfied by the Invitation Algorithm and never forces nodes that cannot directly communicate to be in the same group. The Invitation Algorithm works roughly as follows; for details, see [3] or [1]. Each node has a unique priority. Each node i maintains a variable status i containing its status, a variable grp i identifying the group it is in, and a variable ldr i identifying the leader of that group. A node's status is Normal except while the node is in the process of joining a new group. Periodically, each node that is not the leader of a group calls a Timeout procedure that checks whether the leader of its group is still alive, by sending a message to the leader and waiting for a reply. If the node fl Email: stoller@cs.indiana.edu Web: http://www.cs.indiana.edu/~stoller/ Address: Computer Science Department, Indiana University, Bloomington, IN 47405, USA
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Randy Chow and Theodore Johnson. </author> <title> Distributed Operating Systems and Algorithms. </title> <publisher> Addison Wesley, </publisher> <year> 1997. </year>
Reference: [2] <author> Flaviu Cristian and Frank Schmuck. </author> <title> Agreeing on processor group membership in asynchronous distributed systems. </title> <type> Technical Report CSE95-428, </type> <institution> University of California, </institution> <address> San Diego, </address> <year> 1995. </year>
Reference-contexts: a constant c such that if the system is stable for a time interval of duration at least c, then by the end of that interval, letting hV; Ei denote the system's connectivity graph, the system reaches a state such that: (a) 1 This definition of stability is based on <ref> [2] </ref>. The definition of stability in [2] is stronger because it requires transitive connectivity. 3 (8i : status i = Normal ^ up ldr i ^ grp ldr i = grp i ^ hi; ldr i i 2 E fl ), and (b) the number of groups is at most the <p> the system is stable for a time interval of duration at least c, then by the end of that interval, letting hV; Ei denote the system's connectivity graph, the system reaches a state such that: (a) 1 This definition of stability is based on <ref> [2] </ref>. The definition of stability in [2] is stronger because it requires transitive connectivity. 3 (8i : status i = Normal ^ up ldr i ^ grp ldr i = grp i ^ hi; ldr i i 2 E fl ), and (b) the number of groups is at most the size of a minimum-sized clique cover
Reference: [3] <author> Hector Garcia-Molina. </author> <title> Elections in a distributed computing system. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31(1):47-59, </volume> <month> January </month> <year> 1982. </year>
Reference: [4] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: Assertion 4' does not force the number of groups to equal the size of a minimum-sized clique cover; this is important, because we do not want leader election to be NP-hard (recall that computing a minimum-sized clique cover is NP-complete <ref> [4] </ref>). When the connectivity graph is transitive, Assertion 4' is equivalent to Assertion 4. We sketch a proof that the Invitation Algorithm satisfies part (b) of Assertion 4'; the proof that it satisfies part (a) is straightforward.
Reference: [5] <author> M. F. Kaashoek and A. S. Tanenbaum. </author> <title> Group communication in the Amoeba distributed operating system. </title> <booktitle> In Proc. IEEE 11th International Conference on Distributed Computing Systems (ICDCS), </booktitle> <pages> pages 222-230. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference: [6] <author> M. Frans Kaashoek and Andrew S. Tanenbaum. </author> <title> Efficient reliable group communication for distributed systems. </title> <institution> Rapport IR-295 IR-295, Faculteit Wiskunde en Informatica, Vrije Universiteit, </institution> <year> 1992. </year> <note> Revised version available from ftp://ftp.cs.vu.nl/pub/papers/amoeba/group94.ps.Z. 4 </note>
References-found: 6

