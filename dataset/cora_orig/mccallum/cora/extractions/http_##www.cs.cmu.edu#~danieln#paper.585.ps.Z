URL: http://www.cs.cmu.edu/~danieln/paper.585.ps.Z
Refering-URL: http://www.cs.cmu.edu/~danieln/publications.html
Root-URL: 
Title: CS585 Term-Paper Dynamic Simulation Methods for Animation of Legged Locomotion  
Author: Daniel Nikovski 
Abstract: The modeling of legged locomotion is of central importance to the successful animation of human and animal figures. Since legged locomotion is typically difficult to animate using only kinematic modeling, alternative, more physically-based methods have to be employed. This paper discusses several methods for dynamic simulation of legged locomotion. Typical components of a dynamic simulation system are outlined, and a number of successful applications are reviewed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> McKenna, Michael and David Zeltzer (1990). </author> <title> Dynamic Simulation of Autonomous Legged Locomotion. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 29-38, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: combination of neural networks and genetic algorithms can provide automatically control systems of arbitrary complexity (which comes as no surprise because this is the approach taken by nature). 7.3 McKenna and Zeltzer McKenna and Zeltzer simulated dynamically the locomotion of a hexapod using an articulated model and biologically-based control mechanisms <ref> [1] </ref>. The Articulated Body Method was used to model the hexapod as a branching structure without closing loops. The resulting ODE system was integrated with a modified fifth-order Runge-Kutta method with adaptive step size, and the positions of the body parts rendered appropriately.
Reference: [2] <author> Raibert, M.H. and Jessica K. </author> <month> Hodgkins </month> <year> (1991). </year> <title> Animation of Dynamic Legged Locomotion. </title> <journal> Computer Graphics, </journal> <volume> vol. 25, No. 4 </volume> <pages> 349-358. </pages>
Reference-contexts: Systems that possess 7 such actuators are called articulated systems to distinguish them from passive systems that are acted upon by forces, but cannot power and regulate their motions <ref> [2] </ref>. Many methods exist for the control of articulated dynamical systems. These methods can be split generally into adaptive and non-adaptive ones. <p> They suggested that simulated evolution can be applied to the problem, but did not report any results in this regard. 13 7.4 Raibert and Hodgins Raibert and Hodgkins managed to animate dynamically a number of complex gaits, including such that did not maintain static balance <ref> [2] </ref>. All motions were generated by formulating physical models, deriving equations of motion and integrating them numerically. The equations of motion were generated with a commercially available program and integrated using Euler's method with very small time step - 0.0004 s.
Reference: [3] <author> Raibert, M.H. </author> <year> (1985). </year> <title> Legged Robots that Balance. </title> <publisher> Cambridge: MIT Press. </publisher>
Reference: [4] <author> Hahn, James K. </author> <year> (1988). </year> <title> Realistic Animation of Rigid Bodies. </title> <journal> Computer Graphics, </journal> <volume> vol. 22, No. 3 </volume> <pages> 299-308. </pages>
Reference: [5] <author> Witkin, Andrew, Kurt Fleischer, Alan Barr (1987). </author> <title> Energy Constraints On Parametrized Models,Computer Graphics, </title> <address> vol.21, No.4, </address> <year> 1987. </year> <month> 15 </month>
Reference-contexts: An alternative approach is to use penalty functions that become zero if and only if the constraint is satisfied. An energy function is formed, whose gradient is an abstract force that tends to keep the constraint satisfied. <ref> [5] </ref>. The drawback of this method is that the constraints are not strictly kept; rather than that a balance between the different constraints is maintained, so that the total energy function is minimized.
Reference: [6] <author> Witkin, </author> <title> Andrew (1991). Particle Systems Dynamics, </title> <booktitle> SIGGRAPH'91 Tutorial on Particle-Based Systems, </booktitle> <address> Section C. </address> <publisher> ACM Press. </publisher>
Reference-contexts: Usually the physical model is described as a set of ordinary differential equations (ODEs) that reflect the dynamic interactions between the masses in the system. The two major physical model alternatives are particle-based systems <ref> [6] </ref> and rigid body systems [9]. ODE solver. A variety of methods can be employed to solve the ODE system [16, 7]. The output of the ODE solver is a sequence of positions of the body parts that can be fed further into the viewing and rendering pipelines. Control system. <p> It was discovered that a simple mechanism exists for implementing interesting forces in a particle system connecting the particles with springs. A spring has a resting length r and resists any stretching or contracting by elastic force according to Hook's law <ref> [6] </ref>: 4 f = k s (jlj r) + k d jlj l This elastic force acts upon the two particles that are connected by the spring. Here l denotes the current length of the spring, k s is the spring constant, and k d is a damping coefficient. <p> Here l denotes the current length of the spring, k s is the spring constant, and k d is a damping coefficient. Other, more general spatial forces can be implemented that act upon more than two particles <ref> [6] </ref>. If legged locomotion is implemented through particle systems, a number of additional constraints have to be realized. One way to achieve constraints like keeping particles a specified distance apart is to connect them through very stiff springs.
Reference: [7] <author> Witkin, </author> <title> Andrew (1991). Differential Equations Basics, </title> <booktitle> SIGGRAPH'91 Tutorial on Particle-Based Systems, Section B. </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: The two major physical model alternatives are particle-based systems [6] and rigid body systems [9]. ODE solver. A variety of methods can be employed to solve the ODE system <ref> [16, 7] </ref>. The output of the ODE solver is a sequence of positions of the body parts that can be fed further into the viewing and rendering pipelines. Control system. Unlike kinematic modeling, interesting behavior can be obtained through dynamic modeling without any dedicated control system. <p> Furthermore, it should be stable, accurate and consistent with the physical problem being solved. Many methods for the solution of ODE have been proposed [16]. Each of them is a compromise between the four requirements mentioned above. The simplest integration scheme is the forward Euler method <ref> [7] </ref>. It is very efficient computationally, but is susceptible to stability and accuracy problems. This is due to the low order of the method and the explicit integration employed.
Reference: [8] <author> Witkin, </author> <title> Andrew (1991). Constrained Dynamics, SIGGRAPH'91 Tutorial on Particle-Based Systems, </title> <editor> Section G. </editor> <publisher> ACM Press. </publisher>
Reference-contexts: Still another alternative is to use constraint forces that will counteract the existing forces in such a way that the constraints will be kept precisely. It is possible to generate these forces automatically from constraint specifications <ref> [8] </ref>. 4.2 Rigid Body Systems If the simulated objects are considered with their spatial extents, the material point idealization employed in particle-based systems is no longer appropriate.
Reference: [9] <author> Baraff, David (1991). </author> <title> Rigid Body Concepts, SIGGRAPH'91 Tutorial on Particle-Based Systems, Section H. </title> <publisher> ACM Press. </publisher>
Reference-contexts: Usually the physical model is described as a set of ordinary differential equations (ODEs) that reflect the dynamic interactions between the masses in the system. The two major physical model alternatives are particle-based systems [6] and rigid body systems <ref> [9] </ref>. ODE solver. A variety of methods can be employed to solve the ODE system [16, 7]. The output of the ODE solver is a sequence of positions of the body parts that can be fed further into the viewing and rendering pipelines. Control system.
Reference: [10] <author> Bruderlin, A. and T. W. </author> <month> Calverts </month> <year> (1989). </year> <title> Goal-Directed, Dynamic Animation of Human Walking. </title> <journal> Computer Graphics, </journal> <volume> vol. 23, No. 3 </volume> <pages> 233-242. </pages>
Reference: [11] <author> Girard, M. and A. A. </author> <month> Maciejewski </month> <year> (1985). </year> <title> Computational Modeling for the Computer Animation of Legged Figures. </title> <journal> Computer Graphics, </journal> <volume> vol. 19, No. 3 </volume> <pages> 263-270. </pages>
Reference-contexts: This section reviews some of them. 11 7.1 Girard and Maciejewski The PODA animation system, developed by the authors, employed both kinematic and dynamic modeling to achieve smooth human figure locomotion <ref> [11] </ref>. Their primary concern was to make the motion look as if forces were being applied and not fully simulate these forces. The control algorithms that they used were based on the decomposition schemes proposed by Raibert [11]. <p> authors, employed both kinematic and dynamic modeling to achieve smooth human figure locomotion <ref> [11] </ref>. Their primary concern was to make the motion look as if forces were being applied and not fully simulate these forces. The control algorithms that they used were based on the decomposition schemes proposed by Raibert [11]. The decomposition in the PODA model is performed along two lines: decomposition by leg and decomposition by body direction. Girard and Maciejewski discovered a simple way to animate multi-legged figures that produced very realistic results.
Reference: [12] <author> Armstrong, W. W., M. Green and R. </author> <title> Lake (1987). Near-Real-Time Control of Human Figure Models. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> vol 7, No. 6 </volume> <pages> 52-61. </pages>
Reference: [13] <author> Sims, </author> <title> Karl (1994). Evolving Virtual Creatures,Computer Graphics No.8, </title> <year> 1994, </year> <month> pp.15-22. </month>
Reference-contexts: Several directions seem promising: penalty functions and task constraints, which were discussed in the section on physical modeling. 7.5 Sims Karl Sims used genetic algorithms and dynamic simulation to evolve different types of legged locomoton walking, jumping, etc. <ref> [13] </ref>. His creatures were also result of simulated evolution and their shape was not anthropomorphic; rather, they tended to take the shape that was most suitable to the artificial world that they inhabited. Their locomotion can be only conditionally called "legged".
Reference: [14] <editor> Kinnear, K.E. (ed.) </editor> <booktitle> (1994). Advances in Genetic Programming, </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: Different operators are used to produce new individuals from successful old ones. The process is repeated until satisfactory performance is achieved. Several main styles of EC are known, distinguished mainly by the types of structures that form the population <ref> [14] </ref> Genetic Algorithms, Genetic Programming, Evolution Strategy, Evolution Programming. Genetic Algorithms operate on genotypes that are simply an encoded description of the organism or phenotype. The individuals in Genetic Programming are not strings of bits, but complete programs in the form of trees (usually LISP programs).
Reference: [15] <author> Beer, R.D. </author> <year> (1990). </year> <title> Intelligence as Adaptive Behavior. </title> <address> Boston: </address> <publisher> Academic Press. </publisher>
Reference: [16] <editor> Press, W.H et al. </editor> <title> (1992) Numerical Recipes in C, </title> <publisher> Cambridge University Press. </publisher>
Reference-contexts: The two major physical model alternatives are particle-based systems [6] and rigid body systems [9]. ODE solver. A variety of methods can be employed to solve the ODE system <ref> [16, 7] </ref>. The output of the ODE solver is a sequence of positions of the body parts that can be fed further into the viewing and rendering pipelines. Control system. Unlike kinematic modeling, interesting behavior can be obtained through dynamic modeling without any dedicated control system. <p> Several requirements are put forth to the ODE solver. It should be computationally efficient, since it will be invoked between each pair of successive frames. Furthermore, it should be stable, accurate and consistent with the physical problem being solved. Many methods for the solution of ODE have been proposed <ref> [16] </ref>. Each of them is a compromise between the four requirements mentioned above. The simplest integration scheme is the forward Euler method [7]. It is very efficient computationally, but is susceptible to stability and accuracy problems. <p> However, this integration scheme permits much larger steps to be taken, which eventually leads to savings in computations. The fourth-order Runge-Kutta method has been known as the best trade-off between accuracy and efficeincy for most problems in science and engineering <ref> [16, 25] </ref>. Other integration schemes can be used as well. Bulirsch-Stoer integration is very efficient for smooth functions it can increase adaptively its step size to take advantage of flat regions and reduce it to explore carefully more complex ones. <p> Besides, the equations of motion are typically not smooth for example, when a collision between two bodies occurs, the right-hand side of the equations changes abruptly. For cases when the equations of motion are particularly discontinuous, methods for the solution of stiff ODEs have to be employed <ref> [16, 25] </ref>. Arguably, these methods are particularly relevant to dynamic animation, because the system of ODEs that correspond to an animated scene are stiff if, for example, different objects in the scene have very different speeds of motion. <p> It should be noted that these methods are not necessarily computationally more expensive on the contrary, savings of orders of magnitude can be realized in comparison to usual methods when stiff problems are solved <ref> [16] </ref>. 6 Control of Legged Locomotion In order to achieve legged locomotion in dynamic systems, some kind of active forces should act upon the animated objects. These forces can be produced by motors, muscles or some other type of actuators that convert potential energy into kinetic one.
Reference: [17] <author> Craig, John J. </author> <title> (1989) Introduction to Robotics, </title> <address> Reading: </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: It should be noted that no significant difference exists between the order of computations required to solve the forward and inverse dynamic problems. For both types of problems, algorithms have been proposed that are linear in the number of joints <ref> [17, 18] </ref>. Conditionally, the four modeling methods discussed above can be ranked in increasing order of computational complexity as follows: 1. Forward kinematic modeling. 2. Forward dynamic modeling. 3. Inverse kinematic modeling. 4. Inverse dynamic modeling. 2 Dymamic vs. <p> The inertia tensor describes compactly the mass distribution of the body <ref> [17] </ref>. Using Newton's and Euler's equations, an iterative solution of the forward and inverse 5 dynamic problems can be obtained [17]. The Newton-Euler dynamic formulation can be used to derive closed-form solution for both problems as well. <p> The inertia tensor describes compactly the mass distribution of the body <ref> [17] </ref>. Using Newton's and Euler's equations, an iterative solution of the forward and inverse 5 dynamic problems can be obtained [17]. The Newton-Euler dynamic formulation can be used to derive closed-form solution for both problems as well. An alternative way to describe the dynamics of a set of rigid bodies is to use the La-grangian dynamics formulation. <p> It is based on energy conservation principles and derives the same equations of motion that the Newton-Euler folmulation would, albeit in a different way. The computational efficiency of the two formulations, however, can be very different - a difference in orders of magnitude is possible <ref> [17] </ref>. Efficiency concerns gave rise to many enhanced algorithms that use special computational arrangements to cut on the number of multiplications and additions needed to model the dynamics of the object.
Reference: [18] <author> Featherstone, </author> <title> Roy (1987) Robot Dynamics Algorithms, </title> <address> Boston: </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: It should be noted that no significant difference exists between the order of computations required to solve the forward and inverse dynamic problems. For both types of problems, algorithms have been proposed that are linear in the number of joints <ref> [17, 18] </ref>. Conditionally, the four modeling methods discussed above can be ranked in increasing order of computational complexity as follows: 1. Forward kinematic modeling. 2. Forward dynamic modeling. 3. Inverse kinematic modeling. 4. Inverse dynamic modeling. 2 Dymamic vs. <p> Among the most successful known algorithms for forward dynamic simulation are the Composite-Rigid-Body Method and the Articulated-Body Method that are based on a mathematic abstraction called Spatial Vector Analysis <ref> [18] </ref>. 5 Integration of the Equations of Motion The purpose of the ODE solver is to integrate the equations of motion obtained through the methods described in the previous section. The result of this integration is a time sequence of positions in space of the objects being animated.
Reference: [19] <author> Widrow, B. </author> <title> and M.E. Hoff (1960). Adaptive Switching Circuits. </title> <booktitle> In 1960 IRE WESCON Convention Record, </booktitle> <volume> part 4, </volume> <pages> 96-104. </pages> <address> New York: IRE. </address>
Reference-contexts: Supervised learning is employed when the correct output for a given state of the system is known and can be given 8 as an example to the network <ref> [19] </ref>. This is rarely the case, actually, because a known correct output presumes that a correct controller already exists to provide it. Clearly this technique is not very useful in control.
Reference: [20] <author> Kosko, B. </author> <year> (1992). </year> <title> Neural Networks and Fuzzy Systems: a Dynamical Approach to Machine Intelligence. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall. </publisher>
Reference-contexts: Examples of reinforcement learning algorithms that solve the temporal credit assignment problem are TD () [21] and Q-learning [22]. 6.4 Fuzzy Logic Fuzzy logic is another important tool for building controllers <ref> [20] </ref>. The operation of fuzzy logic control systems can be explained in many ways, but I believe it is best understood if fuzzy logic systems are viewed as an extension to the rule-based architectures of classical AI.
Reference: [21] <author> Sutton, R.S. </author> <year> (1988). </year> <title> Learning to Predict by Methods of Temporal Difference. </title> <booktitle> Machine Learning 3, </booktitle> <pages> 9-44. </pages>
Reference-contexts: Examples of reinforcement learning algorithms that solve the temporal credit assignment problem are TD () <ref> [21] </ref> and Q-learning [22]. 6.4 Fuzzy Logic Fuzzy logic is another important tool for building controllers [20].
Reference: [22] <author> Watkins, C.J.C.H., and Dayan, P. </author> <year> (1992). </year> <title> Q-Learning. </title> <booktitle> Machine Learning 8, </booktitle> <pages> 279-292. </pages>
Reference-contexts: Examples of reinforcement learning algorithms that solve the temporal credit assignment problem are TD () [21] and Q-learning <ref> [22] </ref>. 6.4 Fuzzy Logic Fuzzy logic is another important tool for building controllers [20]. The operation of fuzzy logic control systems can be explained in many ways, but I believe it is best understood if fuzzy logic systems are viewed as an extension to the rule-based architectures of classical AI.
Reference: [23] <author> Williams, R.J. </author> <year> (1992). </year> <title> Simple Statistical Gradient- Following Algorithms for Connectionist Reinforcement Learning. </title> <booktitle> Machine Learning 8, </booktitle> <pages> 5-31. 16 </pages>
Reference-contexts: By manipulating the reinforcemant variable the controller is either "rewarded" or "punished" for its actions until it learns the control law. Associative Reward-Penalty [26] and the REINFORCE class of reinforcement learning algorithms <ref> [23] </ref> are examples of methods that employ this learning scheme. A complication arises when the environment delays the reinforcement.
Reference: [24] <author> Goldberg, D. E. </author> <year> (1989). </year> <title> Genetic Algorithms in Search, </title> <booktitle> Optimiztion, and Machine Learn--ing. </booktitle> <address> Reading: </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: feature together with the possibility to implement the rules in specialized hardware makes fuzzy logic systems an efficient and powerful tool for control. 6.5 Evolutionary Computation The name Evolutionary Computation refers to a group of related techniques based on the principles of natural selection that can perform search and optimization <ref> [24] </ref>. Since adjusting the parameters of an adaptive controller is basically optimiztion in the space of these parameters, these techniques are particularly relevant to the problem of adaptive control. Essential to this approach is the use of a fitness function that guides the process of evolution.
Reference: [25] <author> Hoffman, Joe D. </author> <year> (1992). </year> <title> Numerical Methods for Engineers and Scientists, </title> <address> New York: </address> <publisher> McGraw-Hill. </publisher>
Reference-contexts: However, this integration scheme permits much larger steps to be taken, which eventually leads to savings in computations. The fourth-order Runge-Kutta method has been known as the best trade-off between accuracy and efficeincy for most problems in science and engineering <ref> [16, 25] </ref>. Other integration schemes can be used as well. Bulirsch-Stoer integration is very efficient for smooth functions it can increase adaptively its step size to take advantage of flat regions and reduce it to explore carefully more complex ones. <p> Besides, the equations of motion are typically not smooth for example, when a collision between two bodies occurs, the right-hand side of the equations changes abruptly. For cases when the equations of motion are particularly discontinuous, methods for the solution of stiff ODEs have to be employed <ref> [16, 25] </ref>. Arguably, these methods are particularly relevant to dynamic animation, because the system of ODEs that correspond to an animated scene are stiff if, for example, different objects in the scene have very different speeds of motion.
Reference: [26] <author> Barto, A.G. and P. </author> <month> Anandan </month> <year> (1985). </year> <title> Pattern Recognizing Stochastic Learning Automata. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics 15, </journal> <pages> 360-375. </pages>
Reference-contexts: By manipulating the reinforcemant variable the controller is either "rewarded" or "punished" for its actions until it learns the control law. Associative Reward-Penalty <ref> [26] </ref> and the REINFORCE class of reinforcement learning algorithms [23] are examples of methods that employ this learning scheme. A complication arises when the environment delays the reinforcement.
Reference: [27] <author> Watt, Alan and Mark Watt (1992). </author> <title> Advanced Animation and Rendering Techniques, </title> <address> New York: </address> <publisher> ACM Press. </publisher> <pages> 17 </pages>
Reference-contexts: Analytical solution is possible only in a small number of special cases. Otherwise, numerical methods have to be employed, which often have erratic behavior due to the ill-posedness of the problem <ref> [27] </ref>. Similarly, forward and inverse dynamic problems can be defined. Forward dynamic problem is the task of finding position and orientation in space as well as the velocities of the body parts that correspond to given forces and torques applied to those parts. <p> This constraint is very hard not to violate if only joint angles have to be 2 specified. The animator cannot easily impose this constraint when working in the domain of parameters, because this constraint is no longer simple in that space <ref> [27] </ref>. If kinematic modeling only is to be used, the modeling should be inverse. This leads to the aforementioned computational difficulties, and hence kinematic modeling is not a good choice for legged locomotion. On the other hand, it is relatively easy to implement the floor constraint through forward dynamic modeling.
References-found: 27

