URL: http://www.cs.wisc.edu/~ramasamy/paper/sets.ps
Refering-URL: 
Root-URL: 
Email: maier-@cs.wisc.edu  
Title: Set-Valued Attributes in O/R DBMS: Implementation Options and Performance Implications  
Author: Karthikeyan Ramasamy, Prasad M. Deshpande, Jeffrey F. Naughton and David Maier -karthik, pmd, naughton, 
Address: Wisconsin, Madison  
Affiliation: Computer Sciences Department, University of  
Abstract: Although adding set-valued attributes to relational database management systems is certainly not a new idea, it is only recently that set-valued attributes have made it to the mainstream of the O/R DBMS world. All the major O/R DBMS vendors either currently support or will support set-valued attributes in their universal servers; furthermore, set-valued attributes are a significant new component of the SQL3 standard. While sets have received a good deal of attention in the database modeling and language design literature, to date there has been very little written on implementation options for sets and how these options impact performance. As a first step toward filling this gap we have implemented and analyzed two broad categories of storage representations for set-valued attributes - Inlined and External - in an object-relational DBMS. Our experiments show that external representations dominate only on queries that do not reference the set-valued attributes. On the other hand, inlined representations dominate for most of the queries involving the set-valued attribute including ones that contain predicates or functions that take multiple set elements as their input and nested queries. A hybrid combination of external in nested form Nested External performs very close to inlined but does not present the overhead inherent in inlined. However the performance benefits of inlined and nested external representations must be weighed against the greater difficulty of their implementation in an existing RDBMS framework. 
Abstract-found: 1
Intro-found: 1
Reference: [COP85] <author> George P. Copeland and Setrag N. Khoshafian. </author> <title> A Decomposition Storage Model. </title> <booktitle> In Proceedings of the 1985 ACM-SIGMOD Conference, </booktitle> <month> May </month> <year> 1985. </year>
Reference-contexts: Relational systems store the data in a normalized storage model (NSM) where all the attributes constitute the structural representation of the tuple. Earlier work on decomposing a tuple into multiple attributes and storing them independently is described by Copland <ref> [COP85] </ref> under the context of relational systems. The 3 decomposition storage model (DSM) vertically partitions a relation and stores each attribute in a file of its own. To facilitate the reconstruction of the tuple, a surrogate value is assigned and is replicated for every instance of attribute of the tuple.
Reference: [VAL86] <author> Patrick Valduriez, Setrag N. </author> <title> Khoshafian and George Copeland Implementation Techniques of Complex Objects. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases (VLDB), </booktitle> <address> Kyoto, Japan, </address> <year> 1986. </year>
Reference-contexts: DSM is compared with NSM on various criteria: relative complexity, storage requirements, and update and retrieval performance. However, such an approach is impractical since it provides dismal update performance. Such a feature is not desirable in a relational system where updates are intensive. Valduriez <ref> [VAL86] </ref> describes a hybrid storage scheme called partial DSM (P-DSM) that vertically partitions a relation based on access patterns and the frequency of accesses of the attributes. Thus the storage structures are organized by exploiting the query workload presented to the system.
Reference: [SCH90] <author> H. J. Schek, H. B. Paul, M. H. Scholl, and G. Weikum. </author> <title> The DASDBS Project: Objectives, Experiences, and Future Prospects. </title> <journal> In IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1990. </year>
Reference-contexts: Related work on the quantitative evaluation of number of disk I/Os for a complex object application can be found in [TEE93]. The measurements are reported from the DASDBS storage system for complex objects <ref> [SCH90] </ref>. The set of queries considered for the benchmark includes the retrieval of a complex object, and insertion and update of sub objects. It concludes that a variation of DSM that clusters sub-objects belonging to the same object performs the best.
Reference: [B84] <author> M. L. Brodie. </author> <title> On the Development of Data Models. In Conceptual Modeling, </title> <publisher> Springer Verlag, </publisher> <year> 1984, </year> <pages> pp 19-47. </pages>
Reference-contexts: Section 5 describes the result of our experiments and interpretation of results. Finally, the conclusions are summarized in section 6. 2 Previous Work Large body of work in sets has been under the context of data modeling ([B81], <ref> [B84] </ref>, [HK87], [G94]). Many semantic notions of the real world are best described by sets. Because of such paramount importance sets have been introduced in O/R DBMS systems. From data modeling perspective, sets can be used as a logical collection or as a nested relation.
Reference: [B81] <author> M. L. Brodie. </author> <title> Association: Database Abstraction. In Information Modeling and Analysis, </title> <publisher> North Holland, </publisher> <year> 1981, </year> <pages> pp 583-608. </pages>
Reference: [C94] <author> R. G. G. Cattell. </author> <title> The Object Database Standard: ODMG 93. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: 1 Introduction Set-valued attributes are beginning to appear in commercial O/R DBMSs - all the major vendors universal servers either currently have set-valued attributes or plan to support them in the future. Furthermore, as set-valued attributes are part of the proposed SQL3 and OQL <ref> [C94] </ref> standard, it appears that in the future this support for set-valued attributes will not be optional - a system will provide set-valued attributes or it will not support the standard.
Reference: [HK87] <author> R. Hull and R.King, </author> <title> Semantic Database Modelling: Survey, Applications and Research Issues. </title> <journal> ACM Computing Surveys 19(3), </journal> <month> September </month> <year> 1987, </year> <pages> pp 201-260. </pages>
Reference-contexts: Section 5 describes the result of our experiments and interpretation of results. Finally, the conclusions are summarized in section 6. 2 Previous Work Large body of work in sets has been under the context of data modeling ([B81], [B84], <ref> [HK87] </ref>, [G94]). Many semantic notions of the real world are best described by sets. Because of such paramount importance sets have been introduced in O/R DBMS systems. From data modeling perspective, sets can be used as a logical collection or as a nested relation.
Reference: [G94] <author> M. M. Gilula, </author> <title> The Set Model for Database and Information Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1994. </year>
Reference-contexts: Section 5 describes the result of our experiments and interpretation of results. Finally, the conclusions are summarized in section 6. 2 Previous Work Large body of work in sets has been under the context of data modeling ([B81], [B84], [HK87], <ref> [G94] </ref>). Many semantic notions of the real world are best described by sets. Because of such paramount importance sets have been introduced in O/R DBMS systems. From data modeling perspective, sets can be used as a logical collection or as a nested relation.
Reference: [S96] <author> M. Stonebracker, </author> <title> Object-relational DBMSs, The Next Great Wave. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1996. </year> <month> 21 </month>
Reference-contexts: In this paper, we make a first step toward rectifying this lack of information by implementing and experimenting with several alternatives for set-valued attributes in an object-relational database system. Two main options have been proposed for implementing set-valued attributes in object-relational systems: inlined, and external <ref> [S96] </ref>. In the inlined representation, the set itself is stored as a variable-length attribute within the tuple to which it belongs. <p> Unfortunately, the performance of the external representation on some common forms of queries involving set-valued attributes was abysmal when compared to the performance of our inline representation. Perhaps surprisingly, this was true even for large sets, which contradicts the common wisdom that only small sets should be inline <ref> [S96] </ref>. The performance advantage of inline sets was so dramatic that inline would always be the method of choice but for one major drawback: on queries that reference tables with set-valued attributes, but do not reference set-valued attributes, the overhead of inline sets can be an almost intolerable burden.
Reference: [K95] <author> Won Kim,Modern Database Systems: </author> <title> The Object Model, Interoperability and Beyond. </title> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference: [K90] <editor> Won Kim,Introduction to ObjectOriented Databases. </editor> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference: [ZM89] <author> S. Zdonik and D. Maier, </author> <title> Fundamentals of ObjectOriented Databases. </title> <booktitle> Readings in ObjectOriented Databases, </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
References-found: 12

