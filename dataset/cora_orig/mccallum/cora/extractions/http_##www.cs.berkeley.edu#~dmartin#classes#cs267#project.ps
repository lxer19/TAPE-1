URL: http://www.cs.berkeley.edu/~dmartin/classes/cs267/project.ps
Refering-URL: http://www.cs.berkeley.edu/~dmartin/
Root-URL: 
Email: fdmartin,nealg@cs.berkeley.edu  
Title: The Design and Implementation of a Scalable, Fault-Tolerant NOW Name Service  
Author: David Martin and Neal Cardwell 
Address: California-Berkeley  
Affiliation: Computer Science Division University of  
Abstract: This paper describes the design and implementation of VNS, a scalable, high-performance, fault-tolerant, parallel name server designed for a NOW environment. It describes the distinguishing motivations of a name server for NOW environments, gives an overview of the VNS design, and details the current implementation. We conclude with performance measurements suggesting that the VNS design approach embracing best-effort service, soft state, partitioning, caching, loosely-consistent replication, and simple fault-tolerance schemes is a promising approach for constructing a highly-available name service for clusters that is still scalable and high-performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> AHO, A. V., SETHI, R., AND ULLMAN, J. D. </author> <booktitle> Compilers: principles, techniques and tools. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1986. </year>
Reference-contexts: the combination of several approaches: partitioning, caching, replication, and a storage hierarchy ultimately backed by disk. 3.3.1 Partitioning In order to achieve high throughput that scales with the number of servers, VNS logically divides all names in the name space into buckets using a simple but effective hash function from <ref> [1] </ref>. These buckets are then striped across the available servers, so that each server is hosting zero or more buckets at every time. This approach is similar to that used in RAID [5], Zebra [9], and xFS.
Reference: [2] <author> ANDERSON, T. E., DAHLIN, M., NEEFE, J. M., PATTERSON, D. A., ROSELLI, D. S., AND WANG, R. </author> <title> Serverless network file systems. </title> <journal> ACM Transactions on Computer Systems 14, </journal> <month> 1 (Feb. </month> <year> 1996), </year> <pages> 41-79. </pages>
Reference-contexts: A serverless network file system such as xFS <ref> [2] </ref> sacrifices some of these semantic guarantees and compensates by providing higher performance, availability, and scalability. A vastly simpler service, VNS provides availability and scalability in line with xFS but should be faster because of the freedom from system calls, context switches, and the overhead of complex file system semantics.
Reference: [3] <author> BIRRELL, A. D., LEVIN, R., NEEDHAM, R. M., AND SCHROEDER, M. D. Grapevine: </author> <title> An exercise in distributed computing. </title> <type> CACM 25, </type> <month> 4 (Apr. </month> <year> 1982), </year> <pages> 260-274. </pages>
Reference-contexts: More complex services, typically referred to as directory services, provide more complex operations, including sophisticated queries based on the attributes of entries. Traditional name and directory services, including DNS [15], X.500 [4], LDAP [20] [11], Clearinghouse [16], Grapevine <ref> [3] </ref>, and GNS [13], have been tuned to the needs of applications operating in the Internet of the 1980's. These applications consisted largely of electronic mail, file transfer, and remote login.
Reference: [4] <author> CCITT (CONSULTATIVE COMMITTEE ON INTERNATIONAL TELEGRAPHY AND TELEPHONY). </author> <title> Recommendation X:500: The Directory Overview of Concepts, Models and Services, </title> <year> 1988. </year>
Reference-contexts: More complex services, typically referred to as directory services, provide more complex operations, including sophisticated queries based on the attributes of entries. Traditional name and directory services, including DNS [15], X.500 <ref> [4] </ref>, LDAP [20] [11], Clearinghouse [16], Grapevine [3], and GNS [13], have been tuned to the needs of applications operating in the Internet of the 1980's. These applications consisted largely of electronic mail, file transfer, and remote login.
Reference: [5] <author> CHEN, P. M., LEE, E. K., GIBSON, G. A., KATZ, R. H., AND PATTERSON, D. A. </author> <title> RAID: high-performance, reliable secondary storage. </title> <journal> ACM Computing Surveys 26, </journal> <month> 2 (June </month> <year> 1994), </year> <pages> 145-185. </pages>
Reference-contexts: These buckets are then striped across the available servers, so that each server is hosting zero or more buckets at every time. This approach is similar to that used in RAID <ref> [5] </ref>, Zebra [9], and xFS.
Reference: [6] <author> FEELEY, M. J., MORGAN, W. E., PIGHIN, F. H., KARLIN, A. R., AND LEVY, H. M. </author> <title> Implementing Global Memory Management in a Workstation Cluster. </title> <booktitle> In Proc. of the 15th ACM Symp. on Operating Systems Principles (SOSP'95) (Dec. </booktitle> <year> 1995), </year> <pages> pp. 201-212. </pages>
Reference-contexts: A still simpler service has been proposed under the name of Network RAM, Global Memory System, <ref> [6] </ref> and similar terms. This kind of service would provide a scalable and fast VM backing store and file cache for NOW computations by using the RAM of idle nodes paged over the SAN.
Reference: [7] <author> FLOYD, S., AND JACOBSON, V. </author> <title> The synchronization of periodic routing messages. </title> <journal> IEEE/ACM Transactions of Networking 2, </journal> <month> 2 (Apr. </month> <year> 1994), </year> <pages> 122-136. </pages>
Reference-contexts: Third, we kept in mind that it is often necessary to introduce randomness into a system to prevent unwanted synchronization and large bursts of activity <ref> [7] </ref>.
Reference: [8] <author> FOX, A., GRIBBLE, S., CHAWATHE, Y., BREWER, E. A., AND GAUTHIER, P. </author> <title> Extensible cluster-based scalable network services. </title> <booktitle> In Proceedings of the 16th ACM Symposium on Operating Systems Principles (SOSP-16) (Octo-ber 1997). </booktitle>
Reference-contexts: Furthermore, we wanted to embrace the concept of soft state, hints, and best-effort service, where the maintenance of data is considered a performance optimization rather than a necessity for the sake of correctness. These approaches allow schemes to provide consistency and replication and fault tolerance without enormous headaches <ref> [8] </ref>. Second, we employed the end-to-end argument [18] to weed out potential features that the name server could offer, but that might be more appropriately provided by clients of the name service.
Reference: [9] <author> HARTMAN, J. H., AND OUSTERHOUT, J. K. </author> <title> The Zebra striped network file system. </title> <journal> ACM Transactions on Computer Systems 13, </journal> <month> 3 (Aug. </month> <year> 1995), </year> <pages> 274-310. </pages>
Reference-contexts: These buckets are then striped across the available servers, so that each server is hosting zero or more buckets at every time. This approach is similar to that used in RAID [5], Zebra <ref> [9] </ref>, and xFS.
Reference: [10] <author> HENNESSY, J., AND PATTERSON, D. </author> <title> Computer Architecture: A Quantitative Approach. </title> <publisher> Morgan Kaufmann Publishers, Inc, </publisher> <address> San Francisco, CA, </address> <year> 1996. </year>
Reference-contexts: With these semantics, atomic read-modify-write operations can be achieved by looking up a binding and noting its version, then making a change to the binding that is conditional on the binding not having changed. This is similar to the load linked and store conditional operations in some RISC ISAs <ref> [10] </ref>. * TTL: To provide for automatic pruning of the binding database, bindings should have time-to-live attributes, with infinite lifetimes as an option. * Prefixes: For user and programmer convenience, the name service should provide a default prefix for all name operations, much like the UNIX current working directory.
Reference: [11] <author> HOWES, T., AND SMITH, M. LDAP: </author> <title> Programming Directory-Enabled Applications with Lightweight Directory Access Protocol. </title> <publisher> Macmillan, </publisher> <year> 1997. </year>
Reference-contexts: More complex services, typically referred to as directory services, provide more complex operations, including sophisticated queries based on the attributes of entries. Traditional name and directory services, including DNS [15], X.500 [4], LDAP [20] <ref> [11] </ref>, Clearinghouse [16], Grapevine [3], and GNS [13], have been tuned to the needs of applications operating in the Internet of the 1980's. These applications consisted largely of electronic mail, file transfer, and remote login.
Reference: [12] <author> LAMPSON, B. W. </author> <title> Hints for computer system design. </title> <booktitle> In Proceedings of the 9th ACM Symposium on Operating Systems Principles (SOSP) (1983), </booktitle> <pages> pp. 33-48. </pages>
Reference-contexts: First, we wanted to keep the design as simple as possible, but no simpler, in the hopes that this would lead to an implementation that was easy to understand, use, debug, maintain, and reason about <ref> [12] </ref>. In a related spirit, we wanted to trade inefficiency in rare or pathological cases to gain simplicity and speed in the common cases.
Reference: [13] <author> LAMPSON, B. W. </author> <title> Designing a global name service. </title> <booktitle> In Fifth ACM Symposium on Principles of Distributed Computing, </booktitle> <address> Calgary, Alberta (Aug. 1986), </address> <publisher> ACM. </publisher>
Reference-contexts: More complex services, typically referred to as directory services, provide more complex operations, including sophisticated queries based on the attributes of entries. Traditional name and directory services, including DNS [15], X.500 [4], LDAP [20] [11], Clearinghouse [16], Grapevine [3], and GNS <ref> [13] </ref>, have been tuned to the needs of applications operating in the Internet of the 1980's. These applications consisted largely of electronic mail, file transfer, and remote login.
Reference: [14] <author> LISKOV, B., GHEMAWAT, S., GRUBER, R., JOHNSON, P., SHRIRA, L., AND WILLIAMS, M. </author> <title> Replication in the Harp file system. </title> <booktitle> In Proceedings of 13th ACM Symposium on Operating Systems Principles (Oct. 1991), Association for Computing Machinery SIGOPS, </booktitle> <pages> pp. 226-38. </pages>
Reference-contexts: All other incarnations of this bucket on other servers, be they partial or complete, exist merely for availability in the case of a server failure and are likely to be out of date. This approach to replication is much like that adopted in the Harp File System <ref> [14] </ref>, which creates replicas in nonvolatile RAM over the network to avoid disk accesses. 3.3.4 The Storage Hierarchy Ultimately, to provide durable storage for buckets, servers periodically checkpoint the contents of buckets to disk. 1 This is the bottom of the three-layer hierarchy of storage formed by primary buckets in RAM,
Reference: [15] <author> MOCKAPETRIS, P. V., AND DUNLAP, K. J. </author> <title> Development of the Domain Name System. </title> <note> 1988 ACM SIGCOMM Symposium (August 16-19, </note> <year> 1988). </year>
Reference-contexts: More complex services, typically referred to as directory services, provide more complex operations, including sophisticated queries based on the attributes of entries. Traditional name and directory services, including DNS <ref> [15] </ref>, X.500 [4], LDAP [20] [11], Clearinghouse [16], Grapevine [3], and GNS [13], have been tuned to the needs of applications operating in the Internet of the 1980's. These applications consisted largely of electronic mail, file transfer, and remote login.
Reference: [16] <author> OPPEN, D., AND DALAL, Y. </author> <title> The Clearinghouse: A decentralized agent for locating named objects in a distributed environment. </title> <journal> ACM Transactions on Office Information Systems 1, </journal> <month> 3 (July </month> <year> 1983), </year> <pages> 230-253. </pages>
Reference-contexts: More complex services, typically referred to as directory services, provide more complex operations, including sophisticated queries based on the attributes of entries. Traditional name and directory services, including DNS [15], X.500 [4], LDAP [20] [11], Clearinghouse <ref> [16] </ref>, Grapevine [3], and GNS [13], have been tuned to the needs of applications operating in the Internet of the 1980's. These applications consisted largely of electronic mail, file transfer, and remote login.
Reference: [17] <author> ROSENBLUM, M., AND OUSTERHOUT, J. K. </author> <title> The design and implementation of a logstructured file system. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Operating Systems Principles (1991) (Pacific Grove CA (USA), Oct. 1991), Operating Systems Review, </booktitle> <pages> pp. 1-15. </pages>
Reference-contexts: When making changes to the database of bindings, the servers do not wait to flush the changes out to disk, but rather respond to the client immediately. This technique is applied by all sophisticated file systems, since disk writes are a fundamental performance limit <ref> [17] </ref>. 3.3.3 Replication For those clients that desire high availability for bindings, VNS provides an aggressive replication scheme. First, servers occasionally choose buckets for replication and send them in their entirety to other servers, where they are kept in RAM.
Reference: [18] <author> SALTZER, J., REED, D., AND CLARK, D. </author> <title> End-to-end arguments in system design. </title> <journal> ACM Transactions on Computer Systems 2, </journal> <month> 4 </month> <year> (1984). </year>
Reference-contexts: These approaches allow schemes to provide consistency and replication and fault tolerance without enormous headaches [8]. Second, we employed the end-to-end argument <ref> [18] </ref> to weed out potential features that the name server could offer, but that might be more appropriately provided by clients of the name service.
Reference: [19] <author> SAVAGE, S., AND WILKES, J. </author> <title> AFRAID A frequently redundant array of independent disks. </title> <booktitle> In Proceedings of the 1996 USENIX Technical Conference (Jan. </booktitle> <year> 1996), </year> <pages> pp. 27-39. </pages>
Reference-contexts: There is no guarantee that when a client request completes that it will survive all faults. However, we guarantee that if it survives for a short period, it is virtually guaranteed to survive nearly all types of faults. This is much like the approach adopted in AFRAID <ref> [19] </ref>, where a the availability guarantees afforded by redundancy in RAID are relaxed in order to improve performance. As described above, the database is divided into disjoint buckets. These buckets are in turn owned by servers.
Reference: [20] <author> YEONG, W., HOWES, T., AND HARDCASTLE-KILLE, S. </author> <title> X.500 lightweight directory access protocol. Request for Comments (Experimental) RFC 1487, </title> <institution> Internet Engineering Task Force, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: More complex services, typically referred to as directory services, provide more complex operations, including sophisticated queries based on the attributes of entries. Traditional name and directory services, including DNS [15], X.500 [4], LDAP <ref> [20] </ref> [11], Clearinghouse [16], Grapevine [3], and GNS [13], have been tuned to the needs of applications operating in the Internet of the 1980's. These applications consisted largely of electronic mail, file transfer, and remote login.
References-found: 20

