URL: http://ai.eecs.umich.edu/soar/docs/manuals/advanced-manual.ps.Z
Refering-URL: http://ai.eecs.umich.edu/soar/docs.html
Root-URL: http://www.eecs.umich.edu
Title: The Soar Advanced Applications Manual Version 7 Edition 1  
Author: Clare Bates Congdon Karl B. Schwamb C. B. Congdon and K. B. Schwamb. 
Date: November 7, 1995  
Note: Draft of:  Draft. Do not quote or distribute. Errors may be reported to Clare Congdon (congdon@eecs.umich.edu) Copyright c 1995,  
Affiliation: Electrical Engineering and Computer Science Department University of Michigan  Information Sciences Institute University of Southern California  
Abstract: This research was supported under contract N00014-92-K-2015 from the Advanced Systems Technology Office of the Advanced Research Projects Agency and the Naval Research Laboratory, and contract N66001-95-C-6013 from the Advanced Systems Technology Office of the Advanced Research Projects Agency and the Naval Command and Ocean Surveillance Center, RDT&E division. 
Abstract-found: 1
Intro-found: 1
Reference: [Ousterhout, 1994] <author> J. K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: USING THIS MANUAL 3 The Soar Development Environment Manual describes the Soar Development Environment (SDE), which is an Emacs interface that simplifies many of the repetitive tasks involved in writing a Soar program. See Section 1.1.2 for information about obtaining Soar documentation. The book Tcl and the Tk Toolkit <ref> [Ousterhout, 1994] </ref> is considered by many to be the primary reference on using Tcl and Tk, although many find this book difficult to navigate. <p> The user interface includes all the commands described in Chapter 6 of The Soar User's Manual and in Chapter 6 of this document. The user interface is implemented in Tcl, which is a simple command interpreter <ref> [Ousterhout, 1994] </ref>. Tcl includes familiar programming constructs such as variables, conditionals, iteration, and procedures. Tcl also provides a convenient mechanism for the addition of a variety of extensions to Soar, such as graphical interfaces and simulations. Tcl also supports external additions via Interprocess Communication (IPC). <p> The exact rules on the interaction between quoting and variable substitution are described in Chapter 3 of <ref> [Ousterhout, 1994] </ref>. The rules follow conventions used by other shell interpreters, such as the Unix Bourne shell (sh) and C shell (csh), rather than high-level programming languages. In short, a string surrounded by curly braces is treated as a literal and a string surrounded by double quotes allows substitution. <p> E.g., Bob's example, where he had comments in the middle of a switch. But again, I don't know the rules yet. 3.1.3 Where to get additional help with Tcl The book Tcl and the Tk Toolkit <ref> [Ousterhout, 1994] </ref> is considered by many to be the primary reference on using Tcl and Tk, although some find this book to be difficult to navigate. <p> For a complete treatment of the process of adding C code to a Tcl-based program, such as Soar, we refer the user to the book Tcl and the Tk Toolkit <ref> [Ousterhout, 1994] </ref>. One important aspect to understand when writing C additions to Soar is that Tcl and its extensions center on "interpreters", while Soar centers on "agents". <p> The procedure usually follows the standard conventions for Tcl extensions (see <ref> [Ousterhout, 1994] </ref>). 3.4. INTERPROCESS COMMUNICATION TO EXTERNAL PROCESSES 37 See the Tcl Archive on the World Wide Web (WWW) for information on the available extensions (http://www.isi.edu/soar/tcl). As of this writing there are over 400 extensions available and almost all are provided free of charge. <p> There are several interprocess communication (IPC) mechanisms that can be used in Soar. This approach is recommended by Ousterhout <ref> [Ousterhout, 1994] </ref> for Tcl-based applications since it promotes a more modular and distributed software development model. 3.4.1 Overview of Interprocess Communication (IPC) Developers may wish to use other processes to avoid putting all desired functionality into a single process. <p> Here is an example of a procedure to compute the square of a number: proc square-it -num - return [expr $num * $num] 61 62 CHAPTER 5. OTHER ADDITIONS TO SOAR PROGRAMS - For the full details on defining and using procedures see <ref> [Ousterhout, 1994] </ref>. 5.1.2 Adding user interface commands in C This section describes how to use C to add your own Tcl commands to an interpreter. The following method follows standard Tcl conventions [Ousterhout, 1994]. <p> OTHER ADDITIONS TO SOAR PROGRAMS - For the full details on defining and using procedures see <ref> [Ousterhout, 1994] </ref>. 5.1.2 Adding user interface commands in C This section describes how to use C to add your own Tcl commands to an interpreter. The following method follows standard Tcl conventions [Ousterhout, 1994]. This section assumes a basic familiarity with the routines used in the front-end of a compiler, such as a lexical analyzer. 1 Each Tcl command has a corresponding C function to handle it. Commands should be installed at interpreter initialization time via calls to Tcl CreateCommand. <p> The book Tcl and the Tk Toolkit provides a good overview of how to use Tk commands to create GUI's <ref> [Ousterhout, 1994] </ref>. Practical Programming in Tcl and Tk [Welch, 1995] also includes tutorial material on the version of Tk used in Soar 7.0 (Tk 4.0).
Reference: [Stevens, 1990] <author> W. R. Stevens. </author> <title> Unix Network Programming. </title> <publisher> Prentice-Hall, </publisher> <address> Engle-wood Cliffs, NJ, </address> <year> 1990. </year>
Reference-contexts: The topic of interprocess communication (IPC) and its various approaches have been studied extensively. Many books have been written on IPC using C and the reader is encouraged to consult texts such as <ref> [Stevens, 1990] </ref> and [Stevens, 1992] if implementing IPC in C. An IPC package for BSD sockets is available in the Soar Software Archive under the name MONGSU [reference?]. The remainder of this section addresses the IPC support provided by Tcl and the Tk extension.
Reference: [Stevens, 1992] <author> W. R. Stevens. </author> <title> Advanced Programming in the UNIX Environment. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1992. </year>
Reference-contexts: The topic of interprocess communication (IPC) and its various approaches have been studied extensively. Many books have been written on IPC using C and the reader is encouraged to consult texts such as [Stevens, 1990] and <ref> [Stevens, 1992] </ref> if implementing IPC in C. An IPC package for BSD sockets is available in the Soar Software Archive under the name MONGSU [reference?]. The remainder of this section addresses the IPC support provided by Tcl and the Tk extension.

References-found: 3

