URL: http://www.isi.edu/isd/LOOM/papers/yen/ieee91.ps
Refering-URL: http://www.isi.edu/isd/LOOM/papers/LOOM-PAPERS.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Yen@CSSUN.TAMU.EDU  
Phone: (409) 845-5466  
Title: Using Polymorphism to Improve Expert Systems Maintainability  
Author: John Yen, MEMBER, IEEE Hsiao-Lei Juang Robert MacGregor 
Address: College Station, TX 77843  4676 Admiralty Way, Marina del Rey, CA 90292  
Affiliation: Department of Computer Science Texas A&M University  USC Information Sciences Institute  
Abstract: Appeared in IEEE Expert, Vol. 6, No. 2, pp. 48 - 55, April, 1991. The research described in this paper was supported by EngineeringExcellence Fund at Texas A&M University. Part of the researchwas conductedat USC/InformationSciences Institute and was supported by DARPA under Contract No. MDA903-87-C-0641. Views and conclusions contained in this 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Soloway, J. Bachant, and K. Jensen, </author> <title> "Assessing the maintainability of xcon-in-rime: Coping with the problems of a very large rule-base," </title> <booktitle> In Proceedings of AAAI-87, </booktitle> <pages> pp. 824-829, </pages> <address> Seattle, Washington, </address> <month> August </month> <year> 1987. </year> <month> 24 </month>
Reference-contexts: the Development of Consistent and Homogeneous Knowledge Bases When a programmer wants to augment an existing body of code in a software maintenance task, the problem that he/she sometimes encounters is in knowing how and where to add the augmentation so as not to disturb the rest of the code <ref> [1] </ref>. Maintaining the consistency and homogeneity of knowledge therefore is very important when modifying the system. As we have discussed in Section A, the automatic classification capability of CLASP's knowledge representation language (LOOM) assists the user in maintaining a consistent class taxonomy.
Reference: [2] <author> G. S. Blair, J. J. Gallagher, and J. Malik, </author> <title> "Genericity vs inheritance vs delegation vs conformance vs ...," Journal of Object-Oriented Programming, </title> <journal> vol. </journal> <volume> 2, no. 3, </volume> <pages> pp. 11-17, </pages> <month> September/October </month> <year> 1989. </year>
Reference: [3] <author> J. Yen, R. Neches, and R. MacGregor, "CLASP: </author> <title> Integrating term subsumption systems and production systems," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> vol. 3, no. 1, </volume> , <month> March </month> <year> 1991. </year>
Reference-contexts: CONCRETE is integrated with LOOM's classifier for performing pattern matching based on the semantics of classes <ref> [3] </ref>. We will illustrate this using the method M1 in Figure 4.
Reference: [4] <author> R. M. MacGregor, </author> <title> "A deductive pattern matcher," </title> <booktitle> In Proceedings of AAAI-88, </booktitle> <year> 1988. </year>
Reference-contexts: More importantly, we have developed an algorithm for computing a well-defined specificity relation among CLASP's methods for performing specificity-based method dispatching. A. Using a Term Subsumption Language for Defining Classes CLASP offers a term subsumption language (LOOM <ref> [4] </ref>) for defining characteristics of classes and various relationships between them. <p> A further discussion about the LOOM system can be found in <ref> [4] </ref>. The major strength of term subsumption systems is their reasoning capabilities offered by a classifier. The classifier is a special purpose reasoner that automatically infers and maintains a consistent and accurate taxonomic lattice of logical subsumption relations between objects in the knowledge base.
Reference: [5] <author> P. F. Patel-Schneider, B. Owsnicki-Klewe, A. Kobsa, N. Guarino, R. MacGregor, W. S. Mark, D. McGuinness, B. Nebel, A. Schmiedel, and J. Yen, </author> <title> "Term subsumption languages in knowledge representation," </title> <journal> AI Magazine, </journal> <volume> vol. 11, no. 2, </volume> <pages> pp. 16-23, </pages> <year> 1990. </year>
Reference-contexts: Term subsumption languages refers to knowledge representation formalisms that employ a formal language, with a formal semantics, for the definition of terms (more commonly referred to as concept or classes), and that deduce whether one term subsumes (is more general than) another <ref> [5] </ref>. These formalisms generally descend from the ideas presented in KL-ONE [6]. Term sub-sumption languages are a generalization of both semantic networks and frames because the languages have well-defined semantics, which is often missing from frames and semantic networks.
Reference: [6] <author> R. Brachman and J. Schmolze, </author> <title> "An overview of the KL-ONE knowledge representation system," </title> <journal> Cognitive Science, </journal> <volume> vol. 9, no. 2, </volume> <pages> pp. 171-216, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: These formalisms generally descend from the ideas presented in KL-ONE <ref> [6] </ref>. Term sub-sumption languages are a generalization of both semantic networks and frames because the languages have well-defined semantics, which is often missing from frames and semantic networks. A term subsumption language enables a knowledge engineer to specify defining characteristics of concepts and relations.
Reference: [7] <author> J. Yen, </author> <title> "A principled approach to reasoning about the specificity of rules," </title> <booktitle> In Proc. National Conf. on Artificial Intelligence, </booktitle> <pages> pp. 701-707, </pages> <address> Boston, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Our approach for testing the specificity of methods is based on a theorem in <ref> [7] </ref> that states the sufficient and necessary condition for a conjunctive pattern (i.e., a conjuction of non-negated literal) to be more specific than another one: Suppose p 2 and p 1 are two conjunctive patterns, p 2 is more specific than p 1 if and only if there exists a substitution <p> Based on the theorem, we have shown that an algorithm for testing the specificity of rules needs to search for a desired mapping between variables of two rules <ref> [7] </ref>. The specificity test between methods introduce one additional constraint to the mapping: the arguments of one method has to map to corresponding arguments in another method. <p> We briefly describe each step below. A more detailed discussion about steps 1, 2 and 4, which are also used for testing the specificity of rules, can be found in <ref> [7] </ref>. (defconcept Person (:primitive)) (defconcept Male (:and Person :primitive)) (defconcept Female (:and Person :primitive)) (defconcept College-graduate (:and Person :primitive)) (defconcept Female-College-graduate (:and Female College-graduate)) (defrelation Child (:and :primitive (:domain Person) (:range Person))) (defrelation Daughter (:and Child (:range Female))) (defconcept Father (:and Male (:at-least 1 Child ))) (defconcept Successful-Father (:and Father (:all
Reference: [8] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin, </author> <title> Programming Expert Systems in OPS5: An Introduction to Rule-Based Programming, </title> <publisher> Addison-Wesley, </publisher> <year> 1985. </year>
Reference-contexts: An Example We will use a simple problem, the monkey-bananas problem in <ref> [8] </ref>, to illustrate how the integration of object-oriented programming and rule-based reasoning in CLASP improves the maintainability of expert systems. <p> A. Improving the Organization and the Reusability of Rules It is very difficult to locate relevant pieces of knowledge for modification unless the knowledge base is well-organized. In OPS5-like systems, users often use context elements to cluster rules <ref> [8] </ref>. CLASP's rule base is more modular than that of conventional rule-based systems for two major reasons. First, the function of a production rule is explicitly represented by an operator. Second, operator-triggering rules are separated from operator-implementation rules.
Reference: [9] <author> M. Stefik and D. G. Bobrow, </author> <title> "Object-oriented programming: Themes and variations," </title> <journal> AI Magazine, </journal> <volume> vol. 6, no. 4, </volume> <pages> pp. 40-62, </pages> <year> 1986. </year>
Reference-contexts: In summary, CLASP's approach improves the predictability of rules by using explicit control knowledge and by providing feedback about the subsumption relationships between methods to the programmers. IV. Related Work Loops <ref> [9] </ref> is one of the earliest efforts in integrating rule-based paradigm and object-oriented programming. Rules in Loops are grouped into RuleSets, which can be invoked by message sending. The information for controlling the firing of rules within a RuleSet is also explicitly specified.
Reference: [10] <author> R. Fikes and T. Kehler, </author> <title> "The role of frame-based representation in reasoning," </title> <journal> Communication of the ACM, </journal> <volume> vol. 28, no. 9, </volume> , <month> September </month> <year> 1985. </year>
Reference-contexts: Rules in Loops are grouped into RuleSets, which can be invoked by message sending. The information for controlling the firing of rules within a RuleSet is also explicitly specified. Rules in KEE can also be grouped into rule classes, which can be invoked by methods or demons <ref> [10] </ref>. Therefore, rules in Loops and KEE could play a role similar to that of CLASP's methods. Our approach differs, however, 22 from their approaches in three important ways. First, the right hand side action of a rule is strictly invoking a generic function.
Reference: [11] <author> P. S. Rosenbloom, J. E. Laird, J. McDermott, A. Newell, and E. Orciuch, "R1-soar: </author> <title> An experiment in knowledge-intensive programming in a problem-solving architecture," </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> vol. PAMI-7, no. 5, </volume> <pages> pp. 561-569, </pages> <month> September </month> <year> 1985. </year> <month> 25 </month>
Reference-contexts: Thus, there is no way to hide information about an instance from other objects. Our future research includes incorporating encapsulation into CLASP's framework, and empirical evaluation of the maintainability of medium to large size expert systems developed using our approach. We are currently reimplementing part of R1 (R1-Soar <ref> [11] </ref>) for a further assessment on the maintainability of expert systems developed using CLASP. 23 VI. Summary In this paper, we have described an approach to address the maintenance issue of large expert systems by incorporating the notion of polymorphism in object-oriented programming into the rule-based programming paradigm.
References-found: 11

