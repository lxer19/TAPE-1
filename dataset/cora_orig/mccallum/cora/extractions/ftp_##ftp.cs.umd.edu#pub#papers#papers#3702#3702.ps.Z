URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3702/3702.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: godfrey@arl.mil  jarek@cs.umd.edu  
Phone: 1  
Title: Intensional Query Optimization  
Author: P. Godfrey ; J. Gryz 
Address: College Park College Park, Maryland, USA  Adelphi, Maryland, USA  
Affiliation: Department of Computer Science at the University of Maryland at  Laboratory  
Note: September 1996 IQO|Godfrey Gryz p. 1 of 21  and 2 U.S. Army Research  
Abstract: We have introduced a new query optimization framework called intensional query optimization (IQO), which enables existing optimization techniques to be applied to queries that use views. In particular, we consider that view definitions may employ unions. Advanced database technologies and applications|such as federation and mediation over heterogeneous database sources|lead to such complex view definitions, and to the need to handle complex, expensive queries. Query rewriting techniques have been proposed which exploit semantic query caches, materialized views, and semantic knowledge about the database domain to optimize query evaluation. These can augment syntactic optimization to reduce evaluation costs further. Such techniques include semantic query caching, query folding, and semantic query optimization. However, most proposed rewrite techniques ignore views in queries; that is, the views are considered as other tables. The IQO framework enables rewrites to be applied to various expansions of the query, even when no such rewrite is applicable directly to the query itself. With IQO, we optimize the query tree, not just the query. The IQO framework introduces the notion of a discounted query, which is a query with some of its expansions "separated out", so the query can be recast into pieces that can be optimized. For this approach to be effective, the sum of the costs of evaluating each piece must be less than the cost of evaluating the query itself. This includes the discounted query. We develop an evaluation plan for discounted queries that is generally more efficient than the evaluation of the queries themselves.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> U. S. Chakravarthy, J. Grant, and J. Minker. </author> <title> Logic based approach to semantic query optimization. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(2) </volume> <pages> 162-207, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: These methods include semantic query caching (SQC) [2, 3, 12], query folding (QF) [14, 18, 15], and semantic query optimization (SQO) <ref> [1, 16, 20] </ref>. These are primarily suitable for distributed and federated databases, although they (in particular, SQO) can also be applied in centralized databases. The benefit of SQC lies in saving a part (or all) of query processing by using the cached results of previous queries. <p> j m; 1 i n, this formula reduces to: This function is plotted in Figure 4 for 2-way and 5-way joins. 7 Conclusions Intensional query optimization provides framework to apply effective semantic optimization such as semantic query caching [2, 3, 12], query folding [14, 18, 15], and semantic query optimization <ref> [1, 16, 20] </ref>, to queries in realistic domains in which views may be complex and may use unions. September 1996 IQO|Godfrey & Gryz p. 19 of 21 The concept of a discounted query|which is the query with some of its expansions (unfoldings) "removed"|enables this.
Reference: [2] <author> C. M. Chen and N. Roussopoulos. </author> <title> The implementation and performance evaluation of the ADMS query optimizer: Integrating query result caching and matching. </title> <booktitle> In Proc. of the 4 th International Conference on Extending Database Technology, </booktitle> <address> Cambridge, UK, </address> <year> 1994. </year>
Reference-contexts: Section 7 concludes with issues and future work. 2 Background 2.1 Optimization via Semantics Rewrite techniques which exploit semantic information about the database and query can improve the efficiency of query evaluation. These methods include semantic query caching (SQC) <ref> [2, 3, 12] </ref>, query folding (QF) [14, 18, 15], and semantic query optimization (SQO) [1, 16, 20]. These are primarily suitable for distributed and federated databases, although they (in particular, SQO) can also be applied in centralized databases. <p> ) = p (F ) (= 1 p (T )), for 1 j m; 1 i n, this formula reduces to: This function is plotted in Figure 4 for 2-way and 5-way joins. 7 Conclusions Intensional query optimization provides framework to apply effective semantic optimization such as semantic query caching <ref> [2, 3, 12] </ref>, query folding [14, 18, 15], and semantic query optimization [1, 16, 20], to queries in realistic domains in which views may be complex and may use unions.
Reference: [3] <author> S. Dar, M. Franklin, B. Jonsson, D. Srivastava, and M. Tan. </author> <title> Semantic data caching and replacement. </title> <booktitle> In Proceedings of the 22nd International Conference on Very Large Data Bases (VLDB), </booktitle> <address> Bombay, India, </address> <month> Sept. </month> <year> 1996. </year> <note> To appear. URL: http://www.cs.umd.edu/projects/dimsum/papers/semantic caching.ps.gz </note>
Reference-contexts: Section 7 concludes with issues and future work. 2 Background 2.1 Optimization via Semantics Rewrite techniques which exploit semantic information about the database and query can improve the efficiency of query evaluation. These methods include semantic query caching (SQC) <ref> [2, 3, 12] </ref>, query folding (QF) [14, 18, 15], and semantic query optimization (SQO) [1, 16, 20]. These are primarily suitable for distributed and federated databases, although they (in particular, SQO) can also be applied in centralized databases. <p> ) = p (F ) (= 1 p (T )), for 1 j m; 1 i n, this formula reduces to: This function is plotted in Figure 4 for 2-way and 5-way joins. 7 Conclusions Intensional query optimization provides framework to apply effective semantic optimization such as semantic query caching <ref> [2, 3, 12] </ref>, query folding [14, 18, 15], and semantic query optimization [1, 16, 20], to queries in realistic domains in which views may be complex and may use unions.
Reference: [4] <author> T. Gaasterland, P. Godfrey, and J. Minker. </author> <title> An overview of cooperative answering. </title> <journal> Journal of Intelligent Information Systems, </journal> <volume> 1(2) </volume> <pages> 123-157, </pages> <year> 1992. </year> <type> Invited paper. </type>
Reference: [5] <author> T. Gaasterland, P. Godfrey, and J. Minker. </author> <title> An overview of cooperative answering. </title> <booktitle> Studies in Logic and Computation 3, chapter 1, </booktitle> <pages> pages 1-40. </pages> <publisher> Clarendon Press, Oxford, </publisher> <year> 1994. </year> <note> Appears orginally as [4]. URL: http://karna.cs.umd.edu:3264/papers/GGM92:survey/GGM92:survey.html September 1996 IQO|Godfrey & Gryz p. 20 of 21 </note>
Reference-contexts: SQO uses semantic knowledge in the form of integrity constraints to reformulate a query into a semantically equivalent query that can be evaluated more efficiently. The ultimate win in SQO is the discovery that a query is a misconception <ref> [7, 5, 10] </ref>; that is, it is subsumed by an integrity constraint, hence cannot return any answers. In such cases, the query does not need be evaluated at all. <p> This is the cost C in all the above cost equations. These costs can be non-trivial. However, efficient techniques for such|in particular, identifying the null unfoldings of a query|have been explored [9], and developed within the context of the Carmin project, a cooperative database system <ref> [5, 6, 10] </ref>. For edification of the reader, we briefly sketch an approach to finding null unfoldings.
Reference: [6] <author> T. Gaasterland, P. Godfrey, J. Minker, and L. Novik. </author> <title> A cooperative answering system. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Proceedings of the Logic Programming and Automated Reasoning Conference, Lecture Notes in Artificial Intelligence 624, </booktitle> <pages> pages 478-480. </pages> <publisher> Springer-Verlag, </publisher> <address> St. Peters-burg, Russia, </address> <month> July </month> <year> 1992. </year> <note> URL: http://karna.cs.umd.edu:3264/papers/GGMN92:lpar/GGMN92:lpar.html </note>
Reference-contexts: This is the cost C in all the above cost equations. These costs can be non-trivial. However, efficient techniques for such|in particular, identifying the null unfoldings of a query|have been explored [9], and developed within the context of the Carmin project, a cooperative database system <ref> [5, 6, 10] </ref>. For edification of the reader, we briefly sketch an approach to finding null unfoldings.
Reference: [7] <author> A. Gal and J. Minker. </author> <title> Informative and cooperative answers in databases using integrity constraints. </title> <address> pages 277-300. </address> <publisher> North Holland, </publisher> <year> 1988. </year>
Reference-contexts: SQO uses semantic knowledge in the form of integrity constraints to reformulate a query into a semantically equivalent query that can be evaluated more efficiently. The ultimate win in SQO is the discovery that a query is a misconception <ref> [7, 5, 10] </ref>; that is, it is subsumed by an integrity constraint, hence cannot return any answers. In such cases, the query does not need be evaluated at all.
Reference: [8] <author> P. Godfrey and J. Gryz. </author> <title> A framework for intensional query optimization. </title> <editor> In F. G. Dim-itri Boulanger, Ultrich Geske and D. Seipel, editors, </editor> <booktitle> Proceedings of the Workshop on Deductive Databases and Logic Programming, held in conjunction with the Joint International Conference and Symposium on Logic Programming (JICSLP'96), GMD-Studien Nr. </booktitle> <volume> 295, </volume> <pages> pages 57-68, </pages> <address> Bonn, Germany, </address> <month> Sept. </month> <year> 1996. </year> <note> GMD-Forschungszentrum. URL: http://karna.cs.umd.edu:3264/papers/gg96:framework/paper.html </note>
Reference-contexts: 1 Introduction We have introduced a new query optimization framework called intensional query optimization (IQO) <ref> [8] </ref>, which enables existing optimization techniques to be applied to queries that use views. In particular, the framework allows for view definitions that employ unions.
Reference: [9] <author> P. Godfrey, J. Gryz, and J. Minker. </author> <title> Semantic query optimization for bottom-up evaluation. </title> <editor> In Z. W. Ras and M. Michalewicz, editors, </editor> <booktitle> Foundations of Intelligent Systems: Proceedings of the 9th International Symposium on Methodologies for Intelligent Systems, Lecture Notes in Artificial Intelligence 1079, </booktitle> <pages> pages 561-571, </pages> <address> Berlin, June 1996. </address> <publisher> Springer. </publisher> <address> URL: http://karna.cs.umd.edu:3264/papers/GGM95:optimization/paper.html </address>
Reference-contexts: This is the cost C in all the above cost equations. These costs can be non-trivial. However, efficient techniques for such|in particular, identifying the null unfoldings of a query|have been explored <ref> [9] </ref>, and developed within the context of the Carmin project, a cooperative database system [5, 6, 10]. For edification of the reader, we briefly sketch an approach to finding null unfoldings. <p> We shall demonstrate that discounted queries can be, in general, evaluated bottom-up less expensively than their corresponding queries <ref> [9] </ref>. We briefly outline two basic approaches (described in more detail in [9]) for a bottom-up dis eval. One approach, sketched in the example of Section 3, is to rewrite a discounted query into a collection of conjunctive queries, for which evaluation strategies already exist [9]. <p> We shall demonstrate that discounted queries can be, in general, evaluated bottom-up less expensively than their corresponding queries <ref> [9] </ref>. We briefly outline two basic approaches (described in more detail in [9]) for a bottom-up dis eval. One approach, sketched in the example of Section 3, is to rewrite a discounted query into a collection of conjunctive queries, for which evaluation strategies already exist [9]. <p> expensively than their corresponding queries <ref> [9] </ref>. We briefly outline two basic approaches (described in more detail in [9]) for a bottom-up dis eval. One approach, sketched in the example of Section 3, is to rewrite a discounted query into a collection of conjunctive queries, for which evaluation strategies already exist [9].
Reference: [10] <author> P. Godfrey, J. Minker, and L. Novik. </author> <title> An architecture for a cooperative database system. </title> <editor> In W. Litwin and T. Risch, editors, </editor> <booktitle> Proceedings of the First International Conference on Applications of Databases, Lecture Notes in Computer Science 819, </booktitle> <pages> pages 3-24. </pages> <publisher> Springer Verlag, </publisher> <address> Vadstena, Sweden, </address> <month> June </month> <year> 1994. </year> <note> URL: http://karna.cs.umd.edu:3264/papers/GMN94:architecture/gmn94.html </note>
Reference-contexts: SQO uses semantic knowledge in the form of integrity constraints to reformulate a query into a semantically equivalent query that can be evaluated more efficiently. The ultimate win in SQO is the discovery that a query is a misconception <ref> [7, 5, 10] </ref>; that is, it is subsumed by an integrity constraint, hence cannot return any answers. In such cases, the query does not need be evaluated at all. <p> This is the cost C in all the above cost equations. These costs can be non-trivial. However, efficient techniques for such|in particular, identifying the null unfoldings of a query|have been explored [9], and developed within the context of the Carmin project, a cooperative database system <ref> [5, 6, 10] </ref>. For edification of the reader, we briefly sketch an approach to finding null unfoldings.
Reference: [11] <author> J. Grant and J. Minker. </author> <title> On optimizing the evaluation of a set of expressions. </title> <journal> International Journal of Computer and Information Sciences, </journal> <volume> 11 </volume> <pages> 179-191, </pages> <year> 1982. </year>
Reference-contexts: It must be that discounted queries can be evaluated less expensively than the corresponding query, else this approach will not work. We briefly discuss strategies for dis eval/2 in the next section. If we have multiple query optimization strategies <ref> [11, 19] </ref> available|that is, strategies which exploit similarities between queries to be evaluated in batch in order to optimize evaluation|we can weaken this cost equation.
Reference: [12] <author> A. M. Keller and J. Basu. </author> <title> A predicate-based caching scheme for client-server database architectures. </title> <journal> The VLDB Journal, </journal> <volume> 5(2) </volume> <pages> 35-47, </pages> <month> Apr. </month> <year> 1996. </year> <note> URL: ftp://ftp.cs.concordia.ca/pub/laks/papers/pods91.ps.gz </note>
Reference-contexts: Section 7 concludes with issues and future work. 2 Background 2.1 Optimization via Semantics Rewrite techniques which exploit semantic information about the database and query can improve the efficiency of query evaluation. These methods include semantic query caching (SQC) <ref> [2, 3, 12] </ref>, query folding (QF) [14, 18, 15], and semantic query optimization (SQO) [1, 16, 20]. These are primarily suitable for distributed and federated databases, although they (in particular, SQO) can also be applied in centralized databases. <p> ) = p (F ) (= 1 p (T )), for 1 j m; 1 i n, this formula reduces to: This function is plotted in Figure 4 for 2-way and 5-way joins. 7 Conclusions Intensional query optimization provides framework to apply effective semantic optimization such as semantic query caching <ref> [2, 3, 12] </ref>, query folding [14, 18, 15], and semantic query optimization [1, 16, 20], to queries in realistic domains in which views may be complex and may use unions.
Reference: [13] <author> S. Lee, L.J.Henschen, and G. Qadah. </author> <title> Semantic query reformulation in deductive databases. </title> <booktitle> In Proc. IEEE International Conference on Data Engineering, </booktitle> <pages> pages 232-239. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: These techniques could be extended to identify when cached queries and materialized views can be used to evaluate certain unfoldings of queries. 9 The papers <ref> [13, 16] </ref> are the only exceptions known to us.
Reference: [14] <author> A. Y. Levy, A. O. Mendelzon, Y. Sagiv, and D. Srivastava. </author> <title> Answering queries using views. </title> <booktitle> In Proceedings of the Fourteenth ACM SIGACT-SIGMOD-SIGART Symposium on Princliples of Data Systems. ACM, </booktitle> <month> May </month> <year> 1995. </year> <note> To appear. URL: ftp://twist.db.toronto.edu/pub/papers/pods95LMSS.ps.Z </note>
Reference-contexts: Section 7 concludes with issues and future work. 2 Background 2.1 Optimization via Semantics Rewrite techniques which exploit semantic information about the database and query can improve the efficiency of query evaluation. These methods include semantic query caching (SQC) [2, 3, 12], query folding (QF) <ref> [14, 18, 15] </ref>, and semantic query optimization (SQO) [1, 16, 20]. These are primarily suitable for distributed and federated databases, although they (in particular, SQO) can also be applied in centralized databases. <p> (= 1 p (T )), for 1 j m; 1 i n, this formula reduces to: This function is plotted in Figure 4 for 2-way and 5-way joins. 7 Conclusions Intensional query optimization provides framework to apply effective semantic optimization such as semantic query caching [2, 3, 12], query folding <ref> [14, 18, 15] </ref>, and semantic query optimization [1, 16, 20], to queries in realistic domains in which views may be complex and may use unions.
Reference: [15] <author> A. Y. Levy, A. Rajaraman, and J. Ordille. </author> <title> Querying heterogeneous information sources using source descriptions. </title> <booktitle> In Proc. 22nd VLDB, </booktitle> <year> 1996. </year>
Reference-contexts: Section 7 concludes with issues and future work. 2 Background 2.1 Optimization via Semantics Rewrite techniques which exploit semantic information about the database and query can improve the efficiency of query evaluation. These methods include semantic query caching (SQC) [2, 3, 12], query folding (QF) <ref> [14, 18, 15] </ref>, and semantic query optimization (SQO) [1, 16, 20]. These are primarily suitable for distributed and federated databases, although they (in particular, SQO) can also be applied in centralized databases. <p> (= 1 p (T )), for 1 j m; 1 i n, this formula reduces to: This function is plotted in Figure 4 for 2-way and 5-way joins. 7 Conclusions Intensional query optimization provides framework to apply effective semantic optimization such as semantic query caching [2, 3, 12], query folding <ref> [14, 18, 15] </ref>, and semantic query optimization [1, 16, 20], to queries in realistic domains in which views may be complex and may use unions.
Reference: [16] <author> A. Y. Levy and Y. Sagiv. </author> <title> Semantic query optimization in datalog programs. </title> <booktitle> In Proceedings of Principles of Database Systems, </booktitle> <year> 1995. </year>
Reference-contexts: These methods include semantic query caching (SQC) [2, 3, 12], query folding (QF) [14, 18, 15], and semantic query optimization (SQO) <ref> [1, 16, 20] </ref>. These are primarily suitable for distributed and federated databases, although they (in particular, SQO) can also be applied in centralized databases. The benefit of SQC lies in saving a part (or all) of query processing by using the cached results of previous queries. <p> These techniques could be extended to identify when cached queries and materialized views can be used to evaluate certain unfoldings of queries. 9 The papers <ref> [13, 16] </ref> are the only exceptions known to us. <p> j m; 1 i n, this formula reduces to: This function is plotted in Figure 4 for 2-way and 5-way joins. 7 Conclusions Intensional query optimization provides framework to apply effective semantic optimization such as semantic query caching [2, 3, 12], query folding [14, 18, 15], and semantic query optimization <ref> [1, 16, 20] </ref>, to queries in realistic domains in which views may be complex and may use unions. September 1996 IQO|Godfrey & Gryz p. 19 of 21 The concept of a discounted query|which is the query with some of its expansions (unfoldings) "removed"|enables this.
Reference: [17] <author> J. W. Lloyd. </author> <booktitle> Foundations of Logic Programming. Symbolic Computation|Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <note> second edition, 1987. September 1996 IQO|Godfrey & Gryz p. 21 of 21 </note>
Reference-contexts: U , call U a 1-step unfolding of query set Q with respect to database DB iff, given some Q i 2 Q and a rule hA B 1 ; : : : ; B n :i in DB such that Q i A where is a most general unifier <ref> [17] </ref>, then U = Q fQ i g [ fB 1 ; : : : ; B n g Denote this by U 1 Q. <p> A query set (unfolding) Q is called extensional iff, for every Q i 2 Q, atom Q i is written with an extensional predicate. Call the query set intensional otherwise. 6 An answer is any ground substitution over V such that Q follows from the database <ref> [17] </ref>. September 1996 IQO|Godfrey & Gryz p. 7 of 21 One of the 1-step unfoldings of the query in the Example of Section 3 is: femployee (X, p p), life ins (X, hmo, )g.
Reference: [18] <author> X. Qian. </author> <title> Query folding. </title> <booktitle> In Proceedings of the 12th International Conference on Data Engineering, </booktitle> <pages> pages 48-55, </pages> <year> 1996. </year> <note> URL: http://www.csl.sri.com/~qian/icde96.ps.Z </note>
Reference-contexts: Section 7 concludes with issues and future work. 2 Background 2.1 Optimization via Semantics Rewrite techniques which exploit semantic information about the database and query can improve the efficiency of query evaluation. These methods include semantic query caching (SQC) [2, 3, 12], query folding (QF) <ref> [14, 18, 15] </ref>, and semantic query optimization (SQO) [1, 16, 20]. These are primarily suitable for distributed and federated databases, although they (in particular, SQO) can also be applied in centralized databases. <p> (= 1 p (T )), for 1 j m; 1 i n, this formula reduces to: This function is plotted in Figure 4 for 2-way and 5-way joins. 7 Conclusions Intensional query optimization provides framework to apply effective semantic optimization such as semantic query caching [2, 3, 12], query folding <ref> [14, 18, 15] </ref>, and semantic query optimization [1, 16, 20], to queries in realistic domains in which views may be complex and may use unions.
Reference: [19] <author> T. Sellis and S. Shosh. </author> <title> On the multiple-query optimization problem. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(2), </volume> <month> June </month> <year> 1990. </year>
Reference-contexts: It must be that discounted queries can be evaluated less expensively than the corresponding query, else this approach will not work. We briefly discuss strategies for dis eval/2 in the next section. If we have multiple query optimization strategies <ref> [11, 19] </ref> available|that is, strategies which exploit similarities between queries to be evaluated in batch in order to optimize evaluation|we can weaken this cost equation.
Reference: [20] <author> S. T. Shenoy and Z. M. Ozsoyoglu. </author> <title> Design and implementation of a semantic query optimizer. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 1(3) </volume> <pages> 344-361, </pages> <month> Sept. </month> <year> 1989. </year>
Reference-contexts: These methods include semantic query caching (SQC) [2, 3, 12], query folding (QF) [14, 18, 15], and semantic query optimization (SQO) <ref> [1, 16, 20] </ref>. These are primarily suitable for distributed and federated databases, although they (in particular, SQO) can also be applied in centralized databases. The benefit of SQC lies in saving a part (or all) of query processing by using the cached results of previous queries. <p> j m; 1 i n, this formula reduces to: This function is plotted in Figure 4 for 2-way and 5-way joins. 7 Conclusions Intensional query optimization provides framework to apply effective semantic optimization such as semantic query caching [2, 3, 12], query folding [14, 18, 15], and semantic query optimization <ref> [1, 16, 20] </ref>, to queries in realistic domains in which views may be complex and may use unions. September 1996 IQO|Godfrey & Gryz p. 19 of 21 The concept of a discounted query|which is the query with some of its expansions (unfoldings) "removed"|enables this.
Reference: [21] <author> J. D. Ullman. </author> <title> Principles of Database and Knowledge-Base Systems, Volumes I & II. </title> <booktitle> Principles of Computer Science Series. </booktitle> <publisher> Computer Science Press, Incorporated, </publisher> <address> Rockville, Maryland, </address> <year> 1988. </year>
Reference-contexts: Rewriting a query using this technique does not lead, in general, to an equivalent query, but to a query which is contained in the original query <ref> [21] </ref>. SQO uses semantic knowledge in the form of integrity constraints to reformulate a query into a semantically equivalent query that can be evaluated more efficiently. <p> In such cases, the query does not need be evaluated at all. September 1996 IQO|Godfrey & Gryz p. 3 of 21 2.2 Evaluation Strategies Database queries containing views (also called intensional predicates) can be evaluated in two different ways, often referred to as top-down and bottom-up <ref> [21] </ref>. In the top-down approach, all extensional unfoldings 1 of the query are generated, each is evaluated and the answer sets are unioned together to produce the final answer set. Bottom-up query evaluation does not require evaluating separately all extensional unfoldings of a query.
References-found: 21

