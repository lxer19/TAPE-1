URL: http://www.cs.toronto.edu/~csc2532h/progress1.ps.Z
Refering-URL: http://www.cs.toronto.edu/~csc2532h/
Root-URL: http://www.cs.toronto.edu
Email: email: @ai.toronto.edu reiter@ai.toronto.edu  
Title: How to Progress a Database (and Why) I. Logical Foundations  
Author: Fangzhen Lin and Ray Reiter 
Address: Toronto, Canada M5S 1A4  
Affiliation: Department of Computer Science University of Toronto  
Abstract: One way to think about STRIPS is as a mapping from databases to databases, in the following sense: Suppose we want to know what the world would be like if an action, represented by the STRIPS operator ff, were done in some world, represented by the STRIPS database D 0 . To find out, simply perform the operator ff on D 0 (by applying ff's elementary add and delete revision operators to D 0 ). We describe this process as progressing the database D 0 in response to the action ff. In this paper, we consider the general problem of progressing an initial database in response to a given sequence of actions. We appeal to the situation calculus and an axiomatization of actions which addresses the frame problem (Reiter [13], Lin and Reiter [8]). This setting is considerably more general than STRIPS. Our results concerning progression are mixed. The (surprising) bad news is that, in general, to characterize a progressed database we must appeal to second order logic. The good news is that there are many useful special cases for which we can compute the progressed database in first order logic; not only that, we can do so efficiently. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul. </author> <title> Updates, a new frontier. </title> <booktitle> In Second International Conference on Database Theory, </booktitle> <pages> pages 1-18. </pages> <publisher> Springer, </publisher> <year> 1988. </year>
Reference-contexts: Unfortunately, regression suffers from a number of drawbacks in this application: 1 This is also the way that database practitioners think about database updates (Abiteboul <ref> [1] </ref>). In fact, the STRIPS action and database update paradigms are essentially the same. Accordingly, this paper is as much about database updates as it is about STRIPS actions and their generalizations. 2 Joint work with Yves Lesperance, Hector Levesque, Bill Millar and Richard Scherl. 1.
Reference: [2] <author> F. Bacchus and Q. Yang. </author> <title> Downward refinement and the efficiency of hierarchical problem solving. </title> <journal> Artificial Intelligence. </journal> <note> To appear. </note>
Reference-contexts: Ever since STRIPS was first introduced (Fikes and Nilsson [4]), its logical semantics has been problematic. There have been many proposals in the literature (e.g. Lifschitz [6], Pednault [11], Bacchus and Yang <ref> [2] </ref>). These all have in common a reliance on meta-theoretic operations on logical theories in order to capture the add and delete lists of STRIPS operators, but it has never been clear exactly what these operations correspond to declaratively, especially when they are applied to logically incomplete theories.
Reference: [3] <author> E. W. Dijkstra and C. S. Scholten. </author> <title> Predicate Calculus and Program Semantics. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: If D S ff j= ', then D j= ' by Proposition 4.1. From this theorem, we see that if D S ff is a progres-sion, then it is a strongest post-condition (cf. Pednault [9], Dijkstra and Scholten <ref> [3] </ref>, and others) of the precondition D S 0 wrt the action ff. A result by Pednault [9] shows that D S ff cannot in general be a finite set of first-order sentences in L S ff .
Reference: [4] <author> R. E. Fikes and N. J. Nilsson. </author> <title> STRIPS: A new approach to theorem proving in problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference-contexts: In a companion paper (Lin and Reiter [7]) we explore the consequences of our results on progression for the semantics of STRIPS-like systems. Ever since STRIPS was first introduced (Fikes and Nilsson <ref> [4] </ref>), its logical semantics has been problematic. There have been many proposals in the literature (e.g. Lifschitz [6], Pednault [11], Bacchus and Yang [2]).
Reference: [5] <author> S. C. Kleene. </author> <title> Mathematical Logic. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1967. </year>
Reference-contexts: We now show that there is a model M 0 of D such that for any sentence ' in L S A , M j= ' iff M 0 j= '. By Skolem's theorem (cf. Kleene <ref> [5] </ref>, page 326), there is a first-order structure M fl such that for any sentence ' in L S A , M j= ' iff M fl j= ', and (M; 0; succ) and (M fl ; 0; succ) are not isomorphic, i.e., M and M fl are not isomorphic on
Reference: [6] <author> V. Lifschitz. </author> <title> On the semantics of STRIPS. </title> <booktitle> In Reasoning about Actions and Plans: Proceedings of the 1986 Workshop, </booktitle> <pages> pages 1-9. </pages> <publisher> Morgan Kauff-mann Publishers, Inc., </publisher> <address> 1986. June 30-July 2, Timberline, Oregon. </address>
Reference-contexts: In a companion paper (Lin and Reiter [7]) we explore the consequences of our results on progression for the semantics of STRIPS-like systems. Ever since STRIPS was first introduced (Fikes and Nilsson [4]), its logical semantics has been problematic. There have been many proposals in the literature (e.g. Lifschitz <ref> [6] </ref>, Pednault [11], Bacchus and Yang [2]).
Reference: [7] <author> F. Lin and R. Reiter. </author> <title> How to progress a database II: The STRIPS connection. </title> <note> 1994. Submitted. </note>
Reference-contexts: A relatively complete initial database can be progressed efficiently wrt any successor state axioms. On the other hand, even for context free successor state axioms, progression is not guaranteed to yield finite first-order theories. 6. In a companion paper (Lin and Reiter <ref> [7] </ref>) we explore the consequences of our results on progression for the semantics of STRIPS-like systems. Ever since STRIPS was first introduced (Fikes and Nilsson [4]), its logical semantics has been problematic. There have been many proposals in the literature (e.g. Lifschitz [6], Pednault [11], Bacchus and Yang [2]).
Reference: [8] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <journal> Journal of Logic and Computation Special Issue on Actions and Processes, </journal> <note> 1994. To appear. </note>
Reference-contexts: In this paper, we consider the general problem of progressing an initial database in response to a given sequence of actions. We appeal to the situation calculus and an axiomatization of actions which addresses the frame problem (Reiter [13], Lin and Reiter <ref> [8] </ref>). This setting is considerably more general than STRIPS. Our results concerning progression are mixed. The (surprising) bad news is that, in general, to characterize a progressed database we must appeal to second order logic. <p> We shall denote by L 2 the second-order extension of L. Our foundational axioms for the situation calculus will be in L 2 (Lin and Reiter <ref> [8] </ref>), because we need induction on situations (Reiter [14]). We shall frequently need to restrict the situation cal culus to a particular situation. <p> Reiter [13] and Lin and Reiter <ref> [8] </ref>): D = [ D ss [ D ap [ D una [ D S 0 ; where * , given below, is the set of the foundational ax ioms for situations. * D ss is a set of successor state axioms of the form: 3 P oss (a; s) oe
Reference: [9] <author> E. P. Pednault. </author> <title> Toward a Mathematical Theory of Plan Synthesis. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering, Stanford University, Stanford, </institution> <address> CA, </address> <year> 1986. </year>
Reference-contexts: We describe this process as fl Fellow of the Canadian Institute for Advanced Research progressing the database D 0 in response to the action ff (cf. Rosenschein [15] and Pednault <ref> [9] </ref>). The resulting database describes the effects of the action on the world represented by the initial database. 1 However, it may not always be convenient or even possible to describe the effects of actions as a simple process of progressing an initial world description. <p> If D S ff j= ', then D j= ' by Proposition 4.1. From this theorem, we see that if D S ff is a progres-sion, then it is a strongest post-condition (cf. Pednault <ref> [9] </ref>, Dijkstra and Scholten [3], and others) of the precondition D S 0 wrt the action ff. A result by Pednault [9] shows that D S ff cannot in general be a finite set of first-order sentences in L S ff . <p> From this theorem, we see that if D S ff is a progres-sion, then it is a strongest post-condition (cf. Pednault <ref> [9] </ref>, Dijkstra and Scholten [3], and others) of the precondition D S 0 wrt the action ff. A result by Pednault [9] shows that D S ff cannot in general be a finite set of first-order sentences in L S ff . <p> Thus a lim ited context dependency can be handled. We emphasize that the results of this section depend on the fact that the initial database has a certain specific form. In fact, a result by Pednault <ref> [9] </ref> shows that for context-free actions and arbitrary D S 0 , progression is not always guaranteed to yield finite first-order theories. 7 SUMMARY 1. We have argued the need for progressing a database. 2.
Reference: [10] <author> E. P. Pednault. </author> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <journal> Computational Intelligence, </journal> <volume> 4 </volume> <pages> 356-372, </pages> <year> 1988. </year>
Reference-contexts: This can be done using regression (cf. Waldinger [17], Pednault <ref> [10] </ref>, and Reiter [12]) to reduce the projection problem to one of entailment from the initial database, consisting of sentences about the initial situation S 0 .
Reference: [11] <author> E. P. Pednault. </author> <title> ADL: Exploring the middle ground between STRIPS and the situation calculus. </title> <booktitle> In Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning (KR'89), </booktitle> <pages> pages 324-332. </pages> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1989. </year>
Reference-contexts: Ever since STRIPS was first introduced (Fikes and Nilsson [4]), its logical semantics has been problematic. There have been many proposals in the literature (e.g. Lifschitz [6], Pednault <ref> [11] </ref>, Bacchus and Yang [2]).
Reference: [12] <author> R. Reiter. </author> <title> The frame problem in the situation calculus: a simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In V. Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarthy, </booktitle> <pages> pages 418-420. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year>
Reference-contexts: This can be done using regression (cf. Waldinger [17], Pednault [10], and Reiter <ref> [12] </ref>) to reduce the projection problem to one of entailment from the initial database, consisting of sentences about the initial situation S 0 . Unfortunately, regression suffers from a number of drawbacks in this application: 1 This is also the way that database practitioners think about database updates (Abiteboul [1]).
Reference: [13] <author> R. Reiter. </author> <title> On specifying database updates. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1992. </year> <month> KRR-TR-92-3. </month>
Reference-contexts: In this paper, we consider the general problem of progressing an initial database in response to a given sequence of actions. We appeal to the situation calculus and an axiomatization of actions which addresses the frame problem (Reiter <ref> [13] </ref>, Lin and Reiter [8]). This setting is considerably more general than STRIPS. Our results concerning progression are mixed. The (surprising) bad news is that, in general, to characterize a progressed database we must appeal to second order logic. <p> Reiter <ref> [13] </ref> and Lin and Reiter [8]): D = [ D ss [ D ap [ D una [ D S 0 ; where * , given below, is the set of the foundational ax ioms for situations. * D ss is a set of successor state axioms of the form: 3 <p> For any sequence A of actions, any fluent F , and any variable assignment oe: M 0 ; oe j= F (~x; do (A; S 0 )) M; oe j= F (~x; do (A; S 0 )): Example 3.1 An educational database (Reiter <ref> [13] </ref>). There are two fluents: * enrolled (st; course; s): student st is enrolled in course course in state s. * grade (st; course; grade; s): the grade of st in course is grade in state s.
Reference: [14] <author> R. Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 64 </volume> <pages> 337-351, </pages> <year> 1993. </year>
Reference-contexts: We shall denote by L 2 the second-order extension of L. Our foundational axioms for the situation calculus will be in L 2 (Lin and Reiter [8]), because we need induction on situations (Reiter <ref> [14] </ref>). We shall frequently need to restrict the situation cal culus to a particular situation. For instance, the initial database is defined to be a finite set of sentences in L that do not mention any state terms except S 0 , and do not mention P oss and &lt;. <p> and any sequence A of actions, D j= '(do (A; S 0 )) 3 In the following, unless otherwise stated, all free variables in a formula are assumed to be universally quantified from the outside. 4 For a discussion of the use of induction in the situation calculus, see (Reiter <ref> [14] </ref>). iff This follows directly from the following proposition which will be used throughout this paper. Proposition 3.1 Given any model M of D ss [ D ap [ D una [ D S 0 , there is a model M 0 of D such that: 1.
Reference: [15] <author> S. J. Rosenschein. </author> <title> Plan synthesis: A logical perspective. </title> <booktitle> In Proceedings of IJCAI 7, </booktitle> <pages> pages 331-337, </pages> <year> 1981. </year>
Reference-contexts: We describe this process as fl Fellow of the Canadian Institute for Advanced Research progressing the database D 0 in response to the action ff (cf. Rosenschein <ref> [15] </ref> and Pednault [9]). The resulting database describes the effects of the action on the world represented by the initial database. 1 However, it may not always be convenient or even possible to describe the effects of actions as a simple process of progressing an initial world description.
Reference: [16] <author> R. Scherl and H. Levesque. </author> <title> The frame problem and knowledge-producing actions. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence (AAAI-93), </booktitle> <year> 1993. </year>
Reference-contexts: Similarly, after a long while, the world state often becomes so rearranged that significantly many final steps of the regression become entirely unnec essary. 3. Most significantly, for robotics, perceptual actions (Scherl and Levesque <ref> [16] </ref>) lead to new facts being added to the database. But such facts are true in the current situation the one immediately following the perceptual action whereas the other (old) database facts are true in S 0 .
Reference: [17] <author> R. Waldinger. </author> <title> Achieving several goals simultaneously. </title> <editor> In E. Elcock and D. Michie, editors, </editor> <booktitle> Machine Intelligence, </booktitle> <pages> pages 94-136. </pages> <publisher> Ellis Horwood, Edinburgh, </publisher> <address> Scotland, </address> <year> 1977. </year>
Reference-contexts: This can be done using regression (cf. Waldinger <ref> [17] </ref>, Pednault [10], and Reiter [12]) to reduce the projection problem to one of entailment from the initial database, consisting of sentences about the initial situation S 0 .
References-found: 17

