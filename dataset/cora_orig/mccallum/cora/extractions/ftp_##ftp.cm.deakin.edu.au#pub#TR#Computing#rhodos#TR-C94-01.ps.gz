URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/rhodos/TR-C94-01.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: (ddp@deakin.edu.au, ang@deakin.edu.au)  
Title: An Overview of Process Management in the RHODOS System 1  
Author: Damien De Paoli and Andrzej Goscinski 
Keyword: Distributed Systems, Distributed Operating Systems, Process Management.  
Date: September 8, 1994  
Address: Geelong, Victoria 3217  
Affiliation: School of Computing and Mathematics Deakin University  
Abstract: This report presents the research into process management in RHODOS. It details the types of processes RHODOS supports. Also covered are the policies that dictate the states the processes can exist in and the events that cause transitions between these states. A mechanism to enact the abovementioned policies was created. This mechanism embodied in a kernel server called The Process Manager, manipulates the processes, and the queues they are in; and supports operations that allow the transitions between these queues. The internal workings of the process manager are presented including how concurrency is achieved. Following this, the operations that the process manager offers to support process management is presented. Finally, as process migration and remote process creation exist within RHODOS, the required support for these services is discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. W. Gerrity. </author> <title> A Process Model for RHODOS. </title> <type> Technical Report CS90/7, </type> <address> UNSW, Australia, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: fi 17 cess issues a process_wait () to host Cs process manager, which identifies that the child process is not on host C, and sends an remote procedure call to the parent process origin (host A) for the childs exit status. 11 Conclusion This report has taken the results of <ref> [1] </ref> and extended the process model from the proposed three states and extended this to the current five state model. This five state model allows the full functions of process management and includes the capability for process migration and remote process creation.
Reference: [2] <author> D. De Paoli. </author> <title> The Multiple Strategy Process Migration Manager for RHODOS: The Logical Design. </title> <type> Technical Report C93/37, </type> <institution> Deakin University, Australia, </institution> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: A process can also change state from blocked to ready when an asynchronous interrupt occurs. For example, when a key is pressed an interrupt occurs, which subsequently unblocks the serial device handler to take the appropriate action. The frozen state is used by the process migration manager <ref> [2] </ref>. <p> The argv variable specifies the run time parameters to the new process. As one of RHODOS goals is to utilise load balancing both dynamic allocation (process migration) and static allocation (remote process creation) must be services the process manager provides. For a detailed discussion of process migration see <ref> [2] </ref>. The interaction between the RHODOS servers to provide remote process creation is presented in Figure 9. With a remote process creation, the global scheduling server is consulted to determine the destination for the remote creation.
Reference: [3] <author> A. Goscinski. </author> <title> Distributed Operating Systems. The Logical Design. </title> <address> AddisonWesley, </address> <year> 1991. </year>
Reference-contexts: Finally, the Process Manager replies back to the user process with either success or failure as appropriate. 3 Process Types and Process States There are two types of processes within RHODOS <ref> [3] </ref>. Firstly, there is a heavyweight process, i.e., each process has a separate data and stack space, whilst sharing its text space with another process (a Unix process belongs to this class of processes).
Reference: [4] <author> A. Goscinski, M. Hobbs and G. Whickham. </author> <title> Interprocess Communication in RHODOS. </title> <note> Technical Report C94/ , Deakin University, Australia (in preparation). </note>
Reference-contexts: In essence, the state table is a doubly linked ordered list. The ordering is based on the sec and usec fields. RHODOS IPC primitives <ref> [4] </ref>, allow a timeout to be associated with a receive operation. Thus, a process will wait for up to a given time for a message to be received. This receive timeout is measured in seconds and/or microseconds. <p> Thus, a process will wait for up to a given time for a message to be received. This receive timeout is measured in seconds and/or microseconds. Hence, the sec and usec fields, in the state table are used to associate a timeout (by use of the IPC primitives <ref> [4] </ref>) with a particular operation. The sec field is measured in seconds, whilst the usec field is measured in microseconds.
References-found: 4

