URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1995/1995-12.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Phone: Tel. 31 30 531454  
Title: On Levels of Detail in Terrains  
Author: Mark de Berg Katrin T. G. Dobrindt 
Address: Padualaan 14, P.O. Box 80.089, 3508 TB Utrecht, The Netherlands,  
Affiliation: Utrecht University Department of Computer Science  
Date: April 1995  
Pubnum: UU-CS-1995-12  
Abstract-found: 0
Intro-found: 1
Reference: [BEE + 93] <author> M. Bern, H. Edelsbrunner, D. Eppstein, S. Mitchell, and T. S. Tan. </author> <title> Edge-insertion for optimal triangulations. </title> <journal> Discrete Comput. Geom., </journal> <volume> 10 </volume> <pages> 47-65, </pages> <year> 1993. </year>
Reference-contexts: In some cases specific data dependent triangulation can give better results, though. Dyn et al.. [DLR90] examine different optimization criteria. Scarlatos and Pavlidis [SP90] adapt the triangulation to surface characteristics (ridge and valley lines). Bern et al.. <ref> [BEE + 93] </ref> propose an algorithm for computing the triangulation that minimizes the maximal gradient of the surface to be interpolated. We opted for the use of the Delaunay triangulation because of its properties described above are general and because there are many efficient algorithms for its computation.
Reference: [CG88] <author> Z. Chen and J. A. Guevara. </author> <title> System selection of very important points (VIP) from digital terrain model for constructing triangular irregular networks. </title> <booktitle> In Proc. 8th Internat. Sympos. Comput.-Assist. Cartog. (Auto-Carto), </booktitle> <pages> pages 50-56, </pages> <year> 1988. </year>
Reference-contexts: There are several papers dealing with this problem|De Floriani et al. [DMP94] give an overview. Previous approaches can be subdivided into two categories|see below. A related problem is the problem of simplifying general surfaces [HDD + 93, DLR90] or terrains <ref> [FL79, CG88, Lee89, PM93] </ref>. In the first category one starts with a triangulation of a (small) subset of the data points [DFNP84, PF87]. This is the coarsest representation. <p> These 'important' vertices can either be specified explicitly by the user, or they can be computed using existing methods [Lee91]. Which of the non-fixed vertices are removed to go from one level to the next, coarser level is decided according to different heuristic strategies <ref> [Ede87, CG88, Lee89] </ref>. The hierarchy and how it is constructed are described in Section 2. 1 There are methods that try to avoid this by adding extra points on the edges of the triangles [SP90, DP92]. <p> For instance, we can choose the non-fixed vertices of V i in order of non-decreasing degree. This should guarantee that many vertices are removed [Ede87]. We can also try to discard the least important points, where importance is computed using, for instance, the VIP method <ref> [CG88] </ref> or drop heuristic method [Lee89]. This should minimize the approximation error between two subsequent levels. <p> The constants are smaller when we try to select the vertices to be removed in order of non-decreasing degree than in order of importance using the VIP method <ref> [CG88] </ref> for TIN's based on regular grids, or the drop 14 jV f ixed j = p n jV fixed j = 4 VIP DH degree VIP DH degree Lake Charles (West) 2.90 2.89 2.53 2.89 2.88 2.52 Bangor (East) 2.90 2.88 2.54 2.90 2.87 2.52 San Bernardino (East) 2.91 2.89
Reference: [De 89] <author> L. De Floriani. </author> <title> A pyramidal data structure for triangle-based surface representation. </title> <journal> IEEE Comput. Graph. Appl., </journal> <volume> 9 </volume> <pages> 67-78, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: An example of such a hierarchy is the Delaunay pyramid <ref> [De 89] </ref>, which is obtained by always adding the data point with the maximal error and retriangulating using the Delaunay criterion.
Reference: [DFNP84] <author> L. De Floriani, B. Falcidieno, G. Nagy, and C. Pienovi. </author> <title> Hierarchical structure for surface approximation. </title> <journal> Computers & Graphics (Pergamon), </journal> <volume> 8(2) </volume> <pages> 183-193, </pages> <year> 1984. </year>
Reference-contexts: Previous approaches can be subdivided into two categories|see below. A related problem is the problem of simplifying general surfaces [HDD + 93, DLR90] or terrains [FL79, CG88, Lee89, PM93]. In the first category one starts with a triangulation of a (small) subset of the data points <ref> [DFNP84, PF87] </ref>. This is the coarsest representation. To obtain the next level, the triangles are refined by adding new data points inside them and retriangulating each triangle with its new interior points. Thus each triangle is replaced by a number of smaller triangles. <p> The possibility to combine different levels of detail reduces the render time significantly, compared to the time needed when the terrain is rendered at one (high enough) level of detail|see Section 4 for more details. If the hierarchy is a tree structure <ref> [DFNP84, PF87] </ref>, this can be easily done as follows. We perform a partial top-down traversal of the tree in which the parts of the terrain are extracted at the appropriate level of detail. This recursive traversal starts at the coarsest level of detail.
Reference: [DLR90] <author> Nira Dyn, David Levin, and Samuel Rippa. </author> <title> Data dependent triangulations for piecewise linear interpolation. </title> <journal> IMA Journal of Numerical Analysis, </journal> <volume> 10 </volume> <pages> 137-154, </pages> <year> 1990. </year>
Reference-contexts: There are several papers dealing with this problem|De Floriani et al. [DMP94] give an overview. Previous approaches can be subdivided into two categories|see below. A related problem is the problem of simplifying general surfaces <ref> [HDD + 93, DLR90] </ref> or terrains [FL79, CG88, Lee89, PM93]. In the first category one starts with a triangulation of a (small) subset of the data points [DFNP84, PF87]. This is the coarsest representation. <p> Rippa [Rip90] showed that when the Delaunay triangulation is used to interpolate a bivariate function it minimizes the roughness of the interpolation. In some cases specific data dependent triangulation can give better results, though. Dyn et al.. <ref> [DLR90] </ref> examine different optimization criteria. Scarlatos and Pavlidis [SP90] adapt the triangulation to surface characteristics (ridge and valley lines). Bern et al.. [BEE + 93] propose an algorithm for computing the triangulation that minimizes the maximal gradient of the surface to be interpolated.
Reference: [DMP94] <author> L. De Floriani, P. Marzano, and E. Puppo. </author> <title> Hierarchical terrain models: Survey and formalization. </title> <booktitle> In Proc. ACM Sympos. </booktitle> <institution> Applied Comput., </institution> <year> 1994. </year>
Reference-contexts: The hierarchy should be such that the approximation error between subsequent levels is small, but the amount of storage should not increase to much. There are several papers dealing with this problem|De Floriani et al. <ref> [DMP94] </ref> give an overview. Previous approaches can be subdivided into two categories|see below. A related problem is the problem of simplifying general surfaces [HDD + 93, DLR90] or terrains [FL79, CG88, Lee89, PM93]. <p> Whether this could be done was mentioned as an open problem by De Floriani et al. <ref> [DMP94, DP92] </ref>. We answer this question by describing a hierarchy that has both properties. The idea behind our hierarchy is the following. We start with the initial terrain that forms the most detailed level of the hierarchy.
Reference: [DP92] <author> L. De Floriani and E. Puppo. </author> <title> A hierarchical triangle-based model for terrain description. </title> <booktitle> In Proc. Internat. Conf. GIS: Theory and Methods of Spatio-temporal Reasoning in Geographic Space, Lecture Notes in Computer Science, </booktitle> <pages> pages 236-251. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Whether this could be done was mentioned as an open problem by De Floriani et al. <ref> [DMP94, DP92] </ref>. We answer this question by describing a hierarchy that has both properties. The idea behind our hierarchy is the following. We start with the initial terrain that forms the most detailed level of the hierarchy. <p> The hierarchy and how it is constructed are described in Section 2. 1 There are methods that try to avoid this by adding extra points on the edges of the triangles <ref> [SP90, DP92] </ref>. These extra points are not necessarily original data points, so this does not quite fit into our model.
Reference: [Ede87] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry, </title> <booktitle> volume 10 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1987. </year>
Reference-contexts: These 'important' vertices can either be specified explicitly by the user, or they can be computed using existing methods [Lee91]. Which of the non-fixed vertices are removed to go from one level to the next, coarser level is decided according to different heuristic strategies <ref> [Ede87, CG88, Lee89] </ref>. The hierarchy and how it is constructed are described in Section 2. 1 There are methods that try to avoid this by adding extra points on the edges of the triangles [SP90, DP92]. <p> For instance, we can choose the non-fixed vertices of V i in order of non-decreasing degree. This should guarantee that many vertices are removed <ref> [Ede87] </ref>. We can also try to discard the least important points, where importance is computed using, for instance, the VIP method [CG88] or drop heuristic method [Lee89]. This should minimize the approximation error between two subsequent levels.
Reference: [FL79] <author> R. J. Fowler and J. J. Little. </author> <title> Automatic extraction of irregular network digital terrain models. </title> <journal> Computer Graphics, </journal> <volume> 13(2) </volume> <pages> 199-207, </pages> <month> August </month> <year> 1979. </year>
Reference-contexts: There are several papers dealing with this problem|De Floriani et al. [DMP94] give an overview. Previous approaches can be subdivided into two categories|see below. A related problem is the problem of simplifying general surfaces [HDD + 93, DLR90] or terrains <ref> [FL79, CG88, Lee89, PM93] </ref>. In the first category one starts with a triangulation of a (small) subset of the data points [DFNP84, PF87]. This is the coarsest representation.
Reference: [Gie94] <author> G.-J. Giezeman. PlaGeo, </author> <title> a library for planar geometry, and SpaGeo, a library for spatial geometry. Manual, </title> <institution> Dept. Comput. Sci., Univ. </institution> <address> Utrecht, Utrecht, Netherlands, </address> <year> 1994. </year>
Reference-contexts: The unoptimized code is about 4000 lines of C++, including the I/0 and debugging code. The program uses the PlaGeo and SpaGeo library for planar and spatial geometry <ref> [Gie94] </ref> and the Forms library for the graphical interface [Ove93]. The source code to calculate Delaunay triangulations [Wat92] was obtained from Watson at maths.uwa.edu.au. We tested our algorithm on data set that are based on 1:250,000-scale digital elevation models obtainable by anonymous ftp from edcftp.cr.usgs.gov:/pub/data/DEM/250.
Reference: [HDD + 93] <author> Hugues Hoppe, Tony DeRose, Tom Duchamp, John McDonald, and Werner Stuetzle. </author> <title> Mesh optimization. </title> <booktitle> In Proc. SIGGRAPH '93, </booktitle> <pages> pages 19-26, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: There are several papers dealing with this problem|De Floriani et al. [DMP94] give an overview. Previous approaches can be subdivided into two categories|see below. A related problem is the problem of simplifying general surfaces <ref> [HDD + 93, DLR90] </ref> or terrains [FL79, CG88, Lee89, PM93]. In the first category one starts with a triangulation of a (small) subset of the data points [DFNP84, PF87]. This is the coarsest representation.
Reference: [HG94] <author> P. S. Heckbert and M. </author> <title> Garland. Multiresolution modeling for fast rendering. </title> <booktitle> In Proc. Graphics Interface '94, </booktitle> <pages> pages 43-50. </pages> <institution> Canadian Inf. Proc. Soc., </institution> <year> 1994. </year>
Reference-contexts: This means that the levels cannot be completely independent, as it should be possible to glue them together smoothly. Although the idea of multiresolution models is a quite old, there are not many results for their automatic creation|Heckbert and Garland <ref> [HG94] </ref> survey the existing multiresolution techniques. We study this problem in the following setting. We are given a collection of n data points in the plane, each with its own elevation.
Reference: [Kir83] <author> D. G. Kirkpatrick. </author> <title> Optimal search in planar subdivisions. </title> <journal> SIAM J. Comput., </journal> <volume> 12 </volume> <pages> 28-35, </pages> <year> 1983. </year>
Reference-contexts: We start with the initial terrain that forms the most detailed level of the hierarchy. To go from one level to the next, coarser level, a number of non-adjacent vertices of the terrain is removed, and the terrain is retriangulated. (This idea was introduced by Kirkpatrick <ref> [Kir83] </ref>.) We allow the user some control over this process. In particular, it is possible to fix vertices that are relevant for the shape of the terrain and should not be removed, such as pits, peaks and passes. <p> The following proposition shows that this is indeed the case. The proof of this proposition follows the analysis of Kirkpatrick <ref> [Kir83] </ref> closely; the differences only come from the existence of fixed vertices. Proposition 2.2 Let d be a constant specifying the maximum degree of the vertices in the independent sets. <p> The next result follows easily from the proposition above. Corollary 2.3 <ref> [Kir83] </ref> The hierarchical representation of a terrain given as the Delaunay triangulation of a set of n data points can be constructed in O (n) time. The hierarchy uses O (n) storage and its depth is O (log n).
Reference: [Lee89] <author> J. Lee. </author> <title> A drop heuristic conversion method for extracting irregular networks for digital elevation models. </title> <booktitle> In Proc. of GIS/LIS '89, </booktitle> <pages> pages 30-39, </pages> <year> 1989. </year>
Reference-contexts: There are several papers dealing with this problem|De Floriani et al. [DMP94] give an overview. Previous approaches can be subdivided into two categories|see below. A related problem is the problem of simplifying general surfaces [HDD + 93, DLR90] or terrains <ref> [FL79, CG88, Lee89, PM93] </ref>. In the first category one starts with a triangulation of a (small) subset of the data points [DFNP84, PF87]. This is the coarsest representation. <p> These 'important' vertices can either be specified explicitly by the user, or they can be computed using existing methods [Lee91]. Which of the non-fixed vertices are removed to go from one level to the next, coarser level is decided according to different heuristic strategies <ref> [Ede87, CG88, Lee89] </ref>. The hierarchy and how it is constructed are described in Section 2. 1 There are methods that try to avoid this by adding extra points on the edges of the triangles [SP90, DP92]. <p> This should guarantee that many vertices are removed [Ede87]. We can also try to discard the least important points, where importance is computed using, for instance, the VIP method [CG88] or drop heuristic method <ref> [Lee89] </ref>. This should minimize the approximation error between two subsequent levels. <p> 2.89 2.45 2.88 2.43 Table 1: Increase in the number of triangles for some data sets (based on regular grids and TINS) for different numbers of fixed points and different strategies for determining the independent set (not counting the duplicate occurrences of the same triangle in different levels). heuristic method <ref> [Lee89] </ref>. The influence of the number of fixed vertices is not significant, as long as this set is not too large. We next examine the storage overhead caused by the maintenance of the hierarchy.
Reference: [Lee91] <author> J. Lee. </author> <title> A comparison of existing methods for building irregular networks models of terrain from grid digital elevation models. </title> <journal> Int. J. of GIS, </journal> <volume> 5 </volume> <pages> 267-285, </pages> <year> 1991. </year>
Reference-contexts: In particular, it is possible to fix vertices that are relevant for the shape of the terrain and should not be removed, such as pits, peaks and passes. These 'important' vertices can either be specified explicitly by the user, or they can be computed using existing methods <ref> [Lee91] </ref>. Which of the non-fixed vertices are removed to go from one level to the next, coarser level is decided according to different heuristic strategies [Ede87, CG88, Lee89]. <p> The removal of these vertices may change the shape of the terrain completely. This is definitively not what we want when rendering. Therefore we compute (or let the user specify) a set of these important vertices using existing methods <ref> [Lee91] </ref> and we fix them. Fixed vertices are never removed, that is the set I i consists of non-fixed and pairwise non-adjacent vertices of V i . The vertices of the convex hull of the (two-dimensional) data points are always fixed, so that the terrain keeps its original size. <p> The quality of an approximation depends on the application and on the terrain itself| Lee <ref> [Lee91] </ref> compares the different methods. The advantage of our algorithm is that we can just plug in the different existing selection methods that have already proven their efficiency. In terms of visual comparison the VIP method seems to perform better than the other methods and is the fastest.
Reference: [Ove93] <author> M. Overmars. </author> <title> Forms Library, a graphical user interface toolkit for Silicon Graphics workstations. Manual, </title> <institution> Dept. Comput. Sci., Univ. </institution> <address> Utrecht, Utrecht, Netherlands, </address> <year> 1993. </year>
Reference-contexts: The unoptimized code is about 4000 lines of C++, including the I/0 and debugging code. The program uses the PlaGeo and SpaGeo library for planar and spatial geometry [Gie94] and the Forms library for the graphical interface <ref> [Ove93] </ref>. The source code to calculate Delaunay triangulations [Wat92] was obtained from Watson at maths.uwa.edu.au. We tested our algorithm on data set that are based on 1:250,000-scale digital elevation models obtainable by anonymous ftp from edcftp.cr.usgs.gov:/pub/data/DEM/250.
Reference: [PF87] <author> J. Ponce and O. Faugeras. </author> <title> An object centered hierarchical representation for 3d objects: the prism tree. </title> <journal> Comput. Graphics and Image Proc., </journal> <volume> 38(1) </volume> <pages> 1-28, </pages> <year> 1987. </year>
Reference-contexts: Previous approaches can be subdivided into two categories|see below. A related problem is the problem of simplifying general surfaces [HDD + 93, DLR90] or terrains [FL79, CG88, Lee89, PM93]. In the first category one starts with a triangulation of a (small) subset of the data points <ref> [DFNP84, PF87] </ref>. This is the coarsest representation. To obtain the next level, the triangles are refined by adding new data points inside them and retriangulating each triangle with its new interior points. Thus each triangle is replaced by a number of smaller triangles. <p> The possibility to combine different levels of detail reduces the render time significantly, compared to the time needed when the terrain is rendered at one (high enough) level of detail|see Section 4 for more details. If the hierarchy is a tree structure <ref> [DFNP84, PF87] </ref>, this can be easily done as follows. We perform a partial top-down traversal of the tree in which the parts of the terrain are extracted at the appropriate level of detail. This recursive traversal starts at the coarsest level of detail.
Reference: [PM93] <author> Michael F. Polis and David M. McKeown, Jr. </author> <title> Issues in iterative TIN generation to support large scale simulations. </title> <booktitle> Proc. of 11th Intl. Symp. on Computer Assisted Cartography, </booktitle> <year> 1993. </year> <month> 18 </month>
Reference-contexts: There are several papers dealing with this problem|De Floriani et al. [DMP94] give an overview. Previous approaches can be subdivided into two categories|see below. A related problem is the problem of simplifying general surfaces [HDD + 93, DLR90] or terrains <ref> [FL79, CG88, Lee89, PM93] </ref>. In the first category one starts with a triangulation of a (small) subset of the data points [DFNP84, PF87]. This is the coarsest representation.
Reference: [PS85] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: an Introduction. </title> <publisher> Springer--Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: Skinny triangles can cause robustness and aliasing problems. The second category uses the Delaunay triangulation <ref> [PS85] </ref> of the set of (two-dimensional) data points at every level. This triangulation has the nice property that it maximizes the minimum angle of the triangles|see Section 2 for more details. Thus robustness and aliasing problems are reduced. <p> The hierarchy uses O (n) storage and its depth is O (log n). If the Delaunay triangulation of the data points is not given to us beforehand, we have to compute it ourselves. In this case the preprocessing takes O (n log n) time <ref> [PS85] </ref>. 2.2.2 Point location and windowing operations Depending on the application, several operations can be required from a hierarchical representation of a terrain. For rendering purposes|this is the application we are mostly interested in|it is important that one can extract a representation at an appropriate level of detail.
Reference: [Rip90] <author> S. Rippa. </author> <title> Minimal roughness property of the Delaunay triangulation. </title> <journal> Comput. Aided Geom. Design, </journal> <volume> 7 </volume> <pages> 489-497, </pages> <year> 1990. </year>
Reference-contexts: Intuitively, if the function is sufficiently sampled, Delaunay triangulation gives in general a good approximation because it connects the points by 2 This assumes the data points are in general position, otherwise some extra edges have to be added. 4 data points. proximity. Rippa <ref> [Rip90] </ref> showed that when the Delaunay triangulation is used to interpolate a bivariate function it minimizes the roughness of the interpolation. In some cases specific data dependent triangulation can give better results, though. Dyn et al.. [DLR90] examine different optimization criteria.
Reference: [Sib78] <author> R. Sibson. </author> <title> Locally equiangular triangulations. </title> <journal> Comput. J., </journal> <volume> 21 </volume> <pages> 243-245, </pages> <year> 1978. </year>
Reference-contexts: The Delaunay triangulation has several nice properties. For instance, it maximizes the minimum angle of the triangles <ref> [Sib78] </ref>, which reduces robustness problems and aliasing problems when rendering.
Reference: [SP90] <author> L. Scarlatos and T. Pavlidis. </author> <title> Adaptive hierarchical triangulation. </title> <booktitle> In Proc. 10th Inter-nat. Sympos. Comput.-Assist. Cartog. (Auto-Carto), </booktitle> <pages> pages 234-246, </pages> <year> 1990. </year>
Reference-contexts: The hierarchy and how it is constructed are described in Section 2. 1 There are methods that try to avoid this by adding extra points on the edges of the triangles <ref> [SP90, DP92] </ref>. These extra points are not necessarily original data points, so this does not quite fit into our model. <p> Rippa [Rip90] showed that when the Delaunay triangulation is used to interpolate a bivariate function it minimizes the roughness of the interpolation. In some cases specific data dependent triangulation can give better results, though. Dyn et al.. [DLR90] examine different optimization criteria. Scarlatos and Pavlidis <ref> [SP90] </ref> adapt the triangulation to surface characteristics (ridge and valley lines). Bern et al.. [BEE + 93] propose an algorithm for computing the triangulation that minimizes the maximal gradient of the surface to be interpolated.
Reference: [Wat92] <author> David F. Watson. Contouring: </author> <title> A Guide to the Analysis and Display of Spatial Data. </title> <publisher> Pergamon, </publisher> <year> 1992. </year> <month> 19 </month>
Reference-contexts: The unoptimized code is about 4000 lines of C++, including the I/0 and debugging code. The program uses the PlaGeo and SpaGeo library for planar and spatial geometry [Gie94] and the Forms library for the graphical interface [Ove93]. The source code to calculate Delaunay triangulations <ref> [Wat92] </ref> was obtained from Watson at maths.uwa.edu.au. We tested our algorithm on data set that are based on 1:250,000-scale digital elevation models obtainable by anonymous ftp from edcftp.cr.usgs.gov:/pub/data/DEM/250. The chosen data sets consists of samples of the size 128x128 and the spacing of the elevations is 90m (3 arc-seconds).
References-found: 23

