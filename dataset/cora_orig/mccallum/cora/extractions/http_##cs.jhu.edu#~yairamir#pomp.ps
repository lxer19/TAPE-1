URL: http://cs.jhu.edu/~yairamir/pomp.ps
Refering-URL: http://cs.jhu.edu/~yairamir/
Root-URL: http://www.cs.jhu.edu
Title: Robust and Efficient Replication Using Group Communication  
Author: Y. Amir, D. Dolev, P. M. Melliar-Smith, L. E. Moser 
Address: Santa Barbara  
Affiliation: Hebrew University of Jerusalem University of California,  
Abstract: We present a new architecture and algorithm for distributed replicated database systems. The replication algorithm operates in the presence of message omission faults, processor crashes and recoveries, and network partitions and re-merges. The architecture exploits a group communication service to minimize communication costs and to eliminate forced disk writes in the critical path, while preserving complete and consistent operation. End-to-end agreement is required only after a change in the membership of the connected servers, rather than on a per action basis. The updates are globally ordered and, if the system has partitioned, they are applied to the database when they become known to the primary component of the partitioned system. An application may, however, read data and initiate updates at any time, even in a component that is not the primary component. This approach renders replication more efficient and more scalable and, therefore, applicable to many more systems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O. Amir, Y. Amir, and D. Dolev. </author> <title> A highly available application in the Transis environment. </title> <booktitle> In Proceedings of the Workshop on Hardware and Software Architectures for Fault Tolerance, Lecture Notes in Computer Science 774, </booktitle> <month> June </month> <year> 1993. </year>
Reference-contexts: In non-primary components, actions must be delayed until communication is restored and the servers learn of the order determined by the primary component. On notification of a membership change by the group communication layer, the replication servers exchange messages containing actions multicast before the membership change. As in <ref> [1] </ref>, this exchange of information ensures that every action known to a member of the primary component is applied to the object. Therefore, each member of the primary component applies the same sequence of actions in the same order, thus guaranteeing a consistent object state. <p> The replication servers implement a symmetric distributed algorithm to determine the order of actions to be applied to the object. Each server builds its own knowledge about the order of actions in the system. We use the coloring model defined in <ref> [1] </ref> to indicate the knowledge level associated with each action. <p> These systems and protocols make better use of the communication medium, particularly where data replication is required in an environment built as a collection of several local-area networks. Prior research <ref> [1] </ref> described an architecture that uses group communication to achieve consistent replication. The overall architecture and the liveness requirement of this proposal are taken from there. The serious inefficiency of [1] is the method of global total ordering, which uses a Lamport clock and requires an eventual path from every server <p> Prior research <ref> [1] </ref> described an architecture that uses group communication to achieve consistent replication. The overall architecture and the liveness requirement of this proposal are taken from there. The serious inefficiency of [1] is the method of global total ordering, which uses a Lamport clock and requires an eventual path from every server to apply a new action. This technique is highly efficient if causal order is sufficient and no faults occur, but has poor fault tolerance. <p> This technique is highly efficient if causal order is sufficient and no faults occur, but has poor fault tolerance. Keidar [17] uses the framework of <ref> [1] </ref> but replaces the requirement of an eventual path from every server by the requirement that a majority of the servers are connected. As far as we 15 know, that method is the only method of providing replication that always allows a connected majority of the servers to make progress. <p> As far as we 15 know, that method is the only method of providing replication that always allows a connected majority of the servers to make progress. Both <ref> [1] </ref> and [17] use the flow control and multicast properties of group communication, but both still need an end-to-end acknowledgment on a per action basis, diminishing the performance advantages of multicasting. 7 Conclusion Replicated database systems can provide high performance, as well as high availability, by utilizing advanced group communication protocols.
Reference: [2] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A communication subsystem for high availability. </title> <booktitle> In Proceedings of the 22nd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: We have focused on providing an additional level of knowledge within the group communication protocol, which allows us to reach agreement on a consistent transition from one configuration to another with minimal overhead. We show how our group communication techniques for Transis and Totem <ref> [2, 3, 18] </ref> can be utilized for database replication with high efficiency and strictly serializable semantics. 2 2 The Model 2.1 The Environment A replication service maintains an object in a distributed system. This object is replicated to improve performance and availability. <p> This approach eliminates the need for separate agreements on the claiming of locks, since such agreements can be derived from the ordering of messages. Group communication can exploit hardware broadcasting or multicasting when it is available. Reliable ordered delivery protocols that use hardware broadcasts and multicasts <ref> [2, 3, 18, 19] </ref> can achieve higher throughput and lower latency than protocols based on point-to-point communication. If the system partitions into several components, the replication layer identifies at most one component as the primary component. <p> Extended virtual synchrony [3, 20] extends the concept of virtual synchrony to systems in which the network can partition and remerge and to systems in which failed processors can be repaired and recover with stable storage intact. The Trans and Total protocols [19], the Lansis and Toto protocols <ref> [2] </ref>, and the Totem protocol [3, 18] for reliable totally ordered delivery all utilize the broadcast capability of the communication network. These protocols avoid the need to send separate messages and acknowledgments for each of the destinations.
Reference: [3] <author> Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, and P. Ciarfella. </author> <title> Fast message ordering and membership using a logical token-passing ring. </title> <booktitle> In Proceedings of the 13th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 551-560, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: We have focused on providing an additional level of knowledge within the group communication protocol, which allows us to reach agreement on a consistent transition from one configuration to another with minimal overhead. We show how our group communication techniques for Transis and Totem <ref> [2, 3, 18] </ref> can be utilized for database replication with high efficiency and strictly serializable semantics. 2 2 The Model 2.1 The Environment A replication service maintains an object in a distributed system. This object is replicated to improve performance and availability. <p> To overcome this problem, we have introduced the notion of extended virtual synchrony <ref> [3, 20] </ref>. The Totem and Transis systems, and more recently also the Horus system [28], implement group communication services that meet the requirements of extended virtual synchrony. <p> This approach eliminates the need for separate agreements on the claiming of locks, since such agreements can be derived from the ordering of messages. Group communication can exploit hardware broadcasting or multicasting when it is available. Reliable ordered delivery protocols that use hardware broadcasts and multicasts <ref> [2, 3, 18, 19] </ref> can achieve higher throughput and lower latency than protocols based on point-to-point communication. If the system partitions into several components, the replication layer identifies at most one component as the primary component. <p> Virtual synchrony ensures that two processors that transition together from one view (configuration) to another should see that view change at the same point in the message sequence and should deliver exactly the same set of messages in the first view. Extended virtual synchrony <ref> [3, 20] </ref> extends the concept of virtual synchrony to systems in which the network can partition and remerge and to systems in which failed processors can be repaired and recover with stable storage intact. <p> The Trans and Total protocols [19], the Lansis and Toto protocols [2], and the Totem protocol <ref> [3, 18] </ref> for reliable totally ordered delivery all utilize the broadcast capability of the communication network. These protocols avoid the need to send separate messages and acknowledgments for each of the destinations.
Reference: [4] <author> P. Bernstein, D. Shipman, and J. Rothnie. </author> <title> Concurrency control in a system for distributed databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 5(1) </volume> <pages> 18-51, </pages> <month> March </month> <year> 1980. </year>
Reference-contexts: Protocols have been developed to optimize specific cases: Some protocols limit the transactional model to commutative transactions [24]. Others give special weight to a specific processor or to a specific transaction [26]. Explicit use of timestamps enables other protocols <ref> [4] </ref> to avoid the need to claim locks or to globally totally order actions. Other applications settle for relaxed consistency criteria [12]. To reduce some of the communication costs, [9] maintains an approximate view of the server membership.
Reference: [5] <author> K. P. Birman and T. A. Joseph. </author> <title> Exploiting virtual synchrony in distributed systems. </title> <booktitle> In Proceedings of the 11th Annual ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 123-138, </pages> <month> November </month> <year> 1987. </year> <month> 16 </month>
Reference-contexts: One of the leading systems in the area of group communication is the Isis system [6], which provides totally ordered message delivery. Isis also introduced the concept of virtual synchrony <ref> [5] </ref> for systems that are subject to fail-stop processor faults.
Reference: [6] <author> K. P. Birman and T. A. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Transaction on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: When a partition occurs, if a majority of the quorum can communicate among themselves, a new and smaller quorum is established within which updates can be performed. One of the leading systems in the area of group communication is the Isis system <ref> [6] </ref>, which provides totally ordered message delivery. Isis also introduced the concept of virtual synchrony [5] for systems that are subject to fail-stop processor faults.
Reference: [7] <author> J. Chang and N. Maxemchuk. </author> <title> Reliable broadcast protocols. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: These protocols avoid the need to send separate messages and acknowledgments for each of the destinations. Similar approaches can be found in Psync [23], in Horus [28], in Amoeba [16], in Delta-4 [29], and in the Chang and Maxemchuk protocol <ref> [7] </ref>. These systems and protocols make better use of the communication medium, particularly where data replication is required in an environment built as a collection of several local-area networks. Prior research [1] described an architecture that uses group communication to achieve consistent replication.
Reference: [8] <author> D. R. Cheriton and D. Skeen. </author> <title> Understanding the limitations of causally and totally ordered communication. </title> <booktitle> In Proceedings of the 14th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 44-57, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Past group communication protocols focused on totally ordering messages at the group communication level. That service, although useful for many applications, is not enough to guarantee complete consistency at the application level without additional end-to-end acknowledgments, as has been noted by Cheriton and Skeen <ref> [8] </ref>. We have focused on providing an additional level of knowledge within the group communication protocol, which allows us to reach agreement on a consistent transition from one configuration to another with minimal overhead.
Reference: [9] <author> A. El Abbadi and S. Toueg. </author> <title> Availability in partitioned replicated databases. </title> <booktitle> In Proceedings of the 5th ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 240-251, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: Explicit use of timestamps enables other protocols [4] to avoid the need to claim locks or to globally totally order actions. Other applications settle for relaxed consistency criteria [12]. To reduce some of the communication costs, <ref> [9] </ref> maintains an approximate view of the server membership. In a fully replicated database, achieving a quorum is enough to commit a transaction. The basic quorum scheme uses majority voting [27] or weighted majority voting [11]. Dynamic linear voting [15] is a more advanced approach that defines the quorum adaptively.
Reference: [10] <author> K. Eswaran, J. Gray, R. Lorie, and I. Traiger. </author> <title> The notions of consistency and predicate locks in a database system. </title> <journal> Communications of the ACM, </journal> 19(11) 624-633, 1976. 
Reference-contexts: They may claim locks and, therefore, may be vulnerable to faults that can unnecessarily block the system for long periods of time. Most replicated database designs are based on two-phase commit protocols <ref> [10, 13] </ref>. A two-phase commit protocol can provide higher performance than a three-phase commit protocol [25], but incurs the risk of blocking. Even with this compromise, however, the performance of two-phase commit protocols is not good. <p> However, it is not always easy to adapt systems that work well for monarchy or majority to dynamic linear voting. 6 Related Work Much work has been done in the area of distributed replicated databases and in the area of group communicaiton. Two-phase-commit protocols <ref> [10, 13] </ref> are the main tools for providing a consistent view in a distributed replicated database system over an unreliable network.
Reference: [11] <author> D. Gifford. </author> <title> Weighted voting for replicated data. </title> <booktitle> In Proceedings of the 7th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 150-159, </pages> <month> December </month> <year> 1979. </year>
Reference-contexts: Therefore, we need a mechanism for selecting a primary component that can continue to apply actions to the object (the clean version of the object). Several techniques have been described in the literature <ref> [11, 15, 27] </ref>. * Monarchy. The component that contains a designated server becomes the primary component. * Majority. The component that contains a (weighted) majority of the servers becomes the primary component. * Dynamic Linear Voting. <p> To reduce some of the communication costs, [9] maintains an approximate view of the server membership. In a fully replicated database, achieving a quorum is enough to commit a transaction. The basic quorum scheme uses majority voting [27] or weighted majority voting <ref> [11] </ref>. Dynamic linear voting [15] is a more advanced approach that defines the quorum adaptively. This approach outperforms the static techniques as shown by [22].
Reference: [12] <author> R. A. Golding. </author> <title> Weak Consistency Group Communication and Membership. </title> <type> PhD thesis, </type> <institution> Computer and Information Sciences Board, University of California, Santa Cruz, </institution> <year> 1992. </year>
Reference-contexts: Others give special weight to a specific processor or to a specific transaction [26]. Explicit use of timestamps enables other protocols [4] to avoid the need to claim locks or to globally totally order actions. Other applications settle for relaxed consistency criteria <ref> [12] </ref>. To reduce some of the communication costs, [9] maintains an approximate view of the server membership. In a fully replicated database, achieving a quorum is enough to commit a transaction. The basic quorum scheme uses majority voting [27] or weighted majority voting [11].
Reference: [13] <author> J. Gray. </author> <booktitle> Notes on database operating systems. In Operating Systems: An Advanced Course, Lecture Notes in Computer Science 60, </booktitle> <pages> pages 393-481. </pages> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference-contexts: They may claim locks and, therefore, may be vulnerable to faults that can unnecessarily block the system for long periods of time. Most replicated database designs are based on two-phase commit protocols <ref> [10, 13] </ref>. A two-phase commit protocol can provide higher performance than a three-phase commit protocol [25], but incurs the risk of blocking. Even with this compromise, however, the performance of two-phase commit protocols is not good. <p> However, it is not always easy to adapt systems that work well for monarchy or majority to dynamic linear voting. 6 Related Work Much work has been done in the area of distributed replicated databases and in the area of group communicaiton. Two-phase-commit protocols <ref> [10, 13] </ref> are the main tools for providing a consistent view in a distributed replicated database system over an unreliable network.
Reference: [14] <author> J. Gray and A. Reuter. </author> <title> Transaction processing: Concepts and techniques. </title> <publisher> Mor-gan Kaufman Publishers, </publisher> <year> 1993. </year>
Reference-contexts: When the server is able to rejoin the primary component, the action will be re-applied to the consistent state of the object reflecting all prior actions, and the result of the dirty query may be different. The semantics of a dirty query are those described in <ref> [14] </ref>. In a primary component the results of the consistent query, weak query and dirty query are identical. <p> Our approach can, therefore, provide lower latency than existing database systems, while preserving strong consistency for updates and queries. A comparison of the time-lines of the two approaches is given in Figure 2. The time line for two-phase commit is taken from <ref> [14] </ref>. 9 5 The Algorithm 5.1 High-Level Description We now present a high-level description of the algorithm in the form of a finite state machine with four states, as shown in Figure 3. * Prim. The server currently belongs to the primary component.
Reference: [15] <author> S. Jajodia and D. Mutchler. </author> <title> Dynamic voting algorithms for maintaining the consistency of a replicated database. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(2) </volume> <pages> 230-280, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: If so, they shift to the Construct state; otherwise, they shift to the Non Prim state and form a non-primary component. We use dynamic linear voting <ref> [15] </ref> to determine the primary component. This check is done locally at each server without the need for additional exchange of messages between the servers. 10 * Construct. In this state, all of the servers in the component have identical knowledge about the configurations. <p> Therefore, we need a mechanism for selecting a primary component that can continue to apply actions to the object (the clean version of the object). Several techniques have been described in the literature <ref> [11, 15, 27] </ref>. * Monarchy. The component that contains a designated server becomes the primary component. * Majority. The component that contains a (weighted) majority of the servers becomes the primary component. * Dynamic Linear Voting. <p> To reduce some of the communication costs, [9] maintains an approximate view of the server membership. In a fully replicated database, achieving a quorum is enough to commit a transaction. The basic quorum scheme uses majority voting [27] or weighted majority voting [11]. Dynamic linear voting <ref> [15] </ref> is a more advanced approach that defines the quorum adaptively. This approach outperforms the static techniques as shown by [22]. When a partition occurs, if a majority of the quorum can communicate among themselves, a new and smaller quorum is established within which updates can be performed.
Reference: [16] <author> M. F. Kaashoek, A. S. Tanenbaum, S. F. Hummel, and H. E. Bal. </author> <title> An efficient reliable broadcast protocol. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-19, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: These protocols avoid the need to send separate messages and acknowledgments for each of the destinations. Similar approaches can be found in Psync [23], in Horus [28], in Amoeba <ref> [16] </ref>, in Delta-4 [29], and in the Chang and Maxemchuk protocol [7]. These systems and protocols make better use of the communication medium, particularly where data replication is required in an environment built as a collection of several local-area networks.
Reference: [17] <author> I. Keidar. </author> <title> A highly available paradigm for consistent object replication. </title> <type> Master's thesis, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Israel, </institution> <year> 1994. </year>
Reference-contexts: This technique is highly efficient if causal order is sufficient and no faults occur, but has poor fault tolerance. Keidar <ref> [17] </ref> uses the framework of [1] but replaces the requirement of an eventual path from every server by the requirement that a majority of the servers are connected. <p> As far as we 15 know, that method is the only method of providing replication that always allows a connected majority of the servers to make progress. Both [1] and <ref> [17] </ref> use the flow control and multicast properties of group communication, but both still need an end-to-end acknowledgment on a per action basis, diminishing the performance advantages of multicasting. 7 Conclusion Replicated database systems can provide high performance, as well as high availability, by utilizing advanced group communication protocols.
Reference: [18] <author> P. M. Melliar-Smith, L. E. Moser, and D. A. Agarwal. </author> <title> Ring-based ordering protocols. </title> <booktitle> In Proceedings of the IEE International Conference on Information Engineering, </booktitle> <pages> pages 882-891, </pages> <month> December </month> <year> 1991. </year> <month> 17 </month>
Reference-contexts: We have focused on providing an additional level of knowledge within the group communication protocol, which allows us to reach agreement on a consistent transition from one configuration to another with minimal overhead. We show how our group communication techniques for Transis and Totem <ref> [2, 3, 18] </ref> can be utilized for database replication with high efficiency and strictly serializable semantics. 2 2 The Model 2.1 The Environment A replication service maintains an object in a distributed system. This object is replicated to improve performance and availability. <p> This approach eliminates the need for separate agreements on the claiming of locks, since such agreements can be derived from the ordering of messages. Group communication can exploit hardware broadcasting or multicasting when it is available. Reliable ordered delivery protocols that use hardware broadcasts and multicasts <ref> [2, 3, 18, 19] </ref> can achieve higher throughput and lower latency than protocols based on point-to-point communication. If the system partitions into several components, the replication layer identifies at most one component as the primary component. <p> The Trans and Total protocols [19], the Lansis and Toto protocols [2], and the Totem protocol <ref> [3, 18] </ref> for reliable totally ordered delivery all utilize the broadcast capability of the communication network. These protocols avoid the need to send separate messages and acknowledgments for each of the destinations.
Reference: [19] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(1) </volume> <pages> 17-25, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: This approach eliminates the need for separate agreements on the claiming of locks, since such agreements can be derived from the ordering of messages. Group communication can exploit hardware broadcasting or multicasting when it is available. Reliable ordered delivery protocols that use hardware broadcasts and multicasts <ref> [2, 3, 18, 19] </ref> can achieve higher throughput and lower latency than protocols based on point-to-point communication. If the system partitions into several components, the replication layer identifies at most one component as the primary component. <p> Extended virtual synchrony [3, 20] extends the concept of virtual synchrony to systems in which the network can partition and remerge and to systems in which failed processors can be repaired and recover with stable storage intact. The Trans and Total protocols <ref> [19] </ref>, the Lansis and Toto protocols [2], and the Totem protocol [3, 18] for reliable totally ordered delivery all utilize the broadcast capability of the communication network. These protocols avoid the need to send separate messages and acknowledgments for each of the destinations.
Reference: [20] <author> L. E. Moser, Y. Amir, P. Melliar-Smith, and D. A. Agarwal. </author> <title> Extended virtual synchrony. </title> <booktitle> In Proceedings of the 14th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 56-65, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: To overcome this problem, we have introduced the notion of extended virtual synchrony <ref> [3, 20] </ref>. The Totem and Transis systems, and more recently also the Horus system [28], implement group communication services that meet the requirements of extended virtual synchrony. <p> Virtual synchrony ensures that two processors that transition together from one view (configuration) to another should see that view change at the same point in the message sequence and should deliver exactly the same set of messages in the first view. Extended virtual synchrony <ref> [3, 20] </ref> extends the concept of virtual synchrony to systems in which the network can partition and remerge and to systems in which failed processors can be repaired and recover with stable storage intact.
Reference: [21] <author> L. E. Moser and P. M. Melliar-Smith. </author> <title> Probabilistic bounds on message delivery for the Totem single-ring protocol. </title> <booktitle> In Proceedings of the 15th IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: The semantics of a dirty query are those described in [14]. In a primary component the results of the consistent query, weak query and dirty query are identical. In a primary component the latency of actions is determined by the safe delivery latency of the group communication layer (see <ref> [21] </ref> for an analysis of the latency of the Totem protocol) plus the processing time within the replication layer. The same is true for actions that contain a weak query part in a non-primary component.
Reference: [22] <author> J. F. Paris and D. D. E. </author> <title> Long. Efficient dynamic voting algorithms. </title> <booktitle> In Proceedings of the 4th International Conference on Data Engineering, </booktitle> <pages> pages 268-275, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: The component that contains a (weighted) majority of the servers becomes the primary component. * Dynamic Linear Voting. The component that contains a (weighted) majority of the last primary component becomes the primary component. Dynamic linear voting is generally accepted as the best technique, when certain reasonable conditions hold <ref> [22] </ref>. The choice of the weights and adapting them over time is beyond the scope of this paper. We employ dynamic linear voting. Any system that employs (weighted) dynamic linear voting can use (weighted) majority, since majority is a special case of dynamic linear voting. <p> The basic quorum scheme uses majority voting [27] or weighted majority voting [11]. Dynamic linear voting [15] is a more advanced approach that defines the quorum adaptively. This approach outperforms the static techniques as shown by <ref> [22] </ref>. When a partition occurs, if a majority of the quorum can communicate among themselves, a new and smaller quorum is established within which updates can be performed. One of the leading systems in the area of group communication is the Isis system [6], which provides totally ordered message delivery.
Reference: [23] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: These protocols avoid the need to send separate messages and acknowledgments for each of the destinations. Similar approaches can be found in Psync <ref> [23] </ref>, in Horus [28], in Amoeba [16], in Delta-4 [29], and in the Chang and Maxemchuk protocol [7]. These systems and protocols make better use of the communication medium, particularly where data replication is required in an environment built as a collection of several local-area networks.
Reference: [24] <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In Proceedings of the ACM SIGMOD Symposium on the Management of Data, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: Three--phase-commit protocols [25] try to overcome some of the availability problems of two-phase-commit protocols, paying the price of an additional communication round and, therefore, of additional latency. Protocols have been developed to optimize specific cases: Some protocols limit the transactional model to commutative transactions <ref> [24] </ref>. Others give special weight to a specific processor or to a specific transaction [26]. Explicit use of timestamps enables other protocols [4] to avoid the need to claim locks or to globally totally order actions. Other applications settle for relaxed consistency criteria [12].
Reference: [25] <author> D. Skeen. </author> <title> A quorum-based commit protocol. </title> <booktitle> In Berkeley Workshop on Distributed Data Management and Computer Network, </booktitle> <volume> number 6, </volume> <pages> pages 69-80, </pages> <month> February </month> <year> 1982. </year>
Reference-contexts: They may claim locks and, therefore, may be vulnerable to faults that can unnecessarily block the system for long periods of time. Most replicated database designs are based on two-phase commit protocols [10, 13]. A two-phase commit protocol can provide higher performance than a three-phase commit protocol <ref> [25] </ref>, but incurs the risk of blocking. Even with this compromise, however, the performance of two-phase commit protocols is not good. Consequently, replicated databases are used mostly to improve availability, and the number of replicas is limited to two or three. Replication is seldom used to boost performance. <p> These protocols impose a substantial additional communication cost on each transaction but, despite this substantial cost, if the transaction coordinator fails, other processors may be unable to commit the last transaction and 14 the entire system may be blocked until every failed processor has recovered. Three--phase-commit protocols <ref> [25] </ref> try to overcome some of the availability problems of two-phase-commit protocols, paying the price of an additional communication round and, therefore, of additional latency. Protocols have been developed to optimize specific cases: Some protocols limit the transactional model to commutative transactions [24].
Reference: [26] <author> M. Stonebraker. </author> <title> Concurrency control and consistency of multiple copies of data in distributed Ingres. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 3(3) </volume> <pages> 188-194, </pages> <month> May </month> <year> 1979. </year>
Reference-contexts: Protocols have been developed to optimize specific cases: Some protocols limit the transactional model to commutative transactions [24]. Others give special weight to a specific processor or to a specific transaction <ref> [26] </ref>. Explicit use of timestamps enables other protocols [4] to avoid the need to claim locks or to globally totally order actions. Other applications settle for relaxed consistency criteria [12]. To reduce some of the communication costs, [9] maintains an approximate view of the server membership.
Reference: [27] <author> R. Thomas. </author> <title> A majority consensus approach to concurrency control for multiple copy databases. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 4(2) </volume> <pages> 180-209, </pages> <month> June </month> <year> 1979. </year>
Reference-contexts: Therefore, we need a mechanism for selecting a primary component that can continue to apply actions to the object (the clean version of the object). Several techniques have been described in the literature <ref> [11, 15, 27] </ref>. * Monarchy. The component that contains a designated server becomes the primary component. * Majority. The component that contains a (weighted) majority of the servers becomes the primary component. * Dynamic Linear Voting. <p> Other applications settle for relaxed consistency criteria [12]. To reduce some of the communication costs, [9] maintains an approximate view of the server membership. In a fully replicated database, achieving a quorum is enough to commit a transaction. The basic quorum scheme uses majority voting <ref> [27] </ref> or weighted majority voting [11]. Dynamic linear voting [15] is a more advanced approach that defines the quorum adaptively. This approach outperforms the static techniques as shown by [22].
Reference: [28] <author> R. van Renesse, T. M. Hickey, and K. P. Birman. </author> <title> Design and performance of Horus: A lightweight group communications system. </title> <type> Technical Report 94-1442, </type> <institution> Cornell University, Department of Computer Science, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: To overcome this problem, we have introduced the notion of extended virtual synchrony [3, 20]. The Totem and Transis systems, and more recently also the Horus system <ref> [28] </ref>, implement group communication services that meet the requirements of extended virtual synchrony. The group communication layer determines configurations as sets of servers such that every server within the set can communicate with every other server within the set. <p> These protocols avoid the need to send separate messages and acknowledgments for each of the destinations. Similar approaches can be found in Psync [23], in Horus <ref> [28] </ref>, in Amoeba [16], in Delta-4 [29], and in the Chang and Maxemchuk protocol [7]. These systems and protocols make better use of the communication medium, particularly where data replication is required in an environment built as a collection of several local-area networks.
Reference: [29] <author> P. Verissimo, L. Rodrigues, and J. Rufino. </author> <title> The Atomic Multicast Protocol (AMp). </title> <editor> In D. Powell, editor, Delta-4: </editor> <booktitle> A Generic Architecture for Dependable Distributed Computing, </booktitle> <pages> pages 267-294. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year> <month> 18 </month>
Reference-contexts: These protocols avoid the need to send separate messages and acknowledgments for each of the destinations. Similar approaches can be found in Psync [23], in Horus [28], in Amoeba [16], in Delta-4 <ref> [29] </ref>, and in the Chang and Maxemchuk protocol [7]. These systems and protocols make better use of the communication medium, particularly where data replication is required in an environment built as a collection of several local-area networks.
References-found: 29

