URL: http://www.tns.lcs.mit.edu/~djw/library/messengers-ICDCS97.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/
Root-URL: 
Email: e-mail: fmfukuda, bic, dillenco, fmerchang@ics.uci.edu  
Title: Messages versus Messengers in Distributed Programming  
Author: Munehiro Fukuda, Lubomir F. Bic, Michael B. Dillencourt, Fehmina Merchant 
Address: Irvine, CA 92697  
Affiliation: Department of Information and Computer Science University of California,  
Abstract: Messengers are autonomous objects, each capable of navigating through the underlying network and performing various tasks at each node. Messengers applications are written using navigational commands rather than the send/receive primitives of conventional message-passing approaches. In this paper we contrast the two programming styles. The navigational style generally results in a smaller semantic gap between abstract algorithm descriptions and their actual implementations, which makes programs easier to construct, understand, and maintain. Other advantages of the navigational programming style include the ability to compute in unknown or dynamically changing network topologies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.-M. Andreoli, C. Hankin, and D. Le Metayer (Eds). </author> <title> Coordination Programming: Mechanisms, Models, and Semantics. </title> <publisher> Imperial College Press, </publisher> <address> London, UK, </address> <year> 1996. </year>
Reference-contexts: Both WAVE and BPEM had a major influence on the Messengers system, presented in this paper, which uses some of their basic navigational principles. A third area of related research is coordination paradigms <ref> [1, 10] </ref>, which provide the synchronization, communication, and creation/destruction of computational activities required to orchestrate the individual computations into a coherent system. Examples of coordination paradigms include Gamma [4], Linda [8], and the IWIM model [3].
Reference: [2] <author> G.R. Andrews. </author> <title> Paradigms for process interaction in distributed programs. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(1) </volume> <pages> 49-90, </pages> <year> 1991. </year>
Reference-contexts: A standard solution to this problem using conventional send and receive primitives, taken from <ref> [2] </ref>, is shown in Figures 4 (a). It uses neighbor set communication to send the message from one node to all its active neighbors. running on each node participating in the diffusion. The diffusion is initiated by sending a message (msg) to any of the nodes.
Reference: [3] <author> F. Arbab. </author> <title> The IWIM model for coordination of concurrent activities. </title> <editor> In P. Ciancarini and C. Hankin, editors, </editor> <booktitle> Coordination Languages and Models, </booktitle> <pages> pages 34-56, </pages> <address> Cesena, Italy, April 1996. </address> <publisher> Springer Verlag Lecture Notes in Computer Science 1061. </publisher>
Reference-contexts: A third area of related research is coordination paradigms [1, 10], which provide the synchronization, communication, and creation/destruction of computational activities required to orchestrate the individual computations into a coherent system. Examples of coordination paradigms include Gamma [4], Linda [8], and the IWIM model <ref> [3] </ref>. Messengers is similar in some respects to PoliS [9], a variant of Linda intended to simplify the design of distributed systems by incorporating explicit partitioning of the underlying state space (called a "tuple space" in the Linda model).
Reference: [4] <author> J-P. Ban^atre and D. Le Metayer. </author> <title> Programming by multiset transformation. </title> <journal> CACM, </journal> <volume> 36(1) </volume> <pages> 98-111, </pages> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: A third area of related research is coordination paradigms [1, 10], which provide the synchronization, communication, and creation/destruction of computational activities required to orchestrate the individual computations into a coherent system. Examples of coordination paradigms include Gamma <ref> [4] </ref>, Linda [8], and the IWIM model [3]. Messengers is similar in some respects to PoliS [9], a variant of Linda intended to simplify the design of distributed systems by incorporating explicit partitioning of the underlying state space (called a "tuple space" in the Linda model).
Reference: [5] <author> L. Bic, M. Fukuda, and M. Dillencourt. </author> <title> Distributed Computing using Autonomous Objects. </title> <booktitle> IEEE Computer, </booktitle> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: Autonomous messages have been used for a variety of applications, as will be discussed in Section 4. In this paper we concentrate on general-purpose distributed computation, as developed in WAVE [19], BPEM [6], and most recently, our Messengers sys tem <ref> [5] </ref>. In these systems, autonomous messages serve as active mobile entities that coordinate the computation in both time and space. There are two fundamental characteristics that distinguish Messengers-based systems from message-passing systems: * Messengers are capable of creating and using a logical network. <p> Our examples demonstrate that this new paradigm offers elegant solutions to problems that would be difficult to achieve using more traditional approaches. 2 MESSENGERS 2.1 Principles of Operation Messengers <ref> [5, 12] </ref> is a system that supports the development and use of distributed applications structured as collections of autonomous objects, called Messengers 1 .
Reference: [6] <author> L. Bic and C. Lee. </author> <title> A data-driven model for a subset of logic programming. </title> <journal> ACM TOPLAS, </journal> <volume> 9(4), </volume> <month> Oct. </month> <year> 1987. </year>
Reference-contexts: To distinguish such autonomous messages from simple passive data messages, we refer to them as Messengers. Autonomous messages have been used for a variety of applications, as will be discussed in Section 4. In this paper we concentrate on general-purpose distributed computation, as developed in WAVE [19], BPEM <ref> [6] </ref>, and most recently, our Messengers sys tem [5]. In these systems, autonomous messages serve as active mobile entities that coordinate the computation in both time and space. <p> There have been previous systems applying autonomous messages to general-purpose distributed computing, seeking to harness the computational capacity of the underlying network to speed up some computational task. Two systems, BPEM and WAVE, were among the first to explore these concepts. BPEM <ref> [6] </ref> is a computational model designed to facilitate the parallel processing of knowledge, represented in the form of semantic nets. WAVE [19] is a complete environment consisting of a specialized language to express arbitrary autonomous objects behaviors, and a run-time system of interpreters.
Reference: [7] <author> B. Bidyuk. </author> <title> MESSENGERS-C Compiler Manual. </title> <type> Report MSGR-06, </type> <institution> University of California, Irvine, </institution> <year> 1996. </year>
Reference-contexts: Messenger programs, referred to as Messenger scripts, are written in a subset of C and are compiled into a form of byte code for more efficient transport and parsing <ref> [7] </ref>. Each script is carried in its entirety by the Messenger as it propagates through the network and is replicated each time the Messenger needs to follow more than one logical link. This requires a programming style different from the commonly used approaches to distributed computing.
Reference: [8] <author> N. Carriero and D. Gelernter. </author> <title> Linda in context. </title> <journal> Comm. ACM, </journal> <volume> 32(4) </volume> <pages> 444-458, </pages> <month> Apr. </month> <year> 1989. </year>
Reference-contexts: A third area of related research is coordination paradigms [1, 10], which provide the synchronization, communication, and creation/destruction of computational activities required to orchestrate the individual computations into a coherent system. Examples of coordination paradigms include Gamma [4], Linda <ref> [8] </ref>, and the IWIM model [3]. Messengers is similar in some respects to PoliS [9], a variant of Linda intended to simplify the design of distributed systems by incorporating explicit partitioning of the underlying state space (called a "tuple space" in the Linda model).
Reference: [9] <author> P. Ciancarini. </author> <title> Distributed programming with logic tuple spaces. </title> <journal> New Generation Computing, </journal> <volume> 12(3) </volume> <pages> 251-284, </pages> <year> 1994. </year>
Reference-contexts: Examples of coordination paradigms include Gamma [4], Linda [8], and the IWIM model [3]. Messengers is similar in some respects to PoliS <ref> [9] </ref>, a variant of Linda intended to simplify the design of distributed systems by incorporating explicit partitioning of the underlying state space (called a "tuple space" in the Linda model). One difference is that in PoliS, computational objects (called "agents") communicate by writing messages in other agents' tuple spaces.
Reference: [10] <editor> P. Ciancarini and C. Hankin (Eds.). </editor> <booktitle> Coordination Languages and Models, Proc. First Int'l Conf, </booktitle> <address> COORDINATION'96. Cesena, Italy, </address> <month> Apr., </month> <year> 1996. </year>
Reference-contexts: Both WAVE and BPEM had a major influence on the Messengers system, presented in this paper, which uses some of their basic navigational principles. A third area of related research is coordination paradigms <ref> [1, 10] </ref>, which provide the synchronization, communication, and creation/destruction of computational activities required to orchestrate the individual computations into a coherent system. Examples of coordination paradigms include Gamma [4], Linda [8], and the IWIM model [3].
Reference: [11] <author> M. Fukuda. </author> <title> MESSENGERS System Library Manual. </title> <type> Report MSGR-02, </type> <institution> University of Cali-fornia, Irvine, </institution> <year> 1996. </year>
Reference: [12] <author> M. Fukuda, L. F. Bic, and M. B. Dillencourt. MESSENGERS: </author> <title> A Distributed Computing Environment for Autonomous Objects. </title> <type> Technical report, TR 96-20, </type> <institution> Information and Computer Science, University of California, Irvine, </institution> <year> 1996. </year>
Reference-contexts: Our examples demonstrate that this new paradigm offers elegant solutions to problems that would be difficult to achieve using more traditional approaches. 2 MESSENGERS 2.1 Principles of Operation Messengers <ref> [5, 12] </ref> is a system that supports the development and use of distributed applications structured as collections of autonomous objects, called Messengers 1 .
Reference: [13] <author> M. Fukuda, L. F. Bic, M. B. Dillencourt, and F. Merchant, </author> <title> Distributed Coordination with MESSENGERS. </title> <type> Technical report, TR 97-10, </type> <institution> Information and Computer Science, University of California, Irvine, </institution> <year> 1997. </year>
Reference-contexts: If the optional parameter ALL is omitted, choose one of the possible daemons and create the logical node n i on it. (The choice is made by a set of rules that are beyond the scope of this paper <ref> [13] </ref>.) The newly created logical node n i can be named (using a variable or constant) or unnamed (~), and can be connected to the current node c by the link l i , which could be named (using a variable or constant) or unnamed (~). <p> Messengers provides a logical network, whose size and topology are completely independent from the underlying daemon or physical networks. This is used by the application to organize and manage its data, which is accessed using powerful navigational commands that include implicit replication based on a navigational calculus <ref> [13] </ref>. In contrast, mobile agents navigate directly in the physical network, and the commands used for this purpose are generally limited to simply transferring the agent to another node.
Reference: [14] <author> T.H. Geesink. </author> <title> The coordination of distributed active messages in a dynamic network topology. </title> <journal> The Computer Journal, </journal> <volume> 34(6), </volume> <year> 1991. </year>
Reference: [15] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jieng, R. Manchek, and V. Sunderam. </author> <title> PVM: Parallel Virtual Machine. A User's Guide and Tutorial for Networked Parallel Computing. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1994. </year>
Reference-contexts: = recv (any_worker) (13) i = who_sent (res) (14) kill (worker [i] ) (15) deposit (res) - (16) - (17) worker ()- (18) while (TRUE)- (19) task = recv (manager) (20) res = compute (task) (21) send (manager, res) - (22) - program is an adaptation of a PVM program <ref> [15] </ref>, where unnecessary details, such as data packing/unpacking, buffering, etc, have been abstracted away for clarity. The program is divided into two distinct functions.
Reference: [16] <author> A. Lingnau, O. Drobnik, and P. Domel. </author> <title> An HTTP-based infrastructure for mobile agents. </title> <booktitle> In Fourth International World Wide Web Conference Proceedings, </booktitle> <pages> pages 461-471, </pages> <address> Sebastopol, CA, </address> <month> December </month> <year> 1995. </year> <institution> O'Reilly and Associates. </institution>
Reference: [17] <author> MA '97: </author> <booktitle> First International Conference on Mobile Agents. </booktitle> <address> Berlin, Germany, </address> <month> Apr., </month> <year> 1997. </year> <note> Springer-Verlag Lecture Notes in Computer Science, to appear. </note>
Reference-contexts: same (application-independent) interpreter, which runs continuously in every node. 4 Related Research Autonomous messages have been employed in the construction of "intelligent" mobile agents, which are programs capable of physically moving through wide-area communication networks (notably the Internet) and performing a variety of service tasks on behalf of their users <ref> [17] </ref>. While Messengers and mobile agents share the same basic principle of autonomous navigation, they differ with respect to both intent and structure. Mobile agents typically aim at providing a vehicle for using various distributed services available on wide area networks; Messengers, in contrast, is aimed at general-purpose computing.
Reference: [18] <author> P.W. Richardson and T. Danielsen. </author> <title> Intelligent messages or when messages come alive. </title> <editor> In K. Boy-anov and R. Angelinov, editors, </editor> <booktitle> Network Information Processing Systems. </booktitle> <publisher> North-Holland, </publisher> <year> 1989. </year>
Reference: [19] <author> P.S. Sapaty and P.M. Borst. </author> <title> An overview of the WAVE language and system for distributed processing of open networks. </title> <type> Technical report, </type> <institution> University of Surrey, UK, </institution> <year> 1994. </year>
Reference-contexts: To distinguish such autonomous messages from simple passive data messages, we refer to them as Messengers. Autonomous messages have been used for a variety of applications, as will be discussed in Section 4. In this paper we concentrate on general-purpose distributed computation, as developed in WAVE <ref> [19] </ref>, BPEM [6], and most recently, our Messengers sys tem [5]. In these systems, autonomous messages serve as active mobile entities that coordinate the computation in both time and space. <p> Two systems, BPEM and WAVE, were among the first to explore these concepts. BPEM [6] is a computational model designed to facilitate the parallel processing of knowledge, represented in the form of semantic nets. WAVE <ref> [19] </ref> is a complete environment consisting of a specialized language to express arbitrary autonomous objects behaviors, and a run-time system of interpreters. Both WAVE and BPEM had a major influence on the Messengers system, presented in this paper, which uses some of their basic navigational principles.
References-found: 19

