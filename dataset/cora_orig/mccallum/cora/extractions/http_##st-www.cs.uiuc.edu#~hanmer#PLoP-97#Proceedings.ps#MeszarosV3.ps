URL: http://st-www.cs.uiuc.edu/~hanmer/PLoP-97/Proceedings.ps/MeszarosV3.ps
Refering-URL: http://st-www.cs.uiuc.edu/~hanmer/PLoP-97/Workshops.html
Root-URL: http://www.cs.uiuc.edu
Email: email: gerard@osgcanada.com  
Phone: Phone: 1-403-210-2967  
Title: 12Aug97 Archi-Patterns: A Process Pattern Language for Defining Architectures  A Process Pattern Language for Defining Architectures  
Author: Author: Gerard Meszaros 
Address: 87 Connaught Drive NW, Calgary, Alberta, Canada T2K 1V9  
Affiliation: Object Systems Group  
Note: Page 1 Copyright 1997, Gerard Meszaros Permission granted to copy for PLoP '97 Conference. All other rights reserved. Archi-Patterns 1  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [AuerBeck96] <author> Ken Auer, Kent Beck, </author> <title> Lazy Optimization: Patterns for Efficient Smalltalk Programming in PLoPD96. </title>
Reference-contexts: Related Patterns: There are, of course, other ways to speed up a system. Examples include the patterns 12Aug97 Archi-Patterns: A Process Pattern Language for Defining Architectures Page 32 Copyright 1997, Gerard Meszaros Permission granted to copy for PLoP '97 Conference. All other rights reserved. described in <ref> [AuerBeck96] </ref>, [Meszaros96] and [Petriu97]. 3. Concluding Remarks I hope the reader has found these patterns useful and for the most part understandable. I would welcome comments directed to me by email.
Reference: [Catalysis96] <author> Desmond D'Souza, Alan Wills. </author> <note> CATALYSIS-Practical Rigor and Refinement . URL: http:/www.iconcomp.com </note>
Reference-contexts: Where the implementation needs to be optimized, ensure you OptimizeBehindInterfaces. 12Aug97 Archi-Patterns: A Process Pattern Language for Defining Architectures Page 25 Copyright 1997, Gerard Meszaros Permission granted to copy for PLoP '97 Conference. All other rights reserved. Known Uses: The Catalysis methodology <ref> [Catalysis96] </ref> describes the use of Type Models to define the behavior of an interface. In Analysis Patterns [Fowler96], Martin Fowler writes about the use of Type Models as a way of specifying the behavior of the implementation. <p> Type Models are defined in a number of recent works including: Catalysis <ref> [Catalysis96] </ref> Analysis Patterns [Fowler96] A particularly amusing exposition on the subject is Data or Behavior Driven by Desmond DeSouza. [DeSouza96?]. It states that even for a relatively well understood concept such as a Stack, the semantics are quite complicated.
Reference: [Change] <author> Doug Bennett, </author> <title> A Technique for Evaluating Designs, </title> <booktitle> OOPSLA'94 Tutorial </booktitle>
Reference-contexts: Ensure that the architecture you choose or define addresses all current functional requirements as well as all the Change Cases <ref> [Change] </ref> of your application. (Or at least ensure that it can be easily extended to address them in the future.) For the purpose of this pattern language, an architecture can be considered to be: A pattern (or blueprint) for organizing a set of components to solve a particular class of problem
Reference: [Cockburn96] <author> Alistair Cockburn, </author> <title> Structuring Use-Cases with Goals </title>
Reference-contexts: Solution: Organize the requirements into a Requirements View of the architecture. Abstract out the details of the user interface to create simpler, less implementation oriented use Cases ( ref: Essential Use Cases). Gather ConditionBasedScenarios <ref> [Cockburn96] </ref> with a common objective under a single GoalOrientedUseCase. [Cockburn96] 2.5.3 Interaction View Context: You are building a large complex system which will have many components which will have to interact with one another at runtime. <p> Solution: Organize the requirements into a Requirements View of the architecture. Abstract out the details of the user interface to create simpler, less implementation oriented use Cases ( ref: Essential Use Cases). Gather ConditionBasedScenarios <ref> [Cockburn96] </ref> with a common objective under a single GoalOrientedUseCase. [Cockburn96] 2.5.3 Interaction View Context: You are building a large complex system which will have many components which will have to interact with one another at runtime.
Reference: [Cope95] <author> Jim Coplien, </author> <title> A Generative Process Pattern Language in PLoPD95 </title>
Reference-contexts: These will later form the basis of the test suite to validate any implementation of the component. (description of the requirements of the architecture vs. description of the requirements of each component this architecture is made of/consists of ) Architect Controls Product in <ref> [Cope95] </ref> suggests that an architect should be in charge of an entire family of systems while individual project managers are responsible for delivery 12Aug97 Archi-Patterns: A Process Pattern Language for Defining Architectures Page 7 Copyright 1997, Gerard Meszaros Permission granted to copy for PLoP '97 Conference. <p> A sub-domain is defined as being a collection of concepts (abstractions) that relate much more closely to each other than they do to concepts in the other sub-domains. Related Patterns: OrganizationFollowsArchitecture <ref> [Cope95] </ref> should be used to help reinforce the architecture by ensuring that organizational boundaries coincide with architectural ones. This prevents the two forces from working at cross-purposes. Examples: Examples of sub-domains of a typical business system architecture are BusinessArchitecture and TechnicalArchitecture. <p> All other rights reserved. Extensions 2 to add the additional behavior and attributes which are only required by some Business Processes. Related Patterns: ArtifactOwner <ref> [Cope95] </ref> states that any artifact which is considered valuable must have an owner who is assigned the responsibility for maintaining its integrity (otherwise it is sure to lose its value over time.) Implementation: When you get to the point of implementing your system, all your Business Objects should inherit their basic <p> It is enough to come up with one; there is no need to decide which of several possible implementations is best. (Leave that to the developer (s) of the implementation!) Related Patterns: ArchitectAlsoImplements <ref> [Cope95] </ref> ensures that the architect has current enough implementation skills so that (s)he can reliably envision at least one possible implementation for any architectural element. 2.6.5 Most Encapsulated Implementations Context: You have defined the components of your architecture.
Reference: [Fowler96] <author> Martin Fowler, </author> <title> Analysis Patterns - Reusable Object Models </title>
Reference-contexts: All other rights reserved. Known Uses: The Catalysis methodology [Catalysis96] describes the use of Type Models to define the behavior of an interface. In Analysis Patterns <ref> [Fowler96] </ref>, Martin Fowler writes about the use of Type Models as a way of specifying the behavior of the implementation. <p> Type Models are defined in a number of recent works including: Catalysis [Catalysis96] Analysis Patterns <ref> [Fowler96] </ref> A particularly amusing exposition on the subject is Data or Behavior Driven by Desmond DeSouza. [DeSouza96?]. It states that even for a relatively well understood concept such as a Stack, the semantics are quite complicated.
Reference: [GHJV94] <author> Erich Gamma, Richard Helm, Ralph Johnson, </author> <title> John Vlissides Design Patterns: Elements of Reusable ObjectOriented Software. </title> <publisher> Addison-Wesley. </publisher> <address> ISBN 0-201-63361-2. </address>
Reference: [Hopley96] <institution> Allan Hopley "Decision Capture and Deferral Pattern Language" in [PLoPD96] </institution>
Reference: [HOPP95] <author> Gerard Meszaros, </author> <title> Half-Object Plus Protocol in PLoPD95 12Aug97 Archi-Patterns: A Process Pattern Language for Defining Architectures Page 33 Copyright 1997, Gerard Meszaros Permission granted to copy for PLoP '97 Conference. All other rights reserved. </title>
Reference-contexts: Hide all distribution boundaries behind object interfaces. (Refer to the pattern Encapsulated Implementation ) Where an object needs to be easily accessible from several (or many) object spaces, replicate the object using HalfObjectPlusProtocol <ref> [HOPP95] </ref>. Where it is acceptable to use remote messaging to access an object, use RemoteProxy [Siemans96]. A hybrid approach is Caching Proxy [Siemans96]. These are all examples of OptimizedBehindInterfaces.
Reference: [Meszaros96] <author> Gerard Meszaros, </author> <title> Patterns for Improving the Capacity of Reactive Systems in PLoPD96. </title>
Reference-contexts: Related Patterns: There are, of course, other ways to speed up a system. Examples include the patterns 12Aug97 Archi-Patterns: A Process Pattern Language for Defining Architectures Page 32 Copyright 1997, Gerard Meszaros Permission granted to copy for PLoP '97 Conference. All other rights reserved. described in [AuerBeck96], <ref> [Meszaros96] </ref> and [Petriu97]. 3. Concluding Remarks I hope the reader has found these patterns useful and for the most part understandable. I would welcome comments directed to me by email.
Reference: [Meyer9?] <author> Bertrand Meyer, </author> <title> Object Oriented Software Engineering??? </title>
Reference-contexts: The post-condition of each use case describes the resulting set of objects and their query-able states. Known Uses: The concept of Preconditions, Postconditions and Invariants are discussed in detail in <ref> [Meyer9?] </ref>. Though they are not cast in pattern form, they are generally accepted as a way of adding semantic information to an interface description. [Catalysis97] extends this work by proposing a grammar for specifying the semantics of the operations.
Reference: [OopsArch96] <editor> Gerard Meszaros et al, </editor> <booktitle> Workshop Report Patterns in System Architecture in Addendum to the Proceedings of OOPSLA96 </booktitle>
Reference-contexts: All other rights reserved. Solution: For each object in the LogicalArchitecture, decide in which network elements it will reside (using the patterns ObjectsLiveAtHome <ref> [OopsArch96] </ref> and HomelessObjectsLiveWithTheirBestFriends [OopsArch96]. Hide all distribution boundaries behind object interfaces. (Refer to the pattern Encapsulated Implementation ) Where an object needs to be easily accessible from several (or many) object spaces, replicate the object using HalfObjectPlusProtocol [HOPP95]. <p> All other rights reserved. Solution: For each object in the LogicalArchitecture, decide in which network elements it will reside (using the patterns ObjectsLiveAtHome <ref> [OopsArch96] </ref> and HomelessObjectsLiveWithTheirBestFriends [OopsArch96]. Hide all distribution boundaries behind object interfaces. (Refer to the pattern Encapsulated Implementation ) Where an object needs to be easily accessible from several (or many) object spaces, replicate the object using HalfObjectPlusProtocol [HOPP95]. Where it is acceptable to use remote messaging to access an object, use RemoteProxy [Siemans96].
Reference: [Petriu] <author> Dorina Petriu, Gurudas Somadder, </author> <title> A Pattern Language For Improving the Capacity of Layered Client/Server Systems with Multi-Threaded Servers in proceedings of EuroPlop97. </title>
Reference: [PLoPD95] <author> Jim Coplien, Doug Schmidt Eds. </author> <title> Pattern Languages of Program Design published by Addison-Wesley in 1995. </title>
Reference: [PLoPD96] <author> John Vlissides, Jim Coplien, </author> <title> Norm Kerth, Eds. Pattern Languages of Program Design 2 published by Addison-Wesley in 1996. </title> <editor> [PLoPD97] ???? Eds. </editor> <title> Pattern Languages of Program Design 3 to be published by Addison-Wesley in 1997. </title>
Reference: [PWP97] <author> Gerard Meszaros and James Doble, </author> <title> Patterns for Pattern Writing in [PLoPD97] </title>
Reference-contexts: I would be more than happy to receive comments on the other patterns of the language in any form including marked-up manuscripts, email, verbally, etc. 1.2 Notation and Organization This pattern language uses a number of conventions suggested in Patterns for Writing Patterns <ref> [PWP97] </ref>. Specifically, it attempts to use EvocativePatternNames to communicate the essence of each pattern. To set them off from the surrounding text, the names are concatenated in the WikiWeb (or Smalltalk) style with all blanks removed.
Reference: [Shaw95] <author> Mary Shaw, </author> <title> Patterns in Software Architecture. </title> <booktitle> In [PLoPD95] </booktitle>
Reference: [Siemans96] <author> Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, Michael Stal, </author> <title> Pattern-Oriented Software Architecture - A System of Patterns. </title> <publisher> John Wiley & Sons ISBN 0-471-95869-7 </publisher>
Reference-contexts: Hide all distribution boundaries behind object interfaces. (Refer to the pattern Encapsulated Implementation ) Where an object needs to be easily accessible from several (or many) object spaces, replicate the object using HalfObjectPlusProtocol [HOPP95]. Where it is acceptable to use remote messaging to access an object, use RemoteProxy <ref> [Siemans96] </ref>. A hybrid approach is Caching Proxy [Siemans96]. These are all examples of OptimizedBehindInterfaces. <p> Where it is acceptable to use remote messaging to access an object, use RemoteProxy <ref> [Siemans96] </ref>. A hybrid approach is Caching Proxy [Siemans96]. These are all examples of OptimizedBehindInterfaces. Related Patterns UML refers to the deployed system architecture as the Deployment View. [UML97] 2.5 Multiple Architectural Views Context: You are capturing the architecture of a system or one of its components, for the purpose of communicating the architecture to others.
Reference: [UML97] <author> Rumboochatory, </author> <note> UML 1.0 Specification URL: www.rational.com </note>
Reference-contexts: Known Uses: UML also refers to this as the Physical Architecture. <ref> [UML97] </ref> 2.4.4 Mapped Architecture Alias: Deployment Architecture Context: You are building a system which will be deployed in a multi-computing environment. You have defined a Logical Architecture and have designed or been mandated a Physical Architecture. <p> Where it is acceptable to use remote messaging to access an object, use RemoteProxy [Siemans96]. A hybrid approach is Caching Proxy [Siemans96]. These are all examples of OptimizedBehindInterfaces. Related Patterns UML refers to the deployed system architecture as the Deployment View. <ref> [UML97] </ref> 2.5 Multiple Architectural Views Context: You are capturing the architecture of a system or one of its components, for the purpose of communicating the architecture to others.
References-found: 19

