URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-95-57.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: A Scan-Line Algorithm for Volume Rendering of Multiple Curvilinear Grids UCSC-CRL-95-57  
Author: Jane Wilhelms Paul Tarantino Allen Van Gelder 
Date: November 20, 1995  
Address: Santa Cruz  
Affiliation: University of California,  
Abstract: This report presents a volume rendering technique that is based on a scan-line algorithm with depth sorting. The algorithm can handle any connected grid, including multiple non-convex intersecting curvilinear grids, and is designed to be run in parallel on a MIMD architecture. Variable resolution is achieved by changing the height and width of the output screen. Scan conversion and compositing are done in software, which eliminates the need for special graphics hardware, as well as any artifacts associated with graphics hardware. A description of the data structures and pseudo-code is given along with a solution for rendering accurate depths in perspective viewing. The algorithm is compared, with respect to time and accuracy, against cell projection. 
Abstract-found: 1
Intro-found: 1
Reference: [Cha93] <author> Judy Challinger. </author> <title> Scalable Parallel Direct Volume Rendering for Nonrectilinear Computational Grids. </title> <type> PhD thesis, </type> <institution> University of California, Santa Cruz, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Producing high-resolution images can be very expensive, especially if the data is in a curvilinear grid [Wil93]. Multiple grids that intersect make accurate rendering even more difficult for cell projection methods and create cell subdivision problems for algorithms that use cells as fundamental volume units <ref> [MHC90, Cha93, GP93, Luc92] </ref>. Our method decomposes the cells of each grid into six faces. Each face is represented by two triangles. <p> Irregular volumes can be more expensive for projection methods since the cells have different shapes and the visibility ordering is not as trivial [VGW93]. Parallelization of both projection and ray casting are discussed by Challinger <ref> [Cha93] </ref>. She discusses several important parallelization issues including task generation (the decomposition of a large job into smaller tasks), synchronization, and memory management. She also describes a hybrid approach using a scan-line algorithm to sort cells and X-buckets to sort edges. <p> By doing this, the two algorithms lose their distinct characteristics and merge to become a scan-line algorithm. Scan-line hybrid algorithms have been 2 implemented by several people <ref> [MHC90, Cha93, GP93, Luc92] </ref>. They all take advantage of spatial coherence by transforming the volume into screen space and rendering the cells, or faces of cells in front to back order for each scan-line. Coherence is achieved by processing the scan-lines in sequential order. <p> Giertsen [GP93] intersects each volume element with the scan plane to get a polygon which is filled. He also divides the final image into rectangular sections for parallelization. Some scan-line methods [MHC90, GP93] sort volume elements into scan-lines, while others <ref> [Cha93, Luc92] </ref> break the faces of each cell into individual polygons which are then sorted. This paper describes a method for rendering possibly intersecting polygons that have been extracted from multiple, intersecting curvilinear grids. A parallel implementation is presented and different approaches to maximizing scalability are discussed.
Reference: [Gar90] <author> Michael P. Garrity. </author> <title> Raytracing irregular volume data. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 35-40, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Accurate images are produced without subdividing any polygons. 1.1 Background There are several algorithms for direct volume rendering of curvilinear grids. Most of these algorithms use either ray casting <ref> [Gar90, Use91, RW92] </ref> or cell projection [ST90, Wil92b, VGW93] techniques. These direct volume rendering algorithms address issues such as speed, picture accuracy, and flexibility. In addition to these issues, our algorithm addresses scalability, intersecting grids, and portability. <p> A substantial amount of time is spent calculating intersections of the ray with entry and exit faces of cells. Early implementations of ray tracing curvilinear grids were done by Wilhelms [WCA + 90] and Garrity <ref> [Gar90] </ref>. Wilhelms and Van Gelder discuss a hiercharical ray-casting approach [VGKW95] which achieves acceleration by taking large steps over regions where data need not be processed at a fine resolution. Their approach, which uses multi-dimensional trees [WVG94], gives the user control over an error tolerance which directly effects the acceleration.
Reference: [GP93] <author> Christopher Giertsen and Johnny Peterson. </author> <title> Parallel volume rendering on a network of workstations. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 16-23, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Producing high-resolution images can be very expensive, especially if the data is in a curvilinear grid [Wil93]. Multiple grids that intersect make accurate rendering even more difficult for cell projection methods and create cell subdivision problems for algorithms that use cells as fundamental volume units <ref> [MHC90, Cha93, GP93, Luc92] </ref>. Our method decomposes the cells of each grid into six faces. Each face is represented by two triangles. <p> She discusses several important parallelization issues including task generation (the decomposition of a large job into smaller tasks), synchronization, and memory management. She also describes a hybrid approach using a scan-line algorithm to sort cells and X-buckets to sort edges. Giertsen and Peterson <ref> [GP93] </ref> used a cell-based scan-line algorithm to parallelize volume rendering over a network. They break the screen up into several small sections and distribute the sections to available processors. <p> By doing this, the two algorithms lose their distinct characteristics and merge to become a scan-line algorithm. Scan-line hybrid algorithms have been 2 implemented by several people <ref> [MHC90, Cha93, GP93, Luc92] </ref>. They all take advantage of spatial coherence by transforming the volume into screen space and rendering the cells, or faces of cells in front to back order for each scan-line. Coherence is achieved by processing the scan-lines in sequential order. <p> They all take advantage of spatial coherence by transforming the volume into screen space and rendering the cells, or faces of cells in front to back order for each scan-line. Coherence is achieved by processing the scan-lines in sequential order. Giertsen <ref> [GP93] </ref> intersects each volume element with the scan plane to get a polygon which is filled. He also divides the final image into rectangular sections for parallelization. <p> Coherence is achieved by processing the scan-lines in sequential order. Giertsen [GP93] intersects each volume element with the scan plane to get a polygon which is filled. He also divides the final image into rectangular sections for parallelization. Some scan-line methods <ref> [MHC90, GP93] </ref> sort volume elements into scan-lines, while others [Cha93, Luc92] break the faces of each cell into individual polygons which are then sorted. This paper describes a method for rendering possibly intersecting polygons that have been extracted from multiple, intersecting curvilinear grids.
Reference: [HB85] <author> Ching-Mao Hung and Pieter G. Buning. </author> <title> Simulation of blunt-fin-induced shock-wave and turbulent boundary-layer interaction. </title> <journal> J. Fluid Mechanics, </journal> <volume> 154 </volume> <pages> 163-185, </pages> <year> 1985. </year>
Reference-contexts: Increasing the window size will allow very small polygons, that may have been discarded because they did not cross a pixel, to become active since they are now projected onto a larger portion of the screen. 4.5 Comparison with cell projection A blunt fin dataset <ref> [HB85] </ref>, which is smaller (40x32x32 = 40,960 points) and only contained a single grid, was used to compare rendering times of the scan-line algroithm with times from a cell projection algorithm called QP [VGW93].
Reference: [JS90] <author> F.W. Martin Jr. and J.P. Slotnick. </author> <title> Flow computations for the space shuttle in ascent mode using thin-layer navier-stokes equations. Applied Computational Aerodynamics, </title> <booktitle> Progress in Astronautics and Aeronautics, </booktitle> <volume> 125 </volume> <pages> 863-886, </pages> <year> 1990. </year>
Reference-contexts: processors 16.85 20.16 25.06 30.10 34.14 37.89 41.62 44.89 49.15 53.03 Table 4: Elapsed time comparisons (in seconds) on SGI Reality Engine II with four 150 MHz processors, 256MB memory. (NASA space shuttle data set) 4.1 Dataset The dataset that we chose for our experiment was the NASA space shuttle <ref> [JS90] </ref>, which is made up of nine intersecting curvilinear grids and 941,159 total data points. The data includes the position of every point in each grid along with values for its density, energy and momentum vector.
Reference: [Luc92] <author> Bruce Lucas. </author> <title> A scientific visualization renderer. </title> <booktitle> In Visualization '92, </booktitle> <pages> pages 227-233. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: Producing high-resolution images can be very expensive, especially if the data is in a curvilinear grid [Wil93]. Multiple grids that intersect make accurate rendering even more difficult for cell projection methods and create cell subdivision problems for algorithms that use cells as fundamental volume units <ref> [MHC90, Cha93, GP93, Luc92] </ref>. Our method decomposes the cells of each grid into six faces. Each face is represented by two triangles. <p> By doing this, the two algorithms lose their distinct characteristics and merge to become a scan-line algorithm. Scan-line hybrid algorithms have been 2 implemented by several people <ref> [MHC90, Cha93, GP93, Luc92] </ref>. They all take advantage of spatial coherence by transforming the volume into screen space and rendering the cells, or faces of cells in front to back order for each scan-line. Coherence is achieved by processing the scan-lines in sequential order. <p> Giertsen [GP93] intersects each volume element with the scan plane to get a polygon which is filled. He also divides the final image into rectangular sections for parallelization. Some scan-line methods [MHC90, GP93] sort volume elements into scan-lines, while others <ref> [Cha93, Luc92] </ref> break the faces of each cell into individual polygons which are then sorted. This paper describes a method for rendering possibly intersecting polygons that have been extracted from multiple, intersecting curvilinear grids. A parallel implementation is presented and different approaches to maximizing scalability are discussed. <p> This paper describes a method for rendering possibly intersecting polygons that have been extracted from multiple, intersecting curvilinear grids. A parallel implementation is presented and different approaches to maximizing scalability are discussed. This algorithm is similar to that of Lucas <ref> [Luc92] </ref>, with the exceptions that the facial polygons are decomposed into triangles, the visibility sorting is done during the creation and maintenance of X-buckets to allow for highly intersecting multiple grids, and we are using the bounding box as a virtual polygon, instead of clipping in the data structure. 2 Algorithm
Reference: [McL91] <author> Patricia McLendon. </author> <title> Graphics Library Programming Guide. Silicon Graphics, </title> <publisher> Inc., </publisher> <address> Mountain View, CA, </address> <year> 1991. </year>
Reference-contexts: intersecting grids where QP can not. 5 Perspective Rendering During the initial testing of the program, we observed that the depth calculation between polygons was losing accuracy due to the fact that we were using a standard projection matrix which transforms the viewable world space into a unit viewing volume <ref> [McL91] </ref>. This meant that the Z values of the vertices were being transformed to values that were very close to each other, which introduced substantial floating point errors and resulted in some ordering inconsistencies. The problem was corrected by using a different projection matrix (described below).
Reference: [MHC90] <author> Nelson Max, Pat Hanrahan, and Roger Crawfis. </author> <title> Area and volume coherence for efficient visualization of 3d scalar functions. </title> <booktitle> Computer Graphics (ACM Workshop on Volume Visualization), </booktitle> <volume> 24(5) </volume> <pages> 27-33, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Producing high-resolution images can be very expensive, especially if the data is in a curvilinear grid [Wil93]. Multiple grids that intersect make accurate rendering even more difficult for cell projection methods and create cell subdivision problems for algorithms that use cells as fundamental volume units <ref> [MHC90, Cha93, GP93, Luc92] </ref>. Our method decomposes the cells of each grid into six faces. Each face is represented by two triangles. <p> By doing this, the two algorithms lose their distinct characteristics and merge to become a scan-line algorithm. Scan-line hybrid algorithms have been 2 implemented by several people <ref> [MHC90, Cha93, GP93, Luc92] </ref>. They all take advantage of spatial coherence by transforming the volume into screen space and rendering the cells, or faces of cells in front to back order for each scan-line. Coherence is achieved by processing the scan-lines in sequential order. <p> Coherence is achieved by processing the scan-lines in sequential order. Giertsen [GP93] intersects each volume element with the scan plane to get a polygon which is filled. He also divides the final image into rectangular sections for parallelization. Some scan-line methods <ref> [MHC90, GP93] </ref> sort volume elements into scan-lines, while others [Cha93, Luc92] break the faces of each cell into individual polygons which are then sorted. This paper describes a method for rendering possibly intersecting polygons that have been extracted from multiple, intersecting curvilinear grids.
Reference: [RW92] <author> Shankar Ramamoorthy and Jane Wilhelms. </author> <title> An analysis of approaches to ray-tracing curvilinear grids. </title> <type> Technical Report UCSC-CRL-92-07, </type> <institution> UCSC, University of California, CIS Board, </institution> <address> Santa Cruz, CA, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: Accurate images are produced without subdividing any polygons. 1.1 Background There are several algorithms for direct volume rendering of curvilinear grids. Most of these algorithms use either ray casting <ref> [Gar90, Use91, RW92] </ref> or cell projection [ST90, Wil92b, VGW93] techniques. These direct volume rendering algorithms address issues such as speed, picture accuracy, and flexibility. In addition to these issues, our algorithm addresses scalability, intersecting grids, and portability.
Reference: [ST90] <author> Peter Shirley and Allan Tuchman. </author> <title> A polygonal approximation to direct scalar volume rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 63-70, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Accurate images are produced without subdividing any polygons. 1.1 Background There are several algorithms for direct volume rendering of curvilinear grids. Most of these algorithms use either ray casting [Gar90, Use91, RW92] or cell projection <ref> [ST90, Wil92b, VGW93] </ref> techniques. These direct volume rendering algorithms address issues such as speed, picture accuracy, and flexibility. In addition to these issues, our algorithm addresses scalability, intersecting grids, and portability.
Reference: [Use91] <author> Sam Uselton. </author> <title> Volume rendering for computational flid dynamics: Initial results. </title> <type> Technical Report RNR-91-026, </type> <institution> NAS-NASA Ames Research Center, Moffett Field, </institution> <address> CA, </address> <year> 1991. </year>
Reference-contexts: Accurate images are produced without subdividing any polygons. 1.1 Background There are several algorithms for direct volume rendering of curvilinear grids. Most of these algorithms use either ray casting <ref> [Gar90, Use91, RW92] </ref> or cell projection [ST90, Wil92b, VGW93] techniques. These direct volume rendering algorithms address issues such as speed, picture accuracy, and flexibility. In addition to these issues, our algorithm addresses scalability, intersecting grids, and portability.
Reference: [VGKW95] <author> Allen Van Gelder, Kwansik Kim, and Jane Wilhelms. </author> <title> Hierarchically accelerated ray casting for volume rendering with controlled error. </title> <type> Technical Report UCSC-CRL-95-31, </type> <institution> University of California, Santa Cruz, UCSC CIS Department, Applied Sciences Building, </institution> <address> Santa Cruz, CA 95064, </address> <year> 1995. </year>
Reference-contexts: A substantial amount of time is spent calculating intersections of the ray with entry and exit faces of cells. Early implementations of ray tracing curvilinear grids were done by Wilhelms [WCA + 90] and Garrity [Gar90]. Wilhelms and Van Gelder discuss a hiercharical ray-casting approach <ref> [VGKW95] </ref> which achieves acceleration by taking large steps over regions where data need not be processed at a fine resolution. Their approach, which uses multi-dimensional trees [WVG94], gives the user control over an error tolerance which directly effects the acceleration.
Reference: [VGW93] <author> Allen Van Gelder and Jane Wilhelms. </author> <title> Rapid exploration of curvilinear grids using direct volume rendering. </title> <type> Technical Report UCSC-CRL-93-02, </type> <institution> University of California, Santa Cruz, UCSC CIS Department, Applied Sciences Building, </institution> <address> Santa Cruz, CA 95064, </address> <year> 1993. </year> <note> (extended abstract in Proc. IEEE Visualization 93, </note> <month> Oct. </month> <year> 1993). </year> <month> 17 </month>
Reference-contexts: Accurate images are produced without subdividing any polygons. 1.1 Background There are several algorithms for direct volume rendering of curvilinear grids. Most of these algorithms use either ray casting [Gar90, Use91, RW92] or cell projection <ref> [ST90, Wil92b, VGW93] </ref> techniques. These direct volume rendering algorithms address issues such as speed, picture accuracy, and flexibility. In addition to these issues, our algorithm addresses scalability, intersecting grids, and portability. <p> Projection methods are very efficient for rendering rectilinear grids, since they can take advantage of cell coherence [WVG91]. Irregular volumes can be more expensive for projection methods since the cells have different shapes and the visibility ordering is not as trivial <ref> [VGW93] </ref>. Parallelization of both projection and ray casting are discussed by Challinger [Cha93]. She discusses several important parallelization issues including task generation (the decomposition of a large job into smaller tasks), synchronization, and memory management. <p> projected onto a larger portion of the screen. 4.5 Comparison with cell projection A blunt fin dataset [HB85], which is smaller (40x32x32 = 40,960 points) and only contained a single grid, was used to compare rendering times of the scan-line algroithm with times from a cell projection algorithm called QP <ref> [VGW93] </ref>. Both algorithms were run on an SGI Reality Engine II with four 150MHz processors, however, only one processor was used for this test.
Reference: [Wat70] <author> G.S. Watkins. </author> <title> A Real Time Visible Surface Algorithm. </title> <type> PhD thesis, </type> <institution> University of Utah, </institution> <address> Salt Lake City, </address> <month> June </month> <year> 1970. </year>
Reference-contexts: sorting is done during the creation and maintenance of X-buckets to allow for highly intersecting multiple grids, and we are using the bounding box as a virtual polygon, instead of clipping in the data structure. 2 Algorithm and Data Structures The algorithm described here is based on Watkin's scan-line algorithm <ref> [Wat70] </ref>, with several modifications, which will be described later in this section. Triangles are assumed to be the only type of polygons that are being rendered. This makes it easier to identify active edges and also keeps data consistency when interpolating between edges at different rotations.
Reference: [WCA + 90] <author> Jane Wilhelms, Judy Challinger, Naim Alper, Shankar Ramamoorthy, and Arsi Vaziri. </author> <title> Direct volume rendering of curvilinear volumes. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 41-47, </pages> <month> December </month> <year> 1990. </year> <booktitle> Special Issue on San Diego Workshop on Volume Visualization. </booktitle>
Reference-contexts: A substantial amount of time is spent calculating intersections of the ray with entry and exit faces of cells. Early implementations of ray tracing curvilinear grids were done by Wilhelms <ref> [WCA + 90] </ref> and Garrity [Gar90]. Wilhelms and Van Gelder discuss a hiercharical ray-casting approach [VGKW95] which achieves acceleration by taking large steps over regions where data need not be processed at a fine resolution.
Reference: [Wil92a] <author> Peter Williams. </author> <title> Interactive splatting of nonrectilinear volumes. </title> <booktitle> In Visualization '92, </booktitle> <pages> pages 37-44. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: It is also easy to break up the quadrilateral faces of a curvilinear grid into a set of triangles. The details in this paper assume triangles, however, the algorithm could be adapted to use any polygon. This increases the number of polygons by a factor of 2. Other methods <ref> [Wil92b, Wil92a] </ref> have been reported that decompose each hexahedral cell into five tetrahedra, resulting in an increase in the number of polygons by a factor of 3 1 3 . The algorithm begins with the conversion of the vertices from world space to screen space, preserving depth values.
Reference: [Wil92b] <author> Peter Williams. </author> <title> Visibility ordering meshed polyhedra. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 11(2) </volume> <pages> 103-126, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Accurate images are produced without subdividing any polygons. 1.1 Background There are several algorithms for direct volume rendering of curvilinear grids. Most of these algorithms use either ray casting [Gar90, Use91, RW92] or cell projection <ref> [ST90, Wil92b, VGW93] </ref> techniques. These direct volume rendering algorithms address issues such as speed, picture accuracy, and flexibility. In addition to these issues, our algorithm addresses scalability, intersecting grids, and portability. <p> It is also easy to break up the quadrilateral faces of a curvilinear grid into a set of triangles. The details in this paper assume triangles, however, the algorithm could be adapted to use any polygon. This increases the number of polygons by a factor of 2. Other methods <ref> [Wil92b, Wil92a] </ref> have been reported that decompose each hexahedral cell into five tetrahedra, resulting in an increase in the number of polygons by a factor of 3 1 3 . The algorithm begins with the conversion of the vertices from world space to screen space, preserving depth values.
Reference: [Wil93] <author> Jane Wilhelms. </author> <title> Pursuing interactive visualization of irregular grids. </title> <journal> The Visual Computer, </journal> <volume> 9(8) </volume> <pages> 450-458, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Direct volume rendering produces a 3D visualization of 3D scalar data. Producing high-resolution images can be very expensive, especially if the data is in a curvilinear grid <ref> [Wil93] </ref>. Multiple grids that intersect make accurate rendering even more difficult for cell projection methods and create cell subdivision problems for algorithms that use cells as fundamental volume units [MHC90, Cha93, GP93, Luc92]. Our method decomposes the cells of each grid into six faces.
Reference: [WVG91] <author> Jane Wilhelms and Allen Van Gelder. </author> <title> A coherent projection approach for direct volume rendering. </title> <booktitle> Computer Graphics (ACM Siggraph Proceedings), </booktitle> <volume> 25(4) </volume> <pages> 275-284, </pages> <year> 1991. </year>
Reference-contexts: Volume elements are projected onto the screen in front-to-back or back-to-front order. Projection methods are generally very fast since color and opacity composition can be done by the hardware, however, if interpolation between sample points and integration in depth are not done accurately, visual artifacts may occur <ref> [WVG91] </ref>. Projection methods are very efficient for rendering rectilinear grids, since they can take advantage of cell coherence [WVG91]. Irregular volumes can be more expensive for projection methods since the cells have different shapes and the visibility ordering is not as trivial [VGW93]. <p> generally very fast since color and opacity composition can be done by the hardware, however, if interpolation between sample points and integration in depth are not done accurately, visual artifacts may occur <ref> [WVG91] </ref>. Projection methods are very efficient for rendering rectilinear grids, since they can take advantage of cell coherence [WVG91]. Irregular volumes can be more expensive for projection methods since the cells have different shapes and the visibility ordering is not as trivial [VGW93]. Parallelization of both projection and ray casting are discussed by Challinger [Cha93].
Reference: [WVG94] <author> Jane Wilhelms and Allen Van Gelder. </author> <title> Multi-dimensional trees for controlled volume rendering and compression. </title> <booktitle> In ACM Workshop on Volume Visualization 1994, </booktitle> <address> Washington, D.C., </address> <month> October </month> <year> 1994. </year> <note> See also technical report UCSC-CRL-94-02. 18 </note>
Reference-contexts: Wilhelms and Van Gelder discuss a hiercharical ray-casting approach [VGKW95] which achieves acceleration by taking large steps over regions where data need not be processed at a fine resolution. Their approach, which uses multi-dimensional trees <ref> [WVG94] </ref>, gives the user control over an error tolerance which directly effects the acceleration. Cell projection methods are designed to take advantage of the speed of graphics hardware to render polygons. Volume elements are projected onto the screen in front-to-back or back-to-front order.
References-found: 20

