URL: ftp://ftp.cs.umass.edu/pub/ccs/spring/arch_support_drts.ps
Refering-URL: http://www-ccs.cs.umass.edu/publications.html
Root-URL: 
Title: Adjustable Flow Control Filters, Reflective Memories, and Coprocessors as Support for Distributed Real-Time Systems  
Author: Prof. John A. Stankovic 
Keyword: Adaptive filters, reflective memories, scheduling coprocessors, real-time, architecture.  
Address: Amherst, Mass. 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: Distributed real-time systems are difficult to construct such that the system behaves predictably. In addition, many of these systems must operate in complex and uncertain environments. We discuss several hardware-based ideas for moving distributed real-time systems towards predictability: adjustable flow control filters, reflective memories, and scheduling coproces-sors. We believe that these hardware based solutions should be exploited for enhancing predictability and robustness, especially as hardware becomes cheaper. Adjustable flow control filters is a new idea being proposed here. While reflective memories are available off-the-shelf, here we discuss their value in distributed scheduling and fault tolerance. Scheduling coproces-sors can reduce the cost of on-line scheduling so that dynamic rescheduling and early warning of impending missed deadlines can occur. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Berger, </author> <title> "Performance Analysis of a Rate Control Throttle where Tokens and Jobs Queue," </title> <journal> IEEE J-SAC, </journal> <volume> Vol. 9, </volume> <year> 1991, </year> <pages> pp. 165-170. </pages>
Reference-contexts: The adjustable control filters that we propose in this paper are related, in certain respects, to the leaky bucket rate-based flow control approach found in networking <ref> [1] </ref>. In the leaky bucket approach tokens are generated periodically and incoming messages can only enter the network if a token is available. This reduces the burstiness of traffic, but does not guarantee minimum interarrival times.
Reference: [2] <author> W. Burleson, J. Ko, D. Niehaus, K. Ra-mamritham, J. Stankovic, Wallace, and C. Weems, </author> <title> "The Spring Scheduling Co-processor: </title>
Reference-contexts: Specialized hardware for real-time systems include DSP chips, clock synchronization, I/O controllers, and real-time kernels [6]. The Transputer has very simple built-in dispatching support. None of these explicitly deal with distributed real-time systems. We believe that the Spring scheduling coprocessor <ref> [2] </ref> is the first sophisticated real-time scheduling algorithm put into VLSI. In this paper we first discuss distributed real-time environment characteristics (Section 2). We then describe the adjustable flow control filters (Section 3) and the reflective memories (Section 4). Scheduling coprocessors are discussed in Section 5. <p> Using the reflective memory in this way makes the information available in a predictable and short amount of time. 2 Ultimately, system processors could be specifically designed to offer hardware support to our system activities such as guaranteeing processes. Such a chip has been designed and implemented <ref> [2] </ref>, but not yet integrated into SpringNet itself. Signaling and coordination among the nodes can also be accomplished via this global memory 3 . Hence, cooperative distributed scheduling can be initiated and terminated using the global memory. <p> Performing such scheduling in software is time consuming and if various alternatives must be attempted to control the filters the cost grows even higher. We have developed a scheduling coprocessor, SSCoP <ref> [2] </ref> which is VLSI based. The current estimates are that the chip can do on-line scheduling of large sets of tasks (64-128) with complex requirements (such as the list above) in 1 or 2 milliseconds.
References-found: 2

