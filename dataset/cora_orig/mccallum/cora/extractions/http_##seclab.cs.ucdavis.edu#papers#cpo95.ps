URL: http://seclab.cs.ucdavis.edu/papers/cpo95.ps
Refering-URL: http://seclab.cs.ucdavis.edu/papers.html
Root-URL: http://www.cs.ucdavis.edu
Email: mukherjeg@cs.ucdavis.edu  
Title: Simulating Concurrent Intrusions for Testing Intrusion Detection Systems: Parallelizing Intrusions  
Author: Mandy Chung Nicholas Puketza Ronald A. Olsson Biswanath Mukherjee fchungm, puketza, olsson, 
Keyword: Intrusion Detection, Concurrency, Testing, Paral-lelization, Synchronization, Data Flow Analysis, Dependence Analysis.  
Address: CA 95616  
Affiliation: Department of Computer Science University of California, Davis,  
Abstract: For testing Intrusion Detection Systems (IDS), it is essential that we be able to simulate intrusions in different forms (both sequential and parallelized) in order to comprehensively test and evaluate the detection capability of an IDS. This paper presents an algorithm for automatically transforming a sequential intrusive script into a set of parallel intrusive scripts (formed by a group of parallel threads) which simulate a concurrent intrusion. The main goal of parallelizing an intrusion is to distract an IDS's attention away from the intrusive activity. We identify constraints on the execution order among commands, and the way commands can be classified based on the effect of their execution. Synchronization and communication mechanisms are used to guarantee that the execution order among commands is preserved even under the paral-lelized scenario. We show that, experimentally, our work constitutes a major part of testing the ability of an IDS to detect intrusions and is especially useful for the users and developers of IDSs. We show that an intrusion is less likely to be detected if the suspicious activity is distributed over several sessions. Finally, we discuss some aspects of parallelizing intrusive scripts, including some practical difficulties that are open problems for future research. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.V. Aho, R. Sethi, and J.D. Ullman, </author> <booktitle> Compilers: Principles, Techniques, and Tools., </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: Perform optimization and transformation, if any. 6. Generate a parallel intrusive script. A flow graph representing an intrusive script is different from a flow graph representing a program <ref> [1] </ref>. We define a basic block, in our context, as a sequence of consecutive "statements " and one issuable "command ". Therefore, it is possible to have a basic block containing a conditional statement or loop which contains no command.
Reference: [2] <editor> J.R. Allen, et al., </editor> <title> "Conversion of Control Dependence to Data Dependence", </title> <booktitle> Proceedings of 10th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> Austin, Texas, </address> <month> January </month> <year> 1983. </year>
Reference-contexts: This paper presents an algorithm for parallelizing a sequential intrusive script of Unix shell commands. Par-allelizing an intrusive script has some similarities to par-allelizing a program, which has been studied in depth <ref> [2, 3, 4, 5, 8, 9, 11] </ref>. Our work adapts some basic techniques used in program parallelization to fit in our context, including data flow analysis, dependence analysis, and control dependence to data dependence conversion. <p> We can also treat control and data dependence uniformly by applying a technique in parallelizing compilers introduced by Allen and Kennedy <ref> [2] </ref> to convert control dependence into data dependence. We also adapt the dependence analysis [3, 5, 8, 9] used in program parallelization to determine the dependence relations of all issuable commands in a script.
Reference: [3] <author> U. Banerjee, </author> <title> Dependence Analysis for Supercomputing, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, Mass., </address> <year> 1988. </year>
Reference-contexts: This paper presents an algorithm for parallelizing a sequential intrusive script of Unix shell commands. Par-allelizing an intrusive script has some similarities to par-allelizing a program, which has been studied in depth <ref> [2, 3, 4, 5, 8, 9, 11] </ref>. Our work adapts some basic techniques used in program parallelization to fit in our context, including data flow analysis, dependence analysis, and control dependence to data dependence conversion. <p> We can also treat control and data dependence uniformly by applying a technique in parallelizing compilers introduced by Allen and Kennedy [2] to convert control dependence into data dependence. We also adapt the dependence analysis <ref> [3, 5, 8, 9] </ref> used in program parallelization to determine the dependence relations of all issuable commands in a script. In the following, when we refer to a command in a dependence graph, we actually mean the basic block containing this command. <p> Although loops in an intrusive script may not be as commonly used as loops in a program, this construct is considerably useful in simulating certain types of intrusions. We follow the terminology used in parallelizing compilers proposed by Banerjee <ref> [3] </ref> to classify three parallel loop forms. * DOALL is a loop that allows total parallel execution, i.e., all iterations of the loop body are allowed to run simultaneously. * DOACROSS is a loop that allows partial overlap of successive iterations during execution. * DOSEQ is a sequential loop without parallelism.
Reference: [4] <author> U. Banerjee, R. Eigenmann, A. Nicolau, and D.A. Padua, </author> <title> "Automatic Program Parallelizaton", </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 81, no. 2, </volume> <pages> pp. 211-43, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: This paper presents an algorithm for parallelizing a sequential intrusive script of Unix shell commands. Par-allelizing an intrusive script has some similarities to par-allelizing a program, which has been studied in depth <ref> [2, 3, 4, 5, 8, 9, 11] </ref>. Our work adapts some basic techniques used in program parallelization to fit in our context, including data flow analysis, dependence analysis, and control dependence to data dependence conversion.
Reference: [5] <author> M. Burker and R. Cytron, </author> <title> "Interprocedural Dependence Analysis and Parallelization", </title> <booktitle> Proceedings of the ACM SIGPLAN '86 Symposium on Compiler Construction, </booktitle> <pages> pp. 17-22, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: This paper presents an algorithm for parallelizing a sequential intrusive script of Unix shell commands. Par-allelizing an intrusive script has some similarities to par-allelizing a program, which has been studied in depth <ref> [2, 3, 4, 5, 8, 9, 11] </ref>. Our work adapts some basic techniques used in program parallelization to fit in our context, including data flow analysis, dependence analysis, and control dependence to data dependence conversion. <p> We can also treat control and data dependence uniformly by applying a technique in parallelizing compilers introduced by Allen and Kennedy [2] to convert control dependence into data dependence. We also adapt the dependence analysis <ref> [3, 5, 8, 9] </ref> used in program parallelization to determine the dependence relations of all issuable commands in a script. In the following, when we refer to a command in a dependence graph, we actually mean the basic block containing this command.
Reference: [6] <author> D.E. Denning, </author> <title> "An Intrusion Detection Model", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. SE-13, </volume> <pages> pp. 222-232, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Intrusion detection provides a practical alternative approach to computer security besides designing a secure system <ref> [6, 12] </ref>. Intrusion Detection Systems (IDS) have been under investigation for many years [7, 14] and have started to move from laboratories to the real world. There is thus a need for sound methodologies and tools for testing IDSs.
Reference: [7] <author> L.T. Heberlein, G. Dias, K. Levitt, B. Mukherjee, J. Wood, and D. Wolber, </author> <title> "A Network Security Monitor", </title> <booktitle> Proc. 1990 Symposium on Research in Security and Privacy, </booktitle> <pages> pp. 296-304, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Intrusion detection provides a practical alternative approach to computer security besides designing a secure system [6, 12]. Intrusion Detection Systems (IDS) have been under investigation for many years <ref> [7, 14] </ref> and have started to move from laboratories to the real world. There is thus a need for sound methodologies and tools for testing IDSs. <p> The premise behind this strategy is that the IDS will assign a higher warning value to one very intrusive session than it will to several less intrusive sessions. We conducted some experiments to test this premise. The IDS that we tested is the Network Security Mon--itor (NSM) <ref> [7] </ref>. The NSM monitors all of the packets that travel on the local area network (LAN) to which the NSM host computer is connected. The NSM can associate each such packet with the corresponding computer-to-computer connection.
Reference: [8] <author> D. J. Kuck, et al., </author> <title> "Dependence Graphs and Compiler Optimization", </title> <booktitle> SIGACT-SIGPLAN Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 207-218, </pages> <month> January </month> <year> 1981. </year>
Reference-contexts: This paper presents an algorithm for parallelizing a sequential intrusive script of Unix shell commands. Par-allelizing an intrusive script has some similarities to par-allelizing a program, which has been studied in depth <ref> [2, 3, 4, 5, 8, 9, 11] </ref>. Our work adapts some basic techniques used in program parallelization to fit in our context, including data flow analysis, dependence analysis, and control dependence to data dependence conversion. <p> That is, script variables used or modified in a basic block are not referenced elsewhere. In parallelizing an intrusive script, we must obey the constraints of the underlying dependence structure of the script. In our algorithm, a data dependence graph <ref> [8] </ref> is used to represent the data dependence, attribute dependence, and control dependence. Both data and attribute dependence of commands can be represented in a data dependence graph because the IS state attributes are another form of data in an intrusive session. <p> We can also treat control and data dependence uniformly by applying a technique in parallelizing compilers introduced by Allen and Kennedy [2] to convert control dependence into data dependence. We also adapt the dependence analysis <ref> [3, 5, 8, 9] </ref> used in program parallelization to determine the dependence relations of all issuable commands in a script. In the following, when we refer to a command in a dependence graph, we actually mean the basic block containing this command.
Reference: [9] <author> Z. Li, P. Yew, and C. Zhu, </author> <title> "An Efficient Data Dependence Analysis for Parallelizing Compilers", </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> vol. 1, no. 1, </volume> <pages> pp. 26-34, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: This paper presents an algorithm for parallelizing a sequential intrusive script of Unix shell commands. Par-allelizing an intrusive script has some similarities to par-allelizing a program, which has been studied in depth <ref> [2, 3, 4, 5, 8, 9, 11] </ref>. Our work adapts some basic techniques used in program parallelization to fit in our context, including data flow analysis, dependence analysis, and control dependence to data dependence conversion. <p> We can also treat control and data dependence uniformly by applying a technique in parallelizing compilers introduced by Allen and Kennedy [2] to convert control dependence into data dependence. We also adapt the dependence analysis <ref> [3, 5, 8, 9] </ref> used in program parallelization to determine the dependence relations of all issuable commands in a script. In the following, when we refer to a command in a dependence graph, we actually mean the basic block containing this command.
Reference: [10] <author> D. Libes, </author> <title> "Expect: Curing Those Uncontrollable Fits of Interaction", </title> <booktitle> Proceedings of the Summer 1990 USENIX Conference, </booktitle> <month> June </month> <year> 1990. </year>
Reference-contexts: An intrusive script is written in a simple programming language which allows us to specify shell-level commands, such as shell language [15] and Expect <ref> [10] </ref>. In addition, the language typically includes variables, procedure, and control-flow statements, such as if-then-else and loop. This section presents a model for an intrusive script transformation which focuses on issuable shell-level commands in an intrusive script.
Reference: [11] <author> S. Midkiff and D. Padua, </author> <title> "Compiler algorithm for Synchronization", </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. C-36, no. 12, </volume> <pages> pp. 1485-1495, </pages> <year> 1987. </year>
Reference-contexts: This paper presents an algorithm for parallelizing a sequential intrusive script of Unix shell commands. Par-allelizing an intrusive script has some similarities to par-allelizing a program, which has been studied in depth <ref> [2, 3, 4, 5, 8, 9, 11] </ref>. Our work adapts some basic techniques used in program parallelization to fit in our context, including data flow analysis, dependence analysis, and control dependence to data dependence conversion. <p> threads generated by this algorithm and each thread performs only one of these eight I-commands. 5.1.2 Threads Synchronization Phase After all parallel threads are generated, the dependence relations among commands are enforced in this phase to guarantee the execution order of the commands by inserting synchronization and data communication mechanisms <ref> [11] </ref>. A dependence graph G consists of nodes and directed edges. A node represents a basic block containing a single command. A directed edge (u; v) represents a dependence relation between basic blocks u and v, i.e., the execution of v can begin only after the execution of u terminates.
Reference: [12] <author> B. Mukherjee, L.T. Heberlein, and K.N. Levitt, </author> <title> "Network Intrusion Detection", </title> <journal> IEEE Network, </journal> <volume> vol. 8, no. 3, </volume> <pages> pp. </pages> <address> 26-4l, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction Intrusion detection provides a practical alternative approach to computer security besides designing a secure system <ref> [6, 12] </ref>. Intrusion Detection Systems (IDS) have been under investigation for many years [7, 14] and have started to move from laboratories to the real world. There is thus a need for sound methodologies and tools for testing IDSs.
Reference: [13] <author> N. Puketza, B. Mukherjee, R.A. Olsson, and K. Zhang, </author> <title> "Testing Intrusion Detection Systems: Design Methodologies and Results from an Early Prototype", </title> <booktitle> Proc. 17th National Computer Security Conference, </booktitle> <volume> vol. 1, </volume> <pages> pp. 1-10, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: There is thus a need for sound methodologies and tools for testing IDSs. This paper presents our continuing ef fl This work has been supported by the National Security Agency (NSA) INFOSEC University Research Program (URP). fort on testing Intrusion Detection Systems <ref> [13] </ref>. We are researching methods for testing IDSs. In our testing experiments, we simulate intrusive activity, and then study the corresponding output from the IDS. We have developed a software platform that can be used to create scripts that simulate both normal and intrusive activities.
Reference: [14] <author> S.E. Smaha, "Haystack: </author> <title> An Intrusion Dection System", </title> <booktitle> Proc. IEEE 4th Aerospace Computer Security Applications Conference, </booktitle> <month> December </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Intrusion detection provides a practical alternative approach to computer security besides designing a secure system [6, 12]. Intrusion Detection Systems (IDS) have been under investigation for many years <ref> [7, 14] </ref> and have started to move from laboratories to the real world. There is thus a need for sound methodologies and tools for testing IDSs.
Reference: [15] <author> P. Wang, </author> <title> An Introduction to Berkeley Unix, </title> <publisher> Wadsworth Publishing Company, </publisher> <address> Belmont, Califor-nia. </address>
Reference-contexts: An intrusive script is written in a simple programming language which allows us to specify shell-level commands, such as shell language <ref> [15] </ref> and Expect [10]. In addition, the language typically includes variables, procedure, and control-flow statements, such as if-then-else and loop. This section presents a model for an intrusive script transformation which focuses on issuable shell-level commands in an intrusive script.
References-found: 15

