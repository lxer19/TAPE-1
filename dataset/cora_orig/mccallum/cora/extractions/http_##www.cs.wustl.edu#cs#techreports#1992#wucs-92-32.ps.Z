URL: http://www.cs.wustl.edu/cs/techreports/1992/wucs-92-32.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: The Programmers' Playground: I/O Abstraction for Heterogeneous Distributed Systems  
Author: Kenneth J. Goldman and Michael D. Anderson 
Address: Campus Box 1045 One Brookings Drive Saint Louis, MO 63130-4899  
Affiliation: Department of Computer Science Washington University  
Date: November 1992  
Pubnum: WUCS-92-32  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Ahuja, N. Carriero, and D. Gelernter. </author> <title> Linda and friends. </title> <journal> IEEE Computer, </journal> <volume> 19(8) </volume> <pages> 26-34, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Several programming languages have been constructed that embrace the approach of separate computation and coordination languages. For example, Linda <ref> [1] </ref> is a coordination language that allows multiple processes, possibly written in different computation languages, to communicate through a shared tuple space. Linda provides out and in constructs that allow processes to insert and remove elements of a shared tuple space in order to communicate and coordinate their activities.
Reference: [2] <author> M.J. Bach. </author> <title> The Design of the UNIX Operating System. </title> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: For example, UNIX <ref> [2] </ref> provides the socket that supports a byte stream abstraction for communication among UNIX processes and is accessible through system calls from high level languages such as C [9].
Reference: [3] <author> Kenneth P. Birman and Thomas A. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: The completely asynchronous transmission-on-update semantics currently supported by Playground is inadequate for many applications. We are planning to investigate algorithms for achieving reliable causal ordering among data transmissions. Such algorithms may be similar in flavor to the atomic and causal broadcast algorithms of the ISIS system <ref> [3] </ref>, but we expect to be able to take advantage of the additional information about the communication pattern that is available in the connection manager. Fault tolerance will be an important consideration in this work.
Reference: [4] <author> Apple Computer. </author> <title> Inside Macintosh, Volume VI. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: In Clouds, binding of remote procedure calls is mediated by a name server. The resulting abstraction is useful for writing distributed applications in an object-oriented paradigm. A simpler example of operating system support for communication among applications is the "publish/subscribe" mechanism of the Macintosh operating system <ref> [4] </ref> that provides one-way asynchronous communication through files. The publisher writes the data into a special file, called an edition. Any number of subscribers may notify the edition manager that they want to subscribe to the data.
Reference: [5] <author> Jerome R. Cox, Jr. and Jonathan S. Turner. </author> <title> Project Zeus: Design of a broadband network and its application on a university campus. </title> <type> Technical Report WUCS 91-45, </type> <institution> Washington University, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: We also plan to implement veneers for several high-level languages that support different programming paradigms. As a testbed for our multimedia applications, we plan to use the high speed packet-switched network that is being deployed on the Washington University campus <ref> [5] </ref>. The network is based on fast packet switching technology that has been developed at Washington University over the past several years and is designed to support port interfaces at up to 2.4 Gb/s.
Reference: [6] <author> Partha Dasgupta, Richard J. LeBlanc, Jr., and Umakishore Ramachandran. </author> <title> The Clouds distributed operating system. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 34-44, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: For example, UNIX [2] provides the socket that supports a byte stream abstraction for communication among UNIX processes and is accessible through system calls from high level languages such as C [9]. More recently, the Clouds distributed operating system <ref> [6] </ref> provides a remote procedure call mechanism between objects in a system-wide virtual address space. In Clouds, binding of remote procedure calls is mediated by a name server. The resulting abstraction is useful for writing distributed applications in an object-oriented paradigm.
Reference: [7] <author> David Gelernter and Nicholas Carriero. </author> <title> Coordination languages and their significance. </title> <journal> Communications of the ACM, </journal> <volume> 35(2) </volume> <pages> 97-107, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: Others, such as Hermes [22], provide a facility whereby values may be passed across ports that may be connected from one module to another. Recently, however, there has been growing interest in coordination languages <ref> [7] </ref> that provide a view of communication that is independent of particular programming languages or operating systems. Coordination languages are meant to simplify the task of setting up communication among programs written in different programming languages and running on different operating systems by separating computation from communication.
Reference: [8] <author> Kenneth J. Goldman. </author> <title> Separating structure from function in the specification and design of distributed systems. </title> <type> Technical Report WUCS-92-31, </type> <institution> Washington University in St. Louis, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: CONCERT [23] provides a coordination language in which the Hermes [22] distributed process model is embedded in several procedural programming languages by providing extensions to each language. 1 A more extensive discussion on the benefits of the separation of structure and function is given elsewhere <ref> [8] </ref>. 3 A high level coordination language might be implemented directly on top of each individual operating system and programming language. Alternatively, for ease of portability, one might implement a coordination language on top of a uniform set of system level communication constructs for heterogeneous distributed systems. <p> The work described here builds upon our previous exploration of the separation of structure and function in the specification and design of distributed systems <ref> [8] </ref>. In that work, an extended version of the I/O automaton model [15, 16] is used as the basis of a simulation system for describing automaton types, configuring them into systems and studying their executions.
Reference: [9] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year>
Reference-contexts: For example, UNIX [2] provides the socket that supports a byte stream abstraction for communication among UNIX processes and is accessible through system calls from high level languages such as C <ref> [9] </ref>. More recently, the Clouds distributed operating system [6] provides a remote procedure call mechanism between objects in a system-wide virtual address space. In Clouds, binding of remote procedure calls is mediated by a name server. The resulting abstraction is useful for writing distributed applications in an object-oriented paradigm. <p> A second module, wishing to make use of external information, initiates an "input activity" that captures the sequential information and makes appropriate changes in the state of that module. For example, in the C programming language <ref> [9] </ref>, the fprintf routine is an output activity that sequentializes information about the program state into a stream of characters that may be read by another module using the fscanf routine in order to capture the sequential information in the program's state.
Reference: [10] <author> Jeff Kramer and Jeff Magee. </author> <title> The evolving philosophers problem. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(11) </volume> <pages> 1293-1306, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: A more typical approach to coordination languages, and the approach we adopt here, is to provide a configuration mechanism for establishing explicit relationships among program modules. For example, Darwin <ref> [10, 17, 12] </ref>, a generalization of Conic [11, 12], is a configuration language that allows one to manage message-passing connections between the ports of various processes in a dynamic system.
Reference: [11] <author> Jeff Kramer, Jeff Magee, and Anthony Finkelstein. </author> <title> A constructive approach to the design of distributed systems. </title> <booktitle> In Proceedings of the 10th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 580-587, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: A more typical approach to coordination languages, and the approach we adopt here, is to provide a configuration mechanism for establishing explicit relationships among program modules. For example, Darwin [10, 17, 12], a generalization of Conic <ref> [11, 12] </ref>, is a configuration language that allows one to manage message-passing connections between the ports of various processes in a dynamic system.
Reference: [12] <author> Jeff Kramer, Jeff Magee, and Morris Sloman. </author> <title> Configuring distributed systems. </title> <booktitle> In Proceedings of the 5th ACM SIGOPS European Workshop, </booktitle> <month> September </month> <year> 1992. </year>
Reference-contexts: A more typical approach to coordination languages, and the approach we adopt here, is to provide a configuration mechanism for establishing explicit relationships among program modules. For example, Darwin <ref> [10, 17, 12] </ref>, a generalization of Conic [11, 12], is a configuration language that allows one to manage message-passing connections between the ports of various processes in a dynamic system. <p> A more typical approach to coordination languages, and the approach we adopt here, is to provide a configuration mechanism for establishing explicit relationships among program modules. For example, Darwin [10, 17, 12], a generalization of Conic <ref> [11, 12] </ref>, is a configuration language that allows one to manage message-passing connections between the ports of various processes in a dynamic system.
Reference: [13] <author> B. Liskov, T. Bloom, D. Gifford, R. Scheifler, and W. Weihl. </author> <title> Communication in the Mercury system. </title> <booktitle> In Hawaii International Conference on System Sciences, </booktitle> <pages> pages 178-187, </pages> <month> January </month> <year> 1988. </year>
Reference-contexts: Alternatively, for ease of portability, one might implement a coordination language on top of a uniform set of system level communication constructs for heterogeneous distributed systems. For example, the Mercury system <ref> [13] </ref> provides a remote procedure call facility that spans multiple programming languages and operating systems. Each supported programming language is extended with a thin layer or "veneer" between the application program and the operating system.
Reference: [14] <author> B. Liskov and R. Scheifler. </author> <title> Guardians and actions: Linguistic support for robust, distributed programs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 5(3) </volume> <pages> 381-404, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: Some high level languages directly provide constructs that permit programs written in those languages to communicate among themselves. With these languages, distributed systems can be constructed in a way that insulates the programmer from the operating system. For example, Ada [18] provides the rendezvous and Argus <ref> [14] </ref> provides a remote procedure call mechanism. Some object-oriented languages allow entire objects, complete with their operations, to be passed 2 among processes. Others, such as Hermes [22], provide a facility whereby values may be passed across ports that may be connected from one module to another.
Reference: [15] <author> Nancy A. Lynch and Mark R. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <booktitle> In Proceedings of the 6th ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 137-151, </pages> <month> August </month> <year> 1987. </year> <note> A full version is available as MIT Technical Report MIT/LCS/TR-387. </note>
Reference-contexts: The work described here builds upon our previous exploration of the separation of structure and function in the specification and design of distributed systems [8]. In that work, an extended version of the I/O automaton model <ref> [15, 16] </ref> is used as the basis of a simulation system for describing automaton types, configuring them into systems and studying their executions.
Reference: [16] <author> Nancy A. Lynch and Mark R. Tuttle. </author> <title> An introduction to Input/Output Automata. </title> <journal> CWI-Quarterly, </journal> <volume> 2(3), </volume> <year> 1989. </year> <month> 16 </month>
Reference-contexts: The work described here builds upon our previous exploration of the separation of structure and function in the specification and design of distributed systems [8]. In that work, an extended version of the I/O automaton model <ref> [15, 16] </ref> is used as the basis of a simulation system for describing automaton types, configuring them into systems and studying their executions.
Reference: [17] <author> Jeff Magee, Naranker Dulay, and Jeff Kramer. </author> <title> Structuring parallel and distributed programs. </title> <booktitle> In Proceedings of the International Workshop on Configurable Distributed Systems, </booktitle> <pages> pages 102-117, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: A more typical approach to coordination languages, and the approach we adopt here, is to provide a configuration mechanism for establishing explicit relationships among program modules. For example, Darwin <ref> [10, 17, 12] </ref>, a generalization of Conic [11, 12], is a configuration language that allows one to manage message-passing connections between the ports of various processes in a dynamic system.
Reference: [18] <author> U.S. </author> <title> Department of Defense. Ada programming language. </title> <type> Technical Report ANSI/MIL-STD-1815A-1983, </type> <institution> United States Department of Defense, </institution> <year> 1983. </year>
Reference-contexts: Some high level languages directly provide constructs that permit programs written in those languages to communicate among themselves. With these languages, distributed systems can be constructed in a way that insulates the programmer from the operating system. For example, Ada <ref> [18] </ref> provides the rendezvous and Argus [14] provides a remote procedure call mechanism. Some object-oriented languages allow entire objects, complete with their operations, to be passed 2 among processes.
Reference: [19] <author> James M. Purtilo and Christine R. Hofmeister. </author> <title> Dynamic reconfiguration of distributed programs. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 560-571, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Each process is expressed in a computation language that is largely independent of the configuration language, except that it provides port declarations that comprise its connection interface for use by Darwin. Polylith <ref> [19, 20] </ref> is another system that takes the configuration approach. While the Darwin view of a configuration is expressed in terms of connections between communication ports, the Polylith view of a configuration is expressed in terms of a set of procedure call bindings.
Reference: [20] <author> James M. Purtilo and Pankaj Jalote. </author> <title> An environment for prototyping distributed applications. </title> <booktitle> In Proceedings of the 9th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 588-594, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Each process is expressed in a computation language that is largely independent of the configuration language, except that it provides port declarations that comprise its connection interface for use by Darwin. Polylith <ref> [19, 20] </ref> is another system that takes the configuration approach. While the Darwin view of a configuration is expressed in terms of connections between communication ports, the Polylith view of a configuration is expressed in terms of a set of procedure call bindings.
Reference: [21] <author> Gruia-Catalin Roman and Kenneth C. Cox. </author> <title> A declarative approach to visualizing concurrent computations. </title> <journal> IEEE Computer, </journal> <volume> 22(10) </volume> <pages> 25-36, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: We prefer a programming model in which one can declare direct high-level logical connections between the state components of individual modules. The use of such declarative relationships between program states have been advocated for the visualization of concurrent programs <ref> [21] </ref>. Here, we advocate their use for interprocess communication in general.
Reference: [22] <author> R.E. Strom, D.F. Bacon, A.P. Goldberg, A. Lowry, D.M. Yellin, and S. Yemini. </author> <title> Hermes: A Language for Distributed Computing. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: For example, Ada [18] provides the rendezvous and Argus [14] provides a remote procedure call mechanism. Some object-oriented languages allow entire objects, complete with their operations, to be passed 2 among processes. Others, such as Hermes <ref> [22] </ref>, provide a facility whereby values may be passed across ports that may be connected from one module to another. Recently, however, there has been growing interest in coordination languages [7] that provide a view of communication that is independent of particular programming languages or operating systems. <p> Polylith provides a set of "module interconnection constructs" for establishing procedure call bindings among modules in a distributed system. CONCERT [23] provides a coordination language in which the Hermes <ref> [22] </ref> distributed process model is embedded in several procedural programming languages by providing extensions to each language. 1 A more extensive discussion on the benefits of the separation of structure and function is given elsewhere [8]. 3 A high level coordination language might be implemented directly on top of each individual
Reference: [23] <author> Shaula A. Yemini, German S. Goldszmidt, Alexander D. Stoyenko, and Langdon W. Beeck. </author> <title> CONCERT: A high-level-language approach to heterogeneous distributed systems. </title> <booktitle> In Proceedings of the 9th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 162-171, </pages> <year> 1989. </year>
Reference-contexts: Polylith provides a set of "module interconnection constructs" for establishing procedure call bindings among modules in a distributed system. CONCERT <ref> [23] </ref> provides a coordination language in which the Hermes [22] distributed process model is embedded in several procedural programming languages by providing extensions to each language. 1 A more extensive discussion on the benefits of the separation of structure and function is given elsewhere [8]. 3 A high level coordination language
References-found: 23

