URL: ftp://ftp.csd.uu.se/pub/papers/reports/0042.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Email: JONAS@AIDA.UU.SE, HAKANM@AIDA.UU.SE  
Phone: +46-18-18 25 00  
Title: Data Structures in Prolog  
Author: Jonas Barklund H-akan Millroth P. O. 
Address: Box 520, S-751 20 Uppsala, Sweden  
Affiliation: Uppsala Programming Methodology and Artificial Intelligence Laboratory Computing Science Dept., Uppsala University  
Note: Integrating Complex  Electronic mail:  The research reported herein was supported by the National Swedish Board for Technical Development (STU).  
Abstract: UPMAIL Technical Report No. 42 Abstract.Computer Science has produced several data structures and algorithms on them to efficiently solve computational problems. Some algorithms require destructive operations for their efficient implementation or have other properties which make them difficult to implement efficiently in Prolog. If they are to be introduced in Prolog, these data structures and algorithms must be implemented at a lower level. We investigate how such data structures, possibly with a complicated internal representation, can be naturally incorporated as first class terms in Prolog. Implementation problems are discussed for a number of alternative solutions. Four examples of data structures: (hash) tables, arrays, characters, and strings are examined individually. An earlier version of this paper was presented at the 1987 Symposium on Logic Programming in San Francisco. 
Abstract-found: 1
Intro-found: 1
Reference: [Allen 78] <author> J. Allen, </author> <title> Anatomy of LISP, </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: Thirdly, when debugging programs it helps if arrays, hash tables etc. can be in- and output. 3.2. Abstract Data Structures It has been suggested that using types and abstract data could be a way to handle the situation. The idea behind abstract data structures <ref> [Allen 78] </ref> is to provide (functions or relations acting as) recognizers, selectors, constructors and predicates on a data structure without revealing its actual representation. This is a beautiful idea but it stands in conflict with the principle of Prolog that all terms have a syntax.
Reference: [Baker 78] <author> H. G. Baker Jr., </author> <title> List Processing in Real Time on a Serial Computer, </title> <journal> Communications of the ACM, </journal> <volume> vol. 21, no. 4, </volume> <pages> pp. 280-293, </pages> <month> April </month> <year> 1978. </year>
Reference-contexts: In our solution above we avoid this by localizing such effects to structures with certain reserved functors. 8.2. Cdr-coded Lists Cdr-coded lists <ref> [Baker 78] </ref> have been proposed as an alternative to arrays and are implemented in some Prolog systems (e.g., PLM [Dobry et al. 85]). These are lists where one or two bits per word are used to store information about how the tail of the list can be found.
Reference: [Barklund 87] <author> J. Barklund, </author> <title> Efficient Interpretation of Prolog Programs, </title> <booktitle> ACM SIGPLAN '87 Symposium on Interpreters and Interpretive Techniques, </booktitle> <address> St. Paul, Minn., </address> <month> June </month> <year> 1987. </year> <note> [Barklund et al. 86] J. </note> <author> Barklund, A. Hugosson, M. Nylen, L. Oestreicher, </author> <title> Tricia User's Guide, </title> <institution> Computing Science Dept., Uppsala University, </institution> <month> Sept. </month> <year> 1986. </year> <note> [Barklund & Millroth 87] J. </note> <author> Barklund, H. Millroth, </author> <title> Hash Tables in Logic Programming, </title> <booktitle> 4th International Conference on Logic Programming, </booktitle> <address> Melbourne, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: To implement Prolog data bases using these hash tables, it is therefore necessary to have separate primitives for freezing and melting clauses [Nakashima et al. 84]. (The internal data base in Tricia is indeed implemented in this way <ref> [Barklund 87] </ref>.) puthash +key +hash_table value new_hash_table new_hash_table is exactly like hash_table, except that key is associated with value. This does not change hash_table. remhash key +hash_table new_hash_table new_hash_table is exactly like hash_table, except that key is not associated with any value. This does not change hash_table.
Reference: [Bowen 81] <author> D. L. Bowen, </author> <title> DECsystem-10 Prolog User's Manual, </title> <institution> University of Edinburgh, Dept. of Artificial Intelligence, Edinburgh, </institution> <year> 1981. </year>
Reference-contexts: Some of the constructs in this paper are implemented in version 0:63 of Tricia [Barklund et al. 86], all of them are intended to be implemented in version 1:0. By "Edinburgh Prolog" we mean the language and semantics of Prolog described in <ref> [Bowen 81] </ref>, not to the actual implementation developed at Edinburgh University. Below we will call this simply "Prolog". 2. HAIRY DATA STRUCTURES In Prolog there are only two kinds of data: atoms (symbols) and structures.
Reference: [Carlsson 86] <author> M. Carlsson, </author> <title> Compilation for Tricia and Its Abstract Machine, </title> <type> UPMAIL Technical Report 35, </type> <institution> Uppsala University, </institution> <month> Sept. </month> <year> 1986. </year> <month> 11 </month>
Reference-contexts: Tricia is an implementation of Prolog on the DEC-2060 computer, developed at Uppsala University. It is based on a modified WAM <ref> [Carlsson 86; Warren 83] </ref> and the built-in predicates are roughly a superset of Edinburgh Prolog. Some of the constructs in this paper are implemented in version 0:63 of Tricia [Barklund et al. 86], all of them are intended to be implemented in version 1:0.
Reference: [Cohen 84] <author> S. Cohen, </author> <title> Multi-Version Structures in Prolog, </title> <booktitle> The International Conference of Fifth Gen--eration Computer Systems, </booktitle> <address> Tokyo, </address> <year> 1984. </year> <note> [Dobry et al. </note> <author> 85] T. P. Dobry, A. M. Despain, Y. N. Patt, </author> <title> Performance Studies of a Prolog Machine Architecture, </title> <institution> University of California, Berkeley, </institution> <year> 1985. </year> <note> [Eriksson & Rayner 84] L-H. </note> <author> Eriksson, M. Rayner, </author> <title> Incorporating mutable arrays into Logic Programming, </title> <booktitle> Second International Logic Programming Conference, </booktitle> <address> Uppsala, </address> <month> July </month> <year> 1984. </year> <editor> [Nakashima et al. 84] H. Nakashima, K. Ueda, S. Tomura, </editor> <title> What Is a Variable in Prolog?, </title> <booktitle> International Conference on Fifth Generation Computer Systems 1984, </booktitle> <pages> pp. 327-332, </pages> <address> Tokyo, </address> <year> 1984. </year>
Reference-contexts: A program not using the general mappings could be run in ordinary Prolog. Connection Machine R fl Lisp [Steele & Hillis 86] has a similar device, called xappings. We will investigate this subject further. 9. RELATED WORK Several authors (e.g., [Eriksson & Rayner 84] and <ref> [Cohen 84] </ref>) have studied how arrays could be incorporated in Logic Programming but little attention has been paid to how they should be made first class terms in Prolog, although some authors may have had a solution like ours in mind.
Reference: [Pereira 85] <author> F. C. N. Pereira, </author> <title> A Structure-Sharing Representation for Unification-Based Grammar Formalisms, </title> <booktitle> 23rd Annual Meeting of the Association for Computational Linguistics, </booktitle> <pages> pp. 137-144, </pages> <address> Chicago, </address> <month> July </month> <year> 1985. </year>
Reference-contexts: Strings are implemented in some Prolog systems but as far as we know, they are either assumed to be constant (i.e., atoms) or implemented inefficiently. 10 <ref> [Pereira 85] </ref> introduces directed acyclic graphs|a data structure related to hash tables|in logic pro-gramming, but does not integrate them among ordinary terms.
Reference: [Steele 84] <author> G. L. Steele Jr., </author> <title> Common Lisp, the Language, </title> <publisher> Digital Press, </publisher> <year> 1984. </year> <note> [Steele & Hillis 86] G.L. </note> <author> Steele Jr., W.D. Hillis, </author> <title> Connection Machine R fl Lisp: Fine-Grained Parallel Symbolic Processing, </title> <booktitle> 1986 ACM Conference on Lisp and Functional Programming, </booktitle> <pages> pp. 279-297, </pages> <address> Cam-bridge, Mass., </address> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: In particular, modifying large data structures is very expensive. One remedy for this, which is the approach taken in some LISP systems (e.g., Common Lisp <ref> [Steele 84] </ref>) is to add new primitive data structures, such as arrays, strings, and hash tables, and built-in operations on them. Unfortunately, doing this with Edinburgh Prolog would destroy the simplicity and uniformity of the language. <p> There are 4 shift bits which are mainly intended for communication with keyboards (named hyper, super, meta and control ) <ref> [Steele 84] </ref>. Any practical implementation of characters as hairy structures will require them to be ground. 6.3.3. Integration. Unlike hash tables and arrays, characters always have a certain number of components. This makes it easy to integrate them in Prolog.
Reference: [Warren 80] <author> D. H. D. Warren, </author> <title> Logic Programming and Compiler Writing, </title> <journal> Software|Practice and Experience, </journal> <volume> vol. 10, no. 2, </volume> <pages> pp. 97-125, </pages> <month> Feb. </month> <year> 1980. </year>
Reference-contexts: This becomes expensive when the tables get large, as they often do. Sometimes a Prolog coding trick is employed: representing the table by a tree whose fringe consists of uninstantiated variables, to facilitate the addition (but not replacement or deletion) of nodes. This is elegant for certain purposes <ref> [Warren 80] </ref>, but is generally awkward and programs using such tables often need to use meta-logical concepts. Hashing is another efficient implementation method for tables.
Reference: [Warren 83] <author> D. H. D. Warren, </author> <title> An Abstract Prolog Instruction Set, </title> <type> SRI Technical Note 309, </type> <month> Oct. </month> <year> 1983. </year> <month> 12 </month>
Reference-contexts: Tricia is an implementation of Prolog on the DEC-2060 computer, developed at Uppsala University. It is based on a modified WAM <ref> [Carlsson 86; Warren 83] </ref> and the built-in predicates are roughly a superset of Edinburgh Prolog. Some of the constructs in this paper are implemented in version 0:63 of Tricia [Barklund et al. 86], all of them are intended to be implemented in version 1:0.
References-found: 10

