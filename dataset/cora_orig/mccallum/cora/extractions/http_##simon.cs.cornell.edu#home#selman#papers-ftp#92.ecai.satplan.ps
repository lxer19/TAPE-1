URL: http://simon.cs.cornell.edu/home/selman/papers-ftp/92.ecai.satplan.ps
Refering-URL: http://simon.cs.cornell.edu/home/selman/papers-ftp/papers.html
Root-URL: 
Email: fkautz, selmang@research.att.com  
Title: Planning as Satisfiability  
Author: Henry Kautz and Bart Selman 
Address: 600 Mountain Avenue, Room 2C-407 Murray Hill, NJ 07974  
Affiliation: AI Principles Research Department AT&T Bell Laboratories  
Abstract: We develop a formal model of planning based on satisfiability rather than deduction. The satisfiability approach not only provides a more flexible framework for stating different kinds of constraints on plans, but also more accurately reflects the theory behind modern constraint-based planning systems. Finally, we consider the computational characteristics of the resulting formulas, by solving them with two very different satisfiability testing procedures.
Abstract-found: 1
Intro-found: 1
Reference: [ Agre and Horswill, 1992 ] <author> Philip E. Agre and Ian Horswill. </author> <title> Cultural support for improivisation. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <address> Menlo Park, CA, 1992. </address> <publisher> AAAI Press/The MIT Press. </publisher>
Reference-contexts: This raises the possibility that the computational nature of real-world scheduling tasks is fundamentally different from the kind of blocks world "puzzles" traditionally studied in AI (see also <ref> [ Agre and Horswill, 1992 ] </ref> for a discussion of this claim). This issue is the focus of our current research. 7 Conclusions We have developed a formal model of planning based on satisfiability rather than deduction.
Reference: [ Allen, 1991 ] <author> James Allen. </author> <title> Planning as temporal reasoning. </title> <booktitle> In Proceedings of the Second International Conference on Principles of Knowledge Representation and Reasoning (KR-89), </booktitle> <address> Cambridge, MA, </address> <year> 1991. </year> <month> 10 </month>
Reference: [ Chapman, 1987 ] <author> David Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial In--telligence, </journal> <volume> 32 </volume> <pages> 333-378, </pages> <year> 1987. </year>
Reference-contexts: It is likewise easy to state arbitrary constraints on the plan | for example, that it contain a specified action performed at a specified time. Finally, the approach provides a more accurate formal model of modern constraint-based planners <ref> [ Stefik, 1981; Chapman, 1987 ] </ref> . The second part of the paper reports on our preliminary experiments in solving the Boolean satisfiability problems generated by specific blocks world planning problems. <p> In the satisfiability framework the plan requirements are all constraints on the models. This view turns out to tie in with the notion of planning with constraints <ref> [ Stefik, 1981; Chapman, 1987 ] </ref> , widely used in modern planning systems.
Reference: [ Davis and Putnam, 1960 ] <author> M. Davis and H. Putnam. </author> <title> A computing procedure for quantification theory. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 7 </volume> <pages> 201-215, </pages> <year> 1960. </year>
Reference-contexts: The second part of the paper reports on our preliminary experiments in solving the Boolean satisfiability problems generated by specific blocks world planning problems. We tried two algorithms: the GSAT program mentioned above, and DP, an implementation of the standard Davis-Putnam backtracking algorithm <ref> [ Davis and Putnam, 1960 ] </ref> . The backtracking algorithm did surprisingly well on most of the planning problems, despite that fact that it failed to solve similarly-sized coloring and random problems. <p> The most widely-used algorithm for solving satisfiability problems is the Davis-Putnam procedure <ref> [ Davis and Putnam, 1960 ] </ref> , which is in essence a resolution method [ Vellino, 1989 ] . This algorithm incrementally builds up a truth assignment and backtracks when it determines the assignment does not satisfy the formula.
Reference: [ Green, 1969 ] <author> C. Green. </author> <title> Application of theorem proving to problem solving. </title> <booktitle> In Proceedings of IJCAI-69, </booktitle> <pages> pages 219-239, </pages> <address> Washington, D.C., </address> <year> 1969. </year>
Reference: [ Gupta and Nau, 1991 ] <author> Naresh Gupta and Dana S. Nau. </author> <title> Complexity results for blocks-world planning. </title> <booktitle> In Proceedings of AAAI-91, </booktitle> <pages> page 629, </pages> <address> Menlo Park, CA, 1991. </address> <publisher> AAAI Press/The MIT Press. </publisher>
Reference-contexts: It may have been that the task of searching the exponentially large space of truth assignments for a model seemed far more daunting than searching the space of resolution proofs (although the latter could be equally large, since blocks world planning is NP-hard <ref> [ Gupta and Nau, 1991 ] </ref> regardless of the formalization). Recently, we have been developing algorithms that solve extremely large and difficult satisfiability problems expressed as sets of propositional clauses.
Reference: [ Johnson et al., 1991 ] <author> David S. Johnson, Cecilia R. Aragon, Lyle A. McGeoch, and Catherine Schevon. </author> <title> Optimization by simulated annealing: an experimental evaluation; part ii, graph coloring and number partioning. </title> <journal> Operations Research, </journal> <volume> 39(3) </volume> <pages> 378-406, </pages> <year> 1991. </year>
Reference-contexts: These problems were generated from graph-coloring problems that were known to be hard <ref> [ Johnson et al., 1991 ] </ref> , and random problems from a "hard" random distribution [ Mitchell et al., 1992 ] . A few of the results comparing the speed of the two algorithms appear in Table 2, along with some of the tests we ran on the planning formulas.
Reference: [ McCarthy and Hayes, 1986 ] <author> J. McCarthy and P. J. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In D. MICHIE, editor, </editor> <booktitle> Machine Intelligence 4, </booktitle> <publisher> page 463ff. Ellis Horwood, </publisher> <address> Chichester, England, </address> <year> 1986. </year>
Reference: [ Minton et al., 1990 ] <author> Steven Minton, Mark D. Johnston, Andrew B. Philips, and Philip Laird. </author> <title> Solving large-scale constraint satisfaction and scheduling problems using a heuristic repair method. </title> <booktitle> In Proceedings of AAAI-90, </booktitle> <pages> pages 17-24, </pages> <address> Cambridge, MA, 1990. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: Our current version of GSAT has no special mechanism for handling Horn clauses efficiently. Minton et al. <ref> [ Minton et al., 1990 ] </ref> claim very good results for using a greedy local search method for a large scheduling problem involving the Hubble Space Telescope.
Reference: [ Mitchell et al., 1992 ] <author> D. Mitchell, B. Selman, and H.J. Levesque. </author> <title> Hard and easy distribution of sat problems. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <address> San Jose, CA, </address> <year> 1992. </year>
Reference-contexts: These problems were generated from graph-coloring problems that were known to be hard [ Johnson et al., 1991 ] , and random problems from a "hard" random distribution <ref> [ Mitchell et al., 1992 ] </ref> . A few of the results comparing the speed of the two algorithms appear in Table 2, along with some of the tests we ran on the planning formulas.
Reference: [ Pednault, 1988 ] <author> E.P.D. Pednault. </author> <title> Synthesizing plans that contain actions with context-dependent effects. </title> <journal> Computational Intelligence, </journal> <volume> 4(4) </volume> <pages> 356-372, </pages> <month> November </month> <year> 1988. </year> <note> special issue on planning. </note>
Reference: [ Rosenschein, 1981 ] <author> Stanley J. Rosenschein. </author> <title> Plan synthesis: a logical perspective. </title> <booktitle> In Proceedings of IJCAI-81, </booktitle> <year> 1981. </year>
Reference: [ Selman et al., 1992 ] <author> B. Selman, Levesque H.J., and D. Mitchell. </author> <title> A new method for solving hard satisfiability problems. </title> <booktitle> In Proceedings of AAAI-92, </booktitle> <address> San Jose, CA, </address> <year> 1992. </year>
Reference-contexts: Recently, we have been developing algorithms that solve extremely large and difficult satisfiability problems expressed as sets of propositional clauses. As reported in <ref> [ Selman et al., 1992 ] </ref> , we have used a randomized greedy algorithm GSAT to solve empirically hard random formulas as well as encodings of hard graph-coloring problems. <p> If several propositions are equally good, it picks one at random. It continues to flip until either a satisfying model is found or a predetermined number of flips are performed. If a satisfying model is not found, GSAT repeats the procedure, starting with a different random assignment. In <ref> [ Selman et al., 1992 ] </ref> , we report on the details of GSAT, and show that it can solve non-trivial satisfiability problems that are an order of magnitude larger than can be solved by DP.
Reference: [ Stefik, 1981 ] <author> Mark Stefik. </author> <title> Planning with constraints (molgen: Part 1 and 2). </title> <journal> Artificial Intelligence, </journal> <volume> 16 </volume> <pages> 111-170, </pages> <year> 1981. </year> <month> 11 </month>
Reference-contexts: It is likewise easy to state arbitrary constraints on the plan | for example, that it contain a specified action performed at a specified time. Finally, the approach provides a more accurate formal model of modern constraint-based planners <ref> [ Stefik, 1981; Chapman, 1987 ] </ref> . The second part of the paper reports on our preliminary experiments in solving the Boolean satisfiability problems generated by specific blocks world planning problems. <p> In the satisfiability framework the plan requirements are all constraints on the models. This view turns out to tie in with the notion of planning with constraints <ref> [ Stefik, 1981; Chapman, 1987 ] </ref> , widely used in modern planning systems.
Reference: [ Vellino, 1989 ] <author> A. Vellino. </author> <title> The complexity of automated reasoning. </title> <type> Ph.D. thesis, </type> <institution> Department of Philosophy, University of Toronto, Toronto, Canada, </institution> <year> 1989. </year> <month> 12 </month>
Reference-contexts: The most widely-used algorithm for solving satisfiability problems is the Davis-Putnam procedure [ Davis and Putnam, 1960 ] , which is in essence a resolution method <ref> [ Vellino, 1989 ] </ref> . This algorithm incrementally builds up a truth assignment and backtracks when it determines the assignment does not satisfy the formula.
References-found: 15

