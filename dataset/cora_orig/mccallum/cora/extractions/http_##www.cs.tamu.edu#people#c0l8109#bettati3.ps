URL: http://www.cs.tamu.edu/people/c0l8109/bettati3.ps
Refering-URL: http://www.cs.tamu.edu/people/c0l8109/
Root-URL: http://www.cs.tamu.edu
Email: Email: fchengzhi,bettati,zhaog@cs.tamu.edu  
Phone: Phone 409 845 5098  
Title: Response Time Analysis for Distributed Real-Time Systems with Bursty Job Arrivals  
Author: Chengzhi Li Riccardo Bettati Wei Zhao 
Address: College Station, TX 77843-3112  
Affiliation: Department of Computer Science Texas A M University  
Abstract: This paper presents a new schedulability analysis methodology for distributed hard real-time systems with bursty job arrivals. The schedulability is analyzed by comparing worst-case response times of jobs with their timing constraints. We compute response times with a new method, which uses the amount of received service time to determine the response time of instances of a job. We illustrate how this method can be applied to exactly determine worst-case response times for processors with preemptive static-priority schedulers, and how it gives a good approximation on the response times for processors with non-preemptive static-priority scheduling or first-come-first-served scheduling. Our schedulability analysis method is the first to support systems with arbitrary job arrival patterns. Nevertheless, it performs better than other known approaches used for systems with periodic job arrivals. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Sun and J. W. S. Liu. </author> <title> Synchronization protocols in distributed real-time systems. </title> <booktitle> In Proc. of IEEE ICDCS, </booktitle> <year> 1996. </year>
Reference-contexts: By appropriately synchronizing the execution of the job on the first processor and the start of the job on the second processor, the execution of the job on the second processor may be made to look like a periodic job. In <ref> [1] </ref>, a number of such synchronization schemes are described and their relative performance is compared. The advantage of these synchronization schemes is that they allow the use of traditional schedulability analysis methods for periodic workloads. As was pointed out in [1], appropriate synchronization reduces the worst-case end-to-end response times as compared <p> In <ref> [1] </ref>, a number of such synchronization schemes are described and their relative performance is compared. The advantage of these synchronization schemes is that they allow the use of traditional schedulability analysis methods for periodic workloads. As was pointed out in [1], appropriate synchronization reduces the worst-case end-to-end response times as compared to systems with no such synchronization (in [1] this is called Direct Synchronization). However, it adds overhead to the system, and increases the average end-to-end response times for jobs. <p> The advantage of these synchronization schemes is that they allow the use of traditional schedulability analysis methods for periodic workloads. As was pointed out in <ref> [1] </ref>, appropriate synchronization reduces the worst-case end-to-end response times as compared to systems with no such synchronization (in [1] this is called Direct Synchronization). However, it adds overhead to the system, and increases the average end-to-end response times for jobs. In addition, it is of limited applicability in systems with jobs that are inherently aperiodic. The theory presented in this paper is designed to analyze aperiodic workloads. <p> The theory presented in this paper is designed to analyze aperiodic workloads. As such, it can handle periodic and aperiodic jobs, and combinations thereof, and more accurately determines the schedulability of periodic jobs in distributed systems with no synchronization than other approaches, for example <ref> [1] </ref>. 2. Previous Work The first result on schedulability analysis was presented in [23]. This schedulability test was performed by giving a utilization bound if the total utilization of the single processor is less than 69%, the rate monotonic scheduling will guarantee that all jobs meet their deadlines. <p> This approach relies on a synchronization scheme between processors called Phase Modification. Once an instance of a job completes on a processor, the release of the corresponding instance on the next processor is delayed so that the arrivals of that job on the second processor are periodic. In <ref> [1, 2] </ref> Sun and Liu compare various synchronization mechanisms and describe an iterative algorithm to bound the end-to-end response times of jobs in distributed systems with Direct Synchronization. <p> We therefore assume that the completion of an subjob on one processor signals that the corresponding instance of the next subjob is released on the subsequent processor. This assumption can be enforced with the help of the Direct Synchronization Protocol <ref> [1] </ref> to signal the completion of a subjob. When an instance of a subjob completes processing, a synchronization signal is sent to the processor where its immediate successor executes. Consequently, an instance of its successor is released immediately. This protocol is easy to use and implement. <p> Evaluation We conducted a series of simulations to study the performance of the proposed methods for analysis of response time in the distributed real-time systems with various scheduling algorithms. We are going to demonstrate that our new method generates tighter bounds on response time than approaches proposed by others <ref> [1, 2] </ref>, for both the case of periodic and aperiodic job arrivals. 5.1. Simulation model and assumptions In our experiments, we simulate the execution of jobs in a job shop. The shop consists of a sequence of stages, each of which contains a number of processors. <p> Job T 2 executes on P 1 in the first stage, and on P 4 , P 5 , and P 8 on the subsequent stages. In the case of static priority scheduling, the priority assignment must be determined. We use a relative deadline monotonic priority assignment algorithm <ref> [1] </ref>, which assigns priorities to subjobs as follows: First, a sub-deadline of subjob T i;j is defined as follows D i;j = P n i D i : (24) Then, subjobs on a particular processor are assigned priorities in accordance to their sub-deadlines. <p> The exact analysis method for static priority preemptive scheduling as proposed in Section 4.1. * SPNP/App: The approximate method for static priority non preemptive scheduling (SPNP) as proposed in Section 4.2.2. * FCFS/App: The approximate method for FCFS scheduling as proposed in Section 4.2.3 * SPP/S&L: The method proposed in <ref> [1, 2] </ref>. This method is associated with static priority preemptive scheduling. We measure the performance of each scheme in terms of admission probability. The admission probability is defined as the probability that a randomly generated job set can meet its deadline requirements. <p> Of course the proposed methodology can handle heterogeneous systems, where different processors run different schedulers. Third, we have shown that our approach gives good results for systems with periodic job arrivals as well, in particular in comparison with recently developed methods, such as <ref> [1, 2] </ref>. A number of questions remain open. We are investigating more general methodology to deal with the "physical loop" caused by jobs 0Fvisiting the same processor more than once and the "logical loop" caused by certain jobs disturbing each other on different processors.
Reference: [2] <author> J. Sun and J. W. S. Liu. </author> <title> Bounding the end-to-end response times of tasks in a distributed real-time system using the direct synchronization protocol. </title> <type> Technical report UIUCDCS-R-96-1949, </type> <institution> University of Illinois at Urbana-Champaign, Dept. of Computer Science, </institution> <month> March </month> <year> 1996. </year>
Reference-contexts: This approach relies on a synchronization scheme between processors called Phase Modification. Once an instance of a job completes on a processor, the release of the corresponding instance on the next processor is delayed so that the arrivals of that job on the second processor are periodic. In <ref> [1, 2] </ref> Sun and Liu compare various synchronization mechanisms and describe an iterative algorithm to bound the end-to-end response times of jobs in distributed systems with Direct Synchronization. <p> Evaluation We conducted a series of simulations to study the performance of the proposed methods for analysis of response time in the distributed real-time systems with various scheduling algorithms. We are going to demonstrate that our new method generates tighter bounds on response time than approaches proposed by others <ref> [1, 2] </ref>, for both the case of periodic and aperiodic job arrivals. 5.1. Simulation model and assumptions In our experiments, we simulate the execution of jobs in a job shop. The shop consists of a sequence of stages, each of which contains a number of processors. <p> The exact analysis method for static priority preemptive scheduling as proposed in Section 4.1. * SPNP/App: The approximate method for static priority non preemptive scheduling (SPNP) as proposed in Section 4.2.2. * FCFS/App: The approximate method for FCFS scheduling as proposed in Section 4.2.3 * SPP/S&L: The method proposed in <ref> [1, 2] </ref>. This method is associated with static priority preemptive scheduling. We measure the performance of each scheme in terms of admission probability. The admission probability is defined as the probability that a randomly generated job set can meet its deadline requirements. <p> Of course the proposed methodology can handle heterogeneous systems, where different processors run different schedulers. Third, we have shown that our approach gives good results for systems with periodic job arrivals as well, in particular in comparison with recently developed methods, such as <ref> [1, 2] </ref>. A number of questions remain open. We are investigating more general methodology to deal with the "physical loop" caused by jobs 0Fvisiting the same processor more than once and the "logical loop" caused by certain jobs disturbing each other on different processors.
Reference: [3] <author> J. Sun. </author> <title> Fixed-Priority Scheduling Of Periodic Tasks With End-To-End Deadlines. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1996. </year>
Reference: [4] <author> R. Bettati. </author> <title> End-to-End Scheduling to Meet Deadlines in Distributed System. </title> <type> PhD thesis, </type> <institution> University of Illi-nois at Urbana-Champaign, </institution> <year> 1994. </year>
Reference-contexts: Tindell, Burns, Richardson, Tindell, and Welling [9] extended the approach further to characterize the re-arrival pattern, covering 'bursty' sporadic and periodic jobs, and introduced the concept of release jitter (where a task is not released into the system immediately upon arrival, but may suffer a bounded deferral time). Bettati <ref> [4] </ref> provides a method for end-to-end schedulability analysis for distributed system. This approach relies on a synchronization scheme between processors called Phase Modification.
Reference: [5] <author> R. Bettati and J. W. S. Liu. </author> <title> End-to-End Scheduling to Meet Deadlines in Distributed Systems. </title> <booktitle> In Proc. of IEEE ICDCS, </booktitle> <year> 1992. </year>
Reference: [6] <author> K. Tindell and J. Clark. </author> <title> Holistic schedulability analysis for distributed hard real-time system. </title> <journal> In Microprocess ing and Microprogramming, </journal> <volume> 50(2), </volume> <month> April </month> <year> 1994. </year>
Reference-contexts: Direct synchronization between two processors means that the completion of an instance of a job on the first processor signals that the correspondent instance can be immediately released on the second processor. Sun and Liu correct a weakness in the holistic schedulability analysis proposed in <ref> [6] </ref>. However the upper bounds obtained by using their algorithm are still rather loose. Most of the above work relies on one key technique, busy period analysis, which was first proposed in [13] and later extended in [6, 7, 9, 10]. <p> However the upper bounds obtained by using their algorithm are still rather loose. Most of the above work relies on one key technique, busy period analysis, which was first proposed in [13] and later extended in <ref> [6, 7, 9, 10] </ref>. A k-level busy period of a processor is a continuous time interval during which only these instances of jobs with priorities higher than or equal to k are executed.
Reference: [7] <author> K. Tindell, A. Burns and A. J. Wellings. </author> <title> An extensible approach for analyzing fixed priority hard real-time tasks. </title> <editor> In J. </editor> <booktitle> of Real-Time Systems, </booktitle> <volume> 6(2), </volume> <month> March </month> <year> 1994. </year>
Reference-contexts: However the upper bounds obtained by using their algorithm are still rather loose. Most of the above work relies on one key technique, busy period analysis, which was first proposed in [13] and later extended in <ref> [6, 7, 9, 10] </ref>. A k-level busy period of a processor is a continuous time interval during which only these instances of jobs with priorities higher than or equal to k are executed.
Reference: [8] <author> N. C. Audsley, A. Burns, M. F. Richardson, and A. J. Wellings. </author> <title> Hard real-time scheduling: the deadline-monotonic approach. </title> <booktitle> In Proc. of IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <year> 1991. </year>
Reference-contexts: Sha, Rajkumar, and Lehoczky [14] discover a concurrency control protocol to permit jobs to share critical sections of codes. Audsley, Burns, Richardson, and Welling <ref> [8] </ref> permit the addition of guaranteed sporadic tasks (where there is a minimum time between the re-arrivals of such jobs).
Reference: [9] <author> N. C. Audsley, A. Burns, M. F. Richardson, K. Tindell and A. J. Wellings. </author> <title> Applying new scheduling theory to static priority preemptive scheduling. </title> <journal> In J. of Software Eng., </journal> <volume> vol 8, no. 5, </volume> <month> Sept. </month> <year> 1993 </year>
Reference-contexts: Audsley, Burns, Richardson, and Welling [8] permit the addition of guaranteed sporadic tasks (where there is a minimum time between the re-arrivals of such jobs). Tindell, Burns, Richardson, Tindell, and Welling <ref> [9] </ref> extended the approach further to characterize the re-arrival pattern, covering 'bursty' sporadic and periodic jobs, and introduced the concept of release jitter (where a task is not released into the system immediately upon arrival, but may suffer a bounded deferral time). <p> However the upper bounds obtained by using their algorithm are still rather loose. Most of the above work relies on one key technique, busy period analysis, which was first proposed in [13] and later extended in <ref> [6, 7, 9, 10] </ref>. A k-level busy period of a processor is a continuous time interval during which only these instances of jobs with priorities higher than or equal to k are executed. <p> In this paper, we will consider both static priority preemptive (SPP) and static priority non preemptive (SPNP) scheduling algorithms. Given that SPP or SPNP scheduling is used, the response time of jobs is sensitive to how priorities are assigned to subjobs. Priority assignment algorithms have been widely studied in <ref> [9, 22, 23] </ref>, and are not further discussed in this paper, since our results apply to arbitrary priority assignments. In the following we assume that subjob is assigned priority k;j on processor P (k; j). The smaller the value of k;j , the higher the priority of T k;j .
Reference: [10] <author> A. Burns, K. Tindell and A. J. Wellings. </author> <title> Fixed priority scheduling with deadlines prior to completion. </title> <booktitle> In Proc. of Euromicro Workshop on Real-Time Systems, </booktitle> <year> 1994. </year>
Reference-contexts: However the upper bounds obtained by using their algorithm are still rather loose. Most of the above work relies on one key technique, busy period analysis, which was first proposed in [13] and later extended in <ref> [6, 7, 9, 10] </ref>. A k-level busy period of a processor is a continuous time interval during which only these instances of jobs with priorities higher than or equal to k are executed.
Reference: [11] <author> R. I. Davis, K. Tindell and A. Burns. </author> <title> Scheduling slack time in fixed priority pre-emptive systems. </title> <booktitle> In Proc. of IEEE RTSS, </booktitle> <year> 1993. </year>
Reference: [12] <author> J. Lehoczky, L. Sha, and Y. Ding. </author> <title> The rate monotonic scheduling algorithm: Exact characterization and average case behavior. </title> <booktitle> In Proc. of IEEE RTSS, </booktitle> <year> 1989. </year>
Reference-contexts: Since then, the results of [23] have greatly been generalized. For example, Lehoczky, Sha, and Ding <ref> [12] </ref> provide a sufficient and necessary schedulability test to determine the worst case response time. Leung and Whitehead [22] formulate an alternative priority assignment policy, where the job deadline can be less than the period of a job, and provide simple algorithm to determine the schedulability of such jobs.
Reference: [13] <author> J. Lehoczky. </author> <title> Fixed priority scheduling of periodic task sets with arbitrary deadlines. </title> <booktitle> In Proc. of IEEE RTSS, </booktitle> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: Sun and Liu correct a weakness in the holistic schedulability analysis proposed in [6]. However the upper bounds obtained by using their algorithm are still rather loose. Most of the above work relies on one key technique, busy period analysis, which was first proposed in <ref> [13] </ref> and later extended in [6, 7, 9, 10]. A k-level busy period of a processor is a continuous time interval during which only these instances of jobs with priorities higher than or equal to k are executed.
Reference: [14] <author> L. Sha, R. Rajkumar and J. Lehoczky. </author> <title> Priority inheritance protocols: an approach to real-time synchronization. </title> <journal> In IEEE Transactions on Computers, </journal> <volume> vol. 39, no. 9, </volume> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: Leung and Whitehead [22] formulate an alternative priority assignment policy, where the job deadline can be less than the period of a job, and provide simple algorithm to determine the schedulability of such jobs. Sha, Rajkumar, and Lehoczky <ref> [14] </ref> discover a concurrency control protocol to permit jobs to share critical sections of codes. Audsley, Burns, Richardson, and Welling [8] permit the addition of guaranteed sporadic tasks (where there is a minimum time between the re-arrivals of such jobs).
Reference: [15] <author> J. Lehoczky and S. Ramos-Thuel. </author> <title> An optimal algorithm for scheduling soft-aperiodic tasks in fixed-priority preemptive systems. </title> <booktitle> In Proc. of IEEE RTSS, </booktitle> <year> 1992. </year>
Reference: [16] <author> S. Ramos-Thuel and J. Lehoczky. </author> <title> On-line scheduling of hard deadline aperiodic tasks in fixed-priority systems. </title> <booktitle> In Proc. of IEEE RTSS, </booktitle> <year> 1993. </year>
Reference-contexts: the period, or (ii) having servers, which look like periodic jobs to the rest of 1 Some approaches for schedulability analysis do not require the explicit computation of response times, but determine the schedulability indirectly, for example by relying on resource utilization [23]. the system, execute the non-periodic jobs (e.g. <ref> [16] </ref>), or (iii) splitting the non-periodic jobs each into collections of periodic jobs of different sizes and periods. In all three cases, well-known schedulability analysis methodologies for periodic workloads can be used.
Reference: [17] <author> C. Li, R. Bettati and W. Zhao. </author> <title> Static priority scheduling for ATM networks. </title> <booktitle> In Proc. of IEEE RTSS, </booktitle> <year> 1997. </year>
Reference: [18] <author> C. Li, R. Bettati and W. Zhao. </author> <title> Response time analysis for distributed real-time systems with bursty job arrivals. </title> <type> Technical report, </type> <institution> Department of Computer Science, Texas A&M University, </institution> <year> 1998. </year>
Reference-contexts: Theorem 1 The worst case end-to-end response time d k of job T k is given as follows: d k = max (f k;n k ;dep 1 Proof: Due to space limitation, all proofs in this paper are omitted. An interested reader is referred to <ref> [18] </ref>. Q.E.D Typically for real-time systems we may assume that the arrival functions of the first subjobs are known. Hence, we need to determine the departure function on the last processor in order to use Formula (7).
Reference: [19] <author> M. Joseph and P. Pandya. </author> <title> Finding response times in a real-time system. </title> <journal> In Journal of Computerl, </journal> <volume> vol. 29, no. 5, </volume> <year> 1986. </year>
Reference: [20] <author> R. L. Cruz. </author> <title> A calculus for network delay, part I,II: Network analysis. </title> <journal> In IEEE Trans. on Inform. Theory, </journal> <volume> 37(1), </volume> <month> Jan. </month> <year> 1991. </year>
Reference: [21] <author> R. L. Cruz. </author> <title> Quality of service guarantees in virtual circuit switched networks. </title> <journal> In IEEE Journal on Selected Areas in Commu., </journal> <volume> vol. 13, no. 6, </volume> <year> 1995. </year>
Reference: [22] <author> J. Y.-T. Leung and J. Whitehead. </author> <title> On the complexity of fixed-priority scheduling of periodic, real-time tasks. In Performance Evaluation, </title> <type> 2, </type> <month> December </month> <year> 1982. </year>
Reference-contexts: Since then, the results of [23] have greatly been generalized. For example, Lehoczky, Sha, and Ding [12] provide a sufficient and necessary schedulability test to determine the worst case response time. Leung and Whitehead <ref> [22] </ref> formulate an alternative priority assignment policy, where the job deadline can be less than the period of a job, and provide simple algorithm to determine the schedulability of such jobs. Sha, Rajkumar, and Lehoczky [14] discover a concurrency control protocol to permit jobs to share critical sections of codes. <p> In this paper, we will consider both static priority preemptive (SPP) and static priority non preemptive (SPNP) scheduling algorithms. Given that SPP or SPNP scheduling is used, the response time of jobs is sensitive to how priorities are assigned to subjobs. Priority assignment algorithms have been widely studied in <ref> [9, 22, 23] </ref>, and are not further discussed in this paper, since our results apply to arbitrary priority assignments. In the following we assume that subjob is assigned priority k;j on processor P (k; j). The smaller the value of k;j , the higher the priority of T k;j .
Reference: [23] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard-real-time environment. </title> <journal> In J. of the Association for Computing Machinery, </journal> <volume> 20(1), </volume> <month> Jan. </month> <year> 1973. </year>
Reference-contexts: periodic jobs with the minimum inter-arrival time being the period, or (ii) having servers, which look like periodic jobs to the rest of 1 Some approaches for schedulability analysis do not require the explicit computation of response times, but determine the schedulability indirectly, for example by relying on resource utilization <ref> [23] </ref>. the system, execute the non-periodic jobs (e.g. [16]), or (iii) splitting the non-periodic jobs each into collections of periodic jobs of different sizes and periods. In all three cases, well-known schedulability analysis methodologies for periodic workloads can be used. <p> As such, it can handle periodic and aperiodic jobs, and combinations thereof, and more accurately determines the schedulability of periodic jobs in distributed systems with no synchronization than other approaches, for example [1]. 2. Previous Work The first result on schedulability analysis was presented in <ref> [23] </ref>. This schedulability test was performed by giving a utilization bound if the total utilization of the single processor is less than 69%, the rate monotonic scheduling will guarantee that all jobs meet their deadlines. Since then, the results of [23] have greatly been generalized. <p> Work The first result on schedulability analysis was presented in <ref> [23] </ref>. This schedulability test was performed by giving a utilization bound if the total utilization of the single processor is less than 69%, the rate monotonic scheduling will guarantee that all jobs meet their deadlines. Since then, the results of [23] have greatly been generalized. For example, Lehoczky, Sha, and Ding [12] provide a sufficient and necessary schedulability test to determine the worst case response time. <p> In this paper, we will consider both static priority preemptive (SPP) and static priority non preemptive (SPNP) scheduling algorithms. Given that SPP or SPNP scheduling is used, the response time of jobs is sensitive to how priorities are assigned to subjobs. Priority assignment algorithms have been widely studied in <ref> [9, 22, 23] </ref>, and are not further discussed in this paper, since our results apply to arbitrary priority assignments. In the following we assume that subjob is assigned priority k;j on processor P (k; j). The smaller the value of k;j , the higher the priority of T k;j .
Reference: [24] <author> J. A. Stankovic. </author> <title> Misconceptions about real-time computing: A serious problem for next generation systems. </title> <journal> In J. of IEEE Computer, </journal> <volume> 21(10), </volume> <month> Oct. </month> <year> 1988. </year>
Reference: [25] <author> J. A. Stankovic and K. Ramamritham, </author> <title> editors. Hard Real-Time Systems. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference: [26] <author> Chang-Gun Lee, J. Hahn, Y. M. Seo, S. L. Min and R. Ha. </author> <title> Analysis of Cache-related Preemption Delay in Fixed-priority Preemptive Scheduling. </title> <booktitle> In Proc. of IEEE RTSS, </booktitle> <year> 1996. </year>
References-found: 26

