URL: http://www.cs.columbia.edu/~hgs/papers/Schu9610_Operating.ps.gz
Refering-URL: http://www.cs.columbia.edu/~hgs/resume/resume.html
Root-URL: http://www.cs.columbia.edu
Title: Multimedia Systems Manuscript-Nr. (will be inserted by hand later) Operating system issues for continuous media  
Author: Henning Schulzrinne 
Keyword: Key words: Continuous media Operating system enhancement CPU scheduling Network implementation  
Date: Received: March 1996 Accepted: May 1996  
Address: Hardenbergplatz 2 10623 Berlin  
Affiliation: GMD Fokus  
Abstract: Continuous media such as audio and video pose new challenges to all parts of multipurpose operating systems. We discuss issues related to CPU scheduling, memory allocation, system support and application environments and summarize some of the solutions proposed in the literature. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Anderson, D. P. </author> <year> (1990, </year> <month> October). </month> <title> Meta-scheduling for distributed continuous media. </title> <type> Technical Report UCB/CSD 90/599, </type> <institution> University of Cali-fornia, Berkeley. </institution>
Reference: <author> Anderson, D. P. </author> <year> (1993, </year> <month> August). </month> <title> Metascheduling for continuous media. </title> <journal> ACM Transactions on Computer Systems 11 (3), </journal> <pages> 226-252. </pages>
Reference: <author> Anderson, D. P., S.-Y. Tzou, R. Wahbe, R. Govindan, and M. Andrews (1989, </author> <month> October). </month> <title> Support for continuous media in the DASH system. </title> <type> Technical Report CSD 89/537, </type> <institution> University of California, Berkeley. </institution>
Reference-contexts: These and some attempted approaches are the subject of this paper, with a strong emphasis on implementation-related work rather than on theoretical results from scheduling theory. First, it is helpful to distinguish between continuous media <ref> (Anderson, Tzou, Wahbe, Govindan, and Andrews 1989) </ref> and multimedia, where the latter includes the former. Continuous media are characterized by a timing relationship between source and sink, that is, the sink must reproduce the timing relationship that existed at the source. <p> The data points shown naturally reflect only "typical" usage. In particular, the mixing of several audio or video streams, their manipulation (special effects) or higher spa-tiotemporal resolution can extend the window of scarcity almost indefinitely. Fig. 1. The window of scarcity <ref> (Anderson and Wahbe 1989) </ref> We have indicated some of the challenges faced by system designers when integrating continuous media into a general-purpose operating system. However, the basic functionality required of a general-purpose, continuous media-enabled operating system remains similar. <p> Also, the burst size B does not enter into the computation of the logical arrival time. A message arriving after its logical arrival time is termed critical, while one arriving before is termed workahead. An example is shown in Fig. 3. Fig. 3. Example of workahead function <ref> (Anderson, Tzou, Wahbe, Govindan, and Andrews 1989) </ref> Any of the scheduling algorithms discussed in this section apply to both processes and threads. (Threads are schedulable entities without their own address space.) Indeed, Govindan and Anderson argue, in their split-level scheduling proposal (Govindan and Anderson 1991), that both real-time threads and processes <p> Another approach, used also by the Mach operating system, is to avoid copying by remapping pages from one process to another. However, the attendant overhead in updating kernel tables and remapping pointers may approach the cost of copying for all but the largest messages. An-derson <ref> (Anderson, Tzou, Wahbe, Govindan, and Andrews 1989) </ref> introduces a restricted remapping in the context of the DASH message-based operating system for continuous media, in which only a special memory region can be remapped and only between the same virtual addresses in sender and receiver address spaces.
Reference: <author> Anderson, D. P. and R. </author> <title> Wahbe (1989, March). A framework for multimedia communication in a general-purpose distributed system. </title> <type> Technical Report UCB/CSD 89/498, </type> <institution> University of California at Berkeley, CS Division, Berkeley, California. </institution>
Reference-contexts: These and some attempted approaches are the subject of this paper, with a strong emphasis on implementation-related work rather than on theoretical results from scheduling theory. First, it is helpful to distinguish between continuous media <ref> (Anderson, Tzou, Wahbe, Govindan, and Andrews 1989) </ref> and multimedia, where the latter includes the former. Continuous media are characterized by a timing relationship between source and sink, that is, the sink must reproduce the timing relationship that existed at the source. <p> The data points shown naturally reflect only "typical" usage. In particular, the mixing of several audio or video streams, their manipulation (special effects) or higher spa-tiotemporal resolution can extend the window of scarcity almost indefinitely. Fig. 1. The window of scarcity <ref> (Anderson and Wahbe 1989) </ref> We have indicated some of the challenges faced by system designers when integrating continuous media into a general-purpose operating system. However, the basic functionality required of a general-purpose, continuous media-enabled operating system remains similar. <p> Also, the burst size B does not enter into the computation of the logical arrival time. A message arriving after its logical arrival time is termed critical, while one arriving before is termed workahead. An example is shown in Fig. 3. Fig. 3. Example of workahead function <ref> (Anderson, Tzou, Wahbe, Govindan, and Andrews 1989) </ref> Any of the scheduling algorithms discussed in this section apply to both processes and threads. (Threads are schedulable entities without their own address space.) Indeed, Govindan and Anderson argue, in their split-level scheduling proposal (Govindan and Anderson 1991), that both real-time threads and processes <p> Another approach, used also by the Mach operating system, is to avoid copying by remapping pages from one process to another. However, the attendant overhead in updating kernel tables and remapping pointers may approach the cost of copying for all but the largest messages. An-derson <ref> (Anderson, Tzou, Wahbe, Govindan, and Andrews 1989) </ref> introduces a restricted remapping in the context of the DASH message-based operating system for continuous media, in which only a special memory region can be remapped and only between the same virtual addresses in sender and receiver address spaces.
Reference: <author> Angebranndt, S., R. L. Hyde, D. H. Luong, N. Siravara, and C. </author> <month> Schmandt </month> <year> (1991, </year> <month> June). </month> <title> Integrating audio and telephony in a distributed workstation environment. </title> <booktitle> In Proc. of Usenix Summer Conference, </booktitle> <address> Nashville, Tennessee, </address> <pages> pp. 419-435. </pages>
Reference-contexts: The server integrates output requests onto a single physical device either by alternating between them according to some priority order or by mixing them in some user-determined weighting. The Alib client-server library <ref> (Angebranndt, Hyde, Lu-ong, Siravara, and Schmandt 1991) </ref> allows components to be tied together by logical "wires". Such components include telephones, audio input and output devices, speech synthesizers and recognizers, recorders, and playback devices.
Reference: <author> Aras, C~ . a. M., J. F. Kurose, D. S. Reeves, and H. </author> <month> Schulzrinne </month> <year> (1994, </year> <title> Jan-uary). </title> <booktitle> Real-time communications in packet-switched networks. Proceedings of the IEEE 82 (1), </booktitle> <pages> 122-139. </pages>
Reference-contexts: Traditional (hard) real-time events occur periodically; if an event is not processed or not processed by its deadline, this is considered a catastrophic failure <ref> (Aras, Kurose, Reeves, and Schulzrinne 1994) </ref>, e.g., a chemical plant explodes. Interactive audio and video typically also arrive periodically from input devices and roughly so from the network, but with far less stringent reliability constraints.
Reference: <author> Arons, B., C. Binding, K. Lantz, and C. </author> <title> Schmandt (1989, April). The VOX audio server. </title> <booktitle> In Multimedia '89: 2nd IEEE COMSOC International Multimedia Communications Workshop, </booktitle> <address> Ottawa, Ontario. </address> <month> AT&T </month> <year> (1987). </year> <title> Streams Programmers Guide and Streams Primer. </title> <address> Engle-wood Cliffs, New Jersey: </address> <publisher> Prentice Hall. </publisher>
Reference-contexts: Audio control functionality like talker indication or on-screen volume unit (VU) display cannot be readily supported. While this architecture imposes some mild control timing constraints on the operating system, it is not likely to require fundamental changes. The Etherphone (Terry and Swinehart 1988), VOX <ref> (Arons, Binding, Lantz, and Schmandt 1989) </ref>, DVI (Ripley 1989) and IMAL (Ludwig and Dunn 1987) systems are examples of the separation of control and data for audio. Instead of analog mixing, the Pandora system (Hopper 1990) integrates video in digital form.
Reference: <author> Audsley, N. and A. </author> <title> Burns (1990). Real-time system scheduling. </title> <type> Technical Report YCS 134, </type> <institution> University of York. </institution> <type> First year report, ESPRIT BRA Project (3092). </type>
Reference-contexts: A schedulability test is presented in (Audsley, Burns, Richardson, and Wellings 1991), while a general survey of scheduling algorithms is presented by Audsley and Burns <ref> (Audsley and Burns 1990) </ref>. 1.5 Priority inversion Simple priority inversion occurs if a high-priority process has to wait for a resource held by a low-priority process.
Reference: <author> Audsley, N. C., A. Burns, M. F. Richardson, and A. J. Wellings (1991, </author> <month> May). </month> <title> Hard real-time scheduling: The deadline monotonic approach. </title> <booktitle> In Proceedings 8th IEEE Workshop on Real-Time Operating Systems and Software, Atlanta, Georgia, </booktitle> <pages> pp. 127-132. </pages> <publisher> IEEE. </publisher>
Reference-contexts: To allocate CPU cycles to interactive continuous media processes, results from the scheduling of hard real-time processes can be used. (A hard real-time system suffers catastrophic failure if a process is not completed before the assigned deadline. Examples include air-traffic control, process control, and embedded systems <ref> (Audsley, Burns, Richard-son, and Wellings 1991) </ref>.) A simple, static priority policy that is widely used in such systems is the rate-monotonic scheduler (Liu and Layland 1973). <p> These deadlines do not have to be equal to the period. Both are optimal static priority policies in that if any static priority policy can schedule a set of processes, the rate and deadline-monotonic ones can as well. A schedulability test is presented in <ref> (Audsley, Burns, Richardson, and Wellings 1991) </ref>, while a general survey of scheduling algorithms is presented by Audsley and Burns (Audsley and Burns 1990). 1.5 Priority inversion Simple priority inversion occurs if a high-priority process has to wait for a resource held by a low-priority process.
Reference: <author> Bach, M. J. </author> <year> (1986). </year> <title> The Design of the Unix Operating System. </title> <address> Englewood Cliffs, New Jersey: </address> <publisher> Prentice-Hall. </publisher>
Reference-contexts: The reasons for these variations are found in the properties of kernels and process schedulers. Both System-V <ref> (Bach 1986) </ref> and Berkeley software distribution (BSD)- derived schedulers (Leffler, McKusick, Karels, and Quar-terman 1988, p. 86) use a multilevel feedback queue, where processes are served in round robin fashion within a priority level, but moved from one level to another based on CPU time accumulated and a preference for I/O-intensive
Reference: <author> Bulterman, D. C. A. </author> <year> (1992, </year> <month> November). </month> <title> Synchronization of multi-sourced multimedia data for heterogeneous target systems. </title> <booktitle> In Third International Workshop on network and operating system support for digital audio and video, </booktitle> <address> San Diego, California, </address> <pages> pp. 110-120. </pages> <publisher> IEEE Communications Society. </publisher>
Reference: <author> Center, C. C. </author> <year> (1993, </year> <month> October). </month> <note> Cert advisory ca-93:15: /usr/lib/sendmail, /bin/tar, and /dev/audio vulnerabilities. </note>
Reference: <author> Chinn, H. A., D. K. Gannett, and R. M. Morris (1940, </author> <month> January). </month> <title> A new standard volume indicator and reference level. </title> <journal> Bell System Technical Journal 19 (1), </journal> <pages> 94-137. </pages>
Reference-contexts: System sounds and other background sounds (Gaver 1991) are difficult to implement this way. An audio API (or engine) should allow serveral applications to share the single speaker by either mixing at various volumes or priority pre-emption. External applications like VU meters <ref> (Chinn, Gannett, and Morris 1940) </ref>, recorders, or automatic gain control should be attachable to the audio input and output, without having to be replicated for every application. The audio engine should transparently translate encoding, sampling rates, and channel counts to the desired output format.
Reference: <author> Clark, D., V. Jacobson, J. Romkey, and M. </author> <month> Salwen </month> <year> (1989, </year> <month> June). </month> <title> An analysis of TCP processing overhead. </title> <journal> IEEE Communications Magazine 27 (6), </journal> <pages> 23-29. </pages>
Reference-contexts: Solutions include the elimination of copying between network adapter <ref> (Clark, Jacobson, Romkey, and Salwen 1989) </ref> and operating system buffers, or kernel and user space, or combining copying and checksumming (Wolman, Voelker, and Thekkath 1994).
Reference: <author> Cruz, R. L. </author> <year> (1991a, </year> <month> January). </month> <title> A calculus for network delay, part I: Network elements in isolation. </title> <journal> IEEE Transactions on Information Theory 37 (1), </journal> <pages> 114-131. </pages>
Reference: <author> Cruz, R. L. </author> <year> (1991b, </year> <month> January). </month> <title> A calculus for network delay, part II: Network analysis. </title> <journal> IEEE Transactions on Information Theory 37 (1), </journal> <pages> 132-141. </pages>
Reference: <author> Delgrossi, L., R. G. Herrtwich, and F. O. Hoffmann (19943, </author> <month> June). </month> <title> An implementation of ST-II for the Heidelberg transport system. </title> <booktitle> Internet-working: Research and Experience 5 (2), </booktitle> <pages> 43-69. </pages>
Reference: <author> Dey, J. K., J. F. Kurose, D. Towsley, and M. </author> <month> Girkar </month> <year> (1993, </year> <month> May). </month> <title> Efficient on-line processor scheduling for a class of IRIS (increasing reward with increasing service) real-time tasks. </title> <booktitle> In Proc. of ACM Sigmetrics Conference, </booktitle> <pages> pp. 217-228. </pages>
Reference: <author> Dey Sircar, J. K., J. F. Kurose, and D. Towsley (1994, </author> <month> June). </month> <title> On-line scheduling policies for a class of IRIS (increasing reward with increasing service) real-time tasks. </title> <note> Submitted to IEEE Transactions on Computers </note> ??(??), -. 
Reference: <author> Evans, S., K. Clarke, D. Singleton, and B. </author> <month> Smaalders </month> <year> (1993, </year> <month> June). </month> <title> Optimizing Unix resource scheduling for Unix interaction. </title> <booktitle> In Proc. of Usenix Summer Conference, </booktitle> <address> Cincinnati, </address> <publisher> Ohio, </publisher> <pages> pp. 205-218. </pages>
Reference-contexts: Either priority classes or deadline scheduling offer a tempting target for application writers to "improve" the performance of their application while penalizing other users or applications, leading, in the worst case, to an "arms race" between applications and defeating kernel scheduling altogether <ref> (Evans, Clarke, Singleton, and Smaalders 1993) </ref>. <p> However, with increasing availability on workstations, demands on memory have grown from caches for disks and network information retrieval systems, to temporary file systems, to speed up compilations <ref> (Evans, Clarke, Singleton, and Smaalders 1993) </ref>. Instead of the relatively small number of active processes when user interaction was through terminals, each user now typically has sets of mostly inactive applications. Typical per-user process counts are probably fairly close to a busy time sharing system of some years ago. <p> Memory access is typically not tied to scheduling priority so that a low-priority batch job can easily interfere with a high-priority continuous media task. Simple tools like a process telling linker to colocate certain memory segments could lead to decreased working sets <ref> (Evans, Clarke, Singleton, and Smaalders 1993) </ref>, but are generally not supported. 8 Henning Schulzrinne 3 Performance enhancements In this section, we investigate approaches to streamline processing for high data rate, low-latency applications.
Reference: <author> Frederick, R. </author> <year> (1994, </year> <month> September). </month> <title> Experiences with real-time software video compression. </title> <booktitle> In Sixth International Workshop on Packet Video, </booktitle> <address> Port-land, Oregon. </address>
Reference: <author> Fulton, J. and G. </author> <month> Renda </month> <year> (1994). </year> <title> The network audio system. In X Technical Conference. X Consortium, Cambridge, Massachusetts. also in X Resource: A Practical Journal of the X Window System, </title> <journal> O'Reilly, </journal> <volume> Issue 9, </volume> <pages> pp. 181-194. </pages> <note> 12 Henning Schulzrinne Gaver, </note> <author> W. W. </author> <year> (1991, </year> <month> September). </month> <title> Sound support for collaboration. </title> <editor> In L. Bannon, M. Robinson, and K. Schmidt (Eds.), </editor> <booktitle> Proceedings of the Second European Conference on Computer-Supported Cooperative Work (ECSCW'91), </booktitle> <address> Amsterdam, The Netherlands, </address> <pages> pp. 293-308. </pages> <month> Ams-terdam. </month>
Reference-contexts: Some attempts have been made at cross-platform APIs with enhanced functionality (Neville-Neil 1992), but these appear to have a number of shortcomings. Most audio APIs seem to be designed mainly for playing back and recording audio clips rather than for real-time use. Netaudio <ref> (Fulton and Renda 1994) </ref> and AudioFile (Levergood, Payne, Gettys, Treese, and Stewart 1993; Levergood, Payne, James, Treese, and Stewart 1993) also abandon the UNIX device-as-file model, requiring separate hooks into event handlers, separate read/write routines, and so on.
Reference: <author> Govindan, R. </author> <year> (1992, </year> <month> July). </month> <title> Operating systems mechanisms for continuous media. </title> <type> Technical Report UCB/CSD 92/697, </type> <institution> University of California, Berkeley. </institution>
Reference: <author> Govindan, R. and D. P. Anderson (1991, </author> <month> March). </month> <title> Scheduling and IPC mechanisms for continuous media. </title> <type> Technical Report CSD-91-622, </type> <institution> University of California at Berkeley, Berkeley, California. </institution>
Reference-contexts: Fig. 3. Example of workahead function (Anderson, Tzou, Wahbe, Govindan, and Andrews 1989) Any of the scheduling algorithms discussed in this section apply to both processes and threads. (Threads are schedulable entities without their own address space.) Indeed, Govindan and Anderson argue, in their split-level scheduling proposal <ref> (Govindan and Anderson 1991) </ref>, that both real-time threads and processes should be supported. Scheduling within threads, if implemented at the user level rather than in the kernel, has the advantage of avoiding some of the frequent context switches and user-kernel interactions. <p> A related approach presented in Operating system issues for continuous media 9 <ref> (Govindan and Anderson 1991) </ref> emphasizes shared memory for synchronizing data transfer between the user and the kernel space rather than (necessarily) for the actual data transfer. 4 Network interface and protocol processing High-rate continuous media pose some of the same performance problems as volume data applications.
Reference: <author> Hagsand, O. and P. </author> <month> Sjdin </month> <year> (1994, </year> <month> January). </month> <title> Workstation support for real-time multimedia communication. </title> <booktitle> In Proc. of Usenix Winter Conference, </booktitle> <address> San Francisco, California, </address> <pages> pp. 133-142. </pages> <publisher> Usenix. </publisher>
Reference-contexts: This change reduced dispatch latencies from 100 ms to about 2 ms on a standard workstation. Another approach to reducing maximum kernel residence time is by introducing pre-emption points <ref> (Hagsand and Sjdin 1994) </ref>, where system routines such as fork, execution, or exit check whether any high-priority user processes are ready to run. <p> Liu and Layland showed that, for periodic tasks, n X C i 1 is sufficient for schedulability. EDF scheduling within the UNIX operating system has been implemented by Hagsand and Sjodin <ref> (Hagsand and Sjdin 1994) </ref>, for Mach by Tokuda et al.(Tokuda, Nakajima, and Rao 1990) and Nakajima et al.(Nakajima, Yazaki, and Matsumoto 1991). <p> In a micro kernel environment, particular care must be taken to ensure that all user-level server threads invoked by the kernel thread are "charged" to the invoking thread. In <ref> (Hagsand and Sjdin 1994) </ref>, a process starts towards its deadline if one of the designed file descriptors becomes ready, triggered, for example, by the arrival of a video frame from a framegrabber or the network interface. <p> Some such interrupt handling (e.g., for background network traffic) is typically of lower priority than real-time processes and, given sufficient background load, it may pay to defer them <ref> (Hagsand and Sjdin 1994) </ref>. However, deciding whether, for example, a packet belongs to a network association deserving high-priority treatment may not be trivial at hard interrupt time and could outweigh any gains.
Reference: <author> Hanko, J. G., E. M. Kuerner, J. D. Northcutt, and G. A. </author> <title> Wall (1991, Novem-ber). Workstation support for time-critical applications. </title> <booktitle> In Proc. 2nd International Workshop on Network and Operating System Support for Digital Audio and Video (NOSSDAV), </booktitle> <address> Heidelberg, Germany, </address> <pages> pp. 4-9. </pages> <booktitle> Springer. Lecture Notes in Computer Science 614. </booktitle>
Reference-contexts: A slightly different adaptation algorithm works on a longer time scale. Instead of rejecting new real-time tasks, the system detects overload and then renegotiates resource requirements with these tasks <ref> (Hanko, Kuerner, Northcutt, and Wall 1991) </ref>. A real-time thread package for Mach (Tokuda and Kitayama 1993) supports both periodic and aperiodic execution with deadline bounds. It uses timing-fault notification for threads serving adaptive applications to self-stabilize. A timing-fault occurs if a thread misses its deadline.
Reference: <author> Hayter, M. and D. </author> <month> McAuley </month> <year> (1991, </year> <month> May). </month> <title> The desk area network. </title> <booktitle> ACM Operating Systems Review 25 (4), </booktitle> <pages> 14-21. </pages>
Reference: <author> Herrtwich, R. G. </author> <year> (1994, </year> <month> July). </month> <title> The role of performance, scheduling, and resource reservation in multimedia systems. </title> <editor> In A. Karshmer and J. Nehmer (Eds.), </editor> <booktitle> Operating Systems of the 90s and Beyond, </booktitle> <address> Dagstuhl Castle, Wadern, Germany, </address> <pages> pp. 279-284. </pages> <booktitle> Springer Lecture Notes in Computer Science 563. </booktitle>
Reference-contexts: Attempts at estimation based on prior execution have been made, e.g., by Jones (Jones 1993). However, as pointed out in <ref> (Herrtwich 1994) </ref>, upper or pessimistic bounds may lead to poor resource utilization and unnecessary denials of service. However, incomplete resource utilization by continuous media processes may also provide the necessary head room to non-real-time applications, so that a larger fraction of the system capacity can be reserved for real-time tasks.
Reference: <author> Hopper, A. </author> <year> (1990, </year> <month> April). </month> <title> Pandora an experimental system for multimedia applications. </title> <booktitle> ACM Operating Systems Review 24 (2), </booktitle> <pages> 19-34. </pages> <note> also as Olivetti Technical Report. </note>
Reference-contexts: The Etherphone (Terry and Swinehart 1988), VOX (Arons, Binding, Lantz, and Schmandt 1989), DVI (Ripley 1989) and IMAL (Ludwig and Dunn 1987) systems are examples of the separation of control and data for audio. Instead of analog mixing, the Pandora system <ref> (Hopper 1990) </ref> integrates video in digital form. This is done through a separate video processor and a pixel switch that decides for each pixel whether to display the workstation graphics stream or the external live video source.
Reference: <author> Huang, H.-C., J.-H. Huang, and J.-L. Wu (1993, </author> <month> August). </month> <title> Real-time software-based video coder for multimedia communication systems. </title> <booktitle> In Proceedings of ACM Multimedia '93, </booktitle> <address> Anaheim, California, </address> <pages> pp. 65-73. </pages>
Reference: <author> Jeffay, K. </author> <year> (1992, </year> <month> April). </month> <title> On kernel support for real-time multimedia applications. </title> <booktitle> In Proceedings Third IEEE Workshop on Workstation Operating Systems, </booktitle> <address> Key Biscayne, Florida, </address> <pages> pp. 39-46. </pages>
Reference: <author> Jeffay, K., D. Stone, and D. </author> <title> Poirier (1992). Yartos: kernel support for efficient, predictable real-time systems. </title> <editor> In W. A. Halang and K. Ramam-ritham (Eds.), </editor> <booktitle> Real-Time Programming, </booktitle> <pages> pp. 7-12. </pages> <publisher> Pergamon Press. </publisher>
Reference: <author> Jones, M. B. </author> <year> (1993, </year> <month> November). </month> <title> Adaptive real-time resource management supporting modular composition of digital multimedia services. </title> <booktitle> In Proceedings of the 4th International Workshop on Network and Operating System Support for Digital Audio and Video, Lancaster, U.K., </booktitle> <pages> pp. 21-28. </pages> <institution> Lancaster University. </institution> <note> Lecture Notes in Computer Science 846. </note>
Reference-contexts: Attempts at estimation based on prior execution have been made, e.g., by Jones <ref> (Jones 1993) </ref>. However, as pointed out in (Herrtwich 1994), upper or pessimistic bounds may lead to poor resource utilization and unnecessary denials of service.
Reference: <author> Khanna, S., M. Sebree, and J. </author> <month> Zolnowsky </month> <year> (1992). </year> <title> Realtime scheduling in SunOS 5.0. </title> <booktitle> In Proc. of Usenix Winter Conference, </booktitle> <pages> pp. 375-390. </pages>
Reference-contexts: One problem noted in the preceding section was the unbound kernel-residence time. Newer versions of UNIX SVR4 <ref> (Khanna, Sebree, and Zolnowsky 1992) </ref> and the Mach operating system implement a thread-based, fully-pre-emptible kernel, so that low-priority processes executing kernel code cannot prevent higher-priority processes from running. This change reduced dispatch latencies from 100 ms to about 2 ms on a standard workstation. <p> The basic priority-inheritance protocol attempts to bound the duration of priority inversion during resource blocking by having the high-priority thread propagate its priority to all lower-priority threads that block it <ref> (Khanna, Sebree, and Zol-nowsky 1992) </ref>. 1.6 Deadline-Based Scheduling If several concurrent continuous media streams are to be handled by the operating system, higher priorities need to be assigned to processes with closer deadlines.
Reference: <author> Leffler, S. J., M. K. McKusick, M. J. Karels, and J. S. </author> <title> Quarterman (1988). The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <address> Reading, Massachusetts: </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: The reasons for these variations are found in the properties of kernels and process schedulers. Both System-V (Bach 1986) and Berkeley software distribution (BSD)- derived schedulers <ref> (Leffler, McKusick, Karels, and Quar-terman 1988, p. 86) </ref> use a multilevel feedback queue, where processes are served in round robin fashion within a priority level, but moved from one level to another based on CPU time accumulated and a preference for I/O-intensive processes.
Reference: <author> Lehoczky, J., L. Sha, and Y. Ding (1989, </author> <month> December). </month> <title> The rate monotonic scheduling algorithm: Exact characterization and average case behavior. </title> <booktitle> In IEEE Real-Time Systems Symposium, </booktitle> <address> Santa Monica, California, </address> <pages> pp. 166-171. </pages> <publisher> IEEE. </publisher>
Reference: <author> Leslie, I. M., D. R. McAuley, and S. J. </author> <month> Mullender </month> <year> (1993, </year> <month> January). </month> <title> Pegasus | operating system support for distributed multimedia systems. </title> <booktitle> ACM Operating Systems Review 27 (1), </booktitle> <pages> 69-78. </pages>
Reference: <author> Leslie, I. M., D. R. McAuley, and D. L. </author> <title> Tennenhouse (1993, March). ATM everywhere? IEEE Network 7 (2), </title> <type> 40-46. </type>
Reference: <author> Leung, J. Y.-T. and J. </author> <title> Whitehead (1982). On the complexity of fixed-priority scheduling of periodic, real-time tasks. </title> <booktitle> Performance Evaluation 2, </booktitle> <pages> 237-250. </pages>
Reference-contexts: If anything, the delay bound of a single period is probably excessive, as audio and video can typically tolerate delay jitter higher than that if the output device provides sufficient buffering. A generalization of the rate-monotonic policy to is the deadline- monotonic <ref> (Leung and Whitehead 1982) </ref> scheduler, with priorities assigned according to process deadlines. These deadlines do not have to be equal to the period. Both are optimal static priority policies in that if any static priority policy can schedule a set of processes, the rate and deadline-monotonic ones can as well.
Reference: <author> Levergood, T. M., A. C. Payne, J. Gettys, W. G. Treese, and L. C. Stewart (1993, </author> <month> June). </month> <title> Audiofile: a network-transparent system for distributed audio applications. </title> <booktitle> In Proc. of Usenix Summer Conference, </booktitle> <address> Cincinnati, </address> <publisher> Ohio, </publisher> <pages> pp. 219-236. </pages>
Reference: <author> Levergood, T. M., A. C. Payne, G. James, G. W. Treese, and L. C. Stewart (1993, </author> <month> June). </month> <title> AudioFile: A network-transparent system for distributed audio applications. </title> <type> Technical Report 93/8, </type> <institution> Digital Equipment Corporation, Cambridge Research Lab, Cambridge, Massachusetts. </institution>
Reference: <author> Lin, K.-J., S. Natarajan, and J. W.-S. Liu (1987, </author> <month> December). </month> <title> Imprecise results: utilizing partial computations in real-time systems. </title> <booktitle> In Proc. of the Eighth IEEE Real-Time Systems Symposium, </booktitle> <address> San Jose, California, </address> <pages> pp. 210-217. </pages>
Reference-contexts: As an example, consider a video encoder in which the motion estimation search can be more or less exhaustive. If a process runs out of time, it can terminate before completion with a useful, but less precise result <ref> (Lin, Natarajan, and Liu 1987) </ref>. The system could signal to the process that "times's up", causing it to terminate that round of processing and avoiding missing its own deadline or endangering that of another message.
Reference: <author> Lindblad, C. J., D. J. Wetherall, W. F. Stasior, J. F. Adam, H. H. Houh, M. Ismert, D. R. Bacher, B. M. Philips, and D. L. </author> <month> Tennenhouse </month> <year> (1994, </year> <month> June). </month> <title> Distributed video applications a software oriented approach. </title> <booktitle> In Gigabit Networking Workshop (GBN), </booktitle> <address> Toronto, Canada. </address> <publisher> IEEE. </publisher>
Reference-contexts: With evolving standards in the area of network protocols and media compression, software-intensive approaches offer far more flexibility. The type of advanced media functionality described in <ref> (Lindblad, Wetherall, Stasior, Adam, Houh, Ismert, Bacher, Philips, and Tennenhouse 1994) </ref> is likely difficult to achieve when continuous media bypass the operating system and the CPU. There are other advantages as well, in particular, scalable performance.
Reference: <author> Little, T. D. C., A. Ghafoor, C. Y. R. Chen, C. S. Chang, and P. B. </author> <month> Berra </month> <year> (1991, </year> <month> September). </month> <title> Multimedia synchronization. </title> <journal> The Quarterly Bulletin of the IEEE Computer Society Technical Committe on Data Engineering 14 (3), </journal> <pages> 26-35. </pages>
Reference: <author> Liu, C. L. and J. W. </author> <month> Layland </month> <year> (1973, </year> <month> January). </month> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> Journal of the ACM 20 (1), </journal> <pages> 46-61. </pages>
Reference-contexts: Examples include air-traffic control, process control, and embedded systems (Audsley, Burns, Richard-son, and Wellings 1991).) A simple, static priority policy that is widely used in such systems is the rate-monotonic scheduler <ref> (Liu and Layland 1973) </ref>. The policy is pre-emptive and assigns scheduling priorities according to the rate of arrival for a particular kind of process, with higher priorities for more frequent processes. <p> To avoid this difficulty and the problem of having to assign priorities manually, we can schedule processes with the earliest deadline first (EDF) <ref> (Liu and Layland 1973) </ref>. EDF scheduling does not require processes to be periodic; it also has nice optimality properties in that it yields a schedule that avoids missed deadlines if at all possible.
Reference: <author> Ludwig, L. F. and D. F. </author> <title> Dunn (1987, August). Laboratory for the emulation and study of integrated and coordinated media communication. </title> <booktitle> In SIGCOMM Symposium on Communications Architectures and Protocols, </booktitle> <address> Stowe, Vermont, </address> <pages> pp. 283-291. </pages> <publisher> ACM. </publisher>
Reference-contexts: While this architecture imposes some mild control timing constraints on the operating system, it is not likely to require fundamental changes. The Etherphone (Terry and Swinehart 1988), VOX (Arons, Binding, Lantz, and Schmandt 1989), DVI (Ripley 1989) and IMAL <ref> (Ludwig and Dunn 1987) </ref> systems are examples of the separation of control and data for audio. Instead of analog mixing, the Pandora system (Hopper 1990) integrates video in digital form.
Reference: <author> McAuley, D. R. </author> <year> (1993, </year> <month> November). </month> <title> Operating system support for the Desk Area Network. </title> <booktitle> In Proceedings of the 4th International Workshop on Network and Operating System Support for Digital Audio and Video, Lancaster, U.K., </booktitle> <pages> pp. 13-20. </pages> <institution> Lancaster University: Springer Ver-lag. </institution> <note> Lecture Notes in Computer Science 846. </note>
Reference: <author> McCanne, S. and V. Jacobson (1993, </author> <month> January). </month> <title> A BSD packet filter: A new architecture for user-level packet capture. </title> <booktitle> In Proc. of Usenix Winter Conference, </booktitle> <address> San Diego, California, </address> <pages> pp. 259-269. </pages> <publisher> Usenix. </publisher>
Reference-contexts: As noted, UNIX process scheduling decreases the process priority with accumulated CPU usage. However, for periodic processes, sampling aliasing can dramatically skew the estimate so that each video or audio frame is charged the full CPU tick or nothing at all <ref> (McCanne and Torek 1993) </ref>, leading to periodic oscillations in process priority as application intervals and measurement intervals drift with respect to one another. Random sampling intervals solve this particular problem. <p> One approach for System-V-derived kernels may be the use of modules pushed onto the streams-processing stack (AT&T 1987), either as pseudo-code or as compiled modules. However, like upcalls from kernel to user space, they pose protection problems and may contravene attempts to limit kernel-residence times. The Berkeley packet filter <ref> (McCanne and Jacobson 1993) </ref> provides one example (in the somewhat different domain of selecting and processing network packets for debugging) of how to construct a simple, restricted, interpreted language that is downloaded into the kernel and then executed for every arriving packet.
Reference: <author> McCanne, S. and C. </author> <month> Torek </month> <year> (1993, </year> <month> January). </month> <title> A randomized sampling clock for CPU utilization estimation and code profiling. </title> <booktitle> In Proc. of Usenix Winter Conference, </booktitle> <address> San Diego, California, </address> <pages> pp. 387-394. </pages>
Reference-contexts: As noted, UNIX process scheduling decreases the process priority with accumulated CPU usage. However, for periodic processes, sampling aliasing can dramatically skew the estimate so that each video or audio frame is charged the full CPU tick or nothing at all <ref> (McCanne and Torek 1993) </ref>, leading to periodic oscillations in process priority as application intervals and measurement intervals drift with respect to one another. Random sampling intervals solve this particular problem. <p> One approach for System-V-derived kernels may be the use of modules pushed onto the streams-processing stack (AT&T 1987), either as pseudo-code or as compiled modules. However, like upcalls from kernel to user space, they pose protection problems and may contravene attempts to limit kernel-residence times. The Berkeley packet filter <ref> (McCanne and Jacobson 1993) </ref> provides one example (in the somewhat different domain of selecting and processing network packets for debugging) of how to construct a simple, restricted, interpreted language that is downloaded into the kernel and then executed for every arriving packet.
Reference: <author> Mercer, C. W., S. Savage, and H. Tokuda (1993, </author> <month> October). </month> <title> Processor capacity reserves: An abstraction for managing processing usage. </title> <booktitle> In 4th Workshop on Workstation Operating Systems (WWOS-IV), </booktitle> <address> Napa, California, </address> <pages> pp. 129-134. </pages> <publisher> IEEE Computer Society. </publisher>
Reference: <author> Mercer, C. W., S. Savage, and H. Tokuda (1994, </author> <month> May). </month> <title> Processor capacity reserves: Operating system support for multimedia applications. </title> <booktitle> In Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <address> Boston, Massachusetts, </address> <pages> pp. 90-99. </pages> <note> (This is a condensed version of tech report CMU-CS-93-157.). </note>
Reference: <author> Milazzo, P. G. </author> <year> (1991, </year> <month> June). </month> <title> Shared video under Unix. </title> <booktitle> In Proc. of Usenix Summer Conference, </booktitle> <address> Nashville, Tennessee, </address> <pages> pp. 369-383. </pages>
Reference: <author> Mills, D. L. </author> <year> (1991, </year> <month> October). </month> <title> Internet time synchronization: the network time protocol. </title> <journal> IEEE Transactions on Communications 39 (10), </journal> <pages> 1482-1493. </pages>
Reference-contexts: Synchronization between media streams has been the topic of a large body of research (Ramanathan and Rangan 1993a; Ramanathan and Rangan 1993b; Bulterman 1992; Little, Ghafoor, Chen, Chang, and Berra 1991). It appears, however, that once synchronized clocks are available with clock differences of a few milliseconds <ref> (Mills 1991) </ref>, the problem is largely solved. Explicit synchronization algorithms appear to provide special case, multi party clock synchronization.
Reference: <author> Nakajima, J., M. Yazaki, and H. Matsumoto (1991, </author> <month> June). </month> <title> Multimedia/realtime extensions for the Mach operating system. </title> <booktitle> In Proc. of Usenix Summer Conference, </booktitle> <address> Nashville, Tennessee, </address> <pages> pp. 183-198. </pages>
Reference: <author> Neville-Neil, G. V. </author> <year> (1992). </year> <title> Current efforts in client/server audio. X Resource 8, </title> <type> 69-86. </type>
Reference: <author> Nieh, J., J. G. Hanko, J. D. Northcutt, and G. A. </author> <title> Wall (1993, November). SVR4 UNIX scheduler unacceptable for multimedia applications. </title> <booktitle> In Proceedings of the 4th International Workshop on Network and Operating System Support for Digital Audio and Video, Lancaster, U.K., </booktitle> <pages> pp. 41-53. </pages> <institution> Lancaster University. </institution> <note> Lecture Notes in Computer Science 846. </note>
Reference-contexts: Since the priority of the real-time class must be higher than that for system processes like the swap-per in order to guarantee delay bounds, use of this class can obviously have dire consequences for system behavior. (Not surprisingly, use of this class requires superuser privileges.) This is documented in <ref> (Nieh, Hanko, Northcutt, and Wall 1993) </ref> through the example of a video display process that can cause the whole system to become unresponsive. However, the example chosen in (Nieh, Hanko, Northcutt, and Wall 1993) is clearly inappropriate for the real-time class as it is a CPU-bound process that will dominate the <p> class can obviously have dire consequences for system behavior. (Not surprisingly, use of this class requires superuser privileges.) This is documented in <ref> (Nieh, Hanko, Northcutt, and Wall 1993) </ref> through the example of a video display process that can cause the whole system to become unresponsive. However, the example chosen in (Nieh, Hanko, Northcutt, and Wall 1993) is clearly inappropriate for the real-time class as it is a CPU-bound process that will dominate the CPU if given a chance.
Reference: <author> Ousterhout, J. K. </author> <year> (1990, </year> <month> June). </month> <title> Why aren't operating systems getting faster as fast as hardware? In Proc. </title> <booktitle> of Usenix Summer Conference, </booktitle> <address> Anaheim, California, </address> <pages> pp. </pages> <month> 247-256. </month> <title> Code archived at ftp://sprite.cs.berkeley.edu/bench.tar.Z. Parallax Graphics (1987). The Parallax 1280 series videographic processor. </title> <type> Technical report, </type> <institution> Parallax Graphics. </institution>
Reference-contexts: While networks and file servers rarely carry uncompressed video, operating systems may have to handle these if decompression is done in software. Unfortunately, as observed by Ousterhout <ref> (Ousterhout 1990) </ref>, both memory bandwidth and operating system functions such as context switches or interrupt handling have not improved at the same rate as CPU instruction cycles per second.
Reference: <author> Partridge, C. and S. </author> <month> Pink </month> <year> (1993, </year> <month> August). </month> <title> A faster UDP. </title> <journal> IEEE/ACM Transactions on Networking 1 (4), </journal> <pages> 429-440. </pages>
Reference-contexts: for an individual network association. (Turning off UDP checksums in general can lead to corrupted data in the network file system.) For the small packets typically found for low-bit-rate voice, processing costs are more evenly distributed among copies, checksum, protocol processing, operating system-priority management, the network-interface driver and interrupt handling <ref> (Partridge and Pink 1993) </ref>. For low-latency voice, packets arrive at a frequency of at least 50 packets / s. Thus, efficient interrupt handling and process scheduling is particularly important (see also Sect. 3.2).
Reference: <author> Pasieka, M., P. Crumley, A. Marks, and A. </author> <month> Infortuna </month> <year> (1991, </year> <month> June). </month> <title> Distributed multimedia: how can the necessary data rates be supported? In Proc. </title> <booktitle> of Usenix Summer Conference, </booktitle> <address> Nashville, Tennessee, </address> <pages> pp. 169-182. </pages>
Reference-contexts: In a standard UNIX kernel with DMA-capable devices, the data is copied three or four times: via DMA to a device-driver managed buffer in RAM, then by the CPU to internal data structures like mbufs, back into the output device's DMA buffer, and finally via DMA into the output device <ref> (Pasieka, Crumley, Marks, and Infortuna 1991) </ref>. If no further processing is required, direct driver-to-driver data transfers could off-load the CPU, although the competition for bus cycles may still reduce system performance unless the peripherals can use a dedicated I/O bus as in the microchannel architecture.
Reference: <author> Patel, K., B. C. Smith, and L. A. </author> <title> Rowe (1993, August). Performance of a software MPEG video decoder. In Proceedings of ACM Multimedia 93, Anaheim, California. ACM. Operating system issues for continuous media 13 Pearl, </title> <editor> A. </editor> <year> (1992, </year> <month> December). </month> <title> System support for integrated desktop video conferencing. </title> <type> Technical Report TR-92-4, </type> <institution> Sun Microsystems Laboratories, Mountain View, California. </institution>
Reference-contexts: This memory bottleneck was observed, for example, for a software MPEG decoder <ref> (Patel, Smith, and Rowe 1993) </ref>, where memory bandwidth, not the processing for the inverse cosine transform, limited the achievable frame rate. Disk access speeds have not improved dramatically either.
Reference: <author> Peterson, J. L. and A. </author> <title> Silberschatz (1983). </title> <booktitle> Operating System Principles. </booktitle> <address> Reading, Massachusetts: </address> <publisher> Addison-Wesley. </publisher>
Reference: <author> Rajkumar, R., L. Sha, and J. P. </author> <month> Lehoczky </month> <year> (1988, </year> <month> December). </month> <title> Real-time synchronization protocols for multiprocessors. </title> <booktitle> In Proceedings of the IEEE Real-Time Systems Symposium, </booktitle> <address> Huntsville, Alabama. </address> <publisher> IEEE. </publisher>
Reference-contexts: Unbounded priority inversion occurs if this low-priority process, while holding the resource, is preempted by a medium-priority process, delaying release of the resource and blocking the high-priority process for an indeterminate time <ref> (Rajkumar, Sha, and Lehoczky 1988) </ref>. There are a number of remedies (Sha, Rajkumar, and Lehoczky 1990), the simplest of which is the basic priority-inheritance protocol.
Reference: <author> Ramakrishnan, K., L. Vaitzblit, C. Gray, U. Vahalia, D. Ting, P. Tzelnic, S. Glaser, and W. </author> <month> Duso </month> <year> (1993, </year> <month> November). </month> <title> Opertaing system support for a video-on-demand file service. </title> <booktitle> In Proceedings of the 4th International Workshop on Network and Operating System Support for Digital Audio and Video, Lancaster, U.K., </booktitle> <pages> pp. 216-227. </pages> <institution> Lancaster University. </institution> <note> Lecture Notes in Computer Science 846. </note>
Reference: <author> Ramanathan, S. and P. V. </author> <title> Rangan (1993a, February). Feedback techniques for intra-media continuity and inter-media synchronization in distributed multimedia systems. </title> <journal> Computer Journal 36 (1), </journal> <pages> 19-31. </pages>
Reference: <author> Ramanathan, S. and V. P. </author> <title> Rangan (1993b, April). Adaptive feedback techniques for synchronized multimedia retrieval over integrated networks. </title> <journal> IEEE/ACM Transactions on Networking 1 (2), </journal> <pages> 246-260. </pages>
Reference: <author> Ramjee, R., J. Kurose, D. Towsley, and H. </author> <month> Schulzrinne </month> <year> (1994, </year> <month> June). </month> <title> Adaptive playout mechanisms for packetized audio applications in wide-area networks. </title> <booktitle> In Proceedings of the Conference on Computer Communications (IEEE Infocom), </booktitle> <address> Toronto, Canada, </address> <pages> pp. 680-688. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> California. </address>
Reference-contexts: Explicit synchronization algorithms appear to provide special case, multi party clock synchronization. Some further experimental work on playout synchronization in different networks is useful, although the need for sophisticated algorithms arises primarily in lower-speed packet networks like the Internet <ref> (Ramjee, Kurose, Towsley, and Schulzrinne 1994) </ref>. 3.2 Interrupt handling As mentioned in Sect. 1, some continuous media types may cause high system load, not due to their bandwidth, but rather to their high interrupt and context-switching frequency.
Reference: <author> Reddy, A. L. N. and J. </author> <title> Wyllie (1993, August). Disk scheduling in a multimedia I/O system. </title> <booktitle> In Proc. of ACM Multimedia, </booktitle> <address> Anaheim, California, </address> <pages> pp. 225-233. </pages>
Reference-contexts: The survey has ignored issues of storage scheduling <ref> (Reddy and Wyllie 1993) </ref> and management (Yu, Sun, Bitton, Yang, Bruno, and Yus 1989), as they are generally of less importance for end-user workstations. These issues dominate, however, for video-on-demand servers (Ramakr-ishnan, Vaitzblit, Gray, Vahalia, Ting, Tzelnic, Glaser, and Duso 1993).
Reference: <author> Rennison, E., R. Baker, D. D. Kim, and Y.-H. Lim (1992, Winter). MuX: </author> <title> an X co-existent time-based multimedia I/O server. The X Resource 1, </title> <type> 213-233. </type>
Reference: <author> Ripley, G. D. </author> <year> (1989, </year> <month> July). </month> <title> DVI a digital multimedia technology. </title> <booktitle> Communications ACM 32 (7), </booktitle> <pages> 811-822. </pages>
Reference-contexts: While this architecture imposes some mild control timing constraints on the operating system, it is not likely to require fundamental changes. The Etherphone (Terry and Swinehart 1988), VOX (Arons, Binding, Lantz, and Schmandt 1989), DVI <ref> (Ripley 1989) </ref> and IMAL (Ludwig and Dunn 1987) systems are examples of the separation of control and data for audio. Instead of analog mixing, the Pandora system (Hopper 1990) integrates video in digital form.
Reference: <author> Sanderson, T., S. Ho, N. Heijden, E. Jabs, and J. L. </author> <title> Green (1986). Near-realtime data transmission during the ICE comet Giacobini-Zinner encounter. </title> <type> ESA Bulletin 45 (21). </type>
Reference: <author> Schaufler, R. </author> <year> (1992, </year> <month> January). </month> <title> Realtime workstation performance for MIDI. </title> <booktitle> In Proc. of Usenix Winter Conference, </booktitle> <address> San Francisco, California, </address> <pages> pp. 139-151. </pages> <publisher> Usenix. </publisher>
Reference-contexts: Continuous media are characterized by a timing relationship between source and sink, that is, the sink must reproduce the timing relationship that existed at the source. The most common examples of continuous media include audio and motion video, but MIDI commands also belong in this category <ref> (Schaufler 1992) </ref>. Continuous media can be realtime (interactive), where there is a "tight" timing relationship between source and sink, or playback, where the relationship is less strict. For simplicity, we also include "recording", as for a tape recorder when, using the term "playback". <p> Examples include the decoding of video (Patel, Smith, and Rowe 1993; Sun Microsystems 1994a), both encoding and decoding of video (Frederick 1994; Turletti 1994; Huang, Huang, and Wu 1993), audio (Schulzrinne 1992), and the processing of MIDI data <ref> (Schaufler 1992) </ref>. At least as important as the necessary processing power is the integration of standard continuous media I/O devices on the motherboard, currently devices for high-quality audio, but, probably soon, video as well. <p> Because of the lack of separation of a kernel and user space, processing is often done within interrupt handlers, offering low latency, but clearly at the cost of higher, non predictable delays for other processes <ref> (Schaufler 1992) </ref>. One approach for System-V-derived kernels may be the use of modules pushed onto the streams-processing stack (AT&T 1987), either as pseudo-code or as compiled modules. However, like upcalls from kernel to user space, they pose protection problems and may contravene attempts to limit kernel-residence times.
Reference: <author> Schnorf, P. </author> <year> (1993, </year> <month> August). </month> <title> Integrating video into an application framework. </title> <booktitle> In Proc. of ACM Multimedia, </booktitle> <address> Anaheim, California, </address> <pages> pp. 411-417. </pages>
Reference-contexts: An operating system enhancement fulfilling these requirements makes it possible to add interactive and playback audio to applications quickly without having to reimplement relatively complicated media handling in every application. 5.2 Video There seem to be relatively few windowing system extensions that directly integrate motion video. Schnorf <ref> (Schnorf 1993) </ref> describes an extension of the ET++ windowing toolkit, in which motion video, generated by a hardware or software decoder, becomes a first class object, that can be clipped and moved like other windowing objects.
Reference: <author> Schulzrinne, H. </author> <year> (1992, </year> <month> July). </month> <title> Voice communication across the Internet: A network voice terminal. </title> <type> Technical Report TR 92-50, </type> <institution> Dept. of Computer Science, University of Massachusetts, Amherst, Massachusetts. </institution>
Reference-contexts: Examples include the decoding of video (Patel, Smith, and Rowe 1993; Sun Microsystems 1994a), both encoding and decoding of video (Frederick 1994; Turletti 1994; Huang, Huang, and Wu 1993), audio <ref> (Schulzrinne 1992) </ref>, and the processing of MIDI data (Schaufler 1992). At least as important as the necessary processing power is the integration of standard continuous media I/O devices on the motherboard, currently devices for high-quality audio, but, probably soon, video as well.
Reference: <author> Sha, L., R. Rajkumar, and J. P. </author> <month> Lehoczky </month> <year> (1990, </year> <month> September). </month> <title> Priority inheritance protocols: an approach to real-time synchronization. </title> <journal> IEEE Transactions on Computers 39 (9), </journal> <pages> 1175-1185. </pages>
Reference-contexts: Unbounded priority inversion occurs if this low-priority process, while holding the resource, is preempted by a medium-priority process, delaying release of the resource and blocking the high-priority process for an indeterminate time (Rajkumar, Sha, and Lehoczky 1988). There are a number of remedies <ref> (Sha, Rajkumar, and Lehoczky 1990) </ref>, the simplest of which is the basic priority-inheritance protocol.
Reference: <author> Sprunt, B., L. Sha, and J. P. </author> <month> Lehoczky </month> <year> (1989, </year> <month> June). </month> <title> Aperiodic task scheduling for hard real-time systems. </title> <booktitle> The Journal of Real-Time Systems 1 (1), </booktitle> <pages> 27-60. </pages> <note> Sun Microsystems (1994a, August). SunVideo User's Guide. </note> <institution> Mountain View, California: Sun Microsystems. Sun Microsystems (1994b, </institution> <month> August). </month> <title> XIL Programmer's Guide. </title> <institution> Mountain View, California: Sun Microsystems. </institution>
Reference: <author> Tanenbaum, A. S. </author> <year> (1987). </year> <title> Operating systems: design and implementation. </title> <address> Englewood Cliffs, New Jersey: </address> <publisher> Prentice-Hall. </publisher>
Reference: <author> Tang, J. C. and E. A. </author> <title> Isaacs (1992, December). Why do users like video? studies of multimedia-supported collaboration. </title> <type> Technical Report TR-92-5, </type> <institution> Sun Microsystems Laboratories, Mountain View, California. </institution>
Reference-contexts: Tang <ref> (Tang and Isaacs 1992) </ref> suggests enforcing mutual viewing, so that if A can see B, B can also see A, but admits that this is hardly practical in a distributed system. In general, the use of receiver-oriented multicasting for efficiency will make encryption the only viable means of protecting privacy.
Reference: <author> Tawbi, W., F. Horn, E. Horlait, and J.-B. </author> <month> Stefani </month> <year> (1994, </year> <month> February). </month> <title> Video compression standards and quality of service. </title> <journal> Computer Journal 36 (1), </journal> <pages> 43-54. </pages>
Reference-contexts: Other continuous media types produce large data rates. CD-quality audio, for example, generates samples at rates of around 1.5 Mb/s. Video exacerbates the demands by requiring data rates of about 1.2 Mb/s for MPEG-compressed, VHS-quality video <ref> (Tawbi, Horn, Horlait, and Stefani 1994) </ref>, 20 Mb/s for compressed HDTV, up to 200 Mb/s for 24-bit (RGB) uncompressed video at 30 frames/s (640 by 480 pixels) or 1.2 Gb/s for uncompressed HDTV.
Reference: <author> Terek, R. and J. </author> <month> Pasquale </month> <year> (1991, </year> <month> June). </month> <title> Experiences with audio conferencing using the X window system, UNIX, </title> <booktitle> and TCP/IP. In Proc. of Usenix Summer Conference, </booktitle> <address> Nashville, Tennessee, </address> <pages> pp. 405-418. </pages>
Reference-contexts: media stream is only piped through the system with moderate processing. (This accounts for the success of multimedia demos at trade shows.) However, even for a quiescent system, there can be significant variation in the interdeparture and application-visible interarrival times caused by system demons or process rescheduling, as measured in <ref> (Terek and Pasquale 1991) </ref>. The reasons for these variations are found in the properties of kernels and process schedulers. <p> Thus, the audio library must provide either almost all the desirable 10 Henning Schulzrinne audio services or very few beyond mixing, volume control and the like. Existing implementations such as those discussed in <ref> (Terek and Pasquale 1991) </ref> favor the client-server model, following the approach taken by the X-window system. Applications contain a clientside library, which transfers audio data to a server running at the workstation with the physical audio input and output devices.
Reference: <author> Terry, D. B. and D. C. </author> <title> Swinehart (1988, February). Managing stored voice in the Etherphone system. </title> <journal> ACM Transactions on Computer Systems 6 (1), </journal> <pages> 3-27. </pages>
Reference-contexts: Audio control functionality like talker indication or on-screen volume unit (VU) display cannot be readily supported. While this architecture imposes some mild control timing constraints on the operating system, it is not likely to require fundamental changes. The Etherphone <ref> (Terry and Swinehart 1988) </ref>, VOX (Arons, Binding, Lantz, and Schmandt 1989), DVI (Ripley 1989) and IMAL (Ludwig and Dunn 1987) systems are examples of the separation of control and data for audio. Instead of analog mixing, the Pandora system (Hopper 1990) integrates video in digital form.
Reference: <author> Tokuda, H. and T. </author> <month> Kitayama </month> <year> (1993, </year> <month> November). </month> <title> Dynamic QoS control based on real-time threads. </title> <booktitle> In Proceedings of the 4th International Workshop on Network and Operating System Support for Digital Audio and Video, Lancaster, U.K., </booktitle> <pages> pp. 114-123. </pages> <institution> Lancaster University. </institution> <note> Lecture Notes in Computer Science 846. </note>
Reference-contexts: A slightly different adaptation algorithm works on a longer time scale. Instead of rejecting new real-time tasks, the system detects overload and then renegotiates resource requirements with these tasks (Hanko, Kuerner, Northcutt, and Wall 1991). A real-time thread package for Mach <ref> (Tokuda and Kitayama 1993) </ref> supports both periodic and aperiodic execution with deadline bounds. It uses timing-fault notification for threads serving adaptive applications to self-stabilize. A timing-fault occurs if a thread misses its deadline. The timing fault handler can then reduce the requested frequency of thread execution to self-stabilize the system.
Reference: <author> Tokuda, H., T. Nakajima, and P. Rao (1990, </author> <month> October). </month> <title> Real-time Mach: Towards a predictable real-time system. </title> <booktitle> In Proc. of USENIX Mach Workshop, </booktitle> <address> Burlington, Vermont, </address> <pages> pp. 73-82. </pages>
Reference-contexts: Hagsand and Sjodin (Hagsand and Sjdin 1994), for Mach by Tokuda et al.<ref> (Tokuda, Nakajima, and Rao 1990) </ref> and Nakajima et al.(Nakajima, Yazaki, and Matsumoto 1991). A more sophisticated version of EDF scheduling, called processor-capacity reserves (Mercer, Savage, and Tokuda 1993; Mercer, Savage, and Tokuda 1994), was added to real-time Mach (Tokuda, Nakajima, and Rao 1990). Here, programs are assigned a periodic processor capacity, with programs that have not yet consumed their allocation taking precedence over unreserved programs.
Reference: <author> Topolcic, C. </author> <year> (1990, </year> <month> October). </month> <title> Experimental internet stream protocol, version 2 (ST-II). Request for Comments (Experimental) RFC 1190, </title> <institution> Internet Engineering Task Force. </institution> <note> (Obsoleted by RFC1819). </note>
Reference-contexts: Thus, efficient interrupt handling and process scheduling is particularly important (see also Sect. 3.2). Even with a relatively slow workstation, however, per-packet processing delay was measured at less than 500 s per packet for TCP and should be significantly less for UDP. Protocols like ST-II <ref> (Topolcic 1990) </ref> claim to be particularly optimized for multimedia streams, offering both facilities for resource reservation, and, less importantly, a reduced per-packet handling overhead.
Reference: <author> Turletti, T. </author> <year> (1994, </year> <month> October). </month> <journal> The INRIA videoconferencing system IVS. </journal> <volume> Connexions 8 (10), </volume> <pages> 20-24. </pages>
Reference: <author> Wolman, A., G. Voelker, and C. A. Thekkath (1994, </author> <month> January). </month> <title> Latency analysis of TCP on ATM network. </title> <booktitle> In Proc. of Usenix Winter Conference, </booktitle> <address> San Francisco, California, </address> <pages> pp. 167-179. </pages> <publisher> Usenix. </publisher>
Reference-contexts: Solutions include the elimination of copying between network adapter (Clark, Jacobson, Romkey, and Salwen 1989) and operating system buffers, or kernel and user space, or combining copying and checksumming <ref> (Wolman, Voelker, and Thekkath 1994) </ref>. For continuous media, the User Datagram Protocol (UDP) is used as a transport protocol rather than the Transmission Control Protocol (TCP), as the reliability and flow control offered by TCP interfere with the delay requirements and inherent rate of continuous media. <p> However, UDP checksumming still imposes unnecessary processing costs. Measurements <ref> (Wolman, Voelker, and Thekkath 1994) </ref> have shown that, for large packets as would be found in video transmission, the sender latency is dominated by checksumming and, if used, any software fragmentation into ATM cells.
Reference: <author> Yu, C., W. Sun, D. Bitton, Q. Yang, R. Bruno, and J. </author> <month> Yus </month> <year> (1989, </year> <month> July). </month> <title> Efficient placement of audio data on optical disks for real-time applications. </title> <booktitle> Communications ACM 7 (32), </booktitle> <pages> 862-871. </pages>
Reference-contexts: The survey has ignored issues of storage scheduling (Reddy and Wyllie 1993) and management <ref> (Yu, Sun, Bitton, Yang, Bruno, and Yus 1989) </ref>, as they are generally of less importance for end-user workstations. These issues dominate, however, for video-on-demand servers (Ramakr-ishnan, Vaitzblit, Gray, Vahalia, Ting, Tzelnic, Glaser, and Duso 1993).
Reference: <author> Zimmermann, C. </author> <year> (1994, </year> <month> January). </month> <title> Making distributed multimedia systems secure: the switchboard approach. </title> <booktitle> ACM Operating Systems Review 28 (1), </booktitle> <pages> 88-100. </pages>
Reference-contexts: In general, the use of receiver-oriented multicasting for efficiency will make encryption the only viable means of protecting privacy. Zimmermann <ref> (Zimmermann 1994) </ref> suggests a capability-based protection system for multimedia operating systems. If continuous media data are encrypted and decrypted within the application, traditional user-kernel boundaries and attendant copying across that boundary are no longer needed.

References-found: 87

