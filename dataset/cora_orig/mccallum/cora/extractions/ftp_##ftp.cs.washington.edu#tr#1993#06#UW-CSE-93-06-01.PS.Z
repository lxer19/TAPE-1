URL: ftp://ftp.cs.washington.edu/tr/1993/06/UW-CSE-93-06-01.PS.Z
Refering-URL: http://www.cs.washington.edu/homes/mel/abstracts/nonuniform.html
Root-URL: 
Email: mel@cs.washington.edu  snyder@cs.washington.edu  
Title: Performance of Chaos and Oblivious Routers Under Non-uniform Traffic node torus and hypercube topologies, show
Author: Melanie L. Fulgham Lawrence Snyder 
Note: compared on both the 256  This work is supported by an NSF Graduate Fellowship and ONR grant N00014-91-J-1007. This work is supported in part by NSF grants MIP-9013274 and MIP-9213469.  
Date: July 23, 1993  
Affiliation: University of Washington  
Abstract: order routers) on the hypercube topology [KS91], and the mesh and torus topologies [BS92]. The results, based on simulations of two different workloads, one uniform and one non-uniform load, show that in general the Chaos router is superior to the oblivious router. However, two workloads alone are not representative of the typical types of traffic encountered in practice. In this paper five additional non-uniform workloads are simulated. Each was chosen to represent one of the various types of communication encountered in typical programs. The workloads, 
Abstract-found: 1
Intro-found: 1
Reference: [AV92] <author> Vikram S. Adve and Mary K. Vernon. </author> <title> Performance analysis of multiprocessor mesh interconnection networks with wormhole routing. </title> <type> Technical Report 1001a, </type> <institution> Univ. of Wisconsin - Madison, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: On the torus the oblivious throughput degrades after 8 saturation with the complement, random, shu*e, and random leveled traffic patterns. This is most likely due to the asymmetry in the oblivious network introduced by the virtual channels used for deadlock protection in the torus <ref> [Bol92, AV92] </ref>. Derouting also affects latency. In general the torus latencies have three phases. When the load is below the neighborhood of the saturating load of the oblivious torus, latency for the Chaos torus router is slightly greater for all the traffic patterns.
Reference: [Bol92] <author> Kevin Bolding. </author> <title> Non-uniformities introduced by virtual channel deadlock prevention. </title> <type> Technical Report 92-07-07, </type> <institution> University of Washington, </institution> <address> Seattle, WA, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: On the torus the oblivious throughput degrades after 8 saturation with the complement, random, shu*e, and random leveled traffic patterns. This is most likely due to the asymmetry in the oblivious network introduced by the virtual channels used for deadlock protection in the torus <ref> [Bol92, AV92] </ref>. Derouting also affects latency. In general the torus latencies have three phases. When the load is below the neighborhood of the saturating load of the oblivious torus, latency for the Chaos torus router is slightly greater for all the traffic patterns.
Reference: [BS91] <author> K. Bolding and L. Snyder. </author> <title> Overview of fault handling for the chaos router. </title> <booktitle> In Proc. of the 1991 IEEE International Workshop on Defect and Fault Tolerance in VLSI Systems, </booktitle> <month> November </month> <year> 1991. </year>
Reference-contexts: Besides higher throughput, the Chaos router has the advantage that it is fault tolerant. Unlike oblivious routers, adaptive routers do not necessarily break in the presence of faults. Work has already been started to insure that no message can get trapped in a faulty Chaos network <ref> [BS91] </ref>. Acknowledgements We thank Smaragda Konstantinidou and Kevin Bolding for writing initial versions of the simulator, Gerry Shedler for help with the simulation methodology, and Carl Ebeling for many invaluable discussions.
Reference: [BS92] <author> K. Bolding and L. Snyder. </author> <title> Mesh and torus chaotic routing. </title> <booktitle> In Proc. of The Advanced Research in VLSI and Parallel Systems Conference, </booktitle> <month> March </month> <year> 1992. </year>
Reference-contexts: Using a simplified functional design, the Chaos router has been compared in software simulation studies to the state-of-the-art oblivious routers (i.e. dimension order routers) on the hypercube topology [KS91], and the mesh and torus topologies <ref> [BS92] </ref>. The results demonstrate a general superiority of the Chaos router on the two workloads simulated. However considered alone, the two workloads are not representative of the typical traffic patterns encountered in practice. One of the workloads considered in the original studies is the uniform random traffic pattern.
Reference: [DS87] <author> W. Dally and C. Seitz. </author> <title> Deadlock-free message routing in multiprocessor interconnection networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(5):547-553, </volume> <month> May </month> <year> 1987. </year> <month> 12 </month>
Reference-contexts: If the channel for the lowest dimension needed is unavailable, the packet must wait. For the torus, packets route to the column matching the x dimension first, and then route to the row specified by the y dimension. Virtual channels are used to prevent deadlock <ref> [DS87] </ref>. For the hypercube, where the node addresses are represented by binary numbers, the dimensions of the current location are matched with the dimensions of the destination address from the least significant bit to the most significant bit.
Reference: [GI90] <author> Peter W. Glynn and Donald L. Iglehart. </author> <title> Simulation output analysis using standardized time series. </title> <journal> Mathematics Operations Research, </journal> <pages> pages 1-16, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: It is assumed that the system satisfies the Function Central Limit Theorem. This allows the use of the batch means method [Mu~n91] for computing 95% confidence intervals. See Glynn and Iglehart <ref> [GI90] </ref> for the theoretical justification. All nodes generate packets with destinations specified by the simulated traffic pattern. The rate of packet generation is called the presented load.
Reference: [KK79] <author> P. Kermani and L. Kleinrock. </author> <title> Virtual cut-through: A new computer communication switching technique. </title> <journal> Computer Networks, </journal> <volume> 3 </volume> <pages> 267-286, </pages> <year> 1979. </year>
Reference-contexts: The remaining channel connects the router to its processor by the injection frame and the delivery frame. The Chaos router has, in addition to the pairs of frames, a small buffer called the multiqueue which is composed of d + 1 packet frames. The routers are virtual cut-through <ref> [KK79] </ref>. Therefore once the header of a packet arrives at a node, it can be routed immediately (cut-through) to a free channel before the packet has completely arrived. Packets can also cut-through the Chaos multiqueue frames. The packets are composed of 20 flits, or FLow control unITs.
Reference: [Kon91] <author> Smaragda Konstantinidou. </author> <title> Deterministic and Chaotic Adaptive Routing in Multicomput-ers. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <address> Seattle, WA, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: 1 Introduction The Chaos router is a deadlock free, probabilistically livelock free, nonminimal adaptive packet router for dynamically injected network traffic <ref> [Kon91] </ref>. It was introduced as a practical alternative to oblivious and priority routers. Unlike its predecessors [Nga89], the Chaos router uses randomization to provide an efficient way to avoid livelock [KS90]. <p> The second workload considered previously, called the 4X hot spots traffic pattern, is a non-uniform pattern in which ten randomly selected nodes are four times more likely to be the destination of packets than the other nodes of the network. Such a load creates delivery hot spots <ref> [Kon91] </ref> and is intended to represent situations in which program variables, such as synchronization variables, are frequently referenced. In this paper five new non-uniform workloads are considered. In addition, the 4X hot spots and the uniform random workload are repeated in order to gather additional data. <p> These times were calculated assuming that the destination address fits in the first flit. This implies, for these experiments, that a flit must transmit at least 8 bits. If multiple packet headers arrive at a node simultaneously, they are routed one at time. This simplification is justified <ref> [Kon91] </ref> because the added complexity of processing packets in parallel slows the logic. In addition, the frequency with which it is beneficial to process multiple packets is small, given 20 flit packets and dimension d 8. <p> Randomness is used to select one of the set of input frames including the injection frame that contain packets that need the current output dimension. 1 Previous comparisons between oblivious and Chaos routers <ref> [Kon91, KS90] </ref> used a 1:1 ratio rather than a 4:3 ratio, as well as less precise modeling of internal details, which explains the minor discrepancies in the reported results. 4 Mechanisms incorporated into nonminimal adaptive routers to assure deterministic livelock freedom typically introduce complexity, significantly slowing the router operation.
Reference: [KS90] <author> S. Konstantinidou and L. Snyder. </author> <title> The chaos router: A practical application of randomization in network routing. </title> <booktitle> In Proc. of the 2nd ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> pages 21-30, </pages> <year> 1990. </year>
Reference-contexts: It was introduced as a practical alternative to oblivious and priority routers. Unlike its predecessors [Nga89], the Chaos router uses randomization to provide an efficient way to avoid livelock <ref> [KS90] </ref>. Using a simplified functional design, the Chaos router has been compared in software simulation studies to the state-of-the-art oblivious routers (i.e. dimension order routers) on the hypercube topology [KS91], and the mesh and torus topologies [BS92]. <p> If the selected input dimension is not the current dimension and the current dimension input is empty, move the selected input packet to the current dimension output frame. The use of randomness is critical to the operation of the Chaos router <ref> [KS90] </ref>. First, randomness is used to select a packet in the multiqueue for derouting. This is essential, since it assures that the router is probabilistically livelock free. Livelock occurs in nonminimal adaptive routers when a packet continually circulates in the network. <p> Randomness is used to select one of the set of input frames including the injection frame that contain packets that need the current output dimension. 1 Previous comparisons between oblivious and Chaos routers <ref> [Kon91, KS90] </ref> used a 1:1 ratio rather than a 4:3 ratio, as well as less precise modeling of internal details, which explains the minor discrepancies in the reported results. 4 Mechanisms incorporated into nonminimal adaptive routers to assure deterministic livelock freedom typically introduce complexity, significantly slowing the router operation.
Reference: [KS91] <author> S. Konstantinidou and L. Snyder. </author> <title> Chaos router: Architecture and performance. </title> <booktitle> In Proceedings of the 18th International Symposium on Computer Architecture, </booktitle> <pages> pages 212-221. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: Unlike its predecessors [Nga89], the Chaos router uses randomization to provide an efficient way to avoid livelock [KS90]. Using a simplified functional design, the Chaos router has been compared in software simulation studies to the state-of-the-art oblivious routers (i.e. dimension order routers) on the hypercube topology <ref> [KS91] </ref>, and the mesh and torus topologies [BS92]. The results demonstrate a general superiority of the Chaos router on the two workloads simulated. However considered alone, the two workloads are not representative of the typical traffic patterns encountered in practice.
Reference: [Lei92] <author> F. Thomson Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays, Trees, Hypercubes. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1992. </year>
Reference-contexts: Transpose and bit reversal are important because they occur in practical computations and can cause worst case behavior in hypercubic oblivious routers <ref> [Lei92] </ref>. The shu*e converts row major indexing to shu*ed row major indexing on the mesh or torus topologies. This indexing scheme can be used for efficient sorting [TK77].
Reference: [LL74] <author> G.P. Learmonth and P.A.W. Lewis. </author> <title> Statistical tests of some widely used and recently proposed uniform random number generators. </title> <booktitle> In Proc. of the 7th Conf. on Comp. Sci, and Stats. Interface, </booktitle> <year> 1974. </year>
Reference-contexts: The program is written in C and uses a simulation cycle time corresponding to one time unit which is the time to transmit a flit across a channel. The sources of randomness are provided by the Learmonth-Lewis prime-modulus, multiplicative congruential generator <ref> [LL74] </ref> which is considered highly reliable for simulation studies [LO89]. It is assumed that the system satisfies the Function Central Limit Theorem. This allows the use of the batch means method [Mu~n91] for computing 95% confidence intervals. See Glynn and Iglehart [GI90] for the theoretical justification.
Reference: [LO89] <author> P.A.W. Lewis and E.J. Orav. </author> <title> Uniform Pseudo-Random Variable Generation. </title> <publisher> Wadsworth & Brooks/Cole, </publisher> <year> 1989. </year>
Reference-contexts: The sources of randomness are provided by the Learmonth-Lewis prime-modulus, multiplicative congruential generator [LL74] which is considered highly reliable for simulation studies <ref> [LO89] </ref>. It is assumed that the system satisfies the Function Central Limit Theorem. This allows the use of the batch means method [Mu~n91] for computing 95% confidence intervals. See Glynn and Iglehart [GI90] for the theoretical justification. All nodes generate packets with destinations specified by the simulated traffic pattern.
Reference: [Mu~n91] <author> David Mu~noz. </author> <title> Multivariate standardized time series in the analysis of simulation output. </title> <type> Technical Report TR-68, </type> <institution> Stanford University, </institution> <address> Palo Alto, CA, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: The simulations mimic the behavior of the UW chip designs at the level of the system clock for both of the routers. One time unit in the simulation corresponds to one clock period in the hardware design. In addition, a theoretically sound simulation methodology has been followed <ref> [Mu~n91] </ref>. Confidence intervals are provided for all the primary data. We believe that no more accurate data can be produced, short of building four 256 processor parallel computers, one for each of the two routers and two topologies. The paper is organized as follows. <p> The sources of randomness are provided by the Learmonth-Lewis prime-modulus, multiplicative congruential generator [LL74] which is considered highly reliable for simulation studies [LO89]. It is assumed that the system satisfies the Function Central Limit Theorem. This allows the use of the batch means method <ref> [Mu~n91] </ref> for computing 95% confidence intervals. See Glynn and Iglehart [GI90] for the theoretical justification. All nodes generate packets with destinations specified by the simulated traffic pattern. The rate of packet generation is called the presented load.
Reference: [Nga89] <author> J. Y. Ngai. </author> <title> A Framework for Adaptive Routing in Multicomputer Networks. </title> <type> PhD thesis, </type> <institution> California Institute of Technology, Pasadena, </institution> <address> CA, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: 1 Introduction The Chaos router is a deadlock free, probabilistically livelock free, nonminimal adaptive packet router for dynamically injected network traffic [Kon91]. It was introduced as a practical alternative to oblivious and priority routers. Unlike its predecessors <ref> [Nga89] </ref>, the Chaos router uses randomization to provide an efficient way to avoid livelock [KS90].
Reference: [Per92] <author> Michael J. Pertel. </author> <title> A critique of adaptive routing. </title> <type> Technical Report CS-TR-92-06, </type> <institution> Cali-fornia Institute of Technology, Pasadena, </institution> <address> CA, </address> <year> 1992. </year>
Reference-contexts: However considered alone, the two workloads are not representative of the typical traffic patterns encountered in practice. One of the workloads considered in the original studies is the uniform random traffic pattern. Despite its wide use in packet routing studies, it is often criticized (though there are exceptions <ref> [Per92] </ref>) as not being representative of workloads encountered in practice. Typical programs exhibit locality and although little is understood about the characteristics of practical workloads, there is no reason to believe accesses occur randomly unless the target machine hashes addresses randomly. However, even the effectiveness of hashing is not understood.
Reference: [TK77] <author> C.D. Thompson and H.T. Kung. </author> <title> Sorting on a mesh-connected parallel computer. </title> <journal> Communications of the ACM, </journal> <volume> 20(4) </volume> <pages> 263-271, </pages> <year> 1977. </year>
Reference-contexts: Transpose and bit reversal are important because they occur in practical computations and can cause worst case behavior in hypercubic oblivious routers [Lei92]. The shu*e converts row major indexing to shu*ed row major indexing on the mesh or torus topologies. This indexing scheme can be used for efficient sorting <ref> [TK77] </ref>. Random leveled traffic can cause worst case behavior for oblivious hypercubes [VB81]. 4 Experimental Results 4.1 Saturation The first set of results simply identifies the saturation points for the different traffic patterns.
Reference: [VB81] <author> L. G. Valiant and G.J. Brebner. </author> <title> Universal schemes for parallel communication. </title> <booktitle> In Proceedings of the 13th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 263-277, </pages> <year> 1981. </year>
Reference-contexts: The shu*e converts row major indexing to shu*ed row major indexing on the mesh or torus topologies. This indexing scheme can be used for efficient sorting [TK77]. Random leveled traffic can cause worst case behavior for oblivious hypercubes <ref> [VB81] </ref>. 4 Experimental Results 4.1 Saturation The first set of results simply identifies the saturation points for the different traffic patterns.
References-found: 18

