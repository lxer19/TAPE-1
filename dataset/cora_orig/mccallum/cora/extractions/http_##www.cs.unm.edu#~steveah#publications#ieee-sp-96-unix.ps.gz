URL: http://www.cs.unm.edu/~steveah/publications/ieee-sp-96-unix.ps.gz
Refering-URL: http://www.cs.unm.edu/~steveah/
Root-URL: http://www.cs.unm.edu
Email: fforrest,steveah,somag@cs.unm.edu  tal@cert.org  
Title: A Sense of Self for Unix Processes  
Author: Stephanie Forrest Steven A. Hofmeyr Anil Somayaji Thomas A. Longstaff 
Address: Albuquerque, NM 87131-1386  Pittsburgh, PA 15213  
Affiliation: Dept. of Computer Science University of New Mexico  CERT Coordination Center Software Engineering Institute Carnegie-Mellon University  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> [8LGM]. [8lgm]-advisory-16.unix.sendmail-6-dec-1994. </author> <note> http://www.8lgm.org/advisories.html. </note>
Reference-contexts: Table 3 shows the results of these comparisons. Each row in the table reports data for one typical trace. In most cases, we have conducted multiple runs of the intrusion with identical or nearly identical results. To date, we have been able to execute and trace four attacks: sunsendmailcp <ref> [1] </ref>, a syslog attack script [2, 7], a decode alias attack, and lprcp [3]. The sunsendmailcp script uses a special command line option to cause sendmail to append an email message to a file.
Reference: [2] <author> [8LGM]. [8lgm]-advisory-22.unix.syslog.2-aug-1995. </author> <note> http://www.8lgm.org/advisories.html. </note>
Reference-contexts: Each row in the table reports data for one typical trace. In most cases, we have conducted multiple runs of the intrusion with identical or nearly identical results. To date, we have been able to execute and trace four attacks: sunsendmailcp [1], a syslog attack script <ref> [2, 7] </ref>, a decode alias attack, and lprcp [3]. The sunsendmailcp script uses a special command line option to cause sendmail to append an email message to a file. By using this script on a file such as /.rhosts, a local user may obtain root access.
Reference: [3] <author> [8LGM]. [8lgm]-advisory-3.unix.lpr.19-aug-1991. </author> <note> http://www.8lgm.org/advisories.html. </note>
Reference-contexts: In most cases, we have conducted multiple runs of the intrusion with identical or nearly identical results. To date, we have been able to execute and trace four attacks: sunsendmailcp [1], a syslog attack script [2, 7], a decode alias attack, and lprcp <ref> [3] </ref>. The sunsendmailcp script uses a special command line option to cause sendmail to append an email message to a file. By using this script on a file such as /.rhosts, a local user may obtain root access.
Reference: [4] <author> D. Anderson, T. Frivold, and A. Valdes. </author> <title> Next-generation intrusion detection expert system (NIDES): A summary. </title> <type> Technical Report SRI-CSL-95-07, </type> <institution> Computer Science Laboratory, SRI International, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: In anomaly intrusion detection, it is assumed that the nature of the intrusion is unknown, but that the intrusion will result in behavior different from that normally seen in the system. Many detection systems combine both approaches, a good example being IDES <ref> [18, 4, 8] </ref>. In this paper we are concerned only with anomaly intrusion detection. Most previous work on anomaly intrusion detection has determined profiles for user behavior. Intrusions are detected when a user behaves out of character. These anomalies are detected by using statistical profiles, as in IDES [18, 4, 8], <p> being IDES <ref> [18, 4, 8] </ref>. In this paper we are concerned only with anomaly intrusion detection. Most previous work on anomaly intrusion detection has determined profiles for user behavior. Intrusions are detected when a user behaves out of character. These anomalies are detected by using statistical profiles, as in IDES [18, 4, 8], inductive pattern generation, as in TIM [19], or neural networks [12]. Generation of user profiles by such methods requires an audit trail of actions for each user. These are typically slowly adaptive, changing profiles gradually to accommodate changing user behavior.
Reference: [5] <author> CERT. Sendmail v.5 vulnerability. ftp://info. cert.org/pub/cert advisories/CA-95:05. sendmail.vulnerabilities, </author> <month> February 22 </month> <year> 1995. </year>
Reference-contexts: The decode attack is less detectable at 0.3%, and the lpr attack is detected at 2.2%. A second source of anomalous behavior comes from unsuccessful intrusion attempts. We tested two remote attack scripts, called sm565a and sm5x <ref> [5, 6] </ref>. SunOS 4.1.4 has patches that prevent these particular intrusions. The results are shown in Table 3. Overall, the percentage of abnormal sequences is on the low end of the range for successful attacks. Error conditions provide a third source of anomalous behavior.
Reference: [6] <author> CERT. Sendmail v.5 vulnerability. ftp://info. cert.org/pub/cert advisories/CA-95:08 .sendmail.v.5.vulnerability, </author> <month> August 17 </month> <year> 1995. </year>
Reference-contexts: The decode attack is less detectable at 0.3%, and the lpr attack is detected at 2.2%. A second source of anomalous behavior comes from unsuccessful intrusion attempts. We tested two remote attack scripts, called sm565a and sm5x <ref> [5, 6] </ref>. SunOS 4.1.4 has patches that prevent these particular intrusions. The results are shown in Table 3. Overall, the percentage of abnormal sequences is on the low end of the range for successful attacks. Error conditions provide a third source of anomalous behavior.
Reference: [7] <author> CERT. Syslog vulnerability a workaround for sendmail. ftp://info.cert.org/pub/cert advisories /CA-95:13.syslog.vul, </author> <month> October 19 </month> <year> 1995. </year>
Reference-contexts: Each row in the table reports data for one typical trace. In most cases, we have conducted multiple runs of the intrusion with identical or nearly identical results. To date, we have been able to execute and trace four attacks: sunsendmailcp [1], a syslog attack script <ref> [2, 7] </ref>, a decode alias attack, and lprcp [3]. The sunsendmailcp script uses a special command line option to cause sendmail to append an email message to a file. By using this script on a file such as /.rhosts, a local user may obtain root access.
Reference: [8] <author> D. E. Denning. </author> <title> An intrusion detection model. </title> <booktitle> In IEEE Transactions on Software Engineering, </booktitle> <address> Los Alamos, CA, 1987. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: In anomaly intrusion detection, it is assumed that the nature of the intrusion is unknown, but that the intrusion will result in behavior different from that normally seen in the system. Many detection systems combine both approaches, a good example being IDES <ref> [18, 4, 8] </ref>. In this paper we are concerned only with anomaly intrusion detection. Most previous work on anomaly intrusion detection has determined profiles for user behavior. Intrusions are detected when a user behaves out of character. These anomalies are detected by using statistical profiles, as in IDES [18, 4, 8], <p> being IDES <ref> [18, 4, 8] </ref>. In this paper we are concerned only with anomaly intrusion detection. Most previous work on anomaly intrusion detection has determined profiles for user behavior. Intrusions are detected when a user behaves out of character. These anomalies are detected by using statistical profiles, as in IDES [18, 4, 8], inductive pattern generation, as in TIM [19], or neural networks [12]. Generation of user profiles by such methods requires an audit trail of actions for each user. These are typically slowly adaptive, changing profiles gradually to accommodate changing user behavior.
Reference: [9] <author> G. Fink and K. Levitt. </author> <title> Property-based testing of privileged programs. </title> <booktitle> In Proceedings of the 10th Annual Computer Security Applications Conference, </booktitle> <pages> pages 154-163, </pages> <month> December 5-9 </month> <year> 1994. </year>
Reference-contexts: These are typically slowly adaptive, changing profiles gradually to accommodate changing user behavior. Abrupt changes in behavior are flagged as irregular and identified with intrusions. An alternative approach is taken by Fink, Levitt and Ko <ref> [9, 14] </ref>. Instead of trying to build up normal user profiles, they focus on determining normal behavior for privileged processes, those that run as root. They define normal behavior using a program specification language, in which the allowed operations (system calls and their parameters) of a process are formally specified.
Reference: [10] <author> S. Forrest, B. Javornik, R. Smith, and A. Perelson. </author> <title> Using genetic algorithms to explore pattern recognition in the immune system. </title> <journal> Evolutionary Computation, </journal> <volume> 1(3) </volume> <pages> 191-211, </pages> <year> 1993. </year>
Reference-contexts: By analogy, the specific immune response is a secondary mechanism that sits behind passive barriers (e.g., the skin and mucus membranes) and other innate responses (e.g., generalized inflammatory mechanisms). In related work, we studied a number of immune system models based on these secondary mechanisms <ref> [10, 13, 11] </ref> which provide the inspiration for the project described here. y In Proceedings of the 1996 IEEE Symposium on Security and Privacy, IEEE Computer Society Press, Los Alamitos, CA, pp. 120-128 (1996). c fl1996 IEEE The natural immune system has several properties that we believe are important for robust
Reference: [11] <author> S. Forrest, A. S. Perelson, L. Allen, and R. Cherukuri. </author> <title> Self-nonself discrimination in a computer. </title> <booktitle> In Proceedings of the 1994 IEEE Symposium on Research in Security and Privacy, </booktitle> <address> Los Alamos, CA, 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: By analogy, the specific immune response is a secondary mechanism that sits behind passive barriers (e.g., the skin and mucus membranes) and other innate responses (e.g., generalized inflammatory mechanisms). In related work, we studied a number of immune system models based on these secondary mechanisms <ref> [10, 13, 11] </ref> which provide the inspiration for the project described here. y In Proceedings of the 1996 IEEE Symposium on Security and Privacy, IEEE Computer Society Press, Los Alamitos, CA, pp. 120-128 (1996). c fl1996 IEEE The natural immune system has several properties that we believe are important for robust <p> These properties and their significance are discussed in <ref> [11] </ref>. Previously, we developed a computer virus detection method based on these principles [11]. The method was implemented at the file-authentication level, and self was defined statically in terms of files containing programs or other protected data. <p> These properties and their significance are discussed in <ref> [11] </ref>. Previously, we developed a computer virus detection method based on these principles [11]. The method was implemented at the file-authentication level, and self was defined statically in terms of files containing programs or other protected data. However, if we want to build a general-purpose protective capability we will need a more flexible sense of self.
Reference: [12] <author> K. L. Fox, R. R. Henning, J. H. Reed, and R. Simonian. </author> <title> A neural network approach towards intrusion detection. </title> <booktitle> In Proceedings of the 13th National Computer Security Conference, </booktitle> <pages> pages 125-134, </pages> <address> Washington, D.C., </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Most previous work on anomaly intrusion detection has determined profiles for user behavior. Intrusions are detected when a user behaves out of character. These anomalies are detected by using statistical profiles, as in IDES [18, 4, 8], inductive pattern generation, as in TIM [19], or neural networks <ref> [12] </ref>. Generation of user profiles by such methods requires an audit trail of actions for each user. These are typically slowly adaptive, changing profiles gradually to accommodate changing user behavior. Abrupt changes in behavior are flagged as irregular and identified with intrusions.
Reference: [13] <author> R. H. Hightower, S. Forrest, and A. S. Perelson. </author> <title> The baldwin effect in the immune system: learning by somatic hypermu-tation. </title> <editor> In R. K. Belew and M. Mitchell, editors, </editor> <title> Individual Plasticity in Evolving Populations: Models and Algorithms. </title> <publisher> Addison-Wesley, in press. </publisher>
Reference-contexts: By analogy, the specific immune response is a secondary mechanism that sits behind passive barriers (e.g., the skin and mucus membranes) and other innate responses (e.g., generalized inflammatory mechanisms). In related work, we studied a number of immune system models based on these secondary mechanisms <ref> [10, 13, 11] </ref> which provide the inspiration for the project described here. y In Proceedings of the 1996 IEEE Symposium on Security and Privacy, IEEE Computer Society Press, Los Alamitos, CA, pp. 120-128 (1996). c fl1996 IEEE The natural immune system has several properties that we believe are important for robust
Reference: [14] <author> C. Ko, G. Fink, and K. Levitt. </author> <title> Automated detection of vulnerabilities in priviledged programs by execution monitoring. </title> <booktitle> In Proceedings of the 10th Annual Computer Security Applications Conference, </booktitle> <pages> pages 134-144, </pages> <month> December 5-9 </month> <year> 1994. </year>
Reference-contexts: These are typically slowly adaptive, changing profiles gradually to accommodate changing user behavior. Abrupt changes in behavior are flagged as irregular and identified with intrusions. An alternative approach is taken by Fink, Levitt and Ko <ref> [9, 14] </ref>. Instead of trying to build up normal user profiles, they focus on determining normal behavior for privileged processes, those that run as root. They define normal behavior using a program specification language, in which the allowed operations (system calls and their parameters) of a process are formally specified. <p> System damage is caused by running programs that execute system calls. Thus, we restrict our attention to system calls in running processes. Further, we consider only privileged processes. Monitoring privileged processes has several advantages over monitoring user profiles <ref> [14] </ref>. Root processes are more dangerous than user processes because they have access to more parts of the computer system. They have a limited range of behavior, and their behavior is relatively stable over time.
Reference: [15] <author> S. Kumar. </author> <title> Classification and Detection of Computer Intrusions. </title> <type> PhD thesis, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: One advantage of a simple definition for normal behavior is the potential for implementing an on-line monitoring system that runs in real-time. 2 Related Work There are two basic approaches to intrusion detection <ref> [16, 15] </ref>: misuse intrusion detection and anomaly intrusion detection. In misuse intrusion detection, known patterns of intrusion (intrusion signatures) are used to try to identify intrusions when they happen. <p> A computer immune system could mimic this by incorporating additional mechanisms to provide more comprehensive security. For example, it might be possible to include Kumar's misuse intrusion detection methods <ref> [17, 15] </ref> in the form of memory cells that store signatures of known intrusions.
Reference: [16] <author> S. Kumar and E. H. Spafford. </author> <title> A software architecture to support misuse intrusion detection. </title> <booktitle> In Proceedings of the 18th National Information Security Conference, </booktitle> <pages> pages 194-204, </pages> <year> 1995. </year>
Reference-contexts: One advantage of a simple definition for normal behavior is the potential for implementing an on-line monitoring system that runs in real-time. 2 Related Work There are two basic approaches to intrusion detection <ref> [16, 15] </ref>: misuse intrusion detection and anomaly intrusion detection. In misuse intrusion detection, known patterns of intrusion (intrusion signatures) are used to try to identify intrusions when they happen.
Reference: [17] <author> S. Kumar and E. H. Spafford. </author> <title> A software architecture to support misuse intrusion detection. </title> <type> Technical Report CSD-TR-95-009, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: A computer immune system could mimic this by incorporating additional mechanisms to provide more comprehensive security. For example, it might be possible to include Kumar's misuse intrusion detection methods <ref> [17, 15] </ref> in the form of memory cells that store signatures of known intrusions.
Reference: [18] <author> T. Lunt, A. Tamaru, F. Gilham, R. Jagannathan, P. Neumann, H. Javitz, A. Valdes, and T. Garvey. </author> <title> A real-time intrusion detection expert system (IDES) final technical report. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, California, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: In anomaly intrusion detection, it is assumed that the nature of the intrusion is unknown, but that the intrusion will result in behavior different from that normally seen in the system. Many detection systems combine both approaches, a good example being IDES <ref> [18, 4, 8] </ref>. In this paper we are concerned only with anomaly intrusion detection. Most previous work on anomaly intrusion detection has determined profiles for user behavior. Intrusions are detected when a user behaves out of character. These anomalies are detected by using statistical profiles, as in IDES [18, 4, 8], <p> being IDES <ref> [18, 4, 8] </ref>. In this paper we are concerned only with anomaly intrusion detection. Most previous work on anomaly intrusion detection has determined profiles for user behavior. Intrusions are detected when a user behaves out of character. These anomalies are detected by using statistical profiles, as in IDES [18, 4, 8], inductive pattern generation, as in TIM [19], or neural networks [12]. Generation of user profiles by such methods requires an audit trail of actions for each user. These are typically slowly adaptive, changing profiles gradually to accommodate changing user behavior.
Reference: [19] <author> H. S. Teng, K. Chen, and S. C. Lu. </author> <title> Security audit trail analysis using inductively generated predictive rules. </title> <booktitle> In Proceedings of the Sixth Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 24-29, </pages> <address> Piscataway, New Jersey, </address> <month> March </month> <year> 1990. </year> <note> IEEE. </note>
Reference-contexts: Most previous work on anomaly intrusion detection has determined profiles for user behavior. Intrusions are detected when a user behaves out of character. These anomalies are detected by using statistical profiles, as in IDES [18, 4, 8], inductive pattern generation, as in TIM <ref> [19] </ref>, or neural networks [12]. Generation of user profiles by such methods requires an audit trail of actions for each user. These are typically slowly adaptive, changing profiles gradually to accommodate changing user behavior. Abrupt changes in behavior are flagged as irregular and identified with intrusions.
References-found: 19

