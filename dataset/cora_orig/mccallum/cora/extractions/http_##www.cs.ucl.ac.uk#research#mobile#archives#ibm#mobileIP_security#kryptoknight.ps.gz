URL: http://www.cs.ucl.ac.uk/research/mobile/archives/ibm/mobileIP_security/kryptoknight.ps.gz
Refering-URL: http://www.cs.ucl.ac.uk/research/mobile/archives/ibm/mobileIP_security/
Root-URL: http://www.cs.ucl.ac.uk
Title: KryptoKnight Authentication and Key Distribution System  
Author: Refik Molva Gene Tsudik Els Van Herreweghen and Stefano Zatti 
Date: August 24, 1993  
Abstract: This paper describes KryptoKnight, an authentication and key distribution system that provides facilities for secure communication in any type of network environment. KryptoKnight was designed with the goal of providing network security services with a high degree of compactness and flexibility. Message compactness of KryptoKnight's protocols allows it to secure communication protocols at any layer, without requiring any major protocol augmentations in order to accommodate security-related information. Moreover, since KryptoKnight avoids the use of bulk encryption it is easily exportable. Owing to its architectural flexibility, KryptoKnight functions at both endpoints of communication can perform different security tasks depending on the particular network configuration. These and other novel features make KryptoKnight an attractive solution for providing security services to existing applications irrespective of the protocol layer, network configuration or communication paradigm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> ANSI Banking Key Management (Wholesale), ISO 8732 / ANSI X9.17, 1988,. </institution>
Reference-contexts: The adaptive scheme is applicable only in the case of mutual authentication, because at least a return flow from responder to initiator is necessary to convey the key (possibly even a third flow). The scenario whereby the responder contacts the AS is used by the X9.17 standard <ref> [1] </ref>. When one-way authentication is performed, the first scheme for key distribution (prior to authentication) is the only one possible, since then the secret key must be conveyed to the responder in the only authentication message available.
Reference: [2] <author> R. Bird, I. Gopal, A. Herzberg, P. Janson, S. Kutten, R. Molva, M. Yung, </author> <title> Systematic Design of Two-Party Authentication Protocols, </title> <booktitle> Proceedings of Crypto'91, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: Unlike Kerberos, which uses protocols based on the well-known Needham-Schroeder [9] scheme, KryptoKnight implements a family of novel authentication and key distribution protocols designed with assurance of security with respect to a number of attacks. (The design of the underlying protocols is not treated here; it is addressed in <ref> [2] </ref>, [3] and [4].) From a user's perspective, KryptoKnight provides facilities and services which are very similar to those of Ker-beros. In fact, Kerberos was used both as a stepping stone and a reference point in the design of KryptoKnight. <p> In fact, Kerberos was used both as a stepping stone and a reference point in the design of KryptoKnight. The resulting system offers several advantages over Kerberos: * a number of novel features of the underlying protocols described in <ref> [2] </ref>, [3] and [4]. * system design that avoids many of the problems attributed to Kerberos that are described in [5]. * support of a major subset of Generic Security Service API (GSS-API) [14]. fl In Proceedings of 1992 European Symposium on Research in Computer Security (ESORICS'92); Toulouse, France. y EURECOM <p> M AC ab can be based on DES, MD4 or MD5 ([10], [11], [7]) (see section 4.6), * represents the exclusive-or operation. The advantages and security features of this protocol are described in <ref> [2, 3] </ref>. It achieves mutual authentication of two communicating entities. <p> Nonetheless, one-way authentication in KryptoKnight has to be based on timestamps, being designed to be compatible with the one-way Kerberos protocol that uses only one message. 3.9 Exportability As described in <ref> [2, 3, 4] </ref>, the underlying authentication protocols do not require a full-blown encryption system, but, rather a strong one-way hash function. As designed and implemented, KryptoKnight is freely-exportable as it does not make use of data encryption. Both MD4 and MD5 are one-way hash functions not covered by export regulations. <p> Even with DES, KryptoKnight uses only the encryption function (i.e., the code does not include DES decryption.) Where secrecy is absolutely necessary, e.g., in hiding session keys during key distribution or protecting principals' key in the database, a simple XOR-ing technique is used (see <ref> [2, 3] </ref>). 4 Software Features The KryptoKnight software consists of separate modules organized in three layers (see Figure 7): * The protocol entity layer consists of modules implementing the active entities for the different KryptoKnight protocols, including the user, the initiator, the responder, the AS, and the admin modules.
Reference: [3] <author> R. Bird, I. Gopal, A. Herzberg, P. Janson, S. Kutten, R. Molva, M. Yung, </author> <title> Systematic Design of a Family of Attack-Resistant Authentication Protocols, </title> <journal> IEEE JSAC Special Issue on Secure Communications, </journal> <note> to appear in 1993. </note>
Reference-contexts: Unlike Kerberos, which uses protocols based on the well-known Needham-Schroeder [9] scheme, KryptoKnight implements a family of novel authentication and key distribution protocols designed with assurance of security with respect to a number of attacks. (The design of the underlying protocols is not treated here; it is addressed in [2], <ref> [3] </ref> and [4].) From a user's perspective, KryptoKnight provides facilities and services which are very similar to those of Ker-beros. In fact, Kerberos was used both as a stepping stone and a reference point in the design of KryptoKnight. <p> In fact, Kerberos was used both as a stepping stone and a reference point in the design of KryptoKnight. The resulting system offers several advantages over Kerberos: * a number of novel features of the underlying protocols described in [2], <ref> [3] </ref> and [4]. * system design that avoids many of the problems attributed to Kerberos that are described in [5]. * support of a major subset of Generic Security Service API (GSS-API) [14]. fl In Proceedings of 1992 European Symposium on Research in Computer Security (ESORICS'92); Toulouse, France. y EURECOM Institute, <p> M AC ab can be based on DES, MD4 or MD5 ([10], [11], [7]) (see section 4.6), * represents the exclusive-or operation. The advantages and security features of this protocol are described in <ref> [2, 3] </ref>. It achieves mutual authentication of two communicating entities. <p> Nonetheless, one-way authentication in KryptoKnight has to be based on timestamps, being designed to be compatible with the one-way Kerberos protocol that uses only one message. 3.9 Exportability As described in <ref> [2, 3, 4] </ref>, the underlying authentication protocols do not require a full-blown encryption system, but, rather a strong one-way hash function. As designed and implemented, KryptoKnight is freely-exportable as it does not make use of data encryption. Both MD4 and MD5 are one-way hash functions not covered by export regulations. <p> Even with DES, KryptoKnight uses only the encryption function (i.e., the code does not include DES decryption.) Where secrecy is absolutely necessary, e.g., in hiding session keys during key distribution or protecting principals' key in the database, a simple XOR-ing technique is used (see <ref> [2, 3] </ref>). 4 Software Features The KryptoKnight software consists of separate modules organized in three layers (see Figure 7): * The protocol entity layer consists of modules implementing the active entities for the different KryptoKnight protocols, including the user, the initiator, the responder, the AS, and the admin modules.
Reference: [4] <author> R. Bird, I. Gopal, A. Herzberg, P. Janson, S. Kutten, R. Molva, M. Yung, </author> <title> A Modular Family of Secure Protocols for Authentication and Key Distribution Draft, </title> <journal> in submission to IEEE/ACM Transactions on Networking, </journal> <month> August </month> <year> 1992. </year>
Reference-contexts: which uses protocols based on the well-known Needham-Schroeder [9] scheme, KryptoKnight implements a family of novel authentication and key distribution protocols designed with assurance of security with respect to a number of attacks. (The design of the underlying protocols is not treated here; it is addressed in [2], [3] and <ref> [4] </ref>.) From a user's perspective, KryptoKnight provides facilities and services which are very similar to those of Ker-beros. In fact, Kerberos was used both as a stepping stone and a reference point in the design of KryptoKnight. <p> In fact, Kerberos was used both as a stepping stone and a reference point in the design of KryptoKnight. The resulting system offers several advantages over Kerberos: * a number of novel features of the underlying protocols described in [2], [3] and <ref> [4] </ref>. * system design that avoids many of the problems attributed to Kerberos that are described in [5]. * support of a major subset of Generic Security Service API (GSS-API) [14]. fl In Proceedings of 1992 European Symposium on Research in Computer Security (ESORICS'92); Toulouse, France. y EURECOM Institute, Sophia Antipolis, <p> Nonetheless, one-way authentication in KryptoKnight has to be based on timestamps, being designed to be compatible with the one-way Kerberos protocol that uses only one message. 3.9 Exportability As described in <ref> [2, 3, 4] </ref>, the underlying authentication protocols do not require a full-blown encryption system, but, rather a strong one-way hash function. As designed and implemented, KryptoKnight is freely-exportable as it does not make use of data encryption. Both MD4 and MD5 are one-way hash functions not covered by export regulations.
Reference: [5] <author> S.M. Bellovin, M. Merritt, </author> <title> Limitations of the Kerberos Authentication System, </title> <journal> ACM SIGCOMM Computer Communication Review, </journal> <month> October </month> <year> 1990. </year>
Reference-contexts: One of the best-known efforts is Kerberos [12, 13], a network security service originally developed at MIT and subsequently incorporated into a number of architectures and commercial offerings. In spite of its popularity and widespread acceptance, Kerberos has received its share of criticisms (e.g., <ref> [5] </ref>). Moreover, it has a number of limitations that preclude its widespread use for all communication paradigms. In this paper we describe a new network security service called KryptoKnight, developed jointly by IBM Zurich and Yorktown Research Laboratories and implemented at the IBM Zurich Research Laboratory. <p> The resulting system offers several advantages over Kerberos: * a number of novel features of the underlying protocols described in [2], [3] and [4]. * system design that avoids many of the problems attributed to Kerberos that are described in <ref> [5] </ref>. * support of a major subset of Generic Security Service API (GSS-API) [14]. fl In Proceedings of 1992 European Symposium on Research in Computer Security (ESORICS'92); Toulouse, France. y EURECOM Institute, Sophia Antipolis, 06560 Valbonne, France. molva@eurecom.fr z IBM Research Laboratory, CH-8803 Ruschlikon, Switzerland. fgts,evh,zatg@zurich.ibm.com 1 This paper is organized
Reference: [6] <author> W. Diffie and M. Hellman, </author> <title> New Directions in Cryptography, </title> <journal> IEEE Transactions on Information Theory, </journal> <month> November </month> <year> 1976. </year>
Reference: [7] <institution> National Bureau of Standards, Federal Information Processing Standards, National Bureau of Standards, </institution> <note> Publication 46, </note> <year> 1977. </year>
Reference-contexts: M AC ab can be based on DES, MD4 or MD5 ([10], [11], <ref> [7] </ref>) (see section 4.6), * represents the exclusive-or operation. The advantages and security features of this protocol are described in [2, 3]. It achieves mutual authentication of two communicating entities. <p> Currently several implementations of this module exist. One is based on DES <ref> [7] </ref> used in Cipher Block Chaining (CBC) mode. The other two are based on one-way hash functions: MD4 and MD5 [10, 11]. Both MD4 and MD5 had to be slightly augmented to support the use of a key as a secret secret and/or suffix as described in [16]). <p> This issue must, of course, be addressed in the course of separating AS and PDB functions (e.g., AS accesses PDB via RPC). 5.2 Encryption/Signature Methods and Key Length All encryption/integrity operations in KryptoKnight are currently carried out using a single method: MD4/MD5 with secret prefix and/or suffix [16] or DES <ref> [7] </ref>. This is not an inherent requirement. There are three distinct tasks requiring encryption and/or integrity services: 1. Key distribution to principals via ticket tokens.
Reference: [8] <author> T. Lomas, L. Gong, J. Saltzer, R. Needham, </author> <title> Reducing Risks from Poorly Chosen Keys, </title> <booktitle> Proceedings of ACM Symposium on Operating System Principles, </booktitle> <year> 1989. </year>
Reference: [9] <author> R. Needham and M. Schroeder, </author> <title> Using Encryption for Authentication in Large Networks of Computers, </title> <journal> Communications of the ACM, </journal> <month> December </month> <year> 1978. </year>
Reference-contexts: KryptoKnight provides authentication and key distribution services to applications and communicating entities in a network environment. Unlike Kerberos, which uses protocols based on the well-known Needham-Schroeder <ref> [9] </ref> scheme, KryptoKnight implements a family of novel authentication and key distribution protocols designed with assurance of security with respect to a number of attacks. (The design of the underlying protocols is not treated here; it is addressed in [2], [3] and [4].) From a user's perspective, KryptoKnight provides facilities and
Reference: [10] <author> R. Rivest, </author> <title> The MD4 Message Digest Algorithm, </title> <booktitle> Proceedings of CRYPTO'90, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: Currently several implementations of this module exist. One is based on DES [7] used in Cipher Block Chaining (CBC) mode. The other two are based on one-way hash functions: MD4 and MD5 <ref> [10, 11] </ref>. Both MD4 and MD5 had to be slightly augmented to support the use of a key as a secret secret and/or suffix as described in [16]).
Reference: [11] <author> R. Rivest, </author> <title> The MD5 Message Digest Algorithm, </title> <type> Internet DRAFT, </type> <month> July </month> <year> 1991. </year>
Reference-contexts: M AC ab can be based on DES, MD4 or MD5 ([10], <ref> [11] </ref>, [7]) (see section 4.6), * represents the exclusive-or operation. The advantages and security features of this protocol are described in [2, 3]. It achieves mutual authentication of two communicating entities. <p> Currently several implementations of this module exist. One is based on DES [7] used in Cipher Block Chaining (CBC) mode. The other two are based on one-way hash functions: MD4 and MD5 <ref> [10, 11] </ref>. Both MD4 and MD5 had to be slightly augmented to support the use of a key as a secret secret and/or suffix as described in [16]).
Reference: [12] <author> J. </author> <title> Steiner, The Kerberos Network Authentication Service Overview, MIT Project Athena RFC, </title> <type> Draft 1, </type> <month> April </month> <year> 1989. </year>
Reference-contexts: 1 Introduction The importance of secure communication in today's distributed systems is universally acknowledged. For this reason, much effort has been recently invested into providing security services in a variety of network and operating system environments. One of the best-known efforts is Kerberos <ref> [12, 13] </ref>, a network security service originally developed at MIT and subsequently incorporated into a number of architectures and commercial offerings. In spite of its popularity and widespread acceptance, Kerberos has received its share of criticisms (e.g., [5]).
Reference: [13] <author> J. Steiner, C. Neuman, J. Schiller, </author> <title> Kerberos: An Authentication Service for Open Network Systems, </title> <booktitle> Proceedings of USENIX Winter Conference, </booktitle> <month> February </month> <year> 1988. </year>
Reference-contexts: 1 Introduction The importance of secure communication in today's distributed systems is universally acknowledged. For this reason, much effort has been recently invested into providing security services in a variety of network and operating system environments. One of the best-known efforts is Kerberos <ref> [12, 13] </ref>, a network security service originally developed at MIT and subsequently incorporated into a number of architectures and commercial offerings. In spite of its popularity and widespread acceptance, Kerberos has received its share of criticisms (e.g., [5]). <p> This is an artifact of Kerberos <ref> [13] </ref> and it should be changed as there is no intrinsic requirement for these two keys to be the same.
Reference: [14] <author> J. Linn, </author> <title> Generic Security Service Application Program Interface, Internet Draft, </title> <booktitle> Jun1 1991. </booktitle> <pages> 15 </pages>
Reference-contexts: offers several advantages over Kerberos: * a number of novel features of the underlying protocols described in [2], [3] and [4]. * system design that avoids many of the problems attributed to Kerberos that are described in [5]. * support of a major subset of Generic Security Service API (GSS-API) <ref> [14] </ref>. fl In Proceedings of 1992 European Symposium on Research in Computer Security (ESORICS'92); Toulouse, France. y EURECOM Institute, Sophia Antipolis, 06560 Valbonne, France. molva@eurecom.fr z IBM Research Laboratory, CH-8803 Ruschlikon, Switzerland. fgts,evh,zatg@zurich.ibm.com 1 This paper is organized as follows. <p> and the origin of data messages exchanged. 3 KryptoKnight Protocols The protocols implemented by KryptoKnight perform the following functions: * Authentication: mutual or one-way authentication between the initiator and the responder, between the user and the AS, and between the initiator or the responder and the AS. 1 GSS API <ref> [14] </ref> uses the term security context.
Reference: [15] <author> R. Rivest, A. Shamir and L. Adleman, </author> <title> A Method for Obtaining Digital Signatures and Public Key Cryptosystems, </title> <journal> Communications of the ACM, </journal> <month> February </month> <year> 1978. </year>
Reference-contexts: This service is used by the AS and the PDB manipulation programs (Admin) to hide the contents of principals' keys. It is not necessary for these three tasks to use the same encryption/integrity mechanism. AS, for example, could take advantage of stronger encryption methods such as RSA <ref> [15] </ref>. This should be trivial to implement since the AS would be the only entity using it. The same is true of Item 3. All keys in the current release, including the AS ticket key and the PDB master key, are 64 bits long.
Reference: [16] <author> G. Tsudik, </author> <title> Message Authentication with One-Way Hash Functions, </title> <booktitle> Proceedings of IEEE INFOCOM 1992. </booktitle> <month> May </month> <year> 1992. </year> <month> 16 </month>
Reference-contexts: The other two are based on one-way hash functions: MD4 and MD5 [10, 11]. Both MD4 and MD5 had to be slightly augmented to support the use of a key as a secret secret and/or suffix as described in <ref> [16] </ref>). <p> This issue must, of course, be addressed in the course of separating AS and PDB functions (e.g., AS accesses PDB via RPC). 5.2 Encryption/Signature Methods and Key Length All encryption/integrity operations in KryptoKnight are currently carried out using a single method: MD4/MD5 with secret prefix and/or suffix <ref> [16] </ref> or DES [7]. This is not an inherent requirement. There are three distinct tasks requiring encryption and/or integrity services: 1. Key distribution to principals via ticket tokens.
References-found: 16

