URL: ftp://ftp.cs.washington.edu/tr/1994/12/UW-CSE-94-12-01.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Phone: (206) 685-2094; fax: (206) 543-2969  
Title: Optimization of Object-Oriented Programs Using Static Class Hierarchy Analysis  
Author: Jeffrey Dean, David Grove, and Craig Chambers 
Note: -jdean,grove,chambers-@cs.washington.edu  
Address: Seattle, Washington 98195 USA  
Affiliation: Department of Computer Science and Engineering, FR-35 University of Washington  
Abstract: Technical Report 94-12-01 December 1994 
Abstract-found: 1
Intro-found: 1
Reference: [Agesen et al. 93] <author> Ole Agesen, Jens Palsberg, and Michael I. Schwartzback. </author> <title> Type Inference of SELF: Analysis of Objects with Dynamic and Multiple Inheritance. </title> <booktitle> In Proceedings ECOOP 93, </booktitle> <month> July </month> <year> 1993. </year>
Reference: [Agrawal et al. 91] <author> Rakesh Agrawal, Linda G. DeMichiel, and Bruce G. Lindsay. </author> <title> Static Type Checking of Multi-Methods. </title> <booktitle> In Proceedings OOPSLA 91, </booktitle> <pages> pages 113128, </pages> <month> November </month> <year> 1991. </year> <journal> Published as ACM SIG-PLAN Notices, </journal> <volume> volume 26, number 11. </volume>
Reference-contexts: Overlaps testing for two arbitrary Union sets of size N is O (N 2 ), * but overlaps testing among Cone and Class representations takes only constant time (assuming that testing whether one class can inherit from another takes only constant time <ref> [AK et al. 89, Agrawal et al. 91, Caseau 93] </ref>): for example, Cone (C 1 ) overlaps Cone (C 2 ) iff C 1 inherits from C 2 or vice versa. Overlaps testing of arbitrary Difference sets is complex and can be expensive.
Reference: [AK et al. 89] <author> Hassan At-Kaci, Robert Boyer, Patrick Lincoln, and Roger Nasr. </author> <title> Efficient Implementation of Lattice Operations. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 11(1):115146, </volume> <month> January </month> <year> 1989. </year>
Reference-contexts: Overlaps testing for two arbitrary Union sets of size N is O (N 2 ), * but overlaps testing among Cone and Class representations takes only constant time (assuming that testing whether one class can inherit from another takes only constant time <ref> [AK et al. 89, Agrawal et al. 91, Caseau 93] </ref>): for example, Cone (C 1 ) overlaps Cone (C 2 ) iff C 1 inherits from C 2 or vice versa. Overlaps testing of arbitrary Difference sets is complex and can be expensive.
Reference: [Bobrow et al. 86] <author> Daniel G. Bobrow, Ken Kahn, Gregor Kiczales, Larry Masinter, Mark Stefik, and Frank Zdybel. CommonLoops: </author> <title> Merging Lisp and Object-Oriented Programming. </title> <booktitle> In Proceedings OOPSLA 86, </booktitle> <pages> pages 1729, </pages> <month> November </month> <year> 1986. </year> <journal> Published as ACM SIGPLAN Notices, </journal> <volume> volume 21, number 11. </volume>
Reference-contexts: For example, hybrid languages like C++ [Stroustrup 91], Modula-3 [Nelson 91, Harbison 92], and CLOS <ref> [Bobrow et al. 86, Paepcke 93] </ref> provide non-object-oriented built-in array data structures that are more efficient than would be a typical class-based extensible implementation using dynamically-dispatched 2 Optimization of Object-Oriented Programs Using Static Class Hierarchy Analysis Dean et al. fetch and store operations, Sather [Omohundro 94, Szypersky et al. 93] allows
Reference: [Calder & Grunwald 94] <author> Brad Calder and Dirk Grunwald. </author> <title> Reducing Indirect Function Call Overhead in C++ Programs. </title> <booktitle> In Conference Record of POPL 94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 397408, </pages> <address> Portland, Oregon, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: The profile information representing the expected receiver class distribution of particular messages or call sites can be hard-wired into the compiler [Deutsch & Schiffman 84, Chambers et al. 89], gathered and exploited on-line [Hezle & Ungar 94], and/or gathered off-line and exploited via recompilation <ref> [Garrett et al. 94, Calder & Grunwald 94] </ref>. Method specialization can produce faster specialized versions of a method for particular inheriting subclasses; each specialized version can be optimized for the particular class or classes of the receiver being specialized on.
Reference: [Caseau 93] <author> Yves Caseau. </author> <title> Efficient Handling of Multiple Inheritance Hierarchies. </title> <booktitle> In Proceedings OOPSLA93, </booktitle> <pages> pages 271287, </pages> <month> October </month> <year> 1993. </year> <journal> Published as ACM SIGPLAN Notices, </journal> <volume> volume 28, number 10. </volume>
Reference-contexts: Overlaps testing for two arbitrary Union sets of size N is O (N 2 ), * but overlaps testing among Cone and Class representations takes only constant time (assuming that testing whether one class can inherit from another takes only constant time <ref> [AK et al. 89, Agrawal et al. 91, Caseau 93] </ref>): for example, Cone (C 1 ) overlaps Cone (C 2 ) iff C 1 inherits from C 2 or vice versa. Overlaps testing of arbitrary Difference sets is complex and can be expensive.
Reference: [Chambers & Ungar 89] <author> Craig Chambers and David Ungar. </author> <title> Customization: Optimizing Compiler Technology for Self, </title>
References-found: 7

