URL: http://www.cs.wisc.edu/wpis/papers/fse96.ps
Refering-URL: http://www.cs.wisc.edu/~reps/
Root-URL: 
Email: fsiff, repsg@cs.wisc.edu  
Title: Program Generalization for Software Reuse: From C to C++  
Author: Michael Siff and Thomas Reps 
Address: 1210 West Dayton Street Madison, WI 53706  
Affiliation: University of Wisconsin-Madison  
Abstract: We consider the problem of software generalization: Given a program component C, create a parameterized program component C 0 such that C 0 is usable in a wider variety of syntactic contexts than C. Furthermore, C 0 should be a semantically meaningful generalization of C; namely, there must exist an instantiation of C 0 that is equivalent in functionality to C. In this paper, we present an algorithm that generalizes C functions via type inference. The original functions operate on specific data types; the result of generalization is a collection of C++ function templates that operate on parameterized types. This version of the generalization problem is useful in the context of converting existing C programs to C++. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Caldiera and V. R. Basili. </author> <title> Identifying and analyzing reusable software components. </title> <journal> IEEE Comp., </journal> <volume> 24 </volume> <pages> 61-70, </pages> <year> 1991. </year>
Reference: [2] <author> Luca Cardelli and Peter Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> Computing Surveys, </journal> <volume> 17(4) </volume> <pages> 471-522, </pages> <month> December </month> <year> 1985. </year>
Reference: [3] <author> A. Cimitile and G. Visaggio. </author> <title> Software salvaging and the call dominance tree. </title> <journal> J. Systems Software, </journal> <volume> 28 </volume> <pages> 117-127, </pages> <year> 1995. </year>
Reference: [4] <author> Luis Damas and Robin Milner. </author> <title> Principal type-schemes for functional programs. </title> <booktitle> In Ninth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 207-212, </pages> <month> January </month> <year> 1982. </year>
Reference: [5] <author> F.-J. Grosch and G. Snelting. </author> <title> Polymorphic components for monomorphic languages. </title> <editor> In R. Prieto-Diaz and W.B. Frakes, editors, </editor> <booktitle> Advances in software reuse: Selected papers from the Second International Workshop on Software Reusability, </booktitle> <pages> pages 47-55, </pages> <address> Lucca, Italy, March 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: [6] <author> R. Hindley. </author> <title> The principal type-scheme of an object in combinatory logic. </title> <journal> Trans. AMS, </journal> <volume> 146 </volume> <pages> 29-60, </pages> <year> 1969. </year>
Reference: [7] <author> S. Horwitz, T. Reps, and D. Binkley. </author> <title> Interprocedural slicing using dependence graphs. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(1) </volume> <pages> 26-60, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Member functions would remain essentially the same, except for the types of arguments, local variables, and return values, which would also be determined by type infer ence. 11 The potential for combining program-generalization op-erations with other program-transformation operations, such as program slicing <ref> [18, 13, 7] </ref>, has not escaped our attention. In the scenario we envision, program slicing and generalization would be used in concert to "mine" existing C software for useful components.
Reference: [8] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice Hall, </publisher> <address> second edition, </address> <year> 1988. </year>
Reference: [9] <author> Hafedh Mili, Fatma Mili, and Ali Mili. </author> <title> Reusing software: Issues and research directions. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(6), </volume> <month> June </month> <year> 1995. </year>
Reference: [10] <author> Robin Milner. </author> <title> A theory of type polymorphism in programming. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 17 </volume> <pages> 348-375, </pages> <year> 1978. </year>
Reference: [11] <author> John C. Mitchell. </author> <title> Type systems for programming languages. </title> <booktitle> In Handbook of Theoretical Computer Science, </booktitle> <volume> Volume B, </volume> <pages> pages 365-458. </pages> <publisher> The M.I.T. </publisher> <address> Press/Elsevier, </address> <year> 1990. </year>
Reference: [12] <author> Robert O'Callahan and Daniel Jackson. </author> <title> Detecting shared representations using type inference. </title> <type> Technical Report CMU-CS-95-202, </type> <institution> Carnegie Mellon University, </institution> <month> September </month> <year> 1995. </year>
Reference: [13] <author> K.J. Ottenstein and L.M. Ottenstein. </author> <title> The program dependence graph in a software development environment. </title> <booktitle> In Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 177-184, </pages> <year> 1984. </year>
Reference-contexts: Member functions would remain essentially the same, except for the types of arguments, local variables, and return values, which would also be determined by type infer ence. 11 The potential for combining program-generalization op-erations with other program-transformation operations, such as program slicing <ref> [18, 13, 7] </ref>, has not escaped our attention. In the scenario we envision, program slicing and generalization would be used in concert to "mine" existing C software for useful components.
Reference: [14] <editor> Ruben Prieto-D iaz and William B. Frakes, editors. </editor> <booktitle> Advances in Software Reuse. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1993. </year>
Reference: [15] <author> Geoffrey Smith and Dennis Volpano. </author> <title> Towards an ML-style polymorphic type system for C. </title> <booktitle> In 1996 European Symposium on Programming, </booktitle> <month> April </month> <year> 1996. </year> <note> to appear. </note>
Reference: [16] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference: [17] <author> Mads Tofte. </author> <title> Type inference for polymorphic references. </title> <journal> Information and Computation, </journal> <volume> 89 </volume> <pages> 1-34, </pages> <year> 1990. </year>
Reference: [18] <author> M. Weiser. </author> <title> Program slicing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(4):352-357, </volume> <month> July </month> <year> 1984. </year>
Reference-contexts: Member functions would remain essentially the same, except for the types of arguments, local variables, and return values, which would also be determined by type infer ence. 11 The potential for combining program-generalization op-erations with other program-transformation operations, such as program slicing <ref> [18, 13, 7] </ref>, has not escaped our attention. In the scenario we envision, program slicing and generalization would be used in concert to "mine" existing C software for useful components.
Reference: [19] <author> Mansour Zand and Mansur Samadzadeh. </author> <title> Special issue on software reuse. </title> <journal> J. Systems Software, </journal> <volume> 30(3), </volume> <month> Septem-ber </month> <year> 1995. </year>
Reference: [20] <author> Amy Moorman Zaremski and Jeannette M. Wing. </author> <title> Signature matching: a tool for using software libraries. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <month> April </month> <year> 1995. </year> <month> 12 </month>
References-found: 20

