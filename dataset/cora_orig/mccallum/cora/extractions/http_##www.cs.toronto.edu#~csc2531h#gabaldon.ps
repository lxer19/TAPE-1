URL: http://www.cs.toronto.edu/~csc2531h/gabaldon.ps
Refering-URL: http://www.cs.toronto.edu/~csc2531h/projects.html
Root-URL: http://www.cs.toronto.edu
Title: Rule-Based Warehouse View Maintenance CSC2531F Final Project  
Author: Alfredo Gabaldon 
Date: February 23, 1998  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Chitta Baral, Michael Gelfond, and Alessandro Provetti. </author> <title> Representing actions: Laws, observations and hypotheses. </title> <journal> Journal of Logic Programming, </journal> <volume> 31(1-3):201-243, </volume> <month> April-June </month> <year> 1997. </year>
Reference-contexts: For instance, there is a temporal version of SQL called TSQL [10]. There has also been a lot of work in the area of temporal reasoning in AI. In particular the work by Pinto & Reiter [14] and Baral et. al. <ref> [1] </ref> consider temporal reasoning using logic programming as the underlying logical language. It would be interesting to consider incorporating some of this work. * The above point suggests the next problem: maintenance of temporal views.
Reference: [2] <author> L. Cabibbo and R. Torlone. </author> <title> Querying multidimensional databases. </title> <booktitle> In Proceedings of the 6th DBPL Workshop, </booktitle> <pages> pages 253-269, </pages> <year> 1996. </year>
Reference-contexts: In the area of decision support, practitioners have recognized (e.g. Kimball & Strehlo [11]) that SQL is not entirely adequate for the type of queries used in that area. Indeed, researchers (e.g. Gyssens & Lakshmanan [7], Cabibbo & Torlone <ref> [2] </ref>) have introduced a new conceptual data model which accommodates for the new requirements imposed by OLAP. <p> In response to this, multi-dimensional data models have been recently introduced (e.g., Cabibbo & Torlone <ref> [2] </ref>, Gyssens & Lakshmanan [7], Hacid, Marcel & Rigotti [8]), and vendors have developed OLAP products. In this section we briefly review by examples some of the features of the Datalog extension for the manipulation of multi-dimensional data introduced by Hacid, Marcel & Rigotti's [8].
Reference: [3] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> In Proceedings of the 17th Conference on Very Large Databases (VLDB'91), </booktitle> <address> Barcelona, September 1991. </address> <publisher> Morgan Kaufmann, </publisher> <address> (Los Altos CA). </address>
Reference-contexts: Widom has suggested [15] to use view definitions as the specification from which to automatically derive production rules for view maintenance and change detection. She has suggested a similar approach to that used by Ceri & Widom <ref> [3] </ref> for conventional database view maintenance. They have developed algorithms for automatically deriving active database rules for maintaining views defined with SQL expressions. In the area of decision support, practitioners have recognized (e.g.
Reference: [4] <author> Weidong Chen. </author> <title> Programming with logical queries, bulk updates, and hypothetical reasoning. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 9(4) </volume> <pages> 587-599, </pages> <month> July/August </month> <year> 1997. </year>
Reference-contexts: We discuss some preliminary ideas towards the development of a Datalog-like language for view definition and maintenance and the automatic derivation of maintenance rules. The approach we propose is to take Hacid, Marcel & Rigotti's [8] and Chen's <ref> [4] </ref> extensions of Datalog and develop a language combining their features. The former language extends Datalog to allow multi-dimensional cubes with restructuring operations and aggregation. The latter integrates updates and hypothetical reasoning into the declarative semantics of Datalog. <p> Our intention here is only to get the flavor of the language and thus we will not discuss its formal syntax and semantics. 4 3 A Rule-based language for updates From the available literature on database updates, we find that the work by Chen <ref> [4] </ref> is closest to the style of language we would like to develop. Chen proposed an extension of Datalog where queries and updates are integrated into the declarative semantics of the language. <p> Let us look at some examples from <ref> [4] </ref>. 5 The following is an example using Conjunctions: change (Acct; OldBal; N ewBal) balance (Acct; OldBal) & +balance (Acct; N ewBal): deposit (Acct; Amt) Amt &gt; 0 & balance (Acct; Bal) & change (Acct; Bal; Bal + Amt): withdraw (Acct; Amt) Amt &gt; 0 & balance (Acct; Bal) & Bal
Reference: [5] <author> E.F. Codd, </author> <title> S.B. Codd, and C.T. Salley. Providing OLAP (on-line analytical processing) to user-analysts: An IT mandate. </title> <type> Technical report, </type> <institution> E.F. Codd and Associates, </institution> <year> 1993. </year>
Reference-contexts: 1 Introduction A data warehouse is a large repository of data gathered from multiple, distributed, autonomous, heterogeneous sources. This data is then used in activities such as on-line analytical processing (OLAP) <ref> [5] </ref>, data mining, etc. A data warehousing system works as follows: when data at the sources becomes available, it is translated into the warehouse global scheme and integrated, probably at night or during low usage periods, with the rest of the information at the warehouse.
Reference: [6] <author> J. Gray, A. Bosworth, A. Layman, and J. Pirahesh. </author> <title> Data cube: a relational operator generalizing group-by, </title> <booktitle> cross-tab, and sub-totals. In Proceedings of the 12nd International Conference on Data Engineering (ICDE'96), </booktitle> <pages> pages 152-159, </pages> <address> New Orleans, LO, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: quarter, we must use in to specify region and quarter ranges: sales by Region Quarter (Region; Item; Qtr) : hT i T = sum (sales (City; Item; W eek)); in (City; Region); in (W eek; Quarter): Among other common OLAP operations, it is also possible to express the cube operator <ref> [6] </ref> in this language. Hacid et. al. define a model-theoretic and a fix-point semantics for multi-D Datalog.
Reference: [7] <author> M. Gyssens and Laks V.S. Lakshmanan. </author> <title> A foundation for multi-dimensional databases. </title> <booktitle> In Proceedings of the 22th Conference on Very Large Databases (VLDB'96). </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> (Los Altos CA), </address> <month> September </month> <year> 1996. </year>
Reference-contexts: In the area of decision support, practitioners have recognized (e.g. Kimball & Strehlo [11]) that SQL is not entirely adequate for the type of queries used in that area. Indeed, researchers (e.g. Gyssens & Lakshmanan <ref> [7] </ref>, Cabibbo & Torlone [2]) have introduced a new conceptual data model which accommodates for the new requirements imposed by OLAP. <p> In response to this, multi-dimensional data models have been recently introduced (e.g., Cabibbo & Torlone [2], Gyssens & Lakshmanan <ref> [7] </ref>, Hacid, Marcel & Rigotti [8]), and vendors have developed OLAP products. In this section we briefly review by examples some of the features of the Datalog extension for the manipulation of multi-dimensional data introduced by Hacid, Marcel & Rigotti's [8]. Let us refer to this language as multi-D Datalog.
Reference: [8] <author> Mohand-Said Hacid, Patrick Marcel, and Christophe Rigotti. </author> <title> A rule-based data manipulation language for olap systems. </title> <booktitle> In Proceedings of the 5th International Conference on Deductive and Object-Oriented Databases (DOOD'97), </booktitle> <month> December </month> <year> 1997. </year>
Reference-contexts: We discuss some preliminary ideas towards the development of a Datalog-like language for view definition and maintenance and the automatic derivation of maintenance rules. The approach we propose is to take Hacid, Marcel & Rigotti's <ref> [8] </ref> and Chen's [4] extensions of Datalog and develop a language combining their features. The former language extends Datalog to allow multi-dimensional cubes with restructuring operations and aggregation. The latter integrates updates and hypothetical reasoning into the declarative semantics of Datalog. <p> In response to this, multi-dimensional data models have been recently introduced (e.g., Cabibbo & Torlone [2], Gyssens & Lakshmanan [7], Hacid, Marcel & Rigotti <ref> [8] </ref>), and vendors have developed OLAP products. In this section we briefly review by examples some of the features of the Datalog extension for the manipulation of multi-dimensional data introduced by Hacid, Marcel & Rigotti's [8]. Let us refer to this language as multi-D Datalog. <p> recently introduced (e.g., Cabibbo & Torlone [2], Gyssens & Lakshmanan [7], Hacid, Marcel & Rigotti <ref> [8] </ref>), and vendors have developed OLAP products. In this section we briefly review by examples some of the features of the Datalog extension for the manipulation of multi-dimensional data introduced by Hacid, Marcel & Rigotti's [8]. Let us refer to this language as multi-D Datalog. <p> Intuitively, we can think of Datalog as the subset of multi-D Datalog where the content of a cell is always empty. Let us use a retail example similar to the examples in <ref> [8] </ref> to illustrate the features of multi-D Datalog. We will use the Datalog convention of variables starting with an upper case letter and constants with a lower case letter.
Reference: [9] <author> J. Hammer, H. Garcia-Molina, J. Widom, W. Labio, and Y. Zhuge. </author> <title> The Stanford data warehousing project. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 18(2) </volume> <pages> 41-48, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Specifications would then be compiled into a set of rules for the rule-based integration engine <ref> [9] </ref>. From an abstract point of view, a warehouse can be seen as a set of materialized views in terms of the source data. Widom has suggested [15] to use view definitions as the specification from which to automatically derive production rules for view maintenance and change detection.
Reference: [10] <author> C. S. Jensen, R. T. Snodgrass, and M. D. Soo. </author> <title> The TSQL2 data model. </title> <editor> In R. T. Snodgrass, editor, </editor> <title> The TSQL2 Temporal Query Language, </title> <booktitle> chapter 10, </booktitle> <pages> pages 157-240. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: This could be useful if the warehouse uses, for example, web pages as source databases. * Extend warehouse views with a temporal feature. There has been considerable work in temporal databases [13]. For instance, there is a temporal version of SQL called TSQL <ref> [10] </ref>. There has also been a lot of work in the area of temporal reasoning in AI. In particular the work by Pinto & Reiter [14] and Baral et. al. [1] consider temporal reasoning using logic programming as the underlying logical language.
Reference: [11] <author> R. Kimball and K. Strehlo. </author> <title> Why decision support fails and how to fix it. </title> <booktitle> SIGMOD Record (ACM Special Interest Group on Management of Data), </booktitle> <volume> 24(3): </volume> , <month> September </month> <year> 1995. </year>
Reference-contexts: She has suggested a similar approach to that used by Ceri & Widom [3] for conventional database view maintenance. They have developed algorithms for automatically deriving active database rules for maintaining views defined with SQL expressions. In the area of decision support, practitioners have recognized (e.g. Kimball & Strehlo <ref> [11] </ref>) that SQL is not entirely adequate for the type of queries used in that area. Indeed, researchers (e.g. Gyssens & Lakshmanan [7], Cabibbo & Torlone [2]) have introduced a new conceptual data model which accommodates for the new requirements imposed by OLAP.
Reference: [12] <author> Inderpal Singh Mumick, Dallan Quass, and Barinderpal Singh Mumick. </author> <title> Maintenance of data cubes and summary tables in a warehouse. </title> <booktitle> SIGMOD Record (ACM Special Interest Group on Management of Data), </booktitle> <volume> 26(2): </volume> , <year> 1997. </year>
Reference-contexts: The former language extends Datalog to allow multi-dimensional cubes with restructuring operations and aggregation. The latter integrates updates and hypothetical reasoning into the declarative semantics of Datalog. We also discuss, by means of an example, rules for maintenance using I.S. Mumick, D. Quass & B.S. Mumick's <ref> [12] </ref> summary-delta table method developed for the maintenance of cubes and tables with aggregation. <p> A view is self-maintainable if it can be updated using only the changes to the base relations, transmitted to the warehouse by the wrapper/monitor, and the relations stored at the warehouse. I.S. Mumick, D.Quass & B.S. Mumick <ref> [12] </ref> have recently proposed a method for the incremental maintenance of summary tables, that is, materialized views with aggregation. They consider the maintenance of multiple summary tables with batch updates and also self-maintenance of summary tables. <p> We will not, however, consider using the name constructor operator "". Insertions and deletions are allowed only to materialized warehouse views and are expressed as in update-Datalog with + and in front of view atoms. Consider the following view adapted from an SQL view from <ref> [12] </ref>: 8 sales SC (City; Category) : hEarliestSale; T C; T Qi T C = COUNT (pos (City; Item)); T Q = SUM (posQty (City; Item; Date)); EarliestSale = MIN (posDate (City; Item; Qty)); In (Item; Category): where pos is a source table of the form: pos (city; item) : hdate;
Reference: [13] <author> G. Ozsoyoglu and R. Snodgrass. </author> <title> Temporal and real-time databases: A survey. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 7(4), </volume> <month> August </month> <year> 1995. </year> <month> 13 </month>
Reference-contexts: This could be useful if the warehouse uses, for example, web pages as source databases. * Extend warehouse views with a temporal feature. There has been considerable work in temporal databases <ref> [13] </ref>. For instance, there is a temporal version of SQL called TSQL [10]. There has also been a lot of work in the area of temporal reasoning in AI.
Reference: [14] <author> Javier Pinto and Raymond Reiter. </author> <title> Temporal reasoning in logic programming: A case for the situation calculus. </title> <editor> In David S. Warren, editor, </editor> <booktitle> Proceedings of the Tenth International Conference on Logic Programming, </booktitle> <pages> pages 203-221, </pages> <address> Budapest, Hungary, 1993. </address> <publisher> The MIT Press. </publisher>
Reference-contexts: There has been considerable work in temporal databases [13]. For instance, there is a temporal version of SQL called TSQL [10]. There has also been a lot of work in the area of temporal reasoning in AI. In particular the work by Pinto & Reiter <ref> [14] </ref> and Baral et. al. [1] consider temporal reasoning using logic programming as the underlying logical language. It would be interesting to consider incorporating some of this work. * The above point suggests the next problem: maintenance of temporal views.
Reference: [15] <author> J. Widom. </author> <title> Research problems in data warehousing. </title> <booktitle> In Proceedings of the 4th Int'l Conference on Information and Knowledge Management (CIKM), </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: Specifications would then be compiled into a set of rules for the rule-based integration engine [9]. From an abstract point of view, a warehouse can be seen as a set of materialized views in terms of the source data. Widom has suggested <ref> [15] </ref> to use view definitions as the specification from which to automatically derive production rules for view maintenance and change detection. She has suggested a similar approach to that used by Ceri & Widom [3] for conventional database view maintenance.
Reference: [16] <author> J. Yang and J. Widom. </author> <title> Maintaining temporal views over non-historical information sources for data warehousing. </title> <booktitle> In Proc. 4th International Conference on Data Engineering (ICDE'98), </booktitle> <year> 1998. </year> <month> 14 </month>
Reference-contexts: It would be interesting to consider incorporating some of this work. * The above point suggests the next problem: maintenance of temporal views. Relevant work here is that of Yang & Widom <ref> [16] </ref>, who present an algorithm for the incremental maintenance of temporal views which are defined in terms of non-historical database sources. 12
References-found: 16

