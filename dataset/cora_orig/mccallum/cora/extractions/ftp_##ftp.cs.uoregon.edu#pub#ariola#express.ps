URL: ftp://ftp.cs.uoregon.edu/pub/ariola/express.ps
Refering-URL: http://www.cs.uoregon.edu/~ariola/publications.html
Root-URL: http://www.cs.uoregon.edu
Email: ariola@cs.uoregon.edu  jwk@cs.vu.nl  det@informatik.uni-bremen.de  
Title: Bisimilarity in Term Graph Rewriting  
Author: Zena M. Ariola Jan Willem Klop Detlef Plump 
Address: 97401, USA  Postbus 9010, 6500 GL Nijmegen, The Netherlands  Postfach 33 04 40, 28334 Bremen, Germany  
Affiliation: Computer and Information Science Department, University of Oregon, Eugene, Oregon  Department of Mathematics and Computer Science, Vrije Universiteit, 1081 HV Amsterdam, The Netherlands, and Computing Science Institute, Katholieke Universiteit Nijmegen,  Fachbereich Mathematik und Informatik, Universitat Bremen,  
Abstract: fl This paper is a revised and extended version of [AKP97]. y Part of the research of this author was performed while he was on leave at CWI, Amsterdam, by a grant of the HCM network EXPRESS. 
Abstract-found: 1
Intro-found: 1
Reference: [AK96] <author> Zena M. Ariola and Jan Willem Klop. </author> <title> Equational term graph rewriting. </title> <journal> Fundamenta Informaticae, </journal> <volume> 26 </volume> <pages> 207-240, </pages> <year> 1996. </year> <month> 30 </month>
Reference-contexts: The reason is that sharing common subexpressions excludes certain rewrite sequences. In this paper, we consider acyclic term graph rewriting according to the approach of [Plu93b, Plu98]. The definition of rewrite steps in this setting is|as far as acyclic term graphs are concerned|equivalent to the corresponding definitions in <ref> [BvEG + 87, KKSdV94, AK96] </ref>. We remark, however, that this equivalence fails for cyclic graphs. In particular, a "collapsing" term rewrite rule like id (x) ! x yields, when applied to certain cyclic graphs, different results in the mentioned approaches (see [KKSdV94] and [CD97]). <p> As it turned out, the notion applies directly and elegantly to term graphs, in order to give an equivalent formulation of "tree equivalence", that is, identity of the possibly infinite trees arising after unwinding possibly cyclic term graphs (see <ref> [AK96] </ref>). Bisimilarity and bisimulations are in the term graph setting much simpler than in process algebra, and our present setting of acyclic term graphs is even more simple, enabling us to define bisimilarity directly without mentioning the notion of bisimulation.
Reference: [AKP97] <author> Zena M. Ariola, Jan Willem Klop, and Detlef Plump. </author> <title> Confluent rewriting of bisimilar term graphs. </title> <booktitle> In Proc. Fourth Workshop on Expressiveness in Concurrency, volume 7 of Electronic Notes in Theoretical Computer Science. </booktitle> <publisher> Elsevier, </publisher> <year> 1997. </year>
Reference: [AS85] <author> Harold Abelson and Gerald Jay Sussman. </author> <title> Structure and Interpretation of Computer Programs. </title> <publisher> The MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: example is the specification of the Fibonacci function: fib (0) ! 0 fib (s (s (x))) ! fib (s (x)) + fib (x) Using these three rules, evaluating a term of the form fib (s n (0)) by term rewriting requires a number of rewrite steps exponential in n (see <ref> [AS85] </ref>). 13 One easily observes that the same number of steps is needed for plain term graph rewriting. After replacing ) by ) coll , however, it is possible to evaluate fib (s n (0)) in a linear number of steps.
Reference: [BN98] <author> Franz Baader and Tobias Nipkow. </author> <title> Term Rewriting and All That. </title> <publisher> Cambridge University Press, </publisher> <year> 1998. </year>
Reference-contexts: A set R of term rewrite rules is a term rewriting system. We assume that the reader is familiar with basic concepts of term rewriting. (For an introduction, see the textbook <ref> [BN98] </ref> or one of the surveys [DJ90, Klo92].) For the following we fix an arbitrary term rewiting system R. The term rewrite relation associated with R is denoted by !, its transitive closure by ! + , and its reflexive-transitive closure by ! fl . <p> For it is well known that orthogonality implies confluence of term rewriting (see for example <ref> [BN98] </ref>). An analogue to Corollary 7.4 for the case of ) coll can be obtained by replacing the condition of left-linearity with normalization of ) coll . Theorem 7.5 ([Plu93a]) Suppose that ) coll is normalizing. Then ) coll is confluent if and only if ! is confluent.
Reference: [BvEG + 87] <author> Hendrik Barendregt, Marko van Eekelen, John Glauert, Richard Kennaway, Rinus Plasmeijer, and Ronan Sleep. </author> <title> Term graph rewriting. </title> <booktitle> In Proc. Parallel Architectures and Languages Europe, volume 259 of Lecture Notes in Computer Science, </booktitle> <pages> pages 141-158. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: The reason is that sharing common subexpressions excludes certain rewrite sequences. In this paper, we consider acyclic term graph rewriting according to the approach of [Plu93b, Plu98]. The definition of rewrite steps in this setting is|as far as acyclic term graphs are concerned|equivalent to the corresponding definitions in <ref> [BvEG + 87, KKSdV94, AK96] </ref>. We remark, however, that this equivalence fails for cyclic graphs. In particular, a "collapsing" term rewrite rule like id (x) ! x yields, when applied to certain cyclic graphs, different results in the mentioned approaches (see [KKSdV94] and [CD97]). <p> Instead of using hypergraphs, term graphs can alternatively be defined as directed acyclic graphs consisting of a set of labelled nodes together with a successor function from nodes to strings of nodes (see for example <ref> [BvEG + 87, KKSdV94] </ref>). That kind of definition is equivalent to the present one since every term graph defined in that way can easily be transformed into a hypergraph conforming to Definition 2.1, and vice versa. <p> Term graph rewriting is sound with respect to term rewriting in the following sense. Theorem 3.5 (Soundness <ref> [BvEG + 87, HP88] </ref>) For all term graphs G and H, G ) H implies term (G) ! + term (H): In the sequel we consider not only term graph rewriting by ) but also extensions with collapsing and copying. <p> The development is complete if has no residuals in H. This following result was given in <ref> [BvEG + 87] </ref>, without proof. Theorem 5.7 (Uniqueness of developments) Given a set of redexes in a term graph G, all complete developments of end in the same term graph. Proof. Consider two complete developments G ) fl H 1 and G ) fl H 2 of .
Reference: [CD97] <author> Andrea Corradini and Frank Drewes. </author> <title> (Cyclic) term graph rewriting is adequate for rational parallel term rewriting. </title> <type> Technical Report TR-97-14, </type> <institution> Universita di Pisa, Dipartimento di Informatica, </institution> <year> 1997. </year>
Reference-contexts: We remark, however, that this equivalence fails for cyclic graphs. In particular, a "collapsing" term rewrite rule like id (x) ! x yields, when applied to certain cyclic graphs, different results in the mentioned approaches (see [KKSdV94] and <ref> [CD97] </ref>). We are mainly interested, in this paper, in confluence properties of term graph rewriting. We will address not only rewriting by applications of term rewrite rules, but also extensions with the operations of collapsing and copying, and with both operations together.
Reference: [DJ90] <author> Nachum Dershowitz and Jean-Pierre Jouannaud. </author> <title> Rewrite systems. </title> <editor> In Jan van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B, chapter 6, </booktitle> <pages> pages 244-320. </pages> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: A set R of term rewrite rules is a term rewriting system. We assume that the reader is familiar with basic concepts of term rewriting. (For an introduction, see the textbook [BN98] or one of the surveys <ref> [DJ90, Klo92] </ref>.) For the following we fix an arbitrary term rewiting system R. The term rewrite relation associated with R is denoted by !, its transitive closure by ! + , and its reflexive-transitive closure by ! fl .
Reference: [HL91] <author> Gerard Huet and Jean-Jacques Levy. </author> <title> Computations in orthogonal rewrite systems, I and II. </title> <editor> In Jean-Louis Lassez and Gordon Plotkin, editors, </editor> <booktitle> Computational Logic: Essays in Honor of Alan Robinson, </booktitle> <pages> pages 395-443. </pages> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: Since for orthogonal term rewriting systems, all complete developments of a set of redexes yield the same result <ref> [HL91] </ref>, term (G) = term (H) implies term (Cpl (G)) = term (Cpl (H)). 2 It is worth mentioning that this lemma does not hold for non-overlapping systems.
Reference: [HP88] <author> Berthold Hoffmann and Detlef Plump. </author> <title> Jungle evaluation for efficient term rewriting. </title> <booktitle> In Proc. Algebraic and Logic Programming. Mathematical Research 49, </booktitle> <pages> pages 191-203, </pages> <address> Berlin, </address> <year> 1988. </year> <note> Akademie-Verlag. Also in Springer Lecture Notes in Computer Science 343, 191-203, </note> <year> 1989. </year>
Reference-contexts: Term graph rewriting is sound with respect to term rewriting in the following sense. Theorem 3.5 (Soundness <ref> [BvEG + 87, HP88] </ref>) For all term graphs G and H, G ) H implies term (G) ! + term (H): In the sequel we consider not only term graph rewriting by ) but also extensions with collapsing and copying.
Reference: [HP96] <author> Annegret Habel and Detlef Plump. </author> <title> Term graph narrowing. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 6 </volume> <pages> 649-676, </pages> <year> 1996. </year> <month> 31 </month>
Reference-contexts: Lemma 7.6 If R is left-linear, then ) coll is normalizing if and only if ) is normalizing. 26 Proof. "If": Left-linearity implies that for every normal form N with respect to ), ON is a normal form with respect to ) coll . "Only if": In <ref> [HP96] </ref> it is shown that every derivation G ) fl coll H can be transformed into a "minimally collapsing" derivation G ) fl coll H 0 such that H 0 - H. If R is left-linear, this implies G ) fl H 0 .
Reference: [Hue80] <author> Gerard Huet. </author> <title> Confluent reductions: Abstract properties and applications to term rewriting systems. </title> <journal> Journal of the ACM, </journal> <volume> 27(4) </volume> <pages> 797-821, </pages> <year> 1980. </year>
Reference-contexts: While confluence implies uniqueness of normal forms, confluence modulo bisimilarity implies uniqueness of normal forms up to bisimilarity. From Definition 4.1 it is clear that "Church-Rosser modulo ~" implies "confluent modulo ~". The following lemma is a specialization of a lemma of Huet <ref> [Hue80] </ref> to the term graph setting. Lemma 4.2 A normalizing relation V on term graphs is Church-Rosser modulo bisimilarity if and only if it is confluent modulo bisimilarity. For plain term graph rewriting, the Church-Rosser property modulo bisim ilarity is strictly stronger than confluence modulo bisimilarity. <p> Moreover, the examples show that none of the four relations ), ) coll , ) copy and ) bi is confluent modulo bisimilarity for non-overlapping systems in general. Example 5.9 Consider the following non-overlapping system of Huet <ref> [Hue80] </ref>: f (x; x) ! a c ! g (c) normal forms with respect to ) coll , so ) coll and ) bi are neither confluent nor confluent modulo bisimilarity. Note that in the left-hand sides of the first two rewrite rules, the variable x occurs twice.
Reference: [KKSdV94] <author> Richard Kennaway, Jan Willem Klop, Ronan Sleep, and Fer-Jan de Vries. </author> <title> On the adequacy of graph rewriting for simulating term rewriting. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(3) </volume> <pages> 493-523, </pages> <year> 1994. </year>
Reference-contexts: The reason is that sharing common subexpressions excludes certain rewrite sequences. In this paper, we consider acyclic term graph rewriting according to the approach of [Plu93b, Plu98]. The definition of rewrite steps in this setting is|as far as acyclic term graphs are concerned|equivalent to the corresponding definitions in <ref> [BvEG + 87, KKSdV94, AK96] </ref>. We remark, however, that this equivalence fails for cyclic graphs. In particular, a "collapsing" term rewrite rule like id (x) ! x yields, when applied to certain cyclic graphs, different results in the mentioned approaches (see [KKSdV94] and [CD97]). <p> We remark, however, that this equivalence fails for cyclic graphs. In particular, a "collapsing" term rewrite rule like id (x) ! x yields, when applied to certain cyclic graphs, different results in the mentioned approaches (see <ref> [KKSdV94] </ref> and [CD97]). We are mainly interested, in this paper, in confluence properties of term graph rewriting. We will address not only rewriting by applications of term rewrite rules, but also extensions with the operations of collapsing and copying, and with both operations together. <p> Instead of using hypergraphs, term graphs can alternatively be defined as directed acyclic graphs consisting of a set of labelled nodes together with a successor function from nodes to strings of nodes (see for example <ref> [BvEG + 87, KKSdV94] </ref>). That kind of definition is equivalent to the present one since every term graph defined in that way can easily be transformed into a hypergraph conforming to Definition 2.1, and vice versa. <p> Proof. Given a complete development T ) fl Cpl (T ) of all redexes in a term graph T , there is a corresponding complete development term (T ) ! fl term (Cpl (T )) of all redexes in term (T ) (see <ref> [KKSdV94] </ref> for a proof in a slightly different technical setting).
Reference: [Klo92] <author> Jan Willem Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, Dov M. Gabbay, and T.S.E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 2, </volume> <pages> pages 1-116. </pages> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: A set R of term rewrite rules is a term rewriting system. We assume that the reader is familiar with basic concepts of term rewriting. (For an introduction, see the textbook [BN98] or one of the surveys <ref> [DJ90, Klo92] </ref>.) For the following we fix an arbitrary term rewiting system R. The term rewrite relation associated with R is denoted by !, its transitive closure by ! + , and its reflexive-transitive closure by ! fl . <p> It is well known that subcom-mutativity implies confluence (for arbitrary binary relations; see <ref> [Klo92] </ref>). Corollary 5.3 If R is non-overlapping, then ) is subcommutative. For the rest of this section we assume that R is an arbitrary non-overlapping system. The following property of subcommutative relations will be needed in showing that the full substitution strategy is cofinal. <p> The process of repeatedly developing all redexes is called the full substitution or Gross-Knuth strategy in the context of term rewriting systems (see <ref> [Klo92] </ref>). We show that this strategy is"cofinal" for term graph rewriting over non-overlapping systems. Theorem 5.8 (Cofinality) For all term graphs G and H, G ) fl H implies that there is n 0 such that H ) fl Cpl n (G). Proof.
Reference: [KR98] <author> Madala R.K. Krishna Rao. </author> <title> Modular aspects of term graph rewriting. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 208(1-2):59-86, </address> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: Finally, proving confluence of term graph rewriting can be facilitated by combination results. For example, it is known for ) coll that confluence together with termination is preserved by the disjoint union of two term rewriting systems. A summary of combination results for ) coll is given in <ref> [KR98] </ref>. Acknowledgment We wish to thank the anonymous referees for their useful comments.
Reference: [Plu93a] <author> Detlef Plump. </author> <title> Collapsed tree rewriting: Completeness, confluence, and modularity. </title> <booktitle> In Proc. Conditional Term Rewriting Systems, volume 656 of Lecture Notes in Computer Science, </booktitle> <pages> pages 97-112. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: That kind of definition is equivalent to the present one since every term graph defined in that way can easily be transformed into a hypergraph conforming to Definition 2.1, and vice versa. In this paper we use the hypergraph framework in order to be consistent with <ref> [Plu93a, Plu93b] </ref>. A term over and X is a variable, a constant, or a string f (t 1 ; : : : ; t n ), where f is a function symbol of arity n 1 and t 1 ; : : : ; t n are terms. <p> In these examples, ) is not even confluent modulo bisimilarity. Moreover, nor malization of ) cannot be replaced by normalization of !. We demonstrate this by a counterexample from <ref> [Plu93a] </ref>. Example 7.8 Suppose that R consists of the following rules: f (x) ! g (x; x) g (a; b) ! c Using structural induction on terms, it is easy to verify that every term has a unique normal form. Hence ! is normalizing and confluent.
Reference: [Plu93b] <author> Detlef Plump. </author> <title> Evaluation of functional expressions by hyper-graph rewriting. </title> <type> Dissertation, </type> <institution> Universitat Bremen, Fachbereich Mathematik und Informatik, </institution> <year> 1993. </year>
Reference-contexts: Although term graph rewriting is closely related to term rewriting, the two models differ with respect to important properties like termination and confluence. The reason is that sharing common subexpressions excludes certain rewrite sequences. In this paper, we consider acyclic term graph rewriting according to the approach of <ref> [Plu93b, Plu98] </ref>. The definition of rewrite steps in this setting is|as far as acyclic term graphs are concerned|equivalent to the corresponding definitions in [BvEG + 87, KKSdV94, AK96]. We remark, however, that this equivalence fails for cyclic graphs. <p> That kind of definition is equivalent to the present one since every term graph defined in that way can easily be transformed into a hypergraph conforming to Definition 2.1, and vice versa. In this paper we use the hypergraph framework in order to be consistent with <ref> [Plu93a, Plu93b] </ref>. A term over and X is a variable, a constant, or a string f (t 1 ; : : : ; t n ), where f is a function symbol of arity n 1 and t 1 ; : : : ; t n are terms. <p> For example, the middle graph in Figure 1 is fully collapsed. The following is shown in <ref> [Plu93b] </ref>. <p> Proof. A proof is already given in [Sta80], in a slightly different technical framework. A proof conforming to the present setting can be found in <ref> [Plu93b] </ref>, as part of the proof of the so-called Critical Pair Lemma. 2 Call the relation ) subcommutative if whenever G 1 ( G ) G 2 , there is a term graph G 3 such that G 1 ) G 3 ( G 2 . <p> Finally, we give sufficient conditions under which confluence of term rewriting makes ) Church-Rosser modulo bisimilarity. We first show that term graph rewriting with collapsing and copying can simulate term rewriting, following the proof of the so-called Completeness Theorem in <ref> [Plu93b] </ref>.
Reference: [Plu94] <author> Detlef Plump. </author> <title> Critical pairs in term graph rewriting. </title> <booktitle> In Proc. Mathematical Foundations of Computer Science 1994, volume 841 of Lecture Notes in Computer Science, </booktitle> <pages> pages 556-566. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Exponents refer to the corresponding results and counterexamples. The conditions for confluence considered in this paper either forbid overlaps between term rewrite rules or require confluence of the associated term rewrite relation. Another tool for analyzing confluence are critical pairs of term graph rewrite steps. We refer to <ref> [Plu94] </ref> for their definition and their use to decide confluence of ) coll in the presence of termination. Finally, proving confluence of term graph rewriting can be facilitated by combination results.
Reference: [Plu98] <author> Detlef Plump. </author> <title> Term graph rewriting. </title> <editor> In H. Ehrig, G. Engels, H.-J. Kreowski, and G. Rozenberg, editors, </editor> <title> Handbook of Graph Grammars and Computing by Graph Transformation, volume 2. </title> <publisher> World Scientific, </publisher> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: Although term graph rewriting is closely related to term rewriting, the two models differ with respect to important properties like termination and confluence. The reason is that sharing common subexpressions excludes certain rewrite sequences. In this paper, we consider acyclic term graph rewriting according to the approach of <ref> [Plu93b, Plu98] </ref>. The definition of rewrite steps in this setting is|as far as acyclic term graphs are concerned|equivalent to the corresponding definitions in [BvEG + 87, KKSdV94, AK96]. We remark, however, that this equivalence fails for cyclic graphs. <p> Standard term graphs can be constructed by a canonical numbering of nodes, similar to the numbering of positions in terms. Details are in <ref> [Plu98] </ref>. Definition 2.3 (Collapsing and copying) Given two term graphs G and H, G collapses to H if there is a graph morphism G ! H mapping root G to root H . This is denoted by G - H or, if the morphism is non-injective, by G H. <p> In contrast, ), ) coll and ) copy are terminating whenever the term rewrite relation ! is terminating. Apart from non-termination, the search space for computing a term normal form by ) bi may be much larger than for ) or ) coll . (See <ref> [Plu98] </ref> for conditions under which ) coll suffices to compute term normal forms.) Corollary 7.2 The relation ) bi is confluent if and only if ! is confluent.

References-found: 18

