URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1143/CS-TR-93-1143.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1143/
Root-URL: http://www.cs.wisc.edu
Email: adams@cs.wisc.edu  solomon@cs.wisc.edu  
Title: An Overview of the CAPITL Software Development Environment  
Author: Paul Adams and Marvin Solomon 
Abstract: The CAPITL programming environment is comprised of a shared, object-oriented, versioned database, an embedded logic-based data-manipulation language, and a graphical user interface. With each software object the database stores a rich set of attributes that describe its syntax, intended semantics, and relationship to other objects. CAPITL is implemented in POL, a data model and deductive query language with elements of persistent, object-oriented and logic-based programming languages. POL is implemented in and tightly coupled with C++. A request for a derived object consists of a partial description of its attributes. A planner written in POL searches the database for tools and sources that can be combined to create an object meeting the description. Since tools are stored in the database like other objects, plans that create tools as well as intermediate inputs are possible. A builder, also written in POL, executes plans to materialize software products. The builder verifies that existing objects are current, minimally re-applying tools as sources, tools, or system descriptions change. After an overview of the database and the POL programming system, we outline CAPITL's logic-based approach to system modelling, illustrating it with two examples. We conclude with a status report and an outline of future directions. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. At-Kaci and R. Nasr, </author> <title> LOGIN: A Logic Programming Language with Built-In Inheritance, </title> <journal> Journal of Logic Programming, </journal> <month> Mar. </month> <year> 1986, </year> <pages> 181-215. </pages>
Reference-contexts: Since Congress is implemented as a library of classes, any C++ program can use Congress as a higher level alternative to or enhancement of the raw C++ term interface. As a logic-programming language, Congress is a dialect of LOGIN <ref> [1] </ref>, an extension of Prolog that supports cyclic terms. It provides transparent persistence, and has an identity-based rather than value-based semantics. The following paragraphs briefly describe the syntax and semantics of Congress. The reader who is familiar with logic programming may skim this section. <p> Adams and Solomon CAPITL Page 5 The heart of this process is the definition of matching between terms, called unification. 3 Congress uses a variant of unification that supports cyclic terms <ref> [1] </ref>. The goal of unification is to determine if two terms are isomorphic, or can be made isomorphic by substituting terms for variables. Two terms unify if their roots match (have the same functor) and corresponding successors (recursively) unify. <p> As explained in 2.2, the first level of the hierarchy separates nodes into leaf nodes (which are further classified as integers, byte strings, etc.) and internal nodes, which hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 5 It also has a rather subtle effect on the definition of unification. See the LOGIN paper <ref> [1] </ref> for details. Adams and Solomon CAPITL Page 7 contain pointers to other nodes. Among internal nodes, CAPITL further designates some as object nodes, which are guaranteed to have certain selectors.
Reference: [2] <author> P. Adams and M. Solomon, POL: </author> <title> Persistent Objects with Logic, </title> <note> Submitted for publication. </note>
Reference-contexts: CAPITL's browser can navigate the version history of the database and the links between objects. It also provides facilities for the display and manual update of objects. Most of the features of CAPITL are implemented in POL <ref> [2] </ref>, a data model and deductive query language synthesized from elements of persistent, object-oriented, and logic-based programming languages. POL is tightly integrated with the database (all database objects are POL terms) and with a general-purpose host language (C++). <p> Class Integer is a subclass of Term with an IntVal () method that returns its integer value, and so on. Documentation for this interface is currently being written <ref> [2] </ref>. 3.3.1. Browser An interactive browsing interface has been written on top of the X Window System using the InterViews [17] toolkit.
Reference: [3] <author> M. Carey, D. DeWitt, G. Graefe, D. Haight, J. Richardson, D. Schuh, E. Shekita and S. Van-denberg, </author> <title> The EXODUS Extensible DBMS Project: An Overview, in Readings in Object-Oriented Databases, </title> <editor> S. Zdonik and D. Maier (ed.), Morgan-Kaufman, </editor> <year> 1990. </year>
Reference-contexts: POL is tightly integrated with the database (all database objects are POL terms) and with a general-purpose host language (C++). The database uses the Exodus toolkit <ref> [3] </ref> to provide low-level con-currency control, error recovery, and network access. POL includes a logic-based programming language called Congress, which also servers as a query and update language. CAPITL uses Congress as the basis for a tool that automatically builds and maintains derived objects. <p> C++ subclass derivation is used to add additional behavior and restrictions to classes of internal nodes. We shall return to this point in Section 3. 2.3. Exodus Exodus <ref> [3] </ref> is a toolkit for creating custom database systems. POL uses two components of Exodus, a low-level storage subsystem and a persistent programming language. The Exodus Storage Manager provides efficient access to an arbitrary-sized persistent chunk of uninterpreted data called a storage object through a unique identifier called an OID.
Reference: [4] <author> G. Clemm and L. Osterweil, </author> <title> A Mechanism for Environment Integration, </title> <journal> ACM Trans. Prog. Lang. and Systems 12, </journal> <month> 1 (Jan. </month> <year> 1990), </year> <pages> 1-25. </pages>
Reference-contexts: The ability to use existing Makefiles is convenient, but such files contain a static description of the system, and maintaining that description becomes more and more difficult as the system grows larger. Like DSEE, Shape relies on an external tool for checking that a configuration is consistent. Odin. Odin <ref> [4] </ref> is a system for integrating existing tools into a single environment. Tools are described declaratively and then linked into a derivation graph that summarizes all the type correct derivations possible given the current set of tools.
Reference: [5] <author> J. R. Driscol, N. Sarnak, D. D. Sleator and Targan, </author> <title> Making Data Structures Persistent, </title> <journal> Journal of Computer and System Sciences 38, </journal> <month> 1 (Feb. </month> <year> 1989), </year> <pages> 86-124. </pages> <note> Adams and Solomon CAPITL Page 24 </note>
Reference-contexts: In this way POL differs from value-based Prolog and relational databases, and more closely resembles so-called object-oriented databases. POL supports multiple versions of the term space called worlds, and uses an algorithm devised by Driscol et. al. <ref> [5] </ref> that supports efficient checkpointing of the entire term space. POL has operations to save the current term space as a world, and to reset its state to any previously saved world.
Reference: [6] <author> J. Estublier, S. Ghoul and S. Krakowiak, </author> <title> Preliminary Experience with a Configuration Control System, </title> <booktitle> Proceedings of the Software Eng. Notes/SIGPLAN Notices Software Eng. Symposium on Practical Software Development Environments, </booktitle> <month> Apr. </month> <year> 1984, </year> <pages> 149-156. </pages>
Reference: [7] <author> J. Estublier, </author> <title> A Configuration Manager: The ADELE Database of Programs, </title> <booktitle> Proceedings of the Workshop on Software Engineering Environments for Programming-in-the-Large, </booktitle> <address> Harwichport, MA, </address> <month> June </month> <year> 1985, </year> <pages> 140-147. </pages>
Reference: [8] <author> J. Estublier, </author> <title> Configuration Management: The Notion and the Tools, </title> <booktitle> Proceedings of the International Workshop on Software Version and Configuration Control, </booktitle> <address> Grassau, </address> <publisher> W. </publisher> <address> Germany, </address> <month> Jan. </month> <pages> 27-29, </pages> <year> 1988, </year> <pages> 38-61. </pages>
Reference-contexts: Jason uses a powerful constraint language (full first-order predicate calculus) and compiles the given constraints into procedures that check the consistency of configurations. A rigorous algebraic model provides Jason with a strong theoretical foundation not present in most other systems. Adele/Nomade. Adele [6-8] (and its successor Nomade <ref> [8] </ref>) is a constraint-based environment for SCM. Constraints are quantifier-free boolean expressions and are used to infer consistent configurations, including the dependency relation between components. The advantage of this approach is that programmers specify what they want and the system figures out how to produce it.
Reference: [9] <author> S. C. Johnson, </author> <title> YACCYet Another Compiler Compiler, C. S. </title> <type> Technical Report #32, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <year> 1975. </year>
Reference-contexts: Such an analyzer might be a component of a compiler or other larger system. We assume that four source objects are available: a Lex [16] specification of tokens, a YACC <ref> [9] </ref> specification of a grammar, a driver program written in C, and a common file of declarations included by all three sources. These objects are shown in Figure 3. Common is the file of common declarations.
Reference: [10] <author> G. Kaiser and P. H. Feiler, SMILE/MARVEL: </author> <title> Two Approaches to Knowledge-Based Programming Environments, </title> <type> Tech. Report CU-CS-227-86, </type> <institution> Department of Computer Science, Columbia University, </institution> <address> New York, NY 10027, </address> <month> Oct. </month> <year> 1986. </year>
Reference: [11] <author> G. Kaiser and P. H. Feiler, </author> <title> Granularity Issues in a Knowledge-Based Programming Environment, </title> <booktitle> 2nd Kansas Conference on Knowledge-Based Software Development, </booktitle> <address> Manhattan, KA, </address> <month> Oct. </month> <year> 1986. </year>
Reference: [12] <author> G. Kaiser and P. H. Feiler, </author> <title> An Architecture for Intelligent Assistance in Software Development, </title> <booktitle> Proceedings of the Ninth International Conference on Software Engineering, </booktitle> <address> Monterey, CA, </address> <month> Mar. </month> <year> 1987, </year> <pages> 80-88 </pages> . 
Reference: [13] <author> K. Knight, </author> <title> Unification: A Multidisciplinary Survey, </title> <journal> ACM Computing Surveys 21, </journal> <month> 1 (Mar. </month> <year> 1989), </year> <pages> 93-124. </pages>
Reference-contexts: For example, f (a,X) is the same as f (1=&gt;a, 2=&gt;X:@). hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 3 Background material on unification can be found in many logic programming texts and in an excellent survey by Knight <ref> [13] </ref>. 4 A functor that contains non-alphanumeric characters or starts with an upper-case letter must be quoted. Adams and Solomon CAPITL Page 6 With these abbreviations, the Congress expression language becomes a strict superset of Prolog. It extends Prolog in two important ways.
Reference: [14] <author> D. B. Leblang and R. P. Chase, Jr., </author> <title> Computer-Aided Software Engineering in a Distributed Workstation Environment, </title> <journal> SIGPLAN Notices Notices 19, </journal> <month> 5 (Apr. </month> <year> 1984), </year> <pages> 104-112 </pages> . 
Reference-contexts: All of the following systems provide good support for building; they differ primarily in how systems are specified, how version selection is accomplished, and what kinds of consistency are guaranteed. Adams and Solomon CAPITL Page 21 DSEE. DSEE <ref> [14, 15] </ref> is a commercial environment that manages software in a network of distributed (Apollo) workstations. It supports a notion of time travel by compactly storing versions of source files and providing a tool, the History Manager, that associates symbolic attributes with particular versions.
Reference: [15] <author> D. B. Leblang and G. D. McLean, Jr., </author> <title> Configuration Management for Large-Scale Software Development Efforts, </title> <booktitle> Proceedings of the Workshop on Software Engineering Environments for Programming-in-the-Large, </booktitle> <address> Harwichport, MA, </address> <month> June </month> <year> 1985, </year> <pages> 122-127. </pages>
Reference-contexts: All of the following systems provide good support for building; they differ primarily in how systems are specified, how version selection is accomplished, and what kinds of consistency are guaranteed. Adams and Solomon CAPITL Page 21 DSEE. DSEE <ref> [14, 15] </ref> is a commercial environment that manages software in a network of distributed (Apollo) workstations. It supports a notion of time travel by compactly storing versions of source files and providing a tool, the History Manager, that associates symbolic attributes with particular versions.
Reference: [16] <author> M. E. Lesk, </author> <title> Lex A lexical analyzer generator, C. S. </title> <type> Technical Report #39, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <month> October </month> <year> 1975. </year>
Reference-contexts: A Pascal Program Analyzer The first example is a simple program analyzer that translates Pascal source files into abstract syntax trees (AST's). Such an analyzer might be a component of a compiler or other larger system. We assume that four source objects are available: a Lex <ref> [16] </ref> specification of tokens, a YACC [9] specification of a grammar, a driver program written in C, and a common file of declarations included by all three sources. These objects are shown in Figure 3. Common is the file of common declarations.
Reference: [17] <author> M. A. Linton, J. M. Vlissides and P. R. Calder, </author> <title> Composing User Interfaces with InterViews, </title> <booktitle> IEEE Computer, </booktitle> <month> February </month> <year> 1989, </year> <pages> 8-24. </pages>
Reference-contexts: A compatibility feature allows existing Unix tools to manipulate CAPITL objects as if they were Unix files. The database is accessible via an interactive browser/editor based on the X Window System [25] and the InterViews graphical toolkit <ref> [17] </ref>. CAPITL's browser can navigate the version history of the database and the links between objects. It also provides facilities for the display and manual update of objects. <p> Class Integer is a subclass of Term with an IntVal () method that returns its integer value, and so on. Documentation for this interface is currently being written [2]. 3.3.1. Browser An interactive browsing interface has been written on top of the X Window System using the InterViews <ref> [17] </ref> toolkit. The browser supports visiting any object or directory in the object-base and uses type-sensitive displays to depict the contents attribute of an object; other attributes are displayed using the Congress expression language (2.4).
Reference: [18] <author> A. Mahler and A. Lampen, </author> <title> Shape-- A Software Configuration Management Tool, </title> <booktitle> Proceedings of the International Workshop on Software Version and Configuration Control, </booktitle> <address> Grassau, </address> <publisher> W. </publisher> <address> Germany , Jan. </address> <year> 1988. </year>
Reference-contexts: Version selection rules are used to bind object references in the system model to specific versions in the file system. DSEE supports many other features needed in a distributed environment and is one of the most advanced systems available commercially. Shape. Shape <ref> [18, 19] </ref> integrates Make with a version control system similar to RCS. Shape is backwards compatible with Make and adds version selection rules comparable to those in DSEE.
Reference: [19] <author> A. Mahler and A. Lampen, </author> <title> An Integrated Toolset for Engineering Software Configurations, </title> <booktitle> Proceedings of the ACM Software Eng. Notes/SIGPLAN Notices Software Engineering Symposium on Practical Software Development Environments in SIGPLAN Notices Notices 24, </booktitle> <month> 2 (Feb. </month> <year> 1989), </year> <pages> 191-200. </pages>
Reference-contexts: Version selection rules are used to bind object references in the system model to specific versions in the file system. DSEE supports many other features needed in a distributed environment and is one of the most advanced systems available commercially. Shape. Shape <ref> [18, 19] </ref> integrates Make with a version control system similar to RCS. Shape is backwards compatible with Make and adds version selection rules comparable to those in DSEE.
Reference: [20] <author> J. K. Ousterhout, </author> <title> Tcl: An Embeddable Command Language, </title> <booktitle> 1990 Winter USENIX Conference Proceedings, </booktitle> <year> 1990. </year>
Reference-contexts: The expression language of Congress uses the functor @ for the first purpose and tags for the second. 2.5. Embedding The coupling between C++ and Congress is a two-way embedding: Each language appears to be an embedded sub-language <ref> [20] </ref> of the other. Each language retains its own style. The embedding does not alter the syntax or semantics of either language.
Reference: [21] <author> A. Rich and M. Solomon, </author> <title> A Logic-Based Approach to System Modelling, </title> <booktitle> Workshop on Software Configuration Management, </booktitle> <address> Trondheim, Norway, </address> <month> June </month> <year> 1991, </year> <pages> 84-93. </pages> <note> Adams and Solomon CAPITL Page 25 </note>
Reference-contexts: Maintaining invariants in an evolving system is a critical task for any support system [22, 27, 30]. The CAPITL 1 project at the University of Wisconsin has been investigating a logic-based approach to software configuration management <ref> [21] </ref>. The basic thesis of our approach is that if all objects in the hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh * This work was supported in part by the Defense Advanced Research Projects Agency under ARPA Order No. 8856 (monitored by the Office of Naval Research under contract N00014-92-J-1937).
Reference: [22] <author> A. Rich, </author> <title> Logic-Based System Modelling, </title> <type> PhD Thesis, </type> <institution> University of Wisconsin-Madison, </institution> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: Maintaining invariants in an evolving system is a critical task for any support system <ref> [22, 27, 30] </ref>. The CAPITL 1 project at the University of Wisconsin has been investigating a logic-based approach to software configuration management [21].
Reference: [23] <author> J. Richardson, M. Carey and D. Schuh, </author> <title> The Design of the E Programming Language, </title> <journal> ACM Trans. Prog. Lang. </journal> <note> and Systems , to appear. </note>
Reference-contexts: The Storage Manager supports concurrency control through two-phase locking, and a simple transaction facility with full recovery from hardware and software failures. The E programming language <ref> [23] </ref> is an extension of C++ that supports persistent datadata that retains its state between runs of a program. E syntax extends C++ with a db version of each primitive type and type constructor (e.g. dbint, dbclass - ... -, etc.).
Reference: [24] <author> R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh and B. Lyon, </author> <title> Design and implementation of the Sun Network filesystem, </title> <booktitle> Proceedings of the Summer 1985 USENIX Conference, </booktitle> <address> Portland, OR, </address> <month> June </month> <year> 1985, </year> <pages> 119-130. </pages>
Reference-contexts: None of these approaches is entirely satisfactory. Adams and Solomon CAPITL Page 10 The Emulated File System (EFS) allows programs to access CAPITL objects as if they were Unix files. It is based on the Network File System (NFS) facility <ref> [24] </ref>, which is included in most versions of Unix. NFS was originally designed to support transparent access to remote files. A version of the mount command associates a remote file system with a name, called a mount point in the local file system.
Reference: [25] <author> R. W. Scheifler and J. Gettys, </author> <title> The X Window System, </title> <journal> ACM Transactions on Graphics 16, </journal> <month> 8 (Aug. </month> <year> 1983), </year> <pages> 57-69. </pages>
Reference-contexts: Support for efficient maintenance of multiple versions of the database is built in. A compatibility feature allows existing Unix tools to manipulate CAPITL objects as if they were Unix files. The database is accessible via an interactive browser/editor based on the X Window System <ref> [25] </ref> and the InterViews graphical toolkit [17]. CAPITL's browser can navigate the version history of the database and the links between objects. It also provides facilities for the display and manual update of objects.
Reference: [26] <author> M. Solomon, EFS: </author> <title> The Extensible File System, </title> <institution> University of Wisconsin Technical Report, </institution> <note> In preparation. </note>
Reference-contexts: The CAPITL Directory class implements these functions by manipulating the list stored in the contents attribute of the term. More details about the EFS package will be contained in a forthcoming report <ref> [26] </ref>. Adams and Solomon CAPITL Page 11 Unix Kernel File System NFS Local Exodus Server Disk Driver Browser POL efsd system calls Exodus protocol NFS protocol Exodus client library CC CAPITL Process Architecture 4. Software Configuration Management in CAPITL CAPITL provides assistance for constructing and maintaining software products.
Reference: [27] <author> S. M. Sutton, Jr., D. Heimbigner and L. J. Osterweil, </author> <title> Managing Change in Software Development through Process Programing, </title> <institution> University of Colorado at Boulder tech report #CU-CS-531-91, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: Maintaining invariants in an evolving system is a critical task for any support system <ref> [22, 27, 30] </ref>. The CAPITL 1 project at the University of Wisconsin has been investigating a logic-based approach to software configuration management [21].
Reference: [28] <author> W. F. Tichy and M. C. Baker, </author> <title> Smart Recompilation, </title> <booktitle> 12th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> New Orleans, Louisiana, </address> <month> Jan. </month> <pages> 14-16, </pages> <year> 1985, </year> <pages> 236-244. </pages>
Reference-contexts: If the timestamps match, the contents is still valid. Otherwise, the provenance is re-evaluated. A more precise notion of validity that relies on semantic properties of the objects involved could be used, potentially allowing fewer expressions to be evaluated <ref> [28] </ref>. (3) The object has a provenance but no contents, indicating that a user conserved space by deleting the contents. The contents can be regenerated by simply evaluating the prove nance. 4.6. Discussion Separating the planning and building phases has several advantages.
Reference: [29] <author> W. F. Tichy, RCS: </author> <title> A System for Version Control, </title> <journal> SoftwarePractice and Experience 15, </journal> <month> 7 (July </month> <year> 1985), </year> <pages> 637-654. </pages>
Reference-contexts: It has exactly the same semantics as a Unix plain file (see 3.3.2). Delta files have additional operations to compress and uncompress their contents. Delta files represent consecutive versions of their contents as delta lists using an algorithm similar to RCS <ref> [29] </ref>. The contents of a term file is an arbitrary Congress term. A composite file, like a directory, contains a list of references to other objects, but it does not emulate all the behavior of a Unix directory, nor is it constrained to be part of a strict tree structure.
Reference: [30] <author> W. F. Tichy, </author> <title> Tools for Software configuration Management, </title> <booktitle> Proceedings of the First International Workshop on Software Version and Configuration Control, </booktitle> <address> Grassau, FRG, </address> <month> Jan. </month> <year> 1988, </year> <pages> 1-20. </pages>
Reference-contexts: Maintaining invariants in an evolving system is a critical task for any support system <ref> [22, 27, 30] </ref>. The CAPITL 1 project at the University of Wisconsin has been investigating a logic-based approach to software configuration management [21].
Reference: [31] <author> D. Wiebe, </author> <title> Generic Software Configuration Management: Theory and Design, </title> <institution> (Thesis) University of Washington Tech Report #90-07-03, </institution> <year> 1990. </year>
Reference-contexts: Version selection and consistency are not integrated into the system. From a practical point of view, Odin's ability to use existing tools is appealing; our use of EFS achieves the same functionality. Jason. Jason is a generic software configuration system <ref> [31] </ref> that constructs a software environment from a given set of parameters. These parameters include class definitions (object schemas), consistency constraints, and build plans (dependency relations). Created environments can later be extended, but because of the compiled nature of generated environments, such extensions are limited to additions and refinements.
References-found: 31

