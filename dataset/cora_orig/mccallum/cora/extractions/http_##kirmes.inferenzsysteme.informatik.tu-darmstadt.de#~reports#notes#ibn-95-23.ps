URL: http://kirmes.inferenzsysteme.informatik.tu-darmstadt.de/~reports/notes/ibn-95-23.ps
Refering-URL: http://www.inferenzsysteme.informatik.tu-darmstadt.de/~reports/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: giesl@inferenzsysteme.informatik.th-darmstadt.de  
Title: Generating Polynomial Orderings for Termination Proofs  
Author: Jurgen Giesl 
Address: Alexanderstr. 10, 64283 Darmstadt, Germany  
Affiliation: FB Informatik, Technische Hochschule Darmstadt,  
Abstract: Most systems for the automation of termination proofs using polynomial orderings are only semi-automatic, i.e. the "right" polynomial ordering has to be given by the user. We show that a variation of Lank-ford's partial derivative technique leads to an easier and slightly more powerful method than most other semi-automatic approaches. Based on this technique we develop a method for the automated synthesis of a suited polynomial ordering.
Abstract-found: 1
Intro-found: 1
Reference: [At85] <author> H. At-Kaci. </author> <title> An Algorithm for Finding a Minimal Recursive Path Ordering. </title> <journal> RAIRO, </journal> <volume> 19(4) </volume> <pages> 359-382, </pages> <year> 1985. </year>
Reference-contexts: While in general this problem is undecidable [HL78], several methods for proving termination have been presented, cf. [Der87a]. This paper is concerned with the automation of termination proofs. Approaches for automated termination proofs using path orderings [Pla78], [Der82] are described in <ref> [At85] </ref> and [DF85], an algorithm using Knuth-Bendix orderings [KB70] is presented in [Mar87] and a system which is able to handle general path orderings is presented in [DH93]. Implementations using polynomial order-ings [Lan79] have been developed by A. Ben Cherifa and P. Lescanne [BL87] and J. Steinbach [Ste91], [Ste92].
Reference: [ACM84] <author> D. S. Arnon, G. E. Collins & S. McCallum. </author> <title> Cylindrical Algebraic Decomposition I. </title> <journal> SIAM Journal of Computing, </journal> <volume> 13(4): </volume> <pages> 865-877, </pages> <year> 1984. </year>
Reference-contexts: The most efficient known decision method for elementary algebra is the cylindrical algebraic decomposition algorithm by G. E. Collins ([Col75], <ref> [ACM84] </ref>, [Hon92]).
Reference: [Bel84] <author> F. Bellegarde. </author> <title> Rewriting Systems on FP Expressions that reduce the Number of Sequences they yield. </title> <booktitle> Symposium on LISP and Functional Programming, ACM, </booktitle> <address> Austin, TX, </address> <year> 1984. </year>
Reference-contexts: In this section we introduce such a semi-automatic system and compare it to the ones in [BL87] and [Ste92]. We will first illustrate our approach with an example from <ref> [Bel84] </ref> and [BL87]. Let T consist of all terms constructed from the constant a, the unary function symbol map and the binary function symbol ffi.
Reference: [BL87] <author> A. Ben Cherifa & P. Lescanne. </author> <title> Termination of Rewriting Systems by Polynomial Interpretations and its Implementation. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 9(2) </volume> <pages> 137-159, </pages> <year> 1987. </year>
Reference-contexts: Implementations using polynomial order-ings [Lan79] have been developed by A. Ben Cherifa and P. Lescanne <ref> [BL87] </ref> and J. Steinbach [Ste91], [Ste92]. While the systems in [BL87] and [Ste92] only prove termination with a given polynomial ordering, Steinbach [Ste91] describes a system that tries to generate a suited polynomial ordering automatically. <p> Implementations using polynomial order-ings [Lan79] have been developed by A. Ben Cherifa and P. Lescanne <ref> [BL87] </ref> and J. Steinbach [Ste91], [Ste92]. While the systems in [BL87] and [Ste92] only prove termination with a given polynomial ordering, Steinbach [Ste91] describes a system that tries to generate a suited polynomial ordering automatically. <p> In this section we introduce such a semi-automatic system and compare it to the ones in <ref> [BL87] </ref> and [Ste92]. We will first illustrate our approach with an example from [Bel84] and [BL87]. Let T consist of all terms constructed from the constant a, the unary function symbol map and the binary function symbol ffi. <p> In this section we introduce such a semi-automatic system and compare it to the ones in <ref> [BL87] </ref> and [Ste92]. We will first illustrate our approach with an example from [Bel84] and [BL87]. Let T consist of all terms constructed from the constant a, the unary function symbol map and the binary function symbol ffi. <p> For instance, the trs with the rule x ! a is not terminating although t (x) t (a) is eventually positive for every polynomial interpretation t . A different semi-automatic method has been presented by Ben Cherifa and Lescanne <ref> [BL87] </ref>. As their approach uses a heuristic (which can fail), their method was improved by Steinbach [Ste92] who developed a system which has the same power as the one of [BL87] if the latter is extended by a backtracking component. Moreover, he eliminated the restriction of [BL87] to the fixed minimal <p> A different semi-automatic method has been presented by Ben Cherifa and Lescanne <ref> [BL87] </ref>. As their approach uses a heuristic (which can fail), their method was improved by Steinbach [Ste92] who developed a system which has the same power as the one of [BL87] if the latter is extended by a backtracking component. Moreover, he eliminated the restriction of [BL87] to the fixed minimal value = 2. A comparison of our method with the ones of [Ste92] and [BL87] (the latter one extended by backtracking and arbitrary ) leads to the following results 2 <p> Ben Cherifa and Lescanne <ref> [BL87] </ref>. As their approach uses a heuristic (which can fail), their method was improved by Steinbach [Ste92] who developed a system which has the same power as the one of [BL87] if the latter is extended by a backtracking component. Moreover, he eliminated the restriction of [BL87] to the fixed minimal value = 2. A comparison of our method with the ones of [Ste92] and [BL87] (the latter one extended by backtracking and arbitrary ) leads to the following results 2 : 2 Detailed proofs of the following observations can be found in the appendix. 4 If <p> Steinbach [Ste92] who developed a system which has the same power as the one of <ref> [BL87] </ref> if the latter is extended by a backtracking component. Moreover, he eliminated the restriction of [BL87] to the fixed minimal value = 2. A comparison of our method with the ones of [Ste92] and [BL87] (the latter one extended by backtracking and arbitrary ) leads to the following results 2 : 2 Detailed proofs of the following observations can be found in the appendix. 4 If [Ste92] and [BL87] can prove a polynomial p positive, then our method can do so as well. <p> A comparison of our method with the ones of [Ste92] and <ref> [BL87] </ref> (the latter one extended by backtracking and arbitrary ) leads to the following results 2 : 2 Detailed proofs of the following observations can be found in the appendix. 4 If [Ste92] and [BL87] can prove a polynomial p positive, then our method can do so as well. The reason is, that if p &gt; 0 can be proved by the methods of [Ste92] and [BL87] then @p @x 0 can also be proved with their methods (and therefore it must be valid). <p> : 2 Detailed proofs of the following observations can be found in the appendix. 4 If [Ste92] and <ref> [BL87] </ref> can prove a polynomial p positive, then our method can do so as well. The reason is, that if p &gt; 0 can be proved by the methods of [Ste92] and [BL87] then @p @x 0 can also be proved with their methods (and therefore it must be valid). Hence, repeated application of (Diff1) and (Diff2) transforms p &gt; 0 into a set of valid inequalities. <p> Hence, repeated application of (Diff1) and (Diff2) transforms p &gt; 0 into a set of valid inequalities. If our method can prove p positive for all x 1 ; : : : ; x n , then there exists a 0 such that the methods of [Ste92] and <ref> [BL87] </ref> can prove p positive for all x 1 ; : : : ; x n 0 . But it is not always possible to choose 0 = . For example, the systems of [Ste92] and [BL87] can prove x 2 2x + 2 &gt; 0 only for x 3 while <p> n , then there exists a 0 such that the methods of [Ste92] and <ref> [BL87] </ref> can prove p positive for all x 1 ; : : : ; x n 0 . But it is not always possible to choose 0 = . For example, the systems of [Ste92] and [BL87] can prove x 2 2x + 2 &gt; 0 only for x 3 while our method can already prove it for x 1. While the worst case complexity of the systems in [Ste92] and [BL87] is exponential in the number of monomials in p, our method is exponential in the <p> For example, the systems of [Ste92] and <ref> [BL87] </ref> can prove x 2 2x + 2 &gt; 0 only for x 3 while our method can already prove it for x 1. While the worst case complexity of the systems in [Ste92] and [BL87] is exponential in the number of monomials in p, our method is exponential in the number of its variables. More precisely, the complexity of our method to prove a r-variate polynomial with degree d positive is O (d r ). <p> Table 1 illustrates its performance with some examples. The second row contains the execution time our algorithm needs to generate a polynomial interpretation which is compatible with the trs in the first row. 13 Example Time Nested Function Symbols ([Ste91, Example 8.1]) 0.1 sec. Endomorphism & Associativity ([Bel84], <ref> [BL87] </ref>) 0.1 sec. Running Example 6.1 in [Ste91] (by A. Middeldorp) 0.2 sec. Binomial Coefficients ([Ste91, Example 8.8], [Ste92, Example 13]) 1.6 sec. Distributivity & Associativity ([Der87a, p. 78]) 1.9 sec. Table 1. <p> A Proofs In this appendix we give detailed proofs for the observations in section 2 concerning the comparison of our method with the ones of [Ste92] and <ref> [BL87] </ref>. Observation 1 If [Ste92] and [BL87] can prove a polynomial p positive, then our method can do so as well. <p> A Proofs In this appendix we give detailed proofs for the observations in section 2 concerning the comparison of our method with the ones of [Ste92] and <ref> [BL87] </ref>. Observation 1 If [Ste92] and [BL87] can prove a polynomial p positive, then our method can do so as well. <p> Moreover, (41) implies (43) (as k 1 i 1 ). Hence, (39) is proved. Observation 2 If our method can prove p positive for all x 1 ; : : : ; x n , then there exists a 0 such that the methods of [Ste92] and <ref> [BL87] </ref> can prove p positive for all x 1 ; : : : ; x n 0 . Proof: Let p be a polynomial as above. <p> Therefore if 0 is sufficiently large, then p &gt; 0 (or p 0) can also be proved using the method of Steinbach. 15 Observation 3 While the worst case complexity of the systems in [Ste92] and <ref> [BL87] </ref> is exponential in the number of monomials in p, our method is exponential in the number of its variables. Proof: For a proof on the complexity of the systems in [Ste92] and [BL87] the reader is referred to [Ste92]. <p> method of Steinbach. 15 Observation 3 While the worst case complexity of the systems in [Ste92] and <ref> [BL87] </ref> is exponential in the number of monomials in p, our method is exponential in the number of its variables. Proof: For a proof on the complexity of the systems in [Ste92] and [BL87] the reader is referred to [Ste92]. The complexity of our method to prove p &gt; 0 (or p 0) is O (n r ) if p is a r-variate polynomial of degree n. We will prove this conjecture by induction on the number of variables r.
Reference: [CL92] <author> A. Cichon & P. Lescanne. </author> <title> Polynomial Interpretations and the Complexity of Algorithms. </title> <booktitle> In Proc. 11th Int. Conf. on Automated Deduction, </booktitle> <address> Saratoga Springs, NY, </address> <year> 1992. </year>
Reference-contexts: A discussion on the class of term rewriting systems whose termination can be proved using polynomial orderings can be found in [Les86], [Lau88], [HL89], <ref> [CL92] </ref>. Most systems for "automated" termination proofs using polynomial order-ings are semi-automatic, i.e. the user has to provide a polynomial interpretation and the system checks whether the trs is compatible with the corresponding polynomial ordering.
Reference: [Coh69] <author> P. J. Cohen. </author> <title> Decision Procedures for real and p-adic Fields. </title> <journal> Comm. Pure and Applied Math., </journal> <volume> 22 </volume> <pages> 131-151, </pages> <year> 1969. </year>
Reference-contexts: It is undecidable whether there exists an instantiation with integers satisfying a set of inequalities. But if we regard instantiations with real numbers this problem becomes decidable [Tar51]. Then decision methods for elementary algebra (e.g. [Tar51], <ref> [Coh69] </ref>, [Col75]) can be used for the synthesis of the "right" instantiation. To be compatible with an integer polynomial ordering is sufficient for the termination of a trs. This is because for a non-terminating trs there would have to be an infinite derivation of ground terms.
Reference: [Col75] <author> G. E. Collins. </author> <title> Quantifier Elimination for Real Closed Fields by Cylindrical Algebraic Decomposition. </title> <booktitle> In Proc. 2nd GI Conf. on Automata Theory and Formal Languages, </booktitle> <address> Kaiserslautern, Germany, </address> <year> 1975. </year>
Reference-contexts: It is undecidable whether there exists an instantiation with integers satisfying a set of inequalities. But if we regard instantiations with real numbers this problem becomes decidable [Tar51]. Then decision methods for elementary algebra (e.g. [Tar51], [Coh69], <ref> [Col75] </ref>) can be used for the synthesis of the "right" instantiation. To be compatible with an integer polynomial ordering is sufficient for the termination of a trs. This is because for a non-terminating trs there would have to be an infinite derivation of ground terms.
Reference: [DF85] <author> D. Detlefs & R. Forgaard. </author> <title> A Procedure for automatically proving the Termination of a Set of Rewrite Rules, </title> <booktitle> In Proc. 1st Int. Conf. on Rewriting Techniques and Applications, </booktitle> <address> Dijon, France, </address> <year> 1985. </year>
Reference-contexts: While in general this problem is undecidable [HL78], several methods for proving termination have been presented, cf. [Der87a]. This paper is concerned with the automation of termination proofs. Approaches for automated termination proofs using path orderings [Pla78], [Der82] are described in [At85] and <ref> [DF85] </ref>, an algorithm using Knuth-Bendix orderings [KB70] is presented in [Mar87] and a system which is able to handle general path orderings is presented in [DH93]. Implementations using polynomial order-ings [Lan79] have been developed by A. Ben Cherifa and P. Lescanne [BL87] and J. Steinbach [Ste91], [Ste92].
Reference: [Der79] <author> N. Dershowitz. </author> <title> A Note on Simplification Orderings. </title> <journal> Information Processing Letters, </journal> <volume> 9(5) </volume> <pages> 212-215, </pages> <year> 1979. </year>
Reference-contexts: In the following we will therefore develop a refined termination criterion which can also be used for instantiations with real numbers. This enables the application of decision methods for elementary algebra to generate a suited in-stantiation of the variable coefficients. In <ref> [Der79] </ref> Dershowitz proposed a method for proving termination using real polynomial orderings. He showed that it is sufficient for termination if a trs is compatible with a simplification ordering (i.e. a monotonic ordering possessing the subterm property f (: : : x : : :) x).
Reference: [Der82] <author> N. Dershowitz. </author> <title> Orderings for Term-Rewriting Systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 17 </volume> <pages> 279-301, </pages> <year> 1982. </year>
Reference-contexts: While in general this problem is undecidable [HL78], several methods for proving termination have been presented, cf. [Der87a]. This paper is concerned with the automation of termination proofs. Approaches for automated termination proofs using path orderings [Pla78], <ref> [Der82] </ref> are described in [At85] and [DF85], an algorithm using Knuth-Bendix orderings [KB70] is presented in [Mar87] and a system which is able to handle general path orderings is presented in [DH93]. Implementations using polynomial order-ings [Lan79] have been developed by A. Ben Cherifa and P. Lescanne [BL87] and J. <p> For a survey on simplification orderings see [Ste89], [Ste93] and [Ste94]. This result was strengthened in <ref> [Der82] </ref> by stating that for termination it is already sufficient if the trs is compatible with the strict part of a quasi-simplification ordering -. <p> Every polynomial interpretation t defines a corresponding polynomial quasi-ordering -t (i.e. t -t s iff t (t) t (s)). As suggested in <ref> [Der82] </ref>, we prove the termination of a trs R by showing that it is compatible with a (possibly real) polynomial ordering t whose corresponding quasi-ordering -t is a quasi-simplification ordering. In other words, we have to ensure non-strict monotonic-ity and the non-strict subterm property.
Reference: [Der87a] <author> N. Dershowitz. </author> <title> Termination of Rewriting. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 3(1, 2):69-115, 1987. 16 </volume>
Reference-contexts: A term rewriting system R is terminating for a set of terms T if there exists no infinite derivation of terms in T . While in general this problem is undecidable [HL78], several methods for proving termination have been presented, cf. <ref> [Der87a] </ref>. This paper is concerned with the automation of termination proofs. <p> As we know of no trs whose termination proof requires a polynomial interpretation with non-rational real coefficients, we have restricted the algorithm to rational instead of real numbers. This eases the implementation of the algorithm considerably and we avoid a disadvantage mentioned in <ref> [Der87a] </ref>, i.e. the generated (rational) polynomial interpretation can be directly printed out to the user which would not be possible if we used real numbers. Moreover, we have introduced execution time limits for each step of Collins' algorithm.
Reference: [Der87b] <author> N. Dershowitz. </author> <title> Corrigendum | Termination of Rewriting. </title> <journal> Journal of Sym--bolic Computation, </journal> <volume> 4 </volume> <pages> 409-410, </pages> <year> 1987. </year>
Reference-contexts: Note that it is not sufficient for the termination of a trs R if there exists a polynomial interpretation t such that t (l) t (r) is eventually positive for each rule l ! r in R <ref> [Der87b] </ref>. For instance, the trs with the rule x ! a is not terminating although t (x) t (a) is eventually positive for every polynomial interpretation t . A different semi-automatic method has been presented by Ben Cherifa and Lescanne [BL87].
Reference: [DJ90] <author> N. Dershowitz & J.-P. Jouannaud. </author> <title> Rewrite Systems. </title> <booktitle> Handbook of Theoretical Comp. Science, </booktitle> <editor> J. van Leuwen, Ed., </editor> <volume> vol. </volume> <editor> B, ch. </editor> <volume> 6, </volume> <pages> pp. 243-320, </pages> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction One of the most interesting properties of a term rewriting system (trs) is termination, cf. [HO80], <ref> [DJ90] </ref>. A term rewriting system R is terminating for a set of terms T if there exists no infinite derivation of terms in T . While in general this problem is undecidable [HL78], several methods for proving termination have been presented, cf. [Der87a]. <p> Therefore it is sufficient if the inequalities (7) - (9) hold for all instantiations of x; y; z with these numbers. But as in general such a condition is hard to check, a slightly stronger requirement is often used <ref> [DJ90] </ref>: t (l) &gt; t (r) is demanded for all instantiations with integers n that are greater or equal than the minimal value of a ground term (i.e. numbers n with n minft (t) j t ground termg).
Reference: [DH93] <author> N. Dershowitz & C. Hoot. </author> <title> Topics in Termination. </title> <booktitle> In Proc. 5th Int. Conf. on Rewriting Techniques and Applications, </booktitle> <address> Montreal, Canada, </address> <year> 1993. </year>
Reference-contexts: Approaches for automated termination proofs using path orderings [Pla78], [Der82] are described in [At85] and [DF85], an algorithm using Knuth-Bendix orderings [KB70] is presented in [Mar87] and a system which is able to handle general path orderings is presented in <ref> [DH93] </ref>. Implementations using polynomial order-ings [Lan79] have been developed by A. Ben Cherifa and P. Lescanne [BL87] and J. Steinbach [Ste91], [Ste92].
Reference: [Gie95] <author> J. Giesl. </author> <title> Generating Polynomial Orderings for Termination Proofs. </title> <booktitle> In Proc. 6th Int. Conf. Rewriting Techniques and Applications, </booktitle> <address> Kaiserslautern, Ger-many, </address> <year> 1995. </year>
Reference-contexts: We illustrate its performance and discuss its relation with other approaches for automated termination proofs. ? Technical Report IBN 95/23, Technische Hochschule Darmstadt. This is an extended version of a paper presented at the 6th International Conference on Rewriting Tech niques and Applications, <ref> [Gie95] </ref>. 2 Semi-Automatic Termination Proofs The use of polynomial orderings for termination proofs has been suggested by D. S. Lankford [Lan79]. A polynomial interpretation t associates an integer multivariate polynomial f t (x 1 ; : : : ; x n ) with each n-ary function symbol f .
Reference: [HL89] <author> D. Hofbauer & C. Lautemann. </author> <title> Termination Proofs and the Length of Derivations (Preliminary Version). </title> <booktitle> In Proc. 3rd Int. Conf. Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, NC, </address> <year> 1989. </year>
Reference-contexts: A discussion on the class of term rewriting systems whose termination can be proved using polynomial orderings can be found in [Les86], [Lau88], <ref> [HL89] </ref>, [CL92]. Most systems for "automated" termination proofs using polynomial order-ings are semi-automatic, i.e. the user has to provide a polynomial interpretation and the system checks whether the trs is compatible with the corresponding polynomial ordering.
Reference: [Hon92] <author> H. Hong. </author> <title> Heuristic Search Strategies for Cylindrical Algebraic Decomposition. </title> <booktitle> In Proc. 1st Int. Conf. on Artificial Intelligence and Symbolic Mathematical Computing, </booktitle> <address> Karlsruhe, Germany, </address> <year> 1992. </year>
Reference-contexts: The most efficient known decision method for elementary algebra is the cylindrical algebraic decomposition algorithm by G. E. Collins ([Col75], [ACM84], <ref> [Hon92] </ref>).
Reference: [HL78] <author> G. Huet & D. S. Lankford. </author> <title> On the Uniform Halting Problem for Term Rewriting Systems. </title> <institution> Rapport Laboria 283, Institut de Recherche d'Infor-matique et d'Automatique, Le Chesnay, France, </institution> <year> 1978. </year>
Reference-contexts: 1 Introduction One of the most interesting properties of a term rewriting system (trs) is termination, cf. [HO80], [DJ90]. A term rewriting system R is terminating for a set of terms T if there exists no infinite derivation of terms in T . While in general this problem is undecidable <ref> [HL78] </ref>, several methods for proving termination have been presented, cf. [Der87a]. This paper is concerned with the automation of termination proofs.
Reference: [HO80] <author> G. Huet & D. C. Oppen. </author> <title> Equations and Rewrite Rules: A Survey. Formal Language Theory: Perspectives and Open Problems, </title> <editor> R. Book, ed., </editor> <publisher> Academic Press, </publisher> <pages> pp. 349-405, </pages> <year> 1980. </year>
Reference-contexts: 1 Introduction One of the most interesting properties of a term rewriting system (trs) is termination, cf. <ref> [HO80] </ref>, [DJ90]. A term rewriting system R is terminating for a set of terms T if there exists no infinite derivation of terms in T . While in general this problem is undecidable [HL78], several methods for proving termination have been presented, cf. [Der87a].
Reference: [KB70] <author> D. E. Knuth & P. B. Bendix. </author> <title> Simple Word Problems in Universal Algebras. Computational Problems in Abstract Algebra, </title> <editor> J. Leech, ed., </editor> <publisher> Pergamon Press, </publisher> <pages> pp. 263-297, </pages> <year> 1970. </year>
Reference-contexts: While in general this problem is undecidable [HL78], several methods for proving termination have been presented, cf. [Der87a]. This paper is concerned with the automation of termination proofs. Approaches for automated termination proofs using path orderings [Pla78], [Der82] are described in [At85] and [DF85], an algorithm using Knuth-Bendix orderings <ref> [KB70] </ref> is presented in [Mar87] and a system which is able to handle general path orderings is presented in [DH93]. Implementations using polynomial order-ings [Lan79] have been developed by A. Ben Cherifa and P. Lescanne [BL87] and J. Steinbach [Ste91], [Ste92].
Reference: [Lan75] <author> D. S. Lankford. </author> <title> Canonical Algebraic Simplification in Computational Logic. </title> <institution> Memo ATP-25, University of Texas, Austin, TX, </institution> <year> 1975. </year>
Reference-contexts: For a trs R to be compatible with a polynomial ordering t it is sufficient to demand t (l) &gt; t (r) for all ground substitutions <ref> [Lan75] </ref>. Equivalently, it is sufficient to demand t (l) &gt; t (r) only for instantiations of variables with those numbers that are values of ground terms (i.e. numbers n such that there exists a ground term t with t (t) = n).
Reference: [Lan76] <author> D. S. Lankford. </author> <title> A Finite Termination Algorithm. Internal Memo, </title> <institution> Southwestern University, Georgetown, TX, </institution> <year> 1976. </year>
Reference-contexts: If these inequalities are true, then R is terminating. The differentiation rules (Diff1) and (Diff2) are based on the partial derivative method of Lankford <ref> [Lan76] </ref>. But Lankford's method can only prove that a polynomial is eventually positive (i.e. p (x 1 ; : : : ; x n ) &gt; 0 holds for large enough x i ).
Reference: [Lan79] <author> D. S. Lankford. </author> <title> On Proving Term Rewriting Systems are Noetherian. </title> <type> Technical Report Memo MTP-3, </type> <institution> Louisiana Tech. Univ., Ruston, LA, </institution> <year> 1979. </year>
Reference-contexts: Approaches for automated termination proofs using path orderings [Pla78], [Der82] are described in [At85] and [DF85], an algorithm using Knuth-Bendix orderings [KB70] is presented in [Mar87] and a system which is able to handle general path orderings is presented in [DH93]. Implementations using polynomial order-ings <ref> [Lan79] </ref> have been developed by A. Ben Cherifa and P. Lescanne [BL87] and J. Steinbach [Ste91], [Ste92]. While the systems in [BL87] and [Ste92] only prove termination with a given polynomial ordering, Steinbach [Ste91] describes a system that tries to generate a suited polynomial ordering automatically. <p> This is an extended version of a paper presented at the 6th International Conference on Rewriting Tech niques and Applications, [Gie95]. 2 Semi-Automatic Termination Proofs The use of polynomial orderings for termination proofs has been suggested by D. S. Lankford <ref> [Lan79] </ref>. A polynomial interpretation t associates an integer multivariate polynomial f t (x 1 ; : : : ; x n ) with each n-ary function symbol f . <p> Therefore it is sufficient for R's termination if the inequalities (7) - (9) hold for all instantiations of x; y; z with integers greater or equal than 2. Now the problem is how to prove such a requirement. Note that in general this question is undecidable <ref> [Lan79] </ref>. Instead of demanding that inequality (9) should hold for all x; y; z 2, it is sufficient if this inequality holds for x = 2 and if 2xyz+2xy2xz is not decreasing when x is increasing.
Reference: [Lau88] <author> C. Lautemann. </author> <title> A Note on Polynomial Interpretations. </title> <journal> Bulletin of the Eu-ropean Association for Theoretical Computer Science, </journal> <volume> 4 </volume> <pages> 129-131, </pages> <year> 1988. </year>
Reference-contexts: A discussion on the class of term rewriting systems whose termination can be proved using polynomial orderings can be found in [Les86], <ref> [Lau88] </ref>, [HL89], [CL92]. Most systems for "automated" termination proofs using polynomial order-ings are semi-automatic, i.e. the user has to provide a polynomial interpretation and the system checks whether the trs is compatible with the corresponding polynomial ordering.
Reference: [Les86] <author> P. Lescanne. </author> <title> Divergence of the Knuth-Bendix Completion Procedure and Termination Orderings. </title> <journal> Bulletin of the European Association for Theoretical Computer Science, </journal> <volume> 30 </volume> <pages> 80-83, </pages> <year> 1986. </year>
Reference-contexts: A discussion on the class of term rewriting systems whose termination can be proved using polynomial orderings can be found in <ref> [Les86] </ref>, [Lau88], [HL89], [CL92]. Most systems for "automated" termination proofs using polynomial order-ings are semi-automatic, i.e. the user has to provide a polynomial interpretation and the system checks whether the trs is compatible with the corresponding polynomial ordering.
Reference: [Mar87] <author> U. Martin. </author> <title> How to choose Weights in the Knuth-Bendix Ordering. </title> <booktitle> In Proc. 2nd Int. Conf. on Rewriting Techniques and Applications, </booktitle> <address> Bordeaux, France, </address> <year> 1987. </year>
Reference-contexts: This paper is concerned with the automation of termination proofs. Approaches for automated termination proofs using path orderings [Pla78], [Der82] are described in [At85] and [DF85], an algorithm using Knuth-Bendix orderings [KB70] is presented in <ref> [Mar87] </ref> and a system which is able to handle general path orderings is presented in [DH93]. Implementations using polynomial order-ings [Lan79] have been developed by A. Ben Cherifa and P. Lescanne [BL87] and J. Steinbach [Ste91], [Ste92].
Reference: [Mid89] <author> A. Middeldorp. </author> <title> A Sufficient Condition for the Termination of the Direct Sum of Term Rewriting Systems. </title> <booktitle> In Proc. 4th Annual Symposium on Logic in Computer Science, </booktitle> <address> Pacific Grove, CA, </address> <year> 1989. </year>
Reference: [Pla78] <author> D. A. Plaisted. </author> <title> A Recursively Defined Ordering for Proving Termination of Term Rewriting Systems. </title> <type> Report R-78-943, </type> <institution> Univ. Illinois, Urbana, IL, </institution> <year> 1978. </year>
Reference-contexts: While in general this problem is undecidable [HL78], several methods for proving termination have been presented, cf. [Der87a]. This paper is concerned with the automation of termination proofs. Approaches for automated termination proofs using path orderings <ref> [Pla78] </ref>, [Der82] are described in [At85] and [DF85], an algorithm using Knuth-Bendix orderings [KB70] is presented in [Mar87] and a system which is able to handle general path orderings is presented in [DH93]. Implementations using polynomial order-ings [Lan79] have been developed by A. Ben Cherifa and P.
Reference: [Ste89] <author> J. Steinbach. </author> <title> Extensions and Comparison of Simplification Orderings. </title> <booktitle> Proc. 3rd Int. Conf. Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, NC, </address> <year> 1989. </year>
Reference-contexts: He showed that it is sufficient for termination if a trs is compatible with a simplification ordering (i.e. a monotonic ordering possessing the subterm property f (: : : x : : :) x). For a survey on simplification orderings see <ref> [Ste89] </ref>, [Ste93] and [Ste94]. This result was strengthened in [Der82] by stating that for termination it is already sufficient if the trs is compatible with the strict part of a quasi-simplification ordering -.
Reference: [Ste91] <author> J. Steinbach. </author> <title> Termination Proofs of Rewriting Systems | Heuristics for Generating Polynomial Orderings. </title> <institution> SEKI-Report SR-91-14, Univ. Kaiser-slautern, Germany, </institution> <year> 1991. </year>
Reference-contexts: Implementations using polynomial order-ings [Lan79] have been developed by A. Ben Cherifa and P. Lescanne [BL87] and J. Steinbach <ref> [Ste91] </ref>, [Ste92]. While the systems in [BL87] and [Ste92] only prove termination with a given polynomial ordering, Steinbach [Ste91] describes a system that tries to generate a suited polynomial ordering automatically. <p> Implementations using polynomial order-ings [Lan79] have been developed by A. Ben Cherifa and P. Lescanne [BL87] and J. Steinbach <ref> [Ste91] </ref>, [Ste92]. While the systems in [BL87] and [Ste92] only prove termination with a given polynomial ordering, Steinbach [Ste91] describes a system that tries to generate a suited polynomial ordering automatically. In this paper we present a new method for automated termination proofs using polynomial orderings, which is based on a variant of Lankford's partial derivative technique. <p> Every instantiation satisfying these constraints is compatible with the given trs. A discussion on how to find such an instantiation automatically follows in section 4. To generate a polynomial interpretation we first have to decide on the maximum degree of the polynomials. We follow a heuristic from <ref> [Ste91] </ref> and associate 5 a simple-mixed 3 polynomial with each function symbol. Alternatively, one could first try to prove the termination of R with polynomials of maximum degree 1, then try polynomials with maximum degree 2 etc. and give up if the maximum degree exceeds a certain upper bound. <p> A unary polynomial p is simple-mixed if it has the form ff 0 + ff 1 x or ff 0 + ff 2 x 2 . In <ref> [Ste91] </ref> Steinbach conducted 320 experiments with trs from literature and noticed that 96 % of those trs which are compatible with a polynomial ordering are compatible with a simple-mixed polynomial ordering. 6 If we find an instantiation of the variable coefficients such that (13) - (16) are valid, then due to <p> Therefore by theorem 2 the termination of R is proved. Instead of the differentiation rules we could also use Steinbach's technique [Ste92] for the elimination of the rule variables x; y; z (as suggested in <ref> [Ste91] </ref>). But while Steinbach's technique introduces several new variables, the advantage of (Diff1) and (Diff2) is that these rules introduce only one new variable . For the generation of a polynomial ordering compatible with R we therefore only have to find an instantiation of the variable coefficients and . <p> Check whether these inequalities are satisfied by an instantiation with num bers from f0; 1; 2g. 3. If not, try to prove their satisfiability by a modified version of Collins' algo rithm. An alternative approach for the automated generation of the "right" polynomial interpretation has been presented by Steinbach <ref> [Ste91] </ref>. It is based on a technique of approximating polynomials by monomials which can be useful if the number of variable coefficients is small. In these cases Steinbach's method may also be used to search for an instantiation that satisfies the inequalities resulting from theorem 3. <p> The second row contains the execution time our algorithm needs to generate a polynomial interpretation which is compatible with the trs in the first row. 13 Example Time Nested Function Symbols ([Ste91, Example 8.1]) 0.1 sec. Endomorphism & Associativity ([Bel84], [BL87]) 0.1 sec. Running Example 6.1 in <ref> [Ste91] </ref> (by A. Middeldorp) 0.2 sec. Binomial Coefficients ([Ste91, Example 8.8], [Ste92, Example 13]) 1.6 sec. Distributivity & Associativity ([Der87a, p. 78]) 1.9 sec. Table 1.
Reference: [Ste92] <author> J. Steinbach. </author> <title> Proving Polynomials Positive. </title> <booktitle> In Proc. 12th Conf. on Foundations of Software Technology and Theoretical Computer Science, </booktitle> <address> New Delhi, India, </address> <year> 1992. </year>
Reference-contexts: Implementations using polynomial order-ings [Lan79] have been developed by A. Ben Cherifa and P. Lescanne [BL87] and J. Steinbach [Ste91], <ref> [Ste92] </ref>. While the systems in [BL87] and [Ste92] only prove termination with a given polynomial ordering, Steinbach [Ste91] describes a system that tries to generate a suited polynomial ordering automatically. <p> Implementations using polynomial order-ings [Lan79] have been developed by A. Ben Cherifa and P. Lescanne [BL87] and J. Steinbach [Ste91], <ref> [Ste92] </ref>. While the systems in [BL87] and [Ste92] only prove termination with a given polynomial ordering, Steinbach [Ste91] describes a system that tries to generate a suited polynomial ordering automatically. In this paper we present a new method for automated termination proofs using polynomial orderings, which is based on a variant of Lankford's partial derivative technique. <p> In this section we introduce such a semi-automatic system and compare it to the ones in [BL87] and <ref> [Ste92] </ref>. We will first illustrate our approach with an example from [Bel84] and [BL87]. Let T consist of all terms constructed from the constant a, the unary function symbol map and the binary function symbol ffi. <p> A different semi-automatic method has been presented by Ben Cherifa and Lescanne [BL87]. As their approach uses a heuristic (which can fail), their method was improved by Steinbach <ref> [Ste92] </ref> who developed a system which has the same power as the one of [BL87] if the latter is extended by a backtracking component. Moreover, he eliminated the restriction of [BL87] to the fixed minimal value = 2. A comparison of our method with the ones of [Ste92] and [BL87] (the <p> improved by Steinbach <ref> [Ste92] </ref> who developed a system which has the same power as the one of [BL87] if the latter is extended by a backtracking component. Moreover, he eliminated the restriction of [BL87] to the fixed minimal value = 2. A comparison of our method with the ones of [Ste92] and [BL87] (the latter one extended by backtracking and arbitrary ) leads to the following results 2 : 2 Detailed proofs of the following observations can be found in the appendix. 4 If [Ste92] and [BL87] can prove a polynomial p positive, then our method can do so as well. <p> A comparison of our method with the ones of <ref> [Ste92] </ref> and [BL87] (the latter one extended by backtracking and arbitrary ) leads to the following results 2 : 2 Detailed proofs of the following observations can be found in the appendix. 4 If [Ste92] and [BL87] can prove a polynomial p positive, then our method can do so as well. The reason is, that if p &gt; 0 can be proved by the methods of [Ste92] and [BL87] then @p @x 0 can also be proved with their methods (and therefore it must be <p> results 2 : 2 Detailed proofs of the following observations can be found in the appendix. 4 If <ref> [Ste92] </ref> and [BL87] can prove a polynomial p positive, then our method can do so as well. The reason is, that if p &gt; 0 can be proved by the methods of [Ste92] and [BL87] then @p @x 0 can also be proved with their methods (and therefore it must be valid). Hence, repeated application of (Diff1) and (Diff2) transforms p &gt; 0 into a set of valid inequalities. <p> Hence, repeated application of (Diff1) and (Diff2) transforms p &gt; 0 into a set of valid inequalities. If our method can prove p positive for all x 1 ; : : : ; x n , then there exists a 0 such that the methods of <ref> [Ste92] </ref> and [BL87] can prove p positive for all x 1 ; : : : ; x n 0 . But it is not always possible to choose 0 = . For example, the systems of [Ste92] and [BL87] can prove x 2 2x + 2 &gt; 0 only for x <p> ; x n , then there exists a 0 such that the methods of <ref> [Ste92] </ref> and [BL87] can prove p positive for all x 1 ; : : : ; x n 0 . But it is not always possible to choose 0 = . For example, the systems of [Ste92] and [BL87] can prove x 2 2x + 2 &gt; 0 only for x 3 while our method can already prove it for x 1. While the worst case complexity of the systems in [Ste92] and [BL87] is exponential in the number of monomials in p, our method is exponential <p> For example, the systems of <ref> [Ste92] </ref> and [BL87] can prove x 2 2x + 2 &gt; 0 only for x 3 while our method can already prove it for x 1. While the worst case complexity of the systems in [Ste92] and [BL87] is exponential in the number of monomials in p, our method is exponential in the number of its variables. More precisely, the complexity of our method to prove a r-variate polynomial with degree d positive is O (d r ). In [Ste92], Steinbach also suggested the additional use <p> case complexity of the systems in <ref> [Ste92] </ref> and [BL87] is exponential in the number of monomials in p, our method is exponential in the number of its variables. More precisely, the complexity of our method to prove a r-variate polynomial with degree d positive is O (d r ). In [Ste92], Steinbach also suggested the additional use of the arithmetic-mean-geometric-mean inequality. This allows proofs that are not possible with our approach. <p> Therefore by theorem 2 the termination of R is proved. Instead of the differentiation rules we could also use Steinbach's technique <ref> [Ste92] </ref> for the elimination of the rule variables x; y; z (as suggested in [Ste91]). But while Steinbach's technique introduces several new variables, the advantage of (Diff1) and (Diff2) is that these rules introduce only one new variable . <p> Endomorphism & Associativity ([Bel84], [BL87]) 0.1 sec. Running Example 6.1 in [Ste91] (by A. Middeldorp) 0.2 sec. Binomial Coefficients ([Ste91, Example 8.8], <ref> [Ste92, Example 13] </ref>) 1.6 sec. Distributivity & Associativity ([Der87a, p. 78]) 1.9 sec. Table 1. <p> A Proofs In this appendix we give detailed proofs for the observations in section 2 concerning the comparison of our method with the ones of <ref> [Ste92] </ref> and [BL87]. Observation 1 If [Ste92] and [BL87] can prove a polynomial p positive, then our method can do so as well. <p> A Proofs In this appendix we give detailed proofs for the observations in section 2 concerning the comparison of our method with the ones of <ref> [Ste92] </ref> and [BL87]. Observation 1 If [Ste92] and [BL87] can prove a polynomial p positive, then our method can do so as well. <p> Moreover, (41) implies (43) (as k 1 i 1 ). Hence, (39) is proved. Observation 2 If our method can prove p positive for all x 1 ; : : : ; x n , then there exists a 0 such that the methods of <ref> [Ste92] </ref> and [BL87] can prove p positive for all x 1 ; : : : ; x n 0 . Proof: Let p be a polynomial as above. <p> Therefore if 0 is sufficiently large, then p &gt; 0 (or p 0) can also be proved using the method of Steinbach. 15 Observation 3 While the worst case complexity of the systems in <ref> [Ste92] </ref> and [BL87] is exponential in the number of monomials in p, our method is exponential in the number of its variables. Proof: For a proof on the complexity of the systems in [Ste92] and [BL87] the reader is referred to [Ste92]. <p> using the method of Steinbach. 15 Observation 3 While the worst case complexity of the systems in <ref> [Ste92] </ref> and [BL87] is exponential in the number of monomials in p, our method is exponential in the number of its variables. Proof: For a proof on the complexity of the systems in [Ste92] and [BL87] the reader is referred to [Ste92]. The complexity of our method to prove p &gt; 0 (or p 0) is O (n r ) if p is a r-variate polynomial of degree n. We will prove this conjecture by induction on the number of variables r. <p> While the worst case complexity of the systems in <ref> [Ste92] </ref> and [BL87] is exponential in the number of monomials in p, our method is exponential in the number of its variables. Proof: For a proof on the complexity of the systems in [Ste92] and [BL87] the reader is referred to [Ste92]. The complexity of our method to prove p &gt; 0 (or p 0) is O (n r ) if p is a r-variate polynomial of degree n. We will prove this conjecture by induction on the number of variables r.
Reference: [Ste93] <author> J. Steinbach. </author> <title> Simplification Orderings: Putting them to the Test. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 10(3): </volume> <pages> 389-397, </pages> <year> 1993. </year>
Reference-contexts: He showed that it is sufficient for termination if a trs is compatible with a simplification ordering (i.e. a monotonic ordering possessing the subterm property f (: : : x : : :) x). For a survey on simplification orderings see [Ste89], <ref> [Ste93] </ref> and [Ste94]. This result was strengthened in [Der82] by stating that for termination it is already sufficient if the trs is compatible with the strict part of a quasi-simplification ordering -.
Reference: [Ste94] <author> J. Steinbach. </author> <title> Termination of Rewriting | Extensions, Comparison and Automatic Generation of Simplification Orderings. </title> <type> Doctoral Dissertation, </type> <institution> Univ. Kaiserslautern, Germany, </institution> <year> 1994. </year>
Reference-contexts: He showed that it is sufficient for termination if a trs is compatible with a simplification ordering (i.e. a monotonic ordering possessing the subterm property f (: : : x : : :) x). For a survey on simplification orderings see [Ste89], [Ste93] and <ref> [Ste94] </ref>. This result was strengthened in [Der82] by stating that for termination it is already sufficient if the trs is compatible with the strict part of a quasi-simplification ordering -.
Reference: [Tar51] <author> A. Tarski. </author> <title> A Decision Method for Elementary Algebra and Geometry. </title> <institution> University of California Press, Berkeley, </institution> <year> 1951. </year> <month> 18 </month>
Reference-contexts: It is undecidable whether there exists an instantiation with integers satisfying a set of inequalities. But if we regard instantiations with real numbers this problem becomes decidable <ref> [Tar51] </ref>. Then decision methods for elementary algebra (e.g. [Tar51], [Coh69], [Col75]) can be used for the synthesis of the "right" instantiation. To be compatible with an integer polynomial ordering is sufficient for the termination of a trs. <p> It is undecidable whether there exists an instantiation with integers satisfying a set of inequalities. But if we regard instantiations with real numbers this problem becomes decidable <ref> [Tar51] </ref>. Then decision methods for elementary algebra (e.g. [Tar51], [Coh69], [Col75]) can be used for the synthesis of the "right" instantiation. To be compatible with an integer polynomial ordering is sufficient for the termination of a trs. This is because for a non-terminating trs there would have to be an infinite derivation of ground terms.
References-found: 34

