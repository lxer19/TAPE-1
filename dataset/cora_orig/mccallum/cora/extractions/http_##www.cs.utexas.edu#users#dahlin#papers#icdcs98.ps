URL: http://www.cs.utexas.edu/users/dahlin/papers/icdcs98.ps
Refering-URL: http://www.cs.utexas.edu/users/dahlin/papers.html
Root-URL: 
Title: Using Leases to Support Server-Driven Consistency in Large-Scale Systems  
Author: Jian Yin, Lorenzo Alvisi, Michael Dahlin, and Calvin Lin 
Address: Austin  
Affiliation: Computer Sciences Department University of Texas at  
Abstract: This paper introduces volume leases as a mechanism for providing cache consistency for large-scale, geographically distributed networks. Volume leases are a variation of leases, which were originally designed for distributed file systems. Using trace-driven simulation, we compare two new algorithms against four existing cache consistency algorithms and show that our new algorithms provide strong consistency while maintaining scalability and fault-tolerance. For a trace-based workload of web accesses, we find that volumes can reduce message traffic at servers by 40% compared to a standard lease algorithm, and that volumes can considerably reduce the peak load at servers when popular objects are modified. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Berners-Lee, R. Fielding, and H. Frystyk Nielsen. </author> <title> Hypertext Transfer Protocol HTTP/1.0. Internet Draft draft-ietf-http-v10-spec-00, </title> <institution> Internet Engineering Task Force, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Short leases and client polling may reduce these unnecessary messages. Finally, we assume that the system maintains cache consistency on entire files rather than on some finer granularity. We chose to examine whole-file consistency because this is currently the most common approach for WAN workloads <ref> [1] </ref>. Fine-grained consistency may reduce the amount of data traffic, but it also increases the number of control messages required by the consistency algorithm.
Reference: [2] <author> A. Bestavros. </author> <title> Speculative Data Disseminatino and Service to Reduce Server Load, Network Traffic, and Service Time in Distributed Information Systems. </title> <booktitle> In International Conference on Data Engineering, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: Although these traces contain detailed information about client reads, they do not indicate when files are modified. We therefore synthesize writes to the objects using a simple model based on two studies of write patterns for web pages. Bestavros <ref> [2] </ref> examined traces of the Boston University web server, and Gwertzman and Seltzer [7] examined the write patterns of three university web servers. Both studies concluded that few files change rapidly, and that globally popular files are less likely to change than other files.
Reference: [3] <author> P. Chen, W. Ng, S. Chandra, C. Aycock, G. Rajamani, and D. Lowell. </author> <title> The Rio File Cache: Surviving Operating System Crashes. </title> <booktitle> In Proceedings of the Seventh International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-VII), </booktitle> <month> Oc-tober </month> <year> 1996. </year>
Reference-contexts: If the epoch number is current, then volume lease renewal proceeds normally. If the epoch number is old, then the server treats the client as if the client were in the volume's Unreachable set. It is also possible to store the cache consistency information on stable storage <ref> [3, 6] </ref>. This approach reduces recovery time at the cost increased overhead on normal lease renewals. We do not investigate this approach in this paper. 3.1.3 The cost of volume leases.
Reference: [4] <author> C. Cunha, A. Bestavros, and M. Crovella. </author> <title> Characteristics of WWW Traces. </title> <type> Technical Report TR-95-010, </type> <institution> Boston University Department of Computer Science, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: Thus, fine-grained cache consistency would likely increase the relative differences among the algorithms. 4.2 Workload We use a workload based on traces of HTTP accesses at Boston University <ref> [4] </ref>. These traces span four months during January 1995 through May 1995 and include all HTTP accesses by Mosaic browsersincluding local cache hitsfor 33 SPARCstations. Although these traces contain detailed information about client reads, they do not indicate when files are modified.
Reference: [5] <author> C. Gray and D. Cheriton. Leases: </author> <title> An Efficient Fault-Tolerant Mechanism for Distributed File Cache Consistency. </title> <booktitle> In Proceedings of the Twelfth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 202210, </pages> <year> 1989. </year>
Reference-contexts: Second, a server may require a significant amount of memory to track which clients cache which objects. Third, sending cache invalidation messages may entail large bursts of server activity when popular objects are modified. In distributed file systems, the problems of server driven protocols were addressed by using leases <ref> [5] </ref>, which specify a length of time during which servers notify clients of modifications to cached data. After a lease's timeout ex pires, clients must renew the lease by sending a message to the server before they may access the cached object. <p> Furthermore, if a client has crashed or if a network partition separates a server from a client, then a write may be delayed indefinitely. 2.4 Lease To address the limitations of Callback, Gray and Cheriton proposed Lease <ref> [5] </ref>. To read an object, a client first acquires a lease for it with an associated timeout t. The client may then read the cached copy until the lease expires. When an object is modified, the object's server invalidates the cached objects of all clients whose leases have not expired.
Reference: [6] <author> James N. Gray. </author> <title> Notes on data base operating systems. </title> <editor> In R. Bayer, R. M. Graham, and G. Seegmueller, editors, </editor> <booktitle> Operating Systems: An Advanced Course, </booktitle> <pages> pages 393481. </pages> <year> 1977. </year> <note> Lecture Notes on Computer Science 60. </note>
Reference-contexts: If the epoch number is current, then volume lease renewal proceeds normally. If the epoch number is old, then the server treats the client as if the client were in the volume's Unreachable set. It is also possible to store the cache consistency information on stable storage <ref> [3, 6] </ref>. This approach reduces recovery time at the cost increased overhead on normal lease renewals. We do not investigate this approach in this paper. 3.1.3 The cost of volume leases.
Reference: [7] <author> J. Gwertzman and M. Seltzer. </author> <title> World-Wide Web Cache Consistency. </title> <booktitle> In Proceedings of the 1996 USENIX Technical Conference, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: On the other hand, long timeouts increase the likelihood that caches will supply stale data to applications. Gwertz-man and Seltzer <ref> [7] </ref> show that for web browser workloads, even for a timeout of ten days, server load is significantly higher than under the Callback algorithm described below. <p> Unfortunately, for many WAN workloads, reads of an object may be spread over seconds or minutes, requiring long leases in order to amortize the cost of renewals <ref> [7] </ref>. To make leases practical for these workloads, our algorithms use a combination of object leases, which are associated with individual data objects, and volume leases, which are associated with a collection of related objects on the same server. <p> The simulator records the size and number of messages sent by each server and each client, as well as the size of the cache consistency state maintained at each server. We validated the simulator in two ways. First, we obtained Gwertzman and Seltzer's simulator <ref> [7] </ref> and one of their traces, and compared our simulator's results to theirs for the algorithms that are common between the two studies. Second, we used our simulator to examine our algorithms under simple synthetic workloads for which we could analytically compute the expected results. <p> We therefore synthesize writes to the objects using a simple model based on two studies of write patterns for web pages. Bestavros [2] examined traces of the Boston University web server, and Gwertzman and Seltzer <ref> [7] </ref> examined the write patterns of three university web servers. Both studies concluded that few files change rapidly, and that globally popular files are less likely to change than other files. <p> This workload significantly increases the bursts of invalidation traffic for Volume and Callback. 6 Related work Our study builds on efforts to assess the cost of strong consistency in wide area networks. Gwertzman and Seltzer <ref> [7] </ref> compare cache consistency approaches through simulation, and conclude that protocols that provide weak consistency are the most suitable to a Web-like environment.
Reference: [8] <author> J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satya-narayanan, R. Sidebotham, and M. West. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1):5181, </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: The primary disadvantage of this algorithm is read performance, as all reads are delayed by a roundtrip message between the client and the server. In addition, these messages may impose significant load on the servers <ref> [8] </ref>. 2.2 Poll Poll is based on Poll Each Read, but it assumes that cached objects remain valid for at least a timeout period of t Reads Writes State Expected stale time Worst stale time Read cost Write cost Ack wait delay Server state (seconds) (seconds) (messages) (messages) (seconds) (bytes) Poll <p> In this case, servers can tell clients to use cached copies of objects until the time of the next modification. For this study, we do not assume that servers have such information about the future. 2.3 Callback In a Callback algorithm <ref> [8, 12] </ref>, servers keep track of which clients are caching which objects. Before modifying an object, a server notifies the clients with copies of the object and does not proceed with the modification until it has received an acknowledgment from each client. <p> Also, our volume leases provide a graceful way to handle network partitions; when a network failure occurs, Liu and Cao's algorithm must periodically retransmit invalidation messages, and it does not guarantee strong consistency in that case. Cache consistency protocols have long been studied for distributed file systems <ref> [8, 12, 13] </ref>. Several aspects of Coda's [9] consistency protocol are reflected in our algorithms. In particular, our notion a volume is similar to that used in Coda [11]. However, ours differsin two key respects.
Reference: [9] <author> J. Kistler and M. Satyanarayanan. </author> <title> Disconnected Operation in the Coda File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1):325, </volume> <month> February </month> <year> 1992. </year>
Reference-contexts: Cache consistency protocols have long been studied for distributed file systems [8, 12, 13]. Several aspects of Coda's <ref> [9] </ref> consistency protocol are reflected in our algorithms. In particular, our notion a volume is similar to that used in Coda [11]. However, ours differsin two key respects. First, Coda does not associate volumes with leases, and relies instead on other methods to determine when servers and clients become disconnected.
Reference: [10] <author> C. Liu and P. Cao. </author> <title> Maintaining Strong Cache Consistency in the World-Wide Web. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: Rather than contacting all clients that have ever read an object, a server need only contact recently active clients that hold leases on that object. Leases can thus reduce the amount of state that the server maintains to track clients, as well as the cost of sending invalidation messages <ref> [10] </ref>. Servers may also choose to invalidate caches by simply waiting for all outstanding leases to expire rather than by sending messages to a large number of clients; we do not explore this option in this study. Lease presents a tradeoff similar to the one offered by Poll. <p> We arrive at different conclusions. In particular, we observe that much of the apparent advantage of weak consistency over strong consistency in terms of network traffic comes from clients reading stale data <ref> [10] </ref>. Also, we use volume leases to address many of the challenges to strong consistency. We also build on the work of Liu and Cao [10], who use a prototype server invalidation system to evaluate the overhead of maintaining consistency at the servers compared to client polling. <p> we observe that much of the apparent advantage of weak consistency over strong consistency in terms of network traffic comes from clients reading stale data <ref> [10] </ref>. Also, we use volume leases to address many of the challenges to strong consistency. We also build on the work of Liu and Cao [10], who use a prototype server invalidation system to evaluate the overhead of maintaining consistency at the servers compared to client polling. They also study ways to reduce server state via per-object leases.
Reference: [11] <author> L. Mummert and M. Satyanarayanan. </author> <title> Large Granularity Cache Coherence for Intermittent Connectivity. </title> <booktitle> In Proceedings of the Summer 1994 USENIX Conference, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: Cache consistency protocols have long been studied for distributed file systems [8, 12, 13]. Several aspects of Coda's [9] consistency protocol are reflected in our algorithms. In particular, our notion a volume is similar to that used in Coda <ref> [11] </ref>. However, ours differsin two key respects. First, Coda does not associate volumes with leases, and relies instead on other methods to determine when servers and clients become disconnected. The combination of short volume leases and long object leases is one of our main contributions.
Reference: [12] <author> M. Nelson, B. Welch, and J. Ousterhout. </author> <title> Caching in the Sprite Network File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1), </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: In this case, servers can tell clients to use cached copies of objects until the time of the next modification. For this study, we do not assume that servers have such information about the future. 2.3 Callback In a Callback algorithm <ref> [8, 12] </ref>, servers keep track of which clients are caching which objects. Before modifying an object, a server notifies the clients with copies of the object and does not proceed with the modification until it has received an acknowledgment from each client. <p> In LAN systems, servers often reconstruct this state by polling their clients <ref> [12] </ref>. This approach is impractical in a WAN, so our protocol allows a server to incrementally construct a valid view of the object lease state, while relying on volume lease expiration to prevent clients from using leases that were granted by a failed server. <p> Also, our volume leases provide a graceful way to handle network partitions; when a network failure occurs, Liu and Cao's algorithm must periodically retransmit invalidation messages, and it does not guarantee strong consistency in that case. Cache consistency protocols have long been studied for distributed file systems <ref> [8, 12, 13] </ref>. Several aspects of Coda's [9] consistency protocol are reflected in our algorithms. In particular, our notion a volume is similar to that used in Coda [11]. However, ours differsin two key respects.
Reference: [13] <author> V. Srinivasan and J. Mogul. Spritely NFS: </author> <title> Experiments with Cache Consistency Protocols. </title> <booktitle> In Proceedings of the Twelfth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 4557, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: Also, our volume leases provide a graceful way to handle network partitions; when a network failure occurs, Liu and Cao's algorithm must periodically retransmit invalidation messages, and it does not guarantee strong consistency in that case. Cache consistency protocols have long been studied for distributed file systems <ref> [8, 12, 13] </ref>. Several aspects of Coda's [9] consistency protocol are reflected in our algorithms. In particular, our notion a volume is similar to that used in Coda [11]. However, ours differsin two key respects.
References-found: 13

