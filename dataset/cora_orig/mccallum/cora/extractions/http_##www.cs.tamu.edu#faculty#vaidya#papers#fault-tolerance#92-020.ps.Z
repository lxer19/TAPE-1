URL: http://www.cs.tamu.edu/faculty/vaidya/papers/fault-tolerance/92-020.ps.Z
Refering-URL: http://www.cs.tamu.edu/faculty/vaidya/Vaidya-ftc.html
Root-URL: http://www.cs.tamu.edu
Title: Degradable Agreement in the Presence of Byzantine Faults  
Abstract: Nitin H. Vaidya Technical Report # 92-020 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> I. S. Bhandari, </author> <title> "On the graceful degradation of byzantine agreement," </title> <type> Master's thesis, </type> <institution> University of Massachusetts-Amherst, </institution> <month> September </month> <year> 1985. </year>
Reference-contexts: This illustrates the trade-off between Byzantine agreement and degraded agreement. The following table lists the minimum number of nodes necessary for different values of m and u. m 2 - 7 8 9 10 Bhandari <ref> [1] </ref> looks at algorithms which correctly achieve interactive consistency [9] up to N1 3 faults in an N node system. Bhandari proves that graceful degradations is 3 impossible with such algorithms if the number of faults is more than N=3.
Reference: [2] <author> D. Dolev, </author> <title> "The Byzantine generals strike again," </title> <journal> J. </journal> <volume> Algo., </volume> <pages> pp. 14-30, </pages> <year> 1982. </year>
Reference-contexts: 1 Introduction Consider a system consisting of a sender that wants to send a value to certain receivers. Byzantine agreement (weak [6] or otherwise [7]) and Crusader agreement <ref> [2] </ref> protocols have been proposed to achieve this in the presence of arbitrary (possibly malicious) failures. The requirement is typically that the fault-free receivers must all agree on the same value [7, 6]. (Dolev [2] analyzes a seemingly weaker form of agreement). <p> Byzantine agreement (weak [6] or otherwise [7]) and Crusader agreement <ref> [2] </ref> protocols have been proposed to achieve this in the presence of arbitrary (possibly malicious) failures. The requirement is typically that the fault-free receivers must all agree on the same value [7, 6]. (Dolev [2] analyzes a seemingly weaker form of agreement). Prior work has shown that such agreements are impossible if a third of the nodes (or more) are faulty. This report also assumes the arbitrary failure model which is also known as the Byzantine failure model. <p> For the sake of simplicity, this report draws on and extends the concepts presented in two well-known report by Lamport et al. [7] and Dolev <ref> [2] </ref>. Section 2 defines the proposed degradable agreement approach. Section 3 motivates the proposed approach and discusses an application. An algorithm for achieving the proposed agreement is presented in Section 4. <p> Theorem 3 Given N nodes, m=u-degradable agreement can be achieved only if the network connectivity is at least m + u + 1. Proof: Instead of a formal proof, a sketch is presented. This sketch is similar to the proof of the lower bound for Crusader agreement in <ref> [2] </ref>. Let G be the network of nodes under consideration. Let the connectivity of G be m + u. It is clear that must be at least 2m + 1, otherwise even Byzantine agreement is not possible with m faults. Thus, 2m &lt; m+u.
Reference: [3] <author> D. Dolev, J. Y. Halpern, and H. R. </author> <title> Strong, "On the possibility and impossibility of achieving clock synchronization," </title> <journal> J. Computer and System Sciences, </journal> <volume> vol. 32, </volume> <pages> pp. 230-250, </pages> <year> 1986. </year>
Reference-contexts: Proof of correctness for the m=u-degradable agreement algorithm presented in this report assumes that the clocks on all the fault-free nodes are synchronized. It is known that if a third (or more) of the clocks are faulty, it is not possible to achieve clock synchronization <ref> [3, 5] </ref>. Section 6 discusses this issue. 3 Motivation: Forward and Backward Recovery Consider a fault tolerant system consisting of multiple computation channels. Figure 1 (a) illustrates a system with three channels. <p> In order to ensure that the absence of a message can be detected, it is necessary to synchronize the clocks of all the fault-free nodes. However, it has been shown that clock synchronization cannot be achieved if a third (or more) clocks are faulty <ref> [3, 5] </ref>. When using m=u-degradable agreement, u may be larger than a third of the number of nodes. Thus, clock synchronization cannot be guaranteed if a node being faulty necessarily implies that its clock is faulty as well.
Reference: [4] <author> R. E. Harper, J. H. Lala, and J. J. Deyst, </author> <title> "Fault tolerant parallel processor architecture overview," </title> <booktitle> in Digest of papers: The 18 th Int. Symp. Fault-Tolerant Comp., </booktitle> <pages> pp. 252-257, </pages> <year> 1988. </year>
Reference-contexts: This conjecture is being investigated currently. The reader can verify that the impossibility result in [5] does not as such apply to the above problem. 6.2 Traditional Clock Synchronization One solution, applicable to systems such as FTMP, NETS [11] and FTP <ref> [4] </ref>, is the use of hardware clock synchronization (as opposed to software algorithms). In typical systems, the complexity and cost of clock hardware is orders of magnitude lower as compared to the processor (or node) complexity. Therefore, the failure rates for clock hardware are likely to be significantly lower.
Reference: [5] <author> C. M. Krishna and I. S. Bhandari, </author> <title> "On graceful degradation of phase locked clocks," </title> <booktitle> in IEEE Real-Time Systems Symposium, </booktitle> <pages> pp. 202-211, </pages> <year> 1988. </year>
Reference-contexts: Proof of correctness for the m=u-degradable agreement algorithm presented in this report assumes that the clocks on all the fault-free nodes are synchronized. It is known that if a third (or more) of the clocks are faulty, it is not possible to achieve clock synchronization <ref> [3, 5] </ref>. Section 6 discusses this issue. 3 Motivation: Forward and Backward Recovery Consider a fault tolerant system consisting of multiple computation channels. Figure 1 (a) illustrates a system with three channels. <p> In order to ensure that the absence of a message can be detected, it is necessary to synchronize the clocks of all the fault-free nodes. However, it has been shown that clock synchronization cannot be achieved if a third (or more) clocks are faulty <ref> [3, 5] </ref>. When using m=u-degradable agreement, u may be larger than a third of the number of nodes. Thus, clock synchronization cannot be guaranteed if a node being faulty necessarily implies that its clock is faulty as well. <p> This conjecture is being investigated currently. The reader can verify that the impossibility result in <ref> [5] </ref> does not as such apply to the above problem. 6.2 Traditional Clock Synchronization One solution, applicable to systems such as FTMP, NETS [11] and FTP [4], is the use of hardware clock synchronization (as opposed to software algorithms).
Reference: [6] <author> L. Lamport, </author> <title> "The weak Byzantine generals problem," </title> <journal> J. ACM, </journal> <volume> vol. 30, </volume> <pages> pp. 668-676, </pages> <month> July </month> <year> 1983. </year>
Reference-contexts: 1 Introduction Consider a system consisting of a sender that wants to send a value to certain receivers. Byzantine agreement (weak <ref> [6] </ref> or otherwise [7]) and Crusader agreement [2] protocols have been proposed to achieve this in the presence of arbitrary (possibly malicious) failures. The requirement is typically that the fault-free receivers must all agree on the same value [7, 6]. (Dolev [2] analyzes a seemingly weaker form of agreement). <p> Byzantine agreement (weak [6] or otherwise [7]) and Crusader agreement [2] protocols have been proposed to achieve this in the presence of arbitrary (possibly malicious) failures. The requirement is typically that the fault-free receivers must all agree on the same value <ref> [7, 6] </ref>. (Dolev [2] analyzes a seemingly weaker form of agreement). Prior work has shown that such agreements are impossible if a third of the nodes (or more) are faulty. This report also assumes the arbitrary failure model which is also known as the Byzantine failure model.
Reference: [7] <author> L. Lamport, R. Shostak, and M. Pease, </author> <title> "The Byzantine generals problem," </title> <journal> ACM Trans. Prog. Lang. Syst., </journal> <volume> vol. 4, </volume> <pages> pp. 382-401, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: 1 Introduction Consider a system consisting of a sender that wants to send a value to certain receivers. Byzantine agreement (weak [6] or otherwise <ref> [7] </ref>) and Crusader agreement [2] protocols have been proposed to achieve this in the presence of arbitrary (possibly malicious) failures. The requirement is typically that the fault-free receivers must all agree on the same value [7, 6]. (Dolev [2] analyzes a seemingly weaker form of agreement). <p> Byzantine agreement (weak [6] or otherwise [7]) and Crusader agreement [2] protocols have been proposed to achieve this in the presence of arbitrary (possibly malicious) failures. The requirement is typically that the fault-free receivers must all agree on the same value <ref> [7, 6] </ref>. (Dolev [2] analyzes a seemingly weaker form of agreement). Prior work has shown that such agreements are impossible if a third of the nodes (or more) are faulty. This report also assumes the arbitrary failure model which is also known as the Byzantine failure model. <p> Prior work has shown that such agreements are impossible if a third of the nodes (or more) are faulty. This report also assumes the arbitrary failure model which is also known as the Byzantine failure model. We propose an agreement protocol that achieves Lamport's Byzantine agreement <ref> [7] </ref> up to a certain number of failures and a degraded form of agreement with a higher number of faults. <p> Essentially, the degraded form of agreement allows the fault-free receivers to agree on at most two different values one of which is necessarily the default value. 1 This is a degraded form as compared to Byzantine agreement <ref> [7] </ref> which requires all the fault-free receivers to agree on a single value. The proposed approach is named "degradable agreement". The next section presents a definition of degradable agreement. This report shows that degradable agreement is of interest in practice. <p> For the sake of simplicity, this report draws on and extends the concepts presented in two well-known report by Lamport et al. <ref> [7] </ref> and Dolev [2]. Section 2 defines the proposed degradable agreement approach. Section 3 motivates the proposed approach and discusses an application. An algorithm for achieving the proposed agreement is presented in Section 4. <p> The fault-free receivers in one class must agree on the default value, and the fault-free receivers in the other class must all agree on an identical value. Conditions D.1 and D.2 are identical to those satisfied by Lamport's Byzantine agreement <ref> [7] </ref>. Conditions D.3 and D.4 define degraded agreement and are applied in fault situa 2 tions with more than m but at most u faults. Thus, when m = u, degradable agreement is equivalent to Lamport's Byzantine agreement. Let N be the number of nodes in the system. <p> The external entity takes a majority vote on the output of the three channels and determines the correct value. It is clear that if the sender is itself faulty, the external entity may not be able to obtain the correct value. Thus, in such a system, Byzantine agreement <ref> [7] </ref> ensures the following conditions: (B.1) Given is a system with 3m channels and 1 sender. <p> VOTE (2,4) of values 1, 2, 2, 1 is V d because of the tie. Algorithm BYZ presented below may be viewed as an extension of an algorithm in <ref> [7] </ref>. BYZ assumes that the nodes are fully connected. Following assumptions are made regarding messages when proving correctness of algorithm BYZ: (a) All messages are delivered correctly, (b) absence of a message can be detected, and (c) source of a received message can be identified. <p> For future reference note that, by definition, a system that achieves m=u-degradable agreement also achieves Byzantine agreement <ref> [7] </ref> up to m faults. Theorem 2 Given N nodes, m=u-degradable agreement can be achieved only if N &gt; 2m+u. Proof: The proof is in two parts. Part I proves that 1/2-degradable agreement is impossible with less than 5 nodes. <p> As ff 6= fi 6= V d , this is a contradiction. 14 Thus, 1/2-degradable agreement cannot be achieved with less than 5 nodes. Part II: The proof in Part II is similar to a proof in <ref> [7] </ref>. It is clear that to achieve m=u-degradable agreement at least 3m + 1 nodes are necessary (otherwise Byzantine agreement cannot be achieved for m faults). Therefore, consider a system consisting of N nodes such that N = 3m + where 1 (u m). Thus, N 2m + u. <p> This idea is analogous to the concept of witnesses proposed for maintaining consistency in replicated file systems [8]. 18 7 Summary m=u-degradable agreement protocol that achieves Lamport's Byzantine agreement <ref> [7] </ref> up to m faults, and a degraded form of agreement with more than m but at most u faults is proposed. Up to m faults, all the fault-free nodes agree on an identical value.
Reference: [8] <author> J.-F. Paris, </author> <title> "Voting with witnesses: A consistency scheme for replicated files," </title> <booktitle> in International Conf. Distributed Computing Systems, </booktitle> <pages> pp. 606-612, </pages> <year> 1986. </year>
Reference-contexts: Addition of clocks can be used to make the system capable of tolerating up to clock failures, for some , m &lt; u. This idea is analogous to the concept of witnesses proposed for maintaining consistency in replicated file systems <ref> [8] </ref>. 18 7 Summary m=u-degradable agreement protocol that achieves Lamport's Byzantine agreement [7] up to m faults, and a degraded form of agreement with more than m but at most u faults is proposed. Up to m faults, all the fault-free nodes agree on an identical value.
Reference: [9] <author> M. Pease, R. Shostak, and L. Lamport, </author> <title> "Reaching agreement in the presence of faults," </title> <journal> J. ACM, </journal> <pages> pp. 228-234, </pages> <month> April </month> <year> 1980. </year>
Reference-contexts: This illustrates the trade-off between Byzantine agreement and degraded agreement. The following table lists the minimum number of nodes necessary for different values of m and u. m 2 - 7 8 9 10 Bhandari [1] looks at algorithms which correctly achieve interactive consistency <ref> [9] </ref> up to N1 3 faults in an N node system. Bhandari proves that graceful degradations is 3 impossible with such algorithms if the number of faults is more than N=3. His result is not applicable to m=u-degradable agreement when m &lt; N1 3 . <p> Interactive consistency requires each node to agree on a vector of N values containing one value sent by each node in the system <ref> [9] </ref>. Proof of correctness for the m=u-degradable agreement algorithm presented in this report assumes that the clocks on all the fault-free nodes are synchronized. It is known that if a third (or more) of the clocks are faulty, it is not possible to achieve clock synchronization [3, 5].
Reference: [10] <author> D. P. Siewiorek and R. S. Swarz, </author> <title> The Theory and Practice of Reliable System Design. </title> <publisher> Digital Press, </publisher> <address> Bedford, MA, </address> <year> 1982. </year>
Reference-contexts: In general, if more than m faults occur, Byzantine agreement may result in the external entity using an incorrect output, even if the sender is fault-free. However, Byzantine agreement tolerates up to m faults, meaning that forward recovery <ref> [10] </ref> can be performed in the presence of up to m faults. The concept of a default value is pertinent to the discussion below. If the external entity obtains a default value from the multiple channel system, it can take a "default" action which usually results in a safe operation. <p> The concept of a default value is pertinent to the discussion below. If the external entity obtains a default value from the multiple channel system, it can take a "default" action which usually results in a safe operation. Another possibility is to re-do the computation (backward recovery <ref> [10] </ref>). Degradable agreement improves the ability to survive more than m faults. Obviously, achieving this requires more resources, but we show that the increase in resource requirements is minimal. Consider a four channel system shown in Figure 1 (b). For this system, m = 1 and u = 2.
Reference: [11] <author> T. B. Smith III et al., </author> <title> The Fault-Tolerant Multiprocessor Computer. </title> <address> Park Ridge, NJ: </address> <publisher> Noyes Publications, </publisher> <year> 1986. </year> <month> 20 </month>
Reference-contexts: Figure 1 (a) illustrates a system with three channels. Byzantine agreement is useful in such systems to distribute information from a single sender (for example, a sensor) to all the channels <ref> [11] </ref>. The three channels in Figure 1 (a) obtain their input from the sensor and then perform computations on that input. Eventually, the output of the three channels must be sent to 4 an external entity (for example, to a controller). <p> This conjecture is being investigated currently. The reader can verify that the impossibility result in [5] does not as such apply to the above problem. 6.2 Traditional Clock Synchronization One solution, applicable to systems such as FTMP, NETS <ref> [11] </ref> and FTP [4], is the use of hardware clock synchronization (as opposed to software algorithms). In typical systems, the complexity and cost of clock hardware is orders of magnitude lower as compared to the processor (or node) complexity.
References-found: 11

