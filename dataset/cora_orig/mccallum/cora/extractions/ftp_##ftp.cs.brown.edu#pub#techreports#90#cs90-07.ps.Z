URL: ftp://ftp.cs.brown.edu/pub/techreports/90/cs90-07.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-90-07.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Apgra, B., Bersack, B. and Mammen, A., </author> <title> "A Display System for the Stellar Graphics Supercomputer Model GS1000," </title> <booktitle> Proceedings of SIGGRAPH '88, published as Computer Graphics, </booktitle> <volume> Vol. 22, No. 4, </volume> <month> August </month> <year> 1988, </year> <pages> pp. 255-262. </pages>
Reference-contexts: Finally, many algorithms, both software and hardware, that operate on polygons can be made simpler if the polygons are triangles [15]; examples are rendering <ref> [1, 2, 5] </ref> and collision detection [10]. 3 3 Algorithm Overview One might expect that computing triangulated polyhedral b-reps from csg models would also be easy and efficient, but care must be taken to choose an efficient algorithm.
Reference: [2] <author> Deering, M. et al., </author> <title> "The Triangle Processor and Normal Vector Shader: A VLSI System for High Performance Graphics," </title> <booktitle> Proceedings of SIGGRAPH '88, published as Computer Graphics, </booktitle> <volume> Vol. 22, No. 4, </volume> <month> August </month> <year> 1988, </year> <month> pp.229-238. </month>
Reference-contexts: Finally, many algorithms, both software and hardware, that operate on polygons can be made simpler if the polygons are triangles [15]; examples are rendering <ref> [1, 2, 5] </ref> and collision detection [10]. 3 3 Algorithm Overview One might expect that computing triangulated polyhedral b-reps from csg models would also be easy and efficient, but care must be taken to choose an efficient algorithm.
Reference: [3] <author> Foley, J. D., van Dam, A., Feiner, S. and Hughes, J. F., </author> <title> Computer Graphics: </title> <booktitle> Principles and Practice, </booktitle> <publisher> Addison Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1990, </year> <note> chapter 12. </note>
Reference-contexts: A csg model is a tree whose leaves are primitive solids and whose interior nodes are regularized fl This work was sponsored in part by grants from IBM, Sun Microsystems, NCR, Hewlett-Packard and Digital Equipment Corporation 1 Boolean set operations <ref> [3] </ref> on their children. A regularized Boolean set operation (denoted [ fl , " fl or fl ) on two solids is defined to be the closure of the corresponding ordinary Boolean set operation ([, " or ) applied to the interiors of the two solids.
Reference: [4] <author> Fuchs, H. et al., </author> <title> "Pixel-Planes 5: A Heterogeneous Multiprocessor Graphics System Using Processor-Enhanced Memories," </title> <booktitle> Proceedings of SIGGRAPH '89, published as Computer Graphics, </booktitle> <volume> Vol. 23, No. 3, </volume> <month> July </month> <year> 1989, </year> <pages> pp. 79-88. </pages>
Reference-contexts: The time required still prohibits true interactive performance in most cases, though; the rendering algorithm described by Goldfeather et al. [6], produces images at interactive rates only when rendering models of modest complexity on a high-end multiprocessor graphics system like the Pixel-Planes system <ref> [4] </ref>. One advantage of the b-rep method is that it can have good amortized performance in some common situations.
Reference: [5] <author> Gharachorloo, N., Gupta, S., Sproul, R. F. and Sutherland, I. E., </author> <title> "A Characterization of Ten Rasterization Techniques," </title> <booktitle> ACM SIGGRAPH '89 Course Notes 16, </booktitle> <pages> pp. 187-200. 17 </pages>
Reference-contexts: Finally, many algorithms, both software and hardware, that operate on polygons can be made simpler if the polygons are triangles [15]; examples are rendering <ref> [1, 2, 5] </ref> and collision detection [10]. 3 3 Algorithm Overview One might expect that computing triangulated polyhedral b-reps from csg models would also be easy and efficient, but care must be taken to choose an efficient algorithm.
Reference: [6] <author> Goldfeather, J., Molnar, S., Turk, G. and Fuchs, H., </author> <title> "Near Real-Time csg Render--ing Using Tree Normalization and Geometric Pruning," </title> <journal> IEEE Computer Graphics and Applications, </journal> <month> May </month> <year> 1989, </year> <pages> pp. 20-28. </pages>
Reference-contexts: The other approach does not create an intermediate representation of the csg tree, but instead produces the image directly from the tree with a special csg rendering algorithm <ref> [6, 8] </ref>. To understand the relative merits of the two methods, note that there are two distinct classes of changes that can be made to a csg model. <p> The time required still prohibits true interactive performance in most cases, though; the rendering algorithm described by Goldfeather et al. <ref> [6] </ref>, produces images at interactive rates only when rendering models of modest complexity on a high-end multiprocessor graphics system like the Pixel-Planes system [4]. One advantage of the b-rep method is that it can have good amortized performance in some common situations.
Reference: [7] <author> Goodrich, M. T., </author> <title> "Applying Parallel Processing Techniques to Classification Problems in Constructive Solid Geometry," </title> <institution> Johns Hopkins University, Department of Computer Sciences, </institution> <type> Technical Report JHU-89/6, </type> <month> June </month> <year> 1989. </year>
Reference-contexts: There are two general approaches to the production of this image. One approach involves two steps: evaluate the polyhedral boundary representation (b-rep) of the csg model, then render its polygonal faces with an ordinary renderer <ref> [7, 9, 13, 14] </ref>. The other approach does not create an intermediate representation of the csg tree, but instead produces the image directly from the tree with a special csg rendering algorithm [6, 8]. <p> The other b-rep evaluation algorithms found in the literature could be used if a post-processing step were added to triangulate the polyhedra they produce. One recent algorithm, devised by Goodrich <ref> [7] </ref>, uses ideas from the theory of parallel processing to compress the csg tree being processed. The classification phase then uses this "dwarf" csg tree to determine efficiently which faces belong in the final b-rep.
Reference: [8] <author> Jansen, F. W., </author> <title> "A Pixel-Parallel Hidden Surface Algorithm for Constructive Solid Geometry," </title> <booktitle> Proceedings of Eurographics '86, </booktitle> <publisher> Elsevier Science Publishers, </publisher> <address> New York, </address> <year> 1986, </year> <pages> pp. 29-40. </pages>
Reference-contexts: The other approach does not create an intermediate representation of the csg tree, but instead produces the image directly from the tree with a special csg rendering algorithm <ref> [6, 8] </ref>. To understand the relative merits of the two methods, note that there are two distinct classes of changes that can be made to a csg model.
Reference: [9] <author> Laidlaw, D. H., Trumbore, W. B. and Hughes, J. F., </author> <title> "Constructive Solid Geometry for Polyhedral Objects," </title> <booktitle> Proceedings of SIGGRAPH '86, published as Computer Graphics, </booktitle> <volume> Vol. 20, No. 4, </volume> <month> August </month> <year> 1986, </year> <pages> pp. 161-170. </pages>
Reference-contexts: There are two general approaches to the production of this image. One approach involves two steps: evaluate the polyhedral boundary representation (b-rep) of the csg model, then render its polygonal faces with an ordinary renderer <ref> [7, 9, 13, 14] </ref>. The other approach does not create an intermediate representation of the csg tree, but instead produces the image directly from the tree with a special csg rendering algorithm [6, 8]. <p> In particular, it discusses the subtleties involved when b-reps are triangulated polyhedra, as in the latest version of the Brown Animation Generation System (bags). A new algorithm is presented which extends the algorithm of Laidlaw et al. <ref> [9] </ref> (designed for general polyhedra) to process the special case of triangulated polyhedra efficiently. The new algorithm is shown to provide a significant performance improvement over the Laidlaw et al. algorithm.
Reference: [10] <author> Moore, M. and Wilhelms, J., </author> <title> "Collision Detection and Response for Computer Animation," </title> <booktitle> Proceedings of SIGGRAPH '88, published as Computer Graphics, </booktitle> <volume> Vol. 22, No. 4, </volume> <month> August </month> <year> 1988, </year> <pages> pp. 289-298. </pages>
Reference-contexts: Finally, many algorithms, both software and hardware, that operate on polygons can be made simpler if the polygons are triangles [15]; examples are rendering [1, 2, 5] and collision detection <ref> [10] </ref>. 3 3 Algorithm Overview One might expect that computing triangulated polyhedral b-reps from csg models would also be easy and efficient, but care must be taken to choose an efficient algorithm. An algorithm designed for general polyhedra will not necessarily perform well on triangulated polyhedra.
Reference: [11] <author> Preparata, F. P. and Shamos, M. I., </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985, </year> <pages> pp. 237-241. </pages>
Reference-contexts: Because the exterior edges and intersection segments all lie in the plane of the cluster, we have a constrained planar triangulation problem. Rather than devise our own algorithm to solve this problem, we implemented one described by Preparata and Shamos <ref> [11] </ref>. It involves two phases, which will be sketched only briefly here. The first phase builds a set of monotone polygons from the original polygon and the constraint edges.
Reference: [12] <author> Segal, M. and Sequin, C. H., </author> <title> "Partioning Polyhedral Objects into Nonintersecting Parts," </title> <journal> IEEE Computer Graphics and Applications, </journal> <month> January </month> <year> 1988, </year> <pages> pp. 53-67. </pages>
Reference-contexts: The endpoints of a and b are stored as distances along L with respect to some reference point p on L; Segal and Sequin <ref> [12] </ref> sketch a clever way of setting up a system of equations that allows an appropriate p to be found without inverting a matrix. Now the intersection segment ab between the faces a and b can be found: it is the intersection of a and b .
Reference: [13] <author> Thibault, W. C. and Naylor, B. F., </author> <title> "Set Operations on Polyhedra Using Binary Space Partitioning Trees," </title> <booktitle> Proceedings of SIGGRAPH '87, published as Computer Graphics, </booktitle> <volume> Vol. 21, No. 4, </volume> <month> July </month> <year> 1987, </year> <pages> pp. 153-162. </pages>
Reference-contexts: There are two general approaches to the production of this image. One approach involves two steps: evaluate the polyhedral boundary representation (b-rep) of the csg model, then render its polygonal faces with an ordinary renderer <ref> [7, 9, 13, 14] </ref>. The other approach does not create an intermediate representation of the csg tree, but instead produces the image directly from the tree with a special csg rendering algorithm [6, 8]. <p> But neither method is sufficiently fast in all situations. The best performance is obtained by picking the method most appropriate for the changes to be made. Evaluating a b-rep can take a long time; even the efficient algorithms, such as the one published by Thibault and Naylor <ref> [13] </ref>, can handle only certain kinds of restructuring changes quickly. csg renderers generally take less time to produce one image than is required to construct an elaborate b-rep. <p> Experience with our bags modeling system has indicated that the savings in processing time provided by exploiting coherency in this manner can be very significant. An algorithm more appropriate for an interactive modeling system was published by Thibault and Naylor <ref> [13] </ref>. This algorithm uses binary space partitioning (bsp) trees to represent polyhedra as intersections of sets of half-spaces.
Reference: [14] <author> Yamaguchi, F. and Tokieda, T., </author> <title> "A Unified Algorithm for Boolean Shape Operations," </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> Vol. 4, No. 6, </volume> <month> June </month> <year> 1984, </year> <pages> pp. 24-37. </pages>
Reference-contexts: There are two general approaches to the production of this image. One approach involves two steps: evaluate the polyhedral boundary representation (b-rep) of the csg model, then render its polygonal faces with an ordinary renderer <ref> [7, 9, 13, 14] </ref>. The other approach does not create an intermediate representation of the csg tree, but instead produces the image directly from the tree with a special csg rendering algorithm [6, 8]. <p> Another example of this phenomenon can be seen by comparing the performance on the "couch" and "android" models. 14 7 Comparison to Other Approaches We have found only one published account of a b-rep evaluation algorithm specifically designed to process triangles. Yamaguchi and Tokieda <ref> [14] </ref> describe an algorithm which performs Boolean operations on general polyhedra after first triangulating them. The triangulation is done because it is easier to find intersections between triangles than between arbitrary concave polygons, as we indicated earlier.
Reference: [15] <author> Yamaguchi, F., </author> <title> "A Unified Approach to Interference Problems Using a Triangle Processor," </title> <booktitle> Proceedings of SIGGRAPH '85, published as Computer Graphics, </booktitle> <volume> Vol 19, No. 3, </volume> <month> July </month> <year> 1985, </year> <pages> pp. 141-149. </pages> <note> 18 polygonal faces.) 19 20 21 </note>
Reference-contexts: Finally, many algorithms, both software and hardware, that operate on polygons can be made simpler if the polygons are triangles <ref> [15] </ref>; examples are rendering [1, 2, 5] and collision detection [10]. 3 3 Algorithm Overview One might expect that computing triangulated polyhedral b-reps from csg models would also be easy and efficient, but care must be taken to choose an efficient algorithm.
References-found: 15

