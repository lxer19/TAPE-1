URL: ftp://theory.cs.uni-bonn.de/pub/reports/cs-reports/1998/85200-CS.ps.gz
Refering-URL: http://cs.uni-bonn.de/info5/publications/CS-1998-en.html
Root-URL: http://cs.uni-bonn.de
Title: A Note on Las Vegas OBDDs  
Author: Marek Karpinski Rustam Mubarakzjanov 
Abstract: We prove that the error-free (Las Vegas) randomized OBDDs are computationally equivalent to the deterministic OBDDs. In contrast, it is known the same is not true for Las Vegas read-once branching programs. 
Abstract-found: 1
Intro-found: 1
Reference: [AK96] <author> F. Ablayev and M. Karpinski, </author> <title> On the power of randomized branching programs, </title> <booktitle> Proc. </booktitle> <address> ICALP'96, </address> <publisher> LNCS 1099, Springer, </publisher> <year> 1996, </year> <pages> pp. 348-356. </pages>
Reference-contexts: weakly-ordered with respect to (X 1 ; X 2 ) if all computation paths leading from the source to a sink can be decomposed into two parts, where on the first part only variables from X 1 are tested and on the second part only variables from X 2 (cf. <ref> [AK96] </ref>, and [S98a]).
Reference: [B86] <author> R.E.Bryandt, </author> <title> Graph based algorithms for Boolean function manipulation, </title> <journal> IEEE Trans.Computers, </journal> <volume> C-35 (8), </volume> <month> pp.677-691. </month>
Reference-contexts: This recursive procedure gives a required B 0 . fl Because of Lemma 1, we can assume that B 1 , B 2 do not have a proper RSP . Then we use the "Apply" algorithm (see <ref> [B86] </ref>) for OBDDs which combines DSP s of B 1 and B 2 with the operator " V 00 to compute the graph of deterministic branching programs C i . By properly randomly choosing C i we obtain an RSP computing h without an error.
Reference: [DHRS97] <author> P.Duris, J.Hromkovic, </author> <title> J.D.P.Rolim and G.Schnitger,On the Power of Las Vegas for One-Way Communication Complexity, Finite Automata, and Polynomial-time Computations, </title> <address> ECCC TR97-029, </address> <year> 1997, </year> <note> available at http://www.ecc.uni-trier.de/eccc/ </note>
Reference-contexts: For OBDDs, we have a surprisingly different result. 2 Theorem 1 P OBDD = LasV egasOBDD i.e. the inclusion (1) is the equality for OBDDs. Proof. It is shown in <ref> [DHRS97] </ref> that the one-way communication complexity of LasV egas computation is at least one half of the one-way deterministic communication complexity. We adopt the proof technique for this result to prove that P = LasV egas for OBDDs. We recall first some ideas of [DHRS97], and adopt them towards our construction. <p> Proof. It is shown in <ref> [DHRS97] </ref> that the one-way communication complexity of LasV egas computation is at least one half of the one-way deterministic communication complexity. We adopt the proof technique for this result to prove that P = LasV egas for OBDDs. We recall first some ideas of [DHRS97], and adopt them towards our construction. <p> The same is true for OBDDs B i where communication matrix C (B i ) lfi (nl) has the same elements as C (B 0 ) lfi (nl) except for some elements that are equal to 2. Following <ref> [DHRS97] </ref>, if C (B 0 ) lfi (nl) has r different rows there is an i, 1 i m such that C (B i ) lfi (nl) has at least p r different rows. Therefore, B i has at least p r nodes on the l-level.
Reference: [G77] <author> J.Gill, </author> <title> Computational complexity of probabilistic Turing machines, </title> <journal> SIAM Journal on Computing, </journal> <note> 6 (1977), pp.675-695. </note>
Reference-contexts: Otherwise it is not allowed to make mistakes: the algorithms give always correct answers. The complexity class Las Vegas of functions computable by such polynomially bounded algorithms is equivalent to the complexity class ZP P if no restrictions on number of readings of variables are imposed (cf., e.g., <ref> [G77] </ref>). It is not evident whether this is true for the complexity classes determined by branching programs with some restrictions on reading inputs.
Reference: [J88] <author> S.Jukna, </author> <title> Entropy of contact circuits and lower bounds of their complexity, </title> <journal> Theoretical Computer Science, </journal> <volume> 57: </volume> <year> (1988), </year> <month> pp.113-129. </month>
Reference-contexts: P LasV egas (1) LasV egas ZP P (2) ZP P BP P " NP " coN P: (3) In the sequel we consider above complexity classes for read-once branching programs with polynomial sizes. 2 Las Vegas OBDDs The following function ADDR (f ) n was introduced by S.Jukna ( <ref> [J88] </ref>), and also used by Sauerhoff ( [S98b]). We follow the notation of [S98b]. Definition. Let n = 2 l ; l = 2 r ; m = n=l = 2 (lr) . The variables of the function ADDR (f ) n determine (l fi m)-matrix.
Reference: [JRSW97] <author> S.Jukna, A.Razborov, </author> <title> P.Savicky and I.Wegener,On P versus N P " co N P for decision trees and read-once branching programs, </title> <address> ECCC TR97-023, </address> <year> 1997, </year> <note> available at http://www.ecc.uni-trier.de/eccc/ </note>
Reference-contexts: Indeed, if all y i are equal to 1, the function h is equal to ADDR (f ) n that is "hard" for deterministic read-once branching programs (cf. <ref> [JRSW97] </ref>, see also [S98b]). Let the x-part of inputs determines the subset X 1 of the set of variables X. Then a polynomial size weak-ordered randomized branching program B with respect to the partition (X 1 ; X 2 ) has 2 parts.
Reference: [K98] <author> M.Karpinski, </author> <title> On the computational power of randomized branching programs, </title> <booktitle> Proc. Randomized Algorithms 1998, Brno, </booktitle> <year> 1998, </year> <month> pp.1-12. </month>
Reference-contexts: Email: marek@cs.uni-bonn.de y Dept. of Computer Science, University of Bonn. Visiting from Dept. of Theoretical Cybernetics University of Kazan. Research supported by the DAAD-Stiftung and partially by the Russia Fund for Basic Research 96-01-01692. Email: rustam@ksu.ru 1 interesting complexity class is determined by "Las Vegas" (error-free) algo-rithms, cf. <ref> [K98] </ref>. For these randomized algorithms the answer "I do not know" is also possible with probability less than * &lt; 1=2. Otherwise it is not allowed to make mistakes: the algorithms give always correct answers.
Reference: [KM98] <author> M.Karpinski and R.Mubarakzjanov, </author> <title> Some separation problems on randomized OBDDs, </title> <note> Research Report No. </note> <institution> 85196-CS, University Bonn, </institution> <year> 1998. </year>
Reference-contexts: 1 Preliminaries In the sequel we are going to use the definitions and notations of <ref> [KM98] </ref>. We recall the complexity classes determined by branching programs: PBP , NP BP , coN P BP , BP P BP . We define analogous classes for OBDDs using " OBDD 00 , and for read-k-times branching programs using 00 BP k 00 , respectively, as suffixes. <p> If B 6= B 0 we call B 0 proper RSP of B. Analogously a deterministic source branching program (DSP ) and a proper DSP are defined. In <ref> [KM98] </ref> several proper inclusions between complexity classes for OB-DDs were proven. We prove that one of the inclusions turns out to be in fact the equality P = LasV egas for OBDDs.
Reference: [S98a] <author> M.Sauerhoff, </author> <title> Randomness and Nondeterminism are Incomparable for Read-Once Branching Programs, </title> <address> ECCC, TR98-018, </address> <year> 1998, </year> <note> available at http://www.eccc.uni-trier.de/eccc/ </note>
Reference-contexts: respect to (X 1 ; X 2 ) if all computation paths leading from the source to a sink can be decomposed into two parts, where on the first part only variables from X 1 are tested and on the second part only variables from X 2 (cf. [AK96], and <ref> [S98a] </ref>).
Reference: [S98b] <author> M.Sauerhoff,Comment 1 on the paper: </author> <title> Randomness and Nondeter-minism are Incomparable for Read-Once Branching Programs, </title> <address> ECCC, TR98-018, </address> <year> 1998, </year> <note> available at http://www.eccc.uni-trier.de/eccc/ 6 </note>
Reference-contexts: P (2) ZP P BP P " NP " coN P: (3) In the sequel we consider above complexity classes for read-once branching programs with polynomial sizes. 2 Las Vegas OBDDs The following function ADDR (f ) n was introduced by S.Jukna ( [J88]), and also used by Sauerhoff ( <ref> [S98b] </ref>). We follow the notation of [S98b]. Definition. Let n = 2 l ; l = 2 r ; m = n=l = 2 (lr) . The variables of the function ADDR (f ) n determine (l fi m)-matrix. <p> " NP " coN P: (3) In the sequel we consider above complexity classes for read-once branching programs with polynomial sizes. 2 Las Vegas OBDDs The following function ADDR (f ) n was introduced by S.Jukna ( [J88]), and also used by Sauerhoff ( <ref> [S98b] </ref>). We follow the notation of [S98b]. Definition. Let n = 2 l ; l = 2 r ; m = n=l = 2 (lr) . The variables of the function ADDR (f ) n determine (l fi m)-matrix. <p> It is shown in <ref> [S98b] </ref> that the function ADDR (f ) n 2 LasV egasBP 1 n P BP 1 and therefore the LasV egasBP 1 and P BP 1 complexity classes are different, i.e. the inclusion (1) is proper for BP1s. <p> Indeed, if all y i are equal to 1, the function h is equal to ADDR (f ) n that is "hard" for deterministic read-once branching programs (cf. [JRSW97], see also <ref> [S98b] </ref>). Let the x-part of inputs determines the subset X 1 of the set of variables X. Then a polynomial size weak-ordered randomized branching program B with respect to the partition (X 1 ; X 2 ) has 2 parts.
References-found: 10

