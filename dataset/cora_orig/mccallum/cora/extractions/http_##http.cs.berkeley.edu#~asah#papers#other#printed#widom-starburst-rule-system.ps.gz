URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/widom-starburst-rule-system.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~asah/papers/other/printed/
Root-URL: http://www.cs.berkeley.edu
Email: widom@cs.stanford.edu  
Title: The Starburst Active Database Rule System  
Author: Jennifer Widom 
Keyword: Index terms: active database systems, database production rules, extensible database systems, expert database systems  
Address: Stanford, CA 94305-2140  
Affiliation: Department of Computer Science Stanford University  
Note: To appear in: IEEE Transactions on Knowledge and Data Engineering  
Abstract: This paper describes our development of the Starburst Rule System, an active database rules facility integrated into the Starburst extensible relational database system at the IBM Almaden Research Center. The Starburst rule language is based on arbitrary database state transitions rather than tuple- or statement-level changes, yielding a clear and flexible execution semantics. The rule system has been implemented completely. Its rapid implementation was facilitated by the extensibility features of Starburst, and rule management and rule processing is integrated into all aspects of database processing. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, R.J. Cochrane, and B. Lindsay. </author> <title> On maintaining priorities in a production rule system. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 479-487, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: An initial proposal for the Starburst rule language appears in [49]. [48] describes how the extensibility features of the Starburst prototype are used in implementing the rule system. Details of Starburst's rule priority system are given in <ref> [1] </ref>. A series of papers describe how rules in the Starburst language can be generated automatically from specifications for particular applications: integrity constraints are considered in [15], view maintenance in [16], deductive databases in [19], and heterogeneity management in [18]. <p> R 1 is ordered before R 2 if and only if R 1 was created before R 2 ), unless this ordering is impossible given the user-specified and transitively implied orderings. Details and a formalization of this deterministic rule ordering strategy can be found in <ref> [1] </ref>. 5 Examples We now provide examples to illustrate the syntax of rule creation and the semantics of rule execution. Our examples are relatively simple and contrived, but they serve to compactly illustrate the salient features of the Starburst rule language syntax and semantics.
Reference: [2] <author> A. Aiken, J. Widom, and J.M. Hellerstein. </author> <title> Behavior of database production rules: Termination, confluence, and observable determinism. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 59-68, </pages> <address> San Diego, California, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: A denotational semantics for the Starburst rule language is given in [45], while <ref> [2] </ref> describes methods for static analysis of Starburst rules. Finally, [17] discusses how the Starburst Rule System can be extended for parallel and distributed database environments. <p> the behavior of active database rules is an important facet of application development, we have developed methods for statically analyzing sets of Starburst rules; these analysis methods determine (conservatively) whether a set of rules is guaranteed to terminate, and whether the rules are guaranteed to produce a unique final state <ref> [2] </ref>. Other researchers have used the 26 Starburst Rule System as a basis for studying and implementing secure active databases [40], dynamic integrity constraints [28,43], and automatically-generated compensating actions for static constraints [13].
Reference: [3] <author> A.M. Alasqur, S.Y. Su, and H. Lam. </author> <title> A rule based language for deductive OODBS. </title> <booktitle> In Proceedings of the Sixth International Conference on Data Engineering, </booktitle> <address> Los Angeles, California, </address> <month> February </month> <year> 1990. </year>
Reference: [4] <author> E. Anwar, L. Maugis, and S. Chakravarthy. </author> <title> A new perspective on rule support for object-oriented databases. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 99-108, </pages> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference: [5] <author> E. Baralis and J. Widom. </author> <title> Using delta relations to optimize condition evaluation in active databases. </title> <type> Technical Report Stan-CS-93-1495, </type> <institution> Computer Science Department, Stanford University, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: However, we do not support incremental condition monitoring methods such as those used in Ariel [44] and in OPS5 [9, 36]. We have explored incremental condition evaluation in the context of Starburst <ref> [5] </ref>, and we plan to explore other run-time optimization methods as well.
Reference: [6] <author> C. Beeri and T. Milo. </author> <title> A model for active object oriented database. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 337-349, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference: [7] <author> M. Berndtsson and B. Lings. </author> <title> On developing reactive object-oriented databases. </title> <journal> IEEE Data Engineering Bulletin, Special Issue on Active Databases, </journal> <volume> 15(4) </volume> <pages> 31-34, </pages> <month> December </month> <year> 1992. </year>
Reference: [8] <author> D.A. </author> <title> Brant and D.P. Miranker. Index support for rule activation. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 42-48, </pages> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: A first prototype of Chimera has been implemented, employing some techniques adapted from Starburst [12]. 2 There are several other relational active database systems, not as closely related to Star--burst as the systems described above. Two projects, DATEX <ref> [8] </ref> and DIPS [38], implement the OPS5 rule language using an underlying database system and special indexing techniques to support efficient processing of large rule and data sets.
Reference: [9] <author> L. Brownston, R. Farrell, E. Kant, and N. Martin. </author> <title> Programming Expert Systems in OPS5: An Introduction to Rule-Based Programming. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1985. </year>
Reference-contexts: The three systems closest to the Starburst Rule System are Ariel [31], the second version of the POSTGRES Rule System [42], and Chimera [12,14]. The Ariel system has a rule language and execution semantics based closely on OPS5 <ref> [9] </ref>, a production rule language originally designed for expert systems. The Ariel project has focused on the design of an OPS5-like rule language for the database setting, and on methods for highly efficient rule condition testing using variations on the Rete and TREAT algorithms designed for OPS5 [44]. <p> Hence, we believe that the more complex recursive rule processing algorithms used in, e.g., POSTGRES [42] or HiPAC [20], probably are not worthwhile. * Complex conflict resolution policies, such as those used in OPS5 <ref> [9] </ref> and Ariel [31], do not seem appropriate for most active rule applications. <p> We do incorporate one important optimization, namely that a rule condition is understood to be true as soon as the first tuple in the query is found. However, we do not support incremental condition monitoring methods such as those used in Ariel [44] and in OPS5 <ref> [9, 36] </ref>. We have explored incremental condition evaluation in the context of Starburst [5], and we plan to explore other run-time optimization methods as well.
Reference: [10] <author> A.P. Buchmann, H. Branding, T. Kudrass, and J. Zimmerman. </author> <title> REACH: a REal-time, ACtive, and Heterogeneous mediator system. </title> <journal> IEEE Data Engineering Bulletin, Special Issue on Active Databases, </journal> <volume> 15(4) </volume> <pages> 44-47, </pages> <month> December </month> <year> 1992. </year>
Reference: [11] <author> F. Cacace, S. Ceri, S. Crespi-Reghizzi, L. Tanca, and R. Zicari. </author> <title> Integrating object-oriented data modeling with a rule-based programming paradigm. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 225-236, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year>
Reference: [12] <author> S. Ceri, P. Fraternali, S. Paraboschi, and L. Tanca. </author> <title> Active rule management in Chimera. In Active Database Systems: Triggers and Rules for Advanced Database Processing. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA, </address> <year> 1994. </year> <note> (To appear). </note>
Reference-contexts: The Chimera system combines object-oriented, deductive, and active database technology. Its active rule language is based on Starburst's, with extensions for object-orientation and for "configurable" rule semantics (see Section 4). A first prototype of Chimera has been implemented, employing some techniques adapted from Starburst <ref> [12] </ref>. 2 There are several other relational active database systems, not as closely related to Star--burst as the systems described above.
Reference: [13] <author> S. Ceri, P. Fraternali, S. Paraboschi, and L. Tanca. </author> <title> Automatic generation of production rules for integrity maintenance. </title> <note> To appear in ACM Transactions on Database Systems, 1994. 28 </note>
Reference-contexts: Other researchers have used the 26 Starburst Rule System as a basis for studying and implementing secure active databases [40], dynamic integrity constraints [28,43], and automatically-generated compensating actions for static constraints <ref> [13] </ref>. Although we do consider the Starburst Rule System to be complete at this time, there are several directions in which it may be exercised, improved, and extended: * Currently we have obtained only initial cursory performance results.
Reference: [14] <author> S. Ceri and R. Manthey. </author> <title> Consolidated specification of Chimera, the conceptual interface of Idea. </title> <type> Technical Report IDEA.DD.2P.004, </type> <institution> Politecnico di Milano, Milan, Italy, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: The recent Chimera active rule system addresses this issue by allowing its users to choose between a number of alternative semantics <ref> [14] </ref>. 9 4.3 Rule Processing Commands While end-of-transaction rule processing is sufficient for many applications, we have found that in some cases it is useful for rules to be processed within a transaction (for example, to verify consistency after some operations have been executed but before the transaction is complete).
Reference: [15] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for constraint maintenance. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 566-577, </pages> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Details of Starburst's rule priority system are given in [1]. A series of papers describe how rules in the Starburst language can be generated automatically from specifications for particular applications: integrity constraints are considered in <ref> [15] </ref>, view maintenance in [16], deductive databases in [19], and heterogeneity management in [18]. A denotational semantics for the Starburst rule language is given in [45], while [2] describes methods for static analysis of Starburst rules. <p> in the specified set will not be considered for execution during rule processing, even if they are triggered. (Such rules eventually will be considered for execution, however, at end-of-transaction rule processing if not sooner.) The process ruleset command is useful, for example, when rules are used to maintain integrity constraints <ref> [15] </ref> or materialized views [16]. In this case, the rules associated with a particular constraint or view are grouped into one set S. Whenever the constraint should be checked or the view refreshed (before the end of a transaction), a process ruleset command is issued for set S. <p> Our examples are relatively simple and contrived, but they serve to compactly illustrate the salient features of the Starburst rule language syntax and semantics. For more comprehensive examples making up a full rule application, the reader is referred to <ref> [15] </ref>. We use the following generic employee-department relational database schema: emp (emp-no, name, salary, dept-no) dept (dept-no, mgr-no) Our first example rule, cascade, implements a variation on the cascaded delete method of enforcing referential integrity constraints. <p> In practice, users often write Starburst rules that explicitly repeat the condition as a subquery in the action, or that omit the condition altogether and place it in the action. A language feature for referencing, in the action, the data satisfying the condition (as suggested in <ref> [15] </ref>) would have been very useful. * A convenient extension to the rule language would have been to allow rules that are triggered by operations on multiple tables. <p> We have used Starburst rules for enforcing integrity constraints <ref> [15] </ref>, for maintaining materialized views [16], and for implementing deductive databases [19], as well as for several other (more ad-hoc) applications.
Reference: [16] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 577-589, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Details of Starburst's rule priority system are given in [1]. A series of papers describe how rules in the Starburst language can be generated automatically from specifications for particular applications: integrity constraints are considered in [15], view maintenance in <ref> [16] </ref>, deductive databases in [19], and heterogeneity management in [18]. A denotational semantics for the Starburst rule language is given in [45], while [2] describes methods for static analysis of Starburst rules. Finally, [17] discusses how the Starburst Rule System can be extended for parallel and distributed database environments. <p> will not be considered for execution during rule processing, even if they are triggered. (Such rules eventually will be considered for execution, however, at end-of-transaction rule processing if not sooner.) The process ruleset command is useful, for example, when rules are used to maintain integrity constraints [15] or materialized views <ref> [16] </ref>. In this case, the rules associated with a particular constraint or view are grouped into one set S. Whenever the constraint should be checked or the view refreshed (before the end of a transaction), a process ruleset command is issued for set S. <p> We have used Starburst rules for enforcing integrity constraints [15], for maintaining materialized views <ref> [16] </ref>, and for implementing deductive databases [19], as well as for several other (more ad-hoc) applications.
Reference: [17] <author> S. Ceri and J. Widom. </author> <title> Production rules in parallel and distributed database environments. </title> <booktitle> In Proceedings of the Eighteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 339-351, </pages> <address> Vancouver, British Columbia, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: A denotational semantics for the Starburst rule language is given in [45], while [2] describes methods for static analysis of Starburst rules. Finally, <ref> [17] </ref> discusses how the Starburst Rule System can be extended for parallel and distributed database environments. <p> We have studied how the Starburst Rule System can be supported in a tightly-coupled distributed database environment with full distribution transparency <ref> [17] </ref>; we also have studied how the Starburst Rule System can be used to manage semantic heterogeneity across loosely-coupled databases [18].
Reference: [18] <author> S. Ceri and J. Widom. </author> <title> Managing semantic heterogeneity with production rules and persistent queues. </title> <booktitle> In Proceedings of the Nineteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 108-119, </pages> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Details of Starburst's rule priority system are given in [1]. A series of papers describe how rules in the Starburst language can be generated automatically from specifications for particular applications: integrity constraints are considered in [15], view maintenance in [16], deductive databases in [19], and heterogeneity management in <ref> [18] </ref>. A denotational semantics for the Starburst rule language is given in [45], while [2] describes methods for static analysis of Starburst rules. Finally, [17] discusses how the Starburst Rule System can be extended for parallel and distributed database environments. <p> We have studied how the Starburst Rule System can be supported in a tightly-coupled distributed database environment with full distribution transparency [17]; we also have studied how the Starburst Rule System can be used to manage semantic heterogeneity across loosely-coupled databases <ref> [18] </ref>.
Reference: [19] <author> S. Ceri and J. Widom. </author> <title> Deriving incremental production rules for deductive data. </title> <note> To appear in Information Systems, </note> <year> 1994. </year>
Reference-contexts: Details of Starburst's rule priority system are given in [1]. A series of papers describe how rules in the Starburst language can be generated automatically from specifications for particular applications: integrity constraints are considered in [15], view maintenance in [16], deductive databases in <ref> [19] </ref>, and heterogeneity management in [18]. A denotational semantics for the Starburst rule language is given in [45], while [2] describes methods for static analysis of Starburst rules. Finally, [17] discusses how the Starburst Rule System can be extended for parallel and distributed database environments. <p> We have used Starburst rules for enforcing integrity constraints [15], for maintaining materialized views [16], and for implementing deductive databases <ref> [19] </ref>, as well as for several other (more ad-hoc) applications.
Reference: [20] <author> S. Chakravarthy, B. Blaustein, A.P. Buchmann, M. Carey, U. Dayal, D. Goldhirsch, M. Hsu, R. Jauhari, R. Ladin, M. Livny, D. McCarthy, R. McKee, and A. Rosenthal. HiPAC: </author> <title> A research project in active, time-constrained database management. </title> <type> Technical Report XAIT-89-02, </type> <institution> Xerox Advanced Information Technology, Cambridge, Massachusetts, </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: HiPAC was a pioneering project in the area of active database systems; HiPAC includes a very powerful rule language for an object-oriented data model, a flexible execution semantics, and several main-memory experimental prototypes <ref> [20] </ref>. Recently there has been an explosion of projects in object-oriented active database systems|many of these projects are still preliminary; see e.g. [3,4,6,7,10,11, 24,25,26,27,33,35]. Several previous papers have described language, implementation, or application development issues related to the Starburst Rule System. <p> Hence, we believe that the more complex recursive rule processing algorithms used in, e.g., POSTGRES [42] or HiPAC <ref> [20] </ref>, probably are not worthwhile. * Complex conflict resolution policies, such as those used in OPS5 [9] and Ariel [31], do not seem appropriate for most active rule applications.
Reference: [21] <author> R.J. Cochrane. </author> <title> Issues in Integrating Active Rules into Database Systems. </title> <type> PhD thesis, </type> <institution> University of Maryland, College Park, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: Consistency requirement (3) is enforced automatically since rule and rule set modifications are reflected in the Rule Catalog, and the Rule Catalog is subject to Starburst's concurrency control mechanisms for data. Further details of these locking protocols and proofs of their correctness appear in <ref> [21] </ref>. 7.4 Authorization In the authorization component of the Starburst Rule System we address a number of distinct issues, including authorization to create rules on a given table, authorization to create rules with given conditions and actions, authorization to alter or drop given rules, authorization for rule sets, and authorization at
Reference: [22] <author> L.M.L. Delcambre and J.N. Etheredge. </author> <title> The Relational Production Language: A production language for relational databases. </title> <editor> In L. Kerschberg, editor, </editor> <booktitle> Expert Database Systems| Proceedings from the Second International Conference, </booktitle> <pages> pages 333-351. </pages> <address> Benjamin/Cummings, Redwood City, California, </address> <year> 1989. </year>
Reference-contexts: RPL (for Relational Production Language) was an early project in relational active database systems; RPL includes an OPS5-like rule language based on relational queries and a prototype implementation in which rule processing is loosely coupled to a commercial relational DBMS <ref> [22] </ref>. A-RDL is an extension to the RDL deductive database system that supports active rules [39]. The Alert project explores how active rules can be supported on top of a passive database system with minimal extensions [37].
Reference: [23] <author> H.M. Dewan, D. Ohsie, S.J. Stolfo, O. Wolfson, and S. Da Silva. </author> <title> Incremental database rule processing in PARADISER. </title> <journal> Journal of Intelligent Information Systems, </journal> <year> 1992. </year>
Reference-contexts: The PARADISER project also uses a database system for efficient processing of expert system rules, but in PARADISER the focus is on distributed and parallel rule processing <ref> [23] </ref>. RPL (for Relational Production Language) was an early project in relational active database systems; RPL includes an OPS5-like rule language based on relational queries and a prototype implementation in which rule processing is loosely coupled to a commercial relational DBMS [22].
Reference: [24] <author> O. Diaz, N. Paton, and P. Gray. </author> <title> Rule management in object-oriented databases: A uniform approach. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 317-326, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference: [25] <author> S. Dietrich, S.D. Urban, J.V. Harrison, </author> <title> and A.P. Karamdice. A DOOD RANCH at ASU: Integrating active, deductive, and object-oriented databases. </title> <journal> IEEE Data Engineering Bulletin, Special Issue on Active Databases, </journal> <volume> 15(4) </volume> <pages> 40-43, </pages> <month> December </month> <year> 1992. </year>
Reference: [26] <author> S. Gatziu, A. Geppert, and K.R. Dittrich. </author> <title> Integrating active concepts into an object-oriented database system. </title> <booktitle> In Proceedings of the Third International Workshop on Database Programming Languages, </booktitle> <address> Nafplion, Greece, </address> <month> August </month> <year> 1991. </year>
Reference: [27] <author> N. Gehani and H.V. Jagadish. </author> <title> Ode as an active database: Constraints and triggers. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 327-336, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year> <month> 29 </month>
Reference: [28] <author> M. Gertz and U.W. Lipeck. </author> <title> Deriving integrity maintaining triggers from transition graphs. </title> <booktitle> In Proceedings of the Ninth International Conference on Data Engineering, </booktitle> <pages> pages 22-29, </pages> <address> Vienna, Austria, </address> <month> April </month> <year> 1993. </year>
Reference: [29] <author> S. Ghandeharizadeh, R. Hull, D. Jacobs, et al. </author> <title> On implementing a language for specifying active database execution models. </title> <booktitle> In Proceedings of the Nineteenth International Conference on Very Large Data Bases, </booktitle> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Finally, Heraclitus is a relational database programming language with delta relations as first-class objects; a primary goal of the Heraclitus language is to simulate and support active rule processing <ref> [29] </ref>. One early project and numerous recent efforts (including Chimera) consider active object-oriented database systems.
Reference: [30] <author> L.M. Haas et al. </author> <title> Starburst mid-flight: As the dust clears. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 143-160, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: and an unpublished user's guide [47], this is the first paper to provide a complete description of the final, operational, Starburst Rule System. 3 3 Syntax of Rule Language The syntax of the Starburst rule language is based on the extended version of SQL supported by the Starburst database system <ref> [30] </ref>. The Starburst rule language includes five commands for defining and manipulating rules: create rule, alter rule, deactivate rule, activate rule, and drop rule. In addition, rules may be grouped into rule sets, which are defined and manipulated by the commands create ruleset, alter ruleset, and drop ruleset. <p> We describe these extensibility features here only in enough detail to understand how they are used by the rule system implementation; further details on these and other extensibility features of Starburst can be found in <ref> [30] </ref>. * The attachment feature is designed for extensions that require procedures to be called after each tuple-level database operation on certain tables. <p> Another useful extension would have been to allow rule actions that invoke arbitrary host language procedures. Currently, this behavior can be simulated through Starburst's foreign function feature in SQL <ref> [30] </ref>, but host language procedures cannot be called directly from rules. * Rules in Starburst cannot be triggered by select operations.
Reference: [31] <author> E.N. Hanson. </author> <title> Rule condition testing and action execution in Ariel. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 49-58, </pages> <address> San Diego, California, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Finally, in Section 9 we mention several applications of the Starburst Rule System, and we discuss future directions of this work. 2 Related Work Numerous other active database systems have been designed and some have been implemented. The three systems closest to the Starburst Rule System are Ariel <ref> [31] </ref>, the second version of the POSTGRES Rule System [42], and Chimera [12,14]. The Ariel system has a rule language and execution semantics based closely on OPS5 [9], a production rule language originally designed for expert systems. <p> The Ariel rule language is fully implemented using the Exodus database toolkit <ref> [31] </ref>. The POSTGRES Rule System, sometimes referred to as PRS2 to distinguish it from an earlier proposal [41], focuses in both its language and its implementation on providing several different classes of rules, each appropriate for a particular suite of applications. <p> Hence, we believe that the more complex recursive rule processing algorithms used in, e.g., POSTGRES [42] or HiPAC [20], probably are not worthwhile. * Complex conflict resolution policies, such as those used in OPS5 [9] and Ariel <ref> [31] </ref>, do not seem appropriate for most active rule applications.
Reference: [32] <institution> ISO-ANSI working draft: Database language SQL3 (X3H2/94/080 and SOU/003), </institution> <year> 1994. </year>
Reference: [33] <author> A.M. Kotz, K.R. Dittrich, and J.A. Mulle. </author> <title> Supporting semantic rules by a generalized event/trigger mechanism. </title> <booktitle> In Advances in Database Technology|EDBT '88, Lecture Notes in Computer Science 303, </booktitle> <pages> pages 76-91. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <month> March </month> <year> 1988. </year>
Reference: [34] <author> J. Melton and A.R. Simon. </author> <title> Understanding the New SQL: a Complete Guide. </title> <publisher> Morgan Kauf-mann, </publisher> <address> San Mateo, California, </address> <year> 1993. </year>
Reference-contexts: the other hand, for very simple rule processing tasks, tuple-level or statement-level rule processing usually does behave as the user expects, and it can be both more natural and more efficient than the Starburst approach. 10 Note also that Starburst's transition-oriented semantics prohibits a natural before option for rule triggering <ref> [34] </ref>. However, again, specifying before may result in surprising rule interactions, where such behavior is avoided with Starburst's rule semantics. * Rule processing based on an iterative loop, as in Starburst, is intuitive, it seems to be sufficient for most applications, and it is relatively easy to implement.
Reference: [35] <author> T. Risch and M. Skold. </author> <title> Active rules based on object-oriented queries. </title> <journal> IEEE Data Engineering Bulletin, Special Issue on Active Databases, </journal> <volume> 15(4) </volume> <pages> 27-30, </pages> <month> December </month> <year> 1992. </year>
Reference: [36] <author> M.I. Schor, T.P. Daly, H.S. Lee, and B.R. Tibbitts. </author> <title> Advances in RETE pattern matching. </title> <booktitle> In Proceedings of the Fifth National Conference on Artificial Intelligence, </booktitle> <pages> pages 226-232, </pages> <address> Philadelphia, Pennsylvania, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: We do incorporate one important optimization, namely that a rule condition is understood to be true as soon as the first tuple in the query is found. However, we do not support incremental condition monitoring methods such as those used in Ariel [44] and in OPS5 <ref> [9, 36] </ref>. We have explored incremental condition evaluation in the context of Starburst [5], and we plan to explore other run-time optimization methods as well.
Reference: [37] <author> U. Schreier, H. Pirahesh, R. Agrawal, and C. Mohan. Alert: </author> <title> An architecture for transforming a passive DBMS into an active DBMS. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 469-478, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: A-RDL is an extension to the RDL deductive database system that supports active rules [39]. The Alert project explores how active rules can be supported on top of a passive database system with minimal extensions <ref> [37] </ref>. Finally, Heraclitus is a relational database programming language with delta relations as first-class objects; a primary goal of the Heraclitus language is to simulate and support active rule processing [29]. One early project and numerous recent efforts (including Chimera) consider active object-oriented database systems.
Reference: [38] <author> T. Sellis, C.-C. Lin, and L. Raschid. </author> <title> Implementing large production systems in a DBMS environment: </title> <booktitle> Concepts and algorithms. In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 404-412, </pages> <address> Chicago, Illinois, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: A first prototype of Chimera has been implemented, employing some techniques adapted from Starburst [12]. 2 There are several other relational active database systems, not as closely related to Star--burst as the systems described above. Two projects, DATEX [8] and DIPS <ref> [38] </ref>, implement the OPS5 rule language using an underlying database system and special indexing techniques to support efficient processing of large rule and data sets.
Reference: [39] <author> E. Simon, J. Kiernan, and C. de Maindreville. </author> <title> Implementing high level active rules on top of a relational DBMS. </title> <booktitle> In Proceedings of the Eighteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 315-326, </pages> <address> Vancouver, British Columbia, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: A-RDL is an extension to the RDL deductive database system that supports active rules <ref> [39] </ref>. The Alert project explores how active rules can be supported on top of a passive database system with minimal extensions [37].
Reference: [40] <author> K. Smith and M. Winslett. </author> <title> Multilevel secure rules: Integrating the multilevel and active data models. </title> <type> Technical Report UIUCDCS-R-92-1732, </type> <institution> University of Illinois, Urbana-Champaign, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: Other researchers have used the 26 Starburst Rule System as a basis for studying and implementing secure active databases <ref> [40] </ref>, dynamic integrity constraints [28,43], and automatically-generated compensating actions for static constraints [13]. Although we do consider the Starburst Rule System to be complete at this time, there are several directions in which it may be exercised, improved, and extended: * Currently we have obtained only initial cursory performance results.
Reference: [41] <author> M. Stonebraker, E.N. Hanson, and S. Potamianos. </author> <title> The POSTGRES rule manager. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(7) </volume> <pages> 897-907, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: The Ariel rule language is fully implemented using the Exodus database toolkit [31]. The POSTGRES Rule System, sometimes referred to as PRS2 to distinguish it from an earlier proposal <ref> [41] </ref>, focuses in both its language and its implementation on providing several different classes of rules, each appropriate for a particular suite of applications.
Reference: [42] <author> M. Stonebraker, A. Jhingran, J. Goh, and S. Potamianos. </author> <title> On rules, procedures, caching and views in data base systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 281-290, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year> <month> 30 </month>
Reference-contexts: The three systems closest to the Starburst Rule System are Ariel [31], the second version of the POSTGRES Rule System <ref> [42] </ref>, and Chimera [12,14]. The Ariel system has a rule language and execution semantics based closely on OPS5 [9], a production rule language originally designed for expert systems. <p> There are two implementations of the POSTGRES Rule System, one based on run-time marking of tuples affected by rules, the other based on compile-time rewriting of queries to incorporate the effects of rules <ref> [42] </ref>. The Chimera system combines object-oriented, deductive, and active database technology. Its active rule language is based on Starburst's, with extensions for object-orientation and for "configurable" rule semantics (see Section 4). <p> Hence, we believe that the more complex recursive rule processing algorithms used in, e.g., POSTGRES <ref> [42] </ref> or HiPAC [20], probably are not worthwhile. * Complex conflict resolution policies, such as those used in OPS5 [9] and Ariel [31], do not seem appropriate for most active rule applications.
Reference: [43] <author> D. Toman. </author> <title> Implementing temporal integrity constraints using an active DBMS. </title> <booktitle> In Proceed--ings of the Fourth International Workshop on Research Issues in Data Engineering (RIDE-ADS '94), </booktitle> <pages> pages 87-95, </pages> <address> Houston, Texas, </address> <month> February </month> <year> 1994. </year>
Reference: [44] <author> Y.-W. Wang and E.N. Hanson. </author> <title> A performance comparison of the Rete and TREAT algorithms for testing database rule conditions. </title> <booktitle> In Proceedings of the Eighth International Conference on Data Engineering, </booktitle> <address> Phoenix, Arizona, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: The Ariel project has focused on the design of an OPS5-like rule language for the database setting, and on methods for highly efficient rule condition testing using variations on the Rete and TREAT algorithms designed for OPS5 <ref> [44] </ref>. The Ariel rule language is fully implemented using the Exodus database toolkit [31]. <p> We do incorporate one important optimization, namely that a rule condition is understood to be true as soon as the first tuple in the query is found. However, we do not support incremental condition monitoring methods such as those used in Ariel <ref> [44] </ref> and in OPS5 [9, 36]. We have explored incremental condition evaluation in the context of Starburst [5], and we plan to explore other run-time optimization methods as well.
Reference: [45] <author> J. Widom. </author> <title> A denotational semantics for the Starburst production rule language. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 21(3) </volume> <pages> 4-9, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: A denotational semantics for the Starburst rule language is given in <ref> [45] </ref>, while [2] describes methods for static analysis of Starburst rules. Finally, [17] discusses how the Starburst Rule System can be extended for parallel and distributed database environments.
Reference: [46] <author> J. Widom. </author> <title> The Starburst Rule System: Language design, implementation, </title> <journal> and applications. IEEE Data Engineering Bulletin, Special Issue on Active Databases, </journal> <volume> 15(4) </volume> <pages> 15-18, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: A denotational semantics for the Starburst rule language is given in [45], while [2] describes methods for static analysis of Starburst rules. Finally, [17] discusses how the Starburst Rule System can be extended for parallel and distributed database environments. Except for a short overview in <ref> [46] </ref> and an unpublished user's guide [47], this is the first paper to provide a complete description of the final, operational, Starburst Rule System. 3 3 Syntax of Rule Language The syntax of the Starburst rule language is based on the extended version of SQL supported by the Starburst database system
Reference: [47] <author> J. Widom. </author> <title> Starburst Rule System user's guide. </title> <type> Internal Technical Report, </type> <institution> IBM Almaden Research Center, </institution> <address> San Jose, California, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: Finally, [17] discusses how the Starburst Rule System can be extended for parallel and distributed database environments. Except for a short overview in [46] and an unpublished user's guide <ref> [47] </ref>, this is the first paper to provide a complete description of the final, operational, Starburst Rule System. 3 3 Syntax of Rule Language The syntax of the Starburst rule language is based on the extended version of SQL supported by the Starburst database system [30]. <p> We describe each of these eight commands below. The Starburst Rule System also includes some simple user commands for querying and displaying rules, which we omit from this paper (see <ref> [47] </ref> for details), and commands for user or application initiation of rule processing, which we describe in Section 4. 3.1 Rule Creation Rules are defined using the create rule command.
Reference: [48] <author> J. Widom, R.J. Cochrane, and B.G. Lindsay. </author> <title> Implementing set-oriented production rules as an extension to Starburst. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 275-285, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Several previous papers have described language, implementation, or application development issues related to the Starburst Rule System. An initial proposal for the Starburst rule language appears in [49]. <ref> [48] </ref> describes how the extensibility features of the Starburst prototype are used in implementing the rule system. Details of Starburst's rule priority system are given in [1].
Reference: [49] <author> J. Widom and S.J. Finkelstein. </author> <title> Set-oriented production rules in relational database systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 259-270, </pages> <address> Atlantic City, New Jersey, </address> <month> May </month> <year> 1990. </year> <month> 31 </month>
Reference-contexts: Several previous papers have described language, implementation, or application development issues related to the Starburst Rule System. An initial proposal for the Starburst rule language appears in <ref> [49] </ref>. [48] describes how the extensibility features of the Starburst prototype are used in implementing the rule system. Details of Starburst's rule priority system are given in [1]. <p> In fact, this feature has no effect on the semantics of the rule language <ref> [49] </ref>, but was omitted due to the additional implementation effort. Another useful extension would have been to allow rule actions that invoke arbitrary host language procedures.
References-found: 49

