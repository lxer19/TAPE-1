URL: http://www.cs.toronto.edu/~chechik/courses/2124/lp1.ps
Refering-URL: http://www.cs.toronto.edu/~chechik/courses/2124/readings.html
Root-URL: 
Title: 82 A Guide to LP, The Larch Prover  
Author: Stephen J. Garland and John V. Guttag 
Date: December 31, 1991  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Ben Cherifa, A. and Lescanne, P. </author> <title> An actual implementation of a procedure that mechanically proves termination of rewriting systems based on inequalities between polynomial interpretations, </title> <booktitle> Proceedings of the 8th International Conference on Automated Deduction, Oxford, England, Lecture Notes in Computer Science 230, </booktitle> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1986, </year> <pages> 42-51. </pages>
Reference: [2] <author> Birkhoff, G. </author> <title> On the structure of abstract algebras, </title> <booktitle> Proceedings of the Cambridge Philosophical Society 31 (1935), </booktitle> <pages> 433-454. </pages>
Reference-contexts: A.1 Equational theories An equational theory is a set of equations that is axiomatized by a set of equations, that is, the equational theory of a set E of equations is the set of all equations e such that E jD e. Birkhoff <ref> [2] </ref> proved that the equational theory of E can be characterized syntactically in terms of the congruence relation defined by E over its free word algebra (see Section 4.3).
Reference: [3] <author> Boyer, R. S. and Moore, J S. </author> <title> A Computational Logic, </title> <address> New York: </address> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference: [4] <author> Boyer, R. S. and Moore, J S. </author> <title> A Computational Logic Handbook, </title> <address> New York: </address> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference: [5] <author> Church, A. </author> <title> An unsolvable problem of elementary number theory, </title> <journal> American Journal of Mathematics 58 (1936), </journal> <pages> 345-363. </pages>
Reference-contexts: For some sets A of axioms, there are procedures that can be used to decide whether or not A jD a. By Church's Undecidability Theorem <ref> [5] </ref>, which shows that the first-order theory of the natural numbers under addition and multiplication is undecidable, such procedures do not exist for all A. This appendix describes one approach to finding such procedures for some sets A of equations.
Reference: [6] <author> Dershowitz, N. </author> <title> Orderings for term-rewriting systems, </title> <booktitle> Theoretical Computer Science 17:3 (March 1982), </booktitle> <pages> 279-301. </pages>
Reference-contexts: If ; is globally finite and acyclic, it must nondeterministic ordering choices to be made. When the ordering is fixed, there is at most one convergent rewriting system corresponding to an equational theory <ref> [6] </ref>. 58 be terminating. 28 The converse is not true: if ; is terminating, it is not necessarily globally finite. 29 However, a locally finite relation is terminating if and only if it is both globally finite and acyclic. 30 An important corollary is that the rewriting relation of a finite <p> Most seek to embed the (inverse of) the rewriting relation ; R in a well-founded relation, that is, in a relation &gt; that has no infinite decreasing sequence t 1 &gt; t 2 &gt; t 3 &gt; : : :. A.6.1 Simplification orderings A simplification ordering <ref> [6] </ref> is a partial ordering = (i.e., a transitive, irreflexive binary relation) that is monotonic, in other words, s = t ) f .: : : ; s; : : :/ = f .: : : ; t; : : :/ and that has the subterm property, in other words, f <p> A rewriting system R terminates if there exists a simplification ordering = such that .s/ = .t / for all substitutions and all rewrite rules s ! t in R (see <ref> [6] </ref>). This result provides a means of proving termination that is independent of the set of terms one might attempt to reduce. However, since the number of substitution instances of rewrite rules is usually infinite, it is hard to apply directly.
Reference: [7] <author> Dershowitz, N. and Jouannaud, J.-P., </author> <title> Rewrite systems, </title> <booktitle> Handbook of Theoretical Computer Science, Volume B, Chapter 15, </booktitle> <publisher> North-Holland, </publisher> <year> 1989. </year>
Reference-contexts: introduction to rewriting, see <ref> [7] </ref>. In general, for any set A of axioms and any assertion a, we write A jD a (a is a logical or semantic consequence of A) to mean that a is true in all models of A. <p> Equational reasoning, such as used in Figure 5, does not provide a decision procedure, because the appropriate series of steps in a proof that E jD e must be found and cannot, in general, be computed from E and e. Indeed, some equational theories are undecidable (see <ref> [7] </ref>). 54 A.2 Term-rewriting systems As discussed in Section 4.4, a rewriting system R is a set of equations that have been oriented into rewrite rules. When a rewriting system is terminating, all terms have normal forms; when it is also convergent, all terms have unique normal forms. <p> Such a system is called internormalized. A procedure incorporating these optimizations was first described in [19] and is well known as the Knuth-Bendix completion procedure. The completion procedure was extended to handle associative-commutative operators in [26]. The description presented here is closer to the one appearing in <ref> [7] </ref> than to the earlier formulations. A.6 Proving termination Terminating rewriting systems are desirable for three reasons. If they are confluent, then their equational theories are decidable (by reduction to normal form).
Reference: [8] <author> Detlefs, D. and Forgaard, R. </author> <title> A procedure for automatically proving the termination of a set of rewrite rules, </title> <booktitle> Proceedings of the First International Conference on Rewriting Techniques and Applications, Dijon, France, Lecture Notes in Computer Science 202, </booktitle> <publisher> Springer-Verlag, </publisher> <month> May </month> <year> 1985, </year> <pages> 255-270. </pages>
Reference: [9] <author> Garland, S. J. and Guttag, J. V. </author> <title> Inductive methods for reasoning about abstract data types, </title> <booktitle> Proceedings of the 15th ACM Conference on Principles of Programming Languages, </booktitle> <address> San Diego, California, </address> <month> January </month> <year> 1988, </year> <pages> 219-228. </pages>
Reference: [10] <author> Garland, S. J., Guttag, J. V. and Staunstrup, J. </author> <title> Verification of VLSI circuits using LP, </title> <booktitle> Proceedings of the IFIP WG 10.2 Conference on the Fusion of Hardware Design and Verification, </booktitle> <publisher> North Holland, </publisher> <year> 1988, </year> <pages> 329-345. </pages>
Reference: [11] <author> Garland, S. J. and Guttag, J. V. </author> <title> An overview of LP, the Larch Prover, </title> <booktitle> Proceedings of the Third International Conference on Rewriting Techniques and Applications, </booktitle> <address> Chapel Hill, N.C., </address> <booktitle> Lecture Notes in Computer Science 355, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1989, </year> <pages> 137-151. </pages>
Reference: [12] <author> Garland, S. J., Guttag, J. V. and Horning, J. J. </author> <title> Debugging Larch Shared Language specifications, </title> <journal> IEEE Transactions on Software Engineering 16:9 (September 1990), </journal> <pages> 1044-1057. </pages> <institution> Also available from Digital Equipment Corporation Systems Research Center, </institution> <address> 130 Lytton Avenue, Palo Alto, CA 94301, </address> <note> as Report 60 (July 1990). </note>
Reference: [13] <author> G odel, K. </author> <title> Die Vollst andigkeit der Axiome des logischen Funktionenkalk uls, </title> <journal> Monatshefte fur Mathematik und Physik 37 (1930), </journal> <pages> 349-360. </pages>
Reference-contexts: G odel's Completeness Theorem <ref> [13] </ref> shows that such a notion of provability exists for first-order logic. This theorem provides a semidecision procedure (albeit an inefficient one) for first-order logic, that is, an effective procedure for enumerating the logical consequences of A when A itself is effectively enumerable.
Reference: [14] <author> Guttag, J. V. and Horning, J. J. </author> <title> Report on the Larch Shared Language and A Larch Shared Language Handbook, </title> <booktitle> Science of Computer Programming 6:2 (March 1986), </booktitle> <pages> 103-157. 66 </pages>
Reference: [15] <author> Guttag, J. V., Horning, J. J., and Modet, A. </author> <title> Report on the Larch Shared Language, </title> <institution> Version 2.3 Digital Equipment Corporation Systems Research Center Report 58, </institution> <month> May </month> <year> 1990. </year>
Reference: [16] <author> Harper, R. </author> <title> Report on Standard ML, </title> <type> Report ECS-LFCS-86-14, </type> <institution> Department of Computer Science, University of Edinburgh, </institution> <year> 1986. </year>
Reference-contexts: It was put to practical use in 1965 by Robinson [27] as the basic step in resolution, and is now most widely used in computer science for logic programming and for type inference systems such as that in ML <ref> [16] </ref>. 24 Proof: Suppose t ; fl t 1 and t ; fl t 2 , where t 1 and t 2 are terminal. By confluence, there exists a v such that t 1 ; fl v and t 2 ; fl v.
Reference: [17] <author> Herbrand, J. </author> <title> Recherches sur la theorie de la demonstration, </title> <institution> Travaux de la Soci et e des Sciences et des Lettres de Varsovie, </institution> <note> Classe III sciences math ematiques et physiques 33 (1930), 128 pp. Translation in Logical Writings, </note> <institution> Harvard University Press, </institution> <year> 1971. </year>
Reference-contexts: Some interesting theories, including all undecidable ones, cannot be described by convergent systems. Sometimes a convergent system exists, but finding it is impractical. Sometimes a convergent system exists and is easy to find, but is impractical to use. A.3 Unification Unification was first described by Herbrand <ref> [17] </ref> in 1930.
Reference: [18] <author> Hsiang, J. and Dershowitz, N. </author> <title> Rewrite methods for clausal and nonclausal theorem proving, </title> <booktitle> Proceedings of the 10th EATCS International Colloquium on Automata, Languages, and Programming, Barcelona, Spain, Lecture Notes in Computer Science 154, </booktitle> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1983, </year> <pages> 331-346. </pages>
Reference: [19] <author> Knuth, D. E. and Bendix, P. B. </author> <title> Simple word problems in universal algebras, in Computational Problems in Abstract Algebra, </title> <editor> J. Leech (ed.), </editor> <publisher> Pergamon Press, Oxford, </publisher> <address> England, </address> <year> 1969, </year> <pages> 263-297. </pages>
Reference-contexts: It is easy to see that for a finite rewriting system there are a finite number of critical pairs, and that these are effectively computable. This is important because of the following lemma. Critical-pair lemma <ref> [19, 26] </ref>: A rewriting system is locally confluent if and only if every critical pair is joinable. In conjunction with the diamond lemma, the critical-pair lemma provides a way to decide the confluence of terminating rewriting systems. First compute all critical-pair equations among the rewrite rules. <p> That this is sufficient follows immediately from the critical-pair lemma. Another useful optimization is to keep all equations and rules in normal form with respect to R. Such a system is called internormalized. A procedure incorporating these optimizations was first described in <ref> [19] </ref> and is well known as the Knuth-Bendix completion procedure. The completion procedure was extended to handle associative-commutative operators in [26]. The description presented here is closer to the one appearing in [7] than to the earlier formulations. A.6 Proving termination Terminating rewriting systems are desirable for three reasons.
Reference: [20] <author> Lamport, L. </author> <title> LaTeX: A Document Preparation System, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1986. </year>
Reference: [21] <author> Lamport, L. </author> <title> A Temporal Logic of Actions, </title> <institution> Digital Equipment Corporation Systems Research Center Report 57, </institution> <month> April </month> <year> 1990. </year>
Reference: [22] <author> Lescanne, P. REVE: </author> <title> a rewrite rule laboratory, </title> <booktitle> Proceedings of the 8th International Conference on Automated Deduction, Oxford, England, Lecture Notes in Computer Science 230, </booktitle> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1986, </year> <pages> 695-696. </pages>
Reference: [23] <author> Newman, M. H. A. </author> <title> On theories with a combinatorial definition of `equivalence', </title> <journal> Annals of Mathematics 59: </journal> <month> 4 (October, </month> <year> 1942), </year> <pages> 223-243. </pages>
Reference-contexts: The following important characterization of confluence in terminating rewriting systems is easily proved by induction (see Figure 16). Diamond lemma <ref> [23] </ref>: A terminating rewriting system is confluent if and only if it is locally confluent. Termination is essential for the diamond lemma, as is shown by the locally confluent, but not confluent, set fa ! b, a ! c, c ! a, c ! dg of rewrite rules.
Reference: [24] <author> Paulson, L. C. </author> <title> Logic and Computation: Interactive Proof with Cambridge LCF, </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1987. </year>
Reference: [25] <author> Paulson, L. C. </author> <title> The foundation of a generic theorem prover, </title> <type> Technical Report No. 130, </type> <institution> University of Cambridge Computer Laboratory, </institution> <month> March </month> <year> 1988. </year>
Reference: [26] <author> Peterson, G. L. and Stickel, M. E. </author> <title> Complete sets of reductions for some equational theories, </title> <journal> Journal of the ACM 28:2 (Apr. </journal> <year> 1981), </year> <pages> 233-264. </pages>
Reference-contexts: It is easy to see that for a finite rewriting system there are a finite number of critical pairs, and that these are effectively computable. This is important because of the following lemma. Critical-pair lemma <ref> [19, 26] </ref>: A rewriting system is locally confluent if and only if every critical pair is joinable. In conjunction with the diamond lemma, the critical-pair lemma provides a way to decide the confluence of terminating rewriting systems. First compute all critical-pair equations among the rewrite rules. <p> Such a system is called internormalized. A procedure incorporating these optimizations was first described in [19] and is well known as the Knuth-Bendix completion procedure. The completion procedure was extended to handle associative-commutative operators in <ref> [26] </ref>. The description presented here is closer to the one appearing in [7] than to the earlier formulations. A.6 Proving termination Terminating rewriting systems are desirable for three reasons. If they are confluent, then their equational theories are decidable (by reduction to normal form).
Reference: [27] <author> Robinson, J. A. </author> <title> A machine-oriented logic based on the resolution principle, </title> <journal> Journal of the ACM 12 (1965), </journal> <pages> 23-41. </pages>
Reference-contexts: Sometimes a convergent system exists, but finding it is impractical. Sometimes a convergent system exists and is easy to find, but is impractical to use. A.3 Unification Unification was first described by Herbrand [17] in 1930. It was put to practical use in 1965 by Robinson <ref> [27] </ref> as the basic step in resolution, and is now most widely used in computer science for logic programming and for type inference systems such as that in ML [16]. 24 Proof: Suppose t ; fl t 1 and t ; fl t 2 , where t 1 and t 2
Reference: [28] <author> Saxe, J. B., Garland, S. J., Guttag, J. V., and Horning, J. J., </author> <title> Using transformations and verification in circuit design, </title> <institution> Digital Equipment Corporation Systems Research Center Report 78, </institution> <month> September </month> <year> 1991. </year>
Reference: [29] <author> Siekmann, J. H. </author> <title> An introduction to unification theory, </title> <booktitle> Formal Techniques in Artificial Intelligence: </booktitle>
Reference-contexts: Confluence implies that this form is unique. 55 @ @ @R @ @ @ @ @R @ @ @ @ @R u v local confluence induction induction ; fl ; fl ; fl ; fl ; fl ; ; commutative operators are present, unification becomes considerably more complicated. See <ref> [29] </ref>.) Asymptotically better (e.g., linear) algorithms exist, but the ones that perform best in practice are similar to this.
References-found: 29

