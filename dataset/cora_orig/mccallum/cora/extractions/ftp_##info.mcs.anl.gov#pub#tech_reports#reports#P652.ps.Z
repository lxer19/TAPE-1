URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P652.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts97.htm
Root-URL: http://www.mcs.anl.gov
Email: fdisz,olson,papka,stevens,szymanskg@mcs.anl.gov  firby@cs.uchicago.edu  
Title: Two Implementations of Shared Virtual Space Environments  
Author: Terrence L. Disz, Robert Olson, Michael E. Papka, Rick Stevens and Matthew Szymanski R. James Firby 
Address: Argonne, IL 60439  Chicago, IL 60637  
Affiliation: Mathematics and Computer Science Division Argonne National Laboratory  Department of Computer Science University of Chicago  
Abstract: While many issues in the area of virtual reality (VR) research have been addressed in recent years, the constant leaps forward in technology continue to push the field forward. VR research no longer is focused only on computer graphics, but instead has become even more interdisciplinary, combining the fields of networking, distributed computing, and even artificial intelligence. In this article we discuss some of the issues associated with distributed, collaborative virtual reality, as well as lessons learned during the development of two distributed virtual reality applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Cruz-Neira, D. J. Sandin, and T. A. DeFanti. </author> <title> Surround-screen projection-based virtual reality: </title> <booktitle> The design and implementation of the CAVE. In Computer Graphics (Proceedings of SIGGRAPH '93), </booktitle> <pages> pages 135-142. </pages> <publisher> ACM SIGGRAPH, </publisher> <month> August </month> <year> 1993. </year>
Reference-contexts: The discussions will include an outline of the architecture, implementation, and discoveries. Both implementations use the CAVE family of display devices. The CAVE provides a wide variety of display options, ranging from the desktop to the fully immersive four-wall CAVE environment <ref> [1] </ref>. 2.1 Interactive Agent Environment The Interactive Agent Environment (IAE) system touches on each of the capabilities outlined in the introduction. In addition, this prototype implementation of IAE provides the architecture for testing and evaluating the separation of representation from behavior and computation.
Reference: [2] <author> P. Curtis and D. A. Nichols. </author> <title> Muds grow up: Social virtual reality in the real world. </title> <booktitle> In Proceedings of the 1994 IEEE Computer Conference, </booktitle> <pages> pages 193-200, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Multiuser shared environments have been a topic of research for many years now, from text-based spaces to desktop graphics spaces to immersive virtual reality <ref> [2, 8] </ref>. Other groups have focused on what is needed for distributed collaborative environments [6, 9]. 2 Experimental Environment In this section we introduce and discuss the implementation of the Interactive Agent Environment and ManyWorlds. The discussions will include an outline of the architecture, implementation, and discoveries.
Reference: [3] <author> T. A. DeFanti, M. D. Brown, and R. Stevens, </author> <title> editors. </title> <journal> IEEE Computer Graphics and Applications (Special Report) - VR Over High-Speed Networks, </journal> <volume> volume 16 (4). </volume> <publisher> IEEE Computer Society, </publisher> <year> 1996. </year>
Reference-contexts: We believe that shared virtual space can be used to effectively support wide-area collaborations. Demonstrations of limited forms of shared space collaborative environments have shown both great potential and considerable limitations of current technologies <ref> [3] </ref>.
Reference: [4] <author> T. A. DeFanti, M. E. Papka, and R. Stevens, </author> <title> editors. </title> <journal> The International Journal of Supercomputer Applications and High Performance Computing (Special Issue) - I-WAY: Wide Area Supercomputing Applications, </journal> <volume> volume 10 (2/3). </volume> <publisher> Sage Scientific, </publisher> <year> 1996. </year>
Reference-contexts: Additionally, these systems represent the next logical step after the work done on coupling large-scale computing to virtual environments <ref> [4] </ref>. By studying requirements of shared virtual environment spaces, we can expand our work to support collaboratories and collaborative design.
Reference: [5] <author> T. L. Disz, M. E. Papka, and R. Stevens. </author> <title> Ubiworld: An environment integrating virtual reality, </title> <booktitle> supercomputing and design. In Proceedings of the Heterogeneous Computing Workshop, </booktitle> <month> April </month> <year> 1997. </year> <note> to be published. </note>
Reference-contexts: We are already building on technology developed in these two prototype systems for the UbiWorld project [10] (UbiWorld is a shared virtual space that enables users to explore issues related to ubiquitous computing <ref> [5] </ref>). Multiuser shared environments have been a topic of research for many years now, from text-based spaces to desktop graphics spaces to immersive virtual reality [2, 8].
Reference: [6] <author> I. Foster, M. E. Papka, and R. Stevens. </author> <title> Tools for distributed collaborative environments: A research agenda. </title> <booktitle> In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Compututing, </booktitle> <pages> pages 23-29. </pages> <publisher> IEEE, IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: Multiuser shared environments have been a topic of research for many years now, from text-based spaces to desktop graphics spaces to immersive virtual reality [2, 8]. Other groups have focused on what is needed for distributed collaborative environments <ref> [6, 9] </ref>. 2 Experimental Environment In this section we introduce and discuss the implementation of the Interactive Agent Environment and ManyWorlds. The discussions will include an outline of the architecture, implementation, and discoveries. Both implementations use the CAVE family of display devices.
Reference: [7] <author> W. D. Gropp and B. F. Smith. </author> <title> Scalable, extensible, and portable numerical libraries. </title> <booktitle> In Proceedings of the Scalable Parallel Libraries Conference, </booktitle> <pages> pages 87-93. </pages> <publisher> IEEE, </publisher> <year> 1994. </year>
Reference-contexts: When a file appears, it is added to the set of VRML data that is supplied to the ManyWorlds session. Changes to the file result in VRML data updates in the session. The directory client has been used to interface a PETSc application <ref> [7] </ref>, running on a multiprocessor workstation, to a ManyWorlds session. The PETSc application itself knows nothing of ManyWorlds; it is simply configured to place its output data in VRML format in the directory being scanned by the directory client.
Reference: [8] <author> O. Hagsand. </author> <title> Interactive multiuser VEs in the DIVE system. </title> <journal> IEEE Multimedia, </journal> <volume> 3(1) </volume> <pages> 334-232, </pages> <year> 1996. </year>
Reference-contexts: Multiuser shared environments have been a topic of research for many years now, from text-based spaces to desktop graphics spaces to immersive virtual reality <ref> [2, 8] </ref>. Other groups have focused on what is needed for distributed collaborative environments [6, 9]. 2 Experimental Environment In this section we introduce and discuss the implementation of the Interactive Agent Environment and ManyWorlds. The discussions will include an outline of the architecture, implementation, and discoveries.
Reference: [9] <author> J. Leigh and A. Johnson. </author> <title> Supporting transcontinental collaborative work in persistent virtual environments. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 16(4) </volume> <pages> 47-51, </pages> <month> July </month> <year> 1996. </year>
Reference-contexts: Multiuser shared environments have been a topic of research for many years now, from text-based spaces to desktop graphics spaces to immersive virtual reality [2, 8]. Other groups have focused on what is needed for distributed collaborative environments <ref> [6, 9] </ref>. 2 Experimental Environment In this section we introduce and discuss the implementation of the Interactive Agent Environment and ManyWorlds. The discussions will include an outline of the architecture, implementation, and discoveries. Both implementations use the CAVE family of display devices.
Reference: [10] <author> M. E. Papka and R. Stevens. </author> <title> Ubiworld: An environment integrating virtual reality, </title> <booktitle> supercomputing and design. In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <pages> page 306. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> August </month> <year> 1996. </year> <note> extended abstract. </note>
Reference-contexts: By studying requirements of shared virtual environment spaces, we can expand our work to support collaboratories and collaborative design. We are already building on technology developed in these two prototype systems for the UbiWorld project <ref> [10] </ref> (UbiWorld is a shared virtual space that enables users to explore issues related to ubiquitous computing [5]). Multiuser shared environments have been a topic of research for many years now, from text-based spaces to desktop graphics spaces to immersive virtual reality [2, 8].
Reference: [11] <author> D. C. Schmidt. </author> <title> The adaptive communication environment an object-oriented network programming toolkit for developing communication software. </title> <booktitle> In Sun Users Group Conference, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: The distributed nature of the IAE system relies heavily on communication and on the ability to allow connections from a variety of sources at varying times. At the center is the ACE library: a toolkit that implements fundamental design patterns for communication software and, in particular, the reactor object <ref> [11] </ref>. The reactor object is a design pattern that supports the demultiplexing and dispatching of multiple event handlers [12]. It is an event-driven object capable of handling multiple connection requests by invoking the appropriate event handler at connection time.
Reference: [12] <author> D. C. Schmidt. </author> <title> Pattern Languages of Program Design, chapter Reactor: An Object Behavioral Pattern for Concurrent Event Demultiplexing and Event Handler Dispatching. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year> <month> 7 </month>
Reference-contexts: At the center is the ACE library: a toolkit that implements fundamental design patterns for communication software and, in particular, the reactor object [11]. The reactor object is a design pattern that supports the demultiplexing and dispatching of multiple event handlers <ref> [12] </ref>. It is an event-driven object capable of handling multiple connection requests by invoking the appropriate event handler at connection time. As each connection occurs, an individual communication channel is established between the server and the connecting client, be it a display device or a computational process.
References-found: 12

