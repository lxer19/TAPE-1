URL: http://www.cs.wisc.edu/~horwitz/yacc/yacc.ps
Refering-URL: http://www.cs.wisc.edu/~cs701-2/PROGRAMS/p1.html
Root-URL: 
Title: Yacc: Yet Another Compiler-Compiler portable C. The class of specifications accepted is a very general
Author: Stephen C. Johnson date monthiname day year 
Note: Yacc is written in  0: Introduction Yacc is written in  
Abstract: Computer program input generally has some structure; in fact, every computer program that does input can be thought of as defining an ``input language'' which it accepts. An input language may be as complex as a programming language, or as simple as a sequence of numbers. Unfortunately, usual input facilities are limited, difficult to use, and often are lax about checking their inputs for validity. Yacc provides a general tool for describing the input to a computer program. The Yacc user specifies the structures of his input, together with code to be invoked as each such structure is recognized. Yacc turns such a specification into a subroutine that handles the input process; frequently, it is convenient and appropriate to have most of the flow of control in the user's application handled by this subroutine. The input subroutine produced by Yacc calls a user-supplied routine to return the next basic input item. Thus, the user can specify his input in terms of individual input characters, or in terms of higher level constructs such as names and numbers. The user-supplied routine may also handle idiomatic features such as comment and continuation conventions, which typically defy easy grammatical specification. In addition to compilers for C, APL, Pascal, RATFOR, etc., Yacc has also been used for less conventional languages, including a phototypesetter language, several desk calculator languages, a document retrieval system, and a Fortran debugging system. Yacc provides a general tool for imposing structure on the input to a computer program. The Yacc user prepares a specification of the input process; this includes rules describing the input structure, code to be invoked when these rules are recognized, and a low-level routine to do the basic input. Yacc then generates a function to control the input process. This function, called a parser , calls the user-supplied low-level input routine (the lexical analyzer ) to pick up the basic items (called tokens ) from the input stream. These tokens are organized according to the input structure rules, called grammar rules ; when one of these rules has been recognized, then user code supplied for this rule, an action , is invoked; actions have the ability to return values and make use of the values of other actions. Here, date , monthiname , day , and year represent structures of interest in the input process; presumably, monthiname , day , and year are defined elsewhere. The comma ``,'' is enclosed in single quotes; this implies that the comma is to appear literally in the input. The colon and semicolon merely serve as punctuation in the rule, and have no significance in controlling the input. Thus, with proper definitions, the 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. W. Kernighan and D. M. Ritchie, </author> <title> The C Programming Language, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1978. </year>
Reference: 2. <author> A. V. Aho and S. C. Johnson, </author> <title> ``LR Parsing,'' </title> <journal> Comp. Surveys, </journal> <volume> vol. 6, no. 2, </volume> <pages> pp. 99-124, </pages> <month> June </month> <year> 1974. </year>
Reference: 3. <author> A. V. Aho, S. C. Johnson, and J. D. Ullman, </author> <title> ``Deterministic Parsing of Ambiguous Grammars,'' </title> <journal> Comm. Assoc. Comp. Mach., </journal> <volume> vol. 18, no. 8, </volume> <pages> pp. 441-452, </pages> <month> August </month> <year> 1975. </year>
Reference: 4. <author> A. V. Aho and J. D. Ullman, </author> <title> Principles of Compiler Design, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1977. </year>
Reference: 5. <author> S. C. Johnson, </author> <title> ``Lint, a C Program Checker,'' </title> <journal> Comp. Sci. Tech. Rep. </journal> <volume> No. 65, </volume> <year> 1978. </year> <note> updated version TM 78-1273-3 </note>
Reference: 6. <author> S. C. Johnson, </author> <title> ``A Portable Compiler: Theory and Practice,'' </title> <booktitle> Proc. 5th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pp. 97-104, </pages> <month> January </month> <year> 1978. </year>
Reference: 7. <author> B. W. Kernighan and L. L. Cherry, </author> <title> ``A System for Typesetting Mathematics,'' </title> <journal> Comm. Assoc. Comp. Mach., </journal> <volume> vol. 18, </volume> <pages> pp. 151-157, </pages> <institution> Bell Laboratories, </institution> <address> Murray Hill, New Jersey, </address> <month> March </month> <year> 1975. </year>
Reference: 8. <author> M. E. Lesk, </author> <title> ``Lex A Lexical Analyzer Generator,'' </title> <institution> Comp. Sci. </institution> <type> Tech. Rep. No. 39, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, New Jersey, </address> <month> October </month> <year> 1975. </year> - -- <title> PS1:15-24 Yacc: Yet Another Compiler-Compiler </title>
References-found: 8

