URL: ftp://ftp.cs.umass.edu/pub/ccs/spring/CAISARTS.ps
Refering-URL: http://www-ccs.cs.umass.edu/~humphrey/home.html
Root-URL: 
Title: CAISARTS: A Tool for Real-Time Scheduling Assistance  
Author: Marty Humphrey and John A. Stankovic 
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: CAISARTS (Conceptual, Analytical, and Implementation Scheduling Advice for Real-Time Systems) is a rule-based system used by real-time application designers to obtain expert assistance for all aspects of the design related to scheduling: granularity of tasks, allocation of tasks, choice and analysis of scheduling paradigm, analysis of overheads of particular operating systems and scheduling paradigms, and code templates for tasks. The rule base is partitioned; subsets of the rule base can be selected for firing, thus enabling the user to ask CAISARTS for advice and analysis relevant for different phases of the design. In contrast to existing real-time tools, CAISARTS attempts to cover the entire design process related to scheduling without focusing on, for example, solely schedulability analysis. A unique feature of CAISARTS is that its rule base is extensible by the usera graphical interface is used to add new rules as new real-time results are identified. Challenges in the design of the initial rule set include how to design and partition the rule base so that it can be both easily modifiable and readily usable by the user in choosing rules to fire; how to encode rules that are inherently contradictory; how to encode ambiguous knowledge; and how to make the rules both comprehensive and precise. The effectiveness of CAISARTS is shown through its use on a representative distributed real-time system scenario with end-to-end constraints. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Gallmeister. </author> <title> POSIX.4: Programming for the Real World. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <address> Sebastopol, CA, </address> <year> 1995. </year>
Reference-contexts: Not shown in Figure 1, but accessible by scrolling the window, are POSIX Implementation Approach Container, which contains objects used to specify how POSIX <ref> [1] </ref> services are used to implement the scheduling algorithms; End to End Marker Container, which contains objects used to logically connect a series of tasks or schedulable entities into a single entity; Shared Resource Container, which specify properties of individual objects accessible by schedulable entities or tasks; and Shared Resource User <p> There are Pros and Cons for each situation. For more details, consult page 5-61 of the Handbook of Rate Monotonic Analysis. ADVICE: To implement ComparisonRequest as a hardware interrupt: <ref> [1] </ref> Instantiate a single schedulable entity, and allocate it to Processor CPU2. Fill in the worst-case execution time of the entire response. [2] Assign 11 as the priority of the new schedulable entity. <p> ADVICE: To implement ComparisonRequest with a sporadic server: <ref> [1] </ref> Instantiate two schedulable entities, and allocate them to Processor CPU2. -- the first schedulable entity is the hardware interrupt. <p> SOURCE: Tindell and Clark. Holistic Schedulability Analysis for Distributed Hard Real-Time Systems. Microprocessing and Microprogramming, 40 (1994), pp. 117-134. ADVICE: To use the holistic approach to the end-to-end constraint EstimateTracksEE, <ref> [1] </ref> Reduce the deadline of Task EstimateTracks1 5 milliseconds. [2] Perform a static-priority scheduling analysis on the system. Pay particular attention to those processors (CPU1) that have their task set attributed modified as a result of the previous steps.
Reference: [2] <author> R. Goettge, E. Brehm, C. Palczak, J. Stankovic, and M. Humphrey. </author> <title> Knowledge-based assistance for real-time systems. </title> <booktitle> In Proceedings of the 1st IEEE International Conference on Engineering of Complex Computer Systems (ICECCS'95), </booktitle> <address> Ft. Lauderdale, Florida, </address> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: Conceptually, CAISARTS can be used in conjunction with these tools. 3. Overview of CAISARTS CAISARTS is a modular set of functional components that communicate through a common underlying object management system <ref> [2] </ref>. The two primary functional components are the inference engine and the Graphical User Interface (GUI), which provides access to the objects that describe the environment as well as access to rules and rule sets. <p> For more details, consult page 5-61 of the Handbook of Rate Monotonic Analysis. ADVICE: To implement ComparisonRequest as a hardware interrupt: [1] Instantiate a single schedulable entity, and allocate it to Processor CPU2. Fill in the worst-case execution time of the entire response. <ref> [2] </ref> Assign 11 as the priority of the new schedulable entity. <p> Assign a worst-case execution time that is the amount of time needed to service the interrupt. -- the second schedulable entity is the sporadic server. <ref> [2] </ref> Make the first schedulable entity point at the second schedulable schedulable entity through its 'MustPrecede' slot. [3] Make the task (ComparisonRequest) point at the FIRST schedulable entity through its 'ImplementedBy' slot. [4] Re-invoke the uniprocessor static priority scheduling rules to the schedulability of Processor CPU2 as a whole. <p> SOURCE: Tindell and Clark. Holistic Schedulability Analysis for Distributed Hard Real-Time Systems. Microprocessing and Microprogramming, 40 (1994), pp. 117-134. ADVICE: To use the holistic approach to the end-to-end constraint EstimateTracksEE, [1] Reduce the deadline of Task EstimateTracks1 5 milliseconds. <ref> [2] </ref> Perform a static-priority scheduling analysis on the system. Pay particular attention to those processors (CPU1) that have their task set attributed modified as a result of the previous steps.
Reference: [3] <author> R. Graham. </author> <title> Bounds on multiprocessor timing anomalies. </title> <journal> SIAM Journal on Applied Mathematics, </journal> <volume> 17, </volume> <year> 1969. </year>
Reference-contexts: For example, a designer may use an algorithm to compute an optimal static real-time schedule for a three-processor multiprocessor. Later, the designer may decide to add a fourth processor and find that the system now misses deadlines. This is due to Richard's anomalies <ref> [3] </ref> an algorithmic level misunderstanding. In Rate Monotonic Analysis [7] it is often quite easy to compute schedulability bounds considering task execution times and periods. <p> Fill in the worst-case execution time of the entire response. [2] Assign 11 as the priority of the new schedulable entity. This is equivalent, for this schedulable entity set, to a hardware interrupt. <ref> [3] </ref> Make the task (ComparisonRequest) point at the new schedulable entity through its 'ImplementedBy' slot. [4] Re-invoke the uniprocessor static priority scheduling rules to determine the schedulability of Processor CPU2 as a whole. <p> Assign a worst-case execution time that is the amount of time needed to service the interrupt. -- the second schedulable entity is the sporadic server. [2] Make the first schedulable entity point at the second schedulable schedulable entity through its 'MustPrecede' slot. <ref> [3] </ref> Make the task (ComparisonRequest) point at the FIRST schedulable entity through its 'ImplementedBy' slot. [4] Re-invoke the uniprocessor static priority scheduling rules to the schedulability of Processor CPU2 as a whole.
Reference: [4] <institution> Introspect Technologies, Inc., Colorado Springs, CO. iRAT Technical Overview, </institution> <year> 1994. </year>
Reference-contexts: The user of CAISARTS does not need to know the specific optimality conditions of various algorithms. This concept generalizes to other types of advice as well. 2.3. iRAT iRAT <ref> [4] </ref> is a window-based engineering tool formulated on the analytical techniques of fixed priority scheduling theory and Rate Monotonic Analysis. iRAT consists of a schedulability engine, transformation and analysis dialogs, comprehensive diagnostics, and customized reports. <p> Fill in the worst-case execution time of the entire response. [2] Assign 11 as the priority of the new schedulable entity. This is equivalent, for this schedulable entity set, to a hardware interrupt. [3] Make the task (ComparisonRequest) point at the new schedulable entity through its 'ImplementedBy' slot. <ref> [4] </ref> Re-invoke the uniprocessor static priority scheduling rules to determine the schedulability of Processor CPU2 as a whole. ADVICE: To implement ComparisonRequest with a sporadic server: [1] Instantiate two schedulable entities, and allocate them to Processor CPU2. -- the first schedulable entity is the hardware interrupt. <p> the amount of time needed to service the interrupt. -- the second schedulable entity is the sporadic server. [2] Make the first schedulable entity point at the second schedulable schedulable entity through its 'MustPrecede' slot. [3] Make the task (ComparisonRequest) point at the FIRST schedulable entity through its 'ImplementedBy' slot. <ref> [4] </ref> Re-invoke the uniprocessor static priority scheduling rules to the schedulability of Processor CPU2 as a whole. The Sporadic Server approach is chosen, and reinvoking the schedulability test indicates that timing constraints will be met (the time needed to service the interrupt is assumed to be 0.5 milliseconds).
Reference: [5] <author> K. Kettler, D. Katcher, and J. Strosnider. </author> <title> A modeling methodology for real-time/multimedia operating systems. </title> <booktitle> In Pro ceedings of the 1st Real-Time Technology and Applications Symposium, </booktitle> <address> Chicago, Illinois, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Schedulability checks are performed by combining the application model with the bus model. If the application is not schedulable, the bus model can be changed, certain parameters in the database can be changed, or the application model can be changed. Similar tools have been developed for real-time/multimedia operating systems <ref> [5] </ref> and networks [10]. The primary difference between CAISARTS and these tools lies in the scope and overall goal of CAISARTS. CAISARTS is designed to provide broad, text-based advice concerning allocation, schedulability and implementation, while these tools provide detailed analysis concerning a particular architectural component.
Reference: [6] <author> K. Kettler, J. Lehoczky, and J. Strosnider. </author> <title> Modeling bus scheduling policies for real-time systems. </title> <booktitle> In Proceedings of the 16th Real-Time Systems Symposium, </booktitle> <pages> pages 242-253, </pages> <address> Pisa, Italy, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Tools for Modeling Real-Time System Archi tectural Components Tools have been developed to model various architectural features used in real-time systems. A representative example of these tools models bus scheduling policies <ref> [6] </ref>. This tool provides a formal methodology for the development of bus scheduling models, which can be used by bus designers to improve designs that need to account for real-time traffic. The approach is to specifically account for non-ideal bus behavior that occurs in actual bus implementations.
Reference: [7] <author> M. Klein, T. Ralya, B. Pollak, R. Obenza, and M. </author> <month> Harbour. </month>
Reference-contexts: Later, the designer may decide to add a fourth processor and find that the system now misses deadlines. This is due to Richard's anomalies [3] an algorithmic level misunderstanding. In Rate Monotonic Analysis <ref> [7] </ref> it is often quite easy to compute schedulability bounds considering task execution times and periods. <p> As can be seen from this advice, the focus of scheduling knowledge for distributed end-to-end constraints has been the Holistic Approach [12] and the Distributed Rate Mono tonic approach <ref> [7] </ref>. In addition, distributed rate monotonic is only acknowledged as an option for the user to inves tigate. A future improvement planned for CAISARTS is to replace this temporary, placeholder rule with a set of rules that provide in-depth analysis and advice pertaining to distributed rate monotonic.
References-found: 7

