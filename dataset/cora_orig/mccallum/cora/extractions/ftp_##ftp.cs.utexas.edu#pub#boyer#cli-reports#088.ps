URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/088.ps
Refering-URL: ftp://ftp.cs.utexas.edu/pub/boyer/nqthm/nqthm-bibliography.html
Root-URL: http://www.cs.utexas.edu
Title: A Mathematical Model of the Mach Kernel: Entities and Relations  
Author: William R. Bevier and Lawrence M. Smith 
Note: Copyright c 1995 Computational Logic, Inc.  
Address: 1717 West Sixth Street, Suite 290 Austin, Texas 78703-4776  
Affiliation: Computational Logic, Inc.  
Pubnum: Technical Report  
Email: EMAIL: bevier@cli.com, lsmith@cli.com.  
Phone: TEL: +1 512 322 9951  
Date: 88 December, 1994  
Abstract: Not Releaseable to the Defense Technical Information Center per DoD Instruction 3200.12. DISTRIBUTION LIMITED TO U.S. GOVERNMENT AGENCIES ONLY, THIS DOCUMENT CONTAINS NSA INFORMATION (January 9, 1995 10:5). REQUEST FOR THIS DOCUMENT MUST BE REFERRED TO THE DIRECTOR, NSA. The views and conclusions contained in this document are those of the author(s) and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc. 
Abstract-found: 1
Intro-found: 1
Reference: [BM88] <author> Robert S. Boyer and J Strother Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1988. </year>
Reference-contexts: We have not attempted to provide complete explanations for every concept introduced. We rely heavily on the existing literature, and make frequent references to [Loe91b] for corroboration. This report is derived from an annotated "script" of events submitted to Nqthm, the Boyer-Moore theorem prover <ref> [BM88] </ref>. A script is a file containing function definitions, axioms and theorems in the Nqthm logic. We have arranged for Nqthm to process this script as follows. It checks that all applications of function symbols are syntactically correct, all suggested theorems are in fact true, and all definitions are well-formed.
Reference: [BS93] <author> William R. Bevier and Lawrence M. Smith. </author> <title> A mathematical model of the Mach kernel: Atomic actions and locks. </title> <type> Technical Report 89, </type> <institution> Computational Logic, Inc., </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: As explored in <ref> [BS93] </ref>, the database analogy is useful for addressing atomicity of transitions and concurrency. We believe that this model of a legal state will make it possible to achieve more thorough analysis of Mach implementations and applications. A companion report [BS93] describes the identification of a collection of fine-grained atomic transitions in <p> As explored in <ref> [BS93] </ref>, the database analogy is useful for addressing atomicity of transitions and concurrency. We believe that this model of a legal state will make it possible to achieve more thorough analysis of Mach implementations and applications. A companion report [BS93] describes the identification of a collection of fine-grained atomic transitions in terms of which Mach kernel calls can be implemented. We intend to use this model as a basis for studying the correctness of the parallel implementation of Mach kernel calls.
Reference: [FR86] <author> R. Fitzgerald and R.F. Rashid. </author> <title> The integration of virtual memory management and interprocess communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 4(2), </volume> <month> May </month> <year> 1986. </year>
Reference-contexts: The ultimate source of information about Mach, as for many software systems, has been the source code. Description of the system and its underlying design principles exist in a number of published papers and CMU technical reports, e.g., <ref> [FR86] </ref>, [Ras86], [Tev87].
Reference: [IEE90] <institution> IEEE Standard Portable Operating System Interface for Computer Environments. IEEE, </institution> <address> New York, NY, </address> <year> 1990. </year>
Reference-contexts: Is a new feature purely an extension of Mach | or does it modify existing functionality? Such questions can be addressed by proof, not only by testing. This contrasts with programming language based efforts at standardization like <ref> [IEE90] </ref>. Our third and final goal is to begin research on the formal specification and proof of correctness of applications programs which run on Mach, and 2 of programs and hardware which implement Mach.
Reference: [KS86] <author> Henry F. Korth and Abraham Silberschatz. </author> <title> Database System Concepts. </title> <publisher> McGraw-Hill, </publisher> <year> 1986. </year>
Reference-contexts: A Mach state can be thought of as a graph linking nodes (representing instances of the entity classes) via relations. Alternatively, one may think of the axiomatization of a Mach kernel state in terms of a relational database. (See <ref> [KS86] </ref> for background on relational databases.) Each Mach relation introduced in in this report corresponds to a relation in the database. Each instance of a Mach relation (i.e., an application of a relation predicate to specific arguments) may be thought of as a tuple in the database.
Reference: [Loe91a] <author> Keith Loepere. </author> <title> Mach 3 kernel interface. </title> <type> Technical report, </type> <institution> Open Software Foundation, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: This is the first in a series of reports that give a mathematical model of the functional behavior of the Mach kernel version 3.0. We have several goals in doing this work. The first is simply to provide mathematically precise documentation. As documentation, this report supplements existing sources [Loe91b], <ref> [Loe91a] </ref>. In them, Keith Loepere writes: Although it is a goal of the Mach kernel to minimize abstractions provided by the kernel, it is not a goal to be minimal in the semantics associated with those abstractions.
Reference: [Loe91b] <author> Keith Loepere. </author> <title> Mach 3 kernel principles. </title> <type> Technical report, </type> <institution> Open Software Foundation, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: This is the first in a series of reports that give a mathematical model of the functional behavior of the Mach kernel version 3.0. We have several goals in doing this work. The first is simply to provide mathematically precise documentation. As documentation, this report supplements existing sources <ref> [Loe91b] </ref>, [Loe91a]. In them, Keith Loepere writes: Although it is a goal of the Mach kernel to minimize abstractions provided by the kernel, it is not a goal to be minimal in the semantics associated with those abstractions. <p> As such, each of the abstractions provided has a rich set of semantics associated with it, and a complex set of interactions with other abstractions. | <ref> [Loe91b] </ref>, pg 2. This is an accurate characterization of the microkernel architecture. We believe that our mathematical formulation clarifies the essential features of Mach by precisely defining required behavior of the kernel interface, and ignoring implementation issues. <p> We have not attempted to provide complete explanations for every concept introduced. We rely heavily on the existing literature, and make frequent references to <ref> [Loe91b] </ref> for corroboration. This report is derived from an annotated "script" of events submitted to Nqthm, the Boyer-Moore theorem prover [BM88]. A script is a file containing function definitions, axioms and theorems in the Nqthm logic. We have arranged for Nqthm to process this script as follows. <p> A task contains a header to a linked list of threads owned by the task. This suggests the implementation invariant that the task field of a thread th must point to the task in whose thread list th is linked. 1 cf. <ref> [Loe91b] </ref>, pg. 8 10 5 Ports and Port Sets 5.1 Port Rights Let N be a set. N is a set of names used to identify capabilities on ports. A task has access to a port only via a name in N . <p> The function port-right-refcount is the reference count of a port right. Relation 5.2 port-right-rel (t, p, n, R, i , s) where taskp (t, s) ^ portp (p, s) ^ (n 2 N ) ^ (0 &lt; i &lt; max-refcount) 2 cf. <ref> [Loe91b] </ref>, pg. 28 11 Definition 5.3 port-right-namep (t, n, s) 9 p, R, i : port-right-rel (t, p, n, R, i , s) Axiom 5.4 port-right-namep (t, n, s) ! port-right-rel (t, named-port (t, n, s), n, port-rights (t, n, s), port-right-refcount (t, n, s), s) Neither nullname nor deadname may <p> Axiom 5.16 so-right (t, n, s) ! : r-right (t, n, s) ^ : s-right (t, n, s) At most one task can have a receive right on a port. 5 3 cf. <ref> [Loe91b] </ref>, pg. 30 5 cf. [Loe91b], pg. 25 13 Axiom 5.17 r-right (t 1 , n 1 , s) ^ r-right (t 2 , n 2 , s) ^ (named-port (t 1 , n 1 , s) = named-port (t 2 , n 2 , s)) ! (t 1 = t <p> Axiom 5.16 so-right (t, n, s) ! : r-right (t, n, s) ^ : s-right (t, n, s) At most one task can have a receive right on a port. 5 3 cf. <ref> [Loe91b] </ref>, pg. 30 5 cf. [Loe91b], pg. 25 13 Axiom 5.17 r-right (t 1 , n 1 , s) ^ r-right (t 2 , n 2 , s) ^ (named-port (t 1 , n 1 , s) = named-port (t 2 , n 2 , s)) ! (t 1 = t 2 ) From the name <p> In <ref> [Loe91b] </ref>, page 31, this fact is stated by saying that a receive right can belong to only one port set. <p> Definition 5.26 in-port-set (t, n 1 , s) 9 n: port-set-namep (t, n, s) ^ n 1 2 port-set (t, n, s) 6 cf. <ref> [Loe91b] </ref>, pg. 31 15 Axiom 5.27 in-port-set (t, n 1 , s) ! port-set-namep (t, holding-port-set-name (t, n 1 , s), s) ^ n 1 2 port-set (t, holding-port-set-name (t, n 1 , s), s) Implementation Note. The Mach port set implementation is similar to the port right implementation. <p> The ipc mqueue field of an ipc port is a message queue. This field's data type is a structure that contains a header for a linked list of ipc kmsgs. a cf. <ref> [Loe91b] </ref>, pg. 32 7.2 Reply Ports A message may be associated with a reply port. A reply port is the port to which the receiver of a message may send a reply. To do so, of course, the receiver must have a send right to the reply port. <p> If a port right, then msgt name indicates which right is being transferred. If the element is data, then the msgt inline bit indicates whether it is in line or out of line data. a cf. <ref> [Loe91b] </ref>, pg. 32 39 Implementation Note. A transit memory is implemented by a vm map copy t, which is a variant record of one of three structures: a list of vm entrys. This data structure has the appearance of a segment of a task address space.
Reference: [Ras86] <author> Richard F. Rashid. </author> <title> Threads of a new system. </title> <journal> Unix Review, </journal> <volume> 4(8), </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: 1 Introduction Mach <ref> [Ras86] </ref> is an operating system kernel that has been under development for a number of years, primarily at Carnegie-Mellon University. It is not a fully functional operating system. It implements a few basic abstractions like task, thread, message and port. <p> The ultimate source of information about Mach, as for many software systems, has been the source code. Description of the system and its underlying design principles exist in a number of published papers and CMU technical reports, e.g., [FR86], <ref> [Ras86] </ref>, [Tev87].
Reference: [Tev87] <author> Avadis Tevanian, Jr. </author> <title> Architecture-independent virtual memory management for parallel and distributed environments: The Mach approach. </title> <type> Technical Report CMU-CS-88-106, </type> <institution> Carnegie Mellon University, </institution> <month> December </month> <year> 1987. </year>
Reference-contexts: The ultimate source of information about Mach, as for many software systems, has been the source code. Description of the system and its underlying design principles exist in a number of published papers and CMU technical reports, e.g., [FR86], [Ras86], <ref> [Tev87] </ref>.
Reference: [Web87] <institution> Webster's Ninth New Collegiate Dictionary. Merriam-Webster, Inc., </institution> <year> 1987. </year>
Reference-contexts: The C structures which implement the other entity classes are thread, ipc port, ipc kmsg (a message), vm object (an abstract memory), vm page, processor, processor set, and device. Webster <ref> [Web87] </ref> offers the following as a definition of the word entity. : : : the existence of a thing as contrasted with its attributes. This reflects our attitude about Mach entities. At the level of abstraction of this specification, a Mach entity has no contents.

References-found: 10

