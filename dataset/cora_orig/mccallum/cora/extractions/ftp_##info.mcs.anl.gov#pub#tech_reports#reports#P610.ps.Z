URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P610.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/preprints.htm
Root-URL: http://www.mcs.anl.gov
Title: DNA Solutions to Searching for the Hamiltonian Cycle and the Traveling-Salesman Cycle  
Author: Shaw-Jye Wu, Yuan-Jye J. Wu, and Joe J. Shaw 
Date: October 4, 1996  
Abstract: Computational problems for which an algorithm cannot be determined in polynomial time are classified as NP-complete problems. Because of their great capacity to conduct parallel reactions, DNA molecules and their experimental protocols have been proposed to solve such problems, which otherwise are time-consuming for electronic computers. Based on a working archetype models are presented here to compute two NP-complete problems: searching for the Hamiltonian cycle and the traveling-salesman cycle. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. M. Adleman. </author> <title> Molecular computation of solutions to combinatorial problems. </title> <journal> Science, </journal> <volume> 266 </volume> <pages> 1021-1024, </pages> <year> 1994. </year>
Reference-contexts: Unfortunately, for current electronic-based parallel computers, more processors cause a greater cost in communication channels and synchronization. Nevertheless, a totally different system that employs biomolecules may revolutionize computational procedures. In 1994, Adleman <ref> [1] </ref> first introduced an algorithm and a practical DNA computer to solve one type of NP-complete problem, the Hamiltonian path problem. Later, Lipton [8] described the DNA-based solution of another type of NP-complete problem, the SAT problem. <p> Therefore, the following algorithm based on Adleman's algorithm <ref> [1] </ref> is proposed for DNA-based computation to search for a Hamiltonian cycle: Given an undirected graph with n vertices, 1. Pick one vertex, say v, as the starting and ending vertex. 2. Form all possible paths. 3. <p> Amplified DNA fragments are then run on an agarose gel, and the traveling-salesman cycle is revealed. 3 Discussion Advantages of molecular computation include energy efficiency and high information storage density <ref> [1] </ref>. The true power of the DNA computation, however, resides in its massive parallel capabilities and unique screening strategies. One Weiss unit of T4 DNA ligase yields approximately 4:8fi10 13 concatenating events in 30 minutes, or 2:7fi10 10 events per second.

Reference: [3] <author> T. H. Cormen, C. E Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: A problem that can be solved by a polynomial-time algorithm is tractable for extant electronic-based computers. However, not all problems are so readily addressed, including the class of problems known as NP-complete problems (the term "NP" is short for "nondeterministic polynomial time" <ref> [3, p. 927] </ref>). No polynomial-time algorithm has been discovered for an NP-complete problem. In our example, a parallel computer with a large number of processors may be a solution to get a polynomial elapsed time with respect to n even though there is no polynomial-time algorithm. <p> Now we can describe the Hamiltonian cycle and traveling-salesman problem formally. 2.2 The Hamiltonian Cycle A Hamiltonian cycle is a simple cycle of an undirected graph that contains all vertices of the graph <ref> [3, pp. 953-959] </ref>. In Figure 1B, the shadowed edges depict a Hamiltonian cycle of a graph. A graph that defines a Hamiltonian cycle is said to be Hamiltonian; not all graphs have a Hamiltonian cycle. The problem will be to decide if a given graph is Hamiltonian. <p> The total cost of a cycle is the sum of those individual weights of the edges in the cycle. The problem is to find a Hamiltonian cycle of a given graph with the minimum cost <ref> [3, pp. 959-960] </ref>. An algorithm similar to the one above but with several modifications is proposed to solve the traveling-salesman problem. Imagine a complete, weighted, and undirected graph with n vertices. 1.

Reference: [5] <author> C. M. Fraser, J. D. Gocayne, J. D. White, M. D. Adams, R. A. Clayton, R. D. Fleis-chmann, C. J. Bult, A. R. Kerlavage, G. Sutton, J. M. Kelley, J. L. Fritchman, J. F. Weidman, K. V. Small, M. Sandusky, J. Fuhrmann, D. Nguyen, T. R. Utterback, D. M Saudek, C. A. Phillips, J. M Merrick, J.-F. Tomb, B. A. Dougherty, K. F. Bott, P.-C. Hu, T. S. Lucier, S. N. Peterson, H. O. Smith, C. A. Hutchison III, and J. </author> <title> C Venter. The minimal gene complement of mycoplasma genitalium. </title> <journal> Science, </journal> <volume> 270 </volume> <pages> 397-403, </pages> <year> 1995. </year>
Reference-contexts: Knowledge of how to use biomolecules to achieve computation may also provide insight into the sophisticated machinery of life. Moreover, because the genomes of several organisms have been fully sequenced <ref> [2, 4, 5] </ref>, computation using cellular processes in an entire life form may be a possibility in the future. Acknowledgements We thank Po-Ting Wu and Gail Pieper for helpful discussion.
Reference: [6] <author> D. K. Gifford. </author> <title> On the path to computation with DNA. </title> <journal> Science, </journal> <volume> 266 </volume> <pages> 993-994, </pages> <year> 1994. </year> <month> 12 </month>
Reference-contexts: Single-stranded DNA isolation may be required for this alternative method. The feasibility of using biological molecules for computation has been the subject of controversy and argument since its inception <ref> [6, 9] </ref>. Even though models have been proposed and DNA computers have been constructed, several fundamental issues remain to be resolved. First, biological reactions usually take minutes or hours to complete.
Reference: [7] <author> F. Guarnieri, M. Fliss, and C. Bancroft. </author> <title> Making DNA add. </title> <journal> Science, </journal> <volume> 273 </volume> <pages> 220-223, </pages> <year> 1996. </year>
Reference-contexts: Second, the feasibility and accuracy of DNA-based computation when the problem size is very large remains untested. Moreover, the DNA computation models addressed to date solve only very specific types of problems and do not address universal applications. However, recently Guarnieri et al. <ref> [7] </ref> reported the use of DNA molecules to achieve addition, a very welcome broadening of this new field of molecular computation. The applications of biocomputation remain to be explored. The prospect of biocom-putation should not be restricted to DNA molecules only.
Reference: [8] <author> R. J. Lipton. </author> <title> DNA solution of hard computational problems. </title> <journal> Science, </journal> <volume> 268 </volume> <pages> 542-545, </pages> <year> 1995. </year>
Reference-contexts: Nevertheless, a totally different system that employs biomolecules may revolutionize computational procedures. In 1994, Adleman [1] first introduced an algorithm and a practical DNA computer to solve one type of NP-complete problem, the Hamiltonian path problem. Later, Lipton <ref> [8] </ref> described the DNA-based solution of another type of NP-complete problem, the SAT problem. These solutions demonstrated both the feasibility of solving computational problems by manipulating biological molecules and the potential usefulness of the massively parallel processing power derived from such an approach.
Reference: [9] <author> R. </author> <title> Pool. A boom in plans for DNA computing. </title> <journal> Science, </journal> <volume> 268 </volume> <pages> 498-499, </pages> <year> 1995. </year> <month> 13 </month>
Reference-contexts: Single-stranded DNA isolation may be required for this alternative method. The feasibility of using biological molecules for computation has been the subject of controversy and argument since its inception <ref> [6, 9] </ref>. Even though models have been proposed and DNA computers have been constructed, several fundamental issues remain to be resolved. First, biological reactions usually take minutes or hours to complete.
References-found: 7

