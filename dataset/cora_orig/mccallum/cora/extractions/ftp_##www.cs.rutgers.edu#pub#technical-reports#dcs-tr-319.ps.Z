URL: ftp://www.cs.rutgers.edu/pub/technical-reports/dcs-tr-319.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Email: ibarra@paul.rutgers.edu  
Title: Finding pattern matchings for permutations  
Author: Louis Ibarra 
Date: January 19, 1995  
Address: Piscataway, NJ 08855  
Affiliation: Dept. of Computer Science Hill Center, Busch Campus Rutgers University  
Abstract: mutations is to determine whether there is a length k subsequence of T whose elements are ordered in the same way as the elements of P . We present an O(kn 4 ) time and O(kn 3 ) space algorithm for finding a match of P into T or determining that no match exists, given that P is separable, i.e. contains neither (2, 4, 1, 3) nor (3, 1, 4, 2) as a subpattern. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Bose, J.F. Buss, and A. Lubiw. </author> <title> Pattern matching for permutations. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures, Lecture Notes in Computer Science 709, </booktitle> <pages> pages 200-209, </pages> <address> New York, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The general decision problem is NP-complete, but there is a polynomial time algorithm when P is separable, i.e. P contains neither the pattern (2, 4, 1, 3) nor (3, 1, 4, 2) <ref> [1] </ref>. The significance of separable permutations is the following. <p> The key result is that a permutation P is separable iff P has a separating tree <ref> [1, 2] </ref>. Furthermore, there is a linear time algorithm to decide if a permutation P is separable and if so, to construct a separating tree for P [1]. <p> The key result is that a permutation P is separable iff P has a separating tree [1, 2]. Furthermore, there is a linear time algorithm to decide if a permutation P is separable and if so, to construct a separating tree for P <ref> [1] </ref>. The algorithm for the pattern matching problem for permutations in [1] counts the number of matches of P into T and runs in O (kn 6 ) time with O (kn 4 ) space, given that P is separable. <p> Furthermore, there is a linear time algorithm to decide if a permutation P is separable and if so, to construct a separating tree for P <ref> [1] </ref>. The algorithm for the pattern matching problem for permutations in [1] counts the number of matches of P into T and runs in O (kn 6 ) time with O (kn 4 ) space, given that P is separable. <p> Our approach is also dynamic programming, but there are fewer subproblems per node of the tree and computing the solutions for an internal node from the solutions for its children is done more quickly than in <ref> [1] </ref>. We will use some additional definitions. We slightly generalize the definition of pattern matching for permutations as follows. Let Q = (q 1 ; : : : ; q l ) be a sequence of distinct positive integers.
Reference: [2] <author> D.G. Corneil, H. Lerchs, </author> <title> and L.S. Burlingham. Complement-reducible graphs. </title> <journal> Discrete Applied Math, </journal> <volume> 3 </volume> <pages> 163-174, </pages> <year> 1981. </year> <month> 4 </month>
Reference-contexts: The key result is that a permutation P is separable iff P has a separating tree <ref> [1, 2] </ref>. Furthermore, there is a linear time algorithm to decide if a permutation P is separable and if so, to construct a separating tree for P [1].
References-found: 2

