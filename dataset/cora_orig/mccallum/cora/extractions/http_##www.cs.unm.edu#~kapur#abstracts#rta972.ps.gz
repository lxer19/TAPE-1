URL: http://www.cs.unm.edu/~kapur/abstracts/rta972.ps.gz
Refering-URL: http://www.cs.unm.edu/~kapur/abstracts/rta972.html
Root-URL: http://www.cs.unm.edu
Email: kapur@cs.albany.edu  siva@cse.iitb.ernet.in  
Phone: 2  
Title: A Total, Ground Path Ordering for Proving Termination of AC-Rewrite Systems  
Author: Deepak Kapur and G. Sivakumar 
Address: New York, Albany, NY 12222  India  
Affiliation: 1 Department of Computer Science, State University of  Computer Science Department, Indian Institute of Technology, Bombay,  
Abstract: A new path ordering for showing termination of associative-commutative (AC) rewrite systems is defined. If the precedence relation on function symbols is total, the ordering is total on ground terms, but unlike the ordering proposed by Rubio and Nieuwenhuis, this ordering can orient the distributivity property in the proper direction. The ordering is defined in a natural way using recursive path ordering with status as the underlying basis. This settles a longstanding problem in termination orderings for AC rewrite systems. The ordering can be used to define an ordering on nonground terms. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Bachmair, L., and Plaisted, D.A. </author> <year> (1985): </year> <title> Termination orderings for associative-commutative rewriting systems. </title> <journal> J. Symbolic Computation, </journal> <volume> 1, </volume> <pages> 329-349 </pages>
Reference-contexts: Also, distribu-tivity axioms like a fl (b + c) ! (a fl b) + (a fl c) are frequently used. Developing path orderings for associative-commutative (AC) rewrite systems has been quite a challenge at least for a decade. A number of attempts have been reported in <ref> [1, 15, 4] </ref>; see also [11, 2] for polynomial orderings as well as [6] for other approaches. In 1990, Kapur, Sivakumar and Zhang proposed a general ordering scheme based on recursive path ordering with status (rpos) without any restrictions on the precedence relation between function symbols [9].
Reference: 2. <author> Ben Cherifa, A., and Lescanne, P. </author> <year> (1987): </year> <title> Termination of rewriting systems by polynomial interpretations and its implementation. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 9, 2, </volume> <pages> 137-160. </pages>
Reference-contexts: Developing path orderings for associative-commutative (AC) rewrite systems has been quite a challenge at least for a decade. A number of attempts have been reported in [1, 15, 4]; see also <ref> [11, 2] </ref> for polynomial orderings as well as [6] for other approaches. In 1990, Kapur, Sivakumar and Zhang proposed a general ordering scheme based on recursive path ordering with status (rpos) without any restrictions on the precedence relation between function symbols [9].
Reference: 3. <author> Comon, H., Nieuwenhuis, R., and Rubio, A. </author> <year> (1995): </year> <title> Orderings, AC-theories, and symbolic constraint solving, </title> <booktitle> In Proc. 10th IEEE Symp. Logic in Computer Science, </booktitle> <address> San Diego, </address> <year> 1995. </year>
Reference-contexts: The focus of this paper is to define a total ordering on AC ground terms when a total precedence relation on function symbols is given, thus highlighting the new ideas and constructions. The ordering can be extended to nonground terms using methods based on constraint solving proposed in <ref> [3] </ref>, or using an approximation when dealing with nonground AC-terms. We plan to develop an extension of the ordering on ground terms to nonground terms without having to resort to constraint solving or approximations. <p> The definition of the ordering is given only on ground terms. There are two obvious ways to lift this ordering to nonground terms. The first way is to use constraint based approaches <ref> [3] </ref>. The second approach is to slightly modify the definition of O ac . <p> We believe the proposed ordering provides a nice foundation for developing a maximal path ordering [7], because it can be used to compare many terms that are incomparable in the KSZ ordering as well as RN's ordering. We also think most of the results reported in <ref> [3] </ref> for constraint solving with AC terms using RN's ordering would extend to the proposed ordering also. Acknowledgements: The ideas for this paper were developed while Kapur was visiting the Max-Planck Institute, Saarbrucken, Germany, in August, 1995. Kapur would like to thank Harald Ganzinger for inviting him there.
Reference: 4. <author> Delor, C., Puel, L. </author> <year> (1993): </year> <title> Extension of the associative path ordering to a chain of associative commutative symbols. </title> <booktitle> Proc. of 5th Intl. Conf. on Rewrite Techniques and Applications (RTA-93), </booktitle> <publisher> LNCS, Springer-Verlag, </publisher> <pages> 389-404. </pages>
Reference-contexts: Also, distribu-tivity axioms like a fl (b + c) ! (a fl b) + (a fl c) are frequently used. Developing path orderings for associative-commutative (AC) rewrite systems has been quite a challenge at least for a decade. A number of attempts have been reported in <ref> [1, 15, 4] </ref>; see also [11, 2] for polynomial orderings as well as [6] for other approaches. In 1990, Kapur, Sivakumar and Zhang proposed a general ordering scheme based on recursive path ordering with status (rpos) without any restrictions on the precedence relation between function symbols [9]. <p> Because of this anomaly, the use of their ordering for orienting axioms of familiar algebraic structures with AC operators becomes problematic. Marche [12] proposed doing a lexicographic combination of associative path orderings extended by Delor and Puel <ref> [4] </ref> and RN's ordering to address this problem.
Reference: 5. <author> Dershowitz, N. </author> <year> (1987): </year> <title> Termination of rewriting. </title> <journal> J. Symbolic Computation, </journal> <volume> 3, </volume> <pages> 69-116. </pages>
Reference-contexts: Syntactic "path orderings" based on a precedence relation O on function symbols have been developed to prove termination of a set of rewrite rules. A comprehensive survey is <ref> [5] </ref>. As in the example above, many interesting and useful rewrite systems have operators (like +,fl,_,^,) which are associative and commutative. Also, distribu-tivity axioms like a fl (b + c) ! (a fl b) + (a fl c) are frequently used. <p> S O mul T if for every element t in T S, we can find an element s in S T such that s O t. Similarly, O lex extends O to sequences <ref> [5] </ref>. One approach to proving termination of rewrite systems is to use simplification orderings. <p> Any simplification ordering O on terms is well-founded, that is, there is no infinite descending chain of terms t 1 O t 2 O t 3 ::: <ref> [5] </ref>. A simplification ordering that also has the Stability property (for all terms s and t, s O t implies that for all ground substitutions oe, soe O toe) can be used for proving termination of rewrite systems. <p> Also without loss of generality, we assume that there is at least one constant symbol in F , and we denote the smallest constant in F by a. The recursive path ordering (with status) O rpo extends O to a well-founded ordering on terms <ref> [5] </ref>. <p> This leads to the comparison of the multiset fj (b; a); ag with fa; ag in one case and fj (a; a); bg in the other. In both cases, t is bigger by recursively using the RPO definition. It can be shown that O rpo is a simplification ordering <ref> [5] </ref>.
Reference: 6. <author> Gnaeding, I., and Lescanne, P. </author> <year> (1986): </year> <title> Proving termination of associative-commutative rewriting systems by rewriting. </title> <booktitle> Proc. of 8th Intl. Conf. on Automated Deduction (CADE-8), </booktitle> <publisher> Oxford, LNCS 230 (ed. Siekmann), Springer Verlag, </publisher> <pages> 52-60. </pages>
Reference-contexts: Developing path orderings for associative-commutative (AC) rewrite systems has been quite a challenge at least for a decade. A number of attempts have been reported in [1, 15, 4]; see also [11, 2] for polynomial orderings as well as <ref> [6] </ref> for other approaches. In 1990, Kapur, Sivakumar and Zhang proposed a general ordering scheme based on recursive path ordering with status (rpos) without any restrictions on the precedence relation between function symbols [9].
Reference: 7. <author> Kapur, D., and Sivakumar, G. </author> <year> (1995): </year> <title> Maximal extensions of simplification or-derings. </title> <booktitle> Proc. of 15th Conf. on Foundations of Software Technology and Theoretical Computer Science (ed. Thiagarajan), </booktitle> <address> Bangalore, India, </address> <publisher> Springer Verlag LNCS 1026, </publisher> <pages> 225-239, </pages> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: We plan to develop an extension of the ordering on ground terms to nonground terms without having to resort to constraint solving or approximations. The proposed ordering can also be used as a basis to define a maximal ordering on nonground AC terms using ideas proposed in <ref> [7] </ref>. 2 Rewrite systems and Simplification Orderings Let F be a set of function symbols, and T (F; X) be the set of terms built using function symbols in F and variables in X: Each function symbol f 2 F has an arity n 0; constants are function symbols of arity <p> We are investigating an extension of the proposed ordering to nonground terms by modifying the definition of candidates. We believe the proposed ordering provides a nice foundation for developing a maximal path ordering <ref> [7] </ref>, because it can be used to compare many terms that are incomparable in the KSZ ordering as well as RN's ordering. We also think most of the results reported in [3] for constraint solving with AC terms using RN's ordering would extend to the proposed ordering also.
Reference: 8. <author> Kapur, D., and Sivakumar, G. </author> <year> (1997): </year> <title> A total, ground path ordering for proving termination of AC-Rewrite systems. </title> <institution> Dept. of Computer Science, University at Albany, Albany, NY. </institution> <note> An expanded version of this paper. </note>
Reference-contexts: Because of lack of space, this proof is omitted. An interested reader may consult <ref> [8] </ref> for details. Below is the most complex proof done essentially by case analysis. Lemma 14 (AC-Replacement Property). s O ac t and h 2 F AC implies s 0 = h (s; u) O ac h (t; u) = t 0 for any term u. Proof.
Reference: 9. <author> Kapur, D., Sivakumar, G. and Zhang, H. </author> <year> (1995): </year> <title> A new ordering for proving termination of AC-rewrite systems. </title> <editor> J. </editor> <booktitle> Automated Reasoning, </booktitle> <year> 1995. </year>
Reference-contexts: In 1990, Kapur, Sivakumar and Zhang proposed a general ordering scheme based on recursive path ordering with status (rpos) without any restrictions on the precedence relation between function symbols <ref> [9] </ref>. Their ordering scheme however has a weakness: it is not total on equivalence classes of AC ground terms even when the precedence relation on function symbols is total. <p> Based on rpos, Rubio and Nieuwenhuis introduced a total ordering on ground terms for a total precedence relation on function symbols by elevating arguments of an AC operator whose root is smaller than the AC operator [14], an idea proposed in <ref> [9] </ref>. They also demonstrated how their ordering (henceforth called RN's ordering) can be lifted to nonground terms. The main weakness of their ordering is that it does not orient distributivity properly. <p> But there could be arguments whose top symbol is smaller than f but below the top symbol, there are subterms whose top symbol is f itself or a function symbol bigger than f. Such subterms are called elevatable as they may have to be elevated for comparison as in <ref> [9] </ref>. We use the idea of candidates to handle such arguments (candidates are similar to interpretations in [14]). 3.1 Candidates To define candidates formally, we first define elevatable subterms. Definition 2. <p> The ordering assumes a total precedence relation on function symbols. In contrast to other orderings <ref> [9, 13, 14] </ref>, it has very nice properties | the ordering on ground terms is total, it orients distributivity in the proper way, and it can be easily implemented since it is a generalization of rpos. The definition of the ordering is given only on ground terms.
Reference: 10. <author> Kapur, D., and Zhang, H. </author> <year> (1995): </year> <title> An overview of Rewrite Rule Laboratory (RRL). </title> <journal> J. Computer and Mathematics with Applications, </journal> <volume> 29, 2, </volume> <pages> 91-114. </pages>
Reference: 11. <author> Lankford, D.S. </author> <year> (1979): </year> <title> On proving term rewriting systems are noetherian. </title> <institution> Memo MTP-3, Lousiana State University. </institution>
Reference-contexts: Developing path orderings for associative-commutative (AC) rewrite systems has been quite a challenge at least for a decade. A number of attempts have been reported in [1, 15, 4]; see also <ref> [11, 2] </ref> for polynomial orderings as well as [6] for other approaches. In 1990, Kapur, Sivakumar and Zhang proposed a general ordering scheme based on recursive path ordering with status (rpos) without any restrictions on the precedence relation between function symbols [9].
Reference: 12. <author> Marche, C. </author> <year> (1994): </year> <title> Normalized rewriting and normalized completion. </title> <booktitle> In Proc. 9th IEEE Symp. Logic in Computer Science, </booktitle> <address> Paris, </address> <year> 1994. </year>
Reference-contexts: In particular, even if fl &gt; +, a fl (b + c) &lt; (a fl b) + (a fl c). Because of this anomaly, the use of their ordering for orienting axioms of familiar algebraic structures with AC operators becomes problematic. Marche <ref> [12] </ref> proposed doing a lexicographic combination of associative path orderings extended by Delor and Puel [4] and RN's ordering to address this problem.
Reference: 13. <author> Narendran, P., and Rusinowitch, M. </author> <year> (1991): </year> <title> Any ground associative commutative theory has a finite canonical system. In Book, </title> <editor> R. (ed.) </editor> <booktitle> Proc. of 4th Intl. Conf. on Rewrite Techniques and Applications (RTA-91), </booktitle> <volume> LNCS 488, </volume> <pages> 423-434. </pages>
Reference-contexts: Their ordering scheme however has a weakness: it is not total on equivalence classes of AC ground terms even when the precedence relation on function symbols is total. A total ordering on AC-ground terms was first proposed by Narendran and Rusinowitch <ref> [13] </ref> based on polynomial interpretations, which was used to show that every ground AC theory has a canonical rewrite system. Unfortunately, that ordering does not orient distributivity appropriately. It is also unclear how that ordering can be lifted to nonground terms. <p> The ordering assumes a total precedence relation on function symbols. In contrast to other orderings <ref> [9, 13, 14] </ref>, it has very nice properties | the ordering on ground terms is total, it orients distributivity in the proper way, and it can be easily implemented since it is a generalization of rpos. The definition of the ordering is given only on ground terms.
Reference: 14. <author> Rubio, A., Nieuwenhuis, R. </author> <year> (1993): </year> <title> A precedence-based total AC-compatible ordering. </title> <editor> In Kirchner, C. (ed.) </editor> <booktitle> Proc. of 5th Intl. Conf. on Rewrite Techniques and Applications (RTA-93), </booktitle> <publisher> LNCS Springer-Verlag, </publisher> <pages> 374-388. </pages>
Reference-contexts: It is also unclear how that ordering can be lifted to nonground terms. Based on rpos, Rubio and Nieuwenhuis introduced a total ordering on ground terms for a total precedence relation on function symbols by elevating arguments of an AC operator whose root is smaller than the AC operator <ref> [14] </ref>, an idea proposed in [9]. They also demonstrated how their ordering (henceforth called RN's ordering) can be lifted to nonground terms. The main weakness of their ordering is that it does not orient distributivity properly. <p> Such subterms are called elevatable as they may have to be elevated for comparison as in [9]. We use the idea of candidates to handle such arguments (candidates are similar to interpretations in <ref> [14] </ref>). 3.1 Candidates To define candidates formally, we first define elevatable subterms. Definition 2. <p> The ordering assumes a total precedence relation on function symbols. In contrast to other orderings <ref> [9, 13, 14] </ref>, it has very nice properties | the ordering on ground terms is total, it orients distributivity in the proper way, and it can be easily implemented since it is a generalization of rpos. The definition of the ordering is given only on ground terms.
Reference: 15. <author> Steinbach, J. </author> <year> (1989): </year> <title> Path and decomposition orderings for proving AC-termination. </title> <institution> Seki-Report, SR-89-18, University of Kaiserslautern. </institution> <note> See also "Improving associative path orderings," </note> <editor> in: </editor> <booktitle> Proc. of 10th Intl. Conf. on Automated Deduction (CADE-10), </booktitle> <address> Kaiserslautern, </address> <publisher> LNCS 449 (ed. Stickel), </publisher> <pages> 411-425. </pages>
Reference-contexts: Also, distribu-tivity axioms like a fl (b + c) ! (a fl b) + (a fl c) are frequently used. Developing path orderings for associative-commutative (AC) rewrite systems has been quite a challenge at least for a decade. A number of attempts have been reported in <ref> [1, 15, 4] </ref>; see also [11, 2] for polynomial orderings as well as [6] for other approaches. In 1990, Kapur, Sivakumar and Zhang proposed a general ordering scheme based on recursive path ordering with status (rpos) without any restrictions on the precedence relation between function symbols [9].
References-found: 15

