URL: ftp://ftp.cs.arizona.edu/schooner/papers/jpdc-6-94.ps.Z
Refering-URL: http://www.cs.arizona.edu/schooner/html-files/publications.html
Root-URL: http://www.cs.arizona.edu
Title: A Software Platform for Constructing Scientific Applications from Heterogeneous Resources  
Author: Patrick T. Homer Richard D. Schlichting 
Address: Tucson, Arizona 85721  
Affiliation: Department of Computer Science The University of Arizona  
Date: 1994  21, 3, (June 1994), 301-315.  
Note: February,  Journal of Parallel and Distributed Computing  This work supported in part by the National Science Foundation under grant ASC-9204021. Homer is supported by the National Aeronautics and Space Administration under GSRP grant NGT-50966.  
Abstract: Support for heterogeneous processing is useful for increasing the functionality available to designers of scientific applications. For example, rather than implement an application requiring remote vector processing and local visualization as two separate programs, such support allows an alternative structure in which the application is a single logical program with transparent transfer of control and data between phases. In addition to being simpler and more intuitive, such structuring makes it feasible to enhance the way in which users interact with the application to do, for instance, model steering. Here, a software platform that facilitates the construction of this type of scientific application is described. Its key component is Schooner, an interconnection system that includes an intermediate data representation, a simple specification language, and a heterogeneous remote procedure call (RPC) facility; to provide sophisticated visualization capabilities and an execution framework, AVS is included as well. Two applications built using this platform, one from molecular dynamics and the other involving neural nets, are also described. One important conclusion is that enhanced monitoring and interaction facilities impose very little overhead for applications such as these. 
Abstract-found: 1
Intro-found: 1
Reference: [Alle82] <author> Allen, </author> <title> M.P. and Tildesley, D.J. Computer simulation of liquids. </title> <journal> CCP5 Quarterly 6, </journal> <month> 4 </month> <year> (1982). </year>
Reference-contexts: In this section, we describe how these applications were adapted and also attempt to illustrate that the increase in interaction capabilities incurs only a minimal performance cost. -14 4.1. Molecular Dynamics This program computes constant energy-volume-number particle dynamics for Lennard-Jones 12-6 interparticle forces using an algorithm based on <ref> [Alle82] </ref>. On each time step, it advances the positions of the particles, and then computes the forces among the particles, and the kinetic energy and thermodynamics of the system. The particles reside in a unit cube and their initial positions are uniformly distributed within the cube.
Reference: [Alme85] <author> Almes, G.T., Black, A.P., Lazowska, E.D., and Noe, J.D. </author> <title> The Eden system: A technical review. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-11, </volume> <month> 1 (Jan. </month> <year> 1985), </year> <pages> 43-59. </pages>
Reference-contexts: Also closely related to the Schooner component of the platform are other RPC schemes with features such as external data representations, specification languages, and stub compilers <ref> [Alme85, Birr84, Sun90, Xero81] </ref>. Several of these systems also emphasize heterogeneity, including Matchmaker [Jone85], Horus [Gibb87], and HRPC (Heterogeneous RPC) [Bers87].
Reference: [Andr87] <author> Andrews, G.R., Schlichting, R.D., Hayes, R., and Purdin, T.D.M. </author> <title> The design of the Saguaro distributed operating system. </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> SE-13, </volume> <month> 1 (Jan. </month> <year> 1987), </year> <pages> 104-118. </pages>
Reference-contexts: Each service can also be used for other purposes as well; for example, the type specification language has also been used as the basis for a command language interpreter <ref> [Andr87] </ref>. Table 1 outlines the steps required to adapt an application to utilize Schooner's facilities, illustrating the role played by each service. In what follows, we elaborate on the role of each service in the Schooner system. 2.2.
Reference: [AVS92] <author> Advanced Visual Systems Inc. </author> <title> AVS Developer's Guide (Release 4.0), Part number: 320-0013-02, Rev B, Advanced Visual Systems Inc., </title> <address> Waltham, Mass., </address> <month> May </month> <year> 1992. </year>
Reference-contexts: UTS, which also served as the basis for Schooner's predecessor system MLP [Haye87, Haye88, Haye90], provides a simple specification language and a canonical intermediate data representation that simplifies heterogeneous processing. To provide sophisticated visualization capabilities and an overall execution framework, the AVS scientific visualization system <ref> [AVS92] </ref> is included as the second component of the platform. The net result is an infrastructure that allows new and existing software modules executing on a wide variety of machines to be composed into a single application. This paper is structured as follows.
Reference: [Begu91] <author> Beguelin, A., Dongarra, J. J., Geist, G. A., Manchek, R., and Sunderam, V. S. </author> <title> Graphical development tools for network-based concurrent supercomputing. </title> <booktitle> Proc. Supercomputing '91, </booktitle> <address> Albuquerque, NM (Nov. </address> <year> 1991), </year> <pages> 435-444. </pages>
Reference-contexts: One is that in some applications, collections of heterogeneous machines can be used to execute a parallel algorithm, thereby allowing the application to produce results faster. Facilitating the use of heterogeneity for such purposes is the target of systems such as PVM <ref> [Begu91, Sund90] </ref>, p4 [Butl92], and APPL [Quea93], which provide sophisticated software infrastructures that, in essence, turn a network of (possibly) heterogeneous workstations into a cost-effective parallel machine. Experience has shown the usefulness of exploiting heterogeneity in this way for many different applications [Nede92, Sund92a, Sund92b]. <p> As can be seen, this penalty is small even when the monitoring frequency is fairly high. In the example mentioned earlier where 210,000 iterations were used, monitoring every 100 iterations would equate to 2,100 calls for an estimated 5.9% slower execution. 5. Related Work The PVM (Parallel Virtual Machine) <ref> [Sund90, Begu91] </ref> project is representative of a class of systems (including p4 [Butl92], APPL [Quea93], and others) that provides general support for constructing parallel and distributed programs using a collection of heterogeneous machines.
Reference: [Bers87] <author> Bershad, B.N., Ching, D.T., et al. </author> <title> A remote procedure call facility for interconnecting heterogeneous computer systems. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-13, </volume> <month> 8 (Aug. </month> <year> 1987), </year> <pages> 880-894. </pages>
Reference-contexts: Also closely related to the Schooner component of the platform are other RPC schemes with features such as external data representations, specification languages, and stub compilers [Alme85, Birr84, Sun90, Xero81]. Several of these systems also emphasize heterogeneity, including Matchmaker [Jone85], Horus [Gibb87], and HRPC (Heterogeneous RPC) <ref> [Bers87] </ref>. The primary distinction between this work and Schooner is one of orientation: the main aim of the other systems is to support interprocess communication for client/server style operating system services, whereas Schooner is intended for building user-level applications.
Reference: [Birr84] <author> Birrell, A. D. and Nelson, B. J. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Trans. on Computer Systems 2, </journal> <month> 1 (Feb. </month> <year> 1984), </year> <pages> 39-59. </pages>
Reference-contexts: Also closely related to the Schooner component of the platform are other RPC schemes with features such as external data representations, specification languages, and stub compilers <ref> [Alme85, Birr84, Sun90, Xero81] </ref>. Several of these systems also emphasize heterogeneity, including Matchmaker [Jone85], Horus [Gibb87], and HRPC (Heterogeneous RPC) [Bers87].
Reference: [Blac86] <author> Black, A., Hutchinson, N., Jul, E. and Levy, H. </author> <title> Object structure in the Emerald system. </title> <booktitle> Proc. ACM Conf. on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <month> Oct. </month> <year> 1986, </year> <pages> 78-86. </pages>
Reference-contexts: There is one stub compiler for each supported programming language. Currently, Schooner has stub compilers for C and FORTRAN; various versions of the predecessor MLP system also supported Pascal, Icon [Gris90], and Emerald <ref> [Blac86, Blac87] </ref>. After stubs for a component are generated from the specification, they are compiled using the appropriate language processor. The resulting object module is then linked with the user's code, the UTS libraries, and the Schooner runtime support libraries to produce an executable.
Reference: [Blac87] <author> Black, A., Hutchinson, N., Jul, E., Levy, H. and Carter, L. </author> <title> Distribution and abstract types in Emerald. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-13, </volume> <month> 1 (Jan. </month> <year> 1987), </year> <pages> 65-76. </pages>
Reference-contexts: There is one stub compiler for each supported programming language. Currently, Schooner has stub compilers for C and FORTRAN; various versions of the predecessor MLP system also supported Pascal, Icon [Gris90], and Emerald <ref> [Blac86, Blac87] </ref>. After stubs for a component are generated from the specification, they are compiled using the appropriate language processor. The resulting object module is then linked with the user's code, the UTS libraries, and the Schooner runtime support libraries to produce an executable.
Reference: [Butl92] <author> Butler, R. and Lusk, E. </author> <title> User's Guide to the p4 Parallel Programming System, </title> <institution> Argonne National Laboratory, Argonne, IL, </institution> <month> August </month> <year> 1992. </year>
Reference-contexts: One is that in some applications, collections of heterogeneous machines can be used to execute a parallel algorithm, thereby allowing the application to produce results faster. Facilitating the use of heterogeneity for such purposes is the target of systems such as PVM [Begu91, Sund90], p4 <ref> [Butl92] </ref>, and APPL [Quea93], which provide sophisticated software infrastructures that, in essence, turn a network of (possibly) heterogeneous workstations into a cost-effective parallel machine. Experience has shown the usefulness of exploiting heterogeneity in this way for many different applications [Nede92, Sund92a, Sund92b]. <p> In the example mentioned earlier where 210,000 iterations were used, monitoring every 100 iterations would equate to 2,100 calls for an estimated 5.9% slower execution. 5. Related Work The PVM (Parallel Virtual Machine) [Sund90, Begu91] project is representative of a class of systems (including p4 <ref> [Butl92] </ref>, APPL [Quea93], and others) that provides general support for constructing parallel and distributed programs using a collection of heterogeneous machines.
Reference: [Clau91] <author> Claus, R.W., Evans, A.L., Lylte, J.K., and Nichols, L.D. </author> <title> Numerical Propulsion System Simulation. </title> <booktitle> Computing Systems in Engineering 2, </booktitle> <month> 4 (Apr. </month> <year> 1991), </year> <pages> 357-364. </pages>
Reference-contexts: One is using the Schooner/AVS platform for more and larger applications; in this vein, we are currently involved with using the platform to connect existing codes for jet engine simulation as part of the NPSS project at NASA Lewis Research Center <ref> [Clau91] </ref>. Another is upgrading the platform's functionality. For example, Schooner currently allows only one instance of a given remote procedure to exist within an application.
Reference: [Gibb87] <author> Gibbons, P.B. </author> <title> A stub generator for multi-language RPC in heterogeneous environments. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-13, </volume> <month> 1 (Jan. </month> <year> 1987), </year> <pages> 77-87. </pages>
Reference-contexts: Also closely related to the Schooner component of the platform are other RPC schemes with features such as external data representations, specification languages, and stub compilers [Alme85, Birr84, Sun90, Xero81]. Several of these systems also emphasize heterogeneity, including Matchmaker [Jone85], Horus <ref> [Gibb87] </ref>, and HRPC (Heterogeneous RPC) [Bers87]. The primary distinction between this work and Schooner is one of orientation: the main aim of the other systems is to support interprocess communication for client/server style operating system services, whereas Schooner is intended for building user-level applications.
Reference: [Gris90] <author> Griswold, R. and Griswold, M. </author> <title> The Icon Programming Language, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1990. </year>
Reference-contexts: This is done by having the stub invoke the correct encode and decode routines from the UTS library. There is one stub compiler for each supported programming language. Currently, Schooner has stub compilers for C and FORTRAN; various versions of the predecessor MLP system also supported Pascal, Icon <ref> [Gris90] </ref>, and Emerald [Blac86, Blac87]. After stubs for a component are generated from the specification, they are compiled using the appropriate language processor. The resulting object module is then linked with the user's code, the UTS libraries, and the Schooner runtime support libraries to produce an executable.
Reference: [Haye87] <author> Hayes, R. and Schlichting, R.D. </author> <title> Facilitating mixed language programming in distributed systems. </title> <journal> IEEE Trans. on Softw. Eng. </journal> <volume> SE-13, </volume> <month> 12 (December </month> <year> 1987), </year> <pages> 1254-1264. </pages> <month> -26 </month>
Reference-contexts: The key component of this platform is Schooner, an interconnection system that provides an application-level heterogeneous remote procedure call (RPC) facility based on a machine- and language-independent type system called UTS [Haye89]. UTS, which also served as the basis for Schooner's predecessor system MLP <ref> [Haye87, Haye88, Haye90] </ref>, provides a simple specification language and a canonical intermediate data representation that simplifies heterogeneous processing. To provide sophisticated visualization capabilities and an overall execution framework, the AVS scientific visualization system [AVS92] is included as the second component of the platform.
Reference: [Haye88] <author> Hayes, R., Manweiler, S., and Schlichting, R.D. </author> <title> A simple system for constructing distributed, mixed-language programs. </title> <journal> SoftwarePractice and Experience 18, </journal> <month> 7 (July </month> <year> 1988), </year> <pages> 641-660. </pages>
Reference-contexts: The key component of this platform is Schooner, an interconnection system that provides an application-level heterogeneous remote procedure call (RPC) facility based on a machine- and language-independent type system called UTS [Haye89]. UTS, which also served as the basis for Schooner's predecessor system MLP <ref> [Haye87, Haye88, Haye90] </ref>, provides a simple specification language and a canonical intermediate data representation that simplifies heterogeneous processing. To provide sophisticated visualization capabilities and an overall execution framework, the AVS scientific visualization system [AVS92] is included as the second component of the platform. <p> When a type is declared as ``represented'' in this way, a hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 1 The specification language actually allows parameters to be described by sets of types, which means that import and export specifications need not match exactly. See <ref> [Haye88] </ref> for details. -6 representative or ``ticket'' for the UTS value is supplied as the argument instead of the actual value.
Reference: [Haye89] <author> Hayes, R. UTS: </author> <title> A Type System for Facilitating Data Communication, </title> <type> Ph.D. Dissertation, </type> <institution> Dept. of Computer Science, Univ. of Arizona, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: The key component of this platform is Schooner, an interconnection system that provides an application-level heterogeneous remote procedure call (RPC) facility based on a machine- and language-independent type system called UTS <ref> [Haye89] </ref>. UTS, which also served as the basis for Schooner's predecessor system MLP [Haye87, Haye88, Haye90], provides a simple specification language and a canonical intermediate data representation that simplifies heterogeneous processing.
Reference: [Haye90] <author> Hayes, R., Hutchinson, </author> <title> N.C., and Schlichting, R.D. Integrating Emerald into a system for mixed-language programming. </title> <booktitle> Computer Languages 15, 2 (1990), </booktitle> <pages> 95-108. </pages>
Reference-contexts: The key component of this platform is Schooner, an interconnection system that provides an application-level heterogeneous remote procedure call (RPC) facility based on a machine- and language-independent type system called UTS [Haye89]. UTS, which also served as the basis for Schooner's predecessor system MLP <ref> [Haye87, Haye88, Haye90] </ref>, provides a simple specification language and a canonical intermediate data representation that simplifies heterogeneous processing. To provide sophisticated visualization capabilities and an overall execution framework, the AVS scientific visualization system [AVS92] is included as the second component of the platform.
Reference: [ISO87a] <institution> Information Processing SystemsOpen Systems InterconnectionSpecification of Abstract Syntax Notation One (ASN.1). </institution> <note> International Organization for Standardization, International Standard 8824, </note> <month> December </month> <year> 1987. </year>
Reference-contexts: The availability of represented types in UTS adds greatly to the flexibility afforded the programmer, and is one of the features that distinguishes UTS from similar systems such as Sun XDR and ASN.1 <ref> [ISO87a, ISO87b] </ref>. Our future efforts in this area will be directed along several lines of investigation.
Reference: [ISO87b] <institution> Information Processing SystemsOpen Systems InterconnectionSpecification of Basic Encoding Rules for Abstract Syntax Notation One (ASN.1). </institution> <note> International Organization for Standardization, International Standard 8825, </note> <month> December </month> <year> 1987. </year>
Reference-contexts: The availability of represented types in UTS adds greatly to the flexibility afforded the programmer, and is one of the features that distinguishes UTS from similar systems such as Sun XDR and ASN.1 <ref> [ISO87a, ISO87b] </ref>. Our future efforts in this area will be directed along several lines of investigation.
Reference: [Jone85] <author> Jones, </author> <title> M.B., Rashid, R.F., Thompson, M.R. Matchmaker: An interface specification language for distributed processing. </title> <booktitle> Proc. 12th Symp. on Prin. of Prog. </booktitle> <address> Lang, New Orleans, LA (Jan. </address> <year> 1985), </year> <pages> 225-235. </pages>
Reference-contexts: Also closely related to the Schooner component of the platform are other RPC schemes with features such as external data representations, specification languages, and stub compilers [Alme85, Birr84, Sun90, Xero81]. Several of these systems also emphasize heterogeneity, including Matchmaker <ref> [Jone85] </ref>, Horus [Gibb87], and HRPC (Heterogeneous RPC) [Bers87]. The primary distinction between this work and Schooner is one of orientation: the main aim of the other systems is to support interprocess communication for client/server style operating system services, whereas Schooner is intended for building user-level applications.
Reference: [Merc92] <editor> Mercurio, P.J. Khoros. </editor> <volume> Pixel 3, 2 (Mar./Apr. </volume> <year> 1992), </year> <pages> 28-33. </pages>
Reference-contexts: For the former, we will examine such items as ways to divide scientific applications given a particular set of heterogeneous resources and better techniques for utilizing existing codes in this model without modifications. For the latter, we will look at utilizing other graphics visualization tools such as Khoros <ref> [Rasu91, Merc92] </ref> or apE [Vand90] in addition to AVS, as well as exploring further refinements and enhancements to Schooner. One specific category of enhancements to be -25 investigated are techniques for optimizing the transfer of the large amounts of data that are typical in scientific applications. Acknowledgements S.
Reference: [Nede92] <author> Nedeljkovic, N., and Quinn, M. </author> <title> Data-parallel programming on a network of heterogeneous workstations. </title> <booktitle> Proc. 1st Int. Symp. on High-Performance Distributed Computing, </booktitle> <address> Syracuse, NY (Sept. </address> <year> 1992), </year> <pages> 28-36. </pages>
Reference-contexts: Experience has shown the usefulness of exploiting heterogeneity in this way for many different applications <ref> [Nede92, Sund92a, Sund92b] </ref>. In this paper, however, we focus on a second motivation for supporting heterogeneous processing, that of increasing the functionality available to the application writer within the framework of a single logical program.
Reference: [Purt91] <author> Purtilo, J., and Jalote, P. </author> <title> An environment for prototyping distributed applications. </title> <booktitle> Computer Languages 16, 3/4 (1991), </booktitle> <pages> 197-207. </pages>
Reference-contexts: Another related system is Polylith, in which heterogeneous software modules can be plugged into a ``software bus'' that allows communication <ref> [Purt91, Purt92] </ref>. 6. Conclusions The software platform we have constructed out of the combination of Schooner and AVS provides a simple and intuitive way for programmers to construct scientific applications that require access to heterogeneous resources.
Reference: [Purt92] <author> Purtilo, J. </author> <title> The Polylith software bus. </title> <journal> ACM Trans. on Prog. Lang. and Sys. </journal> <note> (1992), to appear. </note>
Reference-contexts: Another related system is Polylith, in which heterogeneous software modules can be plugged into a ``software bus'' that allows communication <ref> [Purt91, Purt92] </ref>. 6. Conclusions The software platform we have constructed out of the combination of Schooner and AVS provides a simple and intuitive way for programmers to construct scientific applications that require access to heterogeneous resources.
Reference: [Quea93] <author> Quealy, A., Cole, G., and Blech, R. </author> <title> Portable programming on parallel/networked computers using the Application Portable Parallel Library (APPL), </title> <type> NASA Technical Memorandum 106238, </type> <month> July </month> <year> 1993. </year>
Reference-contexts: One is that in some applications, collections of heterogeneous machines can be used to execute a parallel algorithm, thereby allowing the application to produce results faster. Facilitating the use of heterogeneity for such purposes is the target of systems such as PVM [Begu91, Sund90], p4 [Butl92], and APPL <ref> [Quea93] </ref>, which provide sophisticated software infrastructures that, in essence, turn a network of (possibly) heterogeneous workstations into a cost-effective parallel machine. Experience has shown the usefulness of exploiting heterogeneity in this way for many different applications [Nede92, Sund92a, Sund92b]. <p> In the example mentioned earlier where 210,000 iterations were used, monitoring every 100 iterations would equate to 2,100 calls for an estimated 5.9% slower execution. 5. Related Work The PVM (Parallel Virtual Machine) [Sund90, Begu91] project is representative of a class of systems (including p4 [Butl92], APPL <ref> [Quea93] </ref>, and others) that provides general support for constructing parallel and distributed programs using a collection of heterogeneous machines.
Reference: [Rasu91] <author> Rasure, J. and Williams, C. </author> <title> An integrated visual language and software development environment. </title> <booktitle> Jour. of Visual Languages and Computing 2 (1991), </booktitle> <pages> 217-246. </pages>
Reference-contexts: For the former, we will examine such items as ways to divide scientific applications given a particular set of heterogeneous resources and better techniques for utilizing existing codes in this model without modifications. For the latter, we will look at utilizing other graphics visualization tools such as Khoros <ref> [Rasu91, Merc92] </ref> or apE [Vand90] in addition to AVS, as well as exploring further refinements and enhancements to Schooner. One specific category of enhancements to be -25 investigated are techniques for optimizing the transfer of the large amounts of data that are typical in scientific applications. Acknowledgements S.
Reference: [Sun90] <author> Sun Microsystems, Inc. </author> <title> Network Programming Guide (Revision A), Part number 800-3850-10, Sun Microsystems, </title> <publisher> Inc., </publisher> <address> Mountain View, CA, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: In addition to startup, the daemons handle synchronization tasks, and typically act as a relay point for local messages destined for processes on other machines or for incoming messages destined for local processes. Differences in data representation between machines is handled in PVM by using Sun XDR <ref> [Sun90] </ref> as an intermediate representation, with a collection of library routines being provided to convert standard data types. These calls are made prior to a send or after a receive. Also, components can be compiled for multiple architectures. <p> Also closely related to the Schooner component of the platform are other RPC schemes with features such as external data representations, specification languages, and stub compilers <ref> [Alme85, Birr84, Sun90, Xero81] </ref>. Several of these systems also emphasize heterogeneity, including Matchmaker [Jone85], Horus [Gibb87], and HRPC (Heterogeneous RPC) [Bers87].
Reference: [Sund90] <author> Sunderam, V. S. </author> <title> PVM: A framework for parallel distributed computing. Concurrency Practice and Experience 2 (Dec. </title> <booktitle> 1990), </booktitle> <pages> 315-339. </pages>
Reference-contexts: One is that in some applications, collections of heterogeneous machines can be used to execute a parallel algorithm, thereby allowing the application to produce results faster. Facilitating the use of heterogeneity for such purposes is the target of systems such as PVM <ref> [Begu91, Sund90] </ref>, p4 [Butl92], and APPL [Quea93], which provide sophisticated software infrastructures that, in essence, turn a network of (possibly) heterogeneous workstations into a cost-effective parallel machine. Experience has shown the usefulness of exploiting heterogeneity in this way for many different applications [Nede92, Sund92a, Sund92b]. <p> As can be seen, this penalty is small even when the monitoring frequency is fairly high. In the example mentioned earlier where 210,000 iterations were used, monitoring every 100 iterations would equate to 2,100 calls for an estimated 5.9% slower execution. 5. Related Work The PVM (Parallel Virtual Machine) <ref> [Sund90, Begu91] </ref> project is representative of a class of systems (including p4 [Butl92], APPL [Quea93], and others) that provides general support for constructing parallel and distributed programs using a collection of heterogeneous machines.
Reference: [Sund92a] <author> Sunderam, </author> <title> V.S. Design issues in heterogeneous network computing. </title> <booktitle> Proc. Workshop on Heterogeneous Processing, </booktitle> <address> Beverly Hills, CA (March 1992), </address> <pages> 101-112. </pages>
Reference-contexts: Experience has shown the usefulness of exploiting heterogeneity in this way for many different applications <ref> [Nede92, Sund92a, Sund92b] </ref>. In this paper, however, we focus on a second motivation for supporting heterogeneous processing, that of increasing the functionality available to the application writer within the framework of a single logical program.
Reference: [Sund92b] <author> Sunderam, </author> <title> V.S. and Geist G.A. Supercomputer level concurrent computation on a network of IBM RS/6000 powerstations. Scientific Excellence in Supercomputing, </title> <editor> K. Billingsley, H. Brown, E. Derohanes (eds). </editor> <publisher> Baldwin Press, </publisher> <pages> pp. 779-804, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Experience has shown the usefulness of exploiting heterogeneity in this way for many different applications <ref> [Nede92, Sund92a, Sund92b] </ref>. In this paper, however, we focus on a second motivation for supporting heterogeneous processing, that of increasing the functionality available to the application writer within the framework of a single logical program.
Reference: [Vand90] <editor> VandeWettering, M. apE 2.0, </editor> <volume> Pixel 1, 4 (Nov./Dec. </volume> <year> 1990), </year> <pages> 30-35. </pages>
Reference-contexts: For the latter, we will look at utilizing other graphics visualization tools such as Khoros [Rasu91, Merc92] or apE <ref> [Vand90] </ref> in addition to AVS, as well as exploring further refinements and enhancements to Schooner. One specific category of enhancements to be -25 investigated are techniques for optimizing the transfer of the large amounts of data that are typical in scientific applications. Acknowledgements S.
Reference: [Xero81] <institution> Xerox Corp. </institution> <month> Courier: </month> <title> The Remote Procedure Call Protocol. Xerox System Integration Standard XSIS 038112, </title> <institution> Xerox Corp., Stamford, Conn., </institution> <month> Dec. </month> <year> 1981. </year> <month> -27 </month>
Reference-contexts: Also closely related to the Schooner component of the platform are other RPC schemes with features such as external data representations, specification languages, and stub compilers <ref> [Alme85, Birr84, Sun90, Xero81] </ref>. Several of these systems also emphasize heterogeneity, including Matchmaker [Jone85], Horus [Gibb87], and HRPC (Heterogeneous RPC) [Bers87].
References-found: 32

