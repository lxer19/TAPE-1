URL: http://polaris.cs.uiuc.edu/reports/1426.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/polaris/rep2.html
Root-URL: http://www.cs.uiuc.edu
Email: potteng@csrd.uiuc.edu, eigenman@csrd.uiuc.edu  
Title: Idiom Recognition in the Polaris Parallelizing Compiler  
Author: Bill Pottenger and Rudolf Eigenmann 
Address: 1308 West Main Street, Urbana, Illinois 61801-2307  
Affiliation: Center for Supercomputing Research and Development University of Illinois at Urbana-Champaign  
Abstract: The elimination of induction variables and the parallelization of reductions in FORTRAN programs have been shown to be integral to performance improvement on parallel computers [7, 8]. As part of the Polaris project [5], compiler passes that recognize these idioms have been implemented and evaluated. Developing these techniques to the point necessary to achieve significant speedups on real applications has prompted solutions to problems that have not been addressed in previous reports on idiom recognition techniques. These include analysis techniques capable of disproving zero-trip loops, symbolic handling facilities to compute closed forms of recurrences, and interfaces to other compilation passes such as the data-dependence test. In comparison, the recognition phase of solving induction variables, which has received most attention so far, has in fact turned out to be relatively straightforward. This paper provides an overview of techniques described in more detail in [12]. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Zahira Ammarguellat and Luddy Harrison. </author> <title> Automatic Recognition of Induction & Recurrence Relations by Abstract Interpretation. </title> <booktitle> Proceedings of Sigplan 1990, </booktitle> <address> Yorktown Heights, </address> <month> 25(6) </month> <pages> 283-295, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Haghighat and Polychronopoulos [10] symbolically execute loops and inspect the sequence of values assumed by variables. By taking the difference of consecutive values, the difference of the difference, etc., they can interpolate a polynomial representing the closed form of an induction variable. Harrison and Ammarguellat <ref> [1] </ref> do abstract interpretation of loops to capture the effect of a single iteration on each variable assigned in the loop. The effect is then matched with pre-defined templates that express recurrence relations, including induction variables of various forms.
Reference: [2] <author> Utpal Banerjee, Rudolf Eigenmann, Alexandru Nicolau, and David Padua. </author> <title> Automatic Program Parallelization. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 81(2), </volume> <month> February </month> <year> 1993. </year>
Reference-contexts: 1 Introduction The translation of sequential programs into parallel form is a well-established discipline. An introduction to this topic can be found in <ref> [2] </ref>. Parallelizing translation techniques deal mostly with loops whose iterations can be executed in parallel if no iteration produces a data value that is consumed by another iteration.
Reference: [3] <author> William Blume and Rudolf Eigenmann. </author> <title> The Range Test: A Dependence Test for Symbolic, Non-linear Expressions. </title> <booktitle> Proceedings of Supercomputing '94, Novem-ber 1994, </booktitle> <address> Washington D.C., </address> <pages> pages 528-537, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: As a result, the subscript expressions introduced by the substitution pass are non-linear and cannot be handled by previously known data-dependence tests. The new Po-laris data dependence test that handles such expressions is described in <ref> [3] </ref>. Olda do300 further contains two wrap-around variables that need to be recognized in order to solve the inductions properly. This transformation was described in section 2.2.
Reference: [4] <author> William Blume and Rudolf Eigenmann. </author> <title> Symbolic Range Propagation. </title> <booktitle> Proceedings of the 9th International Parallel Processing Symposium, </booktitle> <month> April </month> <year> 1995, </year> <month> Oc-tober </month> <year> 1994. </year>
Reference-contexts: Our algorithm handles this problem with new techniques termed Symbolic Range Propagation <ref> [4] </ref>. We prove in all cases save one of our application test suite that loops do not have zero trips and hence the transformation is correct. The remaining case requires the use of interprocedural range propagation, which has not yet been implemented. <p> Often it is not possible to determine this size from the code surrounding the loop. Because of this we again took good advantage of Symbolic Range Propagation <ref> [4] </ref> to determine these sizes. 4 Performance Results Table 1 shows the speedups we have obtained on an 8-processor set on an SGI Challenge (R4400), relative to the serial execution speed for three codes in our application suite.
Reference: [5] <author> William Blume, Rudolf Eigenmann, Keith Faigin, John Grout, Jay Hoeflinger, David Padua, Paul Petersen, Bill Pottenger, Lawrence Rauchwerger, Peng Tu, and Stephen Weatherford. </author> <title> Polaris: Improving the Effectiveness of Parallelizing Compilers. </title> <booktitle> Proceedings of the Seventh Workshop on Languages and Compilers for Parallel Computing, </booktitle> <address> Ithaca, New York; also: </address> <booktitle> Lecture Notes in Computer Science 892, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pages 141-154, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: We discuss these variants below. We have implemented new and powerful idiom recognition and solution techniques in the Polaris compiler <ref> [5, 6] </ref> which contribute towards substantial performance improvements over previous generations of parallelizing compilers. 2 Induction Variable Substitution The following example shows a triangular induction variable that occurs inside a triangular loop nest (the inner loop bound depends on the outer loop index).
Reference: [6] <author> William Blume, Rudolf Eigenmann, Jay Hoeflinger, David Padua, Paul Petersen, Lawrence Rauchwerger, and Peng Tu. </author> <title> Automatic Detection of Parallelism: </title>
Reference-contexts: We discuss these variants below. We have implemented new and powerful idiom recognition and solution techniques in the Polaris compiler <ref> [5, 6] </ref> which contribute towards substantial performance improvements over previous generations of parallelizing compilers. 2 Induction Variable Substitution The following example shows a triangular induction variable that occurs inside a triangular loop nest (the inner loop bound depends on the outer loop index). <p> In TURB3D this is about 9% greater than PFA, and in the other programs PFA achieves little or no speedup 2 . The speedups are a result of the transformations discussed in this paper in conjunction with additional techniques described in <ref> [6] </ref>. As shown by the table entries (no reduction) and (no induction) above, in all cases the performance drops substantially when these compiler capabilities are switched off. The performance figures become more clear when considering the most time-consuming loops of the test suite.
References-found: 6

