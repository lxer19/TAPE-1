URL: http://www.cs.ucsb.edu/oocsb/self/papers/papers.ps.Z
Refering-URL: http://www.cs.ucsb.edu/oocsb/self/papers/
Root-URL: http://www.cs.ucsb.edu
Title: The SELF Papers  
Author: Compiled by Bay-Wei Chang 
Address: Stanford, CA 94305  
Affiliation: The SELF Group CIS 209 Stanford University  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> Abelson, H., Sussman, G. J., and Sussman, J. </author> <title> Structure and Interpretation of Computer Programs, </title> <publisher> MIT Press (1984). </publisher>
Reference-contexts: of variables: local variables (temporaries), instance variables, class variables, pool variables, and global variables, whose scopes roughly correspond to rungs on a ladder of instantiation. 10 UNGAR AND SMITH 4 Closures and Methods The Lisp community has obtained excellent results with closures (or lambda-expressions) as a basis for control structures <ref> [1, 17] </ref>. Experience with Smalltalk blocks supports this; closures provide a powerful, yet easy-to-use metaphor for users to exploit and define their own control structures. Furthermore, this ability is crucial to any language that supports user-defined abstract data types.
Reference: 2. <author> Borning, A. H. </author> <title> ThingLabA Constraint-Oriented Simulation Laboratory. </title> <type> Ph.D. dissertation, </type> <institution> Stanford University (1979). </institution>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> The Alternate Reality Kit [14, 15] is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes. Alan Bornings experience with prototype-based environments, especially ThingLab <ref> [2, 3, 4] </ref> made him a wonderful sounding board when we were struggling to grasp the implications of prototypes. The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area.
Reference: 3. <author> Borning, A. H. </author> <title> The Programming Language Aspects of ThingLab, A Constraint-Oriented Simulation Laboratory. </title> <journal> In ACM Transactions on Programming Languages and Systems, </journal> <volume> 3, </volume> <month> 4 </month> <year> (1981) </year> <month> 353-387. </month>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> The Alternate Reality Kit [14, 15] is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes. Alan Bornings experience with prototype-based environments, especially ThingLab <ref> [2, 3, 4] </ref> made him a wonderful sounding board when we were struggling to grasp the implications of prototypes. The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area.
Reference: 4. <author> Borning, A. H. </author> <title> Classes Versus Prototypes in Object-Oriented Languages. </title> <booktitle> In Proceedings of the ACM/IEEE Fall Joint Computer Conference (1986) 36-40. </booktitle>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> The Alternate Reality Kit [14, 15] is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes. Alan Bornings experience with prototype-based environments, especially ThingLab <ref> [2, 3, 4] </ref> made him a wonderful sounding board when we were struggling to grasp the implications of prototypes. The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area.
Reference: 5. <author> Borning, A., and OShea, T. DeltaTalk: </author> <title> An Empirically and Aesthetically Motivated Simplification of the Smalltalk-80 Language. </title> <note> Unpublished manuscript (1986). </note>
Reference-contexts: Alan Bornings experience with prototype-based environments, especially ThingLab [2, 3, 4] made him a wonderful sounding board when we were struggling to grasp the implications of prototypes. The DeltaTalk proposal <ref> [5] </ref> included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area. The Actors [7] system has active objects, but these are processes, unlike SELFs procedural model. Actors also rejects classes, replacing inheritance with delegation.
Reference: 6. <author> Goldberg, A., and Robson, D. </author> <title> Smalltalk-80: The Language and Its Implementation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1983). </address>
Reference-contexts: However, they do not all offer exactly the same perspective; there are many different ideas about the nature of object-oriented computation. In this paper, we present SELF, a programming language with a new perspective on objects and message passing. Like the Smalltalk-80 1 language <ref> [6] </ref>, SELF is designed to support exploratory programming *This work is partially supported by Xerox, and partially by National Science Foundation Presidential Young Investigator Grant #CCR-8657631, Sun Microsystems, the Powell Foundation, IBM, Apple Computer, DEC, NCR, Texas Instruments, and Cray Laboratories. <p> Assignable slot for contents. | ) 8 Related Work We would like to express our deep appreciation to the past and present members of the System Concepts Laboratory at Xerox PARC for blazing the trail with Small-talk <ref> [6] </ref>. The way SELF accesses state via message passing owes much to conversations with Peter Deutsch, and is reminiscent of an earlier unpublished language of his called O. Some Smalltalk programmers have already adopted this style of variable accessing [11].
Reference: 7. <author> Hewitt, C., and Agha, G. </author> <title> ACTORS: A Conceptual Foundation For Concurrent Object-Oriented Programming. </title> <type> Unpublished draft, </type> <institution> MIT Artificial Intelligence Laboratory (1987). </institution>
Reference-contexts: Authors present address: Sun Microsystems, 2500 Garcia Avenue, Mountain View, CA 94043. This paper is a substantial revision of [20], originally published in OOPSLA 87 Conference Proceedings (SIGPLAN Notices, 22, 12 <ref> (1987) </ref> 227-241). 2 UNGAR AND SMITH [13], and therefore includes runtime typing (i.e. no type declarations) and automatic storage reclamation. But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation [2, 3, 4, 8, 10]. <p> The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area. The Actors <ref> [7] </ref> system has active objects, but these are processes, unlike SELFs procedural model. Actors also rejects classes, replacing inheritance with delegation. Oaklisp [9] is a version of Scheme with message passing at the bottom.
Reference: 8. <author> LaLonde, W. R., Thomas, D. A., and Pugh, J. R. </author> <title> An Exemplar Based Small-talk. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 322-330. </month> <title> SELF: THE POWER OF SIMPLICITY 19 </title>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> His clones inherit from their prototype, adding private slots on-demand. Although this approach obviates the need for traits objects, its prototypes are heavier-weight objects than SELFs. Exemplars is the name given to prototypes in a project that added a prototype-based object hierarchy to Smalltalk <ref> [8] </ref>. Like our design for SELF, objects are created by cloning exemplars, and multiple representations of the same data type are permitted. Unlike SELF, this system also includes classes as an abstract type hierarchy, and two forms of multiple inheritance. One interesting contribution is the exemplar systems support for or-inheritance.
Reference: 9. <author> Lang, K. J., and Pearlmutter, B. A. Oaklisp: </author> <title> An Object-Oriented Scheme with First Class Types. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 30-37. </month>
Reference-contexts: The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area. The Actors [7] system has active objects, but these are processes, unlike SELFs procedural model. Actors also rejects classes, replacing inheritance with delegation. Oaklisp <ref> [9] </ref> is a version of Scheme with message passing at the bottom.
Reference: 10. <author> Lieberman, H. </author> <title> Using Prototypical Objects to Implement Shared Behavior in Object-Oriented Systems. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 214-223. </month>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> Strobe is a frame-based language for AI that also mixes data and behavior in slots [16]. Loops, an extension of InterLisp with objects, also includes active variables [18]. We would like to thank Henry Lieberman for calling our attention to prototypes <ref> [10] </ref>. Unlike SELF, Liebermans prototypes include shared information as well. His clones inherit from their prototype, adding private slots on-demand. Although this approach obviates the need for traits objects, its prototypes are heavier-weight objects than SELFs.
Reference: 11. <author> Rochat, R. </author> <title> In Search of Good Smalltalk Programming Style. </title> <type> Technical Report No. </type> <institution> CR-86-19, Computer Research Laboratory, Tektronix Laboratories, Beaverton, </institution> <address> OR (1986). </address>
Reference-contexts: The way SELF accesses state via message passing owes much to conversations with Peter Deutsch, and is reminiscent of an earlier unpublished language of his called O. Some Smalltalk programmers have already adopted this style of variable accessing <ref> [11] </ref>. Trellis/Owl is an independently designed object-oriented language that includes syntactic sugar to make message invocation look like SELF: THE POWER OF SIMPLICITY 17 element access and assignment [12]. This is the reverse of our approach. We stuck with message-passing syntax in SELF to emphasize behavioral connotations.
Reference: 12. <author> Schaffert, C., Cooper, T., Bullis, B., Kilian, M., and Wilpolt, C. </author> <title> An Introduction to Trellis/Owl. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 9-16. </month>
Reference-contexts: Some Smalltalk programmers have already adopted this style of variable accessing [11]. Trellis/Owl is an independently designed object-oriented language that includes syntactic sugar to make message invocation look like SELF: THE POWER OF SIMPLICITY 17 element access and assignment <ref> [12] </ref>. This is the reverse of our approach. We stuck with message-passing syntax in SELF to emphasize behavioral connotations. Strobe is a frame-based language for AI that also mixes data and behavior in slots [16]. Loops, an extension of InterLisp with objects, also includes active variables [18].
Reference: 13. <author> Sheil, B. </author> <title> Power Tools for Programmers. </title> <journal> Datamation, </journal> <volume> 29, </volume> <month> 2 </month> <year> (1983) </year> <month> 131-144. </month>
Reference-contexts: Authors present address: Sun Microsystems, 2500 Garcia Avenue, Mountain View, CA 94043. This paper is a substantial revision of [20], originally published in OOPSLA 87 Conference Proceedings (SIGPLAN Notices, 22, 12 (1987) 227-241). 2 UNGAR AND SMITH <ref> [13] </ref>, and therefore includes runtime typing (i.e. no type declarations) and automatic storage reclamation. But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation [2, 3, 4, 8, 10].
Reference: 14. <author> Smith, R. B. </author> <title> The Alternate Reality Kit: An Animated Environment for Creating Interactive Simulations. </title> <booktitle> In Proceedings of 1986 IEEE Computer Society Workshop on Visual Languages (1986) 99-106. </booktitle>
Reference-contexts: In addition to sharing the same model of creation, procedures also store their variables and maintain their environment information the same way as ordinary objects, as described in Section 4. Concreteness. Our tastes have led us to a metaphor whose elements are as concrete as possible <ref> [14, 15] </ref>. So, in the matter of classes versus prototypes, we have chosen to try prototypes. This makes a basic difference in the way that new objects are created. In a class-based language, an object would be created by instantiating a plan in its class. <p> One interesting contribution is the exemplar systems support for or-inheritance. SELF seems to be more unorthodox than exemplars in two respects: it eliminates variable accessing from the language, and it unifies objects, classes, and methods. The Alternate Reality Kit <ref> [14, 15] </ref> is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes.
Reference: 15. <author> Smith, R. B. </author> <title> Experiences with the Alternate Reality Kit: An Example of the Tension Between Literalism and Magic. </title> <booktitle> In Proceedings of the CHI+GI 87 Conference (1987) 61-67. </booktitle>
Reference-contexts: In addition to sharing the same model of creation, procedures also store their variables and maintain their environment information the same way as ordinary objects, as described in Section 4. Concreteness. Our tastes have led us to a metaphor whose elements are as concrete as possible <ref> [14, 15] </ref>. So, in the matter of classes versus prototypes, we have chosen to try prototypes. This makes a basic difference in the way that new objects are created. In a class-based language, an object would be created by instantiating a plan in its class. <p> One interesting contribution is the exemplar systems support for or-inheritance. SELF seems to be more unorthodox than exemplars in two respects: it eliminates variable accessing from the language, and it unifies objects, classes, and methods. The Alternate Reality Kit <ref> [14, 15] </ref> is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes.
Reference: 16. <author> Smith, R. G. Strobe: </author> <title> Support for Structured Object Knowledge Representation. </title> <booktitle> In Proceedings of the 1983 International Joint Conference on Artificial Intelligence (1983) 855-858. </booktitle>
Reference-contexts: This is the reverse of our approach. We stuck with message-passing syntax in SELF to emphasize behavioral connotations. Strobe is a frame-based language for AI that also mixes data and behavior in slots <ref> [16] </ref>. Loops, an extension of InterLisp with objects, also includes active variables [18]. We would like to thank Henry Lieberman for calling our attention to prototypes [10]. Unlike SELF, Liebermans prototypes include shared information as well. His clones inherit from their prototype, adding private slots on-demand.
Reference: 17. <author> Steele, G. L., Jr. </author> <title> Lambda, the Ultimate Imperative. </title> <type> AI Memo 353, </type> <institution> MIT Artificial Intelligence Laboratory (1976). </institution>
Reference-contexts: of variables: local variables (temporaries), instance variables, class variables, pool variables, and global variables, whose scopes roughly correspond to rungs on a ladder of instantiation. 10 UNGAR AND SMITH 4 Closures and Methods The Lisp community has obtained excellent results with closures (or lambda-expressions) as a basis for control structures <ref> [1, 17] </ref>. Experience with Smalltalk blocks supports this; closures provide a powerful, yet easy-to-use metaphor for users to exploit and define their own control structures. Furthermore, this ability is crucial to any language that supports user-defined abstract data types.
Reference: 18. <author> Stefik, M., Bobrow, D., and Kahn, K. </author> <title> Integrating Access-Oriented Programming into a Multiprogramming Environment. </title> <journal> IEEE Software Magazine, </journal> <volume> 3, </volume> <month> 1 </month> <year> (1986) </year> <month> 10-18. </month>
Reference-contexts: This is the reverse of our approach. We stuck with message-passing syntax in SELF to emphasize behavioral connotations. Strobe is a frame-based language for AI that also mixes data and behavior in slots [16]. Loops, an extension of InterLisp with objects, also includes active variables <ref> [18] </ref>. We would like to thank Henry Lieberman for calling our attention to prototypes [10]. Unlike SELF, Liebermans prototypes include shared information as well. His clones inherit from their prototype, adding private slots on-demand. Although this approach obviates the need for traits objects, its prototypes are heavier-weight objects than SELFs.
Reference: 19. <author> Ungar, D., Chambers, C., Chang, B., and Hlzle, U. </author> <title> Organizing Programs Without Classes. </title> <note> To be published in Lisp and Symbolic Computation, 4, 3 (1991). </note>
Reference-contexts: Prototypes eliminate meta-regress. The discussion of prototypes in this paper naturally applies to them as realized in SELF. Prototype-based systems without inheritance would have a problem: each object would include all of its own behaviorjust like the real worldand these 3 See <ref> [19] </ref> for a description of the structures that have evolved since this was first written. 6 UNGAR AND SMITH point clone (class) (superclass) (inst vars) (methods) (name) Point class, x, y how to (class) (inst vars) (methods) (superclass) name, new make objects x y parent* 0 0 parent* how to clone

Reference: 1. <author> Bobrow, D. G., DeMichiel, L. G., Gabriel, R. P., Keene, S. E., Kiczales, G., and Moon, D. A. </author> <title> Common Lisp Object System Specification. </title> <journal> Published as SIGPLAN Notices, </journal> <volume> 23, </volume> <month> 9 </month> <year> (1988). </year> <title> INHERITANCE AND ENCAPSULATION IN SELF 35 </title>
Reference-contexts: of variables: local variables (temporaries), instance variables, class variables, pool variables, and global variables, whose scopes roughly correspond to rungs on a ladder of instantiation. 10 UNGAR AND SMITH 4 Closures and Methods The Lisp community has obtained excellent results with closures (or lambda-expressions) as a basis for control structures <ref> [1, 17] </ref>. Experience with Smalltalk blocks supports this; closures provide a powerful, yet easy-to-use metaphor for users to exploit and define their own control structures. Furthermore, this ability is crucial to any language that supports user-defined abstract data types.
Reference: 2. <author> Bobrow, D. G., Kahn, K., Kiczales, G., Masinter, L., Stefik, M., and Zdybel, F. CommonLoops: </author> <title> Merging Lisp and Object-Oriented Programming. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 17-29. </month>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> The Alternate Reality Kit [14, 15] is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes. Alan Bornings experience with prototype-based environments, especially ThingLab <ref> [2, 3, 4] </ref> made him a wonderful sounding board when we were struggling to grasp the implications of prototypes. The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area.
Reference: 3. <author> Borning, A. H. </author> <title> Classes Versus Prototypes in Object-Oriented Languages. </title> <booktitle> In Proceedings of the ACM/IEEE Fall Joint Computer Conference (1986) 36-40. </booktitle>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> The Alternate Reality Kit [14, 15] is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes. Alan Bornings experience with prototype-based environments, especially ThingLab <ref> [2, 3, 4] </ref> made him a wonderful sounding board when we were struggling to grasp the implications of prototypes. The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area.
Reference: 4. <author> Chambers, C., and Ungar, D. </author> <title> Customization: Optimizing Compiler Technology for SELF, a Dynamically-Typed Object-Oriented Programming Language. </title> <booktitle> In Proceedings of the SIGPLAN 89 Conference on Programming Language Design and Implementation. Published as SIGPLAN Notices, </booktitle> <volume> 24, </volume> <month> 7 </month> <year> (1989) </year> <month> 146-160. </month>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> The Alternate Reality Kit [14, 15] is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes. Alan Bornings experience with prototype-based environments, especially ThingLab <ref> [2, 3, 4] </ref> made him a wonderful sounding board when we were struggling to grasp the implications of prototypes. The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area.
Reference: 5. <author> Chambers, C., Ungar, D., and Lee, E. </author> <title> An Efficient Implementation of SELF, a Dynamically-Typed Object-Oriented Language Based on Prototypes. </title> <booktitle> In OOPSLA 89 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 24, </volume> <month> 10 </month> <year> (1989) </year> <month> 49-70. </month> <note> Also to be published in Lisp and Symbolic Computation, 4, 3 (1991). </note>
Reference-contexts: Alan Bornings experience with prototype-based environments, especially ThingLab [2, 3, 4] made him a wonderful sounding board when we were struggling to grasp the implications of prototypes. The DeltaTalk proposal <ref> [5] </ref> included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area. The Actors [7] system has active objects, but these are processes, unlike SELFs procedural model. Actors also rejects classes, replacing inheritance with delegation.
Reference: 6. <author> Cunningham, W. </author> <title> Objects without inheritance. </title> <type> Personal communication (1989). </type>
Reference-contexts: However, they do not all offer exactly the same perspective; there are many different ideas about the nature of object-oriented computation. In this paper, we present SELF, a programming language with a new perspective on objects and message passing. Like the Smalltalk-80 1 language <ref> [6] </ref>, SELF is designed to support exploratory programming *This work is partially supported by Xerox, and partially by National Science Foundation Presidential Young Investigator Grant #CCR-8657631, Sun Microsystems, the Powell Foundation, IBM, Apple Computer, DEC, NCR, Texas Instruments, and Cray Laboratories. <p> Assignable slot for contents. | ) 8 Related Work We would like to express our deep appreciation to the past and present members of the System Concepts Laboratory at Xerox PARC for blazing the trail with Small-talk <ref> [6] </ref>. The way SELF accesses state via message passing owes much to conversations with Peter Deutsch, and is reminiscent of an earlier unpublished language of his called O. Some Smalltalk programmers have already adopted this style of variable accessing [11].
Reference: 7. <author> Goldberg, A., and Robson, D. </author> <title> Smalltalk-80: The Language and Its Implementation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1983). </address>
Reference-contexts: The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area. The Actors <ref> [7] </ref> system has active objects, but these are processes, unlike SELFs procedural model. Actors also rejects classes, replacing inheritance with delegation. Oaklisp [9] is a version of Scheme with message passing at the bottom.
Reference: 8. <author> Kristensen, B. B., Madsen, O. L., Mller-Pedersen, and Nygaard, K. </author> <title> The BETA Programming Language. </title> <editor> In Shriver, B., and Wegner, P., editors, </editor> <booktitle> Research Directions in Object-Oriented Programming, </booktitle> <publisher> The MIT Press, </publisher> <address> Cam-bridge, MA (1987). </address>
Reference-contexts: Authors present address: Sun Microsystems, 2500 Garcia Avenue, Mountain View, CA 94043. This paper is a substantial revision of [20], originally published in OOPSLA 87 Conference Proceedings (SIGPLAN Notices, 22, 12 <ref> (1987) </ref> 227-241). 2 UNGAR AND SMITH [13], and therefore includes runtime typing (i.e. no type declarations) and automatic storage reclamation. But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation [2, 3, 4, 8, 10]. <p> But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> His clones inherit from their prototype, adding private slots on-demand. Although this approach obviates the need for traits objects, its prototypes are heavier-weight objects than SELFs. Exemplars is the name given to prototypes in a project that added a prototype-based object hierarchy to Smalltalk <ref> [8] </ref>. Like our design for SELF, objects are created by cloning exemplars, and multiple representations of the same data type are permitted. Unlike SELF, this system also includes classes as an abstract type hierarchy, and two forms of multiple inheritance. One interesting contribution is the exemplar systems support for or-inheritance.
Reference: 9. <author> LaLonde, W. R. </author> <title> Designing Families of Data Types Using Exemplars. </title> <journal> In ACM Transactions on Programming Languages and Systems, </journal> <volume> 11, </volume> <month> 2 </month> <year> (1989) </year> <month> 212-248. </month>
Reference-contexts: The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area. The Actors [7] system has active objects, but these are processes, unlike SELFs procedural model. Actors also rejects classes, replacing inheritance with delegation. Oaklisp <ref> [9] </ref> is a version of Scheme with message passing at the bottom.
Reference: 10. <author> LaLonde, W. R., Thomas, D. A., and Pugh, J. R. </author> <title> An Exemplar Based Small-talk. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 322-330. </month>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> Strobe is a frame-based language for AI that also mixes data and behavior in slots [16]. Loops, an extension of InterLisp with objects, also includes active variables [18]. We would like to thank Henry Lieberman for calling our attention to prototypes <ref> [10] </ref>. Unlike SELF, Liebermans prototypes include shared information as well. His clones inherit from their prototype, adding private slots on-demand. Although this approach obviates the need for traits objects, its prototypes are heavier-weight objects than SELFs.
Reference: 11. <author> Lee, E. </author> <title> Object Storage and Inheritance for SELF, a Prototype-Based Object-Oriented Programming Language. </title> <type> Engineers thesis, </type> <institution> Stanford University (1988). </institution>
Reference-contexts: The way SELF accesses state via message passing owes much to conversations with Peter Deutsch, and is reminiscent of an earlier unpublished language of his called O. Some Smalltalk programmers have already adopted this style of variable accessing <ref> [11] </ref>. Trellis/Owl is an independently designed object-oriented language that includes syntactic sugar to make message invocation look like SELF: THE POWER OF SIMPLICITY 17 element access and assignment [12]. This is the reverse of our approach. We stuck with message-passing syntax in SELF to emphasize behavioral connotations.
Reference: 12. <author> Lieberman, H. </author> <title> Using Prototypical Objects to Implement Shared Behavior in Object-Oriented Systems. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 214-223. </month> <type> 36 CHAMBERS, UNGAR, </type> <institution> CHANG, AND HLZLE </institution>
Reference-contexts: Some Smalltalk programmers have already adopted this style of variable accessing [11]. Trellis/Owl is an independently designed object-oriented language that includes syntactic sugar to make message invocation look like SELF: THE POWER OF SIMPLICITY 17 element access and assignment <ref> [12] </ref>. This is the reverse of our approach. We stuck with message-passing syntax in SELF to emphasize behavioral connotations. Strobe is a frame-based language for AI that also mixes data and behavior in slots [16]. Loops, an extension of InterLisp with objects, also includes active variables [18].
Reference: 13. <author> Madsen, O. L., and Mller-Pedersen, B. </author> <title> Virtual Classes: A Powerful Mechanism in Object-Oriented Programming. </title> <booktitle> In OOPSLA 89 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 24, </volume> <month> 10 </month> <year> (1989) </year> <month> 397-406. </month>
Reference-contexts: Authors present address: Sun Microsystems, 2500 Garcia Avenue, Mountain View, CA 94043. This paper is a substantial revision of [20], originally published in OOPSLA 87 Conference Proceedings (SIGPLAN Notices, 22, 12 (1987) 227-241). 2 UNGAR AND SMITH <ref> [13] </ref>, and therefore includes runtime typing (i.e. no type declarations) and automatic storage reclamation. But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation [2, 3, 4, 8, 10].
Reference: 14. <author> Meyer, B. </author> <title> Genericity versus Inheritance. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 391-405. </month>
Reference-contexts: In addition to sharing the same model of creation, procedures also store their variables and maintain their environment information the same way as ordinary objects, as described in Section 4. Concreteness. Our tastes have led us to a metaphor whose elements are as concrete as possible <ref> [14, 15] </ref>. So, in the matter of classes versus prototypes, we have chosen to try prototypes. This makes a basic difference in the way that new objects are created. In a class-based language, an object would be created by instantiating a plan in its class. <p> One interesting contribution is the exemplar systems support for or-inheritance. SELF seems to be more unorthodox than exemplars in two respects: it eliminates variable accessing from the language, and it unifies objects, classes, and methods. The Alternate Reality Kit <ref> [14, 15] </ref> is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes.
Reference: 15. <author> Meyer, B. </author> <title> Eiffel: An Introduction, Version 2.1. TR-EI-3/GI, Interactive Software Engineering, </title> <publisher> Inc., </publisher> <address> Goleta, CA (1988). </address>
Reference-contexts: In addition to sharing the same model of creation, procedures also store their variables and maintain their environment information the same way as ordinary objects, as described in Section 4. Concreteness. Our tastes have led us to a metaphor whose elements are as concrete as possible <ref> [14, 15] </ref>. So, in the matter of classes versus prototypes, we have chosen to try prototypes. This makes a basic difference in the way that new objects are created. In a class-based language, an object would be created by instantiating a plan in its class. <p> One interesting contribution is the exemplar systems support for or-inheritance. SELF seems to be more unorthodox than exemplars in two respects: it eliminates variable accessing from the language, and it unifies objects, classes, and methods. The Alternate Reality Kit <ref> [14, 15] </ref> is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes.
Reference: 16. <author> Moon, D. A. </author> <title> Object-Oriented Programming with Flavors. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 1-16. </month>
Reference-contexts: This is the reverse of our approach. We stuck with message-passing syntax in SELF to emphasize behavioral connotations. Strobe is a frame-based language for AI that also mixes data and behavior in slots <ref> [16] </ref>. Loops, an extension of InterLisp with objects, also includes active variables [18]. We would like to thank Henry Lieberman for calling our attention to prototypes [10]. Unlike SELF, Liebermans prototypes include shared information as well. His clones inherit from their prototype, adding private slots on-demand.
Reference: 17. <author> Schaffert, C., Cooper, T., and Wilpolt, C. </author> <title> Trellis Object-Based Environment: Language Reference Manual, </title> <type> Version 1.1. </type> <institution> DEC-TR-372, Digital Equipment Corp., Hudson, </institution> <address> MA (1985). </address>
Reference-contexts: of variables: local variables (temporaries), instance variables, class variables, pool variables, and global variables, whose scopes roughly correspond to rungs on a ladder of instantiation. 10 UNGAR AND SMITH 4 Closures and Methods The Lisp community has obtained excellent results with closures (or lambda-expressions) as a basis for control structures <ref> [1, 17] </ref>. Experience with Smalltalk blocks supports this; closures provide a powerful, yet easy-to-use metaphor for users to exploit and define their own control structures. Furthermore, this ability is crucial to any language that supports user-defined abstract data types.
Reference: 18. <author> Schaffert, C., Cooper, T., Bullis, B., Kilian, M., and Wilpolt, C. </author> <title> An Introduction to Trellis/Owl. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 9-16. </month>
Reference-contexts: This is the reverse of our approach. We stuck with message-passing syntax in SELF to emphasize behavioral connotations. Strobe is a frame-based language for AI that also mixes data and behavior in slots [16]. Loops, an extension of InterLisp with objects, also includes active variables <ref> [18] </ref>. We would like to thank Henry Lieberman for calling our attention to prototypes [10]. Unlike SELF, Liebermans prototypes include shared information as well. His clones inherit from their prototype, adding private slots on-demand. Although this approach obviates the need for traits objects, its prototypes are heavier-weight objects than SELFs.
Reference: 19. <author> Smith, R. B. </author> <title> Objects without inheritance. </title> <type> Personal communication (1990). </type>
Reference-contexts: Prototypes eliminate meta-regress. The discussion of prototypes in this paper naturally applies to them as realized in SELF. Prototype-based systems without inheritance would have a problem: each object would include all of its own behaviorjust like the real worldand these 3 See <ref> [19] </ref> for a description of the structures that have evolved since this was first written. 6 UNGAR AND SMITH point clone (class) (superclass) (inst vars) (methods) (name) Point class, x, y how to (class) (inst vars) (methods) (superclass) name, new make objects x y parent* 0 0 parent* how to clone
Reference: 20. <author> Snyder, A. CommonObjects: </author> <title> An Overview. </title> <institution> STL-86-13, Hewlett-Packard Laboratories, </institution> <address> Palo Alto, CA (1986). </address>
Reference-contexts: Authors present address: Sun Microsystems, 2500 Garcia Avenue, Mountain View, CA 94043. This paper is a substantial revision of <ref> [20] </ref>, originally published in OOPSLA 87 Conference Proceedings (SIGPLAN Notices, 22, 12 (1987) 227-241). 2 UNGAR AND SMITH [13], and therefore includes runtime typing (i.e. no type declarations) and automatic storage reclamation. But unlike Smalltalk, SELF includes neither classes nor variables.
Reference: 21. <author> Snyder, A. </author> <title> Encapsulation and Inheritance in Object-Oriented Programming Languages. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 17-29. </month>
Reference: 22. <author> Stein, L. A. </author> <title> Delegation Is Inheritance. </title> <booktitle> In OOPSLA 87 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 22, </volume> <month> 12 </month> <year> (1987) </year> <month> 138-146. </month>
Reference: 23. <author> Stroustrup, B. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1986). </address>
Reference: 24. <author> Stroustrup, B. </author> <title> The Evolution of C++: </title> <booktitle> 1985 to 1987. In USENIX C++ Workshop Proceedings (1987) 1-21. </booktitle>
Reference: 25. <author> Ungar, D., and Smith, R. B. </author> <title> SELF: The Power of Simplicity. </title> <booktitle> In OOPSLA 87 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 22, </volume> <month> 12 </month> <year> (1987) </year> <month> 227-241. </month> <note> Also to be published in Lisp and Symbolic Computation, 4, 3 (1991). </note>

Reference: 1. <author> Bobrow, D. G., DeMichiel, L. G., Gabriel, R. P., Keene, S. E., Kiczales, G., and Moon, D. A. </author> <title> Common Lisp Object System Specification. </title> <journal> Published as SIGPLAN Notices, </journal> <volume> 23, </volume> <month> 9 </month> <year> (1988). </year>
Reference-contexts: of variables: local variables (temporaries), instance variables, class variables, pool variables, and global variables, whose scopes roughly correspond to rungs on a ladder of instantiation. 10 UNGAR AND SMITH 4 Closures and Methods The Lisp community has obtained excellent results with closures (or lambda-expressions) as a basis for control structures <ref> [1, 17] </ref>. Experience with Smalltalk blocks supports this; closures provide a powerful, yet easy-to-use metaphor for users to exploit and define their own control structures. Furthermore, this ability is crucial to any language that supports user-defined abstract data types.
Reference: 2. <author> Borning, A. H. </author> <title> Classes Versus Prototypes in Object-Oriented Languages. </title> <booktitle> In Proceedings of the ACM/IEEE Fall Joint Computer Conference (1986) 36-40. </booktitle>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> The Alternate Reality Kit [14, 15] is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes. Alan Bornings experience with prototype-based environments, especially ThingLab <ref> [2, 3, 4] </ref> made him a wonderful sounding board when we were struggling to grasp the implications of prototypes. The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area.
Reference: 3. <author> Chambers, C., and Ungar, D. </author> <title> Customization: Optimizing Compiler Technology for SELF, a Dynamically-Typed Object-Oriented Programming Language. </title> <booktitle> In Proceedings of the SIGPLAN 89 Conference on Programming Language Design and Implementation. Published as SIGPLAN Notices, </booktitle> <volume> 24, </volume> <month> 7 </month> <year> (1989) </year> <month> 146-160. </month>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> The Alternate Reality Kit [14, 15] is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes. Alan Bornings experience with prototype-based environments, especially ThingLab <ref> [2, 3, 4] </ref> made him a wonderful sounding board when we were struggling to grasp the implications of prototypes. The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area.
Reference: 4. <author> Chambers, C., Ungar, D., and Lee, E. </author> <title> An Efficient Implementation of SELF, a Dynamically-Typed Object-Oriented Language Based on Prototypes. </title> <booktitle> In OOPSLA 89 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 24, </volume> <month> 10 </month> <year> (1989) </year> <month> 49-70. </month> <note> Also to be published in Lisp and Symbolic Computation, 4, 3 (1991). </note>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> The Alternate Reality Kit [14, 15] is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes. Alan Bornings experience with prototype-based environments, especially ThingLab <ref> [2, 3, 4] </ref> made him a wonderful sounding board when we were struggling to grasp the implications of prototypes. The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area.
Reference: 5. <author> Chambers, C., Ungar, D., Chang, B., and Hlzle, U. </author> <title> Parents are Shared Parts of Objects: Inheritance and Encapsulation in SELF. </title> <note> To be published in Lisp and Symbolic Computation, 4, 3 (1991). </note>
Reference-contexts: Alan Bornings experience with prototype-based environments, especially ThingLab [2, 3, 4] made him a wonderful sounding board when we were struggling to grasp the implications of prototypes. The DeltaTalk proposal <ref> [5] </ref> included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area. The Actors [7] system has active objects, but these are processes, unlike SELFs procedural model. Actors also rejects classes, replacing inheritance with delegation.
Reference: 6. <author> Goldberg, A. </author> <title> Smalltalk-80: The Interactive Programming Environment. </title> <address> Ad-dison-Wesley, Reading, MA (1984). </address> <note> 56 UNGAR, CHAMBERS, CHANG, AND HLZLE </note>
Reference-contexts: However, they do not all offer exactly the same perspective; there are many different ideas about the nature of object-oriented computation. In this paper, we present SELF, a programming language with a new perspective on objects and message passing. Like the Smalltalk-80 1 language <ref> [6] </ref>, SELF is designed to support exploratory programming *This work is partially supported by Xerox, and partially by National Science Foundation Presidential Young Investigator Grant #CCR-8657631, Sun Microsystems, the Powell Foundation, IBM, Apple Computer, DEC, NCR, Texas Instruments, and Cray Laboratories. <p> Assignable slot for contents. | ) 8 Related Work We would like to express our deep appreciation to the past and present members of the System Concepts Laboratory at Xerox PARC for blazing the trail with Small-talk <ref> [6] </ref>. The way SELF accesses state via message passing owes much to conversations with Peter Deutsch, and is reminiscent of an earlier unpublished language of his called O. Some Smalltalk programmers have already adopted this style of variable accessing [11].
Reference: 7. <author> Goldberg, A., and Robson, D. </author> <title> Smalltalk-80: The Language and Its Implementation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1983). </address>
Reference-contexts: The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area. The Actors <ref> [7] </ref> system has active objects, but these are processes, unlike SELFs procedural model. Actors also rejects classes, replacing inheritance with delegation. Oaklisp [9] is a version of Scheme with message passing at the bottom.
Reference: 8. <author> LaLonde, W. R. </author> <title> Designing Families of Data Types Using Exemplars. </title> <journal> In ACM Transactions on Programming Languages and Systems, </journal> <volume> 11, </volume> <month> 2 </month> <year> (1989) </year> <month> 212-248. </month>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> His clones inherit from their prototype, adding private slots on-demand. Although this approach obviates the need for traits objects, its prototypes are heavier-weight objects than SELFs. Exemplars is the name given to prototypes in a project that added a prototype-based object hierarchy to Smalltalk <ref> [8] </ref>. Like our design for SELF, objects are created by cloning exemplars, and multiple representations of the same data type are permitted. Unlike SELF, this system also includes classes as an abstract type hierarchy, and two forms of multiple inheritance. One interesting contribution is the exemplar systems support for or-inheritance.
Reference: 9. <author> LaLonde, W. R., Thomas, D. A., and Pugh, J. R. </author> <title> An Exemplar Based Small-talk. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 322-330. </month>
Reference-contexts: The DeltaTalk proposal [5] included several ideas for merging Smalltalk methods and blocks, which helped us to understand the problems in this area. The Actors [7] system has active objects, but these are processes, unlike SELFs procedural model. Actors also rejects classes, replacing inheritance with delegation. Oaklisp <ref> [9] </ref> is a version of Scheme with message passing at the bottom.
Reference: 10. <author> Lee, E. </author> <title> Object Storage and Inheritance for SELF, a Prototype-Based Object-Oriented Programming Language. </title> <type> Engineers thesis, </type> <institution> Stanford University (1988). </institution>
Reference-contexts: But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation <ref> [2, 3, 4, 8, 10] </ref>. Furthermore, while Smalltalk and most other object-oriented languages support variable access as well as message passing, SELF objects access their state information by sending messages to self, the receiver of the current message. <p> Strobe is a frame-based language for AI that also mixes data and behavior in slots [16]. Loops, an extension of InterLisp with objects, also includes active variables [18]. We would like to thank Henry Lieberman for calling our attention to prototypes <ref> [10] </ref>. Unlike SELF, Liebermans prototypes include shared information as well. His clones inherit from their prototype, adding private slots on-demand. Although this approach obviates the need for traits objects, its prototypes are heavier-weight objects than SELFs.
Reference: 11. <author> Lieberman, H. </author> <title> Using Prototypical Objects to Implement Shared Behavior in Object-Oriented Systems. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 214-223. </month>
Reference-contexts: The way SELF accesses state via message passing owes much to conversations with Peter Deutsch, and is reminiscent of an earlier unpublished language of his called O. Some Smalltalk programmers have already adopted this style of variable accessing <ref> [11] </ref>. Trellis/Owl is an independently designed object-oriented language that includes syntactic sugar to make message invocation look like SELF: THE POWER OF SIMPLICITY 17 element access and assignment [12]. This is the reverse of our approach. We stuck with message-passing syntax in SELF to emphasize behavioral connotations.
Reference: 12. <author> Schaffert, C., Cooper, T., and Wilpolt, C. </author> <title> Trellis Object-Based Environment: Language Reference Manual, </title> <type> Version 1.1. </type> <institution> DEC-TR-372, Digital Equipment Corp., Hudson, </institution> <address> MA (1985). </address>
Reference-contexts: Some Smalltalk programmers have already adopted this style of variable accessing [11]. Trellis/Owl is an independently designed object-oriented language that includes syntactic sugar to make message invocation look like SELF: THE POWER OF SIMPLICITY 17 element access and assignment <ref> [12] </ref>. This is the reverse of our approach. We stuck with message-passing syntax in SELF to emphasize behavioral connotations. Strobe is a frame-based language for AI that also mixes data and behavior in slots [16]. Loops, an extension of InterLisp with objects, also includes active variables [18].
Reference: 13. <author> Schaffert, C., Cooper, T., Bullis, B., Kilian, M., and Wilpolt, C. </author> <title> An Introduction to Trellis/Owl. </title> <booktitle> In OOPSLA 86 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 21, </volume> <month> 11 </month> <year> (1986) </year> <month> 9-16. </month>
Reference-contexts: Authors present address: Sun Microsystems, 2500 Garcia Avenue, Mountain View, CA 94043. This paper is a substantial revision of [20], originally published in OOPSLA 87 Conference Proceedings (SIGPLAN Notices, 22, 12 (1987) 227-241). 2 UNGAR AND SMITH <ref> [13] </ref>, and therefore includes runtime typing (i.e. no type declarations) and automatic storage reclamation. But unlike Smalltalk, SELF includes neither classes nor variables. Instead, SELF has adopted a prototype metaphor for object creation [2, 3, 4, 8, 10].
Reference: 14. <author> Stein, L. A. </author> <title> Delegation Is Inheritance. </title> <booktitle> In OOPSLA 87 Conference Proceedings. Published as SIGPLAN Notices, </booktitle> <volume> 22, </volume> <month> 12 </month> <year> (1987) </year> <month> 138-146. </month>
Reference-contexts: In addition to sharing the same model of creation, procedures also store their variables and maintain their environment information the same way as ordinary objects, as described in Section 4. Concreteness. Our tastes have led us to a metaphor whose elements are as concrete as possible <ref> [14, 15] </ref>. So, in the matter of classes versus prototypes, we have chosen to try prototypes. This makes a basic difference in the way that new objects are created. In a class-based language, an object would be created by instantiating a plan in its class. <p> One interesting contribution is the exemplar systems support for or-inheritance. SELF seems to be more unorthodox than exemplars in two respects: it eliminates variable accessing from the language, and it unifies objects, classes, and methods. The Alternate Reality Kit <ref> [14, 15] </ref> is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes.
Reference: 15. <author> Stein, L. A., Lieberman, H., and Ungar, D. </author> <title> A Shared View of Sharing: The Treaty of Orlando. </title> <editor> In Kim, W., and Lochovosky, F., editors, </editor> <title> Object-Oriented Concepts, Applications, and Databases, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1988). </address>
Reference-contexts: In addition to sharing the same model of creation, procedures also store their variables and maintain their environment information the same way as ordinary objects, as described in Section 4. Concreteness. Our tastes have led us to a metaphor whose elements are as concrete as possible <ref> [14, 15] </ref>. So, in the matter of classes versus prototypes, we have chosen to try prototypes. This makes a basic difference in the way that new objects are created. In a class-based language, an object would be created by instantiating a plan in its class. <p> One interesting contribution is the exemplar systems support for or-inheritance. SELF seems to be more unorthodox than exemplars in two respects: it eliminates variable accessing from the language, and it unifies objects, classes, and methods. The Alternate Reality Kit <ref> [14, 15] </ref> is a direct manipulation simulation environment based on prototypes and active objects, and it has given us much insight into the world of prototypes.
Reference: 16. <author> Stroustrup, B. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA (1986). </address>
Reference-contexts: This is the reverse of our approach. We stuck with message-passing syntax in SELF to emphasize behavioral connotations. Strobe is a frame-based language for AI that also mixes data and behavior in slots <ref> [16] </ref>. Loops, an extension of InterLisp with objects, also includes active variables [18]. We would like to thank Henry Lieberman for calling our attention to prototypes [10]. Unlike SELF, Liebermans prototypes include shared information as well. His clones inherit from their prototype, adding private slots on-demand.
Reference: 17. <author> Stroustrup, B. </author> <title> The Evolution of C++: </title> <booktitle> 1985 to 1987. In USENIX C++ Workshop Proceedings (1987) 1-21. </booktitle>
Reference-contexts: of variables: local variables (temporaries), instance variables, class variables, pool variables, and global variables, whose scopes roughly correspond to rungs on a ladder of instantiation. 10 UNGAR AND SMITH 4 Closures and Methods The Lisp community has obtained excellent results with closures (or lambda-expressions) as a basis for control structures <ref> [1, 17] </ref>. Experience with Smalltalk blocks supports this; closures provide a powerful, yet easy-to-use metaphor for users to exploit and define their own control structures. Furthermore, this ability is crucial to any language that supports user-defined abstract data types.

References-found: 61

