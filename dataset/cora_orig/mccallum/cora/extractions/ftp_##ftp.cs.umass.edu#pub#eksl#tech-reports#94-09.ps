URL: ftp://ftp.cs.umass.edu/pub/eksl/tech-reports/94-09.ps
Refering-URL: http://www.cs.umass.edu/~atkin/research/publications.html
Root-URL: 
Title: The Interval Reduction Strategy for Monitoring Cupcake Problems  
Author: Paul R. Cohen, Marc S. Atkin, and Eric A. Hansen 
Note: This work was supported by ARPA/Rome Laboratory under contract #F30602-91-C-0076 and under an Augmentation Award for Science and Engineering Research Training.  
Address: Box 34610  Amherst, MA 01003-4610  
Affiliation: Computer Science  Experimental Knowledge Systems Laboratory Department of Computer Science,  Lederle Graduate Research Center University of Massachusetts  
Pubnum: Technical Report 94-09  
Abstract: Monitoring is the process by which agents assess their environments. Most AI applications rely on periodic monitoring, but for a large class of problems this is inefficient. The interval reduction monitoring strategy is better. It also appears in humans and artificial agents when they are given the same set of monitoring problems. We implemented two genetic algorithms to evolve monitoring strategies and a dynamic programming algorithm to find an optimum strategy. We also developed a simple mathematical model of monitoring. We tested all these strategies in simulations, and we tested human strategies in a "video game." Interval reduction always emerged. Environmental factors such as error and monitoring costs had the same qualitative effects on the strategies, irrespective of their genesis. Interval reduction appears to be a general monitoring strategy. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Atkin, M.S., </author> <year> 1991. </year> <title> Research Summary: Using a Genetic Algorithm to Monitor Cupcakes. </title> <type> EKSL Memo #24, </type> <institution> Experimental Knowledge Systems Laboratory, University of Massachusetts, Amherst. </institution>
Reference-contexts: This cost was also the fitness measure used by the genetic algorithm. The rest of the genetic algorithm was very basic, too. It used roulette wheel selection, fixed mutation and crossing over rates, and a population size typically around 100 <ref> [1] </ref>. mon's strategies have been tested with results shown in Table 1. 5.1 ltb: Learning to Behave Until now we have described rather abstract one-dimensional monitoring problems. ltb is a genetic programming algorithm that evolves monitoring strategies for simulated robots in two-dimensional worlds.
Reference: [2] <author> Atkin, M. & Cohen, P.R., </author> <year> 1993. </year> <title> Genetic Programming to Learn an Agent's Monitoring Strategy. </title> <booktitle> Proceedings of the AAAI 93 Workshop on Learning Action Models, </booktitle> <pages> Pp. 36-41. </pages>
Reference: [3] <author> Atkin, M. & Cohen, P.R., </author> <year> 1993. </year> <title> Genetic Programming to Learn an Agent's Monitoring Strategy. </title> <type> CMP-SCI Technical Report 93-26. </type> <institution> University of Massachusetts, Amherst. </institution>
Reference-contexts: Nevertheless, in this experiment and others, involving hundreds of trials with ltb and other genetic programming approaches to two-dimensional cupcake problems <ref> [3, 4] </ref> we have never observed a fitter strategy than interval reduction. 8 Discussion Given the opportunity, adults and genetic algorithms will use interval reduction to solve cupcake problems. Dynamic programming tells us that interval reduction is optimal.
Reference: [4] <author> Atkin, M.S. & Cohen, P.R., </author> <year> 1994. </year> <title> Learning Monitoring Strategies: A Difficult Genetic Programming Application. </title> <booktitle> Submitted to IEEE International Conference on Evolutionary Computation. </booktitle>
Reference-contexts: Instead, we ran two levels of each of three factors: M = 1; 10, d = :333; 1:0, and G = 20; 150. ltb was trained and tested in just four conditions (it is difficult to get genetic programming to work well <ref> [4] </ref>): Each of six subjects was tested on ten problems in each condition, for a total of 80 trials per subject. mon, sir and the optimal policies were tested in 100 trials in each of the 32 conditions. The results of this experiment are shown in Table 1. <p> Nevertheless, in this experiment and others, involving hundreds of trials with ltb and other genetic programming approaches to two-dimensional cupcake problems <ref> [3, 4] </ref> we have never observed a fitter strategy than interval reduction. 8 Discussion Given the opportunity, adults and genetic algorithms will use interval reduction to solve cupcake problems. Dynamic programming tells us that interval reduction is optimal.
Reference: [5] <author> Ceci, S.J. & Bronfenbrenner, U., </author> <year> 1985. </year> <title> "Don't forget to take the cupcakes out of the oven": Prospective memory, strategic time-monitoring, and context. Child Development, </title> <journal> Vol. </journal> <volume> 56. </volume> <pages> Pp. 152-164. </pages>
Reference-contexts: In this paper we present data for humans and artificial agents solving formally identical monitoring problems, and include, for the first time, human adult data. 2 The Cupcake Problem In 1985, Ceci and Bronfenbrenner described a monitoring task for children that they called the cupcake problem <ref> [5] </ref>. Each child was instructed by an older sibling (who served as a confederate in the experiment and collected the data) as follows: "We are going to put some cupcakes in the oven and they will be done in thirty minutes.
Reference: [6] <author> Cohen, P.R. & Atkin, M.S., </author> <year> 1994. </year> <title> Preliminary Evidence that the Interval Reduction Strategy is General. Submitted to From animals to animats, </title> <booktitle> the Third International Conference on Simulation of Adaptive Behavior. </booktitle>
Reference-contexts: The fact that it, too, is an interval reduction strategy lends further support to our belief that interval reduction might be very general; that is, we expect it to evolve in other agents in similar environments. In an earlier paper <ref> [6] </ref> we offered preliminary evidence for the generality of interval reduction, but we relied on research from another lab for evidence about children's monitoring, and we couldn't directly compare human strategies with others.
Reference: [7] <author> Fikes, R., </author> <year> 1971. </year> <title> Monitored execution of robot plans produced by STRIPS. </title> <booktitle> Proc. IFIP Congress 71, </booktitle> <address> Ljubljana, Yugoslavia (August 23-28, </address> <year> 1971), </year> <pages> pp. 189-194. </pages>
Reference-contexts: Monitoring has been studied to some extent by AI researchers [11, 21, 23, 24, 27, 28], indeed, the earliest work on planning for the Shakey robot emphasized monitoring <ref> [7, 8] </ref>, but AI research has little to say about monitoring strategies, about when and how often to monitor, and how these decisions depend on the dynamics of the environment [17]. Most systems monitor periodically, although this can be wasteful of effort.
Reference: [8] <author> Fikes, R., Hart, P. & Nilsson, N., </author> <year> 1972. </year> <title> Learning and executing generalized robot plans. </title> <booktitle> Artificial Intelligence 3(4), </booktitle> <pages> pp. 251-188. </pages> <note> Reprinted in: </note> <editor> Allen, Hendler, and Tate (eds.), </editor> <booktitle> Readings in Planning, </booktitle> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, CA. </address>
Reference-contexts: Monitoring has been studied to some extent by AI researchers [11, 21, 23, 24, 27, 28], indeed, the earliest work on planning for the Shakey robot emphasized monitoring <ref> [7, 8] </ref>, but AI research has little to say about monitoring strategies, about when and how often to monitor, and how these decisions depend on the dynamics of the environment [17]. Most systems monitor periodically, although this can be wasteful of effort.
Reference: [9] <author> Firby, R.J., </author> <year> 1987. </year> <title> An investigation into reactive planning in complex domains. </title> <booktitle> AAAI 87, </booktitle> <pages> pp. </pages> <month> 202-206. </month> <title> 3 We have not been able to prove this as a general proposition, but we have proved it for special cases and we have the empirical evidence presented earlier. </title> <type> 10 </type>
Reference: [10] <author> Georgeff, M. & Lansky, A., </author> <year> 1987. </year> <title> Reactive reasoning and planning. </title> <booktitle> AAAI 87, </booktitle> <pages> pp. 677-682. </pages> <note> Reprinted in: </note> <editor> Allen, Hendler, and Tate (eds.), </editor> <booktitle> Readings in Planning, </booktitle> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, CA. </address>
Reference: [11] <author> Ghallab, M., Alami, R. & Chatila, R., </author> <year> 1988. </year> <title> Dealing with time in planning and execution monitoring. </title> <booktitle> In: Robotics Research: The Fourth International Symposium, </booktitle> <editor> ed. by Bolles and Roth, </editor> <publisher> MIT Press, </publisher> <pages> pp. 431-443. </pages>
Reference-contexts: Monitoring means seeing how plans are progressing, checking how much progress has been made, finding out what time it is, updating one's location, looking for obstacles, making sure that nothing has changed unexpectedly, and so on. Monitoring has been studied to some extent by AI researchers <ref> [11, 21, 23, 24, 27, 28] </ref>, indeed, the earliest work on planning for the Shakey robot emphasized monitoring [7, 8], but AI research has little to say about monitoring strategies, about when and how often to monitor, and how these decisions depend on the dynamics of the environment [17].
Reference: [12] <author> Goldberg, D.E., </author> <year> 1989. </year> <title> Genetic Algorithms in Search, Optimization & Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference: [13] <author> Goldberg, D.E. & Kalyanmoy, D., </author> <year> 1991. </year> <title> A Comparative Analysis of Selection Schemes Used in Genetic Algorithms, in Foundations of Genetic Algorithms (Gregory J.E. </title> <publisher> Rawlins ed.), </publisher> <pages> pp. 69-93. </pages> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, CA. </address>
Reference: [14] <author> Hanks, S., </author> <year> 1990. </year> <title> Practical temporal projection. </title> <booktitle> AAAI 90, </booktitle> <pages> pp. 158-163. </pages>
Reference: [15] <author> Hansen, E.A., </author> <year> 1992. </year> <note> Note on monitoring cupcakes. EKSL Memo #22. </note> <institution> Experimental Knowledge Systems Laboratory, Computer Science Dept., University of Massachusetts, Amherst. </institution>
Reference-contexts: Deciding whether to act immediately or wait and monitor again with the option of acting later is a sequential decision problem because a sequence of later opportunities for acting must be considered in deciding what to do <ref> [15, 16] </ref>.
Reference: [16] <author> Hansen, E.A., </author> <year> 1992. </year> <title> Learning A Decision Rule for Monitoring Tasks with Deadlines. </title> <type> CMPSCI Technical Report 92-80. </type> <institution> University of Massachusetts, Amherst. </institution>
Reference-contexts: Deciding whether to act immediately or wait and monitor again with the option of acting later is a sequential decision problem because a sequence of later opportunities for acting must be considered in deciding what to do <ref> [15, 16] </ref>. <p> Multi-step state transition probabilities and a multi-step payoff function let the controller project the state of a process and the payoff it expects to receive an arbitrary number of time-steps into the future. They also add complexity to the dynamic programming search. Hansen <ref> [16] </ref> has shown that the curse of dimensionality is ameliorated if utility is assumed to be a monotonic function of monitoring interval, and he also suggests finding an acceptable but coarse-grained time interval.
Reference: [17] <author> Hansen, E.A., </author> <year> 1994. </year> <title> Monitoring the execution of robot plans: A survey. </title> <note> Submitted to AI Magazine. </note>
Reference-contexts: AI researchers [11, 21, 23, 24, 27, 28], indeed, the earliest work on planning for the Shakey robot emphasized monitoring [7, 8], but AI research has little to say about monitoring strategies, about when and how often to monitor, and how these decisions depend on the dynamics of the environment <ref> [17] </ref>. Most systems monitor periodically, although this can be wasteful of effort. Our interest in monitoring is only partly to find efficient strategies, however. We also suspect some monitoring strategies might be very general.
Reference: [18] <author> Koza, J.R., </author> <year> 1992. </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection and Genetics. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference-contexts: Since overshooting the goal point is penalized highly, this problem is in fact an asymmetric cupcake problem. The version of ltb that produced the data in Table 1 represents programs as linear lists of commands, instead of the tree structures common in the Genetic Programming field <ref> [18, 19] </ref>. Crossing over simply swaps two chunks of code between two individuals; mutation changes one command into another. Since the language is relatively simple, only a few constraints are needed to keep programs legal.
Reference: [19] <author> Koza, J.R. & Rice, J.P., </author> <year> 1992. </year> <title> Automatic Programming of Robots using Genetic Programming. </title> <booktitle> AAAI 92, </booktitle> <pages> Pp. 194-207 </pages>
Reference-contexts: Since overshooting the goal point is penalized highly, this problem is in fact an asymmetric cupcake problem. The version of ltb that produced the data in Table 1 represents programs as linear lists of commands, instead of the tree structures common in the Genetic Programming field <ref> [18, 19] </ref>. Crossing over simply swaps two chunks of code between two individuals; mutation changes one command into another. Since the language is relatively simple, only a few constraints are needed to keep programs legal.
Reference: [20] <author> McDermott, D., </author> <year> 1992. </year> <title> Robot Planning. </title> <journal> AI Magazine, </journal> <pages> pp. 55-79. </pages>
Reference: [21] <author> Musliner, D., Durfee, E. & Shin, K., </author> <year> 1991. </year> <title> Execution monitoring and recovery planning with time. </title> <booktitle> Proceedings IEEE Seventh Conference on Artificial Intelligence Applications, </booktitle> <pages> pp. 385-388. </pages>
Reference-contexts: Monitoring means seeing how plans are progressing, checking how much progress has been made, finding out what time it is, updating one's location, looking for obstacles, making sure that nothing has changed unexpectedly, and so on. Monitoring has been studied to some extent by AI researchers <ref> [11, 21, 23, 24, 27, 28] </ref>, indeed, the earliest work on planning for the Shakey robot emphasized monitoring [7, 8], but AI research has little to say about monitoring strategies, about when and how often to monitor, and how these decisions depend on the dynamics of the environment [17].
Reference: [22] <author> Norman, D.A & Bobrow, D.G. </author> <year> 1974. </year> <title> On data-limited and resource-limited processes. </title> <type> Xerox Technical Report CSL 74-2. </type> <institution> Xerox Palo Alto Research Center. </institution>
Reference-contexts: In the first case monitoring obviously isn't free, and in the second it is bad design if the dedicated processor learns anything from its monitoring about the system's goals. Norman and Bobrow <ref> [22] </ref> show convincingly that distributed systems can avoid catastrophic failure if they adopt the principle of continuously available output, in effect sharing intermediate results among components.
Reference: [23] <author> Schoppers, M., </author> <year> 1992. </year> <title> Representing the plan monitoring needs and resources of robotic systems. </title> <booktitle> Proceedings of the Third Annual Conf. on AI, Simulation and Planning in High Autonomy Systems, </booktitle> <pages> pp. 182-187. </pages>
Reference-contexts: Monitoring means seeing how plans are progressing, checking how much progress has been made, finding out what time it is, updating one's location, looking for obstacles, making sure that nothing has changed unexpectedly, and so on. Monitoring has been studied to some extent by AI researchers <ref> [11, 21, 23, 24, 27, 28] </ref>, indeed, the earliest work on planning for the Shakey robot emphasized monitoring [7, 8], but AI research has little to say about monitoring strategies, about when and how often to monitor, and how these decisions depend on the dynamics of the environment [17].
Reference: [24] <author> Schoppers, M., </author> <year> 1992. </year> <title> Building plans to monitor and exploit open-loop and closed-loop dynamics. </title> <booktitle> Proceedings 1st International Conference on Artificial Intelligence Planning Systems, </booktitle> <editor> ed. J. </editor> <booktitle> Hendler, </booktitle> <pages> pp. 204-213. </pages> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, CA. </address>
Reference-contexts: Monitoring means seeing how plans are progressing, checking how much progress has been made, finding out what time it is, updating one's location, looking for obstacles, making sure that nothing has changed unexpectedly, and so on. Monitoring has been studied to some extent by AI researchers <ref> [11, 21, 23, 24, 27, 28] </ref>, indeed, the earliest work on planning for the Shakey robot emphasized monitoring [7, 8], but AI research has little to say about monitoring strategies, about when and how often to monitor, and how these decisions depend on the dynamics of the environment [17].
Reference: [25] <author> St. Amant, R., Kuwata, Y., & Cohen, P.R., </author> <year> 1993. </year> <title> Reactive Planning with Dynamic Programming Envelopes. </title> <type> CMPSCI Technical Report, </type> <institution> University of Massachusetts, Amherst. </institution>
Reference-contexts: Hansen [16] has shown that the curse of dimensionality is ameliorated if utility is assumed to be a monotonic function of monitoring interval, and he also suggests finding an acceptable but coarse-grained time interval. This suggestion was tested with good results in <ref> [25] </ref>. 5 Genetic Algorithm Solutions to One- and Two-dimensional Cupcake Problems Given parameterized functions describing when to monitor next, the mon system runs a genetic algorithm to determine the best parameter values|the ones that minimize the expected cost. For the cupcake problem, the function was N = ct + b.
Reference: [26] <author> Sutton, R.S., </author> <year> 1990. </year> <title> Integrated architectures for learning, planning, and reacting based on approximately dynamic programming. </title> <booktitle> Proceedings of the Seventh International Conference on Machine Learning, </booktitle> <pages> pp. 216-224. </pages>
Reference-contexts: Unfortunately the tradeoff between monitoring costs and penalties can be played out at every place the agent might stop to monitor. In fact, deciding when to monitor is a sequential decision problem <ref> [26] </ref>. Finding an optimal control policy is also a sequential decision problem. Actions can have delayed effects that must be considered in choosing the action to take in each state, and a policy that chooses actions solely for their immediate effects may not be optimal over the long term.
Reference: [27] <author> Tate, A., </author> <year> 1984. </year> <title> Planning and condition monitoring in a FMS. </title> <booktitle> Proceedings of the International Conference on Flexible Automation Systems. Institute of Electrical Engineers, London, </booktitle> <pages> pp. 62-69. </pages>
Reference-contexts: Monitoring means seeing how plans are progressing, checking how much progress has been made, finding out what time it is, updating one's location, looking for obstacles, making sure that nothing has changed unexpectedly, and so on. Monitoring has been studied to some extent by AI researchers <ref> [11, 21, 23, 24, 27, 28] </ref>, indeed, the earliest work on planning for the Shakey robot emphasized monitoring [7, 8], but AI research has little to say about monitoring strategies, about when and how often to monitor, and how these decisions depend on the dynamics of the environment [17].
Reference: [28] <author> Wilkins, D., </author> <year> 1985. </year> <title> Recovering from execution monitoring errors in SIPE. </title> <booktitle> Computational Intelligence 1, </booktitle> <pages> pp. 33-45. </pages>
Reference-contexts: Monitoring means seeing how plans are progressing, checking how much progress has been made, finding out what time it is, updating one's location, looking for obstacles, making sure that nothing has changed unexpectedly, and so on. Monitoring has been studied to some extent by AI researchers <ref> [11, 21, 23, 24, 27, 28] </ref>, indeed, the earliest work on planning for the Shakey robot emphasized monitoring [7, 8], but AI research has little to say about monitoring strategies, about when and how often to monitor, and how these decisions depend on the dynamics of the environment [17].
References-found: 28

