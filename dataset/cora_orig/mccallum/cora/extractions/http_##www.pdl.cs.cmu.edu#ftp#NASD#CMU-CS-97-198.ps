URL: http://www.pdl.cs.cmu.edu/ftp/NASD/CMU-CS-97-198.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/er1p/www/ErikRiedel.html
Root-URL: 
Title: Active Disks Remote Execution for Network-Attached Storage  
Author: Erik Riedel Garth Gibson 
Address: Pittsburgh PA 15213-3890  
Affiliation: School of Computer Science Carnegie Mellon University  Department of Electrical and Computer Engineering, Carnegie Mellon University  
Date: December 1997  
Pubnum: CMU-CS-97-198  
Abstract: The principal trend in the design of computer systems is the expectation of much greater computational power in future generations of microprocessors. This trend applies to embedded systems as well as host processors. As a result, devices such as storage controllers have excess capacity and growing computational capabilities. Storage system designers are exploiting this trend with higher-level interfaces to storage and increased intelligence inside storage devices. One development in this direction is Network-Attached Secure Disks (NASD) which attaches storage devices directly to the network and raises the storage interface above the simple (fixed-size block) memory abstraction of SCSI. This allows devices more freedom to provide efficient operations; promises more scalable subsystems by offloading file system and storage management functionality from dedicated servers; and reduces latency by executing common case requests directly at storage devices. In this paper, we push this increasing computation trend one step further. We argue that applicationspecific code can be executed at storage devices to make more effective use of device, host and interconnect resources and significantly improve application I/O performance. Remote execution of code directly at storage devices allows filter operations to be performed close to the data; enables support of timingsensitive transfers and application-aware scheduling of access and transfer; allows management functions to be customized without requiring firmware changes; and makes possible more complex or specialized operations than a general-purpose storage interface would normally support. This research is sponsored by DARPA/ITO through ARPA Order D306, and issued by Indian Head Division, NSWC under contract N00174-96-0002. The project team is indebted to generous contributions from the member companies of the Parallel Data Consortium. At the time of this writing, these companies include Hewlett-Packard Laboratories, Symbios Logic Inc., Compaq Corporation, Data General, Quantum Corporation, Seagate Technology, and Storage Technology Corporation. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of any supporting organization or the U. S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [Agrawal96] <author> Agrawal, R. </author> <title> and Schafer, </title> <journal> J. Parallel Mining of Association Rules IEEE Transactions on Knowledge and Data Engineering 8,6. </journal> <month> December </month> <year> 1996. </year>
Reference: [Arpaci-Dusseau96] <author> Arpaci-Dusseau, A.C., Arpaci-Dusseau, R.H., Culler, D.E., Hellerstein, J.M., Patterson, D.A. </author> <booktitle> High-Performance Sorting on Networks of Workstations International Conference on Management of Data (ACM SIGMOD 97). </booktitle> <month> June </month> <year> 1997. </year>
Reference: [Barclay97] <author> Barclay, T. </author> <title> The TerraServer Spatial Database www.research.microsoft.com/terraserver. November 1997. </title>
Reference-contexts: The TerraServer is a geographic data server that provides access to satellite imagery of the entire world on the Internet <ref> [Barclay97] </ref>. The ProLiant system had the lowest $/tpmC rating for the week of 13 October 1997 [TPC97]. The table compares total processing power in MIPS, total memory in MB, and total transfer bandwidth in MB/s of disks vs. their host systems.
Reference: [Bershad92] <author> Bershad, B.N., Savage, S., Pardyak, P., Sirer, E.G., Fiuczynski, M.E., Becker, D., Chambers, C. and Eggers, S. </author> <title> Extensibility, Safety, </title> <booktitle> and Performance in the SPIN Operating System Fifteenth ACM Symposium on Operating System Principles. </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Simple mechanisms such as packet filters [Mogul87] provide ways to add user-defined functionality in a limited, yet powerful way. Allowing application code to be added directly into the operating system at specific points can improve performance over the normally rigid operating system interfaces <ref> [Bershad92] </ref>. At the extreme, moving policy decisions completely out of the operating system kernel and placing them under user control allows even greater flexibility to applications and promises further improvements in performance [Engler95] at the cost of losing control of some resource management. <p> Several mechanisms exist to improve the safety of extension code. The use of typesafe languages and compilers that certify the safety of a piece of code <ref> [Bershad92] </ref> provides a way to ensure integrity, but does not protect efficiency. Using a typesafe language and limiting access to system resources through interface constraints [Gosling96] allows greater control, but does not address all safety and efficiency concerns [McGraw96].
Reference: [Blelloch96] <author> Blelloch, G.E., Leiserson, C.E., Maggs, B.M., Plaxton, C.G., Smith, S.J., Zagha, M. </author> <title> An Experimental Analysis of Parallel Sorting Algorithms Communications of the ACM. </title> <note> To appear. </note>
Reference-contexts: Parallel sort The second application is a sorting algorithm based on parallel sample sort <ref> [Blelloch96] </ref> running across a network of workstations similar to the system described in [Arpaci-Dusseau97]. The processing in the normal case and in the presence of Active Disks is described in Table 3.
Reference: [Cabrera95] <author> Cabrera, L.F., Rees, R., Steiner, S., Penner, M. and Hineman, W. ADSM: </author> <title> A Multi-Platform, Scalable, Backup and Archive Mass Storage System IEEE COMPCON. </title> <month> March </month> <year> 1995. </year>
Reference-contexts: It also allows the implementation of a variety of storage optimizations that have been proposed in the context of custom systems, such as: AutoRAID [Wilkes96]; Semantic Caching [Dar96]; Progressive Browsing of Images [Prabhakar97]; TickerTAIP [Cao94]; optimal data layout; ADStar storage management <ref> [Cabrera95] </ref>; and Logical Disk [deJonge95]. 3. Potential Benefits We have taken a closer look at the benefits of Active Disks for two specific applications: database select and parallel sort.
Reference: [Cao94] <author> Cao, P., Lim, S.B., Venkataraman, S. and Wilkes, J. </author> <booktitle> The TickerTAIP Parallel RAID Architecture ACM Transactions on Computer Systems 12,3. </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: Remote execution allows customization of the storage interfaces to meet different application needs. It also allows the implementation of a variety of storage optimizations that have been proposed in the context of custom systems, such as: AutoRAID [Wilkes96]; Semantic Caching [Dar96]; Progressive Browsing of Images [Prabhakar97]; TickerTAIP <ref> [Cao94] </ref>; optimal data layout; ADStar storage management [Cabrera95]; and Logical Disk [deJonge95]. 3. Potential Benefits We have taken a closer look at the benefits of Active Disks for two specific applications: database select and parallel sort.
Reference: [Dar96] <author> Dar, S., Franklin, M.J., Jonsson, B.P., Srivastava, D. and Tan, M. </author> <booktitle> Semantic Data Caching and Replacement 22 nd International Conference on Very Large Databases. </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Remote execution allows customization of the storage interfaces to meet different application needs. It also allows the implementation of a variety of storage optimizations that have been proposed in the context of custom systems, such as: AutoRAID [Wilkes96]; Semantic Caching <ref> [Dar96] </ref>; Progressive Browsing of Images [Prabhakar97]; TickerTAIP [Cao94]; optimal data layout; ADStar storage management [Cabrera95]; and Logical Disk [deJonge95]. 3. Potential Benefits We have taken a closer look at the benefits of Active Disks for two specific applications: database select and parallel sort.
Reference: [Engler95] <author> Engler, D.R., Kaashoek, M.F., OToole, J. Exokernel: </author> <booktitle> An Operating System Architecture for Application-Level Resource Management Fifteenth ACM Symposium on Operating System Principles. </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: At the extreme, moving policy decisions completely out of the operating system kernel and placing them under user control allows even greater flexibility to applications and promises further improvements in performance <ref> [Engler95] </ref> at the cost of losing control of some resource management. Small and Seltzer [Small95] compare several techniques for safely extending operating system code and provide a taxonomy of available techniques. Several compiled technologies (Modula-3 and SFI) show promise, while interpreted languages impose too high an overhead for inkernel processing.
Reference: [Franklin96] <author> Franklin, M.J., Jonsson, B.P. and Kossmann, D. </author> <booktitle> Performance Tradeoffs for ClientServer Query Processing International Conference on Management of Data (ACM SIGMOD 96). </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Database select In order to evaluate the benefits possible using remote execution on drives, we modeled a database SELECT operation performed at drives rather than processing everything directly on the host. The basic modeling parameters are taken from <ref> [Franklin96] </ref> which studied the tradeoffs of performing hybrid query processing split between clients and database servers. We simply extended this notion to include Active Disks and moved portions of the computation directly to drives as our servers. Table 2 shows the basic parameters used. <p> These values are from <ref> [Franklin96] </ref> and represent common values for typical client/server database systems today. 10 Drive MIPS 0.0 1.0 2.0 3.0 1 5 10 25 50 75 85 95 99 100 Match Percent S e d p 10% Match 0.0 4.0 8.0 1 5 10 25 50 100 Drive MIPS S e d p <p> use of stored procedures and user-defined functions that execute directly on database servers is available today, but query optimization for such functions is often primitive. 11 Query optimization mechanisms are being extended to work across distributed systems, taking into account the most appropriate location for a particular bit of computation <ref> [Franklin96] </ref>. Applicationspecific extensions to the type system and processing in objectoriented databases such as DataBlades [Stonebraker96] provide flexibility and promise improved performance for specialized data types. Several mechanisms exist to improve the safety of extension code.
Reference: [Gibson97] <author> Gibson, G., Nagle, D., Amiri, K., Chang, F., Feinberg, E., Gobioff, H., Lee, C., Ozceri, B., Riedel, E., Rochberg, D., and Zelenka, J. </author> <title> File Server Scaling with Network-Attached Secure Disks Intl Conference on Measurements and Modeling of Computer Systems (SIGMETRICS 97). </title> <month> June </month> <year> 1997. </year>
Reference-contexts: The server remains responsible for overall file system functionality, but participates only infrequently when new access rights must be tested or cache consistency policies invoked <ref> [Gibson97] </ref>. As systems get faster and cheaper, people compute on larger and larger sets of data. Table 1 shows two contemporary systems with large storage requirements.
Reference: [Gibson97a] <author> Gibson, G., Nagle, D., Amiri, K., Chang, F., Gobioff, H., Riedel, E., Rochberg, D., and Zelenka, J. </author> <type> Filesystems for Network-Attached Secure Disks Technical Report CMU-CS-97-112. </type> <month> March </month> <year> 1997. </year>
Reference-contexts: Examples include a READ/MODIFY/WRITE operation for use by a RAID subsystem across NASDs; a drive-embedded web server; or an atomic CREATE that both creates a new file and updates the corresponding directory object, for optimization of a particular filesystem on NASD <ref> [Gibson97a] </ref>. 6 2.6. Other Researchers into I/O for large-scale scientific applications have noted a large variety in access patterns [Smirni96] that are often not good fits for general policies. Remote execution allows customization of the storage interfaces to meet different application needs. <p> Current drive interfaces provide for requests of very limited duration typically a few to a few dozen milliseconds in part because operations are limited, contiguous SCSI block transfers. The object interface for network-attached storage proposed in <ref> [Gibson97a] </ref> expands these bounds by allowing scatter/gather access to variable-length objects and by associating drive-managed attributes with objects. Associating translated programs with object attributes allows reuse and amortization of load-time work, favoring safety mechanisms with low runtime overhead. <p> The most direct solution to this is to limit remote functions to the same or a very limited extension of the drives normal storage interface. For example, the network-attached drive interface proposed in <ref> [Gibson97a] </ref> uses a capability system [Gobioff97] to authorize a specific set of operations on data objects on the drive.
Reference: [Gobioff97] <author> Gobioff, H., Gibson, G. and Tygar, D. </author> <title> Security for Network Attached Storage Devices Technical Report CMU-CS-97-185. </title> <month> October </month> <year> 1997. </year>
Reference-contexts: The most direct solution to this is to limit remote functions to the same or a very limited extension of the drives normal storage interface. For example, the network-attached drive interface proposed in [Gibson97a] uses a capability system <ref> [Gobioff97] </ref> to authorize a specific set of operations on data objects on the drive. Protecting data integrity in the face of remote programs can be achieved by requiring remote functions to have capabilities and use the existing system to authorize their access to data objects on the drive.
Reference: [Golding95] <editor> Golding, R., et al. </editor> <booktitle> Idleness is not sloth USENIX Technical Conference. </booktitle> <year> 1995. </year>
Reference-contexts: Such a mechanism requires a means of detecting idle time and requires relatively low startup and 10 shutdown times when new foreground work arrives <ref> [Golding95] </ref>. However, limiting remote programs to execute only in idle periods treats the associated applications as low priority, which, if their remote function reduces overall system work, is counterproductive for global resource management and throughput.
Reference: [Gosling96] <author> Gosling, J., Joy, B. and Steele, G. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley. </publisher> <year> 1996. </year>
Reference-contexts: Dynamic relocation hardware with protection checking is not out of the question on a drive, but it must be compared to the use of typesafe programming languages, compile-time, load-time, and runtime safety checks <ref> [Gosling96, McGraw97, Sirer96, Romer96, Wahbe93] </ref>. A particularly low overhead approach, proof-carrying code, moves the cost of demonstrating safety from the runtime system to the code producer [Necula96]. <p> The use of typesafe languages and compilers that certify the safety of a piece of code [Bershad92] provides a way to ensure integrity, but does not protect efficiency. Using a typesafe language and limiting access to system resources through interface constraints <ref> [Gosling96] </ref> allows greater control, but does not address all safety and efficiency concerns [McGraw96]. <p> There has been considerable work on optimizing safe languages such as Java through the use of Just-In-Time compilation <ref> [Gosling96] </ref> or translation [Proebsting97]. Small-footprint Java implementations are becoming available for embedded devices.
Reference: [Hartman96] <author> Hartman, J., Manber, U., Peterson, L. and Proebsting, T. </author> <title> Liquid Software: A New Paradigm for Networked Systems Technical Report 96-11. </title> <institution> University of Arizona. </institution> <year> 1996. </year>
Reference-contexts: It does not address the resource management issues inherent in allowing more complex programs. The Liquid Software project addresses advances in language technology that make it possible to support mobile code in different parts of a distributed system <ref> [Hartman96] </ref> with a focus on fast compilation and interpretation technology. Many results in this space will be applicable to the more limited domain of remote execution at storage devices.
Reference: [Inferno97] <author> Inferno: </author> <note> Tomorrows Full Service OSToday www.lucent.com/inferno. November 1997. </note> <author> [deJonge93] deJonge, W., Kaashoek, M.F. and Hsieh, W.C. </author> <title> The Logical Disk: A New Approach to Improving File Systems Fourteenth ACM Symposium on Operating System Principles. </title> <month> December </month> <year> 1993. </year> <month> 13 </month>
Reference-contexts: This demonstrates that it is possible to implement a workable subset of the JavaVM in a very limited resource environment. Other systems such as Inferno <ref> [Inferno97] </ref> are specifically targeted for embedded, low-resource environments. 6. Conclusions and Future Work Technology trends are making possible disk drives with significant amounts of available processing power.
Reference: [Kotz94] <author> Kotz, D. </author> <title> Disk-directed I/O for MIMD Multiprocessors First Symposium on Operating System Design and Implementation. </title> <month> November </month> <year> 1994. </year>
Reference-contexts: description of a large amount of work to the drive (or perhaps across a number of drives) and allowing it (them) to schedule the work of the entire request in the most efficient manner possible can provide significant performance gain over executing the work as a series of simple requests <ref> [Kotz94] </ref>. This includes functions such as a drive-to-drive copy controlled at the drive, rather than through the client, and scatter/gather operations that distribute data across a large number of clients (collective I/O). 2.4.
Reference: [McGraw97] <author> McGraw, G. and Felten, </author> <title> E.W. Java Security: Hostile Applets, Holes, and Antidotes. </title> <publisher> John Wiley & Sons, </publisher> <year> 1997. </year>
Reference-contexts: Dynamic relocation hardware with protection checking is not out of the question on a drive, but it must be compared to the use of typesafe programming languages, compile-time, load-time, and runtime safety checks <ref> [Gosling96, McGraw97, Sirer96, Romer96, Wahbe93] </ref>. A particularly low overhead approach, proof-carrying code, moves the cost of demonstrating safety from the runtime system to the code producer [Necula96].
Reference: [Mogul87] <author> Mogul, J.C., Rashid, R.F. and Accetta, M.J. </author> <title> The Packet Filter: An Efficient Mechanism for User-level Network Code ACM Symposium on Operating System Principles. </title> <month> November </month> <year> 1987. </year>
Reference-contexts: Extension and specialization of operating system functionality via application or user-defined extensions is growing in popularity and sophistication. Simple mechanisms such as packet filters <ref> [Mogul87] </ref> provide ways to add user-defined functionality in a limited, yet powerful way. Allowing application code to be added directly into the operating system at specific points can improve performance over the normally rigid operating system interfaces [Bershad92].
Reference: [Necula96] <author> Necula, G.C. and Lee, P. </author> <title> Safe Kernel Extensions Without RunTime Checking Second Symposium on Operating System Design and Implementation. </title> <month> October </month> <year> 1996. </year>
Reference-contexts: A particularly low overhead approach, proof-carrying code, moves the cost of demonstrating safety from the runtime system to the code producer <ref> [Necula96] </ref>. The runtime publishes a safety policy that all programs must adhere to and the code producer is responsible for providing a proof that their program meets the limitations of this policy. <p> Using a typesafe language and limiting access to system resources through interface constraints [Gosling96] allows greater control, but does not address all safety and efficiency concerns [McGraw96]. Proof-Carrying Code <ref> [Necula96] </ref> promises a mechanism to prove that a piece of user-provided code meets a specific safety policy and may also allow the checking of resource constraints, assuming certain restrictions on the generality of the extension code.
Reference: [Perry88] <author> Perry, </author> <title> T.S. PostScript prints anything: a case history IEEE Spectrum. </title> <month> May </month> <year> 1988. </year>
Reference-contexts: Remote execution has existed for 15 years in the Postscript language used in printers which allows formatting to be described more compactly and flexibly as a program for drawing a page, rather than as a bitmap of the final result <ref> [Perry88] </ref>. Postscript is specialized for page description, but provides many features of a higher-level programming language and can even (with a bit of practice and patience) be written by users directly.
Reference: [Prabhakar97] <author> Prabhakar, S., Agrawal, D., Abbadi, A.E., Singh, A. and Smith, T. </author> <booktitle> Browsing and Placement of Images on Secondary Storage IEEE International Conference of Multimedia Computer Systems. </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Remote execution allows customization of the storage interfaces to meet different application needs. It also allows the implementation of a variety of storage optimizations that have been proposed in the context of custom systems, such as: AutoRAID [Wilkes96]; Semantic Caching [Dar96]; Progressive Browsing of Images <ref> [Prabhakar97] </ref>; TickerTAIP [Cao94]; optimal data layout; ADStar storage management [Cabrera95]; and Logical Disk [deJonge95]. 3. Potential Benefits We have taken a closer look at the benefits of Active Disks for two specific applications: database select and parallel sort.
Reference: [Proebsting97] <author> Proebsting, T.A., Townsend, G., Bridges, P., Hartman, J.H., Newsham, T. and Watterson, S.A. Toba: </author> <title> Java For Applications A Way Ahead of Time Compiler Technical Report TR97-01. </title> <institution> University of Arizona. </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: There has been considerable work on optimizing safe languages such as Java through the use of Just-In-Time compilation [Gosling96] or translation <ref> [Proebsting97] </ref>. Small-footprint Java implementations are becoming available for embedded devices. A recent product announcement goes so far as a smart card that provides a Java Virtual Machine in 4K of ROM and can run bytecode programs up to 8K in size for a significant subset of the language [Schlumberger97].
Reference: [Romer96] <author> Romer, T.H., Lee, D., Voelker, G.M., Wolman, A., Wong, W.A., Baer, J., Bershad, B.N. and Levy, </author> <title> H.M. </title> <booktitle> The Structure and Performance of Interpreters ASPLOS VII. </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: Dynamic relocation hardware with protection checking is not out of the question on a drive, but it must be compared to the use of typesafe programming languages, compile-time, load-time, and runtime safety checks <ref> [Gosling96, McGraw97, Sirer96, Romer96, Wahbe93] </ref>. A particularly low overhead approach, proof-carrying code, moves the cost of demonstrating safety from the runtime system to the code producer [Necula96].
Reference: [Schlumberger97] <institution> Schlumberger Limited First-Ever Java-Based Smart Card Demonstrated by Schlumberger www.slb.com/ir/news/et-java0497.html. April 1997. </institution>
Reference-contexts: Small-footprint Java implementations are becoming available for embedded devices. A recent product announcement goes so far as a smart card that provides a Java Virtual Machine in 4K of ROM and can run bytecode programs up to 8K in size for a significant subset of the language <ref> [Schlumberger97] </ref>. This demonstrates that it is possible to implement a workable subset of the JavaVM in a very limited resource environment. Other systems such as Inferno [Inferno97] are specifically targeted for embedded, low-resource environments. 6.
Reference: [Sirer96] <author> Sirer, E.G., Savage, S., Pardyak, P., DeFouw, </author> <title> G.P. and Bershad, B.N. Writing an Operating System in Modula-3 Workshop on Compiler Support for System Software. </title> <month> February </month> <year> 1996. </year>
Reference-contexts: Dynamic relocation hardware with protection checking is not out of the question on a drive, but it must be compared to the use of typesafe programming languages, compile-time, load-time, and runtime safety checks <ref> [Gosling96, McGraw97, Sirer96, Romer96, Wahbe93] </ref>. A particularly low overhead approach, proof-carrying code, moves the cost of demonstrating safety from the runtime system to the code producer [Necula96].
Reference: [Small95] <author> Small, C. and Seltzer, M. </author> <title> A Comparison of OS Extension Technologies USENIX Technical Conference. </title> <month> January </month> <year> 1996. </year>
Reference-contexts: At the extreme, moving policy decisions completely out of the operating system kernel and placing them under user control allows even greater flexibility to applications and promises further improvements in performance [Engler95] at the cost of losing control of some resource management. Small and Seltzer <ref> [Small95] </ref> compare several techniques for safely extending operating system code and provide a taxonomy of available techniques. Several compiled technologies (Modula-3 and SFI) show promise, while interpreted languages impose too high an overhead for inkernel processing.
Reference: [Smirni96] <author> Smirni, E., Aydt, R.A., Chien, A.A., and Reed, D.A. </author> <title> I/O Requirements of Scientific Applications: </title> <booktitle> An Evolutionary View Fifth IEEE Conference on High Performance Distributed Computing. </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: Other Researchers into I/O for large-scale scientific applications have noted a large variety in access patterns <ref> [Smirni96] </ref> that are often not good fits for general policies. Remote execution allows customization of the storage interfaces to meet different application needs.
Reference: [Stonebraker97] <author> Stonebraker, M. </author> <title> Architectural Options for Object-Relational DBMSs White Paper. Informix Software, </title> <publisher> Inc. </publisher> <year> 1997. </year>
Reference: [Tennenhouse96] <author> Tennenhouse. D.L., et al. </author> <title> A Survey of Active Network Research SIGOPS 96. </title> <year> 1996. </year>
Reference-contexts: Related Work Active Networks provide a mechanism for running application code at network routers and switches to accelerate innovation and enable novel applications in the movement of data and network management <ref> [Tennenhouse96] </ref>. Two possible approaches for managing network programs are suggested - a discrete approach that allows programs to be explicitly loaded into the network and affect future packet processing and an integrated approach in which each packet consists of a program instead of simply dumb data.
Reference: [TPC97] <author> TPC-C Rev. </author> <title> 3.3 Rating for a Compaq ProLiant 7000 6/200 Model 1S. Transaction Processing Performance Council. </title> <note> www.tpc.org. October 1997. </note>
Reference-contexts: The TerraServer is a geographic data server that provides access to satellite imagery of the entire world on the Internet [Barclay97]. The ProLiant system had the lowest $/tpmC rating for the week of 13 October 1997 <ref> [TPC97] </ref>. The table compares total processing power in MIPS, total memory in MB, and total transfer bandwidth in MB/s of disks vs. their host systems.
Reference: [Turley96] <author> Turley, J. </author> <title> ARM Grabs Embedded Speed Lead Microprocessor Reports 2,10. </title> <month> February </month> <year> 1996. </year>
Reference-contexts: As shown in Figure 1, this makes it possible to integrate a 200 MHz RISC core in the same die space as the current ASIC and still leave room for additional special-purpose hardware functions <ref> [Turley96] </ref>. Moreover, the purpose of most of the hardware in this ASIC is to keep the microprocessor off the critical path (per byte, per sector) processing of normal drive operations. So most of the additional cycles possible in the integrated ASIC are spare in normal operation.
Reference: [Wahbe93] <author> Wahbe, R., Lucco, S., Anderson, T.E. and Graham, </author> <title> S.L. </title> <booktitle> Efficient Software-Based Fault Isolation Fourteenth ACM Symposium on Operating System Principles. </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: Dynamic relocation hardware with protection checking is not out of the question on a drive, but it must be compared to the use of typesafe programming languages, compile-time, load-time, and runtime safety checks <ref> [Gosling96, McGraw97, Sirer96, Romer96, Wahbe93] </ref>. A particularly low overhead approach, proof-carrying code, moves the cost of demonstrating safety from the runtime system to the code producer [Necula96].
Reference: [Wetherall96] <author> Wetherall, </author> <title> D.J. and Tennenhouse, D.L. </title> <booktitle> The ACTIVE IP Option 7 th ACM SIGOPS European Workshop. </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: The primary tradeoff, as for Active Disks, is the amount of state that devices can be expected to maintain between requests and how many requests can be active at any given time. The implementation of the Active IP option <ref> [Wetherall96] </ref> describes a prototype language system and an API to access router state and affect processing. It does not address the resource management issues inherent in allowing more complex programs.
Reference: [Wilkes95] <author> Wilkes, J., Golding, R., Staelin, C. and Sullivan, T. </author> <booktitle> The HP AutoRAID Hierarchical Storage System Fifteenth ACM Symposium on Operating System Principles. </booktitle> <month> December </month> <year> 1995. </year>
References-found: 36

