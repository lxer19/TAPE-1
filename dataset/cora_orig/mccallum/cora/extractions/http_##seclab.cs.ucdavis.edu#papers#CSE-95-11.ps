URL: http://seclab.cs.ucdavis.edu/papers/CSE-95-11.ps
Refering-URL: http://seclab.cs.ucdavis.edu/papers.html
Root-URL: http://www.cs.ucdavis.edu
Title: Audit Log Analysis Using the Visual Audit Browser Toolkit  
Note: September 13, 1995  
Abstract: James Hoagland, Christopher Wee, and Karl Levitt hoagland@cs.ucdavis.edu UC Davis Computer Science Technical Report CSE-95-11 
Abstract-found: 1
Intro-found: 1
Reference: [ArHo90] <author> Hiralal Agrawal and Joseph R. Horgan, </author> <title> Dynamic Program Slicing, </title> <booktitle> Proceedings of the ACM SIG-PLAN Conference on Programming Language Design and Implementation, </booktitle> <month> June </month> <year> 1990. </year>
Reference: [CERT91] <author> CERT Advisory CA-91:20, </author> <year> 1991. </year>
Reference-contexts: An example of the output of the tool is in figure 1, which shows an rdist vulnerability exploitation 2 <ref> [CERT91] </ref>. The Frame Generator produces an intermediate form from the BSM audit log, and from the intermediate form it produces a DOT 3 language file describing the corresponding graph. The DOT file can then be converted into Postscript or other formats.
Reference: [DoRa90] <author> Cheri Dowel and Paul Ranstedt, </author> <title> The Com-puterWatch Data Reduction Tool, </title> <booktitle> Proceedings of the 13th National Computer Security Conference, </booktitle> <address> Washington, DC, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: The results of the query are displayed (in a textual manner) to the user who then interprets the result and formulates a new query. One program that converts audit logs into relational database files is ComputerWatch <ref> [DoRa90] </ref>.
Reference: [KiSp93] <author> Gene Kim and E. Spafford, </author> <title> Experiences with Tripwire: Using Integrity Checkers for Intrusion Detection, Systems Administration, </title> <booktitle> Networking and Security Conference III, Usenix, </booktitle> <month> April </month> <year> 1994. </year>
Reference-contexts: Information from outside the audit log can be brought into the visualization including the system policy, an attack database, user and attacker profiles, other audit sources, intrusion detection system output, security analysis tool output such as that from Cops [Farm91], Tripwire <ref> [KiSp93] </ref> and SATAN [FaVe95], program profiles such as those developed for privileged programs by Calvin Ko, et. al., [KoFL94], and information from the file system as it exists at the time of analysis.
Reference: [KoFL94] <author> Calvin Ko, George Fink, and Karl Levitt, </author> <title> Automated Detection of Vulnerabilities in Privileged Programs by Execution Monitoring, </title> <booktitle> Proceedings of the Tenth Annual Computer Security Applications Conference, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: into the visualization including the system policy, an attack database, user and attacker profiles, other audit sources, intrusion detection system output, security analysis tool output such as that from Cops [Farm91], Tripwire [KiSp93] and SATAN [FaVe95], program profiles such as those developed for privileged programs by Calvin Ko, et. al., <ref> [KoFL94] </ref>, and information from the file system as it exists at the time of analysis.
Reference: [KoNo93] <author> Eleftherios Koutsofios and Stephen C. </author> <title> North, Drawing Graphs with Dot, </title> <journal> AT&T Bell Laboratories, </journal> <volume> Octo-ber 18, </volume> <year> 1993. </year>
Reference-contexts: DOT is a graph layout tool from AT&T Bell Labs. It takes a graph described in the DOT language, calculates an optimal layout for the nodes and edges, and outputs this layout in a number of well known formats including Postscript and Maker Interchange Format (MIF) <ref> [KoNo93] </ref>. 2260: /usr/pkg/bin/perl 2261: /usr/ucb/rdist vfork 2262: vfork /usr/export/home/jhoaglan/rdist/rdista02261 made symlink made symlink 2067 vfork 2264: vfork create (2): /usr/bin/sh chmod to 04655 from 100755 at Tue May 24 17:02:48 1994 /usr/bin/ls fork 2265: /usr/ucb/whoami fork jhoaglan audit id for root euid for euid for 3.2 The Movie Maker The Movie
Reference: [FaSp91] <author> Dan Farmer and E. Spafford, </author> <title> The COPS Security Checker System, </title> <note> source available from ftp to coast.cs.purdue.edu, </note> <year> 1991. </year>
Reference: [FaVe95] <author> Dan Farmer and Wietse Venema, </author> <title> System Administrator Tool for Analyzing Networks, </title> <note> documentation and source available from via http to ciac.llnl.gov, </note> <year> 1995. </year>
Reference-contexts: Information from outside the audit log can be brought into the visualization including the system policy, an attack database, user and attacker profiles, other audit sources, intrusion detection system output, security analysis tool output such as that from Cops [Farm91], Tripwire [KiSp93] and SATAN <ref> [FaVe95] </ref>, program profiles such as those developed for privileged programs by Calvin Ko, et. al., [KoFL94], and information from the file system as it exists at the time of analysis.
Reference: [SaBr94] <author> Manojit Sarkar and Marc H. Brown, </author> <title> Graphical Fisheye Views, </title> <journal> Communications of the ACM, </journal> <month> Decem-ber </month> <year> 1994. </year>
Reference-contexts: The numbers of levels of depth shown -- this is, how far away from a foci can a node or edge be and still be displayed -- is a parameter to the visualization. A somewhat more general technique is the graphical fisheye approach presented in <ref> [SaBr94] </ref> which involves varying the size of a node and length of an edge as a function of its distance to the foci. This allows more nodes to be presented in the same area. The advantage of this method is one of scalibility on the size of the log.
Reference: [Sun91] <author> Sun Microsystems, Inc., Installing, </author> <title> Administering, and Using the Basic Security Module, </title> <month> December </month> <year> 1991. </year>
Reference-contexts: These filtering techniques, which are sometimes performed at the logging level such as SUN BSMs auditreduce tool and audit configuration options <ref> [Sun91] </ref>, can remove a fraction of the records in the log and can aid audit analysis and audit visualizations by doing so. A more sophisticated technique is the reduction of audit logs through signature recognition.
Reference: [Wee95a] <author> Christopher Wee, LAFS: </author> <title> A Logging and Auditing File System, </title> <booktitle> Submitted to Eleventh Annual Computer Security Applications Conference, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Visualization of other audit log formats can be looked at including similar system-level logging mechanisms, application-level audit trails, and per-object audit logs such as those found in the Logging and Auditing File System (LAFS) <ref> [Wee95a] </ref>.
Reference: [Wee95b] <author> Christopher Wee, </author> <type> Ph.D. Thesis (in progress), </type> <institution> University of California, Davis, </institution> <year> 1995. </year>
Reference-contexts: An example of this is protocol-based audit reductions, studied by Chris Wee <ref> [Wee95b] </ref>. Patterns can even involve meta-events, and this type of technique might appear, on the surface, to be scalable, thereby reducing the number events and the size of the log significantly. If signatures and other closed-form expressions of audit reductions were always available, this might indeed be the case.
Reference: [Weis81] <author> Mark Weiser, </author> <title> Program Slicing, </title> <booktitle> CH1627-9/ 81/0000/0439, IEEE, </booktitle> <year> 1981. </year>
Reference-contexts: The ordering of events is not always clear. Take, for instance, the well-known occurrence of out-of-order recording of events that BSM logs [Wetm93]. 2.4 Slicing The slicing audit visualization technique is similar to the program slicing debugging technique, described in <ref> [Weis81] </ref> and [AgHo90], which extracts a minimum set of program statements that affect a certain variable.
Reference: [Wetm93] <author> Brad Wetmore, </author> <title> Paradigms for the Reduction of Audit Trails, </title> <type> Masters Thesis, </type> <institution> University of California, Davis, </institution> <year> 1993. </year>
Reference-contexts: Or at least in an order close to the order the occurred in. The ordering of events is not always clear. Take, for instance, the well-known occurrence of out-of-order recording of events that BSM logs <ref> [Wetm93] </ref>. 2.4 Slicing The slicing audit visualization technique is similar to the program slicing debugging technique, described in [Weis81] and [AgHo90], which extracts a minimum set of program statements that affect a certain variable. This technique is mentioned in [Wetm93] and is the presentation of the associations and objects closely associated <p> the well-known occurrence of out-of-order recording of events that BSM logs <ref> [Wetm93] </ref>. 2.4 Slicing The slicing audit visualization technique is similar to the program slicing debugging technique, described in [Weis81] and [AgHo90], which extracts a minimum set of program statements that affect a certain variable. This technique is mentioned in [Wetm93] and is the presentation of the associations and objects closely associated with designated key objects and events and not the associations and objects that are not as closely associated. <p> Computer-Watch takes AT&T MLS audit logs and puts the records into database format in several files; the files are statically orga nized such that by the data items that are most frequently accessed together are put in the same file <ref> [Wetm93] </ref>. 7.0 A Comparison of Browsing Methods It is fairly easy to obtain information that is directly recorded in an audit record using the textual audit browsing method.
References-found: 14

