URL: http://seclab.cs.ucdavis.edu/cidf/papers/jcs-draft/cidf-paper.ps
Refering-URL: http://seclab.cs.ucdavis.edu/cidf/
Root-URL: http://www.cs.ucdavis.edu
Email: c.kahn@opengroup.org porras@csl.sri.com stanifor@cs.ucdavis.edu brian@isi.edu  
Title: A Common Intrusion Detection Framework  
Author: Clifford Kahn Phillip A. Porras Stuart Staniford-Chen Brian Tung 
Note: Draft submission to a nice publication 0 of 17  
Date: 15 July 1998  
Affiliation: The Open Group SRI UC Davis  
Pubnum: ISI  
Abstract: As intrusions and other attacks become more widespread and more sophisticated, it becomes beyond the scope of any one intrusion detection and response (ID&R) system to deal with them. The need thus arises for systems to cooperate with one another, to manage diverse attacks across networks and time. Heretofore, efforts toward "cooperation" have focused primarily on homogeneous components, with little if any attention toward standardization. In this paper, we discuss the efforts of the Common Intrusion Detection Framework (CIDF) working group in designing a framework in which ID&R systems may cooperate with one another. We consider the issues involved in standardizing formats, protocols, and architectures to co-manage intrusion detection and response systems, and compare the strengths and weaknesses of previous approaches. We examine various ways that these systems and their components may be connected and related. We conclude with an overview of CIDF's current approach to providing a common intrusion specification language. fl The work presented in this paper is currently funded by a lot of nice people. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bishop. </author> <title> A standard audit trail format. </title> <booktitle> In Proceedings of the 18th National Information Systems Security Conference, Baltimore, </booktitle> <pages> pages 136-145, </pages> <year> 1995. </year>
Reference-contexts: Such a notation would be particularly interesting to the intrusion detection community in that, if widely adopted, it could greatly reduce the cost of integrating new intrusion detection tools. Some example work in this area includes Standard Audit Trail Format: Bishop proposed a standard audit trail format in 1995 <ref> [1] </ref>. Each record represents a single event, and consists of a variable number of name-value pairs that define attributes of the event represented by the record. The format defines syntactic separators for the fields and records, and appropriate escaping mechanisms for when separators must be used within fields.
Reference: [2] <author> M. Crosbie and E.H. Spafford. </author> <title> Active defense of a computer system using autonomous agents. </title> <type> Technical report, </type> <institution> Department of Computer Sciences, CSD-TR-95-008, Purdue University, West Lafayette IN, </institution> <year> 1995. </year>
Reference-contexts: a nice publication 7 of 17 cooperatively in a recursive hierarchy that correlates analysis results at higher layers of abstraction (i.e., from the analysis of individual components and services, to domain-wide analyses, and then to enterprise-layer analyses. * Purdue University proposed the development of an Autonomous Agent intrusion detection framework <ref> [2] </ref>. Agents may be spread throughout a system to operate independently.
Reference: [3] <author> Boeing Defense and Space Group. </author> <title> Protocol definition. intruder detection and isolation protocol concept. Boeing Document Number D658-10732-1, </title> <type> 199X. </type>
Reference-contexts: If A 2 reports that it also sees the attack, then J considers the report verified and endorses it. 2.4.1 Example There are frameworks in which many hosts cooperate to diagnose and respond to attacks. One such framework is the trace-and-suppress system (such as IDIP <ref> [3] </ref>). A trace-and-suppress system traces an Draft submission to a nice publication 4 of 17 attack toward its source. The attack must involve a series of packets, not just one or two. The trace--and-suppress approach has been successful against flooding attacks, password-guessing attacks, and the like.
Reference: [4] <author> D. Frinke, T. Johnson, J. Marconi, and D. Polla. </author> <title> Towards a distributed architecture for cooperative intrusion detection. </title> <publisher> Pending, 199X. </publisher>
Reference-contexts: Some example work includes * Frinke, et.al., proposed a language for specifying and modeling interactions between peer intrusion detection monitors, and attempted to enumerate the principles and requirements for interoperation among peer intrusion detection components <ref> [4] </ref>. A prototype implementing some of these concepts, HummingBird, has also been developed. * The EMERALD project proposed a building-block approach where monitors are deployed as services throughout a network [12].
Reference: [5] <author> GAO. </author> <title> Information security: </title> <institution> Computer attacks at department of defense pose increasing risks. GAO Report Number AIMD-96-84, </institution> <year> 1996. </year>
Reference-contexts: A 2 may do a signature-based analysis, reporting an attack when it observes a known attack pattern. 2.3.1 Example A 1 is a detector that looks at network traffic and generates reports about suspicious usage. (NSM [8], NID [11], and ASIM <ref> [5] </ref> are examples of such detectors.) Unfortunately, A is inaccurate and often produces reports on uninteresting connections. A 2 is a host-based detector that monitors accounting and audit data and tries to report whenever someone gains root privileges on a host (either legitimately or not).
Reference: [6] <author> The Open Group. </author> <title> Distributed Audit Service Preliminary Specification (Company Review Version. The Open Group, </title> <publisher> Apex Plaza, </publisher> <address> Forbury Road, Reading, Berkshire, RG1 1AX, UK, </address> <year> 1997. </year>
Reference-contexts: Price provides very long lists of all the various attributes which it is desirable for an IDS to be able to deduce from any particular audit record. X/Open Distributed Audit System (XDAS) The Open Group has published a preliminary standard for XDAS <ref> [6] </ref>, intended to become part of the X/Open suite of standards. XDAS provides formats and APIs for auditing of events which are relevant at a global distributed system level.
Reference: [7] <author> The Open Group. </author> <title> Systems Management: Event Management Service Preliminary Specification. The Open Group, </title> <publisher> Apex Plaza, </publisher> <address> Forbury Road, Reading, Berkshire, RG1 1AX, UK, </address> <year> 1997. </year>
Reference-contexts: There is no flexibility as to which fields may appear|all must. So this format is space expensive, but the semantics of all the fields is fairly well defined. X/OPEN Event Managment Systems (XEMS) The Open Group also published a specification for Event Management Systems (XEMS) <ref> [7] </ref>. Whereas XDAS is targeted at storing audit-trails for after-the-fact analysis of security-relevant events, XEMS is targetted for real time notification of any system events (not just those of security relevance). XEMS provides a set of APIs for event producers and consumers to connect to the service.
Reference: [8] <author> L. T. Heberlein, K. N. Levitt, and B. Mukherjee. </author> <title> A method to detect intrusive activity in a networked environment. </title> <booktitle> In Proceedings of the 14th National Computer Security Conference, </booktitle> <pages> pages 362-371, </pages> <address> Washington, D.C., </address> <year> 1991. </year>
Reference-contexts: A 2 may do a signature-based analysis, reporting an attack when it observes a known attack pattern. 2.3.1 Example A 1 is a detector that looks at network traffic and generates reports about suspicious usage. (NSM <ref> [8] </ref>, NID [11], and ASIM [5] are examples of such detectors.) Unfortunately, A is inaccurate and often produces reports on uninteresting connections. A 2 is a host-based detector that monitors accounting and audit data and tries to report whenever someone gains root privileges on a host (either legitimately or not).
Reference: [9] <author> Todd Heberlein. </author> <title> Non-cooperative Service Recognition. </title> <note> http://www.hokie.bs1.prc.com/ia/bbheberl/tsld020.htm, 1997. </note>
Reference-contexts: Or B may be an anomaly-based detector, trying to decide whether the weight of reports from A is sufficient to deserve attention, thus filtering out false alarms from A. 2.1.1 Example For example, A might be Heberlein's Non-cooperative Service Recognition (NCSR) <ref> [9] </ref>, and B might be an anomaly detector, such as NIDES [10]. A atempts to evaluate the behavior of network service connections against it empirical understanding of how client sessions on these network services typical behave.
Reference: [10] <author> H.S. Javitz and A. Valdes. </author> <title> The sri ides statistical anomaly detetor. </title> <booktitle> In IEEE Symposium on Research in Security and Privacy, </booktitle> <year> 1991. </year>
Reference-contexts: may be an anomaly-based detector, trying to decide whether the weight of reports from A is sufficient to deserve attention, thus filtering out false alarms from A. 2.1.1 Example For example, A might be Heberlein's Non-cooperative Service Recognition (NCSR) [9], and B might be an anomaly detector, such as NIDES <ref> [10] </ref>. A atempts to evaluate the behavior of network service connections against it empirical understanding of how client sessions on these network services typical behave.
Reference: [11] <institution> Lawrence Livermore National Laboratory. Network Intrusion Detector. </institution> <note> http://ciac.llnl.gov/cstc/nid/, 1998. </note>
Reference-contexts: A 2 may do a signature-based analysis, reporting an attack when it observes a known attack pattern. 2.3.1 Example A 1 is a detector that looks at network traffic and generates reports about suspicious usage. (NSM [8], NID <ref> [11] </ref>, and ASIM [5] are examples of such detectors.) Unfortunately, A is inaccurate and often produces reports on uninteresting connections. A 2 is a host-based detector that monitors accounting and audit data and tries to report whenever someone gains root privileges on a host (either legitimately or not).
Reference: [12] <author> P.A. Porras and P.G. Neumann. </author> <title> Emerald: Event monitoring enabling responses to anomalous live disturbances. </title> <booktitle> In National Information Systems Security Conference, </booktitle> <pages> pages 353-365, </pages> <address> Baltimore, MD, </address> <month> October </month> <year> 1997. </year>
Reference-contexts: A prototype implementing some of these concepts, HummingBird, has also been developed. * The EMERALD project proposed a building-block approach where monitors are deployed as services throughout a network <ref> [12] </ref>.
Reference: [13] <author> K. Price. </author> <title> Host based misuse detection and conventional operating systems' audit data collection. </title> <type> Master's thesis, </type> <institution> Purdue University, </institution> <year> 1997. </year>
Reference-contexts: Defining the meaning of the fields would be an essential prerequisite for semantic interoperability. Draft submission to a nice publication 6 of 17 Intrusion Detection Input Requirements Price performed a helpful survey in 1997 <ref> [13] </ref>, which ana-lyzed the audit data needs of five different intrusion detection systems built by the research community (NIDES, DIDS, NADIR, IDIOT, and STAT/USTAT).
Reference: [14] <author> Ronald Rivest. S-expressions. </author> <title> Internet Draft draft-rivest-sexp-00.txt, </title> <year> 1997. </year>
Reference-contexts: This is the most practical requirement. If the language is too difficult to implement, then it will simply not be used. 4.3 The Proposed Approach In this section, we will describe, in general terms, our proposed approach. We will begin with a general language construct, called S-expressions <ref> [14] </ref>. S-expressions are simply recursive groupings of tags and data; typically, the grouping is done with parentheses, as in Lisp. Here is an simple S-expression: (HostName 'ten.ada.net') This S-expression simply groups two terms, HostName and 'ten.ada.net'. It does not, on its own, provide any semantic interpretation of this pairing.
Reference: [15] <author> G.B. White, E.A. Fisch, and U.W. Pooch. </author> <title> Cooperating security managers: A peer-based intrusion detection system. </title> <address> pages 20-23, </address> <month> February </month> <year> 1996. </year> <note> Draft submission to a nice publication 17 of 17 </note>
Reference-contexts: addition, highly suspicious activity may cause an agent to RAISE the alert (i.e., broadcast the anomaly to other agents). * White, Fisch, and Pooch proposed the development of a cooperating security management system for peer-based intrusion detection, which attempts to facilitate the cooperative operation of independent network intrusion monitoring tools <ref> [15] </ref>. Their project involved the integration of a network intrusion detection monitoring tool with a local security manager component, collectively referred to as Cooperative Security Managers (CSMs).
References-found: 15

