URL: http://www.cs.cmu.edu/afs/cs/project/art-6/www/dare98.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs/user/kjuvva/www/publications.html
Root-URL: 
Email: fkjuvva, raj+g@cs.cmu.edu  
Title: A Middleware Service for Real-Time Push-Pull Communications  
Author: Kanaka Juvva and Raj Rajkumar 
Keyword: Push communications, Pull communications, Proxy, Scaling, Middleware service, QoS  
Address: Pittsburgh PA 15213  
Affiliation: Real-Time and Multimedia Laboratory Carnegie Mellon University  
Abstract: Current and emerging real-time and multimedia applications like multi-party collaboration, internet telephony and distributed command control systems require the exchange of information over distributed and heterogeneous nodes. Multiple data types including voice, video, sensor data, real-time intelligence data and text are being transported widely across today's information, control and surveillance networks. All such applications can benefit enormously from middleware, operating system and networking services that can support QoS guarantees, high availability, dynamic reconfigurability and scalability. In this paper, we propose a middleware layer called a "Real-Time Push-Pull Communications Service" to easily and quickly disseminate information across heterogeneous nodes with an underlying architecture to satisfy the above-mentioned requirements. Push-Pull Communications is an extension of the real-time publisher/subscriber model [4], and represents both "push" (data transfer initiated by a sender) and "pull" (data transfer initiated by a receiver) communications. Nodes with widely differing processing power and networking bandwidth can coordinate and co-exist by the provision of appropriate and automatic support for transformation on data and supports scaling. Different information sources and sinks can operate at different frequencies and also can choose another (intermedi-ate) node to act as their proxy and and deliver data at the desired frequency. This service has been implemented on RT-Mach, a resource-centric kernel using resource kernel primitives [7]. This paper presents an overview of the design, implementation and preliminary performance evaluation of the model. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ken Birman, Roy Friedman, </author> <booktitle> Mark Hayden and Injong Rhee,"Middleware Support for Distributed Multimedia and Col laborative Computing",SPIE International conference on Multimedia computing and Networking,'98,Sanjose,USA </booktitle>
Reference: [2] <author> Robert van Renesse,,Ken Birman, </author> <title> Thorsten von Eicken and Keith Marzullo ,"New Applications for Group Computing", </title> <booktitle> In Theory and Practice of Distributed Systems, Lecture Notes in computer science,vol.938. </booktitle>
Reference: [3] <author> G. Robert Malan, Farnam Jahanian, and Sushila Subramanian ,"Salamander: </author> <title> A Push-based Distribution Substrate for Internet Applications", </title> <booktitle> Proceedings of the USENIX Symposium on Internet Technologies and Systems, </booktitle> <address> December 1997; Monterey, California. </address> <month> 12 </month>
Reference-contexts: Similar services have been provided in the past and others are currently being developed. For example, our current model builds and extends the real-time publisher-subscriber model of [4]. 'Maestro' [1,2] is a support tool for distributed multimedia and collaborative computing applications. 'Salamander' <ref> [3] </ref> is a push-based distribution substrate for internet applications can be useful in addressing these issues. Real-time CORBA services and real-time Object Request Brokers [8,11-14], also address some aspects.
Reference: [4] <author> Raj Rajkumar, </author> <title> Mike Gagliardi and Lui Sha "The Real-Time Publisher/Subscriber Inter-Process Communication Model for Distributed Real-Time Systems: </title> <booktitle> Design and Implementation" , In Proceedings of the IEEE Real-time Technology and Applications Symposium , June 1995. </booktitle>
Reference-contexts: Similar services have been provided in the past and others are currently being developed. For example, our current model builds and extends the real-time publisher-subscriber model of <ref> [4] </ref>. 'Maestro' [1,2] is a support tool for distributed multimedia and collaborative computing applications. 'Salamander' [3] is a push-based distribution substrate for internet applications can be useful in addressing these issues. Real-time CORBA services and real-time Object Request Brokers [8,11-14], also address some aspects. <p> This section summarizes the real-time publisher/subscriber model and describes the push-pull extensions to the model. 2.1 The Real-Time Publisher/Subscriber Model The push-pull communication model is based on the Real-Time Publisher/Subscriber Communications model <ref> [4] </ref> for communication between information producers (publishers), information consumers (subscribers). A consumer can consume information from multiple sources, while a producer can produce information for multiple consumers. A producer can also be a consumer and vice-versa.
Reference: [5] <author> Mike Gagliardi, </author> <title> Raj Rajkumar and Lui Sha , "Designing for Evolvability: </title> <booktitle> "Building Blocks for Evolvable Real-Time Systems" In Proceedings of the IEEE Real-time Technology and Applications Symposium ,June 1996 </booktitle>
Reference: [6] <editor> Raj Rajkumar and Mike Gagliardi , "High Availability in The Real-Time Publisher/Subscriber Inter-Process Communi cation Model", </editor> <booktitle> In Proceedings of the IEEE Real-Time Systems Symposium ,December 1996 </booktitle>
Reference: [7] <author> Raj Rajkumar,Kanaka Juvva,Anastasio Molano and Shui Oikawa, </author> <title> "Resource Kernels: </title> <booktitle> A Resource Centric Approach to Real-Time Systems",In Proceedings of the SPIE/ACM Conference on Multimedia Computing and Networking,January 1998. </booktitle>
Reference-contexts: As an example, increasing the frame rate of a video chat group should ideally not adversely affect the worst-case end-to-end delays of a surveillance application. The scheduling/dispatching layers should use primitives which support enforcement when possible. For instance, a reservation-based scheduling scheme <ref> [7] </ref> provides temporal protection and guaranteed timeliness, while priority-based schemes can provide predictable timeliness under worst-case assumptions that do not enforce protection. 2 The Push-Pull Communication Model The push-pull communication model is an extension of the real-time publisher/subscriber model (Figure 2). <p> messages carry a sequence number and the sequence number is used to pull a specific message. 2 Our current implementation supports a circular buffer which stores a fixed number of most recent samples published. 9 3 Implementation The real-time push-pull model has been implemented on RT-Mach, resource kernel version RK97 <ref> [7] </ref> using the resource kernel primitives of real-time scheduling and reservations which also bound priority inversion. RK97a is the recent release of resource kernel and supports extended CPU reservations, disk reservations, very high resolution timers, full duplex audio support, real-time video support, fault-tolerant timeline scheduling, and wireless roaming support.
Reference: [8] <author> Douglas C. Schmidt,Daid L. Levine, and Sumedh Mungee," </author> <title> The Design of the TAO Real-Time Object Request Broker",, </title> <note> In Computer Communications Journal,Summer 1997 </note>
Reference: [9] <author> Anastasio Molano,Kanaka Juvva and Raj Rajkumar," </author> <title> Real-Time Filesystems:Guaranteeing Timing Constraints for Disk Accesses in RT-Mach",In Proceedings of the IEEE Real-Time Systems Symposium,December,1997 </title>
Reference: [10] <institution> Anastasio Molano,Raj Rajkumar,Kanaka Juvva,"Dynamic Disk Bandwidth Management and Metadata Pre-fetching in a Reserved Real-Time Filesystem",In Proceedings of 10th Euromicro Real-Time Workshop. </institution>
Reference: [11] <author> V.Fay-Wolfe, L.C.DiPippo, R.Ginis, M.Squadrito, S. Wohlever, I. Zykh, and R. Johnston," </author> <title> Real-Time CORBA,", </title> <booktitle> in Proceedings of the Third IEEE Real-TIme Technology and Applications Symposium,(Montreal Canada),June 1997. </booktitle>
Reference: [12] <author> J.A.Zinky,D.E.Bakken, and R. Schantz, </author> <title> "Architectural Support for Quality of Service for CORBA Objetcs",Theory and Practice of Object Systems,vol. </title> <publisher> 3,no. 1,1997 </publisher>
Reference: [13] <author> W.Feng, U.Syyid, </author> <title> and J.-S.Liu,"Providing for an Open, </title> <booktitle> Real-Time CORBA",in Proceedings of the Workshop on Middle ware for Real-Time Systems and Services,(San Francisco,CA),IEEE,December 1997. </booktitle>
Reference: [14] <author> David Curtis,"Java, </author> <note> RMI and CORBA",white paper. |oOo| </note>
References-found: 14

