URL: http://www.cs.ucl.ac.uk/staff/F.Risso/pubblicazioni/jpt98.ps.gz
Refering-URL: http://www.cs.ucl.ac.uk/staff/F.Risso/pubblicazioni/index.html
Root-URL: http://www.cs.ucl.ac.uk
Email: fmbaldi,rissog@polito.it  picco@cs.wustl.edu  
Phone: Phone: +39 11 564 7067 Fax: +39 11 564 7099  (2)  Phone: +1 314 935 7536 Fax: +1 314 935 7302  
Title: Designing a Videoconference System for Active Networks  
Author: Mario Baldi Gian Pietro Picco ; and Fulvio Risso 
Address: C.so Duca degli Abruzzi 24, 10129 Torino, Italy  Campus Box 1045, One Brookings Drive, St. Louis, MO 63130-4899, USA  
Affiliation: (1) Dip. Automatica e Informatica, Politecnico di Torino  Dept. of Computer Science, Washington University  
Abstract: Active networks are receiving increasing attention due to their promises of great flexibility in tailoring services to applications. This capability stems from the exploitation of network devices whose behavior can be changed dynamically by applications, possibly using technologies and architectures originally conceived for mobile code systems. Notwithstanding the promises of active networks, real-world applications that clearly benefit by them are still missing. In this work we describe the design of a videoconference system conceived expressly for operation over active networks. The goal of this activity is to pinpoint the benefits that mobile code and active networks bring in this application domain and to provide insights for the exploitation of these concepts in other application domains. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> The MBone Information Web. </institution> <note> Web page http://www.mbone.com. </note>
Reference-contexts: An evident advantage of this first approach is its good scalability. However, conference management is complicated by the characteristics of the architecture, especially as far as security is concerned. A relevant example of this category is the tool suite for MBone, the Multicast Backbone <ref> [1] </ref>. The alternative, popular especially among commercial systems, employs a centralized architecture based on a conference server which receives the conference streams from the clients operated by the participants and replicates such streams back to all the clients connected.
Reference: 2. <author> M. </author> <title> Baldi and G.P. Picco. Evaluating the Tradeoffs of Mobile Code Design Paradigms in Network Management Applications. </title> <booktitle> In Proc. of the 20 th Int. Conf. on Software Engineering, </booktitle> <pages> pages 146-155, </pages> <month> April </month> <year> 1998. </year>
Reference-contexts: Active networks and, more generally, code mobility are promising ideas. Nevertheless, despite the great deal of interest and effort in these research areas, contributions that characterize precisely and possibly quantitatively the advantages of the approach are only beginning to appear <ref> [11, 2] </ref>, while applications that demonstrate these advantages in real-world domains are still largely missing. The goal of the research described in this paper is to assess the benefits brought by code mobility in the context of active networks. <p> Finally, we are in the process of analyzing quantitatively the benefits and the tradeoffs of our design, along the lines of <ref> [2] </ref>. This encompasses the definition of an analytical model for comparing the performance (e.g., in terms of traffic or latency) of our architecture with respect to conventional solutions, as well as the validation of such a model through direct measurements on the actual implementation.
Reference: 3. <author> S. Bhattacharjee, K. Calvert, and E. Zegura. </author> <title> On Active Networking and Congestion. </title> <type> Technical Report GIT-CC-96/02, </type> <institution> Georgia Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: The quality of service for the encoded videoconference stream can be changed dynamically to fit user needs. The desired policy can be arbitrarily complex and can be changed at run-time. For instance, it is possible to specify application-dependent criteria to discard packets in presence of congestion, as suggested in <ref> [3] </ref>. The videoconference flows coming to a client from different participants can be treated differently. For example, a participant can request the reflector to give higher priority or to guarantee a higher quality of service to some flows, and carry the others with a lower quality.
Reference: 4. <institution> Cornell University. CU-SeeMe. </institution> <note> Web page http://cu-seeme.cornell.edu. </note>
Reference-contexts: A centralized approach is affected by the usual drawbacks in terms of scalability and fault-tolerance. An example of centralized system is CuSeeMe <ref> [4] </ref>, while the H.323 standard [8] defines an architecture that accommodates both categories. Neither of the two solutions described seems suitable for the large scale scenarios that are being envisioned for the Internet. Let us consider for instance the broadcasting of a sport event.
Reference: 5. <author> A. Fuggetta, G.P. Picco, and G. Vigna. </author> <title> Understanding Code Mobility. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 24(5) </volume> <pages> 342-361, </pages> <month> May </month> <year> 1998. </year>
Reference-contexts: The rationale for code mobility is to reduce network traffic and increase flexibility and customizability by bringing close to the resources the knowledge embedded in the code <ref> [5] </ref>. This powerful concept is being popularized by a new generation of programming languages and systems that provide abstractions and mechanisms geared towards the task of relocating code. <p> In the first solution, the reflector responds by relocating itself in a position of the network that is optimal with respect to some cost function, e.g., distance from the clients. According to the classification presented in <ref> [5] </ref>, the reflector relies on a weak form of mobility where its execution state is not preserved across migration: only its code and a portion of its data state are transferred. This solution is suitable for conferences characterized by a limited number of participants or by heavily clustered participants.
Reference: 6. <author> J. Hartman et al. </author> <title> Liquid Software: A New Paradigm for Networked Systems. </title> <type> Technical Report 96-11, </type> <institution> Univ. of Arizona, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Researchers presently interpret the idea of active network at least with two different nuances. The first, broader interpretation of the term is that the distinction between network nodes and end-systems becomes blurred in terms of functional characteristics. This approach is embodied for example in the work described in <ref> [6] </ref> and [19]. In this setting, network devices, e.g., routers, can execute mobile code implementing a distributed application which can benefit by direct access to functionality and information at lower layers in the network stack.
Reference: 7. <author> M. Hicks et al. </author> <title> PLAN: A Programming Language for Active Networks. </title> <type> Technical report, </type> <institution> Univ. of Pennsylvania, </institution> <month> November </month> <year> 1997. </year>
Reference-contexts: A packet augmented in this way, also called capsule [16], is reminiscent of what the mobile code community calls a mobile agent|an autonomous unit of mobility containing code and state. Toolkits are being developed <ref> [17, 7] </ref> to support the creation and deployment of capsules. Active networks and, more generally, code mobility are promising ideas.
Reference: 8. <author> ITU-T Recommendation H.323. </author> <title> Visual telephone systems and equipment for local area networks which provide a non-guaranteed quality of service, </title> <month> November </month> <year> 1996. </year>
Reference-contexts: A centralized approach is affected by the usual drawbacks in terms of scalability and fault-tolerance. An example of centralized system is CuSeeMe [4], while the H.323 standard <ref> [8] </ref> defines an architecture that accommodates both categories. Neither of the two solutions described seems suitable for the large scale scenarios that are being envisioned for the Internet. Let us consider for instance the broadcasting of a sport event.
Reference: 9. <author> M.A. Millet Sorolla. Realizzazione di un'applicazione su rete attiva. </author> <type> Master's thesis, </type> <institution> Politecnico di Torino, Italy, </institution> <month> February </month> <year> 1998. </year> <note> In Italian. </note>
Reference-contexts: We specified the design of our prototype using the OMT [12] object-oriented notation. The full OMT design is available in <ref> [9] </ref>. 3.1 The Reflector The reflector is composed of five classes, depicted in Fig. 2. Receiver, Buffer, and Dispatcher provide the "work power" of the reflector and deal with receiving and transmitting the data packets that constitute the conference streams.
Reference: 10. <author> G.P. Picco. </author> <title> Code: A Lightweight and Flexible Mobile Code Toolkit. </title> <booktitle> In Proc. of the 2 nd Int. Workshop on Mobile Agents (MA'98), </booktitle> <month> September </month> <year> 1998. </year>
Reference-contexts: The support for code mobility is provided by the Code toolkit developed in parallel by one of the authors <ref> [10] </ref>, which provides a flexible mobile code infrastructure with limited overhead. The implementation of the client relies on the public domain tools vic and vat to generate respectively the video and audio streams.
Reference: 11. <author> M. Ranganathan, A. Acharya, S. Sharma, and J. Saltz. </author> <title> Network-Aware Mobile Programs. </title> <booktitle> In Proc. of the USENIX 1997 Annual Technical Conf., </booktitle> <month> January </month> <year> 1997. </year>
Reference-contexts: Active networks and, more generally, code mobility are promising ideas. Nevertheless, despite the great deal of interest and effort in these research areas, contributions that characterize precisely and possibly quantitatively the advantages of the approach are only beginning to appear <ref> [11, 2] </ref>, while applications that demonstrate these advantages in real-world domains are still largely missing. The goal of the research described in this paper is to assess the benefits brought by code mobility in the context of active networks. <p> The proposed architecture provides improved scalability and allows clients to customize the server's behavior by exploiting mobile code. Our work is inspired by the work described in <ref> [11] </ref>, which describes the implementation of a chat server that migrates to adapt to the position of the participants. In that work, the focus is on the optimization achieved by network-aware positioning of the server with respect to a traditional fixed displacement.
Reference: 12. <author> J. Rumbaugh et al. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: We specified the design of our prototype using the OMT <ref> [12] </ref> object-oriented notation. The full OMT design is available in [9]. 3.1 The Reflector The reflector is composed of five classes, depicted in Fig. 2. Receiver, Buffer, and Dispatcher provide the "work power" of the reflector and deal with receiving and transmitting the data packets that constitute the conference streams.
Reference: 13. <author> H. Schulzrinne, S. Casner, R. Frederick, and V. Jacobson. RTP: </author> <title> A Transport Protocol for Real-Time Applications. </title> <type> RFC 1889, </type> <month> January </month> <year> 1996. </year>
Reference-contexts: These topics represent an interesting and broad area for future studies. Another open issue is a better integration of the Real-time Transport Protocol (RTP) <ref> [13] </ref> in our prototype. RTP is presently the protocol for multimedia transport most widely used on the Internet, and is engineered for conferences whose attendance ranges from a few clients up to 10,000; more clients cannot be managed due to implosion of control messages.
Reference: 14. <author> Sun Microsystems. </author> <title> The Java Language: An Overview. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <year> 1994. </year>
Reference-contexts: At the time of writing, network devices equipped with a run-time support for execution of mobile code are not widely available. However, many vendors have already announced new releases of their products that feature hardware or software support for the Java language <ref> [14] </ref>. In the implementation of our prototype we cope with this problem, characteristic of the whole research area, by adopting the approach followed by many researchers: we simulate an active device by running the mobile code on a workstation directly connected to a network device. Fig. 1. Cloning reflectors.
Reference: 15. <author> Sun Microsystems. </author> <title> Java Media Framework, </title> <month> January </month> <year> 1997. </year> <note> Available at http://java.sun.com/products/java-media/jmf. </note>
Reference-contexts: The implementation of the client relies on the public domain tools vic and vat to generate respectively the video and audio streams. The streams playback is performed by an application developed using the specialized API of the Java Media Framework (JMF) <ref> [15] </ref>. In addition, a console written in Java allows the user to communicate with the reflector and manipulate the parameters of the session.
Reference: 16. <author> D. Tennenhouse et al. </author> <title> A Survey of Active Network Research. </title> <journal> IEEE Communications, </journal> <volume> 35(1) </volume> <pages> 80-86, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: In this setting, network devices, e.g., routers, can execute mobile code implementing a distributed application which can benefit by direct access to functionality and information at lower layers in the network stack. This programmable switch approach <ref> [16] </ref> does not affect the way current lower and mid layer protocols are designed and deployed. <p> Protocol deployment is then performed on demand, without requiring software preinstallation and upgrade, and yet is under the control of the applications. A packet augmented in this way, also called capsule <ref> [16] </ref>, is reminiscent of what the mobile code community calls a mobile agent|an autonomous unit of mobility containing code and state. Toolkits are being developed [17, 7] to support the creation and deployment of capsules. Active networks and, more generally, code mobility are promising ideas.
Reference: 17. <author> D. Wetherall, J. Guttag, and D. Tennenhouse. </author> <title> ANTS: A Toolkit for Building an Dynamically Deploying Network Protocols. </title> <booktitle> In Proc. of IEEE Open Architectures and Network Programming (OPENARCH'98), </booktitle> <pages> pages 117-129, </pages> <month> April </month> <year> 1998. </year>
Reference-contexts: A packet augmented in this way, also called capsule [16], is reminiscent of what the mobile code community calls a mobile agent|an autonomous unit of mobility containing code and state. Toolkits are being developed <ref> [17, 7] </ref> to support the creation and deployment of capsules. Active networks and, more generally, code mobility are promising ideas.
Reference: 18. <author> R. Wittmann and M. Zitterbart. </author> <title> Active multicasting for heterogeneous groups. </title> <booktitle> In 4 th IFIP Int. Conf. on Broadband Communications '98, </booktitle> <month> April </month> <year> 1998. </year>
Reference-contexts: The variant of our architecture that encompasses cloning the reflector is also similar to Active Multicasting <ref> [18] </ref>. Active multicast nodes process packets belonging to video streams based on the knowledge about the video encoding deployed. Application specific "Quality of Service (QoS) filters" enable intelligent degradation of the quality of the stream perceived by low end receivers.
Reference: 19. <author> Y. Yemini and S. da Silva. </author> <title> Towards Programmable Networks. </title> <booktitle> In IFIP/IEEE Int. Workshop on Distributed Systems: Operations and Management, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: The first, broader interpretation of the term is that the distinction between network nodes and end-systems becomes blurred in terms of functional characteristics. This approach is embodied for example in the work described in [6] and <ref> [19] </ref>. In this setting, network devices, e.g., routers, can execute mobile code implementing a distributed application which can benefit by direct access to functionality and information at lower layers in the network stack.
References-found: 19

