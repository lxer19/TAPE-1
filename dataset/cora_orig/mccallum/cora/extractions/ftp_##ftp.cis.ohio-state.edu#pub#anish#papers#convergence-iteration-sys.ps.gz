URL: ftp://ftp.cis.ohio-state.edu/pub/anish/papers/convergence-iteration-sys.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~anish/pub.html
Root-URL: 
Title: Convergence of Iteration Systems  
Author: Anish ARORA ; Paul ATTIE ; Michael EVANGELIST Mohamed GOUDA ; 
Affiliation: 1. Microelectronics and Computer Technology Corporation, Austin 2. Department of Computer Sciences, The University of Texas at Austin  
Abstract: An iteration system is a set of assignment statements whose computation proceeds in steps: at each step, an arbitrary subset of the statements is executed in parallel. The set of statements thus executed may differ at each step; however, it is required that each statement is executed infinitely often along the computation. The convergence of such systems (to a fixed point) is typically verified by showing that the value of a given variant function is decreased by each step that causes a state change. Such a proof requires an exponential number of cases (in the number of assignment statements) to be considered. In this paper, we present alternative methods for verifying the convergence of iteration systems. In most of these methods, upto a linear number of cases need to be considered. 
Abstract-found: 1
Intro-found: 1
Reference: [Arb] <author> M.A. Arbib, </author> <title> Brains, Machines and Mathematics, </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: A property of interest in iteration systems is convergence. This property is useful in studying the self-stabilization of distributed programs (cf. [Dij1], [BGM], [BGW], [Dij] and [GE]), convergence of iterative methods in numerical analysis (cf. [Rob] and [BT]), and self-organization in neural networks (cf. [Koh] and <ref> [Arb] </ref>). Informally, an iteration system is called convergent if on starting in an arbitrary state the system is guaranteed to reach a fixed point; that is, a state in which no update can cause a state change.
Reference: [AAEG] <author> A. Arora, P. Attie, M. Evangelist and M. Gouda, </author> <title> "Convergence of Iteration Systems", </title> <note> submitted for publication in Distributed Computing (Special Issue on Self-Stabilization). </note>
Reference: [BGM] <author> J.E. Burns, M.G. Gouda, and R.E. Miller, </author> <title> "On relaxing interleaving assumptions", Proceedings of the MCC Workshop on Self-Stabilizing Systems, </title> <type> MCC Technical Report #STP-379-89. </type>
Reference-contexts: A property of interest in iteration systems is convergence. This property is useful in studying the self-stabilization of distributed programs (cf. [Dij1], <ref> [BGM] </ref>, [BGW], [Dij] and [GE]), convergence of iterative methods in numerical analysis (cf. [Rob] and [BT]), and self-organization in neural networks (cf. [Koh] and [Arb]). <p> We note that methods for proving convergence to a closed set have been recently shown by Burns, 20 Gouda and Miller <ref> [BGM] </ref>. Their methods employ state dependency relations also, although their definition of the state dependency relation is more complex. One of their main results, paraphrased in our notation, is as follows.
Reference: [BGW] <author> G.M. Brown, M.G. Gouda, and C.-L. Wu, </author> <title> "Token Systems that Self-Stablize", </title> <journal> IEEE Transactions on Computers 38(6), </journal> <pages> pp. 845-852, </pages> <year> 1989. </year>
Reference-contexts: A property of interest in iteration systems is convergence. This property is useful in studying the self-stabilization of distributed programs (cf. [Dij1], [BGM], <ref> [BGW] </ref>, [Dij] and [GE]), convergence of iterative methods in numerical analysis (cf. [Rob] and [BT]), and self-organization in neural networks (cf. [Koh] and [Arb]).
Reference: [BT] <author> D.P. Bertsekas and J.N. Tsitsiklis, </author> <title> Parallel and Distributed Computation, </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: A property of interest in iteration systems is convergence. This property is useful in studying the self-stabilization of distributed programs (cf. [Dij1], [BGM], [BGW], [Dij] and [GE]), convergence of iterative methods in numerical analysis (cf. [Rob] and <ref> [BT] </ref>), and self-organization in neural networks (cf. [Koh] and [Arb]). Informally, an iteration system is called convergent if on starting in an arbitrary state the system is guaranteed to reach a fixed point; that is, a state in which no update can cause a state change.
Reference: [CM] <author> K.M. Chandy and J. Misra, </author> <title> Parallel Program Design: A Foundation, </title> <publisher> Addison-Wesley Publishing, </publisher> <year> 1988. </year>
Reference-contexts: By comparison, traditional semantics admit computations of lesser variety. For example, interleaving requires one enabled event to be executed at each step (see, for instance, the work on CSP [Hoa], UNITY <ref> [CM] </ref> and I/O Automata [Lyn]), whereas maximal parallelism requires that all enabled events are executed at every step (see, for instance, the work on systolic arrays [KL] and cellular automata [Wol]). A property of interest in iteration systems is convergence.
Reference: [Dij] <author> E.W. Dijkstra, </author> <title> EWD306 "The Solution to a Cyclic Relaxation Problem", 1973. Reprinted in Selected Writings on Computing: A Personal Perspective, </title> <publisher> Springer-Verlag, </publisher> <pages> pp. 34-35, </pages> <year> 1982. </year>
Reference-contexts: A property of interest in iteration systems is convergence. This property is useful in studying the self-stabilization of distributed programs (cf. [Dij1], [BGM], [BGW], <ref> [Dij] </ref> and [GE]), convergence of iterative methods in numerical analysis (cf. [Rob] and [BT]), and self-organization in neural networks (cf. [Koh] and [Arb]). <p> Thus, unlike Theorem 1, one cannot establish that this system is convergent by exhibiting one convergent computation. Similar examples have been presented in <ref> [Dij] </ref> and [Rob]. In fact, it is straightforward to show that Theorem 1 cannot be made to apply to any class of iteration systems that properly includes acyclic and self-looping systems.
Reference: [Dij1] <editor> E.W. </editor> <booktitle> Dijkstra,"Self-stabilizing Systems in Spite of Distributed Control", Communications of the ACM 17(11), </booktitle> <pages> pp. 643-644, </pages> <year> 1973. </year> <month> 21 </month>
Reference-contexts: A property of interest in iteration systems is convergence. This property is useful in studying the self-stabilization of distributed programs (cf. <ref> [Dij1] </ref>, [BGM], [BGW], [Dij] and [GE]), convergence of iterative methods in numerical analysis (cf. [Rob] and [BT]), and self-organization in neural networks (cf. [Koh] and [Arb]).
Reference: [Gri] <editor> D.Gries, </editor> <booktitle> The Science of Programming, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: The standard method for verifying that an iteration system is convergent is to exhibit a variant function (cf. <ref> [Gri] </ref>) whose value is bounded from below and is decreased by each step that causes a state change.
Reference: [GE] <author> M.G. Gouda and M. </author> <title> Evangelist, "Convergence Response Tradeoffs in Concurrent Systems", </title> <note> MCC Technical Report #STP-124-89; also submitted to ACM TOPLAS. </note>
Reference-contexts: A property of interest in iteration systems is convergence. This property is useful in studying the self-stabilization of distributed programs (cf. [Dij1], [BGM], [BGW], [Dij] and <ref> [GE] </ref>), convergence of iterative methods in numerical analysis (cf. [Rob] and [BT]), and self-organization in neural networks (cf. [Koh] and [Arb]).
Reference: [GFMR] <author> O. Grumberg, N. Francez, J.A. Makovsky and W.P. deRoever, </author> <title> "A proof rule for fair termination of guarded commands", </title> <booktitle> Information and Control 66, </booktitle> <pages> pp. 83-102, </pages> <year> 1985. </year>
Reference-contexts: When analyzing concurrent systems, convergence can be used to model termination. Since some progress (that is, eventuality) properties of a concurrent system can be reduced to the termi nation of a derived system, our techniques are applicable in verifying progress properties. (See, for example, <ref> [GFMR] </ref> where the eventual enabledness of an action is reduced to termination.) There are several issues to be investigated in extending this work. Firstly, more general sufficiency conditions need to be identified. Secondly, useful generalizations of the notion of convergence need to be considered.
Reference: [Har] <author> F. Harary, </author> <title> Graph Theory, </title> <publisher> Addison-Wesley Publishing, </publisher> <year> 1972. </year>
Reference-contexts: Consider the "condensation" of its dependency graph (i.e., collapse each district into a single node; see <ref> [Har] </ref>). It is straightforward to see that each cycle in the condensation is a self-loop. Assign ranks to the nodes in the condensation using the previous definition of rank. <p> Consider the "subgraph induced by" W , G W , in the dependency graph of (V D ; F D ) (i.e., its maximal subgraph with node set W ; see <ref> [Har] </ref>). Take the condensation of G W . As observed in the proof of Theorem 3, the rank of the variables in W can be consistently computed via the condensation of G W . Let k be the maximum rank thus assigned.
Reference: [Hoa] <author> C.A.R. Hoare, </author> <title> Communicating Sequential Processes, </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1985. </year>
Reference-contexts: By comparison, traditional semantics admit computations of lesser variety. For example, interleaving requires one enabled event to be executed at each step (see, for instance, the work on CSP <ref> [Hoa] </ref>, UNITY [CM] and I/O Automata [Lyn]), whereas maximal parallelism requires that all enabled events are executed at every step (see, for instance, the work on systolic arrays [KL] and cellular automata [Wol]). A property of interest in iteration systems is convergence.
Reference: [Koh] <author> T. Kohonen, </author> <title> Self-Organization and Associative Memory, </title> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: A property of interest in iteration systems is convergence. This property is useful in studying the self-stabilization of distributed programs (cf. [Dij1], [BGM], [BGW], [Dij] and [GE]), convergence of iterative methods in numerical analysis (cf. [Rob] and [BT]), and self-organization in neural networks (cf. <ref> [Koh] </ref> and [Arb]). Informally, an iteration system is called convergent if on starting in an arbitrary state the system is guaranteed to reach a fixed point; that is, a state in which no update can cause a state change.
Reference: [KL] <author> H.T. Kung and C.E. Leiserson, </author> <title> "Systolic Arrays (for VLSI)," in Sparse Matrix Proc., </title> <year> 1978. </year>
Reference-contexts: For example, interleaving requires one enabled event to be executed at each step (see, for instance, the work on CSP [Hoa], UNITY [CM] and I/O Automata [Lyn]), whereas maximal parallelism requires that all enabled events are executed at every step (see, for instance, the work on systolic arrays <ref> [KL] </ref> and cellular automata [Wol]). A property of interest in iteration systems is convergence.
Reference: [Lyn] <author> N.A. Lynch, </author> <title> "I/O Automata: A Model for Discrete Event Systems," </title> <booktitle> Proc. of 22nd Annual Conference on Information Sciences and Systems, </booktitle> <year> 1988. </year>
Reference-contexts: By comparison, traditional semantics admit computations of lesser variety. For example, interleaving requires one enabled event to be executed at each step (see, for instance, the work on CSP [Hoa], UNITY [CM] and I/O Automata <ref> [Lyn] </ref>), whereas maximal parallelism requires that all enabled events are executed at every step (see, for instance, the work on systolic arrays [KL] and cellular automata [Wol]). A property of interest in iteration systems is convergence.
Reference: [Rob] <author> F. Robert, </author> <title> Discrete Iterations A Metric Study, </title> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: A property of interest in iteration systems is convergence. This property is useful in studying the self-stabilization of distributed programs (cf. [Dij1], [BGM], [BGW], [Dij] and [GE]), convergence of iterative methods in numerical analysis (cf. <ref> [Rob] </ref> and [BT]), and self-organization in neural networks (cf. [Koh] and [Arb]). Informally, an iteration system is called convergent if on starting in an arbitrary state the system is guaranteed to reach a fixed point; that is, a state in which no update can cause a state change. <p> Thus, unlike Theorem 1, one cannot establish that this system is convergent by exhibiting one convergent computation. Similar examples have been presented in [Dij] and <ref> [Rob] </ref>. In fact, it is straightforward to show that Theorem 1 cannot be made to apply to any class of iteration systems that properly includes acyclic and self-looping systems.
Reference: [Wol] <author> S. Wolfram, </author> <title> Theory and Applications of Cellular Automata, Advanced Series on Complex Systems, Vol.1, </title> <publisher> World Scientific Publishing, </publisher> <year> 1986. </year> <month> 22 </month>
Reference-contexts: interleaving requires one enabled event to be executed at each step (see, for instance, the work on CSP [Hoa], UNITY [CM] and I/O Automata [Lyn]), whereas maximal parallelism requires that all enabled events are executed at every step (see, for instance, the work on systolic arrays [KL] and cellular automata <ref> [Wol] </ref>). A property of interest in iteration systems is convergence. This property is useful in studying the self-stabilization of distributed programs (cf. [Dij1], [BGM], [BGW], [Dij] and [GE]), convergence of iterative methods in numerical analysis (cf. [Rob] and [BT]), and self-organization in neural networks (cf. [Koh] and [Arb]).
References-found: 18

