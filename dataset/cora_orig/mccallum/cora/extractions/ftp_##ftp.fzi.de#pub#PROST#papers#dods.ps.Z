URL: ftp://ftp.fzi.de/pub/PROST/papers/dods.ps.Z
Refering-URL: http://www.fzi.de/prost/publications/overview.html
Root-URL: http://www.fzi.de
Email: email: neumann@fzi.de  
Title: Data-oriented Dialogue Specification  
Author: Dieter Neumann 
Address: 76131 Karlsruhe Germany  
Affiliation: Haid-und-Neu-Strae 10-14  
Abstract: Nowadays, application programs are available for a wide variety of domains. The applications are developed using different style-guides for their user interfaces. The way similar tasks are carried out differs depending on the application used. Such inconsistency results in unnecessary learning time and is the cause of mistakes leading to the loss of data and effort. A straight forward approach to this problem would be the standardization of the user-interface. Unfortunately this does not take into account the preferences and capabilities of different users. This paper presents DODS, a formal dialogue specification method that enables the generation of consistent user interfaces. The generation process is exible enough to allow user interfaces to be adapted to specific preferences. 
Abstract-found: 1
Intro-found: 1
Reference: [Born86] <author> A. Borning and R. Duisberg. </author> <title> Constraint-based tools for building user interfaces. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5(4), </volume> <year> 1986. </year>
Reference-contexts: The User Action Notation (UAN) [Hart90] emphasizes the behavioural aspects of direct manipulation interfaces. User interface languages like the OSF/Motif UIL [Ope89] focus on the description of the presentation of the user interface. Other methods use object-oriented, constraint or knowledge-based techniques ([Hill87], <ref> [Born86] </ref>, [Fole88]). There are various problems with these approaches. First of all, these methods address different kind of problems. Some of them can therefore not be used for the construction of user interfaces. Second, these approaches are often based on programming languages or state transition networks.
Reference: [Boru82] <author> H. G. Borufka, H. W. Kuhlmann, and P. J. W. ten Hagen. </author> <title> Dialogue cells: A method for defining interactions. </title> <journal> IEEE Comput. Graph. Appl., </journal> <volume> 2(5):2533, </volume> <year> 1982. </year>
Reference-contexts: Furthermore, the descriptive power of grammars is not sufficient. For instance, the cut-and-paste feature cannot be described by grammars. Examples for the use of grammars to specify dialogues can be found in <ref> [Boru82] </ref>, [Gues82], [Shne82], [vdB83] and [Olse83]. State transition networks are very often used for dialogue descriptions ([Kamr83], [Schu85], [Jaco85], [Yunt85]).
Reference: [Dene77] <author> E. Denert. </author> <title> Specification and design of dialogue systems with state diagrams. </title> <booktitle> Proceedings of the International Computing Symposium, </booktitle> <pages> pages 417424, </pages> <year> 1977. </year>
Reference: [Flec87] <author> M. Flecchina and R. D. Bergeron. </author> <title> Specifying complex dialogs in algae. </title> <booktitle> Proceedings of CHI + GI Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 229234, </pages> <year> 1987. </year>
Reference-contexts: Event models are a newer approach to dialogue description. Because they are generally embedded in a programming language, their descriptive power is equivalent to a Turing machine. Examples for the use of event models can be found in the University of Alberta UIMS [Gree85], Sassafras [Hill86] and ALGEA <ref> [Flec87] </ref>. The major problem with event models is that they are difficult to read and understand. There are several other techniques for the specification of user interfaces. The User Action Notation (UAN) [Hart90] emphasizes the behavioural aspects of direct manipulation interfaces.
Reference: [Fole88] <author> J. D. Foley, C. Gibbs, W. Kim, and S. A. Kovacevic. </author> <title> Knowledge-based user interface management system. </title> <booktitle> Proceedings of CHI Conference on Human Factors in Conputing Systems, </booktitle> <pages> pages 6772, </pages> <year> 1988. </year> <note> Dieter Neumann 13 </note>
Reference-contexts: The User Action Notation (UAN) [Hart90] emphasizes the behavioural aspects of direct manipulation interfaces. User interface languages like the OSF/Motif UIL [Ope89] focus on the description of the presentation of the user interface. Other methods use object-oriented, constraint or knowledge-based techniques ([Hill87], [Born86], <ref> [Fole88] </ref>). There are various problems with these approaches. First of all, these methods address different kind of problems. Some of them can therefore not be used for the construction of user interfaces. Second, these approaches are often based on programming languages or state transition networks.
Reference: [Gree85] <author> M. Green. </author> <title> The university of alberta user interface management system. </title> <journal> ACM Computer Graphics, </journal> <volume> 19(3):205213, </volume> <year> 1985. </year>
Reference-contexts: Event models are a newer approach to dialogue description. Because they are generally embedded in a programming language, their descriptive power is equivalent to a Turing machine. Examples for the use of event models can be found in the University of Alberta UIMS <ref> [Gree85] </ref>, Sassafras [Hill86] and ALGEA [Flec87]. The major problem with event models is that they are difficult to read and understand. There are several other techniques for the specification of user interfaces. The User Action Notation (UAN) [Hart90] emphasizes the behavioural aspects of direct manipulation interfaces.
Reference: [Gree86] <author> M. Green. </author> <title> A survey of three dialog models. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5(3):244275, </volume> <month> July </month> <year> 1986. </year>
Reference-contexts: The usage of DODS is shown in section 6. Section 7 summarizes some experiences and gives an outlook for future work. 2. Related Work Three widespread and well-known dialogue models are context-free grammars, transition networks, and event models. Green <ref> [Gree86] </ref> presents a survey on these dialogue models. The main problem with grammars is that it is difficult to determine exactly when something will occur, that is, after exactly what input tokens have been recognized [Jaco83b]. Furthermore, the descriptive power of grammars is not sufficient.
Reference: [Gues82] <author> S. P. </author> <title> Guest. The use of software tools for dialogue design. </title> <journal> Int. J. Man-Mach. Stud., </journal> <volume> 16:263285, </volume> <year> 1982. </year>
Reference-contexts: Furthermore, the descriptive power of grammars is not sufficient. For instance, the cut-and-paste feature cannot be described by grammars. Examples for the use of grammars to specify dialogues can be found in [Boru82], <ref> [Gues82] </ref>, [Shne82], [vdB83] and [Olse83]. State transition networks are very often used for dialogue descriptions ([Kamr83], [Schu85], [Jaco85], [Yunt85]). Since the descriptive power of simple transition networks is not sufficient, a number of extensions have been introduced leading to recursive transition networks ([Dene77], [Gues82]) and to augmented transition networks ([Kier83], [Sibe85], <p> specify dialogues can be found in [Boru82], <ref> [Gues82] </ref>, [Shne82], [vdB83] and [Olse83]. State transition networks are very often used for dialogue descriptions ([Kamr83], [Schu85], [Jaco85], [Yunt85]). Since the descriptive power of simple transition networks is not sufficient, a number of extensions have been introduced leading to recursive transition networks ([Dene77], [Gues82]) and to augmented transition networks ([Kier83], [Sibe85], [Jaco83a], [Wass85]). The emphasis on an abstract internal state of an application is the main disadvantage of state transition networks.
Reference: [Gute94] <author> K. Gutenkunst. </author> <title> Konstruktion von anwendungen aus miteinander kooperierenden prozessen. </title> <type> Masters thesis, </type> <institution> Universitt Karlsruhe, </institution> <year> 1994. </year> <title> (in german language) </title>
Reference-contexts: Although the basic ideas have already been implemented and have proved to be useful, there are still some open questions. Since components have to exchange data, different types of communication problems between components have to be solved <ref> [Gute94] </ref>. The current editor of specifications cannot deal with some of the extensions to DODS described above. The user interface generated for a dialogue style based on command line input is quite good. In contrast, the graphical user interface is very primitive and just an arbitrary composition of dialogue elements.
Reference: [Hart90] <author> H. R. Hartson, A. C. Siochi, and D. Hix. </author> <title> The uan: A user-oriented representation for direct manipulation interface designs. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(3):181203, </volume> <month> July </month> <year> 1990. </year>
Reference-contexts: The major problem with event models is that they are difficult to read and understand. There are several other techniques for the specification of user interfaces. The User Action Notation (UAN) <ref> [Hart90] </ref> emphasizes the behavioural aspects of direct manipulation interfaces. User interface languages like the OSF/Motif UIL [Ope89] focus on the description of the presentation of the user interface. Other methods use object-oriented, constraint or knowledge-based techniques ([Hill87], [Born86], [Fole88]). There are various problems with these approaches.
Reference: [Hill86] <author> R. D. Hill. </author> <title> Supporting concurrency, communications and synchronization in human computer interaction - the sassafras user interface management systems. special issue on user interface software. </title> <journal> ACM Trans. Graph., </journal> <volume> 5(3):179210, </volume> <year> 1986. </year>
Reference-contexts: Event models are a newer approach to dialogue description. Because they are generally embedded in a programming language, their descriptive power is equivalent to a Turing machine. Examples for the use of event models can be found in the University of Alberta UIMS [Gree85], Sassafras <ref> [Hill86] </ref> and ALGEA [Flec87]. The major problem with event models is that they are difficult to read and understand. There are several other techniques for the specification of user interfaces. The User Action Notation (UAN) [Hart90] emphasizes the behavioural aspects of direct manipulation interfaces.
Reference: [Hill87] <author> R. Hill. </author> <title> Event-response systems - a technique for specifuing multi-threaded dialogues. </title> <booktitle> Proceedings of CHI + GI Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 241248, </pages> <year> 1987. </year>
Reference: [Jaco83a] <author> R. J. K. Jacob. </author> <title> Executable specifications for a human-computer interface. </title> <booktitle> Proceedings of the CHI83 Human Factors in Computing Systems, </booktitle> <pages> pages 2834, </pages> <year> 1983. </year>
Reference-contexts: State transition networks are very often used for dialogue descriptions ([Kamr83], [Schu85], [Jaco85], [Yunt85]). Since the descriptive power of simple transition networks is not sufficient, a number of extensions have been introduced leading to recursive transition networks ([Dene77], [Gues82]) and to augmented transition networks ([Kier83], [Sibe85], <ref> [Jaco83a] </ref>, [Wass85]). The emphasis on an abstract internal state of an application is the main disadvantage of state transition networks. For building user interfaces it is important to know what data is available at a certain time and what relations exist between data, input and output.
Reference: [Jaco83b] <author> R. J. K. Jacob. </author> <title> Using formal specifications in the design of a human-computer interface. </title> <journal> Communications of the ACM, </journal> <volume> 26(4):259264, </volume> <year> 1983. </year>
Reference-contexts: Green [Gree86] presents a survey on these dialogue models. The main problem with grammars is that it is difficult to determine exactly when something will occur, that is, after exactly what input tokens have been recognized <ref> [Jaco83b] </ref>. Furthermore, the descriptive power of grammars is not sufficient. For instance, the cut-and-paste feature cannot be described by grammars. Examples for the use of grammars to specify dialogues can be found in [Boru82], [Gues82], [Shne82], [vdB83] and [Olse83].
Reference: [Jaco85] <author> R. J. K. Jacob. </author> <title> An executable specification technique for describing human-computer interaction. </title> <booktitle> Advances in Human-Computer Interaction, </booktitle> <year> 1985. </year>
Reference-contexts: For instance, the cut-and-paste feature cannot be described by grammars. Examples for the use of grammars to specify dialogues can be found in [Boru82], [Gues82], [Shne82], [vdB83] and [Olse83]. State transition networks are very often used for dialogue descriptions ([Kamr83], [Schu85], <ref> [Jaco85] </ref>, [Yunt85]). Since the descriptive power of simple transition networks is not sufficient, a number of extensions have been introduced leading to recursive transition networks ([Dene77], [Gues82]) and to augmented transition networks ([Kier83], [Sibe85], [Jaco83a], [Wass85]).
Reference: [Jans93] <author> C. Janssen. </author> <title> Dialognetze zur beschreibung von dialogablufen bei der generierung von graphischen benutzungsoberflchen, </title> <address> IAT, Universitt Stuttgart, </address> <year> 1993. </year> <title> (in german language) </title>
Reference-contexts: It is therefore not possible to generate different user interfaces with different dialogue styles from these specifications. Dieter Neumann 3 The approach taken here is based on Petri nets and thus is closely related to the work of Janssen <ref> [Jans93] </ref> and Palanque [Pala93]. Janssen specifies sequences of dialogue masks for interaction with relational databases. In the approach of Palanque, the state of objects is represented by places of a Petri net. It has therefore similar disadvantages as state diagrams.
Reference: [Kamr83] <author> A. Kamran and M. B. Feldman. </author> <title> Graphics programming independant of interaction techniques and styles. </title> <journal> ACM Comput. Graph., </journal> <volume> 17(1):5866, </volume> <year> 1983. </year>
Reference: [Kier83] <author> D. Kieras and P. G. Polson. </author> <title> A generalized transition network representation for interactive systems. </title> <booktitle> Proceedings of the CHI83 Human Factors in Computing Systems, </booktitle> <pages> pages 103106, </pages> <year> 1983. </year>
Reference: [Marz94] <author> C. Marz. </author> <title> Generierung prototypischer benutzerschnittstellen aus interaktionsbeschreibungen. </title> <type> Masters thesis, </type> <institution> Universitt Karlsruhe, </institution> <year> 1994. </year> <title> (in german language) </title>
Reference-contexts: This would lead to dialogue specification depending on the dialogue style used. To avoid this, a type system is introduced for external transitions <ref> [Marz94] </ref>. It is very similar to type systems of programming languages like Pascal. With the help of the type system, it is possible to select appropriate dialogue elements depending on a chosen dialogue style. <p> Accordingly, appropriate commands would be accepted by a command interpreter. Although a very primitive type system with few types already allows for the generation of a user interface, the resulting graphical user interface is not satisfying as it is a mere assembly of all necessary interface elements <ref> [Marz94] </ref>. Therefore, interactions are grouped into subtasks, such as the selection of an element from a list. The type system is extended with these interaction groups, thus making it possible to map more complex elements of user interfaces as selection boxes.
Reference: [Mura89] <author> T. Murata. </author> <title> Petri nets: Properties, analysis and applications. </title> <booktitle> Proceedings of the IEEE, </booktitle> <address> 77(4):541580, </address> <year> 1989. </year>
Reference-contexts: In fact, we used Petri nets initially to specify dialogues. Unfortunately, they did not fit well with the elements and properties of dialogues. Petri nets had to be extended in several ways, but even with these specialized Petri nets <ref> [Mura89] </ref>, the specification of dialogues became somehow unnatural. Therefore we decided to develop special arcs which directly reect the relations found in dialogues. However, it should be said that the basic elements of DODS could be represented by subnets if extended Petri nets are used.
Reference: [Olse83] <author> D. R. Olsen and E. P. Dempsey. Syngraph: </author> <title> A graphical user interface generator. </title> <journal> ACM Computer Graphics, </journal> <volume> 17(3):4350, </volume> <year> 1983. </year>
Reference-contexts: Furthermore, the descriptive power of grammars is not sufficient. For instance, the cut-and-paste feature cannot be described by grammars. Examples for the use of grammars to specify dialogues can be found in [Boru82], [Gues82], [Shne82], [vdB83] and <ref> [Olse83] </ref>. State transition networks are very often used for dialogue descriptions ([Kamr83], [Schu85], [Jaco85], [Yunt85]). Since the descriptive power of simple transition networks is not sufficient, a number of extensions have been introduced leading to recursive transition networks ([Dene77], [Gues82]) and to augmented transition networks ([Kier83], [Sibe85], [Jaco83a], [Wass85]).
Reference: [Ope89] <institution> Open Software Foundation, </institution> <address> Cambridge. </address> <month> OSF/Motif, </month> <title> Programmers Guide, Revision 1.1, </title> <year> 1989. </year>
Reference-contexts: The major problem with event models is that they are difficult to read and understand. There are several other techniques for the specification of user interfaces. The User Action Notation (UAN) [Hart90] emphasizes the behavioural aspects of direct manipulation interfaces. User interface languages like the OSF/Motif UIL <ref> [Ope89] </ref> focus on the description of the presentation of the user interface. Other methods use object-oriented, constraint or knowledge-based techniques ([Hill87], [Born86], [Fole88]). There are various problems with these approaches. First of all, these methods address different kind of problems.
Reference: [Pala93] <author> P. A. Palanque, R. Bastide, L. Dourte, and C. Sibertin-Blanc. </author> <title> CAiSE 93, chapter Design of User-Driven Interfaces Using Petri Nets and Objects, </title> <booktitle> pages 569585. Lecture Notes In Computer Science 685. </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1993. </year>
Reference-contexts: It is therefore not possible to generate different user interfaces with different dialogue styles from these specifications. Dieter Neumann 3 The approach taken here is based on Petri nets and thus is closely related to the work of Janssen [Jans93] and Palanque <ref> [Pala93] </ref>. Janssen specifies sequences of dialogue masks for interaction with relational databases. In the approach of Palanque, the state of objects is represented by places of a Petri net. It has therefore similar disadvantages as state diagrams.
Reference: [Pete81] <author> J. L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice Hall Inc., </publisher> <year> 1981. </year>
Reference-contexts: The expressive power of DODS could be improved by adding variables or counters to places or allowing more than one token on a place. This would make the nets very similar to extended Petri nets, which have the power of a Turing machine <ref> [Pete81] </ref>. However this additional information rarely helps improving the generation of an user interface. The nets become less comprehensible and analyses are much more difficult. 6.
Reference: [Reis86] <editor> W. Reisig. Petrinetze. </editor> <publisher> Studienreihe Informatik. Springer, </publisher> <year> 1986. </year>
Reference-contexts: This is discussed in more detail in section 5. What should be mentioned here is the close relationship between the basic elements of DODS and Petri nets <ref> [Reis86] </ref>. In fact, we used Petri nets initially to specify dialogues. Unfortunately, they did not fit well with the elements and properties of dialogues. Petri nets had to be extended in several ways, but even with these specialized Petri nets [Mura89], the specification of dialogues became somehow unnatural.
Reference: [Schu85] <author> A. J. Schulert, G. T. Rogers, and J. A. Hamilton. </author> <title> Adm - a dialogue manager. </title> <booktitle> Proceedings of teh CHI85 Human Factors in Computer Systems, </booktitle> <pages> pages 177183, </pages> <year> 1985. </year>
Reference-contexts: Furthermore, the descriptive power of grammars is not sufficient. For instance, the cut-and-paste feature cannot be described by grammars. Examples for the use of grammars to specify dialogues can be found in [Boru82], [Gues82], [Shne82], [vdB83] and [Olse83]. State transition networks are very often used for dialogue descriptions ([Kamr83], <ref> [Schu85] </ref>, [Jaco85], [Yunt85]). Since the descriptive power of simple transition networks is not sufficient, a number of extensions have been introduced leading to recursive transition networks ([Dene77], [Gues82]) and to augmented transition networks ([Kier83], [Sibe85], [Jaco83a], [Wass85]).
Reference: [Shne82] <author> B. Shneiderman. </author> <title> Multi-party grammars and related features for designing interactive systems. </title> <journal> IEEE Trans. Syst. Man Cybernetics, SMC-12(2):148154, </journal> <volume> Mar.-Apr. </volume> <year> 1982. </year> <title> 14 Data-oriented Dialogue Specification </title>
Reference-contexts: Furthermore, the descriptive power of grammars is not sufficient. For instance, the cut-and-paste feature cannot be described by grammars. Examples for the use of grammars to specify dialogues can be found in [Boru82], [Gues82], <ref> [Shne82] </ref>, [vdB83] and [Olse83]. State transition networks are very often used for dialogue descriptions ([Kamr83], [Schu85], [Jaco85], [Yunt85]).
Reference: [Sibe85] <author> J. L. Sibert, R. Belliardi, and A. Kamran. </author> <title> Some thoughts on the interface between user interface managements systems and application software. </title> <booktitle> User Interface Management Systems, </booktitle> <pages> pages 183192, </pages> <year> 1985. </year>
Reference-contexts: State transition networks are very often used for dialogue descriptions ([Kamr83], [Schu85], [Jaco85], [Yunt85]). Since the descriptive power of simple transition networks is not sufficient, a number of extensions have been introduced leading to recursive transition networks ([Dene77], [Gues82]) and to augmented transition networks ([Kier83], <ref> [Sibe85] </ref>, [Jaco83a], [Wass85]). The emphasis on an abstract internal state of an application is the main disadvantage of state transition networks. For building user interfaces it is important to know what data is available at a certain time and what relations exist between data, input and output.
Reference: [vdB83] <author> J. van den Bos, M. J. Plasmeijer, and P. H. Hartel. </author> <title> Input-output tools: A language facility for interactive and real-time systems. </title> <journal> IEEE Trans. Softw. Eng, </journal> <volume> SE-9(3):247259, </volume> <year> 1983. </year>
Reference-contexts: Furthermore, the descriptive power of grammars is not sufficient. For instance, the cut-and-paste feature cannot be described by grammars. Examples for the use of grammars to specify dialogues can be found in [Boru82], [Gues82], [Shne82], <ref> [vdB83] </ref> and [Olse83]. State transition networks are very often used for dialogue descriptions ([Kamr83], [Schu85], [Jaco85], [Yunt85]).
Reference: [Wass85] <author> A. I. Wassermann. </author> <title> Extending transition diagrams for the specification of human-computer interaction. </title> <journal> IEEE Transactions on Software Engeneering, </journal> <volume> 11(8):699713, </volume> <year> 1985. </year>
Reference-contexts: State transition networks are very often used for dialogue descriptions ([Kamr83], [Schu85], [Jaco85], [Yunt85]). Since the descriptive power of simple transition networks is not sufficient, a number of extensions have been introduced leading to recursive transition networks ([Dene77], [Gues82]) and to augmented transition networks ([Kier83], [Sibe85], [Jaco83a], <ref> [Wass85] </ref>). The emphasis on an abstract internal state of an application is the main disadvantage of state transition networks. For building user interfaces it is important to know what data is available at a certain time and what relations exist between data, input and output. <p> Through the introduction of a type system, it is possible to generate user interfaces for different dialogue styles from the same specification. As a result, DODS fulfils all requirements for dialogue specifications established by Wassermann <ref> [Wass85] </ref>. The specification is formal, exible and executable. User interfaces of different dialogue styles can be generated from the specification and experiences with persons involved have shown that DODS is also rapidly learned.
Reference: [Yunt85] <author> T. Yunten and H. R. Hartson. </author> <title> A supervisory methodology and notation (superman) for human computer system development. </title> <booktitle> Advances in Human-Computer Interaction, </booktitle> <year> 1985. </year>
Reference-contexts: For instance, the cut-and-paste feature cannot be described by grammars. Examples for the use of grammars to specify dialogues can be found in [Boru82], [Gues82], [Shne82], [vdB83] and [Olse83]. State transition networks are very often used for dialogue descriptions ([Kamr83], [Schu85], [Jaco85], <ref> [Yunt85] </ref>). Since the descriptive power of simple transition networks is not sufficient, a number of extensions have been introduced leading to recursive transition networks ([Dene77], [Gues82]) and to augmented transition networks ([Kier83], [Sibe85], [Jaco83a], [Wass85]).
References-found: 31

