URL: ftp://mancos.cs.utah.edu/papers/dist-vs-local.ps.Z
Refering-URL: http://www.cs.utah.edu/~sjt/seminar/refs.html
Root-URL: 
Email: flepreau,baford,mikeg@cs.utah.edu  
Title: The Persistent Relevance of the Local Operating System to Global Applications  
Author: Jay Lepreau Bryan Ford Mike Hibler 
Web: http://www.cs.utah.edu/projects/flux/  
Address: Salt Lake City, UT 84112  
Affiliation: Department of Computer Science University of Utah  
Abstract: The growth and popularity of loosely-coupled distributed systems such as the World Wide Web and the touting of Java-based systems as the solution to the issues of software maintenance, flexibility, and security are changing the research emphasis away from traditional single node operating system issues. Apparently, the view is that traditional OS issues are either solved problems or minor problems. By contrast, we believe that building such vast distributed systems upon the fragile infrastructure provided by today's operating systems is analogous to building castles on sand. In this paper we outline the supporting arguments for these views and describe an OS design that supports secure encapsulation of the foreign processes that will be increasingly prevalent in tomorrow's distributed systems. 1 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Adl-Tabatabai, G. Langdale, S. Lucco, and R. Wahbe. </author> <title> Efficient and Language-Independent Mobile Programs. </title> <booktitle> In Proc. ACM SIGPLAN Symp. on Programming Language Design and Implementation, </booktitle> <pages> pages 127-136, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: So far, the relevant formal security work on composability has been too abstract to offer much hope. The bankruptcy of policy has recently become obvious to a wider community, due to issues surrounding executable content. In Java [12] or SFI-based <ref> [1] </ref> schemes for safely executing untrusted foreign code, there is currently no effective way to resolve the tension between functionalitydoing anything usefuland protection. These systems are useful only because, for the most part, they simply animate data on the client's screen.
Reference: [2] <author> S. M. Bellovin and M. Merritt. </author> <title> Limitations of the Kerberos Authentication System. </title> <booktitle> In Proc. of the Winter 1991 USENIX Conference, </booktitle> <pages> pages 253-267, </pages> <year> 1991. </year>
Reference-contexts: Meanwhile, debate goes on about, e.g., browsers' use of SSL vs. S-HTTP. We believe that such decisions matter little when end-system security is abysmal. For example, even relatively robust authentication mechanisms such as Kerberos store their session keys in locations vulnerable to local intruders <ref> [2] </ref>, e.g., a local file or in shared memory. Even attacks from the local LAN may threaten these keys; for example, local memory may be paged out from a diskless workstation or to network RAM and thus be vulnerable to network sniffing.
Reference: [3] <author> A. Chankhunthod, P. B. Danzig, C. Neerdaels, M. F. Schwartz, and K. J. Worrell. </author> <title> A Hierarchical Internet Object Cache. </title> <booktitle> In Proc. of the USENIX 1996 Technical Conference, </booktitle> <pages> pages 153-163, </pages> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: For example, caching http connections is easy to implement and reaps large benefits [18], predictive caching based on historical access patterns [20] also does very well, per-site caching can be used either with simple proxy servers or with more sophisticated mechanisms such as hierarchical caching <ref> [3] </ref>, and regional mirrors, together with an intelligently ordered resolution of name to address, can be deployed.
Reference: [4] <author> D. R. Cheriton and K. J. Duda. </author> <title> A Caching Model of Operating System Kernel Functionality. </title> <booktitle> In Proc. of the First Symp. on Operating Systems Design and Implementation, </booktitle> <pages> pages 179-193. </pages> <publisher> USENIX Association, </publisher> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Kernel Properties The Fluke microkernel provides simple memory management, scheduling, and IPC primitives similar to those of conventional small microkernels such as the V++ CacheKernel <ref> [4] </ref>, L3/L4 [16], and KeyKOS [13]. The Fluke kernel API does not enforce the RVM model, but it enables the modelthe ability for any process to completely control its children by providing three vital properties: * All kernel primitives are completely relative, implying no global resources, namespaces, or privileges.
Reference: [5] <author> D. Dean, E. W. Felten, and D. S. Wallach. </author> <title> Java Security: From HotJava to Netscape and Beyond. </title> <booktitle> In Proc. of the 1996 IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, CA, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: In particular, its runtime environment [26] provides little way to control memory or cpu consumption, aside from ordinary pre-emption. Even for what it's supposed to control, the fundamental design of the Java security mechanism has many deficiencies, as detailed by Dean et al <ref> [5] </ref>. Many of these basic design deficiencies are the underlying causes of holes that have already been exploited.
Reference: [6] <author> B. Ford and M. Hibler. Fluke: </author> <title> Flexible -kernel Environment Application Programming Interface Reference (draft). </title> <type> 121 pp. </type> <institution> University of Utah. </institution> <note> Available as ftp://mancos.cs.utah.edu/papers/sa-flukeref.ps.gz and http://www.cs.utah.edu/projects/- flux/fluke/html/sa-flukeref/ (HTML format), </note> <year> 1996. </year>
Reference-contexts: Our approach is to design a virtualizable architecture with the same goal of efficient layering, but one that is appropriate for software implementation. The three components of our virtualizable architecture are the standard non-privileged machine instructions, the operations exported by our Fluke microkernel <ref> [6] </ref>, and a set of higher-level Common Protocols. Virtual machine monitors (VMMs) executed on this virtual machine can efficiently create additional, recursive virtual machines in which applications or other VMMs can run [8]. <p> Although the performance they measured was excellent, we believe this was because their example applications exhibited a low ratio of system calls to actual computing. 2.5 Status We have defined the detailed Fluke API <ref> [6] </ref>, the Flexible -kernel Environment. A prototype Fluke implementation is running on the x86 platform, along with several virtual machine monitors, including a demand paging virtual memory manager, a checkpointer, a process manager providing a subset of POSIX functionality, and a transparent debugger.
Reference: [7] <author> B. Ford, M. Hibler, and J. Lepreau. </author> <title> Using Annotated Interface Definitions to Optimize RPC. </title> <booktitle> In Proc. of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> page 232, </pages> <year> 1995. </year> <note> Poster. </note>
Reference-contexts: It will do little good to reserve bandwidth in the ATM switch without reserving or scheduling access to the disk, network interface, memory bus, or X display server [14]. Object-oriented middleware like CORBA induces terrible performance problems due to poor match with application needs <ref> [7] </ref> and no control over the transport protocol [10, 23]. It will be a severe challenge to efficiently use the scarce resources of thin clients while simultaneously providing the robust local resource management and generality required by the Internet.
Reference: [8] <author> B. Ford, M. Hibler, J. Lepreau, P. Tullmann, G. Back, S. Goel, and S. Clawson. </author> <title> Microkernels Meet Recursive Virtual Machines. </title> <type> Technical Report UUCS-96-004, </type> <institution> University of Utah, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: Virtual machine monitors (VMMs) executed on this virtual machine can efficiently create additional, recursive virtual machines in which applications or other VMMs can run <ref> [8] </ref>. Kernel Properties The Fluke microkernel provides simple memory management, scheduling, and IPC primitives similar to those of conventional small microkernels such as the V++ CacheKernel [4], L3/L4 [16], and KeyKOS [13].
Reference: [9] <author> B. Ford and S. R. Susarla. </author> <title> Flexible Multi-Policy Scheduling based on CPU Inheritance. </title> <type> Technical Report UUCS-96-005, </type> <institution> University of Utah, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: The RVM model can also address covert channels. Storage channels should not be a problem, because the parent has complete control over what the child sees: any collaboration can be throttled. Timing channels are controllable as well, since arbitrary scheduling policies can be provided by user-level threads <ref> [9] </ref>.
Reference: [10] <author> A. Gokhale and D. C. Schmidt. </author> <title> Measuring the Performance of Communication Middleware on High-Speed Networks. </title> <booktitle> In SIGCOMM '96, </booktitle> <address> San Francisco, CA, </address> <month> August </month> <year> 1996. </year> <note> ACM. </note>
Reference-contexts: Object-oriented middleware like CORBA induces terrible performance problems due to poor match with application needs [7] and no control over the transport protocol <ref> [10, 23] </ref>. It will be a severe challenge to efficiently use the scarce resources of thin clients while simultaneously providing the robust local resource management and generality required by the Internet.
Reference: [11] <author> R. P. Goldberg. </author> <title> Architecture of Virtual Machines. </title> <booktitle> In AFIPS Conf. Proc., </booktitle> <month> June </month> <year> 1973. </year>
Reference-contexts: This provides the flexibility and power that allows a process at any level of the system to isolate and control arbitrary subsystems: a facility that is needed to securely run arbitrary untrusted code. 2.2 A Software Virtual Machine Architecture In the 1970's special virtualizable hardware architectures <ref> [11, 15] </ref> were proposed, whose goal was to allow software virtual machines to be stacked much more efficiently than on normal hardware. Our approach is to design a virtualizable architecture with the same goal of efficient layering, but one that is appropriate for software implementation.
Reference: [12] <author> J. Gosling and H. McGilton. </author> <title> The Java Language Environment: A White Paper. </title> <type> Technical report, </type> <institution> Sun Microsystems Computer Company, </institution> <year> 1996. </year> <note> Available as http://java.sun.com/doc/language environment/. </note>
Reference-contexts: Out of this mishmash of interacting state, many security breaches arise. So far, the relevant formal security work on composability has been too abstract to offer much hope. The bankruptcy of policy has recently become obvious to a wider community, due to issues surrounding executable content. In Java <ref> [12] </ref> or SFI-based [1] schemes for safely executing untrusted foreign code, there is currently no effective way to resolve the tension between functionalitydoing anything usefuland protection. These systems are useful only because, for the most part, they simply animate data on the client's screen.
Reference: [13] <author> N. </author> <title> Hardy. </title> <booktitle> The KeyKos Architecture. Operating Systems Review, </booktitle> <month> September </month> <year> 1985. </year>
Reference-contexts: Kernel Properties The Fluke microkernel provides simple memory management, scheduling, and IPC primitives similar to those of conventional small microkernels such as the V++ CacheKernel [4], L3/L4 [16], and KeyKOS <ref> [13] </ref>. The Fluke kernel API does not enforce the RVM model, but it enables the modelthe ability for any process to completely control its children by providing three vital properties: * All kernel primitives are completely relative, implying no global resources, namespaces, or privileges.
Reference: [14] <author> M. B. Jones, P. J. Leach, R. P. Draves, and J. S. Barrera III. </author> <title> Modular Real-Time Resource Management in the Rialto Operating System. </title> <booktitle> In Proc. Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: Heavy use of multimedia content will require end-to-end Quality-of-Service and resource management. It will do little good to reserve bandwidth in the ATM switch without reserving or scheduling access to the disk, network interface, memory bus, or X display server <ref> [14] </ref>. Object-oriented middleware like CORBA induces terrible performance problems due to poor match with application needs [7] and no control over the transport protocol [10, 23].
Reference: [15] <author> H. C. Lauer and D. Wyeth. </author> <title> A Recursive Virtual Machine Architecture. </title> <booktitle> In ACM SIGARCH-SIGOPS Workshop on Virtual Computer Systems, </booktitle> <pages> pages 113-116, </pages> <month> March </month> <year> 1973. </year>
Reference-contexts: This provides the flexibility and power that allows a process at any level of the system to isolate and control arbitrary subsystems: a facility that is needed to securely run arbitrary untrusted code. 2.2 A Software Virtual Machine Architecture In the 1970's special virtualizable hardware architectures <ref> [11, 15] </ref> were proposed, whose goal was to allow software virtual machines to be stacked much more efficiently than on normal hardware. Our approach is to design a virtualizable architecture with the same goal of efficient layering, but one that is appropriate for software implementation.
Reference: [16] <author> J. Liedtke. </author> <title> On Micro-Kernel Construction. </title> <booktitle> In Proc. of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 237-250, </pages> <address> Copper Mountain, CO, </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Kernel Properties The Fluke microkernel provides simple memory management, scheduling, and IPC primitives similar to those of conventional small microkernels such as the V++ CacheKernel [4], L3/L4 <ref> [16] </ref>, and KeyKOS [13]. The Fluke kernel API does not enforce the RVM model, but it enables the modelthe ability for any process to completely control its children by providing three vital properties: * All kernel primitives are completely relative, implying no global resources, namespaces, or privileges.
Reference: [17] <author> J. </author> <title> Markoff. AT&T Plans to Offer Internet Over a $500 Wireless Phone. </title> <address> New York Times. </address> <month> July 12, </month> <year> 1996. </year>
Reference-contexts: These small, cheap, possibly mobile, stripped down machines will put a premium on efficient exploitation of scarce local resources, including electrical power. Some thin clients such as AT&T's combined internet appliance and cellular phone with only 60K of memory <ref> [17] </ref>, will be virtually anorexic. Simultaneously, such thin clients put an increasing burden on servers, as computing, storage and control migrates towards the central servers. 1.3 The Persistent Local Problems All of these needs of distributed systems make heavy demands on the software local to a node.
Reference: [18] <author> J. C. Mogul. </author> <title> The Case for Persistent-Connection HTTP. In Proc. </title> <booktitle> of the SIGCOMM '95 Conference, </booktitle> <pages> pages 299-313, </pages> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: Many of these failings are susceptible to huge improvements with modest effort. For example, caching http connections is easy to implement and reaps large benefits <ref> [18] </ref>, predictive caching based on historical access patterns [20] also does very well, per-site caching can be used either with simple proxy servers or with more sophisticated mechanisms such as hierarchical caching [3], and regional mirrors, together with an intelligently ordered resolution of name to address, can be deployed.
Reference: [19] <author> J. C. Mogul. </author> <title> Operating Systems Support for Busy Internet Services. </title> <booktitle> In Proc. Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: However, fixing these fundamental distributed system performance problems will cause the underlying problems of the local operating system to again become critical. This will be especially true on servers, and indeed, it is already apparent on them <ref> [19] </ref>. The pressure on both server and client I/O capabilities will be increasingly severe as analog data goes digital and demand for bandwidth increases. On the client side, the vision of the Internet Appliance and Network Computer is just beginning to be played out.
Reference: [20] <author> J. C. Mogul. </author> <title> Hinted Caching in the Web. </title> <booktitle> In Proc. of the Seventh ACM SIGOPS European Workshop, </booktitle> <month> Sept. </month> <year> 1996. </year>
Reference-contexts: Many of these failings are susceptible to huge improvements with modest effort. For example, caching http connections is easy to implement and reaps large benefits [18], predictive caching based on historical access patterns <ref> [20] </ref> also does very well, per-site caching can be used either with simple proxy servers or with more sophisticated mechanisms such as hierarchical caching [3], and regional mirrors, together with an intelligently ordered resolution of name to address, can be deployed.
Reference: [21] <author> D. Mosberger and L. L. Peterson. </author> <title> Making Paths Explicit in the Scout Operating System. </title> <type> Technical Report 96-05, </type> <institution> University of Arizona, Dept. of Computer Science, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: The heavy I/O requirements may require entirely new approaches to system structure, emphasizing communication over computation, as in the Scout <ref> [21] </ref> system. Heavy use of multimedia content will require end-to-end Quality-of-Service and resource management. It will do little good to reserve bandwidth in the ATM switch without reserving or scheduling access to the disk, network interface, memory bus, or X display server [14].
Reference: [22] <author> G. J. Popek and C. Kline. </author> <title> Verifiable Secure Operating Systems Software. </title> <booktitle> In AFIPS Conf. Proc., </booktitle> <month> June </month> <year> 1973. </year>
Reference-contexts: We elaborate on these features below. Our proposed use of virtual machines for security is well established: one of the uses of classic virtual machines was to provide isolation guarantees between subsystems <ref> [22] </ref>. However, we also provide the ability to nest virtual machines, and that is important for worldwide applications. A machine that runs untrusted applications requires a number of features from its operating system.
Reference: [23] <author> D. L. Schmidt, T. Harrison, and E. Al-Shaer. </author> <title> Object-Oriented Components for High-Speed Networking Programming. </title> <booktitle> In Proc. of the USENIX Conference Object-Oriented Technologies, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: Object-oriented middleware like CORBA induces terrible performance problems due to poor match with application needs [7] and no control over the transport protocol <ref> [10, 23] </ref>. It will be a severe challenge to efficiently use the scarce resources of thin clients while simultaneously providing the robust local resource management and generality required by the Internet.
Reference: [24] <author> D. Wagner, I. Goldberg, and R. Thomas. </author> <title> A Secure Environment for Untrusted Helper Applications. </title> <booktitle> In Proc. of the 6th USENIX Unix Security Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: Wagner et al <ref> [24] </ref> describe a tool that interposes on a child process's Unix system calls, using the Unix process debugging facilities. They have concentrated on providing useful functionality while working within existing operating systems, and apparently achieved this.
Reference: [25] <author> M. V. Wilkes and R. M. Needham. </author> <title> The Cambridge CAP Computer and its Operating System. </title> <publisher> North Holland, </publisher> <address> NY, </address> <year> 1979. </year>
Reference-contexts: be hierarchical, enforcing the RVM model, and can use arbitrary algorithms, such as forcing fixed-slice scheduling, where the scheduler soaks up any unused cycles in a slice before switching to a thread in another security context. 2.4 Related Work Our RVM model is similar to what the Cambridge CAP Computer <ref> [25] </ref> provided, although inefficiently, with the aid of hardware supported indirect capabilities. The CAP Computer supported an arbitrarily-deep process hierarchy, in which parent processes could completely virtualize the memory and CPU usage of their child processes, as well as trap and system call handlers for their children.
Reference: [26] <author> F. Yellin. </author> <title> Low Level Security in Java. </title> <booktitle> In Proc. 4th Int'l World Wide Web Conference, </booktitle> <pages> pages 369-379, </pages> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Java The Java language does offer type-based memory and interface protection, but attempts to solve only part of the security problem. In particular, its runtime environment <ref> [26] </ref> provides little way to control memory or cpu consumption, aside from ordinary pre-emption. Even for what it's supposed to control, the fundamental design of the Java security mechanism has many deficiencies, as detailed by Dean et al [5].
References-found: 26

