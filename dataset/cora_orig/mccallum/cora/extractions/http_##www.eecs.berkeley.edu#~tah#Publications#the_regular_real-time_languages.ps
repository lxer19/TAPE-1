URL: http://www.eecs.berkeley.edu/~tah/Publications/the_regular_real-time_languages.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Publications/the_regular_real-time_languages.html
Root-URL: 
Title: The Regular Real-Time Languages  
Author: T.A. Henzinger J.-F. Raskin and P.-Y. Schobbens 
Address: Namur, Belgium  
Affiliation: 1 Electrical Engineering and Computer Sciences, University of California, Berkeley 2 Computer Science Institute, University of  
Abstract: A specification formalism for reactive systems defines a class of !-languages. We call a specification formalism fully decidable if it is constructively closed under boolean operations and has a decidable satisfiability (nonemptiness) problem. There are two important, robust classes of !-languages that are definable by fully decidable formalisms. The !-regular languages are definable by finite automata, or equivalently, by the Sequential Calculus. The counter-free !-regular languages are definable by temporal logic, or equivalently, by the first-order fragment of the Sequential Calculus. The gap between both classes can be closed by finite counting (using automata connectives), or equivalently, by projection (existential second-order quantification over letters). A specification formalism for real-time systems defines a class of timed !-languages, whose letters have real-numbered time stamps. Two popular ways of specifying timing constraints rely on the use of clocks, and on the use of time bounds for temporal operators. However, temporal logics with clocks or time bounds have undecidable satisfiability problems, and finite automata with clocks (so-called timed automata) are not closed under complement. Therefore, two fully decidable restrictions of these formalisms have been proposed. In the first case, clocks are restricted to event clocks, which measure distances to immediately preceding or succeeding events only. In the second case, time bounds are restricted to nonsingular intervals, which cannot specify the exact punctuality of events. We show that the resulting classes of timed !-languages are robust, and we explain their relationship. First, we show that temporal logic with event clocks defines the same class of timed !-languages as temporal logic with nonsingular time bounds, and we identify a first-order monadic theory that also defines this class. Second, we show that if the ability of finite counting is added to these formalisms, we obtain the class of timed !-languages that are definable by finite automata with event clocks, or equivalently, by a restricted second-order extension of the monadic theory. Third, we show that if projection is added, we obtain the class of timed !-languages that are definable by timed automata, or equivalently, by a richer second-order extension of the monadic theory. These results identify three robust classes of timed !-languages, of which the third, while popular, is not definable by a fully decidable formalism. By contrast, the first two classes are definable by fully decidable formalisms from temporal logic, from automata theory, and from monadic logic. Since the gap between these two classes can be closed by finite counting, we dub them the timed !-regular languages and the timed counter-free !-regular languages, respectively. ? An abbreviated version of this paper will appear in the Proceedings of the 25th International Colloquium on Automata, Languages, and Programming (ICALP), 1998. ?? This work is supported in part by the ONR YIP award N00014-95-1-0520, the NSF CAREER award CCR-9501708, the NSF grant CCR-9504469, the ARO MURI grant DAAH-04-96-1-0341, the SRC contract 97-DC-324.041, the Belgian National Fund for Scientific Research (FNRS), the European Commission under WGs Aspire and Fireworks, the Portuguese FCT, and by Belgacom. 
Abstract-found: 1
Intro-found: 1
Reference: [ACM97] <author> E. Asarin, P. Caspi, and O. Maler. </author> <title> A Kleene theorem for timed automata. </title> <booktitle> In Proc. 12th IEEE Symp. Logic in Computer Science, </booktitle> <pages> pp. 160-171, </pages> <year> 1997. </year>
Reference-contexts: [Wil94] TA [AD94] Fully undecidable MetricTL [AH93] ClockTL [AH94] TimeFunctionML 1 [AH93] TimeFunctionML 2 On one hand, the class of Timed Automata is unsatisfactory, because over real-numbered time it is only positively decidable: R-timed automata are not closed under complement, and the corresponding temporal and monadic logics (and regular expressions <ref> [ACM97] </ref>) have no negation operator. On the other hand, the classes of Metric and Clock Temporal Logics (as well as monadic logic with a time function), which include negation, are unsatisfactory, because over real-numbered time their satisfiability problems are undecidable. Hence several restrictions of these classes have been studied. 1.
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: The previously known results are listed in the following table, where the omission of superscripts indicates that time stamps are real numbers: Temporal logics Monadic theories Finite automata Fully decidable MetricIntervalTL [AFH96] EventClockTL [RS97] EventClockTA [AFH94] Positively decidable TL + + TA [Wil94] Ld $ [Wil94] TA <ref> [AD94] </ref> Fully undecidable MetricTL [AH93] ClockTL [AH94] TimeFunctionML 1 [AH93] TimeFunctionML 2 On one hand, the class of Timed Automata is unsatisfactory, because over real-numbered time it is only positively decidable: R-timed automata are not closed under complement, and the corresponding temporal and monadic logics (and regular expressions [ACM97]) have no <p> We do not formalize this distinction; it suffices to say that an event can be viewed as a change in state. A timed !-language is a set of timed state sequences. 2.1 Recursive Event-Clock Automata An event-clock automaton is a special case of a timed automaton <ref> [AD94] </ref>, where the starting of clocks is determined by the input instead of by the transition relation. We generalize the definition of event-clock automata from [AFH94]. There, an automaton accepts (or rejects) a given timed state sequence t . <p> The dual problems of validity and universality, however, cannot be decided. This follows from the following theorem, which shows that by closing event-clock automata or event-clock logic under projection, we obtain timed automata, whose universality problem is undecidable <ref> [AD94] </ref>. Theorem 11. For every timed automaton [AD94] we can construct a projection-closed event-clock automaton that defines the same timed !-language, and vice versa. <p> The dual problems of validity and universality, however, cannot be decided. This follows from the following theorem, which shows that by closing event-clock automata or event-clock logic under projection, we obtain timed automata, whose universality problem is undecidable <ref> [AD94] </ref>. Theorem 11. For every timed automaton [AD94] we can construct a projection-closed event-clock automaton that defines the same timed !-language, and vice versa. It follows that the formalisms of timed automata, projection-closed event-clock automata, P-EventClockTL, P-MinMaxML 2 , and Ld $ [Wil94] define the same class of timed !- languages. <p> It follows that the formalisms of timed automata, projection-closed event-clock automata, P-EventClockTL, P-MinMaxML 2 , and Ld $ [Wil94] define the same class of timed !- languages. This class is closed under positive boolean operations, but not under complement <ref> [AD94] </ref>. Corollary 2. The validity problems for P-MinMaxML 2 and P-EventClockTL and the universality problem for projection-closed event-clock automata are undecidable.
Reference: [AFH94] <author> R. Alur, L. Fix, and T.A. Henzinger. </author> <title> A determinizable class of timed automata. In Computer-aided Verification, </title> <publisher> LNCS 818 </publisher> <pages> 1-13. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The previously known results are listed in the following table, where the omission of superscripts indicates that time stamps are real numbers: Temporal logics Monadic theories Finite automata Fully decidable MetricIntervalTL [AFH96] EventClockTL [RS97] EventClockTA <ref> [AFH94] </ref> Positively decidable TL + + TA [Wil94] Ld $ [Wil94] TA [AD94] Fully undecidable MetricTL [AH93] ClockTL [AH94] TimeFunctionML 1 [AH93] TimeFunctionML 2 On one hand, the class of Timed Automata is unsatisfactory, because over real-numbered time it is only positively decidable: R-timed automata are not closed under complement, and <p> We show that the richer class of languages is obtained by closing the R-timed !-regular languages under projection. (It is unfortunate, but well-known <ref> [AFH94] </ref> that we cannot nontriv-ially have both full decidability and closure under projection in the case of real-numbered time.) The complete picture, then, results from adding the following line to the previous table (projection, or outermost existential quantification, is indicated by P-): Positively decidable 3 projection-closed P-EventClockTL P-MinMaxML 2 = Ld <p> We generalize the definition of event-clock automata from <ref> [AFH94] </ref>. There, an automaton accepts (or rejects) a given timed state sequence t . The automaton views the input sequence t starting from time 0 by executing a transition relation that is constrained by conditions on clocks. There are two clocks for each proposition p. <p> t + v 0 ) ? if for all v &gt; 0, not Accept t (B; t + v) The recursive event-clock automaton A defines a timed !-language, namely, the set of timed state sequences t such that Accept t (A; 0). 6 The following two theorems were proved in <ref> [AFH94] </ref> for the special case of level-1 event-clock automata.
Reference: [AFH96] <author> R. Alur, T. Feder, and T.A. Henzinger. </author> <title> The benefits of relaxing punctuality. </title> <journal> J. ACM, </journal> <volume> 43 </volume> <pages> 116-146, </pages> <year> 1996. </year>
Reference-contexts: The previously known results are listed in the following table, where the omission of superscripts indicates that time stamps are real numbers: Temporal logics Monadic theories Finite automata Fully decidable MetricIntervalTL <ref> [AFH96] </ref> EventClockTL [RS97] EventClockTA [AFH94] Positively decidable TL + + TA [Wil94] Ld $ [Wil94] TA [AD94] Fully undecidable MetricTL [AH93] ClockTL [AH94] TimeFunctionML 1 [AH93] TimeFunctionML 2 On one hand, the class of Timed Automata is unsatisfactory, because over real-numbered time it is only positively decidable: R-timed automata are not <p> Hence several restrictions of these classes have been studied. 1. The first restriction concerns the style of specifying timing constraints using time-bounded temporal operators. The Metric-Interval Logic MetricIntervalTL (also called MITL <ref> [AFH96] </ref>) is obtained from MetricTL by restricting the time bounds on temporal operators to nonsingular intervals. <p> Example 2. The EventClockTL formula 2 (p ! 3 (q ^ fl [5;5] r)) defines the timed !- language from Example 1. ut Theorem 4. [RS97] The satisfiability problem for EventClockTL is complete for Pspace. Metric-Interval Temporal Logic The formulas of MetricIntervalTL <ref> [AFH96] </ref> are built from propositional symbols, boolean connectives, and time-bounded "until" and "since" operators: ::= p j 1 ^ 2 j : j 1 U I 2 j 1 S I 2 where p is a proposition and I is a nonsingular interval whose finite endpoints are non-negative integers. <p> Note that, by contrast, the EventClockTL formula 2 (p ! fl [4;6] q) asserts the stronger requirement that after every p-state, the next subsequent q-state occurs at a time difference of at least 4 and at most 6 time units. ut Theorem 5. <ref> [AFH96] </ref> The satisfiability problem for MetricIntervalTL is complete for Ex-pspace. The satisfiability problem for MetricIntervalTL 0;1 is complete for Pspace.
Reference: [AH92] <author> R. Alur and T.A. Henzinger. </author> <title> Back to the future: towards a theory of timed regular languages. </title> <booktitle> In Proc. 33rd IEEE Symp. Foundations of Computer Science, </booktitle> <pages> pp. 177-186, </pages> <year> 1992. </year>
Reference-contexts: If time stamps are real instead of natural numbers, then the situation seems much less satisfactory. Several positively and fully decidable formalisms have been proposed, but no expressive equivalence results were known for fully decidable formalisms <ref> [AH92] </ref>.
Reference: [AH93] <author> R. Alur and T.A. Henzinger. </author> <title> Real-time logics: complexity and expressiveness. </title> <journal> Information and Computation, </journal> <volume> 104 </volume> <pages> 35-77, </pages> <year> 1993. </year>
Reference-contexts: A property of a real-time system, then, is a set of infinite time-stamped event sequences. We call such sets timed !-languages. If all time stamps are natural numbers, then there is again a very pleasant expressive equivalence between modal logics, classical logics, and finite automata <ref> [AH93] </ref>. Specifically, there are two natural ways of extending temporal logics with timing constraints. The Metric Temporal Logic MetricTL (also called MTL [AH93]) adds time bounds to temporal operators; for example, the MetricTL formula 2 (p ! 3 =5 q) specifies that every p event is followed by a q event <p> If all time stamps are natural numbers, then there is again a very pleasant expressive equivalence between modal logics, classical logics, and finite automata <ref> [AH93] </ref>. Specifically, there are two natural ways of extending temporal logics with timing constraints. The Metric Temporal Logic MetricTL (also called MTL [AH93]) adds time bounds to temporal operators; for example, the MetricTL formula 2 (p ! 3 =5 q) specifies that every p event is followed by a q event such that the difference between the two time stamps is exactly 5. <p> previously known results are listed in the following table, where the omission of superscripts indicates that time stamps are real numbers: Temporal logics Monadic theories Finite automata Fully decidable MetricIntervalTL [AFH96] EventClockTL [RS97] EventClockTA [AFH94] Positively decidable TL + + TA [Wil94] Ld $ [Wil94] TA [AD94] Fully undecidable MetricTL <ref> [AH93] </ref> ClockTL [AH94] TimeFunctionML 1 [AH93] TimeFunctionML 2 On one hand, the class of Timed Automata is unsatisfactory, because over real-numbered time it is only positively decidable: R-timed automata are not closed under complement, and the corresponding temporal and monadic logics (and regular expressions [ACM97]) have no negation operator. <p> in the following table, where the omission of superscripts indicates that time stamps are real numbers: Temporal logics Monadic theories Finite automata Fully decidable MetricIntervalTL [AFH96] EventClockTL [RS97] EventClockTA [AFH94] Positively decidable TL + + TA [Wil94] Ld $ [Wil94] TA [AD94] Fully undecidable MetricTL <ref> [AH93] </ref> ClockTL [AH94] TimeFunctionML 1 [AH93] TimeFunctionML 2 On one hand, the class of Timed Automata is unsatisfactory, because over real-numbered time it is only positively decidable: R-timed automata are not closed under complement, and the corresponding temporal and monadic logics (and regular expressions [ACM97]) have no negation operator. <p> In this paper, we show that MetricIntervalTL and EventClockTL are equally expressive, and by adding the ability to count, as expressive as EventClockTA. This result is quite surprising, because (1) over real-numbered time, unrestricted MetricTL is known to be strictly less expressive than unrestricted ClockTL <ref> [AH93] </ref>, and (2) the nonsingularity restriction (which prohibits exact time differences but allows the comparison of unrelated events) is very different in flavor from the event-clock restriction (which allows exact time differences but prohibits the comparison of unrelated events). <p> If we suppress this restriction, it can be shown that the real-time temporal logic MetricTL, which is MetricIntervalTL without the prohibition of singular intervals, can be embedded in MinMaxML 1 . Since MetricTL is undecidable <ref> [AH93] </ref>, so is the satisfiabilty problem for unrestricted MinMaxML 1 .
Reference: [AH94] <author> R. Alur and T.A. Henzinger. </author> <title> A really temporal logic. </title> <journal> J. ACM, </journal> <volume> 41 </volume> <pages> 181-204, </pages> <year> 1994. </year>
Reference-contexts: The Clock Temporal Logic ClockTL (also called TPTL <ref> [AH94] </ref>) adds clock variables to TL; for example, the time-bounded response requirement from above can be specified by the ClockTL formula 2 (p ! (x := 0)3 (q ^ x = 5)), where x is a variable representing a clock that is started by the quantifier (x := 0). <p> results are listed in the following table, where the omission of superscripts indicates that time stamps are real numbers: Temporal logics Monadic theories Finite automata Fully decidable MetricIntervalTL [AFH96] EventClockTL [RS97] EventClockTA [AFH94] Positively decidable TL + + TA [Wil94] Ld $ [Wil94] TA [AD94] Fully undecidable MetricTL [AH93] ClockTL <ref> [AH94] </ref> TimeFunctionML 1 [AH93] TimeFunctionML 2 On one hand, the class of Timed Automata is unsatisfactory, because over real-numbered time it is only positively decidable: R-timed automata are not closed under complement, and the corresponding temporal and monadic logics (and regular expressions [ACM97]) have no negation operator.
Reference: [Buc62] <author> J.R. Buchi. </author> <title> On a decision method in restricted second-order arithmetic. </title> <booktitle> In Proc. First Congress on Logic, Methodology, and Philosophy of Science (1960), </booktitle> <pages> pp. 1-11. </pages> <publisher> Stanford University Press, </publisher> <year> 1962. </year> <month> 12 </month>
Reference: [GPSS80] <author> D. Gabbay, A. Pnueli, S. Shelah, and J. Stavi. </author> <title> On the temporal analysis of fairness. </title> <booktitle> In Proc. 7th ACM Symp. Principles of Programming Languages, </booktitle> <pages> pp. 163-173, </pages> <year> 1980. </year>
Reference: [Kam68] <author> J.A.W. Kamp. </author> <title> Tense Logic and the Theory of Linear Order. </title> <type> PhD thesis, </type> <institution> University of California at Los Angeles, </institution> <year> 1968. </year>
Reference: [RS97] <author> J.-F. Raskin and P.-Y. Schobbens. </author> <title> State clock logic: a decidable real-time logic. In Hybrid and Real-time Systems, </title> <publisher> LNCS 1201 </publisher> <pages> 33-47. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The previously known results are listed in the following table, where the omission of superscripts indicates that time stamps are real numbers: Temporal logics Monadic theories Finite automata Fully decidable MetricIntervalTL [AFH96] EventClockTL <ref> [RS97] </ref> EventClockTA [AFH94] Positively decidable TL + + TA [Wil94] Ld $ [Wil94] TA [AD94] Fully undecidable MetricTL [AH93] ClockTL [AH94] TimeFunctionML 1 [AH93] TimeFunctionML 2 On one hand, the class of Timed Automata is unsatisfactory, because over real-numbered time it is only positively decidable: R-timed automata are not closed under <p> The restriction to nonsingularity prevents the specification of the exact real-numbered time difference 5 between events. 2. The second restriction concerns the style of specifying timing constraints using clock variables. The Event-Clock Logic EventClockTL (also called SCL <ref> [RS97] </ref>) and Event-Clock Automata EventClockTA are obtained from ClockTL and TA, respectively, by restricting the use of clocks to refer to the times of previous and next occurrences of events only. <p> time, which implies that the satisfiability problem for MinMaxML 1 is nonelementary [Sto74]. 3 The Counter-Free Regular Timed !-Languages 3.1 Two Decidable Real-Time Temporal Logics We recall the definitions of two real-time temporal logics that are known to have decidable satisfiability problems. 8 Event-Clock Temporal Logic The formulas of EventClockTL <ref> [RS97] </ref> are built from propositional symbols, boolean connectives, the temporal "until" and "since" operators, and two real-time operators: at any time t, the history operator I asserts that was true last in the interval t I, and the prophecy operator fl I asserts that will be true next in the interval <p> The EventClockTL formula defines the timed !-language that contains all timed state sequences t with (t; 0) j= . Example 2. The EventClockTL formula 2 (p ! 3 (q ^ fl [5;5] r)) defines the timed !- language from Example 1. ut Theorem 4. <ref> [RS97] </ref> The satisfiability problem for EventClockTL is complete for Pspace.
Reference: [Sis83] <author> A.P. Sistla. </author> <title> Theoretical Issues in the Design and Verification of Distributed Systems. </title> <type> PhD thesis, </type> <institution> Harvard University, </institution> <year> 1983. </year>
Reference-contexts: This is demonstrated by the fact that if we add either automata connectives (in the style of [WVS83]) or quantification over propositions (in the style of <ref> [Sis83] </ref>) to either 10 EventClockTL or MetricIntervalTL (or MetricIntervalTL 0;1 ), we obtain a formalism that defines exactly the full class of the !-regular real-time languages. These results complete the pleasant analogy to the untimed case. <p> Then, (t; t) j= (9p) iff (t p ; t) j= for some timed state sequence t p that agrees with t on all propositions except p. Theorem 9. The satisfiability problems for Q-EventClockTL and Q-MetricIntervalTL are decidable. Since already the untimed quantified temporal logic Q-TL is nonelementary <ref> [Sis83] </ref>, so are the satisfiability problems for Q-EventClockTL and Q-MetricIntervalTL 0;1 . Theorem 10. For every MinMaxML 2 formula we can construct an Q-EventClockTL formula that defines the same timed !-language. For every Q-EventClockTL formula we can construct an Q-MetricIntervalTL 0;1 formula that defines the same timed !-language.
Reference: [Sto74] <author> L.J. Stockmeyer. </author> <title> The Complexity of Decision Problems in Automata Theory and Logic. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1974. </year>
Reference-contexts: Corollary 1. The satisfiability problem for MinMaxML 2 is decidable. It is not difficult to embed the first-order fragment ML 1 of the sequential calculus into MinMaxML 1 in linear time, which implies that the satisfiability problem for MinMaxML 1 is nonelementary <ref> [Sto74] </ref>. 3 The Counter-Free Regular Timed !-Languages 3.1 Two Decidable Real-Time Temporal Logics We recall the definitions of two real-time temporal logics that are known to have decidable satisfiability problems. 8 Event-Clock Temporal Logic The formulas of EventClockTL [RS97] are built from propositional symbols, boolean connectives, the temporal "until" and "since"
Reference: [Wil94] <author> T. Wilke. </author> <title> Specifying timed state sequences in powerful decidable logics and timed automata. In Formal Techniques in Real-time and Fault-tolerant Systems, </title> <publisher> LNCS 863 </publisher> <pages> 694-715. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The previously known results are listed in the following table, where the omission of superscripts indicates that time stamps are real numbers: Temporal logics Monadic theories Finite automata Fully decidable MetricIntervalTL [AFH96] EventClockTL [RS97] EventClockTA [AFH94] Positively decidable TL + + TA <ref> [Wil94] </ref> Ld $ [Wil94] TA [AD94] Fully undecidable MetricTL [AH93] ClockTL [AH94] TimeFunctionML 1 [AH93] TimeFunctionML 2 On one hand, the class of Timed Automata is unsatisfactory, because over real-numbered time it is only positively decidable: R-timed automata are not closed under complement, and the corresponding temporal and monadic logics (and <p> The previously known results are listed in the following table, where the omission of superscripts indicates that time stamps are real numbers: Temporal logics Monadic theories Finite automata Fully decidable MetricIntervalTL [AFH96] EventClockTL [RS97] EventClockTA [AFH94] Positively decidable TL + + TA <ref> [Wil94] </ref> Ld $ [Wil94] TA [AD94] Fully undecidable MetricTL [AH93] ClockTL [AH94] TimeFunctionML 1 [AH93] TimeFunctionML 2 On one hand, the class of Timed Automata is unsatisfactory, because over real-numbered time it is only positively decidable: R-timed automata are not closed under complement, and the corresponding temporal and monadic logics (and regular expressions [ACM97]) <p> Theorem 11. For every timed automaton [AD94] we can construct a projection-closed event-clock automaton that defines the same timed !-language, and vice versa. It follows that the formalisms of timed automata, projection-closed event-clock automata, P-EventClockTL, P-MinMaxML 2 , and Ld $ <ref> [Wil94] </ref> define the same class of timed !- languages. This class is closed under positive boolean operations, but not under complement [AD94]. Corollary 2. The validity problems for P-MinMaxML 2 and P-EventClockTL and the universality problem for projection-closed event-clock automata are undecidable.
Reference: [Wol82] <author> P.L. Wolper. </author> <title> Synthesis of Communicating Processes from Temporal Logic Specifications. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1982. </year>
Reference: [WVS83] <author> P.L. Wolper, M.Y. Vardi, and A.P. Sistla. </author> <title> Reasoning about infinite computation paths. </title> <booktitle> In Proc. 24th IEEE Symp. Foundations of Computer Science, </booktitle> <pages> pp. 185-194, </pages> <year> 1983. </year> <month> 13 </month>
Reference-contexts: This is demonstrated by the fact that if we add either automata connectives (in the style of <ref> [WVS83] </ref>) or quantification over propositions (in the style of [Sis83]) to either 10 EventClockTL or MetricIntervalTL (or MetricIntervalTL 0;1 ), we obtain a formalism that defines exactly the full class of the !-regular real-time languages. These results complete the pleasant analogy to the untimed case.
References-found: 16

