URL: http://www.isi.edu/expect/papers/swartout-gil-arpi96.ps
Refering-URL: http://www.isi.edu/expect/papers/papers-ka.html
Root-URL: 
Email: -swartout, gil-@isi.edu  
Title: EXPECT: A User-Centered Environment for the Development and Adaptation of Knowledge-Based Planning Aids  
Author: William R. Swartout Yolanda Gil 
Address: 4676 Admiralty Way Marina del Rey, CA 90292  
Affiliation: USC/Information Sciences Institute  
Abstract: EXPECT provides an environment for developing knowledge-based systems that allows end-users to add new knowledge without needing to understand the details of system organization and implementation. The key to EXPECT's approach is that it understands the structure of the knowledge-based system being built: how it solves problems and what knowledge it needs to support problemsolving. EXPECT uses this information to guide users in maintaining the knowledge-based system. We have used EXPECT to develop a tool for evaluating transportation plans. 
Abstract-found: 1
Intro-found: 1
Reference: [Anzai and Simon 1979] <author> Y. Anzai and H. A. Simon. </author> <title> The Theory of Learning by Doing. </title> <journal> In Psychological Review, </journal> <volume> 86(2) 124-140, </volume> <year> 1979. </year>
Reference-contexts: this representation that affects both acquisition and explanation is that it is removed from the way people think and talk about what they are doing, since protocols of people solving problems show that they use verb clauses to describe what they are doing rather than state descriptions (see for example, <ref> [Anzai and Simon 1979] </ref>). To address these difficulties and decrease the distance between EXPECTS internal representation and how people talk about what they do, EXPECTs representation is based on a vocabulary of verbs.
Reference: [Chandrasekaran and Mittal, 1982] <author> B. Chandrasekaran and S. Mittal. </author> <title> Deep versus compiled knowledge approaches to diagnostic problem solving. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence. AAAI, </booktitle> <year> 1992. </year>
Reference-contexts: with a better understanding of the problem solving process. 3.1 Separation of Knowledge It is well established that a major source of difficulties in understanding, modifying and augmenting first generation knowledge based systems stemmed from the use of low-level knowledge representations that failed to distinguish different kinds of knowledge (see <ref> [Chandrasekaran and Mittal, 1982; Clancey, 1983b; Swartout, 1983] </ref>). In a first generation system, domain facts, problem solving know ledge, and terminological definitions were all expressed in rules. A single rule might mix together clauses concerned with the user interface, the systems problem solving stra t-egy and internal record-keeping.
Reference: [Chandrasekaran, 1986] <author> B. Chandrasekaran. </author> <title> Generic tasks in knowledge-based reasoning. </title> <booktitle> IEEE Expert , 1(3) </booktitle> <pages> 23-30, </pages> <year> 1986. </year>
Reference: [Clancey, 1983a] <author> W.J. Clancey. </author> <title> The advantages of abstract control knowledge in expert system design. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 74-78, </pages> <address> Washington, DC, 1983. </address> <publisher> AAAI. </publisher>
Reference: [Clancey, 1983b] <author> W.J. Clancey. </author> <title> The epistemology of a rule-based expert system: A framework for explanation. </title> <journal> Artificial Intelligence, </journal> <volume> 20(3) </volume> <pages> 215-251, </pages> <year> 1983. </year>
Reference-contexts: with a better understanding of the problem solving process. 3.1 Separation of Knowledge It is well established that a major source of difficulties in understanding, modifying and augmenting first generation knowledge based systems stemmed from the use of low-level knowledge representations that failed to distinguish different kinds of knowledge (see <ref> [Chandrasekaran and Mittal, 1982; Clancey, 1983b; Swartout, 1983] </ref>). In a first generation system, domain facts, problem solving know ledge, and terminological definitions were all expressed in rules. A single rule might mix together clauses concerned with the user interface, the systems problem solving stra t-egy and internal record-keeping.
Reference: [Gil 1994] <author> Gil, Y. </author> <title> Knowledge Refinement in a Reflective Architecture. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence (AAAI-94) , 1994. </booktitle>
Reference: [Gil and Paris 1994] <author> Gil, Y., and Paris, C.L. </author> <title> Towards Method-Independent Knowledge Acquisition. </title> <booktitle> In Knowledge Acquisition , 6 (2), </booktitle> <pages> pp. 163-178, </pages> <year> 1994. </year>
Reference: [Hasling et al., 1984] <author> D.W. Hasling, W.J. Clancey, and G. Rennels. </author> <title> Strategic explanations for a diagnostic consultation system. </title> <journal> International Journal of Man-Machine Stu dies, </journal> <volume> 20(1), </volume> <year> 1984. </year>
Reference: [MacGregor 1988] <author> MacGregor, R. </author> <title> A Deductive Pattern Matcher. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence. </booktitle> <address> St. Paul, MN, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: Domain facts, on the other hand, use domain terminology to represent what exists. To represent both domain facts and terminology, EXPECT uses Loom <ref> [MacGregor 1988] </ref>. Loom provides a descriptive logic representation language and a classifier for inference. Facts are represented as Loom instances, while terminology is represented using Loom concepts. Both instances and concepts are structured, frame-based representations with slots that indicate relations in which the object is involved.
Reference: [Musen and Tu 1993] <author> Musen, M. A., and Tu, S. W. </author> <title> Problemsolving models for generation of taskspecific knowledge acquisition tools. </title> <editor> In J. Cuena (Ed.), </editor> <booktitle> Knowledge-Oriented Software Design , Elsevier, </booktitle> <address> Amsterdam, </address> <year> 1993. </year>
Reference-contexts: Additionally, if the user changes his mind about which problemsolving stra t-egy is appropriate, he may also have to change tools, p o-tentially losing a lot of work in re-configuring the domain knowledge. Recent knowledge acquisition work <ref> [Klinker et al. 1991; Musen and Tu 1993] </ref> has partially addressed these problems by creating tools that can use multiple problemsolving methods. In PROTG II [Musen and Tu, 1993], problem solving methods are composed of pre-encoded building blocks.
Reference: [Neches et al., 1985] <author> Robert Neches, William Swartout, and Johanna D. Moore. </author> <title> Enhanced Maintenance and Explanation of Expert Systems Through Explicit Models of Their Development. </title> <journal> IEEE Transactions on Software Eng i-neering, </journal> <month> SE-11(11):1337-1351 November </month> <year> 1985. </year>
Reference: [Swartout, 1983] <author> W.R. Swartout, </author> <title> Xplain : A system for creating and explaining expert consulting systems. </title> <journal> Artificial Intelligence, </journal> <volume> 21(3) </volume> <pages> 285-325, </pages> <month> September </month> <year> 1983. </year> <note> Also available as ISI/RS-83-4. </note>
Reference-contexts: with a better understanding of the problem solving process. 3.1 Separation of Knowledge It is well established that a major source of difficulties in understanding, modifying and augmenting first generation knowledge based systems stemmed from the use of low-level knowledge representations that failed to distinguish different kinds of knowledge (see <ref> [Chandrasekaran and Mittal, 1982; Clancey, 1983b; Swartout, 1983] </ref>). In a first generation system, domain facts, problem solving know ledge, and terminological definitions were all expressed in rules. A single rule might mix together clauses concerned with the user interface, the systems problem solving stra t-egy and internal record-keeping.
Reference: [Swartout et al., 1991] <author> William R. Swartout, Cecile L. Paris, and Johanna D. Moore. </author> <title> Design for explainable expert systems. </title> <journal> IEEE Expert, </journal> <volume> 6(3) </volume> <pages> 58-64, </pages> <month> June </month> <year> 1991 </year>
Reference-contexts: It is then possible to build tools that exploit this additional information to provide enhanced capabilities. In prior work on the EES framework <ref> [Neches et al, 1985; Swartout et al., 1991] </ref> we explored the architectural modifications that are needed to support explanation. EXPECT extends the EES framework to support knowledge acquisition. In this paper, we discuss the architectural features that support knowledge acquisition.
Reference: [Wielinga and Breuker, 1986] <author> B.J.Wielinga and J.A. Breuker, </author> <title> Models of Expertise, </title> <booktitle> ECAI 1986, </booktitle> <pages> 497-509. </pages>
References-found: 14

