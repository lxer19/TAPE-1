URL: ftp://st.cs.uiuc.edu/pub/patterns/papers/PatQandA.ps
Refering-URL: http://st-www.cs.uiuc.edu/users/patterns/papers/
Root-URL: http://www.cs.uiuc.edu
Email: cope@research.att.com  
Title: Software Design Patterns: Common Questions and Answers What is a pattern? The term pattern, as
Author: James O. Coplien 
Note: 1:  2: Where does this use of the term `pattern'  Software  1  
Affiliation: Software Production Research Department  AT&T Bell Laboratories  
Abstract: The term pattern applies both to the thing (for example, a collection class and its associated iterator) and the directions for making a thing. In this sense, software patterns can be likened to a dress pattern: the general shape is in the pattern itself, though each pattern must be tailored to its context. The mainstream of this movement moved on to what we know as modular construction. The architect Christopher Alexander broke with that movement, noting that the great architectures of history were not made from rigorous, planned designs, but that their pieces were custom-fit to each other and to the building's surroundings. He also noted that some buildings were more aesthetically pleasing than others, and that these aesthetics were often attuned to human needs and comforts. He found recurring themes in architecture, and captured them into descriptions (and instructions) that he called patterns. The term `pattern' appeals to the replicated similarity in a design, and in particular to similarity that makes room for variability and customization in each of the elements. Thus, Window on Two Sides of Every Room is a pattern, yet it prescribes neither the size of the windows, the distance between them, their height from the floor, nor their framing (though there are other patterns that may refine these properties). We observe patterns everywhere as we interact with the world around us. There are patterns in building architecture, patterns in nature, and patterns in the software people write. Recent work in software visualization is striving to bring out the patterns in software. [1] Not all these patterns are ``good'': for example, such research has found that people copy code from one place in a system to another, instead of generalizing the original code and reusing it in-place. Patterns that we observe in a system that has already been built are non-generative, and are sometimes called Gamma patterns, after the pioneering work of Erich Gamma. [2] Such patterns are descriptive and passive. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Church, Kenneth Ward, and Jonathan Isaac Helfman. ``Dotplot: </author> <title> A Program for Exploring Self-Similarity in Millions of Lines for Text and Code.'' </title> <journal> American Statistical Association, Institute of Mathematical Statistics and Interface Foundations of North America, </journal> <volume> Vol. 2, No. 2, </volume> <pages> pp. 153-174. </pages>
Reference-contexts: There are patterns in building architecture, patterns in nature, and patterns in the software people write. Recent work in software visualization is striving to bring out the patterns in software. <ref> [1] </ref> Not all these patterns are ``good'': for example, such research has found that people copy code from one place in a system to another, instead of generalizing the original code and reusing it in-place.
Reference: 2. <author> Gamma, Erich. </author> <title> ``Design Patterns Abstraction and Reuse of Object-Oriented Designs.'' </title> <booktitle> in Proceedings of the European Conference on Object-Oriented Programming, </booktitle> <editor> Oscar Nierstrasz, ed. </editor> <publisher> Berlin: Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Patterns that we observe in a system that has already been built are non-generative, and are sometimes called Gamma patterns, after the pioneering work of Erich Gamma. <ref> [2] </ref> Such patterns are descriptive and passive. - 1 - That we can find these patterns doesn't imply any rationale behind them, and not every pattern leads to desirable results.
Reference: 3. <author> Coplien, James O. </author> <title> Advanced C++ Programming Styles and Idioms. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1992. </year>
Reference-contexts: I have discovered that recasting idioms in pattern form often makes them more accessible to moderately experienced C++ programmers. For example, compare the pattern form of C++ Type Conversion in Appendix 1, with the less structured discussion on pages 54 through 58 of my advanced C++ text. <ref> [3] </ref> 11: How do patterns relate to creativity? Design is a creative act; so is the creation or application of a design pattern.
Reference: 4. <author> Beck, Kent. </author> <title> ``Patterns and Software Development.'' </title> <journal> Dr. Dobb's Journal, </journal> <volume> Vol. 19, No. 2, </volume> <pages> pp. 18-23. </pages>
Reference-contexts: Patterns channel creativity; they neither replace nor constrain it. 12: Where can I find patterns? Numerous articles and papers have now appeared both in published journals and in the trade press; in particular, see those by Beck, <ref> [4] </ref> Booch, [5] Gabriel, [6] and Johnson. [7] Watch for my forthcoming column on pattern in the C++ Report. Also, get plugged into the upcoming Patterns Conference in August in Illinois: PLoP (Pattern Languages of Programs).
Reference: 5. <author> Booch, Grady. </author> <title> ``Patterns.'' </title> <journal> Object Magazine, </journal> <volume> Vol. 3, No. 2, </volume> <publisher> SIGS Publications, </publisher> <address> New York, NY. </address>
Reference-contexts: Patterns channel creativity; they neither replace nor constrain it. 12: Where can I find patterns? Numerous articles and papers have now appeared both in published journals and in the trade press; in particular, see those by Beck, [4] Booch, <ref> [5] </ref> Gabriel, [6] and Johnson. [7] Watch for my forthcoming column on pattern in the C++ Report. Also, get plugged into the upcoming Patterns Conference in August in Illinois: PLoP (Pattern Languages of Programs).
Reference: 6. <author> Gabriel, Richard. </author> <title> Pattern Languages. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> Vol. 6, No. 2, </volume> <editor> p. </editor> <volume> 14, </volume> <month> Jan. </month> <title> 1994. </title> <publisher> SIGS Publications, </publisher> <address> New York, NY. </address>
Reference-contexts: Patterns channel creativity; they neither replace nor constrain it. 12: Where can I find patterns? Numerous articles and papers have now appeared both in published journals and in the trade press; in particular, see those by Beck, [4] Booch, [5] Gabriel, <ref> [6] </ref> and Johnson. [7] Watch for my forthcoming column on pattern in the C++ Report. Also, get plugged into the upcoming Patterns Conference in August in Illinois: PLoP (Pattern Languages of Programs).
Reference: 7. <author> Johnson, Ralph E. </author> <title> ``Documenting Frameworks using Patterns.'' </title> <journal> ACM SIGPLAN Notices, </journal> <volume> Vol. 27, No. 10, </volume> <month> Oct. </month> <year> 1992, </year> <note> ff. 63. </note>
Reference-contexts: Patterns channel creativity; they neither replace nor constrain it. 12: Where can I find patterns? Numerous articles and papers have now appeared both in published journals and in the trade press; in particular, see those by Beck, [4] Booch, [5] Gabriel, [6] and Johnson. <ref> [7] </ref> Watch for my forthcoming column on pattern in the C++ Report. Also, get plugged into the upcoming Patterns Conference in August in Illinois: PLoP (Pattern Languages of Programs).
References-found: 7

