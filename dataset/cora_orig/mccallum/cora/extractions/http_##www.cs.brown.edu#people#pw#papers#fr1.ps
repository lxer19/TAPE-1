URL: http://www.cs.brown.edu/people/pw/papers/fr1.ps
Refering-URL: http://www.cs.brown.edu/people/pw/
Root-URL: http://www.cs.brown.edu
Title: Frameworks for Compound Documents 1/15 Frameworks for Compound Active Documents (Draft)  
Author: Peter Wegner, 
Web: www.cs.brown.edu/people/pw  
Note: Oct 20 1997  
Abstract: To provide a framework for component-based technology, we combine the bottom-up analysis of three specific systems with top-down conceptual models of interaction. CORBA/OpenDoc, COM/OLE/ ActiveX, and Java/JavaBeans concretely illustrate emerging principles of component and document design, such as the events-properties-methods model. They support components with visual, interactive listening membranes that transform black-box computers into glass-box systems whose picture windows allow clients to both see and modify what is inside. Frameworks are viewed as extensible collaborating collections of components with goal-directed behavior. Collaboration is conceptually modeled as a constraint on behavior just as collaboration among partners in a marriage or workers on an assembly line constrains the behavior of people. Interactive structure among objects and components is expressed by patterns, which are notoriously difficult to formalize, in large measure because they specify interactive systems that cannot be formalized by first-order logic. A constraint-based specification paradigm for components is introduced to express the collaborative semantics of frameworks. 
Abstract-found: 1
Intro-found: 1
Reference: [AG] <author> Ken Arnold and James Gosling, </author> <title> The Java Programming Language, </title> <publisher> Addison Wesley 1996 </publisher>
Reference-contexts: Extending Interfaces and Implementing Classes Javas interface model provides a foundation for its component technology by explicitly distinguishing between state-independent interfaces and state-dependent objects and classes <ref> [AG] </ref>.
Reference: [CS] <author> James Coplien and Douglas Schmidt, </author> <title> Pattern Languages of Program Design, </title> <publisher> Addison Wesley 1995. </publisher>
Reference: [Di] <author> Edsger Dijkstra, </author> <title> Goto Considered Harmful, </title> <journal> CACM 1968. </journal>
Reference: [JB] <institution> Java Beans 1.0 Specification, Javasoft, </institution> <month> December </month> <year> 1996 </year>
Reference-contexts: Java Beans are reusable software components that provide both run-time functionality and design hooks for creating composite structures that can be manipulated in a builder tool <ref> [JB] </ref>. JavaBeans is a construction environment that requires a builder and some beans (usually supplied in a Java archive resource (JAR) file) used as primitive components in constructing composite beans.
Reference: [Kn] <author> Donald Knuth, </author> <title> Structured Programming with Goto Statements, </title> <journal> Computing Surveys, </journal> <month> December </month> <year> 1974. </year>
Reference: [OHE] <author> Robert Orfali, Dan Harkey, and Jeri Edwards, </author> <title> The Essential Distributed Objects Survival Guide, closed by C2 component C2, client open isolated subsystem closed by C1 closed pairopen isolated subsystem component C1, server dialog between two open agents that together form a closed system Frameworks for Compound Documents 15/15 Wiley 1996. </title>
Reference-contexts: developers, CORBA common facilities user interfaces: end-user human-computer interface requirements environment tools programming language operating system hardware (computer) end-user services system services application services object services a) Layers of Transformation b) Layers of Interaction Frameworks for Compound Documents 3/15 Since CORBAs object services and IDL have been widely described elsewhere <ref> [OHE, We4] </ref> and our primary concern is application services provided by frameworks, we briey examine CORBAs object and system services as a prelude to a more detailed examination of application services. 3. <p> Server-side software includes object adapters that bind object interfaces and manage object references, and a server skeleton that uses the output of object adapters to map operators to the methods that implement them. 4. CORBA System and Application Services CORBAs system services (common object services) are described in <ref> [OHE] </ref>, which lists 16 representative operating-system services implemented as classes of a class library: CORBA System Services: naming: for managing, querying, and navigating through object name spaces events: for registering the interest of users in events, push and pull invocation life cycle: for creating, copying, moving, and deleting compound objects trader: <p> that supports multiple interfaces through a query interface function: QueryInterface: query the set of interfaces to find a specific interface COM interfaces specify a components plugs and sockets but do not directly support identity, so that clients are not guaranteed access to the same object on successive occasions of access <ref> [OHE] </ref>. This model expresses state-independent services but not objects like bank accounts whose services depend on their state. COM expresses objects by special-purpose interfaces like the dataobject interface for data transfer and by monikers that provide a powerful naming facility for associating names with storage structures.
Reference: [OPG] <editor> OpenDoc Programmers Guide, </editor> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: They are dynamically created as sessions that persist and evolve over their life cycle. OpenDoc documents are built up from active parts that know how to draw and print themselves and otherwise control their own destiny <ref> [OPG] </ref>. Interface behavior is controlled by part editors, implemented by subclasses, that specialize general-purpose editing facilities to the particular part. Part editors define how the part is initialized, drawn, and moved (externalized) and specify events in which the part is interested.
Reference: [Ru] <author> James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy, and William Lorensen, </author> <title> Object-Oriented Modeling and Design, </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference: [We1] <author> Peter Wegner, </author> <title> Interactive Foundations of Computing, </title> <note> To appear in Theoretical Computer Science, available from www.cs.brown.edu/people/pw </note>
Reference-contexts: Input through a given interface is sequential, though input to a system with multiple input ports involves distributed multiple input streams that cannot in general be Frameworks for Compound Documents 11/15 expressed as a sequential (serializable) input stream <ref> [We1] </ref>. Components with visual interfaces, such as beans, are abstractly modeled by events, properties, and methods, which extend notions of control, variable, and operation to express the semantics of visual interaction. <p> Visual interfaces require notions of control, variables, and operations to be extended. Visibility and interaction play distinct roles in the new paradigm: visibility by itself facilitates conceptual understanding through browsing, while visual interaction extends computational problem-solving power <ref> [We1] </ref>: Visual (browsing) interfaces: Visual interfaces that support browsing enrich understanding and provide system programmers with alternative ways of presenting data. Netscape Navigator and Internet Explorer illustrate the power of noninteractive visual browsing interfaces. <p> The irreducibility of components to algorithms can be proved very simply by showing that interactive systems cannot be modeled by Turing machines with finite initial input tapes <ref> [We1] </ref>. Greater expressiveness follows from the fact that Turing machines with infinite tapes are known to be more expressive than regular Turing machines. <p> Constraints are a more powerful behavior-specification technique than composition because they make no assumption about the behavior being constrained, allowing the behavior of nonalgorithmic noncompositional collaborative components to be described. The abstract modeling of composition by behavior constraints, developed in <ref> [We1] </ref>, is illustrated in Figure 4, where the component C1 gives up behavioral freedom when constrained to collaborate exclusively with C2. Components that in isolation are interactive open systems, free to interact with any client, become noninteractive closed systems when constrained to interact exclusively with each other.
Reference: [We2] <author> Peter Wegner, </author> <title> Why Interaction Is More Powerful than Algorithms, </title> <journal> CACM, </journal> <month> May </month> <year> 1997. </year>
Reference-contexts: Interfaces attached to components with state provide persistent services over time whose behavior is described by interaction histories rather than by transformations <ref> [We2] </ref>. Methods of an interface are listening mechanisms triggered by events. Event models that provide a foundation for the semantics of interfaces are discussed in the next section in exploring the component model of Java Beans.
Reference: [We3] <editor> Peter Wegner, </editor> <booktitle> Interactive Foundations of Object-Based Programming, IEEE Computer, </booktitle> <month> Oct. </month> <year> 1995. </year>
Reference: [We4] <author> Peter Wegner, </author> <title> Interactive Software Technology, </title> <booktitle> Handbook of Computer Science and Engineering, </booktitle> <publisher> CRC Press, </publisher> <month> December </month> <year> 1996. </year>
Reference-contexts: developers, CORBA common facilities user interfaces: end-user human-computer interface requirements environment tools programming language operating system hardware (computer) end-user services system services application services object services a) Layers of Transformation b) Layers of Interaction Frameworks for Compound Documents 3/15 Since CORBAs object services and IDL have been widely described elsewhere <ref> [OHE, We4] </ref> and our primary concern is application services provided by frameworks, we briey examine CORBAs object and system services as a prelude to a more detailed examination of application services. 3.
References-found: 12

