URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall97/papers/kishinevsky2.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall97/abstract/kishinevsky.html
Root-URL: http://www.cs.berkeley.edu
Title: Place Chart Nets and their synthesis  
Author: Michael Kishinevsky, Alex Kondratyev, Alexander Taubin, Alex Yakovlev, 
Address: Barcelona, Spain  Torino, Italy  Japan  England  
Affiliation: The Univ. of Aizu, Japan Jordi Cortadella, Univ. Politecnica de Catalunya,  The Univ. of Aizu, Japan Luciano Lavagno, Politecnico di  The Univ. of Aizu,  Univ. of Newcastle upon Tyne,  
Abstract: A model, called Place Chart Nets (PCN), is presented. It allows the modelling of both asynchronicity and exception handling (preemption). Contrary to State Charts and other reactive models, which are inherently synchronous, PCNs specify a system behavior using partial orders. Contrary to Petri nets, PCNs have a notion of hierarchy. Contrary to other hierarchical models based on Petri net extensions, the hierarchy in PCNs is determined by preemption. We show that PCNs are a non-trivial generalization of classical PNs, in the sense that (1) for the finite (bounded) case modeling a PCN may require an exponentially larger PN, (2) for the infinite (unbounded) case a class of PCN languages properly includes a class of PN languages and (3) coverability of a marking and k-boundedness of a submarking for PCNs are decidable. Then we present a method for synthesis of safe PCNs from transition systems, which generalizes the theory of regions previously developed for PNs and extend the results for unsafe (but bounded) PCNs and for systems with priorities. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Agerwala. </author> <title> A complete model for representing the coordination of asynchronous processes. </title> <institution> Hopkins Computer Research Report 32, Johns Hopkins University, </institution> <month> July </month> <year> 1974. </year>
Reference-contexts: Problem 4 is a modification of Problem 3 under constraints on generation of preemptive transitions. 6.6 Power of PCNs with priorities In this section we show that PCNs with vertical priorities are Turing complete. Theorem 6.1 PCNs with vertical priorities are Turing complete. Proof: In <ref> [1, 32] </ref> it is shown that inhibitor nets can model Shepardson's register machines (which are Turing complete) and therefore inhibitor nets are Turing complete. A register machine has a finite number of registers of unlimited capacity.
Reference: [2] <author> T. Araki and T. Kasami. </author> <title> Some decision problems related to the reachability problem for petri nets. </title> <journal> Theor. Computer Science, </journal> <volume> 3 </volume> <pages> 85-104, </pages> <year> 1977. </year>
Reference-contexts: The following inclusion holds: RL P N L P CN L CSL, while P CN L and CF L are still incomparable. 4.3 Reachability, coverability and k-boundedness of PCNs PCNs can be modeled with reset nets <ref> [2, 33, 23] </ref> a sub-class of self-modifying nets [2, 33, 34]. Reset nets are flat and have no hierarchy, however they can contain reset arcs. <p> The following inclusion holds: RL P N L P CN L CSL, while P CN L and CF L are still incomparable. 4.3 Reachability, coverability and k-boundedness of PCNs PCNs can be modeled with reset nets [2, 33, 23] a sub-class of self-modifying nets <ref> [2, 33, 34] </ref>. Reset nets are flat and have no hierarchy, however they can contain reset arcs. If transition t is connected by a reset arc (p; t) with a place p, then after firing of t all tokens in p are erased. <p> has been given in [4] and is based on building a finite coverability tree for backward reachability in reset nets starting from v 11 . * k-boundedness: it follows from decidability of the coverability problem that k-boundedness of a place chart (any subset of place charts) is decidable. * Reachability: <ref> [2] </ref> shows that it is undecidable whether an arbitrary marking m is reachable in a reset net. 4.4 Commutativity of PCNs It is known that unlabeled PNs are commutative in the following sense: for any reachable marking m and pair of transitions t 1 and t 2 such that m &lt;t
Reference: [3] <author> A. Arnold. </author> <title> Finite Transition Systems. </title> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference: [4] <author> A. Arnold and M. La Heux. </author> <title> Vector addition systems and semi-dyck languages. </title> <type> Technical Report Publications 78, </type> <institution> Universite Lille, France, </institution> <year> 1976. </year>
Reference-contexts: The following properties of reset nets are also valid for PCNs: * Coverability of a marking: Given an integer vector v it is decidable whether there is a reachable marking m such that m v. The proof has been given in <ref> [4] </ref> and is based on building a finite coverability tree for backward reachability in reset nets starting from v 11 . * k-boundedness: it follows from decidability of the coverability problem that k-boundedness of a place chart (any subset of place charts) is decidable. * Reachability: [2] shows that it is
Reference: [5] <author> E. Badouel, L. Bernardinello, and Ph. Darondeau. </author> <title> Polynomial algorithms for the synthesis of bounded nets. </title> <type> Technical Report 2316, </type> <institution> INRIA, </institution> <address> RENNES Cedex, France, </address> <year> 1994. </year>
Reference-contexts: 10 Therefore, a reset arc can be also thought as an output arc for t. 11 For PNs coverability tree is build for forward reachability [28, 32]. 12 5 Synthesis of safe PCNs The theory of regions was first presented in [18, 31] and further applied to PN synthesis in <ref> [14, 7, 5, 12, 13] </ref>. In this section we generalize the theory of synthesis of safe PNs presented in [12, 13] to synthesis of safe PCNs. Let us consider the following problem: Given: a transition system T S.
Reference: [6] <author> L. Bernardinello and F. De Cindio. </author> <title> A survey of basic net models and modular net classes. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> volume 609, </volume> <pages> pages 304-351, </pages> <year> 1992. </year>
Reference: [7] <author> L. Bernardinello, G. De Michelis, K. Petruni, and S. Vigna. </author> <title> On synchronic structure of transition systems. </title> <type> Technical report, </type> <institution> Universita di Milano, Milano, </institution> <year> 1994. </year>
Reference-contexts: 10 Therefore, a reset arc can be also thought as an output arc for t. 11 For PNs coverability tree is build for forward reachability [28, 32]. 12 5 Synthesis of safe PCNs The theory of regions was first presented in [18, 31] and further applied to PN synthesis in <ref> [14, 7, 5, 12, 13] </ref>. In this section we generalize the theory of synthesis of safe PNs presented in [12, 13] to synthesis of safe PCNs. Let us consider the following problem: Given: a transition system T S.
Reference: [8] <author> G. Berry, P. Couronne, and G. Gonthier. </author> <title> The synchronous approach to reactive and real-time systems. </title> <journal> IEEE Proceedings, </journal> <volume> 79, </volume> <month> September </month> <year> 1991. </year>
Reference: [9] <author> G. Berry and H. Touati. </author> <title> Optimized controller synthesis using ESTEREL. </title> <booktitle> In Proceedings of the International Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1993. </year>
Reference: [10] <author> Sh. S. Bhattacharyya, P. K. Murthy, and E. A. Lee. </author> <title> Software Synthesis from Dataflow Graphs. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1996. </year>
Reference: [11] <author> J. Buck, S. Ha, E.A. Lee, and D.G. Messerschmitt. Ptolemy: </author> <title> a framework for simulating and prototyping heterogeneous systems. </title> <journal> Interntional Journal of Computer Simulation, special issue on Simulation Software Development, </journal> <month> January </month> <year> 1990. </year>
Reference: [12] <author> J. Cortadella, M. Kishinevsky, L. Lavagno, and A. Yakovlev. </author> <title> Synthesizing Petri nets from state-based models. </title> <booktitle> In Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pages 164-171, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: 10 Therefore, a reset arc can be also thought as an output arc for t. 11 For PNs coverability tree is build for forward reachability [28, 32]. 12 5 Synthesis of safe PCNs The theory of regions was first presented in [18, 31] and further applied to PN synthesis in <ref> [14, 7, 5, 12, 13] </ref>. In this section we generalize the theory of synthesis of safe PNs presented in [12, 13] to synthesis of safe PCNs. Let us consider the following problem: Given: a transition system T S. <p> In this section we generalize the theory of synthesis of safe PNs presented in <ref> [12, 13] </ref> to synthesis of safe PCNs. Let us consider the following problem: Given: a transition system T S. <p> In the example above rc 1 is a bottom region chart and rc m is a top region chart. 5.3 Self-loops and self-preemption For synthesis of non-pure PNs with self-loops, irredundant regions which contain all transitions of the "self-loop" event should be considered <ref> [12, 13] </ref>. Similarly, for synthesis of non-pure PCNs bottom region charts, including all transitions of the self-loop event, must be considered. For constructing the flow function of a pure PCN with self-preemption it is necessary to consider certain non-bottom region charts including all transitions of a self-preemptive event. <p> If the excitation closure or the justification conditions are not satisfied for a given TS, then it is always possible to convert it to an equivalent JECTS by label splitting. This technique can be incorporated into Algorithm 1 and is explained in <ref> [12, 13] </ref>. 14 A modification of the synthesis algorithm based on switching closure would guarantee that for terminal states and markings condition m = (R s ) also holds. A switching region for e is a maximal set of states such that e ! s.
Reference: [13] <author> J. Cortadella, M. Kishinevsky, L. Lavagno, and A. Yakovlev. </author> <title> Deriving Petri nets from finite transition systems. </title> <type> Technical Report UPC-DAC-1996-19, </type> <institution> Dept. of Computer Architecture, Universitat Politecnica de Catalunya, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: 10 Therefore, a reset arc can be also thought as an output arc for t. 11 For PNs coverability tree is build for forward reachability [28, 32]. 12 5 Synthesis of safe PCNs The theory of regions was first presented in [18, 31] and further applied to PN synthesis in <ref> [14, 7, 5, 12, 13] </ref>. In this section we generalize the theory of synthesis of safe PNs presented in [12, 13] to synthesis of safe PCNs. Let us consider the following problem: Given: a transition system T S. <p> In this section we generalize the theory of synthesis of safe PNs presented in <ref> [12, 13] </ref> to synthesis of safe PCNs. Let us consider the following problem: Given: a transition system T S. <p> In the example above rc 1 is a bottom region chart and rc m is a top region chart. 5.3 Self-loops and self-preemption For synthesis of non-pure PNs with self-loops, irredundant regions which contain all transitions of the "self-loop" event should be considered <ref> [12, 13] </ref>. Similarly, for synthesis of non-pure PCNs bottom region charts, including all transitions of the self-loop event, must be considered. For constructing the flow function of a pure PCN with self-preemption it is necessary to consider certain non-bottom region charts including all transitions of a self-preemptive event. <p> Predicate terminal (m) is true if in the net N R for every e: :(m e !), i.e., m is a terminal marking. The decrementing rule influences three types of place charts: 13 This is a generalization of a region-based equivalence proposed for safe PNs in <ref> [13] </ref> 20 1. input place charts of e, i.e., c : c 2 * e, 2. the descendants of input place charts: if c 2 * e and b &lt; c, then as a result of applying the decre-menting rule m (b) = 0. <p> If the excitation closure or the justification conditions are not satisfied for a given TS, then it is always possible to convert it to an equivalent JECTS by label splitting. This technique can be incorporated into Algorithm 1 and is explained in <ref> [12, 13] </ref>. 14 A modification of the synthesis algorithm based on switching closure would guarantee that for terminal states and markings condition m = (R s ) also holds. A switching region for e is a maximal set of states such that e ! s.
Reference: [14] <author> J. Desel and W. Reisig. </author> <title> The synthesis problem of Petri nets. </title> <type> Technical Report TUM-I9231, </type> <institution> Technische Univer-sitat Munchen, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: 10 Therefore, a reset arc can be also thought as an output arc for t. 11 For PNs coverability tree is build for forward reachability [28, 32]. 12 5 Synthesis of safe PCNs The theory of regions was first presented in [18, 31] and further applied to PN synthesis in <ref> [14, 7, 5, 12, 13] </ref>. In this section we generalize the theory of synthesis of safe PNs presented in [12, 13] to synthesis of safe PCNs. Let us consider the following problem: Given: a transition system T S.
Reference: [15] <author> D. Drusinski and D. Harel. </author> <title> On the power of bounded concurrency. I. Finite automata. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 41(3) </volume> <pages> 517-539, </pages> <month> May </month> <year> 1994. </year> <month> 27 </month>
Reference: [16] <author> D. Drusinsky. </author> <title> Visually designing embedded-systems applications. </title> <journal> Dr.Dobb's Journal, </journal> <month> June </month> <year> 1995. </year>
Reference: [17] <author> Best E. and Koutny M. </author> <title> Petri net semantics of priority systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 96 </volume> <pages> 175-215, </pages> <year> 1992. </year>
Reference-contexts: Since rc 0 rc 3 rc 5 , rc 1 rc 3 , and rc 4 rc 5 there are two levels of hierarchy in the corresponding PCN. 6 PCNs with priorities Modeling priority systems with PNs has been studied both for the interleaving [20] and the true con-currency semantics <ref> [17] </ref>. In the context of PCNs priorities are especially of interest for modeling exception handling using preemption.
Reference: [18] <author> A. Ehrenfeucht and G. Rozenberg. </author> <title> Partial (Set) 2-Structures. Part I, II. </title> <journal> Acta Informatica, </journal> <volume> 27 </volume> <pages> 315-368, </pages> <year> 1990. </year>
Reference-contexts: commutativity can be checked by traversing the reachability graph. 10 Therefore, a reset arc can be also thought as an output arc for t. 11 For PNs coverability tree is build for forward reachability [28, 32]. 12 5 Synthesis of safe PCNs The theory of regions was first presented in <ref> [18, 31] </ref> and further applied to PN synthesis in [14, 7, 5, 12, 13]. In this section we generalize the theory of synthesis of safe PNs presented in [12, 13] to synthesis of safe PCNs. Let us consider the following problem: Given: a transition system T S.
Reference: [19] <author> A. Giua. </author> <title> Petri Net techniques for supervisory control of discrete event systems. </title> <booktitle> In Proc. of the First International Workshop on Manufacturing and Petri Nets, </booktitle> <pages> pages 1-30, </pages> <address> Osaka, Japan, </address> <month> June 25, </month> <year> 1996. </year>
Reference-contexts: We first review some definitions and properties of formal languages. Definition 4.1 (PNL and PCNL) <ref> [32, 26, 19] </ref> Let N be a labeled PN or PCN with a labeling function ` : T ! A 5 .
Reference: [20] <author> M. H. T. Hack. </author> <title> Petri net languages. </title> <type> Technical Report TR-159, </type> <institution> MIT, Laboratory of Computer Science, </institution> <year> 1976. </year>
Reference-contexts: Since rc 0 rc 3 rc 5 , rc 1 rc 3 , and rc 4 rc 5 there are two levels of hierarchy in the corresponding PCN. 6 PCNs with priorities Modeling priority systems with PNs has been studied both for the interleaving <ref> [20] </ref> and the true con-currency semantics [17]. In the context of PCNs priorities are especially of interest for modeling exception handling using preemption.
Reference: [21] <author> N. Halbwachs. </author> <title> Synchronous Programming of reactive systems. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1996. </year>
Reference: [22] <author> David Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 231-274, </pages> <month> June </month> <year> 1987. </year>
Reference: [23] <author> B. </author> <title> Heinemann. Subclasses of self-modifying nets. </title> <booktitle> In European Workshop on Application and Theory of Petri Nets 1980. Selected Papers from the First and Second European Workshop on Application and Theory of Petri Nets, </booktitle> <pages> pages 187-192. </pages> <publisher> Springer-Verlag, </publisher> <year> 1982. </year>
Reference-contexts: The following inclusion holds: RL P N L P CN L CSL, while P CN L and CF L are still incomparable. 4.3 Reachability, coverability and k-boundedness of PCNs PCNs can be modeled with reset nets <ref> [2, 33, 23] </ref> a sub-class of self-modifying nets [2, 33, 34]. Reset nets are flat and have no hierarchy, however they can contain reset arcs.
Reference: [24] <author> T. Holvoet and P. Verbaeten. </author> <title> Petri Charts: an alternative technique for hierarchical net construction. </title> <booktitle> In IEEE Conference on Sytems, Man and Cybernetics, </booktitle> <year> 1995. </year>
Reference: [25] <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: By applying the pumping lemma for RL <ref> [25] </ref> it is easy to show that the P-type language generated by the PCN in Figure 6.b is not regular. This proves the following theorem (a formal proof is given in the Appendix).
Reference: [26] <author> M. </author> <title> Jantzen. Language theory of Petri nets. </title> <booktitle> In Advances in Petri Nets 1986, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 254-I, </volume> <pages> pages 397-412. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: We first review some definitions and properties of formal languages. Definition 4.1 (PNL and PCNL) <ref> [32, 26, 19] </ref> Let N be a labeled PN or PCN with a labeling function ` : T ! A 5 . <p> The classes of P-type, L-type, and G-type languages generated by non -free labeled PNs (PCNs) are denoted P ; L ; G (PC ; LC ; GC ) respectively. The following proper inclusions for language classes hold <ref> [32, 26] </ref>: P G L and P G L . Similarly, we can show that PC GC LC and PC GC LC . Clearly, since a PN is also a PCN there is an inclusion between the corresponding PNL and PCNL, e.g., P PC, etc.
Reference: [27] <author> G. Kahn. </author> <title> The semantics of a simple language for parallel programming. </title> <booktitle> In Proceedings of IFIP Congress, </booktitle> <month> August </month> <year> 1974. </year>
Reference: [28] <author> R. M. Karp and R. E. Miller. </author> <title> Parallel program schemata. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 3 </volume> <pages> 147-195, </pages> <year> 1969. </year>
Reference-contexts: In general, commutativity can be checked by traversing the reachability graph. 10 Therefore, a reset arc can be also thought as an output arc for t. 11 For PNs coverability tree is build for forward reachability <ref> [28, 32] </ref>. 12 5 Synthesis of safe PCNs The theory of regions was first presented in [18, 31] and further applied to PN synthesis in [14, 7, 5, 12, 13].
Reference: [29] <author> M. Kishinevsky, J. Cortadella, A. Kondratyev, L. Lavagno, and A. Yakovlev. </author> <title> Synthesis of General Petri Nets. </title> <type> Technical Report 57, IEICE, </type> <address> Japan, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: f c e rc 5 = fs 0 ; s 1 ; s 2 g f e - Table 2: Region charts with input, output, and preemptive events. 5.10 Synthesis of bounded PCNs A theory for the bounded case is a generalization of the theory presented in Section 5 and <ref> [29] </ref>. However, there is one important difference. For the unsafe case one needs a notion of a floating region. A floating region allows variations in the decrementing slope of preemptive events. <p> A basis of a multiset is a set which contains all the elements of a multiset without powers. For example, a basis of r = fs 3 1 ; s 2 2 ; s 3 g is a set fs 1 ; s 2 ; s 3 g. See <ref> [29] </ref> for details. 22 is the only pre-region chart for c and it implies the excitation closure condition for c. However, rc 3 also justifies rc 1 and rc 2 . Region chart rc 5 satisfies excitation closure for e and justifies rc 4 and rc 3 .
Reference: [30] <author> M. Kishinevsky, A. Kondratyev, A. Taubin, and V. Varshavsky. </author> <title> Concurrent Hardware: The Theory and Practice of Self-Timed Design. </title> <publisher> John Wiley and Sons, </publisher> <address> London, </address> <year> 1993. </year>
Reference-contexts: a self-loop pre-region is a bottom region chart, while a preemptive loop pre-region is, by definition, a non-bottom chart, then ? e ? " * e * = ;. 5.4 Excitation regions While region charts in a TS are related to place charts in the corresponding PCN, the excitation region <ref> [30] </ref> for event a is a maximal set of states in which transition a is enabled. Therefore, excitation regions are related to transitions of the PCN.
Reference: [31] <author> M. Nielsen, G. Rozenberg, and P.S. Thiagarajan. </author> <title> Elementary transition systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 96 </volume> <pages> 3-33, </pages> <year> 1992. </year>
Reference-contexts: commutativity can be checked by traversing the reachability graph. 10 Therefore, a reset arc can be also thought as an output arc for t. 11 For PNs coverability tree is build for forward reachability [28, 32]. 12 5 Synthesis of safe PCNs The theory of regions was first presented in <ref> [18, 31] </ref> and further applied to PN synthesis in [14, 7, 5, 12, 13]. In this section we generalize the theory of synthesis of safe PNs presented in [12, 13] to synthesis of safe PCNs. Let us consider the following problem: Given: a transition system T S.
Reference: [32] <author> J. L. Peterson. </author> <title> Petri Net Theory and the modeling of systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1981. </year>
Reference-contexts: We first review some definitions and properties of formal languages. Definition 4.1 (PNL and PCNL) <ref> [32, 26, 19] </ref> Let N be a labeled PN or PCN with a labeling function ` : T ! A 5 . <p> can be defined as follows 6 : * P-type language (also called prefix language): L p (N ) = f`() 2 A fl j 2 T fl ^ M 0 [ &gt;g 5 ` is extended to a mapping T fl ! A fl in the usual way. 6 In <ref> [32] </ref> T-type languages, T , are also defined as those accepted by terminal marking. <p> The classes of P-type, L-type, and G-type languages generated by non -free labeled PNs (PCNs) are denoted P ; L ; G (PC ; LC ; GC ) respectively. The following proper inclusions for language classes hold <ref> [32, 26] </ref>: P G L and P G L . Similarly, we can show that PC GC LC and PC GC LC . Clearly, since a PN is also a PCN there is an inclusion between the corresponding PNL and PCNL, e.g., P PC, etc. <p> Clearly, since a PN is also a PCN there is an inclusion between the corresponding PNL and PCNL, e.g., P PC, etc. Theorem 4.2 shows that this inclusion is proper. Let RL, CF L, and CSL stand for regular, context-free and context-sensitive languages. As shown in <ref> [32] </ref> the following proper inclusions hold: RL P N L CSL. Classes P N L and CF L are incomparable. PN languages are closed under concatenation, union, intersection, reshu*ing (parallel composition), and reversing. However, they are not closed under the Kleene closure (fl), complementation and substitution [32]. <p> As shown in <ref> [32] </ref> the following proper inclusions hold: RL P N L CSL. Classes P N L and CF L are incomparable. PN languages are closed under concatenation, union, intersection, reshu*ing (parallel composition), and reversing. However, they are not closed under the Kleene closure (fl), complementation and substitution [32]. On the contrary, as follows from the next lemma, P-type PCN languages are closed under the Kleene closure. Lemma 4.1 Let L p be a prefix language of a labeled PN 8 such that the zero marking is not reachable 9 . <p> since any PN can be transformed, without changing its P-type language, to a form when the zero marking is not reachable, e.g., by adding one initially marked place that has self-loops to all transitions of the net. 11 closed under the Kleene closure coincides with the class of regular languages <ref> [32] </ref>. By applying the pumping lemma for RL [25] it is easy to show that the P-type language generated by the PCN in Figure 6.b is not regular. This proves the following theorem (a formal proof is given in the Appendix). <p> In general, commutativity can be checked by traversing the reachability graph. 10 Therefore, a reset arc can be also thought as an output arc for t. 11 For PNs coverability tree is build for forward reachability <ref> [28, 32] </ref>. 12 5 Synthesis of safe PCNs The theory of regions was first presented in [18, 31] and further applied to PN synthesis in [14, 7, 5, 12, 13]. <p> Problem 4 is a modification of Problem 3 under constraints on generation of preemptive transitions. 6.6 Power of PCNs with priorities In this section we show that PCNs with vertical priorities are Turing complete. Theorem 6.1 PCNs with vertical priorities are Turing complete. Proof: In <ref> [1, 32] </ref> it is shown that inhibitor nets can model Shepardson's register machines (which are Turing complete) and therefore inhibitor nets are Turing complete. A register machine has a finite number of registers of unlimited capacity.
Reference: [33] <author> R. Valk. </author> <title> Self-modifying nets, a natural extension of petri nets. </title> <booktitle> In Lecture Notes in Computer Science. Automata, Languages and Programming, </booktitle> <volume> volume 62, </volume> <pages> pages 464-476, </pages> <year> 1978. </year>
Reference-contexts: The following inclusion holds: RL P N L P CN L CSL, while P CN L and CF L are still incomparable. 4.3 Reachability, coverability and k-boundedness of PCNs PCNs can be modeled with reset nets <ref> [2, 33, 23] </ref> a sub-class of self-modifying nets [2, 33, 34]. Reset nets are flat and have no hierarchy, however they can contain reset arcs. <p> The following inclusion holds: RL P N L P CN L CSL, while P CN L and CF L are still incomparable. 4.3 Reachability, coverability and k-boundedness of PCNs PCNs can be modeled with reset nets [2, 33, 23] a sub-class of self-modifying nets <ref> [2, 33, 34] </ref>. Reset nets are flat and have no hierarchy, however they can contain reset arcs. If transition t is connected by a reset arc (p; t) with a place p, then after firing of t all tokens in p are erased.
Reference: [34] <author> R. Valk. </author> <title> Generalizations of petri nets. </title> <booktitle> In Lecture Notes in Computer Science. Mathematical Foundation of Computer Science, Proc. of the 10th Symp, </booktitle> <volume> volume 118, </volume> <pages> pages 140-155, </pages> <year> 1981. </year>
Reference-contexts: The following inclusion holds: RL P N L P CN L CSL, while P CN L and CF L are still incomparable. 4.3 Reachability, coverability and k-boundedness of PCNs PCNs can be modeled with reset nets [2, 33, 23] a sub-class of self-modifying nets <ref> [2, 33, 34] </ref>. Reset nets are flat and have no hierarchy, however they can contain reset arcs. If transition t is connected by a reset arc (p; t) with a place p, then after firing of t all tokens in p are erased.

References-found: 34

