URL: ftp://ftp.cs.columbia.edu/reports/reports-1995/cucs-022-95.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1995.html
Root-URL: http://www.cs.columbia.edu
Title: 1-37 Enveloping Sophisticated Tools into Process-Centered Environments  
Author: GIUSEPPE VALETTO AND GAIL E. KAISER Giuseppe Valetto and Gail E. Kaiser 
Keyword: Tool integration, workflow, computer-supported cooperative work, computer-aided software engineering  
Note: c fl1995  
Address: Maupertuis, 38240 Meylan, France  New York, NY 10027, United States  
Affiliation: Rank Xerox Research Centre, 6 Chemin de  Columbia University, Department of Computer Science,  Columbia University  
Pubnum: Technical Report CUCS-22-95,  
Email: kaiser@cs.columbia.edu  
Date: July 1995  
Abstract: We present a tool integration strategy based on enveloping pre-existing tools without source code modifications or recompilation, and without assuming an extension language, application programming interface, or any other special capabilities on the part of the tool. This Black Box enveloping (or wrapping) idea has existed for a long time, but was previously restricted to relatively simple tools. We describe the design and implementation of, and experimentation with, a new Black Box enveloping facility intended for sophisticated tools | with particular concern for the emerging class of groupware applications. An extended abstract of this paper appears as Giuseppe Valetto and Gail E. Kaiser, Enveloping Sophisticated Tools into Computer-Aided Software Engineering Environments, IEEE Seventh International Workshop on Computer-Aided Software Engineering, July 1995, pp. 40-48. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Hussein M. Abdel-Wahab. XTV. </author> <note> http://www.cs.odu.edu/ waha cit/XTV.doc/xtv.html. </note>
Reference-contexts: We consider this as one of the most interesting and meaningful results of this work. xtv <ref> [1] </ref> provides a related facility, also in a Black Box fashion, but at a finer level of granularity and without any particular consideration for workflow. xtv simultaneously displays the X user interface of a more-or-less arbitrary X Windows tool to multiple users, and provides its own floor-passing scheme with respect to
Reference: 2. <editor> Transcending Boundaries: </editor> <booktitle> ACM 1994 Conference on Computer Supported Cooperative Work, </booktitle> <address> Chapel Hill NC, </address> <month> October </month> <year> 1994. </year> <note> ACM Press. </note>
Reference-contexts: important subclass is Collaborative tools (often referred to as computer-supported cooperative work | CSCW | or groupware), which abhor the conventional isolation model and directly support multiple users interacting with each other, such as WYSIWIS (what-you-see-is-what-I 4 see), IBIS decision support, Fagan-style document inspection, desktop video conferencing, etc. (see [21], <ref> [2] </ref> for more examples). We introduce a Multi-Tool Protocol (MTP), where Multi refers to submission of multiple tasks to the same executing tool instance and enabling of multiple users to interact with that same tool instance.
Reference: 3. <author> Naser S. Barghouti. </author> <title> Supporting cooperation in the marvel process-centered SDE. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 21-31, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: If so, multiple instances of the same task or several entirely different tasks can be submitted to the same persistent tool execution. Formal parameters and locking information are also listed (transaction management is outside the scope of this paper, see <ref> [3] </ref>, [17]).
Reference: 4. <author> Israel Z. Ben-Shaul. </author> <title> An object management system for multi-user programming environments. </title> <type> Master's thesis, </type> <institution> Columbia University, Department of Computer Science, </institution> <month> April </month> <year> 1991. </year> <month> CUCS-010-91. </month>
Reference-contexts: The Oz server persists indefinitely but provides process execution and object management services and most aspects of tool management discussed in this paper, but is intentionally not directly involved with tool invocation (in part for performance reasons, see <ref> [4] </ref>).
Reference: 5. <author> Israel Z. Ben-Shaul. </author> <title> A Paradigm for Decentralized Process Modeling and its Realization in the oz Environment. </title> <type> PhD thesis, </type> <institution> Columbia University, Department of Computer Science, </institution> <month> April </month> <year> 1995. </year> <month> CUCS-014-95. </month>
Reference-contexts: Clients are always connected to their local server, but may dynamically open and close connections to remote servers as illustrated in Figure 1. An infrastructure supports communication and coordination among clients and servers. See <ref> [5] </ref> for additional information. 3. Tool Modeling Assuming both SEL-like enveloping and the new MTP protocol are available, the process or other task-oriented execution service needs to specify which tools require which protocol. <p> For example, the multi-flag field, originally introduced for MTP, is now used within SEL to identify tools that support this kind of collaboration, so that the system can simultaneously submit the task and its arguments to the clients corresponding to multiple designated users <ref> [5] </ref>. We are also working on extending the MTP approach to exploit Oz's multi-site, multi-server, multi-process orientation. The implementation described here operates only within a single site, server, and process (i.e., a shared network file system is assumed and authorization issues are not addressed).
Reference: 6. <author> Israel Z. Ben-Shaul, George T. Heineman, Steve S. Popovich, Peter D. Skopp, Andrew Z. Tong, and Giuseppe Valetto. </author> <title> Integrating groupware and process technologies in the oz environment. In Carlo Ghezzi, editor, </title> <booktitle> 9th International Software Process Workshop: The Role of Humans in the Process, </booktitle> <pages> pages 114-116, </pages> <address> Airlie VA, October 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: In-progress work also includes process modeling and execution support for synchronous groupware in which multiple users perform a task together at the same time <ref> [6] </ref>. For example, the multi-flag field, originally introduced for MTP, is now used within SEL to identify tools that support this kind of collaboration, so that the system can simultaneously submit the task and its arguments to the clients corresponding to multiple designated users [5].
Reference: 7. <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A paradigm for decentralized process modeling and its realization in the oz environment. </title> <booktitle> In 16th International Conference on Software Engineering, </booktitle> <pages> pages 179-188, </pages> <address> Sorrento, Italy, May 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Then Section 5 describes four tool integration experiments, one of which represents each of our categories. The paper concludes by summarizing our contributions and outlining future work plans. 2. Oz Background Oz <ref> [7] </ref> is a process-centered environment framework that supports interoperability among autonomously defined processes, where the participating instantiated processes may reside on the same machine, the same local area network, or be geographically dispersed across the Internet or other wide area network.
Reference: 8. <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multiuser software development environments. </title> <journal> Computing Systems, The Journal of the USENIX Association, </journal> <volume> 6(2) </volume> <pages> 65-103, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: The mechanism described above is implemented within a client/server architecture, one server per instantiated process, with process execution and object management services in the shared server and user interface and envelope invocation facilities supported by each client <ref> [8] </ref>. The server sends envelope names and arguments to the client responsible for that task, and then handles other clients in a first-come-first-served manner until the tool completes and the results arrive at the front of the server's request queue. <p> MULTI NO QUEUE: Marvel We decided to use as a testbench for this category Marvel [18], <ref> [8] </ref>, the predecessor of Oz, which is also a multi-user process-centered environment, but with the difference | not relevant to this paper | of supporting only one process at a time, i.e., of being centralized, with no notion of inter-process interoperability.
Reference: 9. <author> Melissa Chase and Howard Reubenstein. </author> <title> An assessment of KBSA and a look towards the future. </title> <type> Technical Report RL-TR-92-163, </type> <institution> Rome Laboratory, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: environment, and often even precludes retrieval of their parameters from the environment's data repository (e.g., if the process engine controls all access to the repository). * Interpretive tools that maintain a complex in-memory state reflecting progress through a series of operations: Lisp applications, such as "Knowledge-Based Software Assistant" (KBSA) systems <ref> [9] </ref>, are classic examples. Such tools may require severe start-up overhead and command substantial system resources (thus we refer to them as "heavy-weight").
Reference: 10. <editor> Prasun Dewan, editor. </editor> <booktitle> Special Issue on Collaborative Software, volume 6:2 of Computing Systems, The Journal of the USENIX Association. </booktitle> <institution> University of California Press, </institution> <month> Spring </month> <year> 1993. </year>
Reference-contexts: In the collaborative case, instead, even though most of the multi-user machinery is necessarily offered by the wrapped tool itself, the problem of shared use of data becomes more problematic. A simple example is that of a multi-user editor <ref> [10] </ref>, employed in the context of a groupware task: the program itself permits and is able to deal with concurrent modification of its internal data, but from the viewpoint of environment's data repository it is necessary to support a concurrency control policy that allows multiple writers of the object containing the
Reference: 11. <author> Mark Dowson. </author> <title> Integrated project support with IStar. </title> <journal> IEEE Software, </journal> <volume> 4(6) </volume> <pages> 6-15, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Kaiser on SEL proxy clients and the other new ideas outlined above, except for the synchronous groupware facilities | which were developed by Issy Ben-Shaul. 35 Notes 1. The first use of the term "envelope" in this sense, that we know of, was with respect to the Istar system <ref> [11] </ref>. 2. SEL and many of the other Oz facilities mentioned in this paper were originally developed for an earlier system called Marvel. 3. Proxy clients and user clients were initially referred to as Special Purpose Clients and General Purpose Clients, respectively [37]. 4.
Reference: 12. <author> Michael Elhadad. </author> <title> Using argumentation to control lexical choice: a unification-based implementation. </title> <type> PhD thesis, </type> <institution> Columbia University, Department of Computer Science, </institution> <year> 1993. </year>
Reference-contexts: MULTI QUEUE: FUF FUF is a sophisticated unification-based tool running on top of Lisp and is used, among other things, in the field of Natural Language Processing for the generation of sentences from corresponding syntactic data structures <ref> [12] </ref>.
Reference: 13. <author> Christer Fernstrom. </author> <title> PROCESS WEAVER: Adding process support to UNIX. </title> <booktitle> In 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <pages> pages 12-26, </pages> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: These systems also do not address one of our foremost requirements, to integrate multi-user tools, and few message buses are concerned with groupware or even support multiple users per bus. Buses internal to process-centered environment frameworks such as ConversationBuilder [22] and ProcessWEAVER <ref> [13] </ref> are exceptions. Once we established loose wrapping as the overall principle on which to base our design, we analyzed the major capabilities needed to implement our tool modeling facilities (described in the previous section).
Reference: 14. <author> David Garlan and Ehsan Ilias. </author> <title> Low-cost, adaptable tool integration policies for integrated environments. </title> <editor> In Richard N. Taylor, editor, </editor> <booktitle> 4th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 1-10, </pages> <address> Irvine CA, </address> <month> December </month> <year> 1990. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 15(6), </volume> <month> December </month> <year> 1990. </year> <month> 36 </month>
Reference-contexts: The Forest extension of Field manages the propagation of event notifications among tools according to "policies" <ref> [14] </ref>, analogous to Oz's process management services, and Provence is implemented on top of Oz's predecessor (Marvel), but neither has any means for requiring satisfaction of task preconditions.
Reference: 15. <author> Mark A. Gisi and Gail E. Kaiser. </author> <title> Extending a tool integration language. </title> <editor> In Mark Dow-son, editor, </editor> <booktitle> 1st International Conference on the Software Process: Manufacturing Complex Systems, </booktitle> <pages> pages 218-227, </pages> <address> Redondo Beach CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Non-file attributes include the usual primitive values (strings, integers, etc.), references to child objects, and links to arbitrary objects elsewhere in the same local objectbase. Oz's Shell Envelope Language (SEL) <ref> [15] </ref> is typical of current Black Box enveloping facilities 2 , which typically involve some scripting language.
Reference: 16. <author> George T. Heineman. </author> <title> Process modeling with cooperative agents. </title> <editor> In Brian Warboys, editor, </editor> <booktitle> 3rd European Workshop on Software Process Technology, volume 772 of Lecture Notes in Computer Science, </booktitle> <pages> pages 75-89, </pages> <institution> Villard de Lans (Grenoble), France, </institution> <month> February </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference-contexts: modification of its internal data, but from the viewpoint of environment's data repository it is necessary to support a concurrency control policy that allows multiple writers of the object containing the edited file (this is achieved in Oz by defining and loading application-specific concurrency control policies, written in a notation <ref> [16] </ref> that permits definition of "cooperative transactions" [19]). Concurrency control, per se, is not in the strictest sense a part of the wrapping facility, but is nevertheless essential in order to fully integrate this class of tools. 6.
Reference: 17. <author> George T. Heineman and Gail E. Kaiser. </author> <title> An architecture for integrating concurrency control into environment frameworks. </title> <booktitle> In 17th International Conference on Software Engineering, </booktitle> <pages> pages 305-313, </pages> <address> Seattle WA, April 1995. </address> <publisher> ACM Press. </publisher>
Reference-contexts: If so, multiple instances of the same task or several entirely different tasks can be submitted to the same persistent tool execution. Formal parameters and locking information are also listed (transaction management is outside the scope of this paper, see [3], <ref> [17] </ref>). <p> intrinsic multi-tasking capability of the tool and conflicts among overlapping argument sets are sporadic and resolved either before the arguments are passed to the tool by a conventional concurrency control mechanism provided by the environment (Oz, by default, implements atomicity and serializability among individual or multi-step tasks delimited as transactions <ref> [17] </ref>), in the case of data from the environment's repository, or by the tool's own policies, in the case of an external repository specific to the tool (e.g., the database volume in the case of a database management system).
Reference: 18. <author> George T. Heineman, Gail E. Kaiser, Naser S. Barghouti, and Israel Z. Ben-Shaul. </author> <title> Rule chaining in marvel: Dynamic binding of parameters. </title> <journal> IEEE Expert, </journal> <volume> 7(6) </volume> <pages> 26-32, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: An SEL envelope is associated with each primitive task (primitive tasks may be grouped into aggregate tasks in the process definition <ref> [18] </ref>). After parameters have been bound and other preliminaries completed, Oz's process execution service directs that the named envelope be invoked on the arguments specified in the task definition, including literals and/or object attributes. <p> MULTI NO QUEUE: Marvel We decided to use as a testbench for this category Marvel <ref> [18] </ref>, [8], the predecessor of Oz, which is also a multi-user process-centered environment, but with the difference | not relevant to this paper | of supporting only one process at a time, i.e., of being centralized, with no notion of inter-process interoperability.
Reference: 19. <author> Gail E. Kaiser. </author> <title> Cooperative transactions for multi-user environments. </title> <editor> In Won Kim, editor, </editor> <title> Modern Database Systems: The Object Model, Interoperability, and Beyond, </title> <booktitle> chapter 20, </booktitle> <pages> pages 409-433. </pages> <publisher> ACM Press, </publisher> <address> New York NY, </address> <year> 1994. </year>
Reference-contexts: the viewpoint of environment's data repository it is necessary to support a concurrency control policy that allows multiple writers of the object containing the edited file (this is achieved in Oz by defining and loading application-specific concurrency control policies, written in a notation [16] that permits definition of "cooperative transactions" <ref> [19] </ref>). Concurrency control, per se, is not in the strictest sense a part of the wrapping facility, but is nevertheless essential in order to fully integrate this class of tools. 6.
Reference: 20. <author> Gail E. Kaiser, Steven S. Popovich, and Israel Z. Ben-Shaul. </author> <title> A bi-level language for software process modeling. </title> <editor> In Walter F. Tichy, editor, </editor> <booktitle> Configuration Management, number 2 in Trends in Software, chapter 2, </booktitle> <pages> pages 39-72. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1994. </year>
Reference-contexts: This could potentially address a certain limitation in Marvel, shared by Oz, that relationships among tasks within a process are formed only with respect to satisfying local constraints, and there is no global topology or grand view <ref> [20] </ref>. However, that grand view could feasibly be defined by the meta-process, by directing the work-flow among the entry points of aggregate tasks, while the process itself directs only the workflow among primitive tasks.
Reference: 21. <editor> Simon Kaplan, editor. </editor> <booktitle> Conference on Organizational Computing Systems, </booktitle> <address> Milpitas CA, </address> <month> November </month> <year> 1993. </year> <note> ACM Press. </note>
Reference-contexts: An important subclass is Collaborative tools (often referred to as computer-supported cooperative work | CSCW | or groupware), which abhor the conventional isolation model and directly support multiple users interacting with each other, such as WYSIWIS (what-you-see-is-what-I 4 see), IBIS decision support, Fagan-style document inspection, desktop video conferencing, etc. (see <ref> [21] </ref>, [2] for more examples). We introduce a Multi-Tool Protocol (MTP), where Multi refers to submission of multiple tasks to the same executing tool instance and enabling of multiple users to interact with that same tool instance.
Reference: 22. <author> Simon M. Kaplan, William J. Tolone, Alan M. Carroll, Douglas P. Bogia, and Celsina Bignoli. </author> <title> Supporting collaborative software development with ConversationBuilder. </title> <editor> In Herbert Weber, editor, </editor> <booktitle> 5th ACM SIGSOFT Symposium on Software Development Environments, </booktitle> <pages> pages 11-20, </pages> <address> Tyson's Corner VA, </address> <month> December </month> <year> 1992. </year> <journal> Special issue of Software Engineering Notes, </journal> <volume> 17(5), </volume> <month> December </month> <year> 1992. </year>
Reference-contexts: These systems also do not address one of our foremost requirements, to integrate multi-user tools, and few message buses are concerned with groupware or even support multiple users per bus. Buses internal to process-centered environment frameworks such as ConversationBuilder <ref> [22] </ref> and ProcessWEAVER [13] are exceptions. Once we established loose wrapping as the overall principle on which to base our design, we analyzed the major capabilities needed to implement our tool modeling facilities (described in the previous section).
Reference: 23. <author> Balachander Krishnamurthy and Naser S. Barghouti. Provence: </author> <title> A process visualization and enactment environment. </title> <editor> In Ian Sommerville and Manfred Paul, editors, </editor> <booktitle> 4th European Software Engineering Conference, number 717 in Lecture Notes in Computer Science, </booktitle> <pages> pages 451-465. </pages> <publisher> Springer-Verlag, </publisher> <address> Garmisch-Partenkirchen, Germany, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: Relatively few tools, aside from database management systems, provide such convenience (although see [26]). Dynamic linking coupled with replacement of standard libraries (e.g., for I/O) works for some environments, e.g., Provence <ref> [23] </ref>, concerned with monitoring simple events such as file system accesses, but it seems unlikely in the general case that arbitrary tools would happen to fit the protocols of a task-oriented framework.
Reference: 24. <author> John R. Nicol, C. Thomas Wilkes, and Frank A. Manola. </author> <title> Object orientation in heterogeneous distributed computing systems. </title> <journal> Computer, </journal> <volume> 26(6) </volume> <pages> 57-67, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: PCTE [34] and similar framework standards probably require more effort in tool adaptation, or a priori adherence to the standard by vendors, but enable a higher scale of integration. The CORBA interoperability standard <ref> [24] </ref> is not specifically directed to environment frameworks, and seems best suited to tools explicitly organized as servers | which relatively few are at present. * Grey Box, where the source code is not modified but the tool provides its own extension language or application programming interface (API) in which functions
Reference: 25. <institution> Reference Model for Frameworks of Software Engineering Environments: </institution> <note> Edition 3 of Technical Report ECMA TR/55, August 1993. NIST Special Publication 500-211. Available as /pub/isee/sp.500-211.ps via anonymous ftp from nemo.ncsl.nist.gov. </note>
Reference-contexts: 1. Introduction Process-centered environments and other task-oriented frameworks (see, e.g., the NIST/ECMA reference model <ref> [25] </ref>) usually support dialogues between external tools and the environment, which serves as a mechanism for integrating the tools according to their roles in the workflow.
Reference: 26. <author> David Notkin and William G. Griswold. </author> <title> Extension and software development. </title> <booktitle> In 10th International Conference on Software Engineering, </booktitle> <pages> pages 274-283, </pages> <address> Ra*es City, Singapore, </address> <month> April </month> <year> 1988. </year>
Reference-contexts: Relatively few tools, aside from database management systems, provide such convenience (although see <ref> [26] </ref>). Dynamic linking coupled with replacement of standard libraries (e.g., for I/O) works for some environments, e.g., Provence [23], concerned with monitoring simple events such as file system accesses, but it seems unlikely in the general case that arbitrary tools would happen to fit the protocols of a task-oriented framework.
Reference: 27. <author> Steven S. Popovich. </author> <title> Rule-based process servers for software development environments. </title> <editor> In John Botsford, Arthur Ryman, Jacob Slonim, and David Taylor, editors, </editor> <booktitle> 1992 Centre for Advanced Studies Conference (CASCON), </booktitle> <volume> volume I, </volume> <pages> pages 477-497, </pages> <address> Toronto ON, Canada, </address> <month> November </month> <year> 1992. </year> <institution> IBM Canada Ltd. Laboratory. </institution>
Reference-contexts: In particular, a process-centered environment requires that task prerequisites be fulfilled prior to performing the task, so mechanisms to detect that some tool has already completed a task are inadequate <ref> [27] </ref>. * Black Box, when only binary executables are available and there is no extension language or API.
Reference: 28. <author> James M. Purtilo. </author> <title> The POLYLITH software bus. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(1) </volume> <pages> 151-174, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: The White Box approach is followed by several commercial message buses, most based on either the Field broadcast message server [29] or the Polylith software bus <ref> [28] </ref>. PCTE [34] and similar framework standards probably require more effort in tool adaptation, or a priori adherence to the standard by vendors, but enable a higher scale of integration.
Reference: 29. <author> Steven P. Reiss. </author> <title> Connecting tools using message passing in the Field environment. </title> <journal> IEEE Software, </journal> <volume> 7(4) </volume> <pages> 57-66, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: The White Box approach is followed by several commercial message buses, most based on either the Field broadcast message server <ref> [29] </ref> or the Polylith software bus [28]. PCTE [34] and similar framework standards probably require more effort in tool adaptation, or a priori adherence to the standard by vendors, but enable a higher scale of integration.
Reference: 30. <author> David S. Rosenblum and Balachander Krishnamurthy. </author> <title> An event-based model of software configuration management. </title> <editor> In Peter H. Feiler, editor, </editor> <booktitle> 3rd International Workshop on Software Configuration Management, </booktitle> <pages> pages 94-97. </pages> <publisher> ACM Press, </publisher> <month> June </month> <year> 1991. </year>
Reference-contexts: Our approach may be viewed as combining the advantages of conventional Black Box enveloping and event notification systems like Field and Yeast <ref> [30] </ref>, where tools execute persistently but the server's concern is only for events of interest to other tools and there are no separate "environment commands" or "workflow" that control tools.
Reference: 31. <author> Peter D. Skopp. </author> <title> Process centered software development on mobile hosts. </title> <type> Technical Report CUCS-035-93, </type> <institution> Columbia University Department of Computer Science, </institution> <month> October </month> <year> 1993. </year> <type> MS Thesis Proposal. </type>
Reference-contexts: Valetto's Masters thesis [36]. Peter Skopp played a major part in designing and implementing the architectural changes needed to introduce proxy clients into Oz, a variant of which are used on a one-to-one basis to support low-bandwidth (modem) user clients <ref> [31] </ref>. George Heineman conducted the SEL Grey Box experiment involving overlapping tasks submitted to emacs, and developed the watcher utility as part of that effort. Richard Baldwin is working with Prof.
Reference: 32. <author> E. Solomita, J. Kempf, and D. Duchamp. Xmove: </author> <title> A pseudoserver for X window movement. The X Resource, </title> <booktitle> 1(11) </booktitle> <pages> 143-170, </pages> <month> July </month> <year> 1994. </year> <month> 37 </month>
Reference-contexts: Most inherently multi-user tools are able to dispatch private instances of their user interface to each user, but for other tools (e.g., originally single-user tools extended by MTP to a modest form of groupware) we exploited the public-domain xmove utility <ref> [32] </ref>, which transfers the GUI of a tool across workstations and X terminals. Resetting the X Windows DISPLAY variable would be insufficient, since the GUI instance has to start on one monitor for one user, then move to another monitor for a second user, etc. without reinitializing the tool.
Reference: 33. <author> Richard M. Stallman. </author> <title> Emacs the extensible, customizable, self-documenting display editor. </title> <booktitle> In SIGPLAN SIGOA Symposium on Text Manipulation, </booktitle> <pages> pages 147-156. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1981. </year> <journal> Special issue of SIGPLAN Notices, </journal> <volume> 16(6), </volume> <month> June </month> <year> 1981. </year>
Reference-contexts: UNI NO QUEUE: emacs emacs <ref> [33] </ref> is one of the most readily available and widely used text editors; its sophisticated functionality and features make it a very useful tool, which nearly reaches in itself the status of a single-user programming environment.
Reference: 34. <author> Ian Thomas. </author> <title> PCTE interfaces: Supporting tools in software-engineering environments. </title> <journal> IEEE Software, </journal> <volume> 6(6) </volume> <pages> 15-23, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: The White Box approach is followed by several commercial message buses, most based on either the Field broadcast message server [29] or the Polylith software bus [28]. PCTE <ref> [34] </ref> and similar framework standards probably require more effort in tool adaptation, or a priori adherence to the standard by vendors, but enable a higher scale of integration.
Reference: 35. <author> Andrew Z. Tong, Gail E. Kaiser, and Steven S. Popovich. </author> <title> A flexible rule-chaining engine for process-based software engineering. </title> <booktitle> In 9th Knowledge-Based Software Engineering Conference, </booktitle> <pages> pages 79-88, </pages> <address> Monterey CA, September 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: We have already developed process modeling notation to direct control over pending tasks to alternative users <ref> [35] </ref>, which would be needed when it is inappropriate or technically infeasible for a remote user to receive the tool's GUI.
Reference: 36. <author> Giuseppe Valetto. </author> <title> Expanding the repertoire of process-based tool integration. </title> <type> Master's thesis, </type> <institution> Columbia University, Department of Computer Science, </institution> <month> December </month> <year> 1994. </year> <month> CUCS-027-94. </month>
Reference-contexts: Acknowledgments Prof. Kathy Mckeown provided the FUF application and served as the second reader for Mr. Valetto's Masters thesis <ref> [36] </ref>. Peter Skopp played a major part in designing and implementing the architectural changes needed to introduce proxy clients into Oz, a variant of which are used on a one-to-one basis to support low-bandwidth (modem) user clients [31].
Reference: 37. <author> Giuseppe Valetto and Gail E. Kaiser. </author> <title> Enveloping sophisticated tools into computer-aided software engineering environments. </title> <booktitle> In IEEE 7th International Workshop on Computer-Aided Software Engineering, </booktitle> <pages> pages 40-48, </pages> <address> Toronto Ontario, Canada, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: SEL and many of the other Oz facilities mentioned in this paper were originally developed for an earlier system called Marvel. 3. Proxy clients and user clients were initially referred to as Special Purpose Clients and General Purpose Clients, respectively <ref> [37] </ref>. 4. About 15 elapsed seconds on a Sun SparcStation 10 workstation. 5. The second author has been known to keep the same emacs instance running for months.
Reference: 38. <author> John M. Vlissides and Mark A. Linton. Unidraw: </author> <title> A framework for building domain-specific graphical editors. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 8(3) </volume> <pages> 237-268, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: UNI QUEUE: idraw idraw <ref> [38] </ref> is a popular public-domain drawing tool, commonly used to develop pictures and diagrams stored in a postscript form; it provides an intuitive graphical user interface employing a well-known paradigm based on mouse movement and menu selection to operate on a virtual canvas shown within an X window.
References-found: 38

