URL: ftp://ftp.cs.columbia.edu/reports/reports-1994/cucs-012-94.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1994.html
Root-URL: http://www.cs.columbia.edu
Email: heineman@cs.columbia.edu  
Title: Integrating a Transaction manager component with Process Weaver  
Author: George T. Heineman Gail E. Kaiser 
Date: May 10, 1994  
Address: 500 West 120th Street New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Pubnum: TR CUCS-012-94  
Abstract: This paper details our experience integrating a transaction manager component, called Pern with Process Weaver. Process Weaver's Petri-net based approach is excellent for explicitly modeling concurrent activities of cooperating agents, but there is no underlying mechanism for treating conflicting actions of concurrent, independent agents. In addition, there is a need for advanced transaction support if we are to extend petri nets to use object management systems to store and access data. This paper shows several experiments we performed and our resulting implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Israel Z. Ben-Shaul and Gail E. Kaiser. </author> <title> A paradigm for decentralized process modeling and its realization in the OZ environment. </title> <booktitle> In 16th International Conference on Software Engineering, </booktitle> <address> Sorrento, Italy, May 1994. </address> <publisher> IEEE Computer Society Press. In press. </publisher>
Reference-contexts: 1 Introduction Process Weaver [2] is a set of tools that adds process support capability to UNIX-based environments. It consists of tools for modeling and enactment of activity-centered process models. We are currently constructing a transaction manager component, called Pern [3], for the Oz <ref> [1] </ref> decentralized process centered environment. It seemed natural to test Pern with a foreign system. This paper shows the results of this experiment. 2 Transactions There is a definite distinction between concurrency through synchronization and con-currency control. <p> Messages that are in response to a previous message requested are numbered differently. For example, the second message is labeled 1R since it is a notification message in response to the request message numbered 1. The Bank CP is launched by the user <ref> [1] </ref> and starts executing [2-8], at which point it is in states f Doing t, Doing dg. The two sub-procedures, Transfer and Deposit, are launched at [6-7]. The Transfer CP is the first one instantiated [9-10] and it starts executing. Between [11] and [12], the Transfer CP begins a transaction.
Reference: [2] <author> Christer Fernstrom. </author> <title> PROCESS WEAVER: Adding process support to UNIX. </title> <booktitle> In 2nd International Conference on the Software Process: Continuous Software Process Improvement, </booktitle> <pages> pages 12-26, </pages> <address> Berlin, Germany, February 1993. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: 1 Introduction Process Weaver <ref> [2] </ref> is a set of tools that adds process support capability to UNIX-based environments. It consists of tools for modeling and enactment of activity-centered process models. We are currently constructing a transaction manager component, called Pern [3], for the Oz [1] decentralized process centered environment.
Reference: [3] <author> George T. Heineman. </author> <title> A transaction manager component for cooperative transaction models. </title> <institution> CUCS-017-93, Columbia University Department of Computer Science, </institution> <month> July </month> <year> 1993. </year> <type> PhD Thesis Proposal. </type>
Reference-contexts: 1 Introduction Process Weaver [2] is a set of tools that adds process support capability to UNIX-based environments. It consists of tools for modeling and enactment of activity-centered process models. We are currently constructing a transaction manager component, called Pern <ref> [3] </ref>, for the Oz [1] decentralized process centered environment. It seemed natural to test Pern with a foreign system. This paper shows the results of this experiment. 2 Transactions There is a definite distinction between concurrency through synchronization and con-currency control.
Reference: [4] <author> Nancy A. Lynch. </author> <title> Multilevel atomicity anew correctness criterion for database concurrency control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(4) </volume> <pages> 484-502, </pages> <month> De-cember </month> <year> 1983. </year> <month> 14 </month>
Reference-contexts: All database operations performed by a program are grouped into sequences called transactions. This is done for three distinct purposes; as summarized by Lynch <ref> [4] </ref>, a transaction is a: 1. Logical Unit Grouping together operations comprising a "complete" task. 2. Atomicity Unit Giving appearance that all operations are consecutively carried out. 3. Recovery Unit Ensuring that either all the steps, or none, are executed on the database.
Reference: [5] <author> J. Eliot B. Moss. </author> <title> Nested Transactions: An Approach to Reliable Distributed Com--puting. Information Systems. </title> <publisher> The MIT Press, </publisher> <address> Cambridge MA, </address> <year> 1985. </year> <type> PhD Thesis, </type> <institution> MIT LCS TR-260, </institution> <month> April </month> <year> 1981. </year> <month> 15 </month>
Reference-contexts: Each CP can be viewed as a refinement of a higher level activity. Process Weaver manages the complexity of having multiple cooperative procedures through methods. A method is an organized set of cooperative procedures in hierarchical fashion. This organization dovetails nicely with the concept of nested transactions <ref> [5] </ref>. For our purposes, therefore, one logical unit equals one cooperative procedure. 2.2.3 Global Transaction CP The final alternative, shown in Figure 5, has one cooperative procedure for the transaction processing of the entire global set of CPs.
References-found: 5

