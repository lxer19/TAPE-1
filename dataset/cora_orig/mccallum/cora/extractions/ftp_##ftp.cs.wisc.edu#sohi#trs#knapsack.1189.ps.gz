URL: ftp://ftp.cs.wisc.edu/sohi/trs/knapsack.1189.ps.gz
Refering-URL: http://www.cs.wisc.edu/~sohi/sohi.html
Root-URL: 
Email: sohig@cs.wisc.edu  
Title: Knapsack: A Zero-Cycle Memory Hierarchy Component  
Author: Todd M. Austin T.N. Vijaykumar Gurindar S. Sohi faustin, vijay, 
Note: This work was supported by grants from the National Science Foundation (grant CCR-9303030) and Office of Naval Research (grant N00014-93-1-0465).  
Date: November 22, 1993  
Address: 1210 W. Dayton Street Madison, WI 53706  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  
Abstract: The widening gap between processors and memory necessitates the development of novel memory hierarchies: hierarchies that can possibly service memory references at register speeds, since service at cache speeds may not be adequate. We consider the design of a novel memory hierarchy component, a knapsack, whose purpose is to provide (very) fast access to frequently-used data objects. Software allocates frequently-used objects into a knapsack region of the address space; a knapsack provides fast access (at register speeds in many cases) to these objects. We discuss how a knapsack is different from other memory hierarchy components, how it can achieve superior performance over other components, and how it can be integrated transparently into an implementation of existing architectures. We also carry out a detailed evaluation of a knapsack using several of the SPEC92 benchmark programs. Our results show that for many programs, both numeric and non-numeric, the knapsack offers significant opportunity for memory access optimization. Using a profiler- based packing heuristic which can allocate both globals and locals to the knapsack region, we found that a knapsack as small as 4k bytes could service a significant number of memory references for many of our benchmark programs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. E. Allen and J. Cocke. </author> <title> A program data flow analysis procedure. </title> <journal> CACM, </journal> <volume> 19(3) </volume> <pages> 137-147, </pages> <year> 1976. </year>
Reference: [2] <author> D. Callahan, K. Kennedy, and A. Porterfield. </author> <title> Software prefetching. </title> <booktitle> In 4th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 40-52, </pages> <address> Santa Clara, CA, </address> <month> April </month> <year> 1991. </year>
Reference: [3] <author> W. Y. Chen, S. A. Mahlke, P. P. Chang, and W. W. Hwu. </author> <title> Data access microarchitectures for superscalar processors with compiler-assisted data prefetching. </title> <booktitle> In Proceedings of the 24th Annual Workshop on Microprogramming and Microarchitecture (Micro 24), </booktitle> <pages> pages 69-73, </pages> <month> November </month> <year> 1991. </year>
Reference: [4] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> McGraw Hill Book Company, </publisher> <year> 1990. </year>
Reference: [5] <institution> Cray Research, Inc., Mendota Heights, MN. Cray Computer Systems: </institution> <note> Cray-2 Hardware Reference Manual, </note> <year> 1985. </year>
Reference: [6] <author> D. R. Ditzel and H. R. McLellan. </author> <title> Register allocation for free: the C machine stack cache. </title> <booktitle> In 1st International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 48-56, </pages> <address> Palo Alto, CA, </address> <month> March </month> <year> 1982. </year>
Reference: [7] <author> J. L. Hennesey and D. A. Patterson. </author> <title> Computer Architecture: A Quantitative Approach. </title> <publisher> Morgan Kaufmann Publishers Inc., </publisher> <address> San Mateo, CA, </address> <year> 1990. </year>
Reference: [8] <author> N. P. Jouppi. </author> <title> Improving direct-mapped cache performance by the addition of a small fully-associative cache and prefetch buffers. </title> <booktitle> In Proceedings of the 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 364-373, </pages> <address> Seattle, WA, </address> <month> May </month> <year> 1990. </year>
Reference: [9] <author> A. C. Klaiber and H. M. Levy. </author> <title> An architecture for software-controlled data prefetching. </title> <booktitle> In Proceedings of the 18th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 43-53, </pages> <month> May </month> <year> 1991. </year>
Reference: [10] <author> D. Kroft. </author> <title> Lockup-free instruction fetch/prefetch cache organization. </title> <booktitle> In Proceedings of the 8th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 81-87, </pages> <month> May </month> <year> 1981. </year>
Reference: [11] <author> M. S. Lam, E. E. Rothberg, and M. E. Wolf. </author> <title> The cache performance and optimizations of block algorithms. </title> <booktitle> In 4th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 63-74, </pages> <address> Santa Clara, CA, </address> <month> April </month> <year> 1991. </year>
Reference: [12] <author> James R. Larus. </author> <title> Efficient program tracing. </title> <journal> IEEE Computer, </journal> <volume> 26(5) </volume> <pages> 52-61, </pages> <month> May </month> <year> 1993. </year>
Reference: [13] <author> R. M. Russell. </author> <title> The CRAY-1 computer system. </title> <journal> CACM, </journal> <volume> 21(1) </volume> <pages> 63-72, </pages> <month> January </month> <year> 1978. </year>
Reference: [14] <author> A. J. Smith. </author> <title> Cache memories. </title> <journal> Computing Surveys, </journal> <volume> 14(3) </volume> <pages> 473-530, </pages> <month> September </month> <year> 1982. </year>
Reference: [15] <author> G. S. Sohi and M. Franklin. </author> <title> High-bandwidth data memory systems for superscalar processors. </title> <booktitle> In 4th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 53-62, </pages> <address> Santa Clara, CA, </address> <month> April </month> <year> 1991. </year>
Reference: [16] <institution> SPEC newsletter, </institution> <month> December </month> <year> 1991. </year>
Reference: [17] <author> Richard M. Stallman. </author> <title> Using and Porting GNU CC. Free Software Foundation, </title> <year> 1993. </year>
Reference: [18] <author> Michael Young, Avidis Tevanian, Richard F. Rashid, David Golub, J. Eppinger, Jonathan Chew, William Bolosky, David Black, and Robert Baron. </author> <title> The duality of memory and communication in the implementation of a multiprocessor operating system. </title> <booktitle> In Proceedings of the 11th Symposium on Operating System Principles, </booktitle> <month> November </month> <year> 1987. </year> <month> 26 </month>
References-found: 18

