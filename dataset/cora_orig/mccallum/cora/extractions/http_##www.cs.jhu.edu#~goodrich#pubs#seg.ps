URL: http://www.cs.jhu.edu/~goodrich/pubs/seg.ps
Refering-URL: http://www.cs.jhu.edu/~goodrich/pubs/index.html
Root-URL: http://www.cs.jhu.edu
Email: amato@cs.tamu.edu goodrich@cs.jhu.edu ramos@cs.uiuc.edu  
Title: Computing Faces in Segment and Simplex Arrangements (Preliminary Version)  
Author: NANCY M. AMATO MICHAEL T. GOODRICH EDGAR A. RAMOS 
Affiliation: Texas A&M Univ. Johns Hopkins Univ. Univ. of Illinois  
Abstract: For a set S of n line segments in the plane, we give the first work-optimal deterministic parallel algorithm for constructing their arrangement. It runs in O(log 2 n) time using O(n log n + k) work in the EREW PRAM model, where k is the number of intersecting line segment pairs, and provides a fairly simple divide-and-conquer alternative to the optimal sequential plane-sweep algorithm of Chazelle and Edelsbrunner. Moreover, our method can be used to output all k intersecting pairs while using only O(n) working space, which solves an open problem posed by Chazelle and Edelsbrunner. We also describe a sequential algorithm for computing a single face in an arrangement of n line segments that runs in O(nff 2 (n) log n) time, which improves on a previous O(n log 2 n) time algorithm. For collections of simplices in IR d , we give methods for constructing a set of m = O(n d1 log c n+k) cells of constant descriptive complexity that covers their arrangement, where c &gt; 1 is a constant and k is the number of faces in the arrangement. The construction is performed sequentially in O(m) time, or in O(log n) time using O(m) work in the EREW PRAM model. The covering can be augmented to answer point location queries in O(log n) time. In addition to supplying the first parallel methods for these problems, we improve on the previous best sequential methods by reducing the query times (from O(log 2 n) in IR 3 and O(log 3 n) in IR d , d &gt; 3), and also the size and construction cost of the covering (from O(n d1+* + k)). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Agarwal, J. Matousek, and O. Schwarzkopf. </author> <title> Computingmany faces in arrangements of lines and segments. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1994. </year>
Reference-contexts: This is the case, for example, for the complete arrangement. In some applications where one is interested only in a subset of the arrangement, for example a single face in an arrangement, locality fails. However, it has been noted <ref> [1, 18] </ref> that in this case a property that we call monotonicity holds: for R; R 0 X, if 2 T (R) then D (R) R and X " R = ;; and if 2 T (R) and R 0 R with D () R 0 , then 2 T (R <p> Note that locality implies monotonicity. Polynomial construction The basis for our divide-and-conquer approach is the geometric sampling theorem below. We state it in some generality, and then specialize it to our particular problem. For completeness, we give a detailed proof. It uses standard techniques in geometric sampling (see e.g. <ref> [1, 4, 17, 21, 29] </ref>). For sequential computation, the r ffi factor in property (ii) of the theorem can be improved to log r using derandomiza-tion by the method of conditional probabilities. <p> A K-wise independent p-sample and f K (X; r) are defined similarly for K-wise independent 0 1 random variables. In the cases we consider, K is sufficiently large so that f K (X; r) = O (f (X; r)). Our way of dealing with monotonicity follows the analysis in <ref> [1] </ref>. Theorem 2.2 Let X be such that T (X ) satisfies the mono-tonicity property, and that, for X X , f (X; r=t) = O (f (X; r)) for t 1. <p> As a result, one maintains T (R i ) for a single sample R i of S at each stage. This has the advantage of bounding globally the sum of the sizes of all subproblems at each step. This approach is related to the lazy randomized incremental construction of <ref> [1, 18] </ref>. The algorithm inserts the segments in rounds.
Reference: [2] <author> P. K. Agarwal. </author> <title> Partitioning arrangements of lines: II. </title> <journal> Applications. Discrete Comput. Geom., </journal> <volume> 5 </volume> <pages> 533-573, </pages> <year> 1990. </year>
Reference-contexts: By construction P k (r =n )). For each t , step 2.1 is trivially performed in time O (n t ), step 2.2 is performed in time O (n t log n t ) using well-known techniques (see e.g. <ref> [2, 20] </ref>), step 2.3 takes time as indicated above. Thus, steps 1-2 for take time O ((n +k (r =n )) log r + k =).
Reference: [3] <author> P. K. Agarwal. </author> <title> Geometric partitioning and its applications. </title> <editor> In J. E. Goodman, R. Pollack, and W. Steiger, editors, </editor> <booktitle> Computational Geometry: Papers from the DIMACS special year. </booktitle> <publisher> Amer. Math. Soc., </publisher> <year> 1991. </year>
Reference-contexts: We show how to solve the problem of computing a segment arrangement in O (log 2 n) time and O (n log n+k) work 1 For background material on geometric sampling, see <ref> [3, 14, 28, 34] </ref>. 2 We say that an event parameterized by n holds with high probability if its probability is at least 1 1=n ffi for some constant ffi &gt; 0. 3 The CRCW PRAM is the synchronous shared-memory model that allows for concurrent reads and concurrent writeswhich in this
Reference: [4] <author> N.M. Amato, </author> <title> M.T. Goodrich, and E.A. Ramos. Parallel algorithms for higher-dimensional convex hulls. </title> <booktitle> In Proc. 35th Annu. IEEE Sympos. Found. Comput. Sci. (FOCS 93), </booktitle> <pages> pages 683-694, </pages> <year> 1994. </year>
Reference-contexts: Note that locality implies monotonicity. Polynomial construction The basis for our divide-and-conquer approach is the geometric sampling theorem below. We state it in some generality, and then specialize it to our particular problem. For completeness, we give a detailed proof. It uses standard techniques in geometric sampling (see e.g. <ref> [1, 4, 17, 21, 29] </ref>). For sequential computation, the r ffi factor in property (ii) of the theorem can be improved to log r using derandomiza-tion by the method of conditional probabilities. <p> Then, we collect , for each cell 2 T (R), the objects x for which L (l (x)) contains . This can be done in time linear in the total size of the conflict lists. Parallel versions of these point location data structures are also known <ref> [4] </ref>. To summarize, then, we have the following: Theorem 2.4 Suppose X is such that monotonicity holds for T (X ), and the pair (X ; T (X )) is linearizable. <p> Using randomization, the time is O (log n log log n) with n-polynomial probability. All steps in stage i can be parallelized in a straight forward manner using known parallel techniques (see, e.g., <ref> [4, 37] </ref>). In particular, stage i runs in O (log 2 r i ) time using optimal work. Also, at each round it suffices to perform one single global processor allocation call. <p> This can be done in O (log r i+1 ) time using O (r d1 i+1 ) work, and the point location query can be answered in O (log r i+1 ) time <ref> [4] </ref>. If p is contained on the boundary of a d-cylinder 2 T pc , then a simple check determines whether p is incident to the (d 1)-simplex in S defining . <p> Thus, we explain how to answer a query in b ( 2 ). As in [35], we use an auxiliary structure to answer the query in b ( 2 ). However, we will use a different (and arguably simpler) method. Using the algorithm of Amato et al. <ref> [4] </ref>, we compute the intersection (in 1 ) of the halfspaces containing 2 whose bounding hyperplanes span the (d 1)-simplices in b ( 2 ). <p> The point location structures are built in O (log n i2 ) time using O (n bd=2c i2 log O (1) n i2 ) work (adding O (r i1 ) work to each stage of the intersection construction, which does not affect the complexity bounds of the intersection algorithm <ref> [4] </ref>). Given these auxiliary struc tures, a vertical ray shooting query for S is answered in P i log n i2 = O (log n) time.
Reference: [5] <author> I.J. Balaban. </author> <title> An optimal algorithm for finding segment intersections. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Computational Geometry, </booktitle> <year> 1995. </year>
Reference-contexts: Balaban <ref> [5] </ref> with an entirely different approach. His algorithm, however, does not seem to parallelize nor to be adaptable to computing the arrangement. 5 A covering is a set of cells of constant descriptive complexity whose union contains A (S).
Reference: [6] <author> J. L. Bentley and T. A. Ottmann. </author> <title> Algorithms for reportingand countinggeometric intersections. </title> <journal> IEEE Trans. Comput., </journal> <volume> C-28:643-647, </volume> <year> 1979. </year>
Reference-contexts: The segment intersection problem is to report all k intersecting segment pairs in S, with a slightly more difficult variant being that of constructing a triangulation of the arrangement of the segments in S. This problem has been studied extensively in the computational geometry literature <ref> [6, 8] </ref>. Chazelle and Edelsbrunner [11] gave an optimal method for computing segment intersections and constructing their arrangement that runs in O (n log n + k) time and uses a number of beautiful techniques, including plane sweeping and topological sweeping.
Reference: [7] <author> Herve Bronnimann, Bernard Chazelle, and Jir Matousek. </author> <title> Product range spaces, sensitive sampling, </title> <booktitle> and derandomization. In Proc. 34th Annu. IEEE Sympos. Found. Comput. Sci. (FOCS 93), </booktitle> <pages> pages 400-409, </pages> <year> 1993. </year>
Reference-contexts: A (1=r)-approximation A for (S; R (S; T (S))) is also a (1=r)-approximation for (S; R (S; S)). Then, by a result of Bronnimann et al <ref> [7] </ref> on product range spaces, A can also be used to estimate the number of intersections in A (S) inside any convex region. <p> Randomized algorithms Efficient randomized algorithms are known for both problems on segments we are considering. Here, we point out that for both, algorithms with equal asymptotic performance can be obtained using the approach used by Chazelle [10] and Bronnimman et al <ref> [7] </ref> for half-space intersection. The sampling is global, that is, at a given stage a single global sample determines the sample in each subproblem, rather than an independent sample for each subproblem. <p> The final result is T (R i ). For computing the face containing a point p, the clean-up includes determining through a graph search those trapezoids reachable from p, thus obtaining T p (R i ) at stage i. An analysis similar to that in <ref> [7] </ref> shows that these algorithms have expected running times O (n log n + k) and O (nff (n) log n) respectively. Unfortunately, it is not clear how to apply the techniques in [7] to derandomize these algorithms. <p> An analysis similar to that in <ref> [7] </ref> shows that these algorithms have expected running times O (n log n + k) and O (nff (n) log n) respectively. Unfortunately, it is not clear how to apply the techniques in [7] to derandomize these algorithms. Because of the lack of locality, this seems specialy hard for the single face problem.
Reference: [8] <author> B. Chazelle. </author> <title> Reporting and counting segment intersections. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 32 </volume> <pages> 156-182, </pages> <year> 1986. </year>
Reference-contexts: The segment intersection problem is to report all k intersecting segment pairs in S, with a slightly more difficult variant being that of constructing a triangulation of the arrangement of the segments in S. This problem has been studied extensively in the computational geometry literature <ref> [6, 8] </ref>. Chazelle and Edelsbrunner [11] gave an optimal method for computing segment intersections and constructing their arrangement that runs in O (n log n + k) time and uses a number of beautiful techniques, including plane sweeping and topological sweeping.
Reference: [9] <author> B. Chazelle. </author> <title> Cutting hyperplanes for divide-and-conquer. </title> <journal> Discrete Comput. Geom., </journal> <volume> 9(2) </volume> <pages> 145-158, </pages> <year> 1993. </year>
Reference-contexts: Let H be the collection of all the hyperplanes bounding the linear cells () for 2 T (R). jHj is O (r D ). We can construct a point location data structure D for H to achieve an O (log n) query time with size O (jHj D ) <ref> [9] </ref>, but we can also use the following less-efficient construction: For each leaf l of D (its number is O (jHj D )), determine the list L (l) of each cell 2 T (R) for which () contains the cell in the arrangement of H corresponding to l. (The time (and
Reference: [10] <author> B. Chazelle. </author> <title> An optimal convex hull algorithm in any fixed dimension. </title> <journal> Discrete Comput. Geom., </journal> <volume> 10 </volume> <pages> 377-409, </pages> <year> 1993. </year>
Reference-contexts: Randomized algorithms Efficient randomized algorithms are known for both problems on segments we are considering. Here, we point out that for both, algorithms with equal asymptotic performance can be obtained using the approach used by Chazelle <ref> [10] </ref> and Bronnimman et al [7] for half-space intersection. The sampling is global, that is, at a given stage a single global sample determines the sample in each subproblem, rather than an independent sample for each subproblem.
Reference: [11] <author> B. Chazelle and H. Edelsbrunner. </author> <title> An optimal algorithm for intersecting line segments in the plane. </title> <journal> J. ACM, </journal> <volume> 39 </volume> <pages> 1-54, </pages> <year> 1992. </year>
Reference-contexts: This problem has been studied extensively in the computational geometry literature [6, 8]. Chazelle and Edelsbrunner <ref> [11] </ref> gave an optimal method for computing segment intersections and constructing their arrangement that runs in O (n log n + k) time and uses a number of beautiful techniques, including plane sweeping and topological sweeping. <p> Our method also provides an optimal sequential divide-and-conquer alternative to the plane-sweep method of Chazelle and Edelsbrunner <ref> [11] </ref>, and uses O (n) space if only required to output the intersections, which solves an open problem of Chazelle and Edelsbrunner 4 . A single face in a segment arrangement. Again, let S be a set of n line segments in the plane and let p be a point. <p> The previous discussion is summarized in the following. Theorem 3.2 The arrangement of a set of n line segments in the plane with k intersections can be computed in time O (n log n + k) sequentially and deterministically. This result was first obtained by Chazelle and Edelsbrun-ner <ref> [11] </ref> using a sweep algorithm. Our algorithm provides a divide-and-conquer sequential alternative, and has the advantage of being parallelizable and of using O (n) space when only required to output the k intersections. <p> Also, at each round it suffices to perform one single global processor allocation call. If a model that allows non-global processor allocation calls is used then the time required by the randomized algorithm is reduced to O (log n). Linear space Chazelle and Edelsbrunner <ref> [11] </ref> posed the problem of whether the k intersections of n given segments can be output in time O (n log n + k) using space O (n). Our algorithm can be adapted for this task.
Reference: [12] <author> B. Chazelle, H. Edelsbrunner, L. Guibas, M. Sharir, and J. Snoeyink. </author> <title> Computing a face in an arrangement of line segments. </title> <journal> SIAM J. Comput., </journal> <volume> 22 </volume> <pages> 1286-1302, </pages> <year> 1993. </year>
Reference-contexts: Chazelle and Edelsbrunner [11] gave an optimal method for computing segment intersections and constructing their arrangement that runs in O (n log n + k) time and uses a number of beautiful techniques, including plane sweeping and topological sweeping. A number of researchers <ref> [12, 17, 33, 34] </ref>, have given elegant randomized methods that run in O (n log n + k) expected time. In fact, if k n log 1+ffi n for some constant ffi &gt; 0, then these methods run in this bound with high probability 2 [31]. <p> The best previously known deterministic algorithm is an O (n log 2 n) method due to Mitchell [32], yet there are randomized ones that run in expected time O (nff (n) log n) <ref> [12, 18] </ref>. The known lower bound is W (n log n). We describe an almost-optimal deterministic algorithm, in that it runs in time O (nff 2 (n) log n).
Reference: [13] <author> K. W. Chong and T. W. </author> <title> Lam.Finding connected components in o(logn log log n) time on the EREW PRAM. </title> <booktitle> In Proc. 4th Annu. ACM-SIAM Symp. Discrete Algorithms, </booktitle> <pages> pages 11-20, </pages> <year> 1993. </year>
Reference-contexts: The work reflects the complexities of the best known EREW PRAM connected component algorithms which run in O (log n) time using O (n) work with high probability [25], or deterministically in O (log n log log n) using O (m + n) processors <ref> [13] </ref>. Triangulating non-intersecting (d 1)-simplices in IR d .
Reference: [14] <author> K. L. Clarkson. </author> <title> Randomized geometric algorithms. </title> <editor> In D.-Z. Du and F. K. Hwang, editors, </editor> <booktitle> Computing in Euclidean Geometry, volume 1 of Lecture Notes Series on Computing, </booktitle> <pages> pages 117-162. </pages> <publisher> World Scientific, </publisher> <address> Singapore, </address> <year> 1992. </year>
Reference-contexts: We show how to solve the problem of computing a segment arrangement in O (log 2 n) time and O (n log n+k) work 1 For background material on geometric sampling, see <ref> [3, 14, 28, 34] </ref>. 2 We say that an event parameterized by n holds with high probability if its probability is at least 1 1=n ffi for some constant ffi &gt; 0. 3 The CRCW PRAM is the synchronous shared-memory model that allows for concurrent reads and concurrent writeswhich in this
Reference: [15] <author> K. L. Clarkson, R. Cole, and R. E. Tarjan. </author> <title> Erratum: Randomized parallel algorithms for trapezoidaldiagrams. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 2(3) </volume> <pages> 341-343, </pages> <year> 1992. </year>
Reference-contexts: In fact, if k n log 1+ffi n for some constant ffi &gt; 0, then these methods run in this bound with high probability 2 [31]. In the parallel domain, Clarkson, Cole, and Tarjan <ref> [16, 15] </ref> show that one can construct a segment arrangement in parallel in O (log n) time and O (n log n + k) expected work in the CRCW PRAM model. 3 There is no previous deterministic optimal-work parallel algorithm for the general segment intersection problem, however.
Reference: [16] <author> K. L. Clarkson, R. Cole, and R. E. Tarjan. </author> <title> Randomized parallel algorithms for trapezoidal diagrams. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 2(2) </volume> <pages> 117-133, </pages> <year> 1992. </year>
Reference-contexts: In fact, if k n log 1+ffi n for some constant ffi &gt; 0, then these methods run in this bound with high probability 2 [31]. In the parallel domain, Clarkson, Cole, and Tarjan <ref> [16, 15] </ref> show that one can construct a segment arrangement in parallel in O (log n) time and O (n log n + k) expected work in the CRCW PRAM model. 3 There is no previous deterministic optimal-work parallel algorithm for the general segment intersection problem, however.
Reference: [17] <author> K. L. Clarkson and P. W. Shor. </author> <title> Applications of randomsampling in computational geometry, II. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 </volume> <pages> 387-421, </pages> <year> 1989. </year>
Reference-contexts: Chazelle and Edelsbrunner [11] gave an optimal method for computing segment intersections and constructing their arrangement that runs in O (n log n + k) time and uses a number of beautiful techniques, including plane sweeping and topological sweeping. A number of researchers <ref> [12, 17, 33, 34] </ref>, have given elegant randomized methods that run in O (n log n + k) expected time. In fact, if k n log 1+ffi n for some constant ffi &gt; 0, then these methods run in this bound with high probability 2 [31]. <p> Note that locality implies monotonicity. Polynomial construction The basis for our divide-and-conquer approach is the geometric sampling theorem below. We state it in some generality, and then specialize it to our particular problem. For completeness, we give a detailed proof. It uses standard techniques in geometric sampling (see e.g. <ref> [1, 4, 17, 21, 29] </ref>). For sequential computation, the r ffi factor in property (ii) of the theorem can be improved to log r using derandomiza-tion by the method of conditional probabilities.
Reference: [18] <author> M. de Berg, K. Dobrindt, and O. Schwarzkopf. </author> <title> On lazy randomized incremental construction. </title> <booktitle> In Proc. 26th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 105-114, </pages> <year> 1994. </year>
Reference-contexts: The best previously known deterministic algorithm is an O (n log 2 n) method due to Mitchell [32], yet there are randomized ones that run in expected time O (nff (n) log n) <ref> [12, 18] </ref>. The known lower bound is W (n log n). We describe an almost-optimal deterministic algorithm, in that it runs in time O (nff 2 (n) log n). <p> This is the case, for example, for the complete arrangement. In some applications where one is interested only in a subset of the arrangement, for example a single face in an arrangement, locality fails. However, it has been noted <ref> [1, 18] </ref> that in this case a property that we call monotonicity holds: for R; R 0 X, if 2 T (R) then D (R) R and X " R = ;; and if 2 T (R) and R 0 R with D () R 0 , then 2 T (R <p> As a result, one maintains T (R i ) for a single sample R i of S at each stage. This has the advantage of bounding globally the sum of the sizes of all subproblems at each step. This approach is related to the lazy randomized incremental construction of <ref> [1, 18] </ref>. The algorithm inserts the segments in rounds.
Reference: [19] <author> M. de Berg, L. J. Guibas, and D. Halperin. </author> <title> Vertical decompositions for triangles in 3-space. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 1-10, </pages> <year> 1994. </year>
Reference-contexts: When the simplices in S may intersect, the complexity k of A (S) can vary between n and n d . For d = 3, de Berg, Guibas, and Halperin <ref> [19] </ref> build a vertical decomposition D of A (S) of size O (n 2+ff + k) in O (n 2+ff + jDj log n) time, for any constant ff &gt; 0; it supports point location queries in O (log 2 n) time. <p> Thus, in addition to supplying the first parallel methods, we improve on the best known sequential results <ref> [19, 35] </ref> by reducing the query time, and also the size and construction cost of the covering.
Reference: [20] <author> M. T. Goodrich. </author> <title> Intersecting line segments in parallel with an output-sensitive number of processors. </title> <journal> SIAM J. Comput., </journal> <volume> 20 </volume> <pages> 737-755, </pages> <year> 1991. </year>
Reference-contexts: The best previous methods for the general problem are a method of Goodrich <ref> [20] </ref>, which runs in O (log n) time and O (n log 2 n + k log n) work in the CREW PRAM model and a method of Rub, which runs in O (log n log log n) time using O ((n + k) log n log log n) work in <p> One can achieve an optimal O (n log n + k) work bound, however, for some special cases <ref> [20, 22, 23, 39] </ref>. <p> The CREW PRAM allows for concurrent reads but requires writes to be exclusive, and the EREW PRAM requires both reads and writes to be exclusive. in the EREW PRAM model (augmented with processor al-location calls <ref> [20] </ref>). Our method also provides an optimal sequential divide-and-conquer alternative to the plane-sweep method of Chazelle and Edelsbrunner [11], and uses O (n) space if only required to output the intersections, which solves an open problem of Chazelle and Edelsbrunner 4 . A single face in a segment arrangement. <p> By construction P k (r =n )). For each t , step 2.1 is trivially performed in time O (n t ), step 2.2 is performed in time O (n t log n t ) using well-known techniques (see e.g. <ref> [2, 20] </ref>), step 2.3 takes time as indicated above. Thus, steps 1-2 for take time O ((n +k (r =n )) log r + k =).
Reference: [21] <author> M. T. Goodrich. </author> <title> Geometric partitioning made easier, even in parallel. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 73-82, </pages> <year> 1993. </year>
Reference-contexts: Note that locality implies monotonicity. Polynomial construction The basis for our divide-and-conquer approach is the geometric sampling theorem below. We state it in some generality, and then specialize it to our particular problem. For completeness, we give a detailed proof. It uses standard techniques in geometric sampling (see e.g. <ref> [1, 4, 17, 21, 29] </ref>). For sequential computation, the r ffi factor in property (ii) of the theorem can be improved to log r using derandomiza-tion by the method of conditional probabilities. <p> A linear cell is the union of O (1) intersections of each of O (1) half-spaces. A parallelization is due to Goodrich <ref> [21] </ref>.
Reference: [22] <author> M. T. Goodrich, S. Shauck, and S. Guha. </author> <title> Parallel methods for visibility and shortest path problems in simple polygons. </title> <journal> Algorithmica, </journal> <volume> 8 </volume> <pages> 461-486, </pages> <year> 1992. </year>
Reference-contexts: One can achieve an optimal O (n log n + k) work bound, however, for some special cases <ref> [20, 22, 23, 39] </ref>.
Reference: [23] <author> M. T. Goodrich, S. Shauck, and S. Guha. </author> <title> Addendum to parallel methods for visibility and shortest path problems in simple polygons. </title> <journal> Algorithmica, </journal> <volume> 9 </volume> <pages> 515-516, </pages> <year> 1993. </year>
Reference-contexts: One can achieve an optimal O (n log n + k) work bound, however, for some special cases <ref> [20, 22, 23, 39] </ref>.
Reference: [24] <author> L. J. Guibas, M. Sharir, and S. Sifrony. </author> <title> On the general motion planning problem with two degrees of freedom. </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 </volume> <pages> 491-521, </pages> <year> 1989. </year>
Reference-contexts: Let T p (R) be the trapezoidal diagram T (R) restricted to f p (R). The complexity of f p (S) is O (nff (n)) where ff is the very slowly-growing inverse of Ackerman's function <ref> [24, 36] </ref>; this bound can be achieved [40]. The same bound applies to T p (S). For T p (R) monotonicity but not locality holds. Theorem 2.4 directly implies the following.
Reference: [25] <author> S. Halperin and U. Zwick. </author> <title> An optimal randomized logarithmic time connectivity algorithm for the erew pram. </title> <booktitle> In Proc. ACM Symp. Parallel Algorithms and Architectures, </booktitle> <pages> pages 1-10, </pages> <year> 1994. </year>
Reference-contexts: The time is O (log 2 n) because we construct planar line segment arrangements (Theorem 3.2). The work reflects the complexities of the best known EREW PRAM connected component algorithms which run in O (log n) time using O (n) work with high probability <ref> [25] </ref>, or deterministically in O (log n log log n) using O (m + n) processors [13]. Triangulating non-intersecting (d 1)-simplices in IR d .
Reference: [26] <author> A. Joffe. </author> <title> On a set of almost deterministic k-independentrandomvariables. </title> <journal> Annals of Probability, </journal> <volume> 2 </volume> <pages> 161-162, </pages> <year> 1974. </year>
Reference-contexts: In the argument for (iii) when monotoncity but not locality holds, we need to make use of a particular construction of the sample space for the 0-1 random variables I 1 ; : : : ; I n that determine R. We use the construction of Joffe <ref> [26] </ref>: Let be a prime number with n &lt; 2n; the sample space is W (; 2K) = Z 2K .
Reference: [27] <author> J. Matousek. </author> <title> Cutting hyperplanearrangements. </title> <journal> Discrete Comput. Geom., </journal> <volume> 6 </volume> <pages> 385-406, </pages> <year> 1991. </year>
Reference-contexts: Linearization. To apply Matousek's construction for approximations, and in order to compute the conflict lists of T (R) efficiently, we make use of linearization for (X ; T (X )) (first described by Yao and Yao [41], and introduced in geometric sampling by Matousek <ref> [27, 29] </ref>). The pair (X ; F ) is lineariz-able if there are maps ' from X into IR d , and from F into L (IR d ) such that for x 2 X and 2 F , x " 6= ; iff '(x) 2 ().
Reference: [28] <author> J. Matousek. </author> <title> Epsilon-nets and computational geometry. </title> <editor> In J. Pach, editor, </editor> <booktitle> New Trends in Discrete and Computational Geometry, volume 10 of Algorithms and Combinatorics, </booktitle> <pages> pages 69-89. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: We show how to solve the problem of computing a segment arrangement in O (log 2 n) time and O (n log n+k) work 1 For background material on geometric sampling, see <ref> [3, 14, 28, 34] </ref>. 2 We say that an event parameterized by n holds with high probability if its probability is at least 1 1=n ffi for some constant ffi &gt; 0. 3 The CRCW PRAM is the synchronous shared-memory model that allows for concurrent reads and concurrent writeswhich in this
Reference: [29] <author> J. Matousek and O. Schwarzkopf. </author> <title> A deterministic algorithm for the three-dimensional diameter problem. </title> <booktitle> In Proc. 25th Annu. ACM Sympos. Theory Com-put., </booktitle> <pages> pages 478-484, </pages> <year> 1993. </year>
Reference-contexts: Note that locality implies monotonicity. Polynomial construction The basis for our divide-and-conquer approach is the geometric sampling theorem below. We state it in some generality, and then specialize it to our particular problem. For completeness, we give a detailed proof. It uses standard techniques in geometric sampling (see e.g. <ref> [1, 4, 17, 21, 29] </ref>). For sequential computation, the r ffi factor in property (ii) of the theorem can be improved to log r using derandomiza-tion by the method of conditional probabilities. <p> Linearization. To apply Matousek's construction for approximations, and in order to compute the conflict lists of T (R) efficiently, we make use of linearization for (X ; T (X )) (first described by Yao and Yao [41], and introduced in geometric sampling by Matousek <ref> [27, 29] </ref>). The pair (X ; F ) is lineariz-able if there are maps ' from X into IR d , and from F into L (IR d ) such that for x 2 X and 2 F , x " 6= ; iff '(x) 2 (). <p> Computing conflict lists. Linearization also simplifies the problem of computing the conflict lists X for 2 T (R): this is translated into a problem of point location queries in an arrangement of hyperplanes in IR d (see for example <ref> [29] </ref>). Let H be the collection of all the hyperplanes bounding the linear cells () for 2 T (R). jHj is O (r D ).
Reference: [30] <author> J. Matousek. </author> <title> Efficient partition trees. </title> <journal> Discrete Comput. Geom., </journal> <volume> 8 </volume> <pages> 315-334, </pages> <year> 1992. </year>
Reference-contexts: For definiteness, we will use this theorem 2.2 with ffi = 1=2. Efficient construction For our purposes, we need a faster construction of a sample R. This can be achieved using *-approximations which can be constructed efficiently using a technique of Matousek <ref> [30] </ref>. Approximations.
Reference: [31] <author> K. Mehlhorn, M. Sharir, and E. Welzl. </author> <title> Tail estimates for the efficiency of randomized incremental algorithms for line segment intersection. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 3 </volume> <pages> 235-246, </pages> <year> 1993. </year>
Reference-contexts: A number of researchers [12, 17, 33, 34], have given elegant randomized methods that run in O (n log n + k) expected time. In fact, if k n log 1+ffi n for some constant ffi &gt; 0, then these methods run in this bound with high probability 2 <ref> [31] </ref>.
Reference: [32] <author> J. S. B. Mitchell. </author> <title> On computing a single face in an arrangementof line segments. </title> <type> Manuscript, </type> <institution> School Oper. Res. Indust. Engrg., Cornell Univ., </institution> <address> Ithaca, NY, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: It is known that the boundary complexity of a single face is O (nff (n)) where ff (n) is the very slowly-growing inverse of Ackerman's function. The best previously known deterministic algorithm is an O (n log 2 n) method due to Mitchell <ref> [32] </ref>, yet there are randomized ones that run in expected time O (nff (n) log n) [12, 18]. The known lower bound is W (n log n). We describe an almost-optimal deterministic algorithm, in that it runs in time O (nff 2 (n) log n).
Reference: [33] <author> K. Mulmuley. </author> <title> A fast planar partition algorithm, I. </title> <booktitle> In Proc. 29th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 580-589, </pages> <year> 1988. </year>
Reference-contexts: Chazelle and Edelsbrunner [11] gave an optimal method for computing segment intersections and constructing their arrangement that runs in O (n log n + k) time and uses a number of beautiful techniques, including plane sweeping and topological sweeping. A number of researchers <ref> [12, 17, 33, 34] </ref>, have given elegant randomized methods that run in O (n log n + k) expected time. In fact, if k n log 1+ffi n for some constant ffi &gt; 0, then these methods run in this bound with high probability 2 [31].
Reference: [34] <author> K. Mulmuley. </author> <title> Computational Geometry: An Introduction Through Randomized Algorithms. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: Chazelle and Edelsbrunner [11] gave an optimal method for computing segment intersections and constructing their arrangement that runs in O (n log n + k) time and uses a number of beautiful techniques, including plane sweeping and topological sweeping. A number of researchers <ref> [12, 17, 33, 34] </ref>, have given elegant randomized methods that run in O (n log n + k) expected time. In fact, if k n log 1+ffi n for some constant ffi &gt; 0, then these methods run in this bound with high probability 2 [31]. <p> We show how to solve the problem of computing a segment arrangement in O (log 2 n) time and O (n log n+k) work 1 For background material on geometric sampling, see <ref> [3, 14, 28, 34] </ref>. 2 We say that an event parameterized by n holds with high probability if its probability is at least 1 1=n ffi for some constant ffi &gt; 0. 3 The CRCW PRAM is the synchronous shared-memory model that allows for concurrent reads and concurrent writeswhich in this
Reference: [35] <author> Marco Pellegrini. </author> <title> On point location and motion planning among simplices. </title> <booktitle> In Proc. 25th Annu. ACM Sympos. Theory Comput., </booktitle> <year> 1994. </year>
Reference-contexts: For d 3, Pellegrini <ref> [35] </ref> constructs a covering 5 for A (S) of size O (n d1+ff + k) in O (n d1+ff +k) time, for any constant ff &gt; 0. <p> Thus, in addition to supplying the first parallel methods, we improve on the best known sequential results <ref> [19, 35] </ref> by reducing the query time, and also the size and construction cost of the covering. <p> When the simplices in S are interior disjoint, e.g., non-simple polyhedra, a triangulation of A (S) of size O (n d1 ) can be built in O (log n) time using O (n d1 ) work in the EREW PRAM model, matching the sequential result of Pellegrini <ref> [35] </ref>. 4 Recently, this has also been solved by I. Balaban [5] with an entirely different approach. His algorithm, however, does not seem to parallelize nor to be adaptable to computing the arrangement. 5 A covering is a set of cells of constant descriptive complexity whose union contains A (S). <p> When the simplices in S are interior disjoint, e.g., non-simple polyhedra, the construction can be optimized to build a a triangulation of A (S) of size O (n d1 ) using as much work. Our construction is inspired by Pellegrini <ref> [35] </ref>, who gives a recursive construction that has O (log n) stages, each using constant size cuttings 6 of the simplices in S. An augmented version of the resulting hierarchical structure answers incidence and vertical ray-shooting queries in O (log 2 n) and O (log 3 n) time, respectively. <p> Then we briefly discuss how point location queries can be performed in O (log n) time using a sequence of d vertical ray shooting queries. Incidence queries. As in <ref> [35] </ref>, the basic data structure is a two-level search tree. <p> Since there are O (r d1 i+1 ) d-cylinders contained in each node at level i in T pc , the search cannot be performed by brute force (as was done in <ref> [35] </ref>). However, we can build a point location structure for the (d 1)-dimensional arrangement of the hy-perplanes spanning the (d 2)-faces of the simplices in S 0 pc . <p> Thus, we explain how to answer a query in b ( 2 ). As in <ref> [35] </ref>, we use an auxiliary structure to answer the query in b ( 2 ). However, we will use a different (and arguably simpler) method. <p> Point location queries. In <ref> [35] </ref>, a point location query is reduced to a series of d vertical ray shooting queries in faces of A (S) of decreasing dimension. Using our vertical ray shooting data structures in the point location algorithm of [35] we obtain a query time of O (log n), and storage and construction <p> Point location queries. In <ref> [35] </ref>, a point location query is reduced to a series of d vertical ray shooting queries in faces of A (S) of decreasing dimension. Using our vertical ray shooting data structures in the point location algorithm of [35] we obtain a query time of O (log n), and storage and construction costs of m = O (n d1 log O (1) n + k) and O (m + k log n), respectively. To obtain the parallel result we note that Pellegrini's [35] construction of the connectivity graph of <p> in the point location algorithm of <ref> [35] </ref> we obtain a query time of O (log n), and storage and construction costs of m = O (n d1 log O (1) n + k) and O (m + k log n), respectively. To obtain the parallel result we note that Pellegrini's [35] construction of the connectivity graph of A (S) (used in the search) can be parallelized in a straightforward manner yielding the point location structure in O (log 2 n) time in the EREW PRAM model. <p> Triangulating non-intersecting (d 1)-simplices in IR d . If the simplices in S are interior disjoint, then Pellegrini <ref> [35] </ref> notes that a slight modification of the method for building the incidence query data structure can be used to construct a triangulation of A (S) of size O (n d1 ) in time O (n d1 ).
Reference: [36] <author> R. Pollack, M. Sharir, and S. Sifrony. </author> <title> Separating two simple polygons by a sequence of translations. </title> <journal> Discrete Comput. Geom., </journal> <volume> 3 </volume> <pages> 123-136, </pages> <year> 1987. </year>
Reference-contexts: Let T p (R) be the trapezoidal diagram T (R) restricted to f p (R). The complexity of f p (S) is O (nff (n)) where ff is the very slowly-growing inverse of Ackerman's function <ref> [24, 36] </ref>; this bound can be achieved [40]. The same bound applies to T p (S). For T p (R) monotonicity but not locality holds. Theorem 2.4 directly implies the following.
Reference: [37] <author> J. H. Reif, </author> <title> editor. Synthesis of Parallel Algorithms. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: Using randomization, the time is O (log n log log n) with n-polynomial probability. All steps in stage i can be parallelized in a straight forward manner using known parallel techniques (see, e.g., <ref> [4, 37] </ref>). In particular, stage i runs in O (log 2 r i ) time using optimal work. Also, at each round it suffices to perform one single global processor allocation call.
Reference: [38] <author> John H. Reif and Sandeep Sen. </author> <title> Optimal randomized parallel algorithms for computational geometry. </title> <journal> Algorithmica, </journal> <volume> 7(1) </volume> <pages> 91-117, </pages> <year> 1992. </year>
Reference: [39] <author> C. Rub. </author> <title> Computing intersections and arrangements for red-blue curve segments in parallel. </title> <booktitle> In Proc. 4th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 115-120, </pages> <year> 1992. </year>
Reference-contexts: One can achieve an optimal O (n log n + k) work bound, however, for some special cases <ref> [20, 22, 23, 39] </ref>.
Reference: [40] <author> A. Wiernik and M. Sharir. </author> <title> Planar realizations of nonlinear Davenport-Schinzel sequences by segments. </title> <journal> Discrete Comput. Geom., </journal> <volume> 3 </volume> <pages> 15-47, </pages> <year> 1988. </year>
Reference-contexts: Let T p (R) be the trapezoidal diagram T (R) restricted to f p (R). The complexity of f p (S) is O (nff (n)) where ff is the very slowly-growing inverse of Ackerman's function [24, 36]; this bound can be achieved <ref> [40] </ref>. The same bound applies to T p (S). For T p (R) monotonicity but not locality holds. Theorem 2.4 directly implies the following.
Reference: [41] <author> A. C. Yao and F. F. Yao. </author> <title> A general approachto D-dimensionalgeometric queries. </title> <booktitle> In Proc. 17th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 163-168, </pages> <year> 1985. </year>
Reference-contexts: Linearization. To apply Matousek's construction for approximations, and in order to compute the conflict lists of T (R) efficiently, we make use of linearization for (X ; T (X )) (first described by Yao and Yao <ref> [41] </ref>, and introduced in geometric sampling by Matousek [27, 29]).
References-found: 41

