URL: http://www.cs.utexas.edu/users/cpg/pub/96-TSE.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/cpg/pub/abs.html
Root-URL: 
Title: A Framework for Evaluating Specification Methods for Reactive Systems  
Author: Mark A. Ardis John A. Chaves Lalita Jategaonkar Jagadeesan Peter Mataga Carlos Puchol Mark G. Staskauskas James Von Olnhausen 
Note: Appeared in the IEEE Transactions on Software Engineering, 22(6):378-389, June 1996.  
Date: June 1996  
Abstract: Copyright 1996 IEEE. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must be obtained from the IEEE. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K.E. Martersteck and A.E. Spencer, </author> <title> "Introduction to the 5ESS(TM) switching system", </title> <journal> AT&T Technical Journal, </journal> <volume> vol. 64, no. 6 part 2, </volume> <pages> pp. 1305-1314, </pages> <month> July-August </month> <year> 1985. </year>
Reference-contexts: Reactive systems are ubiquitous in the software for AT&T's 5ESS R fl telephone switching system <ref> [1] </ref>. For example, the software for establishing and tearing down telephone calls must correctly handle each of the possible sequences of events that can be entered by the caller and callee in a telephone call.
Reference: [2] <author> F. Jahanian and A. Mok, "Modechart: </author> <title> A specification language for real-time systems", </title> <journal> IEEE Transactions in Software Engineering, </journal> <volume> vol. 20, no. 12, </volume> <pages> pp. 933-947, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: For each of the specification methods studied, we attempted to specify the protocol requirements, construct an abstract algorithm in the method's modeling language, and then verify that the algorithm satisfies the requirements. We selected for evaluation the specification methods Modechart <ref> [2] </ref>, VFSM [3], Esterel [4], Basic LOTOS [5] , Z [6], and SDL [7], and the programming language C (the latter was chosen as a point of contrast, since it is the primary language in which the 5ESS software is implemented). <p> We also reviewed the solutions prepared by the project team as an aid in understanding the requirements. Although there were many similarities between solutions, there were also many differences. 3.1 Modechart The Modechart specification language <ref> [2] </ref> is a synchronous language designed for the specification of real-time systems. Modechart borrows from Stat-echarts [11] the use of hierarchical graphical formalisms to extend conventional state-transition diagrams. Modechart adds absolute and relative timing semantics to Statecharts transitions. Its semantics is defined in terms of two equivalent semantics.
Reference: [3] <author> F. Wagner, </author> <title> "VFSM executable specification", </title> <booktitle> in CompEuro92, </booktitle> <year> 1992. </year>
Reference-contexts: For each of the specification methods studied, we attempted to specify the protocol requirements, construct an abstract algorithm in the method's modeling language, and then verify that the algorithm satisfies the requirements. We selected for evaluation the specification methods Modechart [2], VFSM <ref> [3] </ref>, Esterel [4], Basic LOTOS [5] , Z [6], and SDL [7], and the programming language C (the latter was chosen as a point of contrast, since it is the primary language in which the 5ESS software is implemented). <p> the system cannot be in the Unsafe state at any point in the computation graph for any amount of time, while other properties have been formally proved by using the Modechart verifier with predicates expressed in RTL, such as mode exclusion. 3.2 VFSM The Virtual Finite State Machine (VFSM) methodology <ref> [3] </ref> consists of a design paradigm, in which the control behavior of a software module is specified as a finite-state machine; and an implementation paradigm, which consists of a design structure that defines the interface between the control specification and the rest of the implementation.
Reference: [4] <author> G. Berry and G. Gonthier, </author> <title> "The ESTEREL synchronous programming language: design, semantics, </title> <booktitle> implementation", Science of Computer Programming, </booktitle> <volume> vol. 19, </volume> <pages> pp. 87-152, </pages> <year> 1992. </year>
Reference-contexts: For each of the specification methods studied, we attempted to specify the protocol requirements, construct an abstract algorithm in the method's modeling language, and then verify that the algorithm satisfies the requirements. We selected for evaluation the specification methods Modechart [2], VFSM [3], Esterel <ref> [4] </ref>, Basic LOTOS [5] , Z [6], and SDL [7], and the programming language C (the latter was chosen as a point of contrast, since it is the primary language in which the 5ESS software is implemented). <p> The VFSM toolset includes a validator that exhaustively checks for concurrency-related errors such as deadlock and livelock. The validator will soon be enhanced to enable the checking of user-specified properties of an application, similar to those for the APS problem listed in Section 2. 3.3 Esterel Esterel <ref> [4] </ref> is a language, with a precisely defined mathematical semantics, for programming the class of input-driven deterministic reactive systems | those that wait for a set of possibly simultaneous inputs, react to the inputs by computing and producing outputs, and then quiesce, waiting for new inputs.
Reference: [5] <author> ISO, </author> <title> LOTOS|A Formal Description Technique Based on the Temporal Ordering of Observational Behavior, ISO, 1989, International Standard ISO 8807. </title>
Reference-contexts: For each of the specification methods studied, we attempted to specify the protocol requirements, construct an abstract algorithm in the method's modeling language, and then verify that the algorithm satisfies the requirements. We selected for evaluation the specification methods Modechart [2], VFSM [3], Esterel [4], Basic LOTOS <ref> [5] </ref> , Z [6], and SDL [7], and the programming language C (the latter was chosen as a point of contrast, since it is the primary language in which the 5ESS software is implemented). <p> Using this technique and toolset, we automatically formally verified that our Esterel implementation satisfies all the properties given in Section 2, expressed as safety properties in temporal logic. 3.4 LOTOS LOTOS <ref> [5] </ref> was designed for protocol specification, especially within the telecommunication domain [20]. Basic LOTOS is that part of the language that describes interaction of processes in terms of shared events.
Reference: [6] <author> J.M. Spivey, </author> <title> The Z Notation: A Reference Manual, </title> <publisher> Prentice Hall International, </publisher> <address> 2nd edition, </address> <year> 1992. </year>
Reference-contexts: We selected for evaluation the specification methods Modechart [2], VFSM [3], Esterel [4], Basic LOTOS [5] , Z <ref> [6] </ref>, and SDL [7], and the programming language C (the latter was chosen as a point of contrast, since it is the primary language in which the 5ESS software is implemented). <p> As part of simulation we generated traces of individual scenarios in Message Sequence Chart [24] form. These were useful in discussions with domain experts who reviewed the original project requirements. In fact, most of the properties were originally expressed as scenarios by these reviewers. The Z notation <ref> [6] </ref> combines abstract data modeling and a mathematical toolkit based on set theory and first-order predicate logic. In conjunction with Z's modest structuring conventions, these may be used to specify system state and valid state changes for an instantaneously responding reactive system.
Reference: [7] <author> ITU-T, </author> <title> "Specification and Description Language SDL", Recommendation Z.100, </title> <year> 1993. </year>
Reference-contexts: We selected for evaluation the specification methods Modechart [2], VFSM [3], Esterel [4], Basic LOTOS [5] , Z [6], and SDL <ref> [7] </ref>, and the programming language C (the latter was chosen as a point of contrast, since it is the primary language in which the 5ESS software is implemented).
Reference: [8] <author> S. Gerhart, D. Craigen, and T. Ralston, </author> <title> "Experience with formal methods in critical systems", </title> <journal> IEEE Software, </journal> <volume> vol. 11, no. 1, </volume> <pages> pp. 21-28, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: In work related to ours, Gerhart et al. <ref> [8] </ref> have put forth a set of criteria for evaluating formal methods in general, and Lewerentz and Lindner [9] have collected several case studies of the application of formal methods for reactive systems to the specification of a common design problem.
Reference: [9] <author> C. Lewerentz and T. Lindner, </author> <title> "Case study 'production cell': A comparative study in formal specification and verification", </title> <type> Tech. Rep., </type> <institution> Forschungszentrum In-formatik, </institution> <year> 1994. </year>
Reference-contexts: In work related to ours, Gerhart et al. [8] have put forth a set of criteria for evaluating formal methods in general, and Lewerentz and Lindner <ref> [9] </ref> have collected several case studies of the application of formal methods for reactive systems to the specification of a common design problem.
Reference: [10] <author> Bellcore, </author> <title> "Synchronous optical network (SONET) transport systems: Common generic criteria", </title> <type> Tech. Rep. </type> <note> TR-NWT-000253, Issue 2, </note> <institution> Bellcore, </institution> <year> 1991. </year>
Reference: [11] <author> D. Harel, "Statecharts: </author> <title> A visual formalism for complex systems", </title> <booktitle> Science of Computer Programming, </booktitle> <volume> vol. 8, </volume> <pages> pp. 231-274, </pages> <year> 1987. </year>
Reference-contexts: Although there were many similarities between solutions, there were also many differences. 3.1 Modechart The Modechart specification language [2] is a synchronous language designed for the specification of real-time systems. Modechart borrows from Stat-echarts <ref> [11] </ref> the use of hierarchical graphical formalisms to extend conventional state-transition diagrams. Modechart adds absolute and relative timing semantics to Statecharts transitions. Its semantics is defined in terms of two equivalent semantics.
Reference: [12] <author> F. Jahanian and A. Mok, </author> <title> "Safety analysis of timing properties in real-time systems", </title> <journal> IEEE Transactions in Software Engineering, </journal> <volume> vol. 9, </volume> <pages> pp. 890-904, </pages> <year> 1986. </year>
Reference-contexts: Modechart borrows from Stat-echarts [11] the use of hierarchical graphical formalisms to extend conventional state-transition diagrams. Modechart adds absolute and relative timing semantics to Statecharts transitions. Its semantics is defined in terms of two equivalent semantics. The first one is an "axiomatic" semantics formalized in RTL (Real-Time Logic <ref> [12] </ref>), which is a logic especially amenable to reasoning about the absolute timing of events. The second is an "operational" semantics [13] which captures a more computational and intuitive approach to the language.
Reference: [13] <author> C. Puchol, D. Stuart, and A.K. Mok, </author> <title> "An operational semantics for Modechart specifications", </title> <type> Tech. Rep. </type> <institution> UTCS-TR95-37, Department of Computer Sciences, The University of Texas at Austin, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: Its semantics is defined in terms of two equivalent semantics. The first one is an "axiomatic" semantics formalized in RTL (Real-Time Logic [12]), which is a logic especially amenable to reasoning about the absolute timing of events. The second is an "operational" semantics <ref> [13] </ref> which captures a more computational and intuitive approach to the language. A set of tools has been developed for the specification, analysis and implementation of real-time systems within this framework [14, 15]. Modechart specifications are made up of modes and transitions.
Reference: [14] <author> P.C. Clements, C. L. Heitmeyer, B. G. Labau, and A. T. Rose, </author> <title> "MT: A toolset for specifying and analyzing real-time systems", </title> <booktitle> IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: The second is an "operational" semantics [13] which captures a more computational and intuitive approach to the language. A set of tools has been developed for the specification, analysis and implementation of real-time systems within this framework <ref> [14, 15] </ref>. Modechart specifications are made up of modes and transitions. Modes can be thought of as hierarchical partitions of the state space, and can be combined by using parallel or serial composition. The most basic modes are called atomic modes.
Reference: [15] <author> C. Puchol, A.K. Mok, and D. Stuart, </author> <title> "Compiling Modechart specifications", </title> <booktitle> in IEEE Real-Time Systems Symposium, </booktitle> <month> December </month> <year> 1995, </year> <pages> pp. 256-265. </pages> <note> [16] "AGEL workshop manual version 3.0", </note> <year> 1989, </year> <title> Produced by ILOG, </title> <address> Mountain View, CA, USA. </address>
Reference-contexts: The second is an "operational" semantics [13] which captures a more computational and intuitive approach to the language. A set of tools has been developed for the specification, analysis and implementation of real-time systems within this framework <ref> [14, 15] </ref>. Modechart specifications are made up of modes and transitions. Modes can be thought of as hierarchical partitions of the state space, and can be combined by using parallel or serial composition. The most basic modes are called atomic modes.
Reference: [17] <author> R. Milner, </author> <title> Communication and Concurrency, </title> <booktitle> Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: The AGEL [16] development environment for Es-terel provides high-quality tools, including an editor, compiler, simulator, debugger, and verifier. The verifier provides a graphical representation of the generated state machine, and computes reduced state machines based on bisimulation equivalence <ref> [17] </ref>. The simulator supports interactive execution of Esterel programs, by allowing the user to provide input signals and corresponding values and observe the output signals and corresponding values that are produced in response.
Reference: [18] <author> L.J. Jagadeesan, C. Puchol, and J.E. Von Olnhausen, </author> <title> "Safety property verification of esterel programs and applications to telecommunications software", </title> <booktitle> in 7th International Conference on Computer-Aided Verification, Volume 939 of the Lecture Notes in Computer Science, </booktitle> <month> July </month> <year> 1995, </year> <pages> pp. 127-140. </pages>
Reference-contexts: The editors support both textual representations of Esterel programs and graphical representations of state machines. We found this environment to be quite useful in writing and debugging our implementation. Furthermore, we automatically formally verified the correctness of our Esterel implementation using the technique developed in <ref> [18] </ref>. In particular, this verification process involves three steps: 1. Automated translation from a class of temporal logic safety properties [19] to Esterel. 2. Compilation of the given program in parallel with the Esterel "model" of the properties, resulting in a finite state machine. 3. <p> Analysis of this finite state machine for satisfac tion/violation of the properties. All three of these steps have been automated, and are supported by a toolset (described in more detail in <ref> [18] </ref>). Using this technique and toolset, we automatically formally verified that our Esterel implementation satisfies all the properties given in Section 2, expressed as safety properties in temporal logic. 3.4 LOTOS LOTOS [5] was designed for protocol specification, especially within the telecommunication domain [20].
Reference: [19] <author> Z. Manna and A. Pnueli, </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification, </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Furthermore, we automatically formally verified the correctness of our Esterel implementation using the technique developed in [18]. In particular, this verification process involves three steps: 1. Automated translation from a class of temporal logic safety properties <ref> [19] </ref> to Esterel. 2. Compilation of the given program in parallel with the Esterel "model" of the properties, resulting in a finite state machine. 3. Analysis of this finite state machine for satisfac tion/violation of the properties.
Reference: [20] <author> R. Boumezbeur and L. Logrippo, </author> <title> "Specifying telephone systems in LOTOS", </title> <journal> IEEE Communications, </journal> <pages> pp. 38-45, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Using this technique and toolset, we automatically formally verified that our Esterel implementation satisfies all the properties given in Section 2, expressed as safety properties in temporal logic. 3.4 LOTOS LOTOS [5] was designed for protocol specification, especially within the telecommunication domain <ref> [20] </ref>. Basic LOTOS is that part of the language that describes interaction of processes in terms of shared events. A process algebra paradigm is used, where each process is described in terms of legal sequences of events experienced by that process.
Reference: [21] <author> M. Ardis, </author> <title> "Lessons from using Basic LOTOS", </title> <booktitle> in 16th International Conference on Software Engineering, </booktitle> <year> 1994, </year> <pages> pp. 5-14. </pages>
Reference-contexts: A process algebra paradigm is used, where each process is described in terms of legal sequences of events experienced by that process. The APS requirements table was first transcribed into a special finite-state machine dialect, called Primitive LOTOS <ref> [21] </ref>. A compiler then translated this form into an executable subset of Basic LOTOS. The result is a state-oriented style [22], but with explicit representation of states by processes. <p> We have written an Esterel version of some alarms software in the 5ESS switch [31]; this feature was also written in Modechart. We have used LOTOS to specify various parts of telecommunications switching systems, including call processing and maintenance facilities <ref> [21] </ref>. Many real-time switching protocols in 5ESS signaling and call processing applications have been written in SDL [32]. We have written a Z specification of a set of 5ESS subscriber telephone features [33]. Finally, we have written in C many features of the 5ESS switch.
Reference: [22] <author> C.A. Vissers, G. Scollo, M. van Sinderen, and E. Brinksma, </author> <title> "Specification styles in distributed systems design and verification", </title> <booktitle> Theoretical Computer Science, </booktitle> <pages> pp. 179-206, </pages> <year> 1991. </year>
Reference-contexts: The APS requirements table was first transcribed into a special finite-state machine dialect, called Primitive LOTOS [21]. A compiler then translated this form into an executable subset of Basic LOTOS. The result is a state-oriented style <ref> [22] </ref>, but with explicit representation of states by processes. That is, each state of the table is represented by a LOTOS process, and each transition is represented by an event sequence that ends with an invocation of the appropriate process (state). form (arguments to processes have been omitted).
Reference: [23] <author> N.G. Leveson, M.P.E. Heimdahl, H. Hildreth, and J.D. Reese, </author> <title> "Requirements specification for process-control systems", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 20, no. 9, </volume> <pages> pp. 684-707, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: Primitive LOTOS is simpler than Basic LOTOS, and it has a tabular dialect that was easier for the domain experts to review. The observation that tabular representations are a useful alternative to other formalisms has also been made by Leveson <ref> [23] </ref>. Tables are certainly familiar to software engineers, and they are easy to inspect for omissions. Of course, tables quickly prove unwieldy when they grow in size. We were fortunate that the APS problem was simple enough to express in a small table.
Reference: [24] <author> ITU-T, </author> <title> "Message Sequence Chart", Recommendation Z.120, </title> <year> 1992. </year>
Reference-contexts: By conjoining these separate processes and running a simulator we could have detected potential deadlocks, which would have demonstrated inconsistency between the two descriptions. We found simulation to be useful in debugging the LOTOS specification. As part of simulation we generated traces of individual scenarios in Message Sequence Chart <ref> [24] </ref> form. These were useful in discussions with domain experts who reviewed the original project requirements. In fact, most of the properties were originally expressed as scenarios by these reviewers. The Z notation [6] combines abstract data modeling and a mathematical toolkit based on set theory and first-order predicate logic.
Reference: [25] <author> A. Hall, </author> <title> "Using Z as a specification calculus for object-oriented systems", in VDM and Z Formal Methods in Software Development, </title> <editor> D. Bjtrner, C. A. R. Hoare, and H. Langmaack, Eds. </editor> <year> 1990, </year> <pages> pp. 290-318, </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: To construct a specification for APS, we adopted certain structuring and naming conventions in addition to the standard conventions of Z. A loosely object-oriented style of specification due to Hall <ref> [25] </ref>, in which much of the necessary Z can be macro-generated, was followed. In addition, an event semantics suggested by the work of Zave and Jackson [26] was assumed.
Reference: [26] <author> P. Zave and M. Jackson, </author> <title> "Where do operations come from? A multiparadigm specification technique", </title> <note> 1994, Draft available from the authors. </note>
Reference-contexts: A loosely object-oriented style of specification due to Hall [25], in which much of the necessary Z can be macro-generated, was followed. In addition, an event semantics suggested by the work of Zave and Jackson <ref> [26] </ref> was assumed. Though built up from simpler pieces (see Figure 5), each event was described by a separate schema, with preconditions guarding against illegal operations, and postconditions specifying the outcomes. The structure provided by the conventions adopted allows a natural specification of the behavior.
Reference: [27] <author> W. Kirk Snyder, </author> <title> "The SETL2 programming language", </title> <type> Tech. Rep., </type> <institution> Courant Institute of Mathematical Sciences, </institution> <address> New York University, </address> <year> 1990. </year>
Reference-contexts: For development of reactive systems, simulation appears to us to be essential. In this case, because of the simplicity of the specification, we were able to carry out a mechanical translation into the SETL2 language <ref> [27] </ref>. The translation results in a nondeterministic finite state automaton in general, since the Z need not fully constrain the outcome of any event. The finiteness of the system is relied upon to provide a well-defined set of possible states.
Reference: [28] <editor> J.-R. Abrial, </editor> <booktitle> The B-Book, </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: Of course, this naive technique does not generalize well. More sophisticated development environments based on Z and related notations are now becoming available (for example, the B-Method <ref> [28] </ref>). These offer support for both analysis and implementation, but the limited industrial use of the technology for reactive systems makes it difficult to evaluate its utility for large-scale projects.
Reference: [29] <author> G.J. Holzmann, </author> <title> "Practical methods for the formal validation of SDL specifications", </title> <journal> Computer Communications, </journal> <pages> pp. 129-134, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: A separate SDL model was written to represent the environment in which the requirements must hold. In this case the system is fully defined and must operate in an environment that can generate any event at any time. Our validator <ref> [29] </ref> performs the most effective state space search possible given memory and time constraints. Any scenario violating basic properties or user claims is presented in detail as a counter-example. Since the total state space for this specification is quite small, an exhaustive search was possible.
Reference: [30] <author> A. R. Flora-Holmquist, J. D. O'Grady, and M. G. Staskauskas, </author> <title> "Telecommunications software design using virtual finite state machines", </title> <booktitle> in Proc. Intl. Switching Symposium (ISS95), </booktitle> <address> Berlin, Germany, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: In earlier work, we had re-written larger portions of the 5ESS software in these languages. In particular, VFSM has been used in the design of many 5ESS software modules, including applications in call processing and signaling <ref> [30] </ref>. We have written an Esterel version of some alarms software in the 5ESS switch [31]; this feature was also written in Modechart. We have used LOTOS to specify various parts of telecommunications switching systems, including call processing and maintenance facilities [21].
Reference: [31] <author> L.J. Jagadeesan, C. Puchol, and J.E. Von Olnhausen, </author> <title> "A formal approach to reactive systems software: A telecommunications application in Esterel", </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> vol. 8, no. 2, </volume> <month> March </month> <year> 1996, </year> <note> Preliminary version appeared in the Proceedings of the IEEE Workshop on Industrial-Strength Formal Specification Techniques, </note> <month> April </month> <year> 1995. </year>
Reference-contexts: In particular, VFSM has been used in the design of many 5ESS software modules, including applications in call processing and signaling [30]. We have written an Esterel version of some alarms software in the 5ESS switch <ref> [31] </ref>; this feature was also written in Modechart. We have used LOTOS to specify various parts of telecommunications switching systems, including call processing and maintenance facilities [21]. Many real-time switching protocols in 5ESS signaling and call processing applications have been written in SDL [32].
Reference: [32] <author> John A. Chaves, </author> <title> "Formal methods at AT&T an industrial usage report", in Formal Description Techniques IV, </title> <editor> Parker and Rose, Eds. </editor> <year> 1992, </year> <pages> pp. 83-90, </pages> <publisher> North-Holland, Amsterdam. </publisher>
Reference-contexts: We have used LOTOS to specify various parts of telecommunications switching systems, including call processing and maintenance facilities [21]. Many real-time switching protocols in 5ESS signaling and call processing applications have been written in SDL <ref> [32] </ref>. We have written a Z specification of a set of 5ESS subscriber telephone features [33]. Finally, we have written in C many features of the 5ESS switch. We emphasize that our evaluation of the languages and tools reflects our APS specifications as well as our previous experiences.
Reference: [33] <author> P. A. Mataga and P. Zave, </author> <title> "Formal specification of telephone features", in Z User Workshop, Cambridge 1994, </title> <editor> J. P. Bowen and J. A. Hall, Eds. </editor> <year> 1994, </year> <pages> pp. 29-50, </pages> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Many real-time switching protocols in 5ESS signaling and call processing applications have been written in SDL [32]. We have written a Z specification of a set of 5ESS subscriber telephone features <ref> [33] </ref>. Finally, we have written in C many features of the 5ESS switch. We emphasize that our evaluation of the languages and tools reflects our APS specifications as well as our previous experiences. Our findings appear in Figure 9.
References-found: 32

