URL: file://ftp.cs.utexas.edu/pub/neural-nets/papers/moriarty.csp.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/nn/pages/publications/abstracts.html
Root-URL: 
Email: moriarty,risto@cs.utexas.edu  
Title: Evolutionary Neural Networks for Value Ordering in Constraint Satisfaction Problems  
Author: David E. Moriarty and Risto Miikkulainen 
Address: Austin, Austin, TX 78712  
Affiliation: Department of Computer Sciences The University of Texas at  
Abstract: Technical Report AI94-218 May 1994 Abstract A new method for developing good value-ordering strategies in constraint satisfaction search is presented. Using an evolutionary technique called SANE, in which individual neurons evolve to cooperate and form a neural network, problem-specific knowledge can be discovered that results in better value-ordering decisions than those based on problem-general heuristics. A neural network was evolved in a chronological backtrack search to decide the ordering of cars in a resource-limited assembly line. The network required 1/30 of the backtracks of random ordering and 1/3 of the backtracks of the maximization of future options heuristic. The SANE approach should extend well to other domains where heuristic information is either difficult to discover or problem-specific. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Barto, A. G., Sutton, R. S., and Watkins, C. J. C. H. </author> <year> (1990). </year> <title> Learning and sequential decision making. </title> <editor> In Gabriel, M., and Moore, J. W., editors, </editor> <booktitle> Learning and Computational Neuroscience. </booktitle> <address> 9 Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference: <author> Bitner, J., and Reingold, E. M. </author> <year> (1975). </year> <title> Backtrack programming techniques. </title> <journal> Communications of the ACM, </journal> <volume> 18 </volume> <pages> 651-655. </pages>
Reference: <author> Collins, R. J., and Jefferson, D. R. </author> <year> (1991). </year> <title> Selection in massively parallel genetic algorithms. </title> <booktitle> In Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> 249-256. </pages> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Davidor, Y. </author> <year> (1991). </year> <title> A naturally occurring niche and species phenonenon: the model and first results. </title> <booktitle> In Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> 257-263. </pages> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Dechter, R. </author> <year> (1990). </year> <title> Enhancement schemes for constraint posting: Backjumping, learning, and cutset decomposition. </title> <journal> Artificial Intelligence, </journal> <volume> 41(3) </volume> <pages> 273-312. </pages>
Reference: <author> Dechter, R., and Pearl, J. </author> <year> (1988). </year> <title> Network-based heuristics for constraint satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 34 </volume> <pages> 1-38. </pages>
Reference: <author> Dejong, K. A. </author> <year> (1975). </year> <title> An Analysis of the Behavior of a Class of Genetic Adaptive Systems. </title> <type> PhD thesis, </type> <institution> The University of Michigan, </institution> <address> Ann Arbor, MI. </address>
Reference-contexts: Instead of multiple parallel searches through the encoding space, the search becomes a random walk using the mutation operator. Several approaches have been developed to help keep diversity in the population. These include fitness sharing (Goldberg 1989), adaptive mutation (Whitley et al. 1990), crowding <ref> (Dejong 1975) </ref>, and local mating (Collins and Jefferson 1991; Davidor 1991). Each of these techniques relies on external genetic functions that prevent convergence of the genetic material. SANE achieves population diversity by making it an essential part of the task.
Reference: <author> Fox, M. S. </author> <year> (1987). </year> <title> Constraint-Directed Search: A Case Study of Job-Shop Scheduling. </title> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: As a conclusion, future directions for genetic decision networks are discussed in section 7. 2 The Car Sequencing Problem Car sequencing is an instance of the general job-shop scheduling problem <ref> (Fox 1987) </ref>. In an automobile factory, a continuously moving assembly line is used to put options such as power windows and sun roofs on cars. When a car enters an option station, the workers walk along with the car until the option has been installed.
Reference: <author> Goldberg, D. E. </author> <year> (1989). </year> <title> Genetic Algorithms in Search, Optimization and Machine Learning. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Instead of multiple parallel searches through the encoding space, the search becomes a random walk using the mutation operator. Several approaches have been developed to help keep diversity in the population. These include fitness sharing <ref> (Goldberg 1989) </ref>, adaptive mutation (Whitley et al. 1990), crowding (Dejong 1975), and local mating (Collins and Jefferson 1991; Davidor 1991). Each of these techniques relies on external genetic functions that prevent convergence of the genetic material. SANE achieves population diversity by making it an essential part of the task.
Reference: <author> Grefenstette, J. J., Ramsey, C. L., and Schultz, A. C. </author> <year> (1990). </year> <title> Learning sequential decision rules using simulation models and competition. </title> <journal> Machine Learning, </journal> <volume> 5 </volume> <pages> 355-381. </pages>
Reference: <author> Haralick, R., and Elliot, G. </author> <year> (1980). </year> <title> Increasing tree search efficiency for constraint satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 14(3) </volume> <pages> 263-313. </pages>
Reference: <author> Kale, L. V. </author> <year> (1990). </year> <title> A perfect heuristic for the n non-attacking queens problem. </title> <journal> Information Processing Letters, </journal> <volume> 34(4) </volume> <pages> 173-178. </pages>
Reference-contexts: This approach delays the scheduling of class 1 cars and can incur large backtracks if they cannot fit later. The maximization of future options is normally a good approach because it directs the search toward areas in the search space with high solution densities <ref> (Kale 1990) </ref>. In this particular case, however, SANE discovered a better ordering through problem-specific knowledge. 7 7 Discussion and Future Work The search strategy that the value-ordering network was embedded in was a simple, chronological, depth-first search.
Reference: <author> Kumar, V. </author> <year> (1992). </year> <title> Algorithms for constraint satisfaction problems: A survey. </title> <journal> AI Magazine, </journal> <volume> 13 </volume> <pages> 32-44. </pages>
Reference-contexts: A CSP generally consists of a set of variables and a set of possible values for them. The variables must be bound such that none of the constraints in the problem are violated. For a survey of current CSP research see <ref> (Kumar 1992) </ref>. Most CSP methods are based on depth-first search with backtracking. When variables are instantiated, constraints are propagated forward, which either constrains the possible values for other variables or produces a contradiction. If a contradiction is found, the search backtracks and alternative variable bindings are tried. <p> Using a similar heuristic, Kale (1990) was able to solve an order of magnitude larger instances of the n-queens problem than using the standard left-right column ordering. One problem with devising good value-ordering heuristics is that they can be highly problem specific <ref> (Kumar 1992) </ref>. For example, Sadeh (1991) showed that Dechter and Pearl's approach, which is problem general, performs poorly on job-shop scheduling problems where problem-specific heuristics generally do well. It would thus be significant if such specific heuristics could be developed automatically for each problem.
Reference: <author> Mackworth, A. K. </author> <year> (1977). </year> <title> Consistency in networks of relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8 </volume> <pages> 99-118. </pages>
Reference-contexts: Chronological search, however, can be inefficient because it can lead to numerous recombinations of variable bindings that together cause failure. This is commonly known as thrashing <ref> (Mackworth 1977) </ref>. A more intelligent approach is to use dependecy-directed backtracking (Stallman and Sussman 1977; Dechter 1990), where the search backtracks to the variable binding that caused failure. Despite the improvements to the backtracking algorithm, the search remains vulnerable to poor value ordering.
Reference: <author> Moriarty, D. E., and Miikkulainen, R. </author> <year> (1993). </year> <title> Evolving complex Othello strategies using marker-based genetic encoding of neural networks. </title> <type> Technical Report AI93-206, </type> <institution> Department of Computer Sciences, The University of Texas at Austin. </institution>
Reference-contexts: The objective is to choose the sequence of decisions such that the total payoff is maximized. Previously, evolutionary neural networks have been shown to be very good at sequential decision tasks such as selecting game moves and focusing minimax search <ref> (Moriarty and Miikkulainen 1993, 1994a) </ref>. The usual neural network learning algorithms such as backpropagation (Rumelhart et al. 1986) are impractical in such tasks since they require that the correct decision is known at each step. <p> By not requiring the network to identify which classes are valid, it can more easily learn the value-ordering task. This approach is analogous to removing the requirement of legal move identification from a move-evaluating network in game playing, which also proved to be a good strategy <ref> (Moriarty and Miikkulainen 1993) </ref>. A simple forward-checking algorithm was also implemented to prune the search space early. For each option station, the total number of cars requiring that option was counted.
Reference: <author> Moriarty, D. E., and Miikkulainen, R. </author> <year> (1994a). </year> <title> Evolving neural networks to focus minimax search. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence (AAAI-94). </booktitle> <address> Seattle, WA. </address>
Reference: <author> Moriarty, D. E., and Miikkulainen, R. </author> <year> (1994b). </year> <title> Neural network reinforcement learning through symbiotic evolution. </title> <type> Technical Report AI94-224, </type> <institution> Deptartment of Computer Sciences, The University of Texas at Austin. </institution> <note> 10 Parrello, </note> <author> B. D., Kabat, W. C., and Wos, L. </author> <year> (1986). </year> <title> Job-shop scheduling using automated reasoning: A case study of the car-sequencing problem. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 2 </volume> <pages> 1-42. </pages>
Reference: <author> Purdom, P. </author> <year> (1983). </year> <title> Search rearrangement backtracking and polynomial average time. </title> <journal> Artificial Intelligence, </journal> <volume> 21 </volume> <pages> 117-133. </pages>
Reference: <author> Rumelhart, D. E., Hinton, G. E., and Williams, R. J. </author> <year> (1986). </year> <title> Learning internal representations by error propagation. </title> <editor> In Rumelhart, D. E., and McClelland, J. L., editors, </editor> <booktitle> Parallel Distributed Processing: Explorations in the Microstructure of Cognition, Volume 1: Foundations, </booktitle> <pages> 318-362. </pages> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher>
Reference-contexts: Previously, evolutionary neural networks have been shown to be very good at sequential decision tasks such as selecting game moves and focusing minimax search (Moriarty and Miikkulainen 1993, 1994a). The usual neural network learning algorithms such as backpropagation <ref> (Rumelhart et al. 1986) </ref> are impractical in such tasks since they require that the correct decision is known at each step. Such information is very difficult to establish in sequential decision tasks, because it is not always obvious how individual decisions affect the final outcome.
Reference: <author> Sadeh, N. </author> <year> (1991). </year> <title> Look-ahead techniques for micro-opportunistic job shop scheduling. </title> <type> ph.d. diss. Technical Report CMU-CS-91-102, </type> <institution> Computer Science Department, Carnegie Mellon University. </institution>
Reference: <author> Stallman, R., and Sussman, G. J. </author> <year> (1977). </year> <title> Forward reasoning and dependency-directed backtracking. </title> <journal> Artificial Intelligence, </journal> <volume> 9(2) </volume> <pages> 135-196. </pages>
Reference: <author> Van Hentenryck, P., Simonis, H., and Dincbas, M. </author> <year> (1992). </year> <title> Constraint satisfaction using constraint logic programming. </title> <journal> Artificial Intelligence, 58:113. </journal>
Reference-contexts: Using SANE, a neural network was evolved to decide the ordering of classes of cars on an assembly line, which is an NP-Complete problem <ref> (Van Hentenryck et al. 1992) </ref>. After evolution, the number of backtracks incurred before a solution was found was compared with random value ordering and the maximization of future options heuristic. <p> Class 6 cannot be placed in slot 2 because of the capacity of option 1. The slot with most constrained domain is slot 2: it can only be instantiated with classes 2, 3, or 4. <ref> (Van Hentenryck et al. 1992) </ref> and automated reasoning to produce near-optimal solutions (Parrello et al. 1986). Table 1 shows a particular car sequencing problem taken from (Van Hentenryck et al. 1992). <p> The slot with most constrained domain is slot 2: it can only be instantiated with classes 2, 3, or 4. <ref> (Van Hentenryck et al. 1992) </ref> and automated reasoning to produce near-optimal solutions (Parrello et al. 1986). Table 1 shows a particular car sequencing problem taken from (Van Hentenryck et al. 1992). The number of classes, number of options, capacities of the option stations, and options required by each class were fixed. The number of each cars in each class and total number of cars to schedule were varied in different instances of the problem.
Reference: <author> Whitley, D., Starkweather, T., and Bogart, C. </author> <year> (1990). </year> <title> Genetic algorithms and neural networks: Optimizing connections and connectivity. </title> <journal> Parallel Computing, </journal> <volume> 14 </volume> <pages> 347-361. 11 </pages>
Reference-contexts: Instead of multiple parallel searches through the encoding space, the search becomes a random walk using the mutation operator. Several approaches have been developed to help keep diversity in the population. These include fitness sharing (Goldberg 1989), adaptive mutation <ref> (Whitley et al. 1990) </ref>, crowding (Dejong 1975), and local mating (Collins and Jefferson 1991; Davidor 1991). Each of these techniques relies on external genetic functions that prevent convergence of the genetic material. SANE achieves population diversity by making it an essential part of the task.
References-found: 23

