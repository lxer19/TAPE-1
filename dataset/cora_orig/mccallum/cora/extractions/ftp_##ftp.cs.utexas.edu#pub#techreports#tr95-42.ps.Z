URL: ftp://ftp.cs.utexas.edu/pub/techreports/tr95-42.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/ajohn/publications.html
Root-URL: 
Email: fajohn,browneg@cs.utexas.edu  
Title: A Constraint-based Parallel Programming Language  
Author: Ajita John, J. C. Browne 
Date: March 27, 1996  
Address: Austin, TX 78701  
Affiliation: Dept. of Computer Science University of Texas,  
Pubnum: TR95-42  
Abstract: This paper describes the first results from research on the compilation of constraint systems into task level procedural parallel programs. Algorithms are expressed as constraint systems. A dataflow graph is derived from the constraint system and a set of input variables. The dataflow graph, which exploits the parallelism in the constraints, is mapped to the target language CODE 2.0, which represents parallel computation structures as generalized dependence graphs. Finally, parallel C programs are generated. The granularity of the derived data flow graphs depends upon the complexity of the operations directly represented in the constraint system. To extract parallel programs of appropriate granularity, the following features have been included: (i) modularity, (ii) operations over structured types as primitives, (iii) definition of sequential C functions. A prototype of the compiler has been implemented. The domain of matrix computations has been targeted for applications. Some examples have been programmed. Initial results are encouraging. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anderson, T.E. et. al. </author> <title> The Performance Implications of Thread Management Alternatives for Shared Memory Multiprocessors. </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 38, no. 12, </volume> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: The range limits for the outermost loop have to be integers. Nested loops can have arithmetic expressions involving outer indices as index ranges. E.g. AND FOR (i 1 5) f A [i] == A [i-1] B [i+1] == A [i] g specifies the constraint construct A <ref> [1] </ref> == A [0] AND A [2] == A [1] AND : : : AND A [5] == A [4] AND Constraints formed from the use of arithmetic expressions and relational operators (Rule 1) are referred to as simple constraints. <p> Nested loops can have arithmetic expressions involving outer indices as index ranges. E.g. AND FOR (i 1 5) f A [i] == A [i-1] B [i+1] == A [i] g specifies the constraint construct A <ref> [1] </ref> == A [0] AND A [2] == A [1] AND : : : AND A [5] == A [4] AND Constraints formed from the use of arithmetic expressions and relational operators (Rule 1) are referred to as simple constraints. <p> An example of a construct that will not be compiled successfully is AND FOR i 1 5 f with A unknown and B known. This is because in the first iteration both the terms A <ref> [1] </ref> and A [i] are unknown whereas subsequent iterations have only A [i] as an unknown. To extract parallelism from constraints classified as computation, the patterns of access within a constraint are studied. Throughout this discussion the case of array accesses will be detailed. <p> The dataflow graphs generated from the constraint 16 modules are stored as separate AST's in CODE2.0. These can be invoked by the corresponding call nodes in the program. CODE2.0's translator for the Sequent produces parallel C programs that use parallel programming primitives from the FastThreads library <ref> [1] </ref>. 6 Programming Examples and Results A prototype of the compiler has been implemented using C++. A small number of examples have also been programmed and executed on the Sequent Symmetry machine and the PVM system.
Reference: [2] <author> Doug Baldwin. </author> <title> Consul: A Parallel Constraint Language. </title> <booktitle> IEEE Software 1989. </booktitle>
Reference-contexts: Nested loops can have arithmetic expressions involving outer indices as index ranges. E.g. AND FOR (i 1 5) f A [i] == A [i-1] B [i+1] == A [i] g specifies the constraint construct A [1] == A [0] AND A <ref> [2] </ref> == A [1] AND : : : AND A [5] == A [4] AND Constraints formed from the use of arithmetic expressions and relational operators (Rule 1) are referred to as simple constraints. <p> BP [0] == B AND CP [0] == C AND AND for (j 1 2) CP [j] == CP [j-1] * CP [j-1] dP [i*pow (2,j)][j] == CP [j-1] * ( dP [i*pow (2,j) + pow (2,j-1)][j-1] + 20 BP <ref> [2] </ref> * x [4] == dP [4][2] AND AND for (i 0 pow (2,3-j)-1) dP [(i+1)*pow (2,j)-pow (2,j-1)][j-1] - CP [j-1] * ( x [(i+1)*pow (2,j)] - x [i*pow (2,j)] ) 7 Related Work There has been considerable work in constraint programming in the past decade. <p> Three major pieces of work that are related to the research are described in this section. Consul <ref> [2] </ref> is a parallel constraint language that was developed as a vehicle to experiment with implicitly parallel, constraint-based programming. The ThingLab and the Kaleidoscope projects [6, 5, 23] came from the University of Washington. Concurrent constraint programming (CCP) languages [26] established the foundations of concurrent computation with constraints. <p> The ThingLab and the Kaleidoscope projects [6, 5, 23] came from the University of Washington. Concurrent constraint programming (CCP) languages [26] established the foundations of concurrent computation with constraints. Consul: This work resembles our work in that the goal is to extract parallelism from constraints <ref> [2] </ref>. But the approach is different in that local propagation is used to find satisfying values for the system of constraints. This approach has little hope of extracting efficient programs 21 and offers offers speedups only in the range of logic languages.
Reference: [3] <author> B. Freeman-Benson and Alan Borning. </author> <title> The design and implementation of Kaleidoscope '90, a constraint imperative programming language. </title> <booktitle> Proceedings of the IEEE Computer Society International Conference on Computer Languages, </booktitle> <pages> pages 174-180, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Constraints were compiled to sequential procedural code. Constraint Imperative Paradigm (CIP) was born out of the integration of imperative programming and constraint programming. It could be basically seen "either as adding constraints to imperative programs, or as adding control flow to constraint programs" [4]. Kaleidoscope <ref> [4, 3, 23] </ref> integrates object-oriented programming with constraints. Both these projects extracted procedural code from constraints but no parallelism was exploited. Concurrent Constraint Programming: There has been much recent work in the integration of logic programming with constraints leading to the development of Constraint Logic Programming Languages.
Reference: [4] <author> Freeman-Benson, </author> <title> B.N. Constraint Imperative Programming Technical Report 91-07-02 University of Washington, </title> <institution> Department of Computer Science and Engineering, </institution> <month> August, </month> <year> 1991. </year>
Reference-contexts: E.g. AND FOR (i 1 5) f A [i] == A [i-1] B [i+1] == A [i] g specifies the constraint construct A [1] == A [0] AND A [2] == A [1] AND : : : AND A [5] == A <ref> [4] </ref> AND Constraints formed from the use of arithmetic expressions and relational operators (Rule 1) are referred to as simple constraints. <p> BP [0] == B AND CP [0] == C AND AND for (j 1 2) CP [j] == CP [j-1] * CP [j-1] dP [i*pow (2,j)][j] == CP [j-1] * ( dP [i*pow (2,j) + pow (2,j-1)][j-1] + 20 BP [2] * x <ref> [4] </ref> == dP [4][2] AND AND for (i 0 pow (2,3-j)-1) dP [(i+1)*pow (2,j)-pow (2,j-1)][j-1] - CP [j-1] * ( x [(i+1)*pow (2,j)] - x [i*pow (2,j)] ) 7 Related Work There has been considerable work in constraint programming in the past decade. <p> Constraints were compiled to sequential procedural code. Constraint Imperative Paradigm (CIP) was born out of the integration of imperative programming and constraint programming. It could be basically seen "either as adding constraints to imperative programs, or as adding control flow to constraint programs" <ref> [4] </ref>. Kaleidoscope [4, 3, 23] integrates object-oriented programming with constraints. Both these projects extracted procedural code from constraints but no parallelism was exploited. Concurrent Constraint Programming: There has been much recent work in the integration of logic programming with constraints leading to the development of Constraint Logic Programming Languages. <p> Constraints were compiled to sequential procedural code. Constraint Imperative Paradigm (CIP) was born out of the integration of imperative programming and constraint programming. It could be basically seen "either as adding constraints to imperative programs, or as adding control flow to constraint programs" [4]. Kaleidoscope <ref> [4, 3, 23] </ref> integrates object-oriented programming with constraints. Both these projects extracted procedural code from constraints but no parallelism was exploited. Concurrent Constraint Programming: There has been much recent work in the integration of logic programming with constraints leading to the development of Constraint Logic Programming Languages.
Reference: [5] <author> Bjorn N. Freeman-Benson. </author> <title> A Module Compiler for Thinglab II. </title> <booktitle> Proc. 1989 ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <address> New Orleans, </address> <month> October </month> <year> 1989. </year> <note> ACM. </note>
Reference-contexts: E.g. AND FOR (i 1 5) f A [i] == A [i-1] B [i+1] == A [i] g specifies the constraint construct A [1] == A [0] AND A [2] == A [1] AND : : : AND A <ref> [5] </ref> == A [4] AND Constraints formed from the use of arithmetic expressions and relational operators (Rule 1) are referred to as simple constraints. <p> Three major pieces of work that are related to the research are described in this section. Consul [2] is a parallel constraint language that was developed as a vehicle to experiment with implicitly parallel, constraint-based programming. The ThingLab and the Kaleidoscope projects <ref> [6, 5, 23] </ref> came from the University of Washington. Concurrent constraint programming (CCP) languages [26] established the foundations of concurrent computation with constraints. Consul: This work resembles our work in that the goal is to extract parallelism from constraints [2]. <p> But the approach is different in that local propagation is used to find satisfying values for the system of constraints. This approach has little hope of extracting efficient programs 21 and offers offers speedups only in the range of logic languages. Thinglab and Kaleidoscope: Thinglab <ref> [6, 5] </ref> was a constraint-oriented graphic simulation laboratory. Constraints were compiled to sequential procedural code. Constraint Imperative Paradigm (CIP) was born out of the integration of imperative programming and constraint programming.
Reference: [6] <author> Alan Borning. </author> <title> The Programming Language Aspects of ThingLab, a Constraint-Oriented Simulation Laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 3, No. 4, </volume> <month> October </month> <year> 1981, </year> <pages> pp 353-387. </pages>
Reference-contexts: Three major pieces of work that are related to the research are described in this section. Consul [2] is a parallel constraint language that was developed as a vehicle to experiment with implicitly parallel, constraint-based programming. The ThingLab and the Kaleidoscope projects <ref> [6, 5, 23] </ref> came from the University of Washington. Concurrent constraint programming (CCP) languages [26] established the foundations of concurrent computation with constraints. Consul: This work resembles our work in that the goal is to extract parallelism from constraints [2]. <p> But the approach is different in that local propagation is used to find satisfying values for the system of constraints. This approach has little hope of extracting efficient programs 21 and offers offers speedups only in the range of logic languages. Thinglab and Kaleidoscope: Thinglab <ref> [6, 5] </ref> was a constraint-oriented graphic simulation laboratory. Constraints were compiled to sequential procedural code. Constraint Imperative Paradigm (CIP) was born out of the integration of imperative programming and constraint programming.
Reference: [7] <author> B.L. Buzbee, G.H.Golub, and C.W. Nielson. </author> <title> On Direct Methods for Solving Poisson's Equations. </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> Vol 7, </volume> <pages> pp 627-655. </pages>
Reference-contexts: It is further assumed that the blocks B and C are symmetric and commute. Equations of this type are known to arise in discretizing a certain class of partial differential equations of the elliptic type, using the idea of separation of variables <ref> [7] </ref>. A version of the parallel algorithm specification taken from [20] is given below. The algorithm has a reduction phase in which the system is split into two subsystems one for odd-indexed (reduced system) and another for even-indexed terms (eliminated system).
Reference: [8] <author> K.M. Chandy and J. Misra. </author> <title> Parallel Program Design : A Foundation Addison-Wesley, </title> <address> Reading, </address> <year> 1989. </year>
Reference-contexts: There are however, both motivation for continuing research in this direction and reasons for some optimism concerning success. Constraint systems have attractive properties for compilation to parallel computation structures. A constraint system gives the minimum specification (See <ref> [8] </ref> for an explanation of the benefits which derive from postponing imposition of program structure.) for a computation, thereby offering the compiler freedom of choice for derivation of control structure. Constraint systems offer some unique advantages as a representation from which parallel programs are to be derived.
Reference: [9] <author> Jacques Cohen. </author> <title> Constraint Logic Programming. </title> <journal> Communications of the ACM, </journal> <volume> 33(7) </volume> <pages> 52-68, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Concurrent Constraint Programming: There has been much recent work in the integration of logic programming with constraints leading to the development of Constraint Logic Programming Languages. This has involved the merging of two domains the Herbrand universe for predicates and some other domain like reals for constraints. CLP (D) <ref> [17, 9] </ref> defines a general scheme for constraint logic programming. Different implementations of the scheme are described in languages like Prolog III, CLP (R), and CHIP [12, 18, 13, 16, 22] Vijay Saraswat described a family of concurrent constraint logic programming languages,the cc languages [26].
Reference: [10] <author> Collins, T.S. and Browne, </author> <title> J.C. MaTrix++; An Object-Oriented Approach to the Hierarchical Matrix Algebra In Proceedings of the Second Annual Object-Oriented Numerics Conference , Sun River, </title> <address> OR, </address> <month> April, </month> <year> 1994. </year>
Reference-contexts: The matrix subtypes currently included in our system are lower triangular, upper triangular and generalized matrices. We plan to extend to more specialized matrices including hierarchical matrices <ref> [10] </ref>. <p> There are several promising approaches: object-oriented formulations of data structures are one possibility. A simpler and more algorithmic basis for definition of constraints over partitions of matrices is to utilize a simple version of the hierarchical type theory for matrices recently published by Collins and Browne <ref> [10] </ref>. The hierarchical type model for matrices establishes a compilable semantics for computations over hierarchical matrices. The next steps in this research are: a) Design and implement a "block" structure in which destructive update to variables is allowed.
Reference: [11] <editor> Collins, T.S. and Browne J.C. </editor> <booktitle> MaTrix++; An Object-Oriented Environment for Parallel High-Perfomance Matrix Computations To appear in the Proceedings of the 1995 Hawaii International Conference on Systems and Software </booktitle>
Reference: [12] <author> A. Colmerauer. </author> <title> An introduction to Prolog III. </title> <booktitle> Presented at the Workshop on Languages and Constraints, </booktitle> <institution> Brandeis University, </institution> <month> Aprill </month> <year> 1988. </year>
Reference-contexts: This has involved the merging of two domains the Herbrand universe for predicates and some other domain like reals for constraints. CLP (D) [17, 9] defines a general scheme for constraint logic programming. Different implementations of the scheme are described in languages like Prolog III, CLP (R), and CHIP <ref> [12, 18, 13, 16, 22] </ref> Vijay Saraswat described a family of concurrent constraint logic programming languages,the cc languages [26]. The logic and constraint portions are explicitly separated with the constraint part acting as an active data store for the logic half.
Reference: [13] <author> M. Dincbas, P. van Hentenryck, H. Simonis, F. Berthier. </author> <title> The constraint logic programming language CHIP. </title> <booktitle> Proceedings of the FGCS Conference, </booktitle> <month> November </month> <year> 1988. </year> <month> 24 </month>
Reference-contexts: This has involved the merging of two domains the Herbrand universe for predicates and some other domain like reals for constraints. CLP (D) [17, 9] defines a general scheme for constraint logic programming. Different implementations of the scheme are described in languages like Prolog III, CLP (R), and CHIP <ref> [12, 18, 13, 16, 22] </ref> Vijay Saraswat described a family of concurrent constraint logic programming languages,the cc languages [26]. The logic and constraint portions are explicitly separated with the constraint part acting as an active data store for the logic half.
Reference: [14] <author> J.J. Dongarra and D.C. Sorenson. </author> <title> SCHEDULE: Tools for Developing and Analyzing Par--allel Fortran Programs. </title> <note> Argonne National Laboratory MCSD Technical Memorandum No. 86, </note> <month> Nov. </month> <year> 1986. </year>
Reference-contexts: It solves the Ax = b linear algebra problem for a known lower triangular matrix A and vector b. The parallel algorithm <ref> [14] </ref> is quite simple and involves dividing the matrix into blocks as shown in Figure 8 (a). Figure 8 (b) shows the form of the dataflow in the algorithm.
Reference: [15] <author> R. Eigenmann and W. Blume. </author> <title> An Effectiveness Study of Parallelizing Compiler Techniques. </title> <booktitle> Proc. Intl. Conf. Par. Proc., </booktitle> <year> 1991, </year> <pages> pp. II 17-25. </pages>
Reference: [16] <author> Pascal Van Hentenryck. </author> <title> Constraint Satisfaction for Logic Programming. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989. </year>
Reference-contexts: This has involved the merging of two domains the Herbrand universe for predicates and some other domain like reals for constraints. CLP (D) [17, 9] defines a general scheme for constraint logic programming. Different implementations of the scheme are described in languages like Prolog III, CLP (R), and CHIP <ref> [12, 18, 13, 16, 22] </ref> Vijay Saraswat described a family of concurrent constraint logic programming languages,the cc languages [26]. The logic and constraint portions are explicitly separated with the constraint part acting as an active data store for the logic half.
Reference: [17] <author> Joxan Jaffer and Jean-Louis Lassez. </author> <title> Constraint Logic Programming. </title> <booktitle> Proceedings of the SIGACT-SIGPLAN Symposium on Principles of Programming Languages, </booktitle> <pages> pages 111-119, </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1987. </year>
Reference-contexts: Concurrent Constraint Programming: There has been much recent work in the integration of logic programming with constraints leading to the development of Constraint Logic Programming Languages. This has involved the merging of two domains the Herbrand universe for predicates and some other domain like reals for constraints. CLP (D) <ref> [17, 9] </ref> defines a general scheme for constraint logic programming. Different implementations of the scheme are described in languages like Prolog III, CLP (R), and CHIP [12, 18, 13, 16, 22] Vijay Saraswat described a family of concurrent constraint logic programming languages,the cc languages [26].
Reference: [18] <author> Joxan Jaffar and Spiro Michaylov. </author> <title> Methodology and Implementation of a CLP system. </title> <booktitle> Proceedings of the 4th International Conference on Logic Programming, </booktitle> <pages> pages 196-218, </pages> <address> Melbourne, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: This has involved the merging of two domains the Herbrand universe for predicates and some other domain like reals for constraints. CLP (D) [17, 9] defines a general scheme for constraint logic programming. Different implementations of the scheme are described in languages like Prolog III, CLP (R), and CHIP <ref> [12, 18, 13, 16, 22] </ref> Vijay Saraswat described a family of concurrent constraint logic programming languages,the cc languages [26]. The logic and constraint portions are explicitly separated with the constraint part acting as an active data store for the logic half.
Reference: [19] <author> Ajita John, J. C. Browne. </author> <title> Compilation of a Constraint Program into Parallel C Programs. </title> <type> Technical Report TR95-1, </type> <institution> Department of Computer Sciences, Unversity of Texas at Austin, </institution> <year> 1995. </year>
Reference-contexts: The traversal returns "True" if all the constraints in the constraint module are resolved and every output parameter is computed at the end of at least one path in the resulting dataflow graph (other paths are discarded). For a more detail exposition of this phase refer to <ref> [19] </ref>. If the traversal returns "False" (a dataflow graph is not generated) the current search path is discarded. Each constraint module invocation is translated as a separate program module.
Reference: [20] <author> S. Lakshmivarahan and Sudarshan K. Dhall. </author> <title> Analysis and Design of Parallel Algorithms: Arithmetic and Matrix Problems. </title> <booktitle> McGraw-Hill Series in Supercomputing and Parallel Processing, </booktitle> <year> 1990. </year>
Reference-contexts: Equations of this type are known to arise in discretizing a certain class of partial differential equations of the elliptic type, using the idea of separation of variables [7]. A version of the parallel algorithm specification taken from <ref> [20] </ref> is given below. The algorithm has a reduction phase in which the system is split into two subsystems one for odd-indexed (reduced system) and another for even-indexed terms (eliminated system). The reduction process is repeatedly applied to the reduced system.
Reference: [21] <author> William Leler. </author> <title> Constraint Programming Languages. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: The textually expressed constraint system is transformed to an undirected graph representation as for example given by Leler <ref> [21] </ref>. 7 Phase 2. A depth-first search algorithm transforms the undirected graph to a directed graph. Phase 3. With a set of input variables the directed graph is traversed by a depth-first search to map the constraints to firing rules and computations for nodes of a generalized dataflow graph.
Reference: [22] <author> Pierre Lim and Peter J. Stuckey. </author> <title> A Constraint Logic Programming Shell. </title> <type> Technical report, </type> <institution> Department of Computer Science, Monash University, </institution> <year> 1989. </year>
Reference-contexts: This has involved the merging of two domains the Herbrand universe for predicates and some other domain like reals for constraints. CLP (D) [17, 9] defines a general scheme for constraint logic programming. Different implementations of the scheme are described in languages like Prolog III, CLP (R), and CHIP <ref> [12, 18, 13, 16, 22] </ref> Vijay Saraswat described a family of concurrent constraint logic programming languages,the cc languages [26]. The logic and constraint portions are explicitly separated with the constraint part acting as an active data store for the logic half.
Reference: [23] <author> Gus Lopez, Bjorn Freeman-Benson, Alan Borning. </author> <title> Kaleidoscope : A Constraint Imperative Programming Language. Constraint Programming, </title> <editor> B. Mayoh, E. Tougu, J. Penjam (Eds.), </editor> <booktitle> NATO Advanced Science Institute Series, Series F: Computer and System Sciences, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Three major pieces of work that are related to the research are described in this section. Consul [2] is a parallel constraint language that was developed as a vehicle to experiment with implicitly parallel, constraint-based programming. The ThingLab and the Kaleidoscope projects <ref> [6, 5, 23] </ref> came from the University of Washington. Concurrent constraint programming (CCP) languages [26] established the foundations of concurrent computation with constraints. Consul: This work resembles our work in that the goal is to extract parallelism from constraints [2]. <p> Constraints were compiled to sequential procedural code. Constraint Imperative Paradigm (CIP) was born out of the integration of imperative programming and constraint programming. It could be basically seen "either as adding constraints to imperative programs, or as adding control flow to constraint programs" [4]. Kaleidoscope <ref> [4, 3, 23] </ref> integrates object-oriented programming with constraints. Both these projects extracted procedural code from constraints but no parallelism was exploited. Concurrent Constraint Programming: There has been much recent work in the integration of logic programming with constraints leading to the development of Constraint Logic Programming Languages.
Reference: [24] <author> P. Newton and J.C. Browne. </author> <title> A Graphical Retargetable Parallel Programming Environment and its Efficient Implementation. </title> <type> Technical Report TR93-28, </type> <institution> Dept. of Computer Sciences, Univ. of Texas at Austin, </institution> <year> 1993. </year>
Reference-contexts: A dataflow graph is derived from a constraint specification of an algorithm and an input set of variables. The dataflow graph is mapped to the target language CODE 2.0 <ref> [24] </ref>, which expresses parallel structure over sequential units of computation declaratively as a generalized dependence graph. Finally parallel C programs for the Sequent shared memory machine and the distributed memory PVM system can be generated. Sequential C programs can also be generated.
Reference: [25] <author> P. Newton and J. C. Browne. </author> <title> The Code 2.0 Graphical Parallel Programming Environment. </title> <booktitle> Proceedings of the 1992 International Conference on Supercomputing (Washington, </booktitle> <address> DC, </address> <month> July </month> <year> 1992), </year> <pages> pp 167-177. </pages>
Reference-contexts: Phase 4. Use the execution environment specification to optimize the dataflow graph. This phase is yet to be completely implemented in the system. Phase 5. The data flow graph is mapped to the CODE 2.0 parallel programming environment <ref> [25] </ref> to produce parallel programs in C as executable for different parallel architectures. Phase 1: Generation of Constraint Graphs The textual source program is transformed into a source graph for the compiler. <p> Performance results are described in the next subsection. 6.1 Block Triangular Solver The example chosen is the solution of a triangular matrix which is a commonly used example for illustration of parallel computations <ref> [25] </ref>. It solves the Ax = b linear algebra problem for a known lower triangular matrix A and vector b. The parallel algorithm [14] is quite simple and involves dividing the matrix into blocks as shown in Figure 8 (a).
Reference: [26] <author> Vijay A. Saraswat. </author> <title> Concurrent Constraint Programming Languages. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon, Pittsburgh, 1989. School of Computer Science. </institution> <month> 25 </month>
Reference-contexts: Consul [2] is a parallel constraint language that was developed as a vehicle to experiment with implicitly parallel, constraint-based programming. The ThingLab and the Kaleidoscope projects [6, 5, 23] came from the University of Washington. Concurrent constraint programming (CCP) languages <ref> [26] </ref> established the foundations of concurrent computation with constraints. Consul: This work resembles our work in that the goal is to extract parallelism from constraints [2]. But the approach is different in that local propagation is used to find satisfying values for the system of constraints. <p> CLP (D) [17, 9] defines a general scheme for constraint logic programming. Different implementations of the scheme are described in languages like Prolog III, CLP (R), and CHIP [12, 18, 13, 16, 22] Vijay Saraswat described a family of concurrent constraint logic programming languages,the cc languages <ref> [26] </ref>. The logic and constraint portions are explicitly separated with the constraint part acting as an active data store for the logic half.
References-found: 26

