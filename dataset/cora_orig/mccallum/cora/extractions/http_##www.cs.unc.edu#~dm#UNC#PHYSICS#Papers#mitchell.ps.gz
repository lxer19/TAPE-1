URL: http://www.cs.unc.edu/~dm/UNC/PHYSICS/Papers/mitchell.ps.gz
Refering-URL: http://www.cs.unc.edu/~hirota/290/papers.html
Root-URL: http://www.cs.unc.edu
Email: jklosow@ams.sunysb.edu;  jsbm@ams.sunysb.edu;  
Title: Evaluation of Collision Detection Methods for Virtual Reality Fly-Throughs  
Author: Martin Held James T. Klosowski Joseph S.B. Mitchell 
Note: held@ams.sunysb.edu; Supported by NSF Grant DMS-9312098. On sabbatical leave from  Supported by NSF grants ECSE-8857642 and CCR-9204585, and by a grant from  Partially supported by NSF grants ECSE-8857642 and CCR-9204585, and by a grant from  
Address: New York, Stony Brook, NY 11794-3600  Austria.  
Affiliation: Department of Applied Mathematics and Statistics State University of  Universitat Salzburg, Salzburg,  Boeing Computer Services.  Boeing Computer Services.  
Abstract: We consider the problem of preprocessing a scene of polyhedral models in order to perform collision detection very efficiently for an object that moves amongst obstacles. This problem is of central importance in virtual reality applications, where it is necessary to check for collisions at real-time rates. We give an algorithm for collision detection that is based on the use of a mesh (tetrahedralization) of the free space that has (hopefully) low stabbing number. The algorithm has been implemented and tested, and we give experimental results comparing its performance against three other algorithms that we implemented, based on standard data structures. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, B. Aronov, and S. Suri. </author> <title> Line stabbing bounds in three dimensions. </title> <type> Manuscript, </type> <month> Dec., </month> <year> 1993. </year>
Reference-contexts: The (line) stabbing number of the mesh is the maximum number of cells met by any query ray before it encounters an obstacle. In <ref> [1] </ref>, it is shown that, in the worst case, the best possible triangulation of a set of n points in space has a line stabbing number of fi (n) (without Steiner points) or fi ( p n) (with Steiner points).
Reference: [2] <author> P. K. Agarwal and J. Matousek. </author> <title> Ray shooting and parametric search. </title> <booktitle> In Proc. 24th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 517-526, </pages> <year> 1992. </year>
Reference-contexts: It is possible to obtain O (log n) query time, with roughly O (n 4 ) space, and sublinear query time with O (n) space. (An excellent reference on the subject is [10]; see also <ref> [2, 3, 8, 11, 14, 23, 26, 30] </ref>.) From the practical point of view, however, the apparently most promising methods are based on the recent "pedestrian" approach to ray shooting: Build a subdivision (mesh) of low "stabbing number", so that query processing becomes simply a walk through the subdivision [7, 16,
Reference: [3] <author> P. K. Agarwal and M. Sharir. </author> <title> Ray shooting amidst convex polytopes in three dimensions. </title> <booktitle> In Proc. 4th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 260-270, </pages> <year> 1993. </year>
Reference-contexts: It is possible to obtain O (log n) query time, with roughly O (n 4 ) space, and sublinear query time with O (n) space. (An excellent reference on the subject is [10]; see also <ref> [2, 3, 8, 11, 14, 23, 26, 30] </ref>.) From the practical point of view, however, the apparently most promising methods are based on the recent "pedestrian" approach to ray shooting: Build a subdivision (mesh) of low "stabbing number", so that query processing becomes simply a walk through the subdivision [7, 16,
Reference: [4] <author> N. Beckmann, H-P. Kriegel, R. Schneider, and B. Seeger. </author> <title> The R fl -tree: An efficient and robust access method for points and rectangles. </title> <booktitle> In Proc. ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 322-331, </pages> <year> 1990. </year>
Reference-contexts: Relation with Previous Work The problem of intersection detection is of fundamental importance in computer graphics, solid modeling, and virtual reality. Thus, there have been many approaches to solving the problem, including the use of binary space partition (BSP) trees [24], "R-trees" and their variants (see <ref> [4] </ref>), and octrees [22, 25]. 1 One recent method for 3-dimensional intersection detection has been developed by Lin and Manocha [20] (see also [9]). <p> We ran experiments to optimize over the choice of this threshold, and we ended up using 5 in the runs reported here. 3.3 R-trees of Boxes An alternative tree-based representation of obstacles is based on the simple idea of "R-trees" and their variants <ref> [4] </ref>. The basic idea is to partition the set of obstacles associated with a node, rather than partitioning the bounding box (the "space") associated with a node, as is done in a BSP tree.
Reference: [5] <author> S. Cameron. </author> <title> Collision detection by four-dimensional intersection testing. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 6(3) </volume> <pages> 291-302, </pages> <year> 1990. </year>
Reference-contexts: As long as the spacing between placements is small (i.e., we maintain a high frame-rate), this approximation to computing a swept volume for F will be a very good one. (Exact methods of treating dynamic collision detection have been addressed by <ref> [5, 6] </ref>, by considering the four-dimensional time-space problem or by modeling the configuration space exactly.) (2) Nested hierarchies: In our current implementation, we use a two-phase approach to collision detection | first checking for obstacle intersection with the bounding box of F , and then, if necessary, checking for obstacle intersection
Reference: [6] <author> J. Canny. </author> <title> Collision detection for moving polyhedra. </title> <journal> IEEE Trans. Pattern Anal. Mach. Intell., </journal> <volume> PAMI-8(2):200-209, </volume> <year> 1986. </year>
Reference-contexts: As long as the spacing between placements is small (i.e., we maintain a high frame-rate), this approximation to computing a swept volume for F will be a very good one. (Exact methods of treating dynamic collision detection have been addressed by <ref> [5, 6] </ref>, by considering the four-dimensional time-space problem or by modeling the configuration space exactly.) (2) Nested hierarchies: In our current implementation, we use a two-phase approach to collision detection | first checking for obstacle intersection with the bounding box of F , and then, if necessary, checking for obstacle intersection
Reference: [7] <author> B. Chazelle, H. Edelsbrunner, M. Grigni, L. Guibas, J. Hershberger, M. Sharir, and J. Snoeyink. </author> <title> Ray shooting in polygons using geodesic triangulations. </title> <booktitle> In Proc. 18th Internat. Colloq. Automata Lang. Program., volume 510 of Lecture Notes in Computer Science, </booktitle> <pages> pages 661-673. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: also [2, 3, 8, 11, 14, 23, 26, 30].) From the practical point of view, however, the apparently most promising methods are based on the recent "pedestrian" approach to ray shooting: Build a subdivision (mesh) of low "stabbing number", so that query processing becomes simply a walk through the subdivision <ref> [7, 16, 21] </ref>. The complexity of a query is simply the number of cells (triangles) of the mesh that are met by the query ray before it hits an obstacle.
Reference: [8] <author> S. W. Cheng and R. Janardan. </author> <title> Algorithms for ray-shooting and intersection searching. </title> <journal> J. Algorithms, </journal> <volume> 13 </volume> <pages> 670-692, </pages> <year> 1992. </year>
Reference-contexts: It is possible to obtain O (log n) query time, with roughly O (n 4 ) space, and sublinear query time with O (n) space. (An excellent reference on the subject is [10]; see also <ref> [2, 3, 8, 11, 14, 23, 26, 30] </ref>.) From the practical point of view, however, the apparently most promising methods are based on the recent "pedestrian" approach to ray shooting: Build a subdivision (mesh) of low "stabbing number", so that query processing becomes simply a walk through the subdivision [7, 16,
Reference: [9] <author> J. D. Cohen, M. C. Lin, D. Manocha, and M. K. Ponamgi. </author> <title> Exact collision detection for interactive environments. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 391-392, </pages> <year> 1994. </year>
Reference-contexts: Thus, there have been many approaches to solving the problem, including the use of binary space partition (BSP) trees [24], "R-trees" and their variants (see [4]), and octrees [22, 25]. 1 One recent method for 3-dimensional intersection detection has been developed by Lin and Manocha [20] (see also <ref> [9] </ref>). This method is based on decomposing solids into a union of convex polyhedra, constructing the Voronoi diagram of the space surrounding each such convex piece (which is particularly trivial), and then tracking the closest pairs of points between all pairs of convex pieces.
Reference: [10] <author> M. de Berg. </author> <title> Efficient algorithms for ray shooting and hidden surface removal. </title> <type> Ph.D. dissertation, </type> <institution> Dept. Comput. Sci., Utrecht Univ., </institution> <address> Utrecht, Netherlands, </address> <year> 1992. </year>
Reference-contexts: It is possible to obtain O (log n) query time, with roughly O (n 4 ) space, and sublinear query time with O (n) space. (An excellent reference on the subject is <ref> [10] </ref>; see also [2, 3, 8, 11, 14, 23, 26, 30].) From the practical point of view, however, the apparently most promising methods are based on the recent "pedestrian" approach to ray shooting: Build a subdivision (mesh) of low "stabbing number", so that query processing becomes simply a walk through the
Reference: [11] <author> M. de Berg, D. Halperin, M. Overmars, J. Snoeyink, and M. van Kreveld. </author> <title> Efficient ray shooting and hidden surface removal. </title> <booktitle> In Proc. 7th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 21-30, </pages> <year> 1991. </year>
Reference-contexts: It is possible to obtain O (log n) query time, with roughly O (n 4 ) space, and sublinear query time with O (n) space. (An excellent reference on the subject is [10]; see also <ref> [2, 3, 8, 11, 14, 23, 26, 30] </ref>.) From the practical point of view, however, the apparently most promising methods are based on the recent "pedestrian" approach to ray shooting: Build a subdivision (mesh) of low "stabbing number", so that query processing becomes simply a walk through the subdivision [7, 16,
Reference: [12] <author> H. Edelsbrunner and E. P. Mucke. </author> <title> Simulation of simplicity: a technique to cope with degenerate cases in geometric algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 9 </volume> <pages> 66-104, </pages> <year> 1990. </year>
Reference-contexts: In order to achieve a robust generation of the Delaunay triangulation, Edelsbrunner and Mucke's concept of "simulation of simplicity", cf. <ref> [12] </ref>, is applied. This concept has been implemented by Mucke and used for a randomized-incremental computation of Delaunay triangulations. Our own code for meshing is largely based on Mucke's implementation. Apart from artificially introduced coplanarity, we also struggled with robustness problems stemming from "bad data".
Reference: [13] <author> A. Garcia-Alonso, N. Serrano, and J. Flaquer. </author> <title> Solving the collision detection problem. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 14 </volume> <pages> 36-43, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: This method is highly effective as long as there are not too many convex pieces involved; it has the advantage of not relying on any of the objects remaining stationary. Other work includes <ref> [13] </ref> and the thesis work of Hubbard [17, 18], who uses approximations of objects (covering by disks) to speed up collision detection. Very recent papers include [19], [27], [31], and [32].
Reference: [14] <author> M. T. Goodrich and R. Tamassia. </author> <title> Dynamic ray shooting and shortest paths via balanced geodesic triangulations. </title> <booktitle> In Proc. 9th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 318-327, </pages> <year> 1993. </year>
Reference-contexts: It is possible to obtain O (log n) query time, with roughly O (n 4 ) space, and sublinear query time with O (n) space. (An excellent reference on the subject is [10]; see also <ref> [2, 3, 8, 11, 14, 23, 26, 30] </ref>.) From the practical point of view, however, the apparently most promising methods are based on the recent "pedestrian" approach to ray shooting: Build a subdivision (mesh) of low "stabbing number", so that query processing becomes simply a walk through the subdivision [7, 16,
Reference: [15] <author> M. </author> <title> Held. Reliable C code for computing triangle-triangle intersections and triangle-segment intersections in 2D and 3D. </title> <type> Technical report, </type> <institution> Applied Math, SUNY Stony Brook, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Implementation Issues The basic building blocks of this algorithm are primitives for checking whether two triangles (for the collision check) or a triangle and a line segment (for ray-shooting) intersect in 3D. These primitives were carefully implemented and tested, cf. <ref> [15] </ref>. They rely on floating point operations, where comparisons with respect to zero are carried out by means of conventional *-based thresholds. Extensive tests gave us confidence that these primitives are reliable and reasonably efficient. Note that small (numerical) errors usually do not matter when checking for collisions.
Reference: [16] <author> J. Hershberger and S. Suri. </author> <title> A pedestrian approach to ray shooting: Shoot a ray, take a walk. </title> <booktitle> In Proc. 4th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 54-63, </pages> <year> 1993. </year>
Reference-contexts: also [2, 3, 8, 11, 14, 23, 26, 30].) From the practical point of view, however, the apparently most promising methods are based on the recent "pedestrian" approach to ray shooting: Build a subdivision (mesh) of low "stabbing number", so that query processing becomes simply a walk through the subdivision <ref> [7, 16, 21] </ref>. The complexity of a query is simply the number of cells (triangles) of the mesh that are met by the query ray before it hits an obstacle.
Reference: [17] <author> P.M. Hubbard. </author> <title> Interactive collision detection. </title> <booktitle> In Proc. IEEE Symposium on Research Frontiers in Virtual Reality, </booktitle> <pages> pages 24-31, </pages> <year> 1993. </year>
Reference-contexts: This method is highly effective as long as there are not too many convex pieces involved; it has the advantage of not relying on any of the objects remaining stationary. Other work includes [13] and the thesis work of Hubbard <ref> [17, 18] </ref>, who uses approximations of objects (covering by disks) to speed up collision detection. Very recent papers include [19], [27], [31], and [32].
Reference: [18] <author> P.M. Hubbard. </author> <title> Space-time bounds for collision detection. </title> <type> Technical Report CS-93-04, </type> <institution> Dept. of Computer Science, Brown University, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: This method is highly effective as long as there are not too many convex pieces involved; it has the advantage of not relying on any of the objects remaining stationary. Other work includes [13] and the thesis work of Hubbard <ref> [17, 18] </ref>, who uses approximations of objects (covering by disks) to speed up collision detection. Very recent papers include [19], [27], [31], and [32].
Reference: [19] <author> P.M. Hubbard. </author> <title> Real-time Collision Detection and Time-critical Computing. </title> <booktitle> In Proc. 1 st Workshop on Simulation and Interaction in Virtual Environments, </booktitle> <address> U. of Iowa, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Other work includes [13] and the thesis work of Hubbard [17, 18], who uses approximations of objects (covering by disks) to speed up collision detection. Very recent papers include <ref> [19] </ref>, [27], [31], and [32].
Reference: [20] <author> M. Lin and D. Manocha. </author> <title> Efficient contact determination between geometric models. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <note> To appear. </note>
Reference-contexts: Thus, there have been many approaches to solving the problem, including the use of binary space partition (BSP) trees [24], "R-trees" and their variants (see [4]), and octrees [22, 25]. 1 One recent method for 3-dimensional intersection detection has been developed by Lin and Manocha <ref> [20] </ref> (see also [9]). This method is based on decomposing solids into a union of convex polyhedra, constructing the Voronoi diagram of the space surrounding each such convex piece (which is particularly trivial), and then tracking the closest pairs of points between all pairs of convex pieces.
Reference: [21] <author> J. S. B. Mitchell, D. M. Mount, and S. Suri. </author> <title> Query-sensitive ray shooting. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 359-368, </pages> <year> 1994. </year>
Reference-contexts: also [2, 3, 8, 11, 14, 23, 26, 30].) From the practical point of view, however, the apparently most promising methods are based on the recent "pedestrian" approach to ray shooting: Build a subdivision (mesh) of low "stabbing number", so that query processing becomes simply a walk through the subdivision <ref> [7, 16, 21] </ref>. The complexity of a query is simply the number of cells (triangles) of the mesh that are met by the query ray before it hits an obstacle. <p> We are currently implementing a new method, based on the query-sensitive approach of <ref> [21] </ref>, and hope to report the results of these experiments soon. (3) Hybrid methods that can be engineered to take advantage of the situations when one method is superior to another. 11 Acknowledgement Jai Chakrapani is responsible for implementing the original version of the mesh-based algorithm described herein.
Reference: [22] <author> M. Moore and J. Willhelms. </author> <title> Collision detection and response for computer animation. </title> <journal> Comput. Graph., </journal> <volume> 22(4) </volume> <pages> 289-298, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Relation with Previous Work The problem of intersection detection is of fundamental importance in computer graphics, solid modeling, and virtual reality. Thus, there have been many approaches to solving the problem, including the use of binary space partition (BSP) trees [24], "R-trees" and their variants (see [4]), and octrees <ref> [22, 25] </ref>. 1 One recent method for 3-dimensional intersection detection has been developed by Lin and Manocha [20] (see also [9]).
Reference: [23] <author> D. M. Mount. </author> <title> Intersection detection and separators for simple polygons. </title> <booktitle> In Proc. 8th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 303-311, </pages> <year> 1992. </year>
Reference-contexts: It is possible to obtain O (log n) query time, with roughly O (n 4 ) space, and sublinear query time with O (n) space. (An excellent reference on the subject is [10]; see also <ref> [2, 3, 8, 11, 14, 23, 26, 30] </ref>.) From the practical point of view, however, the apparently most promising methods are based on the recent "pedestrian" approach to ray shooting: Build a subdivision (mesh) of low "stabbing number", so that query processing becomes simply a walk through the subdivision [7, 16, <p> We are currently adapting surface simplification algorithms to be able to conduct experiments of this sort. The goal is then to develop a three-dimensional version of the algorithm of Mount <ref> [23] </ref>, which is "query-sensitive" to, say, the number of facets required to separate the query object from the obstacles. (3) Multiple flying objects: A direct method of allowing multiple flying objects is to do an all-pairs check for collisions among them, in addition to checking each flying object for collision with
Reference: [24] <author> B. Naylor, J. A. Amatodes, and W. Thibault. </author> <title> Merging BSP trees yields polyhedral set operations. </title> <journal> Comput. Graph., </journal> <volume> 24(4) </volume> <pages> 115-124, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: Relation with Previous Work The problem of intersection detection is of fundamental importance in computer graphics, solid modeling, and virtual reality. Thus, there have been many approaches to solving the problem, including the use of binary space partition (BSP) trees <ref> [24] </ref>, "R-trees" and their variants (see [4]), and octrees [22, 25]. 1 One recent method for 3-dimensional intersection detection has been developed by Lin and Manocha [20] (see also [9]).
Reference: [25] <author> H. Noborio, S. Fukuda, and S. Arimoto. </author> <title> Fast interference check method using octree representation. </title> <booktitle> Advanced Robotics, </booktitle> <volume> 3(3) </volume> <pages> 193-212, </pages> <year> 1989. </year>
Reference-contexts: Relation with Previous Work The problem of intersection detection is of fundamental importance in computer graphics, solid modeling, and virtual reality. Thus, there have been many approaches to solving the problem, including the use of binary space partition (BSP) trees [24], "R-trees" and their variants (see [4]), and octrees <ref> [22, 25] </ref>. 1 One recent method for 3-dimensional intersection detection has been developed by Lin and Manocha [20] (see also [9]).
Reference: [26] <author> M. Pellegrini. </author> <title> Stabbing and ray shooting in 3-dimensional space. </title> <booktitle> In Proc. 6th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 177-186, </pages> <year> 1990. </year>
Reference-contexts: It is possible to obtain O (log n) query time, with roughly O (n 4 ) space, and sublinear query time with O (n) space. (An excellent reference on the subject is [10]; see also <ref> [2, 3, 8, 11, 14, 23, 26, 30] </ref>.) From the practical point of view, however, the apparently most promising methods are based on the recent "pedestrian" approach to ray shooting: Build a subdivision (mesh) of low "stabbing number", so that query processing becomes simply a walk through the subdivision [7, 16,
Reference: [27] <author> M. Ponamgi, J. Cohen, M. Lin, and D. Manocha. </author> <title> Incremental Collision Detection for Polygonal Models. </title> <booktitle> In Proc. 1 st Workshop on Simulation and Interaction in Virtual Environments, </booktitle> <address> U. of Iowa, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Other work includes [13] and the thesis work of Hubbard [17, 18], who uses approximations of objects (covering by disks) to speed up collision detection. Very recent papers include [19], <ref> [27] </ref>, [31], and [32].
Reference: [28] <author> N. S. Sapidis and R. Perucchio. </author> <title> Domain Delaunay tetrahedrization of solid models. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 1(3) </volume> <pages> 299-325, </pages> <year> 1991. </year>
Reference-contexts: This scheme is applied repeatedly until the mesh conforms. Suitable Steiner points are obtained by taking the points of intersections of the edges of the obstacle triangles with the facets of the tetrahedra, and vice versa. Our approach is essentially similar to the concepts outlined by Sapidis and Perucchio <ref> [29, 28] </ref>. The main difference is that they try to minimize the number of points added by cleverly selecting Steiner points which do not necessarily correspond to points of intersection, thus possibly getting rid of several intersections by adding only one Steiner point.
Reference: [29] <author> N. S. Sapidis and R. Perucchio. </author> <title> Delaunay triangulation of arbitrarily shaped planar domains. </title> <journal> Com-put. Aided Geom. Design, </journal> <volume> 8(6) </volume> <pages> 421-437, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: This scheme is applied repeatedly until the mesh conforms. Suitable Steiner points are obtained by taking the points of intersections of the edges of the obstacle triangles with the facets of the tetrahedra, and vice versa. Our approach is essentially similar to the concepts outlined by Sapidis and Perucchio <ref> [29, 28] </ref>. The main difference is that they try to minimize the number of points added by cleverly selecting Steiner points which do not necessarily correspond to points of intersection, thus possibly getting rid of several intersections by adding only one Steiner point.
Reference: [30] <author> O. Schwarzkopf. </author> <title> Ray shooting in convex polytopes. </title> <booktitle> In Proc. 8th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 286-295, </pages> <year> 1992. </year>
Reference-contexts: It is possible to obtain O (log n) query time, with roughly O (n 4 ) space, and sublinear query time with O (n) space. (An excellent reference on the subject is [10]; see also <ref> [2, 3, 8, 11, 14, 23, 26, 30] </ref>.) From the practical point of view, however, the apparently most promising methods are based on the recent "pedestrian" approach to ray shooting: Build a subdivision (mesh) of low "stabbing number", so that query processing becomes simply a walk through the subdivision [7, 16,
Reference: [31] <author> G. Vanecek and C. Gonzalez-Ochoa. </author> <title> Representing Complex Objects in Collision Detection. </title> <booktitle> In Proc. 1 st Workshop on Simulation and Interaction in Virtual Environments, </booktitle> <address> U. of Iowa, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: Other work includes [13] and the thesis work of Hubbard [17, 18], who uses approximations of objects (covering by disks) to speed up collision detection. Very recent papers include [19], [27], <ref> [31] </ref>, and [32].

References-found: 31

