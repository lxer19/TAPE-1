URL: http://choices.cs.uiuc.edu/liao/atmobjs.ps.Z
Refering-URL: http://choices.cs.uiuc.edu/Papers.html
Root-URL: http://www.cs.uiuc.edu
Email: fliao, dputzolu, royg@cs.uiuc.edu  
Title: Building a Secure, Location Transparent Object Invocation System  
Author: Willy S. Liao David M. Putzolu Roy H. Campbell 
Address: 1304 W. Springfield Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign Digital Computer Laboratory  
Abstract: This paper addresses efficient object invocation in distributed systems. Such systems include support for transparent object migration between computers connected by a network, delegation and revocation of access to objects in a system, and very high speed communication between objects, whether they are located in the same machine or across the network from each other. Asynchronous Transfer Mode (ATM) networks can be effectively utilized to implement many of the necessary features of secure, location transparent object invocation. By using the switch controller in an ATM network as a repository for location information, and by mapping virtual circuits to pairwise object interactions with explicitly declared rights of each object, we are able to provide a high performance system that is both secure and simple. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Artsy and Finkel. </author> <title> Designing a process migration facility: the Charlotte experience. </title> <journal> IEEE Computer, </journal> <volume> 22(9) </volume> <pages> 47-56, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: 1 Introduction A common characteristic of distributed operating systems is the ability to utilize objects in other memory domains through some sort of invocation via a remote procedure call (RPC)[2]. Some operating systems have also implemented the ability to use process migration <ref> [1] </ref> to relocate dynamically executing objects so as to achieve better performance [9, 10, 4]. Efficient process migration has desirable properties, thus we seek mechanisms to migrate most objects [11].
Reference: [2] <author> Brain Bershad, T.E. Anderson, Ed Lazowska, and Henry Levy. </author> <title> Light Weight Remote Procedure Call. </title> <booktitle> In Proceedings of the Twelfth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 102-112, </pages> <month> December </month> <year> 1989. </year>
Reference: [3] <author> Roy H. Campbell and See-Mong Tan. </author> <title> Choices: An Object-Oriented Multimedia Operating System. </title> <booktitle> In Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <address> Orcas Island, Washington, </address> <month> May </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Operating systems whose underlying primitives closely match the available hardware are in general simpler to implement and higher in performance. We believe our use of ATM is a good tradeoff given current trends in high-performance networking toward wide-scale ATM deployment. We are currently implementing ATM objects in Choices <ref> [3] </ref>, an object-oriented microkernel-based operating system. We will focus initially on the performance of connection setup and object migration. We also plan to investigate the proper object environment for using ATM objects and their use as a low-level communication paradigm in distributed object-oriented operating systems.
Reference: [4] <author> Douglis and Ousterhout. </author> <title> Transparent process migration: Design alternatives and the Sprite implementation. </title> <journal> Software Practice and Experience, </journal> <volume> 21(8) </volume> <pages> 757-786, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: Some operating systems have also implemented the ability to use process migration [1] to relocate dynamically executing objects so as to achieve better performance <ref> [9, 10, 4] </ref>. Efficient process migration has desirable properties, thus we seek mechanisms to migrate most objects [11].
Reference: [5] <author> Butler Lampson. </author> <title> Protection. </title> <journal> ACM Operating Systems Review, </journal> <volume> 8(1) </volume> <pages> 18-24, </pages> <month> January </month> <year> 1974. </year>
Reference-contexts: Our system requires that a client prove its identity and rights to access an object in order to be given a connection to that object. This access control model of security was proposed in <ref> [5] </ref> and is still in use in modern distributed operating systems such as Taos [6]. Assuming all network connections are made over an ATM network with a switch that is trusted provides significant security benefits over using a traditional broadcast based network such as Ethernet.
Reference: [6] <author> Butler W. Lampson, Mart in Abadi, Michael Burrows, and Edward Wobber. </author> <title> Authentication in Distributed Systems: Theory and Practice. </title> <booktitle> In Proceedings of the ACM Symposium on Operating System Principles, </booktitle> <pages> pages 165-182, </pages> <year> 1991. </year>
Reference-contexts: This allows malicious hosts on the network to acquire and use credentials if they are passed over the network in un-encrypted form, or to impersonate identities of trusted principals. In order to solve this problem, operating systems such as Taos <ref> [6] </ref> provide secure channels which either use software or hardware encryption. Software encryption results in high processor overhead and poor performance, while hardware encryption necessitates expensive custom hardware solutions. <p> Our system requires that a client prove its identity and rights to access an object in order to be given a connection to that object. This access control model of security was proposed in [5] and is still in use in modern distributed operating systems such as Taos <ref> [6] </ref>. Assuming all network connections are made over an ATM network with a switch that is trusted provides significant security benefits over using a traditional broadcast based network such as Ethernet.
Reference: [7] <author> Marc Shapiro. </author> <title> Structure and encapsulation in distributed systems: The proxy principle. </title> <booktitle> In 6th International Conference on Distributed Computer Systems, </booktitle> <month> May </month> <year> 1986. </year>
Reference-contexts: The implementation of this handle is optimized so that local objects can be accessed rapidly. For example, the handle can be represented as a C++ object with a virtual method lookup table, using proxies <ref> [7] </ref> for cross-domain invocations. Users in the same protection domain as the object suffer no speed penalty. Users in different domains on the same machine or on different machines invoke methods that trap into the kernel and use lightweight Remote Procedure Call (RPC) or ATM VCs to communicate.
Reference: [8] <author> Andrew S. Tanenbaum, Robbert van Renesse, Hans van Staveren, Gregory J. Sharp, Sape J. Mullender, Jack Jansen, and Guido van Rossum. </author> <title> Experiences with the Amoeba distributed o per-ating system. </title> <journal> Communications of the ACM, </journal> <volume> 33(12), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: Amoeba <ref> [8] </ref> addresses these issues by associating ports with connections to objects, and by mapping ports to a location independent internetwork protocol, Fast Local Internet Protocol (FLIP).
Reference: [9] <author> Theimer, Lantz, and Cheriton. </author> <title> Preemptable remote execution facilities for the V-system. </title> <booktitle> In 10th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 2-12, </pages> <year> 1985. </year>
Reference-contexts: Some operating systems have also implemented the ability to use process migration [1] to relocate dynamically executing objects so as to achieve better performance <ref> [9, 10, 4] </ref>. Efficient process migration has desirable properties, thus we seek mechanisms to migrate most objects [11].
Reference: [10] <author> Zayas. </author> <title> Attacking the process migration bottleneck. </title> <booktitle> In Eleventh ACM Symposium on Operating System Principles, </booktitle> <pages> pages 13-22, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Some operating systems have also implemented the ability to use process migration [1] to relocate dynamically executing objects so as to achieve better performance <ref> [9, 10, 4] </ref>. Efficient process migration has desirable properties, thus we seek mechanisms to migrate most objects [11].
Reference: [11] <author> Zhou, Zheng, Wang, and Delisle. </author> <title> Utopia: a load sharing facility for large, heterogeneous distributed computer systems. </title> <journal> Software - Practice and Experience, </journal> <volume> 23(12) </volume> <pages> 1305-1336, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Some operating systems have also implemented the ability to use process migration [1] to relocate dynamically executing objects so as to achieve better performance [9, 10, 4]. Efficient process migration has desirable properties, thus we seek mechanisms to migrate most objects <ref> [11] </ref>. In order to support migration of objects and make it as transparent as possible, a distributed operating system must provide a naming scheme for objects that is location independent, so that an object that migrates between machines is still accessible by client objects which had previous connections to it.
References-found: 11

