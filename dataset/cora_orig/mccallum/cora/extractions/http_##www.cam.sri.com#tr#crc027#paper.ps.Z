URL: http://www.cam.sri.com/tr/crc027/paper.ps.Z
Refering-URL: http://www.cam.sri.com/tr/ABSTRACTS.html
Root-URL: 
Title: Incremental Design and Formal Verification of Microcoded Microprocessors  
Author: John M. J. Herbert 
Keyword: Keyword Codes: F.4.1; B.1.4; I.2.3 Keywords: Mathematical Logic; Control Structures and Microprogramming, Microprogram Design Aids; Deduction and Theorem Proving.  
Address: Millers Yard, Mill Lane, Cambridge, CB2 1RQ, England.  
Affiliation: SRI International,  
Abstract: A number of microprocessors have been specified and verified using machine supported formal techniques [2], [1], [7], [8], [10]. Some of these were pre-existing designs, others were designed as part of the specification and verification project. Even in the case of new designs, the formal techniques used offered very little support for incremental design and verification. Support for incremental design and verification means that certain additions to the implementation and/or specification can be verified without re-verification of the previous parts. Here, we present techniques for incremental design and verification which, as well as providing more appropriate models, also make the formal verification more efficient. The formal framework to support these ideas has been implemented in the HOL system and has been used in the specification, design and verification of a microcoded microprocessor. The techniques deal with three different aspects of the microprocessor: specification of machine instructions, modelling of microcode and modelling of bus architecture. For each of these, the techniques support incremental design and verification. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Birtwistle, G., Graham, B., Simpson, T., Slind, K., Williams, B. and Williams, S., </author> <title> `Verifying an SECD chip in HOL', Formal VLSI Correctness Verification, </title> <editor> L. Claesen (ed), </editor> <publisher> North Holland 1990. </publisher>
Reference: [2] <author> Cohn, A., </author> <title> `A Proof of Correctness of the Viper Microprocessor: the First Level', VLSI Specification, Verification and Synthesis, </title> <editor> Birtwistle, G., Subrahmanyam, P. A. (eds), </editor> <publisher> Kluwer 1988. </publisher>
Reference: [3] <author> Finn, S., Fourman, M. P., Francis, M., Harris, R., </author> <title> `Formal System Design | In teractive Synthesis based on Computer-Assisted Formal Reasoning', Formal VLSI Specification and Synthesis, </title> <editor> Claesen, L. J. M. (ed.), </editor> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: There have not been many attempts to support this process when using formal techniques. Two approaches which tackle the problem of design development are those based on LAMBDA and VERITAS, described in <ref> [3] </ref> and [6], respectively. These aim to provide an infra-structure for breaking a design into sub-designs, and dealing formally with the partial design and the outstanding sub-problems. <p> have presented them out of sequence to show that the order does not matter.) The index corresponds to the instruction address, the entry is a tuple of control values ( T and F correspond to high and low, respectively), and two addresses which are used when computing the next instruction. <ref> [4, ((F,F,T,F,T,F,F,F,F,F,F,F,F,T,F,F,F),F,F,F,F,F,F,F,F),0,0; 3, ((F,F,F,F,F,F,F,F,F,F,F,F,F,T,T,F,F),F,F,F,T,T,F,F,F),5,0] </ref> 3.2 Auxiliary definitions Some auxiliary functions used in the definition of microcode behaviour: UNIQUE (index,pr_list) = (9 j pr. pr MEM pr_list ^ (FST pr = index)) ALL_UNIQUE (pr_list) = (8 pr. pr MEM pr_list =) UNIQUE (FST pr, p_list)) FIND_ENTRY (index,pr_list) = SND ((" pr. pr
Reference: [4] <author> Gordon, M.J.C., </author> <title> `Verification of Hard Real Time', </title> <booktitle> BCS FACS-Logica Cambridge Fourth Refinement Workshop, </booktitle> <address> Cambridge, </address> <month> January, </month> <year> 1991. </year>
Reference-contexts: model means that when transitions are added, or extra partial specifications are added for an existing transition, then just the additional behaviour needs to be verified. 2.7 Microcoded machine example We have designed and verified a simple microcoded processor which implements the instruction set for real-time control described by Gordon <ref> [4] </ref>. <p> have presented them out of sequence to show that the order does not matter.) The index corresponds to the instruction address, the entry is a tuple of control values ( T and F correspond to high and low, respectively), and two addresses which are used when computing the next instruction. <ref> [4, ((F,F,T,F,T,F,F,F,F,F,F,F,F,T,F,F,F),F,F,F,F,F,F,F,F),0,0; 3, ((F,F,F,F,F,F,F,F,F,F,F,F,F,T,T,F,F),F,F,F,T,T,F,F,F),5,0] </ref> 3.2 Auxiliary definitions Some auxiliary functions used in the definition of microcode behaviour: UNIQUE (index,pr_list) = (9 j pr. pr MEM pr_list ^ (FST pr = index)) ALL_UNIQUE (pr_list) = (8 pr. pr MEM pr_list =) UNIQUE (FST pr, p_list)) FIND_ENTRY (index,pr_list) = SND ((" pr. pr
Reference: [5] <author> Gordon, M.J.C., </author> <title> `HOL A Machine Oriented Formulation of Higher Order Logic', </title> <type> Technical Report No. 68, </type> <institution> Computer Laboratory, University of Cambridge, Cam-bridge, U.K., </institution> <year> 1985. </year>
Reference-contexts: This means that instead of re-verifying the behaviour of the original implementation one just has to verify that the extension to the implementation does not interfere with the pre-existing part. The models have been embedded in the HOL system, <ref> [5] </ref>, and some familiarity with the notation of the higher-order logic of the HOL system is assumed. 2 Machine Specification Framework Our machine specification framework is based directly on the generic interpreter work of Windley [11].
Reference: [6] <author> Hanna, F.K., Longley, M., Daeche, N., </author> <title> `Formal Synthesis of Digital Systems' Computer-Assisted Formal Reasoning', Formal VLSI Specification and Synthesis, </title> <editor> Claesen, L. J. M. (ed.), </editor> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: There have not been many attempts to support this process when using formal techniques. Two approaches which tackle the problem of design development are those based on LAMBDA and VERITAS, described in [3] and <ref> [6] </ref>, respectively. These aim to provide an infra-structure for breaking a design into sub-designs, and dealing formally with the partial design and the outstanding sub-problems.
Reference: [7] <author> Hunt, W., `FM8501: </author> <title> A Verified Microprocessor. </title> <type> PhD thesis, Technical Report 47, </type> <institution> The University of Texas at Austin, </institution> <year> 1985. </year>
Reference: [8] <author> Joyce, J.J., </author> <title> `Multi-level Verification of Microprocessor Based Systems', </title> <type> Ph D Thesis, </type> <year> 1989, </year> <type> Technical Report 195, </type> <institution> University of Cambridge Computer Laboratory, U.K., [9] `Demonstration of the Possibility of Totally Verified Systems' IED Research Project Proposal. INMOS Ltd, Oxford University, SRI International, University of Cam-bridge, </institution> <year> 1989. </year>
Reference-contexts: The second and third support the incremental implementation and verification of the control and data path, respectively, of the microcoded implementation. Our specification of machine instructions follows the interpreter approach of Joyce <ref> [8] </ref> and Windley [11], but changes the model to a non-functional one with the incremental qualities that we require. The microcode and bus driver models each provide a theorem of incremental correctness. <p> In HOL the set of properties is represented as a list. In the following HOL definition, the variable rep, called the representation, is a tuple which bundles together a number of arguments, cf. <ref> [8] </ref>. The individual tuple entries are accessed by the constants substate,subenv,selected,in_sync and impl. For example, selected rep accesses the third entry in the tuple and this is the selection function which determines if a tag is selected.
Reference: [10] <author> Windley, P.J., </author> <title> `A Hierarchical Methodology for Verifying Microprogrammed Micro processors', </title> <type> Technical Report CSE-89-27, </type> <institution> University of California, Davis, </institution> <year> 1989. </year>
Reference: [11] <author> Windley, P.J., </author> <title> `The Formal Verification of Generic Interpreters', </title> <institution> Research Report CSE-90-22, University of California, Davis, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: The second and third support the incremental implementation and verification of the control and data path, respectively, of the microcoded implementation. Our specification of machine instructions follows the interpreter approach of Joyce [8] and Windley <ref> [11] </ref>, but changes the model to a non-functional one with the incremental qualities that we require. The microcode and bus driver models each provide a theorem of incremental correctness. <p> The models have been embedded in the HOL system, [5], and some familiarity with the notation of the higher-order logic of the HOL system is assumed. 2 Machine Specification Framework Our machine specification framework is based directly on the generic interpreter work of Windley <ref> [11] </ref>. However, we will not describe the abstract machine as an interpreter since we do not use a functional state machine model. <p> t. mp_index t = 0))) ) The result is subject to two conditions (as described for the general theorem): that the micro program index should be 0 at some time and that it should satisfy the liveness condition LIVE. 2.8 An incremental framework The basic advantage of Windley's interpreter framework, <ref> [11] </ref>, is that it provides a mechanism for breaking the problem of verification down into smaller problems, and provides the general correctness result which, in one step, allows one to combine the sub-parts, doing the appropriate abstractions.
References-found: 10

