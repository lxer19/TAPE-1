URL: http://www.cs.uni-bonn.de/~beetz/PUBLICATIONS/ras97.ps.gz
Refering-URL: http://www.cs.uni-bonn.de/~beetz/publications.html
Root-URL: http://cs.uni-bonn.de
Email: email:fbeetz,wolfram,fox,abcg@cs.uni-bonn.de  
Title: Integrating Active Localization into High-level Robot Control Systems  
Author: Michael Beetz Wolfram Burgard Dieter Fox Armin B. Cremers 
Note: accepted for publication in: Robotics and Autonomous Systems, '98  
Address: D-53117 Bonn, Germany  
Affiliation: Dept. of Computer Science III University of Bonn  
Abstract: High-level control systems are designed to enable mobile robots to successfully perform complex missions such as office delivery and surveillance tasks. For that purpose they have to control, coordinate, and monitor different kinds of subtasks like navigation, manipulation, and perception. An important aspect of the effectiveness of high-level control systems is the ability to cope with failures that occur during the execution of such subtasks. In this paper we focus on the particular subtask of estimating the position of the robot, and show how to achieve its robust integration into the high-level control system. The principle of this integration is to monitor the certainty of the position estimation and to autonomously relocalize the robot whenever the uncertainty grows too large. We present a localization approach which accurately and efficiently keeps track of the robot's position. Furthermore, it provides a measure for detecting localization failures and it is able to autonomously relocalize the robot in such situations. In addition to this, we introduce structured reactive plans, which can be interrupted by such active localization processes at any time and allow the robot to complete its mission afterwards. Our method has been implemented and shown to be robust in long-term experiments involving a typical office delivery scenario. 
Abstract-found: 1
Intro-found: 1
Reference: [BBC + 95] <author> J. Buhmann, W. Burgard, A.B. Cremers, D. Fox, T. Hofmann, F. Schneider, J. Strikos, and S. Thrun. </author> <title> The mobile robot Rhino. </title> <journal> AI Magazine, </journal> <volume> 16(2) </volume> <pages> 31-38, </pages> <month> Summer </month> <year> 1995. </year>
Reference-contexts: Then we describe the implementation of primary activities using RPL. The integration of the active localization method into our high-level control system has been tested in an office delivery application using RHINO <ref> [BBC + 95, TBB + 98] </ref> (see Figure 1), an RWI B21 mobile robot. 2 The Markov Localization System Localization is one of the fundamental problems in mobile robot navigation.
Reference: [BCF + 97] <author> W. Burgard, A. B. Cremers, D. Fox, D. Hahnel, G. Lakemeyer, D. Schulz, W. Steiner, and S. Thrun. </author> <title> The RHINO museum tour-guide project. </title> <note> http/www.cs.uni-bonn.de/~rhino/tourguide, 1997. </note>
Reference-contexts: One successful application example is the "Museum tour-guide project", where our mobile Robot RHINO was deployed over six days as a tour-guide in the "Deutsches Museum Bonn" <ref> [BCF + 97] </ref>. The key idea of Markov localization techniques is to maintain a density P over the set L of all possible positions of the robot in its environment. This density P is updated whenever the robot moves or new sensory input is obtained.
Reference: [Bee96] <author> M. Beetz. </author> <title> Anticipating and Forestalling Execution Failures in Structured Reactive Plans. </title> <type> Technical report, </type> <institution> yale/dcs/rr1097, Yale University, </institution> <year> 1996. </year>
Reference-contexts: While the modules listed above provide a means for reliable navigation in the form of continuous control processes that can be activated and deactivated, they do not provide an effective means for combining the processes into coherent goal-directed behavior. This is provided by another module: the structured reactive controller <ref> [Bee96] </ref>. This controller is called structured because it makes use of expressive control abstractions to structure complex activities. It is called reactive because it can respond immediately to asynchronous events whilst managing concurrent control processes. Structured reactive controllers are implemented in RPL [McD91].
Reference: [BEF96] <author> J. Borenstein, B. Everett, and L. Feng. </author> <title> Navigating Mobile Robots: Systems and Techniques. </title> <editor> A. K. Peters, </editor> <publisher> Ltd., </publisher> <address> Wellesley, MA, </address> <year> 1996. </year>
Reference-contexts: So far research on localization has mainly focused on methods for keeping track of the robot's position (see <ref> [BEF96] </ref> for a comprehensive overview). Most of these methods, however, are not able to globally localize the robot and do not provide a means for detecting situations in which the robot loses track of its position.
Reference: [BFG + 97] <author> P. Bonasso, J. Firby, E. Gat, D. Kortenkamp, D. Miller, and M. Slack. </author> <title> Experiences with an architecture for intelligent, reactive agents. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 9(1), </volume> <year> 1997. </year>
Reference-contexts: Structured reactive controllers are hybrid robot control architectures that integrate deliberation and action, discrete actions and continuous control processes. The most prominent class of architectures are hybrid layered approches that have three separate layers of control <ref> [BFG + 97] </ref>. Structured reactive controllers can avoid flaws in the behavior of the robot that hybrid layered approaches cannot.
Reference: [BFH97] <author> W. Burgard, D. Fox, and D. Hennig. </author> <title> Fast grid-based position tracking for mobile robots. </title> <booktitle> In Proc. of the 21th German Conference on Artificial Intelligence, </booktitle> <address> Germany. </address> <publisher> Springer Verlag, </publisher> <year> 1997. </year>
Reference-contexts: To deal with such huge state spaces in real-time, which is essential for fast position position estimation, we apply different optimization techniques. First, we use a fast sensor model allowing to compute the sensing probability P (s j l) by simple look-up operations <ref> [BFH97] </ref>. The second optimization approach is a technique for a selective update of the grid. The key idea of this approach is to exclude unlikely cells in P from being updated.
Reference: [BFHS96] <author> W. Burgard, D. Fox, D. Hennig, and T. Schmidt. </author> <title> Estimating the absolute position of a mobile robot using position probability grids. </title> <booktitle> In Proc. of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 896-901, </pages> <year> 1996. </year>
Reference-contexts: To meet the first two requirements, we apply Markov localization to estimate the robot's position. This technique has recently been proposed and implemented with considerable success by several groups <ref> [NPB95, SK95, KCK96, BFHS96, HK96] </ref>. Markov localization maintains a probability density for all possible locations in the environment, thus permitting the computation of the overall certainty in the position estimate. This representation is well suited to representing degree-of-belief and to the handling of ambiguous situations, necessary especially during global localization. <p> To overcome these deficiencies, recently different variants of Markov localization methods have been proposed for globally estimating the position of a robot <ref> [NPB95, SK95, KCK96, BFHS96, HK96] </ref>. Markov localization techniques combine several advantages in an elegant way. They are able to deal with imperfect information (sensor noise and approximate world models) and they are able to represent ambiguous situations, which occur frequently during global position estimation [BFHS96]. <p> Markov localization techniques combine several advantages in an elegant way. They are able to deal with imperfect information (sensor noise and approximate world models) and they are able to represent ambiguous situations, which occur frequently during global position estimation <ref> [BFHS96] </ref>. In addition to this, Markov localization allows for an active extension in a mathematically consistent way (see Section 2.2). Markov localization techniques have been shown to be extremely robust and reliable for determining and keeping track of the robot's position even in populated environments. <p> these features are basic preconditions to establish mobile robots with a high degree of autonomy. 2.1 Grid-based Markov Localization To achieve the necessary level of accuracy in position estimation, which is essential for example to perform manipulation tasks, we use a fine-grained grid-based representation of the position probability density P <ref> [BFHS96] </ref>. While the resolution of robot orientation is typically in the order of 1 ffi to 2 ffi , longitudinal resolution is often as small as 10 to 15cm. <p> In our experience there have hardly been any cases in which the robot has lost its position when using our passive localization method <ref> [BFHS96] </ref>. Thus, the expected average time costs for localization are extremely low. Furthermore, the time spent on localization is generally outweighed by the performance gain resulting from accurately knowing the robot's position. Despite these encouraging results there are several warrants for future research.
Reference: [BFT97] <author> W. Burgard, D. Fox, and S. Thrun. </author> <title> Active mobile robot localization. </title> <booktitle> In Proc. of the Fifteenth International Joint Conference on Artificial Intelligence, </booktitle> <year> 1997. </year>
Reference-contexts: Since most environments contain symmetries, this can only be achieved in most cases by actively guiding the robot to places where it can uniquely determine its position <ref> [BFT97] </ref>. Primary activities and policies: The control system must distinguish and concurrently execute primary activities (the actions taken to accomplish the robot's mission) and policies (in which those conditions necessary for the successful execution of the primary activities are both monitored and maintained). <p> Due to inherent symmetries in typical environments, different places often look the same to the robot's sensors. This generally results in several local maxima in the position distribution P . In <ref> [BFT97] </ref> we demonstrated, that actively guiding the robot to places, which help it to distinguish these local maxima, can extremely increase the efficiency of the localization process.
Reference: [BM94] <author> M. Beetz and D. McDermott. </author> <title> Improving robot plans during their execution. </title> <editor> In Kris Hammond, editor, </editor> <booktitle> Second International Conference on AI Planning Systems, </booktitle> <pages> pages 3-12, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: It is a collection of concurrent control routines that specify routine activities and can adapt themselves to non-standard situations by executing planned responses <ref> [BM94] </ref>. A compact description of the mode of operation of the structured reactive controller is as follows. The RPL interpreter executes the structured reactive plan, causing the behavior modules to be activated and deactivated. Threads of control become blocked when they have to wait for certain conditions to become true.
Reference: [BM96a] <author> M. Beetz and D. McDermott. </author> <title> Local planning of ongoing behavior. </title> <editor> In Brian Drabble, editor, </editor> <booktitle> AIPS-96, </booktitle> <pages> pages 3-12, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1996. </year>
Reference-contexts: To handle these situations, we use an RPL program that, given a destination such as "in front of Wolfram's shelf," computes a structured reactive navigation plan and executes it (see <ref> [BM96a] </ref> for details). 3.2 Interruptable Delivery Routines The synchronization between active localization and navigation is specified using the RPL construct WITH-POLICY P B, which means, "execute the primary activity B such that the execution satisfies the policy P." In our case, "head towards the location DEST until you are there;" is
Reference: [BM96b] <author> M. Beetz and D. McDermott. </author> <title> Local planning of ongoing behavior. </title> <editor> In Brian Drabble, editor, </editor> <booktitle> Third International Conference on AI Planning Systems, </booktitle> <pages> pages 3-12, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1996. </year> <month> 20 </month>
Reference-contexts: It borrows many of RAP's ideas and adds concepts for structuring complex reactive activities and synchronizing concurrent actions. ESL [Gat96] is a language with similar expressive power but unlike RPL does not provide tools for reasoning, revising robot control programs, or local runtime planning <ref> [BM96b] </ref>. RS [LA89], another robot control language that provides similar control abstractions and planning facilities, is tailored to highly repetitive tasks. Other languages such as Gapps [Kae88], Rex [Kae87] and the Behavior Language [Bro90] can be realized as macro languages using RPL's control structures.
Reference: [Bro90] <author> R. Brooks. </author> <title> The behavior language; user's guide. A.I. </title> <type> Memo 1227, </type> <institution> MIT AI Lab, </institution> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: RS [LA89], another robot control language that provides similar control abstractions and planning facilities, is tailored to highly repetitive tasks. Other languages such as Gapps [Kae88], Rex [Kae87] and the Behavior Language <ref> [Bro90] </ref> can be realized as macro languages using RPL's control structures. Structured reactive controllers are hybrid robot control architectures that integrate deliberation and action, discrete actions and continuous control processes. The most prominent class of architectures are hybrid layered approches that have three separate layers of control [BFG + 97].
Reference: [FBT97] <author> D. Fox, W. Burgard, and S. Thrun. </author> <title> The dynamic window approach to collision avoidance. </title> <journal> IEEE Robotics & Automation Magazine, </journal> <volume> 4(1) </volume> <pages> 23-33, </pages> <month> March </month> <year> 1997. </year>
Reference-contexts: The "collision avoidance" module <ref> [FBT97] </ref> causes the robot to move to the next intermediate target point while at the same time avoiding unforeseen obstacles on its path. Finally, the localization module provides the other modules with the most likely position of the robot and a measure of the uncertainty in this estimate. <p> This part of the plan is depicted through regions with different textures for the different travel modes "office," "hallway," and "doorway." Whenever the robot crosses the boundaries between regions the appropriate travel mode is set in our collision avoidance module <ref> [FBT97] </ref>. Fig. 12: Topological navigation plan for navigating from room A to B with regions indicating different travel modes One problem with these structured navigation plans is that they make assumptions about the location of the robot while it executes the navigation plan. <p> After this turn the robot was facing west while the position tracking assumed the robot to face south-south-west. Consequently the path planner generated target points which caused the robot to turn right and move straight. Shortly after that, RHINO's reactive collision 17 avoidance <ref> [FBT97] </ref> turned the robot to the left because of the northern wall of the corridor.
Reference: [Fed93] <author> C. Fedor. TCX. </author> <title> An interprocess communication system for building robotic architectures. Programmer's guide to version 10.xx. </title> <institution> Carnegie Mellon University, </institution> <address> Pittsurgh, PA 15213, </address> <month> 12 </month> <year> 1993. </year>
Reference-contexts: Fig. 10: Control architecture of the office delivery robot The control system comprises modules, which provide such capabilities as "collision avoidance," "localization," and "motion planning." These modules run distributedly over the computer network and communicate asynchronously via message passing established by the communication management module TCX <ref> [Fed93] </ref>. Upon receiving a target point, the "motion planning" module computes, for each location in the environment, a feasible and optimal path between the location and the target point [TBB + 98].
Reference: [Fir87] <author> J. Firby. </author> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Proc. of AAAI-87, </booktitle> <pages> pages 202-206, </pages> <address> Seattle, WA, </address> <year> 1987. </year>
Reference-contexts: the construct EVAP-PROTECT A B that secures the execution of the code piece B (in our case, to delete the remaining target points) in the case that A is deactivated in the midst of its execution. 3.3 Related Work on High-level Control RPL is a successor of the RAP system <ref> [Fir89, Fir87] </ref>. It borrows many of RAP's ideas and adds concepts for structuring complex reactive activities and synchronizing concurrent actions. ESL [Gat96] is a language with similar expressive power but unlike RPL does not provide tools for reasoning, revising robot control programs, or local runtime planning [BM96b].
Reference: [Fir89] <author> J. Firby. </author> <title> Adaptive Execution in Complex Dynamic Worlds. </title> <type> Technical report 672, </type> <institution> Yale University, Department of Computer Science, </institution> <month> January </month> <year> 1989. </year>
Reference-contexts: the construct EVAP-PROTECT A B that secures the execution of the code piece B (in our case, to delete the remaining target points) in the case that A is deactivated in the midst of its execution. 3.3 Related Work on High-level Control RPL is a successor of the RAP system <ref> [Fir89, Fir87] </ref>. It borrows many of RAP's ideas and adds concepts for structuring complex reactive activities and synchronizing concurrent actions. ESL [Gat96] is a language with similar expressive power but unlike RPL does not provide tools for reasoning, revising robot control programs, or local runtime planning [BM96b].
Reference: [Fir92] <author> J. Firby. </author> <title> Building symbolic primitives with continuous control routines. </title> <editor> In J. Hendler, editor, </editor> <booktitle> AIPS-92, </booktitle> <pages> pages 62-69, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1992. </year>
Reference-contexts: A failure of the navigation task is signalled if the robot detects that it is unable to reach its destination <ref> [Fir92] </ref>. Combined with the behaviors POSITION-TRACKING and ACTIVE-LOCALIZATION described in the previous section, this description of the module NAVIGATION completes the list of behavior modules used in the remainder of the paper.
Reference: [Fir94] <author> J. Firby. </author> <title> Task networks for controlling continuous processes. </title> <editor> In Kris Hammond, editor, </editor> <booktitle> AIPS-94, </booktitle> <pages> pages 49-54, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: The module detects the successful completion of a navigation task, as given by measuring a suitably small distance between the robot and its target destination, and sends a success signal (cf. <ref> [McD92, Fir94] </ref>). A failure of the navigation task is signalled if the robot detects that it is unable to reach its destination [Fir92].
Reference: [Gat96] <author> E. Gat. Esl: </author> <title> A language for supporting robust plan execution in embedded autonomous agents. </title> <booktitle> In AAAI Fall Symposium: Issues in Plan Execution, </booktitle> <address> Cam-bridge, MA, </address> <year> 1996. </year>
Reference-contexts: It borrows many of RAP's ideas and adds concepts for structuring complex reactive activities and synchronizing concurrent actions. ESL <ref> [Gat96] </ref> is a language with similar expressive power but unlike RPL does not provide tools for reasoning, revising robot control programs, or local runtime planning [BM96b]. RS [LA89], another robot control language that provides similar control abstractions and planning facilities, is tailored to highly repetitive tasks.
Reference: [GCJK97] <author> D. Guzzoni, A. Cheyer, L. Julia, and K. Konolige. </author> <title> Many robots make short work. </title> <journal> AI magazine, </journal> <volume> 18(1), </volume> <year> 1997. </year>
Reference-contexts: Whenever the robot is switched on or loses track of its position, it starts to actively (re-)localize itself before it begins or continues its mission. In the field of robot control systems, other approaches deal with the problem of selecting appropriate actions under position uncertainty include <ref> [SGH + , GCJK97, KCK96] </ref>. Simmons et al. [SGH + ] choose the optimal navigation plan with respect to the most likely position of the robot. <p> In contrast to this method, our approach takes into account the degree of uncertainty in the position estimation and considers dedicated actions for reducing uncertainty in position estimation. Guzzoni et al. <ref> [GCJK97] </ref> detect situations in which the position of the robot has been lost. Whereas their approach relies on the user to specify the robot's current position to recover from such situations, our method is able to autonomously relocalize the robot.
Reference: [GI89] <author> M. Georgeff and F. Ingrand. </author> <title> Decision making in an embedded reasing system. </title> <booktitle> In Proc. of the 11 th IJCAI, </booktitle> <pages> pages 972-978, </pages> <address> Detroit, MI, </address> <year> 1989. </year>
Reference-contexts: Another architecture that has been applied successfully to autonomous robot control is the BDI architecture [RG92] as for instance implemented in the Procedural Reasoning System (PRS) <ref> [GI89] </ref>. The main difference between structured reactive controllers and PRS is that PRS does not make a commitment to planning techniques or the interaction between plan 16 ning and execution. It leaves it to the programmer to implement them as meta-procedures when required.
Reference: [HK96] <editor> J. Hertzberg and F. Kirchner. </editor> <booktitle> Landmark-based autonomous navigation in sewerage pipes. In Proc. of the First Euromicro Workshop on Advanced Mobile Robots, </booktitle> <pages> pages 68-73, </pages> <year> 1996. </year>
Reference-contexts: To meet the first two requirements, we apply Markov localization to estimate the robot's position. This technique has recently been proposed and implemented with considerable success by several groups <ref> [NPB95, SK95, KCK96, BFHS96, HK96] </ref>. Markov localization maintains a probability density for all possible locations in the environment, thus permitting the computation of the overall certainty in the position estimate. This representation is well suited to representing degree-of-belief and to the handling of ambiguous situations, necessary especially during global localization. <p> To overcome these deficiencies, recently different variants of Markov localization methods have been proposed for globally estimating the position of a robot <ref> [NPB95, SK95, KCK96, BFHS96, HK96] </ref>. Markov localization techniques combine several advantages in an elegant way. They are able to deal with imperfect information (sensor noise and approximate world models) and they are able to represent ambiguous situations, which occur frequently during global position estimation [BFHS96]. <p> While the resolution of robot orientation is typically in the order of 1 ffi to 2 ffi , longitudinal resolution is often as small as 10 to 15cm. In contrast to other variants of Markov localization techniques <ref> [NPB95, SK95, KCK96, HK96] </ref> using topological discretizations and a resolution of 90 ffi in orientation, our grid-based approach provides position estimates with an accuracy of a few centimeters and degrees.
Reference: [Kae87] <author> L. Kaelbling. REX: </author> <title> A symbolic language for the design and parallel implementation of embedded systems. </title> <booktitle> In Proceedings of AIAA Conference on Computers in Aerospace, </booktitle> <address> Wakefield, MA, </address> <year> 1987. </year>
Reference-contexts: RS [LA89], another robot control language that provides similar control abstractions and planning facilities, is tailored to highly repetitive tasks. Other languages such as Gapps [Kae88], Rex <ref> [Kae87] </ref> and the Behavior Language [Bro90] can be realized as macro languages using RPL's control structures. Structured reactive controllers are hybrid robot control architectures that integrate deliberation and action, discrete actions and continuous control processes.
Reference: [Kae88] <author> L. Kaelbling. </author> <title> Goals as parallel program specifications. </title> <booktitle> In Proc. of AAAI-88, </booktitle> <pages> pages 60-65, </pages> <address> St. Paul, MN, </address> <year> 1988. </year>
Reference-contexts: RS [LA89], another robot control language that provides similar control abstractions and planning facilities, is tailored to highly repetitive tasks. Other languages such as Gapps <ref> [Kae88] </ref>, Rex [Kae87] and the Behavior Language [Bro90] can be realized as macro languages using RPL's control structures. Structured reactive controllers are hybrid robot control architectures that integrate deliberation and action, discrete actions and continuous control processes.
Reference: [KCK96] <author> L.P. Kaelbling, A.R. Cassandra, and J.A. Kurien. </author> <title> Acting under uncertainty: Discrete bayesian models for mobile-robot navigation. </title> <booktitle> In Proc. of the IEEE/RSJ International Conference on Intelligent Robots and Systems, </booktitle> <year> 1996. </year> <month> 21 </month>
Reference-contexts: To meet the first two requirements, we apply Markov localization to estimate the robot's position. This technique has recently been proposed and implemented with considerable success by several groups <ref> [NPB95, SK95, KCK96, BFHS96, HK96] </ref>. Markov localization maintains a probability density for all possible locations in the environment, thus permitting the computation of the overall certainty in the position estimate. This representation is well suited to representing degree-of-belief and to the handling of ambiguous situations, necessary especially during global localization. <p> Whenever the robot is switched on or loses track of its position, it starts to actively (re-)localize itself before it begins or continues its mission. In the field of robot control systems, other approaches deal with the problem of selecting appropriate actions under position uncertainty include <ref> [SGH + , GCJK97, KCK96] </ref>. Simmons et al. [SGH + ] choose the optimal navigation plan with respect to the most likely position of the robot. <p> Guzzoni et al. [GCJK97] detect situations in which the position of the robot has been lost. Whereas their approach relies on the user to specify the robot's current position to recover from such situations, our method is able to autonomously relocalize the robot. Kaelbling et al. <ref> [KCK96] </ref> propose a decision-theoretic approach that takes uncertainty and actions for relocalization into account. They do not distinguish between primary actions and localization actions and always choose the actions 3 with the highest utility with respect to the belief state of the robot. <p> To overcome these deficiencies, recently different variants of Markov localization methods have been proposed for globally estimating the position of a robot <ref> [NPB95, SK95, KCK96, BFHS96, HK96] </ref>. Markov localization techniques combine several advantages in an elegant way. They are able to deal with imperfect information (sensor noise and approximate world models) and they are able to represent ambiguous situations, which occur frequently during global position estimation [BFHS96]. <p> While the resolution of robot orientation is typically in the order of 1 ffi to 2 ffi , longitudinal resolution is often as small as 10 to 15cm. In contrast to other variants of Markov localization techniques <ref> [NPB95, SK95, KCK96, HK96] </ref> using topological discretizations and a resolution of 90 ffi in orientation, our grid-based approach provides position estimates with an accuracy of a few centimeters and degrees.
Reference: [KMRS97] <author> K. Konolige, K. Myers, E. Ruspini, and A. Saffiotti. </author> <title> The saphira architecture: A design for autonomy. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 9(2), </volume> <year> 1997. </year>
Reference-contexts: Many service robots employ high-level control systems, which control, coordinate, and monitor these subtasks during execution to ensure the robot's operational effectiveness <ref> [TBB + 98, SGH + , KMRS97] </ref>. An important aspect of this effectiveness is the ability of the high-level control system to cope with failures that occur during the execution of such subtasks.
Reference: [LA89] <author> D. Lyons and M. Arbib. </author> <title> A formal model of computation for sensory-based robotics. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> 5(3) </volume> <pages> 280-293, </pages> <year> 1989. </year>
Reference-contexts: It borrows many of RAP's ideas and adds concepts for structuring complex reactive activities and synchronizing concurrent actions. ESL [Gat96] is a language with similar expressive power but unlike RPL does not provide tools for reasoning, revising robot control programs, or local runtime planning [BM96b]. RS <ref> [LA89] </ref>, another robot control language that provides similar control abstractions and planning facilities, is tailored to highly repetitive tasks. Other languages such as Gapps [Kae88], Rex [Kae87] and the Behavior Language [Bro90] can be realized as macro languages using RPL's control structures.
Reference: [LDK95] <author> M.L. Littman, T.L. Dean, </author> <title> and L.P. Kaelbling. On the complexity of solving markov decision problems. </title> <booktitle> In Proc. of the Eleventh International Conference on Uncertainty in Artificial Intelligence, </booktitle> <year> 1995. </year>
Reference-contexts: The result is the expected occupancy of a point a relative to the robot. Costs and cost-optimal paths: Based on P occ , the expected path length and the cost-optimal policy can be obtained through value iteration, a popular version of dynamic programming (see e.g., <ref> [LDK95] </ref> for details). Value iteration assigns to each location a 7 a value v (a) that represents its distance to the robot.
Reference: [McD91] <author> D. McDermott. </author> <title> A reactive plan language. </title> <institution> Research Report YALEU/DCS/RR-864, Yale University, </institution> <year> 1991. </year>
Reference-contexts: This controller is called structured because it makes use of expressive control abstractions to structure complex activities. It is called reactive because it can respond immediately to asynchronous events whilst managing concurrent control processes. Structured reactive controllers are implemented in RPL <ref> [McD91] </ref>. RPL programs look very much like Lisp programs but make use of control abstractions typical of structured concurrent programming languages. Such abstractions include those for sequencing, concurrent execution, conditionals, loops, assignments of values to program variables, and subroutine calls.
Reference: [McD92] <author> D. McDermott. </author> <title> Transformational planning of reactive behavior. </title> <institution> Research Report YALEU/DCS/RR-941, Yale University, </institution> <year> 1992. </year>
Reference-contexts: The module detects the successful completion of a navigation task, as given by measuring a suitably small distance between the robot and its target destination, and sends a success signal (cf. <ref> [McD92, Fir94] </ref>). A failure of the navigation task is signalled if the robot detects that it is unable to reach its destination [Fir92].
Reference: [NPB95] <author> I. Nourbakhsh, R. Powers, and S. Birchfield. </author> <title> DERVISH an office-navigating robot. </title> <journal> AI Magazine, </journal> <volume> 16(2), </volume> <month> Summer </month> <year> 1995. </year>
Reference-contexts: To meet the first two requirements, we apply Markov localization to estimate the robot's position. This technique has recently been proposed and implemented with considerable success by several groups <ref> [NPB95, SK95, KCK96, BFHS96, HK96] </ref>. Markov localization maintains a probability density for all possible locations in the environment, thus permitting the computation of the overall certainty in the position estimate. This representation is well suited to representing degree-of-belief and to the handling of ambiguous situations, necessary especially during global localization. <p> To overcome these deficiencies, recently different variants of Markov localization methods have been proposed for globally estimating the position of a robot <ref> [NPB95, SK95, KCK96, BFHS96, HK96] </ref>. Markov localization techniques combine several advantages in an elegant way. They are able to deal with imperfect information (sensor noise and approximate world models) and they are able to represent ambiguous situations, which occur frequently during global position estimation [BFHS96]. <p> While the resolution of robot orientation is typically in the order of 1 ffi to 2 ffi , longitudinal resolution is often as small as 10 to 15cm. In contrast to other variants of Markov localization techniques <ref> [NPB95, SK95, KCK96, HK96] </ref> using topological discretizations and a resolution of 90 ffi in orientation, our grid-based approach provides position estimates with an accuracy of a few centimeters and degrees.
Reference: [RG92] <author> A. Rao and M. Georgeff. </author> <title> An abstract architecture for rational agents. </title> <editor> In B. Nebel, C. Rich, and W. Swartout, editors, </editor> <booktitle> Principles of Knowledge Representation and Reasoning: Proc. of the Third International Conference (KR'92), </booktitle> <pages> pages 439-449, </pages> <address> San Mateo, CA, 1992. </address> <publisher> Kaufmann. </publisher>
Reference-contexts: Another architecture that has been applied successfully to autonomous robot control is the BDI architecture <ref> [RG92] </ref> as for instance implemented in the Procedural Reasoning System (PRS) [GI89]. The main difference between structured reactive controllers and PRS is that PRS does not make a commitment to planning techniques or the interaction between plan 16 ning and execution.
Reference: [SGH + ] <author> R.G. Simmons, R. Goodwin, K.Z. Haigh, S. Koenig, J. O'Sullivan, and M.M. Veloso. Xavier: </author> <title> Experience with a layered robot architecture. </title> <journal> ACM magazine Intelligence. </journal> <note> to appear. </note>
Reference-contexts: In the field of robot control systems, other approaches deal with the problem of selecting appropriate actions under position uncertainty include [SGH + , GCJK97, KCK96]. Simmons et al. <ref> [SGH + ] </ref> choose the optimal navigation plan with respect to the most likely position of the robot. In contrast to this method, our approach takes into account the degree of uncertainty in the position estimation and considers dedicated actions for reducing uncertainty in position estimation.
Reference: [Sim94] <author> R. Simmons. </author> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <pages> pages 34-43, </pages> <year> 1994. </year>
Reference-contexts: The main difference between structured reactive controllers and PRS is that PRS does not make a commitment to planning techniques or the interaction between plan 16 ning and execution. It leaves it to the programmer to implement them as meta-procedures when required. TCA (Task Control Architecture) <ref> [Sim94] </ref> is a specialized real-time operating system for managing the task-specific processes of a robot controller. TCA provides a C subroutine library for interleaving planning and execution, monitoring environment changes and reacting to them, recovering from execution failures, and for coordinating multiple processes.
Reference: [SK95] <author> R. Simmons and S. Koenig. </author> <title> Probabilistic robot navigation in partially observable environments. </title> <booktitle> In Proc. International Joint Conference on Artificial Intelligence, </booktitle> <year> 1995. </year>
Reference-contexts: To meet the first two requirements, we apply Markov localization to estimate the robot's position. This technique has recently been proposed and implemented with considerable success by several groups <ref> [NPB95, SK95, KCK96, BFHS96, HK96] </ref>. Markov localization maintains a probability density for all possible locations in the environment, thus permitting the computation of the overall certainty in the position estimate. This representation is well suited to representing degree-of-belief and to the handling of ambiguous situations, necessary especially during global localization. <p> To overcome these deficiencies, recently different variants of Markov localization methods have been proposed for globally estimating the position of a robot <ref> [NPB95, SK95, KCK96, BFHS96, HK96] </ref>. Markov localization techniques combine several advantages in an elegant way. They are able to deal with imperfect information (sensor noise and approximate world models) and they are able to represent ambiguous situations, which occur frequently during global position estimation [BFHS96]. <p> While the resolution of robot orientation is typically in the order of 1 ffi to 2 ffi , longitudinal resolution is often as small as 10 to 15cm. In contrast to other variants of Markov localization techniques <ref> [NPB95, SK95, KCK96, HK96] </ref> using topological discretizations and a resolution of 90 ffi in orientation, our grid-based approach provides position estimates with an accuracy of a few centimeters and degrees.
Reference: [TBB + 98] <author> S. Thrun, A. Bucken, W. Burgard, D. Fox, T. Frohlinghaus, D. Hennig, T. Hof-mann, M. Krell, and T. Schimdt. </author> <title> Map learning and high-speed navigation in RHINO. </title> <editor> In D. Kortenkamp, R.P. Bonasso, and R. Murphy, editors, </editor> <title> AI-based Mobile Robots: Case studies of successful robot systems. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1998. </year> <note> to appear. 22 </note>
Reference-contexts: Many service robots employ high-level control systems, which control, coordinate, and monitor these subtasks during execution to ensure the robot's operational effectiveness <ref> [TBB + 98, SGH + , KMRS97] </ref>. An important aspect of this effectiveness is the ability of the high-level control system to cope with failures that occur during the execution of such subtasks. <p> Then we describe the implementation of primary activities using RPL. The integration of the active localization method into our high-level control system has been tested in an office delivery application using RHINO <ref> [BBC + 95, TBB + 98] </ref> (see Figure 1), an RWI B21 mobile robot. 2 The Markov Localization System Localization is one of the fundamental problems in mobile robot navigation. <p> Upon receiving a target point, the "motion planning" module computes, for each location in the environment, a feasible and optimal path between the location and the target point <ref> [TBB + 98] </ref>. <p> The plan consists of two components. The first one specifies a sequence of target points (the location indexed 13 through the numbers 1 to 5 in Figure 12) to be reached by the robot. The navigation be-tween the target points is accomplished by a standard path planner <ref> [TBB + 98] </ref>. The second component specifies in detail when and how the robot is to adapt its travel modes as it follows the navigation path.
References-found: 36

