URL: http://www.cs.utah.edu/~ganesh/asyncpapers/strong-conformance.ps.Z
Refering-URL: http://www.cs.utah.edu/~ganesh/asyncpapers.html
Root-URL: 
Email: (ganesh@cs.utah.edu)  (brunvand@cs.utah.edu)  (michell@cs.utah.edu)  (nowick@cs.columbia.edu)  
Phone: 508,  
Title: A Correctness Criterion for Asynchronous Circuit Validation and Optimization  
Author: GANESH GOPALAKRISHNAN ERIK BRUNVAND NICK MICHELL STEVEN M. NOWICK 
Keyword: Asynchronous Circuits, Circuit Optimizations, Formal Verification of Hardware, Trace Theory  
Address: Salt Lake City, Utah 84112  Room  Building  New York, New York 10027  
Affiliation: University of Utah Dept. of Computer Science  Department of Computer Science  Computer Science  Columbia University  
Abstract: In order to reason about the correctness of asynchronous circuit implementations and specifications, Dill has developed a variant of trace theory [1]. Trace theory describes the behavior of an asynchronous circuit by representing its possible executions as strings called "traces". A useful relation defined in this theory is called conformance, which holds when one trace specification can be safely substituted for another. We propose a new relation in the context of Dill's trace theory, called strong conformance. We show that this relation is capable of detecting certain errors in asynchronous circuits that cannot be detected through conformance. Strong conformance also helps to justify circuit optimization rules where a component is replaced by another component having extra capabilities (e.g., it can accept more inputs). The structural operators of Dill's trace theory | compose, rename and hide | are shown to be monotonic with respect to strong conformance. Experiments are presented using a modified version of Dill's trace theory verifier which implements the check for strong conformance. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> David L. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-independent Circuits. </title> <publisher> MIT Press, </publisher> <year> 1989. </year> <note> An ACM Distinguished Dissertation. </note>
Reference-contexts: Dill <ref> [1] </ref> has developed a trace theory for the specification and verification of asynchronous circuits. Trace theory uses the theory of regular languages to model asynchronous circuits by representing executions as strings called "traces." The symbols in these traces represent signal transitions on the interface terminals of the circuit being represented. <p> Dill has also developed a verifier based on trace theory. The verifier has been applied to a number of speed-independent asynchronous circuits [8, 5] and has uncovered bugs in several published circuits <ref> [1] </ref>. Nowick [9] has integrated this verifier into the asynchronous circuit synthesis framework used by a research division of Hewlett-Packard [10, 11]. <p> This paper follows the version of trace theory proposed by Dill <ref> [1] </ref>, who has applied his theory to the verification of speed-independent circuits. Dill has also extended his theory of simple 2 trace structures to complete trace structures (which are capable of modeling infinite computations) mainly for the study of liveness properties. <p> Dill has also extended his theory of simple 2 trace structures to complete trace structures (which are capable of modeling infinite computations) mainly for the study of liveness properties. Because the operations and decision procedures for finite automata on infinite sequences are much more complicated <ref> [1] </ref>, it is not clear how successful the practical adaptation of the theory of complete trace structures will be in the area of asynchronous circuit verification. (For a discussion of related issues, see [23, 24].) 2.1 Definitions and Trace Structures The following definitions and notations are taken from [1]. <p> more complicated <ref> [1] </ref>, it is not clear how successful the practical adaptation of the theory of complete trace structures will be in the area of asynchronous circuit verification. (For a discussion of related issues, see [23, 24].) 2.1 Definitions and Trace Structures The following definitions and notations are taken from [1]. Trace theory is a formalism for modeling, specifying, and verifying speed-independent circuits. It is based on the idea that the behavior of a circuit can be described by a regular set of traces, or sequences of transitions. <p> A third operation, rename, allows the user to generate modules from templates by renaming wires. We consider the compose operation in more detail below (for further discussion, see <ref> [1] </ref>). The compose operator models the effect of connecting identically named wires between two circuits, called components. <p> The success set, S AB , of T AB is obtained from the success sets of T A and T B using a product construction method, sketched briefly below (for details, see <ref> [1] </ref>). <p> Fortunately, a simpler method was first proposed by Ebergen [22] and further developed in the context of his work by Dill <ref> [1] </ref>. The mirror, T S , of S is defined as the trace structure whose input set is the output set of T S , whose output set is the input set of T S , and which has the same success set of T S . <p> More formally, given SPCTS T I and T S (with non-empty success sets), T I T S if and only if T I k T S is failure-free (i.e., has an empty failure set). This result is proved and justified in <ref> [1] </ref>. Specifically, the mirror T S produces as an output everything that T S accepts as an input, so if T I fails on any of these, there will be a failure in T I k T S . <p> This check is performed by searching the product automaton, depth-first, for a failure trace. If found, the failure trace is printed and the search is aborted. 1 In practice, Dill's algorithm avoids the explicit construction of the product machine <ref> [1] </ref>. 7 To illustrate the algorithm presented in Figure 2, we determine if the modified JOIN element, J 1, conforms to the JOIN element, J, described earlier. <p> Furthermore, T woW ires strongly conforms to Spec (i.e., T woW ires v Spec). Superficially, it may seem that and v are the same | but the following example shows that this is not the case. Example 2 Consider the specification of the "universal do-nothing module" <ref> [1] </ref>, BlockOfWood, described earlier: BlockOfWood = a? ! BlockOfWood j b? ! BlockOfWood Now consider the specification of a JOIN element: J = a? ! b? ! c! ! J According to Dill's trace theory, BlockOfWood conforms to J; therefore, BlockOf W ood is a safe substitution for J. <p> Other important properties of strong conformance are proved below. Proposition. compose, rename, and hide are monotonic with respect to strong conformance. Proof Outline. These structural operators are monotonic with respect to as shown in <ref> [1, Page 58] </ref>. <p> When this module receives an input on a, it makes a transition on either b or c. Now consider the specification of an alternating selector <ref> [1] </ref>: AS = a? ! b! ! a? ! c! ! AS AS GS (but not vice-versa) showing that AS is a safe substitution for GS. <p> For example, although the optimization illustrated in Figure 6 is certifiable using strong conformance, the state transition systems of the unoptimized and the optimized circuits shown in this figure are not bisimilar. In fact, a notion of correctness identified by Dill <ref> [1] </ref> called conformation equivalence (defined to be true when imp spec and spec imp), which is much weaker than the bisimulation relation, also cannot explain the relationship between the unoptimized and the optimized versions of the circuits in this figure. <p> Many of the notions used in these areas seem to be conceptually similar: e.g., autofailure manifestation <ref> [1] </ref> (which converts possible failures to actual failures) and may/must pre-orders (used by [17]). However there are fundamental differences between these approaches as well: e.g., unidirectional wires carry information only one way, so that a component cannot refuse an input; however, a CCS/CSP rendezvous can be refused by not participating.
Reference: 2. <author> Ivan Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <month> June </month> <year> 1989. </year> <note> The 1988 ACM Turing Award Lecture. </note>
Reference-contexts: 1 Introduction Asynchronous circuits are enjoying a revival, as designers confront problems associated with the complexity of modern VLSI circuits <ref> [2] </ref>. Despite their many potential advantages, however, the verification of asynchronous circuits remains a difficult problem. Asynchronous circuits have been designed assuming a wide variety of delay models for gates and wires [3, 4].
Reference: 3. <author> Jerry R. Burch. </author> <title> Delay models for verifying speed-dependent asynchronous circuits. </title> <booktitle> In Proceedings of IEEE International Conference on Computer Design (ICCD), </booktitle> <pages> pages 270-274, </pages> <year> 1992. </year>
Reference-contexts: Despite their many potential advantages, however, the verification of asynchronous circuits remains a difficult problem. Asynchronous circuits have been designed assuming a wide variety of delay models for gates and wires <ref> [3, 4] </ref>. Furthermore, a number of environmental modes have been used to define a circuit's interaction with its environment, such as fundamental [15] and input/output modes [7].
Reference: 4. <author> Srinivas Devadas, Kurt Keutzer, Sharad Malik, and Albert Wang. </author> <title> Verification of asynchronous interface circuits with bounded wire delays. </title> <booktitle> In International Conference on Computer Design (ICCAD), IEEE, </booktitle> <pages> pages 188-195, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Despite their many potential advantages, however, the verification of asynchronous circuits remains a difficult problem. Asynchronous circuits have been designed assuming a wide variety of delay models for gates and wires <ref> [3, 4] </ref>. Furthermore, a number of environmental modes have been used to define a circuit's interaction with its environment, such as fundamental [15] and input/output modes [7].
Reference: 5. <author> Steven M. Nowick and David L. Dill. </author> <title> Practicality of State-Machine Verification of Speed-Independent Circuits. </title> <booktitle> In International Conference on Computer Design (ICCAD), IEEE, </booktitle> <pages> pages 266-269, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Dill has also developed a verifier based on trace theory. The verifier has been applied to a number of speed-independent asynchronous circuits <ref> [8, 5] </ref> and has uncovered bugs in several published circuits [1]. Nowick [9] has integrated this verifier into the asynchronous circuit synthesis framework used by a research division of Hewlett-Packard [10, 11].
Reference: 6. <author> David E. Muller and W.S. Bartky. </author> <title> A Theory of Asynchronous Circuits. </title> <booktitle> In The Annals of the Computation Laboratory of Harvard University. Volume XXIX: Proceedings of the International Symposium on the Theory of Switching, Part I, </booktitle> <pages> pp. 204-243, </pages> <publisher> Harvard University Press, </publisher> <year> 1959. </year>
Reference-contexts: part by NSF Award MIP-8902558 y Supported in part by NSF Award MIP-9111793 z Supported in part by the Semiconductor Research Corporation, Contract nos. 91-DJ-205 and 92-DJ-205, and by the Stanford Center for Integrated Systems, Research Thrust in Synthesis and Verification of Multi-Module Systems. 1 that connect them; or speed-independence <ref> [6] </ref>, where a circuit's correct operation is independent of delays in components, while wires are assumed to have negligible delay. Dill [1] has developed a trace theory for the specification and verification of asynchronous circuits.
Reference: 7. <author> John A. Brzozowski and Jo C. Ebergen. </author> <title> On the delay-sensitivity of gate networks. </title> <journal> IEEE Transactions on Computer, </journal> <volume> 41(11) </volume> <pages> 1349-1360, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Asynchronous circuits have been designed assuming a wide variety of delay models for gates and wires [3, 4]. Furthermore, a number of environmental modes have been used to define a circuit's interaction with its environment, such as fundamental [15] and input/output modes <ref> [7] </ref>.
Reference: 8. <author> David L. Dill, Steven M. Nowick, and Robert F. Sproull. </author> <title> Specification and automatic verification of self-timed queues. Formal Methods in System Design, </title> <type> 1(1), </type> <month> July </month> <year> 1992. </year>
Reference-contexts: Dill has also developed a verifier based on trace theory. The verifier has been applied to a number of speed-independent asynchronous circuits <ref> [8, 5] </ref> and has uncovered bugs in several published circuits [1]. Nowick [9] has integrated this verifier into the asynchronous circuit synthesis framework used by a research division of Hewlett-Packard [10, 11]. <p> This excess capability of B is harmless, because the maximal environment of A cannot make use of this capability when B is used as a replacement for A. 4 Experimental Results 4.1 Error Detection in Queue Cell A queue cell concur-Q is specified by the Petri net <ref> [14, 8] </ref> in Figure 4, where the queue capacity is set to 1. The queue cell can be realized using the familiar micropipeline circuit QIM P 1 shown in Figure 5. Suppose that the circuit is erroneously implemented as QIM P 2.
Reference: 9. <author> Steven M. Nowick. </author> <type> Personal Communication, </type> <year> 1992. </year>
Reference-contexts: Dill has also developed a verifier based on trace theory. The verifier has been applied to a number of speed-independent asynchronous circuits [8, 5] and has uncovered bugs in several published circuits [1]. Nowick <ref> [9] </ref> has integrated this verifier into the asynchronous circuit synthesis framework used by a research division of Hewlett-Packard [10, 11].
Reference: 10. <author> Al Davis, Bill Coates, and Ken Stevens. </author> <title> The post office experience: Designing a large asynchronous chip. </title> <booktitle> In Proceedings of the 26th Annual Hawaiian International Conference on System Sciences, Volume I (Architecture and Biotechnology Computing), </booktitle> <pages> pages 409-418. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year> <title> Published in the Minitrack Asynchronous and Self-Timed Circuits and Systems. </title>
Reference-contexts: The verifier has been applied to a number of speed-independent asynchronous circuits [8, 5] and has uncovered bugs in several published circuits [1]. Nowick [9] has integrated this verifier into the asynchronous circuit synthesis framework used by a research division of Hewlett-Packard <ref> [10, 11] </ref>. Despite the impressive performance of the verifier, the verification criteria it uses, namely conformance, is inadequate to detect certain classes of commonly occuring errors that can be introduced during speed-independent and delay-insensitive circuit design or during circuit optimization.
Reference: 11. <author> A. Davis, B. Coates, and K. Stevens. </author> <title> Automatic synthesis of fast compact self-timed control circuits. </title> <booktitle> In 1993 IFIP Working Conference on Asynchronous Design Methodologies (Manchester, </booktitle> <address> England), </address> <month> April </month> <year> 1993. </year>
Reference-contexts: The verifier has been applied to a number of speed-independent asynchronous circuits [8, 5] and has uncovered bugs in several published circuits [1]. Nowick [9] has integrated this verifier into the asynchronous circuit synthesis framework used by a research division of Hewlett-Packard <ref> [10, 11] </ref>. Despite the impressive performance of the verifier, the verification criteria it uses, namely conformance, is inadequate to detect certain classes of commonly occuring errors that can be introduced during speed-independent and delay-insensitive circuit design or during circuit optimization.
Reference: 12. <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year>
Reference-contexts: Our work on verification raises a fundamental question: what are the most appropriate ways to compare asynchronous circuits, and when are the different approaches useful? This question arises quite naturally, because many comparison relations have been proposed in the area of process calculi such as CCS <ref> [12] </ref> and CSP [16] (for example, see [17]). Although we do not offer a definitive answer to this question, strong conformance can be seen as one useful contribution to the practical verification of asynchronous circuits. <p> An alternative methodology for translating concurrent process descriptions in a simple language into delay-insensitive circuits is described by Weber et al. [33]. The correctness of this compiler is shown by exhibiting a bisimulation relation <ref> [12] </ref> between the state transition system of the input description and the circuit generated from it. The authors point out that in general bisimulation is too strong an equivalence relation for use in verification.
Reference: 13. <author> John E. Hopcroft and Jeffrey D. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1979. </year>
Reference-contexts: Given implementation I and specification S, with respective trace structures T I and T S , the verifier determines if T I T S as follows: 1. Trace structures T I and T S are represented by deterministic finite automata <ref> [13] </ref>. 2. Trace structure T S is constructed. 3. The parallel composition, T I k T S , of implementation, T I and mirror, T S , is obtained, using the product construction method described above. 1 4.
Reference: 14. <author> James L. Peterson. </author> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1981. </year>
Reference-contexts: This excess capability of B is harmless, because the maximal environment of A cannot make use of this capability when B is used as a replacement for A. 4 Experimental Results 4.1 Error Detection in Queue Cell A queue cell concur-Q is specified by the Petri net <ref> [14, 8] </ref> in Figure 4, where the queue capacity is set to 1. The queue cell can be realized using the familiar micropipeline circuit QIM P 1 shown in Figure 5. Suppose that the circuit is erroneously implemented as QIM P 2.
Reference: 15. <author> Stephen H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley-Interscience, </publisher> <address> New York, New York, </address> <year> 1969. </year>
Reference-contexts: Asynchronous circuits have been designed assuming a wide variety of delay models for gates and wires [3, 4]. Furthermore, a number of environmental modes have been used to define a circuit's interaction with its environment, such as fundamental <ref> [15] </ref> and input/output modes [7].
Reference: 16. <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1985. </year>
Reference-contexts: Our work on verification raises a fundamental question: what are the most appropriate ways to compare asynchronous circuits, and when are the different approaches useful? This question arises quite naturally, because many comparison relations have been proposed in the area of process calculi such as CCS [12] and CSP <ref> [16] </ref> (for example, see [17]). Although we do not offer a definitive answer to this question, strong conformance can be seen as one useful contribution to the practical verification of asynchronous circuits. <p> Section 5 discusses results, related work and conclusions. 2 Background: Trace Theory In the past decade or so, different trace theories have been developed by various researchers. These trace theories have been applied to the study of concurrent systems: by Hoare <ref> [16, Chapter 2] </ref>, to the characterization of CSP processes; by Rem, Snepscheut, Udding [20, 21] and Ebergen [22] to the analysis, verification, and characterization of speed-independent and delay-insensitive circuits.
Reference: 17. <author> Rocco DeNicola and Matthew Hennessy. </author> <title> Testing equivalences for processes. </title> <journal> Theoretical Computer Science, </journal> <volume> 34 </volume> <pages> 83-133, </pages> <year> 1983. </year>
Reference-contexts: verification raises a fundamental question: what are the most appropriate ways to compare asynchronous circuits, and when are the different approaches useful? This question arises quite naturally, because many comparison relations have been proposed in the area of process calculi such as CCS [12] and CSP [16] (for example, see <ref> [17] </ref>). Although we do not offer a definitive answer to this question, strong conformance can be seen as one useful contribution to the practical verification of asynchronous circuits. <p> Many of the notions used in these areas seem to be conceptually similar: e.g., autofailure manifestation [1] (which converts possible failures to actual failures) and may/must pre-orders (used by <ref> [17] </ref>). However there are fundamental differences between these approaches as well: e.g., unidirectional wires carry information only one way, so that a component cannot refuse an input; however, a CCS/CSP rendezvous can be refused by not participating. One hopes to see unifying efforts relating these as yet unrelated efforts. Acknowledgments.
Reference: 18. <author> Erik Brunvand. </author> <title> Translating Concurrent Communicating Programs into Asynchronous Circuits. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1991. </year>
Reference-contexts: This work was principally motivated by our inability to reason about the correctness of some of the optimization rules used in Brunvand's asynchronous circuit compiler <ref> [18, 19] </ref> using existing verification methods. Section 2 presents the required background of Dill's trace theory, and defines conformance, which is the comparison relation used by Dill. Section 3 defines strong conformance as a small extension to conformance. First, we present an algorithm for verifying this new relation. <p> Increasing the queue size did not increase the verification time substantially; for a 31-location queue in place of a 32-location queue, the error was detected after about 0.1 seconds on a 10-MIPS workstation. 4.3 Call-Merge Optimization The initial circuits generated by either the occam <ref> [18] </ref> or hopCP [25, 26] synthesis systems have a number of redundancies. These redundancies arise because the HDL constructs are compiled without taking their contexts into account. During optimization, it is often possible to take advantage of a component's context, and thereby replace it with a cheaper component. <p> These redundancies arise because the HDL constructs are compiled without taking their contexts into account. During optimization, it is often possible to take advantage of a component's context, and thereby replace it with a cheaper component. An example of such an optimization, from <ref> [18] </ref>, is shown in Figure 6. Suppose that a circuit contains the CALL element, shown in Figure 6. <p> As a result, strong conformation insures that M CALL1 has neither the deadlock behavior illustrated in Section 4.1 nor the constrained output behavior illustrated in Section 4.2. Strong conformance has been used to validate a number of other optimizations in the occam synthesis system <ref> [18] </ref> as well. 4.4 Generalized Selector An interesting phenomenon occurs when the specification for a circuit includes non-deterministic choice. Consider a generalized selector GS: GS = a? ! (b! ! GS j c! ! GS) where j denotes choice (in this example, a non-deterministic choice).
Reference: 19. <author> Erik Brunvand and Robert F. Sproull. </author> <title> Translating concurrent programs into delay-insensitive circuits. </title> <booktitle> In International Conference on Computer Design (ICCAD), IEEE, </booktitle> <pages> pages 262-265, </pages> <month> nov </month> <year> 1989. </year>
Reference-contexts: This work was principally motivated by our inability to reason about the correctness of some of the optimization rules used in Brunvand's asynchronous circuit compiler <ref> [18, 19] </ref> using existing verification methods. Section 2 presents the required background of Dill's trace theory, and defines conformance, which is the comparison relation used by Dill. Section 3 defines strong conformance as a small extension to conformance. First, we present an algorithm for verifying this new relation.
Reference: 20. <author> Martin Rem, Jan L.A. van de Snepscheut, and Jan Tijmen Udding. </author> <title> Trace theory and the definition of hierarchical components. </title> <editor> In Randal E. Bryant, editor, </editor> <booktitle> Proc. 1983 Caltech VLSI Conference, </booktitle> <pages> pages 225-239. </pages> <publisher> Computer Science Press Inc., </publisher> <year> 1983. </year>
Reference-contexts: These trace theories have been applied to the study of concurrent systems: by Hoare [16, Chapter 2], to the characterization of CSP processes; by Rem, Snepscheut, Udding <ref> [20, 21] </ref> and Ebergen [22] to the analysis, verification, and characterization of speed-independent and delay-insensitive circuits. This paper follows the version of trace theory proposed by Dill [1], who has applied his theory to the verification of speed-independent circuits.
Reference: 21. <author> Jan L. A. van de Snepscheut. </author> <title> Trace Theory and VLSI Design. </title> <publisher> Springer Verlag, </publisher> <year> 1985. </year> <note> LNCS 200. </note>
Reference-contexts: These trace theories have been applied to the study of concurrent systems: by Hoare [16, Chapter 2], to the characterization of CSP processes; by Rem, Snepscheut, Udding <ref> [20, 21] </ref> and Ebergen [22] to the analysis, verification, and characterization of speed-independent and delay-insensitive circuits. This paper follows the version of trace theory proposed by Dill [1], who has applied his theory to the verification of speed-independent circuits.
Reference: 22. <author> Jo C. Ebergen. </author> <title> Translating Programs into Delay Insensitive Circuits. </title> <institution> Centre for Mathematics and Computer Science, </institution> <address> Amsterdam, </address> <year> 1989. </year> <note> CWI Tract 56. </note>
Reference-contexts: These trace theories have been applied to the study of concurrent systems: by Hoare [16, Chapter 2], to the characterization of CSP processes; by Rem, Snepscheut, Udding [20, 21] and Ebergen <ref> [22] </ref> to the analysis, verification, and characterization of speed-independent and delay-insensitive circuits. This paper follows the version of trace theory proposed by Dill [1], who has applied his theory to the verification of speed-independent circuits. <p> Fortunately, a simpler method was first proposed by Ebergen <ref> [22] </ref> and further developed in the context of his work by Dill [1]. <p> This notion is closely related to the definition of decomposition presented by Ebergen <ref> [22] </ref>. Key differences between our work and Ebergen's are noted below, and related work is also discussed. Ebergen's trace theory is designed with different objectives: to specify computations, and synthesize circuits through calculations using trace-theoretic rules. <p> A tool to demonstrate the power of Eber--gen's trace theory, called VerDect, is now available [30]. VerDect checks for Ebergen's condition of decomposition, in effect performing a verification under the speed-independent model (delay-insensitivity is guaranteed under Ebergen's method of synthesis by performing a syntactic check on decompositions <ref> [22, 31] </ref>). Dill's and Ebergen's work address the two prevalent points of view: post-hoc verification after "intelligent human design" vs. "correct by construction" design. <p> Dill's and Ebergen's work address the two prevalent points of view: post-hoc verification after "intelligent human design" vs. "correct by construction" design. The notion of strong conformance is latent in Ebergen's definition of the decomposition relation <ref> [22, Definition 3.1.0.0, Page 42] </ref> | as was discovered after the fact by us. A similar idea called input liberalization has also been proposed by Ad Peeters [32] | again discovered after the fact.
Reference: 23. <author> Amir Pneuli. </author> <title> How vital is liveness? verifying timing properties of reactive and hybrid systems. </title> <editor> In Rance Cleveland, editor, </editor> <booktitle> Springer Verlag Lecture Notes in Computer Science, No.630, CONCUR '92, </booktitle> <pages> pages 162-175. </pages> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Because the operations and decision procedures for finite automata on infinite sequences are much more complicated [1], it is not clear how successful the practical adaptation of the theory of complete trace structures will be in the area of asynchronous circuit verification. (For a discussion of related issues, see <ref> [23, 24] </ref>.) 2.1 Definitions and Trace Structures The following definitions and notations are taken from [1]. Trace theory is a formalism for modeling, specifying, and verifying speed-independent circuits.
Reference: 24. <author> Z. Har'El and Robert P. Kurshan. </author> <title> Software for analytical development of communication protocols. </title> <journal> AT&T Technical Journal, </journal> <month> January </month> <year> 1990. </year>
Reference-contexts: Because the operations and decision procedures for finite automata on infinite sequences are much more complicated [1], it is not clear how successful the practical adaptation of the theory of complete trace structures will be in the area of asynchronous circuit verification. (For a discussion of related issues, see <ref> [23, 24] </ref>.) 2.1 Definitions and Trace Structures The following definitions and notations are taken from [1]. Trace theory is a formalism for modeling, specifying, and verifying speed-independent circuits.
Reference: 25. <author> Venkatesh Akella. </author> <title> Action refinement based transformation of concurrent processes into asynchronous hardware. </title> <type> Ph.D. </type> <note> research in progress. </note>
Reference-contexts: Increasing the queue size did not increase the verification time substantially; for a 31-location queue in place of a 32-location queue, the error was detected after about 0.1 seconds on a 10-MIPS workstation. 4.3 Call-Merge Optimization The initial circuits generated by either the occam [18] or hopCP <ref> [25, 26] </ref> synthesis systems have a number of redundancies. These redundancies arise because the HDL constructs are compiled without taking their contexts into account. During optimization, it is often possible to take advantage of a component's context, and thereby replace it with a cheaper component.
Reference: 26. <author> Venkatesh Akella and Ganesh Gopalakrishnan. </author> <title> Static analysis techniques for the synthesis of efficient asynchronous circuits. </title> <type> Technical Report UUCS-91-018, </type> <institution> Dept. of Computer Science, University of Utah, </institution> <address> Salt Lake City, UT 84112, </address> <year> 1991. </year> <title> To appear in TAU '92: </title> <booktitle> 1992 Workshop on Timing Issues in the Specification and Synthesis of Digital Systems, </booktitle> <address> Princeton, NJ, March 18-20, </address> <year> 1992. </year>
Reference-contexts: Increasing the queue size did not increase the verification time substantially; for a 31-location queue in place of a 32-location queue, the error was detected after about 0.1 seconds on a 10-MIPS workstation. 4.3 Call-Merge Optimization The initial circuits generated by either the occam [18] or hopCP <ref> [25, 26] </ref> synthesis systems have a number of redundancies. These redundancies arise because the HDL constructs are compiled without taking their contexts into account. During optimization, it is often possible to take advantage of a component's context, and thereby replace it with a cheaper component.
Reference: 27. <author> Ganesh Gopalakrishnan and Prabhat Jain. </author> <title> Some recent asynchronous system design method-ologies. </title> <type> Technical Report UUCS-TR-90-016, </type> <institution> Dept. of Computer Science, University of Utah, </institution> <address> Salt Lake City, UT 84112, </address> <year> 1990. </year>
Reference: 28. <author> Chris Myers and Teresa H.-Y. Meng. </author> <title> Synthesis of timed asynchronous circuits. </title> <booktitle> In Proceedings of the International Conference on Computer Design (ICCD-92), </booktitle> <pages> pages 279-284, </pages> <year> 1992. </year>
Reference: 29. <author> Jerry Burch. </author> <title> Trace Algebra for Automatic Verification of Real-Time Concurrent Systems. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <month> August </month> <year> 1992. </year> <note> Technical Report CMU-CS-92-179. </note>
Reference: 30. <author> Jo C. Ebergen and Sylvain Gingras. </author> <title> A verifier for network decompositions of command-based specifications. </title> <booktitle> In Proceedings of the 26th Annual Hawaiian International Conference on System Sciences, Volume I (Architecture and Biotechnology Computing), </booktitle> <pages> pages 310-318. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year> <title> Published in the Minitrack Asynchronous and Self-Timed Circuits and Systems. </title>
Reference-contexts: A tool to demonstrate the power of Eber--gen's trace theory, called VerDect, is now available <ref> [30] </ref>. VerDect checks for Ebergen's condition of decomposition, in effect performing a verification under the speed-independent model (delay-insensitivity is guaranteed under Ebergen's method of synthesis by performing a syntactic check on decompositions [22, 31]).
Reference: 31. <author> Jan Tijmen Udding. </author> <title> A formal model for defining and classifying delay-insensitive circuits and systems. </title> <journal> Distributed Computing, </journal> (1):197-204, 1986. 
Reference-contexts: Furthermore, a number of environmental modes have been used to define a circuit's interaction with its environment, such as fundamental [15] and input/output modes [7]. In practice, the task of verifying asynchronous circuits is greatly simplified by considering only particular classes of behavior, e.g., delay-insensitivity <ref> [31] </ref>, where a circuit's correct operation is independent of delays in circuit components and in the wires fl Supported in part by NSF Award MIP-8902558 y Supported in part by NSF Award MIP-9111793 z Supported in part by the Semiconductor Research Corporation, Contract nos. 91-DJ-205 and 92-DJ-205, and by the Stanford <p> A tool to demonstrate the power of Eber--gen's trace theory, called VerDect, is now available [30]. VerDect checks for Ebergen's condition of decomposition, in effect performing a verification under the speed-independent model (delay-insensitivity is guaranteed under Ebergen's method of synthesis by performing a syntactic check on decompositions <ref> [22, 31] </ref>). Dill's and Ebergen's work address the two prevalent points of view: post-hoc verification after "intelligent human design" vs. "correct by construction" design.
Reference: 32. <author> Jo C. Ebergen and Ad M.G. Peeters. </author> <title> The modulo-n counter: Design and analysis of delay-insensitive circuits. </title> <type> Technical Report CS-91-25, </type> <institution> Department of Computer Science, University of Waterloo, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: The notion of strong conformance is latent in Ebergen's definition of the decomposition relation [22, Definition 3.1.0.0, Page 42] | as was discovered after the fact by us. A similar idea called input liberalization has also been proposed by Ad Peeters <ref> [32] </ref> | again discovered after the fact. However, neither Ebergen nor Peeters suggest using their definitions for validating circuit optimizations, as we do here. An alternative methodology for translating concurrent process descriptions in a simple language into delay-insensitive circuits is described by Weber et al. [33].
Reference: 33. <author> Sam Weber, Bard Bloom, and Geoffrey Brown. </author> <title> Compiling joy to silicon. </title> <editor> In Thomas Knight and J. Savage, editors, </editor> <booktitle> Advanced Research in VLSI : Proceedings of the 1992 Brown/MIT Conference. </booktitle> <publisher> The MIT Press, </publisher> <month> March </month> <year> 1992. </year>
Reference-contexts: However, neither Ebergen nor Peeters suggest using their definitions for validating circuit optimizations, as we do here. An alternative methodology for translating concurrent process descriptions in a simple language into delay-insensitive circuits is described by Weber et al. <ref> [33] </ref>. The correctness of this compiler is shown by exhibiting a bisimulation relation [12] between the state transition system of the input description and the circuit generated from it. The authors point out that in general bisimulation is too strong an equivalence relation for use in verification.

References-found: 33

