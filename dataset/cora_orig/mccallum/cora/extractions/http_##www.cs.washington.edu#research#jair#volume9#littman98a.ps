URL: http://www.cs.washington.edu/research/jair/volume9/littman98a.ps
Refering-URL: http://www.cs.washington.edu/research/jair/contents/v9.html
Root-URL: http://www.cs.washington.edu
Email: mlittman@cs.duke.edu  goldsmit@cs.engr.uky.edu  mundhenk@ti.uni-trier.de  
Title: The Computational Complexity of Probabilistic Planning  
Author: Michael L. Littman Judy Goldsmith Martin Mundhenk 
Address: Durham, NC 27708-0129 USA  Lexington, KY 40506-0046 USA  D-54286 Trier, GERMANY  
Affiliation: Department of Computer Science, Duke University  Department of Computer Science, University of Kentucky  Theoretische Informatik, Universitat Trier  
Note: Journal of Artificial Intelligence Research 9 (1998) 1-36 Submitted 1/98; published 8/98  
Pubnum: FB4  
Abstract: We examine the computational complexity of testing and finding small plans in probabilistic planning domains with both flat and propositional representations. The complexity of plan evaluation and existence varies with the plan type sought; we examine totally ordered plans, acyclic plans, and looping plans, and partially ordered plans under three natural definitions of plan value. We show that problems of interest are complete for a variety of complexity classes: PL, P, NP, co-NP, PP, NP PP , co-NP PP , and PSPACE. In the process of proving that certain planning problems are complete for NP PP , we introduce a new basic NP PP -complete problem, E-Majsat, which generalizes the standard Boolean satisfiability problem to computations involving probabilistic quantities; our results suggest that the development of good heuristics for E-Majsat could be important for the creation of efficient algorithms for a wide variety of problems. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Allender, E., & Ogihara, M. </author> <year> (1996). </year> <title> Relationships among PL, #L, and the determinant. </title> <journal> Theoretical Informatics and Applications, </journal> <volume> 30 (1), </volume> <pages> 1-21. </pages>
Reference: <author> Alvarez, C., & Jenner, B. </author> <year> (1993). </year> <title> A very hard log-space counting class. </title> <journal> Theoretical Computer Science, </journal> <volume> 107, </volume> <pages> 3-30. </pages>
Reference-contexts: A problem is C-complete if it is both C-hard and in C; these are the hardest problems in the class. In the interest of being complete, we next give more detailed descriptions of the less familiar probabilistic and counting complexity classes we use in this work. The class #L <ref> ( Alvarez & Jenner, 1993) </ref> is the class of functions f such that, for some nondeterministic logarithmically space-bounded machine N , the number of accepting paths of N on x equals f (x).
Reference: <author> Backstrom, C. </author> <year> (1995). </year> <title> Expressive equivalence of planning formalisms. </title> <journal> Artificial Intelligence, </journal> <volume> 76 (1-2), </volume> <pages> 17-34. </pages>
Reference: <author> Backstrom, C., & Nebel, B. </author> <year> (1995). </year> <title> Complexity results for SAS+ planning. </title> <journal> Computational Intelligence, </journal> <volume> 11 (4), </volume> <pages> 625-655. </pages>
Reference: <author> Balcazar, J., Diaz, J., & Gabarro, J. (1988/1990). </author> <title> Structural Complexity I/II. </title> <booktitle> EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer Verlag. </publisher>
Reference: <author> Borodin, A., Cook, S., & Pippenger, N. </author> <year> (1983). </year> <title> Parallel computation for well-endowed rings and space-bounded probabilistic machines. </title> <journal> Information and Control, </journal> <volume> 58 (1-3), </volume> <pages> 113-136. </pages>
Reference-contexts: Jung (1985) proved that any set computable in probabilistic logspace is computable in probabilistic logspace where the PL machine has a simultaneous polynomial-time bound. In apparent contrast to P-complete sets, sets in PL are decidable using very fast parallel computations <ref> (Borodin et al., 1983) </ref>. Probabilistic polynomial time, PP, is defined analogously.
Reference: <author> Boutilier, C., Dean, T., & Hanks, S. </author> <year> (1998). </year> <title> Decision theoretic planning: Structural assumptions and computational leverage. </title> <note> In preparation. </note>
Reference-contexts: The counting class #P has already been recognized by the artificial-intelligence community as an important complexity class in computations involving probabilistic quantities, such as belief-network inference (Roth, 1996). 2 Complexity of Probabilistic Planning planning domain is one that is described by a two-stage temporal Bayes network <ref> (Boutilier et al., 1998) </ref> or similar notation. Second, the problem of determining whether a valid totally ordered plan exists for a compactly represented planning domain is NP PP -complete. <p> In the probabilistic planning literature, two popular representations for propositional planning domains are probabilistic state-space operators (PSOs) (Kushmerick et al., 1995) and two-stage temporal Bayes networks (2TBNs) (Boutilier et al., 1995). Although these representations differ in the type of planning domains they can express naturally <ref> (Boutilier et al., 1998) </ref>, they are computationally equivalent; a planning domain expressed in one representation can be converted in polynomial time to an equivalent planning domain expressed in the other with at most a polynomial increase in representation size (Littman, 1997a).
Reference: <author> Boutilier, C., & Dearden, R. </author> <year> (1996). </year> <title> Approximating value trees in structured dynamic programming. </title> <editor> In Saitta, L. (Ed.), </editor> <booktitle> Proceedings of the Thirteenth International Conference on Machine Learning. </booktitle>
Reference: <author> Boutilier, C., Dearden, R., & Goldszmidt, M. </author> <year> (1995). </year> <title> Exploiting structure in policy construction. </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 1104-1113. </pages>
Reference-contexts: In the probabilistic planning literature, two popular representations for propositional planning domains are probabilistic state-space operators (PSOs) (Kushmerick et al., 1995) and two-stage temporal Bayes networks (2TBNs) <ref> (Boutilier et al., 1995) </ref>. <p> In this work, we focus on a propositional representation called the sequential-effects-tree representation (ST) (Littman, 1997a), which is a syntactic variant of 2TBNs with conditional probability tables represented as trees <ref> (Boutilier et al., 1995, 1998) </ref>. This representation is equivalent to 2TBNs and PSOs and simplifies the presentation of our results. 2. <p> This representation is equivalent to 2TBNs and PSOs and simplifies the presentation of our results. 2. It is also possible to formulate the objective as one of maximizing expected total discounted reward <ref> (Boutilier et al., 1995) </ref>, but the two formulations are essentially polynomially equivalent (Con-don, 1992). The only difficulty is that compactly represented domains may require discount factors exponentially close to one for this equivalence to hold. This is discussed further in Section 5. 3.
Reference: <author> Boutilier, C., & Poole, D. </author> <year> (1996). </year> <title> Computing optimal policies for partially observable decision processes using compact representations. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <pages> pp. 1168-1175. </pages> <publisher> AAAI Press/The MIT Press. 33 Littman, </publisher> <editor> Goldsmith & Mundhenk Bylander, T. </editor> <year> (1994). </year> <title> The computational complexity of propositional STRIPS planning. </title> <journal> Artificial Intelligence, </journal> <volume> 69, </volume> <pages> 161-204. </pages>
Reference: <author> Cassandra, A. R., Kaelbling, L. P., & Littman, M. L. </author> <year> (1994). </year> <title> Acting optimally in partially observable stochastic domains. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> pp. </pages> <address> 1023-1028 Seattle, WA. </address>
Reference: <author> Chapman, D. </author> <year> (1987). </year> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32, </volume> <pages> 333-379. </pages>
Reference: <author> Condon, A. </author> <year> (1992). </year> <title> The complexity of stochastic games. </title> <journal> Information and Computation, </journal> <volume> 96 (2), </volume> <pages> 203-224. </pages>
Reference-contexts: It is known that such an optimal stationary policy can be computed in polynomial time via linear programming <ref> (Condon, 1992) </ref>. Any stationary policy for a domain M = hS; s 0 ; A; G; ti can be written as a looping plan, although, of course, not all looping plans correspond to stationary policies.
Reference: <author> Crites, R. H., & Barto, A. G. </author> <year> (1996). </year> <title> Improving elevator performance using reinforcement learning. </title> <editor> In Touretzky, D. S., Mozer, M. C., & Hasselmo, M. E. (Eds.), </editor> <booktitle> Advances in Neural Information Processing Systems 8 Cambridge, </booktitle> <address> MA. </address> <publisher> The MIT Press. </publisher>
Reference: <author> Dearden, R., & Boutilier, C. </author> <year> (1997). </year> <title> Abstraction and approximate decision-theoretic planning. </title> <journal> Artificial Intelligence, </journal> <volume> 89 (1-2), </volume> <pages> 219-283. </pages>
Reference: <author> Draper, D., Hanks, S., & Weld, D. </author> <year> (1994). </year> <title> Probabilistic planning with information gathering and contingent execution. </title> <booktitle> In Proceedings of the AAAI Spring Symposium on Decision Theoretic Planning, </booktitle> <pages> pp. 76-82. </pages>
Reference-contexts: Kushmerick et al. (1995) looked at generating sufficiently successful plans under both the optimistic interpretation and the pessimistic interpretation. They also explicitly examined the plan-evaluation problem for partially ordered plans under both interpretations. Therefore, Theorems 13 and 14 apply to buridan. The more sophisticated c-buridan planner <ref> (Draper et al., 1994) </ref> extends buridan to plan in partially observable domains and to produce plans with conditional execution. The results of our work also shed light on the computational complexity of the problem addressed by c-buridan. Draper et al. (1994) devised a representation for partially ordered acyclic (conditional) plans.
Reference: <author> Drummond, M., & Bresina, J. </author> <year> (1990). </year> <title> Anytime synthetic projection: Maximizing the probability of goal satisfaction. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pp. 138-144. </pages> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Erol, K., Nau, D. S., & Subrahmanian, V. S. </author> <year> (1995). </year> <title> Complexity, decidability and undecidability results for domain-independent planning. </title> <journal> Artificial Intelligence, </journal> <volume> 76, </volume> <pages> 75-88. </pages>
Reference: <author> Gill, J. </author> <year> (1977). </year> <title> Computational complexity of probabilistic Turing machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6 (4), </volume> <pages> 675-695. </pages>
Reference-contexts: A function f is defined to be in GapL if it is the difference f = g h of #L functions g and h. While #L functions have nonnegative integer values by definition, GapL functions may have negative integer values (for example, if g always returns zero). Probabilistic logspace <ref> (Gill, 1977) </ref>, PL, is the class of sets A for which there exists a nondeterministic logarithmically space-bounded machine N such that x 2 A if and only if the number of accepting paths of N on x is greater than its number of rejecting paths.
Reference: <author> Goldman, R. P., & Boddy, M. S. </author> <year> (1994). </year> <title> Epsilon-safe planning. </title> <booktitle> In Proceedings of the 10th Conference on Uncertainty in Artificial Intelligence (UAI94), </booktitle> <pages> pp. </pages> <address> 253-261 Seattle, WA. </address>
Reference: <author> Goldsmith, J., Littman, M., & Mundhenk, M. </author> <year> (1997a). </year> <title> The complexity of plan existence and evaluation in probabilistic domains. </title> <type> Tech. rep. </type> <institution> CS-1997-07, Department of Computer Science, Duke University. </institution>
Reference: <author> Goldsmith, J., Littman, M. L., & Mundhenk, M. </author> <year> (1997b). </year> <title> The complexity of plan existence and evaluation in probabilistic domains. </title> <booktitle> In Proceedings of the Thirteenth Annual Conference on Uncertainty in Artificial Intelligence (UAI-97), </booktitle> <pages> pp. </pages> <address> 182-189 San Francisco, CA. </address> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference: <author> Goldsmith, J., Lusena, C., & Mundhenk, M. </author> <year> (1996). </year> <title> The complexity of deterministically observable finite-horizon Markov decision processes. </title> <type> Tech. rep. 268-96, </type> <institution> Department of Computer Science, University of Kentucky. </institution> <note> 34 Complexity of Probabilistic Planning Hanks, </note> <author> S. </author> <year> (1996). </year> <title> Decision-theoretic planning in unobservable domains is undecidable. </title> <type> Personal communication. </type>
Reference: <author> Hansen, E. A. </author> <year> (1998). </year> <title> Finite-Memory Control of Partially Observable Systems. </title> <type> Ph.D. thesis, </type> <institution> University of Massachusetts. </institution>
Reference-contexts: Therefore, there is some hope of devising effective planning algorithms by building on the observations in this paper and searching for optimal size-bounded plans instead of optimal unrestricted plans; in fact, recent planners for both propositional domains (Majercik & Littman, 1998a, 1998b) and flat domains <ref> (Hansen, 1998) </ref> are motivated by these results. 28 Complexity of Probabilistic Planning Domain Type Horizon Type Size-Bounded Plan Unrestricted Plan flat polynomial NP-complete PSPACE-complete propositional polynomial NP PP -complete EXPSPACE-complete flat infinite NP-complete undecidable propositional infinite PSPACE-complete undecidable Table 3: Complexity results for plan existence in partially observable domains Table 3
Reference: <author> Jung, H. </author> <year> (1985). </year> <title> On probabilistic time and space. </title> <booktitle> In Proceedings 12th ICALP, </booktitle> <pages> pp. 281-291. </pages> <booktitle> Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference: <author> Kaelbling, L. P., Littman, M. L., & Cassandra, A. R. </author> <year> (1998). </year> <title> Planning and acting in partially observable stochastic domains. </title> <journal> Artificial Intelligence, </journal> <volume> 101 (1-2), </volume> <pages> 99-134. </pages>
Reference-contexts: Looping plans generalize acyclic plans to the case in which plan steps can be repeated (Smith & Williamson, 1995; Lin & Dean, 1995). This type of plan is also referred to as a plan graph or policy graph <ref> (Kaelbling et al., 1998) </ref>. In the following sections, we prove computational complexity results concerning each of these plan types. The remainder of this section provides formal definitions of the plan types, illustrated in Figure 2 with examples for the sand-castle domain.
Reference: <author> Koenig, S., & Simmons, R. G. </author> <year> (1994). </year> <title> Risk-sensitive planning with probabilistic decision graphs. </title> <booktitle> In Proceedings of the 4th International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pp. 363-373. </pages>
Reference: <author> Kushmerick, N., Hanks, S., & Weld, D. S. </author> <year> (1995). </year> <title> An algorithm for probabilistic planning. </title> <journal> Artificial Intelligence, </journal> <volume> 76 (1-2), </volume> <pages> 239-286. </pages>
Reference-contexts: In the propositional representation, this type of jSj fi jSj matrix would be huge, so the transition function must be expressed another way. In the probabilistic planning literature, two popular representations for propositional planning domains are probabilistic state-space operators (PSOs) <ref> (Kushmerick et al., 1995) </ref> and two-stage temporal Bayes networks (2TBNs) (Boutilier et al., 1995). <p> This last result is derived by noting the isomorphism of the infinite-horizon problem to the emptiness problem for probabilistic finite-state automata, which is undecidable (Rabin, 1963). 5.2 Buridan The buridan planner <ref> (Kushmerick et al., 1995) </ref> finds partially ordered plans for propositional domains in the PSO representation. There are two identifiable differences between the problem solved by buridan and the problem analyzed in Section 4: the representation of planning problems and the fact that buridan is not restricted to find polynomial-size plans.
Reference: <author> Ladner, R. </author> <year> (1989). </year> <title> Polynomial space counting problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18, </volume> <pages> 1087-1097. </pages>
Reference-contexts: For polynomial-space-bounded computations, PSPACE equals probabilistic PSPACE, and #PSPACE is the same as the class of polynomial-space-computable functions <ref> (Ladner, 1989) </ref>. Note that L, NL, #L, PL and GapL are to logarithmic space what P, NP, #P, PP, and GapP are to polynomial time. Also, the notion of completeness we use in this paper relies on many-one reductions.
Reference: <author> Lin, S.-H., & Dean, T. </author> <year> (1995). </year> <title> Generating optimal policies for high-level plans with conditional branches and loops. </title> <booktitle> In Proceedings of the Third European Workshop on Planning, </booktitle> <pages> pp. 205-218. </pages>
Reference: <author> Littman, M. L. </author> <year> (1997a). </year> <title> Probabilistic propositional planning: Representations and complexity. </title> <booktitle> In Proceedings of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <pages> pp. 748-754. </pages> <publisher> AAAI Press/The MIT Press. </publisher>
Reference-contexts: differ in the type of planning domains they can express naturally (Boutilier et al., 1998), they are computationally equivalent; a planning domain expressed in one representation can be converted in polynomial time to an equivalent planning domain expressed in the other with at most a polynomial increase in representation size <ref> (Littman, 1997a) </ref>. In this work, we focus on a propositional representation called the sequential-effects-tree representation (ST) (Littman, 1997a), which is a syntactic variant of 2TBNs with conditional probability tables represented as trees (Boutilier et al., 1995, 1998). <p> are computationally equivalent; a planning domain expressed in one representation can be converted in polynomial time to an equivalent planning domain expressed in the other with at most a polynomial increase in representation size <ref> (Littman, 1997a) </ref>. In this work, we focus on a propositional representation called the sequential-effects-tree representation (ST) (Littman, 1997a), which is a syntactic variant of 2TBNs with conditional probability tables represented as trees (Boutilier et al., 1995, 1998). This representation is equivalent to 2TBNs and PSOs and simplifies the presentation of our results. 2. <p> The problem is in PSPACE because the plan can be guessed in polynomial time and checked in PSPACE (Theorem 8). Because NP PSPACE = PSPACE, the result follows. As we mentioned earlier, the unrestricted infinite-horizon plan-existence problem is EXP-complete <ref> (Littman, 1997a) </ref>; this shows the problem of determining unrestricted plan existence is EXP-hard only because some domains require plans that are larger than polynomial-size looping plans. Because Theorem 9 shows PSPACE-completeness for determining plan existence in deterministic domains, it is closely related to the PSPACE-completeness result of Bylan-der (1994). <p> Similarly, a domain in ST can be converted to PSO with at most a polynomial expansion. This conversion is too complex to sketch here, but follows from the proof of equivalence between ST and a simplified representation called IF <ref> (Littman, 1997a) </ref>. Given the polynomial equivalence between ST and PSO, any complexity results for ST carry over to PSO. 5 The results described in this paper concern planning problems in which a bound is given on the size of the plan sought. <p> As mentioned earlier, the difference between maximizing goal satisfaction and maximizing expected total discounted reward is a 30 Complexity of Probabilistic Planning superficial one, so the problem addressed by this planner is EXP-complete <ref> (Littman, 1997a) </ref>. Although the policies used by Boutilier et al. (1995) appears quite dissimilar from the finite-state controllers described in our work, policies can be converted to a type of similarly sized compact looping plan (an extension of the type of plan described in Corollary 5).
Reference: <author> Littman, M. L. </author> <year> (1997b). </year> <title> Solving large POMDPs: Lessons from complexity theory. </title> <booktitle> Talk presented at the DARPA AI Workshop in Providence, </booktitle> <address> RI. </address> <note> Slides available at URL http://www.cs.duke.edu/mlittman/talks/darpa97-pomdp.ps. </note>
Reference-contexts: Several other observations are worth making here. It is also known that PH NP PP , where PH represents the polynomial hierarchy. In a crude sense, PH is close to PSPACE, and, thus, our NP PP -completeness results place important problems close to PSPACE. However, some early empirical results <ref> (Littman, 1997b) </ref> show that random problem instances from PP have similar properties to random problem instances from NP, suggesting that PP might be close enough to NP for NP-type heuristics to be effective. 1.5 Results Summary Tables 1 and 2 summarize our results, which are explained in more detail in later
Reference: <author> Lovejoy, W. S. </author> <year> (1991). </year> <title> A survey of algorithmic methods for partially observable Markov decision processes. </title> <journal> Annals of Operations Research, </journal> <volume> 28 (1), </volume> <pages> 47-65. </pages>
Reference-contexts: Second, there are many instances in which simple probabilistic plans perform nearly as well as much larger and more complicated deterministic plans; this notion is often exploited in the field of randomized algorithms. Work by Platzman (1981) <ref> (described by Lovejoy, 1991) </ref> shows how the idea of randomized plans can come in handy for planning in partially observable domains. 3. Looping Plans Looping plans can be applied to infinite-horizon control.
Reference: <author> Lusena, C., Goldsmith, J., & Mundhenk, M. </author> <year> (1998). </year> <title> Nonapproximability results for Markov decision processes. </title> <type> Tech. rep. UK CS Dept TR 275-98, </type> <institution> University of Kentucky. </institution>
Reference: <author> Majercik, S. M., & Littman, M. L. </author> <year> (1998a). </year> <title> MAXPLAN: A new approach to probabilistic planning. </title> <editor> In Simmons, R., Veloso, M., & Smith, S. (Eds.), </editor> <booktitle> Proceedings of the Fourth International Conference on Artificial Intelligence Planning, </booktitle> <pages> pp. 86-93. </pages> <publisher> AAAI Press. </publisher>
Reference-contexts: Therefore, there is some hope of devising effective planning algorithms by building on the observations in this paper and searching for optimal size-bounded plans instead of optimal unrestricted plans; in fact, recent planners for both propositional domains <ref> (Majercik & Littman, 1998a, 1998b) </ref> and flat domains (Hansen, 1998) are motivated by these results. 28 Complexity of Probabilistic Planning Domain Type Horizon Type Size-Bounded Plan Unrestricted Plan flat polynomial NP-complete PSPACE-complete propositional polynomial NP PP -complete EXPSPACE-complete flat infinite NP-complete undecidable propositional infinite PSPACE-complete undecidable Table 3: Complexity results for <p> Algorithm-development energy, therefore, might fruitfully be spent devising heuristics for problems in the class NP PP as this class captures the essence of searching for small plans in probabilistic domains|some early results in this direction are appearing <ref> (Majercik & Littman, 1998a, 1998b) </ref>. Complexity theorists have only recently begun to explore classes such as NP PP that lie between the polynomial hierarchy and PSPACE and algorithm designers have come to these classes even more recently.
Reference: <author> Majercik, S. M., & Littman, M. L. </author> <year> (1998b). </year> <title> Using caching to solve larger probabilistic planning problems. </title> <booktitle> In Proceedings of the Fifteenth National Conference on Artificial Intelligence, </booktitle> <pages> pp. 954-959. </pages> <publisher> The AAAI Press/The MIT Press. </publisher>
Reference: <author> Mansell, T. M. </author> <year> (1993). </year> <title> A method for planning given uncertain and incomplete information. </title> <booktitle> In Proceedings of the 9th Conference on Uncertainty in Artificial Intelligence, </booktitle> <pages> pp. 350-358. </pages> <publisher> Morgan Kaufmann Publishers. </publisher> <address> 35 Littman, Goldsmith & Mundhenk McAllester, D., & Rosenblitt, D. </address> <year> (1991). </year> <title> Systematic nonlinear planning. </title> <booktitle> In Proceedings of the 9th National Conference on Artificial Intelligence, </booktitle> <pages> pp. 634-639. </pages>
Reference: <author> Mundhenk, M., Goldsmith, J., & Allender, E. </author> <year> (1997a). </year> <title> The complexity of policy-evaluation for finite-horizon partially-observable Markov decision processes. </title> <booktitle> In Proceedings of 22nd Symposium on Mathematical Foundations of Computer Science (published in Lecture Notes in Computer Science). </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Our results require that we restrict the succinct representation to generate transition probabilities with at most a polynomial 4 Complexity of Probabilistic Planning number of bits; the results may be different for other circuit-based representations that can represent probabilities with an exponential number of bits <ref> (Mundhenk et al., 1997a) </ref>. 1.2 Example Domain To help make these domain-representation ideas more concrete, we present the following simple probabilistic planning domain based on the problem of building a sand castle at the beach.
Reference: <author> Mundhenk, M., Goldsmith, J., Lusena, C., & Allender, E. </author> <year> (1997b). </year> <title> Encyclopaedia of complexity results for finite-horizon Markov decision process problems. </title> <type> Tech. rep. UK CS Dept TR 273-97, </type> <institution> University of Kentucky. </institution>
Reference: <author> Papadimitriou, C. H. </author> <year> (1994). </year> <title> Computational Complexity. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference: <author> Papadimitriou, C. H., & Tsitsiklis, J. N. </author> <year> (1987). </year> <title> The complexity of Markov decision processes. </title> <journal> Mathematics of Operations Research, </journal> <volume> 12 (3), </volume> <pages> 441-450. </pages>
Reference-contexts: Nothing in our complexity proofs depends on the presence or absence of additional observability constraints. Therefore, it is a direct corollary of Theorem 2 that the plan-existence problem for polynomial-horizon plans in unobservable domains is NP-complete <ref> (Papadimitriou & Tsitsiklis, 1987) </ref> and of Theorem 7 that the plan-existence problem for polynomial-size looping plans in partially observable domains is NP-complete (this is a new result).
Reference: <author> Platzman, L. K. </author> <year> (1981). </year> <title> A feasible computational approach to infinite-horizon partially-observed Markov decision problems. </title> <type> Tech. rep. </type> <institution> J-81-2, Georgia Institute of Technology, </institution> <address> Atlanta, GA. </address>
Reference: <author> Puterman, M. L. </author> <year> (1994). </year> <title> Markov Decision Processes|Discrete Stochastic Dynamic Programming. </title> <publisher> John Wiley & Sons, Inc., </publisher> <address> New York, NY. </address>
Reference-contexts: In probabilistic propositional planning, operators are specified in a Bayes network or an extended STRIPS-like notation, and the planner seeks a recipe for choosing operators to achieve a goal configuration with some user-specified probability. This problem is closely related to that of solving a Markov decision process <ref> (Puterman, 1994) </ref> when it is expressed in a compact representation. <p> This means that the state of the world is known at all times during plan execution, in spite of the uncertainty of state transitions. We know that the state of the system is sufficient information for choosing actions optimally <ref> (Puterman, 1994) </ref>, however, representing such a universal plan is often impractical in propositional domains in which the size of the state space is exponential in the size of the domain representation. For this reason, we consider other types of plan structures based on simple finite-state machines.
Reference: <author> Rabin, M. O. </author> <year> (1963). </year> <title> Probabilistic automata. </title> <journal> Information and Control, </journal> <volume> 6 (3), </volume> <pages> 230-245. </pages>
Reference-contexts: The results for unrestricted plans are due to Papadimitriou and Tsitsiklis (1987) (flat, polynomial), Goldsmith et al. (1996) (propositional, polynomial), and Hanks (1996) (infinite-horizon). This last result is derived by noting the isomorphism of the infinite-horizon problem to the emptiness problem for probabilistic finite-state automata, which is undecidable <ref> (Rabin, 1963) </ref>. 5.2 Buridan The buridan planner (Kushmerick et al., 1995) finds partially ordered plans for propositional domains in the PSO representation.
Reference: <author> Roth, D. </author> <year> (1996). </year> <title> On the hardness of approximate reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 82 (1-2), </volume> <pages> 273-302. </pages>
Reference-contexts: Roughly speaking, this means that #P and PP are equally powerful when used as oracles. The counting class #P has already been recognized by the artificial-intelligence community as an important complexity class in computations involving probabilistic quantities, such as belief-network inference <ref> (Roth, 1996) </ref>. 2 Complexity of Probabilistic Planning planning domain is one that is described by a two-stage temporal Bayes network (Boutilier et al., 1998) or similar notation. Second, the problem of determining whether a valid totally ordered plan exists for a compactly represented planning domain is NP PP -complete.
Reference: <author> Simon, J. </author> <year> (1975). </year> <title> On some central problems in computational complexity. </title> <type> Ph.D. thesis, </type> <institution> Cornell University. Also Cornell Department of Computer Science Technical Report TR75-224. </institution>
Reference: <author> Smith, D. E., & Williamson, M. </author> <year> (1995). </year> <title> Representation and evaluation of plans with loops. </title> <booktitle> Working notes for the 1995 Stanford Spring Symposium on Extended Theories of Action. </booktitle>
Reference: <author> Tesauro, G. </author> <year> (1994). </year> <title> TD-Gammon, a self-teaching backgammon program, achieves master-level play. </title> <journal> Neural Computation, </journal> <volume> 6 (2), </volume> <pages> 215-219. </pages>
Reference: <author> Toda, S. </author> <year> (1991). </year> <title> PP is as hard as the polynomial-time hierarchy. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20, </volume> <pages> 865-877. </pages>
Reference: <author> Toran, J. </author> <year> (1991). </year> <title> Complexity classes defined by counting quantifiers. </title> <journal> Journal of the ACM, </journal> <volume> 38 (3), </volume> <pages> 753-774. </pages>
Reference-contexts: For any class C PSPACE, it is the case that NP C PSPACE, and therefore NP PSPACE = PSPACE. The primary oracle-defined class we consider is NP PP . It equals the " NP m " closure of PP <ref> (Toran, 1991) </ref>, which can be seen as the closure of PP under polynomial-time disjunc tive reducibility with an exponential number of queries (each of the queries computable in polynomial time from its index in the list of queries). <p> Theorem 15 E-Majsat is NP PP -complete. 32 Complexity of Probabilistic Planning Proof: Membership in NP PP follows directly from definitions. To show completeness of E-Majsat, we first observe <ref> (Toran, 1991) </ref> that NP PP is the NP m -closure of the PP-complete set Majsat.
Reference: <author> Vinay, V. </author> <year> (1991). </year> <title> Counting auxiliary pushdown automata and semi-unbounded arithmetic circuits. </title> <booktitle> In Proc. 6th Structure in Complexity Theory Conference, </booktitle> <pages> pp. 270-284. </pages> <publisher> IEEE. </publisher> <pages> 36 </pages>
References-found: 51

