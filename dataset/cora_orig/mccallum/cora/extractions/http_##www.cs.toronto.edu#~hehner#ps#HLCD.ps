URL: http://www.cs.toronto.edu/~hehner/ps/HLCD.ps
Refering-URL: http://www.cs.toronto.edu/~hehner/
Root-URL: 
Title: High-level circuit design  
Author: Eric C. R. Hehner Theodore S. Norvell Richard F Paige 
Date: 7 November 1995 15 September 1997  
Note: Received:  
Abstract: 1 Department of Computer Science, University of Toronto ON M5S 3G4 Canada (hehner@cs.utoronto.ca) 2 Faculty of Engineering, Memorial University of Newfoundland, St.John's, NF A1B 3X5 Canada (theo@engr.mun.ca) 3 Department of Computer Science, York University, North York ON M3J 1P3 Canada (paige@cs.yorku.ca) Dedication This paper is dedicated to the memory of Jan van de Snepscheut, 1953-1994. Abstract We present two new ways to implement ordinary programs with logic gates. One, like imperative programs, has an associated memory to store state; the other, like functional programs, passes the state from one component to the next. Circuit design can be done more effectively by describing the function that a circuit is intended to perform than by describing a circuit that is intended to perform that function. W e use a standard programming language like Pascal or CSP , not to describe circuits, but to describe algorithms. The resulting circuits are produced automatically; they behave according to the programs, and have the same structure as the programs. For timing we use local delays, rather than a global clock (synchronous) or local handshaking (asynchronous). We give a formal semantics for both programs and circuits in order to prove our circuits correct. By simulation, we also demonstrate that the circuits perform favorably compared to others. 
Abstract-found: 1
Intro-found: 1
References-found: 0

