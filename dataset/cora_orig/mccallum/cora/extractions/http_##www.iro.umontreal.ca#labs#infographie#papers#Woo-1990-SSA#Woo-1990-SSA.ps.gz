URL: http://www.iro.umontreal.ca/labs/infographie/papers/Woo-1990-SSA/Woo-1990-SSA.ps.gz
Refering-URL: http://www.iro.umontreal.ca/labs/infographie/papers/Woo-1990-SSA/
Root-URL: http://www.iro.umontreal.ca
Email: fandreww j poulin j alaing @dgp.toronto.edu  
Title: A Survey of Shadow Algorithms  
Author: Andrew Woo Pierre Poulin Alain Fournier Andrew Woo's Pierre Poulin and Alain Fournier's 
Note: current address: Alias Research Inc., 110 Richmond  current address: Imager,  
Address: Toronto, Ontario, Canada M5S 1A4  Street East, Toronto, Ontario, Canada, M5C 1P1.  Vancouver, B.C., Canada, V6T 1W5.  
Affiliation: Department of Computer Science University of Toronto  Department of Computer Science, University of British Columbia,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> F. Crow, </author> <title> "Shadow Algorithms for Computer Graphics", </title> <journal> Computer Graphics, </journal> <volume> 11(3), </volume> <month> August </month> <year> 1977, </year> <pages> pp. 242-248. </pages>
Reference-contexts: In fact, in some circumstances, the shadows are the only components of the scene, as in shadow puppets theater and in pin screen animation developed by Alexander Alexeieff. In the only previous comprehensive discussion of shadow algorithms, Crow <ref> [1] </ref> discusses shadow generation by classifying the type of algorithms used. He distinguishes three general categories of shadow algorithms. This distinction has been very useful, and has inspired many developments since. <p> The shadow rendering complexity for both is O (En) per scanned segment (not per pixel). This shadow determination approach is only suitable for polygons. In addition, it has not acquired the popularity of the shadow determination approaches to be discussed in the upcoming subsections. 3.3 Shadow Volumes Crow <ref> [1] </ref> proposes an approach to generate polygonal shadow umbrae from the objects in the scene, and then placing them into the rendering data structure as invisible objects. Many others [10, 11, 3 12, 13, 14, 15, 16, 17] later apply some variations of the general principle to frame buffer/scanline approaches. <p> If the final shadow count is 0, then the visible object is not in shadow; if positive it is in shadow (see figure 2). The raw approach <ref> [1, 12] </ref> requires O (En) for storage and preprocessing, where En represents the number of shadow polygons. Shadowing rendering complexity requires depth processing of shadow polygons per pixel, which may get up to O (En). <p> Shadow umbra polygons for each such point source are generated in the same manner as in Crow's algorithm <ref> [1] </ref> (see section 3.3). This shadow polygon generation is done during preprocessing. A 2D depth buffer for visible surface determination is extended to store cell counters. <p> Thus an analytic solution for the scattered energy at each point is possible. Computation of scattered energy requires information about the portions of the viewing ray that is shadowed an extended shadow polygon approach <ref> [1] </ref> is used here. If the ray is completely in shadow, then the illumination value is a function of the surface colour and ambient illumination. If the ray is partially illuminated, then the illumination value is also a function of the scattered energy reaching the illuminated portion of the ray.
Reference: [2] <author> J. Amanatides, </author> <title> "Realism in Computer Graphics: A Survey", </title> <journal> IEEE CG&A, </journal> <volume> 7(1), </volume> <month> January </month> <year> 1987, </year> <pages> pp. 44-56. </pages>
Reference-contexts: He distinguishes three general categories of shadow algorithms. This distinction has been very useful, and has inspired many developments since. In the intervening years, however, there have been many new modeling primitives and rendering techniques, and within each one, new shadow algorithms have been developed. Amanatides <ref> [2] </ref>, Thalmann and Thalmann [3], Foley et al. [4] describe some of the existing shadow algorithms 1 within the general context of image synthesis. However, they deal mainly with shadows created by opaque objects, and are not complete even within this framework.
Reference: [3] <author> N. Thalmann, D. Thalmann, </author> <title> "Image Synthesis, Theory and Practice", </title> <publisher> Springer-Verlag, </publisher> <year> 1987, </year> <pages> pp. 156-169. </pages>
Reference-contexts: This distinction has been very useful, and has inspired many developments since. In the intervening years, however, there have been many new modeling primitives and rendering techniques, and within each one, new shadow algorithms have been developed. Amanatides [2], Thalmann and Thalmann <ref> [3] </ref>, Foley et al. [4] describe some of the existing shadow algorithms 1 within the general context of image synthesis. However, they deal mainly with shadows created by opaque objects, and are not complete even within this framework.
Reference: [4] <author> J. Foley, A. Van Dam, S. Feiner, J. Hughes, </author> <title> "Computer Graphics, </title> <booktitle> Principles and Practice", </booktitle> <address> 2 nd edition, </address> <publisher> Addison-Wesley, </publisher> <month> August </month> <year> 1990, </year> <pages> pp. 745-814. </pages>
Reference-contexts: This distinction has been very useful, and has inspired many developments since. In the intervening years, however, there have been many new modeling primitives and rendering techniques, and within each one, new shadow algorithms have been developed. Amanatides [2], Thalmann and Thalmann [3], Foley et al. <ref> [4] </ref> describe some of the existing shadow algorithms 1 within the general context of image synthesis. However, they deal mainly with shadows created by opaque objects, and are not complete even within this framework.
Reference: [5] <author> D. Warn, </author> <title> "Lighting Controls for Synthetic Images", </title> <journal> Computer Graphics, </journal> <volume> 17(3), </volume> <year> 1983, </year> <pages> pp. 13-21. </pages>
Reference-contexts: In other words, a value of either 0 or 1 is multiplied with the light intensity, indicating in shadow or not in shadow, respectively. 2 The domain of light sources truly generating hard shadows is restricted to point <ref> [5, 6] </ref> and directional light (see figure 1). In general, hard shadow determination can be considered to be just as difficult as the visibility determination from the eye; i.e. shadow determination is just visibility determination with respect to the light source.
Reference: [6] <author> T. Nishita, I. Okamura, E. Nakamae, </author> <title> "Shading Models for Point and Linear Sources", </title> <journal> ACM Transactions on Graphics, </journal> <volume> 4(2), </volume> <month> April </month> <year> 1985, </year> <pages> pp. 124-146. </pages>
Reference-contexts: In other words, a value of either 0 or 1 is multiplied with the light intensity, indicating in shadow or not in shadow, respectively. 2 The domain of light sources truly generating hard shadows is restricted to point <ref> [5, 6] </ref> and directional light (see figure 1). In general, hard shadow determination can be considered to be just as difficult as the visibility determination from the eye; i.e. shadow determination is just visibility determination with respect to the light source. <p> It is also noteworthy that the resultant shadow region has a shape depending both on the occluding object and on the light source (see figure 3). In addition, the types of light sources 6 modeled are linear and area light sources <ref> [50, 6, 49] </ref>. The soft shadow algorithms considered here will be only due to opaque objects and the intensity is assumed identical for every point on the light source. Some work has been done to generate soft shadows due to inter-reflections of diffuse light. <p> After clipping of all the candidate objects is done, exactly the region of the light source that is visible from P is identified (see figure 4). This region is then passed to any intensity integral solver. Whether the solver is an analytic 8 <ref> [6, 49] </ref> or point sampling approach [50] does not matter, the important result is that the shadow calculations can be relied upon. <p> Thus inaccurate shadows may be generated if there exists many visible patches with respect to the pixel due to the insufficiency of the hemi-cube resolution. 4.6.2 Shadow Polygons Another approach for soft shadow generation within radiosity is proposed by Nishita and Nakamae <ref> [6, 52] </ref>. In the hemi-cube approach, the B i values are calculated at the center of the patch. Nishita and Nakamae propose that B i be calculated at the vertices of the patches, and shadow testing only be done at these points. <p> This shadowing function is determined by using shadow polygons, and the umbra and penumbra regions are identified <ref> [6] </ref> (see figure 3). For each vertex of patch i, shadow polygons are projected towards all other patches j, so that j now acts as the occluding object and i as the area light source.
Reference: [7] <author> J. </author> <title> Blinn, "Jim Blinn's Corner: Me and my (fake) Shadow", </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 8(1), </volume> <month> January </month> <year> 1988, </year> <pages> pp. 82-86. </pages>
Reference-contexts: An example is a real-time shadow generator where only shadows projected on a floor are taken into account <ref> [7] </ref>.
Reference: [8] <author> A. Appel, </author> <title> "Some Techniques for Shading Machine Renderings of Solids", </title> <booktitle> Proc. AFIPS JSCC, </booktitle> <volume> vol. 32, </volume> <year> 1968, </year> <pages> pp. 37-45. </pages>
Reference-contexts: Such short-cut algorithms tend to be faster computationally than "honest" algorithms to be discussed in the upcoming subsections and can be very effective in the appropriate context (such as video games). 3.2 Shadow Generation During the Scanning Phase Appel <ref> [8] </ref>, and Bouknight and Kelley [9] suggest shadow generation during the display phase using an extended scanline approach. During the display phase, polygonal boundaries are projected down onto the scanned object to form shadow boundaries, clipped within the boundaries of the scanned object, and then projected onto the viewing screen. <p> However, his method, as many of the others based on projections, is highly subject to aliasing problems as the light source gets closer to the scene. 3.6 Ray Tracing Ray casting <ref> [8, 26] </ref> was introduced as a method for visibility calculation and shadow determination. A ray is shot (or cast) from the eye to each pixel, ray-surface intersections are performed and the surface with the minimum hit distance is declared the visible surface.
Reference: [9] <author> W. Bouknight, K. Kelley, </author> <title> "An Algorithm for Producing Half-Tone Computer Graphics Presentations Shadows and Movable Light Sources", </title> <booktitle> AFIPS Conf. Proc., </booktitle> <volume> vol. 36, </volume> <year> 1970, </year> <pages> pp. 1-10. </pages>
Reference-contexts: Such short-cut algorithms tend to be faster computationally than "honest" algorithms to be discussed in the upcoming subsections and can be very effective in the appropriate context (such as video games). 3.2 Shadow Generation During the Scanning Phase Appel [8], and Bouknight and Kelley <ref> [9] </ref> suggest shadow generation during the display phase using an extended scanline approach. During the display phase, polygonal boundaries are projected down onto the scanned object to form shadow boundaries, clipped within the boundaries of the scanned object, and then projected onto the viewing screen.
Reference: [10] <author> L. Brotman, N. Badler, </author> <title> "Generating Soft Shadows with a Depth Buffer Algorithm", </title> <journal> IEEE CG&A, </journal> <volume> 4(10), </volume> <month> October </month> <year> 1984, </year> <pages> pp. 71-81. </pages>
Reference-contexts: Many others <ref> [10, 11, 3 12, 13, 14, 15, 16, 17] </ref> later apply some variations of the general principle to frame buffer/scanline approaches. Shadow determination is computed by using a shadow count. An initial shadow count is calculated by counting the number of shadow volumes which contain the viewing position. <p> Such work takes into account some of the global illumination issues. The surfaces in the scene are considered as secondary light sources and thus soft shadows can be generated [51, 52, 53]. 4.1 Frame Buffer Algorithm Brotman and Badler <ref> [10] </ref> stochastically choose points to model higher dimensional light sources. Shadow umbra polygons for each such point source are generated in the same manner as in Crow's algorithm [1] (see section 3.3). This shadow polygon generation is done during preprocessing.
Reference: [11] <author> H. Fuchs, J. Coldfeather, J. Hultquist, S. Spach, J. Austin, F. Brooks, J. Eyles, J. Poulton, </author> <title> "Fast Spheres, Shadows, Textures, Transparencies and Image Enchancements in Pixel-Planes", </title> <journal> Computer Graphics, </journal> <volume> 19(3), </volume> <month> July </month> <year> 1985, </year> <pages> pp. 111-120. </pages>
Reference-contexts: Many others <ref> [10, 11, 3 12, 13, 14, 15, 16, 17] </ref> later apply some variations of the general principle to frame buffer/scanline approaches. Shadow determination is computed by using a shadow count. An initial shadow count is calculated by counting the number of shadow volumes which contain the viewing position. <p> While there are many algorithms for shadows of polygonal objects, very few of the high performance display systems in laboratories or available on the market incorporate shadows, even though they are almost all based on polygonal primitives. A notable exception is Pixel-Planes <ref> [11] </ref>, which can compute shadows with a version of the "shadow-count" algorithm. Some version of the algorithms described in section 3.3 should be applicable to most other systems as well, since they all use Z-buffers for visibility.
Reference: [12] <author> P. Bergeron, </author> <title> "A General Version of Crow's Shadow Volumes", </title> <journal> IEEE CG&A, </journal> <volume> 6(9), </volume> <month> September </month> <year> 1986, </year> <pages> pp. 17-28. </pages>
Reference-contexts: If the final shadow count is 0, then the visible object is not in shadow; if positive it is in shadow (see figure 2). The raw approach <ref> [1, 12] </ref> requires O (En) for storage and preprocessing, where En represents the number of shadow polygons. Shadowing rendering complexity requires depth processing of shadow polygons per pixel, which may get up to O (En).
Reference: [13] <author> N. Max, </author> <title> "Atmospheric Illumination and Shadows", </title> <journal> Computer Graphics, </journal> <volume> 20(4), </volume> <month> August </month> <year> 1986, </year> <pages> pp. 117-124. </pages>
Reference-contexts: Many others <ref> [10, 11, 3 12, 13, 14, 15, 16, 17] </ref> later apply some variations of the general principle to frame buffer/scanline approaches. Shadow determination is computed by using a shadow count. An initial shadow count is calculated by counting the number of shadow volumes which contain the viewing position. <p> Note also that a great deal of memory is needed for the three-dimensional grid of density distribution information. 7.3 Participating Medium The treatment of volume densities can easily be extended to media that cause emission, scattering and absorption of the light. Max <ref> [13] </ref> models atmospheric illumination assuming a volume density model that is the same as Blinn's [95]: low albedo (reflective power) and single scattering. Thus an analytic solution for the scattered energy at each point is possible.
Reference: [14] <author> A. Fournier, D. Fussell, </author> <title> "On the Power of the Frame Buffer", </title> <journal> ACM Transactions On Graphics, </journal> <volume> 7(2), </volume> <month> April </month> <year> 1988, </year> <pages> pp. 103-128. </pages>
Reference-contexts: Many others <ref> [10, 11, 3 12, 13, 14, 15, 16, 17] </ref> later apply some variations of the general principle to frame buffer/scanline approaches. Shadow determination is computed by using a shadow count. An initial shadow count is calculated by counting the number of shadow volumes which contain the viewing position. <p> A BSP tree variation [15] requires O (En) storage, with preprocessing complexity of O (En 2 ) and rendering complexity of perhaps O (log (En)) for BSP tree traversal. Other algorithms, such as in Fournier et al. <ref> [14] </ref>, requires storage of O (pq) to keep the shadow count updates, and the shadow rendering complexity is constant with preprocessing complexity of O (Enpq). 3.4 Area Subdivision Nishita and Nakamae [18], and Atherton et al. [19] use clipping transformations for polygon shadow generation.
Reference: [15] <author> N. Chin, S. Feiner, </author> <title> "Near Real-Time Shadow Generation Using BSP Trees", </title> <journal> Computer Graphics, </journal> <volume> 23(3), </volume> <month> July </month> <year> 1989, </year> <pages> pp. 99-106. </pages>
Reference-contexts: Many others <ref> [10, 11, 3 12, 13, 14, 15, 16, 17] </ref> later apply some variations of the general principle to frame buffer/scanline approaches. Shadow determination is computed by using a shadow count. An initial shadow count is calculated by counting the number of shadow volumes which contain the viewing position. <p> The raw approach [1, 12] requires O (En) for storage and preprocessing, where En represents the number of shadow polygons. Shadowing rendering complexity requires depth processing of shadow polygons per pixel, which may get up to O (En). A BSP tree variation <ref> [15] </ref> requires O (En) storage, with preprocessing complexity of O (En 2 ) and rendering complexity of perhaps O (log (En)) for BSP tree traversal. <p> Another exception is the work done by Campbell and Fussell [62]. They adaptively subdivide the scene along the shadow boundaries in a progressive refinement scheme. A light emitter is subdivided until each element can be treated as a point light source. A BSP shadow volume generation, similar to <ref> [15] </ref> is used to subdivide efficiently the receiver polygons for each element on the emitter. The quality of the shadows (especially sharpness) thus created are greatly improved from the previous techniques.
Reference: [16] <author> D. Eo, C. Kyung, </author> <title> "Hybrid Shadow Testing Scheme for Ray Tracing", </title> <booktitle> Computer Aided Design, </booktitle> <volume> 21(1), </volume> <month> January </month> <year> 1989, </year> <pages> pp. 38-48. </pages>
Reference-contexts: Many others <ref> [10, 11, 3 12, 13, 14, 15, 16, 17] </ref> later apply some variations of the general principle to frame buffer/scanline approaches. Shadow determination is computed by using a shadow count. An initial shadow count is calculated by counting the number of shadow volumes which contain the viewing position. <p> This is done in realization that neighbouring shadow binary decisions are usually the same. Preprocessing can potentially save a great deal of shadow intersection tests. The light buffer [46], hybrid shadow testing <ref> [16] </ref>, voxel occlusion testing [17], and ZZ-buffer [47] are examples of such shadow cullers.
Reference: [17] <author> A. Woo, J. Amanatides, </author> <title> "Voxel Occlusion Testing: A Shadow Determination Accelerator for Ray Tracing", </title> <booktitle> Graphics Interface 90, </booktitle> <month> May </month> <year> 1990, </year> <pages> pp. 213-220. 21 </pages>
Reference-contexts: Many others <ref> [10, 11, 3 12, 13, 14, 15, 16, 17] </ref> later apply some variations of the general principle to frame buffer/scanline approaches. Shadow determination is computed by using a shadow count. An initial shadow count is calculated by counting the number of shadow volumes which contain the viewing position. <p> This is done in realization that neighbouring shadow binary decisions are usually the same. Preprocessing can potentially save a great deal of shadow intersection tests. The light buffer [46], hybrid shadow testing [16], voxel occlusion testing <ref> [17] </ref>, and ZZ-buffer [47] are examples of such shadow cullers. The light buffer [48, 49], voxel occlusion testing [17], and ZZ-buffer [47] have been extended to model soft shadows as well. 4 Soft Shadow Generation Another type of shadow algorithm deals with soft shadows (illustrated in image 11), i.e. the inclusion <p> Preprocessing can potentially save a great deal of shadow intersection tests. The light buffer [46], hybrid shadow testing [16], voxel occlusion testing <ref> [17] </ref>, and ZZ-buffer [47] are examples of such shadow cullers. The light buffer [48, 49], voxel occlusion testing [17], and ZZ-buffer [47] have been extended to model soft shadows as well. 4 Soft Shadow Generation Another type of shadow algorithm deals with soft shadows (illustrated in image 11), i.e. the inclusion of the penumbra region along with the umbra, for a higher level of visual quality (see figure 3). <p> If the ray is partially illuminated, then the illumination value is also a function of the scattered energy reaching the illuminated portion of the ray. Efficient implementations of this approach using regular grid subdivisions are described in <ref> [17, 97] </ref>, and more 19 general models of density distribution can be seen in the work by Nishita et al. [98] and Ebert and Parent [97]. Rushmeier and Torrance [99] apply the zonal method used in heat transfer to the computation of the radiosity.
Reference: [18] <author> T. Nishita, E. Nakamae, </author> <title> "An Algorithm for Half-Tone Representation of Three-Dimensional Objects", </title> <booktitle> Information Processing in Japan, </booktitle> <volume> vol. 14, </volume> <year> 1974, </year> <pages> pp. 93-99. </pages>
Reference-contexts: Other algorithms, such as in Fournier et al. [14], requires storage of O (pq) to keep the shadow count updates, and the shadow rendering complexity is constant with preprocessing complexity of O (Enpq). 3.4 Area Subdivision Nishita and Nakamae <ref> [18] </ref>, and Atherton et al. [19] use clipping transformations for polygon shadow generation. It is a 2-pass hidden surface algorithm where the first pass transforms the image to the view of the light source, and separates shadowed and unshadowed portions of the polygons via a hidden surface polygon clipper.
Reference: [19] <author> P. Atherton, K. Weiler, D. Greenberg, </author> <title> "Polygon Shadow Generation", </title> <journal> Computer Graphics, </journal> <volume> 12(3), </volume> <month> August </month> <year> 1978, </year> <pages> pp. 275-281. </pages>
Reference-contexts: Other algorithms, such as in Fournier et al. [14], requires storage of O (pq) to keep the shadow count updates, and the shadow rendering complexity is constant with preprocessing complexity of O (Enpq). 3.4 Area Subdivision Nishita and Nakamae [18], and Atherton et al. <ref> [19] </ref> use clipping transformations for polygon shadow generation. It is a 2-pass hidden surface algorithm where the first pass transforms the image to the view of the light source, and separates shadowed and unshadowed portions of the polygons via a hidden surface polygon clipper. <p> If the only modeling primitive available is the polygon, we propose another method for soft shadow generation. Given the light source and the point P to be shaded, the polygon clipper described by Atherton et al. <ref> [19] </ref> (section 3.4) can be applied in reverse. A candidate set of objects lying between P and the light can be easily acquired through any intersection culler.
Reference: [20] <author> L. Williams, </author> <title> "Casting Curved Shadows on Curved Surfaces", </title> <journal> Computer Graphics, </journal> <volume> 12(3), </volume> <month> August </month> <year> 1978, </year> <pages> pp. 270-274. </pages>
Reference-contexts: However, since the shadow boundaries are internally stored as polygons in this algorithm, the information can be sent to hardware shaders (hardware that processes and shades polygons) and produce real-time shadows if the lights and polygonal database are not altered. 3.5 Depth Buffer Williams <ref> [20] </ref> uses a Z-buffer depth map algorithm to generate shadows. The Z-buffer approach to determine visibility and intensity with respect to the eye is repeated for the light source.
Reference: [21] <author> J. Hourcade, A. Nicolas, </author> <title> "Algorithms for Anti-aliased Cast Shadows", </title> <journal> Computer and Graphics, </journal> <volume> 9(3), </volume> <year> 1985, </year> <pages> pp. 259-265. </pages>
Reference-contexts: However, the attractiveness of this approach is that it can trivially support primitives other than just polygons. Hourcade and Nicolas <ref> [21] </ref>, and Reeves et al. [22] attempt to improve on both aliasing problems by applying stochastic sampling and some prefiltering to the Z-buffer approach. Reeves et al. also claim that soft shadows can be generated from their algorithm.
Reference: [22] <author> W. Reeves, D. Salesin, R. Cook, </author> <title> "Rendering Anti-Aliased Shadows with Depth Maps", </title> <journal> Computer Graphics, </journal> <volume> 21(4), </volume> <month> July </month> <year> 1987, </year> <pages> pp. 283-291. </pages>
Reference-contexts: However, the attractiveness of this approach is that it can trivially support primitives other than just polygons. Hourcade and Nicolas [21], and Reeves et al. <ref> [22] </ref> attempt to improve on both aliasing problems by applying stochastic sampling and some prefiltering to the Z-buffer approach. Reeves et al. also claim that soft shadows can be generated from their algorithm.
Reference: [23] <author> W. Reeves, R. Blau, </author> <title> "Approximate and Probabilistic Algorithms for Shading and Rendering Structured Particle Systems", </title> <journal> Computer Graphics, </journal> <volume> 19(3), </volume> <month> July </month> <year> 1985, </year> <pages> pp. 313-322. </pages>
Reference-contexts: Some algorithms that have been proposed use the idea of keeping the shadow information provided by projecting the scene in the light source direction <ref> [23, 24, 25] </ref>. An example is the optimization of the scanline algorithm for surface shadowing proposed by Robertson [25]. <p> Systems have been developed to transform procedurally and stochastically a small set of simple constraints into a complete description of very complex objects (e.g. fire [93, 94], trees and grass <ref> [23] </ref>). A simple graphics primitive, the particle, is used to create this complexity. Such systems introduce new dimensions to the shadowing problem. Scenes composed of millions of particles become a formidable task to shade exactly. <p> Such systems introduce new dimensions to the shadowing problem. Scenes composed of millions of particles become a formidable task to shade exactly. Probabilistic schemes must then be extended to the shadowing of each particle. 18 7.1 Particle Systems Reeves and Blau <ref> [23] </ref> use a particle system to generate images of trees. The self-shadowing of branches within a tree is associated with the ambient term of the illumination model. The value of this term decreases exponentially as the particle location gets deeper within the tree.
Reference: [24] <author> G. Miller, </author> <title> "The Definition and Rendering of Terrain Maps", </title> <journal> Computer Graphics, </journal> <volume> 20(4), </volume> <month> August </month> <year> 1986, </year> <pages> pp. 39-48. </pages>
Reference-contexts: Some algorithms that have been proposed use the idea of keeping the shadow information provided by projecting the scene in the light source direction <ref> [23, 24, 25] </ref>. An example is the optimization of the scanline algorithm for surface shadowing proposed by Robertson [25].
Reference: [25] <author> P. Robertson, </author> <title> "Spatial Transformations for Rapid Scan-Line Surface Shadowing", </title> <journal> IEEE CG&A, </journal> <volume> 9(2), </volume> <month> March </month> <year> 1989, </year> <pages> pp. 30-38. </pages>
Reference-contexts: Some algorithms that have been proposed use the idea of keeping the shadow information provided by projecting the scene in the light source direction <ref> [23, 24, 25] </ref>. An example is the optimization of the scanline algorithm for surface shadowing proposed by Robertson [25]. <p> Some algorithms that have been proposed use the idea of keeping the shadow information provided by projecting the scene in the light source direction [23, 24, 25]. An example is the optimization of the scanline algorithm for surface shadowing proposed by Robertson <ref> [25] </ref>.
Reference: [26] <author> R. Goldstein, R. Nagel, </author> <title> "3-D Visual Simulation", </title> <booktitle> Simulation, </booktitle> <month> January </month> <year> 1971, </year> <pages> pp. 25-31. </pages>
Reference-contexts: However, his method, as many of the others based on projections, is highly subject to aliasing problems as the light source gets closer to the scene. 3.6 Ray Tracing Ray casting <ref> [8, 26] </ref> was introduced as a method for visibility calculation and shadow determination. A ray is shot (or cast) from the eye to each pixel, ray-surface intersections are performed and the surface with the minimum hit distance is declared the visible surface.
Reference: [27] <author> T. Whitted, </author> <title> "An Improved Illumination Model for Shaded Display", </title> <journal> Communications of the ACM, </journal> <volume> 23(6), </volume> <month> June </month> <year> 1980, </year> <pages> pp. 343-349. </pages>
Reference-contexts: A ray is shot (or cast) from the eye to each pixel, ray-surface intersections are performed and the surface with the minimum hit distance is declared the visible surface. This approach generalizes to the rendering technique popularized by Whitted <ref> [27] </ref> known as ray tracing. This technique also models reflection and refraction, and generates shadows. The principle behind ray tracing for hard shadow determination is very simple: a shadow ray is shot from the intersection point to the light source. <p> discussion in section 5.1, all the algorithms discussed for transparent shadow generation are also capable of generating soft shadows. 5.1 Shadow Ray Traditionally in ray tracing, shadows which result from occluding transparent objects are handled by detecting all occluding objects and returning the fraction of light transmitted through the objects <ref> [27] </ref>. But this is not the correct answer for transparent objects because the shadowing function is wavelength dependent, and refraction of incoming light is not taken into account.
Reference: [28] <author> J. Amanatides, D. Mitchell, </author> <title> "Some Regularization Problems in Ray Tracing", </title> <booktitle> Graphics Interface 90, </booktitle> <month> May </month> <year> 1990, </year> <pages> pp. 221-228. </pages>
Reference-contexts: Thus the visibility and shadow tests might give incorrect results due to numerical errors. This is usually seen as little holes in the images some refer to it as surface acne. Further numerical error problems are discussed and solutions offered in the work by Amanatides and Mitchell <ref> [28] </ref>. 3.6.1 Intersection Culling Algorithms for Ray Tracing Since for each ray, intersection checks with all objects in the scene are necessary, research has gone into intersection culling so that only a small candidate set of objects needs to be checked for intersection with all ray types.
Reference: [29] <author> S. Rubin, T. Whitted, </author> <title> "A 3-Dimensional Representation for Rast Rendering of Complex Scenes", </title> <journal> Computer Graphics, </journal> <volume> 14(3), </volume> <month> July </month> <year> 1980, </year> <pages> pp. 110-116. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes <ref> [29, 30, 31, 32] </ref>, variable size voxel traversal [33, 34], uniform size voxel traversal [35, 36, 37, 38], hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence [42, 43], and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches.
Reference: [30] <author> T. Kay, J. Kajiya, </author> <title> "Ray Tracing Complex Scenes", </title> <journal> Computer Graphics, </journal> <volume> 20(4), </volume> <month> August </month> <year> 1986, </year> <pages> pp. 269-278. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes <ref> [29, 30, 31, 32] </ref>, variable size voxel traversal [33, 34], uniform size voxel traversal [35, 36, 37, 38], hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence [42, 43], and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches.
Reference: [31] <author> J. Goldsmith, J. Salmon, </author> <title> "Automatic Creation of Object Hierarchies for Ray Tracing", </title> <journal> IEEE CG&A, </journal> <volume> 7(5), </volume> <month> May </month> <year> 1987, </year> <pages> pp. 14-20. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes <ref> [29, 30, 31, 32] </ref>, variable size voxel traversal [33, 34], uniform size voxel traversal [35, 36, 37, 38], hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence [42, 43], and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches.
Reference: [32] <author> A. Glassner, </author> <title> "Spacetime Ray Tracing for Animation", </title> <journal> IEEE CG&A, </journal> <volume> 8(2), </volume> <month> March </month> <year> 1988, </year> <pages> pp. 60-70. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes <ref> [29, 30, 31, 32] </ref>, variable size voxel traversal [33, 34], uniform size voxel traversal [35, 36, 37, 38], hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence [42, 43], and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches. <p> Optimization of shadow determination for certain animations are discussed in some other works <ref> [32, 100, 101] </ref>. We hope this survey will help cast an even larger shadow on computer graphics. 20 9 Acknowledgements We would like to thank Mikio Shinya (of NTT) and Marie-Claire Forgue (of INRIA) for carefully reading an early draft of our paper, and suggesting some improvements.
Reference: [33] <author> A. Glassner, </author> <title> "Space Subdivision for Fast Ray Tracing", </title> <journal> IEEE CG&A, </journal> <volume> 4(10), </volume> <month> October </month> <year> 1984, </year> <pages> pp. 15-22. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes [29, 30, 31, 32], variable size voxel traversal <ref> [33, 34] </ref>, uniform size voxel traversal [35, 36, 37, 38], hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence [42, 43], and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches.
Reference: [34] <author> M. Kaplan, </author> <title> "Space Tracing: A Constant Time Ray Tracer", </title> <booktitle> Tutorial Notes on the State of the Art in Image Synthesis, SIGGRAPH 85, </booktitle> <month> July </month> <year> 1985, </year> <pages> pp. 149-158. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes [29, 30, 31, 32], variable size voxel traversal <ref> [33, 34] </ref>, uniform size voxel traversal [35, 36, 37, 38], hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence [42, 43], and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches.
Reference: [35] <author> A. Fujimoto, T. Tanaka, K. Iwata, </author> <title> "ARTS: Accelerated Ray Tracing System", </title> <journal> IEEE CG&A, </journal> <volume> 6(4), </volume> <month> April </month> <year> 1986, </year> <pages> pp. 16-26. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes [29, 30, 31, 32], variable size voxel traversal [33, 34], uniform size voxel traversal <ref> [35, 36, 37, 38] </ref>, hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence [42, 43], and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches.
Reference: [36] <author> J. Amanatides, A. Woo, </author> <title> "A Fast Voxel Traversal Algorithm for Ray Tracing", </title> <type> EuroGraphics 87, </type> <month> August </month> <year> 1987, </year> <pages> pp. 1-10. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes [29, 30, 31, 32], variable size voxel traversal [33, 34], uniform size voxel traversal <ref> [35, 36, 37, 38] </ref>, hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence [42, 43], and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches.
Reference: [37] <author> J. Snyder, A. Barr, </author> <title> "Ray Tracing Complex Models Containing Surface Tessellations", </title> <journal> Computer Graphics, </journal> <volume> 21(4), </volume> <month> July </month> <year> 1987, </year> <pages> pp. 119-128. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes [29, 30, 31, 32], variable size voxel traversal [33, 34], uniform size voxel traversal <ref> [35, 36, 37, 38] </ref>, hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence [42, 43], and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches. <p> One problem with the polygonization of surfaces is that objects do not appear smooth. Within each polygon, this effect can be reduced by interpolating the surface normals. Unfortunately, shadow calculations do not have sufficient interpolation information, thus resulting in polygonal shadow silhouettes (illustrated in image 13). Snyder and Barr <ref> [37] </ref> propose an improvement by subdividing more at the silhouette of the surface (a function of the light source position) to reduce this artifact with some success. But with multiple light sources, there is the danger of severe surface subdivision. <p> A simple method to avoid checking this intersection consists of tessellating the concave surface into many polygons. An illustration of the terminator problem is given in figure 9. In order to keep a smooth self-shadowing while interpolating normals (terminator problem) in ray tracing, Snyder and Barr <ref> [37] </ref> propose to start the shadow ray further from the intersection point, but this may cause further artifacts if poorly approximated. 6.2 Shadows on Texture Mapped Surfaces Texture mapping is a very powerful approach to provide detail and realism to surfaces at a low cost for modeling and rendering.
Reference: [38] <author> J. Cleary, G. Wyvill, </author> <title> "Analysis of an Algorithm for Fast Ray Tracing Using Uniform Space Subdivision", </title> <booktitle> Visual Computer, </booktitle> <month> July </month> <year> 1988, </year> <pages> pp. 65-83. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes [29, 30, 31, 32], variable size voxel traversal [33, 34], uniform size voxel traversal <ref> [35, 36, 37, 38] </ref>, hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence [42, 43], and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches.
Reference: [39] <author> O. Devillers, </author> <title> "The Macro-regions: an Efficient Space Division Structure for Ray Tracing", </title> <institution> Rapport de Recherche du Laboratoire d'Informatique de l'Ecole Normale Superieure, Paris, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes [29, 30, 31, 32], variable size voxel traversal [33, 34], uniform size voxel traversal [35, 36, 37, 38], hybrid uniform-variable voxel traversal <ref> [39, 40] </ref>, ray classification [41], spatial coherence [42, 43], and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches.
Reference: [40] <author> D. Jevans, B. Wyvill, </author> <title> "Adaptive Voxel Subdivision for Ray Tracing", </title> <booktitle> Graphics Interface 89, </booktitle> <month> June </month> <year> 1989, </year> <pages> pp. 164-172. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes [29, 30, 31, 32], variable size voxel traversal [33, 34], uniform size voxel traversal [35, 36, 37, 38], hybrid uniform-variable voxel traversal <ref> [39, 40] </ref>, ray classification [41], spatial coherence [42, 43], and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches.
Reference: [41] <author> J. Arvo, D. Kirk, </author> <title> "Fast Ray Tracing by Ray Classification", </title> <journal> Computer Graphics, </journal> <volume> 21(4), </volume> <month> July </month> <year> 1987, </year> <pages> pp. 55-64. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes [29, 30, 31, 32], variable size voxel traversal [33, 34], uniform size voxel traversal [35, 36, 37, 38], hybrid uniform-variable voxel traversal [39, 40], ray classification <ref> [41] </ref>, spatial coherence [42, 43], and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches.
Reference: [42] <author> P. Heckbert, P. Hanrahan, </author> <title> "Beam Tracing Polygonal Objects", </title> <journal> Computer Graphics, </journal> <volume> 18(3), </volume> <month> July </month> <year> 1984, </year> <pages> pp. 119-127. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes [29, 30, 31, 32], variable size voxel traversal [33, 34], uniform size voxel traversal [35, 36, 37, 38], hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence <ref> [42, 43] </ref>, and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches.
Reference: [43] <author> P. Hanrahan, </author> <title> "Using Caching and Breadth-First Search to Speed up Ray Tracing", </title> <booktitle> Graphics Interface 86, </booktitle> <month> May </month> <year> 1986, </year> <pages> pp. 51-61. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes [29, 30, 31, 32], variable size voxel traversal [33, 34], uniform size voxel traversal [35, 36, 37, 38], hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence <ref> [42, 43] </ref>, and ray coherence [44, 45]. It is difficult to analyze the complexities of most of the approaches.
Reference: [44] <author> R. Speer, R. DeRose, B. Barsky, </author> <title> "A Theoretical and Empirical Analysis of Coherent Ray Tracing", </title> <booktitle> Graphics Interface 85, </booktitle> <month> May </month> <year> 1985, </year> <pages> pp. 11-25. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes [29, 30, 31, 32], variable size voxel traversal [33, 34], uniform size voxel traversal [35, 36, 37, 38], hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence [42, 43], and ray coherence <ref> [44, 45] </ref>. It is difficult to analyze the complexities of most of the approaches.
Reference: [45] <author> M. Ohta, M. Maekawa, </author> <title> "Ray Coherence Theorem and Constant Time Ray Tracing Algorithm", </title> <institution> Computer Graphics (Tokyo), </institution> <year> 1987, </year> <pages> pp. 303-314. </pages>
Reference-contexts: There are many such culling algorithms. They include: hierarchical bounding volumes [29, 30, 31, 32], variable size voxel traversal [33, 34], uniform size voxel traversal [35, 36, 37, 38], hybrid uniform-variable voxel traversal [39, 40], ray classification [41], spatial coherence [42, 43], and ray coherence <ref> [44, 45] </ref>. It is difficult to analyze the complexities of most of the approaches.
Reference: [46] <author> E. Haines, D. Greenberg, </author> <title> "The Light Buffer: A Shadow-Testing Accelerator", </title> <journal> IEEE CG&A, </journal> <volume> 6(9), </volume> <month> September </month> <year> 1986, </year> <pages> pp. 6-16. </pages>
Reference-contexts: This is done in realization that neighbouring shadow binary decisions are usually the same. Preprocessing can potentially save a great deal of shadow intersection tests. The light buffer <ref> [46] </ref>, hybrid shadow testing [16], voxel occlusion testing [17], and ZZ-buffer [47] are examples of such shadow cullers.
Reference: [47] <author> D. Salesin, J. Stolfi, </author> <title> "Rendering CSG Models wiht a ZZ-Buffer", </title> <journal> Computer Graphics, </journal> <volume> 24(4), </volume> <month> August </month> <year> 1990, </year> <pages> pp. 67-76. </pages>
Reference-contexts: This is done in realization that neighbouring shadow binary decisions are usually the same. Preprocessing can potentially save a great deal of shadow intersection tests. The light buffer [46], hybrid shadow testing [16], voxel occlusion testing [17], and ZZ-buffer <ref> [47] </ref> are examples of such shadow cullers. The light buffer [48, 49], voxel occlusion testing [17], and ZZ-buffer [47] have been extended to model soft shadows as well. 4 Soft Shadow Generation Another type of shadow algorithm deals with soft shadows (illustrated in image 11), i.e. the inclusion of the penumbra <p> Preprocessing can potentially save a great deal of shadow intersection tests. The light buffer [46], hybrid shadow testing [16], voxel occlusion testing [17], and ZZ-buffer <ref> [47] </ref> are examples of such shadow cullers. The light buffer [48, 49], voxel occlusion testing [17], and ZZ-buffer [47] have been extended to model soft shadows as well. 4 Soft Shadow Generation Another type of shadow algorithm deals with soft shadows (illustrated in image 11), i.e. the inclusion of the penumbra region along with the umbra, for a higher level of visual quality (see figure 3).
Reference: [48] <author> G. Fossum, D. Fussell, </author> <title> "Generating Soft Shadows Efficiently", </title> <type> Technical Report 78712-1188, </type> <institution> Department of Computer Sciences, The University of Texas at Austin, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: This is done in realization that neighbouring shadow binary decisions are usually the same. Preprocessing can potentially save a great deal of shadow intersection tests. The light buffer [46], hybrid shadow testing [16], voxel occlusion testing [17], and ZZ-buffer [47] are examples of such shadow cullers. The light buffer <ref> [48, 49] </ref>, voxel occlusion testing [17], and ZZ-buffer [47] have been extended to model soft shadows as well. 4 Soft Shadow Generation Another type of shadow algorithm deals with soft shadows (illustrated in image 11), i.e. the inclusion of the penumbra region along with the umbra, for a higher level of
Reference: [49] <author> P. Poulin, J. Amanatides, </author> <title> "Shading and Shadowing with Linear Light Sources", </title> <note> to appear in Euro-Graphics 90, </note> <month> August </month> <year> 1990. </year>
Reference-contexts: This is done in realization that neighbouring shadow binary decisions are usually the same. Preprocessing can potentially save a great deal of shadow intersection tests. The light buffer [46], hybrid shadow testing [16], voxel occlusion testing [17], and ZZ-buffer [47] are examples of such shadow cullers. The light buffer <ref> [48, 49] </ref>, voxel occlusion testing [17], and ZZ-buffer [47] have been extended to model soft shadows as well. 4 Soft Shadow Generation Another type of shadow algorithm deals with soft shadows (illustrated in image 11), i.e. the inclusion of the penumbra region along with the umbra, for a higher level of <p> It is also noteworthy that the resultant shadow region has a shape depending both on the occluding object and on the light source (see figure 3). In addition, the types of light sources 6 modeled are linear and area light sources <ref> [50, 6, 49] </ref>. The soft shadow algorithms considered here will be only due to opaque objects and the intensity is assumed identical for every point on the light source. Some work has been done to generate soft shadows due to inter-reflections of diffuse light. <p> After clipping of all the candidate objects is done, exactly the region of the light source that is visible from P is identified (see figure 4). This region is then passed to any intensity integral solver. Whether the solver is an analytic 8 <ref> [6, 49] </ref> or point sampling approach [50] does not matter, the important result is that the shadow calculations can be relied upon.
Reference: [50] <author> C. Verbeck, D. Greenberg, </author> <title> "A Comprehensive Light Source Description for Computer Graphics", </title> <journal> IEEE CG&A, </journal> <volume> 4(7), </volume> <month> July </month> <year> 1984, </year> <pages> pp. 66-75. </pages>
Reference-contexts: It is also noteworthy that the resultant shadow region has a shape depending both on the occluding object and on the light source (see figure 3). In addition, the types of light sources 6 modeled are linear and area light sources <ref> [50, 6, 49] </ref>. The soft shadow algorithms considered here will be only due to opaque objects and the intensity is assumed identical for every point on the light source. Some work has been done to generate soft shadows due to inter-reflections of diffuse light. <p> After clipping of all the candidate objects is done, exactly the region of the light source that is visible from P is identified (see figure 4). This region is then passed to any intensity integral solver. Whether the solver is an analytic 8 [6, 49] or point sampling approach <ref> [50] </ref> does not matter, the important result is that the shadow calculations can be relied upon.
Reference: [51] <author> M. Cohen, D. Greenberg, </author> <title> "The Hemi-Cube: A Radiosity Solution for Complex Environments", </title> <journal> Computer Graphics, </journal> <volume> 19(3), </volume> <month> July </month> <year> 1985, </year> <pages> pp. 31-40. </pages>
Reference-contexts: Some work has been done to generate soft shadows due to inter-reflections of diffuse light. Such work takes into account some of the global illumination issues. The surfaces in the scene are considered as secondary light sources and thus soft shadows can be generated <ref> [51, 52, 53] </ref>. 4.1 Frame Buffer Algorithm Brotman and Badler [10] stochastically choose points to model higher dimensional light sources. Shadow umbra polygons for each such point source are generated in the same manner as in Crow's algorithm [1] (see section 3.3). This shadow polygon generation is done during preprocessing. <p> Once the form factors are known, solving a system of linear equations give the radiosity, hence the shading, of each patch. 4.6.1 Hemi-Cube Two approaches have been described in the literature to specifically handle soft shadows using the radiosity approach. The first approach, proposed by Cohen and Greenberg <ref> [51] </ref>, computes form factors by attaching an hemi-cube to each patch (see figure 5). The hemi-cube consists of five grid planes surrounding the center of a patch. Each grid pixel (referred to as a delta form factor) contributes to the overall form factor.
Reference: [52] <author> T. Nishita, E. Nakamae, </author> <title> "Continuous Tone Representation of Three-Dimensional Objects Taking Account of Shadows and Interreflection", </title> <journal> Computer Graphics, </journal> <volume> 19(3), </volume> <month> July </month> <year> 1985, </year> <pages> pp. 23-30. </pages>
Reference-contexts: Some work has been done to generate soft shadows due to inter-reflections of diffuse light. Such work takes into account some of the global illumination issues. The surfaces in the scene are considered as secondary light sources and thus soft shadows can be generated <ref> [51, 52, 53] </ref>. 4.1 Frame Buffer Algorithm Brotman and Badler [10] stochastically choose points to model higher dimensional light sources. Shadow umbra polygons for each such point source are generated in the same manner as in Crow's algorithm [1] (see section 3.3). This shadow polygon generation is done during preprocessing. <p> Thus inaccurate shadows may be generated if there exists many visible patches with respect to the pixel due to the insufficiency of the hemi-cube resolution. 4.6.2 Shadow Polygons Another approach for soft shadow generation within radiosity is proposed by Nishita and Nakamae <ref> [6, 52] </ref>. In the hemi-cube approach, the B i values are calculated at the center of the patch. Nishita and Nakamae propose that B i be calculated at the vertices of the patches, and shadow testing only be done at these points.
Reference: [53] <author> S. Chattopadhyay, A. Fujimoto, </author> <title> "BiDirectional Ray Tracing", </title> <booktitle> Computer Graphics 1987, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 335-343. </pages>
Reference-contexts: Some work has been done to generate soft shadows due to inter-reflections of diffuse light. Such work takes into account some of the global illumination issues. The surfaces in the scene are considered as secondary light sources and thus soft shadows can be generated <ref> [51, 52, 53] </ref>. 4.1 Frame Buffer Algorithm Brotman and Badler [10] stochastically choose points to model higher dimensional light sources. Shadow umbra polygons for each such point source are generated in the same manner as in Crow's algorithm [1] (see section 3.3). This shadow polygon generation is done during preprocessing. <p> Whether the solver is an analytic 8 [6, 49] or point sampling approach [50] does not matter, the important result is that the shadow calculations can be relied upon. Many coherence optimizations can also be applied here. 4.5 Bidirectional Ray Tracing Chattopadhyay and Fujimoto <ref> [53] </ref> propose a fast method named bidirectional ray tracing to generate soft shadows (as a result of inter-reflections) using a uniform voxel structure. Shadow rays are shot from the light sources to surfaces (highly diffuse only) that are considered to be a potential secondary light.
Reference: [54] <author> P. Haeberli, K. Akeley, </author> <title> "The Accumulation Buffer: Hardware Support for High-Quality Rendering", </title> <journal> Computer Graphics, </journal> <volume> 24(4), </volume> <month> August </month> <year> 1990, </year> <pages> pp. 309-318. </pages>
Reference-contexts: Similarly some artifacts such as aliasing can appear in the shadow areas. Recent display architectures have features to help implement this type of algorithm. The accumulation buffer, as described by Haeberli and Akeley <ref> [54] </ref>, allows the rendering of soft shadows by accumulating in a frame buffer the weighted shadows from point sources.
Reference: [55] <author> R. Cook, T. Porter, L. Carpenter, </author> <title> "Distributed Ray Tracing", </title> <journal> Computer Graphics, </journal> <volume> 18(3), </volume> <month> July </month> <year> 1984, </year> <pages> pp. 137-145. </pages>
Reference-contexts: The accumulation buffer, as described by Haeberli and Akeley [54], allows the rendering of soft shadows by accumulating in a frame buffer the weighted shadows from point sources. How to sample correctly the light sources is not discussed in the paper. 7 4.2 Distributed Ray Tracing Cook et al. <ref> [55] </ref> propose a distributed ray tracing method for soft shadow generation. A collection of shadow rays is shot from the intersected point to randomly perturbed locations on the light source.
Reference: [56] <author> M. Dippe, E. </author> <title> Wold, "Antialiasing Through Stochastic Sampling", </title> <journal> Computer Graphics, </journal> <volume> 19(3), </volume> <month> July </month> <year> 1985, </year> <pages> pp. 69-78. </pages>
Reference-contexts: However, it is a point sampling approach, which may not always provide good approximations to the correct solution. Further stochastic schemes for distributed ray tracing have been discussed in other works <ref> [56, 57, 58, 59] </ref>. 4.3 Cone Tracing Amanatides [60] extends the concept of a ray to a cone. Instead of point sampling as in previous approaches, cone tracing does area sampling. Exactly one conic ray needs to be shot per pixel to achieve anti-aliasing.
Reference: [57] <author> M. Lee, R. Redner, S. </author> <title> Uselton "Statistically Optimized Sampling for Distributed Ray Tracing", </title> <journal> Computer Graphics, </journal> <volume> 19(3), </volume> <month> July </month> <year> 1985, </year> <pages> pp. 61-67. </pages>
Reference-contexts: However, it is a point sampling approach, which may not always provide good approximations to the correct solution. Further stochastic schemes for distributed ray tracing have been discussed in other works <ref> [56, 57, 58, 59] </ref>. 4.3 Cone Tracing Amanatides [60] extends the concept of a ray to a cone. Instead of point sampling as in previous approaches, cone tracing does area sampling. Exactly one conic ray needs to be shot per pixel to achieve anti-aliasing. <p> But this is not the correct answer for transparent objects because the shadowing function is wavelength dependent, and refraction of incoming light is not taken into account. Hall and Greenberg [65] (and similarly with the images generated in work by Lee et al. <ref> [57] </ref>) deal with the display of coloured transparent objects using the spectrum absorption model, which accounts for scattering of refracted light sources in ray tracing. They do not explicitly mention the shadowing effects of transparent objects.
Reference: [58] <author> R. Cook, </author> <title> "Stochastic Sampling in Computer Graphics", </title> <journal> ACM Transactions On Graphics, </journal> <volume> 5(1), </volume> <month> January </month> <year> 1985, </year> <pages> pp. 51-72. </pages>
Reference-contexts: However, it is a point sampling approach, which may not always provide good approximations to the correct solution. Further stochastic schemes for distributed ray tracing have been discussed in other works <ref> [56, 57, 58, 59] </ref>. 4.3 Cone Tracing Amanatides [60] extends the concept of a ray to a cone. Instead of point sampling as in previous approaches, cone tracing does area sampling. Exactly one conic ray needs to be shot per pixel to achieve anti-aliasing.
Reference: [59] <author> C. Bouville, J. Dubois, I. Marchal, M. Viaud, </author> <title> "Monte-Carlo Integration Applied to an Illumination Model", </title> <type> EuroGraphics 88, </type> <month> August </month> <year> 1988, </year> <pages> pp. 483-498. </pages>
Reference-contexts: However, it is a point sampling approach, which may not always provide good approximations to the correct solution. Further stochastic schemes for distributed ray tracing have been discussed in other works <ref> [56, 57, 58, 59] </ref>. 4.3 Cone Tracing Amanatides [60] extends the concept of a ray to a cone. Instead of point sampling as in previous approaches, cone tracing does area sampling. Exactly one conic ray needs to be shot per pixel to achieve anti-aliasing.
Reference: [60] <author> J. Amanatides, </author> <title> "Ray Tracing with Cones", </title> <journal> Computer Graphics, </journal> <volume> 18(3), </volume> <month> July </month> <year> 1984, </year> <pages> pp. 129-135. </pages>
Reference-contexts: However, it is a point sampling approach, which may not always provide good approximations to the correct solution. Further stochastic schemes for distributed ray tracing have been discussed in other works [56, 57, 58, 59]. 4.3 Cone Tracing Amanatides <ref> [60] </ref> extends the concept of a ray to a cone. Instead of point sampling as in previous approaches, cone tracing does area sampling. Exactly one conic ray needs to be shot per pixel to achieve anti-aliasing.
Reference: [61] <author> C. Goral, K. Torrence, D. Greenberg, </author> <title> "Modelling the Interaction of Light Between Diffuse Surfaces", </title> <journal> Computer Graphics, </journal> <volume> 18(3), </volume> <month> July </month> <year> 1984, </year> <pages> pp. 213-222. </pages>
Reference-contexts: As well, this can also result in poor approximations since the surface orientations are not taken into account. 4.6 Radiosity Another method of computing soft shadows comes from the calculation of radiosity <ref> [61] </ref>. This class of algorithms is capable of calculating diffuse inter-reflections between surfaces by determining an equilibrium energy balance within an enclosure.
Reference: [62] <author> A. Campbell, D. Fussell, </author> <title> "Adaptive Mesh Generation for Global Diffuse Illumination", </title> <journal> Computer Graphics, </journal> <volume> 24(4), </volume> <month> August </month> <year> 1990, </year> <pages> pp. 155-164. 23 </pages>
Reference-contexts: One exception is the use of ray tracing to replace the hemi-cube approximations [63], but it tends to be much more expensive though more accurate in shadowing effects. Another exception is the work done by Campbell and Fussell <ref> [62] </ref>. They adaptively subdivide the scene along the shadow boundaries in a progressive refinement scheme. A light emitter is subdivided until each element can be treated as a point light source.
Reference: [63] <author> J. Wallace, K. Elmquist, E. Haines, </author> <title> "A Ray Tracing Algorithm for Progressive Radiosity", </title> <journal> Computer Graphics, </journal> <volume> 23(3), </volume> <month> July </month> <year> 1989, </year> <pages> pp. 315-324. </pages>
Reference-contexts: Which method provides more accurate results is unknown. 4.6.4 Other Radiosity Approaches There are many other papers on radiosity, which will not be listed since most do not address specifically shadow determination. One exception is the use of ray tracing to replace the hemi-cube approximations <ref> [63] </ref>, but it tends to be much more expensive though more accurate in shadowing effects. Another exception is the work done by Campbell and Fussell [62]. They adaptively subdivide the scene along the shadow boundaries in a progressive refinement scheme.
Reference: [64] <author> T. Nishita, E. Nakamae, </author> <title> "Continuous Tone Representation of Three-Dimensional Objects Illuminated by Sky Light", </title> <journal> Computer Graphics, </journal> <volume> 20(4), </volume> <month> August </month> <year> 1986, </year> <pages> pp. 125-132. </pages>
Reference-contexts: It should be kept in mind that P can be large and that k can be O (n) for a large number of strongly emitting or reemitting polygons. The above complexity is only for the storage and processing is even larger. 4.7 Skylight Illumination Nishita and Nakamae <ref> [64] </ref> add the contribution of skylight to soft shadows. For each point to be shaded, an hemisphere representing the sky is generated and band sources are defined longitudinally on this hemisphere.
Reference: [65] <author> R. Hall, D. Greenberg, </author> <title> "A Testbed for Realistic Image Synthesis", </title> <journal> IEEE CG&A, </journal> <volume> 3(8), </volume> <month> November </month> <year> 1983, </year> <pages> pp. 10-20. </pages>
Reference-contexts: But this is not the correct answer for transparent objects because the shadowing function is wavelength dependent, and refraction of incoming light is not taken into account. Hall and Greenberg <ref> [65] </ref> (and similarly with the images generated in work by Lee et al. [57]) deal with the display of coloured transparent objects using the spectrum absorption model, which accounts for scattering of refracted light sources in ray tracing. They do not explicitly mention the shadowing effects of transparent objects.
Reference: [66] <author> A. Pearce, </author> <title> "Shadow Attenuation for Ray Tracing Transparent Objects" in Graphics Gems, </title> <editor> ed. A. Glassner, </editor> <publisher> Academic Press, </publisher> <month> August </month> <year> 1990, </year> <month> pp.397-399. </month>
Reference-contexts: The Fresnel reflectance is considered at the intersection of the ray with the surface to decide the percentage that is reflected and refracted into the object. A simple trick to simulate the light attenuation from the shadow of transparent objects is described by Pearce <ref> [66] </ref>.
Reference: [67] <author> J. Arvo, </author> <title> "Backward Ray Tracing", Tutorial Notes on the Developments in Ray Tracing, </title> <type> SIGGRAPH 86, </type> <month> August </month> <year> 1986. </year>
Reference-contexts: This general approach should theoretically deal with diffuse inter-reflections and generate concentration and diffusion of light as well. This approach is similar to the backward ray tracing approach proposed by Arvo <ref> [67] </ref> (assuming only point light sources). Stochastically chosen rays are shot from the light sources as a preprocessing step, and the amount of light that reaches the surfaces is recorded via a texture map storage scheme.
Reference: [68] <author> G. Ward, R. Rubinstein, R. </author> <title> Clear, "A Ray Tracing Solution for Diffuse Interreflection", </title> <journal> Computer Graphics, </journal> <volume> 22(4), </volume> <month> August </month> <year> 1988, </year> <pages> pp. 85-92. </pages>
Reference-contexts: By shooting rays from the light, an very large set of rays needs to be shot in all directions in order to accurately account for diffuse inter-reflections. The approach by Arvo, and similarly in some others <ref> [68, 69, 70] </ref>, require a great deal of storage and processing. In addition, the generated images usually exhibits aliasing and sparkle-like artifacts due to the insufficiency of the sampling done.
Reference: [69] <author> P. Shirley, </author> <title> "A Ray Tracing Method for Illumination Calculation in Diffuse-Specular Scenes", </title> <booktitle> Graphics Interface 90, </booktitle> <month> May </month> <year> 1990, </year> <pages> pp. 205-212. </pages>
Reference-contexts: By shooting rays from the light, an very large set of rays needs to be shot in all directions in order to accurately account for diffuse inter-reflections. The approach by Arvo, and similarly in some others <ref> [68, 69, 70] </ref>, require a great deal of storage and processing. In addition, the generated images usually exhibits aliasing and sparkle-like artifacts due to the insufficiency of the sampling done.
Reference: [70] <author> P. Heckbert, </author> <title> "Adaptive Radiosity Textures for Bidirectional Ray Tracing", </title> <journal> Computer Graphics, </journal> <volume> 24(4), </volume> <month> August </month> <year> 1990, </year> <pages> pp. 145-154. </pages>
Reference-contexts: By shooting rays from the light, an very large set of rays needs to be shot in all directions in order to accurately account for diffuse inter-reflections. The approach by Arvo, and similarly in some others <ref> [68, 69, 70] </ref>, require a great deal of storage and processing. In addition, the generated images usually exhibits aliasing and sparkle-like artifacts due to the insufficiency of the sampling done.
Reference: [71] <author> M. Watt, </author> <title> "Light-Water Interaction Using Backward Beam Tracing", </title> <journal> Computer Graphics, </journal> <volume> 24(4), </volume> <month> August </month> <year> 1990, </year> <pages> pp. 377-385. </pages>
Reference-contexts: The approach by Arvo, and similarly in some others [68, 69, 70], require a great deal of storage and processing. In addition, the generated images usually exhibits aliasing and sparkle-like artifacts due to the insufficiency of the sampling done. Watt <ref> [71] </ref> uses a technique similar to beam tracing from the light, but the concentration of light in the resulting images betray their polygonal origin. 5.3 Cone of Convergence The concentration of light passing through a convex lens is modeled by Inakage [72] using ray tracing.
Reference: [72] <author> M. Inakage, </author> <title> "Caustics and Specular Reflection Models for Spherical Objects and Lens", </title> <journal> The Visual Computer, </journal> <volume> 2(6), </volume> <month> February </month> <year> 1986, </year> <pages> pp. 279-383. </pages>
Reference-contexts: Watt [71] uses a technique similar to beam tracing from the light, but the concentration of light in the resulting images betray their polygonal origin. 5.3 Cone of Convergence The concentration of light passing through a convex lens is modeled by Inakage <ref> [72] </ref> using ray tracing. Inakage illustrates a limited effect where a spherical lens projects a shadow with a concentration of light within the shadow area.
Reference: [73] <author> M. Shinya, T. Takahashi, S. Naito, </author> <title> "Principles and Applications of Pencil Tracing", </title> <journal> Computer Graphics, </journal> <volume> 21(4), </volume> <month> July </month> <year> 1987, </year> <pages> pp. 45-54. </pages>
Reference-contexts: Paraxial approximation theory, presented in the next section, deals more effectively with the generation of caustics. 5.4 Pencil Tracing Another method handling transparency, concentration and diffusion of light is proposed by Shinya et al. <ref> [73] </ref>, where they apply fundamentals of paraxial approximation theory. A pencil is defined by the axial ray surrounded by nearby paraxial rays. Pencil tracing is basically an intermediary between cone tracing and ray tracing. Ray tracing traces lines so that only point sampled information can be gathered.
Reference: [74] <author> M. Shinya, T. Saito, T. Takahashi, </author> <title> "Rendering Techniques for Transparent Objects", </title> <booktitle> Graphics Interface 89, </booktitle> <month> June </month> <year> 1989, </year> <pages> pp. 173-182. </pages>
Reference-contexts: This processing requires shadow rendering complexity of O (QEn), where Q stands for the average number of pencils shot from the light source to each transparent object. An extension of the approach including wavelength dependency is proposed in <ref> [74] </ref>. 14 5.5 The Rendering Equation and Path Tracing Kajiya [75] proposes an approximation to the rendering equation which uses ray tracing. It is named path tracing and only traces certain secondary rays for computational speedup.
Reference: [75] <author> J. Kajiya, </author> <title> "The Rendering Equation", </title> <journal> Computer Graphics, </journal> <volume> 20(4), </volume> <month> August </month> <year> 1986, </year> <pages> pp. 143-150. </pages>
Reference-contexts: This processing requires shadow rendering complexity of O (QEn), where Q stands for the average number of pencils shot from the light source to each transparent object. An extension of the approach including wavelength dependency is proposed in [74]. 14 5.5 The Rendering Equation and Path Tracing Kajiya <ref> [75] </ref> proposes an approximation to the rendering equation which uses ray tracing. It is named path tracing and only traces certain secondary rays for computational speedup. The rays traced must maintain the correct proportion of secondary ray types contributing to each pixel.
Reference: [76] <author> A. Fournier, E. Fiume, M. Ouellette, C. Chee, "FIAT LUX: </author> <title> Light Driven Global Illumination", DGP Technical Memo DGP89-1, Dynamic Graphics Project, </title> <institution> University of Toronto, </institution> <year> 1989. </year>
Reference-contexts: These ray types include reflection, inter-reflection, refraction, shadow, where inter-reflection rays are shot stochastically into the environment. However, choosing only certain secondary rays may conceivably result in erroneous shadows and undesirable light effects. 5.6 Light Driven Global Illumination FIAT <ref> [76] </ref> is proposed as a light-driven approach to global illumination (for both the specular and diffuse components). Inter-reflections, inter-refractions, shadows, concentration and diffusion of light can be handled by balancing the power of regions of space.
Reference: [77] <author> J. </author> <title> Blinn, "A Generalization of Algebraic Surface Drawing", </title> <journal> ACM Transactions On Graphics, </journal> <volume> 1(3), </volume> <month> July </month> <year> 1982, </year> <pages> pp. 235-256. </pages>
Reference-contexts: This section is by no means thorough. Only brief descriptions of a small number of approaches are presented to give an insight into the difficulties encountered. There are various methods to evaluate implicit surfaces directly. As an example, Blinn <ref> [77] </ref> uses a combination of Newton's iteration and regula falsi to render algebraic surfaces. However, convergence to a proper solution cannot be guaranteed unless an accurate start point can be generated, and divergence can be seen as holes in the visible surface and shadows.
Reference: [78] <author> P. Hanrahan, </author> <title> "Ray Tracing Algebraic Surfaces", </title> <journal> Computer Graphics, </journal> <volume> 17(3), </volume> <month> July </month> <year> 1983, </year> <pages> pp. 83-89. </pages>
Reference-contexts: As an example, Blinn [77] uses a combination of Newton's iteration and regula falsi to render algebraic surfaces. However, convergence to a proper solution cannot be guaranteed unless an accurate start point can be generated, and divergence can be seen as holes in the visible surface and shadows. Hanrahan <ref> [78] </ref> derives analytic solutions for low order polynomial surfaces, but not general enough to handle other formulations. Two recent works have used interval analysis to guarantee correct intersection results for certain classes of implicit surfaces [79, 80]. which also improves shadow determination. Rendering parametric patches can be just as difficult.
Reference: [79] <author> D. Kalra, A. Barr, </author> <title> "Guaranteed Ray Intersection with Implicit Surfaces", </title> <journal> Computer Graphics, </journal> <volume> 22(4), </volume> <month> July </month> <year> 1989, </year> <pages> pp. 297-306. </pages>
Reference-contexts: Hanrahan [78] derives analytic solutions for low order polynomial surfaces, but not general enough to handle other formulations. Two recent works have used interval analysis to guarantee correct intersection results for certain classes of implicit surfaces <ref> [79, 80] </ref>. which also improves shadow determination. Rendering parametric patches can be just as difficult. Kajiya [81] ray traces parametric bicubic patches by combining two sets of equations into an 18th degree polynomial. In his original paper, Kajiya used Laguerre's root finding algorithm, and the overall performance was rather poor.
Reference: [80] <author> D. Mitchell, </author> <title> "Robust Ray Intersection with Interval Arithmetic", </title> <booktitle> Graphics Interface 90, </booktitle> <month> May </month> <year> 1990, </year> <pages> pp. 68-74. </pages>
Reference-contexts: Hanrahan [78] derives analytic solutions for low order polynomial surfaces, but not general enough to handle other formulations. Two recent works have used interval analysis to guarantee correct intersection results for certain classes of implicit surfaces <ref> [79, 80] </ref>. which also improves shadow determination. Rendering parametric patches can be just as difficult. Kajiya [81] ray traces parametric bicubic patches by combining two sets of equations into an 18th degree polynomial. In his original paper, Kajiya used Laguerre's root finding algorithm, and the overall performance was rather poor.
Reference: [81] <author> J. Kajiya, </author> <title> "Ray Tracing Parametric Patches", </title> <journal> Computer Graphics, </journal> <volume> 16(3), </volume> <month> July </month> <year> 1982, </year> <pages> pp. 245-254. </pages>
Reference-contexts: Two recent works have used interval analysis to guarantee correct intersection results for certain classes of implicit surfaces [79, 80]. which also improves shadow determination. Rendering parametric patches can be just as difficult. Kajiya <ref> [81] </ref> ray traces parametric bicubic patches by combining two sets of equations into an 18th degree polynomial. In his original paper, Kajiya used Laguerre's root finding algorithm, and the overall performance was rather poor.
Reference: [82] <author> T. Nishita, T. Sederberg, M. Kakimoto, </author> <title> "Ray Tracing Trimmed Rational Surface Patches" Computer Graphics, </title> <type> 24(4), </type> <month> August </month> <year> 1990, </year> <pages> pp. 337-345. </pages>
Reference-contexts: In his original paper, Kajiya used Laguerre's root finding algorithm, and the overall performance was rather poor. The method, however can be improved by a faster root finder, and made a little more competitive <ref> [82] </ref>. Sweeney and Bartels [83] uses a multivariate Newton's method to calculate roots, but it tends to be numerically unstable. This method does not converge if the ray is perpendicular to the surface normal at the intersection point (since the Jacobian of the functions is needed).
Reference: [83] <author> M. Sweeney, R. Bartels, </author> <title> "Ray Tracing Free-Form B-Spline Surfaces", </title> <journal> IEEE CG&A, </journal> <volume> 6(2), </volume> <month> February </month> <year> 1986, </year> <pages> pp. 41-49. </pages>
Reference-contexts: In his original paper, Kajiya used Laguerre's root finding algorithm, and the overall performance was rather poor. The method, however can be improved by a faster root finder, and made a little more competitive [82]. Sweeney and Bartels <ref> [83] </ref> uses a multivariate Newton's method to calculate roots, but it tends to be numerically unstable. This method does not converge if the ray is perpendicular to the surface normal at the intersection point (since the Jacobian of the functions is needed).
Reference: [84] <author> D. Toth, </author> <title> "On Ray Tracing Parametric Surfaces", </title> <journal> Computer Graphics, </journal> <volume> 19(3), </volume> <month> July </month> <year> 1985, </year> <pages> pp. 171-179. </pages>
Reference-contexts: This method does not converge if the ray is perpendicular to the surface normal at the intersection point (since the Jacobian of the functions is needed). This problem can be seen at the silhouette of the shadow. Toth <ref> [84] </ref> uses interval arithmetic to arrive at suitable roots. This tends to be more stable than most other methods, but is quite slow (except compared to Kajiya's method).
Reference: [85] <author> A. Fournier, J. Buchanan, </author> <title> "Chebyshev Polynomials for Boxing and Intersections of Parametric Curves and Surfaces", </title> <type> Technical Memo Imager90-1, </type> <institution> Imager, University of British Columbia, </institution> <year> 1990. </year> <month> 24 </month>
Reference-contexts: This problem can be seen at the silhouette of the shadow. Toth [84] uses interval arithmetic to arrive at suitable roots. This tends to be more stable than most other methods, but is quite slow (except compared to Kajiya's method). Fournier and Buchanan <ref> [85] </ref> use the properties of Chebyshev polynomials as bases both to get improved boxing and to get better criteria to stop the subdivision.
Reference: [86] <author> N. Max, </author> <title> "Smooth Appearance for Polygonal Surfaces", </title> <journal> The Visual Computer, </journal> <volume> vol. 4, </volume> <year> 1989, </year> <pages> pp. 160-173. </pages>
Reference-contexts: Snyder and Barr [37] propose an improvement by subdividing more at the silhouette of the surface (a function of the light source position) to reduce this artifact with some success. But with multiple light sources, there is the danger of severe surface subdivision. Max <ref> [86] </ref> also attempts to smooth polygonal silhouettes as well as shadows from polygonal edges. Another problem with polygonization is the terminator problem, where shadow determination is wrong due to the polygonal approximation.
Reference: [87] <author> J. </author> <title> Blinn, "Simulation of Wrinkled Surfaces", </title> <journal> Computer Graphics, </journal> <volume> 12(3), </volume> <month> August </month> <year> 1978, </year> <pages> pp. 286-292. </pages>
Reference-contexts: For some texture mapping, the aim is to give the appearance of a bumpy surface. One example is bump mapping <ref> [87] </ref>, where the surface normal is perturbed to make the surface appear bumpy, without altering the surface itself. However, two problems arise with shadows using bump mapping: the shadow cast on the surface by other surfaces, and the shadow from bumps onto other surfaces and on itself.
Reference: [88] <author> N. Max, </author> <title> "Horizon Mapping: Shadows for Bump-Mapped Surfaces", </title> <journal> The Visual Computer, </journal> <volume> vol. 4, </volume> <year> 1988, </year> <pages> pp. 109-117. </pages>
Reference-contexts: No good solutions have yet been proposed. 6.2.2 Self-Shadowing of Bumpy Surfaces In displacement mapping, instead of the surface normal, the height of the surface is modified. For each point on a surface, there corresponds a height value by which this point would be raised on the surface. Max <ref> [88] </ref> approximates the shadows cast by these bumps on the same surface by introducing horizon mapping. <p> In the case of simple distributions of facets, the attenuation factor can be computed analytically. For instance, Poulin and Fournier [91] compute the self-shadowing caused by adjacent cylinders simulating an anisotropic surface (illustrated in 15). Cabral et al. [92] use an approach similar to Max <ref> [88] </ref> in order to compute a bidirectional reflection map from a height field applied to the facets distribution. 7 Shadows for Particle Based Objects In order to render realistic images from nature, the modeling of scenes would require a tremendous amount of work just to specify the scene description.
Reference: [89] <author> K. Torrance, E. </author> <title> Sparrow, "Theory for Off-Specular Reflection from Roughened Surfaces", </title> <journal> J.Opt.Soc.Am., </journal> <volume> 57(9), </volume> <year> 1967. </year>
Reference-contexts: However, the reflection of light behaves differently and this should be captured by the local reflection model. In a reflection model proposed by Torrance-Sparrow <ref> [89, 90] </ref>, the surface bumps are represented by a collection of mirror-like facets randomly oriented. Assuming that the facets are in form of V-shaped grooves, the self-shadowing effect on them can be approximated. However, for many types of surfaces, the facets are oriented with preferred orientations.
Reference: [90] <author> J. </author> <title> Blinn, "Models of Light Reflection for Computer Synthesized Pictures", </title> <journal> Computer Graphics, </journal> <volume> 11(2), </volume> <month> July </month> <year> 1977, </year> <pages> pp. 192-198. </pages>
Reference-contexts: However, the reflection of light behaves differently and this should be captured by the local reflection model. In a reflection model proposed by Torrance-Sparrow <ref> [89, 90] </ref>, the surface bumps are represented by a collection of mirror-like facets randomly oriented. Assuming that the facets are in form of V-shaped grooves, the self-shadowing effect on them can be approximated. However, for many types of surfaces, the facets are oriented with preferred orientations.
Reference: [91] <author> P. Poulin, A. Fournier, </author> <title> "A Model for Anisotropic Reflection", </title> <journal> Computer Graphics, </journal> <volume> 24(4), </volume> <month> August </month> <year> 1990, </year> <pages> pp. 273-282. </pages>
Reference-contexts: In the case of simple distributions of facets, the attenuation factor can be computed analytically. For instance, Poulin and Fournier <ref> [91] </ref> compute the self-shadowing caused by adjacent cylinders simulating an anisotropic surface (illustrated in 15).
Reference: [92] <author> B. Cabral, N. Max, R. Springmeyer, </author> <title> "Bidirectional Reflection Functions from Surface Bump Maps", </title> <journal> Computer Graphics, </journal> <volume> 21(4), </volume> <month> July </month> <year> 1987, </year> <pages> pp. 273-282. </pages>
Reference-contexts: In the case of simple distributions of facets, the attenuation factor can be computed analytically. For instance, Poulin and Fournier [91] compute the self-shadowing caused by adjacent cylinders simulating an anisotropic surface (illustrated in 15). Cabral et al. <ref> [92] </ref> use an approach similar to Max [88] in order to compute a bidirectional reflection map from a height field applied to the facets distribution. 7 Shadows for Particle Based Objects In order to render realistic images from nature, the modeling of scenes would require a tremendous amount of work just
Reference: [93] <author> W. Reeves, </author> <title> "Particle Systems ATechnique for Modeling a Class of Fuzzy Objects", </title> <journal> ACM Transactions On Graphics, </journal> <volume> 2(2), </volume> <month> April </month> <year> 1983, </year> <pages> pp. 359-376. </pages>
Reference-contexts: Systems have been developed to transform procedurally and stochastically a small set of simple constraints into a complete description of very complex objects (e.g. fire <ref> [93, 94] </ref>, trees and grass [23]). A simple graphics primitive, the particle, is used to create this complexity. Such systems introduce new dimensions to the shadowing problem. Scenes composed of millions of particles become a formidable task to shade exactly.
Reference: [94] <author> K. Sims, </author> <title> "Particle Animation and Rendering Using Data Parallel Computation", </title> <journal> Computer Graphics, </journal> <volume> 24(4), </volume> <month> August </month> <year> 1990, </year> <pages> pp. 405-413. </pages>
Reference-contexts: Systems have been developed to transform procedurally and stochastically a small set of simple constraints into a complete description of very complex objects (e.g. fire <ref> [93, 94] </ref>, trees and grass [23]). A simple graphics primitive, the particle, is used to create this complexity. Such systems introduce new dimensions to the shadowing problem. Scenes composed of millions of particles become a formidable task to shade exactly.
Reference: [95] <author> J. </author> <title> Blinn, "Light Reflection Functions for Simulation of Clouds and Dusty Surfaces", </title> <journal> Computer Graphics, </journal> <volume> 16(3), </volume> <month> July </month> <year> 1982, </year> <pages> pp. 21-29. </pages>
Reference-contexts: The reality about shadowing particle systems is that for each system, the shadowing must be determined stochastically, but in close relation with the modeling process of the particles. Thus, to some extent, each particle system must have its own shadowing determination algorithm. 7.2 Volume Densities Blinn <ref> [95] </ref> simulates the interaction of light with clouds (and dusty surfaces) by using statistical simulation of light passing through and reflected by clouds composed of small particles, considering only single scattering. The shadowing is a result of blockage of light from other particles. <p> Max [13] models atmospheric illumination assuming a volume density model that is the same as Blinn's <ref> [95] </ref>: low albedo (reflective power) and single scattering. Thus an analytic solution for the scattered energy at each point is possible. Computation of scattered energy requires information about the portions of the viewing ray that is shadowed an extended shadow polygon approach [1] is used here.
Reference: [96] <author> J. Kajiya, B. Von Herzen, </author> <title> "Ray Tracing Volume Densities", </title> <journal> Computer Graphics, </journal> <volume> 18(3), </volume> <month> July </month> <year> 1984, </year> <pages> pp. 165-174. </pages>
Reference-contexts: Thus an analytic solution to shadow determination is available. Kajiya and Von Herzen <ref> [96] </ref> propose a more general model and apply it to ray tracing. Their single scattering model is similar to Blinn's. As a preprocessing step, a 3D grid of voxels is created.
Reference: [97] <author> D. Ebert, R. Parent, </author> <title> "Rendering and Animation of Gaseous Phenomena by Combining Fast Volume and Scanline A-buffer Techniques", </title> <journal> Computer Graphics, </journal> <volume> 24(4), </volume> <month> August </month> <year> 1990, </year> <pages> pp. 357-366. </pages>
Reference-contexts: If the ray is partially illuminated, then the illumination value is also a function of the scattered energy reaching the illuminated portion of the ray. Efficient implementations of this approach using regular grid subdivisions are described in <ref> [17, 97] </ref>, and more 19 general models of density distribution can be seen in the work by Nishita et al. [98] and Ebert and Parent [97]. Rushmeier and Torrance [99] apply the zonal method used in heat transfer to the computation of the radiosity. <p> Efficient implementations of this approach using regular grid subdivisions are described in [17, 97], and more 19 general models of density distribution can be seen in the work by Nishita et al. [98] and Ebert and Parent <ref> [97] </ref>. Rushmeier and Torrance [99] apply the zonal method used in heat transfer to the computation of the radiosity. The medium is discretized into small volumes for which the form factors volume/volume and volume/surface are calculated.
Reference: [98] <author> T. Nishita, Y. Miyawaki, E. Nakamae, </author> <title> "A Shading Model for Atmospheric Scattering Considering Luminous Intensity Distribution of Light Sources", </title> <journal> Computer Graphics, </journal> <volume> 21(4), </volume> <month> July </month> <year> 1987, </year> <pages> pp. 303-310. </pages>
Reference-contexts: Efficient implementations of this approach using regular grid subdivisions are described in [17, 97], and more 19 general models of density distribution can be seen in the work by Nishita et al. <ref> [98] </ref> and Ebert and Parent [97]. Rushmeier and Torrance [99] apply the zonal method used in heat transfer to the computation of the radiosity. The medium is discretized into small volumes for which the form factors volume/volume and volume/surface are calculated.
Reference: [99] <author> H. Rushmeier, K. Torrance, </author> <title> "The Zonal Method for Calculating Light Intensities in the Presence of a Participating Medium", </title> <journal> Computer Graphics, </journal> <volume> 21(4), </volume> <month> July </month> <year> 1987, </year> <pages> pp. 293-302. </pages>
Reference-contexts: Efficient implementations of this approach using regular grid subdivisions are described in [17, 97], and more 19 general models of density distribution can be seen in the work by Nishita et al. [98] and Ebert and Parent [97]. Rushmeier and Torrance <ref> [99] </ref> apply the zonal method used in heat transfer to the computation of the radiosity. The medium is discretized into small volumes for which the form factors volume/volume and volume/surface are calculated. The shadows are generated with the hemi-cube (described earlier in section 4.6.1) extended to a full cube.
Reference: [100] <author> W. Seales, C. Dyer, </author> <title> "Shaded Rendering and Shadow Computation for Polyhedral Animation", </title> <booktitle> Graphics Interface 90, </booktitle> <month> May </month> <year> 1990, </year> <pages> pp. 175-182. </pages>
Reference-contexts: Optimization of shadow determination for certain animations are discussed in some other works <ref> [32, 100, 101] </ref>. We hope this survey will help cast an even larger shadow on computer graphics. 20 9 Acknowledgements We would like to thank Mikio Shinya (of NTT) and Marie-Claire Forgue (of INRIA) for carefully reading an early draft of our paper, and suggesting some improvements.

References-found: 100

