URL: ftp://ftp.cs.man.ac.uk/pub/hardware-verification/AHV-PROJECT/ukforum96-paper.ps.gz
Refering-URL: http://www.cs.man.ac.uk/fmethods/projects/AHV-PROJECT/node19.html
Root-URL: http://www.cs.man.ac.uk
Email: email: rainbow@cs.man.ac.uk  
Title: Abstract of Talk for UK Asynchronous Forum, 1996 Multi-View Design of Asynchronous Micropipeline Systems using Rainbow  
Author: Howard Barringer, Donal Fellows, Graham Gough, Pete Jinks, Brian Marsden, Alan Williams 
Web: URL: http://www.cs.man.ac.uk/fmethods/projects/AHV-PROJECT/ahv-project.html  
Address: Manchester, UK  
Affiliation: Department of Computer Science, University of  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> I. Sutherland. </author> <title> Micropipelines. </title> <journal> Communications of the ACM, </journal> <volume> 32(6), </volume> <month> June </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Sutherland's Micropipeline method <ref> [1] </ref> for designing asynchronous hardware systems has been used successfully for the development of commercial-scale devices, including asynchronous versions of the ARM processor in the AMULET Project [2].
Reference: [2] <author> N. Paver. </author> <title> The Design and Implementation of an Asynchronous Microprocessor. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Manchester, </institution> <year> 1994. </year>
Reference-contexts: 1 Introduction Sutherland's Micropipeline method [1] for designing asynchronous hardware systems has been used successfully for the development of commercial-scale devices, including asynchronous versions of the ARM processor in the AMULET Project <ref> [2] </ref>. However, the perceived benefits of asynchronous design the production of high-speed and low-power systems have so far been difficult to realise due to the relative lack of design representations and associated tools specialised to asynchronous micropipeline hardware. <p> Figure 2 shows the basic top-level block structure of SMPU described in Visual Green, a style similar to that used in informal descriptions given in design documentation, such as for AMULET1 <ref> [2] </ref>. The functionality of each block is then described in the most appropriate style.
Reference: [3] <author> K. van Berkel. </author> <title> Handshake Circuits: an Intermediary between Communicating Processes and VLSI. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1992. </year>
Reference-contexts: However, the perceived benefits of asynchronous design the production of high-speed and low-power systems have so far been difficult to realise due to the relative lack of design representations and associated tools specialised to asynchronous micropipeline hardware. Certain design methods, such as Philip's Tangram system <ref> [3] </ref>, are equipped with description languages. However, specialised design languages have not yet emerged for micropipelines, especially for higher-level abstract descriptions. In addition to suitable languages, designers also require accompanying simulation tools for early (high-level) experimentation, without having to complete much detailed gate-level implementation.
Reference: [4] <author> Ying Liu. AMULET1: </author> <title> Specification and Verification in CCS. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Calgary, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: Current application of formally based models usually is limited to capturing the request/acknowledge control signalling between micropipeline components. This has been used with some success for building CCS models of the AMULET1 processor <ref> [4] </ref>. 1.1 The Rainbow Approach To address these problems, we are currently developing Rainbow, a wide spectrum hardware design language, for multi-view description of micropipeline designs. This enables a single design to be described in a variety of ways, using the style most appropriate for each component in the design. <p> Green: to support hierarchical structural descriptions based on micropipeline primitives. It has schematic and textual versions. Blue: to operate at a level below Green, exposing the handshaking control, similar to the CCS models of AMULET described in <ref> [4] </ref>. Simulate Analyse Verify APA Design Entry types value expressions Hardware Models Internal Representation Underlying Semantic Model Tools User Languages handshake algorithmic control-flow properties specification Yellow: Red: Blue: Green: structural data-flow compile visualise a combination of the sub-languages, indicated by the intersecting ovals.
Reference: [5] <author> Manfred Broy, Frank Dederich, Claus Dendorfer, and Max Fuchs. </author> <title> The Design of Distributed Systems An Introduction to FOCUS. </title> <type> Technical Report TUM-19202, </type> <institution> Institut fur Informatik, Technis-che Universitat Munchen, </institution> <year> 1992. </year>
Reference-contexts: This includes a dataflow-style language based on micropipeline communication for structural descriptions, and a control-flow style language for algorithmic descriptions, using Ada-like rendezvous communication. Ultimately, the framework will contain at least the following sub-languages: Red: to support behavioural/specification descriptions using, for example, temporal logic or stream transformers <ref> [5] </ref>. Yellow: to describe designs using a control flow style with Ada-like rendezvous communication [6, 7] between components. Green: to support hierarchical structural descriptions based on micropipeline primitives. It has schematic and textual versions.
Reference: [6] <author> Wei Li. </author> <title> An Operational Semantics of Tasking and Exception Handling in Ada. </title> <type> Technical Report CSR-99-82, </type> <institution> University of Edinburgh, </institution> <month> Jan-uary </month> <year> 1982. </year>
Reference-contexts: Ultimately, the framework will contain at least the following sub-languages: Red: to support behavioural/specification descriptions using, for example, temporal logic or stream transformers [5]. Yellow: to describe designs using a control flow style with Ada-like rendezvous communication <ref> [6, 7] </ref> between components. Green: to support hierarchical structural descriptions based on micropipeline primitives. It has schematic and textual versions. Blue: to operate at a level below Green, exposing the handshaking control, similar to the CCS models of AMULET described in [4]. <p> Its semantics is defined operationally with a set of SOS-style transition rules [11]. However, the composition operators have been designed to support bundled-data micropipeline communication the communication primitives involved use an Ada-like rendezvous, and their semantics resembles the Ada semantics presented in <ref> [6] </ref>. APA also supports value-passing and has richly-structured actions.
Reference: [7] <author> I. Sommerville and R. Morrison. </author> <title> Software Development with Ada. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: Ultimately, the framework will contain at least the following sub-languages: Red: to support behavioural/specification descriptions using, for example, temporal logic or stream transformers [5]. Yellow: to describe designs using a control flow style with Ada-like rendezvous communication <ref> [6, 7] </ref> between components. Green: to support hierarchical structural descriptions based on micropipeline primitives. It has schematic and textual versions. Blue: to operate at a level below Green, exposing the handshaking control, similar to the CCS models of AMULET described in [4]. <p> described textually or as schematics (directed graphs); the latter gives the opportunity for design animation during simulation. 2.2 Yellow In contrast to the static structural description style offered by Green, Yellow allows evolving descriptions to be constructed, using a control-flow style, similar in many respects to CSP [9] or Ada <ref> [7] </ref>. The (explicit) call/accept communication primitives used are adaptations of the Ada rendezvous. There are standard imperative sequence and register assignment operators. A choice construct provides the means for switching control conditionally between different code fragments. A conditional loop statement provides iteration.
Reference: [8] <author> J. Herath, Y. Yamaguchi, K. Toda, R. Mattin-gley, N. Saito, and T. Yuba. </author> <title> Comparison of Dataflow Computing Models. </title> <editor> In John A. Sharp, editor, </editor> <booktitle> Data Flow Computing: Theory and Practice, </booktitle> <pages> pages 1634. </pages> <publisher> Ablex, </publisher> <year> 1992. </year>
Reference-contexts: The internal APA representation will provide the basis for formal analysis and simulation tools, the results of which can be visualised via annotation of the design descriptions. 2.1 Green Green is a static dataflow language <ref> [8] </ref>, using explicit buffering between elements, that models mi-cropipeline communication, i.e. before an element can fire all of the required input values for a given (stateless) element must be present, and the outputs must be ready to accept the values generated.
Reference: [9] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference-contexts: networks can be described textually or as schematics (directed graphs); the latter gives the opportunity for design animation during simulation. 2.2 Yellow In contrast to the static structural description style offered by Green, Yellow allows evolving descriptions to be constructed, using a control-flow style, similar in many respects to CSP <ref> [9] </ref> or Ada [7]. The (explicit) call/accept communication primitives used are adaptations of the Ada rendezvous. There are standard imperative sequence and register assignment operators. A choice construct provides the means for switching control conditionally between different code fragments. A conditional loop statement provides iteration.
Reference: [10] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <address> Hemel Hempstead, Herts, England, </address> <year> 1989. </year>
Reference-contexts: By translating the Yellow and Green components into APA, the interfaces between these are well-defined, enabling the complete design to be simulated and analysed. APA has some similarities to more familiar process algebras, such as CCS <ref> [10] </ref>. Its semantics is defined operationally with a set of SOS-style transition rules [11]. However, the composition operators have been designed to support bundled-data micropipeline communication the communication primitives involved use an Ada-like rendezvous, and their semantics resembles the Ada semantics presented in [6].
Reference: [11] <author> M. Hennessy. </author> <title> The Semantics of Programming Languages. </title> <publisher> Wiley, </publisher> <year> 1990. </year> <month> 5 </month>
Reference-contexts: By translating the Yellow and Green components into APA, the interfaces between these are well-defined, enabling the complete design to be simulated and analysed. APA has some similarities to more familiar process algebras, such as CCS [10]. Its semantics is defined operationally with a set of SOS-style transition rules <ref> [11] </ref>. However, the composition operators have been designed to support bundled-data micropipeline communication the communication primitives involved use an Ada-like rendezvous, and their semantics resembles the Ada semantics presented in [6]. APA also supports value-passing and has richly-structured actions.
References-found: 11

