URL: http://www.cs.caltech.edu/~kiniry/projects/naming/paper/paper.ps
Refering-URL: http://www.cs.caltech.edu/~kiniry/projects/papers/kiniry/index.html
Root-URL: http://www.cs.caltech.edu
Email: fginzburg, blakej, kiniryg@cs.caltech.edu  kiniry@cs.caltech.edu).  
Phone: 626-395-4840 (vox), 626-792-4257 (fax),  
Title: DKNS: A Distributed Keyword-based Naming System  
Author: Steve Ginzburg, Blake Jones, Joseph Kiniry Instructor: K. Mani Chandy. 
Date: 1997=07=0900 13 08  July, 1997.  
Note: DRAFT COPY FOR REVIEW ONLY Date  A part of CS141: Distributed Systems Laboratory, a Computer Science course  Contact person for paper:  All three authors are full-time students (two undergradutes and one graduate student). DRAFT: Not for distribution. Submitted to USENIX Symposium on Internet Technolo gies and Systems  
Web: http://www.cs.caltech.edu/~kiniry/projects/naming/index.html  
Address: Pasadena, California 91125  Mailstop 256-80, Pasadena, CA 91125,  
Affiliation: Computer Science 256-80 California Institute of Technology  at Caltech.  Joseph Kiniry (Caltech  
Abstract: Distributed Keyword-based Naming System (DKNS) is a prototype distributed directory service for locating network resources in a manner which takes into account resource content, semantics, location, and proximity. It has three advantages over many existing naming systems: it has no root node and thus no central traffic bottleneck, names are associated with content rather than strictly with location, and regular expression matching algorithms provide the resolution of incomplete names. In this paper, we will highlight the issues inherent in solving the distributed naming problem, discuss the DKNS design and prototype, compare DKNS to other distributed naming systems, and describe our ongoing and future work with DKNS. A note to the reviewer: This is a shortened version of the full paper. Sections not included in this abstract are summarized in this emphasized font. Additional annotations for the reviewer are also included in this font throughout. The final paper includes a number of illustrations describing the DKNS system and highlighting its distinctive features and is approximately 6000 words long. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Albitz and C. Liu, "DNS and Bind", O'Reilly and Associates, </author> <year> 1992. </year>
Reference: [2] <author> AltaVista Group, </author> <month> DEC, </month> <title> "The AltaVista Search Engine," </title> <publisher> Digital Equipment Corporation, </publisher> <pages> 1994-1997. </pages>
Reference-contexts: To handle the user-interface issues incited by the influx of a new user populus, many of the most recently proposed naming systems are often "human-friendly"[16]. Existing resource discovery services (from the Domain Name Service (DNS [18]) to Universal Resource Names (URNs [22][23]) to Web search engines like AltaVista <ref> [2] </ref>) share several shortcomings: * Many depend on large centralized servers. * These servers are expensive to set up and maintain. * Many do not scale well. (i.e. the system cannot handle the load imposed by the current or near future usage patterns of the Internet.) * The system as a <p> PURLs rely on central servers. Yahoo![32] is similar to our work in that only hand-chosen addresses are catalogued. Like DKNS, Yahoo! allows keyword-based queries on its database. However, there is only one Yahoo! database, and Yahoo! is dependent on central servers. Search engines such as AltaVista <ref> [2] </ref> allow keyword-based searches. However, they catalogue the WWW indiscriminantly. They are extremely dependent on high-powered central servers. LDAPv3 [27] allows "referrals", but they are not central to the functioning of LDAP and their primary purpose is to distribute query load among a set of equivalent servers.
Reference: [3] <author> T. Berners-Lee, L. Masinter, and M. McCahill (eds), </author> <title> "Uniform Resource Locators (URL)," </title> <institution> Internet Engineering Task Force Network Working Group RFC 1738, </institution> <month> December, </month> <year> 1994. </year>
Reference: [4] <author> C. Mic Bowman, et al., "Harvest: </author> <title> A Scalable, Customizable Discovery and Access System," </title> <type> Technical Report CU-CS-732-94, </type> <institution> Department of Computer Science, University of Colorado, Boulder, </institution> <month> August </month> <year> 1994 </year> <month> (revised March </month> <year> 1995). </year>
Reference-contexts: Additionally, DKNS might be integrated with enterprise or personal caching systems like Harvest <ref> [4] </ref> or Squid [29] so as to provide a simple and uniform access strategy for companies or individuals. It also needs to grow beyond our most basic design needs, so that it will be easy to use. URNs are designed to provide a fixed name for a resource. <p> Web browser authors could easily integrate DKNS with the "bookmarks" feature found on many Web browsers today. With the addition of keywords and pointers, the bookmarks file could be used as a DKNS database. This would automate the construction of the DKNS network. Harvest <ref> [4] </ref> and Squid [29] (caching systems in the general). A discussion of caching solutions and integration follows. Social Issues A discussion of how to encourage folks to use the system. Points include: * Note: Client-side is easy, assuming the server-side stuff is in place. (People love search engines.
Reference: [5] <author> K.M. Chandy, J. Kiniry, A. Rifkin, D. Zimmerman, W. Tanaka, and L. Weisman, </author> <title> "A Framework for Structured Distributed Object Computing," </title> <institution> Caltech Department of Computer Science Technical Report CS-TR-97-07, Caltech, </institution> <year> 1997 </year>
Reference-contexts: Additionally, one of the authors (Kiniry) is investigat-ing implementing the system in Java and integrating it with the object/agent server/ORB of the Infospheres Infrastructure <ref> [5] </ref>. The source code for our current implementation of DKNS can be found at http://www.cs.caltech.edu/~kiniry/projects/naming/development/index.html. 5 Other Work We originally conceived our work to be an improvement on DNS, but it has changed considerably since then.
Reference: [6] <institution> The Corporation for National Research Initiatives, </institution> <note> "The Handle System - Overview Version 3.0," CRNI, 1996-1997. </note>
Reference-contexts: URNs are also meant to be a namespace of names-paces. Though the focus of URNs is different from our work, the systems are not incompatible, and could potentially complement one another. One suggested implementation of a URN system is CRNI's Handle System <ref> [6] </ref>. It supports "indirect handles", a type of reference to another server, but they are meant to be "forwarding references" to the new location of an object.
Reference: [7] <author> L. Daigle, P. Faltstrom, R. </author> <title> Iannella, "A Framework for the Assignment and Resolution of URNs," </title> <institution> Internet Engineering Task Force Internet-Draft (draft-ietf-daigle-urnframework-00.txt), </institution> <month> June, </month> <year> 1996. </year>
Reference: [8] <author> R. Daniel, </author> <title> "A Trivial Convention for using HTTP in URN Resolution," </title> <institution> Internet Engineering Task Force RFC 2169, IETF, </institution> <month> June, </month> <year> 1997. </year>
Reference: [9] <author> R. Daniel and M. Mealling, </author> <title> "Resolution of Uniform Resource Identifiers using the Domain Name System," </title> <institution> Internet Engineering Task Force Internet-Draft (draft-ietf-urn-naptr-05.txt), IETF, </institution> <month> May, </month> <year> 1997. </year>
Reference-contexts: DNS [18] is highly dependent on a set of central servers. It uses a rigid tree structure to connect servers, where DKNS is connected by a graph-like structure imposed by the pointer records. Up until recently (with the advent of NAPTR <ref> [9] </ref>), DNS was only used to serve hostnames. URNs [22][23] are meant to give resources location-independent names by adding a level of indirection. URNs are also meant to be a namespace of names-paces.
Reference: [10] <author> T. Finin, et al., </author> <title> "DRAFT Specification of the KQML Agent-Communication Language," The DARPA Knowledge Sharing Initiative External Interfaces Working Group, </title> <month> June, </month> <year> 1993. </year>
Reference-contexts: The primary difficulty here is determining the appropriate ontology for such a property set. We are investigating the ontologies of other representation systems 8 like the Digital Library Initiative [25], knowledge representation languages and protocols like KQML <ref> [10] </ref>, and denotational languages that have a well-defined structured query and/or type interface like XML [30]. If each address were paired with a short resource description, it would be easier for users to decide which addresses in the list interest them.
Reference: [11] <author> S. Heker, J. Reynolds, and C. Weider, </author> <title> "Technical Overview of Directory Services Using the X.500 Protocol," </title> <institution> Internet Engineering Task Force RFC 1309, </institution> <month> March, </month> <year> 1992. </year>
Reference: [12] <institution> International Ad Hoc Committee, </institution> <note> "Final Report of the International Ad Hoc Committee: </note> <institution> Recommendations for Administration and Management of gTLDs," </institution> <note> IAHC Final Report, </note> <month> February, </month> <year> 1997. </year>
Reference: [13] <author> R. Kahn and R. Wilensky, </author> <title> "A Framework for Distributed Digital Object Services," CRNI document, </title> <month> May, </month> <year> 1995. </year> <month> 10 </month>
Reference: [14] <author> B. Manning and P. Vixie, </author> <title> "Operational Criteria for Root Name Servers," </title> <institution> Internet Engineering Task Force Network Working Group RFC 2010, Oc-tober, </institution> <year> 1996. </year>
Reference-contexts: 1 Introduction The Distributed Keyword-Based Naming System (DKNS) demonstrates an important shift in perspectives on name resolution. Virtually all schemes currently employed on the Internet involve a central high-volume server, requiring expensive hardware, and necessitate around-the-clock administrative supervision <ref> [14] </ref>. DKNS resolution, in contrast, requires no root node and therefore its performance, reliability, and cost are less dependent on the size of the network. Traditional name-resolution services either resolve names globally [18][20][3][23] or are optimized for localized lookup at a group or organization scale [19][11][33][27].
Reference: [15] <author> J. Mauney, </author> <title> "OSF DCE Frequently Asked Questions," </title> <month> March, </month> <year> 1997. </year>
Reference: [16] <institution> MIT Information Mesh Group, "MIT Information Mesh Human Friendly Names (HFNs)," MIT Information Mesh Group, Department of Computer Science, MIT, </institution> <year> 1997. </year>
Reference: [17] <author> R. Moats, </author> <title> "URN Syntax," </title> <institution> Internet Engineering Task Force Internet-Draft (draft-ietf-urn-syntax-05.txt), IETF, </institution> <month> March, </month> <year> 1997. </year>
Reference: [18] <author> P. Mockapetris, </author> <title> "Domain names concepts and facilities," </title> <institution> Internet Engineering Task Force RFC 1034, IETF, </institution> <month> November, </month> <year> 1987. </year>
Reference-contexts: To handle the user-interface issues incited by the influx of a new user populus, many of the most recently proposed naming systems are often "human-friendly"[16]. Existing resource discovery services (from the Domain Name Service (DNS <ref> [18] </ref>) to Universal Resource Names (URNs [22][23]) to Web search engines like AltaVista [2]) share several shortcomings: * Many depend on large centralized servers. * These servers are expensive to set up and maintain. * Many do not scale well. (i.e. the system cannot handle the load imposed by the current <p> We have looked into a number of other naming systems during our design, and none of them fit all of our design goals. DNS <ref> [18] </ref> is highly dependent on a set of central servers. It uses a rigid tree structure to connect servers, where DKNS is connected by a graph-like structure imposed by the pointer records. Up until recently (with the advent of NAPTR [9]), DNS was only used to serve hostnames.
Reference: [19] <author> The Open Group, </author> <title> "The Distributed Computing Environment's Cell Directory Service," The Open Group, </title> <year> 1997. </year>
Reference: [20] <author> The Open Group, </author> <title> "The Distributed Computing Environment's Global Directory Service," The Open Group, </title> <year> 1997. </year>
Reference: [21] <author> J. Postel, </author> <title> "Domain Name System Structure and Delegation," </title> <institution> Internet Engineering Task Force Network Working Group RFC 1591, </institution> <month> March, </month> <year> 1994. </year>
Reference: [22] <author> K. Sollins, </author> <title> "Guidelines and a Framework for URN Resolution Systems," </title> <institution> Internet Engineering Task Force Internet-Draft (draft-ietf-urn-req-frame-02.txt), IETF, </institution> <month> June, </month> <year> 1997. </year>
Reference: [23] <author> K. Sollins and L. Masinter, </author> <title> "Functional Requirements for Uniform Resource Names," </title> <institution> Internet Engineering Task Force Network Working Group RFC 1737, </institution> <month> December, </month> <year> 1994. </year>
Reference: [24] <author> R. Srinivasan, </author> <title> "RPC: Remote Procedure Call Protocol Specification Version 2," </title> <institution> Internet Engineering Task Force RFC 1831, IETF, </institution> <month> August, </month> <year> 1995. </year>
Reference-contexts: We wrote the first prototype of DKNS in C, using Sun's ONC/RPC <ref> [24] </ref> to provide the communication bus between the client and server. We chose C and RPC for their simplicity, portability, and wide availability. The API currently contains a single function: dkns cbquery ().
Reference: [25] <institution> Stanford University, "The Stanford University Digital Libraries Project, Digital Libraries Project Web Server, </institution> <year> 1997. </year>
Reference-contexts: The primary difficulty here is determining the appropriate ontology for such a property set. We are investigating the ontologies of other representation systems 8 like the Digital Library Initiative <ref> [25] </ref>, knowledge representation languages and protocols like KQML [10], and denotational languages that have a well-defined structured query and/or type interface like XML [30]. If each address were paired with a short resource description, it would be easier for users to decide which addresses in the list interest them.
Reference: [26] <author> Various, </author> <title> "Uniform Resource Names A Progress Report," </title> <journal> D-Lib Magazine, </journal> <month> February, </month> <year> 1996. </year>
Reference: [27] <author> M. Wahl, T. Howes, S. Kille, </author> <title> "LDAPv3 Specification," </title> <institution> Internet Engineering Task Force Internet-Draft (draft-ietf-asid-ldapv3-protocol-05.txt), IETF, </institution> <month> June, </month> <year> 1997. </year>
Reference-contexts: Like DKNS, Yahoo! allows keyword-based queries on its database. However, there is only one Yahoo! database, and Yahoo! is dependent on central servers. Search engines such as AltaVista [2] allow keyword-based searches. However, they catalogue the WWW indiscriminantly. They are extremely dependent on high-powered central servers. LDAPv3 <ref> [27] </ref> allows "referrals", but they are not central to the functioning of LDAP and their primary purpose is to distribute query load among a set of equivalent servers.
Reference: [28] <author> S. Weibel, E. Jul, K. Shafer, "PURLs: </author> <title> Persistant Uniform Resource Locators," Online Computer Library Center, </title> <month> November, </month> <year> 1995. </year>
Reference-contexts: The Handle System is also "fully distributed," but its "global handle system" is spread among a small set of main servers, much like DNS. The PURL <ref> [28] </ref> system, another URN implementation, is meant to deal with the specific problem of persistence of URLs. The PURL system is otherwise limited in its usefulness. PURLs rely on central servers. Yahoo![32] is similar to our work in that only hand-chosen addresses are catalogued.
Reference: [29] <author> D. Wessels, </author> <title> "Squid Frequently Asked Questions," Squid Web Server, </title> <month> July, </month> <year> 1997. </year>
Reference-contexts: Additionally, DKNS might be integrated with enterprise or personal caching systems like Harvest [4] or Squid <ref> [29] </ref> so as to provide a simple and uniform access strategy for companies or individuals. It also needs to grow beyond our most basic design needs, so that it will be easy to use. URNs are designed to provide a fixed name for a resource. <p> Web browser authors could easily integrate DKNS with the "bookmarks" feature found on many Web browsers today. With the addition of keywords and pointers, the bookmarks file could be used as a DKNS database. This would automate the construction of the DKNS network. Harvest [4] and Squid <ref> [29] </ref> (caching systems in the general). A discussion of caching solutions and integration follows. Social Issues A discussion of how to encourage folks to use the system. Points include: * Note: Client-side is easy, assuming the server-side stuff is in place. (People love search engines.
Reference: [30] <institution> XML Working Group, "Extensible Markup Language (XML) W3C Work--ing Draft," W3C/XML Working Group, </institution> <month> June, </month> <year> 1997. </year>
Reference-contexts: We are investigating the ontologies of other representation systems 8 like the Digital Library Initiative [25], knowledge representation languages and protocols like KQML [10], and denotational languages that have a well-defined structured query and/or type interface like XML <ref> [30] </ref>. If each address were paired with a short resource description, it would be easier for users to decide which addresses in the list interest them. We could do this by adding a "description" field to the DKNS database. In some cases, the client could generate these descriptions itself.
Reference: [31] <author> X/Open, </author> <title> "Solaris X/Open Federated Naming," Sun Microsystems, </title> <month> May, </month> <year> 1995. </year>
Reference: [32] <author> Yahoo!, Inc., "Yahoo!," </author> <title> Yahoo! Web Server, </title> <type> 1995-1997. </type>
Reference: [33] <author> W. Yeong, T. Howes, and S. Hardcastle-Kille, </author> <title> "X.500 Lightweight Directory Access Protocol," </title> <institution> Internet Engineering Task Force RFC 1487, </institution> <month> July, </month> <year> 1993. </year> <month> 12 </month>
References-found: 33

