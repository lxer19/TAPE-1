URL: ftp://cse.ogi.edu/pub/tech-reports/1995/95-TH-006.ps.gz
Refering-URL: ftp://cse.ogi.edu/pub/tech-reports/README.html
Root-URL: http://www.cse.ogi.edu
Title: An Object-Oriented Heterogeneous Database Architecture  
Author: David Marshall Hansen 
Degree: 1988 A dissertation submitted to the faculty of the Oregon Graduate Institute of Science Technology in partial fulfillment of the requirements for the degree Doctor of Philosophy in Computer Science and Engineering  
Date: July 1995  
Address: 1984  
Affiliation: B.S. Computer Science, Oral Roberts University,  M.S. Computer Science, Washington State University,  
Abstract-found: 0
Intro-found: 1
Reference: [Ald93] <author> Peter Aldhous. </author> <title> Managing the genome data deluge. </title> <journal> Science, </journal> <volume> 262(22) </volume> <pages> 502-503, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Furthermore, the assumption is that these databases are relational [BHP92]. However, many environments have "databases" that are not managed by a general-purpose DBMS including: defense [AMR94], medicine [WH94], telecommunications [CD93], geophysics [DSH94], molecular biology and genomics <ref> [Kar94, Ald93, SR94] </ref>, chemistry [RL85], and materials science [HS91]. "Databases" in these environments are often formatted files containing large data sets that may include historical data (e.g., telephone customer records, chemistry experiment records) or databases of factual information (e.g., the map of a gene fragment, physical properties of a material).
Reference: [AMR94] <author> Peter Aiken, Alice Muntz, and Russ Richards. </author> <title> DoD legacy systems: Reverse engineering data requirements. </title> <journal> Communications of the ACM, </journal> <volume> 37(5) </volume> <pages> 26-41, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Furthermore, the assumption is that these databases are relational [BHP92]. However, many environments have "databases" that are not managed by a general-purpose DBMS including: defense <ref> [AMR94] </ref>, medicine [WH94], telecommunications [CD93], geophysics [DSH94], molecular biology and genomics [Kar94, Ald93, SR94], chemistry [RL85], and materials science [HS91]. "Databases" in these environments are often formatted files containing large data sets that may include historical data (e.g., telephone customer records, chemistry experiment records) or databases of factual information (e.g., the
Reference: [Ber85] <author> G. Bergerhoff. </author> <title> The inorganic crystal structure data base. </title> <editor> In Sheldrick et al. </editor> <booktitle> [SKG85], </booktitle> <pages> pages 85-95. </pages>
Reference-contexts: Materials scientists have been leaders in the use of computers for modeling and research. Computational models for materials science are well known and refined [Hal85]. In addition, there are many computer-readable lightly-managed data sources available for materials science <ref> [HS91, Wil85, Ber85, Rum89, Mes84] </ref>. The particular problem we sought to address was to provide an integrated OOHDB for materials scientists and their application programs.
Reference: [Ber91] <author> Elisa Bertino. </author> <title> Integration of heterogeneous data repositories by using object-oriented views. </title> <editor> In Kambayashi et al. </editor> <booktitle> [KRS91], </booktitle> <pages> pages 22-29. </pages>
Reference-contexts: has become so ingrained in the research that 16 one researcher has suggested that the relational data model should simply be adopted as a standard, canonical model for building HDB systems [LA86]. 2.3 Object-Oriented HDB Research The notion of building an HDB presenting an object-oriented data model is relatively new <ref> [Man89, SCGS91, CT91, LM91, Ber91, TSB92] </ref>. In some cases, the use of object-oriented technology is for infrastructure only|the HDB appears relational to its users [LM91]. In other cases, the HDB presents its users with an object-oriented data model yielding a true OOHDB [CT91, Ber91, KDN90]. <p> In some cases, the use of object-oriented technology is for infrastructure only|the HDB appears relational to its users [LM91]. In other cases, the HDB presents its users with an object-oriented data model yielding a true OOHDB <ref> [CT91, Ber91, KDN90] </ref>. These OOHDB efforts are intended to exploit the expressivity of the object-oriented data model to model complex objects. One common strategy for homogenizing heterogeneous data using an OOHDB is the view mechanism proposed by Bertino [Ber91]. <p> These OOHDB efforts are intended to exploit the expressivity of the object-oriented data model to model complex objects. One common strategy for homogenizing heterogeneous data using an OOHDB is the view mechanism proposed by Bertino <ref> [Ber91] </ref>. The notion is that abstract classes, or views, can be used to provide a homogenizing layer atop heterogeneous classes and objects. Kaul et al. [KDN90] also propose an object-oriented view mechanism for integrating data.
Reference: [BHP92] <author> M.W. Bright, A.R. Hurson, and Simin H. Pakzad. </author> <title> A taxonomy and current issues in multidatabase systems. </title> <journal> Computer, </journal> <volume> 25(3) </volume> <pages> 50-60, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Furthermore, the assumption is that these databases are relational <ref> [BHP92] </ref>. <p> As of yet, HDBs remain a topic of research. M.W. Bright et al., surveying current multidatabase systems, note that of the 16 HDBs surveyed, 13 are "prototypes" and the other 3 are "research" systems <ref> [BHP92, p.56] </ref>. HDB research may eventually lead to a general-purpose HDB that is customizable for a particular environment.
Reference: [BOS91] <author> Paul Butterworth, Allen Otis, and Jacob Stein. </author> <title> The GemStone object database management system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 64-77, </pages> <month> Octo-ber </month> <year> 1991. </year>
Reference-contexts: Second, it provides a testbed for examining and analyzing the performance of our OOHDB architecture in a non-trivial, real-world application. 4.1 The OODBMS|GemStone GemStone, from Servio Corporation 1 , is a commercial object-oriented database management system that evolved from object-oriented database research conducted in the mid-80's <ref> [CM84, MS90, BOS91] </ref>. GemStone uses a client-server architecture with a single server ("stone") and multiple clients ("gems") 2 . A database is logically broken into "segments", each user typically owning and controlling a segment. Persistence is by reachability with both manual and scheduled automatic garbage-collection of non-reachable data.
Reference: [Cat91] <author> R.G.G. Cattell, </author> <title> editor. </title> <journal> Communications of the ACM|Special Section: Next-Generation Database Systems, </journal> <volume> volume 34. </volume> <publisher> Association for Computing Machinery, ACM Press, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: The behavioral component is essential since it provides the mechanism for transparently accessing external data and mapping the data to the homogeneous OOHDB schema. 1 GemStone, ObjectStore, and O 2 were the commercial OODBMSs covered by Communications of the ACM in a Special Section on Next Generation Database Systems <ref> [Cat91] </ref>. 80 81 Where that behavior is stored (within the OODBMS or in OS files) or where it is executed (client or server) does not appear to be important. A computationally complete data manipulation language.
Reference: [Cat93] <author> R. Cattell. </author> <title> The Object Database Standard: ODMG-93. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA, </address> <year> 1993. </year>
Reference-contexts: We examine these two databases in particular for two pragmatic reasons. First, we have access to| and at least limited experience with|both products. Second, characteristics of these two products are key elements in the definition of the Object Database Standard (ODMG-93) <ref> [Cat93] </ref> that attempts to specify a vendor-independent standard for object databases. Specifically, the data model and C++ language bindings of ObjectStore and the object-oriented O 2 SQL data manipulation language of O 2 have, in large measure, been adopted for the ODMG standard.
Reference: [CD93] <author> E.S. Cordingley and H. Dai. </author> <title> Encapsulation|an issue for legacy systems. </title> <journal> BT Technology Journal, </journal> <volume> 11(3) </volume> <pages> 52-64, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Furthermore, the assumption is that these databases are relational [BHP92]. However, many environments have "databases" that are not managed by a general-purpose DBMS including: defense [AMR94], medicine [WH94], telecommunications <ref> [CD93] </ref>, geophysics [DSH94], molecular biology and genomics [Kar94, Ald93, SR94], chemistry [RL85], and materials science [HS91]. "Databases" in these environments are often formatted files containing large data sets that may include historical data (e.g., telephone customer records, chemistry experiment records) or databases of factual information (e.g., the map of a gene
Reference: [CL88] <author> Tim Connors and Peter Lyngback. </author> <title> Providing uniform access to heterogeneous information bases. </title> <editor> In K.R. Dittrich, editor, </editor> <booktitle> Advances in Object-Oriented Database Systems, volume 334 of Lecture Notes in Computer Science, </booktitle> <pages> pages 162-173. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <month> September </month> <year> 1988. </year> <pages> 100 101 </pages>
Reference-contexts: Even more germane to our research, a few researchers are exploring the use of an OODBMS as a tool for constructing an OOHDB <ref> [SAD + 95, CL88, RD94, HMZ90] </ref>. 17 2.3.1 Building an OOHDB Using an OODBMS Connors and Lyngbaek [CL88] appear to be the first to propose the use of an OODBMS as a tool for constructing an HDB. <p> Even more germane to our research, a few researchers are exploring the use of an OODBMS as a tool for constructing an OOHDB [SAD + 95, CL88, RD94, HMZ90]. 17 2.3.1 Building an OOHDB Using an OODBMS Connors and Lyngbaek <ref> [CL88] </ref> appear to be the first to propose the use of an OODBMS as a tool for constructing an HDB. They propose the use of the Iris 4 OODBMS from Hewlett-Packard Laboratories to construct a global data manager providing uniform access to heterogeneous data. <p> they note: The extensible nature of an OODBMS, i.e., the provision for abstract data types and operations, makes it feasible to write interfaces to a wide variety of existing information sources and that way create the illusion of a single integrated database which can be queried in a uniform manner <ref> [CL88, p.162] </ref>. In other words, by leveraging the behavioral component of an OODBMS, the OODBMS can be used as a tool for constructing an OOHDB. They propose to access external data via "foreign functions" that retrieve data on demand. <p> By using information-importing functions, it is not necessary to globally conform the local schemas. Rather, the programmer defining an information-importing function explicitly specifies a procedure that implements a mapping from the external information of interest to the importing database <ref> [CL88, p.164] </ref>. In essence, their approach achieves homogeneity by explicitly mapping heterogeneous data to a homogeneous form during importation. This contrasts with the class-hierarchy approach to homogenization proposed separately by Kaul et al. and Bertino. However, the foreign function approach to importing data does not appear to be particularly OODBMS-independent. <p> supported 4 Iris is now available commercially as OpenODB from Hewlett-Packard 18 by other OODBMS with general-purpose programming languages, they conclude that: Iris' support for generalized query processing capabilities and operations written in arbitrary programming languages make it a better candidate for a global data manager than many other OODBMSs <ref> [CL88, p.172] </ref>. However, we do not believe that "operations" in the form of the foreign functions used by Iris are all that convenient or user-friendly. Foreign functions must be compiled and carefully linked into the Iris query processing engine in order to be accessible.
Reference: [CM84] <author> George Copeland and David Maier. </author> <title> Making Smalltalk a database system. </title> <editor> In Beatrice Yormark, editor, </editor> <booktitle> Proceedings of Annual Meeting SIGMOD, </booktitle> <volume> volume 14, </volume> <pages> pages 316-325, </pages> <address> Boston, MA, </address> <month> June </month> <year> 1984. </year> <title> Association for Computing Machinery, </title> <publisher> ACM Press. </publisher>
Reference-contexts: Second, it provides a testbed for examining and analyzing the performance of our OOHDB architecture in a non-trivial, real-world application. 4.1 The OODBMS|GemStone GemStone, from Servio Corporation 1 , is a commercial object-oriented database management system that evolved from object-oriented database research conducted in the mid-80's <ref> [CM84, MS90, BOS91] </ref>. GemStone uses a client-server architecture with a single server ("stone") and multiple clients ("gems") 2 . A database is logically broken into "segments", each user typically owning and controlling a segment. Persistence is by reachability with both manual and scheduled automatic garbage-collection of non-reachable data.
Reference: [CT91] <author> Bogdan Czejdo and Malcolm Taylor. </author> <title> Integration of database systems using an object-oriented approach. </title> <editor> In Kambayashi et al. </editor> <booktitle> [KRS91], </booktitle> <pages> pages 30-37. </pages>
Reference-contexts: has become so ingrained in the research that 16 one researcher has suggested that the relational data model should simply be adopted as a standard, canonical model for building HDB systems [LA86]. 2.3 Object-Oriented HDB Research The notion of building an HDB presenting an object-oriented data model is relatively new <ref> [Man89, SCGS91, CT91, LM91, Ber91, TSB92] </ref>. In some cases, the use of object-oriented technology is for infrastructure only|the HDB appears relational to its users [LM91]. In other cases, the HDB presents its users with an object-oriented data model yielding a true OOHDB [CT91, Ber91, KDN90]. <p> In some cases, the use of object-oriented technology is for infrastructure only|the HDB appears relational to its users [LM91]. In other cases, the HDB presents its users with an object-oriented data model yielding a true OOHDB <ref> [CT91, Ber91, KDN90] </ref>. These OOHDB efforts are intended to exploit the expressivity of the object-oriented data model to model complex objects. One common strategy for homogenizing heterogeneous data using an OOHDB is the view mechanism proposed by Bertino [Ber91].
Reference: [Deu91] <author> O. </author> <title> Deux. The O 2 system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 34-49, </pages> <month> Octo-ber </month> <year> 1991. </year>
Reference-contexts: However, the architecture presented in Chapter 3 would need to be modified accordingly. 5.2 O 2 O 2 , from O 2 Technology 2 , is a commercial object-oriented database management system that evolved from object-oriented database research conducted in the late-80's by researchers at GIP Altar <ref> [LRV90, Deu91] </ref>. 2 O 2 Technology, 7 rue de Parc de Clagny, 78035 Versailles Codex, France 82 O 2 uses a client-server architecture with a single server, the O 2 Engine, and multiple clients. A database is logically broken into "schemas" and "bases".
Reference: [DSH94] <author> E.G. Dombrowski, W.A. Snyder, and H.M. Heckathorn. </author> <title> Metadata management and the VISTA system. </title> <booktitle> In Nunamaker and Sprague [NS94], </booktitle> <pages> pages 418-427. </pages>
Reference-contexts: Furthermore, the assumption is that these databases are relational [BHP92]. However, many environments have "databases" that are not managed by a general-purpose DBMS including: defense [AMR94], medicine [WH94], telecommunications [CD93], geophysics <ref> [DSH94] </ref>, molecular biology and genomics [Kar94, Ald93, SR94], chemistry [RL85], and materials science [HS91]. "Databases" in these environments are often formatted files containing large data sets that may include historical data (e.g., telephone customer records, chemistry experiment records) or databases of factual information (e.g., the map of a gene fragment, physical <p> although multiple files can be accessed simultaneously, there is no capability for homogenizing heterogeneous data sources. 1 Datatrieve is a registered trademark of Digital Equipment Corporation 12 13 2.1.2 VISTA|A Metadata Approach Another common approach to providing access to lightly-managed data is the "metadata" approach typified by the VISTA System <ref> [DSH94] </ref>. The VISTA (Visual Interface for Space and Terrestrial Analysis) System provides a visual query interface to large geophysical data sets. VISTA provides the user with a database of metadata|data about the underlying data sets, such as date and time of collection, location, and general features.
Reference: [EP90] <author> Ahmed K. Elmagarmid and Calton Pu. </author> <title> Guest editors' introduction to the special issue on heterogeneous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 175-181, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: To address this problem, the database research community has developed the concept of a heterogeneous database system (HDB) that provides users with the illusion of a single unified database <ref> [Kim95a, Ram91, SL90, LMR90, LA86, EP90] </ref>. However, proposed HDB architectures implicitly assume that all data to be integrated into the HDB are stored in full-fledged database management systems (DBMS). This assumption leaves environments that need to integrate non-DBMS data unserved by HDB systems.
Reference: [ES90] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: Persistence is by reachability with manual garbage-collection of non-reachable data. O 2 supports the creation of indexes over non-sequenceable collections (e.g. sets and bags) that have been stored in a base using an explicit name (e.g., AllCrystals). The data model of O 2 is loosely based on C++ <ref> [ES90] </ref> with the data model divided between primitive types (e.g., integer, float, char) and structured types (e.g., set, list, tuple, class). The O 2 Kit provides a small class library of definitions including date and text classes.
Reference: [FH94] <editor> James C. French and Hans Hinterberger, editors. </editor> <booktitle> Seventh International Working Conference on Scientific and Statistical Database Management, </booktitle> <address> Char-lottesville, VA, September 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: [FJP90] <author> James C. French, Anita K. Jones, and John L. Pfaltz. </author> <title> Report of the first invitational NSF workshop on scientific database management (final report). </title> <type> Technical Report 90-21, </type> <institution> University of Virginia, </institution> <address> Charlottesville, VA, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: The power of the object-oriented paradigm is especially significant when applying the HDB in domains where complex data models have hindered the use of traditional DBMS technology, such as scientific data management <ref> [FJP90] </ref>. An object-oriented data model provides a rich and powerful mechanism that can be used to model data that is not easily decomposed into the rows and columns of the relational model.
Reference: [GR83] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: An index can be based on the immutable object-identifiers (OID) of the objects in the collection, or on the equality of attribute values. The data model of GemStone is based on the language Smalltalk-80 <ref> [GR83, KP86] </ref> and provides a rich class-hierarchy of pre-defined classes (e.g., set, bag, array, integer, float, boolean, string, dictionary, queue). The data definition and data manipulation language is called "SmalltalkDB" and is a superset of the Smalltalk-80 language.
Reference: [HAB91] <author> Sydney R. Hall, Frank H. Allen, and I. David Brown. </author> <title> The Crystallographic Information File (CIF): a new standard archive file for crystallography. </title> <journal> Acta Crystallographica, </journal> <volume> A47:635-859, </volume> <month> November </month> <year> 1991. </year>
Reference-contexts: CAChe system files can be much larger as they are intended to support larger molecules and a wider range of applications. Typical file sizes range from 2K-40K bytes. Finally, the OOHDB provides access to files written using the Crystallographic Interchange Format (CIF), based on the STAR self-describing file format <ref> [HAB91] </ref>. CIF is one of an emerging number of "data interchange format" standards designed to promote machine and program-independent file formats for exchanging data. CIF files are self-describing ASCII files that can be viewed as structured groups of (keyword,value) pairs (see Appendix B.4 for an example).
Reference: [Hal85] <author> Sydney R. Hall. </author> <title> The design, development and implementation of program systems. </title> <editor> In Sheldrick et al. </editor> <booktitle> [SKG85], </booktitle> <pages> pages 147-156. 102 </pages>
Reference-contexts: Materials scientists rely extensively on programs and computerized data for conducting research <ref> [Hal85] </ref>. Much of the data relevant to materials science is contained in lightly-managed databases. In particular, published commercial data sets covering the crystallographic structure of many materials are available from standards organizations. <p> Materials scientists have been leaders in the use of computers for modeling and research. Computational models for materials science are well known and refined <ref> [Hal85] </ref>. In addition, there are many computer-readable lightly-managed data sources available for materials science [HS91, Wil85, Ber85, Rum89, Mes84]. The particular problem we sought to address was to provide an integrated OOHDB for materials scientists and their application programs.
Reference: [HM94] <author> David M. Hansen and David Maier. </author> <title> Using an object-oriented database to encapsulate heterogeneous scientific data sources. </title> <booktitle> In Nunamaker and Sprague [NS94], </booktitle> <pages> pages 408-417. </pages>
Reference-contexts: This approach was used in the construction of an O 2 prototype of our materials science OOHDB that was a port of our early GemStone OOHDB <ref> [HM94] </ref>. The port was functional in less than two weeks of single-programmer effort. Wrapping primitive types in objects proved to be a workable solution to the lack of null values for primitive types.
Reference: [HMSW92] <author> David Hansen, David Maier, James Stanley, and Jonathan Walpole. </author> <title> An object-oriented heterogeneous database for materials science. </title> <journal> Scientific Programming, </journal> <volume> 1(2) </volume> <pages> 115-131, </pages> <month> Winter </month> <year> 1992. </year>
Reference-contexts: Second, by dividing the available space in the OODBMS among multiple caches, the size of each cache is reduced. In order to support caching raw data, an early prototype of our architecture naively created a private DEO object for every Schema Layer object <ref> [HMSW92] </ref>. The reasoning was that these individual DEOs would provide a convenient location for caching raw data read from external data sources. We hoped to be able to manage this caching to provide fast access for small sets of objects that were being frequently accessed.
Reference: [HMZ90] <author> Sandra Heiler, Frank Manola, and Stanley Zdonik. </author> <title> An object-oriented database approach to federated systems. </title> <note> [Online], Available FTP: ftp.gte.com Directory: /pub/dom/reports/ File: HEIL90.ps, </note> <year> 1990. </year>
Reference-contexts: Even more germane to our research, a few researchers are exploring the use of an OODBMS as a tool for constructing an OOHDB <ref> [SAD + 95, CL88, RD94, HMZ90] </ref>. 17 2.3.1 Building an OOHDB Using an OODBMS Connors and Lyngbaek [CL88] appear to be the first to propose the use of an OODBMS as a tool for constructing an HDB.
Reference: [HS91] <author> Christy Hightower and Robert Schwarzwalder. </author> <title> A comprehensive look at materials science databases. </title> <journal> Database, </journal> <volume> 14(2) </volume> <pages> 42-53, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Furthermore, the assumption is that these databases are relational [BHP92]. However, many environments have "databases" that are not managed by a general-purpose DBMS including: defense [AMR94], medicine [WH94], telecommunications [CD93], geophysics [DSH94], molecular biology and genomics [Kar94, Ald93, SR94], chemistry [RL85], and materials science <ref> [HS91] </ref>. "Databases" in these environments are often formatted files containing large data sets that may include historical data (e.g., telephone customer records, chemistry experiment records) or databases of factual information (e.g., the map of a gene fragment, physical properties of a material). <p> Materials scientists have been leaders in the use of computers for modeling and research. Computational models for materials science are well known and refined [Hal85]. In addition, there are many computer-readable lightly-managed data sources available for materials science <ref> [HS91, Wil85, Ber85, Rum89, Mes84] </ref>. The particular problem we sought to address was to provide an integrated OOHDB for materials scientists and their application programs.
Reference: [Int90] <institution> International Centre for Diffraction Data. NBS*AIDS83, </institution> <month> November </month> <year> 1990. </year>
Reference: [Jir93] <author> Gregory A. Jirak. Aurora Dataserver: </author> <title> A data management system for visualization applications. </title> <publisher> XIDAK Inc., </publisher> <month> July </month> <year> 1993. </year>
Reference-contexts: Finally, VISTA is an end-user system and provides no general-purpose application programmer interface (API) for user applications. VISTA can only pass selected data sets along to other data analysis software packages. 2.1.3 The Aurora Dataserver|An Extended Relational Approach The Aurora Dataserver 2 for visualization applications <ref> [XID94, Jir93] </ref> also provides a meta-data approach, but takes the approach a step farther by integrating lightly-managed databases as "dataset" values in an extended relational data model. The Aurora Dataserver is built atop the Orion 3 extended-relational database management system.
Reference: [Kar94] <author> Peter D. Karp. </author> <title> Report of the workshop on interconnection of molecular biology databases. </title> <type> Technical Report SRI-AIC-549, </type> <institution> Stanford Research Institute International, </institution> <address> Menlo Park, CA, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: Furthermore, the assumption is that these databases are relational [BHP92]. However, many environments have "databases" that are not managed by a general-purpose DBMS including: defense [AMR94], medicine [WH94], telecommunications [CD93], geophysics [DSH94], molecular biology and genomics <ref> [Kar94, Ald93, SR94] </ref>, chemistry [RL85], and materials science [HS91]. "Databases" in these environments are often formatted files containing large data sets that may include historical data (e.g., telephone customer records, chemistry experiment records) or databases of factual information (e.g., the map of a gene fragment, physical properties of a material).
Reference: [KDN90] <author> M. Kaul, K. Drosten, and E.J. Neuhold. ViewSystem: </author> <title> Integrating heterogeneous information bases by object-oriented views. </title> <booktitle> In Sixth International Conference on Data Engineering, </booktitle> <pages> pages 2-10, </pages> <address> Los Angeles, CA, February 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: In some cases, the use of object-oriented technology is for infrastructure only|the HDB appears relational to its users [LM91]. In other cases, the HDB presents its users with an object-oriented data model yielding a true OOHDB <ref> [CT91, Ber91, KDN90] </ref>. These OOHDB efforts are intended to exploit the expressivity of the object-oriented data model to model complex objects. One common strategy for homogenizing heterogeneous data using an OOHDB is the view mechanism proposed by Bertino [Ber91]. <p> One common strategy for homogenizing heterogeneous data using an OOHDB is the view mechanism proposed by Bertino [Ber91]. The notion is that abstract classes, or views, can be used to provide a homogenizing layer atop heterogeneous classes and objects. Kaul et al. <ref> [KDN90] </ref> also propose an object-oriented view mechanism for integrating data. Furthermore, they describe a prototype implementation using Smalltalk called the ViewSystem. "External" classes of objects can be defined in the ViewSystem that are "non-materialized". Queries over external classes result in a materialized collection of objects that satisfy the query.
Reference: [Kim95a] <author> Won Kim. </author> <title> Introduction to part 2: Technology for interoperating legacy databases. In Modern Database Systems: The Object Model, Interoperability, and Beyond [Kim95b], </title> <booktitle> chapter 25, </booktitle> <pages> pages 515-520. </pages>
Reference-contexts: To address this problem, the database research community has developed the concept of a heterogeneous database system (HDB) that provides users with the illusion of a single unified database <ref> [Kim95a, Ram91, SL90, LMR90, LA86, EP90] </ref>. However, proposed HDB architectures implicitly assume that all data to be integrated into the HDB are stored in full-fledged database management systems (DBMS). This assumption leaves environments that need to integrate non-DBMS data unserved by HDB systems. <p> The global schema is constructed by consolidating (integrating) the schemas of the local databases;: : : The MDBS translates the global queries and updates for dispatch to appropriate local database systems for actual processing, merges the results from them, and generates the final result for the user <ref> [Kim95a, p.516] </ref>. Kim goes on to list 9 general objectives of an HDB (or MDBS) [Kim95a, pp.516-517]: OBJECTIVE 1 It must obviate the need for a batch conversion and migration of data from one data source (e.g., an ORACLE database) to another (e.g., a Sybase data base). <p> Kim goes on to list 9 general objectives of an HDB (or MDBS) <ref> [Kim95a, pp.516-517] </ref>: OBJECTIVE 1 It must obviate the need for a batch conversion and migration of data from one data source (e.g., an ORACLE database) to another (e.g., a Sybase data base).
Reference: [Kim95b] <author> Won Kim, </author> <title> editor. Modern Database Systems: The Object Model, Interoperability, and Beyond. </title> <publisher> Addison-Wesley, </publisher> <address> New York, </address> <year> 1995. </year>
Reference: [KP86] <author> Ted Kaehler and Dave Patterson. </author> <title> A Taste of Smalltalk. W.W. </title> <publisher> Norton & Company Inc., </publisher> <address> New York, </address> <year> 1986. </year>
Reference-contexts: An index can be based on the immutable object-identifiers (OID) of the objects in the collection, or on the equality of attribute values. The data model of GemStone is based on the language Smalltalk-80 <ref> [GR83, KP86] </ref> and provides a rich class-hierarchy of pre-defined classes (e.g., set, bag, array, integer, float, boolean, string, dictionary, queue). The data definition and data manipulation language is called "SmalltalkDB" and is a superset of the Smalltalk-80 language.
Reference: [KRS91] <author> Y. Kambayashi, M. Rusinkiewicz, and A. Sheth, </author> <title> editors. </title> <booktitle> First International Workshop on Interoperability in Multidatabase Systems, </booktitle> <address> Kyoto, Japan, April 1991. </address> <publisher> IEEE Computer Society Press. </publisher> <pages> 103 </pages>
Reference: [LA86] <author> Witold Litwin and Abdelaziz Abdellatif. </author> <title> Multidatabase interoperability. </title> <journal> IEEE Computer, </journal> 19(12) 10-18, December 1986. 
Reference-contexts: To address this problem, the database research community has developed the concept of a heterogeneous database system (HDB) that provides users with the illusion of a single unified database <ref> [Kim95a, Ram91, SL90, LMR90, LA86, EP90] </ref>. However, proposed HDB architectures implicitly assume that all data to be integrated into the HDB are stored in full-fledged database management systems (DBMS). This assumption leaves environments that need to integrate non-DBMS data unserved by HDB systems. <p> Furthermore, the reliance on a relational model for external DBMSs has become so ingrained in the research that 16 one researcher has suggested that the relational data model should simply be adopted as a standard, canonical model for building HDB systems <ref> [LA86] </ref>. 2.3 Object-Oriented HDB Research The notion of building an HDB presenting an object-oriented data model is relatively new [Man89, SCGS91, CT91, LM91, Ber91, TSB92]. In some cases, the use of object-oriented technology is for infrastructure only|the HDB appears relational to its users [LM91].
Reference: [LLOW91] <author> Charles Lamb, Gordon Landis, Jack Orenstein, and Dan Weinreb. </author> <title> The Ob-jectStore database system. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 50-63, </pages> <month> Oc-tober </month> <year> 1991. </year>
Reference-contexts: of the OOHDB infrastructure (e.g., SortedCollection for implementing caches, Dictionary for alternative access structures), O 2 requires the OOHDB implementer to develop these sort of support classes themselves. 5.3 ObjectStore ObjectStore, from Object Design, Inc. 3 , is a commercial object-oriented database management system based on the C++ programming language <ref> [Obj92, OHMS92, LLOW91] </ref>. 3 Object Design, Inc., Twenty Five Mall Road, Burlington, MA 01803 86 ObjectStore uses a client-server architecture where client applications request database pages from the server in response to page faults generated by the application.
Reference: [LM91] <author> Qing Li and Dennis McLeod. </author> <title> An object-oriented approach to federated databases. </title> <editor> In Kambayashi et al. </editor> <booktitle> [KRS91], </booktitle> <pages> pages 64-70. </pages>
Reference-contexts: has become so ingrained in the research that 16 one researcher has suggested that the relational data model should simply be adopted as a standard, canonical model for building HDB systems [LA86]. 2.3 Object-Oriented HDB Research The notion of building an HDB presenting an object-oriented data model is relatively new <ref> [Man89, SCGS91, CT91, LM91, Ber91, TSB92] </ref>. In some cases, the use of object-oriented technology is for infrastructure only|the HDB appears relational to its users [LM91]. In other cases, the HDB presents its users with an object-oriented data model yielding a true OOHDB [CT91, Ber91, KDN90]. <p> In some cases, the use of object-oriented technology is for infrastructure only|the HDB appears relational to its users <ref> [LM91] </ref>. In other cases, the HDB presents its users with an object-oriented data model yielding a true OOHDB [CT91, Ber91, KDN90]. These OOHDB efforts are intended to exploit the expressivity of the object-oriented data model to model complex objects.
Reference: [LMR90] <author> Witold Litwin, Leo Mark, and Nick Roussopoulos. </author> <title> Interoperability of multiple autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 267-293, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: To address this problem, the database research community has developed the concept of a heterogeneous database system (HDB) that provides users with the illusion of a single unified database <ref> [Kim95a, Ram91, SL90, LMR90, LA86, EP90] </ref>. However, proposed HDB architectures implicitly assume that all data to be integrated into the HDB are stored in full-fledged database management systems (DBMS). This assumption leaves environments that need to integrate non-DBMS data unserved by HDB systems.
Reference: [LRV90] <author> Christopher Lecluse, Philippe Richard, and Fernando Velez. </author> <title> O 2 , an object-oriented data model. </title> <booktitle> In Zdonik and Maier [ZM90], </booktitle> <pages> pages 227-236. </pages>
Reference-contexts: However, the architecture presented in Chapter 3 would need to be modified accordingly. 5.2 O 2 O 2 , from O 2 Technology 2 , is a commercial object-oriented database management system that evolved from object-oriented database research conducted in the late-80's by researchers at GIP Altar <ref> [LRV90, Deu91] </ref>. 2 O 2 Technology, 7 rue de Parc de Clagny, 78035 Versailles Codex, France 82 O 2 uses a client-server architecture with a single server, the O 2 Engine, and multiple clients. A database is logically broken into "schemas" and "bases".
Reference: [Man89] <author> Frank Manola. </author> <title> Applications of object-oriented database technology in knowledge-based integrated information systems. </title> <editor> In Amar Gupta, editor, </editor> <title> Integration of Information Systems: Bridging Heterogeneous Databases, </title> <booktitle> Selected Reprint Series, </booktitle> <pages> pages 126-134. </pages> <publisher> IEEE Computer Society Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: has become so ingrained in the research that 16 one researcher has suggested that the relational data model should simply be adopted as a standard, canonical model for building HDB systems [LA86]. 2.3 Object-Oriented HDB Research The notion of building an HDB presenting an object-oriented data model is relatively new <ref> [Man89, SCGS91, CT91, LM91, Ber91, TSB92] </ref>. In some cases, the use of object-oriented technology is for infrastructure only|the HDB appears relational to its users [LM91]. In other cases, the HDB presents its users with an object-oriented data model yielding a true OOHDB [CT91, Ber91, KDN90].
Reference: [Mes84] <author> S.V. Meschel. </author> <title> Numeric databases in the sciences. </title> <journal> Online Review, </journal> <volume> 8(1) </volume> <pages> 77-103, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: Materials scientists have been leaders in the use of computers for modeling and research. Computational models for materials science are well known and refined [Hal85]. In addition, there are many computer-readable lightly-managed data sources available for materials science <ref> [HS91, Wil85, Ber85, Rum89, Mes84] </ref>. The particular problem we sought to address was to provide an integrated OOHDB for materials scientists and their application programs.
Reference: [MH94] <author> David Maier and David M. Hansen. </author> <title> Bambi meets Godzilla: Object databases for scientific computing. </title> <booktitle> In French and Hinterberger [FH94], </booktitle> <pages> pages 176-184. </pages>
Reference-contexts: The proliferation of DIF standards and the historical absence of database systems capable of modeling complex data has led to an undesirable situation where some environments have turned to DIF files as a data storage medium <ref> [MH94] </ref>. We do not believe that storing large data sets as collections of DIF files is a good long-term solution.
Reference: [MS90] <author> David Maier and Jacob Stein. </author> <title> Development and implementation of an object-oriented DBMS. </title> <booktitle> In Zdonik and Maier [ZM90], </booktitle> <pages> pages 167-185. </pages>
Reference-contexts: Second, it provides a testbed for examining and analyzing the performance of our OOHDB architecture in a non-trivial, real-world application. 4.1 The OODBMS|GemStone GemStone, from Servio Corporation 1 , is a commercial object-oriented database management system that evolved from object-oriented database research conducted in the mid-80's <ref> [CM84, MS90, BOS91] </ref>. GemStone uses a client-server architecture with a single server ("stone") and multiple clients ("gems") 2 . A database is logically broken into "segments", each user typically owning and controlling a segment. Persistence is by reachability with both manual and scheduled automatic garbage-collection of non-reachable data.
Reference: [NIS92] <institution> NIST standard reference data products catalog, </institution> <year> 1992. </year>
Reference-contexts: Single files written using the Crystallographic Interchange Format. The large, commercial databases are the National Bureau of Standards Crystal database, and the International Centre for Diffraction Data PDF-2 database. Both are available from the National Institutes of Standards and Technology (NIST) distributed on CDROM <ref> [NIS92] </ref>. Both databases share a common format, NBS*AIDS83 [Int90]|an ASCII file-format using a variable number of 80-column "cards" for each crystal record (see Appendix B.1 for an example). There are 22 card types defined by the NBS*AIDS83 document.
Reference: [NS94] <editor> Jay F. Nunamaker and Ralph H. Sprague, editors. </editor> <booktitle> Proceedings of the Twenty-Seventh Annual Hawaii International Conference on System Sciences, volume III, </booktitle> <address> Maui, Hawaii, </address> <month> January </month> <year> 1994. </year> <title> The University of Hawaii, </title> <publisher> IEEE Computer Society Press. </publisher>
Reference: [NZ94] <author> Marian H. Nodine and Stanley B. Zdonik. </author> <title> Automating compensation in a multidatabase. </title> <editor> In Hesham El-Rewini and Bruce D. Shriver, editors, </editor> <booktitle> Proceedings of the Twenty-Seventh Annual Hawaii International Conference on 104 System Sciences, </booktitle> <volume> volume II, </volume> <pages> pages 293-302, </pages> <address> Maui, Hawaii, </address> <month> January </month> <year> 1994. </year> <title> The University of Hawaii, </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: However, distributed transactions are a significant research topic unto themselves. 97 In the absence of distributed transactions, an alternative strategy is to use some sort of "compensating" transaction in the event of failure. A compensating transaction is an "inverse" transaction that undoes committed portions of a partially-completed distributed transaction <ref> [NZ94] </ref>. However, compensating transactions are not atomic and leave the external databases temporarily open to inconsistency. From what we have observed in our work as well as the work of others, the main goal of an HDB is usually to provide integrated read access to heterogeneous data.
Reference: [Obj92] <institution> Object Design, Inc., Burlington, </institution> <address> MA. </address> <publisher> ObjectStore User Guide, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: of the OOHDB infrastructure (e.g., SortedCollection for implementing caches, Dictionary for alternative access structures), O 2 requires the OOHDB implementer to develop these sort of support classes themselves. 5.3 ObjectStore ObjectStore, from Object Design, Inc. 3 , is a commercial object-oriented database management system based on the C++ programming language <ref> [Obj92, OHMS92, LLOW91] </ref>. 3 Object Design, Inc., Twenty Five Mall Road, Burlington, MA 01803 86 ObjectStore uses a client-server architecture where client applications request database pages from the server in response to page faults generated by the application.
Reference: [OHMS92] <author> Jack Orenstein, Sam Haradhvala, Benson Margulies, and Don Sakahara. </author> <title> Query processing in the ObjectStore database system. </title> <editor> In Michael Stone-braker, editor, </editor> <booktitle> Proceedings of the 1992 ACM SIGMOD, </booktitle> <volume> volume 21, </volume> <pages> pages 403-412, </pages> <address> San Diego, CA, June 1992. </address> <publisher> ACM Press. </publisher>
Reference-contexts: of the OOHDB infrastructure (e.g., SortedCollection for implementing caches, Dictionary for alternative access structures), O 2 requires the OOHDB implementer to develop these sort of support classes themselves. 5.3 ObjectStore ObjectStore, from Object Design, Inc. 3 , is a commercial object-oriented database management system based on the C++ programming language <ref> [Obj92, OHMS92, LLOW91] </ref>. 3 Object Design, Inc., Twenty Five Mall Road, Burlington, MA 01803 86 ObjectStore uses a client-server architecture where client applications request database pages from the server in response to page faults generated by the application.
Reference: [Ram91] <author> Sudha Ram. </author> <title> Heterogeneous distributed database systems. </title> <journal> IEEE Computer, </journal> <volume> 24(12) </volume> <pages> 7-10, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: To address this problem, the database research community has developed the concept of a heterogeneous database system (HDB) that provides users with the illusion of a single unified database <ref> [Kim95a, Ram91, SL90, LMR90, LA86, EP90] </ref>. However, proposed HDB architectures implicitly assume that all data to be integrated into the HDB are stored in full-fledged database management systems (DBMS). This assumption leaves environments that need to integrate non-DBMS data unserved by HDB systems.
Reference: [RD94] <author> Barbara Rieche and Klaus R. Dittrich. </author> <title> A federated DBMS-based integrated environment for molecular biology. </title> <booktitle> In French and Hinterberger [FH94], </booktitle> <pages> pages 118-127. </pages>
Reference-contexts: Even more germane to our research, a few researchers are exploring the use of an OODBMS as a tool for constructing an OOHDB <ref> [SAD + 95, CL88, RD94, HMZ90] </ref>. 17 2.3.1 Building an OOHDB Using an OODBMS Connors and Lyngbaek [CL88] appear to be the first to propose the use of an OODBMS as a tool for constructing an HDB. <p> DBMSs, the Pegasus 19 system is typical of most HDB systems that are not well-suited to integrating lightly-managed databases. 2.3.3 An OOHDB for Molecular Biology Using the commercial OODBMS ObjectStore 5 , Rieche and Dittrich have implemented an OOHDB for molecular biology that provides access to lightly-managed molecular biology data <ref> [RD94] </ref>. Rieche and Dittrich describe a very pragmatic and domain-dependent approach to data integration that makes no pretense about trying to "invent new concepts for federated database systems." The mechanism for querying lightly-managed data is quite unique|global queries are transformed into programs that scan files for relevant data.
Reference: [RL85] <author> John R. Rumble and David R. Lide. </author> <title> Chemical and spectral databases: A look into the future. </title> <journal> Journal of Chemical Information and Computer Sciences, </journal> <volume> 25(3) </volume> <pages> 231-235, </pages> <year> 1985. </year>
Reference-contexts: Furthermore, the assumption is that these databases are relational [BHP92]. However, many environments have "databases" that are not managed by a general-purpose DBMS including: defense [AMR94], medicine [WH94], telecommunications [CD93], geophysics [DSH94], molecular biology and genomics [Kar94, Ald93, SR94], chemistry <ref> [RL85] </ref>, and materials science [HS91]. "Databases" in these environments are often formatted files containing large data sets that may include historical data (e.g., telephone customer records, chemistry experiment records) or databases of factual information (e.g., the map of a gene fragment, physical properties of a material).
Reference: [Rum89] <author> John R. </author> <title> Rumble. Socioeconomic barriers in computerizing materials data. </title> <editor> In Jerry S. Glazman and John R. Rumble, editors, </editor> <booktitle> Computerization and Networking of Materials Data Bases, </booktitle> <pages> pages 217-226. </pages> <address> ASTM, Philadelphia, PA, </address> <year> 1989. </year>
Reference-contexts: Materials scientists have been leaders in the use of computers for modeling and research. Computational models for materials science are well known and refined [Hal85]. In addition, there are many computer-readable lightly-managed data sources available for materials science <ref> [HS91, Wil85, Ber85, Rum89, Mes84] </ref>. The particular problem we sought to address was to provide an integrated OOHDB for materials scientists and their application programs.
Reference: [SAD + 95] <author> Ming-Chien Shan, Rafi Ahmed, Jim Davis, Weimin Du, and William Kent. </author> <title> Pegasus: A heterogeneous information management system. </title> <editor> In Kim [Kim95b], </editor> <volume> chapter 32, </volume> <pages> pages 664-682. </pages>
Reference-contexts: Even more germane to our research, a few researchers are exploring the use of an OODBMS as a tool for constructing an OOHDB <ref> [SAD + 95, CL88, RD94, HMZ90] </ref>. 17 2.3.1 Building an OOHDB Using an OODBMS Connors and Lyngbaek [CL88] appear to be the first to propose the use of an OODBMS as a tool for constructing an HDB. <p> Furthermore, our work presents an approach for integrating and optimizing data stored in lightly-managed databases, a capability that the global data manager may possess, but that remains unexplored. 2.3.2 The Pegasus OOHDB Another OOHDB project developed using Hewlett-Packard's OpenODB product is the Pegasus system <ref> [Sha93, SAD + 95] </ref>. However, in contrast to the global data manager of Connors and Lyngbaek, Pegasus represents a much more traditional HDB approach that relies less on the native power of the underlying OODBMS than on a complex software architecture (see Figure 1.1).
Reference: [SBD + 81] <author> John Miles Smith, Philip A. Bernstein, Umeshwar Dayal, Nathan Goodman, Terry Landers, Ken W.T. Lin, and Eugene Wong. </author> <title> Multibase integrating heterogeneous distributed database systems. </title> <booktitle> In AFIPS Proceedings of the National Computer Conference, </booktitle> <volume> volume 50, </volume> <pages> pages 487-489, </pages> <address> Reston, VA, </address> <year> 1981. </year> <booktitle> American Federation of Information Processing Societies, </booktitle> <publisher> Inc., AFIPS Press. </publisher>
Reference-contexts: Our research is interested in the more transparent integrated solutions, so our discussion here is confined to integrated HDB approaches. One of the earliest integrated HDB prototypes was the Multibase system <ref> [SBD + 81] </ref>. The simple diagram of Multibase shown in Figure 2.2 has influenced the direction of most subsequent HDB research. The basic function of Multibase is to maintain a global schema and translate queries against that schema into queries over external databases (called "local DBMS" by Multibase).
Reference: [SCGS91] <author> F. Saltor, M. Castellanos, and M. Garcia-Solaco. </author> <title> Suitability of data models as canonical models for federated databases. </title> <editor> In Arie Segev, editor, </editor> <booktitle> SIGMOD Record|Special Issue: Semantic Issues in Multidatabase Systems, </booktitle> <volume> volume 20, </volume> <pages> pages 44-48. </pages> <publisher> ACM Press, </publisher> <month> December </month> <year> 1991. </year> <month> 105 </month>
Reference-contexts: has become so ingrained in the research that 16 one researcher has suggested that the relational data model should simply be adopted as a standard, canonical model for building HDB systems [LA86]. 2.3 Object-Oriented HDB Research The notion of building an HDB presenting an object-oriented data model is relatively new <ref> [Man89, SCGS91, CT91, LM91, Ber91, TSB92] </ref>. In some cases, the use of object-oriented technology is for infrastructure only|the HDB appears relational to its users [LM91]. In other cases, the HDB presents its users with an object-oriented data model yielding a true OOHDB [CT91, Ber91, KDN90].
Reference: [Sha93] <author> Ming-Chien Shan. </author> <title> Pegasus architecture and design principles. </title> <editor> In Peter Bune-man and Sushil Jajodia, editors, </editor> <booktitle> Proceedings of the 1993 ACM SIGMOD International Conference on Management of Data, </booktitle> <volume> volume 22, </volume> <pages> pages 422-425, </pages> <address> Washington, DC, </address> <month> June </month> <year> 1993. </year> <title> Association for Computing Machinery, </title> <publisher> ACM Press. </publisher>
Reference-contexts: Furthermore, our work presents an approach for integrating and optimizing data stored in lightly-managed databases, a capability that the global data manager may possess, but that remains unexplored. 2.3.2 The Pegasus OOHDB Another OOHDB project developed using Hewlett-Packard's OpenODB product is the Pegasus system <ref> [Sha93, SAD + 95] </ref>. However, in contrast to the global data manager of Connors and Lyngbaek, Pegasus represents a much more traditional HDB approach that relies less on the native power of the underlying OODBMS than on a complex software architecture (see Figure 1.1).
Reference: [SKG85] <author> G.M. Sheldrick, C. Kruger, and R. Goddard, </author> <title> editors. Cyrstallographic Computing 3: Data Collection, Structure Determination, Proteins, and Databases. </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1985. </year>
Reference: [SL90] <author> Amit P. Sheth and James A. Larson. </author> <title> Federated database systems for managing distributed heterogeneous, and autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 183-236, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: To address this problem, the database research community has developed the concept of a heterogeneous database system (HDB) that provides users with the illusion of a single unified database <ref> [Kim95a, Ram91, SL90, LMR90, LA86, EP90] </ref>. However, proposed HDB architectures implicitly assume that all data to be integrated into the HDB are stored in full-fledged database management systems (DBMS). This assumption leaves environments that need to integrate non-DBMS data unserved by HDB systems.
Reference: [SR94] <author> Dong-Guk Shin and Francois Rechenmann. </author> <title> Data and knowledge base issues in genomics. </title> <editor> In Lawrence Hunter, editor, </editor> <booktitle> Proceedings of the Twenty-Seventh Annual Hawaii International Conference on System Sciences, volume V, </booktitle> <pages> pages 3-4, </pages> <address> Maui, Hawaii, </address> <month> January </month> <year> 1994. </year> <title> The University of Hawaii, </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Furthermore, the assumption is that these databases are relational [BHP92]. However, many environments have "databases" that are not managed by a general-purpose DBMS including: defense [AMR94], medicine [WH94], telecommunications [CD93], geophysics [DSH94], molecular biology and genomics <ref> [Kar94, Ald93, SR94] </ref>, chemistry [RL85], and materials science [HS91]. "Databases" in these environments are often formatted files containing large data sets that may include historical data (e.g., telephone customer records, chemistry experiment records) or databases of factual information (e.g., the map of a gene fragment, physical properties of a material).
Reference: [TSB92] <author> Henry R. Tirri, Jagannathan Srinivasan, and Bharat Bhargava. </author> <title> Integrating distributed data sources using federated objects. </title> <editor> In M. Tamer Ozsu, Umesh-war Dayal, and Patrick Valduriez, editors, </editor> <booktitle> Pre-Proceedings of the International Workshop on Distributed Object Management, </booktitle> <pages> pages 292-306, </pages> <address> Edmon-ton, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: has become so ingrained in the research that 16 one researcher has suggested that the relational data model should simply be adopted as a standard, canonical model for building HDB systems [LA86]. 2.3 Object-Oriented HDB Research The notion of building an HDB presenting an object-oriented data model is relatively new <ref> [Man89, SCGS91, CT91, LM91, Ber91, TSB92] </ref>. In some cases, the use of object-oriented technology is for infrastructure only|the HDB appears relational to its users [LM91]. In other cases, the HDB presents its users with an object-oriented data model yielding a true OOHDB [CT91, Ber91, KDN90].
Reference: [WH94] <author> M.H. Williams and J. Hu. </author> <title> Making heterogeneous medical databases interop-erable. </title> <booktitle> Computer Methods and Programs in Biomedicine, </booktitle> 43(3/4):275-282, June 1994. 
Reference-contexts: Furthermore, the assumption is that these databases are relational [BHP92]. However, many environments have "databases" that are not managed by a general-purpose DBMS including: defense [AMR94], medicine <ref> [WH94] </ref>, telecommunications [CD93], geophysics [DSH94], molecular biology and genomics [Kar94, Ald93, SR94], chemistry [RL85], and materials science [HS91]. "Databases" in these environments are often formatted files containing large data sets that may include historical data (e.g., telephone customer records, chemistry experiment records) or databases of factual information (e.g., the map of
Reference: [Wie92] <author> Gio Wiederhold. </author> <title> Mediators in the architecture of future information systems. </title> <journal> IEEE Computer, </journal> <volume> 25(3) </volume> <pages> 38-49, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Thus, though not of critical importance, we think of the DEO as a three-layered entity itself as shown in Figure 3.6. Coincidentally, this three-layered design for the DEO corresponds to Gio Wiederhold's proposal for "mediators" that provide an interface between users and diverse data resources <ref> [Wie92] </ref>. The principle difference is that the "users" of a DEO are the objects of the user's schema rather than the users themselves. The top layer of the DEO is the homogeneous method interface used by Schema Layer objects to request particular attributes to be retrieved.
Reference: [Wil85] <author> Martha E. Williams. </author> <title> Electronic databases. </title> <journal> Science, </journal> <volume> 228 </volume> <pages> 445-456, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: Materials scientists have been leaders in the use of computers for modeling and research. Computational models for materials science are well known and refined [Hal85]. In addition, there are many computer-readable lightly-managed data sources available for materials science <ref> [HS91, Wil85, Ber85, Rum89, Mes84] </ref>. The particular problem we sought to address was to provide an integrated OOHDB for materials scientists and their application programs.
Reference: [XID94] <institution> XIDAK Inc., </institution> <address> Palo Alto, CA. </address> <note> The Aurora Dataserver Programmer's Guide, </note> <year> 1994. </year>
Reference-contexts: Finally, VISTA is an end-user system and provides no general-purpose application programmer interface (API) for user applications. VISTA can only pass selected data sets along to other data analysis software packages. 2.1.3 The Aurora Dataserver|An Extended Relational Approach The Aurora Dataserver 2 for visualization applications <ref> [XID94, Jir93] </ref> also provides a meta-data approach, but takes the approach a step farther by integrating lightly-managed databases as "dataset" values in an extended relational data model. The Aurora Dataserver is built atop the Orion 3 extended-relational database management system.
Reference: [ZM90] <editor> Stanley B. Zdonik and David Maier, editors. </editor> <booktitle> Readings in Object-Oriented Database Systems. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, CA, </address> <year> 1990. </year>
References-found: 64

