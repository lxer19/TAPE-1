URL: ftp://cse.ogi.edu/pub/tech-reports/1993/93-024.ps.gz
Refering-URL: http://www.cse.ogi.edu/DISC/projects/ereq/papers/bennet-papers.html
Root-URL: http://www.cse.ogi.edu
Title: On the Application of Partial Evaluation to Database Optimization  
Author: Scott Daniels and Bennet Vance 
Date: December 8, 1993  
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute of Science Technology  
Abstract-found: 0
Intro-found: 1
Reference: [BD77] <author> R. M. Burstall and J. Darlington. </author> <title> A transformation system for developing recursive programs. </title> <journal> Journal of the ACM, </journal> <volume> 24(1) </volume> <pages> 44-67, </pages> <month> January </month> <year> 1977. </year> <month> 22 </month>
Reference: [BTBN91] <author> Val Breazu-Tannen, Peter Buneman, and Shamim Naqvi. </author> <title> Struc--tural recursion as a query language. </title> <editor> In Paris Kanellakis and Joachim W. Schmidt, editors, </editor> <title> Database Programming Languages: Bulk Types & Persistent Data, </title> <booktitle> The Third International Workshop, </booktitle> <pages> pages 9-19, </pages> <address> Nafplion, Greece, August 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [CD93] <author> Charles Consel and Olivier Danvy. </author> <title> Tutorial notes on partial evaluation. </title> <booktitle> In Proceedings of the Twentieth Annual SIGACT Symposium on Principles of Programming Languages. ACM, </booktitle> <month> January </month> <year> 1993. </year>
Reference: [Con90] <author> Charles Consel. </author> <title> Binding time analysis for higher order untyped functional languages. </title> <booktitle> In 1990 ACM Conference on Lisp and Functional Programming, </booktitle> <pages> pages 264-272. </pages> <publisher> ACM, </publisher> <year> 1990. </year>
Reference: [Con92] <author> Charles Consel. </author> <note> Report on Schism '92. </note> <institution> Pacific Software Research Center, Oregon Graduate Institute of Science & Technology, </institution> <note> Oc-tober 1992. Draft. </note>
Reference: [Con93] <author> Charles Consel. </author> <title> A tour of Schism: A partial evaluation system for higher-order applicative languages. </title> <booktitle> In PEPM-93 [PEP93], </booktitle> <pages> pages 145-154. </pages>
Reference: [CU89] <author> Craig Chambers and David Ungar. </author> <title> Customization: Optimizing compiler technology for SELF, a dynamically-typed object-oriented programming language. </title> <journal> SIGPLAN Notices, </journal> <volume> 24(7) </volume> <pages> 146-160, </pages> <year> 1989. </year>
Reference: [EN89] <author> Ramez Elmasri and Shamkant B. Navathe. </author> <title> Fundamentals of Database Systems. </title> <address> Benjamin/Cummings, </address> <year> 1989. </year>
Reference: [GM93] <author> Goetz Graefe and William J. McKenna. </author> <title> The Volcano optimizer generator: Extensibility and efficient search. </title> <booktitle> In Proceedings of the IEEE Conference on Data Engineering, </booktitle> <pages> pages 209-218, </pages> <address> Vi-enna, Austria, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Optimizer generators create optimizers automatically, given a file of transformation rules that the optimizer should consider when optimizing a query <ref> [GM93] </ref>. But optimizer generators also require the database implementor to supply support functions that are difficult to generate automatically. Among the support functions that must be coded by hand are cost estimation functions for each operator that may appear in query plans.
Reference: [GW89] <author> Goetz Graefe and Karen Ward. </author> <title> Dynamic query evaluation plans. </title> <editor> In James Clifford, Bruce Lindsay, and David Maier, editors, </editor> <booktitle> Proceedings of the 1989 ACM SIGMOD International Conference on the Management of Data, </booktitle> <pages> pages 358-366, </pages> <address> Portland, Oregon, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: If some fragment of the data needed for optimization is made dynamic, then some optimization decisions will be postponed until execution time. Such a scenario corresponds to the provision of dynamic query plans in the Volcano query processing system <ref> [GW89] </ref>.
Reference: [JSS89] <author> Neil D. Jones, Peter Sestoft, and Harald Stndergaard. </author> <title> Mix: A self-applicable partial evaluator for experiments in compiler generation. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 2(1) </volume> <pages> 9-50, </pages> <month> February </month> <year> 1989. </year>
Reference: [Law93] <author> Julia L. Lawall. </author> <title> Proofs by structural induction using partial evaluation. </title> <booktitle> In PEPM-93 [PEP93], </booktitle> <pages> pages 155-166. </pages>
Reference-contexts: Probably the biggest of these is the problem of integrating query evaluation cost estimation and cost-based decision-making into the partial-evaluation framework. In this section we consider a less radical departure from the conventions of query optimization, and suggest a use of partial evaluation that allows us 3 Lawall <ref> [Law93] </ref> has shown how one can coax a partial-evaluator into performing this kind of rewriting automatically by first inserting calls to a copy function at strategic points in the code to be expanded.
Reference: [PEP93] <institution> Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation, Copenhagen, Denmark, </institution> <month> June </month> <year> 1993. </year> <month> 24 </month>
References-found: 13

