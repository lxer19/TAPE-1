URL: http://www.eecs.umich.edu/~wuchang/work/tailoring.ps.Z
Refering-URL: http://www.eecs.umich.edu/~wuchang/resume.html
Root-URL: http://www.eecs.umich.edu
Title: Tailoring Routing and Switching Schemes to Application Workloads in Multicomputer Networks  
Author: Wu-chang Feng, Jennifer Rexford, Stuart Daniel, Ashish Mehra, and Kang Shin 
Keyword: Multicomputers, interconnection networks, routers, switching, routing  
Address: Ann Arbor, MI 48109-2122  
Affiliation: Real-Time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: Achieving good overall performance in multicomputers requires matching application communication characteristics with a suitable network design. In order to study the complex interactions between router policies and communication workloads, we are building SPIDER (Scalable Point-to-point Interface DrivER), an experimental router that implements various routing-switching combinations through microprogrammable routing engines. By simulating a network of SPIDERs at the cycle level, we evaluate the performance of several routing and switching schemes under a variety of traffic loads. These results show that tuning network policies to application communication characteristics can significantly improve multicomputer performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.-M. Hsu and P. Banerjee, </author> <title> "Performance measurement and trace driven simulation of 13 parallel CAD and numeric applications on a hypercube multicomputer," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> vol. 3, </volume> <pages> pp. 451-464, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: In these systems, fast message exchange enables efficient, fine-grained cooperation between processing elements. Achieving good overall performance requires matching application communication characteristics with a suitable network design. However, parallel applications impose a wide range of communication patterns on the underlying interconnection network. Scientific computations <ref> [1, 2] </ref>, parallel databases, and real-time applications [3, 4] generate distinct distributions for message lengths, interarrival times, and target destination nodes. <p> This assumption was made, in part, due to the analytical tractability of such models and the lack of more realistic data. However, detailed measurements of multicomputer applications have led to more sophisticated message generation models. In particular, these studies show that applications typically generate bursty network traffic <ref> [1, 2] </ref>, due to multi-packet messages and fine-grain handshaking between cooperating nodes. Similarly, multicast communication, for barrier synchronization or global reduction operations, can spawn several copies of a single message. These traffic models have significant impact on network evaluation, since Poissonian arrival processes typically yield overly optimistic performance results. <p> Message/packet length: Message and packet lengths depend on several factors including packet-size restrictions and the mixture of data and control messages. Although fixed-length packets or exponentially-distributed lengths simplify analytic models, recent work shows that real multicomputer applications typically generate bimodal packet-length distributions <ref> [1, 2] </ref>. This occurs because inter-node communication often consists of large data transfers, coupled with small request and acknowledgements packets. A router design can accommodate different packet lengths by separating short and long packets onto different virtual channels [10, 11]. <p> In particular, many scientific programs generate permutation patterns such as matrix-transpose (dimension-reversal), bit-complement, and bit-reversal [13-16]. Other application constructs, such as synchronization or multicast operations, may induce "hot-spots" of heavily-utilized nodes and links [16-18]. Finally, dynamic models <ref> [1] </ref> can produce variation in target destinations during the course of application execution. 3 & Interface Control Memory Buffer (1 MByte) Memory Reservation Status Unit Unit CRC Time Stamp Unit Unit CRC Control Memory Programmable Routing Controller To/from host (via VME bus) NI TX (x 3) (x 3) Routing Engine PRC <p> However, this effect varies with the network load and the underlying traffic pattern, as shown in Figure 5 (b). This experiment considers bursty traffic, in contrast to the traditional Poissonian packet arrival process in 12 packet interarrivals <ref> [1] </ref>. Packet interarrivals stem from two independent normal distributions, with different means; sources randomly select 80% of interarrivals from the distribution with the small mean. In Figure 5 (b), the applied traffic load (x-axis) changes by varying the large mean, keeping the small mean fixed at 100 cycles.
Reference: [2] <author> R. Cypher, A. Ho, S. Konstantinidou, and P. Messina, </author> <title> "Architectural requirements of parallel scientific applications with explicit communication," </title> <booktitle> in Proc. Int'l Symposium on Computer Architecture, </booktitle> <pages> pp. 2-13, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: In these systems, fast message exchange enables efficient, fine-grained cooperation between processing elements. Achieving good overall performance requires matching application communication characteristics with a suitable network design. However, parallel applications impose a wide range of communication patterns on the underlying interconnection network. Scientific computations <ref> [1, 2] </ref>, parallel databases, and real-time applications [3, 4] generate distinct distributions for message lengths, interarrival times, and target destination nodes. <p> This assumption was made, in part, due to the analytical tractability of such models and the lack of more realistic data. However, detailed measurements of multicomputer applications have led to more sophisticated message generation models. In particular, these studies show that applications typically generate bursty network traffic <ref> [1, 2] </ref>, due to multi-packet messages and fine-grain handshaking between cooperating nodes. Similarly, multicast communication, for barrier synchronization or global reduction operations, can spawn several copies of a single message. These traffic models have significant impact on network evaluation, since Poissonian arrival processes typically yield overly optimistic performance results. <p> Message/packet length: Message and packet lengths depend on several factors including packet-size restrictions and the mixture of data and control messages. Although fixed-length packets or exponentially-distributed lengths simplify analytic models, recent work shows that real multicomputer applications typically generate bimodal packet-length distributions <ref> [1, 2] </ref>. This occurs because inter-node communication often consists of large data transfers, coupled with small request and acknowledgements packets. A router design can accommodate different packet lengths by separating short and long packets onto different virtual channels [10, 11].
Reference: [3] <author> J.-P. Li and M. W. </author> <title> Mutka, "Priority based real-time communication for large scale wormhole networks," </title> <booktitle> in Proc. International Parallel Processing Symposium, </booktitle> <pages> pp. 433-438, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Achieving good overall performance requires matching application communication characteristics with a suitable network design. However, parallel applications impose a wide range of communication patterns on the underlying interconnection network. Scientific computations [1, 2], parallel databases, and real-time applications <ref> [3, 4] </ref> generate distinct distributions for message lengths, interarrival times, and target destination nodes. Message lengths can vary depending on packetization policies as well as the type of communication (e.g., data requests, data transfers, and acknowledgement messages), while message interarrival times depend on task granularity and scheduling within the network.
Reference: [4] <author> J. Rexford and K. G. Shin, </author> <title> "Support for multiple classes of traffic in multicomputer routers," </title> <booktitle> in Proc. Parallel Computer Routing and Communication Workshop, </booktitle> <pages> pp. 116-130, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Achieving good overall performance requires matching application communication characteristics with a suitable network design. However, parallel applications impose a wide range of communication patterns on the underlying interconnection network. Scientific computations [1, 2], parallel databases, and real-time applications <ref> [3, 4] </ref> generate distinct distributions for message lengths, interarrival times, and target destination nodes. Message lengths can vary depending on packetization policies as well as the type of communication (e.g., data requests, data transfers, and acknowledgement messages), while message interarrival times depend on task granularity and scheduling within the network. <p> Carrying these two types of traffic on different virtual channels allows real-time communication to coexist with best-effort packets without sacrificing the performance of either class <ref> [4, 23] </ref>. Similarly, the router may separate short control messages and long data packets onto different virtual channels, perhaps with different switching policies [10-12]. SPIDER can also assign routing algorithms to improve end-to-end performance.
Reference: [5] <author> P. Kermani and L. Kleinrock, </author> <title> "Virtual cut-through: A new computer communication switching technique," </title> <journal> Computer Networks, </journal> <volume> vol. 3, </volume> <pages> pp. 267-286, </pages> <month> September </month> <year> 1979. </year>
Reference-contexts: The switching scheme affects communication performance by determining what link and buffer resources a packet consumes at a given node in its route. Traditional packet switching requires incoming packets to buffer completely before transmission to a subsequent node can begin. In contrast, cut-through switching schemes, such as virtual cut-through <ref> [5] </ref> and wormhole [6], try to forward an incoming packet directly to an idle output link. If the outgoing link is busy, virtual cut-through switching buffers the packet, while a blocked wormhole packet stalls pending access to the link.
Reference: [6] <author> W. J. Dally and C. L. Seitz, </author> <title> "The torus routing chip," </title> <journal> Journal of Distributed Computing, </journal> <volume> vol. 1, no. 3, </volume> <pages> pp. 187-196, </pages> <year> 1986. </year>
Reference-contexts: Traditional packet switching requires incoming packets to buffer completely before transmission to a subsequent node can begin. In contrast, cut-through switching schemes, such as virtual cut-through [5] and wormhole <ref> [6] </ref>, try to forward an incoming packet directly to an idle output link. If the outgoing link is busy, virtual cut-through switching buffers the packet, while a blocked wormhole packet stalls pending access to the link. The routing algorithm determines which links a packet traverses to reach its destination.
Reference: [7] <author> V. Karamcheti and A. A. Chien, </author> <title> "Do faster routers imply faster communication?," </title> <booktitle> in Proc. Parallel Computer Routing and Communication Workshop, </booktitle> <pages> pp. 1-15, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: By considering multiple outgoing links, adaptive algorithms can increase the likelihood of cut-through at intermediate nodes and balance the traffic load in the network. These algorithms, however, may also increase protocol processing overhead due to the possibility of out-of-order arrivals <ref> [7] </ref>. While most oblivious routing algorithms generate only minimum-hop routes between the source and destination nodes, some adaptive schemes consider nonminimal routes in the hope of circumventing network congestion or faulty links.
Reference: [8] <author> J. W. Dolter, S. W. Daniel, A. Mehra, J. L. Rexford, W. Feng, and K. G. Shin, "SPIDER: </author> <title> Flexible and efficient communication support for point-to-point distributed systems," </title> <booktitle> in Proc. Int'l Conf. on Distributed Computing Systems, </booktitle> <pages> pp. 574-580, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: In order to study the complex interactions between router polices and communication workloads, we are building SPIDER (Scalable Point-to-point Interface DrivER), an experimental router that implements various routing-switching combinations through micro-programmable routing engines <ref> [8] </ref>. Microprograms compute the routing-switching decision for each arriving packet, depending on the packet's header and prevailing network conditions. The next section of the paper highlights application communication patterns and motivates how flexible routing and switching can improve network performance. <p> The programmable routing controller (PRC), a 236-pin custom integrated circuit measuring 1:4 cm fi 1:4 cm, is the cornerstone of SPIDER <ref> [8, 20] </ref>. The 12 PRC TXs control packet transmission, while the 4 mi-croprogrammable routing engines coordinate packet reception. Each routing engine performs low-level routing and switching operations for a single incoming link, with the three virtual channels sharing the custom processor.
Reference: [9] <author> J. Rexford, J. Dolter, W. Feng, and K. G. Shin, </author> <title> "PP-MESS-SIM: A simulator for evaluating multicomputer interconnection networks." </title> <booktitle> To appear in Proc. Annual Simulation Symposium, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: By simulating a network of SPIDERs at the cycle level, Section 4 evaluates the performance of SPIDER and the different routing-switching schemes under various application workloads. Varying these low-level parameters required a flexible simulation environment for evaluating multicomputer router designs <ref> [9] </ref>. Section 5 concludes the paper with a discussion of future work on tailoring network policies to application characteristics. 2 2 Motivation Parallel applications generate a wide range of communication workloads depending on the application's granularity and mapping across multiple nodes. <p> Implemented in C++, pp-mess-sim (point-to-point message simulator) is an object-oriented discrete-event simulation tool for evaluating multicomputer router architectures <ref> [9, 20] </ref>. Besides providing a general framework for evaluating router architectures, pp-mess-sim includes a cycle-level model of SPIDER that captures the details of flow control, resource arbitration, and microcode execution.
Reference: [10] <author> J. H. Kim and A. A. Chien, </author> <title> "Evaluation of wormhole routed networks under hybrid traffic loads," </title> <booktitle> in Proc. Hawaii Int'l Conf. on System Sciences, </booktitle> <pages> pp. 276-285, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: This occurs because inter-node communication often consists of large data transfers, coupled with small request and acknowledgements packets. A router design can accommodate different packet lengths by separating short and long packets onto different virtual channels <ref> [10, 11] </ref>. As a further optimization, the Segment Router Architecture [12] employs different switching schemes based on packet length; long packets use wormhole switching to limit buffer-space requirements, while short packets use virtual cut-through switching to reduce channel contention.
Reference: [11] <author> W. Feng, J. Rexford, A. Mehra, S. Daniel, J. Dolter, and K. Shin, </author> <title> "Architectural support for managing communication in point-to-point distributed systems," </title> <type> Tech. Rep. </type> <institution> CSE-TR-197-94, University of Michigan, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: This occurs because inter-node communication often consists of large data transfers, coupled with small request and acknowledgements packets. A router design can accommodate different packet lengths by separating short and long packets onto different virtual channels <ref> [10, 11] </ref>. As a further optimization, the Segment Router Architecture [12] employs different switching schemes based on packet length; long packets use wormhole switching to limit buffer-space requirements, while short packets use virtual cut-through switching to reduce channel contention.
Reference: [12] <author> S. Konstantinidou, </author> <title> "Segment router: A novel router design for parallel computers," </title> <booktitle> in Symposium on Parallel Algorithms and Architectures, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: This occurs because inter-node communication often consists of large data transfers, coupled with small request and acknowledgements packets. A router design can accommodate different packet lengths by separating short and long packets onto different virtual channels [10, 11]. As a further optimization, the Segment Router Architecture <ref> [12] </ref> employs different switching schemes based on packet length; long packets use wormhole switching to limit buffer-space requirements, while short packets use virtual cut-through switching to reduce channel contention.
Reference: [13] <author> S. Chittor and R. Enbody, </author> <title> "Performance evaluation of mesh-connected wormhole-routed networks for interprocessor communication in multicomputers," </title> <booktitle> in Supercomputing, </booktitle> <pages> pp. 647-656, </pages> <month> November </month> <year> 1990. </year>
Reference: [14] <author> J. H. Kim and A. A. Chien, </author> <title> "An evaluation of planar-adaptive routing (PAR)," </title> <booktitle> in Proc. International Symposium on Parallel and Distributed Processing, </booktitle> <year> 1992. </year>
Reference: [15] <author> W. Dally and H. Aoki, </author> <title> "Deadlock-free adaptive routing in multicomputer networks using virtual channels," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> vol. 4, </volume> <pages> pp. 466-475, </pages> <month> April </month> <year> 1993. </year>
Reference: [16] <author> S. Ramany and D. Eager, </author> <title> "The interaction between virtual channel flow control and adap-tive routing in wormhole networks," </title> <booktitle> in Proc. International Conference on Supercomputing, </booktitle> <pages> pp. 136-145, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: In contrast, adaptive algorithms often allow packets to alternate dimensions, possibly blocking other arriving traffic <ref> [16] </ref>. Adaptively changing dimensions may also increase congestion in the center of the mesh, as evidenced by the early saturation of the diagonal routing plot in Varying routing and arrival process under bit-complement traffic Adaptive routing algorithms can improve network performance by making profitable routing decisions based on local information. <p> The dimension-ordered routing algorithm uses the extra virtual channel to reduce contention between packets traveling on the same link <ref> [16, 19] </ref>. In Figure 5 (a), static routing consistently outperforms adaptive routing, especially at high loads. In an 8 fi 8 square mesh, the bit-complement permutation requires source node (c; d) to communicate with node (7 c; 7 d).
Reference: [17] <author> S. Dandamudi and D. Eager, </author> <title> "Hot-spot contention in binary hypercube networks," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. 41, </volume> <pages> pp. 239-244, </pages> <month> February </month> <year> 1992. </year>
Reference: [18] <author> R. Boppana and S. Chalasani, </author> <title> "A comparison of adaptive wormhole routing algorithms," </title> <booktitle> in Proc. Int'l Symposium on Computer Architecture, </booktitle> <pages> pp. 351-360, </pages> <year> 1993. </year>
Reference: [19] <author> W. Dally, </author> <title> "Virtual-channel flow control," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> vol. 3, </volume> <pages> pp. 194-205, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Instead, SPIDER implements software control as close to the network as possible by dedicating a small custom routing engine to each incoming link. 3.1 SPIDER Components As shown in Figure 1, SPIDER manages bidirectional communication with up to four neighboring nodes, with three virtual channels <ref> [19] </ref> on each unidirectional link. The programmable routing controller (PRC), a 236-pin custom integrated circuit measuring 1:4 cm fi 1:4 cm, is the cornerstone of SPIDER [8, 20]. The 12 PRC TXs control packet transmission, while the 4 mi-croprogrammable routing engines coordinate packet reception. <p> The dimension-ordered routing algorithm uses the extra virtual channel to reduce contention between packets traveling on the same link <ref> [16, 19] </ref>. In Figure 5 (a), static routing consistently outperforms adaptive routing, especially at high loads. In an 8 fi 8 square mesh, the bit-complement permutation requires source node (c; d) to communicate with node (7 c; 7 d).
Reference: [20] <author> J. Dolter, </author> <title> A Programmable Routing Controller Supporting Multi-mode Routing and Switching in Distributed Real-Time Systems. </title> <type> PhD thesis, </type> <institution> University of Michigan, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: The programmable routing controller (PRC), a 236-pin custom integrated circuit measuring 1:4 cm fi 1:4 cm, is the cornerstone of SPIDER <ref> [8, 20] </ref>. The 12 PRC TXs control packet transmission, while the 4 mi-croprogrammable routing engines coordinate packet reception. Each routing engine performs low-level routing and switching operations for a single incoming link, with the three virtual channels sharing the custom processor. <p> Implemented in C++, pp-mess-sim (point-to-point message simulator) is an object-oriented discrete-event simulation tool for evaluating multicomputer router architectures <ref> [9, 20] </ref>. Besides providing a general framework for evaluating router architectures, pp-mess-sim includes a cycle-level model of SPIDER that captures the details of flow control, resource arbitration, and microcode execution.
Reference: [21] <institution> Advanced Micro Devices, </institution> <type> 901 Thompson Place, </type> <address> P.O. Box 3453, Sunnyvale CA 94088-3453, </address> <note> Am79168/Am79169 TAXI-275 Technical Manual, ban-0.1m-1/93/0 17490a ed. </note>
Reference-contexts: Each routing engine performs low-level routing and switching operations for a single incoming link, with the three virtual channels sharing the custom processor. The network interface (NI) performs the media access and flow control on four pairs of AMD TAXI chips <ref> [21] </ref>; these TAXI transmitters and receivers control the physical links, providing a low-cost fiber-optic communication fabric. The NI TXs and NI RXs perform the necessary interleaving of virtual channels to and from the physical links, on a word-by-word basis 1 .
Reference: [22] <author> W. J. Dally and C. L. Seitz, </author> <title> "Deadlock-free message routing in multiprocessor interconnection networks," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. C-36, no. 5, </volume> <pages> pp. 547-553, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: The routing engine can also base its routing-switching decisions on the incoming virtual channel (NI RX) identifier, allowing SPIDER to implement different microprograms for each virtual channel. This is useful for implementing deadlock-free wormhole routing algorithms that differentiate between packets on different virtual channels <ref> [22] </ref>. In addition, SPIDER may partition traffic across different NI RXs with distinct network policies. For example, time-constrained messages can use packet switching and static routing for predictable performance, while best-effort packets improve their average latency through cut-through switching and adaptive routing.
Reference: [23] <author> J. Rexford, J. Dolter, and K. G. Shin, </author> <title> "Hardware support for controlled interaction of guaranteed and best-effort communication," </title> <booktitle> in Proc. Workshop on Parallel and Distributed Real-Time Systems, (Cancun, Mexico), </booktitle> <pages> pp. 188-193, </pages> <publisher> IEEE, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: Carrying these two types of traffic on different virtual channels allows real-time communication to coexist with best-effort packets without sacrificing the performance of either class <ref> [4, 23] </ref>. Similarly, the router may separate short control messages and long data packets onto different virtual channels, perhaps with different switching policies [10-12]. SPIDER can also assign routing algorithms to improve end-to-end performance.
Reference: [24] <author> J. H. Kim and A. A. Chien, </author> <title> "The impact of packetization in wormhole-routed networks," </title> <booktitle> in Proc. Parallel Architectures and Languages, Europe, </booktitle> <year> 1993. </year>
Reference-contexts: Because other studies have shown how tailoring network policies to different packet sizes can significantly improve application performance <ref> [10-12, 24] </ref>, our experiments do not specifically address this issue.
Reference: [25] <author> K. G. Shin and S. Daniel, </author> <title> "Analysis and implementation of hybrid switching." </title> <booktitle> In review, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: Virtual cut-through switching alleviates this contention by buffering blocked packets, at the cost of consuming memory resources at intermediate nodes. A hybrid switching scheme dynamically combines wormhole and virtual cut-through switching, balancing the use of network and memory resources for "storing" blocked packets <ref> [25] </ref>. stalling more than two virtual channels. The SPIDER routing engines implement this algorithm by inspecting an additional packet header field, used to record the number of channel reservations the packet holds.
Reference: [26] <author> C. B. Stunkel, D. G. Shea, B. Abali, M. M. Denneau, P. H. Hochschild, D. J. Joseph, B. J. Nathanson, M. Tsao, and P. R. Varker, </author> <booktitle> "Architecture and implementation of Vulcan," in Proc. International Parallel Processing Symposium, </booktitle> <pages> pp. 268-274, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: To further reduce memory requirements, SPIDER can also implement hybrid algorithms that base switching decisions on buffer utilization. In particular, the routing engines could force blocked packets to stall whenever the buffer memory is full, similar to the buffered wormhole scheme implemented in IBM's Vulcan switch <ref> [26] </ref>. The routing engines' notification FIFOs, described in Section 3, allow the host to inform SPIDER about memory availability.
Reference: [27] <author> H. G. Badr and S. Podar, </author> <title> "An optimal shortest-path routing policy for network computers with regular mesh-connected topologies," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. C-38, </volume> <pages> pp. 1362-1370, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: This reduces packet latency and extends the achievable throughput by balancing traffic load across the network links. The router can further improve performance by favoring outgoing links that provide more future routing options <ref> [27] </ref>. The minimal diagonal algorithm in Figure 4 (a) favors the x-direction whenever a packet has fewer remaining hops in the y-direction, and vice versa; this aggressive approach increases the number of two-choice nodes in a packet's route, allowing traffic to avoid more congested nodes and links.
Reference: [28] <author> A. Agarwal, </author> <title> "Limits on interconnection network performance," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <volume> vol. 2, </volume> <pages> pp. 398-412, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: In fact, dimension-ordered routing outperforms diagonal routing in Figure 4 (b). In dimension-ordered routing, a packet entering a node in one direction generally exits the node traveling in the same direction; this reduces the likelihood that packets from different incoming links contend for the same output port <ref> [28] </ref>. In contrast, adaptive algorithms often allow packets to alternate dimensions, possibly blocking other arriving traffic [16].
Reference: [29] <author> J. Duato, </author> <title> "A new theory of deadlock-free adaptive routing in wormhole networks," </title> <journal> IEEE Trans. Parallel and Distributed Systems, </journal> <pages> pp. 1320-1331, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: The graphs show average latency for wormhole switching under both dimension-ordered and adaptive routing; virtual cut-through experiments showed the same qualitative trends. The adaptive routing algorithm is a fully-adaptive minimal routing scheme that requires two virtual channels per link to prevent network deadlocks <ref> [29] </ref>; in these experiments, both routing algorithms employ a pair of virtual channels to enable fair performance comparisons. The dimension-ordered routing algorithm uses the extra virtual channel to reduce contention between packets traveling on the same link [16, 19].
Reference: [30] <author> F. Hady and D. Smitley, </author> <title> "Adaptive vs. non-adaptive routing: An application driven case study," </title> <type> Tech. Rep. </type> <institution> SRC-TR-93-099, Supercomputing Research Center, Bowie, Maryland, </institution> <month> March </month> <year> 1993. </year> <month> 15 </month>
Reference-contexts: In addition, extra routing flexibility allows source nodes to inject more packets, further increasing contention at the middle of the network. Hence, in some situations, restricted routing flexibility can effectively limit the overuse of network resources <ref> [30] </ref>. However, this effect varies with the network load and the underlying traffic pattern, as shown in Figure 5 (b). This experiment considers bursty traffic, in contrast to the traditional Poissonian packet arrival process in 12 packet interarrivals [1].
Reference: [31] <author> A. A. Chien, </author> <title> "A cost and speed model for k-ary n-cube wormhole routers," </title> <booktitle> in Proc. Hot Interconnects, </booktitle> <month> August </month> <year> 1993. </year> <month> 16 </month>
Reference-contexts: Since it is hard to predict how these workloads interact with router architectures, we have implemented SPIDER with a substantial amount of flexibility. Although the costs of such flexibility may sometimes outweigh the performance benefits <ref> [31] </ref>, SPIDER can be used to evaluate a wide spectrum of network policies, from which a subset of the most useful schemes could then be efficiently implemented in subsequent router designs.
References-found: 31

