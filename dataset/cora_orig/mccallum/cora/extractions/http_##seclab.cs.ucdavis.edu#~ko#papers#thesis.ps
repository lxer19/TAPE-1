URL: http://seclab.cs.ucdavis.edu/~ko/papers/thesis.ps
Refering-URL: http://seclab.cs.ucdavis.edu/~ko/calvin.html
Root-URL: http://www.cs.ucdavis.edu
Title: EXECUTION MONITORING OF SECURITY-CRITICAL PROGRAMS IN A DISTRIBUTED SYSTEM: A SPECIFICATION-BASED APPROACH  
Author: By Calvin Cheuk Wang Ko DAVIS Karl N. Levitt, Chair Manfred Ruschitzka Matthew Bishop 
Degree: M.S. (University of California, Davis) 1993 DISSERTATION Submitted in partial satisfaction of the requirements for the degree of DOCTOR OF PHILOSOPHY in Computer Science in the GRADUATE DIVISION of the  Approved:  Committee in Charge  
Date: 1990  1996  
Address: Hong Kong)  
Affiliation: B.S. (University of  UNIVERSITY OF CALIFORNIA  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. Anderson, </author> <title> "Safeguard final report: Detecting unusual program behavior using the NIDES statistical component," </title> <type> Technical report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Also, as subjects alter their behavior, their corresponding profiles change. The NIDES statistical component is also used to monitor activities of application programs in the SAFEGUARD project <ref> [1] </ref>. Its main goal is to detect unauthorized use of applications or application classes on restricted data, but the methodology is useful in the detection of Trojan horses and masquerading applications too. 1.3.2 Rule-based Approaches Wisdom and Sense (W & S) [52] is a rule-based anomaly detection system.
Reference: [2] <author> J. P. Anderson, </author> <title> "Computer security threat monitoring and surveilance," </title> <type> Technical report, </type> <address> James P. Anderson Co., Fort Washington, PA, </address> <month> April </month> <year> 1980. </year>
Reference-contexts: Also, insiders could misuse their privileges in a correctly configured system. To further enhance a system's security, activities in a system should be monitored to detect potential compromises. 1.3. Anomaly Detection 5 1.3 Anomaly Detection Anomaly detection, first proposed by Anderson <ref> [2] </ref> to detect intrusions in computer systems, involves monitoring activities in a system using audit trails. Later, Denning [15, 16] presented a model of an anomaly-based intrusion detection system. <p> The basic premise behind anomaly detection is that exploitation of a system's vulnerabilities involves abnormal use of the system; security violations can, therefore, be detected from abnormal patterns of system usage. This technique can potentially reveal a masquerader or a legitimate user abusing his or her privileges <ref> [2] </ref>. The basic idea is to establish normal behavior patterns of subjects (e.g., individual users, groups of users, hosts, etc.) by observing audit trails over a duration of time. An audit trail that deviates from the subject's established behavior pattern is regarded as an indication of an intrusion.
Reference: [3] <author> L. Badger et al., </author> <title> "Practical domain and type enforcement for UNIX," </title> <booktitle> in Proceedings of the 1995 Symposium on Security and Privacy, </booktitle> <address> (Oakland, CA), </address> <month> May 8-10, </month> <year> 1995, </year> <pages> pp. 66-77. </pages>
Reference-contexts: Each subject is running in a domain and each object is assigned to a fixed type when it is created. The Domain and Type Enforcement (DTE) approach <ref> [3] </ref> applies type enforcement to a Unix system. It takes the process hierarchy and the file hierarchy of current systems into considerations. The type enforcement policy is specified in the DTE language. It restricts the accesses of a process based on the program it is executing.
Reference: [4] <author> R. W. Baldwin, </author> <title> "Rule based analysis of computer security," </title> <type> Technical report MIT/LCS/TR-401, </type> <institution> Laboratory for Computer Science, Mass. Inst. of Tech., </institution> <address> Cambridge, MA, </address> <month> March </month> <year> 1988. </year>
Reference-contexts: Other rules deal with search paths, system initialization files, and programming conventions. This approach simplifies the task of securing a system's configuration, but excludes alternative configurations set up by individual administrators which are useful. The U-Kuang system <ref> [4] </ref> is a rule-based expert system for checking the security of a Unix file system's configuration. Instead of a predefined configuration policy, U-Kuang enforces a high-level, user-specified policy which defines the set of privileges available to each user.
Reference: [5] <author> D. Bell and L. LaPadula, </author> <title> "Secure computer systems: Mathematical foundations and model," </title> <type> Technical report M74-244, </type> <institution> The MITRE Corp., Bedford, </institution> <address> MA, </address> <year> 1973. </year>
Reference-contexts: Access controls ensure that all direct accesses by subjects (e.g., users or processes) to objects (e.g., files and records) are authorized. Access controls regulate direct accesses to objects, but not what subjects might do with information contained in these objects [14]. In order to achieve confidentiality, information flow controls <ref> [5, 6] </ref> are needed to regulate dissemination of information. Besides access controls and flow controls, authentication is also needed in a computer system to assure the identity of users. Also, it is important to assure that the security mechanisms work properly. 1 1.2. <p> Hyperrule 19 recognizes the rest of the operations after the modify sequence. 5.5 Other Policies This section illustrates how commonly used policies can be specified using PE-grammars. We deal with the Bell-LaPadula Policy and the Clark-Wilson Policy. 5.5.1 Bell-LaPadula Policy Fig. 5.7 shows the Multi-level Security (MLS) Policy <ref> [5] </ref> for a Unix system written as a PE-grammar. The MLS policy requires that a user read only files whose security level is not greater than his current clearance level (Basic Security Property) and write only to files whose security level is not less than his current clearance level (*-Property).
Reference: [6] <author> K. Biba, </author> <title> "Integrity considerations for secure computer systems," </title> <type> Technical report ESD-TR-76-372, </type> <institution> Air Force Electronic Systems Division, Hanscom AFB, </institution> <address> MA, </address> <year> 1977. </year>
Reference-contexts: Access controls ensure that all direct accesses by subjects (e.g., users or processes) to objects (e.g., files and records) are authorized. Access controls regulate direct accesses to objects, but not what subjects might do with information contained in these objects [14]. In order to achieve confidentiality, information flow controls <ref> [5, 6] </ref> are needed to regulate dissemination of information. Besides access controls and flow controls, authentication is also needed in a computer system to assure the identity of users. Also, it is important to assure that the security mechanisms work properly. 1 1.2.
Reference: [7] <author> G. V. Bochmann, </author> <title> "Semantic evaluation from left to right," </title> <journal> Communications of the ACM, </journal> <volume> vol. 19, no. 2, </volume> <pages> pp. 55-62, </pages> <year> 1976. </year>
Reference-contexts: Notation 37 For programming languages, a context-free grammar typically defines the underlying language structure and additional rules impose the context-sensitive constraints. The formalization of such rules leads to a variety of extensions of context-free grammars, such as attribute grammars <ref> [7] </ref> and affix grammars [13]. Environment grammars [41] permit the parameterization of the language syntax and feature so-called environment variables which aid in parsing efficiency, parameterization, the linking of semantic and syntactic information and clarity of presentation.
Reference: [8] <author> W. E. Boebert and R. Y. Kain, </author> <title> "A practial alternative to hierarchical integrity policies," </title> <booktitle> in Proceedings of the 8th National Computer Security Conference, </booktitle> <address> (Gaithersburg, MD), </address> <month> October </month> <year> 1985, </year> <pages> pp. 18-27. </pages>
Reference-contexts: In general, given an intrusion represented by a sequence of actions, we can write a PE-grammar that rejects the traces of a subject that contain this sequence of actions. 7.1.3 Comparison to Type Enforcement In the type-enforcement approach <ref> [8] </ref>, accesses to objects by a subject are restricted by a type-enforcement policy based on the domain of the subject and the type of the object. Each subject is running in a domain and each object is assigned to a fixed type when it is created.
Reference: [9] <author> D. Clark and D. Wilson, </author> <title> "A comparsion of commercial and military computer security policies," </title> <booktitle> in Proceedings of the 1987 Symposium on Security and Privacy, </booktitle> <address> (Oakland, CA), </address> <month> April 27-29, </month> <year> 1987, </year> <pages> pp. 184-194. </pages>
Reference-contexts: Therefore, users should be accountable for the execution of programs. The valid execution trace of a program execution is generally 3.5. Security-Relevant Aspects of Program Behavior 33 a function of the user associated with the execution. The idea is similar to the integrity policy of Clark and Wilson <ref> [9] </ref> in which high-integrity data can only be accessed by authorized users using a particular program. The concept of a user or a process as a subject in an operating system is well understood. <p> and write access on the file to the process; the attached semantic action requires that the clearance level of the user must be equal to the security level of the file as it has to satisfy both the basic security property and the *-property. 5.5.2 Clark-Wilson Policy A Clark-Wilson Policy <ref> [9] </ref> requires that not only a file (or a piece of data) should be accessed by authorized users, but also using authorized programs (or transformation procedures). That is, an access to an object is regulated based on the user and the program the user is using.
Reference: [10] <institution> Computer Emergency Response Team (CERT), Pittsburgh, PA, CA:94-01 Ongoing Network Monitoring Attacks, </institution> <note> Feburary 1994. Available from ftp://info.cert.org/pub/cert advisories/. 97 Bibliography 98 </note>
Reference-contexts: Moreover, an attacker might install a sniffer program and replace utility programs (e.g., ls, ps) that can reveal information about the sniffer program <ref> [10] </ref>. This technique makes it difficult to discover the compromise. In Tripwire, each file to be protected is provided with a precom-puted cryptographic checksum which is theoretically unbreakable without the key. The file is then periodically checked for any modifications by comparing the current checksum with the precomputed checksum.
Reference: [11] <institution> Computer Emergency Response Team (CERT), Pittsburgh, PA, </institution> <note> CA:95-04 NCSA HTTP Daemon for UNIX Vulnerability, February 1995. Available from ftp://info.cert.org/pub/cert advisories/. </note>
Reference-contexts: In fact, it still exists in recent releases of the Unix operating system <ref> [11, 12] </ref>. 2.3 Mail This section describes a vulnerability in the 4.2 BSD UNIX mail utility and several related intrusions that exploit this and similar vulnerabilities. The goal here is to illustrate the difficulties in identifying all variants of an intrusion that exploit the same vulnerability.
Reference: [12] <institution> Computer Emergency Response Team (CERT), Pittsburgh, PA, CA:95-13 Sys-log Vulnerability A Workaround for Sendmail, </institution> <month> October </month> <year> 1995. </year> <note> Available from ftp://info.cert.org/pub/cert advisories/. </note>
Reference-contexts: In fact, it still exists in recent releases of the Unix operating system <ref> [11, 12] </ref>. 2.3 Mail This section describes a vulnerability in the 4.2 BSD UNIX mail utility and several related intrusions that exploit this and similar vulnerabilities. The goal here is to illustrate the difficulties in identifying all variants of an intrusion that exploit the same vulnerability.
Reference: [13] <author> D. Crowe, </author> <title> "Generating parsers for affix grammars," </title> <journal> Communications of the ACM, </journal> <volume> vol. 15, no. 8, </volume> <pages> pp. 728-734, </pages> <year> 1972. </year>
Reference-contexts: Notation 37 For programming languages, a context-free grammar typically defines the underlying language structure and additional rules impose the context-sensitive constraints. The formalization of such rules leads to a variety of extensions of context-free grammars, such as attribute grammars [7] and affix grammars <ref> [13] </ref>. Environment grammars [41] permit the parameterization of the language syntax and feature so-called environment variables which aid in parsing efficiency, parameterization, the linking of semantic and syntactic information and clarity of presentation.
Reference: [14] <author> D. Denning, </author> <title> Cryptography and Data Security. </title> <address> Menlo Park, CA: </address> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1982. </year>
Reference-contexts: Access controls ensure that all direct accesses by subjects (e.g., users or processes) to objects (e.g., files and records) are authorized. Access controls regulate direct accesses to objects, but not what subjects might do with information contained in these objects <ref> [14] </ref>. In order to achieve confidentiality, information flow controls [5, 6] are needed to regulate dissemination of information. Besides access controls and flow controls, authentication is also needed in a computer system to assure the identity of users.
Reference: [15] <author> D. E. Denning, </author> <title> "An intrusion-detection model," </title> <booktitle> in Proceedings of the 1986 Symposium on Security and Privacy, </booktitle> <address> (Oakland, CA), </address> <month> April 7-9, </month> <year> 1986, </year> <pages> pp. 118-131. </pages>
Reference-contexts: To further enhance a system's security, activities in a system should be monitored to detect potential compromises. 1.3. Anomaly Detection 5 1.3 Anomaly Detection Anomaly detection, first proposed by Anderson [2] to detect intrusions in computer systems, involves monitoring activities in a system using audit trails. Later, Denning <ref> [15, 16] </ref> presented a model of an anomaly-based intrusion detection system. The basic premise behind anomaly detection is that exploitation of a system's vulnerabilities involves abnormal use of the system; security violations can, therefore, be detected from abnormal patterns of system usage.
Reference: [16] <author> D. E. Denning, </author> <title> "An intrusion-detection model," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 13, no. 2, </volume> <pages> pp. 222-232, </pages> <year> 1987. </year>
Reference-contexts: To further enhance a system's security, activities in a system should be monitored to detect potential compromises. 1.3. Anomaly Detection 5 1.3 Anomaly Detection Anomaly detection, first proposed by Anderson [2] to detect intrusions in computer systems, involves monitoring activities in a system using audit trails. Later, Denning <ref> [15, 16] </ref> presented a model of an anomaly-based intrusion detection system. The basic premise behind anomaly detection is that exploitation of a system's vulnerabilities involves abnormal use of the system; security violations can, therefore, be detected from abnormal patterns of system usage.
Reference: [17] <author> J. Doak, </author> <title> "The application of feature selection: A comparision of algorithms, and the application of a wide area network analyzer," </title> <type> Master's thesis, </type> <institution> Dept. of Comp. Sci., University of California, Davis, </institution> <year> 1992. </year>
Reference-contexts: Rules can, in principle, be generated automatically from the past behavior. However, selecting features that best delineate normal behavior from intrusive behavior is a difficult problem <ref> [17, 20] </ref>. 1.3.1 Statistical Profile-based Approaches SRI International's Next Generation Real-Time Intrusion-Detection Expert System (NIDES, formerly IDES) [36, 37, 27] is a statistical profile-based anomaly detection systems.
Reference: [18] <author> M. W. Eichin and J. A. Rochlis, </author> <title> "With microscope and tweezers: An analysis of the internet virus of novermber 1988," </title> <booktitle> in Proceedings of the 1989 Symposium on Security and Privacy, </booktitle> <address> (Oakland, CA), </address> <month> May 1-3, </month> <year> 1989, </year> <pages> pp. 326-343. </pages>
Reference-contexts: Configuration Analysis 2 Both formal [39, 42] and informal [22, 34] techniques for assuring the security of a system have been investigated. Despite the advance in computer security and software engineering, current computer systems are still vulnerable to attacks. Many existing computer systems contain vulnerabilities <ref> [48, 46, 18] </ref> that enable attackers to penetrate the systems. The proliferation of computer networking further exacerbates the problem, as computer systems are not just accessible by insiders who are presumably trusted, but by virtually anyone on the network. <p> As mentioned in Section 2.2, the finger daemon contains a vulnerability that enables a remote attacker to inject his or her own code and make the daemon execute the code. This vulnerability was exploited by the Internet Worm <ref> [46, 18] </ref> to execute a copy of the worm in hosts that provide the finger service. The worm attack obviously violates the trace policy since fingerd is allowed to execute only the finger program. 5.3.
Reference: [19] <author> D. Farmer and E. Spafford, </author> <title> "The COPS Security Checker System," </title> <booktitle> in Summer USENIX Conference, </booktitle> <address> (Anaheim, CA), </address> <month> June 11-15, </month> <year> 1990, </year> <pages> pp. 165-170. </pages>
Reference-contexts: Configuration Analysis 3 system's security. As configuration analysis can reveal potential problems before they occur, it is also a preventive approach to security. A widely used configuration checking tool is the Computer Oracle Password and Security System (COPS) <ref> [19] </ref>. COPS enforces a predefined and fixed configuration policy represented in a set of shell scripts that check for common misconfigurations in a Unix system.
Reference: [20] <author> J. Frank, </author> <title> "Artificial intelligence and intrusion detection: Current and future directions," </title> <booktitle> in Proceedings of the 17th National Computer Security Conference, </booktitle> <address> (Baltimore, MD), </address> <month> October 11-14, </month> <year> 1994, </year> <pages> pp. 22-33. </pages>
Reference-contexts: Rules can, in principle, be generated automatically from the past behavior. However, selecting features that best delineate normal behavior from intrusive behavior is a difficult problem <ref> [17, 20] </ref>. 1.3.1 Statistical Profile-based Approaches SRI International's Next Generation Real-Time Intrusion-Detection Expert System (NIDES, formerly IDES) [36, 37, 27] is a statistical profile-based anomaly detection systems.
Reference: [21] <author> T. D. Garvey and T. F. Lunt, </author> <title> "Model based intrusion detection," </title> <booktitle> in Proceedings of the 14th National Computer Security Conference, </booktitle> <address> (Washington, D.C.), </address> <month> October 1-4, </month> <year> 1991, </year> <pages> pp. 372-385. </pages>
Reference-contexts: It is amenable to several optimizations that can make a system built around it practical and efficient. Therefore, using pattern matching to detect penetrations is more efficient than using expert systems. 1.4.4 Model-based Intrusion Detection Model-based intrusion detection <ref> [21] </ref> deals with intrusions at a higher level of abstraction than audit records. In model-based detection, scenario models that represent the charac 1.5. Specification-based Monitoring 12 teristic behavior of intrusions are built. Scenario models allow administrators to generate penetrations in an abstract manner.
Reference: [22] <author> B. Hebbard et al., </author> <title> "A penetration analysis of the michigan terminal system," </title> <journal> ACM Operating System Review, </journal> <volume> vol. 14, no. 1, </volume> <pages> pp. 7-20, </pages> <year> 1980. </year>
Reference-contexts: Besides access controls and flow controls, authentication is also needed in a computer system to assure the identity of users. Also, it is important to assure that the security mechanisms work properly. 1 1.2. Configuration Analysis 2 Both formal [39, 42] and informal <ref> [22, 34] </ref> techniques for assuring the security of a system have been investigated. Despite the advance in computer security and software engineering, current computer systems are still vulnerable to attacks. Many existing computer systems contain vulnerabilities [48, 46, 18] that enable attackers to penetrate the systems.
Reference: [23] <author> A. Heydon, </author> <title> "Specifying and checking Unix security constraints," </title> <booktitle> in Proceedings of the 3rd USENIX Unix Security Symposium, </booktitle> <address> (Baltimore, MD), </address> <month> September 14-16, </month> <year> 1992, </year> <pages> pp. 211-226. Bibliography 99 </pages>
Reference-contexts: One limitation of U-Kuang is that the policy can specify only user and group privileges that can be acquired by a user. The Miro' security constraint file checking system <ref> [23] </ref> checks a file system against a set of user-specified security constraints that defines the legal configurations of the system. 1 A file is setuid root if it is owned by root and has the setuid bit on.
Reference: [24] <author> K. Ilgun, "USTAT: </author> <title> A real-time intrusion detection system for Unix," </title> <booktitle> in Proceedings of the 1993 Symposium on Security and Privacy, </booktitle> <address> (Oakland, CA), </address> <month> May 24-26, </month> <year> 1993, </year> <pages> pp. 16-28. </pages>
Reference-contexts: To date, there is no systematic way to identify misuse signatures, and misuse detection is highly driven by known intrusion scenarios and known system vulnerabilities. There are many misuse detection systems being developed <ref> [37, 31, 24] </ref>. They differ in the way attack signatures are represented and the mechanisms used for checking occurrences of signatures in the audit trails. They can be classified into four approaches: expert systems (if-then-else), state transition analysis, pattern matching, and model-based intrusion detection. <p> However, as the analysis is centralized, DIDS as it stands, cannot be used in a large network consisting of many hosts owing to performance limitations. 1.4.2 State-Transition Analysis The state-transition analysis approach [40] was implemented in USTAT <ref> [24, 25] </ref>. USTAT is a rule-based expert system for detecting intrusions in real time based on state-transition analysis. In state-transition analysis, an intrusion is a sequence of actions performed by the attacker that leads from some initial states to a compromised state.
Reference: [25] <author> K. Ilgun, R. Kermmerer, and P. Porras, </author> <title> "State transition analysis: A rule-based intrusion detection approach," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 21, no. 3, </volume> <pages> pp. 181-199, </pages> <year> 1995. </year>
Reference-contexts: However, as the analysis is centralized, DIDS as it stands, cannot be used in a large network consisting of many hosts owing to performance limitations. 1.4.2 State-Transition Analysis The state-transition analysis approach [40] was implemented in USTAT <ref> [24, 25] </ref>. USTAT is a rule-based expert system for detecting intrusions in real time based on state-transition analysis. In state-transition analysis, an intrusion is a sequence of actions performed by the attacker that leads from some initial states to a compromised state. <p> Then the attacker does not send mail to root, but waits until another user sends mail to root. After a user sends mail to root using mail, the attacker executes the setuid mail-box file of root to obtain root accesses. The state transition analysis approach <ref> [25] </ref> touches on this issue. It attempts to identify the key actions in an intrusion without which the intrusion will not succeed. However, this approach can only identify variants of the intrusion that consist of the same sequence of key actions. <p> However, this approach can only identify variants of the intrusion that consist of the same sequence of key actions. There could be other variants of the intrusion using actions other than the key 2.4. Binmail 25 actions. For example, in <ref> [25] </ref>, the authors identify three key actions: 1) the attacker creates a counterfeit mail-box file of root, 2) the attacker changes the permission of the counterfeit file, and 3) the attacker changes the ownership of the mail-box file.
Reference: [26] <author> K. Jackson, D. DuBois, and C. Stallings, </author> <title> "An expert system application for network intrusion detection," </title> <booktitle> in Proceedings of the 14th National Computer Security Conference, </booktitle> <address> (Washington, D.C.), </address> <month> October 1-4, </month> <year> 1991, </year> <pages> pp. 215-225. </pages>
Reference-contexts: We discuss these approaches, focusing on the expressive power of the signatures as well as on the efficiency of the detection mechanisms. 1.4.1 Expert Systems Most early misuse detection systems employ expert systems to detect penetrations. NIDES [37], W & S [52], MIDAS [44], and NADIR <ref> [26] </ref> have expert-system components that supplement their anomaly detectors. In these systems, penetrations are encoded as expert system 1.4. Misuse Detection 8 rules.
Reference: [27] <author> H. S. Javitz and A. Valdes, </author> <title> "The NIDES statistical component description and justification," </title> <type> Technical report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: Rules can, in principle, be generated automatically from the past behavior. However, selecting features that best delineate normal behavior from intrusive behavior is a difficult problem [17, 20]. 1.3.1 Statistical Profile-based Approaches SRI International's Next Generation Real-Time Intrusion-Detection Expert System (NIDES, formerly IDES) <ref> [36, 37, 27] </ref> is a statistical profile-based anomaly detection systems. The anomaly detector observes audit data and adaptively draws conclusions about the normal behavior of subjects, which can be individual users, groups, remote hosts and the overall system. It uses multivariate methods for profiling normal behavior and identifying deviations.
Reference: [28] <author> K. Jensen, </author> <title> Coloured Petri Nets Basic concepts I. </title> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Duration and interval: The occurrence of a sequence of events within a certain duration or time interval in the audit trail indicates an intrusion. In this approach, an attack signature is a Colored Petri Network (CPN) <ref> [28] </ref>. A CPN is a directed graph in which nodes represent states and edges represent transitions. There can be several start states, but only one final state. At the start of a match, a token is placed in each initial state.
Reference: [29] <author> B. Kernighan and D. Ritchie, </author> <title> The C Programming Language. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall, </publisher> <year> 1978. </year>
Reference-contexts: It serves as a proof-of-concept implementation for our approach. The prototype is written in the C programming language <ref> [29] </ref>. The C programming language was chosen because of its wide-spread use, free availability, and portability across different Unix platforms. The prototype runs under the Solaris 2.4 operating system and 6.2. Implementation Overview: A Unix Prototype 85 uses the auditing services provided by the Sun BSM audit subsystem [49].
Reference: [30] <author> J. Kim and E. Spafford, </author> <title> "The design of a system integrity monitor: Tripwire," </title> <type> Master's thesis, </type> <institution> Department of Computer Science, Purdue University, </institution> <year> 1993. </year>
Reference-contexts: The use of visual notations enhances the understandability and readability of the security constraints, which are otherwise similar to the rules-of-thumb in COPS. Tripwire <ref> [30] </ref> is a file integrity tool that aids system administrators and users in monitoring a designated set of files for any changes.
Reference: [31] <author> S. Kumar, </author> <title> Classification and Detection of Computer Intrusions. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Purdue University, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: To date, there is no systematic way to identify misuse signatures, and misuse detection is highly driven by known intrusion scenarios and known system vulnerabilities. There are many misuse detection systems being developed <ref> [37, 31, 24] </ref>. They differ in the way attack signatures are represented and the mechanisms used for checking occurrences of signatures in the audit trails. They can be classified into four approaches: expert systems (if-then-else), state transition analysis, pattern matching, and model-based intrusion detection. <p> Also, there is no general-purpose mechanism to prune partial matches of attacks other than through assertion primitives built into the 1.4. Misuse Detection 11 model. 1.4.3 Pattern Matching The pattern matching approach <ref> [31] </ref> by Sandeep for detecting intrusions deals with the four types of intrusions below; they are based on the signatures used for their detection. 1. Existence: The existence of an event in the audit trail indicates an intrusion. 2.
Reference: [32] <author> B. W. Lampson, </author> <title> "Dynamic protection structures," </title> <booktitle> in Proceedings of the AFIPS Fall Joint Computer Conference, </booktitle> <volume> vol. </volume> <pages> 35, </pages> <address> (Montvale, NJ), </address> <publisher> AFIPS Press, </publisher> <year> 1969, </year> <pages> pp. 27-38. </pages>
Reference-contexts: Confidentiality is concerned with preventing unauthorized disclosure of information and unauthorized accesses to information. Integrity is concerned with maintaining consistency and correctness of data in the system. Availability is concerned with preventing exhaustion of resources and denial of services to authorized users. Most computer systems employ access controls <ref> [32, 33, 43] </ref> as the first line of defense to protect resources and information in the systems. Access controls ensure that all direct accesses by subjects (e.g., users or processes) to objects (e.g., files and records) are authorized.
Reference: [33] <author> B. W. Lampson, </author> <title> "Protection," </title> <booktitle> in Proceedings of the Fifth Annual Princeton Conference on Information Sciences and Systems, </booktitle> <year> 1971, </year> <pages> pp. 437-443. </pages> <note> Reprinted in Operating System Review 8, </note> <month> 1 (Jan. </month> <year> 1974), </year> <pages> pp. 18-24. </pages>
Reference-contexts: Confidentiality is concerned with preventing unauthorized disclosure of information and unauthorized accesses to information. Integrity is concerned with maintaining consistency and correctness of data in the system. Availability is concerned with preventing exhaustion of resources and denial of services to authorized users. Most computer systems employ access controls <ref> [32, 33, 43] </ref> as the first line of defense to protect resources and information in the systems. Access controls ensure that all direct accesses by subjects (e.g., users or processes) to objects (e.g., files and records) are authorized.
Reference: [34] <author> R. R. Linde, </author> <title> "Operating system pentration," </title> <booktitle> in National Computer Conference, </booktitle> <volume> vol. </volume> <pages> 44, </pages> <address> (Montvale, NJ), </address> <publisher> AFIPS Press, </publisher> <year> 1975, </year> <pages> pp. 361-368. </pages>
Reference-contexts: Besides access controls and flow controls, authentication is also needed in a computer system to assure the identity of users. Also, it is important to assure that the security mechanisms work properly. 1 1.2. Configuration Analysis 2 Both formal [39, 42] and informal <ref> [22, 34] </ref> techniques for assuring the security of a system have been investigated. Despite the advance in computer security and software engineering, current computer systems are still vulnerable to attacks. Many existing computer systems contain vulnerabilities [48, 46, 18] that enable attackers to penetrate the systems.
Reference: [35] <author> D. Longley and M. Shain, </author> <title> Data and Computer Security: Dictionary of Standards, Concepts, and terms. </title> <address> New York: </address> <publisher> Stockton Press, </publisher> <year> 1987. </year>
Reference-contexts: Intruders exploit system vulnerabilities or flaws to gain unauthorized access to the system. * Flaw : A flaw is an error of commission omission or oversight in a system that allows protection mechanisms to be bypassed <ref> [35] </ref>. A program flaw is an error in a program, 1.5. Specification-based Monitoring 14 either in design or implementation, that causes the program to malfunction. We use vulnerabilities and flaws synonymously. * Intrusions: An intrusion is an attack. <p> to subjects so that they can perform oper ations that are not accorded normal users. * Vulnerabilities: A vulnerability is a weakness in automated system security procedures, administrative controls, or internal controls that could be exploited by a thread to gain unauthorized access to information or to disrupt critical processing <ref> [35] </ref>. 1.5.2 Dissertation Outline The rest of this dissertation is organized as follows. Chapter 2 presents a few attack scenarios to motivate our work. These intrusions exploit the vulnerabilities of privileged programs in Unix to gain unauthorized access to the system.
Reference: [36] <author> T. Lunt et al., </author> <title> "A Real-time Intrusion Detection Expert System (IDES)," </title> <type> Technical report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: Rules can, in principle, be generated automatically from the past behavior. However, selecting features that best delineate normal behavior from intrusive behavior is a difficult problem [17, 20]. 1.3.1 Statistical Profile-based Approaches SRI International's Next Generation Real-Time Intrusion-Detection Expert System (NIDES, formerly IDES) <ref> [36, 37, 27] </ref> is a statistical profile-based anomaly detection systems. The anomaly detector observes audit data and adaptively draws conclusions about the normal behavior of subjects, which can be individual users, groups, remote hosts and the overall system. It uses multivariate methods for profiling normal behavior and identifying deviations.
Reference: [37] <author> T. Lunt et al., </author> <title> "A real-time intrusion detection expert system (IDES) final technical report," </title> <type> Technical report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> Feburary </month> <year> 1992. </year> <note> Bibliography 100 </note>
Reference-contexts: Rules can, in principle, be generated automatically from the past behavior. However, selecting features that best delineate normal behavior from intrusive behavior is a difficult problem [17, 20]. 1.3.1 Statistical Profile-based Approaches SRI International's Next Generation Real-Time Intrusion-Detection Expert System (NIDES, formerly IDES) <ref> [36, 37, 27] </ref> is a statistical profile-based anomaly detection systems. The anomaly detector observes audit data and adaptively draws conclusions about the normal behavior of subjects, which can be individual users, groups, remote hosts and the overall system. It uses multivariate methods for profiling normal behavior and identifying deviations. <p> To date, there is no systematic way to identify misuse signatures, and misuse detection is highly driven by known intrusion scenarios and known system vulnerabilities. There are many misuse detection systems being developed <ref> [37, 31, 24] </ref>. They differ in the way attack signatures are represented and the mechanisms used for checking occurrences of signatures in the audit trails. They can be classified into four approaches: expert systems (if-then-else), state transition analysis, pattern matching, and model-based intrusion detection. <p> We discuss these approaches, focusing on the expressive power of the signatures as well as on the efficiency of the detection mechanisms. 1.4.1 Expert Systems Most early misuse detection systems employ expert systems to detect penetrations. NIDES <ref> [37] </ref>, W & S [52], MIDAS [44], and NADIR [26] have expert-system components that supplement their anomaly detectors. In these systems, penetrations are encoded as expert system 1.4. Misuse Detection 8 rules. <p> of an expert rule of NIDES is shown in Fig. 1.1. 1. rule [SimuLogon (#1;*): 2. [+tr:transaction] 3. [+se:session|userid == tr.userid] 4. [?|se.terminal != tr.terminal] 5. ==&gt; 6. [!|printf ("SimuLogon: user %s at terminals %s, %s"n", tr.userid, tr.terminal, se.terminal)] This rule, SimuLogon, is written in the expert-system specification language PBEST <ref> [37] </ref>. It detects a user logging in on a terminal while already logged in somewhere else. When a user logs in, a transaction fact is asserted, and a session fact is added to the fact base of the expert system if the login is successful.
Reference: [38] <author> NASA, Lyndon B. </author> <title> Johnson Space Center, Information System Directorate, Software Technology Branch, </title> <note> Clips Version 5.1 User's Guide, </note> <month> March </month> <year> 1992. </year>
Reference-contexts: Two sessions with the same NID 1.4. Misuse Detection 10 are considered to be owned by the same individual so that the activities of the sessions are aggregated together. In DIDS, both the prototype signature analysis mechanism and the DRA algorithm are implemented using the Clips <ref> [38] </ref> expert-system shell. DIDS consists of a centralized data analyzer that analyzes the audit data collected from the hosts in a local area network. It is also the first intrusion detection system designed to monitor the hosts on a local area network.
Reference: [39] <author> P. Neumann et al., </author> <title> "A provably secure operating system: The system, its applications, and proofs," </title> <type> Technical report CSL-116, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> May </month> <year> 1980. </year>
Reference-contexts: Besides access controls and flow controls, authentication is also needed in a computer system to assure the identity of users. Also, it is important to assure that the security mechanisms work properly. 1 1.2. Configuration Analysis 2 Both formal <ref> [39, 42] </ref> and informal [22, 34] techniques for assuring the security of a system have been investigated. Despite the advance in computer security and software engineering, current computer systems are still vulnerable to attacks. Many existing computer systems contain vulnerabilities [48, 46, 18] that enable attackers to penetrate the systems.
Reference: [40] <author> P. Porras and R. Kemmerer, </author> <title> "Penetration state transitin analysis: A rule-based intrusion detection approach," </title> <booktitle> in Proceedings of the 8th Computer Security Application Conference, </booktitle> <address> (San Antonio, TX), </address> <month> Novermber 30 - December 4, </month> <year> 1992, </year> <pages> pp. 220-229. </pages>
Reference-contexts: However, as the analysis is centralized, DIDS as it stands, cannot be used in a large network consisting of many hosts owing to performance limitations. 1.4.2 State-Transition Analysis The state-transition analysis approach <ref> [40] </ref> was implemented in USTAT [24, 25]. USTAT is a rule-based expert system for detecting intrusions in real time based on state-transition analysis. In state-transition analysis, an intrusion is a sequence of actions performed by the attacker that leads from some initial states to a compromised state.
Reference: [41] <author> M. Ruschitzka and J. L. Clevenger, </author> <title> "Heterogeneous data translations based on environment grammars," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 15, no. 10, </volume> <pages> pp. 1236-1251, </pages> <year> 1989. </year>
Reference-contexts: Notation 37 For programming languages, a context-free grammar typically defines the underlying language structure and additional rules impose the context-sensitive constraints. The formalization of such rules leads to a variety of extensions of context-free grammars, such as attribute grammars [7] and affix grammars [13]. Environment grammars <ref> [41] </ref> permit the parameterization of the language syntax and feature so-called environment variables which aid in parsing efficiency, parameterization, the linking of semantic and syntactic information and clarity of presentation. <p> Definition of Parallel Environment Grammars 38 4.2 Definition of Parallel Environment Grammars The concepts on which parallel environment grammars are based are closely related to those of the environment grammars described in <ref> [41] </ref>. Definition 4.1: A parallel environment grammar (PE-grammar) is an ordered 6-tuple (E; P; T; I E ; R; S) where * E is the set of environment variables, whose ordered set of values is called the environment e. Each environment variable in E is either global or local. <p> The sets of environment variables E, protovariables P , terminals T , initial environment assignments I E , and hyperrules R above are analogous to those of environment grammars <ref> [41] </ref>. However, in a parallel environment grammar, there are no metavariables and the start expression which consists of one or more start notions replaces the start notion in an environment grammar. <p> In this section, we discuss several properties of parallel environment grammars that are related to ambiguity and parsing efficiency. Many of the properties of environment grammars described in <ref> [41] </ref> also apply to parallel environment grammars. Definition 4.4: A PE-grammar G is called ambiguous if for some x 2 L (G) there is more than one parallel derivation of x from S in G. Otherwise, G is called unambiguous. The languages arising in practical applications tend to be unambiguous. <p> Each hyperparser is a top-down parser, similar to the hyperparser described in <ref> [41] </ref>. 4.4. Parallel Hyperparsers 47 4.4.1 Hyperparsers There is one hyperparser per start notion s i in S.
Reference: [42] <author> J. M. Rushby, </author> <title> "Design and verification of secure systems," </title> <booktitle> in Proceeding of the 8th Symposium on Operation System Principles, ACM Operating System Review, </booktitle> <volume> vol. 15, </volume> <month> December </month> <year> 1981, </year> <pages> pp. 12-21. </pages>
Reference-contexts: Besides access controls and flow controls, authentication is also needed in a computer system to assure the identity of users. Also, it is important to assure that the security mechanisms work properly. 1 1.2. Configuration Analysis 2 Both formal <ref> [39, 42] </ref> and informal [22, 34] techniques for assuring the security of a system have been investigated. Despite the advance in computer security and software engineering, current computer systems are still vulnerable to attacks. Many existing computer systems contain vulnerabilities [48, 46, 18] that enable attackers to penetrate the systems.
Reference: [43] <author> J. D. Saltzer and M. D. Schroeder, </author> <title> "The protection of information in computer systems," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 63, no. 9, </volume> <pages> pp. 1278-1308, </pages> <year> 1975. </year>
Reference-contexts: Confidentiality is concerned with preventing unauthorized disclosure of information and unauthorized accesses to information. Integrity is concerned with maintaining consistency and correctness of data in the system. Availability is concerned with preventing exhaustion of resources and denial of services to authorized users. Most computer systems employ access controls <ref> [32, 33, 43] </ref> as the first line of defense to protect resources and information in the systems. Access controls ensure that all direct accesses by subjects (e.g., users or processes) to objects (e.g., files and records) are authorized. <p> Many approaches can be taken to develop trace policies for programs. One approach is to identify what operations a program needs to perform in accomplishing its function and to allow in the policy only these operations. This approach actually applies the least privileges principle <ref> [43] </ref>, and is particularily useful for specifying programs that are designed to perform specific functions (e.g., privileged programs). Another approach is to focus on some important properties of a program such as synchronization and specify the desirable behavior with respect to these properties.
Reference: [44] <author> M. Sebring et al., </author> <title> "Expert systems in intrusion detection: A case study," </title> <booktitle> in Proceedings of the 11th National Computer Security Conference, </booktitle> <month> October </month> <year> 1988, </year> <pages> pp. 74-81. </pages>
Reference-contexts: We discuss these approaches, focusing on the expressive power of the signatures as well as on the efficiency of the detection mechanisms. 1.4.1 Expert Systems Most early misuse detection systems employ expert systems to detect penetrations. NIDES [37], W & S [52], MIDAS <ref> [44] </ref>, and NADIR [26] have expert-system components that supplement their anomaly detectors. In these systems, penetrations are encoded as expert system 1.4. Misuse Detection 8 rules.
Reference: [45] <author> S. Snapp et al., </author> <title> "DIDS (distributed intrusion detection system)-motivation, architecture and an early prototype," </title> <booktitle> in Proceedings of the 14th National Computer Security Conference, </booktitle> <address> (Washington, D.C.), </address> <month> October 1-4, </month> <year> 1992, </year> <pages> pp. 167-176. </pages>
Reference-contexts: Also, it is difficult to use expert system rules to detect cooperating attacks. Additionally, expert systems are general tools, and as such, are less efficient than a monitoring system handcrafted for audit analysis. The Distributed Intrusion Detection System (DIDS) The Distributed Intrusion Detection System (DIDS) <ref> [45] </ref> monitors hosts in a local area network for intrusions. It has a signature analysis component that uses a different way to 1.4. Misuse Detection 9 represent intrusions.
Reference: [46] <author> E. H. Spafford, </author> <title> "The internet worm program: An analysis," </title> <journal> ACM SIGCOM, </journal> <volume> vol. 19, no. 1, </volume> <pages> pp. 17-57, </pages> <year> 1989. </year>
Reference-contexts: Configuration Analysis 2 Both formal [39, 42] and informal [22, 34] techniques for assuring the security of a system have been investigated. Despite the advance in computer security and software engineering, current computer systems are still vulnerable to attacks. Many existing computer systems contain vulnerabilities <ref> [48, 46, 18] </ref> that enable attackers to penetrate the systems. The proliferation of computer networking further exacerbates the problem, as computer systems are not just accessible by insiders who are presumably trusted, but by virtually anyone on the network. <p> As mentioned in Section 2.2, the finger daemon contains a vulnerability that enables a remote attacker to inject his or her own code and make the daemon execute the code. This vulnerability was exploited by the Internet Worm <ref> [46, 18] </ref> to execute a copy of the worm in hosts that provide the finger service. The worm attack obviously violates the trace policy since fingerd is allowed to execute only the finger program. 5.3.
Reference: [47] <author> Sun Microsystem, </author> <title> Man Pages: Rdist remote file distribution program, </title> <month> Novermber </month> <year> 1993. </year>
Reference-contexts: The goal is to give the reader a better understanding of the vulnerabilities, the ways they are exploited, and the ways the exploitations can be detected by monitoring the system actions. 2.1 Rdist Rdist <ref> [47] </ref> (Remote File Distribution Program) is a Unix utility for maintaining identical copies of files over multiple hosts. Since its release in 4.3 BSD Unix, Rdist has been widely used by system administrators and users on almost every major Unix platform. <p> After that, a connection is established between rdistd and 1 In most Unix systems, the single executable file of rdist (e.g., /usr/ucb/rdist ) contains the code of the rdist client and the rdist server. The rdist server is invoked with a special flag, -Server <ref> [47] </ref>. 2 The rcmd (3) interface is also used by the rsh (1c) command. 15 2.1. Rdist 16 rdist through which commands are sent to the server to perform the file update.
Reference: [48] <author> Sun Microsystems, </author> <note> Sun Security Bulletin #120 - 130a, 1993-1995. Available from ftp://ftp.uu.net/systems/sun/sun-dist/bulletins/. </note>
Reference-contexts: Configuration Analysis 2 Both formal [39, 42] and informal [22, 34] techniques for assuring the security of a system have been investigated. Despite the advance in computer security and software engineering, current computer systems are still vulnerable to attacks. Many existing computer systems contain vulnerabilities <ref> [48, 46, 18] </ref> that enable attackers to penetrate the systems. The proliferation of computer networking further exacerbates the problem, as computer systems are not just accessible by insiders who are presumably trusted, but by virtually anyone on the network.
Reference: [49] <author> SunSoft, </author> <title> Mountain View, California, Solaris SHIELD Basic Security Module, </title> <month> August </month> <year> 1994. </year>
Reference-contexts: The C programming language was chosen because of its wide-spread use, free availability, and portability across different Unix platforms. The prototype runs under the Solaris 2.4 operating system and 6.2. Implementation Overview: A Unix Prototype 85 uses the auditing services provided by the Sun BSM audit subsystem <ref> [49] </ref>. The BSM audit subsystem provides a log of the activities that occur in the system. It records the sequence of system events in the order of occurrence. Thus, the audit trails contain a trace of the system.
Reference: [50] <author> A. Tanenbaum, </author> <title> Modern Operating Systems. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice-Hall, Inc., </publisher> <year> 1992. </year>
Reference-contexts: The address space of the process is shared by all threads, which means that they share the same set of global variables. In addition, they also share the same set of open files, timers, signals, etc. Nevertheless, each thread has its own private variables <ref> [50] </ref>. Fig. 6.3 depicts the run-time structure of a parallel hyperparser. The set of hyperpro-cedures is shared by all threads. When control is passed to the parallel hyperparser, the 6.1. Design of DPEM 82 analyzer process consists of only the hyperdispatcher thread.
Reference: [51] <author> H. Teng, K. Chen, and S. Lu, </author> <title> "Adaptive real-time anomaly detection using inductively generated sequential patterns," </title> <booktitle> in Proceedings of the 1990 Symposium on Security and Privacy, </booktitle> <address> (Oakland, CA), </address> <month> May 7-9, </month> <year> 1990, </year> <pages> pp. 278-284. Bibliography 101 </pages>
Reference-contexts: The rule base tends to be very large (10 4 to 10 6 rules). An expert can add to or modify the rule base using an English-like syntax. The Time-based Inductive Machine (TIM) <ref> [51] </ref> is also a rule-based anomaly detection system. TIM uses an inductive method to generate rules, which are modified dynamically during the learning phase. Rules remain in the rule-base only if they are highly predictive or confirmed by many observations. Prediction is calculated using an entropy model.
Reference: [52] <author> H. Vaccaro and G. Liepins, </author> <title> "Detection of anomalous computer session activity," </title> <booktitle> in Proceedings of the 1989 Symposium on Security and Privacy, </booktitle> <address> (Oakland, CA), </address> <month> May 1-3, </month> <year> 1989, </year> <pages> pp. 280-289. </pages>
Reference-contexts: Its main goal is to detect unauthorized use of applications or application classes on restricted data, but the methodology is useful in the detection of Trojan horses and masquerading applications too. 1.3.2 Rule-based Approaches Wisdom and Sense (W & S) <ref> [52] </ref> is a rule-based anomaly detection system. It uses a tree-structured rule forest to describe historical behavior patterns that are statistically significant. The rules specify normal feature values conditioned on the values of other features. Rules can overlap in specificity due to incomplete information in the history. <p> We discuss these approaches, focusing on the expressive power of the signatures as well as on the efficiency of the detection mechanisms. 1.4.1 Expert Systems Most early misuse detection systems employ expert systems to detect penetrations. NIDES [37], W & S <ref> [52] </ref>, MIDAS [44], and NADIR [26] have expert-system components that supplement their anomaly detectors. In these systems, penetrations are encoded as expert system 1.4. Misuse Detection 8 rules.
Reference: [53] <author> L. Wall and R. L. Schwartz, </author> <title> Programming Perl. </title> <address> Sepastopol, CA: </address> <publisher> O'Reilly and Associates, Inc., </publisher> <year> 1992. </year>
Reference-contexts: The execution monitor runs continuously. It analyzes the audit data generated by the audit system in real time and reports any violations to the security specification. The first intrusion was simulated using a Perl <ref> [53] </ref> script. The script essentially performs the operations that exploit the vulnerability in rdist described in Section 2.1. The script was executed when the execution monitor was running. Fig. 6.4 shows the report generated by the execution monitor after the program was attacked.
References-found: 53

