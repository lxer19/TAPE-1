URL: http://www.cs.tamu.edu/faculty/vaidya/618/latency.ps
Refering-URL: http://www.cs.tamu.edu/faculty/vaidya/618/lectures.html
Root-URL: http://www.cs.tamu.edu
Title: Impact of Checkpoint Latency on Overhead Ratio of a Checkpointing Scheme  
Author: Nitin H. Vaidya 
Keyword: Key words: Checkpointing and rollback, checkpoint latency, checkpoint overhead, performance analysis.  
Address: College Station, TX 77843-3112  847-8578  
Affiliation: Department of Computer Science Texas A&M University  
Note: Revised paper  
Email: E-mail: vaidya@cs.tamu.edu  
Phone: Phone: (409) 845-0512 FAX: (409)  
Date: 2006  
Abstract: Checkpointing and rollback is a technique to minimize the loss of computation in the presence of failures. Two metrics can be used to characterize a checkpointing scheme: (i) checkpoint overhead (increase in the execution time of the application because of a checkpoint), and (ii) checkpoint latency (duration of time required to save the checkpoint). A checkpointing scheme that attempts to reduce the checkpoint overhead, usually causes the checkpoint latency to increase. This paper shows that a large increase in checkpoint latency is acceptable if it is accompanied by a relatively small reduction in checkpoint overhead. It is also shown that, for equi-distant checkpoints, the optimal checkpoint interval is usually independent of the checkpoint latency. fl Research reported here is supported in part by National Science Foundation grant MIP-9502563. y Preliminary version presented at the Pacific Rim Int. Symp. on Fault-Tolerant Systems, Dec. 1995. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. M. Chandy, J. C. Browne, C. W. Dissly, and W. R. Uhrig, </author> <title> "Analytic models for rollback and recovery strategies in data base systems," </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> vol. 1, </volume> <pages> pp. 100-110, </pages> <month> March </month> <year> 1975. </year>
Reference-contexts: 1 Introduction Many applications require a large amount of time to complete. Such applications can encounter a significant amount of computation loss if a failure occurs during the execution. Checkpointing and rollback recovery is a technique used to minimize the loss of computation in an environment subject to failures <ref> [1] </ref>. A checkpoint is a copy of the application's state stored on a stable storage a stable storage is not subject to failures. The application periodically saves checkpoints; it recovers from a failure by rolling back to a recent checkpoint. <p> Reference [18] also presents measurement of checkpoint latency and overhead for a few applications. There has been extensive work on analysis of checkpointing schemes (e.g. <ref> [1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 20] </ref>). Previous work does not take into account checkpoint latency L. However, rollback overhead R is sometimes accounted for. <p> Because the model used by Leung and Choo [9] is very general, they fail to derive the result in Section 4.1 that T opt is independent of R and L. Also, our analytical derivation is much simpler than [9]. The optimal checkpoint intervals derived by Chandy et al. <ref> [1] </ref> and Duda [3] are dependent on R. Chandy et al. assume that a failure while taking a checkpoint only requires restart of the checkpoint, but a rollback to previous checkpoint is not necessary. Chandy et al. also analyze another model that assumes failures do not occur during recovery.
Reference: [2] <author> E. G. Coffman and E. N. Gilbert, </author> <title> "Optimal strategies for scheduling checkpoints and preventive mentanance," </title> <journal> IEEE Trans. Reliab., </journal> <volume> vol. 39, </volume> <pages> pp. 9-18, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Reference [18] also presents measurement of checkpoint latency and overhead for a few applications. There has been extensive work on analysis of checkpointing schemes (e.g. <ref> [1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 20] </ref>). Previous work does not take into account checkpoint latency L. However, rollback overhead R is sometimes accounted for. <p> Chandy et al. also analyze another model that assumes failures do not occur during recovery. Duda [3] assumes that failures cannot occur during checkpointing or rollback. Lohman and Muckstadt [11] also assume that failures cannot occur during checkpointing or rollback. The optimal checkpoint interval derived by Coffman and Gilbert <ref> [2] </ref> is independent of R, however, they assume that a failure cannot occur during rollback.
Reference: [3] <author> A. Duda, </author> <title> "The effects of checkpointing on program execution time," </title> <journal> Information Processing Letters, </journal> <volume> vol. 16, </volume> <pages> pp. 221-229, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: Reference [18] also presents measurement of checkpoint latency and overhead for a few applications. There has been extensive work on analysis of checkpointing schemes (e.g. <ref> [1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 20] </ref>). Previous work does not take into account checkpoint latency L. However, rollback overhead R is sometimes accounted for. <p> Also, our analytical derivation is much simpler than [9]. The optimal checkpoint intervals derived by Chandy et al. [1] and Duda <ref> [3] </ref> are dependent on R. Chandy et al. assume that a failure while taking a checkpoint only requires restart of the checkpoint, but a rollback to previous checkpoint is not necessary. Chandy et al. also analyze another model that assumes failures do not occur during recovery. Duda [3] assumes that failures <p> [1] and Duda <ref> [3] </ref> are dependent on R. Chandy et al. assume that a failure while taking a checkpoint only requires restart of the checkpoint, but a rollback to previous checkpoint is not necessary. Chandy et al. also analyze another model that assumes failures do not occur during recovery. Duda [3] assumes that failures cannot occur during checkpointing or rollback. Lohman and Muckstadt [11] also assume that failures cannot occur during checkpointing or rollback. The optimal checkpoint interval derived by Coffman and Gilbert [2] is independent of R, however, they assume that a failure cannot occur during rollback.
Reference: [4] <author> R. Geist, R. Reynolds, and J. Westall, </author> <title> "Selection of a checkpoint interval in a critical-task environment," </title> <journal> IEEE Trans. Reliab., </journal> <volume> vol. 37, </volume> <pages> pp. 395-400, </pages> <month> October </month> <year> 1988. </year>
Reference-contexts: Lohman and Muckstadt [11] also assume that failures cannot occur during checkpointing or rollback. The optimal checkpoint interval derived by Coffman and Gilbert [2] is independent of R, however, they assume that a failure cannot occur during rollback. Toueg and Babaoglu [16] and Geist et al. <ref> [4] </ref> also consider optimal checkpoint placement, however, their results cannot be applied to the problem considered in this paper. 7 Conclusions This paper evaluates an expression for the overhead ratio of a checkpointing scheme, as a function of checkpoint latency (L) and checkpoint overhead (C).
Reference: [5] <author> E. Gelenbe and D. Derochette, </author> <title> "Performance of rollback recovery systems under intermittent failures," </title> <journal> Comm. ACM, </journal> <volume> vol. 21, </volume> <pages> pp. 493-499, </pages> <month> June </month> <year> 1978. </year>
Reference-contexts: Reference [18] also presents measurement of checkpoint latency and overhead for a few applications. There has been extensive work on analysis of checkpointing schemes (e.g. <ref> [1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 20] </ref>). Previous work does not take into account checkpoint latency L. However, rollback overhead R is sometimes accounted for.
Reference: [6] <author> E. Gelenbe, </author> <title> "On the optimum checkpointing interval," </title> <journal> J. ACM, </journal> <volume> vol. 2, </volume> <pages> pp. 259-270, </pages> <month> April </month> <year> 1979. </year>
Reference-contexts: Reference [18] also presents measurement of checkpoint latency and overhead for a few applications. There has been extensive work on analysis of checkpointing schemes (e.g. <ref> [1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 20] </ref>). Previous work does not take into account checkpoint latency L. However, rollback overhead R is sometimes accounted for.
Reference: [7] <author> V. G. Kulkarni, V. F. Nicola, and K. S. Trivedi, </author> <title> "Effects of checkpointing and queueing on program performance," </title> <journal> Commun. Statist.-Stochastic Models, </journal> <volume> vol. 4, no. 6, </volume> <pages> pp. 615-648, </pages> <year> 1990. </year>
Reference-contexts: Reference [18] also presents measurement of checkpoint latency and overhead for a few applications. There has been extensive work on analysis of checkpointing schemes (e.g. <ref> [1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 20] </ref>). Previous work does not take into account checkpoint latency L. However, rollback overhead R is sometimes accounted for.
Reference: [8] <author> P. L'Ecuyer and J. Malenfant, </author> <title> "Computing optimal checkpointing strategies for rollback and recovery systems," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. 37, </volume> <pages> pp. 491-496, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: Reference [18] also presents measurement of checkpoint latency and overhead for a few applications. There has been extensive work on analysis of checkpointing schemes (e.g. <ref> [1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 20] </ref>). Previous work does not take into account checkpoint latency L. However, rollback overhead R is sometimes accounted for.
Reference: [9] <author> C. H. C. Leung and Q. H. Choo, </author> <title> "On the execution of large batch programs in unreliable computing systems," </title> <journal> IEEE Trans. Softw. Eng., </journal> <volume> vol. SE-10, </volume> <pages> pp. 444-450, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: Specifically, 13 (a) = 10 6 (b) = 10 4 /sec Equation 1 can be obtained by appropriate substitution of parameters in an expression derived by Leung and Choo <ref> [9] </ref>. Because the model used by Leung and Choo [9] is very general, they fail to derive the result in Section 4.1 that T opt is independent of R and L. Also, our analytical derivation is much simpler than [9]. <p> Specifically, 13 (a) = 10 6 (b) = 10 4 /sec Equation 1 can be obtained by appropriate substitution of parameters in an expression derived by Leung and Choo <ref> [9] </ref>. Because the model used by Leung and Choo [9] is very general, they fail to derive the result in Section 4.1 that T opt is independent of R and L. Also, our analytical derivation is much simpler than [9]. The optimal checkpoint intervals derived by Chandy et al. [1] and Duda [3] are dependent on R. <p> substitution of parameters in an expression derived by Leung and Choo <ref> [9] </ref>. Because the model used by Leung and Choo [9] is very general, they fail to derive the result in Section 4.1 that T opt is independent of R and L. Also, our analytical derivation is much simpler than [9]. The optimal checkpoint intervals derived by Chandy et al. [1] and Duda [3] are dependent on R. Chandy et al. assume that a failure while taking a checkpoint only requires restart of the checkpoint, but a rollback to previous checkpoint is not necessary.
Reference: [10] <author> K. Li, J. F. Naughton, and J. S. Plank, </author> <title> "Low-latency, concurrent checkpointing for parallel programs," </title> <journal> IEEE Trans. Par. Distr. Syst., </journal> <volume> vol. 5, </volume> <pages> pp. 874-879, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: The "measured L" curve in Figure 7 plots checkpoint overhead and latency measured for a merge sort program using four different checkpointing schemes the data is borrowed from Li et al. <ref> [10] </ref>. (Although the data in [10] corresponds to a parallel implementation on a shared memory machine, our analysis is applicable to this implementation.) One of the four schemes in the "measured L" curve is sequential checkpointing with overhead C max = 31 seconds. <p> The "measured L" curve in Figure 7 plots checkpoint overhead and latency measured for a merge sort program using four different checkpointing schemes the data is borrowed from Li et al. <ref> [10] </ref>. (Although the data in [10] corresponds to a parallel implementation on a shared memory machine, our analysis is applicable to this implementation.) One of the four schemes in the "measured L" curve is sequential checkpointing with overhead C max = 31 seconds. <p> This indicates that, the checkpointing techniques used in practice can achieve a smaller overhead ratio as compared to the sequential checkpointing, despite an increase in checkpoint latency. 6 Comparison with related work Plank et al. <ref> [13, 12, 10] </ref> present measurements of checkpoint latency and overhead for a few applications, however, they do not present any performance analysis. Reference [18] also presents measurement of checkpoint latency and overhead for a few applications.
Reference: [11] <author> G. M. Lohman and J. A. Muckstadt, </author> <title> "Optimal policy for batch operations: Backup, checkpointing and reorganization," </title> <journal> ACM Trans. Database Syst., </journal> <volume> vol. 2, </volume> <pages> pp. 202-222, </pages> <month> September </month> <year> 1977. </year>
Reference-contexts: Reference [18] also presents measurement of checkpoint latency and overhead for a few applications. There has been extensive work on analysis of checkpointing schemes (e.g. <ref> [1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 20] </ref>). Previous work does not take into account checkpoint latency L. However, rollback overhead R is sometimes accounted for. <p> Chandy et al. also analyze another model that assumes failures do not occur during recovery. Duda [3] assumes that failures cannot occur during checkpointing or rollback. Lohman and Muckstadt <ref> [11] </ref> also assume that failures cannot occur during checkpointing or rollback. The optimal checkpoint interval derived by Coffman and Gilbert [2] is independent of R, however, they assume that a failure cannot occur during rollback.
Reference: [12] <author> J. S. Plank, M. Beck, G. Kingsley, and K. Li, "Libckpt: </author> <title> Transparent checkpointing under Unix," </title> <booktitle> in Usenix Winter 1995 Technical Conference, </booktitle> <address> New Orleans, </address> <month> January </month> <year> 1995. </year> <month> 16 </month>
Reference-contexts: Related work is discussed in Section 6. Conclusions are presented in Section 7. 2 2 Checkpoint Latency We limit our discussion to uni-process applications. For uni-process applications, checkpoint-ing schemes have been proposed that achieve a low checkpoint overhead, while resulting in a large checkpoint latency (e.g., refer <ref> [12] </ref>). In this section, we illustrate the distinction between checkpoint latency and checkpoint overhead with two examples of checkpointing schemes for uni-process applications. Sequential checkpointing is an approach for which checkpoint overhead is essentially identical to checkpoint latency. <p> Sequential checkpointing is an approach for which checkpoint overhead is essentially identical to checkpoint latency. In this approach, when an application process wants to take a checkpoint, it pauses and saves its state on the stable storage <ref> [12] </ref>. The process continues execution only after the state is completely saved on the stable storage. Therefore, the time required to save the checkpoint (i.e., checkpoint latency) is practically identical to the increase in the execution time of the process (i.e., checkpoint overhead). Figure 1 illustrates this approach. <p> However, it results in a larger checkpoint overhead as compared to other approaches. Forked checkpointing is an approach for which checkpoint overhead is usually much smaller than the checkpoint latency. In this approach, when a process wants to take a checkpoint, it forks a child process <ref> [12] </ref>. The state of the child process is identical to that 3 of the parent process when fork is performed. After the fork, the parent process continues computation, while the child process saves its state on the stable storage. Figure 2 (a) illustrates this approach. <p> This indicates that, the checkpointing techniques used in practice can achieve a smaller overhead ratio as compared to the sequential checkpointing, despite an increase in checkpoint latency. 6 Comparison with related work Plank et al. <ref> [13, 12, 10] </ref> present measurements of checkpoint latency and overhead for a few applications, however, they do not present any performance analysis. Reference [18] also presents measurement of checkpoint latency and overhead for a few applications.
Reference: [13] <author> J. S. Plank, </author> <title> Efficient Checkpointing on MIMD Architectures. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, Princeton University, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: This indicates that, the checkpointing techniques used in practice can achieve a smaller overhead ratio as compared to the sequential checkpointing, despite an increase in checkpoint latency. 6 Comparison with related work Plank et al. <ref> [13, 12, 10] </ref> present measurements of checkpoint latency and overhead for a few applications, however, they do not present any performance analysis. Reference [18] also presents measurement of checkpoint latency and overhead for a few applications.
Reference: [14] <author> K. Shin, T.-H. Lin, and Y.-H. Lee, </author> <title> "Optimal checkpointing of real-time tasks," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. 36, </volume> <pages> pp. 1328-1341, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Reference [18] also presents measurement of checkpoint latency and overhead for a few applications. There has been extensive work on analysis of checkpointing schemes (e.g. <ref> [1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 20] </ref>). Previous work does not take into account checkpoint latency L. However, rollback overhead R is sometimes accounted for.
Reference: [15] <author> A. N. Tantawi and M. Ruschitzka, </author> <title> "Performance analysis of checkpointing strategies," </title> <journal> ACM Trans. Comp. Syst., </journal> <volume> vol. 2, </volume> <pages> pp. 123-144, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: Reference [18] also presents measurement of checkpoint latency and overhead for a few applications. There has been extensive work on analysis of checkpointing schemes (e.g. <ref> [1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 20] </ref>). Previous work does not take into account checkpoint latency L. However, rollback overhead R is sometimes accounted for.
Reference: [16] <author> S. Toueg and O. Babaoglu, </author> <title> "On the optimum checkpoint selection problem," </title> <journal> SIAM Journal of Computing, </journal> <volume> vol. 13, </volume> <pages> pp. 630-649, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: Lohman and Muckstadt [11] also assume that failures cannot occur during checkpointing or rollback. The optimal checkpoint interval derived by Coffman and Gilbert [2] is independent of R, however, they assume that a failure cannot occur during rollback. Toueg and Babaoglu <ref> [16] </ref> and Geist et al. [4] also consider optimal checkpoint placement, however, their results cannot be applied to the problem considered in this paper. 7 Conclusions This paper evaluates an expression for the overhead ratio of a checkpointing scheme, as a function of checkpoint latency (L) and checkpoint overhead (C).
Reference: [17] <author> K. S. Trivedi, </author> <title> Probability and Statistics with Reliability, Queueing and Computer Science Applications. </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: It follows that, overhead ratio r = 1 Expected execution time of a checkpoint interval () can be evaluated using the 3-state discrete Markov chain <ref> [17, 21] </ref> presented in Figure 4. State 0 is the initial state, when a 6 checkpoint interval starts execution. A transition from state 0 to state 1 occurs when the interval is completed without a failure. <p> The expected cost (or ) can be evaluated using standard techniques <ref> [17] </ref> as follows: = P 01 K 01 + P 02 K 02 + 1 P 22 Substituting the expressions for various costs and transition probabilities into the above expression for , and simplifying, yields the following expression. = 1 (1 e (T +C) ) e (R+T +L) = 1 e
Reference: [18] <author> N. H. Vaidya, </author> <title> "Another two-level failure recovery scheme: Performance impact of checkpoint placement and checkpoint latency," </title> <type> Tech. Rep. 94-068, </type> <institution> Computer Science Department, Texas A&M University, College Station, </institution> <month> December </month> <year> 1994. </year> <month> (revised Jan. </month> <year> 1995). </year>
Reference-contexts: Reference <ref> [18] </ref> also presents measurement of checkpoint latency and overhead for a few applications. There has been extensive work on analysis of checkpointing schemes (e.g. [1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 20]). Previous work does not take into account checkpoint latency L.
Reference: [19] <author> N. H. Vaidya, </author> <booktitle> "On checkpoint letency," in Pacific Rim International Conference on Fault-Tolerant Systems, </booktitle> <pages> pp. 60-65, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: Thus, after a failure, R + (L C) + (T + C) = R + T + L units of execution is required before the completion of the interval, provided additional failures do not occur <ref> [19] </ref>. 5 checkpoint interval is T + C. (b) When a failure occurs, the checkpoint interval needs R + T + L additional time units to complete, provided another failure does not occur. 4 Performance Analysis Processor failures are assumed to be governed by a Poisson process with rate .
Reference: [20] <author> J. W. Young, </author> <title> "A first order approximation to the optimum checkpoint interval," </title> <journal> Comm. ACM, </journal> <volume> vol. 17, </volume> <pages> pp. 530-531, </pages> <month> September </month> <year> 1974. </year>
Reference-contexts: As the expected number of failures in T + C time units is (T + C), and expected execution time for R + L C time units is 1 It can be verified that, if C is small as compared to 1=, then T opt p 2C=. Young <ref> [20] </ref> previously obtained this approximate expression for T opt by a somewhat different analysis. (Young [20] ignores rollback overhead R and checkpoint latency L in his analysis.) 9 t (R+LC), the checkpoint latency and rollback overhead contribute (T +C) t (R+LC) to . <p> Young <ref> [20] </ref> previously obtained this approximate expression for T opt by a somewhat different analysis. (Young [20] ignores rollback overhead R and checkpoint latency L in his analysis.) 9 t (R+LC), the checkpoint latency and rollback overhead contribute (T +C) t (R+LC) to . Additionally, also includes the expected time t (T + C) required to execute T + C time units of the checkpoint interval. <p> Reference [18] also presents measurement of checkpoint latency and overhead for a few applications. There has been extensive work on analysis of checkpointing schemes (e.g. <ref> [1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 20] </ref>). Previous work does not take into account checkpoint latency L. However, rollback overhead R is sometimes accounted for.
Reference: [21] <author> A. Ziv and J. Bruck, </author> <title> "Analysis of checkpointing schemes for multiprocessor systems," </title> <type> Tech. Rep. RJ 9593, </type> <institution> IBM Almaden Research Center, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: It follows that, overhead ratio r = 1 Expected execution time of a checkpoint interval () can be evaluated using the 3-state discrete Markov chain <ref> [17, 21] </ref> presented in Figure 4. State 0 is the initial state, when a 6 checkpoint interval starts execution. A transition from state 0 to state 1 occurs when the interval is completed without a failure.
References-found: 21

