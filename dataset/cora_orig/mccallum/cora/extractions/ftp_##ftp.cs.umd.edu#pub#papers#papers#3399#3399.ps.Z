URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3399/3399.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Title: TOOL SUPPORT FOR COLLABORATIVE SOFTWARE PROTOTYPING  
Author: Elliot A. Shefrin James M. Purtilo 
Keyword: Reconfiguration, Prototyping, M Technology  
Note: Elliot Shefrin's research has been supported by the Longitudinal Studies Branch, Gerontology Research Center, National Institute on Aging, National Institutes of Health, United States Public Health Service. He can be contacted at mazel@cs.umd.edu, (410) 558-8144. With oversight by the Office of Naval Research, James Purtilo's research has been supported by ARPA in conjunction with the Common Prototyping Language project, contract number N00014-90-C-0015. He can be contacted at purtilo@cs.umd.edu, (301) 405-2706.  
Date: December 1994  
Address: College Park, MD 20742  
Affiliation: Computer Science Department University of Maryland,  
Abstract: Prototyping is a means by which requirements for software projects can be defined and refined before they are committed to firm specifications for the finished software product. By this process, costly and time-consuming errors in specification can be avoided or minimized. Reconfiguration is the concept of altering the program code, bindings between program modules, or logical or physical distribution of software components while allowing the continuing execution of the software being changed. Combining these two notions suggests the potential for a development environment where requirements can be quickly and dynamically evolved. This paper discusses reconfiguration-based prototyping (RBP), that is, the simultaneous consideration of requirements, software behavior and user feedback within a running system in order to derive a clear specification of an intended product. Tools enabling RBP can coordinate the efforts of designers, prototypers, users and subject matter specialists as they work towards concensus on an application's specification by means of a prototype. The authors describe the scope of the modifications that can be effected by an integration of prototyping and reconfiguration protocols, and they then demonstrate that the technology exists to create such an environment. They conclude by describing a software development environment based on RBP. 
Abstract-found: 1
Intro-found: 1
Reference: [CPP94] <author> Chen Chen, Adam Porter, and James Purtilo, </author> <title> Tool Support for Tailored Software Pro-totyping, </title> <booktitle> Proceedings of Symposium on Assessment of Quality Software Development Tools, </booktitle> <address> pp.171-181, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: The fourth part of this prototyping paradigm is the "instrumentation" (4.) window. When we consider a prototype from the engineering perspective, it seems natural that the capability exist to extract performance information from the executing program, whether it is considered an experiment, as in <ref> [CPP94] </ref> and [PLC91], or a model.
Reference: [FD89] <author> Daniel A. Fern and Scott W. Donaldson, Tri-Cycle: </author> <title> A Prototype Methodology for Advanced Software Development, </title> <booktitle> Proceedings of the Hawaii International Conference on System Sciences, </booktitle> <volume> vol. 22:2, </volume> <pages> pp. 377-386, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: However, a virtual control hierarchy is in place by which RBP proceeds. The governing process, shown as "development" (1.) in the figure, is the window at which the designer works. This individual would be the developer cited in <ref> [FD89] </ref> and [MC83]. His task is to interact with the user to tailor the software under test to best address the problem to be solved or risk to be reduced.
Reference: [HP93] <author> Christine Hofmeister and James Purtilo, </author> <title> A Framework for Dynamic Reconfiguration of Distributed Programs, </title> <institution> Computer Science Technical Report Series, CS-TR-3119, Department of Computer Science, University of Maryland, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: The first part of this section explores this in greater depth. Building on this understanding, the second part of section 4 proposes guidelines to ensure that developed prototypes will be able to take advantage of reconfiguration. 4.1 INTERRELATIONSHIPS BETWEEN THE TECHNOLOGIES In <ref> [HP93] </ref> the authors discuss the need to manage three different types of reconfiguration module | implementations, system logical structure, and geometry. <p> In a single-thread application, where, traditionally, the entire process is one load module, it is difficult to make modifications while the application is executing and still maintain the ongoing execution state. Concepts of encode and decode are introduced in <ref> [HP93] </ref> to capture and then reinstall run-time state when a module is to be reconfigured. However, use of these constructs require the designer to correctly anticipate places in the algorithm where reconfiguration will be desired. <p> we can and have described a set of problems the solutions to which are enhanced by combining reconfiguration and prototyping, we can proceed in whatever milieu provides the capability to perform such a combination. 4.2 ESTABLISHING RECONFIGURABILITY In order to initiate reconfiguration, a process must come to a reconfigurable state <ref> [HP93] </ref>. According to [KM90], such a state exists when a process finishes any communication and has produced all output necessary to allow other processes to conclude their tasks and also reach a reconfigurable state. <p> For example, prototyping may be for risk reduction [PLC91] or interface design 21 [MC83]; it may be rapid or evolutionary [WK92]. Similarly, reconfiguration technology includes the aspects of topologic, geometric, and implementational change <ref> [HP93] </ref>. An understanding of the interactions of these factors will be afforded by observation of our RBP model, as it pertains to both our BLSA example and other situations.
Reference: [KM90] <author> Jeff Kramer and Jeff Magee, </author> <title> The Evolving Philosophers Problem: Dynamic Change Management, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 16, no. 11, </volume> <pages> pp. 1293-1306, </pages> <year> 1990. </year>
Reference-contexts: According to <ref> [KM90] </ref>, such a state exists when a process finishes any communication and has produced all output necessary to allow other processes to conclude their tasks and also reach a reconfigurable state.
Reference: [LSZ93] <author> Horst Lichter, Matthias Schneider-Hufschmidt, and Heinz Zullighoven, </author> <title> Prototyping in Industrial Software Projects Bridging the Gap Between Theory and Practice, </title> <booktitle> Proceedings of the 15th International Conference on Software Engineering, </booktitle> <pages> pp. 221-229, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: We have previously discussed the perceived value of having the end users involved in the evolution of specifications for a product, a factor often overlooked in practice <ref> [LSZ93] </ref>. By including this station as an integral component of the RBP protocol, we are ensuring that user input will be considered. <p> The choice of a particular existing problem on which to demonstrate RBP will not, however, allow us to generalize about the places and situations where RBP methods may be brought to bear. There are several schools of thought on the motivation for prototyping and different approaches to each <ref> [LSZ93] </ref>. For example, prototyping may be for risk reduction [PLC91] or interface design 21 [MC83]; it may be rapid or evolutionary [WK92]. Similarly, reconfiguration technology includes the aspects of topologic, geometric, and implementational change [HP93].
Reference: [MC83] <author> R. E. A. Mason and T. T. Carey, </author> <title> Prototyping Interactive Information Systems, </title> <journal> Communications of the ACM, </journal> <volume> vol. 26, no. 5, </volume> <pages> pp. 347-354, </pages> <year> 1983. </year>
Reference-contexts: However, a virtual control hierarchy is in place by which RBP proceeds. The governing process, shown as "development" (1.) in the figure, is the window at which the designer works. This individual would be the developer cited in [FD89] and <ref> [MC83] </ref>. His task is to interact with the user to tailor the software under test to best address the problem to be solved or risk to be reduced. <p> The control panel process, shown as "control" (2.) in the figure, is the window at which prototype alternatives are shown as selectable options. This position may be considered a liaison function, much as the architect in <ref> [MC83] </ref>. This member of the development team would have the responsibility for timing the institution of changes and of manipulating the detailed parameters that would be provided as options. <p> There are several schools of thought on the motivation for prototyping and different approaches to each [LSZ93]. For example, prototyping may be for risk reduction [PLC91] or interface design 21 <ref> [MC83] </ref>; it may be rapid or evolutionary [WK92]. Similarly, reconfiguration technology includes the aspects of topologic, geometric, and implementational change [HP93]. An understanding of the interactions of these factors will be afforded by observation of our RBP model, as it pertains to both our BLSA example and other situations.
Reference: [PLC91] <author> James Purtilo, Aaron Larson, and Jeff Clark, </author> <title> A Methodology for Prototyping-In-The-Large, </title> <booktitle> Proceedings of the 13th International Conference on Software Engineering, </booktitle> <pages> pp. 2-12, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: The fourth part of this prototyping paradigm is the "instrumentation" (4.) window. When we consider a prototype from the engineering perspective, it seems natural that the capability exist to extract performance information from the executing program, whether it is considered an experiment, as in [CPP94] and <ref> [PLC91] </ref>, or a model. <p> There are several schools of thought on the motivation for prototyping and different approaches to each [LSZ93]. For example, prototyping may be for risk reduction <ref> [PLC91] </ref> or interface design 21 [MC83]; it may be rapid or evolutionary [WK92]. Similarly, reconfiguration technology includes the aspects of topologic, geometric, and implementational change [HP93].
Reference: [PFW94] <author> James Purtilo, Charles Falkenberg, Elizabeth White, William Andersen, and Tess Ollove, </author> <title> An Exercise with Prototyping Technology, </title> <year> 1994. </year>
Reference-contexts: 1 INTRODUCTION During the development of software systems, a prototyping phase is often employed to fine tune various aspects of the system or to discover user requirements, preferences, or operational imperatives <ref> [PFW94] </ref>. These aspects may include development of the user interface, testing of various structures for the database, or optimizing internal algorithms. <p> Such a technique can be time-consuming and frustrating, especially when the system takes a while to reach a steady-state or when each iteration of the tuning loop requires many steps. A pivotal point illustrated in <ref> [PFW94] </ref> is that a prototype need not implement the underlying algorithms of the system under development. Rather, all relevant data may be loaded from tables and processing on that data may be simulated. Furthermore, not all aspects of a design require a prototype.
Reference: [Pur91] <author> James Purtilo, </author> <title> Dynamic software reconfiguration supports scientific problem-solving activities, Invited paper, </title> <booktitle> Proceedings of IFIP Conference on Programming Environments and High-Level Scientific Problem Solving, </booktitle> <month> September </month> <year> 1991. </year> <note> Also appears in IFIP Transactions, </note> <editor> ed.Gaffney and Houstis, </editor> <publisher> North Holland, </publisher> <address> pp.245-254, </address> <year> 1992. </year>
Reference-contexts: From this viewpoint, prototyping can be regarded as an information acquisition activity whose principal goal is to reinforce the confidence of the system developer and the user in the correctness of the system specification. In <ref> [Pur91] </ref> the author describes the traditional approach to the tuning procedure as an iterative process of program execution, halting, modification, and restarting. <p> Applied to software, we believe that the concept of reconfiguration | dynamically modifying an executing piece of software | can be employed to advantage in order to make the tuning process more efficient. The current state of understanding regarding reconfiguration is summarized in <ref> [Pur91] </ref>. It is stated that the options for reconfiguration are limited to those anticipated by the developer of the software. Fundamental problems arise because tools for reconfiguration are weak and the steady-state may be easily disturbed by those tools that do exist.
Reference: [WK92] <author> David P. Wood and Kyo C. Kang, </author> <title> A Classification and Bibliography of Software Prototyping, </title> <type> Technical Report CMU/SEI-92-TR-13, </type> <institution> Software Engineering Institute, Carnegie Mellon University, </institution> <month> April </month> <year> 1992. </year> <month> 24 </month>
Reference-contexts: There are several schools of thought on the motivation for prototyping and different approaches to each [LSZ93]. For example, prototyping may be for risk reduction [PLC91] or interface design 21 [MC83]; it may be rapid or evolutionary <ref> [WK92] </ref>. Similarly, reconfiguration technology includes the aspects of topologic, geometric, and implementational change [HP93]. An understanding of the interactions of these factors will be afforded by observation of our RBP model, as it pertains to both our BLSA example and other situations.
References-found: 10

