URL: ftp://ftp.cs.wisc.edu/markhill/SPEC92/micro_specmiss.ps
Refering-URL: http://www.cs.wisc.edu/~markhill/spec92miss.html
Root-URL: 
Title: Cache Performance of the SPEC92 Benchmark Suite  
Author: Jeffrey D. Gee Mark D. Hill Dionisios N. Pnevmatikatos Alan Jay Smith 
Address: Madison, WI 53706  Berkeley, CA 94720  
Affiliation: Sun Microsystems Inc.  Computer Sciences Department University of Wisconsin-Madison  Computer Science Division Dept. of Electrical Engineering and Computer Sciences University of California Berkeley  
Abstract: This paper will appear in IEEE Micro 
Abstract-found: 1
Intro-found: 1
Reference: [Agar88] <author> A. Agarwal, J. Hennessy, and M. Horowitz, </author> <title> ``Cache Performance of Operating System and Multiprogramming Workloads,'' </title> <journal> ACM Trans. Comp. Sys., </journal> <volume> vol. 6, 4, </volume> <month> November </month> <year> 1988, </year> <pages> pp. 393-433. </pages>
Reference-contexts: The initial dtmrs for 16-byte line size, fully-associative caches [Smit85] were later extended to other line sizes [Smit87] and to set-associative caches [Hill87,89]. - -- (d) Agarwal, et al. <ref> [Agar88] </ref> presented miss ratios that include the effects of operating system references and multiprogramming by using microcode to capture address traces from multi-tasked machines. These effects can more than double miss rates from those measured in a uniprogrammed, user-only environment. <p> These include: Amdahl 470 supervisor and user state miss ratios (plots labeled 470.sup and 470.user), VAX 11/780 and VAX 8800 miss ratios (plots labeled VAX.780 and VAX.8800), and miss ratios from <ref> [Agar88] </ref> for a multiprogramming level of 3 (plots labeled agarwal.mul3). (We plot the Amdahl data from the fitted curve in [Smit82]; the original data points are not available.) We note that the VAX8800 data was collected from a very heavily used timeshared system. <p> SPEC floating point, VAX 11/780 and Amdahl 470 user state miss ratios follow, and the SPEC integer miss rates are smallest by a wide margin. All of the data in the literature (see e.g. [Smit82], [Ande91], <ref> [Agar88] </ref>) suggests that operating systems activity significantly increases miss ratios. <p> Similar differences in cache performance between compute bound and multiprogrammed environments are reported in [Mogu91]. The SPEC floating-point benchmark miss ratios are quite close to the dtmrs, the data from <ref> [Agar88] </ref>, and the VAX 11/780 measurements, and for large cache sizes are also very close to the Amdahl 470 user program miss ratios.
Reference: [Ande91] <author> T.E. Anderson, H.M. Levy, B.N. Bershad, and E.D. Lazowska, </author> <title> ``The Interaction of Architecture and Operating System Design,'' </title> <booktitle> Proc. </booktitle> <address> ASPLOS-IV, April, 1991, Santa Clara, CA, </address> <pages> pp. 108-120. </pages>
Reference-contexts: SPEC floating point, VAX 11/780 and Amdahl 470 user state miss ratios follow, and the SPEC integer miss rates are smallest by a wide margin. All of the data in the literature (see e.g. [Smit82], <ref> [Ande91] </ref>, [Agar88]) suggests that operating systems activity significantly increases miss ratios.
Reference: [Borg90] <author> A. Borg, R.E. Kessler, and D.W. Wall, </author> <title> ``Generation and Analysis of Very Long Address Traces,'' </title> <booktitle> Proc. 17th Int'l Symp. Comp. Arch., </booktitle> <address> May, 1990, Seattle, WA, </address> <pages> pp. 270-279. </pages>
Reference-contexts: We compare the SPEC cache miss ratios to design target miss ratios [Smit87], miss ratios measured using hardware monitors at Amdahl [Smit82] and on DEC VAX-series machines [Clar83,88], miss ratios observed from very long address traces <ref> [Borg90] </ref>, and other miss ratios that include operating system and multiprogramming behavior. We note that miss ratios for multiprogrammed workloads with significant operating system activity are known to be high [Agar88,Ande91]. <p> These effects can more than double miss rates from those measured in a uniprogrammed, user-only environment. They used a varied set of 20 applications programs. (e) Borg, et al. <ref> [Borg90] </ref> generated miss ratios for very long address traces using tools similar to our own; those traces were over twelve billion memory references long. The traces were used to evaluate the performance of a variety of caches. <p> In Figures 1 and 2, average miss rates are plotted against the design target miss ratios (labeled dtmr) and primary cache miss ratios from <ref> [Borg90] </ref> for a multiprogrammed workload (labeled borg). Unfortunately, miss ratios from the other studies are not available for separate instruction and data caches, but are plotted against SPEC unified cache results in Figure 3. <p> In Figure 2, we see that data cache miss ratios for the SPEC integer and floating point benchmarks bracket the dtmrs for small cache sizes and are close for the larger sizes for which the dtmrs are defined; all of them are above the <ref> [Borg90] </ref> measurements.
Reference: [Cmel91] <author> R. M. Cmelik, S. I. Kong, D. R. Ditzel, and E. J. Kelly, </author> <title> ``An Analysis of SPARC and MIPS Instruction Set Utilization on the SPEC benchmarks,'' </title> <booktitle> Proc. </booktitle> <address> ASPLOS-IV, April, 1991, Santa Clara, CA, </address> <pages> pp. 290-302. </pages> <note> [DEC91] ``Pixie,'' DEC Ultrix manual page. </note>
Reference-contexts: We must thus caution readers that your actual mileage may vary. Cmelik et al. <ref> [Cmel91] </ref> give instruction counts for the SPEC89 benchmarks. With one exception, Spice, their counts are close to ours. We cannot explain the difference for Spice, although simulation runs at both Berkeley and Madison yielded consistent results.
Reference: [Clar83] <author> D.W. Clark, </author> <title> ``Cache Performance in the VAX-11/780,'' </title> <journal> ACM Trans. Comp. Sys., </journal> <volume> vol. 1, 1, </volume> <month> February </month> <year> 1983, </year> <pages> pp. 24-37. </pages>
Reference-contexts: Note also that the trace includes only actual program loads, stores and instruction fetches; it does not include the extra memory activity such as instruction prefetch that would occur on most machines <ref> [Clar83] </ref>. For analysis of some of the benchmark programs and their execution behavior, see [Saav92a,b]. To increase our confidence in our results we compared them with two other studies that ran the SPEC benchmarks on a MIPS R2000 microprocessor.
Reference: [Clar88] <author> D.W. Clark, P.J. Bannon, J.B. Keller, </author> <title> ``Measuring VAX 8800 Performance with a Histogram Hardware Monitor,'' </title> <booktitle> Proc. 15th Int'l Symp. Comp. Arch., </booktitle> <month> May, </month> <year> 1988, </year> <title> Honolulu, </title> <booktitle> HI, </booktitle> <pages> pp. 176-185. </pages>
Reference: [Hill87] <author> M.D. Hill, </author> <title> ``Aspects of Cache Memory and Instruction Buffer Performance,'' </title> <type> Ph.D. Thesis, </type> <institution> Univ. of California at Berkeley, </institution> <type> Technical Report UCB/CSD 87/381, </type> <month> November </month> <year> 1987. </year>
Reference-contexts: Tycho uses algorithms that, for a given block size, simulate all cache sizes and associativities in a single pass through an address trace <ref> [Hill87] </ref>. Note that since our traces are derived from the MIPS architecture, different results will be obtained for other CPUs and other compilers. We varied cache size from 1 Kbyte to 1 Mbyte, set size from one (direct-mapped) to eight, and block size from 16 to 256 bytes.
Reference: [Hill89] <author> Mark Hill and Alan Jay Smith, </author> <title> ``Evaluating Associativity in CPU Caches,'' </title> <journal> IEEETC, </journal> <volume> 38, 12, </volume> <month> December, </month> <year> 1989, </year> <pages> pp. 1612-1630. </pages>
Reference-contexts: It is worth noting that there are a few anomalies in the data with respect to the effect of associativity on miss ratio. Generally, miss ratios decrease with increased degrees of set associativity, since the probability of mapping conflicts decreases <ref> [Hill89] </ref>. It is possible, however, that miss ratios can increase with increasing associativity if certain reference patterns are present in the memory reference string; we note just that effect at one or more data points for the fpppp, spice, tomcatv, and doduc miss ratios. 3. <p> Previous results based on different block sizes (VAX 11/780, VAX 8800, Agarwal, et al.) or different associativities (VAX 8800, Borg et al.) have been adjusted for these parameters using ratios of miss ratios from prior studies <ref> [Hill89, Smit87] </ref>. A look at Figure 1 suggests that instruction cache miss ratios for the SPEC benchmarks are unusually low, as they are as low as one-fourth of the design target miss ratios and one-half of Borg's miss ratios.
Reference: [Hill] <institution> M.D. Hill, </institution> <note> ``Tycho,'' Unpublished UNIX-style manual page. The Tycho simulator is available from Prof. </note> <institution> Mark Hill, Computer Sciences Dept., University of Wisconsin. </institution>
Reference-contexts: We used version 2.0 of the C compiler and version 2.1 of the Fortran compiler with optimization level according to the SPEC Makefiles. We then used the MIPS pixie [DEC91] tool to generate address traces to feed directly to the tycho <ref> [Hill] </ref> cache simulator. Pixie modifies the compiled code to generate a trace record for each load, store and basic block entry; trace records for all instruction fetches are then constructed from the basic block records.
Reference: [Hinn88] <author> David Hinnant, </author> <title> ``Accurate Unix Benchmarking: Art, Science or Black Magic?,'' </title> <booktitle> IEEE MICRO, </booktitle> <month> October, </month> <year> 1988, </year> <pages> pp. 64-75. </pages>
Reference-contexts: 1. Introduction The 1992 SPEC benchmarks [SPEC91] are a selection of non-trivial programs chosen to standardize benchmarking. SPEC (System Performance Evaluation Consortium) assembled this suite to provide a standard set of realistic benchmarks for inter-system comparisons; see <ref> [Pric89, Hinn88] </ref> for a discussion of the many problems with the benchmarking situation prior to SPEC. Several factors, including strong industrial support for SPEC, the realistic nature of the benchmarks, and acceptable code portability have led to the wide use of these programs for benchmarking purposes.
Reference: [Mogu91] <author> J. C. Mogul, and Anita Borg, </author> <title> ``The Effects of Context Switches on Cache Performance,'' </title> <booktitle> Proc. </booktitle> <address> ASPLOS-IV, April, 1991, Santa Clara, CA, </address> <pages> pp. 75-84. </pages>
Reference-contexts: Similar differences in cache performance between compute bound and multiprogrammed environments are reported in <ref> [Mogu91] </ref>. The SPEC floating-point benchmark miss ratios are quite close to the dtmrs, the data from [Agar88], and the VAX 11/780 measurements, and for large cache sizes are also very close to the Amdahl 470 user program miss ratios.
Reference: [Pnev90] <author> D.N. Pnevmatikatos, M.D. Hill, </author> <title> ``Cache Performance of the Integer SPEC Benchmarks on a RISC,'' </title> <journal> Computer Architecture News, </journal> <volume> vol. 18, 2, </volume> <month> June </month> <year> 1990, </year> <pages> pp. 53-68. </pages>
Reference-contexts: For analysis of some of the benchmark programs and their execution behavior, see [Saav92a,b]. To increase our confidence in our results we compared them with two other studies that ran the SPEC benchmarks on a MIPS R2000 microprocessor. Pnevmatikatos and Hill <ref> [Pnev90] </ref> presented cache miss ratios for the four integer SPEC89 benchmarks (eqntott, espresso, gcc and xlisp). They used a different compiler (gcc) and a tracing methodology that excludes library references. Nevertheless, most miss ratio differences are less than 0.01.
Reference: [Pric89] <author> Walter Price, </author> <title> ``A Benchmark Tutorial,'' </title> <booktitle> IEEE MICRO, </booktitle> <month> October, </month> <year> 1989, </year> <pages> pp. 28-43. </pages>
Reference-contexts: 1. Introduction The 1992 SPEC benchmarks [SPEC91] are a selection of non-trivial programs chosen to standardize benchmarking. SPEC (System Performance Evaluation Consortium) assembled this suite to provide a standard set of realistic benchmarks for inter-system comparisons; see <ref> [Pric89, Hinn88] </ref> for a discussion of the many problems with the benchmarking situation prior to SPEC. Several factors, including strong industrial support for SPEC, the realistic nature of the benchmarks, and acceptable code portability have led to the wide use of these programs for benchmarking purposes.
Reference: [Saav90] <author> Rafael H. Saavedra-Barrera, and Alan Jay Smith, </author> <title> ``Performance Prediction by Benchmark and Machine Analysis,'' </title> <institution> UC Berkeley Computer Science Division Technical Report UCB/CSD 90/607, </institution> <month> December, </month> <year> 1990. </year>
Reference: [Saav92a] <author> Rafael Saavedra-Barrera and Alan Jay Smith, </author> <title> ``Analysis of Benchmark Characteristics and Benchmark Performance Prediction'', </title> <type> Technical Report UCB/CSD-92-715, </type> <institution> UC Berkeley Computer Science Division, </institution> <month> December, </month> <year> 1992. </year> <note> Submitted for publication. </note>
Reference: [Saav92b] <author> Rafael Saaavedra-Barrera, </author> <title> ``CPU Performance Evaluation and Execution Time Prediction Using Narrrow Spectrum Benchmarking'', </title> <institution> UC Berkeley Computer Science Technical Report UCB/CSD 92/684, </institution> <month> February, </month> <year> 1992. </year>
Reference: [Sang84] <author> John Sanguinetti, </author> <title> ``Program Optimization for a Pipelined Machine: A Case Study,'' </title> <booktitle> Proc. 1984 ACM Sigmetrics Conf. on Measurement and Modeling of Computer Systems, </booktitle> <month> August, </month> <year> 1984, </year> <title> Cambridge, </title> <booktitle> Mass., </booktitle> <pages> pp. 88-95. </pages>
Reference-contexts: Second, operating systems routines are usually called into the cache by an exception, interrupt or trap, then run for a short time, and finally are replaced from the cache before they run again; they effectively always face a "cold start" situation. Sanguinetti observes <ref> [Sang84] </ref> that for the Amdahl 580, routines must execute over 600 times per second to stay cache resident. Third, operating system activity is associated with timesharing and high levels of multiprogramming; frequent task switching means that programs are constantly experiencing cold start.
Reference: [Smit82] <author> Alan Jay Smith, </author> <title> ``Cache Memories,'' </title> <journal> Computing Surveys, </journal> <volume> vol. 14, 3, </volume> <month> September </month> <year> 1982. </year>
Reference-contexts: We compare the SPEC cache miss ratios to design target miss ratios [Smit87], miss ratios measured using hardware monitors at Amdahl <ref> [Smit82] </ref> and on DEC VAX-series machines [Clar83,88], miss ratios observed from very long address traces [Borg90], and other miss ratios that include operating system and multiprogramming behavior. We note that miss ratios for multiprogrammed workloads with significant operating system activity are known to be high [Agar88,Ande91]. <p> Evaluation In this section we compare the SPEC miss ratios with miss ratios from previous studies and discuss whether the SPEC applications make suitable cache benchmarks. We first describe the other studies. (a) Smith <ref> [Smit82] </ref> includes several measurements taken with a hardware monitor at Amdahl Corporation on various models of the Amdahl 470V machines, running a standard internal benchmark containing supervisor, commercial and scientific code. <p> include: Amdahl 470 supervisor and user state miss ratios (plots labeled 470.sup and 470.user), VAX 11/780 and VAX 8800 miss ratios (plots labeled VAX.780 and VAX.8800), and miss ratios from [Agar88] for a multiprogramming level of 3 (plots labeled agarwal.mul3). (We plot the Amdahl data from the fitted curve in <ref> [Smit82] </ref>; the original data points are not available.) We note that the VAX8800 data was collected from a very heavily used timeshared system. The Amdahl 470 supervisor data was collected from the execution of a standard internal Amdahl commercial workload. <p> Following in decreasing order of miss ratio are the dtmrs and Agarwal's multiprogrammed miss ratios. SPEC floating point, VAX 11/780 and Amdahl 470 user state miss ratios follow, and the SPEC integer miss rates are smallest by a wide margin. All of the data in the literature (see e.g. <ref> [Smit82] </ref>, [Ande91], [Agar88]) suggests that operating systems activity significantly increases miss ratios.
Reference: [Smit85] <author> Alan Jay Smith, </author> <title> ``Cache Evaluation and the Impact of Workload Choice,'' </title> <booktitle> Proc. 12'th International Symposium on Computer Architecture, </booktitle> <address> June 17-19, 1985, Boston, Mass, </address> <pages> pp. 64-75. </pages> - -- 
Reference-contexts: The 8800 has a 64 Kbyte, write-through, direct-mapped unified cache with a 64-byte block size. In both cases, these were timeshared workloads, measured at DEC in an engineer ing environment. (c) Smith <ref> [Smit85] </ref> introduced the design target miss ratios (dtmrs) to represent typical levels of performance, averaged over a wide class of workloads, ranging from workstations to timeshared mainframes. (In practice, miss ratios for workstations would probably be lower, and for large timeshared mainframes would probably be higher.) He synthesized them from real <p> The initial dtmrs for 16-byte line size, fully-associative caches <ref> [Smit85] </ref> were later extended to other line sizes [Smit87] and to set-associative caches [Hill87,89]. - -- (d) Agarwal, et al. [Agar88] presented miss ratios that include the effects of operating system references and multiprogramming by using microcode to capture address traces from multi-tasked machines.
Reference: [Smit87] <author> Alan Jay Smith, </author> <title> ``Line (Block) Size Choice for CPU Cache Memories,'' </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. C-36, 9, </volume> <month> September </month> <year> 1987, </year> <pages> pp. 1063-1075. </pages>
Reference-contexts: We compare the SPEC cache miss ratios to design target miss ratios <ref> [Smit87] </ref>, miss ratios measured using hardware monitors at Amdahl [Smit82] and on DEC VAX-series machines [Clar83,88], miss ratios observed from very long address traces [Borg90], and other miss ratios that include operating system and multiprogramming behavior. <p> The initial dtmrs for 16-byte line size, fully-associative caches [Smit85] were later extended to other line sizes <ref> [Smit87] </ref> and to set-associative caches [Hill87,89]. - -- (d) Agarwal, et al. [Agar88] presented miss ratios that include the effects of operating system references and multiprogramming by using microcode to capture address traces from multi-tasked machines. <p> Previous results based on different block sizes (VAX 11/780, VAX 8800, Agarwal, et al.) or different associativities (VAX 8800, Borg et al.) have been adjusted for these parameters using ratios of miss ratios from prior studies <ref> [Hill89, Smit87] </ref>. A look at Figure 1 suggests that instruction cache miss ratios for the SPEC benchmarks are unusually low, as they are as low as one-fourth of the design target miss ratios and one-half of Borg's miss ratios.
Reference: [Spec91] <editor> SPEC newsletter, </editor> <volume> vol. 3, 4, </volume> <year> 1991. </year> - -- 
Reference-contexts: 1. Introduction The 1992 SPEC benchmarks <ref> [SPEC91] </ref> are a selection of non-trivial programs chosen to standardize benchmarking. SPEC (System Performance Evaluation Consortium) assembled this suite to provide a standard set of realistic benchmarks for inter-system comparisons; see [Pric89, Hinn88] for a discussion of the many problems with the benchmarking situation prior to SPEC.
References-found: 21

