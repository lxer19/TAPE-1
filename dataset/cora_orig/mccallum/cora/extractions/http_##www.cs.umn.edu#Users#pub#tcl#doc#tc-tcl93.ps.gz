URL: http://www.cs.umn.edu/Users/pub/tcl/doc/tc-tcl93.ps.gz
Refering-URL: http://www.cs.umn.edu/Users/pub/tcl/doc/
Root-URL: http://www.cs.umn.edu
Title: A Compiler for the Tcl Language  
Author: Adam Sah and Jon Blow 
Date: May 24, 1993  
Abstract: Tcl is a highly dynamic language that is especially challenging to execute efficiently. The dual-language nature of the system enforced by the C callback mechanism makes traditional compilation and optimization unrealistic. In addition, the lack of formal data types (and therefore type checking) places severe limits on the ability to provide for efficient data storage at compile time. In this paper, we discuss the many issues involved with compiling Tcl, and present a design for such a system, including the mechanism for embedding a Tcl script into the compiler itself in order to provide user extensibility. The current implementation is presented along with results showing approximately ten times the performance of the existing Tcl interpreter. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: [Bou78] <author> S.R. Bourne. </author> <title> The Unix shell. </title> <journal> The Bell System Technical Journal, </journal> <month> July-August </month> <year> 1978. </year>
Reference-contexts: The interface between Tcl and the running program consists of the Tcl runtime library, which is embedded into the C application code. Tcl appears to the programmer as a syntactically simple combination of Lisp [Wil86], Perl [WS90] and the Unix Shell language <ref> [Bou78] </ref>. Like the Unix Shell, it supports nested commands, automatic concatenation, and newline-command-termination. From Lisp, it borrows `defun'-like syntax, default procedure arguments, and eval (). Like Perl, Tcl's only data type is the string.
Reference: [Ous93] <author> John Ousterhout. </author> <title> An Introduction to Tcl and Tk. </title> <publisher> Addison-Wesley Publishing, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction 1.1 Overview of the Tcl Language Tcl <ref> [Ous93] </ref> is designed to address the need for a "scripting" language, providing high-level control over a program. The interface between Tcl and the running program consists of the Tcl runtime library, which is embedded into the C application code.
Reference: [Sta86] <author> Richard Stallman. </author> <title> The Emacs Lisp Reference Manual. The Free Software Foundation, </title> <year> 1986. </year>
Reference-contexts: Section 6 presents the results of this implementation through a series of small benchmarks, and Section 7 summarizes our efforts and proposes future work. 2 The Compiler Interface 2.1 Previous Work 2.1.1 Emacs Lisp Emacs is a programmable editor whose underlying language is a variant of Mock-Lisp called Emacs Lisp <ref> [Sta86] </ref> (or elisp for short). Included in this system is a 3 "byte-compiler" which preparses the code to a binary format. All of the elisp source files are stored in a single directory, with names ending in ".el".
Reference: [Wil86] <author> Robert Wilensky. LispCraft. W.W.Norton, </author> <year> 1986. </year>
Reference-contexts: The interface between Tcl and the running program consists of the Tcl runtime library, which is embedded into the C application code. Tcl appears to the programmer as a syntactically simple combination of Lisp <ref> [Wil86] </ref>, Perl [WS90] and the Unix Shell language [Bou78]. Like the Unix Shell, it supports nested commands, automatic concatenation, and newline-command-termination. From Lisp, it borrows `defun'-like syntax, default procedure arguments, and eval (). Like Perl, Tcl's only data type is the string.
Reference: [WS90] <author> Larry Wall and Randal L. Schwartz. </author> <title> Programming Perl. </title> <publisher> O'Reilly and Associates, </publisher> <year> 1990. </year> <month> 14 </month>
Reference-contexts: The interface between Tcl and the running program consists of the Tcl runtime library, which is embedded into the C application code. Tcl appears to the programmer as a syntactically simple combination of Lisp [Wil86], Perl <ref> [WS90] </ref> and the Unix Shell language [Bou78]. Like the Unix Shell, it supports nested commands, automatic concatenation, and newline-command-termination. From Lisp, it borrows `defun'-like syntax, default procedure arguments, and eval (). Like Perl, Tcl's only data type is the string. <p> The byte-compiler's output is portable among many platforms. This means that compiled elisp files can be placed on servers, side by side with the original source code, instead of requiring a separate set for each architecture. 2.1.2 Perl Perl <ref> [WS90] </ref> is a scripting language with many characteristics of Tcl: it is designed for high-level control over arbitrary input, its syntax is designed around the string data type, and its support for data types is nearly identical associative arrays, scalar variables, and arrays of scalars (which are similar to Tcl lists).
References-found: 6

