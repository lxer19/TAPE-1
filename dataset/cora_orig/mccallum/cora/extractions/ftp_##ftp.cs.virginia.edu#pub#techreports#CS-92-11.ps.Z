URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-92-11.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Analysis of Deadline-Driven Scheduling Algorithms Using Function-Driven Techniques  
Author: W. Timothy Strayer 
Note: This work is supported in part by the U.S. Naval Ocean Systems Center and the Office of Naval Research under contract N00014-91-J-1514.  
Abstract: Computer Science Report No. TR-92-11 May 4, 1992 
Abstract-found: 1
Intro-found: 1
Reference: [BERN71] <author> Bernstein, A. J. and Sharp, J. C., </author> <title> A Policy-Driven Scheduler for a TimeSharing System, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 14, No. 2, </volume> <pages> pp. </pages> <month> 74-78 (February </month> <year> 1971). </year>
Reference-contexts: By using this abstraction to consider scheduling problems, we shift the emphasis from the analysis of the scheduling algorithm to the analysis of a set of functions. Other important efforts in function-based scheduling include <ref> [BERN71] </ref>, [RUSC77], and [JENS85]. In this paper we examine the problem of meeting task deadlines. The nearest deadline first (NDF) algorithm is known to meet all deadlines if any schedule exists that meets all deadlines.
Reference: [BIYA88] <author> Biyabani, S. R., Stankovic, J. A. and Ramamritham, K., </author> <title> The Integration of Deadline and Criticalness in Hard Real-Time Scheduling, </title> <booktitle> Proceedings of the 1988 IEEE Real-Time Systems Symposium, </booktitle> <address> Huntsville, Alabama, </address> <pages> pp. 152-160 (December 6-8, </pages> <year> 1988). </year>
Reference-contexts: the time we are considering. i T ( ) ," I i t ( ) d i t-( ) ,if d i t a i &gt;( ) InMostCrit i t,( )( ) 0,otherwise = i 1= AND i 1= 13 Biyabani et al. explore this kind of bilevel ranking in <ref> [BIYA88] </ref>. Most notably they offer a new sematic for the term guarantee that reects the uncertainty of the future task set composition.
Reference: [JENS85] <author> Jensen, E. D., Locke, C. D. and Tokuda, H., </author> <title> A Time Driven Scheduling Model for Real-Time Operating Systems, </title> <booktitle> Proceedings of the Real-Time Systems Symposium, </booktitle> <pages> pp. 112-122 (December 3-6, </pages> <year> 1985). </year>
Reference-contexts: By using this abstraction to consider scheduling problems, we shift the emphasis from the analysis of the scheduling algorithm to the analysis of a set of functions. Other important efforts in function-based scheduling include [BERN71], [RUSC77], and <ref> [JENS85] </ref>. In this paper we examine the problem of meeting task deadlines. The nearest deadline first (NDF) algorithm is known to meet all deadlines if any schedule exists that meets all deadlines.
Reference: [LIU73] <author> Liu, C. L. and Layland, J. W., </author> <title> Scheduling Algorithms for Multiprogramming in a Hard Real-Time Environment, </title> <journal> Journal of the ACM, </journal> <volume> Vol. 20, No. 1, </volume> <pages> pp. </pages> <month> 46-61 (January </month> <year> 1973). </year>
Reference-contexts: Consequently, the progression is typically from an algorithm with rich analytical results to a policy that can exploit these results. The task sets are then forced to fit the profile of the algorithm. A example of such a well-studied algorithm is the rate monotonic algorithm introduced in <ref> [LIU73] </ref>; while this algorithm is designed for periodic task sets only, much work has been done to modify the algorithm to include aperiodic tasks, tasks with a secondary level of criticality, and task sets with unknown sizes. <p> Meeting Deadlines An important question that we ask about task sets within real-time systems is: Does there exist a schedule that will ensure that all deadlines of all tasks are met? We know from <ref> [LIU73] </ref> that the nearest deadline first (NDF) algorithm will meet all deadlines for a periodic task set whose fixed size is known a priori. <p> Also note that the task becomes infinitely important just as the deadline is reached. Liu and Layland <ref> [LIU73] </ref> have shown that, if deadlines can be met for a given task set, they will be met using the nearest deadline first policy. <p> Unfortunately, the utilization factor proof in <ref> [LIU73] </ref> only holds for periodic task (a counterexample: task 1 has arrival time a 1 = 5, work required w 1 = 10, deadline d 1 = 15, and task 2 has a 2 = 15, w 2 = 10, d 2 = 25; the utilization factor is 2, yet the
Reference: [RUSC77] <author> Ruschitzka, M. and Fabry, R. S., </author> <title> A Unifying Approach to Scheduling, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 20, No. 7, </volume> <pages> pp. </pages> <month> 469-477 (July </month> <year> 1977). </year>
Reference-contexts: By using this abstraction to consider scheduling problems, we shift the emphasis from the analysis of the scheduling algorithm to the analysis of a set of functions. Other important efforts in function-based scheduling include [BERN71], <ref> [RUSC77] </ref>, and [JENS85]. In this paper we examine the problem of meeting task deadlines. The nearest deadline first (NDF) algorithm is known to meet all deadlines if any schedule exists that meets all deadlines.
Reference: [SHA90] <author> Sha, L. and Goodenough, J. B., </author> <title> Real-Time Scheduling Theory and Ada, </title> <journal> IEEE Computer, </journal> <volume> Vol. 23, No. 4, </volume> <pages> pp. </pages> <month> 53-62 (April </month> <year> 1990). </year>
Reference-contexts: The techniques used to modify rate monotonic theory to include these cases are surveyed in <ref> [SHA90] </ref>. The importance abstraction [STRA92] is a framework for describing scheduling policies by focusing on how importance each task is to the system. Every system has a goal and the tasks within the system are processed with the intent of meeting the system goal.
Reference: [STRA92] <author> Strayer, W. T., </author> <title> Function-Driven Scheduling: A General Framework for Expression and Analysis of Scheduling, </title> <type> Dissertation, </type> <institution> University of Virginia, Department of Computer Science, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: The techniques used to modify rate monotonic theory to include these cases are surveyed in [SHA90]. The importance abstraction <ref> [STRA92] </ref> is a framework for describing scheduling policies by focusing on how importance each task is to the system. Every system has a goal and the tasks within the system are processed with the intent of meeting the system goal.
References-found: 7

