URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1152/CS-TR-93-1152.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1152/
Root-URL: http://www.cs.wisc.edu
Title: Response Time Bounds for Parallel Processor Allocation Policies  
Author: RAJEEV AGRAWAL, RAJESH K. MANSHARAMANI, AND MARY K. VERNON 
Keyword: Categories and Subject Descriptors: C.1.2 [Processor Architectures]: Multiprocessors Parallel Processors; C.4 [Computer Systems Organization]: Performance of Systems Modeling Techniques; D.4.1 [Operating Systems]: Process Management Multiprocessing/Multiprogramming, Scheduling; D.4.8 [Operating Systems]: Performance Queueing Theory, Stochastic Analysis General Terms: Performance Additional Keywords and Phrases: Parallel System Performance, Uniprocessor Performance, Response Time Bounds, Optimal Scheduling Policies, Sample Path Analysis  
Date: June 7, 1993  
Address: Wisconsin, Madison, Wisconsin  
Affiliation: University of  
Abstract: The first result of this paper is a lower bound on mean response time, under a very general workload model, per class of multiprogrammed parallel processor allocation policies. This bound is derived from the mean response time of the optimal uniprocessor scheduling policy that uses the same workload information as the class of parallel processor allocation policies. The derivation of the bound also suggests how tighter bounds can be obtained on a per policy basis in some cases. Key features of the workload model include general job demands, available parallelisms, execution rates, and inter-arrival times, with arbitrary dependencies among these workload variables. The second result is that for linear execution rates (i.e., perfect speedups) and for i.i.d. exponential job demands that are independent of everything else, the Preemptive Smallest Available Parallelism First policy is optimal among policies that use no explicit information about job demand. Likewise, among all processor conserving policies the Preemptive Largest Available Parallelism First policy is pessimal. For the same assumptions it is also shown that the performance of a processor conserving policy is best when every job can make use of all processors and is worst when all jobs are fully sequential. This third result leads to easily computable bounds on mean response time. The second and third results are shown to be sensitive to the assumption of exponential job demands. Finally, some quantitative results are given that illustrate the use and tightness of the derived bounds. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> BRUMELLE, S. </author> <title> Some inequalities for parallel-server queues. </title> <journal> Oper. Res. </journal> <volume> 19, 2 (1971), </volume> <pages> 402-413. </pages>
Reference-contexts: Consider the following assumptions: (a) fD i g 1 i=1 are i.i.d. with distribution B (given below) and independent of everything else. The distribu tion B is a generalized exponential distribution (see <ref> [1] </ref>) defined by B (t) = &lt; 0; t &lt; 0; where 0 &lt; fi 1 and ff &gt; 0. (b) Linear job execution rates (assumption A2) (c) Jobs arrive according to a Poisson process with rate . <p> Under assumptions (b) and (c) when N P the mean response time under FCFS is that of an M=G=1 P queue and when N 1 the mean response time under FCFS is that of an M=G=P queue [12]. Under assumptions (a)-(c) and for P = 2 it follows (see <ref> [1] </ref>) that R F CF S (N P = 2) = R M=G=1 2 &gt; R M=G=2 = R F CF S (N 1); iff &gt; 1 fi which violates (23) when fi &lt; 1=2.
Reference: 2. <author> CONWAY, R., MAXWELL L., AND MILLER, L. </author> <title> Theory of Scheduling. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1967. </year>
Reference: 3. <author> FAYOLLE, G., MITRANI, I., AND IASNOGORODSKI, R. </author> <title> Sharing a processor among many job classes. </title> <journal> J. ACM 27, </journal> <month> 3 (Jul. </month> <year> 1980), </year> <pages> 519-532. </pages>
Reference-contexts: Using Lemma 3.1 we obtain R RRP max (S; R DP S (g i = N i )): 1 DP S for arbitrary g i 's can be obtained assuming a Poisson arrival process from the analysis in <ref> [3] </ref>. As the second example, consider = EQ 2 C 0 and a workload with N i P=2, i = 1; 2; : : :. <p> R RRP was estimated using discrete event simulation and R 1 DP S was computed using the analysis in [4] (which shows how the analysis of <ref> [3] </ref> can be simplified for hyperexponential demand distributions). First consider the EQ policy, where R EQ (N P=2) max (S; R 1 P S ). Figure 3a plots R EQ , the PS bound and the general lower bound for the stated workload.
Reference: 4. <author> FERGUSON, M. </author> <title> Weighted processor sharing results for hyperexponential servers. </title> <journal> IEEE Trans. on Software Engg., </journal> <volume> SE-9, </volume> <month> 4 (Jul. </month> <year> 1983), </year> <pages> 531-535. </pages>
Reference-contexts: R EQ was estimated using simulation and R 1 P S is the mean response time of an M=G=1 P PS queue, which equals (D=P )=(1 ) (see [8]). R RRP was estimated using discrete event simulation and R 1 DP S was computed using the analysis in <ref> [4] </ref> (which shows how the analysis of [3] can be simplified for hyperexponential demand distributions). First consider the EQ policy, where R EQ (N P=2) max (S; R 1 P S ). Figure 3a plots R EQ , the PS bound and the general lower bound for the stated workload.
Reference: 5. <author> HIRAYAMA, T., AND KIJIMA, M. </author> <title> An extremal property of FIFO discipline in G/IFR/1 queues. </title> <journal> Adv. Appl. Proba. </journal> <volume> 21, 2 (1989), </volume> <pages> 481-484. </pages>
Reference-contexts: First consider cases where fD i g 1 i=1 are i.i.d. and independent of everything else. If D i has an increasing failure rate 5 (IFR) distribution then the FCFS policy is optimal in 1 0 <ref> [5] </ref>, and if D i has a decreasing failure rate (DFR) distribution then the Foreground-Background (FB) policy is optimal in 1 0 [8,15]. (The FB policy gives processor policy can allocate one processor continuously to job i and thus obtain D i when job i exits.
Reference: 6. <author> KLEINROCK, L. </author> <title> Time-shared systems: a theoretical treatment. </title> <journal> J. ACM 14, </journal> <month> 2 (Apr. </month> <year> 1967), </year> <pages> 242-261. </pages>
Reference-contexts: (see [9]), a i (t) = min B B N i ; X N j 1 C A It is easy to verify that RRP 2 C 0 . 7 Now consider 1 = DP S 2 1 0 , where DPS stands for the Discrimina tory Processor Sharing policy <ref> [6] </ref>. The allocation of processing power under DPS is given by a 1 g i j2Q 1 (t) P; i 2 Q 1 (t); where 0 &lt; g i &lt; 1 is the discrimination weight of job i.
Reference: 7. <author> KLEINROCK, L. </author> <title> Queueing Systems, Vol I: Theory. </title> <publisher> John Wiley & Sons, </publisher> <address> New York 1975. </address>
Reference-contexts: Under assumptions (a)-(d) we therefore have R P SAP F = R P LAPF = R M=G=1 P = D + D ) D ; (16) where the expression for R M=G=1 P is obtained from <ref> [7] </ref>. Now consider the EQ policy. The mean response time of the EQ policy under assumptions (a)-(d) is equal to the mean response time of an M=G=1 P processor sharing (PS) queue [12]. From [8] we note that R M=G=1 P P S = R M=M=1 P .
Reference: 8. <author> KLEINROCK, L. </author> <title> Queueing Systems, </title> <booktitle> Vol II: Computer Applications. </booktitle> <publisher> John Wiley & Sons, </publisher> <address> New York 1976. </address>
Reference-contexts: be known to the uniprocessor scheduler even after job i departs. 5 A nondiscrete distribution F has increasing (decreasing) failure rate iff for any * &gt; 0 we have that (F (t+*)F (t))=(1F (t)) increases (decreases) with t for all t &gt; 0 and for 1 F (t) &gt; 0 <ref> [8] </ref>. 12 highest priority to the job that has attained least amount of service and processor shares only jobs of the highest priority.) Thus we have, R max (S; R F CF S ); 8 2 0 ; D i ~ IF R; 1 Next, consider cases where D i is <p> Since the H 2 distribution is DFR the general lower bound is given by R fl 1 and R EQ were estimated by discrete event simulation 6 , and R 1 F B was obtained from the analysis in <ref> [8] </ref>. fl 1 versus = D=P for the H, M, and L parallelism distributions given in Table 1 and P=20. Note that the Y-axis of the figure has a log scale. <p> R EQ was estimated using simulation and R 1 P S is the mean response time of an M=G=1 P PS queue, which equals (D=P )=(1 ) (see <ref> [8] </ref>). R RRP was estimated using discrete event simulation and R 1 DP S was computed using the analysis in [4] (which shows how the analysis of [3] can be simplified for hyperexponential demand distributions). <p> Now consider the EQ policy. The mean response time of the EQ policy under assumptions (a)-(d) is equal to the mean response time of an M=G=1 P processor sharing (PS) queue [12]. From <ref> [8] </ref> we note that R M=G=1 P P S = R M=M=1 P .
Reference: 9. <author> LEUTENEGGER, S., AND NELSON, R. </author> <title> Analysis of spatial and temporal scheduling policies for semi-static and dynamic multiprocessor environments. </title> <type> Research Report, </type> <institution> IBM T.J. Watson Research Center, Yorktown Heights, </institution> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: A lower bound for a class of policies may not be tight for all policies under all workloads. If we make specific assumptions about the workload it may be possible to obtain tighter bounds. For example, a previous study <ref> [9] </ref> compares the performance of several policies against the optimal policy under a restricted set of workload assumptions. <p> We know of only two previous papers that contain mean response time bounds for parallel processor scheduling policies. First, Leutenegger and Nelson <ref> [9] </ref> show that PSNTF (Preemptive Smallest Number of Tasks First) is the optimal policy for a set of parallel jobs (no external arrivals) with i.i.d. exponential task service times. <p> This is like the process scheduling mechanism in the Sequent multiprocessor if we assume that all processes have the same priority [19]. When the quantum size goes to zero the processor allocation to each job is directly proportional 14 to its available parallelism and is given by (see <ref> [9] </ref>), a i (t) = min B B N i ; X N j 1 C A It is easy to verify that RRP 2 C 0 . 7 Now consider 1 = DP S 2 1 0 , where DPS stands for the Discrimina tory Processor Sharing policy [6].
Reference: 10. <author> LEUTENEGGER, S., AND VERNON, M. </author> <title> The performance of multiprogrammed multiprocessor scheduling policies. </title> <booktitle> Proc. ACM SIGMETRICS Conf. on Measurement & Modeling of Computer Systems 18, </booktitle> <month> 1 (May </month> <year> 1990), </year> <pages> 226-236. </pages>
Reference-contexts: In some cases we consider exponential demands; in other cases we consider hyperexponential demands. In all experiments we set D = P . (Thus = D=P = .) For most of our experiments we use the following bounded-geometric distribution for available job parallelism (similar to the distribution in <ref> [10] </ref>), with parameters P max and p N = &lt; P with probability P max min (X; P ) with probability 1 P max ; where X = Geometric (p): We consider three specific bounded-geometric distributions for N, which are given in Table 1.
Reference: 11. <author> MAJUMDAR, S., EAGER, D., AND BUNT, R. </author> <title> Scheduling in multiprogrammed parallel systems. </title> <booktitle> Proc. ACM SIGMETRICS Conf. on Measurement & Modeling of Computer Systems 16, </booktitle> <month> 1 (May </month> <year> 1988), </year> <pages> 104-113. </pages>
Reference-contexts: Lemma 3.1 and Theorem 3.1 also hold for and thus the lower bound result is true for policies that have complete knowledge of job demand characteristics (e.g. Preemptive Smallest Cumulative Demand First <ref> [11] </ref>). In the remark after Theorem 3.1 we comment on the applicability of Lemma 3.1 and Theorem 3.1 for any arbitrary subset 0 9 The proof of the lower bound is based on sample path analysis. <p> We give two examples to show how known uniprocessor policies can be used directly in Lemma 3.1 to provide a tighter bound than Theorem 3.1 for specific parallel processor policies. Consider = RRP 2 C 0 , where RRP stands for the Round-Robin-Process policy <ref> [11] </ref>. Under RRP there is a global queue of processes and all processes are served in round-robin order. This is like the process scheduling mechanism in the Sequent multiprocessor if we assume that all processes have the same priority [19].
Reference: 12. <author> MANSHARAMANI, R., AND VERNON, M. </author> <title> Approximate analysis of parallel processor allocation policies. </title> <note> In preparation. </note>
Reference-contexts: For the result in Section 3 we allow arbitrary marginal distributions of these primitive variables with arbitrary dependencies between them. That is, we permit any arbitrary joint distribution of these primitive variables. This workload model extends the workload model in <ref> [12] </ref> by permitting multiple job classes and arbitrary dependencies among the workload variables. 2.2 Processor Allocation Policies In order to precisely define what we mean by processor allocation policy we need the following notation. a i (t) = number of processors or processing power (possibly fractional) allocated to job i at <p> More details of these workloads are given in <ref> [12] </ref>. <p> is just one priority class under PSAPF and PLAPF and therefore both policies reduce to the FCFS policy, for which the mean response time under assumptions (a)-(d) is the same as the mean response time of an M=G=1 queue with a processor of power P (i.e., S = D=P ) <ref> [12] </ref>. Under assumptions (a)-(d) we therefore have R P SAP F = R P LAPF = R M=G=1 P = D + D ) D ; (16) where the expression for R M=G=1 P is obtained from [7]. Now consider the EQ policy. <p> Now consider the EQ policy. The mean response time of the EQ policy under assumptions (a)-(d) is equal to the mean response time of an M=G=1 P processor sharing (PS) queue <ref> [12] </ref>. From [8] we note that R M=G=1 P P S = R M=M=1 P . <p> Consider the FCFS policy in C 0 . Under assumptions (b) and (c) when N P the mean response time under FCFS is that of an M=G=1 P queue and when N 1 the mean response time under FCFS is that of an M=G=P queue <ref> [12] </ref>. Under assumptions (a)-(c) and for P = 2 it follows (see [1]) that R F CF S (N P = 2) = R M=G=1 2 &gt; R M=G=2 = R F CF S (N 1); iff &gt; 1 fi which violates (23) when fi &lt; 1=2.
Reference: 13. <author> SCHRAGE, L. </author> <title> The queue M/G/1 with the shortest remaining processing time discipline. </title> <journal> Oper. Res. </journal> <volume> 14, 4 (1966), </volume> <pages> 670-684. </pages>
Reference-contexts: As a result, R max (S; R SRP T ); 8 2 : We use the superscript 1 to denote that the policy is a uniprocessor policy. For Poisson job arrivals we can compute R 1 SRP T from the analysis in <ref> [13] </ref>. The SRPT policy uses complete knowledge of job demands. We can obtain tighter bounds if only restricted job demand information is available to the scheduler, e.g., policies in 0 . First consider cases where fD i g 1 i=1 are i.i.d. and independent of everything else.
Reference: 14. <author> SCHRAGE, L. </author> <title> A proof of the optimality of the shortest remaining processing time discipline. </title> <journal> Oper. Res. </journal> <volume> 16, 3 (1968), </volume> <pages> 687-690. </pages>
Reference: 15. <author> SCHRAGE, L. </author> <title> Optimal scheduling disciplines for a single machine under various degrees of information. </title> <type> Grad. </type> <institution> School of Business, Univ. of Chicago, </institution> <year> 1974. </year>
Reference: 16. <author> SETHI, R. </author> <title> On the complexity of mean flow time scheduling. </title> <journal> Math. of Oper. Res. </journal> <volume> 2, 4 (1977), </volume> <pages> 320-330. </pages>
Reference-contexts: For example, determining the optimal schedule to minimize the mean response time of a set of parallel jobs with arbitrary task graphs and known task processing times is an NP-complete problem <ref> [16] </ref>. As a result, it is desirable to obtain performance bounds against which one can compare the performance of a given processor allocation policy.
Reference: 17. <author> SEVCIK, K. </author> <title> Application scheduling and processor allocation in multiprogrammed parallel processing systems. </title> <note> To appear in a special issue of Performance Evaluation. 37 </note>
Reference-contexts: The related result in this paper is that PSAPF (Preemptive Smallest Available Parallelism First) is the optimal policy for a system with i.i.d. exponential job demands and linear job execution rates up to the job's available parallelism, under a general arrival process. Second, Sevcik <ref> [17] </ref> shows that for a workload in which each job can make use of all processors with perfect speedups (linear execution rates) and job service demands are known to the scheduler, the LWF (Least Work First) policy is optimal when there are no external arrivals, and the LRWF (Least Remaining Work
Reference: 18. <author> STIDHAM, S. </author> <title> A last word on L = W . Oper. </title> <journal> Res. </journal> <volume> 22, 2 (1974), </volume> <pages> 417-421. </pages>
Reference-contexts: Hence for every sample path Q P SAP F = lim 1 Z t Q P SAP F (s) ds lim 1 Z t Q (s) ds = Q ; from which it follows by Little's Law <ref> [18] </ref> that R P SAP F R for every sample path.
Reference: 19. <author> THAKKAR, S., GIFFORD, P., AND FIELLAND, G. </author> <title> Balance: a shared memory multiprocessor system. </title> <booktitle> Proc. Int. Conf. on Supercomputing 2, </booktitle> <year> (1987), </year> <pages> 93-101. </pages>
Reference-contexts: Under RRP there is a global queue of processes and all processes are served in round-robin order. This is like the process scheduling mechanism in the Sequent multiprocessor if we assume that all processes have the same priority <ref> [19] </ref>.
Reference: 20. <author> WALRAND, J. </author> <title> Introduction to Queueing Networks. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1988. </year>
Reference-contexts: Fixing N j automatically determines E j (), j = 1; 2; : : : since execution rates are linear up to N j . Consider that potential job completions <ref> [20] </ref> occur at jumps of a Poisson process with rate P . Fix the same potential completion instants fT j g 1 j=1 in both P SAP F and . To generate actual job completion times in P SAP F and let fU j g 1 j=1 be i.i.d.
Reference: 21. <author> WOLFF, R. </author> <title> Stochastic Modeling and the Theory of Queues. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year> <month> 38 </month>
References-found: 21

