URL: http://www.cs.virginia.edu/~legion/papers/CS-94-21.ps
Refering-URL: http://www.cs.virginia.edu/~legion/Papers.html
Root-URL: http://www.cs.virginia.edu
Title: Legion: The Next Logical Step Toward a Nationwide Virtual Computer  
Author: Andrew S. Grimshaw William A. Wulf James C. French Alfred C. Weaver Paul F. Reynolds Jr. 
Abstract: Technical Report No. CS-94-21 June, 1994 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Ahuja, N. Carriero, and D. Gelernter, Linda and Friends, </author> <booktitle> IEEE Computer, </booktitle> <pages> pp. 26-34, </pages> <month> August, </month> <year> 1986. </year>
Reference: [2] <author> H. Bal, J. Steiner, and A. Tanenbaum, </author> <title> Programming Languages for Distributed Computing Systems, </title> <journal> ACM Computing Surveys, pp. </journal> <volume> 261-322, vol. 21, no. 3, </volume> <month> Sept. </month> <year> 1989. </year>
Reference: [3] <author> J. Boyle et al., </author> <title> Portable Programs for Parallel Processors, </title> <publisher> Holt, Rinehart and Winston, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: The need for the paradigm is particularly acute in a system as large and complex as Legion. Other investigators have proposed constructing application libraries and applications for wide-area parallel processing using only low-level message passing services such as those provided by PVM [34] and P4 <ref> [3] </ref>. Use of such tools requires the programmer to address the full complexity of the environment; the difficult problems of managing faults, scheduling, load balancing, etc., are likely to overwhelm all but the best programmers. <p> While we do not believe that this is the right paradigm for the construction of large software systems we recognize that we must support these applications, at least in transition. Therefore we will provide several message passing compatibility libraries to programmers (PVM [34], P4 <ref> [3] </ref>), and will cooper ate with commercial vendors (Express TM , Linda [10]) to port their libraries. Exposing the Legion run-time: Legion will be an open system in order to encourage third party software development.
Reference: [4] <author> A. </author> <title> Beguelin et al.,A Users Guide to PVM (Parallel Virtual Machine), </title> <institution> Oak Ridge National Laboratory TM-11826. </institution>
Reference: [5] <author> G. Bernard et al.,, </author> <title> Primitives for Distributed Computing in a Heterogeneous Local Area Network Environment, </title> <journal> IEEE Trans on Soft. Eng. </journal> <volume> vol. 15, no. 12, </volume> <month> December 89. </month>
Reference: [6] <author> B. N. Bershad, and H. M. Levy, </author> <title> Remote Computation in a Heterogeneous Environment. </title> <type> Tech. Rep. </type> <institution> 87-06-04, Dept. of Computer Science, University of Washington, </institution> <address> Seattle, </address> <month> June, </month> <year> 1987. </year>
Reference: [7] <author> B. N. Bershad, et al., </author> <title> A Remote Procedure Call Facility for Interconnecting Heterogeneous Computer Systems, </title> <journal> IEEE Trans. Software. Eng. SE, </journal> <volume> vol. 13, no. 8, </volume> <pages> pp. 880-894, </pages> <month> August, </month> <year> 1987. </year>
Reference: [8] <author> F. Bodin, et. al., </author> <title> Distributed pC++: Basic Ideas for an Object Parallel Language, </title> <booktitle> Proceedings Object-Oriented Numerics Conference, </booktitle> <pages> pp. </pages> <address> 1-24,Sunriver, Oregon, </address> <month> April 25-27, </month> <year> 1993. </year>
Reference: [9] <author> D. Callahan and K. </author> <title> Kennedy,Compiling Programs for Distributed-Memory Multiprocessors The Journal of Supercomputing, </title> <journal> no. </journal> <volume> 2, </volume> <pages> pp. 151-169, </pages> <address> 1988, </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: Similarly, a class may have multiple implementations with the same interface. We are firmly committed to the object-oriented paradigm. At the same time we recognize that other languages and paradigms, in particular Fortran and its parallel dialects, HPF Fortran [26], Fortran 90, and Fortran D <ref> [9] </ref>, have and will continue to have important roles. Legion will support those languages in two ways, first by supporting the encapsulation of programs written in other languages into objects, and second, by providing a direct interface to the Legion run-time system for compiler writers.
Reference: [10] <author> N. Carriero and D. Gelernter, </author> <title> Linda in Context, </title> <journal> Communications of the ACM, </journal> <volume> vol. 32, no. 4, </volume> <pages> pp. 444-458, </pages> <month> April, </month> <year> 1989. </year>
Reference-contexts: Therefore we will provide several message passing compatibility libraries to programmers (PVM [34], P4 [3]), and will cooper ate with commercial vendors (Express TM , Linda <ref> [10] </ref>) to port their libraries. Exposing the Legion run-time: Legion will be an open system in order to encourage third party software development.
Reference: [11] <author> M.J. Carey, et. al., </author> <title> Shoring Up Persistent Applications, </title> <note> to appear, SIGMOD 1994. </note>
Reference-contexts: Although we will continue to refer to the Legion file system, we intend to create a persistent object space as has been proposed for distributed object management systems [30]. There are several other efforts in the distributed object literature with which we share many goals, for example SHORE <ref> [11] </ref> and CORBA [27][30]. However, Legion is distinguish from these efforts by the emphasis we place on performance -- Legion expects to provide a high performance computing environment and this goal is paramount. To this end we will focus more on file system support rather than database support.
Reference: [12] <author> A.L.Cheung, and A.P. Reeves, </author> <title> High Performance Computing on a Cluster of Workstations, </title> <booktitle> Proceedings of the First Symposium on High-Performance Distributed Computing, </booktitle> <pages> pp. 152-160, </pages> <address> Syracuse, NY, </address> <month> Sept., </month> <year> 1992. </year>
Reference: [13] <author> P. B. Gibbond, </author> <title> A Stub Generator for Multi-Language RPC in Heterogeneous Environments, </title> <journal> IEEE Trans. Software. Eng. SE, </journal> <volume> vol. 13 , no. 1, </volume> <pages> pp. 77-87, </pages> <month> January, </month> <year> 1987. </year>
Reference: [14] <author> A. S. Grimshaw, D. Shiet, and A. Nguyen-Tuong, </author> <title> Campus-Wide Computing: Early Results Using Legion at the University of Virginia, </title> <note> submitted to Supercomputing 94. </note>
Reference-contexts: The prototype consists of over sixty workstations and is now operational. In <ref> [14] </ref> we present the performance of two production applications that we have used to test the efficacy of our approach: complib, a biochemistry application that compares DNA and protein sequences, and ATPG, an electrical engineering application that generates test patterns for VLSI circuits. The performance results are encouraging.
Reference: [15] <author> A. S. Grimshw, J. B. Weissman, and W. T. Strayer, </author> <title> Portable Run-Time Support for Dynamic Object-Oriented Parallel Processing, </title> <note> submitted to ACM Transactions on Computer Systems, </note> <month> July, </month> <year> 1993. </year>
Reference: [16] <author> A. S. Grimshaw, E. A. West, and W.R. Pearson, </author> <title> No Pain and Gain! - Experiences with Mentat on Biological Application, </title> <journal> Concurrency: Practice & Experience, </journal> <pages> pp. 309-328, </pages> <note> Vol. 5, issue 4, </note> <month> June, </month> <year> 1993. </year>
Reference: [17] <author> A.S. Grimshaw, J.B.Weissman, E.A. West, and E. Loyot, </author> <title> Meta Systems: An Approach Combining Parallel Processing And Heterogeneous Distributed Computing Systems, </title> <note> to appear Journal of Parallel and Distributed Computing. </note>
Reference-contexts: These differences must be masked. Our solution is presented in detail in <ref> [17] </ref>. Here we briey comment on one form of heterogeneity, data representation and alignment. The problem of differing data representations and alignments is familiar, different architectures may represent the same information in different ways. The best known case of this is the classic big-endian versus little-endian problem.
Reference: [18] <author> A. S. Grimshaw, W. T. Strayer, and P. Narayan, </author> <title> Dynamic Object-Oriented Parallel Processing, </title> <booktitle> IEEE Parallel & Distributed Technology: Systems & Applications, </booktitle> <pages> pp. 33-47, </pages> <month> May, </month> <year> 1993. </year>
Reference: [19] <author> A. S. Grimshaw, </author> <title> Easy to Use Object-Oriented Parallel Programming with Mentat, </title> <booktitle> IEEE Computer, </booktitle> <pages> pp. 39-51, </pages> <month> May, </month> <year> 1993. </year>
Reference-contexts: Our approach is evolutionary rather than revolutionary. To realize our vision of a seamless metasystem we have chosen to begin by first constructing a testbed by extending Mentat, an existing object-oriented parallel processing system <ref> [19] </ref>. Mentat attacks the problem of providing easy-to-use high performance parallelism to users. The performance aspects of Mentat have been demonstrated on several real-world applications, on hardware platforms spanning the bandwidth/latency space, and in a heterogeneous envi Legion: The Next Logical Step Toward a Nationwide Virtual Computer 7 ronment [15][16][18].
Reference: [20] <author> A. S. Grimshaw, and E. Loyot Jr., </author> <title> ELFS: Object-Oriented Extensible File Systems, </title> <institution> University of Virginia, Computer Science TR 91-14, </institution> <year> 1991. </year>
Reference-contexts: The higher level services are not yet completely defined. They include a high-level scheduler, a name service, the fault management system, macro dataow machine services, data coercion, encryption/decryption, and an extensible file system <ref> [20] </ref>. The choice of a layered virtual machine has performance implications. The induced overhead will reduce application performance below what is possible writing each application and high level service on Legion: The Next Logical Step Toward a Nationwide Virtual Computer 10 the bare machine.
Reference: [21] <author> P.J. Hatcher, </author> <title> A Production-Quality C* Compiler for Hypercube Multicomputers, </title> <booktitle> Proceedings of the Third ACM SIGPLAN Symposium on Principles & Practice of Parallel Programming, </booktitle> <address> Williamsburg, VA, </address> <month> April 21-24, </month> <year> 1991. </year>
Reference: [22] <author> M. Jones, R. F. Rashid, and M. R. Thompson, </author> <title> An Interface Specification Language for Distributed Processing. </title> <booktitle> Proceedings of the 12th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 225-235, </pages> <year> 1985. </year>
Reference: [23] <author> J.A. </author> <title> Kaplan and M.L. Nelson,A Comparison of Queueing, Cluster, and Distributed Computing Systems, </title> <type> NASA Technical Memorandum 109025, </type> <institution> NASA LaRC, </institution> <month> October, </month> <year> 1993. </year> <title> Legion: The Next Logical Step Toward a Nationwide Virtual Computer 23 </title>
Reference-contexts: In general this is NP-hard. We really mean do a good job using a heuristic. Legion: The Next Logical Step Toward a Nationwide Virtual Computer 4 gaps between local systems. Other responses to difficult complexities, such as workstation farms <ref> [23] </ref> are already being developed (or are simply waiting to be developed). The issue is not whether metasystems will be developed; they clearly will. <p> Several real applications have been developed using MPL. These applications will be used to test the efficacy of our approach from a very early stage. Parallel shell: Our final mechanism is the development of a parallel shell similar to DQS and other network queueing system <ref> [23] </ref>. Applications are executed in parallel, rather than sequentially, whenever data dependencies permit 4 . Data dependencies exist when an application generates an output file that is later used as an input to another application.
Reference: [24] <editor> Ashfaq Khokhar, et. al., </editor> <booktitle> Heterogeneous Supercomputing: Problems and Issues, Proceedings of WHP 92 Workshop on Heterogeneous Processing, </booktitle> <publisher> IEEE Press, </publisher> <pages> pp. 3-12, </pages> <address> Beverly Hills, CA, </address> <month> March, </month> <year> 1992. </year>
Reference: [25] <author> E. Levy, and A. Silberschatz, </author> <title> Distributed File Systems: Concepts and Examples, </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 22, No. 4, </volume> <pages> pp. 321-374, </pages> <month> December, 1090. </month>
Reference-contexts: The extensions that we intend to design and implement ourselves include application specific file objects designed to improve application performance by reducing observed I/O latency. There is a rich literature in distributed file systems <ref> [25] </ref>. Issues such as naming, location transparency, fault transparency, replication transparency, and migration have been addressed both in the literature and in one or more existing operational systems. Rather than duplicate those efforts we would rather build on them and extend them into a larger context.
Reference: [26] <author> D. B. Loveman, </author> <title> High Performance Fortran,IEEE Parallel & Distributed Technology: </title> <journal> Systems & Applications, </journal> <volume> vol. 1, no. 1, </volume> <pages> pp. 25-42, </pages> <month> February, </month> <year> 1993. </year>
Reference-contexts: Similarly, a class may have multiple implementations with the same interface. We are firmly committed to the object-oriented paradigm. At the same time we recognize that other languages and paradigms, in particular Fortran and its parallel dialects, HPF Fortran <ref> [26] </ref>, Fortran 90, and Fortran D [9], have and will continue to have important roles.
Reference: [27] <author> F. Manola, S. Heiler, D. Georgakopoulos, M. Hornick, and M. Brodie, </author> <title> Distributed Object Management, </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> vol. 1, no. 1, </volume> <month> June </month> <year> 1992. </year>
Reference: [28] <author> J.H. Morris, et al., Andrew: </author> <title> A distributed personal computing environment, </title> <journal> Communications of the ACM, </journal> <volume> vol. 29, no. 3, </volume> <month> March </month> <year> 1986. </year>
Reference: [29] <author> N. Nedeljkovic, and M.J. Quinn, </author> <title> Data-Parallel Programming on a Network of Heterogeneous Workstations, </title> <booktitle> Proceedings of the First Symposium on High-Performance Distributed Computing, </booktitle> <pages> pp. 28-36, </pages> <address> Syra-cuse, NY, </address> <month> Sept., </month> <year> 1992. </year>
Reference: [30] <author> J.R. Nicol, C.T. Wilkes, and F.A. Manola, </author> <title> Object-Orientation in Heterogeneous Distributed Systems, </title> <journal> IEEE Computer, vol.26, </journal> <volume> no. 6., </volume> <pages> pp. 57-67, </pages> <month> June, </month> <year> 1993. </year>
Reference-contexts: This is a common technique and is used in the OMG ORB <ref> [30] </ref>. In addition to encapsulating sequential codes, object wrappers can be used to encapsulate parallel programs as components, such as a C* program for the TMC CM-2 or CM-5. This permits the use of optimized parallel applications as components in larger meta-applications, such as multi-disciplinary optimization (MDO) problems. <p> Although we will continue to refer to the Legion file system, we intend to create a persistent object space as has been proposed for distributed object management systems <ref> [30] </ref>. There are several other efforts in the distributed object literature with which we share many goals, for example SHORE [11] and CORBA [27][30].
Reference: [31] <author> D. Notkin, N., </author> <title> et al.,Heterogeneous Computing Environments: Report on the ACM SIGOPS Workshop on Accommodating Heterogeneity, </title> <journal> Communications of the ACM,vol. </journal> <volume> 30, no. 2, </volume> <pages> pp. 132-140, </pages> <month> February, </month> <year> 1987. </year>
Reference: [32] <author> D. Notkin, et al., </author> <title> Interconnecting Heterogeneous Computer Systems, </title> <journal> Communications of the ACM, </journal> <volume> vol. 31, no. 3, </volume> <pages> pp. 258-273, </pages> <month> March, </month> <year> 1988. </year>
Reference: [33] <author> Sun Microsystems. </author> <title> External Data Representation Reference Manual. Sun Microsystems, </title> <month> Jan. </month> <year> 1985. </year>
Reference-contexts: Fortunately there has been extensive experience with this problem in the heterogeneous distributed computing community, and there are several well known solutions [22][31][32]. One technique is to convert all data into an intermediate format before it is sent, e.g., XDR <ref> [33] </ref>. The primary disadvantage with this approach is that all data is coerced twice, adding to the overhead costs. In Legion data coercion is handled by type-specific coercion functions that transform data from one representation to another. Here the structure of the Legion execution model simplifies the problem.
Reference: [34] <author> V.S. Sunderam, </author> <title> PVM: A framework for parallel distributed computing, </title> <journal> Concurrency: Practice and Experience, </journal> <volume> vol. 2(4), </volume> <pages> pp. 315-339, </pages> <month> December, </month> <year> 1990. </year>
Reference-contexts: The need for the paradigm is particularly acute in a system as large and complex as Legion. Other investigators have proposed constructing application libraries and applications for wide-area parallel processing using only low-level message passing services such as those provided by PVM <ref> [34] </ref> and P4 [3]. Use of such tools requires the programmer to address the full complexity of the environment; the difficult problems of managing faults, scheduling, load balancing, etc., are likely to overwhelm all but the best programmers. <p> While we do not believe that this is the right paradigm for the construction of large software systems we recognize that we must support these applications, at least in transition. Therefore we will provide several message passing compatibility libraries to programmers (PVM <ref> [34] </ref>, P4 [3]), and will cooper ate with commercial vendors (Express TM , Linda [10]) to port their libraries. Exposing the Legion run-time: Legion will be an open system in order to encourage third party software development.
Reference: [35] <editor> B. Walker, et al., </editor> <booktitle> The LOCUS Distributed Operating System, Proceedings of the 9th ACM Symposium on Operating Systems Principles (Bretton Woods, </booktitle> <editor> N. H., </editor> <address> Oct.) </address> <publisher> ACM, </publisher> <address> New York, </address> <year> 1983. </year>
Reference: [36] <author> Min-You Wu, and G.C. Fox, </author> <title> A Test Suite Approach for Fortran90D Compilers on MIMD Distributed Memory Parallel Computers, </title> <booktitle> Proceedings of the First Symposium on High-Performance Distributed Computing, </booktitle> <pages> pp. 393-400, </pages> <address> Syracuse, NY, </address> <month> Sept., </month> <year> 1992. </year>
References-found: 36

