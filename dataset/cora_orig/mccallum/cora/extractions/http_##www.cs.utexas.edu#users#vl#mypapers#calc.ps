URL: http://www.cs.utexas.edu/users/vl/mypapers/calc.ps
Refering-URL: http://www.cs.utexas.edu/users/vl/papers.html
Root-URL: 
Title: A Calculational Deductive System for Propositional Logic  
Author: Vladimir Lifschitz 
Address: Austin, TX 78712  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract: We analyze the calculational style of proof that is sometimes used in computer science. A calculational proof of a propositional formula is shown to encode the "main branch" of a proof tree in the deductive system described in this note.
Abstract-found: 1
Intro-found: 1
Reference: [ Church, 1956 ] <author> Alonzo Church. </author> <title> Introduction to Mathematical Logic, volume 1. </title> <publisher> Princeton University Press, </publisher> <year> 1956. </year>
Reference-contexts: This fact will be derived from the completeness of another formalization of propositional logic, called P 1 , which is defined and proved to be complete in Chapter 1 of <ref> [ Church, 1956 ] </ref> . 1 The formulas of P 1 are built from atoms and ? using one binary connective, implication. In P 1 , we represent implication by the character !, to distinguish it from the symbol introduced above as an abbreviation.
Reference: [ Dijkstra and Scholten, 1990 ] <author> Edsger Dijkstra and Carel Scholten. </author> <title> Predicate Calculus and Program Semantics. </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction This note is about the "calculational style" of proof described in <ref> [ Dijkstra and Scholten, 1990 ] </ref> . We define here a formalization of classical propositional logic, called DS, which is inspired by this style of proof and can be used to analyze it in a precise way. <p> On the way towards the demonstration of the completeness of DS we need to prove several theorem schemata. These proofs closely follow the patterns found in Chapter 5 of <ref> [ Dijkstra and Scholten, 1990 ] </ref> and thus give us plenty of material to illustrate the main thesis: the close relationship between the calculational proof style on the one hand, and the system DS on the other. 1 2 The Deductive System In the system DS, formulas are built from an <p> To make it easier to compare trunks with calculational proofs from <ref> [ Dijkstra and Scholten, 1990 ] </ref> , we will adopt the convention of writing (13) in the form F 1 F 2 , fG n1 H n1 g (14) Furthermore, we will replace every equivalence G i H i in (14) by a reference to the axiom schema or metatheorem that <p> For instance, instead of (16) we can write: F _ (G G) , fdistributivity of _g F _ G F _ G freflexivity of g : This representation for trunks would be typographically even closer to the main proof format used in <ref> [ Dijkstra and Scholten, 1990 ] </ref> if we replaced the last line f: : :g by two lines , f: : :g which we do not do here. Another typographic difference is our use of , where Dijkstra and Scholten would use or =.
Reference: [ Gries and Schneider, 1993 ] <author> David Gries and Fred Schneider. </author> <title> A Logical Approach to Discrete Math. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: format of Section 3, it is clear that the use of format (50) and of "ping-pong arguments" can be always avoided. 9 Comparison with Earlier Work Other approaches to formalizing calculational proofs of propositional formulas are described in Chapter 2 of [ Gries, 1981 ] , in Chapter 3 of <ref> [ Gries and Schneider, 1993 ] </ref> , and in [ Gries and Schneider, 1995 ] .
Reference: [ Gries and Schneider, 1995 ] <author> David Gries and Fred Schneider. </author> <title> Equational propositional logic. </title> <journal> Information Processing Letters, </journal> <volume> 53 </volume> <pages> 145-152, </pages> <year> 1995. </year>
Reference-contexts: In the following definition of fi, F stands for F ! ?. 1. fiF = F if F is an atom or ?. 2. fi (F G) = (F ! G) ! F ! G. 1 This method was used for a similar purpose in <ref> [ Gries and Schneider, 1995 ] </ref> . <p> use of format (50) and of "ping-pong arguments" can be always avoided. 9 Comparison with Earlier Work Other approaches to formalizing calculational proofs of propositional formulas are described in Chapter 2 of [ Gries, 1981 ] , in Chapter 3 of [ Gries and Schneider, 1993 ] , and in <ref> [ Gries and Schneider, 1995 ] </ref> .
Reference: [ Gries, 1981 ] <editor> David Gries. </editor> <booktitle> The Science of Programming. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year> <month> 13 </month>
Reference-contexts: in DS can be represented in the basic calculational format of Section 3, it is clear that the use of format (50) and of "ping-pong arguments" can be always avoided. 9 Comparison with Earlier Work Other approaches to formalizing calculational proofs of propositional formulas are described in Chapter 2 of <ref> [ Gries, 1981 ] </ref> , in Chapter 3 of [ Gries and Schneider, 1993 ] , and in [ Gries and Schneider, 1995 ] .
References-found: 5

