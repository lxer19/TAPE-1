URL: http://www.eecs.umich.edu/techreports/cse/1996/CSE-TR-279-96.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse96.html
Root-URL: http://www.eecs.umich.edu
Title: Getting More Information into File  Getting More Information into File Names  
Author: Michael McClennen and Stuart Sechrest 
Affiliation: Software Systems Research Laboratory the University of Michigan  
Date: January 18, 1996 1  
Pubnum: Names  
Abstract: Hierarchical naming, while deeply embedded in our conception of file systems, is a rather weak tool for storing information about files and their relationships. A consequence is that users of todays file systems frequently have trouble locating files. We describe a system in which a standard directory tree is extended by allowing names to contain auxiliary components representing descriptive attributes rather than directory names. This system allows files to be characterized more extensively, and lets users choose among multiple organizational structures for their stored information. A prototype has been implemented by means of a new vnode layer under SunOS 4.1.3. 
Abstract-found: 1
Intro-found: 1
Reference: [Hen90] <author> D. Hendricks, </author> <title> A Filesystem for Software Development, </title> <booktitle> in Proc. USENIX Summer Conference, </booktitle> <pages> pp. 333-40, </pages> <address> Anaheim CA, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: Our system, by contrast, sits in the vnode layer and can be configured to work with any underlying file system. A different approach to the problem is taken by systems that introduce viewpathing or union directories ([KK90], <ref> [Hen90] </ref>, and [Pik89]). This refers to the construction of chains of directories such that files from subsequent directories show through to the top one. The result is to separate path names used for retrieval from those used for management. <p> This can be done in two ways: either by building functionality into the operating system, as was done by [KK90], <ref> [Hen90] </ref>, and [Mog86], or by providing file servers that run at the user level as did [GJS*91] and [Ols93]. We have chosen the former technique, with the aim of making efficient use of existing file systems for the actual storage of data and metadata. 3.
Reference: [KK90] <author> D. Korn and E. Krell. </author> <title> A New Dimension for the Unix File System. </title> <journal> Software Practice and Experience 20(S1), </journal> <pages> pp. 19-34, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: This can be done in two ways: either by building functionality into the operating system, as was done by <ref> [KK90] </ref>, [Hen90], and [Mog86], or by providing file servers that run at the user level as did [GJS*91] and [Ols93]. We have chosen the former technique, with the aim of making efficient use of existing file systems for the actual storage of data and metadata. 3.
Reference: [Kle86] <author> S. Kleiman, Vnodes: </author> <title> An Architecture for Multiple File System Types in Sun UNIX, </title> <booktitle> in Proc. USENIX Summer Conference, </booktitle> <pages> pp. 238-24, </pages> <address> Atlanta GA, </address> <month> June </month> <year> 1986. </year>
Reference-contexts: File attributes are stored in standard Unix directories, by means of specially encoded entries. This allows standard utilities (backups, for example) to operate on the files even when our server is not active. The biggest portion of the kernel extension defines a new vnode and VFS type <ref> [Kle86] </ref>. Figure 2 shows the relationships between the new vnode layer and the underlying file system. Once the extension is loaded and the server is run, the directory tree which stores the raw metadata can be mounted on top of the base path under which the files will be accessed.
Reference: [Mog86] <author> J. C. Mogul, </author> <title> Representing Information about Files. </title> <type> Technical report STAN-CS-86-1103, </type> <institution> Stanford University, </institution> <month> March, </month> <year> 1986. </year>
Reference-contexts: Other examples of systems that demonstrate novel ways of organizing file metadata are the Inversion File System [Ols93], which by using a relational database to support a file system allows general queries on file metadata, and the Property-List Directory System <ref> [Mog86] </ref> which applies a global set of attribute names to a hierarchical directory structure. 2.2 Our view of the problem The basic goal of any scheme for file naming is to facilitate two tasks: the characterization of files by storing descriptive information as metadata, and their retrieval by querying that stored <p> This can be done in two ways: either by building functionality into the operating system, as was done by [KK90], [Hen90], and <ref> [Mog86] </ref>, or by providing file servers that run at the user level as did [GJS*91] and [Ols93]. We have chosen the former technique, with the aim of making efficient use of existing file systems for the actual storage of data and metadata. 3.
Reference: [ND65] <author> P. G. Neumann and R. C. Daley. </author> <title> A General-Purpose File System for Secondary Storage. </title> <booktitle> In AFIPS Fall Joint Computer Conference, </booktitle> <pages> pp. 213-229, </pages> <year> 1965. </year>
Reference: [Ols93] <author> M. Olson, </author> <title> The Design and Implementation of the Inversion File System, </title> <booktitle> in Proc. USENIX Winter Conference, </booktitle> <pages> pp. 1-14, </pages> <address> San Diego CA, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: This work provides valuable insight into the ways in which filesystem semantics can be extended, and could be easily integrated with our own work. Other examples of systems that demonstrate novel ways of organizing file metadata are the Inversion File System <ref> [Ols93] </ref>, which by using a relational database to support a file system allows general queries on file metadata, and the Property-List Directory System [Mog86] which applies a global set of attribute names to a hierarchical directory structure. 2.2 Our view of the problem The basic goal of any scheme for file <p> This can be done in two ways: either by building functionality into the operating system, as was done by [KK90], [Hen90], and [Mog86], or by providing file servers that run at the user level as did [GJS*91] and <ref> [Ols93] </ref>. We have chosen the former technique, with the aim of making efficient use of existing file systems for the actual storage of data and metadata. 3.
Reference: [PPTT90] <author> R. Pike, D. Presotto, K. Thompson, and H. Trickey. </author> <title> Plan 9 from Bell Labs. </title> <booktitle> In Proc. </booktitle> <address> UK UUG, </address> <year> 1990 </year>
References-found: 7

