URL: http://www.cs.ucla.edu/~limsk/papers/iccad97.ps.gz
Refering-URL: http://www.cs.ucla.edu/~limsk/
Root-URL: http://www.cs.ucla.edu
Title: Large Scale Circuit Partitioning With Loose/Stable Net Removal And Signal Flow Based Clustering  
Author: Jason Cong, Honching Peter Li, Sung Kyu Lim, Toshiyuki Shibuya and Dongmin Xu 
Address: Los Angeles, CA 90095  Japan  
Affiliation: UCLA Department of Computer Science,  Fujitsu Laboratories LTD., Kawasaki,  
Note: 0-89791-993-9/97 $10.00 1997 IEEE  
Abstract: In this paper, we present an efficient Iterative Improvement based Partitioning (IIP) algorithm called LSR/MFFS, that combines signal flow based Maximum Fanout Free Subgraph (MFFS) clustering algorithm with Loose and Stable net Removal (LSR) partitioning algorithm. The MFFS algorithm generalizes existing MFFC decomposition method from combinational circuits to general sequential circuits in order to handle cycles naturally. We also study the properties of the nets that straddle the cutline carefully, and introduce the concepts of the loose and stable nets as well as effective ways to remove them out of the cutset. The LSR/MFFS algorithm first applies LSR algorithm to clustered netlist generated by MFFS algorithm for global-level cutsize optimization and then declusters netlist for further cutsize refinement. As a result, the LSR/MFFS algorithm has achieved the best cutsize result among all the bipartitioning algorithms published in the literatures with very promising runtime performance. In particular, it outperforms the recent state-of-the-art IIP algorithms LA3-CDIP, CLIP-PROP f [8], Straw-man [12], hMetis-FM [13], and MLc [1] by 17.4%, 12.1%, 5.9%, 3.1%, and 1.9%, respectively. It also outperforms the state-of-the-art non-IIP algorithms Paraboli [17], FBB [19], and PANZA [16] by 32.0%, 21.4%, and 1.4%, respectively. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. J. Alpert, D. Huang, and A. B. Kahng. </author> <title> "Multilevel circuit partitioning". </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 530-533, </pages> <year> 1997. </year>
Reference-contexts: We reported the sum of total elapsed CPU time for 10 runs of partitioning (and clustering, if applicable) 13 circuits under IIP algorithms. IIP algorithms in comparison include LA3-CDIP, CLIP-PROP f [8], Strawman [12], hMetis-FM 20 [13], and MLc-100 <ref> [1] </ref>. The experiment shows that LSR/MFFS consistently outperforms non-clustering based algorithms LA3-CDIP and CLIP-PROPf by 17.4% and 12.1%, respectively, in terms of cutsize. In addition, LSR/MFFS outperforms multi-level clustering based Strawman, hMetis-FM 20 and MLc-100 by 5.9%, 3.1%, and 1.9%, respectively.
Reference: [2] <author> C. J. Alpert and A. B. Kahng. </author> <title> "Recent directions in netlist partitioning: a survey". Integration, </title> <journal> the VLSI Journal, </journal> <pages> pages 1-81, </pages> <year> 1995. </year>
Reference-contexts: Among many promising studies on circuit clustering methods, we focus on the extension of signal flow based Maximum Fanout Free Cone (MFFC) approach [4, 6, 7]. A comprehensive survey of various techniques in circuit partitioning and clustering can be found in <ref> [2] </ref>. In this paper, we present a large-scale IIP algorithm named LSR/MFFS. It integrates three individual algorithms to accomplish both global and local-level cutsize optimization; Loose net Removal (LR), existing Stable Net Transition [18] (SNT), and Maximum Fanout Free Subgraph (MFFS) algorithm.
Reference: [3] <author> C. J. Alpert and S. Z. Yao. </author> <title> "Spectral partitioning: The more eigenvectors, the better". </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 195-200, </pages> <year> 1995. </year>
Reference-contexts: As a result, the hierarchical layout strategy using the divide-and-conquer technique is indispensable in order to make the VLSI layout problem tractable. The existing circuit partitioning algorithms in the literature can be roughly classified into two classes; constructive methods, such as the spectral-based methods <ref> [11, 3] </ref> and the network flow-based method [19], and iterative improvement methods (also referred as group migration or move based methods).
Reference: [4] <author> J. Cong and Y. Ding. </author> <title> "On area/depth trade-off in LUT-based FPGA technology mapping". </title> <booktitle> In Proc. 30th ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 213-218, </pages> <year> 1993. </year>
Reference-contexts: In this case, clusters are first identified and collapsed, and the resulting clustered circuit is partitioned using existing partitioning methods. Among many promising studies on circuit clustering methods, we focus on the extension of signal flow based Maximum Fanout Free Cone (MFFC) approach <ref> [4, 6, 7] </ref>. A comprehensive survey of various techniques in circuit partitioning and clustering can be found in [2]. In this paper, we present a large-scale IIP algorithm named LSR/MFFS. <p> In this section, we present a signal flow and logic dependency based clustering algorithm MFFS, which generalizes existing MFFC decomposition method <ref> [4] </ref> from combinational circuits to general sequential circuits. The MFFC based clustering algorithm has been reported to provide natural clustering solution for combinational circuits [4, 6]. A modified MFFC algorithm for sequential circuits has been presented in [7], but the capability of this algorithm to detect directed cycles is limited. <p> In this section, we present a signal flow and logic dependency based clustering algorithm MFFS, which generalizes existing MFFC decomposition method [4] from combinational circuits to general sequential circuits. The MFFC based clustering algorithm has been reported to provide natural clustering solution for combinational circuits <ref> [4, 6] </ref>. A modified MFFC algorithm for sequential circuits has been presented in [7], but the capability of this algorithm to detect directed cycles is limited. In general, the MFFC algorithm is mainly applied to combinational circuits. <p> One can verify that our new definition is equivalent to that in <ref> [4] </ref>.

Reference: [6] <author> J. Cong, Z. Li, and R. Bagrodia. </author> <title> "Acyclic multi-way partitioning of boolean networks". </title> <booktitle> In Proc. ACM/IEEE 31st Design Automation Conf., </booktitle> <pages> pages 670-675, </pages> <year> 1994. </year>
Reference-contexts: In this case, clusters are first identified and collapsed, and the resulting clustered circuit is partitioned using existing partitioning methods. Among many promising studies on circuit clustering methods, we focus on the extension of signal flow based Maximum Fanout Free Cone (MFFC) approach <ref> [4, 6, 7] </ref>. A comprehensive survey of various techniques in circuit partitioning and clustering can be found in [2]. In this paper, we present a large-scale IIP algorithm named LSR/MFFS. <p> In this section, we present a signal flow and logic dependency based clustering algorithm MFFS, which generalizes existing MFFC decomposition method [4] from combinational circuits to general sequential circuits. The MFFC based clustering algorithm has been reported to provide natural clustering solution for combinational circuits <ref> [4, 6] </ref>. A modified MFFC algorithm for sequential circuits has been presented in [7], but the capability of this algorithm to detect directed cycles is limited. In general, the MFFC algorithm is mainly applied to combinational circuits.
Reference: [7] <author> J. Cong and D. Xu. </author> <title> "Exploiting signal flow and logic dependency in standard cell placement". </title> <booktitle> In Proc. Asia and South Pacific Design Automation Conf., </booktitle> <pages> pages 399-404, </pages> <year> 1995. </year>
Reference-contexts: In this case, clusters are first identified and collapsed, and the resulting clustered circuit is partitioned using existing partitioning methods. Among many promising studies on circuit clustering methods, we focus on the extension of signal flow based Maximum Fanout Free Cone (MFFC) approach <ref> [4, 6, 7] </ref>. A comprehensive survey of various techniques in circuit partitioning and clustering can be found in [2]. In this paper, we present a large-scale IIP algorithm named LSR/MFFS. <p> The MFFC based clustering algorithm has been reported to provide natural clustering solution for combinational circuits [4, 6]. A modified MFFC algorithm for sequential circuits has been presented in <ref> [7] </ref>, but the capability of this algorithm to detect directed cycles is limited. In general, the MFFC algorithm is mainly applied to combinational circuits.
Reference: [8] <author> S. Dutt and W. Deng. </author> <title> "VLSI circuit partitioning by cluster-removal using iterative improvement techniques". </title> <booktitle> In Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pages 194-200, </pages> <year> 1996. </year>
Reference-contexts: This scheme is designed to promote the locality of cell moves where all the neighbors of the currently moved cell are chosen to move subsequently. However, locality can easily be disrupted by the update of other cells with higher gain values under this scheme. Dutt and Deng <ref> [8] </ref> proposed a more efficient way of promoting the locality. <p> We reported the sum of total elapsed CPU time for 10 runs of partitioning (and clustering, if applicable) 13 circuits under IIP algorithms. IIP algorithms in comparison include LA3-CDIP, CLIP-PROP f <ref> [8] </ref>, Strawman [12], hMetis-FM 20 [13], and MLc-100 [1]. The experiment shows that LSR/MFFS consistently outperforms non-clustering based algorithms LA3-CDIP and CLIP-PROPf by 17.4% and 12.1%, respectively, in terms of cutsize. In addition, LSR/MFFS outperforms multi-level clustering based Strawman, hMetis-FM 20 and MLc-100 by 5.9%, 3.1%, and 1.9%, respectively.
Reference: [9] <author> C. Fiduccia and R. Mattheyses. </author> <title> "A linear time heuristic for improving network partitions". </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 175-181, </pages> <year> 1982. </year>
Reference-contexts: Some of the best known methods include the Kernighan & Lin (KL) algorithm [14], the Fiduccia & Mattheyses (FM) algorithm <ref> [9] </ref>, and Krish-namurthy's lookahead scheme [15]. To reduce the computational complexity for partitioning large-scale circuits, clustering methods have been introduced. In this case, clusters are first identified and collapsed, and the resulting clustered circuit is partitioned using existing partitioning methods. <p> Section 3 presents signal flow based MFFS clustering algorithm. Section 4 provides experimental results. Section 5 concludes the paper with our ongoing research. 2 LSR based Partitioning Algorithm 2.1 Review of IIP Algorithms An iterative improvement partitioning (IIP) algorithm such as FM <ref> [9] </ref> uses the notion of cell gain to represent the reduction in the cutsize if the cell is moved to another block. Starting from a random initial partition and precomputed gain of entire cell, IIP algorithm selects the maximum gain cell c that satisfies the size constraint to move. <p> Second, a threshold value T limits the total accumulated value of cell gain, which enables us to adopt conventional array-based bucket structure <ref> [9] </ref>. Note that the only reason for the gain increase is to ensure that the target cells are chosen to move prior to other cells. Our study shows that a fairly small threshold value 100 can accomplish this goal without a major performance degradation.
Reference: [10] <author> L. Hagen, D. Huang, and A. B. Kahng. </author> <title> "On implementation choices for iterative improvement partitioning algorithms". </title> <booktitle> In Proc. ACM/IEEE European Design Automation Conf., </booktitle> <year> 1995. </year>
Reference-contexts: In this case, these multiple passes constitute a run. IIP algorithm usually adopts a special data structure called bucket that supports fast update and retrieval of cell gains. Recently, the LIFO bucket <ref> [10] </ref> scheme is proposed to ensure that the cells with the most recently updated gain to be chosen first among other cells with the same gain, providing different perspective in breaking ties. <p> The conventional cell gain ranges from p to p, where p represents the maximum number of nets incident to a single cell. Since the entire cells are distributed into this short range, most other IIP algorithms require special tie-breaking strategies such as LIFO bucket <ref> [10] </ref> or lookahead capability [15]. However, LR reduces the frequency of tie-breaking situation significantly since the rank of cells in the bucket is determined according to the increased gain values.
Reference: [11] <author> L. Hagen and A. B. Kahng. </author> <title> "A new approach to effective circuit clustering". </title> <booktitle> In Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pages 422-427, </pages> <year> 1992. </year>
Reference-contexts: As a result, the hierarchical layout strategy using the divide-and-conquer technique is indispensable in order to make the VLSI layout problem tractable. The existing circuit partitioning algorithms in the literature can be roughly classified into two classes; constructive methods, such as the spectral-based methods <ref> [11, 3] </ref> and the network flow-based method [19], and iterative improvement methods (also referred as group migration or move based methods).
Reference: [12] <author> S. Hauck and G. Borriello. </author> <title> "An evaluation of bipar-titioning techniques". </title> <journal> submitted to IEEE Trans. on Computer-Aided Design, </journal> <year> 1996. </year>
Reference-contexts: We reported the sum of total elapsed CPU time for 10 runs of partitioning (and clustering, if applicable) 13 circuits under IIP algorithms. IIP algorithms in comparison include LA3-CDIP, CLIP-PROP f [8], Strawman <ref> [12] </ref>, hMetis-FM 20 [13], and MLc-100 [1]. The experiment shows that LSR/MFFS consistently outperforms non-clustering based algorithms LA3-CDIP and CLIP-PROPf by 17.4% and 12.1%, respectively, in terms of cutsize. In addition, LSR/MFFS outperforms multi-level clustering based Strawman, hMetis-FM 20 and MLc-100 by 5.9%, 3.1%, and 1.9%, respectively.
Reference: [13] <author> G. Karypis and V. Kumar. </author> <title> "Multilevel hypergraph partitioning : Application in VLSI domain". </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 526-529, </pages> <year> 1997. </year>
Reference-contexts: Many thanks are due to the authors of hMetis <ref> [13] </ref> for their helpful discussions on runtime performance. area balance constraint, pre-assignment of cells, and nonuniformity in cell sizes can be easily accommodated, (ii) one can easily control the runtime vs cutsize trade-off by controlling the number of iterations. <p> We reported the sum of total elapsed CPU time for 10 runs of partitioning (and clustering, if applicable) 13 circuits under IIP algorithms. IIP algorithms in comparison include LA3-CDIP, CLIP-PROP f [8], Strawman [12], hMetis-FM 20 <ref> [13] </ref>, and MLc-100 [1]. The experiment shows that LSR/MFFS consistently outperforms non-clustering based algorithms LA3-CDIP and CLIP-PROPf by 17.4% and 12.1%, respectively, in terms of cutsize. In addition, LSR/MFFS outperforms multi-level clustering based Strawman, hMetis-FM 20 and MLc-100 by 5.9%, 3.1%, and 1.9%, respectively.
Reference: [14] <author> B. Kernighan and S. Lin. </author> <title> "An efficient heuristic procedure for partitioning of electrical circuits". </title> <journal> Bell System Technical Journal, </journal> <year> 1970. </year>
Reference-contexts: Some of the best known methods include the Kernighan & Lin (KL) algorithm <ref> [14] </ref>, the Fiduccia & Mattheyses (FM) algorithm [9], and Krish-namurthy's lookahead scheme [15]. To reduce the computational complexity for partitioning large-scale circuits, clustering methods have been introduced. In this case, clusters are first identified and collapsed, and the resulting clustered circuit is partitioned using existing partitioning methods.
Reference: [15] <author> B. Krishnamurthy. </author> <title> "An improved min-cut algorithm for partitioning VLSI networks". </title> <journal> IEEE Trans. on Computers, </journal> <pages> pages 438-446, </pages> <year> 1984. </year>
Reference-contexts: Some of the best known methods include the Kernighan & Lin (KL) algorithm [14], the Fiduccia & Mattheyses (FM) algorithm [9], and Krish-namurthy's lookahead scheme <ref> [15] </ref>. To reduce the computational complexity for partitioning large-scale circuits, clustering methods have been introduced. In this case, clusters are first identified and collapsed, and the resulting clustered circuit is partitioned using existing partitioning methods. <p> As a result, their algorithm CLIP/CDIP achieved the best cutsize result among all the published IIP algorithms prior to their work. However, their strategy is not free from the frequent tie-breaking situation, still relying on LIFO bucket and lookahead capability such as LA3 <ref> [15] </ref>. 2.2 LSR Partitioning Algorithm We present in this section stronger yet simpler form of cluster removal strategy by gradually increasing the cell gains of the neighbors connected to the currently chosen cell via loose nets until all of them are moved to one block. <p> The conventional cell gain ranges from p to p, where p represents the maximum number of nets incident to a single cell. Since the entire cells are distributed into this short range, most other IIP algorithms require special tie-breaking strategies such as LIFO bucket [10] or lookahead capability <ref> [15] </ref>. However, LR reduces the frequency of tie-breaking situation significantly since the rank of cells in the bucket is determined according to the increased gain values.
Reference: [16] <author> J. Li, J. Lillis, and C. K. Cheng. </author> <title> "Linear decomposition algorithm for VLSI design applications". </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pages 223-228, </pages> <year> 1995. </year>
Reference-contexts: In addition, LSR/MFFS outperforms multi-level clustering based Strawman, hMetis-FM 20 and MLc-100 by 5.9%, 3.1%, and 1.9%, respectively. The comparison of runtimes to other IIP algorithms except hMetis also reveals the performance superiority of LSR/MFFS. Non-IIP algorithms in comparison include PANZA <ref> [16] </ref>, Paraboli [17], and FBB [19]. LSR/MFFS again consistently outperforms these algorithms by 1.4%, 32.0%, and 21.4%, respectively. PANZA omitted runtime in their report, and the average runtime for each run of FBB tested on SPARC10 sums to 921.3 sec for 7 circuits tested, whereas LSR/MFFS spends only 79.8 sec.
Reference: [17] <author> B. M. Riess, K. Doll, and F. M. Johannes. </author> <title> "Partitioning very large circuits using analytical placement techniques". </title> <booktitle> In Proc. ACM/IEEE 31st Design Automation Conf., </booktitle> <pages> pages 646-651, </pages> <year> 1994. </year>
Reference-contexts: In addition, LSR/MFFS outperforms multi-level clustering based Strawman, hMetis-FM 20 and MLc-100 by 5.9%, 3.1%, and 1.9%, respectively. The comparison of runtimes to other IIP algorithms except hMetis also reveals the performance superiority of LSR/MFFS. Non-IIP algorithms in comparison include PANZA [16], Paraboli <ref> [17] </ref>, and FBB [19]. LSR/MFFS again consistently outperforms these algorithms by 1.4%, 32.0%, and 21.4%, respectively. PANZA omitted runtime in their report, and the average runtime for each run of FBB tested on SPARC10 sums to 921.3 sec for 7 circuits tested, whereas LSR/MFFS spends only 79.8 sec.
Reference: [18] <author> T. Shibuya, I. Nitta, and K. Kawamura. "SMINCUT: </author> <title> VLSI placement tool using min-cut". </title> <journal> Fujitsu Scientific & Technical Journal, </journal> <pages> pages 197-207, </pages> <year> 1995. </year>
Reference-contexts: A comprehensive survey of various techniques in circuit partitioning and clustering can be found in [2]. In this paper, we present a large-scale IIP algorithm named LSR/MFFS. It integrates three individual algorithms to accomplish both global and local-level cutsize optimization; Loose net Removal (LR), existing Stable Net Transition <ref> [18] </ref> (SNT), and Maximum Fanout Free Subgraph (MFFS) algorithm. The LR and SNT algorithms focus on nets instead of cells to reduce the cutsize by attempting to remove two special kinds of nets; loose and stable net (to be defined in the subsequent sections). <p> We shall first present the concept of loose nets and its relation to cluster removal, then present a modified cell gain computation of Loose-net Removal (LR) algorithm and its enhancement with Stable Net Transition (SNT) <ref> [18] </ref>. The following discussion focuses on bipartition-ing case, but LSR can be easily extended to handle multiway partitioning. with LR. Arrow points to cells chosen to move, and dotted and solid circle denote free and locked cell, respectively. <p> Shibuya et al <ref> [18] </ref> observed that more than 80% of the nets in the final cutset are stable, and these nets trap FM algorithm into local minima and limit the solution quality. <p> LR was then enhanced with existing SNT (Stable Net Transition) scheme <ref> [18] </ref> for eliminating hard-to-remove nets from the cutset. We also generalized the existing MFFC decomposition method to come up with signal flow based MFFS (Maximum Fanout Free Subgraph) clustering algorithm.
Reference: [19] <author> H. Yang and D. F. Wong. </author> <title> "Efficient network flow based min-cut balanced partitioning". </title> <booktitle> In Proc. IEEE Int. Conf. on Computer-Aided Design, </booktitle> <pages> pages 50-55, </pages> <year> 1994. </year> <title> 1 A direct comparison between hMetis and LSR/MFFS is not possible since hMetis used SGI R10000 200MHz for collecting runtime. However, private communication between the authors indicates that hMetis is about 1.4 times faster. </title>
Reference-contexts: The existing circuit partitioning algorithms in the literature can be roughly classified into two classes; constructive methods, such as the spectral-based methods [11, 3] and the network flow-based method <ref> [19] </ref>, and iterative improvement methods (also referred as group migration or move based methods). <p> In addition, LSR/MFFS outperforms multi-level clustering based Strawman, hMetis-FM 20 and MLc-100 by 5.9%, 3.1%, and 1.9%, respectively. The comparison of runtimes to other IIP algorithms except hMetis also reveals the performance superiority of LSR/MFFS. Non-IIP algorithms in comparison include PANZA [16], Paraboli [17], and FBB <ref> [19] </ref>. LSR/MFFS again consistently outperforms these algorithms by 1.4%, 32.0%, and 21.4%, respectively. PANZA omitted runtime in their report, and the average runtime for each run of FBB tested on SPARC10 sums to 921.3 sec for 7 circuits tested, whereas LSR/MFFS spends only 79.8 sec.
References-found: 18

