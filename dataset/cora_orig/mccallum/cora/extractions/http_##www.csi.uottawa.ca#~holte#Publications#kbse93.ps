URL: http://www.csi.uottawa.ca/~holte/Publications/kbse93.ps
Refering-URL: http://www.csi.uottawa.ca/~debruijn/irbib.html
Root-URL: 
Email: cdrummon@csi.uottawa.ca holte@csi.uottawa.ca ionescu@trix.genie.uottawa.ca  
Title: Accelerating Browsing by Automatically Inferring a User's Search Goal  
Author: Chris Drummond Robert Holte Dan Ionescu 
Address: Ottawa, Ottawa, Ontario, Canada, K1N 6N5  
Affiliation: Computer Science Dept. Computer Science Dept. Electrical Engineering Dept.  University of  
Abstract: This paper discusses a novel method called active browsing which increases the speed and accuracy with which a user may browse libraries for reusable software. Information inferred solely from the user's normal actions is employed by the system to locate software items relevant to the user's search goal. This paper describes our active browsing system and illustrates its operation with an example using typical browsing steps. An experiment, using an automated browsing agent, is described demonstrating that active browsing accelerates search. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.A. Alty & M.J. Coombs. </author> <title> Expert Systems: </title> <booktitle> Concepts And Examples National Computing Centre Pubs. </booktitle> <year> (1984) </year>
Reference-contexts: The inference of the analogue from the action sequence, and the construction of the relevancy measure, are done using production rules and a forward-chaining inference engine supporting MYCIN-like certainty factors <ref> [1] </ref>. A rule's antecedent involves browsing actions and/or existing features of the analogue and its consequent causes new features to be generated or old ones updated. In this way the analogue is updated to reflect the browsing agent's current goal.
Reference: [2] <author> G. A. Boy. </author> <title> Indexing Hypertext Documents In Context. </title> <booktitle> Proc. 3rd ACM Conference on Hypertext (1991). </booktitle>
Reference: [3] <author> C. Drummond, D. Ionescu & R. Holte, </author> <title> Automatic Goal Extraction from User Actions when Browsing Software Libraries. </title> <booktitle> Proc. Canadian Conference on Electrical and Computer Engineering, pp WA6.31.1-WA6.31.4 (1992) </booktitle>
Reference: [4] <author> C. Drummond, </author> <title> Automatic Goal Extraction from User Actions to Accelerate the Browsing of Software Libraries, M.A.Sc. </title> <type> Thesis, </type> <institution> University of Ottawa, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: The analogue's features are properties of the items in which the user has demonstrated specific interest. The certainties reflect the degree and currentness of that interest. The former is inferred from the action type, the latter is realised by decaying the certainties with time (for further details see <ref> [4] </ref>). The principle difference between the terms of the relevancy measure template and those of the analogue is that the former has an importance factor as well as a confidence factor. This reflects the significance of the term in locating code in the library. <p> Instead of measuring the numerical difference in rankings, one could simply measure the sign of the difference in rankings at each step <ref> [4] </ref>. This indicates, for each step, how frequently the target class is ranked higher by the active browsing system than by the browsing system. A similar pattern emerges.
Reference: [5] <author> R. Godin, J. Gecsei & C. Pichet. </author> <title> Design Of A Browsing Interface For Information Retrieval. </title> <booktitle> SIGIR 89 Proc. 12th Int. Conf. on Research and Development in Information Retrieval (1989) </booktitle>
Reference: [6] <author> D. Harman. </author> <title> Relevance Feedback Revisited. </title> <booktitle> SIGIR 92 Proc. 15th International Conference on Research and Development in Information Retrieval (1982) </booktitle>
Reference: [7] <author> S. Henninger. CodeFinder: </author> <title> A Tool For Locating Software Objects For Reuse. Automating Software Design: </title> <booktitle> Interactive Design Workshop Notes AAAI-91 pp 40-47 (1991) </booktitle>
Reference: [8] <author> D. Kibler & P. Langley. </author> <title> Machine Learning As An Experimental Science. </title> <booktitle> Proc. 3rd Working Session On Learning (1989) </booktitle>
Reference-contexts: The use of human subjects also has the disadvantage that it is impossible to run carefully controlled or repeatable experiments. To overcome these difficulties we have used an automated heuristic browsing agent, a notion analogous to using artificial data <ref> [8] </ref>. The heuristic browsing agent has not been designed to accurately simulate the complex behavioural characteristics of a human searcher. Rather it encompasses the general heuristics that a human might be expected to follow.
Reference: [9] <author> T. P. Martin, HK. Hung & C. Walmsley. </author> <title> Supporting Browsing Of Large Knowledge Bases. </title> <institution> Dept of Computing and Information Science, Queen's Uni. Kingston Canada. </institution> <note> Unpublished (1991) </note>
Reference-contexts: 1 Introduction The general aim of our research is to reduce the cost of locating reusable software artifacts in large libraries. The approach we adopt is to increase the effectiveness of human-computer interactive search, often termed browsing. Browsing has a very broad range of applications, including knowledge bases <ref> [9] </ref>, information retrieval [5,12], hypertext [2,11] and even relational databases [10]. In browsing software libraries, the state of the search is a particular item in the library, and one is permitted to move to items that are related to the current item in particular ways.
Reference: [10] <author> A. Motro. BAROQUE: </author> <title> A Browser For Relational Databases. </title> <journal> ACM Trans. </journal> <note> on Office Information Systems Vol 4 No. 2 April 1986 pp 164-181. </note> <year> (1986) </year>
Reference-contexts: The approach we adopt is to increase the effectiveness of human-computer interactive search, often termed browsing. Browsing has a very broad range of applications, including knowledge bases [9], information retrieval [5,12], hypertext [2,11] and even relational databases <ref> [10] </ref>. In browsing software libraries, the state of the search is a particular item in the library, and one is permitted to move to items that are related to the current item in particular ways.
Reference: [11] <author> R. H.C. Seabrook & B. Shneiderman. </author> <title> The User Interface In A Hypertext Multiwindow Browser. Interacting with Computers Vol 1 No. </title> <note> 3 1989 pp 301-337 (1989) </note>
Reference: [12] <author> R. H. Thompson & W. B. Croft. </author> <title> Support for Browsing In An Intelligent Text Retrieval System. </title> <journal> Int. J. Man-Machine Studies Vol. </journal> <note> 30 pp 639-668 (1989) </note>
Reference: [13] <author> G. Fischer & H. Nieper-Lemke. HELGON: </author> <title> Extending The Retrieval By Reformulation Paradigm. </title> <booktitle> Proc. CHI-89 Human Factors In Computing Systems pp 357-362 (1989) </booktitle>
Reference-contexts: We focus on browsing because we feel that indexing, although effective, has certain limitations which browsing can overcome. For instance, indexing methods are appropriate only if the user has a good goal definition. Without a good goal definition the user must browse. Fischer et al. state <ref> [13] </ref>, when describing natural language interfaces for information retrieval, ..... they do not assist users who are unable to describe precisely what they want at the beginning of an information seeking process.
Reference: [14] <author> G.W. Furnas, T.K. Landauer, L.M. Gomez & S.T. Dumais. </author> <title> The Vocabulary Problem In Human-System Communication. </title> <journal> CACM. </journal> <note> Nov 1987 Vol 30 No 11 pp 964-971 (1987) </note>
Reference-contexts: Even a good indexing scheme is not effective if the user is unfamil <p>- iar with the indexing language. A frequent cause of such unfamiliarity is that different users are not consistent in the way they name or classify items <ref> [14] </ref>. The two methods, browsing and indexing, are by no means mutually exclusive. If the user can accurately describe the whole or even a significant part of the target, indexing is the more powerful approach. Ideally indexing and browsing facilities would be incorporated in the same system.
Reference: [15] <author> S. D. Fraser, J. M. Duran & R. Aubin. </author> <title> Software Indexing For Reuse. </title> <booktitle> Proc. 1989 IEEE International Conference On Systems, Man and Cybernetics pp 853-858 (1989) </booktitle>
Reference: [16] <author> R. Prieto-Diaz. </author> <title> Implementing Faceted Classification For Software Reuse. </title> <note> CACM Vol 34 1991 pp 89-97 (1991) </note>
Reference: [17] <author> Y. S. Maarek, D. M. Berry & G. E. Kaiser. </author> <title> An Information Retrieval Approach For Automatically Constructing Software Libraries. </title> <journal> IEEE Transactions On Software Engineering Vol. </journal> <volume> 17 No. </volume> <month> 8 Aug. </month> <note> 1991 pp 800-813 (1991) </note>
Reference: [18] <author> T. J. Biggerstaff, C. Richter. </author> <title> Reusability Framework, Assessment And Directions. </title> <note> Software Reusability Vol 1 Ed T.J. Biggerstaff A.J. Perlis, ACM Press pp 1-17(1987) </note>
Reference: [19] <author> E. Horowitz & J.B. Munson. </author> <title> An Expansive View Of Reusable Software. </title> <note> Software Reusability Vol 1 Ed T.J. Biggerstaff A.J. Perlis ACM Press pp 19-41 (1984) </note>
Reference: [20] <author> D. A. White. </author> <title> The Knowledge-Based Software Assistant: A Program Summary. Tutorial Overview. </title> <booktitle> Proc. 6th Knowledge Based Software Engineering Conference (1991) </booktitle>
Reference-contexts: Actual code reuse is felt by some to give limited returns [18,19]. They propose the reuse of much higher level software design information. An important idea within the knowledge base community is the Knowledge- Based Software Assistant <ref> [20] </ref>. This approach aims to formalize the whole process of software development and use correctness preserving transforms to aid the user in producing executable code from specifications. As new software is synthesized, not composed from already existing code, this would seem to obviate the need for libraries.
Reference: [21] <author> W. L. Johnson. </author> <title> Interactive Acquisition Of Requirements For Large Systems. Automating Software Design: </title> <booktitle> Interactive Design Workshop Notes AAAI-91 pp 61-70 (1991) </booktitle>
Reference-contexts: As new software is synthesized, not composed from already existing code, this would seem to obviate the need for libraries. In practice, however, there are likely to be libraries of software artifacts even if they are of a radically different form from code. As W. L. Johnson <ref> [21] </ref> points out Reuse is essential at the requirements level, just as it is at the program level. The principles of the system outlined in this paper should be readily transferable to libraries of any software artifacts.
References-found: 21

