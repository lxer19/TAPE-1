URL: ftp://rtcl.eecs.umich.edu/outgoing/ashish/rtas95.ps.Z
Refering-URL: http://www.eecs.umich.edu/~ashish/
Root-URL: http://www.cs.umich.edu
Email: E-mail: fashish, jrexford, anghs, farnamg@eecs.umich.edu  
Title: Design and Evaluation of a Window-Consistent Replication Service  
Author: Ashish Mehra, Jennifer Rexford, Hock-Siong Ang and Farnam Jahanian 
Address: Ann Arbor, MI 48109-2122  
Affiliation: Real-Time Computing Laboratory Department of Electrical Engineering and Computer Science The University of Michigan  
Abstract: Real-time applications typically operate under strict timing and dependability constraints. Although traditional data replication protocols provide fault tolerance, real-time guarantees require bounded overhead for managing this redundancy. This paper presents the design and evaluation of a window-consistent primary-backup replication service that provides timely availability of the repository by relaxing the consistency of the replicated data. The service guarantees controlled inconsistency by scheduling update transmissions from the primary to the backup(s); this ensures that client applications interact with a window-consistent repository when a backup must supplant a failed primary. Experiments on our prototype implementation show that the service handles a range of client loads while maintaining bounds on temporal inconsistency. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Rexford, A. Mehra, J. Dolter, and F. Jahanian, </author> <title> "Window-consistent replication for real-time applications," </title> <booktitle> in Proc. Workshop on Real-Time Operating Systems and Software, </booktitle> <pages> pp. 107-111, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: This paper presents the design and implementation of a data replication service that combines fault-tolerant protocols, real-time scheduling, and temporal consistency semantics to accommodate such system requirements <ref> [1] </ref>. A client application registers a data object with the service by declaring the consistency requirements for the data, in terms of a time window.
Reference: [2] <author> F. B. Schneider, </author> <title> "Implementing fault-tolerant services using the state machine approach: A tutorial," </title> <journal> ACM Computing Surveys, </journal> <volume> vol. 22, no. 4, </volume> <pages> pp. 299-319, </pages> <month> De-cember </month> <year> 1990. </year>
Reference: [3] <author> K. P. Birman and T. A. Joseph, </author> <title> "Reliable communication in the presence of failures," </title> <journal> ACM Trans. Computer Systems, </journal> <volume> vol. 5, no. 1, </volume> <pages> pp. 47-76, </pages> <year> 1987. </year>
Reference: [4] <author> F. Cristian, B. Dancy, and J. Dehn, </author> <title> "Fault-tolerance in the advanced automation system," </title> <booktitle> in Proc. Int'l Symp. on Fault-Tolerant Computing, </booktitle> <pages> pp. 6-17, </pages> <month> June </month> <year> 1990. </year>
Reference: [5] <author> S. Mishra, L. L. Peterson, and R. D. Schlicht-ing, </author> <title> "Consul: A communication substrate for fault-tolerant distributed programs," </title> <type> Technical Report 91-32, </type> <institution> University of Arizona, </institution> <month> November </month> <year> 1991. </year>
Reference: [6] <author> K. P. Birman, </author> <title> "The process group approach to reliable distributed computing," </title> <journal> Communications of the ACM, </journal> <volume> vol. 36, no. 12, </volume> <pages> pp. 37-53, </pages> <month> December </month> <year> 1993. </year>
Reference: [7] <author> P. Alsberg and J. Day, </author> <title> "A principle for resilient sharing of distributed resources," </title> <booktitle> in Proc. IEEE Int'l Conf. on Software Engineering, </booktitle> <address> Los Angeles, </address> <year> 1976. </year>
Reference: [8] <author> N. Budhiraja, K. Marzullo, F. B. Schneider, and S. Toueg, </author> <title> "Primary-backup protocols: Lower bounds and optimal implementations," </title> <booktitle> in Proc. IFIP Working Conference on Dependable Computing, </booktitle> <pages> pp. 187-198, </pages> <year> 1992. </year>
Reference: [9] <author> J. F. Bartlett, </author> <title> "A NonStop kernel," </title> <booktitle> in Proc. ACM Symp. on Operating Systems Principles, </booktitle> <year> 1981. </year>
Reference: [10] <author> A. Bhide, E. N. Elnozahy, and S. P. Morgan, </author> <title> "A highly available network file server," </title> <booktitle> in Winter USENIX Conference, </booktitle> <pages> pp. 199-205, </pages> <month> January </month> <year> 1991. </year>
Reference: [11] <author> H. Kopetz, A. Damm, C. Koza, M. Mulazzani, W. Schwabl, C. Senft, and R. Zainlinger, </author> <title> "Distributed fault-tolerant real-time systems: The MARS approach," </title> <booktitle> IEEE Micro, </booktitle> <pages> pp. 25-40, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: This artificially ties the rate of write operations to the communication capacity in the service, limiting system throughput while ensuring consistent data. Synchronization of redundant servers poses additional challenges in real-time environments; several recent experimental projects support server replication in distributed hard real-time systems <ref> [11, 12] </ref>.
Reference: [12] <author> P. Verissimo, P. Barrett, P. Bond, A. Hilborne, L. Ro-drigues, and D. Seaton, </author> <title> "The extra performance architecture (XPA)," in Delta-4 A Generic Architecture for Dependable Distributed Computing, </title> <editor> D. Pow-ell, editor, </editor> <year> 1991. </year>
Reference-contexts: This artificially ties the rate of write operations to the communication capacity in the service, limiting system throughput while ensuring consistent data. Synchronization of redundant servers poses additional challenges in real-time environments; several recent experimental projects support server replication in distributed hard real-time systems <ref> [11, 12] </ref>.
Reference: [13] <author> C. Pu and A. Leff, </author> <title> "Replica control in distributed systems: An asynchronous approach," </title> <booktitle> in Proc. ACM SIGMOD, </booktitle> <pages> pp. 377-386, </pages> <month> May </month> <year> 1991. </year>
Reference: [14] <author> T.-W. Kuo and A. K. Mok, </author> <title> "Ssp: a semantics-based protocol for real-time data access," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 76-86, </pages> <month> December </month> <year> 1993. </year>
Reference: [15] <author> K.-J. Lin, F. Jahanian, A. Jhingran, and C. D. Locke, </author> <title> "A model of hard real-time transaction systems," </title> <type> Technical Report RC 17515, </type> <institution> IBM T.J. Watson Re-seach Center, </institution> <month> January </month> <year> 1992. </year>
Reference: [16] <author> H. F. Korth, N. Soparkar, and A. Silberschatz, </author> <title> "Triggered real time databases with consistency constraints," </title> <booktitle> in Proc. Int'l Conf. on Very Large Data Bases, </booktitle> <month> August </month> <year> 1990. </year>
Reference: [17] <author> S. B. Davidson and A. Watters, </author> <title> "Partial computation in real-time database systems," </title> <booktitle> in Proc. Workshop on Real-Time Operating Systems and Software, </booktitle> <pages> pp. 117-121, </pages> <month> May </month> <year> 1988. </year>
Reference: [18] <author> J. W. S. Liu, W.-K. Shih, and K.-J. Lin, </author> <title> "Imprecise computations," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 82, no. 1, </volume> <pages> pp. 83-94, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: In particular, a number of researchers have observed that serializability is too strict a correctness criterion for real-time databases. Relaxed correctness criteria facilitate higher concurrency by permitting a limited amount of inconsistency in how a transaction views the database state [13-17]. Similarly, imprecise computation <ref> [18] </ref> ensures that a real-time computation meets its timing constraints by approximating numerical results when there is not sufficient time to compute an exact value. Other non-real-time applications also exploit weak consistency to obtain better performance.
Reference: [19] <author> R. Alonso, D. Barbara, and H. Garcia-Molina, </author> <title> "Data caching issues in an information retrieval system," </title> <journal> ACM Trans. Database Systems, </journal> <volume> vol. 15, no. 3, </volume> <pages> pp. 359-384, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Similarly, imprecise computation [18] ensures that a real-time computation meets its timing constraints by approximating numerical results when there is not sufficient time to compute an exact value. Other non-real-time applications also exploit weak consistency to obtain better performance. For instance, the quasi-copy model <ref> [19] </ref> permits weak consistency between the central data and its cached copies at remote sites.
Reference: [20] <author> F. Cristian, </author> <title> "Understanding fault tolerant distributed systems," </title> <journal> Communications of the ACM, </journal> <volume> vol. 34, no. 2, </volume> <pages> pp. 56-78, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: Since t P i (t) t, window consistency guarantees that t P i (t) t B 4 Real-Time Update Scheduling This section describes how the primary can use existing real-time task scheduling algorithms to coordinate update transmissions to the backups. In the absence of link failures <ref> [20] </ref>, we assume a bound ` on communication latency within the service.
Reference: [21] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling algorithms for multiprogramming in a hard real-time environment," </title> <journal> Journal of the ACM, </journal> <volume> vol. 20, no. 1, </volume> <pages> pp. 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference-contexts: The scheduler always runs the ready task with the highest priority, preempting execution if a higher-priority task arrives. For example, rate-monotonic scheduling statically assigns higher priority to tasks with shorter periods <ref> [21, 22] </ref>, while earliest-due-date scheduling favors tasks with earlier deadlines [21]. The scheduling algorithm, coupled with the object parameters e i and ffi i , determines a schedulability criterion based on the total processor and network utilization. <p> The scheduler always runs the ready task with the highest priority, preempting execution if a higher-priority task arrives. For example, rate-monotonic scheduling statically assigns higher priority to tasks with shorter periods [21, 22], while earliest-due-date scheduling favors tasks with earlier deadlines <ref> [21] </ref>. The scheduling algorithm, coupled with the object parameters e i and ffi i , determines a schedulability criterion based on the total processor and network utilization. <p> In order to accommodate preemptive scheduling and objects of various sizes, the primary can send an update message as one or more fixed-length packets. (a) Periodic schedule (b) Compressed periodic schedule resource utilization (e.g., 0:69 for rate-monotonic and 1 for earliest-due-date) <ref> [21] </ref>. 4.2 Compressing the Periodic Schedule While the periodic model can guarantee sufficient updates for each object, the schedule updates O i only once per period p i , even if computation and network resources permit more frequent transmissions.
Reference: [22] <author> J. Lehoczky, L. Sha, and Y. Ding, </author> <title> "The rate monotonic scheduling algorithm: Exact characterization and average case behavior," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 166-171. </pages> <publisher> IEEE, </publisher> <month> December </month> <year> 1989. </year>
Reference-contexts: The scheduler always runs the ready task with the highest priority, preempting execution if a higher-priority task arrives. For example, rate-monotonic scheduling statically assigns higher priority to tasks with shorter periods <ref> [21, 22] </ref>, while earliest-due-date scheduling favors tasks with earlier deadlines [21]. The scheduling algorithm, coupled with the object parameters e i and ffi i , determines a schedulability criterion based on the total processor and network utilization.
Reference: [23] <author> J.-F. Paris, </author> <title> "Using volatile witnesses to extend the applicability of available copy protocols," </title> <booktitle> in Proc. Workshop on the Management of Replicated Data, </booktitle> <pages> pp. 30-33, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: When the system has multiple backups, the sites vote to select the valid primary. If the replication service has only one backup site, a third-party "witness" <ref> [23] </ref> can cast the deciding vote in failure di agnosis. In a real-time control system, the actuator devices could implicitly serve as this witness; if a new server starts issuing commands to the actuators, the devices could ignore subsequent instructions from the previous primary site.
Reference: [24] <author> G. Swaminathan, </author> <title> C++ Socket Classes, </title> <institution> University of Virginia, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Any client read/write requests and update acknowl-edgements are processed next, with priority given to client requests. Each server is currently a Sun SPARCstation running Solaris 1.1. The sites communicate over an Ethernet through UDP datagrams using the Socket++ library <ref> [24] </ref>. While Solaris 1.1 provides a stable environment for code development and testing, the platform does not support real-time process scheduling or bounded communication delays. A tick period of 100 ms was chosen to minimize the intrusion from other runnable system processes.
Reference: [25] <author> C. W. Mercer, J. Zelenka, and R. Rajkumar, </author> <title> "On predictable operating system protocol processing," </title> <type> Technical Report CMU-CS-94-165, </type> <institution> Carnegie Mellon University, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: While our prototype implementa tion has successfully demonstrated the utility of the window-consistent replication model, more extensive evaluation on a true real-time platform is needed to validate the ideas identified in this paper. We have recently implemented the window-consistent replication service on RT-Mach <ref> [25] </ref> and added support for fault-detection, failover, and integration of new backups. We plan to conduct a more extensive evaluation of the RT-Mach-based implementation, starting with a repeat of the experiments reported here.
Reference: [26] <author> C.-C. Han and K.-J. Lin, </author> <title> "Scheduling distance-constrained real-time tasks," </title> <booktitle> in Proc. Real-Time Systems Symposium, </booktitle> <pages> pp. 300-308, </pages> <year> 1992. </year>
Reference-contexts: The present work extends into several fruitful areas of research: Object admission/scheduling: We are studying techniques to maximize the number of admitted objects and improve objects' window consistency, including other scheduling algorithms such as the distance-constrained task model <ref> [26] </ref>. Inter-object window consistency: We are extending our window-consistent replication model to incorporate temporal consistency constraints between objects. Our goal is to bound consistency in a replicated set of related objects; new algorithms may be necessary for real-time update scheduling of such object sets.
References-found: 26

