URL: ftp://ftp.cs.arizona.edu/people/hiltunen/coyote.ps.Z
Refering-URL: http://www.cs.arizona.edu/people/hiltunen/hiltunen.html
Root-URL: http://www.cs.arizona.edu
Title: Coyote: A System for Constructing Fine-Grain Configurable Communication Services  
Author: Nina T. Bhatti, Matti A. Hiltunen, Richard D. Schlichting, and Wanda Chiu 
Keyword: Categories and Subject Descriptors: C.2.2 [Computer-Communication Networks]: Network Protocols Protocol architecture; C.2.4 [Computer-Communication Networks]: Distributed Systems Distributed applications; D.1.3 [Programming Techniques]: Concurrent Programming Distributed programming; D.2.m [Software Engineering]: Miscellaneous Reusable software; D.4.4 [Operating Systems]: Communication Management Network communication; D.4.5 [Operating Systems]: Reliability Fault-tolerance; D.4.7 [Operating Systems]: Organization and Design Distributed systems. General Terms: Design, Experimentation, Performance, Reliability Additional Key Words and Phrases: Configurable services, customization, event-driven execution, event handlers, membership, mobile computing, micro-protocols, modularity, multicast, protocols, remote procedure call, -kernel.  
Address: Tucson, AZ 85721, USA  
Affiliation: Department of Computer Science The University of Arizona  
Abstract: Communication-oriented abstractions such as atomic multicast, group RPC, and protocols for location-independent mobile computing can simplify the development of complex applications built on distributed systems. This paper describes Coyote, a system that supports the construction of highly modular and configurable versions of such abstractions. Coyote extends the notion of protocol objects and hierarchical composition found in existing systems with support for finer-grain objects called micro-protocols that implement individual semantic properties of the target service. A customized service is constructed by selecting micro-protocols based on their semantic guarantees and configuring them together with a standard runtime system to form a composite protocol implementing the service. Micro-protocols within a composite protocol can share data and are executed using an event-driven paradigm that enhances configurability. The overall approach is described and illustrated with examples of services that have been constructed using Coyote, including atomic multicast, group RPC, membership, and mobile computing protocols. A prototype implementation based on extending x-kernel version 3.2 running on Mach MK82 with support for micro-protocols is also presented, together with performance results from a suite of micro-protocols from which over 60 variants of group RPC can be constructed. 
Abstract-found: 1
Intro-found: 1
Reference: [AB93] <author> A. Acharya and B. R. Badrinath. </author> <title> Delivering multicast messages in networks with mobile hosts. </title> <booktitle> In Proceedings of the 13th IEEE International Conference on Distributed Computing Systems, </booktitle> <pages> pages 292-299, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: This collection of micro-protocols can be used to built any number of custom communication services for mobile computing, including those with semantics similar to existing systems such as Crosspoint [CR94, CLR95], DataMan <ref> [AB93, BBIM93] </ref>, InfoPad [LSBR94, LBSR95], and PARC TAB [AGSW93, STW93]. For example, Crosspoint combines ICMP for handoff detection, negative acknowledgments for effecting the handoff, and forwarding for disconnection, while PARC TAB combines a beacon strategy, agent-based handoff, and packet dropping. InfoPad includes QoS guarantees as well.
Reference: [ACG86] <author> S. Ahuja, N. Carriero, and D. Gelernter. </author> <title> Linda and friends. </title> <journal> IEEE Computer, </journal> <volume> 19(8) </volume> <pages> 26-34, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: This section provides an overview of these three micro-protocol suites. 5.1 Atomic Multicast The atomic multicast service is a customized version designed for the runtime system of a fault-tolerant version of the Linda coordination language <ref> [ACG86] </ref> called FT-Linda [BS95]. Linda is a language for parallel programming based on tuple space (TS), a communication abstraction defined as a bag that can hold data elements called tuples. Processes use TS to communicate and synchronize by depositing and withdrawing tuples from a TS.
Reference: [AGSW93] <author> N. Adams, R. Gold, B. Schilit, and R. </author> <title> Want. An infrared network for mobile computers. </title> <booktitle> In Proceedings of the USENIX Mobile and Location-Independent Computing Symposium, </booktitle> <pages> pages 41-51, </pages> <month> Aug </month> <year> 1993. </year>
Reference-contexts: This collection of micro-protocols can be used to built any number of custom communication services for mobile computing, including those with semantics similar to existing systems such as Crosspoint [CR94, CLR95], DataMan [AB93, BBIM93], InfoPad [LSBR94, LBSR95], and PARC TAB <ref> [AGSW93, STW93] </ref>. For example, Crosspoint combines ICMP for handoff detection, negative acknowledgments for effecting the handoff, and forwarding for disconnection, while PARC TAB combines a beacon strategy, agent-based handoff, and packet dropping. InfoPad includes QoS guarantees as well.
Reference: [AS94] <author> G. Agha and D. Sturman. </author> <title> A methodology for adapting to patterns of faults. </title> <editor> In G. Koob and C. Lau, editors, </editor> <booktitle> Foundations of Dependable Computing: Models and Frameworks for Dependable Systems, </booktitle> <pages> pages 23-60. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1994. </year>
Reference-contexts: In contrast to these, our approach is more general and provides more flexibility for the designer. Object-oriented structuring and the use of reflection to alter behavior in fault-tolerant distributed programs or general operating systems are described in <ref> [AS94, FNP + 95, Yok92] </ref>. As demonstrated with the C++ prototype, our approach can also be mapped into an object-oriented paradigm, but is general enough to be implemented using more traditional approaches.
Reference: [ASJS96] <author> T. Abdelzaher, A. Shaikh, F. Jahanian, and K. Shin. RTCAST: </author> <title> Lightweight multicast for real-time process groups. </title> <booktitle> In Proceedings of the IEEE Real-Time Technology and Applications Symposium, </booktitle> <pages> pages 250-259, </pages> <month> Jun </month> <year> 1996. </year>
Reference-contexts: Many of our goals related to system customization, code reuse, and protocol configurability are adopted from the x-kernel. Horus [vRHB94, RBM96] and Ensemble [BRV96] have been used to construct configurable versions of distributed services, although the models are limited to stack-like configurations of coarse-grained protocol objects. Armada <ref> [ASJS96] </ref> and OSF/RI MK [TMR96] extend the x-kernel model to support real-time, but with the same protocol object and composition model. Other x-kernel related work has explored the use of finer-grain protocol objects [OP92], but the emphasis there is on syntactic decomposition of higher-level protocols within a hierarchical framework.
Reference: [BBIM93] <author> B. Badrinath, A. Bakre, T. Imielinski, and R. Marantz. </author> <title> Handling mobile clients: A case for indirect interaction. </title> <booktitle> In Proceedings of the Fourth IEEE Workshop on Workstation Operating Systems, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: This collection of micro-protocols can be used to built any number of custom communication services for mobile computing, including those with semantics similar to existing systems such as Crosspoint [CR94, CLR95], DataMan <ref> [AB93, BBIM93] </ref>, InfoPad [LSBR94, LBSR95], and PARC TAB [AGSW93, STW93]. For example, Crosspoint combines ICMP for handoff detection, negative acknowledgments for effecting the handoff, and forwarding for disconnection, while PARC TAB combines a beacon strategy, agent-based handoff, and packet dropping. InfoPad includes QoS guarantees as well.
Reference: [Bha96] <author> N. Bhatti. </author> <title> A System for Constructing Configurable High-Level Protocols. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <month> Nov </month> <year> 1996. </year>
Reference-contexts: A subset has also been ported to the x-kernel prototype. 5.3 Protocols for Mobile Computing To illustrate the value of the approach for other types of applications, a micro-protocol suite has been developed to support customization of communication protocols for mobile computing <ref> [Bha96] </ref>. This suite supports customization of the underlying communication software for different types of mobile hosts, for the base stations that function as gateways between the wired network and mobile host, and for stationary agent processes that act as proxies on the wired network for mobile hosts.
Reference: [BHG87] <author> P. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications [BSS91, CASD85, MSMA90, PBS89]. Other abstractions of this type include group RPC [Che86, CGR88, Coo90], membership [Cri91, KGR91, MPS92], distributed transactions <ref> [BHG87] </ref>, and protocols related to multimedia applications [KE93, Yav92].
Reference: [Bla91] <author> A. Black. </author> <title> Understanding transations in an operating system context. </title> <journal> ACM Operating Systems Review, </journal> <volume> 20(1) </volume> <pages> 73-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: As demonstrated with the C++ prototype, our approach can also be mapped into an object-oriented paradigm, but is general enough to be implemented using more traditional approaches. Also in the area of fault-tolerance, a number of papers describe abstract properties of services or certain components such as failure detectors <ref> [Bla91, CT96, SR93] </ref>, or present families of related services [CASD85, WS95]. Such work is complementary to that presented here since it suggests how configurable versions of a service can be implemented using micro-protocols. Another area of related work concerns development of system support for constructing modular protocols.
Reference: [BRV96] <author> K. Birman, R. Renesse, and W. Vogels. </author> <title> The Ensemble distributed communication system. </title> <note> http://simon.cs.cornell.edu/Info/Projects/Ensemble/, 1996. </note>
Reference-contexts: Many of our goals related to system customization, code reuse, and protocol configurability are adopted from the x-kernel. Horus [vRHB94, RBM96] and Ensemble <ref> [BRV96] </ref> have been used to construct configurable versions of distributed services, although the models are limited to stack-like configurations of coarse-grained protocol objects. Armada [ASJS96] and OSF/RI MK [TMR96] extend the x-kernel model to support real-time, but with the same protocol object and composition model.
Reference: [BS95] <author> D. Bakken and R. Schlichting. </author> <title> Supporting fault-tolerant parallel programming in Linda. </title> <journal> IEEE Transactions on Parallel and Distr. Syst., </journal> <volume> 6(3) </volume> <pages> 287-302, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: This section provides an overview of these three micro-protocol suites. 5.1 Atomic Multicast The atomic multicast service is a customized version designed for the runtime system of a fault-tolerant version of the Linda coordination language [ACG86] called FT-Linda <ref> [BS95] </ref>. Linda is a language for parallel programming based on tuple space (TS), a communication abstraction defined as a bag that can hold data elements called tuples. Processes use TS to communicate and synchronize by depositing and withdrawing tuples from a TS.
Reference: [BSS91] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Complex applications built on a distributed architecture can be simplified if the underlying software provides suitably tailored communication-oriented abstractions. For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications <ref> [BSS91, CASD85, MSMA90, PBS89] </ref>. Other abstractions of this type include group RPC [Che86, CGR88, Coo90], membership [Cri91, KGR91, MPS92], distributed transactions [BHG87], and protocols related to multimedia applications [KE93, Yav92].
Reference: [BSS + 95] <author> B. Bershad, P. Savage, S.and Pardyak, E. Sirer, M. Fiuczynski, D. Becker, C. Chambers, and S. Eggers. </author> <title> Extensibility, safety, and performance in the SPIN operating system. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 267-284, </pages> <address> Copper Mountain Resort, Colorado, </address> <month> Dec </month> <year> 1995. </year>
Reference-contexts: The lack of a sufficiently rich protocol object interface has also been cited as one of the motivations for developing Horus, a successor to the Isis system [RBM96]. In addition, our approach is related to recent work in configurable operating systems <ref> [BSS + 95, EKO95, HPM93, MMO + 94] </ref> and on the use of object-orientation and reflection to build customizable operating systems [MHM + 95, Yok92] and services for distributed systems [FNP + 95]. <p> Finally, recent work on new generation operating systems has emphasized similar customization goals, but in a more general context. These include the Exokernel [EKO95], Scout [MMO + 94], and SPIN <ref> [BSS + 95] </ref>, as well as work on subcontracts [HPM93] and application-controlled file caching [CFL94]. These projects attempt to increase the ability of users to configure different types of services, but for many aspects of operating system functionality rather than just the type of services considered here.
Reference: [CASD85] <author> F. Cristian, H. Aghili, R. Strong, and D. Dolev. </author> <title> Atomic broadcast: From simple message diffusion to Byzantine agreement. </title> <booktitle> In Proceedings of the 15th IEEE International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 200-206, </pages> <address> Ann Arbor, MI, </address> <month> Jun </month> <year> 1985. </year> <month> 32 </month>
Reference-contexts: 1 Introduction Complex applications built on a distributed architecture can be simplified if the underlying software provides suitably tailored communication-oriented abstractions. For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications <ref> [BSS91, CASD85, MSMA90, PBS89] </ref>. Other abstractions of this type include group RPC [Che86, CGR88, Coo90], membership [Cri91, KGR91, MPS92], distributed transactions [BHG87], and protocols related to multimedia applications [KE93, Yav92]. <p> Also in the area of fault-tolerance, a number of papers describe abstract properties of services or certain components such as failure detectors [Bla91, CT96, SR93], or present families of related services <ref> [CASD85, WS95] </ref>. Such work is complementary to that presented here since it suggests how configurable versions of a service can be implemented using micro-protocols. Another area of related work concerns development of system support for constructing modular protocols. The x-kernel itself is, of course, one such system.
Reference: [CFL94] <author> P. Cao, E. Felten, and K. Li. </author> <title> Implementation and performance of application-controlled file caching. </title> <booktitle> In Proceedings of the 1st USENIX Symposium on Operating Systems Design and Implementation, </booktitle> <pages> pages 165-178, </pages> <month> Nov </month> <year> 1994. </year>
Reference-contexts: Finally, recent work on new generation operating systems has emphasized similar customization goals, but in a more general context. These include the Exokernel [EKO95], Scout [MMO + 94], and SPIN [BSS + 95], as well as work on subcontracts [HPM93] and application-controlled file caching <ref> [CFL94] </ref>. These projects attempt to increase the ability of users to configure different types of services, but for many aspects of operating system functionality rather than just the type of services considered here.
Reference: [CGR88] <author> R. Cmelik, N. Gehani, and W. Roome. </author> <title> Fault Tolerant Concurrent C: A tool for writing fault tolerant distributed programs. </title> <booktitle> In Proceedings of the 18th IEEE International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 55-61, </pages> <address> Tokyo, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications [BSS91, CASD85, MSMA90, PBS89]. Other abstractions of this type include group RPC <ref> [Che86, CGR88, Coo90] </ref>, membership [Cri91, KGR91, MPS92], distributed transactions [BHG87], and protocols related to multimedia applications [KE93, Yav92].
Reference: [Che86] <author> D. Cheriton. VMTP: </author> <title> A transport protocol for the next generation of communication systems. </title> <booktitle> In Proceedings of SIGCOMM'86, </booktitle> <pages> pages 406-415, </pages> <month> Aug </month> <year> 1986. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications [BSS91, CASD85, MSMA90, PBS89]. Other abstractions of this type include group RPC <ref> [Che86, CGR88, Coo90] </ref>, membership [Cri91, KGR91, MPS92], distributed transactions [BHG87], and protocols related to multimedia applications [KE93, Yav92].
Reference: [CLR95] <author> D. Comer, J. Lin, and V. Russo. </author> <title> An architecture for a campus-scale wireless mobile internet. </title> <type> Technical Report CSD-TR95-058, </type> <institution> Purdue University, Department of Computer Science, </institution> <year> 1995. </year>
Reference-contexts: This collection of micro-protocols can be used to built any number of custom communication services for mobile computing, including those with semantics similar to existing systems such as Crosspoint <ref> [CR94, CLR95] </ref>, DataMan [AB93, BBIM93], InfoPad [LSBR94, LBSR95], and PARC TAB [AGSW93, STW93]. For example, Crosspoint combines ICMP for handoff detection, negative acknowledgments for effecting the handoff, and forwarding for disconnection, while PARC TAB combines a beacon strategy, agent-based handoff, and packet dropping. InfoPad includes QoS guarantees as well.
Reference: [Coo90] <author> E. Cooper. </author> <title> Programming language support for multicast communication in distributed systems. </title> <booktitle> In Proceedings of the 10th IEEE Conference on Distributed Computing Systems, </booktitle> <pages> pages 450-457, </pages> <address> Paris, France, </address> <year> 1990. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications [BSS91, CASD85, MSMA90, PBS89]. Other abstractions of this type include group RPC <ref> [Che86, CGR88, Coo90] </ref>, membership [Cri91, KGR91, MPS92], distributed transactions [BHG87], and protocols related to multimedia applications [KE93, Yav92].
Reference: [CR94] <author> D. Comer and V. Russo. </author> <title> Using ATM for a campus-wide wireless internetwork. </title> <booktitle> In Proceedings of the 1994 IEEE Workshop on Mobile Computing, </booktitle> <year> 1994. </year>
Reference-contexts: This collection of micro-protocols can be used to built any number of custom communication services for mobile computing, including those with semantics similar to existing systems such as Crosspoint <ref> [CR94, CLR95] </ref>, DataMan [AB93, BBIM93], InfoPad [LSBR94, LBSR95], and PARC TAB [AGSW93, STW93]. For example, Crosspoint combines ICMP for handoff detection, negative acknowledgments for effecting the handoff, and forwarding for disconnection, while PARC TAB combines a beacon strategy, agent-based handoff, and packet dropping. InfoPad includes QoS guarantees as well.
Reference: [Cri91] <author> F. Cristian. </author> <title> Reaching agreement on processor-group membership in synchronous distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 4 </volume> <pages> 175-187, </pages> <year> 1991. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications [BSS91, CASD85, MSMA90, PBS89]. Other abstractions of this type include group RPC [Che86, CGR88, Coo90], membership <ref> [Cri91, KGR91, MPS92] </ref>, distributed transactions [BHG87], and protocols related to multimedia applications [KE93, Yav92].
Reference: [CT96] <author> T. Chandra and S. Toueg. </author> <title> Unreliable failure detectors for reliable distributed systems. </title> <journal> Journal of the ACM, </journal> <volume> 34(1) </volume> <pages> 225-267, </pages> <year> 1996. </year>
Reference-contexts: As demonstrated with the C++ prototype, our approach can also be mapped into an object-oriented paradigm, but is general enough to be implemented using more traditional approaches. Also in the area of fault-tolerance, a number of papers describe abstract properties of services or certain components such as failure detectors <ref> [Bla91, CT96, SR93] </ref>, or present families of related services [CASD85, WS95]. Such work is complementary to that presented here since it suggests how configurable versions of a service can be implemented using micro-protocols. Another area of related work concerns development of system support for constructing modular protocols.
Reference: [EKO95] <author> D. Engler, M. Kaashoek, and J. O'Toole. Exokernel: </author> <title> An operating system architecture for application-level resource management. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 251-266, </pages> <address> Copper Mountain Resort, Colorado, </address> <month> Dec </month> <year> 1995. </year>
Reference-contexts: The lack of a sufficiently rich protocol object interface has also been cited as one of the motivations for developing Horus, a successor to the Isis system [RBM96]. In addition, our approach is related to recent work in configurable operating systems <ref> [BSS + 95, EKO95, HPM93, MMO + 94] </ref> and on the use of object-orientation and reflection to build customizable operating systems [MHM + 95, Yok92] and services for distributed systems [FNP + 95]. <p> They also retain a single-level composition model, which we believe does not offer enough flexibility for services of the type described here. Finally, recent work on new generation operating systems has emphasized similar customization goals, but in a more general context. These include the Exokernel <ref> [EKO95] </ref>, Scout [MMO + 94], and SPIN [BSS + 95], as well as work on subcontracts [HPM93] and application-controlled file caching [CFL94].
Reference: [FLP85] <author> M. Fischer, N. Lynch, and M. Paterson. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> Journal of the ACM, </journal> <volume> 32(2) </volume> <pages> 374-382, </pages> <month> Apr </month> <year> 1985. </year>
Reference-contexts: The relations may result from fundamental relations between the properties being implemented or from implementation choices made during the design process. For example, failure detection cannot be both live and accurate in asynchronous systems <ref> [FLP85, SM94] </ref>, so micro-protocols implementing these variants conflict based on their underlying properties.
Reference: [FNP + 95] <author> J.-C. Fabre, V. Nicomette, T. Perennou, R. Stroud, and Z. Wu. </author> <title> Implementing fault tolerant applications using reflective object-oriented programming. </title> <booktitle> In Proceedings of the 25th IEEE International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 489-498, </pages> <address> Pasadena, CA, </address> <month> Jun </month> <year> 1995. </year>
Reference-contexts: In addition, our approach is related to recent work in configurable operating systems [BSS + 95, EKO95, HPM93, MMO + 94] and on the use of object-orientation and reflection to build customizable operating systems [MHM + 95, Yok92] and services for distributed systems <ref> [FNP + 95] </ref>. Two prototype versions of Coyote have been constructed, including one that augments the x-kernel's standard hierarchical object composition model with the ability to internally structure x-kernel protocol objects using micro-protocols. <p> In contrast to these, our approach is more general and provides more flexibility for the designer. Object-oriented structuring and the use of reflection to alter behavior in fault-tolerant distributed programs or general operating systems are described in <ref> [AS94, FNP + 95, Yok92] </ref>. As demonstrated with the C++ prototype, our approach can also be mapped into an object-oriented paradigm, but is general enough to be implemented using more traditional approaches.
Reference: [Fon94] <author> H. Fonseca. </author> <title> Support environments for the modularization, implementation and execution of communication protocols. </title> <type> Master's thesis, </type> <institution> Instituto Superior Tecnico, Lisboa, Portugal, </institution> <month> June </month> <year> 1994. </year> <note> In Portuguese. </note>
Reference-contexts: The developers of xAMP, a real-time atomic multicast protocol, report a similar experience <ref> [Fon94, VRB89] </ref>. The lack of a sufficiently rich protocol object interface has also been cited as one of the motivations for developing Horus, a successor to the Isis system [RBM96].
Reference: [GNI92] <author> M. Goldberg, G. Neufeld, and M. Ito. </author> <title> The parallel protocol framework. </title> <type> Technical Report 92-16, </type> <institution> Dept. of Computer Science, University of British Columbia, Vancouver, British Columbia, </institution> <month> Aug </month> <year> 1992. </year>
Reference-contexts: Interactions between the modules in this model are predefined and fixed, in contrast with the more flexible possibilities of our model. Several other efforts have concentrated on supporting parallel execution of modular protocols, including <ref> [GNI92, LAKS93] </ref>. While similar to our work in the sense of decomposing protocols along semantic lines, these efforts differ in their emphasis on using parallel execution to improve throughput and latency for high-performance scientific applications.
Reference: [Gol92] <author> R. Golding. </author> <title> Weak-Consistency Group Communication and Membership. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of California, </institution> <address> Santa Cruz, Santa Cruz, CA, </address> <year> 1992. </year>
Reference-contexts: Several are in the area of fault-tolerance, where researchers have explored use of modularization or system customization. Examples include the ANSA system [OOW91] and the work on multicast reported in <ref> [Gol92] </ref>. In contrast to these, our approach is more general and provides more flexibility for the designer. Object-oriented structuring and the use of reflection to alter behavior in fault-tolerant distributed programs or general operating systems are described in [AS94, FNP + 95, Yok92].
Reference: [Hil96] <author> M. Hiltunen. </author> <title> Configurable Distributed Fault-Tolerant Services. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <month> Jul </month> <year> 1996. </year>
Reference-contexts: Unbinding and cancellation are especially useful for dynamically altering handler execution <ref> [Hil96] </ref>. Note also that there are no restrictions on binding handlers to events, so that a given handler may be registered for multiple events and multiple handlers may be registered for a single event. <p> In this paper, we focus on the implementation aspect of the process, and specifically, on developing micro-protocols given abstract properties. Techniques for identifying and formally specifying properties are beyond the scope of this paper, but are addressed in <ref> [Hil96, HS95b] </ref> for the case of membership services. In building micro-protocols for a service, a basic initial issue is selecting an overall implementation strategy for a service. For example, the suite may be based around a centralized strategy using a coordinating site or may be fully 9 decentralized. <p> This leads to the dependency relation between micro-protocols. The relations between micro-protocols and the underlying abstract properties can be represented graphically using configuration and dependency graphs, respectively <ref> [Hil96] </ref>. <p> Servers must communicate reliably or communication would halt if an ordering message was lost. This functionality is provided by CRET. Formal dependency and configuration graphs for a similar suite of group RPC micro-protocols can be found in <ref> [HS95a, Hil96] </ref>. 4.3 Performance Measurements Tests consisted of one or more clients sending a 4-byte integer to one or more servers, which respond with an integer. Each test makes 1000 RPC calls and was run 10 times. The round trip times are the average of the 10 test runs. <p> For example, a TokenDriver micro-protocol handles the mechanics of passing the token between the sites and dealing with lost tokens. The micro-protocols can be configured to realize over 1000 semantically different composite protocols <ref> [Hil96] </ref>. The complete suite of micro-protocols has been implemented and tested using the C++ prototype (see section 6.1).
Reference: [HP91] <author> N. Hutchinson and L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: This paper describes Coyote, a system that supports the construction of highly modular and configurable versions of complex high-level protocols. Coyote extends the notion of protocol objects supported by systems such as ADAPTIVE [SBS93], Horus [RBM96], and the x-kernel <ref> [HP91] </ref> to finer-grain modules called micro-protocols that implement individual properties of the target service as separate modules. For example, with atomic multicast, one micro-protocol might implement the consistent ordering requirements, while another might implement reliable transmission. Micro-protocols can also be used to implement different semantic variants of the same property.
Reference: [HPM93] <author> G. Hamilton, M. Powell, and J. Mitchell. Subcontract: </author> <title> A flexible base for distributed programming. </title> <booktitle> In Proceedings of the 14th ACM Symp. on Operating System Principles, </booktitle> <pages> pages 69-79, </pages> <address> Asheville, NC, </address> <month> Dec </month> <year> 1993. </year>
Reference-contexts: The lack of a sufficiently rich protocol object interface has also been cited as one of the motivations for developing Horus, a successor to the Isis system [RBM96]. In addition, our approach is related to recent work in configurable operating systems <ref> [BSS + 95, EKO95, HPM93, MMO + 94] </ref> and on the use of object-orientation and reflection to build customizable operating systems [MHM + 95, Yok92] and services for distributed systems [FNP + 95]. <p> Finally, recent work on new generation operating systems has emphasized similar customization goals, but in a more general context. These include the Exokernel [EKO95], Scout [MMO + 94], and SPIN [BSS + 95], as well as work on subcontracts <ref> [HPM93] </ref> and application-controlled file caching [CFL94]. These projects attempt to increase the ability of users to configure different types of services, but for many aspects of operating system functionality rather than just the type of services considered here.
Reference: [HS93] <author> M. Hiltunen and R. Schlichting. </author> <title> An approach to constructing modular fault-tolerant protocols. </title> <booktitle> In Proceedings of the 12th IEEE Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 105-114, </pages> <address> Princeton, NJ, </address> <month> Oct </month> <year> 1993. </year>
Reference-contexts: Internally, the framework implements an event-driven execution paradigm, in which event handlers within micro-protocols are executed whenever events for which they are registeredfor example, message arrival or a timeoutoccur <ref> [HS93] </ref>. Thus, when compared with standard x-kernel protocol objects, micro-protocols are typically finer-grain objects that interact more closely and do so using mechanisms provided by the framework rather than the x-kernel Uniform Protocol Interface (UPI). The second prototype is written in C++.
Reference: [HS95a] <author> M. Hiltunen and R. Schlichting. </author> <title> Constructing a configurable group RPC service. </title> <booktitle> In Proceedings of the 15th IEEE Conference on Distributed Computing Systems, </booktitle> <address> Vancouver, BC, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Thus, for each request, the coordinator sends an ordering message, Order (Req (x)), to all other servers. 4.1 Micro-protocols The micro-protocol suite is based on the semantic variations of GRPC described in <ref> [HS95a] </ref>; the categories that follow represent semantic variations of termination, ordering, communication, collation, call style, membership, and failure handling. 4.1.1 Termination semantics Termination semantics specify the guarantees that are given about the termination of a call. Included in the client composite protocol. * BOUNDED (BND). <p> Servers must communicate reliably or communication would halt if an ordering message was lost. This functionality is provided by CRET. Formal dependency and configuration graphs for a similar suite of group RPC micro-protocols can be found in <ref> [HS95a, Hil96] </ref>. 4.3 Performance Measurements Tests consisted of one or more clients sending a 4-byte integer to one or more servers, which respond with an integer. Each test makes 1000 RPC calls and was run 10 times. The round trip times are the average of the 10 test runs.
Reference: [HS95b] <author> M. Hiltunen and R. Schlichting. </author> <title> Properties of membership services. </title> <booktitle> In Proceedings of the Second IEEE Symp. on Autonomous Decentralized Systems, </booktitle> <pages> pages 200-207, </pages> <address> Phoenix, AZ, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: In this paper, we focus on the implementation aspect of the process, and specifically, on developing micro-protocols given abstract properties. Techniques for identifying and formally specifying properties are beyond the scope of this paper, but are addressed in <ref> [Hil96, HS95b] </ref> for the case of membership services. In building micro-protocols for a service, a basic initial issue is selecting an overall implementation strategy for a service. For example, the suite may be based around a centralized strategy using a coordinating site or may be fully 9 decentralized.
Reference: [HS95c] <author> M. Hiltunen and R. Schlichting. </author> <title> Understanding membership. </title> <type> Technical Report 95-07, </type> <institution> Department of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <month> Jul </month> <year> 1995. </year>
Reference-contexts: These membership messages can report, for example, failures, recoveries, or the joining of two partitions. Given such a system, the properties of a membership service can be defined in terms of what membership messages it generates and when they are delivered to the application <ref> [HS95c] </ref>. For the purposes of constructing a micro-protocol suite, we divided the properties of a membership service as follows: * Change detection. Includes variants involving the tradeoff between accuracya change is reported only if the change has indeed occurredand livenessall changes are eventually reported. * Agreement.
Reference: [HS96] <author> M. Hiltunen and R. Schlichting. </author> <title> Adaptive distributed and fault-tolerant systems. </title> <journal> Computer Systems Science and Engineering, </journal> <volume> 11(5) </volume> <pages> 125-133, </pages> <month> Sep </month> <year> 1996. </year>
Reference-contexts: Of course, in many cases, such changes require coordination among sites <ref> [HS96] </ref>. A second more powerful technique is to change the actual micro-protocols within a composite protocol at runtime. This can be done, for example, using active networking techniques to introduce the needed changes, and runtime compilation to make the actual code modifications.
Reference: [HS97] <author> M. Hiltunen and R. Schlichting. </author> <title> A configurable membership service. </title> <journal> IEEE Transactions on Computers, </journal> <note> 1997. To appear. </note>
Reference-contexts: role in spooling messages to stable storage 2.5 An Example Micro-protocol To illustrate the programming style and event-driven paradigm, figure 3 presents a failure detection micro-protocol from a configurable process group membership service that provides consistent information about which sites are functioning and which have failed at any given time <ref> [HS97] </ref>. In this service, micro-protocols are provided that implement different variants of multiple properties, including site failure detection, agreement among sites on changes, partition handling, and consistent ordering of membership change notification relative to other membership changes and application messages.
Reference: [KE93] <author> R. Keller and W. Effelsberg. MCAM: </author> <title> An application layer protocol for Movie Control, Access, </title> <booktitle> and Management. In Computer Graphics (Multimedia '93 Proceedings), </booktitle> <pages> pages 21-30. </pages> <publisher> ACM, Addison-Wesley, </publisher> <month> August </month> <year> 1993. </year> <month> 33 </month>
Reference-contexts: Other abstractions of this type include group RPC [Che86, CGR88, Coo90], membership [Cri91, KGR91, MPS92], distributed transactions [BHG87], and protocols related to multimedia applications <ref> [KE93, Yav92] </ref>.
Reference: [KGR91] <author> H. Kopetz, G. Grunsteidl, and J. Reisinger. </author> <title> Fault-tolerant membership service in a synchronous distributed real-time system. </title> <editor> In A. Avizienis and J.C. Laprie, editors, </editor> <booktitle> Dependable Computing for Critical Applications, </booktitle> <pages> pages 411-429. </pages> <publisher> Springer-Verlag, Wien, </publisher> <year> 1991. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications [BSS91, CASD85, MSMA90, PBS89]. Other abstractions of this type include group RPC [Che86, CGR88, Coo90], membership <ref> [Cri91, KGR91, MPS92] </ref>, distributed transactions [BHG87], and protocols related to multimedia applications [KE93, Yav92].
Reference: [LAKS93] <author> B. Lindgren, M. Ammar, B. Krupczak, and K. Schwan. </author> <title> Parallel and configurable protocols: Experiences with a prototype and an architectural framework. </title> <booktitle> In Proceedings of the International Conference on Network Protocols, </booktitle> <month> March </month> <year> 1993. </year>
Reference-contexts: Interactions between the modules in this model are predefined and fixed, in contrast with the more flexible possibilities of our model. Several other efforts have concentrated on supporting parallel execution of modular protocols, including <ref> [GNI92, LAKS93] </ref>. While similar to our work in the sense of decomposing protocols along semantic lines, these efforts differ in their emphasis on using parallel execution to improve throughput and latency for high-performance scientific applications.
Reference: [LBSR95] <author> M. Le, F. Burghardt, S. Seshan, and J. Rabaey. InfoNet: </author> <booktitle> the networking infrastructure of InfoPad. In Proceedings of Compcon, </booktitle> <address> San Francisco, California, </address> <month> Mar </month> <year> 1995. </year>
Reference-contexts: This collection of micro-protocols can be used to built any number of custom communication services for mobile computing, including those with semantics similar to existing systems such as Crosspoint [CR94, CLR95], DataMan [AB93, BBIM93], InfoPad <ref> [LSBR94, LBSR95] </ref>, and PARC TAB [AGSW93, STW93]. For example, Crosspoint combines ICMP for handoff detection, negative acknowledgments for effecting the handoff, and forwarding for disconnection, while PARC TAB combines a beacon strategy, agent-based handoff, and packet dropping. InfoPad includes QoS guarantees as well.
Reference: [LSBR94] <author> M. Le, S. Seshan, F. Burghardt, and J. </author> <title> Rabaey. </title> <booktitle> Software architecture of the InfoPad system. In Proceedings of the Mobidata Workshop on Mobile and Wireless Information Systems, Rutgers, </booktitle> <address> New Jersey, </address> <month> Nov </month> <year> 1994. </year>
Reference-contexts: This collection of micro-protocols can be used to built any number of custom communication services for mobile computing, including those with semantics similar to existing systems such as Crosspoint [CR94, CLR95], DataMan [AB93, BBIM93], InfoPad <ref> [LSBR94, LBSR95] </ref>, and PARC TAB [AGSW93, STW93]. For example, Crosspoint combines ICMP for handoff detection, negative acknowledgments for effecting the handoff, and forwarding for disconnection, while PARC TAB combines a beacon strategy, agent-based handoff, and packet dropping. InfoPad includes QoS guarantees as well.
Reference: [MHM + 95] <author> K. Murata, R.N. Horspool, E. Manning, Y. Yokote, and M. Tokoro. </author> <title> Unification of active and passive objects in an object-oriented operating system. </title> <booktitle> In Proceedings of 1995 Int. Workshop of Object Orientation in Operating Systems (IWOOOS'95), </booktitle> <month> Aug </month> <year> 1995. </year>
Reference-contexts: In addition, our approach is related to recent work in configurable operating systems [BSS + 95, EKO95, HPM93, MMO + 94] and on the use of object-orientation and reflection to build customizable operating systems <ref> [MHM + 95, Yok92] </ref> and services for distributed systems [FNP + 95]. Two prototype versions of Coyote have been constructed, including one that augments the x-kernel's standard hierarchical object composition model with the ability to internally structure x-kernel protocol objects using micro-protocols.
Reference: [MMO + 94] <author> A. Montz, D. Mosberger, S. O'Malley, L. Peterson, T. Proebsting, and J. Hartman. </author> <title> Scout: A communications-oriented operating system. </title> <booktitle> In Proceedings of the 1st Symposium on Operating Design and Implementation, </booktitle> <pages> page 200, </pages> <month> Nov </month> <year> 1994. </year>
Reference-contexts: The lack of a sufficiently rich protocol object interface has also been cited as one of the motivations for developing Horus, a successor to the Isis system [RBM96]. In addition, our approach is related to recent work in configurable operating systems <ref> [BSS + 95, EKO95, HPM93, MMO + 94] </ref> and on the use of object-orientation and reflection to build customizable operating systems [MHM + 95, Yok92] and services for distributed systems [FNP + 95]. <p> They also retain a single-level composition model, which we believe does not offer enough flexibility for services of the type described here. Finally, recent work on new generation operating systems has emphasized similar customization goals, but in a more general context. These include the Exokernel [EKO95], Scout <ref> [MMO + 94] </ref>, and SPIN [BSS + 95], as well as work on subcontracts [HPM93] and application-controlled file caching [CFL94].
Reference: [MMSA + 96] <author> L. Moser, P. Melliar-Smith, D. Agarwal, R. Budhia, and C. Lingley-Papadopoulos. Totem: </author> <title> A fault-tolerant multicast group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 54-63, </pages> <month> Apr </month> <year> 1996. </year>
Reference-contexts: On the other hand, the relation between a micro-protocol implementing consistent total message ordering and one implementing causal ordering depends on the implementation design, since it is possible to implement total order either with or without an underlying causal order (e.g., [MPS93a] and <ref> [MMSA + 96] </ref>, respectively). Similarly, whether two micro-protocols have a dependency or inclusion relation is often based on implementation convenience. For example, causal message ordering also trivially realizes FIFO ordering and could be built on a FIFO ordering micro-protocol.
Reference: [MPS92] <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> A membership protocol based on partial order. </title> <editor> In J. Meyer and R. Schlichting, editors, </editor> <booktitle> Dependable Computing for Critical Applications 2, </booktitle> <pages> pages 309-331. </pages> <publisher> Springer-Verlag, </publisher> <address> Vienna, </address> <year> 1992. </year>
Reference-contexts: For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications [BSS91, CASD85, MSMA90, PBS89]. Other abstractions of this type include group RPC [Che86, CGR88, Coo90], membership <ref> [Cri91, KGR91, MPS92] </ref>, distributed transactions [BHG87], and protocols related to multimedia applications [KE93, Yav92].
Reference: [MPS93a] <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> Consul: A communication substrate for fault-tolerant distributed programs. </title> <journal> Distributed Systems Engineering, </journal> <volume> 1(3) </volume> <pages> 87-103, </pages> <month> Dec </month> <year> 1993. </year>
Reference-contexts: The need for a new approach has been reinforced by experience with existing systems. For example, using the x-kernel to construct Consul, a protocol suite implementing atomic multicast <ref> [MPS93a, PBS89] </ref>, highlighted deficiencies in several areas, including support for complex interactions among protocol objects, limited facilities for data sharing, and an orientation towards hierarchical protocol composition at the expense of more flexible combinations [MPS93b]. The developers of xAMP, a real-time atomic multicast protocol, report a similar experience [Fon94, VRB89]. <p> This can be important, for example, in an atomic multicast protocol that requires waiting for a collection of messages to arrive and then deterministically sorting the collection before presenting messages to higher levels <ref> [MPS93a, PBS89] </ref>. Second, a shared bag of messages allows multiple micro-protocols to access messages concurrently. This can be important, for example, in a situation where a message is acknowledged by one micro-protocol while concurrently being ordered relative to other messages by a second micro-protocol. <p> On the other hand, the relation between a micro-protocol implementing consistent total message ordering and one implementing causal ordering depends on the implementation design, since it is possible to implement total order either with or without an underlying causal order (e.g., <ref> [MPS93a] </ref> and [MMSA + 96], respectively). Similarly, whether two micro-protocols have a dependency or inclusion relation is often based on implementation convenience. For example, causal message ordering also trivially realizes FIFO ordering and could be built on a FIFO ordering micro-protocol. <p> Maintains information about whether a message is stable, i.e., known to be have been received by all functioning sites. The last three use an approach similar to that used in Psync [PBS89] and the Consul system <ref> [MPS93a] </ref>. In particular, messages sent to the progress group are stored in a context graph that maintains causality information about messages i.e., the predecessors of a message m are those messages that the sender of m received before sending m.
Reference: [MPS93b] <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> Experience with modularity in Consul. </title> <journal> Software-Practice and Experience, </journal> <volume> 23(10) </volume> <pages> 1059-1075, </pages> <month> Oct </month> <year> 1993. </year>
Reference-contexts: For example, using the x-kernel to construct Consul, a protocol suite implementing atomic multicast [MPS93a, PBS89], highlighted deficiencies in several areas, including support for complex interactions among protocol objects, limited facilities for data sharing, and an orientation towards hierarchical protocol composition at the expense of more flexible combinations <ref> [MPS93b] </ref>. The developers of xAMP, a real-time atomic multicast protocol, report a similar experience [Fon94, VRB89]. The lack of a sufficiently rich protocol object interface has also been cited as one of the motivations for developing Horus, a successor to the Isis system [RBM96].
Reference: [MSMA90] <author> P.M. Melliar-Smith, L. Moser, and V. Agrawala. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Transactions on Parallel and Distr. Syst., </journal> <volume> 1(1) </volume> <pages> 17-25, </pages> <month> Jan </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Complex applications built on a distributed architecture can be simplified if the underlying software provides suitably tailored communication-oriented abstractions. For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications <ref> [BSS91, CASD85, MSMA90, PBS89] </ref>. Other abstractions of this type include group RPC [Che86, CGR88, Coo90], membership [Cri91, KGR91, MPS92], distributed transactions [BHG87], and protocols related to multimedia applications [KE93, Yav92].
Reference: [OMG95a] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <year> 1995. </year>
Reference-contexts: In addition to serving as a prototyping platform, this version illustrates the ease with which the event-driven approach can be implemented using standard operating system facilities. The system could also be used as the starting point for a true distributed implementation based on C++ using, for example, CORBA <ref> [OMG95a, OMG95b] </ref> for underlying distribution support.
Reference: [OMG95b] <institution> Object Management Group. </institution> <month> CORBAservices: </month> <title> Common Object Services Specification, </title> <year> 1995. </year>
Reference-contexts: In addition to serving as a prototyping platform, this version illustrates the ease with which the event-driven approach can be implemented using standard operating system facilities. The system could also be used as the starting point for a true distributed implementation based on C++ using, for example, CORBA <ref> [OMG95a, OMG95b] </ref> for underlying distribution support.
Reference: [OOW91] <author> M. Olsen, E. Oskiewicz, and J. Warne. </author> <title> A model for interface groups. </title> <booktitle> In Proceedings of the 10th IEEE Symp. on Reliable Distributed Systems, </booktitle> <pages> pages 98-107, </pages> <address> Pisa, Italy, </address> <month> Sep </month> <year> 1991. </year>
Reference-contexts: Implementing and using the latter is the subject of on-going research. 6.3 Related Work A number of other papers have addressed areas related to this work. Several are in the area of fault-tolerance, where researchers have explored use of modularization or system customization. Examples include the ANSA system <ref> [OOW91] </ref> and the work on multicast reported in [Gol92]. In contrast to these, our approach is more general and provides more flexibility for the designer.
Reference: [OP92] <author> S. O'Malley and L. Peterson. </author> <title> A dynamic network architecture. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(2) </volume> <pages> 110-143, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Armada [ASJS96] and OSF/RI MK [TMR96] extend the x-kernel model to support real-time, but with the same protocol object and composition model. Other x-kernel related work has explored the use of finer-grain protocol objects <ref> [OP92] </ref>, but the emphasis there is on syntactic decomposition of higher-level protocols within a hierarchical framework. This work, however, does lend credence to the claim that such fine-grain modularity can be introduced without sacrificing performance.
Reference: [PBS89] <author> L. Peterson, N. Buchholz, and R. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> Aug </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Complex applications built on a distributed architecture can be simplified if the underlying software provides suitably tailored communication-oriented abstractions. For example, ordered atomic multicast provides atomic and consistently ordered message delivery to a group of processes, which can be useful for writing real-time and fault-tolerant distributed applications <ref> [BSS91, CASD85, MSMA90, PBS89] </ref>. Other abstractions of this type include group RPC [Che86, CGR88, Coo90], membership [Cri91, KGR91, MPS92], distributed transactions [BHG87], and protocols related to multimedia applications [KE93, Yav92]. <p> The need for a new approach has been reinforced by experience with existing systems. For example, using the x-kernel to construct Consul, a protocol suite implementing atomic multicast <ref> [MPS93a, PBS89] </ref>, highlighted deficiencies in several areas, including support for complex interactions among protocol objects, limited facilities for data sharing, and an orientation towards hierarchical protocol composition at the expense of more flexible combinations [MPS93b]. The developers of xAMP, a real-time atomic multicast protocol, report a similar experience [Fon94, VRB89]. <p> This can be important, for example, in an atomic multicast protocol that requires waiting for a collection of messages to arrive and then deterministically sorting the collection before presenting messages to higher levels <ref> [MPS93a, PBS89] </ref>. Second, a shared bag of messages allows multiple micro-protocols to access messages concurrently. This can be important, for example, in a situation where a message is acknowledged by one micro-protocol while concurrently being ordered relative to other messages by a second micro-protocol. <p> Ensures that messages are delivered in a consistent total order on all sites. 25 * Stability. Maintains information about whether a message is stable, i.e., known to be have been received by all functioning sites. The last three use an approach similar to that used in Psync <ref> [PBS89] </ref> and the Consul system [MPS93a]. In particular, messages sent to the progress group are stored in a context graph that maintains causality information about messages i.e., the predecessors of a message m are those messages that the sender of m received before sending m.
Reference: [RBM96] <author> R. van Renesse, K. Birman, and S. Maffeis. Horus, </author> <title> a flexible group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 76-83, </pages> <month> Apr </month> <year> 1996. </year>
Reference-contexts: This paper describes Coyote, a system that supports the construction of highly modular and configurable versions of complex high-level protocols. Coyote extends the notion of protocol objects supported by systems such as ADAPTIVE [SBS93], Horus <ref> [RBM96] </ref>, and the x-kernel [HP91] to finer-grain modules called micro-protocols that implement individual properties of the target service as separate modules. For example, with atomic multicast, one micro-protocol might implement the consistent ordering requirements, while another might implement reliable transmission. <p> The developers of xAMP, a real-time atomic multicast protocol, report a similar experience [Fon94, VRB89]. The lack of a sufficiently rich protocol object interface has also been cited as one of the motivations for developing Horus, a successor to the Isis system <ref> [RBM96] </ref>. In addition, our approach is related to recent work in configurable operating systems [BSS + 95, EKO95, HPM93, MMO + 94] and on the use of object-orientation and reflection to build customizable operating systems [MHM + 95, Yok92] and services for distributed systems [FNP + 95]. <p> Many of our goals related to system customization, code reuse, and protocol configurability are adopted from the x-kernel. Horus <ref> [vRHB94, RBM96] </ref> and Ensemble [BRV96] have been used to construct configurable versions of distributed services, although the models are limited to stack-like configurations of coarse-grained protocol objects. Armada [ASJS96] and OSF/RI MK [TMR96] extend the x-kernel model to support real-time, but with the same protocol object and composition model.
Reference: [Rit84] <author> D. Ritchie. </author> <title> A stream input-output system. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 63(8) </volume> <pages> 311-324, </pages> <month> October </month> <year> 1984. </year>
Reference-contexts: This work, however, does lend credence to the claim that such fine-grain modularity can be introduced without sacrificing performance. System V Streams <ref> [Rit84] </ref> also supports modularization of protocols, but its model is also hierarchical and relatively coarse-grained. Somewhat closer to our work is the ADAPTIVE system [SBS93], which is also designed to support flexible combinations of protocol objects.
Reference: [SBS93] <author> D. Schmidt, D. Box, and T. Suda. </author> <title> ADAPTIVE: A dynamically assembled protocol transformation, integration, and evaluation environment. </title> <journal> Concurrency-Practice and Experience, </journal> <volume> 5(4) </volume> <pages> 269-286, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: This paper describes Coyote, a system that supports the construction of highly modular and configurable versions of complex high-level protocols. Coyote extends the notion of protocol objects supported by systems such as ADAPTIVE <ref> [SBS93] </ref>, Horus [RBM96], and the x-kernel [HP91] to finer-grain modules called micro-protocols that implement individual properties of the target service as separate modules. For example, with atomic multicast, one micro-protocol might implement the consistent ordering requirements, while another might implement reliable transmission. <p> This work, however, does lend credence to the claim that such fine-grain modularity can be introduced without sacrificing performance. System V Streams [Rit84] also supports modularization of protocols, but its model is also hierarchical and relatively coarse-grained. Somewhat closer to our work is the ADAPTIVE system <ref> [SBS93] </ref>, which is also designed to support flexible combinations of protocol objects. The goal of the system is to support efficient construction of transport services with different quality-of-service (QoS) characteristics, especially for multimedia applications using high-performance networks.
Reference: [Sch90] <author> F. Schneider. </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(4) </volume> <pages> 299-319, </pages> <month> Dec </month> <year> 1990. </year>
Reference-contexts: Stable tuple spaces in particular are implemented by replicating the TS on all participating sites and using the replicated state machine approach to maintain consistency <ref> [Sch90] </ref>. This requires a communication substrate that provides totally ordered atomic multicast, failure detection, and membership services for the process group implementing the TS. The Coyote micro-protocol suite realizing these requirements consists of a dozen micro-protocols implementing the following: * Membership.
Reference: [SM94] <author> L. Sabel and K. Marzullo. </author> <title> Simulating fail-stop in asynchronous distributed systems. </title> <booktitle> In Proceedings of the 13th Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 138-147, </pages> <publisher> Dana Point, </publisher> <address> CA, </address> <month> Oct </month> <year> 1994. </year>
Reference-contexts: The relations may result from fundamental relations between the properties being implemented or from implementation choices made during the design process. For example, failure detection cannot be both live and accurate in asynchronous systems <ref> [FLP85, SM94] </ref>, so micro-protocols implementing these variants conflict based on their underlying properties.
Reference: [SR93] <author> A. Schiper and A. Ricciardi. </author> <title> Virtually-synchronous communication based on a weak failure suspector. </title> <booktitle> In Proceedings of the 23rd IEEE International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 534-543, </pages> <address> Toulouse, France, </address> <month> Jun </month> <year> 1993. </year>
Reference-contexts: As demonstrated with the C++ prototype, our approach can also be mapped into an object-oriented paradigm, but is general enough to be implemented using more traditional approaches. Also in the area of fault-tolerance, a number of papers describe abstract properties of services or certain components such as failure detectors <ref> [Bla91, CT96, SR93] </ref>, or present families of related services [CASD85, WS95]. Such work is complementary to that presented here since it suggests how configurable versions of a service can be implemented using micro-protocols. Another area of related work concerns development of system support for constructing modular protocols.
Reference: [STW93] <author> B. Schilit, M. Theimer, and B. Welch. </author> <title> Customizing mobile applications. </title> <booktitle> In Proceedings of the USENIX Mobile and Location-Independent Computing Symposium, </booktitle> <pages> pages 129-138, </pages> <month> Aug </month> <year> 1993. </year> <month> 34 </month>
Reference-contexts: This collection of micro-protocols can be used to built any number of custom communication services for mobile computing, including those with semantics similar to existing systems such as Crosspoint [CR94, CLR95], DataMan [AB93, BBIM93], InfoPad [LSBR94, LBSR95], and PARC TAB <ref> [AGSW93, STW93] </ref>. For example, Crosspoint combines ICMP for handoff detection, negative acknowledgments for effecting the handoff, and forwarding for disconnection, while PARC TAB combines a beacon strategy, agent-based handoff, and packet dropping. InfoPad includes QoS guarantees as well.
Reference: [TMR96] <author> F. Travostino, E. Menze, and F. Reynolds. </author> <title> Paths: Programming with system resources in support of real-time distributed applications. </title> <booktitle> In Proceedings of the IEEE Workshop on Object-Oriented Real-Time Dependable Systems, </booktitle> <month> Feb </month> <year> 1996. </year>
Reference-contexts: Coyote and its associated micro-protocol suites are currently being ported to a Pentium-based cluster running OSF/RI MK 7.2 and CORDS, the x-kernel augmented with paths for resource allocation <ref> [TMR96] </ref>. The prototype differs somewhat from the model outlined in the previous sections, most importantly by not supporting event cancellation and allowing event creation only during the initialization phase of a composite protocol. <p> Horus [vRHB94, RBM96] and Ensemble [BRV96] have been used to construct configurable versions of distributed services, although the models are limited to stack-like configurations of coarse-grained protocol objects. Armada [ASJS96] and OSF/RI MK <ref> [TMR96] </ref> extend the x-kernel model to support real-time, but with the same protocol object and composition model. Other x-kernel related work has explored the use of finer-grain protocol objects [OP92], but the emphasis there is on syntactic decomposition of higher-level protocols within a hierarchical framework.
Reference: [VRB89] <author> P. Verissimo, L. Rodrigues, and M. Baptista. </author> <title> Amp: A highly parallel atomic multicast protocol. </title> <booktitle> In Proceedings of SIGCOMM'89, </booktitle> <pages> pages 83-93, </pages> <address> Austin, TX, </address> <month> Sep </month> <year> 1989. </year>
Reference-contexts: The developers of xAMP, a real-time atomic multicast protocol, report a similar experience <ref> [Fon94, VRB89] </ref>. The lack of a sufficiently rich protocol object interface has also been cited as one of the motivations for developing Horus, a successor to the Isis system [RBM96].
Reference: [vRHB94] <author> R. van Renesse, T. Hickey, and K. Birman. </author> <title> Design and performance of Horus: A lightweight group communications system. </title> <type> Technical Report 94-1442, </type> <institution> Cornell University, Dept. of Computer Science, </institution> <month> Aug </month> <year> 1994. </year>
Reference-contexts: Many of our goals related to system customization, code reuse, and protocol configurability are adopted from the x-kernel. Horus <ref> [vRHB94, RBM96] </ref> and Ensemble [BRV96] have been used to construct configurable versions of distributed services, although the models are limited to stack-like configurations of coarse-grained protocol objects. Armada [ASJS96] and OSF/RI MK [TMR96] extend the x-kernel model to support real-time, but with the same protocol object and composition model.
Reference: [WS95] <author> U. Wilhelm and A. Schiper. </author> <title> A hierarchy of totally ordered multicasts. </title> <booktitle> In Proceedings of the 14th Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 106-115, </pages> <address> Bad Neuenahr, Germany, </address> <month> Sept </month> <year> 1995. </year>
Reference-contexts: Also in the area of fault-tolerance, a number of papers describe abstract properties of services or certain components such as failure detectors [Bla91, CT96, SR93], or present families of related services <ref> [CASD85, WS95] </ref>. Such work is complementary to that presented here since it suggests how configurable versions of a service can be implemented using micro-protocols. Another area of related work concerns development of system support for constructing modular protocols. The x-kernel itself is, of course, one such system.
Reference: [Yav92] <author> R. Yavantkar. MCP: </author> <title> A protocol for coordination and temporal synchronization in multimedia collaborative applications. </title> <booktitle> In Proceedings of the 12th IEEE Conference on Distributed Computing Systems, </booktitle> <pages> page 606, </pages> <address> Yokohama, Japan, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Other abstractions of this type include group RPC [Che86, CGR88, Coo90], membership [Cri91, KGR91, MPS92], distributed transactions [BHG87], and protocols related to multimedia applications <ref> [KE93, Yav92] </ref>.
Reference: [Yok92] <author> Y. Yokote. </author> <title> The Apertos reflective operating system: The concepts and its implementation. </title> <booktitle> In Proceedings of OOPSLA 1992, </booktitle> <pages> pages 414-434, </pages> <address> Vancouver, BC, </address> <month> Oct </month> <year> 1992. </year> <month> 35 </month>
Reference-contexts: In addition, our approach is related to recent work in configurable operating systems [BSS + 95, EKO95, HPM93, MMO + 94] and on the use of object-orientation and reflection to build customizable operating systems <ref> [MHM + 95, Yok92] </ref> and services for distributed systems [FNP + 95]. Two prototype versions of Coyote have been constructed, including one that augments the x-kernel's standard hierarchical object composition model with the ability to internally structure x-kernel protocol objects using micro-protocols. <p> In contrast to these, our approach is more general and provides more flexibility for the designer. Object-oriented structuring and the use of reflection to alter behavior in fault-tolerant distributed programs or general operating systems are described in <ref> [AS94, FNP + 95, Yok92] </ref>. As demonstrated with the C++ prototype, our approach can also be mapped into an object-oriented paradigm, but is general enough to be implemented using more traditional approaches.
References-found: 67

