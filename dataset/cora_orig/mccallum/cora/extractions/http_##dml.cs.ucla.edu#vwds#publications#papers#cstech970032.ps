URL: http://dml.cs.ucla.edu/vwds/publications/papers/cstech970032.ps
Refering-URL: http://dml.cs.ucla.edu/vwds/publications/
Root-URL: http://www.cs.ucla.edu
Title: Design of the RIO (Randomized I/O) Storage Server  
Author: Jose Renato Santos Richard Muntz 
Abstract: We describe the design and implementation of the RIO (Randomized I/O) multimedia object server which manages a set of parallel disks and supports real-time throughput and delay guarantees. This storage subsystem was implemented as part of a multimedia information server which supports multiple concurrent applications such as video on demand and 3D interactive virtual worlds. We discuss the principal issues and innovations involved in the design and implementation of the RIO storage system, and present experimental performance results measured on our prototype. A multimedia data server must be ready to handle a variety of realtime object types (video, audio, 3D interactive virtual worlds, etc.) as well as non realtime workload. Achieving simultaneously (1) high utilization and (2) low latency with a high degree of certainty is the challenge. Our prototype system provides a statistical guarantee of quality of service. Our experimental results shows that it is possible to achieve a very small probability of missing a deadline (less than 10 6 ), with a relatively high disk utilization (70% to 99%, in terms of fraction of the maximum disk capacity) , together with relatively small deadlines (on the order of 0.5 sec. to 1.5 sec ), using contemporary disks. To achieve guaranteed low delay with high utilization requires good short term load balancing to keep disk queue length distributions from having long tails. For workloads with predictable access patterns it is possible to try to exploit this predictability to gain the desired effect. However this is an approach with limited applicability and quickly becomes untenable as the workload becomes more diverse. Our approach is to randomize the physical allocation of disk blocks across the system's multiple disks. At the level of physical disk block access this turns all workloads into the same uniformly random access pattern and thus gives us one problem to deal with. Since each disk is equally likely to be the target of each disk access, this approach provides long range load balance. However short term statistical variations can result in short term imbalances in disk queues which in turn imply either (1) the guaranteed maximum latency must be increased or (2) a higher probability of missing the deadline. Our approach to counteracting this problem is to introduce limited redundancy by replicating (at random) some fraction of the data blocks. This data redundancy gives the disk scheduler some flexibility in scheduling disk block reads, allowing the system to reduce the short term load imbalance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Azar, A.Z. Broder, A.R. Karlin, E.Upfal, </author> <title> "Balanced Allocations", </title> <booktitle> Proc. 26th Annual ACM Symposium on the Theory of Computing (STOC 94), </booktitle> <pages> pp. 593-602, </pages> <year> 1994 </year>
Reference-contexts: The theoretical results for this problem is summarized as follows. It is known that as n ! 1 and m ! 1, after all balls are placed on the boxes, the fullest box will have with high probability n=m + lnn=lnlnn balls. Azar et all <ref> [1] </ref> describe a variant of this problem where each ball comes with d possible destinations, chosen independently and uniformly at random and the ball is placed on the least full box among the d possible ones.
Reference: [2] <author> S. Berson, R. Muntz, S. Ghandeharizadeh, X. Ju, </author> <title> "Staggered Striping in Multimedia Information Systems", </title> <booktitle> SIGMOD 94, </booktitle> <address> pp.79-90, </address> <year> 1994. </year>
Reference-contexts: The implication is that, at high loads, the system that does not have the synchronization imposed idle times will perform better. We will show this explicitly when we compare the RIO approach to Streaming RAID in section 7. Berson et all <ref> [2] </ref> propose a staggered striping scheme where instead of requests accessing a single disk on each cycle, they access multiple blocks on consecutive disks. On the next cycle the same number of disks are accessed, but the disks accessed are shifted by one or more disks.
Reference: [3] <author> S. Berson, R. Muntz, W. Wong, </author> <title> "Randomized Data Allocation for Real-time Disk I/O", </title> <booktitle> Compcon 96, </booktitle> <address> pp.286-90, </address> <year> 1996. </year>
Reference: [4] <author> Birk, Y., "Track-Pairing: </author> <title> A Novel Data Layout for VOD Servers with Multi-Zone-Recording Disks", </title> <booktitle> Proceedings of IEEE International Conference on Multimedia Computing and Systems, </booktitle> <pages> pp. 248-255, </pages> <month> May </month> <year> 1995. </year>
Reference: [5] <author> Chen, L.T., Rotem,D., </author> <title> "Declustering Objects for Visualization", </title> <booktitle> VLDB 1993, Dublin, Ireland, </booktitle> <pages> pp. 85-96, </pages> <year> 1993. </year>
Reference: [6] <author> A.L. Chervenak, A.A. Patterson, R.H. Katz, </author> <title> "Choosing the Best Storage System for Video Service", </title> <booktitle> ACM Multimedia 95, </booktitle> <address> pp.109-119, </address> <year> 1995. </year>
Reference: [7] <author> T. Chiueh, </author> <title> R.H. Katz "Multi-Resolution Video Representation for Parallel Disk Arrays", </title> <booktitle> ACM Multimedia 93, </booktitle> <pages> pp. 401-9, </pages> <year> 1993. </year>
Reference-contexts: In addition, providing VCR features such as Pause, Fast Forward and Rewind, also reduces the predictability of a stream I/O access pattern. Finally, multi resolution encoding schemes such as are found in MPEG2 complicate layout and scheduling techniques <ref> [7] </ref>. More important yet is the fact that new multimedia applications, such as 3D interactive virtual worlds, 2 have I/O patterns much less predictable than video or audio.
Reference: [8] <author> Funkhauser, T., Sequin, C., Teller, S., </author> <title> "Management of Large Amounts of Data in Interactive Building Walkthroughs", </title> <booktitle> ACM SIGGRAPH Proc. of the 1992 Symposium on Interactive 3D Graphics, </booktitle> <year> 1992. </year>
Reference-contexts: The access pattern of this type of data thus depends on the speeds and paths selected by the user, which makes prediction imperfect at best. 3D virtual world models have been used for different applications such as architectural building design <ref> [8] </ref>, urban city models [15], scientific visualization [16][9], etc.; and will be increasingly common in the future. Because of the difficulties in predicting the I/O pattern of multimedia data access, we believe that multimedia data servers will move towards solutions that do not rely on careful data layout.
Reference: [9] <author> W. Gekelman, D. Leneman, J. Maggs, </author> <title> "Experimental Observation of Alfven Wave Cones", </title> <journal> Physics of Plasmas, </journal> <volume> 1, pp.3775-3783, </volume> <year> 1994. </year> <month> 45 </month>
Reference: [10] <author> Gemmell, D., Vin, H., Kandlur, D., Rangan, V., Rowe, L., </author> <title> "Multimedia Storage Servers: A Tutorial", </title> <journal> IEEE Computer, </journal> <volume> pp.40-49, </volume> <month> May </month> <year> 1995. </year>
Reference: [11] <author> J Hsieh, M. Lin,J.C.L. Liu, D.H.C Du, </author> <title> "Performance of a Mass Storage System for Video-On-Demand". </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol. 30, No. 2, pp.147-67, </volume> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: The great advantage of striping is that it decouples storage capacity from disk bandwidth, since each object uses the bandwidth of all disks and thus disk overloading due to skew in object popularity is not an issue.[6] [24] <ref> [11] </ref> [25] (Note that RIO has the same property) There are basically two approaches to achieve load balancing on striped systems. One possibility is to use large reads requesting data from all disks at a single request for each active stream [24].
Reference: [12] <author> E. Grochowski, </author> <title> R.F. Hoyt "Future Trends in Hard Disk Drives", </title> <journal> IEEE Transactions on Magnetics, </journal> <volume> Vol. 32, No. 3, </volume> <month> May </month> <year> 1996. </year>
Reference-contexts: If however the block is not replicated it is placed on the only possible queue. The cost, for having better load balancing and increased disk bandwidth utilization is the use of extra storage space. Current disk technology trends, shows that storage capacity is growing faster than bandwidth <ref> [12] </ref>. We thus believe that disk bandwidth will be the bottleneck for multimedia applications, specially if a large number of streams (users) needs to be supported.
Reference: [13] <author> H. Hsiao, </author> <title> D.J. Dewitt, "Chained Declustering: A New Availability Strategy for Multiprocessor Database Machines", </title> <booktitle> Proc. of Data Engineering, </booktitle> <pages> pp 456-65, </pages> <year> 1990. </year>
Reference-contexts: Imposing constraints on where data can be replicated improves fault tolerance by allowing the system to survive multiple disk failures. However these same constraints can reduce the capacity for short term load balancing. One such replication scheme is chained declustering <ref> [13] </ref>, where data whose primary copy is stored in a given disk i is replicated only in the next logically consecutive disk i + 1. This scheme allows multiple disk failure, provided only that no two failures occur on logically consecutive disks.
Reference: [14] <author> K. Jeffay, D.F. Stanat, C.U. Martel, </author> <title> "On Non-preemptive Scheduling of Periodic and Sporadic Tasks", </title> <booktitle> Proc. of Real-time Systems Symp., </booktitle> <address> pp.129-139, </address> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: The EDF algorithm is optimum in the sense that if there exists a feasible schedule where no request misses its deadline then scheduling the requests according to the EDF policy will guarantee that no request misses its deadline. Later, Jeffay et. all <ref> [14] </ref> extended this result and showed that the EDF policy is also optimal when the requests are not preemptable and when tasks are not periodic, but have a minimum interval between requests. However, these results assume a work conserving server,which is clearly not the case for disk I/O.
Reference: [15] <author> Jepson, W., Liggett, R., Friedman, S., </author> <title> "Virtual Modeling of Urban Environments", Presence: </title> <booktitle> Teleoperators and Virtual Environments, </booktitle> <volume> Vol. 5, </volume> <publisher> No.1, MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: The access pattern of this type of data thus depends on the speeds and paths selected by the user, which makes prediction imperfect at best. 3D virtual world models have been used for different applications such as architectural building design [8], urban city models <ref> [15] </ref>, scientific visualization [16][9], etc.; and will be increasingly common in the future. Because of the difficulties in predicting the I/O pattern of multimedia data access, we believe that multimedia data servers will move towards solutions that do not rely on careful data layout.
Reference: [16] <author> W. Karplus, </author> <title> M.R. Harreld, "The Role of Virtual Environments in Clinical Medicine: </title> <booktitle> Scientific Visuali-sation", Proc. First Jint Conference of International Simulation Societies (CISS), </booktitle> <address> Zurich, Switzerland, </address> <pages> pp. 13-17, </pages> <month> September </month> <year> 1994. </year>
Reference: [17] <author> C.L. Liu, J.W. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real-time Environment" journal of ACM, </title> <type> pp 46-61, </type> <year> 1973. </year>
Reference-contexts: Liu & Layland <ref> [17] </ref> showed that for a set of preemptable tasks generating periodic requests, an optimal scheduling policy is the EDF (Earliest Deadline First) algorithm, that schedules requests in the order of their deadlines possibly preempting requests being serviced when a request with an earlier deadline arrives.
Reference: [18] <author> Miller, E.L., Katz, </author> <title> R.H., "RAMA: Easy Access to a High-Bandwidth Massively Parallel File System", </title> <booktitle> USENIX 95, </booktitle> <pages> pp. 59-70, </pages> <year> 1995. </year>
Reference-contexts: In this scheme a storage object is an array of fixed size blocks. The data blocks of an object are randomly mapped to disks blocks. Random data allocation has been proposed for non real-time system such as RAMA parallel file system proposed by Miller and Katz <ref> [18] </ref>, but to our knowledge there has been no published work that uses random data allocation on real-time systems.
Reference: [19] <author> M.D. Mitzenmacher, </author> <title> "The Power of Two Choices in Randomized Load Balancing", </title> <type> PhD Dissertation, </type> <institution> University of California at Berkeley, Computer Science Department, </institution> <year> 1996. </year>
Reference-contexts: This result shows that the difference between the maximum number of balls in each box and the average size n=m is exponentially reduced when we have multiple choices of where to place the ball. 13 Mitzenmacher <ref> [19] </ref> extended Azar et all results to more realistic dynamic systems, where balls enter and leave the system over time, describing the problem as a queuing system model.
Reference: [20] <author> D.A. Patterson, G. Gibson, R.H. Katz, </author> <title> "A Case for Redundant Arrays of Inexpensive Disks (RAID)", </title> <booktitle> SIGMOD 88, </booktitle> <address> pp.109-116, </address> <year> 1988. </year>
Reference-contexts: However in order to provide tolerance to disk failures we need to consider alternative schemes. There are basically two approaches; one is to use full replication and the other is to use parity groups as used on RAID schemes <ref> [20] </ref>. One possibility is to use RAID subsystems to provide fault tolerance and partial replication of data blocks to provide load balance. In this approach, we divide the total number D of disks in the system on N A disk arrays with D A = D=N A disks each. <p> In this approach, we divide the total number D of disks in the system on N A disk arrays with D A = D=N A disks each. Each disk array is a RAID level 5 <ref> [20] </ref> with parity group declustering [?] that stores data on parity groups of size G distributed on G different disks (G 1 data blocks and 1 parity block; G D A ). A fraction ff of the data blocks is then randomly replicated across all disks of the system.
Reference: [21] <author> Reddy, A.L.N., Wyllie, J., </author> <title> "Disk Scheduling in a Multimedia I/O System", </title> <booktitle> ACM Multimedia 93, </booktitle> <pages> pp. 225-233, </pages> <year> 1993. </year>
Reference: [22] <author> Ruemmler, C., Wilkes, J., </author> <title> "An Introduction to Disk Driving Modeling", </title> <booktitle> IEEE Computer, pp17-28,March 1994. </booktitle> <pages> 46 </pages>
Reference-contexts: Most of this parameters were obtained experimentally or were computed from other experimental parameters since the vendor's manual does not provide all the information necessary. <ref> [22] </ref> [26] The disk layout, including number of zones, number of heads, sector size, number of cylinders per zone, track size per zone, and track skew factor per zone, are obtained from information on the disk (s) using SCSI commands requests.
Reference: [23] <author> M. Seltzer, P. Chen, J. Ousterhout, </author> <title> "Disk Scheduling Revisited" USENIX Winter 90, </title> <address> pp.313-324, </address> <year> 1990. </year>
Reference: [24] <author> F.A. Tobagi, J. Pang, R. Baird, M. Gang, </author> <title> "Streaming RAID A Disk Management System For Video Files" ACM Multimedia 93, </title> <address> pp.393-400, </address> <year> 1993. </year>
Reference-contexts: The great advantage of striping is that it decouples storage capacity from disk bandwidth, since each object uses the bandwidth of all disks and thus disk overloading due to skew in object popularity is not an issue.[6] <ref> [24] </ref> [11] [25] (Note that RIO has the same property) There are basically two approaches to achieve load balancing on striped systems. One possibility is to use large reads requesting data from all disks at a single request for each active stream [24]. <p> skew in object popularity is not an issue.[6] <ref> [24] </ref> [11] [25] (Note that RIO has the same property) There are basically two approaches to achieve load balancing on striped systems. One possibility is to use large reads requesting data from all disks at a single request for each active stream [24]. This guarantees that the disks will all have the same load, providing perfect load balancing. However this approach has some serious drawbacks. <p> Another way of accessing striped data is to use small requests accessing just one block on a single disk, with sequential requests cycling over the disks.[6][11]. This solves the problems associated with large reads but requires a new approach to ensure load balancing. A common approach, called Streaming RAID <ref> [24] </ref>, is to process requests in cycles of constant duration synchronized on all disks. In each cycle, each active stream access a single block on a particular disk. On the next cycle each stream accesses the following block that is located on the next consecutive disk. <p> To meet this requirement we have to constrain the traffic presented to the storage system to something less than the maximum values that appear in figure 10. As we discuss in section 7, data striping with streaming RAID <ref> [24] </ref> also has to operate at bandwidths smaller than those plotted in figure 10, but we will address this later when we compare the performance of the two approaches. 5.4 Probability of missing the deadline As discussed before, the guaranteed delay bound is selected such that we can guarantee that the <p> the benefit of increased performance with higher levels of replication and increased performance under disk failure for smaller sizes of parity groups. 7 Performance Comparison of Random Allocation and Stream ing RAID In this section we compare the performance of random allocation with replication and the performance of streaming RAID <ref> [24] </ref>. Streaming RAID is specifically designed for a workload in which objects are read sequentially at a constant rate (for example, playing video with constant bit rate encoding). RIO is applicable to much more general workloads. So the comparison we do here favors streaming RAID significantly.
Reference: [25] <author> J.L. Wolf, P.S. Yu, H. Shachnai, </author> <title> "DASD Dancing: A Disk Load Balancing Optimization Scheme for Video-on-Demand Computer SYSTEMS". </title> <booktitle> SIGMETRICS 1995,pp.157-166, </booktitle> <year> 1995. </year>
Reference-contexts: The great advantage of striping is that it decouples storage capacity from disk bandwidth, since each object uses the bandwidth of all disks and thus disk overloading due to skew in object popularity is not an issue.[6] [24] [11] <ref> [25] </ref> (Note that RIO has the same property) There are basically two approaches to achieve load balancing on striped systems. One possibility is to use large reads requesting data from all disks at a single request for each active stream [24].
Reference: [26] <author> B.L. Worthington, G.R. Ganger, Y.N. Patt, J. Wilkes, </author> <title> "On-Line Extraction of SCSI Disk Drive Parameters" SIGMETRICS 95, </title> <address> pp.146-156, </address> <year> 1995. </year>
Reference-contexts: Most of this parameters were obtained experimentally or were computed from other experimental parameters since the vendor's manual does not provide all the information necessary. [22] <ref> [26] </ref> The disk layout, including number of zones, number of heads, sector size, number of cylinders per zone, track size per zone, and track skew factor per zone, are obtained from information on the disk (s) using SCSI commands requests.
Reference: [27] <author> P. Yu, M. Chen and D. Kandlur, </author> <title> "Design and Analysis of a Grouped Sweeping Scheme for Multimedia Storage Management", </title> <address> NOSSDAV'92, pp.44-55, </address> <year> 1992. </year> <month> 47 </month>
References-found: 27

