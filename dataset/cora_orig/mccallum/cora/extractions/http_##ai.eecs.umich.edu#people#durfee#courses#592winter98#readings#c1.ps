URL: http://ai.eecs.umich.edu/people/durfee/courses/592winter98/readings/c1.ps
Refering-URL: http://ai.eecs.umich.edu/people/durfee/courses/592winter98/index.html
Root-URL: http://www.cs.umich.edu
Title: 1 Intelligent Agents  
Author: Michael Wooldridge 
Note: This chapter is about intelligent agents. Specifically, it aims to give you a thorough  
Date: 1.1 Introduction  
Abstract: Computers are not very good at knowing what to do: every action a computer performs must be explicitly anticipated, planned for, and coded by a programmer. If a computer program ever encounters a situation that its designer did not anticipate, then the result is not usually pretty | a system crash at best, multiple loss of life at worst. This mundane fact is at the heart of our relationship with computers. It is so self-evident to the computer literate that it is rarely mentioned. And yet it comes as a complete surprise to those encountering computers for the first time. For the most part, we are happy to accept computers as obedient, literal, unimaginative servants. For many applications (such as payroll processing), it is entirely acceptable. However, for an increasingly large number of applications, we require systems that can decide for themselves what they need to do in order to satisfy their design objectives. Such computer systems are known as agents. Agents that must operate robustly in rapidly changing, unpredictable, or open environments, where there is a significant possibility that actions can fail are known as intelligent agents, or sometimes autonomous agents. Here are examples of recent application areas for intelligent agents: When a space probe makes its long flight from Earth to the outer planets, a ground crew is usually required to continually track its progress, and decide how to deal with unexpected eventualities. This is costly and, if decisions are required quickly, it is simply not practicable. For these reasons, organisations like nasa are seriously investigating the possibility of making probes more autonomous | giving them richer decision making capability and responsibilities. Searching the Internet for the answer to a specific query can be a long and tedious process. So, why not allow a computer program | an agent | do searches for us? The agent would typically be given a query that would require synthesising pieces of information from various different Internet information sources. Failure would occur when a particular resource was unavailable, (perhaps due to network failure), or where results could not be obtained. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> P. Agre and D. Chapman. PENGI: </author> <title> An implementation of a theory of activity. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence (AAAI-87), </booktitle> <pages> pages 268-272, </pages> <address> Seattle, WA, </address> <year> 1987. </year>
Reference-contexts: [40, 42, 43]; Nilsson's teleo reactive programs [49]; Rosenchein and Kaelbling's situated automata approach, which is particularly interesting in that it shows how agents can be specified in an abstract, logical framework, and compiled into equivalent, but computationally very simple machines [57, 36, 35, 58]; Agre and Chapman's pengi system <ref> [1] </ref>; Schoppers' universal plans | which are essentially decision trees that can be used to efficiently determine an appropriate action in any situation [62]; Firby's reactive action packages [19].
Reference: 2. <author> P. E. Agre and S. J. Rosenschein, </author> <title> editors. Computational Theories of Interaction and Agency. </title> <publisher> The MIT Press: </publisher> <address> Cambridge, MA, </address> <year> 1996. </year>
Reference-contexts: The subsumption architecture is probably the best-known reactive architecture around | but there are many others. The collection of papers edited by Pattie Maes [41] contains papers that describe many of these, as does the collection by Agre and Rosenschein <ref> [2] </ref>.
Reference: 3. <author> H. Barringer, M. Fisher, D. Gabbay, G. Gough, and R. Owens. </author> <title> MetateM: A framework for programming in temporal logic. </title> <booktitle> In REX Workshop on Stepwise Refinement of Distributed Systems: Models, Formalisms, Correctness (LNCS Volume 430), </booktitle> <pages> pages 94-129. </pages> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: A number of more-or-less "pure" logical approaches to agent programming have been developed. Well-known examples include the congolog system of Lesperance and colleagues [39] (which is based on the situation calculus [45]) and the MetateM and Concurrent MetateM programming languages developed by Fisher and colleagues <ref> [3, 21] </ref> (in which agents are programmed by giving them temporal logic specifications of the behaviour they should exhibit). Concurrent MetateM is discussed as a case study in section 1.5. <p> Execution of the agent program corresponds to iteratively building a logical model for the temporal agent specification. It is possible to prove that the procedure used to execute an agent specification is correct, in that if it is possible to satisfy the specification, then the agent will do so <ref> [3] </ref>. The logical semantics of Concurrent MetateM are closely related to the semantics of temporal logic itself. This means that, amongst other things, the specification and verification of Concurrent MetateM systems is a realistic proposition [22]. <p> Sources and Further Reading The main references to agent0 are [64, 65]. Michael Fisher's Concurrent MetateM language is described in [21]; the execution algorithm that underpins it is described in <ref> [3] </ref>. Since Shoham's proposal, a number of languages have been proposed which claim to be agent-oriented.
Reference: 4. <author> R. P. Bonasso, D. Kortenkamp, D. P. Miller, and M. Slack. </author> <title> Experiences with an architecture for intelligent, reactive agents. </title> <editor> In M. Wooldridge, J. P. Muller, and M. Tambe, editors, </editor> <booktitle> Intelligent Agents II (LNAI Volume 1037), </booktitle> <pages> pages 187-202. </pages> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <year> 1996. </year>
Reference-contexts: The best reference to touringmachines is [16]; more accessible references include [17, 18]. The definitive reference to interrap is [46], although [20] is also a useful reference. Other examples of layered architectures include the subsumption architecture [8] (see also section 1.4.2), and the 3T architecture <ref> [4] </ref>. 1.5 Agent Programming Languages As agent technology becomes more established, we might expect to see a variety of software tools become available for the design and construction of agent-based 1.5 Agent Programming Languages 41 systems; the need for software support tools in this area was identified as long ago as
Reference: 5. <author> G. Booch. </author> <title> Object-Oriented Analysis and Design (second edition). </title> <publisher> Addison-Wesley: </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Active objects are generally autonomous, meaning that they can exhibit some behaviour without being operated upon by another object. Passive objects, on the other hand, can only undergo a state change when explicitly acted upon. <ref> [5, p91] </ref> Thus active objects are essentially agents that do not necessarily have the ability to exhibit flexible autonomous behaviour.
Reference: 6. <author> M. E. Bratman. </author> <title> Intentions, Plans, and Practical Reason. </title> <publisher> Harvard University Press: </publisher> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference-contexts: Sources and Further Reading Belief-desire-intention architectures originated in the work of the Rational Agency project at Stanford Research Institute in the mid 1980s. The origins of the model lie in the theory of human practical reasoning developed by the philosopher Michael Bratman <ref> [6] </ref>, which focusses particularly on the role of intentions in practical 1.4 Concrete Architectures for Intelligent Agents 35 reasoning. The conceptual framework of the BDI model is described in [7], which also describes a specific BDI agent architecture called irma.
Reference: 7. <author> M. E. Bratman, D. J. Israel, and M. E. Pollack. </author> <title> Plans and resource-bounded practical reasoning. </title> <journal> Computational Intelligence, </journal> <volume> 4 </volume> <pages> 349-355, </pages> <year> 1988. </year>
Reference-contexts: The origins of the model lie in the theory of human practical reasoning developed by the philosopher Michael Bratman [6], which focusses particularly on the role of intentions in practical 1.4 Concrete Architectures for Intelligent Agents 35 reasoning. The conceptual framework of the BDI model is described in <ref> [7] </ref>, which also describes a specific BDI agent architecture called irma. The description of the bdi model given here (and in particular Figure 1.5) is adapted from [7]. <p> The conceptual framework of the BDI model is described in <ref> [7] </ref>, which also describes a specific BDI agent architecture called irma. The description of the bdi model given here (and in particular Figure 1.5) is adapted from [7]. One of the interesting aspects of the bdi model is that it has been used in one of the most successful agent architectures to date.
Reference: 8. <author> R. A. Brooks. </author> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> 2(1) </volume> <pages> 14-23, </pages> <year> 1986. </year> <title> 48 Intelligent Agents </title>
Reference-contexts: Sources and Further Reading Brooks original paper on the subsumption architecture | the one that started all the fuss | was published as <ref> [8] </ref>. The description and discussion here is partly based on [15]. This original paper seems to be somewhat less radical than many of his later ones, which include [9, 11, 10]. The version of the subsumption architecture used in this chapter is actually a simplification of that presented by Brooks. <p> The best reference to touringmachines is [16]; more accessible references include [17, 18]. The definitive reference to interrap is [46], although [20] is also a useful reference. Other examples of layered architectures include the subsumption architecture <ref> [8] </ref> (see also section 1.4.2), and the 3T architecture [4]. 1.5 Agent Programming Languages As agent technology becomes more established, we might expect to see a variety of software tools become available for the design and construction of agent-based 1.5 Agent Programming Languages 41 systems; the need for software support tools
Reference: 9. <author> R. A. Brooks. </author> <title> Elephants don't play chess. </title> <editor> In P. Maes, editor, </editor> <booktitle> Designing Autonomous Agents, </booktitle> <pages> pages 3-15. </pages> <publisher> The MIT Press: </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: The description and discussion here is partly based on [15]. This original paper seems to be somewhat less radical than many of his later ones, which include <ref> [9, 11, 10] </ref>. The version of the subsumption architecture used in this chapter is actually a simplification of that presented by Brooks. The subsumption architecture is probably the best-known reactive architecture around | but there are many others.
Reference: 10. <author> R. A. Brooks. </author> <title> Intelligence without reason. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence (IJCAI-91), </booktitle> <pages> pages 569-595, </pages> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference-contexts: The description and discussion here is partly based on [15]. This original paper seems to be somewhat less radical than many of his later ones, which include <ref> [9, 11, 10] </ref>. The version of the subsumption architecture used in this chapter is actually a simplification of that presented by Brooks. The subsumption architecture is probably the best-known reactive architecture around | but there are many others.
Reference: 11. <author> R. A. Brooks. </author> <title> Intelligence without representation. </title> <journal> Artificial Intelligence, </journal> <volume> 47 </volume> <pages> 139-159, </pages> <year> 1991. </year>
Reference-contexts: The description and discussion here is partly based on [15]. This original paper seems to be somewhat less radical than many of his later ones, which include <ref> [9, 11, 10] </ref>. The version of the subsumption architecture used in this chapter is actually a simplification of that presented by Brooks. The subsumption architecture is probably the best-known reactive architecture around | but there are many others.
Reference: 12. <author> P. R. Cohen and C. R. Perrault. </author> <title> Elements of a plan based theory of speech acts. </title> <journal> Cognitive Science, </journal> <volume> 3 </volume> <pages> 177-212, </pages> <year> 1979. </year>
Reference-contexts: Messages are constrained to be one of three types: "requests" or "unrequests" to perform or refrain from actions, and "inform" messages, which pass on information | Shoham indicates that he took his inspiration for these message types from speech act theory <ref> [63, 12] </ref>. Request and unrequest messages typically result in the agent's commitments being modified; inform messages result in a change to the agent's beliefs.
Reference: 13. <author> Oren Etzioni. </author> <title> Intelligence without robots. </title> <journal> AI Magazine, </journal> <volume> 14(4), </volume> <month> December </month> <year> 1993. </year>
Reference-contexts: The relationship between agents and objects has not been widely discussed in the literature, but see [24]. Other readable introductions to the idea of intelligent agents include [34] and <ref> [13] </ref>. 1.3 Abstract Architectures for Intelligent Agents We can easily formalise the abstract view of agents presented so far. First, we will assume that the state of the agent's environment can be characterised as a set S = fs 1 ; s 2 ; : : :g of environment states.
Reference: 14. <author> R. Fagin, J. Y. Halpern, Y. Moses, and M. Y. Vardi. </author> <title> Reasoning About Knowledge. </title> <publisher> The MIT Press: </publisher> <address> Cambridge, MA, </address> <year> 1995. </year>
Reference-contexts: The properties of perception as discussed in this section lead to knowledge theory, a formal analysis of the information implicit within the state of computer processes, which has had a profound effect in theoretical computer science. The definitive reference is <ref> [14] </ref>, and an introductory survey is [29]. 16 Intelligent Agents 1.4 Concrete Architectures for Intelligent Agents Thus far, we have considered agents only in the abstract.
Reference: 15. <author> J. Ferber. </author> <title> Reactive distributed artificial intelligence. </title> <editor> In G. M. P. O'Hare and N. R. Jennings, editors, </editor> <booktitle> Foundations of Distributed Artificial Intelligence, </booktitle> <pages> pages 287-317. </pages> <publisher> John Wiley, </publisher> <year> 1996. </year>
Reference-contexts: Sources and Further Reading Brooks original paper on the subsumption architecture | the one that started all the fuss | was published as [8]. The description and discussion here is partly based on <ref> [15] </ref>. This original paper seems to be somewhat less radical than many of his later ones, which include [9, 11, 10]. The version of the subsumption architecture used in this chapter is actually a simplification of that presented by Brooks. <p> Try to get around this problem by allowing agents to pass samples to each other, thus implementing chains. (See the description in <ref> [15, p305] </ref>.) 1.8 References 47 15. [Level 4] Read about traditional control theory, and compare the problems and techniques of control theory to what are trying to accomplish in building intelligent agents.
Reference: 16. <author> I. A. Ferguson. TouringMachines: </author> <title> An Architecture for Dynamic, Rational, Mobile Agents. </title> <type> PhD thesis, Clare Hall, </type> <institution> University of Cambridge, UK, </institution> <month> November </month> <year> 1992. </year> <note> (Also available as Technical Report No. 273, </note> <institution> University of Cambridge Computer Laboratory). </institution>
Reference-contexts: The original demonstration scenario for touringmachines was that of autonomous vehicles driving between locations through streets populated by other similar agents. In this scenario, reactive rules typically deal with functions like obstacle avoidance. For example, here is an example of a reactive rule for avoiding the kerb (from <ref> [16, p59] </ref>): rule-1: kerb-avoidance if is-in-front (Kerb, Observer) and speed (Observer) &gt; 0 and 38 Intelligent Agents separation (Kerb, Observer) &lt; KerbThreshHold then change-orientation (KerbAvoidanceAngle) Here change-orientation (...) is the action suggested if the rule fires. <p> This problem is partly alleviated in two-pass vertically layered architecture such as interrap. Sources and Further Reading The introductory discussion of layered architectures given here draws heavily upon [47, pp262-264]. The best reference to touringmachines is <ref> [16] </ref>; more accessible references include [17, 18]. The definitive reference to interrap is [46], although [20] is also a useful reference.
Reference: 17. <author> I. A. Ferguson. </author> <title> Towards an architecture for adaptive, rational, mobile agents. </title> <editor> In E. Werner and Y. Demazeau, editors, </editor> <booktitle> Decentralized AI 3 | Proceedings of the Third European Workshop on Modelling Autonomous Agents in a Multi-Agent World (MAAMAW-91), </booktitle> <pages> pages 249-262. </pages> <publisher> Elsevier Science Publishers B.V.: </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1992. </year>
Reference-contexts: This problem is partly alleviated in two-pass vertically layered architecture such as interrap. Sources and Further Reading The introductory discussion of layered architectures given here draws heavily upon [47, pp262-264]. The best reference to touringmachines is [16]; more accessible references include <ref> [17, 18] </ref>. The definitive reference to interrap is [46], although [20] is also a useful reference.
Reference: 18. <author> I. A. Ferguson. </author> <title> Integrated control and coordinated behaviour: A case for agent models. </title> <editor> In M. Wooldridge and N. R. Jennings, editors, </editor> <booktitle> Intelligent Agents: Theories, Architectures, and Languages (LNAI Volume 890), </booktitle> <pages> pages 203-218. </pages> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: This control subsystem is implemented as a set of control rules. Control rules can either suppress sensor information between the control rules and the control layers, or else censor action outputs from the control layers. here is an example censor rule <ref> [18, p207] </ref>: censor-rule-1: if entity (obstacle-6) in perception-buffer then remove-sensory-record (layer-R, entity (obstacle-6)) This rule prevents the reactive layer from ever knowing about whether obstacle-6 has been perceived. <p> This problem is partly alleviated in two-pass vertically layered architecture such as interrap. Sources and Further Reading The introductory discussion of layered architectures given here draws heavily upon [47, pp262-264]. The best reference to touringmachines is [16]; more accessible references include <ref> [17, 18] </ref>. The definitive reference to interrap is [46], although [20] is also a useful reference.
Reference: 19. <author> J. A. Firby. </author> <title> An investigation into reactive planning in complex domains. </title> <booktitle> In Proceedings of the Tenth International Joint Conference on Artificial Intelligence (IJCAI-87), </booktitle> <pages> pages 202-206, </pages> <address> Milan, Italy, </address> <year> 1987. </year>
Reference-contexts: an abstract, logical framework, and compiled into equivalent, but computationally very simple machines [57, 36, 35, 58]; Agre and Chapman's pengi system [1]; Schoppers' universal plans | which are essentially decision trees that can be used to efficiently determine an appropriate action in any situation [62]; Firby's reactive action packages <ref> [19] </ref>. Kaelbling [34] gives a good discussion of the issues associated with developing resource-bounded rational agents, and proposes an agent architecture somewhat similar to that developed by Brooks. 1.4.3 Belief-Desire-Intention Architectures In this section, we shall discuss belief-desire-intention (bdi) architectures.
Reference: 20. <author> K. Fischer, J. P. Muller, and M. Pischel. </author> <title> A pragmatic BDI architecture. </title> <editor> In M. Wooldridge, J. P. Muller, and M. Tambe, editors, </editor> <booktitle> Intelligent Agents II (LNAI Volume 1037), </booktitle> <pages> pages 203-218. </pages> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <year> 1996. </year>
Reference-contexts: Sources and Further Reading The introductory discussion of layered architectures given here draws heavily upon [47, pp262-264]. The best reference to touringmachines is [16]; more accessible references include [17, 18]. The definitive reference to interrap is [46], although <ref> [20] </ref> is also a useful reference.
Reference: 21. <author> M. Fisher. </author> <title> A survey of Concurrent MetateM | the language and its applications. </title> <editor> In D. M. Gabbay and H. J. Ohlbach, editors, </editor> <booktitle> Temporal Logic | Proceedings of the First International Conference (LNAI Volume 827), </booktitle> <pages> pages 480-505. </pages> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: A number of more-or-less "pure" logical approaches to agent programming have been developed. Well-known examples include the congolog system of Lesperance and colleagues [39] (which is based on the situation calculus [45]) and the MetateM and Concurrent MetateM programming languages developed by Fisher and colleagues <ref> [3, 21] </ref> (in which agents are programmed by giving them temporal logic specifications of the behaviour they should exhibit). Concurrent MetateM is discussed as a case study in section 1.5. <p> The programming language cannot be said to truly execute the associated logic, in the way that our logic-based agents did in section 1.4.1. The Concurrent MetateM language developed by Fisher can make a stronger claim in this respect <ref> [21] </ref>. A Concurrent MetateM system contains a number of concurrently executing agents, each of which is able to communicate with its peers via asynchronous broadcast message passing. Each agent is programmed by giving it a temporal logic specification of the behaviour that it is intended the agent should exhibit. <p> Concurrent MetateM is a good illustration of how a quite pure approach to logic-based agent programming can work, even with a quite expressive logic. Sources and Further Reading The main references to agent0 are [64, 65]. Michael Fisher's Concurrent MetateM language is described in <ref> [21] </ref>; the execution algorithm that underpins it is described in [3]. Since Shoham's proposal, a number of languages have been proposed which claim to be agent-oriented.
Reference: 22. <author> M. Fisher and M. Wooldridge. </author> <title> Specifying and verifying distributed intelligent systems. </title> <editor> In M. Filgueiras and L. Damas, editors, </editor> <booktitle> Progress in Artificial Intelligence | Sixth Portuguese Conference on Artificial Intelligence (LNAI Volume 727), </booktitle> <pages> pages 13-28. </pages> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: The logical semantics of Concurrent MetateM are closely related to the semantics of temporal logic itself. This means that, amongst other things, the specification and verification of Concurrent MetateM systems is a realistic proposition <ref> [22] </ref>. An agent program in Concurrent MetateM has the form V i P i ) F i , where P i is a temporal logic formula referring only to the present or past, and F i is a temporal logic formula referring to the present or future.
Reference: 23. <author> L. Gasser, C. Braganza, and N. Hermann. MACE: </author> <title> A flexible testbed for distributed AI research. </title> <editor> In M. Huhns, editor, </editor> <booktitle> Distributed Artificial Intelligence, </booktitle> <pages> pages 119-152. </pages> <publisher> Pitman Publishing: London and Morgan Kaufmann: </publisher> <address> San Mateo, CA, </address> <year> 1987. </year>
Reference-contexts: Programming Languages As agent technology becomes more established, we might expect to see a variety of software tools become available for the design and construction of agent-based 1.5 Agent Programming Languages 41 systems; the need for software support tools in this area was identified as long ago as the mid-1980s <ref> [23] </ref>. In this section, we will discuss two of the better-known agent programming languages, focussing in particular on Yoav Shoham's agent0 system. 1.5.1 Agent-oriented Programming Yoav Shoham has proposed a "new programming paradigm, based on a societal view of computation" which he calls agent-oriented programming.
Reference: 24. <author> L. Gasser and J. P. </author> <title> Briot. </title> <booktitle> Object-based concurrent programming and DAI. In Distributed Artificial Intelligence: Theory and Praxis, </booktitle> <pages> pages 81-108. </pages> <publisher> Kluwer Academic Publishers: </publisher> <address> Boston, MA, </address> <year> 1992. </year> <note> 1.8 References 49 </note>
Reference-contexts: This question of "what is an agent" is one that continues to generate some debate; a collection of answers may be found in [48]. The relationship between agents and objects has not been widely discussed in the literature, but see <ref> [24] </ref>. Other readable introductions to the idea of intelligent agents include [34] and [13]. 1.3 Abstract Architectures for Intelligent Agents We can easily formalise the abstract view of agents presented so far.
Reference: 25. <author> M. R. Genesereth and N. Nilsson. </author> <booktitle> Logical Foundations of Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann Publishers: </publisher> <address> San Mateo, CA, </address> <year> 1987. </year>
Reference-contexts: In fact, they are identical in their expressive power | every state-based agent can be transformed into a standard agent that is behaviourally equivalent. Sources and Further Reading The abstract model of agents presented here is based on that given in <ref> [25, Chapter 13] </ref>, and also makes use of some ideas from [61, 60]. The properties of perception as discussed in this section lead to knowledge theory, a formal analysis of the information implicit within the state of computer processes, which has had a profound effect in theoretical computer science. <p> The problems associated with representing and reasoning about complex, dynamic, possibly physical environments are also 22 Intelligent Agents essentially unsolved. Sources and Further Reading My presentation of logic based agents is based largely on the discussion of deliberate agents presented in <ref> [25, Chapter 13] </ref>, which represents the logic-centric view of AI and agents very well. The discussion is also partly based on [38]. A number of more-or-less "pure" logical approaches to agent programming have been developed.
Reference: 26. <author> M. P. Georgeff and A. L. Lansky. </author> <title> Reactive reasoning and planning. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence (AAAI-87), </booktitle> <pages> pages 677-682, </pages> <address> Seattle, WA, </address> <year> 1987. </year>
Reference-contexts: One of the interesting aspects of the bdi model is that it has been used in one of the most successful agent architectures to date. The Procedural Resoning System (prs), originally developed by Michael Georgeff and Amy Lansky <ref> [26] </ref>, has been used to build some of the most exacting agent applications to date, including fault diagnosis for the reaction control system of the space shuttle, and an air traffic management system at Sydney airport in Australia | overviews of these systems are described in [27].
Reference: 27. <author> M. P. Georgeff and A. S. Rao. </author> <title> A profile of the Australian AI Institute. </title> <journal> IEEE Expert, </journal> <volume> 11(6) </volume> <pages> 89-92, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: Georgeff and Amy Lansky [26], has been used to build some of the most exacting agent applications to date, including fault diagnosis for the reaction control system of the space shuttle, and an air traffic management system at Sydney airport in Australia | overviews of these systems are described in <ref> [27] </ref>. In the prs, an agent is equipped with a library of plans which are used to perform means-ends reasoning.
Reference: 28. <author> A. Haddadi. </author> <title> Communication and Cooperation in Agent Systems (LNAI Volume 1056). </title> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <year> 1996. </year>
Reference-contexts: In particular, Anand Rao and Michael Georgeff have developed a range of bdi logics, which they use to axiomatise properties of bdi-based practical reasoning agents [52, 56, 53, 54, 55, 51]. These models have been extended by others to deal with, for example, communication between agents <ref> [28] </ref>. 1.4.4 Layered Architectures Given the requirement that an agent be capable of reactive and pro-active be-haviour, an obvious decomposition involves creating separate subsystems to deal with these different types of behaviours.
Reference: 29. <author> J. Y. Halpern. </author> <title> Using reasoning about knowledge to analyze distributed systems. </title> <booktitle> Annual Review of Computer Science, </booktitle> <volume> 2 </volume> <pages> 37-68, </pages> <year> 1987. </year>
Reference-contexts: The properties of perception as discussed in this section lead to knowledge theory, a formal analysis of the information implicit within the state of computer processes, which has had a profound effect in theoretical computer science. The definitive reference is [14], and an introductory survey is <ref> [29] </ref>. 16 Intelligent Agents 1.4 Concrete Architectures for Intelligent Agents Thus far, we have considered agents only in the abstract. So while we have examined the properties of agents that do and do not maintain state, we have not stopped to consider what this state might look like.
Reference: 30. <author> H. Haugeneder, D. Steiner, and F. G. M c Cabe. IMAGINE: </author> <title> A framework for building multi-agent systems. </title> <editor> In S. M. Deen, editor, </editor> <booktitle> Proceedings of the 1994 International Working Conference on Cooperating Knowledge Based Systems (CKBS-94), </booktitle> <pages> pages 31-64, </pages> <institution> DAKE Centre, University of Keele, UK, </institution> <year> 1994. </year>
Reference-contexts: Michael Fisher's Concurrent MetateM language is described in [21]; the execution algorithm that underpins it is described in [3]. Since Shoham's proposal, a number of languages have been proposed which claim to be agent-oriented. Examples include Becky Thomas's Planning Communicating Agents (placa) language [67, 68], mail <ref> [30] </ref>, and Anand Rao's agentspeak (l) language [50]. april is a language that is intended to be used for building multi-agent systems, although it is not "agent-oriented" in the sense that Shoham describes [44].
Reference: 31. <editor> F. Hayes-Roth, D. A. Waterman, and D. B. Lenat, editors. </editor> <title> Building Expert Systems. </title> <publisher> Addison-Wesley: </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: object model has nothing to say about such types of behaviour; a multi-agent system is inherently multi-threaded, in that each agent is assumed 10 Intelligent Agents to have at least one thread of control. 1.2.4 Agents and Expert Systems Expert systems were the most important AI technology of the 1980s <ref> [31] </ref>. An expert system is one that is capable of solving problems or giving advice in some knowledge-rich domain [32].
Reference: 32. <author> P. Jackson. </author> <title> Introduction to Expert Systems. </title> <publisher> Addison-Wesley: </publisher> <address> Reading, MA, </address> <year> 1986. </year>
Reference-contexts: An expert system is one that is capable of solving problems or giving advice in some knowledge-rich domain <ref> [32] </ref>.
Reference: 33. <author> N. R. Jennings, J. Corera, I. Laresgoiti, E. H. Mamdani, F. Perriolat, P. Skarek, and L. Z. Varga. </author> <title> Using ARCHON to develop real-world DAI applications for electricity transportation management and particle accelerator control. </title> <journal> IEEE Expert, </journal> <month> dec </month> <year> 1996. </year>
Reference-contexts: In addition, we do not generally require expert systems to be capable of co-operating with other agents. Despite these differences, some expert systems, (particularly those that perform real-time control tasks), look very much like agents. A good example is the archon system <ref> [33] </ref>. Sources and Further Reading A view of artificial intelligence as the process of agent design is presented in [59], and in particular, Chapter 2 of [59] presents much useful material.
Reference: 34. <author> L. P. Kaelbling. </author> <title> An architecture for intelligent reactive systems. </title> <editor> In M. P. Georgeff and A. L. Lansky, editors, </editor> <booktitle> Reasoning About Actions & Plans | Proceedings of the 1986 Workshop, </booktitle> <pages> pages 395-410. </pages> <publisher> Morgan Kaufmann Publishers: </publisher> <address> San Mateo, CA, </address> <year> 1986. </year>
Reference-contexts: The relationship between agents and objects has not been widely discussed in the literature, but see [24]. Other readable introductions to the idea of intelligent agents include <ref> [34] </ref> and [13]. 1.3 Abstract Architectures for Intelligent Agents We can easily formalise the abstract view of agents presented so far. <p> Kaelbling <ref> [34] </ref> gives a good discussion of the issues associated with developing resource-bounded rational agents, and proposes an agent architecture somewhat similar to that developed by Brooks. 1.4.3 Belief-Desire-Intention Architectures In this section, we shall discuss belief-desire-intention (bdi) architectures.
Reference: 35. <author> L. P. Kaelbling. </author> <title> A situated automata approach to the design of embedded agents. </title> <journal> SIGART Bulletin, </journal> <volume> 2(4) </volume> <pages> 85-88, </pages> <year> 1991. </year>
Reference-contexts: include: the agent network architecture developed by Pattie Maes [40, 42, 43]; Nilsson's teleo reactive programs [49]; Rosenchein and Kaelbling's situated automata approach, which is particularly interesting in that it shows how agents can be specified in an abstract, logical framework, and compiled into equivalent, but computationally very simple machines <ref> [57, 36, 35, 58] </ref>; Agre and Chapman's pengi system [1]; Schoppers' universal plans | which are essentially decision trees that can be used to efficiently determine an appropriate action in any situation [62]; Firby's reactive action packages [19].
Reference: 36. <author> L. P. Kaelbling and S. J. Rosenschein. </author> <title> Action and planning in embedded agents. </title> <editor> In P. Maes, editor, </editor> <booktitle> Designing Autonomous Agents, </booktitle> <pages> pages 35-48. </pages> <publisher> The MIT Press: </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: include: the agent network architecture developed by Pattie Maes [40, 42, 43]; Nilsson's teleo reactive programs [49]; Rosenchein and Kaelbling's situated automata approach, which is particularly interesting in that it shows how agents can be specified in an abstract, logical framework, and compiled into equivalent, but computationally very simple machines <ref> [57, 36, 35, 58] </ref>; Agre and Chapman's pengi system [1]; Schoppers' universal plans | which are essentially decision trees that can be used to efficiently determine an appropriate action in any situation [62]; Firby's reactive action packages [19].
Reference: 37. <author> D. Kinny and M. Georgeff. </author> <title> Commitment and effectiveness of situated agents. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence (IJCAI-91), </booktitle> <pages> pages 82-88, </pages> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference-contexts: There is clearly a tradeoff to be struck between the degree of commitment and reconsideration at work here. The nature of this tradeoff was examined by David Kinny and Michael Georgeff, in a number of experiments carried out with a bdi agent framework called dMARS <ref> [37] </ref>. They investigate how bold agents (those that never stop to reconsider) and cautious agents (those that are constantly stopping to reconsider) perform in a variety of different environments. The most important parameter in these experiments was the rate of world change, fl.
Reference: 38. <author> K. Konolige. </author> <title> A Deduction Model of Belief. </title> <publisher> Pitman Publishing: London and Morgan Kaufmann: </publisher> <address> San Mateo, CA, </address> <year> 1986. </year>
Reference-contexts: Sources and Further Reading My presentation of logic based agents is based largely on the discussion of deliberate agents presented in [25, Chapter 13], which represents the logic-centric view of AI and agents very well. The discussion is also partly based on <ref> [38] </ref>. A number of more-or-less "pure" logical approaches to agent programming have been developed.
Reference: 39. <author> Y. Lesperance, H. J. Levesque, F. Lin, D. Marcu, R. Reiter, and R. B. Scherl. </author> <title> Foundations of a logical approach to agent programming. </title> <editor> In M. Wooldridge, J. P. Muller, and M. Tambe, editors, </editor> <booktitle> Intelligent Agents II (LNAI Volume 1037), </booktitle> <pages> pages 331-346. </pages> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <year> 1996. </year>
Reference-contexts: The discussion is also partly based on [38]. A number of more-or-less "pure" logical approaches to agent programming have been developed. Well-known examples include the congolog system of Lesperance and colleagues <ref> [39] </ref> (which is based on the situation calculus [45]) and the MetateM and Concurrent MetateM programming languages developed by Fisher and colleagues [3, 21] (in which agents are programmed by giving them temporal logic specifications of the behaviour they should exhibit).
Reference: 40. <author> P. Maes. </author> <title> The dynamics of action selection. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence (IJCAI-89), </booktitle> <pages> pages 991-997, </pages> <address> Detroit, MI, </address> <year> 1989. </year>
Reference-contexts: The collection of papers edited by Pattie Maes [41] contains papers that describe many of these, as does the collection by Agre and Rosenschein [2]. Other approaches include: the agent network architecture developed by Pattie Maes <ref> [40, 42, 43] </ref>; Nilsson's teleo reactive programs [49]; Rosenchein and Kaelbling's situated automata approach, which is particularly interesting in that it shows how agents can be specified in an abstract, logical framework, and compiled into equivalent, but computationally very simple machines [57, 36, 35, 58]; Agre and Chapman's pengi system [1];
Reference: 41. <editor> P. Maes, editor. </editor> <title> Designing Autonomous Agents. </title> <publisher> The MIT Press: </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: The version of the subsumption architecture used in this chapter is actually a simplification of that presented by Brooks. The subsumption architecture is probably the best-known reactive architecture around | but there are many others. The collection of papers edited by Pattie Maes <ref> [41] </ref> contains papers that describe many of these, as does the collection by Agre and Rosenschein [2].
Reference: 42. <author> P. Maes. </author> <title> Situated agents can have goals. </title> <editor> In P. Maes, editor, </editor> <booktitle> Designing Autonomous Agents, </booktitle> <pages> pages 49-70. </pages> <publisher> The MIT Press: </publisher> <address> Cambridge, MA, </address> <year> 1990. </year> <title> 50 Intelligent Agents </title>
Reference-contexts: The collection of papers edited by Pattie Maes [41] contains papers that describe many of these, as does the collection by Agre and Rosenschein [2]. Other approaches include: the agent network architecture developed by Pattie Maes <ref> [40, 42, 43] </ref>; Nilsson's teleo reactive programs [49]; Rosenchein and Kaelbling's situated automata approach, which is particularly interesting in that it shows how agents can be specified in an abstract, logical framework, and compiled into equivalent, but computationally very simple machines [57, 36, 35, 58]; Agre and Chapman's pengi system [1];
Reference: 43. <author> P. Maes. </author> <title> The agent network architecture (ANA). </title> <journal> SIGART Bulletin, </journal> <volume> 2(4) </volume> <pages> 115-120, </pages> <year> 1991. </year>
Reference-contexts: The collection of papers edited by Pattie Maes [41] contains papers that describe many of these, as does the collection by Agre and Rosenschein [2]. Other approaches include: the agent network architecture developed by Pattie Maes <ref> [40, 42, 43] </ref>; Nilsson's teleo reactive programs [49]; Rosenchein and Kaelbling's situated automata approach, which is particularly interesting in that it shows how agents can be specified in an abstract, logical framework, and compiled into equivalent, but computationally very simple machines [57, 36, 35, 58]; Agre and Chapman's pengi system [1];
Reference: 44. <author> F. G. M c Cabe and K. L. Clark. </author> <title> April | agent process interaction language. </title> <editor> In M. Wooldridge and N. R. Jennings, editors, </editor> <booktitle> Intelligent Agents: Theories, Architectures, and Languages (LNAI Volume 890), </booktitle> <pages> pages 324-340. </pages> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: Examples include Becky Thomas's Planning Communicating Agents (placa) language [67, 68], mail [30], and Anand Rao's agentspeak (l) language [50]. april is a language that is intended to be used for building multi-agent systems, although it is not "agent-oriented" in the sense that Shoham describes <ref> [44] </ref>. The telescript programming language, developed by General Magic, Inc., was the first mobile agent programming language [69]. That is, it explicitly supports the idea of agents as processes that have the ability to autonomously move themselves across a computer network and recommence executing at a remote site.
Reference: 45. <author> J. McCarthy and P. J. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence 4. </booktitle> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year>
Reference-contexts: The discussion is also partly based on [38]. A number of more-or-less "pure" logical approaches to agent programming have been developed. Well-known examples include the congolog system of Lesperance and colleagues [39] (which is based on the situation calculus <ref> [45] </ref>) and the MetateM and Concurrent MetateM programming languages developed by Fisher and colleagues [3, 21] (in which agents are programmed by giving them temporal logic specifications of the behaviour they should exhibit). Concurrent MetateM is discussed as a case study in section 1.5.
Reference: 46. <author> J. Muller. </author> <title> A cooperation model for autonomous agents. </title> <editor> In J. P. Muller, M. Wooldridge, and N. R. Jennings, editors, </editor> <booktitle> Intelligent Agents III (LNAI Volume 1193), </booktitle> <pages> pages 245-260. </pages> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <year> 1997. </year>
Reference-contexts: This problem is partly alleviated in two-pass vertically layered architecture such as interrap. Sources and Further Reading The introductory discussion of layered architectures given here draws heavily upon [47, pp262-264]. The best reference to touringmachines is [16]; more accessible references include [17, 18]. The definitive reference to interrap is <ref> [46] </ref>, although [20] is also a useful reference.
Reference: 47. <author> J. P. Muller, M. Pischel, and M. Thiel. </author> <title> Modelling reactive behaviour in vertically layered agent architectures. </title> <editor> In M. Wooldridge and N. R. Jennings, editors, </editor> <booktitle> Intelligent Agents: Theories, Architectures, and Languages (LNAI Volume 890), </booktitle> <pages> pages 261-276. </pages> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: This problem is partly alleviated in two-pass vertically layered architecture such as interrap. Sources and Further Reading The introductory discussion of layered architectures given here draws heavily upon <ref> [47, pp262-264] </ref>. The best reference to touringmachines is [16]; more accessible references include [17, 18]. The definitive reference to interrap is [46], although [20] is also a useful reference.
Reference: 48. <editor> J. P. Muller, M. Wooldridge, and N. R. Jennings, editors. </editor> <booktitle> Intelligent Agents III (LNAI Volume 1193). </booktitle> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <year> 1995. </year>
Reference-contexts: In addition, [71] contains a detailed survey of agent theories | formalisms for reasoning about intelligent, rational agents, which is outside the scope of this chapter. This question of "what is an agent" is one that continues to generate some debate; a collection of answers may be found in <ref> [48] </ref>. The relationship between agents and objects has not been widely discussed in the literature, but see [24]. Other readable introductions to the idea of intelligent agents include [34] and [13]. 1.3 Abstract Architectures for Intelligent Agents We can easily formalise the abstract view of agents presented so far.
Reference: 49. <author> N. J. Nilsson. </author> <title> Towards agent programs with circuit semantics. </title> <type> Technical Report STAN-CS-92-1412, </type> <institution> Computer Science Department, Stanford University, Stanford, </institution> <address> CA 94305, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: The collection of papers edited by Pattie Maes [41] contains papers that describe many of these, as does the collection by Agre and Rosenschein [2]. Other approaches include: the agent network architecture developed by Pattie Maes [40, 42, 43]; Nilsson's teleo reactive programs <ref> [49] </ref>; Rosenchein and Kaelbling's situated automata approach, which is particularly interesting in that it shows how agents can be specified in an abstract, logical framework, and compiled into equivalent, but computationally very simple machines [57, 36, 35, 58]; Agre and Chapman's pengi system [1]; Schoppers' universal plans | which are essentially
Reference: 50. <author> A. S. Rao. AgentSpeak(L): </author> <title> BDI agents speak out in a logical computable language. </title> <editor> In W. Van de Velde and J. W. Perram, editors, </editor> <booktitle> Agents Breaking Away: Proceedings of the Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, </booktitle> <volume> (LNAI Volume 1038), </volume> <pages> pages 42-55. </pages> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <year> 1996. </year>
Reference-contexts: Since Shoham's proposal, a number of languages have been proposed which claim to be agent-oriented. Examples include Becky Thomas's Planning Communicating Agents (placa) language [67, 68], mail [30], and Anand Rao's agentspeak (l) language <ref> [50] </ref>. april is a language that is intended to be used for building multi-agent systems, although it is not "agent-oriented" in the sense that Shoham describes [44]. The telescript programming language, developed by General Magic, Inc., was the first mobile agent programming language [69].
Reference: 51. <author> A. S. Rao. </author> <title> Decision procedures for propositional linear-time Belief-Desire-Intention logics. </title> <editor> In M. Wooldridge, J. P. Muller, and M. Tambe, editors, </editor> <booktitle> Intelligent Agents II (LNAI Volume 1037), </booktitle> <pages> pages 33-48. </pages> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <year> 1996. </year>
Reference-contexts: The bdi model is also interesting because a great deal of effort has been devoted to formalising it. In particular, Anand Rao and Michael Georgeff have developed a range of bdi logics, which they use to axiomatise properties of bdi-based practical reasoning agents <ref> [52, 56, 53, 54, 55, 51] </ref>.
Reference: 52. <author> A. S. Rao and M. P. Georgeff. </author> <title> Asymmetry thesis and side-effect problems in linear time and branching time intention logics. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence (IJCAI-91), </booktitle> <pages> pages 498-504, </pages> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference-contexts: The bdi model is also interesting because a great deal of effort has been devoted to formalising it. In particular, Anand Rao and Michael Georgeff have developed a range of bdi logics, which they use to axiomatise properties of bdi-based practical reasoning agents <ref> [52, 56, 53, 54, 55, 51] </ref>.
Reference: 53. <author> A. S. Rao and M. P. Georgeff. </author> <title> Modeling rational agents within a BDI-architecture. </title> <editor> In R. Fikes and E. Sandewall, editors, </editor> <booktitle> Proceedings of Knowledge Representation and Reasoning (KR&R-91), </booktitle> <pages> pages 473-484. </pages> <publisher> Morgan Kaufmann Publishers: </publisher> <address> San Mateo, CA, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: The bdi model is also interesting because a great deal of effort has been devoted to formalising it. In particular, Anand Rao and Michael Georgeff have developed a range of bdi logics, which they use to axiomatise properties of bdi-based practical reasoning agents <ref> [52, 56, 53, 54, 55, 51] </ref>.
Reference: 54. <author> A. S. Rao and M. P. Georgeff. </author> <title> An abstract architecture for rational agents. </title> <editor> In C. Rich, W. Swartout, and B. Nebel, editors, </editor> <booktitle> Proceedings of Knowledge Representation and Reasoning (KR&R-92), </booktitle> <pages> pages 439-449, </pages> <year> 1992. </year>
Reference-contexts: The bdi model is also interesting because a great deal of effort has been devoted to formalising it. In particular, Anand Rao and Michael Georgeff have developed a range of bdi logics, which they use to axiomatise properties of bdi-based practical reasoning agents <ref> [52, 56, 53, 54, 55, 51] </ref>.
Reference: 55. <author> A. S. Rao and M. P. Georgeff. </author> <title> A model-theoretic approach to the verification of situated reasoning systems. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence (IJCAI-93), </booktitle> <pages> pages 318-324, </pages> <address> Chambery, France, </address> <year> 1993. </year>
Reference-contexts: The bdi model is also interesting because a great deal of effort has been devoted to formalising it. In particular, Anand Rao and Michael Georgeff have developed a range of bdi logics, which they use to axiomatise properties of bdi-based practical reasoning agents <ref> [52, 56, 53, 54, 55, 51] </ref>.
Reference: 56. <author> A. S. Rao, M. P. Georgeff, and E. A. Sonenberg. </author> <title> Social plans: A preliminary report. </title> <editor> In E. Werner and Y. Demazeau, editors, </editor> <booktitle> Decentralized AI 3 | Proceedings of the Third European Workshop on Modelling Autonomous Agents in a Multi-Agent World (MAAMAW-91), </booktitle> <pages> pages 57-76. </pages> <publisher> Elsevier Science Publishers B.V.: </publisher> <address> 1.8 References 51 Amsterdam, The Netherlands, </address> <year> 1992. </year>
Reference-contexts: The bdi model is also interesting because a great deal of effort has been devoted to formalising it. In particular, Anand Rao and Michael Georgeff have developed a range of bdi logics, which they use to axiomatise properties of bdi-based practical reasoning agents <ref> [52, 56, 53, 54, 55, 51] </ref>.
Reference: 57. <author> S. Rosenschein and L. P. Kaelbling. </author> <title> The synthesis of digital machines with provable epistemic properties. </title> <editor> In J. Y. Halpern, editor, </editor> <booktitle> Proceedings of the 1986 Conference on Theoretical Aspects of Reasoning About Knowledge, </booktitle> <pages> pages 83-98. </pages> <publisher> Morgan Kaufmann Publishers: </publisher> <address> San Mateo, CA, </address> <year> 1986. </year>
Reference-contexts: include: the agent network architecture developed by Pattie Maes [40, 42, 43]; Nilsson's teleo reactive programs [49]; Rosenchein and Kaelbling's situated automata approach, which is particularly interesting in that it shows how agents can be specified in an abstract, logical framework, and compiled into equivalent, but computationally very simple machines <ref> [57, 36, 35, 58] </ref>; Agre and Chapman's pengi system [1]; Schoppers' universal plans | which are essentially decision trees that can be used to efficiently determine an appropriate action in any situation [62]; Firby's reactive action packages [19].
Reference: 58. <author> S. J. Rosenschein and L. P. Kaelbling. </author> <title> A situated view of representation and control. </title> <editor> In P. E. Agre and S. J. Rosenschein, editors, </editor> <booktitle> Computational Theories of Interaction and Agency, </booktitle> <pages> pages 515-540. </pages> <publisher> The MIT Press: </publisher> <address> Cambridge, MA, </address> <year> 1996. </year>
Reference-contexts: The difference is rather like the distinction between interpreted and compiled programming languages. The best-known example of this work is the situated automata paradigm of Leslie Kaelbling and Stanley Rosenschein <ref> [58] </ref>. An review of the role of logic in intelligent agents may be found in [70]. <p> include: the agent network architecture developed by Pattie Maes [40, 42, 43]; Nilsson's teleo reactive programs [49]; Rosenchein and Kaelbling's situated automata approach, which is particularly interesting in that it shows how agents can be specified in an abstract, logical framework, and compiled into equivalent, but computationally very simple machines <ref> [57, 36, 35, 58] </ref>; Agre and Chapman's pengi system [1]; Schoppers' universal plans | which are essentially decision trees that can be used to efficiently determine an appropriate action in any situation [62]; Firby's reactive action packages [19].
Reference: 59. <author> S. Russell and P. Norvig. </author> <title> Artificial Intelligence: A Modern Approach. </title> <publisher> Prentice-Hall, </publisher> <year> 1995. </year>
Reference-contexts: The complexity of the decision-making process can be affected by a number of different environmental properties. Russell and Norvig suggest the following classification of environment properties <ref> [59, p46] </ref>: Accessible vs inaccessible. An accessible environment is one in which the agent can obtain complete, accurate, up-to-date information about the environment's state. Most moderately complex environments (including, for example, the everyday physical world and the Internet) are inaccessible. <p> An environment is discrete if there are a fixed, finite number of actions and percepts in it. Russell and Norvig give a chess game as an example of a discrete environment, and taxi driving as an example of a continuous one. As Russell and Norvig observe <ref> [59, p46] </ref>, if an environment is sufficiently complex, then the fact that it is actually deterministic is not much help: to all intents and purposes, it may as well be non-deterministic. <p> Despite these differences, some expert systems, (particularly those that perform real-time control tasks), look very much like agents. A good example is the archon system [33]. Sources and Further Reading A view of artificial intelligence as the process of agent design is presented in <ref> [59] </ref>, and in particular, Chapter 2 of [59] presents much useful material. The definition of agents presented here is based on [71], which also contains an extensive review of agent architectures and programming languages. <p> A good example is the archon system [33]. Sources and Further Reading A view of artificial intelligence as the process of agent design is presented in <ref> [59] </ref>, and in particular, Chapter 2 of [59] presents much useful material. The definition of agents presented here is based on [71], which also contains an extensive review of agent architectures and programming languages. <p> In this way, the agent's behaviour is determined by the agent's deduction rules (its "program") and its current database (representing the information the agent has about its environment). To illustrate these ideas, let us consider a small example (based on the vacuum cleaning world example of <ref> [59, p51] </ref>). The idea is that we have a small robotic agent that will clean up a house. The robot is equipped with a sensor that will tell it whether it is over any dirt, and a vacuum cleaner that can be used to suck up dirt.
Reference: 60. <author> S. Russell and D. Subramanian. </author> <title> Provably bounded-optimal agents. </title> <journal> Journal of AI Research, </journal> <volume> 2 </volume> <pages> 575-609, </pages> <year> 1995. </year>
Reference-contexts: Episodic vs non-episodic. In an episodic environment, the performance of an agent is dependent on a number of discrete episodes, with no link between the performance of an agent in different scenarios. An example of an episodic environment would be a mail sorting system <ref> [60] </ref>. Episodic environments are simpler from the agent developer's perspective because the agent can decide what action to perform based only on the current episode | it need not reason about the interactions between this and future episodes. Static vs dynamic. <p> Sources and Further Reading The abstract model of agents presented here is based on that given in [25, Chapter 13], and also makes use of some ideas from <ref> [61, 60] </ref>. The properties of perception as discussed in this section lead to knowledge theory, a formal analysis of the information implicit within the state of computer processes, which has had a profound effect in theoretical computer science. <p> An review of the role of logic in intelligent agents may be found in [70]. Finally, for a detailed discussion of calculative rationality and the way that it has affected thinking in AI, see <ref> [60] </ref>. 1.4.2 Reactive Architectures The seemingly intractable problems with symbolic/logical approaches to building agents led some researchers to question, and ultimately reject, the assumptions upon which such approaches are based.
Reference: 61. <author> S. J. Russell and E. Wefald. </author> <title> Do the Right Thing | Studies in Limited Rationality. </title> <publisher> The MIT Press: </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: Sources and Further Reading The abstract model of agents presented here is based on that given in [25, Chapter 13], and also makes use of some ideas from <ref> [61, 60] </ref>. The properties of perception as discussed in this section lead to knowledge theory, a formal analysis of the information implicit within the state of computer processes, which has had a profound effect in theoretical computer science.
Reference: 62. <author> M. J. Schoppers. </author> <title> Universal plans for reactive robots in unpredictable environments. </title> <booktitle> In Proceedings of the Tenth International Joint Conference on Artificial Intelligence (IJCAI-87), </booktitle> <pages> pages 1039-1046, </pages> <address> Milan, Italy, </address> <year> 1987. </year>
Reference-contexts: agents can be specified in an abstract, logical framework, and compiled into equivalent, but computationally very simple machines [57, 36, 35, 58]; Agre and Chapman's pengi system [1]; Schoppers' universal plans | which are essentially decision trees that can be used to efficiently determine an appropriate action in any situation <ref> [62] </ref>; Firby's reactive action packages [19]. Kaelbling [34] gives a good discussion of the issues associated with developing resource-bounded rational agents, and proposes an agent architecture somewhat similar to that developed by Brooks. 1.4.3 Belief-Desire-Intention Architectures In this section, we shall discuss belief-desire-intention (bdi) architectures.
Reference: 63. <author> J. R. Searle. </author> <title> Speech Acts: An Essay in the Philosophy of Language. </title> <publisher> Cambridge University Press: </publisher> <address> Cambridge, England, </address> <year> 1969. </year>
Reference-contexts: Messages are constrained to be one of three types: "requests" or "unrequests" to perform or refrain from actions, and "inform" messages, which pass on information | Shoham indicates that he took his inspiration for these message types from speech act theory <ref> [63, 12] </ref>. Request and unrequest messages typically result in the agent's commitments being modified; inform messages result in a change to the agent's beliefs.
Reference: 64. <author> Y. Shoham. </author> <title> Agent-oriented programming. </title> <type> Technical Report STAN-CS-1335-90, </type> <institution> Computer Science Department, Stanford University, Stanford, </institution> <address> CA 94305, </address> <year> 1990. </year>
Reference-contexts: Concurrent MetateM is a good illustration of how a quite pure approach to logic-based agent programming can work, even with a quite expressive logic. Sources and Further Reading The main references to agent0 are <ref> [64, 65] </ref>. Michael Fisher's Concurrent MetateM language is described in [21]; the execution algorithm that underpins it is described in [3]. Since Shoham's proposal, a number of languages have been proposed which claim to be agent-oriented.
Reference: 65. <author> Y. Shoham. </author> <title> Agent-oriented programming. </title> <journal> Artificial Intelligence, </journal> <volume> 60(1) </volume> <pages> 51-92, </pages> <year> 1993. </year>
Reference-contexts: Concurrent MetateM is a good illustration of how a quite pure approach to logic-based agent programming can work, even with a quite expressive logic. Sources and Further Reading The main references to agent0 are <ref> [64, 65] </ref>. Michael Fisher's Concurrent MetateM language is described in [21]; the execution algorithm that underpins it is described in [3]. Since Shoham's proposal, a number of languages have been proposed which claim to be agent-oriented.
Reference: 66. <author> L. Steels. </author> <title> Cooperation between distributed agents through self organization. </title> <editor> In Y. Demazeau and J.-P. Muller, editors, </editor> <booktitle> Decentralized AI | Proceedings of the First European Workshop on Modelling Autonomous Agents in a Multi-Agent World (MAAMAW-89), </booktitle> <pages> pages 175-196. </pages> <publisher> Elsevier Science Publishers B.V.: </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1990. </year>
Reference-contexts: Perhaps more than anything else, this computational simplicity is the strength of the subsumption architecture. To illustrate how the subsumption architecture in more detail, we will show how subsumption architecture agents were built for the following scenario (this example is adapted from <ref> [66] </ref>): 1.4 Concrete Architectures for Intelligent Agents 25 The objective is to explore a distant planet, more concretely, to collect samples of a particular type of precious rock. The location of the rock samples is not known in advance, but they are typically clustered in certain spots. <p> Luc Steels argues that logic-based agents, of the type we described above, are "entirely unrealistic" for this problem <ref> [66] </ref>. Instead, he proposes a solution using the subsumption architecture. The solution makes use of two mechanisms introduced by Steels: The first is a gradient field. In order that agents can know in which direction the mothership lies, the mothership generates a radio signal.
Reference: 67. <author> S. R. Thomas. </author> <title> PLACA, an Agent Oriented Programming Language. </title> <type> PhD thesis, </type> <institution> Computer Science Department, Stanford University, Stanford, </institution> <address> CA 94305, </address> <month> August </month> <year> 1993. </year> <note> (Available as technical report STAN-CS-93-1487). </note>
Reference-contexts: Michael Fisher's Concurrent MetateM language is described in [21]; the execution algorithm that underpins it is described in [3]. Since Shoham's proposal, a number of languages have been proposed which claim to be agent-oriented. Examples include Becky Thomas's Planning Communicating Agents (placa) language <ref> [67, 68] </ref>, mail [30], and Anand Rao's agentspeak (l) language [50]. april is a language that is intended to be used for building multi-agent systems, although it is not "agent-oriented" in the sense that Shoham describes [44].
Reference: 68. <author> S. R. Thomas. </author> <title> The PLACA agent programming language. </title> <editor> In M. Wooldridge and N. R. Jennings, editors, </editor> <booktitle> Intelligent Agents: Theories, Architectures, and Languages (LNAI Volume 890), </booktitle> <pages> pages 355-369. </pages> <publisher> Springer-Verlag: </publisher> <address> Berlin, Germany, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: Michael Fisher's Concurrent MetateM language is described in [21]; the execution algorithm that underpins it is described in [3]. Since Shoham's proposal, a number of languages have been proposed which claim to be agent-oriented. Examples include Becky Thomas's Planning Communicating Agents (placa) language <ref> [67, 68] </ref>, mail [30], and Anand Rao's agentspeak (l) language [50]. april is a language that is intended to be used for building multi-agent systems, although it is not "agent-oriented" in the sense that Shoham describes [44].
Reference: 69. <author> J. E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace. White paper, General Magic, </title> <publisher> Inc., </publisher> <address> 2465 Latham Street, Mountain View, CA 94040, </address> <year> 1994. </year>
Reference-contexts: The telescript programming language, developed by General Magic, Inc., was the first mobile agent programming language <ref> [69] </ref>. That is, it explicitly supports the idea of agents as processes that have the ability to autonomously move themselves across a computer network and recommence executing at a remote site.
Reference: 70. <author> M. Wooldridge. </author> <title> Agent-based software engineering. </title> <journal> IEE Transactions on Software Engineering, </journal> <volume> 144(1) </volume> <pages> 26-37, </pages> <month> February </month> <year> 1997. </year>
Reference-contexts: The difference is rather like the distinction between interpreted and compiled programming languages. The best-known example of this work is the situated automata paradigm of Leslie Kaelbling and Stanley Rosenschein [58]. An review of the role of logic in intelligent agents may be found in <ref> [70] </ref>. Finally, for a detailed discussion of calculative rationality and the way that it has affected thinking in AI, see [60]. 1.4.2 Reactive Architectures The seemingly intractable problems with symbolic/logical approaches to building agents led some researchers to question, and ultimately reject, the assumptions upon which such approaches are based.
Reference: 71. <author> M. Wooldridge and N. R. Jennings. </author> <title> Intelligent agents: </title> <journal> Theory and practice. The Knowledge Engineering Review, </journal> <volume> 10(2) </volume> <pages> 115-152, </pages> <year> 1995. </year>
Reference-contexts: Nevertheless, some sort of definition is important | otherwise, there is a danger that the term will lose all meaning (cf. "user friendly"). The definition presented here is adapted from <ref> [71] </ref>: An agent is a computer system that is situated in some environment, and that is capable of autonomous action in this environment in order to meet its design objectives. There are several points to note about this definition. First, the definition refers to "agents" and not "intelligent agents". <p> But for me, an intelligent agent is one that is capable of flexible autonomous action in order to meet its design objectives, where by flexible, I mean three things <ref> [71] </ref>: reactivity : intelligent agents are able to perceive their environment, and respond in a timely fashion to changes that occur in it in order to satisfy their design objectives; pro-activeness: intelligent agents are able to exhibit goal-directed behaviour by taking the initiative in order to satisfy their design objectives; social <p> A good example is the archon system [33]. Sources and Further Reading A view of artificial intelligence as the process of agent design is presented in [59], and in particular, Chapter 2 of [59] presents much useful material. The definition of agents presented here is based on <ref> [71] </ref>, which also contains an extensive review of agent architectures and programming languages. In addition, [71] contains a detailed survey of agent theories | formalisms for reasoning about intelligent, rational agents, which is outside the scope of this chapter. <p> The definition of agents presented here is based on <ref> [71] </ref>, which also contains an extensive review of agent architectures and programming languages. In addition, [71] contains a detailed survey of agent theories | formalisms for reasoning about intelligent, rational agents, which is outside the scope of this chapter. This question of "what is an agent" is one that continues to generate some debate; a collection of answers may be found in [48].
References-found: 71

