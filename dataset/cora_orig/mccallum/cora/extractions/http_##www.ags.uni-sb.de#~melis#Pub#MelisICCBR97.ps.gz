URL: http://www.ags.uni-sb.de/~melis/Pub/MelisICCBR97.ps.gz
Refering-URL: http://jswww.cs.uni-sb.de/~melis/
Root-URL: 
Email: melis@cs.uni-sb.de  
Title: S o l u t i o n Relevant A b s t r a
Author: Erica Melis 
Address: D-66041 Saarbrucken, Germany.  
Affiliation: Universitat des Saarlandes, FB Informatik  
Abstract: Two major problems in case-based reasoning are the efficient and justified retrieval of source cases and the adaptation of retrieved solutions to the conditions of the target. For analogical theorem proving by induction, we describe how a solution-relevant abstraction can restrict the retrieval of source cases and the mapping from the source problem to the target problem and how it can determine reformulations that further adapt the source solution.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Bergmann and W. Wilke. </author> <title> On the role of abstraction in case-based reasoning. </title> <editor> In B. Faltings and I. Smith, editors, </editor> <booktitle> Fourth European Workshop on Case-Based Reasoning (EWCBR-96), </booktitle> <address> Lausanne, </address> <year> 1996. </year>
Reference-contexts: The general idea to look for proof-relevant abstractions is not specific, though. Related Work Most attempts that make use of abstraction in the context of analogy, retrieve, transfer, and adapt solutions of an abstracted source problem, for instance the approaches in <ref> [9, 1, 14] </ref>. Instead, our approach retrieves, transfers, and adapts the object-level source proof plan and utilizes abstract features of the problem as a filter for the retrieval and the mapping. Borner [2] constructs prototypes by abduction.
Reference: 2. <author> K. Borner. </author> <title> Structural similarity as guidance in case-based design. </title> <booktitle> In First Eu-ropean Workshop on Case-Based Reasoning 1993, volume LNAI, </booktitle> <address> Berlin, 1994. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Instead, our approach retrieves, transfers, and adapts the object-level source proof plan and utilizes abstract features of the problem as a filter for the retrieval and the mapping. Borner <ref> [2] </ref> constructs prototypes by abduction. She abstracts a class of problems considered similar to each other to a prototype of the class by anti-unification. This abstract prototype is refined for the target.
Reference: 3. <author> A. Bundy, F. van Harmelen, J. Hesketh, and A. Smaill. </author> <title> Experiments with proof plans for induction. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 7 </volume> <pages> 303-324, </pages> <year> 1991. </year>
Reference-contexts: The proof planner CL A M <ref> [3] </ref> has been applied successfully to inductive theorem proving because it knows patterns of inductive proofs consisting of base-cases and step-case and it employs a strong search heuristic, called rippling.
Reference: 4. <author> T.R. Davis and S.J. Russell. </author> <title> A logical approach to reasoning by analogy. </title> <booktitle> In Proceedings of the 10th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 264-270, </pages> <address> Milan Italy, 1987. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This problem was also addressed by Hesse who stated the problem to justify analogical reasoning [6] and Russell <ref> [4] </ref> who introduced formulae, called determinations, into domain theories in order to represent how certain predicates of the problem determine certain predicates of the solution.
Reference: 5. <author> D. Gentner. </author> <title> Structure mapping: A theoretical framework for analogy. </title> <journal> Cognitive Science, </journal> <volume> 7(2) </volume> <pages> 155-170, </pages> <year> 1983. </year>
Reference-contexts: logical implication at the object-level that logically express the dependency of a feature X on a feature Y in all objects which is a very strong requirement. ? The author was supported by the SFB 3782 A second problem in analogical reasoning, addressed for instance by Holyoak [7] and Gentner <ref> [5] </ref>, is to choose from a variety of possible analogical mappings. As we shall show, solution-relevant abstractions can be exploited for this task as well. A third non-trivial job in the analogy procedure is to determine the reformulations (adaptations) of problems and solutions. <p> The idea of adaptation-guided retrieval in [12] is similar to our possibility of predefined deviations from the LF-preservation in the retrieval that triggers reformulatons. The mapping problem has been tackled syntactically, for instance, the Analogical Constraint Mapping Engine (ACME) [7]. Gentner's SME <ref> [5] </ref> is based on the systematicity principle that emphasizes syntactic structural constraints. Holyoak and Thagard's ACME [7] focuses on syntactic similarity constraints and manually predefined pragmatic constraint. Also purely syntactically, Kolbe and Walther [9] perform a second-order matching from a generalized source.
Reference: 6. <author> M. Hesse. </author> <title> Models and Analogies in Science. </title> <institution> Indiana: University of Notre Dame Press, Notre Dame, </institution> <year> 1966. </year>
Reference-contexts: This problem was also addressed by Hesse who stated the problem to justify analogical reasoning <ref> [6] </ref> and Russell [4] who introduced formulae, called determinations, into domain theories in order to represent how certain predicates of the problem determine certain predicates of the solution.
Reference: 7. <author> K.J. Holyoak and P. Thagard. </author> <title> Analogical mapping by constraint satisfaction. </title> <journal> Cognitive Science, </journal> <volume> 13 </volume> <pages> 295-355, </pages> <year> 1989. </year>
Reference-contexts: require to know logical implication at the object-level that logically express the dependency of a feature X on a feature Y in all objects which is a very strong requirement. ? The author was supported by the SFB 3782 A second problem in analogical reasoning, addressed for instance by Holyoak <ref> [7] </ref> and Gentner [5], is to choose from a variety of possible analogical mappings. As we shall show, solution-relevant abstractions can be exploited for this task as well. A third non-trivial job in the analogy procedure is to determine the reformulations (adaptations) of problems and solutions. <p> The idea of adaptation-guided retrieval in [12] is similar to our possibility of predefined deviations from the LF-preservation in the retrieval that triggers reformulatons. The mapping problem has been tackled syntactically, for instance, the Analogical Constraint Mapping Engine (ACME) <ref> [7] </ref>. Gentner's SME [5] is based on the systematicity principle that emphasizes syntactic structural constraints. Holyoak and Thagard's ACME [7] focuses on syntactic similarity constraints and manually predefined pragmatic constraint. Also purely syntactically, Kolbe and Walther [9] perform a second-order matching from a generalized source. <p> The mapping problem has been tackled syntactically, for instance, the Analogical Constraint Mapping Engine (ACME) <ref> [7] </ref>. Gentner's SME [5] is based on the systematicity principle that emphasizes syntactic structural constraints. Holyoak and Thagard's ACME [7] focuses on syntactic similarity constraints and manually predefined pragmatic constraint. Also purely syntactically, Kolbe and Walther [9] perform a second-order matching from a generalized source.
Reference: 8. <author> D. Hutter. </author> <title> Synthesis of induction orderings for existence proofs. </title> <editor> In A. Bundy, editor, </editor> <booktitle> Proceedings of 12th International Conference on Automated Deduction (CADE-12), Lecture Notes in Artificial Intelligence 814, </booktitle> <pages> pages 29-41. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: This means that rather than taking the proof/plan of an abstracted problem as the source solution to be replayed and adapted, we use abstract features of the source and target problems to restrict the retrieval, mapping, and to trigger reformulations. 3.2 The Labelled Fragment Abstraction Labelled fragments (LFs), introduced in <ref> [8] </ref>, are an abstraction of wave-rules obtained by removing the structure of the wave-fronts and those parts of the skeleton not affected by wave-fronts. <p> Similar to the previous section, we require the mapping m b from source theorem to target theorem to preserve the labelled fragments or to change LFs in a controlled way such that the source rippling paths are mapped to similar successful target rippling paths. According to <ref> [8] </ref>, labelled fragments are rather insensitive to missing lemmas.
Reference: 9. <author> Th. Kolbe and Ch. Walther. </author> <title> Reusing proofs. </title> <booktitle> In Proceedings of 11th European Conference on Artificial Intelligence (ECAI-94), </booktitle> <address> Amsterdam, </address> <year> 1994. </year> <note> http://kirmes.inferenzsysteme.informatik.th-darmstadt.de/ kolbe/. </note>
Reference-contexts: Even without automated retrieval of a source case the analogy would be useful because more theorems can be proved. The results rely on the use of the LF-abstraction that guarantees success of the target step-case. Without these abstractions, full second-order problem matches had to be considered, as done in <ref> [9] </ref>. This is quite restricting. <p> The general idea to look for proof-relevant abstractions is not specific, though. Related Work Most attempts that make use of abstraction in the context of analogy, retrieve, transfer, and adapt solutions of an abstracted source problem, for instance the approaches in <ref> [9, 1, 14] </ref>. Instead, our approach retrieves, transfers, and adapts the object-level source proof plan and utilizes abstract features of the problem as a filter for the retrieval and the mapping. Borner [2] constructs prototypes by abduction. <p> Gentner's SME [5] is based on the systematicity principle that emphasizes syntactic structural constraints. Holyoak and Thagard's ACME [7] focuses on syntactic similarity constraints and manually predefined pragmatic constraint. Also purely syntactically, Kolbe and Walther <ref> [9] </ref> perform a second-order matching from a generalized source.
Reference: 10. <author> E. Melis. </author> <title> Analogy in CLAM. </title> <type> Technical Report DAI Research Paper No 766, </type> <institution> University of Edinburgh, AI Dept, Dept. of Artificial Intelligence, Edinburgh, </institution> <year> 1995. </year> <note> available from http://jswww.cs.uni-sb.de/~melis/. </note>
Reference-contexts: That is, the primary goal was not to reduce the problem solving time because CL A M plans very efficiently. Space precludes us from giving a list of theorems that have been proved with analogy and could not be proved without analogy, see <ref> [10, 16] </ref>. Even without automated retrieval of a source case the analogy would be useful because more theorems can be proved. The results rely on the use of the LF-abstraction that guarantees success of the target step-case.
Reference: 11. <author> E. Melis. </author> <title> A model of analogy-driven proof-plan construction. </title> <booktitle> In Proceedings of the 14th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 182-189, </pages> <address> Montreal, </address> <year> 1995. </year>
Reference-contexts: for this problem in analogy-driven proof plan construction for inductive theorem proving that employs proof-relevant abstractions. 2 The annotations being the wave fronts and wave holes 3 second-order mapping means that function symbols are mapped to function terms. 3.1 Analogy-driven Proof Plan Construction The analogy-driven proof plan construction introduced in <ref> [11] </ref> is a control strategy of a proof planner that suggests methods and instantiations rather than searching for them. This analogy comprises retrieval, mapping, reformulation, and replay. The reformulations that yield changes of the theorem and proof assumptions that are accompanied by certain changes of the proof plan.
Reference: 12. <author> B. Smyth and M.T. Keane. </author> <title> Retrieving adaptable cases. </title> <booktitle> In Topics in Case-Based Reasoning: The Role of Adaptation Knowledge in in Case Retrieval, </booktitle> <pages> pages 209-220, </pages> <address> Berlin, 1994. </address> <publisher> Springer. </publisher>
Reference-contexts: The object-level features computed by the footprint contrast, however, with our abstract labelled fragment features and cannot be used to contrain the mapping or even trigger reformulations. The idea of adaptation-guided retrieval in <ref> [12] </ref> is similar to our possibility of predefined deviations from the LF-preservation in the retrieval that triggers reformulatons. The mapping problem has been tackled syntactically, for instance, the Analogical Constraint Mapping Engine (ACME) [7]. Gentner's SME [5] is based on the systematicity principle that emphasizes syntactic structural constraints.
Reference: 13. <author> M.M. Veloso. </author> <title> Planning and Learning by Analogical Reasoning. </title> <publisher> Springer, </publisher> <address> Berlin, New York, </address> <year> 1994. </year>
Reference-contexts: This suggests that a target problem that unifes with the prototype will have the same abstract solution but this largely depends on the sample set used for computing the prototypes. Somewhat similar to our use of abstraction in analogical theorem proving is Veloso's footprint mechanism <ref> [13] </ref> that identifies solution-relevant features at the object-level and that works as a filter in the retrieval of source cases. The object-level features computed by the footprint contrast, however, with our abstract labelled fragment features and cannot be used to contrain the mapping or even trigger reformulations.
Reference: 14. <author> A. Villafiorita and F. Giunchiglia. </author> <title> Inductive theorem proving via abstraction. </title> <booktitle> In Proceedings of the Fourth International Symposium on Artificial Intelligence and Mathematics, AI/MATH96, </booktitle> <pages> pages 150-153, </pages> <address> Fort Lauderdale, Florida, </address> <year> 1996. </year>
Reference-contexts: The general idea to look for proof-relevant abstractions is not specific, though. Related Work Most attempts that make use of abstraction in the context of analogy, retrieve, transfer, and adapt solutions of an abstracted source problem, for instance the approaches in <ref> [9, 1, 14] </ref>. Instead, our approach retrieves, transfers, and adapts the object-level source proof plan and utilizes abstract features of the problem as a filter for the retrieval and the mapping. Borner [2] constructs prototypes by abduction.
Reference: 15. <author> S. Wess. </author> <title> Fallbasiertes Problemlosen in wissensbasierten Systemen zur Entscheidungsunterstutzung und Diagnostik. </title> <type> PhD thesis, </type> <institution> FB Informatik, Univ.Kaiserslautern, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: due to the fact, that in order to retrieve a source problem that has a solution which is potentially useful for the solution of the target problem, a criterion for the a priori similarity of problems has to predict an a posteriori similarity of the solutions, as discussed e.g. in <ref> [15] </ref>. This problem was also addressed by Hesse who stated the problem to justify analogical reasoning [6] and Russell [4] who introduced formulae, called determinations, into domain theories in order to represent how certain predicates of the problem determine certain predicates of the solution.
Reference: 16. <author> J. Whittle. </author> <title> Analogy in CL A M. </title> <type> Technical Report MSc.thesis, </type> <institution> University of Edin-burgh, Dept. of AI, Edinburgh, </institution> <year> 1995. </year>
Reference-contexts: Second-order match is decidable but can be expensive, in particular with many rules involved, and it has to be supported by heuristics to choose reasonable matches. The heuristics are not explained here, but see <ref> [16] </ref>. 5 How Labelled Fragments Restrict the Mapping In parallel to the retrieval the analogical mappings are computed. <p> That is, the primary goal was not to reduce the problem solving time because CL A M plans very efficiently. Space precludes us from giving a list of theorems that have been proved with analogy and could not be proved without analogy, see <ref> [10, 16] </ref>. Even without automated retrieval of a source case the analogy would be useful because more theorems can be proved. The results rely on the use of the LF-abstraction that guarantees success of the target step-case.
References-found: 16

