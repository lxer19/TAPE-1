URL: ftp://zeus.cs.gsu.edu/pub/volshevsky/papers/m5.ps
Refering-URL: http://www.cs.gsu.edu/~matvro/papers.html
Root-URL: http://www.cs.gsu.edu
Title: The fast generalized Parker-Traub algorithm for inversion of Vandermonde and related matrices  
Author: I.Gohberg and V. Olshevsky 
Keyword: Vandermonde matrix, Vandermonde-like matrix, inversion, displacement structure, fast algorithms, numerical stability, Leja ordering, partial pivoting.  
Note: AMS subject classification: 65G05, 65F05, 15A06, 65L07, 65L20.  
Abstract: In this paper we compare the numerical properties of the well-known fast O(n 2 ) Traub and Bjorck-Pereyra algorithms, which both use the special structure of a Vandermonde matrix to rapidly compute the entries of its inverse. The results of numerical experiments suggest that the Parker variant of what we shall call the Parker-Traub algorithm allows one not only fast O(n 2 ) inversion of a Vandermonde matrix, but it also gives more accuracy. We show that the Parker-Traub algorithm is connected with the well-known concept of displacement rank, introduced by T.Kailath and his coauthors about two decades ago, and therefore this algorithm can be generalized to invert the more general class of Vandermonde-like matrices, naturally suggested by the idea of displacement. 
Abstract-found: 1
Intro-found: 1
Reference: [BP70] <author> A. Bjorck and V.Pereyra, </author> <title> Solution of Vandermonde systems of linear equations, </title> <journal> Math. of Computation, </journal> <volume> 24 : 893 - 903 (1970). </volume>
Reference-contexts: The Bjorck-Pereyra algorithm. In <ref> [BP70] </ref> Bjorck and Pereyra showed how to solve a Vandermonde linear system of the form V (x) a = f; f 2 C n (0.2) in only 5n 2 =2 flops. <p> However before doing so, we review another popular inversion procedure, whose numerical properties were much analyzed in the numerical analysis literature. 3 The Bjorck-Pereyra algorithm Bjorck and Pereyra described in <ref> [BP70] </ref> a fast algorithm that solves a Vandermonde linear system V (x) a = f; with a = h i ; f = f k 1kn in only 5n 2 =2 flops. Their algorithm exploits another explicit expression for V (x) 1 , stated next. <p> But it is known to provide, for special configurations of the points fx k g, much more accurate results than standard numerically stable algorithms, as reviewed in the next section. 4 Comparison of the Parker-Traub and the Bjorck-Pereyra in version algorithms Bjorck and Pereyra observed in <ref> [BP70] </ref> that their algorithm frequently produces more accurate solutions than could be expected from the condition number of the coefficient matrix.
Reference: [CR93] <author> D.Calvetti and L.Reichel, </author> " <title> Fast inversion of Vandermonde-like matrices involving orthogonal polynomials," </title> <journal> BIT, </journal> <volume> 33 (1993), 473 - 484 </volume> . 
Reference-contexts: Finally note that recently the Traub algorithm was generalized to invert Chebyshev-Vander-monde matrices in [GO94a], and what we call three-term Vandermonde matrices in <ref> [CR93] </ref>. Now 10 it is clear that both these algorithms are generalizations of the Parker rather than the Traub scheme. Favorable stability results were reported in both cases, whereas their prototype, i.e. the Traub algorithm, was generally regarded as being numerically unstable.
Reference: [DCrHig92] <author> J. Du Croz and N.Higham, </author> <title> Stability of of methods of matrix inversion, </title> <journal> IMA J. Numerical Analysis, </journal> <volume> 13 (1992), </volume> <pages> 1-19. </pages>
Reference-contexts: This occurrence contradicts to a popular advice ( see, for example, <ref> [DCrHig92] </ref> ) to avoid the use of the computed inverse in a larger computation, thus warning that many generally valid guidelines cannot be automatically carried over to the problems where structured matrices are involved. 0.4. Displacement structure. <p> This would be useful, for example, in the case of multiple right-hand sides, but numerous sources predict a numerical breakdown, thus ruling out such a possibility. For example <ref> [DCrHig92] </ref>, motivated by the question of what inversion methods should be used in LAPACK, concludes with the remark : " we wish to stress that all the analysis here pertains to matrix inversion alone. <p> It is usually the case that when a computed inverse is used as a part of a larger computation, the stability properties are less favorable, and this is one reason why matrix inversion is generally discouraged. The paper <ref> [DCrHig92] </ref> justifies this conclusion with a particular example where solving linear system L a = f by forward substitution was more accurate than when using the inversion of a triangular matrix L. <p> e s e s 10 1e+05 8e+04 5e-16 3e-04 2e-03 2e-07 3e-07 3e-07 3e-06 8e-07 1e-07 30 2e+17 2e+17 2e-15 1e+00 1e+00 4e-05 8e-06 7e-05 7e-04 3e-04 6e-06 50 2e+18 4e+30 7e-12 1e+00 1e+00 7e-03 2e-06 5e-03 3e-02 9e-02 1e-06 The above two examples demonstrate that the above conclusion of <ref> [DCrHig92] </ref> ( as well as some other generally valid guidelines ) cannot not be automatically carried over to the special situations, in which structured matrices are involved. 7 Vandermonde-like matrices It turns out that not just Vandermonde, but the more general class of Vandermonde-like matrices, defined below, can be inverted in
Reference: [Forn66] <author> G.Forney, </author> <title> Concatenated codes, </title> <publisher> The M.I.T. Press, </publisher> <address> 1966, Cambridge. </address>
Reference-contexts: The Parker algorithm. The Traub inversion algorithm of [T66] was several times independently derived in the engineering and mathematical literature, and several variants of this algorithm can be found in [P64], [Wetz65], <ref> [Forn66] </ref> and [Kauf69]. <p> Interestingly, due to the importance for applications, the fast Parker-Traub algorithm was often rederived in the engineering literature, see, for example, [Wertz65], <ref> [Forn66] </ref> 2 , and [Kauf69]. We shall demonstrate by computed examples in Sections 5, 6 that the Parker variant of inversion algorithm demonstrates in practice a very satisfactory numerical performance. <p> The second problem is equivalent to solving a Vandermonde linear system, which can be done by the Forney algorithm ( see, e.g., <ref> [Forn66] </ref>, p.119 ). In fact, the Forney algorithm is yet another variant of the Parker-Traub algorithm, and again the only difference from the other two is in the step 2.b.
Reference: [GI88] <author> W. Gautschi and G.Inglese, </author> <title> Lower bounds for the condition number of Vandermonde matrix, </title> <journal> Numerische Mathematik, </journal> <volume> 52 (1988), 241 - 250. </volume>
Reference-contexts: 0 Introduction We first consider the numerical inversion of Vandermonde matrices, V (x) = 6 6 4 1 2 . . . 1 x n x n1 3 7 7 ; where x = (x i ) n1 i=0 2 C n : (0.1) Such matrices are ill-conditioned <ref> [GI88] </ref>, [Ty94], and standard numerically stable methods in general fail to compute the entries of their inverses accurately. The use of the structure of V (x) may allow one to avoid the above difficulty, and to achieve high relative accuracy.
Reference: [GK50] <author> F.R.Gantmacher and M.G.Krein, </author> <title> Oscillatory matrices and kernels, and small vibrations of mechanical systems, second edition, </title> <booktitle> (in Russian), </booktitle> <address> Gosudarstvennoe izdatelstvo technicko-teoreticheskoi literatury, Moscow, </address> <year> 1950. </year>
Reference-contexts: Indeed, in the case of (4.1), V (x) is known to be a totally positive matrix, see, e.g., <ref> [GK50] </ref>. Recall that totally positive matrices are defined as those whose all minors are positive, and hence the columns of their inverses have the sign-oscillation property.
Reference: [GK93] <author> I.Gohberg and I.Koltracht, </author> <title> Mixed, componentwise and structured condition numbers, </title> <journal> SIAM J. of Matrix Anal. Appl., </journal> <volume> 14(1993), </volume> <pages> 688-704. </pages>
Reference: [GKKL87] <author> I.Gohberg, T.Kailath, I.Koltracht and P.Lancaster, </author> <title> Linear Complexity parallel algorithms for linear systems of equations with recursive structure, </title> <journal> Linear Algebra Appl., </journal> <volume> 88/89 (1987), </volume> <pages> 271-315. </pages>
Reference-contexts: These systems can be solved in O (ffn 2 ) flops by using a appropriate form of the generalized Schur algorithm [KS92], [GO94c], [GKO95], [KS95]; or by many Levinson-type algorithms, see, e.g., [HR84], <ref> [GKKL87] </ref>, to mention just a few. The use of any of these algorithms allows one fast computing the entries of the matrices on the right-hand side of (7.12), and thus extends the property (B) to Vandermonde-like matrices.
Reference: [GL] <author> G. Golub and C, Van Loan, </author> <title> Matrix Computations, </title> <note> second edition, </note> <author> John Hopkins U. P., Baltimore, </author> <year> 1989. </year>
Reference: [GKO95] <author> I.Gohberg, T.Kailath and V.Olshevsky, </author> <title> Fast Gaussian elimination with partial pivoting for matrices with displacement structure, </title> <journal> Math. of Computation, </journal> <volume> 64 (1995), </volume> <pages> 1557-1576. </pages>
Reference-contexts: it will be more convenient to exploit the displacement operator r fD 1 x ;Z T 0 g () : C nfin ! C nfin , defined by r fD 1 0 g (R) = D 1 0 ; (7.3) which slightly differs from the ones used in [HR84], [GO94b], <ref> [GKO95] </ref>. Here D x = diag (x 1 ; x 2 ; :::; x n ) and Z 0 stands for the lower shift matrix. <p> The entries of the matrices on the right-hand side of (7.12) are obtained via solving 2ff linear systems (7.13) with a Vandermonde-like coefficient matrix R. These systems can be solved in O (ffn 2 ) flops by using a appropriate form of the generalized Schur algorithm [KS92], [GO94c], <ref> [GKO95] </ref>, [KS95]; or by many Levinson-type algorithms, see, e.g., [HR84], [GKKL87], to mention just a few. The use of any of these algorithms allows one fast computing the entries of the matrices on the right-hand side of (7.12), and thus extends the property (B) to Vandermonde-like matrices. <p> The use of any of these algorithms allows one fast computing the entries of the matrices on the right-hand side of (7.12), and thus extends the property (B) to Vandermonde-like matrices. Among a variety of these possibilities a variant of the generalized Schur algorithm from <ref> [GKO95] </ref> is the most attractive choice for our purposes here, for the reason, specified next. Property (D). The algorithm in [GKO95] exploits the fact that R satisfies the displacement equation of the form (7.11) with a diagonal matrix D x , to incorporate partial pivoting technique into fast triangulazation procedure for <p> Among a variety of these possibilities a variant of the generalized Schur algorithm from <ref> [GKO95] </ref> is the most attractive choice for our purposes here, for the reason, specified next. Property (D). The algorithm in [GKO95] exploits the fact that R satisfies the displacement equation of the form (7.11) with a diagonal matrix D x , to incorporate partial pivoting technique into fast triangulazation procedure for R ( without increasing the overall complexity O (n 2 ) of the algorithm ). <p> G-PT1. Computing the entries of the matrices on the right-hand side of (8.1). (a) Triangular factorization of R. Compute in O (ffn 2 ) flops the triangular factorization R = P LU of the permuted version of R, using the variant of <ref> [GKO95] </ref> of the generalized Schur algorithm, incorporating partial pivoting. (b) Solving linear systems (7.13). This step uses the standard forward and back-sub stitution technique, and it requires performing O (ffn 2 ) flops. G-PT2. Forming the inverse.
Reference: [GO94a] <author> I.Gohberg, and V.Olshevsky, </author> <title> Fast inversion of Chebyshev-Vandermonde matrices, </title> <journal> Nu-merische Mathematik, </journal> <volume> 67, No. 1 : 71 - 92 (1994). </volume>
Reference-contexts: 5 2 6 6 I i1 1 1 . . . 3 7 7 ; This formula yields the following algorithm for solving a linear system in (3.1) : 1 By a proper implementation of the step 2.b, this complexity can be further reduced to 5:5n 2 flops, see, e.g., <ref> [GO94a] </ref>, where computing P 0 (x j ) appears as a part of a fast O (n 2 ) algorithm for inversion of Chebyshev-Vandermonde matrices. 2 The important problem of decoding of the widely used Reed-Solomon codes is naturally divided into two parts : (a) determining error locations ( which can <p> Finally note that recently the Traub algorithm was generalized to invert Chebyshev-Vander-monde matrices in <ref> [GO94a] </ref>, and what we call three-term Vandermonde matrices in [CR93]. Now 10 it is clear that both these algorithms are generalizations of the Parker rather than the Traub scheme. <p> A similar explanation for the form of the Gohberg-Olshevsky formulas <ref> [GO94a] </ref> for inverses of Chebyshev-Vandermonde matrices was given in [KO95] later.
Reference: [GO94b] <author> I.Gohberg and V.Olshevsky, </author> <title> Complexity of multiplication with vectors for structured matrices, </title> <journal> Linear Algebra Appl., </journal> <volume> 202 (1994), 163 - 192. </volume> <pages> 19 </pages>
Reference-contexts: here it will be more convenient to exploit the displacement operator r fD 1 x ;Z T 0 g () : C nfin ! C nfin , defined by r fD 1 0 g (R) = D 1 0 ; (7.3) which slightly differs from the ones used in [HR84], <ref> [GO94b] </ref>, [GKO95]. Here D x = diag (x 1 ; x 2 ; :::; x n ) and Z 0 stands for the lower shift matrix. <p> This fact can be used to formulate its "displacement" interpretation and generalization, using the so-called '-cyclic displacement operator r fD 1 ;Z T ' g (R) = D 1 R R Z T introduced for Vandermonde-like matrices in <ref> [GO94b] </ref>. Here Z ' = Z 0 + 'e 1 e T n is the '-circulant lower shift matrix. The most general inversion formulas for polynomial Vandermonde-like matrices appeared in [KO94]. 8 The generalized Parker-Traub algorithm 8.1. Properties (A) - (D).
Reference: [GO94c] <author> I.Gohberg and V.Olshevsky, </author> <title> Fast state space algorithms for matrix Nehari and Nehari--Takagi interpolation problems, Integral Equations and Operator Theory, </title> <journal> 20, </journal> <volume> No. 1 (1994), 44 - 83. </volume>
Reference-contexts: The entries of the matrices on the right-hand side of (7.12) are obtained via solving 2ff linear systems (7.13) with a Vandermonde-like coefficient matrix R. These systems can be solved in O (ffn 2 ) flops by using a appropriate form of the generalized Schur algorithm [KS92], <ref> [GO94c] </ref>, [GKO95], [KS95]; or by many Levinson-type algorithms, see, e.g., [HR84], [GKKL87], to mention just a few. The use of any of these algorithms allows one fast computing the entries of the matrices on the right-hand side of (7.12), and thus extends the property (B) to Vandermonde-like matrices.
Reference: [GO94d] <author> I.Gohberg and V.Olshevsky, </author> <title> sl Fast algorithms with preprocessing for matrix-vector multiplication problems, </title> <journal> Journal of Complexity, </journal> <volume> 10, </volume> <year> 1994. </year>
Reference-contexts: In the next section we use (7.12) to derive fast O (n 2 ) algorithm for inversion of Vandermonde-like matrices. 7.5. '-cyclic displacement. Here we may also remark that in <ref> [GO94d] </ref> another inversion formula V (x) 1 = 6 6 6 4 'a 2 . . . a 1 . . . 'a n1 . . . a n2 3 7 7 7 V (x) T diag ([ 1 k ) k=1 ); (7.14) was presented for ordinary Vandermonde matrices.
Reference: [Hig87] <author> N.Higham, </author> <title> Error analysis of the Bjorck-Pereyra algorithms for solving Vandermonde systems, </title> <journal> Numerische mathematic, </journal> <volume> 50 (1987), 613 - 632. </volume>
Reference-contexts: The latter O (n 3 ) scheme is no longer fast. But, for the special case of positive and monotonically ordered points 0 &lt; x 1 &lt; x 2 &lt; ::: &lt; x n ; (0.3) an error analysis of <ref> [Hig87] </ref> implies the following favorable bound : j ^ V (x) 1 V (x) 1 j 5nujV (x) 1 j + O (u 2 ): (0.4) Here ^ V (x) 1 stands for the inverse matrix computed by the Bjorck-Pereyra algorithm, u is the machine precision, and the operation of taking <p> In <ref> [Hig87] </ref> Higham used his pleasing bound (0.4) to argue that the fast O (n 2 ) Traub algorithm is inaccurate, whereas the slow O (n 3 ) Bjorck-Pereyra algorithm is the other way around. <p> In <ref> [Hig87] </ref> Higham analyzed Vandermonde matrices with positive and monotonically ordered points, 0 &lt; x 1 &lt; x 2 &lt; ::: &lt; x n ; (4.1) and showed that ( for this specific subclass ) the Bjorck-Pereyra algorithm computes the inverse matrix ^ V (x) 1 so that the error is as <p> The latter bound was used in <ref> [Hig87] </ref> to compare the Traub and the Bjorck-Pereyra algorithms, and it was pointed out there that (4.2) " shows that contrary to what one might expect, V (x) 1 can be computed with high relative accuracy". <p> Thus, the Parker variant of the Parker-Traub algorithm is also subject to the above Higham's remark, saying that a result of the form (4.2) will not hold for the Parker algorithm as well. Summarizing, the arguments of <ref> [Hig87] </ref> suggest that the slow O (n 3 ) Bjorck-Pereyra algorithm is accurate, whereas the the fast O (n 2 ) Parker-Traub inversion algorithm is the other way around 4 . <p> 2e-07 30 6e+18 3e+27 5e-14 1e+00 1e+00 2e-04 7e-07 7e-07 7e-07 2e-05 7e-07 45 7e+18 3e+42 4e-11 1e+00 1e+00 Inf Inf Inf Inf Inf Inf This is the most favorable for the Bjorck-Pereyra algorithm case of positive, monotonically ordered points x k and sign-interchanging right-hand side, and as shown in <ref> [Hig87] </ref>, the Bjorck-Pereyra algorithm is guaranteed to compute in this case a remarkably accurate solution ^a : j^a aj 5nu jaj + O (u 2 ): (6.1) Table 4 demonstrates that the accuracy of the Bjorck-Pereyra algorithm, combined with monotonic ordering, is indeed compatible with the remarkable bound in (6.1).
Reference: [Hig90] <author> N.Higham, </author> " <title> Stability analysis of algorithms for solving confluent Vandermonde-like systems," </title> <journal> SIAM J. Matrix Anal. Appl., </journal> <volume> 11(1) (1990), </volume> <pages> 23-41. </pages>
Reference-contexts: The points x i were reordered so that jx 1 j = max jx k j; and j=1 kln j=1 the latter ordering is related to Leja work on interpolation, see, e.g., [R90] and references therein. In <ref> [Hig90] </ref> Higham showed how to reorder x k so that (5.1) holds, using only n 2 flops; thus incorporating the Leja ordering will not slow down any fast O (n 2 ) algorithm. Moreover, it was shown in [Hig90] that (5.1) mimics a row permutation of V (x), which would be <p> In <ref> [Hig90] </ref> Higham showed how to reorder x k so that (5.1) holds, using only n 2 flops; thus incorporating the Leja ordering will not slow down any fast O (n 2 ) algorithm. Moreover, it was shown in [Hig90] that (5.1) mimics a row permutation of V (x), which would be obtained by applying to V (x) of partial pivoting technique. This fact will be used in section 7, where we shall extend the Parker-Traub algorithm with partial pivoting to invert the more general class of Vandermonde-like matrices.
Reference: [HR84] <author> G.Heinig and K.Rost, </author> <title> Algebraic methods for Toeplitz-like matrices and operators, </title> <journal> Operator Theory, </journal> <volume> vol. 13, </volume> <publisher> Birkauser Verlag, </publisher> <address> Basel, </address> <year> 1984. </year>
Reference-contexts: In particular Heinig and Rost observed in <ref> [HR84] </ref> that Vandermonde matrices are transformed to rank-one matrices by a suitable displacement operator, and used this fact to carry over many results to more general Vandermonde-like matrices, whose formal definition can be found in the next subsection. <p> purposes here it will be more convenient to exploit the displacement operator r fD 1 x ;Z T 0 g () : C nfin ! C nfin , defined by r fD 1 0 g (R) = D 1 0 ; (7.3) which slightly differs from the ones used in <ref> [HR84] </ref>, [GO94b], [GKO95]. Here D x = diag (x 1 ; x 2 ; :::; x n ) and Z 0 stands for the lower shift matrix. <p> diag ( h (m) i ); (7.12) where a m = h (m) i ; c m = c i 1in are determined from the 2ff linear systems R a m = ' m ; R T D 1 A different inversion formula for Vandermonde-like matrices was obtained earlier in <ref> [HR84, Theorem II-2.5] </ref>. Heinig and Rost did not use their formula to derive an inversion algorithm for Vandermonde-like matrix R. <p> Heinig and Rost did not use their formula to derive an inversion algorithm for Vandermonde-like matrix R. Instead, they gave in <ref> [HR84, Theorem II-2.6] </ref> a recursion for the rows of some auxiliary matrix P , then the entries of the inverse matrix are obtained by computing the matrix product R 1 := V (x) 1 P . <p> Instead, they gave in [HR84, Theorem II-2.6] a recursion for the rows of some auxiliary matrix P , then the entries of the inverse matrix are obtained by computing the matrix product R 1 := V (x) 1 P . The latter procedure of <ref> [HR84] </ref> does not seem to be related to the Parker-Traub algorithm, and moreover it is not fast, requiring O (n 3 ) flops. In the next section we use (7.12) to derive fast O (n 2 ) algorithm for inversion of Vandermonde-like matrices. 7.5. '-cyclic displacement. <p> These systems can be solved in O (ffn 2 ) flops by using a appropriate form of the generalized Schur algorithm [KS92], [GO94c], [GKO95], [KS95]; or by many Levinson-type algorithms, see, e.g., <ref> [HR84] </ref>, [GKKL87], to mention just a few. The use of any of these algorithms allows one fast computing the entries of the matrices on the right-hand side of (7.12), and thus extends the property (B) to Vandermonde-like matrices.
Reference: [Kauf69] <author> I.Kaufman, </author> <title> The inversion of the Vandermonde matrix and the transformation to the Jordan canonical form, </title> <journal> IEEE Trans. on Automatic Control, </journal> <volume> 14(1969), 774 - 777. </volume>
Reference-contexts: The Parker algorithm. The Traub inversion algorithm of [T66] was several times independently derived in the engineering and mathematical literature, and several variants of this algorithm can be found in [P64], [Wetz65], [Forn66] and <ref> [Kauf69] </ref>. <p> Interestingly, due to the importance for applications, the fast Parker-Traub algorithm was often rederived in the engineering literature, see, for example, [Wertz65], [Forn66] 2 , and <ref> [Kauf69] </ref>. We shall demonstrate by computed examples in Sections 5, 6 that the Parker variant of inversion algorithm demonstrates in practice a very satisfactory numerical performance.
Reference: [K32] <author> G. Kowalewski, </author> <title> Interpolation und genaherte Quadratur, </title> <publisher> Teubner, </publisher> <address> Berlin, </address> <year> 1932. </year>
Reference-contexts: V 1 (x) = 6 6 4 l 1;1 l 1;2 l 1;n . . . l n1;1 l n1;2 l n1;n 7 7 5 The description (2.2) can be found in <ref> [K32] </ref>, and later it was often rediscovered by many authors, see, e.g., the remarks in [T66]. In particular, Parker rederived in [P64] the formula (2.2) and, anticipating the Traub algorithm, observed that it suggests an efficient inversion procedure for the Vandermonde matrix.
Reference: [KKM79] <author> T.Kailath, S.Kung and M.Morf, </author> <title> Displacement ranks of matrices and linear equations, </title> <journal> J. Math. Anal. and Appl., </journal> <volume> 68 (1979), </volume> <pages> 395-407. </pages>
Reference-contexts: Therefore the Parker-Traub algorithm can be extended to invert more general Vandermonde-like matrices, naturally suggested by the concept of displacement. 7.2. Displacement structure. The displacement structure theory was started by T.Kailath and his coauthors in <ref> [KKM79] </ref>, where it was first applied to the study of Toeplitz matrices. <p> Lemmas 7.1 and 7.2 are the counterparts of the results on Toeplitz-like matrices in <ref> [KKM79] </ref>, which were used by T.Kailath and his coauthors to explain the form of the Gohberg-Semencul formula for inversion of Toeplitz matrices, and to obtain its generalization for the more general Toeplitz-like matrices. <p> A similar explanation for the form of the Gohberg-Olshevsky formulas [GO94a] for inverses of Chebyshev-Vandermonde matrices was given in [KO95] later. In the next subsection we follow the pattern of arguments of <ref> [KKM79] </ref>, [KO95] to explain the form of the Traub inversion formula (7.1), and to obtain its generalization for Vandermonde-like matrices, thus showing that the latter class also has the property (A). 7.4. Inversion formula for Vandermonde-like matrices.
Reference: [KS92] <author> T. Kailath and A.H.Sayed, </author> <title> Fast algorithms for generalized displacement structures, </title> <booktitle> in Recent advances in mathematical theory of systems, control, networks and signal processing II, Proc. of the MTNS-91 (H.Kimura, </booktitle> <editor> S.Kodama, Eds.), </editor> <publisher> Mita Press, </publisher> <address> Japan, </address> <year> 1992, </year> <pages> 27 - 32. </pages>
Reference-contexts: The entries of the matrices on the right-hand side of (7.12) are obtained via solving 2ff linear systems (7.13) with a Vandermonde-like coefficient matrix R. These systems can be solved in O (ffn 2 ) flops by using a appropriate form of the generalized Schur algorithm <ref> [KS92] </ref>, [GO94c], [GKO95], [KS95]; or by many Levinson-type algorithms, see, e.g., [HR84], [GKKL87], to mention just a few. The use of any of these algorithms allows one fast computing the entries of the matrices on the right-hand side of (7.12), and thus extends the property (B) to Vandermonde-like matrices.
Reference: [KS95] <author> T. Kailath and A.H.Sayed, </author> <title> Displacement structure : theory and applications, </title> <journal> SIAM Review, </journal> <volume> 37 No.3 (1995), </volume> <pages> 297-386. </pages>
Reference-contexts: Displacement structure. The concept of displacement structure was first introduced by T.Kailath and his co-authors in [KKM78], and later it was much studied and generalized, see, e.g., recent review <ref> [KS95] </ref> for historical remarks, list of applications and further references. This approach provides a unified method for the design of fast algorithms for various classes of structured matrices. <p> Later it has been realized that the concept of displacement suggests a unified approach to the study of Hankel, Toeplitz-plus-Hankel, Vandermonde, Chebyshev-Vandermonde, Cauchy, Pick matrices, Bezoutians, and many other classes of structured matrices, see, e.g., recent review <ref> [KS95] </ref> for historical remarks, list of applications and further references. <p> The entries of the matrices on the right-hand side of (7.12) are obtained via solving 2ff linear systems (7.13) with a Vandermonde-like coefficient matrix R. These systems can be solved in O (ffn 2 ) flops by using a appropriate form of the generalized Schur algorithm [KS92], [GO94c], [GKO95], <ref> [KS95] </ref>; or by many Levinson-type algorithms, see, e.g., [HR84], [GKKL87], to mention just a few. The use of any of these algorithms allows one fast computing the entries of the matrices on the right-hand side of (7.12), and thus extends the property (B) to Vandermonde-like matrices.
Reference: [KO94] <author> T.Kailath and V.Olshevsky, </author> <title> Displacement structure approach to polynomial Vander-monde and related matrices, </title> <year> 1994. </year>
Reference-contexts: Here Z ' = Z 0 + 'e 1 e T n is the '-circulant lower shift matrix. The most general inversion formulas for polynomial Vandermonde-like matrices appeared in <ref> [KO94] </ref>. 8 The generalized Parker-Traub algorithm 8.1. Properties (A) - (D).
Reference: [KO95] <author> T.Kailath and V.Olshevsky, </author> <title> Displacement structure approach to Chebyshev-Vander-monde and related matrices, Integral Equations and Operator Theory, </title> <booktitle> 22 (1995), </booktitle> <volume> 65 - 92. </volume>
Reference-contexts: A similar explanation for the form of the Gohberg-Olshevsky formulas [GO94a] for inverses of Chebyshev-Vandermonde matrices was given in <ref> [KO95] </ref> later. In the next subsection we follow the pattern of arguments of [KKM79], [KO95] to explain the form of the Traub inversion formula (7.1), and to obtain its generalization for Vandermonde-like matrices, thus showing that the latter class also has the property (A). 7.4. Inversion formula for Vandermonde-like matrices. <p> A similar explanation for the form of the Gohberg-Olshevsky formulas [GO94a] for inverses of Chebyshev-Vandermonde matrices was given in <ref> [KO95] </ref> later. In the next subsection we follow the pattern of arguments of [KKM79], [KO95] to explain the form of the Traub inversion formula (7.1), and to obtain its generalization for Vandermonde-like matrices, thus showing that the latter class also has the property (A). 7.4. Inversion formula for Vandermonde-like matrices.
Reference: [LAK86] <author> H.Lev-Ari and T.Kailath, </author> <title> Triangular factorization of structured matrices, in I.Schur methods in operator theory and signal processing, Operator Theory: </title> <booktitle> Advances and Applications, vol 18 (edited by I.Gohberg), </booktitle> <publisher> Birkhauser Verlag, </publisher> <address> Basel, </address> <year> 1986. </year>
Reference: [LT85] <author> P.Lancaster and M.Tismenetzky, </author> <title> Theory of matrices with applications, 2nd ed., </title> <publisher> Academic press, </publisher> <address> Orlando, </address> <year> 1985. </year>
Reference-contexts: Proof. The spectra of matrices D 1 x and Z T 0 have no intersection, and hence there is only one matrix R satisfying the Sylvester equation (7.5), see e.g <ref> [LT85] </ref>.
Reference: [P64] <author> F.Parker, </author> <title> Inverses of Vandermonde matrices, </title> <journal> Amer. Math. Monthly, </journal> <volume> 71 (1964), 410 - 411. </volume>
Reference-contexts: The Parker algorithm. The Traub inversion algorithm of [T66] was several times independently derived in the engineering and mathematical literature, and several variants of this algorithm can be found in <ref> [P64] </ref>, [Wetz65], [Forn66] and [Kauf69]. Interestingly, the Parker algorithm of [P64] differs from the Traub algorithm only in one nonessential detail ( see, e.g., the main text below ), and hence it is also subject to the Higham's comment noted above, implying that the result of the form (0.4) may not <p> The Parker algorithm. The Traub inversion algorithm of [T66] was several times independently derived in the engineering and mathematical literature, and several variants of this algorithm can be found in <ref> [P64] </ref>, [Wetz65], [Forn66] and [Kauf69]. Interestingly, the Parker algorithm of [P64] differs from the Traub algorithm only in one nonessential detail ( see, e.g., the main text below ), and hence it is also subject to the Higham's comment noted above, implying that the result of the form (0.4) may not hold for the Parker variant as well. <p> As we shall see in Sections 5, 6, a fast algorithm described next, exhibits much better numerical properties. 4 2 The Parker algorithm We discovered that earlier than [T66], Parker described in <ref> [P64] </ref> an inversion procedure, which is based on another variant of the inversion formula described below. <p> In particular, Parker rederived in <ref> [P64] </ref> the formula (2.2) and, anticipating the Traub algorithm, observed that it suggests an efficient inversion procedure for the Vandermonde matrix. Parker's arguments are based on the following well-known identities.
Reference: [R90] <author> L.Reichel, </author> <title> Newton interpolation at Leja points, </title> <journal> BIT, </journal> <volume> 30(1990), 23 - 41. </volume>
Reference-contexts: The points x i were reordered so that jx 1 j = max jx k j; and j=1 kln j=1 the latter ordering is related to Leja work on interpolation, see, e.g., <ref> [R90] </ref> and references therein. In [Hig90] Higham showed how to reorder x k so that (5.1) holds, using only n 2 flops; thus incorporating the Leja ordering will not slow down any fast O (n 2 ) algorithm.
Reference: [T66] <author> J. Traub, </author> <title> Associated polynomials and uniform methods for the solution of linear problems, </title> <journal> SIAM Review, </journal> <volume> 8, No. 3 (1966), 277 - 301. </volume>
Reference-contexts: In this paper we compare two well-known methods that exploit the special structure in (0.1) : the Traub and the Bjorck-Pereyra algorithms. 0.1. The Traub algorithm. The algorithm, proposed by Traub in <ref> [T66] </ref>, is fast in the sense that it computes all n 2 entries of V (x) 1 in only 6n 2 floating point operations ( flops ), which compares favorably with the complexity O (n 3 ) flops of general purpose algorithms. <p> Aviv University, Ramat Aviv 69978, Israel; E-mail : gohberg@math.tau.ac.il y Information Systems Laboratory, Department of Electrical Engineering, Stanford University, Stanford CA 94305-4055, U.S.A.; E-mail : olshevsk@isl.stanford.edu; WWW : http://www-isl.stanford.edu/people/olshevsk 1 time this algorithm is widely regarded as being numerically unstable, and the first indication of this can be found in <ref> [T66] </ref>. 0.2. The Bjorck-Pereyra algorithm. In [BP70] Bjorck and Pereyra showed how to solve a Vandermonde linear system of the form V (x) a = f; f 2 C n (0.2) in only 5n 2 =2 flops. <p> The results of our numerical experiments indicate that the algorithm, described next, satisfies these requirements; thus one does not need to sacrifice the accuracy to achieve speed. 0.3. The Parker algorithm. The Traub inversion algorithm of <ref> [T66] </ref> was several times independently derived in the engineering and mathematical literature, and several variants of this algorithm can be found in [P64], [Wetz65], [Forn66] and [Kauf69]. <p> This association allowed us to carry over in Section 8 this fast inversion algorithm to the wider class of Vandermonde-like matrices. 0.6. Acknowledgments. It is our pleasure to thank Thomas Kailath for useful discussions. 1 The Traub algorithm In <ref> [T66] </ref> Traub proposed a fast method to compute all n 2 entries of V (x) 1 in only 6n 2 flops. <p> Let P (x) = k=1 n1 X a k x k ; (1.1) be the master polynomial, whose zeros are the nodes of V (x). Following <ref> [T66] </ref>, consider the divided difference P [t; x] = t x and define the polynomials fq k (x)g 0kn with q n (x) = P (x) (1.3) by The polynomials in (1.3) are called the associated polynomials of P (x), or sometimes the Horner polynomials, see, e.g., [T66] for historical remarks. <p> Following <ref> [T66] </ref>, consider the divided difference P [t; x] = t x and define the polynomials fq k (x)g 0kn with q n (x) = P (x) (1.3) by The polynomials in (1.3) are called the associated polynomials of P (x), or sometimes the Horner polynomials, see, e.g., [T66] for historical remarks. <p> As we shall see in Sections 5, 6, a fast algorithm described next, exhibits much better numerical properties. 4 2 The Parker algorithm We discovered that earlier than <ref> [T66] </ref>, Parker described in [P64] an inversion procedure, which is based on another variant of the inversion formula described below. <p> V 1 (x) = 6 6 4 l 1;1 l 1;2 l 1;n . . . l n1;1 l n1;2 l n1;n 7 7 5 The description (2.2) can be found in [K32], and later it was often rediscovered by many authors, see, e.g., the remarks in <ref> [T66] </ref>. In particular, Parker rederived in [P64] the formula (2.2) and, anticipating the Traub algorithm, observed that it suggests an efficient inversion procedure for the Vandermonde matrix. Parker's arguments are based on the following well-known identities. <p> Then Higham turned to the Traub algorithms and wrote : " However <ref> [T66] </ref> does not contain a rounding error analysis, and it can be shown that 7 Traub's O (n 2 ) algorithm must involve subtraction of like-signed numbers, suggesting that a result of the form (4.2 ) will not hold." Let us now recall that the Traub and the Parker schemes are
Reference: [Ty94] <author> E.Tyrtyshnikov, </author> <title> How bad are Hankel matrices, </title> <journal> Numerische Mathematik, </journal> <volume> 67, No. 2 (1994), 261 - 269. </volume>
Reference-contexts: 0 Introduction We first consider the numerical inversion of Vandermonde matrices, V (x) = 6 6 4 1 2 . . . 1 x n x n1 3 7 7 ; where x = (x i ) n1 i=0 2 C n : (0.1) Such matrices are ill-conditioned [GI88], <ref> [Ty94] </ref>, and standard numerically stable methods in general fail to compute the entries of their inverses accurately. The use of the structure of V (x) may allow one to avoid the above difficulty, and to achieve high relative accuracy.
Reference: [Wertz65] <author> H.J.Wertz, </author> <title> On the numerical inversion of a recurrent problem : the Vandermonde matrix, </title> <journal> IEEE Trans. on Automatic Control, AC-10, </journal> <volume> 4(1965), 492. </volume> <pages> 20 </pages>
Reference-contexts: Interestingly, due to the importance for applications, the fast Parker-Traub algorithm was often rederived in the engineering literature, see, for example, <ref> [Wertz65] </ref>, [Forn66] 2 , and [Kauf69]. We shall demonstrate by computed examples in Sections 5, 6 that the Parker variant of inversion algorithm demonstrates in practice a very satisfactory numerical performance.
References-found: 31

