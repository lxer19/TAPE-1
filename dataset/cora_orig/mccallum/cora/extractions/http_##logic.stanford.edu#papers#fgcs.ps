URL: http://logic.stanford.edu/papers/fgcs.ps
Refering-URL: http://logic.stanford.edu/papers/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: genesereth@cs.stanford.edu  singh@cs.stanford.edu  syed@cit.stanford.edu  
Title: A Distributed and Anonymous Knowledge Sharing Approach to Software Interoperation  
Author: Michael R. Genesereth Narinder P. Singh Mustafa A. Syed 
Date: 15 th November, 1994  
Address: Stanford University  Stanford University  Stanford University  
Affiliation: Computer Science Department  Computer Science Department  Center for Information Technology  
Abstract: The support for automatic interoperation of software components can reduce cost and provide greater functionality. This paper describes a novel approach to software interoperation based on specification sharing. Software components, called agents, provide machine processable descriptions of their capabilities and needs. Agents can be realized in different programming languages, and they can run in different processes on different machines. In addition, agents can be dynamic at run time agents can join the system or leave. The system uses the declarative agent specifications to automatically coordinate their interoperation. The architecture supports anonymous interoperation of agents, where each agent has the illusion that the capabilities of all the other agents are provided directly by the system. The distinctive feature of this approach is the expressiveness of the declarative specification language, which enables sophisticated agent interoperation, e.g., decomposing complex requests into a collection of simpler requests, and translating between the interface of a requesting agent and the interface of an agent that can service the request. The agent-based interoperation scheme relies on a shared vocabulary, and it is our thesis that more effective software interoperation is made possible by agreeing to a shared declarative vocabulary, than by agreeing to shared programming constructs (e.g., subroutine names and their argument types). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> The Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <booktitle> Revision 1.1 91.12.1, </booktitle> <month> December, </month> <year> 1991. </year>
Reference: [2] <author> Cutkosky, M. et al. </author> <title> "PACT: An Experiment in Integrated Engineering Systems," </title> <journal> Computer 26, </journal> <volume> 1(1993), </volume> <month> 28-37. </month> <title> 3 Additional information about the Federation Architecture, including software, can be obtained from Mosaic using the URL http://logic.stanford.edu/sharing.html. </title>
Reference-contexts: We are currently examining extensions to the Federation Architecture to incorporate some of these capabilities. 7 Conclusion The agent-based approach to software interoperation described here has been developed into a practical technology and has been put to use in a variety of applications necessitating interoperation (e.g. concurrent engineering <ref> [2] </ref>, database integration, and so forth) and is being used at multiple institutions in the construction of software for the national information infrastructure. 3 In order to provide these capabilities, current implementations of facilitators take advantage of automated reasoning technology developed in the Artificial Intelligence and Database communities.
Reference: [3] <author> Finin, T., and Wiederhold, G. </author> <title> "An Overview of KQML: A Knowledge Query and Manipulation Language," </title> <institution> available through the Stanford University Computer Science Department, </institution> <year> 1991. </year>
Reference-contexts: The efficiency of communication can be enhanced by providing a linguistic layer in which context is taken into account. This is the function of KQML. As used in ACL, each KQML message is a list of components enclosed in matching parentheses <ref> [3] </ref>. The first word in the list indicates the type of communication. The subsequent entries are KIF expressions appropriate to that communication, in effect the "arguments".
Reference: [4] <author> Genesereth, M. R., Fikes, R. E. et al. </author> " <title> Knowledge Interchange Format Version 3 Reference Manual," </title> <institution> Logic-92-1, Stanford University Logic Group, </institution> <year> 1992. </year>
Reference-contexts: A program can use whichever ontology is most convenient. The formal definitions of the words associated with any one of these ontologies can then be used by system programs in translating messages using one ontology into messages using other ontologies. 3.1 KIF KIF <ref> [4] </ref> is a prefix version of first order predicate calculus with various extensions to enhance its expressiveness. First and foremost, KIF provides for the expression of simple data. For example, the sentences shown below encode 3 tuples in a personnel database.
Reference: [5] <author> Genesereth, M. R. and Ketchpel, S. </author> <title> "Software Agents," </title> <journal> Communications of the ACM, </journal> <volume> Vol 37, no. 7, </volume> <month> July </month> <year> 1994, </year> <pages> pp. 48-53. </pages>
Reference: [6] <author> Genesereth, M. R. and Singh, N. </author> <title> "A Knowledge Sharing Approach to Software Interoperation," Logic Group, </title> <institution> Computer Science Department, Stanford University, </institution> <year> 1993. </year>
Reference: [7] <author> Genesereth, M. R., and Singh, N. </author> <title> "Epilog 1.0 for Lisp," </title> <note> available from Mosaic with the URL http://Logic.Stanford.edu/sharing/programs/epilog/documentation/. </note>
Reference-contexts: Facilitators use automated inference to reason about agent specifications and application specific facts. The inference procedure, based on model-elimination, is an extension of the familiar backward chaining inference rule used in Prolog <ref> [7, 15] </ref>. The extensions permit the inference procedure to be complete for first-order logic. For a request, the facilitator uses backward inference to find an answer.
Reference: [8] <author> Gymtrasiewicz, P. J., Durfee, E. H. and Wehe, D. K. </author> <title> "A Decision-Theoretic Approach to Coordinating Multiagent Interactions," </title> <booktitle> in Proceedings of the Twelfth International Joint Conference On Artificial Intelligence (Sydney, Australia 1991). International Joint Conferences on Artificial Intelligence, </booktitle> <publisher> Inc. </publisher> <pages> pp. 62-68. </pages>
Reference-contexts: These problems mark the intersection of economics and distributed artificial intelligence (DAI). A number of researchers in DAI are using tools developed in economics and game theory to evaluate multi-agent interactions <ref> [17, 8] </ref>.
Reference: [9] <author> Gruber, T. "Ontolingua: </author> <title> A Mechanism to Support Portable Ontologies," </title> <institution> KSL-91-66, Stanford Knowledge Systems Laboratory, </institution> <year> 1991. </year>
Reference-contexts: An ACL message is a KQML expression in which the "arguments" are terms or sentences in KIF formed from words in the ACL vocabulary. The vocabulary of ACL is listed in a large and open-ended dictionary of words appropriate to common application areas <ref> [9] </ref>. Each word in the dictionary has an English description for use by humans in understanding the meaning of the word; and each word has formal annotations (written in KIF) for use by programs.
Reference: [10] <author> Korf, R. E. </author> <title> "Linear-space Best-first Search: Summary of Results," </title> <booktitle> in Proceedings of the Tenth National Conference on Artificial Intelligence (AAAI-92), </booktitle> <pages> pages 533-538, </pages> <address> Menlo Park, California, 1992. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: In addition, the facilitator controls the inference process by selecting the cheapest agent to handle a request (conjunct and/or disjunct ordering), and avoids infinite loops (with identical-ancestor pruning and/or iterative-deepening) <ref> [14, 10] </ref>. It is possible to guarantee desirable performance properties by placing restrictions on the rules a facilitator accepts. For example, if all facts are ground atomics (similar to IDL in CORBA), then inference is simplified to database lookup, and the cost is logarithmic in the number of facts.
Reference: [11] <author> Neches, R., Fikes, R., Finin, T., Gruber, T., Patil, R., Senator, T., and Swartout, W. </author> <title> "Enabling Technology for Knowledge Sharing," </title> <journal> AI Magazine 12, </journal> <volume> 3(1991), </volume> <month> 36-56. </month> <title> [12] "Object Linking and Embedding," Microsoft Technical Backgrounder OLE 2.0. [13] "OpenDoc Technical Summary," The OpenDoc Design Team, Apple Computers, </title> <address> Cupertino, Cali-fornia, </address> <month> October, </month> <year> 1993. </year>
Reference-contexts: At the same time, the language must be reasonably compact; it must ensure that communication is possible without excessive growth over specialized languages. As an exploration of this approach to communication, researchers in the ARPA Knowledge Sharing Effort <ref> [11] </ref> have defined the components of ACL that satisfy these needs. ACL can best be thought of as consisting of three parts its vocabulary, an "inner language" called KIF (short for Knowledge Interchange Format), and an "outer" language called KQML (short for Knowledge Query and Manipulation Language).
Reference: [14] <author> Smith, D. E., Genesereth, M. R., and Ginsberg, M. L. </author> <title> "Controlling Recursive Inference," </title> <journal> Artificial Intelligence, </journal> <volume> 30 (3): </volume> <pages> 343-389, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: In addition, the facilitator controls the inference process by selecting the cheapest agent to handle a request (conjunct and/or disjunct ordering), and avoids infinite loops (with identical-ancestor pruning and/or iterative-deepening) <ref> [14, 10] </ref>. It is possible to guarantee desirable performance properties by placing restrictions on the rules a facilitator accepts. For example, if all facts are ground atomics (similar to IDL in CORBA), then inference is simplified to database lookup, and the cost is logarithmic in the number of facts.
Reference: [15] <author> Stickel, M. E. </author> <title> "A Prolog Technology Theorem Prover: A New Exposition and Implementation in Prolog," </title> <type> Technical Note 464, </type> <institution> SRI International, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: Facilitators use automated inference to reason about agent specifications and application specific facts. The inference procedure, based on model-elimination, is an extension of the familiar backward chaining inference rule used in Prolog <ref> [7, 15] </ref>. The extensions permit the inference procedure to be complete for first-order logic. For a request, the facilitator uses backward inference to find an answer.
Reference: [16] <author> Wiederhold, G. </author> <title> "The Architecture of Future Information Systems, </title> <institution> Stanford University Computer Science Department," </institution> <year> 1989. </year>
Reference-contexts: The agents agree to service the requests sent by the facilitators, and in return, the facilitators manage the requests posted by the agents. 1 The concept of a facilitator is a generalization of mediators, as described in <ref> [16] </ref>. 4.1 Facilitators Facilitators are the system-provided agents that coordinate the activities of the other agents in the Federation Architecture. The network of facilitators keep each other informed of the agents connected to them and the facts communicated by the agents.
Reference: [17] <author> Zlotkin, G. </author> <title> "Mechanisms for Automated Negotiation among Autonomous Agents," </title> <type> Ph.D. Dissertation. </type> <institution> Hebrew University. </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: These problems mark the intersection of economics and distributed artificial intelligence (DAI). A number of researchers in DAI are using tools developed in economics and game theory to evaluate multi-agent interactions <ref> [17, 8] </ref>.
References-found: 15

