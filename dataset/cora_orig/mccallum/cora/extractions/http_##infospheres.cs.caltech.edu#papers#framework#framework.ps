URL: http://infospheres.cs.caltech.edu/papers/framework/framework.ps
Refering-URL: http://infospheres.cs.caltech.edu/papers/index.html
Root-URL: http://www.cs.caltech.edu
Email: infospheres@cs.caltech.edu  
Title: A Framework for Structured Distributed Object Computing  
Author: K. Mani Chandy, Joseph Kiniry, Adam Rifkin, and Daniel Zimmerman 
Web: http://www.infospheres.caltech.edu/  
Address: Pasadena, California 91125  
Affiliation: Computer Science 256-80 California Institute of Technology  
Abstract: This paper presents a four-faceted framework for distributed applications that use worldwide networks connecting large numbers of people, software tools, monitoring instruments, and control devices. We describe a class of applications, identify requirements for a framework that supports these applications, and propose a design fulfilling those requirements. We discuss some initial experiences using the framework, and compare our design with other approaches. fl The Caltech Infospheres Project is sponsored by the Air Force Office of Scientific Research under grant AFOSR F49620-94-1-0244, by the CISE directorate of the National Science Foundation under Problem Solving Environments grant CCR-9527130, by the Center for Research in Parallel Computing under grant NSF CCR-9120008, by the Advanced Research Projects Agency, and by Parasoft, Inc. and Novell, Inc. This paper is partially based upon work supported under a National Science Foundation Graduate Fellowship. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Abramson, R. Sosic, J. Giddy, and B. Hall, `Nimrod: </author> <title> A Tool for Performing Parameterised Simulations Using Distribu ted Workstations', </title> <booktitle> Proceedings of the Fourth IEEE Symposium on High Performance Distributed Computing, </booktitle> <year> 1995. </year>
Reference-contexts: Furthermore, the scientist wants resources to be scheduled automatically as a service of the appropriate software, whether with or without the inclusion of specific supplemental information such as the times the user is available to perform the experiment. Traditional Metacomputing: Central Scheduling. Traditional metacomputing resource allocation <ref> [23, 1] </ref> uses a central authority for scheduling, usually for efficiency.
Reference: [2] <author> A. Adami and C. T. Brown, </author> <booktitle> `Evolutionary Learning in the 2D Artificial Life System Avida', Artificial Life IV: Proceedings of the Fourth International Workshop on the Synthesis and Simulation of Living Systems, </booktitle> <year> 1994. </year>
Reference-contexts: Several aspects of the Infospheres Infrastructure can assist with such synchronization, including the service mechanism and synchronous message passing. Thus, distributed simulations are efficient and scale well. While there are several software frameworks available for building artificial life simulations <ref> [2, 25] </ref>, few are flexible enough to build arbitrary new scenarios. In many cases, simulations are synchronous, run on a single computer, and the simulation entities must be either entirely passive, completely reactive, or are required to operate in a fixed time quantum.
Reference: [3] <author> D. Arnold, A. Bond, M. Chilvers, and R. Taylor, `Hector: </author> <title> Distributed Objects in Python', </title> <booktitle> Proceedings of the Fourth International Python Conference, </booktitle> <address> Livermore, California, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Hector is a Python-based distributed object framework that provides a communications transparency layer enabling negotiation of communication protocol qualities, comprehensive support services for application objects, and a four-tiered architecture for interaction <ref> [3] </ref>. Aglets provide a Java-based framework for secure Internet agents that are mobile, moving state along with the program components themselves [20]. We differ from these efforts because our emphasis is on reasoning about global compositional distributed systems. Concurrency Frameworks.
Reference: [4] <author> P. Cappello, B. Christiansen, M. F. Ionescu, M. O. Neary, K. E. Schauser, and D. Wu, `Javelin: </author> <title> Internet-Based Parallel Computing Using Java', </title> <booktitle> submitted to Sixth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <year> 1997. </year>
Reference-contexts: Similarly, NPAC at Syracuse seeks to perform High Performance Computing and Communications (HPCC) activities using a Web-enabled concurrent virtual machine [13]. Javelin is a Java-based architecture for writing parallel programs, implemented over Internet hosts, clients, and brokers <ref> [4] </ref>. Legion is a C++-based architecture and object model for providing the illusion of a single virtual machine to users for wide-area parallel processing [16]. Although our framework could be used for metacomputing applications, we provide neither seamless parallelism, nor facilities for developing extremely high-performance appplications.
Reference: [5] <author> C. Catlett and L. </author> <title> Smarr, `Metacomputing', </title> <journal> Communications of the ACM, </journal> <volume> Volume 35, </volume> <pages> Pages 44-52, </pages> <year> 1992. </year>
Reference-contexts: All three resources are essential to the experiment; so, the scientist needs to synchronously lock and use all three distributed resources for the same time period to complete the computing task. The distributed heterogeneous resources together form a networked virtual supercomputer or metacomputer <ref> [5] </ref>. Furthermore, the scientist wants resources to be scheduled automatically as a service of the appropriate software, whether with or without the inclusion of specific supplemental information such as the times the user is available to perform the experiment. Traditional Metacomputing: Central Scheduling.
Reference: [6] <author> K. M. Chandy and J. Misra, </author> <title> Parallel Program Design: A Foundation, </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: Though this paper addresses resources used in metacomputing, our research deals with resources in many distributed applications. A convenient abstraction for such applications represents each indivisible resource by an indivisible token of some color <ref> [6] </ref>; different types of resources have different colors. For instance, a node of an IBM SP2 can be represented as a token of the IBM SP color. Likewise, a room in a hotel can be represented by a token of the hotel color. Our model deals with time explicitly.
Reference: [7] <author> K. M. Chandy, B. Dimitrov, R. Ramamoorthi, and A. Rifkin, </author> <title> `A General Resource Reservation Framework for Scientific Computing', </title> <booktitle> Submitted to the first International Scientific Computing in Object-Oriented Parallel Environments (ISCOPE) Conference, </booktitle> <year> 1997. </year>
Reference-contexts: Contributions of this work. This work represents a general framework for heterogeneous resource reservation. Within this framework, we developed the simple object-oriented Java implementation using Infos-pheres. Specific contributions of this work <ref> [7] </ref> are: * We provide an abstraction for distributed resource management problems that fits many, but not all, applications. Our implementation is suitable for all applications that fit our abstraction. * Our implementation is distributed, and it coordinates multiple resource managers, each with its own policy.
Reference: [8] <author> K. M. Chandy, J. Kiniry, A. Rifkin, and D. Zimmerman, </author> <title> `Webs of Archived Distributed Computations for Asynchronous Collaboration', </title> <journal> Journal of Supercomputing, </journal> <volume> Volume 11(3), </volume> <year> 1997. </year>
Reference-contexts: This implementation using Infospheres showcases the benefits of distributing the task of resource allocation to multiple resource managers. Often in scientific computing, a user needs access to several distributed heterogeneous resources. For instance, consider a scientist conducting a distributed experiment <ref> [8] </ref> that requires a supercomputer in one location, a visualization unit in another location, and a special high quality printer in still another location.
Reference: [9] <author> K. M. Chandy, A. Rifkin, P. A. G. Sivilotti, J. Mandelson, M. Richardson, W. Tanaka, and L. Weis-man, </author> <title> `A World-Wide Distributed Sytem Using Java and the Internet', </title> <booktitle> Proceedings of the Fifth IEEE 28 International Symposium on High Performance Distributed Computing, </booktitle> <address> Syracuse, New York, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: We chose this model for its sim 6 plicity <ref> [9] </ref>. A personal network consists of an arrangement of processes and a set of directed, typed, secure communication channels connecting process output ports to the input ports of other processes; its topology can be represented by a labeled directed graph.
Reference: [10] <author> K. M. Chandy and A. Rifkin, </author> <title> `Systematic Composition of Objects in Distributed Internet Applications: </title> <booktitle> Processes and Sessions', Proceedings of the Thirtieth Hawaii International Conference on System Sciences, </booktitle> <address> Maui, Hawaii, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: Because no valid references to their mailboxes exist, frozen processes cannot participate in sessions. 3.3 Conceptual Model: Sessions Operationally, a session is a task carried out by (the processes in) a personal network <ref> [10] </ref>. It is initiated by a process in the personal network, and is completed when the task has been accomplished. A later session may use the same processes to carry out another task. <p> Moreover, the same process may participate concurrently in sessions initiated by different consortia or task forces. For example, a calendar manager may participate concurrently in sessions determining meeting times for a scout troop and a conference program committee. Our framework allows processes to participate in concurrent sessions <ref> [10] </ref>. A resource may be requested by a session in either exclusive mode or nonexclusive mode. For example, a visualization engine may need to be in exclusive mode for a task: while the task is executing, no other task can access it.
Reference: [11] <author> I. T. Foster and K. M. Chandy", </author> <title> `Fortran M: A Language for Modular Parallel Programming'. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Volume 26, Number 1, </volume> <pages> Pages 24-35, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Concurrency Frameworks. We have considered several previous approaches to concurrent communicating processes in developing our framework. The Communicating Sequential Processes (CSP) model assumes each process is active for the entire duration of the computation [17]. Like Fortran M <ref> [11] </ref>, we implement 26 this model, adding such implementation artifacts as dealing with process setup and removal, and permitting prioritized waits to resolve resource contention.
Reference: [12] <author> I. Foster and C. Kesselman, `Globus: </author> <title> A Metacomputing Infrastructure Toolkit', </title> <journal> International Journal of Supercomputer Applications, </journal> <note> 1997. To appear. </note>
Reference-contexts: A session can negotiate with the underlying communication layer to use the most appropriate process-to-process mechanism. The current framework supports only UDP, but we plan in future releases to support a range of protocols such as TCP and communication layers such as Globus <ref> [12] </ref>. 9 4 Structuring Mechanisms Personal networks and sessions can be used not only as structuring mechanisms, but also for reasoning about the services provided to distributed systems. 4.1 Reasoning About Sessions Consider a consortium of institutions working together on a research project. <p> By contrast, consider the computation needs of users requiring resources managed by different groups in different geographic regions. Scheduling in this case is more complicated because it is impractical for individual sites to "know" global information that would help them to do more efficient scheduling <ref> [12] </ref>. The owner of a set of resources may have resource management policies that are different from those of owners of other resource sets. <p> Our framework efforts are similar to recent metacomputing endeavors in that we use the Internet as a resource for concurrent computations. Globus provides the infrastructure to create networked virtual supercomputers for running applications <ref> [12] </ref>. Similarly, NPAC at Syracuse seeks to perform High Performance Computing and Communications (HPCC) activities using a Web-enabled concurrent virtual machine [13]. Javelin is a Java-based architecture for writing parallel programs, implemented over Internet hosts, clients, and brokers [4].
Reference: [13] <author> G. Fox and W. Furmanski, </author> <title> `Towards Web/Java based High Performance Distributed Computing An Evolving Virtual Machine', </title> <booktitle> Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <address> Syracuse, New York, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: Globus provides the infrastructure to create networked virtual supercomputers for running applications [12]. Similarly, NPAC at Syracuse seeks to perform High Performance Computing and Communications (HPCC) activities using a Web-enabled concurrent virtual machine <ref> [13] </ref>. Javelin is a Java-based architecture for writing parallel programs, implemented over Internet hosts, clients, and brokers [4]. Legion is a C++-based architecture and object model for providing the illusion of a single virtual machine to users for wide-area parallel processing [16].
Reference: [14] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: The students were given a week to design, reason about, and implement their poker-playing processes; we spent approximately the same amount of time specifying those processes and their interactions. In both these cases, patterns helped the programmers develop their code quickly. Patterns encapsulate software solutions to common problems <ref> [14] </ref>, and our framework has incorporated some applications of concurrency patterns in Java [21].
Reference: [15] <author> J. Gray and A. Reuter, </author> <title> Transaction Processing: Concepts and Techniques, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Therefore, one service our framework should provide is the acquisition of locks on distributed objects accessed during a session. A great deal of work exists relating to locking in distributed databases and distributed transaction systems <ref> [15, 24] </ref>. Presently, our framework provides only an exclusive lock on an object, but the framework can be extended to include other types of locks, such as read and write locks. Deadlock Avoidance. If sessions lock objects in an incremental fashion, deadlock can occur.
Reference: [16] <author> A. S. Grimshaw, W. A. Wulf, </author> <title> and the Legion team, `The Legion Vision of a Worldwide Virtual Computer', </title> <journal> Communications of the ACM, </journal> <volume> Volume 40, Number 1, </volume> <pages> Pages 39-45, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: Javelin is a Java-based architecture for writing parallel programs, implemented over Internet hosts, clients, and brokers [4]. Legion is a C++-based architecture and object model for providing the illusion of a single virtual machine to users for wide-area parallel processing <ref> [16] </ref>. Although our framework could be used for metacomputing applications, we provide neither seamless parallelism, nor facilities for developing extremely high-performance appplications.
Reference: [17] <author> C. A. R. Hoare, </author> <title> `Communicating Sequential Processes', </title> <journal> Communications of the ACM, </journal> <volume> Volume 21, Number 8, </volume> <pages> Pages 666-677, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: Concurrency Frameworks. We have considered several previous approaches to concurrent communicating processes in developing our framework. The Communicating Sequential Processes (CSP) model assumes each process is active for the entire duration of the computation <ref> [17] </ref>. Like Fortran M [11], we implement 26 this model, adding such implementation artifacts as dealing with process setup and removal, and permitting prioritized waits to resolve resource contention.
Reference: [18] <author> The Infospheres Research Group, </author> <title> `The Infospheres Infrastructure User's Guide', </title> <type> Technical Report, </type> <institution> Cal-ifornia Institute of Technology, </institution> <year> 1997. </year> <month> 29 </month>
Reference-contexts: Each session of this personal network handles the acquisition, use, and release of resources, processes, and channels for the life of a specific task. Infospheres are discussed in our framework user's guide <ref> [18] </ref>. This paper focuses on the conceptual models for processes, personal networks, and sessions. 3.1 Conceptual Model: Processes Processes are the persistent communicating objects that manage devices and interfaces. In our framework, we call these processes djinns. Process States. A given process can be in one of three states.
Reference: [19] <author> G. E. Krasner S. T. Pope, </author> <title> `A cookbook for using model-view-controller user interface paradigm in smalltalk-80', </title> <journal> Journal of Object-oriented Programming, August/September 1988. </journal> <volume> Vol. 1(3), </volume> <pages> pp. 26-49. </pages>
Reference-contexts: Group-wise simulation control is continually utilized through the use of the Observer class's derivatives, something of a distributed system View (a part of the Model-View-Controller model summarized in <ref> [19] </ref>). For example, suppose we wish to record the weight of all infant chimps through the course of a simulation. An appropriate subclass of Observer is written to either poll the top-most InfantChimp instance for each chimp within its domain's weight.
Reference: [20] <author> D. B. Lange and M. Oshima, </author> <title> Programming Mobile Agents in Java | With the Java Aglet API, </title> <institution> IBM Research, </institution> <year> 1997. </year>
Reference-contexts: Aglets provide a Java-based framework for secure Internet agents that are mobile, moving state along with the program components themselves <ref> [20] </ref>. We differ from these efforts because our emphasis is on reasoning about global compositional distributed systems. Concurrency Frameworks. We have considered several previous approaches to concurrent communicating processes in developing our framework.
Reference: [21] <author> D. Lea, </author> <title> Concurrent Programming in Java: Design Principles and Patterns, </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: In both these cases, patterns helped the programmers develop their code quickly. Patterns encapsulate software solutions to common problems [14], and our framework has incorporated some applications of concurrency patterns in Java <ref> [21] </ref>. Initial experience with our framework has suggested several other patterns, both for collaborations between processes and for state-transition systems. 12 5.1 A General Resource Reservation Framework for Scientific Computing This work makes three contributions for distributed resource allocation in scientific applications.
Reference: [22] <author> D. A. Lifka, M. W. Henderson, and K. Rayl, </author> <title> Users Guide to the Argonne SP Scheduling System, </title> <institution> Argonne National Laboratory Mathematics and Computer Science Division Technical Memorandum, Number ANL/MCS-TM-201, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Traditional Metacomputing: Central Scheduling. Traditional metacomputing resource allocation [23, 1] uses a central authority for scheduling, usually for efficiency. As a simple example, the IBM SP2 employs a scheduling algorithm <ref> [22] </ref> that reduces the wait time of jobs requiring only a few nodes, if these can be scheduled without delaying more computationally intensive jobs. 13 Alternative Approach: Distributed Scheduling. By contrast, consider the computation needs of users requiring resources managed by different groups in different geographic regions.
Reference: [23] <author> M. Litzkow, M. Livney, and M. </author> <title> Mutka, `Condor A Hunter of Idle Workstations', </title> <booktitle> Proceedings of the Eighth International Conference on Distributed Computing Systems, </booktitle> <pages> Pages 104-111, </pages> <year> 1988. </year>
Reference-contexts: Furthermore, the scientist wants resources to be scheduled automatically as a service of the appropriate software, whether with or without the inclusion of specific supplemental information such as the times the user is available to perform the experiment. Traditional Metacomputing: Central Scheduling. Traditional metacomputing resource allocation <ref> [23, 1] </ref> uses a central authority for scheduling, usually for efficiency.
Reference: [24] <author> N. A. Lynch, M. Merritt, W. E. Weihl, and A. Fekete, </author> <title> Atomic Transactions, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Therefore, one service our framework should provide is the acquisition of locks on distributed objects accessed during a session. A great deal of work exists relating to locking in distributed databases and distributed transaction systems <ref> [15, 24] </ref>. Presently, our framework provides only an exclusive lock on an object, but the framework can be extended to include other types of locks, such as read and write locks. Deadlock Avoidance. If sessions lock objects in an incremental fashion, deadlock can occur.
Reference: [25] <author> N. Minar, R. Burkhart, C. Langton, and M. Askenzai, </author> <title> The Swarm Simulation System: A Toolkit for Building Multi-Agent Simulations, </title> <institution> Santa Fe Institute, </institution> <year> 1996. </year>
Reference-contexts: Several aspects of the Infospheres Infrastructure can assist with such synchronization, including the service mechanism and synchronous message passing. Thus, distributed simulations are efficient and scale well. While there are several software frameworks available for building artificial life simulations <ref> [2, 25] </ref>, few are flexible enough to build arbitrary new scenarios. In many cases, simulations are synchronous, run on a single computer, and the simulation entities must be either entirely passive, completely reactive, or are required to operate in a fixed time quantum.
Reference: [26] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification (CORBA), revision 2.0, </title> <year> 1995. </year>
Reference-contexts: This persistence model is similar to mechanisms provided as recent ORB services [35]. However, the CORBA process model, implemented using the Basic Object Adaptor (BOA) of a given Object Request Broker (ORB), maintains that only the broker stay active for the entire duration of the computation <ref> [26] </ref>. Like Client-Server, Remote Procedure Call, and Remote Method Invocation systems, CORBA only spawns remote processes to perform isolated remote tasks.
Reference: [27] <author> Open Group, </author> <title> The Distributed Computing Environment's Cell Directory Service, The Open Group, </title> <year> 1997. </year>
Reference: [28] <author> Open Group, </author> <title> The Distributed Computing Environment's Global Directory Service, The Open Group, </title> <year> 1997. </year>
Reference: [29] <author> L. L. Peterson and B. S. Davie, </author> <title> Computer Networks: A Systems Approach, </title> <publisher> Morgan Kaufmann, </publisher> <year> 1996. </year>
Reference-contexts: If the communication layer cannot deliver a message, an exception is raised in the sender containing the message, destination inbox, and specific error condition. Our system uses a sliding window protocol <ref> [29] </ref> to manage the messages in transit. Every message at the head of an outbox will eventually be handled by the communication layer. The conceptual model uses asynchronous messages rather than remote procedure calls, to be tolerant of the range of message delays experienced along different links of the Internet.
Reference: [30] <author> D. Pinkston, A. Nicholson, and J. Kiniry, </author> <title> DALI: A Distributed Artificial Life Infrastructure, </title> <note> Technical Report (to be submitted to Artificial Life from MIT Press), </note> <institution> California Institute of Technology, </institution> <year> 1997. </year> <month> 30 </month>
Reference-contexts: Overall, the NDO provides a good solution for typical data objects shared across a network. 5.3 DALI: The Distributed Artificial Life Infrastructure DALI <ref> [30] </ref> is a Java framework built on top of the Infospheres Infrastructure designed for the creation of complex, asynchronous artificial-life simulations that run in a distributed environment. Since DALI is written in Java, DALI simulations can run on most available operating systems. <p> Finally,the distributed nature of the system lends itself to supporting the scheduling and use of rare network resources like multiprocessor machines for compute-intensive tasks and high power graphics workstations for visualization, as described in section 5.1 above. More information on DALI can be found in <ref> [30] </ref>. 6 Patterns in the Infosphere Infrastructure Collaboration Patterns. Several patterns of collaboration network topologies have emerged from our exploration of personal networks.
Reference: [31] <author> D. Roberts and R. Johnson, </author> <title> `Evolving Frameworks: A Pattern Language for Developing Object-Oriented Frameworks', </title> <booktitle> Proceedings of Pattern Languages of Programs, </booktitle> <address> Allerton Park, Illinois, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: an income transfer may require different actions based on how much money is being transferred, for tax shelter purposes. 7 Framework Implementation Version 1.0b3 of our tools and models, released in June 1997, is classified in the "white box framework" level of the taxonomy given by the framework pattern language <ref> [31] </ref>. With the addition of more applications, 24 services, visual builders, and language tools, we are developing a "black box framework." To guarantee widespread, unrestricted use, our initial framework has been developed using Sun's Java Developer's Kit (JDK) 1.0.2. <p> * Security packages for communication encryption and process authentication. * Reflection packages for innovative structuring of emergent personal networks and process behavior. 8 Related Work Frameworks are reusable designs for software system processes, described by the combination of a set of objects and the way those objects can be used <ref> [31] </ref>. Our framework consists of some middleware APIs, a model for using them, and services and patterns that are helpful not only in inheriting from objects, but extending them as well. These features allow the reuse of both design and code, reducing the effort required to develop an application.
Reference: [32] <author> D. C. Schmidt, </author> <title> `ACE: an Object-Oriented Framework for Developing Distributed Applications', </title> <booktitle> Proceedings of the Sixth USENIX C++ Technical Conference, </booktitle> <address> Cambridge, Massachusetts, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: Component Frameworks. Many other framework systems also have the goal of creating distributed system components. The ADAPTIVE Communication Environment (ACE) provides an integrated framework of reusable C++ wrappers and components that perform common communications software tasks <ref> [32] </ref>; this framework is amenable to a design pattern group useful to many object-oriented communication systems [33]. Hector is a Python-based distributed object framework that provides a communications transparency layer enabling negotiation of communication protocol qualities, comprehensive support services for application objects, and a four-tiered architecture for interaction [3].
Reference: [33] <author> D. C. Schmidt, </author> <title> `A Family of Design Patterns for Application Level Gateways', </title> <journal> Theory and Practice of Object Systems, Wiley and Sons, </journal> <volume> Volume 2, Number 1, </volume> <year> 1996. </year>
Reference-contexts: The ADAPTIVE Communication Environment (ACE) provides an integrated framework of reusable C++ wrappers and components that perform common communications software tasks [32]; this framework is amenable to a design pattern group useful to many object-oriented communication systems <ref> [33] </ref>. Hector is a Python-based distributed object framework that provides a communications transparency layer enabling negotiation of communication protocol qualities, comprehensive support services for application objects, and a four-tiered architecture for interaction [3].
Reference: [34] <author> L. Thomas, S. Suchter, and A. Rifkin, </author> <title> `Developing Peer-to-Peer Applications on the Internet: the Distributed Editor, </title> <journal> SimulEdit', </journal> <note> Submitted to Dr. Dobbs Journal, </note> <month> June </month> <year> 1997. </year>
Reference-contexts: With this goal in mind, we set out to use the Infospheres packages to develop a shared distributed editor of shared documents <ref> [34] </ref>. Our original design incorporated a strict client/server approach, which had several advantages: clients never had to see the entire file they were editing, and small client/server messages could describe users' modifications to the documents.
Reference: [35] <author> R. </author> <title> Sessions, Object Persistence Beyond Object-Oriented Databases, </title> <publisher> Prentice Hall, </publisher> <year> 1996. </year>
Reference-contexts: Unlike Fortran M, sessions provide a hybrid technique for running communicating distributed processes that are frozen when they are not performing any work, yet have persistent state that can be revived whenever a new session is initiated. This persistence model is similar to mechanisms provided as recent ORB services <ref> [35] </ref>. However, the CORBA process model, implemented using the Basic Object Adaptor (BOA) of a given Object Request Broker (ORB), maintains that only the broker stay active for the entire duration of the computation [26].
Reference: [36] <editor> Workflow Management Coalition, </editor> <title> International Organization for the Development and Promotion of Workflow Standards, Workflow Glossary, Workflow Management Coalition, </title> <address> Belgium, </address> <year> 1995. </year> <month> 31 </month>
Reference-contexts: Personal networks can also be used by institutions and businesses to create task forces to handle short-term situations. The structure of personal networks comprises the organizational, informational, and workflow structures of the corresponding task force. Workflow describes the manner in which jobs are processed in stages by different processes <ref> [36] </ref>. One example of a task force is a panel that reviews proposals submitted to the National Science Foundation (NSF). Panel members come from a variety of institutions, and the panel has an organizational structure with a general chair, subcommittees, primary reviewers, and secondary reviewers.
References-found: 36

