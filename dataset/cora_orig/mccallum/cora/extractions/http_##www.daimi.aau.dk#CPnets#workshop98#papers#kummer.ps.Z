URL: http://www.daimi.aau.dk/CPnets/workshop98/papers/kummer.ps.Z
Refering-URL: http://www.daimi.aau.dk/CPnets/workshop98/papers/
Root-URL: http://www.daimi.aau.dk
Email: fkummer,moldt, wienbergg@informatik.uni-hamburg.de  
Title: A Framework for Interacting Design/CPN- and Java-Processes general possibilities to connect Design/CPN with remote processes
Author: Olaf Kummer Daniel Moldt Frank Wienberg 
Keyword: Coloured Petri Nets, Design/CPN, Distributed Simulation, Framework, Java, Workflow, Prototyping  
Note: The  are provided.  
Address: Vogt-Kolln-Strae 30, D-22527 Hamburg  
Affiliation: Universitat Hamburg, Fachbereich Informatik  
Abstract: In order to widen the applicability of Design/CPN for the specification and design of large scale distributed applications, a framework has been developed that supports the interaction of Design/CPN and Java processes. Thereby a seamless embedding of the two worlds of Petri nets and object-oriented programming is achieved, allowing problem oriented modeling at different abstraction levels in a fully distributed environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Heinrich Biallas. Realisierung der verteilten Ausfuhrung von gefarbten Petrinetzen. </author> <month> Diplomarbeit, </month> <institution> Universitat Hamburg, Fachbereich Informatik, </institution> <month> November </month> <year> 1997. </year>
Reference-contexts: Again we choose Java as our example language, even though experiments have also been done with C (for details see <ref> [1] </ref>). A straightforward implementation would provide only the basic routines to send and to receive string messages, leaving the programmer with the task of making the necessary calls. But we can increase the developers' productivity by defining a standard message format, so that we can supply reusable parsing algorithms. <p> We would like to thank the participants for their efforts, especially Matthias Ernst, Torben Kroll, Heiko Rolke, and Eberhard Wolff. A message passing library in C was implemented by Heinrich Biallas and has been documented in <ref> [1] </ref>. In [4] Margret Freund-Breuer and Olaf Fricke developed the stock exchange model that was used as a first test case for our Java interaction framework.
Reference: [2] <author> The OMG Corba Page. </author> <title> WWW page at http://www.omg.org/corba/. Contains references to the current specification of CORBA/IIOP (on 05-15-98, this is version 2.2), a discussion of the Object Management Architecture, and many more links. </title>
Reference-contexts: Our communication framework already bears some resemblance to other distributed object-oriented architectures. Although many functions and just as many concepts are still missing, it does no longer seem far fetched that Petri nets might one day be usable with systems like CORBA <ref> [2] </ref>. 7 Acknowledgments Much of the Java implementation described in this paper was done during a project at the University of Hamburg. We would like to thank the participants for their efforts, especially Matthias Ernst, Torben Kroll, Heiko Rolke, and Eberhard Wolff.
Reference: [3] <author> Design/CPN Online. </author> <note> WWW page at http://www.daimi.aau.dk/designCPN/. </note>
Reference-contexts: As a specification tool based on Petri nets, we chose Design/CPN (see <ref> [3] </ref> and [9]), because it is flexible and powerful and comes with a specially adapted graphical editor. Design/CPN supports the development of large systems by means of hierarchical models. Furthermore, an internal programming language, namely ML, can be used to extend the tool for our needs.
Reference: [4] <institution> Margret Freund-Breuer and Olaf Fricke. Spezifikation mit gefarbten Petri-Netzen am Beispiel des Borsenspiels. Studienarbeit, Fachbereich Informatik, Universitat Hamburg, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Since both "threads" that are created send messages to Java, we have to take care that the return messages are correctly associated. This is ensured by every instance of the Call subpage using a different identifier. 13 There have also been other test applications. In <ref> [4] </ref> a game was developed that simulates a stock exchange using a Coloured Petri Nets. The net was augmented by calls to a graphical user interface programmed in Java, resulting in a game that can be played by multiple players across a network. <p> We would like to thank the participants for their efforts, especially Matthias Ernst, Torben Kroll, Heiko Rolke, and Eberhard Wolff. A message passing library in C was implemented by Heinrich Biallas and has been documented in [1]. In <ref> [4] </ref> Margret Freund-Breuer and Olaf Fricke developed the stock exchange model that was used as a first test case for our Java interaction framework.
Reference: [5] <author> Dirk Hauschildt. </author> <title> A petri net implementation. </title> <institution> Fachbereichsmitteilung FBI-HH-M-145/87, Universitat Hamburg, Fachbereich Informatik, </institution> <year> 1987. </year> <month> 19 </month>
Reference-contexts: Distributed simulation in our sense does not mean the distributed simulation of a single Petri net, which would imply the distributed solving of conflicts. This problem has been treated in e.g. <ref> [5] </ref>. Instead, we will distribute our models in such a way that only local conflicts can occur, so that they can be handled within one Design/CPN process. 2.1 Possible Communication Channels Running multiple instances of Design/CPN in a single simulation run requires communication and synchronization.
Reference: [6] <institution> The Java Home Page. </institution> <note> WWW page at http://java.sun.com. Contains references to online material as well as to many introductory books and technical papers. </note>
Reference-contexts: Because a strong interconnection of specification and implementation is very useful when developing a system, it is desirable to bring together the worlds of Coloured Petri Nets and some popular programming language. In the area of implementation Java (see <ref> [6] </ref>) aroused special interest for building applications for the Internet, as it is an object-oriented, reasonably portable programming language that supports additional features such as high-level networking and easy multi-thread programming.
Reference: [7] <author> Kurt Jensen. </author> <title> Coloured Petri Nets: Basic Concepts, Analysis Methods and Practical Use. </title> <booktitle> EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992: </year> <note> Vol. 1, 1994: Vol. 2, 1997: Vol. 3. </note>
Reference-contexts: 1 Introduction The specification of systems, its evaluation, and its transfer to implementation is still a major task for computer science. One very promising technique in the area of specification, especially when concurrent and distributed systems are involved, are Coloured Petri Nets (see <ref> [7] </ref>). Because a strong interconnection of specification and implementation is very useful when developing a system, it is desirable to bring together the worlds of Coloured Petri Nets and some popular programming language. <p> This may simplify the control OF a system by a net, a possibility already mentioned in the context of the security system presented in section 1.5 of volume 3 of <ref> [7] </ref>. There it was proposed to extract parts of the ML code generated from the net for the execution on a stand-alone microprocessor.
Reference: [8] <author> Christoph Maier and Daniel Moldt. </author> <title> Objektorientierte Konzepte - Dargestellt mit gefarbten Petrinetzen. </title> <institution> Fachbereichsbericht FBI-HH-M-261/96, Universitat Hamburg, Fachbereich Informatik, </institution> <month> August </month> <year> 1996. </year>
Reference-contexts: A smooth transition from a specification within Design/CPN via distributed Design/CPN modules to distributed Java modules seems possible. Some applications have already been implemented thereby documenting the gained flexibility. In the near future we are going to extend the framework to object-oriented Petri nets in the sense of <ref> [8] </ref>, [11], and [10]. In those approaches the structure of the nets represents most object-oriented features without extensions of Coloured Petri Nets themselves. Tool support of the object-oriented techniques could then further simplify the development process.
Reference: [9] <institution> Meta Software Corporation, </institution> <address> Cambridge, MA, USA. </address> <note> Design/CPN Handbook Version 2.0, </note> <year> 1993. </year>
Reference-contexts: As a specification tool based on Petri nets, we chose Design/CPN (see [3] and <ref> [9] </ref>), because it is flexible and powerful and comes with a specially adapted graphical editor. Design/CPN supports the development of large systems by means of hierarchical models. Furthermore, an internal programming language, namely ML, can be used to extend the tool for our needs.
Reference: [10] <author> Daniel Moldt. </author> <title> Hohere Petrinetze als Grundlage fur Systemspezifikationen. </title> <type> Dissertation, </type> <institution> Universitat Hamburg, Fachbereich Informatik, </institution> <month> August </month> <year> 1996. </year>
Reference-contexts: Some applications have already been implemented thereby documenting the gained flexibility. In the near future we are going to extend the framework to object-oriented Petri nets in the sense of [8], [11], and <ref> [10] </ref>. In those approaches the structure of the nets represents most object-oriented features without extensions of Coloured Petri Nets themselves. Tool support of the object-oriented techniques could then further simplify the development process.
Reference: [11] <author> Daniel Moldt and Christoph Maier. </author> <title> Coloured Object Petri Nets A Formal Technique for Object Oriented Modelling. </title> <editor> In B. Farwer, D. Moldt, and M.-O. Stehr, editors, </editor> <booktitle> Petri Nets in System Engineering, Modelling, Verification and Validation, </booktitle> <pages> pages 11-19, </pages> <institution> Fachbereich Informatik, Univ. Hamburg, </institution> <year> 1997. </year> <month> FBI-HH-B-205/97. </month>
Reference-contexts: A smooth transition from a specification within Design/CPN via distributed Design/CPN modules to distributed Java modules seems possible. Some applications have already been implemented thereby documenting the gained flexibility. In the near future we are going to extend the framework to object-oriented Petri nets in the sense of [8], <ref> [11] </ref>, and [10]. In those approaches the structure of the nets represents most object-oriented features without extensions of Coloured Petri Nets themselves. Tool support of the object-oriented techniques could then further simplify the development process.
Reference: [12] <author> Daniel Moldt and Frank Wienberg. </author> <title> Multi-agent-systems based on coloured petri nets. </title> <editor> In Pierre Azema and Gianfranco Balbo, editors, </editor> <booktitle> Application and Theory of Petri Nets 1997, number 1248 in Lecture Notes in Computer Science, </booktitle> <pages> pages 82-101, </pages> <address> Berlin, 1997. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: In those approaches the structure of the nets represents most object-oriented features without extensions of Coloured Petri Nets themselves. Tool support of the object-oriented techniques could then further simplify the development process. Additionally, Artificial Intelligence concepts as already used in <ref> [12] </ref> are going to be extended by providing a connection to Prolog. This will allow us to use available tools for logic programming directly from Design/CPN models. If Design/CPN itself was extended by multi-threaded simulation of net-models, this would capture some concurrency aspects of our framework.
Reference: [13] <author> Jens Linneberg Rasmussen and Mejar Singh. </author> <title> Mimic/CPN A Graphics Animation Utility for Design/CPN. </title> <note> User's Manual Version 1.5. </note> <institution> Computer Science Department, Aarhus University, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: In the simulator, interfaces for calling programs implemented in languages other than ML are supported on a very low level only. Although the tool itself, especially with the extension Mimic (see <ref> [13] </ref>), offers graphical user interface routines, these are also very rudimentary compared to state-of-the-art tools. Last but not least the process of implementing a system for which a Design/CPN prototype has been designed is not well supported by the tool.
Reference: [14] <author> Rudiger Valk. </author> <title> On Concurrency in Communicating Object Nets, </title> <booktitle> 1998. Accepted for publication at the International Conference on Application and Theory of Petri Nets (ICATPN). </booktitle> <pages> 20 </pages>
Reference-contexts: Aalst, cited in <ref> [14] </ref>. The example was introduced as follows. When a criminal offence happens and the police has a suspect, a record is made by an official. This is printed and sent to the secretary of the Justice Department.
References-found: 14

