URL: ftp://ftp.docs.uu.se/docs/papers/exrt_group/bjornfot.AE-93.ps.Z
Refering-URL: http://www.csd.uu.se/~stinal/publications.html
Root-URL: 
Email: E-mail: bjornfot@docs.uu.se  
Title: Distributed Run-Time System, a Protocol for Ada  
Author: Lars Bjrnfot, Lars Asplund, Kristina Lundqvist and Gran Wall 
Address: P.O. Box 325, S-751 05 Uppsala, Sweden  
Affiliation: Department of Computer Systems, Uppsala University  
Abstract: The requirements and specification of a protocol for low level communication between the run-time systems in a distributed Ada environment is presented. This allows an Ada system to be separated into software resources and run-time controllers. Calls to the local run-time system of a node, concerning task management, are transformed into remote calls to the controller, that schedules all tasks in the application. The calls to the run-time system together with all messages, requests and replies, that are triggered as a consequence, are described. The controller will be implemented in hardware separate from the processors. Communication between processors and controllers are by means of high speed (Gigabit) networks. In the proposed system, partitioning and distribution of Ada programs can fully uti lize the inherent and strong type checking in Ada.
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> United States Department of Defence, </institution> <note> Reference Manual for the Ada Programming Language, ANSI/MIL-STD-1815A, </note> <year> 1983. </year>
Reference-contexts: T2 and T3 respectively. According to the definition of Ada Language Reference Manual <ref> [1] </ref>, LRM9.8 (4): If two tasks with different priorities are both eligible for execution and could sensibly be executed using the same physical processors and the same other processing resources, then it cannot be the case that the task with the lower priority is executing while the task with the higher
Reference: [2] <author> D80A, </author> <title> An Ericsson computer with Ada adapted micro code, Ericsson Radar, </title> <address> Mlndal, Sweden. </address>
Reference-contexts: This is in the opposite direction of the requirements for an Ada computer such as the D80A <ref> [2] </ref>, Thor [3] or Rational. However, in these designs the most complex instructions apart from constraint checks are the instructions for tasking. Since the tasking is so closely related to the language, a separation of the execution of the task administration and scheduling from the RTS can be more optimal.
Reference: [3] <author> S. </author> <title> Asserhll,A Microprocessor with Ada Real Time Support, </title> <booktitle> Ada in Swe-den symposium, </booktitle> <address> Uppsala, </address> <month> april </month> <year> 1991. </year>
Reference-contexts: This is in the opposite direction of the requirements for an Ada computer such as the D80A [2], Thor <ref> [3] </ref> or Rational. However, in these designs the most complex instructions apart from constraint checks are the instructions for tasking. Since the tasking is so closely related to the language, a separation of the execution of the task administration and scheduling from the RTS can be more optimal.
Reference: [4] <author> J. </author> <title> Roos,A Real-Time Support Processor for Ada Tasking, </title> <booktitle> In Proceedings of the ACM conference ASPLOS III, </booktitle> <month> April </month> <year> 1989. </year>
Reference-contexts: Node 1 Node 4 Controller 2 Controller 1 Gigabit Network RTS RTS Node 2 RTS Node 3 RTS To reduce the computational load of the RTS, dedicated hardware, the Controller, is going to be used for the scheduling. A study supported by the European Space Agency, ESA <ref> [4] </ref>, has shown that the calls to the RTS is very similar for quite a large set of Ada compilers. It is thus possible to make a chip, the Controller, that can be used for several compiler vendors.
Reference: [5] <author> A. Burns and A. J. Wellings, </author> <title> Specifying an Ada tasking run-time support system, </title> <booktitle> Ada User, </booktitle> <volume> 12, </volume> <pages> 160-186, </pages> <year> 1991. </year>
Reference-contexts: The other Controllers mirror the activity in the network, and in the case of a failure in the master, it is replaced by one of the backup Controllers . A complete description of task states and transitions are given in <ref> [5] </ref>, with a formal description of the semantics using the Z notation. The specification language Z is described in [6]. This specification of the tasking model is intended to be used when implementing the Controller.
Reference: [6] <author> M. Spivey, </author> <title> The Z Notation: A Reference Manual, </title> <publisher> Prentice-Hall, </publisher> <address> Engle--wood Cliffs, </address> <year> 1989. </year>
Reference-contexts: A complete description of task states and transitions are given in [5], with a formal description of the semantics using the Z notation. The specification language Z is described in <ref> [6] </ref>. This specification of the tasking model is intended to be used when implementing the Controller. The implementation issues are beyond the scope of this paper. 3 The Medium The protocol should be medium independent. Two possible media are considered here, Ethernet and Fiber Optics.
Reference: [7] <author> N. K. Cheung, </author> <title> The Infrastructure for Gigabit Computer Networks, </title> <journal> IEEE Communication Magazine, </journal> <month> April </month> <year> 1992. </year>
Reference-contexts: The ATM cell A fiber optic link has a much higher transmission speed. For example, in SONET/SDH <ref> [7] </ref>, the line rate is a multiple of 51.84 Mbit/s, for the so-called OC-1 level in SONET, which corresponds to a multiple of 155.52 Mbit/s for STM-1 level in SDH. Common multiples for STM levels are 1, 4, 8 and 16.
Reference: [8] <author> J. Postel, </author> <title> Internet Protocol, </title> <type> RFC 791, </type> <institution> USC/Information Sciences Institute, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: The protocol can also be implemented and tested on the same network used for other applications. Commonly used protocols on Ethernet are the TCP/IP and UDP/IP protocol suites <ref> [8] </ref> [9] [10]. The Controller protocol will at first be implemented on top of the UDP/IP protocol, to avoid interference with the normal traffic. UDP/IP provides a low-overhead communication. The protocol is transaction-oriented, and delivery and duplicate protection is not guaranteed.
Reference: [9] <author> J. Postel, </author> <title> User Datagram Protocol, </title> <type> RFC 768, </type> <institution> USC/Information Sciences Institute, </institution> <month> August </month> <year> 1980. </year>
Reference-contexts: The protocol can also be implemented and tested on the same network used for other applications. Commonly used protocols on Ethernet are the TCP/IP and UDP/IP protocol suites [8] <ref> [9] </ref> [10]. The Controller protocol will at first be implemented on top of the UDP/IP protocol, to avoid interference with the normal traffic. UDP/IP provides a low-overhead communication. The protocol is transaction-oriented, and delivery and duplicate protection is not guaranteed.
Reference: [10] <author> J. Postel, </author> <title> Transmission Control Protocol, </title> <type> RFC 793, </type> <institution> USC/Information Sciences Institute, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: The protocol can also be implemented and tested on the same network used for other applications. Commonly used protocols on Ethernet are the TCP/IP and UDP/IP protocol suites [8] [9] <ref> [10] </ref>. The Controller protocol will at first be implemented on top of the UDP/IP protocol, to avoid interference with the normal traffic. UDP/IP provides a low-overhead communication. The protocol is transaction-oriented, and delivery and duplicate protection is not guaranteed.
Reference: [11] <author> Lamport, Shostak, Pease, </author> <title> The Byzantine Generals Problem, </title> <journal> ACM Trans. on Prog. Lang. and Systems, </journal> <month> July </month> <year> 1982. </year>
Reference-contexts: In this paper, we only handle simple communication errors, and the case where a node silently ceases to exist. Other errors could involve nodes that respond in an erroneous way, or even send out erroneous requests. Such so-called Byzantine errors <ref> [11] </ref> can be very complex and difficult to handle. All processors that are up and running regularly send heartbeats to the Controllers [12].
Reference: [12] <author> J. C. Knight and J. I. A. Urquhart, </author> <title> On the Implementation and Use of Ada on Fault-Tolerant Distributed Systems, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-13 (5), </volume> <pages> 553-563, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: Other errors could involve nodes that respond in an erroneous way, or even send out erroneous requests. Such so-called Byzantine errors [11] can be very complex and difficult to handle. All processors that are up and running regularly send heartbeats to the Controllers <ref> [12] </ref>. Absence of heartbeats indicates failure, but the Controller should query the silent node, to find out if the node is still operating before considering it a failed node. Nodes that produce an incorrect checksum, or does not acknowledge messages, is detected either by the Controller or by other nodes.
Reference: [13] <author> R. Lipsett, C. Schaefer, C. Ussery, </author> <title> VHDL: Hardware Description and Design, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1989. </year>
Reference-contexts: This can prevent future malicious master errors. 8 Future Work The Controller will first be implemented in Ada on an Ethernet-based network. The next step is to fully describe the Controller in VHDL <ref> [13] </ref>, and finally to test the implementation in a fiber optical system.
References-found: 13

