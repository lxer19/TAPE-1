URL: http://theory.lcs.mit.edu/~stasio/Papers/rsa.ps.gz
Refering-URL: http://theory.lcs.mit.edu/~stasio/
Root-URL: 
Email: Email: rosario@theory.lcs.mit.edu.  Email: stasio@theory.lcs.mit.edu.  Email: hugo@  Email: talr@theory.lcs.mit.edu.  
Title: Robust and Efficient Sharing of RSA Functions  
Author: Rosario Gennaro Stanislav Jarecki Hugo Krawczyk Tal Rabin 
Note: watson.ibm.com. Research supported by an NSF Post-doctoral Fellowship  
Address: Square, Cambridge, MA 02139, USA.  Square, Cambridge, MA 02139, USA.  PO Box 704, Yorktown Heights, New York 10598, USA.  545 Tech Square, Cambridge, MA 02139, USA.  
Affiliation: Lab. of Computer Science, Massachusetts Institute of Technology, 545 Tech  Lab. of Computer Science, Massachusetts Institute of Technology, 545 Tech  IBM T.J. Watson Research Center,  Lab. of Computer Science, Massachusetts Institute of Technology,  
Abstract: We present two efficient protocols which implement robust threshold RSA signature schemes, where the power to sign is shared by N players such that any subset of more then T signers can collaborate to produce a valid RSA signature on any given message, but no subset of fewer than T corrupted players can forge a signature. Our protocols are robust in the sense that the correct signature is computed even if up to T players behave in arbitrarily malicious way during the signature protocol. This in particular includes the cases of players that refuse to participate or that generate incorrect partial signatures. Our protocols achieve fault tolerance T of N=2, which is optimal. Our protocols are also very efficient, as the computation performed by each player is comparable to the computation cost of a single RSA signature. Robust threshold signature schemes have very important applications, since they provide increased security and availability for a signing server (e.g. a certification authority.) Solutions for the case of the RSA signature scheme are especially important because of its spread use. In addition, solutions to shared RSA signatures usually lead to efficient key escrow schemes for RSA. The scheme is based on some interesting extensions that we devised for the Information Checking Protocol of T. Rabin and Ben-Or [Rab94, RB89], and the undeniable signature work of Chaum [CA90]. These extensions have desirable properties, and hence are of independent interest. 
Abstract-found: 1
Intro-found: 1
Reference: [BCC88] <author> G. Brassard, D. Chaum, and C. Crepeau. </author> <title> Minimum disclosure proofs of knowledge. </title> <journal> JCSS, </journal> <volume> 37(2) </volume> <pages> 156-189, </pages> <year> 1988. </year>
Reference-contexts: The protocol in figure 4 is actually not zero-knowledge. For example, a cheating verifier V fl can choose R in a different way than specified and then learn S R , which V fl could not compute by himself. However, there are well-known techniques <ref> [GMW86, BCC88, Gol95] </ref> to add the zero-knowledge property to the above protocol using the notion of a commitment function: Instead of P sending S R in Step 2, he sends a commitment commit (S R ), after which V reveals to P the values of i and j.
Reference: [BCDP91] <author> J. Boyar, D. Chaum, I. Damgard, and T. Pedersen. </author> <title> Convertible undeniable signatures. </title> <editor> In A.J. Menezes and S. A. Vanstone, editors, </editor> <booktitle> Proc. CRYPTO 90, </booktitle> <pages> pages 189-205. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year> <note> Lecture Notes in Computer Science No. 537. </note>
Reference-contexts: The sample message will be used in the extension of a protocol by Chaum's and van Antwerpen's <ref> [CA90, Cha90, BCDP91] </ref>. <p> initialization protocol consists of choosing a public sample message w and generating sample partial signatures w d i , for each one of the partial keys held by the players. 5.2 Verification of Partial Signatures (Signature Phase) The protocol of Chaum and van Antwerpen [CA90], which was further developed in <ref> [Cha90, BCDP91] </ref>, is designed to prove in zero-knowledge the equality of the discrete logarithms of two elements relative 8 Sample-Signature-Generation Input: Public: RSA modulus n Dealer D: key-shares d i 2 [(n)], for i = 1; 2; : : : ; N 1.
Reference: [BK89] <author> M. Blum and S. Kannan. </author> <title> Program correctness checking and the design of programs that check their work. </title> <booktitle> In Proc. of the 21st ACM Symposium on Theory of Computing, </booktitle> <year> 1989. </year>
Reference-contexts: Rabin and Ben-Or [Rab94, RB89], and the undeniable signature work of Chaum [CA90]. These extensions have desirable properties, and hence can be used in other applications as well. In a recent and independent work, Frankel, Gemmel, and Yung [FGY96], have extended the notion of result-checking introduced by Blum <ref> [BK89] </ref>, to the setting of witness-based cryptographic checking. Among the main motivations for that work is the generation of a robust fault-tolerant RSA signature scheme.
Reference: [Boy86] <editor> C. Boyd. Digital Multisignatures. In H. Baker and F. Piper, editors, </editor> <booktitle> Cryptography and Coding, </booktitle> <pages> pages 241-246. </pages> <publisher> Claredon Press, </publisher> <year> 1986. </year>
Reference-contexts: A threshold signature protocol can in particular tolerate up to T such crashes, thus increasing the availability of the signature operation, without decreasing its security. Threshold signatures are part of the general approach known as threshold cryptography introduced through the works of Boyd <ref> [Boy86] </ref>, Desmedt [Des94], and Desmedt and Frankel [DF90]. Solutions for the case of the RSA signature scheme are especially important because of its spread use (a de-facto standard).
Reference: [BR94] <author> M. Bellare and P. Rogaway. </author> <title> Optimal asymmetric encryption. </title> <booktitle> In EuroCrypt'94, </booktitle> <year> 1994. </year>
Reference-contexts: Commitment functions can be implemented in many ways. For example, in the above protocol commit (S R ) can be implemented as RSA encryption of S R concatenated with a random string r (the encryption is required to be semantically secure, see <ref> [GM84, BR94] </ref>), using a public key for which the private key is not known to V (and possibly, not even known to P ). To open the commitment, P reveals both S R and r.
Reference: [CA90] <editor> David Chaum and Hans Van Antwerpen. Undeniable signatures. In G. Brassard, editor, </editor> <booktitle> Proc. CRYPTO 89, </booktitle> <pages> pages 212-217. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <note> Lecture Notes in Computer Science No. 435. </note>
Reference-contexts: The work of [DDFY94] is used as the basic threshold RSA scheme. We achieve the additional property of fault-tolerance by employing extensions which we developed of the Information Checking Protocol of T. Rabin and Ben-Or [Rab94, RB89], and the undeniable signature work of Chaum <ref> [CA90] </ref>. These extensions have desirable properties, and hence can be used in other applications as well. In a recent and independent work, Frankel, Gemmel, and Yung [FGY96], have extended the notion of result-checking introduced by Blum [BK89], to the setting of witness-based cryptographic checking. <p> The sample message will be used in the extension of a protocol by Chaum's and van Antwerpen's <ref> [CA90, Cha90, BCDP91] </ref>. <p> of the verification information during the initialization protocol consists of choosing a public sample message w and generating sample partial signatures w d i , for each one of the partial keys held by the players. 5.2 Verification of Partial Signatures (Signature Phase) The protocol of Chaum and van Antwerpen <ref> [CA90] </ref>, which was further developed in [Cha90, BCDP91], is designed to prove in zero-knowledge the equality of the discrete logarithms of two elements relative 8 Sample-Signature-Generation Input: Public: RSA modulus n Dealer D: key-shares d i 2 [(n)], for i = 1; 2; : : : ; N 1. <p> Both protocols are low on computation and communication. Thus, achieving an efficient, robust, threshold-RSA signature scheme. Our techniques are closely related to the notion of undeniable signatures <ref> [CA90] </ref>, and can form the basis for RSA-based undeniable signatures (known undeniable signature schemes are based on exponentiation-based systems, not on RSA).
Reference: [Cha90] <author> D. Chaum. </author> <title> Zero-knowledge undeniable signatures. </title> <booktitle> In Proc. EUROCRYPT 90, </booktitle> <pages> pages 458-464. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <note> Lecture Notes in Computer Science No. 473. </note>
Reference-contexts: The sample message will be used in the extension of a protocol by Chaum's and van Antwerpen's <ref> [CA90, Cha90, BCDP91] </ref>. <p> initialization protocol consists of choosing a public sample message w and generating sample partial signatures w d i , for each one of the partial keys held by the players. 5.2 Verification of Partial Signatures (Signature Phase) The protocol of Chaum and van Antwerpen [CA90], which was further developed in <ref> [Cha90, BCDP91] </ref>, is designed to prove in zero-knowledge the equality of the discrete logarithms of two elements relative 8 Sample-Signature-Generation Input: Public: RSA modulus n Dealer D: key-shares d i 2 [(n)], for i = 1; 2; : : : ; N 1.
Reference: [DDFY94] <author> Alfredo De Santis, Yvo Desmedt, Yair Frankel, and Moti Yung. </author> <title> How to share a function securely. </title> <booktitle> In Proc. 26th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 522-533, </pages> <address> Santa Fe, 1994. </address> <publisher> IEEE. </publisher>
Reference-contexts: In addition, since in the RSA cryptosystem the signing algorithm coincides with the decryption algorithm, solutions to shared RSA signatures usually lead to shared RSA decryption procedures which have applications to key escrow (See [Mic92]). Desmedt and Frankel initiated the study of threshold-RSA [DF92], which was followed by <ref> [DDFY94] </ref>. In these papers, protocols for (N=2; N )-threshold RSA signatures were given. However, these schemes are not robust. In this paper, we present an efficient solution for robust, (N=2; N )-threshold RSA signatures. The work of [DDFY94] is used as the basic threshold RSA scheme. <p> Desmedt and Frankel initiated the study of threshold-RSA [DF92], which was followed by <ref> [DDFY94] </ref>. In these papers, protocols for (N=2; N )-threshold RSA signatures were given. However, these schemes are not robust. In this paper, we present an efficient solution for robust, (N=2; N )-threshold RSA signatures. The work of [DDFY94] is used as the basic threshold RSA scheme. We achieve the additional property of fault-tolerance by employing extensions which we developed of the Information Checking Protocol of T. Rabin and Ben-Or [Rab94, RB89], and the undeniable signature work of Chaum [CA90]. <p> Further details of the result by <ref> [DDFY94] </ref> in Section 3.1. Each of the existing schemes requires that all partial signatures, S i be correct, hence these schemes cannot tolerate faults. If we are to confront failures, we must be able to detect which of the partial signatures are improper. <p> If the result is a proper signature, there is no need for the verification of the partial signatures. In the De Santis et al. <ref> [DDFY94] </ref> solution the shares d 1 ; :::; d N of the secret key d can be viewed themselves as RSA secret keys. Yet, for each of these keys the public exponent, e i , is unknown even to 2 the signer, P i . <p> The verification of the dealer's actions has applications to key-escrow systems. Organization of the paper: Section 3 describes the model and the threshold-RSA solution of <ref> [DDFY94] </ref>. Our non-interactive solution is described in Section 4. The interactive protocol appears in Section 5. 3 Preliminaries MODEL. We assume that our computation model is composed of a set of N players fP 1 ; : : : ; P N g. <p> He may cause corrupted players to behave in any (possibly malicious) way. We assume that the computational power of the adversary is adequately modeled by a probabilistic polynomial time Turing machine. 3.1 Threshold Sharing of RSA functions In <ref> [DDFY94] </ref> the authors show how to perform threshold sharing of RSA functions. <p> The main problem is that it is not possible to use Shamir's (T ; N )-threshold secret sharing [Sha79], as the secret key d belongs to the ring [(n)], while we need a field in order to perform polynomial interpolation. De Santis et al. <ref> [DDFY94] </ref> solve this problem by extending Shamir's scheme to work over any Abelian group (G; +). A sketch of their work is presented here, but readers are referred to [DDFY94] for details. <p> De Santis et al. <ref> [DDFY94] </ref> solve this problem by extending Shamir's scheme to work over any Abelian group (G; +). A sketch of their work is presented here, but readers are referred to [DDFY94] for details. For our purposes let G be Z (n) and H be Z fl n , where n is an RSA modulus. Let &gt; N be a small prime and let u be a root of the cyclotomic polynomial p (x) = P 1 j=0 x j . <p> The signature m d mod n will be the first component of the vector S. The correctness of the <ref> [DDFY94] </ref> result relies heavily on the correctness of each partial signature. Observation 1: The partial signature of player P i in this scheme is just a vector of 1 regular RSA signatures. Hence, it will suffice to check each of these signatures on its own. <p> Hence, it will suffice to check each of these signatures on its own. This will allow us in the following to perform operations simply modulo n and not in the algebraic structure described above. Thus, the extension of our protocols to the <ref> [DDFY94] </ref> construction is straightforward. Observation 2: We will assume that a partial signatures is good, if it is correct up to a sign.
Reference: [Des94] <author> Yvo G. Desmedt. </author> <title> Threshold cryptography. </title> <journal> European Transactions on Telecommunications, </journal> <volume> 5(4) </volume> <pages> 449-457, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: A threshold signature protocol can in particular tolerate up to T such crashes, thus increasing the availability of the signature operation, without decreasing its security. Threshold signatures are part of the general approach known as threshold cryptography introduced through the works of Boyd [Boy86], Desmedt <ref> [Des94] </ref>, and Desmedt and Frankel [DF90]. Solutions for the case of the RSA signature scheme are especially important because of its spread use (a de-facto standard).
Reference: [DF90] <author> Yvo Desmedt and Yair Frankel. </author> <title> Threshold cryptosystems. </title> <editor> In G. Brassard, editor, </editor> <booktitle> Proc. CRYPTO 89, </booktitle> <pages> pages 307-315. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <note> Lecture Notes in Computer Science No. 435. </note>
Reference-contexts: Threshold signatures are part of the general approach known as threshold cryptography introduced through the works of Boyd [Boy86], Desmedt [Des94], and Desmedt and Frankel <ref> [DF90] </ref>. Solutions for the case of the RSA signature scheme are especially important because of its spread use (a de-facto standard).
Reference: [DF92] <author> Y. Desmedt and Y. Frankel. </author> <title> Shared generation of authenticators and signatures. </title> <editor> In J. Feigenbaum, editor, </editor> <booktitle> Proc. CRYPTO 91, </booktitle> <pages> pages 457-469. </pages> <publisher> Springer, </publisher> <year> 1992. </year> <note> Lecture Notes in Computer Science No. 576. </note>
Reference-contexts: In addition, since in the RSA cryptosystem the signing algorithm coincides with the decryption algorithm, solutions to shared RSA signatures usually lead to shared RSA decryption procedures which have applications to key escrow (See [Mic92]). Desmedt and Frankel initiated the study of threshold-RSA <ref> [DF92] </ref>, which was followed by [DDFY94]. In these papers, protocols for (N=2; N )-threshold RSA signatures were given. However, these schemes are not robust. In this paper, we present an efficient solution for robust, (N=2; N )-threshold RSA signatures.
Reference: [Fel87] <author> P. Feldman. </author> <title> A Practical Scheme for Non-Interactive Verifiable Secret Sharing. </title> <booktitle> In Proceeding 28th Annual Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 427-437. </pages> <publisher> IEEE, </publisher> <year> 1987. </year>
Reference-contexts: However, it is worth noticing that these abstractions can be substituted with standard cryptographic techniques for privacy and authentication. 2 Such results are known for El-Gamal like based signature schemes <ref> [Fel87, Ped91, GJKR96] </ref>. 3 THE ADVERSARY. We assume that an adversary, A, can corrupt up to T 1 of the N players in the network.
Reference: [FGY96] <author> Y. Frankel, P. Gemmell, and M. Yung. </author> <title> Witness-based Cryptographic Program Checking and Robust Function Sharing. </title> <note> To appear in proceedings of STOC96, </note> <year> 1996. </year>
Reference-contexts: Rabin and Ben-Or [Rab94, RB89], and the undeniable signature work of Chaum [CA90]. These extensions have desirable properties, and hence can be used in other applications as well. In a recent and independent work, Frankel, Gemmel, and Yung <ref> [FGY96] </ref>, have extended the notion of result-checking introduced by Blum [BK89], to the setting of witness-based cryptographic checking. Among the main motivations for that work is the generation of a robust fault-tolerant RSA signature scheme. While [FGY96] provides a more general theoretical framework, our techniques, specifically 1 Unforgeability can be achieved <p> In a recent and independent work, Frankel, Gemmel, and Yung <ref> [FGY96] </ref>, have extended the notion of result-checking introduced by Blum [BK89], to the setting of witness-based cryptographic checking. Among the main motivations for that work is the generation of a robust fault-tolerant RSA signature scheme. While [FGY96] provides a more general theoretical framework, our techniques, specifically 1 Unforgeability can be achieved by enforcing a stronger requirement on the protocol, which is that it be zero-knowledge with respect to the adversary [GMR89]. designed for RSA, result in much more efficient and practical solutions. <p> In particular, our basic protocols involve just a small constant number of modular exponentiations while in <ref> [FGY96] </ref> a very large number, proportional to the security parameter, of such costly exponentiations is required. 2 Our results The basic construction underlying the existing threshold RSA schemes can be roughly described as follows: given n = pq, the public RSA key is set to (n; e), where (e; (n)) =
Reference: [GJKR96] <author> R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin. </author> <title> Robust threshold dss signatures. </title> <note> To appear in EuroCrypt'96, </note> <year> 1996. </year>
Reference-contexts: However, it is worth noticing that these abstractions can be substituted with standard cryptographic techniques for privacy and authentication. 2 Such results are known for El-Gamal like based signature schemes <ref> [Fel87, Ped91, GJKR96] </ref>. 3 THE ADVERSARY. We assume that an adversary, A, can corrupt up to T 1 of the N players in the network.
Reference: [GM84] <author> S. Goldwasser and S. Micali. </author> <title> Probabilistic encryption. </title> <journal> JCSS, </journal> <volume> 28(2) </volume> <pages> 270-299, </pages> <month> April </month> <year> 1984. </year>
Reference-contexts: Commitment functions can be implemented in many ways. For example, in the above protocol commit (S R ) can be implemented as RSA encryption of S R concatenated with a random string r (the encryption is required to be semantically secure, see <ref> [GM84, BR94] </ref>), using a public key for which the private key is not known to V (and possibly, not even known to P ). To open the commitment, P reveals both S R and r.
Reference: [GMR88] <author> Shafi Goldwasser, Silvio Micali, and Ronald L. Rivest. </author> <title> A digital signature scheme secure against adaptive chosen-message attacks. </title> <journal> SIAM J. Computing, </journal> <volume> 17(2) </volume> <pages> 281-308, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: We say that the scheme is secure/unforgeable if no coalition of fewer than T players can produce a valid signature <ref> [GMR88] </ref>, even after the system has produced many signatures for different messages. 1 Furthermore, a (T ; N )-threshold signatures scheme is robust/fault-tolerant if it can correctly compute signatures, even in the presence of up to T arbitrarily malicious players.
Reference: [GMR89] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The knowledge complexity of interactive proof-systems. </title> <journal> SIAM. J. Computing, </journal> <volume> 18(1) </volume> <pages> 186-208, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: While [FGY96] provides a more general theoretical framework, our techniques, specifically 1 Unforgeability can be achieved by enforcing a stronger requirement on the protocol, which is that it be zero-knowledge with respect to the adversary <ref> [GMR89] </ref>. designed for RSA, result in much more efficient and practical solutions.
Reference: [GMW86] <author> O. Goldreich, S. Micali, and A. Wigderson. </author> <title> Proofs that Yield Nothing but the Validity of the Assertion, and a Methodology of Cryptographic Protocol Design. </title> <booktitle> In Proceeding 27th Annual Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 174-187. </pages> <publisher> ACM, </publisher> <year> 1986. </year>
Reference-contexts: The protocol in figure 4 is actually not zero-knowledge. For example, a cheating verifier V fl can choose R in a different way than specified and then learn S R , which V fl could not compute by himself. However, there are well-known techniques <ref> [GMW86, BCC88, Gol95] </ref> to add the zero-knowledge property to the above protocol using the notion of a commitment function: Instead of P sending S R in Step 2, he sends a commitment commit (S R ), after which V reveals to P the values of i and j.
Reference: [GMW87] <author> O. Goldreich, S. Micali, and A. Wigderson. </author> <title> How to Play Any Mental Game. </title> <booktitle> In Proceeding 19th Annual Symposium on the Theory of Computing, </booktitle> <pages> pages 218-229. </pages> <publisher> ACM, </publisher> <year> 1987. </year>
Reference-contexts: Unfortunately it is not known how to efficiently generate in a distributed manner an RSA key in shared form 2 (indeed one could use generic results for secure multiparty computation <ref> [GMW87] </ref>, but those are outside the realm of practicality). Hence, at this stage of knowledge, we need to assume that a single dealer generates the public/private RSA keys. For the non-interactive solution we always assume that the dealer is honest.
Reference: [Gol95] <author> Oded Goldreich. </author> <title> Foundation of Cryptography Fragments of a Book. </title> <booktitle> Electronic Colloquium on Computational Complexity, </booktitle> <month> February </month> <year> 1995. </year> <note> Available online from http://www.eccc.uni-trier.de/eccc/. </note>
Reference-contexts: The protocol in figure 4 is actually not zero-knowledge. For example, a cheating verifier V fl can choose R in a different way than specified and then learn S R , which V fl could not compute by himself. However, there are well-known techniques <ref> [GMW86, BCC88, Gol95] </ref> to add the zero-knowledge property to the above protocol using the notion of a commitment function: Instead of P sending S R in Step 2, he sends a commitment commit (S R ), after which V reveals to P the values of i and j.
Reference: [Mic92] <author> Silvio Micali. </author> <title> Fair public-key cryptosystems. </title> <editor> In Ernest F. Brickell, editor, </editor> <booktitle> Proc. CRYPTO 92, </booktitle> <pages> pages 113-138. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <note> Lecture Notes in Computer Science No. 740. </note>
Reference-contexts: In addition, since in the RSA cryptosystem the signing algorithm coincides with the decryption algorithm, solutions to shared RSA signatures usually lead to shared RSA decryption procedures which have applications to key escrow (See <ref> [Mic92] </ref>). Desmedt and Frankel initiated the study of threshold-RSA [DF92], which was followed by [DDFY94]. In these papers, protocols for (N=2; N )-threshold RSA signatures were given. However, these schemes are not robust. In this paper, we present an efficient solution for robust, (N=2; N )-threshold RSA signatures.
Reference: [Ped91] <author> T. Pedersen. </author> <title> Distributed provers with applications to undeniable signatures. </title> <booktitle> In EuroCrypt'91, </booktitle> <year> 1991. </year>
Reference-contexts: However, it is worth noticing that these abstractions can be substituted with standard cryptographic techniques for privacy and authentication. 2 Such results are known for El-Gamal like based signature schemes <ref> [Fel87, Ped91, GJKR96] </ref>. 3 THE ADVERSARY. We assume that an adversary, A, can corrupt up to T 1 of the N players in the network.
Reference: [Rab94] <author> T. Rabin. </author> <title> Robust Sharing of Secrets When the Dealer is Honest or Faulty. </title> <journal> Journal of the ACM, </journal> <volume> 41(6) </volume> <pages> 1089-1109, </pages> <year> 1994. </year>
Reference-contexts: The work of [DDFY94] is used as the basic threshold RSA scheme. We achieve the additional property of fault-tolerance by employing extensions which we developed of the Information Checking Protocol of T. Rabin and Ben-Or <ref> [Rab94, RB89] </ref>, and the undeniable signature work of Chaum [CA90]. These extensions have desirable properties, and hence can be used in other applications as well. <p> The original ICP <ref> [Rab94, RB89] </ref> works only over prime fields. A very rough description of the verification method is the following: assume two players P and V . The prover P holds values d P (the secret key) and y.
Reference: [RB89] <author> T. Rabin and M. Ben-Or. </author> <title> Verifiable Secret Sharing and Multiparty Protocols with Honest Majority. </title> <booktitle> In Proceeding 21st Annual Symposium on the Theory of Computing, </booktitle> <pages> pages 73-85. </pages> <publisher> ACM, </publisher> <year> 1989. </year>
Reference-contexts: The work of [DDFY94] is used as the basic threshold RSA scheme. We achieve the additional property of fault-tolerance by employing extensions which we developed of the Information Checking Protocol of T. Rabin and Ben-Or <ref> [Rab94, RB89] </ref>, and the undeniable signature work of Chaum [CA90]. These extensions have desirable properties, and hence can be used in other applications as well. <p> The original ICP <ref> [Rab94, RB89] </ref> works only over prime fields. A very rough description of the verification method is the following: assume two players P and V . The prover P holds values d P (the secret key) and y.
Reference: [Sha79] <author> A. Shamir. </author> <title> How to Share a Secret. </title> <journal> Communications of the ACM, </journal> <volume> 22 </volume> <pages> 612-613, </pages> <year> 1979. </year> <month> 11 </month>
Reference-contexts: The main problem is that it is not possible to use Shamir's (T ; N )-threshold secret sharing <ref> [Sha79] </ref>, as the secret key d belongs to the ring [(n)], while we need a field in order to perform polynomial interpolation. De Santis et al. [DDFY94] solve this problem by extending Shamir's scheme to work over any Abelian group (G; +).
References-found: 25

