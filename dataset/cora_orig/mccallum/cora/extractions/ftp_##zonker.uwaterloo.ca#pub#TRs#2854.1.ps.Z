URL: ftp://zonker.uwaterloo.ca/pub/TRs/2854.1.ps.Z
Refering-URL: http://www.cs.umd.edu/users/akyurek/papers.html
Root-URL: 
Email: e-mail fakyurek, salemg@cs.umd.edu  
Title: Adaptive Block Rearrangement  
Author: Sedat Akyurek Kenneth Salem 
Address: College Park, MD, 20742  
Affiliation: Department of Computer Science University of Maryland  
Pubnum: CS-TR-2854.1 UMIACS-TR-92-30.1  
Abstract: An adaptive technique for reducing disk seek times is described. The technique copies frequently-referenced blocks from their original locations to reserved space near the middle of the disk. Reference frequencies need not be known in advance. Instead, they are estimated by monitoring the stream of arriving requests. Trace-driven simulations show that seek times can be cut in half by copying only a small number of blocks using this technique. The technique has been implemented by modifying a Unix device driver. No modifications are required to the file system or database management system that uses the driver.
Abstract-found: 1
Intro-found: 1
Reference: [Akyurek 93] <author> Akyurek, Sedat, Kenneth M. Salem, </author> <title> "Adaptive Block Rearrangement Under UNIX," </title> <booktitle> Proceedings of the USENIX Summer 1993 Technical Conference, </booktitle> <address> Cincinnati, Ohio, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: In this section we provide a brief description of the implemented system. We then compare the measured performance of the system with that predicted by our simulator. Additional implementation details can be found in <ref> [Akyurek 93] </ref>. 6.1 Implementation The adaptive rearrangement technique can be implemented either in a device driver or in an "intelligent" storage controller. We have taken the former approach. Rearrangement system was implemented through modifications to the SCSI disk device driver of Sun-OS 4.1.1.
Reference: [Bitton 87] <author> Bitton, </author> <title> Dina, </title> <booktitle> "Technology Trends in Mass-Storage Systems," Proceedings of the SIGMOD 1987 Annual Conference, </booktitle> <address> San Francisco, California, </address> <year> 1987. </year>
Reference-contexts: 1 Introduction Because of their relatively long access times, disks can be performance bottlenecks in a storage hierarchy. When data requests arriving at the disk are small and non-sequential, as is common in multi-user operating systems and database systems, seek time is a major component of disk access time <ref> [Bitton 87] </ref>. This paper presents an adaptive technique for reducing seek time. The idea is to copy a small number of frequently referenced disk blocks from their original locations to a reserved space near the middle of the disk.
Reference: [Floyd 89] <author> Floyd, Richard A., Carla Schlatter Ellis, </author> <title> "Directory Reference Patterns in Hierarchical File Systems," </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 1, No. 2, </volume> <month> June </month> <year> 1989. </year>
Reference-contexts: We conclude with a summary of our results and possible extensions to our study. 2 Adaptive Rearrangement Overview The idea of block rearrangement is motivated by the fact that access to data stored on disks is highly skewed <ref> [Floyd 89, Staelin 91, Ruemmler 91] </ref>. Of the thousands of data blocks stored on a disk, a small fraction of them absorbs most of the requests. If the "hot" (frequently accessed) blocks are spread over the surface of the disk, distant from each other, long seek delays may result.
Reference: [Ford 91] <author> Ford, Daniel A., Stavros Christodoulakis, </author> <title> "Optimizing Random Retrievals from CLV format Optical Disks," </title> <booktitle> Proceedings of the 17th International Conference on Very Large Data Bases, </booktitle> <address> Barcelona, Spain, </address> <month> September, </month> <year> 1991. </year> <month> 26 </month>
Reference-contexts: The next most frequently accessed data is placed to either side of the center, and the process continues until the least-accessed data has been placed at the edge of the disk. More recently, similar results have been shown for optical storage media <ref> [Ford 91] </ref>. In practice, data references are not drawn from a fixed distribution, nor are they independent. However, variations on the organ pipe heuristic have been shown to be effective at reducing seek times for more realistic reference patterns. Recently, several papers have proposed adaptive applications of this idea.
Reference: [Geist 87] <author> Geist, Robert, Stephen Daniel, </author> <title> "Continuum of Disk Scheduling Algorithms," </title> <booktitle> ACM Trans--actions on Computer Systems, </booktitle> <address> Vol.5, No.1, </address> <month> February </month> <year> 1987. </year>
Reference-contexts: It is designed to be implemented in a device driver (like Carson's cylinder re-arrangement) or in an intelligent device controller. Disk request queue reordering is another technique which can reduce seek times. Several disk head scheduling algorithms have been proposed and studied <ref> [Hofri 80, Geist 87, Seltzer 90] </ref>. But as it is pointed out in [King 90], disk head scheduling is only helpful when the disk queue is long. In practice, disk queues are often too short for request reordering to be advantageous.
Reference: [Grossman 73] <author> Grossman, David D., Harvey F. Silverman, </author> <title> "Placement of Records on a Secondary Storage Device to Minimize Access Time," </title> <journal> JACM, Vol.20, </journal> <volume> No.3, </volume> <month> July </month> <year> 1973. </year>
Reference-contexts: If data references are derived from an independent random process with a known, fixed distribution, it has been shown that the organ pipe heuristic places the data optimally <ref> [Wong 80, Grossman 73] </ref>. The organ pipe heuristic calls for the most frequently accessed data to be placed in the center of the disk.
Reference: [Hofri 80] <author> Hofri, M., </author> <title> "Disk Sceduling: FCFS vs. SSTF Revisited," </title> <journal> Communications of the ACM, Vol.23, </journal> <volume> No.11, </volume> <year> 1980. </year>
Reference-contexts: It is designed to be implemented in a device driver (like Carson's cylinder re-arrangement) or in an intelligent device controller. Disk request queue reordering is another technique which can reduce seek times. Several disk head scheduling algorithms have been proposed and studied <ref> [Hofri 80, Geist 87, Seltzer 90] </ref>. But as it is pointed out in [King 90], disk head scheduling is only helpful when the disk queue is long. In practice, disk queues are often too short for request reordering to be advantageous.
Reference: [King 90] <author> King, Richard P., </author> <title> "Disk Arm Movement in Anticipation of Future Requests," </title> <journal> ACM Transactions on Computer Systems, Vol.8, </journal> <volume> No.3, </volume> <year> 1990. </year>
Reference-contexts: Disk request queue reordering is another technique which can reduce seek times. Several disk head scheduling algorithms have been proposed and studied [Hofri 80, Geist 87, Seltzer 90]. But as it is pointed out in <ref> [King 90] </ref>, disk head scheduling is only helpful when the disk queue is long. In practice, disk queues are often too short for request reordering to be advantageous. Observing that disks are idle more often than not, King has suggested a different technique to reduce seek times [King 90]. <p> pointed out in <ref> [King 90] </ref>, disk head scheduling is only helpful when the disk queue is long. In practice, disk queues are often too short for request reordering to be advantageous. Observing that disks are idle more often than not, King has suggested a different technique to reduce seek times [King 90]. His technique uses disk idle times to reposition the disk head in anticipation of future requests. <p> Thus, the additional benefit of head scheduling is small when block rearrangement is being used. 7.6 Utilization of Idle Times Anticipatory disk head positioning is another technique that can be used to shorten seek times. It is argued in <ref> [King 90] </ref> that disks are idle most of the time, and that idle time can be used to reposition the disk head in anticipation of future requests. If the head can be moved closer to the next requested block, seek times can be reduced.
Reference: [McKusick 84] <author> McKusick, K. Marshall, et al, </author> <title> "A Fast File System for UNIX," </title> <journal> ACM Transactions on Computer Systems 2(3), </journal> <month> August </month> <year> 1984. </year>
Reference-contexts: In other words, if a pair of rearranged blocks was originally placed close together by the file system, they will remain close together in the reserved area of the disk. For example, file systems generally allocate a file's blocks close to each other <ref> [McKusick 84] </ref>. If all of a file's blocks are hot, they will remain in close proximity after rearrangement. Another technique is to cluster the blocks according to their rank in the hot block list, i.e., according to their frequency of reference, using the organ pipe heuristic.
Reference: [Ouster 85] <author> Ousterhout, John K., et al, </author> <title> "A Trace Driven Analysis of the UNIX 4.2 BSD File System," </title> <booktitle> Proceedings of the 10th ACM Symposium on Operating System Principles, </booktitle> <year> 1985. </year>
Reference: [Ruemmler 91] <author> Ruemmler, C., J. Wilkes, </author> <title> "Disk Shu*ing", </title> <institution> HPL-91-156, Hewlett-Packard Laboratories, </institution> <address> Palo Alto, CA, </address> <month> October, </month> <year> 1991. </year>
Reference-contexts: In these experiments, cylinder reference frequencies were measured daily. Based on the measured frequencies, all of the disk's cylinders were rearranged according to the organ pipe heuristic to service the next day's requests. Recent work in the DataMesh project <ref> [Ruemmler 91] </ref> considered rearrangement of cylinders and blocks, with mixed results. Their conclusion that block shu*ing generally outperforms cylinder shu*ing corroborates one of our own. <p> We conclude with a summary of our results and possible extensions to our study. 2 Adaptive Rearrangement Overview The idea of block rearrangement is motivated by the fact that access to data stored on disks is highly skewed <ref> [Floyd 89, Staelin 91, Ruemmler 91] </ref>. Of the thousands of data blocks stored on a disk, a small fraction of them absorbs most of the requests. If the "hot" (frequently accessed) blocks are spread over the surface of the disk, distant from each other, long seek delays may result. <p> We did not attempt to systematically vary the length of the interval. Previous experiments we performed on our traces (in conjunction with other work) suggested that hot spots changed slowly over the course of the trace. The experiments in <ref> [Ruemmler 91] </ref> also suggest that longer monitoring intervals (daily or weekly) result in good performance. 4 Block Placement Placement of the selected blocks in the reserved cylinders is another important part of the block rearrangement technique.
Reference: [Salem 92] <author> Salem, Kenneth, Daniel Barbara, Richard J. Lipton, </author> <title> "Probalistic Diagnosis of Hot Spots," </title> <booktitle> Proceedings of Eighth International Conference on Data Engineering, </booktitle> <address> Tempe, Arizona, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: In general, H (i) and ~ H (i) will not be the same. There is a variety of other space-efficient monitoring techniques that could be used by the reference analyzer. <ref> [Salem 92] </ref> presents and compares several of these, including the two just described. In addition to these two techniques, we experimented with the random partitioning algorithm described in [Salem 92]. In our performance experiments we used a variant of LRU method to estimate hot blocks. <p> There is a variety of other space-efficient monitoring techniques that could be used by the reference analyzer. <ref> [Salem 92] </ref> presents and compares several of these, including the two just described. In addition to these two techniques, we experimented with the random partitioning algorithm described in [Salem 92]. In our performance experiments we used a variant of LRU method to estimate hot blocks. Under this method, when a fresh counter is needed, the least recently used "cold" block is replaced.
Reference: [Seltzer 90] <author> Seltzer, Margo, Peter Chen, John Ousterhout, </author> <title> "Disk Scheduling Revisited," </title> <booktitle> Proceeding of the Winter 1990 USENIX Conference, </booktitle> <address> Washington, D.C., </address> <year> 1990. </year>
Reference-contexts: It is designed to be implemented in a device driver (like Carson's cylinder re-arrangement) or in an intelligent device controller. Disk request queue reordering is another technique which can reduce seek times. Several disk head scheduling algorithms have been proposed and studied <ref> [Hofri 80, Geist 87, Seltzer 90] </ref>. But as it is pointed out in [King 90], disk head scheduling is only helpful when the disk queue is long. In practice, disk queues are often too short for request reordering to be advantageous. <p> Seek time (in milliseconds) is a function of seek distance. The seek time function for the Fujitsu M2266AS was derived by the authors using measurements taken on the disk. The function for the Fujitsu 2351 Eagle is borrowed from <ref> [Seltzer 90] </ref>. The seek time function for the Quantum disk was provided by HP Labs together with the traces. Finally, seek time function for the RA81 disk was derived from the manufacturer's specifications.
Reference: [Schwet 90] <author> Schwetman, Herb, </author> <title> "CSIM Reference Manual," </title> <institution> Microelectronics and Computer Technology Corporation, </institution> <note> Technical Report ACA-ST-257-87. </note>
Reference-contexts: Time stamps have a resolution of 1 microsecond, 5 microseconds and 10 milliseconds, on traces from snake, sakarya and ballast, respectively. 5.2 Simulator Operations of the disks are modeled using a discrete-event simulator which is implemented using the CSIM simulation library <ref> [Schwet 90] </ref>. The simulator reads a trace file sequentially and simulates the arrival of the traced requests using the time stamps. It manages the disk queue using a head scheduling policy which is a parameter of the simulator. By default the cscan head scheduling policy is used.
Reference: [Staelin 91] <author> Staelin, Carl, Hector Garcia-Molina, </author> <title> "Smart Filesystems," </title> <booktitle> Proceedings of the Winter 1991 USENIX Conference, </booktitle> <address> Dallas, TX, </address> <year> 1991. </year>
Reference-contexts: Recent work in the DataMesh project [Ruemmler 91] considered rearrangement of cylinders and blocks, with mixed results. Their conclusion that block shu*ing generally outperforms cylinder shu*ing corroborates one of our own. A similar approach is employed in the experimental iPcress file system <ref> [Staelin 91] </ref>, which monitors access to files and moves files with high "temperatures" (frequency of access divided by file size) to the center of the disk. <p> We conclude with a summary of our results and possible extensions to our study. 2 Adaptive Rearrangement Overview The idea of block rearrangement is motivated by the fact that access to data stored on disks is highly skewed <ref> [Floyd 89, Staelin 91, Ruemmler 91] </ref>. Of the thousands of data blocks stored on a disk, a small fraction of them absorbs most of the requests. If the "hot" (frequently accessed) blocks are spread over the surface of the disk, distant from each other, long seek delays may result.
Reference: [Staelin 90] <author> Staelin, Carl, Hector Garcia-Molina, </author> <title> "Clustering Active Disk Data To Improve Disk Performance," </title> <type> Technical Report CS-TR-283-90, </type> <institution> Department of Computer Science, Princeton University, </institution> <month> September </month> <year> 1990. </year>
Reference: [Vongsath 90] <author> Vongsathorn, Paul, Scott D. Carson, </author> <title> "A System for Adaptive Disk Rearrangement," </title> <journal> Software-Practice and Experience, </journal> <volume> Vol. 20(3), </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: However, variations on the organ pipe heuristic have been shown to be effective at reducing seek times for more realistic reference patterns. Recently, several papers have proposed adaptive applications of this idea. Vongsathorn and Carson <ref> [Vongsath 90] </ref> showed that rearranging disk cylinders according to the organ-pipe heuristic cut measured expected seek times by as much as 40-45%. In these experiments, cylinder reference frequencies were measured daily. <p> The simulations showed that expected seek times could be cut in half by rearranging about 2% to 3% of the blocks. For some systems the reductions were even better. This performance is somewhat better than that reported in <ref> [Vongsath 90] </ref> for an adaptive technique that rearranges cylinders rather than blocks. That technique requires that all of the disk's cylinders be rearranged. Our simulations also showed that the success of the block rearrangement technique is closely tied to the skew in the block access distributions.
Reference: [Wong 80] <author> Wong, C. K., </author> <title> "Minimizing Expected Head Movement in One-Dimensional and Two-Dimensional Mass Storage Systems," </title> <journal> Computing Surveys, Vol.12, No.2, </journal> <month> June </month> <year> 1980. </year> <month> 27 </month>
Reference-contexts: If data references are derived from an independent random process with a known, fixed distribution, it has been shown that the organ pipe heuristic places the data optimally <ref> [Wong 80, Grossman 73] </ref>. The organ pipe heuristic calls for the most frequently accessed data to be placed in the center of the disk.
References-found: 18

