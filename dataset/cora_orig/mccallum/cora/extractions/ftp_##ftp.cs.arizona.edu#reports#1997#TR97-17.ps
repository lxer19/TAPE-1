URL: ftp://ftp.cs.arizona.edu/reports/1997/TR97-17.ps
Refering-URL: http://www.cs.arizona.edu/research/reports.html
Root-URL: http://www.cs.arizona.edu
Title: Escort: A Path-Based OS Security Architecture  
Author: Oliver Spatscheck and Larry L. Peterson 
Address: Tucson, AZ 85721  
Affiliation: Department of Computer Science The University of Arizona  
Date: TR 97-17  
Abstract: Escort is the security architecture for Scout, a configurable operating system designed for network appliances. Scout is unique in that it is designed around pathsa communication-centric abstraction that encapsulates information flows through the systemrather than the more traditional processes and servers. Scout uses paths to make end-to-end resource allocation decisions. Escort extends this idea to isolate these information flows, as well as to provide end-to-end accountability. This paper introduces the Escort security architecture, shows how it can be used to enforce common security policies, and evaluates its design according to several well-established criteria. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Accetta, R. Baron, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: A New Kernel Foundation for UNIX Development. </title> <booktitle> In Proceedings of the Summer 1986 USENIX Technical Conference and Exhibition, </booktitle> <month> June </month> <year> 1986. </year>
Reference-contexts: Finally, the principle of complete mediation is only enforced on a very coarse-grain level. Microkernel-based systems like Mach <ref> [1] </ref> attempt to address some of these limitations. Instead of a single large kernel, they consist of a small (micro) kernel and a collection of servers.
Reference: [2] <author> D. E. Bell and L. J. LaPadula. </author> <title> Secure computer systems: Mathematical foundations and model. </title> <type> Technical Report M74-244, </type> <institution> The MITRE Corp., </institution> <address> Bedford MA, </address> <month> May </month> <year> 1973. </year>
Reference-contexts: The language has to be extended if new interfaces are introduced. The policy configuration language is low-level, and therefore, can easily be translated into the Escort mechanisms. This makes the definition of higher-level policies like Bell LaPadula <ref> [2] </ref> rather complicated to configure. We are currently investigating how higher level policies can be translated automatically into our policy configuration language. It is important to understand that different policy decisions are enforced at different times.
Reference: [3] <author> T. Berners-Lee, R. Fielding, and H. Nielsen. </author> <title> RFC 1945: Hypertext transfer protocol HTTP/1.0, May 1996. </title>
Reference-contexts: It contains the network device module (ETH), along with modules for the IP, TCP, SSL [6], and HTTP <ref> [3] </ref> protocols. The configuration includes a PublicStore module and a PrivateStore module that serve the private and public documents, respectively. In a real system, these latter two modules would be implemented by a set of modules representing a local or network file system.
Reference: [4] <author> M. Blaze, J. Feigenbaum, and J. Lacy. </author> <title> Decentralized trust management. </title> <booktitle> In SympSecPr, Research in Security and Privacy, </booktitle> <address> Oakland, CA, May 1996. </address> <publisher> IEEECSP. </publisher>
Reference-contexts: However, paths have the advantage of supporting global access control and resource allocation decisions before any state is changed. Our path creation process, which requires a specification of a set of attributes (invariants) for the path is similar to the query mechanism in PolicyMaker <ref> [4] </ref>. Specifically Scout's path attributes are analogous to PolicyMaker's action string and its annotations.
Reference: [5] <author> W. E. Boebert and R. Y. Kain. </author> <title> A practical alternative to hierachical inetgrity policies. </title> <booktitle> In Proceedings 8th National Computing Security Conference, </booktitle> <month> October </month> <year> 1985. </year>
Reference-contexts: As early as 1985, Boebert and Kain <ref> [5] </ref> introduced the idea of protecting information flows in assured pipelines to enforce certain policies. T-Mach [15] and DTOS also allow policies that define an implicit flow of information, but no operating system has centered its design around the idea of a flow rather than processes and servers. <p> Filters are especially useful during this process, as they define additional invariants that can be used to specialize the path. These optimization opportunities are still topic of current research. 6 Related Work On the surface, Escort and Scout have similarities with Unix pipes [13], assured pipes <ref> [5] </ref>, Corps [16], DaCapo [7] and Nemesis [12]. Of these, Corps is the only one that has explicit paths, and none of them uses explicit paths to limit and separate data flows.
Reference: [6] <author> A. Freier, P. Karlton, and P. Koch. </author> <title> The SSL Protocol. </title> <type> IETF Internet Draft, </type> <pages> pages 163, </pages> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: It contains the network device module (ETH), along with modules for the IP, TCP, SSL <ref> [6] </ref>, and HTTP [3] protocols. The configuration includes a PublicStore module and a PrivateStore module that serve the private and public documents, respectively. In a real system, these latter two modules would be implemented by a set of modules representing a local or network file system.
Reference: [7] <author> A. Gotti. </author> <title> The da capo communication system. </title> <type> Technical report, </type> <institution> Swiss Federal Institute of Technology, Zuerich, Switzerland, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: These optimization opportunities are still topic of current research. 6 Related Work On the surface, Escort and Scout have similarities with Unix pipes [13], assured pipes [5], Corps [16], DaCapo <ref> [7] </ref> and Nemesis [12]. Of these, Corps is the only one that has explicit paths, and none of them uses explicit paths to limit and separate data flows.
Reference: [8] <author> J. Hartman, L. Peterson, A. Bavier, P. Bridges, B. Montz, R. Pilz, T. Proebsting, and O. Spatscheck. Joust: </author> <title> A platform for communication-oriented liquid software. </title> <type> Technical Report TR97, </type> <institution> The Department of Computer Science, University of Arizona, </institution> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: A Java system built around this configuration is described more fully in <ref> [8] </ref>. 2.2 Path Abstraction Scout adds a communication-oriented abstractionthe pathto the configurable system just described. Intuitively, a path can be viewed as a logical channel through a modular system over which I/O data flows.
Reference: [9] <author> C. Landau. </author> <title> Security in a Secure Capability-Based System. Operating Systems Review, </title> <address> 23(4):24, </address> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: Of these, Corps is the only one that has explicit paths, and none of them uses explicit paths to limit and separate data flows. Capability-based systems like KeyKOS <ref> [9] </ref>, TMACH [15] and DTOS [10] are also similar to Escort since a path represents a capability to access data and execute code at each module. However, paths have the advantage of supporting global access control and resource allocation decisions before any state is changed.
Reference: [10] <author> S. E. Minear. </author> <title> Providing policy control over object operations in a Mach-Based system. </title> <booktitle> In USENIX Association, editor, Proceedings of the fifth USENIX UNIX Security Symposium: </booktitle> <address> June 57, 1995, Salt Lake City, Utah, USA, </address> <pages> pages 141156, </pages> <address> Berkeley, CA, USA, June 1995. </address> <publisher> USENIX. </publisher>
Reference-contexts: In addition, server-based designs actually make accountability harder since a cascading of serversi.e., one server invoking anothermakes end-to-end accountability more difficult. The DTOS operating system <ref> [10] </ref> addresses some of these problems by adding finer grain control over the individual ports in Mach. <p> Of these, Corps is the only one that has explicit paths, and none of them uses explicit paths to limit and separate data flows. Capability-based systems like KeyKOS [9], TMACH [15] and DTOS <ref> [10] </ref> are also similar to Escort since a path represents a capability to access data and execute code at each module. However, paths have the advantage of supporting global access control and resource allocation decisions before any state is changed.
Reference: [11] <author> D. Mosberger and L. Peterson. </author> <title> Making paths explicit in the scout operating system. </title> <booktitle> In Proceedings of OSDI '96, </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: This paper describes an OS security architecture built around the idea of an information flow. The architecture, called Escort, is designed for the Scout operating system <ref> [11] </ref>, which defines a first class path object to encapsulate I/O data as it moves through the OS.
Reference: [12] <author> D. Reed, A. Donnelly, and R. Fairbairns. </author> <title> Nemesis the kernel, </title> <month> Sept. </month> <year> 1997. </year> <month> 15 </month>
Reference-contexts: These optimization opportunities are still topic of current research. 6 Related Work On the surface, Escort and Scout have similarities with Unix pipes [13], assured pipes [5], Corps [16], DaCapo [7] and Nemesis <ref> [12] </ref>. Of these, Corps is the only one that has explicit paths, and none of them uses explicit paths to limit and separate data flows.
Reference: [13] <author> D. M. Ritchie and K. Thompson. </author> <title> The UNIX time-sharing system. </title> <journal> Communications of the ACM, </journal> <volume> 17(7):365375, </volume> <month> July </month> <year> 1974. </year>
Reference-contexts: Filters are especially useful during this process, as they define additional invariants that can be used to specialize the path. These optimization opportunities are still topic of current research. 6 Related Work On the surface, Escort and Scout have similarities with Unix pipes <ref> [13] </ref>, assured pipes [5], Corps [16], DaCapo [7] and Nemesis [12]. Of these, Corps is the only one that has explicit paths, and none of them uses explicit paths to limit and separate data flows.
Reference: [14] <author> Saltzer and Schroeder. </author> <title> The protection of information in computer systems. </title> <journal> Proc.of the IEEE, </journal> <volume> 63(9), </volume> <month> Sept. </month> <year> 1975. </year>
Reference-contexts: 1 Introduction The ability to secure a computing system depends greatly on the design of its operating system. Saltzer and Schroeder <ref> [14] </ref> introduced a set of criteria by which one can evaluate the secure design of a computer system. These criteria have recently been summarized by Wallach, et. al. [17], and are listed below. Economy of Mechanism: Designs which are smaller and simpler are easier to inspect and trust.
Reference: [15] <institution> Trusted mach philosophy of protection, </institution> <month> May </month> <year> 1993. </year> <note> NIST Document No: TMACH 93-014. </note>
Reference-contexts: As early as 1985, Boebert and Kain [5] introduced the idea of protecting information flows in assured pipelines to enforce certain policies. T-Mach <ref> [15] </ref> and DTOS also allow policies that define an implicit flow of information, but no operating system has centered its design around the idea of a flow rather than processes and servers. This paper describes an OS security architecture built around the idea of an information flow. <p> Of these, Corps is the only one that has explicit paths, and none of them uses explicit paths to limit and separate data flows. Capability-based systems like KeyKOS [9], TMACH <ref> [15] </ref> and DTOS [10] are also similar to Escort since a path represents a capability to access data and execute code at each module. However, paths have the advantage of supporting global access control and resource allocation decisions before any state is changed.
Reference: [16] <author> F. Travostino, E. Menze, and F. Reynolds. </author> <title> Paths: Programming with system resources in support of real-time distributed applications. </title> <booktitle> In Proceedings of the 1996 IEEE Workshop on Object-Oriented Real-Time Dependable Systems, </booktitle> <pages> pages 3645, </pages> <address> Laguna Beach, Ca, </address> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: Filters are especially useful during this process, as they define additional invariants that can be used to specialize the path. These optimization opportunities are still topic of current research. 6 Related Work On the surface, Escort and Scout have similarities with Unix pipes [13], assured pipes [5], Corps <ref> [16] </ref>, DaCapo [7] and Nemesis [12]. Of these, Corps is the only one that has explicit paths, and none of them uses explicit paths to limit and separate data flows.
Reference: [17] <author> D. Wallach, D. Balfanz, D. Dean, and E. Felten. </author> <title> Extensible security architecture for java. </title> <booktitle> In Proceedings of the Sixteenth ACM Symposium on Operating System Principles, </booktitle> <pages> pages 116128, </pages> <address> Saint Malo, France, </address> <month> Oct. </month> <year> 1997. </year> <month> 16 </month>
Reference-contexts: 1 Introduction The ability to secure a computing system depends greatly on the design of its operating system. Saltzer and Schroeder [14] introduced a set of criteria by which one can evaluate the secure design of a computer system. These criteria have recently been summarized by Wallach, et. al. <ref> [17] </ref>, and are listed below. Economy of Mechanism: Designs which are smaller and simpler are easier to inspect and trust. Fail-safe Defaults: By default, access to every object should be denied unless it is explicitly granted. Complete Mediation: Every access to every object should be checked.
References-found: 17

