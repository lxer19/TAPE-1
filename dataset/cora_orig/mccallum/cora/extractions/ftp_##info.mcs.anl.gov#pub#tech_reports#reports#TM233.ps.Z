URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/TM233.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts97.htm
Root-URL: http://www.mcs.anl.gov
Email: e-mail: fpsu,bischof,hovlandg@mcs.anl.gov  e-mail: po-ting.wu@Eng.Sun.COM.  
Title: Using ADIFOR and ADIC to Provide Jacobians for the SNES Component of PETSc  
Author: by Po-Ting Wu, Christian H. Bischof, and Paul D. Hovland 
Note: This work was supported by the Mathematical, Information, and Computational Sciences Division subprogram of the Office of Computational and Technology Research, U.S. Department of Energy, under Contract W-31-109-Eng-38. Current address: M/S MPK16-102,  
Date: November 1997  
Web: ANL/MCS-TM-233  
Address: 9700 South Cass Avenue Argonne, IL 60439  2550 Garcia Avenue, Mountain View, CA 94043, (415) 786-9507,  
Affiliation: ARGONNE NATIONAL LABORATORY  Mathematics and Computer Science Division  Sun Microsystems,  
Pubnum: Technical Memorandum No. 233  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> B. Averick, J. More, C. Bischof, A. Carle, and A. Griewank. </author> <title> Computing large sparse Jacobian matrices using automatic differentiation. </title> <journal> SIAM Journal on Scientific Computing, </journal> <volume> 15(2) </volume> <pages> 285-294, </pages> <year> 1994. </year>
Reference-contexts: This version is most appropriate when the Jacobian is sparse but the sparsity pattern is unknown. The third version employs g$ADFunction to compute a compressed representation of the Jacobian using the strategy discussed in <ref> [1] </ref>. This method uses a coloring of the Jacobian to store structurally othogonal columns of the Jacobian in a single column of the compressed representation. The structure of the Jacobian can be supplied by the user or determined automatically.
Reference: [2] <author> S. Balay, W. D. Gropp, L. C. McInnes, and B. F. Smith. </author> <title> Efficient management of parallelism in object-oriented numerical software libraries. </title> <editor> In E. Arge, A. M. Bruaset, and H. P. Langtangen, editors, </editor> <booktitle> Modern Software Tools for Scientific Computing. </booktitle> <address> Birkhauser Boston, Cambridge, MA, </address> <year> 1997. </year>
Reference-contexts: 1 Introduction The solution of large-scale nonlinear problems pervades many facets of computational science and demands robust and flexible solution strategies. The SNES component of PETSc <ref> [2] </ref> provides a powerful suite of data-structure-neutral numerical routines for such problems. These routines generally require some derivative matrix, such as the Jacobian or, when the nonlinear system arises from optimization, a Hessian. These derivatives can be approximated with finite differences.
Reference: [3] <author> C. Bischof, A. Carle, P. Khademi, and A. Mauer. ADIFOR 2.0: </author> <title> Automatic differentiation of Fortran 77 programs. </title> <journal> IEEE Computational Science & Engineering, </journal> <volume> 3(3) </volume> <pages> 18-32, </pages> <year> 1996. </year>
Reference-contexts: However, the program will typically be more efficient and accurate if the programmer supplies a subroutine to compute the derivatives. Unfortunately, such a subroutine is often very complicated and difficult to program correctly by hand. We describe how automatic differentiation (AD) tools such as ADIFOR <ref> [3] </ref> and ADIC [6] can be utilized within the PETSc framework to automatically generate the subroutine for computing the derivatives.
Reference: [4] <author> C. Bischof, A. Carle, P. Khademi, A. Mauer, and P. Hovland. </author> <title> ADIFOR 2.0 user's guide (Revision C). </title> <type> Technical Memorandum ANL/MCS-TM-192, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1995. </year>
Reference-contexts: We do not expect the length of lx a to exceed 100, and so we use this value for AD PMAX. For more information on ADIFOR script options, see the ADIFOR users manual <ref> [4] </ref>. If the filename for the ADIFOR script is ex5f.adf, we can invoke ADIFOR using the following command. Adifor2.0 AD_SCRIPT=ex5f.adf ADIFOR normally generates code that uses arrays to store dense derivative objects, but it also capable of generating code that interfaces with the SparsLinC library [4]. <p> see the ADIFOR users manual <ref> [4] </ref>. If the filename for the ADIFOR script is ex5f.adf, we can invoke ADIFOR using the following command. Adifor2.0 AD_SCRIPT=ex5f.adf ADIFOR normally generates code that uses arrays to store dense derivative objects, but it also capable of generating code that interfaces with the SparsLinC library [4]. This library provides support for creating, updating, and extracting dynamically allocated sparse derivative objects. Figure 8 shows an ADIFOR script for generating code using sparse derivative objects. <p> Typically this will be the same as max x, the length of lx a, and should be consistent with the value used for AD PMAX in the ADIFOR script. The variables g$lx_a and g$lf_a are used to store the seed matrix (see <ref> [4] </ref> for more information on seed matrices) and Jacobian, respectively. The variables der and ind are used in transferring the Jacobian to a PETSc matrix. The variables nsize x and nsize f are used to store the size of the local portions of X and F, respectively.
Reference: [5] <author> C. Bischof and L. Roh. </author> <title> ADIC user guide, 1996. Unpublished information, </title> <institution> Argonne National Laboratory. </institution>
Reference-contexts: The g$ADFunction and g ADFunction subroutines produced by ADIFOR are provided in Appendixes A and B, respectively. ADIC can be invoked by the following command, where ex5.init is the initialization file in Figure 9. See <ref> [5] </ref> for more information on ADIC options.
Reference: [6] <author> C. Bischof, L. Roh, and A. Mauer. </author> <title> ADIC | An extensible automatic differentiation tool for ANSI-C. </title> <type> Preprint ANL/MCS-P626-1196, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1996. </year> <month> 39 </month>
Reference-contexts: However, the program will typically be more efficient and accurate if the programmer supplies a subroutine to compute the derivatives. Unfortunately, such a subroutine is often very complicated and difficult to program correctly by hand. We describe how automatic differentiation (AD) tools such as ADIFOR [3] and ADIC <ref> [6] </ref> can be utilized within the PETSc framework to automatically generate the subroutine for computing the derivatives.
References-found: 6

