URL: ftp://ftp.cs.washington.edu/tr/1996/01/UW-CSE-96-01-05.d/UW-CSE-96-01-05b.ps.gz
Refering-URL: http://www.cs.washington.edu/research/projects/grail2/www/pub/abstracts.html
Root-URL: 
Title: Rendering Parametric Surfaces in Pen and Ink  
Author: Georges Winkenbach and David H. Salesin 
Date: May 1996  
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science Engineering University of Washington  
Pubnum: Technical Report 96-01-05b  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Norman Chin and Steven Feiner. </author> <title> Near real-time shadow generation using BSP trees. </title> <journal> Computer Graphics, </journal> <volume> 23(3) </volume> <pages> 99-106, </pages> <year> 1989. </year>
Reference-contexts: The output is an illustration in the style of pen and ink. To render a scene, the polyhedral renderer begins by computing the visible surfaces and the shadow polygons, using 3D BSP trees for both operations <ref> [1, 7] </ref>. The outcome is a set of convex polygons that can be ordered in depth with respect to the view point. The renderer uses these polygons to build both a 2D BSP tree and a planar map representations of the visible surfaces in the scene.
Reference: [2] <author> Manfredo P. </author> <title> do Carmo. Differential Geometry of Curves and Surfaces. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1976. </year>
Reference-contexts: Another alternative is to do away with the parameterization altogether, and to instead generate strokes along directions that are more intrinsic to the geometry of the surface for example, along directions of principal curvature <ref> [2] </ref>. This approach may also be suitable for mapping stroke textures on polygonal meshes, since surface curvature can still be approximated in this case [14]. Acknowledgments We would like to thank Jorge Stolfi for many useful discussions during the early phase of this project.
Reference: [3] <author> Debra Dooley and Michael F. Cohen. </author> <title> Automatic illustration of 3D geometric models: Lines. </title> <journal> Computer Graphics, </journal> <volume> 24(2) </volume> <pages> 77-82, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Finally, we describe a simple method to handle the casting of curved shadows onto curved objects. 1.1 Related work A few authors have addressed similar goals in their published work. Dooley and Cohen proposed a system to enhance a traditional shaded images with illustration techniques <ref> [3, 4] </ref>. They showed how line and surface qualities could be customized by the user to create more effective images. Saito and Takahashi [18] used G-buffers and image processing techniques to enhance ray-traced images with illustration features. Their system handles outlining, hatching, and shadows.
Reference: [4] <author> Debra Dooley and Michael F. Cohen. </author> <title> Automatic illustration of 3D geometric models: Surfaces. </title> <booktitle> In Proceedings of Visualization '90, </booktitle> <pages> pages 307-314, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Finally, we describe a simple method to handle the casting of curved shadows onto curved objects. 1.1 Related work A few authors have addressed similar goals in their published work. Dooley and Cohen proposed a system to enhance a traditional shaded images with illustration techniques <ref> [3, 4] </ref>. They showed how line and surface qualities could be customized by the user to create more effective images. Saito and Takahashi [18] used G-buffers and image processing techniques to enhance ray-traced images with illustration features. Their system handles outlining, hatching, and shadows.
Reference: [5] <author> Gershon Elber. </author> <title> Line art rendering via a coverage of isoparametric curves. </title> <journal> IEEE Transaction on Visualization and Computer Graphics, </journal> <volume> 1(3) </volume> <pages> 231-239, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: Piranesi uses a standard graphics pipeline to create a 2D reference image akin to a G-buffer. The user is then allowed to select specific regions of the image and apply textures that emulate natural media interactively or automatically. Elber <ref> [5] </ref> described an algorithm to cover NURBS surfaces with iso-parametric curves, thus emulating a form of line-art rendering.
Reference: [6] <author> Gershon Elber and Elaine Cohen. </author> <title> Hidden curve removal for free form surfaces. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 95-104, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: This step is required to obtain smooth and accurate silhouettes without requiring an unduly fine tessellation. Our technique is very similar to the one developed for hidden-curve removal by Elber and Co hen <ref> [6] </ref>, only it operates on a polygonal mesh, rather than on a parametric surface directly. To find the silhouette curves, we first identify the mesh edges that span the silhouette. To do this, we examine the normal vectors at the two endpoints of every edge.
Reference: [7] <author> H. Fuchs, Z. M. Kedem, and B. F. Naylor. </author> <title> On visible surface generation by a priori tree structures. </title> <journal> Computer Graphics, </journal> <volume> 14(3) </volume> <pages> 124-133, </pages> <month> July </month> <year> 1980. </year>
Reference-contexts: The output is an illustration in the style of pen and ink. To render a scene, the polyhedral renderer begins by computing the visible surfaces and the shadow polygons, using 3D BSP trees for both operations <ref> [1, 7] </ref>. The outcome is a set of convex polygons that can be ordered in depth with respect to the view point. The renderer uses these polygons to build both a 2D BSP tree and a planar map representations of the visible surfaces in the scene.
Reference: [8] <author> Michel Gangnet, Jean-Claude Herve, Thierry Pudet, and Jean-Manuel Van Thong. </author> <title> Incremental computation of planar maps. </title> <journal> Computer Graphics, </journal> <volume> 23(3) </volume> <pages> 345-354, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: To build the planar map robustly, we use a method inspired by the work of Gangnet et al. <ref> [8] </ref>. Notably, we restrict all the line endpoints to (edges labeled o 1 to o 4 ), and clipping strokes (edges labeled s 1 to s 3 ). rendering.
Reference: [9] <author> Arthur Leighton Guptill. </author> <title> Rendering in Pen and Ink. </title> <publisher> Watson-Guptill Publications, </publisher> <address> New York, </address> <year> 1976. </year> <title> Note the curved shadow that the hat projects on its rim, </title> <booktitle> and the use of crosshatching on the curved portion of the cane. </booktitle>
Reference-contexts: Finally, Section 5 suggests some areas for future work. 2 Background In this section, we briefly review some of the principles of pen-and-ink illustration; much more detailed studies can be found in a number of texts <ref> [9, 13, 17] </ref>. We then describe some of the key architectural features of the pen-and-ink illustration system we introduced in our previous work, upon which the results in this paper are based. 2.1 Principles of pen-and-ink illustration Some of the key principles of pen-and-ink illustration include: * Strokes.
Reference: [10] <author> Christoph Hoffman. </author> <title> The problems of accuracy and robustness in geometric computation. </title> <journal> Computer, </journal> <volume> 22 </volume> <pages> 31-42, </pages> <year> 1989. </year>
Reference-contexts: 3.2.2 Robustness issues A common problem in geometric algorithms, and one to which our planar map construction algorithm is certainly not immune, is that it is not always easy to maintain consistency between the topological and geometric information in the data structure when imprecise computations like floating-point arithmetic are used <ref> [10, 19] </ref>. To build the planar map robustly, we use a method inspired by the work of Gangnet et al. [8]. Notably, we restrict all the line endpoints to (edges labeled o 1 to o 4 ), and clipping strokes (edges labeled s 1 to s 3 ). rendering.
Reference: [11] <author> John Lansdown and Simon Schofield. </author> <title> Expressive rendering: A review of nonphotorealistic techniques. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 15(3) </volume> <pages> 29-37, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: A ray-tracing approach is used to render curves on free-form objects. These curves lie at the intersection of parallel planes with the 3D object being rendered. An advantage of this approach is that it easily handles reflections and shadowing. The Piranesi system proposed by Lansdown and Schofield <ref> [11] </ref> also uses non-photorealistic techniques to create illustrations from 3D models. Piranesi uses a standard graphics pipeline to create a 2D reference image akin to a G-buffer. The user is then allowed to select specific regions of the image and apply textures that emulate natural media interactively or automatically.
Reference: [12] <author> Wolfgang Leister. </author> <title> Computer generated copper plates. </title> <journal> Computer Graphics Forum, </journal> <volume> 13(1) </volume> <pages> 69-77, </pages> <year> 1994. </year>
Reference-contexts: Their system handles outlining, hatching, and shadows. However, the use of strokes that we propose allows perhaps more expressiveness and extends the range of illustrations that can be created automatically. Leister presented a technique to emulate copper-plate rendering <ref> [12] </ref>, an engraving technique used for old styles of printing. A ray-tracing approach is used to render curves on free-form objects. These curves lie at the intersection of parallel planes with the 3D object being rendered. An advantage of this approach is that it easily handles reflections and shadowing.
Reference: [13] <author> Frank Lohan. </author> <title> Pen and Ink Techniques. Contemporary Books, </title> <publisher> Inc., </publisher> <address> Chicago, </address> <year> 1978. </year>
Reference-contexts: Finally, Section 5 suggests some areas for future work. 2 Background In this section, we briefly review some of the principles of pen-and-ink illustration; much more detailed studies can be found in a number of texts <ref> [9, 13, 17] </ref>. We then describe some of the key architectural features of the pen-and-ink illustration system we introduced in our previous work, upon which the results in this paper are based. 2.1 Principles of pen-and-ink illustration Some of the key principles of pen-and-ink illustration include: * Strokes.
Reference: [14] <author> Jerome Maillot, Hussein Yahia, and Anne Verrout. </author> <title> Interactive texture mapping. </title> <booktitle> Proceedings of SIGGRAPH 93 (Anaheim, </booktitle> <address> California, </address> <month> August 1-6, </month> <year> 1993). </year> <title> In Computer Graphics, </title> <booktitle> Annual Conference Series, </booktitle> <year> 1993. </year>
Reference-contexts: Unfortunately, many commonly used surface representations, such as patch-based surfaces, implicit surfaces, subdivision surfaces, and smoothly-shaded polygonal meshes, do not have this property. One possible solution is to parameterize such surfaces, using for example the methods of Maillot et al. <ref> [14] </ref> or Pedersen [16]. Another alternative is to do away with the parameterization altogether, and to instead generate strokes along directions that are more intrinsic to the geometry of the surface for example, along directions of principal curvature [2]. <p> This approach may also be suitable for mapping stroke textures on polygonal meshes, since surface curvature can still be approximated in this case <ref> [14] </ref>. Acknowledgments We would like to thank Jorge Stolfi for many useful discussions during the early phase of this project. This work was supported by an Alfred P.
Reference: [15] <author> Bruce Naylor and Lois Rogers. </author> <title> Constructing partitioning trees from Bezier-curves for efficient intersection and visibility. </title> <booktitle> In Proceedings of Graphics Interface '95, </booktitle> <pages> pages 44-55, </pages> <year> 1995. </year>
Reference-contexts: This planar map was constructed with the help of 2D and 3D BSP trees [22]. Recent results introduced by Naylor and Rogers <ref> [15] </ref> show how to build 2D BSP trees with Bezier curves. However, it is not clear how this work can be generalized to handle scenes containing parametrically defined curved surfaces.
Reference: [16] <author> Hans Khling Pedersen. </author> <title> Decorating implicit surfaces. </title> <booktitle> Proceedings of SIGGRAPH 95 (Los Angeles, </booktitle> <address> California, </address> <month> July 6-11, </month> <year> 1995). </year> <title> In Computer Graphics, </title> <booktitle> Annual Conference Series, </booktitle> <year> 1995. </year>
Reference-contexts: Unfortunately, many commonly used surface representations, such as patch-based surfaces, implicit surfaces, subdivision surfaces, and smoothly-shaded polygonal meshes, do not have this property. One possible solution is to parameterize such surfaces, using for example the methods of Maillot et al. [14] or Pedersen <ref> [16] </ref>. Another alternative is to do away with the parameterization altogether, and to instead generate strokes along directions that are more intrinsic to the geometry of the surface for example, along directions of principal curvature [2].
Reference: [17] <author> Tom Porter and Sue Goodman. </author> <title> Manual of Graphic Techniques 4. </title> <publisher> Charles Scribner's Sons, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: Finally, Section 5 suggests some areas for future work. 2 Background In this section, we briefly review some of the principles of pen-and-ink illustration; much more detailed studies can be found in a number of texts <ref> [9, 13, 17] </ref>. We then describe some of the key architectural features of the pen-and-ink illustration system we introduced in our previous work, upon which the results in this paper are based. 2.1 Principles of pen-and-ink illustration Some of the key principles of pen-and-ink illustration include: * Strokes.
Reference: [18] <author> Takafumi Saito and Tokiichiro Takahashi. </author> <title> Comprehensible rendering of 3D shapes. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 197-206, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: Dooley and Cohen proposed a system to enhance a traditional shaded images with illustration techniques [3, 4]. They showed how line and surface qualities could be customized by the user to create more effective images. Saito and Takahashi <ref> [18] </ref> used G-buffers and image processing techniques to enhance ray-traced images with illustration features. Their system handles outlining, hatching, and shadows. However, the use of strokes that we propose allows perhaps more expressiveness and extends the range of illustrations that can be created automatically.
Reference: [19] <author> David H. Salesin. </author> <title> Epsilon Geometry: Building Robust Algorithms from Imprecise Computations. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> March </month> <year> 1991. </year> <note> Available as Stanford Report number STAN-CS-91-1398. </note>
Reference-contexts: 3.2.2 Robustness issues A common problem in geometric algorithms, and one to which our planar map construction algorithm is certainly not immune, is that it is not always easy to maintain consistency between the topological and geometric information in the data structure when imprecise computations like floating-point arithmetic are used <ref> [10, 19] </ref>. To build the planar map robustly, we use a method inspired by the work of Gangnet et al. [8]. Notably, we restrict all the line endpoints to (edges labeled o 1 to o 4 ), and clipping strokes (edges labeled s 1 to s 3 ). rendering.
Reference: [20] <author> Lance Williams. </author> <title> Casting curved shadows on curved surfaces. </title> <journal> Computer Graphics, </journal> <volume> 12(3) </volume> <pages> 270-274, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: The shadows were then rendered with strokes clipped to the shadow regions. Unfortunately, with curved surfaces, shadow boundaries are much more difficult to generate. Thus, we decided to use a simpler two-pass clipping approach inspired by Williams <ref> [20] </ref> instead. Shadow strokes are generated for all the visible surfaces. To clip these strokes, we build an additional shadow planar map with respect to the light source, in addition to the view planar map.
Reference: [21] <author> Georges Winkenbach. </author> <title> Computer-Generated Pen-and-Ink Illustration. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: In particular, we use 14-bit integers to represent the lattice points, which allows all intersections to be stored using 32-bit rational integer numbers. This choice limits us to a resolution of about 800 dots per inch over a 10 fi 10-inch image-space area. (See Winkenbach <ref> [21] </ref> for more details.) 3.3 Using the planar map As in the original polyhedral renderer, the planar map is used for rendering outline edges. In this work, the planar map is additionally used for clipping individual strokes to visible regions.
Reference: [22] <author> Georges Winkenbach and David H. Salesin. </author> <title> Computer-generated pen-and-ink illustration. </title> <booktitle> Proceedings of SIGGRAPH 94 (Orlando, </booktitle> <address> Florida, </address> <month> July 24-29, </month> <year> 1994). </year> <title> In Computer Graphics, </title> <booktitle> Annual Conference Series, </booktitle> <year> 1994. </year>
Reference-contexts: Illustrations convey information better, consume less storage, are more easily reproduced, are more capable of conveying information at various levels of detail, and are in many respects more attractive than photorealistic images. In a previous paper <ref> [22] </ref>, we introduced a system for automatically generating pen-and-ink illustrations of three-dimensional architectural models. In that paper, we showed how many of the principles of traditional pen-and-ink rendering, such as achieving tones through texture, could be simulated algorithmically. <p> This planar map was constructed with the help of 2D and 3D BSP trees <ref> [22] </ref>. Recent results introduced by Naylor and Rogers [15] show how to build 2D BSP trees with Bezier curves. However, it is not clear how this work can be generalized to handle scenes containing parametrically defined curved surfaces.
References-found: 22

