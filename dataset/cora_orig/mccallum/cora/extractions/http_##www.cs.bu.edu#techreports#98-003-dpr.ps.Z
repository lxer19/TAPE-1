URL: http://www.cs.bu.edu/techreports/98-003-dpr.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: (fbest,crovella,junliu,dmg@cs.bu.edu)  
Title: Distributed Packet Rewriting and its Application to Scalable Server Architectures  
Author: Azer Bestavros Mark Crovella Jun Liu David Martin 
Keyword: TCP/IP; TCP Routers; Round Robin DNS; Scalable Web servers; IP Masquerading.  
Date: December 1, 1997  
Address: Boston, MA 02215  
Affiliation: Computer Science Department Boston University  
Abstract: To construct high performance Web servers, system builders are increasingly turning to distributed designs. An important challenge that arises in distributed Web servers is the need to direct incoming connections to individual hosts. Previous methods for connection routing have employed a centralized node which handles all incoming requests. In contrast, we propose a distributed approach, called Distributed Packet Rewriting (DPR), in which all hosts of the distributed system participate in connection routing. We argue that this approach promises better scalability and fault-tolerance than the centralized approach. We describe our implementation of four variants of DPR and compare their performance. We show that DPR provides performance comparable to centralized alternatives, measured in terms of throughput and delay under the SPECweb96 benchmark. Finally, we argue that DPR is particularly attractive both for small scale systems and for systems following the emerging trend toward increasingly intelligent I/O subsystems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Anderson, T. Yang, V. Holmedahl, and O.H. Ibarra. SWEB: </author> <title> Towards a Scalable World Wide Server on Multicomputers. </title> <booktitle> In Proceedings of IPPS'96, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: Similarily, there are many ways to perform the second mapping (from initial IP address to actual host). For example, this mapping could be done at the application level, using the HTTP redirection approach <ref> [1] </ref> or using a dispatcher at the server [2, 17].
Reference: [2] <author> Eric Anderson, David Patterson, and Eric Brewer. </author> <title> The MagicRouter: An application of fast packet interposing. </title> <note> submitted to OSDI 1996, </note> <month> May </month> <year> 1996. </year>
Reference-contexts: Similarily, there are many ways to perform the second mapping (from initial IP address to actual host). For example, this mapping could be done at the application level, using the HTTP redirection approach [1] or using a dispatcher at the server <ref> [2, 17] </ref>. While initial attempts to construct scalable Web servers focussed on using the mapping from domain names to IP addresses [10], recent attempts have focussed on the second kind of mapping (IP addresses to hosts) because of the potential for finer control of load distribution. <p> One common feature of all of these attempts (whether proposed or implemented) is that a centralized mechanism is employed to perform the mapping from IP addresses to hosts. Examples include the Berkeley MagicRouter <ref> [2] </ref>, the Cisco Local Director [17], and IBM's TCP Router [6] and Network Dispatcher [4]. In contrast, DPR is a technique that allows the mapping between IP address and host to be implemented in a distributed, efficient, and scalable fashion. <p> Thus, solutions that impose a large overhead are not desired. 4. Graceful Degradation: The failure of a system component should result in a proportional degradation 1 If m = 1, the difference between DPR and the centralized solutions proposed in <ref> [2, 6, 4] </ref> is that DPR allows both packet routing and service to be combined on the same node. 2 in the offered quality of service. <p> For example, the NOW project at Berkeley has developed the MagicRouter <ref> [2] </ref>, which is a packet-filter-based approach [14] to distributing network packets in a cluster. The MagicRouter acts as a switchboard that distributes requests for Web service to the individual nodes in the cluster.
Reference: [3] <author> Steven Clarke. </author> <title> Linux Port Forwarding. </title> <note> See http://www.ox.compsoc.org.uk/~steve/ portforwarding.html. </note>
Reference-contexts: Each destination hosts maintains IP aliases for its rewriters in order to handle streams that do not bear its primary IP address. We note that independently and at approximately the same time as our work, Clarke has developed a general-purpose TCP forwarding kernel extension based on IP Masquerading <ref> [3] </ref> which can also be used to support implementation of distributed Web servers. 4 Performance Evaluation In this section we describe the performance of DPR variants. We restricted our experiments to a single LAN in order to provide repeatable results.
Reference: [4] <institution> IBM Corporation. The IBM Interactive Network Dispatcher. </institution> <note> See http://www.ics.raleigh.ibm. com/netdispatch. 12 </note>
Reference-contexts: One common feature of all of these attempts (whether proposed or implemented) is that a centralized mechanism is employed to perform the mapping from IP addresses to hosts. Examples include the Berkeley MagicRouter [2], the Cisco Local Director [17], and IBM's TCP Router [6] and Network Dispatcher <ref> [4] </ref>. In contrast, DPR is a technique that allows the mapping between IP address and host to be implemented in a distributed, efficient, and scalable fashion. In particular, DPR can be viewed as a distributed method of mapping m IP addresses to n servers. <p> Thus, solutions that impose a large overhead are not desired. 4. Graceful Degradation: The failure of a system component should result in a proportional degradation 1 If m = 1, the difference between DPR and the centralized solutions proposed in <ref> [2, 6, 4] </ref> is that DPR allows both packet routing and service to be combined on the same node. 2 in the offered quality of service. <p> The emphasis of the MagicRouter work is on reducing packet processing time through "Fast Packet Interposing"|but not on the issue of balancing load. Other solutions based on similar architectures include the Local Director by Cisco [17] and the Interactive Network Dispatcher by IBM <ref> [4] </ref>. An architecture slightly different from that of the MagicRouter is described in [6], in which a "TCP Router" acts as a front-end that forwards requests for Web service to the individual back-end servers of the cluster. <p> As these trends accelerate, approaches like DPR will become even more attractive. The functions of DPR do not completely replace those of a TCP router such as Network Dispatcher <ref> [4] </ref> or Local Director [17]. TCP routers present a single IP address while performing packet rewriting, load balancing, and (potentially) network gatewaying (that is, IP routing). DPR does not present a single IP address, and does not perform network gatewaying.
Reference: [5] <institution> The Standard Performance Evaluation Corporation. </institution> <address> Specweb96. http://www.specbench.org/ org/web96/. </address>
Reference-contexts: We used the SPECweb96 <ref> [5] </ref> benchmarking tool to measure the throughput and delay characteristics of DPR implementations. SPECweb96's principal independent parameter is the requested throughput, measured in HTTP GETs per second.
Reference: [6] <author> Daniel M. Dias, William Kish, Rajat Mukherjee, and Renu Tewari. </author> <title> A scalable and highly available web server. </title> <booktitle> In Proceedings of IEEE COMPCON'96, </booktitle> <pages> pages 85-92, </pages> <year> 1996. </year>
Reference-contexts: One common feature of all of these attempts (whether proposed or implemented) is that a centralized mechanism is employed to perform the mapping from IP addresses to hosts. Examples include the Berkeley MagicRouter [2], the Cisco Local Director [17], and IBM's TCP Router <ref> [6] </ref> and Network Dispatcher [4]. In contrast, DPR is a technique that allows the mapping between IP address and host to be implemented in a distributed, efficient, and scalable fashion. In particular, DPR can be viewed as a distributed method of mapping m IP addresses to n servers. <p> Thus, solutions that impose a large overhead are not desired. 4. Graceful Degradation: The failure of a system component should result in a proportional degradation 1 If m = 1, the difference between DPR and the centralized solutions proposed in <ref> [2, 6, 4] </ref> is that DPR allows both packet routing and service to be combined on the same node. 2 in the offered quality of service. <p> His measurements suggest that over 25% of the time, the most-loaded server sustained more than 54% of the of the total load in the system compared to a 33% of the total load under perfect balance|an imbalance of 0.54/0.33 = 1.6. Dias et al <ref> [6] </ref> confirmed these empirical results via simulations. They showed that the peak load on nodes of a cluster can be up to 40% higher than the mean load on all nodes (an imbalance of 1.4), and that this load imbalance is independent of the number of servers in the cluster. <p> They showed that the peak load on nodes of a cluster can be up to 40% higher than the mean load on all nodes (an imbalance of 1.4), and that this load imbalance is independent of the number of servers in the cluster. The simulations in <ref> [6] </ref> unveil another interesting observation. Even if the anomaly caused by DNS caching is resolved, the caching of Host-to-IP translations at the clients is enough to introduce significant imbalance. In particular, the experiments of Dias et al [6] show that even if DNS caching is turned off|by setting the Time-To-Live (TTL) <p> The simulations in <ref> [6] </ref> unveil another interesting observation. Even if the anomaly caused by DNS caching is resolved, the caching of Host-to-IP translations at the clients is enough to introduce significant imbalance. In particular, the experiments of Dias et al [6] show that even if DNS caching is turned off|by setting the Time-To-Live (TTL) for cached entries to 0|the load imbalance amongst servers persists due to the burstiness of client requests. 2 Rather than delegating to DNS the responsibility of distributing requests to individual servers in a cluster, several research groups <p> Other solutions based on similar architectures include the Local Director by Cisco [17] and the Interactive Network Dispatcher by IBM [4]. An architecture slightly different from that of the MagicRouter is described in <ref> [6] </ref>, in which a "TCP Router" acts as a front-end that forwards requests for Web service to the individual back-end servers of the cluster. Two features of the TCP Router differentiate it from the MagicRouter solution mentioned above. First, rewriting packets from servers to clients is eliminated. <p> Two features of the TCP Router differentiate it from the MagicRouter solution mentioned above. First, rewriting packets from servers to clients is eliminated. This is particularly important when serving large volumes of data (which is the purpose of the system described in <ref> [6] </ref> for Video Service). To allow for the elimination of packet rewriting from server hosts to clients requires modifying the server host kernels, which is not needed under the MagicRouter solution. Second, the TCP Router assigns connections to servers based on the state of these servers. <p> Second, the TCP Router assigns connections to servers based on the state of these servers. This means that the TCP Router must keep track of connection assignments. In <ref> [6] </ref>, the authors sketch various options for distributing the TCP Router functionality. However, no design or implementation details were given with respect to this proposed architecture. The architecture presented in [11] uses a TCP-based switching mechanism to implement a distributed proxy server.
Reference: [7] <editor> Damani et al. ONE-IP: </editor> <title> Techniques for Hosting a Service on a Cluster of Machines. </title> <booktitle> In Proceedings of the Sixth International WWW Conference, </booktitle> <month> April </month> <year> 1997. </year>
Reference: [8] <author> S.L. Garfinkel. </author> <title> The Wizard of Netscape. </title> <journal> WebServer Magazine, </journal> <pages> pages 58-64, </pages> <month> July/August </month> <year> 1996. </year>
Reference-contexts: There are many ways to perform the first mapping (from domain name to initial IP address). For example, this mapping could be coded in the application as is done within Netscape Navigator to access Netscape's Home Page <ref> [8] </ref>. Alternately, this mapping could be done through DNS by advertising a number of IP addresses for a single domain name. Similarily, there are many ways to perform the second mapping (from initial IP address to actual host).
Reference: [9] <institution> I 2 O Special Interest Group. </institution> <note> See http://www.i2osig.com. </note>
Reference-contexts: Furthermore, we believe that architectural trends will increasingly favor the colocation of packet routing functions with other system functions in individual hosts. This is because I/O interface hardware, and network interface cards in particular, are rapidly increasing in sophistication. The Intelligent I/O initiative (I 2 O) <ref> [9] </ref> is in fact standardizing hardware and software interfaces for the use of highly intelligent I/O cards in general purpose computing systems. As these trends accelerate, approaches like DPR will become even more attractive.
Reference: [10] <author> E. D. Katz, M. Butler, and R. McGrath. </author> <title> A scalable HTTP server: The NCSA prototype. </title> <booktitle> In Proceed ings of the First International World-Wide Web Conference, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: For example, this mapping could be done at the application level, using the HTTP redirection approach [1] or using a dispatcher at the server [2, 17]. While initial attempts to construct scalable Web servers focussed on using the mapping from domain names to IP addresses <ref> [10] </ref>, recent attempts have focussed on the second kind of mapping (IP addresses to hosts) because of the potential for finer control of load distribution. <p> In Section 4 we show performance results using DPR, indicating that DPR achieves performance comparable to the best known alternatives. Finally, in Section 5 we conclude. 2 Related Work Preliminary work on scalability of Web servers has been performed at NCSA <ref> [10] </ref> and DEC WRL [13]. In both cases, load is balanced across server hosts by providing a mapping from a single host name to multiple IP addresses. In accordance with DNS standard, the different host IP addresses are advertised in turn [16].
Reference: [11] <author> K.L.E. Law, B. Nandy, and A. Chapman. </author> <title> A Scalable and Distributed WWW Proxy System. </title> <type> Technical report, </type> <institution> Nortel Limited Research Report, </institution> <year> 1997. </year>
Reference-contexts: This means that the TCP Router must keep track of connection assignments. In [6], the authors sketch various options for distributing the TCP Router functionality. However, no design or implementation details were given with respect to this proposed architecture. The architecture presented in <ref> [11] </ref> uses a TCP-based switching mechanism to implement a distributed proxy server. The motivation for this work is to address the performance limitations of client-side caching proxies by allowing a number of servers to act as a single proxy for clients of an institutional network. The architecture in [11] uses a <p> presented in <ref> [11] </ref> uses a TCP-based switching mechanism to implement a distributed proxy server. The motivation for this work is to address the performance limitations of client-side caching proxies by allowing a number of servers to act as a single proxy for clients of an institutional network. The architecture in [11] uses a centralized dispatcher (a Depot) to distribute client requests to one of the servers in the cluster representing the proxy. The function of the Depot is similar to that of the MagicRouter.
Reference: [12] <author> Linux IP Masquerade Resource. </author> <note> See http://ipmasq.home.ml.org. </note>
Reference-contexts: A table of connections currently being rewritten is maintained by each host and is consulted in order to rewrite each packet. In implementing these functions we were able to adapt features from code already present in the Linux kernel that supports IP Masquerading. IP Masquerading <ref> [12] </ref> was developed to allow multiple hosts routing decisions at the IP level. 7 to function behind a firewall without valid IP addresses. Thus, IP Masquerading supports connections that are initiated from the "hidden" hosts.
Reference: [13] <author> Jeffery C. Mogul. </author> <title> Network behavior of a busy Web server and its clients. </title> <type> Research Report 95/5, </type> <institution> DEC Western Research Laboratory, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: In Section 4 we show performance results using DPR, indicating that DPR achieves performance comparable to the best known alternatives. Finally, in Section 5 we conclude. 2 Related Work Preliminary work on scalability of Web servers has been performed at NCSA [10] and DEC WRL <ref> [13] </ref>. In both cases, load is balanced across server hosts by providing a mapping from a single host name to multiple IP addresses. In accordance with DNS standard, the different host IP addresses are advertised in turn [16]. <p> The main reason is that mappings from host names to IP addresses are cached by DNS servers, and therefore can be accessed by many clients while in the cache. In <ref> [13] </ref>, Mogul empirically characterized the imbalance caused by RR-DNS for a cluster or 3 servers.
Reference: [14] <author> Jeffrey Mogul, Richard Rashid, and Michael Accetta. </author> <title> The Packet Filter: An Efficient Mechanism for User-level Network Code. </title> <booktitle> In Proceedings of SOSP'87: The 11th ACM Symposium on Operating Systems Principles, </booktitle> <year> 1987. </year>
Reference-contexts: For example, the NOW project at Berkeley has developed the MagicRouter [2], which is a packet-filter-based approach <ref> [14] </ref> to distributing network packets in a cluster. The MagicRouter acts as a switchboard that distributes requests for Web service to the individual nodes in the cluster.
Reference: [15] <author> C. Perkins. </author> <title> IETF RFC2003: IP Encapsulation within IP. </title> <note> See http://ds.internic.net/rfc/ rfc2003.txt. </note>
Reference-contexts: Stateless/WAN implementation. The Stateless/WAN implementation forwards packets based on the same hash function, but does so in a way that allows the rewritten packets to travel over an IP network. To do this we use simple IP tunneling, known as IPIP, described in RFC2003 <ref> [15] </ref>. In this implementation, the rewriting host prepends an additional IP header to the packet with the IP address of the destination, and retransmits the packet. The effect is to transform the old headers and data into the payload of the new packet.
Reference: [16] <author> Roland J. Schemers. lbnamed: </author> <title> A Load Balancing Name Server in Perl. </title> <booktitle> In Proceedings of LISA'95: The 9th Systems Administration Conference, </booktitle> <year> 1995. </year>
Reference-contexts: In both cases, load is balanced across server hosts by providing a mapping from a single host name to multiple IP addresses. In accordance with DNS standard, the different host IP addresses are advertised in turn <ref> [16] </ref>. In addition to its violation of the transparency property discussed in the previous section, both the NCSA group and the DEC WRL group observe that this "Round Robin DNS" (RR-DNS) approach leads to significant imbalance in load distribution among servers.
Reference: [17] <author> Cisco Systems. </author> <title> Scaling the Internet Web Servers: A white Paper. </title> <address> http://www.cisco.com/warp/ public/751/lodir/scale wp.htm, </address> <year> 1997. </year> <month> 13 </month>
Reference-contexts: Similarily, there are many ways to perform the second mapping (from initial IP address to actual host). For example, this mapping could be done at the application level, using the HTTP redirection approach [1] or using a dispatcher at the server <ref> [2, 17] </ref>. While initial attempts to construct scalable Web servers focussed on using the mapping from domain names to IP addresses [10], recent attempts have focussed on the second kind of mapping (IP addresses to hosts) because of the potential for finer control of load distribution. <p> One common feature of all of these attempts (whether proposed or implemented) is that a centralized mechanism is employed to perform the mapping from IP addresses to hosts. Examples include the Berkeley MagicRouter [2], the Cisco Local Director <ref> [17] </ref>, and IBM's TCP Router [6] and Network Dispatcher [4]. In contrast, DPR is a technique that allows the mapping between IP address and host to be implemented in a distributed, efficient, and scalable fashion. <p> The emphasis of the MagicRouter work is on reducing packet processing time through "Fast Packet Interposing"|but not on the issue of balancing load. Other solutions based on similar architectures include the Local Director by Cisco <ref> [17] </ref> and the Interactive Network Dispatcher by IBM [4]. An architecture slightly different from that of the MagicRouter is described in [6], in which a "TCP Router" acts as a front-end that forwards requests for Web service to the individual back-end servers of the cluster. <p> As these trends accelerate, approaches like DPR will become even more attractive. The functions of DPR do not completely replace those of a TCP router such as Network Dispatcher [4] or Local Director <ref> [17] </ref>. TCP routers present a single IP address while performing packet rewriting, load balancing, and (potentially) network gatewaying (that is, IP routing). DPR does not present a single IP address, and does not perform network gatewaying.
References-found: 17

