URL: ftp://ftp.cs.virginia.edu/pub/techreports/IPC-89-11.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: COMPARATIVE ANALYSES OF PARALLEL SIMULATION PROTOCOLS (Revised)  
Author: Paul F. Reynolds, Jr. Christopher F. Weight J. Robert Fidler II 
Note: This research was supported in part by Jet Propulsion Laboratory Contract #957721.  
Address: Charlottesville, VA 22903  
Affiliation: Institute for Parallel Computation School of Engineering and Applied Science University of Virginia  
Date: December 6, 1989  
Pubnum: IPC-TR-89-011  
Abstract-found: 0
Intro-found: 1
Reference: [ChMi79] <author> Chandy, K.M. and J. Misra, </author> <title> "Distributed Simulation: A Case Study in Design and Verification of Distributed Programs," </title> <journal> IEEE Trans on Software Engineering., </journal> <volume> SE-5,5, </volume> <month> May, </month> <year> 1979, </year> <pages> 440-452. </pages>
Reference-contexts: The protocols represent different degrees of aggressiveness and the applications represent a spectrum of application types. It is the latter, application types, where we have learned much about the interdependence between protocols and applications. For example, the null message protocol <ref> [ChMi79] </ref> must be modified considerably, depending on whether messages can be consumed, are queued, can be preempted, etc. We discuss these observations in more detail, also. We give a brief overview of the SPECTRUM Testbed next. Details can be found in [ReDi89]. <p> is received the local LP is unblocked and processing resumes. protocol type application type null messages SRADS Stochastic w/ w/o balance, uniformity appointments X Deterministic w/ w/o balance, uniformity locally aggressive time warp moving time window We have designed and implemented filters for other protocols as well, including null messages <ref> [ChMi79] </ref> and SRADS with local rollback [DiRe89]. As we have indicated above, we have had to modify filters as we introduced new applications. It is too early to tell if filters will stabilize or if they will have to be continually updated as new applications are brought into the testbed. <p> We note this because it suggests there are many applications that lie on points "between" these more popular applications in the application design space we have defined here. The significance of these missing points remains to be determined. The protocols we have implemented and made operational are null messages <ref> [ChMi79] </ref> (See also, [PeWo79].) and SRADS [Reyn82]. Both protocols work with the three applications described above.
Reference: [ChMi87] <author> Chandy, K.M. and J. Misra, </author> <title> "Conditional Knowledge as a basis for Distributed Simulation," </title> <type> Cal-Tech Report, </type> <institution> 5251:TR:87, </institution> <month> Sept </month> <year> 1987. </year>
Reference-contexts: However, as with null messages above, this is an application-dependent decision affecting performance. Recently we began implementing a variant of SRADS in which we allowed LP's to do locally aggressive processing meaning they could act on conditional knowledge <ref> [ChMi87] </ref> but not pass messages to other LP's if the content of those messages was dependent on conditional knowledge. We have dubbed this approach "SRADS with Local Rollback: SRADS/LR".
Reference: [DiRe89] <author> Dickens, P.M. and Reynolds, P.F., </author> <title> "SRADS with Local Rollback", submitted to SCS Multiconference, </title> <address> Wash. D.C., </address> <year> 1990. </year>
Reference-contexts: unblocked and processing resumes. protocol type application type null messages SRADS Stochastic w/ w/o balance, uniformity appointments X Deterministic w/ w/o balance, uniformity locally aggressive time warp moving time window We have designed and implemented filters for other protocols as well, including null messages [ChMi79] and SRADS with local rollback <ref> [DiRe89] </ref>. As we have indicated above, we have had to modify filters as we introduced new applications. It is too early to tell if filters will stabilize or if they will have to be continually updated as new applications are brought into the testbed.
Reference: [JeSo82] <author> Jefferson, D. and H Sowizral, </author> <title> "Fast Concurrent Simulation Using the Time Warp Mechanism," A Rand Note, </title> <publisher> N-1906-AF. </publisher>
Reference-contexts: We have dubbed this approach "SRADS with Local Rollback: SRADS/LR". As with Time Warp <ref> [JeSo82] </ref>, [Jeff85] and other aggressive protocols, SRADS/LR requires a repair mechanism in the event the aggressive processing turns out to have assumed conditions that were not true. Rollback in turn requires a state-saving mechanism.
Reference: [Jeff85] <author> Jefferson, D., </author> <title> "Virtual Time," </title> <journal> ACM TOPLAS, </journal> <volume> 7,3, </volume> <month> July, </month> <year> 1985, </year> <pages> 404-425. </pages>
Reference-contexts: We have dubbed this approach "SRADS with Local Rollback: SRADS/LR". As with Time Warp [JeSo82], <ref> [Jeff85] </ref> and other aggressive protocols, SRADS/LR requires a repair mechanism in the event the aggressive processing turns out to have assumed conditions that were not true. Rollback in turn requires a state-saving mechanism. State saving can be a very expensive proposition, as has been discussed in numerous Time Warp papers.
Reference: [Misr86] <author> Misra, J., </author> <title> "Distributed Discrete Event Simulation," </title> <journal> ACM Computing Surveys, </journal> <volume> 18,1, </volume> <month> March, </month> <year> 1986, </year> <pages> 39-65. </pages>
Reference: [NiRe84] <author> Nicol, D.M. and P.F. Reynolds, </author> <title> "Problem Oriented Protocol Design," </title> <booktitle> ACM Winter Simulation Conference, </booktitle> <address> Dallas, Texas, </address> <month> Nov., </month> <year> 1984, </year> <pages> 471-474. </pages>
Reference: [Nico89] <author> Nicol, </author> <title> D.M., "The Cost of Conservative Synchronization in Parallel Discrete Event Simulations", </title> <type> unpublished manuscript, </type> <month> June, </month> <year> 1989. </year>
Reference-contexts: The work discussed here concerns the empirical comparative analysis of protocols when applied to a set of applications in a common environment. To date, other simulation studies have been fairly narrowly focused and inconclusive. Analytic results are beginning to appear (e.g. <ref> [Nico89] </ref>) but they do not consider important application characteristics. Our hypothesis, shared by many, is that the effectiveness of parallel simulation protocols will be highly dependent on the applications using them. Thus, an open question concerns the determination of the suitability of classes of protocols for classes of applications.
Reference: [PeWo79] <author> Peacock, J.K., Wong, J.W. and E. Manning, </author> <title> "Distributed Simulation Using a Network of Processors," Computer Networks, 3, </title> <publisher> North Holland Pub., </publisher> <year> 1979, </year> <pages> 44-56. </pages>
Reference-contexts: The significance of these missing points remains to be determined. The protocols we have implemented and made operational are null messages [ChMi79] (See also, <ref> [PeWo79] </ref>.) and SRADS [Reyn82]. Both protocols work with the three applications described above.
Reference: [Reyn82] <author> Reynolds, P.F. </author> <title> "A Shared Resource Algorithm for Distributed Simulation," </title> <booktitle> Proc of the Ninth Annual Int'l Comp Arch Conf, </booktitle> <address> Austin, Texas, </address> <month> April, </month> <year> 1982, </year> <pages> 259-266. </pages>
Reference-contexts: We have observed more dependencies (of a performance nature) than we had originally expected. Nonetheless, filters work. We discuss this more later. We describe a set of filters for implementing the SRADS protocol <ref> [Reyn82] </ref> as an example of how filters work. The SRADS protocol assumes that receivers of messages can always predict the times when messages may arrive from other LP's. <p> The significance of these missing points remains to be determined. The protocols we have implemented and made operational are null messages [ChMi79] (See also, [PeWo79].) and SRADS <ref> [Reyn82] </ref>. Both protocols work with the three applications described above. Given our experience with incorporating new protocols and applications into the testbed, we believe the filters implementing these protocols are rapidly approaching the generality we need for them to work with any application. (That is, generality without sacrificing efficiency.
Reference: [ReKu86] <author> Reynolds, P.F. and Kuhn, C.S., </author> <title> "Three Variations on the SRADS Simulation Protocol," </title> <booktitle> Proc of SCS Eastern Multi-conference, </booktitle> <address> Orlando, </address> <month> April, </month> <year> 1986. </year>
Reference-contexts: Connectivity is multi-faceted: direction of information flow and topology are two components. Most of these factors are not new. We have studied and reported the effects of the last two in previous papers (e.g. <ref> [ReKu86] </ref>) as have others. The significance rests in their impact on protocol design and simulation performance. As we developed filters for protocols we discovered that as we added new applications the importance of these factors came to light. We discuss some of these revelations next.
Reference: [Reyn88] <author> Reynolds, P.F. </author> <title> "A Spectrum of Options for Parallel Simulation Protocols," </title> <booktitle> Proc of ACM Winter Simulation Conference, </booktitle> <month> Dec, </month> <year> 1988. </year>
Reference-contexts: 1. INTRODUCTION We have advocated (See <ref> [Reyn88] </ref>) the need for recognizing the existence of a spectrum of options for parallel simulation protocol designs. In particular, there is more to be considered than a simple optimistic vs conservative view of protocols: there is an infinity of practical protocol designs. <p> Even so we have not considered the full impact of variations in protocol design. In <ref> [Reyn88] </ref> we showed nine design variables that were applicable to parallel simulation protocols. In essence, they formed a basis set for protocol construction in the same way that the variables shown in figure 3 form a basis for application construction.
Reference: [ReDi89] <author> Reynolds, P.F. and Dickens, </author> <title> P.M. "SPECTRUM: </title>
Reference-contexts: The best way to determine this, short of analytic results that have so far eluded the community, is to study a mix of protocols and applications in a common test environment. SPECTRUM <ref> [ReDi89] </ref> has been designed to support this sort of activity. In this paper we report on the experiments we have conducted on the SPECTRUM Testbed and the conclusions we have drawn about simulation protocols and their suitability for selected applications. Our experimentation goals are quite ambitious, and not yet fulfilled. <p> For example, the null message protocol [ChMi79] must be modified considerably, depending on whether messages can be consumed, are queued, can be preempted, etc. We discuss these observations in more detail, also. We give a brief overview of the SPECTRUM Testbed next. Details can be found in <ref> [ReDi89] </ref>. We follow with a discussion on designing experiments, where we explore the process of making a testbed such as SPECTRUM provide the information we seek. Much to our surprise the contents of this chapter have turned out to represent the most important lessons we have learned so far.
References-found: 13

