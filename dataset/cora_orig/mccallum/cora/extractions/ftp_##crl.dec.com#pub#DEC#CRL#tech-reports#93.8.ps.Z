URL: ftp://crl.dec.com/pub/DEC/CRL/tech-reports/93.8.ps.Z
Refering-URL: http://www.cs.umd.edu/projects/mcml/mmothers.html
Root-URL: 
Title: AudioFile: A Network-Transparent System for Distributed Audio Applications  
Author: Thomas M. Levergood, Andrew C. Payne, James Gettys, G. Winfield Treese, and Lawrence C. Stewart 
Date: CRL 93/8 June 11, 1993  
Affiliation: Digital Equipment Corporation Cambridge Research Lab  
Abstract-found: 0
Intro-found: 1
Reference: <institution> References </institution>
Reference: [1] <author> Susan Angebranndt, Raymond Drewry, Philip Karlton, and Todd Newman et. al. </author> <title> Definition of the porting layer for the X v11 sampler server, 1990. Located in the doc/Server directory in the MIT X distribution. </title>
Reference-contexts: The discussion is detailed; the interested reader may wish to refer to the source code. Because much of the OS and DIA infrastructure is based on X11R4 code, various documents describing the implementation of the X Window System server <ref> [1, 2, 13, 14] </ref> may be helpful. 7.3.1 Device-Independent Audio Server Interoperability The server contains code to support byte-swapping when communicating with clients on a machine with the opposite byte order.
Reference: [2] <author> Susan Angebranndt, Raymond Drewry, Philip Karlton, and Todd Newman et. al. </author> <title> Strategies for porting the X v11 sample server, 1990. Located in the doc/Server directory in the MIT X distribution. </title>
Reference-contexts: The discussion is detailed; the interested reader may wish to refer to the source code. Because much of the OS and DIA infrastructure is based on X11R4 code, various documents describing the implementation of the X Window System server <ref> [1, 2, 13, 14] </ref> may be helpful. 7.3.1 Device-Independent Audio Server Interoperability The server contains code to support byte-swapping when communicating with clients on a machine with the opposite byte order.
Reference: [3] <author> Susan Angebranndt, Richard L. Hyde, Daphne Huetu Luong, Nagendra Sir-avara, and Chris Schmandt. </author> <title> Integrating audio and telephony in a distributed workstation environment. </title> <booktitle> In Proceedings of the USENIX Summer Conference. USENIX, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: Instead, all details of audio handling were subsumed into the server. We would categorize this system as device-independent, but not network-transparent. 3.5 Related Work Other projects similar to AudioFile were underway at about the same time. XMedia Tools <ref> [3] </ref>, a Digital product, was somewhat more ambitious than AudioFile, using a more complex protocol and putting more emphasis on implementing applications within the server. In contrast, AudioFile emphasizes simplicity of the protocol and the server, leaving more complicated actions to be performed by clients.
Reference: [4] <author> B. Arons, C. Binding, K. Lantz, and C. Schmandt. </author> <title> The VOX audio server. </title> <booktitle> In Multimedia '89: 2nd IEEE COMSOC International Multimedia Communications Workshop, </booktitle> <year> 1989. </year>
Reference-contexts: We would categorize this system as network-transparent, but it was still device-dependent. The Firefly audio system pioneered explicit client control of time. 3.4 VOX In the mid to late 1980's, the MIT Media Lab and the Olivetti Research Lab in Palo Alto collaborated on a project called VOX <ref> [4] </ref>. VOX was an audio server based on a model in which essentially all audio related functions were included in the server, with the client mainly handling control those functions. The VOX server was responsible both for record and playback functions and for establishing direct connections between disparate devices.
Reference: [5] <author> Edward Bruckert, Martin Minow, and Walter Tetschner. </author> <title> Three-tiered software and VLSI aid developmental system to read text aloud. </title> <publisher> Electronics, </publisher> <month> Apr. 21, </month> <year> 1983. </year>
Reference-contexts: We mention some interesting examples here. 74 9 CONTRIBUTED CLIENTS 9.7.1 Speech Synthesis We built a software-only version of the DECtalk text-to-speech synthesizer <ref> [5] </ref> which generates output via the AudioFile system. The DECtalk synthesizer is a three stage process: letter to sound translation, phonemic synthesizer, and the vocal tract model. Of these, the vocal tract model, which generates the output digital waveform, consumes about 95% of the synthesizer's CPU time.
Reference: [6] <author> Van Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> In Proc. SIGCOMM '88 Symposium on Communications Architectures and Protocols, </booktitle> <pages> pages 314-329, </pages> <address> Stanford, CA, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: These stem from packet losses caused by a phenomenon known as ACK-compression [9, 21], a subtle consequence of the use of window-based flow control. The duration of each dropout is exacerbated by TCP's slow-start algorithm <ref> [6] </ref>, which comes into play when packets are dropped by the network. ACK-compression occurs when the spacing between acknowledgments is changed by delays in the routers. This can cause cause TCP to send large bursts of packets, which overrun the buffers in a router, causing packets to be dropped.
Reference: [7] <author> Thomas M. Levergood. LoFi: </author> <title> A TURBOchannel audio module. </title> <type> CRL Technical Report 93/9, </type> <institution> Digital Equipment Corporation, Cambridge Research Lab, </institution> <year> 1993. </year>
Reference-contexts: Sonix includes minimal support for synchronization. 4 Audio Hardware This section describes the audio hardware currently supported by AudioFile. 4.1 LoFi In 1990, as part of the Cambridge Research Lab's overall goals of exploring net-worked audio and video, one of us (Levergood) designed a TURBOchannel audio module called LoFi <ref> [7] </ref>. 12 Later, Digital's Multimedia Engineering organization released the design as the product DECaudio. The research LoFi and the product DECaudio are substantially identical; we will use LoFi to refer to this device in the rest of this document.
Reference: [8] <author> D. L. Mills. </author> <title> Network time protocol (NTP). Internet RFC 958, </title> <institution> Network Information Center, </institution> <month> September </month> <year> 1985. </year>
Reference-contexts: There are network protocols, such as NTP <ref> [8] </ref>, which keep the time-of-day clocks approximately synchronized, but no existing systems we are aware of keep interval timers, display, or audio clocks synchronized.
Reference: [9] <author> Jeffrey C. Mogul. </author> <title> Observing TCP dynamics in real networks. </title> <booktitle> In Proc. SIGCOMM '92 Symposium on Communications Architectures and Protocols, </booktitle> <address> Baltimore, MD, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: We found that a naively implemented teleconferencing application displayed serious problems when used over a transcontinental TCP link. We observed frequent and lengthy dropouts in the audio stream, which were especially likely with bidirectional data streams. These stem from packet losses caused by a phenomenon known as ACK-compression <ref> [9, 21] </ref>, a subtle consequence of the use of window-based flow control. The duration of each dropout is exacerbated by TCP's slow-start algorithm [6], which comes into play when packets are dropped by the network. ACK-compression occurs when the spacing between acknowledgments is changed by delays in the routers.
Reference: [10] <author> John K. Ousterhout. </author> <title> Tcl: An embeddable command language. </title> <booktitle> In Proceedings of the USENIX Winter Conference, </booktitle> <month> January </month> <year> 1990. </year>
Reference-contexts: These applications tend to be more complex or have dependencies on other software packages which are not ubiquitously available. In particular, many of the contributed clients have graphical user interfaces using the Tcl language <ref> [10] </ref> and Tk toolkit [11] developed by John Ousterhout at the University of California, Berkeley. 26 Section 11.3 explains how to get Tcl and Tk. 26 We have found Tk to be a very effective toolkit, yet one which is much easier to understand than any of the standard X Window
Reference: [11] <author> John K. Ousterhout. </author> <title> An X11 toolkit based on the Tcl language. </title> <booktitle> In Proceedings of the USENIX Winter Conference, </booktitle> <month> January </month> <year> 1991. </year> <note> REFERENCES 95 </note>
Reference-contexts: These applications tend to be more complex or have dependencies on other software packages which are not ubiquitously available. In particular, many of the contributed clients have graphical user interfaces using the Tcl language [10] and Tk toolkit <ref> [11] </ref> developed by John Ousterhout at the University of California, Berkeley. 26 Section 11.3 explains how to get Tcl and Tk. 26 We have found Tk to be a very effective toolkit, yet one which is much easier to understand than any of the standard X Window System toolkits.
Reference: [12] <author> Steven J. Rohall. Sonix: </author> <title> A network-transparent sound server. </title> <booktitle> In Proceedings of the Xhibition 92 Conference, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: If synchronization between audio and graphics is necessary, it can be performed by the clients or by using the X synchronization extension. Sonix <ref> [12] </ref> is a network-transparent sound server developed at Bellcore. It was also inspired by X and is similar to XMedia in design, with patchcords to internally connect audio devices or to bypass the Sonix server itself.
Reference: [13] <author> David S. H. Rosenthal and Adam R. de Boor et al. </author> <title> Godzilla's guide to porting the X V11 sample server, 1990. Located in the doc/Server directory in the MIT X distribution. </title>
Reference-contexts: The discussion is detailed; the interested reader may wish to refer to the source code. Because much of the OS and DIA infrastructure is based on X11R4 code, various documents describing the implementation of the X Window System server <ref> [1, 2, 13, 14] </ref> may be helpful. 7.3.1 Device-Independent Audio Server Interoperability The server contains code to support byte-swapping when communicating with clients on a machine with the opposite byte order.
Reference: [14] <author> Robert W. Scheifler and James Gettys. </author> <title> X Window System. </title> <publisher> Digital Press, </publisher> <address> Bedford, MA, </address> <note> 3rd edition, </note> <year> 1991. </year>
Reference-contexts: The result of our efforts is the AudioFile System. It was clear from the outset that audio on the desktop should have the same flexibility that users have come to expect of the display. Similar to the X Window System <ref> [14] </ref>, AudioFile was designed to allow multiple clients, to support a variety of underlying hardware, and to permit transparent access through the network. Since its original implementation, AudioFile has been used for a variety of applications and experiments with desktop audio. <p> The discussion is detailed; the interested reader may wish to refer to the source code. Because much of the OS and DIA infrastructure is based on X11R4 code, various documents describing the implementation of the X Window System server <ref> [1, 2, 13, 14] </ref> may be helpful. 7.3.1 Device-Independent Audio Server Interoperability The server contains code to support byte-swapping when communicating with clients on a machine with the opposite byte order.
Reference: [15] <author> Henry Spencer. </author> <title> How to steal code -or- inventing the wheel only once. </title> <booktitle> In Proceedings of the USENIX Winter Conference, </booktitle> <pages> pages 335-346. </pages> <publisher> USENIX, </publisher> <month> February </month> <year> 1988. </year>
Reference-contexts: Our thinking is that if one gets the core functionality right, then an explosion of complexity can be avoided. 7 Why start from a clean sheet of paper? For more information on how to steal code, consult Spencer <ref> [15] </ref>. 8 The next AudioFile release will require a compiler that supports function prototypes. 5 common source code to build the implementation. Contrary to others, we believe that audio services should be separate from graphics. 2 Audio Abstractions This section describes the fundamental abstractions used by AudioFile.
Reference: [16] <author> D. C. Swinehart, L. C. Stewart, and S. M. Ornstein. </author> <title> Adding voice to an office computer network. </title> <booktitle> In Proceedings of GlobeCom 1983, </booktitle> <month> November </month> <year> 1983. </year>
Reference-contexts: However, essentially all existing technology for audio signal processing was developed this way. 3.2 Etherphone In the early 1980's, the Xerox Palo Alto Research Center built a telephone system in which voice was transmitted over an Ethernet. This system was called Etherphone <ref> [16] </ref>. Besides its utility as a telephone system, the Etherphone system had capabilities for workstation recording and playback, voice storage, and it was certainly network transparent.
Reference: [17] <author> Robert Terek and Joseph Pasquale. </author> <title> Experiences with audio conferencing using the X window system, UNIX, </title> <booktitle> and TCP/IP. In Proceedings of the USENIX Summer Conference. USENIX, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: As described in Section 10, our experience to date indicates that the 15 resulting performance is quite good. Terek and Pasquale at UCSD developed an audio conferencing system based on a modified X server <ref> [17] </ref>. In contrast, we chose not to incorporate audio into the X server.
Reference: [18] <author> Charles P. Thacker, Lawrence C. Stewart, and Edwin H. Satterthwaite Jr. Firefly: </author> <title> A multiprocessor workstation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(8) </volume> <pages> 909-920, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: Etherphone audio was entirely telephone-quality. In addition, because audio was passed directly from Etherphone to Etherphone, without intervention by more powerful computers, there was little opportunity for signal processing. 14 3 BACKGROUND 3.3 Firefly In the mid 1980's, the Firefly multiprocessor workstation <ref> [18] </ref>, developed at Digital's Systems Research Center, had simple telephone-quality audio. An audio server on the Firefly buffered the previous four seconds of recorded data and the next four seconds of playback data; it exported a simple remote procedure call (RPC) interface to applications.
Reference: [19] <author> Ken Thompson. </author> <title> A new C compiler. </title> <booktitle> In Proceedings of the Summer 1990 UKUUG Conf., </booktitle> <pages> pages 41-51, </pages> <address> London, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: Function prototypes have proven to be quite useful for developing large portable systems in C. Unfortunately, portable sometimes means lowest common denominator so our code is also cluttered with left-justified chicken scratches <ref> [19] </ref>. 8 We should emphasize the fact that AudioFile is not an addition to an X Window System server.
Reference: [20] <author> Stephen A. Uhler. PhoneStation, </author> <title> moving the telephone onto the virtual desktop. </title> <booktitle> In Proceedings of the USENIX Winter Conference. USENIX, </booktitle> <month> January </month> <year> 1993. </year>
Reference-contexts: The telephone interface on LoFi enables applications such as voice mail and remote information access. We see no difficulty in adding AudioFile support for other kinds of telephone interfaces, such as ISDN or PhoneStation <ref> [20] </ref>. 4.2 JVideo JVideo is a TURBOchannel module developed at Digital Equipment Corporation for experiments in desktop video. Like LoFi, JVideo has a Motorola 56001 DSP processor with shared memory, but JVideo also has stereo ADC and DAC hardware that is capable of variable sample rates.

References-found: 21

