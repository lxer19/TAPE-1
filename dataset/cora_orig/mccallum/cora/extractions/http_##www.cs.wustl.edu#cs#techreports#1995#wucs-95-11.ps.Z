URL: http://www.cs.wustl.edu/cs/techreports/1995/wucs-95-11.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: Reliable FIFO Load Balancing over Multiple FIFO Channels  
Author: Hari Adiseshu, Gurudatta M. Parulkar and George Varghese 
Address: Campus Box 1045  One Brookings Drive St. Louis, MO 63130-4899  
Affiliation: Department of Computer Science  Washington University  
Date: May 3, 1995  
Pubnum: WUCS-95-11  
Abstract: Link striping algorithms are often used to overcome transmission bottlenecks in computer networks. However, traditional striping algorithms suffer from two major disadvantages. They provide inadequate load sharing in the presence of variable length packets, and may result in non-FIFO delivery of data. We describe a new family of link striping algorithms that solve both problems. Our scheme applies to packets at any layer (physical, data link, network, and transport) that work over multiple FIFO channels. We deal with variable sized packets by showing how a class of fair queueing algorithms can be converted into load sharing algorithms. Our transformation results in practical load sharing protocols, and also shows a theoretical connection between two seemingly different problem areas. We deal with the FIFO requirement for two separate cases. If a header (with a sequence number) can be added to each packet, we show how to speed up packet processing by letting the receiver simulate the sender algorithm. If no header can be added (e.g., ATM cells), we show how to provide quasi-FIFO delivery. Quasi-FIFO is FIFO except during occasional periods of loss of synchronization between the sender and the receiver. We argue that quasi-FIFO should be adequate for most applications. To deal with loss of synchronization between the sender and receiver, we present simple recovery protocols. We provide performance analysis, experimental results, and proofs of our assertions. 
Abstract-found: 1
Intro-found: 1
Reference: [CL85] <author> K. Mani Chandy and Leslie Lamport. </author> <title> Distributed Snapshots: Determining Global States of a Distributed Sys tem. </title> <journal> ACM Transactions on Computer Systems, </journal> <pages> pages 63-75, </pages> <month> February </month> <year> 1985. </year>
Reference-contexts: This Reliable FIFO Load Balancing over Multiple FIFO Channels 19 provides a snapshot of the system, which can be proven to be self stabilizing <ref> [CL85] </ref>. For example, if SRR is used for channel striping, the state would include the current value of the Deficit Counters, and the channel currently selected for service. Synchronization recovery. The previous techniques only ensure error detection, but not error recovery.
Reference: [DKS89] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and Simulation of a Fair Queueing Algorithm. </title> <booktitle> In Proceedings of the ACM SIGCOMM, </booktitle> <pages> pages 3-12, </pages> <year> 1989. </year>
Reference-contexts: We use the term fair queuing to refer to a generic class of algorithms that are used to share a single channel among multiple queues (rather than to one of the most celebrated members of this class, the DKS fair queuing algorithm <ref> [DKS89] </ref>). Henceforth we will refer to such algorithms as FQ algorithms. In FQ, we try to partition the traffic on a single output channel equitably from a set of input queues which feed that channel.
Reference: [DP94] <author> Peter Druschel and Larry L. Peterson. </author> <title> Experiences with a High-Speed Network Adaptor: A software Perspec tive. </title> <booktitle> In Proceedings of the ACM SIGCOMM, </booktitle> <year> 1994. </year>
Reference-contexts: This solution is implicitly used, for instance, in [HS94]. However, such schemes essentially rely on robust frame synchronization between sender and receiver that is provided by the physical layer. Once again such robust frame synchronization is simply unavailable on a number of interesting channels. Finally, Druschel et. al. <ref> [DP94] </ref> describes an actual example of cell striping over ATM channels. A single packet is sent as a number of minipackets on each channel and a parallel reassembly of the packets is done at the receiver.
Reference: [Dun94] <author> Jay Duncanson. </author> <title> Inverse Multiplexing. </title> <journal> IEEE Communications Magazine, </journal> <volume> 32(4), </volume> <month> April </month> <year> 1994. </year>
Reference: [Flo93] <author> Sally Floyd. </author> <title> Notes on Guaranteed Service in Resource Management. Unpublished Note, </title> <year> 1993. </year>
Reference-contexts: Our first example is a transformation of an oblivious fair queuing algorithm that we call Surplus Round Robin (SRR). SRR is based on a modified version of DRR [SV94]. SRR is also identical to a FQ algorithm proposed by Van Jacobson and Sally Floyd <ref> [Flo93] </ref>. In the SRR algorithm, each queue is assigned a quantum of service (measured in units of data), and is associated with a counter called the Deficit Counter (DC), which is initialized to 0. Queues are serviced in a round robin manner.
Reference: [Fre94] <author> Paul H. Fredette. </author> <title> The Past, Present and Future of Inverse Multiplexing. </title> <journal> IEEE Communications Magazine, </journal> <volume> 32(4), </volume> <month> April </month> <year> 1994. </year> <title> Reliable FIFO Load Balancing over Multiple FIFO Channels 24 </title>
Reference: [Gro92] <institution> Bandwidth ON Demand INteroperability Group. Interoperability Requirements for Nx56/64 kbit/s Calls, </institution> <month> September </month> <year> 1992. </year>
Reference: [HS94] <author> M.V. Hegde H. Saidi, </author> <title> P.S. Min. Non-blocking Multi-channel Switching in ATM Networks. </title> <booktitle> In Proceedings of SUPERCOM/ICC94, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: Errors in synchronization only affect a single frame. This solution is implicitly used, for instance, in <ref> [HS94] </ref>. However, such schemes essentially rely on robust frame synchronization between sender and receiver that is provided by the physical layer. Once again such robust frame synchronization is simply unavailable on a number of interesting channels.
Reference: [Jac90] <author> V. Jacobson. </author> <title> 4BSD Header Prediction. </title> <journal> ACM Communication Review, </journal> <month> April </month> <year> 1990. </year>
Reference-contexts: While reordering packets is not catastrophic in datagram networks, current protocol implementations and optimizations make FIFO delivery a desirable feature. Some transport protocols do not buffer out of order packets, while other protocols implement optimizations (e.g., TCP header prediction logic <ref> [Jac90] </ref>) which work best when packets are delivered in sequence.
Reference: [Lau94] <author> M. Laubach. </author> <title> Classical IP and ARP over ATM. </title> <address> RFC1577, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: However, as we describe later in this section, we can bound the value of N (out of order cells) by sending periodic marker packets. For example, an IP packet of maximum size sent over ATM <ref> [Lau94] </ref> would occupy more than 180 ATM cells. If we send periodic marker cells after every 180 data cells, then during loss of synchronization, we would lose approximately the same number of cells as exist in an single maximum size IP packet.
Reference: [McA93] <author> A. J. McAuley. </author> <title> Parallel Assembly for Broadband Networks, </title> <year> 1993. </year>
Reference-contexts: Sorting would be particularly expensive if there were random delays and skews between different channels leading to sorting amongst a large number of packets. Hardware implementations have been proposed which can be used for reassembly of packets arriving on multiple links <ref> [McA93] </ref>. This scheme requires specialized hardware (to sort out of order packets) and modified packet formats. If we use logical reception we can (potentially) have a very simple reassembly scheme.
Reference: [McK91] <author> Paul E. McKenney. </author> <title> Stochastic Fair Queueing. Internetworking: </title> <journal> Reserch and Experience, </journal> <pages> pages 113-131, </pages> <year> 1991. </year>
Reference-contexts: Logical reception can be explained very simply using Figure 1. Notice that there are per-channel buffers shown between the channel and the reassembly algorithm. Notice also that if we look at the picture at the destination 6 Randomized Fair Queuing is not related to Stochastic Fair Queuing <ref> [McK91] </ref>, which refers to a class of algorithms that are probabilistic variants of the DKS algorithm Reliable FIFO Load Balancing over Multiple FIFO Channels 15 node, it is clear that the receiver is performing a fair queuing function.
Reference: [RF94] <author> Allyn Romanov and Sally Floyd. </author> <title> Dynamics of TCP Traffic over ATM Networks. </title> <booktitle> In Proceedings of the ACM SIGCOMM, </booktitle> <pages> pages 79-88, </pages> <year> 1994. </year>
Reference-contexts: When striping end-to-end across ATM circuits, it seems advisable to stripe at the packet layer. Striping cells across channels would mean that AAL boundaries are unavailable within the ATM networks; however, these boundaries are needed in order to implement early discard policies <ref> [RF94] </ref>. There are a number of detailed issues that we have not described for lack of space. In the paper so far, we have assumed that the receiver buffers (required for logical reception) do not overflow.
Reference: [SV94] <author> M. Shreedhar and G. Varghese. </author> <title> Efficient Fair Queueing by Deficit Round Robin. </title> <type> Technical Report WU94-17, </type> <institution> Washington University, </institution> <year> 1994. </year>
Reference-contexts: We would then obtain the situation shown in Reliable FIFO Load Balancing over Multiple FIFO Channels 9 In a rough sense, load sharing algorithms are `time reversals' of fair queuing algorithms <ref> [SV94] </ref>. <p> Surplus Round-Robin (SRR) We now turn to two specific examples of the transformation theorem. Our first example is a transformation of an oblivious fair queuing algorithm that we call Surplus Round Robin (SRR). SRR is based on a modified version of DRR <ref> [SV94] </ref>. SRR is also identical to a FQ algorithm proposed by Van Jacobson and Sally Floyd [Flo93]. In the SRR algorithm, each queue is assigned a quantum of service (measured in units of data), and is associated with a counter called the Deficit Counter (DC), which is initialized to 0.
References-found: 14

