URL: http://www-acs.ucsd.edu/offerings/doc/f77.ps
Refering-URL: http://www-acs.ucsd.edu/offerings/doc/HTML/f77,d.html
Root-URL: http://www.cs.ucsd.edu
Title: A Portable Fortran 77 Compiler  
Author: S. I. Feldman P. J. Weinberger J. Berkman 
Date: September, 1985  
Note: Revised  UNIX is a trademark of Bell Laboratories.  
Address: Murray Hill, New Jersey 07974  Berkeley, CA 94720  
Affiliation: Bell Laboratories  University of California  
Abstract: The Fortran language has been revised. The new language, known as Fortran 77, became an official American National Standard on April 3, 1978. We report here on a compiler and run-time system for the new extended language. It is believed to be the first complete Fortran 77 system to be implemented. This compiler is designed to be portable, to be correct and complete, and to generate code compatible with calling sequences produced by C compilers. In particular, this Fortran is quite usable on UNIX systems. In this paper, we describe the language compiled, interfaces between procedures, and file formats assumed by the I/O system. Appendix A describes the Fortran 77 language extensions. This is a standard Bell Laboratories document reproduced with minor modifications to the text. The Bell Laboratory's appendix on ``Differences Between Fortran 66 and Fortran 77'' has been changed to Appendix A, and a local appendix has been added. Appendix B contains a list of Fortran 77 references (some from the original Bell document and some added at Berkeley). 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> American National Standard Programming Language FORTRAN, ANSI X3.9-1978. New York: American National Standards Institute, </institution> <year> 1978. </year>
Reference-contexts: 1. INTRODUCTION The Fortran language has been revised. The new language, known as Fortran 77, became an official American National Standard <ref> [1] </ref> on April 3, 1978. Fortran 77 supplants 1966 Standard Fortran [2]. We report here on a compiler and run-time system for the new extended language. The compiler and computation library were written by S.I.F., the I/O system by P.J.W. <p> The preconnected units 0, 5, and 6 are positioned as they come from the program's parent process. A Portable Fortran 77 Compiler PS1:2-17 APPENDIX A: Differences Between Fortran 66 and Fortran 77 The following is a very brief description of the differences between the 1966 [2] and the 1977 <ref> [1] </ref> Standard languages. We assume that the reader is familiar with Fortran 66. We do not pretend to be complete, precise, or unbiased, but plan to describe what we feel are the most important aspects of the new language.
Reference: 2. <institution> USA Standard FORTRAN, USAS X3.9-1966. New York: United States of America Standards Institute, </institution> <year> 1966. </year> <note> Clarified in Comm. ACM 12:289 (1969) and Comm. ACM 14:628 (1971). </note>
Reference-contexts: 1. INTRODUCTION The Fortran language has been revised. The new language, known as Fortran 77, became an official American National Standard [1] on April 3, 1978. Fortran 77 supplants 1966 Standard Fortran <ref> [2] </ref>. We report here on a compiler and run-time system for the new extended language. The compiler and computation library were written by S.I.F., the I/O system by P.J.W. We believe ours to be the first complete Fortran 77 system to be implemented. <p> The preconnected units 0, 5, and 6 are positioned as they come from the program's parent process. A Portable Fortran 77 Compiler PS1:2-17 APPENDIX A: Differences Between Fortran 66 and Fortran 77 The following is a very brief description of the differences between the 1966 <ref> [2] </ref> and the 1977 [1] Standard languages. We assume that the reader is familiar with Fortran 66. We do not pretend to be complete, precise, or unbiased, but plan to describe what we feel are the most important aspects of the new language.
Reference: 3. <author> Kernighan, B. W., and D. M. Ritchie. </author> <title> The C Programming Language. </title> <address> Englewood Cliffs: </address> <publisher> Prentice-Hall, </publisher> <year> 1978. </year>
Reference-contexts: We believe ours to be the first complete Fortran 77 system to be implemented. This compiler is designed to be portable to a number of different machines, to be correct and complete, and to generate code compatible with calling sequences produced by compilers for the C language <ref> [3] </ref>. In particular, it is in use on UNIX systems. Two families of C compilers are in use at Bell Laboratories, those based on D. M. Ritchie's PDP-11 compiler [4] and those based on S. C. Johnson's portable C compiler [5]. <p> functions Address for each datum or function A long int for each character or procedure argument Thus, the call in external f character*7 s integer b (3) . . . call sam (f, b (2), s) is equivalent to that in int f (); char s [7]; long int b <ref> [3] </ref>; . . . 4.6.
Reference: 4. <author> Ritchie, D. M. </author> <title> Private communication. </title>
Reference-contexts: In particular, it is in use on UNIX systems. Two families of C compilers are in use at Bell Laboratories, those based on D. M. Ritchie's PDP-11 compiler <ref> [4] </ref> and those based on S. C. Johnson's portable C compiler [5]. This Fortran compiler can drive the second passes of either family. In this paper, we describe the language compiled, interfaces between procedures, and file formats assumed by the I/O system.
Reference: 5. <author> Johnson, S. C. </author> <title> ``A Portable Compiler: Theory and Practice,'' </title> <booktitle> Proceedings of Fifth ACM Symposium on Principles of Programming Languages. </booktitle> <year> 1978. </year>
Reference-contexts: In particular, it is in use on UNIX systems. Two families of C compilers are in use at Bell Laboratories, those based on D. M. Ritchie's PDP-11 compiler [4] and those based on S. C. Johnson's portable C compiler <ref> [5] </ref>. This Fortran compiler can drive the second passes of either family. In this paper, we describe the language compiled, interfaces between procedures, and file formats assumed by the I/O system. We will describe implementation details in companion papers. 1.1.
Reference: 6. <author> Feldman, S. I. </author> <title> ``An Informal Description of EFL,'' internal memorandum. </title>
Reference-contexts: The command to run the compiler is f 77 flags file . . . f 77 is a general-purpose command for compiling and loading Fortran and Fortran-related files. EFL <ref> [6] </ref> and Ratfor [7] source files will be preprocessed before being presented to the Fortran compiler. C and assembler source files will be compiled by the appropriate programs. <p> and C declarations: Fortran C integer*2 x short int x; integer x long int x; logical x long int x; real x float x; double precision x double x; complex x struct float r, i; - x; double complex x struct double dr, di; - x; character*6 x char x <ref> [6] </ref>; (By the rules of Fortran, integer, logical, and real data occupy the same amount of memory.) 4.3. Arrays The first element of a C array always has subscript zero, while Fortran arrays begin at 1 by default.
Reference: 7. <author> Kernighan, B. W. </author> <title> ``RATFORA Preprocessor for Rational Fortran,'' </title> <institution> Bell Laboratories Computing Science Technical Report #55. </institution> <year> 1977. </year>
Reference-contexts: The command to run the compiler is f 77 flags file . . . f 77 is a general-purpose command for compiling and loading Fortran and Fortran-related files. EFL [6] and Ratfor <ref> [7] </ref> source files will be preprocessed before being presented to the Fortran compiler. C and assembler source files will be compiled by the appropriate programs. <p> for complex and character functions Address for each datum or function A long int for each character or procedure argument Thus, the call in external f character*7 s integer b (3) . . . call sam (f, b (2), s) is equivalent to that in int f (); char s <ref> [7] </ref>; long int b [3]; . . . 4.6.
Reference: 8. <author> Ritchie, D. M. </author> <title> Private communication. </title>
Reference-contexts: Furthermore, this approach guarantees that the resulting programs are compatible with C usage. The runtime computational library is complete. The runtime I/O library makes use of D. M. Ritchie's Standard C I/O package <ref> [8] </ref> for transferring data. With the few exceptions described below, only documented calls are used, so it should be relatively easy to modify to run on other operating systems. 1.4.
Reference: 9. <author> Wasley, D. L. </author> <title> ``Introduction to the f77 I/O Library'', UNIX Programmer's Manual, Volume 2c. Bibliography The following books or documents describe aspects of Fortran 77. </title> <note> This list cannot pretend to be complete. Certainly no particular endorsement is implied. </note>
Reference-contexts: In this implementation there is no printer file and thus by default, no carriage control is recognized on formatted output. This can be changed using form= print in the open statement for a unit, or by using the fpr (1) filter for output; see <ref> [9] </ref>. A Portable Fortran 77 Compiler PS1:2-13 3.5. Assigned Goto The optional list associated with an assigned goto statement is not checked against the actual assigned value during execution. 4. <p> Otherwise, the default file name corresponding to unit n is fort.n. If there is an environment variable whose name is the same as the tail of the file name after periods are deleted, then the contents of that environment variable are used as the name of the file. See <ref> [9] </ref> for details. The default connection for all units is for sequential formatted I/O. The Standard does not specify where a file which has been explicitly opened for sequential I/O is initially positioned. The I/O system will position the file at the beginning. <p> For information on file permissions, ownership, etc., use the Fortran library routines stat and access. For further discussion of the UNIX Fortran I/O system see ``Introduction to the f77 I/O Library'' <ref> [9] </ref>. A Portable Fortran 77 Compiler PS1:2-27 APPENDIX B: References and Bibliography
Reference: 1. <author> Brainerd, Walter S., et al. </author> <title> Fortran 77 Programming. </title> <publisher> Harper Row, </publisher> <year> 1978. </year>
Reference-contexts: 1. INTRODUCTION The Fortran language has been revised. The new language, known as Fortran 77, became an official American National Standard <ref> [1] </ref> on April 3, 1978. Fortran 77 supplants 1966 Standard Fortran [2]. We report here on a compiler and run-time system for the new extended language. The compiler and computation library were written by S.I.F., the I/O system by P.J.W. <p> The preconnected units 0, 5, and 6 are positioned as they come from the program's parent process. A Portable Fortran 77 Compiler PS1:2-17 APPENDIX A: Differences Between Fortran 66 and Fortran 77 The following is a very brief description of the differences between the 1966 [2] and the 1977 <ref> [1] </ref> Standard languages. We assume that the reader is familiar with Fortran 66. We do not pretend to be complete, precise, or unbiased, but plan to describe what we feel are the most important aspects of the new language.
Reference: 2. <author> Day, A. C. </author> <title> Compatible Fortran. </title> <publisher> Cambridge University Press, </publisher> <year> 1979. </year>
Reference-contexts: 1. INTRODUCTION The Fortran language has been revised. The new language, known as Fortran 77, became an official American National Standard [1] on April 3, 1978. Fortran 77 supplants 1966 Standard Fortran <ref> [2] </ref>. We report here on a compiler and run-time system for the new extended language. The compiler and computation library were written by S.I.F., the I/O system by P.J.W. We believe ours to be the first complete Fortran 77 system to be implemented. <p> The preconnected units 0, 5, and 6 are positioned as they come from the program's parent process. A Portable Fortran 77 Compiler PS1:2-17 APPENDIX A: Differences Between Fortran 66 and Fortran 77 The following is a very brief description of the differences between the 1966 <ref> [2] </ref> and the 1977 [1] Standard languages. We assume that the reader is familiar with Fortran 66. We do not pretend to be complete, precise, or unbiased, but plan to describe what we feel are the most important aspects of the new language.
Reference: 3. <author> Dock, V. Thomas. </author> <title> Structured Fortran IV Programming. </title> <address> West, </address> <year> 1979. </year>
Reference-contexts: We believe ours to be the first complete Fortran 77 system to be implemented. This compiler is designed to be portable to a number of different machines, to be correct and complete, and to generate code compatible with calling sequences produced by compilers for the C language <ref> [3] </ref>. In particular, it is in use on UNIX systems. Two families of C compilers are in use at Bell Laboratories, those based on D. M. Ritchie's PDP-11 compiler [4] and those based on S. C. Johnson's portable C compiler [5]. <p> functions Address for each datum or function A long int for each character or procedure argument Thus, the call in external f character*7 s integer b (3) . . . call sam (f, b (2), s) is equivalent to that in int f (); char s [7]; long int b <ref> [3] </ref>; . . . 4.6.
Reference: 4. <author> Feldman, S. I. </author> <title> ``The Programming Language EFL,'' </title> <type> Bell Laboratories Technical Report. </type> <month> June </month> <year> 1979. </year>
Reference-contexts: In particular, it is in use on UNIX systems. Two families of C compilers are in use at Bell Laboratories, those based on D. M. Ritchie's PDP-11 compiler <ref> [4] </ref> and those based on S. C. Johnson's portable C compiler [5]. This Fortran compiler can drive the second passes of either family. In this paper, we describe the language compiled, interfaces between procedures, and file formats assumed by the I/O system.
Reference: 5. <author> Hume, J. N., and R. C. Holt. </author> <title> Programming Fortran 77. </title> <address> Reston, </address> <year> 1979. </year>
Reference-contexts: In particular, it is in use on UNIX systems. Two families of C compilers are in use at Bell Laboratories, those based on D. M. Ritchie's PDP-11 compiler [4] and those based on S. C. Johnson's portable C compiler <ref> [5] </ref>. This Fortran compiler can drive the second passes of either family. In this paper, we describe the language compiled, interfaces between procedures, and file formats assumed by the I/O system. We will describe implementation details in companion papers. 1.1.
Reference: 6. <author> Katzan, Harry, Jr. </author> <title> Fortran 77. </title> <editor> Van Nostrand-Reinhold, </editor> <year> 1978. </year>
Reference-contexts: The command to run the compiler is f 77 flags file . . . f 77 is a general-purpose command for compiling and loading Fortran and Fortran-related files. EFL <ref> [6] </ref> and Ratfor [7] source files will be preprocessed before being presented to the Fortran compiler. C and assembler source files will be compiled by the appropriate programs. <p> and C declarations: Fortran C integer*2 x short int x; integer x long int x; logical x long int x; real x float x; double precision x double x; complex x struct float r, i; - x; double complex x struct double dr, di; - x; character*6 x char x <ref> [6] </ref>; (By the rules of Fortran, integer, logical, and real data occupy the same amount of memory.) 4.3. Arrays The first element of a C array always has subscript zero, while Fortran arrays begin at 1 by default.
Reference: 7. <author> Meissner, Loren P., and Organick, Elliott I. </author> <title> Fortran 77 Featuring Structured Programming, </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: The command to run the compiler is f 77 flags file . . . f 77 is a general-purpose command for compiling and loading Fortran and Fortran-related files. EFL [6] and Ratfor <ref> [7] </ref> source files will be preprocessed before being presented to the Fortran compiler. C and assembler source files will be compiled by the appropriate programs. <p> for complex and character functions Address for each datum or function A long int for each character or procedure argument Thus, the call in external f character*7 s integer b (3) . . . call sam (f, b (2), s) is equivalent to that in int f (); char s <ref> [7] </ref>; long int b [3]; . . . 4.6.
Reference: 8. <author> Merchant, Michael J. </author> <title> ABC's of Fortran Programming. </title> <publisher> Wadsworth, </publisher> <year> 1979. </year>
Reference-contexts: Furthermore, this approach guarantees that the resulting programs are compatible with C usage. The runtime computational library is complete. The runtime I/O library makes use of D. M. Ritchie's Standard C I/O package <ref> [8] </ref> for transferring data. With the few exceptions described below, only documented calls are used, so it should be relatively easy to modify to run on other operating systems. 1.4.
Reference: 9. <author> Page, Rex, and Richard Didday. </author> <title> Fortran 77 for Humans. </title> <address> West, </address> <year> 1980. </year>
Reference-contexts: In this implementation there is no printer file and thus by default, no carriage control is recognized on formatted output. This can be changed using form= print in the open statement for a unit, or by using the fpr (1) filter for output; see <ref> [9] </ref>. A Portable Fortran 77 Compiler PS1:2-13 3.5. Assigned Goto The optional list associated with an assigned goto statement is not checked against the actual assigned value during execution. 4. <p> Otherwise, the default file name corresponding to unit n is fort.n. If there is an environment variable whose name is the same as the tail of the file name after periods are deleted, then the contents of that environment variable are used as the name of the file. See <ref> [9] </ref> for details. The default connection for all units is for sequential formatted I/O. The Standard does not specify where a file which has been explicitly opened for sequential I/O is initially positioned. The I/O system will position the file at the beginning. <p> For information on file permissions, ownership, etc., use the Fortran library routines stat and access. For further discussion of the UNIX Fortran I/O system see ``Introduction to the f77 I/O Library'' <ref> [9] </ref>. A Portable Fortran 77 Compiler PS1:2-27 APPENDIX B: References and Bibliography
Reference: 10. <author> Wagener, Jerrold L. </author> <title> Principles of Fortran 77 Programming. </title> <publisher> Wiley, </publisher> <year> 1980. </year> <title> PS1:2-2 A Portable Fortran 77 Compiler Table of Contents </title>
Reference: 1. <author> Introduction .......................................................................................................................................... 4 1.1. </author> <title> Usage ......................................................................................................................................... 4 1.2. Documentation Conventions ..................................................................................................... 6 1.3. Implementation Strategy ........................................................................................................... 6 1.4. Debugging Aids ......................................................................................................................... 6 </title>
Reference-contexts: 1. INTRODUCTION The Fortran language has been revised. The new language, known as Fortran 77, became an official American National Standard <ref> [1] </ref> on April 3, 1978. Fortran 77 supplants 1966 Standard Fortran [2]. We report here on a compiler and run-time system for the new extended language. The compiler and computation library were written by S.I.F., the I/O system by P.J.W. <p> The preconnected units 0, 5, and 6 are positioned as they come from the program's parent process. A Portable Fortran 77 Compiler PS1:2-17 APPENDIX A: Differences Between Fortran 66 and Fortran 77 The following is a very brief description of the differences between the 1966 [2] and the 1977 <ref> [1] </ref> Standard languages. We assume that the reader is familiar with Fortran 66. We do not pretend to be complete, precise, or unbiased, but plan to describe what we feel are the most important aspects of the new language.

Reference: 3. <institution> Violations of the Standard ................................................................................................................... 12 3.1. </institution> <note> Double Precision Alignment ..................................................................................................... 12 3.2. Dummy Procedure Arguments .................................................................................................. 12 3.3. T and TL Formats ...................................................................................................................... 12 3.4. Carriage Control ........................................................................................................................ 12 3.5. Assigned Goto ........................................................................................................................... 13 </note>
Reference-contexts: We believe ours to be the first complete Fortran 77 system to be implemented. This compiler is designed to be portable to a number of different machines, to be correct and complete, and to generate code compatible with calling sequences produced by compilers for the C language <ref> [3] </ref>. In particular, it is in use on UNIX systems. Two families of C compilers are in use at Bell Laboratories, those based on D. M. Ritchie's PDP-11 compiler [4] and those based on S. C. Johnson's portable C compiler [5]. <p> functions Address for each datum or function A long int for each character or procedure argument Thus, the call in external f character*7 s integer b (3) . . . call sam (f, b (2), s) is equivalent to that in int f (); char s [7]; long int b <ref> [3] </ref>; . . . 4.6.
Reference: 4. <author> Inter-Procedure Interface ..................................................................................................................... 13 4.1. </author> <title> Procedure Names ....................................................................................................................... 13 4.2. Data Representations ................................................................................................................. 13 4.3. Arrays ........................................................................................................................................ 13 4.4. Return Values ............................................................................................................................ 13 4.5. Argument Lists .......................................................................................................................... 14 4.6. System Interface ........................................................................................................................ 14 </title>
Reference-contexts: In particular, it is in use on UNIX systems. Two families of C compilers are in use at Bell Laboratories, those based on D. M. Ritchie's PDP-11 compiler <ref> [4] </ref> and those based on S. C. Johnson's portable C compiler [5]. This Fortran compiler can drive the second passes of either family. In this paper, we describe the language compiled, interfaces between procedures, and file formats assumed by the I/O system.
References-found: 22

