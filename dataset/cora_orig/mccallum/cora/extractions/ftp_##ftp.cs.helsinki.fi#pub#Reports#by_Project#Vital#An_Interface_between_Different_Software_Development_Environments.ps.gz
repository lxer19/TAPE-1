URL: ftp://ftp.cs.helsinki.fi/pub/Reports/by_Project/Vital/An_Interface_between_Different_Software_Development_Environments.ps.gz
Refering-URL: http://www.cs.helsinki.fi/~verkamo/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: flinden, verkamog@cs.helsinki.fi  
Title: An Interface between Different Software Development Environments  
Author: Greger Linden and A. Inkeri Verkamo 
Address: P.O. Box 26, FIN-00014 University of Helsinki, Finland  
Affiliation: Department of Computer Science  
Abstract: We give a solution to the problem of making tools in different environments cooperate without modifying the tools or their environments. In building an interface between a kbs environment and a selected case tool we have used a transformation generator called alchemist. This has reduced the work of respecifying the environments for each transformation. We have encountered several problems in the transformation that we have solved, including, e.g., incompatible views of the tools, multiple views, and different ways of representing graphical information. Additional problems can be addressed through user interaction before, during, or after the transformation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Andersen Consulting. </author> <title> FOUNDATION Application Development, </title> <editor> v. 2.0, </editor> <year> 1993. </year>
Reference-contexts: As much as possible of the information in the persistent representation should be included in the transfer. 2.2 The target environment The target environment is a commercial case environment, foundation 1 by Andersen Consulting <ref> [1] </ref>, which is a typical example of advanced commercial case environments. foundation runs in PCs and uses the OS/2 operating system. foundation uses a repository that is built on the commercial database system DB2/2 2 .
Reference: [2] <author> Andersen Consulting. </author> <title> FOUNDATION Design, Analyze Application Requirements, </title> <editor> v. 2.0, </editor> <year> 1993. </year>
Reference-contexts: Since foundation supports object import and export [3] building an interface does not require changing the environment itself. The foundation toolset for the analysis and design phases, foundation Design, contains several tools <ref> [2] </ref>, including diagramming tools for entity-relationship diagrams (erd), data flow diagrams (dfd), and procedure diagrams (pd) (Figures 4, 5, and 6).
Reference: [3] <author> Andersen Consulting. </author> <title> FOUNDATION Design, Data Administration, </title> <editor> v. 2.0, </editor> <year> 1993. </year>
Reference-contexts: Since foundation supports object import and export <ref> [3] </ref> building an interface does not require changing the environment itself. The foundation toolset for the analysis and design phases, foundation Design, contains several tools [2], including diagramming tools for entity-relationship diagrams (erd), data flow diagrams (dfd), and procedure diagrams (pd) (Figures 4, 5, and 6).
Reference: [4] <author> Alan W. Brown and Maria H. Penedo. </author> <title> An annotated bibliography on integration in software engineering environments. </title> <journal> Software Engineering Notes, </journal> <volume> 17(3):47 - 55, </volume> <month> July </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Even though the literature handling case tools has for some time recommended using integrated project support environments (ipses) in systematic large scale software production (see, e.g., <ref> [4] </ref>) the practitioners on the field are mostly involved with much less advanced practical problems in tool cooperation. Only recently, a study of the state of the practice in case integration described that it is difficult to find industry experience of long time operational use of integrated case tools [11].
Reference: [5] <author> John Domingue, Enrico Motta, and Stuart Watt. </author> <title> The emerging VITAL workbench. In Knowledge Acquisition for Knowledge-Based Systems, </title> <booktitle> 7th European Knowledge Acquisition Workshop, EKAW '93, </booktitle> <pages> pp. 320 - 339, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: We are specifically looking at the conceptual modeling tool of vital, the ocml (Operationalizable Conceptual Modeling Language) editor <ref> [5] </ref>. The ocml editor includes capabilities for constructing diagrams for domain data, domain knowledge, and problem solving behavior. The ocml editor is the vital tool for the conceptual modeling phase and even part of the design phase of the kbs development.
Reference: [6] <author> ECMA European Computer Manufacturers Association. </author> <title> Portable Common Tool Environment (PCTE), Abstract Specification, </title> <month> December </month> <year> 1990. </year>
Reference-contexts: Several ways have been suggested to ease case tool interfacing. Among these are common data presentation frameworks such as pcte (adopted by ecma <ref> [6] </ref>) and irds (approved by iso and ansi [7]), and tool connection using message passing [12]. So far, none of these standards or methods have been unanimously accepted by tool vendors.
Reference: [7] <author> ISO International Organization for Standardization. </author> <title> Information Resource Dictionary System (IRDS) Framework, </title> <year> 1990. </year>
Reference-contexts: Several ways have been suggested to ease case tool interfacing. Among these are common data presentation frameworks such as pcte (adopted by ecma [6]) and irds (approved by iso and ansi <ref> [7] </ref>), and tool connection using message passing [12]. So far, none of these standards or methods have been unanimously accepted by tool vendors.
Reference: [8] <author> S. E. Keller, J. A Perkins, T. F. Payton, and S. P. Mardinly. </author> <title> Tree transformation techniques and experiences. </title> <booktitle> In Proceedings of the ACM SIGPLAN '84 Symposium on Compiler Construction, </booktitle> <pages> pp. 190 - 201, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: The specification of the mapping is based on the notion of TT-grammars <ref> [8] </ref>. From the transformation specification alchemist generates transformation code which is compiled into an executable transformation program. The transformation process consists of three modules: preprocessing, transformation, and postprocess-ing (Figure 10).
Reference: [9] <author> Marc Linster. </author> <title> Problem statement for Sisyphus: Models of problem solving. </title> <journal> International Journal of Human-Computer Studies, </journal> <volume> 40(2):187 - 192, </volume> <month> February </month> <year> 1994. </year>
Reference-contexts: The domain diagram of Figure 1 corresponds to the erd of Figure 4, and the task diagram of Figure 2 to the dfd and the pd of Figures 5 and 6. The figures present diagrams for the Sisyphus I room allocation problem <ref> [9] </ref> which is used in the examples throughout the paper.
Reference: [10] <author> Enrico Motta, Kieron O'Hara, and Nigel Shad-bolt. </author> <title> Grounding GDMs: A structured case study. </title> <journal> International Journal of Human-Computer Studies, </journal> <volume> 40(2):315 - 347, </volume> <month> February </month> <year> 1994. </year>
Reference-contexts: The figures present diagrams for the Sisyphus I room allocation problem [9] which is used in the examples throughout the paper. A solution of the Sisyphus I problem using ocml has been described in <ref> [10] </ref>. 3.2 Implementation We have built the three interfaces using the alchemist transformation generator [14]. alchemist requires describing the source and target representations as context-free grammars and defining a mapping (correspondency rules) between the productions of the grammars.
Reference: [11] <author> Jock A. Rader, Alan W. Brown, and Ed J. Mor-ris. </author> <title> Operational use of CASE integration: An investigation of the state of practice. </title> <journal> Journal of Systems and Software, </journal> <volume> 28:59 - 68, </volume> <year> 1995. </year>
Reference-contexts: Only recently, a study of the state of the practice in case integration described that it is difficult to find industry experience of long time operational use of integrated case tools <ref> [11] </ref>. Among the most important problems reported in the study is the inadequacy of the interfaces for actual integration, which is contrary to claims often made by case vendors. Several ways have been suggested to ease case tool interfacing.
Reference: [12] <author> Steven Reiss. </author> <title> Connecting tools using message passing in the field environment. </title> <journal> IEEE Software, </journal> <volume> 7(4):57 - 66, </volume> <month> July </month> <year> 1990. </year>
Reference-contexts: Several ways have been suggested to ease case tool interfacing. Among these are common data presentation frameworks such as pcte (adopted by ecma [6]) and irds (approved by iso and ansi [7]), and tool connection using message passing <ref> [12] </ref>. So far, none of these standards or methods have been unanimously accepted by tool vendors.
Reference: [13] <author> Nigel Shadbolt, Enrico Motta, and Alain Rouge. </author> <title> Constructing knowledge-based systems. </title> <journal> IEEE Software, </journal> <volume> 10(6):34 - 39, </volume> <month> November </month> <year> 1993. </year>
Reference-contexts: This work was done in a research project, vital, for building a full scale workbench for kbs development <ref> [13] </ref>. The paper has the following structure. In section 2, we present the two environments that are to be interfaced. In section 3, we describe the requirements for the interface and the solution strategy, based on a transformation generator. <p> We close by a brief conclusion of our experiences and some suggestions for future improvements. 2 The environments 2.1 The source environment The source environment is the vital workbench, a development environment for knowledge based systems, produced in the vital research project, <ref> [13] </ref>. We are specifically looking at the conceptual modeling tool of vital, the ocml (Operationalizable Conceptual Modeling Language) editor [5]. The ocml editor includes capabilities for constructing diagrams for domain data, domain knowledge, and problem solving behavior.
Reference: [14] <author> Henry Tirri and Greger Linden. </author> <title> ALCHEMIST | an object-oriented tool to build transformations between heterogeneous data representations. </title> <booktitle> In Proceedings of the 27th Annual Hawaii International Conference on System Sciences, </booktitle> <volume> vol. II, </volume> <pages> pp. 226 - 235. </pages> <publisher> IEEE, </publisher> <month> January </month> <year> 1994. </year>
Reference-contexts: The figures present diagrams for the Sisyphus I room allocation problem [9] which is used in the examples throughout the paper. A solution of the Sisyphus I problem using ocml has been described in [10]. 3.2 Implementation We have built the three interfaces using the alchemist transformation generator <ref> [14] </ref>. alchemist requires describing the source and target representations as context-free grammars and defining a mapping (correspondency rules) between the productions of the grammars. The specification of the mapping is based on the notion of TT-grammars [8].
Reference: [15] <author> A. Inkeri Verkamo. </author> <title> Cooperation of KBS development environments and CASE environments. </title> <booktitle> In Proceedings of the 6th International Conference on Software Engineering and Knowledge Engineering, </booktitle> <pages> pp. 358 - 365, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Other interesting needs for such transformations are in strong co-operational use of both environments or in a reuse oriented approach <ref> [15] </ref>. If we aim to use two software development environments in strong cooperation, developing some parts of the application in one and some parts in the other environment, we may need information transfer in both directions.
Reference: [16] <author> A. Inkeri Verkamo and Greger Linden. </author> <title> Problems in interfacing tools of different development environments. </title> <booktitle> In Proceedings of the 7th International Conference on Software Engineering and Knowledge Engineering, </booktitle> <pages> pp. 429 - 437, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: In the present situation software developers who want to make tools of different origin cooperate are more or less left on their own in building the interface. In a previous paper, we have discussed the specific types of problems that must be solved to build such an interface <ref> [16] </ref>. In this paper, we describe our experience in implementing an interface between the conceptual modeling tools of a development environment for building knowledge based systems and the analysis and design tools of a commercial case environment.
Reference: [17] <author> P. Zarrella. </author> <title> CASE tool integration and standardization. </title> <type> Technical Report CMU/SEI-90-TR-14, </type> <institution> Software Engineering Institute, Carnegie Mellon University, </institution> <year> 1990. </year>
Reference-contexts: However, the users' best interest is in truly open software development environments that include cross-environmental tool cooperation, whether it is based on common standardization activity or market-driven industry standards <ref> [17] </ref>. In the present situation software developers who want to make tools of different origin cooperate are more or less left on their own in building the interface. In a previous paper, we have discussed the specific types of problems that must be solved to build such an interface [16].
References-found: 17

