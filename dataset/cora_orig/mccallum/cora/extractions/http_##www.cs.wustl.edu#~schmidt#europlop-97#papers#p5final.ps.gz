URL: http://www.cs.wustl.edu/~schmidt/europlop-97/papers/p5final.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/europlop-97/workshops.html
Root-URL: 
Email: email: mauricio@lmf-di.puc-rio.br, sergio@inf.puc-rio.br  email: kapson@netcom.com  
Title: Patterns for Layered Object-Oriented Applications  
Author: Mauricio J. Vianna e Silva* Sergio Carvalho* John Kapson+ Marques de So Vicente , 
Address: RJ, 22453-900, Brazil  USA  
Note: R.  
Affiliation: Laboratrio de Metodos Formais, Dept. de Informtica, Pontificia Universidade Catlica do Rio de Janeiro,  Rio de Janeiro,  +Spectrum Consulting Services, Inc., Illinois,  
Abstract: Three-layered architectures (presentation, business and persistence levels) are sometimes recommended when developing objectoriented applications. Using the increasingly popular fourth generation languages, however, layering is difficult: business rules are usually embedded in user interfaces, which may also directly access databases. In this paper, we present three patterns useful in the construction of object oriented applications accessing relational databases via fourth generation languages. Motivation With the increasing interest in objectoriented technology, many companies have started to worry about how to store application business objects in databases. A natural approach to store objects would be to use an objectoriented database system. However, in practice, many companies have instead opted to use a relational database to store objects [Duhl96], as witnessed by the increasing popularity of Fourth Generation Languages (4GLs), such as Powerbuilder and Delphi. By combining objectoriented technology and relational databases we have the advantages of both worlds [Keat95]. However, this is not easy, and pattern languages have been proposed to bridge the existing gap between the two technologies [Brow96a, Kell96]. The use of Fourth Generation Languages (4GLs), such as Powerbuilder and Delphi, further complicates matters, as these languages do not encourage the object oriented modeling of business rules in a separate level. This in the long run may lead into systems that are immensely expensive to maintain and enhance [Swam97]. A commonly suggested approach for the construction of complex applications is the separation of application concerns in different layers [Busc96, Aars96, Hirs96]. This in turn brings about layer communication and visibility issues: in the case of object oriented applications, how do different layer objects communicate? Which objects are visible? In this paper, we propose a set of patterns for object oriented applications using 4GLs to access relational databases. They address communication, visibility, reuse and layering issues. Our approach extends the work proposed by [Kell96, Brow96a, Busc96], adding three patterns: Strong Layering, Weak Layering, and Entity Broker. These patterns deal essentially with communication issues in applications that have been partitioned into three layers: presentation, business, and persistence. They This work was partly supported by CNPq, and was developed for the ARTS (Approach to Real-Time Software) project. ARTS is an ongoing three year project contracted by EQUITEL (a SIEMENS company in Brazil) with the Formal Methods Laboratory of the Catholic University in Rio de Janeiro. 
Abstract-found: 1
Intro-found: 0
Reference: [Aars96] <author> A. Aarsten, D. Brugali, G. Menga, </author> <title> Patterns for Three-Tier Client/Server Applications, </title> <booktitle> In Pattern Languages of Programs (PloP), </booktitle> <address> Monticello, Illinois, </address> <year> 1996. </year>
Reference: [Agar95] <author> S. Agarwal, C. Keene, and A. Keller, </author> <title> "Architecting Object Applications for High Performance with Relational Databases," In OOPSLA Workshop on Object Database Behavior, Benchmarks, and Performance, </title> <address> Austin, TX, </address> <month> October </month> <year> 1995. </year>
Reference-contexts: The query in the database can be done by using embedded SQL directly inside the method, or by calling a stored-procedure, which may be more efficient <ref> [Agar95] </ref>. Foo A business class. With the result of the query, we create the Foo object. Besides returning a single object, DBFooMgr can also return a list of Foo objects created with the information retrieved from a related table.
Reference: [Brow96a] <author> K. Brown, and B. Whitenack, </author> <title> Crossing Chasm: A Pattern Language for Object-RDBMS Integration, </title> <editor> In J. Vlissides, J. Coplien, and N. Kerth (eds.), </editor> <booktitle> Pattern Languages of Program Design 2, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1996, </year> <pages> pp. 227-238. </pages>
Reference: [Brow96b] <author> K. Brown, </author> <title> Crossing Chasm: The Architectural Patterns, </title> <booktitle> In Pattern Languages of Programs (PloP), </booktitle> <address> Monticello, Illinois, </address> <year> 1996. </year>
Reference-contexts: FooUser Interface Foo DBFooMgr Database displayAll () select fooData from FooTable accessorB () display (B) display (A) accessorA () ... getFooObject s (lFoo) Foo (fooData) FooUser Interface Benefits: This approach may be efficient with respect to response time, especially when the objects in the layers are in separate physical locations <ref> [Brow96b] </ref>, since Foo objects can be stored/retrieved by accessing the persistence layer directly. In addition, class Foo has only methods related to its business behavior, moving to its associated persistence class DBFooMgr, the responsibility for implementing database accesses of retrieving and storing Foo objects.
Reference: [Busc96] <author> F. Buschmann, R. Meunier, P. Sommerlad, and M. Stal, </author> <title> Pattern-Oriented Software Architecture: A System of Patterns, </title> <publisher> John Wiley & Sons, </publisher> <year> 1996. </year>
Reference: [Duhl96] <author> J. Duhl, </author> <title> Integrating Objects with Relational Data, </title> <note> In Object-Magazine, SIGS Publication, </note> <month> March </month> <year> 1996, </year> <pages> pp. 89-90. </pages>
Reference: [Gamm95] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software, </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference: [Hirs96] <author> R. </author> <title> Hirschfeld, Three-Tier Distribution Architecture, </title> <booktitle> In Pattern Languages of Programs (PloP), </booktitle> <address> Monticello, Illinois, </address> <year> 1996. </year>
Reference: [Keat95] <author> G. Keating, and J. Thomas, </author> <title> The Winning Combination: Object/Relational Solutions, </title> <note> In Object-Magazine, SIGS Publication, </note> <month> September </month> <year> 1995, </year> <pages> pp. 64-67. </pages>
Reference: [Kell93] <author> A. Keller, R. Jensen, and S. Agarwal, </author> <title> "Persistence Software: Bridging ObjectOriented Programming and Relational Databases," </title> <booktitle> In ACM SIGMOD, </booktitle> <month> May </month> <year> 1993. </year>
Reference: [Kell96] <author> W. Keller, and J. Coldewey, </author> <title> Relational Database Access Layer, </title> <booktitle> In Pattern Languages of Programs (PloP), </booktitle> <address> Monticello, Illinois, </address> <year> 1996. </year>
Reference-contexts: is a good approach to organize object oriented applications accessing relational databases via 4GLs? Layer 1 - Presentation FooUserInterface Layer 2 - Business Foo Layer 3 - Persistence DBFooMgr databaseName tableName getFooObjects (lFoo) DBFooMgr DBPersistenceMgr A : string B: string accessorA () accessorB () Foo Common Forces: As mentioned in <ref> [Kell96] </ref>, besides performance and flexibility, obvious forces when handling databases, the decoupling of applications from the physical database is essential. A good decoupling facilitates not only domain modifications, imposed by new business rules, but also changes in the database itself.
Reference: [Swam97] <author> V. Swaminathan, and J. Storey, </author> <note> DomainSpecific Frameworks, In Object-Magazine, SIGS Publication, </note> <month> April </month> <year> 1997, </year> <pages> pp. 53-57. </pages>
Reference: [Your95] <author> E. Yourdon, K. Whitehead, J. Thomann, K. Oppel, P. Nevermann, </author> <title> Mainstream Objects: An Analysis and Design Approach for Business, </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
References-found: 13

