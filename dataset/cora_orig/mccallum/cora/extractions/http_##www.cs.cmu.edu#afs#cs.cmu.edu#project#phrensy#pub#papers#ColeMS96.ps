URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/phrensy/pub/papers/ColeMS96.ps
Refering-URL: http://www.cs.cmu.edu/~bmm/papers.html
Root-URL: 
Email: cole@cs.nyu.edu  bmm@cs.cmu.edu  ramesh@cs.umass.edu  
Title: On the Benefit of Supporting Virtual Channels in Wormhole Routers  
Author: Richard J. Cole Bruce M. Maggs Ramesh K. Sitaraman 
Address: New York University New York, NY 10012  Pittsburgh, PA 15213  Amherst, MA 01003  
Affiliation: Courant Institute  School of Computer Science Carnegie Mellon University  Dept. of Computer Science University of Massachusetts  
Abstract: This paper analyzes the impact of virtual channels on the performance of wormhole routing algorithms. We show that in any network in which each physical channel can emulate up to Q virtual channels, it is possible to route any set of L-bit messages whose paths have congestion C and dilation D in (L + D)C(D log D) 1=Q 2 O(log fl (C=D)) bit steps. We also prove a nearly matching lower bound, i.e., for any values of C, D, Q, and L, where C; D Q + 1 and L = (1 + (1))D, we show how to construct a network and a set of L-bit messages whose paths have congestion C and dilation D that require (LCD 1=Q ) bit steps to route. These upper and lower bounds imply that increasing the queuing capacity Q of each physical channel can speed up a wormhole routing algorithm by a superlinear factor. The results can be translated to the scenerio in which each physical channel can transmit B bits simultaneously, and can queue bits from B different messages. In this case, the bounds are (L + D)C(D log D) 1=B 2 O(log fl (C=D)) =B and (LCD 1=B =B), respectively. We also present a simple randomized wormhole routing algorithm for the butterfly network. The algorithm routes a q-relation on the inputs and outputs of an n-input butterfly in O(LQ(q + log n)(log 1=Q n) log log(qn)) bit-steps. We present a nearly-matching lower bound that holds for a broad class of algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. A. Aiello, F. T. Leighton, B. M. Maggs, and M. Newman. </author> <title> Fast algorithms for bit-serial routing on a hypercube. </title> <journal> Mathematical Systems Theory, </journal> <volume> 24(4) </volume> <pages> 253-271, </pages> <year> 1991. </year>
Reference-contexts: Both of these bounds hold independent of the capacity of nodes and edges to queue messages. The Borodin-Hopcroft lower bound was extended to randomized oblivious algorithms by Aiello, Leighton, Maggs and Newman <ref> [1] </ref>, who proved that on any degree-d network, almost all permutations require (log n=(log d + log log n)) message steps, or (L log n=(log d+log log n) bit steps. (Note that in this paper we include the header bits in the length, L, of a message, whereas in [1] these <p> Newman <ref> [1] </ref>, who proved that on any degree-d network, almost all permutations require (log n=(log d + log log n)) message steps, or (L log n=(log d+log log n) bit steps. (Note that in this paper we include the header bits in the length, L, of a message, whereas in [1] these bits are not included, and instead an explicit log d n term is added.) For constant-degree networks such as the butterfly, this bound is (L log n= log log n) bit steps. <p> Borodin, Raghavan, Schieber, and Upfal [10] later showed that for d n= log 3 n, any oblivious randomized single-port permutation routing algorithm requires (log d n + log n= log log n) message steps, on average. The bound from [10] is stronger than the bound from <ref> [1] </ref> when d is large. For wormhole routing, Ranade, Schleimer, and Wilker-son [37] showed how to construct a network with queue size Q = 1, and a set of L-bit messages whose paths have congestion C and dilation D in which the optimal wormhole routing schedule requires (LCD) bit steps. <p> In the last category, wormhole routing algorithms have been designed for hypercubes, multibutterflies, trees, and meshes with constant dimension. (A mesh with constant dimension is a k-ary n-cube where n is a constant.) On the hypercube network, Aiello, Leighton, Maggs, and Newman <ref> [1] </ref> devised a randomized algorithm for routing n L-bit messages on an n-node hypercube in any permutation in O (L + log n) bit steps.
Reference: [2] <author> N. Alon. </author> <title> A parallel algorithmic version of the Local Lemma. Random Structures and Algorithms, </title> <booktitle> 2(4) </booktitle> <pages> 367-378, </pages> <year> 1991. </year>
Reference-contexts: Recently, Leighton and Maggs [29] discovered a sequential algorithm for finding a store-and-forward routing schedule of length O (C + D) on any network. The algorithm is based on the techniques of Beck [5] and Alon <ref> [2] </ref> for making the Lovasz Local Lemma constructive.
Reference: [3] <author> S. Arora, T. Leighton, and B. Maggs. </author> <title> On-line algorithms for path selection in a non-blocking network. </title> <booktitle> In Proceedings of the 22nd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 149-158, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: The algorithm requires Q to be a small constant larger than one, and assumes that each hypercube node can service all log n of its edges simultaneously. On the multibutterfly network, Arora, Leighton, and Maggs <ref> [3] </ref> devised an algorithm for routing n L-bit messages from the inputs to the outputs of an n-input network in O (L + log n) bit steps. The algorithm can also be applied to a multi-Benes network (two back-to-back multibutterfly networks), which is a nonblocking network.
Reference: [4] <institution> Butterfly TM Parallel Processor Overview. </institution> <type> BBN Report No. 6148, Version 1, </type> <institution> BBN Advanced Computers, Inc., </institution> <address> Cambridge, MA, </address> <month> March </month> <year> 1986. </year>
Reference-contexts: Thus, Koch observed, as we do in this paper, that increasing the capacity of each edge by a constant factor may increase the performance of a wormhole routing algorithm by more than a constant factor. Koch's work was motivated by the fact that on the BBN Butterfly parallel computer <ref> [4] </ref>, B = 2. Maggs and Sitaraman [31] generalized the previous two results by showing that, by making two passes through a butterfly, it is possible to route a fi (n= log 1=B n) fraction of any permutation (rather than only a random permutation), with high probability.
Reference: [5] <author> J. Beck. </author> <title> An algorithmic approach to the Lovasz Local Lemma I. Random Structures and Algorithms, </title> <booktitle> 2(4) </booktitle> <pages> 343-365, </pages> <year> 1991. </year>
Reference-contexts: Recently, Leighton and Maggs [29] discovered a sequential algorithm for finding a store-and-forward routing schedule of length O (C + D) on any network. The algorithm is based on the techniques of Beck <ref> [5] </ref> and Alon [2] for making the Lovasz Local Lemma constructive.
Reference: [6] <author> B. Beizer. </author> <title> The analysis and synthesis of signal switching networks. </title> <booktitle> In Proceedings of the Symposium on Mathematical Theory of Automata, </booktitle> <pages> pages 563-576, </pages> <address> Brooklyn, NY, </address> <year> 1962. </year> <institution> Brooklyn Polytechnic Institute. </institution>
Reference-contexts: Since this paper presents no new results in this area, we will not review the previous results. Descriptions of several of the algorithms can be found in [25, 28]. Instead, we focus on algorithms for wormhole routing. In two early papers, Beizer <ref> [6] </ref> and Benes [7] showed that it is possible to route edge-disjoint paths between the inputs and outputs of a Benes network in any permutation. A Benes network is simply two back-to-back butterfly networks.
Reference: [7] <author> V. E. </author> <title> Benes. Optimal rearrangeable multistage connecting networks. </title> <journal> Bell System Technical Journal, </journal> <volume> 43 </volume> <pages> 1641-1656, </pages> <month> July </month> <year> 1964. </year>
Reference-contexts: Since this paper presents no new results in this area, we will not review the previous results. Descriptions of several of the algorithms can be found in [25, 28]. Instead, we focus on algorithms for wormhole routing. In two early papers, Beizer [6] and Benes <ref> [7] </ref> showed that it is possible to route edge-disjoint paths between the inputs and outputs of a Benes network in any permutation. A Benes network is simply two back-to-back butterfly networks.
Reference: [8] <author> S. Borkar, R. Cohn, G. Cox, S. Gleason, T. Gross, H. T. Kung, M. Lam, B. Moore, C. Peterson, J. Pieper, L. Rankin, P.S. Tseng, J. Sutton, J. Urbanski, and J Webb. </author> <title> iWarp, an integrated solution to high-speed parallel computing. </title> <booktitle> In Proceedings of the 1988 International Conference on Supercomputing, </booktitle> <pages> pages 330-339, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Wormhole routing has become the routing method of choice in the latest generation of parallel computers, including experimental machines such as iWarp <ref> [8] </ref> and the J-Machine [35], and commercial machines such as the Intel Paragon, Cray T3D [23], and Connection Machine CM-5 [30].
Reference: [9] <author> A. Borodin and J. E. Hopcroft. </author> <title> Routing, merging, and sorting on parallel models of computation. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 30(1) </volume> <pages> 130-145, </pages> <month> Febru-ary </month> <year> 1985. </year>
Reference-contexts: A continuous routing algorithm is one that accepts packets that are randomly generated over time according to a Poisson process. The algorithms described in this paper, which are designed to route a batch of packets, are not continuous. 1.3.2 Network-independent lower bounds In a classic paper, Borodin and Hopcroft <ref> [9] </ref> proved that any deterministic oblivious store-and-forward algorithm must take a least ( p n=d 3 ) message steps to route some permutation on any n-node degree d network.
Reference: [10] <author> A. Borodin, P. Raghavan, B. Schieber, and E. Upfal. </author> <booktitle> How much can harware help routing? In Proceedings of the 25th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 573-582, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Borodin, Raghavan, Schieber, and Upfal <ref> [10] </ref> later showed that for d n= log 3 n, any oblivious randomized single-port permutation routing algorithm requires (log d n + log n= log log n) message steps, on average. The bound from [10] is stronger than the bound from [1] when d is large. <p> Borodin, Raghavan, Schieber, and Upfal <ref> [10] </ref> later showed that for d n= log 3 n, any oblivious randomized single-port permutation routing algorithm requires (log d n + log n= log log n) message steps, on average. The bound from [10] is stronger than the bound from [1] when d is large.
Reference: [11] <author> R. Cypher. </author> <title> Minimal, deadlock-free routing in hypercu-bic and arbitrary networks. </title> <booktitle> In Proceedings of the 7th IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 122-129, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Minimal deadlock-free algorithms have been designed for de Bruijn and shu*e-exchange networks <ref> [11] </ref>. Fully-adaptive minimal deadlock-free algorithms have been devised for trees [33], meshes [36], toruses [12], and hypercubes [36].
Reference: [12] <author> R. Cypher and L. Gravano. Storage-efficient, </author> <title> deadlock-free, adaptive packet routing algorithms for torus networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 43(12) </volume> <pages> 1376-1385, </pages> <year> 1994. </year>
Reference-contexts: Minimal deadlock-free algorithms have been designed for de Bruijn and shu*e-exchange networks [11]. Fully-adaptive minimal deadlock-free algorithms have been devised for trees [33], meshes [36], toruses <ref> [12] </ref>, and hypercubes [36].
Reference: [13] <editor> R. Cypher, F. Meyer auf der Heide, C. Scheideler, and B. Vocking. </editor> <title> Universal algorithms for store-and-forward and wormhole routing. </title> <booktitle> In Proceedings of the 28th An nual ACM Symposium on the Theory of Computing, </booktitle> <month> May </month> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: The O (LCD) bound improves on the naive O ((L + D)CD) bound. Neither of these papers considered the case Q &gt; 1. Cypher, Meyer auf der Heide, Scheideler, and Vocking <ref> [13] </ref> have recently independently proved a number of results that are closely related to, and in some instances stronger than, the results in this paper. Their wormhole routing results are stated for networks in which each physical channel can simultaneously transmit flits from B messages. <p> This lower bound is nearly tight. Cypher, et al. <ref> [13] </ref> have recently independently described a randomized algorithm that requires O ((qL log 1=B n+log (qn) log n)=B) bit steps, with high probability, to route q worms from each input to random outputs, assuming that each edge can simultaneously transmit flits from B messages.
Reference: [14] <author> W. Dally and C. Seitz. </author> <title> Deadlock free message routing in multiprocessor interconnection networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-36(5):547-553, </volume> <month> May </month> <year> 1987. </year>
Reference-contexts: In addition to reduced latency, wormhole routing also has the advantage that it can be implemented with small, fast switches. Wormhole routing owes much of its recent popularity to an influential paper by Dally and Seitz <ref> [14] </ref>, which introduced the method. Much of the paper by Dally and Seitz is devoted to the design of wormhole routing algorithms that avoid deadlock.
Reference: [15] <author> W. J. Dally. </author> <title> Performance analysis of k-ary n-cube interconnection networks. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(6) </volume> <pages> 775-785, </pages> <year> 1990. </year>
Reference-contexts: In the first category Seitz et al. describe the architecture of the Ametek Series 2010 Multicomputer [39], and Dally and Seitz [17] describe the Torus Routing Chip. In the second category, two of the most influential papers were written by Dally <ref> [15, 16] </ref>. The first analyzes the behavior of wormhole routing algorithms for k-ary n-cubes. The second analyzes the effect of virtual channels on the throughput of multistage networks. In the third category, several types of deadlock-free algorithms have been devised.
Reference: [16] <author> W. J. Dally. </author> <title> Virtual-channel flow control. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 3(2) </volume> <pages> 194-205, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: In the first category Seitz et al. describe the architecture of the Ametek Series 2010 Multicomputer [39], and Dally and Seitz [17] describe the Torus Routing Chip. In the second category, two of the most influential papers were written by Dally <ref> [15, 16] </ref>. The first analyzes the behavior of wormhole routing algorithms for k-ary n-cubes. The second analyzes the effect of virtual channels on the throughput of multistage networks. In the third category, several types of deadlock-free algorithms have been devised.
Reference: [17] <author> W. J. Dally and C. L. Seitz. </author> <title> The Torus Routing Chip. </title> <journal> Distributed Computing, </journal> <volume> 1(4) </volume> <pages> 187-196, </pages> <year> 1986. </year>
Reference-contexts: In the first category Seitz et al. describe the architecture of the Ametek Series 2010 Multicomputer [39], and Dally and Seitz <ref> [17] </ref> describe the Torus Routing Chip. In the second category, two of the most influential papers were written by Dally [15, 16]. The first analyzes the behavior of wormhole routing algorithms for k-ary n-cubes. The second analyzes the effect of virtual channels on the throughput of multistage networks.
Reference: [18] <author> S. Felperin, P. Raghavan, and E. Upfal. </author> <title> A theory of wormhole routing in parallel computers. </title> <booktitle> In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 563-572, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: For the interesting case of L = O (log n) and q = log n, the time is O (log 3 n) bit steps. Felperin et al. <ref> [18] </ref> independently discovered an O (log 4 n) bit-step algorithm for solving a random problem for the case L = O (log n) and q = log n, and then Ranade et al. [37] discovered an O (log 3 n log log n) bit-step algorithm.
Reference: [19] <author> R. Greenberg and H.-C. Oh. </author> <title> Universal wormhole routing. </title> <booktitle> In Proceedings of the 5th IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 56-63, </pages> <month> De-cember </month> <year> 1993. </year>
Reference-contexts: There is relatively little prior work on network independent wormhole routing algorithms. Greenberg and Oh <ref> [19] </ref> were the first to state non-trivial network-independent wormhole routing results in terms of L, C, and D. They created a randomized algorithm that takes O (lCD + lCL log n) bit steps, where l = minfL; Dg.
Reference: [20] <author> C. Kaklamanis, D. Krizanc, and A. Tsantilas. </author> <title> Tight bounds for oblivous routing in the hypercube. </title> <booktitle> In Proceedings of the 2nd Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 31-36, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: An oblivious routing algorithm is one in which every message's path is determined solely by its origin and destination, and not by the actions taken by other messages. The Borodin-Hopcroft lower bound was later improved to ( p n=d) by Kaklama-nis, Krizanc, and Tsantilas <ref> [20] </ref>. These bounds can be translated to lower bounds (in bit steps) for oblivious wormhole routing algorithms simply by multiplying the time by the message length, e.g., the Kaklamanis et al. bounds becomes (L n=d) bit steps.
Reference: [21] <author> P. Kermani and L. Kleinrock. </author> <title> Virtual cut-through: a new computer communications switching technique. </title> <journal> Computer Networks, </journal> <volume> 3(4) </volume> <pages> 267-286, </pages> <year> 1979. </year>
Reference-contexts: A natural generalization of wormhole routing is to allow a switch to queue more than one flit per message, perhaps even allowing it to queue an entire message. This approach is called virtual cut-through routing <ref> [21] </ref>, and predates wormhole routing. A third common routing method is store-and-forward routing. In a store-and-forward router, a switch must store an entire message before it can forward any part of that message along the next edge on its route.
Reference: [22] <author> R. R. Koch. </author> <title> Increasing the size of a network by a constant factor can increase performance by more than a constant factor. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 221-230. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1988. </year>
Reference-contexts: Kruskal and Snir [24] showed that if each input in an n-input butterfly network sends a message to a randomly-chosen output, and at most one message can use any edge of the network, then the expected number of messages that reach their destinations is fi (n= log n). Koch <ref> [22] </ref> generalized the result of Kruskal and Snir by showing that if each edge can support B messages, then the expected fraction of messages that get through is fi (n= log 1=B n). <p> These nearly matching upper and lower bounds imply that increasing the queueing capacity of each edge can speed up a wormhole routing algorithm by a superlin-ear factor, an observation that was first made by Koch <ref> [22] </ref> for circuit-switching on the butterfly. For the butterfly, we present a simple randomized wormhole routing algorithm. The algorithm routes a q-relation on the inputs and outputs of an n-input butterfly in O (LQ (q + log n)(log 1=Q n) log log (qn)) bit-steps.
Reference: [23] <author> R. K. Koeninger, M. Furtney, and M. Walker. </author> <title> A shared MPP from Cray research. </title> <journal> Digital Technical Journal, </journal> <volume> 6(2) </volume> <pages> 8-21, </pages> <month> Spring </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Wormhole routing has become the routing method of choice in the latest generation of parallel computers, including experimental machines such as iWarp [8] and the J-Machine [35], and commercial machines such as the Intel Paragon, Cray T3D <ref> [23] </ref>, and Connection Machine CM-5 [30]. In a wormhole router, the bits in a message are grouped into a sequence of flits, where a flit is the smallest unit of 1 Richard Cole is supported in part by NSF Grants No.
Reference: [24] <author> C. P. Kruskal and M. Snir. </author> <title> The performance of multistage interconnection networks for multiprocessors. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-32(12):1091-1098, </volume> <month> December </month> <year> 1983. </year>
Reference-contexts: This algorithm was implemented on the IBM GF-11 parallel computer. Waksman's algorithm, however, uses global knowledge of the permutation in order to set the switches of the network. Kruskal and Snir <ref> [24] </ref> showed that if each input in an n-input butterfly network sends a message to a randomly-chosen output, and at most one message can use any edge of the network, then the expected number of messages that reach their destinations is fi (n= log n).
Reference: [25] <author> F. T. Leighton. </author> <title> Introduction to Parallel Algorithms and Architectures: Arrays * Trees * Hypercubes. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1992. </year>
Reference-contexts: For a broader treatment of the subject, see the survey paper by Leighton [28], or his book <ref> [25] </ref>. In what follows we describe only the research most closely related to this paper. 1.3.1 Network-independent algorithms The idea of decoupling the path selection process from the scheduling process, and then analyzing the scheduling process alone, was first used by Leighton, Maggs, and Rao [27]. <p> Since this paper presents no new results in this area, we will not review the previous results. Descriptions of several of the algorithms can be found in <ref> [25, 28] </ref>. Instead, we focus on algorithms for wormhole routing. In two early papers, Beizer [6] and Benes [7] showed that it is possible to route edge-disjoint paths between the inputs and outputs of a Benes network in any permutation. A Benes network is simply two back-to-back butterfly networks. <p> Maggs and Sitaraman [31] generalized the previous two results by showing that, by making two passes through a butterfly, it is possible to route a fi (n= log 1=B n) fraction of any permutation (rather than only a random permutation), with high probability. In Problem 3.285 of <ref> [25] </ref>, Leighton describes an algorithm for solving a random routing problem in which each input has one L-bit message to send. The algorithm runs in O ((L + log n) log n) bit steps. <p> into this class.) For the case L = log n, q = log N , and Q = 1, the lower bound of Ranade et al. is (log 3 n=(log log n) 2 ), but several known store-and-forward routing algorithms run in O (log 2 n) bit steps (see Leighton <ref> [25] </ref>). Hence, the store-and-forward algorithms are faster. The switches executing the store-and-forward algorithms, however, must each have the capacity to queue an entire message, i.e., (log n) bits.
Reference: [26] <author> F. T. Leighton, B. M. Maggs, A. G. Ranade, and S. B. Rao. </author> <title> Randomized routing and sorting on fixed-connection networks. </title> <journal> Journal of Algorithms, </journal> <volume> 17(1) </volume> <pages> 157-205, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: The O (C + D) bound of Leighton et al. was followed by a number of algorithmic results. For the special case of leveled networks, Leighton, Maggs, Ranade, and Rao <ref> [26] </ref> presented a simple on-line store-and-forward algorithm for routing any set of n messages in a leveled network with depth D in O (C + D + log n) message steps.
Reference: [27] <author> F. T. Leighton, B. M. Maggs, and S. B. Rao. </author> <title> Packet routing and job-shop scheduling in O(congestion + dilation) steps. </title> <journal> Combinatorica, </journal> <volume> 14(2) </volume> <pages> 167-180, </pages> <year> 1994. </year>
Reference-contexts: In what follows we describe only the research most closely related to this paper. 1.3.1 Network-independent algorithms The idea of decoupling the path selection process from the scheduling process, and then analyzing the scheduling process alone, was first used by Leighton, Maggs, and Rao <ref> [27] </ref>.
Reference: [28] <author> T. Leighton. </author> <title> Methods for message routing in parallel machines. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 77-96, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: For a broader treatment of the subject, see the survey paper by Leighton <ref> [28] </ref>, or his book [25]. In what follows we describe only the research most closely related to this paper. 1.3.1 Network-independent algorithms The idea of decoupling the path selection process from the scheduling process, and then analyzing the scheduling process alone, was first used by Leighton, Maggs, and Rao [27]. <p> Since this paper presents no new results in this area, we will not review the previous results. Descriptions of several of the algorithms can be found in <ref> [25, 28] </ref>. Instead, we focus on algorithms for wormhole routing. In two early papers, Beizer [6] and Benes [7] showed that it is possible to route edge-disjoint paths between the inputs and outputs of a Benes network in any permutation. A Benes network is simply two back-to-back butterfly networks.
Reference: [29] <author> T. Leighton and B. Maggs. </author> <title> Fast algorithms for finding O(congestion + dilation) packet routing schedules. </title> <booktitle> In Proceedings of the 28th Hawaii International Conference on System Sciences, </booktitle> <volume> volume 2, </volume> <pages> pages 555-563, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: Recently, Leighton and Maggs <ref> [29] </ref> discovered a sequential algorithm for finding a store-and-forward routing schedule of length O (C + D) on any network. The algorithm is based on the techniques of Beck [5] and Alon [2] for making the Lovasz Local Lemma constructive. <p> The proof is nonconstructive, but can be made constructive using the techniques in <ref> [29] </ref>. The algorithm uses information about the entire network and all of the messages in order to find a routing schedule. Hence, it is not an on-line algorithm.
Reference: [30] <author> C. E. Leiserson, Z. S. Abuhamdeh, D. C. Douglas, C. R. Feynman, M. N. Ganmukhi, J. V. Jill, W. D. Hillis, B. C. Kuszmaul, M. A. St. Pierre, D. S. Wells, M. C. Wong, S.-W. Yang, and R. Zak. </author> <title> The network architecture of the connection machine CM-5. </title> <booktitle> In Proceedings of the 4th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 272-285, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Wormhole routing has become the routing method of choice in the latest generation of parallel computers, including experimental machines such as iWarp [8] and the J-Machine [35], and commercial machines such as the Intel Paragon, Cray T3D [23], and Connection Machine CM-5 <ref> [30] </ref>. In a wormhole router, the bits in a message are grouped into a sequence of flits, where a flit is the smallest unit of 1 Richard Cole is supported in part by NSF Grants No.
Reference: [31] <author> B. M. Maggs and R. K. Sitaraman. </author> <title> Simple algorithms for routing on butterfly networks with bounded queues. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 150-161, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Koch's work was motivated by the fact that on the BBN Butterfly parallel computer [4], B = 2. Maggs and Sitaraman <ref> [31] </ref> generalized the previous two results by showing that, by making two passes through a butterfly, it is possible to route a fi (n= log 1=B n) fraction of any permutation (rather than only a random permutation), with high probability.
Reference: [32] <author> Y. Mansour and B. Patt-Shamir. </author> <title> Greedy packet scheduling on shortest paths. </title> <journal> Journal of Algorithms, </journal> <volume> 14 </volume> <pages> 449-65, </pages> <year> 1993. </year>
Reference-contexts: In a leveled network with depth D, each node is labeled with an integer between 0 and D, and each edge with its tail on level i, 0 i &lt; D, has its head on level i + 1. Mansour and Patt-Shamir <ref> [32] </ref> then showed that, in any network, if messages are routed greedily on shortest paths, then all of the messages reach their destinations within D + n 1 steps, where n is the total number of messages.
Reference: [33] <author> P. M. Merlin and P. J. Schweitzer. </author> <title> Deadlock avoidance in store-and-forward networks. 1: Store-and-forward deadlock. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 28 </volume> <pages> 345-354, </pages> <year> 1980. </year>
Reference-contexts: Minimal deadlock-free algorithms have been designed for de Bruijn and shu*e-exchange networks [11]. Fully-adaptive minimal deadlock-free algorithms have been devised for trees <ref> [33] </ref>, meshes [36], toruses [12], and hypercubes [36].
Reference: [34] <editor> F. Meyer auf der Heide and B. Vocking. </editor> <title> A packet routing protocol for arbitrary networks. </title> <booktitle> In Proceedings of the 12th Symposium on Theoretical Aspects of Computer Science, </booktitle> <pages> pages 291-302, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: These schedules may be much longer than optimal, however, because n may be much larger than C. Meyer auf der Heide and Vocking <ref> [34] </ref> later devised a simple on-line randomized algorithm that routes all messages to their destinations in O (C + D + log n) steps, with high probability, provided that the paths taken by the messages are short-cut free (e.g., shortest paths).
Reference: [35] <author> M. D. Noakes, D. A. Wallach, and W. J. Dally. </author> <title> The J-Machine multicomputer: an architectural evaluation. </title> <booktitle> In Proceedings of the 20th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 224-235, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Wormhole routing has become the routing method of choice in the latest generation of parallel computers, including experimental machines such as iWarp [8] and the J-Machine <ref> [35] </ref>, and commercial machines such as the Intel Paragon, Cray T3D [23], and Connection Machine CM-5 [30].
Reference: [36] <author> G. D. Pifarre, L. Gravano, S. A. Felperin, and J. L. C. Sanz. </author> <title> Fully-adaptive minimal deadlock-free packet routing in hypercubes, meshes, and other networks. </title> <booktitle> In Proceedings of the 3rd Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 278-290, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: Minimal deadlock-free algorithms have been designed for de Bruijn and shu*e-exchange networks [11]. Fully-adaptive minimal deadlock-free algorithms have been devised for trees [33], meshes <ref> [36] </ref>, toruses [12], and hypercubes [36]. <p> Minimal deadlock-free algorithms have been designed for de Bruijn and shu*e-exchange networks [11]. Fully-adaptive minimal deadlock-free algorithms have been devised for trees [33], meshes <ref> [36] </ref>, toruses [12], and hypercubes [36].
Reference: [37] <author> A. Ranade, S. Schleimer, and D. S. Wilkerson. </author> <title> Nearly tight bounds for wormhole routing. </title> <booktitle> In Proceedings of the 35th Annual Symposium on Foundations of Computer Science, </booktitle> <year> 1994. </year>
Reference-contexts: Greenberg and Oh [19] were the first to state non-trivial network-independent wormhole routing results in terms of L, C, and D. They created a randomized algorithm that takes O (lCD + lCL log n) bit steps, where l = minfL; Dg. Ranade, Schleimer, and Wilkerson <ref> [37] </ref> then showed that on any network, any set of L-bit messages whose paths have congestion C and dilation D can be routed in O (LCD) bit steps. The O (LCD) bound improves on the naive O ((L + D)CD) bound. <p> The bound from [10] is stronger than the bound from [1] when d is large. For wormhole routing, Ranade, Schleimer, and Wilker-son <ref> [37] </ref> showed how to construct a network with queue size Q = 1, and a set of L-bit messages whose paths have congestion C and dilation D in which the optimal wormhole routing schedule requires (LCD) bit steps. <p> Felperin et al. [18] independently discovered an O (log 4 n) bit-step algorithm for solving a random problem for the case L = O (log n) and q = log n, and then Ranade et al. <ref> [37] </ref> discovered an O (log 3 n log log n) bit-step algorithm. <p> The algorithm can also be applied to a multi-Benes network (two back-to-back multibutterfly networks), which is a nonblocking network. On trees and meshes with constant dimension, Ranade et al. <ref> [37] </ref> presented off-line algorithms for routing in O (LC + D) steps. <p> This matches our upper bounds within small factors. This proof is a generalization of the proof for Q = 1 in <ref> [37] </ref>. The structure of our proof is similar to theirs. <p> The lower bound also extends to routing a random q-relation. In this section, and this section alone, we assume that Q is a constant. The proof of this lower bound generalizes the lower bound for Q = 1 presented by Ranade, Schleimer, and Wilkerson <ref> [37] </ref>. The structure of our proof follows very closely the structure of theirs. Note that the lower bound matches our upper bound within small factors. <p> Theorem 3.2.6 If an algorithm takes T time to route a to tal of nq messages then there exists a set of nqL=T messages that do not collide. Proof: This lemma and its proof is similar to Lemma 4 of <ref> [37] </ref>. The key is that the messages can be partitioned into phases such that the heads of all messages in phase i arrive at the last level of the truncated-butterfly at time l + iL.
Reference: [38] <author> C. Scheideler and B. Vocking. </author> <title> Universal continuous routing strategies. </title> <booktitle> In Proceedings of the 8th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <month> June </month> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: It is worth noting that their algorithm is on-line, in the sense that it can easily be performed by the network switches themselves, whereas the network-independent algorithm described in this paper is not on-line. Scheideler and Vocking <ref> [38] </ref> have also recently shown that the same factor of D 1=B (or D 1=Q ) appears in the maximum injection rate for continuous wormhole routing algorithms. A continuous routing algorithm is one that accepts packets that are randomly generated over time according to a Poisson process.
Reference: [39] <author> C. L. Seitz, W. C. Athas, C. M. Flaig, A. J. Martin, J. Seizovic, C. S. Steele, and W.-K. Su. </author> <booktitle> The architecture and programming of the Ametek Series 2010 multicomputer. In Proceedings of the 3rd Conference on Hypercube Concurrent Computers and Applications, </booktitle> <volume> volume 1, </volume> <pages> pages 33-36, </pages> <year> 1988. </year>
Reference-contexts: In the first category Seitz et al. describe the architecture of the Ametek Series 2010 Multicomputer <ref> [39] </ref>, and Dally and Seitz [17] describe the Torus Routing Chip. In the second category, two of the most influential papers were written by Dally [15, 16]. The first analyzes the behavior of wormhole routing algorithms for k-ary n-cubes.
Reference: [40] <author> J. Spencer. </author> <title> Ten Lectures on the Probabilistic Method. </title> <publisher> SIAM, </publisher> <address> Philadelphia, PA, </address> <year> 1987. </year>
Reference-contexts: Overall, this gives a schedule of length O ((L + D)C (D log D) 1=Q ). Each step of the construction uses the Lovasz Local Lemma (LLL) <ref> [40, pp. 57-58] </ref>. The Lemma relates the probability p b of a "bad" event, where events have limited dependence, ffi, to the existence of a scenario with no bad events, a good scenario; LLL shows there is a good scenario if 4ffi p b &lt; 1.
Reference: [41] <author> L. G. Valiant. </author> <title> A scheme for fast parallel communication. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11(2) </volume> <pages> 350-361, </pages> <month> May </month> <year> 1982. </year>
Reference-contexts: The algorithm runs in O ((L + log n) log n) bit steps. In Problem 3.286, he observes that the algorithm can be converted to one that routes any permutation using Valiant's idea <ref> [41] </ref> of first routing to random intermediate destinations. For the interesting case of L = O (log n), the time is O (log 2 n) bit steps.
Reference: [42] <author> A. Waksman. </author> <title> A permutation network. </title> <journal> Journal of the ACM, </journal> <volume> 15(1) </volume> <pages> 159-163, </pages> <month> January </month> <year> 1968. </year>
Reference-contexts: Instead, we focus on algorithms for wormhole routing. In two early papers, Beizer [6] and Benes [7] showed that it is possible to route edge-disjoint paths between the inputs and outputs of a Benes network in any permutation. A Benes network is simply two back-to-back butterfly networks. Waksman <ref> [42] </ref> gave an elegant linear time algorithm for determining how the nodes should be set in order to re-alize any particular permutation. Waksman's algorithm can be used for wormhole routing.
References-found: 42

