URL: http://www.cs.berkeley.edu/~aiken/ftp/ic95.ps
Refering-URL: http://www.cs.berkeley.edu/~aiken/pubs.html
Root-URL: 
Email: aiken@cs.berkeley.edu  kozen@cs.cornell.edu  wimmers@almaden.ibm.com  
Title: Decidability of Systems of Set Constraints with Negative Constraints  
Author: Alexander Aiken Dexter Kozen Ed Wimmers 
Address: Berkeley  
Affiliation: University of California,  Cornell University  IBM Almaden Research Center  
Abstract: Set constraints are relations between sets of terms. They have been used extensively in various applications in program analysis and type inference. Recently, several algorithms for solving general systems of positive set constraints have appeared. In this paper we consider systems of mixed positive and negative constraints, which are considerably more expressive than positive constraints alone. We show that it is decidable whether a given such system has a solution. The proof involves a reduction to a number-theoretic decision problem that may be of independent interest. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Aiken, D. Kozen, M. Vardi, and E. Wimmers, </author> <title> The complexity of set constraints, </title> <booktitle> in Proc. 1993 Conf. Computer Science Logic (CSL'93), </booktitle> <editor> E. Borger, Y. Gurevich, and K. Meinke, eds., </editor> <volume> vol. </volume> <booktitle> 832 of Lect. Notes in Comput. </booktitle> <institution> Sci., Eur. Assoc. Comput. Sci. </institution> <address> Logic, </address> <publisher> Springer, </publisher> <month> September </month> <year> 1993, </year> <pages> pp. 1-17. </pages>
Reference-contexts: Set constraints have numerous applications in program analysis and type inference [3, 4, 7, 14, 15, 18, 19, 20, 22]. Most of these systems deal with positive constraints only. Several algorithms for determining the satisfiability of general systems of positive constraints have appeared <ref> [1, 5, 6, 11, 13] </ref>. In [1], the satisfiability problem for a system S of positive constraints is shown to be equivalent to deciding whether a certain finite hypergraph constructed from S has an induced subhypergraph that is closed (see Section 4). <p> Set constraints have numerous applications in program analysis and type inference [3, 4, 7, 14, 15, 18, 19, 20, 22]. Most of these systems deal with positive constraints only. Several algorithms for determining the satisfiability of general systems of positive constraints have appeared [1, 5, 6, 11, 13]. In <ref> [1] </ref>, the satisfiability problem for a system S of positive constraints is shown to be equivalent to deciding whether a certain finite hypergraph constructed from S has an induced subhypergraph that is closed (see Section 4). <p> Relationships between these various approaches have been drawn in [16]. 2 Set Expressions and Set Constraints There is some variation in the literature regarding the definition of set expressions and set constraints, depending on the operations allowed. The following definition is taken from <ref> [1] </ref>. Let be a finite ranked alphabet consisting of symbols f , each with an associated arity arity (f ) 2 N. Symbols in of arity 0, 1, 2, and n are called nullary, unary, binary, and n-ary, respectively. Nullary elements are often called constants. <p> Therefore there is no solution of S with (x) = ftg, where t is any term not in F . 2 4 Set Constraints and Hypergraph Closure In <ref> [1] </ref> it is shown how to transform a given system of positive set constraints into an equivalent system in a special normal form. The transformation is linear for fixed . Applying this transformation to a system containing 6 negative constraints, we obtain the following normal form. <p> The last component is absent with positive constraints only. We outline here the translation of <ref> [1] </ref> along with the minor modifications necessary to handle negative constraints. 1. For every occurrence of a subexpression f E 1 : : : E n in S, let y 0 ; y 1 ; : : : ; y n be new variables. <p> This was erroneously omitted in the account of <ref> [1] </ref>). <p> Finally, replace each negative Boolean constraint E 6 F by the equivalent constraint E" ~ F 6= 0, and let D be the set of all such negative constraints. 8 As described in <ref> [1] </ref>, a system of set constraints S in normal form deter-mines a hypergraph H = (U; E f j f 2 ) as follows. The vertex set U is the set of all truth assignments u : X ! 2 satisfying B. <p> The hypergraph closure problem is the problem of determining whether a given hypergraph H has a closed induced subhypergraph. The following theorem was proved in <ref> [1] </ref>. Theorem 3 The hypergraph H corresponding to a system S of positive set constraints has a closed induced subhypergraph if and only if S is satisfiable. In brief, the proof of [1] establishes a one-to-one correspondence between set assignments satisfying S and maps : T ! U such that for <p> The following theorem was proved in <ref> [1] </ref>. Theorem 3 The hypergraph H corresponding to a system S of positive set constraints has a closed induced subhypergraph if and only if S is satisfiable. In brief, the proof of [1] establishes a one-to-one correspondence between set assignments satisfying S and maps : T ! U such that for all f 2 and for all terms ft 1 : : : t n , (ft 1 : : : t n ) 2 E f ((t 1 ); : : :
Reference: [2] <author> A. Aiken, D. Kozen, and E. Wimmers, </author> <title> Decidability of systems of set constraints with negative constraints, </title> <type> Tech. Rep. 93-1362, </type> <institution> Computer Science Department, Cornell University, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Set constraints are formal inclusions or negated inclusions between expressions representing subsets of T , the set of ground terms over a finite ranked fl Revised and expanded version of <ref> [2] </ref>. y EECS Division, University of California, Berkeley, CA 94720 z Computer Science Department, Cornell University, Ithaca, NY 14853 x IBM Almaden Research Center, 650 Harry Road, San Jose, CA 95120 1 alphabet .
Reference: [3] <author> A. Aiken and B. Murphy, </author> <title> Implementing regular tree expressions, </title> <booktitle> in Proc. 1991 Conf. Functional Programming Languages and Computer Architecture, </booktitle> <month> August </month> <year> 1991, </year> <pages> pp. </pages> <month> 427-447. </month> <title> [4] , Static type inference in a dynamically typed language, </title> <booktitle> in Proc. 18th Symp. Principles of Programming Languages, ACM, </booktitle> <month> January </month> <year> 1991, </year> <pages> pp. 279290. </pages>
Reference-contexts: Set constraints have numerous applications in program analysis and type inference <ref> [3, 4, 7, 14, 15, 18, 19, 20, 22] </ref>. Most of these systems deal with positive constraints only. Several algorithms for determining the satisfiability of general systems of positive constraints have appeared [1, 5, 6, 11, 13]. <p> In this paper we consider systems of mixed positive and negative constraints. Negative constraints considerably increase the power of the constraint language and have important applications in program analysis. For example, in <ref> [3, 4] </ref>, opportunities for program optimization are identified by an ad hoc technique for checking the satisfiability of systems of negative constraints.
Reference: [5] <author> A. Aiken and E. Wimmers, </author> <title> Solving systems of set constraints, </title> <booktitle> in Proc. 7th Symp. Logic in Computer Science, IEEE, </booktitle> <month> June </month> <year> 1992, </year> <pages> pp. 329-340. </pages>
Reference-contexts: Set constraints have numerous applications in program analysis and type inference [3, 4, 7, 14, 15, 18, 19, 20, 22]. Most of these systems deal with positive constraints only. Several algorithms for determining the satisfiability of general systems of positive constraints have appeared <ref> [1, 5, 6, 11, 13] </ref>. In [1], the satisfiability problem for a system S of positive constraints is shown to be equivalent to deciding whether a certain finite hypergraph constructed from S has an induced subhypergraph that is closed (see Section 4).
Reference: [6] <author> L. Bachmair, H. Ganzinger, and U. Waldmann, </author> <title> Set constraints are the monadic class, </title> <booktitle> in Proc. 8th Symp. Logic in Computer Science, IEEE, </booktitle> <month> June </month> <year> 1993, </year> <pages> pp. 75-83. </pages>
Reference-contexts: Set constraints have numerous applications in program analysis and type inference [3, 4, 7, 14, 15, 18, 19, 20, 22]. Most of these systems deal with positive constraints only. Several algorithms for determining the satisfiability of general systems of positive constraints have appeared <ref> [1, 5, 6, 11, 13] </ref>. In [1], the satisfiability problem for a system S of positive constraints is shown to be equivalent to deciding whether a certain finite hypergraph constructed from S has an induced subhypergraph that is closed (see Section 4). <p> Stefansson [21] has subsequently shown that the Diophantine satisfiability problem is NP -complete and the satisfia- bility problem for systems of mixed positive and negative set constraints is complete for NEXPTIME . Charatonik and Pacholski [8] have given an alternative proof of this result based on the approach of <ref> [6] </ref> involving monadic logic, and have extended the result to include projections [9]. Relationships between these various approaches have been drawn in [16]. 2 Set Expressions and Set Constraints There is some variation in the literature regarding the definition of set expressions and set constraints, depending on the operations allowed.
Reference: [7] <author> J. A. Brzozowski and E. Leiss, </author> <title> On equations for regular languages, finite automata, and sequential networks, </title> <institution> Theor. Comput. Sci., </institution> <month> 10 </month> <year> (1980), </year> <pages> pp. </pages> <year> 1935. </year>
Reference-contexts: Set constraints have numerous applications in program analysis and type inference <ref> [3, 4, 7, 14, 15, 18, 19, 20, 22] </ref>. Most of these systems deal with positive constraints only. Several algorithms for determining the satisfiability of general systems of positive constraints have appeared [1, 5, 6, 11, 13].
Reference: [8] <author> W. Charatonik and L. Pacholski, </author> <title> Negative set constraints with equality, </title> <booktitle> in Proc. 9th Symp. Logic in Computer Science, IEEE, </booktitle> <month> July </month> <year> 1994, </year> <pages> pp. </pages> <month> 128-136. </month> <title> [9] , Set constraints with projections are in NEXPTIME , in Proc. </title> <booktitle> 35th Symp. Foundations of Computer Science, IEEE, </booktitle> <month> November </month> <year> 1994, </year> <pages> pp. 642653. </pages>
Reference-contexts: Stefansson [21] has subsequently shown that the Diophantine satisfiability problem is NP -complete and the satisfia- bility problem for systems of mixed positive and negative set constraints is complete for NEXPTIME . Charatonik and Pacholski <ref> [8] </ref> have given an alternative proof of this result based on the approach of [6] involving monadic logic, and have extended the result to include projections [9].
Reference: [10] <author> D. Cox, J. Little, and D. O'Shea, </author> <title> Ideals, Varieties, and Algorithms, </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Lemma 15 (Dickson's Lemma) The set N k of k-tuples of natural numbers under the componentwise order is a well partial order. For a proof of Dickson's Lemma, see <ref> [10] </ref>. We will use Dickson's Lemma in the argument below to conclude that along any infinite path in T C , we must eventually have C t .
Reference: [11] <author> R. Gilleron, S. Tison, and M. Tommasi, </author> <title> Solving systems of set con-straints using tree automata, </title> <booktitle> in Proc. Symp. </booktitle> <institution> Theor. Aspects of Comput. Sci., </institution> <note> vol. 665, Springer-Verlag Lect. Notes in Comput. Sci., </note> <month> February </month> <year> 1993, </year> <pages> pp. </pages> <month> 505514. </month> <title> [12] , Solving systems of set constraints with negated subset relationships, </title> <booktitle> in Proc. 34th Symp. </booktitle> <institution> Foundations of Comput. Sci., IEEE, </institution> <month> November </month> <year> 1993, </year> <pages> pp. 372-380. </pages>
Reference-contexts: Set constraints have numerous applications in program analysis and type inference [3, 4, 7, 14, 15, 18, 19, 20, 22]. Most of these systems deal with positive constraints only. Several algorithms for determining the satisfiability of general systems of positive constraints have appeared <ref> [1, 5, 6, 11, 13] </ref>. In [1], the satisfiability problem for a system S of positive constraints is shown to be equivalent to deciding whether a certain finite hypergraph constructed from S has an induced subhypergraph that is closed (see Section 4).
Reference: [13] <author> N. Heintze and J. Jaffar, </author> <title> A decision procedure for a class of set con-straints, </title> <booktitle> in Proc. 5th Symp. Logic in Computer Science, IEEE, </booktitle> <month> June </month> <year> 1990, </year> <pages> pp. </pages> <month> 42-51. </month> <title> [14] , A finite presentation theorem for approximating logic programs, </title> <booktitle> in Proc. 17th Symp. Principles of Programming Languages, ACM, </booktitle> <month> January </month> <year> 1990, </year> <pages> pp. 197-209. </pages>
Reference-contexts: Set constraints have numerous applications in program analysis and type inference [3, 4, 7, 14, 15, 18, 19, 20, 22]. Most of these systems deal with positive constraints only. Several algorithms for determining the satisfiability of general systems of positive constraints have appeared <ref> [1, 5, 6, 11, 13] </ref>. In [1], the satisfiability problem for a system S of positive constraints is shown to be equivalent to deciding whether a certain finite hypergraph constructed from S has an induced subhypergraph that is closed (see Section 4).
Reference: [15] <author> N. D. Jones and S. S. Muchnick, </author> <title> Flow analysis and optimization of LISPlike structures, </title> <booktitle> in Proc. 6th Symp. Principles of Programming Languages, ACM, </booktitle> <month> January </month> <year> 1979, </year> <pages> pp. 244-256. </pages>
Reference-contexts: Set constraints have numerous applications in program analysis and type inference <ref> [3, 4, 7, 14, 15, 18, 19, 20, 22] </ref>. Most of these systems deal with positive constraints only. Several algorithms for determining the satisfiability of general systems of positive constraints have appeared [1, 5, 6, 11, 13].
Reference: [16] <author> D. Kozen, </author> <title> Logical aspects of set constraints, </title> <booktitle> in Proc. 1993 Conf. Computer Science Logic (CSL'93), </booktitle> <editor> E. Borger, Y. Gurevich, and K. Meinke, eds., </editor> <volume> vol. </volume> <booktitle> 832 of Lect. Notes in Comput. </booktitle> <institution> Sci., Eur. Assoc. Comput. Sci. </institution> <address> Logic, </address> <publisher> Springer, </publisher> <month> September </month> <year> 1993, </year> <pages> pp. 175-188. </pages>
Reference-contexts: Charatonik and Pacholski [8] have given an alternative proof of this result based on the approach of [6] involving monadic logic, and have extended the result to include projections [9]. Relationships between these various approaches have been drawn in <ref> [16] </ref>. 2 Set Expressions and Set Constraints There is some variation in the literature regarding the definition of set expressions and set constraints, depending on the operations allowed. The following definition is taken from [1].
Reference: [17] <author> K. Marriott and M. Odersky, </author> <title> Systems of negative Boolean constraints, </title> <type> Tech. Rep. </type> <institution> YALEU/DCS/RR-900, Computer Science Department, Yale University, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: For example, in [3, 4], opportunities for program optimization are identified by an ad hoc technique for checking the satisfiability of systems of negative constraints. Set constraints with only nullary symbols correspond to Boolean algebras over a finite set of atoms; in <ref> [17] </ref> general results on solving negative constraints in arbitrary Boolean algebras are given. In this paper we give a general decision procedure for determining whether a given system of mixed positive and negative set constraints over an arbitrary signature is satisfiable.
Reference: [18] <author> P. Mishra, </author> <title> Towards a theory of types in PROLOG, </title> <booktitle> in Proc. 1st Symp. Logic Programming, IEEE, </booktitle> <year> 1984, </year> <pages> pp. 289-298. </pages>
Reference-contexts: Set constraints have numerous applications in program analysis and type inference <ref> [3, 4, 7, 14, 15, 18, 19, 20, 22] </ref>. Most of these systems deal with positive constraints only. Several algorithms for determining the satisfiability of general systems of positive constraints have appeared [1, 5, 6, 11, 13].
Reference: [19] <author> P. Mishra and U. Reddy, </author> <title> Declaration-free type checking, </title> <booktitle> in Proc. 12th Symp. Principles of Programming Languages, ACM, </booktitle> <year> 1985, </year> <pages> pp. 7-21. </pages>
Reference-contexts: Set constraints have numerous applications in program analysis and type inference <ref> [3, 4, 7, 14, 15, 18, 19, 20, 22] </ref>. Most of these systems deal with positive constraints only. Several algorithms for determining the satisfiability of general systems of positive constraints have appeared [1, 5, 6, 11, 13].
Reference: [20] <author> J. C. Reynolds, </author> <title> Automatic computation of data set definitions, </title> <booktitle> in Information Processing 68, </booktitle> <publisher> North-Holland, </publisher> <year> 1969, </year> <pages> pp. 456-461. </pages>
Reference-contexts: Set constraints have numerous applications in program analysis and type inference <ref> [3, 4, 7, 14, 15, 18, 19, 20, 22] </ref>. Most of these systems deal with positive constraints only. Several algorithms for determining the satisfiability of general systems of positive constraints have appeared [1, 5, 6, 11, 13].
Reference: [21] <author> K. Stef ansson, </author> <title> Systems of set constraints with negative constraints are NEXPTIME-complete, </title> <booktitle> in Proc. 9th Symp. Logic in Computer Science, IEEE, </booktitle> <month> June </month> <year> 1994, </year> <pages> pp. 137-141. </pages>
Reference-contexts: The proof has a nonconstructive step involving Dickson's Lemma and does not give any complexity bounds. The decidability result for systems of mixed positive and negative set constraints was obtained independently by Gilleron, Tison, and Tommasi [12] 2 using automata-theoretic techniques. Stefansson <ref> [21] </ref> has subsequently shown that the Diophantine satisfiability problem is NP -complete and the satisfia- bility problem for systems of mixed positive and negative set constraints is complete for NEXPTIME .
Reference: [22] <author> J. Young and P. O'Keefe, </author> <title> Experience with a type evaluator, in Partial Evaluation and Mixed Computation, </title> <editor> D. Bjtrner, A. P. Ershov, and N. D. Jones, eds., </editor> <publisher> North-Holland, </publisher> <year> 1988, </year> <pages> pp. 573-581. 35 </pages>
Reference-contexts: Set constraints have numerous applications in program analysis and type inference <ref> [3, 4, 7, 14, 15, 18, 19, 20, 22] </ref>. Most of these systems deal with positive constraints only. Several algorithms for determining the satisfiability of general systems of positive constraints have appeared [1, 5, 6, 11, 13].
References-found: 18

