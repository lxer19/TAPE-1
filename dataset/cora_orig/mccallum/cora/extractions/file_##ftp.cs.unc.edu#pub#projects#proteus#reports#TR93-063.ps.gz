URL: file://ftp.cs.unc.edu/pub/projects/proteus/reports/TR93-063.ps.gz
Refering-URL: http://www.cs.unc.edu/Research/proteus/proteus-publications.html
Root-URL: http://www.cs.unc.edu
Title: C Vector Library  
Author: UnCvL: Rickard E. Faith Doug L. Hoffman David G. Stahl 
Address: Campus Box 3175, Sitterson Hall Chapel Hill, North Carolina 27599-3175  
Affiliation: The University of North Carolina  fi Department of Computer Science University of North Carolina at Chapel Hill  
Pubnum: TR93-063  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. Becker and S. </author> <title> Tell. C vector library (CiViL) for MasPar. </title> <institution> University of North Carolina at Chapel Hill, Department of Computer Science, </institution> <year> 1990. </year>
Reference-contexts: The element distribution, in turn, greatly impacts the communication cost for the scan and reduce vector operations. We chose the "cut and stack" decomposition after reviewing an earlier implementation effort by David Becker and Steve Tell <ref> [1] </ref> that used the hierarchical model. The cut and stack decomposition simplifies index calculation in the permutation operations and tends to utilize the interconnection network more effectively.
Reference: [2] <author> G. Blelloch, S. Chatterjee, J. Sipelstein, and M. Zagha. Cvl: </author> <title> A C vector library. </title> <institution> Carnegie Mellon University, School of Computer Science, </institution> <year> 1991. </year>
Reference-contexts: 1 Introduction This paper describes our efforts in implementing a version of Cvl (C Vector Library) for the MasPar MP-1 SIMD computer. Cvl is a library of rudimentary vector routines, callable from C, as described by G. Blelloch, et. al. <ref> [2, 6] </ref>. UnCvl is an implementation of the Cvl library routines written in mpl, MasPar's parallel version of C. The main motivation for implementing Cvl on the MP-1 is to provide support for Nesl, a high level, portable parallel programming interface [3]. <p> Working from the rather vague descriptions of the Cvl functions in <ref> [2, 6] </ref>, and checking the results of our work against test programs known to run on the sequential version of Cvl, we have written code for all the documented functions and for many of the undocumented functions. 2 The question of efficiency is a bit more complicated since the efficiency of
Reference: [3] <author> Guy E. Blelloch. NESL: </author> <title> A nested data-parallel language. </title> <type> Technical Report CMU-CS-92-103, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <year> 1992. </year>
Reference-contexts: Blelloch, et. al. [2, 6]. UnCvl is an implementation of the Cvl library routines written in mpl, MasPar's parallel version of C. The main motivation for implementing Cvl on the MP-1 is to provide support for Nesl, a high level, portable parallel programming interface <ref> [3] </ref>. Nesl compiles to an intermediate language called Vcode which, in turn, is implemented using Cvl. Our Cvl implementation on the MP-1 will also be used in the parallel execution of the Proteus language at the University of North Carolina [5].
Reference: [4] <author> John L. Hennessy and David A. Patterson. </author> <title> Computer Architecture: A Quantitative Approach. </title> <address> San Mateo, California: </address> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1990. </year>
Reference-contexts: Tables 1 and 2 compares the current MasPar implementation with seasoned, optimized CM-2 and Cray versions of Cvl. 7 Speedup was calculated using the following formula <ref> [4, p. 10] </ref>: Speedup = Execution time MasPar Execution time other machine 6 The following command was used to generate the performance data: test-prims -t6 -p4 -l1048576 (clock resolution was computed as 133 seconds per tick). 7 Timings for the CM-2 also used vecotors of length 1048576.
Reference: [5] <author> Jan F. Prins and Daniel W. Palmer. </author> <title> Transforming high-level data-parallel programs into vector operations. </title> <booktitle> In Proceedings 4th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Nesl compiles to an intermediate language called Vcode which, in turn, is implemented using Cvl. Our Cvl implementation on the MP-1 will also be used in the parallel execution of the Proteus language at the University of North Carolina <ref> [5] </ref>. Implemented functions include 195 elementwise operations, 180 scan and reduce operations, 108 permute operations, and 102 miscellaneous and support operations.
Reference: [6] <author> J. Sipelstein, G. Blelloch, S. Chatterjee, J. Hardwick, and M. Zagha. Cvl: </author> <title> C vector library manual, </title> <type> version 2. Technical Report CMU-CS-93-114, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <year> 1993. </year>
Reference-contexts: 1 Introduction This paper describes our efforts in implementing a version of Cvl (C Vector Library) for the MasPar MP-1 SIMD computer. Cvl is a library of rudimentary vector routines, callable from C, as described by G. Blelloch, et. al. <ref> [2, 6] </ref>. UnCvl is an implementation of the Cvl library routines written in mpl, MasPar's parallel version of C. The main motivation for implementing Cvl on the MP-1 is to provide support for Nesl, a high level, portable parallel programming interface [3]. <p> Working from the rather vague descriptions of the Cvl functions in <ref> [2, 6] </ref>, and checking the results of our work against test programs known to run on the sequential version of Cvl, we have written code for all the documented functions and for many of the undocumented functions. 2 The question of efficiency is a bit more complicated since the efficiency of
References-found: 6

