URL: http://www.cs.princeton.edu/~dpd/Papers/ChazelleDobkinShourabouraTal.ps.Z
Refering-URL: http://www.cs.princeton.edu/~dpd/Research.html
Root-URL: http://www.cs.princeton.edu
Title: Strategies for Polyhedral Surface Decomposition: An Experimental Study  
Author: Bernard Chazelle David P. Dobkin Nadia Shouraboura Ayellet Tal 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Aronov, B., Sharir, M. </author> <title> Triangles in space or building (and analyzing) castles in the air, </title> <journal> Combinatorica, </journal> <volume> 10 (1990), </volume> <pages> 137-173. </pages>
Reference: [2] <author> Aronov, B., Sharir, M. </author> <title> Castles in the air revisited, </title> <booktitle> Proc. 8th Ann. ACM Symp. </booktitle> <institution> Comput. Geom. </institution> <year> (1992), </year> <pages> 146-156. </pages> <note> To appear in Disc. Comput. Geom. </note>
Reference: [3] <author> AutoCAD Reference Manual, Autodesk, Inc. </author> <note> Publication 100625 (1992). </note>
Reference-contexts: Bitmap animations, such as flics and cell animations, are the simplest to play back, but they are tremendously wasteful of storage. They also make it hard to build in interactive user-response features. An alternative is to store background bitmaps and represent moving objects as wire frames <ref> [3] </ref>. Besides the savings in storage, the main advantage of this approach is to allow for real-time user input. Unfortunately this has an adverse effect on speed, not to mention the added development time associated with more complicated rendering and playback algorithms.
Reference: [4] <author> Bajaj, C.L., Dey, </author> <title> T.K. Convex decompositions of polyhedra and robustness, </title> <journal> SIAM J. Comput., </journal> <volume> 21 (1992), </volume> <pages> 339-364. </pages>
Reference: [5] <author> Bern, M. </author> <title> Compatible tetrahedralizations, </title> <booktitle> Proc. 9th Ann. ACM Symp. </booktitle> <institution> Comput. Geom. </institution> <year> (1993), </year> <pages> 281-288. </pages>
Reference: [6] <author> Bern, M., Eppstein, D. </author> <title> Mesh generation and optimal triangulation, in: Computing in Euclidean Geometry, 1, World Scientific, </title> <editor> ed. D. Z. Du and F. K. </editor> <booktitle> Hwang (1992), </booktitle> <pages> 23-90. </pages>
Reference: [7] <author> Bern, M., Eppstein, D., Gilbert, J. </author> <title> Provably good mesh generation, </title> <booktitle> Proc. 31st Ann. IEEE Symp. </booktitle> <institution> Foundat. Comput. Sci. </institution> <year> (1990), </year> <pages> 231-241. </pages>
Reference: [8] <author> Chazelle, B. </author> <title> Convex partitions of polyhedra: a lower bound and worst-case optimal algorithm, </title> <journal> SIAM J. Comput., </journal> <volume> 13 (1984), </volume> <pages> 488-507. </pages>
Reference-contexts: We believe that convex surface decomposition techniques can alleviate this problem. Work is underway to test this assumption. Besides simplicity, decomposing the boundary of a polyhedron into convex patches has other advantages. For example, while a polyhedral solid decomposition can suffer a quadratic blow-up <ref> [8] </ref>, boundary decompositions are always linear in size. Better than that, the number of convex patches can be kept within a constant factor of the number of reflex angles [11]. We have gathered empirical evidence suggesting that even highly complex surfaces typically consist of only a handful of patches.
Reference: [9] <author> Chazelle, B., Palios, L. </author> <title> Triangulating a nonconvex polytope, </title> <journal> Disc. Comput. Geom., </journal> <volume> 5 (1990), </volume> <pages> 505-526. </pages>
Reference: [10] <author> Chazelle, B., Palios, L. </author> <title> Decomposition algorithms in geometry, in Algebraic Geometry and its Applications, </title> <editor> C. Bajaj, Ed., Chap.27, </editor> <publisher> Springer-Verlag, </publisher> <year> 1994, </year> <pages> pp. 419-447. </pages>
Reference: [11] <author> Chazelle, B., Palios, L. </author> <title> Decomposing the boundary of a nonconvex polytope, </title> <booktitle> Proc. 3rd Scandinavian Workshop on Algorithm Theory (1992), </booktitle> <pages> 364-375. </pages>
Reference-contexts: For example, while a polyhedral solid decomposition can suffer a quadratic blow-up [8], boundary decompositions are always linear in size. Better than that, the number of convex patches can be kept within a constant factor of the number of reflex angles <ref> [11] </ref>. We have gathered empirical evidence suggesting that even highly complex surfaces typically consist of only a handful of patches. For example, a standard drinking glass, regardless of its description size, might involve no more than a dozen convex patches. <p> The main motivation for including them in our investigation was that many users are equipped with space partitioning software, so it was of practical relevance to assess their effectiveness. Space-sweep heuristics were also natural candidates. Their asymptotic performance is guaranteed to be linear <ref> [11] </ref>, but even the simplest ones are quite difficult to implement. An innovative aspect of this work has been the use of animations to guide our search for good heuristics. Runs and benchmarks produce numbers that tell us how good or how bad a given heuristic is. <p> In the worst case the number of patches is quadratic. In practice it appears that such a blowup is unlikely, especially in view of our edge selection rule. Space Sweep. We implemented a simplified version of the method in <ref> [11] </ref>. In particular, we modified the algorithm to prevent the creation of Steiner points. Although the linearity of the output size is no longer (theoretically) guaranteed, the simplification seems to have no adverse effect; on the other hand, it makes coding much easier.
Reference: [12] <author> Chazelle, B., Shouraboura, N. </author> <title> Bounds on the size of tetrahedralizations, </title> <booktitle> Proc. 10th Ann. ACM Symp. </booktitle> <institution> Comput. Geom. </institution> <year> (1994), </year> <pages> 231-239. </pages>
Reference: [13] <author> Dobkin, D.P., Kirkpatrick, D.G. </author> <title> Fast detection of polyhedral intersection, </title> <journal> Theoret. Com-put. Sci., </journal> <volume> 27 (1983), </volume> <pages> 241-253. </pages>
Reference-contexts: Math., Princeton University Department of Computer Science, Weizmann Institute polyhedral hierarchies can be defined on arbitrary convex patches (solid polyhedra are not needed), intersection primitives can be greatly speeded up when convex surface decompositions are available <ref> [13] </ref>. Another application can be found in multimedia animations. Bitmap animations, such as flics and cell animations, are the simplest to play back, but they are tremendously wasteful of storage. They also make it hard to build in interactive user-response features.
Reference: [14] <author> Fuchs, H., Kedem, Z.M., Naylor, B. </author> <title> On visible surface generation by a priori tree structures, </title> <booktitle> Proc. SIGGRAPH '80, Comput. Graph. 14 (1980), </booktitle> <pages> 124-133. </pages>
Reference-contexts: This suggested distinguishing between convex and concave patches; the latter being convex patches (in the old sense) all of whose edges exhibit reflex angles. We shall specify below which sub-heuristics make this distinction. Space Partitioning. The strategy is to use binary space partitioning <ref> [14] </ref> to split up the surface into convex patches. Recall that the method builds a tree by recursively dividing space by a (well-chosen) cutting plane. Each node v of the tree is associated with a convex polyhedron P v .
Reference: [15] <author> O'Rourke, J. </author> <title> Art Gallery Theorems and Algorithms, </title> <publisher> Oxford Univ. Press, </publisher> <address> New York, NY (1987). </address>
Reference: [16] <author> Mitchell, S., Vavasis, S. </author> <title> Quality mesh generation in three dimensions, </title> <booktitle> Proc. 8th Ann. ACM Symp. </booktitle> <institution> Comput. Geom. </institution> <year> (1992), </year> <pages> 212-221. </pages>
Reference: [17] <author> Ruppert, J., Seidel, R. </author> <title> On the difficulty of triangulating three-dimensional non-convex polyhedra, </title> <journal> Disc. Comput. Geom., </journal> <volume> 7 (1992), </volume> <pages> 227-253. </pages>
Reference: [18] <author> Schroder, P., Hanrahan, P. </author> <title> On the form factor between two polygons, </title> <booktitle> Proc. SIGGRAPH 93, </booktitle> <publisher> ACM Press (1993), </publisher> <pages> 163-164. </pages>
Reference-contexts: We mention some applications briefly. In rendering, the coherence provided by convex patches can be exploited to speed up radiosity calculations. For example, from the closed-form expressions recently found for the form factors between two polygons <ref> [18] </ref>, it is possible to derive faster iterative methods for handling multiple pairs of facets that are known to lie on one or a few convex patches. Similar speed-ups can be obtained for shading, clipping, hit detection, etc.
Reference: [19] <author> Snyder, J.M., Woodbury, A.R., Fleischer, K., Currin, B., Barr, A.H. </author> <title> Interval methods for multi-point collisions between time-dependent curved surfaces, </title> <type> 321-334. </type>
Reference-contexts: Similar speed-ups can be obtained for shading, clipping, hit detection, etc. Snyder et al. <ref> [19] </ref> point out the importance and difficulty of exploiting polyhedral coherence in collision detection: Because fl Work by Bernard Chazelle, David Dobkin and Ayellet Tal has been supported in part by NSF Grant CCR-93-01254 and The Geometry Center, University of Minnesota, an STC funded by NSF, DOE, and Minnesota Technology, Inc.
References-found: 19

