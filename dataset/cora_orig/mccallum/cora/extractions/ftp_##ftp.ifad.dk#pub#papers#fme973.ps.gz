URL: ftp://ftp.ifad.dk/pub/papers/fme973.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Title: Towards an Integrated CASE and Theorem Proving Tool for VDM-SL  
Author: Sten Agerholm and Jacob Frost 
Address: DK-2800 Lyngby, Denmark  
Affiliation: 1 The Institute of Applied Computer Science (IFAD), Forskerparken 10, DK-5230 Odense M, Denmark 2 Department of Information Technology, Technical University of Denmark,  
Abstract: While CASE tools for formal methods have been relatively successful in industry, the up-take of the theorem proving technology has been quite slow. This suggests that more focus should be put on specification notations and pragmatic features of existing CASE tools in building proof support tools. This paper presents a prototype integrated CASE/TP tool which combines the benefits of a general-purpose theorem prover called Isabelle with those of a commercial CASE tool for the VDM-SL formal specification language|the IFAD VDM-SL Toolbox. The integrated tool supports pragmatic test and rigorous proof at the same time. Moreover, the tool supports proofs in the notation of the CASE tool by handling "difficult" constructs such as patterns and cases expressions in an untraditional way using reversible transformations.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. Agerholm. </author> <title> Mechanizing program verification in HOL. </title> <booktitle> In Proceedings of the 1991 International Workshop on the HOL Theorem Proving System and Its Applications. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year> <note> A full version is in Technical Report IR-111, </note> <institution> University of Aarhus, Department of Computer Science, Denmark. </institution>
Reference-contexts: As in Mural, we can treat state definitions and implicit operations. However, we have not yet considered explicit operations and statements, which form an imperative subset of VDM-SL, but already existing work on formalizing Hoare logic in the HOL theorem prover may be useful <ref> [1] </ref>. Features of VDM-SL like exception handling have not been considered either.
Reference: 2. <author> S. Agerholm. </author> <title> Translating specifications in VDM-SL to PVS. </title> <editor> In J. von Wright, J. Grundy, and J. Harrison, editors, </editor> <booktitle> Proceedings of the 9th International Conference on Theorem Proving in Higher Order Logics (TPHOLs'96), volume 1125 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Our intended use of the combined tool is mainly for proving type consistency proof obligations. Experiments have already shown this to be a powerful approach to debugging specifications <ref> [2] </ref>, and for proving safety properties for operations in state-based systems. However, it will also be possible to prove general correctness requirements of specifications.
Reference: 3. <author> S. Agerholm and J. Frost. </author> <title> An Isabelle-based theorem prover for VDM-SL. </title> <booktitle> In Proceedings of the 10th International Conference on Theorem Proving in Higher Order Logics (TPHOLs'97), </booktitle> <publisher> LNCS 1275. Springer-Verlag, </publisher> <month> August </month> <year> 1997. </year>
Reference-contexts: This section gives an overview of the Isabelle based proof component and motivates some of the major decisions behind the current design. The instantiation of Isabelle is presented in more detail in <ref> [3] </ref>. We first give short introductions to the Isabelle system and LPF. 3.1 Isabelle Isabelle can be instantiated to support reasoning in a new so-called object-logic by extending its meta-logic [15]. The language of the meta-logic is typed lambda-calculus. <p> The concrete syntax is implemented using Isabelle's syntax declaration and annotation mechanisms which can express an arbitrary context-free priority grammar [15]. In cases where the correspondence is not trivial, the concrete syntax is related to the abstract syntax by using Isabelle's powerful translation mechanisms. For more details see <ref> [3] </ref>. 3.4 Proof Theory In the work reported here we focus on the ability to do realistic proofs about VDM-SL specifications, not on the theoretical aspects of semantics and proof theory. We have therefore chosen to build on already existing work in this area. <p> The problem is that it requires the logic to be classical, which LPF is not. Instead we have constructed a suitable variant, based on ideas of [7], which is able to automatically prove most of the 120 derived propositional and predicate logic rules listed in [6] (see <ref> [3] </ref>). It is also important to be able to reason effectively and conveniently about equality. <p> We are able to handle traditionally difficult constructs of VDM-SL by transforming these to expanded expressions in a subset of the ISO standard for the VDM-SL ASCII notation formalized in Isabelle (see <ref> [3] </ref>). However, the user never realizes the transformations while writing proofs, unless he wants to, since we can reverse transformations and provide a collection of derived proof rules which mimic the original expressions, though these actually work on expanded expressions. <p> Isabelle does provide some features for automating proofs, but these appear not to be directly usable with VDM-SL (cf. the discussion in <ref> [3] </ref>). Work will continue on improving the current prototype, e.g. by refining the proof theory formalized in Isabelle and by developing a graphical user interface with proof management and integrated transformations. Acknowledgments We would like to thank Peter Gorm Larsen for useful discussions concerning this work.
Reference: 4. <author> B. Aichernig and P. G. Larsen. </author> <title> A proof obligation generator for VDM-SL. In FME'97, </title> <publisher> LNCS 1313. Springer-Verlag, </publisher> <month> September </month> <year> 1997. </year>
Reference-contexts: More light-weight use of theorem provers is to "debug" specifications by proving various consistency conditions, such as type checking conditions in PVS [17] and type checker generated proof obligations in the IFAD VDM-SL Toolbox <ref> [4] </ref>. More heavy-weight use is, for example, to prove refinements of specifications. This paper presents the first steps towards building an industrially applicable proof support tool for VDM-SL using this CASE tool oriented approach. <p> The specification is written and then syntax and type checked using the 4 Work is currently in progress to extend the Toolbox type checker to generate proof obligations <ref> [4] </ref>. Toolbox. It must be type checked because axioms are generated on basis of this assumption (see Section 5). The resulting abstract syntax tree representation of the specification is communicated to the proof support tool (via a file link).
Reference: 5. <author> H. Barringer, J. H. Cheng, and C. B. Jones. </author> <title> A logic covering undefinedness in program proofs. </title> <journal> Acta Informatica, </journal> <volume> 21 </volume> <pages> 251-269, </pages> <year> 1984. </year>
Reference-contexts: the subset supported in Mural, plus let expressions, cases expressions, patterns, enumerated expression, quote types and the character type. 3 Isabelle and VDM-LPF The theorem proving component of the proof support tool consists of an in-stantiation of the generic theorem prover Isabelle [15] with the "Logic of Partial Functions" (LPF) <ref> [5, 7] </ref>. This instantiation supports a subset of the ISO standard for the VDM-SL ASCII notation by exploiting distinguishing features of Isabelle for defining new logics. This section gives an overview of the Isabelle based proof component and motivates some of the major decisions behind the current design.
Reference: 6. <author> J. C. Bicarregui, J. S. Fitzgerald, P. A. Lindsay, R. Moore, and B. Ritchie. </author> <title> Proof in VDM: A Practitioner's Guide. </title> <publisher> FACIT. Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Moreover, there is little theorem-proving support currently available for VDM-SL, so the present work represents a useful contribution to the literature. The first attempt to build proof support for VDM-SL was in the Mural project <ref> [12, 6] </ref>, but unfortunately, to our knowledge, the Mural tool was based on a platfrom which is no longer supported. The results of the Mural project has been an important starting point for this work, in particular [6]. <p> The results of the Mural project has been an important starting point for this work, in particular <ref> [6] </ref>. However, our combined tool extends the subset of VDM-SL supported in Mural with (at least) let expressions, cases expressions, patterns, enumerated expressions, quote types and the character type. The paper is organized as follows. <p> In addition, it has a tactic language and generic packages to write powerful proof procedures for object logics with little effort. 3.2 LPF The "Logic of Partial Functions" (LPF) is a well-established basis for reasoning about VDM-SL specifications <ref> [11, 12, 6] </ref>. Consequently we have chosen to base the theorem prover component of our system on LPF. LPF is designed specifically to cope with "undefined values" resulting from partiality of functions. Logics such as first-order classical logic are two-valued in the sense that formulas are either true or false. <p> We have therefore chosen to build on already existing work in this area. In particular, the Mural project invested a lot of effort in the proof theory for VDM-SL. We have exploited this work by copying the large listing of proof rules in the book <ref> [6] </ref>. This collection contains proof rules for both propositional and predicate LPF as well as a large number of proof rules for theories about products, natural numbers, sequences, sets, maps, booleans, etc. As in many other textbooks on VDM-SL, these rules are formulated as natural deduction rules. <p> The problem is that it requires the logic to be classical, which LPF is not. Instead we have constructed a suitable variant, based on ideas of [7], which is able to automatically prove most of the 120 derived propositional and predicate logic rules listed in <ref> [6] </ref> (see [3]). It is also important to be able to reason effectively and conveniently about equality. <p> Once the axioms have been transformed to the Isabelle subset, they can be read into Isabelle and then used in proofs. The specification of the axiom generator, which was done in VDM-SL and developed using the Toolbox itself, is straightforward and based on <ref> [6] </ref>. Therefore we shall not go into the details here. Note that in addition to axioms for specifications, Isabelle needs the signatures of new constants. These are also straightforward to generate, again the specification of this was done in VDM-SL using the Toolbox. <p> Each field selector of a record type yields two similar axioms: plan_Plant_form "gax5 : Plant ==&gt; gax5.plan : Plan" plan_Plant_defn "[| gax41 : Plan; gax42 : set of Alarm |] ==&gt; mk_Plant (gax41, gax42).plan = gax41" In order to ensure definedness of object equality =, typing hypotheses appear everywhere <ref> [6] </ref>. Basic type definitions like the definition of Plan and AlarmCode yield fewer axioms.
Reference: 7. <author> J. H. Cheng. </author> <title> A logic for partial functions. </title> <type> Ph.D. Thesis UMCS-86-7-1, </type> <institution> Department of Computer Science, University of Manchester, </institution> <address> Manchester M13 9PL, England, </address> <year> 1986. </year>
Reference-contexts: the subset supported in Mural, plus let expressions, cases expressions, patterns, enumerated expression, quote types and the character type. 3 Isabelle and VDM-LPF The theorem proving component of the proof support tool consists of an in-stantiation of the generic theorem prover Isabelle [15] with the "Logic of Partial Functions" (LPF) <ref> [5, 7] </ref>. This instantiation supports a subset of the ISO standard for the VDM-SL ASCII notation by exploiting distinguishing features of Isabelle for defining new logics. This section gives an overview of the Isabelle based proof component and motivates some of the major decisions behind the current design. <p> Unfortunately it is not possible to use Isabelle's generic classical reasoner directly for this purpose. The problem is that it requires the logic to be classical, which LPF is not. Instead we have constructed a suitable variant, based on ideas of <ref> [7] </ref>, which is able to automatically prove most of the 120 derived propositional and predicate logic rules listed in [6] (see [3]). It is also important to be able to reason effectively and conveniently about equality.
Reference: 8. <author> R. Elmstrtm, P. G. Larsen, and P. B. Lassen. </author> <title> The IFAD VDM-SL Toolbox: A practical approach to formal specifications. </title> <journal> ACM Sigplan Notices, </journal> <volume> 29(9) </volume> <pages> 77-80, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: More heavy-weight use is, for example, to prove refinements of specifications. This paper presents the first steps towards building an industrially applicable proof support tool for VDM-SL using this CASE tool oriented approach. Our starting point is the IFAD VDM-SL Toolbox <ref> [14, 8, 10] </ref>, which is a widely used commercial tool environment that supports a range of development activities, including source level execution/debugging and code generation to C++.
Reference: 9. <author> John Fitzgerald and Peter Gorm Larsen. </author> <title> Software System Design: formal methods into practice. </title> <publisher> Camdridge University Press, </publisher> <address> The Edinburgh Building, Cambridge CB2 2RU, UK, </address> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: These are also straightforward to generate, again the specification of this was done in VDM-SL using the Toolbox. In this section we illustrate the working of the axiom (and signature) generator on a small example, which is adapted from an example of a forthcoming book on VDM-SL <ref> [9] </ref> and inspired by a real industrial system. The example concerns an alarm paging system for a chemical plant.
Reference: 10. <institution> IFAD World Wide Web page. </institution> <note> http://www.ifad.dk. </note>
Reference-contexts: More heavy-weight use is, for example, to prove refinements of specifications. This paper presents the first steps towards building an industrially applicable proof support tool for VDM-SL using this CASE tool oriented approach. Our starting point is the IFAD VDM-SL Toolbox <ref> [14, 8, 10] </ref>, which is a widely used commercial tool environment that supports a range of development activities, including source level execution/debugging and code generation to C++.
Reference: 11. <author> C. B. Jones. </author> <title> Systematic Software Development using VDM. </title> <booktitle> Prentice-Hall International Series in Computer Science. </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1986. </year>
Reference-contexts: In addition, it has a tactic language and generic packages to write powerful proof procedures for object logics with little effort. 3.2 LPF The "Logic of Partial Functions" (LPF) is a well-established basis for reasoning about VDM-SL specifications <ref> [11, 12, 6] </ref>. Consequently we have chosen to base the theorem prover component of our system on LPF. LPF is designed specifically to cope with "undefined values" resulting from partiality of functions. Logics such as first-order classical logic are two-valued in the sense that formulas are either true or false.
Reference: 12. <author> C. B. Jones, K. D. Jones, P. A. Lindsay, and R. Moore. </author> <title> mural: A Formal Development Support System. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Moreover, there is little theorem-proving support currently available for VDM-SL, so the present work represents a useful contribution to the literature. The first attempt to build proof support for VDM-SL was in the Mural project <ref> [12, 6] </ref>, but unfortunately, to our knowledge, the Mural tool was based on a platfrom which is no longer supported. The results of the Mural project has been an important starting point for this work, in particular [6]. <p> The design of this is still in progress. Important sources of inspiration are the Mural book <ref> [12] </ref> and a paper by Ross and Lind-say [18] presented at FME'93. However, the current prototype does provide the bits and pieces to support the integration. One shell script generates and transforms axioms, another parses, reverse transforms and pretty-prints Isabelle proof states. <p> In addition, it has a tactic language and generic packages to write powerful proof procedures for object logics with little effort. 3.2 LPF The "Logic of Partial Functions" (LPF) is a well-established basis for reasoning about VDM-SL specifications <ref> [11, 12, 6] </ref>. Consequently we have chosen to base the theorem prover component of our system on LPF. LPF is designed specifically to cope with "undefined values" resulting from partiality of functions. Logics such as first-order classical logic are two-valued in the sense that formulas are either true or false.
Reference: 13. <author> P. G. Larsen and B. S. Hansen. </author> <title> Semantics for underdetermined expressions. </title> <journal> Formal Aspects of Computing, </journal> <volume> 8(1) </volume> <pages> 47-66, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: By exploiting transformations, we are able to treat essentially the full functional subset of VDM-SL. We have not considered, for instance, constructs like let-be-such-that expressions and union patterns, whose underdetermined semantics destroys reflexivity of equality <ref> [13] </ref>. As in Mural, we can treat state definitions and implicit operations. However, we have not yet considered explicit operations and statements, which form an imperative subset of VDM-SL, but already existing work on formalizing Hoare logic in the HOL theorem prover may be useful [1].
Reference: 14. <author> P. Mukherjee. </author> <title> Computer-aided validation of formal specifications. </title> <journal> Software Engineering Journal, </journal> <pages> pages 133-140, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: More heavy-weight use is, for example, to prove refinements of specifications. This paper presents the first steps towards building an industrially applicable proof support tool for VDM-SL using this CASE tool oriented approach. Our starting point is the IFAD VDM-SL Toolbox <ref> [14, 8, 10] </ref>, which is a widely used commercial tool environment that supports a range of development activities, including source level execution/debugging and code generation to C++.
Reference: 15. <author> L. C. Paulson. </author> <title> Isabelle: A Generic Theorem Prover. </title> <booktitle> Number 828 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference-contexts: We try to combine the benefits of this toolset with the benefits of the generic theorem prover Isabelle 3 <ref> [15] </ref> in a single system. Constructing a theorem prover for VDM-SL from scratch is a far too time consuming task, and systems like Isabelle are designed to allow fast construction of theorem provers for new logics. <p> In short, we treat the subset supported in Mural, plus let expressions, cases expressions, patterns, enumerated expression, quote types and the character type. 3 Isabelle and VDM-LPF The theorem proving component of the proof support tool consists of an in-stantiation of the generic theorem prover Isabelle <ref> [15] </ref> with the "Logic of Partial Functions" (LPF) [5, 7]. This instantiation supports a subset of the ISO standard for the VDM-SL ASCII notation by exploiting distinguishing features of Isabelle for defining new logics. <p> The instantiation of Isabelle is presented in more detail in [3]. We first give short introductions to the Isabelle system and LPF. 3.1 Isabelle Isabelle can be instantiated to support reasoning in a new so-called object-logic by extending its meta-logic <ref> [15] </ref>. The language of the meta-logic is typed lambda-calculus. The syntax of an object-logic is implemented by extending this language with new types and constants. The inference rules of an object-logic are implemented by extending the meta-logic with corresponding meta-axioms. <p> The concrete syntax is implemented using Isabelle's syntax declaration and annotation mechanisms which can express an arbitrary context-free priority grammar <ref> [15] </ref>. In cases where the correspondence is not trivial, the concrete syntax is related to the abstract syntax by using Isabelle's powerful translation mechanisms.
Reference: 16. <author> F. Pfenning and C. Elliott. </author> <title> Higher-order abstract syntax. </title> <booktitle> In Proceedings of the SIGPLAN'88 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 199 - 208, </pages> <address> Atlanta, Georgia, </address> <month> June </month> <year> 1998. </year>
Reference-contexts: Most noticeably, the law of the excluded middle e or not e does not hold, due to the third value representing undefinedness. 3.3 VDM-SL Syntax in Isabelle In order to ensure quick implementation and smooth representation of the VDM-SL syntax in Isabelle, the higher-order abstract syntax approach of <ref> [16] </ref> has been employed to build the instantiation. For instance, this means that object-level variables are identified with meta-level variables, meta-level abstraction is used to represent object-level variable binding, and renaming of and substitution for bound variables is handled by ff- and fi-conversion in the meta-logic.
Reference: 17. <institution> PVS World Wide Web page. </institution> <note> http://www.csl.sri.com/pvs/overview.html. </note>
Reference-contexts: More light-weight use of theorem provers is to "debug" specifications by proving various consistency conditions, such as type checking conditions in PVS <ref> [17] </ref> and type checker generated proof obligations in the IFAD VDM-SL Toolbox [4]. More heavy-weight use is, for example, to prove refinements of specifications. This paper presents the first steps towards building an industrially applicable proof support tool for VDM-SL using this CASE tool oriented approach.
Reference: 18. <author> K. J. Ross and P. A. Lindsay. </author> <title> Maintaining consistency under changes to formal specifications. </title> <editor> In J.C.P. Woodcock and P.G. Larsen, editors, FME'93: </editor> <booktitle> Industrial-Strength Formal Methods, </booktitle> <pages> pages 558-577. </pages> <booktitle> Formal Methods Europe, </booktitle> <publisher> Springer-Verlag, </publisher> <month> April </month> <year> 1993. </year> <title> Lecture Notes in Computer Science 670. This article was typeset using the L A T E X macro package with the LLNCS2E class. </title>
Reference-contexts: The design of this is still in progress. Important sources of inspiration are the Mural book [12] and a paper by Ross and Lind-say <ref> [18] </ref> presented at FME'93. However, the current prototype does provide the bits and pieces to support the integration. One shell script generates and transforms axioms, another parses, reverse transforms and pretty-prints Isabelle proof states. Both the generation of axioms, the transformation and the pretty-printing are specified in VDM-SL itself.
References-found: 18

