URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/iccd95.SBS.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/~vigyan/publications/index.html
Root-URL: http://www.cs.berkeley.edu
Title: Incremental Methods for FSM Traversal  
Author: Gitanjali M. Swamy Robert K. Brayton Vigyan Singhal 
Address: Berkeley 1919 Addison St. Berkeley, CA 94720 Berkeley, CA 94704  
Affiliation: Department of Electrical Engineering and Computer Sciences. Cadence Berkeley Labs University of California at  
Abstract: Computing the set of reachablestates of a finite state machine, is an important component of many problems in the synthesis, and formal verification of digital systems. The process of design is usually iterative, and the designer may modify and recompute information many times, and reachability is called each time the designer modifies the system, because current methods for reachability analysis are not incremental. Unfortunately, the representation of the reachable states that is currently used [1] in synthesis and verification, is inherently non-updatable. We solve this problem by presenting alternate ways to represent the reachable set, and incremental algorithms that can update the new representation each time the designer changes the system. The incremental algorithms use the reachable set computed at a previous iteration, and information about the changes to the system to update it, rather than compute the reachable set from the beginning. This results in computational savings, as demonstrated by the results 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> O. Coudert and J. C. Madre, </author> <title> A Unified Framework for the Formal Verification of Sequential Circuits, </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 126-129, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: This traversal may be breadth first, or depth first. Touati et-al [6] Burch et-al [11], and Coudert et-al <ref> [1] </ref> independently extended this concept to handle reachability in larger systems, by using implicit methods. All quantities (transition relations, sets of states etc.) are represented by BDD's (binary decision diagrams), and the algorithm is represented by a fixed point computation (refer to section 2).
Reference: [2] <author> H. Touati, R. K. Brayton, and R. P. Kurshan, </author> <title> Checking Language Containment using BDDs, </title> <booktitle> in Proc. of Intl. Workshop on Formal Methods in VLSI Design, </booktitle> <address> (Miami, FL), </address> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Reachability is an essential computation in both formal verification <ref> [2] </ref> as well as sequential synthesis [3] & [4]. Given a directed graph, and a set of initial nodes in the graph, reachability computes the set of nodes on some path from the initial nodes.
Reference: [3] <author> E. M. Sentovich, K. J. Singh, C. Moon, H. Savoj, R. K. Brayton, and A. L. Sangiovanni-Vincentelli, </author> <title> Sequential Circuit Design Using Synthesis and Optimization, </title> <booktitle> in Proc. Intl. Conf. on Computer Design, </booktitle> <pages> pp. 328-333, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Reachability is an essential computation in both formal verification [2] as well as sequential synthesis <ref> [3] </ref> & [4]. Given a directed graph, and a set of initial nodes in the graph, reachability computes the set of nodes on some path from the initial nodes. A finite state machine (or FSM) can be represented by a directed graph, which is also called a state transition graph.
Reference: [4] <author> H. Cho, G. D. Hachtel, and F. Somenzi, </author> <title> Redundancy Identification and Removal Based on Implicit State Enumeration, </title> <booktitle> in Proc. Intl. Conf. on Computer Design, </booktitle> <pages> pp. 77-80, </pages> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Reachability is an essential computation in both formal verification [2] as well as sequential synthesis [3] & <ref> [4] </ref>. Given a directed graph, and a set of initial nodes in the graph, reachability computes the set of nodes on some path from the initial nodes. A finite state machine (or FSM) can be represented by a directed graph, which is also called a state transition graph.
Reference: [5] <author> R. Bryant, </author> <title> Graph-based Algorithms for Boolean Function Manipulation, </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. C-35, </volume> <pages> pp. 677-691, </pages> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: Unfortunately this computation explodes when the number of states in the finite state machine becomes very large. This is often called the state explosion problem. To overcome this problem, an implicit representation called a binary decision diagram or BDD <ref> [5] </ref>, is sometimes used to represent all the required quantities. e.g. the transition relation, which implicitly represents the FSM's state transition graph, and any set of states (initial, reachable etc.).
Reference: [6] <author> H. Touati, H. Savoj, B. Lin, R. K. Brayton, and A. L. Sangiovanni-Vincentelli, </author> <title> Implicit State Enumeration of Finite State Machines using BDD's, </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 130-133, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: This traversal may be breadth first, or depth first. Touati et-al <ref> [6] </ref> Burch et-al [11], and Coudert et-al [1] independently extended this concept to handle reachability in larger systems, by using implicit methods. <p> However, this is not necessary for traversal; in fact building and manipulating the monolithic product transition relation is a more time-consuming and expensive method of fsm traversal. In practise, traversal may be done using the partial product heuristics, as described in <ref> [6] </ref>, [12] [13], and [14].
Reference: [7] <author> G. M. Swamy, V. Singhal, and R. K. Brayton, </author> <title> Incremental methods for Fsm Traversal, </title> <type> Tech. Rep. </type> <institution> UCB/ERL M95/, Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <year> 1995. </year>
Reference-contexts: We present some results in section 5. We present future directions for this work in section 6. For brevity, details of proofs of theorems have been omitted; they may be found in <ref> [7] </ref>. 2 Definitions Definition 1 Finite State Machine: A finite state machine or finite automaton M is a 5-tuple (Q; S; G; T; I) where * Q is a finite set of states * S is a finite set of input values * G is a finite set of output values <p> The exact computation of add and sub under different methods for changing input, is described in <ref> [7] </ref>. 4.2 Spanning Tree Incremental Algorithm In this section we deal with an incremental algorithm, which chooses P (x; y) to be a spanning tree that can generated during the course of reachability computations. 4.2.1 Computing the spanning tree The implicit reachability algorithm described in Section 3, begins with a current
Reference: [8] <author> E. A. Emerson, </author> <title> Temporal and Modal Logic, in Formal Models and Semantics (J. </title> <editor> van Leeuwen, ed.), </editor> <volume> vol. </volume> <booktitle> B of Handbook of Theoretical Computer Science, </booktitle> <pages> pp. 996-1072, </pages> <publisher> Elsevier Science, </publisher> <year> 1990. </year>
Reference-contexts: Definition 3 Fixed point Let f (x) be a monotone (increasing or decreasing) function, the fixedpoint F P of f given I is given by the set f i , where f (f i (I) = f i (I)) (refer to <ref> [8] </ref>). If f is monotonically increasing, then the fixed point is called the least fixed point or LF P , and if f is monotonically decreasing, it is called the greatest fixed point or GF P .
Reference: [9] <author> G. M. Swamy and R. K. Brayton, </author> <title> Incremental Formal Design Verification, </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 458-465, </pages> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Figure 3 illustrates this point. A similar statement can be made about GFP computations, as shown by Swamy, and Brayton <ref> [9] </ref>. Definition 4 Cproject Operator [10]: The cproject project operator can be used to extract a tree subset graph of an acyclic graph. <p> In Swamy and Brayton <ref> [9] </ref>, incremental algorithms for methods of formal verification are described.
Reference: [10] <author> B. Lin and F. Somenzi, </author> <title> Minimization of Symbolic Relations, </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 88-91, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: Figure 3 illustrates this point. A similar statement can be made about GFP computations, as shown by Swamy, and Brayton [9]. Definition 4 Cproject Operator <ref> [10] </ref>: The cproject project operator can be used to extract a tree subset graph of an acyclic graph. <p> The interested reader may refer to <ref> [10] </ref> for a more detailed description of the cproject operator.
Reference: [11] <author> J. R. Burch, E. M. Clarke, K. L. McMillan, and D. L. Dill, </author> <title> Symbolic Model Checking: 10 20 States and Beyond, </title> <journal> Information and Computation, </journal> <volume> vol. 98, no. 2, </volume> <pages> pp. 142-170, </pages> <year> 1992. </year>
Reference-contexts: This traversal may be breadth first, or depth first. Touati et-al [6] Burch et-al <ref> [11] </ref>, and Coudert et-al [1] independently extended this concept to handle reachability in larger systems, by using implicit methods. All quantities (transition relations, sets of states etc.) are represented by BDD's (binary decision diagrams), and the algorithm is represented by a fixed point computation (refer to section 2).
Reference: [12] <author> J. Burch, E. Clarke, and D. E. </author> <title> Long, Representing Circuits More Efficiently in Symbolic Model Checking, </title> <booktitle> in Proc. of the Design Automation Conf., </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: However, this is not necessary for traversal; in fact building and manipulating the monolithic product transition relation is a more time-consuming and expensive method of fsm traversal. In practise, traversal may be done using the partial product heuristics, as described in [6], <ref> [12] </ref> [13], and [14].
Reference: [13] <author> R. K. Ranjan, A. Aziz, R. K. Brayton, B. Plessier, and C. Pix-ley, </author> <title> Efficient formal design verification data structure and algorithms, </title> <booktitle> in Proc. Intl. Workshop on Logic Synthesis, </booktitle> <address> (Tahoe City, CA), </address> <month> May </month> <year> 1995. </year>
Reference-contexts: However, this is not necessary for traversal; in fact building and manipulating the monolithic product transition relation is a more time-consuming and expensive method of fsm traversal. In practise, traversal may be done using the partial product heuristics, as described in [6], [12] <ref> [13] </ref>, and [14]. <p> This can be extended in order to compute the reached state relation. In this section, we will describe how the reached state relation (we will only be describing the spanning graph representation) can be computed using partial products heuristics. We will rely on the the methods of <ref> [13] </ref> to efficiently compute an expression of the form (9 x;i (T 1 (x; y 1 ; i) T 2 (x; y 2 ; i) : : : T n (x; y n ; i)) Q (x)) Thus algorithms 4.3 and 4.3.3 can be re-written in the partial product context as: <p> (x; i; y n ), and ffi Q (x; y) = ((9 i (T 1 (x; y 1 ; i) T 2 (x; y 2 ; i) : : : T n (x; y n ; i) R (x))) are both of the form required by the heuristic algorithms of <ref> [13] </ref>. A similar extension can be made to compute the quantification operation used for the deletion of edges. 5 Results and Conclusions We have implemented the algorithms described in the previous sections, in the HSIS [15] environment, and tested these on some IS-CAS 89 and miscellaneous benchmarks.
Reference: [14] <author> R. Hojati, S. Krishnan, and R. K. Brayton, </author> <title> Heuristic Algorithms for Early Quantification and Partial Product Minimization, </title> <type> Tech. Rep. </type> <institution> UCB/ERL M94/11, Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <year> 1994. </year>
Reference-contexts: However, this is not necessary for traversal; in fact building and manipulating the monolithic product transition relation is a more time-consuming and expensive method of fsm traversal. In practise, traversal may be done using the partial product heuristics, as described in [6], [12] [13], and <ref> [14] </ref>.
Reference: [15] <author> R. Brayton et al., HSIS: </author> <title> A BDD-Based Environment for Formal Verification, </title> <booktitle> in Proc. of the Design Automation Conf., </booktitle> <pages> pp. 454-459, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: A similar extension can be made to compute the quantification operation used for the deletion of edges. 5 Results and Conclusions We have implemented the algorithms described in the previous sections, in the HSIS <ref> [15] </ref> environment, and tested these on some IS-CAS 89 and miscellaneous benchmarks. The following graphs and table (Figure 7, Figure 8 and Table 1) summarize the results. The basic algorithm was run once, and then random changes consisting of addition and subtractions of sets of edges, were made.
References-found: 15

