URL: http://www.cs.unm.edu/~kapur/abstracts/cav.96.ps.gz
Refering-URL: http://www.cs.unm.edu/~kapur/abstracts/cav.96.html
Root-URL: http://www.cs.unm.edu
Email: kapur@cs.albany.edu, subu@cs.albany.edu  
Title: Mechanically Verifying a Family of Multiplier Circuits  
Author: Deepak Kapur M. Subramaniam 
Address: New York Albany, NY 12222  
Affiliation: Computer Science Department State University of  
Abstract: A methodology for mechanically verifying a family of parameterized multiplier circuits, including many well-known multiplier circuits such as the linear array, the Wallace tree and the 7-3 multiplier is proposed. A top level specification for these multipliers is obtained by abstracting the commonality in their behavior. The behavioral correctness of any multiplier in the family can be mechanically verified by a uniform proof strategy. Proofs of properties are done by rewriting and induction using an automated theorem prover RRL (Rewrite Rule Laboratory). The behavioral correctness of the circuits is established with respect to addition and multiplication on numbers. The automated proofs involve minimal user intervention in terms of intermediate lemmas required. Generic hardware components are used to segregate the specification and the implementation aspects, enabling verification of circuits in terms of behavioral constraints that can be realized in different ways. The use of generic components aids reuse of proofs and helps modularize the correctness proofs, allowing verification to go hand in hand with the hardware design process in a hierarchical fashion. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R.S. Boyer and J. Moore, </author> <title> A Computational Logic Handbook. </title> <address> New York: </address> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: In [14], a Braun Multiplier is formally specified using the Boyer-Moore logic and some properties about this specification are proven using N qthm <ref> [1] </ref>. In [18], a framework for synthesizing a variety of hardware circuits including the carry save and Wallace tree multipliers is proposed. <p> Here is the RRL transcript. Let P (x): bton (3-mult (x, y)) == (bton (x) * bton (y)) if (len (x) = len (y)) Induction will be done on x in 3-mult (x, y), with the scheme: <ref> [1] </ref> P (cons (x1, nl)) [2] P (cons (x1, cons (x2, nl))) [3] P (cons (x1, cons (x2, cons (x3, x)))) The subgoal corresponding to [1] is easily established by case analyses based on the definition of psum, using the definitions of 3-mult and bton for simplification. <p> == (bton (x) * bton (y)) if (len (x) = len (y)) Induction will be done on x in 3-mult (x, y), with the scheme: <ref> [1] </ref> P (cons (x1, nl)) [2] P (cons (x1, cons (x2, nl))) [3] P (cons (x1, cons (x2, cons (x3, x)))) The subgoal corresponding to [1] is easily established by case analyses based on the definition of psum, using the definitions of 3-mult and bton for simplification. The case analyses is automatically recognized by RRL based on the definition of psum given in terms of the ternary predicate cond.
Reference: 2. <author> R.S. Boyer, J. Moore and M. </author> <title> Kaufmann "Functional Instantiation in Nqthm", CLI Inc. </title> <type> Tech. Report. </type>
Reference-contexts: Here is the RRL transcript. Let P (x): bton (3-mult (x, y)) == (bton (x) * bton (y)) if (len (x) = len (y)) Induction will be done on x in 3-mult (x, y), with the scheme: [1] P (cons (x1, nl)) <ref> [2] </ref> P (cons (x1, cons (x2, nl))) [3] P (cons (x1, cons (x2, cons (x3, x)))) The subgoal corresponding to [1] is easily established by case analyses based on the definition of psum, using the definitions of 3-mult and bton for simplification. <p> The case analyses is automatically recognized by RRL based on the definition of psum given in terms of the ternary predicate cond. The subgoal <ref> [2] </ref> follows from lemma L1 (ensuring that the ripple carry adder correctly implements addition over numbers). The proof of the subgoal [3] is also direct from lemmas L2, L3, thus completing the proof of 3mult-thm by induction. <p> The correctness proof of multipliers is first performed in terms of these generic components. The generic components are then realized by specific adders that satisfy the associated behavioral constraints. To specify and reason over generic hardware components, RRL has been extended along the lines of <ref> [2] </ref> to allow function instantiations and for handling theories. The behavioral constraints associated with a generic component are specified in RRL as equations (possibly conditional) using ? = to indicate that the equation is a behavioral constraint.
Reference: 3. <author> Bryant R.E., </author> <title> "Graph-based Algorithms for boolean function manipulation", </title> <journal> IEEE trans. on Computers, </journal> <volume> C-35(8), </volume> <year> 1986. </year>
Reference-contexts: 1 Introduction There has been a great deal of interest in verifying properties of hardware circuits at the input-output level. Many papers on this topic have appeared in conference proceedings and journals [10], to cite a few <ref> [3, 5, 8, 11, 6, 17] </ref>. Different approaches have been proposed in the literature, notably among them state-based approaches and the use of model checkers [5, 3], induction-based approaches adapted from software verification [8, 12] and finally approaches based on modeling hardware circuits using higher-order logics [6, 11]. <p> Many papers on this topic have appeared in conference proceedings and journals [10], to cite a few [3, 5, 8, 11, 6, 17]. Different approaches have been proposed in the literature, notably among them state-based approaches and the use of model checkers <ref> [5, 3] </ref>, induction-based approaches adapted from software verification [8, 12] and finally approaches based on modeling hardware circuits using higher-order logics [6, 11]. Despite this widespread interest, verification efforts involving multiplier circuits have been few in comparison [14, 4, 13]. <p> The use of generic hardware components in specifying and verifying different multiplier circuits using RRL is discussed in section 5. 2 Related Work Among the various approaches employed for hardware verification, the state based approaches based on symbolic manipulation of boolean functions using binary decision diagrams BDDs <ref> [3] </ref> are perhaps the most popular for verifying hardware circuits of fixed word size (non-parametric circuits). A circuit is specified using a boolean function that can be succinctly represented using a BDD. Further BDDs provide a fast mechanism for comparing boolean functions. <p> Here is the RRL transcript. Let P (x): bton (3-mult (x, y)) == (bton (x) * bton (y)) if (len (x) = len (y)) Induction will be done on x in 3-mult (x, y), with the scheme: [1] P (cons (x1, nl)) [2] P (cons (x1, cons (x2, nl))) <ref> [3] </ref> P (cons (x1, cons (x2, cons (x3, x)))) The subgoal corresponding to [1] is easily established by case analyses based on the definition of psum, using the definitions of 3-mult and bton for simplification. <p> The case analyses is automatically recognized by RRL based on the definition of psum given in terms of the ternary predicate cond. The subgoal [2] follows from lemma L1 (ensuring that the ripple carry adder correctly implements addition over numbers). The proof of the subgoal <ref> [3] </ref> is also direct from lemmas L2, L3, thus completing the proof of 3mult-thm by induction.
Reference: 4. <author> R. E. Bryant, and Y.-A. Chen, </author> <title> "Verification of Arithmetic Functions with Binary Moment Diagrams", </title> <type> Tech. Rep. </type> <institution> CMU-CS-94-160, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Despite this widespread interest, verification efforts involving multiplier circuits have been few in comparison <ref> [14, 4, 13] </ref>. The state based approaches and model checking that employ binary decision diagrams (BDDs) or some variant of these, do not perform well on multiplier circuits due to the associated state explosion (see further discussion on this in the next section on related work). <p> Bryant and Chen recently introduced a new data structure Multiplicative Binary Moment Diagram (BMD) for modeling the functionality of circuits in terms of data at the word level <ref> [4] </ref>. Using this approach, a number of integer multiplier designs with word sizes up to 256 bits have been verified. However, such verifications are not fully automatic as Bryant and Chen in [4] state: ....the overall circuit is divided into components, each having a word level specification. <p> Binary Moment Diagram (BMD) for modeling the functionality of circuits in terms of data at the word level <ref> [4] </ref>. Using this approach, a number of integer multiplier designs with word sizes up to 256 bits have been verified. However, such verifications are not fully automatic as Bryant and Chen in [4] state: ....the overall circuit is divided into components, each having a word level specification. Verification involves proving 1) that each component implements its word level specification and 2) that the composition of the word level component functions matches the specification.....
Reference: 5. <author> J. R. Burch, E.M. Clarke, K. L. Mcmillan and D.L. Dill, </author> <title> "Sequential Circuit Verification using symbolic model checking", </title> <booktitle> in proceedings of Twenty seventh ACM/IEEE Design Automation Conference, </booktitle> <year> 1990. </year>
Reference-contexts: 1 Introduction There has been a great deal of interest in verifying properties of hardware circuits at the input-output level. Many papers on this topic have appeared in conference proceedings and journals [10], to cite a few <ref> [3, 5, 8, 11, 6, 17] </ref>. Different approaches have been proposed in the literature, notably among them state-based approaches and the use of model checkers [5, 3], induction-based approaches adapted from software verification [8, 12] and finally approaches based on modeling hardware circuits using higher-order logics [6, 11]. <p> Many papers on this topic have appeared in conference proceedings and journals [10], to cite a few [3, 5, 8, 11, 6, 17]. Different approaches have been proposed in the literature, notably among them state-based approaches and the use of model checkers <ref> [5, 3] </ref>, induction-based approaches adapted from software verification [8, 12] and finally approaches based on modeling hardware circuits using higher-order logics [6, 11]. Despite this widespread interest, verification efforts involving multiplier circuits have been few in comparison [14, 4, 13].
Reference: 6. <author> A.J. Camilleri, M.J.C. Gordon and T.F.Melham, </author> <title> "Hardware verification using higher-order logic"", HDL Descriptions to Guaranteed Correct Circuit Designs, </title> <editor> D. Borrione (editor) pp. </editor> <address> 43-67, N.Holland, Amsterdam 1987. </address>
Reference-contexts: 1 Introduction There has been a great deal of interest in verifying properties of hardware circuits at the input-output level. Many papers on this topic have appeared in conference proceedings and journals [10], to cite a few <ref> [3, 5, 8, 11, 6, 17] </ref>. Different approaches have been proposed in the literature, notably among them state-based approaches and the use of model checkers [5, 3], induction-based approaches adapted from software verification [8, 12] and finally approaches based on modeling hardware circuits using higher-order logics [6, 11]. <p> Different approaches have been proposed in the literature, notably among them state-based approaches and the use of model checkers [5, 3], induction-based approaches adapted from software verification [8, 12] and finally approaches based on modeling hardware circuits using higher-order logics <ref> [6, 11] </ref>. Despite this widespread interest, verification efforts involving multiplier circuits have been few in comparison [14, 4, 13].
Reference: 7. <author> L. </author> <title> Dadda "Some Schemes for parallel multipliers," in Computer Arithmetic Vol. I, E.E. </title> <editor> Swartzlander Jr. (editor), </editor> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: Improved performance is achieved in the Wallace tree multiplier by considering three partial sums for addition together. The multiplication scheme due to Wallace was generalized and improved upon by Dadda in <ref> [7] </ref> leading to a rich family of multipliers called the Dadda multipliers. In these multipliers, larger than three partial sums are taken up for addition at a particular time.
Reference: 8. <author> W.A. Hunt., "FM8501: </author> <title> A verified Microprocessor", </title> <type> Ph.D thesis, </type> <address> UT Austin, </address> <year> 1985. </year>
Reference-contexts: 1 Introduction There has been a great deal of interest in verifying properties of hardware circuits at the input-output level. Many papers on this topic have appeared in conference proceedings and journals [10], to cite a few <ref> [3, 5, 8, 11, 6, 17] </ref>. Different approaches have been proposed in the literature, notably among them state-based approaches and the use of model checkers [5, 3], induction-based approaches adapted from software verification [8, 12] and finally approaches based on modeling hardware circuits using higher-order logics [6, 11]. <p> Different approaches have been proposed in the literature, notably among them state-based approaches and the use of model checkers [5, 3], induction-based approaches adapted from software verification <ref> [8, 12] </ref> and finally approaches based on modeling hardware circuits using higher-order logics [6, 11]. Despite this widespread interest, verification efforts involving multiplier circuits have been few in comparison [14, 4, 13]. <p> Approaches based on theorem provers and proof checkers have been widely used to verify hardware circuits. Most of this effort has focussed on verification of different forms of processors <ref> [11, 17, 8] </ref>, different forms of ALUs [19, 8] or has been used for the verification of adder circuits [19, 8, 16, 12]. In [14], a Braun Multiplier is formally specified using the Boyer-Moore logic and some properties about this specification are proven using N qthm [1]. <p> Approaches based on theorem provers and proof checkers have been widely used to verify hardware circuits. Most of this effort has focussed on verification of different forms of processors [11, 17, 8], different forms of ALUs <ref> [19, 8] </ref> or has been used for the verification of adder circuits [19, 8, 16, 12]. In [14], a Braun Multiplier is formally specified using the Boyer-Moore logic and some properties about this specification are proven using N qthm [1]. <p> Approaches based on theorem provers and proof checkers have been widely used to verify hardware circuits. Most of this effort has focussed on verification of different forms of processors [11, 17, 8], different forms of ALUs [19, 8] or has been used for the verification of adder circuits <ref> [19, 8, 16, 12] </ref>. In [14], a Braun Multiplier is formally specified using the Boyer-Moore logic and some properties about this specification are proven using N qthm [1]. In [18], a framework for synthesizing a variety of hardware circuits including the carry save and Wallace tree multipliers is proposed.
Reference: 9. <author> R.K.Montoye, E. Hokenek and S.L.Runyon, </author> <title> "Design of the IBM RISC System/6000 floating-point execution unit," </title> <journal> IBM Journal, </journal> <volume> Vol. 34, No. 1, </volume> <year> 1990. </year> <title> 10. "Theorem Provers in circuit design",IFIP Transactions, </title> <editor> V. Stavridou, T.F. Mel-ham, R.T.Boute (eds.) </editor> <month> N.Holland </month> <year> 1992. </year>
Reference-contexts: Considering larger number of partial sums does not improve the asymptotic complexity but considerably reduces the number of stages required for multiplication resulting in reduced wiring delays. The 7-3 multiplier used in IBM RS/6000 is based on this observation and has been attributed <ref> [9] </ref> as one of the important features that contributes to its good performance. Most of these multiplier circuits are based on the grade school principle of multiplying any two given n bit numbers-computing the partial sums and adding the partial sums to obtain the required result.
Reference: 11. <author> J. Joyce, G. Birtwistle and M. Gordon, </author> <title> "Proving a computer correct in HOL", </title> <type> Tech. Report 100, </type> <institution> Computer Lab. University of Cambridge 1986. </institution>
Reference-contexts: 1 Introduction There has been a great deal of interest in verifying properties of hardware circuits at the input-output level. Many papers on this topic have appeared in conference proceedings and journals [10], to cite a few <ref> [3, 5, 8, 11, 6, 17] </ref>. Different approaches have been proposed in the literature, notably among them state-based approaches and the use of model checkers [5, 3], induction-based approaches adapted from software verification [8, 12] and finally approaches based on modeling hardware circuits using higher-order logics [6, 11]. <p> Different approaches have been proposed in the literature, notably among them state-based approaches and the use of model checkers [5, 3], induction-based approaches adapted from software verification [8, 12] and finally approaches based on modeling hardware circuits using higher-order logics <ref> [6, 11] </ref>. Despite this widespread interest, verification efforts involving multiplier circuits have been few in comparison [14, 4, 13]. <p> Approaches based on theorem provers and proof checkers have been widely used to verify hardware circuits. Most of this effort has focussed on verification of different forms of processors <ref> [11, 17, 8] </ref>, different forms of ALUs [19, 8] or has been used for the verification of adder circuits [19, 8, 16, 12]. In [14], a Braun Multiplier is formally specified using the Boyer-Moore logic and some properties about this specification are proven using N qthm [1].
Reference: 12. <author> D. Kapur and M. Subramaniam, </author> <title> "Mechanical Verification of Adder Circuits Using Powerlists," CS.Tech. </title> <type> Report, </type> <institution> Dept. of CS Suny Albany, </institution> <month> November </month> <year> 1995. </year>
Reference-contexts: Different approaches have been proposed in the literature, notably among them state-based approaches and the use of model checkers [5, 3], induction-based approaches adapted from software verification <ref> [8, 12] </ref> and finally approaches based on modeling hardware circuits using higher-order logics [6, 11]. Despite this widespread interest, verification efforts involving multiplier circuits have been few in comparison [14, 4, 13]. <p> Approaches based on theorem provers and proof checkers have been widely used to verify hardware circuits. Most of this effort has focussed on verification of different forms of processors [11, 17, 8], different forms of ALUs [19, 8] or has been used for the verification of adder circuits <ref> [19, 8, 16, 12] </ref>. In [14], a Braun Multiplier is formally specified using the Boyer-Moore logic and some properties about this specification are proven using N qthm [1]. In [18], a framework for synthesizing a variety of hardware circuits including the carry save and Wallace tree multipliers is proposed. <p> In this section we use the correctness proof of a carry save adder as an example to realize the generic component g32-adder. The other generic components used in the proofs of the multiplier circuits have been realized similarly using RRL. For details refer to <ref> [12] </ref>. A carry save adder has three bit vectors of equal length as its inputs and outputs two bit vectors corresponding to the bitwise parity and the bitwise sum of its inputs. <p> There are no specific intermediate lemmas needed in the proofs. For each multiplier circuit, only two definitions specific to the circuit are needed. The results of our initial experiments, in terms of adder circuits <ref> [12] </ref> and multiplier circuits performed in RRL, are encouraging, and they lead us to believe that RRL is well-suited for reasoning about the properties of hardware descriptions using recursive equations that can be oriented into rewrite rules.
Reference: 13. <author> R.P. Kurhshan, L. Lamport, </author> <title> "Verification of a Multiplier: 64 Bits and Beyond," </title> <booktitle> Fifth Intl. Conf. on CAV, </booktitle> <editor> C. Courcoubetis (editor), </editor> <volume> LNCS 697, </volume> <month> July </month> <year> 1993. </year>
Reference-contexts: Despite this widespread interest, verification efforts involving multiplier circuits have been few in comparison <ref> [14, 4, 13] </ref>. The state based approaches and model checking that employ binary decision diagrams (BDDs) or some variant of these, do not perform well on multiplier circuits due to the associated state explosion (see further discussion on this in the next section on related work).
Reference: 14. <author> L. Pierre, </author> <title> "VHDL Description and Formal Verification of Systolic Multipliers," </title> <booktitle> in Proc. of CHDL, </booktitle> <editor> D. Agnew and L. Claesen (eds.) N. </editor> <publisher> Holland 1993. </publisher>
Reference-contexts: Despite this widespread interest, verification efforts involving multiplier circuits have been few in comparison <ref> [14, 4, 13] </ref>. The state based approaches and model checking that employ binary decision diagrams (BDDs) or some variant of these, do not perform well on multiplier circuits due to the associated state explosion (see further discussion on this in the next section on related work). <p> Most of this effort has focussed on verification of different forms of processors [11, 17, 8], different forms of ALUs [19, 8] or has been used for the verification of adder circuits [19, 8, 16, 12]. In <ref> [14] </ref>, a Braun Multiplier is formally specified using the Boyer-Moore logic and some properties about this specification are proven using N qthm [1]. In [18], a framework for synthesizing a variety of hardware circuits including the carry save and Wallace tree multipliers is proposed.
Reference: 15. <author> D. Kapur, and H. Zhang, </author> <title> "An overview of Rewrite Rule Laboratory (RRL)," </title> <journal> J. of Computer and Mathematics with Applications, </journal> <volume> 29, 2, </volume> <year> 1995, </year> <pages> 91-114. </pages>
Reference-contexts: RRL implements many heuristics to select the order of application of these inferences. For more details on RRL the reader is referred to <ref> [15] </ref>. Consider a multiplier specified by k-mult that performs multiplication of its two input bit vectors x and y by considering k, k 1, partial sums for addition at a time. <p> L2: bton (3-repeat (x)) == btonlist (x). L3: btonlist (psum-all (x, y)) == bton (x) * bton (y) Each of these lemmas can be verified completely automatically in RRL by the cover set induction method <ref> [15] </ref> and the associated heuristics. We believe that each of the above intermediate lemmas can be speculated from the structure of the multiplier circuit. Lemmas relate the input-output behavior of components of a multiplier circuit with respect to numbers.
Reference: 16. <author> D. Cyrluk and S. Rajan and N. Shankar and M. K. Srivas, </author> <title> "Effective Theorem Proving for Hardware Verification", </title> <booktitle> Proc. 2 nd conference on theorem provers in circuit design, </booktitle> <editor> R. Kumar and T. Kropf (eds.), </editor> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: Approaches based on theorem provers and proof checkers have been widely used to verify hardware circuits. Most of this effort has focussed on verification of different forms of processors [11, 17, 8], different forms of ALUs [19, 8] or has been used for the verification of adder circuits <ref> [19, 8, 16, 12] </ref>. In [14], a Braun Multiplier is formally specified using the Boyer-Moore logic and some properties about this specification are proven using N qthm [1]. In [18], a framework for synthesizing a variety of hardware circuits including the carry save and Wallace tree multipliers is proposed.
Reference: 17. <author> M. Srivas and M. Bickford, </author> <title> "Formal Verification of a pipelined microprocessor.", </title> <journal> IEEE Software, </journal> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: 1 Introduction There has been a great deal of interest in verifying properties of hardware circuits at the input-output level. Many papers on this topic have appeared in conference proceedings and journals [10], to cite a few <ref> [3, 5, 8, 11, 6, 17] </ref>. Different approaches have been proposed in the literature, notably among them state-based approaches and the use of model checkers [5, 3], induction-based approaches adapted from software verification [8, 12] and finally approaches based on modeling hardware circuits using higher-order logics [6, 11]. <p> Approaches based on theorem provers and proof checkers have been widely used to verify hardware circuits. Most of this effort has focussed on verification of different forms of processors <ref> [11, 17, 8] </ref>, different forms of ALUs [19, 8] or has been used for the verification of adder circuits [19, 8, 16, 12]. In [14], a Braun Multiplier is formally specified using the Boyer-Moore logic and some properties about this specification are proven using N qthm [1].
Reference: 18. <author> Shui-Kai Chin, </author> <title> "Verified Functions for Generating Signed-Binary Arithmetic Hardware", </title> <journal> IEEE trans. on Computer Aided Design, </journal> <volume> Vol. 11, No. 12, </volume> <month> Dec. </month> <year> 1992. </year>
Reference-contexts: In [14], a Braun Multiplier is formally specified using the Boyer-Moore logic and some properties about this specification are proven using N qthm [1]. In <ref> [18] </ref>, a framework for synthesizing a variety of hardware circuits including the carry save and Wallace tree multipliers is proposed. Higer order metafunc-tions with different circuit interconnection structures such as the carry save array and the Wallace tree as inputs are manually transformed to realize multipliers at the gate level.
Reference: 19. <author> D. Verkest, L. Claesen, and H. De Man, </author> <title> "Correctness Proofs of Parameterized Hardware Modules in the Cathedral-II Synthesis Environment", </title> <address> EDAC'90, Glas-gow, Scotland, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: Approaches based on theorem provers and proof checkers have been widely used to verify hardware circuits. Most of this effort has focussed on verification of different forms of processors [11, 17, 8], different forms of ALUs <ref> [19, 8] </ref> or has been used for the verification of adder circuits [19, 8, 16, 12]. In [14], a Braun Multiplier is formally specified using the Boyer-Moore logic and some properties about this specification are proven using N qthm [1]. <p> Approaches based on theorem provers and proof checkers have been widely used to verify hardware circuits. Most of this effort has focussed on verification of different forms of processors [11, 17, 8], different forms of ALUs [19, 8] or has been used for the verification of adder circuits <ref> [19, 8, 16, 12] </ref>. In [14], a Braun Multiplier is formally specified using the Boyer-Moore logic and some properties about this specification are proven using N qthm [1]. In [18], a framework for synthesizing a variety of hardware circuits including the carry save and Wallace tree multipliers is proposed.
Reference: 20. <author> C.S. Wallace, </author> <title> "A Suggestion for a fast multiplier," </title> <journal> in IEEE Trans. Electron. Com-put., </journal> <volume> EC-13:14-17, </volume> <year> 1964. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: Addition of partial sums is done by considering one partial sum at a time. Wallace in <ref> [20] </ref> introduced a multiplication scheme, which has popularly come to be known as the Wallace tree multiplier, for multiplying two n bit numbers in logarithmic time. Improved performance is achieved in the Wallace tree multiplier by considering three partial sums for addition together.
References-found: 19

