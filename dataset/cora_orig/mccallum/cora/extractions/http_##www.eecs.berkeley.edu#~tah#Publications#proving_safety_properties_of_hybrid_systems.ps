URL: http://www.eecs.berkeley.edu/~tah/Publications/proving_safety_properties_of_hybrid_systems.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Publications/proving_safety_properties_of_hybrid_systems.html
Root-URL: 
Title: Proving Safety Properties of Hybrid Systems  
Author: Arjun Kapur Thomas A. Henzinger Zohar Manna Amir Pnueli 
Abstract: We propose a methodology for the specification, verification, and design of hybrid systems. The methodology consists of the computational model of Concrete Phase Transition Systems (cptss), the specification language of Hybrid Temporal Logic (htl), the graphical system description language of Hybrid Automata, and a proof system for verifying that hybrid automata satisfy their HTL specifications. The novelty of the approach lies in the continuous-time logic, which allows specification of both point-based and interval-based properties (i.e., properties which describe changes over an interval) and provides direct references to derivatives of variables, and in the proof system that supports verification of point-based and interval-based properties. The proof rules demonstrate that sound and convenient induction rules can be established for continuous-time logics. The proof rules are illustrated on several examples.
Abstract-found: 1
Intro-found: 1
Reference: [ACHH93] <author> R. Alur, C. Courcoubetis, T.A. Henzinger, and P-H. Ho. </author> <title> Hybrid Automata: An Algorithmic Approach to the Specification and Verification of Hybrid Systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. .Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 209-229. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Our methodology rests on three foundations. For the formal description of hybrid systems, we use Hybrid Automata <ref> [ACHH93] </ref>, an extension of finite automata with analog variables that are governed by differential equations. For the formal description of system requirements, we use Hybrid Temporal Logic (htl) [HMP93], an extension of interval temporal logic with limit and derivative terms for analog variables.
Reference: [CHR91] <author> Z. Chaochen, </author> <title> C.A.R. Hoare, and A.P. Ravn. A calculus of durations. </title> <journal> Information Processing Letters, </journal> <volume> 40 </volume> <pages> 269-276, </pages> <year> 1991. </year>
Reference-contexts: We introduce verification rules for both types of invariances, and illustrate their use on a variant of the gas burner example of <ref> [CHR91] </ref>. Our approach in this paper differs from that used in [MP93] in two respects. The logic used here is based on an interval temporal logic, while the logic of [MP93] is a point-based temporal logic. <p> From now on, we will use _x as an abbreviation for Example Before presenting our framework for specifying hybrid systems, we introduce a variant of the gas burner example of <ref> [CHR91] </ref> as motivation. Suppose an engineer wishes to design a controller for a gas burner that has two switch settings, (switch 2 fOff, Ong), representing Off and On, respectively. <p> The extended duration calculus (edc) [CRH93], intended for verification of hybrid systems, allows one to specify values at the left and right endpoints of a phase, a feature that is not present in the original duration calculus of <ref> [CHR91] </ref>. For example in edc, the safety requirement for the gas burner would be e.x b.x ! 6 (e.L b.L) e.x b.x. A thorough explanation of the gas burner, along with its verification using the original duration calculus, can be found in [RRH93].
Reference: [CRH93] <author> Z. Chaochen, </author> <title> A.P. Ravn, and C.A.R. Hoare. An Extended Duration Calculus for Hybrid Real-Time Systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. .Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 36-59. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The logic we propose here is intended to be used for verification of controllers governing hybrid systems, which by definition have continuous components. Our approach differs from that of the duration calculus community ([CHR91], <ref> [CRH93] </ref>, [RRH93]). The duration calculus approach requires that both specification properties and possible implementation strategies be expressed as duration calculus formulas. Verification is the process of proving that the implementation implies the specification, and is done using an axiom system for the duration calculus. <p> In our approach, implementation strategies are expressed using hybrid automata. It is our belief that automata offer a more natural formalism for describing controllers and other hybrid systems. The extended duration calculus (edc) <ref> [CRH93] </ref>, intended for verification of hybrid systems, allows one to specify values at the left and right endpoints of a phase, a feature that is not present in the original duration calculus of [CHR91]. <p> A thorough explanation of the gas burner, along with its verification using the original duration calculus, can be found in [RRH93]. The coding of the duration operator R in htl is similar to the coding of it in edc, the latter of which can be found in <ref> [CRH93] </ref>. Acknowledgments We would like to thank Nikolaj Bjtrner, Yassine Lakhneche, Hugh McGuire, Henny Sipma, and the anonymous referees for their feedback and comments.
Reference: [HKP82] <author> D. Harel, D. Kozen, and R. Parikh. </author> <title> Process Logic: Expressiveness, Decidability, Completeness. </title> <journal> J. Comp. Sys. Sci., </journal> <volume> 25 </volume> <pages> 144-170, </pages> <year> 1982. </year> <month> 14 </month>
Reference-contexts: We require that, at each point, the behavior function has a limit from the left and a limit from the right. Discontinuities are points where the two limits differ. To specify properties of behavior functions, we present a continuous-time interval temporal logic with a chop operator <ref> [HKP82] </ref>, denoted as ";", whose semantics is a continuous-time extension to [Mos85] discrete-time chop operator. Syntax Because we wish to reason about physical phenomena in a natural and formal way, we introduce a logic that allows derivatives and limits as atomic expressions.
Reference: [HMP93] <author> T.A. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Towards Refining Temporal Specifications into Hybrid Systems. In R.L. </title> <editor> Grossman, A. Nerode, A.P. .Ravn, and H. Rischel, editors, </editor> <booktitle> Hybrid Systems, Lecture Notes in Computer Science 736, </booktitle> <pages> pages 60-76. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Our methodology rests on three foundations. For the formal description of hybrid systems, we use Hybrid Automata [ACHH93], an extension of finite automata with analog variables that are governed by differential equations. For the formal description of system requirements, we use Hybrid Temporal Logic (htl) <ref> [HMP93] </ref>, an extension of interval temporal logic with limit and derivative terms for analog variables. <p> To facilitate the proof of htl formulas over the runs of hybrid automata, we introduce Concrete Phase Transition Systems (cptss), a concrete instance of transition systems on phases of continuous state change <ref> [MMP92, NSY92, HMP93] </ref>. fl This paper appeared in the Proceedings of the Third International Symposium on Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, Springer-Verlag, 1994, pp. 431-454. y Department of Computer Science, Stanford University, Stanford, California 94305. <p> Syntax Because we wish to reason about physical phenomena in a natural and formal way, we introduce a logic that allows derivatives and limits as atomic expressions. Our logic, htl, is a variant of the hybrid temporal logic of <ref> [HMP93] </ref>. 1 Let V be a finite set of typed variables, where the allowed types are boolean, integer, and real. We view the booleans and the integers as subsets of the reals, where false and true correspond to 0 and 1, respectively. <p> Thus the presence of right limits in a formula doesn't preclude it from being a point-based property. Abbreviations As in <ref> [HMP93] </ref>, we define abbreviations for common temporal formulas. <p> The following proposition, stated without proof, allows us to use first order tautologies as valid formulas of hybrid temporal logic: Proposition 2 For any state formula ', if ' is a tautology of first order logic then 0 ' is valid. 3 Concrete Phase Transition Systems Following <ref> [HMP93] </ref>, [MMP92], and [NSY92], we model hybrid systems as transition systems. Just as discrete transitions can be represented as binary relations on states, hybrid transitions can be represented as binary relations on phases.
Reference: [MMP92] <author> O. Maler, Z. Manna, and A. Pnueli. </author> <title> From timed to hybrid systems. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 447-484. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: While mathematical methods for continuous equations and for discrete transitions have been studied independently for quite some time, the development of methods for formal reasoning about hybrid systems is relatively recent; it's origin in computer science can be traced to <ref> [Schn88, MMP92] </ref>. <p> To facilitate the proof of htl formulas over the runs of hybrid automata, we introduce Concrete Phase Transition Systems (cptss), a concrete instance of transition systems on phases of continuous state change <ref> [MMP92, NSY92, HMP93] </ref>. fl This paper appeared in the Proceedings of the Third International Symposium on Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, Springer-Verlag, 1994, pp. 431-454. y Department of Computer Science, Stanford University, Stanford, California 94305. <p> The following proposition, stated without proof, allows us to use first order tautologies as valid formulas of hybrid temporal logic: Proposition 2 For any state formula ', if ' is a tautology of first order logic then 0 ' is valid. 3 Concrete Phase Transition Systems Following [HMP93], <ref> [MMP92] </ref>, and [NSY92], we model hybrid systems as transition systems. Just as discrete transitions can be represented as binary relations on states, hybrid transitions can be represented as binary relations on phases.
Reference: [Mos85] <author> B. Moszkowski. </author> <title> A temporal logic for multi-level reasoning about hardware. </title> <journal> IEEE Computer, </journal> <volume> 18(2) </volume> <pages> 10-19, </pages> <year> 1985. </year>
Reference-contexts: Discontinuities are points where the two limits differ. To specify properties of behavior functions, we present a continuous-time interval temporal logic with a chop operator [HKP82], denoted as ";", whose semantics is a continuous-time extension to <ref> [Mos85] </ref> discrete-time chop operator. Syntax Because we wish to reason about physical phenomena in a natural and formal way, we introduce a logic that allows derivatives and limits as atomic expressions. <p> 1::n j= ( ! P is equivalent to P 1::n , P j= ( ! Since P was an arbitrary finite phase of the computation P 1 we get that 0 ( V ; V ) is an invariant of S. 7 Related Work The interval temporal logic (itl) of <ref> [Mos85] </ref> uses a discrete semantics involving finite intervals consisting of a finite number of states. This is justified, since itl is a logic for hardware verification, where discretization is both natural and possible.
Reference: [MP91] <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification, </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [MP93] <author> Z. Manna and A. Pnueli. </author> <title> Models for reactivity. </title> <journal> Acta Informatica, </journal> <volume> 30 </volume> <pages> 609-678, </pages> <year> 1993. </year>
Reference-contexts: We introduce verification rules for both types of invariances, and illustrate their use on a variant of the gas burner example of [CHR91]. Our approach in this paper differs from that used in <ref> [MP93] </ref> in two respects. The logic used here is based on an interval temporal logic, while the logic of [MP93] is a point-based temporal logic. The advantages of an interval-based logic is that it provides a natural expression for developments and changes across an arbitrary interval. <p> Our approach in this paper differs from that used in <ref> [MP93] </ref> in two respects. The logic used here is based on an interval temporal logic, while the logic of [MP93] is a point-based temporal logic. The advantages of an interval-based logic is that it provides a natural expression for developments and changes across an arbitrary interval. <p> Another difference is that the models for the logic used here are dense, while the models of <ref> [MP93] </ref> are based on a sampling semantics in which discrete transitions are interleaved, and continuous activities are sampled at discrete points.
Reference: [NSY92] <author> X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> From ATP to timed graphs and hybrid systems. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 549-572. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: To facilitate the proof of htl formulas over the runs of hybrid automata, we introduce Concrete Phase Transition Systems (cptss), a concrete instance of transition systems on phases of continuous state change <ref> [MMP92, NSY92, HMP93] </ref>. fl This paper appeared in the Proceedings of the Third International Symposium on Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, Springer-Verlag, 1994, pp. 431-454. y Department of Computer Science, Stanford University, Stanford, California 94305. <p> The following proposition, stated without proof, allows us to use first order tautologies as valid formulas of hybrid temporal logic: Proposition 2 For any state formula ', if ' is a tautology of first order logic then 0 ' is valid. 3 Concrete Phase Transition Systems Following [HMP93], [MMP92], and <ref> [NSY92] </ref>, we model hybrid systems as transition systems. Just as discrete transitions can be represented as binary relations on states, hybrid transitions can be represented as binary relations on phases.
Reference: [RRH93] <author> A.P. Ravn, H. Rischel, and K.M Hansen. </author> <title> Specifying and Verifying Requirements of Real-Time Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 19(1) </volume> <pages> 41-55, </pages> <year> 1993. </year>
Reference-contexts: The logic we propose here is intended to be used for verification of controllers governing hybrid systems, which by definition have continuous components. Our approach differs from that of the duration calculus community ([CHR91], [CRH93], <ref> [RRH93] </ref>). The duration calculus approach requires that both specification properties and possible implementation strategies be expressed as duration calculus formulas. Verification is the process of proving that the implementation implies the specification, and is done using an axiom system for the duration calculus. <p> For example in edc, the safety requirement for the gas burner would be e.x b.x ! 6 (e.L b.L) e.x b.x. A thorough explanation of the gas burner, along with its verification using the original duration calculus, can be found in <ref> [RRH93] </ref>. The coding of the duration operator R in htl is similar to the coding of it in edc, the latter of which can be found in [CRH93]. Acknowledgments We would like to thank Nikolaj Bjtrner, Yassine Lakhneche, Hugh McGuire, Henny Sipma, and the anonymous referees for their feedback and comments.
Reference: [Schn88] <author> F.B. Schneider. </author> <title> Real-time, reliable systems project. </title> <booktitle> Proceedings of the ONR Kickoff Workshop for the Foundations of Real-time Computing Research Initiative, </booktitle> <pages> pages 28-32, </pages> <institution> Office of Naval Research, </institution> <year> 1988. </year>
Reference-contexts: While mathematical methods for continuous equations and for discrete transitions have been studied independently for quite some time, the development of methods for formal reasoning about hybrid systems is relatively recent; it's origin in computer science can be traced to <ref> [Schn88, MMP92] </ref>.
References-found: 12

