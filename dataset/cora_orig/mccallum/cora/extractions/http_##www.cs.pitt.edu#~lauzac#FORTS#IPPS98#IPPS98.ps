URL: http://www.cs.pitt.edu/~lauzac/FORTS/IPPS98/IPPS98.ps
Refering-URL: http://www.cs.pitt.edu/~lauzac/FORTS/IPPS98/
Root-URL: 
Email: (lauzac, melhem, mosse)@cs.pitt.edu  
Title: An Efficient RMS Admission Control and its Application to Multiprocessor Scheduling  
Author: Sylvain Lauzac, Rami Melhem, Daniel Mosse 
Address: Pittsburgh, PA 15260  
Affiliation: University of Pittsburgh Department of Computer Science  
Abstract: A real-time system must execute functionally correct computations in a timely manner. In order to guarantee that all tasks accepted in the system will meet their timing requirements, an admission control algorithm must be used to only accept tasks whose requirements can be satisfied. Rate-monotonic scheduling (RMS) is arguably the best known scheduling policy for periodic real-time tasks on uniprocessors. We propose a new and efficient admission control for rate-monotonic scheduling on a uniprocessor and analyze its performance. This admission control is then modified to provide an admission control mechanism for multiprocessor systems. Experimental results indicate that this new admission control for multiprocessor systems achieves a processor utilization of up to 96% for a large number of tasks and has a low computational complexity. The proposed admission control is also used to derive a new and better multiprocessor schedulability bound for RMS with provisions for periodic servers and for RMS with tolerance to transient faults. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. C. Audsley, A. Burns, M. F. Richardson, K. Tindell, and A. J. Wellings. </author> <title> Applying new scheduling theory to static priority preemptive scheduling. </title> <journal> Software Engineering Journal, </journal> <volume> 8(5):284292, </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: A necessary and sufficient condition for rate-monotonic schedulability is presented in [10]. The drawback of this admission control is its computational complexity. A similar admission control can be based on the conditions given in <ref> [1] </ref> and can achieve very high processor utilization. Other work takes advantage of the knowledge of some characteristics of the task set being scheduled in order to get a more precise schedulability condition. <p> Second, one can use a tighter bound for the admission control on each processor. The schedulability conditions given in [10] and <ref> [1] </ref> can be used to create an admission control that yields a high utilization, but these admission control algorithms are computationally expensive. The bound for multiprocessor admission control presented in [2] yields a higher processor utilization than partitioning with Equation (1). <p> The worst-case computation time C is randomly drawn from <ref> [1, T min ] </ref> with a uniform distribution and the period T is randomly drawn from [T min , T max ] with a uniform distribution. For each task, U min C T U max must hold.
Reference: [2] <author> A. Burchard, J. Liebeherr, Y. Oh, and S. H. Son. </author> <title> New strategies for assigning real-time tasks to multiprocessor systems. </title> <journal> IEEE Trans. on Computers, </journal> <volume> 44(12):14291442, </volume> <year> 1995. </year>
Reference-contexts: A similar admission control can be based on the conditions given in [1] and can achieve very high processor utilization. Other work takes advantage of the knowledge of some characteristics of the task set being scheduled in order to get a more precise schedulability condition. In <ref> [2] </ref>, knowledge of the tasks periods is used to get a tighter bound and increase the processor utilization. 2.2 Admission control for multiprocessors Schedulability conditions for uniprocessors can be used to partition tasks on a multiprocessor. An early admission control for multiprocessors using partitioning was proposed in [7]. <p> The schedulability conditions given in [10] and [1] can be used to create an admission control that yields a high utilization, but these admission control algorithms are computationally expensive. The bound for multiprocessor admission control presented in <ref> [2] </ref> yields a higher processor utilization than partitioning with Equation (1). Third, the tasks can be ordered so that compatible tasks are assigned to the same processor. Compatible tasks are tasks that achieve a high processor utilization when scheduled on the same processor. <p> Compatible tasks are tasks that achieve a high processor utilization when scheduled on the same processor. For example, tasks that have the same period are compatible and have a utilization bound of 100%. In <ref> [2] </ref> tasks that have periods closest to a power of two are considered to be compatible. In general, the order in which the tasks are presented to the bin packing algorithm can also yield significant improvements. <p> The partitioning technique proposed in this paper uses all three techniques to achieve a high processor utilization. 3 Admission control for uniprocessors 3.1 T-BOUND A more optimistic admission control bound than Equation (1) can be obtained by taking advantage of the knowledge of the task characteristics <ref> [2, 8] </ref>. Similarly, we will use knowledge of the tasks periods to get a tighter bound. The T-BOUND admission control first transforms the original task set, then applies an admission control to this transformed task set. <p> We will show in Lemma 2 that if this transformed task set is schedulable, the original task set is also schedulable. To prove Lemma 2, we first paraphrase a Lemma which is proven in <ref> [2] </ref>. <p> For these two admission control algorithms, the schedulability bound is not the bottleneck anymore, but the bin packing algorithm is. 4.2.3 Algorithms complexity Admission Uniprocessor Complexity control bound EXACT-MP EXACT [10] O (m 3 pN ) R-BOUND-MP R-BOUND O (m (p + log m)) BETA-MP BETA <ref> [2] </ref> O (m log m) LL-MP LL [13] O (mp) Table 1. Admission control algorithms for multiprocessors Table 1 also shows the complexity of the algorithms from the previous section, where m is the number of tasks, p the number of processors and N = P m T i c.
Reference: [3] <author> T. Carpenter, K. Driscoll, K. Hoyme, and J. Carciofini. AR-INC659 acheduling: </author> <title> Problem definition. </title> <booktitle> In Proceedings of the Real Time Systems Symposium, </booktitle> <pages> pages 165169, </pages> <month> Decem-ber </month> <year> 1994. </year>
Reference-contexts: However, since multiprocessor systems are becoming more common for real-time applications <ref> [3] </ref>, admission control for multiprocessor systems is also an important problem. RMS can be used on multiprocessor systems by doing global scheduling or partitioning [7].
Reference: [4] <author> M. Chen and K. Lin. </author> <title> Dynamic Priority Ceilings: A Concur-rency Control Protocol for Real-Time Systems. </title> <journal> Journal of Real-Time Systems, </journal> <volume> 2(4):325346, </volume> <year> 1990. </year>
Reference-contexts: We are currently examining how R-BOUND can be modified to be used for on-line scheduling with dynamically changing task sets. We are also investigating how R-BOUND can be extended to deadline-monotonic and preemptive tasks with critical sections <ref> [15, 4] </ref>.
Reference: [5] <author> S. Davari and S. K. Dhall. </author> <title> On a periodic real-time task allocation problem. </title> <booktitle> In 19th Annual International Conference on System Sciences, </booktitle> <pages> pages 133141, </pages> <year> 1986. </year>
Reference-contexts: In [2] tasks that have periods closest to a power of two are considered to be compatible. In general, the order in which the tasks are presented to the bin packing algorithm can also yield significant improvements. In <ref> [5] </ref> tasks are sorted by decreasing utilization factor and then given to a First Fit bin packing algorithm.
Reference: [6] <author> S. Davari and S. K. Dhall. </author> <title> An on line algorithm for real-time tasks allocation. </title> <booktitle> IEEE Real-time Systems Symposium, </booktitle> <pages> pages 194200, </pages> <year> 1986. </year>
Reference-contexts: For each processor, Equation (1) is used for admission control. The processor utilization obtained by a partitioning scheme can be increased in three ways. First, one can use a better bin-packing algorithm. In <ref> [6] </ref> an improved bin packing algorithm is used, where tasks are grouped in classes according to their utilizations. In [14] the performance of the Best Fit bin-packing algorithm is analyzed and it is shown that its worst case performance is not better than the worst case performance of First Fit.
Reference: [7] <author> S. K. Dhall and C. L. Liu. </author> <title> On a real-time scheduling problem. </title> <journal> Operations Research, </journal> <volume> 26(1):127140, </volume> <year> 1978. </year>
Reference-contexts: However, since multiprocessor systems are becoming more common for real-time applications [3], admission control for multiprocessor systems is also an important problem. RMS can be used on multiprocessor systems by doing global scheduling or partitioning <ref> [7] </ref>. In a global scheduling scheme, all instances are stored in a single queue and, at any given time, the processors run the instances with the highest priority. A partitioning scheme adds the constraint that all instances of a task must execute on the same processor. <p> Partitioning has the advantage of reducing the multiprocessor scheduling problem to scheduling problems on individual processors for which many results are known. Partitioning may seem less powerful than global scheduling because it has more constraints, but it has been proven <ref> [7] </ref> that global scheduling with RMS can give an arbitrarily low processor utilization. Therefore, this paper focuses only on partitioning schemes for multiprocessor systems. <p> In [2], knowledge of the tasks periods is used to get a tighter bound and increase the processor utilization. 2.2 Admission control for multiprocessors Schedulability conditions for uniprocessors can be used to partition tasks on a multiprocessor. An early admission control for multiprocessors using partitioning was proposed in <ref> [7] </ref>. This admission control uses two bin-packing algorithms (Next Fit and First Fit) to assign tasks to processors. For each processor, Equation (1) is used for admission control. The processor utilization obtained by a partitioning scheme can be increased in three ways. First, one can use a better bin-packing algorithm.
Reference: [8] <author> S. Ghosh, D. Mosse, and R. Melhem. </author> <title> Fault-Tolerant Rate-Monotonic Scheduling. </title> <journal> Journal of Real-Time Systems, </journal> <note> 1998. to appear. </note>
Reference-contexts: This defines the second problem this paper addresses: what partitioning admission control for a multiprocessor gives a near optimal processor utilization and has a low computational complexity? Many extensions to RMS have been proposed in the literature, including periodic servers [16], tolerance to transient faults <ref> [8] </ref> and task synchronization [15]. In order to be practical, a new admission control should easily adapt to these extensions of RMS. <p> The partitioning technique proposed in this paper uses all three techniques to achieve a high processor utilization. 3 Admission control for uniprocessors 3.1 T-BOUND A more optimistic admission control bound than Equation (1) can be obtained by taking advantage of the knowledge of the task characteristics <ref> [2, 8] </ref>. Similarly, we will use knowledge of the tasks periods to get a tighter bound. The T-BOUND admission control first transforms the original task set, then applies an admission control to this transformed task set. <p> However, in a real-time system, re-executing a task may delay other tasks and cause them to miss their deadlines. The conditions for recovery by task re-execution for RMS scheduling on a uniprocessor are given in <ref> [8] </ref>. By using slack of utilization U b to re-execute faulty tasks, when at most one transient of the server utilization. fault occurs within T m + T m1 , the processor utilization U GF T RMS for a set of m tasks has been shown [8] to be U GF <p> uniprocessor are given in <ref> [8] </ref>. By using slack of utilization U b to re-execute faulty tasks, when at most one transient of the server utilization. fault occurs within T m + T m1 , the processor utilization U GF T RMS for a set of m tasks has been shown [8] to be U GF T RMS = m (2 1=m 1)(1 U b ) (16) Theorem 5 shows that using the R-BOUND increases the processor utilization when transient faults are to be tolerated. <p> PROOF: The first step is to transform the original task set T with the algorithm ScaleTaskSet. If the schedulability condition derived for the transformed task set T 0 holds, then T is schedulable. The same analysis as the one in <ref> [8] </ref> shows that the processor utilization U is minimum when for 1 i m 1 C 0 i+1 T 0 and C 0 1 T 0 From (18) and (19) the resulting processor utilization is U = ( i=1 T 0 T 0 ] + 2 1 m Following the proof
Reference: [9] <author> D. S. Johnson, A. Demers, et al. </author> <title> Worst case performance bounds for simple one-dimensional packing algorithms. </title> <journal> SIAM Journal on Computing, </journal> <volume> 3:299325, </volume> <year> 1974. </year>
Reference-contexts: This implies that bin-packing algorithms like Decreasing First Fit <ref> [9] </ref> cannot be used. On the other hand, Next Fit is not only a suitable algorithm, but also has the advantage of working well with the compatibility criteria.
Reference: [10] <author> J. Lehoczky, L. Sha, and Y. Ding. </author> <title> The rate monotonic scheduling: Exact characterization and average case behavior. </title> <booktitle> IEEE Real-time Systems Symposium, </booktitle> <pages> pages 166171, </pages> <year> 1989. </year>
Reference-contexts: The conclusion is presented in Section 7. 2 Related work 2.1 Admission control for uniprocessors As mentioned above, an admission control based on Equation (1) usually under-utilizes the processor because this schedulability condition is sufficient but not necessary. A necessary and sufficient condition for rate-monotonic schedulability is presented in <ref> [10] </ref>. The drawback of this admission control is its computational complexity. A similar admission control can be based on the conditions given in [1] and can achieve very high processor utilization. <p> Second, one can use a tighter bound for the admission control on each processor. The schedulability conditions given in <ref> [10] </ref> and [1] can be used to create an admission control that yields a high utilization, but these admission control algorithms are computationally expensive. The bound for multiprocessor admission control presented in [2] yields a higher processor utilization than partitioning with Equation (1). <p> As a consequence, for high loads, R-BOUND-MP yields a processor utilization comparable to EXACT-MP. For these two admission control algorithms, the schedulability bound is not the bottleneck anymore, but the bin packing algorithm is. 4.2.3 Algorithms complexity Admission Uniprocessor Complexity control bound EXACT-MP EXACT <ref> [10] </ref> O (m 3 pN ) R-BOUND-MP R-BOUND O (m (p + log m)) BETA-MP BETA [2] O (m log m) LL-MP LL [13] O (mp) Table 1.
Reference: [11] <author> J. Lehoczky, L. Sha, and J. K. Strosnider. </author> <title> Enhanced aperiodic responsiveness in hard real-time environments. </title> <booktitle> IEEE Real-time Systems Symp., </booktitle> <pages> pages 261270, </pages> <year> 1987. </year>
Reference-contexts: Fit bin-packing takes O (mp) to assign transformed tasks to processors, and finally it takes O (m) to map back to the original task set. 5 Periodic servers with priority exchange Several solutions to service aperiodic tasks with a good response time have been proposed for RMS on a uniprocessor <ref> [11, 16] </ref>. <p> One of them is based on priority exchange <ref> [11] </ref>, in addition to the periodic tasks t 1 , : : :, t m , a special task t s services the aperiodic requests as they arrive. t s has the highest priority and executes when an aperiodic task is being serviced. <p> When there is no aperiodic task to service, t s exchanges its priority with the task of next highest priority to allow it to execute. If the periodic server t s has a utilization of U s , when m ! 1 the processor utilization approaches <ref> [11] </ref> U = U s + ln U s + 1 Theorem 4 shows that the R-BOUND improves upon the processor utilization of priority exchange given by Equation (10).
Reference: [12] <author> J. Y.-T. Leung and J. Whitehead. </author> <title> On the complexity of fixed-priority scheduling of periodic real-time tasks. Performance Evaluation, </title> <address> 2:237250, </address> <year> 1982. </year>
Reference-contexts: When a partitioning scheme is used, the admission control must not only decide which tasks can be accepted, but also create an assignment of tasks to processors. Finding an optimal assignment of tasks to processors is known to be NP-hard <ref> [12] </ref>, therefore it is important that the complexity of the admission control remains low. Partitioning schemes are usually based on a bin-packing algorithm and a schedu-lability bound. The bin-packing algorithm assigns tasks to processors and uses the schedulability bound to determine if a processor can accept a task.
Reference: [13] <author> C. L. Liu and J. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1):4761, </volume> <year> 1973. </year>
Reference-contexts: At any time, the available task with the highest priority is being processed. It is assumed that preemption takes negligible time. An admission control for RMS based on processor utilization is also given in <ref> [13] </ref>. The utilization of task t i is defined to be C i =T i and the utilization of a task set is the sum of the utilizations of all the tasks in the task set. <p> This admission control is based on the bound given by Lemma 3. The proof of Theorem 4 in <ref> [13] </ref> shows that the computation times that minimize the utilization are C i = T i+1 T i (i = 1; : : : ; m 1) and C m = 2T 1 T m It is easy to see that rewriting the task set utilization with these computation times gives <p> admission control algorithms, the schedulability bound is not the bottleneck anymore, but the bin packing algorithm is. 4.2.3 Algorithms complexity Admission Uniprocessor Complexity control bound EXACT-MP EXACT [10] O (m 3 pN ) R-BOUND-MP R-BOUND O (m (p + log m)) BETA-MP BETA [2] O (m log m) LL-MP LL <ref> [13] </ref> O (mp) Table 1. Admission control algorithms for multiprocessors Table 1 also shows the complexity of the algorithms from the previous section, where m is the number of tasks, p the number of processors and N = P m T i c.
Reference: [14] <author> Y. Oh and S. H. Son. </author> <title> Tight performance bounds of heuristics for a real-time scheduling problem. </title> <type> Technical Report CS-93-24, </type> <institution> University of Virginia, </institution> <year> 1993. </year>
Reference-contexts: The processor utilization obtained by a partitioning scheme can be increased in three ways. First, one can use a better bin-packing algorithm. In [6] an improved bin packing algorithm is used, where tasks are grouped in classes according to their utilizations. In <ref> [14] </ref> the performance of the Best Fit bin-packing algorithm is analyzed and it is shown that its worst case performance is not better than the worst case performance of First Fit. Second, one can use a tighter bound for the admission control on each processor.
Reference: [15] <author> R. Rajkumar. </author> <title> Synchronization in Real-Time Systems: A Priority Inheritance Approach. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: This defines the second problem this paper addresses: what partitioning admission control for a multiprocessor gives a near optimal processor utilization and has a low computational complexity? Many extensions to RMS have been proposed in the literature, including periodic servers [16], tolerance to transient faults [8] and task synchronization <ref> [15] </ref>. In order to be practical, a new admission control should easily adapt to these extensions of RMS. <p> We are currently examining how R-BOUND can be modified to be used for on-line scheduling with dynamically changing task sets. We are also investigating how R-BOUND can be extended to deadline-monotonic and preemptive tasks with critical sections <ref> [15, 4] </ref>.
Reference: [16] <author> B. Sprunt, L. Sha, and J. Lehoczky. </author> <title> Aperiodic Task Scheduling for Hard-Real-Time Systems. </title> <journal> Journal of Real-Time Systems, </journal> <pages> pages 2760, </pages> <year> 1989. </year>
Reference-contexts: This defines the second problem this paper addresses: what partitioning admission control for a multiprocessor gives a near optimal processor utilization and has a low computational complexity? Many extensions to RMS have been proposed in the literature, including periodic servers <ref> [16] </ref>, tolerance to transient faults [8] and task synchronization [15]. In order to be practical, a new admission control should easily adapt to these extensions of RMS. <p> Fit bin-packing takes O (mp) to assign transformed tasks to processors, and finally it takes O (m) to map back to the original task set. 5 Periodic servers with priority exchange Several solutions to service aperiodic tasks with a good response time have been proposed for RMS on a uniprocessor <ref> [11, 16] </ref>.
References-found: 16

