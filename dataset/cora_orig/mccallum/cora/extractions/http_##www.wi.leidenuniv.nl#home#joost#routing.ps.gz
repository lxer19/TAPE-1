URL: http://www.wi.leidenuniv.nl/home/joost/routing.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/home/joost/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: kemenade@cwi.nl  joost@wi.leidenuniv.nl  
Title: An Evolutionary Approach to Time Constrained Routing Problems  
Author: C.H.M. van Kemenade J.N. Kok 
Keyword: Phrases: evolutionary computation, genetic algorithms, constrained optimization, vehicle routing  
Note: AMS Subject Classification (1991): 68T20 CR Subject Classification (1991): G.1.7, I.2.8, J.m  Note: Paper was presented at the Nordic Workshop on Genetic Algorithms, Vaasa 1995  
Address: P.O. Box 94079, 1090 GB Amsterdam, The Netherlands  P.O. Box 9512, 2300 RA Leiden, The Netherlands  
Affiliation: CWI  Leiden University Department of Computer Science  
Abstract: Routing problems are an important class of planning problems. Usually there are many different constraints and optimization criteria involved, and it is difficult to find general methods for solving routing problems. We propose an evolutionary solver for such planning problems. An instance of this solver has been tested on a specific routing problem with time constraints. The performance of this evolutionary solver is compared to a biased random solver and a biased hillclimber solver. Results show that the evolutionary solver performs significantly better than the other two solvers. 
Abstract-found: 1
Intro-found: 1
Reference: [Bac94] <author> Th. </author> <title> Back. Evolutionary Algorithms in Theory and Practice. </title> <type> Dissertation, </type> <institution> Universitat Dortmund, </institution> <year> 1994. </year>
Reference-contexts: Such a scheme comes closer to the scheme used in Evolution Strategies, which have been shown to be outperform Genetic Algorithms on function optimization tasks <ref> [Bac94] </ref>. During previous work on application of an evolutionary computation method to air traffic control [vKHHK95], and work on function optimization, this scheme resulted in a better performance of the evolutionary algorithm.
Reference: [BUMK91] <author> S. Bagchi, S. Uckun, Y. Miyabe, and K. Kawamura. </author> <title> Exploring problem-specific recombination operators for the job shop scheduling. </title> <booktitle> In Fourth International Conference on Genetic Algorithms, </booktitle> <year> 1991. </year>
Reference-contexts: Using these aims it seems reasonable to use a decoder approach together with a simple representation. Decoder approaches have been applied successfully on JSP, see for example Bagchi et al. <ref> [BUMK91] </ref> and Nakano [Nak91]. In order to do so a simple greedy algorithm is defined. Such a greedy algorithm takes local optimal decisions based on partial knowledge.
Reference: [MdWS91] <author> B. Manderick, M. de Weger, and P. Spiessens. </author> <title> The genetic algorithm and the structure of the fitness landscape. </title> <booktitle> In Fourth International Conference on Genetic Algorithms, </booktitle> <year> 1991. </year>
Reference-contexts: The task of the recombination operator is to combine good parts of different individuals. It is also important for the recombination operator not to be too disruptive <ref> [MdWS91] </ref>. This can also be seen 3. Evolutionary route planning 6 intuitively, because the success of certain partial solutions will depend on the context. So in order to combine good partial solutions to a obtain better solution, part of the context has to be preserved by the recombination operator.
Reference: [Nak91] <author> R. Nakano. </author> <title> Conventional genetic algorithms for job shop problems. </title> <booktitle> In Fourth International Conference on Genetic Algorithms, </booktitle> <year> 1991. </year>
Reference-contexts: Using these aims it seems reasonable to use a decoder approach together with a simple representation. Decoder approaches have been applied successfully on JSP, see for example Bagchi et al. [BUMK91] and Nakano <ref> [Nak91] </ref>. In order to do so a simple greedy algorithm is defined. Such a greedy algorithm takes local optimal decisions based on partial knowledge.
Reference: [Sys91] <author> G. Syswerda. </author> <title> A study of reproduction in generational and steady-state genetic algorithms. </title> <editor> In G. Rawlins, editor, </editor> <booktitle> Foundations of Genetic Algorithms - 1. </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: Experiments 7 A Steady-State Genetic Algorithm is used. Steady-State GAs can be tuned more easily than a generational GA, and by choosing appropriate values for the parameters the Steady-State GA can have the same behavior as a generational GA <ref> [Sys91] </ref>. Usually Steady-State algorithms use a biased selection scheme for reproduction, while unbiased (uniform) selection is used for the reduction phase. During the reduction phase it is decided which individual will be removed from the population to make room for new individuals.
Reference: [vKHHK95] <author> C.H.M. van Kemenade, C.F.W. Hendriks, H.H. Hesselink, and J.N. Kok. </author> <title> Evolutionary computation in air traffic control planning. </title> <booktitle> In Sixth International Conference on Genetic Algorithms, </booktitle> <year> 1995. </year> <note> References 12 </note>
Reference-contexts: Such a scheme comes closer to the scheme used in Evolution Strategies, which have been shown to be outperform Genetic Algorithms on function optimization tasks [Bac94]. During previous work on application of an evolutionary computation method to air traffic control <ref> [vKHHK95] </ref>, and work on function optimization, this scheme resulted in a better performance of the evolutionary algorithm. Using fitness proportionate selection does not make much sense, as it is not known beforehand whether fitness is a linear measure in this case.
Reference: [Whi89] <author> D. Whitley. </author> <title> The genitor algorithm and selective pressure. </title> <booktitle> In Third International Conference on Genetic Algorithms, </booktitle> <pages> pages 116-121, </pages> <year> 1989. </year>
Reference-contexts: Usually Steady-State algorithms use a biased selection scheme for reproduction, while unbiased (uniform) selection is used for the reduction phase. During the reduction phase it is decided which individual will be removed from the population to make room for new individuals. In the description of Genitor <ref> [Whi89] </ref> it is suggested that the application of a bias in the reduction phase too, can result in a faster search. We go even one step further. We use an unbiased selection of parents for reproduction, so the biased selection for reduction is our prime guide during the evolution.
References-found: 7

