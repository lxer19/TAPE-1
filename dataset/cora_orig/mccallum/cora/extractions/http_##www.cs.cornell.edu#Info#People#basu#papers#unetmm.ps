URL: http://www.cs.cornell.edu/Info/People/basu/papers/unetmm.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/basu/papers.html
Root-URL: http://www.cs.cornell.edu
Title: Incorporating Memory Management into User-Level Network Interfaces  
Author: Matt Welsh, Anindya Basu, Thorsten von Eicken 
Affiliation: Department of Computer Science Cornell University  
Note: Draft Please do not distribute 1  
Abstract: User-level network interfaces allow applications direct access to the network without operating system intervention on every send and receive. Messages are transferred directly to and from userspace by the network interface while observing the traditional protection boundaries between processes. Current user-level network interfaces limit this message transfer to a per-process region of permanently-pinned physical memory to allow safe DMA. This approach is inflexible in that it requires data to be copied into and out of this memory region, and does not scale to a large number of processes. This paper presents an extension to the U-Net user-level network architecture (U-Net/MM) allowing messages to be transferred directly to and from any part of an applications address space. This is achieved by integrating a translation look-aside buffer into the network interface and coordinating its operation with the operating systems virtual memory subsystem. This mechanism allows network buffer pages to be pinned and unpinned dynamically. Two implementations of U-Net/MM are described, demonstrating that existing commodity hardware and commercial operating systems can efficiently support the architecture. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. S. Ang, D. Chiou, L. Rudolph, and Arvind. </author> <title> Message Passing Support on StarT-Voyager. </title> <institution> CSG-Memo-387, MIT Laboratory for Computer Science, </institution> <month> July </month> <year> 1996. </year> <title> Draft Please do not distribute 10 </title>
Reference-contexts: Other approaches have used operating system assisted dynamic remapping of network buffers to the address space of user processes. The following paragraphs briefly discuss some of the previous work in this area and how it relates to the U-Net/MM architecture. In the StarT <ref> [1] </ref>, FLASH [11] and Typhoon [14] architectures, the NI is attached to the memory bus and shares the TLB with the host processor. As a result, the NI is capable of virtual-to-physical address translations. The network interfaces in these architectures also include a protocol processor.
Reference: [2] <author> M. Blumrich, C. Dubnicki, E. W. Felten, and K. Li. </author> <title> Virtual Memory Mapped Network Interfaces. </title> <journal> IEEE Micro, </journal> <volume> 15(1):21 - 28, </volume> <month> February </month> <year> 1995. </year>
Reference-contexts: A major optimization in the fbufs [7] approach assumes that pages from only a limited range of user virtual memory can be remapped while in the case of SHRIMP <ref> [2] </ref>, any region in the user virtual memory can be used as a network buffer but must be explicitly pinned down in physical memory using special system calls.
Reference: [3] <author> G. Buzzard, D. Jacobson, M. Mackey, S. Marovich and J. Wilkes. </author> <title> An Implementation of the Hamlyn Sender-Managed Interface Architecture. </title> <booktitle> In Proceedings of the 2nd Symposium on Operating System Design and Implementation, </booktitle> <address> Seattle, Washing-ton, </address> <month> October, </month> <year> 1996. </year>
Reference: [4] <author> D. E. Culler, A. Dusseau, S. C. Goldstein, A. Krishnamurthy, S. Lumetta, T. von Eicken, and K. Yelick. </author> <title> Introduction to Split-C. </title> <booktitle> In Proceedings of Supercomputing 93, </booktitle> <year> 1993. </year>
Reference-contexts: As multiple receive buffers may share a page in the DC21140 implementations (due to the MTU of Fast Ethernet) this optimization cannot be used. 6.2 Application Behavior To obtain a preliminary characterization of the NI TLB behavior in the U-Net/MM architecture, a set of Split-C <ref> [4] </ref> benchmarks and the Linux kernel socket layer were instrumented to record message transmit and receive activity, the results of which were input to a simulation of the U-Net/MM TLB.
Reference: [5] <author> D. E. Culler and G. M. Papadopoulos. </author> <title> The Explicit Token Store. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 10(4): 289 - 308, </volume> <year> 1990. </year>
Reference: [6] <author> W. J. Dally, R. Davison, J. A. S. Fiske, G. Fyler, J. S. Keen, R. A. Lethin, M. Noakes, and P. R. Nuth. </author> <title> The MessageDriven Processor: A Multicomputer Processing Node with Efficient Mechanisms. </title> <booktitle> IEEE Micro, </booktitle> <month> April </month> <year> 1990. </year>
Reference: [7] <author> P. Druschel and L. L. Peterson. Fbufs: </author> <title> A High-Bandwidth Cross-Domain Transfer Facility. </title> <booktitle> In Proceedings of the 14th Annual Symposium on Operating System Principles, </booktitle> <pages> pages 189 - 202, </pages> <address> Ashville, North Carolina, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: An alternative approach used by some other architectures [2,7] uses commodity network interfaces and uses specialized operating system support to dynamically remap network buffers to address spaces of user-level processes. A major optimization in the fbufs <ref> [7] </ref> approach assumes that pages from only a limited range of user virtual memory can be remapped while in the case of SHRIMP [2], any region in the user virtual memory can be used as a network buffer but must be explicitly pinned down in physical memory using special system calls.
Reference: [8] <author> M. Fillo, S. W. Keckler, W. J. Dally, N. P. CarterA. Chang, Y. Gurevich, and W. S. Lee. </author> <title> The M-Machine Multicomputer. </title> <booktitle> In Proceedings of the 28th Annual International Symposium on Computer Micorarchitecture, </booktitle> <address> Ann Arbor, Michigan, </address> <year> 1995. </year>
Reference: [9] <author> M. Homewood and M. McLaren. </author> <title> Meiko CS-2 Interconnect Elan-Elite Design. </title> <booktitle> In Proceedings of Hot Interconnects, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: As a result, the NI is capable of virtual-to-physical address translations. The network interfaces in these architectures also include a protocol processor. The Meiko CS-2 <ref> [9] </ref> NI incorporates a TLB that is used for translating virtual address to physical DMA addresses at the time of message sends and receives as well as a protocol processor. The U-Net/MM architecture is similar to the Meiko CS-2 in that it incorporates a TLB in the NI.
Reference: [10] <author> Intel Corporation. </author> <title> Paragon XPIS Product Overview, </title> <address> Santa Clara, California, </address> <year> 1991. </year>
Reference: [11] <author> J. Kuskin, D. Ofelt, M. Heinrich, J. Heinlein, R. Simoni, K. Gharachorloo, J. Chapin, D. Nakahira, J. Baxter, M. Horowitz, A. Gupta, M. Rosenblum, and J. Henessey. </author> <title> The Stanford FLASH Multiprocessor. </title> <booktitle> In Proceedings of the 21st Annual International Symposium on Computer Architecture, </booktitle> <address> Chicago, Illinois, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: Other approaches have used operating system assisted dynamic remapping of network buffers to the address space of user processes. The following paragraphs briefly discuss some of the previous work in this area and how it relates to the U-Net/MM architecture. In the StarT [1], FLASH <ref> [11] </ref> and Typhoon [14] architectures, the NI is attached to the memory bus and shares the TLB with the host processor. As a result, the NI is capable of virtual-to-physical address translations. The network interfaces in these architectures also include a protocol processor.
Reference: [12] <author> A. M. Mainwaring and D. E. Culler. </author> <title> Active Messages: Organization and Applications Programming Interface. </title> <note> http://now.CS.Berkeley.EDU/Papers/am-spec.ps, 1995. </note>
Reference: [13] <author> S. Pakin, M. Lauria, and A. Chien. </author> <title> High Performance Messaging on Workstations: Illinois Fast Messages (FM) for Myrinet. </title> <booktitle> In Proceedings of Supercomputing 95, </booktitle> <address> San Diego, California, </address> <year> 1995. </year>
Reference: [14] <author> S. K. Reinhardt, J. R. Larus, and D. A. Wood. Typhoon and Tempest: </author> <title> User-Level Shared Memory. </title> <booktitle> In Proceedings of the 21st Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 325 - 336, </pages> <address> Chicago, Illinois, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: Other approaches have used operating system assisted dynamic remapping of network buffers to the address space of user processes. The following paragraphs briefly discuss some of the previous work in this area and how it relates to the U-Net/MM architecture. In the StarT [1], FLASH [11] and Typhoon <ref> [14] </ref> architectures, the NI is attached to the memory bus and shares the TLB with the host processor. As a result, the NI is capable of virtual-to-physical address translations. The network interfaces in these architectures also include a protocol processor.
Reference: [15] <author> T. von Eicken, A. Basu, V. Buch, and W. Vogels. U-Net: </author> <title> A User-level Network Interface for Parallel and Distributed Computing. </title> <booktitle> In Proceedings of the 15th Annual Symposium on Operating System Principles, </booktitle> <pages> pages 40 - 53, </pages> <address> Copper Mountain Resort, Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: In contrast, the U-Net/MM architecture allows applications to send from and receive into any area in their virtual address space without having to explicitly pin down any virtual memory region. 4 The U-Net/MM Architecture U-Net/MM is an extension of the U-Net user-level networking architecture <ref> [15] </ref>. It consists of three main building blocks shown in 1 endpoints serve as an applications handle into the network and contain three message queues which hold descriptors for message buffers that are to be sent, that are free for reception, and that have been received.
Reference: [16] <author> T. von Eicken, D. E. Culler, S. C. Goldstein, and K. E. Schauser. </author> <title> Active Messages: A Mechanism for Integrated Communication and Computation. </title> <booktitle> In Proceedings of the 19th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 256 - 266, </pages> <address> Gold Coast, Australia, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: Dereferencing a global pointer allows a process to read or write data in the address spaces of other processes that are part of the parallel application. Split-C is implemented over Active Messages <ref> [16] </ref>, a low-overhead RPC mechanism which provides reliable communication. The Split-C benchmark suite consists of four programs: a blocked matrix multiply, a radix sort and a sample sort optimized for small message transfers and the same sample sort optimized for large message transfers.
Reference: [17] <author> M. Welsh, A. Basu, and T. von Eicken. </author> <title> Low-Latency Communication over Fast Ethernet. </title> <booktitle> In Proceedings of EUROPAR 96, </booktitle> <address> Lyon, France, </address> <month> August </month> <year> 1996. </year>
Reference: [18] <author> M. Welsh, A. Basu, T. von Eicken. </author> <title> A Comparison of Fast Ethernet and ATM for Low-Latency Communication. </title> <booktitle> In Proceedings of the 3rd International Symposium on High-Performance Computer Architecture, </booktitle> <address> San Antonio, Texas, </address> <month> February </month> <year> 1997. </year> <note> (to appear). </note>
Reference-contexts: In addition to the two U-Net/MM implementations described in the previous section, three conventional U-Net implementations without memory management in the NI were timed: a PCA-200 <ref> [18] </ref> and a DC21140 [17][18] Draft Please do not distribute 7 implementation using Linux as well as a DC21140 implementation using Windows NT.
References-found: 18

