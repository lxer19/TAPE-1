URL: http://www.cs.purdue.edu/homes/spaf/tech-reps/s21.ps
Refering-URL: http://www.cs.purdue.edu/homes/spaf/wwwpub/node4.html
Root-URL: http://www.cs.purdue.edu
Email: spaf@cs.purdue.edu  
Title: Extending Mutation Testing to Find Environmental Bugs When translating specifications into algorithms and then into
Author: Eugene H. Spafford 
Keyword: testing, mutation analysis, environmental bugs  
Note: The Problem  
Address: W. Lafayette, IN 47907-1398  
Affiliation: Software Engineering Research Center Department of Computer Sciences Purdue University  
Pubnum: Technical Report SERC-TR-21-P  
Abstract: This paper reports on an extension to traditional mutation testing that enables testing specifically for environmental bugs involving integer arithmetic. This method is both simple and effective, and provides some insight into other possible extensions of the mutation testing methodology that can be used to expose environmental bugs. Typical examples of these environmental bugs 333333333333333 * Portions of the work described in this paper were funded under RADC contract F30602 85-c-0255. A version of this paper appears in the journal Software Practice & Experience, 20(2), pp. 181-189, Feb 1990. Interestingly enough, the author has been unable to find any comprehensive published study of these problems, although nearly everyone seems to have favorite anecdotes concerning them. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Acree, A. T., </author> <title> ``On Mutation,'' </title> <type> PHD THESIS, </type> <institution> Georgia Institute of Technology, </institution> <year> 1980. </year>
Reference: 2. <author> ANSI/IEEE,, </author> <title> IEEE Standard for Binary Floating-Point Arithmetic, </title> <booktitle> IEEE, 1985. (ANSI/IEEE Standard, </booktitle> <pages> pp. 754-1985) </pages>
Reference: 3. <author> Budd, T. A., </author> <title> ``Mutation Analysis of Program Test Data,'' </title> <type> PHD THESIS, </type> <institution> Yale University, </institution> <year> 1980. </year>
Reference: 4. <author> Bullard, C. and E. H. Spafford, </author> <title> ``Testing Experience with MOTHRA,'' </title> <booktitle> PROCEEDINGS OF 25TH SOUTHEAST ACM CONFERENCE, </booktitle> <institution> Birmingham AL, </institution> <month> April </month> <year> 1987. </year>
Reference: 5. <author> Choi, B. J., R. A. DeMillo, E. W. Krauser, R. J. Martin, A. P. Mathur, A. J. Offutt, H. Pan, and E. H. Spafford, </author> <title> ``The Mothra Tools Set,'' </title> <booktitle> PROCEEDINGS OF THE 22ND HAWAII INTERNATIONAL CONFERENCE ON SYSTEMS AND SOFTWARE, </booktitle> <pages> pp. 275-284, </pages> <address> Kona, Hawaii, </address> <month> Jan </month> <year> 1989. </year>
Reference-contexts: The potential usefulness of such mutations, however, is significant, and the effort spent developing even machine-specific mutant operators would be well-spent. The next generation of our mutation testing environment <ref> [5] </ref> is being designed to allow the user to specify the nature of some mutations, thus allowing customization for the local machine and language environment. Other environmental bugs, such as sizing dynamic arrays too large, and allocating too much heap, should also be testable with custom mutants.
Reference: 6. <author> DeMillo, R. A., R. J. Lipton, and F. G. Sayward, </author> <title> ``Hints on Test Data Selection: Help for the Practicing Programmer,'' </title> <journal> COMPUTER, </journal> <volume> vol. 11, no. 4, </volume> <pages> pp. 34-41, </pages> <month> April </month> <year> 1978. </year>
Reference-contexts: As experienced software testers know, this is a difficult taskeven the best tester may miss critical combinations of input that will expose a bug, as in the example shown above. <ref> [6] </ref> Testers would benefit from some measure of the adequacy of their testing, and from tools that help generate and select test cases to expose environmental bugs.
Reference: 7. <author> DeMillo, Richard A. and Eugene H. Spafford, </author> <title> ``The MOTHRA Software Testing Environment,'' </title> <institution> 11TH NASA SOFTWARE ENGINEERING LABORATORY WORKSHOP, Goddard Space Center, </institution> <month> December 3, </month> <year> 1986. </year>
Reference: 8. <author> DeMillo, R. A., D. Guindi, K. N. King, E. W. Krauser, A. J. Offutt, and E. H. Spafford, </author> <title> ``Mothra Internal Documentation, Version 1.0,'' </title> <type> TECHNICAL REPORT GIT-SERC-87/10, </type> <institution> Software Engineering Research Center, Georgia Institute of Technology, </institution> <year> 1987. </year>
Reference-contexts: To kill NZPUSH mutants, input values must be generated to cause appropriate variables to be set equal to this ``negative zero.'' (It is worth noting here that standard - 9 - mutation already has a similar mutant operation, ZPUSH, to force variables to take on the value zero. <ref> [8] </ref> ) Note that we do not need to be concerned with an NZPUSH mutation on machines with one's complement arithmetic since that system has defined inverses for every value (there are two representations of zero).
Reference: 9. <author> DeMillo, R. A. and A. J. Offutt, </author> <title> ``Experimental Results of Automatically Generated Adequate Test Sets,'' </title> <booktitle> PROCEEDINGS OF THE SIXTH ANNUAL PACIFIC NORTHWEST SOFTWARE QUALITY CONFERENCE, </booktitle> <address> Portland, Oregon, </address> <month> September </month> <year> 1988. </year>
Reference: 10. <author> Howden, W. E., </author> <title> Functional Program Testing & Analysis, </title> <publisher> McGraw-Hill, </publisher> <year> 1987. </year>
Reference: 11. <author> Krauser, E. W. and Aditya P. Mathur, </author> <title> ``Program Testing on a Massively Parallel Transputer Based System,'' </title> <booktitle> PROCEEDINGS OF THE ISMM INTERNATIONAL SYMPOSIUM, </booktitle> <pages> pp. 67-71, </pages> <address> Austin, Texas, USA, </address> <month> November 10-12 </month> <year> 1986. </year> <month> - 12 </month> - 
Reference: 12. <author> Krauser, E. W., Aditya P. Mathur, and Vernon Rego, </author> <title> ``High Performance Testing on SIMD Machines,'' </title> <booktitle> PROCEEDINGS OF THE SECOND WORKSHOP ON SOFTWARE TESTING, VERIFICATION AND ANALYSIS, </booktitle> <address> Banff, Alberta, Canada, </address> <month> July 19-21, </month> <year> 1988. </year>
Reference: 13. <author> Mathur, Aditya P. and E. W. Krauser, </author> <title> ``Modeling Mutation On a Vector Processor,'' </title> <booktitle> PROCEEDINGS OF THE 10TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, </booktitle> <address> Singapore, </address> <month> April </month> <year> 1988. </year> <note> (Previously released as Technical Report GIT-SERC-87/07, </note> <institution> Georgia Institute of Technology, </institution> <year> 1987) </year>
Reference: 14. <author> Myers, G., </author> <title> The Art of Software Testing, </title> <publisher> John Wiley & Sons, </publisher> <address> New York, NY, </address> <year> 1979. </year>
Reference-contexts: By proper choice of mutant operators, comprehensive testing can be performed,[3] including path coverage <ref> [14] </ref> and domain analysis.[20] By examination of unkilled mutants, testers can add new test cases to better the adequacy score of the entire test set. Program mutation is a powerful method for detecting bugs in code, but has no provision (mutant operators) for detecting environmental bugs.
Reference: 15. <author> Offutt, A. J. and K. N. King, </author> <title> ``A Fortran 77 Interpreter for Mutation Analysis,'' </title> <booktitle> 1987 SYMPOSIUM ON INTERPRETERS AND INTERPRETIVE TECHNIQUES, </booktitle> <pages> pp. 177-188, </pages> <booktitle> ACM SIGPLAN, </booktitle> <address> St. Paul, MN, </address> <month> June </month> <year> 1987. </year>
Reference: 16. <author> Offutt, A. J., </author> <title> ``Automatic Test Data Generation,'' </title> <type> PHD DISSERTATION, </type> <institution> Department of Information and Computer Science, Georgia Institute of Technology, </institution> <year> 1988. </year>
Reference: 17. <author> Ramamoorthy, C. V., S. F. Ho, and W. T. Chen, </author> <title> ``On the Automated Generation of Program Test Data,'' </title> <journal> IEEE TRANSACTIONS ON SOFTWARE ENGINEERING, </journal> <volume> vol. SE-2, no. 4, </volume> <publisher> IEEE, </publisher> <month> December </month> <year> 1976. </year>
Reference: 18. <author> Schryer, N. L., </author> <title> ``A Test of A Computer's Floating-Point Arithmetic Unit,'' </title> <institution> COMPUTER SCIENCE TECHNICAL REPORT, AT&T Bell Laboratories, </institution> <year> 1981. </year>
Reference: 19. <author> Spafford, E. H. and J. C. Flaspohler, </author> <title> ``A Report on the Accuracy of Some Floating Point Math Functions on Selected Computers,'' </title> <journal> THE USENIX ASSOCIATION NEWSLETTER, </journal> <volume> vol. 11, no. </volume> <pages> 2. </pages>
Reference: 20. <author> White, L. J., E. I. Cohen, and B. Chandrasekaran, </author> <title> ``A Domain Strategy for Computer Program Testing,'' </title> <type> TECHNICAL REPORT OSU-CISRC-TR-78-4, </type> <institution> Ohio State University, </institution> <year> 1978. </year>
Reference: 21. <author> Woodward, M. R. and K. Halewood, </author> <title> ``From Weak to Strong: Dead or Alive? An Analysis of Some Mutation Testing Issues,'' </title> <booktitle> PROCEEDINGS OF THE SECOND WORKSHOP ON SOFTWARE TESTING, VERIFICATION AND ANALYSIS, </booktitle> <pages> pp. 152-158, </pages> <address> Banff, Alberta, Canada, </address> <month> July 19-21, </month> <year> 1988. </year>
References-found: 21

