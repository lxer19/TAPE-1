URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/r-92-9.ps
Refering-URL: http://www.eecs.umich.edu/~rundenst/group/papers.html
Root-URL: http://www.cs.umich.edu
Title: Set Operations in Object-Based Data Models  
Author: ELKE A. RUNDENSTEINER and LUBOMIR BIC 
Keyword: Index Terms: Complex objects, class derivation, property inheritance, object identity, set operations, object-oriented databases, semantic data models.  
Date: November, 1991  
Affiliation: Department of Information and Computer Science University of California, Irvine  
Note: Published in IEEE Transactions on Knowledge and Data Engineering, 1992.  
Abstract: Query languages designed for traditional database systems, such as the relational model, generally support set operations. However, the semantics of these set operations are not adequate for richer data models of newly developed object-based database systems that include object-oriented and semantic data modeling concepts. The reason is that precise semantics of set operations on complex objects require a clear distinction between the dual notions of a set and a type, both of which are present in the class construct found in object-based data models. In fact, class creation by set operations has largely been ignored in the literature. Our paper fills this gap by presenting a framework for executing set-theoretic operations on the class construct. The proposed set operations, including set difference, union, intersection and symmetric difference, determine both the type description of the derived class as well as its set membership. For the former, we develop inheritance rules for property characteristics such as single- versus multi-valued and required versus optional. For the latter, we borrow the object identity concept from data modeling research. Our framework allows for property inheritance among classes that are not necessarily is-a related. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul and R. Hull, </author> <title> "IFO: A Formal Semantic Database Model," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 12, issue 4, </volume> <pages> pp. 525-565, </pages> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: 1 INTRODUCTION Current trends in database research have developed numerous object-based data models that attempt to capture real-world information in a natural and non-ambiguous manner. Examples are object-oriented [8, 12] and semantic database systems <ref> [1, 10] </ref>. Common to these object-based data models is the concept of a class. Most models support a rich class definition facility based on restricting inherited properties, that is, special forms of the specialization and generalization abstractions [2, 10, 13, 9]. <p> The most common one is specialization, which is supported by virtually all object-based database systems, notably, SDM [9], TAXIS [13], and IFO <ref> [1] </ref>. <p> The Cartesian aggregation abstraction is equally supported by most database systems <ref> [20, 9, 13, 1] </ref>. It is an abstraction that allows a relationship between several entities to be viewed as a single aggregate (complex entity). Each element in the Cartesian class is taken from the cross product of existing classes and a new unique identity is associated with it. <p> Determining the type description of classes derived by set operations is related to the issue of property inheritance. The difference is that the inheritance of properties usually takes place between two classes while set operations always deal with three classes <ref> [1] </ref>. In other words, the definition of set operations on complex objects is similar to the problem of multiple inheritance. However, the literature assumes that the inheritance of properties takes place between classes that stand in an is-a relationship to one another [10]. <p> Some data models, in particular, most object-oriented models, define only type-oriented class operations. We use the term type-oriented to mean that these operations are applied to the type description of the original class and that the resulting membership of the new class is derived automatically. Others <ref> [13, 1] </ref> also include some limited repertoire of set operations on classes. Most of these approaches however are ad-hoc, as discussed below. Hammer and McLeod [9] were among the first to propose different types of derivation mechanisms for subclasses.
Reference: [2] <author> M. P. Atkinson and O. P. Buneman, </author> <title> "Types and Persistence In Database Programming Languages," </title> <journal> in ACM Computing Surveys, </journal> <volume> vol. 19, no. 2, </volume> <pages> pp. 105-190, </pages> <month> June 87. </month>
Reference-contexts: Examples are object-oriented [8, 12] and semantic database systems [1, 10]. Common to these object-based data models is the concept of a class. Most models support a rich class definition facility based on restricting inherited properties, that is, special forms of the specialization and generalization abstractions <ref> [2, 10, 13, 9] </ref>. On the other hand, the potential of set operations has largely been unexplored. The reason for this is that, while set operations on simple elements (values) are well understood, precise semantics for set operations on complex objects have not yet been developed. <p> Such definitions require a clear distinction between the dual notion of a class, which represents a set and also provides a type description. This distinction is usually blurred in the literature. Commonly supported class derivation mechanisms, such as the specialization abstraction, are type-oriented <ref> [2] </ref>; they perform operations on the type aspect of a class, which then automatically implies a particular set relationship between the original and the derived class. Set operations work in a contrary manner. They perform some operation on the set-aspect of a class and the particular type relationships are implied. <p> On the other hand, we do not address, in this paper, class definition abstractions, such as, specialization, selection and Cartesian aggregation, since these are common to most data models and have been dealt with in depth in the literature <ref> [18, 16, 2, 10, 13, 9] </ref>. Instead, we focus on the set operations, which have for the most part been ignored by data model designers. Existing data models can augment their set of abstractions by our proposed set operations.
Reference: [3] <author> A. Borgida, </author> <title> "Conceptual Modeling of Information Systems," in On Knowledge Base Management Systems, </title> <publisher> Springer-Verlag. </publisher> <editor> Brodie, M.L. and Mylopoulos, J. (eds), </editor> <year> 1987. </year>
Reference: [4] <author> R. J. Brachman, </author> <title> "What IS-A is and isn't: An Analysis of Taxonomic Links in Semantic Networks," </title> <booktitle> in IEEE Computer, </booktitle> <pages> pp. 30 - 36, </pages> <month> Oct. 83. </month>
Reference-contexts: The set of given class derivations and their semantics ultimately determine how type and set relationships interact within a given data model as will be shown in Section 4. The term is-a relationship has been misused to mean many different things <ref> [4] </ref>. We can now define the is-a relationship in terms of the two just defined class relationships. Definition 5 C1 is-a C2 () C1 C2 and C1 C2.
Reference: [5] <author> P. P. Chen, </author> <title> "The Entity-Relationship Model | Toward a Unified View of Data," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 1, issue 1, </volume> <pages> pp. 9-36, </pages> <month> Mar. </month> <year> 1976. </year>
Reference-contexts: The term entity is used in this paper in 5 its most generic form | it may, for example, stand for a row in a relation table [7], an entity (or a relationship) in the entity-relationship model <ref> [5] </ref>, an entity in a semantic data model [10], or an object in an object-oriented model [13]. We distinguish between values and abstract entities. Values are taken directly from some predefined base domains, such as, integers or strings.
Reference: [6] <author> D. L. Childs, </author> <title> "Feasibility of a Set-Theoretic Data Structure A General Structure Based on a Reconstituted Definition of Relation," </title> <booktitle> in Proc. of the IFIP Congress, Information Processing 1968, </booktitle> <volume> vol. 1, </volume> <pages> pp. 420 - 430, </pages> <year> 1969. </year>
Reference-contexts: We wish to emphasize that the use of set operations for class creation results in class relationships that would not exist in a database schema built solely by specialization and generalization abstractions. 35 7 RELATED RESEARCH Early work on the problem of extended set operations by Childs <ref> [6] </ref> has been published in the Proceedings of the IFIP Congress in 1968. Childs's work concerns the definition of a machine-independent data structure, called the Set-Theoretic Data Structure, which allows for fast execution of principal set operations on arbitrarily complex sets.
Reference: [7] <author> E. F. Codd, </author> <title> "Extending the Database Relational Model to Capture More Meaning," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 4, issue 4, </volume> <pages> pp. 397-434, </pages> <month> Dec. </month> <year> 1979. </year>
Reference-contexts: Entities in our data model represent a concrete or abstract concept in the application world. The term entity is used in this paper in 5 its most generic form | it may, for example, stand for a row in a relation table <ref> [7] </ref>, an entity (or a relationship) in the entity-relationship model [5], an entity in a semantic data model [10], or an object in an object-oriented model [13]. We distinguish between values and abstract entities. Values are taken directly from some predefined base domains, such as, integers or strings.
Reference: [8] <author> D. Fishman et al., </author> <title> "Iris: An Object-Oriented Database Management System," </title> <journal> in ACM Trans. on Office Information Systems, </journal> <volume> vol. 5, no. 1, </volume> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: 1 INTRODUCTION Current trends in database research have developed numerous object-based data models that attempt to capture real-world information in a natural and non-ambiguous manner. Examples are object-oriented <ref> [8, 12] </ref> and semantic database systems [1, 10]. Common to these object-based data models is the concept of a class. Most models support a rich class definition facility based on restricting inherited properties, that is, special forms of the specialization and generalization abstractions [2, 10, 13, 9]. <p> Due to the generality of our approach, results of this paper apply to any object-based data model that supports the class construct. We have ignored behavioral abstractions (methods) associated with classes of object-oriented systems <ref> [8, 12] </ref>, since their inclusion would not aid the understanding of the presented concepts. We believe, however, that much of this work can be extended to also include the behavioral aspect of classes. ACKNOWLEDGEMENTS The authors would like to thank the editor-in-chief Prof. B. Wah, the subject editor Prof. T.
Reference: [9] <author> M. Hammer and D. J. McLeod. </author> <title> "Database Description with SDM: A Semantic Data Model," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 6, no. 3, </volume> <pages> pp. 351-386, </pages> <month> Sept. </month> <year> 1981. </year>
Reference-contexts: Examples are object-oriented [8, 12] and semantic database systems [1, 10]. Common to these object-based data models is the concept of a class. Most models support a rich class definition facility based on restricting inherited properties, that is, special forms of the specialization and generalization abstractions <ref> [2, 10, 13, 9] </ref>. On the other hand, the potential of set operations has largely been unexplored. The reason for this is that, while set operations on simple elements (values) are well understood, precise semantics for set operations on complex objects have not yet been developed. <p> Set operations work in a contrary manner. They perform some operation on the set-aspect of a class and the particular type relationships are implied. Such implied types, however, do not always have to take on the restricted forms assumed in the literature <ref> [9] </ref>, as we will show in this paper. This paper presents a framework for executing set-theoretic operations on complex objects. We consider the four set operations most common in set theory union, intersection, difference, and symmetric difference. <p> This analysis shows that the resulting class relationships are not necessarily is-a relationships, as is commonly (but implicitly) assumed in the literature <ref> [9] </ref>. In 3 fact, a class derived by a symmetric difference operation will never stand in any is-a relation-ship with its base classes, no matter whether the operation's type is collecting, extracting, or user-specified. Consequently, our framework allows for the inheritance of properties between classes that are not is-a related. <p> On the other hand, we do not address, in this paper, class definition abstractions, such as, specialization, selection and Cartesian aggregation, since these are common to most data models and have been dealt with in depth in the literature <ref> [18, 16, 2, 10, 13, 9] </ref>. Instead, we focus on the set operations, which have for the most part been ignored by data model designers. Existing data models can augment their set of abstractions by our proposed set operations. <p> C2 is said to have inherited the property p from the class C1. 3.2 Class Derivation Operations There are numerous types of class creation abstractions for abstract classes, such as specialization/generalization abstractions [10], the aggregation abstraction, also called "part-of" relationship in object-oriented systems, and groupings found in semantic data models <ref> [9, 18] </ref>. The most common one is specialization, which is supported by virtually all object-based database systems, notably, SDM [9], TAXIS [13], and IFO [1]. <p> The most common one is specialization, which is supported by virtually all object-based database systems, notably, SDM <ref> [9] </ref>, TAXIS [13], and IFO [1]. <p> The Cartesian aggregation abstraction is equally supported by most database systems <ref> [20, 9, 13, 1] </ref>. It is an abstraction that allows a relationship between several entities to be viewed as a single aggregate (complex entity). Each element in the Cartesian class is taken from the cross product of existing classes and a new unique identity is associated with it. <p> Formally, this can be stated as follows: (C.p?=true) ^ (domain (C.p)=D) =) (8e 2 C) ((p (e as C)=`unknown') _ (p (e as C) 2 D) _ (p (e as C) D)). Most object-oriented and semantic data models <ref> [9, 10] </ref> associate some or all of the following characteristics with each class property: 1. required versus optional; 2. identifying versus non-identifying; and 3. single-valued versus multi-valued. As indicated in Section 3.1, we associate these characteristics with each property in the class declaration (See Example 3). <p> The latter has no correspondence in conventional set theory, where a set is completely described by enumerating its members. Consequently, there is nothing in set theory to dictate the treatment of the type description of the resulting class. Other data models <ref> [9, 21] </ref> have made certain (arbitrary) choices in this regard without giving a convincing argument to support their choice. <p> It is defined like the automatic difference except for replacing P with Q. There is an important difference between the just presented user-specified set operation and the user-specified subclass mechanism commonly found in the literature <ref> [9] </ref>. Here, the user has to specify the type description once namely during the creation of the derived class. Thereafter, the class can be instantiated automatically by the system according to the semantics of the applied set difference operation. Therefore, the level of user involvement is minimal. <p> Hence, the user-specified intersection operation Employees ~ " Students combined with the chosen type specification of "Name" and "Grade" is the appropriate choice for creating the desired class. The derived class Good-Employed-Students (not shown in the figure) then has the content f [e2: Name=Frank, Grade=A] g. In the literature <ref> [9] </ref>, the extracting union operation and the collecting intersection operation are generally assumed. Therefore, in the following examples we present an extracting intersection operation and a collecting union operation to demonstrate their usefulness. <p> For instance, an example of a special situation for rows 24 to 31 is (C1 C2) since it implies that (R C2). Another example is (C1 = ;); it implies that (R = ;), which by default implies that (R C1) and (R C2). In the literature <ref> [9] </ref>, the extracting union operation (row 9) is chosen over all other types of union operations. This table shows clearly the reason for this choice. First, the extracting union operation is an automatic operation that requires no further human interaction. <p> Others [13, 1] also include some limited repertoire of set operations on classes. Most of these approaches however are ad-hoc, as discussed below. Hammer and McLeod <ref> [9] </ref> were among the first to propose different types of derivation mechanisms for subclasses. In SDM, they list four subclass connections, namely, attribute-defined, user-controllable, set-operator defined, and existence subclasses. <p> This ambiguity arises from the fact that SAM fl is value- rather than object-based. No set operations other than this union are considered in SAM fl . Property characteristics, such as mandatory, single- or multi-valued, and others, have been proposed by several researchers <ref> [9, 13] </ref>. Property inheritance has been studied extensively in the context of type-oriented class creation operations, such as specialization and generalization. However, to our knowledge no one discusses the effect of class derivations by set operations on property characteristics.
Reference: [10] <author> R. Hull and R. King, </author> <title> "Semantic Database Modeling: Survey, Applications and Research Issues," </title> <journal> in ACM Computing Surveys, </journal> <volume> vol. 19, no. 3, </volume> <pages> pp. 201-260, </pages> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: 1 INTRODUCTION Current trends in database research have developed numerous object-based data models that attempt to capture real-world information in a natural and non-ambiguous manner. Examples are object-oriented [8, 12] and semantic database systems <ref> [1, 10] </ref>. Common to these object-based data models is the concept of a class. Most models support a rich class definition facility based on restricting inherited properties, that is, special forms of the specialization and generalization abstractions [2, 10, 13, 9]. <p> Examples are object-oriented [8, 12] and semantic database systems [1, 10]. Common to these object-based data models is the concept of a class. Most models support a rich class definition facility based on restricting inherited properties, that is, special forms of the specialization and generalization abstractions <ref> [2, 10, 13, 9] </ref>. On the other hand, the potential of set operations has largely been unexplored. The reason for this is that, while set operations on simple elements (values) are well understood, precise semantics for set operations on complex objects have not yet been developed. <p> On the other hand, we do not address, in this paper, class definition abstractions, such as, specialization, selection and Cartesian aggregation, since these are common to most data models and have been dealt with in depth in the literature <ref> [18, 16, 2, 10, 13, 9] </ref>. Instead, we focus on the set operations, which have for the most part been ignored by data model designers. Existing data models can augment their set of abstractions by our proposed set operations. <p> The term entity is used in this paper in 5 its most generic form | it may, for example, stand for a row in a relation table [7], an entity (or a relationship) in the entity-relationship model [5], an entity in a semantic data model <ref> [10] </ref>, or an object in an object-oriented model [13]. We distinguish between values and abstract entities. Values are taken directly from some predefined base domains, such as, integers or strings. <p> there is a property p defined in class C1 that is also defined in class C2, then class C2 is said to have inherited the property p from the class C1. 3.2 Class Derivation Operations There are numerous types of class creation abstractions for abstract classes, such as specialization/generalization abstractions <ref> [10] </ref>, the aggregation abstraction, also called "part-of" relationship in object-oriented systems, and groupings found in semantic data models [9, 18]. The most common one is specialization, which is supported by virtually all object-based database systems, notably, SDM [9], TAXIS [13], and IFO [1]. <p> Formally, this can be stated as follows: (C.p?=true) ^ (domain (C.p)=D) =) (8e 2 C) ((p (e as C)=`unknown') _ (p (e as C) 2 D) _ (p (e as C) D)). Most object-oriented and semantic data models <ref> [9, 10] </ref> associate some or all of the following characteristics with each class property: 1. required versus optional; 2. identifying versus non-identifying; and 3. single-valued versus multi-valued. As indicated in Section 3.1, we associate these characteristics with each property in the class declaration (See Example 3). <p> In other words, the definition of set operations on complex objects is similar to the problem of multiple inheritance. However, the literature assumes that the inheritance of properties takes place between classes that stand in an is-a relationship to one another <ref> [10] </ref>. We will demonstrate that this is not necessarily the case for classes derived by set operations. As will be illustrated in Section 6, the latter assumption appears to be the reason for the limited use of set operations found in the literature.
Reference: [11] <author> S. N. Khoshafian and G. P. Copeland, </author> <title> "Object Identity," </title> <booktitle> in Proc. OOPSLA'86, ACM, </booktitle> <month> Sep. </month> <year> 1986, </year> <pages> pp. 406-416. </pages>
Reference-contexts: Values are taken directly from some predefined base domains, such as, integers or strings. Abstract entities (or entities) correspond to abstract concepts or objects from the application domain, for example, a Person or a Hotel-Reservation record. An entity is modeled in the database by an identity and a state <ref> [11, 18] </ref>. The identity is a globally unique identifier of an entity that is independent of the state of the entity. Each time a new entity is created, an identity is assigned to it by the system.
Reference: [12] <author> D. Maier, J. Stein, A. Otis, and A. Purdy, </author> <title> "Development of an Object-Oriented DBMS," </title> <booktitle> in Proc. </booktitle> <address> OOPSLA'86, </address> <month> Sep. </month> <year> 1986, </year> <pages> pp. 472-482. </pages>
Reference-contexts: 1 INTRODUCTION Current trends in database research have developed numerous object-based data models that attempt to capture real-world information in a natural and non-ambiguous manner. Examples are object-oriented <ref> [8, 12] </ref> and semantic database systems [1, 10]. Common to these object-based data models is the concept of a class. Most models support a rich class definition facility based on restricting inherited properties, that is, special forms of the specialization and generalization abstractions [2, 10, 13, 9]. <p> Our analysis in Section 6 also explains why the symmetric difference operation has not been utilized as a class derivation mechanism in SDM: it never results in an is-a relationship, as shown in Figure 14. Most other existing data models <ref> [12] </ref> do not even consider the use of set operations. SAM fl by Su [21] consists of seven different abstractions, referred to as association types, that construct new classes out of existing ones. One abstraction, called generalization, creates a more general concept type out of existing ones. <p> Due to the generality of our approach, results of this paper apply to any object-based data model that supports the class construct. We have ignored behavioral abstractions (methods) associated with classes of object-oriented systems <ref> [8, 12] </ref>, since their inclusion would not aid the understanding of the presented concepts. We believe, however, that much of this work can be extended to also include the behavioral aspect of classes. ACKNOWLEDGEMENTS The authors would like to thank the editor-in-chief Prof. B. Wah, the subject editor Prof. T.
Reference: [13] <author> J. Mylopoulos, P. A. Bernstein, and H.K.T. Wong. </author> <title> "A Language Facility for Designing Database-Intensive Applications," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 5, issue 2, </volume> <pages> pp. 185-207, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: Examples are object-oriented [8, 12] and semantic database systems [1, 10]. Common to these object-based data models is the concept of a class. Most models support a rich class definition facility based on restricting inherited properties, that is, special forms of the specialization and generalization abstractions <ref> [2, 10, 13, 9] </ref>. On the other hand, the potential of set operations has largely been unexplored. The reason for this is that, while set operations on simple elements (values) are well understood, precise semantics for set operations on complex objects have not yet been developed. <p> On the other hand, we do not address, in this paper, class definition abstractions, such as, specialization, selection and Cartesian aggregation, since these are common to most data models and have been dealt with in depth in the literature <ref> [18, 16, 2, 10, 13, 9] </ref>. Instead, we focus on the set operations, which have for the most part been ignored by data model designers. Existing data models can augment their set of abstractions by our proposed set operations. <p> is used in this paper in 5 its most generic form | it may, for example, stand for a row in a relation table [7], an entity (or a relationship) in the entity-relationship model [5], an entity in a semantic data model [10], or an object in an object-oriented model <ref> [13] </ref>. We distinguish between values and abstract entities. Values are taken directly from some predefined base domains, such as, integers or strings. Abstract entities (or entities) correspond to abstract concepts or objects from the application domain, for example, a Person or a Hotel-Reservation record. <p> The most common one is specialization, which is supported by virtually all object-based database systems, notably, SDM [9], TAXIS <ref> [13] </ref>, and IFO [1]. <p> The Cartesian aggregation abstraction is equally supported by most database systems <ref> [20, 9, 13, 1] </ref>. It is an abstraction that allows a relationship between several entities to be viewed as a single aggregate (complex entity). Each element in the Cartesian class is taken from the cross product of existing classes and a new unique identity is associated with it. <p> Definition 5 C1 is-a C2 () C1 C2 and C1 C2. Informally, we say that C1 is-a C2 if (1) every member of C1 is an member of C2 (the subset relationship) and (2) every property defined for C2 is also defined for C1 (the subtype relationship) <ref> [13] </ref>. 13 4 SET OPERATIONS IN OBJECT-BASED DATA MODELS 4.1 Motivation This section discusses how the set operations can be applied in object-based data models to create new classes 1 . <p> Some data models, in particular, most object-oriented models, define only type-oriented class operations. We use the term type-oriented to mean that these operations are applied to the type description of the original class and that the resulting membership of the new class is derived automatically. Others <ref> [13, 1] </ref> also include some limited repertoire of set operations on classes. Most of these approaches however are ad-hoc, as discussed below. Hammer and McLeod [9] were among the first to propose different types of derivation mechanisms for subclasses. <p> This ambiguity arises from the fact that SAM fl is value- rather than object-based. No set operations other than this union are considered in SAM fl . Property characteristics, such as mandatory, single- or multi-valued, and others, have been proposed by several researchers <ref> [9, 13] </ref>. Property inheritance has been studied extensively in the context of type-oriented class creation operations, such as specialization and generalization. However, to our knowledge no one discusses the effect of class derivations by set operations on property characteristics.
Reference: [14] <author> E. A. Rundensteiner and L. Bic, </author> <title> "Set Operations in Semantic Data Models," </title> <institution> Information and Computer Science Department, Uni. of California, Irvine, </institution> <type> Tech. Rep. </type> <pages> #89-22, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: Related research and conclusions are given in Sections 7 and 8, respectively. Our earlier work on this problem has been published in [15], and an in depth discussion of the underlying data modeling concepts can be found in <ref> [14, 18] </ref>. 2 SET THEORY Set operations in conventional set theory are well understood. They assume values as members and do not address typing and related problems.
Reference: [15] <author> E. A. Rundensteiner and L. Bic, </author> <title> "Set Operations in a Data Model Supporting Complex Objects," </title> <booktitle> in Int. Conf. on Extending Data Base Technology (EDBT), </booktitle> <month> March </month> <year> 1990. </year> <note> (also published in Lecture Notes in Computer Science, vol. 416, pp. 286 - 300, </note> <year> 1990.) </year>
Reference-contexts: Related research and conclusions are given in Sections 7 and 8, respectively. Our earlier work on this problem has been published in <ref> [15] </ref>, and an in depth discussion of the underlying data modeling concepts can be found in [14, 18]. 2 SET THEORY Set operations in conventional set theory are well understood. They assume values as members and do not address typing and related problems.
Reference: [16] <author> E. A. Rundensteiner, L. Bic, J. Gilbert, and M. Yin, </author> <title> "A Semantic Integrity Framework: Set Restrictions for Semantic Groupings," </title> <booktitle> in IEEE Int. Conf. on Data Engineering (ICDE-7), </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: On the other hand, we do not address, in this paper, class definition abstractions, such as, specialization, selection and Cartesian aggregation, since these are common to most data models and have been dealt with in depth in the literature <ref> [18, 16, 2, 10, 13, 9] </ref>. Instead, we focus on the set operations, which have for the most part been ignored by data model designers. Existing data models can augment their set of abstractions by our proposed set operations. <p> Below we introduce terminology for the data modeling concepts common to object-based data models needed for subsequent discussions. This discussion is based on the work presented in <ref> [16] </ref> and [18]. 3.1 Entities and Classes In semantic data modeling, the notions of set, class, and type are not always clearly distinguished. In this paper we take the following position. Entities in our data model represent a concrete or abstract concept in the application world. <p> Entities can either be simple or complex. Simple entities are taken directly from a base domain of the application, while complex entities are built from other entities of the data base using data base abstractions, such as, Cartesian aggregation or a power set grouping <ref> [16] </ref>. An example of a simple entity is an abstract object in the real world, for instance, a person or a ship. An example of a complex entity is a hotel-reservation record, which corresponds to the relationship between a person, a hotel room and a date.
Reference: [17] <author> E. A. Rundensteiner and L. Bic, </author> <title> "Evaluating Aggregates in Possibilistic Relational Databases," </title> <journal> in Data and Knowledge Engineering Journal, </journal> <note> to appear in 1992. 38 </note>
Reference-contexts: It can however still be used by users who wish to maintain their own unique values as entity references. For consistency 10 reasons, a user should only designate a property to be identifying if it is also characterized as required <ref> [17] </ref>. A property is defined to be either single- or multi-valued independent of the class for which it is initially introduced. This characteristic is not redefinable, i.e, it cannot be changed by classes that inherit this property.
Reference: [18] <author> E. A. Rundensteiner, L. Bic, J. Gilbert, and M. Yin, </author> <title> "Set-Restricted Semantic Group--ings," </title> <journal> in IEEE Trans. on Data and Knowledge Engineering, </journal> <note> to appear in 1992. </note>
Reference-contexts: On the other hand, we do not address, in this paper, class definition abstractions, such as, specialization, selection and Cartesian aggregation, since these are common to most data models and have been dealt with in depth in the literature <ref> [18, 16, 2, 10, 13, 9] </ref>. Instead, we focus on the set operations, which have for the most part been ignored by data model designers. Existing data models can augment their set of abstractions by our proposed set operations. <p> Related research and conclusions are given in Sections 7 and 8, respectively. Our earlier work on this problem has been published in [15], and an in depth discussion of the underlying data modeling concepts can be found in <ref> [14, 18] </ref>. 2 SET THEORY Set operations in conventional set theory are well understood. They assume values as members and do not address typing and related problems. <p> Below we introduce terminology for the data modeling concepts common to object-based data models needed for subsequent discussions. This discussion is based on the work presented in [16] and <ref> [18] </ref>. 3.1 Entities and Classes In semantic data modeling, the notions of set, class, and type are not always clearly distinguished. In this paper we take the following position. Entities in our data model represent a concrete or abstract concept in the application world. <p> Values are taken directly from some predefined base domains, such as, integers or strings. Abstract entities (or entities) correspond to abstract concepts or objects from the application domain, for example, a Person or a Hotel-Reservation record. An entity is modeled in the database by an identity and a state <ref> [11, 18] </ref>. The identity is a globally unique identifier of an entity that is independent of the state of the entity. Each time a new entity is created, an identity is assigned to it by the system. <p> This membership predicate, also called the member-of function, is based on the equality relation defined above, i.e., it utilizes the identity-based equality relation for abstract classes and the value-based equality relation for value-based classes <ref> [18] </ref>. The predicate that an entity &lt;e&gt; is a member-of a class C, denoted by &lt;e&gt; 2 C, evaluates to true if &lt;e&gt; belongs to class C and to false otherwise. An entity may take on values for different sets of properties when viewed as a member of different classes. <p> C2 is said to have inherited the property p from the class C1. 3.2 Class Derivation Operations There are numerous types of class creation abstractions for abstract classes, such as specialization/generalization abstractions [10], the aggregation abstraction, also called "part-of" relationship in object-oriented systems, and groupings found in semantic data models <ref> [9, 18] </ref>. The most common one is specialization, which is supported by virtually all object-based database systems, notably, SDM [9], TAXIS [13], and IFO [1]. <p> This stands in contrast to conventional set theory where elements of the sub- and superset always look alike <ref> [18] </ref>. The subtype/supertype relationship is concerned with the type description of classes and consequently with the state of all elements that participate in them. The subtype relationship between two classes is based on their type descriptions. <p> Consequently, a well-defined set-theoretic operation on a class must specify the effect on both the type description and the resulting membership of that class. The membership of a class derived by a set operation is based on the object identities of the involved entities <ref> [18] </ref>. The resulting type description, however, is largely based on the properties defined for the original classes. The latter has no correspondence in conventional set theory, where a set is completely described by enumerating its members. <p> If both properties are not inherited then some of the entities in the derived class may be indistinguishable to the user but the system is still able to distinguish them based on their object identities. This is so because object identities are globally unique identifiers maintained by the system <ref> [18] </ref>. The example shows that if a database user intends to use some property as unique identifier (i.e., property is characterized as being identifying) then he or she has to declare it as a required property.
Reference: [19] <author> D. W. Shipman, </author> <title> "The Functional Data Model and the Data Language DAPLEX," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 6, issue 1, </volume> <pages> pp. 140-173, </pages> <month> Mar. </month> <year> 1981. </year>
Reference: [20] <author> J. M. Smith, and D.C.P. Smith. </author> <title> "Database Abstractions: Aggregation and Generalization," </title> <journal> in ACM Trans. on Database Systems, </journal> <volume> vol. 2, no. 2, </volume> <pages> pp. 105-133, </pages> <month> June </month> <year> 1977. </year>
Reference-contexts: The Cartesian aggregation abstraction is equally supported by most database systems <ref> [20, 9, 13, 1] </ref>. It is an abstraction that allows a relationship between several entities to be viewed as a single aggregate (complex entity). Each element in the Cartesian class is taken from the cross product of existing classes and a new unique identity is associated with it.
Reference: [21] <author> Y. W. S. Su, </author> <booktitle> "Modeling Integrated Manufacturing Data with SAM fl ," in IEEE Computer, </booktitle> <volume> vol. 19, issue 1, </volume> <pages> pp. 34-49, </pages> <year> 1986. </year> <month> 39 </month>
Reference-contexts: The latter has no correspondence in conventional set theory, where a set is completely described by enumerating its members. Consequently, there is nothing in set theory to dictate the treatment of the type description of the resulting class. Other data models <ref> [9, 21] </ref> have made certain (arbitrary) choices in this regard without giving a convincing argument to support their choice. <p> Most other existing data models [12] do not even consider the use of set operations. SAM fl by Su <ref> [21] </ref> consists of seven different abstractions, referred to as association types, that construct new classes out of existing ones. One abstraction, called generalization, creates a more general concept type out of existing ones.
References-found: 21

