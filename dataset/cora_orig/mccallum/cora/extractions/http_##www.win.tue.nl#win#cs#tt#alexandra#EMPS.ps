URL: http://www.win.tue.nl/win/cs/tt/alexandra/EMPS.ps
Refering-URL: http://www.win.tue.nl/win/cs/tt/alexandra/documents.html
Root-URL: http://www.win.tue.nl
Title: An introduction to the generation of the EMPS.  
Author: Alexandra Janssen Raemaekers 
Date: August 15, 1995  
Address: Eindhoven, The Netherlands  
Affiliation: Department of Mathematics and Computer Science Eindhoven University of Technology  
Abstract-found: 0
Intro-found: 1
Reference: [Jan94] <author> A.H.T. Janssen. </author> <title> Documentation for EMPS development. </title> <institution> Eindhoven University of Technology, Computing Science, </institution> <year> 1994. </year>
Reference-contexts: The target is a Motorola 68030 microprocessor, for execution of the code. Two host operating systems are available for EMPS development: * Sun operating system * Solaris operating system The operating systems are used with different compiler versions and kernel files. See <ref> [Jan94] </ref>. The differences in using the operating systems will be described. The generation of the EMPS executable has to be performed in two steps: * an init file has to be created * an emps file has to be created These files can be downloaded. <p> The generation of the EMPS executable has to be performed in two steps: * an init file has to be created * an emps file has to be created These files can be downloaded. This separation in two objects is made for memory management reasons. See <ref> [Jan94] </ref>. The creation of the files will be explained in chapter 4. Chapter 5 describes downloading of the kernel while the generation of applications is explained in chapter 6. <p> The emps.0 file is loaded by the init.0 file. See the next chapter for more details about running the kernel. A difference is made between init.0 and emps.0 for memory management reasons. See <ref> [Jan94] </ref>. 4.1 Linking the initialization file A Makefile is available for the creation of an init.0 file. Object code is be passed through the linker to create an executable, called init.0. The following examples show the link files used for the Solaris operating system. <p> Every object file will start at a 16 byte aligned address. This is a requirement for memory management. The LongTableDescriptors and LongPageDescriptors have to start at a 16 byte aligned address. See <ref> [Jan94] </ref>. If a section should start at a new memorypage, aligning is used to assure this. * -S tells the linker to use Motorola S-record format. * -Y tells the linker to not print the copyright message when linking. <p> See the emps.map file. After this line the filenames of the files that are linked are listed following: +/home/svin11a/oasys/68040pco/libansi, +/home/svin11a/oasys/68040pco/libind ./empsend `./empsend' links the assembler file at the end of all kernel code. The file contains the labels that are identified with the end points of the sections. See <ref> [Jan94] </ref>. Like the init.map file, an emps.map file will be produced by the linker when an emps.0 file is generated to build the kernel. <p> See <ref> [Jan94] </ref>. The link files create files called init.0 and emps.0, which can be transferred to the EMPS system to be run there. <p> The files init.0 and emps.0 are used to download the EMPS software to the hardware. 9 Chapter 5 Downloading the kernel The EMPS hardware contains an EPROM, which is programmed with the basic instructions to load the kernel software into memory. See <ref> [Jan94] </ref>. Init.0 and emps.0 can be loaded with an EPROM instruction but the files first have to be converted to another format. <p> The fileserver is needed to download the executables from ethernet to the EMPS hardware via PhyLan. See <ref> [Jan94] </ref>. The following illustration displays the connected systems: 10 The Sun system contains a directory with the fileserver executable. If the PC is started, a user can login from the PC to the sun account. <p> For more information about using the kernel. See <ref> [Jan94] </ref>. 5.4 Download to a second processor The kernel software can be downloaded to a second processor. In a complete multi processor system every processor runs the same kernel software. The download can be executed with the command "BROADCAST MPS:EMPS.Q/Q". <p> All kernelfunctions that can be accessed from an application program are called through routines defined in the file stdemps.s. An application program cannot call a kernel function directly, because application programs run in usermode and the kernel runs in supervisor mode. See <ref> [Jan94] </ref>. 6.2 Download of a test application The application file should NOT be converted from .0 to .Q format. The properties of the executable have to be set to read/write read/write for "Owner", "Group" and "World". The fileserver requires that the file is located at /fti or a subdirectory. <p> To execute the kernel software the following actions have to be taken: * starting the fileserver by typing "FS386". * the terminal connected to the system controller as described in <ref> [Jan94] </ref> is used for typing "QLOAD MPS:INIT.Q" followed by * "GO E000" on the command line. * if a second processor is wanted to be used "BROADCAST MPS:EMPS.Q/Q" has to be typed on the command line of the terminal connected to the system controller either.
Reference: [Mar94] <author> Rob Marissen. </author> <title> The real-time emps kernel: Memory management and suitability for epep/phydas. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, Technical Physics, </institution> <month> September </month> <year> 1994. </year>
Reference: [Sof92a] <author> Green Hills Software. </author> <title> Green Hills Compiler Familiy Development Guide. </title> <booktitle> Oasys, Green Hills Software, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: host which compiler is needed: * /home/svin04e/oasys/gcx68 (for the Sun operating system) * /home/svin11a/oasys/cc68 (for the Solaris operating system) The Makefile uses the commands "ccp" and "a30" for compilation of the kernel. 3.1 ccp ccp is the file specifying the compiler command for the Oasys C/C++ compiler as specified in <ref> [Sof92a] </ref> and [Sof94a]. The flags, specified in this file, -c -ansi -asm=-W:32 -X6 -X23 -X133 -Z93 -X98 $* have various functions: * -c tells the compiler not to produce executable files, only object files. * -ansi places the compiler in ANSI mode. <p> To compile assembler files no file is used for the definition of options. 5 3.2 a30 The makefiles also specify the call to a30. a30 specifies the assembler command for the Oasys compiler as specified in <ref> [Sof92a] </ref> and [Sof94a]. /home/svin04e/oasys/a30 -C:68030/68881 /home/svin11a/oasys/a30 -C:68030/68881 The option -C:68030/68881 is necessary for assembler files which use commands that are specific for the 68030 processor. After the C- and assembler sources are compiled and object files are available, the object files can be linked.
Reference: [Sof92b] <author> Green Hills Software. </author> <title> The Motorola 68000/10/20/30/40+68332/68881/851 Cross Assembler/Linker Development System User Manual. </title> <booktitle> Oasys, Green Hills Software, </booktitle> <month> January </month> <year> 1992. </year>
Reference-contexts: This mode is 90% compliant with the ANSI X3J11 standard. * -asm=-W:32 is an assembler switch and can be found in <ref> [Sof92b] </ref>. This switch specifies the upper bound of the bus width to be 32. * -X23 tells the compiler always to adjust the stack as described in [Sof92b] after every function call or when 50 bytes have accumulated. * -X133 tells the compiler to use the non-filling declaration "DS.B" rather than <p> This mode is 90% compliant with the ANSI X3J11 standard. * -asm=-W:32 is an assembler switch and can be found in <ref> [Sof92b] </ref>. This switch specifies the upper bound of the bus width to be 32. * -X23 tells the compiler always to adjust the stack as described in [Sof92b] after every function call or when 50 bytes have accumulated. * -X133 tells the compiler to use the non-filling declaration "DS.B" rather than "DCB.B". <p> The files init and inits are the object files, generated by the compiler, that are linked. The meaning of the linker options is: * -O9:XE000 tells the linker to put the origin of section 9 at location XE000. In <ref> [Sof92b] </ref> and [Sof94b] sections are explained. 7 * -Y1:14:16-P14:16 tells the linker to put the origin of section 14 at a new memory page. Every object file will start at a 16 byte aligned address. This is a requirement for memory management.
Reference: [Sof94a] <author> Green Hills Software. </author> <note> Oasys 68K Cross Assembler/Linker System version 5.15. Oasys, Green Hills Software, </note> <month> May </month> <year> 1994. </year>
Reference-contexts: compiler is needed: * /home/svin04e/oasys/gcx68 (for the Sun operating system) * /home/svin11a/oasys/cc68 (for the Solaris operating system) The Makefile uses the commands "ccp" and "a30" for compilation of the kernel. 3.1 ccp ccp is the file specifying the compiler command for the Oasys C/C++ compiler as specified in [Sof92a] and <ref> [Sof94a] </ref>. The flags, specified in this file, -c -ansi -asm=-W:32 -X6 -X23 -X133 -Z93 -X98 $* have various functions: * -c tells the compiler not to produce executable files, only object files. * -ansi places the compiler in ANSI mode. <p> To compile assembler files no file is used for the definition of options. 5 3.2 a30 The makefiles also specify the call to a30. a30 specifies the assembler command for the Oasys compiler as specified in [Sof92a] and <ref> [Sof94a] </ref>. /home/svin04e/oasys/a30 -C:68030/68881 /home/svin11a/oasys/a30 -C:68030/68881 The option -C:68030/68881 is necessary for assembler files which use commands that are specific for the 68030 processor. After the C- and assembler sources are compiled and object files are available, the object files can be linked.
Reference: [Sof94b] <author> Green Hills Software. </author> <title> Oasys/Green Hills 68K Cross Development Guide version 1.8.7. </title> <booktitle> Oasys, Green Hills Software, </booktitle> <year> 1994. </year>
Reference-contexts: The files for the Sun operating system are comparable. Initemps is the file in which it is specified to use the file init.lnk during the link procedure. The batchfiles are used to link the necessary files. With the statement: /home/svin11a/oasys/l68 @init.lnk the Oasys linker as specified in <ref> [Sof94b] </ref> is invoked, using the init.lnk file to supply its arguments: init.0-O9:XE000-Y1:14:16-P14:16-S-Y,init.map,= init, inits, +/home/svin11a/oasys/68040pco/libansi, +/home/svin11a/oasys/68040pco/libind Init.0 is the output (executable) file and init.map will be produced by the linker, containing information about the executable file. <p> The files init and inits are the object files, generated by the compiler, that are linked. The meaning of the linker options is: * -O9:XE000 tells the linker to put the origin of section 9 at location XE000. In [Sof92b] and <ref> [Sof94b] </ref> sections are explained. 7 * -Y1:14:16-P14:16 tells the linker to put the origin of section 14 at a new memory page. Every object file will start at a 16 byte aligned address. This is a requirement for memory management. <p> Linkemps is the file in which it is specified to use the file emps.lnk during the link procedure. The batchfile is used to link the necessary files. With the statement: /home/svin11a/oasys/l68 @emps.lnk the Oasys linker as specified in <ref> [Sof94b] </ref> is invoked, using the emps.lnk file to supply its arguments. The contents of emps.lnk are: /emps.0-O9:X80010000-Y1:13:8-P13:8-Y1:14:16-P14:16-S-Y-G,/emps.map,= 8 -O9:X80010000 tells the linker to put the origin of section 9 at location X80010000. This address is the starting point of the kernel software. See the emps.map file.
Reference: [vD93] <author> G.J.W. v. Dijk. </author> <title> The Design of the EMPS Multiprocessor Executive for Distributed Computing. </title> <type> PhD thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1993. </year> <month> 17 </month>
References-found: 7

