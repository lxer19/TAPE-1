URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1146/CS-TR-93-1146.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1146/
Root-URL: http://www.cs.wisc.edu
Email: fbrown,carey,mirong@cs.wisc.edu  
Title: Managing Memory to Meet Multiclass Workload Response Time Goals  
Author: Kurt P. Brown Michael J. Carey Miron Livny 
Address: Wisconsin, Madison  
Affiliation: Computer Sciences Department University of  
Abstract: In this paper we propose and evaluate an approach to DBMS memory management that addresses multiclass workloads with per-class response time goals. It operates by monitoring per-class database reference frequencies as well as the state of the system relative to the goals of each class; the information that it gathers is used to help existing memory allocation and page replacement mechanisms avoid making decisions that may jeopardize performance goals.
Abstract-found: 1
Intro-found: 1
Reference: [Boral 90] <author> H. Boral et al, </author> <title> "Prototyping Bubba: A Highly Parallel Database System," </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 2(1), </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: Real database reference behavior is a combination of both. The Frequency Based Replacement policy (FBR) [Robinson 90] and the LRU-K algorithm [O'Neil 93] are examples of this approach, tracking frequency statistics on a page-by-page basis. The Bubba parallel database prototype <ref> [Boral 90] </ref> can be placed in this category as well, but unlike FBR and LRU-K, which are both dynamic, Bubba statically determined a boundary between that portion of memory which is managed by frequency of reference (the file cache), and that which is managed by recency (normal global LRU).
Reference: [Brown 92] <author> K. Brown, M. Carey, D. Dewitt, M. Mehta, J. Naughton, </author> <title> "Resource Allocation and Scheduling for Mixed Database Workloads," </title> <type> Computer Sciences Technical Report #1095, </type> <institution> Department of Computer Sciences, University of Wisconsin, Madison, </institution> <note> July 1992 (available via anonymous ftp from ftp.cs.wisc.edu). </note>
Reference-contexts: However, providing adequate performance for each class in a multiclass DBMS workload is still an open problem <ref> [Pirahesh 90, Brown 92, DeWitt 92] </ref>. A multiclass workload is characterized by distinct classes of work that may have widely varying resource demands, each with its own performance objective. A DBMS that is unaware of these performance objectives may penalize one class or another in an unpredictable way.
Reference: [Cheng 84] <author> J. Cheng et al, </author> <title> "IBM Database 2 Performance: Design, Implementation, and Tuning," </title> <journal> IBM Systems Journal, </journal> <volume> 23(2), </volume> <year> 1984. </year>
Reference-contexts: Section 6 discusses some additional issues and possible extensions to fragment fencing, and our conclusions and future plans are summarized in Section 7. 2 Related Work With respect to database memory management, the only relevant work which specifically addresses multiclass work-loads are commercial systems, such as IBM's DB2 <ref> [Cheng 84, Teng 84] </ref>, which provides basic mechanisms to partition its buffer pool and to place different portions of the database in specific partitions. <p> For example, index pages could be considered more valuable than data pages, as in the Domain Separation algorithm [Reiter 76]; randomly accessed pages could be treated as more valuable than sequentially accessed pages, as in the DB2 Buffer Manager <ref> [Cheng 84, Teng 84] </ref>; or the inner relation of a nested loop join could be preferred over the outer, as in the Starburst Buffer Manager [Haas 90].
Reference: [Chou 85] <author> H. Chou and D. DeWitt, </author> <title> "An Evaluation of Buffer Management Strategies for Relational Database Systems," </title> <booktitle> Proc. 11th Int'l VLDB Conf., </booktitle> <address> Stockholm, Sweden, </address> <month> Aug. </month> <year> 1985. </year>
Reference-contexts: By statically or dynamically combining frequency and recency into the replacement policy, these approaches each provide better performance than pure LRU while avoiding any requirements for "hint-passing". Examples of the local query analysis approach are Hot Set [Sacco 86], DBMIN <ref> [Chou 85] </ref>, Marginal Gains [Ng 91], Predictive Load Control [Falou 91], and Threshold [Yu 93]. All of these algorithms use information in the query plan to determine the optimal amount of memory to allocate on a local basis (to queries, subqueries, or query/file combinations).
Reference: [Coffman 73] <author> E. Coffman and P. Denning, </author> <title> Operating Systems Theory, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs NJ, </address> <year> 1973. </year>
Reference-contexts: This is logical because recency of reference is a good basis for replacement when database references exhibit temporal locality, while frequency of reference is best when references are skewed, but uncorrelated <ref> [Coffman 73] </ref>. Real database reference behavior is a combination of both. The Frequency Based Replacement policy (FBR) [Robinson 90] and the LRU-K algorithm [O'Neil 93] are examples of this approach, tracking frequency statistics on a page-by-page basis.
Reference: [Copeland 88] <author> G. Copeland, W. Alexander, E. Boughter, T. Keller, </author> <title> "Data Placement in Bubba," </title> <booktitle> Proc. ACM SIGMOD '88 Conf., </booktitle> <address> Chicago, IL, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: This boundary is determined off-line by a "5 Minute Rule" type of analysis [Gray 87]. The Bubba scheme tracks frequency information on a per-file basis and uses a size-normalized frequency metric called temperature <ref> [Copeland 88] </ref> (references per second per megabyte). Entire files are statically placed in the file cache in decreasing order of temperature. By statically or dynamically combining frequency and recency into the replacement policy, these approaches each provide better performance than pure LRU while avoiding any requirements for "hint-passing". <p> On the other hand, some fragments are much larger than others; therefore, for a given frequency of reference, small files should be favored over larger ones, as their per-page reference frequencies will be higher. The notion of temperature <ref> [Copeland 88] </ref> combines both of these factors into a single number of references per second per megabyte. We extend the definition of temperature to record access frequencies for a specific class instead of for the system as a whole, and we call the resulting metric class temperature.
Reference: [Cornell 89] <author> D. Cornell and P. Yu, </author> <title> "Integration of Buffer Management and Query Optimization in a Relational Database Environment," </title> <booktitle> Proc. 15th Int'l VLDB Conf., </booktitle> <address> Amsterdam, The Netherlands, </address> <month> Aug, </month> <year> 1989. </year>
Reference: [DeWitt 84] <author> D. DeWitt et al, </author> <title> "Implementation Techniques for Main Memory Database Systems," </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <address> Boston, MA, </address> <month> June </month> <year> 1984. </year> <month> 25 </month>
Reference-contexts: Since we want to ignore any possible effect of query optimization decisions, the inner and outer join files are always of the same size here. We use the hybrid hash join algorithm <ref> [DeWitt 84] </ref> because it is generally accepted as a good ad hoc join method.
Reference: [DeWitt 90] <author> D. DeWitt et al, </author> <title> "The Gamma Database Machine Project," </title> <journal> IEEE Trans. on Knowledge and Data Engineering, </journal> <volume> 2(1), </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: The software parameters are based on instruction counts taken from the Gamma parallel database prototype <ref> [DeWitt 90] </ref>.
Reference: [DeWitt 92] <author> D. DeWitt and J. Gray, </author> <title> "Parallel Database Systems: The Future of High Performance Database Processing," </title> <journal> CACM, </journal> <volume> 35(6), </volume> <month> June, </month> <year> 1992. </year>
Reference-contexts: However, providing adequate performance for each class in a multiclass DBMS workload is still an open problem <ref> [Pirahesh 90, Brown 92, DeWitt 92] </ref>. A multiclass workload is characterized by distinct classes of work that may have widely varying resource demands, each with its own performance objective. A DBMS that is unaware of these performance objectives may penalize one class or another in an unpredictable way.
Reference: [Falou 91] <author> C. Faloutsos, R. Ng, T. Sellis, </author> <title> "Predictive Load Control for Flexible Buffer Allocation," </title> <booktitle> Proc. 17th Int'l VLDB Conf., </booktitle> <address> Barcelona, Spain, </address> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: By statically or dynamically combining frequency and recency into the replacement policy, these approaches each provide better performance than pure LRU while avoiding any requirements for "hint-passing". Examples of the local query analysis approach are Hot Set [Sacco 86], DBMIN [Chou 85], Marginal Gains [Ng 91], Predictive Load Control <ref> [Falou 91] </ref>, and Threshold [Yu 93]. All of these algorithms use information in the query plan to determine the optimal amount of memory to allocate on a local basis (to queries, subqueries, or query/file combinations).
Reference: [Graefe 89] <author> G. Graefe and K. Ward, </author> <title> "Dynamic Query Evaluation Plans," </title> <booktitle> Proc. ACM SIGMOD '89 Conf., </booktitle> <address> Portland, OR, </address> <month> May </month> <year> 1989. </year>
Reference: [Gray 87] <author> J. Gray and F. Putzolu, </author> <title> "The 5 Minute Rule for Trading Memory for Disk Access and the 10 Byte Rule for Trading Memory for CPU Time," </title> <booktitle> Proc. ACM SIGMOD '87 Conf., </booktitle> <address> San Francisco, CA, </address> <year> 1987. </year>
Reference-contexts: This boundary is determined off-line by a "5 Minute Rule" type of analysis <ref> [Gray 87] </ref>. The Bubba scheme tracks frequency information on a per-file basis and uses a size-normalized frequency metric called temperature [Copeland 88] (references per second per megabyte). Entire files are statically placed in the file cache in decreasing order of temperature.
Reference: [Gray 91] <author> J. Gray ed., </author> <title> The Benchmark Handbook, </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo CA, </address> <year> 1991. </year>
Reference-contexts: For the purposes of this paper, we define a workload as any pair of the following classes: transactions, queries, or batch. Transactions The transaction workload class models page reference behaviors typical of transactions in the TPC-A benchmark <ref> [Gray 91] </ref>. They perform nonclustered, single record index selects on 4 files: big, medium, small, and tiny (see Table 1 above). Since all of our indices are 2 levels deep, this adds up to a total of 12 random page references per transaction.
Reference: [Haas 90] <author> L. Haas et al, </author> <title> "Starburst Mid-Flight: As the Dust Clears," </title> <journal> IEEE Trans. on Knowledge and Data Eng., </journal> <volume> 2(1), </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: the Domain Separation algorithm [Reiter 76]; randomly accessed pages could be treated as more valuable than sequentially accessed pages, as in the DB2 Buffer Manager [Cheng 84, Teng 84]; or the inner relation of a nested loop join could be preferred over the outer, as in the Starburst Buffer Manager <ref> [Haas 90] </ref>. Information on the value of a page is then combined with information on recency of reference and used as input to guide page replacement decisions. These approaches are attractive because they address the major limitations of pure global LRU with a minimum amount of work.
Reference: [Haas 91] <author> P. Haas, A. Swami, </author> <title> "Sequential Sampling Procedures for Query Size Estimation," </title> <booktitle> Proc. ACM SIGMOD '92 Conf., </booktitle> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: The time in this state is set to a number of transaction completions that provides statistical significance. We currently set it to 50 in all cases, but this length could also be dynamically determined for each class using sampling techniques <ref> [Haas 91] </ref>.
Reference: [Hong 91] <author> W. Hong and M. Stonebraker, </author> <title> "Optimization of Parallel Query Execution Plans in XPRS," </title> <booktitle> Proc. 1st Int'l PDIS Conf., </booktitle> <address> Miami, FL, </address> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: The information collected by the algorithm on hit rates and percent residencies for individual fragments could also be a useful input to recently proposed techniques for run-time selection of query plans <ref> [Hong 91, Ioann 92] </ref>. Finally, we would like to exploit the capabilities of memory-adaptive query processing techniques, e.g., preemptible hash join and sorting methods [Pang 93a, Pang 93b].
Reference: [Ioann 92] <author> Y. Ioannidis, R. Ng, K. Shim, T. Sellis, </author> <title> "Parametric Query Optimization," </title> <booktitle> Proc. 18th Int'l VLDB Conf., </booktitle> <address> Vancouver, B.C., </address> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: The information collected by the algorithm on hit rates and percent residencies for individual fragments could also be a useful input to recently proposed techniques for run-time selection of query plans <ref> [Hong 91, Ioann 92] </ref>. Finally, we would like to exploit the capabilities of memory-adaptive query processing techniques, e.g., preemptible hash join and sorting methods [Pang 93a, Pang 93b].
Reference: [O'Neil 93] <author> E. O'Neil, P. O'Neil, G. Weikum, </author> <title> "The LRU-K Page Replacement Algorithm For Database Disk Buffering," </title> <booktitle> to appear Proc. ACM SIGMOD '93 Conf., </booktitle> <address> Washington D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Real database reference behavior is a combination of both. The Frequency Based Replacement policy (FBR) [Robinson 90] and the LRU-K algorithm <ref> [O'Neil 93] </ref> are examples of this approach, tracking frequency statistics on a page-by-page basis.
Reference: [Mehta 93] <author> M. Mehta and D. DeWitt, </author> <title> "Dynamic Memory Allocation for Multiple-Query Workloads," </title> <booktitle> to appear Proc. 19 Int'l VLDB Conf., </booktitle> <address> Dublin, Ireland, </address> <month> Aug </month> <year> 1993. </year>
Reference-contexts: We also plan on coupling fragment fencing with algorithms that handle load control and working storage allocation among competing queries in order to explore the performance of multiple concurrent queries competing with transactions and batch classes <ref> [Mehta 93] </ref>, and we plan on integrating fragment fencing with goal-oriented CPU and disk scheduling mechanisms as well.
Reference: [Ng 91] <author> R. Ng, C. Faloutsos, T. Sellis, </author> <title> "Flexible Buffer Allocation Based on Marginal Gains," </title> <booktitle> Proc. ACM SIGMOD '91 Conf., </booktitle> <address> Denver, CO, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: By statically or dynamically combining frequency and recency into the replacement policy, these approaches each provide better performance than pure LRU while avoiding any requirements for "hint-passing". Examples of the local query analysis approach are Hot Set [Sacco 86], DBMIN [Chou 85], Marginal Gains <ref> [Ng 91] </ref>, Predictive Load Control [Falou 91], and Threshold [Yu 93]. All of these algorithms use information in the query plan to determine the optimal amount of memory to allocate on a local basis (to queries, subqueries, or query/file combinations).
Reference: [Pang 93a] <author> H. Pang, M. Carey, M. Livny, </author> <title> "Partially Preemptible Hash Joins," </title> <booktitle> to appear Proc. ACM SIGMOD '93 Conf., </booktitle> <address> Washington D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: While it is unlikely that fragment fencing can ever be prevented from making mistakes, there are certainly ways to limit the penalty of doing so. One promising possibility is the exploitation of memory-adaptive query processing algorithms, e.g. memory adaptive hash join and sorting methods <ref> [Zeller 90, Pang 93a, Pang 93b] </ref>. <p> Finally, we would like to exploit the capabilities of memory-adaptive query processing techniques, e.g., preemptible hash join and sorting methods <ref> [Pang 93a, Pang 93b] </ref>. Acknowledgements The authors would like to thank Manish Mehta, Mike Franklin, Hwee-Hwa Pang, and Joe Hellerstein for many helpful discussions and comments on previous versions of this paper.
Reference: [Pang 93b] <author> H. Pang, M. Carey, M. Livny, </author> <title> "Memory Adaptive External Sorts and Sort-Merge Joins," </title> <booktitle> to appear Proc. 19 Int'l VLDB Conf., </booktitle> <address> Dublin, Ireland, </address> <month> Aug </month> <year> 1993. </year>
Reference-contexts: While it is unlikely that fragment fencing can ever be prevented from making mistakes, there are certainly ways to limit the penalty of doing so. One promising possibility is the exploitation of memory-adaptive query processing algorithms, e.g. memory adaptive hash join and sorting methods <ref> [Zeller 90, Pang 93a, Pang 93b] </ref>. <p> Finally, we would like to exploit the capabilities of memory-adaptive query processing techniques, e.g., preemptible hash join and sorting methods <ref> [Pang 93a, Pang 93b] </ref>. Acknowledgements The authors would like to thank Manish Mehta, Mike Franklin, Hwee-Hwa Pang, and Joe Hellerstein for many helpful discussions and comments on previous versions of this paper.
Reference: [Pirahesh 90] <author> H. Pirahesh, et al, </author> <title> "Parallelism in Relational Database Systems: </title> <booktitle> Architectural Issues and Design Approaches," IEEE 2nd Int'l Symposium on Databases in Parallel and Distributed Systems, </booktitle> <address> Dublin, Ireland, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: However, providing adequate performance for each class in a multiclass DBMS workload is still an open problem <ref> [Pirahesh 90, Brown 92, DeWitt 92] </ref>. A multiclass workload is characterized by distinct classes of work that may have widely varying resource demands, each with its own performance objective. A DBMS that is unaware of these performance objectives may penalize one class or another in an unpredictable way.
Reference: [Reiter 76] <author> A. Reiter, </author> <title> "A Study of Buffer Management Policies For Data Management Systems," </title> <type> MRC Technical Summary Report #1619, </type> <institution> Mathematics Research Center, University of Wisconsin, Madison, </institution> <month> March </month> <year> 1976. </year>
Reference-contexts: For example, index pages could be considered more valuable than data pages, as in the Domain Separation algorithm <ref> [Reiter 76] </ref>; randomly accessed pages could be treated as more valuable than sequentially accessed pages, as in the DB2 Buffer Manager [Cheng 84, Teng 84]; or the inner relation of a nested loop join could be preferred over the outer, as in the Starburst Buffer Manager [Haas 90].
Reference: [Robinson 90] <author> J. Robinson and M. Devarakonda, </author> <title> "Data Cache Management Using Frequency-Based Replacement," </title> <booktitle> Proc. SIGMETRICS '90 Conf., </booktitle> <address> Boulder, CO, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: This is logical because recency of reference is a good basis for replacement when database references exhibit temporal locality, while frequency of reference is best when references are skewed, but uncorrelated [Coffman 73]. Real database reference behavior is a combination of both. The Frequency Based Replacement policy (FBR) <ref> [Robinson 90] </ref> and the LRU-K algorithm [O'Neil 93] are examples of this approach, tracking frequency statistics on a page-by-page basis.
Reference: [Sacco 86] <author> G. Sacco and M. Schkolnick, </author> <title> "Buffer Management in Relational Database Systems," </title> <journal> ACM TODS, </journal> <volume> 11(4), </volume> <month> December </month> <year> 1986. </year>
Reference-contexts: By statically or dynamically combining frequency and recency into the replacement policy, these approaches each provide better performance than pure LRU while avoiding any requirements for "hint-passing". Examples of the local query analysis approach are Hot Set <ref> [Sacco 86] </ref>, DBMIN [Chou 85], Marginal Gains [Ng 91], Predictive Load Control [Falou 91], and Threshold [Yu 93]. All of these algorithms use information in the query plan to determine the optimal amount of memory to allocate on a local basis (to queries, subqueries, or query/file combinations).
Reference: [Teng 84] <author> J. Teng and R. Gumaer, </author> <title> "Managing IBM Database 2 Buffers to Maximize Performance," </title> <journal> IBM Systems Journal, </journal> <volume> 23(2), </volume> <year> 1984. </year>
Reference-contexts: Section 6 discusses some additional issues and possible extensions to fragment fencing, and our conclusions and future plans are summarized in Section 7. 2 Related Work With respect to database memory management, the only relevant work which specifically addresses multiclass work-loads are commercial systems, such as IBM's DB2 <ref> [Cheng 84, Teng 84] </ref>, which provides basic mechanisms to partition its buffer pool and to place different portions of the database in specific partitions. <p> For example, index pages could be considered more valuable than data pages, as in the Domain Separation algorithm [Reiter 76]; randomly accessed pages could be treated as more valuable than sequentially accessed pages, as in the DB2 Buffer Manager <ref> [Cheng 84, Teng 84] </ref>; or the inner relation of a nested loop join could be preferred over the outer, as in the Starburst Buffer Manager [Haas 90].
Reference: [Yu 93] <author> P. Yu and D. Cornell, </author> <title> "Buffer Management Based on Return on Consumption in a Multi-Query Environment," </title> <journal> VLDB Journal, </journal> <volume> 2(1), </volume> <month> Jan </month> <year> 1993. </year>
Reference-contexts: Examples of the local query analysis approach are Hot Set [Sacco 86], DBMIN [Chou 85], Marginal Gains [Ng 91], Predictive Load Control [Falou 91], and Threshold <ref> [Yu 93] </ref>. All of these algorithms use information in the query plan to determine the optimal amount of memory to allocate on a local basis (to queries, subqueries, or query/file combinations).
Reference: [Zeller 90] <author> H. Zeller, J. Gray, </author> <title> "An Adaptive Hash Join Algorithm for Multiuser Environments" Proc. </title> <booktitle> 16th Int'l VLDB Conf., </booktitle> <address> Melbourne, Australia, </address> <month> Aug. </month> <year> 1990. </year> <month> 26 </month>
Reference-contexts: While it is unlikely that fragment fencing can ever be prevented from making mistakes, there are certainly ways to limit the penalty of doing so. One promising possibility is the exploitation of memory-adaptive query processing algorithms, e.g. memory adaptive hash join and sorting methods <ref> [Zeller 90, Pang 93a, Pang 93b] </ref>.
References-found: 30

