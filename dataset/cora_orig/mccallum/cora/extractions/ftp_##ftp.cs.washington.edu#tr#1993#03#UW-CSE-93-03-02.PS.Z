URL: ftp://ftp.cs.washington.edu/tr/1993/03/UW-CSE-93-03-02.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Title: A Performance Study of a New Grid Protocol and General Grid Structures for Replicated Data  
Author: Akhil Kumar Michael Rabinovich and Rakesh K. Sinha 
Keyword: Key words: Replicated Databases Distributed systems Quorums- Grid Protocol Availability Load sharing Algorithms.  
Address: Ithaca, NY 14853  Seattle, WA 98195  
Affiliation: Graduate School of Management Cornell University  Department of Computer Science and Engineering University of Washington  
Abstract: Recently there has been considerable interest in the study of replica-control protocols which are based on organizing several copies of an object into logical structures, such as rectangular grids. In addition to high availability, another objective in exploiting such structures is to improve the degree of load sharing in a system. In this paper, we extend the scope of grid structures to general grids, which allow holes in various positions of a rectangular structure and are useful to consider because they often produce avail-abilities that are higher than solid grids, where every position must be occupied by a node. We propose an improvement to the existing grid protocol, prove its optimality, and also compare its performance with the existing protocol in terms of availability. In addition, we also offer new insights into the performance of the grids, from both availability and load sharing points of view. Noting that the write availability of square grids tends to 0 for a large number of nodes N, we conduct an asymptotic analysis, and derive the conditions that must be imposed on the dimensions of the grid for the availability to increase asymptotically with increasing N. Algorithms for designing grids to maximize availability independently, and also in conjunction with a load sharing constraint are given. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Agrawal and A. El Abbadi. </author> <title> An efficient solution to the distributed mutual exclusion problem. </title> <booktitle> In Proc. of Symp. on Principles of Distributed Computing, </booktitle> <pages> pp. 193-200, </pages> <year> 1989. </year>
Reference-contexts: Therefore, the total number of grids examined by the algorithm is O (N 2 ). As a side result, the algorithm also gives the maximum availability for all grids with the number of nodes in the range <ref> [1; N ] </ref>. values of N up to 1000. The write availability is shown along the Y-axis as ( log 10 (1 WA)) and can be interpreted as the number of 9's after the decimal place.
Reference: [2] <author> S. Y. Cheung, M. H. Ammar, and M. Ahamad. </author> <title> The Grid protocol: a high performance scheme for maintaining replicated data. </title> <booktitle> In Proc. of the IEEE 6th Int. Conf. on Data Engineering, </booktitle> <pages> pp. 438-445, </pages> <year> 1990. </year>
Reference-contexts: Provably the best (with regards to quorum size) fully distributed solutions have a quorum size of ( p N ), where N is the number of replicas of the data item. Although this bound is achieved in Maekawa's [11], Grid <ref> [2, 3] </ref>, and Hierarchical Grid (h-grid) [7] protocols, each of these protocols has some drawback. Maekawa's protocol has the lowest constant among the three, but it gives poor availability. <p> This means that one does not dominate the other. Another protocol described in [12] which combines Maekawa's protocol and majority voting in a novel manner has a quorum size of p N log N and also produces asymptotically high availability. In the grid protocol <ref> [2, 3] </ref>, N copies are logically organized into a rectangular m fi n grid. <p> Such grids with holes will be referred to as hollow as opposed to solid grids which have copies in all positions. Consequently, this paper discusses several issues pertaining to both solid and hollow grids. First, we modify the grid protocol described in <ref> [2, 3] </ref> slightly to improve its availability properties, and also derive the expressions for read and write availability in the case of a general grid. <p> In previous works, only solid rectangular grids were considered <ref> [2, 3] </ref>. However, as we will illustrate in the section 4, hollow grids may provide better availability than solid ones. The computations in Section 3.1 are carried for the existing grid protocol. Then, Section 3.2 describes the modified grid protocol, and recomputes the read availability for that protocol. <p> (1 q m 2 ) n 2 : : : (1 q m k ) n k : (2) In the existing grid protocol, there are two tradeoffs: first, between read and write availabilities; and second, between read quorum size (which is a measure of read performance) and write availability <ref> [2] </ref>. Write availability is better in a grid where the number of rows is much smaller than the number of columns, which means the grid should contain large number of short columns. <p> Hence, read performance in such grids suffers. Also, having too many short columns makes it harder to collect one operational node from every column and hurts read availability. These tradeoffs make designing a grid especially hard. 3.2 Availability in Modified Protocol We modified the grid protocol of <ref> [2, 3] </ref> slightly by redefining a read quorum in the following manner. A read quorum can be formed in one of two ways: as a set consisting of one node from each column of the grid or a set of all nodes from any single column. <p> The details are omitted here because the focus of the present work is on grids exclusively. 4 The existing vs. modified grid protocols In this section, we give a comparison between the existing (old) grid protocol <ref> [2, 3] </ref> and our modified (new) protocol described above. For purposes of this comparison, we consider grids of the same dimensions that were considered in [3], and recompute the read availability for different values of p. Note that the write availability remains the same in both protocols.
Reference: [3] <author> S. Y. Cheung, M. H. Ammar, and M. Ahamad. </author> <title> The Grid protocol: a high performance scheme for maintaining replicated data. </title> <journal> IEEE Trans. on Knowledge and Data Eng., </journal> <pages> 6(4) pp. 582-592, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: Provably the best (with regards to quorum size) fully distributed solutions have a quorum size of ( p N ), where N is the number of replicas of the data item. Although this bound is achieved in Maekawa's [11], Grid <ref> [2, 3] </ref>, and Hierarchical Grid (h-grid) [7] protocols, each of these protocols has some drawback. Maekawa's protocol has the lowest constant among the three, but it gives poor availability. <p> This means that one does not dominate the other. Another protocol described in [12] which combines Maekawa's protocol and majority voting in a novel manner has a quorum size of p N log N and also produces asymptotically high availability. In the grid protocol <ref> [2, 3] </ref>, N copies are logically organized into a rectangular m fi n grid. <p> Such grids with holes will be referred to as hollow as opposed to solid grids which have copies in all positions. Consequently, this paper discusses several issues pertaining to both solid and hollow grids. First, we modify the grid protocol described in <ref> [2, 3] </ref> slightly to improve its availability properties, and also derive the expressions for read and write availability in the case of a general grid. <p> In previous works, only solid rectangular grids were considered <ref> [2, 3] </ref>. However, as we will illustrate in the section 4, hollow grids may provide better availability than solid ones. The computations in Section 3.1 are carried for the existing grid protocol. Then, Section 3.2 describes the modified grid protocol, and recomputes the read availability for that protocol. <p> Hence, read performance in such grids suffers. Also, having too many short columns makes it harder to collect one operational node from every column and hurts read availability. These tradeoffs make designing a grid especially hard. 3.2 Availability in Modified Protocol We modified the grid protocol of <ref> [2, 3] </ref> slightly by redefining a read quorum in the following manner. A read quorum can be formed in one of two ways: as a set consisting of one node from each column of the grid or a set of all nodes from any single column. <p> The details are omitted here because the focus of the present work is on grids exclusively. 4 The existing vs. modified grid protocols In this section, we give a comparison between the existing (old) grid protocol <ref> [2, 3] </ref> and our modified (new) protocol described above. For purposes of this comparison, we consider grids of the same dimensions that were considered in [3], and recompute the read availability for different values of p. Note that the write availability remains the same in both protocols. <p> For purposes of this comparison, we consider grids of the same dimensions that were considered in <ref> [3] </ref>, and recompute the read availability for different values of p. Note that the write availability remains the same in both protocols. The results are shown in Tables 2, 3 and 4, which correspond to p=0.9, 0.95 and 0.99, respectively. As in [3], for ease of understanding, all availabilities in the <p> of the same dimensions that were considered in <ref> [3] </ref>, and recompute the read availability for different values of p. Note that the write availability remains the same in both protocols. The results are shown in Tables 2, 3 and 4, which correspond to p=0.9, 0.95 and 0.99, respectively. As in [3], for ease of understanding, all availabilities in the tables are expressed as unavailabilities (defined as 1 availability).
Reference: [4] <author> D.K. Gifford. </author> <title> Weighted voting for replicated data. </title> <booktitle> In Proc. of the Seventh ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 150-159, </pages> <month> December </month> <year> 1979. </year>
Reference: [5] <author> H. Garcia-Molina and D. Barbara. </author> <title> How to assign votes in a distributed system. </title> <journal> J. of the ACM, </journal> <volume> 32(4), </volume> <pages> pp. 841-860, </pages> <month> October </month> <year> 1985. </year>
Reference-contexts: 1 : : : (1 p m k ) n k Next, we show that the set of quorums defined by the modified grid are optimal, i.e., they are not dominated by any other set. 7 3.3 Optimality of Modified Grid Protocol The notion of non-dominance was first introduced in <ref> [5] </ref> to formalize the intuition behind optimal quorums. Let R and W be sets of read and write quorums.
Reference: [6] <author> A. Kumar and K. Malik. </author> <title> Generalizing and optimizing hierarchical quorum consensus algorithms for replicated data. </title> <institution> Graduate School of Management, Cornell University, </institution> <type> Tech. Report, </type> <month> October </month> <year> 1991. </year>
Reference-contexts: there is no such set of nodes that intersects with every read quorum and is not a superset of some write quorum, and the second condition for non-dominance is met. 2 The described refinement of grid protocol can also be extended easily to the h-grid and hierarchical quorum consensus-2 (HQC2) <ref> [6, 7] </ref> protocols. The details are omitted here because the focus of the present work is on grids exclusively. 4 The existing vs. modified grid protocols In this section, we give a comparison between the existing (old) grid protocol [2, 3] and our modified (new) protocol described above.
Reference: [7] <author> A. Kumar and S. Y. Cheung. </author> <title> A p N high availability hierarchical grid algorithm for replicated data. </title> <journal> Information Processing Letters 40(1991), </journal> <pages> pp. 311-316. </pages>
Reference-contexts: Provably the best (with regards to quorum size) fully distributed solutions have a quorum size of ( p N ), where N is the number of replicas of the data item. Although this bound is achieved in Maekawa's [11], Grid [2, 3], and Hierarchical Grid (h-grid) <ref> [7] </ref> protocols, each of these protocols has some drawback. Maekawa's protocol has the lowest constant among the three, but it gives poor availability. <p> In fact, for many values of N (e.g., when N is prime), no sensible fully distributed solution exists anyway. The second issue we address is that of availability. We examine it from both the theoretical and empirical points of view. As shown in <ref> [7] </ref>, the write availability for square grids goes asymptotically to 0; however, the question we pose is: If rectangular, non-square grids are permitted, then, would the asymptotic availability go to 1? What must the dimensions of the grid be for this to happen? We find that for this to happen, the <p> there is no such set of nodes that intersects with every read quorum and is not a superset of some write quorum, and the second condition for non-dominance is met. 2 The described refinement of grid protocol can also be extended easily to the h-grid and hierarchical quorum consensus-2 (HQC2) <ref> [6, 7] </ref> protocols. The details are omitted here because the focus of the present work is on grids exclusively. 4 The existing vs. modified grid protocols In this section, we give a comparison between the existing (old) grid protocol [2, 3] and our modified (new) protocol described above. <p> It was shown in <ref> [7] </ref> that in square grids, write availability goes to 0 when N goes to infinity. Here, in Section 6.1, we study the asympotic write availability for non-square grids.
Reference: [8] <author> A. Kumar, M. Rabinovich and R. Sinha. </author> <title> A Performance Study of a New Grid Protocol and General Grid Structures for Replicated Data, </title> <type> Tech. Report 93-03-02, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> March </month> <year> 1993. </year>
Reference: [9] <author> M. L. Neilsen and M. Mizuno. </author> <title> Decentralized consensus protocols. </title> <booktitle> In Proc. of the 10th Int. Phoenix Conf. on Comp. and Comm., </booktitle> <pages> pp. 257-262, </pages> <year> 1991. </year> <month> 23 </month>
Reference-contexts: Quorums are also used in distributed systems for many other purposes such as mutual exclusion ([1, 11]), commit protocols ([13]) and distributed consensus <ref> [9] </ref>. In addition to higher availability, a second advantage of replication is greater load sharing. If there is only one copy of an object, and all operations go to the node where it is stored, the node may get overloaded and the response may deteriorate.
Reference: [10] <author> M. L. Neilsen. </author> <title> Quorum structures in distributed systems, </title> <type> PhD thesis, </type> <institution> Kansas State University, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: It is straightforward to show that any read quorum defined this way intersects with any write quorum and hence the quorum intersection rules are satisfied. This protocol will be referred to as the modified grid protocol. (This modification was also suggested independently by Neilsen <ref> [10] </ref>. ) This seemingly minor improvement to the protocol is significant because it increases the read availability without changing the write availability.
Reference: [11] <author> M. Maekawa. </author> <title> A p N algorithm for mutual exclusion in decentralized systems. </title> <journal> ACM Trans. on Comp. Systems. </journal> <volume> 3(2), </volume> <month> May </month> <year> 1985. </year>
Reference-contexts: Provably the best (with regards to quorum size) fully distributed solutions have a quorum size of ( p N ), where N is the number of replicas of the data item. Although this bound is achieved in Maekawa's <ref> [11] </ref>, Grid [2, 3], and Hierarchical Grid (h-grid) [7] protocols, each of these protocols has some drawback. Maekawa's protocol has the lowest constant among the three, but it gives poor availability.
Reference: [12] <author> S. Rangarajan, S. Setia and S. Tripathi. </author> <title> Fault tolerant algorithms for replicated data management. </title> <booktitle> In Proceedings of 8th International Conference on Data Engineering, IEEE, </booktitle> <year> 1992. </year>
Reference-contexts: However, the higher write availability in the h-grid protocol is obtained at the expense of read availability. This means that one does not dominate the other. Another protocol described in <ref> [12] </ref> which combines Maekawa's protocol and majority voting in a novel manner has a quorum size of p N log N and also produces asymptotically high availability. In the grid protocol [2, 3], N copies are logically organized into a rectangular m fi n grid.
Reference: [13] <author> D. Skeen. </author> <title> A quorum-based commit protocol. </title> <booktitle> In Proc. of the 6th Berkeley Workshop on Distr. Data Managementt and Comp. Networks, </booktitle> <pages> pp. 69-80, </pages> <year> 1982. </year>
Reference: [14] <author> Thomas, R. H., </author> <title> "A majority consensus approach to concurrency control," </title> <journal> ACM Trans. on Database Systems 4(2), </journal> <pages> pp. 180-209, </pages> <month> June </month> <year> 1979. </year> <month> 24 </month>
Reference-contexts: If there is only one copy of an object, and all operations go to the node where it is stored, the node may get overloaded and the response may deteriorate. By maintaining multiple copies, the load can be distributed uniformly across the various copies. In majority voting <ref> [14] </ref>, the load sharing is not very good because half the copies must be involved in a quorum. Hence, the maximum improvement in load sharing is limited to a factor of 2, and does not change as the number of copies increases.
References-found: 14

