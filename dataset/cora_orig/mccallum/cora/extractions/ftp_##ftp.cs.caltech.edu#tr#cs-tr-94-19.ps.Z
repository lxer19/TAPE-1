URL: ftp://ftp.cs.caltech.edu/tr/cs-tr-94-19.ps.Z
Refering-URL: ftp://ftp.cs.caltech.edu/tr/INDEX.html
Root-URL: http://www.cs.caltech.edu
Title: Synchronizing Processes  
Author: H. Peter Hofstee 
Degree: Thesis by  In Partial Fulfillment of the Requirements for the Degree of Doctor of Philosophy  
Date: 1995 (Submitted 30 September 1994)  
Address: Pasadena, California  
Affiliation: California Institute of Technology  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Agerholm. </author> <title> Mechanizing program verification in HOL. </title> <type> Master's thesis, </type> <institution> Aarhus University, </institution> <year> 1992. </year>
Reference-contexts: C.1 g ff (x ) " ff (y) = ; ^ S 0 ffi xy 6= ; ^ S 0 ffi yx 6= ; ^ T 0 6= ; ) f BIG step g (S kT ) ffi rxy 6= ; ^ (S kT ) ffi ryx 6= ; Proof <ref> [1] </ref> ff (x ) " ff (y) = ; ^ S 0 ffi x 6= ; ^ T 0 ffi y 6= ; ) f BIG step g (S kT ) ffi rxy 6= ; ^ (S kT ) ffi ryx 6= ; Proof [4] ff (x ) " ff (y)
Reference: [2] <author> R.-J.R. Back and J. von Wright. </author> <title> A lattice-theoretical basis for a specification language. </title> <editor> In J.L.A. van de Snepscheut, editor, </editor> <booktitle> Proceedings of the first Mathematics of Program Construction Conference, </booktitle> <pages> pages 139-156, </pages> <year> 1989. </year> <note> LNCS 375. </note>
Reference: [3] <author> R.-J.R. Back and J. von Wright. </author> <title> Duality in specification languages: A lattice-theoretical approach. </title> <journal> Acta Informatica, </journal> <volume> 27 </volume> <pages> 583-625, </pages> <year> 1990. </year>
Reference: [4] <author> R.-J.R. Back and J. von Wright. </author> <title> Combining, angels, demons, and miracles in program specifications. </title> <journal> Theoretical Computer Science, </journal> <volume> 100(2), </volume> <year> 1992. </year>
Reference-contexts: ) ffi ryx 6= ; Proof [1] ff (x ) " ff (y) = ; ^ S 0 ffi x 6= ; ^ T 0 ffi y 6= ; ) f BIG step g (S kT ) ffi rxy 6= ; ^ (S kT ) ffi ryx 6= ; Proof <ref> [4] </ref> ff (x ) " ff (y) = ; ^ x = a:b ^ S 0 ffi a 6= ; ^ S 0 ffi y 6= ; ^ T 0 ffi b 6= ; ) f Theorem C.1,y 6= a g ff (x ) " ff (y) = ; ^ x
Reference: [5] <author> R.J.R. </author> <title> Back. On the Correctness of Refinement Steps in Program Development. </title> <type> Ph.D. thesis, </type> <institution> University of Helsinki, </institution> <year> 1978. </year> <note> Report A-1978-4. </note>
Reference-contexts: ff (y) = ; ^ x = a:b ^ S 0 ffi ay 6= ; ^ S 0 ffi ya 6= ; ^ T 0 ffi b 6= ; ) f BIG step g (S kT ) ffi rxy 6= ; ^ (S kT ) ffi ryx 6= ; Proof <ref> [5] </ref> ff (x ) " ff (y) = ; ^ x = a:b ^ S 0 ffi a 6= ; ^ T 0 ffi b 6= ; ^ T 0 ffi y 6= ; ) f Theorem C.1 g ff (x ) " ff (y) = ; ^ x = a:b
Reference: [6] <author> J.A. Bergstra and J.W. Klop. </author> <title> Process algebra for synchronous communication. </title> <journal> Information and Control, </journal> <volume> 60(1-3):109-137, </volume> <year> 1984. </year>
Reference: [7] <author> G. Birkhoff. </author> <title> Lattice Theory. </title> <journal> Colloquium Publications, </journal> <volume> Volume 25. </volume> <publisher> American Mathematical Society, </publisher> <year> 1967. </year>
Reference: [8] <author> S.D. Brookes, C.A.R. Hoare, and A.W. Roscoe. </author> <title> A theory of communicating sequential processes. </title> <journal> J. ACM, </journal> <volume> 31(3) </volume> <pages> 560-599, </pages> <year> 1984. </year>
Reference-contexts: ff (y) = ; ^ x = a:b ^ S 0 ffi a 6= ; ^ T 0 ffi by 6= ; ^ T 0 ffi yb 6= ; ) f BIG step g (S kT ) ffi rxy 6= ; ^ (S kT ) ffi ryx 6= ; Proof <ref> [8] </ref> 116 ^ T 0 ffi b 6= ; ^ T 0 ffi d 6= ; ) f Theorem C.1,twice g ff (x ) " ff (y) = ; ^ x = a:b ^ y = c:d ^ S 0 ffi ac 6= ; ^ S 0 ffi ca 6= ;
Reference: [9] <author> S.M. Burns and A.J. Martin. </author> <title> Syntax-directed translation of concurrent programs into self-timed circuits. </title> <booktitle> In Proceedings of the Fifth MIT Conference on Advanced Research in VLSI, </booktitle> <pages> pages 35-40. </pages> <publisher> MIT press, </publisher> <year> 1988. </year> <month> 161 </month>
Reference: [10] <author> K.M. Chandy. </author> <title> Concurrent program archetypes. 1994. Keynote address, </title> <booktitle> Scalable Parallel Libraries Conference. </booktitle>
Reference: [11] <author> K.M. Chandy and J. Misra. </author> <title> Parallel Program Design, a foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference: [12] <author> E.W. Dijkstra. </author> <title> A Discipline of Programming. </title> <publisher> Prentice-Hall, </publisher> <year> 1976. </year>
Reference: [13] <author> E.W. Dijkstra. </author> <title> On the unification of three calculi. </title> <booktitle> In Marktoberdorf Proceedings, </booktitle> <year> 1992. </year>
Reference: [14] <author> E.W. Dijkstra and C.S. Scholten. </author> <title> Predicate Calculus and Program Semantics. </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [15] <author> E.W. Dijkstra and A.J.M. van Gasteren. </author> <title> A simple fixpoint argument without the restriction to continuity. </title> <journal> Acta Informatica, </journal> <volume> 23 </volume> <pages> 1-7, </pages> <year> 1986. </year>
Reference: [16] <author> R.M. Dijkstra. </author> <title> Relational calculus and relational program semantics, 1992. </title> <type> master's thesis, </type> <institution> Univ. of Aachen. </institution>
Reference: [17] <author> R.M. Dijkstra. </author> <title> DUALITY: a simple formalism for the analysis of UNITY. </title> <type> Technical report, </type> <institution> Department of Mathematics and Computing Science, University of Groningen, </institution> <year> 1994. </year> <month> CS-R9404. </month>
Reference: [18] <author> D.L. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-Independent Circuits. </title> <type> Ph.D. thesis, </type> <institution> Computer Science Department, Carnegie Mellon University, </institution> <year> 1988. </year> <month> CMU-CS-88-119. </month>
Reference: [19] <author> P. Gardiner and C. Morgan. </author> <title> Data Refinement of Predicate Transformers. </title> <journal> Theoretical Computer Science, </journal> <volume> 87(1), </volume> <year> 1991. </year>
Reference-contexts: It seems likely that work in data refinement <ref> [22, 19] </ref> will prove relevant here. Finally, even though we have written some simple programs to aid in the calculations, an effort should be made to produce software to aid the programmer in the construction of correct concurrent programs.
Reference: [20] <author> M. Gordon. </author> <title> HOL: A Machine Oriented Formulation of Higher-Order Logic. </title> <type> Technical Report 68, </type> <institution> Computer Laboratory, University of Cam-bridge, </institution> <address> England, </address> <year> 1985. </year> <note> revised version. </note>
Reference-contexts: Part of such an effort might be a formalization of the model presented here in a mechanized proof system such as Larch [21] or HOL <ref> [20] </ref>. 77 Appendix A Proofs for Section 3.2 (3:5) (X Y ) ) ((t + X ) + Y = t + Y ) Proof, by induction on the length of t Base case, t = *, (* + X ) + Y = f Definition + g * = f
Reference: [21] <author> J. V. Guttag and J. J. Horning. </author> <title> Larch: Languages and Tools for Formal Specification. </title> <publisher> Springer-Verlag, </publisher> <address> New York, New York, </address> <year> 1993. </year>
Reference-contexts: Part of such an effort might be a formalization of the model presented here in a mechanized proof system such as Larch <ref> [21] </ref> or HOL [20]. 77 Appendix A Proofs for Section 3.2 (3:5) (X Y ) ) ((t + X ) + Y = t + Y ) Proof, by induction on the length of t Base case, t = *, (* + X ) + Y = f Definition + g
Reference: [22] <author> C.A.R. Hoare. </author> <title> Proof of correctness and data representations. </title> <journal> Acta Informatica, </journal> <volume> 1 </volume> <pages> 271-281, </pages> <year> 1972. </year> <month> 162 </month>
Reference-contexts: It seems likely that work in data refinement <ref> [22, 19] </ref> will prove relevant here. Finally, even though we have written some simple programs to aid in the calculations, an effort should be made to produce software to aid the programmer in the construction of correct concurrent programs.
Reference: [23] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> Series in Computer Science (C.A.R. Hoare, ed.). Prentice-Hall International, </booktitle> <year> 1985. </year>
Reference: [24] <author> H.P. Hofstee. </author> <title> Distributing a class of sequential programs. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 22 </volume> <pages> 45-65, </pages> <year> 1994. </year>
Reference: [25] <author> L. Jategaonkar and A.R. Meyer. </author> <title> Self-synchronization of concurrent processes (preliminary report). </title> <booktitle> 1993. Proceedings 1993 LICS conference. </booktitle>
Reference: [26] <author> A. </author> <title> Lines. CS185a project specification. 1993. </title> <type> private communication. </type>
Reference: [27] <author> INMOS Ltd. </author> <title> occam TM Programming Manual. </title> <publisher> Prentice Hall International, </publisher> <year> 1984. </year>
Reference: [28] <author> J.J. Lukkien. </author> <title> An operational semantics for the guarded command language. </title> <booktitle> In R.S.Bird, C.C. </booktitle> <publisher> Morgan, </publisher> <editor> and J.C.P.Woodcock, editors, </editor> <booktitle> Mathematics of Program Construction, number 669 in Lecture Notes in Computer Science, </booktitle> <pages> pages 233-249. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference: [29] <author> A.J. Martin. </author> <title> An axiomatic definition of synchronization primitives. </title> <journal> Acta Informatica, </journal> <volume> 16 </volume> <pages> 219-235, </pages> <year> 1981. </year>
Reference: [30] <author> A.J. Martin. </author> <title> Distributed mutual exclusion on a ring of processes. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 5 </volume> <pages> 265-276, </pages> <year> 1985. </year>
Reference: [31] <author> A.J. Martin. </author> <title> The probe: an addition to communication primitives. </title> <journal> Information Processing Letters, </journal> <volume> 20 </volume> <pages> 125-130, </pages> <year> 1985. </year> <note> and (21)107. </note>
Reference: [32] <author> A.J. Martin. </author> <title> Compiling communicating processes into delay-insensitive VLSI circuits. </title> <journal> Distributed Computing, </journal> <volume> 1(4), </volume> <year> 1986. </year>
Reference: [33] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> Series in Computer Science (C.A.R. Hoare, ed.). Prentice-Hall International, </booktitle> <year> 1989. </year>
Reference: [34] <author> C. Morgan. </author> <title> The specification statement. </title> <journal> ACM TOPLAS, </journal> <volume> 10(3) </volume> <pages> 403-419, </pages> <year> 1988. </year>
Reference: [35] <author> C. Morgan. </author> <title> Programming from Specifications. </title> <booktitle> Series in Computer Science (C.A.R. Hoare, ed.). Prentice-Hall International, </booktitle> <year> 1990. </year> <month> 163 </month>
Reference: [36] <author> G. Nelson. </author> <title> A Generalization of Dijkstra's Calculus. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 11(4) </volume> <pages> 517-561, </pages> <year> 1989. </year>
Reference: [37] <institution> C.A. Petri. Communikation mit Automaten. Schriften des Institutes fur Instrumentelle Mathematik, Bonn, </institution> <year> 1962. </year> <note> In German. </note>
Reference: [38] <author> C.L. Seitz. </author> <title> System timing. In C.A. Mead and L.A. Conway, editors, Introduction to VLSI Systems, chapter 7. </title> <publisher> Addison Wesley, </publisher> <year> 1980. </year>
Reference: [39] <editor> J. Staunstrup and M.R. Greenstreet. Synchronized transitions. In J. Staunstrup, editor, </editor> <booktitle> Formal Methods for VLSI Design, </booktitle> <pages> pages 71-128. </pages> <address> North-Holland/Elsevier, </address> <year> 1990. </year>
Reference: [40] <author> J.T. Udding. </author> <title> Classification and Composition of Delay-Insensitive Circuits. </title> <type> Ph.D. thesis, </type> <institution> Technische Hogeschool Eindhoven, </institution> <year> 1984. </year>
Reference: [41] <author> C.H. van Berkel, J. Kessels, M. Rocken, R.W.J.J. Saeijs, and F. Schalij. </author> <title> The VLSI-programming language tangram and its translation into handshake circuits. </title> <booktitle> In Proceedings of the 1991 European Design Automation Conference, </booktitle> <pages> pages 384-389. </pages> <publisher> IEEE Computer Society, Los Alamitos, </publisher> <address> Cal-ifornia, </address> <year> 1991. </year>
Reference: [42] <author> A. van de Mortel-Fronczak. </author> <title> Models of Trace Theory Systems. </title> <type> Ph.D. thesis, </type> <institution> Technische Universiteit Eindhoven, </institution> <year> 1993. </year>
Reference: [43] <author> J.L.A. van de Snepscheut. </author> <title> Trace Theory and VLSI Design, </title> <booktitle> volume 200 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference: [44] <author> J.L.A. van de Snepscheut. </author> <month> JAN 180. </month> <title> On Lattice Theory and Program Semantics. </title> <type> Technical Report CS 93-19, </type> <institution> California Institute of Technology, </institution> <year> 1993. </year>
Reference: [45] <author> J.L.A. van de Snepscheut. </author> <month> JAN 187. </month> <title> Mechanized Support for Stepwise Refinement. </title> <type> Technical Report CS-TR-94-01, </type> <institution> California Institute of Technology, </institution> <year> 1994. </year>
Reference: [46] <author> J.L.A. van de Snepscheut and J.T. Udding. </author> <title> An alternative implementation of communication primitives. </title> <journal> Information Processing Letters, </journal> <volume> 23 </volume> <pages> 231-238, </pages> <year> 1986. </year> <month> 164 </month>
Reference: [47] <author> R. van Glabbeek and U. Goltz. </author> <title> Equivalence notions for concurrent systems and refinement of actions. </title> <publisher> LNCS, </publisher> <pages> 379 237-248, </pages> <year> 1989. </year> <booktitle> Proceedings of MFCS '89. </booktitle>
Reference: [48] <author> J. von Wright. </author> <title> A Lattice-theoretical Basis for Program Refinement. </title> <type> Ph.D. thesis, </type> <institution> Abo Akademi, </institution> <year> 1990. </year>
References-found: 48

