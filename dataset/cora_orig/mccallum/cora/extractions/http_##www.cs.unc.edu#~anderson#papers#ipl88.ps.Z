URL: http://www.cs.unc.edu/~anderson/papers/ipl88.ps.Z
Refering-URL: http://www.cs.unc.edu/~anderson/papers.html
Root-URL: http://www.cs.unc.edu
Title: Atomic Semantics of Nonatomic Programs  
Author: James H. Anderson Mohamed G. Gouda 
Date: December 1987  
Address: Austin, Texas 78712  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: We argue that it is possible, and sometimes useful, to reason about nonatomic programs within the conventional atomic model of concur rency.
Abstract-found: 1
Intro-found: 1
Reference: [Ho 72] <author> Hoare, </author> <title> C.A.R., "Towards a Theory of Parallel Programming," Operating Systems Techniques, </title> <editor> Hoare and Perott (Eds.), </editor> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1972. </year>
Reference-contexts: 1 Introduction Most of the proof methods that have been proposed for reasoning about concurrent programs are developed within the atomic model of concurrency <ref> [Ho 72, LS 84, MP 84, OG 76] </ref>. This model is based on the assumption that no two operations in a concurrent program are executed at the same time. Hence, the resulting proof theory may seem inadequate for reasoning about programs in which operations of different processes may overlap.
Reference: [La 77] <author> Lamport, L., </author> <title> "Proving the Correctness of Multiprocess Programs," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-3, No. 2, </volume> <pages> pp. 125-143, </pages> <month> March </month> <year> 1977. </year>
Reference-contexts: occur while the variable is being written, then the read operation returns the most recently written value. 2 For convenience, each nonatomic write operation is distinguished by the spe-cial syntax: write v to x where x is a global variable, and v is the value being written. 3 Semantics In <ref> [La 77] </ref>, Lamport defines the semantics of the nonatomic write operation "write v to x" by the atomic program fragment hx := ?i; where "h" and "i" enclose the atomic operations, and "?" is an indeterminate value.
Reference: [La 83] <author> Lamport, L., </author> <title> "Reasoning About Nonatomic Operations," </title> <booktitle> Proceedings of the 10th Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 28-37, </pages> <year> 1983. </year>
Reference-contexts: Recently, Lamport has proposed a proof theory for reasoning about nonatomic programs in which the implementation of the nonatomic operations in terms of atomic operations is left unspecified <ref> [La 83, La 87] </ref>. Thus, this proof theory allows implementation decisions to be deferred, in contrast to our approach in which implementation decisions are made a priori .
Reference: [La 86a] <author> Lamport, L., </author> <title> "The Mutual Exclusion Problem, Parts I and II," </title> <journal> Journal of the ACM , Vol. </journal> <volume> 23, No. 2, </volume> <pages> pp. 311-348, </pages> <month> April </month> <year> 1986. </year> <month> 8 </month>
Reference-contexts: Second, show that P 0 satisfies the required assertion under the fairness condition F 0 . Since P 0 is atomic, this step can be accomplished using traditional proof methods, i.e. invariants and well-founded sets [MP 84]. As an example, consider the one-bit mutual exclusion program given in <ref> [La 86a] </ref>. The program, call it P , consists of N processes, P 1 ; : : : ; P N , that communicate via a global boolean array a [1::N ]; each element in the array is initially false.
Reference: [La 86b] <author> Lamport, L., </author> <title> "On Interprocess Communication, Parts I and II," </title> <journal> Distributed Computing, </journal> <volume> Vol. 1, </volume> <pages> pp. 77-101, </pages> <year> 1986. </year>
Reference-contexts: The semantics that we proposed in Section 3 is, in fact, the semantics of a write operation of a safe register. A safe register is the most primitive register in a hierarchy of registers defined by Lamport <ref> [La 86b] </ref>; it satisfies only one constraint: a read of a safe register must return the most recently written value if it does not "overlap" a write of the register. Another register in Lamport's hierarchy is the regular register.
Reference: [La 87] <author> Lamport, L., </author> <title> "win and sin: Predicate Transformers for Concur-rency," </title> <type> Technical Report, </type> <institution> Systems Research Center, Digital Equipment Corporation, </institution> <month> May </month> <year> 1987. </year>
Reference-contexts: Recently, Lamport has proposed a proof theory for reasoning about nonatomic programs in which the implementation of the nonatomic operations in terms of atomic operations is left unspecified <ref> [La 83, La 87] </ref>. Thus, this proof theory allows implementation decisions to be deferred, in contrast to our approach in which implementation decisions are made a priori .
Reference: [LS 84] <author> Lamport, L., and Schneider, F., </author> <title> "The Hoare Logic of CSP, and All That," </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 6, No. 2, </volume> <pages> pp. 281-296, </pages> <month> April </month> <year> 1984. </year>
Reference-contexts: 1 Introduction Most of the proof methods that have been proposed for reasoning about concurrent programs are developed within the atomic model of concurrency <ref> [Ho 72, LS 84, MP 84, OG 76] </ref>. This model is based on the assumption that no two operations in a concurrent program are executed at the same time. Hence, the resulting proof theory may seem inadequate for reasoning about programs in which operations of different processes may overlap.
Reference: [MP 84] <author> Manna, Z., and Pnueli, A., </author> <title> "Adequate Proof Principles for In-variance and Liveness Properities of Concurrent Programs," </title> <booktitle> Science of Computer Programming, </booktitle> <volume> Vol. 4, </volume> <pages> pp. 257-289, </pages> <year> 1984. </year>
Reference-contexts: 1 Introduction Most of the proof methods that have been proposed for reasoning about concurrent programs are developed within the atomic model of concurrency <ref> [Ho 72, LS 84, MP 84, OG 76] </ref>. This model is based on the assumption that no two operations in a concurrent program are executed at the same time. Hence, the resulting proof theory may seem inadequate for reasoning about programs in which operations of different processes may overlap. <p> Second, show that P 0 satisfies the required assertion under the fairness condition F 0 . Since P 0 is atomic, this step can be accomplished using traditional proof methods, i.e. invariants and well-founded sets <ref> [MP 84] </ref>. As an example, consider the one-bit mutual exclusion program given in [La 86a].
Reference: [OG 76] <author> Owicki, S., and Gries, D., </author> <title> "An Axiomatic Proof Technique for Parallel Programs I," </title> <journal> Acta Informatica, </journal> <volume> Vol. 6, </volume> <pages> pp. 319-340, </pages> <year> 1976. </year> <month> 9 </month>
Reference-contexts: 1 Introduction Most of the proof methods that have been proposed for reasoning about concurrent programs are developed within the atomic model of concurrency <ref> [Ho 72, LS 84, MP 84, OG 76] </ref>. This model is based on the assumption that no two operations in a concurrent program are executed at the same time. Hence, the resulting proof theory may seem inadequate for reasoning about programs in which operations of different processes may overlap.
References-found: 9

