URL: http://www.cs.cornell.edu/Info/People/kreitz/PS-files/96-fapr.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/kreitz/Abstracts/96-fapr.html
Root-URL: 
Email: kreitz@intellektik.informatik.th-darmstadt.de  kung-kiu@cs.man.ac.uk  
Phone: 2  3  
Title: Formal Reasoning about Modules, Reuse and their Correctness  
Author: Christoph Kreitz, Kung-Kiu Lau and Mario Ornaghi 
Web: ornaghi@hermes. mc.dsi.unimi.it  
Address: Alexanderstr. 10, D-64283 Darmstadt, Germany  Manchester, Manchester M13 9PL, UK  Milano, Via Comelico 39/41, Milano, Italy  
Affiliation: 1 Fachgebiet Intellektik, Fachbereich Informatik Technische Hochschule Darmstadt  Department of Computer Science University of  Dipartimento di Scienze dell'Informazione Universita' degli studi di  
Abstract: We present a formalisation of modules that are correct, and (correctly) reusable in the sense that composition of modules preserves both correctness and reusability. We also introduce a calculus for formally reasoning about the construction of such modules.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. Bertoni, G. Mauri and P. Miglioli. </author> <title> On the power of model theory in specifying abstract data types and in capturing their recursiveness. </title> <note> Fundamenta Informaticae VI(2):127-170, </note> <year> 1983. </year>
Reference-contexts: The interpretations int () of are related to the interpretations int () of by the reduct operation j : int () ! int () defined thus: s Ij = (s) I r Ij : a = (r) I : (a) Ij will be called the reduct of I. 5 <ref> [1] </ref> gives a proof of Theorem 1. Isoinitial semantics is closely related to initial seman tics used in algebraic ADTs [14] (see also [7, 12]). 6 We can also use induction principles in T (P ).
Reference: 2. <author> A. Brogi, P. Mancarella, D. Pedreschi and F. Turini. </author> <title> Modular logic programming. </title> <journal> ACM TOPLAS 16(4) </journal> <pages> 1361-1398, </pages> <year> 1994. </year>
Reference: 3. <author> K.M. Bruce. </author> <title> A paradigmatic object-oriented programming language: Design, sta tic typing and semantics. </title> <editor> J. </editor> <booktitle> Functional Programming 4(2) </booktitle> <pages> 127-206, </pages> <year> 1994. </year>
Reference: 4. <author> M. Bugliesi, E. Lamma and P. Mello. </author> <title> Modularity in logic programming. </title> <journal> J. Logic Programming 19,20:443-502, </journal> <note> 1994. Special issue: Ten years of logic programming. </note>
Reference: 5. <author> C.C. Chang and H.J. Keisler. </author> <title> Model Theory. </title> <publisher> North-Holland, </publisher> <year> 1973. </year>
Reference-contexts: If () = for every symbol , i.e. , we get the usual notion of reduct to a subsignature (see e.g. <ref> [5] </ref>). In this case, the reduct will also be denoted by Ij. It is immediate to extend a morphism : ! to a map : L ! L and the following satisfaction condition (see [6]) can be easily proved: Theorem 2.
Reference: 6. <author> J.A. Goguen and R.M. Burstall. Institutions: </author> <title> Abstract model theory for specifica tion and programming. </title> <editor> J. </editor> <booktitle> ACM 39(1) </booktitle> <pages> 95-146, </pages> <year> 1992. </year>
Reference-contexts: ) is the set of freeness axioms for the constant and function symbols of P ; and Ocomp (P ), the open completion of P , is the set of completed definitions of the predicates defined by P . 6 2.3 Signature and Theory Morphisms First-order theories are an institution <ref> [6] </ref>. Here we briefly introduce relevant properties of an institution, and some terminology. A signature = hS; F; Ri is a subsignature of = hS 0 ; F 0 ; R 0 i, written , iff S S 0 , F F 0 and R R 0 . <p> In this case, the reduct will also be denoted by Ij. It is immediate to extend a morphism : ! to a map : L ! L and the following satisfaction condition (see <ref> [6] </ref>) can be easily proved: Theorem 2. <p> These theorems will be used to introduce sound extension rules as compositions of a particular kind. Theory morphism, as defined in <ref> [6] </ref>, can be seen as -compositions, where is any signature morphism (i. e. it may be non-injective). Moreover, our definition of composition essentially coincides with that of [6]. <p> These theorems will be used to introduce sound extension rules as compositions of a particular kind. Theory morphism, as defined in <ref> [6] </ref>, can be seen as -compositions, where is any signature morphism (i. e. it may be non-injective). Moreover, our definition of composition essentially coincides with that of [6]. However, the theory of institutions is not useful for our purposes, since it does not deal with the problem of preserving consistency. 11 4.2 Constructing Adequate Frameworks As we mentioned in Section 3, correctness of a framework F in a module M refers to F's consistency.
Reference: 7. <author> K.K. Lau and M. Ornaghi. </author> <title> On specification frameworks and deductive synthesis of logic programs. </title> <editor> In L. Fribourg and F. Turini, editors, </editor> <booktitle> Proc. LOPSTR 94 and META 94 , LNCS 883, </booktitle> <pages> pages 104-121, </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Isoinitial semantics is closely related to initial seman tics used in algebraic ADTs [14] (see also <ref> [7, 12] </ref>). 6 We can also use induction principles in T (P ). If () = for every symbol , i.e. , we get the usual notion of reduct to a subsignature (see e.g. [5]). In this case, the reduct will also be denoted by Ij.
Reference: 8. <author> K.K. Lau, M. Ornaghi and S.-. A. T arnlund. </author> <title> The halting problem for deductive synthesis of logic programs. </title> <editor> In P. van Hentenryck, editor, </editor> <booktitle> Proc. 11 th Int. Conf. on Logic Programming, </booktitle> <pages> pages 665-683, </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: partial characterisation of split and merge, we can prove that the program (4) is steadfast wrt the specification (3), that is, it is correct for every interpretation of the internal parameters that 7 This definition is adequate, see Section 4.2 later. 8 The synthesis of steadfast programs is discussed in <ref> [8] </ref>. satisfies their partial definitions, as well as in every closed instance of LIST .
Reference: 9. <author> K.K. Lau, M. Ornaghi and S.-. A. T arnlund. </author> <title> Steadfast logic programs. </title> <note> Submitted </note>
Reference-contexts: They are open programs that must be correct in all possible instances of M. We call this kind of correctness steadfastness, and a model-theoretic formalisation can be found in <ref> [9] </ref>. Here we give a brief explanation so as to make clear what kind of programs we can find in a module.
Reference: 10. <author> J.W. Lloyd. </author> <title> Foundations of Logic Programming, </title> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference: 11. <author> B. Meyer. </author> <title> Eiffel the Language. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference: 12. <author> P. Miglioli, U. Moscato and M. Ornaghi. </author> <title> Abstract parametric classes and abstract data types defined by classical and constructive logical methods. </title> <journal> J. Symb. Comp. </journal> <volume> 18 </volume> <pages> 41-81, </pages> <year> 1994. </year>
Reference-contexts: Isoinitial semantics is closely related to initial seman tics used in algebraic ADTs [14] (see also <ref> [7, 12] </ref>). 6 We can also use induction principles in T (P ). If () = for every symbol , i.e. , we get the usual notion of reduct to a subsignature (see e.g. [5]). In this case, the reduct will also be denoted by Ij.
Reference: 13. <author> J. Palsberg and M.I. Schwartzbach. </author> <title> Object-Oriented Type Systems. </title> <publisher> Wiley, </publisher> <year> 1994. </year>
Reference: 14. <author> M. Wirsing. </author> <title> Algebraic specification. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theo retical Computer Science, </booktitle> <pages> pages 675-788. </pages> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: Isoinitial semantics is closely related to initial seman tics used in algebraic ADTs <ref> [14] </ref> (see also [7, 12]). 6 We can also use induction principles in T (P ). If () = for every symbol , i.e. , we get the usual notion of reduct to a subsignature (see e.g. [5]). In this case, the reduct will also be denoted by Ij.
References-found: 14

