URL: http://www.cs.rpi.edu/tr/94-14.ps
Refering-URL: http://www.cs.rpi.edu/tr/
Root-URL: 
Title: Parallel Object Oriented Implementation of a 2D Bounded Electrostatic Plasma PIC Simulation  
Author: Charles D. Norton Boleslaw K. Szymanski Viktor K. Decyk 
Abstract: We discuss the software development issues involved in designing parallel programs using object oriented techniques. Simulations involving 1D and 2D Particle In Cell plasma codes illustrate how C++ programs can effectively describe complex simulations while performing with reasonable efficiency when compared to the equivalent Fortran programs. The scalable object oriented modeling techniques closely match the physical view of the problem, thus supporting modifiability and portability of the code. Selection of a parallel programming paradigm must consider the important factors of efficiency of the computation and the programming implementation effort. C++ and Fortran implementation paradigms are compared and discussed from this point of view.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. K. Birdsall and A. B. Langdon, </author> <title> Plasma Physics via Computer Simulation, </title> <booktitle> The Adam Hilger Series on Plasma Physics, </booktitle> <address> Adam Hilger, New York, </address> <year> 1991. </year>
Reference-contexts: Fusion energy is an important application area of plasma physics research, but more familiar examples include the Aurora Borealis, neon signs, the ionosphere, and solar winds. The fundamentals of the Particle In Cell plasma simulation model are described in <ref> [1] </ref>. The model integrates in time the trajectories of large numbers of charged particles in their self-consistent electromagnetic fields. The PIC method assumes that particles do not interact with each other directly, but through the fields which they produce according to the Maxwell's equations.
Reference: [2] <author> S. W. Haney and J. A. Crotinger, </author> <title> C++ Proves Useful in Writing a Tokamak Systems Code, </title> <journal> J. Computers in Physics, </journal> <volume> 6 (1991), </volume> <pages> pp. 450-455. </pages>
Reference-contexts: Classes that operate on particles with common and/or unique properties should also be introduced. Furthermore, objects of these classes should be integrated so that they can function together to perform specific operations. Various approaches have been presented regarding object oriented class design in plasma simulation <ref> [2, 4] </ref>.
Reference: [3] <author> P. C. Liewer and V. K. Decyk, </author> <title> A General Concurrent Algorithm for Plasma Particle-in-Cell Simulation Codes, </title> <journal> J. of Computational Physics, </journal> <volume> 85 (1989), </volume> <pages> pp. 302-322. </pages>
Reference-contexts: Diagnostics are computed along the way and all lengths are normalized to the grid spacing. These lengths are related back to physical lengths later. The General Concurrent Particle in Cell Algorithm described in <ref> [3] </ref> was used for the beam-plasma instability simulation. The GCPIC method partitions the particles and grid points among the N p processors of the MIMD distributed memory machine. Each processor is assigned a subdomain and is responsible for the particles in its domain. <p> Our 1D Paragon simulations consisted of 4,096,000 background electrons and 409,600 beam electrons with 16384 grid points. The 2D SP1 simulations consisted of 3,276,800 background and 294,912 beam particles with 32768 grid points. Since the original Fortran codes have been well benchmarked <ref> [3] </ref>, we will restrict our performance overview to these rather arbitrarily selected cases. Examining the energy diagnostics for the SP1 two-dimensional simulations with 3,571,712 particles on 16 processors, Figure 2 shows that the curves correspond for the Fortran and C++ versions, illustrating the field/kinetic energy exchange.
Reference: [4] <author> J. V. W. Reynders, </author> <title> Object-Oriented Particle Simulation on Parallel Computers, </title> <booktitle> in 15th International Conference on the Numerical Simulation of Plasmas, </booktitle> <institution> King of Prussia, Pennsylvania, 1994, Princetion University Plasma Physics Laboratory and U.S. Department of Energy Office of Fusion Research, </institution> <note> pp. 1B2 1-4. </note>
Reference-contexts: Classes that operate on particles with common and/or unique properties should also be introduced. Furthermore, objects of these classes should be integrated so that they can function together to perform specific operations. Various approaches have been presented regarding object oriented class design in plasma simulation <ref> [2, 4] </ref>.
Reference: [5] <author> T. Tajima, </author> <title> Computational Plasma Physics: With Applications to Fusion and Astrophysics, </title> <booktitle> Frontiers in Physics Lecture Note Series, </booktitle> <publisher> Addison Wesley, </publisher> <address> Redwood City, CA, </address> <year> 1989. </year>
Reference-contexts: The particle charge is q i with center x i <ref> [5] </ref>. Next, the electric field E (x n ) is found at the grid points by solving Poisson's Equation r E (x n ) = r 2 = 4 (x n );(2) using the Fast Fourier Transform.
References-found: 5

