URL: ftp://ftp.cs.arizona.edu/ftol/papers/cds98.ps
Refering-URL: http://www.cs.arizona.edu/people/hiltunen/hiltunen.html
Root-URL: http://www.cs.arizona.edu
Email: hiltunen@cs.arizona.edu  
Title: Configuration Management for Highly-Customizable Services  
Author: Matti A. Hiltunen 
Address: Tucson, AZ 85721, USA  
Affiliation: Department of Computer Science University of Arizona  
Abstract: The recent surge of configurable operating systems, database systems, and communication subsystems has demonstrated the importance of customization. Customization has a number of advantages, most notably performance improvements, code reuse, and meeting the quality of service requirements of the system users. One typical approach for constructing such services is to implement the service functionality as separate modules that can be configured in different combinations. Typically, ad hoc methods are used to determine which modules may be combined. Such methods require a system configurer to have intimate knowledge about the modules and their interactions or the configuration will not behave as expected. In this paper, we present a methodology for configuring custom variants of configurable services. The methodology is based on identifying the relations between software modules that dictate which combinations are correct and providing configuration support tools that allow only correct configurations to be created. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Agha. </author> <title> Concurrent object-oriented programming. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 125-141, </pages> <month> Sep </month> <year> 1990. </year>
Reference-contexts: A system or service consists of a set of objects that communicate with each other by message passing, where each object performs some specific task. Examples of this model are the Actor model <ref> [1] </ref>, where a computation is constructed of actor objects that communicate using point-to-point messages, and the model for parallel execution of communication protocols presented in [25].
Reference: [2] <author> D. Batory, J. Barnett, J. Garza, K. Smith, K. Tsukuda, B. Twichell, and T. Wise. </author> <title> GENESIS: An extensible database management system. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-14(11):1711-1729, </volume> <month> Nov </month> <year> 1988. </year>
Reference-contexts: 1. Introduction The recent surge of configurable or extensible operating systems [21, 3, 9], file systems [13, 17, 18], database systems <ref> [2, 29, 26] </ref>, and communication subsystems [16, 24, 20, 23] has demonstrated the importance of customization in such services. Customization allows the service implementation to be optimized for the requirements of each application and the execution environment.
Reference: [3] <author> B. Bershad, P. Savage, S.and Pardyak, E. Sirer, M. Fiuczyn-ski, D. Becker, C. Chambers, and S. Eggers. </author> <title> Extensibility, safety, and performance in the SPIN operating system. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 267-284, </pages> <month> Dec </month> <year> 1995. </year>
Reference-contexts: 1. Introduction The recent surge of configurable or extensible operating systems <ref> [21, 3, 9] </ref>, file systems [13, 17, 18], database systems [2, 29, 26], and communication subsystems [16, 24, 20, 23] has demonstrated the importance of customization in such services. Customization allows the service implementation to be optimized for the requirements of each application and the execution environment.
Reference: [4] <author> E. Bersoff, V. Henderson, and S. Siegel. </author> <title> Software Configuration Management. </title> <publisher> Prentice-Hall, </publisher> <year> 1980. </year>
Reference-contexts: Note that although we present the configuration problem here in terms of micro-protocols, the problem is similar for other modular configurable approaches. Note also that the work on software configuration management <ref> [4] </ref> is related but its emphasis is on version control whereas our focus is on creating customized service variants. The contribution of this paper is a new approach to the management of highly-customizable services. <p> Another field related to our work is software configuration management (SCM). SCM encapsulates managing the development of the components from which a complex system is built and integrating these components to form that system. SCM has been extensively studied <ref> [4] </ref>, standards have been published on SCM (IEEE Std 828-1990, NASA D-GL-11, DoD MIL-STD-973), and a number of commercial tools have been developed. The main thrust of SCM is managing the different versions of the software modules of a complex system.
Reference: [5] <author> N. Bhatti. </author> <title> A System for Constructing Configurable High-Level Protocols. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <month> Nov </month> <year> 1996. </year>
Reference-contexts: The framework also supports shared data (e.g., messages) that can be accessed by the micro-protocols configured into the framework. Further details on the model, event-handling operations, and other aspects of the approach can be found in <ref> [14, 5] </ref>. 3. Properties of a service The first step in building a configurable service is to identify service properties that might be of interest to the users of the service.
Reference: [6] <author> N. Bhatti, M. Hiltunen, R. Schlichting, and W. Chiu. Coyote: </author> <title> A system for constructing fine-grain configurable communication services. </title> <note> Submitted for publication in ACM Transaction on Computer Systems. </note>
Reference-contexts: Finally, code reuse is enhanced since the code for one service implementation can be used numerous times. We have developed an approach to constructing highly-customizable middleware services that makes it easier to construct distributed fault-tolerant applications. Examples of such middleware services are group RPC, atomic mul-ticast, and group membership <ref> [6] </ref>. In our approach, a customizable service is implemented as a collection of modules called micro-protocols. A custom instance of the service is then constructed by combining a chosen subset of the micro-protocols.
Reference: [7] <author> J. Bishop and R. Faria. </author> <title> Connectors in configuration programming languages: are they necessary. </title> <booktitle> In Proceedings of the 3rd International Conference on Configurable Distributed Systems, </booktitle> <pages> pages 11-18, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Related work The problem of configuration management has been addressed in a number of other projects. An important part of this work is configuration programming, defined as the process whereby components written in any conventional programming language can be bound together to form a dynamic system <ref> [7] </ref>. Examples of this work are Darwin [19], Polylith [22], and UNICON [27].
Reference: [8] <author> T. Chandra and S. Toueg. </author> <title> Unreliable failure detectors for reliable distributed systems. </title> <journal> Journal of the ACM, </journal> <volume> 34(1) </volume> <pages> 225-267, </pages> <year> 1996. </year>
Reference-contexts: Finally, note that relations can be influenced by assumptions about the execution environment. For example, it has been proven that a failure detector cannot be both accurate and complete in asynchronous computing environments <ref> [8] </ref>. Thus, based on the above definitions, the properties accuracy and completeness conflict in asynchronous computing environments but not in synchronous computing environments. 3.2. Dependency graphs Dependency graphs are a graphical method for recording and expressing the preceding relations between properties.
Reference: [9] <author> D. Engler, M. Kaashoek, and J. O'Toole. Exokernel: </author> <title> An operating system architecture for application-level resource management. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 251-266, </pages> <month> Dec </month> <year> 1995. </year>
Reference-contexts: 1. Introduction The recent surge of configurable or extensible operating systems <ref> [21, 3, 9] </ref>, file systems [13, 17, 18], database systems [2, 29, 26], and communication subsystems [16, 24, 20, 23] has demonstrated the importance of customization in such services. Customization allows the service implementation to be optimized for the requirements of each application and the execution environment.
Reference: [10] <author> W. Gentleman, S. MacKay, D. Stewart, and M. Wein. </author> <title> Commercial realtime software needs different configuration management. </title> <booktitle> In Proceedings of the 2nd International Workshop on Software Configuration Management, </booktitle> <pages> pages 152-161, </pages> <month> Oct </month> <year> 1989. </year>
Reference-contexts: Typically, more than one instance of the system would be created if the software is to be run on different platforms. There has been some work on providing customized features for different customers. For example, the Harmony project <ref> [10] </ref> separates source files from inclusion files that list the source files to be included in a configuration and thus allow different configurations to be created. However, even this tool does not identify or support semantic relations between modules.
Reference: [11] <author> R. Golding. </author> <title> Weak-Consistency Group Communication and Membership. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of California, </institution> <address> Santa Cruz, Santa Cruz, CA, </address> <month> Dec </month> <year> 1992. </year>
Reference-contexts: A fixed system or service backplane has slots, or hooks, that can be filled using a choice of modules for each slot. Examples of this approach are Adaptive [24] and a modular framework for group communication systems presented in <ref> [11] </ref>. * Class hierarchy based. Mechanisms for constructing a system or a service are presented to users as an object class hierarchy. A predefined class hierarchy specifies the available components, which can be manipulated by invoking the object methods.
Reference: [12] <author> J. Heidemann and G. Popek. </author> <title> File-system development with stackable layers. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(1) </volume> <pages> 58-89, </pages> <month> Feb </month> <year> 1994. </year>
Reference-contexts: A system is constructed as a stack of modules and each module only interacts directly with modules immediately above and below it in the hierarchy. Three recent examples of this approach are the x-kernel [16], Horus [23], and stackable file systems <ref> [12] </ref>. * Slotted. A fixed system or service backplane has slots, or hooks, that can be filled using a choice of modules for each slot. Examples of this approach are Adaptive [24] and a modular framework for group communication systems presented in [11]. * Class hierarchy based.
Reference: [13] <author> J. Heidemann and G. Popek. </author> <title> Performance of cache coherence in stackable filing. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 127-142, </pages> <month> Dec </month> <year> 1995. </year>
Reference-contexts: 1. Introduction The recent surge of configurable or extensible operating systems [21, 3, 9], file systems <ref> [13, 17, 18] </ref>, database systems [2, 29, 26], and communication subsystems [16, 24, 20, 23] has demonstrated the importance of customization in such services. Customization allows the service implementation to be optimized for the requirements of each application and the execution environment.
Reference: [14] <author> M. Hiltunen. </author> <title> Configurable Distributed Fault-Tolerant Services. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <month> Jul </month> <year> 1996. </year>
Reference-contexts: The framework also supports shared data (e.g., messages) that can be accessed by the micro-protocols configured into the framework. Further details on the model, event-handling operations, and other aspects of the approach can be found in <ref> [14, 5] </ref>. 3. Properties of a service The first step in building a configurable service is to identify service properties that might be of interest to the users of the service. <p> Obviously, for 7 different properties, the maximum number of different combinations would be 2 7 = 128. Examples of dependency graphs for group membership and group RPC services can be found in <ref> [14] </ref>. 4. Configurable modules The analysis of service properties and the resulting dependency graph gives the starting point for the design of a configurable service, while the event-driven execution model provides the necessary tools. <p> In spite of the large number of conflicts and dependencies, the total number of correct configurations is 12. We have successfully used configuration graphs for a configurable group RPC service with nearly 200 correct configurations and a group membership service with over 1000 correct configurations <ref> [14] </ref>. 5. Configuration support tools The relations presented by the dependency and configuration graphs provide the theoretical foundation for creating correct configurations.
Reference: [15] <author> M. Hiltunen and R. Schlichting. </author> <title> Constructing a configurable group RPC service. </title> <booktitle> In Proceedings of the 15th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 288-295, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Naturally these rules generalize to any number of properties. Consider the abstract properties of a configurable group RPC service as an example <ref> [15] </ref>. An RPC call is typically blocking (synchronous) but non-blocking (asynchronous) variants of RPC have also been implemented. A call cannot be both blocking and non-blocking at the same time, however, thus these two properties of RPC conflict by definition.
Reference: [16] <author> N. Hutchinson and L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: 1. Introduction The recent surge of configurable or extensible operating systems [21, 3, 9], file systems [13, 17, 18], database systems [2, 29, 26], and communication subsystems <ref> [16, 24, 20, 23] </ref> has demonstrated the importance of customization in such services. Customization allows the service implementation to be optimized for the requirements of each application and the execution environment. <p> We address this problem with a model in which software modules referred to as micro-protocols are composed together to form a composite protocol. Composite protocols can then be combined with traditional network protocols using standard hierarchical techniques such as those supported by the x-kernel <ref> [16] </ref>. The result is a two-level model that supports flexible interaction and data sharing between modules when necessary, but also allows the strict hierarchical separation and proscribed interaction through a uniform protocol interface found in current hierarchical systems. <p> We identify four major approaches for constructing modular configurable systems or services: * Hierarchical. A system is constructed as a stack of modules and each module only interacts directly with modules immediately above and below it in the hierarchy. Three recent examples of this approach are the x-kernel <ref> [16] </ref>, Horus [23], and stackable file systems [12]. * Slotted. A fixed system or service backplane has slots, or hooks, that can be filled using a choice of modules for each slot.
Reference: [17] <author> Y. Khalidi and M. Nelson. </author> <title> Extensible file systems in Spring. </title> <booktitle> In Proceedings of the 14th Symposium on Operating Systems Principles, </booktitle> <pages> pages 1-14, </pages> <month> Dec </month> <year> 1993. </year>
Reference-contexts: 1. Introduction The recent surge of configurable or extensible operating systems [21, 3, 9], file systems <ref> [13, 17, 18] </ref>, database systems [2, 29, 26], and communication subsystems [16, 24, 20, 23] has demonstrated the importance of customization in such services. Customization allows the service implementation to be optimized for the requirements of each application and the execution environment.
Reference: [18] <author> S. Maffeis. </author> <title> Design and implementation of a configurable mixed-media file system. </title> <journal> Operating Systems Review, </journal> <volume> 28(4) </volume> <pages> 4-10, </pages> <month> Oct </month> <year> 1994. </year>
Reference-contexts: 1. Introduction The recent surge of configurable or extensible operating systems [21, 3, 9], file systems <ref> [13, 17, 18] </ref>, database systems [2, 29, 26], and communication subsystems [16, 24, 20, 23] has demonstrated the importance of customization in such services. Customization allows the service implementation to be optimized for the requirements of each application and the execution environment. <p> New classes can be defined as derived classes of existing ones, thereby inheriting the properties of the parent class. Examples of this approach are Arjuna [28] and the configurable mixed-media file system described in <ref> [18] </ref>. * Object-message. A system or service consists of a set of objects that communicate with each other by message passing, where each object performs some specific task.
Reference: [19] <author> J. Magee, N. Dulay, and J. Kramer. Regis: </author> <title> a constructive development environment for distributed programs. </title> <journal> Distributed Systems Engineering Journal, </journal> <volume> 1(5) </volume> <pages> 304-312, </pages> <month> Sep </month> <year> 1994. </year>
Reference-contexts: An important part of this work is configuration programming, defined as the process whereby components written in any conventional programming language can be bound together to form a dynamic system [7]. Examples of this work are Darwin <ref> [19] </ref>, Polylith [22], and UNICON [27].
Reference: [20] <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> Consul: A communication substrate for fault-tolerant distributed programs. </title> <journal> Distributed System Engineering, </journal> <volume> 1 </volume> <pages> 87-103, </pages> <month> Dec </month> <year> 1993. </year>
Reference-contexts: 1. Introduction The recent surge of configurable or extensible operating systems [21, 3, 9], file systems [13, 17, 18], database systems [2, 29, 26], and communication subsystems <ref> [16, 24, 20, 23] </ref> has demonstrated the importance of customization in such services. Customization allows the service implementation to be optimized for the requirements of each application and the execution environment.
Reference: [21] <author> C. Pu, H. Massalin, and J. Ioannidis. </author> <title> The Synthesis kernel. </title> <journal> Computing Systems, </journal> <volume> 1(1) </volume> <pages> 11-32, </pages> <year> 1988. </year>
Reference-contexts: 1. Introduction The recent surge of configurable or extensible operating systems <ref> [21, 3, 9] </ref>, file systems [13, 17, 18], database systems [2, 29, 26], and communication subsystems [16, 24, 20, 23] has demonstrated the importance of customization in such services. Customization allows the service implementation to be optimized for the requirements of each application and the execution environment.
Reference: [22] <author> J. Purtilo. </author> <title> The Polylith software bus. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(4) </volume> <pages> 151-174, </pages> <month> Jan </month> <year> 1994. </year>
Reference-contexts: An important part of this work is configuration programming, defined as the process whereby components written in any conventional programming language can be bound together to form a dynamic system [7]. Examples of this work are Darwin [19], Polylith <ref> [22] </ref>, and UNICON [27].
Reference: [23] <author> R. v. Renesse, K. Birman, and S. Maffeis. Horus, </author> <title> a flexible group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 76-83, </pages> <month> Apr </month> <year> 1996. </year>
Reference-contexts: 1. Introduction The recent surge of configurable or extensible operating systems [21, 3, 9], file systems [13, 17, 18], database systems [2, 29, 26], and communication subsystems <ref> [16, 24, 20, 23] </ref> has demonstrated the importance of customization in such services. Customization allows the service implementation to be optimized for the requirements of each application and the execution environment. <p> A system is constructed as a stack of modules and each module only interacts directly with modules immediately above and below it in the hierarchy. Three recent examples of this approach are the x-kernel [16], Horus <ref> [23] </ref>, and stackable file systems [12]. * Slotted. A fixed system or service backplane has slots, or hooks, that can be filled using a choice of modules for each slot.
Reference: [24] <author> D. Schmidt, D. Box, and T. Suda. </author> <title> ADAPTIVE: A dynamically assembled protocol transformation, integration, and evaluation environment. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 5(4) </volume> <pages> 269-286, </pages> <month> Jun </month> <year> 1993. </year>
Reference-contexts: 1. Introduction The recent surge of configurable or extensible operating systems [21, 3, 9], file systems [13, 17, 18], database systems [2, 29, 26], and communication subsystems <ref> [16, 24, 20, 23] </ref> has demonstrated the importance of customization in such services. Customization allows the service implementation to be optimized for the requirements of each application and the execution environment. <p> Three recent examples of this approach are the x-kernel [16], Horus [23], and stackable file systems [12]. * Slotted. A fixed system or service backplane has slots, or hooks, that can be filled using a choice of modules for each slot. Examples of this approach are Adaptive <ref> [24] </ref> and a modular framework for group communication systems presented in [11]. * Class hierarchy based. Mechanisms for constructing a system or a service are presented to users as an object class hierarchy. A predefined class hierarchy specifies the available components, which can be manipulated by invoking the object methods.
Reference: [25] <author> K. Schwan, T. Bihari, and B. Blake. </author> <title> Adaptive, reliable software for distributed and parallel real-time systems. </title> <booktitle> In Proceedings of the 6th IEEE Symposium on Reliability in Distributed Software and Database Systems, </booktitle> <pages> pages 32-42, </pages> <month> Mar </month> <year> 1987. </year>
Reference-contexts: Examples of this model are the Actor model [1], where a computation is constructed of actor objects that communicate using point-to-point messages, and the model for parallel execution of communication protocols presented in <ref> [25] </ref>. Although in many hierarchical systems such as the x-kernel and Horus, all modules export the same interface and thus syntactically any stack of modules would be valid, semantic constraints between modules dictate that only certain combinations are correct.
Reference: [26] <author> P. Schwarz, W. Chang, J. Freytag, G. Lohman, J. McPher-son, C. Mohan, and H. Pirahesh. </author> <title> Extensibility in the Starburst database system. </title> <booktitle> In Proceedings of the International Workshop on Object-Oriented Database Systems, </booktitle> <pages> pages 85-93, </pages> <month> Sep </month> <year> 1986. </year>
Reference-contexts: 1. Introduction The recent surge of configurable or extensible operating systems [21, 3, 9], file systems [13, 17, 18], database systems <ref> [2, 29, 26] </ref>, and communication subsystems [16, 24, 20, 23] has demonstrated the importance of customization in such services. Customization allows the service implementation to be optimized for the requirements of each application and the execution environment.
Reference: [27] <author> M. Shaw, R. DeLine, D. Klein, T. Ross, D. Young, and G. Zelesnik. </author> <title> Abstractions for software architecture and tools to support them. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(4) </volume> <pages> 314-335, </pages> <month> Apr </month> <year> 1995. </year>
Reference-contexts: An important part of this work is configuration programming, defined as the process whereby components written in any conventional programming language can be bound together to form a dynamic system [7]. Examples of this work are Darwin [19], Polylith [22], and UNICON <ref> [27] </ref>. In contrast to the work presented in this paper, the primary goal of these systems and languages is to make it possible to combine existing software components into a larger system primarily by linking the inputs and outputs of the components using pipes, RPC, or shared data structures.
Reference: [28] <author> S. Shrivastava, G. Dixon, and G. Parrington. </author> <title> An overview of the Arjuna distributed programming system. </title> <journal> IEEE Software, </journal> <volume> 8(1) </volume> <pages> 66-73, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: A predefined class hierarchy specifies the available components, which can be manipulated by invoking the object methods. New classes can be defined as derived classes of existing ones, thereby inheriting the properties of the parent class. Examples of this approach are Arjuna <ref> [28] </ref> and the configurable mixed-media file system described in [18]. * Object-message. A system or service consists of a set of objects that communicate with each other by message passing, where each object performs some specific task.
Reference: [29] <author> M. Stonebraker and L. Rowe. </author> <title> The design of Postgres. </title> <booktitle> In Proceedings, ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 340-355, </pages> <year> 1986. </year>
Reference-contexts: 1. Introduction The recent surge of configurable or extensible operating systems [21, 3, 9], file systems [13, 17, 18], database systems <ref> [2, 29, 26] </ref>, and communication subsystems [16, 24, 20, 23] has demonstrated the importance of customization in such services. Customization allows the service implementation to be optimized for the requirements of each application and the execution environment.
References-found: 29

