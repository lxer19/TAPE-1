URL: ftp://ftp.cs.washington.edu/tr/1992/09/UW-CSE-92-09-03.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Title: Monitoring Timing Constraints in Distributed Real-time Systems  
Author: Sitaram C. V. Raju Ragunathan Rajkumar Farnam Jahanian 
Address: P.O. Box 704 Seattle WA 98195 Yorktown Heights, NY 10598  
Affiliation: Department of Computer Science and Engineering IBM T. J. Watson Research Center University of Washington  
Abstract: In this paper, we describe a run-time environment for monitoring distributed real-time systems. In par ticular, we focus on the problem of detecting violations of timing assertions in an environment in which the real-time tasks run on multiple processors, and timing constraints can be either inter-processor or intra-processor constraints. Constraint violations are detected at the earliest possible time by deriving and checking intermediate constraints from the user-specified constraints. If the violations must be detected as early as possible, then the problem of minimizing the number of messages to be exchanged between the processors becomes intractable. We characterize a subclass of timing constraints that occur commonly in distributed real-time systems and whose message requirements can be minimized. We also take into account the drift among the various processor clocks when detecting a violation of a timing assertion. Finally, we describe an implementation of a distributed run-time monitor. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Arvind. </author> <title> A New Probabilistic Algorithm for Clock Synchronization, </title> <booktitle> Proc. IEEE Real-Time Systems Symp., </booktitle> <pages> pp. 330-339, </pages> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: If the deviation between various clocks is not bounded by a known value, it is difficult (perhaps impossible) to enforce in a meaningful way a timing constraint whose events span multiple processors. We therefore use a clock synchronization algorithm <ref> [1, 3, 10] </ref> to bound the deviations among the various processor clocks. A clock process on each processor synchronizes with the clock process on a master processor (master clock) by exchanging messages. Let * be the maximum deviation among the clocks.
Reference: [2] <author> S. Chodrow, F. Jahanian, and M. Donner. </author> <title> Run-Time Monitoring of Real-Time Systems, </title> <booktitle> Proc. IEEE Real-Time Systems Symp., </booktitle> <pages> pp. 74-83, </pages> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: In earlier work <ref> [2] </ref>, we have presented a general framework for formal specification and moni toring of run-time constraints in time-critical systems. We also described a single-processor implementation of a monitoring subsystem for an IBM RS/6000 work station running the AIXv.3 operating system 1 . <p> Our run-time monitor for distributed real-time systems is based on the Real-time Logic (RTL) model proposed in [7], and our prototype is an extension of the uniprocessor implementation of <ref> [2] </ref>. In this model, a system computation is viewed as a sequence of event occurrences. The design assumptions and system properties that must be maintained are expressed as invariant relationships between various events, which are monitored during run-time. <p> The monitor daemons detect a violation of a timing constraint in distributed fashion. 3 Timing Constraints in Real-Time Systems We express the timing constraints in a notation based on RTL <ref> [7, 2] </ref>. In this section, we present an informal overview of the computational model and then discuss the representation of a timing assertion as a directed constraint graph. <p> In this paper we have extended the uniprocessor monitoring model of <ref> [2] </ref> to a distributed real-time system. The principal advantage of our approach is that derived intermediate constraints can predict the violation of a user-level constraint even before the violation occurs. This can enable the application to take corrective action to adapt to the error condition.
Reference: [3] <author> F. Cristian. </author> <title> Probabilistic Clock Synchronization, </title> <booktitle> Distributed Computing 3, </booktitle> <pages> pp. 146-158, </pages> <year> 1989. </year>
Reference-contexts: If the deviation between various clocks is not bounded by a known value, it is difficult (perhaps impossible) to enforce in a meaningful way a timing constraint whose events span multiple processors. We therefore use a clock synchronization algorithm <ref> [1, 3, 10] </ref> to bound the deviations among the various processor clocks. A clock process on each processor synchronizes with the clock process on a master processor (master clock) by exchanging messages. Let * be the maximum deviation among the clocks. <p> Message-passing is used only for inter-processor communication. The monitor system, the clock synchronization layer and an X window system based user-interface consist of around 8000 lines of C code. 5.1 Clock Synchronization Layer We implemented the probabilistic clock synchronization algorithm described in <ref> [3] </ref>. Our implementation indicates that the message overhead for clock synchronization is clearly acceptable. The message overhead for achieving some clock synchronization bounds is listed in Table 1.
Reference: [4] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness, </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <year> 1979. </year>
Reference-contexts: Proof: By transformation from the minimum equivalent digraph problem (MED) <ref> [4] </ref>. The formal statement of the MED problem is as follows: Instance: Directed graph G = (V; A), positive integer K jAj.
Reference: [5] <author> D. Haban and K. G. Shin. </author> <title> Application of Real-Time Monitoring to Scheduling Tasks with Random Execution Times, </title> <booktitle> Proc. IEEE Real-Time Systems Symp., </booktitle> <pages> pp. 172-181, </pages> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: Special hardware support for collecting run-time data in real-time applications has been considered in a number of recent papers [6, 14]. These approaches introduce specialized co-processors for the collection and analysis of run time information. A related work <ref> [5] </ref> studies the use of monitoring information to aid in scheduling tasks. A work closer to our approach is a system for collection and analysis of distributed/parallel (real-time) programs [9].
Reference: [6] <author> D. Haban and D. Wybranietz. </author> <title> A Hybrid Monitor for Behavior and Performance Analysis of Distributed Systems. </title> <journal> IEEE Trans. on Software Eng. </journal> <volume> 16,2, </volume> <pages> pp. 197-211, </pages> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: Special hardware support for collecting run-time data in real-time applications has been considered in a number of recent papers <ref> [6, 14] </ref>. These approaches introduce specialized co-processors for the collection and analysis of run time information. A related work [5] studies the use of monitoring information to aid in scheduling tasks. A work closer to our approach is a system for collection and analysis of distributed/parallel (real-time) programs [9].
Reference: [7] <author> F. Jahanian and A. Goyal. </author> <title> A Formalism for Monitoring Real-time Constraints at Run-time, </title> <booktitle> Proc. IEEE Fault-Tolerant Computing Symp., </booktitle> <pages> pp. 148-155, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Finally, in the absence of perfectly synchronized processor clocks or a global system clock, the meaning of a timing assertion on distributed events must be defined precisely. Our run-time monitor for distributed real-time systems is based on the Real-time Logic (RTL) model proposed in <ref> [7] </ref>, and our prototype is an extension of the uniprocessor implementation of [2]. In this model, a system computation is viewed as a sequence of event occurrences. The design assumptions and system properties that must be maintained are expressed as invariant relationships between various events, which are monitored during run-time. <p> The size of an event history, however, must be bounded to guarantee a worst-case time bound on insertions/deletions. We assume that an approach that bounds the number of occurrences of an event is being used as advocated in <ref> [7] </ref>. 2.3 Approach Run-time monitoring of a system requires times-tamping and recording of the relevant event occur rences, analyzing the past history as other events are recorded and providing feedback to the rest of the system. <p> The monitor daemons detect a violation of a timing constraint in distributed fashion. 3 Timing Constraints in Real-Time Systems We express the timing constraints in a notation based on RTL <ref> [7, 2] </ref>. In this section, we present an informal overview of the computational model and then discuss the representation of a timing assertion as a directed constraint graph.
Reference: [8] <author> F. Jahanian and R. Rajkumar. </author> <title> An Integrated Approach to Monitoring and Scheduling in Real-Time Systems, </title> <booktitle> IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: A discussion of our approach to scheduling the monitoring activities is beyond the scope of this paper and interested readers are referred to <ref> [8] </ref>. This approach allows the run-time monitoring processes to be scheduled as time-constrained activities and therefore can be part of the schedulability test for the system. In addi tion, it may be necessary to record multiple occurrences of an event to detect timing violations. <p> This work can be extended in several directions. A major concern in real-time systems is the need to quantify the intrusiveness of the monitoring activities on the timing behavior of the real-time application. Hence, monitoring activities must themselves be scheduled and included in a scheduling analysis of the system <ref> [8] </ref>. A higher-level programming interface is needed to specify the monitored constraints and their communication requirements. Executable specifications of real-time systems that automatically generate run-time monitoring code are also of interest. Acknowledgements We would like to thank Alan Shaw for his comments on an earlier draft of this paper.
Reference: [9] <author> C. Kilpatrick, K. Schwan and D. Ogle. </author> <title> Using Languages for Capture, Analysis and Display of Performance Information for Parallel and Distributed Applications, </title> <booktitle> International Conf. on Computer Languages, </booktitle> <month> March </month> <year> 1990. </year>
Reference-contexts: These approaches introduce specialized co-processors for the collection and analysis of run time information. A related work [5] studies the use of monitoring information to aid in scheduling tasks. A work closer to our approach is a system for collection and analysis of distributed/parallel (real-time) programs <ref> [9] </ref>. The work is based on an earlier system for exploring the use of an extended E-R model for specification and access to monitoring information at run-time [11]. A real-time monitor developed for the ARTS distributed operating system is presented in [13].
Reference: [10] <author> J. Lundelius and N. Lynch. </author> <title> An Upper and Lower Bound for Clock Synchronization, </title> <booktitle> Information and Control 62, </booktitle> <pages> pp. 190-204, </pages> <year> 1984. </year>
Reference-contexts: If the deviation between various clocks is not bounded by a known value, it is difficult (perhaps impossible) to enforce in a meaningful way a timing constraint whose events span multiple processors. We therefore use a clock synchronization algorithm <ref> [1, 3, 10] </ref> to bound the deviations among the various processor clocks. A clock process on each processor synchronizes with the clock process on a master processor (master clock) by exchanging messages. Let * be the maximum deviation among the clocks.
Reference: [11] <author> R. Snodgrass. </author> <title> A Relational Approach to Monitoring Complex Systems. </title> <journal> ACM Trans. on Computer Systems 6,2, </journal> <pages> pp. 157-196, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: A work closer to our approach is a system for collection and analysis of distributed/parallel (real-time) programs [9]. The work is based on an earlier system for exploring the use of an extended E-R model for specification and access to monitoring information at run-time <ref> [11] </ref>. A real-time monitor developed for the ARTS distributed operating system is presented in [13]. The rest of this paper is organized as follows. Sec tion 2 describes an aircraft tracking system and discusses issues in detecting a violation of a timing assertion.
Reference: [12] <author> R. E. Tarjan. </author> <title> Data Structures and Network Algorithms, </title> <institution> Society for Industrial and Applied Mathematics, </institution> <year> 1983. </year>
Reference-contexts: The Floyd-Warshall all-pairs shortest-path algorithm <ref> [12] </ref> can be used to find the length of the shortest cycles from all vertices in the constraint graph. The complexity of the algorithm is O (n 3 ), where n is the number of vertices in the graph.
Reference: [13] <author> H. Tokuda, M. Koreta and C.W. Mercer. </author> <title> A Real-Time Monitor for a Distributed Real-Time Operating System, </title> <journal> ACM Sigplan Notices 24,1, </journal> <pages> pp. 68-77, </pages> <month> Jan. </month> <year> 1989. </year>
Reference-contexts: The work is based on an earlier system for exploring the use of an extended E-R model for specification and access to monitoring information at run-time [11]. A real-time monitor developed for the ARTS distributed operating system is presented in <ref> [13] </ref>. The rest of this paper is organized as follows. Sec tion 2 describes an aircraft tracking system and discusses issues in detecting a violation of a timing assertion. Section 3 presents our event-based computation model, and discusses specification of timing assertions.
Reference: [14] <author> J. P. Tsai, K-Y Fang and H-Y Chen. </author> <title> A Non-invasive Architecture to Monitor Real-time Distributed Systems, </title> <booktitle> IEEE Computer 23,3, </booktitle> <pages> pp. 11-23, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Special hardware support for collecting run-time data in real-time applications has been considered in a number of recent papers <ref> [6, 14] </ref>. These approaches introduce specialized co-processors for the collection and analysis of run time information. A related work [5] studies the use of monitoring information to aid in scheduling tasks. A work closer to our approach is a system for collection and analysis of distributed/parallel (real-time) programs [9].
References-found: 14

