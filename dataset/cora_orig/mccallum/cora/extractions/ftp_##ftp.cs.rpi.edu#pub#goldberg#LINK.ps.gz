URL: ftp://ftp.cs.rpi.edu/pub/goldberg/LINK.ps.gz
Refering-URL: http://www.cs.rpi.edu/~goldberg/papers/
Root-URL: http://www.cs.rpi.edu
Title: Graph Drawing and Manipulation with LINK  
Author: Jonathan Berry Nathaniel Dean Mark Goldberg Gregory Shannon Steven Skiena 
Abstract: This paper introduces the LINK system as a flexible tool for the creation, manipulation, and drawing of graphs and hypergraphs. We describe the basic architecture of the system and illustrate its flexibility with several examples. LINK is distinguished from existing software for discrete mathematics by its layered interface, including a graphical user interface tied into an object-oriented Scheme language interface with access to Tk, and an extensible underlying set of C++ libraries. We conclude by briefly discussing roles LINK has played in research and education. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Berque, R. Cecchini, M. Goldberg, and R. Riven-burgh. </author> <title> The setplayer system for symbolic computation on power sets. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 14:645 662, </volume> <year> 1992. </year>
Reference-contexts: None, however, has resulted in a product with influence comparable to the familiar symbolic mathematics packages. Some notable existing systems for discrete mathematics are Com-binatorica [14], Steven Skiena's extension package for Mathe-matica, NETPAD [11] due to Nathaniel Dean and others at Bell-core, SetPlayer <ref> [1] </ref>, due to Mark Goldberg and his students at Rensselaer Polytechnic Institute, and Gregory Shannon et. al.'s GraphLab [13]. For various reasons, none of these systems has the potential to be a widely-useful environment for both graph manipulation and computation.
Reference: [2] <author> J. Berry. </author> <title> Improving discrete mathematics and algorithms curricula with LINK. </title> <booktitle> In SIGCSE/SIGCUE Conference on Integrating Technology into Computer Science Education, </booktitle> <year> 1997. </year>
Reference-contexts: This was done recently with encouraging success in an algorithms course at Elon College. The instructor also made extensive use of LINK's graphical user interface and interactive algorithm animations in class. A discussion of LINK's role in computer science education is found in <ref> [2] </ref>. 7 Conclusion The early development and primary designers and developers of LINK are detailed and acknowledged, respectively, in [4], while the current system is described in the manual available from the web site.
Reference: [3] <author> J. Berry and N. Dean. </author> <title> Market basket analysis with LINK. </title> <note> http://dimacs.rutgers.edu/Projects/LINK.html, 1996. </note>
Reference-contexts: Furthermore, the STk command language used by LINK makes it possible to pose interactive queries such as: find all purchases in which both a snack food item and a beverage were purchased. A paper describing this work in more detail is available at the LINK web site <ref> [3] </ref>. 6 LINK as an educational tool LINK's flexible interface makes it an valuable educational tool, both in the classroom and as a vehicle for interesting assignments. The key binding example discussed above (see Figure 6) enables the instructor to present the forefather concept as a puzzle to engage students.
Reference: [4] <author> J. Berry, N. Dean, P. Fasel, M. Goldberg, E. Johnson, J. MacCuish, G. Shannon, and S. Skiena. </author> <title> LINK: A combinatorics and graph theory workbench for applications and research. </title> <type> Technical Report 95-15, </type> <note> Center for Discrete Mathematics and Theoretical Computer Science (see also: http://dimacs.rutgers.edu), Piscataway, </note> <institution> NJ, </institution> <year> 1995. </year>
Reference-contexts: The instructor also made extensive use of LINK's graphical user interface and interactive algorithm animations in class. A discussion of LINK's role in computer science education is found in [2]. 7 Conclusion The early development and primary designers and developers of LINK are detailed and acknowledged, respectively, in <ref> [4] </ref>, while the current system is described in the manual available from the web site. Jonathan Berry took over the direction of the project in June, 1995, and spent a year at DIMACS preparing the public release.
Reference: [5] <author> G. Cherlin and B. Latka. </author> <title> A decision problem involving tournaments. </title> <type> Technical Report 96-11, </type> <institution> Center for Discrete Mathematics and Theoretical Computer Science, </institution> <year> 1996. </year>
Reference-contexts: An antichain of tournaments is a set for which it is impossible to embed any tournament in the set within any other. Latka is interested in the construction of infinite antichains of tournaments. <ref> [5, 7] </ref>. Arguments to prove that a given set of tournaments is an antichain typically show that a specific sub-tournament of any given tournament cannot be mapped to any sub-tournament of any other tournament in that class. <p> Figure 10 shows an instance of a special class of tournaments defined by Latka (see <ref> [5, 7] </ref> for details), and an induced sub-tournament extracted by pointing and clicking (see the LINK web page for a color image).
Reference: [6] <author> E. Gallesio. </author> <title> The stk reference manual. </title> <type> Technical Report RT 95-31a, </type> <institution> I3S CNRS, Universite de Nice - Sophia An-tipolis, France, </institution> <year> 1995. </year>
Reference-contexts: Currently, LINK runs only on Unix systems (including Linux), but there is no major obstacle preventing a port to Windows, since the graphics system upon which LINK relies, STk <ref> [6] </ref>, has already been ported. LINK for Windows is anticipated before the end of 1997. With further development, LINK can become a formidible tool for prototyping, teaching, and experimentation.
Reference: [7] <author> B. Latka. </author> <title> Finitely constrained classes of homogeneous directed graphs. </title> <journal> The Journal of Symbolic Logic, </journal> <volume> 59(1):124 139, </volume> <month> March </month> <year> 1994. </year>
Reference-contexts: An antichain of tournaments is a set for which it is impossible to embed any tournament in the set within any other. Latka is interested in the construction of infinite antichains of tournaments. <ref> [5, 7] </ref>. Arguments to prove that a given set of tournaments is an antichain typically show that a specific sub-tournament of any given tournament cannot be mapped to any sub-tournament of any other tournament in that class. <p> Figure 10 shows an instance of a special class of tournaments defined by Latka (see <ref> [5, 7] </ref> for details), and an induced sub-tournament extracted by pointing and clicking (see the LINK web page for a color image).
Reference: [8] <author> E. Makinen. </author> <title> How to draw a hypergraph. </title> <journal> International Journal of Computer Mathematics, </journal> <volume> 34:177185, </volume> <year> 1990. </year>
Reference-contexts: A directed hyperedge has been defined to be a set of vertices in which one vertex is specified to be a sink, and the other vertices are assumed to precede that vertex <ref> [8] </ref>. We give a more general definition: a directed hyperedge is simply a sequence of vertices. A mixed hypergraph is shown in Figure 1, and a mixed binary graph with multiple edges is shown in Figure 2.
Reference: [9] <author> B. McKay. </author> <title> Nauty user's guide. </title> <type> Technical Report TR-CS-90-02, </type> <institution> Australian National University, </institution> <year> 1990. </year>
Reference-contexts: The latter test uses nauty, Brendan McKay's well-known and practical isomorphism testing tool. <ref> [9] </ref>. * Routines to find the neighbors and incident edges of vertices. These routines use Collection functionality to return appropriate answers for undirected, directed, and mixed graphs.
Reference: [10] <author> K. Mehlhorn and S. Nahger. Leda: </author> <title> A platform for combinatorial and geometric computing. </title> <journal> CACM, </journal> <volume> 38(1):96102, </volume> <month> Jan </month> <year> 1995. </year>
Reference-contexts: Graph views with a few thousand objects have been used, but these took several minutes to load on a Sparcstation 5. Several other graph manipulation systems have been designed using Tk, including Graphlet 1 , which is built on top of the LEDA C++ library <ref> [10] </ref>. However, these systems rely on Tcl, a language more similar to operating system shell scripting languages than high-level programming languages. LINK's command interface, on the other hand, offers the mathematician or computer scientist a high-level Scheme language interface with full object-oriented access to Tk.
Reference: [11] <author> M. Mevenkamp, N. Dean, and C. Monma. </author> <title> NETPAD user's guide and reference guide, </title> <year> 1990. </year>
Reference-contexts: None, however, has resulted in a product with influence comparable to the familiar symbolic mathematics packages. Some notable existing systems for discrete mathematics are Com-binatorica [14], Steven Skiena's extension package for Mathe-matica, NETPAD <ref> [11] </ref> due to Nathaniel Dean and others at Bell-core, SetPlayer [1], due to Mark Goldberg and his students at Rensselaer Polytechnic Institute, and Gregory Shannon et. al.'s GraphLab [13]. For various reasons, none of these systems has the potential to be a widely-useful environment for both graph manipulation and computation.
Reference: [12] <author> J. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference: [13] <author> G. Shannon, L. Meeden, and D. Friedman. SchemeGraphs: </author> <title> An object-oriented environment for manipulating graphs, </title> <booktitle> 1990. Software and documentation. </booktitle>
Reference-contexts: Some notable existing systems for discrete mathematics are Com-binatorica [14], Steven Skiena's extension package for Mathe-matica, NETPAD [11] due to Nathaniel Dean and others at Bell-core, SetPlayer [1], due to Mark Goldberg and his students at Rensselaer Polytechnic Institute, and Gregory Shannon et. al.'s GraphLab <ref> [13] </ref>. For various reasons, none of these systems has the potential to be a widely-useful environment for both graph manipulation and computation.
Reference: [14] <author> S. Skiena. </author> <title> Implementing Discrete Mathematics: Combinatorics and Graph Theory with Mathematica. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year> <month> 8 </month>
Reference-contexts: None, however, has resulted in a product with influence comparable to the familiar symbolic mathematics packages. Some notable existing systems for discrete mathematics are Com-binatorica <ref> [14] </ref>, Steven Skiena's extension package for Mathe-matica, NETPAD [11] due to Nathaniel Dean and others at Bell-core, SetPlayer [1], due to Mark Goldberg and his students at Rensselaer Polytechnic Institute, and Gregory Shannon et. al.'s GraphLab [13].
References-found: 14

