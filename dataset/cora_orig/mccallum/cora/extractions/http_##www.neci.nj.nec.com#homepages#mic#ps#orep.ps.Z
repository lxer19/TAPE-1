URL: http://www.neci.nj.nec.com/homepages/mic/ps/orep.ps.Z
Refering-URL: http://www.neci.nj.nec.com/homepages/mic/publications.html
Root-URL: 
Title: Computer-Othello Tournament  
Author: Michael Buro 
Date: Februar 1994  
Address: Bericht Nr. 141 Reihe Informatik  
Affiliation: FB 17 Mathematik/Informatik Universitat Paderborn  
Note: The 1st International Paderborn  
Abstract-found: 0
Intro-found: 0
Reference: [LeeMah88] <author> Lee, Kai-Fu and Mahajan, Sanjoy: </author> <title> A Pattern Classification Approach to Evaluation Function Learning, </title> <booktitle> Artificial Intelligence 36 (1988), </booktitle> <pages> pp. 1-25 </pages>
Reference-contexts: Looking at the great resonance we think that it is likely that there will be the 2nd International Paderborn Computer-Othello Tournament in 1994. 3 2 Entry Descriptions LOGISTELLO (Michael Buro - buro@uni-paderborn.de) One of the strongest Othello program of the last decade BILL <ref> [LeeMah88] </ref> has inspired the work on LOGISTELLO. The idea was to build a fast evaluation function which bases entirely on pattern recognition and statistic approaches and needs no manual tuning at all.
Reference: [LeeMah90] <author> Lee, Kai-Fu and Mahajan, Sanjoy: </author> <title> The Development of a World Class Othello Program, </title> <booktitle> Artificial Intelligence 43 (1990), </booktitle> <pages> pp. 21-36 </pages>
Reference-contexts: The edge table consists of entries for all configurations of 8 edge squares and the 2 adjacent 'X' squares, with the value for black and for white, with white to move and with black to move. These values are calculated more or less as in <ref> [LeeMah90] </ref>, but with less weight for stability and more for mobility. Also there is an algorithm to adjust for disturbing interactions between edges. The coefficients for the evaluation function change fluently every half move as the game progresses.
Reference: [Ros82] <author> Rosenbloom, P. S.: </author> <title> A World-Championship-Othello Program, </title> <booktitle> Artificial Intelligence 19 (1982), </booktitle> <pages> pp. 279-319 9 </pages>
Reference-contexts: With the translation of assembler to C, a few bugs were introduced that effected the speed but not the correctness of the endgame search. The program uses iterative deepening and zero-window alpha-beta search. The evaluation function is essentially a modification of the one described in <ref> [Ros82] </ref>, i.e. a linear combination of a measure of mobility (move counting for both sides), two different measures of "potential mobility" and edge evaluation.
References-found: 3

