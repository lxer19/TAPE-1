URL: http://www.it.kth.se/docs/Reports/paradis/PSTV94.ps
Refering-URL: http://www.it.kth.se/docs/Reports/paradis/
Root-URL: http://www.it.kth.se
Email: Email: maria@it.kth.se  
Phone: Phone: +46 8 752 14 96, Fax: +46 8 751 17 93,  
Title: Structural Decomposition  
Author: Maria Hultstrom 
Keyword: Keyword Codes: F.4.3 Keywords: Mathematical Logic and Formal Languages, Formal Languages  
Address: 204, S-164 40 Kista, Sweden,  
Affiliation: Department of Teleinformatics, Royal Institute of Technology, Electrum  
Abstract: We present an algorithm for the decomposition of a monolithic LOTOS process into two processes, whose composition by the parallel operator is observation equivalent to the original one. Repeated application permits the generation of more than two processes. The algorithm is defined on labelled transition systems and, hence, its application to any process algebra with a similar notion of parallel composition is straightforward. The transformation is based on a given partition of the actions into two subsets, corresponding to the action sets of the generated processes. The main interest of the transformation is that it makes explicit all the parallelism of the original behaviour. The Structural Decomposition has several applications, like the decomposition of functionality, modularization, synthesizing of protocols, decomposition of tests, etc. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Bolognesi and E. Brinksma. </author> <title> An introduction to the iso specification language LOTOS. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 14 </volume> <pages> 25-59, </pages> <year> 1987. </year>
Reference-contexts: u u u s n A d u s j b A Au u s j b Q Q d c u s n u - A b a u u s 0 b A Au u s 0 a 3 LOTOS In this paper we only consider Basic LOTOS <ref> [1] </ref>. Moreover, as the behaviours are specified in a monolithic style [11] only those operators needed for this style, i. e. action prefix, stop, alternative, and the parallel operator and hiding operator will be used.
Reference: [2] <author> LotosPhere Project. </author> <title> Correctness preserving transformations. </title> <type> Technical Report Lo/WP1/T1.2/N0020, </type> <institution> ESPRIT Ref:2304, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: 1 Introduction One approach to the verification of the correctness of a design step is to perform only transformations which have been verified in advance. These are commonly known as correctness preserving transformations (CPTs). The generally used correctness preserving transformations are classified in <ref> [2] </ref> based on their design goals. One of these CPTs is the functional decomposition, whose main idea is to transform a black box description into a white box description, making its internal structure visible.
Reference: [3] <author> S. Pavon, M. Hultstrom, J. Quemada, D. de Frutos, and Y. Ortega. </author> <title> Inverse expansion. </title> <booktitle> In Proc. 4 th International Conference on Formal Description Techniques, </booktitle> <year> 1991. </year>
Reference-contexts: The Structural Decomposition is related to other transformations described in the literature, such as, for example, <ref> [3, 4, 5, 6, 7, 8, 9, 10] </ref>. The main contribution of the Structural Decomposition with respects to the former algorithms, is that the potential parallelism executing in a specification is made explicit. The former algorithms achieve a very low degree of parallelism, except in [3] and partly in [4]. <p> The main contribution of the Structural Decomposition with respects to the former algorithms, is that the potential parallelism executing in a specification is made explicit. The former algorithms achieve a very low degree of parallelism, except in <ref> [3] </ref> and partly in [4]. The earlier work on the Inverse Expansion [3, 4] was based on the same idea and maintained the parallelism in the specification. However, it only worked for adjusted monolithic LOTOS specifications and could not deal with non-determinism [4] nor recursion [3]. <p> The main contribution of the Structural Decomposition with respects to the former algorithms, is that the potential parallelism executing in a specification is made explicit. The former algorithms achieve a very low degree of parallelism, except in [3] and partly in [4]. The earlier work on the Inverse Expansion <ref> [3, 4] </ref> was based on the same idea and maintained the parallelism in the specification. However, it only worked for adjusted monolithic LOTOS specifications and could not deal with non-determinism [4] nor recursion [3]. <p> degree of parallelism, except in <ref> [3] </ref> and partly in [4]. The earlier work on the Inverse Expansion [3, 4] was based on the same idea and maintained the parallelism in the specification. However, it only worked for adjusted monolithic LOTOS specifications and could not deal with non-determinism [4] nor recursion [3]. The Structural Decomposition is a continuation of the work presented in [3] and is applicable on a general monolithic LOTOS specification, in contrast to [3, 4]. Moreover, it has overcome the problems of non-determinism and recursion. <p> However, it only worked for adjusted monolithic LOTOS specifications and could not deal with non-determinism [4] nor recursion <ref> [3] </ref>. The Structural Decomposition is a continuation of the work presented in [3] and is applicable on a general monolithic LOTOS specification, in contrast to [3, 4]. Moreover, it has overcome the problems of non-determinism and recursion. <p> However, it only worked for adjusted monolithic LOTOS specifications and could not deal with non-determinism [4] nor recursion [3]. The Structural Decomposition is a continuation of the work presented in [3] and is applicable on a general monolithic LOTOS specification, in contrast to <ref> [3, 4] </ref>. Moreover, it has overcome the problems of non-determinism and recursion. The decomposition is based on a given partition of the actions in the specification into two classes where each generated sub-process performs actions belonging to its class. <p> This extension is straightforward if no non-determinism is present. The algorithms presented in this paper could be joined with the algorithm for Visible Communication in <ref> [3] </ref> to perform the desired result. When treating non-determinism, the extension becomes more complex, as the distribution of the non-determinism between the two obtained sub-behaviours is not evident. <p> Another obvious extension is to consider LOTOS specifications which include data types. As mentioned in the introduction, our work is a continuation of <ref> [3] </ref>, where we presented algorithms for the decomposition of an adjusted monolithic LOTOS behaviour which could be expressed without introducing synchronizations. These algorithms were a further elaboration of those presented in [5]. <p> As mentioned in the introduction, our work is a continuation of [3], where we presented algorithms for the decomposition of an adjusted monolithic LOTOS behaviour which could be expressed without introducing synchronizations. These algorithms were a further elaboration of those presented in [5]. Except in <ref> [3, 4, 5] </ref>, there do not exist to our knowledge any other work on the functional decomposition with the point of view presented in this article. <p> Hence, the executing parallelism in the specification is lost. * In [4] one of the algorithms of <ref> [3] </ref> has been further elaborated and may deal with recursive behaviours. It also contains an elaboration of the algorithm in [5] mentioned above, where optimizations of the introduction of internal events is defined. * [7] contains algorithms of different complexity for decomposing a monolithic LOTOS process into two subprocesses.
Reference: [4] <author> S. Pavon, J. Quemada, D. Larrabeiti, and M. Hultstrom. </author> <title> Expansion inversa: Aplicacion inversa del teorema de expansion para descomponer un sistema lotos en subprocesos en paralelo. </title> <booktitle> In III Jornadas de Concurrencia, </booktitle> <year> 1993, </year> <institution> Universidad Politecnica de Valencia, </institution> <year> 1993. </year>
Reference-contexts: The Structural Decomposition is related to other transformations described in the literature, such as, for example, <ref> [3, 4, 5, 6, 7, 8, 9, 10] </ref>. The main contribution of the Structural Decomposition with respects to the former algorithms, is that the potential parallelism executing in a specification is made explicit. The former algorithms achieve a very low degree of parallelism, except in [3] and partly in [4]. <p> The main contribution of the Structural Decomposition with respects to the former algorithms, is that the potential parallelism executing in a specification is made explicit. The former algorithms achieve a very low degree of parallelism, except in [3] and partly in <ref> [4] </ref>. The earlier work on the Inverse Expansion [3, 4] was based on the same idea and maintained the parallelism in the specification. However, it only worked for adjusted monolithic LOTOS specifications and could not deal with non-determinism [4] nor recursion [3]. <p> The main contribution of the Structural Decomposition with respects to the former algorithms, is that the potential parallelism executing in a specification is made explicit. The former algorithms achieve a very low degree of parallelism, except in [3] and partly in [4]. The earlier work on the Inverse Expansion <ref> [3, 4] </ref> was based on the same idea and maintained the parallelism in the specification. However, it only worked for adjusted monolithic LOTOS specifications and could not deal with non-determinism [4] nor recursion [3]. <p> a very low degree of parallelism, except in [3] and partly in <ref> [4] </ref>. The earlier work on the Inverse Expansion [3, 4] was based on the same idea and maintained the parallelism in the specification. However, it only worked for adjusted monolithic LOTOS specifications and could not deal with non-determinism [4] nor recursion [3]. The Structural Decomposition is a continuation of the work presented in [3] and is applicable on a general monolithic LOTOS specification, in contrast to [3, 4]. Moreover, it has overcome the problems of non-determinism and recursion. <p> However, it only worked for adjusted monolithic LOTOS specifications and could not deal with non-determinism [4] nor recursion [3]. The Structural Decomposition is a continuation of the work presented in [3] and is applicable on a general monolithic LOTOS specification, in contrast to <ref> [3, 4] </ref>. Moreover, it has overcome the problems of non-determinism and recursion. The decomposition is based on a given partition of the actions in the specification into two classes where each generated sub-process performs actions belonging to its class. <p> The idea is to introduce synchronization events which are hidden from the outside so that observation equivalence is maintained. This has been used earlier in related work, for example in <ref> [5, 4, 7] </ref>. The difference of our approach is that instead of introducing synchronization events in all places, we isolate zones which interleave with each other and thus, only need to introduce synchronization events to separate these zones from each other. <p> As mentioned in the introduction, our work is a continuation of [3], where we presented algorithms for the decomposition of an adjusted monolithic LOTOS behaviour which could be expressed without introducing synchronizations. These algorithms were a further elaboration of those presented in [5]. Except in <ref> [3, 4, 5] </ref>, there do not exist to our knowledge any other work on the functional decomposition with the point of view presented in this article. <p> Hence, the executing parallelism in the specification is lost. * In <ref> [4] </ref> one of the algorithms of [3] has been further elaborated and may deal with recursive behaviours.
Reference: [5] <author> Santiago Pavon Gomez. Contribucion al Analisis y Transformacion de Especificaciones LOTOS. </author> <type> PhD thesis, </type> <institution> E.T.S.I. Telecomunicacion, Madrid, Spain, </institution> <year> 1990. </year>
Reference-contexts: The Structural Decomposition is related to other transformations described in the literature, such as, for example, <ref> [3, 4, 5, 6, 7, 8, 9, 10] </ref>. The main contribution of the Structural Decomposition with respects to the former algorithms, is that the potential parallelism executing in a specification is made explicit. The former algorithms achieve a very low degree of parallelism, except in [3] and partly in [4]. <p> The idea is to introduce synchronization events which are hidden from the outside so that observation equivalence is maintained. This has been used earlier in related work, for example in <ref> [5, 4, 7] </ref>. The difference of our approach is that instead of introducing synchronization events in all places, we isolate zones which interleave with each other and thus, only need to introduce synchronization events to separate these zones from each other. <p> As mentioned in the introduction, our work is a continuation of [3], where we presented algorithms for the decomposition of an adjusted monolithic LOTOS behaviour which could be expressed without introducing synchronizations. These algorithms were a further elaboration of those presented in <ref> [5] </ref>. Except in [3, 4, 5], there do not exist to our knowledge any other work on the functional decomposition with the point of view presented in this article. There do exist similar works which do not maintain the existing parallelism of a monolith: * [5] includes, except a first approach <p> As mentioned in the introduction, our work is a continuation of [3], where we presented algorithms for the decomposition of an adjusted monolithic LOTOS behaviour which could be expressed without introducing synchronizations. These algorithms were a further elaboration of those presented in [5]. Except in <ref> [3, 4, 5] </ref>, there do not exist to our knowledge any other work on the functional decomposition with the point of view presented in this article. <p> elaboration of those presented in <ref> [5] </ref>. Except in [3, 4, 5], there do not exist to our knowledge any other work on the functional decomposition with the point of view presented in this article. There do exist similar works which do not maintain the existing parallelism of a monolith: * [5] includes, except a first approach to the algorithms mentioned above, an algorithm which works on a general monolithic LOTOS specification by introducing internal synchronization events between, more or less, every transition in the original be haviour. <p> Hence, the executing parallelism in the specification is lost. * In [4] one of the algorithms of [3] has been further elaborated and may deal with recursive behaviours. It also contains an elaboration of the algorithm in <ref> [5] </ref> mentioned above, where optimizations of the introduction of internal events is defined. * [7] contains algorithms of different complexity for decomposing a monolithic LOTOS process into two subprocesses. The interaction between the two subprocesses is either synchronous or asynchronous communication.
Reference: [6] <author> F. Khendek, G. v. Bochmann, and C. Kant. </author> <title> New results on deriving protocol specifications from service specifications. </title> <note> In SIGCOM '89, 1989. Computer Communications Review 19:4. </note>
Reference-contexts: The Structural Decomposition is related to other transformations described in the literature, such as, for example, <ref> [3, 4, 5, 6, 7, 8, 9, 10] </ref>. The main contribution of the Structural Decomposition with respects to the former algorithms, is that the potential parallelism executing in a specification is made explicit. The former algorithms achieve a very low degree of parallelism, except in [3] and partly in [4]. <p> The interaction between the two subprocesses is either synchronous or asynchronous communication. These algorithms maintain the observational equivalence, but do not keep the parallelism. * In <ref> [6] </ref>, an algorithm is presented for obtaining an arbitrary number of protocol entities from a given service specification via introducing synchronization events.
Reference: [7] <author> R. Langerak. </author> <title> Decomposition of functionality: A correctness preserving lotos transformation. </title> <booktitle> In Proc. IFIP WG 6.2 Symp. on Protocol Specification, Testing, and Verification X, </booktitle> <pages> pages 229-242, </pages> <address> Ottawa, Canada, </address> <year> 1990. </year> <booktitle> IFIP WG 6.1, </booktitle> <publisher> North-Holland. </publisher>
Reference-contexts: The Structural Decomposition is related to other transformations described in the literature, such as, for example, <ref> [3, 4, 5, 6, 7, 8, 9, 10] </ref>. The main contribution of the Structural Decomposition with respects to the former algorithms, is that the potential parallelism executing in a specification is made explicit. The former algorithms achieve a very low degree of parallelism, except in [3] and partly in [4]. <p> The idea is to introduce synchronization events which are hidden from the outside so that observation equivalence is maintained. This has been used earlier in related work, for example in <ref> [5, 4, 7] </ref>. The difference of our approach is that instead of introducing synchronization events in all places, we isolate zones which interleave with each other and thus, only need to introduce synchronization events to separate these zones from each other. <p> It also contains an elaboration of the algorithm in [5] mentioned above, where optimizations of the introduction of internal events is defined. * <ref> [7] </ref> contains algorithms of different complexity for decomposing a monolithic LOTOS process into two subprocesses. The interaction between the two subprocesses is either synchronous or asynchronous communication. <p> The overall behaviour is restricted to choices between events of the same protocol entity and the present parallelism is not kept. * [8] is an extension of <ref> [7] </ref> where the decomposition of a not expanded , i. e. non-monolithic, LOTOS process is treated. The relation maintained is observation congruence.
Reference: [8] <author> E.Brinksma, R. Langerak, and P. Broekroelofs. </author> <title> Functionality decomposition by compositional correctness preserving transformation. </title> <booktitle> Computer Aided Verification, CAV 93, </booktitle> <address> Crete, Greece, </address> <year> 1993. </year>
Reference-contexts: The Structural Decomposition is related to other transformations described in the literature, such as, for example, <ref> [3, 4, 5, 6, 7, 8, 9, 10] </ref>. The main contribution of the Structural Decomposition with respects to the former algorithms, is that the potential parallelism executing in a specification is made explicit. The former algorithms achieve a very low degree of parallelism, except in [3] and partly in [4]. <p> The overall behaviour is restricted to choices between events of the same protocol entity and the present parallelism is not kept. * <ref> [8] </ref> is an extension of [7] where the decomposition of a not expanded , i. e. non-monolithic, LOTOS process is treated. The relation maintained is observation congruence.
Reference: [9] <author> J. Parrow. </author> <title> Submodule construction as equation solving in CCS. </title> <journal> Theoretical Computer Science, </journal> <volume> 68 </volume> <pages> 175-202, </pages> <year> 1989. </year>
Reference-contexts: The Structural Decomposition is related to other transformations described in the literature, such as, for example, <ref> [3, 4, 5, 6, 7, 8, 9, 10] </ref>. The main contribution of the Structural Decomposition with respects to the former algorithms, is that the potential parallelism executing in a specification is made explicit. The former algorithms achieve a very low degree of parallelism, except in [3] and partly in [4]. <p> Another type of transformations is based on protocol synthesizing. The idea here is to find one missing submodule specification, which together with the already specified sub-modules preserve some equivalence relation with the general specification. Some examples of this idea can be found in: * In <ref> [9] </ref>, this idea is based on CCS and on a procedure for solving equations of the form: (AjX) n L = B, where X is the unknown. The obtained submodule is a result of automatic transformations and guidance of the user.
Reference: [10] <author> Xinxin Liu. </author> <title> Specification and Decomposition in Concurrency. </title> <type> PhD thesis, </type> <institution> University of Aalborg, Denmark, </institution> <year> 1992. </year>
Reference-contexts: The Structural Decomposition is related to other transformations described in the literature, such as, for example, <ref> [3, 4, 5, 6, 7, 8, 9, 10] </ref>. The main contribution of the Structural Decomposition with respects to the former algorithms, is that the potential parallelism executing in a specification is made explicit. The former algorithms achieve a very low degree of parallelism, except in [3] and partly in [4]. <p> The obtained submodule is a result of automatic transformations and guidance of the user. Observational equivalence is maintained between the given specification and the composition of the submodules. * In <ref> [10] </ref> the solving of equation systems of form: C 1 (X) P 1 ; ; C n (X) P n is treated, where C i is a context, P i is an arbitrary process, is the bisimulation and X is the unknown process to be found (if possible).
Reference: [11] <author> Vissers, Scollo, and van Sinderen. </author> <title> Architecture and specification style in formal descriptions of distributed systems. </title> <booktitle> In IFIP Symp. on prot , 1988. </booktitle>
Reference-contexts: Moreover, as the behaviours are specified in a monolithic style <ref> [11] </ref> only those operators needed for this style, i. e. action prefix, stop, alternative, and the parallel operator and hiding operator will be used.
Reference: [12] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: Moreover, as the behaviours are specified in a monolithic style [11] only those operators needed for this style, i. e. action prefix, stop, alternative, and the parallel operator and hiding operator will be used. The application of the expansion theorem <ref> [12] </ref> to a non-monolithic behaviour permits the decomposition of any Basic LOTOS behaviour. constant operator stop ! P action prefix operator ; L [ fig x P ! P alternative operator [ ] P x P ! P parallel operator j [ ]j P x P (L) x P ! P <p> When no interleaved sub-LTSes exist, we must take the sub-LTSes into account. The selected one will be unique with respect to the selected label-set. We will chose one which is maximal. This is defined as (the restriction operator of CCS <ref> [12] </ref>): Definition 5.1 (LT S BnA ) The labelled transition system LT S BnA representing the labelled transition system LT S B restricted to events in L B A is defined as: Given LT S B and the restriction set A, LT S BnA = hS BnA ; L BnA ; <p> We know by definition <ref> [12] </ref> that B [A 1 [ A 2 ] is observational equivalent to hide A I in B 0 [A 1 [ A 2 [ A I ], where B' was obtained from Ext.
Reference: [13] <author> ISO. </author> <title> LOTOS a Formal Description Technique based on the Temporal Ordering of Observational Behaviour. IS 8807, </title> <address> TC97/SC21, </address> <year> 1988. </year>
Reference-contexts: The parallel operator will be renamed to jjj for the case of pure interleaving. A Basic LOTOS behaviour can be interpreted as a labelled transition system, via the axioms and inference rules of the language <ref> [13] </ref>. The generation of a LOTOS behaviour from a LTS, where the behaviour includes action prefix, stop, alternative and process definitions, is straightforward.
Reference: [14] <author> Maria Hultstrom. </author> <title> Structural decomposition. </title> <institution> Technical Report TRITA-IT R 94:13,ISSN 1103-534X,ISRN. KTH/IT/R -94:13 -SE, Royal Institute of Technology, </institution> <year> 1994. </year> <note> to appear. </note>
Reference-contexts: One simple and not very efficient algorithm for finding interleaved sub-LTSes could be described as (a full definition can be found in <ref> [14] </ref>): Given a labelled transition system LT S B and the partitions A 1 and A 2 we want to find sub-LTSes LT S 1 and LT S 2 such as L 1 A 1 and L 2 A 2 and LT S 1 jjj LT S 2 is an interleaved <p> Proof: The proof of the proposition can be found in <ref> [14] </ref>. 7 Example As an example to illustrate the transformation we have developed a simple access protocol. An user wants to access a system for a transaction. The system permits only one user at a time.
Reference: [15] <author> J. Quemada, S. Pavon, and A. Fernandez. </author> <title> State Exploration by Transformation with LOLA. In Workshop on Automatic Verification Methods for Finite State Systems, </title> <address> Grenoble, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: The transformation presented in this paper will be implemented in the tool LOLA <ref> [15] </ref>, to permit application on real-size examples. 8 Conclusions and related work In this paper we have presented an algorithm for the decomposition of a general monolithic LOTOS behaviour into two sub-behaviours, which composed in parallel maintain observational equivalence with the original one. <p> We have also presented a simple example for the illustration of our transformation. We will define a more efficient algorithm for finding interleaved sub-behaviours and implement the transformation in the tool LOLA <ref> [15] </ref>, enabling the evaluation of real-size examples. This work can be extended in several directions. First of all, the transformation should permit visible synchronization events between the two sub-behaviours.
Reference: [16] <author> J.F. Groote and F. Moller. </author> <title> Verification of parallel systems via decomposition. In Pro ceedings of CONCUR 92, </title> <editor> W.R. Cleaveland (ed), </editor> <booktitle> Lecture Notes in Computer Science 630, </booktitle> <address> pp62-76. </address> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: The decidability of these equations are studied. Another related issue, the decomposition of a logical specification formula F into sub-formulas F 1 ; ; F n which should express properties of the decomposed processes is also examined. Related work can also be found in <ref> [16] </ref> where decomposition is used as a vehicle for verifying parallel systems. Acknowledgements. I wish to express my gratitude to Juan Quemada who came up with the idea to isolate zones of interleavings and for his encouragement.
References-found: 16

