URL: ftp://ftp.cs.colorado.edu/users/andre/papers/ISAW3.ps
Refering-URL: http://www.cs.colorado.edu/~andre/papers.html
Root-URL: http://www.cs.colorado.edu
Email: fandre,dennis,alwg@cs.colorado.edu  
Title: Versioned Software Architecture  
Author: Andre van der Hoek, Dennis Heimbigner, and Alexander L. Wolf 
Address: Boulder, CO 80309 USA  
Affiliation: Software Engineering Research Laboratory Department of Computer Science University of Colorado  
Abstract: In this position paper we introduce a novel use of software architecture. Rather than following the traditional focus on design, we propose to use the notion of versioned software architecture to support other activities in the software life cycle. In particular, we are investigating how the activities of configuration management and software deployment can benefit from the availability of an explicit architectural representation that is enhanced with versioning capabilities. Below, we present some of the initial results of this investigation. We motivate our research into versioned software architecture, present some usage scenarios in the context of configuration management and software deployment, and conclude with an outlook at the future work that remains to be done. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Allen and D. Garlan. </author> <title> A Formal Basis for Architectural Connection. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 6(3) </volume> <pages> 213-249, </pages> <month> July </month> <year> 1997. </year>
Reference-contexts: Additional research has been concerned with the verification of particular properties of an architecture once it has been created. Methods exist that, for example, can verify whether an architecture is free of deadlock <ref> [1] </ref> or whether an architecture eventually reaches a certain desired state [2]. Other ADLs lend themselves to the detection of inconsistencies among components that have been put together in an architecture. Architectural mismatches, such as competing threads of control, have been uncovered this way [3].
Reference: [2] <author> S.C. Cheung, D Giannakopoulou, and J. Kramer. </author> <title> Verification of Liveness Properties Using Compositional Reachability Analysis. </title> <booktitle> In Proceedings of the Sixth Eu-ropean Software Engineering Conference, number 1301 in Lecture Notes in Computer Science, </booktitle> <pages> pages 227-243, </pages> <address> New York, New York, </address> <month> September </month> <year> 1997. </year> <note> Springer-Verlag. </note>
Reference-contexts: Additional research has been concerned with the verification of particular properties of an architecture once it has been created. Methods exist that, for example, can verify whether an architecture is free of deadlock [1] or whether an architecture eventually reaches a certain desired state <ref> [2] </ref>. Other ADLs lend themselves to the detection of inconsistencies among components that have been put together in an architecture. Architectural mismatches, such as competing threads of control, have been uncovered this way [3]. Our research takes software architecture in a rather different direction. <p> It is for these reasons that we have chosen our abstraction to be the combination of software architecture and version-ing. We are currently working on an implementation of the abstraction, which is based on Darwin [5] and its ability to specify constraints and behaviors as labeled transition systems <ref> [2] </ref>. 3 Usage Scenarios Although we have not yet constructed a configuration management or software deployment system that is based on the concept of versioned software architecture, we already have identified some of the desired and novel capabilities that are facilitated by the use of versioned software architecture in these domains.
Reference: [3] <editor> D. Compare, P. Inverardi, and A.L. Wolf. </editor> <booktitle> Uncovering Architectural Mismatch in Dynamic Behavior. Science of Computer Programming, </booktitle> <year> 1999. </year> <note> To appear. </note>
Reference-contexts: Other ADLs lend themselves to the detection of inconsistencies among components that have been put together in an architecture. Architectural mismatches, such as competing threads of control, have been uncovered this way <ref> [3] </ref>. Our research takes software architecture in a rather different direction. As opposed to focusing on design, we intend to leverage existing ADLs and their analysis methods 1 For a survey of existing ADLs, see [6]. to support other activities in the software life cycle.
Reference: [4] <editor> R.S. Hall, D.M. Heimbigner, A. van der Hoek, and A.L. Wolf. </editor> <title> An Architecture for Post-Development Configuration Management in a Wide-Area Network. </title> <booktitle> In Proceedings of the 1997 International Conference on Distributed Computing Systems, </booktitle> <pages> pages 269-278. </pages> <publisher> IEEE Computer Society, </publisher> <month> May </month> <year> 1997. </year>
Reference-contexts: Most notably, PCL [7], a language for system modeling that originated in the configuration management discipline, and the Software Dock <ref> [4] </ref>, a generic framework that supports software deployment, have adopted constructs to model the structure of a system. These constructs are similar to the ones commonly found in ADLs. This mere fact suggests that a common, architectural abstraction can be used as a basis for supporting these activities.
Reference: [5] <author> J. Magee, N. Dulay, S. Eisenbach, and J. Kramer. </author> <title> Specifying Distributed Software Architectures. </title> <booktitle> In Proceedings of the Fifth European Software Engineering Conference, number 989 in Lecture Notes in Computer Science, </booktitle> <pages> pages 137-153, </pages> <address> New York, New York, </address> <month> September </month> <year> 1995. </year> <note> Springer-Verlag. </note>
Reference-contexts: A versioned software architecture contains the information that is needed to support such activities. It is for these reasons that we have chosen our abstraction to be the combination of software architecture and version-ing. We are currently working on an implementation of the abstraction, which is based on Darwin <ref> [5] </ref> and its ability to specify constraints and behaviors as labeled transition systems [2]. 3 Usage Scenarios Although we have not yet constructed a configuration management or software deployment system that is based on the concept of versioned software architecture, we already have identified some of the desired and novel capabilities
Reference: [6] <author> N. Medvidovic and R.N. Taylor. </author> <title> A Framework for Classifying and Comparing Architecture Description Languages. </title> <booktitle> In Proceedings of the Sixth European Software Engineering Conference, number 1301 in Lecture Notes in Computer Science, </booktitle> <pages> pages 60-76, </pages> <address> New York, New York, </address> <month> September </month> <year> 1997. </year> <note> Springer-Verlag. </note>
Reference-contexts: Architectural mismatches, such as competing threads of control, have been uncovered this way [3]. Our research takes software architecture in a rather different direction. As opposed to focusing on design, we intend to leverage existing ADLs and their analysis methods 1 For a survey of existing ADLs, see <ref> [6] </ref>. to support other activities in the software life cycle. In particular, we are developing an abstraction, versioned software architecture, to support the activities of configuration management and software deployment. This abstraction is similar to software architecture in that it allows the modeling of components, interconnections, behaviors, and constraints.
Reference: [7] <author> E. Tryggeseth, B. Gulla, and R. Conradi. </author> <title> Modelling Sys--tems with Variability using the PROTEUS Configuration Language. In Software Configuration Management: </title> <booktitle> ICSE SCM-4 and SCM-5 Workshops Selected Papers, number 1005 in Lecture Notes in Computer Science, </booktitle> <pages> pages 216-240, </pages> <address> New York, New York, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Most notably, PCL <ref> [7] </ref>, a language for system modeling that originated in the configuration management discipline, and the Software Dock [4], a generic framework that supports software deployment, have adopted constructs to model the structure of a system. These constructs are similar to the ones commonly found in ADLs.
References-found: 7

