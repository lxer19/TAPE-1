URL: http://www.cs.unc.edu/~riely/papers/98TR-anetworks.ps.gz
Refering-URL: http://www.cs.unc.edu/~riely/
Root-URL: http://www.cs.unc.edu
Title: Type-Safe Execution of Mobile Agents in Anonymous Networks  
Author: Matthew Hennessy and James Riely 
Address: Brighton BN1 9QH ISSN 13503170  
Date: 3/98 June 1998  
Affiliation: UNIVERSITY OF SUSSEX COMPUTER SCIENCE  Computer Science School of Cognitive and Computing Sciences University of Sussex  
Pubnum: Report  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Abadi and A. D. Gordon. </author> <title> A calculus for cryptographic protocols: The spi calculus. </title> <type> Technical Report 414, </type> <institution> University of Cambridge Computer Laboratory, </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: A very different approach to system security is based on the use of cryptography and signatures. For example <ref> [1] </ref> presents a p-calculus based language which contain cryptographic constructs which ensure the exchange of data between trusted agents, while [3] contains a description of the application of this approach in a practical setting.
Reference: [2] <institution> Conference Record of the ACM Symposium on Principles of Programming Languages, </institution> <address> San Diego, </address> <month> January </month> <year> 1998. </year> <note> ACM Press. </note>
Reference: [3] <author> B. Bershad, B. Savage, P. Pardyak, E. Sirer, D. Becker, M. Fiuczynski, C. Chambers, and S. Eggers. </author> <title> Extensibility, safety and performance in the SPIN operating system. </title> <booktitle> In Symposium on Operating Systems Principles, </booktitle> <pages> pages 267284, </pages> <year> 1997. </year>
Reference-contexts: A very different approach to system security is based on the use of cryptography and signatures. For example [1] presents a p-calculus based language which contain cryptographic constructs which ensure the exchange of data between trusted agents, while <ref> [3] </ref> contains a description of the application of this approach in a practical setting. A Proofs A.1 Properties of the static type system First we prove two important properties of type systems with subtyping: Type Specialization and Weakening. PROPOSITION A.1 (TYPE SPECIALIZATION).
Reference: [4] <author> L. Cardelli and A. D. Gordon. </author> <booktitle> Mobile ambients. In Foundations of Software Science and Computational Structures, volume 1378 of Lecture Notes in Computer Science, </booktitle> <pages> pages 140155. </pages> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1998. </year>
Reference-contexts: The first two agents are running at location `, the third at location k. Moreover q and r share a private channel a of type A, allocated at ` and unknown to p. Unlike <ref> [4, 6] </ref>, agents are relatively lightweight in Dp. They are single-threaded and can be freely split and merged using structural rules and communication. As such, they are unnamed. Type-Safe Execution of Mobile Agents in Anonymous Networks 4 NOTATION. <p> In this study we used the language Dp [7], one of a number of distributed versions of the p-calculus [9]. For other variations see [6, 13]. The languages in <ref> [4, 5] </ref> are thematically similar although based on somewhat different principles.
Reference: [5] <author> R. DeNicola, G. Ferrari, R. Pugliese, and B. Venneri. </author> <title> Types for access control. </title> <type> Technical report, </type> <institution> Dipartimento di Sistemi e Informatica, Universita di Firenze, </institution> <year> 1997. </year>
Reference-contexts: In this study we used the language Dp [7], one of a number of distributed versions of the p-calculus [9]. For other variations see [6, 13]. The languages in <ref> [4, 5] </ref> are thematically similar although based on somewhat different principles. <p> An even richer type system is also proposed in [7] in which types correspond to capabilities, as in <ref> [5] </ref>, and an interesting topic for future research would be the extension of partial typing to these richer types.
Reference: [6] <author> C. Fournet, G. Gonthier, J.J. Levy, L. Marganget, and D. Remy. </author> <title> A calculus of mobile agents. </title> <editor> In U. Montanari and V. Sassone, editors, </editor> <booktitle> CONCUR: Proceedings of the International Conference on Concurrency Theory, volume 1119 of Lecture Notes in Computer Science, </booktitle> <pages> pages 406421, </pages> <address> Pisa, </address> <month> August </month> <year> 1996. </year> <title> Berlin: </title> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The first two agents are running at location `, the third at location k. Moreover q and r share a private channel a of type A, allocated at ` and unknown to p. Unlike <ref> [4, 6] </ref>, agents are relatively lightweight in Dp. They are single-threaded and can be freely split and merged using structural rules and communication. As such, they are unnamed. Type-Safe Execution of Mobile Agents in Anonymous Networks 4 NOTATION. <p> Moreover we have formalized the correctness of this strategy in terms of Subject Reduction and Type Safety theorems for a partial type system. In this study we used the language Dp [7], one of a number of distributed versions of the p-calculus [9]. For other variations see <ref> [6, 13] </ref>. The languages in [4, 5] are thematically similar although based on somewhat different principles.
Reference: [7] <author> Matthew Hennessy and James Riely. </author> <title> Resource access control in systems of mobile agents. </title> <type> Technical Report 2/98, </type> <institution> University of Sussex, Computer Science, </institution> <year> 1998. </year>
Reference-contexts: 1 Introduction In <ref> [7] </ref> we presented a type system for controlling the use of resources in a distributed system. The type system guarantees that resource access is always safe, in the sense that, for example, integer channels are always used with integers and boolean channels are always used with booleans. <p> The type system guarantees that resource access is always safe, in the sense that, for example, integer channels are always used with integers and boolean channels are always used with booleans. The type system of <ref> [7] </ref>, however, requires that all agents in the system be well-typed. In open systems, such as the internet, such global properties are impossible to verify. In this paper, we present a type system for partially typed networks, where only a subset of agents are assumed to be well typed. <p> In this paper, we present a type system for partially typed networks, where only a subset of agents are assumed to be well typed. This notion of partial typing is presented using the language Dp, from <ref> [7] </ref>. In Dp mobile agents are modeled as threads, using a thread language based on the p-calculus. Threads are located, carrying out computations at locations or sites. Located threads, or agents interact using local channels, or resources. In an open system, not all sites are necessarily benign. <p> To protect itself, a site must bar entry of any mobile agent that cannot be proven to use local resources as intended. The requirement that incoming agents be checked entails that the runtime semantics is of necessity more complicated than that of <ref> [7] </ref>. Each location must retain information about its local resources against which the incoming agents are checked. This information is encapsulated as a location type, giving the names of the resources available locally, together with their types; agent checking then amounts to a form of local runtime typechecking. <p> This information is encapsulated as a location type, giving the names of the resources available locally, together with their types; agent checking then amounts to a form of local runtime typechecking. The paper proceeds as follows. In the next section we review the language Dp of <ref> [7] </ref> and recall its standard semantics. While the paper is self contained, we rely on [7] for examples and motivation for Dp. This is followed, in Section 3, by a formal description of the modified run-time semantics, where sites retain local information against which incoming agents are checked. <p> The paper proceeds as follows. In the next section we review the language Dp of <ref> [7] </ref> and recall its standard semantics. While the paper is self contained, we rely on [7] for examples and motivation for Dp. This is followed, in Section 3, by a formal description of the modified run-time semantics, where sites retain local information against which incoming agents are checked. <p> The paper ends with a critique of both the run-time strategy and the typing system. 2 The Language We present the syntax and standard semantics of Dp. For a full treatment of the language, including many examples, see <ref> [7] </ref>. The language is a simplification and refinement of that introduced in [12]. 2.1 Syntax The syntax is given in Table 1. We defer the discussion of types, T, to Section 2.3. <p> Unlike [4, 6], agents are relatively lightweight in Dp. They are single-threaded and can be freely split and merged using structural rules and communication. As such, they are unnamed. Type-Safe Execution of Mobile Agents in Anonymous Networks 4 NOTATION. We adopt several notational conventions, as in <ref> [7] </ref>. * In the concrete syntax, move has greater binding power than composition. Thus ` :: p j q should be read (` :: p) j q. We adopt several standard abbreviations. For example, we routinely drop type annotations when they are not of interest. <p> Type-Safe Execution of Mobile Agents in Anonymous Networks 6 2.3 Types and Subtyping The purpose of the type system is to ensure proper use of base types, channels and locations. In this paper we use the simple type languages from <ref> [7, x4] </ref>, extended with base types for integers and booleans. <p> Thus locfa:A; b:Bg [C] = locfb:B; a:Ag [C]. But reordering is not allowed on abstract fields. Thus if B and C are different, then locfa:Ag [B; C] 6= locfa:Ag [C; B]. The subtyping relation (T S) is discussed at length in <ref> [7] </ref>. On base types and channel types there is no nontrivial subtyping; for example, chanhTi chanhT 0 i if and only if T = T 0 . <p> For example it will report an error at ` in (n ` k:K) P if there is a runtime error in P at location k. We should point out that this definition of run-time error is considerably weaker than that employed in <ref> [7] </ref>; in that paper, the notion of run-time error took into account not only to arity mismatches but also access violations. THEOREM 4.2 (TYPE SAFETY). If G ` P and ` 2 dom (D) then P err ` Proof. <p> Moreover we have formalized the correctness of this strategy in terms of Subject Reduction and Type Safety theorems for a partial type system. In this study we used the language Dp <ref> [7] </ref>, one of a number of distributed versions of the p-calculus [9]. For other variations see [6, 13]. The languages in [4, 5] are thematically similar although based on somewhat different principles. We have taken advantage of a rich type system for Dp, originally presented in [7], where not only do <p> used the language Dp <ref> [7] </ref>, one of a number of distributed versions of the p-calculus [9]. For other variations see [6, 13]. The languages in [4, 5] are thematically similar although based on somewhat different principles. We have taken advantage of a rich type system for Dp, originally presented in [7], where not only do channels have the types originally proposed in [11] for the p-calculus, but locations have types broadly similar to those of objects. An even richer type system is also proposed in [7] in which types correspond to capabilities, as in [5], and an interesting topic for future <p> We have taken advantage of a rich type system for Dp, originally presented in <ref> [7] </ref>, where not only do channels have the types originally proposed in [11] for the p-calculus, but locations have types broadly similar to those of objects. An even richer type system is also proposed in [7] in which types correspond to capabilities, as in [5], and an interesting topic for future research would be the extension of partial typing to these richer types.
Reference: [8] <author> Xavier Leroy and Francois Rouaix. </author> <title> Security properties of typed applets. </title> <booktitle> In ACM-POPL [2]. </booktitle>
Reference-contexts: Our work is different in that the correctness proof can be reconstructed efficiently, and therefore the producer need not supply an explict proof. For other examples of related work within this framework see <ref> [8, 14] </ref>. For example the former contains a number of schemes for typechecking incoming code for access violations to local private resources.
Reference: [9] <author> Robin Milner. </author> <title> The polyadic p-calculus: a tutorial. </title> <type> Technical Report ECS-LFCS-91-180, </type> <institution> Laboratory for Foundations of Computer Science, Department of Computer Science, University of Edinburgh, UK, </institution> <month> October </month> <year> 1991. </year> <title> Also in Logic and Algebra of Specification, </title> <editor> ed. F. L. Bauer, W. Brauer and H. Schwichtenberg, </editor> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: We use e to refer to names that might be of either type. The main syntactic categories of the language are as follows: * Threads, p-r, are (almost) terms of the ordinary polyadic p-calculus <ref> [9] </ref>. <p> Moreover we have formalized the correctness of this strategy in terms of Subject Reduction and Type Safety theorems for a partial type system. In this study we used the language Dp [7], one of a number of distributed versions of the p-calculus <ref> [9] </ref>. For other variations see [6, 13]. The languages in [4, 5] are thematically similar although based on somewhat different principles.
Reference: [10] <author> George Necula. </author> <title> Proof-carrying code. </title> <booktitle> In Conference Record of the ACM Symposium on Principles of Programming Languages, </booktitle> <address> Paris,France, </address> <month> January </month> <year> 1997. </year> <note> ACM Press. </note>
Reference-contexts: An even richer type system is also proposed in [7] in which types correspond to capabilities, as in [5], and an interesting topic for future research would be the extension of partial typing to these richer types. Our research is related to proposals for proof-carrying code outlined in <ref> [10] </ref>: code consumers, which in our case are locations, demand of code producers, in our case incoming threads, that their code is accompanied by a proof of correctness. This proof is checked by the consumer before the code is allowed to execute.
Reference: [11] <author> Benjamin Pierce and Davide Sangiorgi. </author> <title> Typing and subtyping for mobile processes. </title> <note> Mathematical Structures in Computer Science, 6(5):409454, 1996. Extended abstract in LICS '93. </note>
Reference-contexts: For other variations see [6, 13]. The languages in [4, 5] are thematically similar although based on somewhat different principles. We have taken advantage of a rich type system for Dp, originally presented in [7], where not only do channels have the types originally proposed in <ref> [11] </ref> for the p-calculus, but locations have types broadly similar to those of objects.
Reference: [12] <author> James Riely and Matthew Hennessy. </author> <title> A typed language for distributed mobile processes. </title> <booktitle> In ACM-POPL [2]. </booktitle>
Reference-contexts: For a full treatment of the language, including many examples, see [7]. The language is a simplification and refinement of that introduced in <ref> [12] </ref>. 2.1 Syntax The syntax is given in Table 1. We defer the discussion of types, T, to Section 2.3.
Reference: [13] <author> Peter Sewell. </author> <title> Global/local subtyping for a distributed p-calculus. </title> <type> Technical Report 435, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <month> August </month> <year> 1997. </year> <title> Type-Safe Execution of Mobile Agents in Anonymous Networks 23 </title>
Reference-contexts: Moreover we have formalized the correctness of this strategy in terms of Subject Reduction and Type Safety theorems for a partial type system. In this study we used the language Dp [7], one of a number of distributed versions of the p-calculus [9]. For other variations see <ref> [6, 13] </ref>. The languages in [4, 5] are thematically similar although based on somewhat different principles.
Reference: [14] <author> R. Stata and M. Abadi. </author> <title> A type system for java bytecode subroutines. </title> <booktitle> In ACM-POPL [2]. </booktitle>
Reference-contexts: Our work is different in that the correctness proof can be reconstructed efficiently, and therefore the producer need not supply an explict proof. For other examples of related work within this framework see <ref> [8, 14] </ref>. For example the former contains a number of schemes for typechecking incoming code for access violations to local private resources.
References-found: 14

