URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P651.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts97.htm
Root-URL: http://www.mcs.anl.gov
Title: A High-Performance MPI Implementation on a Shared-Memory Vector Supercomputer  
Author: William Gropp and Ewing Lusk 
Address: Argonne, IL 60439  
Affiliation: Mathematics and Computer Science Division Argonne National Laboratory  
Abstract: In this article we recount the sequence of steps by which MPICH, a high-performance, portable implementation of the Message-Passing Interface (MPI) standard, was ported to the NEC SX-4, a high-performance parallel supercomputer. Each step in the sequence raised issues that are important for shared-memory programming in general and shed light on both MPICH and the SX-4. The result is a low-latency, very high bandwidth implementation of MPI for the NEC SX-4. In the process, MPICH was also improved in several general ways. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Sarita V. Adve and Kourosh Gharachorloo. </author> <title> Shared memory consistency models: A tutorial. </title> <type> Technical Report 9512, </type> <institution> Rice University ECE, </institution> <month> September </month> <year> 1995. </year> <note> (also DEC Western Research Laboratory Research Report 95/7). </note>
Reference-contexts: The cost is the need for each process to check p 1 slots instead of a single queue. This introduces a scalability issue that we discuss in Section 9.1, along with some variations of this approach. This algorithm depends on a model of memory and instruction execution (see <ref> [1] </ref> for an excellent tutorial) that cannot be relied on in today's high-performance machines, which depend heavily on the use of cache and the ability to modify the order of instruction execution (including, perhaps especially, memory reads and writes) for greater performance.
Reference: [2] <author> Ron Brightwell and Anthony Skjellum. </author> <title> MPICH on the T3D: A case study of high performance message passing. </title> <type> (preprint), </type> <year> 1996. </year>
Reference-contexts: We introduced into MPICH a lock-free mechanism for delivering control packets and short messages (short enough to be included in the packet itself). The idea is borrowed from MPICH's T3D abstract device implementation <ref> [2] </ref>, and generalizes to any system with one-sided get/put operations, as well as to other shared-memory machines. The central idea is to define in shared memory (System V shared memory on the SX-4) an array of packet slots, one slot for each pair of processes that we expect to communicate.
Reference: [3] <author> Message Passing Interface Forum. </author> <title> Document for a standard message-passing interface. </title> <type> Technical Report Technical Report No. </type> <institution> CS-93-214 (revised), University of Tennessee, </institution> <month> April </month> <year> 1994. </year> <note> Available on netlib. </note>
Reference-contexts: 1 Introduction MPI <ref> [3, 6] </ref> is a portable message-passing library specification. MPICH [4] is a portable MPI implementation in the sense that it can be adapted relatively easily to a new machine, and a high-performance implementation in the sense that MPICH enables such an adaptation to take full advantage of high-performance hardware.
Reference: [4] <author> William Gropp, Ewing Lusk, Nathan Doss, and Anthony Skjellum. </author> <title> A high-performance, portable implementation of the MPI message-passing interface standard. </title> <journal> Parallel Computing, </journal> <volume> 22 </volume> <pages> 789-828, </pages> <year> 1996. </year>
Reference-contexts: 1 Introduction MPI [3, 6] is a portable message-passing library specification. MPICH <ref> [4] </ref> is a portable MPI implementation in the sense that it can be adapted relatively easily to a new machine, and a high-performance implementation in the sense that MPICH enables such an adaptation to take full advantage of high-performance hardware. <p> Details of the MPICH architecture can be found in <ref> [4] </ref>. The fundamental concept is that of the abstract device interface. Almost all of MPICH is completely portable, with the crucial set of environment-and vendor-dependent functions captured in a collection of implementations of the abstract device interface routines.
Reference: [5] <author> Leslie Lamport. </author> <title> A fast mutual exclusion algorithm. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 1-11, </pages> <month> February </month> <year> 1987. </year> <note> Also SRC Research Report 7, </note> <month> November 30, </month> <year> 1985. </year>
Reference-contexts: System V environments provide such a mechanism through System V semaphores, identified by the presence of semop. Most modern CPUs also have hardware instructions from which locks can be synthesized, such as a test-and-set instruction or conditional load and store instructions. Locks can even be synthesized entirely in software <ref> [5] </ref>. Various vendors provide proprietary locks of various kinds in their libraries. The SX-4 software environment provides System V semaphores.
Reference: [6] <author> Message Passing Interface Forum. </author> <title> MPI: A message-passing interface standard. </title> <journal> International Journal of Supercomputer Applications, </journal> 8(3/4):165-414, 1994. 
Reference-contexts: 1 Introduction MPI <ref> [3, 6] </ref> is a portable message-passing library specification. MPICH [4] is a portable MPI implementation in the sense that it can be adapted relatively easily to a new machine, and a high-performance implementation in the sense that MPICH enables such an adaptation to take full advantage of high-performance hardware.
Reference: [7] <author> N. Nishi, S. Habata, M. Inoue, H. Matsumoto, and T. Kondo. </author> <title> SX-4 architecture for scalable parallel vector processing. </title> <booktitle> In Proceedings of the International Symposium on Parallel and Distributed Supercomputing, </booktitle> <pages> pages 45-50, </pages> <month> September </month> <year> 1995. </year> <title> (Fukuoka, </title> <address> Japan). </address> <month> 14 </month>
Reference-contexts: MPICH [4] is a portable MPI implementation in the sense that it can be adapted relatively easily to a new machine, and a high-performance implementation in the sense that MPICH enables such an adaptation to take full advantage of high-performance hardware. The NEC SX-4 <ref> [7] </ref> is a parallel vector supercomputer with shared memory. The presence of shared memory means that message transfer will be done by memcpy, and the vector units enable memcpy to be very fast.
References-found: 7

