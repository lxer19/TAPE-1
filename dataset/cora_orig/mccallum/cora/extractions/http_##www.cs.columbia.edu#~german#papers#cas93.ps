URL: http://www.cs.columbia.edu/~german/papers/cas93.ps
Refering-URL: http://www.cs.columbia.edu/~german/mbd.html
Root-URL: http://www.cs.columbia.edu
Title: On Distributed System Management  
Author: German Goldszmidt 
Affiliation: Distributed Computing and Communication Lab Computer Science Department, Columbia University  
Abstract: Device failures, performance inefficiencies, improper allocation of resources, security compromises, and accounting are some of the problems associated with the operations of distributed systems. Effective management requires monitoring, interpreting and controlling the behavior of the distributed system resources, both hardware and software. Current management systems pursue a platform-centered paradigm, where agents monitor the system and collect data, which can be accessed by applications via management protocols. Some of the fundamental limitations of this paradigm include limited scalability, micromanagement, and semantic heterogeneity. We propose an alternative model, Management by Delegation, and contrast its properties via an application example, evaluating the health of a Distributed System. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Andrzej Goscinski. </author> <title> Distributed Operating Systems The Logical Design. </title> <publisher> Addison Wesley, </publisher> <year> 1991. </year>
Reference-contexts: Unfortunately, the distributed systems of today have not been designed to be manageable. Users of large distributed systems want to take advantage of the special capabilities of different computational environments <ref> [1] </ref>. To fulfill such requirements, a distributed system must be equipped with mechanisms and policies that allow for efficient management of its resources. An integrated management environment should enable managers to make timely management decisions.
Reference: [2] <author> Matthias Autrata. </author> <title> OSF Distributed Management Environment. </title> <booktitle> In Proceedings of the IFIP/IEEE International Workshop on Distributed Systems: Operations and Management, </booktitle> <address> Santa Barbara, CA, </address> <month> Octo-ber </month> <year> 1991. </year>
Reference-contexts: An integrated management environment should enable managers to make timely management decisions. To be effective, managers must overcome the volume and complexity of information that characterize large heterogeneous distributed systems. Given the plethora of manageable resources, the hodgepodge of administrative approaches, inconsistent tools, and inadequate facilities <ref> [2] </ref>, system management has become a difficult task. Interest in management has been stimulated by the growing complexity of networks and increased dependence on their operations. Effective management of distributed systems has, therefore, emerged in recent years as a most central need.
Reference: [3] <author> Wesley W. Chu. </author> <title> System Management Research via Behavior Characterization. </title> <booktitle> In IEEE First International Workshop on Systems Management, </booktitle> <address> Los Angeles, Cali-fornia, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Despite some recent progress, however, manageability remains an elusive goal. System management must be tailored to the different requirements of each system type and installation. Different applications and system configurations have different requirements and need different strategies <ref> [3] </ref>. Dynamic network configuration based on security, performance, or recovery considerations [4], is an example. To meet their functional requirements, system management processes must adapt, customize, and refine the capabilities of the available re 1 sources [5].
Reference: [4] <author> C. Bisdikian, F. Patel, F. Schaffa, and M. Willebeek-LeMair. </author> <title> Dynamic Reconfiguration of Hub-based Networks. </title> <booktitle> In IEEE First International Workshop on Systems Management, </booktitle> <address> Los Angeles, Cal-ifornia, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Despite some recent progress, however, manageability remains an elusive goal. System management must be tailored to the different requirements of each system type and installation. Different applications and system configurations have different requirements and need different strategies [3]. Dynamic network configuration based on security, performance, or recovery considerations <ref> [4] </ref>, is an example. To meet their functional requirements, system management processes must adapt, customize, and refine the capabilities of the available re 1 sources [5]. Current management systems pursue a platform-centered paradigm, where agents monitor the system and collect data, which can be accessed by applications via management protocols.
Reference: [5] <author> Miriam J. Masullo and Seraphin B. Calo. </author> <title> Policy Management: An Architecture and Approach. </title> <booktitle> In IEEE First International Workshop on Systems Management, </booktitle> <address> Los Angeles, California, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Different applications and system configurations have different requirements and need different strategies [3]. Dynamic network configuration based on security, performance, or recovery considerations [4], is an example. To meet their functional requirements, system management processes must adapt, customize, and refine the capabilities of the available re 1 sources <ref> [5] </ref>. Current management systems pursue a platform-centered paradigm, where agents monitor the system and collect data, which can be accessed by applications via management protocols. The platform-centered paradigm separates these applications, logically and physically, from the data they require and from the devices they need to control.
Reference: [6] <author> Jeffrey D. Case, Mark S. Fedor, Martin L. Schoffstall, and James R. Davin. </author> <title> A Simple Network Management Protocol (SNMP). </title> <type> RFC 1157, </type> <month> May </month> <year> 1990. </year> <institution> DDN Network Information Center, SRI International. </institution>
Reference-contexts: Within large, heterogeneous distributed systems where devices incorporate significant processing power while human resources are scarce, the situation is different. Management Standards Developments of management protocol standards (SNMP <ref> [6] </ref> and CMIP [7]) have served as the key driving forces of the field. These standards share the platform-centered paradigm, even if their approaches and details vary greatly. As described in Section 2, the platform-centered paradigm subsumed by the standards has serious limitations.
Reference: [7] <author> International Standards Organization ISO. </author> <title> 9596 Information Technology, Open Systems Interconnection, Common Management Information Protocol Specification, </title> <month> May </month> <year> 1990. </year>
Reference-contexts: Within large, heterogeneous distributed systems where devices incorporate significant processing power while human resources are scarce, the situation is different. Management Standards Developments of management protocol standards (SNMP [6] and CMIP <ref> [7] </ref>) have served as the key driving forces of the field. These standards share the platform-centered paradigm, even if their approaches and details vary greatly. As described in Section 2, the platform-centered paradigm subsumed by the standards has serious limitations.
Reference: [8] <author> Patricia Gomes Soares. </author> <title> On Remote Procedure Call. </title> <booktitle> In Proceedings of the Second CASCON International Conference, </booktitle> <address> Toronto, Canada, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: The technologies that we are developing address these limitations and are orthogonal to the choice of methods to collect, organize or access management data. Most distributed management applications are designed and implemented following the traditional client server process interaction paradigm, e.g., RPC <ref> [8] </ref>. This paradigm enforces a rigid association of functionality with servers. Services cannot be modified without recompilation, reinstallation, and reinstantia-tion of the server process. Static fixing of service interfaces induces an abnormal distribution of functionality between requesters and providers of management services.
Reference: [9] <author> Yechiam Yemini, German Goldszmidt, and Shaula Yemini. </author> <title> Network Management by Delegation. </title> <booktitle> In The Second International Symposium on Integrated Network Management, </booktitle> <address> Washington, DC, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: Static fixing of service interfaces induces an abnormal distribution of functionality between requesters and providers of management services. Server interfaces enable clients to obtain assistance only for predefined, fixed tasks. Management by Delegation We introduced a more flexible paradigm, Management by Delegation (MbD) <ref> [9, 10] </ref>. This framework is based on elastic servers [11, 12], whose functionality can be extended at execution time by delegating new functional procedures to them. It allows flexible distribution of management responsibilities in a distributed environment.
Reference: [10] <author> German Goldszmidt, Yechiam Yemini, and Shaula Yemini. </author> <title> Network Management: The MAD Approach. </title> <booktitle> In Proceedings of the IBM/CAS Conference, </booktitle> <address> Toronto, Canada, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: Static fixing of service interfaces induces an abnormal distribution of functionality between requesters and providers of management services. Server interfaces enable clients to obtain assistance only for predefined, fixed tasks. Management by Delegation We introduced a more flexible paradigm, Management by Delegation (MbD) <ref> [9, 10] </ref>. This framework is based on elastic servers [11, 12], whose functionality can be extended at execution time by delegating new functional procedures to them. It allows flexible distribution of management responsibilities in a distributed environment. <p> If the data collected could be interpreted by software applications instead of human operators, the problem would be simplified. Platform-centered management results in significant barriers on the development of such applications, such as the problem of mi-cromanagement <ref> [10] </ref>. Management applications are, therefore, se riously limited in processing non-trivial tasks. In particular, the current paradigm is unsuitable to address manageability of high-speed (Gb/s) networks. The time scale over which the behaviors of such networks need to be monitored and management actions invoked is too short.
Reference: [11] <author> German Goldszmidt. </author> <title> Elastic Servers in Cords. </title> <booktitle> In Proceedings of the Second CAS-CON International Conference, </booktitle> <address> Toronto, Canada, </address> <month> November </month> <year> 1992. </year> <month> 10 </month>
Reference-contexts: Server interfaces enable clients to obtain assistance only for predefined, fixed tasks. Management by Delegation We introduced a more flexible paradigm, Management by Delegation (MbD) [9, 10]. This framework is based on elastic servers <ref> [11, 12] </ref>, whose functionality can be extended at execution time by delegating new functional procedures to them. It allows flexible distribution of management responsibilities in a distributed environment. Lack of this ability forces applications to engage in abnormally fine grained and complex process interactions.
Reference: [12] <author> German Goldszmidt. </author> <title> Distributed Sys--tem Management via Elastic Servers. </title> <booktitle> In IEEE First International Workshop on Systems Management, </booktitle> <address> Los Angeles, Cal-ifornia, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Server interfaces enable clients to obtain assistance only for predefined, fixed tasks. Management by Delegation We introduced a more flexible paradigm, Management by Delegation (MbD) [9, 10]. This framework is based on elastic servers <ref> [11, 12] </ref>, whose functionality can be extended at execution time by delegating new functional procedures to them. It allows flexible distribution of management responsibilities in a distributed environment. Lack of this ability forces applications to engage in abnormally fine grained and complex process interactions.
Reference: [13] <editor> B.N. Meandzija, K.W. Kappel, and P.J. Brusil. </editor> <booktitle> Integrated Network Management and The International Symposia. In The Second International Symposium on Integrated Network Management, </booktitle> <address> Washington, DC, </address> <month> April </month> <year> 1991. </year>
Reference-contexts: A delegation protocol allows a manager to transfer programs, create process instances, and control their execution. Compressing Management Information Most network management systems are passive and offer little more than interfaces to raw or partly aggregated and/or correlated data in MIBs <ref> [13] </ref>. Developing effective technologies to support compression of real-time management information is a central problem of network management. A health function [14] provides such efficient compression by combining managed data linearly into a single index of network state.
Reference: [14] <author> German Goldszmidt and Yechiam Yem-ini. </author> <title> Evaluating Management Decisions via Delegation. </title> <booktitle> In The Third International Symposium on Integrated Network Management, </booktitle> <address> San Francisco, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Compressing Management Information Most network management systems are passive and offer little more than interfaces to raw or partly aggregated and/or correlated data in MIBs [13]. Developing effective technologies to support compression of real-time management information is a central problem of network management. A health function <ref> [14] </ref> provides such efficient compression by combining managed data linearly into a single index of network state. Health functions cannot be included as part of a static MIB design, as they may vary from site to site and over time. <p> It permits local evaluation of health functions and decisions by device agents, when management platforms have difficulties in accessing devices (during critical stress times). Consequently, we use MbD to compute health functions <ref> [14] </ref>. Delegating health functions to distributed agents enables direct observation of network behaviors at sufficient precision. Health functions may be dynamically changed to reflect varying behavior patterns at different times. By maintaining health indicators locally, vast amounts of real-time data can be significantly compressed.
Reference: [15] <author> German Goldszmidt and Yechiam Yemini. </author> <title> The Design of a Management Delegation Engine. </title> <booktitle> In Proceedings of the IFIP/IEEE International Workshop on Distributed Systems: Operations and Management, </booktitle> <address> Santa Barbara, CA, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: These interfaces need not be standardized, nor do they have to be uniformly accessible to all DPIs. The MbD-Kernel supports access control to restrict the resources that may be accessible to different DPIs. A prototype MbD-Kernel supporting all the above functionality has been implemented <ref> [15] </ref>. A typical scenario of the use of delegation is shown in Figure 1. A management delegator processes (D) is transferring a delegated program (DP 1 ) to an elastic server (ES 1 ).
Reference: [16] <author> S. Waldbusser. </author> <title> Remote Network Monitoring Management Information Base. </title> <type> RFC 1271, </type> <month> November </month> <year> 1991. </year>
Reference-contexts: Communications among clients and management programs may be supported via existing application-layer protocols. The problem of accomplishing applications communications standards is simplified to that of defining appropriate APIs, encapsulating a minimal functional interface. In contrast, SNMP requires defining a special MIB to accommodate variation of applications models, e.g., RMON <ref> [16] </ref>. Cost Tradeoffs MbD more suitably reflects emerging network tradeoffs and resource realities. Devices are increasingly equipped with substantial hardware resources (e.g., some hubs incorporate powerful RISC CPUs). These resources permit devices a great degree of management sophistication, far exceeding the simple device models that the platform-centered paradigm envisions.
Reference: [17] <author> K. McCloghrie and M. Rose. </author> <title> Management Information Base for Network Management of TCP/IP-based internets: </title> <journal> MIB-II. </journal> <volume> RFC 1213, </volume> <month> March </month> <year> 1991. </year>
Reference-contexts: In SNMP, observations of operational variables are accomplished via counters and gauges. A counter represents a cumulative (integral) of an operational variable. Typically, however, only the change in the counter versus its value provides a useful indication of the network state. For example, the MIB-II <ref> [17] </ref> counter representing ifInOctets accounts for the total number of bytes received by an interface since device initialization. Health functions will, typically, utilize a linear combination of such rates at which status indicators vary. It is often useful to combine MIB variables to more useful status indicators.

References-found: 17

