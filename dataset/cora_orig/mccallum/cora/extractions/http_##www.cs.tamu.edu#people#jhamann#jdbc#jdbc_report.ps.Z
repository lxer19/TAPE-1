URL: http://www.cs.tamu.edu/people/jhamann/jdbc/jdbc_report.ps.Z
Refering-URL: http://www.cs.tamu.edu/people/jhamann/jdbc/
Root-URL: http://www.cs.tamu.edu
Title: Analysis of Java Database Connectivity and its Application in a Multi-Platform, Multi-DBMS Environment  
Author: Jerrid Hamann Mr. Willis Marti 
Affiliation: Texas A&M University, College Station, Texas  
Note: submitted to  CPSC 485 Networks and Distributed Systems Project  
Date: September 8, 1996  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Visigenic, </author> <title> "Developing Database Independent Applications with ODBC." </title> <note> http://www.visigenic.com/info/odbc.html, May 1996. </note>
Reference-contexts: To be competitive in the 1990's, organizations need to access accurate information very quickly, regardless of the data source, platform 2 or location. Management put the pressure on in-house developers to invent database clients for each employee's desktop machine that can find all the company's information from one application <ref> [1] </ref>. The answer to this call was Open Database Connectivity (ODBC). Developed by Microsoft and based on the Call Level Interface specification of the SQL Access Group, ODBC allows users to access data in heterogeneous environments of relational and non-relational databases. <p> ODBC is an API in which application developers can code their programs using ODBC function calls, and each DBMS vendor can provide an ODBC driver for their specific DBMS. An application written for the ODBC API can be used to access any DBMS, given the appropriate ODBC drivers <ref> [1] </ref>. 3.1 Many Vendors; one ODBC Solution ODBC alleviates the need for independent software vendors and corporate developers to learn multiple API's. ODBC now provides a universal data access interface. Application developers can allow an application to concurrently access, view, and modify data from multiple, diverse databases [9].
Reference: [2] <author> Intersolv, </author> <title> "Intersolv and Sun Partnership Bridges the JDBC-ODBC Gap." </title> <address> http://www.intersolv.com/programs/sweet white.htm, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Developers, using the ODBC API, can write one application to access data on many vendors' DBMS's on many platforms, including Windows, Macintosh, and UNIX <ref> [2] </ref>. In 1995, Sun Microsystems released an alpha 3 version of its new object oriented language, Java. This general purpose programming language became very popular around the Internet, mostly because of its platform-independent bytecode 4 interpretation.
Reference: [3] <author> J. Gosling and H. McGilton, </author> <title> "The Java Language Environment: A White Paper," </title> <month> May </month> <year> 1995. </year>
Reference-contexts: This general purpose programming language became very popular around the Internet, mostly because of its platform-independent bytecode 4 interpretation. A Java application is compiled into bytecodes, then interpreted on a client 5 machine by a Java interpreter for that particular architecture <ref> [3] </ref>. Java became the de facto language of the Internet as users began including Java applets 6 on their World Wide Web pages. The distributed, networking nature of Java quickly found the new language paired with client/server 7 database development.
Reference: [4] <author> R. Smith, </author> <title> "Integrating Databases with Java via JDBC," </title> <publisher> JavaWorld. </publisher>
Reference-contexts: production release 4 compiled source code, but not machine code for a specific processor 5 a remote machine accessing a central server 6 miniature application 7 a distributed system of many remote computers accessing one central server 1 is important in maintaining adequate performance and convenience to the Java developer <ref> [4] </ref>. JDBC has been adopted by most major DBMS vendors, including Oracle, Informix, Imaginary, and Borland. <p> JDBC implementations, however, are native Java code, while ODBC implementations are C coded programs. Developing a pure Java database driver is important in maintaining adequate performance and convenience to the Java developer <ref> [4] </ref>. 12 a process that listens for network connections 6 4.1 ODBC Compatibility In an effort to bridge the initial gap between existing ODBC applications and the new JDBC specifications, Intersolv released a JDBC-ODBC Bridge (see figure 1).
Reference: [5] <author> L. Lemay and C. Perkins, </author> <title> Teach Yourself Java in 21 Days. </title> <type> Indianapolis, </type> <institution> Indiana: Sams Net, </institution> <year> 1996. </year>
Reference-contexts: The language was to be used for television devices, with varying hardware components. James Gosling of Sun recognized that this language could be quite popular in the diverse Internet community, and Sun released an alpha version of Java in the Summer 1995 <ref> [5] </ref>. Java's popularity grew, and by January 1996, Sun had spun off an operating company called Javasoft and released the official specifications of Java 1.0 [6]. 2.1 Platform Independent Bytecode One of the foremost features of Java is its hardware independence.
Reference: [6] <author> Sun Microsystems, </author> <title> "Javasoft Ships Java 1.0." </title> <note> http://www.sun.com/smi/Press/sunflash/9601/sunflash.960123.10561.html, January 1996. </note>
Reference-contexts: Java's popularity grew, and by January 1996, Sun had spun off an operating company called Javasoft and released the official specifications of Java 1.0 <ref> [6] </ref>. 2.1 Platform Independent Bytecode One of the foremost features of Java is its hardware independence. Until Java, most high performance programming languages were compiled into machine code.
Reference: [7] <author> D. Flanagan, </author> <title> Java in a Nutshell. </title> <address> Sebastopol, California: </address> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1996. </year>
Reference-contexts: While Perl and Tcl/Tk grew in popularity, critics downplayed the interpreted paradigm. Interpreted programs are far slower than compiled programs, due to the "middle man" interpreter. Performance-minded developers continued writing in C and C++, while others sacrificed performance for portability <ref> [7] </ref>. Java employs a "happy medium" technique, compiling the Java source code into bytecodes. The bytecodes are platform independent, but structured into a specific format for easy parsing. Upon execution, the Java bytecodes are interpreted into machine code, using an interpreter installed on the host machine. <p> The interpreters are faster than Perl and Tcl/Tk interpreters because the byte-codes are in a predictable and efficient format. As a result, Java supports rapid prototyping and easy experimentation, which in turn leads to faster software development <ref> [7] </ref>. 3 Additionally, the Java API ensures that there are no "implementation-dependent" apsects of the language, explicitly specifying the size of data types and arithmetic behavior. <p> The Java environment is portable to new platforms and operating systems, since the Java compiler is written in Java itself, and the run-time system is written in ANSI C. The run-time system has a clean portability boundary that is essentially POSIX-compliant <ref> [7] </ref>. Java's main showcase is the Internet, where every user has every kind of computer available. Various flavors of UNIX, Microsoft Windows and Macintoshes are scattered throughout the Internet, and Java programs can be efficiently executed on all of those platforms relatively uniformly. 2.2 Applications vs. <p> Java, however, includes very developed network functionality in the core of the 9 Local Area Network 10 Wide Area Network 4 language, allowing the application developer to concentrate more on users' needs than on detailed network code <ref> [7] </ref>. 2.4 Widespread Acceptance and Development After six months of alpha and beta testing and six months of official availability, the Internet community, and the computer industry, have either embraced Java as the wave of the future, or accepted its existence as a legitimate force in the software field. <p> In the Java package java.lang, there exists a System class which defines all methods that provide a platform-independent interface to system functions. Some of the methods defined in System are not available on all client systems, in which case the method would return a programmer-supplied default value <ref> [7] </ref>. This project used the System.getProperty method to determine the user's username from the operating system. The method returns a String datatype, and can be used like this: String username; username = System.getProperty ("user.name"); This username is then used to establish a connection to the remote mSQL database. <p> By default, the TextField widget echoes each character entered back to the screen. For password fields, this is an undesirable effect. The TextField widget provides a method called setEchoCharacter to alleviate this problem <ref> [7] </ref>. The method can be used like this: TextField password; add (password = new TextField (10)); password.setEchoCharacter ('*'); // echo stars when typing in password 20.3 JDBC Exception Handling The JDBC specification define the SQLException class, an extension of java.lang.Exception, the generic Java exception class. <p> For the database application developers, the SQLExcep-tion class has three methods for handling exceptions: getSQLState, getError-Code, and getNextException [16]. In addition, the superclass java.lang.Throwable from which Exception is subclassed, has a method called getMessage for extracting a message string from the exception object <ref> [7] </ref>.
Reference: [8] <author> Microsoft, </author> <title> "Microsoft Visual J++: The Fast Track to Power Java Programming." </title> <note> http://www.microsoft.com/visualj/, July 1996. </note>
Reference-contexts: They have unveiled Visual J++, a development tool for Microsoft Windows 95 and Windows NT. J++ draws upon Java and Microsoft's Visual C++ to integrate Java with Microsoft's Component Object Model (COM), which is an integral part of Microsoft's ActiveX development platform <ref> [8] </ref>. 3 Open Database Connectivity (ODBC) In an effort to standardize an interface to DBMS's, Microsoft created Open Database Connectivity (ODBC), based on the X/Open 11 definitions of SQL CLI (Call Level Interface).
Reference: [9] <author> Microsoft, </author> <title> "ODBC Open Database Connectivity Overview." </title> <note> http://198.105.232.6/KB/deskapps/word/Q110093.htm, February 1996. Article ID: Q110093. </note>
Reference-contexts: ODBC now provides a universal data access interface. Application developers can allow an application to concurrently access, view, and modify data from multiple, diverse databases <ref> [9] </ref>. ODBC is a specification to which developers write either [9]: * An ODBC-enabled "front-end" or "client" desktop application, also known as an "ODBC Client." This is the application that the computer-user sees on the computer screen, or * An ODBC Driver for a "back-end" or "server" DBMS (Database Management System). <p> ODBC now provides a universal data access interface. Application developers can allow an application to concurrently access, view, and modify data from multiple, diverse databases <ref> [9] </ref>. ODBC is a specification to which developers write either [9]: * An ODBC-enabled "front-end" or "client" desktop application, also known as an "ODBC Client." This is the application that the computer-user sees on the computer screen, or * An ODBC Driver for a "back-end" or "server" DBMS (Database Management System). <p> The ODBC Driver resides between the ODBC Client and the DBMS; however, it is loaded on the front-end computer. To use ODBC, the following three components are required <ref> [9] </ref>: ODBC CLIENT an ODBC-enabled front-end (also called ODBC client) Examples: Microsoft Access, an application created with Access, or ODBC enabled applications from other vendors (such as Lotus) ODBC DRIVER an ODBC Driver for the ODBC Server.
Reference: [10] <author> Sun Microsystems, </author> <title> "The JDBC TM Database Access API." </title> <note> http://splash.javasoft.com/jdbc/, July 1996. </note>
Reference-contexts: The API went through a 90 day public review before Javasoft froze 13 the 1.0 API specifications <ref> [10] </ref>. To ensure that applications are portable between different JDBC drivers, the JavaSoft JDBC WWW home page explains that JavaSoft and Intersolv are jointly developing a JDBC compliance suite that is targeted for beta release on JavaSoft's web pages in early July [10]. <p> before Javasoft froze 13 the 1.0 API specifications <ref> [10] </ref>. To ensure that applications are portable between different JDBC drivers, the JavaSoft JDBC WWW home page explains that JavaSoft and Intersolv are jointly developing a JDBC compliance suite that is targeted for beta release on JavaSoft's web pages in early July [10]. The beta version of the JavaSoft and Intersolv JDBC-ODBC Bridge is also available from the JavaSoft JDBC home page [10]. 13 no further major changes 7 5 Current JDBC Development Several companies are pouring a great deal of personnel and resources into Java development. <p> JavaSoft JDBC WWW home page explains that JavaSoft and Intersolv are jointly developing a JDBC compliance suite that is targeted for beta release on JavaSoft's web pages in early July <ref> [10] </ref>. The beta version of the JavaSoft and Intersolv JDBC-ODBC Bridge is also available from the JavaSoft JDBC home page [10]. 13 no further major changes 7 5 Current JDBC Development Several companies are pouring a great deal of personnel and resources into Java development. Some of these companies are small Internet firms, banking the company's future on the success of Java.
Reference: [11] <author> Javasoft, </author> <title> "Developer's Corner; Developer News." </title> <note> http://www.javasoft.com/java.sun.com/devcorner.html, June 1996. </note>
Reference-contexts: Javasoft also develops Java compilers for Solaris and Windows 95/NT, to promote the use of the Java. This software is available from their WWW server, free of charge. Javasoft continues to refine and improve the Java language with new specifications for certain functions <ref> [11] </ref>. JDBC The focus of this report, JDBC allows Java applets to communicate with a wide range of database systems. JavaBeans JavaBeans provides a platform-independent, portable component model and a rational security model. JavaBeans will work with Ac tiveX/COM, OpenDoc, and LiveConnect.
Reference: [12] <author> Weblogic, </author> <title> "About WebLogic, </title> <publisher> Inc." </publisher> <address> http://www.weblogic.com/whois main.html, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: We-bLogic's software products are written exclusively in Java <ref> [12] </ref>. 8 WebLogic has focused on database access, and has developed the following products [13]: jdbcKona The jdbcKona products are a set of JDBC drivers for a variety of environments.
Reference: [13] <author> Weblogic, </author> <title> "WebLogic Products." </title> <address> http://www.weblogic.com/proddir main.html, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: We-bLogic's software products are written exclusively in Java [12]. 8 WebLogic has focused on database access, and has developed the following products <ref> [13] </ref>: jdbcKona The jdbcKona products are a set of JDBC drivers for a variety of environments.
Reference: [14] <author> Visigenic, </author> <title> "About Visigenic." </title> <note> http://www.visigenic.com/info/fact.html, June 1996. </note>
Reference-contexts: server-based Java evaluation of events as they are submitted to WebLogic's event server, and the ability to perform arbitrary actions based on the events. 5.3 Visigenic Visigenic specializes in application middleware that provides developers access to heterogeneous databases, and enables multi-tier distributed applications for the Internet, intranet, and enterprise environments <ref> [14] </ref>. Their new product, OpenChannel, intends to streamline and simplify the design of a client/server database system. Visigenic's solution fits OpenChannel modules on both the client and server to negotiate the transmission of data in a standard form.
Reference: [15] <author> Visigenic, "Visigenic Openchannel." </author> <note> http://www.visigenic.com/prod/ocpd.html, June 1996. 50 </note>
Reference-contexts: Their new product, OpenChannel, intends to streamline and simplify the design of a client/server database system. Visigenic's solution fits OpenChannel modules on both the client and server to negotiate the transmission of data in a standard form. Figure 2 from Visigenic's WWW server illustrates their solution <ref> [15] </ref>. 6 The JDBC API JDBC is intended as a "call-level" SQL interface for Java. This means the focus is on executing raw SQL statements and retrieving their results. Likely, higher-level APIs will be defined as well, and these will probably be implemented on top of this base level.
Reference: [16] <author> G. Hamilton and R. Cattell, </author> <title> JDBC TM : A Java SQL API. </title> <type> JavaSoft, </type> <month> May </month> <year> 1996. </year> <month> ftp://splash.javasoft.com/pub/jdbc.ps. </month>
Reference-contexts: Various application builder tools could be used to emit code that uses our API. Javasoft intends, however, that the API be usable by human programmers, especially because there is no other solution available for Java right now <ref> [16] </ref>. 9 6.1 SQL Conformance Database systems support a wide range of SQL syntax and semantics, and they are not consistent with each other on more advanced functionality such as outer joins and stored procedures. <p> Hopefully, the portion of SQL that is truly standard will expand to include more and more functionality. In the meantime, Javasoft takes the following position <ref> [16] </ref>: * JDBC allows any query string to be passed through to an underlying DBMS driver, so an application may use as much SQL functionality as desired at the risk of receiving an error on some DBMSs. <p> Javasoft would like to provide a Java database interface that builds on and reinforces the style and virtues of the existing core Java classes <ref> [16] </ref>. 6.3 Abstract Interfaces The JDBC API is expressed as a series of abstract Java interfaces that allow an application programmer to open connections to particular databases, execute SQL statements, and process the results. <p> An untrusted JDBC applet should avoid making any automatic or implicit use of local credentials when making connections to remote database servers. 6.6 Database Naming on a Network Javasoft decided to use an established naming standard, the URL (Uniform Resource Locator), to assign names to databases in JDBC <ref> [16] </ref>. <p> These details are thoroughly described in <ref> [16] </ref>. 7 Multi-Tier JDBC Systems As a result of the complexities of serving executable content over an insecure network, developers have struggled with system architectures to provide efficient and convenient access to databases, while still maintaining system security and stability. <p> Database applications can use metadata to prepare queries and receive results into the proper datatypes [21]. The JDBC specification defines two interfaces for metadata, java.sql.DatabaseMetaData for information about the database as a whole, and java.sql.ResultSetMetaData for information about the types and properties of the columns in a ResultSet <ref> [16] </ref>. Of the two JDBC drivers used in this project (mSQL 0.9.3 and WebLogic 2.04 beta for Oracle 7), the mSQL driver did not implement the DatabaseMetaData interface at all. The WebLogic driver implements only a few of the methods defined in the JDBC specifications for DatabaseMetaData. <p> The ResultSetMetaData interface, however, is implemented in both JDBC drivers. This interface allows the application developer access to metadata like ColumnName, ColumnType, getColumnTypeName. Complete documentation of the ResultSetMetaData interface is available in the JDBC specification <ref> [16] </ref>. 20.2 Authentication to Remote DBMS's Almost all databases enforce some kind of access control on its tables. The MiniSQL DBMS uses an "Access Control List", or ACL file. Upon starting the msqld daemon, the ACL file is read and restrictions are enforced accordingly, on a database by database basis. <p> For the driver developers, the SQLException definition includes four constructors to create SQLException objects in the event of the database error. For the database application developers, the SQLExcep-tion class has three methods for handling exceptions: getSQLState, getError-Code, and getNextException <ref> [16] </ref>. In addition, the superclass java.lang.Throwable from which Exception is subclassed, has a method called getMessage for extracting a message string from the exception object [7].
Reference: [17] <author> G. Resse, </author> <title> "mSQL JDBC Driver Documentation." </title> <address> http://www.imaginary.com/ borg/Java/mSQL/packages.html, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: At the time of writing, the only driver written in Java is the mSQL JDBC driver, by George Reese <ref> [17] </ref>. Standalone Application: The Java client code, the JDBC Driver Manager, and the JDBC Driver (s) are all contained in one tier, on the client machine.
Reference: [18] <author> D. J. Hughes, </author> <title> Mini SQL: A Lightweight Database Server. Minerva Network Management Environment, </title> <month> June </month> <year> 1995. </year> <note> http://Hughes.com.au/product/msql/manual.htm. </note>
Reference-contexts: Using the defined set of functions from the mSQL API, a C programmer can invoke queries to an mSQL database easily and robustly. 11.1 The Primary API Functions The entire mSQL API is available at <ref> [18] </ref>. I will highlight some of the primary function calls and their C syntax needed for even the simplest mSQL client. int msqlConnect (char *host) msqlConnect forms an interconnection with the mSQL engine. Its one argument is the hostname of the mSQL server. <p> BEGIN - unshift (@INC,'/user/jhamann/cs485/MsqlPerl-1.03/blib'); - use Msql; 2. Run the example script. It executed thirty-five (35) tests successfully. % ./MsqlPerl-1.03/t/msql.t 12.3 The Primary API Functions The entire mSQL API is available at <ref> [18] </ref>. I will highlight some of the primary function calls' Perl syntax.
Reference: [19] <author> A. Koenig, </author> <note> MsqlPerl Man Page. </note>
Reference-contexts: Run the example script. It executed thirty-five (35) tests successfully. % ./MsqlPerl-1.03/t/msql.t 12.3 The Primary API Functions The entire mSQL API is available at [18]. I will highlight some of the primary function calls' Perl syntax. More explanation on their functionality can be found in section 11.1 or <ref> [19] </ref>. use Msql This is required at the top of any perl script using the MsqlPerl module. 29 $dbh = Msql-&gt;Connect ($host) Connect forms an interconnection with the mSQL engine running on the hostname in $host. The handle $dbh refers to that particular mSQL connection.
Reference: [20] <author> D. Collins, "MsqlJava: </author> <title> API Documentation." </title> <note> http://www.minmet.uq.oz.au/msqljava/packages.html, June 1996. </note>
Reference-contexts: The Java programmer simply needs to import the package located at ./MsqlJava-1.1.3/msql at the top of the Java source code. 32 13.2 The Primary API Functions The entire mSQL Java API is available at <ref> [20] </ref>. I will highlight some of the primary function calls' Java syntax. More explanation on their functionality can be found in section 11.1 or [20]. import msql.*; This is required at the top of any Java program using the MsqlJava class library. msql.Connect ("dbserver","dilbert",false); After declaring an object (msql = new <p> package located at ./MsqlJava-1.1.3/msql at the top of the Java source code. 32 13.2 The Primary API Functions The entire mSQL Java API is available at <ref> [20] </ref>. I will highlight some of the primary function calls' Java syntax. More explanation on their functionality can be found in section 11.1 or [20]. import msql.*; This is required at the top of any Java program using the MsqlJava class library. msql.Connect ("dbserver","dilbert",false); After declaring an object (msql = new Msql;), that object has a method to connect to a database.
Reference: [21] <author> R. Elmasri and S. Navathe, </author> <title> Fundamentals of Database Systems. </title> <address> Redwood City, California: </address> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <editor> second ed., </editor> <year> 1994. </year>
Reference-contexts: This metadata includes information about database schemas, table descriptions and constraints, and global information about the entire DBMS. Database applications can use metadata to prepare queries and receive results into the proper datatypes <ref> [21] </ref>. The JDBC specification defines two interfaces for metadata, java.sql.DatabaseMetaData for information about the database as a whole, and java.sql.ResultSetMetaData for information about the types and properties of the columns in a ResultSet [16].
Reference: [22] <author> Visigenic, </author> <title> "Visigenic To License JavaSoft JDBC Source Code." </title> <note> http://www.visigenic.com/news/js-jdbc.html, May 1996. </note>
Reference: [23] <author> D. J. Hughes, </author> <title> "Mini SQL: A Lightweight Database Engine." </title> <address> http://Hughes.com.au/product/msql/paper.htm, April 1995. </address>
Reference: [24] <author> P. Samuel, </author> <note> The Unofficial mSQL FAQ, January 1996. http://Hughes.com.au/product/msql/faq.htm. </note>
Reference: [25] <author> M. Morrison et al., </author> <title> Java Unleashed. Indianapolis, Indiana: Sams Net, first ed., </title> <year> 1996. </year>
Reference: [26] <author> D. Collins, "MsqlJava: </author> <title> A Java Class Library for mSQL." </title> <note> http://www.minmet.uq.oz.au/msqljava/tutorial.html, May 1996. </note>
Reference: [27] <author> G. Resse, </author> <title> "George Reese's Java Pages." </title> <address> http://www.imaginary.com/ borg/Java/, </address> <month> May </month> <year> 1996. </year> <month> 51 </month>
References-found: 27

