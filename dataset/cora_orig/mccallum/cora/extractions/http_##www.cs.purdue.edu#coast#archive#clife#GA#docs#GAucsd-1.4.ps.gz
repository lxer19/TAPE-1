URL: http://www.cs.purdue.edu/coast/archive/clife/GA/docs/GAucsd-1.4.ps.gz
Refering-URL: http://www.cs.purdue.edu/coast/archive/clife/GA/docs/
Root-URL: http://www.cs.purdue.edu
Email: nici@cs.ucsd.edu  gref@aic.nrl.navy.mil  
Title: A User's Guide to GAucsd 1.4  
Author: Nicol N. Schraudolph John J. Grefenstette 
Date: July 7, 1992  
Address: La Jolla, CA 92093-0114  Washington, DC 20375-5000  
Affiliation: Computer Science Engineering Department University of California, San Diego  Navy Center for Applied Research in Artificial Intelligence Naval Research Laboratory  
Abstract: This document describes the GAucsd system for function optimization based on genetic search techniques. Genetic algorithms appear to hold a lot of promise as general purpose adaptive search procedures. However, the authors disclaim any warranties of fitness for a particular problem. The purpose of making this system available is to encourage the experimental use of genetic algorithms on realistic optimization problems, and thereby to identify the strengths and weaknesses of genetic algorithms. GAucsd was developed by Nicol Schraudolph at the University of California, San Diego; it is based on Genesis 4.5, a genetic algorithm package written by John J. Grefenstette. GAucsd and related materials are available via anonymous ftp from cs.ucsd.edu (132.239.51.3) in the pub/GAucsd directory or via electronic mail from the first author, who welcomes bug reports, comments and suggestions, and maintains a mailing list of users to announce patches and new releases. fl Hardcopies of this document can be obtained by requesting technical report CS92-249 from Technical Reports, CSE Department, UC San Diego, La Jolla, CA 92093-0114. There is a charge of 5 US$ for this service. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> James E. Baker. </author> <title> Reducing bias and inefficiency in the selection algorithm. </title> <editor> In John J. Grefenstette, editor, </editor> <booktitle> Proc. 2nd Int. Conf. Genetic Algorithms and their Applications, </booktitle> <pages> pages 14-21, </pages> <address> Hillsdale, NJ, 1987. </address> <publisher> Lawrence Erlbaum Associates. </publisher>
Reference-contexts: The idea is to allocate to each structure a portion of a spinning wheel proportional to the structure's relative fitness. A single spin of the wheel assigns the number of offspring to all structures. This algorithm is compared to other selection methods in <ref> [1] </ref>. The selection pointers are then randomly shu*ed, and the selected structures are copied into the new population. 3.4 Mutation After the new population has been selected, mutation is applied to each structure in the new population (see mutate.c). Each position is given a chance M rate of undergoing mutation. <p> length) char genome []; int length; - register int i; char buff [30]; char outbuf [10]; double sum = 0.0; /* phenotype description, must be static */ static double x [3]; /* return previous phenotype on request */ if (length &lt; 0) sprintf (genome, ""n%lf %lf %lf", x [0], x <ref> [1] </ref>, x [2]); else - /* GAlength 30 */ if (length != 30) Error ("length error in eval"); /* unpack the genotype */ Unpack (genome, buff); for (i = 0; i &lt; 3; i++) /* convert next 10 bits to an integer */ Degray (&buff [i*10], outbuf, 10); x [i] = <p> When they are computationally expensive, trials are a better indicator of processing time than the number of generations. * Number of Runs <ref> [1] </ref>: The number of independent optimizations of the same function in this experiment; multiple runs can increase the chance of finding a good solution. * Crossing Rate (per individual) [*]: The expected number of two-point crossovers for each structure. * Mutation Rate [*]: The expected number of mutations for each bit <p> end of each run only. * Structures Saved [*]: How many of the best structures should be saved to the min file. * Dump Interval [*]: The number of generations between data dumps to the cpt file; zero in dicates that no dumps will be made. 15 * Dumps Saved <ref> [1] </ref>: The number of dump files that should be kept.
Reference: [2] <author> A. D. Bethke. </author> <title> Genetic Algorithms as Function Optimizers. </title> <type> PhD thesis, </type> <institution> Dept. of Computer and Comm. Sciences, Univ. of Michigan, </institution> <address> Ann Arbor, MI, </address> <year> 1981. </year>
Reference-contexts: Termination may be triggered by finding an acceptable approximate solution to f (x), by fixing the total number of evaluations, or some other application-dependent criterion. The basic concepts of GAs were developed by John Holland [9] and his students <ref> [2, 4, 7, 10] </ref>. Theoretical considerations concerning the allocation of trials to schemata [4, 9] show that genetic techniques provide a near-optimal heuristic for information gathering in complex search spaces. A number of experimental studies [2, 3, 4] have shown that GAs exhibit impressive efficiency in practice. <p> The basic concepts of GAs were developed by John Holland [9] and his students [2, 4, 7, 10]. Theoretical considerations concerning the allocation of trials to schemata [4, 9] show that genetic techniques provide a near-optimal heuristic for information gathering in complex search spaces. A number of experimental studies <ref> [2, 3, 4] </ref> have shown that GAs exhibit impressive efficiency in practice. <p> GAs have been applied to various domains, including nu-merical function optimization <ref> [2, 3] </ref>, adaptive control system design [5], and artificial intelligence task domains [12]. 2 Installing the System This section explains if and how GAucsd can be ported to various computing platforms. It assumes that you have successfully obtained and unpacked the GAucsd source distribution into a designated directory. <p> genome []; int length; - register int i; char buff [30]; char outbuf [10]; double sum = 0.0; /* phenotype description, must be static */ static double x [3]; /* return previous phenotype on request */ if (length &lt; 0) sprintf (genome, ""n%lf %lf %lf", x [0], x [1], x <ref> [2] </ref>); else - /* GAlength 30 */ if (length != 30) Error ("length error in eval"); /* unpack the genotype */ Unpack (genome, buff); for (i = 0; i &lt; 3; i++) /* convert next 10 bits to an integer */ Degray (&buff [i*10], outbuf, 10); x [i] = Ctoi (outbuf, <p> Since it is used as the trigger threshold for the zoom operator, this is an important parameter for DPE. The default value follows an analysis in [11]. * Max Alleles to Converge [*]: * Maximum Bias [0.99]: * Max Gens w/o Evaluation <ref> [2] </ref>: The three parameters above allow termination of a run when a certain bias is reached, a certain number of alleles have converged, or a certain number of generations has passed without creating a new genome.
Reference: [3] <author> A. Brindle. </author> <title> Genetic Algorithms for Function Optimization. </title> <type> PhD thesis, </type> <institution> Computer Science Dept., Univ. of Alberta, </institution> <year> 1981. </year>
Reference-contexts: The basic concepts of GAs were developed by John Holland [9] and his students [2, 4, 7, 10]. Theoretical considerations concerning the allocation of trials to schemata [4, 9] show that genetic techniques provide a near-optimal heuristic for information gathering in complex search spaces. A number of experimental studies <ref> [2, 3, 4] </ref> have shown that GAs exhibit impressive efficiency in practice. <p> GAs have been applied to various domains, including nu-merical function optimization <ref> [2, 3] </ref>, adaptive control system design [5], and artificial intelligence task domains [12]. 2 Installing the System This section explains if and how GAucsd can be ported to various computing platforms. It assumes that you have successfully obtained and unpacked the GAucsd source distribution into a designated directory. <p> 7) and will be printed in the min file (see Section 11). 9 /****************************************** file f1.c ****/ double _eval (genome, length) char genome []; int length; - register int i; char buff [30]; char outbuf [10]; double sum = 0.0; /* phenotype description, must be static */ static double x <ref> [3] </ref>; /* return previous phenotype on request */ if (length &lt; 0) sprintf (genome, ""n%lf %lf %lf", x [0], x [1], x [2]); else - /* GAlength 30 */ if (length != 30) Error ("length error in eval"); /* unpack the genotype */ Unpack (genome, buff); for (i = 0; i
Reference: [4] <author> Kenneth A. De Jong. </author> <title> An Analysis of the Behavior of a Class of Genetic Adaptive Systems. </title> <type> PhD thesis, </type> <institution> Dept. of Computer and Comm. Sciences, Univ. of Michigan, </institution> <address> Ann Arbor, MI, </address> <year> 1975. </year> <journal> Univ. </journal> <volume> Microfilms No. </volume> <pages> 76-9381. </pages>
Reference-contexts: Termination may be triggered by finding an acceptable approximate solution to f (x), by fixing the total number of evaluations, or some other application-dependent criterion. The basic concepts of GAs were developed by John Holland [9] and his students <ref> [2, 4, 7, 10] </ref>. Theoretical considerations concerning the allocation of trials to schemata [4, 9] show that genetic techniques provide a near-optimal heuristic for information gathering in complex search spaces. A number of experimental studies [2, 3, 4] have shown that GAs exhibit impressive efficiency in practice. <p> The basic concepts of GAs were developed by John Holland [9] and his students [2, 4, 7, 10]. Theoretical considerations concerning the allocation of trials to schemata <ref> [4, 9] </ref> show that genetic techniques provide a near-optimal heuristic for information gathering in complex search spaces. A number of experimental studies [2, 3, 4] have shown that GAs exhibit impressive efficiency in practice. <p> The basic concepts of GAs were developed by John Holland [9] and his students [2, 4, 7, 10]. Theoretical considerations concerning the allocation of trials to schemata [4, 9] show that genetic techniques provide a near-optimal heuristic for information gathering in complex search spaces. A number of experimental studies <ref> [2, 3, 4] </ref> have shown that GAs exhibit impressive efficiency in practice. <p> Note that a C rate greater than 1.0 will cause some structures to undergo several crossovers. Crossover might be implemented in a variety of ways, but there are theoretical advantages treating the structures as rings, choosing two crossover points, and exchanging the sections between these points <ref> [4] </ref>. The segments between the crossover points are exchanged, provided that the parents differ somewhere outside of the crossed segment. <p> Figure 3 demonstrates how the evaluation function of Figure 2 is greatly simplified when the wrapper is used. The function shown is the first of a suite of five test functions that have been used extensively in the GA community since their introduction by De Jong <ref> [4] </ref>; all five can be found in the $GAUCSD/usr subdirectory. If awk is not available on your system, you will not be able to use the wrapper.
Reference: [5] <author> Kenneth A. De Jong. </author> <title> Adaptive system design: a genetic approach. </title> <journal> IEEE Trans. Systems, Man, and Cybernetics, </journal> <volume> SMC-10(9):566-574, </volume> <year> 1980. </year>
Reference-contexts: GAs have been applied to various domains, including nu-merical function optimization [2, 3], adaptive control system design <ref> [5] </ref>, and artificial intelligence task domains [12]. 2 Installing the System This section explains if and how GAucsd can be ported to various computing platforms. It assumes that you have successfully obtained and unpacked the GAucsd source distribution into a designated directory. <p> On--line performance is the mean of all evaluations; o*ine performance is the mean of all current best evaluations | see <ref> [5] </ref>.
Reference: [6] <editor> Stephanie Forrest. </editor> <title> Documentation for prisoner's dilemma and norms programs that use the genetic algorithm. </title> <type> Technical report, </type> <institution> Univ. of Michigan, </institution> <address> Ann Arbor, MI, </address> <year> 1985. </year>
Reference-contexts: A value of W = 0 indicates an infinite window, i.e. F = f (x max ). Note that this method is overly attentive to individuals in that a single "lethal" genotype can all but eliminate selective pressure for W generations. Sigma scaling (studied by Forrest <ref> [6] </ref>) achieves more robust performance by setting F to the average population fitness plus a certain multiple, the sigma scaling factor s, of the standard deviation of population fitness; structures worse than F are assigned zero performance.
Reference: [7] <author> D. R. Frantz. </author> <title> Non-linearities in Genetic Adaptive Search. </title> <type> PhD thesis, </type> <institution> Dept. of Computer and Comm. Sciences, Univ. of Michigan, </institution> <address> Ann Arbor, MI, </address> <year> 1972. </year>
Reference-contexts: Termination may be triggered by finding an acceptable approximate solution to f (x), by fixing the total number of evaluations, or some other application-dependent criterion. The basic concepts of GAs were developed by John Holland [9] and his students <ref> [2, 4, 7, 10] </ref>. Theoretical considerations concerning the allocation of trials to schemata [4, 9] show that genetic techniques provide a near-optimal heuristic for information gathering in complex search spaces. A number of experimental studies [2, 3, 4] have shown that GAs exhibit impressive efficiency in practice.
Reference: [8] <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search, Optimization & Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: GAucsd was written in C under the Unix 1 operating system, but should be portable to many platforms. The remainder of this section gives a general overview of genetic algorithms (GAs); for an in-depth introduction see <ref> [8] </ref>. Details on porting, installing, and running GAucsd are provided in subsequent sections.
Reference: [9] <author> John H. Holland. </author> <title> Adaptation in Natural and Artificial Systems. </title> <publisher> The Univ. of Michigan Press, </publisher> <address> Ann Arbor, MI, </address> <year> 1975. </year>
Reference-contexts: Termination may be triggered by finding an acceptable approximate solution to f (x), by fixing the total number of evaluations, or some other application-dependent criterion. The basic concepts of GAs were developed by John Holland <ref> [9] </ref> and his students [2, 4, 7, 10]. Theoretical considerations concerning the allocation of trials to schemata [4, 9] show that genetic techniques provide a near-optimal heuristic for information gathering in complex search spaces. <p> The basic concepts of GAs were developed by John Holland [9] and his students [2, 4, 7, 10]. Theoretical considerations concerning the allocation of trials to schemata <ref> [4, 9] </ref> show that genetic techniques provide a near-optimal heuristic for information gathering in complex search spaces. A number of experimental studies [2, 3, 4] have shown that GAs exhibit impressive efficiency in practice.
Reference: [10] <author> R. B. Hollstien. </author> <title> Artificial Genetic Adaptation in Computer Control Systems. </title> <type> PhD thesis, </type> <institution> Dept. of Computer and Comm. Sciences, Univ. of Michi-gan, </institution> <address> Ann Arbor, MI, </address> <year> 1971. </year>
Reference-contexts: Termination may be triggered by finding an acceptable approximate solution to f (x), by fixing the total number of evaluations, or some other application-dependent criterion. The basic concepts of GAs were developed by John Holland [9] and his students <ref> [2, 4, 7, 10] </ref>. Theoretical considerations concerning the allocation of trials to schemata [4, 9] show that genetic techniques provide a near-optimal heuristic for information gathering in complex search spaces. A number of experimental studies [2, 3, 4] have shown that GAs exhibit impressive efficiency in practice. <p> This description is provided automatically if you use the wrapper (see Section 7) and will be printed in the min file (see Section 11). 9 /****************************************** file f1.c ****/ double _eval (genome, length) char genome []; int length; - register int i; char buff [30]; char outbuf <ref> [10] </ref>; double sum = 0.0; /* phenotype description, must be static */ static double x [3]; /* return previous phenotype on request */ if (length &lt; 0) sprintf (genome, ""n%lf %lf %lf", x [0], x [1], x [2]); else - /* GAlength 30 */ if (length != 30) Error ("length error
Reference: [11] <author> Nicol N. Schraudolph and Richard K. Belew. </author> <title> Dynamic parameter encoding for genetic algorithms. </title> <journal> Machine Learning, </journal> <volume> 9 </volume> <pages> 9-21, </pages> <year> 1992. </year>
Reference-contexts: Dynamic Parameter Encoding (DPE) <ref> [11] </ref> implements this strategy of iterative refinement by gathering convergence statistics of the top two bits of each parameter. <p> This quick overview was intended to encourage experiments with the DPE algorithm; many aspects have been somewhat glossed over. For a more detailed discussion please refer to <ref> [11] </ref>. 6 Evaluation Procedure To use GAucsd, the user must write an evaluation procedure. There are three levels of abstraction at which such a procedure may be written. <p> Since it is used as the trigger threshold for the zoom operator, this is an important parameter for DPE. The default value follows an analysis in <ref> [11] </ref>. * Max Alleles to Converge [*]: * Maximum Bias [0.99]: * Max Gens w/o Evaluation [2]: The three parameters above allow termination of a run when a certain bias is reached, a certain number of alleles have converged, or a certain number of generations has passed without creating a new
Reference: [12] <author> S. F. Smith. </author> <title> Flexible learning of problem solving heuristics through adaptive search. </title> <booktitle> In Proc. 8th Int. Joint Conf. Artif. Intelligence (IJCAI), </booktitle> <month> August </month> <year> 1983. </year>
Reference-contexts: GAs have been applied to various domains, including nu-merical function optimization [2, 3], adaptive control system design [5], and artificial intelligence task domains <ref> [12] </ref>. 2 Installing the System This section explains if and how GAucsd can be ported to various computing platforms. It assumes that you have successfully obtained and unpacked the GAucsd source distribution into a designated directory.
References-found: 12

