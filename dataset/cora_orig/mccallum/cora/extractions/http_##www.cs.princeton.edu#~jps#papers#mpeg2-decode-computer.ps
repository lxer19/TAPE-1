URL: http://www.cs.princeton.edu/~jps/papers/mpeg2-decode-computer.ps
Refering-URL: http://www.cs.princeton.edu/~jps/papers/appls-arch.html
Root-URL: http://www.cs.princeton.edu
Email: jps@csg.princeton.edu  
Phone: Phone: (609) 258 5329 Fax: (609) 258 1771  
Title: Real-Time Parallel MPEG-2 Decoding in Software growing demand for high quality compressed video has led
Author: Jason Fritts Jaswinder Pal Singh fbilas@cs, jefritts@ee, 
Keyword: Image processing, MPEG, high-performance computing, video compression, real-time system, shared memory.  
Address: Princeton University, Princeton NJ 08544  
Note: Angelos Bilas 1  The  
Abstract: Princeton University Technical Report TR-516-96 Submitted for publication. Abstract We present a parallel decoder for the MPEG-2 standard, implemented on both centralized and distributed shared memory machines. The goal of this work is to provide an all-software solution for real-time, high-quality video decoding and to investigate the important properties of this application as they pertain to multiprocessors systems. Both coarse and fine grained implementations are considered for parallelizing the decoder. The coarse-grained approach exploits parallelism at the group of pictures level, while the fine-grained approach parallelizes within frames, at the slice level. A comparative evaluation of these methods is made, with results presented in terms of speedup, memory requirements, load balance, synchronization time, and temporal and spatial locality. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Shahriar M. Akramullah, Ishfaq Ahmad, and Ming L. Liou, </author> <title> "A Data-Parallel Approach for Real-Time MPEG-2 Video Encoding", </title> <journal> Journal of Parallel and Distributed Computing, 1995 Nov. </journal> <volume> 1. 30(2), </volume> <pages> pp. 129-146. </pages>
Reference-contexts: The work on parallel MPEG-2 has focused on message-passing systems, and mostly on the encoding process with its much greater computational costs. Reported work has not analyzed the bottlenecks or the important data locality characteristics. <ref> [1] </ref> presents a parallel MPEG-2 encoder for large scale multiprocessors. Parallelism is exploited at the block and macroblock level. They report real time encoding at rates higher than 30 pictures/sec for an Intel Paragon XP/S with 330 processors.
Reference: [2] <institution> Argonne National Laboratory, </institution> <address> 9700 South Call Avenue, Argonne, IL 60439-4801, </address> <note> "Parmacs parallel programming system". </note>
Reference-contexts: Since the machine supports a shared address space programming abstraction, shared data can simply be allocated as such and then referenced directly by any processor. Our parallel programs are written in C, augmented with the parmacs parallel programming macros from Argonne National Laboratory <ref> [2] </ref>. Porting the program to other shared address space architectures is easily achieved by using the proper version of the parmacs system for the architecture under consideration. The macros are also supported by our multiprocessor simulation environment, so we can measure various characteristics of the parallel programs.
Reference: [3] <author> V. Bhaskaran, and K. Konstantinides, </author> <title> "Image and Video Compression Standards: Algorithms and Architectures", </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995, </year> <pages> pp. 161-194. </pages>
Reference-contexts: The resulting MPEG-2 standard is quite detailed and only a minimal overview may be given here. More comprehensive descriptions of MPEG-2 may be found in <ref> [3, 14] </ref>. The MPEG-2 standard specifies the coded representation of picture information for digital storage media and digital video communication. <p> It is compatible with EDTV, HDTV and SDTV, formats which are currently being examined as potential future public television standards. Layered structure of an MPEG-2 stream: An important aspect of the versatility of MPEG-2 is its layered structure <ref> [3, 14] </ref>. The hierarchy of layers in an MPEG-2 bitstream is arranged in the following order: Sequence, Group of Pictures (GOP), Picture, Slice, Macroblock, and Block (see Figure 1). The different parts of the stream are marked with unique, byte aligned codes called start codes.
Reference: [4] <author> Kourosh Gharachorloo, Dan Lenoski, James Laudon, Phillip Gibbons, Anoop Gupta, and John Hennessy, </author> <title> Memory Consistency and Event Ordering in Scalable Shared-Memory Multiprocessors, </title> <booktitle> Proceedings of the 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> 15-26, </pages> <year> 1990, </year> <month> May </month>
Reference: [5] <author> Stephen Goldschmidt, and Helen Davis, </author> <title> Tango Introduction and Tutorial, </title> <institution> Computer Systems Laboratory, Stanford University, Stanford, </institution> <address> CCA 94305. </address>
Reference: [6] <author> Andy C. Hung, </author> <title> "PVRG-MPEG CODEC 1.1", Portable Video Research Group (PRVG), </title> <institution> Stanford University, </institution> <month> June 14, </month> <year> 1993. </year>
Reference-contexts: Sequential software MPEG encoders-decoders (codecs) are publicly available <ref> [6, 10, 11, 12] </ref>. In this paper, we examine the extent to which increasingly popular cache-coherent bus-based shared memory multiprocessors can be used to speed up software MPEG-2 decoding (we also present some initial results on a cache-coherent machine with physically distributed memory).
Reference: [7] <author> M. K. Kwong, P. T. P. Tang, and B. Lin, </author> <title> "A Real-Time MPEG Software Decoder Using a Portable Message-Passing Library", </title> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, Argonne, </institution> <address> IL 60439-4844. </address>
Reference-contexts: Parallelism is exploited at the block and macroblock level. They report real time encoding at rates higher than 30 pictures/sec for an Intel Paragon XP/S with 330 processors. Their test streams have relatively low resolution (maximum 360x288) and there is little performance analysis to enable extrapolation. <ref> [7] </ref> describes a parallel decoder that exploits parallelization at the GOP level in a message-passing environment, but deals only with MPEG-1 streams. [13] presents an MPEG-2 video encoder for a LAN of workstations. They conclude that for their approach the best parallel scheme should be based on the slices.
Reference: [8] <author> W. Lee, J. Golston, R. J. Gove, and Y. Kim, </author> <title> "Real-time MPEG video codec on a single-chip multiprocessor. </title> <booktitle> Proceedings of the SPIE, Digital Video Compression on Personal Computers: Algorithms and Technologies", </booktitle> <volume> Vol. 2187, </volume> <month> Feb. </month> <year> 1994, </year> <pages> pp. 32-42. </pages>
Reference-contexts: Decoding, however, is important to do in real-time, and real-time decoding seems to be within the capabilities of bus-based multiprocessors that are rapidly becoming commodity systems. While special-purpose signal-processing hardware can be used to accelerate decoding <ref> [8] </ref>, the ability to do it in software offers many advantages: it is less expensive, more flexible for accommodating new algorithms and enhancements as they evolve, and runs on general-purpose hardware that can also be used for other purposes. <p> Parallelizing at the macroblock level is found to be impractical for the general case. Real-time encoding is achieved for relatively small picture sizes. Work has also been done in designing hardware or combined hardware-software codecs that achieve real-time performance. <ref> [8] </ref> describes a software solution on the Multimedia Video Multiprocessor (TMS320C80), and reports real-time results for small picture encoding-decoding.
Reference: [9] <author> Daniel Lenoski, James Laudon, Kourosh Gharachorloo, Wolf-Dietrich Weber, Anoop Gupta, John Hennessy, Mark Horowitz, and Monica Lam, </author> <title> "The Stanford Dash Multiprocessor", </title> <journal> IEEE Computer, </journal> <volume> Vol. 25, No. 3, </volume> <month> March </month> <year> 1992, </year> <pages> pp. 63-79. </pages>
Reference-contexts: And will data placement across physically distributed memories be important and manageable? We are currently investigating these issues on cache-coherent distributed memory machines. Preliminary results on the Stanford DASH multiprocessor <ref> [9] </ref> show that both the GOP and the improved slice version scale as long as there are enough tasks to keep the worker processes busy. However, for these programs written without any attention to data distribution speedups are not as good as on a centralized shared memory system.
Reference: [10] <author> Ketal Patel, Brian C. Smith, and Lawrence A. Rowe, </author> <title> "Performance of a Software MPEG Video Decoder", </title> <institution> Computer Science Division-EECS, University of California, Berkeley. </institution>
Reference-contexts: Sequential software MPEG encoders-decoders (codecs) are publicly available <ref> [6, 10, 11, 12] </ref>. In this paper, we examine the extent to which increasingly popular cache-coherent bus-based shared memory multiprocessors can be used to speed up software MPEG-2 decoding (we also present some initial results on a cache-coherent machine with physically distributed memory).
Reference: [11] <author> Plateau Research Group, </author> <title> "Berkeley MPEG-1 Video Encoder User's Guide", </title> <institution> Computer Science Division, University of California, Berkeley. </institution>
Reference-contexts: Sequential software MPEG encoders-decoders (codecs) are publicly available <ref> [6, 10, 11, 12] </ref>. In this paper, we examine the extent to which increasingly popular cache-coherent bus-based shared memory multiprocessors can be used to speed up software MPEG-2 decoding (we also present some initial results on a cache-coherent machine with physically distributed memory).
Reference: [12] <institution> MPEG Software Simulation Group, "MPEG-2 Encoder/Decoder, </institution> <note> Version 1.1", </note> <month> June </month> <year> 1994. </year> <month> 20 </month>
Reference-contexts: Sequential software MPEG encoders-decoders (codecs) are publicly available <ref> [6, 10, 11, 12] </ref>. In this paper, we examine the extent to which increasingly popular cache-coherent bus-based shared memory multiprocessors can be used to speed up software MPEG-2 decoding (we also present some initial results on a cache-coherent machine with physically distributed memory). <p> We present two parallel implementations of the decoder provided by the MPEG Software Simulations Group <ref> [12] </ref>. The first version exploits very coarse-grained parallelism across groups of pictures in the video sequence, while the second exploits fine-grained parallelism within each picture. We evaluate their performance and resource requirements on a 16-processor Silicon Graphics Challenge multiprocessor using different picture sizes and numbers of processors. <p> As seen in Table 1, we use four different resolutions (176x120, 352x240, 704x480, 1408x960) and four different numbers of pictures per GOP (4, 13, 16, 31) for a total of 16 streams. The public domain encoder <ref> [12] </ref> we used to create the streams creates one slice in every row of a picture. Thus the four different picture sizes have 8, 15, 30 and 60 slices respectively from the smallest to the largest.
Reference: [13] <author> Y. Yu, and D. Anastassiou, </author> <title> "Software implementation of MPEG-2 video encoding using socket programming in LAN", </title> <booktitle> Proceedings of the SPIE, Conference on Digital Video Compression on Personal Computers: Algorithms and Technologies, </booktitle> <address> San Jose, CA, </address> <month> Feb. </month> <pages> 6-10, </pages> <booktitle> 1994, </booktitle> <volume> Vol. 2187, </volume> <pages> pp. </pages> <month> 229-240. </month> <title> [14] "ISO Committee Draft 13818-2, Generic Coding of Moving Pictures and Associated Audio: Recommendation H.262", </title> <address> ISO/IEC JTC1/SC29 WG11/602, Seoul, Nov.1993. </address> <month> 21 </month>
Reference-contexts: Their test streams have relatively low resolution (maximum 360x288) and there is little performance analysis to enable extrapolation. [7] describes a parallel decoder that exploits parallelization at the GOP level in a message-passing environment, but deals only with MPEG-1 streams. <ref> [13] </ref> presents an MPEG-2 video encoder for a LAN of workstations. They conclude that for their approach the best parallel scheme should be based on the slices. Parallelizing at the macroblock level is found to be impractical for the general case. Real-time encoding is achieved for relatively small picture sizes.
References-found: 13

