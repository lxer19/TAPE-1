URL: http://www.cs.purdue.edu/homes/mja/papers/outs.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-library.html
Root-URL: http://www.cs.purdue.edu
Email: fmja,kp,spafg@cs.purdue.edu  
Title: Secure Outsourcing of Some Computations general idea is for the customer to do some carefully
Author: Mikhail J. Atallah (Fellow), Konstantinos N. Pantazopoulos, Eugene H. Spafford (Senior Member) 
Note: The  
Address: West Lafayette, IN 47907-1398  
Affiliation: COAST Laboratory Department of Computer Sciences Purdue University 1398 Department of Computer Sciences  
Abstract: The rapid growth of the Internet facilitates the outsourcing of certain computations, in the following sense: A customer who needs these computations done on some data but lacks the computational resources (or programming expertise) to do so, can use an external agent to perform these computations. This currently arises in many practical situations, including the financial services and petroleum services industries. The outsourcing is secure if it is done without revealing to the agent either the actual data or the actual answer to the computation. In this paper we describe how representative operations matrix multiplication, matrix inversion, solution of a linear system of equations, convolution, and sorting can be securely outsourced in a practical sense. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Alfred V. Aho, John E. Hopcroft, and Jeffrey D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1974. </year>
Reference-contexts: For a review of the definitions of matrix product, matrix inversion, and their properties, we refer the reader to [9] (which contains many other references). For a review of convolution and its properties, we refer the reader to <ref> [1] </ref>. 2 Matrix Multiplication Assume that C wants to outsource the computation of the product of two n fi n matrices M 1 and M 2 . (At the end of this section we explain how essentially the same method works for non-square matrices.) Notation 1 We use ffi x;y to <p> The case of shrinking dimension is more subtle, and relies on the following fact <ref> [1] </ref>: If X = Q ([1 : m]; [1 : m]) is invertible (m &lt; n), Y = Q ([m + 1 : n]; [m + 1 : n]), V = Q ([1 : m]; [m + 1 : n]), W = Q ([m + 1 : n]; [1 : m]), <p> of M 1 and M 2 is a new vector of size 2n, denoted M = M 1 M 2 , such that M (i) = k=0 Convolution takes O (n 2 ) time if done naively, O (n log n) time if the Fast Fourier Transform (FFT) is used <ref> [1] </ref>. The scheme we describe below satisfies the requirement that all local processing by C take O (n) time. 5.1 Convolution Scheme 1. C selects two random vectors S 1 and S 2 , of size n each (that is, vectors whose entries are random).
Reference: [2] <author> M. Abadi, J. Feigenbaum, J. Killian. </author> <title> On Hiding Information from an Oracle. </title> <journal> J. of Computer and System Sciences, </journal> <volume> 39, </volume> <pages> pages 21-50, </pages> <year> 1989. </year>
Reference-contexts: The framework of this paper differs from what is found in the cryptography literature concerning this kind of problem. Secure outsourcing in the sense of <ref> [2] </ref> follows an information-theoretic approach, leading to elegant negative results about the impossibility of securely outsourcing compu-tationally intractable problems.
Reference: [3] <author> P. Beguin, J-J. Quisquater. </author> <title> Fast Server-Aided RSA Signatures Secure Against Active Attacks. </title> <booktitle> CRYPTO 1995, </booktitle> <pages> pp. 57-69. </pages>
Reference-contexts: Also reminescent of this work is the server-aided computation literature, but most papers there deal with modular exponentiations and not with numerical computing <ref> [15, 17, 20, 16, 13, 11, 3, 14, 10] </ref>).
Reference: [4] <author> S. J. Chapin and E. H. Spafford. </author> <title> Support for security in distributed systems: Using MESSIAHS. </title> <booktitle> In proceedings of the National Computer Security Conference, </booktitle> <pages> pages 339-447, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: We also note that the scheme proposed in this paper solves an interesting problem related to the distributed scheduling system described by Chapin and Spafford in <ref> [4] </ref>. The work described there provided an architecture to distribute large computations without disclosing information about the machines doing the computation, and without sacrificing control of those machines.
Reference: [5] <author> B. Dole, S. Lodin, and E. H. Spafford. </author> <title> Misplaced trust: Kerberos 4 session keys. </title> <booktitle> In Proceedings of 4th Symposium on Network and Distributed System Security, </booktitle> <pages> pages 60-71, </pages> <publisher> IEEE Press, </publisher> <month> February </month> <year> 1997. </year>
Reference-contexts: Throughout what follows we use random numbers, random matrices, random permutations, etc.; it is always assumed that each is generated independently of the others, and that quality random number generation is used (cf. [7, Chap. 23], [21, [Chap. 12], <ref> [6, 12, 5] </ref>). It is not assumed that they are generated from a uniform distribution, or in fact from any particular fixed distribution.
Reference: [6] <author> D. E. Eastlake, S. D. Crocker, and J. I. Schiller. </author> <title> RFC-1750 Randomness Recommendations for Security. </title> <institution> Network Working Group, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: Throughout what follows we use random numbers, random matrices, random permutations, etc.; it is always assumed that each is generated independently of the others, and that quality random number generation is used (cf. [7, Chap. 23], [21, [Chap. 12], <ref> [6, 12, 5] </ref>). It is not assumed that they are generated from a uniform distribution, or in fact from any particular fixed distribution.
Reference: [7] <author> S. Garfinkel and E. H. Spafford. </author> <title> Practical UNIX & Internet Security. </title> <publisher> O'Reilly & Associates, </publisher> <address> second edition, </address> <year> 1996. </year>
Reference-contexts: Throughout what follows we use random numbers, random matrices, random permutations, etc.; it is always assumed that each is generated independently of the others, and that quality random number generation is used (cf. <ref> [7, Chap. 23] </ref>, [21, [Chap. 12], [6, 12, 5]). It is not assumed that they are generated from a uniform distribution, or in fact from any particular fixed distribution.
Reference: [8] <author> G. H. Golub and C. F. Van Loan. </author> <title> newblock Matrix Computations. </title> <publisher> Johns Hopkins University Press, </publisher> <address> third edition, </address> <year> 1997. </year>
Reference-contexts: can be generated so they belong to a class of matrices known to be invertible, such as the P i we have been using (in such a case ^ S can be computed by C locally, without outsourcing); there are many other classes of matrices known to be invertible (cf. <ref> [8, 9] </ref>). <p> However, a more numerically stable method of solving such a system is Gaussian Elimination <ref> [8] </ref>, which takes M and b as input and produces x as output if M is nonsingular (otherwise it returns a message that M is singular).
Reference: [9] <author> R. A. Horn and C. R. Johnson. </author> <title> Matrix Analysis. </title> <publisher> Cambridge University Press, </publisher> <year> 1985. </year>
Reference-contexts: We assume that the reader is familiar with the basic mathematical objects mentioned below. For a review of the definitions of matrix product, matrix inversion, and their properties, we refer the reader to <ref> [9] </ref> (which contains many other references). <p> can be generated so they belong to a class of matrices known to be invertible, such as the P i we have been using (in such a case ^ S can be computed by C locally, without outsourcing); there are many other classes of matrices known to be invertible (cf. <ref> [8, 9] </ref>).
Reference: [10] <author> S-J. Hwang, C-C. Chang, W-P. Yang. </author> <title> Some Active Attacks on Fast Server-Aided Secret Computation Protocols for Modular Exponentiation. Cryptography: Policy and Algorithms, </title> <publisher> LNCS 1029, </publisher> <year> 1996, </year> <pages> pp. 215-228. </pages>
Reference-contexts: Also reminescent of this work is the server-aided computation literature, but most papers there deal with modular exponentiations and not with numerical computing <ref> [15, 17, 20, 16, 13, 11, 3, 14, 10] </ref>).
Reference: [11] <author> S-I. Kawamura, A. Shimbo. </author> <title> Fast Server-Aided Secret Computation Protocols for Modular Exponentiation. </title> <journal> Proc. of IEEE J. on Selected Areas in Communications, </journal> <volume> 11(5), </volume> <year> 1993, </year> <pages> pp. 778-784. </pages>
Reference-contexts: Also reminescent of this work is the server-aided computation literature, but most papers there deal with modular exponentiations and not with numerical computing <ref> [15, 17, 20, 16, 13, 11, 3, 14, 10] </ref>).
Reference: [12] <author> D. E. Knuth. </author> <booktitle> The Art of Computer Programming, </booktitle> <volume> Volume 2. </volume> <publisher> Addison Wesley, </publisher> <address> second edition, </address> <year> 1981. </year>
Reference-contexts: Throughout what follows we use random numbers, random matrices, random permutations, etc.; it is always assumed that each is generated independently of the others, and that quality random number generation is used (cf. [7, Chap. 23], [21, [Chap. 12], <ref> [6, 12, 5] </ref>). It is not assumed that they are generated from a uniform distribution, or in fact from any particular fixed distribution.
Reference: [13] <author> C-S. Laih, S-M. Yen. </author> <title> Secure Addition Sequence and its Application on the Server-Aided Secret Computation Protocols. </title> <booktitle> AUSCRYPT 1992, </booktitle> <pages> pp. 219-230. </pages>
Reference-contexts: Also reminescent of this work is the server-aided computation literature, but most papers there deal with modular exponentiations and not with numerical computing <ref> [15, 17, 20, 16, 13, 11, 3, 14, 10] </ref>).
Reference: [14] <author> C-H. Lim, P. J. Lee. </author> <title> Security and Performance of Server-Aided RSA Computation Protocols. </title> <booktitle> CRYPTO 1995, </booktitle> <pages> pp. 70-83. </pages>
Reference-contexts: Also reminescent of this work is the server-aided computation literature, but most papers there deal with modular exponentiations and not with numerical computing <ref> [15, 17, 20, 16, 13, 11, 3, 14, 10] </ref>).
Reference: [15] <author> T. Matsumoto, K. Kato, H. Imai. </author> <title> Speeding Up Secret Computations with Insecure Auxiliary Devices. </title> <booktitle> CRYPTO 1988, </booktitle> <pages> pp. 497-506. </pages>
Reference-contexts: Also reminescent of this work is the server-aided computation literature, but most papers there deal with modular exponentiations and not with numerical computing <ref> [15, 17, 20, 16, 13, 11, 3, 14, 10] </ref>).
Reference: [16] <author> B. Pfitzmann, M. Waidner. </author> <title> Attacks on Protocols for Server-Aided RSA Computation. </title> <booktitle> EURO-CRYPT 1992, </booktitle> <pages> pp. 153-162. </pages>
Reference-contexts: Also reminescent of this work is the server-aided computation literature, but most papers there deal with modular exponentiations and not with numerical computing <ref> [15, 17, 20, 16, 13, 11, 3, 14, 10] </ref>).
Reference: [17] <author> J-J. Quisquater, M. de Soete. </author> <title> Speeding Up Smart Card RSA Computations With Insecure Copro-cessors. Smart Card 2000, </title> <publisher> North Holland, </publisher> <year> 1991, </year> <pages> pp. 191-197. </pages>
Reference-contexts: Also reminescent of this work is the server-aided computation literature, but most papers there deal with modular exponentiations and not with numerical computing <ref> [15, 17, 20, 16, 13, 11, 3, 14, 10] </ref>).
Reference: [18] <author> R. L. Rivest, L. Adleman, and M. L. Dertouzos. </author> <title> On data banks and privacy homomorphisms. </title> <editor> In Richard A. DeMillo, editor, </editor> <booktitle> Foundations of Secure Computation, </booktitle> <pages> pages 169-177. </pages> <publisher> Academic Press, </publisher> <year> 1978. </year>
Reference-contexts: The experimental data from our "proof of concept" software implementation seems to confirm the practical viability of our methods. Finally, our approach also differs from the privacy homomorphism approach that has been proposed in the past <ref> [18] </ref>. The framework of the latter assumes that the outsourcing agent is used as a permanent repository of the data, performing certain operations on it and maintaining certain predicates, whereas the customer needs only to decrypt the data from the external agent's repository to obtain from it the real data.
Reference: [19] <author> B. Schneier. </author> <title> Applied Cryptography. </title> <publisher> Wiley, </publisher> <address> second edition, </address> <year> 1996. </year>
Reference-contexts: In addition, the cryptographic protocols literature contains much 2 that is reminescent of the framework of the present paper, with many elegant protocols for cooper-atively computing functions without revealing information about the functions' arguments to the other party (cf. the many references in, for example, <ref> [22, 19] </ref>). Also reminescent of this work is the server-aided computation literature, but most papers there deal with modular exponentiations and not with numerical computing [15, 17, 20, 16, 13, 11, 3, 14, 10]).
Reference: [20] <author> A. Shimbo, S. Kawamura. </author> <title> Factorization Attacks on Certain Server-Aided Computation Protocols for the RSA Secret Transformation. </title> <journal> Electronic Letters, </journal> <volume> 26(17), </volume> <year> 1990, </year> <pages> pp. 1387-1388. </pages>
Reference-contexts: Also reminescent of this work is the server-aided computation literature, but most papers there deal with modular exponentiations and not with numerical computing <ref> [15, 17, 20, 16, 13, 11, 3, 14, 10] </ref>).
Reference: [21] <author> D. R. Stinson. </author> <title> Cryptography: Theory and Practice. </title> <publisher> CRC Press, </publisher> <address> Boca Raton, FL, </address> <year> 1995. </year>
Reference-contexts: Throughout what follows we use random numbers, random matrices, random permutations, etc.; it is always assumed that each is generated independently of the others, and that quality random number generation is used (cf. [7, Chap. 23], <ref> [21, [Chap. 12] </ref>, [6, 12, 5]). It is not assumed that they are generated from a uniform distribution, or in fact from any particular fixed distribution.
Reference: [22] <editor> G. J. Simmons, editor. </editor> <booktitle> Contemporary Cryptology: The science of Information Integrity. </booktitle> <publisher> IEEE Press, </publisher> <year> 1992. </year> <month> 24 </month>
Reference-contexts: In addition, the cryptographic protocols literature contains much 2 that is reminescent of the framework of the present paper, with many elegant protocols for cooper-atively computing functions without revealing information about the functions' arguments to the other party (cf. the many references in, for example, <ref> [22, 19] </ref>). Also reminescent of this work is the server-aided computation literature, but most papers there deal with modular exponentiations and not with numerical computing [15, 17, 20, 16, 13, 11, 3, 14, 10]).
References-found: 22

