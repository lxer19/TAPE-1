URL: ftp://ftp.cs.rpi.edu/pub/goldberg/2part-jour.ps.gz
Refering-URL: http://www.cs.rpi.edu/~goldberg/papers/
Root-URL: http://www.cs.rpi.edu
Title: Path Optimization for Graph Partitioning Problems  
Author: Jonathan W. Berry Mark K. Goldberg 
Address: Elon College, N.C., 27244, U.S.A.  Troy, N.Y., 12180, U.S.A.  
Affiliation: Department of Computing Sciences,  Department of Computer Science,Rensselaer Polytechnic Institute,  
Abstract: This paper presents a new heuristic for graph partitioning called Path Optimization (PO), and the results of an extensive set of empirical comparisons of the new algorithm with two very well-known algorithms for partitioning: the Kernighan-Lin algorithm and simulated annealing. Our experiments are described in detail, and the results are presented in such a way as to reveal performance trends based on several variables. Sufficient trials are run to obtain 99% confidence intervals small enough to lead to a statistical ranking of the implementations for various circumstances. The results for geometric graphs, which have become a frequently-used benchmark in the evaluation of partitioning algorithms, show that PO holds an advantage over the others. In addition to the main test suite described above, comparisons of PO to more recent partitioning approaches are also given. We present the results of comparisons of PO with a parallelized implementation of Goemans' and Williamson's 0.878 approximation algorithm, a flow-based heuristic due to Lang and Rao, and the multilevel algorithm of Hendrickson and Leland. 
Abstract-found: 1
Intro-found: 1
Reference: [Ber94] <author> J. W. Berry. </author> <title> Path Optimization for Graph Partitioning Problems: A Case Study of Near Greedy Analysis. </title> <type> PhD thesis, </type> <institution> Rensselaer Polytechnic Institute, </institution> <month> Dec </month> <year> 1994. </year>
Reference-contexts: The max cut problem remains NP-hard for such cases. 2 Previous Work The history of work on approximate graph bisection problems dates back at least thirty years. We will not attempt to chronicle this work here. A more thorough review is presented in <ref> [Ber94] </ref>. An excellent survey of results in spectral and polyhedral approaches to the max cut problem is presented in [PT93]. Below, we will give a very brief summary of the most familiar approaches to graph partitioning. <p> A similar vertex ordering technique was described in [CSS91]. The W algorithm is so named since the construction of a partitioning represents a single walk down an implicit backtracking tree (where the other branches of the tree are due to possible non-greedy placements. See <ref> [Ber94] </ref> for more details). 4.3 Algorithm Implementations Our implementations of the KL, SA, and PO algorithms all share the exact same bucket data structure code and were implemented in C as parts of a single system by the same programmer. <p> The Path Optimization algorithm is defined for hypergraphs, but the experiments have been limited to binary graphs. Certainly, future work is to explore this area. Finally, the W algorithm has been shown to provide excellent starting parti-tionings when sparse, structured graphs are considered. In <ref> [Ber94] </ref>, a probabilistic-greedy (PG) variation of the greedy W algorithm is described and shown to outperform W in certain cases. The PG PO combination has yet to be explored. 26 7 Acknowledgments Most of this work was done while Jonathan Berry was a Ph.D. student at Rensselaer Polytechnic Institute.
Reference: [BHP83] <author> M. Burstein, S. J. Hong, and R. Pelavin. </author> <title> Hierarchical VLSI layout: Simultaneous placement and wiring of gate arrays. </title> <booktitle> In Proceedings IFIP VLSI-83, </booktitle> <month> August </month> <year> 1983. </year>
Reference: [BOD86] <author> Bruce L. Bowerman, Richard T. O'Connell, and David A. Dickey. </author> <title> Linear Statistical Models: An Applied Approach. </title> <publisher> Duxbury Press, </publisher> <address> Boston, Massachusetts, </address> <year> 1986. </year>
Reference-contexts: For each algorithm, only the best solution for each graph was retained. The sample mean and standard deviation of this set of observations were then computed, as well as a 99% confidence interval for the true mean solution. For a discussion of 100 (1 ff)% confidence intervals, see <ref> [BOD86] </ref>. In standard statistical practice, a confidence interval derived from a sample size of more than thirty trials allows an appeal to The Central Limit Theorem and an argument that, with a given confidence, the true mean lies somewhere in the interval, regardless of the distribution of the individual trials.
Reference: [Bop87] <author> R. B. Boppana. </author> <title> Eigenvalues and graph bisection: An average case. </title> <booktitle> In Proceedings of the 28th Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 280-285, </pages> <year> 1987. </year>
Reference-contexts: Different approaches to the problem include network flow-based method ([SM86], [LR88],[LR93]), spectral and polyhedral approaches ([DH73], <ref> [Bop87] </ref>, [RW90], [PR91], [PT93]), and approximation algorithms ([GWed], [GW94], [HP95]). 3 Path Optimization Path Optimization can be viewed as a variation of the hill-climbing local optimization partitioning procedure. Given an initial partitioning = (S; S), PO performs a variation of simple neighborhood search.
Reference: [Bui86] <author> Thang N. Bui. </author> <title> Graph Bisection Algorithms. </title> <type> PhD thesis, </type> <institution> Massachussetts Institute of Technology, </institution> <year> 1986. </year>
Reference-contexts: One Pass of the KL Algorithm Other partitioning heuristics include the Fiduccia-Mattheyses variation of KL [FM82], versions of KL employing graph contraction ([GB83], <ref> [Bui86] </ref>, [JAMS89], [GG84], [GLR86], [HL93b]), simulated annealing (SA) (introduced in [KGV83], and applied to graph partitioning in [JAMS89]), and genetic algorithms [Hol75]. <p> 17sec 282.49,354.48 275.52,308.74 275.40,311.57 184.54,214.49 200,000 90sec 961.58,1572.62 558.25,679.75 570.13,692.47 NA Table 4.2 Very short runs: (ML is the multilevel algorithm of [HL93b]) Expected # Cuts (same graph classes as Figure 4.10 The idea of partitioning large graphs by performing a series of graph contractions has been explored in [GB83], <ref> [Bui86] </ref>, [JAMS89], and [HL93b]. In [Bui86] and [JAMS89], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse. Bui [Bui86] finds an advantage for regular graphs of a special class only if the degree <p> 200,000 90sec 961.58,1572.62 558.25,679.75 570.13,692.47 NA Table 4.2 Very short runs: (ML is the multilevel algorithm of [HL93b]) Expected # Cuts (same graph classes as Figure 4.10 The idea of partitioning large graphs by performing a series of graph contractions has been explored in [GB83], <ref> [Bui86] </ref>, [JAMS89], and [HL93b]. In [Bui86] and [JAMS89], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse. Bui [Bui86] finds an advantage for regular graphs of a special class only if the degree is four or less. <p> large graphs by performing a series of graph contractions has been explored in [GB83], <ref> [Bui86] </ref>, [JAMS89], and [HL93b]. In [Bui86] and [JAMS89], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse. Bui [Bui86] finds an advantage for regular graphs of a special class only if the degree is four or less. In [HL93b], Hendrickson and Leland give a multilevel algorithm which uses weighted intermediate graphs to preserve good partitionings as the graph is uncontracted.
Reference: [CCJ90] <author> B.N. Clark, C.J. Colbourn, and D.S. Johnson. </author> <title> Unit disk graphs. </title> <journal> Discrete Mathematics, </journal> <volume> 86 </volume> <pages> 165-177, </pages> <year> 1990. </year>
Reference-contexts: Edge (v i ; v j ) exists iff the euclidean distance between v i and v j is less than or equal to d. 8 Members of R G n;d have also been called "unit disk graphs" in <ref> [CCJ90] </ref>. They are notable for their structured nature and offer a contrast to random graphs. Both of these types of graphs have been used for comparisons before in the literature, and we continue the trend in order to facilitate further comparisons.
Reference: [CSS91] <author> L.H. Clark, F. Shahrokhi, and L.A. Szekely. </author> <title> A linear time algorithm for graph partition problems. </title> <type> Technical report, </type> <institution> University of New Mexico, Department of Mathematics and Statistics, </institution> <year> 1991. </year>
Reference-contexts: In max-diff selection, the next vertex is drawn at random from the appropriate set of candidates. A similar vertex ordering technique was described in <ref> [CSS91] </ref>. The W algorithm is so named since the construction of a partitioning represents a single walk down an implicit backtracking tree (where the other branches of the tree are due to possible non-greedy placements.
Reference: [DH73] <author> William E. Donath and A. J. Hoffman. </author> <title> Lower bounds for the partitioning of graphs. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 17 </volume> <pages> 420-425, </pages> <year> 1973. </year>
Reference-contexts: Approximate bisection problems like min quotient cut have many well-documented applications. The most widely cited application in the literature is in logic design ([BHP83], <ref> [DH73] </ref>, [Dun83], [FM82], [GB83], [Lei80], [KL70], [Ull84]).
Reference: [Dun83] <author> A. E. Dunlop. </author> <title> Automatic layout of gate arrays. </title> <booktitle> In Proceedings ISCAS-83, </booktitle> <pages> pages 1245-1248, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: Approximate bisection problems like min quotient cut have many well-documented applications. The most widely cited application in the literature is in logic design ([BHP83], [DH73], <ref> [Dun83] </ref>, [FM82], [GB83], [Lei80], [KL70], [Ull84]).
Reference: [FM82] <author> Charles M. Fiduccia and R. M. Mattheyses. </author> <title> A linear-time heuristic for improving network partitions. </title> <booktitle> In Proceedings of the 19 th IEEE Design Automation Conference, </booktitle> <pages> pages 175-181, </pages> <year> 1982. </year> <month> 27 </month>
Reference-contexts: Approximate bisection problems like min quotient cut have many well-documented applications. The most widely cited application in the literature is in logic design ([BHP83], [DH73], [Dun83], <ref> [FM82] </ref>, [GB83], [Lei80], [KL70], [Ull84]). <p> One Pass of the KL Algorithm Other partitioning heuristics include the Fiduccia-Mattheyses variation of KL <ref> [FM82] </ref>, versions of KL employing graph contraction ([GB83], [Bui86], [JAMS89], [GG84], [GLR86], [HL93b]), simulated annealing (SA) (introduced in [KGV83], and applied to graph partitioning in [JAMS89]), and genetic algorithms [Hol75]. <p> Let us define the cell-gain of a vertex v (cg (v)) to be the number of edges that would be added to the cut if v were to move to the other partition. This definition will be formalized in Section 5. Fiduccia and Mattheyses use a similar definition in <ref> [FM82] </ref>. As in [FM82], bucket sorting can be used to store the vertices so that finding the one with highest (or lowest) cg is a constant time operation. However PO relies on this information to a lesser extent than KL variants when determining its next move. <p> This definition will be formalized in Section 5. Fiduccia and Mattheyses use a similar definition in <ref> [FM82] </ref>. As in [FM82], bucket sorting can be used to store the vertices so that finding the one with highest (or lowest) cg is a constant time operation. However PO relies on this information to a lesser extent than KL variants when determining its next move. <p> These can be divided into two main parts: an extensive comparison of the Kernighan-Lin [KL70] (Fiduccia-Mattheyses version <ref> [FM82] </ref>) (KL), simulated annealing [KGV83,JAMS89] (SA), and Path Optimization (PO) algorithms, and a more specialized evaluation of the algorithms against other approaches to partitioning such as graph contraction, flow-based methods, and the 0.878 7 flip cost incr (v; P ) Determine whether on not vertex v is suitable to extend path <p> The pseudocode for the algorithm flip cost incr is found in Figure 5.15. Following <ref> [FM82] </ref>, we define the "from block" of an edge e with respect to a 25 vertex v by FR (v; e) = &gt; &lt; e S ; if loc (v) = S; e S ; otherwise. The "to-block" TO (v,e) is defined similarly using S. <p> The "to-block" TO (v,e) is defined similarly using S. Each vertex is locked when added to the current path, and each edge maintains a count of the number of its vertices which are locked. It is shown in <ref> [FM82] </ref> that the operation of flip-flopping all of the vertices takes time O (m), where m is the number of edges in G.
Reference: [GB83] <author> M. K. Goldberg and M. Burstein. </author> <title> Heuristic improvement technique for bisection of VLSI networks. </title> <booktitle> In Proceedings of the IEEE International Conference on Computer Design: VLSI in Computers (ICCD '83), </booktitle> <pages> pages 122-125, </pages> <year> 1983. </year>
Reference-contexts: Approximate bisection problems like min quotient cut have many well-documented applications. The most widely cited application in the literature is in logic design ([BHP83], [DH73], [Dun83], [FM82], <ref> [GB83] </ref>, [Lei80], [KL70], [Ull84]). <p> 50,000 17sec 282.49,354.48 275.52,308.74 275.40,311.57 184.54,214.49 200,000 90sec 961.58,1572.62 558.25,679.75 570.13,692.47 NA Table 4.2 Very short runs: (ML is the multilevel algorithm of [HL93b]) Expected # Cuts (same graph classes as Figure 4.10 The idea of partitioning large graphs by performing a series of graph contractions has been explored in <ref> [GB83] </ref>, [Bui86], [JAMS89], and [HL93b]. In [Bui86] and [JAMS89], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse.
Reference: [GG84] <author> M. K. Goldberg and R. Gardner. </author> <title> On the minimal cut problem. </title> <booktitle> In Progress in Graph Theory, </booktitle> <pages> pages 295-305. </pages> <publisher> Academic Press, </publisher> <year> 1984. </year>
Reference-contexts: One Pass of the KL Algorithm Other partitioning heuristics include the Fiduccia-Mattheyses variation of KL [FM82], versions of KL employing graph contraction ([GB83], [Bui86], [JAMS89], <ref> [GG84] </ref>, [GLR86], [HL93b]), simulated annealing (SA) (introduced in [KGV83], and applied to graph partitioning in [JAMS89]), and genetic algorithms [Hol75].
Reference: [GLR86] <author> M. K. Goldberg, S. Lath, and J. W. Roberts. </author> <title> Heuristics for the graph bisection problem. </title> <type> Technical Report 86-8, </type> <institution> Rensselaer Polytechnic Institute, Department of Computer Science, </institution> <year> 1986. </year>
Reference-contexts: One Pass of the KL Algorithm Other partitioning heuristics include the Fiduccia-Mattheyses variation of KL [FM82], versions of KL employing graph contraction ([GB83], [Bui86], [JAMS89], [GG84], <ref> [GLR86] </ref>, [HL93b]), simulated annealing (SA) (introduced in [KGV83], and applied to graph partitioning in [JAMS89]), and genetic algorithms [Hol75].
Reference: [GW94] <author> M. Goemans and D. Williamson. </author> <title> .878-approximation algorithms for max cut and max 2sat. </title> <booktitle> In Proceedings of the 26 nd ACM Symposium on Theory of Computing, </booktitle> <year> 1994. </year>
Reference-contexts: Different approaches to the problem include network flow-based method ([SM86], [LR88],[LR93]), spectral and polyhedral approaches ([DH73], [Bop87], [RW90], [PR91], [PT93]), and approximation algorithms ([GWed], <ref> [GW94] </ref>, [HP95]). 3 Path Optimization Path Optimization can be viewed as a variation of the hill-climbing local optimization partitioning procedure. Given an initial partitioning = (S; S), PO performs a variation of simple neighborhood search.
Reference: [GWed] <author> M. Goemans and D. Williamson. </author> <title> Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming. </title> <journal> Journal of the ACM, </journal> <note> submitted. </note>
Reference-contexts: The flip cost incr routine FIRST 2 KL MOVES -3 -3 -3 INITIAL PARTITIONING -1 -1 -1 -1 PO: A PATH TO OPT. start 1st try try Fig. 3.6. A simple example showing an operational difference between KL and PO (max cut problem) approximation algorithm for max cut <ref> [GWed] </ref>. 4.1 Graph Types The type of graphs on which we experimented, used by Johnson, et al. [JAMS89] and Lang and Rao [LR93], are random graphs, and randomly-generated geometric graphs. <p> These are sparse random graphs R n; 10 n , data from [HP95]. The three heuristics are run for one hour of Sparcstation-20 time each. The approximation algorithm results were obtained in a matter of minutes on the CM-5. Goemans and Williamson <ref> [GWed] </ref> cite the complexity of solving the semidefi-nite program to within an additive error of * as O (n 3:5 (log W tot +log 1 * )), where W tot is the sum of the weights of the edges. <p> Tables 4.3, 4.4, 4.5, and 4.6 present a comparison between partitionings ob tained by the heuristics with Homer and Peinado's parallelized implementa-5 A semidefinite program is an optimization problem of a linear function of a symmetric, positive semidefinite matrix subject to linear equality constraints. See <ref> [GWed] </ref> for further references. 21 n edges upper bound W-SA W-PO W-KL GW cm5 5029 14805 10965 10520 10460 10467 10356 Table 4.5 Comparisons with known upper bounds for max cut. These are sparse geometric graphs, data from [HP95].
Reference: [Had75] <author> F.O. Hadlock. </author> <title> Finding a maximum cut of a planar graph in polynomial time. </title> <journal> SIAM Journal of Computing, </journal> <volume> 4 </volume> <pages> 221-225, </pages> <year> 1975. </year>
Reference: [HL92] <author> B. Hendrickson and R. Leland. </author> <title> An improved spectral graph partitioning algorithm for mapping parallel computations. </title> <type> Technical Report SAND92-1460, </type> <institution> Sandia National Laboratories, </institution> <year> 1992. </year>
Reference-contexts: In [HL93b], Hendrickson and Leland give a multilevel algorithm which uses weighted intermediate graphs to preserve good partitionings as the graph is uncontracted. The contractions are obtained by finding maximal matchings and identifying endpoints of matching edges. After the resultant graph is partitioned using the spectral method of <ref> [HL92] </ref>, the original graph is restored through a series of uncontractions, with KL (FM ) occasionally cleaning the partitioning. Results are presented indicating that for bisection of large, sparse graphs, this algorithm performs significantly better than spectral partitioning alone.
Reference: [HL93a] <author> B. Hendrickson and R. Leland. </author> <title> The Chaco Users Guide, version 1.0. </title> <type> Technical Report SAND93-2339, </type> <institution> Sandia National Laboratories, </institution> <year> 1993. </year>
Reference-contexts: This problem calls for partitioning into k sets, either directly or using recursive bisection. The partitioning system Chaco, developed at Sandia National Laboratory by Hendrickson and Le-land <ref> [HL93a] </ref>, is directed towards this application of cut minimization and will be discussed in Section 4. 2 Several real-life applications of the max cut problem are listed in [PT93]. <p> Results are presented indicating that for bisection of large, sparse graphs, this algorithm performs significantly better than spectral partitioning alone. Using Chaco <ref> [HL93a] </ref>, a partitioning system due to Hendrickson and Leland which implements several spectral partitioning methods and the multilevel algorithm described above, we were able to make limited comparisons with W-PO, line-KL, and line-SA.
Reference: [HL93b] <author> B. Hendrickson and R. Leland. </author> <title> A multilevel algorithm for partitioning graphs. </title> <type> Technical Report SAND93-1301, </type> <institution> Sandia National Laboratories, </institution> <year> 1993. </year>
Reference-contexts: One Pass of the KL Algorithm Other partitioning heuristics include the Fiduccia-Mattheyses variation of KL [FM82], versions of KL employing graph contraction ([GB83], [Bui86], [JAMS89], [GG84], [GLR86], <ref> [HL93b] </ref>), simulated annealing (SA) (introduced in [KGV83], and applied to graph partitioning in [JAMS89]), and genetic algorithms [Hol75]. <p> the FLOW heuristic is an excellent initial partitioning generator. 4.6.4 Comparisons with Graph Contraction Heuristics vertices time W-PO line-KL line-SA ML 12,500 4sec 104.97,133.16 139.14,155.77 139.08,159.70 100.96,122.98 50,000 17sec 282.49,354.48 275.52,308.74 275.40,311.57 184.54,214.49 200,000 90sec 961.58,1572.62 558.25,679.75 570.13,692.47 NA Table 4.2 Very short runs: (ML is the multilevel algorithm of <ref> [HL93b] </ref>) Expected # Cuts (same graph classes as Figure 4.10 The idea of partitioning large graphs by performing a series of graph contractions has been explored in [GB83], [Bui86], [JAMS89], and [HL93b]. <p> 275.40,311.57 184.54,214.49 200,000 90sec 961.58,1572.62 558.25,679.75 570.13,692.47 NA Table 4.2 Very short runs: (ML is the multilevel algorithm of <ref> [HL93b] </ref>) Expected # Cuts (same graph classes as Figure 4.10 The idea of partitioning large graphs by performing a series of graph contractions has been explored in [GB83], [Bui86], [JAMS89], and [HL93b]. In [Bui86] and [JAMS89], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse. <p> Bui [Bui86] finds an advantage for regular graphs of a special class only if the degree is four or less. In <ref> [HL93b] </ref>, Hendrickson and Leland give a multilevel algorithm which uses weighted intermediate graphs to preserve good partitionings as the graph is uncontracted. The contractions are obtained by finding maximal matchings and identifying endpoints of matching edges.
Reference: [Hol75] <author> J. H. Holland. </author> <title> Adaptation in Natural and Artificial Systems. </title> <publisher> University of Michigan Press, </publisher> <address> Ann Arbor, </address> <year> 1975. </year>
Reference-contexts: One Pass of the KL Algorithm Other partitioning heuristics include the Fiduccia-Mattheyses variation of KL [FM82], versions of KL employing graph contraction ([GB83], [Bui86], [JAMS89], [GG84], [GLR86], [HL93b]), simulated annealing (SA) (introduced in [KGV83], and applied to graph partitioning in [JAMS89]), and genetic algorithms <ref> [Hol75] </ref>. Different approaches to the problem include network flow-based method ([SM86], [LR88],[LR93]), spectral and polyhedral approaches ([DH73], [Bop87], [RW90], [PR91], [PT93]), and approximation algorithms ([GWed], [GW94], [HP95]). 3 Path Optimization Path Optimization can be viewed as a variation of the hill-climbing local optimization partitioning procedure.
Reference: [HP95] <author> S. Homer and M. Peinado. </author> <title> A highly parallel algorithm to approximate maxcut on distributed memory architechtures. </title> <booktitle> In International Parallel Programming Symposium, </booktitle> <year> 1995. </year>
Reference-contexts: Different approaches to the problem include network flow-based method ([SM86], [LR88],[LR93]), spectral and polyhedral approaches ([DH73], [Bop87], [RW90], [PR91], [PT93]), and approximation algorithms ([GWed], [GW94], <ref> [HP95] </ref>). 3 Path Optimization Path Optimization can be viewed as a variation of the hill-climbing local optimization partitioning procedure. Given an initial partitioning = (S; S), PO performs a variation of simple neighborhood search. <p> These are sparse random graphs R n; 10 n , data from <ref> [HP95] </ref>. The three heuristics are run for 15 seconds of Sparcstation-20 time each. The approximation algorithm results were obtained in a matter of minutes on the CM-5. <p> These are sparse random graphs R n; 10 n , data from <ref> [HP95] </ref>. The three heuristics are run for one hour of Sparcstation-20 time each. The approximation algorithm results were obtained in a matter of minutes on the CM-5. <p> This complexity is not practical for large instances of the problem; however, Homer and Peinado give a par-allelized version of GW in <ref> [HP95] </ref>. Guaranteed polynomial time convergence is traded for a method with faster practical running time and an optimal parallelization. Using this method, it is possible to solve instances of random graphs with up to 8000 vertices in about 45 minutes on a 32-node Connection Machine (CM-5). <p> See [GWed] for further references. 21 n edges upper bound W-SA W-PO W-KL GW cm5 5029 14805 10965 10520 10460 10467 10356 Table 4.5 Comparisons with known upper bounds for max cut. These are sparse geometric graphs, data from <ref> [HP95] </ref>. The three heuristics are run for 15 seconds of Sparcstation-20 time each. <p> The approximation algorithm results were obtained in a matter of minutes on the CM-5. n edges upper bound W-SA W-PO W-KL GW cm5 5029 14805 10965 10589 10496 10499 10356 Table 4.6 Comparisons with known upper bounds for max cut. These are sparse geometric graphs, data from <ref> [HP95] </ref>. The three heuristics are run for one hour of Sparcstation-20 time each. The approximation algorithm results were obtained in a matter of minutes on the CM-5. tion of The Goemans-Williamson algorithm on a 32 node Connection Machine CM-5.
Reference: [JAMS] <author> D. S. Johnson, C. R. Aragon, L. A. McGeoch, and C. Schevon. </author> <title> Optimization by simulated annealing: An experimental evaluation, part II (graph coloring and number partitioning). </title> <note> To appear in Operations Research. </note>
Reference-contexts: The idea is that, like the physical analogy, the "energy state," or final solution quality, is better when the cooling occurs gradually rather than suddenly. This paradigm is generic enough to be easily adaptable to a striking variety of problems. Some combinatorial applications include Graph Partitioning [JAMS89], Graph Coloring <ref> [JAMS] </ref>, and Number Partitioning [JAMS], among others. However, there are several parameters inherent to the algorithm which must be set in order to tune the algorithm to a particular problem. <p> This paradigm is generic enough to be easily adaptable to a striking variety of problems. Some combinatorial applications include Graph Partitioning [JAMS89], Graph Coloring <ref> [JAMS] </ref>, and Number Partitioning [JAMS], among others. However, there are several parameters inherent to the algorithm which must be set in order to tune the algorithm to a particular problem. These parameters and their settings for graph partitioning were described in Johnson et al. [JAMS89] and are reproduced in Figure 4.7.
Reference: [JAMS89] <author> D. S. Johnson, C. R. Aragon, L. A. McGeoch, and C. Schevon. </author> <title> Optimization by simulated annealing; part I, graph partitioning. </title> <journal> Operations Research, </journal> <volume> 37 </volume> <pages> 865-892, </pages> <year> 1989. </year>
Reference-contexts: One Pass of the KL Algorithm Other partitioning heuristics include the Fiduccia-Mattheyses variation of KL [FM82], versions of KL employing graph contraction ([GB83], [Bui86], <ref> [JAMS89] </ref>, [GG84], [GLR86], [HL93b]), simulated annealing (SA) (introduced in [KGV83], and applied to graph partitioning in [JAMS89]), and genetic algorithms [Hol75]. <p> One Pass of the KL Algorithm Other partitioning heuristics include the Fiduccia-Mattheyses variation of KL [FM82], versions of KL employing graph contraction ([GB83], [Bui86], <ref> [JAMS89] </ref>, [GG84], [GLR86], [HL93b]), simulated annealing (SA) (introduced in [KGV83], and applied to graph partitioning in [JAMS89]), and genetic algorithms [Hol75]. Different approaches to the problem include network flow-based method ([SM86], [LR88],[LR93]), spectral and polyhedral approaches ([DH73], [Bop87], [RW90], [PR91], [PT93]), and approximation algorithms ([GWed], [GW94], [HP95]). 3 Path Optimization Path Optimization can be viewed as a variation of the hill-climbing local optimization partitioning procedure. <p> A simple example showing an operational difference between KL and PO (max cut problem) approximation algorithm for max cut [GWed]. 4.1 Graph Types The type of graphs on which we experimented, used by Johnson, et al. <ref> [JAMS89] </ref> and Lang and Rao [LR93], are random graphs, and randomly-generated geometric graphs. Let us denote the former by R n;p , where n is the number of vertices and p is the probability of the existence of each possible edge. <p> Our version of KL was tested on the set of R G n;d graphs from [LR93], and it reported results comparable to those of their KL implementation, which in turn had been tested against that of <ref> [JAMS89] </ref>. We also obtained the code from [LR93] and ran that version of KL on our data sets. Our implementation of KL performed as well or better when running times were equalized. SA was not tested against any previous data sets, but our implementation is based directly on [JAMS89] and reports <p> that of <ref> [JAMS89] </ref>. We also obtained the code from [LR93] and ran that version of KL on our data sets. Our implementation of KL performed as well or better when running times were equalized. SA was not tested against any previous data sets, but our implementation is based directly on [JAMS89] and reports similar results when run on similar inputs. Simulated annealing ,developed by Kirkpatrick, Gellat, and Vecchi [KGV83], is a local optimization approach based on ideas arising from physics which has been used with success on several well-known discrete optimization problems. <p> The idea is that, like the physical analogy, the "energy state," or final solution quality, is better when the cooling occurs gradually rather than suddenly. This paradigm is generic enough to be easily adaptable to a striking variety of problems. Some combinatorial applications include Graph Partitioning <ref> [JAMS89] </ref>, Graph Coloring [JAMS], and Number Partitioning [JAMS], among others. However, there are several parameters inherent to the algorithm which must be set in order to tune the algorithm to a particular problem. These parameters and their settings for graph partitioning were described in Johnson et al. [JAMS89] and are reproduced <p> include Graph Partitioning <ref> [JAMS89] </ref>, Graph Coloring [JAMS], and Number Partitioning [JAMS], among others. However, there are several parameters inherent to the algorithm which must be set in order to tune the algorithm to a particular problem. These parameters and their settings for graph partitioning were described in Johnson et al. [JAMS89] and are reproduced in Figure 4.7. Generally, we use these default settings, with certain exceptions which are detailed below. An initial annealing run at the beginning of the algorithm is used to find an appropriate starting temperature for the process. <p> This is achieved by estimating the Temp Factor for which one pass of the algorithm will take the 11 entire allotted running time. However, for max cut on R G n;d and min quot-ient cut on both graph types, the Temp Factor is set as in <ref> [JAMS89] </ref> and iterations are performed until the time is up. <p> These settings outperform the defaults. Two modifications to the basic simulated annealing procedure suggested in <ref> [JAMS89] </ref> have been retained in our implementation. The first is that the sequence of potential vertex moves is chosen according to a random permutation rather than choosing individual moves at random. This change was shown to yield improvements in [JAMS89]. <p> Two modifications to the basic simulated annealing procedure suggested in <ref> [JAMS89] </ref> have been retained in our implementation. The first is that the sequence of potential vertex moves is chosen according to a random permutation rather than choosing individual moves at random. This change was shown to yield improvements in [JAMS89]. The second modification is that, rather than computing e =T at each step, we use a lookup table of size 1000 containing values of 200 T . <p> The modifications needed 14 to switch KL and PO to solve min quotient cut are straightforward. For SA, the balancing is achieved through a penalty function as in <ref> [JAMS89] </ref>. Our experiments with annealing based directly on changes in quotient cut offerred no improvement in solution quality. <p> 282.49,354.48 275.52,308.74 275.40,311.57 184.54,214.49 200,000 90sec 961.58,1572.62 558.25,679.75 570.13,692.47 NA Table 4.2 Very short runs: (ML is the multilevel algorithm of [HL93b]) Expected # Cuts (same graph classes as Figure 4.10 The idea of partitioning large graphs by performing a series of graph contractions has been explored in [GB83], [Bui86], <ref> [JAMS89] </ref>, and [HL93b]. In [Bui86] and [JAMS89], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse. <p> 961.58,1572.62 558.25,679.75 570.13,692.47 NA Table 4.2 Very short runs: (ML is the multilevel algorithm of [HL93b]) Expected # Cuts (same graph classes as Figure 4.10 The idea of partitioning large graphs by performing a series of graph contractions has been explored in [GB83], [Bui86], <ref> [JAMS89] </ref>, and [HL93b]. In [Bui86] and [JAMS89], empirical evidence is presented indicating that a contracted version of KL can improve the algorithm both in speed and quality if the input graphs are very sparse. Bui [Bui86] finds an advantage for regular graphs of a special class only if the degree is four or less. <p> In future work, we hope to experiment with this possibility, and test the multilevel algorithm with longer runs and PO as a cleanup routine. 4.7 Max Cut The results of Johnson et al. <ref> [JAMS89] </ref>, which concerned Graph Bisection, a minimization problem, suggested that simulated annealing was slightly better than KL for R n;p and clearly worse for R G n;d .
Reference: [KGV83] <author> S. Kirkpatrick, C. D. Gelatt, and M. P. Vecchi. </author> <title> Optimization by simulated annealing. </title> <journal> Science, </journal> <volume> 220 </volume> <pages> 671-680, </pages> <month> May </month> <year> 1983. </year> <month> 28 </month>
Reference-contexts: One Pass of the KL Algorithm Other partitioning heuristics include the Fiduccia-Mattheyses variation of KL [FM82], versions of KL employing graph contraction ([GB83], [Bui86], [JAMS89], [GG84], [GLR86], [HL93b]), simulated annealing (SA) (introduced in <ref> [KGV83] </ref>, and applied to graph partitioning in [JAMS89]), and genetic algorithms [Hol75]. <p> Our implementation of KL performed as well or better when running times were equalized. SA was not tested against any previous data sets, but our implementation is based directly on [JAMS89] and reports similar results when run on similar inputs. Simulated annealing ,developed by Kirkpatrick, Gellat, and Vecchi <ref> [KGV83] </ref>, is a local optimization approach based on ideas arising from physics which has been used with success on several well-known discrete optimization problems. It deserves special attention since it requires careful tuning to be applied to graph partitioning successfully.
Reference: [KL70] <author> B. W. Kernighan and S. Lin. </author> <title> An efficient heuristic procedure for partitioning graphs. </title> <journal> Bell System Technical Journal, </journal> <volume> 49 </volume> <pages> 291-307, </pages> <year> 1970. </year>
Reference-contexts: Approximate bisection problems like min quotient cut have many well-documented applications. The most widely cited application in the literature is in logic design ([BHP83], [DH73], [Dun83], [FM82], [GB83], [Lei80], <ref> [KL70] </ref>, [Ull84]). <p> Below, we will give a very brief summary of the most familiar approaches to graph partitioning. The de facto benchmark algorithm for more than twenty five years has been the famous local search heuristic due to Kernighan and Lin <ref> [KL70] </ref> (KL ). Many alternative approaches have been proposed and examined. <p> These can be divided into two main parts: an extensive comparison of the Kernighan-Lin <ref> [KL70] </ref> (Fiduccia-Mattheyses version [FM82]) (KL), simulated annealing [KGV83,JAMS89] (SA), and Path Optimization (PO) algorithms, and a more specialized evaluation of the algorithms against other approaches to partitioning such as graph contraction, flow-based methods, and the 0.878 7 flip cost incr (v; P ) Determine whether on not vertex v is suitable
Reference: [KPST84] <author> P. Klein, S. Plotkin, C. Stein, and E. Tardos. </author> <title> Faster approximations algorithms for the unit capacity concurrent flow problem with applications to routing and finding sparse cuts. </title> <booktitle> In Proceedings of the 22nd annual Symposium on Theory of Computing, </booktitle> <pages> pages 310-321, </pages> <year> 1984. </year>
Reference: [Lei80] <author> C. Leiserson. </author> <title> Area-efficient graph layout (for VLSI). </title> <booktitle> In Proceedings of the 21 st Annual IEEE Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 270-281, </pages> <year> 1980. </year>
Reference-contexts: Approximate bisection problems like min quotient cut have many well-documented applications. The most widely cited application in the literature is in logic design ([BHP83], [DH73], [Dun83], [FM82], [GB83], <ref> [Lei80] </ref>, [KL70], [Ull84]).
Reference: [LR88] <author> F. Thomas Leighton and Satish Rao. </author> <title> An approximate max-flow min-cut theorem for uniform multicommodity flow problems with applications to approximation algorithms. </title> <booktitle> In Proceedings of the 29 th IEEE Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 422-431, </pages> <year> 1988. </year>
Reference-contexts: 0.031 0.032 m s Runs of 8192 seconds each Fig. 4.11. min quotient cut, 50 Geometric Graphs, n : 10,000, average degree: 10 4.6.3 Comparisons with Multicommodity Flow Heuristics In [LR93], Lang and Rao described a heuristic called FLOW, which is based upon the multicommodity flow approach to partitioning (see <ref> [LR88] </ref>, [SM90]). The FLOW heuristic is used as an initial partitioning generator rather than a cleanup heuristic such as KL or PO.
Reference: [LR93] <author> K. Lang and S. Rao. </author> <title> Finding near-optimal cuts: an empirical evaluation. </title> <booktitle> In Proceedings of the Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <month> January </month> <year> 1993. </year>
Reference-contexts: A simple example showing an operational difference between KL and PO (max cut problem) approximation algorithm for max cut [GWed]. 4.1 Graph Types The type of graphs on which we experimented, used by Johnson, et al. [JAMS89] and Lang and Rao <ref> [LR93] </ref>, are random graphs, and randomly-generated geometric graphs. Let us denote the former by R n;p , where n is the number of vertices and p is the probability of the existence of each possible edge. <p> Although we have an implementation of PO for hypergraphs, we have not as yet run any algorithm comparisons on those inputs. Lang and Rao experimented with the MCNC benchmark circuits used in [WC89] and others, but found the graphs too small to draw any real conclusions when comparing algorithms <ref> [LR93] </ref>. 4.2 Initial Partitionings The KL, SA, and PO algorithms are all local search methods which accept an initial partitioning of G, then work to improve it. Let us call this process one iteration. <p> Our version of KL was tested on the set of R G n;d graphs from <ref> [LR93] </ref>, and it reported results comparable to those of their KL implementation, which in turn had been tested against that of [JAMS89]. We also obtained the code from [LR93] and ran that version of KL on our data sets. <p> Our version of KL was tested on the set of R G n;d graphs from <ref> [LR93] </ref>, and it reported results comparable to those of their KL implementation, which in turn had been tested against that of [JAMS89]. We also obtained the code from [LR93] and ran that version of KL on our data sets. Our implementation of KL performed as well or better when running times were equalized. <p> Deg. #graphs line-KL FLOW-KL W-PO #times W-PO best 1000 10.94 10 .1175 .1134 .1154 1 10000 12.02 5 .0448 .0406 .0412 2 Table 4.1 min quotient cut Testbed of <ref> [LR93] </ref> SA algorithm tends to pass KL and begin an approach to PO. <p> 0.026 0.028 0.03 0.032 0.034 0.036 m k Runs of 256 seconds each 0.024 0.025 0.026 0.027 0.028 0.029 0.03 0.031 0.032 m s Runs of 8192 seconds each Fig. 4.11. min quotient cut, 50 Geometric Graphs, n : 10,000, average degree: 10 4.6.3 Comparisons with Multicommodity Flow Heuristics In <ref> [LR93] </ref>, Lang and Rao described a heuristic called FLOW, which is based upon the multicommodity flow approach to partitioning (see [LR88], [SM90]). The FLOW heuristic is used as an initial partitioning generator rather than a cleanup heuristic such as KL or PO. <p> We made comparisons of FLOW-KL with W-PO based on the data available from <ref> [LR93] </ref>. The results of our comparisons for graphs of up to 10,000 vertices are given in Table 4.1. The FLOW-KL column refers to the quotient cut found by first applying FLOW, then cleaning up the solution with KL. <p> Although the average quotient cuts of FLOW-KL are slightly better, W-PO produced the best quotient cut five out of twenty times. In <ref> [LR93] </ref>, FLOW-KL was run on one graph of 100,000 vertices and average degree 13.7. After 3 days of running on a 36 MHz Silicon Graphics machine, it produced a quotient cut of .014 ( 700 cut edges).
Reference: [OD72] <author> G.I. Orlova and Y.G. Dorfman. </author> <title> Finding the maximal cut in a graph. </title> <journal> Engrg. Cybernetics, </journal> <pages> pages 502-504, </pages> <year> 1972. </year>
Reference: [PR91] <author> S. Poljak and F. Rendl. </author> <title> Solving the max-cut problem using eigenvalues. </title> <type> Technical Report 199, </type> <institution> Technische Universitat Graz, Institute fur Mathematik, </institution> <year> 1991. </year>
Reference-contexts: Different approaches to the problem include network flow-based method ([SM86], [LR88],[LR93]), spectral and polyhedral approaches ([DH73], [Bop87], [RW90], <ref> [PR91] </ref>, [PT93]), and approximation algorithms ([GWed], [GW94], [HP95]). 3 Path Optimization Path Optimization can be viewed as a variation of the hill-climbing local optimization partitioning procedure. Given an initial partitioning = (S; S), PO performs a variation of simple neighborhood search.
Reference: [PT93] <author> S. Poljak and Z. Tuza. </author> <title> The max-cut problem a survey. </title> <journal> in Special Year on Combinatorial Optimization, </journal> <note> DIMACS series in Discrete Mathematics and Theoretical Computer Science, </note> <author> L. Lovasz and P. Seymour, editors, </author> <note> page (to be published), </note> <year> 1993. </year>
Reference-contexts: The partitioning system Chaco, developed at Sandia National Laboratory by Hendrickson and Le-land [HL93a], is directed towards this application of cut minimization and will be discussed in Section 4. 2 Several real-life applications of the max cut problem are listed in <ref> [PT93] </ref>. <p> We will not attempt to chronicle this work here. A more thorough review is presented in [Ber94]. An excellent survey of results in spectral and polyhedral approaches to the max cut problem is presented in <ref> [PT93] </ref>. Below, we will give a very brief summary of the most familiar approaches to graph partitioning. The de facto benchmark algorithm for more than twenty five years has been the famous local search heuristic due to Kernighan and Lin [KL70] (KL ). <p> Different approaches to the problem include network flow-based method ([SM86], [LR88],[LR93]), spectral and polyhedral approaches ([DH73], [Bop87], [RW90], [PR91], <ref> [PT93] </ref>), and approximation algorithms ([GWed], [GW94], [HP95]). 3 Path Optimization Path Optimization can be viewed as a variation of the hill-climbing local optimization partitioning procedure. Given an initial partitioning = (S; S), PO performs a variation of simple neighborhood search.
Reference: [RW90] <author> F. Rendl and H. Wolkowicz. </author> <title> A projection technique for partitioning the nodes fo a graph. </title> <type> Technical Report 169, </type> <institution> Technische Universitat Graz, Institute fur Mathematik, </institution> <year> 1990. </year>
Reference-contexts: Different approaches to the problem include network flow-based method ([SM86], [LR88],[LR93]), spectral and polyhedral approaches ([DH73], [Bop87], <ref> [RW90] </ref>, [PR91], [PT93]), and approximation algorithms ([GWed], [GW94], [HP95]). 3 Path Optimization Path Optimization can be viewed as a variation of the hill-climbing local optimization partitioning procedure. Given an initial partitioning = (S; S), PO performs a variation of simple neighborhood search.
Reference: [SM86] <author> F. Shahrokhi and D.W. Matula. </author> <title> The maximum concurrent flow problem and sparsest cuts. </title> <type> Technical report, </type> <institution> Southern Methodist University, </institution> <month> March </month> <year> 1986. </year>
Reference: [SM90] <author> F. Shahrokhi and D.W. Matula. </author> <title> The maximum concurrent flow problem. </title> <journal> Journal of the ACM, </journal> <volume> 37 </volume> <pages> 318-334, </pages> <year> 1990. </year>
Reference-contexts: 0.032 m s Runs of 8192 seconds each Fig. 4.11. min quotient cut, 50 Geometric Graphs, n : 10,000, average degree: 10 4.6.3 Comparisons with Multicommodity Flow Heuristics In [LR93], Lang and Rao described a heuristic called FLOW, which is based upon the multicommodity flow approach to partitioning (see [LR88], <ref> [SM90] </ref>). The FLOW heuristic is used as an initial partitioning generator rather than a cleanup heuristic such as KL or PO.
Reference: [Ull84] <author> J. Ullman. </author> <title> Computational Aspects of VLSI. </title> <publisher> Computer Science Press, Inc., </publisher> <address> Rockville, Maryland, </address> <year> 1984. </year>
Reference-contexts: Approximate bisection problems like min quotient cut have many well-documented applications. The most widely cited application in the literature is in logic design ([BHP83], [DH73], [Dun83], [FM82], [GB83], [Lei80], [KL70], <ref> [Ull84] </ref>).
Reference: [WC89] <author> Y. C. Wei and C.K. Cheng. </author> <title> Towards an efficient hierarchical designs by ratio cut partitioning. </title> <booktitle> In Proceedings of the IEEE International Conference on computer-aided design, </booktitle> <pages> pages 298-301, </pages> <year> 1989. </year> <month> 29 </month>
Reference-contexts: Although we have an implementation of PO for hypergraphs, we have not as yet run any algorithm comparisons on those inputs. Lang and Rao experimented with the MCNC benchmark circuits used in <ref> [WC89] </ref> and others, but found the graphs too small to draw any real conclusions when comparing algorithms [LR93]. 4.2 Initial Partitionings The KL, SA, and PO algorithms are all local search methods which accept an initial partitioning of G, then work to improve it.
References-found: 37

