URL: ftp://ftp.cs.dartmouth.edu/TR/TR96-278.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR96-278/
Root-URL: http://www.cs.dartmouth.edu
Email: frgray,rus,dfkg@cs.dartmouth.edu  
Author: Robert Gray Daniela Rus David Kotz 
Date: January 8, 1996  
Address: Hanover, NH 03755  
Affiliation: Department of Computer Science Dartmouth College  
Abstract: Available at URL ftp://ftp.cs.dartmouth.edu/pub/CS-techreports/TR96-278.ps.Z Transportable Information Agents Abstract We have designed and implemented autonomous software agents. Autonomous software agents navigate independently through a heterogeneous network. They are capable of sensing the network configuration, monitoring software conditions, and interacting with other agents. Autonomous agents are implemented as transportable programs, e.g., programs that are capable of suspending execution, moving to a different machine, and starting from where they left off. We illustrate the intelligent behavior of autonomous agents in the context of distributed information-gathering tasks. Areas: software agents, multi-agent systems Abstract ID A703 Word Count: 6,521 Multiple submissions: This paper has not been submitted elsewhere. Acknowledgments: The authors gratefully acknowledge Professor George Cybenko, who is the other third of the Agent Tcl project and has provided constant guidance, feedback and support; Ting Cai, who implemented the mobile computing services; Dawn Lawrie, who implemented the virtual yellow pages; Katya Pelekhov, who implemented the Smart interface for the information retrieval application; Bob Sproull from Sun Microsystems, who has taken part in extensive discussion; and the Air Force and Navy, who have provided generous financial support (AFOSR F49620-93-1-0266 and ONR N00014-95-1-1204). 
Abstract-found: 1
Intro-found: 1
Reference: [All95] <author> J. Allan. </author> <title> Automatic hypertext construction, </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> January </month> <year> 1995. </year> <month> 16 </month>
Reference-contexts: Current information-retrieval systems are primarily word or word-group driven [SM83, Sal89]. The vector-space model used in the Smart system [Sal91] has been used primarily for document retrieval, but is equally effective for document comparison [SA93], and can also be used for the automatic identification and description of hypertext links <ref> [All95] </ref>. It is also possible to use vector-space comparison of document passages to determine topic and subtopic structures of a document, based upon or independent of its layout structure [HP93, SABS94, SS94].
Reference: [BDG92] <author> J. L. Balcazar, J. Daz, and J. Gabarro, </author> <title> Structural Complexity I, </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: By cooperative information gathering we mean that several agents can interact to capture and access distributed information. We draw inspiration from robotics [Bro90, Bro86, DJR93, DJR94] to design our agents. The basic modules for robots are sensors and effectors. The autonomous agents are "sensori-computational" circuits (in the sense of <ref> [BDG92, DJR93] </ref>) comprised of a network of virtual sensors (for detecting changes in files, databases, and network traffic, the presence of other agents, etc.), and virtual effectors (that allow an agent to travel to different physical locations through the agent jump command described in Section 3.1).
Reference: [BN84] <author> Andrew D. Birrell and Bruce Jay Nelson, </author> <title> Implementing remote procedure calls, </title> <journal> in ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: We draw from research results in several distinct areas: operating systems, agents, information retrieval, and mobile robotics. Operating-system support for transportable agents. Although little has been published on transportable agents, much work has been done concerning the general concept of remote computation. Remote Procedure Call (RPC) <ref> [BN84] </ref> was an early form of remote client-server processing. Falcone [Fal87] discusses a heterogeneous distributed-system environment in which a programming language is used to provide the remote service interface as an alternative to RPC calls.
Reference: [Bro90] <author> R. Brooks, </author> <title> Elephants don't play chess, Design of Autonomous Agents, </title> <editor> ed. P. Maes, MIT/Elsevier, </editor> <year> 1990. </year>
Reference-contexts: By cooperative information gathering we mean that several agents can interact to capture and access distributed information. We draw inspiration from robotics <ref> [Bro90, Bro86, DJR93, DJR94] </ref> to design our agents. The basic modules for robots are sensors and effectors. <p> Mobile robotics. The analogy between mobile robots in unstructured physical environments and information agents in rich multi-media environments is not just metaphorical. We have observed that the lessons learned in designing task-directed mobile robots <ref> [Bro90, Bro86] </ref> can be imported to the problem of information capture and access. We also draw from recent results in analyzing the information requirements for robot tasks [DJR93]. 3 Transportable Agents Autonomous agents should move independently. We define an attribute called transportability for implementing this autonomy of movement.
Reference: [Bro86] <author> R. Brooks, </author> <title> A robust layered control system for a mobile robot, </title> <journal> in IEEE Journal of Robotics and Automation, </journal> <year> 1986. </year>
Reference-contexts: By cooperative information gathering we mean that several agents can interact to capture and access distributed information. We draw inspiration from robotics <ref> [Bro90, Bro86, DJR93, DJR94] </ref> to design our agents. The basic modules for robots are sensors and effectors. <p> Mobile robotics. The analogy between mobile robots in unstructured physical environments and information agents in rich multi-media environments is not just metaphorical. We have observed that the lessons learned in designing task-directed mobile robots <ref> [Bro90, Bro86] </ref> can be imported to the problem of information capture and access. We also draw from recent results in analyzing the information requirements for robot tasks [DJR93]. 3 Transportable Agents Autonomous agents should move independently. We define an attribute called transportability for implementing this autonomy of movement.
Reference: [DJR93] <author> B. Donald, J. Jennings, and D. </author> <title> Rus, Information Invariants for Cooperating Autonomous Mobile Robots, </title> <booktitle> in Proceedings of the International Symposium on Robotics Research, </booktitle> <year> 1993. </year>
Reference-contexts: By cooperative information gathering we mean that several agents can interact to capture and access distributed information. We draw inspiration from robotics <ref> [Bro90, Bro86, DJR93, DJR94] </ref> to design our agents. The basic modules for robots are sensors and effectors. <p> By cooperative information gathering we mean that several agents can interact to capture and access distributed information. We draw inspiration from robotics [Bro90, Bro86, DJR93, DJR94] to design our agents. The basic modules for robots are sensors and effectors. The autonomous agents are "sensori-computational" circuits (in the sense of <ref> [BDG92, DJR93] </ref>) comprised of a network of virtual sensors (for detecting changes in files, databases, and network traffic, the presence of other agents, etc.), and virtual effectors (that allow an agent to travel to different physical locations through the agent jump command described in Section 3.1). <p> We have observed that the lessons learned in designing task-directed mobile robots [Bro90, Bro86] can be imported to the problem of information capture and access. We also draw from recent results in analyzing the information requirements for robot tasks <ref> [DJR93] </ref>. 3 Transportable Agents Autonomous agents should move independently. We define an attribute called transportability for implementing this autonomy of movement. A transportable agent is a program that can migrate under its own control from machine to machine in a heterogeneous network.
Reference: [DJR94] <author> B. Donald, J. Jennings, and D. </author> <title> Rus. Analyzing Teams of Cooperating Mobile Robots. </title> <booktitle> In Proceedings of the International Conference on Robotics and Automation, </booktitle> <address> San Diego, </address> <year> 1994. </year>
Reference-contexts: By cooperative information gathering we mean that several agents can interact to capture and access distributed information. We draw inspiration from robotics <ref> [Bro90, Bro86, DJR93, DJR94] </ref> to design our agents. The basic modules for robots are sensors and effectors.
Reference: [EW94] <author> O. Etzioni and D. Weld, </author> <title> A softbot-based interface to the Internet, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 72-76, </pages> <year> 1994. </year>
Reference-contexts: The agents use their internal state (Section 5) and external state (Section 4) to make task-directed decisions. Robotics is not a new metaphor for software agents. Etzioni and Weld <ref> [EW94] </ref> present a system that uses FTP, telnet, mail, etc. as virtual sensors and archie, gopher, netfind, etc. as virtual effectors. Classical AI planning techniques are used to synthesize shell scripts from these virtual sensors and effectors. Our research program is orthogonal to the work of Etzioni and Weld [EW94]. <p> Weld <ref> [EW94] </ref> present a system that uses FTP, telnet, mail, etc. as virtual sensors and archie, gopher, netfind, etc. as virtual effectors. Classical AI planning techniques are used to synthesize shell scripts from these virtual sensors and effectors. Our research program is orthogonal to the work of Etzioni and Weld [EW94]. We ask "how can we build autonomous agents?" and "what are the implications of autonomy in information-gathering tasks?" These questions are timely in a world that is being overwhelmed by the rapid proliferation of electronic information and services. <p> Prototypes of transportable agent systems are described in [KK94, OBR1, JRS95]. Agents. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by <ref> [EW94] </ref>, sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [OBR2]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [OBR2]. We are interested in the same class of tasks as <ref> [EW94, Mae94, MCF94, KSC94] </ref>. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose sta 3 tistical and machine-learning methods for building user models to control the agent actions. <p> Agents are called knowbots by [KC86], softbots by <ref> [EW94] </ref>, sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [OBR2]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose sta 3 tistical and machine-learning methods for building user models to control the agent actions.
Reference: [Fal87] <author> Joseph R. Falcone, </author> <title> A programmable interface language for heterogeneous distributed systems, </title> <journal> in ACM Transactions on Computer Systems, </journal> <volume> 5(4) </volume> <pages> 330-351, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Operating-system support for transportable agents. Although little has been published on transportable agents, much work has been done concerning the general concept of remote computation. Remote Procedure Call (RPC) [BN84] was an early form of remote client-server processing. Falcone <ref> [Fal87] </ref> discusses a heterogeneous distributed-system environment in which a programming language is used to provide the remote service interface as an alternative to RPC calls. Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV) in which servers are viewed as programmable processors.
Reference: [GK94] <author> M. Genesereth and S. Ketchpel, </author> <title> Software agents, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 48-53, </pages> <year> 1994. </year>
Reference-contexts: Prototypes of transportable agent systems are described in [KK94, OBR1, JRS95]. Agents. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by <ref> [GK94] </ref>, personal assistants by [Mae94, MCF94], and information agents by [OBR2]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts.
Reference: [HP93] <author> M. Hearst and C. Plaunt. </author> <title> Subtopic Structuring for Full-Length Document Access. </title> <booktitle> In Proceedings of the Sixteenth Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, </booktitle> <pages> pages 59-68, </pages> <year> 1993. </year>
Reference-contexts: It is also possible to use vector-space comparison of document passages to determine topic and subtopic structures of a document, based upon or independent of its layout structure <ref> [HP93, SABS94, SS94] </ref>. Rus and Allen [RA95] present a system that automatically constructs structural hyperlinks for navigation and retrieval in large corpora. Mobile robotics. The analogy between mobile robots in unstructured physical environments and information agents in rich multi-media environments is not just metaphorical.
Reference: [JRS95] <author> D. Johansen, R. van Renesse, and F. Schneider, </author> <title> Operating system support for mobile agents, </title> <booktitle> in Proceedings of the 5th IEEE Workshop on Hot Topics in Operating Systems, </booktitle> <year> 1995. </year>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV) in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems are described in <ref> [KK94, OBR1, JRS95] </ref>. Agents. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. <p> There are a few existing systems that are beginning to address these issues. The most notable are Tacoma from the University of Cornell <ref> [JRS95] </ref> and Telescript from General Magic [Whi94]. These initial systems suffer 4 from a range of weaknesses. Tacoma, for example, provides no security mechanisms and places the burden of state capture and migration squarely on the programmer.
Reference: [KC86] <author> R. Kahn and V. Cerf, </author> <title> The World of Knowbots, report to the Corporation for National Research Initiative, </title> <address> Arlington, VA, </address> <year> 1988. </year>
Reference-contexts: We then discuss the sensing, navigation and communication capabilities of our agents. Finally, we apply the transportable paradigm and our sensory tools to a distributed information-gathering task, and discuss the insights gained from a set of experiments. 2 Previous Work Kahn's proposal <ref> [KC86] </ref> about architectures for retrieving information from electronic repositories was the first recognition of the utility of software agents for information processing. It provides context for the issues discussed in this paper. We draw from research results in several distinct areas: operating systems, agents, information retrieval, and mobile robotics. <p> Prototypes of transportable agent systems are described in [KK94, OBR1, JRS95]. Agents. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by <ref> [KC86] </ref>, softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [OBR2]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94].
Reference: [KSC94] <author> H. Kautz, B. Selman, and M. Coen, </author> <title> Bottom-up design of software agents, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 143-145, </pages> <year> 1994. </year>
Reference-contexts: Prototypes of transportable agent systems are described in [KK94, OBR1, JRS95]. Agents. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sodabots by <ref> [KSC94] </ref>, software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [OBR2]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [OBR2]. We are interested in the same class of tasks as <ref> [EW94, Mae94, MCF94, KSC94] </ref>. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose sta 3 tistical and machine-learning methods for building user models to control the agent actions.
Reference: [KK94] <author> Keith D. Kotay and David Kotz, </author> <title> Transportable agents, </title> <booktitle> in Workshop on Intelligent Information Agents, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV) in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems are described in <ref> [KK94, OBR1, JRS95] </ref>. Agents. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents.
Reference: [Mae94] <author> P. Maes, </author> <title> Agents that reduce work and information overload, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 31-40, </pages> <year> 1994. </year> <month> 17 </month>
Reference-contexts: Agents. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by <ref> [Mae94, MCF94] </ref>, and information agents by [OBR2]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [OBR2]. We are interested in the same class of tasks as <ref> [EW94, Mae94, MCF94, KSC94] </ref>. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose sta 3 tistical and machine-learning methods for building user models to control the agent actions. <p> We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes <ref> [MCF94, Mae94] </ref> study the interaction between users and agents and propose sta 3 tistical and machine-learning methods for building user models to control the agent actions. Rus and Subramanian [OBR2, OBR3] propose a modular, open, and customizable agent architecture organized around a general notion of structure. Information Retrieval.
Reference: [MCF94] <author> T. Mitchell, R. Caruana, D. Freitag, J. McDermott, and D. Zabowski, </author> <title> Experience with a learning personal assistant, </title> <journal> in Communications of the ACM, </journal> <volume> 37(7) </volume> <pages> 81-91, </pages> <year> 1994. </year>
Reference-contexts: Agents. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by <ref> [Mae94, MCF94] </ref>, and information agents by [OBR2]. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by [OBR2]. We are interested in the same class of tasks as <ref> [EW94, Mae94, MCF94, KSC94] </ref>. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose sta 3 tistical and machine-learning methods for building user models to control the agent actions. <p> We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes <ref> [MCF94, Mae94] </ref> study the interaction between users and agents and propose sta 3 tistical and machine-learning methods for building user models to control the agent actions. Rus and Subramanian [OBR2, OBR3] propose a modular, open, and customizable agent architecture organized around a general notion of structure. Information Retrieval.
Reference: [OBR1] <institution> Omitted for blind review. </institution>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV) in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems are described in <ref> [KK94, OBR1, JRS95] </ref>. Agents. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. <p> Telescript requires either high-end workstations or special-purpose hardware (Unix or PDA version respectively), has proprietary source code, and limits the programmer to a single language. 3.1 Agent Tcl: a system for transportable agents Agent Tcl <ref> [OBR1] </ref> is designed to address these weaknesses. Agent Tcl will reduce migration to a single instruction, provide transparent communication among agents, support multiple languages and transport mechanisms, run on generic platforms, and provide effective security, fault tolerance and performance.
Reference: [OBR2] <institution> Omitted for blind review. </institution>
Reference-contexts: Agents. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. Agents are called knowbots by [KC86], softbots by [EW94], sodabots by [KSC94], software agents by [GK94], personal assistants by [Mae94, MCF94], and information agents by <ref> [OBR2] </ref>. We are interested in the same class of tasks as [EW94, Mae94, MCF94, KSC94]. Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. <p> Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose sta 3 tistical and machine-learning methods for building user models to control the agent actions. Rus and Subramanian <ref> [OBR2, OBR3] </ref> propose a modular, open, and customizable agent architecture organized around a general notion of structure. Information Retrieval. Current information-retrieval systems are primarily word or word-group driven [SM83, Sal89]. <p> The results of the navigational search are added to the internal state of the agent. Since the information landscape changes, the virtual yellow pages are not static entities. We are implementing the adaptive learning methods introduced in <ref> [OBR2, OBR3] </ref> to keep the virtual yellow pages consistent with the data. The idea is that the experts use query history.
Reference: [OBR3] <institution> Omitted for blind review. </institution>
Reference-contexts: Etzioni and Weld [EW94] use classical AI planning techniques to synthesize agents that are Unix shell scripts. Mitchell and Maes [MCF94, Mae94] study the interaction between users and agents and propose sta 3 tistical and machine-learning methods for building user models to control the agent actions. Rus and Subramanian <ref> [OBR2, OBR3] </ref> propose a modular, open, and customizable agent architecture organized around a general notion of structure. Information Retrieval. Current information-retrieval systems are primarily word or word-group driven [SM83, Sal89]. <p> The results of the navigational search are added to the internal state of the agent. Since the information landscape changes, the virtual yellow pages are not static entities. We are implementing the adaptive learning methods introduced in <ref> [OBR2, OBR3] </ref> to keep the virtual yellow pages consistent with the data. The idea is that the experts use query history.
Reference: [Ous94] <author> John K. Ousterhout, </author> <title> Tcl and the Tk Toolkit, </title> <publisher> in Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1994. </year>
Reference-contexts: Agent Tcl is far from complete, but the current implementation is powerful enough for a range of information-management applications. In the current implementation, agents are written in a modified version of the Tool Command Language (Tcl) <ref> [Ous94] </ref>. Tcl is a high-level scripting language and is an attractive agent language since it is highly portable, easy to use, and easy to make secure (due to the large amount of existing work that addresses the problem of executing a Tcl program from an untrusted source).
Reference: [RA95] <author> D. Rus and J. Allan, </author> <title> Structural queries in electronic corpora, </title> <booktitle> in Proceedings of DAGS95: Electronic Publishing and the Information Superhighway, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: It is also possible to use vector-space comparison of document passages to determine topic and subtopic structures of a document, based upon or independent of its layout structure [HP93, SABS94, SS94]. Rus and Allen <ref> [RA95] </ref> present a system that automatically constructs structural hyperlinks for navigation and retrieval in large corpora. Mobile robotics. The analogy between mobile robots in unstructured physical environments and information agents in rich multi-media environments is not just metaphorical. <p> In this experiment, we illustrate mobility, no sensing, and no cooperation. The data is a distributed collection of text repositories running Smart servers. The Smart system is a successful statistical information-retrieval system <ref> [SM83, RA95] </ref> that uses the vector-space model to measure the textual similarity between documents. The idea of the vector-space model is that each word that occurs in a collection defines an axis in the space of all words in the collection.
Reference: [Sal89] <author> G. Salton. </author> <title> Automatic Text Processing: the transformation, analysis, and retrieval of information by computer, </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Rus and Subramanian [OBR2, OBR3] propose a modular, open, and customizable agent architecture organized around a general notion of structure. Information Retrieval. Current information-retrieval systems are primarily word or word-group driven <ref> [SM83, Sal89] </ref>. The vector-space model used in the Smart system [Sal91] has been used primarily for document retrieval, but is equally effective for document comparison [SA93], and can also be used for the automatic identification and description of hypertext links [All95].
Reference: [Sal91] <author> G. Salton. </author> <title> The Smart document retrieval project. </title> <booktitle> In Proceedings of the Fourteenth Annual International ACM/SIGIR Conference on Research and Development in Information Retrieval, </booktitle> <pages> pages 356-358. </pages>
Reference-contexts: Rus and Subramanian [OBR2, OBR3] propose a modular, open, and customizable agent architecture organized around a general notion of structure. Information Retrieval. Current information-retrieval systems are primarily word or word-group driven [SM83, Sal89]. The vector-space model used in the Smart system <ref> [Sal91] </ref> has been used primarily for document retrieval, but is equally effective for document comparison [SA93], and can also be used for the automatic identification and description of hypertext links [All95].
Reference: [SM83] <author> G. Salton and M. McGill. </author> <title> Introduction to Modern Information Retrieval. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1983. </year>
Reference-contexts: Rus and Subramanian [OBR2, OBR3] propose a modular, open, and customizable agent architecture organized around a general notion of structure. Information Retrieval. Current information-retrieval systems are primarily word or word-group driven <ref> [SM83, Sal89] </ref>. The vector-space model used in the Smart system [Sal91] has been used primarily for document retrieval, but is equally effective for document comparison [SA93], and can also be used for the automatic identification and description of hypertext links [All95]. <p> In this experiment, we illustrate mobility, no sensing, and no cooperation. The data is a distributed collection of text repositories running Smart servers. The Smart system is a successful statistical information-retrieval system <ref> [SM83, RA95] </ref> that uses the vector-space model to measure the textual similarity between documents. The idea of the vector-space model is that each word that occurs in a collection defines an axis in the space of all words in the collection.
Reference: [SA93] <author> G. Salton and J. Allan. </author> <title> Selective text utilization and text traversal. </title> <booktitle> In Hypertext '93 Proceedings, </booktitle> <pages> pages 131-144, </pages> <address> Seattle, Washington, </address> <year> 1993. </year>
Reference-contexts: Information Retrieval. Current information-retrieval systems are primarily word or word-group driven [SM83, Sal89]. The vector-space model used in the Smart system [Sal91] has been used primarily for document retrieval, but is equally effective for document comparison <ref> [SA93] </ref>, and can also be used for the automatic identification and description of hypertext links [All95]. It is also possible to use vector-space comparison of document passages to determine topic and subtopic structures of a document, based upon or independent of its layout structure [HP93, SABS94, SS94].
Reference: [SABS94] <author> G. Salton, J. Allan, C. Buckley, and A. Singhal. </author> <title> Automatic analysis, theme generation, and summarization of machine-readable texts. </title> <journal> Science, </journal> <volume> 264 </volume> <pages> 1421-1426, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: It is also possible to use vector-space comparison of document passages to determine topic and subtopic structures of a document, based upon or independent of its layout structure <ref> [HP93, SABS94, SS94] </ref>. Rus and Allen [RA95] present a system that automatically constructs structural hyperlinks for navigation and retrieval in large corpora. Mobile robotics. The analogy between mobile robots in unstructured physical environments and information agents in rich multi-media environments is not just metaphorical.
Reference: [SS94] <author> G. Salton and A. Singhal. </author> <title> Automatic text theme generation and the analysis of text structure. </title> <type> Technical Report TR94-1438, </type> <institution> Cornell University, Department of Computer Science, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: It is also possible to use vector-space comparison of document passages to determine topic and subtopic structures of a document, based upon or independent of its layout structure <ref> [HP93, SABS94, SS94] </ref>. Rus and Allen [RA95] present a system that automatically constructs structural hyperlinks for navigation and retrieval in large corpora. Mobile robotics. The analogy between mobile robots in unstructured physical environments and information agents in rich multi-media environments is not just metaphorical.
Reference: [SG90] <author> James W. Stamos and David K. Gifford, </author> <title> Remote execution, </title> <journal> in ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Remote Procedure Call (RPC) [BN84] was an early form of remote client-server processing. Falcone [Fal87] discusses a heterogeneous distributed-system environment in which a programming language is used to provide the remote service interface as an alternative to RPC calls. Stamos and Gifford <ref> [SG90] </ref> introduce the concept of Remote Evaluation (REV) in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents [Whi94]. Prototypes of transportable agent systems are described in [KK94, OBR1, JRS95]. Agents.
Reference: [Whi94] <author> J. E. White, </author> <title> Telescript technology: The foundation for the electronic marketplace, General Magic White Paper, General Magic, </title> <publisher> Inc., </publisher> <year> 1994. </year> <month> 18 </month>
Reference-contexts: Stamos and Gifford [SG90] introduce the concept of Remote Evaluation (REV) in which servers are viewed as programmable processors. The Telescript technology introduced by General Magic, Inc. in 1994 was the first commercial description of transportable agents <ref> [Whi94] </ref>. Prototypes of transportable agent systems are described in [KK94, OBR1, JRS95]. Agents. In the software-agents literature, much time and effort has been devoted to designing task-directed agents and to the cognitive aspects of agents. <p> There are a few existing systems that are beginning to address these issues. The most notable are Tacoma from the University of Cornell [JRS95] and Telescript from General Magic <ref> [Whi94] </ref>. These initial systems suffer 4 from a range of weaknesses. Tacoma, for example, provides no security mechanisms and places the burden of state capture and migration squarely on the programmer.
References-found: 30

