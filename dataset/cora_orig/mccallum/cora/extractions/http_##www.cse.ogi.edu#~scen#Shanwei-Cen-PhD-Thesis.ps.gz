URL: http://www.cse.ogi.edu/~scen/Shanwei-Cen-PhD-Thesis.ps.gz
Refering-URL: http://www.cse.ogi.edu/~scen/scen.html
Root-URL: http://www.cse.ogi.edu
Title: A Software Feedback Toolkit and its Application in Adaptive Multimedia Systems  
Author: Shanwei Cen 
Degree: M.S. in  A dissertation submitted to the faculty of the Oregon Graduate Institute of Science and Technology in partial fulfillment of the requirements for the degree Doctor of Philosophy in Computer Science and Engineering  
Date: 1987  1989  October 1997  
Address: China,  China,  
Affiliation: B.S. in Computer Science, Tsinghua University, Beijing,  Computer Science, Tsinghua University, Beijing,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Berners-Lee, T., Fielding, R., and Nielsen, H. </author> <title> Hypertext transfer protocol - HTTP/1.0. Internet RFC 1945, </title> <address> http://ds.internic.net/ds/rfc-index.html, May 1996, </address> <month> [September 11, </month> <year> 1997]. </year>
Reference-contexts: = (Feedback *) new FOLowPassFilter; lpfilter2 = (Feedback *) new FOLowPassFilter; merger = (Feedback *) new Merger (2, "+-"); abs = (Feedback *) new Abs; // Connect subcomponents to each other and to port blocks inputPortBlock [0]-&gt;ConnectOutputPortId (0, lpfilter1, InputPort, 0); inputPortBlock [0]-&gt;ConnectOutputPortId (0, merger, InputPort, 0); lpfilter1-&gt;ConnectOutputPortId (0, outputPortBlock <ref> [1] </ref>, InputPort, 0); lpfilter1-&gt;ConnectOutputPortId (0, merger, InputPort, 0); merger-&gt;ConnectOutputPortId (0, abs, InputPort, 0); abs-&gt;ConnectOutputPortId (0, lpfilter2, InputPort, 0); lpfilter2-&gt;ConnectOutputPortId (0, outputPortBlock [0], InputPort, 0); parameterPortBlock [0]-&gt;ConnectOutputPortId (0, lpfilter1, ParameterPort, 0); parameterPortBlock [1]-&gt;ConnectOutputPortId (0, lpfilter2, ParameterPort, 0); resetPortBlock-&gt;ConnectOutputPortId (0, lpfilter1, ResetPort, 0); resetPortBlock-&gt;ConnectOutputPortId (0, lpfilter2, ResetPort, 0); - MeanDeviationFilter::MeanDeviationFilter () - delete <p> Without this behavior, their potential to generate very high data rates could cause serious congestion in the Internet, and perhaps another Internet congestion collapse [18, 23]. Consequently, such mechanisms must operate in harmony with TCP [23], which is the base for the currently dominant FTP [41] and Web/HTTP <ref> [1] </ref> traffic. They should ensure that multiple streaming sessions share the network among themselves and with other non-streaming traffic in a fair manner. Finally, they should attempt to minimize latency and maximize the smoothness of the streaming data.
Reference: [2] <author> Brakmo, L. S., et al. </author> <title> TCP Vegas: New techniques for congestion detection and avoidance. </title> <booktitle> In SIGCOMM'94 (August 1994), </booktitle> <pages> pp. 24-35. </pages>
Reference-contexts: The software feedback systems are implemented directly as C++ classes, and can be easily incorporated into software systems. 7.4 Existing Software Feedback In Adaptive Systems Software feedback already exists in many forms in adaptive software systems. It is used for flow and congestion control <ref> [2, 4, 17, 23, 26, 30, 47, 55, 66] </ref>, synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. <p> Software feedback has been used extensively in network flow and congestion control. TCP <ref> [2, 23] </ref> adjusts its congestion window size based on acknowledgements from the receiver to control data flow and avoid network congestion. It also continuously estimates the mean and variance of the round trip time (RTT) in order to adapt its retransmission timer to changing network conditions.
Reference: [3] <author> Brogan, W. L. </author> <title> Modern Control Theory. </title> <publisher> Quantum Publishers, Inc., </publisher> <year> 1974. </year>
Reference-contexts: Furthermore, such mechanisms should adapt quickly to changes in the environment. Software feedback is a software technique that uses feedback mechanisms similar to those in hardware feedback systems, such as phase-lock loops <ref> [3, 5] </ref>. A feedback mechanism continuously monitors the output of the system under control (the target system), compares the result against preset values (goals of the feedback control), and feeds the difference back to adjust the behavior of the target system. <p> They also lack the flexibility of easy extension for adaptation to new environments. On the other hand, various control theories and toolkits already exist, and have been successfully used in the development of traditional hardware and embedded control systems, including feedback systems. In classical control theories, linear systems theory <ref> [3, 5] </ref> provides formal specification and analysis of linear systems, and nonlinear systems theory [14] helps design nonlinear systems based on various forms of linearization. <p> Among the above types of components, filters, regulators and connectors have a common interface, while signal sensors and action generators may be application specific, and may have ad-hoc interfaces to the target system. Similarly, depending on whether a feedback component or system conforms to linear systems theory <ref> [3, 5] </ref> or not, it can be classified as either linear or nonlinear. A linear component conforms to linear systems theory and is amenable to specification and analysis based on that theory. <p> The components are implemented and composed. In many cases, the feedback components would be amenable to specification and analysis by control theories, especially linear systems theories <ref> [3, 5, 6, 14, 67] </ref>. Control theories can be applied to analyze or predict theoretical properties, to specify feedback systems at an abstract level or synthesize components from their formal specifications, or to identify guards. Control theories also provides a rich set of building blocks. <p> Control theories also provides a rich set of building blocks. In this section, we briefly describe the various control system theories and discuss about how they can be applied in the software feedback toolkit. 2.5.1 Theoretical Properties of Feedback Systems The theoretical properties addressed by control theories <ref> [3, 5, 6, 14, 67] </ref> include formal specification, stability, time and frequency response, system composition, etc. Some control systems may be specified in mathematical formulas, so that their theoretical properties can be clearly seen. <p> In this section, we highlight aspects of various control theories, especially those closely related to the software feedback toolkit proposed. Those who are interested in understanding more details of control theories should refer to relevant texts <ref> [3, 5, 6, 14, 19, 39, 67] </ref>. Linear Systems Linear systems theories [3, 5, 6] deal with linear control systems. There are two types of linear systems: continuous-time and discrete-time. Linear systems can be specified 29 formally in various forms. <p> In this section, we highlight aspects of various control theories, especially those closely related to the software feedback toolkit proposed. Those who are interested in understanding more details of control theories should refer to relevant texts [3, 5, 6, 14, 19, 39, 67]. Linear Systems Linear systems theories <ref> [3, 5, 6] </ref> deal with linear control systems. There are two types of linear systems: continuous-time and discrete-time. Linear systems can be specified 29 formally in various forms. <p> Linear Systems Linear systems theories [3, 5, 6] deal with linear control systems. There are two types of linear systems: continuous-time and discrete-time. Linear systems can be specified 29 formally in various forms. There are differential functions, s-transforms and state space equations for continuous-time systems <ref> [3] </ref>, and difference functions, z-transforms and state space equations for discrete-time systems [5]. The formal methods make it possible to infer the theoretical properties, such as stability, time and frequency responses, right from their specifications. <p> is likely that specializing the file access code for the case of sequential access would increase execution speed. 191 7.3 Toolkits Based On Control Theories Several commercially available toolkits, such as Matlab [59] and MATRIX x [21], support building control systems based on control theories such as linear systems theory <ref> [3, 5] </ref>, nonlinear systems theory [14], fuzzy [34, 67] and neural [16, 67] control. They provide various pre-defined building blocks from control theories, GUI-based tools for control system composition, simulation and analysis, and generation of the code of the constructed control systems.
Reference: [4] <author> Busse, I., Deffner, B., and Schulzrinne, H. </author> <title> Dynamic QoS control of multimedia applications based on RTP. </title> <journal> Computer Communications, </journal> <month> 19 (January </month> <year> 1996), </year> <pages> 49-58. </pages>
Reference-contexts: Finally, they should attempt to minimize latency and maximize the smoothness of the streaming data. There have been several approaches proposed in the literature, such as receiver-initiated rate-based feedback [12, 52], RTP [54] with rate-based feedback <ref> [4] </ref>, sender-initiated rate-based congestion control [30], TCP [23], TCP minus retransmission [22], etc. Unfortunately, they fail to have one or more of the properties described above. <p> There have been several approaches proposed in the literature, such as receiver-initiated rate-based feedback [12, 52], RTP [54] with rate-based feedback [4], sender-initiated rate-based congestion control [30], TCP [23], TCP minus retransmission [22], etc. Unfortunately, they fail to have one or more of the properties described above. Rate-based feedback <ref> [4, 12, 52] </ref> is inherently sluggish in reacting to network congestion (due to its time- or state-based rate estimation), and has the danger of failure in the presence of severe congestion (due to its negative acknowledgement, where the sender reduces the packet 105 rate only when told by the receiver). <p> The software feedback systems are implemented directly as C++ classes, and can be easily incorporated into software systems. 7.4 Existing Software Feedback In Adaptive Systems Software feedback already exists in many forms in adaptive software systems. It is used for flow and congestion control <ref> [2, 4, 17, 23, 26, 30, 47, 55, 66] </ref>, synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. <p> It also continuously estimates the mean and variance of the round trip time (RTT) in order to adapt its retransmission timer to changing network conditions. Several other rate-based feedback flow and congestion control schemes have been proposed <ref> [4, 17, 26, 30, 55] </ref>. Some other schemes simply turn the source data flow on/off based on feedback from the routers, switches or receivers indicating network congestion [47, 66]. Several of the schemes have also been analyzed theoretically with control and queuing theories [17, 26, 47, 55, 66].
Reference: [5] <author> Cadzow, J. A. </author> <title> Discrete-Time Systems: An Introduction with Interdisciplinary Applications. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1973. </year>
Reference-contexts: Furthermore, such mechanisms should adapt quickly to changes in the environment. Software feedback is a software technique that uses feedback mechanisms similar to those in hardware feedback systems, such as phase-lock loops <ref> [3, 5] </ref>. A feedback mechanism continuously monitors the output of the system under control (the target system), compares the result against preset values (goals of the feedback control), and feeds the difference back to adjust the behavior of the target system. <p> They also lack the flexibility of easy extension for adaptation to new environments. On the other hand, various control theories and toolkits already exist, and have been successfully used in the development of traditional hardware and embedded control systems, including feedback systems. In classical control theories, linear systems theory <ref> [3, 5] </ref> provides formal specification and analysis of linear systems, and nonlinear systems theory [14] helps design nonlinear systems based on various forms of linearization. <p> Among the above types of components, filters, regulators and connectors have a common interface, while signal sensors and action generators may be application specific, and may have ad-hoc interfaces to the target system. Similarly, depending on whether a feedback component or system conforms to linear systems theory <ref> [3, 5] </ref> or not, it can be classified as either linear or nonlinear. A linear component conforms to linear systems theory and is amenable to specification and analysis based on that theory. <p> On the other hand, a nonlinear component has nonlinear behavior and cannot be characterized using linear theory for specification or analysis. One example feedback building block is a simple first-order lowpass filter <ref> [5] </ref> shown in Fig. 2.3 (a). This filter is a linear component with one input port, one output port, and a parameter port. <p> The components are implemented and composed. In many cases, the feedback components would be amenable to specification and analysis by control theories, especially linear systems theories <ref> [3, 5, 6, 14, 67] </ref>. Control theories can be applied to analyze or predict theoretical properties, to specify feedback systems at an abstract level or synthesize components from their formal specifications, or to identify guards. Control theories also provides a rich set of building blocks. <p> Control theories also provides a rich set of building blocks. In this section, we briefly describe the various control system theories and discuss about how they can be applied in the software feedback toolkit. 2.5.1 Theoretical Properties of Feedback Systems The theoretical properties addressed by control theories <ref> [3, 5, 6, 14, 67] </ref> include formal specification, stability, time and frequency response, system composition, etc. Some control systems may be specified in mathematical formulas, so that their theoretical properties can be clearly seen. <p> In this section, we highlight aspects of various control theories, especially those closely related to the software feedback toolkit proposed. Those who are interested in understanding more details of control theories should refer to relevant texts <ref> [3, 5, 6, 14, 19, 39, 67] </ref>. Linear Systems Linear systems theories [3, 5, 6] deal with linear control systems. There are two types of linear systems: continuous-time and discrete-time. Linear systems can be specified 29 formally in various forms. <p> In this section, we highlight aspects of various control theories, especially those closely related to the software feedback toolkit proposed. Those who are interested in understanding more details of control theories should refer to relevant texts [3, 5, 6, 14, 19, 39, 67]. Linear Systems Linear systems theories <ref> [3, 5, 6] </ref> deal with linear control systems. There are two types of linear systems: continuous-time and discrete-time. Linear systems can be specified 29 formally in various forms. <p> There are two types of linear systems: continuous-time and discrete-time. Linear systems can be specified 29 formally in various forms. There are differential functions, s-transforms and state space equations for continuous-time systems [3], and difference functions, z-transforms and state space equations for discrete-time systems <ref> [5] </ref>. The formal methods make it possible to infer the theoretical properties, such as stability, time and frequency responses, right from their specifications. Linear systems have the global stability property [5, 6], i.e., a stable linear system converges in all of its input space. <p> The formal methods make it possible to infer the theoretical properties, such as stability, time and frequency responses, right from their specifications. Linear systems have the global stability property <ref> [5, 6] </ref>, i.e., a stable linear system converges in all of its input space. Linear systems also have properties such as composibility of components at the the abstract level, the principle of superposition on input signals [5], etc. These properties make linear feedback systems predictable. <p> Linear systems have the global stability property [5, 6], i.e., a stable linear system converges in all of its input space. Linear systems also have properties such as composibility of components at the the abstract level, the principle of superposition on input signals <ref> [5] </ref>, etc. These properties make linear feedback systems predictable. On the other hand, the property of linearity restricts the application of the results of linear systems theories in real-life situations, where many problems are inherently nonlinear. Discrete-time linear systems theory will be discussed in more detail in the next subsection. <p> Then in the next two Sections 2.5.3 and 2.5.4, we will discuss how this linear systems theory can be used in building feedback systems with predictable properties, and present the phase-lock loop, an example linear system, respectively 31 A discrete-time linear system <ref> [5, 6] </ref> can be represented in various forms: difference function, summation-convolution, z-transfer function, or state-space equations. Suppose the input and output sequences of a discrete-time system are fu (k)g and fy (k)g respectively, where 1 &lt; k &lt; 1. <p> The current output is a linear combination of the recent history of its input and output sequences. y (k) = i=0 n X a j y (k i) A discrete-time linear system can also be specified by a state-space equation <ref> [5] </ref>, where states are introduced, and the output and next step states are linear combinations of current input and state. The coefficients a i and b j determine all the properties of a linear feedback system: its stability, time and frequency response, etc. Yet another form is a convolution-summation equation [5]. <p> <ref> [5] </ref>, where states are introduced, and the output and next step states are linear combinations of current input and state. The coefficients a i and b j determine all the properties of a linear feedback system: its stability, time and frequency response, etc. Yet another form is a convolution-summation equation [5]. The current output of a linear system, y (k) at step k is a polynomial of all its input history with a sequence of weighting coefficients fh (i)g (0 i &lt; 1): y (k) = i=0 A fourth form is called a z-transfer function [5] (or simply called transfer function <p> form is a convolution-summation equation <ref> [5] </ref>. The current output of a linear system, y (k) at step k is a polynomial of all its input history with a sequence of weighting coefficients fh (i)g (0 i &lt; 1): y (k) = i=0 A fourth form is called a z-transfer function [5] (or simply called transfer function hereafter when there is no confusion). Given a sequence ff (k)g, where f (k) = 0 for all k &lt; 0, its z-transform is defined as below, where z is a complex variable. <p> As a matter of fact, virtually all sequences of any interest have z-transforms expressible as a ratio of polynomials in the variable z <ref> [5] </ref>. <p> polynomial) and poles (the roots of its denominator polynomial), and one of the poles will pass through 2 In this section, we only focus on constant coefficient discrete-time linear systems. 32 the boundary separating the regions of convergence and divergence. z-transforms have properties including linearity, left- and right-shifting, convolution-summation, etc. <ref> [5] </ref>. <p> Because of the important role the poles play in determining the time and frequency response of linear systems, their placement in transfer functions is a very important part in design and analysis of linear systems, especially linear filters <ref> [5] </ref>. 2.5.3 Building Feedback Systems With Predictable Properties in the Toolkit The results from control theories can be applied in the software feedback toolkit to build feedback systems with predictable theoretical properties. <p> Linear theories <ref> [5, 6] </ref> can be applied for formal specification of linear feedback components and systems, and automatic generation of linear components. They can also be applied for analysis and prediction of theoretical properties. <p> Linear systems theories also provide a set of well-understood and well-behaved building blocks, and formal methods of component composition. Example building blocks are digital filters such as the first-order lowpass filter as shown in Fig. 2.3 (a), high-pass and band-pass filters, Notch filters <ref> [5] </ref>, Butterworth filters [5] with sharp frequency attenuation, adaptive Kalman filters [19, 39], integrators, differentiators [5], etc. The composition rules shown in Fig. 2.9 help in composing building blocks into more complex components and systems at an abstract transfer-function level. <p> Linear systems theories also provide a set of well-understood and well-behaved building blocks, and formal methods of component composition. Example building blocks are digital filters such as the first-order lowpass filter as shown in Fig. 2.3 (a), high-pass and band-pass filters, Notch filters <ref> [5] </ref>, Butterworth filters [5] with sharp frequency attenuation, adaptive Kalman filters [19, 39], integrators, differentiators [5], etc. The composition rules shown in Fig. 2.9 help in composing building blocks into more complex components and systems at an abstract transfer-function level. <p> Example building blocks are digital filters such as the first-order lowpass filter as shown in Fig. 2.3 (a), high-pass and band-pass filters, Notch filters <ref> [5] </ref>, Butterworth filters [5] with sharp frequency attenuation, adaptive Kalman filters [19, 39], integrators, differentiators [5], etc. The composition rules shown in Fig. 2.9 help in composing building blocks into more complex components and systems at an abstract transfer-function level. <p> This PLL is stable when j 1 g j&lt; 1, i.e., 0 &lt; g &lt; 2. It is also over-damped <ref> [5] </ref>, with the output phase difference approaching its steady-state value monotonically. The closer g is to 0, to more sluggish the PLL is, meaning the that PLL will react to speed changes in the reference clock more slowly, while the speed changes in the local clock will be smoother. <p> is likely that specializing the file access code for the case of sequential access would increase execution speed. 191 7.3 Toolkits Based On Control Theories Several commercially available toolkits, such as Matlab [59] and MATRIX x [21], support building control systems based on control theories such as linear systems theory <ref> [3, 5] </ref>, nonlinear systems theory [14], fuzzy [34, 67] and neural [16, 67] control. They provide various pre-defined building blocks from control theories, GUI-based tools for control system composition, simulation and analysis, and generation of the code of the constructed control systems.
Reference: [6] <author> Cadzow, J. A., and Martens. </author> <title> Discrete-Time and Computer Control Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1974. </year>
Reference-contexts: The components are implemented and composed. In many cases, the feedback components would be amenable to specification and analysis by control theories, especially linear systems theories <ref> [3, 5, 6, 14, 67] </ref>. Control theories can be applied to analyze or predict theoretical properties, to specify feedback systems at an abstract level or synthesize components from their formal specifications, or to identify guards. Control theories also provides a rich set of building blocks. <p> Control theories also provides a rich set of building blocks. In this section, we briefly describe the various control system theories and discuss about how they can be applied in the software feedback toolkit. 2.5.1 Theoretical Properties of Feedback Systems The theoretical properties addressed by control theories <ref> [3, 5, 6, 14, 67] </ref> include formal specification, stability, time and frequency response, system composition, etc. Some control systems may be specified in mathematical formulas, so that their theoretical properties can be clearly seen. <p> In this section, we highlight aspects of various control theories, especially those closely related to the software feedback toolkit proposed. Those who are interested in understanding more details of control theories should refer to relevant texts <ref> [3, 5, 6, 14, 19, 39, 67] </ref>. Linear Systems Linear systems theories [3, 5, 6] deal with linear control systems. There are two types of linear systems: continuous-time and discrete-time. Linear systems can be specified 29 formally in various forms. <p> In this section, we highlight aspects of various control theories, especially those closely related to the software feedback toolkit proposed. Those who are interested in understanding more details of control theories should refer to relevant texts [3, 5, 6, 14, 19, 39, 67]. Linear Systems Linear systems theories <ref> [3, 5, 6] </ref> deal with linear control systems. There are two types of linear systems: continuous-time and discrete-time. Linear systems can be specified 29 formally in various forms. <p> The formal methods make it possible to infer the theoretical properties, such as stability, time and frequency responses, right from their specifications. Linear systems have the global stability property <ref> [5, 6] </ref>, i.e., a stable linear system converges in all of its input space. Linear systems also have properties such as composibility of components at the the abstract level, the principle of superposition on input signals [5], etc. These properties make linear feedback systems predictable. <p> Then in the next two Sections 2.5.3 and 2.5.4, we will discuss how this linear systems theory can be used in building feedback systems with predictable properties, and present the phase-lock loop, an example linear system, respectively 31 A discrete-time linear system <ref> [5, 6] </ref> can be represented in various forms: difference function, summation-convolution, z-transfer function, or state-space equations. Suppose the input and output sequences of a discrete-time system are fu (k)g and fy (k)g respectively, where 1 &lt; k &lt; 1. <p> Linear theories <ref> [5, 6] </ref> can be applied for formal specification of linear feedback components and systems, and automatic generation of linear components. They can also be applied for analysis and prediction of theoretical properties.
Reference: [7] <author> Cen, S. </author> <title> Software feedback toolkit prototype user's manual. </title> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute of Science and Technology. </institution> <note> http://cse.ogi.edu/DISC/projects/synthetix/FBT-manual.ps, August 1997, [September 11, </note> <year> 1997]. </year>
Reference-contexts: The application can either take 1 A median filter outputs the median of the recent set of input samples, instead of the average of them. See the toolkit user's manual <ref> [7] </ref> for more information. 24 measures outside of the feedback system, or even download a new feedback policy into the existing feedback system on demand. <p> A list of feedback building blocks, especially those used in the applications in the thesis, can be found in Appendix B. A complete list of components, including GUI-based components for simulation and instrumentation, are discussed in the toolkit user's manual <ref> [7] </ref>. Fig. 3.1, of the first-order lowpass filter FOLowPassFilter. The first-order lowpass filter has a control function shown in Fig. 2.3 (a). The constructor, FOLowPassFilter (double para), defines that the lowpass filter has one input port, one output port, one parameter port, and one state port. <p> In this case, feedback component invocation loops can be prevented by introducing a decoupling component, or decoupler, in the feedback loop. A simple decoupler is the trigger described in Appendix B and in the toolkit users manual <ref> [7] </ref>. It has two input ports, one for data input and the other for a triggering signal input, and one output port. The most recent input message is latched in trigger. Whenever a signal is received from its signal input, trigger passes the latched input message to its output port. <p> Whenever an event happens, all callback functions registered for the event are invoked. Thus the applications are notified, and any necessary reactions can be performed. The feedback toolkit prototype implements a simple exception component for exception signalling through callback functions. As described in the toolkit user's manual <ref> [7] </ref>, an exception component takes the address of a callback function during initialization. It has a single input port, and no output or parameter ports. Whenever a message is received by the exception object, the callback function is invoked with the value of the input message as its argument. <p> These components can be readily linked to the feedback systems to be simulated or instrumented directly. This section briefly describes some of the components. A more detailed description can be found in the toolkit user's manual <ref> [7] </ref>. 3.4.1 GUI Components The parameter setting panel sets parameters of other feedback components and controls the display of other GUI panels.
Reference: [8] <author> Cen, S. </author> <title> Software of a distributed real-time MPEG video player. </title> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute of Science and Technology. </institution> <note> http://cse.ogi.edu/DISC/projects/synthetix/Player/, August 1997, [Septem-ber 11, </note> <year> 1997]. </year>
Reference-contexts: is closed for a certain amount of time as specified through its parameter until the effect of the feedback action reaches the server and propagates back to the client. 6.5 Experimental Results 6.5.1 Player Configuration for the Experiments A prototype of the adaptive distributed MPEG video player has been implemented <ref> [8] </ref>, and experiments have been conducted to evaluate the QoS and synchronization feedback mechanisms.
Reference: [9] <author> Cen, S., Pu, C., Staehli, R., Cowan, C., and Walpole, J. </author> <title> Demonstrating the effect of software feedback on a distributed real-time MPEG video audio player. </title> <booktitle> In Proceedings of the Third ACM International Multimedia Conference and Exhibition (San Francisco, </booktitle> <address> CA, </address> <month> November </month> <year> 1995), </year> <pages> pp. 239-240. 201 202 </pages>
Reference: [10] <author> Cen, S., Pu, C., Staehli, R., Cowan, C., and Walpole, J. </author> <title> A distributed real-time MPEG video audio player. </title> <booktitle> NOSSDAV'95, Lecture Notes in Computer Science 1018 (1995), </booktitle> <pages> 151-162. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Many research prototype media players have been produced, including the Berkeley MPEG player [52], the OGI (Oregon Graduate Institute) distributed video player <ref> [10] </ref>, the Vosaic player [12], and the Mbone tools [33]. Over the past year, many industrial streaming media players have also been released, such as the Netscape streaming video plug-ins [37], RealAudio [42] and Vxtreme [63]. <p> Thus minimizing the base RTT estimation error is an important part of future work. Chapter 6 An Adaptive Real-Time Distributed Video Player 6.1 Introduction This chapter presents an adaptive MPEG video player <ref> [10] </ref> for streaming compressed digital video and audio in real-time across the Internet. The Internet is characterized by great diversity in host processing speed and network bandwidth, the lack of a common clock, and wide-spread resource sharing. <p> This chapter focuses on the design, implementation and experimental evaluation of 136 137 the QoS and synchronization feedback mechanisms used in the player. A more detailed description of the player can be found in <ref> [10] </ref>. In the rest of this chapter, first the architecture of the player is briefly described. Then the design and implementation of the QoS control feedback is presented. Next, a section is devoted to the client-server synchronization feedback. <p> In the case of insufficient resources, such as network congestion or client CPU overload, many users will prefer to reduce the video quality first. In the prototype player, synchronization between the video and audio streams is realized by a sequence-number-based mechanism implemented in the client <ref> [10] </ref>. A video stream consists of a sequence of video frames, each of which is tagged with a sequence number. An audio stream consists of a sequence of audio samples. We assume that, in a video-and-audio clip, the video and audio streams are recorded strictly synchronously. <p> One smoothness measurement is based on presentation jitter as proposed by Staehli [58]. In our player, we assume that the mapping from the logical time of a video stream to the 167 system time of the client is precise <ref> [10] </ref>. All the frames that are displayed are displayed on time, and all late frames are dropped. Based on this assumption, we define the presentation jitter in terms of logical display time (video-frame sequence number).
Reference: [11] <author> Cen, S., Pu, C., and Walpole, J. </author> <title> Flow and congestion control for internet multimedia streaming applications. </title> <type> Tech. Rep. </type> <institution> CSE-97-003, Department of Computer Science and Engineering, Oregon Graduate Institute of Science and Technology, </institution> <month> June </month> <year> 1997. </year>
Reference-contexts: While removing the retransmission from TCP [22] eliminates the associated bandwidth waste and latency unpredictability problems, the burstiness in data throughput still remains. We have proposed SCP (Streaming Control Protocol) <ref> [11] </ref>, a unicast 1 streaming flow and congestion control scheme that has the properties described above. Similar to the congestion control in TCP, SCP employs sender-initiated congestion detection through positive acknowledgement, and uses a congestion-window-based policy to back-off exponentially.
Reference: [12] <author> Chen, Z., Tan, S.-M., Campbell, R. H., and Li, Y. </author> <title> Real time video and audio in the World Wide Web. </title> <booktitle> In Fourth International World Wide Web Conference (Boston, </booktitle> <address> Massachusetts, </address> <month> December </month> <year> 1995), </year> <pages> pp. 15-27. </pages>
Reference-contexts: Many research prototype media players have been produced, including the Berkeley MPEG player [52], the OGI (Oregon Graduate Institute) distributed video player [10], the Vosaic player <ref> [12] </ref>, and the Mbone tools [33]. Over the past year, many industrial streaming media players have also been released, such as the Netscape streaming video plug-ins [37], RealAudio [42] and Vxtreme [63]. <p> Finally, they should attempt to minimize latency and maximize the smoothness of the streaming data. There have been several approaches proposed in the literature, such as receiver-initiated rate-based feedback <ref> [12, 52] </ref>, RTP [54] with rate-based feedback [4], sender-initiated rate-based congestion control [30], TCP [23], TCP minus retransmission [22], etc. Unfortunately, they fail to have one or more of the properties described above. <p> There have been several approaches proposed in the literature, such as receiver-initiated rate-based feedback [12, 52], RTP [54] with rate-based feedback [4], sender-initiated rate-based congestion control [30], TCP [23], TCP minus retransmission [22], etc. Unfortunately, they fail to have one or more of the properties described above. Rate-based feedback <ref> [4, 12, 52] </ref> is inherently sluggish in reacting to network congestion (due to its time- or state-based rate estimation), and has the danger of failure in the presence of severe congestion (due to its negative acknowledgement, where the sender reduces the packet 105 rate only when told by the receiver). <p> Jacobs and Eleftheriadis proposed an Internet video system architecture [22] in which the media pump at the server adapts the media quality (bit rate) to the available bandwidth through a technique called dynamic rate shaping. In Rowe's continuous media player [52, 53], Vosaic <ref> [12] </ref>, and commercial streaming video players such as VXtreme [63], the video quality (usually video frame rate) presented to the user is continuously monitored by the client, and the measurements are fed back to the server to adjust the rate at which it streams out future video frames.
Reference: [13] <author> Consel, C., and Danvy, O. </author> <title> Tutorial notes on partial evaluation. </title> <booktitle> In In Proceedings of ACM Symposium on Principles of Programming Languages (Charleston, </booktitle> <address> South Carolina, </address> <month> January </month> <year> 1993), </year> <pages> pp. 493-501. </pages>
Reference-contexts: Traditionally, program specialization, also called partial evaluation, is a program transformation process aimed at customizing a program based on parts of its input <ref> [13] </ref>. In essence, program specialization consists of constant propagation and folding, and can be applied to programs that exhibit interpretation. However, it can be generalized to include arbitrary computations that help improve the performance of a software system in specific conditions.
Reference: [14] <author> Cook, P. A. </author> <title> Nonlinear Dynamical Systems. </title> <publisher> Prentice-Hall International (UK) Ltd., </publisher> <year> 1986. </year>
Reference-contexts: In classical control theories, linear systems theory [3, 5] provides formal specification and analysis of linear systems, and nonlinear systems theory <ref> [14] </ref> helps design nonlinear systems based on various forms of linearization. Modern control theories such as fuzzy [34, 67] and neural [16, 67] control offer guidelines on dealing with dynamic nonlinear systems, though they generally are based only on intuition and experience, and lack a rigorous method. <p> The components are implemented and composed. In many cases, the feedback components would be amenable to specification and analysis by control theories, especially linear systems theories <ref> [3, 5, 6, 14, 67] </ref>. Control theories can be applied to analyze or predict theoretical properties, to specify feedback systems at an abstract level or synthesize components from their formal specifications, or to identify guards. Control theories also provides a rich set of building blocks. <p> Control theories also provides a rich set of building blocks. In this section, we briefly describe the various control system theories and discuss about how they can be applied in the software feedback toolkit. 2.5.1 Theoretical Properties of Feedback Systems The theoretical properties addressed by control theories <ref> [3, 5, 6, 14, 67] </ref> include formal specification, stability, time and frequency response, system composition, etc. Some control systems may be specified in mathematical formulas, so that their theoretical properties can be clearly seen. <p> In this section, we highlight aspects of various control theories, especially those closely related to the software feedback toolkit proposed. Those who are interested in understanding more details of control theories should refer to relevant texts <ref> [3, 5, 6, 14, 19, 39, 67] </ref>. Linear Systems Linear systems theories [3, 5, 6] deal with linear control systems. There are two types of linear systems: continuous-time and discrete-time. Linear systems can be specified 29 formally in various forms. <p> No generally applicable rigorous specification or analysis methods are available for nonlinear systems. Nevertheless, there have been guidelines for various types of nonlinear systems. Linearization is a very popular means of specification and analysis <ref> [14] </ref>. A nonlinear system is linearized around some operating points, and linear control systems are designed. During operations, when moving from one operating point to another, appropriate linear control components are brought into operation, or their parameters are changed accordingly. <p> During operations, when moving from one operating point to another, appropriate linear control components are brought into operation, or their parameters are changed accordingly. Techniques based on linearization include gain scheduling, adaptive control, 30 and variable structure systems <ref> [14] </ref>. Another means is nonlinear analogy to linear theory, such as harmonics analysis [14] as compared to linear transfer functions. Finally, some (especially complex) nonlinear systems are analyzed in a totally empirical manner [19], in many cases through extensive simulations. <p> Techniques based on linearization include gain scheduling, adaptive control, 30 and variable structure systems <ref> [14] </ref>. Another means is nonlinear analogy to linear theory, such as harmonics analysis [14] as compared to linear transfer functions. Finally, some (especially complex) nonlinear systems are analyzed in a totally empirical manner [19], in many cases through extensive simulations. <p> Linear theories [5, 6] can be applied for formal specification of linear feedback components and systems, and automatic generation of linear components. They can also be applied for analysis and prediction of theoretical properties. Nonlinear <ref> [14] </ref>, fuzzy and neural [67] control theories provide general guidelines for the development of complex software feedback systems, such as the methods to decompose a complex system into simpler sub-systems. Linear systems theories also provide a set of well-understood and well-behaved building blocks, and formal methods of component composition. <p> file access code for the case of sequential access would increase execution speed. 191 7.3 Toolkits Based On Control Theories Several commercially available toolkits, such as Matlab [59] and MATRIX x [21], support building control systems based on control theories such as linear systems theory [3, 5], nonlinear systems theory <ref> [14] </ref>, fuzzy [34, 67] and neural [16, 67] control. They provide various pre-defined building blocks from control theories, GUI-based tools for control system composition, simulation and analysis, and generation of the code of the constructed control systems.
Reference: [15] <author> Cowan, C., Antrey, T., Krasic, C., Pu, C., and Walpole, J. </author> <title> Fast concurrent dynamic linking for an adaptive operating system. </title> <booktitle> In Proceedings of the International Conference on Configurable Distributed Systems (Annapolis, </booktitle> <address> Maryland, </address> <month> May </month> <year> 1996), </year> <pages> pp. 108-115. </pages>
Reference-contexts: Links are established or removed through component class member functions ConnectOutputPortId () and DisconnectOutputPortId (). The parameters and states of a feedback component can be set or saved, by accessing by its parameter and state ports. Dynamic replugging of guarded feedback components can be performed either eagerly or lazily <ref> [15] </ref>. A component can be plugged in or unplugged eagerly by its guards each time the guards are triggered. The PLL simulation in Fig. 3.10 shows an example of eager replugging of the compensator component. <p> How to perform dynamic replugging of feedback components, either eagerly or lazily, involves 62 trade-offs between implementation complexity and performance. In the case of multi-threaded implementation, dynamic replugging also involves trade-offs in complexity is synchronization between different operations such as guarding, component replugging and normal operations <ref> [15] </ref>. One operation that should be avoided is the unplugging of an active feedback component. As discussed previous Section 3.2.5, a feedback component graph may have several component invocation trees, each of which may have one or more component invocation chains. <p> Synchronization and concurrency control is a difficult issue, especially when dynamic replugging of components is involved. In Synthetix, a method consisting of a set of primitives has been proposed to link operating system code dynamically <ref> [15] </ref>. 78 The software feedback components implemented as C++ objects are passive objects. A component is a data structure associated with some member functions for manipulation, and the various ports are represented by the member functions. Alternatively, feedback components could be implemented as active objects.
Reference: [16] <author> Dayhoff, J. E. </author> <title> Neural Network Architectures: an Introduction. </title> <publisher> Van Nostrand Reinhold, </publisher> <year> 1990. </year>
Reference-contexts: In classical control theories, linear systems theory [3, 5] provides formal specification and analysis of linear systems, and nonlinear systems theory [14] helps design nonlinear systems based on various forms of linearization. Modern control theories such as fuzzy [34, 67] and neural <ref> [16, 67] </ref> control offer guidelines on dealing with dynamic nonlinear systems, though they generally are based only on intuition and experience, and lack a rigorous method. There are also toolkits, such as Matlab [60, 61] and MATRIX x [21], which are based on the above control theories. <p> Finally, some (especially complex) nonlinear systems are analyzed in a totally empirical manner [19], in many cases through extensive simulations. Fuzzy and Neural Control Systems Observing the difficulties in design and analysis of nonlinear systems based on classical mathematical methods, there have been developed fuzzy [34, 67] and neural <ref> [16, 67] </ref> control theories for building nonlinear systems directly, based on intuition and experience instead of formal methods. Fuzzy control is based on the idea of fuzzy sets and fuzzy logic, the key to which is to develop a framework with imprecision. <p> In a fuzzy control system, input signals are first fuzzified into linguistic variables, and then applied with fuzzy control laws. The output of the fuzzy logic are defuzzified back to values for control of target systems. Neural control [67] is based on neural networks <ref> [16] </ref>, which are rough analogies of biological neural systems. Neural networks are self-learning. They can be trained with a large number of inputs, and then used as filters or control laws in control systems. <p> of sequential access would increase execution speed. 191 7.3 Toolkits Based On Control Theories Several commercially available toolkits, such as Matlab [59] and MATRIX x [21], support building control systems based on control theories such as linear systems theory [3, 5], nonlinear systems theory [14], fuzzy [34, 67] and neural <ref> [16, 67] </ref> control. They provide various pre-defined building blocks from control theories, GUI-based tools for control system composition, simulation and analysis, and generation of the code of the constructed control systems. The target applications of these control-theory-based toolkits are traditional hardware or embedded control systems.
Reference: [17] <author> Fendick, K. W., Rodrigues, M. A., and Weiss, A. </author> <title> Analysis of a rate-based control strategy with delayed feedback. </title> <booktitle> In Proceedings of SIGCOMM'92 (August 1992), </booktitle> <pages> pp. 136-147. </pages>
Reference-contexts: The software feedback systems are implemented directly as C++ classes, and can be easily incorporated into software systems. 7.4 Existing Software Feedback In Adaptive Systems Software feedback already exists in many forms in adaptive software systems. It is used for flow and congestion control <ref> [2, 4, 17, 23, 26, 30, 47, 55, 66] </ref>, synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. <p> It also continuously estimates the mean and variance of the round trip time (RTT) in order to adapt its retransmission timer to changing network conditions. Several other rate-based feedback flow and congestion control schemes have been proposed <ref> [4, 17, 26, 30, 55] </ref>. Some other schemes simply turn the source data flow on/off based on feedback from the routers, switches or receivers indicating network congestion [47, 66]. Several of the schemes have also been analyzed theoretically with control and queuing theories [17, 26, 47, 55, 66]. <p> Some other schemes simply turn the source data flow on/off based on feedback from the routers, switches or receivers indicating network congestion [47, 66]. Several of the schemes have also been analyzed theoretically with control and queuing theories <ref> [17, 26, 47, 55, 66] </ref>. Software feedback also plays an important role in synchronization between Internet hosts, between the server and client of a multimedia stream, and between multiple media streams. The Network Time Protocol (NTP) [35], a protocol for clock synchronization between Internet hosts, has been widely deployed.
Reference: [18] <author> Floyd, S., and Fall, K. </author> <title> Router mechanisms to support end-to-end congestion control. </title> <institution> Network Research Group, Lawrence Berkeley National Laboratory. ftp://ftp.ee.lbl.gov/papers/collapse.ps, </institution> <month> February </month> <year> 1997, </year> <month> [September 11, </month> <year> 1997]. </year>
Reference-contexts: Similarly, they should be sensitive to increases in network congestion, and should respond to them by backing-off. Without this behavior, their potential to generate very high data rates could cause serious congestion in the Internet, and perhaps another Internet congestion collapse <ref> [18, 23] </ref>. Consequently, such mechanisms must operate in harmony with TCP [23], which is the base for the currently dominant FTP [41] and Web/HTTP [1] traffic. They should ensure that multiple streaming sessions share the network among themselves and with other non-streaming traffic in a fair manner.
Reference: [19] <author> Goodwin, G. C., and Sin, K. S. </author> <title> Adaptive Filtering Prediction and Control. </title> <publisher> Prentice-Hall, </publisher> <year> 1984. </year>
Reference-contexts: Some examples of specification derivation are shown in Figure 2.9. There has also been much effort and theoretical results in application of general control theories to various complex situations <ref> [19, 39] </ref>. In this section, we highlight aspects of various control theories, especially those closely related to the software feedback toolkit proposed. Those who are interested in understanding more details of control theories should refer to relevant texts [3, 5, 6, 14, 19, 39, 67]. <p> In this section, we highlight aspects of various control theories, especially those closely related to the software feedback toolkit proposed. Those who are interested in understanding more details of control theories should refer to relevant texts <ref> [3, 5, 6, 14, 19, 39, 67] </ref>. Linear Systems Linear systems theories [3, 5, 6] deal with linear control systems. There are two types of linear systems: continuous-time and discrete-time. Linear systems can be specified 29 formally in various forms. <p> Techniques based on linearization include gain scheduling, adaptive control, 30 and variable structure systems [14]. Another means is nonlinear analogy to linear theory, such as harmonics analysis [14] as compared to linear transfer functions. Finally, some (especially complex) nonlinear systems are analyzed in a totally empirical manner <ref> [19] </ref>, in many cases through extensive simulations. <p> Example building blocks are digital filters such as the first-order lowpass filter as shown in Fig. 2.3 (a), high-pass and band-pass filters, Notch filters [5], Butterworth filters [5] with sharp frequency attenuation, adaptive Kalman filters <ref> [19, 39] </ref>, integrators, differentiators [5], etc. The composition rules shown in Fig. 2.9 help in composing building blocks into more complex components and systems at an abstract transfer-function level.
Reference: [20] <author> Inouye, J., Cen, S., Pu, C., and Walpole, J. </author> <title> System support for mobile multimedia applications. </title> <booktitle> In NOSSDAV'97 (May 19-21 1997), </booktitle> <pages> pp. 143-154. 203 </pages>
Reference-contexts: SCP is designed to handle these characteristics properly. SCP also has mobility awareness <ref> [20] </ref>. A mobile host may dynamically switch between network interfaces connecting it to different networks with different properties, such as link speed, latency and workload. <p> Above SCP, the player employs two end-to-end feedback mechanisms: QoS feedback to select the appropriate video resolution and frame rate; and client-server synchronization feedback to minimize client-side video data buffering while ensuring that the buffer does not under-flow. The video player has mobility awareness <ref> [20] </ref>. Different types of network interfaces and links, such as such as Ethernet, WaveLAN, and wired or wireless modem links, have totally different characteristics such as link bandwidth and transmission latency.
Reference: [21] <author> Integrated Systems, Inc. </author> <title> MATRIX x family technical specification. </title> <address> http://www.isi.com /Products/MATRIXx/ Techspec/toc.html, </address> <year> 1997, </year> <month> [September 11, </month> <year> 1997]. </year>
Reference-contexts: Modern control theories such as fuzzy [34, 67] and neural [16, 67] control offer guidelines on dealing with dynamic nonlinear systems, though they generally are based only on intuition and experience, and lack a rigorous method. There are also toolkits, such as Matlab [60, 61] and MATRIX x <ref> [21] </ref>, which are based on the above control theories. In these toolkits, there are libraries of control-theory conforming components, and tools to help the composition, simulation and analysis of control systems. <p> If the filter output passes a given threshold, it is likely that specializing the file access code for the case of sequential access would increase execution speed. 191 7.3 Toolkits Based On Control Theories Several commercially available toolkits, such as Matlab [59] and MATRIX x <ref> [21] </ref>, support building control systems based on control theories such as linear systems theory [3, 5], nonlinear systems theory [14], fuzzy [34, 67] and neural [16, 67] control.
Reference: [22] <author> Jacobs, S., and Eleftheriadis, A. </author> <title> Adaptive video applications for non-QoS networks. </title> <booktitle> In International Workshop on Quality of Service'97 (Columbia University, </booktitle> <address> New York, </address> <month> May </month> <year> 1997), </year> <pages> pp. 161-166. </pages>
Reference-contexts: Finally, they should attempt to minimize latency and maximize the smoothness of the streaming data. There have been several approaches proposed in the literature, such as receiver-initiated rate-based feedback [12, 52], RTP [54] with rate-based feedback [4], sender-initiated rate-based congestion control [30], TCP [23], TCP minus retransmission <ref> [22] </ref>, etc. Unfortunately, they fail to have one or more of the properties described above. <p> TCP's throughput is inherently jerky due to its repeated process of window-size increase until packet loss, followed by exponential back-off. While removing the retransmission from TCP <ref> [22] </ref> eliminates the associated bandwidth waste and latency unpredictability problems, the burstiness in data throughput still remains. We have proposed SCP (Streaming Control Protocol) [11], a unicast 1 streaming flow and congestion control scheme that has the properties described above. <p> It is used for flow and congestion control [2, 4, 17, 23, 26, 30, 47, 55, 66], synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation <ref> [22, 24, 52, 53] </ref>. Software feedback has been used extensively in network flow and congestion control. TCP [2, 23] adjusts its congestion window size based on acknowledgements from the receiver to control data flow and avoid network congestion. <p> Examples are the schemes proposed by Rangan in [48, 49, 50, 51] and that by Little and Ghafoor [28]. In multimedia streaming applications, software feedback has been used for effective dynamic control of the presentation quality. Jacobs and Eleftheriadis proposed an Internet video system architecture <ref> [22] </ref> in which the media pump at the server adapts the media quality (bit rate) to the available bandwidth through a technique called dynamic rate shaping.
Reference: [23] <author> Jacobson, V. </author> <title> Congestion avoidance and control. </title> <booktitle> In SIGCOMM'88 (August 1988), </booktitle> <pages> pp. 79-88. </pages>
Reference-contexts: They have been used in inter-host clock synchronization, network flow and congestion control, quality-of-service control in multimedia presentations, process and thread scheduling, system adaptation, and many other fields. Just a few examples are the flow control mechanisms in TCP <ref> [23] </ref>, the clock synchronization mechanisms in Network Time Protocol (NTP) [35], video frame rate control mechanism in Berkeley continuous media player [53], feedback-based scheduling in the Synthesis operating system [32]. <p> Different feedback systems have different requirements and stay at different positions in the design space. Feedbacks such as those used in Synthesis for adaptive scheduling [32] are invoked very frequently, and need to be highly optimized for execution speed. Some feedbacks, such as TCP flow control <ref> [23] </ref>, are complex. They need complex and fine-tuned filters and control laws to ensure system stability and satisfactory performance. There are also feedback systems that need to be highly adaptive. They need to work well in multiple situations, some of which may not even be known before their development. <p> Similarly, they should be sensitive to increases in network congestion, and should respond to them by backing-off. Without this behavior, their potential to generate very high data rates could cause serious congestion in the Internet, and perhaps another Internet congestion collapse <ref> [18, 23] </ref>. Consequently, such mechanisms must operate in harmony with TCP [23], which is the base for the currently dominant FTP [41] and Web/HTTP [1] traffic. They should ensure that multiple streaming sessions share the network among themselves and with other non-streaming traffic in a fair manner. <p> Without this behavior, their potential to generate very high data rates could cause serious congestion in the Internet, and perhaps another Internet congestion collapse [18, 23]. Consequently, such mechanisms must operate in harmony with TCP <ref> [23] </ref>, which is the base for the currently dominant FTP [41] and Web/HTTP [1] traffic. They should ensure that multiple streaming sessions share the network among themselves and with other non-streaming traffic in a fair manner. <p> Finally, they should attempt to minimize latency and maximize the smoothness of the streaming data. There have been several approaches proposed in the literature, such as receiver-initiated rate-based feedback [12, 52], RTP [54] with rate-based feedback [4], sender-initiated rate-based congestion control [30], TCP <ref> [23] </ref>, TCP minus retransmission [22], etc. Unfortunately, they fail to have one or more of the properties described above. <p> Sender-initiated rate-based schemes [30] avoid the danger of failure, but still have a sluggish rate-estimation process. TCP <ref> [23] </ref> has been known to be a good citizen, and enables bandwidth sharing between multiple sessions, but its infinite retransmission results in wasted network bandwidth (by retransmitting late data) and highly unpredictable latency and jitter. <p> The ^ T rtt and ^ D rtt estimations are done in a way similar to that in TCP <ref> [23] </ref>. The ^ T rtt is the result of 119 applying a lowpass filter to the sequence of raw RTT measurements. ^ D rtt is a lowpass filtering of the difference between ^ T rtt and the raw RTT measurements. <p> Timer duration d rto is also estimated similar to that in TCP. <ref> [23] </ref>, which proposed a formula d rto = ^ T rtt + 4 ^ D rtt This estimator may work well in the TCP implementation in BSD systems, in which coarse-grain 500ms clock resolution is used for timers and RTT measurements. <p> The average recent buffer-fill level, or server work-ahead time, is estimated through a simple lowpass filter building block with an adjustable parameter. Estimation of Buffering Variation There are several alternative approaches to measuring variation <ref> [23, 29] </ref>. Conventional measurements include the variance and standard deviation, and have solid mathematical properties. Unfortunately, they involve costly computations such as calculation of squares and square roots. A cheaper alternative is mean deviation, which is the average of the absolute difference between the raw sample and the mean. <p> The software feedback systems are implemented directly as C++ classes, and can be easily incorporated into software systems. 7.4 Existing Software Feedback In Adaptive Systems Software feedback already exists in many forms in adaptive software systems. It is used for flow and congestion control <ref> [2, 4, 17, 23, 26, 30, 47, 55, 66] </ref>, synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. <p> Software feedback has been used extensively in network flow and congestion control. TCP <ref> [2, 23] </ref> adjusts its congestion window size based on acknowledgements from the receiver to control data flow and avoid network congestion. It also continuously estimates the mean and variance of the round trip time (RTT) in order to adapt its retransmission timer to changing network conditions.
Reference: [24] <author> Jeffay, K., and Bennett, D. </author> <title> A rate-based execution abstraction for multimedia computing. </title> <booktitle> In Proceedings of NOSSDAV'95 (April 1995), </booktitle> <pages> pp. 67-77. </pages>
Reference-contexts: It is used for flow and congestion control [2, 4, 17, 23, 26, 30, 47, 55, 66], synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation <ref> [22, 24, 52, 53] </ref>. Software feedback has been used extensively in network flow and congestion control. TCP [2, 23] adjusts its congestion window size based on acknowledgements from the receiver to control data flow and avoid network congestion. <p> In Jeffay's rate-based execution abstraction <ref> [24] </ref>, Synthesis-style feedback-based scheduling [31] is used to allow multimedia application processes to adapt their pattern of execution based on the availability of resources. While all the mechanisms above for system adaptation are based on software feedback, they are generally implemented in a custom manner, and hard-coded for particular applications.
Reference: [25] <editor> Jones, G. </editor> <booktitle> Programming in OCCAM 2. Prentice-Hall International, </booktitle> <year> 1988. </year>
Reference-contexts: Alternatively, feedback components could be implemented as active objects. Each feedback component is a thread of execution, or a set of threads (especially for composite components). Components are composed through inter-process communication channels. This implementation model is also called communicating sequential process (CSP) <ref> [25] </ref>. An interesting parallel programming language OCCAM [25] was designed based on CSP, and has been implemented on Transputer networks [64]. This concept of active threads maps more directly than the passive object to our feedback component model. <p> Each feedback component is a thread of execution, or a set of threads (especially for composite components). Components are composed through inter-process communication channels. This implementation model is also called communicating sequential process (CSP) <ref> [25] </ref>. An interesting parallel programming language OCCAM [25] was designed based on CSP, and has been implemented on Transputer networks [64]. This concept of active threads maps more directly than the passive object to our feedback component model. But unfortunately, for various reasons, the CSP programming paradigm has not become as popular as C/C++.
Reference: [26] <author> Keshav, S. </author> <title> A control-theoretic approach to flow control. </title> <booktitle> In SIGCOMM'91 (Sept. </booktitle> <year> 1991), </year> <pages> pp. 3-16. </pages>
Reference-contexts: The software feedback systems are implemented directly as C++ classes, and can be easily incorporated into software systems. 7.4 Existing Software Feedback In Adaptive Systems Software feedback already exists in many forms in adaptive software systems. It is used for flow and congestion control <ref> [2, 4, 17, 23, 26, 30, 47, 55, 66] </ref>, synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. <p> It also continuously estimates the mean and variance of the round trip time (RTT) in order to adapt its retransmission timer to changing network conditions. Several other rate-based feedback flow and congestion control schemes have been proposed <ref> [4, 17, 26, 30, 55] </ref>. Some other schemes simply turn the source data flow on/off based on feedback from the routers, switches or receivers indicating network congestion [47, 66]. Several of the schemes have also been analyzed theoretically with control and queuing theories [17, 26, 47, 55, 66]. <p> Some other schemes simply turn the source data flow on/off based on feedback from the routers, switches or receivers indicating network congestion [47, 66]. Several of the schemes have also been analyzed theoretically with control and queuing theories <ref> [17, 26, 47, 55, 66] </ref>. Software feedback also plays an important role in synchronization between Internet hosts, between the server and client of a multimedia stream, and between multiple media streams. The Network Time Protocol (NTP) [35], a protocol for clock synchronization between Internet hosts, has been widely deployed.
Reference: [27] <author> Lippman, S. B. </author> <title> C++ Primer 2nd Edition. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1991. </year>
Reference-contexts: Due to the repluggable nature of feedback objects, the structures of feedback systems are dynamic. To maximize the availability of the software feedback toolkit to software developers, the toolkit prototype is implemented in C++. Among many object-oriented programming languages, C++ <ref> [27] </ref> is the most pervasive, having a large developer base. In C++, feedback components can be naturally implemented as classes. Each instance of a feedback 42 43 component is then a C++ object. Message ports can be implemented by member functions.
Reference: [28] <author> Little, T. D. C., and Ghafoor, A. </author> <title> Multimedia synchronization protocols for broadband integrated services. </title> <journal> IEEE Journal on Selected Areas in Communication, </journal> <volume> 9, </volume> <month> 9 (Dec. </month> <year> 1991), </year> <pages> 1368-1382. </pages>
Reference-contexts: It is used for flow and congestion control [2, 4, 17, 23, 26, 30, 47, 55, 66], synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems <ref> [28, 48, 49, 50, 51] </ref>, and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. TCP [2, 23] adjusts its congestion window size based on acknowledgements from the receiver to control data flow and avoid network congestion. <p> The PLL is parameterized to handle a broad range of clock drift. Feedback based 193 techniques have also been proposed for intra- and inter-stream synchronization in distributed multimedia streaming systems. Examples are the schemes proposed by Rangan in [48, 49, 50, 51] and that by Little and Ghafoor <ref> [28] </ref>. In multimedia streaming applications, software feedback has been used for effective dynamic control of the presentation quality.
Reference: [29] <author> Ljung, L., and Soderstrom, T. </author> <title> Theory and Practice of Recursive Identification. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The average recent buffer-fill level, or server work-ahead time, is estimated through a simple lowpass filter building block with an adjustable parameter. Estimation of Buffering Variation There are several alternative approaches to measuring variation <ref> [23, 29] </ref>. Conventional measurements include the variance and standard deviation, and have solid mathematical properties. Unfortunately, they involve costly computations such as calculation of squares and square roots. A cheaper alternative is mean deviation, which is the average of the absolute difference between the raw sample and the mean.
Reference: [30] <author> Mahdavi, J., and Floyd, S. </author> <title> TCP-friendly unicast rate-based flow control. In end2end mailing list, </title> <address> ftp://ftp.isi.edu/end2end, </address> <month> January </month> <year> 1997, </year> <month> [September 11, </month> <year> 1997]. </year>
Reference-contexts: Finally, they should attempt to minimize latency and maximize the smoothness of the streaming data. There have been several approaches proposed in the literature, such as receiver-initiated rate-based feedback [12, 52], RTP [54] with rate-based feedback [4], sender-initiated rate-based congestion control <ref> [30] </ref>, TCP [23], TCP minus retransmission [22], etc. Unfortunately, they fail to have one or more of the properties described above. <p> Sender-initiated rate-based schemes <ref> [30] </ref> avoid the danger of failure, but still have a sluggish rate-estimation process. TCP [23] has been known to be a good citizen, and enables bandwidth sharing between multiple sessions, but its infinite retransmission results in wasted network bandwidth (by retransmitting late data) and highly unpredictable latency and jitter. <p> The software feedback systems are implemented directly as C++ classes, and can be easily incorporated into software systems. 7.4 Existing Software Feedback In Adaptive Systems Software feedback already exists in many forms in adaptive software systems. It is used for flow and congestion control <ref> [2, 4, 17, 23, 26, 30, 47, 55, 66] </ref>, synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. <p> It also continuously estimates the mean and variance of the round trip time (RTT) in order to adapt its retransmission timer to changing network conditions. Several other rate-based feedback flow and congestion control schemes have been proposed <ref> [4, 17, 26, 30, 55] </ref>. Some other schemes simply turn the source data flow on/off based on feedback from the routers, switches or receivers indicating network congestion [47, 66]. Several of the schemes have also been analyzed theoretically with control and queuing theories [17, 26, 47, 55, 66].
Reference: [31] <author> Massalin, H. </author> <title> Synthesis: An Efficient Implementation of Fundamental Operating System Services. </title> <type> PhD thesis, </type> <institution> Graduate School of Arts and Science, Columbia University, </institution> <year> 1992. </year>
Reference-contexts: These existing feedback systems serve as potential applications of the software feedback toolkit, for systematic design, software reuse, and improvement in performance and extensibility. 7.1 Synthesis: Feedback-Based Adaptive Scheduling The Synthesis operating system <ref> [31, 32, 46] </ref> is an efficient implementation of fundamental operating system services through techniques such as run-time code synthesis and feedback-based fine-grain scheduling. Through run-time code synthesis, frequently-used kernel routines are optimized by creating specialized versions of their executable code at run-time, when new opportunities for optimization become known. <p> Synthetix is a follow-on from Synthesis <ref> [31] </ref>. It extends the results of the latter with a conceptual model of specialization, the idea of incremental and optimistic specialization, application of the idea in commercial operating systems [44], and a set of tools for automating the specialization process [38]. <p> The two techniques we focused on | program specialization for improvement of execution performance and software feedback for system adaptability | both originated from the Synthesis project <ref> [31] </ref>. The software feedback toolkit provides a framework for application of software feedback, while the specialization toolkit provides a framwork for program specialization. Secondly, the software feedback toolkit is an application of the idea of optimistic incremental specialization in the context of software feedback systems. <p> In Jeffay's rate-based execution abstraction [24], Synthesis-style feedback-based scheduling <ref> [31] </ref> is used to allow multimedia application processes to adapt their pattern of execution based on the availability of resources. While all the mechanisms above for system adaptation are based on software feedback, they are generally implemented in a custom manner, and hard-coded for particular applications.
Reference: [32] <author> Massalin, H., and Pu, C. </author> <title> Fine-grain adaptive scheduling using feedback. </title> <booktitle> Computing Systems 3, 1 (Winter 1990), </booktitle> <pages> 139-173. </pages>
Reference-contexts: Just a few examples are the flow control mechanisms in TCP [23], the clock synchronization mechanisms in Network Time Protocol (NTP) [35], video frame rate control mechanism in Berkeley continuous media player [53], feedback-based scheduling in the Synthesis operating system <ref> [32] </ref>. These existing feedback mechanisms are generally implemented in a custom manner, and are hard-coded for a particular application in a particular environment. Consequently, they suffer from arbitrary structure and wasted effort due to repeated design and implementation of logically similar components. <p> The design space has several dimensions, such as complexity, adaptability, and execution speed. Different feedback systems have different requirements and stay at different positions in the design space. Feedbacks such as those used in Synthesis for adaptive scheduling <ref> [32] </ref> are invoked very frequently, and need to be highly optimized for execution speed. Some feedbacks, such as TCP flow control [23], are complex. They need complex and fine-tuned filters and control laws to ensure system stability and satisfactory performance. <p> These existing feedback systems serve as potential applications of the software feedback toolkit, for systematic design, software reuse, and improvement in performance and extensibility. 7.1 Synthesis: Feedback-Based Adaptive Scheduling The Synthesis operating system <ref> [31, 32, 46] </ref> is an efficient implementation of fundamental operating system services through techniques such as run-time code synthesis and feedback-based fine-grain scheduling. Through run-time code synthesis, frequently-used kernel routines are optimized by creating specialized versions of their executable code at run-time, when new opportunities for optimization become known. <p> The concept of software feedback was first identified in Synthesis, and is used for fine-grain adaptive scheduling of interdependent jobs such as threads in a pipeline <ref> [32] </ref>. Each pipeline consists of multiple threads as stages, coupled by their input and output queues. Data elements such as audio samples are passed along the pipeline stage-by-stage, and processed at each stage.
Reference: [33] <author> McCanne, S., and Jacobson, V. </author> <title> vic: a Flexible Framework for Packet Video. </title> <booktitle> In Proceedings of the Third ACM Conference and Exhibition (Multimedia '95) (San Francisco, </booktitle> <address> California, </address> <month> November </month> <year> 1995), </year> <pages> pp. 511-522. 204 </pages>
Reference-contexts: Many research prototype media players have been produced, including the Berkeley MPEG player [52], the OGI (Oregon Graduate Institute) distributed video player [10], the Vosaic player [12], and the Mbone tools <ref> [33] </ref>. Over the past year, many industrial streaming media players have also been released, such as the Netscape streaming video plug-ins [37], RealAudio [42] and Vxtreme [63].
Reference: [34] <author> McNeill, F. M., and Thro, E. </author> <title> Fuzzy Logic: a Practical Approach. Boston: AP Professional, </title> <year> 1994. </year>
Reference-contexts: In classical control theories, linear systems theory [3, 5] provides formal specification and analysis of linear systems, and nonlinear systems theory [14] helps design nonlinear systems based on various forms of linearization. Modern control theories such as fuzzy <ref> [34, 67] </ref> and neural [16, 67] control offer guidelines on dealing with dynamic nonlinear systems, though they generally are based only on intuition and experience, and lack a rigorous method. <p> Finally, some (especially complex) nonlinear systems are analyzed in a totally empirical manner [19], in many cases through extensive simulations. Fuzzy and Neural Control Systems Observing the difficulties in design and analysis of nonlinear systems based on classical mathematical methods, there have been developed fuzzy <ref> [34, 67] </ref> and neural [16, 67] control theories for building nonlinear systems directly, based on intuition and experience instead of formal methods. Fuzzy control is based on the idea of fuzzy sets and fuzzy logic, the key to which is to develop a framework with imprecision. <p> code for the case of sequential access would increase execution speed. 191 7.3 Toolkits Based On Control Theories Several commercially available toolkits, such as Matlab [59] and MATRIX x [21], support building control systems based on control theories such as linear systems theory [3, 5], nonlinear systems theory [14], fuzzy <ref> [34, 67] </ref> and neural [16, 67] control. They provide various pre-defined building blocks from control theories, GUI-based tools for control system composition, simulation and analysis, and generation of the code of the constructed control systems. The target applications of these control-theory-based toolkits are traditional hardware or embedded control systems.
Reference: [35] <author> Mills, D. L. </author> <title> Network time protocol (version 3) specification, implementation and analysis. </title> <type> Tech. rep., </type> <institution> University of Delaware, </institution> <year> 1992. </year> <title> DARPA Network Working Group Report RFC-1305, </title> <address> http://ds.internic.net/ds/rfc-index.html, March 1992, </address> <month> [September 11, </month> <year> 1997]. </year>
Reference-contexts: They have been used in inter-host clock synchronization, network flow and congestion control, quality-of-service control in multimedia presentations, process and thread scheduling, system adaptation, and many other fields. Just a few examples are the flow control mechanisms in TCP [23], the clock synchronization mechanisms in Network Time Protocol (NTP) <ref> [35] </ref>, video frame rate control mechanism in Berkeley continuous media player [53], feedback-based scheduling in the Synthesis operating system [32]. These existing feedback mechanisms are generally implemented in a custom manner, and are hard-coded for a particular application in a particular environment. <p> It is used for flow and congestion control [2, 4, 17, 23, 26, 30, 47, 55, 66], synchronization between Internet hosts <ref> [35] </ref>, intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. <p> Software feedback also plays an important role in synchronization between Internet hosts, between the server and client of a multimedia stream, and between multiple media streams. The Network Time Protocol (NTP) <ref> [35] </ref>, a protocol for clock synchronization between Internet hosts, has been widely deployed. On each host, this protocol uses various filters to identify a reliable remote time (reference clock) server and to estimate the frequency and phase error between the local clock and the reference clock.
Reference: [36] <author> Mosberger, D., Peterson, L. L., Bridges, P. G., and O'Malley, S. </author> <title> Analysis of techniques to improve protocol processing latency. </title> <booktitle> In SIGCOMM'96 (October 1996), </booktitle> <pages> pp. 73-84. </pages>
Reference-contexts: One important part of the Synthetix project [44] is to explore run-time optimization opportunities with a technique called optimistic incremental specialization. There are also other projects, such as the Scout project <ref> [36] </ref>, on dynamic code generation and run-time optimization. But these research efforts are mainly focused on run-time constant folding within individual modules. Run-time cross-module optimization has not been addressed except in special contexts such as network protocol stacks [36]. <p> There are also other projects, such as the Scout project <ref> [36] </ref>, on dynamic code generation and run-time optimization. But these research efforts are mainly focused on run-time constant folding within individual modules. Run-time cross-module optimization has not been addressed except in special contexts such as network protocol stacks [36]. Aggressive run-time optimization of the toolkit-based software feedback systems is part of our future research work [43]. 3.7.3 Alternative Toolkit Implementation Approaches The software feedback components in the toolkit prototype are implemented as single-threaded C++ objects.
Reference: [37] <author> Netscape Communications Corporation. </author> <title> Netscape plug-ins: </title> <address> Audio/video. http://home.netscape.com/comprod/products/navigator/version 2.0/ plugins/audio-video.html, </address> <year> 1997, </year> <month> [September 11, </month> <year> 1997]. </year>
Reference-contexts: Over the past year, many industrial streaming media players have also been released, such as the Netscape streaming video plug-ins <ref> [37] </ref>, RealAudio [42] and Vxtreme [63]. It is expected that real-time media streaming traffic will increase rapidly, and will soon make up a significant portion of the total Internet bandwidth. <p> It is also interesting to evaluate, through experiments, the adaptation mechanisms in our adaptive video player and that in other streaming video players, especially commercial ones such as Vxtreme [63], Real Video and Real Audio players [42], and Netscape streaming video players <ref> [37] </ref>.
Reference: [38] <institution> Oregon Graduate Institute, Department of Computer Science and Engineering. The Synthetix Project at OGI. Oregon Graduate Institute of Science and Technology, </institution> <address> http://www.cse.ogi.edu/DISC/projects/synthetix/, 1994-1997, </address> <month> [September 11, </month> <year> 1997]. </year>
Reference-contexts: These techniques were previously used only by "artists" or "craftsmen" who could build on-of-a-kind systems. But with the help of the toolkit, they can be used by ordinary "engineers". 7.2 Synthetix: Optimistic Incremental Specialization for Adap tive Systems The Synthetix project <ref> [38] </ref> investigates the application of optimistic incremental specialization, a technique for generating specialized code optimistically for system states that are likely to occur but not certain, to build high-performance adaptive operating systems. Synthetix is a follow-on from Synthesis [31]. <p> Synthetix is a follow-on from Synthesis [31]. It extends the results of the latter with a conceptual model of specialization, the idea of incremental and optimistic specialization, application of the idea in commercial operating systems [44], and a set of tools for automating the specialization process <ref> [38] </ref>. With optimistic incremental specialization, operating systems are optimized incrementally whenever opportunities are identified, both at compile-time and at run-time [44]. <p> A set of tools (collectively referred to as the specialization toolkit) 190 has also been built for automatic identification and placement of the guards for a given set of quasi-invariants, generation of specialized code, and dynamic replugging <ref> [38] </ref>. The software feedback toolkit is part of the overall Synthetix project. Firstly, the overall goal of Synthetix is to investigate frameworks for building adaptive systems with techniques previously required great talent and creativity to apply.
Reference: [39] <author> Papoulis, A. </author> <title> Probability, Random Variables, and Stochastic Process. </title> <publisher> McGraw-Hill, Inc., </publisher> <year> 1991. </year>
Reference-contexts: Some examples of specification derivation are shown in Figure 2.9. There has also been much effort and theoretical results in application of general control theories to various complex situations <ref> [19, 39] </ref>. In this section, we highlight aspects of various control theories, especially those closely related to the software feedback toolkit proposed. Those who are interested in understanding more details of control theories should refer to relevant texts [3, 5, 6, 14, 19, 39, 67]. <p> In this section, we highlight aspects of various control theories, especially those closely related to the software feedback toolkit proposed. Those who are interested in understanding more details of control theories should refer to relevant texts <ref> [3, 5, 6, 14, 19, 39, 67] </ref>. Linear Systems Linear systems theories [3, 5, 6] deal with linear control systems. There are two types of linear systems: continuous-time and discrete-time. Linear systems can be specified 29 formally in various forms. <p> Example building blocks are digital filters such as the first-order lowpass filter as shown in Fig. 2.3 (a), high-pass and band-pass filters, Notch filters [5], Butterworth filters [5] with sharp frequency attenuation, adaptive Kalman filters <ref> [19, 39] </ref>, integrators, differentiators [5], etc. The composition rules shown in Fig. 2.9 help in composing building blocks into more complex components and systems at an abstract transfer-function level.
Reference: [40] <author> Paxson, V. </author> <title> End-to-end routing behavior in the Internet. </title> <institution> In SIGCOMM'96 (Stanford University, California, </institution> <month> August </month> <year> 1996), </year> <pages> pp. 25-38. </pages>
Reference-contexts: This problem can be solved if the minimum filter for ^ T brtt only looks back into a limited-depth history instead of the whole one. Fortunately, Paxson has shown that route changes are infrequent events in the Internet <ref> [40] </ref>. The average RTT ^ T rtt and base RTT ^ D rtt estimators are implemented as a single mean and deviation composite feedback filter shown in Fig. 3.6 in Section 3.2.4.
Reference: [41] <author> Postel, J., and Reynolds, J. </author> <title> File transfer protocol. Internet RFC 0959, </title> <note> http://ds.internic.net/ds/rfc-index.html, October 1985, [September 11, </note> <year> 1997]. </year>
Reference-contexts: Without this behavior, their potential to generate very high data rates could cause serious congestion in the Internet, and perhaps another Internet congestion collapse [18, 23]. Consequently, such mechanisms must operate in harmony with TCP [23], which is the base for the currently dominant FTP <ref> [41] </ref> and Web/HTTP [1] traffic. They should ensure that multiple streaming sessions share the network among themselves and with other non-streaming traffic in a fair manner. Finally, they should attempt to minimize latency and maximize the smoothness of the streaming data.
Reference: [42] <institution> Progressive Networks. </institution> <note> HTTP versus RealAudio client-server streaming. http://www.realaudio.com/help/content/http vs ra.html, </note> <year> 1996, </year> <month> [September 11, </month> <year> 1997]. </year>
Reference-contexts: Over the past year, many industrial streaming media players have also been released, such as the Netscape streaming video plug-ins [37], RealAudio <ref> [42] </ref> and Vxtreme [63]. It is expected that real-time media streaming traffic will increase rapidly, and will soon make up a significant portion of the total Internet bandwidth. <p> It is also interesting to evaluate, through experiments, the adaptation mechanisms in our adaptive video player and that in other streaming video players, especially commercial ones such as Vxtreme [63], Real Video and Real Audio players <ref> [42] </ref>, and Netscape streaming video players [37].
Reference: [43] <author> Pu, C. </author> <title> Microfeedbacks for adaptive resource management. </title> <address> http://www.cse.ogi.edu/DISC/projects/microfeedback/microfeedback.html, March 1997, </address> <month> [September 11, </month> <year> 1997]. </year>
Reference-contexts: But these research efforts are mainly focused on run-time constant folding within individual modules. Run-time cross-module optimization has not been addressed except in special contexts such as network protocol stacks [36]. Aggressive run-time optimization of the toolkit-based software feedback systems is part of our future research work <ref> [43] </ref>. 3.7.3 Alternative Toolkit Implementation Approaches The software feedback components in the toolkit prototype are implemented as single-threaded C++ objects. An alternative is a multi-threaded implementation, which can be achieved by making all the feedback component C++ classes and objects multi-thread safe. <p> In fact, the thesis work and other research in the Distributed Systems Research Group (DSRG) of the Department of Computer Science and Engineering, Oregon Graduate Institute have inspired two new projects which started recently in the group. The first one is "Microfeedbacks for Adaptive Resource Management" <ref> [43] </ref>, for further investigation of formal specification and automatic code-generation of high-performance wide-range software feedback systems. The other one is "Systemic Quality of Service Support for Adaptive Distributed Systems" [65], for specification of multimedia presentation QoS requirements, and automatic generation of appropriate feedback systems for adaptive resource management.
Reference: [44] <author> Pu, C., Autrey, T., Black, A., Consel, C., Cowan, C., Inouye, J., Kethana, L., Walpole, J., and Zhang, K. </author> <title> Optimistic incremental specialization: Streamlining a commercial operating system. </title> <booktitle> In SOSP'95 (Copper Mountain Resort, </booktitle> <address> Colorado, </address> <month> December </month> <year> 1995), </year> <pages> pp. 314-324. 205 </pages>
Reference-contexts: We explore the possible ways of feedback system meta-adaptation, and discuss the types of events that need to be guarded. Much of the terminology used in describing the model of guard-based meta-adaptation are borrowed from the Synthetix project <ref> [44] </ref>, which is summarized in Section 7.2. 2.4.1 Guarded Feedback Components and Their Composition A feedback component implementing a single function (e.g., feedback policy or filtering algorithm) has a domain as a subset of its whole input space, in which it works well. <p> Dynamic component replugging eliminates this type of overhead, but introduces overhead for replugging of components. Fortunately, in most cases, dynamic component replugging only happens very infrequently, and is thus more efficient in execution. The Synthetix project <ref> [44] </ref>, to be further discussed in Section 7.2, has demonstrated that in file read () system call, dynamic code generation (similar to dynamic component replugging) is more efficient than case-statements. Another disadvantage of the case-statement approach is that it is inflexible. <p> Especially in the case when the variable or interaction may change, the optimized code needs to be guarded, and unplugged when the assumptions on which the optimized code is based are no longer valid. One important part of the Synthetix project <ref> [44] </ref> is to explore run-time optimization opportunities with a technique called optimistic incremental specialization. There are also other projects, such as the Scout project [36], on dynamic code generation and run-time optimization. But these research efforts are mainly focused on run-time constant folding within individual modules. <p> Synthetix is a follow-on from Synthesis [31]. It extends the results of the latter with a conceptual model of specialization, the idea of incremental and optimistic specialization, application of the idea in commercial operating systems <ref> [44] </ref>, and a set of tools for automating the specialization process [38]. With optimistic incremental specialization, operating systems are optimized incrementally whenever opportunities are identified, both at compile-time and at run-time [44]. <p> conceptual model of specialization, the idea of incremental and optimistic specialization, application of the idea in commercial operating systems <ref> [44] </ref>, and a set of tools for automating the specialization process [38]. With optimistic incremental specialization, operating systems are optimized incrementally whenever opportunities are identified, both at compile-time and at run-time [44]. This contrasts to the traditional approach that operating systems are optimized statically for a single "common case" (which may not actually be a real common case in specific 189 situations) at coding or compile time. <p> This process of dynamically replacing one version of code with another version is called dynamic replugging. The overall repeated process of specialization based on quasi-invariants is referred to as optimistic incremental specialization. Optimistic incremental specialization has been successfully used to specialize a variety of OS components <ref> [44] </ref>. A set of tools (collectively referred to as the specialization toolkit) 190 has also been built for automatic identification and placement of the guards for a given set of quasi-invariants, generation of specialized code, and dynamic replugging [38]. The software feedback toolkit is part of the overall Synthetix project.
Reference: [45] <author> Pu, C., and Fuhrer, R. M. </author> <title> Feedback-based scheduling: a toolbox approach. </title> <booktitle> In Fourth Workshop on Workstation Operating Systems (October 1993), </booktitle> <pages> pp. 124-128. </pages>
Reference-contexts: In the feedback-based fine-grain scheduling, filters such as lowpass filters, differential filters and integrator filters are used to avoid potential oscillation, to speedup convergence, and to improve tracking accuracy. Based on the work in Synthesis, Pu and Fuhrer envisioned a toolbox approach to feedback-based scheduling in a position paper <ref> [45] </ref>. The proposed toolbox would contain a set of standard and relatively simple components with well-defined performance and 188 functionality characteristics. A filter design tool would be used for interactive filter specification, composition, and generation.
Reference: [46] <author> Pu, C., Massalin, H., and Loannidis, J. </author> <title> The synthesis kernel. </title> <journal> Computing Systems, </journal> <volume> 1, </volume> <month> 1 (Winter </month> <year> 1988), </year> <pages> 11-32. </pages>
Reference-contexts: These existing feedback systems serve as potential applications of the software feedback toolkit, for systematic design, software reuse, and improvement in performance and extensibility. 7.1 Synthesis: Feedback-Based Adaptive Scheduling The Synthesis operating system <ref> [31, 32, 46] </ref> is an efficient implementation of fundamental operating system services through techniques such as run-time code synthesis and feedback-based fine-grain scheduling. Through run-time code synthesis, frequently-used kernel routines are optimized by creating specialized versions of their executable code at run-time, when new opportunities for optimization become known.
Reference: [47] <author> Ramakrishnan, K. K., and Jain, R. </author> <title> A binary feedback scheme for congestion avoidance in computer networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8, </volume> <month> 2 (May </month> <year> 1990), </year> <pages> 158-181. </pages>
Reference-contexts: The software feedback systems are implemented directly as C++ classes, and can be easily incorporated into software systems. 7.4 Existing Software Feedback In Adaptive Systems Software feedback already exists in many forms in adaptive software systems. It is used for flow and congestion control <ref> [2, 4, 17, 23, 26, 30, 47, 55, 66] </ref>, synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. <p> Several other rate-based feedback flow and congestion control schemes have been proposed [4, 17, 26, 30, 55]. Some other schemes simply turn the source data flow on/off based on feedback from the routers, switches or receivers indicating network congestion <ref> [47, 66] </ref>. Several of the schemes have also been analyzed theoretically with control and queuing theories [17, 26, 47, 55, 66]. Software feedback also plays an important role in synchronization between Internet hosts, between the server and client of a multimedia stream, and between multiple media streams. <p> Some other schemes simply turn the source data flow on/off based on feedback from the routers, switches or receivers indicating network congestion [47, 66]. Several of the schemes have also been analyzed theoretically with control and queuing theories <ref> [17, 26, 47, 55, 66] </ref>. Software feedback also plays an important role in synchronization between Internet hosts, between the server and client of a multimedia stream, and between multiple media streams. The Network Time Protocol (NTP) [35], a protocol for clock synchronization between Internet hosts, has been widely deployed.
Reference: [48] <author> Ramanathan, S., and Rangan, P. V. </author> <title> Adaptive feedback techniques for synchronized multimedia retrieval over integrated networks. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1, </volume> <month> 2 (April </month> <year> 1993), </year> <pages> 246-260. </pages>
Reference-contexts: It is used for flow and congestion control [2, 4, 17, 23, 26, 30, 47, 55, 66], synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems <ref> [28, 48, 49, 50, 51] </ref>, and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. TCP [2, 23] adjusts its congestion window size based on acknowledgements from the receiver to control data flow and avoid network congestion. <p> The PLL is parameterized to handle a broad range of clock drift. Feedback based 193 techniques have also been proposed for intra- and inter-stream synchronization in distributed multimedia streaming systems. Examples are the schemes proposed by Rangan in <ref> [48, 49, 50, 51] </ref> and that by Little and Ghafoor [28]. In multimedia streaming applications, software feedback has been used for effective dynamic control of the presentation quality.
Reference: [49] <author> Ramanathan, S., and Rangan, P. V. </author> <title> Feedback techniques for intra-media continuity and inter-media synchronization in distributed multimedia systems. </title> <journal> The Computer Journal 36, </journal> <month> 1 (Feb. </month> <year> 1993), </year> <pages> 19-31. </pages>
Reference-contexts: It is used for flow and congestion control [2, 4, 17, 23, 26, 30, 47, 55, 66], synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems <ref> [28, 48, 49, 50, 51] </ref>, and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. TCP [2, 23] adjusts its congestion window size based on acknowledgements from the receiver to control data flow and avoid network congestion. <p> The PLL is parameterized to handle a broad range of clock drift. Feedback based 193 techniques have also been proposed for intra- and inter-stream synchronization in distributed multimedia streaming systems. Examples are the schemes proposed by Rangan in <ref> [48, 49, 50, 51] </ref> and that by Little and Ghafoor [28]. In multimedia streaming applications, software feedback has been used for effective dynamic control of the presentation quality.
Reference: [50] <author> Rangan, P. V., Ramanathan, S., and Sampathkumar, S. </author> <title> Feedback techniques for continuity and synchronization in multimedia information retrieval. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 13, </volume> <month> 2 (April </month> <year> 1995), </year> <pages> 145-176. </pages>
Reference-contexts: It is used for flow and congestion control [2, 4, 17, 23, 26, 30, 47, 55, 66], synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems <ref> [28, 48, 49, 50, 51] </ref>, and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. TCP [2, 23] adjusts its congestion window size based on acknowledgements from the receiver to control data flow and avoid network congestion. <p> The PLL is parameterized to handle a broad range of clock drift. Feedback based 193 techniques have also been proposed for intra- and inter-stream synchronization in distributed multimedia streaming systems. Examples are the schemes proposed by Rangan in <ref> [48, 49, 50, 51] </ref> and that by Little and Ghafoor [28]. In multimedia streaming applications, software feedback has been used for effective dynamic control of the presentation quality.
Reference: [51] <author> Rangan, P. V., Ramanathan, S., Vin, H. M., and Kaeppner, T. </author> <title> Techniques for multimedia synchronization in network file systems. </title> <journal> Computer Communications Journal 16, </journal> <month> 3 (Mar. </month> <year> 1993), </year> <pages> 168-176. </pages>
Reference-contexts: It is used for flow and congestion control [2, 4, 17, 23, 26, 30, 47, 55, 66], synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems <ref> [28, 48, 49, 50, 51] </ref>, and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. TCP [2, 23] adjusts its congestion window size based on acknowledgements from the receiver to control data flow and avoid network congestion. <p> The PLL is parameterized to handle a broad range of clock drift. Feedback based 193 techniques have also been proposed for intra- and inter-stream synchronization in distributed multimedia streaming systems. Examples are the schemes proposed by Rangan in <ref> [48, 49, 50, 51] </ref> and that by Little and Ghafoor [28]. In multimedia streaming applications, software feedback has been used for effective dynamic control of the presentation quality.
Reference: [52] <author> Rowe, L. A., et al. </author> <title> MPEG video in software: Representation, transmission and playback. </title> <booktitle> In Symposium on Elec. </booktitle> <institution> Imaging Sci. and Tech. </institution> <address> (San Jose, California, </address> <month> February </month> <year> 1994), </year> <pages> pp. 15-26. </pages>
Reference-contexts: Many research prototype media players have been produced, including the Berkeley MPEG player <ref> [52] </ref>, the OGI (Oregon Graduate Institute) distributed video player [10], the Vosaic player [12], and the Mbone tools [33]. Over the past year, many industrial streaming media players have also been released, such as the Netscape streaming video plug-ins [37], RealAudio [42] and Vxtreme [63]. <p> Finally, they should attempt to minimize latency and maximize the smoothness of the streaming data. There have been several approaches proposed in the literature, such as receiver-initiated rate-based feedback <ref> [12, 52] </ref>, RTP [54] with rate-based feedback [4], sender-initiated rate-based congestion control [30], TCP [23], TCP minus retransmission [22], etc. Unfortunately, they fail to have one or more of the properties described above. <p> There have been several approaches proposed in the literature, such as receiver-initiated rate-based feedback [12, 52], RTP [54] with rate-based feedback [4], sender-initiated rate-based congestion control [30], TCP [23], TCP minus retransmission [22], etc. Unfortunately, they fail to have one or more of the properties described above. Rate-based feedback <ref> [4, 12, 52] </ref> is inherently sluggish in reacting to network congestion (due to its time- or state-based rate estimation), and has the danger of failure in the presence of severe congestion (due to its negative acknowledgement, where the sender reduces the packet 105 rate only when told by the receiver). <p> It is used for flow and congestion control [2, 4, 17, 23, 26, 30, 47, 55, 66], synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation <ref> [22, 24, 52, 53] </ref>. Software feedback has been used extensively in network flow and congestion control. TCP [2, 23] adjusts its congestion window size based on acknowledgements from the receiver to control data flow and avoid network congestion. <p> Jacobs and Eleftheriadis proposed an Internet video system architecture [22] in which the media pump at the server adapts the media quality (bit rate) to the available bandwidth through a technique called dynamic rate shaping. In Rowe's continuous media player <ref> [52, 53] </ref>, Vosaic [12], and commercial streaming video players such as VXtreme [63], the video quality (usually video frame rate) presented to the user is continuously monitored by the client, and the measurements are fed back to the server to adjust the rate at which it streams out future video frames.
Reference: [53] <author> Rowe, L. A., and Smith, B. C. </author> <title> A continuous media player. </title> <booktitle> In Proceedings of the 3rd International Workshop on Network and Operating System Support for Digital Audio and Video (San Diego, </booktitle> <address> California, </address> <month> November </month> <year> 1992), </year> <pages> pp. 376-386. </pages>
Reference-contexts: Just a few examples are the flow control mechanisms in TCP [23], the clock synchronization mechanisms in Network Time Protocol (NTP) [35], video frame rate control mechanism in Berkeley continuous media player <ref> [53] </ref>, feedback-based scheduling in the Synthesis operating system [32]. These existing feedback mechanisms are generally implemented in a custom manner, and are hard-coded for a particular application in a particular environment. Consequently, they suffer from arbitrary structure and wasted effort due to repeated design and implementation of logically similar components. <p> It is used for flow and congestion control [2, 4, 17, 23, 26, 30, 47, 55, 66], synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation <ref> [22, 24, 52, 53] </ref>. Software feedback has been used extensively in network flow and congestion control. TCP [2, 23] adjusts its congestion window size based on acknowledgements from the receiver to control data flow and avoid network congestion. <p> Jacobs and Eleftheriadis proposed an Internet video system architecture [22] in which the media pump at the server adapts the media quality (bit rate) to the available bandwidth through a technique called dynamic rate shaping. In Rowe's continuous media player <ref> [52, 53] </ref>, Vosaic [12], and commercial streaming video players such as VXtreme [63], the video quality (usually video frame rate) presented to the user is continuously monitored by the client, and the measurements are fed back to the server to adjust the rate at which it streams out future video frames.
Reference: [54] <author> Schulzrinne, H., Casner, S., Frederick, R., and Jacobson, V. RTP: </author> <title> A transport protocol for real-time applications. Internet RFC 1889, </title> <note> http://ds.internic.net/ds/rfc-index.html, January 1996, [September 11, </note> <year> 1997]. </year>
Reference-contexts: Finally, they should attempt to minimize latency and maximize the smoothness of the streaming data. There have been several approaches proposed in the literature, such as receiver-initiated rate-based feedback [12, 52], RTP <ref> [54] </ref> with rate-based feedback [4], sender-initiated rate-based congestion control [30], TCP [23], TCP minus retransmission [22], etc. Unfortunately, they fail to have one or more of the properties described above.
Reference: [55] <author> Shenker, S. </author> <title> A theoretical analysis of feedback flow control. </title> <booktitle> In Proceedings of SIGCOMM'90 (September 1990), </booktitle> <pages> pp. 156-165. 206 </pages>
Reference-contexts: The software feedback systems are implemented directly as C++ classes, and can be easily incorporated into software systems. 7.4 Existing Software Feedback In Adaptive Systems Software feedback already exists in many forms in adaptive software systems. It is used for flow and congestion control <ref> [2, 4, 17, 23, 26, 30, 47, 55, 66] </ref>, synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. <p> It also continuously estimates the mean and variance of the round trip time (RTT) in order to adapt its retransmission timer to changing network conditions. Several other rate-based feedback flow and congestion control schemes have been proposed <ref> [4, 17, 26, 30, 55] </ref>. Some other schemes simply turn the source data flow on/off based on feedback from the routers, switches or receivers indicating network congestion [47, 66]. Several of the schemes have also been analyzed theoretically with control and queuing theories [17, 26, 47, 55, 66]. <p> Some other schemes simply turn the source data flow on/off based on feedback from the routers, switches or receivers indicating network congestion [47, 66]. Several of the schemes have also been analyzed theoretically with control and queuing theories <ref> [17, 26, 47, 55, 66] </ref>. Software feedback also plays an important role in synchronization between Internet hosts, between the server and client of a multimedia stream, and between multiple media streams. The Network Time Protocol (NTP) [35], a protocol for clock synchronization between Internet hosts, has been widely deployed.
Reference: [56] <author> Spiegel, M. R. </author> <title> Theory and Problems of Probability and Statistics. </title> <publisher> McGraw-Hill, Inc., </publisher> <year> 1975. </year>
Reference: [57] <author> Staehli, R. </author> <title> Quality of Service Specification for Resource Management in Multimedia Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science and Technology, Oregon Graduate Institute of Science and Technology, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: One way to predict it is based on the current pipeline bandwidth estimation and the ad-hoc relationship between pipeline effective bandwidth and resolution in the context of the video stream in question. This prediction involves mapping from user-level QoS to resource requirements <ref> [57] </ref>, and is complicated. A much simpler way, which is used by the resolution-adaptation policy in the video player prototype, is to detect the new effective bandwidth by injecting frames at a high enough rate to the pipeline.
Reference: [58] <author> Staehli, R., Walpole, J., and Maier, D. </author> <title> Quality of service specification for multimedia presentations. </title> <journal> Multimedia Systems, </journal> <volume> 3, </volume> <month> 5/6 (November </month> <year> 1995), </year> <pages> 251-263. </pages>
Reference-contexts: Hence, we need a metric to quantify this smoothness aspect of the video playback quality. One smoothness measurement is based on presentation jitter as proposed by Staehli <ref> [58] </ref>. In our player, we assume that the mapping from the logical time of a video stream to the 167 system time of the client is precise [10]. All the frames that are displayed are displayed on time, and all late frames are dropped.
Reference: [59] <author> The MathWorks, Inc. </author> <title> Matlab product tour. </title> <address> http://www.mathworks.com/products.html, 1997, </address> <month> [September 11, </month> <year> 1997]. </year>
Reference-contexts: If the filter output passes a given threshold, it is likely that specializing the file access code for the case of sequential access would increase execution speed. 191 7.3 Toolkits Based On Control Theories Several commercially available toolkits, such as Matlab <ref> [59] </ref> and MATRIX x [21], support building control systems based on control theories such as linear systems theory [3, 5], nonlinear systems theory [14], fuzzy [34, 67] and neural [16, 67] control. <p> They provide various pre-defined building blocks from control theories, GUI-based tools for control system composition, simulation and analysis, and generation of the code of the constructed control systems. The target applications of these control-theory-based toolkits are traditional hardware or embedded control systems. Taking Matlab <ref> [59] </ref> as an example, it has toolboxes for linear and nonlinear, continuous and discrete control, robust control, fuzzy logic, and neural control, etc. Each toolbox consists of building blocks as well as utilities for simulation and analysis.
Reference: [60] <author> The MathWorks, Inc. </author> <title> The Student Edition of MATLAB Version 4 User's Guide. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1995. </year>
Reference-contexts: Modern control theories such as fuzzy [34, 67] and neural [16, 67] control offer guidelines on dealing with dynamic nonlinear systems, though they generally are based only on intuition and experience, and lack a rigorous method. There are also toolkits, such as Matlab <ref> [60, 61] </ref> and MATRIX x [21], which are based on the above control theories. In these toolkits, there are libraries of control-theory conforming components, and tools to help the composition, simulation and analysis of control systems.
Reference: [61] <author> The MathWorks, Inc. </author> <title> The Student Edition of SIMULINK User's Guide. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1996. </year>
Reference-contexts: Modern control theories such as fuzzy [34, 67] and neural [16, 67] control offer guidelines on dealing with dynamic nonlinear systems, though they generally are based only on intuition and experience, and lack a rigorous method. There are also toolkits, such as Matlab <ref> [60, 61] </ref> and MATRIX x [21], which are based on the above control theories. In these toolkits, there are libraries of control-theory conforming components, and tools to help the composition, simulation and analysis of control systems.
Reference: [62] <author> Torvalds, L. </author> <title> LINUX kernal source code version 2.0.18. </title> <note> http://www.kernel.org/pub/linux/kernel/v2.0/linux-2.0.18.tar.gz, September 1996, [September 11, </note> <year> 1997]. </year>
Reference-contexts: One simple and straightforward ^r estimator would be to apply a lowpass 4 For detailed information, please see comments around line number 860 in file net/ipv4/tcp input.c of the LINUX version 2.0.18 source code <ref> [62] </ref>. 120 filter on the raw interval measurement sequence, and invert the resultant smoothed interval to get an average packet rate. However, one property of the packet-switched Internet is that it is asynchronous, and packets paced out smoothly by the sender may arrive at the receiver in clumps.
Reference: [63] <author> Vxtreme, Inc. </author> <title> Vxtreme streaming video player. </title> <address> http://www.vxtreme.com, 1997, </address> <month> [September 11, </month> <year> 1997]. </year>
Reference-contexts: Over the past year, many industrial streaming media players have also been released, such as the Netscape streaming video plug-ins [37], RealAudio [42] and Vxtreme <ref> [63] </ref>. It is expected that real-time media streaming traffic will increase rapidly, and will soon make up a significant portion of the total Internet bandwidth. <p> In Rowe's continuous media player [52, 53], Vosaic [12], and commercial streaming video players such as VXtreme <ref> [63] </ref>, the video quality (usually video frame rate) presented to the user is continuously monitored by the client, and the measurements are fed back to the server to adjust the rate at which it streams out future video frames. <p> It is also interesting to evaluate, through experiments, the adaptation mechanisms in our adaptive video player and that in other streaming video players, especially commercial ones such as Vxtreme <ref> [63] </ref>, Real Video and Real Audio players [42], and Netscape streaming video players [37].
Reference: [64] <author> Wachsmann, A., and Wichmann, F. OCCAM-light: </author> <title> A multiparadigm programming language for transputer networks. </title> <type> Tech. Rep. </type> <institution> tr-rf-93-005, U-Gesamthochschule Paderborn, CS, </institution> <month> April 93. </month>
Reference-contexts: Components are composed through inter-process communication channels. This implementation model is also called communicating sequential process (CSP) [25]. An interesting parallel programming language OCCAM [25] was designed based on CSP, and has been implemented on Transputer networks <ref> [64] </ref>. This concept of active threads maps more directly than the passive object to our feedback component model. But unfortunately, for various reasons, the CSP programming paradigm has not become as popular as C/C++. As a result an CSP-based implementation of the software feedback toolkit would be less pervasive.
Reference: [65] <author> Walpole, J. </author> <title> Systemic quality of service support for adaptive distributed systems. </title> <address> http://www.cse.ogi.edu/DISC/projects/qos/QoS.html, March 1997, </address> <month> [September 11, </month> <year> 1997]. </year>
Reference-contexts: The first one is "Microfeedbacks for Adaptive Resource Management" [43], for further investigation of formal specification and automatic code-generation of high-performance wide-range software feedback systems. The other one is "Systemic Quality of Service Support for Adaptive Distributed Systems" <ref> [65] </ref>, for specification of multimedia presentation QoS requirements, and automatic generation of appropriate feedback systems for adaptive resource management. In the software feedback composition methodology, a more detailed model is to be developed for the specification of guards and meta-adaptation operations such as dynamic component replugging and exception processing.
Reference: [66] <author> Wang, Y. T., and Sengupta, B. </author> <title> Performance analysis of a feedback congestion control policy. </title> <booktitle> In Proceedings of SIGCOMM'91 (September 1991), </booktitle> <pages> pp. 149-157. </pages>
Reference-contexts: The software feedback systems are implemented directly as C++ classes, and can be easily incorporated into software systems. 7.4 Existing Software Feedback In Adaptive Systems Software feedback already exists in many forms in adaptive software systems. It is used for flow and congestion control <ref> [2, 4, 17, 23, 26, 30, 47, 55, 66] </ref>, synchronization between Internet hosts [35], intra- and inter-stream synchronization in distributed multimedia systems [28, 48, 49, 50, 51], and multimedia presentation QoS adaptation [22, 24, 52, 53]. Software feedback has been used extensively in network flow and congestion control. <p> Several other rate-based feedback flow and congestion control schemes have been proposed [4, 17, 26, 30, 55]. Some other schemes simply turn the source data flow on/off based on feedback from the routers, switches or receivers indicating network congestion <ref> [47, 66] </ref>. Several of the schemes have also been analyzed theoretically with control and queuing theories [17, 26, 47, 55, 66]. Software feedback also plays an important role in synchronization between Internet hosts, between the server and client of a multimedia stream, and between multiple media streams. <p> Some other schemes simply turn the source data flow on/off based on feedback from the routers, switches or receivers indicating network congestion [47, 66]. Several of the schemes have also been analyzed theoretically with control and queuing theories <ref> [17, 26, 47, 55, 66] </ref>. Software feedback also plays an important role in synchronization between Internet hosts, between the server and client of a multimedia stream, and between multiple media streams. The Network Time Protocol (NTP) [35], a protocol for clock synchronization between Internet hosts, has been widely deployed.
Reference: [67] <author> White, D. A., and Sofge, D. A. </author> <title> Handbook of Intelligent Control: Neural, Fuzzy and Adaptive Approaches. </title> <publisher> Multiscience Press, Inc., </publisher> <year> 1992. </year>
Reference-contexts: In classical control theories, linear systems theory [3, 5] provides formal specification and analysis of linear systems, and nonlinear systems theory [14] helps design nonlinear systems based on various forms of linearization. Modern control theories such as fuzzy <ref> [34, 67] </ref> and neural [16, 67] control offer guidelines on dealing with dynamic nonlinear systems, though they generally are based only on intuition and experience, and lack a rigorous method. <p> In classical control theories, linear systems theory [3, 5] provides formal specification and analysis of linear systems, and nonlinear systems theory [14] helps design nonlinear systems based on various forms of linearization. Modern control theories such as fuzzy [34, 67] and neural <ref> [16, 67] </ref> control offer guidelines on dealing with dynamic nonlinear systems, though they generally are based only on intuition and experience, and lack a rigorous method. There are also toolkits, such as Matlab [60, 61] and MATRIX x [21], which are based on the above control theories. <p> The components are implemented and composed. In many cases, the feedback components would be amenable to specification and analysis by control theories, especially linear systems theories <ref> [3, 5, 6, 14, 67] </ref>. Control theories can be applied to analyze or predict theoretical properties, to specify feedback systems at an abstract level or synthesize components from their formal specifications, or to identify guards. Control theories also provides a rich set of building blocks. <p> Control theories also provides a rich set of building blocks. In this section, we briefly describe the various control system theories and discuss about how they can be applied in the software feedback toolkit. 2.5.1 Theoretical Properties of Feedback Systems The theoretical properties addressed by control theories <ref> [3, 5, 6, 14, 67] </ref> include formal specification, stability, time and frequency response, system composition, etc. Some control systems may be specified in mathematical formulas, so that their theoretical properties can be clearly seen. <p> In this section, we highlight aspects of various control theories, especially those closely related to the software feedback toolkit proposed. Those who are interested in understanding more details of control theories should refer to relevant texts <ref> [3, 5, 6, 14, 19, 39, 67] </ref>. Linear Systems Linear systems theories [3, 5, 6] deal with linear control systems. There are two types of linear systems: continuous-time and discrete-time. Linear systems can be specified 29 formally in various forms. <p> Finally, some (especially complex) nonlinear systems are analyzed in a totally empirical manner [19], in many cases through extensive simulations. Fuzzy and Neural Control Systems Observing the difficulties in design and analysis of nonlinear systems based on classical mathematical methods, there have been developed fuzzy <ref> [34, 67] </ref> and neural [16, 67] control theories for building nonlinear systems directly, based on intuition and experience instead of formal methods. Fuzzy control is based on the idea of fuzzy sets and fuzzy logic, the key to which is to develop a framework with imprecision. <p> Finally, some (especially complex) nonlinear systems are analyzed in a totally empirical manner [19], in many cases through extensive simulations. Fuzzy and Neural Control Systems Observing the difficulties in design and analysis of nonlinear systems based on classical mathematical methods, there have been developed fuzzy [34, 67] and neural <ref> [16, 67] </ref> control theories for building nonlinear systems directly, based on intuition and experience instead of formal methods. Fuzzy control is based on the idea of fuzzy sets and fuzzy logic, the key to which is to develop a framework with imprecision. <p> In a fuzzy control system, input signals are first fuzzified into linguistic variables, and then applied with fuzzy control laws. The output of the fuzzy logic are defuzzified back to values for control of target systems. Neural control <ref> [67] </ref> is based on neural networks [16], which are rough analogies of biological neural systems. Neural networks are self-learning. They can be trained with a large number of inputs, and then used as filters or control laws in control systems. <p> Linear theories [5, 6] can be applied for formal specification of linear feedback components and systems, and automatic generation of linear components. They can also be applied for analysis and prediction of theoretical properties. Nonlinear [14], fuzzy and neural <ref> [67] </ref> control theories provide general guidelines for the development of complex software feedback systems, such as the methods to decompose a complex system into simpler sub-systems. Linear systems theories also provide a set of well-understood and well-behaved building blocks, and formal methods of component composition. <p> code for the case of sequential access would increase execution speed. 191 7.3 Toolkits Based On Control Theories Several commercially available toolkits, such as Matlab [59] and MATRIX x [21], support building control systems based on control theories such as linear systems theory [3, 5], nonlinear systems theory [14], fuzzy <ref> [34, 67] </ref> and neural [16, 67] control. They provide various pre-defined building blocks from control theories, GUI-based tools for control system composition, simulation and analysis, and generation of the code of the constructed control systems. The target applications of these control-theory-based toolkits are traditional hardware or embedded control systems. <p> of sequential access would increase execution speed. 191 7.3 Toolkits Based On Control Theories Several commercially available toolkits, such as Matlab [59] and MATRIX x [21], support building control systems based on control theories such as linear systems theory [3, 5], nonlinear systems theory [14], fuzzy [34, 67] and neural <ref> [16, 67] </ref> control. They provide various pre-defined building blocks from control theories, GUI-based tools for control system composition, simulation and analysis, and generation of the code of the constructed control systems. The target applications of these control-theory-based toolkits are traditional hardware or embedded control systems.
References-found: 67

