URL: http://www.cs.berkeley.edu/~eanders/classes/252/cs252.ps
Refering-URL: http://www.cs.berkeley.edu/~eanders/classes/
Root-URL: 
Title: An Exploration of Network RAM  
Author: Eric A. Anderson Jeanna M. Neefe 
Keyword: network RAM, remote memory paging, reliability, user-level implementation  
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division University of California at Berkeley  
Email: eanders,neefe@cs.berkeley.edu  
Phone: 1-510-642-8284  
Date: December 9, 1994  
Abstract: The goal of network RAM is to improve the performance of memory intensive workloads by paging to idle memory over the network rather than to disk. In this paper, we reexamine common assumptions about network RAM, compare possible implementations, describe the structure and performance of our user-level implementation and investigate various methods for providing reliability.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anderson, T.E.; Culler, D.E.; Patterson, D.A et al.; </author> <title> "A Case for NOW (Networks of Workstations)", </title> <month> November </month> <year> 1994. </year>
Reference-contexts: Until achievable network bandwidths get much faster, the time to bring pages into the network will limit the types of programs that can effectively use network RAM. 1.3 Most machines have free memory One goal for network RAM is to use it in a NOW <ref> [1] </ref>. While right now most of the workstations on a network are idle, it is unclear that once a parallel workload, and a file system which caches on client nodes are added to the sequential workload that there will still be sufficient free workstations and therefore free memory.
Reference: [2] <author> Asami, S., </author> <title> "Evaluating Network RAM via Paging", NOW Retreat Presentation slides, </title> <month> June </month> <year> 1994. </year>
Reference: [3] <author> Asami, S., </author> <title> "Design Issues for Network RAM", </title> <note> 294-5 Presentation Slides, </note> <month> November </month> <year> 1992. </year> <month> 11 </month>
Reference: [4] <author> Brewer, E.; Kuszmaul B., </author> <title> "How to Get Good Performance from the CM-5 Data Network" Proceedings of the 1994 International Perallel Processing Symposium. </title>
Reference: [5] <author> Carter, L.; Ferrante, J.; Hummel S. </author> <title> "Hierarchical Tiling: A Framework for Multi-level parallelism and Locality." </title>
Reference-contexts: This implementation would require user code to explicitly move data back and forth from either the disk or the network. This idea requires substantial code modification, but it is being explored as a possible technique for compilers. Carter <ref> [5] </ref> shows that substantial speedup can be achieved by considering all levels of the memory hierarchy from registers to disk. This solution is likely to have the best performance because it deals with the entire memory hierarchy and has the most high level knowledge about data use patterns.
Reference: [6] <author> Chan, T. and Hsu, W., </author> <title> "PRIME: Paging to Remote Idle MEmory", </title> <address> SCAMD, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: After examining these choices, we decided to do a user-level implementation. We believed that explicit program management would be to hard to convince people to use, and that modifying the kernel or building a network interface would not be practical during a single semester. Two other groups <ref> [10, 6] </ref> were already doing implementations as device drivers, so a user level implementation would allow for comparisons. We felt that the portability advantages, and the lower risk to the operating system made our solution attractive for both experimentation and use. <p> We attempted to compare our non-communication overhead with the measurements of other groups. Mainwaring, Wright and Yoshikawa [10] measured an overhead of about 1 ms for their implementation of a device driver plus process for Solaris 2.3. Chan and Hsu <ref> [6] </ref> measured a total time of about 3 ms to retrieve a page in their implementation on Solaris 2.3. Because they used active messages, their time was smaller than other groups. Unfortunately, they have not yet had a chance to measure their minimal overhead.
Reference: [7] <author> Iftode, L., Li, K., and Petersen, K., </author> <title> "Memory Servers for Multicomputers", </title> <year> 1993. </year>
Reference: [8] <author> Felten, E.W. and Zahorjan, J., </author> <title> "Issues in the Implementation of a Remote Memory Paging System", </title> <month> March </month> <year> 1991. </year>
Reference: [9] <author> Fox, A.; Gauthier, P.; Schuett, A., </author> <title> "Software Techniques for Improving MPP Bulk Transfer Performance", </title> <month> November </month> <year> 1994. </year>
Reference: [10] <author> Mainwaring, A., Wright, K., Yoshikawa, C., </author> <title> "The Design and Implementation of a Network RAM Prototype", </title> <month> November </month> <year> 1994. </year>
Reference-contexts: After examining these choices, we decided to do a user-level implementation. We believed that explicit program management would be to hard to convince people to use, and that modifying the kernel or building a network interface would not be practical during a single semester. Two other groups <ref> [10, 6] </ref> were already doing implementations as device drivers, so a user level implementation would allow for comparisons. We felt that the portability advantages, and the lower risk to the operating system made our solution attractive for both experimentation and use. <p> We expect the time for the faster machines will drop once a more efficient protocol than TCP is used. We attempted to compare our non-communication overhead with the measurements of other groups. Mainwaring, Wright and Yoshikawa <ref> [10] </ref> measured an overhead of about 1 ms for their implementation of a device driver plus process for Solaris 2.3. Chan and Hsu [6] measured a total time of about 3 ms to retrieve a page in their implementation on Solaris 2.3. <p> At the device driver level there is no notion of what pages are being sent out, so Mainwaring, et. al <ref> [10] </ref> had trouble with OS code being paged out.
Reference: [11] <author> Mc Namee, D.; Armstrong, K. </author> <title> "Extending the Mach external pager interface to accomodate user-level page replaceemnt policies." </title> <booktitle> USENIX Workshop Proceedings: Mach. </booktitle> <year> 1990. </year>
Reference-contexts: This solution is possible in the operating system Mach <ref> [11] </ref>, which allows a user level program to handle moving pages to and from second-level storage. The dependence on Mach makes this solution rather un-portable. This solution's overhead is probably similar to the overhead of the device driver and user-level process solution. * Device Driver.
Reference: [12] <author> Nguyen, G. and Oza N., </author> <title> "On the Use of Network DRAM in LAPACK Programs", </title> <month> November </month> <year> 1994. </year>
Reference: [13] <author> Nitzberg, B. and Lo, V., </author> <title> "Distributed Shared Memory: A Survey of Issues and Algorithms", </title> <month> August </month> <year> 1991. </year>
Reference: [14] <author> Shi, J.; Xi, J. </author> <title> "Paging across network: a study of queuing effect", </title> <month> November </month> <year> 1994. </year> <month> 12 </month>
References-found: 14

