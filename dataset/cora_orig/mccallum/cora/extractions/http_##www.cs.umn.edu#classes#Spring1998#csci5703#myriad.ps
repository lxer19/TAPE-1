URL: http://www.cs.umn.edu/classes/Spring1998/csci5703/myriad.ps
Refering-URL: http://www.cs.umn.edu/classes/Spring1998/csci5703/
Root-URL: http://www.cs.umn.edu
Title: Myriad: Design and Implementation of a Federated Database Prototype  
Author: Ee-Peng Lim, San-Yih Hwang, Jaideep Srivastava Dave Clements, M. Ganesh 
Note: All correspondence should be directed to Professor Jaideep Srivastava  
Address: 4-192 EE/CS Bldg, 200 Union St. SE Minneapolis, MN 55455  
Affiliation: Department of Computer Science, University of Minnesota  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Ahmed, P.D. Smedt, W. Du, W. Kent, M. Ketabchi, W.A. Litwin, A. Rafii, and M-C. Shan. </author> <title> The pegasus heterogeneous multidatabase system. </title> <booktitle> IEEE Computer, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: In Multidatabase [21], there is no integrated schema over local databases. The result of processing a global query is presented as a set of relations, each of which corresponds to the result of a local query decomposed from the global query. Multidatabase also does not provide transaction management. Pegasus <ref> [1] </ref> is an ongoing project at HP Labs which focuses on use an object-oriented data model to integrate local databases. [1] does not describe the transaction management approach adopted by Pegasus. Interbase [7] provides a tool-based interface to execute global transactions without violating the autonomy of local DBMSs. <p> Multidatabase also does not provide transaction management. Pegasus <ref> [1] </ref> is an ongoing project at HP Labs which focuses on use an object-oriented data model to integrate local databases. [1] does not describe the transaction management approach adopted by Pegasus. Interbase [7] provides a tool-based interface to execute global transactions without violating the autonomy of local DBMSs. <p> M Y R I A D Q U E R Y F O R M U L A T O R ============================================= <ref> [1] </ref> START_SESSION [2] BEGIN_TRANS [3] EXEC_QUERY [4] COMMIT [5] ABORT_TRANS [6] END_SESSION [7] SHUT_DOWN [8] QUIT option: 3 Please input your SQL query followed by semicolon 1&gt;>SELECT R.RNAME, R.PHONE, R.WDAYHRS, R.WENDHRS FROM RES R, MENU M, BUFFET B 2&gt;> WHERE R.RNAME=M.RNAME AND R.RNAME=B.RNAME AND R.RATING=5 AND 3&gt;>M.SPICINESS='strong'; The following is the
Reference: [2] <author> R. K. Batra, M. Rusinkiewicz, and D. Georgakopoulos. </author> <title> Decentralized deadlock-free concur-rency control method for multidatabase transactions. </title> <booktitle> In Proc. of the 12'th Int'l Conf. on Distributed Computing Systems, </booktitle> <year> 1992. </year>
Reference-contexts: M Y R I A D Q U E R Y F O R M U L A T O R ============================================= [1] START_SESSION <ref> [2] </ref> BEGIN_TRANS [3] EXEC_QUERY [4] COMMIT [5] ABORT_TRANS [6] END_SESSION [7] SHUT_DOWN [8] QUIT option: 3 Please input your SQL query followed by semicolon 1&gt;>SELECT R.RNAME, R.PHONE, R.WDAYHRS, R.WENDHRS FROM RES R, MENU M, BUFFET B 2&gt;> WHERE R.RNAME=M.RNAME AND R.RNAME=B.RNAME AND R.RATING=5 AND 3&gt;>M.SPICINESS='strong'; The following is the query result: <p> Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [6, 5, 24, 25, 10, 16, 11, 23, 2, 14] </ref>. Not until recently did some researchers start to investigate the relative performance of the various proposed algorithms [13]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed. For those algorithms that employ distributed concurrency control (e.g. <ref> [2, 12] </ref>), each of them can be realized by the cooperation between FTM and FTAs. GCC, in this case, is not used. Many of the proposed algorithms put restrictions on the global transaction model so as to achieve consistent execution or prevent global deadlocks. <p> For example, some algorithms require a global transaction to declare the sites it will access at the begin-transaction statement (e.g. [5, 10, 23]. Others require no value dependency between subtransactions (e.g. <ref> [9, 2, 14] </ref>). While the applicability of restricted transaction models depends on the kinds of federated DB applications, our transaction management components can realize any of the restricted transaction models as well as the standard transaction model, in which no such restrictions are imposed.
Reference: [3] <author> B. Beizer. </author> <title> Software Testing Techniques. </title> <publisher> Van Nostrand Reinhold, </publisher> <year> 1983. </year>
Reference-contexts: M Y R I A D Q U E R Y F O R M U L A T O R ============================================= [1] START_SESSION [2] BEGIN_TRANS <ref> [3] </ref> EXEC_QUERY [4] COMMIT [5] ABORT_TRANS [6] END_SESSION [7] SHUT_DOWN [8] QUIT option: 3 Please input your SQL query followed by semicolon 1&gt;>SELECT R.RNAME, R.PHONE, R.WDAYHRS, R.WENDHRS FROM RES R, MENU M, BUFFET B 2&gt;> WHERE R.RNAME=M.RNAME AND R.RNAME=B.RNAME AND R.RATING=5 AND 3&gt;>M.SPICINESS='strong'; The following is the query result: | Jaideep <p> As mentioned earlier, we have built some tools for performing module testing. These tools helped us to simulate the missing the functional components and allow us to perform white box testing <ref> [3] </ref>. Lastly, we note that the project schedule has helped us greatly in monitoring the progress of our development efforts. However, we also experienced several difficulties in keeping our actual development exactly on schedule.
Reference: [4] <author> Y. Breibart, W. Litwin, and A. Silberschatz. </author> <title> Deadlock problems in a multidatabase environment. </title> <booktitle> In Proceedings of COMPCON, </booktitle> <year> 1991. </year>
Reference-contexts: M Y R I A D Q U E R Y F O R M U L A T O R ============================================= [1] START_SESSION [2] BEGIN_TRANS [3] EXEC_QUERY <ref> [4] </ref> COMMIT [5] ABORT_TRANS [6] END_SESSION [7] SHUT_DOWN [8] QUIT option: 3 Please input your SQL query followed by semicolon 1&gt;>SELECT R.RNAME, R.PHONE, R.WDAYHRS, R.WENDHRS FROM RES R, MENU M, BUFFET B 2&gt;> WHERE R.RNAME=M.RNAME AND R.RNAME=B.RNAME AND R.RATING=5 AND 3&gt;>M.SPICINESS='strong'; The following is the query result: | Jaideep Srivastava | <p> Therefore, some mechanisms to detect and resolve global deadlocks are required. Unlike traditional distributed database systems, FDBSs cannot obtain the exact data conflict relationship among global transactions due to autonomy. Thus, timeout is needed to establish the potential conflict relationship among global transactions <ref> [4, 26] </ref>. A timeout period is associated with each query submitted to the local DBMS.
Reference: [5] <author> Y. Breitbart and A. Silberschatz. </author> <title> Multidatabase update issues. </title> <booktitle> In Proc. of ACM SIGMOD Int'l. Conf. on Management of Data, </booktitle> <year> 1988. </year>
Reference-contexts: M Y R I A D Q U E R Y F O R M U L A T O R ============================================= [1] START_SESSION [2] BEGIN_TRANS [3] EXEC_QUERY [4] COMMIT <ref> [5] </ref> ABORT_TRANS [6] END_SESSION [7] SHUT_DOWN [8] QUIT option: 3 Please input your SQL query followed by semicolon 1&gt;>SELECT R.RNAME, R.PHONE, R.WDAYHRS, R.WENDHRS FROM RES R, MENU M, BUFFET B 2&gt;> WHERE R.RNAME=M.RNAME AND R.RNAME=B.RNAME AND R.RATING=5 AND 3&gt;>M.SPICINESS='strong'; The following is the query result: | Jaideep Srivastava | 625-4012 | <p> Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [6, 5, 24, 25, 10, 16, 11, 23, 2, 14] </ref>. Not until recently did some researchers start to investigate the relative performance of the various proposed algorithms [13]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms can be classified based on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [6, 5, 24, 25, 10, 16, 11, 23, 14] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed. <p> GCC, in this case, is not used. Many of the proposed algorithms put restrictions on the global transaction model so as to achieve consistent execution or prevent global deadlocks. For example, some algorithms require a global transaction to declare the sites it will access at the begin-transaction statement (e.g. <ref> [5, 10, 23] </ref>. Others require no value dependency between subtransactions (e.g. [9, 2, 14]).
Reference: [6] <author> Y. Breitbart, A. Silberschatz, and G. Thompson. </author> <title> Update mechanism for multidatabase systems. </title> <journal> IEEE Data Engineering, </journal> <volume> 10(3), </volume> <year> 1987. </year>
Reference-contexts: M Y R I A D Q U E R Y F O R M U L A T O R ============================================= [1] START_SESSION [2] BEGIN_TRANS [3] EXEC_QUERY [4] COMMIT [5] ABORT_TRANS <ref> [6] </ref> END_SESSION [7] SHUT_DOWN [8] QUIT option: 3 Please input your SQL query followed by semicolon 1&gt;>SELECT R.RNAME, R.PHONE, R.WDAYHRS, R.WENDHRS FROM RES R, MENU M, BUFFET B 2&gt;> WHERE R.RNAME=M.RNAME AND R.RNAME=B.RNAME AND R.RATING=5 AND 3&gt;>M.SPICINESS='strong'; The following is the query result: | Jaideep Srivastava | 625-4012 | 0800-1600 | <p> Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [6, 5, 24, 25, 10, 16, 11, 23, 2, 14] </ref>. Not until recently did some researchers start to investigate the relative performance of the various proposed algorithms [13]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms can be classified based on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [6, 5, 24, 25, 10, 16, 11, 23, 14] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed.
Reference: [7] <author> O.A. Bukhres, J. Chen, W. Du, and A.K. Elmagarmid. </author> <title> Interbase: An execution environment for heterogeneous software systems. </title> <booktitle> IEEE Computer, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: Multidatabase also does not provide transaction management. Pegasus [1] is an ongoing project at HP Labs which focuses on use an object-oriented data model to integrate local databases. [1] does not describe the transaction management approach adopted by Pegasus. Interbase <ref> [7] </ref> provides a tool-based interface to execute global transactions without violating the autonomy of local DBMSs. <p> M Y R I A D Q U E R Y F O R M U L A T O R ============================================= [1] START_SESSION [2] BEGIN_TRANS [3] EXEC_QUERY [4] COMMIT [5] ABORT_TRANS [6] END_SESSION <ref> [7] </ref> SHUT_DOWN [8] QUIT option: 3 Please input your SQL query followed by semicolon 1&gt;>SELECT R.RNAME, R.PHONE, R.WDAYHRS, R.WENDHRS FROM RES R, MENU M, BUFFET B 2&gt;> WHERE R.RNAME=M.RNAME AND R.RNAME=B.RNAME AND R.RATING=5 AND 3&gt;>M.SPICINESS='strong'; The following is the query result: | Jaideep Srivastava | 625-4012 | 0800-1600 | 1200-1600 |
Reference: [8] <author> U. Dayal. </author> <booktitle> Query Processing in Multidatabase Systems, </booktitle> <pages> pages 81-108. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: It acts as a testbed for validating and comparing solutions to various FDBS problems such as transaction management and query optimization. Lastly, it also provides an environment for realizing new federated database applications. Related work A number of FDBS related prototypes have been or are being developed. The Multibase <ref> [8] </ref> project developed the concept of generalized hierarchies to integrate heterogeneous schemas. It focused on the query processing capability but not on transaction management issues. In Multidatabase [21], there is no integrated schema over local databases. <p> M Y R I A D Q U E R Y F O R M U L A T O R ============================================= [1] START_SESSION [2] BEGIN_TRANS [3] EXEC_QUERY [4] COMMIT [5] ABORT_TRANS [6] END_SESSION [7] SHUT_DOWN <ref> [8] </ref> QUIT option: 3 Please input your SQL query followed by semicolon 1&gt;>SELECT R.RNAME, R.PHONE, R.WDAYHRS, R.WENDHRS FROM RES R, MENU M, BUFFET B 2&gt;> WHERE R.RNAME=M.RNAME AND R.RNAME=B.RNAME AND R.RATING=5 AND 3&gt;>M.SPICINESS='strong'; The following is the query result: | Jaideep Srivastava | 625-4012 | 0800-1600 | 1200-1600 | SYSTEM IMPLEMENTATION
Reference: [9] <author> W. Du and A. Elmagarmid. </author> <title> Quasi serializability: A correctness criterion for global concurrency control in interbase. </title> <booktitle> In Proc. of the 15th Int'l Conf. on Very Large Data Bases, </booktitle> <year> 1989. </year> <month> 43 </month>
Reference-contexts: For example, some algorithms require a global transaction to declare the sites it will access at the begin-transaction statement (e.g. [5, 10, 23]. Others require no value dependency between subtransactions (e.g. <ref> [9, 2, 14] </ref>). While the applicability of restricted transaction models depends on the kinds of federated DB applications, our transaction management components can realize any of the restricted transaction models as well as the standard transaction model, in which no such restrictions are imposed.
Reference: [10] <author> A. K. Elmagarmid and W. Du. </author> <title> A paradigm for concurrency control in heterogeneous dis-tributed database system. </title> <booktitle> In Proc. of the 6th Int'l. Conf. on Data Engineering, </booktitle> <year> 1990. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [6, 5, 24, 25, 10, 16, 11, 23, 2, 14] </ref>. Not until recently did some researchers start to investigate the relative performance of the various proposed algorithms [13]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms can be classified based on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [6, 5, 24, 25, 10, 16, 11, 23, 14] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed. <p> GCC, in this case, is not used. Many of the proposed algorithms put restrictions on the global transaction model so as to achieve consistent execution or prevent global deadlocks. For example, some algorithms require a global transaction to declare the sites it will access at the begin-transaction statement (e.g. <ref> [5, 10, 23] </ref>. Others require no value dependency between subtransactions (e.g. [9, 2, 14]).
Reference: [11] <author> D. Georgakopoulos, M. Rusinkiewicz, and A. Sheth. </author> <title> Serializability of multidatabase transactions through forced local conflicts. </title> <booktitle> In Proc. of the 7th Int'l. Conf. on Data Engineering, </booktitle> <year> 1991. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [6, 5, 24, 25, 10, 16, 11, 23, 2, 14] </ref>. Not until recently did some researchers start to investigate the relative performance of the various proposed algorithms [13]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms can be classified based on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [6, 5, 24, 25, 10, 16, 11, 23, 14] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed.
Reference: [12] <author> J. Huang, S.-Y. Hwang, and J. Srivastava. </author> <title> Distributed forward optimistic concurrency control for federated database systems. </title> <type> Technical report, </type> <institution> Honeywell Technology Center, 3660 Technology Drive, Minneapolis, Minnesota, </institution> <year> 1992. </year>
Reference-contexts: The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed. For those algorithms that employ distributed concurrency control (e.g. <ref> [2, 12] </ref>), each of them can be realized by the cooperation between FTM and FTAs. GCC, in this case, is not used. Many of the proposed algorithms put restrictions on the global transaction model so as to achieve consistent execution or prevent global deadlocks.
Reference: [13] <author> J. Huang, S.-Y. Hwang, and J. Srivastava. </author> <title> Concurrency control in federated database systems: A performance study. </title> <type> Technical report, </type> <institution> Honeywell Technology Center, 3660 Technology Drive, Minneapolis, Minnesota, </institution> <year> 1993. </year>
Reference-contexts: Many algorithms have been proposed [6, 5, 24, 25, 10, 16, 11, 23, 2, 14]. Not until recently did some researchers start to investigate the relative performance of the various proposed algorithms <ref> [13] </ref>. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. Therefore, one of our design choices in transaction management is to make our architecture flexible to allow various algorithms can be implemented and tested on it.
Reference: [14] <author> S.-Y. Hwang, J. Huang, and J. Srivastava. </author> <title> Concurrency control in federated databases: A dynamic approach. </title> <booktitle> In Proc. of the 2nd Int'l Conf. on Information and Knowledge Management, </booktitle> <year> 1993. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [6, 5, 24, 25, 10, 16, 11, 23, 2, 14] </ref>. Not until recently did some researchers start to investigate the relative performance of the various proposed algorithms [13]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms can be classified based on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [6, 5, 24, 25, 10, 16, 11, 23, 14] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed. <p> For example, some algorithms require a global transaction to declare the sites it will access at the begin-transaction statement (e.g. [5, 10, 23]. Others require no value dependency between subtransactions (e.g. <ref> [9, 2, 14] </ref>). While the applicability of restricted transaction models depends on the kinds of federated DB applications, our transaction management components can realize any of the restricted transaction models as well as the standard transaction model, in which no such restrictions are imposed.
Reference: [15] <author> S.-Y. Hwang, J. Srivastava, and J. Li. </author> <title> Transaction recovery in federated autonomous databases. Distributed and Parallel Databases, </title> <note> An Interational Journal, to appear, </note> <year> 1993. </year>
Reference-contexts: In case a local DBMS does not support prepare to commit state, the associated gateway simulates it by logging the write operations after a subtransaction enters its prepared state and re-submitting these operations if failure occurs. Several algorithms proposed in the literature (e.g. see <ref> [15] </ref>) can be used to control the resubmission. However, the simulated 2PC mechanisms do not come for free.
Reference: [16] <author> Y. Leu and A. K. Elmagarmid. </author> <title> A hierarchical approach to concurrency control for multi-databases. </title> <booktitle> In Proc. of the 2nd Int'l Symposium on Databases in Parallel and Distributed Systems, </booktitle> <year> 1990. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [6, 5, 24, 25, 10, 16, 11, 23, 2, 14] </ref>. Not until recently did some researchers start to investigate the relative performance of the various proposed algorithms [13]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms can be classified based on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [6, 5, 24, 25, 10, 16, 11, 23, 14] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed.
Reference: [17] <author> E.-P. Lim and J. Srivastava. </author> <title> Query optimization/processing in federated database systems. </title> <booktitle> In Conference of Information and Knowledge Management, </booktitle> <year> 1993. </year>
Reference-contexts: The design of Myriad query subsystem recognizes these limitations, and focuses on adopting useful heuristics to generate execution plans that reduce the amount of local data accesses. We also introduce an additional statistics collection step into query processing so that cost-based optimization can be performed <ref> [17] </ref>. The following describes in detail the design and implementation of functional components in the Myriad query subsystem. Gateway Myriad gateways support a relational interface to local DBs using SQL.
Reference: [18] <author> E.-P. Lim, J. Srivastava, and S.-Y. Hwang. </author> <title> An algebraic transformation framework for multi-database queries. </title> <type> Technical Report TR 93-51, </type> <institution> Dept. of Comp. Sc., U of Minnesota, </institution> <year> 1993. </year>
Reference-contexts: Other tuples which do not satisfy the predicate can still be retained in the result by padding NULL values to columns that do not exist in their export relations <ref> [18] </ref>. The resulting relation of a 2-way outerjoin retains all columns of the export relations. GAD is an operation designed to resolve attribute value conflicts. It allows attributes in an integrated relation to be defined as derivations of attributes from the export relations. <p> We have therefore developed an algebraic transformation framework involving outerjoin, GAD and other relational operations. The extended set of transformation rules explores new opportunities of query transformation by incorporating useful semantics about user-defined functions (of GAD operations) and query predicates (see <ref> [18] </ref> for a detailed discussion) Eventually, the FQM decomposes the optimized query execution plan into one or more query fragments. Each query fragment is assigned to either a FQA or gateway.
Reference: [19] <author> E.-P. Lim, J. Srivastava, S. Prabhakar, and J. Richardson. </author> <title> Entity identification problem in database integration. </title> <booktitle> Proc. of 9th IEEE Data Eng. Conf., </booktitle> <year> 1993. </year>
Reference-contexts: It greatly simplifies the propagation of events and messages through the system and the handling of asynchronous events such as local database aborts. Data Integration Integration Operations In Myriad, we have focused on two instance-level integration problems, namely the entity identification <ref> [19] </ref> and attribute value conflict [20] problems. The first is the problem of identifying record instances from different export databases which correspond to the same real-world entity. The second arises when the attribute values in different databases, modeling the same property of a real-world entity, do not match.
Reference: [20] <author> E.-P. Lim, J. Srivastava, and S. Shekhar. </author> <title> Resolving attribute incompatibility in database integration: An evidential reasoning approach. </title> <booktitle> Proc. of 10th IEEE Data Eng. Conf., </booktitle> <year> 1994. </year> <month> 44 </month>
Reference-contexts: It greatly simplifies the propagation of events and messages through the system and the handling of asynchronous events such as local database aborts. Data Integration Integration Operations In Myriad, we have focused on two instance-level integration problems, namely the entity identification [19] and attribute value conflict <ref> [20] </ref> problems. The first is the problem of identifying record instances from different export databases which correspond to the same real-world entity. The second arises when the attribute values in different databases, modeling the same property of a real-world entity, do not match.
Reference: [21] <author> W. Litwin and A. Abdellatif. </author> <title> Multidatabase interoperability. </title> <booktitle> IEEE Computer, </booktitle> <month> December </month> <year> 1986. </year>
Reference-contexts: Related work A number of FDBS related prototypes have been or are being developed. The Multibase [8] project developed the concept of generalized hierarchies to integrate heterogeneous schemas. It focused on the query processing capability but not on transaction management issues. In Multidatabase <ref> [21] </ref>, there is no integrated schema over local databases. The result of processing a global query is presented as a set of relations, each of which corresponds to the result of a local query decomposed from the global query. Multidatabase also does not provide transaction management. <p> Federation users can freely use the data manipulation operations provided by the FDBS to integrate data from export relations in a manner that best suits their precise needs. An example of a loosely-coupled FDBS is the Multidatabase project <ref> [21] </ref>. 17 Advantages of the loosely-coupled approach include: (a) no DBA effort is required to resolve semantic heterogeneity among local databases; and (b) this does not require the DBA to anticipate the needs of federation users.
Reference: [22] <author> J. Martin. </author> <title> IDMS/R : concepts, design, and programming. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: Gateway Myriad gateways support a relational interface to local DBs using SQL. This design choice was made mainly because of the popularity of SQL gateways for non-relational DBMSs and relational but non-SQL DBMSs, e.g. IDMS/R <ref> [22] </ref>, Ingres [29], etc. By adopting SQL as the uniform interface to all local DBMSs, we achieve portability and interoperability in the Myriad design. Three kinds of database services are provided by Myriad gateways. They are access control, transaction services, and query services.
Reference: [23] <author> S. Mehrotra, R. Rastogi, H. F. Korth, and A. Silberschatz. </author> <title> The concurrency control problem in multidatabases: Characteristics and solutions. </title> <booktitle> In Proc. of ACM SIGMOD Int'l. Conf. on Management of Data, </booktitle> <year> 1992. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [6, 5, 24, 25, 10, 16, 11, 23, 2, 14] </ref>. Not until recently did some researchers start to investigate the relative performance of the various proposed algorithms [13]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms can be classified based on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [6, 5, 24, 25, 10, 16, 11, 23, 14] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed. <p> GCC, in this case, is not used. Many of the proposed algorithms put restrictions on the global transaction model so as to achieve consistent execution or prevent global deadlocks. For example, some algorithms require a global transaction to declare the sites it will access at the begin-transaction statement (e.g. <ref> [5, 10, 23] </ref>. Others require no value dependency between subtransactions (e.g. [9, 2, 14]).
Reference: [24] <author> C. Pu. Superdatabases: </author> <title> Transactions across database boundaries. </title> <journal> IEEE Data Engineering, </journal> <volume> 10(3), </volume> <year> 1987. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [6, 5, 24, 25, 10, 16, 11, 23, 2, 14] </ref>. Not until recently did some researchers start to investigate the relative performance of the various proposed algorithms [13]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms can be classified based on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [6, 5, 24, 25, 10, 16, 11, 23, 14] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed.
Reference: [25] <author> C. Pu. </author> <title> Superdatabases for composition of heterogeneous databases. </title> <booktitle> In Proc. of the 4th Int'l Conf. on Data Engineering, </booktitle> <year> 1988. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [6, 5, 24, 25, 10, 16, 11, 23, 2, 14] </ref>. Not until recently did some researchers start to investigate the relative performance of the various proposed algorithms [13]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms can be classified based on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [6, 5, 24, 25, 10, 16, 11, 23, 14] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed.
Reference: [26] <author> P. Scheuermann and H. Tung. </author> <title> A deadlock checkpointing scheme for multidatabase systems. </title> <booktitle> In Proc. of the 2nd Int'l Workshop on Research Issues on Data Engineering: Transaction and Query Processing, </booktitle> <year> 1992. </year>
Reference-contexts: Therefore, some mechanisms to detect and resolve global deadlocks are required. Unlike traditional distributed database systems, FDBSs cannot obtain the exact data conflict relationship among global transactions due to autonomy. Thus, timeout is needed to establish the potential conflict relationship among global transactions <ref> [4, 26] </ref>. A timeout period is associated with each query submitted to the local DBMS.
Reference: [27] <author> P.G. Selinger, M.M. Astrahan, D.D. Chamberlin, R.A. Lorie, and T.G. Price. </author> <title> Access path selection in a relational database management system. </title> <booktitle> In Proc. of the ACM SIGMOD Conference, </booktitle> <pages> pages 23-34, </pages> <year> 1979. </year>
Reference-contexts: The former is performed by the FDBS while the latter by the local DBMSs. * Availability of statistical information and local cost model: The success of query optimization often depends on the accuracy of knowledge about the statistics on referenced relations and the execution cost model of the local DBMSs <ref> [27] </ref>. In a FDBS environment, some local DBMSs may not have, or may not supply (due to autonomy) sufficient information about database statistics, DBMS workloads, and cost models. This may seriously restrict the opportunities for performing global query optimization.
Reference: [28] <author> A.P. Sheth and J.A. Larson. </author> <title> Federated database systems for managing distributed heterogeneous, and autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3), </volume> <month> September </month> <year> 1990. </year>
Reference-contexts: Currently, a graphical schema integration tool, as shown in the previous section, has being designed and implemented to assist the Myriad DBAs in generating a global schema mapping Loosely-coupled vs. Tightly-coupled FDBSs The Myriad integration framework demonstrates the merits of both loosely- and tightly-coupled FDBS <ref> [28] </ref>. In a loosely-coupled FDBS, the federation DBAs do not attempt to integrate export relations from different local databases. Federation users can freely use the data manipulation operations provided by the FDBS to integrate data from export relations in a manner that best suits their precise needs.
Reference: [29] <author> D. Simonson and D. Benningfield. </author> <title> Ingres gateways: Transparent heterogeneous sql access. </title> <journal> Data Engineering Bulletin, </journal> <month> June </month> <year> 1990. </year> <month> 45 </month>
Reference-contexts: Gateway Myriad gateways support a relational interface to local DBs using SQL. This design choice was made mainly because of the popularity of SQL gateways for non-relational DBMSs and relational but non-SQL DBMSs, e.g. IDMS/R [22], Ingres <ref> [29] </ref>, etc. By adopting SQL as the uniform interface to all local DBMSs, we achieve portability and interoperability in the Myriad design. Three kinds of database services are provided by Myriad gateways. They are access control, transaction services, and query services.
References-found: 29

