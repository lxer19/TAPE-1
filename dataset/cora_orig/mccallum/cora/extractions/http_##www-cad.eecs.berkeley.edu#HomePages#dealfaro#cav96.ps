URL: http://www-cad.eecs.berkeley.edu/HomePages/dealfaro/cav96.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/dealfaro/papers.html
Root-URL: http://www.cs.berkeley.edu
Title: Temporal Verification by Diagram Transformations  
Author: Luca de Alfaro and Zohar Manna 
Address: Stanford, CA 94305, USA  
Affiliation: Computer Science Department Stanford University  
Note: In proceedings of CAV'96, LNCS, Springer-Verlag, July/August 1996.  
Abstract: This paper presents a methodology for the verification of temporal properties of systems based on the gradual construction and algorithmic checking of fairness diagrams. Fairness diagrams correspond to abstractions of the system and its progress properties, and have a simple graphical representation. In the proposed methodology, a proof of a temporal property consists of a chain of diagram transformations, starting from a diagram representing the original system and ending with a diagram that either corresponds directly to the specification, or that can be shown to satisfy it by purely algorithmic methods. Each diagram transformation captures a natural step of the gradual process of system analysis and proof discovery. The structure of fairness diagrams simplifies reasoning about progress properties, and the graphical representation provided by the diagrams enables the user to direct the construction of the proof. The resulting methodology is complete for proving specifications written in first-order linear-time temporal logic, provided no temporal operator appears in the scope of a quantifier.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> I.A. Browne, Z. Manna, and H.B. Sipma. </author> <title> Generalized verification diagrams. </title> <booktitle> In Found. of Software Technology and Theoretical Comp. Sci., volume 1026 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 484-498. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: A related approach to the proof of temporal properties of systems is based on the use of verification diagrams <ref> [10, 1] </ref>. Like fairness diagrams, verification diagrams are graphs labeled with first-order assertions, and enable the proof of general temporal properties.
Reference: 2. <author> L. de Alfaro and Z. Manna. </author> <title> Temporal verification by diagram transformations. </title> <type> Technical report, </type> <institution> Stanford University, </institution> <year> 1996. </year>
Reference-contexts: The proof of this theorem is rather lengthy, and follows the general line of the completeness proof for reactivity and response rules presented in [7]. The complete proof is given in <ref> [2] </ref>. To state the completeness theorem for transition systems we need an additional definition. Definition 17.
Reference: 3. <author> O. Grumberg and D.E. </author> <title> Long. Model checking and modular verification. </title> <journal> ACM Trans. Prog. Lang. Sys., </journal> <volume> 16(3) </volume> <pages> 843-871, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The resulting methodology is complete for proving specifications written in first-order linear-time temporal logic, provided no temporal operator appears in the scope of a quantifier. Related work. Methods based on stepwise system transformations for the study of branching-time temporal properties of finite-state systems have been proposed in <ref> [3] </ref>, and the use of simulation relations to study the temporal behavior of fair transition systems has been discussed in [4]. A related approach to the proof of temporal properties of systems is based on the use of verification diagrams [10, 1]. <p> Theorem 3. For an FTS S, L (S) = L (fd (S)). 3 Fairness Diagram Transformations The temporal behavior of a diagram is studied by means of diagram transformations. These transformations preserve containment of behaviors, and they are reminiscent of the preorders of <ref> [3] </ref>. If a diagram A can be transformed into a diagram B by using one of the transformations, we write A ) B. Since the transformations preserve containment of behaviors, A ) B implies L (A) L (B).
Reference: 4. <author> Y. Kesten, Z. Manna, and A. Pnueli. </author> <title> Temporal verification of simulation and refinement. </title> <booktitle> In Proc. of the REX Workshop "A Decade of Concurrency", volume 803 of Lect. Notes in Comp. Sci., </booktitle> <pages> pages 273-346. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Related work. Methods based on stepwise system transformations for the study of branching-time temporal properties of finite-state systems have been proposed in [3], and the use of simulation relations to study the temporal behavior of fair transition systems has been discussed in <ref> [4] </ref>. A related approach to the proof of temporal properties of systems is based on the use of verification diagrams [10, 1]. Like fairness diagrams, verification diagrams are graphs labeled with first-order assertions, and enable the proof of general temporal properties.
Reference: 5. <author> L. Lamport. </author> <title> The temporal logic of actions. </title> <journal> ACM Trans. Prog. Lang. Sys., </journal> <volume> 16(3) </volume> <pages> 872-923, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: They can also be used as a graphical specification language. Since both vertices and edges are labeled with first-order assertions, fairness diagrams have the advantage over traditional temporal logic (and similarly to TLA <ref> [5] </ref>) of providing a simpler representation for specifications that involve conditions on both system states and actions. While we have given completeness results on the existence of chains of transformations, we have not discussed how to obtain guidance for their construction.
Reference: 6. <author> O. Lichtenstein and A. Pnueli. </author> <title> Checking that finite state concurrent programs satisfy their linear specifications. </title> <booktitle> In Proc. 12th ACM Symp. Princ. of Prog. Lang., </booktitle> <pages> pages 97-107, </pages> <year> 1985. </year>
Reference-contexts: Let M be a deterministic Streett automaton such that L (M ) = L (). This automaton can be constructed from with the methods explained in <ref> [6, 11, 12] </ref>. We can thus formulate the first proof strategy. Proof Strategy 1. To prove S j= for FTS S and a formula 2 T L s , construct a chain of transformations fd (S) fl Theorem 21.
Reference: 7. <author> Z. Manna and A. Pnueli. </author> <title> Completing the temporal picture. </title> <journal> Theor. Comp. Sci., </journal> <volume> 83(1) </volume> <pages> 97-130, </pages> <year> 1991. </year>
Reference-contexts: To prove that a constraint is compatible with a diagram, we present verification rules. These rules are related to the rules for response and reactivity properties presented in <ref> [7] </ref>. The structure of the constraints enables two simplifications. First, separate rules for response and reactivity properties are not needed, since constraints can represent both types of properties. Second, it is possible to decompose the rules of [7] into simpler ones while retaining completeness. <p> rules are related to the rules for response and reactivity properties presented in <ref> [7] </ref>. The structure of the constraints enables two simplifications. First, separate rules for response and reactivity properties are not needed, since constraints can represent both types of properties. Second, it is possible to decompose the rules of [7] into simpler ones while retaining completeness. We present three rules for proving the compatibility of constraints. The first rule shows the compatibility of a constraint independently from other constraints. <p> The proof of this theorem is rather lengthy, and follows the general line of the completeness proof for reactivity and response rules presented in <ref> [7] </ref>. The complete proof is given in [2]. To state the completeness theorem for transition systems we need an additional definition. Definition 17.
Reference: 8. <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: Fairness diagrams are graphs whose vertices are labeled by first-order assertions and whose edges are labeled by first-order transition relations. Their progress properties are represented by fairness constraints, which generalize the classical concepts of fairness <ref> [8] </ref>. <p> The chosen names J , C and G reflect the notions of Justice set, Compassion set and Gratify action that describe fairness of transition systems in <ref> [8] </ref>. A fair transition system (FTS), defined as in [9], can be represented by a diagram having only one vertex. Construction 2 (from FTS to diagram). <p> Proving Linear Temporal Logic Properties Let T L s be the class of temporal formulas obtained by combining first-order logic formulas using propositional connectives, the future temporal operators e (next), 2 (always), 3 (eventually), U (until), and of the corresponding past ones e , 2 - , 3 and S <ref> [8] </ref>. Note that in a formula 2 T L s , no temporal operator occurs in the scope of a quantifier.
Reference: 9. <author> Z. Manna and A. Pnueli. </author> <title> Models for reactivity. </title> <journal> Acta Informatica, </journal> <volume> 30 </volume> <pages> 609-678, </pages> <year> 1993. </year>
Reference-contexts: The chosen names J , C and G reflect the notions of Justice set, Compassion set and Gratify action that describe fairness of transition systems in [8]. A fair transition system (FTS), defined as in <ref> [9] </ref>, can be represented by a diagram having only one vertex. Construction 2 (from FTS to diagram).
Reference: 10. <author> Z. Manna and A. Pnueli. </author> <title> Temporal verification diagrams. </title> <booktitle> In TACS 94, Lect. Notes in Comp. </booktitle> <publisher> Sci. Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: A related approach to the proof of temporal properties of systems is based on the use of verification diagrams <ref> [10, 1] </ref>. Like fairness diagrams, verification diagrams are graphs labeled with first-order assertions, and enable the proof of general temporal properties.
Reference: 11. <author> S. Safra. </author> <title> On the complexity of !-automata. </title> <booktitle> In Proc. 29th IEEE Symp. </booktitle> <institution> Found. of Comp. Sci., </institution> <year> 1988. </year>
Reference-contexts: L (B) " L (N : ) = ; can be shown using algorithmic methods. The Streett automata used in the above methods are a first-order version of the classical ones <ref> [11] </ref>. Definition 19 (Streett automaton). <p> Let M be a deterministic Streett automaton such that L (M ) = L (). This automaton can be constructed from with the methods explained in <ref> [6, 11, 12] </ref>. We can thus formulate the first proof strategy. Proof Strategy 1. To prove S j= for FTS S and a formula 2 T L s , construct a chain of transformations fd (S) fl Theorem 21.
Reference: 12. <author> S. Safra and M.Y. Vardi. </author> <title> On !-automata and temporal logic. </title> <booktitle> In Proc. 21th ACM Symp. Theory of Comp., </booktitle> <pages> pages 127-137, </pages> <year> 1989. </year> <month> 12 </month>
Reference-contexts: Let M be a deterministic Streett automaton such that L (M ) = L (). This automaton can be constructed from with the methods explained in <ref> [6, 11, 12] </ref>. We can thus formulate the first proof strategy. Proof Strategy 1. To prove S j= for FTS S and a formula 2 T L s , construct a chain of transformations fd (S) fl Theorem 21.
References-found: 12

