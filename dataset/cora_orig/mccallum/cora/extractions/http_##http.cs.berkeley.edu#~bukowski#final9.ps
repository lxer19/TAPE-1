URL: http://http.cs.berkeley.edu/~bukowski/final9.ps
Refering-URL: http://http.cs.berkeley.edu/~bukowski/
Root-URL: 
Title: Object Associations A Simple and Practical Approach to Virtual 3D Manipulation  
Author: Richard W. Bukowski Carlo H. Sequin 
Address: Berkeley  
Affiliation: University of California at  
Abstract: This paper describes a software framework to aid in designing and implementing convenient manipulation behaviors for objects in a 3D virtual environment. A combination of almost realistic-looking pseudo-physical behavior and idealized goal-oriented properties, called object associations, is used to disambiguate the mapping of the 2D cursor motion on the display screen into an appropriate object motion in the 3D virtual world and to determine a valid and desirable final location for the objects to be placed. Objects selected for relocation actively look for nearby objects to associate and align themselves with; an automated implicit grouping mechanism also falls out from this process. Concept, structure, and our implementation of such an object association framework in the context of the Berkeley Soda Hall WALK-THRU environment are presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Baraff, D. </author> <title> Fast Contact Force Computation for Non-penetrating Rigid Bodies. </title> <booktitle> Proc. of SIGGRAPH '94 (Or-lando, </booktitle> <address> FL, </address> <month> Jul. </month> <year> 1994), </year> <pages> pp. 23-34. </pages>
Reference-contexts: Second, while it can emulate some of the behavior of a physical simulation of the objects in the environment <ref> [1, 7] </ref>, it can be less constraining than our every-day world; objects can pass through one another and remain in physically impossible non-equilibrium positions under the control of suitable associations, which may be application-specific or may depend on the editing mode. <p> We are currently experimenting with a prototype implementation of such a collision detection routine based on the Canny-Lin algorithm that quickly finds closest features in pairs of convex shapes <ref> [9, 1] </ref>. We have integrated these procedures with the user interface layer that controls all the major editing functions: selection, dynamic grouping, dragging, and detailed placement.
Reference: [2] <author> Barlow, M. </author> <title> Of Mice and 3D Input Devices. </title> <booktitle> Computer-Aided Engineering 12, </booktitle> <month> 4 (Apr. </month> <year> 1993), </year> <pages> pp. 54-56. </pages>
Reference-contexts: Typically, software solutions are used to map 2D cursor motion to limited 3D object space motion [12]. These can be cumbersome to use in complex environments, and do not address the fact that objects often require positioning with respect to objects around them. High-tech solutions such as the "SpaceBall" <ref> [2] </ref>, "DataGlove," 3D mice [15], or virtual 3D displays do not solve the problem either; precise placement of objects in three dimensions is hard - even in the real world unless we get help from the physical interactions of the objects we want to place.
Reference: [3] <author> Bier, </author> <title> E.A. Snap-Dragging in Three Dimensions. </title> <booktitle> Proc. of the 1990 Symposium on Interactive 3D Graphics (Snow-bird, </booktitle> <address> UT, </address> <month> Mar. </month> <year> 1990), </year> <pages> pp. 193-204. </pages>
Reference-contexts: This simplifies considerably the task of mapping 2D pointing to 3D motion. 3 Object Association Framework 3.1 Background Our approach borrows heavily from several paradigms developed in the realm of interactive computer graphics over the last decades. It first has notions of snap-dragging <ref> [3] </ref>, but without the need of explicitly dealing with visible alignment manifolds; most alignments are provided automatically by the association procedures rather than explicitly by the user.
Reference: [4] <author> Borning, A. </author> <title> The Programming Aspects of Thinglab, a Constraint-Oriented Simulation Laboratory. </title> <journal> ACM Trans. on Programming Languages and Systems 3, </journal> <volume> 4, </volume> <pages> pp. 353-387. </pages>
Reference-contexts: Third, while some associations could readily be described as constraints, our system does not require the rigid formality and associated solution machinery that one would find in a mechanism editor based on an underlying constraint system <ref> [11, 4, 10, 8, 6] </ref>.
Reference: [5] <author> Funkhouser, T.A. and Sequin, C.H. </author> <title> Adaptive Display Algorithm for Interactive Frame Rates during Visualization of Complex Virtual Environments. </title> <booktitle> Proc. of SIG-GRAPH '93 (Anaheim, </booktitle> <address> CA, </address> <month> Aug. </month> <year> 1993), </year> <pages> pp. 247-254. </pages>
Reference-contexts: Geometric and database toolkits allow high-level coding and ease of modification. Our object associations normally cause little computational overhead to the WALKTHRU system. This is an important concern, since keeping the response time of the system fast and interactive is a crucial aspect of its usability and user-friendliness <ref> [5] </ref>. The result is a technique that makes object placement quick and accurate, works with "drag-and-drop" as well as "cut and paste" interaction techniques, can provide desirable local object behavior and an automated grouping facility, and greatly reduces the need for multiple editing modes in the user interface.
Reference: [6] <author> Gleicher, M. Briar: </author> <title> A Constraint-Based Drawing Program. </title> <booktitle> Proc. of the ACM Conference on Human Factors in Computing Systems CHI '92 (Monterey, </booktitle> <address> CA, </address> <month> May </month> <year> 1992), </year> <pages> pp. 661-662. </pages>
Reference-contexts: Third, while some associations could readily be described as constraints, our system does not require the rigid formality and associated solution machinery that one would find in a mechanism editor based on an underlying constraint system <ref> [11, 4, 10, 8, 6] </ref>.
Reference: [7] <author> Hahn, J.K. </author> <title> Realistic Animation of Rigid Bodies. </title> <booktitle> Computer Graphics 22, </booktitle> <month> 4 (Aug. </month> <year> 1988), </year> <pages> pp. 299-208. </pages>
Reference-contexts: Second, while it can emulate some of the behavior of a physical simulation of the objects in the environment <ref> [1, 7] </ref>, it can be less constraining than our every-day world; objects can pass through one another and remain in physically impossible non-equilibrium positions under the control of suitable associations, which may be application-specific or may depend on the editing mode.
Reference: [8] <author> Helm, R., Huynh, T., Lassez, C., and Marriott, K. </author> <title> Linear Constraint Technology for Interactive Graphic Systems. </title> <booktitle> Proc. of Graphics Interface '92 (Vancouver, </booktitle> <address> BC, Canada, </address> <month> May </month> <year> 1992). </year>
Reference-contexts: Third, while some associations could readily be described as constraints, our system does not require the rigid formality and associated solution machinery that one would find in a mechanism editor based on an underlying constraint system <ref> [11, 4, 10, 8, 6] </ref>.
Reference: [9] <author> Lin, M.C. and Canny, J.F. </author> <title> A fast algorithm for incremental distance calculation. </title> <booktitle> International Conference on Robotics and Automation, IEEE (May 1991), </booktitle> <pages> pp. 1008-1014. </pages>
Reference-contexts: We are currently experimenting with a prototype implementation of such a collision detection routine based on the Canny-Lin algorithm that quickly finds closest features in pairs of convex shapes <ref> [9, 1] </ref>. We have integrated these procedures with the user interface layer that controls all the major editing functions: selection, dynamic grouping, dragging, and detailed placement.
Reference: [10] <author> Myers, </author> <title> B.A. Creating User Interfaces using Programming by Example, Visual Programming, and Constraints. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 12, </volume> <month> 2 (Apr. </month> <year> 1990), </year> <pages> pp. 143-177. </pages>
Reference-contexts: Third, while some associations could readily be described as constraints, our system does not require the rigid formality and associated solution machinery that one would find in a mechanism editor based on an underlying constraint system <ref> [11, 4, 10, 8, 6] </ref>.
Reference: [11] <author> Nelson, G. Juno, </author> <title> a Constraint-Based Graphics System. </title> <booktitle> Proc. of SIGGRAPH '85 (San Fransisco, </booktitle> <address> CA, </address> <month> Jul. </month> <pages> 22-26, </pages> <year> 1985). </year> <booktitle> In Computer Graphics 19, </booktitle> <month> 3 (Jul. </month> <year> 1985), </year> <pages> pp. 235-243. </pages>
Reference-contexts: Third, while some associations could readily be described as constraints, our system does not require the rigid formality and associated solution machinery that one would find in a mechanism editor based on an underlying constraint system <ref> [11, 4, 10, 8, 6] </ref>.
Reference: [12] <author> Nielson, G. and Olsen, D. </author> <title> Direct Manipulation Techniques for 3D Objects Using 2D Locator Devices. </title> <booktitle> Proc. of the 1986 Workshop on Interactive 3-D Graphics (Chapel Hill, </booktitle> <address> NC, </address> <month> Oct. </month> <year> 1986), </year> <pages> pp. 175-182. </pages>
Reference-contexts: The problem with a 3D world is that it is impossible to exactly control all six degrees of freedom (DOF) at once with only 2-dimensional input and display devices. Typically, software solutions are used to map 2D cursor motion to limited 3D object space motion <ref> [12] </ref>. These can be cumbersome to use in complex environments, and do not address the fact that objects often require positioning with respect to objects around them.
Reference: [13] <author> Smith, R.B. </author> <title> Experiences with the Alternate Reality Kit: An Example of the Tension between Literalism and Magic. </title> <journal> IEEE Computer Graphics and Applications 7, </journal> <month> 9 (Sep. </month> <year> 1987), </year> <pages> pp. 42-50. </pages>
Reference-contexts: Since we are working in a virtual world, we can adopt selectively some of the desirable characteristics, while ignoring others, and add some useful non-physical behavior on top. Such "magic" behavior can be more convenient than the behavior of real-world objects <ref> [13] </ref>. It is easier to move furniture without concern for temporary physical obstruction or inter-penetration; the notorious task of moving a piano through a staircase is no problem in our WALKEDIT environment, and pictures can hang on walls without physical hooks.
Reference: [14] <author> Teller, S.J., and Sequin, C.H. </author> <title> Visibility Preprocessing for Interactive Walkthroughs. </title> <booktitle> Proc. </booktitle> <address> of SIGGRAPH '91 (Las Vegas, Nevada, </address> <month> Jul. </month> <title> 28-Aug. </title> <booktitle> 2, 1991). In Computer Graphics, </booktitle> <volume> 25, </volume> <month> 4 (Jul. </month> <year> 1991), </year> <pages> pp. 61-69. </pages>
Reference-contexts: For efficiency, likely candidates (that is, those objects that were known to be associated with the selected object previously) are checked first. Then, a general search is started in the vicinity of the selected object, relying on our cell-based spatial subdivision structure used for visibility precomputation and observer tracking <ref> [14] </ref>.
Reference: [15] <author> Venolia, D. </author> <title> Facile 3D Direct Manipulation. </title> <booktitle> Proc. of the ACM Conference on Human Factors in Computing Systems CHI 93 (Amsterdam, </booktitle> <address> Netherlands, </address> <month> Apr. </month> <year> 1993), </year> <pages> pp. 31-36. </pages>
Reference-contexts: These can be cumbersome to use in complex environments, and do not address the fact that objects often require positioning with respect to objects around them. High-tech solutions such as the "SpaceBall" [2], "DataGlove," 3D mice <ref> [15] </ref>, or virtual 3D displays do not solve the problem either; precise placement of objects in three dimensions is hard - even in the real world unless we get help from the physical interactions of the objects we want to place.
References-found: 15

