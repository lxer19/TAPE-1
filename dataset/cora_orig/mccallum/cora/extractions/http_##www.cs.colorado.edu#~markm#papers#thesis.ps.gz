URL: http://www.cs.colorado.edu/~markm/papers/thesis.ps.gz
Refering-URL: http://www.cs.colorado.edu/~markm/listpub.html
Root-URL: http://www.cs.colorado.edu
Title: COMPONENT-OBJECT INTEROPERABILITY IN A HETEROGENEOUS DISTRIBUTED ENVIRONMENT  
Author: by MARK JOHN MAYBEE B. A., M. S., 
Degree: 1986 A thesis submitted to the Faculty of the Graduate School of the  in partial fulfillment of the requirements for the degree of Doctor of Philosophy  
Date: 1995  
Address: 1984  
Affiliation: University of Colorado,  University of Colorado,  University of Colorado  Department of Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> M. Accetta, R. Baron, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: A new kernel foundation for UNIX development. </title> <booktitle> In Proceedings of the Summer 1986 USENIX Technical Conference and Exhibition, </booktitle> <month> June </month> <year> 1986. </year>
Reference-contexts: Matchmaker language [19], designed to support the construction of multi-lingual interprocess communication interfaces, and at the Massachusetts Institute of Technology with the Mercury project [24, 16], which uses a value transmission method for abstract data types. 2.5.1 Matchmaker When supported by the capability-based inter-process communications found in the Mach kernel <ref> [1] </ref> Matchmaker provides a heterogeneous, distributed, object-oriented programming facility. Currently the Mach/Matchmaker system supports the generation of interfaces between C, Common Lisp, Ada, and Pascal. The Matchmaker language defines the type model within which the supported languages may exchange data objects.
Reference: [2] <author> Kenneth M. Anderson, Richard N. Taylor, and E. James Whitehead, Jr. </author> <title> Chimera: Hypertext for Heterogeneous Software Environments. </title> <booktitle> In Proceedings of the ACM Conference on Hypertext, </booktitle> <address> Edinburgh, Scotland, </address> <month> Septem-ber </month> <year> 1994. </year>
Reference-contexts: Details of the implementation of Q version 3 are presented in appendix A. A detailed discussion of its interfaces is presented in the reference manual in appendix B. The complete interface specifications themselves are available in appendix C. 4.5 Other Experience 4.5.1 Chimera The Chimera project <ref> [2, 3] </ref> is investigating the use of hypertext in software environments. One of its main goals is support for heterogeneity. Q was chosen to support its interoperability needs because of this.
Reference: [3] <author> Kenneth M. Anderson, Richard N. Taylor, and E. James Whitehead, Jr. </author> <title> Chimera: Hypertext for Heterogeneous Software Environments. </title> <type> UCI-ICS Technical Report TR-94-20, </type> <institution> Department of Information and Computer Science, University of California, Irvine, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: Details of the implementation of Q version 3 are presented in appendix A. A detailed discussion of its interfaces is presented in the reference manual in appendix B. The complete interface specifications themselves are available in appendix C. 4.5 Other Experience 4.5.1 Chimera The Chimera project <ref> [2, 3] </ref> is investigating the use of hypertext in software environments. One of its main goals is support for heterogeneity. Q was chosen to support its interoperability needs because of this.
Reference: [4] <author> A. D. Birrell and B. J. Nelson. </author> <title> Implementing remote procedure calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: In a distributed system these same units of functionality are likely to be encapsulated within separately compiled components. While it is not possible to make direct procedure calls on components, the equivalent is achievable via a remote procedure call (RPC) <ref> [4] </ref>. The goal of the remote procedure call model is to emulate the use and behavior of same-address-space procedure calls by procedure calls across process (and platform) boundaries. This kind of interoperability substrate implies use of a client/server model to achieve procedure call-like semantics. <p> Supporting component interoperability in this environment means being able to support autonomous clients and servers engaging in remote procedure calls spanning process, processor, and language boundaries. CHAPTER 2 RELATED WORK There is a large class of systems designed to support interprocess communication based upon a remote procedure call model <ref> [4] </ref>. However, none appears to address all facets of the problems presented by a non-homogeneous environment populated with autonomous servers. Systems that support tightly coupled applications, typically used in distributed computing [8, 12] or prototyping [27], fail to provide support for autonomous servers.
Reference: [5] <author> Michael J. Carey, David J. DeWitt, Daniel Frank, Goetz Graefe, M. Muralikr-ishna, Joel E. Richardson, and Eugene J. Shekita. </author> <title> The architecture of the EXODUS extensible DBMS. </title> <booktitle> In International Workshop on Object-Oriented Database Systems, </booktitle> <pages> pages 52-65, </pages> <year> 1986. </year>
Reference-contexts: The Triton server component is written in the E programming language [29], utilizing the EXODUS <ref> [5] </ref> database toolkit system. The E programming language is an extension to the C++ programming language [31]. Triton is an infrastructure component that provides object management services to application components. While primarily used to support the persistence needs of APPL/A applications, Triton provides a wide range of object management capabilities.
Reference: [6] <author> Danny Cohen. </author> <title> On holy wars and a plea for peace. </title> <booktitle> IEEE Computer, </booktitle> <month> October </month> <year> 1981. </year>
Reference-contexts: This is to insure that the semantics of the data values are preserved. For example, consider passing 25 the string "abcd" from a little-endian machine to a big-endian machine 2 <ref> [6] </ref>. Without argument marshaling to ensure consistent representations of string values, the resulting string value will be "dcba" on the big-endian machine. In general this is not an issue that an application should have to worry about.
Reference: [7] <author> Jon Crowcroft, Ian Wakeman, Zheng Wang, </author> <title> and Dejan Sirovica. </title> <journal> Is layering harmful? IEEE Network Magazine, </journal> <volume> 6(1), </volume> <month> January </month> <year> 1992. </year> <title> The missing figures appear in a correction, </title> <type> 6(2), </type> <month> March </month> <year> 1992. </year>
Reference: [8] <author> Jack J. Dongarra, G. A. Geist, Robert Manchek, and Vaidy S. Sunderam. </author> <title> Integrated pvm framework supports heterogeneous network computing. </title> <booktitle> Computers in Physics, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: However, none appears to address all facets of the problems presented by a non-homogeneous environment populated with autonomous servers. Systems that support tightly coupled applications, typically used in distributed computing <ref> [8, 12] </ref> or prototyping [27], fail to provide support for autonomous servers. Of those systems which support the more traditional autonomous server model [33, 9, 26], most fail to provide adequate support for inter-language data exchange. <p> There is no notion of a traditional autonomous server and so this prototyping style of interoperability is inappropriate for supporting distributed environments. A stronger notion of component autonomy and parallel execution is required. 2.2 Distributed Computing Systems such as PVM <ref> [8] </ref> and Mentat [12] are designed to support distributed numerical applications. Rather than trying to provide support for the distribution and availability of resources and services to a wide range of applications, they provide support for single applications in distributed environments.
Reference: [9] <author> Open Software Foundation. </author> <title> OSF DCE Application Development Guide. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year> <note> Revision 1.0. </note>
Reference-contexts: Systems that support tightly coupled applications, typically used in distributed computing [8, 12] or prototyping [27], fail to provide support for autonomous servers. Of those systems which support the more traditional autonomous server model <ref> [33, 9, 26] </ref>, most fail to provide adequate support for inter-language data exchange. <p> trademark of the Open Software Foundation, Incorporated. 4 ObjectBroker is a trademark of Digital Equipment Corporation. 5 CORBA is a trademark of the Object Management Group, Incorporated. 6 OMG is a trademark of the Object Management Group, Incorporated. 19 services (which is CORBA compliant). 2.4.1 DCE The Distributed Computing Environment <ref> [9] </ref> is an integrated set of services designed to support distributed applications. These services include: * Remote Procedure Call * Directory Service * Time Service * Security Service * Threads Service The remote procedure call services were developed specifically to provide simplicity, performance, portability, and platform independence.
Reference: [10] <institution> Frame Technology Corporation, </institution> <address> San Jose, California. FrameMaker Reference, </address> <month> September </month> <year> 1990. </year> <month> 76 </month>
Reference-contexts: Ada and C aggregate marshaling pair Ada TYPE Example IS RECORD float_field : FLOAT; array_field : Vector; END RECORD; PROCEDURE qdr_example ( qdrs : IN QDR.Handle; s : IN OUT TestType ) IS BEGIN element (qdrs, s.float_field); row (qdrs, s.array_field); END example; C struct example - double float_field; double array_field <ref> [10] </ref>; - bool_t qdr_example (QDR_Handle qdrs, struct example *s) - return ( qdr_floating (qdrs, &s-&gt;float_field) && qdr_array (qdrs, &s-&gt;array_field, &len, 10, sizeof (double), qdr_floating) ); 35 Applications must include marshaling functions for all the types that are to be used in interprocess communication. <p> One of its main goals is support for heterogeneity. Q was chosen to support its interoperability needs because of this. An early experiment with Chimera was to try to connect to the FrameMaker system <ref> [10, 11] </ref> with the Chiron system to demonstrate Chimera's ability to interact with foreign systems. The FrameMaker system is a third-party software system that supports document preparation with a WYSIWYG interface.
Reference: [11] <institution> Frame Technology Corporation, </institution> <address> San Jose, California. </address> <booktitle> Integrating Applications With FrameMaker, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: One of its main goals is support for heterogeneity. Q was chosen to support its interoperability needs because of this. An early experiment with Chimera was to try to connect to the FrameMaker system <ref> [10, 11] </ref> with the Chiron system to demonstrate Chimera's ability to interact with foreign systems. The FrameMaker system is a third-party software system that supports document preparation with a WYSIWYG interface.
Reference: [12] <author> Andrew S. Grimshaw, W. Timothy Strayer, and P. Narayan. </author> <title> Dynamic object-oriented parallel processing. </title> <booktitle> IEEE Parallel & Distributed Technology: Systems & Applications, </booktitle> <pages> pages 33-47, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: However, none appears to address all facets of the problems presented by a non-homogeneous environment populated with autonomous servers. Systems that support tightly coupled applications, typically used in distributed computing <ref> [8, 12] </ref> or prototyping [27], fail to provide support for autonomous servers. Of those systems which support the more traditional autonomous server model [33, 9, 26], most fail to provide adequate support for inter-language data exchange. <p> There is no notion of a traditional autonomous server and so this prototyping style of interoperability is inappropriate for supporting distributed environments. A stronger notion of component autonomy and parallel execution is required. 2.2 Distributed Computing Systems such as PVM [8] and Mentat <ref> [12] </ref> are designed to support distributed numerical applications. Rather than trying to provide support for the distribution and availability of resources and services to a wide range of applications, they provide support for single applications in distributed environments.
Reference: [13] <author> Dennis Heimbigner. </author> <title> Triton Reference Manual, </title> <month> 1 July </month> <year> 1990. </year>
Reference-contexts: Figure 4.1 demonstrates the resulting implementation architecture. The data repository service is provided by the Triton object manager. The global event management services are provided by the GEM. The APPL/A implementation's use of these components will be discussed in detail in the following sections. 4.1.1 Triton Triton <ref> [13] </ref> is an extensible and flexible object management system that was developed to support the persistence and shared data management requirements of the Arcadia environment. The Triton server component is written in the E programming language [29], utilizing the EXODUS [5] database toolkit system. <p> When a new type is created a corresponding E language object model providing the implementation of the type access methods must be made available to Triton for dynamic loading. Specifics of this process are deferred to the Triton Reference Manual <ref> [13] </ref>. Figure 4.3 depicts the Triton architecture. The APPL/A language implementation defines each relation as a separate data type in Triton (see figure 4.4).
Reference: [14] <author> Dennis Heimbigner. ARPC: </author> <title> An augmented remote procedure call system. </title> <type> Technical Report CU-ARCADIA-100-94, </type> <institution> University of Colorado Arcadia Project, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: The resulting behavior was unpredictable, and usually erroneous. What was required was an IO multiplexing capability to resolve multiple requests for IO availability into a single select call. To facilitate this the ONC/RPC infrastructure was reengineered and extended to produce the Augmented Remote Procedure Call (Arpc) interface <ref> [14] </ref>. Among other things, the new infrastructure exposed a message passing interface for client/server interactions. Where previously a client made a single call to clnt call, now the client called clnt sendmsg followed by clnt recvmsg 2 .
Reference: [15] <author> Dennis Heimbigner. </author> <title> The ozone reference manual. </title> <type> Technical Report CU-ARCADIA-103-94, </type> <institution> University of Colorado Arcadia Project, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: A partial solution to this problem would be the introduction of some form of standardized moniker system 1 . It is a scheme and mechanism for representing references to any exported component in a distributed environment. The Ozone <ref> [15] </ref> project is aimed at providing the Q mechanism which this additional functionality. 5.2.2 Weak Marshaling Experience with the type system support provided by Q, in the form of the QDR interface (see section B.5), has not revealed significant problems with the type matching model that Q adopts.
Reference: [16] <author> M. Herlihy and B. H. Liskov. </author> <title> A value transmission method for abstract data types. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(4) </volume> <pages> 527-551, </pages> <month> October </month> <year> 1982. </year>
Reference-contexts: Some related work has been done at Carnegie Mellon University with the Matchmaker language [19], designed to support the construction of multi-lingual interprocess communication interfaces, and at the Massachusetts Institute of Technology with the Mercury project <ref> [24, 16] </ref>, which uses a value transmission method for abstract data types. 2.5.1 Matchmaker When supported by the capability-based inter-process communications found in the Mach kernel [1] Matchmaker provides a heterogeneous, distributed, object-oriented programming facility.
Reference: [17] <institution> Institute of Electrical and Electronics Engineers. IEEE Standard for Binary Floating-Point Arithmetic, </institution> <month> August </month> <year> 1985. </year> <title> ANSI/IEEE Standard. </title>
Reference-contexts: Floating point is signed 64 bit value whose precise representation is defined in the IEEE standard on floating point numbers <ref> [17] </ref>. Fixed point is a 32 bit value whose precise representation is defined in the Ada language reference manual [39]. Enumeration is represented as an integer denoting the position of the data value in the enumeration set 3 . Boolean is an enumeration type.
Reference: [18] <institution> Isis Distributed Systems, Inc. </institution> <note> The Isis Distributed Toolkit Version 3.0 User Reference Manual, </note> <year> 1992. </year>
Reference-contexts: One notable exception is the Isis system. 2.2.1 ISIS The ISIS <ref> [18] </ref> system is a platform for distributed and fault-tolerant computing. Originally developed to support applications written in C, an interface to Verdix Ada and SunAda is included in the current, commercially available version. ISIS supports distributed applications with a message-based interoperability mechanism.
Reference: [19] <author> Michael B. Jones and Richard F. Rashid. </author> <title> Mach and matchmaker: Kernel and language support for object-oriented distributed systems. </title> <type> Technical Report CMU-CS-87-150, </type> <institution> Carnegie Mellon University, </institution> <month> September </month> <year> 1986. </year>
Reference-contexts: Specifically, the ability to interop-erate between components written in the Ada and C languages is viewed as a fundamental requirement for software development environments. Some related work has been done at Carnegie Mellon University with the Matchmaker language <ref> [19] </ref>, designed to support the construction of multi-lingual interprocess communication interfaces, and at the Massachusetts Institute of Technology with the Mercury project [24, 16], which uses a value transmission method for abstract data types. 2.5.1 Matchmaker When supported by the capability-based inter-process communications found in the Mach kernel [1] Matchmaker provides
Reference: [20] <author> R. Kadia. </author> <title> Issues encountered in building a flexible software development environment: Lessons learned from the Arcadia project. </title> <booktitle> In Proceedings of ACM SIGSOFT '92: Fifth Symposium on Software Development Environments, </booktitle> <address> Tyson's Corner, Virginia, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: As more experience was gained, however, the predominant design influence switched to the requirements placed upon it by the environment. The primary purpose of Q was to support the interoperability needs of the Arcadia distributed component-based environment <ref> [21, 20] </ref>. As the Arcadia environment grew and evolved, so too did the Q mechanism. Continuous demands for increased functionality, reliability, and performance has driven the modifications and improvements to the Q mechanism.
Reference: [21] <author> R. Kadia. </author> <title> Lessons learned from the Arcadia project. </title> <booktitle> In DARPA Software Technology Conference, </booktitle> <address> Los Angeles, California, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: As more experience was gained, however, the predominant design influence switched to the requirements placed upon it by the environment. The primary purpose of Q was to support the interoperability needs of the Arcadia distributed component-based environment <ref> [21, 20] </ref>. As the Arcadia environment grew and evolved, so too did the Q mechanism. Continuous demands for increased functionality, reliability, and performance has driven the modifications and improvements to the Q mechanism.
Reference: [22] <author> Rudolf K. Keller, Mary Cameron, Richard N. Taylor, and Dennis B. Troup. </author> <title> User interface development and software environments: </title> <booktitle> The Chiron-1 system. In Proceedings of the Thirteenth International Conference on Software Engineering, </booktitle> <pages> pages 208-218, </pages> <address> Austin, TX, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: The first behavior was demonstrated in the GEM implementation discussed above. The second type of behavior is frequent in user interface applications, where it is desirable that the interface remain responsive even while engaged in lengthy service operations. 4.3 Chiron Chiron <ref> [42, 22] </ref> is a user interface development system (UIDS) supporting the user interface needs of the Arcadia environment. It emphasizes the value of separating the application from the graphical user interface (GUI) by means of a client/server split. Figure 4.10 depicts the Chiron architecture for achieving this separation.
Reference: [23] <author> S. J. Le*er, M. K. McKusick, M. J. Karels, and J. S. Quarterman. </author> <title> The Design and Implementation of the 4.3BSD UNIX Operating System. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1989. </year> <month> 77 </month>
Reference: [24] <author> B. H. Liskov, T. Bloom, D. Gifford, R. Scheifler, and W. Weihl. </author> <title> Communication in the mercury system. </title> <booktitle> In Proceedings of the 21st Annual Hawaii Conference on System Sciences, </booktitle> <pages> pages 178-187. </pages> <publisher> IEEE, </publisher> <month> January </month> <year> 1988. </year>
Reference-contexts: Some related work has been done at Carnegie Mellon University with the Matchmaker language [19], designed to support the construction of multi-lingual interprocess communication interfaces, and at the Massachusetts Institute of Technology with the Mercury project <ref> [24, 16] </ref>, which uses a value transmission method for abstract data types. 2.5.1 Matchmaker When supported by the capability-based inter-process communications found in the Mach kernel [1] Matchmaker provides a heterogeneous, distributed, object-oriented programming facility.
Reference: [25] <author> M. P. I. Forum. </author> <title> MPI: A Message-Passing Interface Standard, </title> <month> March </month> <year> 1994. </year>
Reference-contexts: It is an emerging standard for implementing message-based parallel programs in distributed-memory computing environments. Since the release of the recent MPI specification <ref> [25] </ref>, several compliant implementations have become available. It is likely that other systems, such as PVM and Mentat, will migrate to conformity with this standard. The performance of communication is extremely crucial to message-passing based applications. The execution model is typically one of two flavors.
Reference: [26] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <month> 29 December </month> <year> 1993. </year>
Reference-contexts: Systems that support tightly coupled applications, typically used in distributed computing [8, 12] or prototyping [27], fail to provide support for autonomous servers. Of those systems which support the more traditional autonomous server model <ref> [33, 9, 26] </ref>, most fail to provide adequate support for inter-language data exchange. <p> However, they were not designed specifically to support multi-language interoperability. As a result DCE only attempts to provide direct support for the C and C++ languages. 2.4.2 CORBA CORBA <ref> [26] </ref> is an evolving application interoperability standard. The current version is 1.2, which emerged at the beginning of 1994. A new version, 2.0, is scheduled for release in late 1994. As an evolving standard it is a moving target.
Reference: [27] <author> James M. Purtilo. </author> <title> The polylith software bus. </title> <type> Technical Report UMIACS-TR-90-65, </type> <institution> University of Maryland, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: However, none appears to address all facets of the problems presented by a non-homogeneous environment populated with autonomous servers. Systems that support tightly coupled applications, typically used in distributed computing [8, 12] or prototyping <ref> [27] </ref>, fail to provide support for autonomous servers. Of those systems which support the more traditional autonomous server model [33, 9, 26], most fail to provide adequate support for inter-language data exchange. <p> There is a small class of systems which begin to address the problems associated with interprocess communication in heterogeneous distributed environments, but do so incompletely, as they represent solutions directed at different domains. 2.1 Prototyping The Polylith Software Bus <ref> [27] </ref> is a system for interconnecting mixed-language software components for execution in a heterogeneous environment. The Polylith system is designed primarily to support rapid prototyping through facilitation of the reuse of modules and applications.
Reference: [28] <author> Steven. P. Reiss. </author> <title> Connecting tools using message passing in the field environment. </title> <journal> IEEE Software, </journal> <volume> 7(4) </volume> <pages> 57-66, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: A BMS is a relatively simple integration framework designed to allow a wide variety of tools to be tied together with minimum effort. Typical examples of BMS's are FIELD <ref> [28] </ref>, from Brown University, and Sun 15 Microsystems' ToolTalk 1 . The principal idea behind a BMS is to allow existing tools, third party tools, and newly developed tools to cooperate.
Reference: [29] <author> Joel E. Richardson and Michael J. Carey. </author> <title> Programming constructs for database system implementation in EXODUS. </title> <booktitle> In Proceedings of the ACM SIG-MOD Conference, </booktitle> <year> 1987. </year>
Reference-contexts: The Triton server component is written in the E programming language <ref> [29] </ref>, utilizing the EXODUS [5] database toolkit system. The E programming language is an extension to the C++ programming language [31]. Triton is an infrastructure component that provides object management services to application components.
Reference: [30] <author> Xiping Song and Lee J. Osterweil. Debus: </author> <title> A software design process program. </title> <type> Arcadia Technical Report UCI-89-02, </type> <institution> Department of Information and Computer Science, University of California, </institution> <month> April </month> <year> 1989. </year>
Reference-contexts: As the Arcadia environment grew and evolved, so too did the Q mechanism. Continuous demands for increased functionality, reliability, and performance has driven the modifications and improvements to the Q mechanism. Q is now pervasive in the Arcadia environment; almost every component therein (Rebus [38, 35], Debus <ref> [30] </ref>, PIC [40, 41], BMS, Process Viewer, Project Panel, ACV, Agendas, etc.) utilizes Q for its interoperability needs. 4.1 APPL/A APPL/A [34] is a software-process programming language designed as an extension of the Ada programming language.
Reference: [31] <author> B. Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Menlo Park, California, </address> <year> 1986. </year>
Reference-contexts: The Triton server component is written in the E programming language [29], utilizing the EXODUS [5] database toolkit system. The E programming language is an extension to the C++ programming language <ref> [31] </ref>. Triton is an infrastructure component that provides object management services to application components. While primarily used to support the persistence needs of APPL/A applications, Triton provides a wide range of object management capabilities.
Reference: [32] <author> Sun Microsystems. XDR: </author> <title> External data representation standard. </title> <type> Technical Report RFC-1014, </type> <institution> Sun Microsystems, Inc., </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: CHAPTER 3 APPROACH For largely pragmatic reasons the Open Network Computing (ONC 1 ) specifications for Remote Procedure Call (RPC) and External Data Representation (XDR) <ref> [33, 32] </ref> were chosen as a basis for the construction of a language-heterogeneous interoperability mechanism. The newly available version 4.0 release of RPC/XDR was a public domain implementation that included the source code. This made modifications easy.
Reference: [33] <author> Sun Microsystems. </author> <title> RPC: Remote procedure call protocol specification. </title> <type> Technical Report RFC-1057, </type> <institution> Sun Microsystems, Inc., </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: Systems that support tightly coupled applications, typically used in distributed computing [8, 12] or prototyping [27], fail to provide support for autonomous servers. Of those systems which support the more traditional autonomous server model <ref> [33, 9, 26] </ref>, most fail to provide adequate support for inter-language data exchange. <p> CHAPTER 3 APPROACH For largely pragmatic reasons the Open Network Computing (ONC 1 ) specifications for Remote Procedure Call (RPC) and External Data Representation (XDR) <ref> [33, 32] </ref> were chosen as a basis for the construction of a language-heterogeneous interoperability mechanism. The newly available version 4.0 release of RPC/XDR was a public domain implementation that included the source code. This made modifications easy.
Reference: [34] <author> Stanley M. Sutton, Jr., Dennis Heimbigner, and Leon J. Osterweil. </author> <title> Language constructs for managing change in process-centered environments. </title> <booktitle> In Proceedings of ACM SIGSOFT '90: Fourth Symposium on Software Development Environments, </booktitle> <pages> pages 206-217, </pages> <address> Irvine, CA, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: Q is now pervasive in the Arcadia environment; almost every component therein (Rebus [38, 35], Debus [30], PIC [40, 41], BMS, Process Viewer, Project Panel, ACV, Agendas, etc.) utilizes Q for its interoperability needs. 4.1 APPL/A APPL/A <ref> [34] </ref> is a software-process programming language designed as an extension of the Ada programming language. It adds constructs to the Ada language designed to support change management in process-centered environments. APPL/A's extensions to Ada include persistent relations, triggers, enforcible predicates, and transactions.
Reference: [35] <author> Stanley M. Sutton, Jr., Hadar Ziv, Dennis Heimbigner, Harry E. Yessayan, Mark Maybee, Leon J. Osterweil, and Xiping Song. </author> <title> Programming a software requirements-specification process. </title> <booktitle> In Proceedings of the First International Conference on the Software Process, </booktitle> <pages> pages 68-89, </pages> <address> Redondo Beach, CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: As the Arcadia environment grew and evolved, so too did the Q mechanism. Continuous demands for increased functionality, reliability, and performance has driven the modifications and improvements to the Q mechanism. Q is now pervasive in the Arcadia environment; almost every component therein (Rebus <ref> [38, 35] </ref>, Debus [30], PIC [40, 41], BMS, Process Viewer, Project Panel, ACV, Agendas, etc.) utilizes Q for its interoperability needs. 4.1 APPL/A APPL/A [34] is a software-process programming language designed as an extension of the Ada programming language.
Reference: [36] <author> Microsoft OLE2 Design Team. </author> <title> OLE 2 Design Specification. </title> <publisher> Microsoft Corporation, </publisher> <month> 27 September </month> <year> 1993. </year> <month> 78 </month>
Reference-contexts: It is intended to be an architecture for environments which allow applications to interoperate more effectively. The major compound document architectures are OpenDoc 2 [37] and Object Linking and Embedding 2.0 (OLE 2) <ref> [36] </ref>. These architectures are primarily sets of standard interfaces for achieving application integration. They provide the binding and communications support required to connect applications.
Reference: [37] <author> OpenDoc Design Team. </author> <title> OpenDoc Technical Summary. Component Integration Laboratories, </title> <month> 14 April </month> <year> 1994. </year>
Reference-contexts: It is intended to be an architecture for environments which allow applications to interoperate more effectively. The major compound document architectures are OpenDoc 2 <ref> [37] </ref> and Object Linking and Embedding 2.0 (OLE 2) [36]. These architectures are primarily sets of standard interfaces for achieving application integration. They provide the binding and communications support required to connect applications.
Reference: [38] <author> Robert B. Terwilliger, Mark J. Maybee, and Leon J. Osterweil. </author> <title> An example of formal specification as an aid to design and development. </title> <booktitle> In Proceedings of the ACM SIGSOFT '89: Fifth International Workshop on Software Specification and Design, </booktitle> <pages> pages 266-272, </pages> <address> Pittsburgh, </address> <month> May </month> <year> 1989. </year> <booktitle> SIGSOFT Engineering Notes. </booktitle>
Reference-contexts: As the Arcadia environment grew and evolved, so too did the Q mechanism. Continuous demands for increased functionality, reliability, and performance has driven the modifications and improvements to the Q mechanism. Q is now pervasive in the Arcadia environment; almost every component therein (Rebus <ref> [38, 35] </ref>, Debus [30], PIC [40, 41], BMS, Process Viewer, Project Panel, ACV, Agendas, etc.) utilizes Q for its interoperability needs. 4.1 APPL/A APPL/A [34] is a software-process programming language designed as an extension of the Ada programming language.
Reference: [39] <institution> United States Department of Defense. </institution> <note> Reference Manual for the Ada Programming Language, 1983. ANSI/MIL-STD-1815A-1983. </note>
Reference-contexts: Floating point is signed 64 bit value whose precise representation is defined in the IEEE standard on floating point numbers [17]. Fixed point is a 32 bit value whose precise representation is defined in the Ada language reference manual <ref> [39] </ref>. Enumeration is represented as an integer denoting the position of the data value in the enumeration set 3 . Boolean is an enumeration type. False is represented as the integer 0 and True is represented as the integer 1.
Reference: [40] <author> A. L. Wolf, L. A. Clarke, and J. C. Wileden. </author> <title> The AdaPIC toolset: Supporting interface control and analysis throughout the software development process. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(3) </volume> <pages> 250-263, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: As the Arcadia environment grew and evolved, so too did the Q mechanism. Continuous demands for increased functionality, reliability, and performance has driven the modifications and improvements to the Q mechanism. Q is now pervasive in the Arcadia environment; almost every component therein (Rebus [38, 35], Debus [30], PIC <ref> [40, 41] </ref>, BMS, Process Viewer, Project Panel, ACV, Agendas, etc.) utilizes Q for its interoperability needs. 4.1 APPL/A APPL/A [34] is a software-process programming language designed as an extension of the Ada programming language. It adds constructs to the Ada language designed to support change management in process-centered environments.
Reference: [41] <author> Alexander L. Wolf, Lori A. Clarke, and Jack C. Wileden. </author> <title> Ada-based support for programming-in-the-large. </title> <journal> IEEE Software, </journal> <volume> 2(2) </volume> <pages> 58-71, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: As the Arcadia environment grew and evolved, so too did the Q mechanism. Continuous demands for increased functionality, reliability, and performance has driven the modifications and improvements to the Q mechanism. Q is now pervasive in the Arcadia environment; almost every component therein (Rebus [38, 35], Debus [30], PIC <ref> [40, 41] </ref>, BMS, Process Viewer, Project Panel, ACV, Agendas, etc.) utilizes Q for its interoperability needs. 4.1 APPL/A APPL/A [34] is a software-process programming language designed as an extension of the Ada programming language. It adds constructs to the Ada language designed to support change management in process-centered environments.

References-found: 41

