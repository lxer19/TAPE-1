URL: ftp://ftp.eecs.umich.edu/groups/gasm/prolint.abst.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.cs.umich.edu
Title: Executable Specifications based on Dynamic Algebras  
Author: Angelica Maria Kappel 
Keyword: Language.  
Address: Romerstrasse 164, D-5300 Bonn 1  
Affiliation: Universitat Bonn, Institut fur Informatik III  
Abstract: In 1988, Y. Gurevich proposed an approach to operational semantics, which is based on finite, dynamic algebras. Dynamic algebras are comprehensible, precise and universally applicable. E. Borger recently presented a Dynamic Algebra Specification of full Prolog. The main purpose of our work is a general concept for the implementation of dynamic algebras. We present a concrete language for Dynamic Algebra Specifications and the design of an abstract target machine specially tailored for Dynamic Algebra computations. Finally we explain some principles of code generation leading to highly efficient target programs. Though the given concepts are independent from an implementation language, we show that they may very naturally be expressed within the framework of Logic Programming. A prototype of the compiler has been realized in Prolog. Starting with Borger's transition system for full Pro-log we derived a Prolog interpreter in our Dynamic Algebra Specification 
Abstract-found: 1
Intro-found: 1
Reference: [BD91] <author> E. Borger and B. Demoen. </author> <title> A Framework to Specify Database Update Views for Prolog. </title> <editor> In J. Maluszynski and M. Wirsing, editors, </editor> <booktitle> Programming Language Implementation and Logic Programming (PLILP), </booktitle> <volume> number 528, </volume> <year> 1991. </year>
Reference-contexts: An algebra at a chosen point of computation is always finite. One of the main arguments to use dynamic algebras is their simplicity: they are comprehensible, precise and universally applicable. Dynamic algebras have already been applied to give a semantics of several programming languages, especially Prolog, see <ref> [Bor90a, Bor90b, Bor90c, BD91] </ref>. A Dynamic Algebra is a tuple (; I; F; T ), consisting of a signature , a finite, many-sorted, partial algebra I of signature (initial state), a finite set F of finite, many-sorted, partial algebras (final states) and a finite set T of transition rules. <p> Dynamic algebras have been used to define operational semantics of several programming languages, especially Prolog, see <ref> [Bor90a, Bor90b, Bor90c, BD91] </ref>. The cited publications have already been used by the ISO commitee for the Prolog standardization process. In order to make dynamic algebra specifications executable, we have defined and implemented the language DASL. DASL is an extension of the dynamic algebras formalism.
Reference: [BKBR89] <editor> E. Borger, H. Kleine Buning, and M. Richter, editors. </editor> <booktitle> 3rd Workshop on Computer Science Logic, </booktitle> <year> 1989. </year>
Reference: [Bor90a] <author> Egon Borger. </author> <title> A Logical Operational Semantics of Full Prolog, part I: Selection Core and Control. </title> <editor> In Borger et al. </editor> <publisher> [BKBR89]. </publisher>
Reference-contexts: An algebra at a chosen point of computation is always finite. One of the main arguments to use dynamic algebras is their simplicity: they are comprehensible, precise and universally applicable. Dynamic algebras have already been applied to give a semantics of several programming languages, especially Prolog, see <ref> [Bor90a, Bor90b, Bor90c, BD91] </ref>. A Dynamic Algebra is a tuple (; I; F; T ), consisting of a signature , a finite, many-sorted, partial algebra I of signature (initial state), a finite set F of finite, many-sorted, partial algebras (final states) and a finite set T of transition rules. <p> Dynamic algebras have been used to define operational semantics of several programming languages, especially Prolog, see <ref> [Bor90a, Bor90b, Bor90c, BD91] </ref>. The cited publications have already been used by the ISO commitee for the Prolog standardization process. In order to make dynamic algebra specifications executable, we have defined and implemented the language DASL. DASL is an extension of the dynamic algebras formalism.
Reference: [Bor90b] <author> Egon Borger. </author> <title> A Logical Operational Semantics of Full Prolog, part II: Built-in Predicates for Database Manipulations. </title> <type> Technical Report IWBS 115, </type> <institution> IBM Deutschland GmbH, </institution> <year> 1990. </year>
Reference-contexts: An algebra at a chosen point of computation is always finite. One of the main arguments to use dynamic algebras is their simplicity: they are comprehensible, precise and universally applicable. Dynamic algebras have already been applied to give a semantics of several programming languages, especially Prolog, see <ref> [Bor90a, Bor90b, Bor90c, BD91] </ref>. A Dynamic Algebra is a tuple (; I; F; T ), consisting of a signature , a finite, many-sorted, partial algebra I of signature (initial state), a finite set F of finite, many-sorted, partial algebras (final states) and a finite set T of transition rules. <p> Dynamic algebras have been used to define operational semantics of several programming languages, especially Prolog, see <ref> [Bor90a, Bor90b, Bor90c, BD91] </ref>. The cited publications have already been used by the ISO commitee for the Prolog standardization process. In order to make dynamic algebra specifications executable, we have defined and implemented the language DASL. DASL is an extension of the dynamic algebras formalism.
Reference: [Bor90c] <author> Egon Borger. </author> <title> A Logical Operational Semantics of Full Prolog, part III: Built-in Predicates for Files, Terms, Arithmetic and Input-Output. </title> <editor> In Y Moschovakis, editor, </editor> <booktitle> Workshop on Logic from Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: An algebra at a chosen point of computation is always finite. One of the main arguments to use dynamic algebras is their simplicity: they are comprehensible, precise and universally applicable. Dynamic algebras have already been applied to give a semantics of several programming languages, especially Prolog, see <ref> [Bor90a, Bor90b, Bor90c, BD91] </ref>. A Dynamic Algebra is a tuple (; I; F; T ), consisting of a signature , a finite, many-sorted, partial algebra I of signature (initial state), a finite set F of finite, many-sorted, partial algebras (final states) and a finite set T of transition rules. <p> Dynamic algebras have been used to define operational semantics of several programming languages, especially Prolog, see <ref> [Bor90a, Bor90b, Bor90c, BD91] </ref>. The cited publications have already been used by the ISO commitee for the Prolog standardization process. In order to make dynamic algebra specifications executable, we have defined and implemented the language DASL. DASL is an extension of the dynamic algebras formalism.
Reference: [Gur88] <author> Yuri Gurevich. </author> <title> Logic and the Challenge of Computer Science. </title> <editor> In Egon Borger, editor, </editor> <booktitle> Current Trends in Theoretical Computer Science. </booktitle> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: Mathematical structures for the description of an abstract machine are traditionally static and infinite. All states of computation of the machine are given at once in only one infinite structure. In 1988, Gurevich proposed an approach to operational semantics <ref> [Gur88] </ref>, which is based on finite, dynamic algebras. What is new about the dynamic algebra is the way they are used: we are not interested in the set of all algebras, but we consider always only the actual algebra modelling the actual configuration at a given time.
Reference: [Kap90] <author> A. M. Kappel. </author> <title> Implementation of Dynamic Algebras with an Application to Prolog. </title> <type> Diploma thesis, </type> <institution> Universitat Dortmund, Germany, </institution> <year> 1990. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: A sequence of conditional or unconditional equations are defining the declared functions. Always the first matching equation will be applied for reduction of a term during the computation. In this way, the equational specification constitutes a confluent rewrite system. For details of the static part see <ref> [Kap90] </ref> 2.2 Operations Var &lt; new (S) introduces a new element in the universe of the sort S, which must be a sort of the main signature. <p> In this case, we obtain two new rules, one with a positive occurrence of the added condition and one where the new condition occurs negatively, see <ref> [Kap90] </ref> for details. We are able to detect determinism or possible nondeterminism, or to develop integrity constraints for determinism during the transformation of DASL rules into a decision tree. <p> This leads also to a tree with less nodes. With theses heuristics, our transformation procedure leads to very efficient decisions trees. It always results in a minimal tree as long as the rules must not necessarily be extended, see <ref> [Kap90] </ref> for details. Example We now consider rules as logical formulas r i C i ) U i ; i = 1 : : : n C i is a conjunction of propositional constants denoting equations and U i is a variable.
References-found: 7

