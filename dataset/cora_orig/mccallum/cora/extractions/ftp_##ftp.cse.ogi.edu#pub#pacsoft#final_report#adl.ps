URL: ftp://ftp.cse.ogi.edu/pub/pacsoft/final_report/adl.ps
Refering-URL: http://www.cse.ogi.edu/PacSoft/projects/SDRR/p_report.html
Root-URL: http://www.cse.ogi.edu
Title: Abstract makes use of coalgebras, a concept dual to that of algebras. With coalgebras, iterative
Note: ADL also  be specified.  
Abstract: This report constitutes a definition of a new, high-level programming language called ADL. It uses the mathematical concept of structure algebras as the basis for defining computations. When algebras are used to specify programs, control structure is fixed first and data structure, or representations, second. There is no explicit recursion or iteration construct in ADL. Control is determined by combinators applied to inductively defined algebras. An intended use of ADL is to provide computational semantics of specialized software design languages. There is a strong notion of type in ADL, guaranteeing that all well-typed programs terminate. This allows us to use sets as ADL's semantic domain and to provide ADL with an equational logic. However, to check the type correctness of an expression, there can be proof obligations that cannot be discharged mechanically. A benefit of the equational logic is that an ADL program is amenable to transformation based upon the equational theories of its algebras. Transformations are not discussed in this report, however. 
Abstract-found: 1
Intro-found: 1
Reference: [Bir84] <author> Richard S. Bird. </author> <title> The promotion and accumulation strategies in transformational programming. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 6(4) </volume> <pages> 487-504, </pages> <year> 1984. </year> <title> Addendum: </title> <journal> Ibid. </journal> 7(3):490-492 (1985). 
Reference-contexts: The ADL language has been designed to lend itself to transformational development, i.e. the systematic improvement of algorithms by meaning-preserving, algebraic transformation of programs. Transformational development is an old idea, but the algebraic aspect of program transformation has been emphasized by Richard Bird <ref> [Bir84, Bir91] </ref> and his coworkers. The deforestation algorithms proposed by Wadler [Wad88] furnish a good example of general transformations. Wadler [Wad89] and Malcolm [Mal89] have observed that there are general classes of theorems that have instances for any inductive datatype.
Reference: [Bir86] <author> Richard S. Bird. </author> <title> An introduction to the theory of lists. </title> <editor> In M. Broy, editor, </editor> <booktitle> Logic of Programming and Calculi of Discrete Design, volume 36 of NATO Series F. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference-contexts: There are related studies of the use of higher-order combinators for theoretical programming [MFP91, Fok92], however, none has yet been incorporated into a practical system for program development. The origin of such techniques appears to lie in the work of the Squiggol school <ref> [Bir86, Bir88, Mee86] </ref>, subsequently influenced by a thesis by Hagino [Hag87] in which datatype morphisms are generalized in a categorical framework. A categorical programming language called Charity [CS92] embodies inductive and coinductive control structures based upon a categorical framework.
Reference: [Bir88] <author> Richard S. Bird. </author> <title> Lectures on constructive functional programming. </title> <editor> In M. Broy, editor, </editor> <booktitle> Constructive Methods in Computing Science, volume 52 of NATO Series F. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: There are related studies of the use of higher-order combinators for theoretical programming [MFP91, Fok92], however, none has yet been incorporated into a practical system for program development. The origin of such techniques appears to lie in the work of the Squiggol school <ref> [Bir86, Bir88, Mee86] </ref>, subsequently influenced by a thesis by Hagino [Hag87] in which datatype morphisms are generalized in a categorical framework. A categorical programming language called Charity [CS92] embodies inductive and coinductive control structures based upon a categorical framework.
Reference: [Bir91] <author> Richard S. Bird. </author> <title> Knuth's problem revisited. </title> <editor> In B. Moller, editor, </editor> <title> Constructing Programs from Specifications. </title> <publisher> North-Holland, </publisher> <year> 1991. </year>
Reference-contexts: The ADL language has been designed to lend itself to transformational development, i.e. the systematic improvement of algorithms by meaning-preserving, algebraic transformation of programs. Transformational development is an old idea, but the algebraic aspect of program transformation has been emphasized by Richard Bird <ref> [Bir84, Bir91] </ref> and his coworkers. The deforestation algorithms proposed by Wadler [Wad88] furnish a good example of general transformations. Wadler [Wad89] and Malcolm [Mal89] have observed that there are general classes of theorems that have instances for any inductive datatype.
Reference: [CS92] <author> J. R. B. Cockett and D. Spencer. </author> <title> Strong categorical datatypes. </title> <editor> In R. A. G. Seely, editor, </editor> <booktitle> International Meeting on Category Theory, 1991. AMS, </booktitle> <year> 1992. </year>
Reference-contexts: The origin of such techniques appears to lie in the work of the Squiggol school [Bir86, Bir88, Mee86], subsequently influenced by a thesis by Hagino [Hag87] in which datatype morphisms are generalized in a categorical framework. A categorical programming language called Charity <ref> [CS92] </ref> embodies inductive and coinductive control structures based upon a categorical framework. The characterization of datatypes as structure algebras (and coalgebras) [Mac71] can be attributed to Hagino. ADL has syntax similar to that of the ML language family.
Reference: [Fok92] <author> Maarten M. Fokkinga. </author> <title> Law and Order in Algorithmics. </title> <type> PhD thesis, </type> <institution> University of Twente, Twente, </institution> <address> The Netherlands, </address> <month> February </month> <year> 1992. </year>
Reference-contexts: Properties of such functions can be proved by applying rules of inductive (or co-inductive) inference dictated by the structure of the underlying signature. There are related studies of the use of higher-order combinators for theoretical programming <ref> [MFP91, Fok92] </ref>, however, none has yet been incorporated into a practical system for program development.
Reference: [Gog80] <author> Joe A. Goguen. </author> <title> How to prove inductive hypotheses without induction. </title> <editor> In W. Bibel and R. Kowalski, editors, </editor> <booktitle> Proc. 5th Conference on Automated Deduction, volume 87 of Lecture Notes in Computer Science, </booktitle> <pages> pages 356-373. </pages> <publisher> Springer Verlag, </publisher> <year> 1980. </year>
Reference-contexts: Notice that we do not have to treat induction as a special rule of the logic|the inductive proof rules account for the computational content of the algebra homomorphisms. This has been noted previously by Goguen <ref> [Gog80] </ref> and others. In the following rules, t designates a type expression.
Reference: [Hag87] <author> T. Hagino. </author> <title> A Categorical Programming Language. </title> <type> PhD thesis, </type> <institution> University of Edin-burgh, </institution> <year> 1987. </year>
Reference-contexts: The origin of such techniques appears to lie in the work of the Squiggol school [Bir86, Bir88, Mee86], subsequently influenced by a thesis by Hagino <ref> [Hag87] </ref> in which datatype morphisms are generalized in a categorical framework. A categorical programming language called Charity [CS92] embodies inductive and coinductive control structures based upon a categorical framework. The characterization of datatypes as structure algebras (and coalgebras) [Mac71] can be attributed to Hagino. <p> Generators construct codata, which are the elements of so-called final data types <ref> [Hag87] </ref>. However, just as is the case for algebras, the morphisms of non-free coalgebras will yield many useful control schemes. To calculate a coalgebra morphism it would suffice to have a left inverse to the arrow k on the right-hand side of the morphism diagram of Definition 6.2.
Reference: [Mac71] <author> Saunders MacLane. </author> <title> Categories for the Working Mathematician. </title> <publisher> Springer-Verlag, </publisher> <year> 1971. </year>
Reference-contexts: A categorical programming language called Charity [CS92] embodies inductive and coinductive control structures based upon a categorical framework. The characterization of datatypes as structure algebras (and coalgebras) <ref> [Mac71] </ref> can be attributed to Hagino. ADL has syntax similar to that of the ML language family. Unlike Standard ML, ADL has no ref types and has no rec definitions.
Reference: [Mal89] <author> Grant Malcolm. </author> <title> Homomorphisms and promotability. </title> <editor> In J. L. A. van de Snepscheut, editor, </editor> <booktitle> Mathematics of Program Construction, volume 375 of Lecture Notes in Computer Science, </booktitle> <pages> pages 335-347. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1989. </year>
Reference-contexts: Transformational development is an old idea, but the algebraic aspect of program transformation has been emphasized by Richard Bird [Bir84, Bir91] and his coworkers. The deforestation algorithms proposed by Wadler [Wad88] furnish a good example of general transformations. Wadler [Wad89] and Malcolm <ref> [Mal89] </ref> have observed that there are general classes of theorems that have instances for any inductive datatype. Such theorems are not only useful in justifying transformations, they may be automated as tactics for the application of term rewrites that actually effect the transformations.
Reference: [Mee86] <author> Lambert Meertens. </author> <title> Algorithmics|towards programming as a mathematical activity. </title> <booktitle> In Proc. of the CWI Symbposium on Mathematics and Computer Science, </booktitle> <pages> pages 289-334. </pages> <publisher> North-Holland, </publisher> <year> 1986. </year>
Reference-contexts: There are related studies of the use of higher-order combinators for theoretical programming [MFP91, Fok92], however, none has yet been incorporated into a practical system for program development. The origin of such techniques appears to lie in the work of the Squiggol school <ref> [Bir86, Bir88, Mee86] </ref>, subsequently influenced by a thesis by Hagino [Hag87] in which datatype morphisms are generalized in a categorical framework. A categorical programming language called Charity [CS92] embodies inductive and coinductive control structures based upon a categorical framework.
Reference: [MFP91] <author> Erik Meijer, Maarten Fokkinga, and Ross Paterson. </author> <title> Functional programming with bananas, lenses, envelopes and barbed wire. </title> <booktitle> In Proc. of 5th ACM Conf. on Functional Programming Languages and Computer Architecture, volume 523 of Lecture Notes in Computer Science, </booktitle> <pages> pages 124-144. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1991. </year>
Reference-contexts: Properties of such functions can be proved by applying rules of inductive (or co-inductive) inference dictated by the structure of the underlying signature. There are related studies of the use of higher-order combinators for theoretical programming <ref> [MFP91, Fok92] </ref>, however, none has yet been incorporated into a practical system for program development.
Reference: [Pau93] <author> Lawrence C. Paulson. </author> <title> Co-induction and co-recursion in higher-order logic. </title> <type> Technical Report TR 304, </type> <institution> Computing Laboratory, Cambridge University, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: These rules are somewhat weaker than the rules of coinduction, which allow the conclusion of assertions about codata <ref> [Pau93] </ref>. The proof rules given here are based upon induction over the set of witness paths.
Reference: [Wad88] <author> Philip Wadler. </author> <title> Deforestation: Transforming programs to eliminate trees. </title> <booktitle> In ESOP'88, volume 300 of Lecture Notes in Computer Science, </booktitle> <pages> pages 344-358. </pages> <publisher> Springer-Verlag, </publisher> <month> March </month> <year> 1988. </year>
Reference-contexts: Transformational development is an old idea, but the algebraic aspect of program transformation has been emphasized by Richard Bird [Bir84, Bir91] and his coworkers. The deforestation algorithms proposed by Wadler <ref> [Wad88] </ref> furnish a good example of general transformations. Wadler [Wad89] and Malcolm [Mal89] have observed that there are general classes of theorems that have instances for any inductive datatype.
Reference: [Wad89] <author> Philip Wadler. </author> <title> Theorems for free! In Proc. </title> <booktitle> of 4th ACM Conf. on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 347-359. </pages> <publisher> ACM Press, </publisher> <month> September </month> <year> 1989. </year>
Reference-contexts: Transformational development is an old idea, but the algebraic aspect of program transformation has been emphasized by Richard Bird [Bir84, Bir91] and his coworkers. The deforestation algorithms proposed by Wadler [Wad88] furnish a good example of general transformations. Wadler <ref> [Wad89] </ref> and Malcolm [Mal89] have observed that there are general classes of theorems that have instances for any inductive datatype. Such theorems are not only useful in justifying transformations, they may be automated as tactics for the application of term rewrites that actually effect the transformations.
References-found: 15

