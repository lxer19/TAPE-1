URL: ftp://ftp.cs.cmu.edu/project/mach/doc/published/mach3_intro.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/project/mach/public/www/doc/publications.html
Root-URL: 
Title: Unix as an Application Program  
Author: David Golub, Randall Dean, Alessandro Forin, Richard Rashid 
Address: Pittsburgh, Pennsylvania 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: 1. Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Accetta, M.J., Baron, R.V., Bolosky, W., Golub, D.B., Rashid, R.F., Tevanian, A., and Young, M.W. </author> <title> Mach: A New Kernel Foundation for UNIX Development. </title> <booktitle> In Proceedings of Summer Usenix. </booktitle> <month> July, </month> <year> 1986. </year>
Reference-contexts: The hardware management duties of Unix -- virtual memory, scheduling and device management -- are provided in an operating system environment independent way by the Mach kernel <ref> [1] </ref>. The key, recognizable Unix facilities -- such as Berkeley files, sockets and ttys -- are literally provided by an application program running on top of Mach. <p> Key Mach Features It is difficult to describe the Unix Server and Emulation Library without briefly describing the most important details of the Mach kernel on which they both depend. A more detailed description on Mach and its abstractions can be found in <ref> [1] </ref>. The key features of Mach used in the emulation of Unix services are: interprocess communication, memory object management, scheduling, system call redirection, device support, and multiprocessing support. 3.1.1. <p> Mach IPC performance enhancements At the time we began our work, the performance of the Mach IPC facility was substantially better than other Unix communication facilities <ref> [1] </ref> but was not tuned to the kind of intense use required by the Unix Server. In March of 1989 the minimum round trip remote procedure call times (RPC) for Mach on the MicroVAX III was measured as 800 microseconds. On the Sun 3/60 minimum RPC times were 1100 microseconds.
Reference: [2] <author> Armand F., Gien M., Guillemont, M. and Leonard, P. </author> <title> Towards a Distributed UNIX System - The CHORUS Approach. </title> <booktitle> In Proceedings of the European UNIX Systems User Group Conference. </booktitle> <month> September, </month> <year> 1986. </year>
Reference-contexts: a virtual machine (as in IBM's CP/67 [4]) or to layer the kernel on a simple message engine (as in AT&T's MERT [6]) or to use a global shared communication area (as in Taos [8]) or to load operating system environment specific emulation-assist code into the kernel (as in Chorus <ref> [2] </ref>). Rather, we have taken advantage of the fact that Mach provides for the manipulation of system resources through a small set of machine-independent abstractions and for the integration of memory management and communication functions.
Reference: [3] <author> Cooper, E. and Draves, R. </author> <title> C Threads. </title> <type> Technical Report CMU-CS-88-154, </type> <institution> Computer Science Department, Carnegie Mellon University, </institution> <month> June, </month> <year> 1988. </year>
Reference-contexts: The external memory object protocol allows a user to map the frame buffer for a graphics device directly into its address space. 3.1.6. User Multiprocessing A user-level multithreading package, the C Thread library <ref> [3] </ref>, eases the use of multiple threads within an address space. It exports mutual exclusion mutex locks and condition variables for synchronization via condition_wait and condition_signal operations. 3.2. Unix Server The bulk of Unix services are provided by the Unix Server.
Reference: [4] <author> Parmelee, R. P, T. I. Peterson, C. C. Tillman and D. J. </author> <title> Hatfield. Virtual Storage and Virtual Machine Concepts. </title> <journal> IBM Systems Journal 11(2) </journal> <pages> 99-130, </pages> <year> 1972. </year>
Reference-contexts: Other such implementations have, however, frequently started from a rather different notion of the relationship between the system kernel and the supported OS environment. The approach we have taken with Mach was not to implement a virtual machine (as in IBM's CP/67 <ref> [4] </ref>) or to layer the kernel on a simple message engine (as in AT&T's MERT [6]) or to use a global shared communication area (as in Taos [8]) or to load operating system environment specific emulation-assist code into the kernel (as in Chorus [2]).
Reference: [5] <author> Howard, J.H., Kazar, M.L., Menees, S.G., Nichols, D.A., Satyanarayanan, M., Sidebotham, R.N., West, M.J. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions on Computer Systems 6(1), </journal> <month> February, </month> <year> 1988. </year>
Reference-contexts: File system benchmarks In order to get a more complete evaluation of the system's file system performance we took advantage of a benchmark originally developed by M. Satyanarayanan for his peformance evaluation of the Andrew File System <ref> [5] </ref>. Specifically we used a version of the Andrew Benchmark modified by John Ousterhout [7]. This benchmark stresses directory and file creation, file copy, file search (using "find") and compilation activity. A complete examination of this benchmark can be found in the cited papers.
Reference: [6] <author> Lycklama, H. and Bayer, D. L. </author> <title> The MERT Operating System. </title> <journal> Bell System Technical Journal , July, </journal> <year> 1978. </year>
Reference-contexts: The approach we have taken with Mach was not to implement a virtual machine (as in IBM's CP/67 [4]) or to layer the kernel on a simple message engine (as in AT&T's MERT <ref> [6] </ref>) or to use a global shared communication area (as in Taos [8]) or to load operating system environment specific emulation-assist code into the kernel (as in Chorus [2]).
Reference: [7] <author> Ousterhout, J. </author> <title> Why Aren't Operating Systems Getting Faster as Fast as Hardware? In Proceedings of Summer Usenix. </title> <month> June, </month> <year> 1990. </year>
Reference-contexts: Satyanarayanan for his peformance evaluation of the Andrew File System [5]. Specifically we used a version of the Andrew Benchmark modified by John Ousterhout <ref> [7] </ref>. This benchmark stresses directory and file creation, file copy, file search (using "find") and compilation activity. A complete examination of this benchmark can be found in the cited papers.
Reference: [8] <author> Thacker, C. P. and Stewart, L. C. and Satterthwaite, Jr., E. H. Firefly: </author> <title> A Multiprocessor Workstation. </title> <journal> IEEE Transactions on Computers 37(8) </journal> <pages> 909-920, </pages> <month> August, </month> <year> 1988. </year>
Reference-contexts: The approach we have taken with Mach was not to implement a virtual machine (as in IBM's CP/67 [4]) or to layer the kernel on a simple message engine (as in AT&T's MERT [6]) or to use a global shared communication area (as in Taos <ref> [8] </ref>) or to load operating system environment specific emulation-assist code into the kernel (as in Chorus [2]).

References-found: 8

