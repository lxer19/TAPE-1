URL: http://rakaposhi.eas.asu.edu/multi-contrib-aips.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: email: rao@asuvax.asu.edu  
Title: Characterizing Multi-Contributor Causal Structures for Planning  
Author: Subbarao Kambhampati 
Address: Tempe, AZ 85287-5406  
Affiliation: Department of Computer Science and Engineering Arizona State University  
Abstract: Explicit causal structure representations have been widely used in classical planning systems to guide a variety of aspects of planning, including plan generation, modification and generalization. For the most part, these representations were limited to single-contributor causal structures. Although widely used, single-contributor causal structures have several limitations in handling partially ordered and partially instantiated plans. The foremost among these is that they are incapable of exploiting redundancy in the plan. In this paper, we explore multi-contributor causal structures as a way of overcoming these limitations. We will provide a general formulation for multi-contributor causal links, and explore the properties of several special classes of this formulation. We will also discuss their applications in plan generation, modification and generalization.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32:333--377, </volume> <year> 1987. </year>
Reference-contexts: For plans involving strips type operators without conditional or deductive effects, the tweak truth criterion <ref> [1] </ref> provides a set of necessary and sufficient conditions under which every completion of a partially ordered partially instantiated plan will be correct in the above sense. 2 Formulating Multi-contributor causal links In formulating multi-contributor validation structures we are faced with a choice as to how conservative our formulation should be. <p> either w s 0 or 9s 2 S such that s 0 s 2 Note that requiring that all the contributors of a causal link must provide an effect that will necessarily codesignate with the condition being supported, is in general stronger than the constraints imposed by tweak truth criterion <ref> [1] </ref>. Consider, for example, the case of a plan where a step w needs a condition P (v), s1 has an effect P (x), s 2 has an effect P (z), s 1 w, s 2 w, s 1 and s 2 are unordered w.r.t. to each other. <p> This facilitates a more flexible way of accommodating plans that are correct by the white-knight clause of tweak truth criterion <ref> [1] </ref>. Consider, for example, the prerequisite P of step f in in the plan MP shown in them can do it in all the completions of MP. <p> S is not a singleton) if and only if proving the truth of p at w in the plan P would require using the white-knight clause in tweak's truth criterion <ref> [1] </ref>. Thus, irredundancy generalizes the single contributor validation structure (cf [9][12]) just enough to allow plans that have white-knight interactions. In particular, irredundant validation structures admit multiple contributors in causal links only when they are absolutely necessary. <p> The completeness condition should be seen as imposing a particular bias (c.f. [15]) on the search space of partially ordered plans defined by Chapman's truth criterion <ref> [1] </ref>. <p> Such a step, however, introduces two complications: (i) Allowing removal of contributors as a way of resolving interactions introduces retraction into the truth criterion of the planner. This is contrary to the philosophy of most first principles generative planners (such as tweak <ref> [1] </ref>) which have monotonic refinement truth criteria. (ii) Even if the planner were to allow retraction as a part of its truth criterion, retraction in general introduces superfluous constraints into the plan, affecting its minimality. <p> There are also some interesting relations between this paper and the recent work on systematic nonlinear planning algorithms. In contrast to traditional planning algorithms like nonlin [21] and tweak <ref> [1] </ref>, the planning algorithms described in [12] and [13] 14 maintain exhaustive validation structures. As mentioned in Section 3.3, exhaustiveness property provides a tight correspondence between a nonlinear plan and its completions, which is used in these planners to avoid redundancy in the search space. <p> What we have here is a tradeoff between redundancy in the search space explored by the planner, and the amount of commitment the planner is making. Planners like tweak <ref> [1] </ref> have very low commitment, but may be searching in highly redundant search spaces. Planners like UA [13] and SNLP [12, 18] guarantee systematicity, but impose higher commitment and thus may lead to more backtracking. <p> In particular, if the domain is such that the planner is forced to go through most of its search space before finding a solution, a planner with low redundancy in its search space can be expected to do better than a fully least-committed planner such as tweak <ref> [1] </ref>. On the other hand, when the solution density is not very low, a planner which provides systematicity property through increased commitment may do worse than tweak. The planning algorithm based on multi-contributor causal structures, described in Figure 3 strikes an interesting balance here. <p> The planning algorithm based on multi-contributor causal structures, described in Figure 3 strikes an interesting balance here. In particular, by using multi-contributor validation structures, our planner reduces amount of commitment, while still maintaining exhaustiveness. Compared to tweak <ref> [1] </ref>, which does not maintain any type of causal structures, this algorithm still does more commitment and higher backtracking. <p> There are several issues that remain to be addressed regarding multi-contributor causal structures. Foremost among these is characterizing their effect on the planning performance. In Section 5, we suggested that the algorithm shown in 3 strikes the middle ground between planners such as tweak <ref> [1] </ref> which have very low commitment but have high redundancy in the search space, and planners such as SNLP [12] and UA [13] which have very high commitment but avoid redundancy in the search space.
Reference: [2] <author> S.A. Chien. </author> <title> An Explanation-Based Learning Approach to Incremental Planning. </title> <type> (Ph.D. Dissertation). </type> <note> Available as Technical Report UIUCDCS-R-90-1646, </note> <institution> Dept. of Computer Science, University of Illinois, Urbana, IL, </institution> <year> 1990. </year>
Reference: [3] <author> K. Currie and A. Tate. O-Plan: </author> <title> The Open Planning Architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 52 </volume> <pages> 49-86. </pages>
Reference-contexts: Thus, none of the initial contributors are all irrelevant. However, subsequent planning may introduce ordering relations among them, making them irrelevant minimality of the plan and the completeness of the planner). O-plan <ref> [3] </ref>, a successor of nonlin, has some provisions to rectify this [4]. The development of justification framework in Section 4.2 provides a systematic basis for doing this.
Reference: [4] <author> L. Daniels. </author> <title> Planning and operations research. </title> <booktitle> In: Artificial Intelligence: Tools, Techniques, </booktitle> <editor> and Applications (T. O'Shea and M. Eisenstadt (Ed). </editor> <publisher> Harper & Row, </publisher> <address> New York, </address> <year> 1984. </year>
Reference-contexts: Thus, none of the initial contributors are all irrelevant. However, subsequent planning may introduce ordering relations among them, making them irrelevant minimality of the plan and the completeness of the planner). O-plan [3], a successor of nonlin, has some provisions to rectify this <ref> [4] </ref>. The development of justification framework in Section 4.2 provides a systematic basis for doing this. O-plan also had a more generalized notion of protection intervals called ``clouds'' [22], which were designed to manage the contributors and terminators of aggregated sets of dependencies.
Reference: [5] <author> S. Hanks and D. Weld. </author> <title> Systematic Adaptation for Case-Based Planning. </title> <type> Technical Report 91-10-03, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA, </address> <year> 1991. </year>
Reference: [6] <author> P. Langley. </author> <title> Systematic and Nonsystematic search strategies. </title> <note> Submitted to AAAI-92. </note>
Reference-contexts: Planners like UA [13] and SNLP [12, 18] guarantee systematicity, but impose higher commitment and thus may lead to more backtracking. The tradeoff between non-redundancy in search space and least-commitment will depend to a large extent on the density of solutions in the domain <ref> [6] </ref>. In particular, if the domain is such that the planner is forced to go through most of its search space before finding a solution, a planner with low redundancy in its search space can be expected to do better than a fully least-committed planner such as tweak [1].
Reference: [7] <author> S. Kambhampati. </author> <title> Mapping and retrieval during plan reuse: A validation-structure based approach. </title> <booktitle> In Proceedings of 8th National Conference on Artificial Intelligence, </booktitle> <month> August </month> <year> 1990. </year>
Reference: [8] <author> S. Kambhampati. </author> <title> A theory of plan modification. </title> <booktitle> In Proceedings of 8th National Conference on Artificial Intelligence, </booktitle> <month> August </month> <year> 1990. </year>
Reference: [9] <author> S. Kambhampati and J.A. Hendler. </author> <title> A validation structure based theory of plan modification and reuse. </title> <note> Artificial Intelligence (To appear). (Available as Technical Report STAN-CS-90-1312, </note> <institution> Computer Science Department, Stanford University). </institution>
Reference-contexts: 1 Introduction Representation and use of causal structure of the plans has been a long-standing theme in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals [19, 20] [23], goal structure [21], plan rationale [24], causal links [12], and validations <ref> [9] </ref>. Such representations have been used extensively in plan generation to keep track of interactions and to systematize the search process [21][12]; in plan recognition to capture the plan rationale [14]; in replan-ning, plan modification and abstraction planning to justify individual planning decisions and to retract unjustified ones [9][5][25]; in plan <p> Additionally, it is said to be strongly justified w.r.t. V if all the steps, ordering constraints and binding constraints are strongly justified. Justifications like these can be computed for each individual decision in polynomial time or can be maintained incrementally during planning and plan modification (cf <ref> [9] </ref>). These justifications can be used to retract superfluous constraints from the plan while preserving the correctness of the plan. In the following we describe two slightly different justification procedures with differing properties: Justifying a Plan: Justifying a plan is an iterative process. <p> Then V is not guaranteed to be a relevant or exhaustive validation structure for P 0 . Both these notions of justifications become equivalent in single contributor validation structures. The justification framework described in this section can form the basis for plan modification <ref> [9] </ref> and plan generalization (cf. [10]) procedures, based on multi-contributor validation structures.
Reference: [10] <author> S. Kambhampati and S.T. Kedar. </author> <title> Explanation-Based Generalization of Partially Ordered Plans. </title> <booktitle> In Proc. 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: be accomplished without loss of completeness in the next section, where we will describe a validation-structure based justification framework that can be used for this purpose. 4.2 Justifying Plans with Multi-contributor Causal Structures Causal structure representations have been shown to be very valuable in guiding plan modification [9][5], and generalization <ref> [10] </ref>. From a first principles perspective, the only augmentation that is needed to enable a generative planner to modify a given plan to solve a new problem, or to generalize a given plan by removing unnecessary constraints, is the ability to retract some constraints on the plan. <p> Then V is not guaranteed to be a relevant or exhaustive validation structure for P 0 . Both these notions of justifications become equivalent in single contributor validation structures. The justification framework described in this section can form the basis for plan modification [9] and plan generalization (cf. <ref> [10] </ref>) procedures, based on multi-contributor validation structures.
Reference: [11] <author> S. Kambhampati. </author> <title> Characterizing Multi-Contributor Causal Structures for Planning. </title> <type> Technical Report, </type> <institution> Dept. of Computer Science and Engineering, Arizona State University, </institution> <address> Tempe, AZ 85287. </address>
Reference-contexts: Our empirical studies with [18] in a variant of blocks world (that induces multiple redundant contributors for some pre-requisites) demonstrate that not only do such planners fail to exploit redundant contributors, but their performance actually worsens in the presence of redundant contributors <ref> [11] </ref> 1 . <p> Our empirical experimentation with a systematic planner ([12]) shows that this increased commitment leads to excessive backtracking on the average and thereby adversely affect the planners performance <ref> [11] </ref>. What we have here is a tradeoff between redundancy in the search space explored by the planner, and the amount of commitment the planner is making. Planners like tweak [1] have very low commitment, but may be searching in highly redundant search spaces.
Reference: [12] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic Nonlinear Planning. </title> <booktitle> In Proc. 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of the plans has been a long-standing theme in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals [19, 20] [23], goal structure [21], plan rationale [24], causal links <ref> [12] </ref>, and validations [9]. Such representations have been used extensively in plan generation to keep track of interactions and to systematize the search process [21][12]; in plan recognition to capture the plan rationale [14]; in replan-ning, plan modification and abstraction planning to justify individual planning decisions and to retract unjustified ones <p> Our formulation below strikes a middle ground: Definition 1 (Causal Link/Protection Interval) A causal link (or protection interval) of a plan P is a 3-tuple hS; p; wi (or S ! w in McAllester's notation <ref> [12] </ref>) where (i) w is an individual step and S is a set of steps belonging to plan P, (ii) w requires a condition p (iii) 8s 2 S 2 (s w) and (iv) for each step s 2 S, there exists an effect e 2 ef f ects (s) such <p> Since they do not admit any form of redundant contributors, a planning algorithm that constructs plans with irredundant validation structures can suffer from the some of the same drawbacks as the planner's using single contributor causal links in terms of premature commitment to contributors (see Section 1) <ref> [12] </ref>. 3.2 Relevant Validation Structures Next, we will look at the notion of relevant validation structure which is more general than irredundant validation structures --- in that it allows redundant contributors, but more specific than the formulation in Section 2 as it stipulates that each contributor should be an effective contributor <p> In particular, given a validation structure V, and a totally ordered totally instantiated plan CP, we can uniquely determine the nonlinear abstraction of CP to which V is an exhaustive validation structure. This tight correspondence is used in McAllester's planner <ref> [12] </ref> to ensure the systematicity of the planning algorithm. 4 Applications of Multi-contributor Causal Links 4.1 Planning with Multi-Contributor Causal Links In this section, we will describe how multi-contributor validation structures described in the previous sections can be used in planning. <p> In particular, we will provide a McAllester style planning algorithm <ref> [12] </ref> that is capable of generating plans with relevant and exhaustive 5 validation structures. <p> called a threat to a causal link hS ; p ; wi if v is a step other than w, 4 For the special case of single contributor causal structures, the plans produced by nonlin [21] do not in general have exhaustive validation structures, while those produced by McAllester's planner <ref> [12] </ref>, and Minton et al's UA planner [13] have exhaustive validation structures. 5 See Section 5 for a rationale for maintaining exhaustive validation structures 6 Note that by Definition 2, a step asserting p will not violate the validation hS ; p ; wi. <p> Although this definition of threat is stronger than that used in most classical planners, we will see that the use of multi-contributor causal structures makes sure that it does not cause any excessive backtracking (as was the case in <ref> [12, 13] </ref>). Using this definition, we can now develop the termination condition for the planner. <p> It is easy to show that this bias does not affect the completeness of the planner (in the sense that for every planning problem solvable by tweak, there exists a plan for that problem which satisfies the termination condition specified in definition 9). 7 <ref> [12] </ref> that generates plans that are complete by this definition. To simplify discussion, we only show the procedure for generating ground partially ordered plans. The procedure for generating partially instantiated and partially ordered plans can be obtained in a straightforward fashion using the lifting transformation discussed in [12]. <p> definition 9). 7 <ref> [12] </ref> that generates plans that are complete by this definition. To simplify discussion, we only show the procedure for generating ground partially ordered plans. The procedure for generating partially instantiated and partially ordered plans can be obtained in a straightforward fashion using the lifting transformation discussed in [12]. The important difference between our algorithm and the one proposed in [12] is that ours maintains multiple possible contributors for each pre-requisite in a systematic fashion. Because of this, its treatment of unsafe causal links is different. <p> To simplify discussion, we only show the procedure for generating ground partially ordered plans. The procedure for generating partially instantiated and partially ordered plans can be obtained in a straightforward fashion using the lifting transformation discussed in <ref> [12] </ref>. The important difference between our algorithm and the one proposed in [12] is that ours maintains multiple possible contributors for each pre-requisite in a systematic fashion. Because of this, its treatment of unsafe causal links is different. <p> There are also some interesting relations between this paper and the recent work on systematic nonlinear planning algorithms. In contrast to traditional planning algorithms like nonlin [21] and tweak [1], the planning algorithms described in <ref> [12] </ref> and [13] 14 maintain exhaustive validation structures. As mentioned in Section 3.3, exhaustiveness property provides a tight correspondence between a nonlinear plan and its completions, which is used in these planners to avoid redundancy in the search space. <p> What we have here is a tradeoff between redundancy in the search space explored by the planner, and the amount of commitment the planner is making. Planners like tweak [1] have very low commitment, but may be searching in highly redundant search spaces. Planners like UA [13] and SNLP <ref> [12, 18] </ref> guarantee systematicity, but impose higher commitment and thus may lead to more backtracking. The tradeoff between non-redundancy in search space and least-commitment will depend to a large extent on the density of solutions in the domain [6]. <p> In Section 5, we suggested that the algorithm shown in 3 strikes the middle ground between planners such as tweak [1] which have very low commitment but have high redundancy in the search space, and planners such as SNLP <ref> [12] </ref> and UA [13] which have very high commitment but avoid redundancy in the search space. Our next task will be to implement the planning algorithm shown in Figure 3, and conduct empirical experimentation to test this conjecture.
Reference: [13] <author> S. Minton, J. Bresina and M. Drummond. </author> <title> Commitment Strategies in Planning: A Comparative Analysis. </title> <booktitle> In Proc. 12th IJCAI, </booktitle> <year> 1991. </year>
Reference-contexts: hS ; p ; wi if v is a step other than w, 4 For the special case of single contributor causal structures, the plans produced by nonlin [21] do not in general have exhaustive validation structures, while those produced by McAllester's planner [12], and Minton et al's UA planner <ref> [13] </ref> have exhaustive validation structures. 5 See Section 5 for a rationale for maintaining exhaustive validation structures 6 Note that by Definition 2, a step asserting p will not violate the validation hS ; p ; wi. <p> Although this definition of threat is stronger than that used in most classical planners, we will see that the use of multi-contributor causal structures makes sure that it does not cause any excessive backtracking (as was the case in <ref> [12, 13] </ref>). Using this definition, we can now develop the termination condition for the planner. <p> There are also some interesting relations between this paper and the recent work on systematic nonlinear planning algorithms. In contrast to traditional planning algorithms like nonlin [21] and tweak [1], the planning algorithms described in [12] and <ref> [13] </ref> 14 maintain exhaustive validation structures. As mentioned in Section 3.3, exhaustiveness property provides a tight correspondence between a nonlinear plan and its completions, which is used in these planners to avoid redundancy in the search space. <p> What we have here is a tradeoff between redundancy in the search space explored by the planner, and the amount of commitment the planner is making. Planners like tweak [1] have very low commitment, but may be searching in highly redundant search spaces. Planners like UA <ref> [13] </ref> and SNLP [12, 18] guarantee systematicity, but impose higher commitment and thus may lead to more backtracking. The tradeoff between non-redundancy in search space and least-commitment will depend to a large extent on the density of solutions in the domain [6]. <p> In Section 5, we suggested that the algorithm shown in 3 strikes the middle ground between planners such as tweak [1] which have very low commitment but have high redundancy in the search space, and planners such as SNLP [12] and UA <ref> [13] </ref> which have very high commitment but avoid redundancy in the search space. Our next task will be to implement the planning algorithm shown in Figure 3, and conduct empirical experimentation to test this conjecture.
Reference: [14] <author> M.E. Pollack. </author> <title> A Model of Plan Inference that Distinguishes Between the Beliefs of Actors and Observers. </title> <booktitle> In Proceedings of the 1986 Workshop on Reasoning about Actions and Plans, </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Palo Alto, </address> <year> 1987. </year>
Reference-contexts: Such representations have been used extensively in plan generation to keep track of interactions and to systematize the search process [21][12]; in plan recognition to capture the plan rationale <ref> [14] </ref>; in replan-ning, plan modification and abstraction planning to justify individual planning decisions and to retract unjustified ones [9][5][25]; in plan debugging to characterize the plan failures [19][17]; and in plan generalization to explain plan correctness and use that explanation as a basis for generalization [10][2].
Reference: [15] <author> P.S. Rosenbloom, S. Lee and A. Unruh. </author> <title> Bias in Planning and Explanation-Based Learning. In Machine Learning Methods for Planning and Scheduling. </title> <editor> S. Minton (Ed.). </editor> <publisher> Morgan Kaufmann (in press) </publisher>
Reference-contexts: In particular, any plan that is complete by the above definition is also correct by definition 3, has a relevant validation structure by property 6.2, and has an exhaustive validation structure by definition 7.1. The completeness condition should be seen as imposing a particular bias (c.f. <ref> [15] </ref>) on the search space of partially ordered plans defined by Chapman's truth criterion [1].
Reference: [16] <author> E. Sacerdoti. </author> <title> Planning in a Hierarchy of Abstraction Spaces. </title> <journal> Artificial Intelligence, </journal> <volume> 5(2), </volume> <year> 1975. </year>
Reference-contexts: Although the idea of multi-contributor causal links has been first introduced in Tate's nonlin [21] (see Section 5), there has not been any systematic study of their properties. 1 Note that use of abstraction techniques, such as precondition abstraction <ref> [16, 25] </ref> can mitigate this to some extent by postponing achievement of preconditions which are likely to have multiple contributors (and thus are easily achievable). The primary goal of this paper is to develop a formal charac-terization of multi-contributor causal structures for planning.
Reference: [17] <author> R. Simmons. </author> <title> A Theory of Debugging. </title> <booktitle> In Proceedings of 7th AAAI, </booktitle> <address> St. Paul, MN, </address> <year> 1988. </year>
Reference: [18] <author> S. Soderland A. Barrett and D. Weld. </author> <title> The effect if step-order representations on planning. </title> <type> Technical Report 91-05-06, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: This stronger definition of un-threatened and un-usurped causal links is introduced to avoid redundancy in the planner's search process (i.e., to make sure that the planner will not visit two plans with overlapping completions). Our empirical studies with <ref> [18] </ref> in a variant of blocks world (that induces multiple redundant contributors for some pre-requisites) demonstrate that not only do such planners fail to exploit redundant contributors, but their performance actually worsens in the presence of redundant contributors [11] 1 . <p> What we have here is a tradeoff between redundancy in the search space explored by the planner, and the amount of commitment the planner is making. Planners like tweak [1] have very low commitment, but may be searching in highly redundant search spaces. Planners like UA [13] and SNLP <ref> [12, 18] </ref> guarantee systematicity, but impose higher commitment and thus may lead to more backtracking. The tradeoff between non-redundancy in search space and least-commitment will depend to a large extent on the density of solutions in the domain [6].
Reference: [19] <author> G.J. Sussman. </author> <title> A Computer Model of Skill Acquisition. </title> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1975 </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of the plans has been a long-standing theme in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals <ref> [19, 20] </ref> [23], goal structure [21], plan rationale [24], causal links [12], and validations [9].
Reference: [20] <author> A. Tate. </author> <title> Interacting Goals and Their Use. </title> <booktitle> In Proceedings of IJCAI-75, </booktitle> <pages> pages 215-218, </pages> <address> Tbilisi, USSR, </address> <year> 1975. </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of the plans has been a long-standing theme in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals <ref> [19, 20] </ref> [23], goal structure [21], plan rationale [24], causal links [12], and validations [9].
Reference: [21] <author> A. Tate. </author> <title> Generating Project Networks. </title> <booktitle> In Proceedings of IJCAI-77, pages 888--893, </booktitle> <address> Boston, MA, </address> <year> 1977. </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of the plans has been a long-standing theme in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals [19, 20] [23], goal structure <ref> [21] </ref>, plan rationale [24], causal links [12], and validations [9]. Such representations have been used extensively in plan generation to keep track of interactions and to systematize the search process [21][12]; in plan recognition to capture the plan rationale [14]; in replan-ning, plan modification and abstraction planning to justify individual planning <p> Although the idea of multi-contributor causal links has been first introduced in Tate's nonlin <ref> [21] </ref> (see Section 5), there has not been any systematic study of their properties. 1 Note that use of abstraction techniques, such as precondition abstraction [16, 25] can mitigate this to some extent by postponing achievement of preconditions which are likely to have multiple contributors (and thus are easily achievable). <p> of a validation as follows: Definition 8 (Threat for a Validation) A step v is called a threat to a causal link hS ; p ; wi if v is a step other than w, 4 For the special case of single contributor causal structures, the plans produced by nonlin <ref> [21] </ref> do not in general have exhaustive validation structures, while those produced by McAllester's planner [12], and Minton et al's UA planner [13] have exhaustive validation structures. 5 See Section 5 for a rationale for maintaining exhaustive validation structures 6 Note that by Definition 2, a step asserting p will not <p> an implementation algorithm 9 In implementing this procedure, it is possible to reduce some of this later interaction resolution by setting S initially to the set of steps that are the last incoming contributors of p in each branch. (Such steps are called the critical PV nodes in nonlin terminology <ref> [21] </ref>). 10 An alternative to maintaining a relevant validation structure all through the planning cycle is to wait until a correct plan is generated and then check for irrelevant contributors. <p> In step 3 of the algorithm, when the threat v is deleting the condition being supported by the causal link hS ; p ; wi, one possibility is to see if there is a way of eliminating this interaction by removing some non-irredundant contributor from S ( cf. <ref> [21] </ref>). If this is possible, then we can eliminate the interaction without putting any further constraints on the plan (see Section 5). Such a step, however, introduces two complications: (i) Allowing removal of contributors as a way of resolving interactions introduces retraction into the truth criterion of the planner. <p> It can also be used to support retraction of contributors as a way of resolving interactions during planning (as discussed at the end of Section 4.1). 5 Related Work To our knowledge, nonlin <ref> [21] </ref> and its successors are the only previous planners to have used multi-contributor causal links. nonlin's GOST table, in conjunction with its Q&A procedure, was capable of maintaining multiple redundant contributors for each prerequisite in the plan. nonlin's method of maintaining the multiple contributors was not complete, however. <p> Clouds also allowed O-plan to manage multiple contributors all through the planning, by actively keeping track of the ``last incoming contributor'' wavefront. There are also some interesting relations between this paper and the recent work on systematic nonlinear planning algorithms. In contrast to traditional planning algorithms like nonlin <ref> [21] </ref> and tweak [1], the planning algorithms described in [12] and [13] 14 maintain exhaustive validation structures. As mentioned in Section 3.3, exhaustiveness property provides a tight correspondence between a nonlinear plan and its completions, which is used in these planners to avoid redundancy in the search space.
Reference: [22] <author> A. Tate. </author> <title> Goal Structure, Holding Periods and ``Clouds.'' </title> <booktitle> In Proceedings of 1986 Timberline workshop on Reasoning about Actions and Plans, </booktitle> <pages> pages 267-277, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1986. </year>
Reference-contexts: O-plan [3], a successor of nonlin, has some provisions to rectify this [4]. The development of justification framework in Section 4.2 provides a systematic basis for doing this. O-plan also had a more generalized notion of protection intervals called ``clouds'' <ref> [22] </ref>, which were designed to manage the contributors and terminators of aggregated sets of dependencies. Clouds also allowed O-plan to manage multiple contributors all through the planning, by actively keeping track of the ``last incoming contributor'' wavefront.
Reference: [23] <author> R. Waldinger. </author> <title> Achieving several goals simultaneously. </title> <booktitle> In Machine Intelligence 8, </booktitle> <publisher> Ellis Horwood Limited, </publisher> <address> Chichester, </address> <year> 1977. </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of the plans has been a long-standing theme in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals [19, 20] <ref> [23] </ref>, goal structure [21], plan rationale [24], causal links [12], and validations [9].
Reference: [24] <author> D. </author> <title> Wilkins Domain Independent Planning: Representation and Plan Generation. </title> <journal> Artificial Intelligence, </journal> <volume> 22:3, </volume> <year> 1984. </year>
Reference-contexts: 1 Introduction Representation and use of causal structure of the plans has been a long-standing theme in classical planning. Some of the specific (though similar) causal structure representations that have been proposed include Protection intervals [19, 20] [23], goal structure [21], plan rationale <ref> [24] </ref>, causal links [12], and validations [9].
Reference: [25] <author> Q. Yang and J.D. Tenenberg. abtweak: </author> <title> Abstracting a nonlinear, least-commitment planner. </title> <booktitle> In Proceedings of 8th AAAI, </booktitle> <year> 1990. </year>
Reference-contexts: Although the idea of multi-contributor causal links has been first introduced in Tate's nonlin [21] (see Section 5), there has not been any systematic study of their properties. 1 Note that use of abstraction techniques, such as precondition abstraction <ref> [16, 25] </ref> can mitigate this to some extent by postponing achievement of preconditions which are likely to have multiple contributors (and thus are easily achievable). The primary goal of this paper is to develop a formal charac-terization of multi-contributor causal structures for planning.
References-found: 25

