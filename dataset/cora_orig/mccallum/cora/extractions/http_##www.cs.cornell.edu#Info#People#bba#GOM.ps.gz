URL: http://www.cs.cornell.edu/Info/People/bba/GOM.ps.gz
Refering-URL: http://www.cs.cornell.edu/Info/People/bba/papers.html
Root-URL: http://www.cs.brown.edu/
Title: Towards An ObjectOriented Framework For Multi-Domain Management  
Author: Bela Ban 
Keyword: Generic Object Model, X.700, Corba, Dynamic Invocation Interface, OSI Network Management, Proxy, Interoperability, Object System, Multi-Domain Management Framework  
Date: Dec 18, 1995  
Address: Saeumerstr. 4  
Affiliation: IBM Zurich Research Laboratory  
Pubnum: 8803 Rueschlikon  
Abstract: With the decentralization of computing resources into a variety of possibly heterogeneous networks and with the advent of distributed computing, management of networks has become both more important and complex. Today, network management (NM) is mostly conducted employing the Internet (SNMP) or the OSI (CMIP) network management standards. With the introduction of the Corba industry-standard [OMG], at least some of the network management tasks are likey to be done using Corba in the future. A possible scenario may be the case of Customer Premises Networks (CPNs) with the carrier employing OSI NM to manage the services provided to the customer and the customer managing his part of the network using Corba technology. Given the fact that the carrier in some cases needs to have access to some of the customer's management information and vice versa, both parties involved need to convert information to / from the other management model used. The task of conversion is very complex and requires knowledge of the other party's management model. Interchange of management information becomes even more difficult when more than two parties are involved, with each party using a different management model. In the worst case, each of the parties involved has to know the union of all management models used. Unfortunately, to know a management model doesn't yet mean to be able to program it since a lot of different APIs may exist for the same model. In OSI NM there is e.g. XOM/XMP [XOM] which is an X/Open standard, but is quite difficult to program and there are others such as the string-based value notation of cmipWorks [cmipWorks]. This paper proposes a management framework that is based on a uniform generic object model (GOM) that can be used to transparently manipulate instances of various specific object models. The object model consists of classes, operations, attributes, values and a type hierarchy which are modeled using the C++ language as host system. By using and manipulating only instances of these classes, a uniform and transparent interface is offered which allows to disregard the specific underlying object model(s) used and the idiosyncracies they feature. In addition, the generic object model has a Meta Information Database (MID) which maintains information about the classes, types etc. used in the specific object models. Using the MID, the generic object model is able to offer a highly dynamic, weakly-typed (runtime-checked) interface that is very flexible and suited to manage information distributed over several, disparate locations. The structure of this paper is as follows. First, a short overview of the X.700 and Corba object models will be given. Then a summary of the work currently being done in inter-domain management will be presented. The main part deals with the presentation of the generic object model, which will be positioned against other approaches to inter-domain management. 
Abstract-found: 1
Intro-found: 1
Reference: [ANSA] <institution> The ANSAware 4.1 manual set. Architecture Projects Management. Poseidon House, </institution> <address> Castle Park. Cambridge, </address> <year> 1993. </year>
Reference-contexts: Most approaches described below restrict themselves to the SNMP, CMIP and Corba domains, but, of course, any other object model such as e.g. COM [Brock] , ANSA <ref> [ANSA] </ref> or even C++ [Strou] can be seen as a domain. Inter-domain management is necessary in cases where one is forced to use more than a single object model. This may be the case when X.700 is predominantly used and when an SNMP-based MIB is to be accessed.
Reference: [ASN1] <author> ISO/IEC 8824. </author> <title> Specification of Abstract Syntax Notation One (ASN.1). </title>
Reference-contexts: The type of attributes contained within a managed object is defined using Abstract Syntax Notation One <ref> [ASN1] </ref>. ASN.1 defines atomic types such as integer, real or string and aggregate types such as lists, structs and unions.
Reference: [Brock] <author> Brockschmidt, K. </author> <title> Inside OLE2. </title> <publisher> Microsoft Press. </publisher> <address> Redmond, </address> <year> 1994. </year>
Reference-contexts: Most approaches described below restrict themselves to the SNMP, CMIP and Corba domains, but, of course, any other object model such as e.g. COM <ref> [Brock] </ref> , ANSA [ANSA] or even C++ [Strou] can be seen as a domain. Inter-domain management is necessary in cases where one is forced to use more than a single object model. <p> Some significant amount of work has already been done in that direction, c.f. [Deri]. Another important enhancement will be the integration of other object or information-models such as COM <ref> [Brock] </ref> or SNMP [SNMP]. 6. Acknowledgements The author would like to thank Luca Deri for encouragement and numerous valuable discussions on the generic object model. 13
Reference: [Challa] <author> Challa, Siva. </author> <title> Towards an Interoperable, Reflective Common Object Model for Statically-Typed ObjectOriented Languages. </title> <institution> Dept. of Computer Science. Blacksburg, Virginia, </institution> <year> 1994. </year>
Reference: [CMIP] <author> ISO/IEC 9596. </author> <title> Common Management Information Protocol (CMIP). </title>
Reference-contexts: Queries about or changes of the state of the network can only be sent to the agent, not directly to the objects. The protocol used to interact with the agent is CMIP <ref> [CMIP] </ref>. A manager 4 can send messages and receive replies over this protocol to manage the agent. An agent may also send unsolicited information asynchronously to the manager e.g. to notify it of a problem in the case of an element failure.
Reference: [cmipWorks] <author> Geiger, G., W. Allen, A. Majtenyi, P. Reder. </author> <type> IBM cmipWorks Technical Paper. </type> <institution> IBM, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: This implies that 7 Please note the ASN.1 value notation taken here is the one from <ref> [cmipWorks] </ref>, which uses a short form for RDNs and DNs. 8 The same naming scheme can als be used to ensure object identity across several agents. 9 This may not be possible when the name binding specifies that contained instances have to be deleted before deletion of the parent. _________________________ although
Reference: [Deri] <author> Deri, Luca. </author> <title> Breaking Monolythic Applications Apart. </title> <type> Internal Report. </type> <institution> IBM Zurich Reasearch Laboratory. Rueschlikon, </institution> <year> 1995. </year>
Reference-contexts: Also, ways of dynamically (i.e., at runtime) loading user-defined customization code such as converters, OSI stacks or policy objects 25 will be investigated. Some significant amount of work has already been done in that direction, c.f. <ref> [Deri] </ref>. Another important enhancement will be the integration of other object or information-models such as COM [Brock] or SNMP [SNMP]. 6. Acknowledgements The author would like to thank Luca Deri for encouragement and numerous valuable discussions on the generic object model. 13
Reference: [DSOM] <institution> SOMobjects Developer Toolkit Programmer's Reference. IBM. </institution> <address> New York, </address> <year> 1993. </year>
Reference-contexts: This means that GOM instances can be saved in a database or marshalled / unmarshalled to be sent across a network. A prototype including a subset of the functionality of GOM has been created at the IBM Zurich Research Laboratory using an implementation of Corba <ref> [DSOM] </ref> and an OSI agent develoment platform [Fer95]. The prototype includes creation and deletion of GOM instances using the MID, GET and SET-requests and a modified ASN.1 and GDMO compiler. Currently, there exists a graphical user-interface for the manipulation of GOM.
Reference: [Fer95] <author> Feridun, M., L. Heusler and R. Nielsen: </author> <title> Implementing OSI Agents for TMN. </title> <institution> IBM Research Division, Zurich Research Laboratory. Rueschlikon, Switzerland. </institution>
Reference-contexts: When e.g. an M-GET request is sent to the agent, the agent will first find the 5 (in C/C++ terms). In the following discussion, C++ types are used to explain ASN.1 types 6 Using the TMN Workbench's agent generator tool <ref> [Fer95] </ref>, a developer may hard-code which conditional packages must be present before an agent is created. _________________________ managed object to which the request is directed, then retrieve the information from the managed object and finally return it to the sender. <p> A prototype including a subset of the functionality of GOM has been created at the IBM Zurich Research Laboratory using an implementation of Corba [DSOM] and an OSI agent develoment platform <ref> [Fer95] </ref>. The prototype includes creation and deletion of GOM instances using the MID, GET and SET-requests and a modified ASN.1 and GDMO compiler. Currently, there exists a graphical user-interface for the manipulation of GOM. It uses a modified HTTP-server and CGI-scripts for communication between a GOM manager and the frontend.
Reference: [Gamma] <author> Gamma, Erich, Richard Helm, Ralph Johnson and John Vlissides: </author> <title> Design Patterns. Elements of Reusable ObjectOriented Software. </title> <publisher> Addison Wesley, </publisher> <address> Reading 1995. </address>
Reference-contexts: The disadvantage of 16 A service is an operation offered by a class. The set of services offered by a class comprise the contract. 17 In the case of X.700, a CMIP PDU is generated and sent to the agent. 18 c.f. <ref> [Gamma] </ref> 19 How the generic concept of location is mapped to a concrete location is not detailed here for space reasons. _________________________ this approach is that the manager has to be recompiled whenever the original GDMO/ASN.1 files are modified or when new files are added. <p> Modeling attributes and their values as separate C++ classes offers additional flexibility with respect to X.700 conditional packages, extensible attribute groups and the ASN.1 ANY DEFINED BY type. 25 Policy objects (called strategies in <ref> [Gamma] </ref>) are currently used in the prototype to customize caching of attribute values. _________________________ Providing this flexibility increases the chance that future object models may be integrated with the GOM as well.
Reference: [GDMO] <author> ISO/IEC 10165-4. </author> <title> Guidelines for the Definition of Managed Objects. </title> <year> 1992. </year>
Reference-contexts: An ObjectClass is a union with the members globalForm of type OBJECT IDENTIFIER and nonSpecificForm of type INTEGER. An ObjectInstance is also a union with 3 members. ASN.1 types are assigned to attributes within managed objects as will be shown later. Managed objects are defined using GDMO <ref> [GDMO] </ref> notation. An example of GDMO is given in Fig. 3: customer MANAGED OBJECT CLASS DERIVED FROM "CCITT Rec.
Reference: [Hierro] <author> Hierro, Juan: </author> <title> Architectural Issues For Using Corba Technology in OSI Systems Management. </title> <note> Append of draft to XoJIDM forum.Aug 1994. </note>
Reference-contexts: But nothing precludes the techniques presented below from being used in a more general meaning of the word; namely the creation and manipulation of instances from a different object model (domain). 13 For further references c.f. [Soukouti1], [Soukouti2], [Mazum] and <ref> [Hierro] </ref>. _________________________ 2.3. Definition Language Interfaces are specified using the Interface Definition Language (IDL) which is a language used to fully define all aspects of the interface, but no aspects of the implementation. <p> Skeleton) Server Stub Implementation (Part of CMIP OA) (using XOM / XMP) GDMO / ASN.1 - IDL Translator IDL Compiler Client Server CMIP-OA Corba Request XOM / XMP To Agent 7 the approaches are similar in nature, we will summarize the preliminary proposal submitted by Telefonica I&D <ref> [Hierro] </ref>. This approach focuses on transparently managing X.700 agents from Corba managers. Corba managers send requests to Corba servers which then communicate with the corresponding X.700 agents via CMIP. <p> Also, sending a request to an agent via a Corba server incurs a time penalty. Finally, the XoJIDM mapping implies a substantial amount of classes and structs that are generated and included in the manager which may result in a bloated executable. An advantage of <ref> [Hierro] </ref> is the fact that all the client stub implementation code is generated at compile time so that no runtime overhead exists on the manager side, but this is partly negated by the fact that most of the time used for a CMIP request is spent in the OSI stack anyway. <p> The architecture of the GOM is shown in figure 7 below: Fig. 7: The Generic Object Model In most approaches to inter-domain management (c.f. section 3), code that converts information from one object model to another is generated at translation time. In <ref> [Hierro] </ref> for example, IDL code is generated from a GDMO/ASN.1 description. Subsequently, the IDL description has to be translated into a Corba language binding, e.g. C++. A manager then includes the generated C++ header files. The disadvantage of 16 A service is an operation offered by a class.
Reference: [JIDM] <institution> Translation of GDMO/ASN.1 Specification into CORBA-IDL (Draft 0.0). </institution>
Reference-contexts: We will, however, concentrate on Corba managers being able to manage X.700 agents and X.700 managers being able to manage Corba agents. 3.1. X/Open Joint Inter-Domain Management (XoJIDM) X/Open's Joint Inter-Domain Management task force is working on the mapping from GDMO/ASN.1 to IDL <ref> [JIDM] </ref> and from IDL to GDMO/ASN.1, which shows that it is mainly concerned about the domains of Corba and X.700. Besides the translation mapping (specification translation), several people 13 are working on documents describing the use of the mapping (interaction translation) at runtime. <p> A disadvantage is that some features of X.700 cannot be adequately mapped to Corba using a static translation approach, but rather require a dynamic, meta-information based approach. In the case of X.700 conditional packages, the solution proposed by X/Open <ref> [JIDM] </ref> is to map all packages to IDL interfaces and, when mapping a GDMO template to an IDL interface, to make the latter inherit from all possible 14 A similar problem exists with extensible attribute groups. <p> The abstract interface through which they can be accessed is defined in the abstract base class GenObj. In contrast to the X/Open approach <ref> [JIDM] </ref>, which creates a class for each managed object template that is encountered in GDMO, in GOM there are only instances of these two classes. Each GOM class has a list of attributes and operations, which are instances of the classes Operation and Attribute respectively.
References-found: 13

