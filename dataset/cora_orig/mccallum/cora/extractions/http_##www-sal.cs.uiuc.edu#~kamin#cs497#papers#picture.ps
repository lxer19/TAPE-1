URL: http://www-sal.cs.uiuc.edu/~kamin/cs497/papers/picture.ps
Refering-URL: http://www-sal.cs.uiuc.edu/~kamin/cs497/papers.html
Root-URL: http://www.cs.uiuc.edu
Title: Pictures: A simple structured graphics model  
Author: Sigbjorn Finne and Simon Peyton Jones, 
Affiliation: Department of Computing Science, University of Glasgow.  
Abstract: We present in this paper a simple, device-independent model for describing two-dimensional graphics using a functional language. Graphical scenes, or pictures, are represented as values that functions can manipulate and inspect to create new values. Complete pictures are constructed by repeatedly composing such picture values together using picture com-binators. A novel aspect of the model presented is its use of structured translation to abstractly express the geometric composition of arbitrary pictures. The structured graphics model presented has been implemented in Haskell, and we also give an overview of a general rendering framework for traversing a picture value. Applications of this renderer include both output to various graphical systems, testing for picking or selection of a picture and the computation of the bounding box of an arbitrary picture. The graphics model forms the basis for all graphical output in a user interface framework being developed in Haskell. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Kavi Arya. </author> <title> Processes in a functional animation system. </title> <booktitle> In Proceedings of the 4th ACM Conference on Functional Programming and Computer Architecture, </booktitle> <pages> pages 382-395, </pages> <address> London, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: The idea of using a functional language to describe graphics is by no means a novel one <ref> [2, 3, 12, 4, 6, 1] </ref>. Our design has been influenced by this previous work and builds on it by providing a more abstract account of picture composition. <p> The inclusion of both Rectangles and poly-lines as drawing primitives highlights a design tradeoff, what should be primitive in a declarative representation of pictures? The one extreme of just providing points or lines as primitives and operations to support the combination of them (as done by <ref> [1, 6] </ref>), is low-level and not a descriptive enough representation of the pictures we want to express and render. At the other end, making every possible known two-dimensional geometric shape a primitive results in a language that is very precise, but complex. <p> Using Escher's square limit as an example, a set of basic tiles were repeatedly combined together using a small set of tiling picture combinators. The repertoire of primitive drawing elements were restricted to lines (a simplification which Arya's functional animation also uses, <ref> [1] </ref>), each of which had to be explicitly placed within some tile coordinate system. Only combinators for horisontal and vertical tiling were provided.
Reference: [2] <author> Joel F. Bartlett. </author> <title> Don't Fidget with Widgets, </title> <type> Draw! Technical Report 6, </type> <institution> DEC Western Digital Laboratory, 250 University Avenue, Palo Alto, California 94301, US, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: This is a somewhat unfortunate situation, as graphics capabilities aren't made use of by applications to better visualise their output. Simple graphics should be simple to express and make use of in a program <ref> [2] </ref>. We present in this paper a simple structured graphics model for expressing two-dimensional graphical scenes using a functional language. <p> The idea of using a functional language to describe graphics is by no means a novel one <ref> [2, 3, 12, 4, 6, 1] </ref>. Our design has been influenced by this previous work and builds on it by providing a more abstract account of picture composition. <p> Commonly used graphics programming interfaces have often painfully complex interfaces for accessing the graphical hardware <ref> [2] </ref>. The multitude of arguments required just to get simple graphics output from an application leads to either poorly structured programs or the avoidance of graphics completely. Simple graphics should be simple to express and integrate into an otherwise non-graphical application.
Reference: [3] <author> Brian Beckman. </author> <title> A scheme for little languages in interactive graphics. </title> <journal> Software-Practice and Experience, </journal> <volume> 21(2) </volume> <pages> 187-207, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: The idea of using a functional language to describe graphics is by no means a novel one <ref> [2, 3, 12, 4, 6, 1] </ref>. Our design has been influenced by this previous work and builds on it by providing a more abstract account of picture composition.
Reference: [4] <editor> Emmanuel Chailloux and Guy Cousineau. </editor> <booktitle> Programming Images in ML. In Proccedings of the ACM SIGPLAN Workshop on ML and its Applications, </booktitle> <year> 1992. </year>
Reference-contexts: The idea of using a functional language to describe graphics is by no means a novel one <ref> [2, 3, 12, 4, 6, 1] </ref>. Our design has been influenced by this previous work and builds on it by providing a more abstract account of picture composition. <p> Several `functional' systems have made use of PostScript [9] as the basic drawing model, layering functional abstractions on top it <ref> [4, 12] </ref>. These approaches make good use PostScript's page description model, but forces the programmer to use PostScript's model of stencil and paint for describing the basic picture elements.
Reference: [5] <editor> Sigbjorn Finne and Simon Peyton Jones. Composing Haggis. </editor> <booktitle> In Proceedings of the Fifth Eurographics Workshop on Programming Paradigms in Computer Graphics, </booktitle> <address> Maastrict, Netherlands, </address> <month> Septem-ber </month> <year> 1995. </year>
Reference-contexts: The graphics model and accompanying renderer forms the basis for graphical output to both workstation and printer in Haggis <ref> [5] </ref>, a user interface framework written in Concurrent Haskell [10]. <p> When the renderer encounters one of the primitives mentioned in Section 3.1, it looks up and invokes the corresponding method in the Painter. Currently, two graphical Painters exist for producing output in PostScript and to Haggis <ref> [5] </ref>, but the Painter interface has also been used to implement picking, i.e., testing whether a point intersects the picture, and to incrementally update parts of a Picture structure. 6 Related work As stated in the introduction, the work reported here build on previous approaches to graphics using a functional language. <p> An interesting area of future work is how to make the Pictures come alive. In Haggis <ref> [5] </ref>, layout combinators exist for interactive widgets, that perform operations similar to the tiling Picture combinators used in this paper, and, ideally, we would like to be able to provide a common set of such combinators, covering both static pictures and interactive objects.
Reference: [6] <author> Peter Henderson. </author> <title> Functional geometry. </title> <booktitle> In ACM Symposium on LISP and Functional Programming, </booktitle> <pages> pages 179-187, </pages> <year> 1982. </year>
Reference-contexts: The idea of using a functional language to describe graphics is by no means a novel one <ref> [2, 3, 12, 4, 6, 1] </ref>. Our design has been influenced by this previous work and builds on it by providing a more abstract account of picture composition. <p> The inclusion of both Rectangles and poly-lines as drawing primitives highlights a design tradeoff, what should be primitive in a declarative representation of pictures? The one extreme of just providing points or lines as primitives and operations to support the combination of them (as done by <ref> [1, 6] </ref>), is low-level and not a descriptive enough representation of the pictures we want to express and render. At the other end, making every possible known two-dimensional geometric shape a primitive results in a language that is very precise, but complex. <p> One of the earliest attempts at using a functional language to express graphics was Hender-son's functional geometry <ref> [6] </ref>. Using Escher's square limit as an example, a set of basic tiles were repeatedly combined together using a small set of tiling picture combinators.
Reference: [7] <author> Allan Heydon and Greg Nelson. </author> <title> The Juno-2 Constraint-Based Drawing Editor. </title> <type> Technical Report 131a, </type> <institution> DEC Systems Research Center, Palo Alto,CA, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: One interesting point to note is that the Path module elevates the path to a first-class value, something that is not the case for PostScript interpreters. Another area of related work is the declarative description of graphics using constraint-based systems <ref> [11, 14, 8, 7] </ref>. Through the use of constraints, relationships between components of a picture can be expressed declaratively. The drawing of a picture is preceded by a pass where the constraint expressions are satisfied.
Reference: [8] <author> John Hobby. </author> <title> A User's Manual for MetaPost. </title> <type> Technical report, </type> <institution> Bell Labs, </institution> <year> 1994. </year>
Reference-contexts: We are concerned here with providing an appropriate programming abstraction for expressing two-dimensional graphical output in a functional language, providing a model with graphic capabilities similar to that provided by systems such as PostScript [9] and MetaPost <ref> [8] </ref>. The main goal is to provide an abstraction that is convenient and high-level enough for the programmer rather than creating a representation that could be used as a meta file picture format for drawing tools. <p> One interesting point to note is that the Path module elevates the path to a first-class value, something that is not the case for PostScript interpreters. Another area of related work is the declarative description of graphics using constraint-based systems <ref> [11, 14, 8, 7] </ref>. Through the use of constraints, relationships between components of a picture can be expressed declaratively. The drawing of a picture is preceded by a pass where the constraint expressions are satisfied.
Reference: [9] <institution> Adobe Systems Inc. </institution> <note> PostScript language reference manual. Addison Wesley, second edition, </note> <year> 1990. </year>
Reference-contexts: The graphics model and accompanying renderer forms the basis for graphical output to both workstation and printer in Haggis [5], a user interface framework written in Concurrent Haskell [10]. The figures given in this paper are pictures produced using the system described here, mapping the picture to Encapsulated PostScript <ref> [9] </ref> 1 after having first viewed it on a workstation display using Haggis. 2 Motivation Before going any further, it is worth being a bit more precise about the term graphics and the use of it throughout this paper. <p> We are concerned here with providing an appropriate programming abstraction for expressing two-dimensional graphical output in a functional language, providing a model with graphic capabilities similar to that provided by systems such as PostScript <ref> [9] </ref> and MetaPost [8]. The main goal is to provide an abstraction that is convenient and high-level enough for the programmer rather than creating a representation that could be used as a meta file picture format for drawing tools. <p> The Picture data type extends this early work by providing a fuller set of drawing primitives and picture transformers, and through the use of structured translation, the set of composition mechanisms can easily be extended, c.f., above and beside. Several `functional' systems have made use of PostScript <ref> [9] </ref> as the basic drawing model, layering functional abstractions on top it [4, 12]. These approaches make good use PostScript's page description model, but forces the programmer to use PostScript's model of stencil and paint for describing the basic picture elements.
Reference: [10] <author> Simon Peyton Jones, Andrew Gordon, and Sigbjorn Finne. </author> <title> Concurrent Haskell. </title> <booktitle> In ACM Symposium on the Principles of Programming Languages, </booktitle> <address> St. Petersburg Beach, Florida, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: The graphics model and accompanying renderer forms the basis for graphical output to both workstation and printer in Haggis [5], a user interface framework written in Concurrent Haskell <ref> [10] </ref>.
Reference: [11] <author> Donald E. Knuth. </author> <title> T E X and METAFONT, New Directions in Typesetting. </title> <publisher> Digital Press and the American Mathematical Society, </publisher> <address> Bed-ford, MA, </address> <year> 1979. </year>
Reference-contexts: One interesting point to note is that the Path module elevates the path to a first-class value, something that is not the case for PostScript interpreters. Another area of related work is the declarative description of graphics using constraint-based systems <ref> [11, 14, 8, 7] </ref>. Through the use of constraints, relationships between components of a picture can be expressed declaratively. The drawing of a picture is preceded by a pass where the constraint expressions are satisfied.
Reference: [12] <author> Peter Lucas and Stephen N. Zilles. </author> <title> Graphics in an Applicative Context. </title> <type> Technical report, </type> <institution> IBM Almaden Research Center, </institution> <address> 650 Harry Road, San Jose, CA 95120-6099, </address> <month> July 8 </month> <year> 1987. </year>
Reference-contexts: The idea of using a functional language to describe graphics is by no means a novel one <ref> [2, 3, 12, 4, 6, 1] </ref>. Our design has been influenced by this previous work and builds on it by providing a more abstract account of picture composition. <p> Several `functional' systems have made use of PostScript [9] as the basic drawing model, layering functional abstractions on top it <ref> [4, 12] </ref>. These approaches make good use PostScript's page description model, but forces the programmer to use PostScript's model of stencil and paint for describing the basic picture elements.
Reference: [13] <author> Greg Schechter, Conal Elliott, Ricky Yeung, and Salim Abi-Ezzi. </author> <title> Functional 3D graphics in C++ with an object-oriented, </title> <booktitle> multiple dispatching implementation. In Proceedings of the 1994 Eurographics Object-Oriented Graphics Workshop. Eurographics, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Another area for future work would be to try and apply the techniques used here for two dimensional graphics to three dimensions. Promising results have already been achieved by the TBAG system <ref> [13] </ref>, which uses a functional model for building three-dimensional interactive worlds.
Reference: [14] <author> Christopher J. van Wyk. </author> <title> A High-Level Language for Specifying Pictures. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 1(2) </volume> <pages> 163-182, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: One interesting point to note is that the Path module elevates the path to a first-class value, something that is not the case for PostScript interpreters. Another area of related work is the declarative description of graphics using constraint-based systems <ref> [11, 14, 8, 7] </ref>. Through the use of constraints, relationships between components of a picture can be expressed declaratively. The drawing of a picture is preceded by a pass where the constraint expressions are satisfied.
References-found: 14

