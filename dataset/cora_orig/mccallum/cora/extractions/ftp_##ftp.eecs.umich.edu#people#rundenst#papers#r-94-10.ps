URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/r-94-10.ps
Refering-URL: http://www.eecs.umich.edu/~rundenst/group/papers.html
Root-URL: http://www.cs.umich.edu
Email: e-mail: mjones@eecs.umich.edu, rundenst@eecs.umich.edu  
Title: Extending View Technology for Complex Integration Tasks  
Author: Matthew C. Jones and Elke A. Rundensteiner 
Address: Ann Arbor, MI 48109-2122  
Affiliation: Software Systems Research Laboratory University of Michigan,  
Abstract: In this paper, we present extensions to the MultiView object-oriented database view system that improve its ability to integrate electronic computer-aided design (ECAD) tools. Using an object-preserving algebra as the view definition language, the MultiView system supports data transformations to suit the needs of individual tools. However, an object-preserving algebra alone is not powerful enough to express recursive transformations such as transitive path derivations and the attening of hierarchical structures. In order to provide these capabilities, we extend the view definition language with operators that permit complex transformations of the data. To achieve performance essential for ECAD tools, we introduce the mediator class as a general strategy for the materialization of these complex views. We compare the bounds on query and update performance of our set-based mediator class for the symmetric transitive closure with a more traditional object-based materialization strategy. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul and A. Bonner, </author> <title> Objects and Views, </title> <booktitle> in Proc. of the ACM SIGMOD 91, </booktitle> <year> 1991, </year> <pages> pp. 238-247. </pages>
Reference-contexts: This work was supported in part by NSF NYI #IRI-9457609, NSF RIA #IRI-9309076, Intel, and Digital Equipment Corporation. 2 Applying Object-Oriented View Technology to Tool Integration Object-oriented view mechanisms <ref> [1, 14] </ref> have been proposed as a means to provide customized data reorganization allowing access to centrally stored and managed data (base data) that is automatically restructured or derived into a preferred format.
Reference: [2] <author> R. Armstrong and J. Allen, FICOM: </author> <title> A Framework for Incremental Consistency Maintenance in Multi-Representation, Structural VLSI Databases, </title> <booktitle> in Proc. IEEE International Conference on Computer-Aided Design (ICCAD), </booktitle> <year> 1992, </year> <pages> pp. 336-343. </pages>
Reference-contexts: This system used display-only views to provide the data for various tools in a software development environment. Updatable views were proposed in this work, but not implemented. In the FICOM system <ref> [2] </ref>, a data manager is Metric Mediator-Based Object-Based Space Required O (n x p) O (n x p 2 ) Creation Time O (n x p) O (n x p 2 ) Membership Test O (1) O (log (n x p 2 )) STC Retrieval O (1) O (log (n x
Reference: [3] <author> O2 Technology. </author> <title> O2 Views User Manual, </title> <note> version 1 edition, </note> <month> December </month> <year> 1993. </year>
Reference-contexts: The view is considered updatable if changes to the derived data produce corresponding changes in the base data. Recently there has been considerable research into OODB view technology. However, with the exception of the O2 system <ref> [3] </ref> in alpha-test, commercial OODBS are not currently providing support for views. stored data. A view system produces customized views in the form of derived data, generated by the view system for each tool (view user) in the environment.
Reference: [4] <author> CFI-DR-TSC, </author> <title> Design Representation Electrical Connectivity Information Model and Programming Interface, </title> <note> CFI Publication, Version 1.0.0, </note> <year> 1992 </year>
Reference: [5] <author> CFI-ITC-TSC, </author> <title> Inter-Tool Communication Architecture, </title> <note> CFI Publication, Version 1.0.0, </note> <year> 1992 </year>
Reference: [6] <author> L. Claesen, R. Severyns, P. Six, W. D. Rammelaere, H. D. Man, J. Cockx, P. Reynaert, and G. Shrooten, </author> <title> Open Framework of Interactive and Communicating CAD Tools, in Tool Integration and Design Environments, </title> <editor> F. J. Rammig, ed., </editor> <publisher> North-Holland, </publisher> <year> 1987. </year>
Reference: [7] <author> M. Jones, and E. A. Rundensteiner, </author> <title> Mediator Classes for the Efficient Materialization and Update of Complex Views, </title> <institution> Electrical Engineering and Computer Science Dept., University of Michigan, Ann Arbor, </institution> <type> Tech. Rep., </type> <note> In Preparation. </note>
Reference: [8] <author> D. Garlan, </author> <title> Views for Tools in Integrated Environments, in Advanced Programming Environments, </title> <publisher> Springer-Verlag, </publisher> <year> 1986, </year> <pages> pp. 314-343. </pages>
Reference-contexts: We are currently investigating strategies for materialization which balance performance for both queries and updates. We can improve the performance of queries by utilizing topological ordering in much the same way that we employ sequence numbers for the 1:1 case. 8 Related Work The Gandalf system <ref> [8] </ref> was one of the earliest environments to use views as the basis for tool integration. This system used display-only views to provide the data for various tools in a software development environment. Updatable views were proposed in this work, but not implemented.
Reference: [9] <author> S. Konomi, T. Furukawa, and Y. Kambayashi, </author> <title> Super-Key Classes for Updating Materialized Derived Classes in Object Bases, </title> <booktitle> in Proc. DOOD Conference, </booktitle> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: However, the representations are limited to those already implemented in the data manager. Furthermore, the FICOM system does not support materialization within the integrated tools. In <ref> [9] </ref>, the authors present the super-key class as a mechanism for enabling updates on materialized paths in object databases.
Reference: [10] <author> H. A. Kuno and E. A. Rundensteiner, </author> <title> Developing an Object-Oriented View Management System, IBM CASCON, </title> <address> Oct. </address> <year> 1993, </year> <pages> pp. 548 - 562 </pages>
Reference-contexts: The first prototype has been fully functional for over a year. It currently runs on a Sun SPARCstation and has been implemented on top of the Gemstone OODB <ref> [10] </ref>. To model the more complex restructuring employed in ECAD tools, such as attening hierarchical graphs and deriving transitive relationships, we are now proposing extensions to MultiView. We have designed extensions to the query language to support more complex, recursive queries.
Reference: [11] <author> H. A. Kuno and E. A. Rundensteiner, </author> <title> Materialized Object-Oriented Views in MultiView, </title> <booktitle> in Proc. Fifth International Workshop on Research Issues on Data Engineering: Distributed Object Management (RIDE-DOM 95), </booktitle> <month> March </month> <year> 1995. </year>
Reference-contexts: As such, it automates the transformation of data between the central format and the tool specific formats. In addition, the system provides the services necessary to maintain consistency between the central and derived data <ref> [11] </ref>. MultiView assures the correctness of data transformations and reduces undesired coupling between integrated tools. As a consequence, it increases the productivity of tool developers and integrators.
Reference: [12] <author> J. Miller, K. Grning, G. Schulz, and C. White, </author> <title> The Object-Oriented Integration Methodology of the CADlab Work Station Design Environment, </title> <booktitle> in Proc. IEEE/ACM Design Automation Conf. (DAC), </booktitle> <year> 1989. </year>
Reference: [13] <author> Y. G. Ra, H. Kuno, and E. A. Rundensteiner, </author> <title> A Flexible Object-Oriented Database Model and Implementation for Capacity-Augmenting Views, </title> <institution> Electrical Engineering and Computer Science Dept., University of Michigan, Ann Arbor, </institution> <type> Tech. Rep. </type> <institution> CSE-TR-215-94, </institution> <month> May </month> <year> 1994. </year>
Reference: [14] <author> E. A. Rundensteiner, </author> <title> MultiView: A Methodology for Multiple Views in OODBs, </title> <booktitle> in Proc. of International Conference on Very Large Data Bases (VLDB), </booktitle> <year> 1992, </year> <pages> pp. 187-198. </pages>
Reference-contexts: In this model, the tools in the system are view users, using central data that has been automatically organized by the view system. Our OODB view system, MultiView, <ref> [14] </ref> provides a view definition language (VDL) capable of restructuring data for each tool in the system. As such, it automates the transformation of data between the central format and the tool specific formats. <p> This work was supported in part by NSF NYI #IRI-9457609, NSF RIA #IRI-9309076, Intel, and Digital Equipment Corporation. 2 Applying Object-Oriented View Technology to Tool Integration Object-oriented view mechanisms <ref> [1, 14] </ref> have been proposed as a means to provide customized data reorganization allowing access to centrally stored and managed data (base data) that is automatically restructured or derived into a preferred format. <p> as well the development of a key abstraction for the materialization and maintenance of these complex views. 3 MultiView: The Object View System At the University of Michigan, we have an on-going research project funded by NSF and Intel for the development of an object-oriented view support system, called MultiView <ref> [14] </ref>. MultiView has been successfully used to integrate ECAD tools in the domain of behavioral synthesis [15].
Reference: [15] <author> E. A. Rundensteiner, </author> <title> Design Tool Integration Using Object-Oriented Database Views, </title> <booktitle> in Proc. IEEE International Conference on Computer-Aided Design (ICCAD), </booktitle> <year> 1993, </year> <pages> pp. 104-107. </pages>
Reference-contexts: MultiView has been successfully used to integrate ECAD tools in the domain of behavioral synthesis <ref> [15] </ref>. It is particularly suited to integration tasks such as hiding unneeded details from a tool, simplifying application specific processing by augmenting a view with customized functions, and precompiling information which is frequently needed by the tool.
Reference: [16] <author> M. H. Scholl, C. Laasch, and M. Tresch, </author> <title> Updatable Views in Object-Oriented Databases, </title> <booktitle> in Proc. DOOD Conference, </booktitle> <address> Germany, </address> <month> Dec. </month> <year> 1991. </year>
References-found: 16

