URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1996/UM-CS-1996-034.ps
Refering-URL: http://www.cs.umass.edu/~nithraka/publications.html
Root-URL: 
Email: cris@cs.umass.edu  
Title: Understanding and Formalizing Recovery through Histories  
Author: Cris Pedregal Martin, Arvind Nithrakashyap, Krithi Ramamritham, and Jay Shanmugasundaram 
Note: Supported in part by grants from the National Science Foundation and Sun Microsystems.  
Date: October 1996  
Address: Amherst, Mass. 01003-4610, US  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: Computer Science Technical Report 96-34 University of Massachusetts Abstract Recovery support in database transaction processing systems is provided to ensure consistency and correctness under failures, logical as well as physical. As the transactional model is extended to advanced, nontraditional applications, recovery acquires even more importance. In spite of the broad experience building recovery for conventional systems, a look at the literature on recovery reveals that there is a semantic gap between high level requirements (such as the all-or-nothing property) and how these requirements are implemented, in terms of buffers and their policies, volatile and persistent storage, shadows, etc. Thus, there is a need for a formal framework for recovery that brings together the necessary building blocks and tools for the methodical construction of recovery in traditional as well as advanced transaction systems. Our work is a first step toward addressing the lack of adequate conceptual tools by providing a framework to properly understand and describe recovery and its interactions with other system components. Our main goals are to understand, specify, and reason about the different facets of recovery in terms of a small set of essential ingredients. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. A. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1987. </year> <month> 15 </month>
Reference-contexts: The event Crash denotes the occurrence of a system failure; the event Rec denotes that the system has recovered from a failure. All events are totally ordered with respect to both Crash and Rec. DEFINITION 2.2 Histories, Ordering, Projections A complete history H <ref> [1, 3] </ref> is a partially ordered set of events invoked by transactions. Thus, object events and transaction management events are both part of the history H.
Reference: [2] <author> L-F. Cabrera, John A. McPherson, Peter M. Schwarz, and James C. Wyllie. </author> <title> Implementing Atomicity in Two Systems: Techniques, Tradeoffs, </title> <journal> and Experience. IEEE Trans. On Software Engineering </journal> 19(10) 950-961, October 1993. 
Reference-contexts: Even when we confine ourselves to the Failure Atomicity (FA, the all or nothing) property of transactions, several considerations determine how recovery is achieved. Different versions of ARIES [7] as well as the lessons from the case study reported in <ref> [2] </ref> attest to this. The case study demonstrates the need for different policies and hence different recovery protocols and mechanisms depending on the size of the objects, frequency of access, and the system architecture, to list a few considerations.
Reference: [3] <author> P.K. Chrysanthis and K. Ramamritham. </author> <title> Synthesis of Extended Transaction Models using ACTA. </title> <journal> ACM Transactions on Database Systems, </journal> <month> September </month> <year> 1994, </year> <pages> pp. 450-191. </pages>
Reference-contexts: This leads to a demonstration of correctness. The concepts used in the formalization of recovery in this paper have their foundations in ACTA <ref> [3] </ref> which has been shown to be a powerful framework to deal with concurrency and correctness issues in (advanced) transaction models. <p> The event Crash denotes the occurrence of a system failure; the event Rec denotes that the system has recovered from a failure. All events are totally ordered with respect to both Crash and Rec. DEFINITION 2.2 Histories, Ordering, Projections A complete history H <ref> [1, 3] </ref> is a partially ordered set of events invoked by transactions. Thus, object events and transaction management events are both part of the history H.
Reference: [4] <author> D. Kuo. </author> <title> Model and Verification of a Data Manager based on ARIES. </title> <booktitle> In Proceedings of the 4th International Conference on Database Theory, </booktitle> <pages> pp. 231-245, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: A few researchers have dealt with the formalization of some aspects of recovery. For example, <ref> [4] </ref> uses I/O automata to formally describe a recovery system based on ARIES. By using the well understood notion of histories and by using the building blocks of ACTA, we believe that with our approach we can reap the advantages of a uniform and familiar framework.
Reference: [5] <author> D. Lomet. MLR: </author> <title> A Recovery Method for Multi-level Systems. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pp. 185-194, </pages> <year> 1992. </year>
Reference-contexts: for example has been summarized in ARIES [7] wherein the algorithm description appears at a very detailed implementation level. * On the other hand, at a very high level of abstraction, recovery research has tackled problems in advanced transaction models where the notion of logical compensations plays an important part <ref> [10, 5] </ref>. In many ways, the two represent two ends of the spectrum.
Reference: [6] <author> D. Lomet and Mark R. Tuttle. </author> <title> Redo Recovery after System Crashes. </title> <booktitle> In Proc. of the 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, </address> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: By using the well understood notion of histories and by using the building blocks of ACTA, we believe that with our approach we can reap the advantages of a uniform and familiar framework. Focusing on the redo portion of recovery, the authors of <ref> [6] </ref> derive and prove the correctness of a redo recovery algorithm based on an installation graph that imposes an ordering significantly weaker than the usual concurrency control conflict graph.
Reference: [7] <author> C. Mohan, D. Haderle, B. Lindsay, H. Pirahesh, P. Schwartz. </author> <title> ARIES: A Transaction Recovery Method Supporting Fine-Granularity Locking and Partial Rollbacks Using Write-Ahead Logging. </title> <journal> In ACM TODS, </journal> <volume> 17(1) </volume> <pages> 94-162, </pages> <year> 1992. </year>
Reference-contexts: Even when we confine ourselves to the Failure Atomicity (FA, the all or nothing) property of transactions, several considerations determine how recovery is achieved. Different versions of ARIES <ref> [7] </ref> as well as the lessons from the case study reported in [2] attest to this. <p> The current state of the art in recovery, however, presents an interesting paradox: * On the one hand, there is considerable experience in building systems that successfully support recovery. This experience, for example has been summarized in ARIES <ref> [7] </ref> wherein the algorithm description appears at a very detailed implementation level. * On the other hand, at a very high level of abstraction, recovery research has tackled problems in advanced transaction models where the notion of logical compensations plays an important part [10, 5].
Reference: [8] <author> L. D. Molesky and K. Ramamritham. </author> <title> Recovery Protocols for Shared Memory Database Systems. </title> <booktitle> ACM SIGMOD International Conference on Management of Data, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: Furthermore, when failure atomicity is to be achieved in parallel and distributed platforms, traditional recovery approaches do not perform well since they lead to unnecessary transaction aborts. This necessitates new recovery approaches <ref> [8] </ref>. For these reasons, it is necessary to develop systematic methods to craft recovery even for the FA correctness criterion. The recovery requirements of advanced transaction models and applications demand even more flexibility from the recovery subsystem. <p> Avoiding unnecessary abortions. In a multiple node database system, the recovery protocol must 14 be designed to abort only the transactions running on a failed node <ref> [8] </ref>. This implies that not all transactions that have not yet committed need be aborted.
Reference: [9] <author> C. Pedregal-Martin and K. Ramamritham. </author> <title> Delegation: Efficiently Rewriting History. </title> <institution> TR95-90 Computer Science Dept., University of Massachusetts, Amherst, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: The latter then commits or aborts the delegated operation. With the framework developed here, we are in a position to handle the extended notion of failure atomicity that results. In <ref> [9] </ref> we have shown how ARIES can be extended to deal with delegation.
Reference: [10] <author> G. Weikum, C. Hasse, P. Broessler and P. Muth. </author> <title> Multi-level Recovery. </title> <journal> ACM SIGMOD, </journal> <volume> 19(2) </volume> <pages> 109-123, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: for example has been summarized in ARIES [7] wherein the algorithm description appears at a very detailed implementation level. * On the other hand, at a very high level of abstraction, recovery research has tackled problems in advanced transaction models where the notion of logical compensations plays an important part <ref> [10, 5] </ref>. In many ways, the two represent two ends of the spectrum.
References-found: 10

