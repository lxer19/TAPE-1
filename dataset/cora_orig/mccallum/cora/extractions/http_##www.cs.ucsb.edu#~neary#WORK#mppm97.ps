URL: http://www.cs.ucsb.edu/~neary/WORK/mppm97.ps
Refering-URL: http://www.cs.ucsb.edu/~neary/WORK/dir.html
Root-URL: http://www.cs.ucsb.edu
Email: schauserg@cs.ucsb.edu  
Title: Market-Based Massively Parallel Internet Computing  
Author: Peter Cappello, Bernd O. Christiansen, Michael O. Neary, and Klaus E. Schauser fcappello, bernd, neary, 
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California, Santa Barbara  
Abstract: Recent advances in Internet connectivity and implementations of safer distributed computing through languages such as Java provide the foundation for transforming computing resources into tradable commodities. We have developed Javelin, a Java-based prototype of a globally distributed, heterogeneous, high-performance computational infrastructure that conveniently enables rapid execution of massively parallel applications. Our infrastructure consists of three entities: Hosts, clients, and brokers. Our goal is to allow users to buy and sell computational power, using supply and demand, and market mechanisms to marshal computational power far beyond what can be achieved via conventional techniques. Several research issues must be worked out to make this vision a reality: allocating resources between computational objects via market mechanisms; expressing and enforcing scheduling and quality of service constraints; modeling programming in a global computing ecosystem; supporting heterogeneous execution without sacrificing computational speed; ensuring host security; global naming and communication; and client privacy. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Alexandrov, M. Ibel, K. E. Schauser, and C. Scheiman. SuperWeb: </author> <title> Research Issues in Java-Based Global Computing. </title> <journal> Concurrency: Practice and Experience, </journal> <month> June </month> <year> 1997. </year>
Reference-contexts: Although encrypted computing might not be possible for all applications, a number of important practical problems including FFT and MM can be encrypted <ref> [1] </ref>. Another way of ensuring client privacy is to split the computation into fragments such that no part by itself reveals any useful information about the complete computation. Performance: Since our infrastructure aims at providing better performance than is available locally, the efficient execution of anonymous code is essential.
Reference: [2] <author> A. D. Alexandrov, M. Ibel, K. E. Schauser, and C. J. Scheiman. </author> <title> Extending the Operating System at the User Level: the Ufo Global File System. </title> <booktitle> In 1997 Annual Technical Conference on UNIX and Advanced Computing Systems (USENIX'97), </booktitle> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: We have already implemented a user-level global file system for Solaris. The global file system, called Ufo, allows access to remote files just as if they were local, but requires no root access or OS modifications <ref> [2] </ref>. We currently are investigating the incorporation of the Ufo file system into the Javelin architecture. In the following we briefly discuss performance numbers from our prototype. For a more detailed presentation of the performance results and the applications used the reader is referred to [12]. 3.2.
Reference: [3] <author> T. E. Anderson, D. E. Culler, and D. Patterson. </author> <title> A case for NOW (Networks of Workstations). </title> <journal> IEEE Micro, </journal> <volume> 15(1), </volume> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: Recent network computing approaches include CONDOR [32], Linda [55], PVM [51], Piranha [24], MPI [39], Network of Workstations (NOW) platform consisting of Pentiums, Sparcs and UltraSparcs. <ref> [3] </ref>, Legion [28], GLOBUS [22], and WebOS [52]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput. Multiple language support is another of its goals.
Reference: [4] <author> R. Axelrod. </author> <title> The Evolution of Cooperation. </title> <publisher> Basic Books, </publisher> <address> New York, </address> <year> 1984. </year>
Reference-contexts: We thus move from small, centrally coordinated, trusted systems to large distributed systems of less trusted participants that require protective mechanisms. In the limit, we approach globally distributed systems of anonymous, mutually untrusted participants requiring high levels of protection. Axelrod's <ref> [4] </ref> iterated prisoner's dilemma tournament shows that, even between mutually unknown agents, trust can arise spontaneously over time. However, in the presence of reputation systems (i.e., services that associate an object/agent's identity with past performance), the time and cost of achieving trust can be reduced.
Reference: [5] <author> J. E. Baldeschwieler, R. D. Blumofe, and E. A. Brewer. </author> <title> ATLAS: An Infrastructure for Global Computing. </title> <booktitle> In Proceedings of the Seventh ACM SIGOPS European Workshop on System Support for Worldwide Applications, </booktitle> <year> 1996. </year>
Reference-contexts: There is no incentive provided beyond either curiosity, helping a worthy cause, or fame (if one is lucky enough to find the next largest prime!). Several recent projects, such as Globus [22], Legion [28], Charlotte [6], Atlas <ref> [5] </ref>, ParaWeb [9], and Popcorn [10] share the vision of seamlessly integrating networked computers into a global computing infrastructure. They have identified many of the issues, and address them holistically. However, apart from Popcorn, none use market-based mechanisms to coordinate client and host interaction. 1.1. <p> By today's standards, enormous computations will be possible. Communication constraints may limit the size of computation that can be concentrated at one location, perhaps leading ultimately to the need for a market in bandwidth. Locality of hosts: An important design goal of Atlas <ref> [5] </ref> is that The infrastructure should exploit existing hierarchical domains, so that pooled resources are given preferentially to other members of their organization, and so that applications can exploit (higher) local bandwidth. <p> Java helps to address these issues. The flexibility of Java for Internet computing has been observed by several other researchers. A new Java-based generation of projects is aimed at establishing a software infrastructure on which a global computing vision can be implemented. These projects include ATLAS <ref> [5] </ref>, Charlotte [6], ParaWeb [9], Bayanihan [44], and Popcorn [10]. All these projects are explicitly designed to run parallel applications and provide a specific programming model. Other recent systems, e.g. JPVM [21], use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [6] <author> A. Baratloo, M. Karaul, Z. Kedem, and P. Wyckoff. </author> <title> Charlotte: Metacomputing on the Web. </title> <booktitle> In Proceedings of the 9th Conference on Parallel and Distributed Computing Systems, </booktitle> <year> 1996. </year>
Reference-contexts: There is no incentive provided beyond either curiosity, helping a worthy cause, or fame (if one is lucky enough to find the next largest prime!). Several recent projects, such as Globus [22], Legion [28], Charlotte <ref> [6] </ref>, Atlas [5], ParaWeb [9], and Popcorn [10] share the vision of seamlessly integrating networked computers into a global computing infrastructure. They have identified many of the issues, and address them holistically. However, apart from Popcorn, none use market-based mechanisms to coordinate client and host interaction. 1.1. <p> Java helps to address these issues. The flexibility of Java for Internet computing has been observed by several other researchers. A new Java-based generation of projects is aimed at establishing a software infrastructure on which a global computing vision can be implemented. These projects include ATLAS [5], Charlotte <ref> [6] </ref>, ParaWeb [9], Bayanihan [44], and Popcorn [10]. All these projects are explicitly designed to run parallel applications and provide a specific programming model. Other recent systems, e.g. JPVM [21], use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [7] <author> M. Blum and S. Kannan. </author> <title> Designing Programs that Check Their Work. </title> <journal> JACM, </journal> <volume> 42(1), </volume> <year> 1995. </year>
Reference-contexts: To deal with this problem, clients may be able to apply algorithm-specific techniques that cheaply verify a computation's correctness (e.g., it is simple to verify a proposed solution to a system of linear equations), or cheaply verify with high probability the correctness of a computation (see, e.g., Blum <ref> [7] </ref>).
Reference: [8] <author> R. D. Blumofe. </author> <title> Executing Multithreaded Programs Efficiently. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, Massachusetts Institute of Technology, </institution> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. [11] and Fox et al. [23]. ATLAS provides a global computing model based on Java and on the Cilk programming model <ref> [8] </ref> that is best suited to tree-based computations. ATLAS ensures scalability using a hierarchy of managers. The current implementation uses native libraries, which may raise some portability problems. Charlotte supports distributed shared memory, and uses a fork-join model for parallel programming.
Reference: [9] <author> T. Brecht, H. Sandhu, M. Shan, and J. Talbot. ParaWeb: </author> <title> Towards World-Wide Supercomputing. </title> <booktitle> In Proceedings of the Seventh ACM SIGOPS European Workshop on System Support for Worldwide Applications, </booktitle> <year> 1996. </year>
Reference-contexts: There is no incentive provided beyond either curiosity, helping a worthy cause, or fame (if one is lucky enough to find the next largest prime!). Several recent projects, such as Globus [22], Legion [28], Charlotte [6], Atlas [5], ParaWeb <ref> [9] </ref>, and Popcorn [10] share the vision of seamlessly integrating networked computers into a global computing infrastructure. They have identified many of the issues, and address them holistically. However, apart from Popcorn, none use market-based mechanisms to coordinate client and host interaction. 1.1. <p> The flexibility of Java for Internet computing has been observed by several other researchers. A new Java-based generation of projects is aimed at establishing a software infrastructure on which a global computing vision can be implemented. These projects include ATLAS [5], Charlotte [6], ParaWeb <ref> [9] </ref>, Bayanihan [44], and Popcorn [10]. All these projects are explicitly designed to run parallel applications and provide a specific programming model. Other recent systems, e.g. JPVM [21], use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [10] <author> N. Camiel, S. London, N. Nisan, and O. Regev. </author> <title> The POPCORN Project: Distributed Computation over the Internet in Java. </title> <booktitle> In 6th International World Wide Web Conference, </booktitle> <month> Apr. </month> <year> 1997. </year>
Reference-contexts: There is no incentive provided beyond either curiosity, helping a worthy cause, or fame (if one is lucky enough to find the next largest prime!). Several recent projects, such as Globus [22], Legion [28], Charlotte [6], Atlas [5], ParaWeb [9], and Popcorn <ref> [10] </ref> share the vision of seamlessly integrating networked computers into a global computing infrastructure. They have identified many of the issues, and address them holistically. However, apart from Popcorn, none use market-based mechanisms to coordinate client and host interaction. 1.1. <p> The flexibility of Java for Internet computing has been observed by several other researchers. A new Java-based generation of projects is aimed at establishing a software infrastructure on which a global computing vision can be implemented. These projects include ATLAS [5], Charlotte [6], ParaWeb [9], Bayanihan [44], and Popcorn <ref> [10] </ref>. All these projects are explicitly designed to run parallel applications and provide a specific programming model. Other recent systems, e.g. JPVM [21], use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [11] <author> K. M. Chandy, B. Dimitrov, H. Le, J. Mandleson, M. Richardson, A. Rifkin, P. A. G. Sivilotti, W. Tanaka, and L. Weisman. </author> <title> A World-Wide Distributed System Using Java and the Internet. </title> <booktitle> In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <address> Syracuse, NY, </address> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: Other recent systems, e.g. JPVM [21], use Java to overcome heterogeneity, but are not intended to execute on anonymous machines. The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. <ref> [11] </ref> and Fox et al. [23]. ATLAS provides a global computing model based on Java and on the Cilk programming model [8] that is best suited to tree-based computations. ATLAS ensures scalability using a hierarchy of managers. The current implementation uses native libraries, which may raise some portability problems.
Reference: [12] <author> B. Christiansen, P. Cappello, M. F. Ionescu, M. O. Neary, K. E. Schauser, and D. Wu. Javelin: </author> <title> Internet-Based Computing Using Java. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 9(11), </volume> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: This is merely one convenient way of offering resources. Experienced users may install sophisticated host software, such as screen savers, that automatically make resources available, or even provide confined execution environments, allowing for the safe execution of untrusted binaries. Prototype Implementation: We have implemented a Java-based prototype, called Javelin <ref> [12] </ref>. By simply pointing their browser to a known URL, users automatically enable their computer system to host parts of parallel computations. This is achieved by downloading and executing an applet that spawns a small daemon thread which waits and listens for tasks from a broker. <p> Java-based Prototype In this section, we briefly describe Javelin <ref> [12] </ref>, our prototype infrastructure for Internet-based parallel computing using Java. Our system is based on Internet software technology that is essentially ubiquitous: Web technology. It is intended to be a substrate on which various programming models may be implemented. The Javelin architecture follows the model presented in Figure 1. <p> We currently are investigating the incorporation of the Ufo file system into the Javelin architecture. In the following we briefly discuss performance numbers from our prototype. For a more detailed presentation of the performance results and the applications used the reader is referred to <ref> [12] </ref>. 3.2. Raytracing Measurements We have ported a sequential raytracer written in Java to Javelin as an example of a real-world application that benefits from additional processors even if communication is relatively slow. The raytracer was written by Frederico Inacio de Moraes, and was first parallelized by Laurence Vanhelsuwe [53].
Reference: [13] <institution> Colusa Software. Omniware Technical Overview, </institution> <year> 1995. </year> <note> http://www.colusa.com. </note>
Reference-contexts: To protect the host from buggy or malicious code, any untrusted piece of code must be run within an environment that only allows limited access to system resources such as the file system. Host security already has been addressed by a variety of mechanisms including Software Fault Isolation <ref> [13] </ref>, Secure Remote Helper Applications [25], and, of course, interpreted languages such as Java. Although much has been done, researchers continue to work vigorously on this important problem. To the extent that trust exists, protection costs can be reduced. <p> The secure execution of arbitrary binaries recently has been addressed by at least two techniques. First, software--based fault isolation techniques <ref> [13] </ref> guard against insecure system calls of programs by patching their binaries. Second, secure remote helper applications [25] use operating system tracing facilities to limit the use of resources that could violate system integrity.
Reference: [14] <author> G. F. Coulouris, J. Dollimore, and T. Kindberg. </author> <title> Distributed Systems Concepts and Design. </title> <publisher> Addison-Wesley, </publisher> <address> 2 edition, </address> <year> 1994. </year>
Reference-contexts: Dynamic reconfiguration: We expect hosts to be able to freely associate with, and disassociate from, our infrastructure: Hosts can withdraw their computational resources at any time, although, depending on their contract, this may result in a penalty. Mechanisms for task migration such as checkpointing, object serialization, and worm programs <ref> [14] </ref> have been investigated by other researchers. Toolkit-level support already is available. Offline operation: Since dial-up accounts and mobile computing are common, clients must be able to disconnect from the network after having submitted an application, returning later to retrieve results.
Reference: [15] <author> DESCHALL. </author> <title> Internet-Linked Computers Challenge Data Encryption Standard. </title> <publisher> Press Release, </publisher> <year> 1997. </year> <note> http://www.frii.com/rcv/despr4.htm. </note>
Reference-contexts: Two weeks later, the 48-bit RSA code was cracked using 3,500 workstations spread across Europe. In June 1997, the 56-bit DES was cracked, using approximately 78,000 computers, as many as 14,000 per day <ref> [15] </ref>. In October 1997, the 56-bit RSA RC-5 was cracked in a very large world-wide effort [16].
Reference: [16] <author> Distributed.net. </author> <title> Secure Encryption Challenged by Internet-Linked Computers. </title> <publisher> Press Release, </publisher> <month> Oct. </month> <year> 1997. </year> <note> http://www.distributed.net/pressroom/56-PR.html. </note>
Reference-contexts: Two weeks later, the 48-bit RSA code was cracked using 3,500 workstations spread across Europe. In June 1997, the 56-bit DES was cracked, using approximately 78,000 computers, as many as 14,000 per day [15]. In October 1997, the 56-bit RSA RC-5 was cracked in a very large world-wide effort <ref> [16] </ref>. Citing from the press release: At the close of the contest there were over 4000 active teams processing over 7 billion keys each second at a combined computing power equivalent to more than 26 thousand high-end personal computers.
Reference: [17] <author> E. Drexler and M. Miller. </author> <title> Incentive Engineering for Computational Resource Management. </title> <editor> In B. Huberman, editor, </editor> <booktitle> The Ecology of Computation. </booktitle> <publisher> Elsevier Science Publishers B. V., North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: If we want to build a computational ecosystem for solving problems, they consequently argue, markets are a better model than biology. In [38], they give what may be the seminal work associating market mechanisms with computer resource allocation. In <ref> [17] </ref>, Drexler and Miller recast processor scheduling as a variant of a sealed-bid auction, and recast storage management as rental negotiations, yielding a clever algorithm for distributed garbage collection that is able to collect loops of unreferenced objects that cross trust boundaries.
Reference: [18] <editor> Electric Communities. </editor> <booktitle> The E Programming Language, </booktitle> <year> 1996. </year> <note> http://www.communities.com/e/epl.html. </note>
Reference-contexts: Interoperability: In heterogeneous systems like the Internet, hosts and clients may have different instruction sets, word sizes, or operating systems. The infrastructure proposed must provide the means to overcome this heterogeneity. This issue has been addressed by either employing machine-independent languages, such as Java [26], E <ref> [18] </ref>, and Limbo [33], or by providing multiple binary executables [51]. Machine-independent languages achieve portability at the expense of some performance; multiple binary executables achieve performance at the expense of portability. It thus is desirable to support both approaches, to meet any application's requirements.
Reference: [19] <author> J. Feigenbaum. </author> <title> Encrypting Problem Instances Or, ..., Can You Take Advantage of Someone Without Having to Trust Him? In Proceedings of the CRYPTO'85 Conference, </title> <year> 1985. </year>
Reference-contexts: Client privacy: A company's internal data and know how represent a value that usually is protected from unau-thorized access. The proposed infrastructure must provide mechanisms that enable clients to hide the data and possibly the algorithms that are passed to untrusted hosts (see, e.g., Feigenbaum <ref> [19] </ref>). Although encrypted computing might not be possible for all applications, a number of important practical problems including FFT and MM can be encrypted [1].
Reference: [20] <author> D. Ferguson, C. Nikolaou, and Y. Yemini. </author> <title> An Economy for Managing Replicated Data in Autonomous Decentralized Systems. </title> <booktitle> In Proceedings of the International Symposium on Autonomous Decentralized Systems, </booktitle> <address> Kawasaki, Japan, </address> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: We are encouraged by the similarity of their approach to those of Waldspurger et al. [54] and Ferguson et al. <ref> [20] </ref>, which apply these mechanisms to other computer resources. 5.
Reference: [21] <author> A. Ferrari. </author> <title> JPVM The Java Parallel Virtual Machine. </title> <address> http://www.cs.virginia.edu/ajf2j/jpvm.html. </address>
Reference-contexts: These projects include ATLAS [5], Charlotte [6], ParaWeb [9], Bayanihan [44], and Popcorn [10]. All these projects are explicitly designed to run parallel applications and provide a specific programming model. Other recent systems, e.g. JPVM <ref> [21] </ref>, use Java to overcome heterogeneity, but are not intended to execute on anonymous machines. The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. [11] and Fox et al. [23].
Reference: [22] <author> I. Foster and C. Kesselman. Globus: </author> <title> A Metacomputing Infrastructure Toolkit. </title> <journal> International Journal of Supercomputer Applications, </journal> <year> 1997. </year>
Reference-contexts: There is no incentive provided beyond either curiosity, helping a worthy cause, or fame (if one is lucky enough to find the next largest prime!). Several recent projects, such as Globus <ref> [22] </ref>, Legion [28], Charlotte [6], Atlas [5], ParaWeb [9], and Popcorn [10] share the vision of seamlessly integrating networked computers into a global computing infrastructure. They have identified many of the issues, and address them holistically. <p> Recent network computing approaches include CONDOR [32], Linda [55], PVM [51], Piranha [24], MPI [39], Network of Workstations (NOW) platform consisting of Pentiums, Sparcs and UltraSparcs. [3], Legion [28], GLOBUS <ref> [22] </ref>, and WebOS [52]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput. Multiple language support is another of its goals.
Reference: [23] <author> G. Fox and W. Furmanski. </author> <title> Towards Web/Java based High Performance Distributed Computing An Evolving Virtual Machine. </title> <booktitle> In Proceedings of the Fifth IEEE International Symposium on High Performance Distributed Computing, </booktitle> <address> Syracuse, NY, </address> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: JPVM [21], use Java to overcome heterogeneity, but are not intended to execute on anonymous machines. The use of Java as a means for building distributed systems that execute throughout the Internet has also been recently proposed by Chandy et al. [11] and Fox et al. <ref> [23] </ref>. ATLAS provides a global computing model based on Java and on the Cilk programming model [8] that is best suited to tree-based computations. ATLAS ensures scalability using a hierarchy of managers. The current implementation uses native libraries, which may raise some portability problems.
Reference: [24] <author> D. Gelernter and D. Kaminsky. </author> <title> Supercomputing out of Recycled Garbage: Preliminary Experience with Piranha. </title> <booktitle> In Proceedings of the Sixth ACM International Conference on Supercomputing, </booktitle> <month> July </month> <year> 1992. </year>
Reference-contexts: Related Work 4.1. Global Computing Related Work There is a rapidly expanding body of work based on the vision of seamlessly integrating networked computers into a global computing resource. Recent network computing approaches include CONDOR [32], Linda [55], PVM [51], Piranha <ref> [24] </ref>, MPI [39], Network of Workstations (NOW) platform consisting of Pentiums, Sparcs and UltraSparcs. [3], Legion [28], GLOBUS [22], and WebOS [52]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput.
Reference: [25] <author> I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. </author> <title> A Secure Environment for Untrusted Helper Applications Confining the Wily Hacker. </title> <booktitle> In Proceedings of the 1996 USENIX Security Symposium, </booktitle> <year> 1996. </year>
Reference-contexts: Host security already has been addressed by a variety of mechanisms including Software Fault Isolation [13], Secure Remote Helper Applications <ref> [25] </ref>, and, of course, interpreted languages such as Java. Although much has been done, researchers continue to work vigorously on this important problem. To the extent that trust exists, protection costs can be reduced. <p> The secure execution of arbitrary binaries recently has been addressed by at least two techniques. First, software--based fault isolation techniques [13] guard against insecure system calls of programs by patching their binaries. Second, secure remote helper applications <ref> [25] </ref> use operating system tracing facilities to limit the use of resources that could violate system integrity. Another important goal of our project is to allow a natural integration of our infrastructure with other currently existing models for distributed systems.
Reference: [26] <author> J. Gosling and H. McGilton. </author> <title> The Java Language Environment A Whitepaper. </title> <type> Technical report, </type> <institution> Sun Microsystems, </institution> <month> Oct. </month> <year> 1995. </year>
Reference-contexts: Interoperability: In heterogeneous systems like the Internet, hosts and clients may have different instruction sets, word sizes, or operating systems. The infrastructure proposed must provide the means to overcome this heterogeneity. This issue has been addressed by either employing machine-independent languages, such as Java <ref> [26] </ref>, E [18], and Limbo [33], or by providing multiple binary executables [51]. Machine-independent languages achieve portability at the expense of some performance; multiple binary executables achieve performance at the expense of portability. It thus is desirable to support both approaches, to meet any application's requirements.
Reference: [27] <institution> Great Internet Mersenne Prime Search. </institution> <note> GIMPS Discovers 37th Known Mersenne Prime. Press Release, </note> <month> Jan. </month> <year> 1998. </year> <note> http://www.mersenne.org/3021377.htm. </note>
Reference-contexts: In January 1998, a PC in California running a primality test part-time for 46 days found the 37th known Mersenne prime, the largest known prime discovered so far <ref> [27] </ref>. This fl Bernd Christiansen was supported by the German Academic Exchange Service (Deutscher Akademischer Austauschdienst). Klaus E. Schauser was supported by the National Science Foundation NSF CAREER Award CCR-9502661.
Reference: [28] <author> A. S. Grimshaw, W. A. Wulf, </author> <title> and the Legion team. The Legion Vision of a Worldwide Virtual Computer. </title> <journal> Communications of the ACM, </journal> <volume> 40(1), </volume> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: There is no incentive provided beyond either curiosity, helping a worthy cause, or fame (if one is lucky enough to find the next largest prime!). Several recent projects, such as Globus [22], Legion <ref> [28] </ref>, Charlotte [6], Atlas [5], ParaWeb [9], and Popcorn [10] share the vision of seamlessly integrating networked computers into a global computing infrastructure. They have identified many of the issues, and address them holistically. However, apart from Popcorn, none use market-based mechanisms to coordinate client and host interaction. 1.1. <p> Recent network computing approaches include CONDOR [32], Linda [55], PVM [51], Piranha [24], MPI [39], Network of Workstations (NOW) platform consisting of Pentiums, Sparcs and UltraSparcs. [3], Legion <ref> [28] </ref>, GLOBUS [22], and WebOS [52]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput. Multiple language support is another of its goals.
Reference: [29] <author> S. Hirano. HORB: </author> <title> Extended Execution of Java Programs. </title> <booktitle> In First International Conference on WorldWide Computing and its Applications (WWCA 97), </booktitle> <year> 1997. </year> <note> http://ring.etl.go.jp/openlab/horb/. </note>
Reference-contexts: Tasks are dealt out by a centralized server (work manager) and executed by work engines in the client. Communication in Bayanihan is based on the HORB <ref> [29] </ref> distributed object libary. Scheduling and fault tolerance schemes are left to the application programmer. Popcorn provides a Java API for writing parallel programs. Applications are decomposed by the programmer into small, self-contained subcomputations, called com-putelets.
Reference: [30] <author> E. Kovacs and S. Wirag. </author> <title> Trading and Distributed Application Management: An Integrated Approach. </title> <booktitle> In Proceedings of the 5th IFIP/IEEE International Workshop on Distributed Systems: Operation and Management, </booktitle> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: Consequently, a broker is just another service. A broker itself may require additional resources, and take advantage of other services, such as other brokers. Service markets are being pursued by many research groups <ref> [36, 30, 42, 59, 40, 57] </ref> and standardization 1 Assuming all security bugs have been found and fixed. 2 Such services can promise better performance, since they require neither code-shipping nor a safe execution environment. organizations [41]; they allow for convenient software reuse, and for building applications from basic building blocks.
Reference: [31] <author> J. F. Kurose, M. Schwartz, and Y. Yechiam. </author> <title> A Microeco-nomic Approach to Decentralized Optimization of Channel Access Policies in Multiaccess Networks. </title> <booktitle> In Proceedings of the 5th IEEE International Conference on Distributed Computing Systems, </booktitle> <address> Denver, CO, </address> <month> May </month> <year> 1985. </year>
Reference-contexts: Market-Based Related Work As far back as 1968, Ivan Sutherland considered futures markets in computation. In 1981, Dertouzos described a related phenomenon: an information marketplace that still is taking shape. Then, in 1985, Kurose et al. <ref> [31] </ref> explored microeconomics as a way to optimize a distributed system of channels. In 1986, Malone considered important parallels between human organizations and computer systems with regard to the organization of information processing systems. Miller and Drexler [37] expound the view that market economies can be viewed as ecosystems.
Reference: [32] <author> M. Litzkow, M. Livny, and M. W. </author> <title> Mutka. Condor A Hunter of Idle Workstations. </title> <booktitle> In Proceedings of the 8th International Conference of Distributed Computing Systems, </booktitle> <month> June </month> <year> 1988. </year>
Reference-contexts: Related Work 4.1. Global Computing Related Work There is a rapidly expanding body of work based on the vision of seamlessly integrating networked computers into a global computing resource. Recent network computing approaches include CONDOR <ref> [32] </ref>, Linda [55], PVM [51], Piranha [24], MPI [39], Network of Workstations (NOW) platform consisting of Pentiums, Sparcs and UltraSparcs. [3], Legion [28], GLOBUS [22], and WebOS [52].
Reference: [33] <institution> Lucent Technologies Inc. </institution> <note> Inferno. http://inferno.bell-labs.com/inferno/. </note>
Reference-contexts: Interoperability: In heterogeneous systems like the Internet, hosts and clients may have different instruction sets, word sizes, or operating systems. The infrastructure proposed must provide the means to overcome this heterogeneity. This issue has been addressed by either employing machine-independent languages, such as Java [26], E [18], and Limbo <ref> [33] </ref>, or by providing multiple binary executables [51]. Machine-independent languages achieve portability at the expense of some performance; multiple binary executables achieve performance at the expense of portability. It thus is desirable to support both approaches, to meet any application's requirements.
Reference: [34] <author> T. Malone, R. E. Fikes, K. R. Grant, and M. T. Howard. </author> <title> Enterprise Computation. </title> <editor> In B. Huberman, editor, </editor> <booktitle> The Ecology of Computation. </booktitle> <publisher> Elsevier Science Publishers B. V., North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: In [17], Drexler and Miller recast processor scheduling as a variant of a sealed-bid auction, and recast storage management as rental negotiations, yielding a clever algorithm for distributed garbage collection that is able to collect loops of unreferenced objects that cross trust boundaries. Malone et al. <ref> [34] </ref> present work that matches the spirit of what we want to accomplish, but in a more restricted setting: They describe a system, called Enterprise, for sharing tasks among workstations that are connected by a LAN.
Reference: [35] <author> T. Malone, J. Yates, and R. Benjamin. </author> <title> Electronic Markets and Electronic Hierarchies. </title> <journal> Communications of the ACM, </journal> <volume> 30(6), </volume> <month> June </month> <year> 1987. </year>
Reference-contexts: Method of coordination: Objects need a negotiation protocol with minimal overhead. (It will still be large compared with command-style allocation mechanisms.) The negotiation protocol must be capable of evolution: Objects with more advanced negotiation protocols will continue negotiating with older, less advanced objects. Cost of coordination: Malone et al. <ref> [35] </ref> have observed that as information technology advances, the cost of coordination goes down, and that this marginally increases the percentage of coordination that should be done via markets, as opposed to centralized resource allocation. <p> Transaction granularity size: How big do transactions need to be to warrant market bidding? Clearly, their minimum size depends on the cost of accounting and negotiation <ref> [35] </ref>. It would be useful to have a quantitative model that is experimentally verifiable, which can be used to determine the minimum economically feasible transaction size. Cost of trading algorithms: Humans can use trading strategies that are quite complex.
Reference: [36] <author> M. Merz, K. M uller-Jones, and W. Lamersdorf. </author> <title> Services, Agents, and Electronic Markets: How do they Integrate. </title> <booktitle> In Proceedings of the International Conference on Distributed Systems (ICDP '96), </booktitle> <address> Dresden, Germany, </address> <month> Mar. </month> <year> 1996. </year>
Reference-contexts: Hosts also can offer other services, such as FFT or ray tracing, when they have software packages that are very expensive, efficient, or complex. 2 From an economic perspective, we view the Internet or an intranet as a service market <ref> [36] </ref>. Services may range from running standard applications, to general-purpose services that allow for the safe execution of arbitrary untrusted code. Consequently, a broker is just another service. A broker itself may require additional resources, and take advantage of other services, such as other brokers. <p> Consequently, a broker is just another service. A broker itself may require additional resources, and take advantage of other services, such as other brokers. Service markets are being pursued by many research groups <ref> [36, 30, 42, 59, 40, 57] </ref> and standardization 1 Assuming all security bugs have been found and fixed. 2 Such services can promise better performance, since they require neither code-shipping nor a safe execution environment. organizations [41]; they allow for convenient software reuse, and for building applications from basic building blocks.
Reference: [37] <author> M. S. Miller and K. E. Drexler. </author> <title> Comparative Ecology: A Computational Perspective. </title> <editor> In B. Huberman, editor, </editor> <booktitle> The Ecology of Computation. </booktitle> <publisher> Elsevier Science Publishers B. V., North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: Then, in 1985, Kurose et al. [31] explored microeconomics as a way to optimize a distributed system of channels. In 1986, Malone considered important parallels between human organizations and computer systems with regard to the organization of information processing systems. Miller and Drexler <ref> [37] </ref> expound the view that market economies can be viewed as ecosystems. They convincingly argue that markets promote cooperation (what they term symbiotic behavior) and the use of specialized knowledge and abilities better than biological ecosystems (where symbiotic behavior is sufficiently unusual as to get special attention, when discovered).
Reference: [38] <author> M. S. Miller and K. E. Drexler. </author> <title> Markets and Computation: Agoric Open Systems. </title> <editor> In B. Huberman, editor, </editor> <booktitle> The Ecology of Computation. </booktitle> <publisher> Elsevier Science Publishers B. V., North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: If we want to build a computational ecosystem for solving problems, they consequently argue, markets are a better model than biology. In <ref> [38] </ref>, they give what may be the seminal work associating market mechanisms with computer resource allocation.
Reference: [39] <author> MPI: </author> <title> A Message-Passing Interface Standard. </title> <journal> The International Journal of Supercomputer Applications and High Performance Computing, </journal> <volume> 8(3), </volume> <year> 1994. </year>
Reference-contexts: Related Work 4.1. Global Computing Related Work There is a rapidly expanding body of work based on the vision of seamlessly integrating networked computers into a global computing resource. Recent network computing approaches include CONDOR [32], Linda [55], PVM [51], Piranha [24], MPI <ref> [39] </ref>, Network of Workstations (NOW) platform consisting of Pentiums, Sparcs and UltraSparcs. [3], Legion [28], GLOBUS [22], and WebOS [52]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput.
Reference: [40] <editor> O. Nierstrasz and D. Tsichritzis, editors. </editor> <booktitle> Component-Oriented Software Composition. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: Consequently, a broker is just another service. A broker itself may require additional resources, and take advantage of other services, such as other brokers. Service markets are being pursued by many research groups <ref> [36, 30, 42, 59, 40, 57] </ref> and standardization 1 Assuming all security bugs have been found and fixed. 2 Such services can promise better performance, since they require neither code-shipping nor a safe execution environment. organizations [41]; they allow for convenient software reuse, and for building applications from basic building blocks.
Reference: [41] <institution> Draft International Standard 13235 - ODP Trading Function. International Organisation for Standardization, International Electrotechnical Commission, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: Service markets are being pursued by many research groups [36, 30, 42, 59, 40, 57] and standardization 1 Assuming all security bugs have been found and fixed. 2 Such services can promise better performance, since they require neither code-shipping nor a safe execution environment. organizations <ref> [41] </ref>; they allow for convenient software reuse, and for building applications from basic building blocks. Applications: Given the current limited Internet/intranet communication bandwidth, communication requirements are a concern. Fortunately, the advanced Gigabit networks that are being developed and deployed should result in a dramatic improvement.
Reference: [42] <author> A. Puder, S. Markwitz, G. Gudermann, and K. Geihs. </author> <title> AI-based Trading in Open Distributed Processing. </title> <editor> In K. Ray-mond and L. Armstrong, editors, </editor> <title> Open Distributed Processing: Experiences with Distributed Environments, </title> <booktitle> Proceedings of the 3rd IFIP TC 6/WG 6.1 International Conference on Open Distributed Processing. </booktitle> <publisher> Chapman & Hall, </publisher> <year> 1995. </year>
Reference-contexts: Consequently, a broker is just another service. A broker itself may require additional resources, and take advantage of other services, such as other brokers. Service markets are being pursued by many research groups <ref> [36, 30, 42, 59, 40, 57] </ref> and standardization 1 Assuming all security bugs have been found and fixed. 2 Such services can promise better performance, since they require neither code-shipping nor a safe execution environment. organizations [41]; they allow for convenient software reuse, and for building applications from basic building blocks.
Reference: [43] <author> R. Saavedra-Barrera, A. Smith, and E. Miya. </author> <title> Machine Characterization Based on an Abstract High-Level Language. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38(12), </volume> <month> December </month> <year> 1989. </year>
Reference-contexts: One possibility is through micro-benchmarks that characterize the host as a point in a multidimensional performance space <ref> [43] </ref>. A suitable benchmark must be representative, quickly computable by the host, and quickly evaluated by the broker.
Reference: [44] <author> L. F. G. Sarmenta. Bayanihan: </author> <title> Web-Based Volunteer Computing Using Java. </title> <booktitle> In 2nd International Conference on World-Wide Computing and its Applications, </booktitle> <month> Mar. </month> <year> 1998. </year>
Reference-contexts: The flexibility of Java for Internet computing has been observed by several other researchers. A new Java-based generation of projects is aimed at establishing a software infrastructure on which a global computing vision can be implemented. These projects include ATLAS [5], Charlotte [6], ParaWeb [9], Bayanihan <ref> [44] </ref>, and Popcorn [10]. All these projects are explicitly designed to run parallel applications and provide a specific programming model. Other recent systems, e.g. JPVM [21], use Java to overcome heterogeneity, but are not intended to execute on anonymous machines.
Reference: [45] <author> P. A. G. Sivilotti and K. M. Chandy. </author> <title> Reliable Synchronization Primitives for Java Threads. </title> <type> Technical Report CS-TR-96-11, </type> <institution> California Institute of Technology, </institution> <month> June </month> <year> 1996. </year>
Reference-contexts: Market incentives are supported. Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [50] and Object Serialization [49], or already have been provided by other research groups (e.g. <ref> [45] </ref>). The secure execution of arbitrary binaries recently has been addressed by at least two techniques. First, software--based fault isolation techniques [13] guard against insecure system calls of programs by patching their binaries.
Reference: [46] <author> Softway. </author> <title> Guava - Softway's just-in-time compiler for Sun's Java language. </title> <address> http://guava.softway.com.au/. </address>
Reference-contexts: Performance: Since our infrastructure aims at providing better performance than is available locally, the efficient execution of anonymous code is essential. The interpretation overhead of portable languages is being overcome by modern compilation techniques such as just-in-time compilation <ref> [56, 46] </ref> that allow for an execution speed close to that of compiled C code. Scalability: As performance relies heavily on the number of participants, scalability is a key issue.
Reference: [47] <author> S. </author> <title> Star. TRADER: A Knowledge-based System for Trading in Markets. </title> <booktitle> In Proceedings of the 1st International Conference on Economics and Artificial Intelligence, </booktitle> <address> Aix-En-Provence, France, </address> <month> Sept. </month> <year> 1986. </year>
Reference-contexts: It would be useful to have a quantitative model that is experimentally verifiable, which can be used to determine the minimum economically feasible transaction size. Cost of trading algorithms: Humans can use trading strategies that are quite complex. However, Star <ref> [47] </ref> has successfully conducted double-auction markets between software entities using simple decision algorithms, yielding efficiencies comparable to human markets.
Reference: [48] <author> M. Stonebraker, R. Devine, M. Kornacker, W. Litwin, A. Pf-effer, A. Sah, and C. Staelin. </author> <title> An economic paradigm for query processing and data migration in Mariposa. </title> <booktitle> In " Proceedings of the Third International Conference on Parallel and Distributed Information Systems", </booktitle> <address> Austin, TX, </address> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: Processors send out bids on tasks to be done, and other processors respond with bids giving estimated completion times that reflect workstation speed and load. A simple scheduling protocol assigns tasks to workstations. Stonebraker et al. <ref> [48] </ref> use a market mechanism for data migration: Each site tries to maximize its income by buying and selling stor age objects, and processing queries about its objects.
Reference: [49] <author> Sun Microsystems, Inc. </author> <title> Java Object Serialization Specification, </title> <month> May </month> <year> 1996. </year> <note> Revision 0.9. </note>
Reference-contexts: Market incentives are supported. Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) [50] and Object Serialization <ref> [49] </ref>, or already have been provided by other research groups (e.g. [45]). The secure execution of arbitrary binaries recently has been addressed by at least two techniques. First, software--based fault isolation techniques [13] guard against insecure system calls of programs by patching their binaries.
Reference: [50] <author> Sun Microsystems, Inc. </author> <title> Java Remote Method Invocation Specification, </title> <month> May </month> <year> 1996. </year> <note> Revision 0.9. </note>
Reference-contexts: Rather, a market brings together buyers and sellers of CPU and determines which seller will run the computelet. Market incentives are supported. Some of the mechanisms needed to implement the proposed framework may eventually be realized through recently released standard Java components such as Remote Method Invocation (RMI) <ref> [50] </ref> and Object Serialization [49], or already have been provided by other research groups (e.g. [45]). The secure execution of arbitrary binaries recently has been addressed by at least two techniques. First, software--based fault isolation techniques [13] guard against insecure system calls of programs by patching their binaries.
Reference: [51] <author> V. S. Sunderam. </author> <title> PVM: A Framework for Parallel Distributed Computing. </title> <type> Technical Report ORNL/TM-11375, </type> <institution> Dept. of Math and Computer Science, Emory University, </institution> <address> Atlanta, GA, USA, </address> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: The infrastructure proposed must provide the means to overcome this heterogeneity. This issue has been addressed by either employing machine-independent languages, such as Java [26], E [18], and Limbo [33], or by providing multiple binary executables <ref> [51] </ref>. Machine-independent languages achieve portability at the expense of some performance; multiple binary executables achieve performance at the expense of portability. It thus is desirable to support both approaches, to meet any application's requirements. Security: Executing an untrusted piece of code poses integrity and security threats to the host. <p> Related Work 4.1. Global Computing Related Work There is a rapidly expanding body of work based on the vision of seamlessly integrating networked computers into a global computing resource. Recent network computing approaches include CONDOR [32], Linda [55], PVM <ref> [51] </ref>, Piranha [24], MPI [39], Network of Workstations (NOW) platform consisting of Pentiums, Sparcs and UltraSparcs. [3], Legion [28], GLOBUS [22], and WebOS [52]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput.
Reference: [52] <author> A. Vahdat, P. Eastham, C. Yoshikawa, E. Belani, T. An-derson, D. Culler, and M. Dahlin. WebOS: </author> <title> Operating System Services For Wide Area Applications. </title> <type> Technical Report CSD-97-938, </type> <institution> UC Berkeley, </institution> <year> 1997. </year>
Reference-contexts: Recent network computing approaches include CONDOR [32], Linda [55], PVM [51], Piranha [24], MPI [39], Network of Workstations (NOW) platform consisting of Pentiums, Sparcs and UltraSparcs. [3], Legion [28], GLOBUS [22], and WebOS <ref> [52] </ref>. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput. Multiple language support is another of its goals.
Reference: [53] <author> L. Vanhelsuwe. </author> <title> Create Your Own Supercomputer With Java. </title> <journal> JavaWorld, </journal> <volume> 2(1), </volume> <month> Jan. </month> <year> 1997. </year>
Reference-contexts: Raytracing Measurements We have ported a sequential raytracer written in Java to Javelin as an example of a real-world application that benefits from additional processors even if communication is relatively slow. The raytracer was written by Frederico Inacio de Moraes, and was first parallelized by Laurence Vanhelsuwe <ref> [53] </ref>.
Reference: [54] <author> C. A. Waldspurger, T. Hogg, B. A. Huberman, J. O. Kephart, and W. S. Stornetta. Spawn: </author> <title> A Distributed Computational Economy. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(2), </volume> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: Stonebraker et al. [48] use a market mechanism for data migration: Each site tries to maximize its income by buying and selling stor age objects, and processing queries about its objects. We are encouraged by the similarity of their approach to those of Waldspurger et al. <ref> [54] </ref> and Ferguson et al. [20], which apply these mechanisms to other computer resources. 5.
Reference: [55] <author> R. A. Whiteside and J. S. Leichter. </author> <title> Using Linda for Supercomputing on a Local Area Network. </title> <type> Technical Report YALEU/DCS/TR-638, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, Connecticut, </address> <year> 1988. </year>
Reference-contexts: Related Work 4.1. Global Computing Related Work There is a rapidly expanding body of work based on the vision of seamlessly integrating networked computers into a global computing resource. Recent network computing approaches include CONDOR [32], Linda <ref> [55] </ref>, PVM [51], Piranha [24], MPI [39], Network of Workstations (NOW) platform consisting of Pentiums, Sparcs and UltraSparcs. [3], Legion [28], GLOBUS [22], and WebOS [52]. The goal of the Legion research project is to provide secure shared object and name spaces, application-controlled fault-tolerance, improved response time, and greater throughput.
Reference: [56] <author> T. Wilkinson. </author> <title> Kaffe A free virtual machine to run Java code, </title> <note> 1997. http://www.tjwassoc.demon.co.uk/kaffe/kaffe.htm. </note>
Reference-contexts: Performance: Since our infrastructure aims at providing better performance than is available locally, the efficient execution of anonymous code is essential. The interpretation overhead of portable languages is being overcome by modern compilation techniques such as just-in-time compilation <ref> [56, 46] </ref> that allow for an execution speed close to that of compiled C code. Scalability: As performance relies heavily on the number of participants, scalability is a key issue.
Reference: [57] <author> A. Wolisz and V. Tschammer. </author> <title> Service Provider Selection in an Open Services Environment. </title> <booktitle> In Proceedings of the 2nd IEEE Workshop on Future Trends on Distributed Computing in the 1990's, </booktitle> <address> Cairo, Egypt, </address> <month> Sept. </month> <year> 1990. </year> <note> IEEE. </note>
Reference-contexts: Consequently, a broker is just another service. A broker itself may require additional resources, and take advantage of other services, such as other brokers. Service markets are being pursued by many research groups <ref> [36, 30, 42, 59, 40, 57] </ref> and standardization 1 Assuming all security bugs have been found and fixed. 2 Such services can promise better performance, since they require neither code-shipping nor a safe execution environment. organizations [41]; they allow for convenient software reuse, and for building applications from basic building blocks.
Reference: [58] <author> R. Wolski, N. Spring, and C. Peterson. </author> <title> Implementing a Performance Forecasting System for Metacomputing: The Network Weather Service. </title> <booktitle> In Proceedings of the ACM/IEEE Conference on Supercomputing (SC97), </booktitle> <address> San Jose, CA, </address> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: Thus, both must be taken into account when mapping applications to the available resources. This implies the need for methods to determine or forecast the communication latency and bandwidth requirements and execution time constraints for given problems <ref> [58] </ref>. Computational substrate: The envisioned infrastructure provides a substrate on which various communication, data, and programming models may be implemented; different models are suitable for different applications. We intend to provide the programmer with abstractions, such as a global file system, shared memory, and reliable communication channels.
Reference: [59] <author> A. M. Zaremski and J. M. Wing. </author> <title> Specification Matching of Software Components. </title> <booktitle> In Proceedings of the 3rd ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <month> Oct. </month> <year> 1995. </year>
Reference-contexts: Consequently, a broker is just another service. A broker itself may require additional resources, and take advantage of other services, such as other brokers. Service markets are being pursued by many research groups <ref> [36, 30, 42, 59, 40, 57] </ref> and standardization 1 Assuming all security bugs have been found and fixed. 2 Such services can promise better performance, since they require neither code-shipping nor a safe execution environment. organizations [41]; they allow for convenient software reuse, and for building applications from basic building blocks.
References-found: 59

