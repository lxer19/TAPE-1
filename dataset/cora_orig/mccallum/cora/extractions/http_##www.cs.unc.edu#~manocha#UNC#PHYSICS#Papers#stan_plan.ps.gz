URL: http://www.cs.unc.edu/~manocha/UNC/PHYSICS/Papers/stan_plan.ps.gz
Refering-URL: http://www.cs.unc.edu/~manocha/UNC/PHYSICS/papers.html
Root-URL: http://www.cs.unc.edu
Title: On Multi-Arm Manipulation Planning a movable object between two configurations among obstacles. To avoid collisions
Author: Yoshihito Koga and Jean-Claude Latombe 
Note: nipulate  this approach show that it is not only  Acknowledgments: This research was funded by ARPA grant n00014-92-j-1809. Y. Koga is supported in part by an NSERC fellowship. This research benefited from com ments by Tsai-Yen Li and Gerardo Pardo-Castellote.  
Address: Stanford, CA 94305, USA  
Affiliation: Robotics Laboratory, Department of Computer Science, Stanford University  
Abstract: This paper considers the automatic generation of motion paths for several cooperating robot arms to ma
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alami, T. Simeon and J.P. Laumond, </author> <title> "A Geometrical Approach to Planning Manipulation Tasks: The Case of Discrete Placements and Grasps," </title> <booktitle> in Robotics Research 5, </booktitle> <editor> H. Miura and S. Arimoto, eds., </editor> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1990, </year> <pages> pp. 453-459. </pages>
Reference-contexts: Laumond and Alami [9] propose an O (n 4 ) algorithm to solve a similar problem where the robot and the movable object are both discs and the obstacles are polygonal. Alami, Simeon and Laumond <ref> [1] </ref> describe a manipulation planner for one robot and several movable objects. Both the number of legal grasps of each object (positions of the robot relative to the object) and the number of legal placements of the movable objects are finite. <p> Both the number of legal grasps of each object (positions of the robot relative to the object) and the number of legal placements of the movable objects are finite. The method was implemented for two simple robots: a translating polygon <ref> [1] </ref> and a three-revolute-joint planar arm [10]. A theoretical study of the more general case where the set of legal grasps and placements of the movable objects are manifolds (continuous sets) is presented in [10]. Our work differs from this previous research in several ways.
Reference: [2] <author> J. Barraquand and J.C. Latombe, </author> <title> "Robot Motion Planning: A Distributed Representation Approach," </title> <journal> Int. J. Robotics Research, </journal> <volume> 10(6), </volume> <month> December </month> <year> 1991. </year>
Reference-contexts: The planner computes the path t obj so that M avoids collision with the static obstacles B j . This is done using RPP (Randomized Path Planner), which is thus a component of our planner. RPP is described in detail in <ref> [2, 8] </ref>. RPP generates t obj as a list of adjacent configurations in a fine grid placed over C obj (the 6D C-space of M), by inserting one configuration after the other starting with the initial configuration of M. The original RPP only checks that each inserted configuration is collision-free. <p> An obvious example where this limitation may prevent our planner from finding a path is when the robot system contains a single arm; no regrasp is then possible. RPP is only probabilistically complete <ref> [2] </ref>. If a path exists for M, it will find it, but the computation time cannot be bounded in advance. Furthermore, if no path exists, RPP may run for ever.
Reference: [3] <author> P. Ferbach and J. Barraquand, </author> <title> A Penalty Function Method for Constrained Motion Planning, </title> <type> Rep. No. 34, </type> <institution> Paris Research Lab., </institution> <month> DEC, Sept. </month> <year> 1993. </year>
Reference-contexts: Similarly, in <ref> [3] </ref>, Ferbach and Barraquand introduce a practical approach to this manipulation planning problem using the method of variational dynamic programming. Along a slightly different line of research, Lynch addresses the problem of planning pushing paths [13].
Reference: [4] <author> O. Khatib, </author> <title> "Object Manipulation in a Multi-Effector Robot System," Robotics Research 4, </title> <editor> R. Bolles and B. Roth, eds., </editor> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988, </year> <pages> pp. 137-144. </pages>
Reference-contexts: Research in multi-arm manipulation planning is made more critical by the advent of new effective techniques to control cooperative robot arms (closed-loop kinematic chains). For example, see <ref> [4, 17] </ref>. 3 Problem Statement We now give a presentation of the multi-arm manipulation planning problem using a configuration space formalization. We consider only a single movable object, but for the rest, our presentation is general.
Reference: [5] <author> Y. Koga and J.C. Latombe, </author> <title> "Experiments in Dual-Arm Manipulation Planning," </title> <booktitle> Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <address> Nice, France, </address> <year> 1992, </year> <pages> pp. 2238-2245. </pages>
Reference-contexts: A better solution for the future will be to include the automatic computation of grasps. A substantial amount of research has been done on this topic. See [16] for a commented list of bibliographical references. We have done some prior work in manipulation planning. In <ref> [5] </ref> we propose several planners to generate manipulation paths for two identical arms in a 2D workspace. In [6] we extend one of these planners to allow the manipulation of several movable objects; this problem raises the additional difficulty of selecting the order in which the objects should be moved.
Reference: [6] <author> Y. Koga, T. Lastennet, J.C. Latombe, and T.Y. </author> <title> Li "Multi-Arm Manipulation Planning," </title> <booktitle> Proc. 9th Int. Symp. Automation and Robotics in Construction, </booktitle> <address> Tokyo, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: A substantial amount of research has been done on this topic. See [16] for a commented list of bibliographical references. We have done some prior work in manipulation planning. In [5] we propose several planners to generate manipulation paths for two identical arms in a 2D workspace. In <ref> [6] </ref> we extend one of these planners to allow the manipulation of several movable objects; this problem raises the additional difficulty of selecting the order in which the objects should be moved. <p> Later, we hope to include the ability to regrasp the movable object by having the arms place it in a stable configuration against some obstacles. We also plan to use existing results to automatically compute the grasp set of an object from its geometric model. The technique described in <ref> [6] </ref> to deal with multiple movable objects in a 2D space should also be applicable in our planner. Furthermore, like in [6], we plan to allow parallel execution of consecutive transfer and transit paths as long as this parallelism does not yield collisions. <p> We also plan to use existing results to automatically compute the grasp set of an object from its geometric model. The technique described in <ref> [6] </ref> to deal with multiple movable objects in a 2D space should also be applicable in our planner. Furthermore, like in [6], we plan to allow parallel execution of consecutive transfer and transit paths as long as this parallelism does not yield collisions. Finally, we hope to incorporate considerations of torque constraints and dynamics issues in the planning process.
Reference: [7] <author> K. Kondo, </author> <title> Inverse Kinematics of a Human Arm, </title> <note> in preparation, </note> <year> 1993. </year>
Reference-contexts: Most of our experiments so far have been conducted with simulated mechanical arms. However, we have completed a first integration of the planner with a soft-ware module simulating human arms which incorporates the inverse kinematics of such arms <ref> [7] </ref>. The result is a system that computes natural human-arm manipulation motions. The goal of this work is to help in the interactive generation of animated video sequences for studying task ergonomy. Also, such videos would usefully replace cumbersome instruction manuals accompanying some assembly kits.
Reference: [8] <author> J.C. Latombe, </author> <title> Robot Motion Planning, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: the implemented planner. requires two arms to move it, but only one arm to hold it statically. (a) (b) (c) (g) (h) (i) 2 Related Work Path planning for one robot among fixed obstacles and various extensions of this basic problem have been actively studied during the past two decades <ref> [8] </ref>. However, research strictly addressing manipulation planning is fairly recent. The first paper to tackle this problem is by Wilfong [19]. It considers a single-body robot translating in a 2D workspace with multiple movable objects. The robot, movable objects, and obstacles are modeled as convex polygons. <p> The object M can only move by having one or several robots grasp and carry it to some destination. Let C i and C obj be the C-spaces (configuration spaces) of the arms A i and the object M, respectively <ref> [11, 8] </ref>. Each C i has dimension n i , where n i is the number of degrees of freedom of the robot A i , and C obj is 6D. <p> The planner computes the path t obj so that M avoids collision with the static obstacles B j . This is done using RPP (Randomized Path Planner), which is thus a component of our planner. RPP is described in detail in <ref> [2, 8] </ref>. RPP generates t obj as a list of adjacent configurations in a fine grid placed over C obj (the 6D C-space of M), by inserting one configuration after the other starting with the initial configuration of M. The original RPP only checks that each inserted configuration is collision-free. <p> It yields grasp assignment lists up to around 2,000 elements. For these examples, in computing the transit paths RPP uses the sum of the angular joint distances to the goal configuration as the guiding potential. However, in computing t obj RPP uses an NF2-based potential with three control points <ref> [8] </ref>. For both cases of finding the transit paths and t obj , we limit the amount of computation spent in RPP to three backtrack operations [8], after which the planner returns failure. Failure to find t obj results in the immediate failure to find a manipulation path. <p> However, in computing t obj RPP uses an NF2-based potential with three control points <ref> [8] </ref>. For both cases of finding the transit paths and t obj , we limit the amount of computation spent in RPP to three backtrack operations [8], after which the planner returns failure. Failure to find t obj results in the immediate failure to find a manipulation path. Similarly, a failure to find transit paths to link together the layers of transfer paths results in a failure to find a manipulation path.
Reference: [9] <author> J.P. Laumond and R. Alami, </author> <title> A Geometrical Approach to Planning Manipulation Tasks: The Case of a Circular Robot and a Movable Circular Object Amidst Polygonal Obstacles, </title> <journal> Rep. </journal> <volume> No. 88314, </volume> <pages> LAAS, </pages> <address> Toulouse, </address> <year> 1989. </year>
Reference-contexts: When there is a single movable object, he proposes a complete algorithm that runs in O (n 3 log 2 n) time, where n is the total number of vertices of all the objects in the environment. Laumond and Alami <ref> [9] </ref> propose an O (n 4 ) algorithm to solve a similar problem where the robot and the movable object are both discs and the obstacles are polygonal. Alami, Simeon and Laumond [1] describe a manipulation planner for one robot and several movable objects.
Reference: [10] <author> J.P. Laumond and R. Alami, </author> <title> A Geometrical Approach to Planning Manipulation Tasks in Robotics, </title> <journal> Rep. </journal> <volume> No. 89261, </volume> <pages> LAAS, </pages> <address> Toulouse, </address> <year> 1989. </year>
Reference-contexts: Both the number of legal grasps of each object (positions of the robot relative to the object) and the number of legal placements of the movable objects are finite. The method was implemented for two simple robots: a translating polygon [1] and a three-revolute-joint planar arm <ref> [10] </ref>. A theoretical study of the more general case where the set of legal grasps and placements of the movable objects are manifolds (continuous sets) is presented in [10]. Our work differs from this previous research in several ways. <p> The method was implemented for two simple robots: a translating polygon [1] and a three-revolute-joint planar arm <ref> [10] </ref>. A theoretical study of the more general case where the set of legal grasps and placements of the movable objects are manifolds (continuous sets) is presented in [10]. Our work differs from this previous research in several ways. Rather than dealing with a single robot, we consider the case of multiple cooperating robot arms moving in a 3D workspace.
Reference: [11] <author> T. Lozano-Perez, </author> <title> "Spatial Planning: A Configuration Space Approach," </title> <journal> IEEE Tr. Computers, </journal> <volume> 32(2), </volume> <year> 1983, </year> <pages> pp. 108-120. </pages>
Reference-contexts: The object M can only move by having one or several robots grasp and carry it to some destination. Let C i and C obj be the C-spaces (configuration spaces) of the arms A i and the object M, respectively <ref> [11, 8] </ref>. Each C i has dimension n i , where n i is the number of degrees of freedom of the robot A i , and C obj is 6D.
Reference: [12] <author> T. Lozano-Perez et al., "Handey: </author> <title> A Task-Level Robot System," Robotics Research 4, </title> <editor> R. Bolles and B. Roth, eds., </editor> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988, </year> <pages> pp. 29-36. </pages>
Reference-contexts: We too need to plan regrasp operations. However, the only regrasps we consider avoids contact between the object and the environment; they necessarily involve multiple arms. The work on regrasping presented in [18] is part of an integrated manipulation system, handey, described in <ref> [12] </ref>. This system controls a single PUMA arm which builds an assembly in a 3D workspace. It integrates vision, path planning, grasp planning, and motion control.
Reference: [13] <author> K.M. Lynch, </author> <title> "Planning Pushing Paths," </title> <booktitle> Proc. JSME Int. Conf. Advanced Mechatronics, </booktitle> <address> Tokyo, </address> <year> 1993, </year> <pages> pp. 451-456. </pages>
Reference-contexts: Similarly, in [3], Ferbach and Barraquand introduce a practical approach to this manipulation planning problem using the method of variational dynamic programming. Along a slightly different line of research, Lynch addresses the problem of planning pushing paths <ref> [13] </ref>. He establishes the conditions under which the contact between the robot and the movable object is stable, given the friction coefficients and the center of friction between the movable object and its supporting surface. These conditions yield nonholonomic constraints on the the motion of the robot.
Reference: [14] <author> P.A. O'Donnell and T. Lozano-Perez, </author> <title> "Deadlock-Free and Collision-Free Coordination of Two Robot Manipulators," </title> <booktitle> Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <year> 1989, </year> <pages> pp. 484-489. </pages>
Reference-contexts: While it embeds a solution to many issues not considered in this paper, it does not address the problem of planning cooperative robot motions to accomplish manipulation tasks. Planning coordinated paths for multiple robots, without movable objects, is studied in several papers, e.g. see <ref> [14] </ref>. Grasp planning is potentially an important component of manipulation planning. In our planner, grasps are selected from a finite predefined set of grasps. A better solution for the future will be to include the automatic computation of grasps. A substantial amount of research has been done on this topic.
Reference: [15] <author> G. Pardo-Castellote, T.Y. Li, Y. Koga, R.H. Cannon, J.C. Latombe, and S.A. Schneider, </author> <title> "Experimental Integration of Planning in a Distributed Control System," </title> <booktitle> Preprints 3rd Int. Symp. Experimental Robotics, </booktitle> <address> Kyoto, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: Experiments have been conducted with this planner using a real dual-arm robot system developed in the Aerospace Robotics Laboratory at Stanford University <ref> [15] </ref>. Research in multi-arm manipulation planning is made more critical by the advent of new effective techniques to control cooperative robot arms (closed-loop kinematic chains). For example, see [4, 17]. 3 Problem Statement We now give a presentation of the multi-arm manipulation planning problem using a configuration space formalization.
Reference: [16] <author> J. Pertin-Troccaz, "Grasping: </author> <title> A State of the Art," in The Robotics Review 1, </title> <editor> O. Khatib, J.J. Craig, and T. Lozano-Perez, eds., </editor> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989, </year> <pages> pp. 71-98. </pages>
Reference-contexts: In our planner, grasps are selected from a finite predefined set of grasps. A better solution for the future will be to include the automatic computation of grasps. A substantial amount of research has been done on this topic. See <ref> [16] </ref> for a commented list of bibliographical references. We have done some prior work in manipulation planning. In [5] we propose several planners to generate manipulation paths for two identical arms in a 2D workspace.
Reference: [17] <author> S.A. Schneider and R.H. Cannon, </author> <title> "Object Impedance Control for Cooperative Manipulation: Theory and Experimental Results," </title> <journal> IEEE Tr. Robotics and Automation, </journal> <volume> 8(3), </volume> <year> 1992, </year> <pages> pp. 383-394. </pages>
Reference-contexts: Research in multi-arm manipulation planning is made more critical by the advent of new effective techniques to control cooperative robot arms (closed-loop kinematic chains). For example, see <ref> [4, 17] </ref>. 3 Problem Statement We now give a presentation of the multi-arm manipulation planning problem using a configuration space formalization. We consider only a single movable object, but for the rest, our presentation is general.
Reference: [18] <author> P. Tournassoud, T. Lozano-Perez, and E. Mazer, "Re-grasping," </author> <booktitle> Proc. IEEE Int. Conf. Robotics and Automation, </booktitle> <address> Raleigh, NC, </address> <year> 1987, </year> <pages> pp. 1924-1928. </pages>
Reference-contexts: These conditions yield nonholonomic constraints on the the motion of the robot. Regrasping is a vital component in manipulation tasks. Tournassoud, Lozano-Perez, and Mazer <ref> [18] </ref> specifically address this problem. They describe a method for planning a sequence of regrasp operations by a single arm to change an initial grasp into a goal grasp. At every re grasp, the object is temporarily placed on a horizontal table in a stable position selected by the planner. <p> We too need to plan regrasp operations. However, the only regrasps we consider avoids contact between the object and the environment; they necessarily involve multiple arms. The work on regrasping presented in <ref> [18] </ref> is part of an integrated manipulation system, handey, described in [12]. This system controls a single PUMA arm which builds an assembly in a 3D workspace. It integrates vision, path planning, grasp planning, and motion control.
Reference: [19] <author> G. Wilfong, </author> <title> "Motion Planning in the Presence of Movable Obstacles," </title> <booktitle> Proc. 4th ACM Symp. Computational Geometry, </booktitle> <year> 1988, </year> <pages> pp. 279-288. </pages>
Reference-contexts: However, research strictly addressing manipulation planning is fairly recent. The first paper to tackle this problem is by Wilfong <ref> [19] </ref>. It considers a single-body robot translating in a 2D workspace with multiple movable objects. The robot, movable objects, and obstacles are modeled as convex polygons. The robot "grasps" an object by making one of its edges coincide with an edge of the object.
References-found: 19

