URL: http://www.cs.washington.edu/homes/bricker/pubs/cscw98.ps
Refering-URL: http://www.cs.washington.edu/homes/bricker/pubs.html
Root-URL: 
Email: bricker, marla, emifuji, tanimoto-@cs.washington.edu  
Title: Colt: A System for Developing Software that Supports Synchronous Collaborative Activities  
Author: Lauren J. Bricker, Marla J. Baker, Emi Fujioka, Steven L. Tanimoto 
Keyword: Computer supported collaboration, multiple-user interface, synchronous, cooperatively-controlled objects  
Address: Box 352350 Seattle, Washington 98195-2350 USA  
Affiliation: Department of Computer Science and Engineering University of Washington,  
Abstract: This paper presents Colt , a system designed to aid in the development of applications that support close collaboration between two or more users. The Colt system is comprised of three parts, a design methodology, a software toolkit, and visualization and analysis tools. The software toolkit includes computational objects that support simultaneous influences from multiple users. This paper defines and gives examples of these Cooperatively Controlled Objects ( CCOs) then discusses design and interface issues for developing them. Finally, four example collaborative activities that were built using Colt and CCOs are described: a drawing program, a jigsaw puzzle, a coordination game and a color matching activity. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Baker, M.J. Bricker, L.J., Tanimoto, </author> <title> S.L. Cooperative interaction techniques in a computer-supported collaborative learning environment . University of Washington Technical Report UW-CSE-97-04-03. </title> <month> April, </month> <year> 1997. </year>
Reference-contexts: By making it difficult to manipulate the pen alone, this control encourages the users to focus together on the task and communicate about the problem posed by the activity. The Collaborative Puzzle Activity The collaborative puzzle is an activity implemented by a student using Colt <ref> [1] </ref>. The users may choose to solve the puzzle in parallel, or by using the CCO version of this activity. <p> These added visualizations are described in more detail in <ref> [1] </ref>. An Exercise in Coordination: The Chopstick Activity The Chopstick activity was another activity developed by a student testing the Colt System. This activity is based on a game where two people each use a chopstick to pick up a bean. <p> Her only negative comment about using the toolkit was that it was constantly evolving at the time she was developing her activity, and that the documentation was somewhat scarce and out-of-date. <ref> [ 1] </ref> The latter problem was later rectified. The Chopstick game was designed and developed by an undergraduate at the University of Washington (Emi Fujioka) as a way to test the design methodology as well as the toolkit.
Reference: 2. <author> Begole, J., Struble, C., Shaffer, C., and Smith, R. </author> <title> Transparent Sharing of Java Applets: A Replicated Approach, </title> <booktitle> in Proceedings of UIST97 , (Banff, </booktitle> <address> Canada, </address> <month> October 14-17, </month> <title> 1997), </title> <publisher> ACM Press, </publisher> <address> N.Y., </address> <note> pp 55- 64. </note>
Reference-contexts: These toolkits facilitate the development of cooperative software by providing abstractions for more difficult concepts in programming groupware applications, such as how to maintain synchronization of the objects or views of objects, and users dynamically joining and leaving sessions. Most of the existing toolkits, such as JAMM <ref> [ 2] </ref>, Rendevous [ 9], DistView [ 13], GroupKit [8], and Habanero [ 12] support synchronous cooperation over a network. We have designed and developed Colt Toolkit to facilitate the rapid prototyping or implementation of such applications.
Reference: 3. <author> Bier, E. and Freeman, S. MMM: </author> <title> A User Interface Architecture for Shared Editors on a Single Screen, </title> <booktitle> in Proceedings of UIST91 , (Hilton Head, </booktitle> <month> November 11-13, </month> <title> 1991), </title> <publisher> ACM Press, N.Y., </publisher> <pages> pp 79-86. </pages>
Reference-contexts: Related Work There are a number of collaborative systems that encourage communication through common objects [ 8], tasks [ 9] or physical situations <ref> [ 3] </ref>. Groupkit [ 8] and Turbo Turtle [ 6], in particular, use indicators such as telepointers and other awareness widgets to indicate to others (working at distant locations) where a user is working on the screen. <p> However, this scenario typically causes frustration because of either an unintuitive interface or a contention for the mouse or keyboard. Obvious solutions include having the users interact over a network, or to support multiple input devices on a single machine, similar to systems such as MultiIn [4] and MMM <ref> [3] </ref>. Aside from the hardware, the software should indicate objects each user may access. Also, some indication should be given to all users as to which user currently has possession or is controlling each object in the shared space.
Reference: 4. <author> Bricker, L., Tanimoto, S., Rothenberg, A., Hutama, D., Wong, T. </author> <title> Multiplayer Activities Which Develop Mathematical Coordination, </title> <booktitle> in Proceedings of CSCL95 (Bloomington, </booktitle> <month> October 17-20, </month> <title> 1995), </title> <publisher> ACM Press, N.Y., </publisher> <pages> pp 32-39. </pages>
Reference-contexts: Although the students enjoyed working together, they were hampered by their contention for a single input resource (the mouse). The preliminary testing of four MultiIn-based, multiplayer activities <ref> [ 4] </ref> provided anecdotal evidence that the students tend to communicate effectively about the problems posed while using highly synchronous copresent applications. These activities contain objects that allow close synchronous interactions between users working closely on a task. <p> More complicated spatial objects, such as fractals, can be cooperatively controlled by allowing users to jointly manipulate their parameters or properties. Yet another example of cooperative control can be found in the Curve Fitter program, described in <ref> [4] </ref>, in which two to four users manipulate the shape of a degree-n polynomial curve by moving n+1 control points located on the curve. For each geometrical or abstract object there usually are a number of different plausible methods for cooperative control. <p> However, this scenario typically causes frustration because of either an unintuitive interface or a contention for the mouse or keyboard. Obvious solutions include having the users interact over a network, or to support multiple input devices on a single machine, similar to systems such as MultiIn <ref> [4] </ref> and MMM [3]. Aside from the hardware, the software should indicate objects each user may access. Also, some indication should be given to all users as to which user currently has possession or is controlling each object in the shared space. <p> As in Bricker, et al <ref> [ 4] </ref>, the activities described below allow each user to own an input device and corresponding colored cursor on the screen. The color of the cursor identifies its user. Objects are displayed in a users color if only they are permitted to manipulate that object. <p> The tool produces an output file containing the analysis in a tab-delimited text form. ACTIVITIES THAT EMPLOY COOPERATIVE CONTROL We have developed a number of activities that employ CCOs using the Colt system. As in Bricker et al <ref> [ 4] </ref>, the activities described below allow each user to own an input device and corresponding colored cursor on the screen. The color of the cursor identifies its user. Objects are displayed in a users color if only they are permitted to manipulate that object. <p> In the most difficult case, the basket slowly moves across the screen. Figure 9 shows the simplest version of this activity in action. The Color Matcher: Colt style The Color Matcher activity, as described in <ref> [ 4] </ref>, was originally implemented in Microsofts Visual Basic with the MultiIn system to support the Access.Bus multiple input devices.
Reference: 5. <author> Bricker, L. </author> <title> Cooperatively Controlled Objects in Support of Collaboration . Ph.D. </title> <type> Thesis, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <address> Seattle, </address> <year> 1998. </year>
Reference-contexts: MultiIn can only be used under Windows 3.1, and we wished to conduct a user study on a version of this activity under Windows 95 (for more information on the user study, see <ref> [ 5] </ref>). The original version of the Color Matcher activity took an undergraduate student approximately ten weeks to implement. The reimplementation of the activity using Colt took the author only a few days.
Reference: 6. <author> Cockburn, A. and Greenberg, S. </author> <title> Childrens Collaboration Styles in a Newtonian MicroWorld, </title> <booktitle> in Proceedings of CHI'96 (April 13-18, </booktitle> <address> Vancouver, BC), ACM/SIGCHI, N.Y., </address> <year> 1996, </year> <pages> pp. 181-182. </pages>
Reference-contexts: Related Work There are a number of collaborative systems that encourage communication through common objects [ 8], tasks [ 9] or physical situations [ 3]. Groupkit [ 8] and Turbo Turtle <ref> [ 6] </ref>, in particular, use indicators such as telepointers and other awareness widgets to indicate to others (working at distant locations) where a user is working on the screen.
Reference: 7. <author> Ellis. C. A., Gibbs, S. J., and Rein, G. L. </author> <title> Groupware: Some issues and experiences. </title> <journal> Communications of the ACM , 34(1) </journal> <pages> 38-58, </pages> <year> 1991. </year>
Reference-contexts: This is similar to graphs seen in the CSCW and CSCL literature, such as the one in Ellis, et al <ref> [ 7, p. 41] </ref>, where groupware is categorized based on the location of the users (same or difference places) and the times or method of synchronization (same or different times). <p> Copresent vs. Distant Collaboration Considerations A popular way to distinguish different kinds of CSCL situations is along an axis that represents the relative distance between the participants (long-distance, intra-meeting-room, or copresent) <ref> [ 7] </ref>. While the definition of a CCO is not dependent on the location of the users, different interfaces may be required for each situation. In copresent collaboration, communication is not always verbal. Some forms of communication are based on a shared understanding of actions and gestures.
Reference: 8. <author> Gutwin, C, Stark, G., and Greenberg, S. </author> <title> Support for Workspace Awareness in Educational Groupware, </title> <booktitle> in Proceedings of CSCL95 (Bloomington, </booktitle> <month> October 17-20, </month> <title> 1995), </title> <publisher> ACM Press, N.Y., </publisher> <pages> pp 147-156. </pages>
Reference-contexts: Supporting multiple input devices on one machine can solve this problem, and can also reduce the conflicts that typically arise over one input device when multiple people are working together. Related Work There are a number of collaborative systems that encourage communication through common objects <ref> [ 8] </ref>, tasks [ 9] or physical situations [ 3]. Groupkit [ 8] and Turbo Turtle [ 6], in particular, use indicators such as telepointers and other awareness widgets to indicate to others (working at distant locations) where a user is working on the screen. <p> Related Work There are a number of collaborative systems that encourage communication through common objects <ref> [ 8] </ref>, tasks [ 9] or physical situations [ 3]. Groupkit [ 8] and Turbo Turtle [ 6], in particular, use indicators such as telepointers and other awareness widgets to indicate to others (working at distant locations) where a user is working on the screen. <p> Most of the existing toolkits, such as JAMM [ 2], Rendevous [ 9], DistView [ 13], GroupKit <ref> [8] </ref>, and Habanero [ 12] support synchronous cooperation over a network. We have designed and developed Colt Toolkit to facilitate the rapid prototyping or implementation of such applications.
Reference: 9. <author> Hill, R., Brinck, T., Patterson, J. Rohall, S., and Wilner, W. </author> <title> The Rendezvous language and architecture. </title> <journal> Communications of the ACM , 36(1) </journal> <pages> 62-67, </pages> <year> 1993. </year>
Reference-contexts: Supporting multiple input devices on one machine can solve this problem, and can also reduce the conflicts that typically arise over one input device when multiple people are working together. Related Work There are a number of collaborative systems that encourage communication through common objects [ 8], tasks <ref> [ 9] </ref> or physical situations [ 3]. Groupkit [ 8] and Turbo Turtle [ 6], in particular, use indicators such as telepointers and other awareness widgets to indicate to others (working at distant locations) where a user is working on the screen. <p> Most of the existing toolkits, such as JAMM [ 2], Rendevous <ref> [ 9] </ref>, DistView [ 13], GroupKit [8], and Habanero [ 12] support synchronous cooperation over a network. We have designed and developed Colt Toolkit to facilitate the rapid prototyping or implementation of such applications.
Reference: 10. <author> Inkpen, K., Booth, K.S., Klawe, M., and Upitis, R. </author> <title> Playing together beats playing apart, especially for girls, </title> <booktitle> in Proceedings of CSCL '95 (Bloomington, </booktitle> <month> October 17-20, </month> <year> 1995), </year> <pages> pp. 177-181. </pages>
Reference-contexts: We believe that there are some situations in which a common focus and closer communication are objectives of the activity. Additionally, there is evidence of increased problem solving, and enjoyment when users work closely together on computer-based tasks. For example, Inkpen <ref> [ 10] </ref> found pairs of students were able to solve more puzzles when working together on a single computer as compared to solving them alone or on separate computers side-by-side. Although the students enjoyed working together, they were hampered by their contention for a single input resource (the mouse).
Reference: 11. <author> Munson, J. and Dewan, P. </author> <title> A concurrency control framework for collaborative systems, </title> <booktitle> in Proceedings of CSCW 96 (Boston, </booktitle> <month> November 16-20, </month> <year> 1996), </year> <pages> pp. 278-287. </pages>
Reference: 12. <institution> National Center for Supercomputing Applications. </institution> <note> NCSA Habanero. http://www.ncsa.uiuc.edu/SDG/Software/Habanero/, June 1996. </note>
Reference-contexts: Most of the existing toolkits, such as JAMM [ 2], Rendevous [ 9], DistView [ 13], GroupKit [8], and Habanero <ref> [ 12] </ref> support synchronous cooperation over a network. We have designed and developed Colt Toolkit to facilitate the rapid prototyping or implementation of such applications.
Reference: 13. <author> Prakash, A. and Shim, H.S. DistView: </author> <title> support for building efficient collaborative applications using replicated objects, </title> <booktitle> in Proceedings of CSCW 94 (Chapel Hill, </booktitle> <month> October 22-26, </month> <year> 1994), </year> <pages> pp. 153-164. </pages>
Reference-contexts: Most of the existing toolkits, such as JAMM [ 2], Rendevous [ 9], DistView <ref> [ 13] </ref>, GroupKit [8], and Habanero [ 12] support synchronous cooperation over a network. We have designed and developed Colt Toolkit to facilitate the rapid prototyping or implementation of such applications.
Reference: 14. <author> Shen, H. and Dewan, P. </author> <title> Access Control for Collaborative Environments, </title> <booktitle> in Proceedings of CSCW92 (Toronto, </booktitle> <address> October 31-November 4, 1992), </address> <publisher> ACM Press, N.Y., </publisher> <pages> pp 51-58. </pages>
Reference-contexts: The output of the function determines the value of the property. By providing one such function for each of the CCOs modifiable properties, a complete control mechanism for the CCO can be specified. Fine-grained sharing is a previously studied approach for defining one class of CCO <ref> [ 14] </ref>. There, an object is expressed in terms of its properties, each of which is controlled by one of the users. Although fine-grained sharing can offer users a clear delineation of responsibility and control for shared objects, it lacks the ability to compel tight cooperation among the users. <p> Cooperatively controlled objects are implemented in our software environment as reusable C++ classes, and they thereby can inherit state and behavior. CCOs derive the ability for sharing from access control lists similar to <ref> [14] </ref>. Other properties of a CCO include location, size, orientation, coordinate system, display parameters, and color. An object will ignore attempts to change a property by users who do not have the proper privileges (as dictated by the access control lists).
References-found: 14

