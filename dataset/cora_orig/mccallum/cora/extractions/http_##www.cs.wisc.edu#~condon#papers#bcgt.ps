URL: http://www.cs.wisc.edu/~condon/papers/bcgt.ps
Refering-URL: http://www.cs.wisc.edu/~condon/condon.html
Root-URL: 
Title: DNA Models and Algorithms for NP-complete Problems  
Author: Eric Bach Anne Condon Elton Glaser Celena Tanguay 
Date: March 27, 1996  
Address: 1210 West Dayton Street Madison, WI 57306 USA  
Affiliation: Computer Sciences Department University of Wisconsin  
Abstract: A goal of research on DNA computing is to solve problems that are beyond the capabilities of the fastest silicon-based supercomputers. Adleman and Lipton present exhaustive search algorithms for 3Sat and 3-Coloring, which can only be run on small instances and hence are not practical. In this paper, we show how improved algorithms can be developed for the 3-Coloring and Independent Set problems. Our algorithms use only the DNA operations proposed by Adleman and Lipton, but combine them in more powerful ways, and use polynomial preprocessing on a standard computer to tailor them to the specific instance to be solved. The main contribution of this paper is a more general model of DNA algorithms than that proposed by Lipton. We show that DNA computation for NP-complete problems can do more than just exhaustive search. Further research in this direction will help determine whether or not DNA computing is viable for NP-hard problems. A second contribution is the first analysis of errors that arise in generating the solution space for DNA computation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. M. Adleman, </author> <title> Molecular Computation of Solutions to Combinatorial Problems, </title> <booktitle> Science 266, </booktitle> <month> 11 November </month> <year> 1994, </year> <pages> pp. 1021-1024. </pages>
Reference-contexts: 1 Introduction Adleman described how he used standard tools of molecular biology to solve a 7-vertex instance of the Hamiltonian Path problem <ref> [1] </ref>. A major goal of subsequent research in this area is to understand how DNA computing can be used to solve NP-hard problems. To address this goal, Lipton [10] and Adleman [2] proposed the following model of DNA computation.
Reference: [2] <author> L. M. Adleman, </author> <title> On Constructing a Molecular Computer, </title> <type> Manuscript, </type> <institution> Department of Computer Science, University of Southern California, </institution> <year> 1995. </year>
Reference-contexts: A major goal of subsequent research in this area is to understand how DNA computing can be used to solve NP-hard problems. To address this goal, Lipton [10] and Adleman <ref> [2] </ref> proposed the following model of DNA computation. A molecular computation proceeds in two phases: solution space generation and computation. <p> These operations are used in a very restricted way by Lipton to generate a solution space that represents all possible binary strings of length n and by Adleman <ref> [2] </ref> to generate a solution space that represents all 3 n possible colorings of n vertices using 3 colors. Lipton [10] and Adleman [2] present simple molecular algorithms for 3Sat and 3-Coloring, with solution spaces of size 2 n and 3 n , respectively. <p> operations are used in a very restricted way by Lipton to generate a solution space that represents all possible binary strings of length n and by Adleman <ref> [2] </ref> to generate a solution space that represents all 3 n possible colorings of n vertices using 3 colors. Lipton [10] and Adleman [2] present simple molecular algorithms for 3Sat and 3-Coloring, with solution spaces of size 2 n and 3 n , respectively. Amos et al. [3] present algorithms for NP-hard problems on a somewhat different DNA computing model. <p> In reality however, a split of a test tube is implemented by pouring equal amounts of the contents of a test tube into two test tubes <ref> [2] </ref>. Even if we assume that the total number of strings in the two test tubes is equal, we can't expect to get a perfect split of each subset of identical strings. Imperfect splits can cause some strings not to be present in the final solution space. <p> Another resource that we will introduce later is the redundancy needed due to the probabilistic nature of the low-level split operation. Algorithms for 3Sat, 3-Coloring and other problems can be found in <ref> [2, 10] </ref>. The 3SAT algorithm has a solution space of size 2 n and requires fi (n + m) operations, where n is the number of variables and m is the number of clauses.
Reference: [3] <author> M. Amos, A. Gibbons and D. Hodgson, </author> <title> Error-resistant Implementation of DNA Computations, </title> <institution> Research Report CS-RR-298, Department of Computer Science, University of Warwick, Coventry, UK. </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: Lipton [10] and Adleman [2] present simple molecular algorithms for 3Sat and 3-Coloring, with solution spaces of size 2 n and 3 n , respectively. Amos et al. <ref> [3] </ref> present algorithms for NP-hard problems on a somewhat different DNA computing model. In contrast, the best exact algorithms for standard computing models avoid searching through the whole solution space.
Reference: [4] <author> R. Beigel and D. Eppstein, </author> <title> 3-Coloring in Time O(1:3446 n ): a No-MIS Algorithm, </title> <booktitle> Proc. 36th Symposium on Foundations of Computer Science, </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <year> 1995, </year> <pages> pp. 444-453. </pages>
Reference: [5] <author> D. Boneh, D. Dunworth, R.J. Lipton and J. Sgall, </author> <title> On the Computational Power of DNA, </title> <type> Technical Report Number TR-499-95, </type> <institution> Computer Science Department, Princeton University, Princeton, </institution> <address> New Jersey, </address> <year> 1995. </year>
Reference-contexts: The 3-Coloring algorithm has a solution space of size 3 n and requires fi (n + m) operations, where n is the number of nodes and m is the number of edges. An algorithm for the Circuit Sat problem can be found in <ref> [5] </ref>. This problem is to determine if an n-input circuit (with "and", "or" and "not" gates and one designated output gate) has an input that sets the output to 1. Their algorithm has a solution space of size 2 n on an instance circuit with n inputs. <p> An alternative 21 method of generating this set of strings was proposed by Dan Boneh (personal communication), using an additional operation that separates strings according to their length (see <ref> [5] </ref> for a description of this operation). We thank the anonymous referee for several helpful comments that improved the presentation of this paper.
Reference: [6] <author> S. P. Fodor, J. L. Read, M. C. Pirrung, L. Stryer, A. T. Lu and D. Solas, Light-Directed, </author> <title> Spatially Addressable Parallel Chemical Synthesis, </title> <booktitle> Science 251, </booktitle> <year> 1991, </year> <pages> pp. 767-773. </pages>
Reference-contexts: Efficient methods for generating solution spaces other than the set of combinatorial possibilities are interesting in their own right and methods for doing this are already used in combinatorial chemistry <ref> [6, 12] </ref>. In Section 3, we present our new algorithms. All of our algorithms do a polynomial number of molecular operations. Each algorithm is named by the size of its solution space.
Reference: [7] <editor> D. E. Knuth, Mariages Stables et Leurs Relations avec d'autres Problemes Combinatoires, </editor> <publisher> Presses Univ. </publisher> <address> Montreal, </address> <year> 1976. </year>
Reference-contexts: First, we check that the urn models give the same distribution of output strings as the probabilistic split operation. This is an example of the "principle of deferred decisions," which has been emphasized by Knuth <ref> [7] </ref>. We state it as a lemma: Lemma 2 Let n 1 ; : : : ; n k be nonnegative integers summing to n.
Reference: [8] <author> G.R. Grimmett and D.R. Stirzaker, </author> <title> Probability and Random Processes (second edition), </title> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: Grimmett and Stirzaker <ref> [8] </ref>), in that it bounds the probability that any sample, not just the last one, deviates far from the mean. To use this result we must bound the differences of Z i . Lemma 3 If 1 i N=2, then jZ i Z i1 j 4.
Reference: [9] <author> F. Harary, </author> <title> Graph Theory, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA. </address>
Reference-contexts: The algorithm must now find the maximum independent sets of the bipartite graphs of T . 8 We observe that this problem can be solved with a circuit of size O (n 2 m 2 ) (using bipartite matching; see <ref> [9] </ref>). The circuit has n inputs representing the presence or absence of each vertex of G in a bipartite graph, and n outputs which indicate the maximum independent set. The circuit first finds a maximal matching M in the bipartite graph.
Reference: [10] <author> R.J. Lipton, </author> <title> DNA Solution of Hard Combinatorial Problems, </title> <booktitle> Science 268, </booktitle> <month> 28 April </month> <year> 1995, </year> <pages> pp. 542-548. </pages>
Reference-contexts: 1 Introduction Adleman described how he used standard tools of molecular biology to solve a 7-vertex instance of the Hamiltonian Path problem [1]. A major goal of subsequent research in this area is to understand how DNA computing can be used to solve NP-hard problems. To address this goal, Lipton <ref> [10] </ref> and Adleman [2] proposed the following model of DNA computation. A molecular computation proceeds in two phases: solution space generation and computation. <p> These operations are used in a very restricted way by Lipton to generate a solution space that represents all possible binary strings of length n and by Adleman [2] to generate a solution space that represents all 3 n possible colorings of n vertices using 3 colors. Lipton <ref> [10] </ref> and Adleman [2] present simple molecular algorithms for 3Sat and 3-Coloring, with solution spaces of size 2 n and 3 n , respectively. Amos et al. [3] present algorithms for NP-hard problems on a somewhat different DNA computing model. <p> Another resource that we will introduce later is the redundancy needed due to the probabilistic nature of the low-level split operation. Algorithms for 3Sat, 3-Coloring and other problems can be found in <ref> [2, 10] </ref>. The 3SAT algorithm has a solution space of size 2 n and requires fi (n + m) operations, where n is the number of variables and m is the number of clauses.
Reference: [11] <author> R. Motwani and P. Raghavan, </author> <title> Randomized Algorithms, </title> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference: [12] <author> A. C. Pease, D. Solas, E. J. Sullivan, M. T. Cronin, C. P. Holmes and S. P. Fodor, </author> <title> Light-Directed Oligonucleotide Arrays For Rapid DNA Sequence Analysis, </title> <booktitle> Proc. </booktitle> <institution> Natl. Acad. Sci. </institution> <address> USA, 91, </address> <month> May </month> <year> 1994, </year> <pages> pp. 5022-5026. </pages>
Reference-contexts: Efficient methods for generating solution spaces other than the set of combinatorial possibilities are interesting in their own right and methods for doing this are already used in combinatorial chemistry <ref> [6, 12] </ref>. In Section 3, we present our new algorithms. All of our algorithms do a polynomial number of molecular operations. Each algorithm is named by the size of its solution space.
Reference: [13] <author> I. Pinelis, </author> <title> An Approach to Inequalities for the Distributions of Infinite-dimensional Martingales, </title> <editor> in R. M. Dudley, M. G. Hahn, and J. Kuelbs, ed., </editor> <booktitle> Probability in Banach Spaces 8, </booktitle> <pages> pp. 128-134. </pages> <publisher> Birkhauser, </publisher> <year> 1992. </year> <month> 22 </month>
Reference-contexts: Let P t i=1 jjd i jj 2 D. Then Pr [9i t jjW i W 0 jj &gt; ] 2 exp 2D : Proof: Take f i = (W i W 0 )= p D and p = 2 in Theorem 3 of Pinelis <ref> [13] </ref>. 2 We now prove a redundancy bound of O (n 3 ) for the n=k -generator, since this is simpler than proving a bound of O (n). In Theorem 4, we then improve the redundancy bound to O (n), by modifying the proof of Theorem 7.
Reference: [14] <author> I. Schiermeyer, </author> <title> Solving 3-Satisfiability In Less Than 1:579 n Steps, </title> <booktitle> Proc. 6th Workshop on Computer Science Logic, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 379-394. </pages>
Reference-contexts: Amos et al. [3] present algorithms for NP-hard problems on a somewhat different DNA computing model. In contrast, the best exact algorithms for standard computing models avoid searching through the whole solution space. Beigel and Eppstein have an O (1:35 n ) algorithm for 3-Coloring and Schiermeyer <ref> [14] </ref> has an O (1:58 n ) algorithm for 3Sat. The naive DNA algorithms can't expect to beat these algorithms on any instance size. To see this, suppose we accept Adleman's speculation that a solution space of size 2 70 can be used in a DNA computation.
Reference: [15] <author> B. Sury, </author> <title> Sum of the Reciprocals of the Binomial Coefficients, Europ. </title> <journal> J. </journal> <volume> Combinatorics 14, </volume> <year> 1993, </year> <pages> pp. 351-353. </pages>
Reference-contexts: So X j X 1 = R j q j M Here we have observed that q j M is a product of binomial cofficients, and used the estimate P m m 1 O (1). (See, e.g., Sury <ref> [15] </ref>.) Putting these together we see that D = i=1 for some C &gt; 0. Let jjxjj 1 = maxfjx j jg.

References-found: 15

