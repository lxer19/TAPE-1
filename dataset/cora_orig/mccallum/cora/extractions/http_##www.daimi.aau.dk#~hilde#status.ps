URL: http://www.daimi.aau.dk/~hilde/status.ps
Refering-URL: http://www.daimi.aau.dk/~hilde/uni-eng.html
Root-URL: http://www.daimi.aau.dk
Title: Extensions of Independence Models  
Author: Thomas T. Hildebrandt 
Address: Denmark  
Affiliation: BRICS Department of Computer Science University of Aarhus  
Pubnum: Progress Report  
Abstract-found: 0
Intro-found: 1
Reference: [Abr90] <author> Samson Abramsky. </author> <title> A generalized kahn principle for abstract asynchronous networks. </title> <booktitle> In Mathematical Foundations of Program Se 32 mantics, Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1990. </year> <note> (to appear). </note>
Reference-contexts: Besides showing how to combine first order and independence, this relates to a line of work of Abramsky <ref> [Abr90] </ref> and Stark [Sta90] among others in finding a natural generalisation of an elegant model for determinate networks provided by Kahn in the seventies [Kah74]. <p> Besides showing how to combine first order and independence, this relates to a line of work of Abramsky <ref> [Abr90] </ref> and Stark [Sta90] among others on finding a natural generalisation to indeterminate networks of an elegant model for determinate networks provided by Kahn in the seventies [Kah74].
Reference: [Abr96] <author> Samson Abramsky. </author> <title> Retracing some paths in process algebra. </title> <booktitle> In CONCUR'96: Concurrency Theory, number 1119 in Lecture Notes in Computer Science, </booktitle> <pages> pages 1-17, </pages> <year> 1996. </year>
Reference-contexts: Linear involution A ? is isomorphic to A op . From this it follows that Prof actually is a compact closed category, which again implies (see <ref> [Abr96, JSV95] </ref>) that Prof carries even more structure it is a traced symmetric monoidal category. <p> For example, the vanishing property simply amounts to the Fubini theorem for coends [Lan71]. Thus we have Proposition 28 The category Prof is a traced symmetric monoidal cate gory. It has been recognized <ref> [Abr96, Pan97] </ref>, that the traced monoidal structure is very suited for giving semantics to systems presented as boxes and wires as it is the case for dataflow networks. <p> P fl A;B , satisfying the following axioms. Assume x; y 2 fl A;B , a; a 0 2 A, b; b 0 2 B, v; v 0 2 V. 12 This is related to the work of Abramsky et al in <ref> [AGN, Abr96] </ref>.
Reference: [Abr97] <editor> Abramsky et al. </editor> <booktitle> Semantics and Logics of Computation. </booktitle> <address> Newton Institute, </address> <year> 1997. </year>
Reference-contexts: (tsi for short) is a structure T = (S T ; i T ; L T ; Tran T ; I T ); the labelled event structures for which the consistency relation can be described by a binary conflict relation (see discussion in the chapter on Categories in Concurrency in <ref> [Abr97] </ref>). The comparison carried out in this section does not depend on this axiom (and the corresponding axiom for tsi). 5 We use, respectively, f : A ! B and f : A * B to indicate total and partial functions.
Reference: [Acz96] <author> Peter Aczel. </author> <title> A semantic universe for fairness. </title> <note> Preliminary Draft, </note> <year> 1996. </year>
Reference-contexts: The problems of bisimulation between processes satisfying fairness conditions and of expressing fairness in profunctors relates to work of Aczel <ref> [Acz96] </ref>, the specification structures of Abramsky et al [AGN] and the focus on maximal traces in [Che96]. Finally, it has recently come to our attention that there are problems in the semantics of hardware description languages which seem amenable to attack by dataflow models [Gor96, Gor97].
Reference: [AGN] <author> Samson Abramsky, Simon Gay, and Rajagopal Nagarajan. </author> <title> Interaction categories and the foundations of typed concurrent programming. </title> <booktitle> Tutorial notes on Samson Abramsky's interaction Categories. </booktitle>
Reference-contexts: P fl A;B , satisfying the following axioms. Assume x; y 2 fl A;B , a; a 0 2 A, b; b 0 2 B, v; v 0 2 V. 12 This is related to the work of Abramsky et al in <ref> [AGN, Abr96] </ref>. <p> The problems of bisimulation between processes satisfying fairness conditions and of expressing fairness in profunctors relates to work of Aczel [Acz96], the specification structures of Abramsky et al <ref> [AGN] </ref> and the focus on maximal traces in [Che96]. Finally, it has recently come to our attention that there are problems in the semantics of hardware description languages which seem amenable to attack by dataflow models [Gor96, Gor97].
Reference: [AI94] <author> Luca Aceto and Ingolfsdottir. </author> <title> Cpo models for gsos languages. Report Series RS-94-40, </title> <booktitle> BRICS, </booktitle> <year> 1994. </year> <title> Part I: Compact GSOS Languages. </title>
Reference-contexts: This suggests the following future projects. * Study the possibility of defining a general format for SOS semantics with independence, related to existing formats for interleaving SOS semantics <ref> [AI94] </ref>. * Consider general conditions for obtaining finite descriptions. * Consider whether the semantics given in [MN92] can be defined more smoothly in the model of non-extensional transition systems with in dependence.
Reference: [BA81] <author> J.D. Brock and W.B. Ackerman. </author> <title> Scenarios: a model of non-determinate computation. </title> <editor> In Diaz and Ramos, editors, </editor> <booktitle> Formalization of Programming Concepts, volume 107 of Lecture Notes in Computer Science, </booktitle> <address> page 1981. Springer-Veralg, </address> <year> 1981. </year>
Reference-contexts: Causality information plays a crucial role in connection with this problem: Brock and 3 Ackerman have shown the impossibility of giving compositional semantics in a model without causality information to a class of network with the nondeterministic primitive fair merge <ref> [BA81] </ref>, and later Russell has shown with a very simple example that this is true also for networks with the weakest nondeterministic primitive, bounded choice [Rus89]. This is the content of Section 4. <p> They consider the class of networks for which the input-output relation is functional, which they call the determinate networks, and show that these indeed obey the `Kahn principle'. For indeterminate networks, the situation is not so simple. Brock and Ackerman <ref> [BA81] </ref> showed that for networks containing the nondeterministic primitive fair merge, the input-output relations are not compositional, ie. if we simply choose the input-output relation as observable behaviour, we can not define a compositional semantics, which is adequate with respect to the operational semantics.
Reference: [Bed88] <author> M. A. Bednarczyk. </author> <title> Categories of asynchronous systems. </title> <type> PhD thesis, </type> <institution> University of Sussex, </institution> <year> 1988. </year>
Reference-contexts: We have focused on two such models, namely asynchronous transition systems, introduced independently by Bednarczyk <ref> [Bed88] </ref> and Shields [Shi85], and transitions systems with independence, proposed by Winskel and Nielsen [WN94].These two approaches are, among the others, those building on the simple idea: endow transition systems with some formal notion of `similarity' of transitions that enables to distinguish whether or not the opposite edges in diagrams such <p> ~ ~ ~ __ e a @ @ @ @ __ @ @ @ @ e 0 b * ?? b e 0 ~ ~ ~ ~ __ e a @ @ @ @ __ @ @ @ @ e 0 b Observe that we consider labelled asynchronous transition systems <ref> [Bed88, WN94] </ref>, i.e., asynchronous transition systems with a further labelling of events, as the proper extension of labelled transition systems. <p> The expressive power of asynchronous transition systems is clearly not limited to the example above; for instance, Bednarczyk <ref> [Bed88] </ref> and Mukund and Nielsen [MN92] have shown that noninterleaving related issues for CCS processes | such as localities | can be modeled faithfully using this model. However, it can be argued that assigning both the independence relation and the decoration of transitions with events explicitly means assigning too much. <p> kk ? + ff Similarly to the case of TSI, dLATS and mdLATS are the largest subcategories of LATS for which such results hold. 2.2 Preliminary definitions: LATS and TSI In this section we recall briefly the definitions of asynchronous transition systems, transition systems with independence, and their respective categories <ref> [Bed88, WN94] </ref>. <p> The following is the standard definition of morphisms for lats, which essentially mimics the idea of simulation (cf. <ref> [Bed88, WN94] </ref>).
Reference: [Bor94] <editor> F. Borceux. </editor> <booktitle> Handbook of categorical logic, </booktitle> <volume> volume 1. </volume> <publisher> Cambridge University Press, </publisher> <year> 1994. </year>
Reference-contexts: Presheaf models has the advantage of including independence models below first order, like labelled event structures, and contributes a general definition of bisimulation based on open maps. The bicategory of profunctors <ref> [Bor94] </ref> (in which the hom-categories are presheaf categories) is introduced, and an interleaving denotational semantics is proposed for a language allowing process passing. <p> We include a model similar to the model of Jonsson in the end of next section. First we will take a look at profunctors. 4.3 Dataflow as profunctors The bicategory of profunctors is described (using the name distributors) by Borceux <ref> [Bor94] </ref> as a categorical generalisation of sets and relations. The formal definition is as follows. Definition 25 Let P and Q be small categories. A profunctor F : P // + Q is a bifunctor F : P fi Q op ! Set. <p> In this case, working with functors into Set, they can be computed explicitly (see <ref> [Bor94] </ref>). Natural transformations of functors constitute the 2cells, giving us a bicat-egory. Definition 26 Let Prof be the bicategory with objects being small categories and morphisms profunctors and composition given by the coend formula above. Note that profunctors subsume presheaf categories as the following observation states.
Reference: [Che96] <author> Allan Cheng. </author> <title> Reasoning about concurrent computational systems. </title> <type> Technical Report DS-96-2, BRICS, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <month> August </month> <year> 1996. </year> <type> Ph.D. thesis. </type> <note> xiv+229 pp. </note>
Reference-contexts: However, it is still open if hh-p bisimulation is decidable for say finite safe nets or finite transition systems with independence, despite the work of a number of people. Even for very limited clases of systems s.t. finite free-choice 1-safe nets, only conjectures of decidability are made <ref> [Che96] </ref>. Compared to this, h-p bisimulation is well studied and proven decidable for finite safe nets [Vog91, MP97]. Later, Jategaonkar and Meyer [JM93] have shown that it is in fact DEXPTIME complete. But, as indicated [Che96] h-p bisimulation seems hard to characterise as P-bisimulation with respect to a particular subcategory P <p> limited clases of systems s.t. finite free-choice 1-safe nets, only conjectures of decidability are made <ref> [Che96] </ref>. Compared to this, h-p bisimulation is well studied and proven decidable for finite safe nets [Vog91, MP97]. Later, Jategaonkar and Meyer [JM93] have shown that it is in fact DEXPTIME complete. But, as indicated [Che96] h-p bisimulation seems hard to characterise as P-bisimulation with respect to a particular subcategory P of the independence models in consideration, which is taken 7 Hh-p bisimulation is also refered to as strong history preserving bisimulation. 15 as an indication that hh-p bisimulation is a more natural choice of bisimu--lation. <p> The problems of bisimulation between processes satisfying fairness conditions and of expressing fairness in profunctors relates to work of Aczel [Acz96], the specification structures of Abramsky et al [AGN] and the focus on maximal traces in <ref> [Che96] </ref>. Finally, it has recently come to our attention that there are problems in the semantics of hardware description languages which seem amenable to attack by dataflow models [Gor96, Gor97].
Reference: [CML] <institution> Concurrent ml. </institution> <note> http://cm.bell-labs.com/cm/cs/what/smlnj/cml/. </note>
Reference-contexts: An interesting question is how to extend the scope of independence models to higher order systems, such as value-passing and process-passing calculi, coming closer to modelling features of high-level concurrent programming languages as for example concurrent ML <ref> [CML, SML] </ref>, OCCAM [PM87] as well as Hardware Description Languages (HDL) [Gor96]. This is one of the problems left open in [Win96], where an investigation of the use of presheaves to model higher-order features is initiated. <p> It is work in progress, related to the question of how to extend the scope of independence models to higher order systems, such as value-passing and process-passing calculi, coming closer to modelling features of high-level concurrent programming languages as e.g. concurrent ML <ref> [CML, SML] </ref>, OC-CAM [PM87] and Hardware Description Languages (HDL) [Gor96, Gor97].
Reference: [CS96] <author> G.-L. Cattani and V. Sassone. </author> <title> Higher dimensional transition systems. </title> <booktitle> In Proc. LICS '96. IEEE, </booktitle> <year> 1996. </year>
Reference-contexts: transition system * ?? b ~ ~ ~ ~ __ a @ @ @ @ __ @ @ @ @ b : (1) Several efforts have been devoted to the search of transition-based non--interleaving models, e.g., transition systems enriched with additional features that make expressing concurrency explicitly possible (cf., e.g., <ref> [Pra91, vG, Gou93, GJ92, vGP95, CS96] </ref>).
Reference: [DE95] <author> Jorg Desel and Javier. Esparza. </author> <title> Free Choice Petri Nets. </title> <booktitle> Number 40 in Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1995. </year>
Reference-contexts: At the moment, it is not clear if the k-tight event-structures is a useful class of systems in other contexts. It would be interesting to look at subclasses of systems, such as confusion free systems [HN96], free-choice systems <ref> [DE95] </ref>, at the same time making clear how these concepts from net-theory should be defined in terms of transition systems. 4 Extensions of Independence Models This section reports on joint work with Prakash Panangaden and Glynn Winskel.
Reference: [Den74] <author> J.B. Dennis. </author> <title> First version of a dataflow procedure language. </title> <editor> In B. Robinet, editor, </editor> <booktitle> Proc Colloque sur la Programmation, volume 19 of Lecture Notes in Computer Science, </booktitle> <pages> pages 362-376. </pages> <publisher> Springer-Verlag, </publisher> <year> 1974. </year>
Reference-contexts: Finally we define a candidate for a profunctor model of dataflow and discuss the possible advantages and results obtainable by using this instead of the existing models. 4.1 Dataflow Networks The Dataflow paradigm for asynchronous parallel computation, originated in work of Jack Dennis and others in the mid-sixties <ref> [Kah74, Den74, Den84] </ref>. The basic idea is that data flows between nodes, that are interconnected by channels, acting as FIFO-queues, into a dataflow network. There exist several formal definitions of the basic units (nodes) and how to combine them into network (see discussion in [Jon89]).
Reference: [Den84] <author> Jack B. Dennis. </author> <title> Control Flow and Data Flow: </title> <booktitle> Concepts of Distributed Programming, volume 14 of NATO ASI Series F, chapter Data Flow Computation, </booktitle> <pages> pages 345-398. </pages> <publisher> Springer-Verlag, </publisher> <year> 1984. </year> <month> 33 </month>
Reference-contexts: Finally we define a candidate for a profunctor model of dataflow and discuss the possible advantages and results obtainable by using this instead of the existing models. 4.1 Dataflow Networks The Dataflow paradigm for asynchronous parallel computation, originated in work of Jack Dennis and others in the mid-sixties <ref> [Kah74, Den74, Den84] </ref>. The basic idea is that data flows between nodes, that are interconnected by channels, acting as FIFO-queues, into a dataflow network. There exist several formal definitions of the basic units (nodes) and how to combine them into network (see discussion in [Jon89]).
Reference: [DM97] <author> V. Diekert and Y. Metivier. </author> <title> Handbook of Formal Languages., chap-ter Partial Commutation and Traces. </title> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: Further, to A we associate a binary, irreflexive independence relation I A ae A fi A , which is defined as I A = A fi A nf (a; v); (a; v 0 ) j a 2 A; v; v 0 2 Vg: As usual <ref> [DM97] </ref>, we can regard the trace monoid (free commutative monoid) defined as fl A = = , where = fl A fi fl A is the congruence induced by the rela tion equating any two strings xxy y; xyxy 2 fl A where x I A y.
Reference: [Fau82] <author> A. A. Faustini. </author> <title> An operational semantics for pure dataflow. </title> <booktitle> In Proceedings of the Ninth International Colloquium On Automata Languages And Programming, volume 140 of Lecture Notes in Computer Science, </booktitle> <pages> pages 212-224. </pages> <publisher> Springer Verlag, </publisher> <year> 1982. </year>
Reference-contexts: Note that the observable behaviour is taken to be the input-output relation between completed sequences of values, thus it completely abstracts away from causal dependencies between values on different ports. Kahn's original paper contained no proof, but it is later shown formally by several authors, e.g. Faustini <ref> [Fau82] </ref> using games and for (a variation of) port automata by Lynch and Stark in [LS89]. They consider the class of networks for which the input-output relation is functional, which they call the determinate networks, and show that these indeed obey the `Kahn principle'.
Reference: [GJ92] <author> E. Goubault and T. Jensen. </author> <title> Homology of higher-dimensional automata. </title> <booktitle> In Proc. CONCUR '92, volume 630 of LNCS, </booktitle> <pages> pages 254-268. </pages> <publisher> Springer, </publisher> <year> 1992. </year>
Reference-contexts: transition system * ?? b ~ ~ ~ ~ __ a @ @ @ @ __ @ @ @ @ b : (1) Several efforts have been devoted to the search of transition-based non--interleaving models, e.g., transition systems enriched with additional features that make expressing concurrency explicitly possible (cf., e.g., <ref> [Pra91, vG, Gou93, GJ92, vGP95, CS96] </ref>).
Reference: [God96] <author> Patrice Godefroid. </author> <title> Partial-Order Methods for the Verification of Concurrent Systems. </title> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: For instance in the field of automatic verification, eg. state-space exploration, knowing that different interleavings represent the same behaviour can reduce considerably that part of the state-space necessary to search through when checking system properties such as safety <ref> [GW91, God96] </ref> and live-ness [Val91, Pel93]. These techniques are usually referred to as partial order methods and are based on models cabable of representing the actual causal order of actions. Models of this kind, which we will call independence models, are in the focus of this report. <p> An immediate question when one tries to give semantics in an independence model is how to detect the information from the system and how to 2 express it in the model <ref> [God96, WN94] </ref>. The literature provides examples where independence is detected by a notion of events happening at different localities [MN92], belonging to different processes [God96], or happening at different ports [Jon89, PS88]. <p> The literature provides examples where independence is detected by a notion of events happening at different localities [MN92], belonging to different processes <ref> [God96] </ref>, or happening at different ports [Jon89, PS88]. When defining an independence model, one typically chooses to provide a structure that can model one or more of these features. <p> As remarked in [SNW93] these structures are first order axiomatisable, but for practical purposes (cf. <ref> [God96, MN92] </ref>) infinite structures are not desirable. 6 seen at the same time as identifying those transition systems that make as few identifications of transitions as possible, i.e., contain no confusion about event identities, and those in which such identities are derivable from the independence relation, i.e., reduce the redundancy.
Reference: [Gor96] <author> Mike Gordon. </author> <title> The semantic challenge of verilog hdl. </title> <note> http://www.cl.cam.ac.uk/users/mjcg/Verilog/, April 1996. Revised version of an invited paper to be published in LICS '95. </note>
Reference-contexts: An interesting question is how to extend the scope of independence models to higher order systems, such as value-passing and process-passing calculi, coming closer to modelling features of high-level concurrent programming languages as for example concurrent ML [CML, SML], OCCAM [PM87] as well as Hardware Description Languages (HDL) <ref> [Gor96] </ref>. This is one of the problems left open in [Win96], where an investigation of the use of presheaves to model higher-order features is initiated. <p> is work in progress, related to the question of how to extend the scope of independence models to higher order systems, such as value-passing and process-passing calculi, coming closer to modelling features of high-level concurrent programming languages as e.g. concurrent ML [CML, SML], OC-CAM [PM87] and Hardware Description Languages (HDL) <ref> [Gor96, Gor97] </ref>. With an eye to the theory of dataflow models, which are a particular kind of model supporting value passing, we begin within a model based on a bicategory of profunctors, introduced in [Win96] where an interleaving denotational semantics for a language allowing process passing is given. <p> Finally, it has recently come to our attention that there are problems in the semantics of hardware description languages which seem amenable to attack by dataflow models <ref> [Gor96, Gor97] </ref>. It is my plan to investigate this possibility. 5 Conclusion The body of this report documents the work concerning independence models for concurrency I have carried out during my Ph.D. part A.
Reference: [Gor97] <author> Mike Gordon. Synthesizable verilog. </author> <note> Available via ftp., </note> <month> March </month> <year> 1997. </year> <type> Draft, </type> <institution> verison 0.7. The VFE Project. </institution>
Reference-contexts: is work in progress, related to the question of how to extend the scope of independence models to higher order systems, such as value-passing and process-passing calculi, coming closer to modelling features of high-level concurrent programming languages as e.g. concurrent ML [CML, SML], OC-CAM [PM87] and Hardware Description Languages (HDL) <ref> [Gor96, Gor97] </ref>. With an eye to the theory of dataflow models, which are a particular kind of model supporting value passing, we begin within a model based on a bicategory of profunctors, introduced in [Win96] where an interleaving denotational semantics for a language allowing process passing is given. <p> Finally, it has recently come to our attention that there are problems in the semantics of hardware description languages which seem amenable to attack by dataflow models <ref> [Gor96, Gor97] </ref>. It is my plan to investigate this possibility. 5 Conclusion The body of this report documents the work concerning independence models for concurrency I have carried out during my Ph.D. part A.
Reference: [Gou93] <author> E. Goubault. </author> <title> Domains of higher-dimensional automata. </title> <booktitle> In Proc. CONCUR '93, volume 715 of LNCS, </booktitle> <pages> pages 293-307. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: transition system * ?? b ~ ~ ~ ~ __ a @ @ @ @ __ @ @ @ @ b : (1) Several efforts have been devoted to the search of transition-based non--interleaving models, e.g., transition systems enriched with additional features that make expressing concurrency explicitly possible (cf., e.g., <ref> [Pra91, vG, Gou93, GJ92, vGP95, CS96] </ref>).
Reference: [GW91] <author> P. Godefroid and P. Wolper. </author> <title> Using partial orders for the efficient verification of deadlock freedom and safety properties. </title> <booktitle> In Proc. CAV '91, volume 575 of LNCS, </booktitle> <pages> pages 332-342. </pages> <publisher> Springer, </publisher> <year> 1991. </year>
Reference-contexts: For instance in the field of automatic verification, eg. state-space exploration, knowing that different interleavings represent the same behaviour can reduce considerably that part of the state-space necessary to search through when checking system properties such as safety <ref> [GW91, God96] </ref> and live-ness [Val91, Pel93]. These techniques are usually referred to as partial order methods and are based on models cabable of representing the actual causal order of actions. Models of this kind, which we will call independence models, are in the focus of this report.
Reference: [Hil97] <author> Thomas T. Hildebrandt. </author> <title> Non-extenstional transition systems with independence. </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: Also, it excludes multi-arcs, i.e., multiple transitions with the same label between the same two states. Event-maximality, on the other hand, can be 2 A simple application of Gaifman's theorem <ref> [Hil97] </ref>. 3 In [WN94] a SOS semantics is given in tsi, but the proof showing that the resulting transition system satisfies the defining axioms of tsi depends crucially on the fact, that the semantics is given in the sub category of acyclic transition systems with independence, essentially obtained by unfolding sums <p> This is sketched in <ref> [Hil97] </ref>, given the name of non-extensional transition systems with independence 6 . This does not change the fact that the model is not elementary 6 This model is reminiscent to the model of concurrent transition systems of E. Stark [Sta89] (first order axiomatisable).
Reference: [HN96] <author> Michaela Huhn and Peter Niebert. </author> <title> Towards automata for branching time and partial order. </title> <booktitle> In CONCUR'96: Concurrency Theory, number 1119 in Lecture Notes in Computer Science, </booktitle> <pages> pages 611-626, </pages> <year> 1996. </year>
Reference-contexts: At the moment, it is not clear if the k-tight event-structures is a useful class of systems in other contexts. It would be interesting to look at subclasses of systems, such as confusion free systems <ref> [HN96] </ref>, free-choice systems [DE95], at the same time making clear how these concepts from net-theory should be defined in terms of transition systems. 4 Extensions of Independence Models This section reports on joint work with Prakash Panangaden and Glynn Winskel.
Reference: [HS96] <author> Thomas Troels Hildebrandt and Vladimiro Sassone. </author> <title> Comparing transition systems with independence and asynchronous transition systems. Research Series RS-96-18, </title> <type> BRICS, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <month> June </month> <year> 1996. </year> <pages> 14 pp. </pages> <booktitle> Appears in proceedings of CONCUR '96, </booktitle> <volume> LNCS 1119, </volume> <pages> pages 84-97. </pages>
Reference-contexts: The work started as a comparitive study, describing the formal relationship between two non-interleaving transition systems models, more precisely: transition systems with independence (tsi) and labelled asynchronous transition systems (lats). This is the content of the paper <ref> [HS96] </ref>. The analysis lead to a reconsideration of the model of transition systems with independence, precisely of whether to allow multiple transitions with the same label between the same two states (multi-arcs) or not a feature of lats not present in tsi. <p> This contrasts with the `local' conditions defining asynchronous transition systems (due to the globally identified events) and can make hard checking that a given structure is a transitions system with independence. 3 In <ref> [HS96] </ref>, we carried out an exhaustive analysis of the differences induced on the two models by the choice of a primitive versus a derived notion of event, showing that transition systems with independence, besides being nicely related to a class of asynchronous transition systems called extensional, are equivalent to the so-called <p> A question left open by <ref> [HS96] </ref> is whether or not the need to restrict to extensional asynchronous transition systems is a consequence of the intrinsic differences between the two notions of events considered, i.e., if in order to be able to model situations ruled out by the extensionality constraints it is necessary to assign events explicitly. <p> 2 ); (a)#; (b)# ) oe (s 1 ); (a); oe (s 2 ) I T 0 oe (s 0 2 ) : We shall use TSI to denote the category of tsi and their morphisms. 2.3 Comparing LATS with TSI: Considering multi-arcs The starting point of the analysis in <ref> [HS96] </ref> is the obvious inclusion ta : TSI ! LATS which acts on objects by decorating each transition with the event identified by the -class the transition belongs to, and by inheriting the independence relation directly from the tsi. <p> However, a simple argument shows that the presence of multi-arcs in LATS makes it 10 impossible for at to be well-defined as a map to TSI. Thus, the very first step of <ref> [HS96] </ref> is to consider only those lats A satisfying (Ex) (s 1 ; e a 2 ; s 2 ) 2 Tran A ) a 6= b; whose purpose is to forbids multi-arcs. <p> For (oe; j; ) : A ! A 0 a morphism of lats, let at The result of <ref> [HS96] </ref> is that ta and at form a coreflection of TSI in eLATS. Proposition 8 (ta a at : TSI * eLATS) TSI is coreflective in eLATS. The lats corresponding to tsi are characterised as the event-maximal lats. <p> Now, if we denote by meLATS the restriction of mdLATS to the full subcategory induced by the objects satisfying (Ex), we can state the final result of <ref> [HS96] </ref>. Proposition 10 (meLATS = TSI) meLATS is equivalent to TSI. 12 Technically, the contribution of [HS97] is to re-address the choice of con-dition (Ex) which forbids multiple transitions with the same label between the same two states.
Reference: [HS97] <author> Thomas Troels Hildebrandt and Vladimiro Sassone. </author> <title> Transition systems with independence and multi-arcs. Research Series RS-97-10, </title> <type> BRICS, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <year> 1997. </year> <booktitle> Appears in Procedings of POMIV'96, </booktitle> <volume> DIMACS vol. 29, </volume> <pages> pp. 273-288. </pages>
Reference-contexts: dataflow networks, only giving the definition of the profunctor model we suggest, describing how its categorical structure is closely related to an existing model of indeterminate dataflow networks. 2 Transition-based Independence Models The material presented in this chapter is joint work with Vladimiro Sas-sone and essentially presents the results of <ref> [HS97] </ref>, in which detailed proofs can be found. The work started as a comparitive study, describing the formal relationship between two non-interleaving transition systems models, more precisely: transition systems with independence (tsi) and labelled asynchronous transition systems (lats). This is the content of the paper [HS96]. <p> This was addressed in <ref> [HS97] </ref>, were we relaxed the definition of transition systems with independence to allow multi-arcs, and yielding the new notion of transition systems with independence and multi-arcs. This represents, in our view, an interesting enhancement of the model. <p> Now, if we denote by meLATS the restriction of mdLATS to the full subcategory induced by the objects satisfying (Ex), we can state the final result of [HS96]. Proposition 10 (meLATS = TSI) meLATS is equivalent to TSI. 12 Technically, the contribution of <ref> [HS97] </ref> is to re-address the choice of con-dition (Ex) which forbids multiple transitions with the same label between the same two states.
Reference: [Hyl95] <author> Martin Hyland. </author> <title> Category theory. </title> <note> Handwritten lecture notes taken by C. Millhorst '95, 1995. 34 </note>
Reference-contexts: See [PS88] for a study of the differences of nondeterministic primitives. 11 It is a bicategory because composition is only defined to within isomorphism. 26 and for any f : P ! P 0 and g : R 0 ! R, Z Q A coend is a generalised colimit (see <ref> [Lan71, Hyl95] </ref>). In this case, working with functors into Set, they can be computed explicitly (see [Bor94]). Natural transformations of functors constitute the 2cells, giving us a bicat-egory.
Reference: [JM93] <author> Lalita Jategaonkar and Albert Meyer. </author> <title> Deciding true concurrency equivalences on finite safe nets. </title> <booktitle> In Proc. ICALP'93, </booktitle> <volume> volume 700. </volume> <publisher> Springer Verlag, </publisher> <year> 1993. </year> <note> Full version in TCS 154 107-143,1996. </note>
Reference-contexts: Even for very limited clases of systems s.t. finite free-choice 1-safe nets, only conjectures of decidability are made [Che96]. Compared to this, h-p bisimulation is well studied and proven decidable for finite safe nets [Vog91, MP97]. Later, Jategaonkar and Meyer <ref> [JM93] </ref> have shown that it is in fact DEXPTIME complete.
Reference: [JNW94] <author> Andre Joyal, Mogens Nielsen, and Glynn Winskel. </author> <title> Bisimulation from open maps. Research Series RS-94-7, </title> <type> BRICS, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <month> May </month> <year> 1994. </year> <pages> 42 pp. </pages> <note> Accepted for publication in LICS '93 special issue of Information and Computation. To appear in Information and Computation. </note>
Reference-contexts: Since there is a great choice in the point of view of observing process, there have been proposed confusingly many behavioural equivalences. The categorical presentation of models advocated in [WN94] suggests a canonical choice of bisimulation through the notion of open maps as reported in <ref> [JNW94] </ref>. It is often taken for granted, that any reasonable bisimulation has to be decidable for a large class of finite systems. The canonical bisimulation equivalences for independence models contains a tenacious open problem regarding decidability, which is the subject of the work presented in Section 3. <p> Hh-p bisimulation is the non-interleaving bisimula-tion on labelled event structures characterised by the existence of a span of Pom L -open maps by Joyal, Nielsen and Winskel in <ref> [JNW94] </ref>. This bisimu-lation is interesting because it transforms by coreflections to bisimulations for petri nets, labelled asynchronuos transition systems [NW96] and transition systems with independence [JNW94]. It is a strengthening of the history-preserving bisimulation (h-pb) previously studied by Rabinovitch and Trakhtenbrot [RT88] and van Glabeek and Goltz [VGG89]. <p> the non-interleaving bisimula-tion on labelled event structures characterised by the existence of a span of Pom L -open maps by Joyal, Nielsen and Winskel in <ref> [JNW94] </ref>. This bisimu-lation is interesting because it transforms by coreflections to bisimulations for petri nets, labelled asynchronuos transition systems [NW96] and transition systems with independence [JNW94]. It is a strengthening of the history-preserving bisimulation (h-pb) previously studied by Rabinovitch and Trakhtenbrot [RT88] and van Glabeek and Goltz [VGG89]. <p> The work described in this section has basis in the categorical charac-terisations of P-bisimulations presented in <ref> [JNW94] </ref>, exploiting the view of presheaves as transition systems [WN96]. This is briefly covered in the first subsection below. In the subsection following thereafter, we focus at Pom L - bisimulation for finite transition systems with independence and variations thereof, which is my contribution. <p> of this section should be taken with the precaution, that the detailed proofs are still in a preliminary form. 3.1 Presheaves and bisimulation from open maps The presentation of models for concurrency as categories allows us to apply a general notion of bisimulaton from span of open maps proposed in <ref> [JNW94] </ref>. The general idea is to identify a category of computation paths referred to as the path category, with objects representing runs or histories and mor-phisms compatibility extensions of these. <p> Thus, the category " Pom L is a natural generalisation of E L , that however contains more elements (see <ref> [JNW94, WN96] </ref>). The embedding above extends the Yoneda embedding of Pom L ! " Pom L , regarding a path object P as the preheaf Pom L (; P ) = E L (i (); P ), since the inclusion of Pom L into E L is full. <p> A natural question to ask at this point is of course, how this "bounded" l-bisimulation relates to l-bisimulation (and thus hh-p bisimulation). An in teresting fact from <ref> [JNW94] </ref> is that in the category TSI, Atom 1 L -bisimulation do characterise hh-p bisimulation! (Atom 1 L is the category of "sticks" and "lollipops", which in [NW96] is defined as the category Atom L ). <p> The two systems are l 1 - bisimilar, but not l 2 -bisimilar, actually theyare not even history preserving bisimilar. Moreover, in <ref> [JNW94] </ref> an example is provided of two systems that are h-p bisimilar, but not hh-p bisimilar. These can be shown not to be l 1 - bisimilar either 9 . This says that l 1 -bisimulation is neither a strengthening nor a weakening of h-p bisimulation. <p> Taking trace on the profunctor tF in ProfI corresponding to F, it results in a profunctor which is no longer rooted. Since there are no input and only one output port, we actually get a presheaf equivalent to a 'synchronisation' forest as in <ref> [JNW94] </ref>. Precisely, we get a separate branch for each x 2 hfagi. This can be viewed as the possible stable states the system can be in, with a possible 'initial level' x on the wire being fedback.
Reference: [Jon89] <author> Bengt Jonsson. </author> <title> A fully abstract trace model for dataflow networks. </title> <booktitle> In PoPL'89, </booktitle> <pages> pages 155-165. </pages> <publisher> ACM, </publisher> <year> 1989. </year>
Reference-contexts: The literature provides examples where independence is detected by a notion of events happening at different localities [MN92], belonging to different processes [God96], or happening at different ports <ref> [Jon89, PS88] </ref>. When defining an independence model, one typically chooses to provide a structure that can model one or more of these features. A natural goal is that this should be as abstract as possible, such that the semantics does not make any distinctions not imposed by the independence. <p> The basic idea is that data flows between nodes, that are interconnected by channels, acting as FIFO-queues, into a dataflow network. There exist several formal definitions of the basic units (nodes) and how to combine them into network (see discussion in <ref> [Jon89] </ref>). The fundamental unit we have in mind, is the monotone input-output port automata [Jon89, PS88]. We assume that V is a fixed set of values and P a fixed set of port names. <p> There exist several formal definitions of the basic units (nodes) and how to combine them into network (see discussion in [Jon89]). The fundamental unit we have in mind, is the monotone input-output port automata <ref> [Jon89, PS88] </ref>. We assume that V is a fixed set of values and P a fixed set of port names. <p> We will call this category Port [A; B]. To form networks, we need operations to combine port automata, and connect ports to each other. In some presentations <ref> [Jon89] </ref>, this is done in one step. In others, which we will follow, it is done via the basic operations of parallel composition, feedback, and sequential composition. For this sake, we define the disjoint composition of two port sets A; B P as A B , A ] B. <p> This example shows very clearly that it is necessary to look for a model that records causality relations between items of values on different ports. In other words, it provides an example of a class of systems for which independence models are crucial. Jonsson <ref> [Jon89] </ref> has given a model based on trace sets, which is proven to be fully abstract for indeterminate dataflow networks with a fair merge primitive, and by Russell [Rus89] even for dataflow networks with the weakest nondeterministic primitive, bounded choice 10 . <p> Another aim for future work is to investigate how to express fairness in the profunctor model. Fairness is an important concept in connection with dataflow network and actually the operational semantics often makes fairness conditions explicit <ref> [Jon89] </ref>. This can be represented in the original model of Kahn-process, which is not required to be prefix closed and is not limited to finite sequencese, by including some infinite sequences, the fair ones, while excluding the unfair sequences.
Reference: [JSV95] <author> Andre Joyal, R. Street, and D. Veriry. </author> <title> Traced monoidal categories. </title> <type> Technical report, </type> <year> 1995. </year>
Reference-contexts: Linear involution A ? is isomorphic to A op . From this it follows that Prof actually is a compact closed category, which again implies (see <ref> [Abr96, JSV95] </ref>) that Prof carries even more structure it is a traced symmetric monoidal category.
Reference: [Kah74] <author> Giles Kahn. </author> <title> The semantics of a simple language for parallel programming. </title> <booktitle> In Information Processeing, </booktitle> <volume> volume 74, </volume> <pages> pages 471-475, </pages> <year> 1974. </year>
Reference-contexts: Besides showing how to combine first order and independence, this relates to a line of work of Abramsky [Abr90] and Stark [Sta90] among others in finding a natural generalisation of an elegant model for determinate networks provided by Kahn in the seventies <ref> [Kah74] </ref>. <p> Besides showing how to combine first order and independence, this relates to a line of work of Abramsky [Abr90] and Stark [Sta90] among others on finding a natural generalisation to indeterminate networks of an elegant model for determinate networks provided by Kahn in the seventies <ref> [Kah74] </ref>. Below we give some background on dataflow network including a discussion of the role of causal information when giving compositional semantics for indeterminate networks. <p> Finally we define a candidate for a profunctor model of dataflow and discuss the possible advantages and results obtainable by using this instead of the existing models. 4.1 Dataflow Networks The Dataflow paradigm for asynchronous parallel computation, originated in work of Jack Dennis and others in the mid-sixties <ref> [Kah74, Den74, Den84] </ref>. The basic idea is that data flows between nodes, that are interconnected by channels, acting as FIFO-queues, into a dataflow network. There exist several formal definitions of the basic units (nodes) and how to combine them into network (see discussion in [Jon89]). <p> that is, we can define A; B as the automaton F b B A;C (A B) if we for simplicity ignore that we may need to rename the B-ports, making the combined set of input/output ports disjoint. 24 4.2 Compositional semantics For dataflow networks build from only deterministic nodes, Kahn <ref> [Kah74] </ref> has argued that their behaviour could be captured denotationally in a very simple and elegant fashion, using elementary domain theory. The key idea is to model the behaviour of each port a as a stream from the domain V 1 .
Reference: [Lan71] <author> Saunders Mac Lane. </author> <title> Categories for the Working Mathematician. </title> <publisher> Springer-Verlag, </publisher> <year> 1971. </year>
Reference-contexts: See [PS88] for a study of the differences of nondeterministic primitives. 11 It is a bicategory because composition is only defined to within isomorphism. 26 and for any f : P ! P 0 and g : R 0 ! R, Z Q A coend is a generalised colimit (see <ref> [Lan71, Hyl95] </ref>). In this case, working with functors into Set, they can be computed explicitly (see [Bor94]). Natural transformations of functors constitute the 2cells, giving us a bicat-egory. <p> For example, the vanishing property simply amounts to the Fubini theorem for coends <ref> [Lan71] </ref>. Thus we have Proposition 28 The category Prof is a traced symmetric monoidal cate gory. It has been recognized [Abr96, Pan97], that the traced monoidal structure is very suited for giving semantics to systems presented as boxes and wires as it is the case for dataflow networks.
Reference: [LS89] <author> Nancy A. Lynch and Eugene W. Stark. </author> <title> A proof of the kahn principle for input/output automata. </title> <journal> Information and Computation, </journal> <volume> 82 </volume> <pages> 81-92, </pages> <year> 1989. </year>
Reference-contexts: Kahn's original paper contained no proof, but it is later shown formally by several authors, e.g. Faustini [Fau82] using games and for (a variation of) port automata by Lynch and Stark in <ref> [LS89] </ref>. They consider the class of networks for which the input-output relation is functional, which they call the determinate networks, and show that these indeed obey the `Kahn principle'. For indeterminate networks, the situation is not so simple.
Reference: [Mil89] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: This is one of the motivations behind the work presented in Section 2. A basic concept in concurrency theory is that of bisimulation equivalences <ref> [Par81, Mil89] </ref>. A bisimulation is an equivalence of systems, equating systems with the same observable behaviour, taking into account the non deterministic behaviour exhibited by the two systems during the computation. <p> Justified by the formal relationship to lats, we proposed the model of transition systems with independence and multi-arcs as a minimal and conservative way to relax this constraint. 2.1 The role of independence Following the leading idea of CCS <ref> [Mil89] </ref> and related process calculi, the behaviour of concurrent systems is often specified extensionally by describing their 'state-transitions' and the observable behaviours that such transitions produce.
Reference: [Mil93] <author> Robin Milner. </author> <title> The polyadic -calculus: a tutorial, </title> <year> 1993. </year>
Reference-contexts: described by the following transition system. ajnil "" D D D D D 88 b p p p p p p a OEOE a nil niljb &lt;&lt; b z z z z z EE ff ff ff ff ff ff ff ff ff ff ff It is common (see e.g. <ref> [Mil93, MN92] </ref> among others) to quotient the state-space by some structural congruence that, e.g., collapses the states b and nil jb, obtaining the more compact representation | with multi-arcs | shown below. ajnil $$ J J J J J J 66 ## ** a niljb ' b :: t t t
Reference: [MN92] <author> Madhavan Mukund and Mogens Nielsen. </author> <title> Ccs, locations and asynchronous transition systems. </title> <booktitle> In Proceedings of FST & TCS'92, number 652 in Lecture Notes in Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: The literature provides examples where independence is detected by a notion of events happening at different localities <ref> [MN92] </ref>, belonging to different processes [God96], or happening at different ports [Jon89, PS88]. When defining an independence model, one typically chooses to provide a structure that can model one or more of these features. <p> The expressive power of asynchronous transition systems is clearly not limited to the example above; for instance, Bednarczyk [Bed88] and Mukund and Nielsen <ref> [MN92] </ref> have shown that noninterleaving related issues for CCS processes | such as localities | can be modeled faithfully using this model. However, it can be argued that assigning both the independence relation and the decoration of transitions with events explicitly means assigning too much. <p> As remarked in [SNW93] these structures are first order axiomatisable, but for practical purposes (cf. <ref> [God96, MN92] </ref>) infinite structures are not desirable. 6 seen at the same time as identifying those transition systems that make as few identifications of transitions as possible, i.e., contain no confusion about event identities, and those in which such identities are derivable from the independence relation, i.e., reduce the redundancy. <p> described by the following transition system. ajnil "" D D D D D 88 b p p p p p p a OEOE a nil niljb &lt;&lt; b z z z z z EE ff ff ff ff ff ff ff ff ff ff ff It is common (see e.g. <ref> [Mil93, MN92] </ref> among others) to quotient the state-space by some structural congruence that, e.g., collapses the states b and nil jb, obtaining the more compact representation | with multi-arcs | shown below. ajnil $$ J J J J J J 66 ## ** a niljb ' b :: t t t <p> An example illustrating the latter is provided by Madhavan and Nielsen, who succesfully give semantics to a subclass of CCS within labelled asynchronous transition systems <ref> [MN92] </ref>. A simple way of defining a first order axiomatisable model strongly related to the various models of transition systems with independence, is to relax the axioms as suggested in [SNW93] by removing the global axiom T1 and introducing a local cube axiom. <p> This suggests the following future projects. * Study the possibility of defining a general format for SOS semantics with independence, related to existing formats for interleaving SOS semantics [AI94]. * Consider general conditions for obtaining finite descriptions. * Consider whether the semantics given in <ref> [MN92] </ref> can be defined more smoothly in the model of non-extensional transition systems with in dependence.
Reference: [MP97] <author> Ugo Montanari and Marco Pistore. </author> <title> Minimal transition systems for history-preserving bisimulation. </title> <booktitle> In STACS'97, </booktitle> <year> 1997. </year>
Reference-contexts: Even for very limited clases of systems s.t. finite free-choice 1-safe nets, only conjectures of decidability are made [Che96]. Compared to this, h-p bisimulation is well studied and proven decidable for finite safe nets <ref> [Vog91, MP97] </ref>. Later, Jategaonkar and Meyer [JM93] have shown that it is in fact DEXPTIME complete.
Reference: [NC94] <author> Mogens Nielsen and Christian Clausen. </author> <title> Bisimulations, games and logic. Research Series RS-94-6, </title> <type> BRICS, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <month> April </month> <year> 1994. </year> <pages> 37 pp. </pages> <note> Full version of paper appearing in: </note> <institution> New Results and Trends in Computer Science, </institution> <address> pages 289-305, </address> <publisher> LNCS 812, </publisher> <year> 1994. </year>
Reference-contexts: orders with a new top element, and those removing the order between two consecutive elements of a linear order. 3.2 Decidable independence bisimulations Fixing the model to that of transition systems with independence, we can formulate the characterising game for Atom 1 L -bisimulation relationally (similarly to the approach in <ref> [NC94] </ref>) directly in terms of the original transition systems as the l bisimulation below. Notation 19 For a tsi X, let Seq (X) be the set of transition sequences beginning in the initial state of X, let * be the empty sequence.
Reference: [NW96] <author> Mogens Nielsen and Glynn Winskel. </author> <title> Petri nets and bisimulation. </title> <journal> Theoretical Computer Science, </journal> (153):211-244, 1996. 
Reference-contexts: Hh-p bisimulation is the non-interleaving bisimula-tion on labelled event structures characterised by the existence of a span of Pom L -open maps by Joyal, Nielsen and Winskel in [JNW94]. This bisimu-lation is interesting because it transforms by coreflections to bisimulations for petri nets, labelled asynchronuos transition systems <ref> [NW96] </ref> and transition systems with independence [JNW94]. It is a strengthening of the history-preserving bisimulation (h-pb) previously studied by Rabinovitch and Trakhtenbrot [RT88] and van Glabeek and Goltz [VGG89]. <p> This is true for the categories Pom s L (pomsets and prefix morphisms [WN96]) and Atom 1 L , which is a generalisation of the category of "almost totally ordered multisets" Atom L defined in <ref> [NW96] </ref>. It has as objects linearly ordered pomsets over labelset L and the pomsets obtained from linearly ordered pomsets by removing the order between two consecutive elements. <p> An in teresting fact from [JNW94] is that in the category TSI, Atom 1 L -bisimulation do characterise hh-p bisimulation! (Atom 1 L is the category of "sticks" and "lollipops", which in <ref> [NW96] </ref> is defined as the category Atom L ).
Reference: [Pan97] <author> Prakash Panangaden. </author> <booktitle> On the category of kahn-processes. Handwritten notes, </booktitle> <year> 1997. </year>
Reference-contexts: In [Win96] the category of profunctors has been shown to form a model of classical linear logic, ie. being a monoidal closed category (in fact it is a compact-closed category). We emphasise that it is traced symmetric monoidal. As pointed out by Panan-gaden <ref> [Pan97] </ref>, this is exactly the categorical structure suited for modelling dataflow networks, and is present in an existing model for dataflow networks based on trace sets. <p> For example, the vanishing property simply amounts to the Fubini theorem for coends [Lan71]. Thus we have Proposition 28 The category Prof is a traced symmetric monoidal cate gory. It has been recognized <ref> [Abr96, Pan97] </ref>, that the traced monoidal structure is very suited for giving semantics to systems presented as boxes and wires as it is the case for dataflow networks.
Reference: [Par81] <author> D.M.R Park. </author> <title> Concurrency and automata on infinite sequences. </title> <booktitle> volume 104 of Lecture Notes in Computer Science, </booktitle> <pages> pages 168-183, </pages> <year> 1981. </year>
Reference-contexts: This is one of the motivations behind the work presented in Section 2. A basic concept in concurrency theory is that of bisimulation equivalences <ref> [Par81, Mil89] </ref>. A bisimulation is an equivalence of systems, equating systems with the same observable behaviour, taking into account the non deterministic behaviour exhibited by the two systems during the computation.
Reference: [Pel93] <author> D. Peled. </author> <title> All from one, one for all: on model checking using repre-sentatives. </title> <booktitle> In Proc. CAV '93, volume 697 of LNCS, </booktitle> <pages> pages 409-423. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: For instance in the field of automatic verification, eg. state-space exploration, knowing that different interleavings represent the same behaviour can reduce considerably that part of the state-space necessary to search through when checking system properties such as safety [GW91, God96] and live-ness <ref> [Val91, Pel93] </ref>. These techniques are usually referred to as partial order methods and are based on models cabable of representing the actual causal order of actions. Models of this kind, which we will call independence models, are in the focus of this report.
Reference: [PM87] <author> Pauntain and May. </author> <title> A Tutorial Introduction to Occam Programming. </title> <type> INMOS, </type> <year> 1987. </year>
Reference-contexts: An interesting question is how to extend the scope of independence models to higher order systems, such as value-passing and process-passing calculi, coming closer to modelling features of high-level concurrent programming languages as for example concurrent ML [CML, SML], OCCAM <ref> [PM87] </ref> as well as Hardware Description Languages (HDL) [Gor96]. This is one of the problems left open in [Win96], where an investigation of the use of presheaves to model higher-order features is initiated. <p> It is work in progress, related to the question of how to extend the scope of independence models to higher order systems, such as value-passing and process-passing calculi, coming closer to modelling features of high-level concurrent programming languages as e.g. concurrent ML [CML, SML], OC-CAM <ref> [PM87] </ref> and Hardware Description Languages (HDL) [Gor96, Gor97].
Reference: [Pra91] <author> V. Pratt. </author> <title> Modelling concurrency with geometry. </title> <booktitle> In Proc. 18th POPL, </booktitle> <pages> pages 311-322. </pages> <publisher> ACM, </publisher> <year> 1991. </year>
Reference-contexts: transition system * ?? b ~ ~ ~ ~ __ a @ @ @ @ __ @ @ @ @ b : (1) Several efforts have been devoted to the search of transition-based non--interleaving models, e.g., transition systems enriched with additional features that make expressing concurrency explicitly possible (cf., e.g., <ref> [Pra91, vG, Gou93, GJ92, vGP95, CS96] </ref>).
Reference: [PS88] <author> Prakash Panangaden and Eugene W. Stark. </author> <title> Computations, residuals and the power of indeterminacy. </title> <booktitle> In Proceedings of the Fifteenth ICALP, </booktitle> <pages> pages 439-454. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: The literature provides examples where independence is detected by a notion of events happening at different localities [MN92], belonging to different processes [God96], or happening at different ports <ref> [Jon89, PS88] </ref>. When defining an independence model, one typically chooses to provide a structure that can model one or more of these features. A natural goal is that this should be as abstract as possible, such that the semantics does not make any distinctions not imposed by the independence. <p> There exist several formal definitions of the basic units (nodes) and how to combine them into network (see discussion in [Jon89]). The fundamental unit we have in mind, is the monotone input-output port automata <ref> [Jon89, PS88] </ref>. We assume that V is a fixed set of values and P a fixed set of port names. <p> F ; G (P; R) = F (P; Q) fi G (Q; R); 10 See <ref> [PS88] </ref> for a study of the differences of nondeterministic primitives. 11 It is a bicategory because composition is only defined to within isomorphism. 26 and for any f : P ! P 0 and g : R 0 ! R, Z Q A coend is a generalised colimit (see [Lan71, Hyl95]).
Reference: [RT88] <author> A. Rabinovich and B.A. Trakhtenbrot. </author> <title> Behaviour structure and nets. </title> <note> Fundamenta Informaticae, (XI):357-404, </note> <year> 1988. </year>
Reference-contexts: This bisimu-lation is interesting because it transforms by coreflections to bisimulations for petri nets, labelled asynchronuos transition systems [NW96] and transition systems with independence [JNW94]. It is a strengthening of the history-preserving bisimulation (h-pb) previously studied by Rabinovitch and Trakhtenbrot <ref> [RT88] </ref> and van Glabeek and Goltz [VGG89]. However, it is still open if hh-p bisimulation is decidable for say finite safe nets or finite transition systems with independence, despite the work of a number of people.
Reference: [Rus89] <author> James R. Russell. </author> <title> Full abstraction for nondeterministic dataflow networks. </title> <booktitle> In FoCS, </booktitle> <pages> pages 170-176, </pages> <year> 1989. </year>
Reference-contexts: have shown the impossibility of giving compositional semantics in a model without causality information to a class of network with the nondeterministic primitive fair merge [BA81], and later Russell has shown with a very simple example that this is true also for networks with the weakest nondeterministic primitive, bounded choice <ref> [Rus89] </ref>. This is the content of Section 4. <p> In other words, it provides an example of a class of systems for which independence models are crucial. Jonsson [Jon89] has given a model based on trace sets, which is proven to be fully abstract for indeterminate dataflow networks with a fair merge primitive, and by Russell <ref> [Rus89] </ref> even for dataflow networks with the weakest nondeterministic primitive, bounded choice 10 . We include a model similar to the model of Jonsson in the end of next section.
Reference: [Sel] <author> Peter Selinger. </author> <title> First-order axioms for asynchrony. </title> <note> Preliminary Report. </note>
Reference-contexts: As the automata are defined at the moment, we do not immediately get a category, for one thing we cannot define the identities. This is related to the work on axioms for asynchrony of Selinger <ref> [Sel] </ref>. He uses a category of buffered labelled transition systems with input/output up to weak bisimulation. We hope to define a (bi)category Port of port automata. Having this, we can hopefully extend the relationships above to the full categories of ProfI, PKahn and 31 Port.
Reference: [Shi85] <author> M. W. Shields. </author> <title> Concurrent machines. </title> <journal> Computer Journal, </journal> <volume> 28 </volume> <pages> 449-465, </pages> <year> 1985. </year>
Reference-contexts: We have focused on two such models, namely asynchronous transition systems, introduced independently by Bednarczyk [Bed88] and Shields <ref> [Shi85] </ref>, and transitions systems with independence, proposed by Winskel and Nielsen [WN94].These two approaches are, among the others, those building on the simple idea: endow transition systems with some formal notion of `similarity' of transitions that enables to distinguish whether or not the opposite edges in diagrams such as (1) represent
Reference: [SML] <author> Standard ml/nj. </author> <note> http://cm.bell-labs.com/cm/cs/what/smlnj/. </note>
Reference-contexts: An interesting question is how to extend the scope of independence models to higher order systems, such as value-passing and process-passing calculi, coming closer to modelling features of high-level concurrent programming languages as for example concurrent ML <ref> [CML, SML] </ref>, OCCAM [PM87] as well as Hardware Description Languages (HDL) [Gor96]. This is one of the problems left open in [Win96], where an investigation of the use of presheaves to model higher-order features is initiated. <p> It is work in progress, related to the question of how to extend the scope of independence models to higher order systems, such as value-passing and process-passing calculi, coming closer to modelling features of high-level concurrent programming languages as e.g. concurrent ML <ref> [CML, SML] </ref>, OC-CAM [PM87] and Hardware Description Languages (HDL) [Gor96, Gor97].
Reference: [SNW93] <author> Vladimiro Sassone, Mogens Nielsen, and Glynn Winskel. </author> <title> Models for concurrency: Towards a classification. </title> <note> To appear in Theoretical Computer Science, </note> <year> 1993. </year>
Reference-contexts: As remarked in <ref> [SNW93] </ref> these structures are first order axiomatisable, but for practical purposes (cf. [God96, MN92]) infinite structures are not desirable. 6 seen at the same time as identifying those transition systems that make as few identifications of transitions as possible, i.e., contain no confusion about event identities, and those in which such <p> A simple way of defining a first order axiomatisable model strongly related to the various models of transition systems with independence, is to relax the axioms as suggested in <ref> [SNW93] </ref> by removing the global axiom T1 and introducing a local cube axiom.
Reference: [Sta89] <author> Eugene W. Stark. </author> <title> Concurrent transition systems. </title> <journal> In TCS, </journal> <volume> number 63-64, </volume> <pages> pages 221-269, </pages> <year> 1989. </year>
Reference-contexts: This is sketched in [Hil97], given the name of non-extensional transition systems with independence 6 . This does not change the fact that the model is not elementary 6 This model is reminiscent to the model of concurrent transition systems of E. Stark <ref> [Sta89] </ref> (first order axiomatisable). A first order axiomatisable model is useful as basis for a SOS-semantics, since we in the definition of each rule locally can garentee that the axioms are satisfied, instead of relying on a subsequent global analysis.
Reference: [Sta90] <author> Eugene W. Stark. </author> <title> A simple generalization of kahn's principle to indeterminate dataflow networks. </title> <editor> In M. Z. Kwiatkowska, M. W. Shields, and R. M. Thomas, editors, </editor> <title> Semantics for Concurrency, </title> <booktitle> Leicester 1990, </booktitle> <pages> pages 157-176. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Besides showing how to combine first order and independence, this relates to a line of work of Abramsky [Abr90] and Stark <ref> [Sta90] </ref> among others in finding a natural generalisation of an elegant model for determinate networks provided by Kahn in the seventies [Kah74]. <p> Besides showing how to combine first order and independence, this relates to a line of work of Abramsky [Abr90] and Stark <ref> [Sta90] </ref> among others on finding a natural generalisation to indeterminate networks of an elegant model for determinate networks provided by Kahn in the seventies [Kah74]. Below we give some background on dataflow network including a discussion of the role of causal information when giving compositional semantics for indeterminate networks.
Reference: [Sta92] <author> Eugene W. Stark. </author> <title> A calculus of dataflow networks. </title> <type> Technical report, </type> <institution> Stony Brook, </institution> <year> 1992. </year> <note> Available via ftp. </note>
Reference-contexts: For the path-category described above, we should compare the relation between the bisimulation obtained from span of open maps and ad hoc bisimulations suggested for dataflow network <ref> [Sta92] </ref>. Another aim for future work is to investigate how to express fairness in the profunctor model. Fairness is an important concept in connection with dataflow network and actually the operational semantics often makes fairness conditions explicit [Jon89].
Reference: [Val91] <author> A. Valmari. </author> <title> A stubborn attack on state explosion. </title> <booktitle> In Proc. CAV '90, number 3 in DIMACS series, </booktitle> <pages> pages 25-41, </pages> <year> 1991. </year>
Reference-contexts: For instance in the field of automatic verification, eg. state-space exploration, knowing that different interleavings represent the same behaviour can reduce considerably that part of the state-space necessary to search through when checking system properties such as safety [GW91, God96] and live-ness <ref> [Val91, Pel93] </ref>. These techniques are usually referred to as partial order methods and are based on models cabable of representing the actual causal order of actions. Models of this kind, which we will call independence models, are in the focus of this report.
Reference: [vG] <author> R. van Glabbeek. </author> <title> Bisimulations for higher dimensional automata. E-mail message sent to the Concurrence mailing list on July 7, </title> <note> 1991. Available at http://theory.stanford.edu/rvg/hda. </note>
Reference-contexts: transition system * ?? b ~ ~ ~ ~ __ a @ @ @ @ __ @ @ @ @ b : (1) Several efforts have been devoted to the search of transition-based non--interleaving models, e.g., transition systems enriched with additional features that make expressing concurrency explicitly possible (cf., e.g., <ref> [Pra91, vG, Gou93, GJ92, vGP95, CS96] </ref>).
Reference: [VGG89] <author> R.J. Van Glabeek and U. Goltz. </author> <title> Equivlaence notions for concurrent systems and refinement of actions. </title> <booktitle> In Proc. of MFCS, volume 379 of Lecture Notes in Computer Science, </booktitle> <year> 1989. </year>
Reference-contexts: This bisimu-lation is interesting because it transforms by coreflections to bisimulations for petri nets, labelled asynchronuos transition systems [NW96] and transition systems with independence [JNW94]. It is a strengthening of the history-preserving bisimulation (h-pb) previously studied by Rabinovitch and Trakhtenbrot [RT88] and van Glabeek and Goltz <ref> [VGG89] </ref>. However, it is still open if hh-p bisimulation is decidable for say finite safe nets or finite transition systems with independence, despite the work of a number of people. Even for very limited clases of systems s.t. finite free-choice 1-safe nets, only conjectures of decidability are made [Che96].
Reference: [vGP95] <author> R. van Glabbeek and G. Plotkin. </author> <title> Configuration structures. </title> <booktitle> In Proc. LICS '95, </booktitle> <pages> pages 99-109. </pages> <publisher> IEEE, </publisher> <year> 1995. </year> <month> 36 </month>
Reference-contexts: transition system * ?? b ~ ~ ~ ~ __ a @ @ @ @ __ @ @ @ @ b : (1) Several efforts have been devoted to the search of transition-based non--interleaving models, e.g., transition systems enriched with additional features that make expressing concurrency explicitly possible (cf., e.g., <ref> [Pra91, vG, Gou93, GJ92, vGP95, CS96] </ref>).
Reference: [Vog91] <author> Walter Vogler. </author> <title> Deciding history preserving bisimulation. </title> <booktitle> In Au--tomata, Languages and Programming (ICALP'91), volume 510 of LNCS, </booktitle> <pages> pages 495-505, </pages> <year> 1991. </year>
Reference-contexts: Even for very limited clases of systems s.t. finite free-choice 1-safe nets, only conjectures of decidability are made [Che96]. Compared to this, h-p bisimulation is well studied and proven decidable for finite safe nets <ref> [Vog91, MP97] </ref>. Later, Jategaonkar and Meyer [JM93] have shown that it is in fact DEXPTIME complete.
Reference: [Win96] <author> Glynn Winskel. </author> <title> A presheaf semantics of value-passing processes. </title> <booktitle> In CONCUR'96: Concurrency Theory, number 1119 in Lecture Notes in Computer Science, </booktitle> <pages> pages 98-114, </pages> <year> 1996. </year>
Reference-contexts: This is one of the problems left open in <ref> [Win96] </ref>, where an investigation of the use of presheaves to model higher-order features is initiated. Presheaf models has the advantage of including independence models below first order, like labelled event structures, and contributes a general definition of bisimulation based on open maps. <p> With an eye to the theory of dataflow models, which are a particular kind of model supporting value passing, we begin within a model based on a bicategory of profunctors, introduced in <ref> [Win96] </ref> where an interleaving denotational semantics for a language allowing process passing is given. Recent work of mine shows a close correspondence between a category of monotone input-output port automata, which can be used as the basic units of a dataflow model, and a category of mixed-variance presheaves. <p> Such 22 presheaf categories constitute the hom-categories in the bicategory of pro--functors, which thus provides a possible setting where port automata could be modelled as the morphisms and composition of (interaction between) automata modelled by composition in the category. In <ref> [Win96] </ref> the category of profunctors has been shown to form a model of classical linear logic, ie. being a monoidal closed category (in fact it is a compact-closed category). We emphasise that it is traced symmetric monoidal. <p> Observation 27 Any presheaf category, b P, can be represented in Prof as the category Prof [1; P] of profunctors from the one object category to the base category P. The category Prof can be equipped with a tensor product as in <ref> [Win96] </ref>, which on objects is the product of categories and for F : P // + Q and G : R // + S, F G : P R // + Q S is defined by F G (P; R); (Q; S) = F (P; Q) fi G (R; S); which
Reference: [WN94] <author> Glynn Winskel and Mogens Nielsen. </author> <title> Models for concurrency. Research Series RS-94-12, </title> <type> BRICS, </type> <institution> Department of Computer Science, University of Aarhus, </institution> <month> May </month> <year> 1994. </year> <pages> 144 pp. </pages> <booktitle> Appears as a chapter in the Handbook of Logic and the Foundations of Computer Science, </booktitle> <volume> vol. 4, </volume> <pages> pages 1-148, </pages> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: An immediate question when one tries to give semantics in an independence model is how to detect the information from the system and how to 2 express it in the model <ref> [God96, WN94] </ref>. The literature provides examples where independence is detected by a notion of events happening at different localities [MN92], belonging to different processes [God96], or happening at different ports [Jon89, PS88]. <p> Since there is a great choice in the point of view of observing process, there have been proposed confusingly many behavioural equivalences. The categorical presentation of models advocated in <ref> [WN94] </ref> suggests a canonical choice of bisimulation through the notion of open maps as reported in [JNW94]. It is often taken for granted, that any reasonable bisimulation has to be decidable for a large class of finite systems. <p> ~ ~ ~ __ e a @ @ @ @ __ @ @ @ @ e 0 b * ?? b e 0 ~ ~ ~ ~ __ e a @ @ @ @ __ @ @ @ @ e 0 b Observe that we consider labelled asynchronous transition systems <ref> [Bed88, WN94] </ref>, i.e., asynchronous transition systems with a further labelling of events, as the proper extension of labelled transition systems. <p> Moreover, avoiding a primitive notion of event makes providing a `noninterleaving' operational semantics in the SOS style a simpler task (cf. <ref> [WN94] </ref>). However, in order to be consistent with the computational intuition, the axiomatics of transition systems with independence involves necessarily 2 one condition expressed `globally' in terms of all the transitions representing occurrences of the same event, to be precise: they are not first order axiomatisable. <p> Also, it excludes multi-arcs, i.e., multiple transitions with the same label between the same two states. Event-maximality, on the other hand, can be 2 A simple application of Gaifman's theorem [Hil97]. 3 In <ref> [WN94] </ref> a SOS semantics is given in tsi, but the proof showing that the resulting transition system satisfies the defining axioms of tsi depends crucially on the fact, that the semantics is given in the sub category of acyclic transition systems with independence, essentially obtained by unfolding sums and recursion. <p> It is worth noticing here that at : eLATS ! TSI, the right adjoint of the coreflection, complements and corrects a non-well-defined construction sketched in <ref> [WN94] </ref>: as a matter of fact, due to the greater generality of asynchronous transition systems, eLATS happens to be the largest subcategory of LATS on which such a construction makes sense. <p> kk ? + ff Similarly to the case of TSI, dLATS and mdLATS are the largest subcategories of LATS for which such results hold. 2.2 Preliminary definitions: LATS and TSI In this section we recall briefly the definitions of asynchronous transition systems, transition systems with independence, and their respective categories <ref> [Bed88, WN94] </ref>. <p> The following is the standard definition of morphisms for lats, which essentially mimics the idea of simulation (cf. <ref> [Bed88, WN94] </ref>). <p> The elements of fl A = = can be partial ordered by x v y iff 9u:x = y u (see <ref> [WN94] </ref>. In the following, we will let hAi refer to the partial order category given by fl A = = Definition 31 Let PProf (port-profunctors) be the full subcategory of Prof induced by the p.o. categories hAi for any A P as defined above.
Reference: [WN96] <author> Glynn Winskel and Mogens Nielsen. </author> <note> Presheaves as transition systems. In Doron Peled, </note> <author> Vaughan Pratt, and Gerard Holzmann, </author> <title> editors, Partial Order Methods in Verification, </title> <journal> POMIV'96, </journal> <volume> volume 29, </volume> <month> july </month> <year> 1996. </year> <note> 37 6 Appendix: Articles 6.1 BRICS RS-96-18/CONCUR'96 1 6.2 BRICS RS-97-10/POMIV'96 18 </note>
Reference-contexts: The work described in this section has basis in the categorical charac-terisations of P-bisimulations presented in [JNW94], exploiting the view of presheaves as transition systems <ref> [WN96] </ref>. This is briefly covered in the first subsection below. In the subsection following thereafter, we focus at Pom L - bisimulation for finite transition systems with independence and variations thereof, which is my contribution. <p> Thus, the category " Pom L is a natural generalisation of E L , that however contains more elements (see <ref> [JNW94, WN96] </ref>). The embedding above extends the Yoneda embedding of Pom L ! " Pom L , regarding a path object P as the preheaf Pom L (; P ) = E L (i (); P ), since the inclusion of Pom L into E L is full. <p> Now, on the face of it, it is difficult to see how one can get an operational handle on the notion of span of open maps. In <ref> [WN96] </ref> it is showed that presheaves can be viewed as labelled transition systems with transitions labelled by the morphisms of the path category (in fact there is a functor from presheaves to labelled transition systems). <p> In particular, if we can find a sub category Q of Pom L for which we can show that Q-bisimulation in presheaves implies h-hp bisimulation, we can conclude that it characterises h-hp bisimulation. This is true for the categories Pom s L (pomsets and prefix morphisms <ref> [WN96] </ref>) and Atom 1 L , which is a generalisation of the category of "almost totally ordered multisets" Atom L defined in [NW96]. It has as objects linearly ordered pomsets over labelset L and the pomsets obtained from linearly ordered pomsets by removing the order between two consecutive elements. <p> Via the games characterisation in <ref> [WN96] </ref> it is relatively easy to show that l-bisimulation characterises Atom 1 L -bisimulation for the associated presheafs of transition systems with independence. <p> iff Ipair (i; y) ^ Ipair (i; x) ) oe i x R oe i y An immediate observation is, that for k = 0, one gets a characterisation of Hennesy-Milner (HM) bisimulation since axiom B5' now holds vacuously, and adding the back-tracking axiom is known not to influence HM-bisimulation <ref> [WN96] </ref>. It is also clear l k+1 implies l k for any k &lt; 1, and for k = 1 we get l-bisimulation back.
References-found: 64

