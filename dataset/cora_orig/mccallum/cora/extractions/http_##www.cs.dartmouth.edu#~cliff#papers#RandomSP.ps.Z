URL: http://www.cs.dartmouth.edu/~cliff/papers/RandomSP.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~cliff/papers/
Root-URL: http://www.cs.dartmouth.edu
Email: E-mail: fstavros, cliffg@cs.dartmouth.edu  
Title: Finding Real-Valued Single-Source Shortest Paths in o(n 3 Expected Time  
Author: Stavros G. Kolliopoulos and Clifford Stein 
Address: Hanover, NH 03755-3510.  
Affiliation: Dartmouth College, Department of Computer Science,  
Abstract: Given an n-vertex, m-edge directed network G with real costs on the edges and a designated source vertex s; we give a new algorithm to compute shortest paths from s. Our algorithm is a simple deterministic one with O(n 2 log n) expected running time over a large class of input distributions. This is the first strongly polynomial algorithm in over 35 years to improve upon some aspect of the O(nm) running time of the Bellman-Ford algorithm. The result extends to an O(n 2 log n) expected running time algorithm for finding the minimum mean cycle, an improvement over Karp's O(nm) worst-case time bound when the underlying graph is dense. Both of our time bounds are shown to be achieved with high probability. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. K. Ahuja, T. L. Magnanti and J. B. Orlin, </author> <title> "Network Flows," </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1993. </year>
Reference-contexts: This is an old and fundamental problem in network optimization with a plethora of applications in operations research (see, for example <ref> [1] </ref>). It also arises as a subproblem in other optimization problems such as network flows. A survey of over 200 shortest-path papers through the year 1984 appeared in [9]. The classic Bellman-Ford algorithm solves the SSSP problem in an n-vertex m-edge network in O (nm) time [3, 11]. <p> It is also faster than the recent scaling algorithm of Goldberg [17], which takes O (n 2:5 ) or more time under the similarity assumption <ref> [1] </ref> on dense graphs. To our knowledge, this is the first strongly polynomial algorithm that solves SSSP in o (n 3 ) time for dense networks with arbitrary real-valued costs. In the same time bound, our algorithm will detect the existence of a negative-cost cycle. <p> be the set of all n-vertex directed networks and suppose P is a probability measure on G n : We may identify G n with the set of all nfin matrices with entries in (1; +1): P is uniquely characterized by its distribution function, F P : G n ! <ref> [0; 1] </ref>; defined by F P (G) = P fG 0 2 G n jc G 0 (i; j) c G (i; j) for 1 i; j ng: We say that P is endpoint independent if, for 1 i; j; k n and G 2 G n ; we have that
Reference: [2] <author> N. Alon, Z. Galil and O. Margalit, </author> <title> On the exponent of the all pairs shortest path problem, </title> <booktitle> in " Proc. 32nd IEEE Symp. </booktitle> <institution> Found. Comp. Sci.," </institution> <year> 1991, </year> <pages> 569-575. </pages>
Reference-contexts: They also showed that under weak assumptions (n log n) time is required with high probability for solving SSSP on networks with the endpoint-independent distribution. Recently some research has been done on randomized algorithms that use ideas from matrix multiplication <ref> [2, 28] </ref>, but, for arbitrary cost assignments, only pseudopolynomial algorithms exist. The extent to which randomization can be used for faster algorithms, as was the case with e.g. minimum cut [21] and minimum spanning tree [20], is an open question. The outline of the paper is as follows.
Reference: [3] <author> R. Bellman, </author> <title> On a routing problem, </title> <journal> Quarterly of Appl. Math., </journal> <volume> 16 (1958), </volume> <pages> 87-90. </pages>
Reference-contexts: It also arises as a subproblem in other optimization problems such as network flows. A survey of over 200 shortest-path papers through the year 1984 appeared in [9]. The classic Bellman-Ford algorithm solves the SSSP problem in an n-vertex m-edge network in O (nm) time <ref> [3, 11] </ref>. <p> For arbitrary real costs the existence of negative-cost cycles, i.e. paths of negative cost in which every vertex has degree 2, makes the SSSP problem NP-hard [16]. In the absence of negative-cost cycles, the fastest strongly polynomial SSSP algorithm, as mentioned above, is attributed to Bellman and Ford <ref> [3, 11] </ref> and can be implemented to run in O (nm) time, worst case. This is O (n 3 ) for dense graphs. <p> We will give the algorithm in two parts. In Section 2.1 we give a modified version of the Bellman-Ford <ref> [3, 11] </ref> algorithm that reduces solving a shortest path problem to a sequence of n shortest path problems in a simpler network. Then in Section 2.2 we show how to solve this simpler shortest path problem in O (n log n) time, on average. <p> and the pattern of O (n 3 ) worst-case time seems to transfer to an O (n 2 log n) average-case time pattern for all three. 12 Problem Worst Case Average Case assignment O (n 3 ) [25, 12] O (n 2 log n) [23] SSSP O (n 3 ) <ref> [3, 11] </ref> O (n 2 log n) [this paper] minimum mean cycle O (n 3 ) [22] O (n 2 log n) [this paper] Table 1: Best strongly polynomial time bounds for three related problems. The input model in [23] is defined as a special case of the endpoint-independent one.
Reference: [4] <author> P. A. Bloniarz, A. Meyer and M. Fischer, </author> <title> Some observations on Spira's shortest path algorithm, </title> <type> Tech. </type> <institution> Rept. 79-6, Comp. Sci. Dept., State University of New York at Albany, Albany, </institution> <address> NY, </address> <year> 1979. </year>
Reference-contexts: A first APSP algorithm with an expected running time of O (n 2 log 2 n) on networks with independently and identically distributed edge costs was presented in a classical paper by Spira [29] (see [6] for minor corrections). This result was later refined <ref> [4] </ref> to take into account nonunique edge costs and improved in [30], where an O (n 2 log n log log n) expected time algorithm was given.
Reference: [5] <author> P. A. Bloniarz, </author> <title> A shortest path algorithm with expected time O(n 2 log n log fl n), </title> <journal> SIAM J. Comput., </journal> <volume> 12 (1983), </volume> <pages> 588-600. </pages>
Reference-contexts: A conceptual contribution of our method is that one can solve real-weighted SSSP by solving O (n) SSSP problems with nonnegative weights. When these problems can be solved in sublinear time, we get a faster algorithm. Our model of random edge costs is Bloniarz's endpoint-independent model <ref> [5] </ref>. <p> This model can be roughly defined as follows: the distribution according to which the cost of directed edge (u; v) is chosen does not depend on the head v: Bloniarz's model extended previous work and is arguably the most general model studied in the shortest path literature (see, for example, <ref> [5, 13, 27, 30, 29] </ref>). Recently Walley and Tan [31] defined a random cost model that is not comparable to Bloniarz's. The endpoint-independent model includes the common case of all edge costs being drawn independently from the same distribution. <p> This result was later refined [4] to take into account nonunique edge costs and improved in [30], where an O (n 2 log n log log n) expected time algorithm was given. Bloniarz <ref> [5] </ref> achieved an expected running time of O (n 2 log n log fl n) and relaxed Spira's initial assumption that edge costs are drawn independently from any single but arbitrary 3 distribution. He introduced the more general endpoint-independent randomness model. <p> The definition follows <ref> [5] </ref> except that we allow negative costs as well. <p> The reader is referred to <ref> [5] </ref> for further examples. We proceed with a high-level description of the Moffat-Takaoka method. Moffat and Takaoka give a SSSP algorithm with an expected running time O (n log n) under the above input model for a nonnegative-cost assignment, assuming that all of the edge lists are sorted.
Reference: [6] <author> J. S. Carson and A. M. </author> <title> Law, A note on Spira's algorithm for the all-pairs shortest path problem,SIAM J. </title> <journal> Comput., </journal> <volume> 6 (1977), </volume> <pages> 696-699. </pages>
Reference-contexts: A first APSP algorithm with an expected running time of O (n 2 log 2 n) on networks with independently and identically distributed edge costs was presented in a classical paper by Spira [29] (see <ref> [6] </ref> for minor corrections). This result was later refined [4] to take into account nonunique edge costs and improved in [30], where an O (n 2 log n log log n) expected time algorithm was given.
Reference: [7] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest, </author> <title> "Introduction to Algorithms," </title> <publisher> MIT Press, </publisher> <address> Cam-bridge, MA, </address> <year> 1990. </year>
Reference-contexts: Let K ((k)) denote the minimum k such that a relation (k) holds. We assume, wlog, that 0 n k. We can upper bound the left-hand side of (4) by using the identity <ref> [7] </ref> k k r : (5) We can lower bound the right-hand side of (4) by m! = m (m 1) : : : (m r + 1) (m r) r : (6) k 0 = K k ! m! ! r r (k r) kr (m r) r = k
Reference: [8] <author> G. B. Dantzig, </author> <title> On the shortest route through a network, </title> <institution> Management Sci., </institution> <month> 6 </month> <year> (1960), </year> <pages> 187-190. </pages>
Reference-contexts: Based on the policy selection, we obtain Spira's [29] and Dantzig's <ref> [8] </ref> methods respectively. The Moffat-Takaoka routine (MT) uses Dantzig's algorithm up to a critical point with respect to the size of S and then switches to Spira's.
Reference: [9] <author> N. Deo and C. Pang, </author> <title> Shortest-path algorithms: taxonomy and annotation, Networks, </title> <booktitle> 14 (1984), </booktitle> <pages> 275-323. </pages>
Reference-contexts: This is an old and fundamental problem in network optimization with a plethora of applications in operations research (see, for example [1]). It also arises as a subproblem in other optimization problems such as network flows. A survey of over 200 shortest-path papers through the year 1984 appeared in <ref> [9] </ref>. The classic Bellman-Ford algorithm solves the SSSP problem in an n-vertex m-edge network in O (nm) time [3, 11].
Reference: [10] <author> E. W. Dijkstra, </author> <title> A note on two problems in connection with graphs, </title> <journal> Numerische Mathematics, </journal> <volume> 1 (1959), </volume> <pages> 269-271. </pages>
Reference-contexts: This is O (n 3 ) for dense graphs. Until recently, all alternative implementations of Bellman-Ford first solved an assignment problem to find vertex potentials, which allows reweighting of edges so that all edge costs become nonnegative. Then Dijkstra's algorithm <ref> [10] </ref> is applied to the reweighted network. The bottleneck in this approach is the solution of the assignment problem. The first and fastest strongly polynomial-time algorithm for the assignment problem is Kuhn's Hungarian algorithm [25]. <p> All of these algorithms detect the existence of a negative-cost cycle. We also note that if the costs are nonnegative, faster algorithms are possible, as Dijkstra's algorithm <ref> [10] </ref> implemented with Fibonacci heaps [12] runs in O (n log n + m) time. We are not aware of any work on the average-case complexity of the SSSP problem for real-valued edge costs. <p> Moffat and Takaoka give a SSSP algorithm with an expected running time O (n log n) under the above input model for a nonnegative-cost assignment, assuming that all of the edge lists are sorted. Their algorithm is similar to Dijkstra's <ref> [10] </ref> and exploits the fact that vertices extracted in increasing cost order from a priority queue cannot have their cost decreased later on; once a vertex v is removed from the priority queue, its distance estimate is the cost of the actual shortest path from the source to v.
Reference: [11] <author> L. R. Ford Jr. and D. R. Fulkerson, </author> <title> "Flows in Networks," </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1962. </year>
Reference-contexts: It also arises as a subproblem in other optimization problems such as network flows. A survey of over 200 shortest-path papers through the year 1984 appeared in [9]. The classic Bellman-Ford algorithm solves the SSSP problem in an n-vertex m-edge network in O (nm) time <ref> [3, 11] </ref>. <p> For arbitrary real costs the existence of negative-cost cycles, i.e. paths of negative cost in which every vertex has degree 2, makes the SSSP problem NP-hard [16]. In the absence of negative-cost cycles, the fastest strongly polynomial SSSP algorithm, as mentioned above, is attributed to Bellman and Ford <ref> [3, 11] </ref> and can be implemented to run in O (nm) time, worst case. This is O (n 3 ) for dense graphs. <p> We will give the algorithm in two parts. In Section 2.1 we give a modified version of the Bellman-Ford <ref> [3, 11] </ref> algorithm that reduces solving a shortest path problem to a sequence of n shortest path problems in a simpler network. Then in Section 2.2 we show how to solve this simpler shortest path problem in O (n log n) time, on average. <p> and the pattern of O (n 3 ) worst-case time seems to transfer to an O (n 2 log n) average-case time pattern for all three. 12 Problem Worst Case Average Case assignment O (n 3 ) [25, 12] O (n 2 log n) [23] SSSP O (n 3 ) <ref> [3, 11] </ref> O (n 2 log n) [this paper] minimum mean cycle O (n 3 ) [22] O (n 2 log n) [this paper] Table 1: Best strongly polynomial time bounds for three related problems. The input model in [23] is defined as a special case of the endpoint-independent one.
Reference: [12] <author> M. L. Fredman and R. E. Tarjan, </author> <title> Fibonacci heaps and their uses in improved network optimization problems, </title> <journal> J. ACM, </journal> <volume> 34 (1987), </volume> <pages> 596-615. </pages>
Reference-contexts: Then Dijkstra's algorithm [10] is applied to the reweighted network. The bottleneck in this approach is the solution of the assignment problem. The first and fastest strongly polynomial-time algorithm for the assignment problem is Kuhn's Hungarian algorithm [25]. Implemented with Fibonacci heaps <ref> [12] </ref>, this algorithm runs in O (nm + n 2 log n) time. Gabow and Tarjan [15] gave a scaling algorithm for the assignment problem that runs in O ( p nm log (nN )) time, where N is the largest absolute value of an edge cost. <p> All of these algorithms detect the existence of a negative-cost cycle. We also note that if the costs are nonnegative, faster algorithms are possible, as Dijkstra's algorithm [10] implemented with Fibonacci heaps <ref> [12] </ref> runs in O (n log n + m) time. We are not aware of any work on the average-case complexity of the SSSP problem for real-valued edge costs. However, the all pairs shortest path problem with nonnegative edge costs is well studied and the relevant literature spans two decades. <p> Algorithm Fast SSSP solves SSSP on G in O (n 2 log n) expected time if no negative-cost cycle exists. Otherwise it reports the existence of a negative-cost cycle in the same time bound. Modifying the Moffat-Takaoka routine to use Fibonacci heaps <ref> [12] </ref>, Mehlhorn and Priebe also obtained a high probability result. In our setting it can be phrased as follows. <p> These three problems are known to be conceptually related, and the pattern of O (n 3 ) worst-case time seems to transfer to an O (n 2 log n) average-case time pattern for all three. 12 Problem Worst Case Average Case assignment O (n 3 ) <ref> [25, 12] </ref> O (n 2 log n) [23] SSSP O (n 3 ) [3, 11] O (n 2 log n) [this paper] minimum mean cycle O (n 3 ) [22] O (n 2 log n) [this paper] Table 1: Best strongly polynomial time bounds for three related problems.
Reference: [13] <author> A. M. Frieze and G. R. Grimmet, </author> <title> The shortest-path problem for graphs with random arc-lengths, </title> <journal> Discrete Applied Mathematics, </journal> <volume> 10 (1985), </volume> <pages> 57-77. </pages>
Reference-contexts: This model can be roughly defined as follows: the distribution according to which the cost of directed edge (u; v) is chosen does not depend on the head v: Bloniarz's model extended previous work and is arguably the most general model studied in the shortest path literature (see, for example, <ref> [5, 13, 27, 30, 29] </ref>). Recently Walley and Tan [31] defined a random cost model that is not comparable to Bloniarz's. The endpoint-independent model includes the common case of all edge costs being drawn independently from the same distribution. <p> Hassin and Zemel [19] considered the case in which the edge costs are uniformly distributed independently and gave an O (n 2 log n) expected time algorithm. Their result extends under some assumptions to independently and identically distributed edge costs. Frieze and Grimmet <ref> [13] </ref> gave an O (n 2 log n) expected time algorithm for the case in which edge costs are identically and independently distributed with distribution function F; where F (0) = 0 and F is differentiable at 0: The fastest algorithm so far under the endpoint-independent model is due to Moffat
Reference: [14] <author> H. N. Gabow, </author> <title> Scaling Algorithms for Network Problems, </title> <institution> J. Comput. Syst. Sci., </institution> <month> 31 </month> <year> (1985), </year> <pages> 148-168. </pages>
Reference-contexts: The input model in [23] is defined as a special case of the endpoint-independent one. Worst-case time bounds are reported for dense graphs. It is interesting to note that a linear time (ignoring log factors) reduction is known to exist from SSSP to the assignment problem <ref> [14] </ref>. We have been unable to use this reduction in conjunction with Karp's O (n 2 log n) assignment algorithm [23] to obtain a SSSP algorithm as fast as ours. The reduction is based on using an assignment algorithm to compute vertex potentials (:) that dominate the edge costs.
Reference: [15] <author> H. N. Gabow and R. E. Tarjan, </author> <title> Faster scaling algorithms for network problems, </title> <journal> SIAM J. Comput., </journal> <volume> 18 (1989), </volume> <pages> 1013-1036. </pages>
Reference-contexts: The bottleneck in this approach is the solution of the assignment problem. The first and fastest strongly polynomial-time algorithm for the assignment problem is Kuhn's Hungarian algorithm [25]. Implemented with Fibonacci heaps [12], this algorithm runs in O (nm + n 2 log n) time. Gabow and Tarjan <ref> [15] </ref> gave a scaling algorithm for the assignment problem that runs in O ( p nm log (nN )) time, where N is the largest absolute value of an edge cost.
Reference: [16] <author> M. S. Garey and D. S. Johnson, </author> <title> "Computers and Intractability: A Guide to the Theory of NP-completeness", </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> San Francisco, CA, </address> <year> 1979. </year>
Reference-contexts: The Bellman-Ford algorithm fits into this model. Previous and Related Work. For arbitrary real costs the existence of negative-cost cycles, i.e. paths of negative cost in which every vertex has degree 2, makes the SSSP problem NP-hard <ref> [16] </ref>. In the absence of negative-cost cycles, the fastest strongly polynomial SSSP algorithm, as mentioned above, is attributed to Bellman and Ford [3, 11] and can be implemented to run in O (nm) time, worst case. This is O (n 3 ) for dense graphs.
Reference: [17] <author> A. V. Goldberg, </author> <title> Scaling algorithms for the shortest path problem, </title> <journal> SIAM J. Comput., </journal> <volume> 24 (1995), </volume> <pages> 494-504. </pages>
Reference-contexts: Our input model is that of a complete graph with random costs, therefore the running time of our algorithm outperforms the O (n 3 ) bound of the Bellman-Ford algorithm. It is also faster than the recent scaling algorithm of Goldberg <ref> [17] </ref>, which takes O (n 2:5 ) or more time under the similarity assumption [1] on dense graphs. To our knowledge, this is the first strongly polynomial algorithm that solves SSSP in o (n 3 ) time for dense networks with arbitrary real-valued costs. <p> Gabow and Tarjan [15] gave a scaling algorithm for the assignment problem that runs in O ( p nm log (nN )) time, where N is the largest absolute value of an edge cost. Recently Goldberg <ref> [17] </ref> proposed a scaling algorithm that finds shortest paths without solving an assignment problem first; this algorithm has a running time of O ( p nm log N ). All of these algorithms detect the existence of a negative-cost cycle.
Reference: [18] <author> D. Goldfarb, J. Hao and S. R. Kai, </author> <title> "A computational comparison of label correcting and simplex algorithms for computing shortest paths", </title> <type> Technical Report, </type> <institution> IEOR Department, Columbia University, </institution> <year> 1986. </year>
Reference-contexts: Modification 2. During pass i only vertices already at length exactly i1 from the source need to have their outgoing edges relaxed. This is an idea that has been used before, see e.g. <ref> [18] </ref>. Consider a vertex v and let j i 1 be the minimum value such that d i1 (v) = d i2 (v) = : : : = d j1 (v), i.e. a vertex that is at length exactly j 1 from the source.
Reference: [19] <author> R. Hassin and E. Zemel, </author> <title> On the shortest paths in graphs with random weights, </title> <journal> Math. Oper. Res., </journal> <volume> 10 (1985), </volume> <pages> 557-564. </pages>
Reference-contexts: Bloniarz [5] achieved an expected running time of O (n 2 log n log fl n) and relaxed Spira's initial assumption that edge costs are drawn independently from any single but arbitrary 3 distribution. He introduced the more general endpoint-independent randomness model. Hassin and Zemel <ref> [19] </ref> considered the case in which the edge costs are uniformly distributed independently and gave an O (n 2 log n) expected time algorithm. Their result extends under some assumptions to independently and identically distributed edge costs.
Reference: [20] <author> D. R. Karger, P. N. Klein and R. E. Tarjan, </author> <title> A randomized linear-time algorithm to find minimum spanning trees, </title> <journal> J. ACM, </journal> <volume> 42 (1995), </volume> <pages> 321-328. </pages>
Reference-contexts: The extent to which randomization can be used for faster algorithms, as was the case with e.g. minimum cut [21] and minimum spanning tree <ref> [20] </ref>, is an open question. The outline of the paper is as follows. In Section 2 we start with a high-level description of the new algorithm. Subsequently we present the randomness model, and give an implementation with fast average case.
Reference: [21] <author> D. R. Karger and C. Stein, </author> <title> A new approach to the minimum cut problem, </title> <journal> J. ACM, </journal> <volume> 43 (1996), </volume> <pages> 601-640. </pages>
Reference-contexts: Recently some research has been done on randomized algorithms that use ideas from matrix multiplication [2, 28], but, for arbitrary cost assignments, only pseudopolynomial algorithms exist. The extent to which randomization can be used for faster algorithms, as was the case with e.g. minimum cut <ref> [21] </ref> and minimum spanning tree [20], is an open question. The outline of the paper is as follows. In Section 2 we start with a high-level description of the new algorithm. Subsequently we present the randomness model, and give an implementation with fast average case.
Reference: [22] <author> R. M. Karp, </author> <title> A characterization of the minimum cycle mean in a digraph, </title> <journal> Discrete Math. </journal> <volume> 23 (1978), </volume> <pages> 309-311. </pages>
Reference-contexts: In addition, we show how ideas from our shortest path algorithm can be used to obtain an O (n 2 log n) expected time implementation of Karp's algorithm <ref> [22] </ref> for the minimum mean cycle problem when the input satisfies the requirements of the endpoint-independent model. In this problem, given a directed network, a cycle is sought with the smallest mean cost, i.e., the ratio of its cost to the number of edges in the cycle. <p> cycle W be defined as the number of vertices in W: The minimum mean cycle problem consists of finding a cycle W with the minimum mean cost, i.e. 11 a cycle W that minimizes the ratio P (i;j)2W c (i; j)=jW j: The currently fastest algorithm is due to Karp <ref> [22] </ref> and finds a minimum mean cycle in O (nm) worst-case time. We are not aware of any average-case results for this problem. <p> (n 2 log n) average-case time pattern for all three. 12 Problem Worst Case Average Case assignment O (n 3 ) [25, 12] O (n 2 log n) [23] SSSP O (n 3 ) [3, 11] O (n 2 log n) [this paper] minimum mean cycle O (n 3 ) <ref> [22] </ref> O (n 2 log n) [this paper] Table 1: Best strongly polynomial time bounds for three related problems. The input model in [23] is defined as a special case of the endpoint-independent one. Worst-case time bounds are reported for dense graphs.
Reference: [23] <author> R. M. Karp, </author> <title> An Algorithm to Solve the M fi N Assignment Problem in Expected Time O(M N log N ), Networks, </title> <booktitle> 10 (1980), </booktitle> <pages> 143-152. </pages>
Reference-contexts: Interestingly, our result yields the same bound for the average-case complexity of the SSSP and the minimum mean cycle problems as the one that is known for the assignment problem. Karp <ref> [23] </ref> gave an O (n 2 log n) expected time algorithm for the assignment problem on an input model very similar to the endpoint-independent one. <p> In addition, our algorithms achieve the O (n 2 log n) time bound with high probability. Putting our work in perspective, we may contrast our results with the already known O (n 2 log n) result for the assignment problem <ref> [23] </ref>. Table 1 provides the best known running times (on dense graphs) for the assignment, SSSP and minimum mean cycle problems, both worst case and average case. <p> are known to be conceptually related, and the pattern of O (n 3 ) worst-case time seems to transfer to an O (n 2 log n) average-case time pattern for all three. 12 Problem Worst Case Average Case assignment O (n 3 ) [25, 12] O (n 2 log n) <ref> [23] </ref> SSSP O (n 3 ) [3, 11] O (n 2 log n) [this paper] minimum mean cycle O (n 3 ) [22] O (n 2 log n) [this paper] Table 1: Best strongly polynomial time bounds for three related problems. The input model in [23] is defined as a special <p> O (n 2 log n) <ref> [23] </ref> SSSP O (n 3 ) [3, 11] O (n 2 log n) [this paper] minimum mean cycle O (n 3 ) [22] O (n 2 log n) [this paper] Table 1: Best strongly polynomial time bounds for three related problems. The input model in [23] is defined as a special case of the endpoint-independent one. Worst-case time bounds are reported for dense graphs. It is interesting to note that a linear time (ignoring log factors) reduction is known to exist from SSSP to the assignment problem [14]. <p> It is interesting to note that a linear time (ignoring log factors) reduction is known to exist from SSSP to the assignment problem [14]. We have been unable to use this reduction in conjunction with Karp's O (n 2 log n) assignment algorithm <ref> [23] </ref> to obtain a SSSP algorithm as fast as ours. The reduction is based on using an assignment algorithm to compute vertex potentials (:) that dominate the edge costs. In other words it must be c (u; v) (u) (v); 8u; v: Karp's algorithm in [23] is of the shortest augmenting <p> 2 log n) assignment algorithm <ref> [23] </ref> to obtain a SSSP algorithm as fast as ours. The reduction is based on using an assignment algorithm to compute vertex potentials (:) that dominate the edge costs. In other words it must be c (u; v) (u) (v); 8u; v: Karp's algorithm in [23] is of the shortest augmenting path type. It starts by performing the standard transformation of adding a big positive constant to the real-valued costs. Thus the potentials it computes do not satisfy the relation above. <p> It starts by performing the standard transformation of adding a big positive constant to the real-valued costs. Thus the potentials it computes do not satisfy the relation above. On the other hand, if the first step of adding the constant is not taken the average-case analysis in <ref> [23] </ref> does not hold. Open problems. We exhibited the first strongly polynomial algorithm in over 30 years that achieves o (n 3 ) running time for SSSP with real-valued costs, although not for the worst case.
Reference: [24] <author> S. G. Kolliopoulos and C. Stein, </author> <title> Finding Real-Valued Single-Source Shortest Paths in o(n 3 ) Expected Time, </title> <booktitle> in "Proc. 5th MPS Integer Programming and Combinatorial Optimization Conference," Lecture Notes in Computer Science, </booktitle> <editor> W. H. Cunningham, S. T. McCormick, M. Queyranne eds., </editor> <volume> Vol. 1084, </volume> <publisher> Springer Verlag, </publisher> <year> 1996, </year> <pages> 94-104. </pages>
Reference-contexts: In Section 4 we explain how the shortest path algorithmic ideas extend to the minimum mean cycle problem. In Section 5 we conclude with a discussion of our results and open questions. This paper is a revised and enhanced version of <ref> [24] </ref>. 2 The Shortest-Path Algorithm In this section we give an algorithm for SSSP with average-case running time O (n 2 log n) on a broad class of networks with random edge costs. We will give the algorithm in two parts.
Reference: [25] <author> H. W. Kuhn, </author> <title> The Hungarian method for the assignment problem, </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> 2 (1955), </volume> <pages> 83-97. </pages>
Reference-contexts: Then Dijkstra's algorithm [10] is applied to the reweighted network. The bottleneck in this approach is the solution of the assignment problem. The first and fastest strongly polynomial-time algorithm for the assignment problem is Kuhn's Hungarian algorithm <ref> [25] </ref>. Implemented with Fibonacci heaps [12], this algorithm runs in O (nm + n 2 log n) time. <p> These three problems are known to be conceptually related, and the pattern of O (n 3 ) worst-case time seems to transfer to an O (n 2 log n) average-case time pattern for all three. 12 Problem Worst Case Average Case assignment O (n 3 ) <ref> [25, 12] </ref> O (n 2 log n) [23] SSSP O (n 3 ) [3, 11] O (n 2 log n) [this paper] minimum mean cycle O (n 3 ) [22] O (n 2 log n) [this paper] Table 1: Best strongly polynomial time bounds for three related problems.
Reference: [26] <author> K. Mehlhorn and V. Priebe, </author> <title> On the all-pairs shortest path algorithm of Moffat and Takaoka, </title> <booktitle> Random Structures and Algorithms 10 (1997), </booktitle> <pages> 205-220. </pages>
Reference-contexts: Mehlhorn and Priebe <ref> [26] </ref> corrected an oversight in the analysis given by Moffat and Takaoka and provided a slightly modified version of the algorithm that runs in O (n 2 log n) time with high probability. <p> Using standard binary heaps, it can be shown that the original analysis of the algorithm by Moffat and Takaoka together with a correction by Mehlhorn and Priebe <ref> [26] </ref> yields the following lemma. Lemma 2 ([27],[26]) Let G be a network of n vertices with nonnegative edge costs drawn from an endpoint-independent distribution and let S be a set of vertices of G whose shortest path distances have 8 been computed. <p> Then MT (G; S) solves SSSP on G in O (n log n) expected time, given that the edge lists are presorted by cost. Proof. See Theorem 1 in [27] and <ref> [26] </ref>. We note that, in general, the nonnegativity condition is necessary for correctness, as it is in Dijkstra's algorithm. However, we will now show that for a single-source, two-level network with real costs, such as G " , MT computes correctly shortest paths.
Reference: [27] <author> A. Moffat and T. Takaoka, </author> <title> An all pairs shortest path algorithm with expected time O(n 2 log n), </title> <journal> SIAM J. Comput., </journal> <volume> 16 (1987), </volume> <pages> 1023-1031. </pages>
Reference-contexts: This model can be roughly defined as follows: the distribution according to which the cost of directed edge (u; v) is chosen does not depend on the head v: Bloniarz's model extended previous work and is arguably the most general model studied in the shortest path literature (see, for example, <ref> [5, 13, 27, 30, 29] </ref>). Recently Walley and Tan [31] defined a random cost model that is not comparable to Bloniarz's. The endpoint-independent model includes the common case of all edge costs being drawn independently from the same distribution. <p> Our method uses ideas from Bellman-Ford and from an algorithm of Moffat and Takaoka <ref> [27] </ref> originally intended for nonnegative-cost assignments, and turns out to be quite simple, drawing on the simplicity of these two algorithms. <p> O (n 2 log n) expected time algorithm for the case in which edge costs are identically and independently distributed with distribution function F; where F (0) = 0 and F is differentiable at 0: The fastest algorithm so far under the endpoint-independent model is due to Moffat and Takaoka <ref> [27] </ref> and runs in O (n 2 log n) expected time. Mehlhorn and Priebe [26] corrected an oversight in the analysis given by Moffat and Takaoka and provided a slightly modified version of the algorithm that runs in O (n 2 log n) time with high probability. <p> In this section we define the class of probability measures for which our analysis holds and then present an algorithm by Moffat and Takaoka <ref> [27] </ref> and show that it can be used to efficiently find shortest paths in G " : We define first the randomness model used for the analysis. The definition follows [5] except that we allow negative costs as well. <p> Then MT (G; S) solves SSSP on G in O (n log n) expected time, given that the edge lists are presorted by cost. Proof. See Theorem 1 in <ref> [27] </ref> and [26]. We note that, in general, the nonnegativity condition is necessary for correctness, as it is in Dijkstra's algorithm. However, we will now show that for a single-source, two-level network with real costs, such as G " , MT computes correctly shortest paths. <p> Thus it will compute correctly shortest paths. For the running time, it suffices to notice that the analysis in Theorem 1 of <ref> [27] </ref> relies on the following fact. In an endpoint-independent distribution when jSj = j each candidate leads to each of the n j unlabeled vertices with equal probability. This fact is not harmed by the negativity of a candidate edge.
Reference: [28] <author> R. Seidel, </author> <title> On the all-pairs-shortest-path problem, </title> <booktitle> in "Proc. 24th ACM Symp. on Theory of Computing," </booktitle> <year> 1992, </year> <pages> 745-749. </pages>
Reference-contexts: They also showed that under weak assumptions (n log n) time is required with high probability for solving SSSP on networks with the endpoint-independent distribution. Recently some research has been done on randomized algorithms that use ideas from matrix multiplication <ref> [2, 28] </ref>, but, for arbitrary cost assignments, only pseudopolynomial algorithms exist. The extent to which randomization can be used for faster algorithms, as was the case with e.g. minimum cut [21] and minimum spanning tree [20], is an open question. The outline of the paper is as follows.
Reference: [29] <author> P. M. Spira, </author> <title> A new algorithm for finding all shortest paths in a graph of positive arcs in average time O(n 2 log 2 n), </title> <journal> SIAM J. Comput., </journal> <volume> 2 (1973), </volume> <pages> 28-32. </pages>
Reference-contexts: This model can be roughly defined as follows: the distribution according to which the cost of directed edge (u; v) is chosen does not depend on the head v: Bloniarz's model extended previous work and is arguably the most general model studied in the shortest path literature (see, for example, <ref> [5, 13, 27, 30, 29] </ref>). Recently Walley and Tan [31] defined a random cost model that is not comparable to Bloniarz's. The endpoint-independent model includes the common case of all edge costs being drawn independently from the same distribution. <p> A first APSP algorithm with an expected running time of O (n 2 log 2 n) on networks with independently and identically distributed edge costs was presented in a classical paper by Spira <ref> [29] </ref> (see [6] for minor corrections). This result was later refined [4] to take into account nonunique edge costs and improved in [30], where an O (n 2 log n log log n) expected time algorithm was given. <p> Several natural edge-cost assignments are endpoint independent, including the one used by Spira <ref> [29] </ref> in which edge costs are independently, identically distributed random variables. <p> Based on the policy selection, we obtain Spira's <ref> [29] </ref> and Dantzig's [8] methods respectively. The Moffat-Takaoka routine (MT) uses Dantzig's algorithm up to a critical point with respect to the size of S and then switches to Spira's.
Reference: [30] <author> T. Takaoka and A. M. Moffat, </author> <title> An O(n 2 log n log log n) expected time algorithm for the all shortest distance problem, </title> <booktitle> in "Mathematical Foundations of Computer Science, Lecture Notes in Computer Science" (P. </booktitle> <editor> Dembinski, Ed.), pp. </editor> <volume> 643-655, Vol. 88, </volume> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1980. </year> <month> 15 </month>
Reference-contexts: This model can be roughly defined as follows: the distribution according to which the cost of directed edge (u; v) is chosen does not depend on the head v: Bloniarz's model extended previous work and is arguably the most general model studied in the shortest path literature (see, for example, <ref> [5, 13, 27, 30, 29] </ref>). Recently Walley and Tan [31] defined a random cost model that is not comparable to Bloniarz's. The endpoint-independent model includes the common case of all edge costs being drawn independently from the same distribution. <p> This result was later refined [4] to take into account nonunique edge costs and improved in <ref> [30] </ref>, where an O (n 2 log n log log n) expected time algorithm was given. Bloniarz [5] achieved an expected running time of O (n 2 log n log fl n) and relaxed Spira's initial assumption that edge costs are drawn independently from any single but arbitrary 3 distribution.
Reference: [31] <author> S. K. Walley and H. H. Tan, </author> <title> Shortest paths in random weighted graphs, </title> <booktitle> in " Proc. 1st Int. Conf. on Computing and Combinatorics," </booktitle> <year> 1995, </year> <pages> 213-222. 16 </pages>
Reference-contexts: Recently Walley and Tan <ref> [31] </ref> defined a random cost model that is not comparable to Bloniarz's. The endpoint-independent model includes the common case of all edge costs being drawn independently from the same distribution.
References-found: 31

