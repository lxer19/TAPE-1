URL: http://www.cs.yale.edu/~kao-ming-yang/kao_97_isaac_cavity_matching.ps
Refering-URL: http://www.cs.yale.edu/~kao-ming-yang/papers.html
Root-URL: http://www.cs.yale.edu
Title: All-Cavity Maximum Matchings  
Author: Ming-Yang Kao Tak Wah Lam Wing Kin Sung Hing Fung Ting 
Keyword: shortest paths and all-cavity maximum matchings.  
Abstract: Let G = (X; Y; E) be a bipartite graph with integer weights on the edges. Let n; m, and N denote the vertex count, the edge count, and an upper bound on the absolute values of edge weights of G, respectively. For a vertex u in G, let G u denote the graph formed by deleting u from G. The all-cavity maximum matching problem asks for a maximum weight matching in G u for all u in G. This problem finds applications in optimal tree algorithms for computational biology. We show that the problem is solvable in O( nm log(nN)) time, matching the currently best time complexity for merely computing a single maximum weight matching in G. We also give an algorithm for a generalization of the problem where both a vertex from X and one from Y can be deleted. The running time is O(n 2 log n + nm). Our algorithms are based on novel linear-time reductions among problems of computing p
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. E. Bellman. </author> <title> On a routing problem. </title> <journal> Quarterly of Applied Mathematics, </journal> <volume> 16 </volume> <pages> 87-90, </pages> <year> 1958. </year>
Reference-contexts: Our improvement for the all-cavity matching problem is attained through a transformation to the single-source shortest paths problem for directed graphs with positive and negative integral edge weights <ref> [1, 3, 6, 8, 9, 11] </ref>. We also prove that the single-source shortest paths problem can be reduced in linear time to the all-cavity maximum matching problem. Therefore, a better algorithm for the all-cavity maximum matching problem yields a better algorithm for the single-source shortest paths problem as well.
Reference: [2] <author> D. P. Bertsekas. </author> <title> The auction algorithm: A distributed relaxation method for the assignment problem. </title> <type> LIDS Report P-1653, </type> <institution> Massachusetts Institute of Technology, </institution> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference-contexts: Also, for any vertices u 2 X and v 2 Y , define G u;v to be the subgraph constructed by removing u and v from G. The problem of finding a maximum weight matching in a bipartite graph, also known as the assignment problem, has a rich history <ref> [2, 7, 8, 9, 12, 13] </ref>. At present, the algorithm given by Gabow and Tarjan [9] is the fastest; it runs in O ( p nm log (nN )) time.
Reference: [3] <author> T. H. Cormen, C. L. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: Our improvement for the all-cavity matching problem is attained through a transformation to the single-source shortest paths problem for directed graphs with positive and negative integral edge weights <ref> [1, 3, 6, 8, 9, 11] </ref>. We also prove that the single-source shortest paths problem can be reduced in linear time to the all-cavity maximum matching problem. Therefore, a better algorithm for the all-cavity maximum matching problem yields a better algorithm for the single-source shortest paths problem as well.
Reference: [4] <author> N. Deo and C. Pang. </author> <title> Shortest-path algorithms: Taxonomy and annotation. </title> <journal> Networks, </journal> <volume> 14 </volume> <pages> 275-323, </pages> <year> 1984. </year>
Reference-contexts: A straightforward application of our algorithm for the all-cavity maximum matching problem can solve the two-vertex version in O (n 1:5 m log (nN )) time. Based on a different approach, we transform the two-vertex all-cavity maximum matching problem to the all-pairs shortest paths problem <ref> [4, 5, 7, 14, 16] </ref> and improve the time complexity to 2 O (n 2 log n + nm). We also prove that conversely the all-pairs shortest paths problem can be reduced in linear time to the two-vertex all-cavity maximum matching problem. <p> The main technique is a transformation to the all-pairs longest paths problem of a directed graph. Note that the all-pairs longest paths problem can be reduced to the all-pairs shortest paths problem <ref> [4, 5, 7, 16, 14] </ref> by negating the weight of the edges. The latter problem can be solved in O (n 2 log n + nm) time [7].
Reference: [5] <author> R. W. Floyd. </author> <title> Algorithm 97: Shortest path. </title> <journal> Communications of the ACM, </journal> <volume> 5:345, </volume> <year> 1962. </year>
Reference-contexts: A straightforward application of our algorithm for the all-cavity maximum matching problem can solve the two-vertex version in O (n 1:5 m log (nN )) time. Based on a different approach, we transform the two-vertex all-cavity maximum matching problem to the all-pairs shortest paths problem <ref> [4, 5, 7, 14, 16] </ref> and improve the time complexity to 2 O (n 2 log n + nm). We also prove that conversely the all-pairs shortest paths problem can be reduced in linear time to the two-vertex all-cavity maximum matching problem. <p> The main technique is a transformation to the all-pairs longest paths problem of a directed graph. Note that the all-pairs longest paths problem can be reduced to the all-pairs shortest paths problem <ref> [4, 5, 7, 16, 14] </ref> by negating the weight of the edges. The latter problem can be solved in O (n 2 log n + nm) time [7].
Reference: [6] <author> L. R. Ford and D. R. Fulkerson. </author> <title> Flows in Networks. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1962. </year>
Reference-contexts: Our improvement for the all-cavity matching problem is attained through a transformation to the single-source shortest paths problem for directed graphs with positive and negative integral edge weights <ref> [1, 3, 6, 8, 9, 11] </ref>. We also prove that the single-source shortest paths problem can be reduced in linear time to the all-cavity maximum matching problem. Therefore, a better algorithm for the all-cavity maximum matching problem yields a better algorithm for the single-source shortest paths problem as well.
Reference: [7] <author> M. L. Fredman and R. E. Tarjan. </author> <title> Fibonacci heaps and their uses in improved network optimization algorithms. </title> <journal> Journal of the ACM, </journal> <volume> 34 </volume> <pages> 596-615, </pages> <year> 1987. </year>
Reference-contexts: Also, for any vertices u 2 X and v 2 Y , define G u;v to be the subgraph constructed by removing u and v from G. The problem of finding a maximum weight matching in a bipartite graph, also known as the assignment problem, has a rich history <ref> [2, 7, 8, 9, 12, 13] </ref>. At present, the algorithm given by Gabow and Tarjan [9] is the fastest; it runs in O ( p nm log (nN )) time. <p> A straightforward application of our algorithm for the all-cavity maximum matching problem can solve the two-vertex version in O (n 1:5 m log (nN )) time. Based on a different approach, we transform the two-vertex all-cavity maximum matching problem to the all-pairs shortest paths problem <ref> [4, 5, 7, 14, 16] </ref> and improve the time complexity to 2 O (n 2 log n + nm). We also prove that conversely the all-pairs shortest paths problem can be reduced in linear time to the two-vertex all-cavity maximum matching problem. <p> Step 3 takes O (n) time. Thus, the above procedure runs in O ( nm log (nN )) time. In some applications where it is desirable to have the time complexity independent of edge weights, we can instead use the O (n 2 log n + nm)-time algorithms <ref> [7] </ref> to compute M and solve the single-source longest-paths problem for D. <p> The main technique is a transformation to the all-pairs longest paths problem of a directed graph. Note that the all-pairs longest paths problem can be reduced to the all-pairs shortest paths problem <ref> [4, 5, 7, 16, 14] </ref> by negating the weight of the edges. The latter problem can be solved in O (n 2 log n + nm) time [7]. <p> Note that the all-pairs longest paths problem can be reduced to the all-pairs shortest paths problem [4, 5, 7, 16, 14] by negating the weight of the edges. The latter problem can be solved in O (n 2 log n + nm) time <ref> [7] </ref>. We first show that after computing a maximum weight matching M of G and solving the all-cavity maximum matching problem for G, the value of mwm (G u;v ) can be determined immediately if one of u and v is not matched by M. <p> Construct the weighted directed graph B and solve the all-pairs longest paths problem for B. This step takes O (n 2 log n+nm) time if we use the algorithm of Fredman and Tarjan <ref> [7] </ref>. 3. For every u 2 X and v 2 Y , if both u and y are matched by M , we apply Lemma 15 to compute mwm (G u;v ); otherwise, we apply Lemma 10 to compute mwm (G u;v ).
Reference: [8] <author> H. N. Gabow. </author> <title> Scaling algorithms for network problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 31 </volume> <pages> 148-168, </pages> <year> 1985. </year>
Reference-contexts: Also, for any vertices u 2 X and v 2 Y , define G u;v to be the subgraph constructed by removing u and v from G. The problem of finding a maximum weight matching in a bipartite graph, also known as the assignment problem, has a rich history <ref> [2, 7, 8, 9, 12, 13] </ref>. At present, the algorithm given by Gabow and Tarjan [9] is the fastest; it runs in O ( p nm log (nN )) time. <p> Our improvement for the all-cavity matching problem is attained through a transformation to the single-source shortest paths problem for directed graphs with positive and negative integral edge weights <ref> [1, 3, 6, 8, 9, 11] </ref>. We also prove that the single-source shortest paths problem can be reduced in linear time to the all-cavity maximum matching problem. Therefore, a better algorithm for the all-cavity maximum matching problem yields a better algorithm for the single-source shortest paths problem as well.
Reference: [9] <author> H. N. Gabow and R. E. Tarjan. </author> <title> Faster scaling algorithms for network problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18 </volume> <pages> 1013-1036, </pages> <year> 1989. </year>
Reference-contexts: Also, for any vertices u 2 X and v 2 Y , define G u;v to be the subgraph constructed by removing u and v from G. The problem of finding a maximum weight matching in a bipartite graph, also known as the assignment problem, has a rich history <ref> [2, 7, 8, 9, 12, 13] </ref>. At present, the algorithm given by Gabow and Tarjan [9] is the fastest; it runs in O ( p nm log (nN )) time. <p> The problem of finding a maximum weight matching in a bipartite graph, also known as the assignment problem, has a rich history [2, 7, 8, 9, 12, 13]. At present, the algorithm given by Gabow and Tarjan <ref> [9] </ref> is the fastest; it runs in O ( p nm log (nN )) time. In this paper, we study the following matching problem. * The all-cavity maximum matching problem asks for the values of mwm (G u ) for all vertices u in G. <p> To solve the all-cavity maximum matching problem, a naive approach is to compute mwm (G u ) separately for every vertex u using Gabow and Tarjan's algorithm <ref> [9] </ref>. This approach takes O (n 1:5 m log (nN )) time. A main finding in this paper is that the matchings fl Department of Computer Science, Duke University, Durham, NC 27708, kao@cs.duke.edu. <p> This paper focuses on bipartite graphs. For these graphs, a maximum weight matching can be found more efficiently than for the general graphs, using only O ( p time <ref> [9] </ref>. We further show that the all-cavity maximum matching problem, and hence the critical matching problem, can be solved using the time complexity. <p> Our improvement for the all-cavity matching problem is attained through a transformation to the single-source shortest paths problem for directed graphs with positive and negative integral edge weights <ref> [1, 3, 6, 8, 9, 11] </ref>. We also prove that the single-source shortest paths problem can be reduced in linear time to the all-cavity maximum matching problem. Therefore, a better algorithm for the all-cavity maximum matching problem yields a better algorithm for the single-source shortest paths problem as well.
Reference: [10] <author> H. N. Gabow and R. E. Tarjan. </author> <title> Faster scaling algorithms for general graph-matching problems. </title> <journal> Journal of the ACM, </journal> <volume> 38 </volume> <pages> 815-853, </pages> <year> 1991. </year>
Reference-contexts: Roughly speaking, the all-cavity maximum matching problem models the different ways the subtrees of the two input trees are compared. In the context of general graphs, Gabow and Tarjan <ref> [10] </ref> have studied a related problem called the minimum critical matching problem. <p> The critical matching problem can be solved in O ( q nff (m; n) log nm log (nN )) time, also matching the currently best time complexity for merely computing a single maximum weight matching in a general graph <ref> [10] </ref>. It is easy to prove that the minimum critical matching problem can be reduced to the all-cavity matching problem extended to general graphs. This paper focuses on bipartite graphs.
Reference: [11] <author> A. V. Goldberg. </author> <title> Scaling algorithms for the shortest paths problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 24 </volume> <pages> 494-504, </pages> <year> 1995. </year>
Reference-contexts: Our improvement for the all-cavity matching problem is attained through a transformation to the single-source shortest paths problem for directed graphs with positive and negative integral edge weights <ref> [1, 3, 6, 8, 9, 11] </ref>. We also prove that the single-source shortest paths problem can be reduced in linear time to the all-cavity maximum matching problem. Therefore, a better algorithm for the all-cavity maximum matching problem yields a better algorithm for the single-source shortest paths problem as well. <p> Step 1 takes O ( p nm log (nN )) time. For Step 2, the construction takes O (n + m) time, and the single-destination longest paths problem can be solved in O ( p nm log N ) time using Goldberg's algorithm <ref> [11] </ref>. Step 3 takes O (n) time. Thus, the above procedure runs in O ( nm log (nN )) time.
Reference: [12] <author> A. V. Goldberg and R. E. Tarjan. </author> <title> Solving minimum-cost flow problems by successive approximation. </title> <booktitle> In Proceedings of the 19th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 7-18, </pages> <year> 1987. </year>
Reference-contexts: Also, for any vertices u 2 X and v 2 Y , define G u;v to be the subgraph constructed by removing u and v from G. The problem of finding a maximum weight matching in a bipartite graph, also known as the assignment problem, has a rich history <ref> [2, 7, 8, 9, 12, 13] </ref>. At present, the algorithm given by Gabow and Tarjan [9] is the fastest; it runs in O ( p nm log (nN )) time.
Reference: [13] <author> J. E. Hopcroft and R. M. Karp. </author> <title> An n 5=2 algorithm for maximum matching in bipartite graphs. </title> <journal> SIAM Journal on Computing, </journal> <volume> 2 </volume> <pages> 225-231, </pages> <year> 1973. </year>
Reference-contexts: Also, for any vertices u 2 X and v 2 Y , define G u;v to be the subgraph constructed by removing u and v from G. The problem of finding a maximum weight matching in a bipartite graph, also known as the assignment problem, has a rich history <ref> [2, 7, 8, 9, 12, 13] </ref>. At present, the algorithm given by Gabow and Tarjan [9] is the fastest; it runs in O ( p nm log (nN )) time.
Reference: [14] <author> D. B. Johnson. </author> <title> Efficient algorithms for shortest paths in sparse networks. </title> <journal> Journal of the ACM, </journal> <volume> 24 </volume> <pages> 1-13, </pages> <year> 1977. </year>
Reference-contexts: A straightforward application of our algorithm for the all-cavity maximum matching problem can solve the two-vertex version in O (n 1:5 m log (nN )) time. Based on a different approach, we transform the two-vertex all-cavity maximum matching problem to the all-pairs shortest paths problem <ref> [4, 5, 7, 14, 16] </ref> and improve the time complexity to 2 O (n 2 log n + nm). We also prove that conversely the all-pairs shortest paths problem can be reduced in linear time to the two-vertex all-cavity maximum matching problem. <p> The main technique is a transformation to the all-pairs longest paths problem of a directed graph. Note that the all-pairs longest paths problem can be reduced to the all-pairs shortest paths problem <ref> [4, 5, 7, 16, 14] </ref> by negating the weight of the edges. The latter problem can be solved in O (n 2 log n + nm) time [7].
Reference: [15] <author> M. Y. Kao, T. W. Lam, T. M. Przytycka, W. K. Sung, and H. F. Ting. </author> <title> General techniques for comparing unrooted evolutionary trees. </title> <booktitle> In Proceedings of the 29th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 54-65, </pages> <year> 1997. </year>
Reference-contexts: Apart from theoretical interest, the all-cavity maximum matching problem has an application in algorithms for comparing evolutionary trees. It is actually a bottleneck in the currently best algorithm for finding a maximum agreement subtree of two unrooted evolutionary trees <ref> [15] </ref>. Roughly speaking, the all-cavity maximum matching problem models the different ways the subtrees of the two input trees are compared. In the context of general graphs, Gabow and Tarjan [10] have studied a related problem called the minimum critical matching problem.
Reference: [16] <author> D. R. Karger, D. Koller, and S. J. Phillips. </author> <title> Finding the hidden path: Time bounds for all-pairs shortest paths. </title> <journal> SIAM Journal on Computing, </journal> <volume> 22 </volume> <pages> 1199-1217, </pages> <year> 1993. </year> <month> 12 </month>
Reference-contexts: A straightforward application of our algorithm for the all-cavity maximum matching problem can solve the two-vertex version in O (n 1:5 m log (nN )) time. Based on a different approach, we transform the two-vertex all-cavity maximum matching problem to the all-pairs shortest paths problem <ref> [4, 5, 7, 14, 16] </ref> and improve the time complexity to 2 O (n 2 log n + nm). We also prove that conversely the all-pairs shortest paths problem can be reduced in linear time to the two-vertex all-cavity maximum matching problem. <p> The main technique is a transformation to the all-pairs longest paths problem of a directed graph. Note that the all-pairs longest paths problem can be reduced to the all-pairs shortest paths problem <ref> [4, 5, 7, 16, 14] </ref> by negating the weight of the edges. The latter problem can be solved in O (n 2 log n + nm) time [7].
References-found: 16

