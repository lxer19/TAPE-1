URL: http://http.cs.berkeley.edu/~asah/papers/other/to-read/houtsma.de93.accepted.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~asah/papers/other/to-read/
Root-URL: http://www.cs.berkeley.edu
Title: Data fragmentation for parallel transitive closure strategies effective strategies as just mentioned have been developed,
Author: Maurice A.W. Houtsma Peter M.G. Apers Gideon L.V. Schipper 
Note: Now that  
Address: P.O. Box 217, 7500 AE Enschede, the Netherlands  
Affiliation: University of Twente,  
Abstract: A topic that is currently inspiring a lot of research is parallel (distributed) computation of transitive closure queries. In [10] the disconnection set approach has been introduced as an effective strategy for such a computation. It involves reformulating a transitive closure query on a relation into a number of transitive closure queries on smaller fragments; these queries can then execute independently on the fragments, without need for communication and without computing the same tuples at more than one processor. We discuss the issues that influence data fragmentation. We present a number of algorithms, each focusing on one of the important issues. We discuss the pros and cons of the algorithms, and we give some results of applying the algorithms to different types of graphs. This last aspect shows to what respect the algorithms indeed conform to the goals we set out. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Agrawal, R. </author> <title> `Alpha: an extension of relational algebra to express a class of recursive queries,' </title> <journal> in IEEE Transactions on Software Engineering, </journal> <volume> Vol. 14, No. 7, </volume> <month> July </month> <year> 1988, </year> <pages> pp. 879-885. </pages>
Reference-contexts: And in a database storing information about parts, one can express bill-of-material questions. This functionality has been proposed in the context of logical query languages [6, 17] and in the context of the relational algebra <ref> [1, 13] </ref>.
Reference: [2] <author> Agrawal, R. and Jagadish, H.V. </author> <title> `Efficient search in very large databases,' </title> <booktitle> in Proc. 14th Int. Conf. on Very Large Databases, </booktitle> <address> Los Angeles, </address> <year> 1988, </year> <pages> pp. 407-418. </pages>
Reference-contexts: Starting from these centers the fragments are gradually constructed (a first sketch of this approach was given in [12], and a similar idea was, for different purposes, pursued in <ref> [2] </ref>).
Reference: [3] <author> Agrawal, R. and Jagadish, H.V. </author> <title> "Multiprocessor transitive closure algorithms," </title> <booktitle> in Proc. Int. Symp. on Databases in Parallel and Distributed Systems, </booktitle> <address> Austin, Texas, </address> <month> Dec. 5-7 </month> <year> 1988, </year> <pages> pp. 56-66. </pages>
Reference-contexts: Efficient evaluation of the transitive closure is still a problem. Therefore, much research is currently taking place into its parallel computation <ref> [3, 8, 12, 15, 19, 21, 22] </ref>. For a good overview of parallel strategies for computing transitive closure queries, we refer to [5]. In [10, 11] we introduced the disconnection set approach as a way of attacking this efficiency problem in a parallel environment.
Reference: [4] <editor> America, P. (Ed.), </editor> <booktitle> Parallel Database Systems, Proc. of the PRISMA Workshop, </booktitle> <publisher> LNCS 503, Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: It introduces the concept of a `high-speed network'; this is a separate fragment that mandatorily has to be traversed when going to a non-adjacent fragment. Currently, we are undertaking experiments [14] on the PRISMA multi-processor database machine <ref> [4, 20] </ref>. These experiments will show which of the characteristics identified here, is of main importance when striving for an optimal parallel evaluation of transitive closure queries. This will show which of the algorithms we developed is most useful, and why.
Reference: [5] <author> Ceri, S., Cacace, F., and Houtsma, M.A.W. </author> <title> "An overview of parallel strategies for transitive closure on algebraic machines," </title> <booktitle> in [4]. </booktitle>
Reference-contexts: Efficient evaluation of the transitive closure is still a problem. Therefore, much research is currently taking place into its parallel computation [3, 8, 12, 15, 19, 21, 22]. For a good overview of parallel strategies for computing transitive closure queries, we refer to <ref> [5] </ref>. In [10, 11] we introduced the disconnection set approach as a way of attacking this efficiency problem in a parallel environment. The disconnection set approach is based on the divide-and-conquer principle. The basic idea is to split the relation that represents a connection network into a number of fragments.
Reference: [6] <author> Ceri S., G. Gottlob and L. </author> <title> Tanca Logic Programming and Databases, </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: And in a database storing information about parts, one can express bill-of-material questions. This functionality has been proposed in the context of logical query languages <ref> [6, 17] </ref> and in the context of the relational algebra [1, 13].
Reference: [7] <author> W.T. McCormick, P.J. Schweitzer, T. </author> <title> White "Problem decomposition and data reorganization by a clustering technique," </title> <journal> in Oper. Res. </journal> <volume> 20, 5 (Sept.-Oct. </volume> <year> 1972), </year> <pages> pp. 993-1009. </pages>
Reference-contexts: The algorithm is a variant of the well-known Bond-energy algorithm <ref> [7] </ref>. It uses an adjacency-matrix to denote the graph being fragmented. Columns of this matrix are reordered in such a way that nodes that are closely related are put closely together. In this way, clusters are formed along the diagonal of the matrix.
Reference: [8] <author> Ganguly S., Silberschatz A., and Tsur S. </author> <title> "A framework for the parallel processing of Datalog queries," </title> <booktitle> Proc. ACM-Sigmod Conference, </booktitle> <address> Atlantic City, USA, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Efficient evaluation of the transitive closure is still a problem. Therefore, much research is currently taking place into its parallel computation <ref> [3, 8, 12, 15, 19, 21, 22] </ref>. For a good overview of parallel strategies for computing transitive closure queries, we refer to [5]. In [10, 11] we introduced the disconnection set approach as a way of attacking this efficiency problem in a parallel environment.
Reference: [9] <author> C. </author> <title> Hoede "A new status score for actors in a social network," </title> <type> Technical report MATH-243, </type> <institution> University of Twente, </institution> <year> 1979. </year>
Reference-contexts: This formula is a variation on the status score <ref> [9] </ref>. The number of centers that is chosen may depend on factors such as the number of processors available, or on the application. Once it has been decided which nodes are centers, the algorithm iterates over them and repeatedly adds edges to the fragments.
Reference: [10] <author> Houtsma M.A.W., Apers P.M.G., and Ceri S. </author> <title> "Distributed transitive closure computation: the disconnection set approach," </title> <booktitle> Proc. 16th Int. Conf. on Very Large Data Bases, </booktitle> <address> Brisbane, </address> <month> Aug. </month> <year> 1990, </year> <pages> pp. 335-346. </pages>
Reference-contexts: Efficient evaluation of the transitive closure is still a problem. Therefore, much research is currently taking place into its parallel computation [3, 8, 12, 15, 19, 21, 22]. For a good overview of parallel strategies for computing transitive closure queries, we refer to [5]. In <ref> [10, 11] </ref> we introduced the disconnection set approach as a way of attacking this efficiency problem in a parallel environment. The disconnection set approach is based on the divide-and-conquer principle. The basic idea is to split the relation that represents a connection network into a number of fragments. <p> In Sec. 4 we give test results of the developed algorithms on different types of graphs. Finally, in Sec. 5 we give conclusions and discuss future research. 2 Disconnection set approach and data fragmentation In this section, we will shortly introduce the disconnection set approach <ref> [10, 11] </ref>. Then we will discuss the characteristics of the disconnection set approach that influence fragmentation design. There are several options for fragmentation strategies, depending on the issue that is considered to be most relevant. <p> However, for many practical problems (such as the Eu-ropean railway network itself) such property does not hold. In <ref> [10] </ref> it is shown that, if the fragmentation is loosely connected, the shortest path connecting any two cities is found by involving in the computation only the computers along the chain of fragments connecting them 3 . <p> In <ref> [10, 11] </ref> we introduced a strategy for parallel computation of transitive closure queries, called the disconnection set approach, but we did not yet discuss data fragmentation algorithms. Here we developed and tested the latter.
Reference: [11] <author> Houtsma, M.A.W., Apers, P.M.G., and Ceri, S. </author> <title> "Complex transitive closure queries on a fragmented graph," </title> <booktitle> Proc. 3rd Int. Conf. on Database Theory, Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: Efficient evaluation of the transitive closure is still a problem. Therefore, much research is currently taking place into its parallel computation [3, 8, 12, 15, 19, 21, 22]. For a good overview of parallel strategies for computing transitive closure queries, we refer to [5]. In <ref> [10, 11] </ref> we introduced the disconnection set approach as a way of attacking this efficiency problem in a parallel environment. The disconnection set approach is based on the divide-and-conquer principle. The basic idea is to split the relation that represents a connection network into a number of fragments. <p> In Sec. 4 we give test results of the developed algorithms on different types of graphs. Finally, in Sec. 5 we give conclusions and discuss future research. 2 Disconnection set approach and data fragmentation In this section, we will shortly introduce the disconnection set approach <ref> [10, 11] </ref>. Then we will discuss the characteristics of the disconnection set approach that influence fragmentation design. There are several options for fragmentation strategies, depending on the issue that is considered to be most relevant. <p> In <ref> [10, 11] </ref> we introduced a strategy for parallel computation of transitive closure queries, called the disconnection set approach, but we did not yet discuss data fragmentation algorithms. Here we developed and tested the latter.
Reference: [12] <author> Houtsma M.A.W., Cacace F., and Ceri S. </author> <title> "Parallel hierarchical evaluation of transitive closure queries," </title> <booktitle> in Proc. 1st Int. Conf. on Parallel and Distributed Information Systems, </booktitle> <address> Miami Beach, </address> <month> Dec. </month> <year> 1991, </year> <pages> pp. 130-137. </pages>
Reference-contexts: Efficient evaluation of the transitive closure is still a problem. Therefore, much research is currently taking place into its parallel computation <ref> [3, 8, 12, 15, 19, 21, 22] </ref>. For a good overview of parallel strategies for computing transitive closure queries, we refer to [5]. In [10, 11] we introduced the disconnection set approach as a way of attacking this efficiency problem in a parallel environment. <p> 3 Note that the shortest path might include nodes outside the chain, however, their contribution is precomputed in the complementary information. 4 If the fragmentation graph becomes very complex and contains many routes from one fragment to another, a technique called Parallel Hierarchical Evaluation can be used to avoid problems <ref> [12] </ref> sive query independently. The number of iterations required before reaching a fixpoint is given by the maximum diameter of the graph; if the graph is fragmented in n fragments G i of equal size, the diameter of each subgraph is highly reduced. <p> These centers should be thought of as some kind of gravity points in the graph, very much like spiders in a web. Starting from these centers the fragments are gradually constructed (a first sketch of this approach was given in <ref> [12] </ref>, and a similar idea was, for different purposes, pursued in [2]). <p> If the complexity of the fragmentation graph (describing the way fragments are connected) becomes very high, finding the paths in it that connect the fragment containing the start node with the fragment containing the end node might become computation intensive. In <ref> [12] </ref> we have described an extension of the disconnection set, called parallel hierarchical evaluation, to cope with that problem. It introduces the concept of a `high-speed network'; this is a separate fragment that mandatorily has to be traversed when going to a non-adjacent fragment.
Reference: [13] <author> Houtsma, M.A.W. and Apers, P.M.G. </author> <title> "Algebraic optimization of recursive queries," </title> <journal> in Data and Knowledge Engineering, </journal> <volume> 7(4), </volume> <month> March </month> <year> 1992. </year>
Reference-contexts: And in a database storing information about parts, one can express bill-of-material questions. This functionality has been proposed in the context of logical query languages [6, 17] and in the context of the relational algebra <ref> [1, 13] </ref>.
Reference: [14] <author> Houtsma, M.A.W., Wilschut, A.N., and Flokstra, J. </author> <title> "Implementation and performance evaluation of a parallel transitive closure algorithm on PRISMA/DB", </title> <type> Technical report INF92-45, </type> <institution> University of Twente, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: It introduces the concept of a `high-speed network'; this is a separate fragment that mandatorily has to be traversed when going to a non-adjacent fragment. Currently, we are undertaking experiments <ref> [14] </ref> on the PRISMA multi-processor database machine [4, 20]. These experiments will show which of the characteristics identified here, is of main importance when striving for an optimal parallel evaluation of transitive closure queries. This will show which of the algorithms we developed is most useful, and why.
Reference: [15] <author> Hua, K.A. and Hannenhalli, S.S. </author> <title> "Parallel transitive closure computations using topological sort," </title> <booktitle> in Proc. 1st Int. Conf. on Parallel and Distributed Information Systems, </booktitle> <address> Miami Beach, </address> <month> Dec. </month> <year> 1991, </year> <pages> pp. 122-129. </pages>
Reference-contexts: Efficient evaluation of the transitive closure is still a problem. Therefore, much research is currently taking place into its parallel computation <ref> [3, 8, 12, 15, 19, 21, 22] </ref>. For a good overview of parallel strategies for computing transitive closure queries, we refer to [5]. In [10, 11] we introduced the disconnection set approach as a way of attacking this efficiency problem in a parallel environment.
Reference: [16] <author> Ioannidis, Y. and Ramakrishnan, R. </author> <title> `Efficient transitive closure algorithms,' </title> <booktitle> in Proc. 14th Int. Conf. on Very Large Databases, </booktitle> <address> Los Angeles, </address> <year> 1988, </year> <pages> pp. 382-394. </pages>
Reference-contexts: Independent of the context, at the implementation level one needs an algorithm to efficiently fl The research of Maurice Houtsma has been made possible by a fellowship of the Royal Netherlands Academy of Arts and Sciences; email: houtsma@cs.utwente.nl process the transitive closure; many algorithms have been proposed, e.g. <ref> [16] </ref>. Efficient evaluation of the transitive closure is still a problem. Therefore, much research is currently taking place into its parallel computation [3, 8, 12, 15, 19, 21, 22]. For a good overview of parallel strategies for computing transitive closure queries, we refer to [5].
Reference: [17] <author> Naqvi, S. and Tsur, S. </author> <title> A logic language for data and knowledge bases, </title> <publisher> CS Press, </publisher> <year> 1989. </year>
Reference-contexts: And in a database storing information about parts, one can express bill-of-material questions. This functionality has been proposed in the context of logical query languages <ref> [6, 17] </ref> and in the context of the relational algebra [1, 13].
Reference: [18] <author> Schipper, G.L.V. </author> <title> "Fragmentation design for parallel computation of the transitive closure," </title> <institution> M.Sc.-Thesis, University of Twente, </institution> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: We will first discuss how we generated the graphs. Then we will discuss the results of applying our algorithms to these graphs. The results discussed here are derived from <ref> [18] </ref>, which provides more detailed test results. 4.1 Generating graphs To test the algorithms, we generated graphs in a random way.
Reference: [19] <author> Valduriez P. and S. </author> <title> Khoshafian "Parallel Evaluation of the Transitive Closure of a Database Relation," in Int. </title> <journal> Journal of Parallel Programming, </journal> <volume> 17:1, </volume> <month> Feb. </month> <year> 1988. </year>
Reference-contexts: Efficient evaluation of the transitive closure is still a problem. Therefore, much research is currently taking place into its parallel computation <ref> [3, 8, 12, 15, 19, 21, 22] </ref>. For a good overview of parallel strategies for computing transitive closure queries, we refer to [5]. In [10, 11] we introduced the disconnection set approach as a way of attacking this efficiency problem in a parallel environment.
Reference: [20] <author> Wilschut, A., Flokstra, J., and Apers, P.M.G. </author> <title> "Parallelism in a main-memory DBMS: </title> <booktitle> The performance of PRISMA/DB," in Proc. VLDB, </booktitle> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: It introduces the concept of a `high-speed network'; this is a separate fragment that mandatorily has to be traversed when going to a non-adjacent fragment. Currently, we are undertaking experiments [14] on the PRISMA multi-processor database machine <ref> [4, 20] </ref>. These experiments will show which of the characteristics identified here, is of main importance when striving for an optimal parallel evaluation of transitive closure queries. This will show which of the algorithms we developed is most useful, and why.
Reference: [21] <author> Wolfson O. </author> <title> "Sharing the load of logic program evaluation," </title> <booktitle> Int. Symp. on Database in Parallel and Distributed Systems, </booktitle> <month> Dec. </month> <year> 1988, </year> <pages> pp. 46-55. </pages>
Reference-contexts: Efficient evaluation of the transitive closure is still a problem. Therefore, much research is currently taking place into its parallel computation <ref> [3, 8, 12, 15, 19, 21, 22] </ref>. For a good overview of parallel strategies for computing transitive closure queries, we refer to [5]. In [10, 11] we introduced the disconnection set approach as a way of attacking this efficiency problem in a parallel environment.
Reference: [22] <author> Wolfson O. and A. Ozeri, </author> <title> "A new Paradigm for Parallel and Distributed Rule-processing", </title> <booktitle> in Proc. ACM-SIGMOD 1990, </booktitle> <pages> pp. 133-142. </pages>
Reference-contexts: Efficient evaluation of the transitive closure is still a problem. Therefore, much research is currently taking place into its parallel computation <ref> [3, 8, 12, 15, 19, 21, 22] </ref>. For a good overview of parallel strategies for computing transitive closure queries, we refer to [5]. In [10, 11] we introduced the disconnection set approach as a way of attacking this efficiency problem in a parallel environment.
References-found: 22

