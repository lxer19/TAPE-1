URL: http://choices.cs.uiuc.edu/~f-kon/microkernels.ps.gz
Refering-URL: http://choices.cs.uiuc.edu/~f-kon/unpublished.html
Root-URL: http://www.cs.uiuc.edu
Email: f-kon@cs.uiuc.edu  
Author: Prof. Roy H. Campbell Fabio Kon 
Date: May 1, 1996  
Note: Were Microkernels a good idea that did not work? CS423 final exam  
Abstract-found: 0
Intro-found: 1
Reference: [BSea95] <author> Brian N. Bershad, Stefan Savage, and et al. </author> <title> Extensibility, safety and performance in the spin operating system. </title> <booktitle> In Proceedings of the Fifteenth Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: This architecture seems to offer the best of the two worlds (microkernels and monolithic kernels). The system can provide high performance while keeping its flexibility and extensibility. Besides, at any particular moment, the loaded OS can be minimal for the required services. 3.4 SPIN SPIN <ref> [BSea95] </ref> is currently being developed at the University of Washington and, similarly to Chorus, provide a way of dynamically loading pieces of software into the kernel. SPIN designers call these pieces of software extensions in opposition to Chorus's servers.
Reference: [CDK95] <author> George Coulouris, Jean Dollimore, and Tin Kindberg. </author> <title> Distributed Systems Concepts and Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: However, the lack of compatibility to existing systems 1 makes the Amoeba user community very small. Even though, Amoeba has 1 Just a weak form of UNIX emulation is provided in Amoeba. 2 been used in academia, industry, and government. 3.2 Mach Differently from Amoeba, Mach <ref> [CDK95] </ref> was originally designed to provide Unix compatibility and complement system features with support for network services and multiprocessors. Most of UNIX services were implemented as independent processes. However, the first major release (version 2.5) included almost all UNIX functions inside the kernel for performance reasons.
Reference: [EKJ95] <author> Dawson R. Engler, M. Frans Kaashoek, and James O'Toole Jr. Exokernel: </author> <title> An operating system architecture for application-level resource management. </title> <booktitle> In Proceedings of the Fifteenth Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: This was one of the main ideas that led to the development of the Exokernel model described in the following section. 3.5 Beyond Microkernels: The Exokernels Exokernel is a new kernel architecture model proposed at MIT <ref> [EKJ95] </ref>. The parallel and distributed operating system group at MIT claim that the OS should only securely multiplex available hardware resources. All higher-level abstractions including IPC and VM should be implemented at application level by "untrusted" software.
Reference: [GD91] <author> David B. Golub and Richard P. Draves. </author> <title> Moving the default memory manager out of the mach kernel. </title> <booktitle> In Proceedings of the Usenix Mach Symposium, </booktitle> <month> November </month> <year> 1991. </year>
Reference-contexts: However, the user can be sure that none of them will be as fast as Amoeba's in-kernel communication primitives which does not need to cope with extra data copying and context switches. Later research <ref> [GD91] </ref> has attempted to move the virtual memory manager out of the kernel using user-level processes called pagers which allow Mach to use different VM policies and implementations. Some special care is needed when implementing VM managers and file system servers at user-level.
Reference: [RAA + 88] <author> Marc Rozier, Vadim Abrossimov, Francois Armand, Ivan Boule, and Michel Gien. </author> <title> Chorus distributed operating systems. </title> <journal> Computing Systems Journal, </journal> <volume> 1 </volume> <pages> 305-70, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: even the Mach developers do not saying that analyzing the published results one can see that the first experiments on moving the VMM out of Mach's kernel have shown a considerable performance degradation which turned out to be unacceptable for many applications. 3.3 Chorus The most interesting feature of Chorus <ref> [RAA + 88] </ref> is its capability of dynamically loading and unloading servers as need arises. These servers can be loaded either into the kernel address space and run as a privileged process or can be loaded as user-level processes.
Reference: [Tan92] <author> Andrew S. Tanenbaum. </author> <title> Modern Operating Systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1992. </year> <month> 5 </month>
Reference-contexts: All cited systems have many other interesting features which are not addressed here for being out of the scope of this paper. 3.1 Amoeba Designed and developed from scratch at the Vrije Universiteit in Amsterdam and with no concerns about keeping compatibility with existing systems, the Amoeba distributed system <ref> [Tan92] </ref> had as a design goal running the largest number of servers in user-level. All machines in the network run the same microkernel and their specialization is determined by the user-level servers they run.
References-found: 6

