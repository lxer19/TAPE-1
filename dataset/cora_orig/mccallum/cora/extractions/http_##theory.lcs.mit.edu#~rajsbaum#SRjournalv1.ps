URL: http://theory.lcs.mit.edu/~rajsbaum/SRjournalv1.ps
Refering-URL: http://theory.lcs.mit.edu/~rajsbaum/
Root-URL: 
Title: On the Performance of Synchronized Programs in Distributed Networks with Random Processing Times and Transmission Delays  
Author: Sergio Rajsbaum and Moshe Sidi 
Date: September 15, 1992  
Address: Haifa, Israel 32000  
Affiliation: Technion Israel Institute of Technology  
Abstract: A synchronizer is a compiler that transforms a program designed to run in a synchronous network into a program that runs in an asynchronous network. The behavior of a simple synchronizer, which also represents a basic mechanism for distributed computing and for the analysis of marked graphs, was studied in [ER1] and [ER2] under the assumption that message transmission delays and processing times are constant. In this paper we study the behavior of the simple synchronizer when processing times and transmission delays are random. Our main performance measure is the rate of a network, i.e., the average number of computational steps executed by a processor in the network, per unit time. We analyze the effect of the topology and the probability distributions of the random variables on the behavior of the network. For random variables with exponential distribution we provide tight (i.e. attainable) bounds and study the effect of a bottleneck processor on the rate.
Abstract-found: 1
Intro-found: 1
Reference: [A1] <author> B. Awerbuch, </author> <title> "Complexity of Network Synchronization," </title> <journal> Journal of the ACM, </journal> <volume> Vol. 32, No. 4, </volume> <pages> pp. 804-823, </pages> <month> Oct. </month> <year> 1985. </year>
Reference-contexts: Instead of designing a new program for the asynchronous network, it is possible to use a synchronizer, <ref> [A1] </ref>, i.e., a compiler that converts a program designed for a synchronous network, to run correctly in an asynchronous network. Synchronizers provide a useful tool because programs for synchronous networks are easier to design, debug and test than programs for asynchronous networks. <p> Furthermore, an important use of synchronizers is the design of more efficient asynchronous algorithms [A2]. The problem of designing efficient synchronizers has been studied in the past (e.g. <ref> [A1] </ref>, [AP90], [PU89]). The (worst case) time complexity of a distributed algorithm is usually computed assuming that processing times and message transmission delays are equal to some constant which represents an upper bound on these durations. <p> In [Ra91] and [RM92] the relationship between synchronizers and marked graphs is studied, and it is shown how the simple synchronizer can model the behavior of any marked graph, of the synchronizers of <ref> [A1] </ref>, and of distributed schedulers in [BG89], [MMZ88]. Thus, our work is closely related to problems in stochastic petri nets, where, due to the huge size of the state space, the solution techniques often rely on simulation (e.g. [M1], [M2], [Ma89]). Many distributed protocols are based on this simple synchronizer. <p> Many distributed protocols are based on this simple synchronizer. For example, the snapshot algorithm [CL85], clock synchronization algorithms (e.g. [BS88], [OG87]), the synchronizers of <ref> [A1] </ref>, the distributed schedulers in [BG89], [MMZ88], the optimistic synchronizer [GRST92]. The synchronizer is similar to synchronizer ff in [A1], but can be be used also in directed networks, as opposed to other synchronizers suggested in [A1] that require all links to be bidirectional. <p> Many distributed protocols are based on this simple synchronizer. For example, the snapshot algorithm [CL85], clock synchronization algorithms (e.g. [BS88], [OG87]), the synchronizers of <ref> [A1] </ref>, the distributed schedulers in [BG89], [MMZ88], the optimistic synchronizer [GRST92]. The synchronizer is similar to synchronizer ff in [A1], but can be be used also in directed networks, as opposed to other synchronizers suggested in [A1] that require all links to be bidirectional. <p> example, the snapshot algorithm [CL85], clock synchronization algorithms (e.g. [BS88], [OG87]), the synchronizers of <ref> [A1] </ref>, the distributed schedulers in [BG89], [MMZ88], the optimistic synchronizer [GRST92]. The synchronizer is similar to synchronizer ff in [A1], but can be be used also in directed networks, as opposed to other synchronizers suggested in [A1] that require all links to be bidirectional.
Reference: [A2] <author> B. Awerbuch, </author> <title> "Reducing Complexities of Distributed Max-Flow and Breadth-FirstSearch Algorithms by Means of Network Synchronization," </title> <journal> Networks, </journal> <volume> Vol. 15, </volume> <year> 1985, </year> <pages> pp. 425-437. </pages>
Reference-contexts: Synchronizers provide a useful tool because programs for synchronous networks are easier to design, debug and test than programs for asynchronous networks. Furthermore, an important use of synchronizers is the design of more efficient asynchronous algorithms <ref> [A2] </ref>. The problem of designing efficient synchronizers has been studied in the past (e.g. [A1], [AP90], [PU89]). The (worst case) time complexity of a distributed algorithm is usually computed assuming that processing times and message transmission delays are equal to some constant which represents an upper bound on these durations. <p> The implementation of this synchronizer may require, for instance, that every message is followed by an end-of-message marker, even if the message is empty. These end-of-message markers model the flow of information that must exist between every pair of processors connected by a link in each computational step <ref> [A2] </ref>. This is how a processor knows it has to wait for a message which was sent to it, or if no message was sent.
Reference: [AP90] <author> B. Awerbuch and D. Peleg, </author> <title> "Network Synchronization with Polylogarithmic Overhead," </title> <booktitle> Proc. 31st IEEE FOCS, </booktitle> <year> 1990. </year> <month> 24 </month>
Reference-contexts: Furthermore, an important use of synchronizers is the design of more efficient asynchronous algorithms [A2]. The problem of designing efficient synchronizers has been studied in the past (e.g. [A1], <ref> [AP90] </ref>, [PU89]). The (worst case) time complexity of a distributed algorithm is usually computed assuming that processing times and message transmission delays are equal to some constant which represents an upper bound on these durations.
Reference: [B88] <author> O.J. Boxma, </author> <title> "Sojourn Times in Cyclic Queues the Influence of the Slowest Server," in Computer Performance and Reliability, </title> <editor> G. Iazeolla, P.J. Courtois, O.J. Boxma (Ed.), </editor> <publisher> Elsevier Science Publ. (North-Holland), </publisher> <year> 1988. </year>
Reference-contexts: Recently, it has been shown in [BK91] that subadditive ergodic theory can be used to derive more general lower bounds on the rate. A bottleneck problem related to ours has been considered by <ref> [B88] </ref> where an asymptotic analysis of cyclic queues as the number of costumers grows is presented. Asymptotic performance of stochastic marked graphs as the number of tokens grows is studied in [M2].
Reference: [Ba89] <author> F. Baccelli, </author> <title> "Ergodic Theory of Stochastic Petri Networks," </title> <journal> Rapport INRIA No. </journal> <volume> 1037, </volume> <year> 1989. </year>
Reference-contexts: For instance, dominance results for rather general stochastic petri-nets have been obtained in <ref> [Ba89] </ref> and more recently in [BL91] by using Subadditive Ergodic Theory (e.g. [K73]). It should be noted, however, that the proofs we provide for the simple synchronizer are different and much simpler and do not require heavy mathematical tools. Other stochastic ordering studies exist. <p> Some examples of distributions which are less variable than the exponential (with appropriate parameters) are the Gamma, Weibull, Uniform and Normal. We should conclude this section by pointing out that the interested reader can find similar results for rather general stochastic petri-nets in <ref> [Ba89] </ref> and [BL91]. 4 EXPONENTIAL DISTRIBUTIONS In this section we assume that the processing times t k (v), k 0, v 2 V are independent and exponentially distributed with mean 1 .
Reference: [BG89] <author> V.C. Barbosa and E. </author> <title> Gafni, </title> <journal> "Concurrency in Heavily Loaded NeighborhoodConstrained Systems," ACM Trans. on Programming Languages and Systems, </journal> <volume> Vol. 11, No. 4, </volume> <pages> pp. 562-584, </pages> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: In [Ra91] and [RM92] the relationship between synchronizers and marked graphs is studied, and it is shown how the simple synchronizer can model the behavior of any marked graph, of the synchronizers of [A1], and of distributed schedulers in <ref> [BG89] </ref>, [MMZ88]. Thus, our work is closely related to problems in stochastic petri nets, where, due to the huge size of the state space, the solution techniques often rely on simulation (e.g. [M1], [M2], [Ma89]). Many distributed protocols are based on this simple synchronizer. <p> Many distributed protocols are based on this simple synchronizer. For example, the snapshot algorithm [CL85], clock synchronization algorithms (e.g. [BS88], [OG87]), the synchronizers of [A1], the distributed schedulers in <ref> [BG89] </ref>, [MMZ88], the optimistic synchronizer [GRST92]. The synchronizer is similar to synchronizer ff in [A1], but can be be used also in directed networks, as opposed to other synchronizers suggested in [A1] that require all links to be bidirectional.
Reference: [BK91] <author> F. Baccelli, P. Konstantopoulos, </author> <title> "Estimates of Cycle Times in Stochastic Petri Nets," </title> <booktitle> Proc. Rutgers Conference on Stochastic Analysis, </booktitle> <editor> I. Karatzas (Ed.), </editor> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: In [BS88] only a lower bound of fi (1= log ffi in ) on the rate is given, for regular networks with in-degree equal to ffi in , with negligible transmission delays, and identically exponentially distributed processing times. Recently, it has been shown in <ref> [BK91] </ref> that subadditive ergodic theory can be used to derive more general lower bounds on the rate. A bottleneck problem related to ours has been considered by [B88] where an asymptotic analysis of cyclic queues as the number of costumers grows is presented.
Reference: [BL91] <author> F. Baccelli, Z. Liu, </author> <title> "Comparison Properties of Stochastic Decision Free Petri Nets," </title> <journal> INRIA Research Raport No. </journal> <volume> 1433, </volume> <month> May </month> <year> 1991. </year>
Reference-contexts: For instance, dominance results for rather general stochastic petri-nets have been obtained in [Ba89] and more recently in <ref> [BL91] </ref> by using Subadditive Ergodic Theory (e.g. [K73]). It should be noted, however, that the proofs we provide for the simple synchronizer are different and much simpler and do not require heavy mathematical tools. Other stochastic ordering studies exist. <p> Some examples of distributions which are less variable than the exponential (with appropriate parameters) are the Gamma, Weibull, Uniform and Normal. We should conclude this section by pointing out that the interested reader can find similar results for rather general stochastic petri-nets in [Ba89] and <ref> [BL91] </ref>. 4 EXPONENTIAL DISTRIBUTIONS In this section we assume that the processing times t k (v), k 0, v 2 V are independent and exponentially distributed with mean 1 .
Reference: [BM89] <author> F. Baccelli and A.M. Makowski, </author> <title> "Queueing Models for Systems with Synchronization Constraints," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> Vol. 77, No. 1, </volume> <pages> pp. 138-161, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: It should be noted, however, that the proofs we provide for the simple synchronizer are different and much simpler and do not require heavy mathematical tools. Other stochastic ordering studies exist. Papers on acyclic networks and fork-join queues are [PV89] and <ref> [BM89, BMS89, BMT89] </ref>, respectively. For closed queueing networks the effect of increasing the service rate of a subset of stations for systems such that the distribution of the number of works in each station has a product form solution is studied in [SY86].
Reference: [BMS89] <author> F. Baccelli, A.M. Makowski and A. Shwartz, </author> <title> "The Fork-Join Queue and Related Systems with Synchronization Constraints: Stochastic Ordering and Computable Bounds," </title> <booktitle> Advances in Applied Probability, </booktitle> <volume> Vol. 21, No. 3, </volume> <pages> pp. 629-660, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: It should be noted, however, that the proofs we provide for the simple synchronizer are different and much simpler and do not require heavy mathematical tools. Other stochastic ordering studies exist. Papers on acyclic networks and fork-join queues are [PV89] and <ref> [BM89, BMS89, BMT89] </ref>, respectively. For closed queueing networks the effect of increasing the service rate of a subset of stations for systems such that the distribution of the number of works in each station has a product form solution is studied in [SY86].
Reference: [BMT89] <author> F. Baccelli, W.A. Massey and A. Towsley, </author> <title> "Acyclic Fork-Join Queueing Networks," </title> <journal> Journal of the ACM, </journal> <volume> Vol. 36, No. 3, </volume> <pages> pp. 615-642, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: It should be noted, however, that the proofs we provide for the simple synchronizer are different and much simpler and do not require heavy mathematical tools. Other stochastic ordering studies exist. Papers on acyclic networks and fork-join queues are [PV89] and <ref> [BM89, BMS89, BMT89] </ref>, respectively. For closed queueing networks the effect of increasing the service rate of a subset of stations for systems such that the distribution of the number of works in each station has a product form solution is studied in [SY86].
Reference: [BS88] <author> P. Berman and J. Simon, </author> <title> "Investigations of Fault-Tolerant Networks of Computers," </title> <booktitle> Proc. of the 20th ACM STOC, </booktitle> <year> 1988. </year>
Reference-contexts: Many distributed protocols are based on this simple synchronizer. For example, the snapshot algorithm [CL85], clock synchronization algorithms (e.g. <ref> [BS88] </ref>, [OG87]), the synchronizers of [A1], the distributed schedulers in [BG89], [MMZ88], the optimistic synchronizer [GRST92]. The synchronizer is similar to synchronizer ff in [A1], but can be be used also in directed networks, as opposed to other synchronizers suggested in [A1] that require all links to be bidirectional. <p> A model similar to our model in Section 4 is considered in [BT89], where it is claimed that the rate is (1= log ffi out ), for regular networks with out-degree equal to ffi out , identically exponentially distributed transmission delays with mean 1, and negligible processing times. In <ref> [BS88] </ref> only a lower bound of fi (1= log ffi in ) on the rate is given, for regular networks with in-degree equal to ffi in , with negligible transmission delays, and identically exponentially distributed processing times.
Reference: [BT89] <author> D. P. Bertsekas and J. N. Tsitsiklis, </author> <title> Parallel and Distributed Computation, </title> <address> PrenticeHall, N.J. </address> <year> 1989. </year>
Reference-contexts: A model similar to our model in Section 4 is considered in <ref> [BT89] </ref>, where it is claimed that the rate is (1= log ffi out ), for regular networks with out-degree equal to ffi out , identically exponentially distributed transmission delays with mean 1, and negligible processing times. <p> The quantity t k+1 (v k+1 ) is equal to the maximum of at least ffi out independent and identically distributed exponential random variables with mean 1 . It is well known (e.g. <ref> [BT89] </ref>, [D70]) that the mean of the maximum of c such random variables is at least 1 log c. <p> It follows that the behavior of the system is described by the recursions t 0 (v) = t (v) + t 0 (v) u2IN (v) Note that this system is not equal to the one of <ref> [BT89] </ref>, in which the processing times are negligible , and the delays non-negligible, with a self-loop in each processor (to model its processing delay). Let P k = v 0 ! v 1 ! ! v k (= v) be a path of length k. <p> We hope the combinatorial approach of these techniques, which was applied to rings, complete networks and regular degree networks, will be used in the future to obtain results for other topologies as well. 7 APPENDIX The following proposition (similar to pp. 672 in <ref> [BT89] </ref>) is used to prove the lower bounds on the rate of a network. Proposition 7.1 (D.2) Let X i be a sequence of independent exponential random variables with mean 1 .
Reference: [C67] <author> K. L. Chung, </author> <title> Markov Chains With Stationary Transition Probabilities, </title> <booktitle> SpringerVerlag, 2nd edition, </booktitle> <year> 1967. </year>
Reference: [CHEP] <author> F. Commoner, A.W. Holt, S. Even and A. Pnueli, </author> <title> "Marked Directed Graphs," </title> <journal> J. of Computer and System Sciences, </journal> <volume> Vol., 5, No 5, </volume> <month> Oct. </month> <year> 1971. </year>
Reference-contexts: Moreover, the synchronizer is equivalent to a marked graph (e.g. <ref> [CHEP] </ref>) in which the initial marking has one token per edge. <p> We denote by s 0 the state in which X i (0) = 1, 1 i m. Thus, the network can be represented as a Marked Graph (e.g. <ref> [CHEP] </ref>). The number of states in the Markov chain is finite, say N , because a transition of the chain does not change the total number of messages in a circuit in the network. Moreover, if the network is strongly connected, then the Markov chain is irreducible.
Reference: [CL85] <author> K. M. Chandy and L. Lamport, </author> <title> "Distributed Snapshots: Determining Global States of Distributed Systems," </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> Vol. 3, No 1, </volume> <month> Feb. </month> <year> 1985. </year>
Reference-contexts: Thus, our work is closely related to problems in stochastic petri nets, where, due to the huge size of the state space, the solution techniques often rely on simulation (e.g. [M1], [M2], [Ma89]). Many distributed protocols are based on this simple synchronizer. For example, the snapshot algorithm <ref> [CL85] </ref>, clock synchronization algorithms (e.g. [BS88], [OG87]), the synchronizers of [A1], the distributed schedulers in [BG89], [MMZ88], the optimistic synchronizer [GRST92].
Reference: [D70] <author> H.A. David, </author> <title> Order Statistics, </title> <publisher> John Wiley & Sons, </publisher> <year> 1970. </year> <month> 25 </month>
Reference-contexts: The quantity t k+1 (v k+1 ) is equal to the maximum of at least ffi out independent and identically distributed exponential random variables with mean 1 . It is well known (e.g. [BT89], <ref> [D70] </ref>) that the mean of the maximum of c such random variables is at least 1 log c.
Reference: [ER1] <author> S. Even and S. Rajsbaum, </author> <title> "Lack of Global Clock Does Not Slow Down the Com-putation in Distributed Networks," </title> <type> TR #522, </type> <institution> Department of Computer Science, Technion, Haifa, Israel, </institution> <month> Oct. </month> <year> 1988. </year> <title> The first part of this paper appears with the ti-tle "Unison in Distributed Networks" in Sequences: Combinatorica, Compression, Security, and Transmission, R.M. </title> <editor> Capocelli (ed.), </editor> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: The goal of this paper is to study the effect of random processing times and transmission delays on the performance of synchronous programs running in an asynchronous network under the control of a simple synchronizer. We compare the results with the deterministic case <ref> [ER1] </ref>, [ER2], in which processing times, as well as message delays, are constant (or bounded). The operation of the synchronizer is as follows: Each processor waits for a message to arrive on each of its in-coming links before performing the next computational step. <p> The synchronizer is similar to synchronizer ff in [A1], but can be be used also in directed networks, as opposed to other synchronizers suggested in [A1] that require all links to be bidirectional. In <ref> [ER1] </ref> and [ER2] the benefits of using the synchronizer as an initialization procedure are described. 2 Main Results This paper is devoted to the performance analysis of strongly connected directed networks controlled by the simple synchronizer, in which transmission delays, as well as the time it takes a processor to complete <p> Then (Section 3.2) we analyze networks with the same topology but different processing times. By defining a partial order on the set of distributions, we show that deterministic (i.e. constant) processing times maximize the rate of computation. For this case, it is shown in <ref> [ER1] </ref> that if the processing times are equal to 1 , the rate of the network is , regardless of the number of processors in the network or its topology. <p> Namely, by Theorem 3.9, a regular network with non-negligible delays runs at the same rate that the same network, up to a constant factor, provided that the delays are less or equal (in the convex order) than the processing times. In <ref> [ER1] </ref> we show that for a network with negligible delays and deterministic processing times equal to 1, the rate of any network is equal to 1. Thus, in this case, random processing times degrade the rate by at most a logarithmic factor in the maximum degree of a processor.
Reference: [ER2] <author> S. Even and S. Rajsbaum, </author> <title> "The Use of a Synchronizer Yields Maximum Rate in Distributed Networks," </title> <booktitle> Proc. of the 22nd ACM STOC, </booktitle> <year> 1990. </year>
Reference-contexts: The goal of this paper is to study the effect of random processing times and transmission delays on the performance of synchronous programs running in an asynchronous network under the control of a simple synchronizer. We compare the results with the deterministic case [ER1], <ref> [ER2] </ref>, in which processing times, as well as message delays, are constant (or bounded). The operation of the synchronizer is as follows: Each processor waits for a message to arrive on each of its in-coming links before performing the next computational step. <p> The synchronizer is similar to synchronizer ff in [A1], but can be be used also in directed networks, as opposed to other synchronizers suggested in [A1] that require all links to be bidirectional. In [ER1] and <ref> [ER2] </ref> the benefits of using the synchronizer as an initialization procedure are described. 2 Main Results This paper is devoted to the performance analysis of strongly connected directed networks controlled by the simple synchronizer, in which transmission delays, as well as the time it takes a processor to complete a computational <p> In networks with processing times exponentially distributed with mean 1, and larger delays with mean 1 , we compare the results with those of <ref> [ER2] </ref>, where it was shown that for the corresponding deterministic case the rate is . In the probabilistic case of a regular-degree network, the rate is at least fi (= log ffi). <p> When all processing times in the network H are deterministic, the computation of the network rate is no longer a stochastic problem, but a combinatorial one. Thus, a conclusion of Theorem 3.8 is that in this case, the computation rate of H, obtained via combinatorial techniques ([ER1] and <ref> [ER2] </ref>), yields an upper bound on the average rate of G. <p> Now, consider the case in which all processing times have mean 1, but the delays have mean 1 greater than 1, both exponentially distributed. The rate in the deterministic case is equal to <ref> [ER2] </ref>, and thus, by Theorem 3.3, in our case the rate is at most .
Reference: [GRST92] <author> J. Garofalakis, S. Rajsbaum, P. Spirakis, B. Tampakas, </author> <title> "Tentative and Definite Distributed Computations: An Optimistic Approach to Network Synchronization," </title> <booktitle> in Lecture Notes in Computer Science 647, Springer-Verlag: Proc. of the 6th Int. Workshop on Distributed Algorithms, </booktitle> <address> Haifa, Israel, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Many distributed protocols are based on this simple synchronizer. For example, the snapshot algorithm [CL85], clock synchronization algorithms (e.g. [BS88], [OG87]), the synchronizers of [A1], the distributed schedulers in [BG89], [MMZ88], the optimistic synchronizer <ref> [GRST92] </ref>. The synchronizer is similar to synchronizer ff in [A1], but can be be used also in directed networks, as opposed to other synchronizers suggested in [A1] that require all links to be bidirectional.
Reference: [K73] <author> J.F.C. Kingman, </author> <title> "Subadditive Ergodic Theory," </title> <journal> Ann. Prob., </journal> <volume> Vol. 1, No. 6, </volume> <pages> pp. 883-909, </pages> <year> 1973. </year>
Reference-contexts: For instance, dominance results for rather general stochastic petri-nets have been obtained in [Ba89] and more recently in [BL91] by using Subadditive Ergodic Theory (e.g. <ref> [K73] </ref>). It should be noted, however, that the proofs we provide for the simple synchronizer are different and much simpler and do not require heavy mathematical tools. Other stochastic ordering studies exist. Papers on acyclic networks and fork-join queues are [PV89] and [BM89, BMS89, BMT89], respectively.
Reference: [Ma89] <author> M.A. Marsan, </author> <title> "Stochastic Petri Nets: An Elementary Introduction," </title> <booktitle> in Advances in Petri Nets 1989, Lecture Notes in CS 424, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 1-29, </pages> <year> 1989. </year>
Reference-contexts: Thus, our work is closely related to problems in stochastic petri nets, where, due to the huge size of the state space, the solution techniques often rely on simulation (e.g. [M1], [M2], <ref> [Ma89] </ref>). Many distributed protocols are based on this simple synchronizer. For example, the snapshot algorithm [CL85], clock synchronization algorithms (e.g. [BS88], [OG87]), the synchronizers of [A1], the distributed schedulers in [BG89], [MMZ88], the optimistic synchronizer [GRST92]. <p> Asymptotic performance of stochastic marked graphs as the number of tokens grows is studied in [M2]. The class of networks with exponentially distributed processing times belongs to the more general model of stochastic petri nets (see <ref> [Ma89] </ref> for a survey), where it is usually assumed that the state space (of exponential size, in our case) is given. 2 THE MODEL The network is modeled by a (finite) directed, strongly connected graph G (V; E), where V = f1; 2; : : :; ng is the set of
Reference: [MMZ88] <author> J. Malka, S. Moran and S. Zaks, </author> <title> "Analysis of a Distributed Scheduler for Communication Networks," </title> <institution> TR-495, Department of Computer Science, Technion, Haifa, Israel, </institution> <month> Feb. </month> <year> 1988. </year> <booktitle> Also in Lecture Notes on CS 319, </booktitle> <pages> pp. 351-360, </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: In [Ra91] and [RM92] the relationship between synchronizers and marked graphs is studied, and it is shown how the simple synchronizer can model the behavior of any marked graph, of the synchronizers of [A1], and of distributed schedulers in [BG89], <ref> [MMZ88] </ref>. Thus, our work is closely related to problems in stochastic petri nets, where, due to the huge size of the state space, the solution techniques often rely on simulation (e.g. [M1], [M2], [Ma89]). Many distributed protocols are based on this simple synchronizer. <p> Many distributed protocols are based on this simple synchronizer. For example, the snapshot algorithm [CL85], clock synchronization algorithms (e.g. [BS88], [OG87]), the synchronizers of [A1], the distributed schedulers in [BG89], <ref> [MMZ88] </ref>, the optimistic synchronizer [GRST92]. The synchronizer is similar to synchronizer ff in [A1], but can be be used also in directed networks, as opposed to other synchronizers suggested in [A1] that require all links to be bidirectional.
Reference: [M1] <author> M. K. Molloy, </author> <title> "Performance Analysis Using Stochastic Petri Nets," </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. c-31, No. 9, </volume> <pages> pp. 913-917, </pages> <month> Sep. </month> <year> 1982. </year>
Reference-contexts: Thus, our work is closely related to problems in stochastic petri nets, where, due to the huge size of the state space, the solution techniques often rely on simulation (e.g. <ref> [M1] </ref>, [M2], [Ma89]). Many distributed protocols are based on this simple synchronizer. For example, the snapshot algorithm [CL85], clock synchronization algorithms (e.g. [BS88], [OG87]), the synchronizers of [A1], the distributed schedulers in [BG89], [MMZ88], the optimistic synchronizer [GRST92].
Reference: [M2] <author> M. K. Molloy, </author> <title> "Fast Bounds for Stochastic Petri Nets," </title> <booktitle> International Workshop on Timed Petri Nets, </booktitle> <address> Torino, Italy, </address> <pages> pp. 244-249, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Thus, our work is closely related to problems in stochastic petri nets, where, due to the huge size of the state space, the solution techniques often rely on simulation (e.g. [M1], <ref> [M2] </ref>, [Ma89]). Many distributed protocols are based on this simple synchronizer. For example, the snapshot algorithm [CL85], clock synchronization algorithms (e.g. [BS88], [OG87]), the synchronizers of [A1], the distributed schedulers in [BG89], [MMZ88], the optimistic synchronizer [GRST92]. <p> A bottleneck problem related to ours has been considered by [B88] where an asymptotic analysis of cyclic queues as the number of costumers grows is presented. Asymptotic performance of stochastic marked graphs as the number of tokens grows is studied in <ref> [M2] </ref>.
Reference: [OG87] <author> Y. Ofek and I. Gopal, </author> <title> "Generating a Global Clock in a Distributed System," </title> <institution> IBM Research Report, </institution> <year> 1987. </year>
Reference-contexts: Many distributed protocols are based on this simple synchronizer. For example, the snapshot algorithm [CL85], clock synchronization algorithms (e.g. [BS88], <ref> [OG87] </ref>), the synchronizers of [A1], the distributed schedulers in [BG89], [MMZ88], the optimistic synchronizer [GRST92]. The synchronizer is similar to synchronizer ff in [A1], but can be be used also in directed networks, as opposed to other synchronizers suggested in [A1] that require all links to be bidirectional.
Reference: [PS89] <author> D. Peleg and A. A. Schaffer, </author> <title> "Graph Spanners," </title> <journal> J. of Graph Theory, </journal> <volume> Vol. 13, No. 1, </volume> <pages> pp. 99-116, </pages> <year> 1989. </year>
Reference-contexts: In addition, if the number of vertices in G and H are equal, and the dilation of the embedding is D, then G is a D-spanner of H (e.g. <ref> [PS89] </ref>, [PU89]), and we have the following. Corollary 3.5 If H has a D-spanner G, then R G =D R H R G . 9 A motivation for the the theory of embedding is simulation.
Reference: [PU89] <author> D. Peleg and J. D. Ullman, </author> <title> "An Optimal Synchronizer for the Hypercube," </title> <journal> SIAM J. Computing, </journal> <volume> Vol. 18, No. 4, </volume> <pages> pp. 740-747, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Furthermore, an important use of synchronizers is the design of more efficient asynchronous algorithms [A2]. The problem of designing efficient synchronizers has been studied in the past (e.g. [A1], [AP90], <ref> [PU89] </ref>). The (worst case) time complexity of a distributed algorithm is usually computed assuming that processing times and message transmission delays are equal to some constant which represents an upper bound on these durations. <p> In addition, if the number of vertices in G and H are equal, and the dilation of the embedding is D, then G is a D-spanner of H (e.g. [PS89], <ref> [PU89] </ref>), and we have the following. Corollary 3.5 If H has a D-spanner G, then R G =D R H R G . 9 A motivation for the the theory of embedding is simulation.
Reference: [PV89] <author> N. Pekergin and J-M. Vincent, </author> <title> "Stochastic Bounds on Execution Times of Task Graphs," </title> <type> Report EHEI, </type> <year> 1989. </year>
Reference-contexts: It should be noted, however, that the proofs we provide for the simple synchronizer are different and much simpler and do not require heavy mathematical tools. Other stochastic ordering studies exist. Papers on acyclic networks and fork-join queues are <ref> [PV89] </ref> and [BM89, BMS89, BMT89], respectively. For closed queueing networks the effect of increasing the service rate of a subset of stations for systems such that the distribution of the number of works in each station has a product form solution is studied in [SY86].
Reference: [R88] <author> A. L. Rosenberg, </author> <title> "Shu*e-Oriented Interconnection Networks," </title> <type> COINS Technical Report 88-84, </type> <institution> Univ. of Massachusetts, </institution> <year> 1988. </year>
Reference-contexts: strongly connected graph with the least number of edges) and successively adds edges, a complete graph is obtained, without ever increasing the rate. 3.1.2 Embedding The theory of graph embedding has been used to model the notion of one network simulating another on a general computational task (see for example <ref> [R88] </ref>). Here we show how the notion of graph embedding can be helpful in comparing the behavior and the rates of different networks controlled by the synchronizer. <p> In our approach, we compare the performance of G and of H under the synchronizer, without using ; the embedding is used only for the purpose of proving statements about the performance of the networks. Consider for example the following two results of the theory of embedding <ref> [R88] </ref>. Proposition 3.6 For all n 1: One can embed the order n Shu*e-Exchange graph in the order n deBruijn graph with dilation 2. One can embed the order n deBruijn graph in the order n Shu*e-Exchange graph with dilation 2.
Reference: [Ra91] <author> S. Rajsbaum, </author> <title> "Stochastic Marked Graphs," </title> <booktitle> 5th Int. Workshop on Petri Nets and Performance Modeling, IEEE Computer Society, </booktitle> <address> Melbourne, </address> <year> 1991, </year> <pages> pp. 95-101. 26 </pages>
Reference-contexts: Moreover, the synchronizer is equivalent to a marked graph (e.g. [CHEP]) in which the initial marking has one token per edge. In <ref> [Ra91] </ref> and [RM92] the relationship between synchronizers and marked graphs is studied, and it is shown how the simple synchronizer can model the behavior of any marked graph, of the synchronizers of [A1], and of distributed schedulers in [BG89], [MMZ88].
Reference: [RM92] <author> Y. Malka, S. Rajsbaum, </author> <title> "Analysis of Distributed Algorithms based on Recurrence Relations," </title> <booktitle> in Lecture Notes in Computer Science 579, </booktitle> <pages> pp. 242-253, </pages> <publisher> Springer Verlag, </publisher> <year> 1992: </year> <booktitle> Proc. of 5th Int. Workshop on Distributed Algorithms, Delphi, </booktitle> <address> Greece. </address>
Reference-contexts: Moreover, the synchronizer is equivalent to a marked graph (e.g. [CHEP]) in which the initial marking has one token per edge. In [Ra91] and <ref> [RM92] </ref> the relationship between synchronizers and marked graphs is studied, and it is shown how the simple synchronizer can model the behavior of any marked graph, of the synchronizers of [A1], and of distributed schedulers in [BG89], [MMZ88].
Reference: [Ro83] <author> S. M. Ross, </author> <title> Stochastic Processes, </title> <editor> J. </editor> <publisher> Wiley, </publisher> <year> 1983. </year>
Reference-contexts: The basic methodology used is the sample path comparison; that is, we compare the evolution of message transmissions in different networks for every instance, or realization, of the random variables t k (v). This yields a stochastic ordering between various networks <ref> [Ro83] </ref>, [S84]. Theorem 3.1 Let G (V; E) be a graph, and E 0 V fi V be a set of directed edges. Let H (V; E [ E 0 ) be the graph obtained from G by adding edges E 0 . <p> The partial order c is called convex order (e.g. <ref> [Ro83] </ref>, [S84]). Intuitively X will be more variable than Y if F X gives more weight to the extreme values than F Y ; for instance, if E [X] = E [Y ], then Var (X) Var (Y ), since h (x) = x 2 is a convex function. <p> Now we can use Proposition 8.5.4 in <ref> [Ro83] </ref>: Proposition 8.5.4: If X 1 ; X 2 ; : : : ; X n are independent r.v., and Y 1 ; Y 2 ; : : : ; Y n are independent r.v., and X i c Y i , i = 1; 2; : : :; n, then <p> Namely, we assume that the distributions of the processing 12 times t k (v), for all v 2 V , k 0, are new better than used in expectation (NBUE) (e.g. <ref> [Ro83] </ref>, [S84]), so that if t is a processing time, then E [t ajt &gt; a] E [t ] ; 8a 0: Let G d (V; E) be a network with deterministic processing times, let G e (V; E) be a network with corresponding processing times with the same mean, but <p> The following theorem follows from the fact that the deterministic distribution is the minimum, while the exponential distribution is the maximum with respect to the ordering c , among all NBUE distributions <ref> [Ro83] </ref>, [S84]. Theorem 3.11 For every v 2 V , k 0 it holds that t G d k (v) c t G k (v). Some examples of distributions which are less variable than the exponential (with appropriate parameters) are the Gamma, Weibull, Uniform and Normal. <p> Denote by N (t) the number of events (returning to s 0 ) by time t. The counting process fN (t); t 0g is a renewal process. Therefore, with probability 1, N (t) ! E [T i ] (See, for example <ref> [Ro83] </ref>). Moreover, since each time the process returns to s 0 , each processor of the network has completed exactly one computational step, it follows that the rate of the network is 1=E [T i ]. We proceed to bound E [T i ].
Reference: [S84] <author> D. </author> <title> Stoyan, Comparison Methods for Queues and Other Stochastic Models, English Translation (D.J. Daley, </title> <editor> Ed.), J. </editor> <publisher> Wiley & Sons, </publisher> <address> New York, </address> <year> 1984. </year>
Reference-contexts: The basic methodology used is the sample path comparison; that is, we compare the evolution of message transmissions in different networks for every instance, or realization, of the random variables t k (v). This yields a stochastic ordering between various networks [Ro83], <ref> [S84] </ref>. Theorem 3.1 Let G (V; E) be a graph, and E 0 V fi V be a set of directed edges. Let H (V; E [ E 0 ) be the graph obtained from G by adding edges E 0 . <p> The partial order c is called convex order (e.g. [Ro83], <ref> [S84] </ref>). Intuitively X will be more variable than Y if F X gives more weight to the extreme values than F Y ; for instance, if E [X] = E [Y ], then Var (X) Var (Y ), since h (x) = x 2 is a convex function. <p> Namely, we assume that the distributions of the processing 12 times t k (v), for all v 2 V , k 0, are new better than used in expectation (NBUE) (e.g. [Ro83], <ref> [S84] </ref>), so that if t is a processing time, then E [t ajt &gt; a] E [t ] ; 8a 0: Let G d (V; E) be a network with deterministic processing times, let G e (V; E) be a network with corresponding processing times with the same mean, but independent, <p> The following theorem follows from the fact that the deterministic distribution is the minimum, while the exponential distribution is the maximum with respect to the ordering c , among all NBUE distributions [Ro83], <ref> [S84] </ref>. Theorem 3.11 For every v 2 V , k 0 it holds that t G d k (v) c t G k (v). Some examples of distributions which are less variable than the exponential (with appropriate parameters) are the Gamma, Weibull, Uniform and Normal.
Reference: [SY86] <author> J.G. Shanthikumar, D.D. Yao, </author> <title> "The effect of Increasing Service Rates in a Closed Queueing Network," </title> <journal> J. Appl. Prob., </journal> <volume> 23, </volume> <pages> 474-483, </pages> <year> 1986. </year> <month> 27 </month>
Reference-contexts: For closed queueing networks the effect of increasing the service rate of a subset of stations for systems such that the distribution of the number of works in each station has a product form solution is studied in <ref> [SY86] </ref>. A model similar to our model in Section 4 is considered in [BT89], where it is claimed that the rate is (1= log ffi out ), for regular networks with out-degree equal to ffi out , identically exponentially distributed transmission delays with mean 1, and negligible processing times.
References-found: 35

