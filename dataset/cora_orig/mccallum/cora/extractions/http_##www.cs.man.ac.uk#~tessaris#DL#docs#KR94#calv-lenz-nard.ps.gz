URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/KR94/calv-lenz-nard.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Email: e-mail: fcalvanese,lenzerini,nardig@assi.dis.uniroma1.it  
Title: A Unified Framework for Class-Based Representation Formalisms  
Author: Diego Calvanese, Maurizio Lenzerini, Daniele Nardi 
Address: Via Salaria 113, I-00198 Roma, Italy  
Affiliation: Dipartimento di Informatica e Sistemistica Universita di Roma "La Sapienza"  
Web: KR'94  
Note: Appeared in Proc. of  
Abstract: The notion of class is ubiquitous in Computer Science and is central in many knowledge representation languages. In this paper we propose a representation formalism in the style of concept languages, with the aim of providing a unified framework for class-based formalisms. The language we consider is quite expressive and features a novel combination of constructs including number restrictions, inverse roles and inclusion assertions with no restrictions on cycles. We are able to show that such language is powerful enough to model frame systems, object-oriented database languages and semantic data models. As a consequence of the established correspondences, several significant extensions of each of the above formalisms become available. The high expressivity of the language and the need for capturing the reasoning in different contexts forces us to distinguish between unrestricted and finite model reasoning. A notable feature of our proposal is that reasoning in both cases is decidable. For the unrestricted case we exploit a correspondence with propositional dynamic logic and extend it to the treatment of number restrictions. For the finite model case we develop a new method based on the use of linear programming techniques. We argue that, by virtue of the high expressive power and of the associated reasoning techniques on both unrestricted and finite models, our language provides a unified framework for class-based representation formalisms. 
Abstract-found: 1
Intro-found: 1
Reference: [AGO91] <author> A. Albano, G. Ghelli, and R. Orsini. </author> <title> A relationship mechanism for strongly typed Object-Oriented database programming languages. </title> <booktitle> In Proc. of the 17th Int. Conf. on Very Large Data Bases VLDB-91, </booktitle> <pages> pages 565-575, </pages> <address> Barcelona, </address> <year> 1991. </year>
Reference-contexts: From the above correspondence, we can observe that inverse roles are not necessary for the formalization of OO-data models. Indeed, the possibility of referring to the inverse of an attribute is generally ruled out in such models. However, recent papers (see for example <ref> [AGO91] </ref>) point out that this strongly limits the expressive power of the data model. Note also that the use of number restrictions is limited to the value 1, which corresponds to existence constraints and functionality, whereas union is used in a more general form than in the KEE system.
Reference: [AK89] <author> S. Abiteboul and P. Kanellakis. </author> <title> Object identity as a query language primitive. </title> <booktitle> In Proc. of the ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 159-173, </pages> <year> 1989. </year>
Reference-contexts: We show this by establishing a precise correspondence with the Entity Relationship model [Che76] model and with an object-oriented language in the style of <ref> [AK89] </ref>. Moreover, we demonstrate that the formalism proposed in this paper provides important features that are currently missing in each family, although their relevance has often been stressed. In this sense, the work reported here may also contribute to significant developments for the languages belonging to all the three families. <p> The OO-language is in the style of most popular models featuring complex objects and object identity. In particular, we follow <ref> [AK89] </ref>, although with a slightly different syntax. An OO-schema S is constituted by a set of class names, a set of attribute names, and a set of class declarations.
Reference: [AP86] <author> P. Atzeni and D.S. Parker Jr. </author> <title> Formal properties of net-based knowledge representation schemes. </title> <booktitle> In Proc. of the 2nd IEEE Int. Conf. on Data Engineering, </booktitle> <pages> pages 700-706, </pages> <address> Los Angeles, </address> <year> 1986. </year>
Reference-contexts: Reasoning in the ER-model includes entity satisfiabil-ity and inheritance. Entity satisfiability amounts to checking if a given entity can be populated in some legal database state (see <ref> [AP86, LN90] </ref>), and corresponds to the notion of concept satisfiability in concept languages. We show that all these forms of reasoning are captured by finite satisfiability and finite implication in ALUN I knowledge bases.
Reference: [BHR90] <editor> K.H. Blasius, U. Hedstuck, and C.-R. Rollinger, editors. </editor> <booktitle> Sorts and Types in Artificial Intelligence. Number 418 in Lecture Notes in Artificial Intelligence. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: The third one arises from the work on types in programming languages and object-oriented systems (see for example [KL89]). In the past there have been several attempts to establish relationships among class-based formalisms. In <ref> [BHR90] </ref> and [LNS91] a comparative analysis and an attempt to provide a unified view of class-based languages are carried out. The analysis makes it clear that several difficulties arise in identifying a common framework for the formalisms developed in different areas. Some recent papers address this problem.
Reference: [Bor92] <author> Alexander Borgida. </author> <title> From type systems to knowledge representation: Natural semantics specifications for description logics. </title> <journal> Journal of Intelligent and Cooperative Inf. Syst., </journal> <volume> 1(1) </volume> <pages> 93-126, </pages> <year> 1992. </year> <month> 119 </month>
Reference-contexts: The analysis makes it clear that several difficulties arise in identifying a common framework for the formalisms developed in different areas. Some recent papers address this problem. For example, an analysis of the relationships between concept languages and types in programming languages has been carried out in <ref> [Bor92] </ref>, while in [BS92, PSS92] concept languages are used to enrich the deductive capabilities of semantic and object-oriented data models. The proposed solutions are not fully general and a formalism capturing both the modeling constructs and the reasoning techniques for all the above families is still missing.
Reference: [BS92] <author> Sonia Bergamaschi and Claudio Sartori. </author> <title> On taxonomic reasoning in conceptual design. </title> <journal> ACM Trans. on Database Syst., </journal> <volume> 17(3) </volume> <pages> 385-422, </pages> <year> 1992. </year>
Reference-contexts: Some recent papers address this problem. For example, an analysis of the relationships between concept languages and types in programming languages has been carried out in [Bor92], while in <ref> [BS92, PSS92] </ref> concept languages are used to enrich the deductive capabilities of semantic and object-oriented data models. The proposed solutions are not fully general and a formalism capturing both the modeling constructs and the reasoning techniques for all the above families is still missing.
Reference: [Che76] <author> P.P. Chen. </author> <title> The Entity-Relationship model: Toward a unified view of data. </title> <journal> ACM Trans. on Database Syst., </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: The first characteristic allows us to show that ALU N I is powerful enough to provide a unified framework for frame systems, object-oriented languages and semantic data models. We show this by establishing a precise correspondence with the Entity Relationship model <ref> [Che76] </ref> model and with an object-oriented language in the style of [AK89]. Moreover, we demonstrate that the formalism proposed in this paper provides important features that are currently missing in each family, although their relevance has often been stressed. <p> The most common semantic data model is the Entity-Relationship (ER) model introduced in <ref> [Che76] </ref>. Figure 2 shows the ER-schema for the same state of affairs represented by the KEE knowledge base in Figure 1. In the ER notation, classes are called entities and are represented as boxes, whereas relationships between entities are represented as diamonds.
Reference: [CHS91] <author> C. Collet, M.N. Huhns, and W. Shen. </author> <title> Resource integration using a large knowledge base in carnot. </title> <journal> IEEE Computer, </journal> <volume> 24(12), </volume> <year> 1991. </year>
Reference-contexts: Dashed links are used whenever such restrictions are refined for more specific entities. Finally, elementary properties of entities are modeled by attributes (DEGREE in Figure 2). The ER model does not provide constructs for expressing negation and disjunction, although several recent papers stress their importance in database specification <ref> [CL93, CHS91] </ref>. Referring to our example, the absence of negation and disjunction makes it impossible to specify that courses are taught by either professors or graduate students. For this purpose, the new entity Teacher has been introduced as an abstraction of professor and graduate student.
Reference: [CKV90] <author> S.S. Cosmadakis, P.C. Kanellakis, and M. Vardi. </author> <title> Polynomial-time implication problems for unary inclusion dependencies. </title> <journal> Journal of the ACM, </journal> <volume> 37(1) </volume> <pages> 15-46, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: I, it holds that minc (E; R; U i ) ] n fi fi ~r [U i ] = ~e maxc (E; R; U i ): Notice that the definition of database state reflects the usual assumption in the whole database area that database states are finite structures (see also <ref> [CKV90] </ref>). Reasoning in the ER-model includes entity satisfiabil-ity and inheritance. Entity satisfiability amounts to checking if a given entity can be populated in some legal database state (see [AP86, LN90]), and corresponds to the notion of concept satisfiability in concept languages.
Reference: [CL93] <author> Tiziana Catarci and Maurizio Lenzerini. </author> <title> Representing and using interschema knowledge in cooperative information systems. </title> <journal> Journal of Intelligent and Cooperative Inf. Syst., </journal> <note> 1993. To appear. </note>
Reference-contexts: Dashed links are used whenever such restrictions are refined for more specific entities. Finally, elementary properties of entities are modeled by attributes (DEGREE in Figure 2). The ER model does not provide constructs for expressing negation and disjunction, although several recent papers stress their importance in database specification <ref> [CL93, CHS91] </ref>. Referring to our example, the absence of negation and disjunction makes it impossible to specify that courses are taught by either professors or graduate students. For this purpose, the new entity Teacher has been introduced as an abstraction of professor and graduate student.
Reference: [CL94] <author> Diego Calvanese and Maurizio Lenzerini. </author> <title> On the interaction between ISA and car-dinality constraints. </title> <booktitle> In Proc. of the 10th IEEE Int. Conf. on Data Engineering, </booktitle> <address> Houston, </address> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: For unrestricted satis-fiability, we exploit the correspondence with dynamic logic [Sch91], by extending it to the treatment of number restrictions, which have no direct counterpart in dynamic logics. For finite satisfiability we develop a new method based on linear programming techniques by extending the approach proposed in <ref> [CL94] </ref>. It is worth noting that the problem of finite reasoning, which arises mainly in the field of databases, has never been considered in knowledge representation languages, although it seems quite relevant for practical applications.
Reference: [DLNN91] <author> Francesco M. Donini, Maurizio Lenzerini, Daniele Nardi, and Werner Nutt. </author> <title> Tractable concept languages. </title> <booktitle> In Proc. of the 12th Int. Joint Conf. on Artificial Intelligence IJCAI-91, </booktitle> <pages> pages 458-463, </pages> <address> Sydney, </address> <year> 1991. </year>
Reference-contexts: Indeed, the possibility of referring to the inverse of a slot has been rarely considered in frame knowledge representation systems. However, as recent works show (see <ref> [DLNN91] </ref>), this is a strong limitation in expressivity. For instance, without inverse roles we cannot specify, in our example, that every student is enrolled in at least 4 courses. In fact, KEE, as well as many practical frame systems, embeds other features, such as attachments and overriding inheritance.
Reference: [FK85] <author> Richard Fikes and Tom Kehler. </author> <title> The role of frame-based representation in reasoning. </title> <journal> Communications of the ACM, </journal> <volume> 28(9) </volume> <pages> 904-920, </pages> <year> 1985. </year>
Reference-contexts: Such properties are defined by the frame slots, that constitute the items of a frame definition. In Figure 1 we present an example of a knowledge base defined by frame languages. The notation is basically the one adopted in <ref> [FK85] </ref>, which is used in the KEE 2 system. <p> Frame: BasCourse in KB University Superclasses: Course Memberslot: TAUGHTBY ValueClass: (INTERSECTION Professor (NOT Grad)) Frame: Professor in KB University Frame: Student in KB University Subclasses: Grad, Undergrad Frame: Grad in KB University Superclasses: Student Memberslot: DEGREE ValueClass: String Cardinality.Min: 1 Cardinality.Max: 1 Frame: Undergrad in KB University Superclasses: Student In <ref> [FK85] </ref>, several reasoning services associated with frames are mentioned, such as: inheritance, cardinal-ity reasoning and consistency checking. For example, one could ask the system whether the knowledge base implies that the filler of a given slot belongs to a certain class.
Reference: [HK87] <author> R.B. Hull and R. King. </author> <title> Semantic database modelling: Survey, applications and research issues. </title> <journal> ACM Computing Surveys, </journal> <volume> 19(3) </volume> <pages> 201-260, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: The first one comes from knowledge representation and in particular from the work on semantic networks and frames (see for example [Leh92, Sow91]). The second one originates in the field of databases and in particular from the work on semantic data models (see for example <ref> [HK87] </ref>). The third one arises from the work on types in programming languages and object-oriented systems (see for example [KL89]). In the past there have been several attempts to establish relationships among class-based formalisms.
Reference: [Kim90] <author> Won Kim. </author> <title> Introduction to Object-Oriented Databases. </title> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: E S is satisfiable in an ER-schema S if and only if (S) admits a finite model I in which E I 6= ;. 2.3 OBJECT-ORIENTED DATA MODELS Object-Oriented (OO) data models have been proposed with the goal of devising database formalisms that could be integrated with OO-programming systems (see <ref> [Kim90] </ref>).
Reference: [KL89] <author> Won Kim and Frederick H. </author> <title> Lochovsky, editors. Object-Oriented Concepts, Databases, and Applications. </title> <publisher> ACM Press and Addison Wesley, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: The second one originates in the field of databases and in particular from the work on semantic data models (see for example [HK87]). The third one arises from the work on types in programming languages and object-oriented systems (see for example <ref> [KL89] </ref>). In the past there have been several attempts to establish relationships among class-based formalisms. In [BHR90] and [LNS91] a comparative analysis and an attempt to provide a unified view of class-based languages are carried out.
Reference: [KT90] <author> Dexter Kozen and Jerzy Tiuryn. </author> <title> Logics of programs. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science Formal Models and Semantics, </booktitle> <pages> pages 789-840. </pages> <publisher> Elsevier Science Publishers (North-Holland), </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: The semantics of CPDL is derived from the semantics of CPDL in a straightforward way (see for example <ref> [KT90] </ref>).
Reference: [Leh92] <author> Fritz Lehmann, </author> <title> editor. </title> <booktitle> Semantic Networks in Artificial Intelligence. </booktitle> <publisher> Pergamon Press, Oxford, </publisher> <year> 1992. </year>
Reference-contexts: Three main families of class-based formalisms can be identified. The first one comes from knowledge representation and in particular from the work on semantic networks and frames (see for example <ref> [Leh92, Sow91] </ref>). The second one originates in the field of databases and in particular from the work on semantic data models (see for example [HK87]). The third one arises from the work on types in programming languages and object-oriented systems (see for example [KL89]).
Reference: [LN90] <author> Maurizio Lenzerini and Paolo Nobili. </author> <title> On the satisfiability of dependency constraints in entity-relationship schemata. </title> <journal> Information Systems, </journal> <volume> 15(4) </volume> <pages> 453-461, </pages> <year> 1990. </year>
Reference-contexts: Reasoning in the ER-model includes entity satisfiabil-ity and inheritance. Entity satisfiability amounts to checking if a given entity can be populated in some legal database state (see <ref> [AP86, LN90] </ref>), and corresponds to the notion of concept satisfiability in concept languages. We show that all these forms of reasoning are captured by finite satisfiability and finite implication in ALUN I knowledge bases. <p> Because of atomic concepts that may have instances in common, it is not possible to adopt the most natural approach which would be to use one unknown for each atomic concept and role (see <ref> [LN90] </ref>). We will overcome this problem by introducing the notion of expansion of a knowledge base. In the sequel we will use the term literal for an atomic or negated atomic concept.
Reference: [LNS91] <editor> Maurizio Lenzerini, Daniele Nardi, and Maria Simi, editors. </editor> <title> Inheritance Hierarchies in Knowledge Representation and Programming Languages. </title> <publisher> John Wiley & Sons, </publisher> <address> Chichester, </address> <year> 1991. </year>
Reference-contexts: The third one arises from the work on types in programming languages and object-oriented systems (see for example [KL89]). In the past there have been several attempts to establish relationships among class-based formalisms. In [BHR90] and <ref> [LNS91] </ref> a comparative analysis and an attempt to provide a unified view of class-based languages are carried out. The analysis makes it clear that several difficulties arise in identifying a common framework for the formalisms developed in different areas. Some recent papers address this problem.
Reference: [MM92] <author> R. Motschnig-Pitrik and J. Mylopoulous. </author> <title> Classes and instances. </title> <journal> Journal of Intelligent and Cooperative Inf. Syst., </journal> <volume> 1(1), </volume> <year> 1992. </year>
Reference-contexts: 1 INTRODUCTION In many fields of Computer Science we find formalisms for the representation of objects and classes <ref> [MM92] </ref>. Generally speaking a class denotes a subset of the do main of discourse, and a class-based representation formalism allows one to express several kinds of relationships and constraints (e.g. subclass constraints) holding among classes.
Reference: [Neb91] <author> Bernhard Nebel. </author> <title> Terminological cycles: Semantics and computational properties. </title> <editor> In John F. Sowa, editor, </editor> <booktitle> Principles of Semantic Networks, </booktitle> <pages> pages 331-361. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, </address> <year> 1991. </year>
Reference-contexts: On the other hand, we do not rule out cyclic references in the inclusion assertions (see <ref> [Neb91] </ref>), as opposed to most of the approaches to concept languages.
Reference: [PSS92] <author> Barbara Piza, Klaus-Dieter Schewe, and Joachim W. Schmidt. </author> <title> Term subsumption with type constructors. </title> <editor> In Y. Yesha, editor, </editor> <booktitle> Proc. of the Int. Conf. on Information and Knowledge Management CIKM-92, </booktitle> <pages> pages 449-456, </pages> <address> Baltimore, </address> <year> 1992. </year>
Reference-contexts: Some recent papers address this problem. For example, an analysis of the relationships between concept languages and types in programming languages has been carried out in [Bor92], while in <ref> [BS92, PSS92] </ref> concept languages are used to enrich the deductive capabilities of semantic and object-oriented data models. The proposed solutions are not fully general and a formalism capturing both the modeling constructs and the reasoning techniques for all the above families is still missing.
Reference: [Sch91] <author> Klaus Schild. </author> <title> A correspondence theory for terminological logics: Preliminary report. </title> <booktitle> In Proc. of the 12th Int. Joint Conf. on Artificial Intelligence IJCAI-91, </booktitle> <pages> pages 466-471, </pages> <address> Sydney, </address> <year> 1991. </year>
Reference-contexts: With regard to the second point, the two cases of reasoning in unrestricted and finite models are solved by means of different techniques. For unrestricted satis-fiability, we exploit the correspondence with dynamic logic <ref> [Sch91] </ref>, by extending it to the treatment of number restrictions, which have no direct counterpart in dynamic logics. For finite satisfiability we develop a new method based on linear programming techniques by extending the approach proposed in [CL94]. <p> Although this correspondence is similar to the one established in 115 <ref> [Sch91] </ref>, due to the presence of number restrictions, we cannot directly make use of the known results. <p> This is done by exploiting the model preserving transformation of K rel into a formula OE rel of CPDL. Notice that since in K rel all number restrictions are treated as atomic concepts, the transformation is defined in the same way as in <ref> [Sch91] </ref>. The resulting formula belongs to a sublanguage of CPDL which we call CPDL .
Reference: [Sow91] <editor> John F. Sowa, editor. </editor> <booktitle> Principles of Semantic Networks. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, </address> <year> 1991. </year>
Reference-contexts: Three main families of class-based formalisms can be identified. The first one comes from knowledge representation and in particular from the work on semantic networks and frames (see for example <ref> [Leh92, Sow91] </ref>). The second one originates in the field of databases and in particular from the work on semantic data models (see for example [HK87]). The third one arises from the work on types in programming languages and object-oriented systems (see for example [KL89]).
Reference: [Str82] <author> R.S. </author> <title> Street. Propositional dynamic logic of looping and converse is elementarily decidable. </title> <journal> Information and Control, </journal> <volume> 54 </volume> <pages> 121-141, </pages> <year> 1982. </year>
Reference-contexts: We show that if OE rel is satisfiable then we can construct a model in which this is indeed the case. <ref> [Str82] </ref> shows that the tree model property holds for CPDL (see [Str82] for a formal definition of tree model ). <p> We show that if OE rel is satisfiable then we can construct a model in which this is indeed the case. <ref> [Str82] </ref> shows that the tree model property holds for CPDL (see [Str82] for a formal definition of tree model ).
Reference: [VW84] <author> M. Vardi and P. Wolper. </author> <title> Automata-theoretic techniques for modal logics of programs. </title> <booktitle> In Proc. of the 16th ACM SIGACT Symp. on Theory of Computing STOC-84, </booktitle> <pages> pages 446-455, </pages> <year> 1984. </year>
Reference-contexts: This is stated in the following theorem. Theorem 3.5 An ALUN I knowledge base K is satisfiable if and only if its relaxation K rel is satisfiable. In <ref> [VW84] </ref> it has been shown that deciding if a CPDL formula is satisfiable can be done in deterministic exponential time, which also gives the upper bound for satisfiability in CPDL .
Reference: [WS92] <author> William A. Woods and James G. Schmolze. </author> <title> The KL-ONE family. </title> <editor> In F.W. Lehmann, editor, </editor> <booktitle> Semantic Networks in Artificial Intelligence, </booktitle> <pages> pages 133-178. </pages> <publisher> Pergamon Press, </publisher> <year> 1992. </year> <note> Published as a special issue of Computers & Mathematics with Applications, Volume 23, Number 2-9. 120 </note>
Reference-contexts: In the last decade, the research on frame languages concentrated on the definition of concept languages, which are subsets of first-order logics, introduced for the formalization of KL-ONE languages (see <ref> [WS92] </ref>).
References-found: 28

