URL: ftp://claude.ifi.unizh.ch/pub/techreports/TR-94/ifi-94.03.ps.gz
Refering-URL: http://www.cs.gatech.edu/people/home/jmankoff/collab-immers-env.html
Root-URL: 
Email: maffeis@ifi.unizh.ch  
Title: Design and Implementation of a Configurable Mixed-Media Filesystem Extended Abstract  
Author: Silvano Maffeis 
Date: June 1993  
Address: Switzerland  
Affiliation: Computer Science Department, University of Zurich,  
Pubnum: IFI TR 94:03  
Abstract: Traditional UNIX 1 filesystems are not adequate enough for directly supporting database systems, multimedia systems or applications requiring high I/O performance. In this paper we describe the design and implementation of a configurable mixed-media filesystem. The attribute configurable means that a filesystem serving a specific application area can be realized with less effort out of a library of reusable filesystem classes. The attribute mixed-media stands for the filesystem's ability to integrate different media types (RAM, harddisks, WORM optical disks, CDROMs, tape devices, RAIDs etc.) into a virtual storage and making applications unaware of this aggregation. A prototype C ++ implementation of the proposed design, called the Vanilla filesystem, is presented and its performance assessed. Raw-write performance is up to 4:5 times higher than in a standard Sun OS filesystem. We will also demonstrate how various storage organization forms, especially hierarchies, arrays, and mirrors of both local and remote storages, can be realized using an expressive syntax.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anderson, D. P., and Osawa, Y. </author> <title> A File System for Continuous Media. </title> <journal> ACM Transactions on Computer Systems 10, </journal> <volume> 4 (Nov. </volume> <year> 1992). </year>
Reference-contexts: Multimedia applications require high I/O throughput rates and quality of service guarantees like constant minimum data rates <ref> [1] </ref>. fl This work is supported by Siemens AG ZFE, Germany, by the Union Bank of Switzerland, and by the Eidgenossisches Volkswirtschaftsdepartement, Kommission zur Forderung der wissenschaftlichen Forschung (KWF), Switzerland, Grants No. 2255:1, 2554:1 1 UNIX is a registered trademark of Unix Systems Laboratories, Inc. 1 * the low raw throughput. <p> Another important advantage is that this layout is also suited for building efficient filesystems on serial 2 Class CMBuffers realizes real-time storage and retrieval of continuous media data <ref> [1] </ref>. For space reasons it is not addressed in this abstract. 2 access devices (like tape devices), on write-once devices (like WORM disks), and on random access devices (like RAM-caches) at the same time. Very large files and multimedia data streams are stored using fragmented files.
Reference: [2] <author> David A. Patterson and Peter Chen and Randy H. Katz. </author> <title> Introduction to Redundant Arrays of Inexpensive Disks (RAID). </title> <booktitle> In COMPCON, 34th IEEE Computer Society International Conference (Feb. </booktitle> <year> 1989). </year>
Reference-contexts: Several data and parity disks can be configured to form a redundant array of inexpensive disks (RAID) <ref> [2] </ref> system.
Reference: [3] <author> J. Eliot B. Moss. </author> <title> Getting the Operating System Out of the Way. </title> <booktitle> IEEE Database Engineering 9, </booktitle> <address> 3 (Sept. </address> <year> 1986). </year>
Reference-contexts: Other drawbacks of the traditional UNIX filesystem design are: * the difficulty to integrate different media types, like RAM, harddisks and WORM optical disks to a single, virtual filesystem. A novel approach to such a filesystem is described in [12]. * its inadequateness for database applications <ref> [9, 3] </ref>. Database systems for UNIX, like Oracle or Exodus, circumvent the UNIX filesystem by directly implementing their own storage system on the raw devices, which makes UNIX database systems more expensive. * its inadequateness for multimedia applications.
Reference: [4] <author> L. W. McVoy and S. R. Kleiman. </author> <title> Extent-like Performance from a UNIX File System. </title> <booktitle> In Proceedings of the Winter 1991 USENIX Conference (Dallas, </booktitle> <address> TX, </address> <month> Jan. </month> <year> 1991). </year>
Reference-contexts: This scheme is inefficient, since, as the well-known study conducted by Ousterhout and others [10] reports, more than two thirds of the file accesses in an academic UNIX environment are whole-file transfers. Better performance can be achieved by maintaining files contigously on storage <ref> [15, 13, 4] </ref>. Other drawbacks of the traditional UNIX filesystem design are: * the difficulty to integrate different media types, like RAM, harddisks and WORM optical disks to a single, virtual filesystem.
Reference: [5] <author> Luis-Felipe Cabrera and Darrell D. E. </author> <title> Long. Exploiting Multiple I/O Streams to Provide High Data-Rates. </title> <booktitle> In Proceedings of the Summer 1991 USENIX Technical Conference and Exhibition (Nashville, </booktitle> <address> Tennessee, </address> <month> June </month> <year> 1991). </year>
Reference-contexts: Traditional UNIX filesystems do not scale well with the ongoing increase in CPU performance. A filesystem supporting datastriping <ref> [5] </ref> and diskarrays would help in overcoming the I/O bottleneck. * the weak configurability. E.g. it is difficult to change the buffer replacement policy (LRU) of the UNIX filesystem. In particular, LRU performs marginally for many database [9] and multimedia applications.
Reference: [6] <author> Maffeis, S. </author> <title> Cache Management Algorithms for Flexible Filesystems. </title> <booktitle> ACM SIGMETRICS Performance Evaluation Review 21, </booktitle> <month> 2 (Dec. </month> <year> 1993). </year>
Reference-contexts: In particular, LRU performs marginally for many database [9] and multimedia applications. In this paper we present the design and implementation of a configurable, mixed-media filesystem. Configurable in the sense that features like the file replacement policy <ref> [6] </ref>, the space-allocation algorithm and such like can easily be changed and that a variety of storage organization forms, like replicated storages, storage hierarchies, and striped storages can be configured using an expressive syntax.
Reference: [7] <author> Maffeis, S. </author> <title> File Access Patterns in Public FTP Archives and an Index for Locality of Reference. </title> <booktitle> ACM SIGMETRICS Performance Evaluation Review 20, </booktitle> <month> 3 (Mar. </month> <year> 1993). </year>
Reference-contexts: When this storage becomes full, the filesystem automatically moves files to the next attached storage until enough free space has been created to satisfy the request. The replacement policy (LRU, MRU, LFU or MFU) decides which files to replace. Dependent on the situation specific file access patterns <ref> [7] </ref>, programmers can provide their own replacement policies by overwriting one specific method of class Storage. Ram cache; Disk disk ("/dev/rsd1g"); cache.install (4194304, 200); == 4mb cache, 200 inodes. disk.install (10000); == 10000 inodes. cache.attach (disk); == configure the filesystem (hierarchy).
Reference: [8] <author> McKusick, M. K., Joy, W. N., Leffler, S. J., and Fabry, R. S. </author> <title> A Fast File System for UNIX. </title> <journal> ACM Transactions on Computer Systems 2, </journal> <month> 3 (Aug. </month> <year> 1984). </year>
Reference-contexts: 1 Problem Statement Traditional UNIX filesystems <ref> [8] </ref> were designed to support computers with little RAM and small disk devices. Files are split into fixed size logical blocks and sequentially accessing a whole file induces several movements of the read/write head often causing long delays.
Reference: [9] <author> Michael Stonebraker. </author> <title> Operating System Support for Database Management. </title> <journal> Communications of the ACM (July 1981). </journal>
Reference-contexts: Other drawbacks of the traditional UNIX filesystem design are: * the difficulty to integrate different media types, like RAM, harddisks and WORM optical disks to a single, virtual filesystem. A novel approach to such a filesystem is described in [12]. * its inadequateness for database applications <ref> [9, 3] </ref>. Database systems for UNIX, like Oracle or Exodus, circumvent the UNIX filesystem by directly implementing their own storage system on the raw devices, which makes UNIX database systems more expensive. * its inadequateness for multimedia applications. <p> A filesystem supporting datastriping [5] and diskarrays would help in overcoming the I/O bottleneck. * the weak configurability. E.g. it is difficult to change the buffer replacement policy (LRU) of the UNIX filesystem. In particular, LRU performs marginally for many database <ref> [9] </ref> and multimedia applications. In this paper we present the design and implementation of a configurable, mixed-media filesystem.
Reference: [10] <author> Ousterhout, J. K., et al. </author> <title> A Trace-Driven Analysis of the UNIX 4.2 BSD File System. </title> <booktitle> In Proceedings of the 10th Symposium on Operating System Principles (Dec. </booktitle> <year> 1985). </year>
Reference-contexts: Files are split into fixed size logical blocks and sequentially accessing a whole file induces several movements of the read/write head often causing long delays. This scheme is inefficient, since, as the well-known study conducted by Ousterhout and others <ref> [10] </ref> reports, more than two thirds of the file accesses in an academic UNIX environment are whole-file transfers. Better performance can be achieved by maintaining files contigously on storage [15, 13, 4].
Reference: [11] <author> Peter M. Chen and David A. Patterson. </author> <title> Maximizing Performance in a Striped Disk Array. </title> <booktitle> In Proceedings of the 17th Annual International Symposium on Computer Architecture (May 1990), IEEE. </booktitle>
Reference-contexts: Several data and parity disks can be configured to form a redundant array of inexpensive disks (RAID) [2] system. The striping unit <ref> [11] </ref> is variable and can be chosen on a per file basis: Disk disk1 ("/dev/rsd1g"); Disk disk2 ("/dev/rsd2g"); Disk disk3 ("/dev/rsd3g"); Disk disk4 ("/dev/rsd4g"); Disk parity ("/dev/rsd5g"); disk1.install (10000); disk2.install (10000); disk3.install (10000); disk4.install (10000); parity.install (10000); disk1.stripe (disk2).stripe (disk3).stripe (disk4); == configure the disk array. disk1.add parity device (parity); ==
Reference: [12] <author> Quinlan, S. </author> <title> A Cached WORM File System. </title> <journal> Software Practice and Experience 21, </journal> <month> 12 (Dec. </month> <year> 1991). </year>
Reference-contexts: Other drawbacks of the traditional UNIX filesystem design are: * the difficulty to integrate different media types, like RAM, harddisks and WORM optical disks to a single, virtual filesystem. A novel approach to such a filesystem is described in <ref> [12] </ref>. * its inadequateness for database applications [9, 3]. Database systems for UNIX, like Oracle or Exodus, circumvent the UNIX filesystem by directly implementing their own storage system on the raw devices, which makes UNIX database systems more expensive. * its inadequateness for multimedia applications.
Reference: [13] <author> Rosenblum, M., and Ousterhout, J. K. </author> <title> The Design and Implementation of a Log-Structured File System. </title> <journal> ACM Transactions on Computer Systems 10, </journal> <month> 1 (Feb. </month> <year> 1992). </year>
Reference-contexts: This scheme is inefficient, since, as the well-known study conducted by Ousterhout and others [10] reports, more than two thirds of the file accesses in an academic UNIX environment are whole-file transfers. Better performance can be achieved by maintaining files contigously on storage <ref> [15, 13, 4] </ref>. Other drawbacks of the traditional UNIX filesystem design are: * the difficulty to integrate different media types, like RAM, harddisks and WORM optical disks to a single, virtual filesystem.
Reference: [14] <author> Stroustrup, B. </author> <title> The C++ Programming Language. </title> <publisher> Addison Wesley, </publisher> <year> 1986. </year> <note> [15] van Renesse, </note> <author> R., Tanenbaum, A. S., and Wilschut, A. </author> <title> The Design of a High-Performance File Server. </title> <booktitle> In 9th International Conference on Distributed Computing Systems (Newport Beach, </booktitle> <address> CA, 1989), </address> <publisher> IEEE. </publisher>
Reference-contexts: The attribute mixed-media indicates that virtual storage systems comprising RAM-cache, harddisks, WORM optical disks, tape devices etc. can be configured. We have implemented a prototype UNIX filesystem, called the Vanilla filesystem (VFS), in C ++ <ref> [14] </ref> following the design presented in the next sections.
References-found: 14

