URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3583/3583.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: frohit, cldavis, tripathig@cs.umd.edu  
Title: Improving NFS Performance over Wireless Links  
Author: Rohit Dube, Cynthia D. Rais and Satish K. Tripathi 
Date: December 19, 1995  
Address: College Park, MD 20742  
Affiliation: Institute for Advanced Computer Studies Department of Computer Science University of Maryland  
Abstract: NFS is a widely used remote file access protocol that has been tuned to perform well on traditional LANs which exhibit low error rates. Users migrating to mobile-hosts would like to continue to use NFS for remote file accesses. However, low bandwidth and high error-rates degrade performance on mobile-hosts using wireless links thus hindering the use of NFS. In this paper, we present two mechanisms to improve NFS performance over wireless links : an aggressive NFS client and link-level retransmissions. Our experiments show that these mechanisms improve throughput by up to 200%, which brings the performance to within 5% of that obtained in zero error conditions.
Abstract-found: 1
Intro-found: 1
Reference: [BB95a] <author> A. Bakre and B. R. Badrinath. M-RPC: </author> <title> A Remote Procedure Call Service for Mobile Clients. </title> <booktitle> In First ACM International Conference on Mobile Computing and Networking, </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: New file systems have been developed to support disconnected operation via disk-caching [SK92], [SNKP94], [HHRB92]. For improving application performance over wireless links, an M-RPC system has been proposed <ref> [BB95a] </ref>. Enhancements have been suggested to improve TCP performance over wireless links : split connection approaches [BB95b], [YB94], [BSAK95], and the fast retransmission approach [CI94]. Link level retransmissions have also been proposed to improve performance over wireless links [DCY93], [BBKT96], [PAL + 95]. <p> We discuss the use of disk caching in Section 5. In the TCP split connection approaches [BB95b], [YB94], [BSAK95], the base-station 1 buffers packets being sent to the mobile hosts in its vicinity. The base-station retransmits any lost packets to prevent end-to-end retransmission. The M-RPC approach <ref> [BB95a] </ref>, is a variation of the TCP split connection approach. It seeks to improve performance by separating the connection at the RPC 2 level at the base-station. These approaches have the disadvantage of high buffer requirement, a complex migration algorithm and increased load at the base-station.
Reference: [BB95b] <author> A. Bakre and B.R. Badrinath. I-TCP: </author> <title> Indirect TCP for Mobile Hosts. </title> <booktitle> In Fifteenth International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: In response to such losses, NFS clients back-off to unnecessarily long wait periods, leading to severe performance degradation. This degradation has been previously documented in [RT95]. Previous attempts at quantifying and improving performance over wireless links have concentrated mostly on TCP [DCY93], [YB94], [BSK95], <ref> [BB95b] </ref>. Since, most NFS implementations are UDP based [Nov89], the results from these TCP studies are not directly applicable to NFS. It is the goal of this paper to find and quantify mechanisms for improving NFS performance over wireless links. <p> New file systems have been developed to support disconnected operation via disk-caching [SK92], [SNKP94], [HHRB92]. For improving application performance over wireless links, an M-RPC system has been proposed [BB95a]. Enhancements have been suggested to improve TCP performance over wireless links : split connection approaches <ref> [BB95b] </ref>, [YB94], [BSAK95], and the fast retransmission approach [CI94]. Link level retransmissions have also been proposed to improve performance over wireless links [DCY93], [BBKT96], [PAL + 95]. For reasons discussed shortly, most of these results are not directly applicable to improving NFS performance. <p> Prefetching and disk-caching decrease the time spent by the user waiting for file transfers, but that by itself does not solve the problem of poor throughput and wireless link utilization. We discuss the use of disk caching in Section 5. In the TCP split connection approaches <ref> [BB95b] </ref>, [YB94], [BSAK95], the base-station 1 buffers packets being sent to the mobile hosts in its vicinity. The base-station retransmits any lost packets to prevent end-to-end retransmission. The M-RPC approach [BB95a], is a variation of the TCP split connection approach.
Reference: [BBKT96] <author> P. Bhagwat, P. Bhattacharya, A. Krishna, and S.K. Tripathi. </author> <title> Using Channel State Dependent Packet Scheduling to improve throughput over Wireless LANs. </title> <booktitle> In IEEE INFOCOM, </booktitle> <year> 1996. </year> <month> Pre-print. </month>
Reference-contexts: NFS clients could safely back-off and retry a request after waiting for some predeter-mined time period. On wireless links, packet losses are usually due to burst errors <ref> [BBKT96] </ref>, rather than network congestion or server failures. These burst periods are of the order of a hundred milli-seconds. In response to such losses, NFS clients back-off to unnecessarily long wait periods, leading to severe performance degradation. This degradation has been previously documented in [RT95]. <p> Enhancements have been suggested to improve TCP performance over wireless links : split connection approaches [BB95b], [YB94], [BSAK95], and the fast retransmission approach [CI94]. Link level retransmissions have also been proposed to improve performance over wireless links [DCY93], <ref> [BBKT96] </ref>, [PAL + 95]. For reasons discussed shortly, most of these results are not directly applicable to improving NFS performance. Our research is the first to combine these issues and investigate performance improvements for NFS over wireless links. <p> In order to get consistent results, the ethernet segment holding the static-hosts was isolated from the rest of the building network while running experiments. 3.2 Error Model We use a 2-state error model <ref> [BBKT96] </ref>, [RT95] as shown in Figure 2 to represent the quality of a channel between the mobile-host and the base-station. The good-state is the normal mode of operation when bits flow intact between the target and source devices. <p> We chose uniform distributions since they are more realistic.). This error model was incorporated into the output and input routines of the mobile-host's device drivers 5 . Based on our experience and results from <ref> [BBKT96] </ref> and [RT95], we chose a mean of 1000 milli-seconds for the good-period (time spent in the good-state) and experimented with means of 40 and 80 6 milli-seconds for the bad-period (time spent in the bad-state). The error model was implemented by using the kernel timeout mechanism on the mobile-hosts. <p> Link-level retransmissions reduced response times considerably. Although our simulation of link-level retransmissions presents only a best case for link-level retransmissions, the performance improvement was significant enough to warrant a full-scale implementation with perhaps a reservation protocol and channel state dependent packet scheduling built in <ref> [BBKT96] </ref>. A real implementation of link-level retransmissions would in addition solve the buffer overflow problem, leading to further improvement in response time. The response times we obtained were within 5% of the zero error case. <p> Hence, our study suggests that link-level retransmissions along with an aggressive NFS client would be a desirable combination on mobile-hosts. 5 Future Work Based on our experiments, we plan to build a reservation protocol (rts-cts-data-ack) with link level retransmissions and a channel state dependent scheduling policy <ref> [BBKT96] </ref>. This would solve the buffer overflow problem (which is important because there is always going to be a mismatch in the capabilities of and load on machines used as servers, base-stations and mobile-hosts).
Reference: [BSAK95] <author> H. Balakrishnan, S. Seshan, E. Amir, and R.H. Katz. </author> <title> Improving TCP/IP Performance over Wireless Networks. </title> <booktitle> In First ACM International Conference on Mobile Computing and Networking, </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: New file systems have been developed to support disconnected operation via disk-caching [SK92], [SNKP94], [HHRB92]. For improving application performance over wireless links, an M-RPC system has been proposed [BB95a]. Enhancements have been suggested to improve TCP performance over wireless links : split connection approaches [BB95b], [YB94], <ref> [BSAK95] </ref>, and the fast retransmission approach [CI94]. Link level retransmissions have also been proposed to improve performance over wireless links [DCY93], [BBKT96], [PAL + 95]. For reasons discussed shortly, most of these results are not directly applicable to improving NFS performance. <p> Prefetching and disk-caching decrease the time spent by the user waiting for file transfers, but that by itself does not solve the problem of poor throughput and wireless link utilization. We discuss the use of disk caching in Section 5. In the TCP split connection approaches [BB95b], [YB94], <ref> [BSAK95] </ref>, the base-station 1 buffers packets being sent to the mobile hosts in its vicinity. The base-station retransmits any lost packets to prevent end-to-end retransmission. The M-RPC approach [BB95a], is a variation of the TCP split connection approach.
Reference: [BSK95] <author> H. Balakrishnan, S. Seshan, and R.H. Katz. </author> <title> Improving Reliable Transport and Handoff Performance in Cellular Wireless Networks. </title> <booktitle> ACM Wireless Networks, </booktitle> <month> December </month> <year> 1995. </year> <note> Pre-print. 13 </note>
Reference-contexts: In response to such losses, NFS clients back-off to unnecessarily long wait periods, leading to severe performance degradation. This degradation has been previously documented in [RT95]. Previous attempts at quantifying and improving performance over wireless links have concentrated mostly on TCP [DCY93], [YB94], <ref> [BSK95] </ref>, [BB95b]. Since, most NFS implementations are UDP based [Nov89], the results from these TCP studies are not directly applicable to NFS. It is the goal of this paper to find and quantify mechanisms for improving NFS performance over wireless links.
Reference: [CI94] <author> R. Caceres and L. Iftode. </author> <title> The Effects of Mobility on Reliable Transport Protocols. </title> <booktitle> In Proceedings of the 14th International Conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: For improving application performance over wireless links, an M-RPC system has been proposed [BB95a]. Enhancements have been suggested to improve TCP performance over wireless links : split connection approaches [BB95b], [YB94], [BSAK95], and the fast retransmission approach <ref> [CI94] </ref>. Link level retransmissions have also been proposed to improve performance over wireless links [DCY93], [BBKT96], [PAL + 95]. For reasons discussed shortly, most of these results are not directly applicable to improving NFS performance. <p> Our use of link level retransmissions achieves reliability on the wireless link, but at a lower level in the protocol stack, without creating consistency problems. This has the added advantage of providing a common solution to all higher level applications and protocols. The fast retransmission approach <ref> [CI94] </ref>, improves TCP performance by notifying the transport layer prior to mobile host motion to avoid congestion control policies from being initiated.
Reference: [DCY93] <author> A. DeSimone, M.C. Chuah, </author> <title> and O.C. Yue. Throughput Performance of Transport-Layer Protocols over Wireless LANs. </title> <booktitle> In IEEE GLOBECOM, </booktitle> <pages> pages 542 - 549, </pages> <year> 1993. </year>
Reference-contexts: In response to such losses, NFS clients back-off to unnecessarily long wait periods, leading to severe performance degradation. This degradation has been previously documented in [RT95]. Previous attempts at quantifying and improving performance over wireless links have concentrated mostly on TCP <ref> [DCY93] </ref>, [YB94], [BSK95], [BB95b]. Since, most NFS implementations are UDP based [Nov89], the results from these TCP studies are not directly applicable to NFS. It is the goal of this paper to find and quantify mechanisms for improving NFS performance over wireless links. <p> Enhancements have been suggested to improve TCP performance over wireless links : split connection approaches [BB95b], [YB94], [BSAK95], and the fast retransmission approach [CI94]. Link level retransmissions have also been proposed to improve performance over wireless links <ref> [DCY93] </ref>, [BBKT96], [PAL + 95]. For reasons discussed shortly, most of these results are not directly applicable to improving NFS performance. Our research is the first to combine these issues and investigate performance improvements for NFS over wireless links. <p> Link-level solutions seem to be promising because they offer a common solution for higher level protocols and applications. However <ref> [DCY93] </ref> suggests that link-level retransmissions have an averse effect on the performance of TCP. We intend to investigate this matter further, as we believe it that is possible to come up with an elegant link-level solution which improves performance without significantly interfering with the higher layers.
Reference: [Gro88] <author> Network Working Group. </author> <title> RPC : Remote Procedure Call Protocol Specification, 1988. </title> <type> RFC 1057. </type>
Reference-contexts: If any one of the fragments is lost, the entire block is discarded and must be retransmitted. For the error prone 1 A Base-station is a bridge between the wired and the wireless segments of a network. 2 NFS uses RPC <ref> [Gro88] </ref> for remote communications. 3 wireless links, this leads to many retransmissions. A smaller block size can decrease these retransmissions. The second NFS feature which causes poor performance is the exponential back-off algorithm which is used by the NFS clients.
Reference: [HHRB92] <author> P. Honeyman, L. Huston, J. Rees, and D. Bachmann. </author> <title> The Little Work Project. </title> <booktitle> In Third IEEE Workshop on Workstation Operating Systems, </booktitle> <year> 1992. </year>
Reference-contexts: Finally, section 6 summarizes this paper and presents our conclusions. 2 Related Work and Solution Approach Much research has been done to optimize NFS performance on wired LANs [Jus89], [Jus94], [PJS + 94]. New file systems have been developed to support disconnected operation via disk-caching [SK92], [SNKP94], <ref> [HHRB92] </ref>. For improving application performance over wireless links, an M-RPC system has been proposed [BB95a]. Enhancements have been suggested to improve TCP performance over wireless links : split connection approaches [BB95b], [YB94], [BSAK95], and the fast retransmission approach [CI94]. <p> Overall, work on improving NFS performance has so far been limited to wired networks with a focus on NFS servers. Hence, these studies are orthogonal to ours. Using disk-caching, Coda [SK92], its later version Odyssey [SNKP94], and Little Work <ref> [HHRB92] </ref> provide mechanisms for disconnected and intermittent operation. However these systems are not in wide use. It is possible to borrow ideas from them for use with the NFS client on a mobile-host. <p> Using disk-caching (which has been proven as an effective technique in the Coda [SK92], Odyssey [SNKP94] and Little Work <ref> [HHRB92] </ref> projects) for read-only files [ZD93], is also being considered. 12 Besides, the linear (followed by exponential) back-off described in Section 4.3, we need to tune the NFS client to behave intelligently during cell-switches (hand-offs). The information indicating an imminent cell-switch is usually available to the wireless device driver.
Reference: [Jus89] <author> C. Juszczak. </author> <title> Improving the Performance and Correctness of an NFS Server. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 53 - 63, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: We propose some ideas for future investigation in section 5. Finally, section 6 summarizes this paper and presents our conclusions. 2 Related Work and Solution Approach Much research has been done to optimize NFS performance on wired LANs <ref> [Jus89] </ref>, [Jus94], [PJS + 94]. New file systems have been developed to support disconnected operation via disk-caching [SK92], [SNKP94], [HHRB92]. For improving application performance over wireless links, an M-RPC system has been proposed [BB95a]. <p> We use linear back-off and smaller block sizes on the NFS client on one hand, and link-layer retransmissions on the other to obtain performance improvements. 2.1 Related Work The performance of NFS over traditional wired LANs has been improved by using a server reply cache <ref> [Jus89] </ref>, by using write gathering to improve write throughput [Jus94], and 2 by allowing larger than 8KB block sizes and allowing asynchronous writes [PJS + 94].
Reference: [Jus94] <author> C. Juszczak. </author> <title> Improving the Write Performance of an NFS Server. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <month> January </month> <year> 1994. </year>
Reference-contexts: We propose some ideas for future investigation in section 5. Finally, section 6 summarizes this paper and presents our conclusions. 2 Related Work and Solution Approach Much research has been done to optimize NFS performance on wired LANs [Jus89], <ref> [Jus94] </ref>, [PJS + 94]. New file systems have been developed to support disconnected operation via disk-caching [SK92], [SNKP94], [HHRB92]. For improving application performance over wireless links, an M-RPC system has been proposed [BB95a]. <p> and smaller block sizes on the NFS client on one hand, and link-layer retransmissions on the other to obtain performance improvements. 2.1 Related Work The performance of NFS over traditional wired LANs has been improved by using a server reply cache [Jus89], by using write gathering to improve write throughput <ref> [Jus94] </ref>, and 2 by allowing larger than 8KB block sizes and allowing asynchronous writes [PJS + 94].
Reference: [MJ93] <author> S. McCanne and V. Jacobson. </author> <title> The BSD Packet Filter: A New Architecture for User-Level Packet Capture . In USENIX Winter Conference, </title> <month> January </month> <year> 1993. </year>
Reference-contexts: There are two mobile NFS clients: an IBM PS/2 (shivalik), and an IBM RT-PC (narmada) which access the NFS server through the base-station using a 1 Mbps Infra-Red (IR) link. We use the DEC-ALPHA (congo) to monitor traffic on the ethernet by running tcpdump <ref> [MJ93] </ref>. We studied the performance of NFS reads and writes by measuring the response times 4 obtained for file transfers to 3 and from 4 the local disks of the mobile-hosts.
Reference: [Nov89] <author> B. Novicki. </author> <title> Transport Issues in the Network File System. </title> <journal> ACM Computer Communications Review, </journal> <volume> 19(2):16 - 20, </volume> <year> 1989. </year>
Reference-contexts: This degradation has been previously documented in [RT95]. Previous attempts at quantifying and improving performance over wireless links have concentrated mostly on TCP [DCY93], [YB94], [BSK95], [BB95b]. Since, most NFS implementations are UDP based <ref> [Nov89] </ref>, the results from these TCP studies are not directly applicable to NFS. It is the goal of this paper to find and quantify mechanisms for improving NFS performance over wireless links.
Reference: [PAL + 95] <author> S. Paul, E. Ayanoglu, T.F. LaPorta, K.H. Chen, K.K. Sabnani, and R.D. Gitlin. </author> <title> An Asymmetric Link-layer Protocol for Digital Cellular Communications. </title> <booktitle> In IEEE INFOCOM, </booktitle> <year> 1995. </year>
Reference-contexts: Enhancements have been suggested to improve TCP performance over wireless links : split connection approaches [BB95b], [YB94], [BSAK95], and the fast retransmission approach [CI94]. Link level retransmissions have also been proposed to improve performance over wireless links [DCY93], [BBKT96], <ref> [PAL + 95] </ref>. For reasons discussed shortly, most of these results are not directly applicable to improving NFS performance. Our research is the first to combine these issues and investigate performance improvements for NFS over wireless links.
Reference: [PJS + 94] <author> B. Pawlowski, C. Juszczak, P. Staubach, C. Smith, D. Lebel, and D. Hitz. </author> <title> NFS Version 3 Design and Implementation. </title> <booktitle> In USENIX Summer Conference, </booktitle> <year> 1994. </year>
Reference-contexts: The Network File System (NFS) protocol has been widely used on wired LANs to provide a mechanism for remote file access [WLS + 85], [SGK + 85], <ref> [PJS + 94] </ref>. Users migrating to mobile-hosts from stationary workstations want to continue to use NFS to access their files. However, the bursty and higher error rates prevalent over wireless media pose performance problems for mobile applications which use NFS mounted files. <p> We propose some ideas for future investigation in section 5. Finally, section 6 summarizes this paper and presents our conclusions. 2 Related Work and Solution Approach Much research has been done to optimize NFS performance on wired LANs [Jus89], [Jus94], <ref> [PJS + 94] </ref>. New file systems have been developed to support disconnected operation via disk-caching [SK92], [SNKP94], [HHRB92]. For improving application performance over wireless links, an M-RPC system has been proposed [BB95a]. <p> on the other to obtain performance improvements. 2.1 Related Work The performance of NFS over traditional wired LANs has been improved by using a server reply cache [Jus89], by using write gathering to improve write throughput [Jus94], and 2 by allowing larger than 8KB block sizes and allowing asynchronous writes <ref> [PJS + 94] </ref>. These modifications improve NFS performance at the NFS server and would not significantly help the performance of NFS in a wireless environment because the bottleneck are the mobile NFS client and the transfer over the wireless link.
Reference: [RT95] <author> C.D. Rais and S.K. Tripathi. </author> <title> Measuring NFS Performance over Wireless Networks. </title> <type> Technical Report CS-TR-3582, </type> <institution> University of Maryland, College Park, </institution> <year> 1995. </year>
Reference-contexts: These burst periods are of the order of a hundred milli-seconds. In response to such losses, NFS clients back-off to unnecessarily long wait periods, leading to severe performance degradation. This degradation has been previously documented in <ref> [RT95] </ref>. Previous attempts at quantifying and improving performance over wireless links have concentrated mostly on TCP [DCY93], [YB94], [BSK95], [BB95b]. Since, most NFS implementations are UDP based [Nov89], the results from these TCP studies are not directly applicable to NFS. <p> In order to get consistent results, the ethernet segment holding the static-hosts was isolated from the rest of the building network while running experiments. 3.2 Error Model We use a 2-state error model [BBKT96], <ref> [RT95] </ref> as shown in Figure 2 to represent the quality of a channel between the mobile-host and the base-station. The good-state is the normal mode of operation when bits flow intact between the target and source devices. <p> We chose uniform distributions since they are more realistic.). This error model was incorporated into the output and input routines of the mobile-host's device drivers 5 . Based on our experience and results from [BBKT96] and <ref> [RT95] </ref>, we chose a mean of 1000 milli-seconds for the good-period (time spent in the good-state) and experimented with means of 40 and 80 6 milli-seconds for the bad-period (time spent in the bad-state). The error model was implemented by using the kernel timeout mechanism on the mobile-hosts.
Reference: [SGK + 85] <author> R. Sandberg, D. Goldberg, S. Kleinman, D. Walsh, and B. Lyon. </author> <title> Design and Implementation of the Sun Network File System. </title> <booktitle> In USENIX Summer Conference, </booktitle> <year> 1985. </year>
Reference-contexts: Unable to store all their data on their local disks, users often must fetch files from servers on the wired network via wireless links. The Network File System (NFS) protocol has been widely used on wired LANs to provide a mechanism for remote file access [WLS + 85], <ref> [SGK + 85] </ref>, [PJS + 94]. Users migrating to mobile-hosts from stationary workstations want to continue to use NFS to access their files. However, the bursty and higher error rates prevalent over wireless media pose performance problems for mobile applications which use NFS mounted files.
Reference: [SK92] <author> M. Satyanaraynan and J.J. Kistler. </author> <title> Disconnected Operation in the Coda File System. </title> <journal> ACM TOCS, </journal> <volume> 10(1):3 - 25, </volume> <year> 1992. </year>
Reference-contexts: Finally, section 6 summarizes this paper and presents our conclusions. 2 Related Work and Solution Approach Much research has been done to optimize NFS performance on wired LANs [Jus89], [Jus94], [PJS + 94]. New file systems have been developed to support disconnected operation via disk-caching <ref> [SK92] </ref>, [SNKP94], [HHRB92]. For improving application performance over wireless links, an M-RPC system has been proposed [BB95a]. Enhancements have been suggested to improve TCP performance over wireless links : split connection approaches [BB95b], [YB94], [BSAK95], and the fast retransmission approach [CI94]. <p> Overall, work on improving NFS performance has so far been limited to wired networks with a focus on NFS servers. Hence, these studies are orthogonal to ours. Using disk-caching, Coda <ref> [SK92] </ref>, its later version Odyssey [SNKP94], and Little Work [HHRB92] provide mechanisms for disconnected and intermittent operation. However these systems are not in wide use. It is possible to borrow ideas from them for use with the NFS client on a mobile-host. <p> We intend to investigate this matter further, as we believe it that is possible to come up with an elegant link-level solution which improves performance without significantly interfering with the higher layers. Using disk-caching (which has been proven as an effective technique in the Coda <ref> [SK92] </ref>, Odyssey [SNKP94] and Little Work [HHRB92] projects) for read-only files [ZD93], is also being considered. 12 Besides, the linear (followed by exponential) back-off described in Section 4.3, we need to tune the NFS client to behave intelligently during cell-switches (hand-offs).
Reference: [SNKP94] <author> M. Satyanraynan, B. Noble, P. Kumar, and M. Price. </author> <title> Application-Aware Adaptation for Mobile Computing. </title> <booktitle> In 6th ACM SIGOPS European Workshop, </booktitle> <month> September </month> <year> 1994. </year>
Reference-contexts: Finally, section 6 summarizes this paper and presents our conclusions. 2 Related Work and Solution Approach Much research has been done to optimize NFS performance on wired LANs [Jus89], [Jus94], [PJS + 94]. New file systems have been developed to support disconnected operation via disk-caching [SK92], <ref> [SNKP94] </ref>, [HHRB92]. For improving application performance over wireless links, an M-RPC system has been proposed [BB95a]. Enhancements have been suggested to improve TCP performance over wireless links : split connection approaches [BB95b], [YB94], [BSAK95], and the fast retransmission approach [CI94]. <p> Overall, work on improving NFS performance has so far been limited to wired networks with a focus on NFS servers. Hence, these studies are orthogonal to ours. Using disk-caching, Coda [SK92], its later version Odyssey <ref> [SNKP94] </ref>, and Little Work [HHRB92] provide mechanisms for disconnected and intermittent operation. However these systems are not in wide use. It is possible to borrow ideas from them for use with the NFS client on a mobile-host. <p> We intend to investigate this matter further, as we believe it that is possible to come up with an elegant link-level solution which improves performance without significantly interfering with the higher layers. Using disk-caching (which has been proven as an effective technique in the Coda [SK92], Odyssey <ref> [SNKP94] </ref> and Little Work [HHRB92] projects) for read-only files [ZD93], is also being considered. 12 Besides, the linear (followed by exponential) back-off described in Section 4.3, we need to tune the NFS client to behave intelligently during cell-switches (hand-offs).
Reference: [WLS + 85] <author> D. Walsh, B. Lyon, G. Sager, J.M. Chang, D. Goldberg, T. Lyon, R. Sandberg, and P. Weis. </author> <title> Overview of the Sun Network File System. </title> <booktitle> In USENIX Winter Conference, </booktitle> <year> 1985. </year> <month> 14 </month>
Reference-contexts: Unable to store all their data on their local disks, users often must fetch files from servers on the wired network via wireless links. The Network File System (NFS) protocol has been widely used on wired LANs to provide a mechanism for remote file access <ref> [WLS + 85] </ref>, [SGK + 85], [PJS + 94]. Users migrating to mobile-hosts from stationary workstations want to continue to use NFS to access their files. However, the bursty and higher error rates prevalent over wireless media pose performance problems for mobile applications which use NFS mounted files.
Reference: [YB94] <author> R. Yavatkar and N. Bhagwat. </author> <title> Improving End-to-End Performance of TCP over Mobile Internetworks. </title> <booktitle> In Mobile 94 Workshop on Mobile Computing Systems and Applications, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: In response to such losses, NFS clients back-off to unnecessarily long wait periods, leading to severe performance degradation. This degradation has been previously documented in [RT95]. Previous attempts at quantifying and improving performance over wireless links have concentrated mostly on TCP [DCY93], <ref> [YB94] </ref>, [BSK95], [BB95b]. Since, most NFS implementations are UDP based [Nov89], the results from these TCP studies are not directly applicable to NFS. It is the goal of this paper to find and quantify mechanisms for improving NFS performance over wireless links. <p> New file systems have been developed to support disconnected operation via disk-caching [SK92], [SNKP94], [HHRB92]. For improving application performance over wireless links, an M-RPC system has been proposed [BB95a]. Enhancements have been suggested to improve TCP performance over wireless links : split connection approaches [BB95b], <ref> [YB94] </ref>, [BSAK95], and the fast retransmission approach [CI94]. Link level retransmissions have also been proposed to improve performance over wireless links [DCY93], [BBKT96], [PAL + 95]. For reasons discussed shortly, most of these results are not directly applicable to improving NFS performance. <p> Prefetching and disk-caching decrease the time spent by the user waiting for file transfers, but that by itself does not solve the problem of poor throughput and wireless link utilization. We discuss the use of disk caching in Section 5. In the TCP split connection approaches [BB95b], <ref> [YB94] </ref>, [BSAK95], the base-station 1 buffers packets being sent to the mobile hosts in its vicinity. The base-station retransmits any lost packets to prevent end-to-end retransmission. The M-RPC approach [BB95a], is a variation of the TCP split connection approach.
Reference: [ZD93] <author> E. Zadok and D. Duchamp. </author> <title> Discovery and Hot Replacement of Read-Only File Systems, with Application to Mobile Computing. </title> <booktitle> In USENIX Summer Conference, </booktitle> <pages> pages 69 - 85, </pages> <year> 1993. </year> <month> 15 </month>
Reference-contexts: Using disk-caching (which has been proven as an effective technique in the Coda [SK92], Odyssey [SNKP94] and Little Work [HHRB92] projects) for read-only files <ref> [ZD93] </ref>, is also being considered. 12 Besides, the linear (followed by exponential) back-off described in Section 4.3, we need to tune the NFS client to behave intelligently during cell-switches (hand-offs). The information indicating an imminent cell-switch is usually available to the wireless device driver.
References-found: 22

