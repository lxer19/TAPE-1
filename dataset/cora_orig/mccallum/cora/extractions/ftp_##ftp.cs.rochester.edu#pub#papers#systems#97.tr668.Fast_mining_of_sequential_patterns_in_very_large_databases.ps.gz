URL: ftp://ftp.cs.rochester.edu/pub/papers/systems/97.tr668.Fast_mining_of_sequential_patterns_in_very_large_databases.ps.gz
Refering-URL: http://www.cs.indiana.edu/cstr/search/?Knowledge+discovery+MINK%3D2
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Fast Mining of Sequential Patterns in Very Large Databases  
Author: Mohammed J. Zaki 
Keyword: Knowledge Discovery, Data Mining, Sequential Patterns, Sequence Discovery, Temporal Association Rules.  
Note: supported this work.  
Address: Rochester, New York 14627  
Affiliation: The University of Rochester Computer Science Department  The University of Rochester Computer Science Department  
Pubnum: Technical Report 668  
Email: zaki@cs.rochester.edu  
Date: November 1997  
Abstract: In this paper we present a new algorithm for fast discovery of Sequential Patterns. Given a collection of items, a set of records over those items, and records belonging to a customer, the task is to identify all the commonly occurring sequences of items bought by the customers. An example of a sequential pattern could be that "30% of the people buying Douglas Adam's The Hitchhiker's Guide to the Galaxy bought The Restaurant at the End of the Universe within a month". The existing solutions to this problem make repeated database scans, and use complex hash structures which have poor locality. Our new SPADE algorithm uses only simple join operations, and finds all frequent sequences in usually only three database scans. With the help of extensive experiments, we show that SPADE outperforms the best previous algorithm by more than a factor of 2, and by more than an order of magnitude in the incremental case. It also has excellent scale-up properties with respect to the number of customers, the number of transactions per customer, the transaction size, and the size of potential maximal frequent sequences. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Agrawal, H. Mannila, R. Srikant, H. Toivonen, and A. Inkeri Verkamo. </author> <title> Fast discovery of association rules. </title> <editor> In U. Fayyad and et al, editors, </editor> <booktitle> Advances in Knowledge Discovery and Data Mining. </booktitle> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: Since sequential patterns are essentially associations over temporal data, they utilize some of the ideas initially proposed for the discovery of association rules <ref> [1, 9, 14] </ref>. Our new algorithm is based on the fast association mining techniques presented by us in [14]. Other somewhat relevant work includes discovery of association rules when the quantity of items bought is also considered [12], and when a taxonomy is imposed on the items [4, 11]. <p> Lemma 2 If a sequence fi is frequent, then all its subsequences ff fi are also frequent. proof: Obvious from definition of support. This property has been successfully exploited in many data mining algorithms for sequential patterns, frequent episodes, and association rules <ref> [1, 3, 5, 6, 13, 14] </ref>. As described earlier the GSP algorithm explores the lattice in a bottom-up manner, forming new candidate sets from those sequences found frequent in the previous level, and making a full database scan per level.
Reference: [2] <author> R. Agrawal and J. Shafer. </author> <title> Parallel mining of association rules. </title> <journal> In IEEE Trans. on Knowledge and Data Engg., </journal> <pages> pages 8(6) 962-969, </pages> <year> 1996. </year>
Reference-contexts: Other somewhat relevant work includes discovery of association rules when the quantity of items bought is also considered [12], and when a taxonomy is imposed on the items [4, 11]. Lately, there has been an increasing interest in developing efficient parallel algorithms for these problems <ref> [2, 15] </ref>. 1.5 Contributions The best existing algorithm for sequential patterns is the GSP algorithm. It essentially performs a level-wise or breadth-first search of the sequence lattice spanned by the subsequence relation. GSP makes one database scan per level.
Reference: [3] <author> R. Agrawal and R. Srikant. </author> <title> Mining sequential patterns. </title> <booktitle> In Intl. Conf. on Data Engg., </booktitle> <year> 1995. </year>
Reference-contexts: Besides the retail sales and catalog applications, such patterns are useful in other domains such as telecommunications (e.g. alarm diagnosis), and medicine (e.g. identifying symptoms the precede diseases). 1.1 Problem Formulation The problem of mining sequential patterns was proposed in <ref> [3] </ref>. It can be stated as follows: Let I = fi 1 ; i 2 ; ; i m g be a set of m distinct attributes, also called items. <p> Since the rule generation step is quite straightforward, in the rest of the paper we will only concentrate on the frequent sequence discovery phase. 1.4 Related Work The problem of mining sequential patterns was introduced in <ref> [3] </ref>. It also presented three algorithms for solving this problem. Two of the algorithms, AprioriSome and DynamicSome, generated only maximal sequential patterns. However, many applications require all frequent patterns. The AprioriAll algorithm found all patterns, and was shown to perform equal to or better than the other approaches. <p> Lemma 2 If a sequence fi is frequent, then all its subsequences ff fi are also frequent. proof: Obvious from definition of support. This property has been successfully exploited in many data mining algorithms for sequential patterns, frequent episodes, and association rules <ref> [1, 3, 5, 6, 13, 14] </ref>. As described earlier the GSP algorithm explores the lattice in a bottom-up manner, forming new candidate sets from those sequences found frequent in the previous level, and making a full database scan per level. <p> Like [13] we set N S = 5000, N I = 25000 and N = 10000. The number of data-sequences was set to D = 200; 000. Table 3 shows the datasets with their parameter settings. We refer the reader to <ref> [3] </ref> for additional details on the dataset generation. Real-life Dataset The real-life dataset was obtained from a Natural Language Planning domain. The planner generates plans for routing commodities from one city to another. A "customer" corresponds to a plan identifier, while a "transaction" corresponds to an event in a plan.
Reference: [4] <author> J. Han and Y. Fu. </author> <title> Discovery of multiple-level association rules from large databases. </title> <booktitle> In 21st VLDB Conf., </booktitle> <year> 1995. </year>
Reference-contexts: Our new algorithm is based on the fast association mining techniques presented by us in [14]. Other somewhat relevant work includes discovery of association rules when the quantity of items bought is also considered [12], and when a taxonomy is imposed on the items <ref> [4, 11] </ref>. Lately, there has been an increasing interest in developing efficient parallel algorithms for these problems [2, 15]. 1.5 Contributions The best existing algorithm for sequential patterns is the GSP algorithm. It essentially performs a level-wise or breadth-first search of the sequence lattice spanned by the subsequence relation.
Reference: [5] <author> H. Mannila and H. Toivonen. </author> <title> Discovering generalized episodes using minimal oc-curences. </title> <booktitle> In 2nd Intl. Conf. Knowledge Discovery and Data Mining, </booktitle> <year> 1996. </year>
Reference-contexts: Our definition of a sequence can be expressed as an episode, however their work is targeted to discover the frequent episodes in a single long event sequence, while we are interested in finding frequent sequences across many different customer-sequences. They further extended their framework in <ref> [5] </ref> to discover generalized episodes, which allows one to express arbitrary unary conditions on individual episode events, or binary conditions on event pairs. Since sequential patterns are essentially associations over temporal data, they utilize some of the ideas initially proposed for the discovery of association rules [1, 9, 14]. <p> Lemma 2 If a sequence fi is frequent, then all its subsequences ff fi are also frequent. proof: Obvious from definition of support. This property has been successfully exploited in many data mining algorithms for sequential patterns, frequent episodes, and association rules <ref> [1, 3, 5, 6, 13, 14] </ref>. As described earlier the GSP algorithm explores the lattice in a bottom-up manner, forming new candidate sets from those sequences found frequent in the previous level, and making a full database scan per level.
Reference: [6] <author> H. Mannila, H. Toivonen, and I. Verkamo. </author> <title> Discovering frequent episodes in sequences. </title> <booktitle> In 1st Intl. Conf. Knowledge Discovery and Data Mining, </booktitle> <year> 1995. </year>
Reference-contexts: In subsequent work [13], the same authors proposed the GSP algorithm that outperformed AprioriAll by up to 20 times. It also introduced maximum gap, minimum gap, and sliding window constraints on the discovered sequences. 3 The problem of finding frequent episodes in a sequence of events was presented in <ref> [6] </ref>. An episode consists of a set of events and an associated partial order over the events. <p> Lemma 2 If a sequence fi is frequent, then all its subsequences ff fi are also frequent. proof: Obvious from definition of support. This property has been successfully exploited in many data mining algorithms for sequential patterns, frequent episodes, and association rules <ref> [1, 3, 5, 6, 13, 14] </ref>. As described earlier the GSP algorithm explores the lattice in a bottom-up manner, forming new candidate sets from those sequences found frequent in the previous level, and making a full database scan per level.
Reference: [7] <author> S. Parthasarathy, M. J. Zaki, and W. Li. </author> <title> Memory placement for parallel data mining on shared-memory systems. </title> <type> Technical Report URCS TR 653, </type> <institution> University of Rochester, </institution> <month> November </month> <year> 1997. </year>
Reference-contexts: If the maximum frequent sequence length is k, then GSP makes k database passes. It thus incurs high I/O costs. Moreover, to facilitate fact support gathering the sequences to be counted are stored in a complex hash-tree structure. Such structures have been shown to suffer from poor locality <ref> [7] </ref>. There is also an additional overhead for building and searching these structures. In this paper we propose a new algorithm called SPADE (Sequential PAttern Discovery using Equivalence classes). It decomposes the problem into several smaller sub-problems, each of which can be solved independently.
Reference: [8] <institution> IBM's Quest Data Mining Project. http://www.almaden.ibm.com/ cs/ quest/ syn-data.html. IBM Almaden Research Center, </institution> <address> San Jose, CA 95120. </address>
Reference-contexts: We used the publicly available dataset generation code from the IBM Quest data mining project <ref> [8] </ref>. These datasets mimic real-world transactions, where people buy a sequence of sets of items. Some customers may buy only some items from the sequences, or they may buy items from multiple sequences.
Reference: [9] <author> A. Savasere, E. Omiecinski, and S. Navathe. </author> <title> An efficient algorithm for mining association rules in large databases. </title> <booktitle> In 21st VLDB Conf., </booktitle> <year> 1995. </year>
Reference-contexts: Since sequential patterns are essentially associations over temporal data, they utilize some of the ideas initially proposed for the discovery of association rules <ref> [1, 9, 14] </ref>. Our new algorithm is based on the fast association mining techniques presented by us in [14]. Other somewhat relevant work includes discovery of association rules when the quantity of items bought is also considered [12], and when a taxonomy is imposed on the items [4, 11].
Reference: [10] <author> E. Simoudis. </author> <title> Reality check for data mining. </title> <journal> In IEEE Expert: Intelligent Systems and Their Applications, </journal> <pages> pages 11(5) 26-33, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: The term KDD refers to the overall process of discovering new insight, while data mining refers to the core model/pattern discovery step. The other steps include data selection, cleaning and preprocessing, transformation, data-mining task and algorithm selection, and finally post-processing. Two main forms of data mining can be identified <ref> [10] </ref>. In verification-driven data mining the user postulates a hypothesis, and the system tries to validate it. The common verification-driven operations include query and reporting, multidimensional analysis, and statistical analysis. Discovery-driven mining, on the other hand automatically extracts new information.
Reference: [11] <author> R. Srikant and R. Agrawal. </author> <title> Mining generalized association rules. </title> <booktitle> In 21st VLDB Conf., </booktitle> <year> 1995. </year>
Reference-contexts: Our new algorithm is based on the fast association mining techniques presented by us in [14]. Other somewhat relevant work includes discovery of association rules when the quantity of items bought is also considered [12], and when a taxonomy is imposed on the items <ref> [4, 11] </ref>. Lately, there has been an increasing interest in developing efficient parallel algorithms for these problems [2, 15]. 1.5 Contributions The best existing algorithm for sequential patterns is the GSP algorithm. It essentially performs a level-wise or breadth-first search of the sequence lattice spanned by the subsequence relation.
Reference: [12] <author> R. Srikant and R. Agrawal. </author> <title> Mining quantitative association rules in large relational tables. </title> <booktitle> In ACM SIGMOD Conf. Management of Data, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Our new algorithm is based on the fast association mining techniques presented by us in [14]. Other somewhat relevant work includes discovery of association rules when the quantity of items bought is also considered <ref> [12] </ref>, and when a taxonomy is imposed on the items [4, 11]. Lately, there has been an increasing interest in developing efficient parallel algorithms for these problems [2, 15]. 1.5 Contributions The best existing algorithm for sequential patterns is the GSP algorithm.
Reference: [13] <author> R. Srikant and R. Agrawal. </author> <title> Mining sequential patterns: Generalizations and performance improvements. </title> <booktitle> In 5th Intl. Conf. Extending Database Technology, </booktitle> <month> March </month> <year> 1996. </year>
Reference-contexts: Two of the algorithms, AprioriSome and DynamicSome, generated only maximal sequential patterns. However, many applications require all frequent patterns. The AprioriAll algorithm found all patterns, and was shown to perform equal to or better than the other approaches. In subsequent work <ref> [13] </ref>, the same authors proposed the GSP algorithm that outperformed AprioriAll by up to 20 times. It also introduced maximum gap, minimum gap, and sliding window constraints on the discovered sequences. 3 The problem of finding frequent episodes in a sequence of events was presented in [6]. <p> in the database do Increment count of all ff 2 C k contained in S F k = fff 2 C k jff:sup min supg; Set of all frequent sequences = S 2 The GSP Algorithm The best previous algorithm for mining sequential patterns is called GSP Generalized Sequential Patterns <ref> [13] </ref>. GSP makes multiple passes over the database. In the first pass, all single items (1-sequences) are counted. From the frequent items a set of candidate 2-sequences are formed. Another pass is made to gather their support. <p> For each such subsequence a search is made in the hash-tree. If a candidate in a leaf matches the subsequence, its count is incremented. The GSP algorithm is shown in figure 3. For more details on the specific mechanisms for constructing and searching hash-trees, please refer to <ref> [13] </ref>. <p> Lemma 2 If a sequence fi is frequent, then all its subsequences ff fi are also frequent. proof: Obvious from definition of support. This property has been successfully exploited in many data mining algorithms for sequential patterns, frequent episodes, and association rules <ref> [1, 3, 5, 6, 13, 14] </ref>. As described earlier the GSP algorithm explores the lattice in a bottom-up manner, forming new candidate sets from those sequences found frequent in the previous level, and making a full database scan per level. <p> Except for the assumption that we have enough memory for E k , our current implementation is fully disk-based. 4 Experimental Results In this section we compare the performance of SPADE with the GSP algorithm. The GSP algorithm is implemented as described in <ref> [13] </ref>. Our implementation of GSP also uses an optimized method for computing the frequent 2-sequences (F 2 ). This method is similar to the GenF 2 routine used in SPADE (see section 3.4), except that the database is already in the horizontal format. <p> Table 2: Dataset Generation Parameters Dataset C T S I D Size (MB) C10-T2.5-S4-I1.25-D200K 10 2.5 4 1.25 200,000 36.8 C10-T5-S4-I2.5-D200K 10 5 4 2.5 200,000 54.3 C20-T2.5-S4-I2.5-D200K 20 2.5 4 2.5 200,000 66.5 Table 3: Synthetic Datasets Synthetic Datasets The synthetic datasets are the same as those used in <ref> [13] </ref>, albeit with twice as many customers. We used the publicly available dataset generation code from the IBM Quest data mining project [8]. These datasets mimic real-world transactions, where people buy a sequence of sets of items. <p> Next a customer of average 20 C transactions is created, and sequences in N S are assigned to different customer elements, respecting the average transaction size of T . The generation stops when D customers have been generated. Like <ref> [13] </ref> we set N S = 5000, N I = 25000 and N = 10000. The number of data-sequences was set to D = 200; 000. Table 3 shows the datasets with their parameter settings. We refer the reader to [3] for additional details on the dataset generation.
Reference: [14] <author> M. J. Zaki, S. Parthasarathy, M. Ogihara, and W. Li. </author> <title> New algorithms for fast discovery of association rules. </title> <booktitle> In 3rd Intl. Conf. on Knowledge Discovery and Data Mining, </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: Since sequential patterns are essentially associations over temporal data, they utilize some of the ideas initially proposed for the discovery of association rules <ref> [1, 9, 14] </ref>. Our new algorithm is based on the fast association mining techniques presented by us in [14]. Other somewhat relevant work includes discovery of association rules when the quantity of items bought is also considered [12], and when a taxonomy is imposed on the items [4, 11]. <p> Since sequential patterns are essentially associations over temporal data, they utilize some of the ideas initially proposed for the discovery of association rules [1, 9, 14]. Our new algorithm is based on the fast association mining techniques presented by us in <ref> [14] </ref>. Other somewhat relevant work includes discovery of association rules when the quantity of items bought is also considered [12], and when a taxonomy is imposed on the items [4, 11]. <p> Lemma 2 If a sequence fi is frequent, then all its subsequences ff fi are also frequent. proof: Obvious from definition of support. This property has been successfully exploited in many data mining algorithms for sequential patterns, frequent episodes, and association rules <ref> [1, 3, 5, 6, 13, 14] </ref>. As described earlier the GSP algorithm explores the lattice in a bottom-up manner, forming new candidate sets from those sequences found frequent in the previous level, and making a full database scan per level.
Reference: [15] <author> M. J. Zaki, S. Parthasarathy, M. Ogihara, and W. Li. </author> <title> New parallel algorithms for fast discovery of association rules. Data Mining and Knowledge Discovery: </title> <note> An International Journal, to appear, </note> <month> December </month> <year> 1997. </year> <month> 27 </month>
Reference-contexts: Other somewhat relevant work includes discovery of association rules when the quantity of items bought is also considered [12], and when a taxonomy is imposed on the items [4, 11]. Lately, there has been an increasing interest in developing efficient parallel algorithms for these problems <ref> [2, 15] </ref>. 1.5 Contributions The best existing algorithm for sequential patterns is the GSP algorithm. It essentially performs a level-wise or breadth-first search of the sequence lattice spanned by the subsequence relation. GSP makes one database scan per level.
References-found: 15

