URL: ftp://ftp.cs.vu.nl/pub/papers/globe/IR-409.96.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/tom/590AT.html
Root-URL: 
Title: Unifying Internet Services Using Distributed Shared Objects  
Author: Philip Homburg Maarten van Steen Andrew S. Tanenbaum 
Affiliation: Faculty of Mathematics and Computer Science  
Abstract: Internal report IR-409 October 11, 1996 Abstract Developing wide area applications such as those for sharing data across the Internet is unnecessarily difficult. The main problem is the widespread use of a communication paradigm that is too low level. We will show how wide area application development can be made easier when using distributed shared objects instead of a communication-oriented model. An object in our model is physically distributed, with multiple copies of its state on different machines. All implementation aspects such as replication, distribution, and migration of state, are hidden from users through an object's interface. In this paper, we concentrate on the application of distributed shared objects, by providing an outline of a middleware solution that permits integration of the Internet services for e-mail, News, file transfer, and Web documents. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> The Java Language Environment A White Paper. Sun Microsystems, Mountain View, </institution> <address> CA, </address> <month> Oct. </month> <year> 1995. </year>
Reference-contexts: However, for our approach to be fully usable, some problems still need to be addressed. The main problem is the security risks associated with loading new code in a running executable. Experience with Java <ref> [1] </ref> shows that downloading code over the Internet is not without risk [6]. However, in our case we expect fewer risks as class implementations will generally be locally available, and maintained by the user or by the local system administrator.
Reference: [2] <author> T. Berners-Lee, R. Fielding, and H. Frystyk. </author> <title> Hypertext Transfer Protocol - HTTP/1.0. Internet-Draft, </title> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: These are electronic mail (SMTP [12]), USENET News (NNTP [9]), file transfer (FTP [3]), and the Web (HTTP <ref> [2] </ref>).
Reference: [3] <author> A. Bhushan, R. Braden, W. Crowther, E. Harslem, and J. Heafner. </author> <title> File Transfer Protocol. </title> <type> RFC 172, </type> <month> June </month> <year> 1971. </year>
Reference-contexts: To illustrate the problems for sharing data in wide area networks caused by the lack of proper communication facilities, we focus in this paper on four applications used in the Internet, and their corresponding protocols. These are electronic mail (SMTP [12]), USENET News (NNTP [9]), file transfer (FTP <ref> [3] </ref>), and the Web (HTTP [2]).
Reference: [4] <author> N. Budhijara, K. Marzullo, F.B. Schneider, and S. Toueg. </author> <title> The Primary-Backup Approach. </title> <editor> In S. Mul-lender, (ed.), </editor> <booktitle> Distributed Systems, </booktitle> <pages> pp. 199-216. </pages> <publisher> Addison-Wesley, </publisher> <address> Wokingham, 2nd edition, </address> <year> 1993. </year>
Reference-contexts: This is also the case, for example, with functionality implemented through CGI scripts. Primary-Backup Replication. A simple extension to the client/server replication object is primary-backup replication <ref> [4] </ref>. The state of the distributed object is replicated and one copy is designated (or elected) as the primary copy. All operations on the distributed object are forwarded to the primary.
Reference: [5] <author> A. Chankhunthod, P.B. Danzig, C. Neerdaels, M.F. Schwartz, and K.J. Worrell. </author> <title> A Hierarchical Internet Object Cache. </title> <type> Technical Report CU-CS-766-95, </type> <institution> Department of Computer Science, University of Col-orado Boulder, </institution> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: FTP and HTTP. FTP and HTTP proxies can be written using the same techniques as e-mail proxies, with one important extension. Most WWW browsers support proxy HTTP daemons. These daemons are often used to provide site-wide caching for firewall security, but also for performance reasons <ref> [5] </ref>. A caching HTTP proxy is a good way to provide existing browsers with access to all distributed objects.
Reference: [6] <author> D. Dean and D.S. Wallach. </author> <title> Security Flaws in the HotJava Web Browser. </title> <institution> Department of Computer Science, Princeton University, </institution> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: However, for our approach to be fully usable, some problems still need to be addressed. The main problem is the security risks associated with loading new code in a running executable. Experience with Java [1] shows that downloading code over the Internet is not without risk <ref> [6] </ref>. However, in our case we expect fewer risks as class implementations will generally be locally available, and maintained by the user or by the local system administrator. Unlike Java, we require conformance at the level of interfaces, not on the level of implementations.
Reference: [7] <author> P. Homburg, L. van Doorn, M. van Steen, A. Tanenbaum, and W. de Jonge. </author> <title> An Object Model for Flexible Distributed Systems. </title> <booktitle> In Proc. First ASCI Annual Conf. </booktitle> , <pages> pp. 69-78, </pages> <address> Heijen, The Netherlands, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: We first describe what a distributed shared object is, and then focus on the support for replication. 3.1 Object Organization In our model, processes interact and communicate through distributed shared objects <ref> [7, 17, 8] </ref>. Each object offers one or more interfaces, each consisting of a set of methods. Objects are passive, but multiple processes may access the same object simultaneously, allowing them to communicate by reading and changing the object's state through method invocations.
Reference: [8] <author> P. Homburg, M. van Steen, </author> <title> and A.S. Tanenbaum. An Architecture for A Scalable Wide Area Distributed System. </title> <booktitle> In Proc. Seventh SIGOPS European Workshop, </booktitle> <address> Connemara, Ireland, </address> <month> Sept. </month> <year> 1996. </year> <note> ACM. To appear. </note>
Reference-contexts: We first describe what a distributed shared object is, and then focus on the support for replication. 3.1 Object Organization In our model, processes interact and communicate through distributed shared objects <ref> [7, 17, 8] </ref>. Each object offers one or more interfaces, each consisting of a set of methods. Objects are passive, but multiple processes may access the same object simultaneously, allowing them to communicate by reading and changing the object's state through method invocations.
Reference: [9] <author> B. Kantor and P. Lapsley. </author> <title> Network News Transfer Protocol: A Proposed Standard for the Stream-Based Transmission of News. </title> <type> RFC 977, </type> <month> Feb. </month> <year> 1986. </year>
Reference-contexts: To illustrate the problems for sharing data in wide area networks caused by the lack of proper communication facilities, we focus in this paper on four applications used in the Internet, and their corresponding protocols. These are electronic mail (SMTP [12]), USENET News (NNTP <ref> [9] </ref>), file transfer (FTP [3]), and the Web (HTTP [2]).
Reference: [10] <author> M. Makpangou, Y. Gourhant, J.-P. Le Narzul, and M. Shapiro. </author> <title> Fragmented Objects for Distributed Abstractions. In T.L. </title> <editor> Casavant and M. Singhal, (eds.), </editor> <booktitle> Readings in Distributed Computing Systems, </booktitle> <pages> pp. 170-186. </pages> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA., </address> <year> 1994. </year>
Reference-contexts: The main advantage of our scheme is that all aspects of communication can be hidden in distributed objects. This leads to much simpler implementations of applications and servers. So far, this approach has only be followed with Fragmented Objects <ref> [10] </ref>, although that model has not been targeted towards wide area systems. To our knowledge, nearly all other object-based models assume that an object's state is not distributed, but instead is placed entirely in a single address space.
Reference: [11] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification, version 1.2. </title> <type> Technical Report 93.12.43, OMG, </type> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: This is mainly caused by the lack of proper communication facilities as offered by the underlying operating systems and middleware solutions. For example, most operating systems provide only a very simple socket-based network interface. On the other hand, middleware solutions such as DCE [13] or CORBA <ref> [11] </ref> offer more advanced communication facilities such as RPC or remote object invocation, but lack support for related issues such as replication. Also, it is yet unclear whether these systems can scale to millions of users and billions of objects.
Reference: [12] <author> J. Postel. </author> <title> Simple Mail Transfer Protocol. </title> <type> RFC 821, </type> <month> Aug. </month> <year> 1982. </year>
Reference-contexts: To illustrate the problems for sharing data in wide area networks caused by the lack of proper communication facilities, we focus in this paper on four applications used in the Internet, and their corresponding protocols. These are electronic mail (SMTP <ref> [12] </ref>), USENET News (NNTP [9]), file transfer (FTP [3]), and the Web (HTTP [2]).
Reference: [13] <author> W. Rosenberry, D. Kenney, and G. Fisher. </author> <title> Understanding DCE. </title> <institution> O'Reilly, Sebastopol, Calif., </institution> <year> 1992. </year>
Reference-contexts: This is mainly caused by the lack of proper communication facilities as offered by the underlying operating systems and middleware solutions. For example, most operating systems provide only a very simple socket-based network interface. On the other hand, middleware solutions such as DCE <ref> [13] </ref> or CORBA [11] offer more advanced communication facilities such as RPC or remote object invocation, but lack support for related issues such as replication. Also, it is yet unclear whether these systems can scale to millions of users and billions of objects.
Reference: [14] <author> M. Shapiro. </author> <title> Structure and Encapsulation in Distributed Systems: The Proxy Principle. </title> <booktitle> In Proc. Sixth Int'l Conf. on Distributed Computing Systems, </booktitle> <address> Boston, MA, </address> <month> May </month> <year> 1986. </year> <note> IEEE. </note>
Reference-contexts: Most of the interaction in the current protocols are client/server-oriented, therefore we have to deal with two situations per protocol: an existing client using a distributed object, and a new client using an existing server. Figure 8 shows a standard way to solve this problem using proxies <ref> [14] </ref>. object. Figure 8 (b) shows a client using a distributed object implemented in such a way that operations on the object are forwarded by the proxy to an existing server. A proxy has to implement two 11 functions.
Reference: [15] <author> L. van Doorn, P. Homburg, and A.S. Tanenbaum. Paramecium: </author> <title> An Extensible Object-based Kernel. </title> <booktitle> In Proc. Hot Topics on Operating Systems V, </booktitle> <address> Orca's Island, Washington, </address> <month> May </month> <year> 1995. </year> <note> IEEE. </note>
Reference-contexts: Furthermore, the most obvious candidate for downloading from a remote site is the semantics object. This object interacts with the outside world only through a control object, so it is much easier to define and implement a security policy (see also <ref> [15] </ref>). Two other drawbacks of dynamic loading are the impact on reliability and performance. Programs that dynamically load code are typically harder to debug due to lack of debugger support, and may experience unexpected failures when new object implementations are deployed.
Reference: [16] <author> M. van Steen, F.J. Hauck, </author> <title> and A.S. Tanenbaum. A Model for Worldwide Tracking of Distributed Objects. </title> <booktitle> In Proc. TINA '96, </booktitle> <address> Heidelberg, Germany, </address> <month> Sept. </month> <year> 1996. </year> <note> Eurescom. To appear. </note>
Reference-contexts: The name service provides a worldwide name space that maps object names to object handles. An object handle uniquely identifies an object and is mapped by the location service to a set of contact addresses (see <ref> [16] </ref> for further details). This two-layer approach allows an object to change its set of contact addresses without affecting the mapping at the name service.
Reference: [17] <author> M. van Steen, P. Homburg, L. van Doorn, A.S. Tanenbaum, and W. de Jonge. </author> <title> Towards Object-based Wide Area Distributed Systems. </title> <editor> In L.-F. Cabrera and M. Theimer, (eds.), </editor> <booktitle> Proc. Fourth Int'l Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pp. 224-227, </pages> <institution> Lund, Sweden, </institution> <month> Aug. </month> <year> 1995. </year> <journal> IEEE. </journal> <volume> 14 </volume>
Reference-contexts: We first describe what a distributed shared object is, and then focus on the support for replication. 3.1 Object Organization In our model, processes interact and communicate through distributed shared objects <ref> [7, 17, 8] </ref>. Each object offers one or more interfaces, each consisting of a set of methods. Objects are passive, but multiple processes may access the same object simultaneously, allowing them to communicate by reading and changing the object's state through method invocations.
References-found: 17

