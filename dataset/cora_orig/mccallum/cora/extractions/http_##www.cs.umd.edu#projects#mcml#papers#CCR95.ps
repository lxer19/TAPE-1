URL: http://www.cs.umd.edu/projects/mcml/papers/CCR95.ps
Refering-URL: http://www.cs.umd.edu/projects/mcml/pub.html
Root-URL: 
Title: Protocol Architecture for Multimedia Applications over ATM Networks  
Author: Dilip D. Kandlur Debanjan Saha M. Willebeek-LeMair 
Address: Yorktown Heights, NY 10598, USA.  College Park, MD 20742.  
Affiliation: IBM Thomas J. Watson Research Center,  Department of Computer Science, University of Maryland,  
Abstract: At the data-link layer, ATM offers a number of features, such as high-bandwidth and per-connection quality of service (QoS) guarantees, making it particularly attractive to multimedia applications. Unfortunately, many of these features are not visible to applications because of the inadequacies of existing higher-level protocol architectures. Although a considerable effort is underway to tune these protocols for ATM networks, we believe that a new ATM specific protocol stack is essential to effectively exploit all the benefits of ATM. In this paper we describe the semantics of such a protocol stack, and discuss its advantages over traditional protocol architectures from the perspective of distributed multimedia applications. The performance impact of the new protocol architecture is experimentally demonstrated on a video conferencing testbed built around IBM RS/6000s equipped with prototype hardware for video/audio processing, and connected via ATM links. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> ATM Turboways 100 Adapter. IBM Internal Document, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: The SRAM is used for smoothing and mixing of video and audio streams. The dual port memory is used to communicate with the system. A detailed description of the MMT hardware can be found in [10]. The ATM adapter <ref> [1] </ref> is responsible for performing the AAL5 functionalities. It features a dedicated i960 processor and a specialized chipset to handle AAL5 segmentation and reassembly in hardware. The adapter is equipped with 2Mbytes of on-board buffer and a DMA master.
Reference: [2] <editor> ATM Forum, </editor> <publisher> Prentice Hall Inc., </publisher> <address> Englewood Cliffs, NJ. </address> <note> ATM User-Network Interface Specification Version 3.0, </note> <year> 1993. </year>
Reference-contexts: The User-Network signaling standard specifies the protocol for the setup of ATM virtual connections. The current version of this signaling standard, as defined by the ATM Forum, is UNI 3.1 <ref> [2, 9] </ref> and it supports point-to-point and point-to-multipoint connections. The standard makes a distinction between Private and Public UNI 1 interfaces. During 1 Public UNI refers to a tariffed service provided by telecommunications operations. 2 connection setup the endpoints of a connection have to be identified.
Reference: [3] <author> A. Campbell, G. Coulson, and D. Hutchison. </author> <title> A Quality of Service Architecture. </title> <journal> SIGCOMM Computer Communication Review, </journal> <volume> 24(2), </volume> <month> April </month> <year> 1994. </year>
Reference-contexts: Another unique feature of our design is the use of connection specific handlers. This helps customize protocol stack on a per-connection basis, a feature paricularly attractive to multimedia applications. The issue of application interface for quality of service in ATM network has been addressed by other researchers <ref> [3, 16] </ref>. However, we believe that our approach of extending the socket interface provides a smooth transition by allowing applications access to new features while maintaining backward compatibility. The rest of the paper is organized as follows. In section 2 we describe the semantics of the protocol stack.
Reference: [4] <author> M-S. Chen, Z-Y. Shae, D. D. Kandlur, T. Barzilai, and H. Vin. </author> <title> A multimedia desktop collaboration system. </title> <type> Research Report RC 17951, </type> <institution> IBM Research, T. J. Watson Research Center, </institution> <address> Yorktown Heights, NY 10598, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: The goal of our project is to develop a system capable of handling multiple, very high quality, full motion video streams and CD quality audio streams. It is built around IBM RS/6000s equipped with prototype adapters (MMT) <ref> [4, 5] </ref> for real-time capture, compression, decompression and play back of video and audio. In the first prototype implementation the hosts exchanged video and audio data using UDP/IP running over ATM adaptation layer five (AAL5) as defined in RFC1577 [11].
Reference: [5] <author> M-S. Chen, Z-Y. Shae, D. D. Kandlur, T. Barzilai, and H. M. Vin. </author> <title> A multimedia desktop collaboration system. </title> <booktitle> In Proceedings GLOBECOM 92. IEEE, </booktitle> <month> December </month> <year> 1992. </year> <month> 17 </month>
Reference-contexts: The goal of our project is to develop a system capable of handling multiple, very high quality, full motion video streams and CD quality audio streams. It is built around IBM RS/6000s equipped with prototype adapters (MMT) <ref> [4, 5] </ref> for real-time capture, compression, decompression and play back of video and audio. In the first prototype implementation the hosts exchanged video and audio data using UDP/IP running over ATM adaptation layer five (AAL5) as defined in RFC1577 [11].
Reference: [6] <author> M-S. Chen, H. Vin, and T. Barzilai. </author> <title> Designing a distributed collaborative environment. </title> <booktitle> In Proceedings GLOBECOM. IEEE, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: These changes are handled via the control communication paths. The VASU handles the video/audio devices and controls the flow of multimedia data through the system. Further details of the software architecture can be found in <ref> [6] </ref>. 4.3 Performance Results In this section we present the performance figures of the first prototype built on the PF INET protocol stack. These measurements highlight the detrimental impact of the protocol and operating system overheads.
Reference: [7] <author> P. Druschel, L.L. Peterson, and B.S. Davie. </author> <title> Experiences with a High-Speed Network Adapter: A Software Perspective. </title> <booktitle> In Proceedings, ACM SIGCOMM, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: Connection specific processing provides multimedia applications with data channels customizable to satisfy their diverse service 1 requirements. The emergence of ATM networks has led many researchers <ref> [17, 12, 7] </ref> to look into efficient protocol processing architectures. However, in all of these works, user processes are assumed to be the end-points of communication.
Reference: [8] <author> K. Fall and J. Pasquale. </author> <title> Exploiting In-kernel Data Paths to Improve I/O Throughput and CPU Availability. </title> <booktitle> In Proceedings, USENIX Winter Conference, </booktitle> <month> January </month> <year> 1993. </year>
Reference-contexts: In the architecture shown in Fig. 4 data paths connect the devices that generate/consume data directly. Separation of control and data allows devices to be the end-points of a connection. We can use mechanisms such as splice <ref> [8] </ref> to establish in-kernel direct paths between the ATM network interface and a device, transparent to the application. The application can still exercise control on the data path through the control socket.
Reference: [9] <author> ATM Forum. </author> <title> ATM user-network interface specification, </title> <note> version 3.1, </note> <year> 1994. </year>
Reference-contexts: The User-Network signaling standard specifies the protocol for the setup of ATM virtual connections. The current version of this signaling standard, as defined by the ATM Forum, is UNI 3.1 <ref> [2, 9] </ref> and it supports point-to-point and point-to-multipoint connections. The standard makes a distinction between Private and Public UNI 1 interfaces. During 1 Public UNI refers to a tariffed service provided by telecommunications operations. 2 connection setup the endpoints of a connection have to be identified.
Reference: [10] <author> D. D. Kandlur, M. Willebeek-LeMair, T. Barzilai, Z-Y. Shae, and J-T. Liu. </author> <title> Supporting timing requirements of digital video and audio in desktop conferencing systems. </title> <institution> Research Report RC 19479, IBM, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: The SRAM is used for smoothing and mixing of video and audio streams. The dual port memory is used to communicate with the system. A detailed description of the MMT hardware can be found in <ref> [10] </ref>. The ATM adapter [1] is responsible for performing the AAL5 functionalities. It features a dedicated i960 processor and a specialized chipset to handle AAL5 segmentation and reassembly in hardware. The adapter is equipped with 2Mbytes of on-board buffer and a DMA master.
Reference: [11] <author> M. Laubach. </author> <title> Classical IP and ARP over ATM. </title> <institution> Internet RFC-1577, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: In the first prototype implementation the hosts exchanged video and audio data using UDP/IP running over ATM adaptation layer five (AAL5) as defined in RFC1577 <ref> [11] </ref>. Consequently, there was no quality of service support for the network connections. There was also no support for the point to multipoint multicast communication that our application required. Moreover, the video and audio quality was far below our expectations even in an otherwise unloaded system. <p> Applications have transparent access to the ATM network using the PF INET protocol family. The mapping of IP to the ATM data-link is handled by the ATM network interface (IF ATM) using the IP over ATM protocol <ref> [11] </ref>. Applications also have direct access to ATM services using the ATM protocol family (PF ATM). In the following we explain the application interface using the PF ATM protocol family. The PF ATM family uses ATM addresses for identifying endpoints for connections. Addressing. <p> The network interface layer provides a connectionless data-link service to its users and it demultiplexes incoming data packets based on the logical link control (LLC) information. In the case of ATM, this interface layer adapts the connectionless LLC service to ATM virtual connections. For IP traffic, RFC1577 <ref> [11] </ref> defines a "classical" IP subnet mapping wherein this adaptation is localized to the data-link layer using a modified ARP mechanism, leaving the upper layer protocols and applications unchanged. In the figure, this is reflected by the absence of ATM signaling flows in the PF INET family. Native ATM Interface.
Reference: [12] <author> C. Maeda and B. N. Bershad. </author> <title> Protocol Service Decomposition for High-Performance Networking. </title> <booktitle> In Proceedings, ACM SOSP, </booktitle> <month> December </month> <year> 1993. </year>
Reference-contexts: Connection specific processing provides multimedia applications with data channels customizable to satisfy their diverse service 1 requirements. The emergence of ATM networks has led many researchers <ref> [17, 12, 7] </ref> to look into efficient protocol processing architectures. However, in all of these works, user processes are assumed to be the end-points of communication.
Reference: [13] <author> B. Manning and R. Colella. </author> <title> DNS NSAP resource records. </title> <institution> Internet RFC-1706, </institution> <month> October </month> <year> 1994. </year>
Reference-contexts: We propose to exploit the Internet Domain Name Service (DNS) to provide naming support for applications. The DNS has been extended to support NSAP Resource Records <ref> [13] </ref> so that DNS servers can store NSAPs and client DNS resolvers can obtain the NSAPs by issuing queries based on the host name. Communication between the resolver and the DNS server will proceed as usual using the normal TCP/IP protocol stack. 4 Control.
Reference: [14] <author> A. Romanow and S. Floyd. </author> <title> Dynamics of TCP Traffic over ATM Networks. </title> <booktitle> In Proceedings, ACM SIGCOMM, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: Unfortunately, higher layer protocols such as TCP/IP fail to extend these benefits to their applications. Although a considerable effort is underway to tune these existing protocols for ATM networks <ref> [14, 19] </ref>, we believe there is considerable advantage to be gained by a new ATM specific protocol stack to effectively exploit all the benefits of ATM. In this paper we briefly describe the semantics of such a protocol stack and present experimental evidence of its impact on distributed multimedia applications.
Reference: [15] <author> D. Saha, D. Kandlur, T. Barzilai, Z. Shae, and M. Willebeek-LeMair. </author> <title> A videoconferencing testbed on ATM: Design, implementation, and optimizations. </title> <note> submitted for publication, </note> <month> November </month> <year> 1994. </year>
Reference-contexts: They include the cost of data copying across domain boundaries and different layers of the PF INET protocol stack as well as the protocol processing overhead. For a detailed measurement of different components of the send and receive side latencies refer to <ref> [15] </ref>. It is clear from the measurements presented in figures 9 and 10 that actual end-to-end throughput is far from the 100 Mbits/sec ATM interface hardware limit. As we explained earlier, this loss in throughput can be attributed to the ineffieciencies in the PF INET protocol stack.
Reference: [16] <author> R. Sharma and S. Keshav. </author> <title> Signalling and Operating System Support for Native Mode ATM Applications. </title> <booktitle> In Proceedings, ACM SIGCOMM, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: Another unique feature of our design is the use of connection specific handlers. This helps customize protocol stack on a per-connection basis, a feature paricularly attractive to multimedia applications. The issue of application interface for quality of service in ATM network has been addressed by other researchers <ref> [3, 16] </ref>. However, we believe that our approach of extending the socket interface provides a smooth transition by allowing applications access to new features while maintaining backward compatibility. The rest of the paper is organized as follows. In section 2 we describe the semantics of the protocol stack.
Reference: [17] <author> C. A. Thekkat, T. D. Nguyen, E. Moy, and E. D. Lazowaska. </author> <title> Implementing User Protocols at User Level. </title> <booktitle> In Proceedings, ACM SIGCOMM, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: Connection specific processing provides multimedia applications with data channels customizable to satisfy their diverse service 1 requirements. The emergence of ATM networks has led many researchers <ref> [17, 12, 7] </ref> to look into efficient protocol processing architectures. However, in all of these works, user processes are assumed to be the end-points of communication.
Reference: [18] <institution> The USENIX Association and O'Reilly & Associates, Inc., </institution> <address> 103 Morris Street, Suite A, Sebastopol, CA 94572. </address> <note> 4.4BSD Programmer's Reference Manual, </note> <month> April </month> <year> 1994. </year>
Reference-contexts: In the traditional socket interface, control and data are handled on the same socket. Control parameters are usually passed using ioctl or setsockopt function calls. However, these calls do not accommodate the upward flow of information from the protocol module to the application. More recently <ref> [18] </ref>, the message structure used in the sendmsg and recvmsg function calls has been modified to include control fields, and these calls can be used to pass control information between the application and the protocol module. <p> The local end-point information is obtained by passing the data socket as a parameter. 5 ctl_sock = socket (AF_ATM,SOCK_QOS,0); sendmsg (ctl_sock,&lt;SETFLOWSPEC,data_sock,flow-spec,flow-spec-len&gt;); sendmsg (ctl_sock,&lt;SETUP,data_sock,&lt;dest-atm-address,dst-port&gt;>); Here, the sendmsg call is used to pass the control information structure since it differentiates between control and data fields <ref> [18] </ref>. Alternatively, the information could also be passed using write or send. The QOS module maintains connection state information for each connection that has been opened on the control socket.
Reference: [19] <author> A. Wolman, G. Voelker, and C. A. Thekkath. </author> <title> Latency Analysis of TCP on an ATM Ntework. </title> <booktitle> In Proceedings, Winter Usenix, </booktitle> <month> January </month> <year> 1994. </year> <month> 18 </month>
Reference-contexts: Unfortunately, higher layer protocols such as TCP/IP fail to extend these benefits to their applications. Although a considerable effort is underway to tune these existing protocols for ATM networks <ref> [14, 19] </ref>, we believe there is considerable advantage to be gained by a new ATM specific protocol stack to effectively exploit all the benefits of ATM. In this paper we briefly describe the semantics of such a protocol stack and present experimental evidence of its impact on distributed multimedia applications.
References-found: 19

