URL: ftp://ftp.ics.hawaii.edu/pub/tr/ics-tr-92-07.ps.Z
Refering-URL: ftp://ftp.ics.hawaii.edu/pub/tr/INDEX.html
Root-URL: 
Title: Improving Software Quality through Computer Supported Collaborative Review  
Author: Philip M. Johnson Danu Tjahjono 
Address: 2565 The Mall  Honolulu, HI. 96822 U.S.A.  
Affiliation: Department of Information and Computer Sciences  University of Hawaii  
Date: September, 1993.  
Note: This is a revised version of a paper appearing in Proceedings of the Third European Conference on Computer Supported Cooperative Work, Milan, Italy,  
Abstract: Formal technical review (FTR) is a cornerstone of software quality assurance. However, the labor-intensive and manual nature of review, along with basic unresolved questions about its process and products, means that review is typically under-utilized or inefficiently applied within the software development process. This paper introduces CSRS, a computersupported cooperative work environment for software review that improves the efficiency of review activities and supports empirical investigation of the appropriate parameters for review. The paper presents a typical scenario of CSRS in review, its data and process model, application to process maturation, relationship to other research, current status, and future directions. 
Abstract-found: 1
Intro-found: 1
Reference: <author> L. Brothers, V. Sembugamoorthy, and M. </author> <title> Muller (1990): ICICLE: Groupware for code inspection. </title> <booktitle> In Proceedings of CSCW'90, </booktitle> <pages> pp. 169-181. </pages> <publisher> ACM Press. </publisher>
Reference-contexts: Related Work While the idea of facilitating review process with computer support is not a new one, we know of no other system that supports review as comprehensively as CSRS. Other computer based review systems, such as ICICLE <ref> (Brothers, 1990) </ref> support only the faceto-face group meeting by synchronizing and sharing the code window among participants; the use of hypertext technology is basically untyped, non-context sensitive, and limited to source code annotation. CSRS provides similar benefits to those shown for other forms of computer-mediated meeting support (Nunamaker, 1991).
Reference: <author> Jeff Conklin and Michael L. </author> <month> Begeman </month> <year> (1988): </year> <title> gIBIS: A hypertext tool for exploratory policy discussion. </title> <booktitle> In Proceedings of CSCW'88, </booktitle> <pages> pp. 140-152. </pages> <publisher> ACM Press. </publisher>
Reference: <author> Lionel E. </author> <month> Deimel </month> <year> (1990): </year> <title> Scenes of Software Inspections: Video Dramatizations for the Classroom. </title> <institution> Software Engineering Institute, Carnegie Mellon University. </institution> <address> Robert Dunn (1990): </address> <booktitle> Software Quality: Concepts and Plans. </booktitle> <publisher> Prentice Hall. </publisher>
Reference: <author> Michael E. </author> <title> Fagan (1976): Design and code inspections to reduce errors in program development. </title> <journal> IBM System Journal, </journal> <volume> 15(3) </volume> <pages> 182-211. </pages> <editor> 16 Michael E. </editor> <title> Fagan (1986): Advances in software inspections. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(7), </volume> <pages> pp. 744-751. </pages>
Reference: <author> D. P. Freedman and G. M. </author> <title> Weinberg (1990): Handbook of Walkthroughs, Inspections and Technical Reviews. Little, </title> <publisher> Brown. </publisher>
Reference: <author> Philip M. </author> <title> Johnson (1992): Supporting exploratory CSCW with the EGRET framework. </title> <booktitle> In Proceedings of CSCW'92, </booktitle> <publisher> ACM Press. </publisher>
Reference: <author> John C. Knight and E. </author> <title> Ann Myers (1991): Phased inspections and their implementation. </title> <journal> Software Engineering Notes, </journal> <volume> 16(3) </volume> <pages> 29-35. </pages>
Reference: <author> Johnny Martin and W. </author> <title> T Tsai (1990): N-fold inspection: A requirements analysis technique. </title> <journal> Communications of the ACM, </journal> <volume> 33(2) </volume> <pages> 225-232. </pages>
Reference: <author> J. F. Nunamaker, Alan R. Dennis, Joseph S. Valacich, Douglas R. Vogel, and Joey F. </author> <title> George (1991): Electronic meeting systems to support group work. </title> <journal> Communications of the ACM, </journal> <volume> 34(7) </volume> <pages> 42-61. </pages>
Reference-contexts: CSRS provides similar benefits to those shown for other forms of computer-mediated meeting support <ref> (Nunamaker, 1991) </ref>. This research indicates that activities such as private review, public review, and moderator consolidation can be more effective and efficient than traditional faceto-face meetings. Such activities decrease process losses such as attention blocking, air time fragmentation, domination, and many others. <p> On the other hand, group review has its own benefits, since participants can learn from each other, issues raised by one participant may stimulate other participants to raise new issues, and a more objective evaluation can be obtained <ref> (Nunamaker, 1991) </ref>. CSRS follows the private review phase by a public review phase in order to benefit from group review as well. The CSRS data model is similar to the one used by gIBIS (Conklin, 1988) for issues exploration and deliberation.
Reference: <author> Glen W. </author> <title> Russel (1991): Experience with inspection in ultralarge-scale developments. </title> <journal> IEEE Software, </journal> <volume> (9)1. </volume>
Reference: <author> G. Gordon Schulmeyer and James I. </author> <title> McManus (1987): Handbook of Software Quality Assurance. </title> <publisher> Van Nostrand Reinhold. </publisher>
Reference: <author> U. Wiil and K. </author> <month> Oesterbye </month> <year> (1990): </year> <title> Experiences with hyperbase-a multiuser back-end for hypertext applications with emphasis on collaboration support. </title> <type> Technical Report 90-38, </type> <institution> Department of Mathematics and Computer Science, University of Aalborg, Denmark. </institution> <note> Edward Yourdon (1989): Structured Walkthrough. Prentice-Hall, Fourth Edition. </note>
Reference-contexts: The current implementation of CSRS employs a Unix/X windows environment, with a database server back-end written in C++ <ref> (Wiil, 1990) </ref> and a Lucid EMACS front-end interface. Such a choice of environments makes CSRS easily integrable with current development practices. For example, source code can be read from RCS or SCCS, and 15 CSRS can automatically generate email messages to inform reviewers of the state of review.
References-found: 12

