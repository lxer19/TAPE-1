URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/ProcSem1.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Title: The Semantics of Data Flow Diagrams  The Semantics of Data Flow Diagrams. In  
Author: P.D. Bruza Th.P. van der Weide P.D. Bruza and Th.P. van der Weide. N. Prakash, 
Note: Published as:  editor, Proceedings of the International Conference on Manage ment of Data, Hyderabad, India, 1989.  
Date: July 26, 1993  
Address: Toernooiveld, NL-6525 ED Nijmegen, The Netherlands  
Affiliation: Dept. of Information Systems University of Nijmegen  
Abstract: In this article we provide insight as to how semantics can be attached to Data Flow diagrams. We first present a method for transforming a Data Flow Diagram(DFD) to a Petri-Net (PT-net) which specifies the synchronization aspects of a DFD. Secondly, we sketch how a Data Flow diagram may be transformed to expressions whose semantics are described in terms of finite automata. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.A. Bergstra and G.P.A.J. Delen. Van dataflowdiagrammen via petrinetten naar sys-teemmatrixnotatie. </author> <type> Technical report, </type> <institution> Mathematical Centre, </institution> <address> Amsterdam, The Nether-lands, </address> <year> 1982. </year>
Reference-contexts: This DFD is a more detailed description of the process at a lower level of abstraction. DFD's are a useful description mechanism for modelling process architecture, but they do not allow sufficient information to give a clear interpretation of what is being described. This problem is already identified in <ref> [1] </ref>. We present the problem on the basis of the DFD given in figure 6. This DFD has multiple interpretations. For example, 1. If process P receives m 1 and m 2 , then P is activated and produces both m 3 and m 4 . 2. <p> This is important because it is necessary to have a clear interpretation of a DFD before we are in position to specify its semantics. The first enhancement we present is the transformation of DFDs to a variant of Petri-Nets ([8]). We follow <ref> [1] </ref>. We have chosen Petri-Nets because they allow synchronization aspects to be straightforwardly modelled. They also are supported with an easy to understand graphical notation that can easily be incorporated into a DFD. <p> This is because in pure Petri-Nets all input places must have tokens before the transition can fire. From the above we see that this is not always the only way in which a process can fire. To solve this we adopt the view of <ref> [1] </ref>. In this solution we attach to each process its activation possibilities.
Reference: [2] <author> R.H. </author> <title> Campbell and A.N. Habermann. The Specification of Process Synchronization by Path Expressions, </title> <booktitle> volume 16 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1974. </year>
Reference-contexts: In this article we investigate the other direction, namely to acquire a COSY-like expression from the process structure as defined in the previous section. We start with a short introduction to the syntax and semantics of the kind of expressions that will be generated. The work is based on <ref> [2] </ref>, [5] and [6]. We distinguish four types of process synchronization: sequencing, selection, repetition and concurrency. All of these can be expressed by a path expression as follows: sequencing A sequence of processes means that the processes must execute in the order given.
Reference: [3] <author> E.D. Falkenberg, R. van der Pols, and Th. P. van der Weide. </author> <title> Understanding process structure diagrams. </title> <journal> Information Systems, </journal> <volume> 16(4) </volume> <pages> 417-428, </pages> <month> Sept </month> <year> 1991. </year>
Reference-contexts: There exist rules for the construction for DFD's. For example, there can be no data flow from a data store directly to another data store. We will not deal further with the structure of a DFD. A formal specification of DFD's is given in <ref> [3] </ref>. The intention of a DFD is to describe an aspect of the information system at a particular abstraction level. A useful feature of DFD's is that a process can be further refined by another DFD.
Reference: [4] <author> C. Gane and T. Sarson. </author> <title> Structured System Analysis: Tools and techniques. IST Data-books. </title> <publisher> MacDonald Douglas Corporation, </publisher> <address> St. Louis, </address> <year> 1986. </year>
Reference-contexts: 1 Introduction In this document we present a way in which semantics can be attached to Data Flow diagrams (see <ref> [4] </ref> or [9]). DFD's often form an important role in the design of information systems. Their intention is to model the process aspects of an information system (IS).
Reference: [5] <author> P.E. Lauer and R.H. Campbell. </author> <title> Formal semantics of a class of high-level primitives for coordinating concurrent processes. </title> <journal> Acta Informatica, </journal> <volume> 5 </volume> <pages> 247-332, </pages> <year> 1975. </year>
Reference-contexts: For this reason the language is capable of specifying complex process interaction, but the full power of the language is not used in connection with DFDs because these are only capable of specifying rather simple process interaction. The semantics of COSY is given in terms of PT-nets. In <ref> [5] </ref> it is shown how every COSY construct can be expressed as a PT-net. In this article we investigate the other direction, namely to acquire a COSY-like expression from the process structure as defined in the previous section. <p> We start with a short introduction to the syntax and semantics of the kind of expressions that will be generated. The work is based on [2], <ref> [5] </ref> and [6]. We distinguish four types of process synchronization: sequencing, selection, repetition and concurrency. All of these can be expressed by a path expression as follows: sequencing A sequence of processes means that the processes must execute in the order given.
Reference: [6] <author> P.E. Lauer, P.R. Torrigiani, and M.W Shields. </author> <title> Cosy a system specification language based on paths and processes. </title> <journal> Acta Informatica, </journal> <volume> 12 </volume> <pages> 109-158, </pages> <year> 1979. </year>
Reference-contexts: We start with a short introduction to the syntax and semantics of the kind of expressions that will be generated. The work is based on [2], [5] and <ref> [6] </ref>. We distinguish four types of process synchronization: sequencing, selection, repetition and concurrency. All of these can be expressed by a path expression as follows: sequencing A sequence of processes means that the processes must execute in the order given. <p> We adopt the convention of <ref> [6] </ref>, namely we write the denotations of the individual path expressions on top of each other.
Reference: [7] <author> M. Lundeberg, G. Goldkuhl, and A. Nilsson. </author> <title> Information Systems Development A Systematic Approach. </title> <publisher> Prentice Hall, </publisher> <year> 1981. </year>
Reference: [8] <author> Peterson. </author> <title> Petri Net Theory. </title> <publisher> Prentice Hall, </publisher> <year> 1982. </year>
Reference: [9] <author> R. van der Pols. </author> <title> The SSAD handbook. </title> <type> Technical report, </type> <institution> Digital Equipment BV, Utrecht, </institution> <year> 1988. </year>
Reference-contexts: 1 Introduction In this document we present a way in which semantics can be attached to Data Flow diagrams (see [4] or <ref> [9] </ref>). DFD's often form an important role in the design of information systems. Their intention is to model the process aspects of an information system (IS).
References-found: 9

