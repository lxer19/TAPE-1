URL: http://graphics.stanford.edu/~jbasch/publications/kinetic/bgh-dsmd-97.ps.gz
Refering-URL: http://graphics.stanford.edu/~jbasch/publications/kinetic/
Root-URL: http://www.cs.stanford.edu
Email: fjbasch,guibasg@cs.stanford.edu  hershberger@mentorg.com  
Title: Data Structures for Mobile Data  
Author: Julien Basch Leonidas J. Guibas John Hershberger john 
Address: Stanford, CA 94305, USA  1001 Ridder Park Drive San Jose, CA 95131, USA  
Affiliation: Computer Science Department Stanford University  Mentor Graphics Corp.  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, O. Schwarzkopf, and M. Sharir. </author> <title> The overlay of lower envelopes and its applications. </title> <journal> Discrete Comput. Geom., </journal> <volume> 15 </volume> <pages> 1-13, </pages> <year> 1996. </year>
Reference-contexts: We can thus use recent results bounding the combinatorial complexity of the upper envelope of algebraic surfaces [19]. We also make use of the recent result of Agarwal, Schwarzkopf, and Sharir <ref> [1] </ref> about the complexity of the overlay of the projections of two upper-envelopes, to obtain sharp bounds on the number of events due to x-certificates (the nave bound is O (n 4 ) for n lines). Page 7 Theorem 2.3 The KDS for maintaining the convex hull is efficient. <p> If there are n bivariate curves in total, the complexity of this overlay is O (n 2+* ) for any * &gt; 0 <ref> [1] </ref>. Hence, there are at most that many x-events. Finally, each pair of lines becomes parallel a constant number of times, so that there are O (n 2 ) slope events attached to the node we have been focusing on up to now.
Reference: [2] <author> M. J. Atallah. </author> <title> Some dynamic computational geometry problems. </title> <journal> Comput. Math. Appl., </journal> <volume> 11 </volume> <pages> 1171-1181, </pages> <year> 1985. </year>
Reference-contexts: The aim of our technique is to take full advantage of the coherence present in continuous motions so as to process a minimal number of combinatorial events. In this respect, the way of analyzing our data structures is akin to the dynamic computational ge ometry framework introduced by Atallah <ref> [2] </ref> in order to study the number of combinatorially distinct configurations of a given kind (e.g., convex hull or closest pair) that arise during the continuous motion of geometric objects. <p> the relevant events and perform a discrete-time simulation, then the event counts for all the structures described here can be made into run-times with an extra O (log n) factor (the priority queue cost). 1.2 Previous results and summary of the work A number of works in the early eighties <ref> [2, 6, 14] </ref> considered the problem of computing a configuration function of moving points. In all cases, the motion was considered fully known, and the problem was typically cast and solved in one dimension higher.
Reference: [3] <author> Sergei N. Bespamyatnikh. </author> <title> An optimal algorithm for closest pair maintenance. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 152-161, </pages> <year> 1995. </year>
Reference-contexts: We will call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [3, 4, 8, 11, 12, 15, 17] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motions of the given objects.
Reference: [4] <author> Paul B. Callahan and S. Rao Kosaraju. </author> <title> Algorithms for dynamic closest-pair and n-body potential fields. </title> <booktitle> In Proc. 6th ACM-SIAM Sympos. Discrete Algorithms (SODA '95), </booktitle> <pages> pages 263-272, </pages> <year> 1995. </year>
Reference-contexts: We will call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [3, 4, 8, 11, 12, 15, 17] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motions of the given objects.
Reference: [5] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> Cam-bridge, Mass., </address> <year> 1990. </year>
Reference-contexts: More recently, questions concerning the maintenance of the Voronoi diagram of moving points (or its dual, the Delaunay triangulation) have received extensive attention <ref> [5, 7, 9, 18] </ref>. The significance of our work is best understood in comparison. The De-launay triangulation contains a proof of its correctness involving only four-point certificates for each of the edges of the triangulation. In that sense it is what we might call a self-certifying structure.
Reference: [6] <author> O. Devillers, M. Golin, K. Kedem, and S. Schirra. </author> <title> Revenge of the dog: Queries on Voronoi diagrams of moving points. </title> <booktitle> In Proc. 6th Canad. Conf. Comput. Geom., </booktitle> <pages> pages 122-127, </pages> <year> 1994. </year>
Reference-contexts: the relevant events and perform a discrete-time simulation, then the event counts for all the structures described here can be made into run-times with an extra O (log n) factor (the priority queue cost). 1.2 Previous results and summary of the work A number of works in the early eighties <ref> [2, 6, 14] </ref> considered the problem of computing a configuration function of moving points. In all cases, the motion was considered fully known, and the problem was typically cast and solved in one dimension higher. <p> In all cases, the motion was considered fully known, and the problem was typically cast and solved in one dimension higher. The method of Edelsbrunner and Welzl <ref> [6] </ref> for computing the k-th order statistic of a set of points moving at constant speed along the x-axis (introduced as a motivation for computing the k-level of an arrangement of lines) is most similar to a KDS.
Reference: [7] <author> H. Edelsbrunner and E. Welzl. </author> <title> Constructing belts in two-dimensional arrangements with applications. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 271-284, </pages> <year> 1986. </year>
Reference-contexts: More recently, questions concerning the maintenance of the Voronoi diagram of moving points (or its dual, the Delaunay triangulation) have received extensive attention <ref> [5, 7, 9, 18] </ref>. The significance of our work is best understood in comparison. The De-launay triangulation contains a proof of its correctness involving only four-point certificates for each of the edges of the triangulation. In that sense it is what we might call a self-certifying structure.
Reference: [8] <author> J.-J. Fu and R. C. T. Lee. </author> <title> Voronoi diagrams of moving points in the plane. </title> <journal> Internat. J. Comput. Geom. Appl., </journal> <volume> 1(1) </volume> <pages> 23-32, </pages> <year> 1991. </year>
Reference-contexts: We will call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [3, 4, 8, 11, 12, 15, 17] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motions of the given objects.
Reference: [9] <author> M. Golin, R. Raman, C. Schwarz, and M. Smid. </author> <title> Randomized data structures for the dynamic closest-pair problem. </title> <booktitle> In Proc. 4th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 301-310, </pages> <year> 1993. </year>
Reference-contexts: More recently, questions concerning the maintenance of the Voronoi diagram of moving points (or its dual, the Delaunay triangulation) have received extensive attention <ref> [5, 7, 9, 18] </ref>. The significance of our work is best understood in comparison. The De-launay triangulation contains a proof of its correctness involving only four-point certificates for each of the edges of the triangulation. In that sense it is what we might call a self-certifying structure. <p> solution has two drawbacks: it is not local (a point can be a vertex of linearly many triangles), nor known to be efficient (the tightest upper bound known on the number of changes to the Delaunay triangulation of points in algebraic motion is roughly cubic in the number of points <ref> [9] </ref>, whereas the convex hull and the closest pair can change roughly a quadratic number of times).
Reference: [10] <author> L. Guibas, J. S. B. Mitchell, and T. Roos. </author> <title> Voronoi diagrams of moving points in the plane. </title> <booktitle> In Proc. 17th Internat. Workshop Graph-Theoret. Concepts Com-put. Sci., volume 570 of Lecture Notes in Computer Science, </booktitle> <pages> pages 113-125. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: This upper envelope computation can be trivially done in O (n log n) time with a divide and conquer algorithm (this bound holds even if points can appear and disappear at arbitrary times, but then it is not trivial <ref> [10] </ref>). In the worst case, the number of times during the motion that the topmost point changes is fi (n).
Reference: [11] <author> J. Hershberger. </author> <title> Finding the upper envelope of n line segments in O(n log n) time. </title> <journal> Inform. Process. Lett., </journal> <volume> 33 </volume> <pages> 169-174, </pages> <year> 1989. </year>
Reference-contexts: We will call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [3, 4, 8, 11, 12, 15, 17] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motions of the given objects.
Reference: [12] <author> J. Hershberger and S. Suri. </author> <title> Applications of a semi-dynamic convex hull algorithm. </title> <journal> BIT, </journal> <volume> 32 </volume> <pages> 249-267, </pages> <year> 1992. </year> <pages> Page 12 </pages>
Reference-contexts: We will call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [3, 4, 8, 11, 12, 15, 17] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motions of the given objects.
Reference: [13] <author> S. Kapoor and M. Smid. </author> <title> New techniques for exact and approximate dynamic closest-point problems. </title> <booktitle> In Proc. 10th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 165-174, </pages> <year> 1994. </year>
Reference-contexts: In general, one can view the process of kinetization as `sufficiently augmenting a configuration function to make it self-certifying.' Algorithms for collision detection in robotics by Lin and Canny <ref> [13] </ref> and Ponamgi et al. [16] exploit temporal coherence to maintain the minimum distance between all pairs of moving objects, but their approach retests the validity of separating planes at every step, and recalculates from scratch these separators when the old ones fail.
Reference: [14] <author> M. C. Lin and J. F. Canny. </author> <title> Efficient algorithms for incremental distance computation. </title> <booktitle> In Proc. IEEE In-ternat. Conf. Robot. Autom., </booktitle> <volume> volume 2, </volume> <pages> pages 1008-1014, </pages> <year> 1991. </year>
Reference-contexts: the relevant events and perform a discrete-time simulation, then the event counts for all the structures described here can be made into run-times with an extra O (log n) factor (the priority queue cost). 1.2 Previous results and summary of the work A number of works in the early eighties <ref> [2, 6, 14] </ref> considered the problem of computing a configuration function of moving points. In all cases, the motion was considered fully known, and the problem was typically cast and solved in one dimension higher.
Reference: [15] <author> T. Ottmann and D. Wood. </author> <title> Dynamical sets of points. Comput. Vision Graph. </title> <journal> Image Process., </journal> <volume> 27 </volume> <pages> 157-166, </pages> <year> 1984. </year>
Reference-contexts: We will call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [3, 4, 8, 11, 12, 15, 17] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motions of the given objects.
Reference: [16] <author> M. H. Overmars and J. van Leeuwen. </author> <title> Maintenance of configurations in the plane. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 23 </volume> <pages> 166-204, </pages> <year> 1981. </year>
Reference-contexts: In general, one can view the process of kinetization as `sufficiently augmenting a configuration function to make it self-certifying.' Algorithms for collision detection in robotics by Lin and Canny [13] and Ponamgi et al. <ref> [16] </ref> exploit temporal coherence to maintain the minimum distance between all pairs of moving objects, but their approach retests the validity of separating planes at every step, and recalculates from scratch these separators when the old ones fail.
Reference: [17] <author> Madhav K. Ponamgi, Ming C. Lin, and Dinesh Manocha. </author> <title> Incremental collision detection for polygonal models. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Com-put. Geom., </booktitle> <pages> pages V7-V8, </pages> <year> 1995. </year>
Reference-contexts: We will call kinetization the process of transforming an algorithm on static data into a data structure that is valid for continuously changing data. The problems of convex hull and closest pair maintenance have been exhaustively studied in computational geometry <ref> [3, 4, 8, 11, 12, 15, 17] </ref>, but almost exclusively in the context of static objects with operations like insertion and deletion. Our emphasis instead is on the maintenance of such configuration functions under continuous motions of the given objects.
Reference: [18] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: More recently, questions concerning the maintenance of the Voronoi diagram of moving points (or its dual, the Delaunay triangulation) have received extensive attention <ref> [5, 7, 9, 18] </ref>. The significance of our work is best understood in comparison. The De-launay triangulation contains a proof of its correctness involving only four-point certificates for each of the edges of the triangulation. In that sense it is what we might call a self-certifying structure.
Reference: [19] <author> T. Roos. </author> <title> Voronoi diagrams over dynamic scenes. </title> <journal> Discrete Appl. Math., </journal> <volume> 43 </volume> <pages> 243-259, </pages> <year> 1993. </year>
Reference-contexts: On the other hand, in the dual, the structure described by the upper envelope over time is exactly the upper envelope of the set of algebraic surfaces described by the underlying lines. We can thus use recent results bounding the combinatorial complexity of the upper envelope of algebraic surfaces <ref> [19] </ref>. We also make use of the recent result of Agarwal, Schwarzkopf, and Sharir [1] about the complexity of the overlay of the projections of two upper-envelopes, to obtain sharp bounds on the number of events due to x-certificates (the nave bound is O (n 4 ) for n lines). <p> A monochromatic vertex corresponds to the appearance/disappearance of an edge triggered by some descendant in the computation tree. As the upper envelope of n bivariate algebraic functions of bounded degree has complexity O (n 2+* ) for any * &gt; 0 <ref> [19] </ref>, the number of events due to y-certificates sign changes is bounded by this quantity. Consider now the events corresponding to the x reordering of two vertices of different colors (called "x-events"). In the 3-dimensional static setting, a blue vertex becomes an edge of the blue upper envelope.
Reference: [20] <author> M. Sharir. </author> <title> Almost tight upper bounds for lower envelopes in higher dimensions. </title> <journal> Discrete Comput. Geom., </journal> <volume> 12 </volume> <pages> 327-345, </pages> <year> 1994. </year>
Reference-contexts: These are functions with the property that each of the elementary predicates involved in the kinetiza-tion changes sign at most a bounded number of times | very much in the spirit of the Davenport-Schinzel sequence definition <ref> [20] </ref>. We will call this number the cost of the KDS.
Reference: [21] <author> M. Sharir and P. K. Agarwal. </author> <title> Davenport-Schinzel Sequences and Their Geometric Applications. </title> <publisher> Cam-bridge University Press, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: By working through three examples, we demonstrated the generality of the kinetization procedure, which transforms a static algorithm into its kinetic counterpart. The algorithms described in this paper have recently been implemented by Craig Silverstein (convex hull) and Li Zhang (closest pair) <ref> [21, 22] </ref>. <p> An instance of this phenomenon is already present inside our kine-tization of the closest pair algorithm in Section 3. * Experiments on random inputs showed that our kinetic convex hull algorithm has an overhead of internal events which is of the same order as the number of external events <ref> [21] </ref>, whereas our kinetic closest pair algorithm always processes fi (n 2 ) internal events [22].
Reference: [22] <author> C. </author> <title> Silverstein. </title> <type> Personal communication. </type> <year> 1996. </year>
Reference-contexts: By working through three examples, we demonstrated the generality of the kinetization procedure, which transforms a static algorithm into its kinetic counterpart. The algorithms described in this paper have recently been implemented by Craig Silverstein (convex hull) and Li Zhang (closest pair) <ref> [21, 22] </ref>. <p> pair algorithm in Section 3. * Experiments on random inputs showed that our kinetic convex hull algorithm has an overhead of internal events which is of the same order as the number of external events [21], whereas our kinetic closest pair algorithm always processes fi (n 2 ) internal events <ref> [22] </ref>. Hence, ideally, the measure of efficiency should not compare the worst case number of internal events to the worst case number of external events, but the worst case ratio of the actual number of internal events to the actual number of external events for any flight plan.
Reference: [23] <author> L. Zhang. </author> <type> Personal communication. </type> <year> 1996. </year> <pages> Page 13 </pages>
References-found: 23

