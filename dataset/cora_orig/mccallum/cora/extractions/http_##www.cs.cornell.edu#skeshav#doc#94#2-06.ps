URL: http://www.cs.cornell.edu/skeshav/doc/94/2-06.ps
Refering-URL: http://www.cs.cornell.edu/skeshav/papers.html
Root-URL: 
Email: (rosens@cs.stanford.edu)  (keshav@research.att.com)  
Title: Signaling and Operating System Support for Native-Mode ATM Applications  
Author: R. Sharma S. Keshav 
Address: 600 Mountain Avenue, Murray Hill, NJ 07974, USA  
Affiliation: AT&T Bell Laboratories  
Abstract: Applications communicating over connectionless networks, such as IP, cannot obtain per-connection Quality of Service (QoS) guarantees. In contrast, the connection-oriented nature of the ATM layer and its per-virtual-circuit QoS guarantees are visible to a native-mode ATM application. We describe the design and implementation of operating system and signaling support for native-mode applications, independent of the semantics of the protocol layers or of the signaling protocol. The work was done in the context of a Unix-like operating system and the Xunet 2 wide-area high-speed ATM network. The IPC-based interface between an application and the signaling entity allows processes to request parameterized virtual circuits, and the signaling-kernel interface allows resources to be reclaimed from prematurely terminating processes. We also built a simple encapsulation layer over raw IP that allows any host with IP access to send AAL frames into the wide-area network with little performance degradation. Our design makes it simple to port existing TCP/IP socket applications to a native-mode ATM protocol stack and also enables interoperation of existing IP networks with our ATM network. Our experience has been positive - the design is robust, easily extendible and scales well with the number of open connections. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> ANSA Reference Manual Release 1.00, </editor> <publisher> APM Ltd, Poseidon House, </publisher> <address> Castle Park, Cambridge, CB3 0RD, UK, </address> <month> March </month> <year> 1989. </year>
Reference-contexts: Since we had already decided to place signaling in user space, given these two requirements, we decided that applications should communicate with the signaling entity using inter-process communication (IPC) instead of system calls. We considered both BSD sockets and ANSA <ref> [1] </ref> RPCs for IPC. We wanted the IPC facility to be easy to use, ubiquitously available, and reliable. This ruled out ANSA and UDP, so we used TCP/IP for IPC, in essence building a special-purpose RPC facility. 5.3.
Reference: 2. <author> A. Berenbaum, M. J. Dixon, A. Iyengar and S. Keshav, </author> <title> Design and Implementation of a Flexible ATM Host Inter face for XUNET II, </title> <journal> IEEE Network Magazine, </journal> <month> July </month> <year> 1993. </year>
Reference-contexts: When we began our work, the Xunet IRIX kernel already implemented a protocol family called PF_XUNET that provided simplex virtual circuits. A socket bound to this family allowed users to access the proprietary Hobbit ATM host-interface board <ref> [2] </ref> via the Orc device driver. There was also a daemon that implemented a proprietary signaling protocol, thus allowing an ATM endpoint to set up a simplex switched virtual circuit to any ATM destination on Xunet. However, there were two limitations. <p> The AAL5 trailer computation, segmentation and data transmission is handled by the Hobbit ATM host interface <ref> [2] </ref>. Since these data intensive operations happen only at the router, there is little overhead in providing the PF_XUNET interface to non-ATM hosts. Computing the encapsulation header is inexpen sive (roughly the same time as for computing the UDP header).
Reference: 3. <author> E. Biagioni, E. Cooper and R. Sansom, </author> <title> Designing a Practi cal ATM LAN, </title> <journal> IEEE Network Magazine, </journal> <month> March </month> <year> 1993. </year>
Reference-contexts: In fact, the stack currently implements only a UDP-like functionality. An outline of the semantics we plan to support in the stack is presented in Reference [12] 11. Related work Our work is most similar to that of Biagioni, Cooper and Sansom <ref> [3] </ref> at Fore Systems. They have integrated an ATM Application Programmer's Interface and the proprietary SPANS signaling protocol to allow users to send ATM cells into a Fore ATM network. They locate the signaling entity in the device driver, making it hard to implement and modify SPANS signaling.
Reference: 4. <author> R. Black and S. Crosby, </author> <title> Experience and Results from the Implementation of an ATM Socket Family, </title> <booktitle> Proc. USENIX '94, </booktitle> <year> 1994. </year>
Reference-contexts: If QoS parameters are passed as part of the address structure or as a socket option, this would make QoS negotiation cumbersome (see Reference <ref> [4] </ref>). Further, we wanted to allow an application on any host with IP connectivity to a router to be able to request a channel from the signaling entity. <p> Finally, unlike our design, they do not allow applications on machines without ATM host interfaces to access their API and send encapsulated cells into their ATM LAN. Black and Crosby at the University of Cambridge describe support for the MSNA ATM protocol stack in Reference <ref> [4] </ref>. A key design decision that they made was to use a special socket for communication between the signaling entity and the kernel. This leads to numerous problems with concurrent accesses to per-VCI data structures.
Reference: 5. <author> A. Campbell, G. Coulson, F. Garcia and D. Hutchison, </author> <title> A Continuous Media Transport and Orchestration Service, </title> <booktitle> Proc. ACM SIGCOMM, </booktitle> <year> 1992. </year>
Reference-contexts: However, since all their implementation is in user space, they do not face the user-kernel interaction problems that are common in Unix. Our work can be viewed as complementary to that of Campbell et al at the Lancaster University <ref> [5, 6] </ref> and by Fry et al at the University of Technology, Sydney [11]. They have designed the semantics of a protocol stack that provides per-application QoS. We hope to learn from their work in implementing suitable protocols in the PF_XUNET domain.
Reference: 6. <author> A. Campbell, G. Coulson and D. Hutchison, </author> <title> A Multimedia Enhanced Transport Service in a Quality of Service Architecture, </title> <booktitle> Proc. 4th International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: However, since all their implementation is in user space, they do not face the user-kernel interaction problems that are common in Unix. Our work can be viewed as complementary to that of Campbell et al at the Lancaster University <ref> [5, 6] </ref> and by Fry et al at the University of Technology, Sydney [11]. They have designed the semantics of a protocol stack that provides per-application QoS. We hope to learn from their work in implementing suitable protocols in the PF_XUNET domain.
Reference: 7. <author> D. D. Clark, V. Jacobson, J. Romkey and H. Salwen, </author> <title> An Analysis of TCP Processing Overhead, </title> <journal> IEEE Communica tions Magazine, </journal> <month> June </month> <year> 1989, </year> <pages> 23-29. </pages>
Reference-contexts: Measurements We used the technique similar to that of Clark et al <ref> [7] </ref> to count the number of instructions to send and receive packets over PF_XUNET at a host. We looked at assembly code for the protocol-specific routines, ignoring procedure call overheads and calls to memory management routines. <p> We used the IP send count of 61 and receive count of 57 from Reference <ref> [7] </ref>. On the receive side, the number of instructions executed from software interrupt of IP by the device driver to enqueueing the message in the socket layer is 194 + 8 * (# of mbufs in the message).
Reference: 8. <author> C. D. Cranor and G. M. Parulkar, </author> <title> An Implementation Model for Connection-oriented Internet Protocols, Internet working: </title> <journal> Research and Experience 4, </journal> <month> 3 (September </month> <year> 1993). </year>
Reference-contexts: Further, the kernel needs to be aware of signaling messages interspersed with control messages on the special socket. We sidestep most of these problems by using a pseudo-device. The work of Cranor and Parulkar, who have designed and implemented the COIP-K protocol domain in the BSD Unix kernel <ref> [8] </ref>, is similar in that they also provide an infrastructure for protocol development and testing. They have extended the protocol domain to support multiple COIP protocols simultaneously. However, they do not discuss the interaction of the signaling entity and the kernel, which we believe is critical to providing per-application QoS.
Reference: 9. <author> D. C. Feldmeier, </author> <title> Multiplexing Issues in Communication System Design, </title> <booktitle> Proc. ACM Sigcomm 1990, </booktitle> <month> October </month> <year> 1990, </year> <month> 209--219. </month>
Reference-contexts: The semantics of the native mode stack are described in [12]. The key ideas here are that the stack has no logical multiplexing, and there is no duplication of AAL functionality in the higher layers. A non-multiplexing protocol stack has several advantages over a conventional multiplexing stack <ref> [9] </ref>. First, per-application QoS requirements can be communicated both to the network and the local operating system, allowing intelligent scheduling of critical resources. Second, there are fewer multiplexing/demultiplexing overheads (since each demultiplex-ing point must compute a hash function).
Reference: 10. <author> A. G. Fraser, C. R. Kalmanek, A. Kaplan, W. T. Marshall and R. C. Restrick, </author> <title> Xunet 2: A Nationwide Testbed in High-Speed Networking, </title> <booktitle> Proc. IEEE INFOCOM 1992, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: Third, the Virtual Circuit Identifier (VCI) provides a single index into a table of protocol control blocks, considerably simplifying the software structure. We did our work in the context of the Silicon Graphics Inc. IRIX 4.0.1 kernel and the Xunet II wide area ATM network <ref> [10] </ref>. IRIX is a System V variant of Unix, with provision for BSD sockets [13]. XUNET II is an experimental wide-area ATM network that serves as a testbed for research on data networking.
Reference: 11. <author> M. Fry, A. Richards and A. Seneviratne, </author> <title> Framework for Implementing the Next Generation of Communication Protocols , Proc. </title> <booktitle> 4th International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: Our work can be viewed as complementary to that of Campbell et al at the Lancaster University [5, 6] and by Fry et al at the University of Technology, Sydney <ref> [11] </ref>. They have designed the semantics of a protocol stack that provides per-application QoS. We hope to learn from their work in implementing suitable protocols in the PF_XUNET domain.
Reference: 12. <author> S. Keshav, </author> <title> Semantics of a Native-Mode ATM Protocol Stack, </title> <note> Submitted to ACM Multimedia '94, </note> <month> March </month> <year> 1994. </year>
Reference-contexts: Thus, for example, we describe how an application may specify a QoS to the signaling entity, but we do not discuss the form that this specification takes, or how this specification maps to specific OS and network scheduling policies. The semantics of the native mode stack are described in <ref> [12] </ref>. The key ideas here are that the stack has no logical multiplexing, and there is no duplication of AAL functionality in the higher layers. A non-multiplexing protocol stack has several advantages over a conventional multiplexing stack [9]. <p> Orthogonality of implementation: Our implementation does not make any assumptions about the functionality provided by the PF_XUNET stack. In fact, the stack currently implements only a UDP-like functionality. An outline of the semantics we plan to support in the stack is presented in Reference <ref> [12] </ref> 11. Related work Our work is most similar to that of Biagioni, Cooper and Sansom [3] at Fore Systems. They have integrated an ATM Application Programmer's Interface and the proprietary SPANS signaling protocol to allow users to send ATM cells into a Fore ATM network.
Reference: 13. <author> S. J. Leffler, M. K. McKusick, M. J. Karels and J. S. Quar-terman, </author> <title> in The Design and Implementation of the 4.3BSD UNIX Operating System, </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: We did our work in the context of the Silicon Graphics Inc. IRIX 4.0.1 kernel and the Xunet II wide area ATM network [10]. IRIX is a System V variant of Unix, with provision for BSD sockets <ref> [13] </ref>. XUNET II is an experimental wide-area ATM network that serves as a testbed for research on data networking. <p> Xunet II supports IP-over-ATM and quite a bit of the traffic over Xunet II is generated from IP-multicast based multimedia applications. 2. Scope of Our Work IRIX provides a standard method for implementing a protocol stack inside the kernel using a BSD-style protocol family abstraction <ref> [13] </ref>. A protocol stack implementing this abstraction can access the BSD socket and device driver interfaces. When we began our work, the Xunet IRIX kernel already implemented a protocol family called PF_XUNET that provided simplex virtual circuits.
Reference: 14. <author> I. M. Leslie, D. R. McAuley and D. L. Tennenhouse, </author> <title> ATM Everywhere?, </title> <journal> IEEE Network Magazine 7, </journal> <month> 2 (March </month> <year> 1993). </year>
Reference-contexts: Second, we allow any endpoint with IP connectivity to get access to the ATM network by encapsulating AAL frames in IP packets. This lets us to move quickly and easily towards the goal of `ATM Everywhere' <ref> [14] </ref>. Third, we extended the signaling mechanism to carry a QoS string from a client to a server, and the negotiated (possibly modified) QoS reply back to the client. QoS negotiation is proxied to the IP-connected endpoints. In the rest of the paper, we describe how these changes were made.
Reference: 15. <author> K. K. Ramakrishnan, L. Vaitzblit, C. Gray, U. Vahalia, D. Ting, P. Tzelnic, S. Glaser and W. Duso, </author> <title> Operating System Support for a Video-On-Demand File Service, </title> <booktitle> Proc. 4th International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: We hope to learn from their work in implementing suitable protocols in the PF_XUNET domain. The QoS parameters passed by a client or server application to the signaling entity can be used to schedule resources at the end system, as described in <ref> [15] </ref> or in the network (see Reference [18] for a partial survey). This is an area rich in research possibilities, and we hope to use our testbed in exploring some of them. 12.
Reference: 16. <author> P. Robin, G. Coulson, A. Campbell, G. Blair and M. Pap-athomas, </author> <title> Implementing a QoS Controlled ATM Based Communications System in Chorus, </title> <type> Internal Report MPG-94-05, </type> <month> March </month> <year> 1994. </year> <note> Available by anonymous FTP from comp.lancs.ac.uk:/pub/mpg/MPG-94 05.ps.Z. </note>
Reference-contexts: However, they do not discuss the interaction of the signaling entity and the kernel, which we believe is critical to providing per-application QoS. Robin, Coulson, Campbell, Blair and Papathomas at Lan-caster University have described an ATM stack implementation in the Chorus microkernel <ref> [16] </ref>. Their work is much more ambitious in that they consider both network and CPU scheduling for performing admission control of continuous media streams. They describe the semantics of the stack, its implementation, as well as the support needed from the system.
Reference: 17. <author> H. Saran, S. Keshav, C. R. Kalmanek and S. P. Morgan, </author> <title> A Scheduling Discipline and Admission Control Policy for Xunet II, </title> <booktitle> Proc. 4th International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: Here, QoS is a structure that represents the quality of service that the client wants from the network, such as &lt;service class, bandwidth&gt; as described in Reference <ref> [17] </ref>. In this paper, we will treat this structure as an uninterpreted string. Note that the client-to-server connection is simplex, so in our example, the server application would have to establish a return connection to actually return a file to the client. <p> We believe that this provides a minimal framework in which to provide QoS to applications in an integrated network. At the moment, the QoS string carries only a service class and a bandwidth request, as discussed in Reference <ref> [17] </ref>. We plan to extend this frame work as we get more experience with application needs. Orthogonality of implementation: Our implementation does not make any assumptions about the functionality provided by the PF_XUNET stack. In fact, the stack currently implements only a UDP-like functionality.
Reference: 18. <author> H. Zhang and S. Keshav, </author> <title> Comparison of Rate-Based Service Disciplines, </title> <booktitle> Proc. ACM SigComm 1991, </booktitle> <month> September </month> <year> 1991. </year>
Reference-contexts: We hope to learn from their work in implementing suitable protocols in the PF_XUNET domain. The QoS parameters passed by a client or server application to the signaling entity can be used to schedule resources at the end system, as described in [15] or in the network (see Reference <ref> [18] </ref> for a partial survey). This is an area rich in research possibilities, and we hope to use our testbed in exploring some of them. 12. Conclusions We have a clean design for implementing a native mode ATM stack in a Unix environment (Figure 2).
References-found: 18

