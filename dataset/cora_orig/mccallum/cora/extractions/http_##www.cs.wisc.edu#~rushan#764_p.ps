URL: http://www.cs.wisc.edu/~rushan/764_p.ps
Refering-URL: http://www.cs.wisc.edu/~rushan/rushan.html
Root-URL: http://www.cs.wisc.edu
Email: flfan, rushang@cs.wisc.edu  
Title: Bucket Cube: An Approximate Computation of Non-Distributive Aggregate Functions  
Author: Li Fan and Rushan Chen 
Date: May 11, 1998  
Pubnum: CS 764 Advanced Database Project Report  
Abstract: The ability to efficiently compute multiple related group-bys is critical to On-Line Analytical Processing and multidimensional data analysis. The computation of CUBE, a special case of the aggregation problem, has been well studied [1]. However, to the best of our knowledge, previous work focused primarily on computing aggregates over distributive and algebraic functions [3]. In this project, we investigated the possibility of computing "Holistic" aggregate functions efficiently. We started with a straight forward, non-optimized approach and experimented alternatives in various aspects, from retaining more information to engineering for less accurate results. We concluded with evidence that, while hardly any optimization can be made in generating the exact result of holistic functions on the CUBE, an approximation method which we named bucket cube can achieve an accuracy of 85%-99% while incurring only moderately more overhead than computing the CUBE over common distributive functions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Sameet Agarwal, Rakesh Agrawal, Prasad M. Deshpandeand Ashish Gupta, Jeffrey F. Naughton, Raghu Ramakrishnan, and Sunita Sarawagi. </author> <title> On the computation of mulidi-mensional aggregates. </title> <booktitle> Proceeedings of the 22th VLDB Conference, </booktitle> <year> 1996. </year>
Reference-contexts: Gray et 1 al [3] proposed the CUBE operation, which requires computing group-bys on all possible combinations over a set of attributes. The CUBE operation has been widely accepted and efficient algorithms of computing CUBE are proposed <ref> [1] </ref>. Sarawagi et al [4] extended hash-based and sort-based grouping methods with optimizations as combining common operations across multiple group-bys, caching and using pre-computed group-bys for other group-bys. A team in University of Wisconsin [1] proposed a sort-based overlap method. <p> The CUBE operation has been widely accepted and efficient algorithms of computing CUBE are proposed <ref> [1] </ref>. Sarawagi et al [4] extended hash-based and sort-based grouping methods with optimizations as combining common operations across multiple group-bys, caching and using pre-computed group-bys for other group-bys. A team in University of Wisconsin [1] proposed a sort-based overlap method. They noticed that computations of different cuboids can be overlapped when they have common prefix on aggregation field list and all cuboids can be computed in sorted order. Nevertheless, most of the above mentioned studies concentrated on the order of Rollup cube computation. <p> The array is of size B and is reset to all zeroes each time when a new group-by begins to be computed. Notice that the simultaneous group-bys that can be computed is limited by the height of the search lattice for the cube operator <ref> [1] </ref>, therefore, the space needed by the count array is very small, O (h*B), while h is the height of search lattice.
Reference: [2] <author> Thomas H. Cormen, Charles E.Leiserson, and Ronald L.Rivest. </author> <title> Introduction to algorithms. </title> <year> 1990. </year>
Reference-contexts: It is obvious that those functions are essentially the same: asking for the exact ordering of a given group on a particular attribute. Obviously, Rank needs ordering. It is also hard to get median without a sort. The linear algorithm on ranking given by <ref> [2] </ref> has a time complexity of 6N-7N, while N is the size of data set. However, such algorithm is more suitable for internal data (in memory) than data residing on external storage.
Reference: [3] <author> Jim Gray, Surajit Chaudhuri, Adam Bosworth, Andrew Layman, Don Reichart, and Murali Venkatrao. </author> <title> Data cube: A relational aggregation operator generalizing group-by, </title> <booktitle> cross-tab, and sub-totals. Proceeedings of the 12th International Conference on Data Engineering., </booktitle> <year> 1996. </year>
Reference-contexts: 1 Introduction An important operation in On-line Analytical Processing (OLAP) or multidimensional data analysis is to compute multiple related group-bys over a set of attributes. Business data analysis need to discover anomalies or unusual patterns from group-by results. Gray et 1 al <ref> [3] </ref> proposed the CUBE operation, which requires computing group-bys on all possible combinations over a set of attributes. The CUBE operation has been widely accepted and efficient algorithms of computing CUBE are proposed [1]. <p> The accuracy and performance of this approximation method is given in section 5, followed by our conclusion that although computation of non-distributive aggregate functions on a cube is hardly optimizable, approximate computations can achieve comparable accuracy within moderate overhead. 2 Holistic Functions Gray <ref> [3] </ref> defined Holistic function as there is no constant bound on the size of the storage needed to describe a sub-aggregate. That is, there is no constant M, such that an M-tuple characterizes the computationF (X i;j j i = 1; ; I).
Reference: [4] <author> Sunita Sarawagi, Rakesh Agrawal, and Ashish Gupta. </author> <title> On computing the data cube. </title> <type> IBM Technical Report. 12 </type>
Reference-contexts: Gray et 1 al [3] proposed the CUBE operation, which requires computing group-bys on all possible combinations over a set of attributes. The CUBE operation has been widely accepted and efficient algorithms of computing CUBE are proposed [1]. Sarawagi et al <ref> [4] </ref> extended hash-based and sort-based grouping methods with optimizations as combining common operations across multiple group-bys, caching and using pre-computed group-bys for other group-bys. A team in University of Wisconsin [1] proposed a sort-based overlap method.
References-found: 4

