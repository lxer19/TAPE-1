URL: ftp://ftp.win.tue.nl/pub/techreports/tbasten/papvs.ps.gz
Refering-URL: http://wwwis.win.tue.nl/~tbasten/publications.html
Root-URL: http://www.win.tue.nl
Email: tbasten@win.tue.nl,  hooman@cs.kun.nl,  
Phone: 2  
Title: Process Algebra in PVS  
Author: Twan Basten and Jozef Hooman 
Web: http://www.win.tue.nl/tbasten  http://www.cs.kun.nl/hooman  
Address: Netherlands  Netherlands  
Affiliation: 1 Dept. of Computing Science, Eindhoven University of Technology, The  Computing Science Institute, University of Nijmegen, The  
Abstract: The aim of this work is to investigate mechanical support for process algebra, both for concrete applications and theoretical properties. Two approaches are presented using the verification system PVS. One approach declares process terms as an uninterpreted type and specifies equality on terms by axioms. This is convenient for concrete applications where the rewrite mechanisms of PVS can be exploited. For the verification of theoretical results, often induction principles are needed. They are provided by the second approach where process terms are defined as an abstract datatype with a separate equivalence relation. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> G.J. Akkerman and J.C.M. Baeten. </author> <title> Term rewriting analysis in process algebra. </title> <journal> CWI Quarterly, </journal> <volume> 4(4):257267, </volume> <year> 1991. </year>
Reference-contexts: The solution is based on a weight function on PA terms mentioned in <ref> [1] </ref>.
Reference: 2. <author> J.C.M. Baeten and C. Verhoef. </author> <title> Concrete process algebra. </title> <editor> In S. Abramsky, Dov M. Gabbay, and T.S.E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, volume 4, Semantic Modelling, </booktitle> <pages> pages 149268. </pages> <publisher> Oxford University Press, Oxford, </publisher> <address> UK, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction We investigate the possibilities of obtaining mechanical support for equational reasoning in process algebra. In particular, we consider ACP-style process algebras <ref> [2, 3] </ref>, where processes are represented by terms constructed from atoms (denoting atomic actions) and operators such as choice (non-determinism), sequential composition, and parallel composition. Axioms specify which process terms are considered to be equal. The idea is to apply equational reasoning to processes, similar to normal arithmetic. <p> A straightforward formulation in PVS, using uninterpreted types plus equality, is presented in Section 2.2. An approach where terms are defined as an abstract datatype is described in Section 2.3. 2.1 Process Algebra To illustrate the main concepts, we consider theory PA (Process Algebra), as defined in <ref> [2, 3] </ref>. This theory is presented in Table 1, where parameter A represents the set of atoms. The first entry of this table specifies the sorts; P is the sort of all process terms. <p> This, however, complicates the proof of general properties about the algebra. Hence, it is extremely useful if one can show that many operators can be eliminated and any term can be reduced to an equivalent term with only a few basic operators. In the framework of <ref> [2, 3] </ref>, this leads to the concept of basic terms. Definition (Basic terms). The set of basic terms is inductively defined as follows. The atoms A are contained in the set of basic terms. <p> This in contrast with the literature on process algebra where the proofs usually rely on term-rewriting theory <ref> [2, 3] </ref>. 3.4 Using Elimination and Structural Induction on Basic Terms As a simple application of the elimination theorem, we define the alphabet of PA terms by means of three axioms that specify the alphabet of basic terms. Additionally, Axiom AB4 specifies that equivalent terms have the same alphabet. <p> For process algebra PA these properties can be proved, in a model-independent way, by means of the elimination theorem. For a process algebra with recursion this is not always possible, and then they are introduced as axioms, called the axioms of standard concurrency <ref> [2, 3] </ref>. In this section, we concentrate on associativity of the merge, called ASC6. The proof uses commutativity of the merge, called ASC2, and a property of the left merge, ASC4. The other axioms of standard concurrency deal with communication and are omitted here. <p> Not shown are CM2 - CM4, which are equal to M2 - M4, some axioms for /, and the axioms of standard concurrency <ref> [2, 3] </ref>. <p> This leads to a higher degree of automation than a related verification in the proof checker Coq [5]. The authors of [5] explicitly mention that rewriting is not so easy in Coq. 5 Concluding Remarks Two approaches have been presented to formulate ACP-like process algebras <ref> [2, 3] </ref> in the language of PVS. Each approach has been validated by applying it to non-trivial examples. Process terms as an uninterpreted type. Equality on terms is specified by means of axioms that can be used as automatic rewrite rules by the PVS proof checker. <p> Besides its use for applications such as verified in this paper, the elimination theorem also plays a role in completeness proofs for specific models <ref> [2, 3] </ref>. Unfortunately, the ideal framework for theory development differs from the ideal framework for concrete applications. It would be a major improvement if the two approaches can be combined, allowing inductive proofs and convenient term rewriting.
Reference: 3. <author> J.C.M. Baeten and W.P. Weijland. </author> <title> Process Algebra. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction We investigate the possibilities of obtaining mechanical support for equational reasoning in process algebra. In particular, we consider ACP-style process algebras <ref> [2, 3] </ref>, where processes are represented by terms constructed from atoms (denoting atomic actions) and operators such as choice (non-determinism), sequential composition, and parallel composition. Axioms specify which process terms are considered to be equal. The idea is to apply equational reasoning to processes, similar to normal arithmetic. <p> A straightforward formulation in PVS, using uninterpreted types plus equality, is presented in Section 2.2. An approach where terms are defined as an abstract datatype is described in Section 2.3. 2.1 Process Algebra To illustrate the main concepts, we consider theory PA (Process Algebra), as defined in <ref> [2, 3] </ref>. This theory is presented in Table 1, where parameter A represents the set of atoms. The first entry of this table specifies the sorts; P is the sort of all process terms. <p> This, however, complicates the proof of general properties about the algebra. Hence, it is extremely useful if one can show that many operators can be eliminated and any term can be reduced to an equivalent term with only a few basic operators. In the framework of <ref> [2, 3] </ref>, this leads to the concept of basic terms. Definition (Basic terms). The set of basic terms is inductively defined as follows. The atoms A are contained in the set of basic terms. <p> This in contrast with the literature on process algebra where the proofs usually rely on term-rewriting theory <ref> [2, 3] </ref>. 3.4 Using Elimination and Structural Induction on Basic Terms As a simple application of the elimination theorem, we define the alphabet of PA terms by means of three axioms that specify the alphabet of basic terms. Additionally, Axiom AB4 specifies that equivalent terms have the same alphabet. <p> For process algebra PA these properties can be proved, in a model-independent way, by means of the elimination theorem. For a process algebra with recursion this is not always possible, and then they are introduced as axioms, called the axioms of standard concurrency <ref> [2, 3] </ref>. In this section, we concentrate on associativity of the merge, called ASC6. The proof uses commutativity of the merge, called ASC2, and a property of the left merge, ASC4. The other axioms of standard concurrency deal with communication and are omitted here. <p> In order to experiment with this approach on some more complicated applications, we axiomatize ACP ofl : Algebra of Communicating Processes (ACP) with abstraction <ref> [3] </ref> and binary Kleene star [4]. The formal framework is defined in Section 4.1 and applied to the verification of an Alternating-Bit Protocol (ABP) in Section 4.2. <p> The formal framework is defined in Section 4.1 and applied to the verification of an Alternating-Bit Protocol (ABP) in Section 4.2. This protocol often serves as a benchmark for verifications in process algebra <ref> [3, 5, 11] </ref>. 4.1 Defining ACP by Uninterpreted Terms and Equality Similar to PA, process algebra ACP ofl contains atoms and operators for sequential composition, choice, merge and left merge. <p> Not shown are CM2 - CM4, which are equal to M2 - M4, some axioms for /, and the axioms of standard concurrency <ref> [2, 3] </ref>. <p> This leads to a higher degree of automation than a related verification in the proof checker Coq [5]. The authors of [5] explicitly mention that rewriting is not so easy in Coq. 5 Concluding Remarks Two approaches have been presented to formulate ACP-like process algebras <ref> [2, 3] </ref> in the language of PVS. Each approach has been validated by applying it to non-trivial examples. Process terms as an uninterpreted type. Equality on terms is specified by means of axioms that can be used as automatic rewrite rules by the PVS proof checker. <p> Besides its use for applications such as verified in this paper, the elimination theorem also plays a role in completeness proofs for specific models <ref> [2, 3] </ref>. Unfortunately, the ideal framework for theory development differs from the ideal framework for concrete applications. It would be a major improvement if the two approaches can be combined, allowing inductive proofs and convenient term rewriting.
Reference: 4. <author> J.A. Bergstra, I. Bethke, and A. Ponse. </author> <title> Process algebra with iteration and nesting. </title> <journal> The Computer Journal, </journal> <volume> 37(4):241258, </volume> <year> 1994. </year>
Reference-contexts: In order to experiment with this approach on some more complicated applications, we axiomatize ACP ofl : Algebra of Communicating Processes (ACP) with abstraction [3] and binary Kleene star <ref> [4] </ref>. The formal framework is defined in Section 4.1 and applied to the verification of an Alternating-Bit Protocol (ABP) in Section 4.2.
Reference: 5. <author> M.A. Bezem, R.N. Bol, and J.F. Groote. </author> <title> Formalizing process algebraic verifications in the calculus of constructions. </title> <journal> Formal Aspects of Computing, </journal> <volume> 9(1):148, </volume> <year> 1997. </year>
Reference-contexts: E.g., tool support for CCS and CSP has been obtained using HOL [6, 7, 15]. This theorem prover has also been used to get mechanized support for reasoning with the - calculus [14]. For CRL, an ACP-like language with data structures, both Coq <ref> [5, 11] </ref> and PVS [10] have been investigated. In [5] pure algebraic reasoning is used, whereas the work described in [10, 11] combines algebraic and assertional reasoning. Most of the research mentioned above aims at concrete applications. <p> This theorem prover has also been used to get mechanized support for reasoning with the - calculus [14]. For CRL, an ACP-like language with data structures, both Coq [5, 11] and PVS [10] have been investigated. In <ref> [5] </ref> pure algebraic reasoning is used, whereas the work described in [10, 11] combines algebraic and assertional reasoning. Most of the research mentioned above aims at concrete applications. <p> The formal framework is defined in Section 4.1 and applied to the verification of an Alternating-Bit Protocol (ABP) in Section 4.2. This protocol often serves as a benchmark for verifications in process algebra <ref> [3, 5, 11] </ref>. 4.1 Defining ACP by Uninterpreted Terms and Equality Similar to PA, process algebra ACP ofl contains atoms and operators for sequential composition, choice, merge and left merge. <p> Fortunately, these tedious steps can be automated to a large extent, using the powerful rewrite capabilities of PVS. This leads to a higher degree of automation than a related verification in the proof checker Coq <ref> [5] </ref>. The authors of [5] explicitly mention that rewriting is not so easy in Coq. 5 Concluding Remarks Two approaches have been presented to formulate ACP-like process algebras [2, 3] in the language of PVS. Each approach has been validated by applying it to non-trivial examples. <p> Fortunately, these tedious steps can be automated to a large extent, using the powerful rewrite capabilities of PVS. This leads to a higher degree of automation than a related verification in the proof checker Coq <ref> [5] </ref>. The authors of [5] explicitly mention that rewriting is not so easy in Coq. 5 Concluding Remarks Two approaches have been presented to formulate ACP-like process algebras [2, 3] in the language of PVS. Each approach has been validated by applying it to non-trivial examples. Process terms as an uninterpreted type.
Reference: 6. <author> A. Camilleri. </author> <title> A Higher Order Logic mechanization of the CSP failure-divergence semantics. </title> <booktitle> In IV Higher Order Workshop, pages 123150. Workshops in Computing, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Another class of dedicated tools aims at automatic verification, including bisimulation and model checkers. An example is the Concurrency Factory [8]. More related to our work is research on the use of general purpose proof checkers. E.g., tool support for CCS and CSP has been obtained using HOL <ref> [6, 7, 15] </ref>. This theorem prover has also been used to get mechanized support for reasoning with the - calculus [14]. For CRL, an ACP-like language with data structures, both Coq [5, 11] and PVS [10] have been investigated. <p> Most of the research mentioned above aims at concrete applications. The only support for the verification of theoretical issues concerns the soundness proof of algebraic axioms, based on a specific semantic model <ref> [6, 14, 15] </ref>. Whereas this often concerns theory about the underlying model, we are more interested in the verification of theoretical results on the axiomatic level, without relying on any underlying model.
Reference: 7. <author> A. Camilleri, P. Inverardi, and M. Nesi. </author> <title> Combining interaction and automation in process algebra verification. </title> <booktitle> In TAPSOFT'91, </booktitle> <pages> pages 283296. </pages> <publisher> LNCS 494, Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Another class of dedicated tools aims at automatic verification, including bisimulation and model checkers. An example is the Concurrency Factory [8]. More related to our work is research on the use of general purpose proof checkers. E.g., tool support for CCS and CSP has been obtained using HOL <ref> [6, 7, 15] </ref>. This theorem prover has also been used to get mechanized support for reasoning with the - calculus [14]. For CRL, an ACP-like language with data structures, both Coq [5, 11] and PVS [10] have been investigated.
Reference: 8. <author> R. Cleaveland, J. Gada, P. Lewis, S. Smolka, O. Sokolsky, and S. Zhang. </author> <title> The Concurrency Factory practical tools for specification, simulation, verification, </title> <booktitle> and implementation. In Proc. DIMACS Workshop on Specification of Parallel Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: PAM [12] is a related tool which provides flexible language support. Another class of dedicated tools aims at automatic verification, including bisimulation and model checkers. An example is the Concurrency Factory <ref> [8] </ref>. More related to our work is research on the use of general purpose proof checkers. E.g., tool support for CCS and CSP has been obtained using HOL [6, 7, 15]. This theorem prover has also been used to get mechanized support for reasoning with the - calculus [14].
Reference: 9. <author> R. Groenboom, C. Hendriks, I. Polak, J. Terlouw, and J.T. Udding. </author> <title> Algebraic proof assistants in HOL. In Math. </title> <booktitle> of Program Construction, </booktitle> <pages> pages 304321. </pages> <publisher> LNCS 947, Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Also different is that we explicitly study the choices that can be made when incorporating process algebra in a general purpose proof checker. In that respect, our work is probably most related to research on tool support for a CSP-like algebra by means of HOL <ref> [9] </ref>. In fact, they investigate similar approaches as we do, although they only consider small concrete examples. New in our paper is, besides the verification of non-trivial examples, that we additionally show how to obtain proof support for the development of ACP-style theory on the axiomatic level. Overview. <p> An alternative is to define powerful proof strategies that incorporate general rewrite patterns for congruences. As mentioned in the introduction, essentially the same approaches as the ones we studied here are investigated in <ref> [9] </ref> where a CSP-like process algebra is embedded in HOL. The conclusions of [9] about rewriting and equational reasoning are similar to ours. As a result, the authors express a slight preference for the approach with unin-terpreted types. However, in [9] only small concrete examples have been studied and no theoretical <p> An alternative is to define powerful proof strategies that incorporate general rewrite patterns for congruences. As mentioned in the introduction, essentially the same approaches as the ones we studied here are investigated in <ref> [9] </ref> where a CSP-like process algebra is embedded in HOL. The conclusions of [9] about rewriting and equational reasoning are similar to ours. As a result, the authors express a slight preference for the approach with unin-terpreted types. However, in [9] only small concrete examples have been studied and no theoretical results have been derived. <p> approaches as the ones we studied here are investigated in <ref> [9] </ref> where a CSP-like process algebra is embedded in HOL. The conclusions of [9] about rewriting and equational reasoning are similar to ours. As a result, the authors express a slight preference for the approach with unin-terpreted types. However, in [9] only small concrete examples have been studied and no theoretical results have been derived. Our work shows that when one is interested in theory development for ACP-style process algebras, the approach based on abstract datatypes is the only one feasible.
Reference: 10. <author> J.F. Groote, F. Monin, and J. Springintveld. </author> <title> A computer checked algebraic verification of a distributed summation algorithm. </title> <institution> Computing Science Report 97/14, Eindhoven University of Technology, </institution> <address> The Netherlands, </address> <year> 1997. </year>
Reference-contexts: E.g., tool support for CCS and CSP has been obtained using HOL [6, 7, 15]. This theorem prover has also been used to get mechanized support for reasoning with the - calculus [14]. For CRL, an ACP-like language with data structures, both Coq [5, 11] and PVS <ref> [10] </ref> have been investigated. In [5] pure algebraic reasoning is used, whereas the work described in [10, 11] combines algebraic and assertional reasoning. Most of the research mentioned above aims at concrete applications. <p> This theorem prover has also been used to get mechanized support for reasoning with the - calculus [14]. For CRL, an ACP-like language with data structures, both Coq [5, 11] and PVS [10] have been investigated. In [5] pure algebraic reasoning is used, whereas the work described in <ref> [10, 11] </ref> combines algebraic and assertional reasoning. Most of the research mentioned above aims at concrete applications. The only support for the verification of theoretical issues concerns the soundness proof of algebraic axioms, based on a specific semantic model [6, 14, 15].
Reference: 11. <author> H. Korver and A. </author> <title> Sellink. On automating process algebra proofs. </title> <booktitle> In Proc. Symp. on Computer and Information Sciences, ISCIS XI, </booktitle> <volume> volume II, </volume> <pages> pages 815826, </pages> <year> 1996. </year>
Reference-contexts: E.g., tool support for CCS and CSP has been obtained using HOL [6, 7, 15]. This theorem prover has also been used to get mechanized support for reasoning with the - calculus [14]. For CRL, an ACP-like language with data structures, both Coq <ref> [5, 11] </ref> and PVS [10] have been investigated. In [5] pure algebraic reasoning is used, whereas the work described in [10, 11] combines algebraic and assertional reasoning. Most of the research mentioned above aims at concrete applications. <p> This theorem prover has also been used to get mechanized support for reasoning with the - calculus [14]. For CRL, an ACP-like language with data structures, both Coq [5, 11] and PVS [10] have been investigated. In [5] pure algebraic reasoning is used, whereas the work described in <ref> [10, 11] </ref> combines algebraic and assertional reasoning. Most of the research mentioned above aims at concrete applications. The only support for the verification of theoretical issues concerns the soundness proof of algebraic axioms, based on a specific semantic model [6, 14, 15]. <p> The formal framework is defined in Section 4.1 and applied to the verification of an Alternating-Bit Protocol (ABP) in Section 4.2. This protocol often serves as a benchmark for verifications in process algebra <ref> [3, 5, 11] </ref>. 4.1 Defining ACP by Uninterpreted Terms and Equality Similar to PA, process algebra ACP ofl contains atoms and operators for sequential composition, choice, merge and left merge.
Reference: 12. <author> H. Lin. PAM: </author> <title> A process algebra manipulator. </title> <booktitle> In Proc. Third Workshop on Computer Aided Verification, </booktitle> <pages> pages 136146. </pages> <publisher> LNCS 575, Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Related Work. A lot of effort has been devoted to the development of dedicated tools for process algebra. For PSF [13], an extension of ACP with abstract datatypes, tools are available that mainly support specification and simulation. PAM <ref> [12] </ref> is a related tool which provides flexible language support. Another class of dedicated tools aims at automatic verification, including bisimulation and model checkers. An example is the Concurrency Factory [8]. More related to our work is research on the use of general purpose proof checkers.
Reference: 13. <author> S. Mauw and G.J. Veltink. </author> <title> A proof assistant for PSF. </title> <booktitle> In Proc. Third Workshop on Computer Aided Verification, </booktitle> <pages> pages 158168. </pages> <publisher> LNCS 575, Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Therefore, the goal is to create a flexible framework in PVS that allows experiments with tool support for customized process algebras. Related Work. A lot of effort has been devoted to the development of dedicated tools for process algebra. For PSF <ref> [13] </ref>, an extension of ACP with abstract datatypes, tools are available that mainly support specification and simulation. PAM [12] is a related tool which provides flexible language support. Another class of dedicated tools aims at automatic verification, including bisimulation and model checkers. An example is the Concurrency Factory [8].
Reference: 14. <author> T.F. Melham. </author> <title> A mechanized theory of the -calculus in HOL. </title> <type> Technical Report 244, </type> <institution> Computer Laboratory, University of Cambridge, </institution> <year> 1992. </year>
Reference-contexts: More related to our work is research on the use of general purpose proof checkers. E.g., tool support for CCS and CSP has been obtained using HOL [6, 7, 15]. This theorem prover has also been used to get mechanized support for reasoning with the - calculus <ref> [14] </ref>. For CRL, an ACP-like language with data structures, both Coq [5, 11] and PVS [10] have been investigated. In [5] pure algebraic reasoning is used, whereas the work described in [10, 11] combines algebraic and assertional reasoning. Most of the research mentioned above aims at concrete applications. <p> Most of the research mentioned above aims at concrete applications. The only support for the verification of theoretical issues concerns the soundness proof of algebraic axioms, based on a specific semantic model <ref> [6, 14, 15] </ref>. Whereas this often concerns theory about the underlying model, we are more interested in the verification of theoretical results on the axiomatic level, without relying on any underlying model.
Reference: 15. <author> M. Nesi. </author> <title> Value-passing CCS in HOL. </title> <booktitle> In Proc. 6th Workshop on Higher Order Logic Theorem Proving and Applications, </booktitle> <pages> pages 352365. </pages> <publisher> LNCS 780, Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Another class of dedicated tools aims at automatic verification, including bisimulation and model checkers. An example is the Concurrency Factory [8]. More related to our work is research on the use of general purpose proof checkers. E.g., tool support for CCS and CSP has been obtained using HOL <ref> [6, 7, 15] </ref>. This theorem prover has also been used to get mechanized support for reasoning with the - calculus [14]. For CRL, an ACP-like language with data structures, both Coq [5, 11] and PVS [10] have been investigated. <p> Most of the research mentioned above aims at concrete applications. The only support for the verification of theoretical issues concerns the soundness proof of algebraic axioms, based on a specific semantic model <ref> [6, 14, 15] </ref>. Whereas this often concerns theory about the underlying model, we are more interested in the verification of theoretical results on the axiomatic level, without relying on any underlying model.
Reference: 16. <author> S. Owre, J. Rushby, N. Shankar, and F. von Henke. </author> <title> Formal verification for fault-tolerant architectures: Prolegomena to the design of PVS. </title> <journal> IEEE Trans. on Software Eng., </journal> <volume> 21(2):107 125, </volume> <year> 1995. </year>
Reference-contexts: In this paper, we investigate how process algebra can be incorporated in the framework of the tool PVS (Prototype Verification System) <ref> [16] </ref>. Properties can be proved in PVS by means of an interactive proof checker. This means that the user applies proof commands to simplify the goal that must be proven, until it can be proved automatically by the powerful decision procedures of the tool.
Reference: 17. <author> L.C. Paulson. </author> <title> Isabelle: A Generic Theorem Prover. </title> <publisher> LNCS 828, Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Using the large number of predefined theories and libraries, it is easy to study extensions and variations of the framework. As an alternative to PVS, it would be interesting to experiment with the generic theorem prover Isabelle <ref> [17] </ref>, since it allows rewriting with user-defined congruence relations and ordered rewriting (allowing, e.g., rewriting using a commutativity axiom). Acknowledgments. We would like to thank Jaco van de Pol and Jos Baeten for their comments on a draft version of this paper.
References-found: 17

