URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1994/UM-CS-1994-054.ps
Refering-URL: http://dis.cs.umass.edu/lesserpubs.html
Root-URL: 
Title: Utility-Based Termination of Anytime Algorithms  
Author: Tuomas W. Sandholm and Victor R. Lesser 
Abstract: Computer Science Department University of Massachusetts at Amherst CMPSCI Technical Report 94-54 July 1994 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Boddy, M. and Dean, T. </author> <year> 1989. </year> <title> Solving time-dependent planning problems. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 979-984. </pages>
Reference-contexts: Newton's iteration for root finding is an example of an anytime algorithm with one computational task. Horvitz [8] addresses the choice of a single anytime algorithm and the number of steps to run it in a medical diagnosis domain. Dean and Boddy <ref> [5, 1] </ref> study the sequential time allocation to multiple independent anytime algorithms in order to create a composite non-interruptible algorithm that maximizes a total response quality criterion. Their combination is optimal for a class of anytime algorithms.
Reference: [2] <author> Brooks, R. </author> <year> 1986. </year> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation, RA-2(1):14-23. </journal>
Reference-contexts: The content does not necessarily reflect the position or the policy of the Government and no official endorsement should be inferred. 1 some research has focused on reactive systems <ref> [2] </ref> that provide the needed responsiveness but are often unable to solve complex problems adequately. One alternative between these two extremes is to have the agent reason about its own reasoning, i.e. meta-reason.
Reference: [3] <author> Cheeseman, P., Kanefsky, B., and Taylor, W. </author> <year> 1991. </year> <title> Where the Really Hard Problems Are. </title> <booktitle> In Proceedings of the Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 331-337. </pages>
Reference-contexts: In 3SAT, our mandatory phase consists of generating an initial estimate of 10 value function. the satisfiability probability. For this we use three features of the problem instance as predictors: the number of variables v, the standard fi = c v predictor <ref> [3, 11] </ref>, and a new predictor [15]. Fig. 3. shows the contours of the initial satisfiability probability.
Reference: [4] <author> Crawford, J. and Auton, L. </author> <year> 1993. </year> <title> Experimental Results on the Crossover Point in Satisfiability Problems. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pp. 21-27. </pages>
Reference-contexts: We gathered statistics for 50, 100, and 150 variables for fi = 0:1; 0:2; :::; 9:0. At each such point, we generated 500 random formulas, determined their satisfiability using a complete algorithm similar to that of Crawford and Auton <ref> [4] </ref>, and measured the parameter. We ran the BREAKOUT algorithm on the satisfiable formulas and recorded its number of steps. If BREAKOUT had not found a solution by 20,000 steps, we aborted the run and recorded an unsuccessful result.
Reference: [5] <author> Dean, T. and Boddy, M. </author> <year> 1988. </year> <title> An analysis of time-dependent planning. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pp. </pages> <address> 49- 54. </address>
Reference-contexts: Newton's iteration for root finding is an example of an anytime algorithm with one computational task. Horvitz [8] addresses the choice of a single anytime algorithm and the number of steps to run it in a medical diagnosis domain. Dean and Boddy <ref> [5, 1] </ref> study the sequential time allocation to multiple independent anytime algorithms in order to create a composite non-interruptible algorithm that maximizes a total response quality criterion. Their combination is optimal for a class of anytime algorithms.
Reference: [6] <author> Garvey, A. and Lesser, V. </author> <year> 1993. </year> <title> Design-to-time real-time scheduling. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics 23(6). </journal>
Reference-contexts: Design-to-time algorithms are not guaranteed to have any answer available if interrupted before the planned time, and in the simplest case they have only one computational task. Garvey and Lesser <ref> [6] </ref> study the combination of several computational tasks (some using the results of others) into a composite design-to-time algorithm. Anytime algorithms (also called flexible computations) are examples of interruptible processing. Their result quality usually increases with time, and some answer is available at any time.
Reference: [7] <author> Garvey, A. and Lesser, V. </author> <year> 1994. </year> <booktitle> A Survey of Research in Deliberative Real-Time Artificial Intelligence. Real-Time Systems, </booktitle> <volume> 6, </volume> <pages> 317-347. </pages>
Reference-contexts: 1 Introduction Traditional AI systems work off-line. Their input is a complete problem description, and their output (acquired after some unknown, long time delay) is a complete answer. As problem solving systems scale up and longer execution times become common, many prob lem solving tasks become real-time <ref> [7] </ref>, i.e. considerable changes in the real world take place during an agent's deliberation. The value of an agent's action in the real world may decrease with time, thus necessitating a tradeoff between deliberating to find a good action and performing some action early on.
Reference: [8] <author> Horvitz, E. </author> <year> 1989. </year> <title> Reasoning about Beliefs and Actions under Computational Resource Constraints. </title> <booktitle> In: Uncertainty in Artificial Intelligence 3. </booktitle> <editor> Kanal, L., Levitt, T., and Lemmer, J. </editor> <booktitle> (eds.), </booktitle> <pages> pp. 301-324. </pages>
Reference-contexts: Anytime algorithms (also called flexible computations) are examples of interruptible processing. Their result quality usually increases with time, and some answer is available at any time. Newton's iteration for root finding is an example of an anytime algorithm with one computational task. Horvitz <ref> [8] </ref> addresses the choice of a single anytime algorithm and the number of steps to run it in a medical diagnosis domain. <p> They compute the change in intrinsic utility as the change in the utility that the agent gets by not executing the real world action perceived best before the computation, but executing the action perceived best after it (either action assumed to occur after the computation). Horvitz <ref> [8] </ref> computes the comprehensive value of a computation as the product of a non-time-dependent object-related value and a time-dependent discount factor. <p> These two factors can be reasonably separated only if they are independent. The problem of finding the exact form for the part that takes time into account is crucial, because algorithm choice and optimal time allocation are very sensitive to it <ref> [8] </ref>. This paper presents a method for automatically deriving a time-dependent, content-dependent information value function for probabilistic information. This function describes analytically what real world value an agent can get by using a certain piece of information at a certain time.
Reference: [9] <author> Howard, R. </author> <year> 1966. </year> <title> Information Value Theory. </title> <journal> IEEE Transactions on System Science and Cybernetics, </journal> <volume> SSC-2(1): </volume> <pages> 22-26. 14 </pages>
Reference-contexts: Automating the generation of this function also removes the problem that a human expert that hand-crafts information value functions may be inaccurate or make errors in this nontrivial task. This paper extends the work of Howard <ref> [9] </ref>, which describes a non-time-dependent information value function for non-probabilistic information. The second main contribution of the paper is the use of this time-dependent information value function in determining the time allocation to an anytime algorithm. <p> Section 3 discusses approximate processing and shows how an incomplete decision algorithm can be used as an anytime approximate algorithm. Section 4 develops an information value based termination criterion for the algorithm. Section 5 presents an example and section 6 concludes. 2 Value of probabilistic information Howard <ref> [9] </ref> analyzes the value of totally certain information. Here we present a related method to analyze the time- and content-dependent value of probabilistic information. <p> The value V c of the information f t e depends on the information itself and the time when it is submitted. In classical information value theory <ref> [9] </ref>, the price paid to the expert is the expected value of the information, not the real value that depends on the information content. Classical information value theory also omits time-dependence.
Reference: [10] <author> Lesser, V., Pavlin, J., and Durfee E. </author> <year> 1989. </year> <title> Approximate Processing in Real-Time Prob--lem Solving. </title> <journal> AI Magazine 9(1): </journal> <pages> 49-61. </pages>
Reference-contexts: In the next section we describe an anytime algorithm for decision problems, and in the section after that we show how the value function described above can be used to decide when to terminate the algorithm. 3 Approximate processing for decision problems Lesser et al. <ref> [10] </ref> identify three ways to reduce solution quality for approximate processing in interpretation domains. One way is to ignore some solution aspects. Analogously, one could ignore some details of a solution to an optimization problem.
Reference: [11] <author> Mitchell, D., Selman, B., and Levesque, H. </author> <year> 1992. </year> <title> Hard and Easy Distributions of SAT Problems. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence, </booktitle> <pages> pp. 459-465. </pages>
Reference-contexts: The complexity of solving an arbitrary problem in N P is at most a polynomial factor greater than the complexity of the algorithm for 3SAT. We generated 3CNF formulas using the standard method <ref> [11] </ref> for constructing hard 3SAT instances: for every clause, pick three variables randomly disallowing duplicates, and then negate each variable separately with probability 0.5. The presented estimation of satisfiability probability is based on a statistical analysis of 3SAT instances from this distribution. <p> In 3SAT, our mandatory phase consists of generating an initial estimate of 10 value function. the satisfiability probability. For this we use three features of the problem instance as predictors: the number of variables v, the standard fi = c v predictor <ref> [3, 11] </ref>, and a new predictor [15]. Fig. 3. shows the contours of the initial satisfiability probability.
Reference: [12] <author> Morris, P. </author> <year> 1993. </year> <title> The Breakout Method For Escaping From Local Minima. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pp. </pages> <address> 40- 45. </address>
Reference-contexts: The initial satisfiability probability can be computed in O (c+v) time. One step of the refinement algorithm also takes O (c + v) time. 5.2 Refinement phase We constructed the anytime refinement algorithm from the BREAKOUT <ref> [12] </ref> satisfiability determining algorithm. BREAKOUT is incomplete, i.e. if the formula is not satisfiable, the algorithm never halts, but if the formula is satisfiable, the algorithm may halt proving satisfiability or it might not halt.
Reference: [13] <author> Papadimitriou, C. and Yannakakis, M. </author> <year> 1991. </year> <title> Optimization, Approximation, and Complexity Classes. </title> <journal> Journal of Computer and System Sciences 43: </journal> <pages> 425-440. </pages>
Reference-contexts: The search for approximation preserving reductions, 5 called L-reductions, is an active field of research in theoretical computer science <ref> [13] </ref>. A third way of reducing solution quality for approximate processing is to decrease certainty. This is applicable to decision problems too. For example, our algorithm outputs the probability that the answer is Y. We construct the approximate algorithm from an incomplete algorithm.
Reference: [14] <author> Russell, S. and Wefald, E. </author> <year> 1991. </year> <booktitle> Principles of metareasoning. Artificial Intelligence 49: </booktitle> <pages> 361-395. </pages>
Reference-contexts: Their combination is optimal for a class of anytime algorithms. Zilberstein [19] analyzes the time allocation among multiple anytime algorithms that form a composite contract algorithm and presents a method by which this type of contract algorithm can (in theory) be interruptible. Russell and Wefald <ref> [14] </ref> study an agent that has to repeatedly choose between several deliberation actions and the currently highest ranked real world action. This can be viewed as a multitask anytime algorithm control problem, where time is allocated to deliberation actions in chunks, i.e. deliberation actions and real world actions are non-interruptible. <p> The method has been used in adversary search and in single agent search. Decision-theoretic control architectures need information value estimates. Russell and Wefald <ref> [14] </ref> estimate the value of a possible computation as the difference of the change in intrinsic utility and time cost.
Reference: [15] <author> Sandholm, T. </author> <year> 1994. </year> <title> A New Order Parameter for 3SAT. </title> <booktitle> Twelfth National Conference on Artificial Intelligence Workshop on Experimental Evaluation of Reasoning and Search Methods, </booktitle> <address> Seattle, Washington. </address>
Reference-contexts: In 3SAT, our mandatory phase consists of generating an initial estimate of 10 value function. the satisfiability probability. For this we use three features of the problem instance as predictors: the number of variables v, the standard fi = c v predictor [3, 11], and a new predictor <ref> [15] </ref>. Fig. 3. shows the contours of the initial satisfiability probability. Say, that in our scheduling example of section 5 the 3SAT formula has the following features: v = 150, c = 645, (so fi = 4:3), and = 2:77, corresponding to an arbitrary problem instance. <p> The first function needed in using the anytime algorithm 1 The way to compute this value (and the contours of figure 3) statistically is presented in <ref> [15] </ref>. 11 is the performance profile p e (SOL t jY ). This probability is parameterized by algorithm step t, v, fi, and . We gathered statistics for 50, 100, and 150 variables for fi = 0:1; 0:2; :::; 9:0.
Reference: [16] <author> Sandholm, T. and Lesser, V. </author> <year> 1994. </year> <title> Utility-Based Termination of Anytime Algorithms. </title> <booktitle> In Proceedings of the European Conference on Artificial Intelligence Workshop on Decision Theory for DAI Applications, </booktitle> <address> Amsterdam, The Netherlands. </address> <note> [17] von Winterfeldt, </note> <author> D. and Edwards, W. </author> <year> 1986. </year> <title> Decision analysis and behavioral research. </title> <publisher> Cambridge University Press. </publisher>
Reference-contexts: The value of an agent's action in the real world may decrease with time, thus necessitating a tradeoff between deliberating to find a good action and performing some action early on. As an answer to the real-time requirements on AI, fl An early version of this paper appeared in <ref> [16] </ref> y This research was supported by ARPA under ONR contract N00014-92-J-1698 and ONR contract N00014-92-J-1450.
Reference: [18] <author> Williams, C. and Hogg, T. </author> <year> 1993. </year> <title> Extending Deep Structure. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pp. 152-157. </pages>
Reference-contexts: An interesting open question is the analytical formula for the initial satisfiability probability based on the mentioned problem instance features and possibly other such features. This seems to be a difficult problem: even the formula that only takes the fi parameter into account is an open field of research <ref> [18] </ref>. The analytical, algorithm specific formula for the probability of finding a solution given that the formula is satisfiable is also unknown. This function is also parameterized by problem instance features.
Reference: [19] <author> Zilberstein, S. </author> <year> 1993. </year> <title> Operational rationality through compilation of anytime algorithms. </title> <type> Ph.D. dissertation, </type> <institution> Department of Computer Science, University of California, Berkeley. </institution> <month> 15 </month>
Reference-contexts: Dean and Boddy [5, 1] study the sequential time allocation to multiple independent anytime algorithms in order to create a composite non-interruptible algorithm that maximizes a total response quality criterion. Their combination is optimal for a class of anytime algorithms. Zilberstein <ref> [19] </ref> analyzes the time allocation among multiple anytime algorithms that form a composite contract algorithm and presents a method by which this type of contract algorithm can (in theory) be interruptible.
References-found: 18

