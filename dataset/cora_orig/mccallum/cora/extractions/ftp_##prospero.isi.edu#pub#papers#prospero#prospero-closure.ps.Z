URL: ftp://prospero.isi.edu/pub/papers/prospero/prospero-closure.ps.Z
Refering-URL: http://gost.isi.edu/people/bcn/publications.html
Root-URL: http://www.isi.edu
Email: bcn@cs.washington.edu  
Title: The Need for Closure in Large Distributed Systems  
Author: B. Clifford Neuman 
Address: Seattle, Washington 98195  
Affiliation: Department of Computer Science, FR-35 University of Washington  
Abstract: As the size of a distributed system grows it becomes increasingly difficult for users to find their way around. One solution for this problem is user centered naming. A problem with user centered naming is that it has the potential to cause confusion and to make sharing difficult. This problem can be avoided if the system supports closure. Although the same name may refer to different objects at different times, the context in which the name is to be evaluated is always known.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Luis-Felipe Cabrera and Jim Wyllie. </author> <title> QuickSilver distributed file services: An architecture for horizontal growth. </title> <booktitle> In Proceedings of the 2nd IEEE Conference on Computer Workstations, </booktitle> <pages> pages 23-27, </pages> <month> March </month> <year> 1988. </year> <note> Also IBM Research Report RJ 5578, </note> <month> April 1, </month> <year> 1987. </year>
Reference-contexts: An alternative to a uniform namespace is to allow individual users to customize their namespace so that they only see the objects that are of interest. This approach is taken in several recent distributed systems. Among them are Tilde [2], QuickSilver <ref> [1] </ref> and Prospero [5]. An objection to user centered naming is that the same name can refer to different objects when used by different users. It is claimed that this can lead to confusion and that it limits sharing.
Reference: [2] <author> Douglas Comer and Thomas P. Murtagh. </author> <title> The Tilde file naming scheme. </title> <booktitle> In Proceedings of the 6th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 509-514, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: This makes the job of finding things more difficult. An alternative to a uniform namespace is to allow individual users to customize their namespace so that they only see the objects that are of interest. This approach is taken in several recent distributed systems. Among them are Tilde <ref> [2] </ref>, QuickSilver [1] and Prospero [5]. An objection to user centered naming is that the same name can refer to different objects when used by different users. It is claimed that this can lead to confusion and that it limits sharing.
Reference: [3] <author> John H. Howard, Michael L. Kazar, Sherri G. Menees, David A. Nichols, M. Satyanarayanan, Robert N. Sidebotham, and Michael J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: 1 Identifying Objects in Very Large Systems As distributed systems become larger it becomes increasingly difficult to find things. Traditional system such as Andrew <ref> [3] </ref>, Locus [7] and Sprite [6] support a uniform global namespace which uniquely names all objects. While this approach allows simple sharing of names, the names tend to be lengthy.
Reference: [4] <author> Butler W. Lampson. </author> <title> A note on the confinement problem. </title> <journal> Communications of the ACM, </journal> <volume> 16(10) </volume> <pages> 613-615, </pages> <month> October </month> <year> 1973. </year>
Reference-contexts: This is important for security. Without it, one has little control over the source or destination of data flowing into and out of a program through a file named in the closure. Such control is necessary if a program is to be confined <ref> [4] </ref> 1 . In order to support closure in the manner described it must be possible to succinctly and automatically specify the namespace that is attached to each object.
Reference: [5] <author> B. Clifford Neuman. </author> <title> The virtual system model for large distributed operating systems. </title> <type> Technical Report 89-01-07, </type> <institution> Department of Computer Science, University of Washington, </institution> <month> April </month> <year> 1989. </year>
Reference-contexts: An alternative to a uniform namespace is to allow individual users to customize their namespace so that they only see the objects that are of interest. This approach is taken in several recent distributed systems. Among them are Tilde [2], QuickSilver [1] and Prospero <ref> [5] </ref>. An objection to user centered naming is that the same name can refer to different objects when used by different users. It is claimed that this can lead to confusion and that it limits sharing. <p> Prospero supports such a specification. 3 Support for Closure in Prospero Prospero is a distributed operating system that is based on the virtual system model <ref> [5] </ref> and that is presently under construction at the University of Washington. It supports a user centered view of the objects and services available on a network. Each view is called a virtual system. Tools are provided to help users customize and organize their views of the world.
Reference: [6] <author> John K. Ousterhout, Andrew R. Cherenson, Frederick Douglis, Michael N. Nelson, and Brent B. Welch. </author> <title> The Sprite network operating system. </title> <journal> Computer, </journal> <volume> 21(2) </volume> <pages> 23-35, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: 1 Identifying Objects in Very Large Systems As distributed systems become larger it becomes increasingly difficult to find things. Traditional system such as Andrew [3], Locus [7] and Sprite <ref> [6] </ref> support a uniform global namespace which uniquely names all objects. While this approach allows simple sharing of names, the names tend to be lengthy. Another problem with this approach is that, to the user, the namespace is huge and mostly cluttered with things that aren't of interest.
Reference: [7] <author> G. Popek and B. Walker, </author> <title> editors. The Locus Distributed System Architecture. </title> <publisher> M.I.T. Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1985. </year>
Reference-contexts: 1 Identifying Objects in Very Large Systems As distributed systems become larger it becomes increasingly difficult to find things. Traditional system such as Andrew [3], Locus <ref> [7] </ref> and Sprite [6] support a uniform global namespace which uniquely names all objects. While this approach allows simple sharing of names, the names tend to be lengthy.
References-found: 7

