URL: http://www.cis.upenn.edu/~switchware/papers/switchware.ps
Refering-URL: http://www.cis.upenn.edu/~switchware/home.html
Root-URL: 
Title: The SwitchWare Active Network Architecture  
Author: D. Scott Alexander, William A. Arbaugh, Michael W. Hicks, Pankaj Kakkar, Angelos D. Keromytis, Jonathan T. Moore, Carl A. Gunter, Scott M. Nettles, and Jonathan M. Smith 
Date: July 7, 1998  
Affiliation: University of Pennsylvania  
Abstract: Active networks must balance the flexibility of a programmable network infrastructure against the safety and security requirements inherent in sharing that infrastructure. Furthermore, this balance must be achieved while maintaining the usability of the network. The SwitchWare active network architecture is a novel approach to achieving this balance using three layers: active packets, which contain mobile programs that replace traditional packets; active extensions, which provide services on the network elements, and which can be dynamically loaded, and; a secure active router infrastructure, which forms a high integrity base upon which the security of the other layers depends. In addition to integrity-checking and cryptography-based authentication, security in our architecture depends heavily on verification techniques from programming languages, such as strong type checking. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. S. Alexander, W. A. Arbaugh, A. D. Keromytis, and J. M. Smith. </author> <title> A Secure Active Network Environment Architecture, </title> <booktitle> 1998. This volume. </booktitle>
Reference-contexts: Thus the security of the SwitchWare architecture as a whole is grounded in this layer. 6.1 SANE To embody our secure active router infrastructure, we have designed the Secure Active Network Environment (SANE) <ref> [1] </ref>. SANE provides an architecture with: a demonstrably minimal set of trust assumptions, the ability to securely bootstrap the remainder of the system when the trust assumptions are met [4], and authentication and naming services for code that is loaded. <p> In additions to these costs, the authenticated version spends 3 ms for the 4 cryptographic keyed-hash calculations (one Message Authentication Code calculations and verification in either direction). For more details on SANE, see <ref> [1] </ref>. 7 Related and Future Work This volume is an excellant overview of related work on active networks. A comprehensive survey of active network research as of about one year ago [17] delineates some of the key differences in approach and research directions of the early efforts. <p> A comprehensive survey of active network research as of about one year ago [17] delineates some of the key differences in approach and research directions of the early efforts. The papers on PLAN [12], the Active Bridge [3], and SANE <ref> [1] </ref> all contain extensive comparisons with related efforts. A great deal of exciting work lies in front of us. While active networks might be viewed as revolutionary, evolutionary (or even devolutionary!), we view our work in the Switch-Ware effort to be one of evolving our approach under experimental scrutiny.
Reference: [2] <author> D. S. Alexander, B. Braden, C. A. Gunter, A. W. Jack-son, A. D. Keromytis, G. J. Minden, and D. Wether-all. ANEP: </author> <title> Active Network Encapsulation Protocol. </title> <address> www.cis.upenn.edu/ switchware/ANEP. </address>
Reference-contexts: One effort we have pursued with other members of the active network community is the design of an `Active Network Encapsulation Protocol' (ANEP); this has grown into perhaps the first active network RFC <ref> [2] </ref>. ANEP has been adopted and used in many of the active networks projects, and has allowed packet forwarding across the IP Internet. To achieve greater interoperability, however, we must provide more than a standard packet format; this, after all, is the essence of the Internet idea.
Reference: [3] <author> D. Scott Alexander, Marianne Shaw, Scott M. Nettles, and Jonathan M. Smith. </author> <title> Active Bridging. </title> <booktitle> In Proceedings, 1997 SIGCOMM Conference. ACM, </booktitle> <year> 1997. </year>
Reference-contexts: Their greater flexibility provides an important trade-off with active packets since complex protocols and systems are implemented in SwitchWare as a mixture of PLAN and router extensions. As discussed in detail in Section 5, our most ambitious exploration of this layer to date is the Active Bridge <ref> [3] </ref>, using active extensions called switchlets. In this experiment, we showed that a simple switchlet-based buffered repeater could be extended (over the network) with a learning bridge switchlet and then several different spanning tree switch-lets. <p> However, active extensions are more general than PLAN service implementations, and, in fact, they are not required to provide PLAN-accessible interfaces (although they must do so if PLAN active packets are to invoke them directly). 5.1 The Active Bridge: A Case Study The Active Bridge <ref> [3] </ref> is a prototype constructed to study active networking at the active extension layer. It is used to bridge 100 Mbps Ethernet LANs, with the additional `active' feature of automated recovery from failure of an implementation of a spanning-tree algorithm, achieved with the use of active extensions called switchlets. <p> A comprehensive survey of active network research as of about one year ago [17] delineates some of the key differences in approach and research directions of the early efforts. The papers on PLAN [12], the Active Bridge <ref> [3] </ref>, and SANE [1] all contain extensive comparisons with related efforts. A great deal of exciting work lies in front of us.
Reference: [4] <author> William A. Arbaugh, David J. Farber, and Jonathan M. Smith. </author> <title> A Secure and Reliable Bootstrap Architecture. </title> <booktitle> In IEEE Security and Privacy Conference, </booktitle> <pages> pages 65-71, </pages> <month> May </month> <year> 1997. </year>
Reference-contexts: SANE provides an architecture with: a demonstrably minimal set of trust assumptions, the ability to securely bootstrap the remainder of the system when the trust assumptions are met <ref> [4] </ref>, and authentication and naming services for code that is loaded. In the context of the SwitchWare architecture, the role of SANE is to ensure that the presumptions of the other system elements, such as the active packet or extension layers, are true.
Reference: [5] <author> Smart packets. </author> <note> http://www.net-tech.bbn.com/ smtpkts/ smtpkts-index.html. </note>
Reference-contexts: The capsules model is focused on per-packet execution; the follow-on work in the Active Network Transport System (ANTS) loads functions as necessary to allow packets to execute. The BBN Smart Packets model <ref> [5] </ref> provides a very dense CISC-like language that is biased towards management tasks, which assumes that nodes are essentially stateless. The SwitchWare architecture, by contrast, layers packet execution and service loading.
Reference: [6] <author> Matt Blaze, Joan Feigenbaum, and Jack Lacy. </author> <title> Decentralized Trust Management. </title> <booktitle> In Proceedings of the 17th Symposium on Security and Privacy, </booktitle> <pages> pages 164-173. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: Another line of inquiry involves languages for access control, such as the PolicyMaker system <ref> [6] </ref>, which provides a special-purpose language for expressing policies in terms of signatures of principals and delegation of trust. 3.4 When to Check Types Because types are a well understood and extremely effective form of mechanical verification, they play an important role in SwitchWare's safety and security model.
Reference: [7] <institution> Caml home page. </institution> <note> http://pauillac.inria.fr/ caml/ index- eng.html. </note>
Reference-contexts: Furthermore, PLAN provides a number of different mechanisms for limiting the resources used by an active packet. We have also experimented with a variant of the ML programming language called Caml <ref> [7] </ref> as our active packet language. Because Caml does not have the resource limitations described in PLAN, there is a need to provide authentication checks and to provide measures to ensure that security attacks will not succeed.
Reference: [8] <institution> Ensemble home page. </institution> <address> http://simon.cs.cornell.edu/Info /Projects/Ensemble. </address>
Reference-contexts: Effective integration for SwitchWare might mean, for instance, that the ANTS transfer mechanism [18] could provide a good distribution mechanism for SwitchWare extensions, or the micro-protocols of the Ensemble Project <ref> [8] </ref> could provide a rich set of SwitchWare services that can be configured by PLAN packets. 8 Conclusions The SwitchWare active network architecture integrates the necessary components of any active network element.
Reference: [9] <author> D. C. Feldmeier, A. J. McAuley, J. M. Smith, D. S. Bakin, W. S. Marcus, and T. M. </author> <title> Raleigh. Protocol Boosters. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <note> Special Issue on Protocol Architectures for the 21st Century, </note> <year> 1998. </year>
Reference-contexts: Among the more interesting applications are flexible architectures for multicast, an example of which we described in the introduction, and network infrastructure support for booster protocols <ref> [9] </ref>, a design methodology that adds protocol functions as-needed, and is thus ideal for deployment on an active network infrastructure. A second major thrust is interoperability with other active networks research efforts.
Reference: [10] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: The second of these is especially well illustrated in the design philosophy of Java <ref> [10] </ref>, which runs on a virtual machine [14] employing a dynamic `verifier' to enforce host security policies for the execution of the compiled bytecode of web applets. This technology is supported by advances in run-time systems (especially garbage collection) and the specification of programming languages (providing precise machine-independent semantic descriptions).
Reference: [11] <author> Carl A. Gunter. </author> <title> Semantics of Programming Languages: Structures and Techniques. </title> <booktitle> Foundations of Computing. </booktitle> <publisher> The MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: Now consider how PLAN meets its design goals. PLAN is closely modeled on the simply typed lambda calculus with extensions to support remote evaluation. This gives it very well understood semantic and type-theoretic foundations <ref> [11] </ref>, making it amenable to formal methods. PLAN only supports very simple data and control structures and thus it is easy to compile or interpret.
Reference: [12] <author> Michael Hicks, Pankaj Kakkar, Jonathan T. Moore, Carl A. Gunter, and Scott Nettles. </author> <title> PLAN: A Programming Language for Active Networks. </title> <note> http://www.cis.upenn.edu/ ~switchware/ papers/ plan.ps, </note> <year> 1998. </year>
Reference-contexts: The discussion here offers only a taste of PLAN|for more details see the PLAN overview paper <ref> [12] </ref>, and our web site (http://www.cis.upenn.edu/~switchware/PLAN.), which includes a downloadable implementation of PLAN in Java and Caml, a language manual and user's guide, and a page where users can enter PLAN programs and execute them on our infrastructure. fun ping (src:host, dst:host) : unit = if (not (thisHostIs (dst))) then OnRemote <p> A comprehensive survey of active network research as of about one year ago [17] delineates some of the key differences in approach and research directions of the early efforts. The papers on PLAN <ref> [12] </ref>, the Active Bridge [3], and SANE [1] all contain extensive comparisons with related efforts. A great deal of exciting work lies in front of us.
Reference: [13] <author> Michael Hicks, Jonathan T. Moore, D. Scott Alexander, Carl A. Gunter, and Scott Nettles. </author> <title> PLANet: An Active Network Testbed. </title> <address> http://www.cis.upenn.edu/~switchware/ papers/planet.ps, </address> <year> 1998. </year>
Reference-contexts: We have also run some experiments to determine the potential usefulness of active networks in improving performance, using both router extensibility and packet-level programmability. More details are available in <ref> [13] </ref>. 4.3 Caml Caml provides several of the design goals outlined for PLAN. It lacks the resource bounding (and hence avoidance of authentication) and the special remote execution facilities.
Reference: [14] <author> Tim Lindholm and Frank Yellin. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: The second of these is especially well illustrated in the design philosophy of Java [10], which runs on a virtual machine <ref> [14] </ref> employing a dynamic `verifier' to enforce host security policies for the execution of the compiled bytecode of web applets. This technology is supported by advances in run-time systems (especially garbage collection) and the specification of programming languages (providing precise machine-independent semantic descriptions).
Reference: [15] <author> George C. Necula. </author> <title> Proof-Carrying Code. </title> <booktitle> In Proceedings of the 24th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL '97). </booktitle> <publisher> ACM Press, </publisher> <year> 1997. </year>
Reference-contexts: An example of the kind of ideas that will be needed can be found in the Proof Carrying Code (PCC) work of Necula and Lee <ref> [16, 15] </ref>. PCC is based on the observation that it is often easier to check an answer than to produce it. For a mobile program, the programmer knows the key reasons it is correct (or at least safe), but not necessarily the host that receives the program.
Reference: [16] <author> George C. Necula and Peter Lee. </author> <title> Safe Kernel Extensions Without Run-Time Checking. </title> <booktitle> In Second Symposium on Operating System Design and Implementation (OSDI '96), </booktitle> <year> 1996. </year>
Reference-contexts: An example of the kind of ideas that will be needed can be found in the Proof Carrying Code (PCC) work of Necula and Lee <ref> [16, 15] </ref>. PCC is based on the observation that it is often easier to check an answer than to produce it. For a mobile program, the programmer knows the key reasons it is correct (or at least safe), but not necessarily the host that receives the program.
Reference: [17] <author> David L. Tennenhouse, Jonathan M. Smith, W. David Sin-coskie, David J. Wetherall, and Gary J. Minden. </author> <title> A Survey of Active Network Research. </title> <journal> IEEE Communications Magazine, </journal> <volume> 35(1) </volume> <pages> 80-86, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: Active networks are an approach to providing a programmable network infrastructure based on such a programmable interoperability layer. Proposals exist <ref> [17] </ref> for accessing programmability on a per-user or per-packet basis. These ideas offer considerable power to programmers wishing to create advanced services or test new approaches to providing existing services. Consider, for example, the problem of negative acknowledgments (NACKs) in a multicast protocol. <p> This reflects our desire to improve usability by helping the programmer find errors, but improving safety and security by not trusting that the programmer was successful. 4 Active Packets Perhaps the most radical vision of active networks is the one in which active packets (called `capsules' in <ref> [17] </ref>) entirely replace traditional packets. Although we do not claim that this radical vision will become the dominant use of active networks, we believe it is worth exploring the idea, so that we can discover its limits. It certainly offers the ultimate in customizability and flexibility. <p> For more details on SANE, see [1]. 7 Related and Future Work This volume is an excellant overview of related work on active networks. A comprehensive survey of active network research as of about one year ago <ref> [17] </ref> delineates some of the key differences in approach and research directions of the early efforts. The papers on PLAN [12], the Active Bridge [3], and SANE [1] all contain extensive comparisons with related efforts. A great deal of exciting work lies in front of us.
Reference: [18] <author> David Wetherall, Ulana Legedza, and John Guttag. </author> <title> Introducing new internet services: Why and how. This volume. </title>
Reference-contexts: Effective integration for SwitchWare might mean, for instance, that the ANTS transfer mechanism <ref> [18] </ref> could provide a good distribution mechanism for SwitchWare extensions, or the micro-protocols of the Ensemble Project [8] could provide a rich set of SwitchWare services that can be configured by PLAN packets. 8 Conclusions The SwitchWare active network architecture integrates the necessary components of any active network element.
References-found: 18

