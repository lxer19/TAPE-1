URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/spring98/papers/coudert.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/spring98/abstract/coudert.html
Root-URL: http://www.cs.berkeley.edu
Title: A New Paradigm for Dichotomy-based Constrained Encoding  
Author: Olivier Coudert 
Address: 700 East Middlefield Rd. Mountain View, CA 94043  
Affiliation: Synopsys, Inc.,  
Abstract: One essential step in sequential logic synthesis consists of finding a state encoding that meets some requirements, such as optimal implementation, or correctness in the case of asynchronous FSMs. Dichotomy-based constrained encoding is more general than other constrained encoding frameworks, but it is also more difficult to solve. This paper introduces a new formalization of this problem, which leads to original exact and heuristic algorithms. Experimental results show that the resulting exact solver outperforms the previous approaches. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Brelaz, </author> <title> "New Methods to Color Vertices of a Graph", </title> <journal> Comm. of the ACM, </journal> <pages> 22-4, pp. 251-256, </pages> <year> 1979. </year>
Reference-contexts: Backtracking is forced to find better solutions, or when one cannot color a vertex without conflict <ref> [1] </ref>. <p> We now discuss the possible strategies and heuristics to decide which action should be carry out at each recursion. Selecting a Vertex to Color A good heuristic to select a vertex to be colored is the DSATUR algorithm <ref> [1] </ref>. It consists of picking the vertex that has the largest saturation number (i.e., the number of forbidden colors, which are the colors used by its neighbors), and in breaking ties with the largest degree in the uncolored graph.
Reference: [2] <author> O. Coudert, C.-J. Richard Shi, </author> <title> "Exact Dichotomy based Constrained Encoding", </title> <address> ICCD'96, </address> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Based on this idea, [11] presents an algorithm that computes M in O (jM j). However this method is still limited by the size of M , which can be exponential w.r.t. jDj. In <ref> [2] </ref> is presented two ZBDD based algorithms to solve the constrained encoding problem. Both algorithms are based on set covering with compatible sets. They avoid the bottleneck the other methods face because ZBDDs allow to manipulate very large sets of compatible sets implicitly. <p> Face-embedding constraints are generated with ESPRESSO-MV [10]. We compared the algorithm presented in this paper with the best known previous exact solvers, [11] and <ref> [2] </ref>. The results are summarized in Table 1. The twin graph coloring paradigm consistently beats the two other methods, and it can solve problems that fail to terminate otherwise.
Reference: [3] <author> S. Devadas, A. R. </author> <title> Newton, "Exact Algorithms for Output Encoding, State Assignment, and Four-level Boolean Minimization", </title> <journal> IEEE Trans. </journal> <volume> CAD, </volume> <pages> 1-10, pp. 13-27, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: introduced by Tracey [12], dichotomy-based constrained encoding can be used to solve the following problems: generate an asynchronous implementation that is critical race free [12], or independent from the gate and wire delays [13]; generate a minimum-area PLA implementation [7, 8, 9, 15]; generate optimal PLA implementations of Boolean expressions <ref> [3, 4] </ref>; produce a state assignment for an event-based specification [6]; and solve hazard-free minimization and asynchronous FSM encoding for multiple-input changes [5].

Reference: [5] <author> R. M. Fuhrer, B. Lin, S. M. Nowick, </author> <title> "Symbolic Hazard-free Minimization and Encoding of Asynchronous Finite State Machines", </title> <address> ICCAD'95, </address> <month> Nov. </month> <year> 1995 </year>
Reference-contexts: race free [12], or independent from the gate and wire delays [13]; generate a minimum-area PLA implementation [7, 8, 9, 15]; generate optimal PLA implementations of Boolean expressions [3, 4]; produce a state assignment for an event-based specification [6]; and solve hazard-free minimization and asynchronous FSM encoding for multiple-input changes <ref> [5] </ref>. Fig. 2 illustrates a unified framework [11, 15] for constrained encoding in sequential logic synthesis: dichotomies can be used to express the correctness of the implementation (race-free, hazard-free, or speed-independent implementation), or to express some optimization criterions (area and speed).
Reference: [6] <author> L. Lavagno, C. W. Moon, R. K. Brayton, A. L. Sangiovanni-Vincentelli, </author> <title> "An Efficient Heuristic Procedure for Solving the State Assignment Problem for Event-based Specification", </title> <journal> IEEE Trans. </journal> <volume> CAD, </volume> <pages> 14-1, pp. 45-60, </pages> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: to solve the following problems: generate an asynchronous implementation that is critical race free [12], or independent from the gate and wire delays [13]; generate a minimum-area PLA implementation [7, 8, 9, 15]; generate optimal PLA implementations of Boolean expressions [3, 4]; produce a state assignment for an event-based specification <ref> [6] </ref>; and solve hazard-free minimization and asynchronous FSM encoding for multiple-input changes [5].
Reference: [7] <author> G. D. Micheli, R. K. Brayton, A. L. Sangiovanni-Vincentelli, </author> <title> "Optimal State Assignment for Finite State Machines", </title> <journal> IEEE Trans. </journal> <volume> CAD, </volume> <pages> 4-3, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: of states S = f1; : : : ; 4g Originally introduced by Tracey [12], dichotomy-based constrained encoding can be used to solve the following problems: generate an asynchronous implementation that is critical race free [12], or independent from the gate and wire delays [13]; generate a minimum-area PLA implementation <ref> [7, 8, 9, 15] </ref>; generate optimal PLA implementations of Boolean expressions [3, 4]; produce a state assignment for an event-based specification [6]; and solve hazard-free minimization and asynchronous FSM encoding for multiple-input changes [5].
Reference: [8] <author> G. D. </author> <title> Micheli, "Symbolic Design of Combinational and Sequential Logic Circuits Implemented by Two-level Logic Macros", </title> <journal> IEEE Trans. </journal> <volume> CAD, </volume> <pages> 5-1, </pages> <month> Oct. </month> <year> 1986. </year>
Reference-contexts: of states S = f1; : : : ; 4g Originally introduced by Tracey [12], dichotomy-based constrained encoding can be used to solve the following problems: generate an asynchronous implementation that is critical race free [12], or independent from the gate and wire delays [13]; generate a minimum-area PLA implementation <ref> [7, 8, 9, 15] </ref>; generate optimal PLA implementations of Boolean expressions [3, 4]; produce a state assignment for an event-based specification [6]; and solve hazard-free minimization and asynchronous FSM encoding for multiple-input changes [5].
Reference: [9] <author> G. D. </author> <title> Micheli, Synthesis and Optimization of Digital Circuits, </title> <publisher> McGraw-Hill, </publisher> <year> 1994. </year>
Reference-contexts: of states S = f1; : : : ; 4g Originally introduced by Tracey [12], dichotomy-based constrained encoding can be used to solve the following problems: generate an asynchronous implementation that is critical race free [12], or independent from the gate and wire delays [13]; generate a minimum-area PLA implementation <ref> [7, 8, 9, 15] </ref>; generate optimal PLA implementations of Boolean expressions [3, 4]; produce a state assignment for an event-based specification [6]; and solve hazard-free minimization and asynchronous FSM encoding for multiple-input changes [5]. <p> One can solve (1) by computing pair-wise compatible dichotomies, adding the resulting compatible sets to the set of dichotomies, and iterating this process until all the compatible sets are maximal <ref> [12, 15, 9] </ref>. However this method is applicable to small size problems because one needs to examine a huge number of dichotomy pairs. The reason is that in practice, dichotomies involve a small number of states, and consequently most of them are pair-wise compatible.
Reference: [10] <author> R. L. Rudell, A. L. Sangiovanni-Vincentelli, </author> <title> "Multiple-Valued Minimization for PLA Optimization", </title> <journal> IEEE Trans. </journal> <volume> CAD, </volume> <pages> 6-5, pp. 727-750, </pages> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: We use this strategy, where g captures the DSATUR heuristic. In practice, this strategy closely mimics strategy (2) but overcomes the problem men tioned above. 4 Experimental Results The benchmark consists of MCNC industrial examples representing a wide range of FSMs. Face-embedding constraints are generated with ESPRESSO-MV <ref> [10] </ref>. We compared the algorithm presented in this paper with the best known previous exact solvers, [11] and [2]. The results are summarized in Table 1. The twin graph coloring paradigm consistently beats the two other methods, and it can solve problems that fail to terminate otherwise.
Reference: [11] <author> A. Saldanha, T. Villa, R. K. Brayton, A. L. Sangiovanni-Vincentelli, </author> <title> "Satisfaction of Input and Output Encoding Constraints", </title> <journal> IEEE Trans. </journal> <volume> CAD, </volume> <pages> 13-5, pp. 589-602, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Fig. 2 illustrates a unified framework <ref> [11, 15] </ref> for constrained encoding in sequential logic synthesis: dichotomies can be used to express the correctness of the implementation (race-free, hazard-free, or speed-independent implementation), or to express some optimization criterions (area and speed). <p> One can solve (1) by associating two or dered dichotomies to each (unordered) dichotomy, computing all the maximal sets of compatible ordered dichotomies, and then converting them back to unordered dichotomies. Based on this idea, <ref> [11] </ref> presents an algorithm that computes M in O (jM j). However this method is still limited by the size of M , which can be exponential w.r.t. jDj. In [2] is presented two ZBDD based algorithms to solve the constrained encoding problem. <p> They avoid the bottleneck the other methods face because ZBDDs allow to manipulate very large sets of compatible sets implicitly. However they suffer from the irreducibility of the resulting set covering problems. Face hypercube embedding is another constrained state encoding framework <ref> [11] </ref>. A facet is a subset f of states of S that are constrained to be encoded within one face (cube) of the hypercube f0; 1g k , without having any other state intersecting this face. <p> Face-embedding constraints are generated with ESPRESSO-MV [10]. We compared the algorithm presented in this paper with the best known previous exact solvers, <ref> [11] </ref> and [2]. The results are summarized in Table 1. The twin graph coloring paradigm consistently beats the two other methods, and it can solve problems that fail to terminate otherwise.
Reference: [12] <author> J. H. Tracey, </author> <title> "Internal State Assignment for Asynchronous Sequential Machines" IEEE Trans. </title> <journal> Elec. Comp., </journal> <pages> pp. 551-560, </pages> <month> Aug. </month> <year> 1966. </year>
Reference-contexts: Fig. 1 shows a minimum-length encoding satisfying the three dichotomies ff1; 3g; f2; 4gg, ff3; 4g; f1gg, ff2; 3g; f4gg, and ff1; 2; 3g; fgg, on the set of states S = f1; : : : ; 4g Originally introduced by Tracey <ref> [12] </ref>, dichotomy-based constrained encoding can be used to solve the following problems: generate an asynchronous implementation that is critical race free [12], or independent from the gate and wire delays [13]; generate a minimum-area PLA implementation [7, 8, 9, 15]; generate optimal PLA implementations of Boolean expressions [3, 4]; produce a <p> 4gg, ff3; 4g; f1gg, ff2; 3g; f4gg, and ff1; 2; 3g; fgg, on the set of states S = f1; : : : ; 4g Originally introduced by Tracey <ref> [12] </ref>, dichotomy-based constrained encoding can be used to solve the following problems: generate an asynchronous implementation that is critical race free [12], or independent from the gate and wire delays [13]; generate a minimum-area PLA implementation [7, 8, 9, 15]; generate optimal PLA implementations of Boolean expressions [3, 4]; produce a state assignment for an event-based specification [6]; and solve hazard-free minimization and asynchronous FSM encoding for multiple-input changes [5]. <p> For example, the three dichotomies ff1; 2g; fgg, ff1; 3g; fgg, and ff2g; f3gg are pair-wise compatible, but there is no single bit encoding that satisfies the three of them at the same time. Tracey introduced the first exact algorithm for constrained encoding <ref> [12] </ref>. <p> One can solve (1) by computing pair-wise compatible dichotomies, adding the resulting compatible sets to the set of dichotomies, and iterating this process until all the compatible sets are maximal <ref> [12, 15, 9] </ref>. However this method is applicable to small size problems because one needs to examine a huge number of dichotomy pairs. The reason is that in practice, dichotomies involve a small number of states, and consequently most of them are pair-wise compatible.
Reference: [13] <author> S. H. Unger, </author> <title> Asynchronous Sequential Switching Circuits, </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1969. </year>
Reference-contexts: 2; 3g; fgg, on the set of states S = f1; : : : ; 4g Originally introduced by Tracey [12], dichotomy-based constrained encoding can be used to solve the following problems: generate an asynchronous implementation that is critical race free [12], or independent from the gate and wire delays <ref> [13] </ref>; generate a minimum-area PLA implementation [7, 8, 9, 15]; generate optimal PLA implementations of Boolean expressions [3, 4]; produce a state assignment for an event-based specification [6]; and solve hazard-free minimization and asynchronous FSM encoding for multiple-input changes [5].
Reference: [14] <author> T. Villa, A. L. Sangiovanni-Vincentelli, </author> <title> "NOVA: State Assignment of Finite State Machines for Optimal Two-level Logic Implementation", </title> <journal> IEEE Trans. </journal> <volume> CAD, </volume> <pages> 9-9, pp. 905-924, </pages> <month> Sept. </month> <year> 1990. </year>
Reference-contexts: Fig. 2 illustrates a unified framework [11, 15] for constrained encoding in sequential logic synthesis: dichotomies can be used to express the correctness of the implementation (race-free, hazard-free, or speed-independent implementation), or to express some optimization criterions (area and speed). It is more general than some other frameworks, e.g. <ref> [14] </ref>, which cannot cope with the state assigment of asynchronous circuits. ff (s) 2 1 0 4 1 1 1 This paper addresses the exact resolution of the dichotomy-based constrained encoding problem. Section 2 outlines the state-of-the-art.
Reference: [15] <author> S. Yang, M. J. Ciesielski, </author> <title> "Optimum and Suboptimum Algorithms for Input Encoding and its Relationship to Logic Minimization", </title> <journal> IEEE Trans. </journal> <volume> CAD, </volume> <pages> 10-1, pp. 4-12, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: of states S = f1; : : : ; 4g Originally introduced by Tracey [12], dichotomy-based constrained encoding can be used to solve the following problems: generate an asynchronous implementation that is critical race free [12], or independent from the gate and wire delays [13]; generate a minimum-area PLA implementation <ref> [7, 8, 9, 15] </ref>; generate optimal PLA implementations of Boolean expressions [3, 4]; produce a state assignment for an event-based specification [6]; and solve hazard-free minimization and asynchronous FSM encoding for multiple-input changes [5]. <p> Fig. 2 illustrates a unified framework <ref> [11, 15] </ref> for constrained encoding in sequential logic synthesis: dichotomies can be used to express the correctness of the implementation (race-free, hazard-free, or speed-independent implementation), or to express some optimization criterions (area and speed). <p> One can solve (1) by computing pair-wise compatible dichotomies, adding the resulting compatible sets to the set of dichotomies, and iterating this process until all the compatible sets are maximal <ref> [12, 15, 9] </ref>. However this method is applicable to small size problems because one needs to examine a huge number of dichotomy pairs. The reason is that in practice, dichotomies involve a small number of states, and consequently most of them are pair-wise compatible.
References-found: 14

