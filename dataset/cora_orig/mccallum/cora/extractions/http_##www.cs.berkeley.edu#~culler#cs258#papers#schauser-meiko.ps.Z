URL: http://www.cs.berkeley.edu/~culler/cs258/papers/schauser-meiko.ps.Z
Refering-URL: http://www.cs.berkeley.edu/~culler/cs258/
Root-URL: 
Email: fschauser,chrissg@cs.ucsb.edu  
Title: Experience with Active Messages on the Meiko CS-2  
Author: Klaus E. Schauser and Chris J. Scheiman 
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California, Santa Barbara  
Abstract: Active messages provide a low latency communication architecture which on modern parallel machines achieves more than an order of magnitude performance improvement over more traditional communication libraries. This paper discusses the experience we gained while implementing active messages on the Meiko CS-2, and discusses implementations for similar architectures. During our work we have identified that architectures which only support efficient remote write operations (or DMA transfers as in the case of the CS-2) make it difficult to transfer both data and control as required by active messages. Traditional network interfaces avoid this problem because they have a single point of entry which essentially acts as a queue. To efficiently support active messages on modern network communication co-processors, hardware primitives are required which support this queue behavior. We overcame this problem by producing specialized code which runs on the communications co-processor and supports the active messages protocol. Our implementation of active messages results in a one-way latency of 12:3s and achieves up to 39 MB/s for bulk transfers. Both numbers are close to optimal for the current Meiko hardware and are competitive with performance of active messages on other hardware platforms. 
Abstract-found: 1
Intro-found: 1
Reference: [BLA + 94] <author> M. A. Blumrich, K. Li, R. Alpert, C. Dubnicki, and E. W. Felten. </author> <title> Virtual Memory Mapped Network Interface for the SHRIMP Multicomputer. </title> <booktitle> In Proc. of the 21st Int'l Symposium on Computer Architecture, </booktitle> <month> April </month> <year> 1994. </year>
Reference-contexts: The next generation goes a step further and allows fully protected user-level remote memory accesses without the involvement of main processor and the operating system (e.g., Cray T3D, Shrimp project <ref> [BLA + 94] </ref>). It is difficult to implement active messages efficiently on these architectures since remote writes alone are not sufficient. It is easier on architectures which provide a freely programmable co-processor to handle communication (e.g., Meiko CS-2, *T [NPA92]).
Reference: [CDG + 93] <author> D. E. Culler, A. Dusseau, S. C. Golstein, A. Krish-namurthy, S. Lumetta, T. von Eicken, and K. Yelick. </author> <title> Parallel Programming in Split-C. </title> <booktitle> In Proc. of Supercomputing, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: Although they are quite primitive, active messages have become an important communication layer because of their efficiency. The small overhead and low latency facilitates building more complicated communication layers [TM94] and makes it a desirable target for high-level language compilers <ref> [CGSvE93, CDG + 93] </ref>. Over the past several years active messages have been implemented on many different hardware platforms, including the CM-5 and Ncube/2 [vECGS92], Paragon, as well as clusters of workstations connected by FDDI [Mar94] and ATM [vEABB94]. <p> For example, the co-processor can support communications protocols such as collective communication, distributed shared memory or cache coherence protocols. Such is the case for the parallel language Split-C <ref> [CDG + 93] </ref>. Split-C is a C-like language with a number of communication primitives; among them are the data transfer primitives get, put, read, write, and store. Split-C data transfers are kept track of using counters, and Split-C uses active messages to increment and decrement these counters.
Reference: [CGSvE93] <author> D. E. Culler, S. C. Goldstein, K. E. Schauser, and T. von Eicken. </author> <title> TAM A Compiler Controlled Threaded Abstract Machine. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18, </volume> <month> July </month> <year> 1993. </year>
Reference-contexts: Although they are quite primitive, active messages have become an important communication layer because of their efficiency. The small overhead and low latency facilitates building more complicated communication layers [TM94] and makes it a desirable target for high-level language compilers <ref> [CGSvE93, CDG + 93] </ref>. Over the past several years active messages have been implemented on many different hardware platforms, including the CM-5 and Ncube/2 [vECGS92], Paragon, as well as clusters of workstations connected by FDDI [Mar94] and ATM [vEABB94]. <p> From Figure 1, we see that for blocking bulk active messages our implementation achieves a bandwidth of up to 39 MB/second. 5 Related Work Active messages originated out of the Berkeley TAM group which was looking for efficient communication primitives required for fine-grained parallel languages <ref> [CGSvE93] </ref>. The first active message implementation was developed for the Ncube/2 and CM-5 and resulted in more than an order of magnitude performance improvement over more traditional communication architectures [vECGS92].
Reference: [CKP + 93] <author> D. E. Culler, R. M. Karp, D. A. Patterson, A. Sahay, K. E. Schauser, E. Santos, R. Subramonian, and T. von Eicken. </author> <title> LogP: Towards a Realistic Model of Parallel Computation. </title> <booktitle> In Fourth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Table 2 summarizes the results, which are discussed in more detail below. The performance is presented in terms of the parameters of the LogP model <ref> [CKP + 93] </ref>. L is the latency, or time for a message to travel from a source to a destination processor, disregarding overhead. o s is the sending overhead. This is the time the main processor is involved in sending a message.
Reference: [HM93] <author> M. Homewood and M. McLaren. </author> <title> Meiko CS-2 Interconnect Elan-Elite Design. </title> <booktitle> In Proc. of Hot Interconnects, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: The CS-2, the most recent MPP built by Meiko, consists of Sparc based nodes connected via a fat tree communication network <ref> [HM93] </ref>. The CS-2 is an interesting architecture as it closely resembles a cluster of workstations, which is widely accepted as the future of parallel processing.
Reference: [Kea94] <author> J. Kuskin and et. al. </author> <title> The Stanford FLASH Multiprocessor. </title> <booktitle> In Proc. of the 21st Int'l Symposium on Computer Architecture, </booktitle> <month> April </month> <year> 1994. </year>
Reference-contexts: It is easier on architectures which provide a freely programmable co-processor to handle communication (e.g., Meiko CS-2, *T [NPA92]). Modern shared memory machines such as the Flash architecture also integrate a fully programmable communications co-processor, but allow only system code to run on it to facilitate protection <ref> [Kea94] </ref>. 6 Conclusions This paper reports on our experience with implementing active messages on the Meiko CS-2. Active messages provide an extremely simple but efficient communication architecture. They are universal; with active messages one can support any protocol.
Reference: [Mar94] <author> R. P. Martin. HPAM: </author> <title> An Active Message Layer for a Network of HP Workstations. </title> <booktitle> In Proc. of Hot Interconnects II, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: Over the past several years active messages have been implemented on many different hardware platforms, including the CM-5 and Ncube/2 [vECGS92], Paragon, as well as clusters of workstations connected by FDDI <ref> [Mar94] </ref> and ATM [vEABB94]. In most, if not all, of these cases, active messages are a natural solution for obtaining low latency communication. In most of these systems the main processor is involved in both the sending and receiving of messages. <p> This is either ensured by involving the operating system on every message (Ncube/2 [vE93], SparcStation cluster [vEABB94]), using gang scheduling (CM-5 [vE93]), or combining gang scheduling with some hardware support (HP cluster <ref> [Mar94] </ref>). Protection on the Meiko CS-2 is trivial since it is done completely by the communications co-processor in hardware. 2 2.2 Reliability To provide reliability, we must ensure that each message is delivered to the destination once and only once. <p> Thus, only a single message can be outstanding for any pair of processors. It is easy to extend this using k message deep input buffers <ref> [Mar94] </ref>. Now it is possible to overlap several communication operations to the same processor and it is possible to combine the acknowledgment of multiple messages. Unfortunately, as we have found out, using many buffers leads to a larger working set and therefore to a higher cache miss rate. <p> As a consequence, active messages were embraced by applications and systems programmers and were integrated into the CM-5 message library [TM94]. Since then active messages have been implemented on several other hardware platforms, including the Paragon, a cluster of HP workstations connected by FDDI <ref> [Mar94] </ref>, and a cluster of SparcStations connected by ATM [vEABB94]. The last two implementations were especially challenging, since they had to solve the problem of unreliable message delivery. As previously mentioned, active messages are essentially a very limited form of RPC.
Reference: [NPA92] <author> R. S. Nikhil, G. M. Papadopoulos, and Arvind. </author> <title> *T: </title>
Reference-contexts: It is difficult to implement active messages efficiently on these architectures since remote writes alone are not sufficient. It is easier on architectures which provide a freely programmable co-processor to handle communication (e.g., Meiko CS-2, *T <ref> [NPA92] </ref>). Modern shared memory machines such as the Flash architecture also integrate a fully programmable communications co-processor, but allow only system code to run on it to facilitate protection [Kea94]. 6 Conclusions This paper reports on our experience with implementing active messages on the Meiko CS-2.
References-found: 8

