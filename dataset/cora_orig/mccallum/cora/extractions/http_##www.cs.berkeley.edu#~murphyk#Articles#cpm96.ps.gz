URL: http://www.cs.berkeley.edu/~murphyk/Articles/cpm96.ps.gz
Refering-URL: http://www.cs.berkeley.edu/~murphyk/publ.html
Root-URL: 
Title: Optimal Alignments in Linear Space using Automaton-derived Cost Functions (Extended Abstract) Submitted to CPM'96  
Author: Kevin P. Murphy 
Date: 9 December 1995  
Abstract: In a previous paper [SM95], we showed how finite automata could be used to define objective functions for assessing the quality of an alignment of two (or more) sequences. In this paper, we show some results of using such cost functions. We also show how to extend Hischberg's linear space algorithm [Hir75] to this setting, thus generalizing a result of Myers and Miller [MM88b]. 
Abstract-found: 1
Intro-found: 1
Reference: [AWY92] <author> L. Allison, C. S. Wallace, and C. N. Yee. </author> <title> Finite-state models in the alignment of macromolecules. </title> <journal> J. of Molecular Evolution, </journal> <volume> 35 </volume> <pages> 77-89, </pages> <year> 1992. </year>
Reference-contexts: What is clear is that, with 2k + 1 states, it is possible to represent any k-piece-wise linear cost function as a natural extension of the affine gap model (see e.g, <ref> [AWY92] </ref>). However, it does not seem to be possible to represent convex gap costs, for example, for which the best known algorithm runs in O (nm log n) time [MM88a]. <p> Another important question is: what do the arc weights mean, and where do they come from? The most natural interpretation is that they represent the negative log probability of the operation on the arc they are attached to, scaled up to be integer-valued [BT86]. Allison, Wallace and Yee <ref> [AWY92] </ref> use the EM algorithm to learn the transition probabilities for the affine gap machine. 2 They start with arbitary initial values, and iterate until the message length of the resulting alignment is (locally) minimal.
Reference: [Bak93] <author> B. S. Baker. </author> <title> A theory of parameterized pattern matching: algorithms and applications (extended abstract). </title> <booktitle> In ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 71-80, </pages> <year> 1993. </year>
Reference-contexts: For example, the label "XYX/XZX" will match the substrings "aba/aca", since 'X' is bound consistently to 'a', but will not match "abd/acd", "aba/acd", etc. (where we have used upper case letters for variables, and lower case for constants.) These are called parameterized patterns <ref> [Bak93] </ref>. When compiling an automaton, it is simple to generate side conditions which specify when an arc can be traversed; 2 if it cannot, we assign the arc an infinite cost.
Reference: [BHK + 93] <author> M. P. Brown, R. Hughey, A. Krogh, I. S. Mian, K. Sjolander, and D. Haussler. </author> <title> Using dirichlet mixtures priors to derive hidden Markov models for protein families. </title> <booktitle> In International Conf. on Intelligent Systems for Molecular Biology, </booktitle> <pages> pages 47-55, </pages> <year> 1993. </year>
Reference-contexts: For the Needleman-Wunsch one-state machine, all the 2 The main problem in learning the transition probabilities is in getting enough data to avoid over-fitting. It would be interesting to investigate using priors for this cf. <ref> [BHK + 93] </ref>. 3 In the linear space algorithm, we compute the midpoint of this optimal path, (k fl ; i fl ; j fl ), and then recursively compute the optimal alignments of each half.
Reference: [BT86] <author> M. J. Bishop and E. A. Thompson. </author> <title> Maximum likelihood alignment of DNA sequences. </title> <journal> J. of Molecular Biology, </journal> (190):159-165, 1986. 
Reference-contexts: Another important question is: what do the arc weights mean, and where do they come from? The most natural interpretation is that they represent the negative log probability of the operation on the arc they are attached to, scaled up to be integer-valued <ref> [BT86] </ref>. Allison, Wallace and Yee [AWY92] use the EM algorithm to learn the transition probabilities for the affine gap machine. 2 They start with arbitary initial values, and iterate until the message length of the resulting alignment is (locally) minimal.
Reference: [Fic84] <author> J. W. Fickett. </author> <title> Fast optimal alignment. </title> <journal> Nucleic Acids Research, </journal> <volume> 12 </volume> <pages> 175-180, </pages> <year> 1984. </year>
Reference-contexts: In this way, we can avoid computing regions of the matrices which lie too far from the main diagonal. This approach was pioneered in <ref> [Ukk85, Fic84] </ref>, and generalised in [Spo89, Spo91], but only in the case of affine gap scoring functions.
Reference: [GU95] <author> X. Guan and E. C. Uberbacher. </author> <title> Alignment of dna and protein sequences containing frameshift errors. </title> <type> Technical Report ORNL/TM-12976, </type> <institution> Computer Science and Mathematics Division, Oak Ridge National Laboratory, </institution> <year> 1995. </year>
Reference-contexts: This can be useful when aligning translated cDNA sequences with proteins. This is similar to the work of Guan and Uberbacher <ref> [GU95] </ref>; in the future, we will attempt to replicate their results. 4.2 The gene-finding machine In Figure 8 we illustrate an automaton which can splice out introns "for free" when aligning coding sequences.
Reference: [Hir75] <author> D. S. Hirschberg. </author> <title> A linear space algorithm for computing longest common subsequences. </title> <journal> Comm. of the ACM, </journal> <volume> 18 </volume> <pages> 341-343, </pages> <year> 1975. </year>
Reference-contexts: In this paper, we show how to extend Hirschberg's algorithm <ref> [Hir75] </ref> to do this in linear space. This generalizes a result of Myers and Miller [MM88b], who show how to do this in the case where f allows for affine gap costs.
Reference: [KH67] <author> R. M. Karp and M. </author> <title> Held. Finite-state processes and dynamic programming. </title> <journal> SIAM J. of Appl. Math., </journal> <volume> 13(3) </volume> <pages> 693-718, </pages> <year> 1967. </year> <month> 9 </month>
Reference-contexts: When the labels contain string constants, the side conditions can become very messy, further illustrating the benefit of using an automaton to specify the cost function. 1.2 Semantics Karp and Held <ref> [KH67] </ref> refer to the kind of automaton we have (informally) introduced above as an additive sequential decision process.
Reference: [KMH93] <author> A. Krogh, I. S. Mian, and D. Haussler. </author> <title> A hidden markov model that finds genes in E. Coli DNA. </title> <type> Technical Report USCS-CRL-93-33, </type> <address> U. C. Santa Cruz, </address> <institution> Dept. Comp. Sci., </institution> <year> 1993. </year> <note> Available from ftp.cse.ucsc.edu, directory pub/dna. </note>
Reference-contexts: This is similar to, but much simpler than, the Hidden Markov Model used to find genes in E. Coli <ref> [KMH93] </ref>. In the future we will investigate the biological utility of this. 4.3 The VNTR machine In [SM95] we presented an automaton which can charges indels inside a VNTR (Variable Number of Tandem Repeats) region less than normal.
Reference: [MM88a] <author> W. Miller. and E. Myers. </author> <title> Sequence comparison with concave weighting functions. </title> <journal> Bull. Math. Bio., </journal> <year> 1988. </year>
Reference-contexts: However, it does not seem to be possible to represent convex gap costs, for example, for which the best known algorithm runs in O (nm log n) time <ref> [MM88a] </ref>. Another important question is: what do the arc weights mean, and where do they come from? The most natural interpretation is that they represent the negative log probability of the operation on the arc they are attached to, scaled up to be integer-valued [BT86].
Reference: [MM88b] <author> E. W. Myers and W. Miller. </author> <title> Optimal alignments in linear space. </title> <journal> Computer Applications in the Biological Sciences, </journal> <volume> 4(1) </volume> <pages> 11-17, </pages> <year> 1988. </year>
Reference-contexts: In this paper, we show how to extend Hirschberg's algorithm [Hir75] to do this in linear space. This generalizes a result of Myers and Miller <ref> [MM88b] </ref>, who show how to do this in the case where f allows for affine gap costs. We also include results which illustrate the biological utility of context-sensitive cost functions. fl murphyk@cs.ucdavis.edu 1 In this paper, we shall only consider global alignments and will speak consistently of minimizing costs. <p> max q 0 fjuj : q 0 u=v ! c qg For example, in the affine gap machine (see Figure 1), d (ins) = 1, d (del) = 2, and d (sub) = 2, so the total storage space is 5 (n + 1) cells. (A more careful analysis, in <ref> [MM88b] </ref>, reduces this to 2 (n + 1) + 3; however, here we want to concentrate on general techniques, which can be applied to all automata.) For simplicity of implementation (to keep all the arrays the same "height"), we define d = max q d (q), and allocate a d fi
Reference: [NW70] <author> S. B. Needleman and C. D. Wunsch. </author> <title> A general method applicable to the search fror the similarities in the amino acid sequences of two proteins. </title> <journal> J. of Molecular Biology, </journal> <volume> 48 </volume> <pages> 443-453, </pages> <year> 1970. </year>
Reference-contexts: An optimal alignment is one which minimizes a cost function, or equivalently, which maximizes a similarity function. 1 The cost of an alignment is usually defined as the sum of the costs of each column in the alignment. We shall call this the Needleman-Wunsch <ref> [NW70] </ref> cost function. The crucial thing to notice is that the cost of a column is independent of the context in which it occurs. It is commonly recognised that this is an unrealistic assumption for applications in molecular biology.
Reference: [SM95] <author> D. B. Searls and K. P. Murphy. </author> <title> Automata-theoretic models of mutation and alignment. </title> <booktitle> In Proc. ISMB (Intelligent Systems for Molecular Biology), </booktitle> <year> 1995. </year>
Reference-contexts: We make a transition between states every time we perform a mutation (edit) operation. A very convenient way to represent context-sensitive cost functions is as a finite transducer <ref> [SM95] </ref>, that is, as a finite automaton whose transition arcs are labelled by the operations they represent. We have developed a Graphical User Interface that allows the user to interactively create an automaton, which implicitely defines an objective function f . <p> However, all of the results apply to the maximization case, which is more appropriate for local alignment. See <ref> [SM95] </ref>. 1 single character u can be replaced by a space ('-') at a cost of fi. <p> This is similar to, but much simpler than, the Hidden Markov Model used to find genes in E. Coli [KMH93]. In the future we will investigate the biological utility of this. 4.3 The VNTR machine In <ref> [SM95] </ref> we presented an automaton which can charges indels inside a VNTR (Variable Number of Tandem Repeats) region less than normal.
Reference: [Spo89] <author> J. L. Spouge. </author> <title> Speeding up dynamic programming algorithms for finding optimal lattice paths. </title> <journal> SIAM J. Appl. Math, </journal> <volume> 49(5) </volume> <pages> 1552-1566, </pages> <year> 1989. </year>
Reference-contexts: In this way, we can avoid computing regions of the matrices which lie too far from the main diagonal. This approach was pioneered in [Ukk85, Fic84], and generalised in <ref> [Spo89, Spo91] </ref>, but only in the case of affine gap scoring functions.
Reference: [Spo91] <author> J. L. Spouge. </author> <title> Fast optimal alignment. </title> <journal> Computer Applications in the Biological Sciences, </journal> <volume> 7(1) </volume> <pages> 1-7, </pages> <year> 1991. </year>
Reference-contexts: In this way, we can avoid computing regions of the matrices which lie too far from the main diagonal. This approach was pioneered in [Ukk85, Fic84], and generalised in <ref> [Spo89, Spo91] </ref>, but only in the case of affine gap scoring functions.
Reference: [Ukk85] <author> E. Ukkonen. </author> <title> Algorithms for approximate string matching. </title> <journal> Information and Control, </journal> <volume> 64 </volume> <pages> 100-118, </pages> <year> 1985. </year>
Reference-contexts: In this way, we can avoid computing regions of the matrices which lie too far from the main diagonal. This approach was pioneered in <ref> [Ukk85, Fic84] </ref>, and generalised in [Spo89, Spo91], but only in the case of affine gap scoring functions.
References-found: 16

