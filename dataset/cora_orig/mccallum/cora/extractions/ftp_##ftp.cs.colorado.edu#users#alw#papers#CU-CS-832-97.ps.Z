URL: ftp://ftp.cs.colorado.edu/users/alw/papers/CU-CS-832-97.ps.Z
Refering-URL: http://www.cs.colorado.edu/users/alw/AvailablePubs.html
Root-URL: http://www.cs.colorado.edu
Email: frickhall,dennis,andre,alwg@cs.colorado.edu  
Title: The Software Dock: A Distributed, Agent-based Software Deployment System  
Author: Richard S. Hall, Dennis Heimbigner, Andre van der Hoek, and Alexander L. Wolf 
Address: Boulder, CO 80309 USA  
Affiliation: Software Engineering Research Laboratory Department of Computer Science University of Colorado  
Abstract: University of Colorado Department of Computer Science Technical Report CU-CS-832-97 February 1997 A version of this report to appear in The Proceedings of the 1997 International Conference on Distributed Computing Systems, May 1997 This work was supported in part by the Naval Research and Development Division (NRaD) and the Defense Advanced Research Projects Agency under Contract Number N66001-95-D-8656. This work was also supported in part by the Air Force Material Command, Rome Laboratory, and the Defense Advanced Research Projects Agency under Contract Number F30602-94-C-0253. The content of the information does not necessarily reflect the position or the policy of the U.S. Government and no official endorsement should be inferred. c fl 1997 Richard S. Hall, Dennis Heimbigner, Andre van der Hoek, and Alexander L. Wolf
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> NET-Install, </author> <year> 1996. </year> <note> Web address=www.twenty.com. </note>
Reference-contexts: Limited communication for configuration is possible from the tuner to the transmitter in the form of log files and property files. There is no support for dependencies among channels, inter-channel communication, or policies other than differential updating. NET-Install <ref> [1] </ref> enables software installation directly off the Web using Netscape plug-in technology.
Reference: [2] <author> A+Enterprise Desktop Manager, </author> <year> 1996. </year> <note> Web Address=www.amdahl.com. </note>
Reference-contexts: The Software Dock, on the other hand, supports a federated approach with multiple, autonomous consumers obtaining software systems from multiple, autonomous producers. Although internally event based, none of these systems supports the equivalent of WAM/E. Some related but more limited systems include A+Enterprise Desktop Manager <ref> [2] </ref> and Ship [8]. They also support release management by enabling a developer to distribute their software to a specific set of users. However, these systems do not make dependency information generally available, nor do they address distribution and decentralization.
Reference: [3] <institution> Atria Software, Natick, Massachusetts. ClearCase Concepts Manual, </institution> <year> 1992. </year>
Reference-contexts: Surprisingly, the traditional configuration management systems (e.g., Make [7], RCS [18], ClearCase <ref> [3] </ref>, and Continuus [5]) provide little support for the deployment of the systems whose configuration and construction they manage; they are almost exclusively concerned with software development at the source-code level.
Reference: [4] <author> C. Mic Bowman, Peter B. Danzig, Darren R. Hardy, Udi Manber, and Michael F. Schwartz. </author> <title> The Harvest Information Discovery and Access System. </title> <booktitle> In Proceedings of the Second International World Wide Web Conference, </booktitle> <pages> pages 763-771, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: The OLLA system depends on a separate system called Disco that, in turn, depends on a Web page indexing and search system called Harvest <ref> [4] </ref>. Disco is an extension to Harvest developed by Lockheed Martin that adds a forms-based interface to the Harvest query system. Harvest, on the other hand, is an independent system developed outside of Lockheed Martin. <p> In this case, servers can be connected into a hierarchy in which most events are handled within a subtree. All non-local traffic is sent on a single connection to the parent of the subtree for eventual propagation to a remote subtree. The Harvest system <ref> [4] </ref> provides a good model for this kind of approach. Another approach might provide separate message servers for various kinds of events.
Reference: [5] <institution> Continuus Software Corporation, Irvine, California. Continuus Task Reference, </institution> <year> 1994. </year>
Reference-contexts: Surprisingly, the traditional configuration management systems (e.g., Make [7], RCS [18], ClearCase [3], and Continuus <ref> [5] </ref>) provide little support for the deployment of the systems whose configuration and construction they manage; they are almost exclusively concerned with software development at the source-code level.
Reference: [6] <institution> Desktop Management Task Force. Desktop Management Interface Specification, </institution> <note> Version 2.0, </note> <month> 27 March </month> <year> 1996. </year>
Reference-contexts: The registry is organized as an n-ary tree. The tree model was chosen mainly for its simplicity, but also because it subsumes relevant existing models, such as the DMTF MIF format <ref> [6] </ref>, the Microsoft Registry [10], the X resources model [17], and most file systems. The schema of the registry is kept consistent across sites to ease the development of agents that access the information. Each tree node contains a name, a description, access controls, and an optional type. <p> But the Autoconf approach does not scale because the information that it must calculate continues to grow over time, and this produces large and unwieldy scripts. The Desktop Management Task Force (DMTF) has developed DMI, the Desktop Management Interface <ref> [6] </ref>. DMI consists of a format for describing management information called Management Information Format (MIF), a service provider, an API for management applications, an API for components, and a set of services for facilitating remote communication between participating objects.
Reference: [7] <author> Stuart I. Feldman. </author> <title> Make a program for maintaining computer programs. </title> <journal> Software Practice and Experience, </journal> <volume> 9:255 - 265, </volume> <year> 1979. </year>
Reference-contexts: Surprisingly, the traditional configuration management systems (e.g., Make <ref> [7] </ref>, RCS [18], ClearCase [3], and Continuus [5]) provide little support for the deployment of the systems whose configuration and construction they manage; they are almost exclusively concerned with software development at the source-code level.
Reference: [8] <author> G. Fowler, D. Korn, H. Rao, J. Snyder, and K.-P. Vo. </author> <title> Configuration Management. </title> <editor> In B. Krishnamurthy, editor, </editor> <title> Practical Reusable UNIX Software, chapter 3. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: The Software Dock, on the other hand, supports a federated approach with multiple, autonomous consumers obtaining software systems from multiple, autonomous producers. Although internally event based, none of these systems supports the equivalent of WAM/E. Some related but more limited systems include A+Enterprise Desktop Manager [2] and Ship <ref> [8] </ref>. They also support release management by enabling a developer to distribute their software to a specific set of users. However, these systems do not make dependency information generally available, nor do they address distribution and decentralization.
Reference: [9] <author> James Gosling, Bill Joy, and Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: This leads to installations that cannot operate, simply because all the necessary components have not been put in place. As more systems are built using distributed component technology, such as CORBA [14] or Java <ref> [9] </ref>, the "missing component" problem will become more common. The personal computing notion that software systems are self-contained, such that copies of all components needed for an installation are included on a CD-ROM, is overly simplistic. <p> Tying them together is WAM/E, which provides bi-directional communication pathways. Agent technology is useful in this situation because it provides a means of dynamically distributing functionality and enabling client-side processing of events. Given the emergence of languages such as Java <ref> [9] </ref>, agents can be developed independently of hardware and operating system platforms. 3.2 Federated Deployment Registry The federated deployment registry is central to the Software Dock architecture and is formed by conjoining the registries at all release and field sites.
Reference: [10] <author> Jerry Honeycutt. </author> <title> Using the Windows 95 Registry. </title> <publisher> Que Publishing, </publisher> <address> Indianapolis, IN, </address> <year> 1996. </year>
Reference-contexts: Tools such as Autoconf [12] and Ship [11] attempt to obtain the information on a per installation, ad hoc basis by using scripts and heuristics. The Microsoft Registry <ref> [10] </ref> stores some amount of configuration information at a site, but that information is only partially standardized. Compounding the configuration and installation problem is the fact that many development organizations do not make system dependencies an explicit part of the system's definition. <p> The registry is organized as an n-ary tree. The tree model was chosen mainly for its simplicity, but also because it subsumes relevant existing models, such as the DMTF MIF format [6], the Microsoft Registry <ref> [10] </ref>, the X resources model [17], and most file systems. The schema of the registry is kept consistent across sites to ease the development of agents that access the information. Each tree node contains a name, a description, access controls, and an optional type.
Reference: [11] <author> B. Krishnamurthy, </author> <title> editor. Practical Reusable UNIX Software, </title> <booktitle> chapter 3, </booktitle> <pages> pages 91-120. </pages> <publisher> John Wiley & Sons, Inc., </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: Even if the information were available, non-standard methods to access the information make it difficult to automatically and remotely configure the system for deployment. Tools such as Autoconf [12] and Ship <ref> [11] </ref> attempt to obtain the information on a per installation, ad hoc basis by using scripts and heuristics. The Microsoft Registry [10] stores some amount of configuration information at a site, but that information is only partially standardized.
Reference: [12] <author> D. Mackenzie, R. McGrath, and N. Friedman. Autoconf: </author> <title> Generating Automatic Configuration Scripts. Free Software Foundation, </title> <publisher> Inc, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: Even if the information were available, non-standard methods to access the information make it difficult to automatically and remotely configure the system for deployment. Tools such as Autoconf <ref> [12] </ref> and Ship [11] attempt to obtain the information on a per installation, ad hoc basis by using scripts and heuristics. The Microsoft Registry [10] stores some amount of configuration information at a site, but that information is only partially standardized. <p> GNU Autoconf <ref> [12] </ref> is a tool for producing shell scripts that automatically configure software source code build packages to adapt to many kinds of UNIX-like systems.
Reference: [13] <institution> Marimba, Inc. </institution> <note> Castanet White Paper, 1996. http://www.marimba.com/developer/castanet-whitepaper.html. </note>
Reference-contexts: The primary flaw in the system is that it embeds dependencies and other knowledge into Make files. Compared to the Software Dock's explicit registry, it is difficult to locate and manage dependency information about systems. Additionally, functional support is limited to only installation and de-installation. Marimba's Castanet <ref> [13] </ref> is a content delivery system based on a client-server model of tuners and transmitters. Content, called a channel, is placed in a directory on a server transmitter and is made available to client tuners.
Reference: [14] <author> Object Management Group. </author> <title> The Common Object Request Broker: Architecture and Specification, Revision 2.0, </title> <month> July </month> <year> 1995. </year>
Reference-contexts: This leads to installations that cannot operate, simply because all the necessary components have not been put in place. As more systems are built using distributed component technology, such as CORBA <ref> [14] </ref> or Java [9], the "missing component" problem will become more common. The personal computing notion that software systems are self-contained, such that copies of all components needed for an installation are included on a CD-ROM, is overly simplistic.
Reference: [15] <author> The FreeBSD Documentation Project. </author> <title> FreeBSD Handbook. FreeBSD Documentation Project, </title> <note> 15 May 1996. Web Address=ftp.freebsd.org, Path=/pub/FreeBSD/docs/handbook.tex. </note>
Reference-contexts: Surprisingly, the traditional configuration management systems (e.g., Make [7], RCS [18], ClearCase [3], and Continuus [5]) provide little support for the deployment of the systems whose configuration and construction they manage; they are almost exclusively concerned with software development at the source-code level. The FreeBSD <ref> [15] </ref> porting system supports the FreeBSD user community by organizing freely available software into a carefully constructed hierarchy known as the "ports collection". It uses various forms of heuristics to determine a site's state and employs the results in building and installing a software package.
Reference: [16] <author> D.S. Rosenblum and A.L. Wolf. </author> <title> A Design Framework for Internet-Scale Event Observation and Notification. </title> <type> Technical Report 97-06, </type> <institution> Department of Information and Computer Science, University of California, Irvine, California, </institution> <month> February </month> <year> 1997. </year>
Reference-contexts: the field dock and release dock registries that provides a global name space. * An agent is an executable program that performs specific tasks of the deployment process at release and field sites on behalf of producers and consumers. * A wide-area messaging/event system (WAM/E) is an Internet-scale notification mechanism <ref> [16] </ref> that enables the flow of messages and events between agents located at release and field docks. As shown in Figure 1, there can be many field and release docks representing the interests of the many possible participants in the deployment process. <p> Thus, there is an intentional similarity of form between local events and wide-area events. The WAM/E mechanism described here is provisional and is the subject of further research <ref> [16] </ref>. Below, we characterize the requirements that WAM/E must eventually address. 3.6.1 Efficient Event Propagation The single message server will be overwhelmed when the number of events and the number of sites is large.
Reference: [17] <author> Robert W. Scheifler and James Gettys. </author> <title> X Window System. </title> <publisher> Digital Press, 3rd edition, </publisher> <year> 1992. </year>
Reference-contexts: The registry is organized as an n-ary tree. The tree model was chosen mainly for its simplicity, but also because it subsumes relevant existing models, such as the DMTF MIF format [6], the Microsoft Registry [10], the X resources model <ref> [17] </ref>, and most file systems. The schema of the registry is kept consistent across sites to ease the development of agents that access the information. Each tree node contains a name, a description, access controls, and an optional type. Additionally, each node contains a list of attribute-value pairs. <p> Ideally, one would like to be able to register for any event of a particular class. To enable this, the field dock event interface borrows the wildcard notation from the X resources model <ref> [17] </ref>. Two types of wildcards are provided: a single-level wildcard (".") and a multiple-level wildcard ("*"). By using a "." in the event name specification, any one value at the specified level is matched. Using "*" indicates matching any number of values at multiple levels.
Reference: [18] <author> W.F. Tichy. RCS, </author> <title> A System for Version Control. </title> <journal> Software|Practice and Experience, </journal> <volume> 15(7) </volume> <pages> 637-654, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Surprisingly, the traditional configuration management systems (e.g., Make [7], RCS <ref> [18] </ref>, ClearCase [3], and Continuus [5]) provide little support for the deployment of the systems whose configuration and construction they manage; they are almost exclusively concerned with software development at the source-code level.
Reference: [19] <institution> TME/10 Software Distribution. </institution> <note> Web Address=www.tivoli.com, Path=/products/Courier. </note>
Reference-contexts: A number of commercial systems are available that support notions of software system release. Traditional network managers|HP's OpenView, IBM's NetView, and Sun's Solstice|were developed originally to manage hardware, and their software management support continues to lag. Tivoli's TME/10 <ref> [19, 20] </ref> most directly addresses the same issues as the Software Dock; it support configurations, dependencies, installation, and inventory. These systems assume a centralized control with a single site for configuration and releases.
Reference: [20] <institution> Tivoli Systems Inc. Applications Management Specification, </institution> <year> 1995. </year>
Reference-contexts: A number of commercial systems are available that support notions of software system release. Traditional network managers|HP's OpenView, IBM's NetView, and Sun's Solstice|were developed originally to manage hardware, and their software management support continues to lag. Tivoli's TME/10 <ref> [19, 20] </ref> most directly addresses the same issues as the Software Dock; it support configurations, dependencies, installation, and inventory. These systems assume a centralized control with a single site for configuration and releases.
Reference: [21] <editor> A. van der Hoek, R.S. Hall, D.M. Heimbigner, and A.L. Wolf. </editor> <title> Software Release Management. </title> <type> Technical Report CU-CS-806-96, </type> <institution> Department of Computer Science, University of Colorado, Boulder, Colorado, </institution> <month> August </month> <year> 1996. </year> <month> 19 </month>
Reference-contexts: However, these systems do not make dependency information generally available, nor do they address distribution and decentralization. Further, they lack event mechanisms and cannot support the automation of arbitrary deployment activities. SRM (Software Release Manager) <ref> [21] </ref> was specifically designed to facilitate the distribution of software that is composed of sets of interdependent systems developed at geographically distributed and decentralized sites. Hiding the physical distribution and using the dependencies among the various systems, SRM allows retrieval of a complete software system through a Web-based interface.
References-found: 21

