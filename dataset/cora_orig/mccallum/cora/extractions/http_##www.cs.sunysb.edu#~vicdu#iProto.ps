URL: http://www.cs.sunysb.edu/~vicdu/iProto.ps
Refering-URL: http://www.cs.sunysb.edu/~vicdu/
Root-URL: http://www.cs.sunysb.edu
Title: Fighting Livelock in the i-Protocol: A Comparative Study of Verification Tools  
Author: Yifei Dong, Xiaoqun Du, Y.S. Ramakrishna C.R. Ramakrishnan, I.V. Ramakrishnan, Scott A. Smolka, Oleg Sokolsky Eugene W. Stark, and David S. Warren 
Address: NY 11794-4400, USA  
Affiliation: Department of Computer Science, SUNY at Stony Brook Stony Brook,  
Abstract: The i-protocol, an optimized sliding-window protocol for GNU UUCP, came to our attention two years ago when we used the Con-currency Factory's local model checker to detect, locate, and correct a non-trivial livelock in version 1.04 of the protocol. Since then, we have repeated this verification effort with five widely used model checkers, namely, COSPAN, Mur', SMV, Spin, and XMC. It is our contention that the i-protocol makes for a particularly compelling case study in protocol verification and for a formidable benchmark of verification-tool performance, for the following reasons: 1) The i-protocol can be used to gauge a tool's ability to detect and diagnose livelock errors. 2) The size of the i-protocol's state space grows exponentially in the window size, and the entirety of this state space must be searched to verify that the protocol, with the livelock error eliminated, is deadlock- or livelock-free. 3) The i-protocol is an asynchronous, low-level software system equipped with a number of optimizations aimed at minimizing control-message and retransmission overhead. It lacks the regular structure that is often present in hardware designs. In this sense, it provides any verification tool with a vigorous test of its analysis capabilities. 
Abstract-found: 1
Intro-found: 1
Reference: [AH96] <editor> R. Alur and T. A. Henzinger, editors. </editor> <booktitle> Computer Aided Verification (CAV '96), volume 1102 of Lecture Notes in Computer Science, </booktitle> <address> New Brunswick, New Jersey, July 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference: [CCA96] <author> A. T. Chamillard, L. A. Clarke, and G. S. Avrunin. </author> <title> Experimental design for comparing static concurrency analysis techniques. </title> <type> Technical Report 96-084, </type> <institution> Computer Science Department, University of Massachusetts at Amherst, </institution> <year> 1996. </year>
Reference: [CGP99] <author> E. M. Clarke, O. Grumberg, and D. Peled. </author> <title> Model Checking. </title> <publisher> MIT Press, </publisher> <year> 1999. </year> <note> To appear. </note>
Reference-contexts: 1 Introduction Model checking <ref> [CGP99] </ref> is a verification technique aimed at determining whether a system specification possesses a property expressed as a temporal logic formula. Model checking has enjoyed wide success in verifying, or finding design errors in real-life systems.
Reference: [CLSS96] <author> R. Cleaveland, P. M. Lewis, S. A. Smolka, and O. Sokolsky. </author> <title> The Con-currency Factory: A development environment for concurrent systems. </title> <booktitle> In Alur and Henzinger [AH96], </booktitle> <pages> pages 398-401. </pages>
Reference-contexts: In this paper, we report on our experience in using model checking|as provided by six widely used verification tools|to detect and correct a nontrivial livelock in a bidirectional sliding-window protocol. The tools in question are the Concurrency Factory <ref> [CLSS96] </ref>, COSPAN [HHK96], Mur' [Dil96], ? Research supported in part by NSF Grants CCR-9505562 and CCR-9705998, and AFOSR grants F49620-95-1-0508 and F49620-96-1-0087. ?? Currently at: Sun Microsystems, Mountain View, CA 94043, USA. ? ? ? Currently at: Department of Computer and Information Sciences, University of Penn sylvania, Philadelphia, PA 19104, USA. <p> usage, and memory usage (see Table 1). 3 2 The Verification Tools In this section, we describe the most salient features of the tools we used in our analysis of the i-protocol. 2.1 The Concurrency Factory In the context of our case study, the main features of the Concurrency Factory <ref> [CLSS96] </ref> are its textual specification language, VPL, and its local model checker for the modal mu-calculus [RS97]. VPL-supported data structures include integers of limited size and arrays and records composed of such integers. A system specification in VPL is a tree-like hierarchy of subsystems.
Reference: [CM88] <author> K. M. Chandy and J. Misra. </author> <title> Parallel Program Design | A Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: The Mur' compiler generates a special-purpose verifier from a Mur' description. The Mur' description language uses a set of iterated guarded commands, like Chandy and Misra's Unity language <ref> [CM88] </ref>. A Mur' description consists of constant and type declarations, variable declarations, procedure declarations, rule definitions, a description of the start state, and a collection of invariants. Each rule is a guarded command consisting of a condition and an action.
Reference: [CMCHG96] <author> E. M. Clarke, K. McMillan, S. Campos, and V. Hartonas-GarmHausen. </author> <title> Symbolic model checking. </title> <booktitle> In Alur and Henzinger [AH96], </booktitle> <pages> pages 419-422. </pages>
Reference-contexts: SMV <ref> [CMCHG96] </ref>, Spin [HP96], and XMC [RRR + 97], each of which supports some variety of model checking. The protocol that we investigate, the i-protocol, is part of the GNU UUCP package, available from the Free Software Foundation, and is used for file transfers over serial lines. <p> Liveness specifications are expressed using keywords ALWAYS, EVENTUALLY, and UNTIL, and are checked under the assumption that every rule is weak-fair (unless declared otherwise). We used this facility of Mur' to encode and check for livelock in the i-protocol. 2.4 SMV SMV <ref> [CMCHG96] </ref> is an automatic tool for model checking CTL formulas. CTL can also be used to specify simple fairness constraints. The transition relation of the system to be verified is represented implicitly by boolean formulas, and implemented by BDDs.
Reference: [Cor96] <author> J. C. Corbett. </author> <title> Evaluating deadlock detection methods for concurrent software. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(3) </volume> <pages> 161-180, </pages> <month> March </month> <year> 1996. </year>
Reference: [CW96] <author> E. M. Clarke and J. M. Wing. </author> <title> Formal methods: State of the art and future directions. </title> <journal> ACM Computing Surveys, </journal> <volume> 28(4es), </volume> <month> December </month> <year> 1996. </year>
Reference-contexts: Model checking has enjoyed wide success in verifying, or finding design errors in real-life systems. An interesting account of a number of these success stories can be found in <ref> [CW96] </ref>. In this paper, we report on our experience in using model checking|as provided by six widely used verification tools|to detect and correct a nontrivial livelock in a bidirectional sliding-window protocol.
Reference: [Dil96] <author> D. L. Dill. </author> <title> The Mur' verification system. </title> <booktitle> In Alur and Henzinger [AH96], </booktitle> <pages> pages 390-393. </pages>
Reference-contexts: In this paper, we report on our experience in using model checking|as provided by six widely used verification tools|to detect and correct a nontrivial livelock in a bidirectional sliding-window protocol. The tools in question are the Concurrency Factory [CLSS96], COSPAN [HHK96], Mur' <ref> [Dil96] </ref>, ? Research supported in part by NSF Grants CCR-9505562 and CCR-9705998, and AFOSR grants F49620-95-1-0508 and F49620-96-1-0087. ?? Currently at: Sun Microsystems, Mountain View, CA 94043, USA. ? ? ? Currently at: Department of Computer and Information Sciences, University of Penn sylvania, Philadelphia, PA 19104, USA.
Reference: [HHK96] <author> R. H. Hardin, Z. Har'El, and R. P. </author> <title> Kurshan. </title> <booktitle> COSPAN. In Alur and Henzinger [AH96], </booktitle> <pages> pages 423-427. </pages>
Reference-contexts: In this paper, we report on our experience in using model checking|as provided by six widely used verification tools|to detect and correct a nontrivial livelock in a bidirectional sliding-window protocol. The tools in question are the Concurrency Factory [CLSS96], COSPAN <ref> [HHK96] </ref>, Mur' [Dil96], ? Research supported in part by NSF Grants CCR-9505562 and CCR-9705998, and AFOSR grants F49620-95-1-0508 and F49620-96-1-0087. ?? Currently at: Sun Microsystems, Mountain View, CA 94043, USA. ? ? ? Currently at: Department of Computer and Information Sciences, University of Penn sylvania, Philadelphia, PA 19104, USA. <p> that the contents of the depth-first search stack be displayed whenever a certain "significant event" occurs (e.g. when the search first encounters a state at which a logical variable is determined to be either true or false) and to play interactive games for the full modal mu-calculus. 2.2 COSPAN COSPAN <ref> [HHK96] </ref> is a model checker for synchronous systems based on the theory of !-automata.
Reference: [HP96] <author> G. J. Holzmann and D. Peled. </author> <title> The state of SPIN. </title> <booktitle> In Alur and Henzinger [AH96], </booktitle> <pages> pages 385-389. 14 </pages>
Reference-contexts: SMV [CMCHG96], Spin <ref> [HP96] </ref>, and XMC [RRR + 97], each of which supports some variety of model checking. The protocol that we investigate, the i-protocol, is part of the GNU UUCP package, available from the Free Software Foundation, and is used for file transfers over serial lines. <p> Asynchronous systems, such as the i-protocol, are modeled by defining a set of parallel processes whose actions are interleaved arbitrarily in the execution of the program. As in Mur' liveness specifications, such as absence of livelock, are given in a form of temporal logic (CTL). 2.5 Spin Spin <ref> [HP96] </ref> is a model checker for asynchronous systems specified in the language Promela. Safety and liveness properties are formulated using LTL. Model checking is performed on-the-fly and with partial-order reduction, if specified by 5 the user.
Reference: [JGS93] <author> N. D. Jones, C. K. Gomard, and P. Sestoft. </author> <title> Partial Evaluation and Au--tomatic Program Generation. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: This construct allows the XL programmer to take advantage of XSB's substantial data-structuring facilities to describe sequential computation on values. Properties such as the possibility of livelock are expressed as modal mu-calculus formulas. The encoding of the semantics of the mu-calculus in XMC can be specialized <ref> [JGS93] </ref> with respect to a given formula.
Reference: [Mil89] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: In actuality, though, many of these configurations are observationally equivalent <ref> [Mil89] </ref> to one another, and by using a sequence space of 2W , this number can be reduced.
Reference: [ORR + 96] <author> S. Owre, S. Rajan, J. M. Rushby, N. Shankar, and M. Srivas. PVS: </author> <title> Combining specification, proof checking, and model checking. </title> <booktitle> In Alur and Henzinger [AH96], </booktitle> <pages> pages 411-414. </pages>
Reference-contexts: For completeness, other properties of the i-protocol should be checked besides the absence of livelock, such as deadlock-freedom and eventual message delivery. It would be particularly interesting to apply a tool with deductive reasoning capabilities, such as PVS <ref> [ORR + 96] </ref>, to the i-protocol, so that a parameterized version of the protocol (window size, buffer size, etc.) could be analyzed.
Reference: [RRR + 97] <author> Y. S. Ramakrishna, C. R. Ramakrishnan, I. V. Ramakrishnan, S. A. Smolka, T. W. Swift, and D. S. Warren. </author> <title> Efficient model checking using tabled resolution. </title> <booktitle> In Proceedings of the 9th International Conference on Computer-Aided Verification (CAV '97), volume 1254 of Lecture Notes in Computer Science, </booktitle> <pages> pages 143-154, </pages> <address> Haifa, Israel, July 1997. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: SMV [CMCHG96], Spin [HP96], and XMC <ref> [RRR + 97] </ref>, each of which supports some variety of model checking. The protocol that we investigate, the i-protocol, is part of the GNU UUCP package, available from the Free Software Foundation, and is used for file transfers over serial lines. <p> Promela includes support for data structures, interrupts, bracketing of code sections for atomic execution, the dynamic creation of concurrent processes, and a variety of synchronous and asynchronous message passing primitives. Message passing is via channels with arbitrary numbers of message parameters. 2.6 XMC XMC <ref> [RRR + 97] </ref> is a model checker for a value-passing process calculus and the modal mu-calculus. It is written in under 200 lines of XSB tabled Prolog code. XSB [XSB97] is a logic programming system developed at SUNY Stony Brook that extends Prolog-style SLD resolution with tabled resolution. <p> Mur' was also fast. XMC, however, was faster than Mur' for all cases in which the livelock error was present. This is because of the local, top-down nature of XMC's model-checking algorithm (Mur' is a global model checker). Prior experience <ref> [RRR + 97] </ref> indicates that the space requirements of XMC can be reduced through source-level transformations aimed at optimizing the representation of process terms. Finally, the number of states/transitions explored by XMC is appreciably lower in comparison with the other systems.
Reference: [RS97] <author> Y. S. Ramakrishna and S. A. Smolka. </author> <title> Partial-order reduction in the weak modal mu-calculus. </title> <editor> In A. Mazurkiewicz and J. Winkowski, editors, </editor> <booktitle> Proceedings of the Eighth International Conference on Concurrency Theory (CONCUR '97), volume 1243 of Lecture Notes in Computer Science, </booktitle> <pages> pages 5-24, </pages> <address> Warsaw, Poland, July 1997. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The VPL source of the i-protocol was then subjected to a series of model checking experiments using the Concurrency Factory's local model checker for the modal mu-calculus <ref> [RS97] </ref>. This led us to the root of the problem: a livelock that occurs when a particular series of message losses drives the protocol into a state where the communicating parties enter into a cycle of fruitless message exchanges without any packets being delivered to the upper layer entities. <p> describe the most salient features of the tools we used in our analysis of the i-protocol. 2.1 The Concurrency Factory In the context of our case study, the main features of the Concurrency Factory [CLSS96] are its textual specification language, VPL, and its local model checker for the modal mu-calculus <ref> [RS97] </ref>. VPL-supported data structures include integers of limited size and arrays and records composed of such integers. A system specification in VPL is a tree-like hierarchy of subsystems. A subsystem is either a network or a process.
Reference: [Wol86] <author> P. Wolper. </author> <title> Expressing interesting properties of programs in propositional temporal logic. </title> <booktitle> In Proc. 13th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 184-192, </pages> <address> St. Petersburgh, </address> <month> January </month> <year> 1986. </year>
Reference-contexts: The variable lack records the sequence number up to which an acknowledgment, either explicit (via an ack) or implicit (via a piggybacked acknowledgment in a data or nak packet), has been most recently sent to the 1 This is a data independence abstraction <ref> [Wol86] </ref>. 7 remote.
Reference: [XSB97] <editor> XSB. </editor> <booktitle> The XSB logic programming system v1.7, </booktitle> <year> 1997. </year> <note> Available by anonymous ftp from ftp.cs.sunysb.edu. 15 </note>
Reference-contexts: In the case of Mur' this is due to the low-level nature of its specification language (guarded commands) and the succinct manner in which system states are encoded. XMC's strong performance is a consequence of the efficiency of the underlying tabled logic programming system, XSB <ref> [XSB97] </ref>, and our use of partial evaluation to specialize the logical formula capturing livelock to the i-protocol's behavior. Our model-checking results are described more fully in Section 5 (see Table 1). <p> Message passing is via channels with arbitrary numbers of message parameters. 2.6 XMC XMC [RRR + 97] is a model checker for a value-passing process calculus and the modal mu-calculus. It is written in under 200 lines of XSB tabled Prolog code. XSB <ref> [XSB97] </ref> is a logic programming system developed at SUNY Stony Brook that extends Prolog-style SLD resolution with tabled resolution. The principal merits of this extension are that XSB terminates on programs having finite models, avoids redundant subcomputations, and computes the well-founded model of normal logic programs.
References-found: 18

