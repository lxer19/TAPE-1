URL: ftp://ftp.sics.se/pub/SICS-reports/Reports/SICS-R--93-06--SE.ps.Z
Refering-URL: http://www.sics.se/libindex.html
Root-URL: 
Title: Interaction Diagrams  
Author: Joachim Parrow 
Address: Box 1263, S-16428 Kista, Sweden  Stockholm, Sweden Uppsala University, Sweden  
Affiliation: Swedish Institute of Computer Science  Royal Institute of Technology,  
Abstract: Interaction diagrams are graphic representations of concurrent processes with evolving access capabilities; in particular they illustrate the points of access and relations between them. The basic step of computation is the migration of an access point between processes. This paper explains interaction diagrams through a sequence of examples. Diagrams can be regarded as graphic counterparts of terms in the -calculus and illuminate some interesting points on its construction.
Abstract-found: 1
Intro-found: 1
Reference: [Mil91] <author> R. Milner. </author> <title> The polyadic -calculus: a tutorial. </title> <institution> Research Report ECS-LFCS-91-80, Department of Computer Science, </institution> <address> University of Edinburgh 1991. </address> <booktitle> (To appear in the Proceedings of the International Summer School on Logic and Algebra of Specification, Marktoberdorf, </booktitle> <month> August </month> <year> 1991.) </year>
Reference-contexts: The Client-Server example with molecular interaction is written C = -l (al:lv 1 :lv 2 ) S = !a (x):x (y):x (z) The transmission of tuples of names as a primitive construct is studied at depth in the polyadic versions of the calculus <ref> [Mil91] </ref>.
Reference: [Mil92] <author> R. Milner. </author> <title> Functions as Processes. </title> <editor> J. </editor> <booktitle> of Mathem. Structures in Computer Science 2(2) </booktitle> <month> 119-141 </month> <year> (1992). </year>
Reference-contexts: NN given to the right above; obviously the diagrams are not isomorphic but they will behave "similarly", the only difference is the route into the replication box, which is one step shorter in NN. [The encoding of the -calculus into the -calculus was first studied in depth by Milner in <ref> [Mil92] </ref> and subsequently by Davide Sangiorgi in [San93], and the correctness criteria and proofs are nontrivial. In fact, as given here it correctly represents only the lazy reduction strategy of the -calculus, where a fi-reduction can only take place for the first -abstraction in a term.
Reference: [Mil93a] <author> R. Milner. </author> <title> Action structures for the -calculus. </title> <institution> Research Report ECS-LFCS-93-264, Department of Computer Science, University of Edinburgh 1993. </institution>
Reference-contexts: Also, aP is a kind of agent for which no transitions are defined so there are no subjunctive reductions. Current research, notably Robin Milner's "action structures" <ref> [Mil93a] </ref>, seems to indicate that these principles can be relaxed.] 4 Replication and Recursion The size of an interaction diagram (the number of nodes and arrows) is always reduced by a reduction. Consequently, only a finite number of reductions will ever be possible until it reaches an inert state.
Reference: [Mil93b] <author> R. Milner. </author> <title> Notes on actions I: -nets with boxes and replication. </title> <publisher> Edinburgh, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: Hopefully interaction diagrams can contribute in the same way. Milner's recent "-nets" <ref> [Mil93b] </ref>, although developed independently as a formal model of an action structure, share many characteristics of interaction diagrams, notably the idea that a reduction coalesces two nodes.
Reference: [MPW92] <author> R. Milner, J. Parrow and D. Walker. </author> <title> A Calculus of Mobile Processes, Part I and II. </title> <booktitle> Information and Computation 100 </booktitle> <month> 1-77 </month> <year> (1992). </year>
Reference-contexts: To stress this intent I use the term "diagram" rather than "graph". Among the related algebraic theories there are already several versions of the -calculus <ref> [MPW92] </ref>, and I hope that this paper also works partly as a tutorial, after which the reader can understand the formalistic presentations with more ease. These calculi focus interest on operators such as parallel composition, while interaction diagrams provide insight in the nature of the objects manipulated by the operators.
Reference: [Rei85] <author> W. Reisig. </author> <title> Petri Nets. </title> <journal> EATCS Monographs on Theoretical Computer Science, </journal> <volume> Vol. 4, </volume> <publisher> Springer Verlag 1983. </publisher>
Reference-contexts: In flow graphs the vertices are processes and the edges are communication links between them, but there is no representation of how a graph can evolve. Petri nets <ref> [Rei85] </ref> capture concurrent activities and their evolutions, but the linking structure remains while the processes evolve.
Reference: [San93] <author> D. Sangiorgi. </author> <title> Expressing Mobility in Process Algebras: First-Order and Higher-Order Paradigms. </title> <type> PhD thesis, </type> <institution> ECS-LFCS-93-266, Department of Computer Science, University of Edinburgh, </institution> <year> 1993. </year>
Reference-contexts: the diagrams are not isomorphic but they will behave "similarly", the only difference is the route into the replication box, which is one step shorter in NN. [The encoding of the -calculus into the -calculus was first studied in depth by Milner in [Mil92] and subsequently by Davide Sangiorgi in <ref> [San93] </ref>, and the correctness criteria and proofs are nontrivial. In fact, as given here it correctly represents only the lazy reduction strategy of the -calculus, where a fi-reduction can only take place for the first -abstraction in a term.
Reference: [Wal91] <author> D. Walker. </author> <title> -calculus semantics of object-oriented programming languages. </title> <booktitle> Proceedings of the Conference on Theoretical Aspects of Computer Software, </booktitle> <address> Tohuku University, Japan, </address> <month> September </month> <year> 1991. </year> <note> Springer Verlang LNCS 526 pp 532-547, </note> <year> 1991. </year>
Reference-contexts: But the basic principles are the same. A -calculus semantics of an object-oriented language is given by David Walker <ref> [Wal91] </ref>. It is interesting to see that we can achieve the same effect without explicit temporal sequencing.] 9 The -calculus As a final example we shall consider fi-reduction in the -calculus.
References-found: 8

