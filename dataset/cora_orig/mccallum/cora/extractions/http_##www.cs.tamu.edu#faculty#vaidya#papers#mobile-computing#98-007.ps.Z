URL: http://www.cs.tamu.edu/faculty/vaidya/papers/mobile-computing/98-007.ps.Z
Refering-URL: http://www.cs.tamu.edu/faculty/vaidya/mobile.html
Root-URL: http://www.cs.tamu.edu
Title: Performance of TCP Congestion Predictors as Loss Predictors  Web: http://www.cs.tamu.edu/faculty/vaidya/mobile.html  
Author: Saad Biaz Nitin H. Vaidya 
Keyword: Key Words: TCP Congestion Avoidance Corruption Losses Congestion Losses Con gestion Predictors Loss Predictors  
Address: College Station, TX 77843-3112, USA  
Affiliation: Department of Computer Science Texas A&M University  
Pubnum: Technical Report 98-007  
Email: E-mail: fsaadb,vaidyag@cs.tamu.edu  
Date: February 9, 1998  
Abstract: In the context of TCP, several researchers have proposed heuristics to detect or predict congestion in the network. In this paper, the term congestion predictors refers to such heuristics. Past proposals require TCP sender to reduce its window size when congestion is detected or predicted (otherwise, the heuristic may dictate that the sender window be held constant or increased). The proposed heuristics to detect/predict congestion typically use simple statistics on observed round-trip times and/or observed throughput. The primary objective of this paper is to investigate the ability of the congestion predictors to predict a packet loss. Our measurements indicate that the three congestion predictors studied in this paper are often poor in their ability to predict a packet loss due to congestion. To arrive at this conclusion we measure the frequency with which the predictors predict congestion, and how often they predict congestion just before a packet loss. A study of the variations in measured parameters, as a function of several network parameters (for instance, router queue size) yields several interesting observations as reported in the paper. Although the results presented here are not related to wireless communication, this research was motivated by a desire for an end-to-end mechanism for differentiating between packet losses due to congestion and packet losses due to wireless transmission errors. One technique we considered would use congestion predictors for this purpose. The results presented here suggest that simple congestion predictors will not be effective in differentiating between the two forms of losses. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bakre and B. Badrinath, "I-TCP: </author> <title> Indirect TCP for mobile hosts," </title> <booktitle> in Proc. 15th International Conf. on Distributed Computing Systems (ICDCS), </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: Motivation: In recent years, with the advent of mobile computing, there has been significant interest in using TCP over wireless links <ref> [12, 2, 6, 3, 2, 1, 7] </ref>. Previous work has shown that, unless the protocol is modified, TCP performs poorly on paths that include a wireless link subject to transmission errors. The reason for this is the implicit assumption in TCP that all packet losses are due to congestion. <p> Past proposals for improving performance of TCP over wireless require some cooperation from an intermediate node on the path from the sender to the receiver <ref> [1, 2, 3, 16] </ref>. Our interest is in mechanisms that impose minimal demands (if any) on any host other than the sender or the receiver.
Reference: [2] <author> H. Balakrishnan, V. Padmanabhan, S. Seshan, and R. Katz, </author> <title> "A comparision of mechanisms for improving TCP performance over wireless links," </title> <booktitle> in ACM SIGCOMM, </booktitle> <address> Stanford, CA, </address> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: Motivation: In recent years, with the advent of mobile computing, there has been significant interest in using TCP over wireless links <ref> [12, 2, 6, 3, 2, 1, 7] </ref>. Previous work has shown that, unless the protocol is modified, TCP performs poorly on paths that include a wireless link subject to transmission errors. The reason for this is the implicit assumption in TCP that all packet losses are due to congestion. <p> Past proposals for improving performance of TCP over wireless require some cooperation from an intermediate node on the path from the sender to the receiver <ref> [1, 2, 3, 16] </ref>. Our interest is in mechanisms that impose minimal demands (if any) on any host other than the sender or the receiver.
Reference: [3] <author> H. Balakrishnan, S. Seshan, and R. Katz, </author> <title> "Improving reliable transport and handoff performance in cellular wireless networks," </title> <journal> ACM Wireless Networks, </journal> <volume> vol. 1, </volume> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: Motivation: In recent years, with the advent of mobile computing, there has been significant interest in using TCP over wireless links <ref> [12, 2, 6, 3, 2, 1, 7] </ref>. Previous work has shown that, unless the protocol is modified, TCP performs poorly on paths that include a wireless link subject to transmission errors. The reason for this is the implicit assumption in TCP that all packet losses are due to congestion. <p> Past proposals for improving performance of TCP over wireless require some cooperation from an intermediate node on the path from the sender to the receiver <ref> [1, 2, 3, 16] </ref>. Our interest is in mechanisms that impose minimal demands (if any) on any host other than the sender or the receiver.
Reference: [4] <author> S. Biaz and N. Vaidya, </author> <title> "Using end-to-end statistics to distinguish congestion and corruption losses : A negative result," </title> <type> Tech. Rep. (draft version), </type> <institution> CS Dept., Texas A&M University, </institution> <month> Aug. </month> <year> 1997. </year>
Reference-contexts: Results for daedalus.crosslink.net can be found in <ref> [4] </ref>. Part (a) plots results for host1 and part (b) for host2. In each graph, six curves are drawn, one for frequency of congestion prediction F CP and another for accuracy AP for each predictor (N DG, N T G and V egas).
Reference: [5] <author> L. Brakmo and S. O'Malley, </author> <title> "TCP-vegas : New techniques for congestion detection and avoidance," </title> <booktitle> in ACM SIGCOMM'94, </booktitle> <address> London, U.K, </address> <pages> pp. 24-35, </pages> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: In the context of transmission control protocols, several researchers have proposed heuristics to detect or predict congestion in the network. In this paper, the term congestion predictors refers to such heuristics. The congestion predictors <ref> [11, 5, 15] </ref> indicate when a TCP sender should reduce its window size (if congestion is detected or predicted). The heuristics in [11, 5, 15] use simple statistics on observed round-trip times (RTT) and/or observed throughput of a TCP connection. <p> In this paper, the term congestion predictors refers to such heuristics. The congestion predictors <ref> [11, 5, 15] </ref> indicate when a TCP sender should reduce its window size (if congestion is detected or predicted). The heuristics in [11, 5, 15] use simple statistics on observed round-trip times (RTT) and/or observed throughput of a TCP connection. The primary objective of this paper is to investigate ability of the congestion predictors to predict a packet loss due to congestion. <p> As noted above, several congestion predictors have been previously proposed to predict/detect congestion using only simple statistics on round-trip times and/or observed throughput of a TCP connection <ref> [11, 5, 15] </ref>. <p> In our experiments and simulations, we use TCP-Reno. More specifically, for congestion avoidance and control, we use the slow start and congestion avoidance techniques proposed by Van Jacobson [9, 10]. 3 We do not use the three congestion predictors in <ref> [11, 15, 5] </ref> for congestion avoidance and control. Instead, we see how often these predictors predict congestion (i.e., suggest that sender's window size be reduced) when used in conjunction with slow start and congestion avoidance. <p> T G i and simplifying, we get N T G = W i W i1 W i RT T i1 If N T G &lt; 1=2, then the predictor suggests that the window size be decreased, else it suggests that the window size be increased. 2.5 Congestion Predictor Vegas TCP-Vegas <ref> [5] </ref> maintains a variable named BaseRT T , which is the minimum of all RT T s measured during the TCP connection. BaseRT T allows Vegas to compute the Expected Throughput. <p> Then difference D is calculated as, D = expected throughput actual throughput = W i BaseRT T W i RT T i : Reference <ref> [5] </ref> expresses this difference D in terms of extra packets in the network, by multiplying D by BaseRT T . <p> Otherwise, if ff &lt; V egas &lt; fi, then it suggests holding window size constant. In our experiments and simulations, values for ff and fi are, respectively, 2 and 4 as suggested in <ref> [5] </ref>. 3 Performance Metrics To characterize the ability to predict congestion losses, we measured two parameters for each congestion predictor. * Frequency of Congestion Prediction F CP : F CP is obtained by dividing the number of times the predictor said "decrease the congestion window" by the total number of times
Reference: [6] <author> R. Caceres and L. Iftode, </author> <title> "Improving the performance of reliable transport protocols in mobile computing environments," </title> <journal> IEEE journal on selected areas in communications Special issue on Mobile Computing Networks, </journal> <volume> vol. 13, </volume> <month> June </month> <year> 1995. </year>
Reference-contexts: Motivation: In recent years, with the advent of mobile computing, there has been significant interest in using TCP over wireless links <ref> [12, 2, 6, 3, 2, 1, 7] </ref>. Previous work has shown that, unless the protocol is modified, TCP performs poorly on paths that include a wireless link subject to transmission errors. The reason for this is the implicit assumption in TCP that all packet losses are due to congestion.
Reference: [7] <author> A. DeSimone, M. Chuah, and O. Yue, </author> <title> "Throughput performance of tranport-layer protocols over wireless lans," </title> <booktitle> in Proc. Globecom '93, </booktitle> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Motivation: In recent years, with the advent of mobile computing, there has been significant interest in using TCP over wireless links <ref> [12, 2, 6, 3, 2, 1, 7] </ref>. Previous work has shown that, unless the protocol is modified, TCP performs poorly on paths that include a wireless link subject to transmission errors. The reason for this is the implicit assumption in TCP that all packet losses are due to congestion.
Reference: [8] <author> K. Fall, S. Floyd, and T. Henderson, </author> <title> "Ns simulator tests for reno fulltcp," </title> <month> July </month> <year> 1997. </year> <note> URL ftp://ftp.ee.lbl.gov/papers/fulltcp.ps. </note>
Reference-contexts: The system model used for simulations is illustrated in Figure 2. This model is simple, yet serves our purpose. We have a TCP connection from a source CS to a sink CK. We use the F ullT cp <ref> [8] </ref> agent for this connection. This connection shares the link R 1 ! R 2 with a cross traffic issued from a random source RS to sink RK. All the links in Figure 2 are labeled with a (bandwidth, propagation delay) pair.
Reference: [9] <author> V. Jacobson, </author> <title> "Congestion avoidance and control," </title> <booktitle> in Proceedings of SIGCOMM 88, ACM, </booktitle> <pages> pp. 314-329, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: 1 Introduction TCP is a popular protocol for reliable data delivery in the Internet. TCP protocol is robust in that it can adapt to disparate network conditions <ref> [9] </ref>. TCP uses congestion control mechanisms to recover fl Research reported is supported in part by the Fulbright Program and the National Science Foundation. y This report has been submitted on February 9th 1998 to a conference. from congestion that may occur in the network. <p> The reason for this is the implicit assumption in TCP that all packet losses are due to congestion. Whenever a TCP sender detects a packet loss, it activates congestion control mechanisms <ref> [9] </ref> (these mechanisms reduce sender's window in response to the packet loss, reducing throughput temporarily). Taking congestion control actions may be appropriate when a packet loss is due to congestion, however, it can unnecessarily reduce throughput if packet losses happen to be due to wireless transmission errors. <p> This means that the congestion avoidance and control may be done using some other heuristic. In our experiments and simulations, we use TCP-Reno. More specifically, for congestion avoidance and control, we use the slow start and congestion avoidance techniques proposed by Van Jacobson <ref> [9, 10] </ref>. 3 We do not use the three congestion predictors in [11, 15, 5] for congestion avoidance and control. Instead, we see how often these predictors predict congestion (i.e., suggest that sender's window size be reduced) when used in conjunction with slow start and congestion avoidance.
Reference: [10] <author> V. Jacobson, </author> <title> "Modified TCP congestion avoidance algorithm," </title> <month> Apr. </month> <year> 1990. </year> <title> mailing list, </title> <publisher> end2end-interest. </publisher>
Reference-contexts: This means that the congestion avoidance and control may be done using some other heuristic. In our experiments and simulations, we use TCP-Reno. More specifically, for congestion avoidance and control, we use the slow start and congestion avoidance techniques proposed by Van Jacobson <ref> [9, 10] </ref>. 3 We do not use the three congestion predictors in [11, 15, 5] for congestion avoidance and control. Instead, we see how often these predictors predict congestion (i.e., suggest that sender's window size be reduced) when used in conjunction with slow start and congestion avoidance. <p> Instead, we see how often these predictors predict congestion (i.e., suggest that sender's window size be reduced) when used in conjunction with slow start and congestion avoidance. Thus, as in TCP-Reno <ref> [10] </ref>, TCP congestion window size is reduced only when a packet loss occurs. Rest of this section describes the three congestion predictors evaluated in this paper. <p> The receiver hosts are daedalus.crosslink.net (206.246.124.8) and all-purpose-gunk.near.net (199.94.220.184). Discard server at the receiver nodes was used as the TCP receiver. The discard servers on the receiver machines have a receive window limited to 32 Kbytes. Host1 runs TCP-Reno <ref> [10, 13] </ref> as implemented in Free BSD version 2.1.5. Host2 runs TCP-Reno with a small modification in the congestion avoidance algorithm.
Reference: [11] <author> R. Jain, </author> <title> "A delay-based approach for congestion avoidance in interconnected heterogeneous computer networks," </title> <journal> ACM Computer Review, </journal> <volume> vol. 19, </volume> <pages> pp. 56-71, </pages> <year> 1989. </year>
Reference-contexts: In the context of transmission control protocols, several researchers have proposed heuristics to detect or predict congestion in the network. In this paper, the term congestion predictors refers to such heuristics. The congestion predictors <ref> [11, 5, 15] </ref> indicate when a TCP sender should reduce its window size (if congestion is detected or predicted). The heuristics in [11, 5, 15] use simple statistics on observed round-trip times (RTT) and/or observed throughput of a TCP connection. <p> In this paper, the term congestion predictors refers to such heuristics. The congestion predictors <ref> [11, 5, 15] </ref> indicate when a TCP sender should reduce its window size (if congestion is detected or predicted). The heuristics in [11, 5, 15] use simple statistics on observed round-trip times (RTT) and/or observed throughput of a TCP connection. The primary objective of this paper is to investigate ability of the congestion predictors to predict a packet loss due to congestion. <p> As noted above, several congestion predictors have been previously proposed to predict/detect congestion using only simple statistics on round-trip times and/or observed throughput of a TCP connection <ref> [11, 5, 15] </ref>. <p> In our experiments and simulations, we use TCP-Reno. More specifically, for congestion avoidance and control, we use the slow start and congestion avoidance techniques proposed by Van Jacobson [9, 10]. 3 We do not use the three congestion predictors in <ref> [11, 15, 5] </ref> for congestion avoidance and control. Instead, we see how often these predictors predict congestion (i.e., suggest that sender's window size be reduced) when used in conjunction with slow start and congestion avoidance. <p> The predictors measure this response as a 4 function of round-trip times and/or throughput, and recommend reducing or increasing congestion window based on the observed response. 2.3 Congestion Predictor NDG Jain proposed a congestion predictor based on Normalized Delay Gradient (N DG) <ref> [11] </ref>. We will refer to this predictor as NDG.
Reference: [12] <author> J. Postel, </author> <title> "Transmission control protocol," </title> <month> Sept. </month> <year> 1988. </year> <note> RFC 793. </note>
Reference-contexts: Motivation: In recent years, with the advent of mobile computing, there has been significant interest in using TCP over wireless links <ref> [12, 2, 6, 3, 2, 1, 7] </ref>. Previous work has shown that, unless the protocol is modified, TCP performs poorly on paths that include a wireless link subject to transmission errors. The reason for this is the implicit assumption in TCP that all packet losses are due to congestion.
Reference: [13] <author> W. R. Stevens, </author> <title> TCP/IP Illustrated. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The receiver hosts are daedalus.crosslink.net (206.246.124.8) and all-purpose-gunk.near.net (199.94.220.184). Discard server at the receiver nodes was used as the TCP receiver. The discard servers on the receiver machines have a receive window limited to 32 Kbytes. Host1 runs TCP-Reno <ref> [10, 13] </ref> as implemented in Free BSD version 2.1.5. Host2 runs TCP-Reno with a small modification in the congestion avoidance algorithm. <p> In each set, different value of M is used on host2 (whereas host1 always uses M = 1). Each set of measurements consists of 25 connections from host1 and host2 to the same destination. 4.2 Methodology The sender nodes run Free BSD operating system. We modified tcp debug <ref> [13] </ref> to collect the data needed to evaluate F CP and AP . First, using the modified tcp debug, a trace for each connection was produced. Then, using a modified trpt [13], for each congestion predictor, we determined what the predictor would have recommended on receiving the acknowledgement for a monitored <p> We modified tcp debug <ref> [13] </ref> to collect the data needed to evaluate F CP and AP . First, using the modified tcp debug, a trace for each connection was produced. Then, using a modified trpt [13], for each congestion predictor, we determined what the predictor would have recommended on receiving the acknowledgement for a monitored packet 7 (the recommendation may be to reduce congestion window, or increase, or hold constant). This data was then used to calculate F CP and AP .
Reference: [14] <author> C. </author> <title> VINT Project, </title> <institution> University of Berkeley/LBNL, "ns : network simulator." </institution> <note> http://www-mash.cs.berkeley.edu/ns/. </note>
Reference-contexts: While our experiments (under specific network conditions) seem to support this conclusion, further measurements, with different network conditions, are needed to better understand behavior of the congestion predictors. 5 Simulations 5.1 Simulation Model and Methodology We use the network simulator ns-2 (version 2.1b1) <ref> [14] </ref> from Berkeley. The system model used for simulations is illustrated in Figure 2. This model is simple, yet serves our purpose. We have a TCP connection from a source CS to a sink CK. We use the F ullT cp [8] agent for this connection. <p> Then, with the values of ffi used in our simulations, T p varies in the range 10 ms to 300 ms. The traffic from the random source is produced by the agent T raf f ic=Expoo <ref> [14] </ref>: it is a constant-bit rate (CBR) source with idle time and busy time exponentially distributed with mean 0.5 s. UDP is the transport protocol used for the random source.
Reference: [15] <author> Z. Wang and J. Crowcroft, </author> <title> "A new congestion control scheme : Slow start and search (tri-s)," </title> <journal> ACM Computer Communication Review, </journal> <volume> vol. 21, </volume> <pages> pp. 32-43, </pages> <month> Jan. </month> <year> 1991. </year>
Reference-contexts: In the context of transmission control protocols, several researchers have proposed heuristics to detect or predict congestion in the network. In this paper, the term congestion predictors refers to such heuristics. The congestion predictors <ref> [11, 5, 15] </ref> indicate when a TCP sender should reduce its window size (if congestion is detected or predicted). The heuristics in [11, 5, 15] use simple statistics on observed round-trip times (RTT) and/or observed throughput of a TCP connection. <p> In this paper, the term congestion predictors refers to such heuristics. The congestion predictors <ref> [11, 5, 15] </ref> indicate when a TCP sender should reduce its window size (if congestion is detected or predicted). The heuristics in [11, 5, 15] use simple statistics on observed round-trip times (RTT) and/or observed throughput of a TCP connection. The primary objective of this paper is to investigate ability of the congestion predictors to predict a packet loss due to congestion. <p> As noted above, several congestion predictors have been previously proposed to predict/detect congestion using only simple statistics on round-trip times and/or observed throughput of a TCP connection <ref> [11, 5, 15] </ref>. <p> In our experiments and simulations, we use TCP-Reno. More specifically, for congestion avoidance and control, we use the slow start and congestion avoidance techniques proposed by Van Jacobson [9, 10]. 3 We do not use the three congestion predictors in <ref> [11, 15, 5] </ref> for congestion avoidance and control. Instead, we see how often these predictors predict congestion (i.e., suggest that sender's window size be reduced) when used in conjunction with slow start and congestion avoidance. <p> is received: N DG = (RT T i + RT T i1 ) (W i W i1 ) If N DG &gt; 0, this congestion predictor suggests that congestion window size should be decreased, otherwise it suggests that the window size be increased. 2.4 Congestion Predictor NTG Wang and Crowcroft <ref> [15] </ref> proposed a congestion predictor based on the Normalized Throughput Gradient (N T G). We will refer to this congestion predictor as NTG.
Reference: [16] <author> R. Yavatkar and N. Bhagwat, </author> <title> "Improving end-toend performance of TCP over mobile internet-works," </title> <booktitle> in Workshop on Mobile Computing Systems and Applications, </booktitle> <month> Dec. </month> <year> 1994. </year> <month> 20 </month>
Reference-contexts: Past proposals for improving performance of TCP over wireless require some cooperation from an intermediate node on the path from the sender to the receiver <ref> [1, 2, 3, 16] </ref>. Our interest is in mechanisms that impose minimal demands (if any) on any host other than the sender or the receiver.
References-found: 16

