URL: http://www-mice.cs.ucl.ac.uk/multimedia/publications/rat_usenix.ps
Refering-URL: http://www-mice.cs.ucl.ac.uk/multimedia/publications/
Root-URL: http://www.cs.ucl.ac.uk
Email: fI.Kouvelas, V.Hardmang@cs.ucl.ac.uk  
Title: Overcoming Workstation Scheduling Problems in a Real-Time Audio Tool  
Author: Isidor Kouvelas Vicky Hardman 
Address: College London  
Affiliation: Department of Computer Science University  
Abstract: The recent interest in multimedia conferencing is a result of the incorporation of cheap audio and video hardware in today's workstations, and also as a result of the development of a global infrastructure capable of supporting multimedia traffic the Mbone. Audio quality is impaired by packet loss and variable delay in the network, and by lack of support for real-time applications in today's general purpose workstations. A considerable amount of research effort has focused on solving the network side of the problem by providing packet loss robustness techniques, and network conscious adaptive applications. Effort to solve the operating system induced problems has concentrated on kernel modifications. This paper presents an architecture for a real-time audio media agent that copes with the problems presented by the UNIX operating system at the application level. The mechanism produces a continuous audio signal, despite the variable allocation of processing time a real-time application is given under UNIX. Continuity of audio is ensured during scheduling hiccups by using the buffering capabilities of workstation audio devices drivers. Our solution also tries to restrict the amount of audio stored in the device buffers to a minimum, to reduce the perceived end-to-end delay of the audio signal. A comparison between the method presented here (adaptive cushion algorithm), and that used by all other audio tools shows substantial reductions in both the average end-to-end delay, and the audio sample loss caused by the operating system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Stephen Casner and Stephen Deering. </author> <title> First IETF Internet audiocast. </title> <journal> ACM Computer Communication Review, </journal> <volume> 22(3) </volume> <pages> 92-97, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The ability of current wide area networks, such as the Mbone, to support multimedia conferencing has been recently demonstrated by a series of multicast events. One of the first such events was the Internet Engineering Task Force meeting on March 1992 <ref> [1] </ref>. The renewed interest in multimedia conferencing is a result of the provision of audio and video hardware in UNIX workstations and the development of multicast for the Mbone [2].
Reference: [2] <author> S. Deering. </author> <title> Host extensions for IP multicasting. Request for comments RFC 1112, </title> <institution> Internet Engineering Task Force, </institution> <month> August </month> <year> 1989. </year> <note> Obsoletes RFC 0988 1054. </note>
Reference-contexts: One of the first such events was the Internet Engineering Task Force meeting on March 1992 [1]. The renewed interest in multimedia conferencing is a result of the provision of audio and video hardware in UNIX workstations and the development of multicast for the Mbone <ref> [2] </ref>. Of the media used in multimedia conferences, audio is the most important [3], as speech is the natural mechanism of human communication, supplemented by video and shared text.
Reference: [3] <author> Vicky Hardman, Martina Angela Sasse, Mark Han-dley, and Anna Watson. </author> <title> Reliable audio for use over the Internet. </title> <booktitle> In International Networking Conference (INET), </booktitle> <year> 1995. </year>
Reference-contexts: The renewed interest in multimedia conferencing is a result of the provision of audio and video hardware in UNIX workstations and the development of multicast for the Mbone [2]. Of the media used in multimedia conferences, audio is the most important <ref> [3] </ref>, as speech is the natural mechanism of human communication, supplemented by video and shared text. Audio is also the only real-time service (video is normally slow-scan), which makes its provision at a reasonable quality of service (QoS) far more difficult. <p> Audio gaps indicate a pause in speech to the human brain causing confusion and reducing intelligibility. This problem has been studied by the authors in <ref> [3, 5] </ref>. The minimisation of sample loss is a primary design goal in audio applications. In real-time conferencing audio systems interactivity is known to be substantially reduced for round trip delays larger than 600ms. <p> If there isn't extra audio available to fill the gap, then it has to be artificially created. Techniques for artificially creating extra audio required during periods of sample loss have been extensively studied by the authors <ref> [3, 5] </ref>. 6 Discussion of results The adaptive cushion algorithm has been implemented and tested in RAT. It has produced a perceivable reduction in the end-to-end delay of the system. A simulator was built to evaluate the performance of the adaptive cushion algorithm.
Reference: [4] <author> Lixia Zhang, Stephen Deering, Deborah Estrin, Scott Shenker, and Daniel Zappala. RSVP: </author> <title> a new resource ReSerVation protocol. </title> <journal> IEEE Network, </journal> <volume> 7(5) </volume> <pages> 8-18, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: One approach to solving network problems has been to provide QoS guarantees through resource reservation <ref> [4] </ref>. Another approach has been to provide network conscious applications that adapt to the problems presented by the Mbone [5]. The latter mechanism has the advantage of being deployable without any network modifications.
Reference: [5] <author> V. Hardman, Kouvelas I., M.A. Sasse, and A. Wat-son. </author> <title> A packet loss Robust-Audio tool for use over the Mbone. </title> <note> Research Note RN/96/8, </note> <institution> Dept. of Computer Science, University College London, Eng-land, </institution> <year> 1996. </year>
Reference-contexts: One approach to solving network problems has been to provide QoS guarantees through resource reservation [4]. Another approach has been to provide network conscious applications that adapt to the problems presented by the Mbone <ref> [5] </ref>. The latter mechanism has the advantage of being deployable without any network modifications. Traditional time-sharing operating systems for general purpose workstations do not provide adequate support for real time applications [6]; they operate in an asynchronous fashion, and handle data in blocks [7]. <p> Initially began as part of the MICE project [11], and later as parts of projects ReLaTe [12] and MERCI (Multimedia European Research Conferencing Integration, European Union Telematics Applications Programme #1007), the proposed solution has been implemented and evaluated in our Robust-Audio Tool (RAT) <ref> [5] </ref>, which is now funded by an EPSRC project [13]. RAT provides real time audio connectivity between participants in multicast multimedia conferences over the Mbone. RAT is currently supported under SunOS, So-laris, IRIX, HP-UX, FreeBSD and Win32 and ports are under way for Linux PCs and Digital Unix platforms. <p> Packets are received from the network, processed, and samples played out to the audio device. For a description of the functions involved in processing the audio samples and for more information on the structure of our audio tool see <ref> [5] </ref>. Mbone audio tools use silence detection and suppression to stop the transmission of audio when a conference participant is not active. The current algorithms operate by measuring the average energy in sample blocks [17]. <p> Audio gaps indicate a pause in speech to the human brain causing confusion and reducing intelligibility. This problem has been studied by the authors in <ref> [3, 5] </ref>. The minimisation of sample loss is a primary design goal in audio applications. In real-time conferencing audio systems interactivity is known to be substantially reduced for round trip delays larger than 600ms. <p> If there isn't extra audio available to fill the gap, then it has to be artificially created. Techniques for artificially creating extra audio required during periods of sample loss have been extensively studied by the authors <ref> [3, 5] </ref>. 6 Discussion of results The adaptive cushion algorithm has been implemented and tested in RAT. It has produced a perceivable reduction in the end-to-end delay of the system. A simulator was built to evaluate the performance of the adaptive cushion algorithm.
Reference: [6] <author> Newton Faller. </author> <title> Measuring the latency time of real-time Unix-like operating systems. </title> <type> Technical Report TR-92-037, </type> <institution> International Computer Science Institute, Berkeley, California, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: Another approach has been to provide network conscious applications that adapt to the problems presented by the Mbone [5]. The latter mechanism has the advantage of being deployable without any network modifications. Traditional time-sharing operating systems for general purpose workstations do not provide adequate support for real time applications <ref> [6] </ref>; they operate in an asynchronous fashion, and handle data in blocks [7]. Real-time audio applications are 'soft', in that they have to keep a continuously draining audio device driver fed with blocks of audio samples, but there is no specified instant when audio must be transferred, just a dead-line.
Reference: [7] <author> Olof Hagsand and Peter Sjodin. </author> <title> Workstation support for real-time multimedia communication. </title> <booktitle> In Usenix Winter Technical Conference, </booktitle> <address> San Fran-cisco, California, </address> <month> January </month> <year> 1994. </year>
Reference-contexts: The latter mechanism has the advantage of being deployable without any network modifications. Traditional time-sharing operating systems for general purpose workstations do not provide adequate support for real time applications [6]; they operate in an asynchronous fashion, and handle data in blocks <ref> [7] </ref>. Real-time audio applications are 'soft', in that they have to keep a continuously draining audio device driver fed with blocks of audio samples, but there is no specified instant when audio must be transferred, just a dead-line. <p> Current real-time audio applications ignore the problem, which results in frequently disrupted audio, and increased end-to-end delay. A solution analogous to that of resource reservations to provide QoS guarantees is to modify the operating system scheduler to provide bounded dispatch latency for applications <ref> [7, 8, 9, 10] </ref>. Despite experimental proof that this approach can significantly improve the perceptual quality of multimedia applications, it has not been implemented in the majority of desktop workstation operating systems. <p> The UNIX scheduler decides when a process gets control of the CPU. Processes are serviced according to their priority, and there is no useful upper bound on the amount of time a process may be deprived execution <ref> [7, 8] </ref>. As a result of other processes being serviced, a relatively large amount of time may elapse in between two instances of the audio tool being scheduled.
Reference: [8] <author> Sandeep Khanna, Michael Sebree, and John Zol-nowsky. </author> <title> Realtime scheduling in sunos 5.0. </title> <booktitle> In Usenix Winter Technical Conference, </booktitle> <year> 1992. </year>
Reference-contexts: Current real-time audio applications ignore the problem, which results in frequently disrupted audio, and increased end-to-end delay. A solution analogous to that of resource reservations to provide QoS guarantees is to modify the operating system scheduler to provide bounded dispatch latency for applications <ref> [7, 8, 9, 10] </ref>. Despite experimental proof that this approach can significantly improve the perceptual quality of multimedia applications, it has not been implemented in the majority of desktop workstation operating systems. <p> The UNIX scheduler decides when a process gets control of the CPU. Processes are serviced according to their priority, and there is no useful upper bound on the amount of time a process may be deprived execution <ref> [7, 8] </ref>. As a result of other processes being serviced, a relatively large amount of time may elapse in between two instances of the audio tool being scheduled.
Reference: [9] <author> Sape J. Mullender, Ian M. Leslie, and Derek McAuley. </author> <title> Operating-system support for distributed multimedia. </title> <booktitle> In Usenix Summer Technical Conference, </booktitle> <address> Boston, Massachusetts, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Current real-time audio applications ignore the problem, which results in frequently disrupted audio, and increased end-to-end delay. A solution analogous to that of resource reservations to provide QoS guarantees is to modify the operating system scheduler to provide bounded dispatch latency for applications <ref> [7, 8, 9, 10] </ref>. Despite experimental proof that this approach can significantly improve the perceptual quality of multimedia applications, it has not been implemented in the majority of desktop workstation operating systems.
Reference: [10] <author> Tom Fisher. </author> <title> Real-time scheduling support in Ultrix-4.2 for multimedia communications. </title> <booktitle> In Third International Workshop on network and operating system support for digital audio and video, </booktitle> <pages> pages 282-288, </pages> <address> San Diego, California, </address> <month> November </month> <year> 1992. </year> <journal> IEEE Communications Society. </journal>
Reference-contexts: Current real-time audio applications ignore the problem, which results in frequently disrupted audio, and increased end-to-end delay. A solution analogous to that of resource reservations to provide QoS guarantees is to modify the operating system scheduler to provide bounded dispatch latency for applications <ref> [7, 8, 9, 10] </ref>. Despite experimental proof that this approach can significantly improve the perceptual quality of multimedia applications, it has not been implemented in the majority of desktop workstation operating systems.
Reference: [11] <author> M. Handley, P. Kirstein, and M. A. Sasse. </author> <title> Multimedia integrated conferencing for european researchers (MICE): piloting activities and the conference management and multiplexing centre. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 26(3) </volume> <pages> 275-290, </pages> <year> 1993. </year>
Reference-contexts: This work is part of ongoing research at UCL to develop a robust and flexible audio conferencing component for use on general purpose workstations over the Mbone. Initially began as part of the MICE project <ref> [11] </ref>, and later as parts of projects ReLaTe [12] and MERCI (Multimedia European Research Conferencing Integration, European Union Telematics Applications Programme #1007), the proposed solution has been implemented and evaluated in our Robust-Audio Tool (RAT) [5], which is now funded by an EPSRC project [13].
Reference: [12] <author> J. Buckett, I. Cambell, T. J. Watson, M. A. Sasse, V. J. Hardman, and A. Watson. ReLaTe: </author> <title> Remote language teaching over superJANET. </title> <booktitle> In UKERNA 95 Networkshop, </booktitle> <institution> University of Leicester, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: This work is part of ongoing research at UCL to develop a robust and flexible audio conferencing component for use on general purpose workstations over the Mbone. Initially began as part of the MICE project [11], and later as parts of projects ReLaTe <ref> [12] </ref> and MERCI (Multimedia European Research Conferencing Integration, European Union Telematics Applications Programme #1007), the proposed solution has been implemented and evaluated in our Robust-Audio Tool (RAT) [5], which is now funded by an EPSRC project [13].
Reference: [13] <author> A.S. Sasse and Vicky Hardman. </author> <title> Multi-way multi-cast speech for multimedia conferencing over heterogeneous shared packet networks (rat Robust-Audio tool). </title> <institution> EPSRC project #GR/K72780, </institution> <month> Febru-ary </month> <year> 1996. </year>
Reference-contexts: as part of the MICE project [11], and later as parts of projects ReLaTe [12] and MERCI (Multimedia European Research Conferencing Integration, European Union Telematics Applications Programme #1007), the proposed solution has been implemented and evaluated in our Robust-Audio Tool (RAT) [5], which is now funded by an EPSRC project <ref> [13] </ref>. RAT provides real time audio connectivity between participants in multicast multimedia conferences over the Mbone. RAT is currently supported under SunOS, So-laris, IRIX, HP-UX, FreeBSD and Win32 and ports are under way for Linux PCs and Digital Unix platforms. <p> This can be detected if there is a constant trend in cushion increase. In this case, the audio tool should reduce the amount of processing performed (load adaption). This work is planned as part of the EPSRC RAT project <ref> [13] </ref>. 5.3 Buffer adjustment Maintaining a given amount of audio in the device driver buffer can easily be accomplished. The output buffer is initialised with a given number of samples (cushion size).
Reference: [14] <author> Van Jacobson and Steve McCanne. </author> <title> The LBL audio tool vat. </title> <note> Manual page, Available from ftp://ftp.ee.lbl.gov/conferencing/vat/, </note> <month> July </month> <year> 1992. </year>
Reference-contexts: The minimum block size is enforced by the workstation's processing power; the larger the block size, the less frequently the application has to read and write audio blocks. tool. The operation is similar to that of other existing conferencing audio tools like VAT <ref> [14] </ref>, NeVoT [15] and IVS [16]. For the purposes of this paper the audio tool can be considered as a process that acts as an interface between the audio device and the network. <p> The extra buffered audio samples in the device driver prevent additional gaps, as there is now extra audio to play out while the audio tool process is not executing. Current Internet conferencing audio tools like VAT <ref> [14] </ref>, NeVoT [15] and IVS [16] rely on this effect. During a talkspurt, the first CPU starvation causes a gap in the audio. Successive starvations will only cause a gap if they are longer in duration than the longest starvation so far.
Reference: [15] <author> Henning Schulzrinne. </author> <title> Voice communication across the Internet: A network voice terminal. </title> <type> Technical Report TR 92-50, </type> <institution> Dept. of Computer Science, University of Massachusetts, Amherst, Massachusetts, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: The minimum block size is enforced by the workstation's processing power; the larger the block size, the less frequently the application has to read and write audio blocks. tool. The operation is similar to that of other existing conferencing audio tools like VAT [14], NeVoT <ref> [15] </ref> and IVS [16]. For the purposes of this paper the audio tool can be considered as a process that acts as an interface between the audio device and the network. <p> The extra buffered audio samples in the device driver prevent additional gaps, as there is now extra audio to play out while the audio tool process is not executing. Current Internet conferencing audio tools like VAT [14], NeVoT <ref> [15] </ref> and IVS [16] rely on this effect. During a talkspurt, the first CPU starvation causes a gap in the audio. Successive starvations will only cause a gap if they are longer in duration than the longest starvation so far.
Reference: [16] <author> T. Turletti. </author> <title> The inria videoconferencing system (ivs). </title> <journal> ConneXions The Interoperability Report, </journal> <volume> 8(10) </volume> <pages> 20-24, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: The minimum block size is enforced by the workstation's processing power; the larger the block size, the less frequently the application has to read and write audio blocks. tool. The operation is similar to that of other existing conferencing audio tools like VAT [14], NeVoT [15] and IVS <ref> [16] </ref>. For the purposes of this paper the audio tool can be considered as a process that acts as an interface between the audio device and the network. <p> The extra buffered audio samples in the device driver prevent additional gaps, as there is now extra audio to play out while the audio tool process is not executing. Current Internet conferencing audio tools like VAT [14], NeVoT [15] and IVS <ref> [16] </ref> rely on this effect. During a talkspurt, the first CPU starvation causes a gap in the audio. Successive starvations will only cause a gap if they are longer in duration than the longest starvation so far.
Reference: [17] <author> L. R. Rabiner and Schafer R. W. </author> <title> Digital Processing of Speech Signals. </title> <publisher> Prentice Hall, </publisher> <year> 1978. </year>
Reference-contexts: Mbone audio tools use silence detection and suppression to stop the transmission of audio when a conference participant is not active. The current algorithms operate by measuring the average energy in sample blocks <ref> [17] </ref>. A decision about speech/silence is made by comparing the average energy in a block against a threshold. Blocks that are judged to be above the threshold are labelled as 'speech', and transmitted. Blocks that are judged to be below the threshold are labelled as 'silence' and thrown away.
Reference: [18] <author> Paul T. Brady. </author> <title> Effects of transmission delay on conversational behavior on echo-free telephone circuits. </title> <journal> Bell System Technical Journal, </journal> <volume> 50 </volume> <pages> 115-134, </pages> <month> January </month> <year> 1971. </year>
Reference-contexts: In real-time conferencing audio systems interactivity is known to be substantially reduced for round trip delays larger than 600ms. Large round trip delays in conversational situations increase the frequency of confusions and amount of both double talking and mutual silence <ref> [18] </ref>.
Reference: [19] <author> Van Jacobson. </author> <title> Multimedia conferencing on the Internet, August 1994. </title> <booktitle> SIGCOMM '94 Tutorial. </booktitle>
Reference-contexts: Conferencing applications usually aim to transmit telephone quality speech, and consequently would like to use a sampling frequency of 8KHz. However, audio sampling frequency crystals usually do not have a nominal frequency of exactly 8kHz, and can vary considerably from one workstation to the next <ref> [19] </ref>. Timing events using the workstation clock without compensating for the drift in the audio crystal will lead to one conference participant's audio buffers becoming full, while a remote workstation's buffers may run dry. To simplify operations the sampling clock of the audio device is used instead.
Reference: [20] <author> John G. Gruber and Leo Strawczynski. </author> <title> Subjective effects of variable delay and speech clipping in dynamically managed voice systems. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 33(8) </volume> <pages> 801-808, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: The cushion size reflects the current state of the workstation, which may change in response to other processing on the workstation. Changing the cushion size during silence periods has minimal effect on the perception of audio <ref> [20] </ref>. It is thus preferable to make any adjustments necessary during such periods. However, it is possible to alter the cushion size during a talkspurt. A decrease in size will result in a reduction of the end-to-end delay that will be perceived at the end of the talkspurt. <p> The simplest solution is to discard them. If the change in cushion size is small enough, as is usually the case, then the missing samples will not be noticed <ref> [20] </ref>. Increasing the cushion size is not as easy as decreasing it, since extra samples are needed. However, there may be extra audio available if the decision to increase the cushion follows a scheduling anomaly (see section 5.3).
Reference: [21] <author> Paul T. Brady. </author> <title> A statistical analysis of on-off patterns in 16 conversations. </title> <journal> Bell System Technical Journal, </journal> <volume> 47 </volume> <pages> 73-91, </pages> <month> January </month> <year> 1968. </year>
Reference-contexts: The simulator inputs load measurements and talkspurt information, and uses these to calculate the resulting delay and audio gaps for different adaptation strategies. In our experiments, we used real load measurements collected from RAT, and modelled talkspurt and pause durations after statistical data given in <ref> [21] </ref>. The data presented below uses load information collected on a medium loaded Sun Sparc 10 workstation running Solaris 2.4 over a period of 20 minutes. Results were collected during a multicast multimedia conference, while transmitting and receiving audio with RAT and moving video with vic [22].
Reference: [22] <author> Steve McCanne and Van Jacobson. </author> <title> vic: A flexible framework for packet video. </title> <booktitle> In Proc. of ACM Multimedia '95, </booktitle> <month> November </month> <year> 1995. </year>
Reference-contexts: The data presented below uses load information collected on a medium loaded Sun Sparc 10 workstation running Solaris 2.4 over a period of 20 minutes. Results were collected during a multicast multimedia conference, while transmitting and receiving audio with RAT and moving video with vic <ref> [22] </ref>. Adaptation Read % Avg del Del oe Max del No cushion 43 36 240 195/200 97.5 31 4 70 1800/2000 90 30 0 30 Table 1: Audio delay results (in ms) Table 1 shows resulting end of talkspurt delay values for different adaptation conditions.
References-found: 22

