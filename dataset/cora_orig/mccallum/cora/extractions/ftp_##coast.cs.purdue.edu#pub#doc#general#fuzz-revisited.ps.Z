URL: ftp://coast.cs.purdue.edu/pub/doc/general/fuzz-revisited.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ19.html
Root-URL: http://www.cs.purdue.edu
Email: bart@cs.wisc.edu  dkoski@cs.wisc.edu cjin@cs.wisc.edu vivek@cs.wisc.edu  ravim@cs.wisc.edu ajitk@cs.wisc.edu steidl@cae.wisc.edu  
Title: Fuzz Revisited: A Re-examination of the Reliability of UNIX Utilities and Services  
Author: Barton P. Miller David Koski Cjin Pheow Lee Vivekananda Maganty Ravi Murthy Ajitkumar Natarajan Jeff Steidl 
Keyword: Content Indicators: D.2.5 (Testing and Debugging), D.4.9 (Programs and Utilities), General terms: random testing, reliability, UNIX.  
Address: 1210 W. Dayton Street Madison, WI 53706-1685  
Affiliation: Computer Sciences Department University of Wisconsin  
Note: Page 1 PRELIMINARY August 11, 1995 PRELIMINARY  This work is supported in part by Wright Laboratory Avionics Directorate, Air Force Material Command, USAF, under grant F33615-94-1-1525 (ARPA order no. B550), NSF Grants CCR-9100968 and CDA-9024618, Department of Energy Grant DE-FG02-93ER25176, and Office of Naval Research Grant N00014-89-J-1222. The U.S. Government is authorized to reproduce and distribute reprints for Governmental purposes notwithstanding any copyright notation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of the Wright Laboratory Avionics Directorate or the U.S. Government.  
Abstract: We have tested the reliability of a large collection of basic UNIX utility programs, X-Window applications and servers, and network services. We used a simple testing method of subjecting these programs to a random input stream. Our testing methods and tools are largely automatic and simple to use. We tested programs on nine versions of the UNIX operating system, including seven commercial systems and the freely-available GNU utilities and Linux. We report which programs failed on which systems, and identify and categorize the causes of these failures. The result of our testing is that we can crash (with core dump) or hang (infinite loop) over 40% (in the worst case) of the basic programs and over 25% of the X-Window applications. We were not able to crash any of the network services that we tested nor any of X-Window servers. This study parallels our 1990 study (that tested only the basic UNIX utilities); all systems that we compared between 1990 and 1995 noticeably improved in reliability, but still had significant rates of failure. The reliability of the basic utilities from GNU and Linux were noticeably better than those of the commercial systems. We also tested how utility programs checked their return codes from the memory allocation library routines by simulating the unavailability of virtual memory. We could crash almost half of the programs that we tested in this way. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Cargille, J., and Miller, </author> <title> B.P., Binary Wrapping: A Technique for Instrumenting Object Code. </title> <journal> SIGPLAN Notices 27, </journal> <month> 6 (June </month> <year> 1992), </year> <pages> 17-18. </pages>
Reference-contexts: We extracted the object files for the malloc () family of functions from the standard C library and used a binary rewriting utility to rename the symbols <ref> [1] </ref>. By creating an object file with the original library call names (called libjig) and linking against the new library, we were able to intercept calls to malloc () (see Figure 2).
Reference: [2] <author> Miller, B.P., Fredrikson, L., and So, B., </author> <title> An Empirical Study of the Reliability of UNIX Utilities. </title> <journal> Communications of the ACM 33, </journal> <month> 12 (December </month> <year> 1990), </year> <pages> 32-44. </pages> <note> Also appears in German translation as Fatale Fehlertractigkeit: </note> <author> Eine Eimpirische Studie zur Zuverlassigkeit von UNIX-Utilties, </author> <month> iX (March </month> <year> 1991). </year>
Reference-contexts: 1 INTRODUCTION In 1990, we published the results of a study of the reliability of standard UNIX utility programs <ref> [2] </ref>. This study showed that by using simple (almost simplistic) random testing techniques, we could crash or hang 25-33% of these utility programs. Five years later, we have repeated and significantly extended this study using the same basic techniques: subjecting programs to random input streams. <p> Three of these commercial systems (SunOS, HP-UX, and AIX) were also tested in the 1990 study. Results from this earlier Page 5 PRELIMINARY August 11, 1995 PRELIMINARY study <ref> [2] </ref> are included for comparison. Two of the systems tested are free software distributions. The GNU tools come from the Free Software Foundation and are written by a variety of authors world-wide.
Reference: [3] <author> Rochlis, J.A., and Eichin, M.W., </author> <title> With Microscope and Tweezers: The Worm from MITs Perspective. </title> <journal> Communications of the ACM 32, </journal> <month> 6 (June </month> <year> 1989), </year> <pages> 689-698. </pages>
Reference: [4] <author> Spafford, </author> <title> E.H., The Internet Worm: Crisis and Aftermath. </title> <journal> Communications of the ACM 32, </journal> <month> 6 (June </month> <year> 1989), </year> <pages> 678-687. </pages>
Reference: [5] <author> X Consortium, </author> <title> X Protocol Reference Manual. </title> <publisher> OReilly and Associates, Inc., </publisher> <year> 1992. </year>
Reference-contexts: Garbled Messages: xwinjig randomly inserts, deletes, or modifies parts of the message stream between the application and server. 3. Random Events: xwinjig keeps track of message boundaries defined by the X Protocol Refer ence Manual <ref> [5] </ref>. xwinjig randomly inserts events 2 that are of the proper size and have valid 1. Xwinjig actually has two implementations (called xjig and winjig) whose combined features are call xwin jig.
References-found: 5

