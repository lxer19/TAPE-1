URL: http://www.cs.purdue.edu/research/PaCS/ps/gpss_wsc96.ps
Refering-URL: http://www.cs.purdue.edu/research/PaCS/parasol.html
Root-URL: http://www.cs.purdue.edu
Title: A PARALLEL GPSS BASED ON THE PARASOL SIMULATION SYSTEM  
Author: Felipe Knop Edward Mascarenhas Vernon Rego 
Address: West Lafayette, IN 47907-1398, U.S.A.  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: Much of the research in parallel discrete-event simulation (PDES) has resulted in new experimental simulation languages or toolkits. Meanwhile, the simulation community continues to use existing (serial) commercial tools which are reportedly more powerful and flexible from a modeler's point of view. A possible way to increase the impact of PDES in the simulation community is to make existing simulation packages execute in parallel. Towards this end, we present a parallelization of the GPSS simulation language. We implement parallel GPSS as a GPSS-to-C++ translator and execute the transformed code with the help of the ParaSol parallel simulation system. The mapping from GPSS to ParaSol is simple because, unlike other parallel simulation systems, ParaSol is transaction oriented. On the other hand, because GPSS was not designed with parallelism in mind, there are GPSS constructs that can behave poorly in a parallel environment. We present details on the mapping, some of the challenges we faced in this task, and key solutions that we adopted to enhance parallelism. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bagrodia, R.L. </author> <year> 1991. </year> <title> Iterative design of efficient simulations using Maisie. </title> <booktitle> In Proceedings of the 1991 Winter Simulation Conference, </booktitle> <pages> pages 243-247. </pages>
Reference: <author> Bobillier, P., B. Kahan, and A. Probst. </author> <year> 1976. </year> <title> Simulation with GPSS and GPSS V. </title> <publisher> Prentice Hall. BoyanTech, Inc. </publisher> <address> 1995. McLean, VA 22102. </address> <note> CPSim 1.0 User's Guide and Reference Manual. </note>
Reference-contexts: Meanwhile, the simulation community continues to use existing (serial) commercial tools, which are reportedly more powerful and flexible from the modeler's point of view. In this paper we describe a project to parallelize the GPSS simulation language <ref> (Bobillier et al. 1976) </ref>. GPSS was chosen because of its widespread use and potentially large base of existing simulation programs. Since GPSS was not developed with parallel execution in mind, it offers a good test of the suitability of current PDES work for the parallelization of sequential simulation languages. <p> The existence of the CEC may severely impact performance, since it assumes that all transactions it holds will have to be rescanned every time some significant event, such as the release of a facility, occurs. While the rescan in a sequential setting is already recognized as inefficient <ref> (Bobillier et al. 1976) </ref>, doing it in a distributed environment would certainly lead to bottlenecks: if the same scheme is adopted in a distributed implementation, the significant events would have to be reported to all processes, resulting in unacceptable communication cost.
Reference: <author> Fujimoto, R.M. </author> <year> 1990. </year> <title> Parallel discrete event simulation. </title> <journal> Communications of the ACM, </journal> <volume> 33(10) </volume> <pages> 30-53. </pages>
Reference-contexts: Then, if the destination LP is in the future of the arriving thread, in terms of virtual time, a rollback procedure is immediately initiated. The mechanism used for reclaiming the space-time memory is similar to that used in fossil collection: values saved before GVT <ref> (Global Virtual Time, Fujimoto 1990) </ref> may be discarded since they are no longer needed. Notice, however, that all manipulation of the space-time memory is done at the domain level, independently of the kernel.
Reference: <author> Fujimoto, R.M. </author> <year> 1993. </year> <title> Parallel discrete event simulation: </title> <journal> Will the field survive? ORSA Journal of Computing, </journal> <volume> 5(3) </volume> <pages> 213-230. </pages>
Reference-contexts: 1 INTRODUCTION It has been said that research in parallel discrete-event simulation (PDES) has not made an impact on the simulation community <ref> (Fujimoto 1993) </ref>. A possible reason for this is that extant PDES systems typically sacrifice model implementation effort for the promise of speedup. Application programmers are forced to use explicit message exchange constructs, lookahead information, and even state-saving/restoration procedures.
Reference: <author> Gomes, F., S. Franks, B. Unger, Z. Xiao, J. Cleary, and A. Covington. </author> <year> 1995. </year> <title> SimKit: A high performance logical process simulation class in C++. </title> <booktitle> In Proceedings of the 1995 Winter Simulation Conference, </booktitle> <pages> pages 706-713. </pages>
Reference: <author> Mascarenhas, E., F. Knop, and V. Rego. </author> <year> 1995. </year> <title> ParaSol: a multithreaded system for parallel simulation based on mobile threads. </title> <booktitle> In Proceedings of the 1995 Winter Simulation Conference, </booktitle> <pages> pages 690-697. </pages>
Reference-contexts: Since GPSS was not developed with parallel execution in mind, it offers a good test of the suitability of current PDES work for the parallelization of sequential simulation languages. This work is based on the ParaSol project, aimed at developing a parallel simulation system based on mobile threads <ref> (Mascarenhas et al. 1995) </ref>. ParaSol's main design goals are ease of use to minimize user-visible complexities of parallel simulation and flexibility to maximize the system's use across different application domains. We implement parallel GPSS as a GPSS-to-C++ translator and execute the transformed program using ParaSol.
Reference: <author> Mascarenhas, E. and V. Rego. </author> <year> 1996. </year> <title> Ariadne: architecture of a portable threads system supporting thread migration. </title> <journal> Software Practice and Experience, </journal> <volume> 26(3) </volume> <pages> 327-356. </pages>
Reference-contexts: The kernel provides basic services, and the domain libraries support higher level services geared towards specific application domains. The kernel insulates the upper layers from most parallel simulation details, including transaction management, migration, communication, rollback, etc. The kernel is supported from below by the Ariadne threads system <ref> (Mascarenhas and Rego 1996) </ref> and a suitable communications subsystem, e.g., PVM (Sunderam 1990). Support for migratable threads is provided by the Ariadne system. The kernel programming interface is represented by public methods of class PSol, the main simulation class in ParaSol's C++ interface.
Reference: <author> Nicol, D. and P. Heidelberger. </author> <year> 1994. </year> <title> On extending parallelism to serial simulators. </title> <type> Technical Report ICASE Report No. 94-95, </type> <institution> Institute for Computer Applications in Science and Engineering - NASA Langley Research Center. </institution> <month> December. </month>
Reference: <author> Schwetman, H.D. </author> <year> 1986. </year> <title> CSIM: A C-based, process-oriented simulation language. </title> <booktitle> In Proceedings of the 1986 Winter Simulation Conference, </booktitle> <pages> pages 387-396. </pages>
Reference-contexts: This constrains parallel models in that they are forced to run under a conservative synchronization mechanism. The computation and dissemination of lookahead information sometimes beneficial in conservative mechanisms is encapsulated in the extensions. The proposed approach is applied to produce a library which extends the CSIM simulation system <ref> (Schwetman 1986) </ref>. To enable extensions, without requiring significant changes, a tool will generally require features that may not be present in other simulation tools. 3 ParaSol OVERVIEW ParaSol is a parallel simulation system based on the (active-transaction) process-interaction paradigm.
Reference: <author> Sunderam, </author> <title> V.S. 1990. PVM: a framework for parallel distributed computing. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 2(4). </volume>
Reference-contexts: The kernel insulates the upper layers from most parallel simulation details, including transaction management, migration, communication, rollback, etc. The kernel is supported from below by the Ariadne threads system (Mascarenhas and Rego 1996) and a suitable communications subsystem, e.g., PVM <ref> (Sunderam 1990) </ref>. Support for migratable threads is provided by the Ariadne system. The kernel programming interface is represented by public methods of class PSol, the main simulation class in ParaSol's C++ interface.

References-found: 10

