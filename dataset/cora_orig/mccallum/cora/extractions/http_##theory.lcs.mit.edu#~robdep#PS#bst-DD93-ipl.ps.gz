URL: http://theory.lcs.mit.edu/~robdep/PS/bst-DD93-ipl.ps.gz
Refering-URL: http://theory.lcs.mit.edu/~robdep/papers.html
Root-URL: 
Title: On Optimal Binary Search Trees  
Author: Roberto De Prisco Alfredo De Santis 
Keyword: Key words: algorithms, analysis of algorithms, average search time, binary search trees, data structures.  
Address: New York, N.Y. 10027  84081 Baronissi (SA) Italia  
Affiliation: Department of Computer Science Columbia University  Dip. di Informatica ed Applicazioni Universita di Salerno  
Abstract: We present a new linear time heuristic for constructing binary search trees. The analysis of the algorithm, by establishing an upper bound on the cost of the produced binary search trees, permits to derive a limitation on the cost of optimal binary search trees. The obtained upper bound improve on previous results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Ahlswede and I. Wegener, </author> <title> Search problems, </title> <publisher> (J.Wiley & Sons, </publisher> <year> 1987). </year>
Reference: [2] <author> M. Aigner, </author> <title> Combinatorial search, </title> <publisher> (J.Wiley & Sons, </publisher> <year> 1988). </year>
Reference: [3] <author> P.J. Bayer, </author> <title> Improved bounds on the cost of optimal and balanced binary search trees, M.Sc. </title> <type> Thesis, </type> <institution> Mass.Inst.of Tech., </institution> <address> Cambridge, MA, </address> <year> 1975. </year>
Reference: [4] <author> E.N. Gilbert and E.F. Moore, </author> <title> Variable-length binary encodings, </title> <journal> Bell System Tech J. </journal> <volume> 38 (1959), </volume> <pages> pp. 933|968. </pages>
Reference: [5] <author> T.C. Hu and A.C. Hucker, </author> <title> Optimum computer search trees and variable-length alphabetical codes, </title> <journal> SIAM J.Applied Math. </journal> <volume> 21, </volume> <year> (1971), </year> <pages> pp. 514-532. </pages>
Reference-contexts: Mehlhorn [7] proposed a linear time algorithm for constructing binary search trees whose cost is not greater than C opt H + 1 + k=0 For the special class of alphabetical binary trees, i.e. P n k=1 q k = 0, Hu and Tucker <ref> [5] </ref> proposed an algorithm that in O (n log n) constructs optimal binary search trees.
Reference: [6] <author> D.E. Knuth, </author> <booktitle> The art of computer programming, </booktitle> <volume> Vol. </volume> <publisher> 3 (Addison-Wesley, </publisher> <year> 1973). </year>
Reference-contexts: The cost of an optimal binary search tree is denoted by C opt . An optimal binary search tree can be constructed in time fi (n 2 ), using a dynamic programming algorithm <ref> [6] </ref>. When optimality is not critical, we can use more efficient algorithms that produce nearly optimal binary search trees.
Reference: [7] <author> K. Mehlhorn, </author> <title> Nearly optimal binary search trees, </title> <journal> Acta Informatica 5, </journal> <year> (1975), </year> <pages> pp. 287-295. </pages>
Reference-contexts: An optimal binary search tree can be constructed in time fi (n 2 ), using a dynamic programming algorithm [6]. When optimality is not critical, we can use more efficient algorithms that produce nearly optimal binary search trees. Mehlhorn <ref> [7] </ref> proposed a linear time algorithm for constructing binary search trees whose cost is not greater than C opt H + 1 + k=0 For the special class of alphabetical binary trees, i.e.
Reference: [8] <author> K. Mehlhorn, </author> <title> A best possible bound for the weighted path length of binary search trees, </title> <journal> SIAM J.Comput. </journal> <volume> 2, </volume> <year> (1977), </year> <pages> pp. 235-239. </pages>
Reference: [9] <author> R. Yeung, </author> <title> Alphabetic codes revisited, </title> <journal> IEEE Trans. Inf. Theory, </journal> <month> 37 (May </month> <year> 1991), </year> <pages> pp. 564-572. 8 </pages>
Reference-contexts: P n k=1 q k = 0, Hu and Tucker [5] proposed an algorithm that in O (n log n) constructs optimal binary search trees. In a recent paper <ref> [9] </ref> Yeung proved that the cost of an optimal alphabetical binary tree is upper bounded by C opt &lt; H + 2 p 0 p n : (2) Actually, Yeung proposed a linear time algorithm to construct an alphabetical binary tree whose cost is H +2f (p 0 )f (p n <p> Construct an alphabetic tree T ff for S using the linear time algorithm proposed by Yeung 2 (see <ref> [9] </ref>). Assign the labels p 0 ; q 1 ; p 1 ; : : : ; q n ; p n to external nodes of T ff in lexicographic order and the label to all internal nodes of T ff . The tree so obtained is the starting tree. <p> Phase 1 can be executed in time O (n). Indeed, Yeung's algorithm <ref> [9] </ref> to construct T ff is linear time and the labeling of T ff to obtain the starting tree can be performed with an inorder visit of T ff . We now show how to implement Phase 2 in linear time. <p> Note that we can obtain a sharper bound using the bound C S H + 2 f (p 0 ) f (p n ), where f (x) = x (2 log x d log xe) instead of (2) (see <ref> [9] </ref> for a proof of the bound on C S ).
References-found: 9

