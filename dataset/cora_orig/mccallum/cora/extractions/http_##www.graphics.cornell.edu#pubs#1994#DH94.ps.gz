URL: http://www.graphics.cornell.edu/pubs/1994/DH94.ps.gz
Refering-URL: http://www.graphics.cornell.edu/pubs/1994/DH94.html
Root-URL: 
Title: Nonpolygonal Isosurface Rendering for Large Volume Datasets  
Author: James W. Durkin John F. Hughes 
Address: Ithaca, NY 14853 Providence, RI 02912  
Affiliation: Program of Computer Graphics Computer Science Department Cornell University Brown University  
Abstract: Surface-based rendering techniques, particularly those that extract a polygonal approximation of an isosurface, are widely used in volume visualization. As dataset size increases though, the computational demands of these methods can overwhelm typically available computing resources. Recent work on accelerating such techniques has focused on preprocessing the volume data or postprocess-ing the extracted polygonization. Our new algorithm concentrates instead on streamlining the surface extraction process itself so as to accelerate the rendering of large volumes. The technique shortens the conventional isosurface visualization pipeline by eliminating the intermediate poly-gonization. We compute the contribution of the isosurface within a volume cell to the resulting image directly from a simplified numerical description of the cell/surface intersection. Our approach also reduces the work in the remaining stages of the visualization process. By quantizing the volume data, we exploit precomputed and cached data at key processing steps to improve rendering efficiency. The resulting implementation provides comparatively fast renderings with reasonable image quality. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. E. Cline, W. E. Lorensen, S. Ludke, C. R. Crawford, and B. C. Teeter. </author> <title> Two algorithms for the three-dimensional reconstruction of tomograms. </title> <journal> Medical Physics, </journal> <volume> 15(3) </volume> <pages> 320-327, </pages> <month> May/June </month> <year> 1988. </year>
Reference-contexts: Their technique differs from Marching Cubes in that it uses an approximate value at the center of a cell face to select among alternate polygon configurations. An alternative to isosurface polygonization is the point-based Dividing Cubes algorithm <ref> [1] </ref>. It subdivides volume cells into sub-cells with lattice spacing equal to the image grid spacing. Data values for sub-cell vertices are interpolated from the divided cell's vertex voxels. Sub-cells intersecting the surface are identified as those having values both above and below the isosurface value. <p> Suppose the vertices of the unit cube are labeled by binary numbers so that, for example, vertex 6 has coordinates [x; y; z] = <ref> [1; 1; 0] </ref> (as 6 10 = 110 2 ). Table entry [v 0 ; v 1 ; : : :] corresponds to a cube whose vertex 0 has value v 0 , vertex 1 has value v 1 , and so on.
Reference: [2] <author> David Laur and Pat Hanrahan. </author> <title> Hierarchical splatting: A progressive refinement algorithm for volume rendering. </title> <booktitle> Computer Graphics (SIGGRAPH '91 Conference Proceedings), </booktitle> <volume> 25(4) </volume> <pages> 285-288, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: We chose to focus on reducing the work at cells containing isosurface, knowing that spatial acceleration techniques could be integrated later. Based on existing work using such approaches (e.g., Wilhelms and Van Gelder [11], Laur and Hanrahan <ref> [2] </ref>) and our own observations on the small percentage of cells that intersect a typical isosurface, we expect a substantial speed up from using such a technique, quite likely a factor of ten or more. 7 Future work After integrating a spatial acceleration mechanism, next on our list of future work
Reference: [3] <author> Marc Levoy. </author> <title> A taxonomy of volume visualization algorithms. Introduction to Volume Visualization - SIGGRAPH '91 Course Notes, </title> <month> July </month> <year> 1991. </year>
Reference-contexts: Implicit in its visualization is the creation of an intermediate representation, some visible object or phenomenon, that can be rendered. Levoy <ref> [3] </ref> classifies volume rendering algorithms by the intermediate representation they employ. 1 The notable exception is frequency-domain volume rendering [5, 9], with a complexity of O (n 2 log n). Among the classes are surface-based techniques, those using polygons or surface patches as the representation.
Reference: [4] <author> William E. Lorensen and Harvey E. Cline. </author> <title> Marching cubes: A high resolution 3D surface construction algorithm. </title> <booktitle> Computer Graphics (SIGGRAPH '87 Conference Proceedings), </booktitle> <volume> 21(4) </volume> <pages> 163-169, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: The primitives are typically fitted to an approximation of an isosurface of the continuous scalar field within cells of the volume. 2 The best known of these techniques is the Marching Cubes algorithm <ref> [4] </ref>. Processing the volume cell by cell, the algorithm classifies each cell based on the value of its voxels relative to that of the isosurface being reconstructed. The classification yields a binary encoding that provides an index into a table describing the polygonal approximation of the isosurface within the cell.
Reference: [5] <author> Tom Malzbender. </author> <title> Fourier volume rendering. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 12(3) </volume> <pages> 233-250, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Implicit in its visualization is the creation of an intermediate representation, some visible object or phenomenon, that can be rendered. Levoy [3] classifies volume rendering algorithms by the intermediate representation they employ. 1 The notable exception is frequency-domain volume rendering <ref> [5, 9] </ref>, with a complexity of O (n 2 log n). Among the classes are surface-based techniques, those using polygons or surface patches as the representation. Such techniques have proved popular due to their ease of use, range of applicability, and comparatively fast execution.
Reference: [6] <author> John W. Milnor. </author> <title> Topology from the Differentiable Viewpoint. </title> <institution> The University Press of Virginia, </institution> <address> Charlottesville, VA, </address> <year> 1965. </year>
Reference-contexts: Such band-limited func Left: original values and placement of planar approximation of the level 6 isosurface. Right: data quantized to a range of 3 centered on the original isolevel, and resulting shift in isosurface position. tions are always C . Sard's Theorem <ref> [6] </ref> guarantees that for almost every (in the measure-theoretic sense) isosurface value v, the isosurface f 1 (v) contains no zeroes of the gradient of f . Thus almost every isosurface is locally smooth (by the implicit function theorem).
Reference: [7] <author> Thomas Porter and Tom Duff. </author> <title> Compositing digital images. </title> <booktitle> Computer Graphics (SIGGRAPH '84 Conference Proceedings), </booktitle> <volume> 18(3) </volume> <pages> 253-259, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: In essence we are compositing a series of 3fi3 pixel sub-images into an accumulating larger image. Porter and Duff's image compositing algebra <ref> [7] </ref> assumes that the contents of two pixels being composited are randomly dis the projected area lying within each of the nine pixels is stored in the cell projection table, which is indexed by the sub-pixel location of the projection marker. tributed.
Reference: [8] <author> William J. Schroeder, Jonathan A. Zarge, and William E. Lorensen. </author> <title> Decimation of triangle meshes. </title> <booktitle> Computer Graphics (SIGGRAPH '92 Conference Proceedings), </booktitle> <volume> 26(2) </volume> <pages> 65-70, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Schroeder et al. <ref> [8] </ref> reduce the number of triangles required for the polygonal representation of objects through a postprocess, making the extracted representation renderable on typical graphics hardware. 1.3 Motivation As dataset size grows, the processing demands of conventional techniques can severely tax even the fastest workstations. Consider an example. <p> Consider an example. The industrial CT dataset of the turbine blade in Figure 6 (also illustrated by Schroeder et al. <ref> [8] </ref>) contains 300 slices, each of size 512fi512. The isosurface created from this data by Marching Cubes contains approximately 1.7 million triangles. Several stages in the algorithm are particularly expensive when processing such complex surfaces.
Reference: [9] <author> Takashi Totsuka and Marc Levoy. </author> <title> Frequency domain volume rendering. </title> <booktitle> In Proceedings: SIGGRAPH '93 Conference, </booktitle> <pages> pages 271-278. </pages> <publisher> ACM SIGGRAPH, </publisher> <month> August </month> <year> 1993. </year>
Reference-contexts: Implicit in its visualization is the creation of an intermediate representation, some visible object or phenomenon, that can be rendered. Levoy [3] classifies volume rendering algorithms by the intermediate representation they employ. 1 The notable exception is frequency-domain volume rendering <ref> [5, 9] </ref>, with a complexity of O (n 2 log n). Among the classes are surface-based techniques, those using polygons or surface patches as the representation. Such techniques have proved popular due to their ease of use, range of applicability, and comparatively fast execution.
Reference: [10] <author> Jane Wilhelms. </author> <title> Decisions in volume rendering. </title> <booktitle> State of the Art in Volume Visualization - SIGGRAPH '91 Course Notes, </booktitle> <month> July </month> <year> 1991. </year>
Reference-contexts: Recent work has focused on improving the performance of such techniques. Wilhelms and Van Gelder [11] use spa 2 We adopt the terminology of Wilhelms <ref> [10] </ref>, referring to individual volume data points as voxels, and to a region of space bounded by a set of voxels (typically eight for regular volumes) as a cell. tial data structures as a preprocess to reduce the work de-voted to regions within the volume of little or no interest.
Reference: [11] <author> Jane Wilhelms and Allen Van Gelder. </author> <title> Octrees for faster isosurface generation. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 11(3) </volume> <pages> 201-227, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: This normal is used to shade the intersection point, considered to lie at the sub-cell center, which is then projected onto the image plane where the computed intensity is assigned to the appropriate pixel. Recent work has focused on improving the performance of such techniques. Wilhelms and Van Gelder <ref> [11] </ref> use spa 2 We adopt the terminology of Wilhelms [10], referring to individual volume data points as voxels, and to a region of space bounded by a set of voxels (typically eight for regular volumes) as a cell. tial data structures as a preprocess to reduce the work de-voted to <p> We chose to focus on reducing the work at cells containing isosurface, knowing that spatial acceleration techniques could be integrated later. Based on existing work using such approaches (e.g., Wilhelms and Van Gelder <ref> [11] </ref>, Laur and Hanrahan [2]) and our own observations on the small percentage of cells that intersect a typical isosurface, we expect a substantial speed up from using such a technique, quite likely a factor of ten or more. 7 Future work After integrating a spatial acceleration mechanism, next on our
Reference: [12] <author> Geoff Wyvill, Craig McPheeters, and Brian Wyvill. </author> <title> Data structures for soft objects. </title> <journal> The Visual Computer, </journal> <volume> 2(4) </volume> <pages> 227-234, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Gouraud shading is often used to achieve a smoother image. To do this, the algorithm approximates the volume gradient at voxel positions and interpolates these gradient vectors to produce normals at polygon vertices. Wyvill et al. <ref> [12] </ref> present a very similar technique. They too classify cell voxels relative to isosurface value and calculate polygon vertex positions by voxel value interpolation. Their technique differs from Marching Cubes in that it uses an approximate value at the center of a cell face to select among alternate polygon configurations.
References-found: 12

