URL: ftp://enws318.eas.asu.edu/pub/rao/ihrig-ijcai-wkshp.ps
Refering-URL: http://enuxsa.eas.asu.edu:80/~ihrig/
Root-URL: 
Email: laurie.ihrig,rao@asu.edu  
Title: Automatic Storage and Indexing of Plan Derivations based on Replay Failures  
Author: Laurie Ihrig Subbarao Kambhampati 
Address: Tempe, AZ 85287-5406  
Affiliation: Department of Computer Science and Engineering Arizona State University,  
Abstract: When a case-based planner is retrieving a previous case in preparation for solving a new similar problem, it is often not aware of all of the implicit features of the new problem situation which determine if a particular case may be successfully applied. This means that some cases may fail to improve the planner's performance. By detecting and explaining these case failures as they occur, retrieval may be improved incrementally. In this paper we provide a definition of case failure for the case-based planner, dersnlp (derivation replay in snlp), which solves new problems by replaying its previous plan derivations. We provide explanation-based learning (EBL) techniques for detecting and constructing the reasons for the case failure. We also describe how the case library is organized so as to incorporate this failure information as it is produced. Finally we present an empirical study which demonstrates the effectiveness of this approach in improving the performance of dersnlp.
Abstract-found: 1
Intro-found: 1
Reference: [ 1 ] <author> A. Barrett and D. Weld. </author> <title> Partial order planning: evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67:71--112, </volume> <year> 1994. </year>
Reference-contexts: Since a plan failure is explained by a subset of plan constraints, failure explanations are represented in the same manner as a partial plan. dersnlp represents its partial plans as a 6-tuple, hS; O; B; L; E ; Ci, where <ref> [ 1 ] </ref> : S is the set of actions (step-names) in the plan, each of which is mapped onto an operator in the domain theory. S contains two dummy steps: t I whose effects are the initial state conditions, and t G whose preconditions are the input goals, G. <p> Domains: Experiments were run on problems drawn from two domains. The first was the artificial domain, ( 2 D m S 1 ), originally described in <ref> [ 1 ] </ref> and shown in Figure 9.
Reference: [ 2 ] <author> J. Carbonell. </author> <title> Derivational analogy: A theory of reconstructive problem solving and expertise acquisition. </title> <editor> In Ryszard Michalski, Jaime Carbonell, and Tom M. Mitchell, editors, </editor> <booktitle> Machine Learning: an Artificial Intelligence approach: </booktitle> <volume> Volume 2. Morgan-Kaufman, </volume> <year> 1986. </year>
Reference-contexts: One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems <ref> [ 2; 9 ] </ref> . Recently we adapted this approach, called derivational replay, to improve the performance of the partial-order planner, snlp [ 4 ] .
Reference: [ 3 ] <author> K. Hammond. </author> <title> Explaining and repairing plans that fail. </title> <journal> Artificial Intelligence, </journal> <volume> 45:173--228, </volume> <year> 1990. </year>
Reference-contexts: 1 Introduction Case-based planning provides significant performance improvements over generative planning when the planner is solving a series of similar problems, and when it has an adequate theory of problem similarity <ref> [ 3; 4; 5; 8; 9 ] </ref> . One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [ 2; 9 ] . <p> Replay failures are explained and used to avoid the retrieval of a case in situations where replay of a case will mislead the planner. CHEF <ref> [ 3 ] </ref> learns to avoid execution-time failures by simulating and analyzing plans derived by reusing old cases. In contrast, our approach attempts to improve planning efficiency by concentrating on search path failures encountered in extending a case to solve a new problem.
Reference: [ 4 ] <author> L. Ihrig and S. Kambhampati. </author> <title> Derivation replay for partial-order planning. </title> <booktitle> In Proceedings AAAI-94, </booktitle> <year> 1994. </year>
Reference-contexts: 1 Introduction Case-based planning provides significant performance improvements over generative planning when the planner is solving a series of similar problems, and when it has an adequate theory of problem similarity <ref> [ 3; 4; 5; 8; 9 ] </ref> . One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [ 2; 9 ] . <p> One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [ 2; 9 ] . Recently we adapted this approach, called derivational replay, to improve the performance of the partial-order planner, snlp <ref> [ 4 ] </ref> . Although we found that replay tends to improve overall performance, its effectiveness on any one planning problem depends on retrieving an appropriate case for that problem. <p> Thanks to Suresh Katukam and Biplav Srivas-tava for helpful comments. the goals that were achieved in the previous case as well as the features of the initial state which contributed to their achievement <ref> [ 6; 9; 4 ] </ref> . If these goals are also input goals in the new problem situation and the initial state conditions are also present then the case is retrieved. <p> Finally, in Section 5, we describe an empirical study demonstrating the relative effectiveness of case retrieval when failure information is utilized. 2 A Definition of Case Failure for dersnlp dersnlp is a case-based planning system that replays previous plan derivations <ref> [ 4 ] </ref> . Figure 1 illustrates the replay of a derivation trace. Whenever a new problem is attempted, and replay. <p> With this strategy, search control is shifted to the series of instructions provided by the previous derivation, and is returned to from-scratch planning only after all of the valid instructions in the trace have been replayed <ref> [ 4 ] </ref> . This means that the plan which is produced through replay, called the skeletal plan, contains all of the constraints that were added on the guidance of the previous trace.
Reference: [ 5 ] <author> L Ihrig and S. Kambhampati. </author> <title> On the relative utility of plan-space vs state-space planning in a case-based framework. </title> <type> Technical Report 94-006, </type> <institution> Department of Computer Science and Engineering, 1994. Arizona State University. </institution>
Reference-contexts: 1 Introduction Case-based planning provides significant performance improvements over generative planning when the planner is solving a series of similar problems, and when it has an adequate theory of problem similarity <ref> [ 3; 4; 5; 8; 9 ] </ref> . One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [ 2; 9 ] .
Reference: [ 6 ] <author> S. Kambhampati and J. A. Hendler. </author> <title> A validation structure based theory of plan modification and reuse. </title> <journal> Artificial Intelligence, </journal> <volume> 55:193--258, </volume> <year> 1992. </year>
Reference-contexts: Thanks to Suresh Katukam and Biplav Srivas-tava for helpful comments. the goals that were achieved in the previous case as well as the features of the initial state which contributed to their achievement <ref> [ 6; 9; 4 ] </ref> . If these goals are also input goals in the new problem situation and the initial state conditions are also present then the case is retrieved. <p> of the 30 test problems, and the total CPU time in seconds (including case retrieval time). dersnlp in learning mode was able to solve the multi-goal problems in substantially less time than in static mode. 6 Summary and Conclusion The current work complements and extends earlier treatments of case retrieval <ref> [ 6; 9 ] </ref> . Replay failures are explained and used to avoid the retrieval of a case in situations where replay of a case will mislead the planner. CHEF [ 3 ] learns to avoid execution-time failures by simulating and analyzing plans derived by reusing old cases.
Reference: [ 7 ] <author> S. Katukam and S. Kambhampati. </author> <title> Learning ebl-based search control rules for partial order planning. </title> <booktitle> In ProceedingsAAAI-94, </booktitle> <year> 1994. </year>
Reference-contexts: These include a method for forming explanations of plan failures in terms of their inconsistent constraints, and regressing these explanations over the planning decisions in the failing search paths <ref> [ 7 ] </ref> . The failure reasons are then used to annotate the case to constrain its future retrieval. We evaluate the effectiveness of using case failure information in an empirical study which compares the performance of dersnlp on replay of cases both with and without learning from case failure. <p> In Section 2, we first describe dersnlp which implements our approach to derivation replay in the partial-order planner, snlp, and discuss a definition of case failure for dersnlp. Then, in Section 3, we describe the explanation-based learning techniques that were developed in <ref> [ 7 ] </ref> , including the construction of failure explanations, and their regression up the failing search paths. We then show how reasons for case failure are formed using these techniques, and how case failure reasons are used to refine the labeling of cases in the library. <p> In this section, we show how the EBL techniques developed in <ref> [ 7 ] </ref> are employed to construct these reasons. dersnlp+ebl constructs case failure reasons incrementally as the skeletal plan is extended by the addition of plan constraints and plan failures are encountered.
Reference: [ 8 ] <author> J. Koehler. </author> <title> Avoiding pitfalls in case-based planning. </title> <booktitle> In Proceedings of the 2nd Intl. Conf. on AI Planning Systems, </booktitle> <pages> pages 104--109, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction Case-based planning provides significant performance improvements over generative planning when the planner is solving a series of similar problems, and when it has an adequate theory of problem similarity <ref> [ 3; 4; 5; 8; 9 ] </ref> . One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [ 2; 9 ] .
Reference: [ 9 ] <author> M. Veloso. </author> <title> Learning by analogical reasoning in general problem solving. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <year> 1992. </year>
Reference-contexts: 1 Introduction Case-based planning provides significant performance improvements over generative planning when the planner is solving a series of similar problems, and when it has an adequate theory of problem similarity <ref> [ 3; 4; 5; 8; 9 ] </ref> . One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems [ 2; 9 ] . <p> One approach to case-based planning is to store plan derivations which are then used as guidance when solving new similar problems <ref> [ 2; 9 ] </ref> . Recently we adapted this approach, called derivational replay, to improve the performance of the partial-order planner, snlp [ 4 ] . <p> Thanks to Suresh Katukam and Biplav Srivas-tava for helpful comments. the goals that were achieved in the previous case as well as the features of the initial state which contributed to their achievement <ref> [ 6; 9; 4 ] </ref> . If these goals are also input goals in the new problem situation and the initial state conditions are also present then the case is retrieved. <p> The case failure reason is thus used to direct retrieval away from the case which will repeat a known failure, and towards the case that avoids it. 4 An Example of Case Failure arriving at a solution to a simple problem taken from the logistics transportation domain of <ref> [ 9 ] </ref> . We will use this trace Goal : (AT-OB OB1 l d ) Initial : (AT-PL PL1 l p ) (AT-OB OB1 l 1 ) ... <p> : fI j jj &lt; ig) (A i precond : fI i P fi g add : fG i g delete : fI j jj &lt; ig) (A ff precond : fg add : fG ff g delete : fP fi g [ fG i j8ig) logistics transportation domain of <ref> [ 9 ] </ref> was adopted for the second set of experiments. Eight packages and one airplane were randomly distributed over four cities. Problem goals represent the task of getting one or more packages to a single designated airport. <p> of the 30 test problems, and the total CPU time in seconds (including case retrieval time). dersnlp in learning mode was able to solve the multi-goal problems in substantially less time than in static mode. 6 Summary and Conclusion The current work complements and extends earlier treatments of case retrieval <ref> [ 6; 9 ] </ref> . Replay failures are explained and used to avoid the retrieval of a case in situations where replay of a case will mislead the planner. CHEF [ 3 ] learns to avoid execution-time failures by simulating and analyzing plans derived by reusing old cases.
References-found: 9

