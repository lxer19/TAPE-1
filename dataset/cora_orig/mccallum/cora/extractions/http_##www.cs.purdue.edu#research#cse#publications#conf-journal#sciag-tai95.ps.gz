URL: http://www.cs.purdue.edu/research/cse/publications/conf-journal/sciag-tai95.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/ttd/resume.html
Root-URL: http://www.cs.purdue.edu
Email: email: fttd,joshi,jrrg@cs.purdue.edu  
Title: SciAgents An Agent Based Environment for Distributed, Cooperative Scientific Computing  
Author: Tzvetan T. Drashansky, Anupam Joshi, John R. Rice 
Date: July 24, 1995  
Address: West Lafayette, IN 47907-1398  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: Problem solving using complex mathematical models of the physical phenomena requires expert knowledge in a variety of fields of computer science, such as parallel computing and numerical methods. This often makes application scientists, who have the domain expertise to devise the mathematical models, unable to use the power of High Performance Computing (HPC) systems. SciAgents is a problem solving environment to allow these models and systems to become truly easy to use for the application scientists, much like PC-based systems. It is based on the agent-oriented model of computing. In this paper, we discuss the design and architecture of SciAgents. We present a set of artificial/computational intelligence techniques used by the cooperating agents that constitute SciA-gents , which allows them to complete the program specification and to carry out the program execution with minimal need for user intervention. We describe the design in context of scientific computing models based on partial differential equations. SciAgents permits the non-expert user to cost-effectively and easily develop software for solving complex mathematical models. It is scalable and allows for extensive reuse of existing software. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> G. Agha, P. Wegner, and A. Yonezawa (eds), </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, </booktitle> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The trend of increased abstraction, encapsulation, and modularization in software technology has 1 brought about in the recent years the concept of an agent. The agent-based paradigm is considered <ref> [29, 1, 8] </ref> a step beyond object-oriented computing. There is no universally accepted definition of an agent and the corresponding paradigm; some authors [29, 24] distinguish between a "weak" and a "strong" notion of agents. Our discussion here is close to the weak notion as presented in [29].
Reference: [2] <author> S. Cammarata et al., </author> <title> Strategies of Cooperation in Distributed Problem Solving, </title> <booktitle> Readings in Distributed Artificial Intelligence (Bond and Gasser, </booktitle> <editor> eds.), </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1988, </year> <pages> pp. 102-105. </pages>
Reference-contexts: The ability of the agents to autonomously pursue their goals can resolve the problems during the solution process without user intervention. This allows seamless derivation of the global solution. For similar techniques in a different context see Lesser et al. [14], Smith et al. [25], Cammarata et al. <ref> [2] </ref>, Wes-son et al. [28]. We develop the SciAgents approach in the context of solving models based on partial differential equations (PDE). Such models are among the more complex examples that arise in scientific computing.
Reference: [3] <author> McWriter J. D. and G. J. Nutt, Escalante: </author> <title> An Environment for the Rapid Construction of Visual Languages Applications, </title> <booktitle> Proc. 1994 IEEE Symposium Visual Languages, IEEE, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <pages> pp. 15-22. </pages>
Reference-contexts: In this way we can build the user builder interface (see Figure 5), the global execution interface, and the local interface of the agents. The interfaces that we create make extensive use of visual programming techniques <ref> [3, 20] </ref> to aid the non-experts. In fact, by instantiating agents and building the problem solving network, the user creates a program which is then executed.
Reference: [4] <author> T. T. Drashansky, </author> <title> A Software Architecture of Collaborating Agents for Solving PDEs, </title> <type> Tech. Report TR-95-010, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1995, </year> <title> (M.S. </title> <type> thesis). </type>
Reference-contexts: One can view each problem solving process as an autonomous agent in a multi-agent system. The main issue is how to obtain a global solution out of the local solutions. To do this, we use the interface relaxation technique <ref> [5, 4, 16, 15] </ref>. Important mathematical questions of the convergence of the method, the behavior of the solution in special cases, etc., are addressed in [16]. This technique uses physical relations among the parts of the model. <p> The core solvers have to be able to complete the local PDE problem definition (by making use of PYTHIA, for instance). Requirements of the minimal and the desired functionality of an existing solver before it is made available to SciAgents are discussed in detail in <ref> [5, 4] </ref>. During the solution process, the wrappers are responsible for employing the intelligence techniques described below. The architecture of the relaxers facilitates the even distribution of the computations and efficient implementation.
Reference: [5] <author> T. T. Drashansky and J. R. Rice, </author> <title> Processing PDE Interface Conditions - II, </title> <type> Tech. Report TR-94-066, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1994. </year>
Reference-contexts: One can view each problem solving process as an autonomous agent in a multi-agent system. The main issue is how to obtain a global solution out of the local solutions. To do this, we use the interface relaxation technique <ref> [5, 4, 16, 15] </ref>. Important mathematical questions of the convergence of the method, the behavior of the solution in special cases, etc., are addressed in [16]. This technique uses physical relations among the parts of the model. <p> Along each interface there are conditions to be satisfied. Typically, for second order PDEs, there are two physical or mathematical conditions involving values and normal derivatives of the solutions on the neighboring subdomains. Examples for common interface conditions are given in <ref> [5, 16] </ref>. The interface relaxation technique can be described as follows. Step 1. Choose initial information as boundary conditions to determine the PDE solutions in each subdomain. Step 2. Solve the PDE in each subdomain and obtain a local solution. Step 3. <p> This is not the case with any other problem decomposition techniques used in PDE problem solving <ref> [21, 5] </ref>. Second, the relaxer agents have to select a set of algorithms related to the interface relaxation technique and to inform the solvers what data they need to provide after each iteration. Third, the agents have to make use of the available hardware. <p> The core solvers have to be able to complete the local PDE problem definition (by making use of PYTHIA, for instance). Requirements of the minimal and the desired functionality of an existing solver before it is made available to SciAgents are discussed in detail in <ref> [5, 4] </ref>. During the solution process, the wrappers are responsible for employing the intelligence techniques described below. The architecture of the relaxers facilitates the even distribution of the computations and efficient implementation.
Reference: [6] <author> T. Finin et al., </author> <title> Draft Specification of the KQML Agent-Communication Language, DARPA Knowledge Sharing Initiative, External Interfaces Working Group, 1993. [7] , KQML as an Agent Communication Language, </title> <booktitle> Proc. III Intl.Conf. on Information and Knowledge Management, ACM, </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: SciAgents is designed as an open system it is relatively easy to add new solver agent templates with different core solvers to the set of templates in the agent instantia-tor's database. In SciAgents at the highest level communication is done using the Knowledge Query and Manipulation Language (KQML <ref> [6, 7] </ref>) from ARPA's knowledge sharing initiative. We adhere to the declarative approach in the agent interaction due to the heterogeneous environment of SciAgents . The contents of the messages is in the high-level language S-KIF for scientific computing.
Reference: [8] <author> M.R. Genesereth and S.P. Ketchpel, </author> <title> Software Agents, </title> <journal> Comm. ACM 37 (1994), </journal> <volume> no. 7, </volume> <pages> 48-53. </pages>
Reference-contexts: The trend of increased abstraction, encapsulation, and modularization in software technology has 1 brought about in the recent years the concept of an agent. The agent-based paradigm is considered <ref> [29, 1, 8] </ref> a step beyond object-oriented computing. There is no universally accepted definition of an agent and the corresponding paradigm; some authors [29, 24] distinguish between a "weak" and a "strong" notion of agents. Our discussion here is close to the weak notion as presented in [29].
Reference: [9] <editor> B. Hayes-Roth et al., Guardian. </editor> <title> A Prototype Intelligent Agent for Intensive-care Monitoring, </title> <booktitle> Ar-tif. Intell. Med 4 (1992), </booktitle> <volume> no. 2, </volume> <pages> 165-185. </pages>
Reference-contexts: Many agent-based systems have been developed <ref> [29, 24, 26, 23, 9] </ref>, which demonstrate the advantages of the agent technology. One of their important aspects is their modularity and flexibility, it is very easy dynamically to add or remove agents, to move agents around the computing network, to organize the user interface.
Reference: [10] <author> E. N. Houstis and J. R. Rice, </author> <title> Parallel ELL-PACK: A Development and Problem Solving Environment for High Performance Computing Machines, Programming Environments for High Level Scientific Problem Solving, </title> <publisher> North Holland, </publisher> <year> 1992, </year> <pages> pp. 229-243. </pages>
Reference-contexts: Recognizing this problem, teams of experts have developed general problem solvers applicable to a relatively large set of homogeneous, relatively simple, and isolated models; these solvers encapsulate significant amount of knowledge from mathematics, scientific computing, parallel computing, scientific visualization, etc. A good example for such solvers is //ELLPACK <ref> [10, 22] </ref> which is designed to handle partial differential equations models. It is generally accepted that universal solvers for the complex heterogeneous models described above cannot be built. Different software for solving each individual problem or small class of problems is necessary. <p> The user of the solution might also like to visualize it. It is clear that one needs a high level of expertise in scientific computing in order to solve such a single-domain PDE problem efficiently and accurately. There are general solvers for this class of problems like //ELLPACK <ref> [10, 22] </ref> which has tools for defining the problem, a set of dis-cretization methods for various problems, a set of linear equation solvers, and a set of routines for visualization of the solution. It also makes use of HPC hardware.
Reference: [11] <editor> E. Houstis et al., </editor> <booktitle> The PYTHIA projet, Proc. First Intl. Conf. on Neural, </booktitle> <institution> Parallel and Scientific Computing, </institution> <note> (to appear). </note>
Reference-contexts: These actions require reliable estimates of the computational loads caused by the solvers. At this point we do not handle dynamic migrations and decomposition of agents. 2.2.1 The PYTHIA system PYTHIA <ref> [11] </ref> is a system to automatically obtain the data and the parameters described above. Its objective is to advise the user of the "right", or at least "good", selections of various solvers, their parameters and the computational resources for solving a particular single-domain PDE problem.
Reference: [12] <author> Anupam Joshi, </author> <title> To Learn or Not to Learn ..., Proc. IJCAI'95 Workshop on Adaptation and Learning in Multiagent Systems, </title> <note> (to appear). </note>
Reference-contexts: Each agent then replies, and encloses information about "how much confidence it has in the estimate" and "how much it knows about the kind of problem". The agent receives all these answers and then uses them to make a prediction <ref> [12] </ref>. The classification of problems into subsets and determining which subset a particular problem belongs to can be implemented in several ways. We have used bayesian belief networks [27], neural networks [13], and fuzzy systems [18] in our work.
Reference: [13] <editor> A. Joshi et al., </editor> <title> The Use of Neural Networks to Support Intelligent Scientific Computing, </title> <booktitle> Proc. IEEE Intl. Conf. Neural Networks, </booktitle> <publisher> IEEE, IEEE Press. </publisher>
Reference-contexts: The agent receives all these answers and then uses them to make a prediction [12]. The classification of problems into subsets and determining which subset a particular problem belongs to can be implemented in several ways. We have used bayesian belief networks [27], neural networks <ref> [13] </ref>, and fuzzy systems [18] in our work. As an example for the use of the PYTHIA system, in SciAgents the solvers ask the available PYTHIA agent for a recommendation for each of the required parameters given the equation, the domain, and the desired accuracy.
Reference: [14] <author> V. R. Lesser, </author> <title> A Retrospective View of FA/C Dis--tributed Problem Solving, </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics 21 (1991), </journal> <volume> no. 6, </volume> <pages> 1347-1363. </pages>
Reference-contexts: The ability of the agents to autonomously pursue their goals can resolve the problems during the solution process without user intervention. This allows seamless derivation of the global solution. For similar techniques in a different context see Lesser et al. <ref> [14] </ref>, Smith et al. [25], Cammarata et al. [2], Wes-son et al. [28]. We develop the SciAgents approach in the context of solving models based on partial differential equations (PDE). Such models are among the more complex examples that arise in scientific computing.
Reference: [15] <author> S. McFaddin and J. R. Rice, RELAX: </author> <title> A Platform for Software Relaxation, Expert Systems for Scientific Computing (Houstis, </title> <editor> Rice, and Vichnevet-sky, eds.), </editor> <publisher> North Holland, </publisher> <year> 1992. </year>
Reference-contexts: One can view each problem solving process as an autonomous agent in a multi-agent system. The main issue is how to obtain a global solution out of the local solutions. To do this, we use the interface relaxation technique <ref> [5, 4, 16, 15] </ref>. Important mathematical questions of the convergence of the method, the behavior of the solution in special cases, etc., are addressed in [16]. This technique uses physical relations among the parts of the model.
Reference: [16] <author> Mo Mu and J. R. Rice, </author> <title> Modeling with Collaborating PDE Solvers | Theory and Practice, </title> <type> Tech. Report TR-94-056, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1994. </year>
Reference-contexts: For example, the engine simulation is estimated to require 100 million variables and the answer (the data set allowing the display of the accurate solution at any point) is 20 gigabytes in size. The problem contains about 10,000 subdomains with 35,000 interfaces <ref> [16] </ref>. Clearly, custom software is required for solving each multiple-domain PDE problem and it is not feasible to build it with the traditional software development technologies. <p> One can view each problem solving process as an autonomous agent in a multi-agent system. The main issue is how to obtain a global solution out of the local solutions. To do this, we use the interface relaxation technique <ref> [5, 4, 16, 15] </ref>. Important mathematical questions of the convergence of the method, the behavior of the solution in special cases, etc., are addressed in [16]. This technique uses physical relations among the parts of the model. <p> The main issue is how to obtain a global solution out of the local solutions. To do this, we use the interface relaxation technique [5, 4, 16, 15]. Important mathematical questions of the convergence of the method, the behavior of the solution in special cases, etc., are addressed in <ref> [16] </ref>. This technique uses physical relations among the parts of the model. The local phenomenon in each subdomain obeys a single physical law modeled by a PDE. The conditions between the subdomains may be obtained from knowledge of the physics which determines interface conditions that must be satisfied. <p> Along each interface there are conditions to be satisfied. Typically, for second order PDEs, there are two physical or mathematical conditions involving values and normal derivatives of the solutions on the neighboring subdomains. Examples for common interface conditions are given in <ref> [5, 16] </ref>. The interface relaxation technique can be described as follows. Step 1. Choose initial information as boundary conditions to determine the PDE solutions in each subdomain. Step 2. Solve the PDE in each subdomain and obtain a local solution. Step 3.
Reference: [17] <author> T. Oates et al., </author> <title> Cooperative Information Gathering: A Distributed Problem Solving Approach, </title> <type> Tech. Report TR-94-66, </type> <institution> UMASS, </institution> <year> 1994. </year>
Reference-contexts: Agent-based systems can minimize centralized control. Hitherto, the agent-based paradigm has not been used in scientific computing. We believe that using it in handling complex mathematical models of the type described earlier is natural and direct. It allows distributed problem solving <ref> [17] </ref> which is distinct from merely using distributed computing. The expected behavior of the simple model solvers, computing locally and interacting with the neighboring solvers, effectively translates into a behavior of a local problem solver agent.
Reference: [18] <author> N. Ramakrishnan et al., </author> <title> Neuro-Fuzzy Systems for Intelligent Scientific Computing, </title> <type> Tech. Report TR-95-026, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1995. </year>
Reference-contexts: The agent receives all these answers and then uses them to make a prediction [12]. The classification of problems into subsets and determining which subset a particular problem belongs to can be implemented in several ways. We have used bayesian belief networks [27], neural networks [13], and fuzzy systems <ref> [18] </ref> in our work. As an example for the use of the PYTHIA system, in SciAgents the solvers ask the available PYTHIA agent for a recommendation for each of the required parameters given the equation, the domain, and the desired accuracy.
Reference: [19] <author> V. Rego et al., </author> <title> Process Mobility in Distributed Memory Simulation Systems, </title> <booktitle> Proc. Winter Simulation Conference, </booktitle> <pages> pp. 722-730. </pages>
Reference-contexts: The main issue is then the correct distribution of the solver agents to balance the load. This can be done by the global execution interface in several ways. One is to reassign agents <ref> [19] </ref> to appropriate computing units; another is to split some subdomains further and distribute them to separate computing units.
Reference: [20] <author> A. Repenning, Agentsheets: </author> <title> A Tool for Building Domain-Oriented Dynamic, Visual Environments, </title> <type> Ph.D. thesis, </type> <institution> Dept. Comp. Sci., Univ. Col-orado at Boulder, </institution> <year> 1993. </year>
Reference-contexts: In this way we can build the user builder interface (see Figure 5), the global execution interface, and the local interface of the agents. The interfaces that we create make extensive use of visual programming techniques <ref> [3, 20] </ref> to aid the non-experts. In fact, by instantiating agents and building the problem solving network, the user creates a program which is then executed.
Reference: [21] <author> J. R. Rice, </author> <title> Processing PDE Interface Conditons, </title> <type> Tech. Report TR-94-041, </type> <institution> Dept. Comp. Sci., Pur-due University, </institution> <year> 1994. </year>
Reference-contexts: This is not the case with any other problem decomposition techniques used in PDE problem solving <ref> [21, 5] </ref>. Second, the relaxer agents have to select a set of algorithms related to the interface relaxation technique and to inform the solvers what data they need to provide after each iteration. Third, the agents have to make use of the available hardware.
Reference: [22] <author> J. R. Rice and R. F. Boisvert, </author> <title> Solving Elliptic Problems Using ELLPACK, </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Recognizing this problem, teams of experts have developed general problem solvers applicable to a relatively large set of homogeneous, relatively simple, and isolated models; these solvers encapsulate significant amount of knowledge from mathematics, scientific computing, parallel computing, scientific visualization, etc. A good example for such solvers is //ELLPACK <ref> [10, 22] </ref> which is designed to handle partial differential equations models. It is generally accepted that universal solvers for the complex heterogeneous models described above cannot be built. Different software for solving each individual problem or small class of problems is necessary. <p> The user of the solution might also like to visualize it. It is clear that one needs a high level of expertise in scientific computing in order to solve such a single-domain PDE problem efficiently and accurately. There are general solvers for this class of problems like //ELLPACK <ref> [10, 22] </ref> which has tools for defining the problem, a set of dis-cretization methods for various problems, a set of linear equation solvers, and a set of routines for visualization of the solution. It also makes use of HPC hardware.
Reference: [23] <author> J. C. Schlimmer and L. A. Hermens, </author> <title> Software Agents: Completing Patternsand Constructing User Interfaces, </title> <journal> Journal of Artificial Intelligence Research 1 (1993), </journal> <volume> no. </volume> <pages> 61-89. </pages>
Reference-contexts: Many agent-based systems have been developed <ref> [29, 24, 26, 23, 9] </ref>, which demonstrate the advantages of the agent technology. One of their important aspects is their modularity and flexibility, it is very easy dynamically to add or remove agents, to move agents around the computing network, to organize the user interface.
Reference: [24] <author> Y. Shoham, </author> <title> Agent-Oriented Programming, </title> <booktitle> Artificial Intelligence 60 (1993), </booktitle> <volume> no. 1, </volume> <pages> 51-92. </pages>
Reference-contexts: The agent-based paradigm is considered [29, 1, 8] a step beyond object-oriented computing. There is no universally accepted definition of an agent and the corresponding paradigm; some authors <ref> [29, 24] </ref> distinguish between a "weak" and a "strong" notion of agents. Our discussion here is close to the weak notion as presented in [29]. <p> Many agent-based systems have been developed <ref> [29, 24, 26, 23, 9] </ref>, which demonstrate the advantages of the agent technology. One of their important aspects is their modularity and flexibility, it is very easy dynamically to add or remove agents, to move agents around the computing network, to organize the user interface.
Reference: [25] <author> R. G. Smith and R. Davis, </author> <title> Frameworks for Cooperation in Distributed Problem Solving, </title> <booktitle> Readings in Distributed Artificial Intelligence (Bond and Gasser, </booktitle> <editor> eds.), </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1988, </year> <pages> pp. 61-70. </pages>
Reference-contexts: The ability of the agents to autonomously pursue their goals can resolve the problems during the solution process without user intervention. This allows seamless derivation of the global solution. For similar techniques in a different context see Lesser et al. [14], Smith et al. <ref> [25] </ref>, Cammarata et al. [2], Wes-son et al. [28]. We develop the SciAgents approach in the context of solving models based on partial differential equations (PDE). Such models are among the more complex examples that arise in scientific computing.
Reference: [26] <author> L. Z. Varga et. al., </author> <title> Integrating Intelligent Systems into a Cooperating Community for Electricity Distribution Management, </title> <journal> International Journal of Expert Systems with Applications 7 (1994), </journal> <volume> no. </volume> <pages> 4. </pages>
Reference-contexts: Many agent-based systems have been developed <ref> [29, 24, 26, 23, 9] </ref>, which demonstrate the advantages of the agent technology. One of their important aspects is their modularity and flexibility, it is very easy dynamically to add or remove agents, to move agents around the computing network, to organize the user interface.
Reference: [27] <author> S. Weerawarana, </author> <title> Problem Solving Environments for Partial Differential Equation Based Systems, </title> <type> Ph.D. thesis, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1994. </year>
Reference-contexts: The user needs some high-level way of looking at SciAgents to monitor the processes involved in solving the problem. Figure 5 depicts the abstraction we use. There is a global communication medium which is used by all entities called a software bus <ref> [27] </ref>. The agent instantiator communicates with the user through the user builder interface and uses the software bus to communicate with the templates in order to instantiate various agents. Agents communi view. The user initially interacts with the User Builder Interface to define the global PDE problem. <p> The agent receives all these answers and then uses them to make a prediction [12]. The classification of problems into subsets and determining which subset a particular problem belongs to can be implemented in several ways. We have used bayesian belief networks <ref> [27] </ref>, neural networks [13], and fuzzy systems [18] in our work. As an example for the use of the PYTHIA system, in SciAgents the solvers ask the available PYTHIA agent for a recommendation for each of the required parameters given the equation, the domain, and the desired accuracy. <p> We adhere to the declarative approach in the agent interaction due to the heterogeneous environment of SciAgents . The contents of the messages is in the high-level language S-KIF for scientific computing. This is based on a language we developed for PDE data called PDESpec <ref> [27] </ref>. Using KQML for the inter agent communication in SciAgents ensures portability, compatibility, and better opportunities for extensions and the inclusion of agents built by others. The core solvers have to be able to complete the local PDE problem definition (by making use of PYTHIA, for instance).
Reference: [28] <author> R. Wesson et al., </author> <title> Network Structures for Distributed Situation Assessment, </title> <booktitle> Readings in Distributed Artificial Intelligence (Bond and Gasser, </booktitle> <editor> eds.), </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1988, </year> <pages> pp. 71-89. </pages>
Reference-contexts: This allows seamless derivation of the global solution. For similar techniques in a different context see Lesser et al. [14], Smith et al. [25], Cammarata et al. [2], Wes-son et al. <ref> [28] </ref>. We develop the SciAgents approach in the context of solving models based on partial differential equations (PDE). Such models are among the more complex examples that arise in scientific computing.
Reference: [29] <author> M. Wooldridge and N. Jennings, </author> <title> Intelligent Agents: </title> <journal> Theory and Practice, </journal> <note> (submitted to Knowledge Engineering Review), </note> <year> 1994. </year>
Reference-contexts: The trend of increased abstraction, encapsulation, and modularization in software technology has 1 brought about in the recent years the concept of an agent. The agent-based paradigm is considered <ref> [29, 1, 8] </ref> a step beyond object-oriented computing. There is no universally accepted definition of an agent and the corresponding paradigm; some authors [29, 24] distinguish between a "weak" and a "strong" notion of agents. Our discussion here is close to the weak notion as presented in [29]. <p> The agent-based paradigm is considered [29, 1, 8] a step beyond object-oriented computing. There is no universally accepted definition of an agent and the corresponding paradigm; some authors <ref> [29, 24] </ref> distinguish between a "weak" and a "strong" notion of agents. Our discussion here is close to the weak notion as presented in [29]. <p> There is no universally accepted definition of an agent and the corresponding paradigm; some authors [29, 24] distinguish between a "weak" and a "strong" notion of agents. Our discussion here is close to the weak notion as presented in <ref> [29] </ref>. An agent usually denotes a system that possesses the following properties [29]: * Autonomy: Agents operate without the direct intervention of humans, and have control over their actions and internal state. * Social ability: Agents interact with other agents (and possibly humans) via some kind of agent communication language. * <p> Our discussion here is close to the weak notion as presented in <ref> [29] </ref>. An agent usually denotes a system that possesses the following properties [29]: * Autonomy: Agents operate without the direct intervention of humans, and have control over their actions and internal state. * Social ability: Agents interact with other agents (and possibly humans) via some kind of agent communication language. * Reactivity: Agents perceive their environment and respond to changes that occur in <p> Many agent-based systems have been developed <ref> [29, 24, 26, 23, 9] </ref>, which demonstrate the advantages of the agent technology. One of their important aspects is their modularity and flexibility, it is very easy dynamically to add or remove agents, to move agents around the computing network, to organize the user interface.
References-found: 28

