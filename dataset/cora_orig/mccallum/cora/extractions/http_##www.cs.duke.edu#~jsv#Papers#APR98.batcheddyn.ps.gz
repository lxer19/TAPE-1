URL: http://www.cs.duke.edu/~jsv/Papers/APR98.batcheddyn.ps.gz
Refering-URL: http://www.cs.duke.edu/~jsv/Papers/catalog/node22.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Theory and Practice of I/O-Efficient Algorithms for Multidimensional Batched Searching Problems (Extended Abstract)  
Author: Lars Arge Octavian Procopiuc Sridhar Ramaswamy Torsten Suel Jeffrey Scott Vitter 
Abstract: We describe a powerful framework for designing efficient batch algorithms for certain large-scale dynamic problems that must be solved using external memory. The class of problems we consider, which we call colorable external-decomposable problems, include rectangle intersection, orthogonal line segment intersection, range searching, and point location. We are particularly interested in these problems in two and higher dimensions. They have numerous applications in geographic information systems (GIS), spatial databases, and VLSI and CAD design. We present simplified algorithms for problems previously solved by more complicated approaches (such as rectangle intersection), and we present efficient algorithms for problems not previously solved in an efficient way (such as point location and higher-dimensional versions of range searching and rectangle intersection). We give experimental results concerning the running time for our approach applied to the red-blue rectangle intersection problem, which is a key component of the extremely important database operation spatial join. Our algorithm scales well with the problem size, and for large problems sizes it greatly outperforms the well-known sweepline approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, L. Arge, T. M. Murali, K. Varadara-jan, and J. S. Vitter. </author> <title> I/O-efficient algorithms for contour line extraction and planar graph blocking. </title> <booktitle> In Proc. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> 1998. </year>
Reference-contexts: Aggarwal and Vitter [2] considered sorting and permutation related problems in the two-level I/O model and proved that external sorting requires fi (n log m n) I/Os. 1 I/O-efficient algorithms were later developed for several other problem domains, including computational geometry <ref> [1, 3, 6, 18] </ref>, string problems [5] and graph theory [3, 12, 37, 25]. See the mentioned papers for more complete references; a recent survey is also included in [4].
Reference: [2] <author> A. Aggarwal and J. S. Vitter. </author> <title> The Input/Output complexity of sorting and related problems. </title> <journal> Communications of the ACM, </journal> <volume> 31(9) </volume> <pages> 1116-1127, </pages> <year> 1988. </year>
Reference-contexts: Another example is a database application where the index structure is recomputed (or "rebalanced") when the query load is low. In this paper we consider batched problems in the standard two-level I/O model <ref> [2] </ref>, and we define the fol lowing parameters: N = # of objects in the problem; K = # of queries in the problem; T = # of objects in the solution; M = # of objects=queries fitting in main memory; B = # of objects=queries per disk block; where M <p> Aggarwal and Vitter <ref> [2] </ref> considered sorting and permutation related problems in the two-level I/O model and proved that external sorting requires fi (n log m n) I/Os. 1 I/O-efficient algorithms were later developed for several other problem domains, including computational geometry [1, 3, 6, 18], string problems [5] and graph theory [3, 12, 37,
Reference: [3] <author> L. Arge. </author> <title> The buffer tree: A new technique for optimal I/O-algorithms. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures, </booktitle> <volume> LNCS 955, </volume> <pages> pages 334-345, </pages> <year> 1995. </year> <note> A complete version appears as BRICS technical report RS-96-28, </note> <institution> University of Aarhus. </institution>
Reference-contexts: Aggarwal and Vitter [2] considered sorting and permutation related problems in the two-level I/O model and proved that external sorting requires fi (n log m n) I/Os. 1 I/O-efficient algorithms were later developed for several other problem domains, including computational geometry <ref> [1, 3, 6, 18] </ref>, string problems [5] and graph theory [3, 12, 37, 25]. See the mentioned papers for more complete references; a recent survey is also included in [4]. <p> and Vitter [2] considered sorting and permutation related problems in the two-level I/O model and proved that external sorting requires fi (n log m n) I/Os. 1 I/O-efficient algorithms were later developed for several other problem domains, including computational geometry [1, 3, 6, 18], string problems [5] and graph theory <ref> [3, 12, 37, 25] </ref>. See the mentioned papers for more complete references; a recent survey is also included in [4]. In the database literature a lot of attention has also been given to I/O-efficient computation, but with more emphasis on practical performance on "real-life" data. <p> The first problem is a batched problem by definition, and the latter two can easily be transformed to one-dimensional batched dynamic problems using the plane sweep paradigm [31]. Arge <ref> [3] </ref> considered the three problems, and developed I/O-efficient algorithms by looking at them as batched dynamic one-dimensional problems and developing I/O-efficient data structures for such problems. His so-called buffer trees are only efficient in a batched setting and cannot be used to answer single queries efficiently. <p> In Section 3 we describe our technique and use it to obtain algorithms for some of the two-dimensional problems also considered in <ref> [3, 18] </ref>. Our algorithms have the same O (n log m n + t) optimal performance as the previously developed algorithms, but in some sense our technique provides a general framework for the solution of the problems. <p> The basic idea in [17] is to use a segment tree [9, 31] to find these objects. Here we use the same basic idea, but the use of an external segment tree <ref> [3] </ref> complicates things considerably. The base structure of an external segment tree is a perfectly balanced tree with branching factor p over the N + K action times. <p> We associate with e the colors of the slabs that its existence interval spans. The key property is that the maximum number of distinct contiguous ranges of slabs (what is normally called multislabs <ref> [3, 6] </ref>)|and thus the maximum number of color sets associated with the objects in V r |is a quadratic function of the branching factor, and thus is O (m). <p> It should be noted that this is not a new theoretical result, as previous solutions for the batched range searching problem and the orthogonal line segment intersection problem <ref> [3, 18] </ref> can be combined to obtain an optimal algorithms for the problem. However, our technique suggests a new practical algorithm that solves the problem in one go.
Reference: [4] <author> L. Arge. </author> <title> Efficient External-Memory Data Structures and Applications. </title> <type> PhD thesis, </type> <institution> University of Aarhus, </institution> <month> February/August </month> <year> 1996. </year>
Reference-contexts: See the mentioned papers for more complete references; a recent survey is also included in <ref> [4] </ref>. In the database literature a lot of attention has also been given to I/O-efficient computation, but with more emphasis on practical performance on "real-life" data. Special attention has been given to the development of I/O-efficient spatial join algorithms [10, 20, 21, 24, 26, 27, 30].
Reference: [5] <author> L. Arge, P. Ferragina, R. Grossi, and J. Vitter. </author> <title> On sorting strings in external memory. </title> <booktitle> In Proc. ACM Symp. on Theory of Computation, </booktitle> <pages> pages 540-548, </pages> <year> 1997. </year>
Reference-contexts: Aggarwal and Vitter [2] considered sorting and permutation related problems in the two-level I/O model and proved that external sorting requires fi (n log m n) I/Os. 1 I/O-efficient algorithms were later developed for several other problem domains, including computational geometry [1, 3, 6, 18], string problems <ref> [5] </ref> and graph theory [3, 12, 37, 25]. See the mentioned papers for more complete references; a recent survey is also included in [4]. In the database literature a lot of attention has also been given to I/O-efficient computation, but with more emphasis on practical performance on "real-life" data.
Reference: [6] <author> L. Arge, D. E. Vengroff, and J. S. Vitter. </author> <title> External-memory algorithms for processing line segments in geographic information systems. </title> <note> Algorithmica (to appear in special issues on Geographical Information Systems), </note> <year> 1998. </year>
Reference-contexts: Aggarwal and Vitter [2] considered sorting and permutation related problems in the two-level I/O model and proved that external sorting requires fi (n log m n) I/Os. 1 I/O-efficient algorithms were later developed for several other problem domains, including computational geometry <ref> [1, 3, 6, 18] </ref>, string problems [5] and graph theory [3, 12, 37, 25]. See the mentioned papers for more complete references; a recent survey is also included in [4]. <p> His so-called buffer trees are only efficient in a batched setting and cannot be used to answer single queries efficiently. Recently, Arge et al. <ref> [6] </ref> considered a large number of problems involving line segments in the plane. In the internal memory setting, batched dynamic problems were considered by Edelsbrunner and Over-mars [17]. <p> We associate with e the colors of the slabs that its existence interval spans. The key property is that the maximum number of distinct contiguous ranges of slabs (what is normally called multislabs <ref> [3, 6] </ref>)|and thus the maximum number of color sets associated with the objects in V r |is a quadratic function of the branching factor, and thus is O (m). <p> The goal is to find for each point the first segment hit by an upwards ray originating in the point. In <ref> [6] </ref> a rather complicated O ((n+ k) log m n)-I/O solution to the static problem is given.
Reference: [7] <author> R. Bayer and E. McCreight. </author> <title> Organization and maintenance of large ordered indexes. </title> <journal> Acta Informatica, </journal> <volume> 1 </volume> <pages> 173-189, </pages> <year> 1972. </year>
Reference-contexts: In external memory the latter motivation plays an even bigger role because of fundamental computational limitations. A simple illustration of this is the one-dimensional range searching problem. The obvious data structure for this problem is the B-tree <ref> [7, 13] </ref>. A B-tree on N elements uses optimal O (n) space, can be built in O (n log B n) I/Os, and can be used to answer a range query in O (log B n + t) I/Os. It is easy to realize that the query bound is optimal.
Reference: [8] <author> J. L. Bentley. </author> <title> Decomposable searching problems. </title> <journal> Information Processing Letters, </journal> <volume> 8 </volume> <pages> 244-251, </pages> <year> 1979. </year>
Reference-contexts: We assume that all I/O-bounds are at least linear. The problems we will be interested in are all what is called decomposable <ref> [8, 17, 29] </ref>. Here we define an external memory version of this property called external-decomposable. Definition 1 Let P be a searching problem and let P (x; V ) denote the answer to P with respect to a set of objects V and a query object x.
Reference: [9] <author> J. L. Bentley and D. Wood. </author> <title> An optimal worst case algorithm for reporting intersections of rectangles. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 29 </volume> <pages> 571-577, </pages> <year> 1980. </year>
Reference-contexts: Another important external-decomposable problem which has received a lot of attention in the computational geometry literature is the d-dimensional rectangle intersection problem, that is, the problem of determining all intersecting pairs among a set of axis-parallel hyperrectangles in d-dimensional space <ref> [15, 17, 16, 35, 9] </ref>. <p> When a query q is performed at time j, it should be performed relative to the set of objects present at that time, that is, relative to all objects whose existence interval contains j. The basic idea in [17] is to use a segment tree <ref> [9, 31] </ref> to find these objects. Here we use the same basic idea, but the use of an external segment tree [3] complicates things considerably. The base structure of an external segment tree is a perfectly balanced tree with branching factor p over the N + K action times. <p> A simple plane sweep internal memory algorithm can be easily derived from the algorithms for the rectangle intersection problem <ref> [9, 17, 15, 16, 21, 35] </ref>. This well-known O (N log 2 N + K)-time algorithm sweeps the plane with a vertical line, while maintaining and querying two interval trees [15].
Reference: [10] <author> T. Brinkhoff, H.-P. Kriegel, and B. Seeger. </author> <title> Efficient processing of spatial joins using R-trees. </title> <booktitle> In Proc. SIG-MOD Intl. Conf. on Management of Data, </booktitle> <year> 1993. </year>
Reference-contexts: In the database literature a lot of attention has also been given to I/O-efficient computation, but with more emphasis on practical performance on "real-life" data. Special attention has been given to the development of I/O-efficient spatial join algorithms <ref> [10, 20, 21, 24, 26, 27, 30] </ref>. A number of I/O-efficient algorithms have been developed for decomposable problems and most of them can be formulated as batched static or dynamic searching problems. <p> The problem has been extensively studied in the database literature as one of the two subprob-lems of spatial join, which is a core operation in spatial database systems such as geographic information sys-tems <ref> [10, 20, 27, 26, 24, 30] </ref>. A simple plane sweep internal memory algorithm can be easily derived from the algorithms for the rectangle intersection problem [9, 17, 15, 16, 21, 35]. <p> As mentioned, the red-blue rectangle intersection problem has been extensively studied in the database literature. The proposed algorithms can be roughly classified into two groups: those that use an indexing structure (typically an R-tree variant) built on the two rectangle sets <ref> [10, 20] </ref> and those that do not [27, 30, 24]. There has been a trend towards analyzing algorithms that do not rely on an index.
Reference: [11] <author> Y.-J. Chiang. </author> <title> Experiments on the practical I/O efficiency of geometric algorithms: Distribution sweep vs. plane sweep. </title> <booktitle> In Proc. Workshop on Algorithms and Data Structures, </booktitle> <volume> LNCS 955, </volume> <pages> pages 346-357, </pages> <year> 1995. </year>
Reference-contexts: Recently, some research has also been done on the practical merits of the algorithms. Chiang <ref> [11] </ref> implemented the orthogonal line segment intersection algorithm developed in [18] using distribution sweeping and showed that it outperforms internal memory solutions even on moderately sized instances. <p> If TPIE detected that the available memory was exhausted, the sweep was aborted and we proceeded with the external approach. 4.2 Experimental data Along the lines of Chiang <ref> [11] </ref>, we generated four types of input data sets with N=2 red and N=2 blue rectan 2 The TPIE system can be downloaded from http://www.cs.duke.edu/TPIE/.
Reference: [12] <author> Y.-J. Chiang, M. T. Goodrich, E. F. Grove, R. Tamas-sia, D. E. Vengroff, and J. S. Vitter. </author> <title> External-memory graph algorithms. </title> <booktitle> In Proc. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 139-149, </pages> <year> 1995. </year>
Reference-contexts: and Vitter [2] considered sorting and permutation related problems in the two-level I/O model and proved that external sorting requires fi (n log m n) I/Os. 1 I/O-efficient algorithms were later developed for several other problem domains, including computational geometry [1, 3, 6, 18], string problems [5] and graph theory <ref> [3, 12, 37, 25] </ref>. See the mentioned papers for more complete references; a recent survey is also included in [4]. In the database literature a lot of attention has also been given to I/O-efficient computation, but with more emphasis on practical performance on "real-life" data.
Reference: [13] <author> D. Comer. </author> <title> The ubiquitous B-tree. </title> <journal> ACM Computing Surveys, </journal> <volume> 11(2) </volume> <pages> 121-137, </pages> <year> 1979. </year>
Reference-contexts: In external memory the latter motivation plays an even bigger role because of fundamental computational limitations. A simple illustration of this is the one-dimensional range searching problem. The obvious data structure for this problem is the B-tree <ref> [7, 13] </ref>. A B-tree on N elements uses optimal O (n) space, can be built in O (n log B n) I/Os, and can be used to answer a range query in O (log B n + t) I/Os. It is easy to realize that the query bound is optimal.
Reference: [14] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1990. </year>
Reference-contexts: We implemented a simplified version of the interval tree similar to that described in <ref> [14] </ref> but used a randomized skip list [32] as the underlying structure instead of a balanced tree structure. Finally, we chose to use a horizontal sweep line instead of a vertical one in order to have the two algorithms sweep in the same direction.
Reference: [15] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections, part I & II. </title> <journal> Int. J. Computer Mathematics, </journal> <volume> 13 </volume> <pages> 209-229, </pages> <year> 1983. </year>
Reference-contexts: Another important external-decomposable problem which has received a lot of attention in the computational geometry literature is the d-dimensional rectangle intersection problem, that is, the problem of determining all intersecting pairs among a set of axis-parallel hyperrectangles in d-dimensional space <ref> [15, 17, 16, 35, 9] </ref>. <p> A simple plane sweep internal memory algorithm can be easily derived from the algorithms for the rectangle intersection problem <ref> [9, 17, 15, 16, 21, 35] </ref>. This well-known O (N log 2 N + K)-time algorithm sweeps the plane with a vertical line, while maintaining and querying two interval trees [15]. <p> A simple plane sweep internal memory algorithm can be easily derived from the algorithms for the rectangle intersection problem [9, 17, 15, 16, 21, 35]. This well-known O (N log 2 N + K)-time algorithm sweeps the plane with a vertical line, while maintaining and querying two interval trees <ref> [15] </ref>. After the initial sorting step the algorithm can be viewed as a red-blue version of the batched dynamic interval intersection problem.
Reference: [16] <author> H. Edelsbrunner and H. A. Maurer. </author> <title> On the intersection of orthogonal objects. </title> <journal> Information Processing Letters, </journal> <year> 1981. </year>
Reference-contexts: Another important external-decomposable problem which has received a lot of attention in the computational geometry literature is the d-dimensional rectangle intersection problem, that is, the problem of determining all intersecting pairs among a set of axis-parallel hyperrectangles in d-dimensional space <ref> [15, 17, 16, 35, 9] </ref>. <p> A simple plane sweep internal memory algorithm can be easily derived from the algorithms for the rectangle intersection problem <ref> [9, 17, 15, 16, 21, 35] </ref>. This well-known O (N log 2 N + K)-time algorithm sweeps the plane with a vertical line, while maintaining and querying two interval trees [15].
Reference: [17] <author> H. Edelsbrunner and M. Overmars. </author> <title> Batched dynamic solutions to decomposable searching problems. </title> <journal> Journal of Algorithms, </journal> <volume> 6 </volume> <pages> 515-542, </pages> <year> 1985. </year>
Reference-contexts: We assume that all I/O-bounds are at least linear. The problems we will be interested in are all what is called decomposable <ref> [8, 17, 29] </ref>. Here we define an external memory version of this property called external-decomposable. Definition 1 Let P be a searching problem and let P (x; V ) denote the answer to P with respect to a set of objects V and a query object x. <p> Another important external-decomposable problem which has received a lot of attention in the computational geometry literature is the d-dimensional rectangle intersection problem, that is, the problem of determining all intersecting pairs among a set of axis-parallel hyperrectangles in d-dimensional space <ref> [15, 17, 16, 35, 9] </ref>. <p> Recently, Arge et al. [6] considered a large number of problems involving line segments in the plane. In the internal memory setting, batched dynamic problems were considered by Edelsbrunner and Over-mars <ref> [17] </ref>. They were motivated by the fact that for a number of problems dynamic data structures were not 1 All optimality claims in this paper are in the comparison I/O-model, where comparisons are the only allowed operations in internal memory. known. <p> A simple amortization argument completes the proof. 3 Batched dynamic problems In this section we develop a general technique for solving a batched dynamic version of a colorable problem in an I/O-efficient manner. Our approach is inspired by an approach used by Edelsbrunner and Overmars <ref> [17] </ref>. <p> When a query q is performed at time j, it should be performed relative to the set of objects present at that time, that is, relative to all objects whose existence interval contains j. The basic idea in <ref> [17] </ref> is to use a segment tree [9, 31] to find these objects. Here we use the same basic idea, but the use of an external segment tree [3] complicates things considerably. <p> In a node where q lies in slab i , we define the relevant objects to be objects corresponding to existence intervals that completely span i . Each object present at time i will be relevant exactly once on the search path. In the internal memory solution <ref> [17] </ref> where the segment tree is binary, all objects in a node are relevant for all queries passing the node. This is not the case in the external memory setting, which is one reason why the problem is more challenging to solve in external than in internal memory. <p> space can be improved to O (S (N; K)) by noting that if we solve the batched static problem for a level of nodes before going on to build the next level, there is no need to store more than one level of the segment tree at any time (in <ref> [17] </ref> this idea is called streaming). 3.1 Simple applications to one and two dimensional problems Theorem 1 together with Lemma 1 immediately give us efficient solutions for one-dimensional batched dynamic range searching and interval intersection. <p> All the above external-decomposable problems are of a type where the solution to P (x; A [ B) is just the concatenation of P (x; A) and P (x; B). One problem where this in not the case is the batched static version of the external-decomposable immediate obstacle problem <ref> [17, 28] </ref>, where we are given a set of N points and vertical line segments in the plane, and for each point p we should compute the first segment hit by a horizontal 1. Sort the list A of the N + K actions by time. 2. <p> A simple plane sweep internal memory algorithm can be easily derived from the algorithms for the rectangle intersection problem <ref> [9, 17, 15, 16, 21, 35] </ref>. This well-known O (N log 2 N + K)-time algorithm sweeps the plane with a vertical line, while maintaining and querying two interval trees [15].
Reference: [18] <author> M. T. Goodrich, J.-J. Tsay, D. E. Vengroff, and J. S. Vitter. </author> <title> External-memory computational geometry. </title> <booktitle> In Proc. IEEE Symp. on Foundations of Comp. Sci., </booktitle> <pages> pages 714-723, </pages> <year> 1993. </year>
Reference-contexts: Aggarwal and Vitter [2] considered sorting and permutation related problems in the two-level I/O model and proved that external sorting requires fi (n log m n) I/Os. 1 I/O-efficient algorithms were later developed for several other problem domains, including computational geometry <ref> [1, 3, 6, 18] </ref>, string problems [5] and graph theory [3, 12, 37, 25]. See the mentioned papers for more complete references; a recent survey is also included in [4]. <p> Special attention has been given to the development of I/O-efficient spatial join algorithms [10, 20, 21, 24, 26, 27, 30]. A number of I/O-efficient algorithms have been developed for decomposable problems and most of them can be formulated as batched static or dynamic searching problems. Goodrich et al. <ref> [18] </ref> presented a technique called distribution sweeping and used it to develop I/O-efficient algorithms for a number of two-dimensional problems, including the batched range searching problem, the orthogonal line segment intersection problem, and the rectangle intersection problem. <p> Recently, some research has also been done on the practical merits of the algorithms. Chiang [11] implemented the orthogonal line segment intersection algorithm developed in <ref> [18] </ref> using distribution sweeping and showed that it outperforms internal memory solutions even on moderately sized instances. Vengroff [38, 39] designed TPIE (Transparent Parallel I/O programming Environment), a set of C++ functions and templated classes that allow for a simple and efficient implementation of two-level external-memory algorithms. <p> In Section 3 we describe our technique and use it to obtain algorithms for some of the two-dimensional problems also considered in <ref> [3, 18] </ref>. Our algorithms have the same O (n log m n + t) optimal performance as the previously developed algorithms, but in some sense our technique provides a general framework for the solution of the problems. <p> Another is that a single query cannot be answered I/O-efficiently, and therefore we perform all the queries simultaneously (normally referred to as batched filtering <ref> [18] </ref>) and take advantage of the fact that when we do so the problem we need to solve in each node is a batched static "colored" version of P. <p> The batched static version of the immediate obstacle problem can be solved in O ((n + k) log m (n + k)) I/Os and O (n + k) space. It should be noted that similar I/O and space bounds have been, or can easily be, obtained using distribution sweeping <ref> [18] </ref>. <p> It should be noted that this is not a new theoretical result, as previous solutions for the batched range searching problem and the orthogonal line segment intersection problem <ref> [3, 18] </ref> can be combined to obtain an optimal algorithms for the problem. However, our technique suggests a new practical algorithm that solves the problem in one go. <p> However, our technique suggests a new practical algorithm that solves the problem in one go. If we imagine building the segment tree structure level by level from the top, and solving the batched static problem on each level, the algorithm can be viewed as a distribution sweeping <ref> [18] </ref> algorithm, that divides the plane into m slabs, performs a vertical sweep over the slabs to locate intersections, and then recursively solves the problem in each slab. As mentioned, the red-blue rectangle intersection problem has been extensively studied in the database literature.
Reference: [19] <author> G. Graefe. </author> <title> Query evaluation techniques for large databases. </title> <journal> ACM Computing Surveys, </journal> <year> 1993. </year>
Reference-contexts: The problem is a key component in VLSI design rule checking [31], and in databases it is a component in the fundamental join operator in relational <ref> [19] </ref>, temporal [36], spatial [33, 34], and constraint [22] models. 1.2 Previous related results As mentioned, considerable attention has recently been given to the development of provably I/O-efficient algorithms.
Reference: [20] <author> O. Gunther. </author> <title> Efficient computation of spatial joins. </title> <booktitle> In Proc. IEEE International Conference on Data Engineering, </booktitle> <pages> pages 50-60, </pages> <year> 1993. </year>
Reference-contexts: In the database literature a lot of attention has also been given to I/O-efficient computation, but with more emphasis on practical performance on "real-life" data. Special attention has been given to the development of I/O-efficient spatial join algorithms <ref> [10, 20, 21, 24, 26, 27, 30] </ref>. A number of I/O-efficient algorithms have been developed for decomposable problems and most of them can be formulated as batched static or dynamic searching problems. <p> The problem has been extensively studied in the database literature as one of the two subprob-lems of spatial join, which is a core operation in spatial database systems such as geographic information sys-tems <ref> [10, 20, 27, 26, 24, 30] </ref>. A simple plane sweep internal memory algorithm can be easily derived from the algorithms for the rectangle intersection problem [9, 17, 15, 16, 21, 35]. <p> As mentioned, the red-blue rectangle intersection problem has been extensively studied in the database literature. The proposed algorithms can be roughly classified into two groups: those that use an indexing structure (typically an R-tree variant) built on the two rectangle sets <ref> [10, 20] </ref> and those that do not [27, 30, 24]. There has been a trend towards analyzing algorithms that do not rely on an index.
Reference: [21] <author> R. H. Guting and W. Schilling. </author> <title> A practical divide-and-conquer algorithm for the rectangle intersection problem. </title> <journal> Information Science, </journal> <volume> 42 </volume> <pages> 95-112, </pages> <year> 1987. </year>
Reference-contexts: In the database literature a lot of attention has also been given to I/O-efficient computation, but with more emphasis on practical performance on "real-life" data. Special attention has been given to the development of I/O-efficient spatial join algorithms <ref> [10, 20, 21, 24, 26, 27, 30] </ref>. A number of I/O-efficient algorithms have been developed for decomposable problems and most of them can be formulated as batched static or dynamic searching problems. <p> A simple plane sweep internal memory algorithm can be easily derived from the algorithms for the rectangle intersection problem <ref> [9, 17, 15, 16, 21, 35] </ref>. This well-known O (N log 2 N + K)-time algorithm sweeps the plane with a vertical line, while maintaining and querying two interval trees [15].
Reference: [22] <author> P. C. Kanellakis, G. Kuper, and P. Revesz. </author> <title> Constraint query languages. </title> <booktitle> In Proc. ACM Symp. Principles of Database Systems, </booktitle> <pages> pages 299-313, </pages> <year> 1990. </year>
Reference-contexts: The problem is a key component in VLSI design rule checking [31], and in databases it is a component in the fundamental join operator in relational [19], temporal [36], spatial [33, 34], and constraint <ref> [22] </ref> models. 1.2 Previous related results As mentioned, considerable attention has recently been given to the development of provably I/O-efficient algorithms.
Reference: [23] <author> C. M. Kenyon and J. S. Vitter. </author> <title> Maximum queue size and hashing with lazy deletion. </title> <journal> Algorithmica, </journal> <volume> 6 </volume> <pages> 597-619, </pages> <year> 1991. </year>
Reference-contexts: It can be shown that the expected number of intersections between red and blue rectangles in such a set is approximately N=4, while the expected average overlap and expected maximum overlap are approximately p N =4 <ref> [23] </ref>. Details will appear in the full paper.
Reference: [24] <author> N. Koudas and K. C. Sevcik. </author> <title> Size separation spatial join. </title> <booktitle> In Proc. SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pages 324-335, </pages> <year> 1997. </year>
Reference-contexts: In the database literature a lot of attention has also been given to I/O-efficient computation, but with more emphasis on practical performance on "real-life" data. Special attention has been given to the development of I/O-efficient spatial join algorithms <ref> [10, 20, 21, 24, 26, 27, 30] </ref>. A number of I/O-efficient algorithms have been developed for decomposable problems and most of them can be formulated as batched static or dynamic searching problems. <p> The problem has been extensively studied in the database literature as one of the two subprob-lems of spatial join, which is a core operation in spatial database systems such as geographic information sys-tems <ref> [10, 20, 27, 26, 24, 30] </ref>. A simple plane sweep internal memory algorithm can be easily derived from the algorithms for the rectangle intersection problem [9, 17, 15, 16, 21, 35]. <p> As mentioned, the red-blue rectangle intersection problem has been extensively studied in the database literature. The proposed algorithms can be roughly classified into two groups: those that use an indexing structure (typically an R-tree variant) built on the two rectangle sets [10, 20] and those that do not <ref> [27, 30, 24] </ref>. There has been a trend towards analyzing algorithms that do not rely on an index. <p> Other algorithms try to avoid too much duplication by using sophisticated partition methods but they are still vulnerable to skewed data <ref> [27, 24] </ref>.
Reference: [25] <author> V. Kumar and E. Schwabe. </author> <title> Improved algorithms and data structures for solving graph problems in external memory. </title> <booktitle> In Proc. IEEE Symp. on Parallel and Distributed Processing, </booktitle> <year> 1996. </year>
Reference-contexts: and Vitter [2] considered sorting and permutation related problems in the two-level I/O model and proved that external sorting requires fi (n log m n) I/Os. 1 I/O-efficient algorithms were later developed for several other problem domains, including computational geometry [1, 3, 6, 18], string problems [5] and graph theory <ref> [3, 12, 37, 25] </ref>. See the mentioned papers for more complete references; a recent survey is also included in [4]. In the database literature a lot of attention has also been given to I/O-efficient computation, but with more emphasis on practical performance on "real-life" data.
Reference: [26] <author> M.-L. Lo and C. V. Ravishankar. </author> <title> Spatial joins using seeded trees. </title> <booktitle> In Proc. SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pages 209-220, </pages> <year> 1994. </year>
Reference-contexts: In the database literature a lot of attention has also been given to I/O-efficient computation, but with more emphasis on practical performance on "real-life" data. Special attention has been given to the development of I/O-efficient spatial join algorithms <ref> [10, 20, 21, 24, 26, 27, 30] </ref>. A number of I/O-efficient algorithms have been developed for decomposable problems and most of them can be formulated as batched static or dynamic searching problems. <p> The problem has been extensively studied in the database literature as one of the two subprob-lems of spatial join, which is a core operation in spatial database systems such as geographic information sys-tems <ref> [10, 20, 27, 26, 24, 30] </ref>. A simple plane sweep internal memory algorithm can be easily derived from the algorithms for the rectangle intersection problem [9, 17, 15, 16, 21, 35].
Reference: [27] <author> M.-L. Lo and C. V. Ravishankar. </author> <title> Spatial hash-joins. </title> <booktitle> In Proc. SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pages 247-258, </pages> <year> 1996. </year>
Reference-contexts: In the database literature a lot of attention has also been given to I/O-efficient computation, but with more emphasis on practical performance on "real-life" data. Special attention has been given to the development of I/O-efficient spatial join algorithms <ref> [10, 20, 21, 24, 26, 27, 30] </ref>. A number of I/O-efficient algorithms have been developed for decomposable problems and most of them can be formulated as batched static or dynamic searching problems. <p> The problem has been extensively studied in the database literature as one of the two subprob-lems of spatial join, which is a core operation in spatial database systems such as geographic information sys-tems <ref> [10, 20, 27, 26, 24, 30] </ref>. A simple plane sweep internal memory algorithm can be easily derived from the algorithms for the rectangle intersection problem [9, 17, 15, 16, 21, 35]. <p> As mentioned, the red-blue rectangle intersection problem has been extensively studied in the database literature. The proposed algorithms can be roughly classified into two groups: those that use an indexing structure (typically an R-tree variant) built on the two rectangle sets [10, 20] and those that do not <ref> [27, 30, 24] </ref>. There has been a trend towards analyzing algorithms that do not rely on an index. <p> Other algorithms try to avoid too much duplication by using sophisticated partition methods but they are still vulnerable to skewed data <ref> [27, 24] </ref>.
Reference: [28] <author> E. </author> <title> McCreight. </title> <journal> &lt;problem 81-8&gt;. Journal of Algorithms, </journal> <volume> 2:314, </volume> <year> 1981. </year>
Reference-contexts: All the above external-decomposable problems are of a type where the solution to P (x; A [ B) is just the concatenation of P (x; A) and P (x; B). One problem where this in not the case is the batched static version of the external-decomposable immediate obstacle problem <ref> [17, 28] </ref>, where we are given a set of N points and vertical line segments in the plane, and for each point p we should compute the first segment hit by a horizontal 1. Sort the list A of the N + K actions by time. 2.
Reference: [29] <author> M. H. Overmars. </author> <title> The Design of Dynamic Data Structures. </title> <publisher> Springer-Verlag, LNCS 156, </publisher> <year> 1983. </year>
Reference-contexts: We assume that all I/O-bounds are at least linear. The problems we will be interested in are all what is called decomposable <ref> [8, 17, 29] </ref>. Here we define an external memory version of this property called external-decomposable. Definition 1 Let P be a searching problem and let P (x; V ) denote the answer to P with respect to a set of objects V and a query object x.
Reference: [30] <author> J. M. Patel and D. J. DeWitt. </author> <title> Partition based spatial-merge join. </title> <booktitle> In Proc. SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pages 259-270, </pages> <year> 1996. </year>
Reference-contexts: In the database literature a lot of attention has also been given to I/O-efficient computation, but with more emphasis on practical performance on "real-life" data. Special attention has been given to the development of I/O-efficient spatial join algorithms <ref> [10, 20, 21, 24, 26, 27, 30] </ref>. A number of I/O-efficient algorithms have been developed for decomposable problems and most of them can be formulated as batched static or dynamic searching problems. <p> The problem has been extensively studied in the database literature as one of the two subprob-lems of spatial join, which is a core operation in spatial database systems such as geographic information sys-tems <ref> [10, 20, 27, 26, 24, 30] </ref>. A simple plane sweep internal memory algorithm can be easily derived from the algorithms for the rectangle intersection problem [9, 17, 15, 16, 21, 35]. <p> As mentioned, the red-blue rectangle intersection problem has been extensively studied in the database literature. The proposed algorithms can be roughly classified into two groups: those that use an indexing structure (typically an R-tree variant) built on the two rectangle sets [10, 20] and those that do not <ref> [27, 30, 24] </ref>. There has been a trend towards analyzing algorithms that do not rely on an index. <p> There has been a trend towards analyzing algorithms that do not rely on an index. For example, the PBSM (Partition Based Spatial-Merge) algorithm by Patel and DeWitt <ref> [30] </ref> has been shown to outperform those based on an R-tree index when the cost of building the index is counted.
Reference: [31] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: One prominent example of the problems we consider is the rectangle intersection problem, which is a key component in VLSI design rule checking <ref> [31] </ref> and in the extremely important database operation spatial join [34]. <p> The problem is a key component in VLSI design rule checking <ref> [31] </ref>, and in databases it is a component in the fundamental join operator in relational [19], temporal [36], spatial [33, 34], and constraint [22] models. 1.2 Previous related results As mentioned, considerable attention has recently been given to the development of provably I/O-efficient algorithms. <p> The first problem is a batched problem by definition, and the latter two can easily be transformed to one-dimensional batched dynamic problems using the plane sweep paradigm <ref> [31] </ref>. Arge [3] considered the three problems, and developed I/O-efficient algorithms by looking at them as batched dynamic one-dimensional problems and developing I/O-efficient data structures for such problems. His so-called buffer trees are only efficient in a batched setting and cannot be used to answer single queries efficiently. <p> When a query q is performed at time j, it should be performed relative to the set of objects present at that time, that is, relative to all objects whose existence interval contains j. The basic idea in [17] is to use a segment tree <ref> [9, 31] </ref> to find these objects. Here we use the same basic idea, but the use of an external segment tree [3] complicates things considerably. The base structure of an external segment tree is a perfectly balanced tree with branching factor p over the N + K action times.
Reference: [32] <author> W. Pugh. </author> <title> Skip lists: a probabilistic alternative to balanced trees. </title> <journal> Commun. ACM, </journal> <volume> 35 </volume> <pages> 668-676, </pages> <year> 1990. </year>
Reference-contexts: We implemented a simplified version of the interval tree similar to that described in [14] but used a randomized skip list <ref> [32] </ref> as the underlying structure instead of a balanced tree structure. Finally, we chose to use a horizontal sweep line instead of a vertical one in order to have the two algorithms sweep in the same direction.
Reference: [33] <author> H. Samet. </author> <title> Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. </title> <publisher> Addi-son Wesley, </publisher> <address> MA, </address> <year> 1989. </year>
Reference-contexts: The problem is a key component in VLSI design rule checking [31], and in databases it is a component in the fundamental join operator in relational [19], temporal [36], spatial <ref> [33, 34] </ref>, and constraint [22] models. 1.2 Previous related results As mentioned, considerable attention has recently been given to the development of provably I/O-efficient algorithms.
Reference: [34] <author> H. Samet. </author> <title> The Design and Analyses of Spatial Data Structures. </title> <publisher> Addison Wesley, </publisher> <address> MA, </address> <year> 1989. </year>
Reference-contexts: One prominent example of the problems we consider is the rectangle intersection problem, which is a key component in VLSI design rule checking [31] and in the extremely important database operation spatial join <ref> [34] </ref>. <p> The problem is a key component in VLSI design rule checking [31], and in databases it is a component in the fundamental join operator in relational [19], temporal [36], spatial <ref> [33, 34] </ref>, and constraint [22] models. 1.2 Previous related results As mentioned, considerable attention has recently been given to the development of provably I/O-efficient algorithms.
Reference: [35] <author> H. W. Six and D. Wood. </author> <title> Counting and reporting intersections of d-ranges. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 31 </volume> <pages> 181-187, </pages> <year> 1982. </year>
Reference-contexts: Another important external-decomposable problem which has received a lot of attention in the computational geometry literature is the d-dimensional rectangle intersection problem, that is, the problem of determining all intersecting pairs among a set of axis-parallel hyperrectangles in d-dimensional space <ref> [15, 17, 16, 35, 9] </ref>. <p> A simple plane sweep internal memory algorithm can be easily derived from the algorithms for the rectangle intersection problem <ref> [9, 17, 15, 16, 21, 35] </ref>. This well-known O (N log 2 N + K)-time algorithm sweeps the plane with a vertical line, while maintaining and querying two interval trees [15].
Reference: [36] <author> A. U. Tanzel, J. Clifford, S. Gadia, S. Jajodia, A. Segev, and R. Snodgrass. </author> <title> Temporal Databases: Theory, Design and Implementation. </title> <publisher> The Benjamin/Cummings Publishing Company Inc., </publisher> <year> 1993. </year>
Reference-contexts: The problem is a key component in VLSI design rule checking [31], and in databases it is a component in the fundamental join operator in relational [19], temporal <ref> [36] </ref>, spatial [33, 34], and constraint [22] models. 1.2 Previous related results As mentioned, considerable attention has recently been given to the development of provably I/O-efficient algorithms.
Reference: [37] <author> J. D. Ullman and M. Yannakakis. </author> <title> The input/output complexity of transitive closure. </title> <journal> Annals of Mathematics and Artificial Intellegence, </journal> <volume> 3 </volume> <pages> 331-360, </pages> <year> 1991. </year>
Reference-contexts: and Vitter [2] considered sorting and permutation related problems in the two-level I/O model and proved that external sorting requires fi (n log m n) I/Os. 1 I/O-efficient algorithms were later developed for several other problem domains, including computational geometry [1, 3, 6, 18], string problems [5] and graph theory <ref> [3, 12, 37, 25] </ref>. See the mentioned papers for more complete references; a recent survey is also included in [4]. In the database literature a lot of attention has also been given to I/O-efficient computation, but with more emphasis on practical performance on "real-life" data.
Reference: [38] <author> D. E. Vengroff. </author> <title> A transparent parallel I/O environment. </title> <booktitle> In Proc. DAGS Symposium on Parallel Computation, </booktitle> <year> 1994. </year>
Reference-contexts: Recently, some research has also been done on the practical merits of the algorithms. Chiang [11] implemented the orthogonal line segment intersection algorithm developed in [18] using distribution sweeping and showed that it outperforms internal memory solutions even on moderately sized instances. Vengroff <ref> [38, 39] </ref> designed TPIE (Transparent Parallel I/O programming Environment), a set of C++ functions and templated classes that allow for a simple and efficient implementation of two-level external-memory algorithms. <p> We based both of our implementations on the TPIE system <ref> [38, 39] </ref>. As mentioned, TPIE is a collection of templated functions and classes, and the basic data structure in TPIE is a stream, representing a list of objects of the same type. The system contains I/O-efficient implementations of algorithms for scanning, merging, distributing, and sorting streams.
Reference: [39] <author> D. E. Vengroff. </author> <title> TPIE User Manual and Reference. </title> <institution> Duke University, </institution> <year> 1995. </year> <note> Available via WWW at http://www.cs.duke.edu/TPIE. </note>
Reference-contexts: Recently, some research has also been done on the practical merits of the algorithms. Chiang [11] implemented the orthogonal line segment intersection algorithm developed in [18] using distribution sweeping and showed that it outperforms internal memory solutions even on moderately sized instances. Vengroff <ref> [38, 39] </ref> designed TPIE (Transparent Parallel I/O programming Environment), a set of C++ functions and templated classes that allow for a simple and efficient implementation of two-level external-memory algorithms. <p> We based both of our implementations on the TPIE system <ref> [38, 39] </ref>. As mentioned, TPIE is a collection of templated functions and classes, and the basic data structure in TPIE is a stream, representing a list of objects of the same type. The system contains I/O-efficient implementations of algorithms for scanning, merging, distributing, and sorting streams.
Reference: [40] <author> D. E. Vengroff and J. S. Vitter. </author> <title> I/O-efficient scientific computation using TPIE. </title> <booktitle> In Proceedings of the Goddard Conference on Mass Storage Systems and Technologies, NASA Conference Publication 3340, </booktitle> <volume> Volume II, </volume> <pages> pages 553-570, </pages> <year> 1996. </year>
Reference-contexts: Vengroff [38, 39] designed TPIE (Transparent Parallel I/O programming Environment), a set of C++ functions and templated classes that allow for a simple and efficient implementation of two-level external-memory algorithms. Efficient TPIE implementations for a variety of sorting and scientific computing applications are given in <ref> [40] </ref>. 1.3 The results in this paper The main result in this paper is a technique for designing I/O-efficient and space-efficient batched dynamic algorithms for external-decomposable problems.
References-found: 40

