URL: http://www.cse.ucsc.edu/~timone/Vela/iccad97.ps
Refering-URL: http://www.cse.ucsc.edu/~timone/Vela/publish.html
Root-URL: http://www.cse.ucsc.edu
Title: Delay Bounded Buffered Tree Construction for Timing Driven  
Author: Floorplanning 
Keyword: Elmore delay, total wire length, timing constraints, buffer insertion, DBB-tree, MST-tree, SPT-tree, floorplanning.  
Date: April 11, 1997  
Abstract: As devices and lines shrink into the deep submicron range, the propagation delay of signals can be effectively improved by repowering the signals using intermediate buffers placed within the routing trees. Almost no existing timing driven floorplan-ning and placement approaches consider the option of buffer insertion. As such, they may exclude solutions, particularly early in the design process, with smaller overall area and better routability. In this paper, we propose a new methodology in which buffered trees are used to estimate wire delay during floorplanning and placement. Instead of treating delay as one of the objectives, as done by the majority of previous work, we formulate the problem in terms of Delay Bounded Buffered Trees (DBB-tree). The DBB formulation is as follows: Given a net and delay bounds on critical sinks, construct a tree with intermediate buffers inserted to minimize both the total wiring length and the number of buffers while satisfying the given delay bounds. Based on the Elmore delay model, we propose an efficient algorithm to construct a DBB spanning tree for use during floorplanning and placement. Experimental results show that the algorithm is very effective. Using buffer insertion at the floorplanning and placement stage yields significantly better solutions in terms of both chip area and total wire length. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Cong, L. He, C.-K. Koh, and P. H. Madden, </author> <title> Integration, the VLSI Journal 21 (1996) 1-94. </title> <publisher> Elsevier Science B.V., </publisher> <year> 1996. </year>
Reference-contexts: for general floorplanning are given in Section 4, followed by conclusions in Section 5. 2 Related Works and Overview of DBB-tree Algorithm 2.1 Elmore Delay Model As VLSI design reaches deep submicron, interconnect delay models have evolved from the simplistic lumped RC model to the sophisticated high-order moment-matching delay model <ref> [1] </ref>. The Elmore delay model [2] provides a simple closed-form expression with greatly improved accuracy for delay compared to the lumped RC model. Elmore is the most commonly used delay model in recent works of interconnect design. <p> In addition, total wire capacitance contributes a significant factor to the switching power. The reduction of wire length reduces circuit area and improves routability, also reduces power consumption, which are important factors for manufacturing cost and fabrication yield <ref> [1] </ref>. In this paper, instead of minimizing the source to sink delays, we will present an algorithm that constructs buffered spanning trees to minimize the total wire length subject to timing constraints.
Reference: [2] <author> W. C. </author> <title> Elmore, "The transient response of damped linear networks with particular regard to wide-band amplifiers," </title> <journal> J. Appl. Phys., </journal> <volume> vol. 19, </volume> <pages> pp. 55-63, </pages> <year> 1948. </year>
Reference-contexts: The Elmore delay model <ref> [2] </ref> provides a simple closed-form expression with greatly improved accuracy for delay compared to the lumped RC model. Elmore is the most commonly used delay model in recent works of interconnect design.
Reference: [3] <author> J. P. Cohoon and L. J. Randall, </author> <title> "Critical net routing," </title> <booktitle> in Proc. IEEE Intl. Conf. on Computer Design, </booktitle> <pages> pp. 174-177, </pages> <year> 1991. </year>
Reference-contexts: The early work of Cohoon Randall <ref> [3] </ref> and Cong et al. [4] observed the existence of conflicting min-cost and min-radius (the longest source-to-sink path length of the tree) objectives in performance-driven routing [5]. 2.3 Buffered Tree Construction 3 A number of algorithms have been proposed to make the trade-offs between the total wiring length and the radius
Reference: [4] <author> J. Cong, A. B. Kahng, G. Robins, M. Sarrafzadeh, and C. K. Wong, </author> <title> "Performance-Driven global routing for cell based IC's," </title> <booktitle> in Proc. IEEE Intl. Conf. Computer Design, </booktitle> <address> (Cambridege, MA), </address> <pages> pp. 170-173, </pages> <month> October </month> <year> 1991. </year> <note> 18 REFERENCES </note>
Reference-contexts: The early work of Cohoon Randall [3] and Cong et al. <ref> [4] </ref> observed the existence of conflicting min-cost and min-radius (the longest source-to-sink path length of the tree) objectives in performance-driven routing [5]. 2.3 Buffered Tree Construction 3 A number of algorithms have been proposed to make the trade-offs between the total wiring length and the radius of the Steiner or spanning
Reference: [5] <author> A. B. Kahng and G. Robins, </author> <title> "A new class of iterative steiner tree heuristics with good performance," </title> <journal> IEEE Trans. on Computer-Aided Design, </journal> <volume> vol. 11, </volume> <pages> pp. 893-902, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The early work of Cohoon Randall [3] and Cong et al. [4] observed the existence of conflicting min-cost and min-radius (the longest source-to-sink path length of the tree) objectives in performance-driven routing <ref> [5] </ref>. 2.3 Buffered Tree Construction 3 A number of algorithms have been proposed to make the trade-offs between the total wiring length and the radius of the Steiner or spanning tree [6, 7, 8, 9].
Reference: [6] <author> C. J. Alpert, T. C. Hu, J. H. Huang, and A. B. Kahng, </author> <title> "A direct combination of the prim and dijkstra constructions for improved performance-driven global routing," </title> <booktitle> in Proc. of IEEE Intl. Symp. on Circuits and Systems, </booktitle> <pages> pp. 1869-1872, </pages> <year> 1993. </year>
Reference-contexts: the existence of conflicting min-cost and min-radius (the longest source-to-sink path length of the tree) objectives in performance-driven routing [5]. 2.3 Buffered Tree Construction 3 A number of algorithms have been proposed to make the trade-offs between the total wiring length and the radius of the Steiner or spanning tree <ref> [6, 7, 8, 9] </ref>. Cong et al. proposed the "Bounded Radius, Bounded Cost" (BRBC) spanning tree algorithm which uses the shallow-light approach.
Reference: [7] <author> J. Cong, K. Shing Leung, and D. Zhou, </author> <title> "Performance-Driven interconnect design based on distributed RC delay model," </title> <booktitle> in Proc. 30th ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 606-611, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: the existence of conflicting min-cost and min-radius (the longest source-to-sink path length of the tree) objectives in performance-driven routing [5]. 2.3 Buffered Tree Construction 3 A number of algorithms have been proposed to make the trade-offs between the total wiring length and the radius of the Steiner or spanning tree <ref> [6, 7, 8, 9] </ref>. Cong et al. proposed the "Bounded Radius, Bounded Cost" (BRBC) spanning tree algorithm which uses the shallow-light approach.
Reference: [8] <author> A. Lim and S. Wing Cheng, </author> <title> "Performance oriented rectilinear steiner trees," </title> <booktitle> in Proc. of 30th Design Automation Conf., </booktitle> <pages> pp. 171-176, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: the existence of conflicting min-cost and min-radius (the longest source-to-sink path length of the tree) objectives in performance-driven routing [5]. 2.3 Buffered Tree Construction 3 A number of algorithms have been proposed to make the trade-offs between the total wiring length and the radius of the Steiner or spanning tree <ref> [6, 7, 8, 9] </ref>. Cong et al. proposed the "Bounded Radius, Bounded Cost" (BRBC) spanning tree algorithm which uses the shallow-light approach.
Reference: [9] <author> J. M. Ho, D. J. Lee, C. H. Chang, and C. K. Wong, </author> <title> "Bounded-diameter spanning tree and related problems," </title> <booktitle> in Proc. ACM Symp. on Computational Geometry, </booktitle> <pages> pp. 276-282, </pages> <year> 1989. </year>
Reference-contexts: the existence of conflicting min-cost and min-radius (the longest source-to-sink path length of the tree) objectives in performance-driven routing [5]. 2.3 Buffered Tree Construction 3 A number of algorithms have been proposed to make the trade-offs between the total wiring length and the radius of the Steiner or spanning tree <ref> [6, 7, 8, 9] </ref>. Cong et al. proposed the "Bounded Radius, Bounded Cost" (BRBC) spanning tree algorithm which uses the shallow-light approach.
Reference: [10] <author> C. J. Alpert, T. C. Hu, J. H. Huang, A. B. Kahng, and D. Karger, </author> <title> "Prim-Dijkstra tradeoffs for improved performance-Driven routing tree design," </title> <journal> IEEE Trans. on CAD of Integrated Circuits and Systems, </journal> <volume> vol. 14, </volume> <pages> pp. 890-896, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: BRBC constructs a routing tree with total wire length no greater than (1 + 2=*) times that of a minimum spanning tree and radius no greater than (1 + *) times that of a shortest path tree where * 0. Alpert et al. <ref> [10] </ref> proposed AHHK trees as a direct trade-off between Prim's MST algorithm and Dijkstra's shortest path tree algorithm. They used a parameter 0 c 1 to adjust the preference between tree length and path length. For deep submicron design, path length is no longer an accurate estimate of path delay.
Reference: [11] <author> K. D. Boese, A. B. Kahng, B. A. McCoy, and G. Robins, </author> <title> "Rectilinear steiner trees with minimum elmore delay," </title> <booktitle> in Proc. 31st ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 381-387, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: For deep submicron design, path length is no longer an accurate estimate of path delay. Several attempts have been made to directly optimize Elmore delay taking into account different loading capacitances of the sinks. With exponential timing complexity, the branch and the bound algorithms proposed by Boese et al. <ref> [11, 12] </ref> provide the optimal and near-optimal solutions that minimize the delay from the source to an identified critical sink or a set of critical sinks of Steiner tree. For a set of critical sinks, it minimizes a linear combination of the sink delays.
Reference: [12] <author> K. D. Boese, A. B. Kahng, and G. Robins, </author> <title> "High-Performance routing trees with identified critical sinks," </title> <booktitle> in Proc. 30th ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 182-187, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: For deep submicron design, path length is no longer an accurate estimate of path delay. Several attempts have been made to directly optimize Elmore delay taking into account different loading capacitances of the sinks. With exponential timing complexity, the branch and the bound algorithms proposed by Boese et al. <ref> [11, 12] </ref> provide the optimal and near-optimal solutions that minimize the delay from the source to an identified critical sink or a set of critical sinks of Steiner tree. For a set of critical sinks, it minimizes a linear combination of the sink delays.
Reference: [13] <author> X. Hong, T. Xue, E. S. Kuh, C. K. Cheng, and J. Huang, </author> <title> "Performance-Driven steiner tree algorithms for global routing," </title> <booktitle> in Proc. 30th ACM/IEEE Design Automation Conf., </booktitle> <address> (Baltimore, MD), </address> <pages> pp. 177-181, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: For a set of critical sinks, it minimizes a linear combination of the sink delays. However it is very difficult to choose the proper weights, or the criticality, for this linear combination. Hong et al. <ref> [13] </ref> proposed a modified Dreyfus-Wagner Steiner tree algorithm for minimizing the maximal source-to-sink delay, The maximal source-to-sink delay is not necessarily interesting when the corresponding sink is off the critical path. Also, there may be more than one critical sink in the same net associated with multiple critical paths.
Reference: [14] <author> S. Prasitjutrakul and W. J. Kubitz, </author> <title> "A timing-Driven global router for custom chip design," </title> <booktitle> in IEEE Intl. Conf. on Computer Aided Design, </booktitle> <pages> pp. 48-51, </pages> <year> 1990. </year>
Reference-contexts: Also, there may be more than one critical sink in the same net associated with multiple critical paths. Prasitjutrakul and Kubitz <ref> [14] </ref> proposed an algorithm for maximizing the minimal delay slack, where the delay slack is defined as the difference between the real delay and the given delay bound at a sink. 2.3 Buffered Tree Construction Intermediate buffer insertion creates another degree of freedom for interconnect optimization.
Reference: [15] <author> K. J. Singh and A. Sangiovanni-Vincentelli, </author> <title> "A heuristic algorithm for the fanout problem," </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 357-360, </pages> <year> 1990. </year>
Reference-contexts: Early works on fanout optimization problem focused on the construction of buffered trees during logic synthesis <ref> [15, 16, 17] </ref> without taking into account the wiring effect. Recently, layout driven fanout optimization have been proposed [18, 19]. For a given Steiner tree, a polynomial time dynamic programming algorithm was proposed in [20] for the delay-optimal buffer insertion problem.
Reference: [16] <author> H. J. Touati, C. W. Moon, R. K. Brayton, and A. Wang, </author> <title> "Performance oriented technology mapping," </title> <booktitle> in Proc. 6th MIT VLSI Conf., </booktitle> <pages> pp. 79-97, </pages> <year> 1990. </year>
Reference-contexts: Early works on fanout optimization problem focused on the construction of buffered trees during logic synthesis <ref> [15, 16, 17] </ref> without taking into account the wiring effect. Recently, layout driven fanout optimization have been proposed [18, 19]. For a given Steiner tree, a polynomial time dynamic programming algorithm was proposed in [20] for the delay-optimal buffer insertion problem.
Reference: [17] <author> C. L. Berman, J. L. Carter, and K. F. Day, </author> <title> "The fanout problem: From theory to practice," </title> <booktitle> in Proc. 1989 Decennial Caltech Conf., </booktitle> <pages> pp. 69-99, </pages> <year> 1989. </year>
Reference-contexts: Early works on fanout optimization problem focused on the construction of buffered trees during logic synthesis <ref> [15, 16, 17] </ref> without taking into account the wiring effect. Recently, layout driven fanout optimization have been proposed [18, 19]. For a given Steiner tree, a polynomial time dynamic programming algorithm was proposed in [20] for the delay-optimal buffer insertion problem.
Reference: [18] <author> L. N. Kannan, P. R. Suaris, and H. G. Fang, </author> <title> "A methodology and algorithms for post-Placement delay optimization," </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 327-332, </pages> <year> 1994. </year> <note> REFERENCES 19 </note>
Reference-contexts: Early works on fanout optimization problem focused on the construction of buffered trees during logic synthesis [15, 16, 17] without taking into account the wiring effect. Recently, layout driven fanout optimization have been proposed <ref> [18, 19] </ref>. For a given Steiner tree, a polynomial time dynamic programming algorithm was proposed in [20] for the delay-optimal buffer insertion problem.
Reference: [19] <author> H. Vaishnav and M. Pedram, </author> <title> "Routability-Driven fanout optimization," </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 230-235, </pages> <year> 1993. </year>
Reference-contexts: Early works on fanout optimization problem focused on the construction of buffered trees during logic synthesis [15, 16, 17] without taking into account the wiring effect. Recently, layout driven fanout optimization have been proposed <ref> [18, 19] </ref>. For a given Steiner tree, a polynomial time dynamic programming algorithm was proposed in [20] for the delay-optimal buffer insertion problem.
Reference: [20] <author> L. P. P. P. van Ginneken, </author> <title> "Buffer placement in distributed RC-tree networks for minimal elmore delay," </title> <booktitle> in Proc. International Symposium on Circuits and Systems, </booktitle> <pages> pp. 865-868, </pages> <year> 1990. </year>
Reference-contexts: Recently, layout driven fanout optimization have been proposed [18, 19]. For a given Steiner tree, a polynomial time dynamic programming algorithm was proposed in <ref> [20] </ref> for the delay-optimal buffer insertion problem. Using dynamic programming, Lillis et al. [21] integrated wire sizing and power minimization with the tree construction under a more accurate delay model taking signal slew into account.
Reference: [21] <author> J. Lillis, C. Kuan Cheng, and T. Ting Y. Lin, </author> <title> "Optimal and efficient buffer insertion and wire sizing," </title> <booktitle> in Proc. IEEE 1995 Custom Integrated Circuits Conf., </booktitle> <pages> pp. 259-262, </pages> <year> 1995. </year>
Reference-contexts: Recently, layout driven fanout optimization have been proposed [18, 19]. For a given Steiner tree, a polynomial time dynamic programming algorithm was proposed in [20] for the delay-optimal buffer insertion problem. Using dynamic programming, Lillis et al. <ref> [21] </ref> integrated wire sizing and power minimization with the tree construction under a more accurate delay model taking signal slew into account.
Reference: [22] <author> T. Okamoto and J. Cong, </author> <title> "Interconnect layout optimization by simultaneous steiner tree construction and buffer insertion," </title> <booktitle> in Proc. 5th ACM/SIGDA Physical Design Workshop, </booktitle> <address> (Reston, Virginia), </address> <pages> pp. 1-6, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Using dynamic programming, Lillis et al. [21] integrated wire sizing and power minimization with the tree construction under a more accurate delay model taking signal slew into account. Inspired by the same dynamic programming algorithm, Okamoto and Cong <ref> [22] </ref> proposed a simultaneous Steiner tree construction and 4 2 RELATED WORKS AND OVERVIEW OF DBB-TREE ALGORITHM buffer insertion algorithm. Later the work was extended to include wire sizing [23]. <p> Inspired by the same dynamic programming algorithm, Okamoto and Cong [22] proposed a simultaneous Steiner tree construction and 4 2 RELATED WORKS AND OVERVIEW OF DBB-TREE ALGORITHM buffer insertion algorithm. Later the work was extended to include wire sizing [23]. In the formulation of the problem <ref> [22, 23] </ref>, the main objective is to maximize the required arrival time at the root of the tree, which is defined as the minimum among the differences between the arrival time of the sinks and the delay from the root to the sinks. <p> The parameters used in the experiments are based on <ref> [22] </ref>, which are summarized in Table 1. The average results of the DBB spanning tree construction are shown in Table 2. The delay bounds of critical sinks for each net size are randomly chosen from the interval titled "Delay Bounds".
Reference: [23] <author> T. Okamoto and J. Cong, </author> <title> "Buffered steiner tree construction with wire sizing for interconnect layout optimization," </title> <booktitle> in Proc. 1996 IEEE/ACM International Conf. on Computer Aided Design, </booktitle> <address> (San Jose, CA), </address> <pages> pp. 44-49, </pages> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: Inspired by the same dynamic programming algorithm, Okamoto and Cong [22] proposed a simultaneous Steiner tree construction and 4 2 RELATED WORKS AND OVERVIEW OF DBB-TREE ALGORITHM buffer insertion algorithm. Later the work was extended to include wire sizing <ref> [23] </ref>. In the formulation of the problem [22, 23], the main objective is to maximize the required arrival time at the root of the tree, which is defined as the minimum among the differences between the arrival time of the sinks and the delay from the root to the sinks. <p> Inspired by the same dynamic programming algorithm, Okamoto and Cong [22] proposed a simultaneous Steiner tree construction and 4 2 RELATED WORKS AND OVERVIEW OF DBB-TREE ALGORITHM buffer insertion algorithm. Later the work was extended to include wire sizing [23]. In the formulation of the problem <ref> [22, 23] </ref>, the main objective is to maximize the required arrival time at the root of the tree, which is defined as the minimum among the differences between the arrival time of the sinks and the delay from the root to the sinks.
Reference: [24] <author> S. Dhar and M. A. Franklin, </author> <title> "Optimum buffer circuits for driving long uniform lines," </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> vol. 26, </volume> <pages> pp. 32-40, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: To achieve optimal delay, multiple buffers may be necessary for a single edge. An early work of S. Dhar and M. Franklin <ref> [24] </ref> developed the optimal solution for the size, number and position of buffers driving a uniform line that minimizes the delay of the line. The work further considered the area occupied by the buffers as a constraint. Recently C. Alpert and A.
Reference: [25] <author> C. Alpert and A. Devgan, </author> <title> "Wire segmenting for improved buffer insertion," </title> <booktitle> in to appear in Proc. of 34th Design Automation Conf., </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Dhar and M. Franklin [24] developed the optimal solution for the size, number and position of buffers driving a uniform line that minimizes the delay of the line. The work further considered the area occupied by the buffers as a constraint. Recently C. Alpert and A. Devgan <ref> [25] </ref> calculated the optimal number of equally spaced buffers on a uniform wire to minimize the Elmore delay of the wire. 2.4 Delay Minimized vs. <p> Before presenting the detailed DBB-tree algorithm, we first state some theoretical results developed by Alpert and Devgan <ref> [25] </ref> which will be used to 6 3 DESCRIPTION OF DBB-TREE ALGORITHM placed on the wire in such way that the wire delay is minimized: the first buffer is ff away from source s 0 , the distance between two adjacent buffers equals to ffi and the last buffer is fi
Reference: [26] <author> Q. Zhu, </author> <title> Chip and Package Co-Synthesis of Clock Networks. </title> <type> PhD thesis, </type> <institution> Univ. of California, </institution> <address> Santa Cruz, Santa Cruz, CA, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: In this paper, instead of minimizing the source to sink delays, we will present an algorithm that constructs buffered spanning trees to minimize the total wire length subject to timing constraints. Zhu <ref> [26] </ref> proposed the "Delay Bounded Minimum Steiner Tree" (DBMST) algorithm to construct a low cost Steiner tree with bounded delay at critical sinks.
Reference: [27] <author> S. Koakutsu, M. Kang, and W. W.-M. Dai, </author> <title> "Genetic simulated annealing and application to non-slicing floorplan design," </title> <booktitle> in Proc. 5th ACM/SIGDA Physical Design Workshop, </booktitle> <address> (Virginia, USA), </address> <pages> pp. 134-141, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: In the second part of the experiments, we apply DBB-tree to evaluate the wiring delay of floorplanning solutions considered by the Genetic Simulated Annealing method <ref> [27] </ref>. Table 5 presents four examples which includes 10, 25, 50 and 100 rectangular blocks, respectively. The sizes (widths and heights) and aspect ratios of blocks are randomly chosen within a nominal range. Netlists are also randomly generated for the four examples.
References-found: 27

