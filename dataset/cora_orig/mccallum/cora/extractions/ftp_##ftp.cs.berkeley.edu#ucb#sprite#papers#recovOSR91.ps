URL: ftp://ftp.cs.berkeley.edu/ucb/sprite/papers/recovOSR91.ps
Refering-URL: http://www.cs.berkeley.edu/projects/sprite/sprite.papers.html
Root-URL: 
Email: mgbaker@sprite.Berkeley.EDU ouster@sprite.Berkeley.EDU  
Phone: 415-642-9669  
Title: Availability in the Sprite Distributed File System  
Author: Mary Baker John Ousterhout 
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division Electrical Engineering and Computer Sciences University of California  
Abstract: In the Sprite environment, tolerating faults means recovering from them quickly. Our position is that performance and availability are the desired features of the typical locally-distributed office/engineering environment, and that very fast server recovery is the most cost-effective way of providing such availability. Mechanisms used for reliability can be inappropriate in systems with the primary goal of performance, and some availability-oriented methods using replicated hardware or processes cost too much for these systems. In contrast, availability via fast recovery need not slow down a system, and our experience in Sprite shows that in some cases the same techniques that provide high performance also provide fast recovery. In our first attempt to reduce file server recovery times to less than 90 seconds, we take advantage of the distributed state already present in our file system, and a high-performance log-structured file system currently under implementation. As a long-term goal, we hope to reduce recovery to 10 seconds or less. This paper appeared in Operating Systems Review, April 1991. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Roger Haskin, Yoni Malachi, Wayne Sawdon, and Gregory Chan. </author> <title> Recovery Management in QuickSilver. </title> <journal> ACM Transactions of Computer Systems, </journal> <volume> vol. 6, No. 1, </volume> <month> Feb. </month> <year> 1988. </year> <pages> pp. 82-108. </pages>
Reference-contexts: The Costs of Fault Tolerance Systems with high reliability and non-stop availability incur costs of performance, complexity, and resources. Transactions trade performance and some complexity for reliability. Replicated hardware, data and processes trade resources for reliability and availability. Transactions are necessary in a system such as QuickSilver <ref> [1] </ref> that provides failure atomicity for distributed activities, but transactions slow performance when compared to a typical office/engineering system such as Sprite [2] that does not provide this reliability.
Reference: [2] <author> John K. Ousterhout, Andrew R. Cherenson, Frederick Douglis, Michael N. Nelson, and Brent B. Welch. </author> <title> The Sprite Network Operating System. </title> <journal> Computer, </journal> <volume> vol. 21, no. 2, </volume> <month> February </month> <year> 1988. </year> <pages> pp. 23-36. </pages>
Reference-contexts: Replicated hardware, data and processes trade resources for reliability and availability. Transactions are necessary in a system such as QuickSilver [1] that provides failure atomicity for distributed activities, but transactions slow performance when compared to a typical office/engineering system such as Sprite <ref> [2] </ref> that does not provide this reliability.
Reference: [3] <author> John Ousterhout. </author> <title> Why Aren't Operating Systems Getting Faster As Fast As Hardware? Proceedings of the Summer 1990 USENIX Technical Conference, </title> <month> June </month> <year> 1990. </year> <pages> pp. 247-256. </pages>
Reference-contexts: For example, QuickSilver uses transactions as a unified recovery mechanism for both volatile and recoverable resources, and has a low-overhead commit protocol, but its basic operations are slower than Sprite's <ref> [3] </ref> due to the extra reliability guarantees QuickSilver's operations must provide to the software above [4].
Reference: [4] <author> Roger Haskin. </author> <type> Personal Communication. </type> <month> September 30, </month> <year> 1990. </year>
Reference-contexts: For example, QuickSilver uses transactions as a unified recovery mechanism for both volatile and recoverable resources, and has a low-overhead commit protocol, but its basic operations are slower than Sprite's [3] due to the extra reliability guarantees QuickSilver's operations must provide to the software above <ref> [4] </ref>. As a general rule, the less a system does, - 2 - the faster it can do it, and this combined with a desire for simplicity is why the reliability provided by transactions has not yet become a popular part of the office/engineering environment.
Reference: [5] <author> Ozalp Babaoglu. </author> <title> Fault-Tolerant Computing Based on Mach. Operating Systems Review, </title> <publisher> ACM Press, </publisher> <month> January </month> <year> 1990. </year> <pages> pp. 27-39. </pages>
Reference-contexts: Many systems provide availability with replication of processes or files, but this too is not appropriate in a system such as Sprite. <ref> [5] </ref> shows how process pairs can provide fault-tolerance of applications in an office/engineering environment (Mach), but in Sprite this would not address recovery of the kernel and file system, since for performance reasons, the file system runs in the kernel and not as a user process.
Reference: [6] <author> Kenneth Birman and Keith Marzullo. </author> <title> The ISIS Distributed Programming Toolkit and The META Distributed Operating System. Sun Technology, </title> <booktitle> 2, 1 (Summer 1989). </booktitle> <pages> pp. 90-104. </pages>
Reference-contexts: The META Operating System <ref> [6] </ref> is also oriented towards availability and performance, and it uses file replication for availability. But the authors of META state that UNIX caching does not hide all of the performance cost of replication. 3.
Reference: [7] <author> R. Sandberg, et. al. </author> <title> Design and Implementation of the Sun Network Filesystem. </title> <booktitle> Proceedings of the Summer 1985 USENIX Technical Conference, </booktitle> <month> June </month> <year> 1985. </year> <pages> pp. 119-130. </pages>
Reference-contexts: Both of these solutions, the distributed state used for client-server recovery and the log-structured file system, are used for overall performance, and it is convenient that they can also be used for fast recovery. 3.1. Distributed State Recovery In contrast to NFS <ref> [7] </ref>, Sprite uses state on the file server in order to increase performance, but it must recover this state during a file server reboot [8]. For example, some of the state on the file servers is used to keep track of which workstations are caching which files.
Reference: [8] <author> Brent B. </author> <title> Welch Naming, State Management, and User-Level Extensions in the Sprite Distributed File System. </title> <type> Technical Report Number: </type> <institution> UCB/CSD 90/567, University of California at Berkeley. </institution> <type> PhD Thesis, </type> <month> May </month> <year> 1990. </year>
Reference-contexts: Distributed State Recovery In contrast to NFS [7], Sprite uses state on the file server in order to increase performance, but it must recover this state during a file server reboot <ref> [8] </ref>. For example, some of the state on the file servers is used to keep track of which workstations are caching which files.
Reference: [9] <author> M. Stonebraker, R. Katz, D. Patterson, and J. Ousterhout. </author> <booktitle> The Design of XPRS. Proceedings of the 1988 VLDB, </booktitle> <address> Los Angeles, CA, </address> <year> 1988. </year>
Reference-contexts: If the file server's disk is undamaged and can be accessed from another machine, the clients can push the appropriate file system state to the new machine, recovering with it instead. Sprite is also a part of the XPRS <ref> [9] </ref> project that is building a reliable array of inexpensive disks [10] to address recovery from disk failures.
Reference: [10] <author> D. Patterson, et. al. </author> <title> RAID: Redundant Arrays of Inexpensive Disks. </title> <booktitle> Proceedings of the 1988 ACM-SIGMOD Conference on Management of Data, </booktitle> <address> Chicago, Illinois, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Sprite is also a part of the XPRS [9] project that is building a reliable array of inexpensive disks <ref> [10] </ref> to address recovery from disk failures. The problem in distributed state recovery is to make sure its performance scales well as the size of the system scales, and we are currently testing several improvements to reduce the client recovery time.
Reference: [11] <author> Mendel Rosenblum and John K. Ousterhout. </author> <title> The LFS Storage Manager. </title> <booktitle> Proceedings of the Summer 1990 USENIX Technical Conference, </booktitle> <month> June </month> <year> 1990. </year> <pages> pp. 315-324. </pages>
Reference-contexts: With 6 disks totaling 2 Gigabytes on a Sun-4, checking them in parallel during reboot requires about 15 minutes, and this time increases as the size of the file system increases. A new file system, called LFS for log-structured file system <ref> [11] </ref>, should give us much faster recovery. LFS, currently implemented and being tested on Sprite, treats the file system as a segmented append-only log.
Reference: [12] <author> Andrew D. Birrell, Michael B. Jones, and Edward P. Wobber. </author> <title> A Simple and Efficient Implementation of a Small Database. </title> <booktitle> Proceedings of the Eleventh ACM Symposium on Operating Systems Principles, </booktitle> <year> 1987. </year> <pages> pp. 149-154. </pages>
Reference-contexts: There is a logging and recovery interface to LFS that allows the system to log arbitrary data, checkpoint it and recover it, using the raw performance of the file system. This method is similar to the logging/checkpointing method described in <ref> [12] </ref> for virtual-memory data bases, but can handle a higher rate of updates. The problem is that logging in LFS is asynchronous, and some updates could be lost if a failure such as a power-outage does not allow the data to be flushed to disk before the system crashes.
Reference: [13] <author> J. P. Banatre, M. Banatre, G. Muller. </author> <title> Architecture of Fault-Tolerant Multiprocessor Workstations. </title> <booktitle> Proceedings of the Second Workshop on Workstation Operating Systems, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> Sept. </month> <year> 1989. </year> <pages> pp. 20-24. </pages>
Reference-contexts: Using non-volatile memory to store the handle table or part of the recovery log is an attractive possibility, given recent improvements in price and performance of non-volatile memory. Some stable storage boards can offer performance only twice as slow as normal RAM, but with the advantages of write atomi-city <ref> [13] </ref>. We could access the entire handle table directly in non-volatile memory, or we could put the tail of the LFS log in non-volatile memory to avoid the cost of synchronous writes to disk for file system meta-data.
Reference: [14] <author> Michael Stonebraker. </author> <title> The Design of the Postgres Storage System. </title> <booktitle> Readings 13th International on Very Large Databases, </booktitle> <address> Brighton, England, </address> <year> 1987. </year>
Reference-contexts: The use of logging and a small amount of non-volatile memory to provide instant recovery is not new. This is how a database system such as Postgres <ref> [14] </ref> provides instant recovery. 4. The Disadvantages of Fast Recovery for Fault Tolerance Despite the performance and simplicity advantages of fast recovery in the Sprite system, this technique provides only a small amount of fault tolerance.
References-found: 14

