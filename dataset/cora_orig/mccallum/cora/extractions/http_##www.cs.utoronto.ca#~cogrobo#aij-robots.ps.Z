URL: http://www.cs.utoronto.ca/~cogrobo/aij-robots.ps.Z
Refering-URL: http://www.cs.utoronto.ca/~cogrobo/
Root-URL: 
Email: flin@cs.ust.hk  hector@ai.toronto.edu  
Title: What robots can do: Robot programs and effective achievability  
Author: Fangzhen Lin Hector Levesque 
Date: May 15, 1997  
Address: Hong Kong  Toronto, Canada M5S 3H5  
Affiliation: Department of Computer Science The Hong Kong University of Science and Technology Clear Water Bay,  Department of Computer Science University of Toronto  
Abstract: In this paper, we propose a definition of goal achievability: given a basic action theory describing an initial state of the world and some primitive actions available to a robot, including some actions which return binary sensing information, what goals can be achieved by the robot? The main technical result of the paper is a proof that a simple robot programming language is universal, in that any effectively achievable goal can be achieved by getting the robot to execute one of the robot programs. The significance of this result is at least two fold. First, it is in many ways similar to the equivalence theorem between Turing machines and recursive functions, but applied to robots whose actions are specified by an action theory. Secondly, it provides formal justifications for using the simple robot programming language as a foundation for our work on robotics. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Davis. </author> <title> Knowledge Preconditions for Plans. </title> <journal> Journal of Logic and Computation, </journal> <volume> vol. 4, no. 5, </volume> <pages> pp. 721-766, </pages> <month> Oct. </month> <year> 1994. </year> <month> 16 </month>
Reference-contexts: Knowing how Finally, the concept of achievability is very closely related to the concept of an agent knowing how (or being able to) achieve a goal or execute a plan, as discussed for example, in <ref> [1, 17, 18] </ref>. One difference between the two concepts concerns the 3 issue of effectiveness.
Reference: [2] <author> O. Etzioni, S. Hanks, D. Weld, D. Draper, N. Lesh, and M. Williamson. </author> <title> An approach to planning with incomplete information. </title> <booktitle> In Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference, </booktitle> <pages> pp. 115-125, </pages> <address> Cambridge, MA, 1992. </address> <publisher> Morgan Kaufmann Publishing. </publisher>
Reference-contexts: Planning As the five examples above illustrate, the idea of a goal being achievable by a robot is clearly related to the concept of planning and especially, given the sensing, conditional planning, as in <ref> [2, 9, 13, 16] </ref>. In all of the variants above, we ended up saying 2 that the treasure was obtainable precisely when we could formulate some sort of plan to obtain it.
Reference: [3] <author> C. Green. </author> <title> Theorem proving by resolution as a basis for question-answering systems. </title> <booktitle> In Machine Intelligence 4, </booktitle> <pages> pp. 183-205. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year>
Reference-contexts: to simulate an arbitrary context-sensitive action with a finite set of context free actions. 4 A robot program language In [8], the following question was considered: what should the output of a planning procedure be? In the absence of sensing, the answer is reasonably clear and dates back to Green <ref> [3] </ref>: a plan is a legally executable sequence of actions that results in a final situation where the goal condition holds.
Reference: [4] <author> F. Lin and R. Reiter. </author> <title> State constraints revisited. </title> <journal> In Journal of Logic and Computation, </journal> <volume> Vol. 4, No. 5, </volume> <pages> pp. 655-678, </pages> <year> 1994. </year>
Reference-contexts: The third axiom is second-order induction; it amounts to a domain closure axiom which says that every situation must be obtained by repeatedly applying do to S 0 . 3 The last two axioms define &lt; inductively. Following <ref> [4] </ref>, we call a theory of this form a basic action theory. 3 For a discussion of the use of induction in the situation calculus, see (Reiter [15]). 6 3 Effective achievability To define in its most general form what a robot armed with primitive actions a 1 , ...a n
Reference: [5] <author> F. Lin and R. Reiter. </author> <title> How to progress a database. </title> <journal> Artificial Intelligence, </journal> <note> 1997. To appear. </note>
Reference-contexts: Now an action theory is context free if, according to the theory, all actions are context free. Formally, following <ref> [5] </ref>, we call an action theory T context free if every successor state axiom in it has the following form: Poss (a; s) [F (~x; do (a; s)) fl + F (~x; a) _ (F (~x; s) ^ :fl where fl + F (~x; a) and fl F (~x; a) are
Reference: [6] <author> Y. Lesperance, H. Levesque, and F. Lin. </author> <title> Ability and knowing how in the situation calculus. </title> <note> In preparation, </note> <year> 1997. </year>
Reference-contexts: Moreover, it ought to be the case that the two notions coincide when the agent knows exactly what we do about the environment and the actions. The precise relation between the two concepts is subtle, however, and we will not explore it further here (see <ref> [6] </ref>). In sum, while the concept of goal achievability is clearly related to the areas of planning, computability, and agent ability, none of these can give us the answers we want, for example, in the five situations above. The rest of the paper is organized as follows. <p> Some of these assumptions, such as the binary nature of sensing, are easy to relax; others will require more effort. In concluding, we want to mention that we are working on relating this work to our other work on agent ability and knowing-how <ref> [6] </ref>. Another direction worth pursuing is investigating the finite automaton version of achievability, i.e. the power of robot programs without the special Turing machine actions.
Reference: [7] <author> H. J. Levesque, R. Reiter, Y. Lesperance, F. Lin, and R. Scherl. GOLOG: </author> <title> A logic programming language for dynamic domains. </title> <note> To appear in the Journal of Logic Programming, </note> <year> 1996. </year>
Reference-contexts: Secondly, it provides formal justifications for using the simple class of robot programs as a foundation for our work on robotics. For instance, [8] uses this class of robot programs as a basis for robot planning. We are also beginning work on compiling high-level GOLOG programs <ref> [7] </ref> into this class of robot programs. There are some limitations with our current model that are worth mentioning here. First of all, we have assumed that there are only a finite number of parameterless actions.
Reference: [8] <author> H. Levesque. </author> <title> What is planning in the presence of sensing? In Proc. </title> <booktitle> of AAAI-96, </booktitle> <address> Portland, OR, </address> <note> to appear, </note> <month> Aug. </month> <year> 1996. </year>
Reference-contexts: The main contribution of the paper is a precise technical framework where questions of goal achievability can be posed and answered. The main technical result is a proof of the universality of the simple robot programming language introduced in <ref> [8] </ref>: it will turn out that a goal is effectively achievable according to logical theory T iff there is a robot program that achieves it according to T . 1.1 A motivating example To make the problem more concrete, imagine that you are also given a solid steel box that contains <p> In Section 3, we define precisely what we mean by effective achievability (and related notions) as a function of a given basic action theory. In Section 4, we review the syntax and semantics of a simple robot programming language first proposed in <ref> [8] </ref> as a language for plans. In Section 5, we present some results, including the main technical result of the paper: the universality of the robot programming language. <p> actions that have nothing to do with sensors, this should be [SF (A; s) True]. * Successor state axioms, one for each fluent F , characterizing under what conditions F (~x; do (a; s)) holds as function of what holds in situation s: These take the place of 2 In <ref> [8] </ref>, the predicate SF was used to characterize what an agent knew in a situation in terms of a fluent K. In this paper, we will not be concerned with the knowledge of agents. 5 the so-called effect axioms, but also provide a solution to the frame problem [14]. <p> On the other hand, it also points out their expressive limitations. For example, this theorem implies that it is impossible to simulate an arbitrary context-sensitive action with a finite set of context free actions. 4 A robot program language In <ref> [8] </ref>, the following question was considered: what should the output of a planning procedure be? In the absence of sensing, the answer is reasonably clear and dates back to Green [3]: a plan is a legally executable sequence of actions that results in a final situation where the goal condition holds. <p> There are various ways to ensure this last requirement. The approach taken in <ref> [8] </ref> is to invent a simple language that contains branches and loops, but that does not mention any conditions involving fluents. The resulting programs are then trivial to execute since without such conditions, there is nothing for the robot executing the programs to know. <p> Proof: See Appendix B. 13 5.2 From effective controllers to robot programs Given an effective controller, there may not always be a robot program that simulates it. 6 The easiest way to remedy this is to add some special Turing machine actions as in <ref> [8] </ref>. Formally, we assume that in addition to the actions in A, we have 5 special actions, left, right, mark, erase, read mark, and two special fluents Marked, loc, characterized by the following axioms: 1. <p> Our main technical contribution is in showing that this notion of effective achievability coincides with a notion of achievability by a simple class of robot programs independently introduced in <ref> [8] </ref>. The significance of this result is at least two fold. First, it is in many ways similar to the equivalence theorem between Turing machines and recursive functions, but applied to robots whose actions are specified by an action theory. <p> Secondly, it provides formal justifications for using the simple class of robot programs as a foundation for our work on robotics. For instance, <ref> [8] </ref> uses this class of robot programs as a basis for robot planning. We are also beginning work on compiling high-level GOLOG programs [7] into this class of robot programs. There are some limitations with our current model that are worth mentioning here.
Reference: [9] <author> K. Krebsbach, D. Olawsky, and M. Gini. </author> <title> An empirical study of sensing and defaulting in planning. </title> <booktitle> In Proc. of 1st Conference on AI Planning Systems, </booktitle> <pages> pp. 136-144, </pages> <address> San Mateo CA, </address> <year> 1992. </year>
Reference-contexts: Planning As the five examples above illustrate, the idea of a goal being achievable by a robot is clearly related to the concept of planning and especially, given the sensing, conditional planning, as in <ref> [2, 9, 13, 16] </ref>. In all of the variants above, we ended up saying 2 that the treasure was obtainable precisely when we could formulate some sort of plan to obtain it.
Reference: [10] <author> Z. Manna and R. Waldinger. </author> <title> How to clear a block: A theory of plans. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 3 </volume> <pages> 343-377, </pages> <year> 1987. </year>
Reference-contexts: An obvious case is when a fixed sequence of actions is sufficient. But in some of the variants above, we needed to consider conditional and iterative plans, which suggests a structure more like that of a program <ref> [10] </ref>. Clearly these would not be programs in a traditional language like C or LISP. For one thing, the primitive statements of the program would have to involve the actions a i , rather than the usual variable assignment or read/write statements.
Reference: [11] <author> J. McCarthy and P. J. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <booktitle> In Machine Intelligence 4, </booktitle> <pages> pp. 463-502. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year>
Reference-contexts: of this research is to make the specification of goal achievability depend on a given action theory T describing the initial state of the world and the available actions, we need to describe the representation language we use to formulate the theories, which is a dialect of the situation calculus <ref> [11] </ref>. 4 The language of the situation calculus is many-sorted. Normally, there is a sort for sit-uations, a sort for actions, and a sort for objects like blocks and people that are elements in the domain of interest.
Reference: [12] <author> E. </author> <title> Mendelson An Introduction to Mathematical Logic. </title> <publisher> Van Rostrand Reinhold Company, </publisher> <address> New York, </address> <year> 1964. </year>
Reference-contexts: Computability A second concept related to achievability is that of effective computability <ref> [12] </ref>. As will become clear, we will end up defining achievable goals as those where what to do next to achieve them, given what is known about the actions and the initial state of the world, can be computed as a function of what the sensors tell the robot.
Reference: [13] <author> M. Peot and D. Smith. </author> <title> Conditional nonlinear planning. </title> <booktitle> In Proc. of 1st Conference on AI Planning Systems, </booktitle> <pages> pp. 189-197, </pages> <address> San Mateo CA, </address> <year> 1992. </year>
Reference-contexts: Planning As the five examples above illustrate, the idea of a goal being achievable by a robot is clearly related to the concept of planning and especially, given the sensing, conditional planning, as in <ref> [2, 9, 13, 16] </ref>. In all of the variants above, we ended up saying 2 that the treasure was obtainable precisely when we could formulate some sort of plan to obtain it.
Reference: [14] <author> R. Reiter. </author> <title> The frame problem in the situation calculus: A simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Vladimir Lifschitz, editor, </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation: Papers in Honor of John Mc-Carthy, </booktitle> <pages> pp. 359-380. </pages> <publisher> Academic Press, </publisher> <address> San Diego, CA, </address> <year> 1991. </year> <month> 17 </month>
Reference-contexts: In this paper, we will not be concerned with the knowledge of agents. 5 the so-called effect axioms, but also provide a solution to the frame problem <ref> [14] </ref>. <p> Under the following consistency condition <ref> [14] </ref>: j= (8a; ~x)::(fl + F (~x; s)); (2) the axiom (1) implies that for any action a, after the action is performed, F will be true (added) for tuples in f~x j fl + F (~x; a)g, false (deleted) for tuples in f~x j fl F (~x; a)g, and persist
Reference: [15] <author> R. Reiter. </author> <title> Proving properties of states in the situation calculus. </title> <journal> Artificial Intelligence, </journal> <volume> 64 </volume> <pages> 337-351, </pages> <year> 1993. </year>
Reference-contexts: Following [4], we call a theory of this form a basic action theory. 3 For a discussion of the use of induction in the situation calculus, see (Reiter <ref> [15] </ref>). 6 3 Effective achievability To define in its most general form what a robot armed with primitive actions a 1 , ...a n ; can achieve, it is useful to begin by looking at the problem from the point of view of a robot controller, for instance, an onboard computer.
Reference: [16] <author> M. Schoppers. </author> <title> Building plans to monitor and exploit open-loop and closed-loop dynamics. </title> <booktitle> In Proc. of 1st Conference on AI Planning Systems, </booktitle> <pages> pp. 204-213, </pages> <address> San Mateo CA, </address> <year> 1992. </year>
Reference-contexts: Planning As the five examples above illustrate, the idea of a goal being achievable by a robot is clearly related to the concept of planning and especially, given the sensing, conditional planning, as in <ref> [2, 9, 13, 16] </ref>. In all of the variants above, we ended up saying 2 that the treasure was obtainable precisely when we could formulate some sort of plan to obtain it.
Reference: [17] <author> S. Thomas. </author> <title> PLACA, An Agent Oriented Programming Language. </title> <type> Ph.D. Thesis. </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1993. </year>
Reference-contexts: Knowing how Finally, the concept of achievability is very closely related to the concept of an agent knowing how (or being able to) achieve a goal or execute a plan, as discussed for example, in <ref> [1, 17, 18] </ref>. One difference between the two concepts concerns the 3 issue of effectiveness.
Reference: [18] <author> W. van der Hoek, B. van Linder, and J.-J. Ch. Meyer. </author> <title> A logic of capabilities. </title> <editor> In A. Nerode and Y. Matiyasevitch editors, </editor> <booktitle> Proc. of LFCS-94, the 3rd International Symposium on the Logical Foundations of Computer Science, </booktitle> <pages> pp. 366-378, </pages> <publisher> Springer Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Knowing how Finally, the concept of achievability is very closely related to the concept of an agent knowing how (or being able to) achieve a goal or execute a plan, as discussed for example, in <ref> [1, 17, 18] </ref>. One difference between the two concepts concerns the 3 issue of effectiveness.
References-found: 18

