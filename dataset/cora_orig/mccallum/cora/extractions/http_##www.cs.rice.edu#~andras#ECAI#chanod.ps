URL: http://www.cs.rice.edu/~andras/ECAI/chanod.ps
Refering-URL: http://www.cs.rice.edu/~andras/ECAI/chanod.html
Root-URL: 
Email: Jean.Pierre.Chanod@xerox.fr Pasi.Tapanain@ling.Helsinki.fi  
Title: A Non-deterministic Tokeniser for Finite-State Parsing  
Author: Jean-Pierre Chanod Pasi Tapanainen 
Address: F-38240 Meylan P.O. Box 4 France Finland  
Affiliation: Rank Xerox Research Centre University of Helsinki Grenoble Laboratory Research Unit For Multilingual Language Technology 6 Chemin de Maupertuis Department of General Linguistics  
Abstract: This paper describes a non-deterministic tokeniser implemented and used for the development of a French finite-state grammar. The tokeniser includes a finite-state automaton for simple tokens and a lexical transducer that encodes a wide variety of multiword expressions, associated with multiple lexical descriptions when required. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Steven P. Abney, </author> <title> `Parsing by chunks', in Principled-Based Parsing, </title> <editor> eds., R. Berwick, S. Abney, and C. Tenny, </editor> <publisher> Kluwer Academic Publishers, </publisher> <address> Dordrecht, </address> <year> (1991). </year>
Reference-contexts: The tokens are not described in detail here. What kind of tokens are needed depends on the finite-state network based syntactic analyser for French which has been developed during the last few years [3, 4] 1 . For related work, see <ref> [1, 8, 10, 12] </ref>. 2 Non-deterministic tokenisation As the first step in the analysis, a tokeniser segments the input sentence into tokens. In many applications, it is assumed that at this level of processing there is no ambiguity. Karttu-nen [6] describes the compilation of unambiguous tokenisers from direct replacement expressions.
Reference: [2] <author> Jean-Pierre Chanod, </author> <title> `Finite-state composition of french verb morphology', </title> <type> Technical Report MLTT-005, </type> <institution> Rank Xerox Research Centre, Grenoble Laboratory, France, </institution> <year> (1994). </year>
Reference-contexts: Chanod and P. Tapanainen * MWs from the basic lexicon One component of the MW lexicon results from the extraction of MWs encoded in our basic French morphological analyser <ref> [7, 2] </ref>.
Reference: [3] <author> Jean-Pierre Chanod and Pasi Tapanainen, </author> <title> `A lexical interface for finite-state syntax', </title> <type> Technical Report MLTT-025, </type> <institution> Rank Xerox Research Centre, Grenoble Laboratory, France, </institution> <year> (1996). </year>
Reference-contexts: Tokenisation is not a totally independent process, but closely related to the morphological analysis. The tokens are not described in detail here. What kind of tokens are needed depends on the finite-state network based syntactic analyser for French which has been developed during the last few years <ref> [3, 4] </ref> 1 . For related work, see [1, 8, 10, 12]. 2 Non-deterministic tokenisation As the first step in the analysis, a tokeniser segments the input sentence into tokens. In many applications, it is assumed that at this level of processing there is no ambiguity.
Reference: [4] <author> Jean-Pierre Chanod and Pasi Tapanainen, </author> <title> `Rules and constraints in a finite-state grammar', </title> <type> Technical Report MLTT-024, </type> <institution> Rank Xerox Research Centre, Grenoble Laboratory, France, </institution> <year> (1996). </year>
Reference-contexts: Tokenisation is not a totally independent process, but closely related to the morphological analysis. The tokens are not described in detail here. What kind of tokens are needed depends on the finite-state network based syntactic analyser for French which has been developed during the last few years <ref> [3, 4] </ref> 1 . For related work, see [1, 8, 10, 12]. 2 Non-deterministic tokenisation As the first step in the analysis, a tokeniser segments the input sentence into tokens. In many applications, it is assumed that at this level of processing there is no ambiguity.
Reference: [5] <author> Gregory Grefenstette and Pasi Tapanainen, </author> <title> `What is a word, what is a sentence? problems of tokenization', </title> <booktitle> in The 3rd International Conference on Computational Lexicography, </booktitle> <pages> pp. 79-87, </pages> <address> Budapest, </address> <year> (1994). </year>
Reference-contexts: 1 Introduction Usually tokenisation has been seen as an independent process <ref> [5, 9] </ref> in natural language processing. In many parsing systems the tokenisation has had little attention and, especially when parsing English, tokens are often supposed to be sequences of letters between two blanks. In our approach the tokenisation is a firm part of the morphological analysis.
Reference: [6] <author> Lauri Karttunen, </author> <title> `Directed replacement', </title> <booktitle> in Proceedings of the 34th Annual Meeting of the Association for Computational Linguistics, </booktitle> <address> Santa Cruz, USA, </address> <year> (1996). </year>
Reference-contexts: For related work, see [1, 8, 10, 12]. 2 Non-deterministic tokenisation As the first step in the analysis, a tokeniser segments the input sentence into tokens. In many applications, it is assumed that at this level of processing there is no ambiguity. Karttu-nen <ref> [6] </ref> describes the compilation of unambiguous tokenisers from direct replacement expressions. Such tokenisers are now implemented for various languages. They consist of a single finite-state network that produces unique output.
Reference: [7] <author> Lauri Karttunen, Ron Kaplan, and Annie Zaenen, </author> <title> `Two-level morphology with composition', </title> <booktitle> In Proceedings of the Fourteenth International Conference on Computational Linguistics COLING-92, </booktitle> <volume> volume I, </volume> <pages> pp. 141-148, </pages> <address> Nantes, France, </address> <year> (1992). </year>
Reference-contexts: Chanod and P. Tapanainen * MWs from the basic lexicon One component of the MW lexicon results from the extraction of MWs encoded in our basic French morphological analyser <ref> [7, 2] </ref>.
Reference: [8] <author> Kimmo Koskenniemi, Pasi Tapanainen, and Atro Voutilai-nen, </author> <title> `Compiling and using finite-state syntactic rules', </title> <booktitle> In Proceedings of the Fourteenth International Conference on Computational Linguistics COLING-92, </booktitle> <volume> volume I, </volume> <pages> pp. 156-162, </pages> <address> Nantes, France, </address> <year> (1992). </year>
Reference-contexts: The tokens are not described in detail here. What kind of tokens are needed depends on the finite-state network based syntactic analyser for French which has been developed during the last few years [3, 4] 1 . For related work, see <ref> [1, 8, 10, 12] </ref>. 2 Non-deterministic tokenisation As the first step in the analysis, a tokeniser segments the input sentence into tokens. In many applications, it is assumed that at this level of processing there is no ambiguity. Karttu-nen [6] describes the compilation of unambiguous tokenisers from direct replacement expressions.
Reference: [9] <author> David D. Palmer and Marti A. Hearst, </author> <title> `Adaptive sentence boundary disambiguation', </title> <booktitle> in Proceedings of the 4th Conference on Applied Natural Language Processing, </booktitle> <pages> pp. 78-83, </pages> <address> Stuttgart, Germany, </address> <year> (1994). </year>
Reference-contexts: 1 Introduction Usually tokenisation has been seen as an independent process <ref> [5, 9] </ref> in natural language processing. In many parsing systems the tokenisation has had little attention and, especially when parsing English, tokens are often supposed to be sequences of letters between two blanks. In our approach the tokenisation is a firm part of the morphological analysis.
Reference: [10] <author> Emmanuel Roche, </author> <title> Analyse syntaxique transformationnelle du fran~cais par transducteurs et lexique-grammaire, </title> <type> Ph.D. dissertation, </type> <institution> Universite de Paris 7, </institution> <year> 1993. </year>
Reference-contexts: The tokens are not described in detail here. What kind of tokens are needed depends on the finite-state network based syntactic analyser for French which has been developed during the last few years [3, 4] 1 . For related work, see <ref> [1, 8, 10, 12] </ref>. 2 Non-deterministic tokenisation As the first step in the analysis, a tokeniser segments the input sentence into tokens. In many applications, it is assumed that at this level of processing there is no ambiguity. Karttu-nen [6] describes the compilation of unambiguous tokenisers from direct replacement expressions.
Reference: [11] <author> Frederique Segond and Pasi Tapanainen, </author> <title> `Using a finite-state based formalism to identify and generate multiword expressions', </title> <type> Technical Report MLTT-019, </type> <institution> Rank Xerox Research Centre, Grenoble Laboratory, France, </institution> <year> (1995). </year>
Reference-contexts: Such alternate readings are described using expressions <ref> [11, 13] </ref> defined for that purpose. These regular expressions extract words from the basic morphological analyser, and combine them as required. The complete lexical reading results from the concatenation of the contiguous extracted words, while the relevant word boundaries are inserted in-between.
Reference: [12] <editor> Max Silberztein, Dictionnaires electroniques et analyse au-tomatique de textes. Le systeme INTEX, </editor> <publisher> Masson, </publisher> <address> Paris, </address> <year> 1993. </year>
Reference-contexts: The tokens are not described in detail here. What kind of tokens are needed depends on the finite-state network based syntactic analyser for French which has been developed during the last few years [3, 4] 1 . For related work, see <ref> [1, 8, 10, 12] </ref>. 2 Non-deterministic tokenisation As the first step in the analysis, a tokeniser segments the input sentence into tokens. In many applications, it is assumed that at this level of processing there is no ambiguity. Karttu-nen [6] describes the compilation of unambiguous tokenisers from direct replacement expressions.
Reference: [13] <author> Pasi Tapanainen, </author> <title> `RXRC finite-state compiler', </title> <type> Technical Report MLTT-020, </type> <institution> Rank Xerox Research Centre, Grenoble Laboratory, France, </institution> <year> (1995). </year>
Reference-contexts: Such alternate readings are described using expressions <ref> [11, 13] </ref> defined for that purpose. These regular expressions extract words from the basic morphological analyser, and combine them as required. The complete lexical reading results from the concatenation of the contiguous extracted words, while the relevant word boundaries are inserted in-between.
References-found: 13

