URL: ftp://theory.lcs.mit.edu/pub/people/oded/roh.ps
Refering-URL: http://theory.lcs.mit.edu/~oded/complexity.html
Root-URL: 
Title: The Random Oracle Hypothesis is False  
Author: Richard Chang ; Benny Chor ; Oded Goldreich ; Juris Hartmanis Johan H-astad Desh Ranjan ; Pankaj Rohatgi 
Date: July 6, 1992  
Abstract: The Random Oracle Hypothesis, attributed to Bennett and Gill, essentially states that the relationships between complexity classes which hold for almost all rela-tivized worlds must also hold in the unrelativized case. Although this paper is not the first to provide a counterexample to the Random Oracle Hypothesis, it does provide a most compelling counterexample by showing that for almost all oracles A, IP A 6= PSPACE A . If the Random Oracle Hypothesis were true, it would contradict Shamir's result that IP = PSPACE. In fact, it is shown that for almost all oracles A, co-NP A 6 IP A . These results extend to the multi-prover proof systems of Ben-Or, Goldwasser, Kilian and Wigderson. In addition, this paper shows that the Random Oracle Hypothesis is sensitive to small changes in the definition. A class IPP, similar to IP, is defined. Surprisingly, the IPP = PSPACE result holds for all oracle worlds. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Babai. </author> <title> Trading group theory for randomness. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <pages> pages 421-429, </pages> <year> 1985. </year>
Reference-contexts: This paper reports results obtained independently by two sets of researchers. Preliminary versions of these works can be found in [10, 20]. 2 A Review of IP The class IP is the set of languages that have interactive proofs. IP was first defined as way to generalize NP <ref> [1, 17] </ref>. NP can be characterized as being precisely those languages for which one can present a polynomially long proof to certify that the input string is in the language. Moreover, the proof can be checked in polynomial time. <p> This leads us to a very fascinating problem: how can the verifier be convinced with high probability that there is a proof ? and how rapidly can this be done? This problem has been formulated and extensively studied in terms of interactive proofs <ref> [1, 16, 17] </ref>. Informally, an interactive proof consists of a Prover and a Verifier. The Prover is an all powerful Turing Machine (TM) and the Verifier is a TM which operates in time polynomial in the length of the input.
Reference: [2] <author> L. Babai, L. Fortnow, and C. Lund. </author> <title> Non-deterministic exponential time has two-prover interactive protocols. </title> <journal> Computational Complexity, </journal> <volume> 1(1) </volume> <pages> 3-40, </pages> <year> 1991. </year>
Reference-contexts: In fact, the computational power of interactive proofs was not fully appreciated until Lund, Fortnow, Karloff and Nisan [29] showed that IP actually contains the entire Polynomial Hierarchy. This result then led Shamir [32] to completely characterize IP by showing that IP = PSPACE: Then, Babai, Fortnow and Lund <ref> [2] </ref> characterized the computational power of multi-prover interactive proofs MIP = NEXP: In both cases, it is interesting to see that interactive proof systems provide alternative definitions of classic complexity classes. Thus, they fit very nicely with the overall classification of feasible computations.
Reference: [3] <author> T. Baker, J. Gill, and R. Solovay. </author> <title> Relativizations of the P =? NP question. </title> <journal> SIAM Journal on Computing, </journal> <volume> 4(4) </volume> <pages> 431-442, </pages> <month> December </month> <year> 1975. </year>
Reference-contexts: Almost all of the major results in recursive function theory also hold in relativized worlds. Quite the contrary happens in complexity theory. It was shown in 1975 <ref> [3] </ref> that there exist oracles A and B such that P A = NP A and P B 6= NP B : This was followed by an extensive investigation of the structure of complexity classes under relativization. <p> Oracle Hypothesis In this section we observe that the proof of IP = PSPACE does not relativize and show that for almost all oracles A the two relativized classes differ: IP A 6= PSPACE A : It is easily seen that IP PSPACE = PSPACE PSPACE and using standard methods <ref> [3] </ref> one can construct an A such that IP A 6= PSPACE A : Thus, the IP =? PSPACE problem has contradictory relativizations and the IP = PSPACE proof does not relativize. Similarly, we can see that the MIP =? NEXP problem has contradictory relativizations. <p> This probability is in turn equal to jR i j=jseg (n i )j, which by Lemma 3 is bounded by (2=3) i for all i. Hence, Prob A [ IP A = PSPACE A ] = 0: 2 Using standard techniques <ref> [3, 5, 12] </ref>, the proof of Theorem 1 can be modified to yield the following theorem. Theorem 4 For almost all oracles A, co-NP A 6 IP A . Proof: We will use a different candidate language, L 1 (A), for this proof.
Reference: [4] <author> M. Ben-Or, S. Goldwasser, J. Kilian, and A. Wigderson. </author> <title> Multi-prover interactive proofs: How to remove the intractability assumptions. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <pages> pages 113-131, </pages> <year> 1988. </year>
Reference-contexts: Hence, Prob A [ co-NP A IP A ] = 0: 2 These results easily extend to the multi-prover interactive proof systems of Ben-Or, Gold wasser, Kilian and Wigderson <ref> [4] </ref>. For the sake of brevity, we omit the proofs. Theorem 6 For almost all oracles A MIP A NEXP A . 3.2 : : : , but IPP = PSPACE A always. The IP = PSPACE and MIP = NEXP results provided natural examples against the Random Oracle Hypothesis.
Reference: [5] <author> C. Bennett and J. Gill. </author> <title> Relative to a random oracle A, P A 6= NP A 6= co-NP A with probability 1. </title> <journal> SIAM Journal on Computing, </journal> <volume> 10(1) </volume> <pages> 96-113, </pages> <month> February </month> <year> 1981. </year>
Reference-contexts: They showed that P A 6= NP A for almost all oracles. In addition, they showed that for almost all oracles A the following relationships hold <ref> [5] </ref>: P A 6= NP A 6= co-NP A SPACE A [log n] 6= P A PSPACE A 6= EXP A P A = RP A = BPP A : Figure omitted. 2 Many other interesting random oracle results followed. <p> This led Bennett and Gill to postulate the Random Oracle Hypothesis <ref> [5] </ref> which essentially states that structural relationships which hold in almost all oracle worlds also hold in the unrelativized case | i.e., the real world. <p> For n large enough, we can show that jC (n)j &lt; 2 3 jseg (n)j. By standard techniques in the literature <ref> [5, Lemma 1, pp.98-99] </ref>, this bound on the size of C (n) would be sufficient to prove the statement of the theorem. For the sake of completeness, we include a complete proof. Now, let N be large enough so that 2 N &gt; 18N c . <p> Hence, V fails to determine the membership of 1 n for at least 1 2 (1 6n c 2 n ) &gt; 1 of all fi 2 B (ff; n). We now apply the standard extension technique <ref> [5] </ref>. Lemma 3 Let n i = N c i and let R i be the collection of the finite sets fi 2 seg (n i ) such that for all r n i , V fi correctly determines whether 1 r is in L (fi). <p> This probability is in turn equal to jR i j=jseg (n i )j, which by Lemma 3 is bounded by (2=3) i for all i. Hence, Prob A [ IP A = PSPACE A ] = 0: 2 Using standard techniques <ref> [3, 5, 12] </ref>, the proof of Theorem 1 can be modified to yield the following theorem. Theorem 4 For almost all oracles A, co-NP A 6 IP A . Proof: We will use a different candidate language, L 1 (A), for this proof.
Reference: [6] <author> L. Berman and J. Hartmanis. </author> <title> On isomorphism and density of NP and other complete sets. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6 </volume> <pages> 305-322, </pages> <month> June </month> <year> 1977. </year>
Reference-contexts: The last result asserts that there exist non-isomorphic many-one complete sets for NP A for random oracle A. It was conjectured that all NP many-one complete sets are polynomial-time isomorphic <ref> [6] </ref>. Surveying the rich set of relativization results, we can make several observations. First, almost all questions about the relationship between the major complexity classes have contradictory relativizations. That is, there exist oracles which separate the classes and oracles which collapse them.
Reference: [7] <author> R. Boppana, J. H-astad, and S. Zachos. </author> <title> Does co-NP have short interactive proofs? Information Processing Letters, </title> <booktitle> 25(2) </booktitle> <pages> 127-132, </pages> <year> 1987. </year>
Reference-contexts: If the graphs are isomorphic, then the Prover has at best a 2 n chance of answering all n questions correctly. Thus, the Verifier cannot be fooled often. Therefore, GNI 2 IP. Note that GNI is an incomplete language in co-NP (assuming that PH is infinite <ref> [7] </ref>). So, the preceding discussion does not show that co-NP IP. For a while, it was believed that co-NP is not contained in IP, because there are oracle worlds where co-NP 6 IP [12].
Reference: [8] <author> J. Cai. </author> <title> With probability one, a random oracle separates PSPACE from the polynomial-time hierarchy. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <pages> pages 21-29, </pages> <year> 1986. </year>
Reference-contexts: For almost all oracles A <ref> [8, 9, 28] </ref>: * PH A PSPACE A . * The Boolean Hierarchy relative to A, BH A , is infinite. * The Berman-Hartmanis Conjecture fails relative to A. The last result asserts that there exist non-isomorphic many-one complete sets for NP A for random oracle A.
Reference: [9] <author> J. Cai. </author> <title> Probability one separation of the Boolean hierarchy. </title> <booktitle> In 4th Annual Symposium on Theoretical Aspects of Computer Science, volume 247 of Lecture Notes in Computer Science, </booktitle> <pages> pages 148-158. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: For almost all oracles A <ref> [8, 9, 28] </ref>: * PH A PSPACE A . * The Boolean Hierarchy relative to A, BH A , is infinite. * The Berman-Hartmanis Conjecture fails relative to A. The last result asserts that there exist non-isomorphic many-one complete sets for NP A for random oracle A.
Reference: [10] <author> B. Chor, O. Goldreich, and J. H-astad. </author> <title> The random oracle hypothesis is false. </title> <type> Technical Report 631, </type> <institution> Department of Computer Science, Technion, </institution> <year> 1990. </year>
Reference-contexts: We conclude that random oracle relativizations should not discourage attempts to prove the opposite in the real world. This paper reports results obtained independently by two sets of researchers. Preliminary versions of these works can be found in <ref> [10, 20] </ref>. 2 A Review of IP The class IP is the set of languages that have interactive proofs. IP was first defined as way to generalize NP [1, 17].
Reference: [11] <author> A. Condon. </author> <title> Computational Models of Games. An ACM Distinguished Dissertation. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: We rely on this observation in the proof of the following theorem. 5 The difference between the two definitions is that IPP uses private coins and PPSPACE uses public coins. However, the language classes can be shown to be identical using standard techniques <ref> [11] </ref>. 10 procedure CHECKCOMP (C 1 ; C 2 ; s) ; f This procedure tries to detect if M A can reach configuration C 2 from configuration C 1 in s steps. g begin if s = 1 then f This may involve querying the oracle. g if C 1
Reference: [12] <author> L. Fortnow and M. Sipser. </author> <title> Are there interactive protocols for co-NP languages? Information Processing Letters, </title> <booktitle> 28(5) </booktitle> <pages> 249-251, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Note that GNI is an incomplete language in co-NP (assuming that PH is infinite [7]). So, the preceding discussion does not show that co-NP IP. For a while, it was believed that co-NP is not contained in IP, because there are oracle worlds where co-NP 6 IP <ref> [12] </ref>. In fact, the computational power of interactive proofs was not fully appreciated until Lund, Fortnow, Karloff and Nisan [29] showed that IP actually contains the entire Polynomial Hierarchy. <p> Thus, they fit very nicely with the overall classification of feasible computations. Furthermore, both of these problems have contradictory relativiza-tions <ref> [12] </ref>. That is, there exist oracles A and B such that IP A = PSPACE A and IP B 6= PSPACE B ; and similarly for the multi-prover case. <p> This probability is in turn equal to jR i j=jseg (n i )j, which by Lemma 3 is bounded by (2=3) i for all i. Hence, Prob A [ IP A = PSPACE A ] = 0: 2 Using standard techniques <ref> [3, 5, 12] </ref>, the proof of Theorem 1 can be modified to yield the following theorem. Theorem 4 For almost all oracles A, co-NP A 6 IP A . Proof: We will use a different candidate language, L 1 (A), for this proof.
Reference: [13] <author> W. Gasarch. </author> <title> More on the random oracle hypothesis: What is true almost always is not necessarily so. </title> <type> Technical Report TR-1956, </type> <institution> Department of Computer Science, University of Maryland|College Park, </institution> <year> 1985. </year>
Reference-contexts: We continue by presenting 3 our main results, which combined with what is known on interactive proofs, yield a striking new counterexample against the Random Oracle Hypothesis. There have previously been several counterexamples in the literature and in unpublished reports <ref> [13, 19, 23, 27] </ref>. Some of these counterexamples use double relativization and classes which are not closed under polynomial time reductions. While the results in this paper are not the first, the authors believe that they are the most natural and compelling.
Reference: [14] <author> J. Gill. </author> <title> Computational complexity of probabilistic Turing machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(4) </volume> <pages> 675-695, </pages> <month> December </month> <year> 1977. </year>
Reference-contexts: PSPACE A IPP A : This proof is similar to the proof that NP PP <ref> [14] </ref> (see also [31]). Let L be a language in PSPACE A . Then there is a machine M A accepting L which runs in space p (n) and halts in exactly 2 q (n) steps for some polynomials p and q.
Reference: [15] <author> O. Goldreich, S. Micali, and A. Wigderson. </author> <title> Proofs that yield nothing but their validity or all languages in NP have zero-knowledge proof systems. </title> <journal> Journal of the ACM, </journal> <volume> 38(1) </volume> <pages> 691-729, </pages> <month> July </month> <year> 1991. </year> <month> 13 </month>
Reference-contexts: Consider GNI, the set of pairs of graphs that are not isomorphic. GNI is known to be in co-NP and it is believed not to be in NP. However, GNI does have an interactive proof <ref> [15] </ref>. The Verifier determines if two graphs G 1 and G 2 are non-isomorphic, using the following interactive proof: 1. The Verifier randomly selects G 1 or G 2 and a random permutation of the selected graph.
Reference: [16] <author> S. Goldwasser. </author> <title> Interactive proof systems. In Computational Complexity Theory, </title> <booktitle> vol-ume 38 of Proceedings of Symposia in Applied Mathematics, </booktitle> <pages> pages 108-128. </pages> <publisher> American Mathematical Society, </publisher> <year> 1989. </year>
Reference-contexts: This leads us to a very fascinating problem: how can the verifier be convinced with high probability that there is a proof ? and how rapidly can this be done? This problem has been formulated and extensively studied in terms of interactive proofs <ref> [1, 16, 17] </ref>. Informally, an interactive proof consists of a Prover and a Verifier. The Prover is an all powerful Turing Machine (TM) and the Verifier is a TM which operates in time polynomial in the length of the input.
Reference: [17] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The knowledge complexity of interactive proof systems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(1) </volume> <pages> 186-208, </pages> <year> 1989. </year>
Reference-contexts: This paper reports results obtained independently by two sets of researchers. Preliminary versions of these works can be found in [10, 20]. 2 A Review of IP The class IP is the set of languages that have interactive proofs. IP was first defined as way to generalize NP <ref> [1, 17] </ref>. NP can be characterized as being precisely those languages for which one can present a polynomially long proof to certify that the input string is in the language. Moreover, the proof can be checked in polynomial time. <p> This leads us to a very fascinating problem: how can the verifier be convinced with high probability that there is a proof ? and how rapidly can this be done? This problem has been formulated and extensively studied in terms of interactive proofs <ref> [1, 16, 17] </ref>. Informally, an interactive proof consists of a Prover and a Verifier. The Prover is an all powerful Turing Machine (TM) and the Verifier is a TM which operates in time polynomial in the length of the input.
Reference: [18] <author> S. Goldwasser and M. Sipser. </author> <title> Private coins versus public coins in interactive proof systems. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <pages> pages 59-68, </pages> <year> 1986. </year>
Reference-contexts: This sequence of n randomly chosen, randomly permuted graphs is sent to the Prover. Recall that the Prover has not seen the Verifier's random bits. (With a more elaborate interactive proof, this assumption is not necessary <ref> [18] </ref>.) 2. The Verifier asks the Prover to determine, for each graph in the sequence, which graph, G 1 or G 2 , was the one selected. If the Prover answers correctly, then the Verifier accepts. Suppose the two original graphs are not isomorphic.
Reference: [19] <author> J. Hartmanis. </author> <title> Solvable problems with conflicting relativizations. </title> <journal> Bulletin of the Euro-pean Association for Theoretical Computer Science, </journal> <volume> 27 </volume> <pages> 40-49, </pages> <month> Oct </month> <year> 1985. </year>
Reference-contexts: We continue by presenting 3 our main results, which combined with what is known on interactive proofs, yield a striking new counterexample against the Random Oracle Hypothesis. There have previously been several counterexamples in the literature and in unpublished reports <ref> [13, 19, 23, 27] </ref>. Some of these counterexamples use double relativization and classes which are not closed under polynomial time reductions. While the results in this paper are not the first, the authors believe that they are the most natural and compelling.
Reference: [20] <author> J. Hartmanis, R. Chang, D. Ranjan, and P. Rohatgi. </author> <title> Structural complexity theory: Recent surprises. </title> <booktitle> In Proceedings of the 2nd Scandinavian Workshop on Algorithm Theory, volume 447 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-12. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: We conclude that random oracle relativizations should not discourage attempts to prove the opposite in the real world. This paper reports results obtained independently by two sets of researchers. Preliminary versions of these works can be found in <ref> [10, 20] </ref>. 2 A Review of IP The class IP is the set of languages that have interactive proofs. IP was first defined as way to generalize NP [1, 17].
Reference: [21] <author> J. H-astad. </author> <title> Almost optimal lower bounds for small depth circuits. </title> <editor> In Silvio Micali, editor, </editor> <booktitle> Randomness and Computation, volume 5 of Advances in Computing Research, </booktitle> <pages> pages 143-170. </pages> <publisher> JAI Press Inc, </publisher> <year> 1989. </year>
Reference-contexts: For example, for a long time it was not known if the Polynomial-time Hierarchy (PH) can be separated by oracles from PSPACE. In 1985, Yao [33] finally resolved this problem by constructing an oracle A, such that PH A 6= PSPACE A : H-astad <ref> [21] </ref> simplified this proof and constructed an oracle B, such that 8k; PH B 6= k : These methods were refined by Ko [26] to show that for every k 0 there is an oracle which collapses PH to exactly the k th level and keeps the first k 1 levels
Reference: [22] <author> J. E. Hopcroft. </author> <title> Turing machines. </title> <publisher> Scientific American, </publisher> <pages> pages 86-98, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: Finally, we have unsuccessfully struggled for over twenty years to resolve whether P =? NP =? PSPACE. These observations seemed to support the conviction that problems with contradictory relativizations are extremely difficult and may not be solvable by current techniques. This opinion was succinctly expressed by John Hopcroft <ref> [22] </ref>: This perplexing state of affairs is obviously unsatisfactory as it stands. No problem that has been relativized in two conflicting ways has yet been solved, and this fact is generally taken as evidence that the solutions of such problems are beyond the current state of mathematics.
Reference: [23] <author> R. Impagliazzo. </author> <title> NP in zero-knowledge fails with respect to random oracle. </title> <type> Personal communication, </type> <year> 1990. </year>
Reference-contexts: We continue by presenting 3 our main results, which combined with what is known on interactive proofs, yield a striking new counterexample against the Random Oracle Hypothesis. There have previously been several counterexamples in the literature and in unpublished reports <ref> [13, 19, 23, 27] </ref>. Some of these counterexamples use double relativization and classes which are not closed under polynomial time reductions. While the results in this paper are not the first, the authors believe that they are the most natural and compelling.
Reference: [24] <author> J. Kadin. </author> <title> The polynomial time hierarchy collapses if the Boolean hierarchy collapses. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17(6) </volume> <pages> 1263-1282, </pages> <month> December </month> <year> 1988. </year>
Reference-contexts: Similarly, we believe that the Turing-complete and many-one complete sets for NP are not sparse, because Mahaney [30] showed that these conditions would collapse PH. One can even show that for any k 0, P SAT [k] = P SAT [k+1] implies that PH is finite <ref> [24] </ref>. Hence, we believe that P SAT [k] 6= P SAT [k+1] for all k 0. Thus, if the Polynomial Hierarchy is indeed infinite, we can describe many aspects of the computational complexity of NP. A second approach used random oracles.
Reference: [25] <author> R. Karp and R. Lipton. </author> <title> Some connections between nonuniform and uniform complexity classes. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <pages> pages 302-309, </pages> <year> 1980. </year>
Reference-contexts: How should complexity theorists remedy "this perplexing state of affairs"? In one approach, we assume as a working hypothesis that PH has infinitely many levels. Thus, any assumption which would imply that PH is finite is deemed incorrect. For example, Karp, Lipton and Sipser <ref> [25] </ref> showed that if NP P/poly, then PH collapses to P 2 . So, we believe that SAT does not have polynomial sized circuits. Similarly, we believe that the Turing-complete and many-one complete sets for NP are not sparse, because Mahaney [30] showed that these conditions would collapse PH.
Reference: [26] <author> K. Ko. </author> <title> Relativized polynomial time hierarchies having exactly k levels. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <pages> pages 245-253, </pages> <year> 1988. </year>
Reference-contexts: In 1985, Yao [33] finally resolved this problem by constructing an oracle A, such that PH A 6= PSPACE A : H-astad [21] simplified this proof and constructed an oracle B, such that 8k; PH B 6= k : These methods were refined by Ko <ref> [26] </ref> to show that for every k 0 there is an oracle which collapses PH to exactly the k th level and keeps the first k 1 levels of PH distinct.
Reference: [27] <author> S. A. Kurtz. </author> <title> On the random oracle hypothesis. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <pages> pages 224-230, </pages> <year> 1982. </year>
Reference-contexts: We continue by presenting 3 our main results, which combined with what is known on interactive proofs, yield a striking new counterexample against the Random Oracle Hypothesis. There have previously been several counterexamples in the literature and in unpublished reports <ref> [13, 19, 23, 27] </ref>. Some of these counterexamples use double relativization and classes which are not closed under polynomial time reductions. While the results in this paper are not the first, the authors believe that they are the most natural and compelling.
Reference: [28] <author> S. A. Kurtz, S. R. Mahaney, and J. S. Royer. </author> <title> The isomorphism conjecture fails relative to a random oracle. </title> <booktitle> In ACM Symposium on Theory of Computing, </booktitle> <pages> pages 157-166, </pages> <year> 1989. </year>
Reference-contexts: For almost all oracles A <ref> [8, 9, 28] </ref>: * PH A PSPACE A . * The Boolean Hierarchy relative to A, BH A , is infinite. * The Berman-Hartmanis Conjecture fails relative to A. The last result asserts that there exist non-isomorphic many-one complete sets for NP A for random oracle A.
Reference: [29] <author> C. Lund, L. Fortnow, H. Karloff, and N. Nisan. </author> <title> Algebraic methods for interactive proof systems. </title> <booktitle> In Proceedings of the IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-10, </pages> <year> 1990. </year>
Reference-contexts: For a while, it was believed that co-NP is not contained in IP, because there are oracle worlds where co-NP 6 IP [12]. In fact, the computational power of interactive proofs was not fully appreciated until Lund, Fortnow, Karloff and Nisan <ref> [29] </ref> showed that IP actually contains the entire Polynomial Hierarchy.
Reference: [30] <author> S. Mahaney. </author> <title> Sparse complete sets for NP: Solution of a conjecture of Berman and Hartmanis. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 25(2) </volume> <pages> 130-143, </pages> <year> 1982. </year>
Reference-contexts: For example, Karp, Lipton and Sipser [25] showed that if NP P/poly, then PH collapses to P 2 . So, we believe that SAT does not have polynomial sized circuits. Similarly, we believe that the Turing-complete and many-one complete sets for NP are not sparse, because Mahaney <ref> [30] </ref> showed that these conditions would collapse PH. One can even show that for any k 0, P SAT [k] = P SAT [k+1] implies that PH is finite [24]. Hence, we believe that P SAT [k] 6= P SAT [k+1] for all k 0.
Reference: [31] <author> C. H. Papadimitriou. </author> <title> Games against nature. </title> <booktitle> In Proceedings of the IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 446-450, </pages> <year> 1983. </year> <month> 14 </month>
Reference-contexts: To give a more complete understanding of the behavior of these classes with random oracles, we define a less restrictive acceptance criterion for interactive proofs and denote the class of such languages by IPP. This class is a slight variant 5 of the class PPSPACE defined by Papadimitriou <ref> [31] </ref>. <p> PSPACE A IPP A : This proof is similar to the proof that NP PP [14] (see also <ref> [31] </ref>). Let L be a language in PSPACE A . Then there is a machine M A accepting L which runs in space p (n) and halts in exactly 2 q (n) steps for some polynomials p and q.
Reference: [32] <author> A. Shamir. </author> <title> IP = PSPACE. </title> <booktitle> In Proceedings of the IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 11-15, </pages> <year> 1990. </year>
Reference-contexts: In fact, the computational power of interactive proofs was not fully appreciated until Lund, Fortnow, Karloff and Nisan [29] showed that IP actually contains the entire Polynomial Hierarchy. This result then led Shamir <ref> [32] </ref> to completely characterize IP by showing that IP = PSPACE: Then, Babai, Fortnow and Lund [2] characterized the computational power of multi-prover interactive proofs MIP = NEXP: In both cases, it is interesting to see that interactive proof systems provide alternative definitions of classic complexity classes.
Reference: [33] <author> A. C. Yao. </author> <title> Separating the polynomial-time hierarchy by oracles. </title> <booktitle> In Proceedings of the IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 1-10, </pages> <year> 1985. </year> <month> 15 </month>
Reference-contexts: An impressive set of techniques was developed for oracle constructions and some very subtle and interesting relativization results were obtained. For example, for a long time it was not known if the Polynomial-time Hierarchy (PH) can be separated by oracles from PSPACE. In 1985, Yao <ref> [33] </ref> finally resolved this problem by constructing an oracle A, such that PH A 6= PSPACE A : H-astad [21] simplified this proof and constructed an oracle B, such that 8k; PH B 6= k : These methods were refined by Ko [26] to show that for every k 0 there
References-found: 33

