URL: http://www.cs.gatech.edu/computing/Database/students/jeong/papers/ICDE96.ps.gz
Refering-URL: http://www.cs.gatech.edu/computing/Database/students/jeong/jeong.html
Root-URL: 
Email: E-mail jeong@cc.gatech.edu, edwardo@cc.gatech.edu  
Title: Index File Partitioning in Parallel Database Systems  
Author: Byeong-Soo Jeong and Edward Omiecinski 
Address: Atlanta, Georgia 30332 USA  
Affiliation: College of Computing Georgia Institute of Technology  
Date: 1996)  June 1995  
Note: (Submitted to the International Conference on Data Engineering,  
Abstract: In a parallel database system, a table is often partitioned into multiple fragments and stored on different nodes in order to exploit I/O parallelism. Since using an index is typical for processing a database query, the problem of how to design the index for such partitioned tables can be a crucial performance factor in a parallel database. In terms of the index for partitioned tables, we can think of two alternatives, i.e., local index and partitioned global index. These alternative indexing schemes might display different performance characteristics for parallel query processing when the index is frequently used. In this paper, we examine the problem of how to partition an index file in a shared-nothing parallel database system. We present query processing strategies under alternative index file partitioning schemes. We also study the performance impact of alternative index file partitioning schemes by using simulation under different workloads.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bhide. </author> <title> An Analysis of Three Transaction Processing Architectures. </title> <booktitle> In Proceedings of the 14th VLDB Conference, </booktitle> <pages> pages 339-350, </pages> <year> 1988. </year>
Reference-contexts: We implemented the simple LRU buffer manager, the ARIES/KVL (Key Value Locking) method for 10 concurrency control of B+tree index files and a simple transaction manager. 4.1 Simulation Queueing Model Our queueing model for the simulation of a shared-nothing multiprocessor architecture is similar to the one in <ref> [1] </ref>. Figure 4 shows our simulation queueing model. The system consists of multiple terminals which generate the transaction workloads, one or more front-end processors, multiple back-end processors which can have their own disk storage, and network interface.
Reference: [2] <author> H. Boral, W. Alexander, L. Clay, G. Copeland, S. Danforth, M. Franklin, B. Hart, M. Smith, and P. Valduriez. </author> <title> Prototyping Bubba, A Highly Parallel Database System. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 4-24, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: There have been a number of earlier studies of the data partitioning problem in a parallel database system. Copeland et. al. [3] examined the problem of data placement in Bubba <ref> [2] </ref>, which is determining the optimal placement of data across processing nodes for high performance. They introduced concepts such as heat and temperature which are used for measuring the amount of data accesses.
Reference: [3] <author> G. Copeland, W. Alexander, E. Boughter, and T. Keller. </author> <title> Data Placement In Bubba. </title> <booktitle> In Proceedings of ACM SIGMOD- International Conference on Management of Data, </booktitle> <pages> pages 99-108, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: In order to achieve high performance, the data partitioning becomes more crucial than the function partitioning because of the data-intensive characteristic of database application workloads. Thus, several data partitioning strategies <ref> [3, 6, 7, 8, 9, 11, 19] </ref> have been studied in the context of parallel database systems. In a database system (especially in an OLTP environment), the index file is a very important data structure which significantly affects system performance. <p> There have been a number of earlier studies of the data partitioning problem in a parallel database system. Copeland et. al. <ref> [3] </ref> examined the problem of data placement in Bubba [2], which is determining the optimal placement of data across processing nodes for high performance. They introduced concepts such as heat and temperature which are used for measuring the amount of data accesses.
Reference: [4] <author> D. J. DeWitt, S. Ghandeharizadeh, D. A. Schneider, A. Bricker, H. Hsiao, and R. Rasmussen. </author> <title> The Gamma Database Machine Project. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 44-62, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Due to 2 the complexity of the problem (NP-complete), a heuristic approach was used to solve the problem. Contrary to Bubba's variable declustering, GAMMA <ref> [4] </ref> adopts full horizontal declustering for exploiting all the I/O bandwidth provided by the hardware and employs a new availability technique termed chained declustering [9]. Several performance studies [6, 7] have been done in order to show the performance trade-offs of the different declustering strategies. <p> As for the partitioning strategy, there can be several alternatives that might give different performance results depending on given workloads. In GAMMA <ref> [4] </ref>, they provide three alternative partitioning strategies for tables, i.e., round-robin, hash partitioning, and range partitioning. In the round-robin strategy, the tuples in a relation are distributed in a round-robin fashion among the nodes.
Reference: [5] <author> David DeWitt and Jim Gray. </author> <title> Parallel Database Systems : The Future of High Performance Database Systems. </title> <journal> Communications of the ACM, </journal> <volume> 35(6) </volume> <pages> 85-98, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction In a parallel database system, generally three forms of parallelism can be exploited, i.e., inter-query parallelism, intra-query parallelism, and intra-operation parallelism and such parallelism is obtained intrinsically by using data partitioning and function partitioning <ref> [5, 18] </ref>. In order to achieve high performance, the data partitioning becomes more crucial than the function partitioning because of the data-intensive characteristic of database application workloads. Thus, several data partitioning strategies [3, 6, 7, 8, 9, 11, 19] have been studied in the context of parallel database systems.
Reference: [6] <author> S. Ghandeharizadeh and D. J. DeWitt. </author> <title> A Multiuser Performance Analysis of Declustering Strategies. </title> <booktitle> In Proceedings of the 6th International Conference on Data Engineering, </booktitle> <pages> pages 466-475, </pages> <month> February </month> <year> 1990. </year> <month> 21 </month>
Reference-contexts: In order to achieve high performance, the data partitioning becomes more crucial than the function partitioning because of the data-intensive characteristic of database application workloads. Thus, several data partitioning strategies <ref> [3, 6, 7, 8, 9, 11, 19] </ref> have been studied in the context of parallel database systems. In a database system (especially in an OLTP environment), the index file is a very important data structure which significantly affects system performance. <p> Contrary to Bubba's variable declustering, GAMMA [4] adopts full horizontal declustering for exploiting all the I/O bandwidth provided by the hardware and employs a new availability technique termed chained declustering [9]. Several performance studies <ref> [6, 7] </ref> have been done in order to show the performance trade-offs of the different declustering strategies. In [19], Weikum et. al. studied the problem of dynamic file allocation in disk arrays.
Reference: [7] <author> S. Ghandeharizadeh and D. J. DeWitt. </author> <title> Hybrid-Range Partitioning Strategy: A New Declus--tering Strategy for Multiprocessor Database Machines. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Databases, </booktitle> <pages> pages 481-492, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: In order to achieve high performance, the data partitioning becomes more crucial than the function partitioning because of the data-intensive characteristic of database application workloads. Thus, several data partitioning strategies <ref> [3, 6, 7, 8, 9, 11, 19] </ref> have been studied in the context of parallel database systems. In a database system (especially in an OLTP environment), the index file is a very important data structure which significantly affects system performance. <p> Contrary to Bubba's variable declustering, GAMMA [4] adopts full horizontal declustering for exploiting all the I/O bandwidth provided by the hardware and employs a new availability technique termed chained declustering [9]. Several performance studies <ref> [6, 7] </ref> have been done in order to show the performance trade-offs of the different declustering strategies. In [19], Weikum et. al. studied the problem of dynamic file allocation in disk arrays.
Reference: [8] <author> Shahram Ghandeharizadeh and David J. DeWitt. </author> <title> A Performance Analysis of Alternative Multi-Attribute Declustering Strategies. </title> <booktitle> In Proceedings of ACM SIGMOD- International Conference on Management of Data, </booktitle> <pages> pages 29-38, </pages> <year> 1992. </year>
Reference-contexts: In order to achieve high performance, the data partitioning becomes more crucial than the function partitioning because of the data-intensive characteristic of database application workloads. Thus, several data partitioning strategies <ref> [3, 6, 7, 8, 9, 11, 19] </ref> have been studied in the context of parallel database systems. In a database system (especially in an OLTP environment), the index file is a very important data structure which significantly affects system performance.
Reference: [9] <author> H. I. Hsiao and D. J. DeWitt. </author> <title> Chained Declustering : A New Availability Strategy for Multiprocessor Database Machines. </title> <booktitle> In Proceedings of the 6th International Conference on Data Engineering, </booktitle> <month> February </month> <year> 1990. </year>
Reference-contexts: In order to achieve high performance, the data partitioning becomes more crucial than the function partitioning because of the data-intensive characteristic of database application workloads. Thus, several data partitioning strategies <ref> [3, 6, 7, 8, 9, 11, 19] </ref> have been studied in the context of parallel database systems. In a database system (especially in an OLTP environment), the index file is a very important data structure which significantly affects system performance. <p> Due to 2 the complexity of the problem (NP-complete), a heuristic approach was used to solve the problem. Contrary to Bubba's variable declustering, GAMMA [4] adopts full horizontal declustering for exploiting all the I/O bandwidth provided by the hardware and employs a new availability technique termed chained declustering <ref> [9] </ref>. Several performance studies [6, 7] have been done in order to show the performance trade-offs of the different declustering strategies. In [19], Weikum et. al. studied the problem of dynamic file allocation in disk arrays.
Reference: [10] <author> Ibrahim Kamel and Christos Faloutsos. </author> <title> Parallel R-trees. </title> <booktitle> In Proceedings of ACM SIGMOD-International Conference on Management of Data, </booktitle> <pages> pages 195-204, </pages> <year> 1992. </year>
Reference-contexts: Although the above studies provided a general guide for data partitioning in a parallel database system, we need more attention when considering the partitioning problem of specific data structures like index files. To the best of our knowledge, only <ref> [10, 12, 17] </ref> deal with the partitioning of specific data structures in a parallel database environment. In [17], Seeger and Larson studied how to exploit multiple disks to improve the performance of B-tree structured files, but their work did not consider the shared-nothing multiprocessors system considered in our work. <p> In [17], Seeger and Larson studied how to exploit multiple disks to improve the performance of B-tree structured files, but their work did not consider the shared-nothing multiprocessors system considered in our work. In <ref> [10] </ref>, Kamel and Faloutsos provided a new design scheme of spatial index structure (R-tree) based on multiple disk I/O system in order to exploit high I/O parallelism. They also considered shared-everything multiprocessors.
Reference: [11] <author> Jianzhong Li, Jaideep Srivastava, and Doron Rotem. </author> <title> CMD : A Multidimensional Decluster-ing Method for Parallel Database Systems. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 3-14, </pages> <year> 1992. </year>
Reference-contexts: In order to achieve high performance, the data partitioning becomes more crucial than the function partitioning because of the data-intensive characteristic of database application workloads. Thus, several data partitioning strategies <ref> [3, 6, 7, 8, 9, 11, 19] </ref> have been studied in the context of parallel database systems. In a database system (especially in an OLTP environment), the index file is a very important data structure which significantly affects system performance.
Reference: [12] <author> Jorg Liebeherr, Ed. Omiecinski, and Ian F. Akyildiz. </author> <title> The Effect of Index Partitioning Schemes on the Performance of Distributed Query Processing. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 5(3) </volume> <pages> 510-522, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Although the above studies provided a general guide for data partitioning in a parallel database system, we need more attention when considering the partitioning problem of specific data structures like index files. To the best of our knowledge, only <ref> [10, 12, 17] </ref> deal with the partitioning of specific data structures in a parallel database environment. In [17], Seeger and Larson studied how to exploit multiple disks to improve the performance of B-tree structured files, but their work did not consider the shared-nothing multiprocessors system considered in our work. <p> In [10], Kamel and Faloutsos provided a new design scheme of spatial index structure (R-tree) based on multiple disk I/O system in order to exploit high I/O parallelism. They also considered shared-everything multiprocessors. In <ref> [12] </ref>, Liebeherr and Omiecinski examined the performance impact of two index partitioning schemes. i.e., local index and partitioned global index in a distributed database environment, but they did not consider update queries. 3 Index File Partition 3.1 System Architecture A parallel database system is often classified according to the hardware architecture
Reference: [13] <author> Witold Litwin and David B. Lomet. </author> <title> The Bounded Disorder Access Method. </title> <booktitle> In Proceedings of the IEEE Fifth International Conference on Data Engineering, </booktitle> <pages> pages 38-48, </pages> <year> 1986. </year>
Reference-contexts: In BHPGI, first, the index entries are divided into small number of groups by specific key value ranges (each group consists of multiple nodes) and distributed again by a specific hash function within a group. It has similarities with the Bounded Disorder File structure <ref> [13, 14] </ref> 5 for a single processor environment. Figure 2 and 3 illustrate the concept of LI and three PGIs. As for selection-only queries, PGI looks attractive from the standpoint of inter-query parallelism.
Reference: [14] <author> Witold Litwin and David B. Lomet. </author> <title> A New Method for Fast Data Searches with Keys. </title> <journal> IEEE Software, </journal> <pages> pages 16-24, </pages> <month> March </month> <year> 1987. </year>
Reference-contexts: In BHPGI, first, the index entries are divided into small number of groups by specific key value ranges (each group consists of multiple nodes) and distributed again by a specific hash function within a group. It has similarities with the Bounded Disorder File structure <ref> [13, 14] </ref> 5 for a single processor environment. Figure 2 and 3 illustrate the concept of LI and three PGIs. As for selection-only queries, PGI looks attractive from the standpoint of inter-query parallelism.
Reference: [15] <author> C. Mohan. ARIES/KVL: </author> <title> A Key-Value Locking Method for Concurrency Control of Multiac-tion Transactions Operating on B-Tree Indexes. </title> <booktitle> In Proceedings of the Sixteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 392-405, </pages> <year> 1990. </year>
Reference-contexts: When a transaction is generated, it is inserted into the front-end processor queue and then the front-end processors generate and distribute sub-transactions to each back-end processors according to the indexing scheme. In each back-end processor, index file and data file read/write are done through the ARIES/KVL concurrency control method <ref> [15] </ref> using a simple LRU buffer manager. If the processor needs communication (i.e., remote data access or send/receive control messages), the request is inserted into the network queue. Requests for the CPUs, disks, and network are scheduled using a FCFS (first-come first-served) discipline with no preemption. <p> In terms of the physical structure of the index file, we use a B+tree index file structure and implement the ARIES/KVL method for concurrent index operations. Thus, the algorithms and the physical storage structure of the index file are almost the same as found in <ref> [15] </ref>. 4.3 Transaction and Concurrency Control Model We simplify the transaction management function by not including the function of logging and recovery. We consider only the two phase commit protocol for distributed transaction processing consistency. <p> The front-end processor coordinates the execution of the transactions through the control message exchange with the back-end data processors. Figure 5 describes the simplified control flow of the two phase commit protocol in our transaction execution model. 12 For concurrent multiple index operations, we implemented the ARIES/KVL <ref> [15] </ref> algorithms while eliminating the logging and recovery functions since failure management is not our concern. It provides very high concurrency during the index operations (i.e., tree traversals, page modifications, and index key read/write) by using key value locking.
Reference: [16] <author> Herb Schwetman. </author> <title> CSIM Users' Guide (Revision 14). </title> <institution> Microelectronics and Computer Technology Corporation, </institution> <year> 1991. </year>
Reference-contexts: We will show their performance tradeoffs in detail with our simulation experiments. 4 Simulation Model In this section, we describe our simulation model which was used in our performance experiments of each indexing scheme. We used the CSIM <ref> [16] </ref> simulation language to implement the simplified parallel database system. By simplified we mean that we did not include components of a database system in our model that are not influenced by the selection of a particular indexing scheme.
Reference: [17] <author> Bernhard Seeger and Per-Ake Larson. </author> <title> Multi-Disk B-tree. </title> <booktitle> In Proceedings of ACM SIGMOD-International Conference on Management of Data, </booktitle> <pages> pages 436-445, </pages> <year> 1991. </year> <month> 22 </month>
Reference-contexts: Although the above studies provided a general guide for data partitioning in a parallel database system, we need more attention when considering the partitioning problem of specific data structures like index files. To the best of our knowledge, only <ref> [10, 12, 17] </ref> deal with the partitioning of specific data structures in a parallel database environment. In [17], Seeger and Larson studied how to exploit multiple disks to improve the performance of B-tree structured files, but their work did not consider the shared-nothing multiprocessors system considered in our work. <p> To the best of our knowledge, only [10, 12, 17] deal with the partitioning of specific data structures in a parallel database environment. In <ref> [17] </ref>, Seeger and Larson studied how to exploit multiple disks to improve the performance of B-tree structured files, but their work did not consider the shared-nothing multiprocessors system considered in our work.
Reference: [18] <author> Patrick Valduriez. </author> <title> Parallel Database Systems : Open Problems and New Issues. Distributed and Parallel Databases, </title> <booktitle> Special Issue : Research Topics in Distributed and Parallel Databases, </booktitle> <volume> 1(2) </volume> <pages> 135-162, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: 1 Introduction In a parallel database system, generally three forms of parallelism can be exploited, i.e., inter-query parallelism, intra-query parallelism, and intra-operation parallelism and such parallelism is obtained intrinsically by using data partitioning and function partitioning <ref> [5, 18] </ref>. In order to achieve high performance, the data partitioning becomes more crucial than the function partitioning because of the data-intensive characteristic of database application workloads. Thus, several data partitioning strategies [3, 6, 7, 8, 9, 11, 19] have been studied in the context of parallel database systems.
Reference: [19] <author> Gerhard Weikum, Peter Zabback, and Peter Scheuermann. </author> <title> Dynamic File Allocation in Disk Arrays. </title> <booktitle> In Proceedings of ACM SIGMOD- International Conference on Management of Data, </booktitle> <pages> pages 406-415, </pages> <year> 1991. </year> <month> 23 </month>
Reference-contexts: In order to achieve high performance, the data partitioning becomes more crucial than the function partitioning because of the data-intensive characteristic of database application workloads. Thus, several data partitioning strategies <ref> [3, 6, 7, 8, 9, 11, 19] </ref> have been studied in the context of parallel database systems. In a database system (especially in an OLTP environment), the index file is a very important data structure which significantly affects system performance. <p> Several performance studies [6, 7] have been done in order to show the performance trade-offs of the different declustering strategies. In <ref> [19] </ref>, Weikum et. al. studied the problem of dynamic file allocation in disk arrays. Their work is different from the others in the fact that they consider dynamic file allocations while the previous work assumes static file allocations.
References-found: 19

