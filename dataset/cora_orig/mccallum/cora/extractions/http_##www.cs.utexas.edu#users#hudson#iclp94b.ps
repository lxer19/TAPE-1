URL: http://www.cs.utexas.edu/users/hudson/iclp94b.ps
Refering-URL: http://www.cs.utexas.edu/users/hudson/papers.html
Root-URL: 
Title: Language Independence and Language Tolerance in Logic Programs  
Author: Norman McCain and Hudson Turner 
Address: Austin, TX 78712  
Affiliation: Department of Computer Sciences University of Texas at Austin  
Abstract: The consequences of a logic program depend in general upon both the rules of the program and its language. However the consequences of some programs are independent of the choice of language, while others depend on the language of the program in only a restricted way. In this paper, we define notions of language independence and language tolerance corresponding to these two cases. Furthermore, we show that there are syntactically-defined classes of programs that are language independent and language tolerant. A primary application of these results is to guarantee that for some programs it is permissible to ignore the fact that the language of the program is many-sorted. This is useful to know, since query evaluation procedures generally take no account of sorts. 
Abstract-found: 1
Intro-found: 1
Reference: [ Fages, 1993 ] <author> Fran~cois Fages. </author> <title> Consistency of Clark's completion and existence of stable models. </title> <note> Journal of Methods of logic in computer science, 1993. To appear. </note>
Reference-contexts: We now turn to the problem of defining a general syntactic class of programs that satisfy this condition. For this purpose, we define the property of predicate-order-consistency in a manner analogous to the definition of order-consistency in <ref> [ Fages, 1993 ] </ref> . Unlike the definition of order-consistency, the definition of predicate-order-consistency does not refer to the language of the program, but only to the predicate symbols that occur in the program. Let P be a normal program. <p> A normal program P is predicate-order-consistent if the relation in G (P ) is well-founded and there is no predicate symbol p that occurs in P s.t. p p. The following proposition is proved by using the result from <ref> [ Fages, 1993 ] </ref> which states that every order-consistent normal program has an answer set. Proposition 6.1 If P is a predicate-order-consistent normal program, then for every permissible language L for P , every part of H (P; L) has a consistent answer set. <p> Lemma 10.8 If P is a predicate-order-consistent normal program, then for every permissible language L for P , H (P; L) is an order consistent normal program. Lemma 10.9 Every part of an order-consistent normal program is also an order-consistent normal program. Proposition 10.3 ( <ref> [ Fages, 1993 ] </ref> ) Every order-consistent normal program has an answer set. Proof. (of Proposition 6.1) Suppose P is a predicate-order-consistent normal program. By Lemma 10.8, for every permissible language L for P , H (P; L) is an order-consistent normal program.
Reference: [ Gelfond and Lifschitz, 1991 ] <author> Michael Gelfond and Vladimir Lifschitz. </author> <title> Classical negation in logic programs and disjunctive databases. </title> <journal> New Generation Computing, </journal> <volume> 9 </volume> <pages> 365-385, </pages> <year> 1991. </year>
Reference-contexts: permissible for P , H (P; L) is the ground program, consisting of all ground instances, in the 2 This stipulation is analagous to the stipulation in classical logic that domains are nonempty. 3 So by a program, unless we say otherwise, we shall mean an extended disjunctive logic program <ref> [ Gelfond and Lifschitz, 1991 ] </ref> . language L, of rules in P . The language of the ground program H (P; L) obtained in this manner is L. <p> See <ref> [ Gelfond and Lifschitz, 1991 ] </ref> . 8. Holds (Loaded; s) Rel (Result (Shoot; s)); Holds (Alive; s); Holds 0 (Alive; Result (Shoot; s)). 9. Holds 0 (Loaded; Result (Shoot; s)). 10. Noninertial (Loaded; Shoot; s; 0). 11.
Reference: [ Hanks and McDermott, 1987 ] <author> Steve Hanks and Drew McDermott. </author> <title> Non-monotonic logic and temporal projection. </title> <journal> Artificial Intelligence, </journal> <volume> 33(3) </volume> <pages> 379-412, </pages> <year> 1987. </year>
Reference-contexts: The program P 7 is the positive form of an extended program given in [ Lifschitz et al., 1993 ] . 6 It formalizes the so-called Murder Mystery variant of the Yale Shooting Problem <ref> [ Hanks and McDermott, 1987 ] </ref> . 1. Holds (Alive; S0). 2. Holds 0 (Alive; Result (Wait; Result (Shoot; S0))). 2a. Rel (Result (Wait; Result (Shoot; S0))): 2b. Rel (Result (Shoot; S0)): 3. Holds (Loaded; Result (Load; s)). 4. Noninertial (Loaded; Load; s; 1). 5.
Reference: [ Lifschitz and Turner, 1994 ] <author> Vladimir Lifschitz and Hudson Turner. </author> <title> Split--ting a logic program. </title> <booktitle> In Logic Programming: Proceedings of the Eleventh International Conference for Logic Programming, </booktitle> <year> 1994. </year>
Reference-contexts: It follows that H (P; L 1 ) and H (P; L 2 ) have the same consistent answer sets. Therefore, P is language independent. 2 The following definitions and theorem from <ref> [ Lifschitz and Turner, 1994 ] </ref> are used in the proof of Theorem 6.1. Definition. Given a rule r, lit (r) stands for head (r) [ body (r). <p> Splitting Set Theorem <ref> [ Lifschitz and Turner, 1994 ] </ref> . Let U be a splitting set for a program P .
Reference: [ Lifschitz et al., 1993 ] <author> Vladimir Lifschitz, Norman McCain, and Hudson Turner. </author> <title> Automated reasoning about actions: a logic programming approach. </title> <type> Manuscript, </type> <year> 1993. </year>
Reference-contexts: Proposition 7.2 Let P be a language tolerant program. If L is obtained from L P by ignoring sorts, then H (P; L) is a conservative extension of H (P; L P ). We now apply Proposition 7.2 to a program for reasoning about actions from <ref> [ Lifschitz et al., 1993 ] </ref> . The language of the program is a many-sorted language with four sorts: fluent, action, truth-value, and situation. <p> The program P 7 is the positive form of an extended program given in <ref> [ Lifschitz et al., 1993 ] </ref> . 6 It formalizes the so-called Murder Mystery variant of the Yale Shooting Problem [ Hanks and McDermott, 1987 ] . 1. Holds (Alive; S0). 2. Holds 0 (Alive; Result (Wait; Result (Shoot; S0))). 2a. Rel (Result (Wait; Result (Shoot; S0))): 2b.
Reference: [ Lloyd and Topor, 1986 ] <author> John Lloyd and Rodney Topor. </author> <title> A basis for deductive database systems II. </title> <journal> Journal of Logic Programming, </journal> <volume> 1 </volume> <pages> 55-67, </pages> <year> 1986. </year>
Reference-contexts: We will be interested in identifying additional classes of language independent and language tolerant programs. 4 Allowed Programs are Language Independent In this section we present a theorem which states that allowed programs are language independent. The class of allowed programs is syntactically-defined and was studied in <ref> [ Lloyd and Topor, 1986 ] </ref> in connection with the problem of floundering in SLDNF. The same class of programs is also known as range-restricted . We begin by generalizing the definition of an allowed program, which was originally defined for normal programs only. Definition. Let P be a program.
Reference: [ Martens and De Schreye, 1992 ] <author> Bern Martens and Danny De Schreye. </author> <title> A perfect herbrand semantics for untyped vanilla meta-programming. </title> <type> Technical Report CW149, </type> <institution> Department Computerwetenschappen, K.U. Leuven, Belgium, </institution> <year> 1992. </year>
Reference-contexts: We will define a notion of language independence, generalizing the definition in <ref> [ Martens and De Schreye, 1992 ] </ref> , such that P 3 is language independent but P 1 (and of course, P 2 ) are not. Our main purpose in this paper is to identify syntactically-defined classes of programs that are language independent and language tolerant. <p> For P 7 , this justifies the use of query evaluation procedures that take no account of sorts. 8 Discussion A notion of language independence is defined for stratified normal programs in <ref> [ Martens and De Schreye, 1992 ] </ref> as follows: "A stratified program P with underlying language L P is called language independent iff for any extension L 0 for L P , its perfect L 0 -Herbrand model is equal to its perfect L P -Herbrand model." (Here L P is <p> Since our notion of language independence considers all pairs of permissible languages, not only the minimal unsorted permissible language and each of its unsorted extensions, Theorem 4.1 is at least as strong as Proposition 2.5. There is no definition in <ref> [ Martens and De Schreye, 1992 ] </ref> analogous to our notion of language tolerance. To our knowledge, the closest analogues to our definition of language tolerance appear in [ Topor and Sonenberg, 1988 ] and [ Ross, 1993 ] .
Reference: [ Ross, 1993 ] <author> Kenneth A. Ross. </author> <title> On negation in HiLog. </title> <journal> Journal of Logic Programming, </journal> <note> 1993. To appear. </note>
Reference-contexts: There is no definition in [ Martens and De Schreye, 1992 ] analogous to our notion of language tolerance. To our knowledge, the closest analogues to our definition of language tolerance appear in [ Topor and Sonenberg, 1988 ] and <ref> [ Ross, 1993 ] </ref> . <p> However, sorted languages and extended or disjunctive programs are not covered, and the largest syntactic class of programs shown to be domain independent is the class of allowed stratified programs. In <ref> [ Ross, 1993 ] </ref> , definitions and results bearing a family resemblance to ours are presented, but in the framework of HiLog languages rather than sorted first-order languages.
Reference: [ Stroetman, 1993 ] <author> Karl Stroetman. </author> <title> A completeness result for SLDNF resolution. </title> <journal> Journal of Logic Programming, </journal> <volume> 15(4) </volume> <pages> 337-355, </pages> <year> 1993. </year>
Reference-contexts: However, the two answer sets agree in the the intersection of the two languages. It will be easy to show that P 1 and P 4 are language tolerant, using the results obtained in the next section. 6 Some Stable Programs are Language Tolerant The class of stable programs <ref> [ Stroetman, 1993 ] </ref> properly includes the class of allowed programs. Under a rather strong restriction, we can show that stable programs are language tolerant. The restriction is stated after the following definition. Definition. <p> Later in this section we will define a larger class of normal programs with this property, namely, the class of predicate-order-consistent programs. We begin our discussion of stable programs by generalizing a number of definitions given originally in <ref> [ Stroetman, 1993 ] </ref> in the framework of normal programs. <p> It is easy to see that a program P is allowed iff it is stable wrt the I/O specification that maps every argument place to . So the class of stable programs is a superset of the class of allowed programs. The preceding definition generalizes the definition in <ref> [ Stroetman, 1993 ] </ref> to the class of extended disjunctive programs. But even in the special case of normal programs, the definition is more general. In [ Stroetman, 1993 ] the body of a rule is an ordered sequence rather than a set, and whether or not a rule is stable <p> So the class of stable programs is a superset of the class of allowed programs. The preceding definition generalizes the definition in <ref> [ Stroetman, 1993 ] </ref> to the class of extended disjunctive programs. But even in the special case of normal programs, the definition is more general. In [ Stroetman, 1993 ] the body of a rule is an ordered sequence rather than a set, and whether or not a rule is stable may depend on this ordering. For instance, according to the original definition, the rule p not r (X); q (X) is not stable.
Reference: [ Topor and Sonenberg, 1988 ] <author> Rodney Topor and E.A. Sonenberg. </author> <title> On domain independent databases. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 217-240. </pages> <publisher> Morgan Kauf-mann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: There is no definition in [ Martens and De Schreye, 1992 ] analogous to our notion of language tolerance. To our knowledge, the closest analogues to our definition of language tolerance appear in <ref> [ Topor and Sonenberg, 1988 ] </ref> and [ Ross, 1993 ] . In [ Topor and Sonenberg, 1988 ] , a concept called "domain independence" is defined as follows: "A stratified database D is domain independent if, for all languages L 1 and L 2 extending that of D, and for <p> There is no definition in [ Martens and De Schreye, 1992 ] analogous to our notion of language tolerance. To our knowledge, the closest analogues to our definition of language tolerance appear in <ref> [ Topor and Sonenberg, 1988 ] </ref> and [ Ross, 1993 ] . In [ Topor and Sonenberg, 1988 ] , a concept called "domain independence" is defined as follows: "A stratified database D is domain independent if, for all languages L 1 and L 2 extending that of D, and for all atoms A in L 1 and L 2 , ans (A; D;
References-found: 10

