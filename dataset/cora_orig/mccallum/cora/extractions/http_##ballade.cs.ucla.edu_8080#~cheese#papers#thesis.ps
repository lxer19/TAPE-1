URL: http://ballade.cs.ucla.edu:8080/~cheese/papers/thesis.ps
Refering-URL: http://ballade.cs.ucla.edu:8080/~cheese/research.html
Root-URL: http://www.cs.ucla.edu
Title: Multi-way Graph and Hypergraph Partitioning  
Author: Charles Jay Alpert 
Degree: A dissertation submitted in partial satisfaction of the requirements for the degree Doctor of Philosophy in Computer Science by  
Date: 1996  
Affiliation: University of California Los Angeles  
Abstract-found: 0
Intro-found: 1
Reference: [ABK86] <author> T. Asano, B. K. Bhattacharya, J. M. Keil, and F. F. Yao. </author> <title> "Clustering Algorithms Based on Minimum and Maximum Spanning Trees." </title> <booktitle> In Proceedings of the Fourth Annual Symposium on Computational Geometry, </booktitle> <pages> pp. 252-257, </pages> <year> 1986. </year>
Reference-contexts: Brucker [Bru78] showed that Min-Diameter partitioning can be solved in polynomial time when the instance is 1-dimensional. Rao [Rao71], Hubert [Hub73], and Monma and Suri [MS91] proposed optimal polynomial algorithms for finding Min-Diameter bipartitionings of arbitrary instances, and speedups for geometric instances have been found by Asano et al. <ref> [ABK86] </ref> and Avis [Avi86]. These results form the basis of top-down divisive hierarchical heuristics for k &gt; 2 clusters, while an agglomerative implementation of the classic "complete-linkage" method forms the basis of bottom-up approaches (the next section gives a more detailed review).
Reference: [AHK96] <author> C. J. Alpert, L. W. Hagen, and A. B. Kahng. </author> <title> "A Hybrid Multilevel/ Genetic Approach for Circuit Partitioning." </title> <booktitle> In Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <pages> pp. 100-105, </pages> <year> 1996. </year>
Reference-contexts: The Metis package also includes multilevel algorithms for both top-down and non-hierarchical multi-way partitioning. Later, Kumar and Karypis [KK96] implemented a parallel version of this algorithm. In <ref> [AHK96] </ref>, we have adapted the Metis code to handle circuit hypergraphs, and have also integrated the genetic approach of [HK96] [Hag94] to obtain more stable solution quality. 180 Hendrickson and Leland [HL95a] also developed a very efficient multilevel par-titioning algorithm which is included in the Chaco partitioning package (email to bahendr@sandia.gov). <p> Table 6.6 compares the cuts and obtained by ML C with R = 0:5 for 100 and 10 runs to nine such algorithms in the literature: * GMet <ref> [AHK96] </ref> combines an adaptation of the Metis multilevel partitioning algorithm of [KK95a] to circuit hypergraphs with genetic methods of [HK96] 191 Test MIN AVG CPU Case 1:0 0:5 0:33 1:0 0:5 0:33 1:0 0:5 0:33 balu 27 27 27 33 29 29 110 171 234 bm1 47 47 47 55 55
Reference: [AK93] <author> C. J. Alpert and A. B. Kahng. </author> <title> "Geometric Embeddings for Faster and Better Multi-Way Netlist Partitioning." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 743-748, </pages> <year> 1993. </year>
Reference-contexts: Related experiments [HK92b] <ref> [AK93] </ref> have supported the intuition of Bui et al. [BHJ89] and Lengauer [Len90] that good local minima in the original instance are more easily reached from good local minima in the clustered instance. <p> For example, if a 20-vertex hyperedge is cut into two equal-size pieces, the corresponding cut has cost 100 9 in the graph. However, cutting a 2-vertex hyperedge will have a cost of only 1. Hence, the authors of <ref> [AK93] </ref> proposed a "partitioning-specific" clique model with edge weight 4 jej (jej1) 2 jej 2 2 jej such that the expected cost of a cut hyperedge is one. * Frankle and Karp [FK86] proposed the uniform weight ( 2 jej ) 3=2 for linear placement with a squared edgelength objective: if <p> He suggested placing the coordinates of d eigenvectors orthogonally to yield a d-dimensional geometric embedding of the graph, as was done for two dimensions in Figure 5.2. Hall then proposed to "cluster" the points in the embedding, but did not specify a heuristic. Alpert and Kahng <ref> [AK93] </ref> explored Hall's idea by applying geometric clustering algorithms to these spectral embeddings, using Euclidean distance as the dissimilarity measure between pairs of modules. <p> RSB +4.39 +5.47 +2.64 +8.30 +11.8 +9.60 +13.9 +19.7 +20.0 +10.6 Table 5.4: Scaled Cost (fi10 5 ) comparisons for partitionings derived from Melo orderings versus the RSB [HK92c] and KP [CSZ94] algo rithms. 156 the algorithm is so simple (see <ref> [AK93] </ref> for detailed runtimes for eigenvector com- putations). <p> The second FM run can be classified as a refinement step, which we use to indicate the further refinement of an initially good solution via local moves and swaps. Examples of clustering algorithms designed for two-phase approaches are abundant in both the scientific computing and VLSI design literatures, e.g., <ref> [AK93] </ref> [AK94b] [BJ93] [BHJ89] [HK92b] [NOP87] [SK93] [VKF95] [AV96]. The "two-phase" approach can be extended to a multilevel approach by allowing as many phases as are desired. Figure 6.2 illustrates the multilevel partitioning paradigm with five phases or levels (as in [KK95a]).
Reference: [AK94a] <author> C. J. Alpert and A. B. Kahng. </author> <title> "A General Framework for Vertex Or-derings, With Applications to Netlist Clustering." </title> <type> Technical Report 940018, </type> <institution> UCLA, </institution> <year> 1994. </year>
Reference-contexts: In a separate set of experiments <ref> [AK94a] </ref>, we used DP-RP to generate relatively balanced 5-way clusterings from WINDOW, EIG1, and SFC orderings; again, WINDOW performed best. This result suggests that EIG1 and SFC may not be appropriate to partition with hard cluster size bounds.
Reference: [AK94b] <author> C. J. Alpert and A. B. Kahng. </author> <title> "A General Framework for Vertex Or-derings, With Applications to Netlist Clustering." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 63-67, </pages> <year> 1994. </year>
Reference-contexts: Examples of clustering algorithms designed for two-phase approaches are abundant in both the scientific computing and VLSI design literatures, e.g., [AK93] <ref> [AK94b] </ref> [BJ93] [BHJ89] [HK92b] [NOP87] [SK93] [VKF95] [AV96]. The "two-phase" approach can be extended to a multilevel approach by allowing as many phases as are desired. Figure 6.2 illustrates the multilevel partitioning paradigm with five phases or levels (as in [KK95a]).
Reference: [AK94c] <author> C. J. Alpert and A. B. Kahng. </author> <title> "Multi-Way Partitioning Via Space-filling Curves and Dynamic Programming." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 652-657, </pages> <year> 1994. </year>
Reference-contexts: be poor correlation between any of the objectives and two-phase FM optimization. (It is somewhat encouraging that WINDOW appears to outperform ANNEAL for the three largest test cases.) 4.5.2 WINDOW Versus Other Vertex Orderings Finally, we compared WINDOW orderings to seven other vertex ordering constructions: DFS, BFS, EIG1 [HK92c], SFC <ref> [AK94c] </ref>, Max-Adjacency (MA) [NI92], King [Kin69] and Cuthill-McKee (CM) [CM69]. We ran DP-RP on the vertex ordering constructed by each algorithm for each test case, again with L = 1, U = 20 and k as specified in Table 4.1.
Reference: [AK95] <author> C. J. Alpert and A. B. Kahng. </author> <title> "Recent Directions in Netlist Partitioning: A Survey." Integration, </title> <journal> the VLSI Journal, </journal> <year> 1995. </year>
Reference-contexts: There are several reasons why partitioning has recently emerged as a critical optimization in many phases of the VLSI design cycle, and why the past several years have seen so much research activity on the subject. Overviews and surveys of VLSI partitioning have appeared in the works <ref> [AK95] </ref> [Joh96] [Len90] [PL88] [She93] [SY95]. Effective circuit partitioning heuristics are becoming more crucial with the increasing complexity of VLSI designs. Systems with several million transistors are now common with up to 30 million transistors on a single device projected for the year 1998 [HSF96].
Reference: [AK96a] <author> C. J. Alpert and A. B. Kahng. </author> <title> "A General Framework for Vertex Or-derings, With Applications to Circuit Clustering." </title> <journal> IEEE Transactions on VLSI Systems, </journal> <volume> 4(2) </volume> <pages> 240-246, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Table 4.1 compares the four clustering algorithms in terms of the Scaled Cost, Absorption and DS objectives. Comparisons of WINDOW with the AGG spectral-based clustering algorithm can be found in <ref> [AK96a] </ref>.
Reference: [AK96b] <author> C. J. Alpert and A. B. Kahng. </author> <title> "Simple Eigenvector-Based Circuit Clustering Can Be Effective." </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, volume IV, </booktitle> <pages> pp. 683-686, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: If there were no cluster size constraints, this algorithm would be equivalent to partitioning according to the signs of the first d eigen-vectors, a direct extension of spectral bipartitioning. Theoretical motivations for this type of approach are given in <ref> [AK96b] </ref>. 5.2.4 The Intuition of Blanks We have observed a potential weakness in the approaches of [Bar82] [CSZ94], namely, that each cluster is associated with a single eigenvector, but that the corresponding indicator vector may not be close to its eigenvector.
Reference: [AMO93] <author> R. K. Ahuja, T. L. Magnanti, and J. B. Orlin. </author> <title> Network Flows: Theory, Algorithms, and Applications. </title> <publisher> Prentice Hall, </publisher> <year> 1993. </year> <month> 200 </month>
Reference-contexts: Many algorithms are known which can solve the max-flow problem in polynomial time; see [GTT89] <ref> [AMO93] </ref> for surveys. Note that finding a minimum cut does not necessarily require a maximum flow fast techniques to find minimum cuts have been proposed in [HO92] [Kar93] [NI92].
Reference: [AP90] <author> B. Awerbuch and D. Peleg. </author> <title> "Sparse Partitions." </title> <booktitle> In Proceedings of the IEEE Symposium on the Foundations of Computer Science, </booktitle> <volume> volume 2, </volume> <pages> pp. 503-513, </pages> <year> 1990. </year>
Reference-contexts: Consequently, clustered, hierarchical network architectures are used so that nodes need maintain only a limited, local knowledge of the network (see e.g., <ref> [AP90] </ref> [BG89]). Thus, a clustering algorithm should divide the network into small clusters to maximize the amount of local communication while simultaneously minimizing interclus ter connectivity. * Image Processing and Pattern Recognition: In image processing, partitioning is used to identify natural clusters of pixels which form images.
Reference: [AR90] <author> K. S. Arun and V. B. Rao. </author> <title> "Two-Way Graph Partitioning by Principal Components." </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, </booktitle> <pages> pp. 2877-2880, </pages> <year> 1990. </year>
Reference-contexts: The problem reduces to finding a probe direction ~y that is as close as possible to a legal solution. Note that for two dimensions, any probe vector will return the solution obtained by sorting and splitting the entries of the Fiedler vector Arun and Rao <ref> [AR90] </ref> showed that graph partitioning can be approximated as a "geometric clustering" problem. <p> Viewing the rows of C as points in d-space centered at the origin, the bipartitioning problem reduces to finding a subset of points whose center is furthest from the origin. To find an appropriate matrix C, the authors of <ref> [AR90] </ref> invoke a theorem from principal components analysis [Rao64], that the best rank-d approximation to A with respect to both the spectral and Frobenius norms is U d d U T d . (Fol lowing [AR90], we use the eigenvectors of A so the columns of U d are ~ 1 <p> To find an appropriate matrix C, the authors of <ref> [AR90] </ref> invoke a theorem from principal components analysis [Rao64], that the best rank-d approximation to A with respect to both the spectral and Frobenius norms is U d d U T d . (Fol lowing [AR90], we use the eigenvectors of A so the columns of U d are ~ 1 ; : : : ; ~ d with eigenvalues 1 : : : n .) This result implies that C = U d 1=2 closest approximation to A = CC T , and thus C <p> are ~ 1 ; : : : ; ~ d with eigenvalues 1 : : : n .) This result implies that C = U d 1=2 closest approximation to A = CC T , and thus C is "equivalent" to V d , meaning the reductions of [FK86] and <ref> [AR90] </ref> are also equivalent. Hence, Arun and Rao choose C = U d 1=2 . <p> Frankle [Fra87] has shown how to exhaustively search a d-dimensional vector space with probes, finding the optimal solution in O (n d1 ) time. The approaches of Frankle and Karp [FK86] and Arun and Rao <ref> [AR90] </ref> use more than d eigenvectors to form a 2-way partitioning in which d may be larger than 2 (in contrast to the approaches of Barnes [Bar82] and Chan et al.[CSZ94]). For both approaches, when d = n, the min-cut problem is exactly equivalent to a geometric problem. <p> It is not hard to show that max-sum vector partitioning is actually NP-complete, although, as discussed earlier, optimum bipartitioning solutions for similar problems have been found with time complexity polynomial in d [FK86] <ref> [AR90] </ref>. Corollary 5.11 jj~y n i jj 2 = H deg (v i ). Corollary 5.11 states that the magnitude of a subset vector gives the cost of the edges cut by its corresponding cluster. <p> = f 0 (P k ): Max Cut: Another problem which has shown recent interest in the literature is the Max-Cut problem [DP91] [DP93] [PR95]: Maximize: f (P k ) = k X jE (C h )j: Goemans and Williamson [GW95] presented an algorithm similar to the hyper-plane approach of <ref> [AR90] </ref> that approximates max-cut bipartitioning within a factor of .878 of optimal. This algorithm was extended to multi-way partitioning by [FJ95]. For the min-cut objective, the equivalent vector partitioning objective is to maximize the sum of the squared magnitudes of the k subset vectors. <p> Equivalently, if each vector is viewed as a multi dimensional unit mass, the center of mass of the vectors in any subset should be close to the origin. The reduction of graph partitioning to this geometric clustering problem was proposed by Arun and Rao <ref> [AR90] </ref> for bipartitioning, but its 146 extension to multi-way partitioning can not be directly deduced from their proof. However, it follows automatically when we use ~ j q j for column j in the matrix V d .
Reference: [AR91] <author> K. S. Arun and V. B. Rao. </author> <title> "New Heuristics and Lower Bounds for Graph Partitioning." </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, </booktitle> <pages> pp. 1172-1175, </pages> <year> 1991. </year>
Reference-contexts: Hence, Arun and Rao choose C = U d 1=2 . Like Barnes [Bar82], they solve the 1-dimensional geometric clustering problem by sorting the entries of ~ 1 , and the 2-dimensional problem by testing all possible hyperplanes which divide the set of points into two clusters. In <ref> [AR91] </ref>, they extend their 2-dimensional hyperplane algorithm to d dimensions, finding the optimal vector partitioning in O (n d (d+3)=2 ) time. Frankle [Fra87] has shown how to exhaustively search a d-dimensional vector space with probes, finding the optimal solution in O (n d1 ) time.
Reference: [ARR95] <author> T. Asano, D. Ranjan, T. Roos, E. Welzl, and P. Widmayer. </author> <title> "Space Filling Curves and Their Use in the Design of Geometric Data Structures." </title> <booktitle> In Proceedings of Second International Symposium on Latin American Theoretical Informatics, </booktitle> <pages> pp. 36-48, </pages> <year> 1995. </year>
Reference-contexts: For a given fixed precision, the curve actually passes through every point, and the order in which points are visited by the curve yields the heuristic SFC ordering. The 65 Sierpinski construction is not the only spacefilling curve that can be used; other constructions have been presented by <ref> [ARR95] </ref> and the authors of [BP88] have discussed how to create a curve tuned specifically for given sets of data.
Reference: [AV93] <author> S. Areibi and A. Vannelli. </author> <title> "Advanced Search Techniques for Circuit Partitioning." </title> <booktitle> In DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <pages> pp. 77-98, </pages> <year> 1993. </year>
Reference-contexts: Each time a new solution is generated via a crossover or mutation operation, FM is run as a post-processing step on the new solution. (A similar approach was proposed by [IM92].) FM post-processing has also been applied to solutions obtained by tabu search, e.g., <ref> [AV93] </ref>. The authors of [BKM94] observed that the set of local minima generated by multiple FM runs exhibit a "big valley" structure: solutions with smallest distance to the lowest-cost local minima have low cost themselves, and furthermore, the best local minima are "central" with respect to the other local minima.
Reference: [AV96] <author> S. Areibi and A. Vannelli. </author> <title> "An Efficient Clustering Technique for Circuit Partitioning." </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, volume IV, </booktitle> <pages> pp. 671-674, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Cluster C 1 is then removed from the hypergraph and the process is repeated until the remaining hypergraph has fewer than U vertices. The strategy of finding a good cluster and "peeling" it from the circuit has also been used by [HK95b] and <ref> [AV96] </ref>. Wei and Cheng [WC91b] also use the Ratio Cut criterion in clustering, iteratively applying their bipartitioning heuristic to the largest remaining cluster as long as the largest cluster contains more than 2% of the total number of vertices. <p> Examples of clustering algorithms designed for two-phase approaches are abundant in both the scientific computing and VLSI design literatures, e.g., [AK93] [AK94b] [BJ93] [BHJ89] [HK92b] [NOP87] [SK93] [VKF95] <ref> [AV96] </ref>. The "two-phase" approach can be extended to a multilevel approach by allowing as many phases as are desired. Figure 6.2 illustrates the multilevel partitioning paradigm with five phases or levels (as in [KK95a]).
Reference: [Avi86] <author> D. Avis. </author> <title> "Diameter Partitioning." </title> <journal> Discrete and Computational Geometry, </journal> <volume> 1 </volume> <pages> 265-276, </pages> <year> 1986. </year>
Reference-contexts: Rao [Rao71], Hubert [Hub73], and Monma and Suri [MS91] proposed optimal polynomial algorithms for finding Min-Diameter bipartitionings of arbitrary instances, and speedups for geometric instances have been found by Asano et al. [ABK86] and Avis <ref> [Avi86] </ref>. These results form the basis of top-down divisive hierarchical heuristics for k &gt; 2 clusters, while an agglomerative implementation of the classic "complete-linkage" method forms the basis of bottom-up approaches (the next section gives a more detailed review).
Reference: [Bak90] <author> H. B. Bakoglu. </author> <title> Circuits, Interconnections, and Packaging for VLSI. </title> <publisher> Addison-Wesley Pub. Co., </publisher> <year> 1990. </year>
Reference-contexts: The current emphasis on a short, top-down, HDL-driven design flow reinforces the need for reliable and effective algorithms. Partitioning heuristics also have a greater impact on system performance as designs become interconnect-dominated. In deep-submicron designs, wire delays will increasingly dominate gate delays <ref> [Bak90] </ref>. Differences between on-chip and 6 off-chip signal delays, the device and power cost of driving off-chip signals, and the increasingly pin-limited nature of large chips all make it desirable to minimize the number of signals traveling off a given chip.
Reference: [Bar82] <author> E. R. Barnes. </author> <title> "An Algorithm for Partitioning the Nodes of a Graph." </title> <journal> SIAM Journal of Algebraic and Discrete Methods, </journal> <volume> 3(4) </volume> <pages> 541-550, </pages> <year> 1982. </year>
Reference-contexts: Individual cluster size constraints may be prescribed, e.g., the works <ref> [Bar82] </ref> [RW95] require that A (C h ) = m h for user-prescribed cluster sizes m 1 m 2 : : : m k , or one may impose individual cluster constraints L h A (C h ) U h , 1 h k. <p> When d &lt; n eigenvectors are used, the vector partitioning instance is an approximation of the graph partitioning instance, but as d gets larger, the approximation becomes progressively better until it is exact for d = n. Hence, unlike other spectral partitioning works <ref> [Bar82] </ref> [HMV92] [RW95] [CSZ94], this result shows that the correct approach to multi-way spectral partitioning is to use as many eigenvectors as are practically possible. * We propose a greedy ordering heuristic for our vector partitioning problem, and we demonstrate that the resulting orderings can be used to construct high-quality partitioning <p> To this end, in this section we discuss as many works in this section as possible in terms of Q, even if the original paper used A. For example, the discussion of Barnes's work <ref> [Bar82] </ref> below is given in terms of Q, which allows us to establish the equivalence of lower bounds due to Barnes and lower bounds to Donath and Hoffman. <p> Thus, ~ 2 is commonly referred to as the Fiedler vector and 2 as the Fiedler value. Spectral bipartitioning and such variants as finding vertex separators have been explored by several researchers, notably in the scientific computing community, e.g., <ref> [Bar82] </ref> [PSL90] [Sim91] [HL95a] [GM95] [LPS93] [ST96]. We make the following observation: Theorem 5.3 Spectral bisection may have an arbitrarily high performance ratio. <p> In describing the following algorithm which is due to Barnes, we use the Laplacian instead of the adjacency matrix to be consistent with the previous 120 discussion. Barnes <ref> [Bar82] </ref> observed that the Laplacian and partitioning matrices can be combined to yield the following equation: jjQ + P jj 2 = jjQjj 2 + 2 X q ij p ij + jjP 2 jj (5.3) = 2f (P k ) + jjQjj 2 + k X m 2 Since jjQjj <p> Theorem 5.4 [DH73] f (P k ) P k Proof: We provide an alternative proof to Donath and Hoffman [DH73] that uses the observations of Barnes <ref> [Bar82] </ref>. <p> Notice that Theorem 5.4 also implies that an optimal partitioning solution would be obtained if each ratioed indicator vector ~ R h could be set to ~ h , or equivalently, assigning R = U k . However, U k is generally not a valid ratioed partitioning matrix. Barnes <ref> [Bar82] </ref> justifies his approach to finding a valid R that best approximates U k as follows. <p> Theoretical motivations for this type of approach are given in [AK96b]. 5.2.4 The Intuition of Blanks We have observed a potential weakness in the approaches of <ref> [Bar82] </ref> [CSZ94], namely, that each cluster is associated with a single eigenvector, but that the corresponding indicator vector may not be close to its eigenvector. <p> Hence, Arun and Rao choose C = U d 1=2 . Like Barnes <ref> [Bar82] </ref>, they solve the 1-dimensional geometric clustering problem by sorting the entries of ~ 1 , and the 2-dimensional problem by testing all possible hyperplanes which divide the set of points into two clusters. <p> The approaches of Frankle and Karp [FK86] and Arun and Rao [AR90] use more than d eigenvectors to form a 2-way partitioning in which d may be larger than 2 (in contrast to the approaches of Barnes <ref> [Bar82] </ref> and Chan et al.[CSZ94]). For both approaches, when d = n, the min-cut problem is exactly equivalent to a geometric problem. In the probing algorithm of Frankle and Karp, if an optimal probe vector is found in n dimensions, this will correspond to an optimal bipartitioning solution. <p> We now show that the spectra of A (or in fact A + D for some diagonal matrix D) can also be used. The following result is due to Barnes <ref> [Bar82] </ref>: Theorem 5.13 f (P k ) = P n P n j=1 a ij trace (X T AX).
Reference: [Bar96] <author> S. T. Barnard. </author> <title> "A Parallel Implementation of MSRB." </title> <booktitle> In Proceedings of the 29th Hawaii International Conference on System Sciences, </booktitle> <volume> volume 1, </volume> <pages> pp. 594-603, </pages> <year> 1996. </year>
Reference-contexts: This technique permits the efficient computation of the Fiedler vector for very large graphs. A similar approach was later proposed by [DR95]. The works <ref> [Bar96] </ref> and [BS95] later showed how to utilize this multilevel technique within a parallel recursive implementation of spectral bisection. Karypis and Kumar [KK95a] have recently developed the Metis multilevel graph partitioning package (URL: http://www.cs.umn.edu/users/kumar).
Reference: [Ben82] <author> J. P. </author> <month> Benzecri. </month> <institution> "Construction d'une Classification Ascendante Hierarchique par la Rechereche en Chaine des Voisins Reciproques." Les Cahiers de l'Analyse des Donnees, VII(2):209-218, </institution> <year> 1982. </year>
Reference: [Ber76] <author> C. Berge. </author> <title> Graphs and Hypergraphs. </title> <publisher> American Elsevier, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: In the corresponding hyper-graph H (V; E) with E = fe 1 ; e 2 ; : : : ; e m g, each module corresponds to a vertex and each net corresponds to a hyperedge (see <ref> [Ber76] </ref> for basic concepts of graphs and hypergraphs). Each hyperedge e 2 E is a subset of V containing the modules which are connected by the corresponding net; we may assume that jej 2.
Reference: [BG89] <author> A. Bouloutas and P. M. Gopal. </author> <title> "Some Graph Partitioning Problems and Algorithms Related to Routing in Large Computer Networks." </title> <booktitle> In 9th International Conference on Distributed Computing Systems, </booktitle> <pages> pp. 362-370, </pages> <year> 1989. </year>
Reference-contexts: Consequently, clustered, hierarchical network architectures are used so that nodes need maintain only a limited, local knowledge of the network (see e.g., [AP90] <ref> [BG89] </ref>). Thus, a clustering algorithm should divide the network into small clusters to maximize the amount of local communication while simultaneously minimizing interclus ter connectivity. * Image Processing and Pattern Recognition: In image processing, partitioning is used to identify natural clusters of pixels which form images.
Reference: [BHJ89] <author> T. Bui, C. Heigham, C. Jones, and T. Leighton. </author> <title> "Improving the Performance of the Kernighan-Lin and Simulated Annealing Graph Bisection Algorithms." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 775-778, </pages> <year> 1989. </year>
Reference-contexts: David Johnson (dsj@research.att.com) of AT&T Bell Laboratories also maintains a set of test cases that he has used for simulated annealing studies [JAM89]. Finally, early works in partitioning used various classes of random inputs <ref> [BHJ89] </ref> [GPS90] [San89] [WC89], but this is less common with the increased availability of "real circuits". 1.7 Thesis Overview The remainder of this thesis is divided into five main chapters: * Chapter 2 explores the problem of dividing a vertex ordering into a multi-way partitioning. <p> Related experiments [HK92b] [AK93] have supported the intuition of Bui et al. <ref> [BHJ89] </ref> and Lengauer [Len90] that good local minima in the original instance are more easily reached from good local minima in the clustered instance. <p> Figure 4.1 (b) shows a hierarchical algorithm that simultaneously merges as many cluster pairs as possible, yielding dlog ne levels. hierarchical construction. In <ref> [BHJ89] </ref>, Bui et al. propose matching-based compaction as a clustering 83 strategy. A matching in a hypergraph is a set of disjoint pairs of vertices, such that each pair is incident to a common hyperedge. Bui et al. [BHJ89] find a random maximal matching and merge each matched pair of vertices <p> In <ref> [BHJ89] </ref>, Bui et al. propose matching-based compaction as a clustering 83 strategy. A matching in a hypergraph is a set of disjoint pairs of vertices, such that each pair is incident to a common hyperedge. Bui et al. [BHJ89] find a random maximal matching and merge each matched pair of vertices into a cluster: this will ideally result in a set of n 2 clusters; matchings can be iteratively computed on the contracted hypergraph, yielding a hierarchy of clusterings with size n 4 , n 8 , etc. <p> heuristic and the DP-RP algorithm are essential in our construction, we compare WINDOW to many other ordering heuristics and split all orderings with DP-RP. 4.5.1 WINDOW Versus Previous Clustering Methods We begin by comparing clusterings derived by our WINDOW + DP-RP methodology to the matching-based compaction algorithm (MBC) algorithm of <ref> [BHJ89] </ref>, the random walk (RW-ST) algorithm of [HK92b], and the simulated annealing (ANNEAL) algorithm of [SS93]. Table 4.1 compares the four clustering algorithms in terms of the Scaled Cost, Absorption and DS objectives. Comparisons of WINDOW with the AGG spectral-based clustering algorithm can be found in [AK96a]. <p> Examples of clustering algorithms designed for two-phase approaches are abundant in both the scientific computing and VLSI design literatures, e.g., [AK93] [AK94b] [BJ93] <ref> [BHJ89] </ref> [HK92b] [NOP87] [SK93] [VKF95] [AV96]. The "two-phase" approach can be extended to a multilevel approach by allowing as many phases as are desired. Figure 6.2 illustrates the multilevel partitioning paradigm with five phases or levels (as in [KK95a]). <p> The coarsening step finds random maximal matching as in <ref> [BHJ89] </ref> [BJ93] and the multilevel algorithm of [PMC94].
Reference: [BJ93] <author> T. Bui and C. Jones. </author> <title> "A Heuristic for Reducing Fill in Sparse Matrix Factorization." </title> <booktitle> In Proceedings of the 6th SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <pages> pp. 445-452, </pages> <year> 1993. </year>
Reference-contexts: Examples of clustering algorithms designed for two-phase approaches are abundant in both the scientific computing and VLSI design literatures, e.g., [AK93] [AK94b] <ref> [BJ93] </ref> [BHJ89] [HK92b] [NOP87] [SK93] [VKF95] [AV96]. The "two-phase" approach can be extended to a multilevel approach by allowing as many phases as are desired. Figure 6.2 illustrates the multilevel partitioning paradigm with five phases or levels (as in [KK95a]). <p> The coarsening step finds random maximal matching as in [BHJ89] <ref> [BJ93] </ref> and the multilevel algorithm of [PMC94].
Reference: [BKM94] <author> K. Boese, A. Kahng, and S. Muddu. </author> <title> "A New Adaptive Multi-Start Technique for Combinatorial Global Optimizations." </title> <journal> Operations Research Letters, </journal> <volume> 16 </volume> <pages> 101-113, </pages> <year> 1994. </year>
Reference-contexts: Each time a new solution is generated via a crossover or mutation operation, FM is run as a post-processing step on the new solution. (A similar approach was proposed by [IM92].) FM post-processing has also been applied to solutions obtained by tabu search, e.g., [AV93]. The authors of <ref> [BKM94] </ref> observed that the set of local minima generated by multiple FM runs exhibit a "big valley" structure: solutions with smallest distance to the lowest-cost local minima have low cost themselves, and furthermore, the best local minima are "central" with respect to the other local minima.
Reference: [Bla85] <author> J. Blanks. </author> <title> "Near-Optimal Placement Using a Quadratic Objective Function." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 609-615, </pages> <year> 1985. </year>
Reference-contexts: Blanks <ref> [Bla85] </ref> also shared this intuition and illustrated (for placement, though it also holds for bipartitioning) that the closest legal solution to the Fiedler vector, i.e., the indicator vector ~x that maximizes ~x T ~ 2 , will generally not be optimum. Figure 5.3 gives an abstract visualization of this concept. <p> The indicator vector ~x that maximally projects onto ~ 2 , labeled with A in the figure, certainly does not have to be identical to B. in <ref> [Bla85] </ref>. We have seen this effect in practice in our own experiments. For the 11 test cases in Table 5.1, we converted each circuit to a graph using the clique model with weight 6 jej (jej+1) and computed the Fiedler vector and value for these graphs.
Reference: [BM94a] <author> T. N. Bui and B. R. Moon. </author> <title> "A Fast and Stable Hybrid Genetic Algorithm for the Ratio-Cut Partitioning Problem on Hypergraphs." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 664-669, </pages> <year> 1994. </year>
Reference-contexts: Hence, many heuristics have sought to utilize FM as more of a post-processing step within some other optimization. For example, Bui and Moon <ref> [BM94a] </ref> [BM94b] use FM in their genetic algorithm for circuit bipartitioning.
Reference: [BM94b] <author> T. N. Bui and B. R. Moon. </author> <title> "A Genetic Algorithm for a Special Class of the Quadratic Assignment Problem." </title> <booktitle> In DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <volume> volume 16, </volume> <pages> pp. 99-116, </pages> <year> 1994. </year>
Reference-contexts: Hence, many heuristics have sought to utilize FM as more of a post-processing step within some other optimization. For example, Bui and Moon [BM94a] <ref> [BM94b] </ref> use FM in their genetic algorithm for circuit bipartitioning.
Reference: [Bop87] <author> R. B. Boppana. </author> <title> "Eigenvalues and Graph Bisection: An Average-Case Analysis." </title> <booktitle> In Proceedings of the IEEE Symposium on the Foundations of Computer Science, </booktitle> <pages> pp. 280-285, </pages> <year> 1987. </year>
Reference-contexts: They also permit the diagonal entries of A to be perturbed before computing the eigenvectors, leading to tighter lower bounds than those given by Donath and Hoffman [DH73]. Further, they extend the average case bisection bound of Boppana <ref> [Bop87] </ref> to k &gt; 2 (see [Len90] for a more complete discussion of spectrally derived lower bounds). Chan et al. [CSZ94] extend Theorem 5.4 to the Scaled Cost objective, proving for this objective that f (P k ) P k i=1 i . <p> We believe that diagonal optimization would aid vector partitioning, because the d optimized eigenvectors would better approximate the exact n-dimensional vector partitioning instance than the d unoptimized vectors. * Find and apply lower bounds. Graph spectra have been very useful for constructing lower bounds on partitioning [DH73] <ref> [Bop87] </ref> [Len90] [HK92c] [RW95], e.g., 2 is a lower bound on the cut of any bipartitioning. We would like to answer such questions as, "Assume that we have the optimal solution for a d-dimensional vector partitioning instance.
Reference: [BP88] <author> J. J. Bartholdi and L. K. Platzman. </author> <title> "Heuristics Based on Spacefilling Curves for Combinatorial Problems in Euclidean Space." </title> <journal> Management Sciences, </journal> <volume> 34(3) </volume> <pages> 291-305, </pages> <year> 1988. </year>
Reference-contexts: Because of their widespread availability, ease of implementation and previous heuristic study, we choose to apply three ordering heuristics from the TSP literature; these are the 3-Opt heuristic of Lin [Lin65], the L-K heuristic of Lin and Kernighan [LK73], and the spacefilling curve (SFC) heuristic of Bartholdi and 63 Platzman <ref> [BP88] </ref>. Johnson [Joh90] has reported that 3-Opt and Lin-Kernighan (along with an iterative version of Lin-Kernighan) generally return tours with very low cost using very little runtime, and that these heuristics are preferable to constructive, simulated annealing, or genetic approaches. <p> Empirical studies by [LK73] on Euclidean and nonmetric problems have shown that the run time in practice grows approximately as n 2:2 ; however, the algorithm is PLS-complete [Pap92], i.e., no polynomial bounds on the number of iterations exist. The spacefilling curve (SFC) heuristic of <ref> [BP88] </ref> uses a recursive construction of Sierpinski (1912), the 2-dimensional case of which is shown in Figure 3.11. In the figure, the successive approximations become progressively refined until the curve "fills" up the unit square, passing arbitrarily close to every point. <p> The 65 Sierpinski construction is not the only spacefilling curve that can be used; other constructions have been presented by [ARR95] and the authors of <ref> [BP88] </ref> have discussed how to create a curve tuned specifically for given sets of data. The SFC ordering will typically have higher cost than its 3-Opt or Lin-Kernighan counterparts, but offers the possible advantage of a predetermined structure in that it entirely visits one orthant before moving to the next. <p> For the Sierpinski construction, fi can be evaluated in constant time (assuming r is constant) for a given point. Hence, the overall construction is dominated by the sorting step, and thus requires O (n log n) time complexity. appear in <ref> [BP88] </ref> and we believe it was omitted as an oversight. We number the 2 r orthants from 0 to 2 r 1, corresponding to the order in which they are visited by the Sierpinski curve. <p> Many other linear ordering constructions might work equally well if not better. For example, one could orthogonally project the points onto the line determined by least-squares fit or linear regression to induce an ordering. Alternatively, the authors of <ref> [BP88] </ref> outlined a spacefilling curve construction that can be specifically tuned to given classes of non-uniform data sets.
Reference: [Bru78] <author> P. Brucker. </author> <title> "On the Complexity of Clustering Problems." </title> <editor> In M. Beck-man and H. P. Kunzi, editors, </editor> <booktitle> Optimization and Operations Research, 202 volume 157 of Lecture Notes in Economics and Mathematical Systems, </booktitle> <pages> pp. 45-54. </pages> <publisher> Springer, </publisher> <address> Heidelberg, </address> <year> 1978. </year>
Reference-contexts: An algorithm has a performance ratio of r if it always returns a solution P k such 49 that f (P k )=f ( ^ P k ) r. Min-Diameter partitioning is NP-Complete in two or more dimensions for k 3 (e.g., Brucker <ref> [Bru78] </ref> and Hansen and Delattre [HD78]). Non-polynomial optimal algorithms have been proposed by Rao [Rao71], Hansen and Delattre [HD78], and Guenoche [Gu93] for this case; such algorithms can be effective in practice provided that the number of vertices is not too large. Brucker [Bru78] showed that Min-Diameter partitioning can be solved <p> more dimensions for k 3 (e.g., Brucker <ref> [Bru78] </ref> and Hansen and Delattre [HD78]). Non-polynomial optimal algorithms have been proposed by Rao [Rao71], Hansen and Delattre [HD78], and Guenoche [Gu93] for this case; such algorithms can be effective in practice provided that the number of vertices is not too large. Brucker [Bru78] showed that Min-Diameter partitioning can be solved in polynomial time when the instance is 1-dimensional. <p> For geometric instances, Min-Diameter algorithms with a performance ratio of 2 have been given by Gonzalez [Gon85] and by Feder and Greene [FG88]. Brucker <ref> [Bru78] </ref> showed that the Min-Sum-Diameters objective is also NP-hard for k &gt; 2; optimal 2-way partitioning algorithms for this objective have been given by Hansen and Jaumard [HJ87], Monma and Suri [MS91], and Hershberger [Her91]. Optimal max-split partitionings can be found via the well-known "single-linkage" method.
Reference: [BS94a] <author> S. T. Barnard and H. D. Simon. </author> <title> "A Fast Multilevel Implementation of Recursive Spectral Bisection for Partitioning Unstructured Problems." </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 6(2) </volume> <pages> 101-117, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: This permits the refinement algorithm to avoid bad local minima ("basins of attraction") via large steps at high levels, and also to find a good final solution via refinement at the 179 low levels. Multilevel partitioning approaches have been especially prominent in the scientific computing literature. Barnard and Simon <ref> [BS94a] </ref> have used multilevel techniques not directly for partitioning, but rather to compute the Fiedler vector for spectral bisection. They repeatedly coarsen the graph until it is small enough to efficiently compute the Fiedler vector; the refinement step in uncoars-ening tunes the Fiedler vector previously computed in the coarser graph.
Reference: [BS94b] <author> D. Brasen and G. Saucier. </author> <title> "FPGA Package Partitioning for Performance." </title> <booktitle> In Proc. ACM/SIGDA International Workshop on Field-Programmable Gate Arrays, </booktitle> <year> 1994. </year>
Reference-contexts: Brasen and Saucier <ref> [BS94b] </ref> [BS94c] later modified this algorithm to account for critical path delays. Sawkar and Thomas [ST95] use these same cones as the basis of a set covering heuristic (cf. [CLC94]). Another cone-based construction was proposed by Cong and Ding [CD93], using a slightly different definition for cones.
Reference: [BS94c] <author> D. Brasen and G. Saucier. </author> <title> "FPGA Partitioning for Critical Paths." </title> <booktitle> In Proc. European Design and Test Conf., </booktitle> <pages> pp. 99-103, </pages> <year> 1994. </year>
Reference-contexts: Brasen and Saucier [BS94b] <ref> [BS94c] </ref> later modified this algorithm to account for critical path delays. Sawkar and Thomas [ST95] use these same cones as the basis of a set covering heuristic (cf. [CLC94]). Another cone-based construction was proposed by Cong and Ding [CD93], using a slightly different definition for cones.
Reference: [BS95] <author> S. T. Barnard and H. Simon. </author> <title> "A Parallel Implementation of Multilevel Recursive Spectral Bisection for Application to Adaptive Unstructured Meshes." </title> <booktitle> In Proceedings of the Seventh SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <pages> pp. 627-632, </pages> <year> 1995. </year>
Reference-contexts: This technique permits the efficient computation of the Fiedler vector for very large graphs. A similar approach was later proposed by [DR95]. The works [Bar96] and <ref> [BS95] </ref> later showed how to utilize this multilevel technique within a parallel recursive implementation of spectral bisection. Karypis and Kumar [KK95a] have recently developed the Metis multilevel graph partitioning package (URL: http://www.cs.umn.edu/users/kumar).
Reference: [CD93] <author> J. Cong and Y. Ding. </author> <title> "On Area/Depth Trade-off in LUT-Based FPGA Technology Mapping." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 213-218, </pages> <year> 1993. </year>
Reference-contexts: Brasen and Saucier [BS94b] [BS94c] later modified this algorithm to account for critical path delays. Sawkar and Thomas [ST95] use these same cones as the basis of a set covering heuristic (cf. [CLC94]). Another cone-based construction was proposed by Cong and Ding <ref> [CD93] </ref>, using a slightly different definition for cones.
Reference: [CDB86] <author> R. L. Cannon, J. V. Dave, and J. C. Bezdek. </author> <title> "Efficient Implementation of the Fuzzy c-Means Clustering Algorithms." </title> <journal> IEEE Trans. Pattern Analysis and Machine Intelligence, </journal> <volume> 8(2), </volume> <month> March </month> <year> 1986. </year>
Reference-contexts: Matthews and Hearne [MH91] do not bother to actually quantify the relationships between objects since they "believe that it is particularly important : : : to fit the data without distorting the data : : :". See, e.g., <ref> [CDB86] </ref> [WL93] [MF95] for various partitioning formulations and algorithms. The primary research domain of this thesis is the physical design of VLSI circuits.
Reference: [CHK91] <author> J. Cong, L. Hagen, and A. B. Kahng. </author> <title> "Random Walks for Circuit Clustering." </title> <booktitle> In Proc. IEEE Intl. ASIC Conf., </booktitle> <pages> pp. </pages> <address> 14.2.1-14.2.4, </address> <year> 1991. </year>
Reference-contexts: In other words, every consecutive pair of vertices shares a common hyperedge. Cong et al. <ref> [CHK91] </ref> define a cycle fw p ; w p+1 ; : : : ; w q g as a contiguous subsequence of the random walk such that w p = w q and w i 6= w j for all i and j with p i &lt; j &lt; q.
Reference: [CHK92] <author> J. Cong, L. Hagen, and A. B. Kahng. </author> <title> "Net Partitions Yield Better Module Partitions." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 47-52, </pages> <year> 1992. </year>
Reference-contexts: Other k-way partitioning objectives have been proposed for circuit clustering. The DS objective <ref> [CHK92] </ref> is: DS: Maximize f (P k ) = n h=1 avdeg (C h ) separation (C h ) where avdeg (C h ) is the average number of hyperedges incident to each vertex in C h that have at least two vertices in C h , and separation (C h <p> One must therefore seek a completion of the hyperedge partitioning which assigns each shared vertex to a single cluster to optimize the vertex partitioning objective. Approaches include "voting" [HK92c] and bipartite matching <ref> [CHK92] </ref> [CLS96]. All of these approaches focus on bipartitioning. If a multi-way partitioning is desired, such approaches must be applied recursively, e.g., [PSL90] [WC91a]. The weakness of recursive hierarchical partitioning is that early greedy decisions for small k may result in poor solutions when continued to larger values of k. <p> For real VLSI circuits, this graph is typically quite sparse due to vertex degree bounds [HK91]. In this representation, a partitioning solution corresponds to a partitioning of hyperedges; thus, this solution must be transformed back into a partitioning of the vertices [HK92c] <ref> [CHK92] </ref> [CLS94]. * Rowan and Vannelli [VR85] propose an alternative construction of the ad jacency matrix which uses edge weights a ij = jN (v i )nN (v j )j + jN (v j )nN (v i )j The term jN (v i )nN (v j )j is the number of <p> Non-geometric graph partitioning has no analogous natural similarity measure between vertices (cf. the many ad hoc means in the literature, such as all-pairs shortest paths, k l connectivity [GPS90], degree=separation <ref> [CHK92] </ref>, etc.). Because the min-cut partitioning objective seeks to minimize f and the vector partitioning objective seeks to maximize g, the two objectives appear incompatible. However, following [FK86] we may transform f into a maximization objective.
Reference: [CL96] <author> P. Ciarlet and F. Lamour. </author> <title> "On the Validity of a Front-Oriented Approach to Partitioning Large Sparse Graphs with a Connectivity Constraint." Numerical Algorithms, </title> <address> 12(1-2):193-214, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: Search-based approaches traverse the graph and grow clusters as vertices are visited, starting a new cluster after the current cluster has reached its size threshold <ref> [CL96] </ref>.
Reference: [CLB94] <author> J. Cong, Z. Li, and R. Bagrodia. </author> <title> "Acyclic Multi-Way Partitioning of Boolean Networks." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 670-675, </pages> <year> 1994. </year> <month> 203 </month>
Reference-contexts: (ii) if u 2 F F C (v), u 6= v, and u is the source of a net e, then w 2 F F C (v) for all destination vertices w of e. 2 Cong and Ding construct maximal fanout free cones for technology mapping, and the authors of <ref> [CLB94] </ref> use these cones as clusters for acyclic, multi-way partitioning.
Reference: [CLC94] <author> N.-C. Chou, L.-T. Liu, C.-K. Cheng, W.-J. Dai, and R. Lindelof. </author> <title> "Cir--cuit Partitioning for Huge Logic Emulation Systems." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 244-249, </pages> <year> 1994. </year>
Reference-contexts: For a given number of clusters k, FPGA partitioning seeks to assign vertices to clusters such that jC h j U with the following objective: FPGA Partitioning: Minimize f (P k ) = max jE (C h )j This objective has been studied in, e.g., <ref> [CLC94] </ref> [HK95a] [KBK93]. The final objective that we study is motivated by data classification. With this application, an instance consists of a complete graph in which each vertex represents a data point and each edge represents the dissimilarity between a pair of data points. <p> While the approach is amenable to parallel processing, finding dense cliques by enumeration 86 can be computationally expensive. Also, by discarding hyperedges with more than five vertices, the algorithm is likely to lose important clustering information. Ratio Cut: Chou et al. <ref> [CLC94] </ref> and Wei and Cheng [WC91b] have constructed clusterings based on the Ratio Cut objective. The algorithm of [CLC94] applies the Ratio Cut algorithm of [WC89] to construct a bipartitioning fC 1 ; C 2 g such that C 1 U for some small U , e.g., U = 50. <p> Also, by discarding hyperedges with more than five vertices, the algorithm is likely to lose important clustering information. Ratio Cut: Chou et al. <ref> [CLC94] </ref> and Wei and Cheng [WC91b] have constructed clusterings based on the Ratio Cut objective. The algorithm of [CLC94] applies the Ratio Cut algorithm of [WC89] to construct a bipartitioning fC 1 ; C 2 g such that C 1 U for some small U , e.g., U = 50. <p> Brasen and Saucier [BS94b] [BS94c] later modified this algorithm to account for critical path delays. Sawkar and Thomas [ST95] use these same cones as the basis of a set covering heuristic (cf. <ref> [CLC94] </ref>). Another cone-based construction was proposed by Cong and Ding [CD93], using a slightly different definition for cones.
Reference: [CLS94] <author> J. Cong, W. Labio, and N. Shivakumar. </author> <title> "Multi-Way VLSI Circuit Partitioning Based on Dual Net Representation." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 56-62, </pages> <year> 1994. </year>
Reference-contexts: For real VLSI circuits, this graph is typically quite sparse due to vertex degree bounds [HK91]. In this representation, a partitioning solution corresponds to a partitioning of hyperedges; thus, this solution must be transformed back into a partitioning of the vertices [HK92c] [CHK92] <ref> [CLS94] </ref>. * Rowan and Vannelli [VR85] propose an alternative construction of the ad jacency matrix which uses edge weights a ij = jN (v i )nN (v j )j + jN (v j )nN (v i )j The term jN (v i )nN (v j )j is the number of hyperedges
Reference: [CLS96] <author> J. Cong, W. Labio, and N. Shivakumar. </author> <title> "Multiway VLSI Circuit Partitioning Based on Dual Net Representation." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 15(4) </volume> <pages> 396-409, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: One must therefore seek a completion of the hyperedge partitioning which assigns each shared vertex to a single cluster to optimize the vertex partitioning objective. Approaches include "voting" [HK92c] and bipartite matching [CHK92] <ref> [CLS96] </ref>. All of these approaches focus on bipartitioning. If a multi-way partitioning is desired, such approaches must be applied recursively, e.g., [PSL90] [WC91a]. The weakness of recursive hierarchical partitioning is that early greedy decisions for small k may result in poor solutions when continued to larger values of k.
Reference: [CM69] <author> E. Cuthill and J. McKee. </author> <title> "Reducing the Bandwidth of Sparse Symmetric Matrices." </title> <type> Technical Report AML-40-69, </type> <institution> Naval Ship Research and Development Center, </institution> <year> 1969. </year>
Reference-contexts: Within the context of our experimental testbed, the new ordering construction by itself outperforms existing graph ordering constructions [HK92c] [NI92] <ref> [CM69] </ref> [Kin69]. <p> Since non-zeros in an n fi n symmetric matrix can be viewed as an adjacency matrix representation of a graph with n vertices, row reordering in a matrix directly corresponds to vertex ordering in a graph: * The Cuthill-McKee algorithm <ref> [CM69] </ref> for minimizing bandwidth is a BFS variant in which ties are broken in favor of the vertex with smallest degree. * The King algorithm [Kin69] is a min-perimeter approach: it builds a cluster by iteratively adding the vertex that minimizes the perimeter of the cluster (the sequence in which vertices <p> two-phase FM optimization. (It is somewhat encouraging that WINDOW appears to outperform ANNEAL for the three largest test cases.) 4.5.2 WINDOW Versus Other Vertex Orderings Finally, we compared WINDOW orderings to seven other vertex ordering constructions: DFS, BFS, EIG1 [HK92c], SFC [AK94c], Max-Adjacency (MA) [NI92], King [Kin69] and Cuthill-McKee (CM) <ref> [CM69] </ref>. We ran DP-RP on the vertex ordering constructed by each algorithm for each test case, again with L = 1, U = 20 and k as specified in Table 4.1.
Reference: [CP68] <author> H. R. Charney and D. L. Plato. </author> <title> "Efficient Partitioning of Components." </title> <booktitle> In Proc. Design Automation Workshop, </booktitle> <pages> pp. 16-0 - 16-21, </pages> <year> 1968. </year>
Reference-contexts: This model is inspired by linear placement into fixed locations at unit separation <ref> [CP68] </ref>: since a hyperedge e must span je slots over a distance of at least jej 1, the weighting should be inversely proportional to jej 1 so that the objective does not "try too hard" to place the vertices into an impossibly small span of slots (also see [HK92a]). * In
Reference: [CS93] <author> J. Cong and M'L. Smith. </author> <title> "A Parallel Bottom-Up Clustering Algorithm with Applications to Circuit Partitioning in VLSI Design." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 755-760, </pages> <year> 1993. </year>
Reference-contexts: Cliques: A clique is a densest-possible subgraph, and hence forms a very intuitive cluster. The algorithm of Cong and Smith <ref> [CS93] </ref> first constructs an undirected graph from the circuit hypergraph by applying the clique model with edge weight 2 jej to all hyperedges with jej 5. <p> Thus, many works discard large nets to maintain sparsity <ref> [CS93] </ref> [CSZ94] [HMV92]. <p> Cong and Smith <ref> [CS93] </ref> proposed applying their clique finding clustering algorithm (see Chapter 4) as the coarsening step in a multilevel circuit bipartitioning algorithm. More recently, Hauck and Borriello performed a detailed study of multilevel FPGA partitioning.
Reference: [CSZ94] <author> P. K. Chan, M. D. F. Schlag, and J. Y. Zien. </author> <title> "Spectral K-Way Ratio-Cut Partitioning and Clustering." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 13(8) </volume> <pages> 1088-1096, </pages> <year> 1994. </year>
Reference-contexts: Note that the two objectives are equivalent for undirected graphs since all cut edges are incident to exactly two clusters. As with bipartitioning, it is possible to integrate cut and cluster size balance within a single objective. To this end, Chan et al. <ref> [CSZ94] </ref> and Yeh et al. [YCL92] respectively proposed the Scaled Cost and Cluster Ratio objectives. <p> Unlike previous methods <ref> [CSZ94] </ref>, this objective integrates both vector magnitude and direction. * Our main contribution shows that when all n eigenvectors of the Laplacian are used, the min-cut graph partitioning problem reduces to vector partitioning. <p> When d &lt; n eigenvectors are used, the vector partitioning instance is an approximation of the graph partitioning instance, but as d gets larger, the approximation becomes progressively better until it is exact for d = n. Hence, unlike other spectral partitioning works [Bar82] [HMV92] [RW95] <ref> [CSZ94] </ref>, this result shows that the correct approach to multi-way spectral partitioning is to use as many eigenvectors as are practically possible. * We propose a greedy ordering heuristic for our vector partitioning problem, and we demonstrate that the resulting orderings can be used to construct high-quality partitioning solutions. <p> edge cost may 110 vary from jej jej 2 ) 2 w depending on the distribution of vertices; thus, Frankle and Karp set w = ( 2 jej ) 3=2 to minimize the worst-case deviation of cost from the square of the span (this model has also been used by <ref> [CSZ94] </ref>). * Hadley et al. [HMV92] propose a weighting scheme that depends on both jej and k, and guarantees that the cost of splitting e into k clusters will be bounded above by one. * For the maximum cost of a cut hyperedge to be one, Donath [Don88] shows that the <p> Thus, many works discard large nets to maintain sparsity [CS93] <ref> [CSZ94] </ref> [HMV92]. <p> Further, they extend the average case bisection bound of Boppana [Bop87] to k &gt; 2 (see [Len90] for a more complete discussion of spectrally derived lower bounds). Chan et al. <ref> [CSZ94] </ref> extend Theorem 5.4 to the Scaled Cost objective, proving for this objective that f (P k ) P k i=1 i . <p> The KP algorithm of <ref> [CSZ94] </ref> first finds an orthogonal basis of k "prototype vectors" and then constructs k clusters by assigning each vertex to its closest prototype according to the cosine metric. This is done for all vertices whose corresponding vectors are within 8 radians of a prototype vector. <p> Theoretical motivations for this type of approach are given in [AK96b]. 5.2.4 The Intuition of Blanks We have observed a potential weakness in the approaches of [Bar82] <ref> [CSZ94] </ref>, namely, that each cluster is associated with a single eigenvector, but that the corresponding indicator vector may not be close to its eigenvector. <p> Our first theorem is a well-known extension of Theorem 5.2 (e.g., <ref> [CSZ94] </ref>). Theorem 5.6 f (P k ) = trace (X T QX). <p> speedups infeasible. 5.7 Experimental Results In this section, we present four sets of experiments that we performed with Melo: * Comparisons of the weighting schemes proposed in the previous section, * Comparisons with different values of d, * Multi-way partitioning comparisons with the RSB (recursive spectral bi partitioning) and KP <ref> [CSZ94] </ref> algorithms, and * Balanced bipartitioning comparisons with the SB (spectral bipartitioning) and PARABOLI [RDJ94] algorithms. The eigenvector computations were performed using LASO2 code [Sco80], with a driver provided by the authors of [CSZ94]. <p> different values of d, * Multi-way partitioning comparisons with the RSB (recursive spectral bi partitioning) and KP <ref> [CSZ94] </ref> algorithms, and * Balanced bipartitioning comparisons with the SB (spectral bipartitioning) and PARABOLI [RDJ94] algorithms. The eigenvector computations were performed using LASO2 code [Sco80], with a driver provided by the authors of [CSZ94]. Before the eigenvectors were computed, each hypergraph was transformed into a graph using the clique model with 150 weight function 4 jej (jej1) 2 jej 2 2 jej to each edge in the clique (see Section 5.1.1). <p> Table 5.4 reports results for our third set of experiments, which compare Melo to the multi-way partitioning algorithms RSB [HK92c] and KP <ref> [CSZ94] </ref>. The code for RSB and KP was obtained from the authors of [CSZ94]; however, the values for RSB and KP reported in Table 5.4 are considerably better than the values reported in [CSZ94]. 4 RSB constructs a bipartitioning by choosing the split 4 For the experiments performed in [CSZ94], hyperedges <p> Table 5.4 reports results for our third set of experiments, which compare Melo to the multi-way partitioning algorithms RSB [HK92c] and KP <ref> [CSZ94] </ref>. The code for RSB and KP was obtained from the authors of [CSZ94]; however, the values for RSB and KP reported in Table 5.4 are considerably better than the values reported in [CSZ94]. 4 RSB constructs a bipartitioning by choosing the split 4 For the experiments performed in [CSZ94], hyperedges with jej &gt; 99 were removed before the eigenvectors were computed using the <p> our third set of experiments, which compare Melo to the multi-way partitioning algorithms RSB [HK92c] and KP <ref> [CSZ94] </ref>. The code for RSB and KP was obtained from the authors of [CSZ94]; however, the values for RSB and KP reported in Table 5.4 are considerably better than the values reported in [CSZ94]. 4 RSB constructs a bipartitioning by choosing the split 4 For the experiments performed in [CSZ94], hyperedges with jej &gt; 99 were removed before the eigenvectors were computed using the Frankle clique model. <p> KP <ref> [CSZ94] </ref>. The code for RSB and KP was obtained from the authors of [CSZ94]; however, the values for RSB and KP reported in Table 5.4 are considerably better than the values reported in [CSZ94]. 4 RSB constructs a bipartitioning by choosing the split 4 For the experiments performed in [CSZ94], hyperedges with jej &gt; 99 were removed before the eigenvectors were computed using the Frankle clique model. For some test cases (test03, test04, and test06), removing these hyperedges disconnects the graph, which implies that 2 = 0 and that the Fiedler vector is uninteresting. <p> Consequently, the performance of RSB significantly worsened for these cases. In addition, results for KP also suffered. Hence, we reran both RSB and KP using the Frankle and partitioning-specific net models for the seven test cases used in <ref> [CSZ94] </ref> (primary1-2, test02-6) without removing any hyperedges. <p> Table 5.5 also reports the runtimes required to construct a bipartitioning for d = 2 and d = 10 eigenvectors, assuming that the eigenvectors had already been computed. Despite the O (dn 2 ) time complexity, the runtimes are quite reasonable because the Frankle model and the results from <ref> [CSZ94] </ref>, respectively; (ii) for KP, the Frankle model averaged 2.97% and 2.96% improvement over the partitioning-specific model and the results from [CSZ94], respectively. Hence, the results in Table 5.4 are given for the partitioning-specific net model for RSB and the Frankle net model for KP. <p> Despite the O (dn 2 ) time complexity, the runtimes are quite reasonable because the Frankle model and the results from <ref> [CSZ94] </ref>, respectively; (ii) for KP, the Frankle model averaged 2.97% and 2.96% improvement over the partitioning-specific model and the results from [CSZ94], respectively. Hence, the results in Table 5.4 are given for the partitioning-specific net model for RSB and the Frankle net model for KP. <p> RSB +4.39 +5.47 +2.64 +8.30 +11.8 +9.60 +13.9 +19.7 +20.0 +10.6 Table 5.4: Scaled Cost (fi10 5 ) comparisons for partitionings derived from Melo orderings versus the RSB [HK92c] and KP <ref> [CSZ94] </ref> algo rithms. 156 the algorithm is so simple (see [AK93] for detailed runtimes for eigenvector com- putations).
Reference: [CSZ95] <author> P. K. Chan, M. D. F. Schlag, and J. Y. Zien. </author> <title> "Spectral-Based Multi-Way FPGA Partitioning." </title> <booktitle> In Proc. ACM/SIGDA International Workshop on Field-Programmable Gate Arrays, </booktitle> <pages> pp. 133-139, </pages> <year> 1995. </year>
Reference-contexts: This is done for all vertices whose corresponding vectors are within 8 radians of a prototype vector. The remaining vertices are assigned using information from the original hypergraph. Chan et al. <ref> [CSZ95] </ref> have extended their KP algorithm to FPGA partitioning. We believe the Barnes and KP algorithms may have limited performance potential.
Reference: [DA94] <author> A. Dasdan and C. Aykanat. </author> <title> "Improved Multiple-Way Circuit Partitioning Algorithms." </title> <booktitle> In Proc. ACM/SIGDA International Workshop on Field-Programmable Gate Arrays, </booktitle> <year> 1994. </year>
Reference-contexts: The algorithm permits a maximum of ten moves per vertex per pass. Dasdan and Aykanat <ref> [DA94] </ref> have proposed a multi-way variant of FM that allows a small constant number (e.g., three or four) of vertex moves per pass. Yeh et al. [YCL94] proposed an extension of Sanchis' multi-way partitioning algorithm that alternates "primal" passes of vertex moves with "dual" passes of hyperedge moves.
Reference: [DBK90a] <author> S. Dey, F. Brglez, and G. Kedem. </author> <title> "Corolla Based Circuit Partitioning and Resynthesis." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 607-612, </pages> <year> 1990. </year> <month> 204 </month>
Reference-contexts: Last, we note that Dey, Brglez and Kedem <ref> [DBK90a] </ref> [DBK90b] have proposed constructing cone-based clusters called corollas. 2 In a directed representation of a circuit, each net e has a unique source u 2 e and the other vertices (in e fug) are called destination vertices.
Reference: [DBK90b] <author> S. Dey, F. Brglez, and G. Kedem. </author> <title> "Partitioning Sequential Circuits for Logic Optimization." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer Design, </booktitle> <pages> pp. 70-76, </pages> <year> 1990. </year>
Reference-contexts: Last, we note that Dey, Brglez and Kedem [DBK90a] <ref> [DBK90b] </ref> have proposed constructing cone-based clusters called corollas. 2 In a directed representation of a circuit, each net e has a unique source u 2 e and the other vertices (in e fug) are called destination vertices.
Reference: [DD96a] <author> J. Darnauer and W. W.-M. Dai. </author> <title> "A Method for Generating Random Circuits and its Application to Routability Measurement." </title> <booktitle> In Proc. ACM/SIGDA International Workshop on Field-Programmable Gate Arrays, </booktitle> <pages> pp. 66-72, </pages> <year> 1996. </year>
Reference-contexts: Their experiments indicate that current place-and-route tools cannot distinguish between real circuits and their random circuits. Recently, Darnauer and Dai <ref> [DD96a] </ref> proposed an algorithm to construct random circuits that satisfy a target Rent parameter (see e.g., [HKK94]). The circuit generators of [HGR96] 21 and [DD96a] can both be used to generate arbitrarily large random circuits; how-ever, whether or not these circuits are realistic remains an open question. <p> Their experiments indicate that current place-and-route tools cannot distinguish between real circuits and their random circuits. Recently, Darnauer and Dai <ref> [DD96a] </ref> proposed an algorithm to construct random circuits that satisfy a target Rent parameter (see e.g., [HKK94]). The circuit generators of [HGR96] 21 and [DD96a] can both be used to generate arbitrarily large random circuits; how-ever, whether or not these circuits are realistic remains an open question.
Reference: [DD96b] <author> S. Dutt and W. Deng. </author> <title> "A Probability-Based Approach to VLSI Circuit Partitioning." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 100-105, </pages> <year> 1996. </year>
Reference-contexts: More relaxed size constraints may permit a much better solution while still maintaining relatively balanced clusters. Indeed, L = 9A (V ) 11A (V ) 20 are the most popular cluster size bounds in the recent literature [RDJ94] [YW94] [LLC95] [DD96c] <ref> [DD96b] </ref>. 14 Rather than minimizing cut subject to cluster size constraints, one can more smoothly integrate the cut and balance criteria within the partitioning objective. Ratio Cut partitioning was introduced in [LR88] and first applied to circuit partitioning by Wei and Cheng [WC89]. <p> As recently as three years ago, classic iterative approaches [KL70] [FM82] were considered outdated, particularly with respect to their poor scaling of solution quality with instance size [HHK95b]. However, several recent works [HHK95a] [DD96c] <ref> [DD96b] </ref> [FHK96] have shown how small changes can yield significant improvements to classic approaches; these results have propelled iterative methods back to the forefront of partitioning research. <p> Clearly, the discrepancy between these results and those of [HHK95a] are a source of concern and need to be further explored. 169 Recently, Dutt and Deng <ref> [DD96b] </ref> proposed a different kind of tie-breaking approach, based on probabilistic techniques. Instead of using a gain value that reflects only the immediate change in cut from moving a single vertex, their PROP algorithm uses a more global gain computation. <p> PROP begins by assigning each vertex an initial probability of 0.95, and then gains are recomputed based on a function of the current solution and the vertex probabilities. As vertices are moved, probabilities and gains are updated for neighboring vertices. Experiments in <ref> [DD96b] </ref> show that this gain computation significantly outperforms classic FM. However, since its gain values are non-discrete, PROP cannot exploit the FM bucket structure; runtimes thus increase by a factor of four to eight. <p> They report results that outperform the flow-based algorithm of Yang and Wong [YW94] and spectral bipartitioning [HK92c]. * The PARABOLI (PB) algorithm of Riess et al. [RDJ94] was widely consid-ered to be the state-of-the-art partitioner in 1994 and has been the subject of numerous comparisons since [HB95] [YW94] [LKH95] [DD96c] <ref> [DD96b] </ref>. <p> The f subscript implies that standard FM was run as a refinement step after the original algorithm terminated. CL-PR f subsumes the results for PROP reported in <ref> [DD96b] </ref>. * Finally, we compare to the LSMC algorithm of [FHK96] which we reimple-mented using a CLIP engine. The results are reported for 100 descents, with the kick move was performed on the best partitioning solution observed so far. <p> We believe that it is worthwhile to spend more CPU time partitioning at these levels, e.g., by calling FM ten times or using LSMC, in order to obtain a better final bipartitioning solution. * Dutt and Deng <ref> [DD96b] </ref> showed that lookahead schemes [Kri84] do not work very well with FM when using a LIFO bucket scheme; however, their impact increases dramatically when using CLIP.
Reference: [DD96c] <author> S. Dutt and W. Deng. </author> <title> "VLSI Circuit Partitioning by Cluster-Removal Using Iterative Improvement Techniques." </title> <booktitle> In Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <pages> pp. 92-99, </pages> <year> 1996. </year> <note> Also see corresponding Technical Report, </note> <institution> Dept. of Electrical Engineering, U. Minnesota. </institution>
Reference-contexts: More relaxed size constraints may permit a much better solution while still maintaining relatively balanced clusters. Indeed, L = 9A (V ) 11A (V ) 20 are the most popular cluster size bounds in the recent literature [RDJ94] [YW94] [LLC95] <ref> [DD96c] </ref> [DD96b]. 14 Rather than minimizing cut subject to cluster size constraints, one can more smoothly integrate the cut and balance criteria within the partitioning objective. Ratio Cut partitioning was introduced in [LR88] and first applied to circuit partitioning by Wei and Cheng [WC89]. <p> As recently as three years ago, classic iterative approaches [KL70] [FM82] were considered outdated, particularly with respect to their poor scaling of solution quality with instance size [HHK95b]. However, several recent works [HHK95a] <ref> [DD96c] </ref> [DD96b] [FHK96] have shown how small changes can yield significant improvements to classic approaches; these results have propelled iterative methods back to the forefront of partitioning research. We integrate these methods into an efficient multilevel partitioning algorithm which outperforms many previous works [DD96c] [RDJ94] [FHK96] [LKH95] in terms of balanced <p> However, several recent works [HHK95a] <ref> [DD96c] </ref> [DD96b] [FHK96] have shown how small changes can yield significant improvements to classic approaches; these results have propelled iterative methods back to the forefront of partitioning research. We integrate these methods into an efficient multilevel partitioning algorithm which outperforms many previous works [DD96c] [RDJ94] [FHK96] [LKH95] in terms of balanced bipartitioning solutions. 24 CHAPTER 2 Restricted Partitioning via Dynamic Programming (DP-RP) 2.1 Partitioning with Vertex Orderings Vertex orderings and partitionings are strongly related concepts: partitioning solutions have been used to find vertex orderings, and vice versa. <p> Hagen et al. [HHK95a] use this idea of locality to propose an alternative formula for higher-level gains which also improves performance. That LIFO outperforms FIFO was also observed by Dutt and Deng <ref> [DD96c] </ref>, who like [HHK95a] noted that looka-head tie-breaking does not improve the performance of FM when LIFO buckets are used (in other words, using LIFO instead of FIFO negates the advantage of lookahead tie-breaking). <p> Like [HHK95a] <ref> [DD96c] </ref>, the Table shows that LIFO significantly outperforms FIFO. However, we do not ob serve any improvement of LIFO over random selection (it appears that random selection may even be the best scheme of the three). <p> Like the LIFO bucket scheme, this strategy recognizes that adjacent vertices should be moved sequentially. Saab uses clusters identified in this manner to contract the graph, then runs a two-phase FM variant (see Chapter 4). Dutt and Deng <ref> [DD96c] </ref> built further upon the idea of moving adjacent vertices together. They proposed to increase the effect of moving a given vertex on the 170 adjacent unlocked vertices. For example, suppose that moving vertex v i increases the gain of v j by one. <p> Instead of increasing the gain by one, it could be increased by a factor of two, five, ten, etc., which would greatly increase the chances that v j is moved next. Instead of only increasing the gain by some constant factor, the authors of <ref> [DD96c] </ref> actually propose to increase the gain by what amounts to an infinite factor. <p> Dutt and Deng <ref> [DD96c] </ref> also propose a method called CDIP which allows the iterative improvement algorithm to undo a sequence of bad moves. They examine, e.g., the last 50 moves, and if no subsequence of these moves yields any improvement, they undo these moves and try again with a different sequence of moves. <p> If the initial partitioning passed in is N U LL, as in Step 5 of Figure 6.2, then a random starting solution is constructed. Our partitioner uses FM with a LIFO bucket scheme, with variants such as CLIP also implemented <ref> [DD96c] </ref>. Since large hyperedges can significantly slow down an iterative partitioner, we ignore hyperedges with more than 200 vertices; of course, these hyperedges are considered when measuring solution quality. <p> any existing 2-way partitioner. * Finally, we show that ML yields excellent results for quadrisection, illus trating its promise as the core of a top-down placement tool. 6.6.1 Comparisons with CLIP Bipartitioning Our first set of experiments compares both implementations of ML using both implementations of the partitioner with CLIP <ref> [DD96c] </ref>. We set the matching parameter R to 1, which forces the ML to find as complete a matching as possible in the coarsening phase. We ran each algorithm 100 times for each test case, and we report the minimum cut, average cut, and total CPU time in Table 6.3. <p> They report results that outperform the flow-based algorithm of Yang and Wong [YW94] and spectral bipartitioning [HK92c]. * The PARABOLI (PB) algorithm of Riess et al. [RDJ94] was widely consid-ered to be the state-of-the-art partitioner in 1994 and has been the subject of numerous comparisons since [HB95] [YW94] [LKH95] <ref> [DD96c] </ref> [DD96b]. <p> The authors of [RDJ94] report cuts that are 50% better than spectral bi partitioning. * The GFM results are for 80 runs of the Gradient Fiduccia-Mattheyses algorithm of [LKH95], and the GFM t results are for a single run of a "two-phase" variation of GFM. * Dutt and Deng <ref> [DD96c] </ref> show how CLIP and CDIP (see above discussion) can be used within any partitioner. We quote the best results for 20 runs of their three best algorithms: CL-LA3 f (CLIP with lookahead level 3), CD-LA3 f (CDIP with lookahead level 3) and CL-PR f (CLIP with PROP gain calculation).
Reference: [Def78] <author> D. Defays. </author> <title> "A Short Note on a Method of Seriation." </title> <journal> British Journal of Mathematical and Statistical Psychology, </journal> <volume> 31 </volume> <pages> 49-53, </pages> <year> 1978. </year>
Reference-contexts: Seriation is well-studied; it was first formulated as a combinatorial optimization by Defays <ref> [Def78] </ref>, and various other approaches have been proposed including dynamic programming [HA86], branch search [Def78] and smoothing [Pli86] [Pli96]. However, it is not clear how well the (dist (v i ; v j )jx i x j j) 2 terms capture our above intuition. <p> Seriation is well-studied; it was first formulated as a combinatorial optimization by Defays <ref> [Def78] </ref>, and various other approaches have been proposed including dynamic programming [HA86], branch search [Def78] and smoothing [Pli86] [Pli96]. However, it is not clear how well the (dist (v i ; v j )jx i x j j) 2 terms capture our above intuition.
Reference: [DH72] <author> W. E. Donath and A. J. Hoffman. </author> <title> "Altorithms for Partitioning of Graphs and Computer Logic Based on Eigenvectors of Connection Matrices." </title> <journal> IBM Technical Disclosure Bulletin, </journal> <volume> 15(3) </volume> <pages> 938-944, </pages> <month> August </month> <year> 1972. </year>
Reference-contexts: Thus, many works discard large nets to maintain sparsity [CS93] [CSZ94] [HMV92]. Besides the clique model, there are several other methods for transforming a hypergraph to a graph: * One can construct random spanning trees, paths, or cycles over the vertices in every hyperedge (see, e.g., <ref> [DH72] </ref>). * A dummy vertex may be inserted to represent each hyperedge [IWW93] [KWM91], creating a "star" representation where each dummy vertex is connected by an edge to each vertex of the corresponding hyperedge. <p> By "equivalence", we mean that substituting Q for A in each of the theorem proofs leads to the identical result. 115 5.2 A History of Spectral Partitioning Works which describe spectral methods for partitioning graphs have existed for a quarter of a century, e.g., [Hal70] <ref> [DH72] </ref> [DH73] [Fie73]. In this section, we present an in-depth historical review of the literature, while at the same time developing and proving some known theoretical results.
Reference: [DH73] <author> W. E. Donath and A. J. Hoffman. </author> <title> "Lower Bounds for the Partitioning of Graphs." </title> <journal> IBM Journal of Research and Development, </journal> <volume> 17(5) </volume> <pages> 420-425, </pages> <month> September </month> <year> 1973. </year>
Reference-contexts: B can be added to A to ensure positive semi-definiteness and the computability of eigenvectors, and also to obtain properties similar to Q (e.g., Donath and Hoffman <ref> [DH73] </ref> use B = D, thereby obtaining the spectra of -Q). Although the relationships between the spectra of A and Q are not well-understood, it appears that most theoretical results in the spectral literature can be equivalently derived with either Q or A. <p> By "equivalence", we mean that substituting Q for A in each of the theorem proofs leads to the identical result. 115 5.2 A History of Spectral Partitioning Works which describe spectral methods for partitioning graphs have existed for a quarter of a century, e.g., [Hal70] [DH72] <ref> [DH73] </ref> [Fie73]. In this section, we present an in-depth historical review of the literature, while at the same time developing and proving some known theoretical results. <p> Theorem 5.4 <ref> [DH73] </ref> f (P k ) P k Proof: We provide an alternative proof to Donath and Hoffman [DH73] that uses the observations of Barnes [Bar82]. <p> Theorem 5.4 <ref> [DH73] </ref> f (P k ) P k Proof: We provide an alternative proof to Donath and Hoffman [DH73] that uses the observations of Barnes [Bar82]. <p> Actually, the lower bound of <ref> [DH73] </ref> is slightly stronger since it holds for not only the eigenvalues of Q = D A, but also for the eigenvalues of D 0 A, where D 0 is any diagonal matrix with trace (D 0 ) = trace (D). <p> They also permit the diagonal entries of A to be perturbed before computing the eigenvectors, leading to tighter lower bounds than those given by Donath and Hoffman <ref> [DH73] </ref>. Further, they extend the average case bisection bound of Boppana [Bop87] to k &gt; 2 (see [Len90] for a more complete discussion of spectrally derived lower bounds). <p> Thus, it should be possible to identify such subsets of vectors and thereby construct high-quality clusterings. * Perform diagonal optimization. Cullum et al. [JW75] showed how to find a diagonal matrix D that minimizes the sum of the first d eigenvalues of A+D. 158 Many researchers, e.g., <ref> [DH73] </ref> [RW95] [FRW94], have applied various types of diagonal optimization both to improve the quality of lower bounds on the cost of a solution and to enhance the performance of their spectral partitioning heuristics. <p> We believe that diagonal optimization would aid vector partitioning, because the d optimized eigenvectors would better approximate the exact n-dimensional vector partitioning instance than the d unoptimized vectors. * Find and apply lower bounds. Graph spectra have been very useful for constructing lower bounds on partitioning <ref> [DH73] </ref> [Bop87] [Len90] [HK92c] [RW95], e.g., 2 is a lower bound on the cut of any bipartitioning. We would like to answer such questions as, "Assume that we have the optimal solution for a d-dimensional vector partitioning instance.
Reference: [DH80] <author> M. Dellatre and P. Hansen. </author> <title> "Bicriterion Cluster Analysis." </title> <journal> IEEE Trans. Pattern Analysis and Machine Intelligence, </journal> <volume> 2(4) </volume> <pages> 277-291, </pages> <year> 1980. </year>
Reference-contexts: Hansen, Jau-mard, and Frank [HJF87] have proposed to maximize the sum of splits, and Hansen, Jaumard, and Musitu [HJM87] have added size constraints to the Max-Split objective. Both Delattre and Hansen <ref> [DH80] </ref> and Glasbey [Gla87] have proposed approaches that trade off between diameter and split. For geometric instances, Rao [Rao71] discusses minimizing the sum of squared distances from each point to the centroid of its cluster and also minimizing the sum of average distances from each point to its cluster's centroid. <p> Results are given in Table 3.5 using Euclidean distance in &lt; 4 as a dissimilarity measure. Results for this data set have previously been presented in <ref> [DH80] </ref> [GHJ91]. * Average temperatures in Farenheit for January, April, July, and October for 88 cities in the United States are quoted from The World Almanac [Hof92].
Reference: [Dic86] <author> J. R. </author> <title> Dickenson. Bibliography of Marketing Research Methods. </title> <address> Lex-ington, </address> <year> 1986. </year>
Reference-contexts: Spectral [PSL90] and geometric [EMT95] [FMT92] approaches are popular for this application. * Classification: Researchers in fields ranging from biostatistics to psychology to marketing commonly need to perform cluster analysis on experimentally derived data sets. In fact, Dickenson <ref> [Dic86] </ref> lists 17 pages of cluster analysis applications. The objective is to assign data points to clusters such that (i) the data points within each group share certain common characteristics, and (ii) data points in different clusters do not share these characteristics.
Reference: [DK93] <author> H. L. Davidson and E. Kelly, </author> <month> July </month> <year> 1993. </year> <type> Personal communication. </type>
Reference-contexts: Hence, in contrast to previous methodologies wherein a small number of function blocks could be optimally hand-partitioned, HDL-based synthesis can require physical design to shift from working with a small number of building blocks to working with larger, flattened design representations <ref> [DK93] </ref>. Partitioning of flattened inputs is also necessary for such applications as the design of "precursor systems" (i.e., finding the packaging tradeoffs that correspond to optimum cost-performance points at early stages in the product life cycle). 4 * Estimation for design optimization.
Reference: [Don79] <author> W. E. Donath. </author> <title> "Placement and Average Interconnection Lengths of Computer Logic." </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <volume> CAS-26(4):272-277, </volume> <year> 1979. </year>
Reference-contexts: Here, d (C h ) = 1 P v2C deg (v) is the average degree of vertices in the cluster. Because the layout has finite size, the power-law relationship eventually breaks down when the number of clusters is small. Feuer [Feu82], Donath <ref> [Don79] </ref> and others have established that a lower Rent parameter r corresponds to lower total wirelength in the layout. 82 Merging continues until the prescribed number k of clusters is reached, or until r exceeds a prescribed constant. 4.1.2 Hierarchical Strategies Generally, agglomerative methods will not be very efficient: finding the
Reference: [Don88] <author> W. E. Donath. </author> <title> "Logic Partitioning." </title> <editor> In B. Preas and M. Lorenzetti, editors, </editor> <booktitle> Physical Design Automation of VLSI Systems, </booktitle> <pages> pp. 65-86. </pages> <address> Benjamin/Cummings, </address> <year> 1988. </year>
Reference-contexts: been used by [CSZ94]). * Hadley et al. [HMV92] propose a weighting scheme that depends on both jej and k, and guarantees that the cost of splitting e into k clusters will be bounded above by one. * For the maximum cost of a cut hyperedge to be one, Donath <ref> [Don88] </ref> shows that the appropriate edge weight is 4 jej 2 (jej mod 2) since there are jej 2 (jej mod 2) 4 edges crossing between two clusters when half the vertices of e are in each cluster (also see [VH90]).
Reference: [DP91] <author> C. Delorme and S. Poljak. </author> <title> "The Performance of an Eigenvalue Bound on the Max-Cut Problem in Some Classes of Graphs." </title> <journal> Discrete Mathematics, </journal> <volume> 111 </volume> <pages> 145-156, </pages> <year> 1991. </year>
Reference-contexts: Nevertheless, we can still define the vector partitioning cost function for this maximization objective as g (S k ) = min jjY n 1hk jh (H j ) = f 0 (P k ): Max Cut: Another problem which has shown recent interest in the literature is the Max-Cut problem <ref> [DP91] </ref> [DP93] [PR95]: Maximize: f (P k ) = k X jE (C h )j: Goemans and Williamson [GW95] presented an algorithm similar to the hyper-plane approach of [AR90] that approximates max-cut bipartitioning within a factor of .878 of optimal. This algorithm was extended to multi-way partitioning by [FJ95].
Reference: [DP93] <author> C. Delorme and S. Poljak. </author> <title> "Laplacian Eigenvalues and the Maximum Cut Problem." </title> <journal> Mathematical Programming, </journal> <volume> 62 </volume> <pages> 557-574, </pages> <year> 1993. </year>
Reference-contexts: we can still define the vector partitioning cost function for this maximization objective as g (S k ) = min jjY n 1hk jh (H j ) = f 0 (P k ): Max Cut: Another problem which has shown recent interest in the literature is the Max-Cut problem [DP91] <ref> [DP93] </ref> [PR95]: Maximize: f (P k ) = k X jE (C h )j: Goemans and Williamson [GW95] presented an algorithm similar to the hyper-plane approach of [AR90] that approximates max-cut bipartitioning within a factor of .878 of optimal. This algorithm was extended to multi-way partitioning by [FJ95].
Reference: [DR95] <author> R. Van Driessche and D. Roose. </author> <title> "A Graph Contraction Algorithm for the Fast Calculation of the Fiedler Vector of a Graph." </title> <booktitle> In Proceedings of the Seventh SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <pages> pp. 621-626, </pages> <year> 1995. </year>
Reference-contexts: This technique permits the efficient computation of the Fiedler vector for very large graphs. A similar approach was later proposed by <ref> [DR95] </ref>. The works [Bar96] and [BS95] later showed how to utilize this multilevel technique within a parallel recursive implementation of spectral bisection. Karypis and Kumar [KK95a] have recently developed the Metis multilevel graph partitioning package (URL: http://www.cs.umn.edu/users/kumar).
Reference: [Dut93] <author> S. Dutt. </author> <title> "New Faster Kernighan-Lin-Type Graph-Partitioning Algorithms." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 370-377, </pages> <year> 1993. </year>
Reference-contexts: A pass of KL can be implemented in O (n 2 log n) time by maintaining a sorted list of gains. The number of passes is clearly bounded by jEj for unweighted graphs (since the cost must improve with each pass); in practice, significantly fewer passes are required. Dutt <ref> [Dut93] </ref> reduced the complexity of a KL pass to O (maxfjEj log n; jEj deg max g) where deg max is the maximum vertex degree. <p> Although KL was originally applied only to undirected weighted graphs, Schweik-ert and Kernighan [SK72] extended KL to hypergraphs and a similar extension appears possible for the implementation of <ref> [Dut93] </ref>. 6.2.2 The Fiduccia-Mattheyses (FM) Algorithm Fiduccia and Mattheyses [FM82] presented a KL-inspired algorithm which reduces the complexity of a pass to time linear in the size of the hypergraph.
Reference: [EMT95] <author> D. Eppstein, G. L. Miller, and S.-H. Teng. </author> <title> "A Deterministic Linear Time Algorithm for Geometric Separators and Its Applications." </title> <journal> Fundamenta Informaticae, </journal> <volume> 22(4) </volume> <pages> 309-329, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: The effectiveness of this approach 3 directly depends on the partitioning algorithm used to find small vertex separators. Although finding small vertex separators and finding minimum cuts (the problem addressed throughout the thesis), the underlying solution methods are the same. Spectral [PSL90] and geometric <ref> [EMT95] </ref> [FMT92] approaches are popular for this application. * Classification: Researchers in fields ranging from biostatistics to psychology to marketing commonly need to perform cluster analysis on experimentally derived data sets. In fact, Dickenson [Dic86] lists 17 pages of cluster analysis applications.
Reference: [Feu82] <author> M. Feuer. </author> <title> "Connectivity of Random Logic." </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-31(1):29-33, </volume> <month> January </month> <year> 1982. </year>
Reference-contexts: Here, d (C h ) = 1 P v2C deg (v) is the average degree of vertices in the cluster. Because the layout has finite size, the power-law relationship eventually breaks down when the number of clusters is small. Feuer <ref> [Feu82] </ref>, Donath [Don79] and others have established that a lower Rent parameter r corresponds to lower total wirelength in the layout. 82 Merging continues until the prescribed number k of clusters is reached, or until r exceeds a prescribed constant. 4.1.2 Hierarchical Strategies Generally, agglomerative methods will not be very efficient:
Reference: [FF62] <author> L. R. Ford, Jr. and D. R. Fulkerson. </author> <title> Flows in Networks. </title> <publisher> Princeton University Press, </publisher> <year> 1962. </year>
Reference-contexts: With no cluster size bounds, min-cut bipartitioning can be solved by converting the hypergraph to a flow network and then computing a certain set of n 1 flows (corresponding to the Gomory-Hu cut tree [GH61]) and applying the max-flow min-cut theorem <ref> [FF62] </ref> to obtain a minimum cut. Many algorithms are known which can solve the max-flow problem in polynomial time; see [GTT89] [AMO93] for surveys. Note that finding a minimum cut does not necessarily require a maximum flow fast techniques to find minimum cuts have been proposed in [HO92] [Kar93] [NI92].
Reference: [FG88] <author> T. Feder and D. H. Greene. </author> <title> "Optimal Algorithms for Approximate Clustering." </title> <booktitle> In Proceedings of the ACM Symposium on the Theory of Computing, </booktitle> <pages> pp. 434-444, </pages> <year> 1988. </year>
Reference-contexts: For geometric instances, Min-Diameter algorithms with a performance ratio of 2 have been given by Gonzalez [Gon85] and by Feder and Greene <ref> [FG88] </ref>. Brucker [Bru78] showed that the Min-Sum-Diameters objective is also NP-hard for k &gt; 2; optimal 2-way partitioning algorithms for this objective have been given by Hansen and Jaumard [HJ87], Monma and Suri [MS91], and Hershberger [Her91]. Optimal max-split partitionings can be found via the well-known "single-linkage" method. <p> Optimal max-split partitionings can be found via the well-known "single-linkage" method. The min-radius objective is known to be NP-Complete [Hoc84], but approximation algorithms for geometric instances have been given by [Gon85] <ref> [FG88] </ref> [HS85] [Hoc85]. 3.2 Review of Classic Min-Diameter Approaches 3.2.1 The Divisive Min-Diameter (DQ) Algorithm Many algorithms can find optimal 2-way partitionings for the Min-Diameter objective. For example, Hubert [Hub73] presents an elegant algorithm that constructs a maximum spanning tree over G and then vertex 2-colors this tree.
Reference: [FHK87] <author> T. Fujii, H. Horikawa, T. Kikuno, and N. Yoshida. </author> <title> "A Heuristic Algorithm for Gate Assignment in One-Dimensional Array Approach." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 6(2) </volume> <pages> 159-164, </pages> <year> 1987. </year>
Reference-contexts: In VLSI CAD, the min-perimeter and max-adjacency orderings are at the heart of "direct" clustering methods used in early placement and partitioning approaches [Len90]. Similar types of orderings have been applied to the 1-dimensional gate assignment problem (e.g., <ref> [FHK87] </ref>). Finally, several vertex orderings are implicit in heuristic global minimization of wirelength functions in 1-dimensional placements.
Reference: [FHK96] <author> A. S. Fukunaga, J.-H. Huang, and A. B. Kahng. </author> <title> "Large-Step Markov Chain Variants for VLSI Netlist Partitioning." </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, volume IV, </booktitle> <pages> pp. 496-499, </pages> <month> May </month> <year> 1996. </year> <month> 206 </month>
Reference-contexts: As recently as three years ago, classic iterative approaches [KL70] [FM82] were considered outdated, particularly with respect to their poor scaling of solution quality with instance size [HHK95b]. However, several recent works [HHK95a] [DD96c] [DD96b] <ref> [FHK96] </ref> have shown how small changes can yield significant improvements to classic approaches; these results have propelled iterative methods back to the forefront of partitioning research. We integrate these methods into an efficient multilevel partitioning algorithm which outperforms many previous works [DD96c] [RDJ94] [FHK96] [LKH95] in terms of balanced bipartitioning solutions. <p> However, several recent works [HHK95a] [DD96c] [DD96b] <ref> [FHK96] </ref> have shown how small changes can yield significant improvements to classic approaches; these results have propelled iterative methods back to the forefront of partitioning research. We integrate these methods into an efficient multilevel partitioning algorithm which outperforms many previous works [DD96c] [RDJ94] [FHK96] [LKH95] in terms of balanced bipartitioning solutions. 24 CHAPTER 2 Restricted Partitioning via Dynamic Programming (DP-RP) 2.1 Partitioning with Vertex Orderings Vertex orderings and partitionings are strongly related concepts: partitioning solutions have been used to find vertex orderings, and vice versa. <p> Third, iterative algorithms are generally very fast, so that they can be run multiple times or combined with other schemes (e.g., <ref> [FHK96] </ref>). This feature allows the user to control the number of runs and to limit the runtime, resulting in a finer control of the tradeoffs between runtime and solution quality. Finally, iterative improvement is independent of the nature of the objective function that measures solution quality. <p> The crossover operation actually produces a clustering, which is then used to produce an initial solution for two-phase FM. Fukunaga et al. <ref> [FHK96] </ref> proposed a Large-Step Markov Chain (LSMC) implementation which attempts to climb out of a low-cost local minimum by making a single big move. <p> The f subscript implies that standard FM was run as a refinement step after the original algorithm terminated. CL-PR f subsumes the results for PROP reported in [DD96b]. * Finally, we compare to the LSMC algorithm of <ref> [FHK96] </ref> which we reimple-mented using a CLIP engine. The results are reported for 100 descents, with the kick move was performed on the best partitioning solution observed so far.
Reference: [Fie73] <author> M. Fiedler. </author> <title> "Algebraic Connectivity of Graphs." </title> <journal> Czechoslovak Math--ematical Journal, </journal> <volume> 23(98) </volume> <pages> 298-305, </pages> <year> 1973. </year>
Reference-contexts: By "equivalence", we mean that substituting Q for A in each of the theorem proofs leads to the identical result. 115 5.2 A History of Spectral Partitioning Works which describe spectral methods for partitioning graphs have existed for a quarter of a century, e.g., [Hal70] [DH72] [DH73] <ref> [Fie73] </ref>. In this section, we present an in-depth historical review of the literature, while at the same time developing and proving some known theoretical results. <p> In addition, jj~xjj 2 = m 1 as opposed to jj~ 2 jj 2 = 1. 117 The approach of constructing a bipartitioning by sorting and splitting the entries of the second eigenvector of the graph's Laplacian was first suggested by Fiedler <ref> [Fie73] </ref> [Fie75b] [Fie75a] and is commonly known as spectral bipartitioning (or spectral bisection when m 1 = m 2 = n 2 ). Thus, ~ 2 is commonly referred to as the Fiedler vector and 2 as the Fiedler value.
Reference: [Fie75a] <author> M. Fiedler. </author> <title> "Eigenvectors of Acyclic Matrices." </title> <journal> Czechoslovak Mathematical Journal, </journal> <volume> 25(100) </volume> <pages> 607-618, </pages> <year> 1975. </year>
Reference-contexts: In addition, jj~xjj 2 = m 1 as opposed to jj~ 2 jj 2 = 1. 117 The approach of constructing a bipartitioning by sorting and splitting the entries of the second eigenvector of the graph's Laplacian was first suggested by Fiedler [Fie73] [Fie75b] <ref> [Fie75a] </ref> and is commonly known as spectral bipartitioning (or spectral bisection when m 1 = m 2 = n 2 ). Thus, ~ 2 is commonly referred to as the Fiedler vector and 2 as the Fiedler value.
Reference: [Fie75b] <author> M. Fiedler. </author> <title> "A Property of Eigenvectors of Nonnegative Symmetric Matrices and its Applications to Graph Theory." </title> <journal> Czechoslovak Mathematical Journal, </journal> <volume> 25(100) </volume> <pages> 619-633, </pages> <year> 1975. </year>
Reference-contexts: In addition, jj~xjj 2 = m 1 as opposed to jj~ 2 jj 2 = 1. 117 The approach of constructing a bipartitioning by sorting and splitting the entries of the second eigenvector of the graph's Laplacian was first suggested by Fiedler [Fie73] <ref> [Fie75b] </ref> [Fie75a] and is commonly known as spectral bipartitioning (or spectral bisection when m 1 = m 2 = n 2 ). Thus, ~ 2 is commonly referred to as the Fiedler vector and 2 as the Fiedler value.
Reference: [Fis36] <author> R. A. Fisher. </author> <title> "The Use of Multiple Measurements in Taxonomic Problems." </title> <journal> Annals of Eugenics, </journal> <volume> VII(II):179-188, </volume> <year> 1936. </year>
Reference-contexts: Average tour costs for 3-Opt, Lin-Kernighan, SFC and SFC + 3-Opt were 414.7, 409.6, 597.0 and 415.9, respectively. * The Fisher <ref> [Fis36] </ref> Iris data consist of four measurements taken over 150 flowers from three varieties of Iris. Results are given in Table 3.5 using Euclidean distance in &lt; 4 as a dissimilarity measure.
Reference: [FJ95] <author> A. Frieze and M. Jerrum. </author> <title> "Improved Approximation Algorithms for MAX k-CUT and MAX BISECTION." </title> <booktitle> In Proceedings of the 4th International Integer Programming and Combinatorial Optimization Conference, </booktitle> <volume> volume 920, </volume> <pages> pp. 1-13, </pages> <year> 1995. </year>
Reference-contexts: This algorithm was extended to multi-way partitioning by <ref> [FJ95] </ref>. For the min-cut objective, the equivalent vector partitioning objective is to maximize the sum of the squared magnitudes of the k subset vectors. Thus, for the max-cut objective, an equivalent problem is to minimize these sums.
Reference: [FK86] <author> J. Frankle and R. M. Karp. </author> <title> "Circuit Placement and Cost Bounds by Eigenvector Decomposition." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 414-417, </pages> <year> 1986. </year>
Reference-contexts: However, cutting a 2-vertex hyperedge will have a cost of only 1. Hence, the authors of [AK93] proposed a "partitioning-specific" clique model with edge weight 4 jej (jej1) 2 jej 2 2 jej such that the expected cost of a cut hyperedge is one. * Frankle and Karp <ref> [FK86] </ref> proposed the uniform weight ( 2 jej ) 3=2 for linear placement with a squared edgelength objective: if the span of a hyperedge is normalized to one and edges have weight w, the total edge cost may 110 vary from jej jej 2 ) 2 w depending on the distribution <p> Note that all linear combinations of the first d eigenvector solutions lie in the 129 d-dimensional subspace spanned by these eigenvectors. This observation is the motivation behind the probing approach of Frankle and Karp <ref> [FK86] </ref> [Fra87]: they search the entire d-dimensional subspace for a good combined solution and then find the closest legal indicator vector. Ideally, the combined solution should be much closer to a legal solution than the Fiedler vector. Frankle and Karp [FK86] developed the following probing technique for finding such non-discrete combined <p> the motivation behind the probing approach of Frankle and Karp <ref> [FK86] </ref> [Fra87]: they search the entire d-dimensional subspace for a good combined solution and then find the closest legal indicator vector. Ideally, the combined solution should be much closer to a legal solution than the Fiedler vector. Frankle and Karp [FK86] developed the following probing technique for finding such non-discrete combined solutions in the multi-dimensional eigenspace. They observed that the cut of a cluster can be written as a sum of projections onto the eigenvectors: Theorem 5.5 jE (C h )j = P n jh j . <p> U d are ~ 1 ; : : : ; ~ d with eigenvalues 1 : : : n .) This result implies that C = U d 1=2 closest approximation to A = CC T , and thus C is "equivalent" to V d , meaning the reductions of <ref> [FK86] </ref> and [AR90] are also equivalent. Hence, Arun and Rao choose C = U d 1=2 . <p> Frankle [Fra87] has shown how to exhaustively search a d-dimensional vector space with probes, finding the optimal solution in O (n d1 ) time. The approaches of Frankle and Karp <ref> [FK86] </ref> and Arun and Rao [AR90] use more than d eigenvectors to form a 2-way partitioning in which d may be larger than 2 (in contrast to the approaches of Barnes [Bar82] and Chan et al.[CSZ94]). <p> This corollary can also be derived from Theorem 5.5 <ref> [FK86] </ref>. <p> Because the min-cut partitioning objective seeks to minimize f and the vector partitioning objective seeks to maximize g, the two objectives appear incompatible. However, following <ref> [FK86] </ref> we may transform f into a maximization objective. Let H be some constant greater than or equal to n (for now, the choice of H is inconsequential). <p> It is not hard to show that max-sum vector partitioning is actually NP-complete, although, as discussed earlier, optimum bipartitioning solutions for similar problems have been found with time complexity polynomial in d <ref> [FK86] </ref> [AR90]. Corollary 5.11 jj~y n i jj 2 = H deg (v i ). Corollary 5.11 states that the magnitude of a subset vector gives the cost of the edges cut by its corresponding cluster. <p> To minimize the error of this approximation, we can require that the sum of the "contributions" of the unused n d eigenvectors be zero, i.e., P n j1 (H j ) = 0. This occurs when <ref> [FK86] </ref> H = P d j1 j P d j1 For this scheme, after Step 6 in Figure 5.7, H is recomputed using C 1 as the set of vertices corresponding to vectors in S, and the coordinates of the vectors in Y and S are then readjusted. <p> Before the eigenvectors were computed, each hypergraph was transformed into a graph using the clique model with 150 weight function 4 jej (jej1) 2 jej 2 2 jej to each edge in the clique (see Section 5.1.1). We also discuss using the standard and Frankle <ref> [FK86] </ref> clique models which assign weights 1 jej1 and ( 2 jej ) 3=2 , respectively, to edges connecting pairs of vertices in jej. To generate multi-way partitionings from Melo orderings, we minimize the Scaled Cost objective using the the DP-RP algorithm from Chapter 2.
Reference: [FK90] <author> T. A. Feo and M. Khellaf. </author> <title> "A Class of Bounded Approximation Algorithms for Graph Partitioning." </title> <journal> Networks, </journal> <volume> 20 </volume> <pages> 181-195, </pages> <year> 1990. </year>
Reference-contexts: A similar approach was proposed earlier by [GB83]. Feo and Khellaf <ref> [FK90] </ref> proposed merging pairs of vertices into clusters according to a maximum-weight matching. Tight performance bounds were shown for this approach on graphs with edge weights that satisfy the triangle inequality, but the matching process generally requires O (n 3 ) time.
Reference: [FM82] <author> C. M. Fiduccia and R. M. Mattheyses. </author> <title> "A Linear Time Heuristic for Improving Network Partitions." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 175-181, </pages> <year> 1982. </year>
Reference-contexts: Our experiments suggest that the vector partitioning perspective opens the door to new and effective heuristics. * Finally, Chapter 6 explores new multilevel iterative approaches to circuit partitioning. As recently as three years ago, classic iterative approaches [KL70] <ref> [FM82] </ref> were considered outdated, particularly with respect to their poor scaling of solution quality with instance size [HHK95b]. <p> slots, Tsay and Kuh [TK91] propose edge weight 2 jej for the squared edgelength objective and ( 2 jej ) 3 for Manhattan edgelength For some algorithms and problem instances, the clique model may actually be a better representation than the original hypergraph, e.g., Shih [Shi93] reports that FM bipartitioning <ref> [FM82] </ref> yields better solutions for the graph representation than the original hypergraph. <p> Notice that for k = 2, their algorithm minimizes jjU 2 Rjj 2 , and the optimal solution is derived by sorting and splitting the Fiedler vector. Barnes' algorithm was applied to VLSI circuits by Hadley et al. [HMV92], who also refined the solution via an FM <ref> [FM82] </ref> post-processing step. Vannelli and Rowan [VR85] also proposed a variant of Barnes' algorithm. Rendl and Wolkowicz [RW95] note that Barnes' approach "only makes sense" if U k is very close to an optimal solution. <p> With respect to previous history, some approaches are "memoryless", e.g., simple greed or simulated annealing use only the current solution to derive a move to a neighboring solution. On the other hand, classic iterative improvement methods [KL70] <ref> [FM82] </ref> and tabu search use the history of previous solutions in order to avoid "local minima". Iterative (and more generally, move-based) approaches dominate both the VLSI CAD literature and industry practice for several reasons. <p> First, they are 160 generally intuitive the obvious way to improve a given solution is to repeat-edly make it better via small changes. Second, iterative algorithms are simple to describe and implement; for this reason, the bipartitioning method of Fiduccia-Mattheyses <ref> [FM82] </ref> and the multi-way partitioning method of Sanchis [San89] are standards against which nearly all other heuristics are measured. Third, iterative algorithms are generally very fast, so that they can be run multiple times or combined with other schemes (e.g., [FHK96]). <p> Although KL was originally applied only to undirected weighted graphs, Schweik-ert and Kernighan [SK72] extended KL to hypergraphs and a similar extension appears possible for the implementation of [Dut93]. 6.2.2 The Fiduccia-Mattheyses (FM) Algorithm Fiduccia and Mattheyses <ref> [FM82] </ref> presented a KL-inspired algorithm which reduces the complexity of a pass to time linear in the size of the hypergraph. <p> The original FM algorithm uses a linked list for each bucket; from Figure 6.1, we may infer that vertices are probably removed 167 and inserted at the head of the list, i.e., that the bucket organization corresponds to a Last-In-First-Out (LIFO) stack. The authors of <ref> [FM82] </ref> do not specifically mention a LIFO organization; one can speculate that LIFO was an "obvious" choice. However, a First-In-First-Out (FIFO) organization which supports the same update efficiency could have been implemented just as easily.
Reference: [FMT92] <author> A. M. Frieze, G. L. Miller, and S.-H. Teng. </author> <title> "Separator Based Parallel Divide and Conquer in Computational Geometry." </title> <booktitle> In ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pp. 420-430, </pages> <year> 1992. </year>
Reference-contexts: The effectiveness of this approach 3 directly depends on the partitioning algorithm used to find small vertex separators. Although finding small vertex separators and finding minimum cuts (the problem addressed throughout the thesis), the underlying solution methods are the same. Spectral [PSL90] and geometric [EMT95] <ref> [FMT92] </ref> approaches are popular for this application. * Classification: Researchers in fields ranging from biostatistics to psychology to marketing commonly need to perform cluster analysis on experimentally derived data sets. In fact, Dickenson [Dic86] lists 17 pages of cluster analysis applications.
Reference: [Fra87] <author> J. Frankle. </author> <title> Circuit Placement Methods Using Multiple Eigenvectors and Linear Probe Techniques. </title> <type> PhD thesis, </type> <institution> UC Berkeley, </institution> <year> 1987. </year>
Reference-contexts: Note that all linear combinations of the first d eigenvector solutions lie in the 129 d-dimensional subspace spanned by these eigenvectors. This observation is the motivation behind the probing approach of Frankle and Karp [FK86] <ref> [Fra87] </ref>: they search the entire d-dimensional subspace for a good combined solution and then find the closest legal indicator vector. Ideally, the combined solution should be much closer to a legal solution than the Fiedler vector. <p> In [AR91], they extend their 2-dimensional hyperplane algorithm to d dimensions, finding the optimal vector partitioning in O (n d (d+3)=2 ) time. Frankle <ref> [Fra87] </ref> has shown how to exhaustively search a d-dimensional vector space with probes, finding the optimal solution in O (n d1 ) time.
Reference: [FRW94] <author> J. Falkner, F. Rendl, and H. Wolkowicz. </author> <title> "A Computational Study of Graph Partitioning." </title> <journal> Mathematical Programming, </journal> <volume> 66 </volume> <pages> 211-239, </pages> <year> 1994. </year>
Reference-contexts: Thus, it should be possible to identify such subsets of vectors and thereby construct high-quality clusterings. * Perform diagonal optimization. Cullum et al. [JW75] showed how to find a diagonal matrix D that minimizes the sum of the first d eigenvalues of A+D. 158 Many researchers, e.g., [DH73] [RW95] <ref> [FRW94] </ref>, have applied various types of diagonal optimization both to improve the quality of lower bounds on the cost of a solution and to enhance the performance of their spectral partitioning heuristics.
Reference: [GB83] <author> M. K. Goldberg and M. Burstein. </author> <title> "Heuristic Improvement Technique for Bisection of VLSI Networks." </title> <booktitle> In Proc. IEEE Intl. Conf. Computer Design, </booktitle> <pages> pp. 122-125, </pages> <year> 1983. </year> <month> 207 </month>
Reference-contexts: A similar approach was proposed earlier by <ref> [GB83] </ref>. Feo and Khellaf [FK90] proposed merging pairs of vertices into clusters according to a maximum-weight matching. Tight performance bounds were shown for this approach on graphs with edge weights that satisfy the triangle inequality, but the matching process generally requires O (n 3 ) time.
Reference: [GH61] <author> R. Gomory and T. C. Hu. </author> <title> "Multi-Terminal Network Flows." </title> <journal> J. SIAM, </journal> <volume> 9 </volume> <pages> 551-570, </pages> <year> 1961. </year>
Reference-contexts: With no cluster size bounds, min-cut bipartitioning can be solved by converting the hypergraph to a flow network and then computing a certain set of n 1 flows (corresponding to the Gomory-Hu cut tree <ref> [GH61] </ref>) and applying the max-flow min-cut theorem [FF62] to obtain a minimum cut. Many algorithms are known which can solve the max-flow problem in polynomial time; see [GTT89] [AMO93] for surveys.
Reference: [GHJ91] <author> A. Guenoche, P. Hansen, and B. Jaumard. </author> <title> "Efficient Algorithms for Divisive Hierarchical Clustering with the Diameter Criterion." </title> <journal> Journal of Classification, </journal> <volume> 8 </volume> <pages> 5-30, </pages> <year> 1991. </year>
Reference-contexts: Iteratively applying Hubert's [Hub73] algorithm yields an O (kn 2 ) implementation for DQ. Guenoche et al. <ref> [GHJ91] </ref> showed how to modify the bipartitioning algorithm of [Rao71] to partition the entire hierarchy in O (n 2 log n) time. <p> Average tour costs for 3-Opt, Lin-Kernighan, SFC and SFC + 3-Opt were 79.28, 78.25, 96.30 and 79.80 respectively. * In comparing CL and DQ, Guenoche et al. <ref> [GHJ91] </ref> conclude that CL usually creates partitionings with larger diameter. We confirm this behavior for small k and d = 2, but find that CL performs better for larger k. <p> Results are given in Table 3.5 using Euclidean distance in &lt; 4 as a dissimilarity measure. Results for this data set have previously been presented in [DH80] <ref> [GHJ91] </ref>. * Average temperatures in Farenheit for January, April, July, and October for 88 cities in the United States are quoted from The World Almanac [Hof92].
Reference: [GJ79] <author> M. Garey and D. S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <publisher> Freeman, </publisher> <year> 1979. </year>
Reference-contexts: A special case of min-cut bipartitioning is called min-cut bisection, in which L = 2 * and U = 2 + *. If * = 0, then the problem of finding any solution that satisfies the cluster size constraints is NP-Complete <ref> [GJ79] </ref> (by reduction to number partitioning); hence, * is traditionally set to the largest vertex weight, max v2V A (v). Min-cut bisection is NP-complete [GJ79], and virtually all size-constrained cut-based objectives are also NP-Complete by reduction to min-cut bisection. <p> If * = 0, then the problem of finding any solution that satisfies the cluster size constraints is NP-Complete <ref> [GJ79] </ref> (by reduction to number partitioning); hence, * is traditionally set to the largest vertex weight, max v2V A (v). Min-cut bisection is NP-complete [GJ79], and virtually all size-constrained cut-based objectives are also NP-Complete by reduction to min-cut bisection. While ignoring size bounds leads to impractical solutions, min-cut bisection may be unnecessarily restrictive. More relaxed size constraints may permit a much better solution while still maintaining relatively balanced clusters.
Reference: [GL89] <author> G. H. Golub and C. F. Van Loan. </author> <title> Matrix Computations. </title> <publisher> The Johns Hopkins University Press, </publisher> <address> second edition, </address> <year> 1989. </year>
Reference-contexts: This triangular system can be solved easily <ref> [GL89] </ref>. The row order in which Gaussian elimination is performed greatly affects the sparsity of L and U ; the goal is to minimize the total fill-in, i.e., non-zero entries in L and U , resulting from factorization. The nested-dissection paradigm is the most common use of partitioning for factorization. <p> We assume that the eigenvectors are normalized, i.e., for 1 j n, ~ j (C) T ~ j (C) = jj~ j (C)jj 2 = 1. The symmetry of C guarantees that the eigenvalues are real and that an orthonormal basis of eigenvectors exists <ref> [GL89] </ref>.
Reference: [Gla87] <author> C. A. Glasbey. </author> <title> "Complete Linkage as a Multiple Stopping Rule for Single Linkage Clustering." </title> <journal> Journal of Classification, </journal> <volume> 4 </volume> <pages> 103-109, </pages> <year> 1987. </year>
Reference-contexts: Hansen, Jau-mard, and Frank [HJF87] have proposed to maximize the sum of splits, and Hansen, Jaumard, and Musitu [HJM87] have added size constraints to the Max-Split objective. Both Delattre and Hansen [DH80] and Glasbey <ref> [Gla87] </ref> have proposed approaches that trade off between diameter and split. For geometric instances, Rao [Rao71] discusses minimizing the sum of squared distances from each point to the centroid of its cluster and also minimizing the sum of average distances from each point to its cluster's centroid.
Reference: [GM95] <author> S. Guattery and G. L. Miller. </author> <title> "On the Performance of the Spectral Graph Partitioning Methods." </title> <booktitle> In Proc. ACM/SIAM Symp. Discrete Algorithms, </booktitle> <pages> pp. 233-242, </pages> <year> 1995. </year>
Reference-contexts: Thus, ~ 2 is commonly referred to as the Fiedler vector and 2 as the Fiedler value. Spectral bipartitioning and such variants as finding vertex separators have been explored by several researchers, notably in the scientific computing community, e.g., [Bar82] [PSL90] [Sim91] [HL95a] <ref> [GM95] </ref> [LPS93] [ST96]. We make the following observation: Theorem 5.3 Spectral bisection may have an arbitrarily high performance ratio. <p> This solution is an (n 2 ) factor worse than the optimum bisection with cut two, obtained by assigning A and C to one cluster and B to the other. Guattery and Miller <ref> [GM95] </ref> present various families of graphs (e.g., bounded-degree planar graphs, 2-dimensional meshes, and well-shaped multi-dimensional meshes) for which spectral bipartitioning will have unbounded performance ratio. Despite this result, Spielman and Teng [ST96] maintain that spectral methods based on splitting the Fiedler vector are still effective.
Reference: [GMT95] <author> J. R. Gilbert, G. L. Miller, and S.-H. Teng. </author> <title> "Geometric Mesh Partitioning: Implementation and Experiments." </title> <booktitle> In Proceedings of the 9th International Parallel Processing Symposium, </booktitle> <pages> pp. 418-427, </pages> <year> 1995. </year>
Reference-contexts: graph until it reaches some reasonable size, then gradually uncluster the graph while running an iterative improvement based partitioner [HL95b] [KK95a] [KK95b]. 2 Geometric approaches use both connectivity information from the graph and the physical locations of the vertices in 2- or 3-dimensional space in order to construct a solution <ref> [GMT95] </ref> [NRL86]. Search-based approaches traverse the graph and grow clusters as vertices are visited, starting a new cluster after the current cluster has reached its size threshold [CL96].
Reference: [Gon85] <author> T. F. Gonzalez. </author> <title> "Clustering to Minimize the Maximum Intercluster Distance." </title> <journal> Theoretical Computer Science, </journal> <volume> 38 </volume> <pages> 293-306, </pages> <year> 1985. </year>
Reference-contexts: For geometric instances, Min-Diameter algorithms with a performance ratio of 2 have been given by Gonzalez <ref> [Gon85] </ref> and by Feder and Greene [FG88]. Brucker [Bru78] showed that the Min-Sum-Diameters objective is also NP-hard for k &gt; 2; optimal 2-way partitioning algorithms for this objective have been given by Hansen and Jaumard [HJ87], Monma and Suri [MS91], and Hershberger [Her91]. <p> Optimal max-split partitionings can be found via the well-known "single-linkage" method. The min-radius objective is known to be NP-Complete [Hoc84], but approximation algorithms for geometric instances have been given by <ref> [Gon85] </ref> [FG88] [HS85] [Hoc85]. 3.2 Review of Classic Min-Diameter Approaches 3.2.1 The Divisive Min-Diameter (DQ) Algorithm Many algorithms can find optimal 2-way partitionings for the Min-Diameter objective. For example, Hubert [Hub73] presents an elegant algorithm that constructs a maximum spanning tree over G and then vertex 2-colors this tree. <p> Tight upper bounds on the performance ratio of CL remain unknown for 1-dimensional instances for k 4 and multi-dimensional geometric instances for k 2. 3.2.3 K-Center (KC) Algorithm Last, we discuss the O (kn) k-center (KC) method <ref> [Gon85] </ref>, shown in Figure 3.10. KC iteratively constructs a set of k "cluster centers" such that the next center chosen is as far as possible from the previously chosen centers. After k centers 60 have been selected, each vertex is assigned to the same cluster as its closest center. <p> This construction is actually designed to minimize "radius", but the next theorem shows that it may be well-suited for minimizing the maximum cluster diameter. Theorem 3.7 For geometric instances, KC has a performance ratio of 2 for the Min-Diameter objective <ref> [Gon85] </ref>. Proof: After KC constructs a k-way partitioning P k , repeat Steps 2-4 to construct an extra (k + 1) st center, and let D denote the distance between the two closest among the k + 1 centers.
Reference: [GPS90] <author> J. Garbers, H. J. Promel, and A. Steger. </author> <title> "Finding Clusters in VLSI Circuits." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 520-523, </pages> <year> 1990. </year>
Reference-contexts: David Johnson (dsj@research.att.com) of AT&T Bell Laboratories also maintains a set of test cases that he has used for simulated annealing studies [JAM89]. Finally, early works in partitioning used various classes of random inputs [BHJ89] <ref> [GPS90] </ref> [San89] [WC89], but this is less common with the increased availability of "real circuits". 1.7 Thesis Overview The remainder of this thesis is divided into five main chapters: * Chapter 2 explores the problem of dividing a vertex ordering into a multi-way partitioning. <p> Each approach is identified by its underlying clustering intuition. (K; L)-connectivity: Vertices u and v are (K; L)-connected if there exists K edge-disjoint paths of length L or less between u and v. Garbers et al. <ref> [GPS90] </ref> proposed using the transitive closure of the (K; L)-connectedness relation for clustering into dense subgraphs. However, clusterings which use this criterion may not be that intuitive. <p> To make matters worse, determining (K; L)-connectivity is NP-Complete for L 5, and NP-Completeness for L = 4 remains an open question. In practice, <ref> [GPS90] </ref> ensures clusters are connected by placing two adjacent vertices in the same cluster if K edge-disjoint paths exist between them. <p> Non-geometric graph partitioning has no analogous natural similarity measure between vertices (cf. the many ad hoc means in the literature, such as all-pairs shortest paths, k l connectivity <ref> [GPS90] </ref>, degree=separation [CHK92], etc.). Because the min-cut partitioning objective seeks to minimize f and the vector partitioning objective seeks to maximize g, the two objectives appear incompatible. However, following [FK86] we may transform f into a maximization objective.
Reference: [GTT89] <author> A. V. Goldberg, E. Tardos, and R. E. Tarjan. </author> <title> "Network Flow Algorithms." </title> <type> Technical Report STAN-CS-89-1252, </type> <institution> Stanford University CS Dept., </institution> <year> 1989. </year>
Reference-contexts: Many algorithms are known which can solve the max-flow problem in polynomial time; see <ref> [GTT89] </ref> [AMO93] for surveys. Note that finding a minimum cut does not necessarily require a maximum flow fast techniques to find minimum cuts have been proposed in [HO92] [Kar93] [NI92].
Reference: [Gu93] <author> A. Guenoche. </author> <title> "Enumeration des Partitions de Diametre Minimum." </title> <journal> Discrete Mathematics, </journal> <volume> 111 </volume> <pages> 277-287, </pages> <year> 1993. </year>
Reference-contexts: Min-Diameter partitioning is NP-Complete in two or more dimensions for k 3 (e.g., Brucker [Bru78] and Hansen and Delattre [HD78]). Non-polynomial optimal algorithms have been proposed by Rao [Rao71], Hansen and Delattre [HD78], and Guenoche <ref> [Gu93] </ref> for this case; such algorithms can be effective in practice provided that the number of vertices is not too large. Brucker [Bru78] showed that Min-Diameter partitioning can be solved in polynomial time when the instance is 1-dimensional.
Reference: [GW95] <author> M. X. Goemans and D. P. Williamson. </author> <title> "Improved Approximation Algorithms for Maximum Cut and Satisfiability Problems Using Semidefinite Programming." </title> <journal> Journal of the ACM, </journal> <volume> 42(6) </volume> <pages> 1115-1145, </pages> <year> 1995. </year>
Reference-contexts: ) = min jjY n 1hk jh (H j ) = f 0 (P k ): Max Cut: Another problem which has shown recent interest in the literature is the Max-Cut problem [DP91] [DP93] [PR95]: Maximize: f (P k ) = k X jE (C h )j: Goemans and Williamson <ref> [GW95] </ref> presented an algorithm similar to the hyper-plane approach of [AR90] that approximates max-cut bipartitioning within a factor of .878 of optimal. This algorithm was extended to multi-way partitioning by [FJ95].
Reference: [GZG95] <author> M. Ghose, M. Zubair, and C. E. Grosch. </author> <title> "Parallel Partitioning of Sparse Matrices." </title> <journal> Computer Systems Science and Engineering, </journal> <volume> 10(1) </volume> <pages> 33-40, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: Besides these sets of VLSI benchmarks, graphs induced from the Harwell-Boeing sparse matrix collection (anonymous ftp to orion.cerfacs.fr) have also been studied in the literature (e.g, [Saa95] <ref> [GZG95] </ref>). Although intended to test scientific computing applications, these matrices nevertheless comprise an excellent set of test cases for graph partitioning. David Johnson (dsj@research.att.com) of AT&T Bell Laboratories also maintains a set of test cases that he has used for simulated annealing studies [JAM89].
Reference: [HA86] <author> L. Hubert and P. Arabie. </author> <title> "Unidimensional Scaling and Combinatorial Optimization." </title> <editor> In J. De Leeuw, W. Heiser, J. Meulman, and F. Critchley, editors, </editor> <booktitle> Multidimensional Data Analysis, </booktitle> <pages> pp. 181-196. </pages> <publisher> DSWO Press, </publisher> <address> Netherlands, </address> <year> 1986. </year>
Reference-contexts: Seriation is well-studied; it was first formulated as a combinatorial optimization by Defays [Def78], and various other approaches have been proposed including dynamic programming <ref> [HA86] </ref>, branch search [Def78] and smoothing [Pli86] [Pli96]. However, it is not clear how well the (dist (v i ; v j )jx i x j j) 2 terms capture our above intuition.
Reference: [Hag94] <author> L. Hagen. </author> <title> Circuit Partitioning. </title> <type> PhD thesis, </type> <institution> UCLA, </institution> <year> 1994. </year>
Reference-contexts: In other words, the gain is the decrease in solution cost that results from the pair-swap. For an undirected graph and the min-cut objective, the gain for this pair of vertices is given by 2 Some of the review material is based on the discussion in <ref> [Hag94] </ref>. 162 gain (v i ; v j ) = X (a ik a jk ) + v k 2C 1 The swapping process is iterated until all vertices become locked, and the lowest-cost bisection observed during the pass is returned. <p> Other works have used FM and Sanchis based algorithms to address partitioning onto a fixed topology [SK88] [Vij91] [Tra94]. 6.3.3 Using an Iterative Improvement Engine As problem sizes grow larger, the performance of standard iterative improvement algorithms tend to degrade. Hagen and Kahng [HK96] <ref> [Hag94] </ref> report a roughly normal distribution of solution costs for independent FM executions starting from random initial solutions. Table 6.1 reveals that the standard deviation of multiple 174 FM solutions increases proportionally with the instance size. <p> Motivated by this observation, Hagen and Kahng [HK96] <ref> [Hag94] </ref> proposed a hybrid genetic-local search variant that performs a crossover of multiple members of the population simultaneously (whereas typical genetic algorithms perform pairwise crossovers) to find more "central" solutions. The crossover operation actually produces a clustering, which is then used to produce an initial solution for two-phase FM. <p> The Metis package also includes multilevel algorithms for both top-down and non-hierarchical multi-way partitioning. Later, Kumar and Karypis [KK96] implemented a parallel version of this algorithm. In [AHK96], we have adapted the Metis code to handle circuit hypergraphs, and have also integrated the genetic approach of [HK96] <ref> [Hag94] </ref> to obtain more stable solution quality. 180 Hendrickson and Leland [HL95a] also developed a very efficient multilevel par-titioning algorithm which is included in the Chaco partitioning package (email to bahendr@sandia.gov). The coarsening step finds random maximal matching as in [BHJ89] [BJ93] and the multilevel algorithm of [PMC94]. <p> 128 182 147 148 3811 6031 8228 s38417 50 49 49 66 56 56 3032 4960 6782 avqlarge 140 128 129 183 148 148 4230 6657 9276 golem3 1661 1346 1340 2006 1465 1413 89800 104828 141704 Table 6.5: ML C results for different values of the matching ratio R. <ref> [Hag94] </ref>. * HB is the multilevel partitioning algorithm of Hauck and Borriello [HB95]. They actually set the vertex area to be proportional to its degree (for FPGA applications) yet their resulting bipartitionings still fall within the required size constraints even for unit areas.
Reference: [Hal70] <author> K. M. Hall. </author> <title> "An r-Dimensional Quadratic Placement Algorithm." </title> <journal> Management Science, </journal> <volume> 17 </volume> <pages> 219-229, </pages> <year> 1970. </year>
Reference-contexts: Nor is it clear whether seriation is a more appropriate framework than, say, the 1-dimensional placement objective of minimizing weighted squared distances, P 11&lt;jn dist (v i ; v j )(x i x j ) 2 <ref> [Hal70] </ref> (see Chapter 5). We leave open the effectiveness of ordering heuristics based on such previous frameworks. <p> Similar types of orderings have been applied to the 1-dimensional gate assignment problem (e.g., [FHK87]). Finally, several vertex orderings are implicit in heuristic global minimization of wirelength functions in 1-dimensional placements. These approaches <ref> [Hal70] </ref> [HK92c] [RDJ94] are discussed extensively in Chapter 5. 91 4.3 The Attraction Function At any point during a sequential construction of a vertex ordering, some vertices have been added to the ordering, while others remain unordered. <p> By "equivalence", we mean that substituting Q for A in each of the theorem proofs leads to the identical result. 115 5.2 A History of Spectral Partitioning Works which describe spectral methods for partitioning graphs have existed for a quarter of a century, e.g., <ref> [Hal70] </ref> [DH72] [DH73] [Fie73]. In this section, we present an in-depth historical review of the literature, while at the same time developing and proving some known theoretical results. <p> The bipartitioning cost function f (P 2 ) = jE (C 1 )j can be written as <ref> [Hal70] </ref>: f (P 2 ) = ~x T Q~x = 2 i=1 j=1 Proof: Consider the vector ~x T Q = ~x T (D A). <p> When an indicator vector has only binary entries (i.e., it corresponds to an actual bipartitioning), we say that it is a legal indicator vector. The following theorem is also due to Hall <ref> [Hal70] </ref>: Theorem 5.2 Subject to the constraints ~x T ~x = 1, ~x 2 &lt; n , and P n expression ~x T Q~x obtains its minimum value 2 when ~x = ~ 2 . <p> This potentially large error may be magnified by squaring U k as Chan et al. propose. 3 5.2.3 Other Multi-way Approaches Hall <ref> [Hal70] </ref> proposed a method for multi-way partitioning that uses the coordinates from the first d eigenvectors to map the vertices into d-dimensional space. Since the Fiedler vector gives the optimal linear placement in terms of squared edgelength, Hall reasoned that the other eigenvectors with small eigenvalues could also be utilized.
Reference: [Har75] <author> J. A. Hartigan. </author> <title> Clustering Algorithms. </title> <publisher> Wiley & Sons, </publisher> <year> 1975. </year>
Reference-contexts: Thus, one might intuitively characterize the desired groups as "compact" and "well-separated". The most common approaches include agglomerative, divide-and-conquer, and k-means clustering see Hartigan <ref> [Har75] </ref> (and Chapter 3) for a review. * Facilities Location: Given a set of data points V (typically in 2- or 3-dimensional space), the facilities location problem seeks a set W of k centers, which may or may not be members of V , such that the maximum distance from any
Reference: [HB95] <author> S. Hauck and G. Borriello. </author> <title> "An Evaluation of Bipartitioning Techniques." </title> <booktitle> In Proceedings of the Sixteenth Conference on Advanced Research in VLSI, </booktitle> <pages> pp. 383-402, </pages> <year> 1995. </year>
Reference-contexts: In other words, this approach greedily selects a maximal subset of mutually disjoint hyperedges, then contracts all hyperedges in this subset. In contrast to simple random matching, Hauck and Borriello <ref> [HB95] </ref> proposed to heuristically construct a high-weight matching in linear time. <p> The complexity of the gain computation causes a dual pass to require around 9-10 times more runtime than a primal pass. In their study on circuit partitioning algorithms, Hauck and Borriello <ref> [HB95] </ref> conclude that dual passes "are not worthwhile". Another possible modification of FM is to initially relax the cluster size constraints and then gradually tighten them. <p> Both of these tools report high-quality results for finite-element graphs and extremely short runtimes. The partitioning study of <ref> [HB95] </ref> explored numerous coarsening schemes with varying complexity, yet the authors chose a simple 183 connectivity-based scheme for their multilevel algorithm. Based on the intuitions afforded by of these works, we have also chosen to coarsen via a matching algorithm which loosely follows the heavy-edge matching algorithm used in Metis. <p> 56 56 3032 4960 6782 avqlarge 140 128 129 183 148 148 4230 6657 9276 golem3 1661 1346 1340 2006 1465 1413 89800 104828 141704 Table 6.5: ML C results for different values of the matching ratio R. [Hag94]. * HB is the multilevel partitioning algorithm of Hauck and Borriello <ref> [HB95] </ref>. They actually set the vertex area to be proportional to its degree (for FPGA applications) yet their resulting bipartitionings still fall within the required size constraints even for unit areas. <p> They report results that outperform the flow-based algorithm of Yang and Wong [YW94] and spectral bipartitioning [HK92c]. * The PARABOLI (PB) algorithm of Riess et al. [RDJ94] was widely consid-ered to be the state-of-the-art partitioner in 1994 and has been the subject of numerous comparisons since <ref> [HB95] </ref> [YW94] [LKH95] [DD96c] [DD96b].
Reference: [HD78] <author> P. Hansen and M. Delattre. </author> <title> "Complete Link Cluster Analysis by Graph Coloring." </title> <journal> Journal of the American Statistical, </journal> <volume> 73 </volume> <pages> 397-403, </pages> <year> 1978. </year>
Reference-contexts: An algorithm has a performance ratio of r if it always returns a solution P k such 49 that f (P k )=f ( ^ P k ) r. Min-Diameter partitioning is NP-Complete in two or more dimensions for k 3 (e.g., Brucker [Bru78] and Hansen and Delattre <ref> [HD78] </ref>). Non-polynomial optimal algorithms have been proposed by Rao [Rao71], Hansen and Delattre [HD78], and Guenoche [Gu93] for this case; such algorithms can be effective in practice provided that the number of vertices is not too large. <p> Min-Diameter partitioning is NP-Complete in two or more dimensions for k 3 (e.g., Brucker [Bru78] and Hansen and Delattre <ref> [HD78] </ref>). Non-polynomial optimal algorithms have been proposed by Rao [Rao71], Hansen and Delattre [HD78], and Guenoche [Gu93] for this case; such algorithms can be effective in practice provided that the number of vertices is not too large. Brucker [Bru78] showed that Min-Diameter partitioning can be solved in polynomial time when the instance is 1-dimensional.
Reference: [Her91] <author> J. Hershberger. </author> <title> "Minimizing the Sum of Diameters Efficiently." </title> <booktitle> In Proc. ACM Symp. Computational Geometry, </booktitle> <pages> pp. 62-65, </pages> <year> 1991. </year>
Reference-contexts: Brucker [Bru78] showed that the Min-Sum-Diameters objective is also NP-hard for k &gt; 2; optimal 2-way partitioning algorithms for this objective have been given by Hansen and Jaumard [HJ87], Monma and Suri [MS91], and Hershberger <ref> [Her91] </ref>. Optimal max-split partitionings can be found via the well-known "single-linkage" method.
Reference: [HGR96] <author> M. Hutton, J. P. Grossman, J. Rose, and D. Corneil. </author> <title> "Characterization and Parameterized Random Generation of Digital Circuits." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 94-99, </pages> <year> 1996. </year>
Reference-contexts: Our group and the group headed by Professor Shantanu Dutt at the University of Minnesota are working with the CBL to develop a new "eblif" format. The lack of large and current benchmarks has motivated Hutton et al. <ref> [HGR96] </ref> to develop a randomized circuit generator. Their tool measures properties such as path length, number of hierarchy levels, fan-out reconvergence, etc. for a real circuit and tries to generate a random circuit with the same characteristics. <p> Their experiments indicate that current place-and-route tools cannot distinguish between real circuits and their random circuits. Recently, Darnauer and Dai [DD96a] proposed an algorithm to construct random circuits that satisfy a target Rent parameter (see e.g., [HKK94]). The circuit generators of <ref> [HGR96] </ref> 21 and [DD96a] can both be used to generate arbitrarily large random circuits; how-ever, whether or not these circuits are realistic remains an open question.
Reference: [HHK95a] <author> L. W. Hagen, D. J.-H. Huang, and A. B. Kahng. </author> <title> "On Implementation Choices for Iterative Improvement Partitioning Algorithms." </title> <journal> IEEE Trans. </journal> <note> Computer-Aided Design (to appear), </note> <year> 1995. </year>
Reference-contexts: As recently as three years ago, classic iterative approaches [KL70] [FM82] were considered outdated, particularly with respect to their poor scaling of solution quality with instance size [HHK95b]. However, several recent works <ref> [HHK95a] </ref> [DD96c] [DD96b] [FHK96] have shown how small changes can yield significant improvements to classic approaches; these results have propelled iterative methods back to the forefront of partitioning research. <p> However, a First-In-First-Out (FIFO) organization which supports the same update efficiency could have been implemented just as easily. One might even use a random organization, possibly at the cost of increased runtimes may increase or a more complex bucket structure. The authors of <ref> [HHK95a] </ref> observe that Sanchis [San89], and most likely Krishnamurthy [Kri84], used random bucket selection schemes. In experiments with both the FM and Krishnamurthy algorithms, the authors of [HHK95a] found that the LIFO bucket organization is distinctly superior to FIFO and random bucket organizations. [HHK95a] ascribes the success of LIFO to its <p> The authors of <ref> [HHK95a] </ref> observe that Sanchis [San89], and most likely Krishnamurthy [Kri84], used random bucket selection schemes. In experiments with both the FM and Krishnamurthy algorithms, the authors of [HHK95a] found that the LIFO bucket organization is distinctly superior to FIFO and random bucket organizations. [HHK95a] ascribes the success of LIFO to its enforcement of "locality" in the choice of vertices to move, i.e., vertices that are naturally clustered together will tend to move sequentially. Hagen et al. [HHK95a] use <p> The authors of <ref> [HHK95a] </ref> observe that Sanchis [San89], and most likely Krishnamurthy [Kri84], used random bucket selection schemes. In experiments with both the FM and Krishnamurthy algorithms, the authors of [HHK95a] found that the LIFO bucket organization is distinctly superior to FIFO and random bucket organizations. [HHK95a] ascribes the success of LIFO to its enforcement of "locality" in the choice of vertices to move, i.e., vertices that are naturally clustered together will tend to move sequentially. Hagen et al. [HHK95a] use this idea of locality to propose an alternative formula for higher-level gains which also improves performance. <p> of <ref> [HHK95a] </ref> found that the LIFO bucket organization is distinctly superior to FIFO and random bucket organizations. [HHK95a] ascribes the success of LIFO to its enforcement of "locality" in the choice of vertices to move, i.e., vertices that are naturally clustered together will tend to move sequentially. Hagen et al. [HHK95a] use this idea of locality to propose an alternative formula for higher-level gains which also improves performance. That LIFO outperforms FIFO was also observed by Dutt and Deng [DD96c], who like [HHK95a] noted that looka-head tie-breaking does not improve the performance of FM when LIFO buckets are used (in other <p> Hagen et al. <ref> [HHK95a] </ref> use this idea of locality to propose an alternative formula for higher-level gains which also improves performance. That LIFO outperforms FIFO was also observed by Dutt and Deng [DD96c], who like [HHK95a] noted that looka-head tie-breaking does not improve the performance of FM when LIFO buckets are used (in other words, using LIFO instead of FIFO negates the advantage of lookahead tie-breaking). <p> Table 6.1 presents our own comparisons of LIFO with random (RND) and FIFO bucket schemes, allowing 10% deviation from exact bisection. Our implementations actually significantly outperform those of <ref> [HHK95a] </ref>, perhaps because their implementations were adapted from Sanchis' original partitioning code (and also because they perform exact bisection). <p> Like <ref> [HHK95a] </ref> [DD96c], the Table shows that LIFO significantly outperforms FIFO. However, we do not ob serve any improvement of LIFO over random selection (it appears that random selection may even be the best scheme of the three). <p> In our work below, we use a LIFO scheme since it is much faster than a random scheme within the context of our implementation. Clearly, the discrepancy between these results and those of <ref> [HHK95a] </ref> are a source of concern and need to be further explored. 169 Recently, Dutt and Deng [DD96b] proposed a different kind of tie-breaking approach, based on probabilistic techniques.
Reference: [HHK95b] <author> L. W. Hagen, D. J.-H. Huang, and A. B. Kahng. </author> <title> "Quantified Subopti-mality of VLSI Layout Heuristics." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 216-221, </pages> <year> 1995. </year>
Reference-contexts: As recently as three years ago, classic iterative approaches [KL70] [FM82] were considered outdated, particularly with respect to their poor scaling of solution quality with instance size <ref> [HHK95b] </ref>. However, several recent works [HHK95a] [DD96c] [DD96b] [FHK96] have shown how small changes can yield significant improvements to classic approaches; these results have propelled iterative methods back to the forefront of partitioning research.
Reference: [HJ87] <author> P. Hansen and B. Jaumard. </author> <title> "Minimum Sum of Diameters Clustering." </title> <journal> Journal of Classification, </journal> <volume> 4 </volume> <pages> 215-226, </pages> <year> 1987. </year> <month> 209 </month>
Reference-contexts: Brucker [Bru78] showed that the Min-Sum-Diameters objective is also NP-hard for k &gt; 2; optimal 2-way partitioning algorithms for this objective have been given by Hansen and Jaumard <ref> [HJ87] </ref>, Monma and Suri [MS91], and Hershberger [Her91]. Optimal max-split partitionings can be found via the well-known "single-linkage" method.
Reference: [HJF87] <author> P. Hansen, B. Jaumard, and O. Frank. </author> <title> "Maximum Sum-of-Splits Clustering." </title> <journal> Journal of Classification, </journal> <volume> 6 </volume> <pages> 177-193, </pages> <year> 1987. </year>
Reference-contexts: Hansen, Jau-mard, and Frank <ref> [HJF87] </ref> have proposed to maximize the sum of splits, and Hansen, Jaumard, and Musitu [HJM87] have added size constraints to the Max-Split objective. Both Delattre and Hansen [DH80] and Glasbey [Gla87] have proposed approaches that trade off between diameter and split.
Reference: [HJM87] <author> P. Hansen, B. Jaumard, and K. Musitu. </author> <title> "Weight Constrained Maximum Split Clustering." </title> <journal> Journal of Classification, </journal> <volume> 7 </volume> <pages> 217-240, </pages> <year> 1987. </year>
Reference-contexts: Hansen, Jau-mard, and Frank [HJF87] have proposed to maximize the sum of splits, and Hansen, Jaumard, and Musitu <ref> [HJM87] </ref> have added size constraints to the Max-Split objective. Both Delattre and Hansen [DH80] and Glasbey [Gla87] have proposed approaches that trade off between diameter and split.
Reference: [HK91] <author> L. Hagen and A. B. Kahng. </author> <title> "Fast Spectral Methods for Ratio Cut Partitioning and Clustering." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 10-13, </pages> <year> 1991. </year>
Reference-contexts: The best split of the ordering is returned as the solution. Pothen et al. [PSL90] have used this approach to find vertex separators, and Hendrickson and Leland [HL95a] have extended it to partitioning onto hypercube or mesh architectures. Hagen and Kahng <ref> [HK91] </ref> used this algorithm to optimize the Ratio Cut bipartitioning objective. * Another method which constructs a bipartitioning from a vertex ordering is due to Riess et al. [RDJ94]. <p> Two vertices representing hyperedges are connected by an edge if the corresponding hyperedges are incident to the same vertex. For real VLSI circuits, this graph is typically quite sparse due to vertex degree bounds <ref> [HK91] </ref>.
Reference: [HK92a] <author> L. Hagen and A. B. Kahng. </author> <title> "Improving the Quadratic Objective Function in Module Placement." </title> <booktitle> In Proc. IEEE Intl. ASIC Conf., </booktitle> <pages> pp. 42-45, </pages> <year> 1992. </year>
Reference-contexts: unit separation [CP68]: since a hyperedge e must span je slots over a distance of at least jej 1, the weighting should be inversely proportional to jej 1 so that the objective does not "try too hard" to place the vertices into an impossibly small span of slots (also see <ref> [HK92a] </ref>). * In a linear placement, if a hyperedge e spans exactly jej 1 slots (i.e., its placement is optimal), then a weight function of 6 jej (jej+1) gives a total cost of jej1 for the sum of edge lengths assuming unit length between neighboring slots. J.-H.
Reference: [HK92b] <author> L. Hagen and A. B. Kahng. </author> <title> "A New Approach to Effective Circuit Clustering." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 422-427, </pages> <year> 1992. </year>
Reference-contexts: For example, the number of modules reported for the test02 06 benchmarks is higher in [YCL95] than in <ref> [HK92b] </ref>, which is likely due to the interpretation of I/O pads. <p> Related experiments <ref> [HK92b] </ref> [AK93] have supported the intuition of Bui et al. [BHJ89] and Lengauer [Len90] that good local minima in the original instance are more easily reached from good local minima in the clustered instance. <p> The maximum cycle for vertex v i is the longest cycle that begins and ends at v i ; Cong et al. find all maximal cycles in linear time and then use these cycles to construct clusters. Hagen and Kahng <ref> [HK92b] </ref> assign v i and v j to the same cluster if their sameness is larger than zero, where sameness is computed as follows. Let CC (i; j) be the number of times that v j occurs in a cycle beginning at v i . <p> in our construction, we compare WINDOW to many other ordering heuristics and split all orderings with DP-RP. 4.5.1 WINDOW Versus Previous Clustering Methods We begin by comparing clusterings derived by our WINDOW + DP-RP methodology to the matching-based compaction algorithm (MBC) algorithm of [BHJ89], the random walk (RW-ST) algorithm of <ref> [HK92b] </ref>, and the simulated annealing (ANNEAL) algorithm of [SS93]. Table 4.1 compares the four clustering algorithms in terms of the Scaled Cost, Absorption and DS objectives. Comparisons of WINDOW with the AGG spectral-based clustering algorithm can be found in [AK96a]. <p> The clusterings for MBC and RW-ST were obtained from <ref> [HK92b] </ref> and we implemented ANNEAL using the same temperature schedule as [SS93]. Of the 3 Since DS is monotone, DP-RP can be applied to this objective; however, we did not devise an attraction function for DS, and simply used Scaled Cost attraction for WINDOW order-ings. <p> Examples of clustering algorithms designed for two-phase approaches are abundant in both the scientific computing and VLSI design literatures, e.g., [AK93] [AK94b] [BJ93] [BHJ89] <ref> [HK92b] </ref> [NOP87] [SK93] [VKF95] [AV96]. The "two-phase" approach can be extended to a multilevel approach by allowing as many phases as are desired. Figure 6.2 illustrates the multilevel partitioning paradigm with five phases or levels (as in [KK95a]).
Reference: [HK92c] <author> L. Hagen and A. B. Kahng. </author> <title> "New Spectral Methods for Ratio Cut Partitioning and Clustering." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11(9) </volume> <pages> 1074-1085, </pages> <year> 1992. </year>
Reference-contexts: One must therefore seek a completion of the hyperedge partitioning which assigns each shared vertex to a single cluster to optimize the vertex partitioning objective. Approaches include "voting" <ref> [HK92c] </ref> and bipartite matching [CHK92] [CLS96]. All of these approaches focus on bipartitioning. If a multi-way partitioning is desired, such approaches must be applied recursively, e.g., [PSL90] [WC91a]. <p> Within the context of our experimental testbed, the new ordering construction by itself outperforms existing graph ordering constructions <ref> [HK92c] </ref> [NI92] [CM69] [Kin69]. <p> Similar types of orderings have been applied to the 1-dimensional gate assignment problem (e.g., [FHK87]). Finally, several vertex orderings are implicit in heuristic global minimization of wirelength functions in 1-dimensional placements. These approaches [Hal70] <ref> [HK92c] </ref> [RDJ94] are discussed extensively in Chapter 5. 91 4.3 The Attraction Function At any point during a sequential construction of a vertex ordering, some vertices have been added to the ordering, while others remain unordered. <p> seems to be poor correlation between any of the objectives and two-phase FM optimization. (It is somewhat encouraging that WINDOW appears to outperform ANNEAL for the three largest test cases.) 4.5.2 WINDOW Versus Other Vertex Orderings Finally, we compared WINDOW orderings to seven other vertex ordering constructions: DFS, BFS, EIG1 <ref> [HK92c] </ref>, SFC [AK94c], Max-Adjacency (MA) [NI92], King [Kin69] and Cuthill-McKee (CM) [CM69]. We ran DP-RP on the vertex ordering constructed by each algorithm for each test case, again with L = 1, U = 20 and k as specified in Table 4.1. <p> For real VLSI circuits, this graph is typically quite sparse due to vertex degree bounds [HK91]. In this representation, a partitioning solution corresponds to a partitioning of hyperedges; thus, this solution must be transformed back into a partitioning of the vertices <ref> [HK92c] </ref> [CHK92] [CLS94]. * Rowan and Vannelli [VR85] propose an alternative construction of the ad jacency matrix which uses edge weights a ij = jN (v i )nN (v j )j + jN (v j )nN (v i )j The term jN (v i )nN (v j )j is the number <p> However, for larger k, k 1 good splitting points are required, which makes it much less likely that a good solution will be derived from a poor ordering. Table 5.4 reports results for our third set of experiments, which compare Melo to the multi-way partitioning algorithms RSB <ref> [HK92c] </ref> and KP [CSZ94]. <p> RSB +4.39 +5.47 +2.64 +8.30 +11.8 +9.60 +13.9 +19.7 +20.0 +10.6 Table 5.4: Scaled Cost (fi10 5 ) comparisons for partitionings derived from Melo orderings versus the RSB <ref> [HK92c] </ref> and KP [CSZ94] algo rithms. 156 the algorithm is so simple (see [AK93] for detailed runtimes for eigenvector com- putations). <p> We believe that diagonal optimization would aid vector partitioning, because the d optimized eigenvectors would better approximate the exact n-dimensional vector partitioning instance than the d unoptimized vectors. * Find and apply lower bounds. Graph spectra have been very useful for constructing lower bounds on partitioning [DH73] [Bop87] [Len90] <ref> [HK92c] </ref> [RW95], e.g., 2 is a lower bound on the cut of any bipartitioning. We would like to answer such questions as, "Assume that we have the optimal solution for a d-dimensional vector partitioning instance. <p> They actually set the vertex area to be proportional to its degree (for FPGA applications) yet their resulting bipartitionings still fall within the required size constraints even for unit areas. They report results that outperform the flow-based algorithm of Yang and Wong [YW94] and spectral bipartitioning <ref> [HK92c] </ref>. * The PARABOLI (PB) algorithm of Riess et al. [RDJ94] was widely consid-ered to be the state-of-the-art partitioner in 1994 and has been the subject of numerous comparisons since [HB95] [YW94] [LKH95] [DD96c] [DD96b].
Reference: [HK95a] <author> D. J.-H. Huang and A. B. Kahng. </author> <title> "Multi-Way System Partitioning into Single or Multiple Type FPGAs." </title> <booktitle> In Proc. ACM/SIGDA International Workshop on Field-Programmable Gate Arrays, </booktitle> <pages> pp. 140-145, </pages> <year> 1995. </year>
Reference-contexts: For a given number of clusters k, FPGA partitioning seeks to assign vertices to clusters such that jC h j U with the following objective: FPGA Partitioning: Minimize f (P k ) = max jE (C h )j This objective has been studied in, e.g., [CLC94] <ref> [HK95a] </ref> [KBK93]. The final objective that we study is motivated by data classification. With this application, an instance consists of a complete graph in which each vertex represents a data point and each edge represents the dissimilarity between a pair of data points.
Reference: [HK95b] <author> D. J.-H. Huang and A. B. Kahng. </author> <title> "When Clusters Meet Partitions: New Density-Based Methods for Circuit Decomposition." </title> <booktitle> In Proc. European Design and Test Conf., </booktitle> <pages> pp. 60-64, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: The Density objective <ref> [HK95b] </ref> maximizes the sum of cluster densities, where the density of a cluster C h is the number of hyperedges completely contained in C h , divided by the total weight of C h : Density: Maximize f (P k ) = h=1 A (C h ) The motivation for another <p> Cluster C 1 is then removed from the hypergraph and the process is repeated until the remaining hypergraph has fewer than U vertices. The strategy of finding a good cluster and "peeling" it from the circuit has also been used by <ref> [HK95b] </ref> and [AV96]. Wei and Cheng [WC91b] also use the Ratio Cut criterion in clustering, iteratively applying their bipartitioning heuristic to the largest remaining cluster as long as the largest cluster contains more than 2% of the total number of vertices.
Reference: [HK96] <author> L. Hagen and A. B. Kahng. </author> <title> "Combining Problem Reduction and Adaptive Multi-Start: A New Technique for Superior Iterative Partitioning." </title> <journal> IEEE Trans. </journal> <note> Computer-Aided Design (to appear), </note> <year> 1996. </year>
Reference-contexts: Other works have used FM and Sanchis based algorithms to address partitioning onto a fixed topology [SK88] [Vij91] [Tra94]. 6.3.3 Using an Iterative Improvement Engine As problem sizes grow larger, the performance of standard iterative improvement algorithms tend to degrade. Hagen and Kahng <ref> [HK96] </ref> [Hag94] report a roughly normal distribution of solution costs for independent FM executions starting from random initial solutions. Table 6.1 reveals that the standard deviation of multiple 174 FM solutions increases proportionally with the instance size. <p> Motivated by this observation, Hagen and Kahng <ref> [HK96] </ref> [Hag94] proposed a hybrid genetic-local search variant that performs a crossover of multiple members of the population simultaneously (whereas typical genetic algorithms perform pairwise crossovers) to find more "central" solutions. The crossover operation actually produces a clustering, which is then used to produce an initial solution for two-phase FM. <p> The Metis package also includes multilevel algorithms for both top-down and non-hierarchical multi-way partitioning. Later, Kumar and Karypis [KK96] implemented a parallel version of this algorithm. In [AHK96], we have adapted the Metis code to handle circuit hypergraphs, and have also integrated the genetic approach of <ref> [HK96] </ref> [Hag94] to obtain more stable solution quality. 180 Hendrickson and Leland [HL95a] also developed a very efficient multilevel par-titioning algorithm which is included in the Chaco partitioning package (email to bahendr@sandia.gov). The coarsening step finds random maximal matching as in [BHJ89] [BJ93] and the multilevel algorithm of [PMC94]. <p> Table 6.6 compares the cuts and obtained by ML C with R = 0:5 for 100 and 10 runs to nine such algorithms in the literature: * GMet [AHK96] combines an adaptation of the Metis multilevel partitioning algorithm of [KK95a] to circuit hypergraphs with genetic methods of <ref> [HK96] </ref> 191 Test MIN AVG CPU Case 1:0 0:5 0:33 1:0 0:5 0:33 1:0 0:5 0:33 balu 27 27 27 33 29 29 110 171 234 bm1 47 47 47 55 55 54 107 177 248 primary1 47 47 47 55 54 54 106 179 243 test04 48 48 48 66
Reference: [HKK94] <author> L. Hagen, A. B. Kahng, F. J. Kurdahi, and C. Ramachandran. </author> <title> "On the Intrinsic Rent Parameter and Spectra-Based Partitioning Methodologies." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 13(1) </volume> <pages> 27-37, </pages> <year> 1994. </year>
Reference-contexts: Their experiments indicate that current place-and-route tools cannot distinguish between real circuits and their random circuits. Recently, Darnauer and Dai [DD96a] proposed an algorithm to construct random circuits that satisfy a target Rent parameter (see e.g., <ref> [HKK94] </ref>). The circuit generators of [HGR96] 21 and [DD96a] can both be used to generate arbitrarily large random circuits; how-ever, whether or not these circuits are realistic remains an open question. <p> (C) 1 Rent's rule describes an average-case phenomenon in "good" circuit placements, i.e., that there is a power-law relationship jE (C h )j = d (C h ) jC h j r between the number of edges incident to a cluster and the size of the cluster (see [LR71] and <ref> [HKK94] </ref> for reviews). Here, d (C h ) = 1 P v2C deg (v) is the average degree of vertices in the cluster. Because the layout has finite size, the power-law relationship eventually breaks down when the number of clusters is small.
Reference: [HL93] <author> B. Hendrickson and R. Leland. </author> <title> "An Improved Spectral Load Balancing Method." </title> <booktitle> In Proceedings of the Sixth SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <volume> volume II, </volume> <pages> pp. 953-961, </pages> <year> 1993. </year>
Reference-contexts: There are many approaches that are commonly applied to this type of problem. Spectral methods use one or more eigenvectors of a matrix representation of the graph in order to help construct a solution [HL95a] <ref> [HL93] </ref> [Sim91] [RW95]. <p> Hall then proposed to "cluster" the points in the embedding, but did not specify a heuristic. Alpert and Kahng [AK93] explored Hall's idea by applying geometric clustering algorithms to these spectral embeddings, using Euclidean distance as the dissimilarity measure between pairs of modules. Hendrickson and Leland <ref> [HL93] </ref> [HL95a] proposed using the mapping of vertices to points in d-dimensional space to address the problem of partitioning onto a d-dimensional hypercube for the static load balancing of scientific computa 3 Note that the KP algorithm does not actually compute U k U T k , since the time complexity
Reference: [HL95a] <author> B. Hendrickson and R. Leland. </author> <title> "An Improved Spectral Graph Parti--tioning Algorithm for Mapping Parallel Computations." </title> <journal> SIAM Journal on Scientific Computing, </journal> <volume> 16(2) </volume> <pages> 452-69, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: There are many approaches that are commonly applied to this type of problem. Spectral methods use one or more eigenvectors of a matrix representation of the graph in order to help construct a solution <ref> [HL95a] </ref> [HL93] [Sim91] [RW95]. <p> The best split of the ordering is returned as the solution. Pothen et al. [PSL90] have used this approach to find vertex separators, and Hendrickson and Leland <ref> [HL95a] </ref> have extended it to partitioning onto hypercube or mesh architectures. Hagen and Kahng [HK91] used this algorithm to optimize the Ratio Cut bipartitioning objective. * Another method which constructs a bipartitioning from a vertex ordering is due to Riess et al. [RDJ94]. <p> Thus, ~ 2 is commonly referred to as the Fiedler vector and 2 as the Fiedler value. Spectral bipartitioning and such variants as finding vertex separators have been explored by several researchers, notably in the scientific computing community, e.g., [Bar82] [PSL90] [Sim91] <ref> [HL95a] </ref> [GM95] [LPS93] [ST96]. We make the following observation: Theorem 5.3 Spectral bisection may have an arbitrarily high performance ratio. <p> Hall then proposed to "cluster" the points in the embedding, but did not specify a heuristic. Alpert and Kahng [AK93] explored Hall's idea by applying geometric clustering algorithms to these spectral embeddings, using Euclidean distance as the dissimilarity measure between pairs of modules. Hendrickson and Leland [HL93] <ref> [HL95a] </ref> proposed using the mapping of vertices to points in d-dimensional space to address the problem of partitioning onto a d-dimensional hypercube for the static load balancing of scientific computa 3 Note that the KP algorithm does not actually compute U k U T k , since the time complexity would <p> Later, Kumar and Karypis [KK96] implemented a parallel version of this algorithm. In [AHK96], we have adapted the Metis code to handle circuit hypergraphs, and have also integrated the genetic approach of [HK96] [Hag94] to obtain more stable solution quality. 180 Hendrickson and Leland <ref> [HL95a] </ref> also developed a very efficient multilevel par-titioning algorithm which is included in the Chaco partitioning package (email to bahendr@sandia.gov). The coarsening step finds random maximal matching as in [BHJ89] [BJ93] and the multilevel algorithm of [PMC94]. <p> We now outline several algorithmic and implementation issues for the procedures used in Figure 6.3. 6.5.1 The M atch Coarsening Algorithm The Metis [KK95a] and Chaco <ref> [HL95a] </ref> multilevel packages respectively use linear time "heavy-edge" and "random" matching algorithms to construct a clustering. Both of these tools report high-quality results for finite-element graphs and extremely short runtimes. <p> If no unmatched w exists (i.e., all of the neighbors of v are matched), then v is assigned to its own cluster. When computing the conn function, we ignore hyperedges with more than ten vertices in order to reduce runtimes. The matching algorithms of [KK95a] <ref> [HL95a] </ref> both seek maximal matchings which will generally force the ratio of jV (i)j to jV (i + 1)j to be 1 2 . <p> Motivated by the successful multilevel partitioners of [KK95a] <ref> [HL95a] </ref> for finite-element graphs, we have implemented our own multilevel partitioning package for netlist hypergraphs which achieves excellent results. <p> There are several improvements that we plan to make to address the runtimes, performance and functionality of our multilevel tool: * We plan to implement a "boundary" version of FM in which only vertices incident to cut hyperedges are initially inserted into the data structure. As noted by <ref> [HL95a] </ref>, boundary vertices can be found easily by passing information down from the previous level during uncoarsening. <p> This will certainly reduce the CPU time required by the partitioner and may even enhance solution quality. 197 * We also would like to reduce runtimes via faster reinitialization of the FM buckets at the beginning of a pass <ref> [HL95a] </ref>. If only a few vertices were moved during a pass, then only these vertices and their neighbors need to be updated.
Reference: [HL95b] <author> B. Hendrickson and R. Leland. </author> <title> "A Multilevel Algorithm for Partitioning Graphs." </title> <booktitle> In Proc. Supercomputing, </booktitle> <year> 1995. </year>
Reference-contexts: Spectral methods use one or more eigenvectors of a matrix representation of the graph in order to help construct a solution [HL95a] [HL93] [Sim91] [RW95]. Multilevel methods iteratively cluster the graph until it reaches some reasonable size, then gradually uncluster the graph while running an iterative improvement based partitioner <ref> [HL95b] </ref> [KK95a] [KK95b]. 2 Geometric approaches use both connectivity information from the graph and the physical locations of the vertices in 2- or 3-dimensional space in order to construct a solution [GMT95] [NRL86].
Reference: [HM85] <author> T. C. Hu and K. Moerder. </author> <title> "Multiterminal Flows in a Hypergraph." </title> <editor> In T. C. Hu and E. Kuh, editors, </editor> <title> VLSI Circuit Layout: </title> <booktitle> Theory and Design, </booktitle> <pages> pp. 87-93. </pages> <publisher> IEEE Press, </publisher> <year> 1985. </year>
Reference-contexts: Hu and Moerder <ref> [HM85] </ref> have used this representation to find the global min cut of a hypergraph using network flows. * A dual representation maps hyperedges, rather than vertices, to vertices in the new graph [PR88] [Kah89].
Reference: [HMV92] <author> S. W. Hadley, B. L. Mark, and A. Vannelli. </author> <title> "An Efficient Eigenvector Approach for Finding Netlist Partitions." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 11(7) </volume> <pages> 885-892, </pages> <year> 1992. </year>
Reference-contexts: When d &lt; n eigenvectors are used, the vector partitioning instance is an approximation of the graph partitioning instance, but as d gets larger, the approximation becomes progressively better until it is exact for d = n. Hence, unlike other spectral partitioning works [Bar82] <ref> [HMV92] </ref> [RW95] [CSZ94], this result shows that the correct approach to multi-way spectral partitioning is to use as many eigenvectors as are practically possible. * We propose a greedy ordering heuristic for our vector partitioning problem, and we demonstrate that the resulting orderings can be used to construct high-quality partitioning solutions. <p> from jej jej 2 ) 2 w depending on the distribution of vertices; thus, Frankle and Karp set w = ( 2 jej ) 3=2 to minimize the worst-case deviation of cost from the square of the span (this model has also been used by [CSZ94]). * Hadley et al. <ref> [HMV92] </ref> propose a weighting scheme that depends on both jej and k, and guarantees that the cost of splitting e into k clusters will be bounded above by one. * For the maximum cost of a cut hyperedge to be one, Donath [Don88] shows that the appropriate edge weight is 4 <p> Thus, many works discard large nets to maintain sparsity [CS93] [CSZ94] <ref> [HMV92] </ref>. <p> Notice that for k = 2, their algorithm minimizes jjU 2 Rjj 2 , and the optimal solution is derived by sorting and splitting the Fiedler vector. Barnes' algorithm was applied to VLSI circuits by Hadley et al. <ref> [HMV92] </ref>, who also refined the solution via an FM [FM82] post-processing step. Vannelli and Rowan [VR85] also proposed a variant of Barnes' algorithm. Rendl and Wolkowicz [RW95] note that Barnes' approach "only makes sense" if U k is very close to an optimal solution.
Reference: [HO92] <author> J. Hao and J. B. Orlin. </author> <title> "A Faster Algorithm for Finding the Minimum Cut in a Graph." </title> <booktitle> In Proc. ACM/SIAM Symp. Discrete Algorithms, </booktitle> <pages> pp. 165-174, </pages> <address> Orlando, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: Many algorithms are known which can solve the max-flow problem in polynomial time; see [GTT89] [AMO93] for surveys. Note that finding a minimum cut does not necessarily require a maximum flow fast techniques to find minimum cuts have been proposed in <ref> [HO92] </ref> [Kar93] [NI92]. When cluster size bounds are ignored, optimal min-cut solutions are often quite unbalanced and hence not useful within a hierarchical design methodology; however, they can still form the basis of useful heuristics [YW94] [YW95]. A more practical formulation seeks min-cut bipartitionings with bounds on the cluster weights.
Reference: [Hoc84] <author> D. S. Hochbaum. </author> <title> "When Are NP-Hard Location Problems Easy?" Annals of Operations Research, </title> <address> 1(1-4):201-214, </address> <month> August </month> <year> 1984. </year>
Reference-contexts: Optimal max-split partitionings can be found via the well-known "single-linkage" method. The min-radius objective is known to be NP-Complete <ref> [Hoc84] </ref>, but approximation algorithms for geometric instances have been given by [Gon85] [FG88] [HS85] [Hoc85]. 3.2 Review of Classic Min-Diameter Approaches 3.2.1 The Divisive Min-Diameter (DQ) Algorithm Many algorithms can find optimal 2-way partitionings for the Min-Diameter objective.
Reference: [Hoc85] <author> D. S. Hochbaum. </author> <title> "Easy Solutions for the K-Center Problem or the Dominating Set Problem on Random Graphs." </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 25 </volume> <pages> 189-210, </pages> <year> 1985. </year>
Reference-contexts: Optimal max-split partitionings can be found via the well-known "single-linkage" method. The min-radius objective is known to be NP-Complete [Hoc84], but approximation algorithms for geometric instances have been given by [Gon85] [FG88] [HS85] <ref> [Hoc85] </ref>. 3.2 Review of Classic Min-Diameter Approaches 3.2.1 The Divisive Min-Diameter (DQ) Algorithm Many algorithms can find optimal 2-way partitionings for the Min-Diameter objective. For example, Hubert [Hub73] presents an elegant algorithm that constructs a maximum spanning tree over G and then vertex 2-colors this tree.
Reference: [Hof92] <author> M. S. Hoffman. </author> <booktitle> The World Almanac. </booktitle> <address> Pharos, New York, </address> <year> 1992. </year>
Reference-contexts: Results for this data set have previously been presented in [DH80] [GHJ91]. * Average temperatures in Farenheit for January, April, July, and October for 88 cities in the United States are quoted from The World Almanac <ref> [Hof92] </ref>. Results are given in Table 3.6, again using Euclidean distance as a dissimilarity measure for this 4-month (4-dimensional) instance. 74 * Finally, latitudinal and longitudinal coordinates for 335 North American cities are also quoted from The World Almanac [Hof92]. Results are given in Table 3.7. <p> cities in the United States are quoted from The World Almanac <ref> [Hof92] </ref>. Results are given in Table 3.6, again using Euclidean distance as a dissimilarity measure for this 4-month (4-dimensional) instance. 74 * Finally, latitudinal and longitudinal coordinates for 335 North American cities are also quoted from The World Almanac [Hof92]. Results are given in Table 3.7.
Reference: [Hof94] <author> A. G. Hoffman. </author> <title> "The Dynamic Locking Heuristic ANew Graph Partitioning Algorithm." </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, </booktitle> <pages> pp. 173-176, </pages> <year> 1994. </year>
Reference-contexts: Backing up in this manner prevents continuing an entire pass in which positive gain is unlikely to be realized. Note that both CLIP and CDIP can be utilized within any iterative improvement algorithm, regardless of how the gains 172 are computed. Hoffman <ref> [Hof94] </ref> tried to exploit a potential weakness of FM, namely that each vertex can only be moved once during a pass. <p> For example, if a vertex v is moved from C 1 to C 2 early in a pass, and its neighboring vertices are later moved from C 2 to C 1 , then v will be in the "wrong" cluster. Hoffman <ref> [Hof94] </ref> proposed a "dynamic locking mechanism" to use within FM: when a vertex v is moved out of cluster C h , e very vertex in N (v) " C h becomes unlocked, freeing the neighbors of v in C h to migrate out of C h .
Reference: [HS85] <author> D. S. Hochbaum and D. B. Shmoys. </author> <title> "A Unified Approach to Approximation Algorithms for Bottleneck Problems." </title> <journal> J. Assoc. Comput. Mach., </journal> <volume> 33(3) </volume> <pages> 533-550, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Optimal max-split partitionings can be found via the well-known "single-linkage" method. The min-radius objective is known to be NP-Complete [Hoc84], but approximation algorithms for geometric instances have been given by [Gon85] [FG88] <ref> [HS85] </ref> [Hoc85]. 3.2 Review of Classic Min-Diameter Approaches 3.2.1 The Divisive Min-Diameter (DQ) Algorithm Many algorithms can find optimal 2-way partitionings for the Min-Diameter objective. For example, Hubert [Hub73] presents an elegant algorithm that constructs a maximum spanning tree over G and then vertex 2-colors this tree.
Reference: [HSF96] <author> S. Harrell, T. Seidel, and B. Fay. </author> <booktitle> "The National Technology Roadmap for Semiconductors and SEMATECH Future Directions." Microelectronic Engineering, </booktitle> <address> 30(1-4):11-15, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: Effective circuit partitioning heuristics are becoming more crucial with the increasing complexity of VLSI designs. Systems with several million transistors are now common with up to 30 million transistors on a single device projected for the year 1998 <ref> [HSF96] </ref>. This trend results in instance complexities that are unmanageable for existing floorplanning, logic synthesis and physical design tools. Partitioning divides a system into smaller, more manageable components; the signals that pass between the components corresponds to the interactions between the design subproblems.
Reference: [Hub73] <author> L. Hubert. </author> <title> "Monotone Invariant Clustering Procedures." </title> <journal> Psychome-trika, </journal> <volume> 38(1) </volume> <pages> 47-62, </pages> <year> 1973. </year> <month> 211 </month>
Reference-contexts: Brucker [Bru78] showed that Min-Diameter partitioning can be solved in polynomial time when the instance is 1-dimensional. Rao [Rao71], Hubert <ref> [Hub73] </ref>, and Monma and Suri [MS91] proposed optimal polynomial algorithms for finding Min-Diameter bipartitionings of arbitrary instances, and speedups for geometric instances have been found by Asano et al. [ABK86] and Avis [Avi86]. <p> The min-radius objective is known to be NP-Complete [Hoc84], but approximation algorithms for geometric instances have been given by [Gon85] [FG88] [HS85] [Hoc85]. 3.2 Review of Classic Min-Diameter Approaches 3.2.1 The Divisive Min-Diameter (DQ) Algorithm Many algorithms can find optimal 2-way partitionings for the Min-Diameter objective. For example, Hubert <ref> [Hub73] </ref> presents an elegant algorithm that constructs a maximum spanning tree over G and then vertex 2-colors this tree. Vertices with the same color are then assigned to the same cluster. <p> Vertices with the same color are then assigned to the same cluster. To construct a hierarchy of (possibly non-optimal) partitioning solutions, a given 2-way partitioning algorithm can be iteratively applied to the largest remaining cluster: this "Divisive Min-Diameter" (DQ) algorithm is shown in Figure 3.1. Iteratively applying Hubert's <ref> [Hub73] </ref> algorithm yields an O (kn 2 ) implementation for DQ. Guenoche et al. [GHJ91] showed how to modify the bipartitioning algorithm of [Rao71] to partition the entire hierarchy in O (n 2 log n) time.
Reference: [HW53] <author> A. J. Hoffman and H. W. Wielandt. </author> <title> "The Variation of the Spectrum of a Normal Matrix." </title> <journal> Duke Math Journal, </journal> <volume> 20 </volume> <pages> 37-39, </pages> <year> 1953. </year>
Reference-contexts: The Hoffman-Wielandt <ref> [HW53] </ref> inequality states that if A and B are real nfin symmetric matrices with eigenvalues ff 1 ff 2 : : : ff n and fi 1 fi 2 : : : fi n respectively, then jjA Bjj 2 i=1 It is not hard to show that the eigenvalues of P
Reference: [HW79] <author> J. A. Hartigan and M. A. Wong. </author> <title> "A K-Means Clustering Algorithm." </title> <journal> Applied Statistics, </journal> <volume> 28(1) </volume> <pages> 100-108, </pages> <year> 1979. </year>
Reference-contexts: For geometric instances, Rao [Rao71] discusses minimizing the sum of squared distances from each point to the centroid of its cluster and also minimizing the sum of average distances from each point to its cluster's centroid. The k-means algorithm is commonly used for such objectives (see, e.g., <ref> [HW79] </ref>). How to choose the objective best suited to a particular clustering instance or application remains very much an open question. For geometric instances or, more specifically, instances embedded in the 2-dimensional Euclidean plane, it is often possible to generate approximate solutions.
Reference: [HWA78] <author> M. Hanan, P. K. Wolff, and B. J. Agule. </author> <title> "A Study of Placement Techniques." </title> <journal> J. Design Automation and Fault-Tolerant Computing, </journal> <volume> 2 </volume> <pages> 28-61, </pages> <year> 1978. </year>
Reference-contexts: Donath further shows that when there are more than two clusters, 4 jej 2 (jej mod 2) remains the correct uniform weighting to achieve this upper bound. * The authors of <ref> [HWA78] </ref> assume that the hyperedge will be routed as a spanning tree with jej 1 edges; hence, if the weights of these edges are to be evenly distributed among the clique edges, the clique edge weight function should be 2 jej . * For linear placement into fixed slots, Tsay and
Reference: [IM92] <author> H. Inayoshi and B. Manderick. </author> <title> "The Weighted Graph Bi-Partitioning Problem: A Look at GA Performance." </title> <booktitle> In Parallel Problem Solving from Nature, </booktitle> <pages> pp. 617-625. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: For example, Bui and Moon [BM94a] [BM94b] use FM in their genetic algorithm for circuit bipartitioning. Each time a new solution is generated via a crossover or mutation operation, FM is run as a post-processing step on the new solution. (A similar approach was proposed by <ref> [IM92] </ref>.) FM post-processing has also been applied to solutions obtained by tabu search, e.g., [AV93].
Reference: [IMW94] <author> K. Isomoto, Y. Mimasa, S. Wakabayashi, T. Koide, and N. Yoshida. </author> <title> "A Graph Bisection Algorithms Based on Subgraph Migration." </title> <journal> IE-ICE Trans. Fundamentals, </journal> <volume> E77-A(12):2039-2044, </volume> <month> December </month> <year> 1994. </year>
Reference-contexts: The approach of Isomoto et al. <ref> [IMW94] </ref> also searches for a good subset and moves it from one cluster to the other cluster before applying iterative improvement. A similar type of approach was proposed by Liu et al. [LKH95]. Their Gradient Fiduccia-Mattheyses algorithm (GFM) alternates FM refinements with gradient descents.
Reference: [IWW93] <author> E. Ihler, D. Wagner, and F. Wagner. </author> <title> "Modeling Hypergraphs by Graphs with the Same Mincut Properties." </title> <journal> Information Processing Letters, </journal> <volume> 45(4) </volume> <pages> 171-175, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: The primary difference between clique models is the choice of weights assigned to edges in the clique. Ideally, no matter how vertices of a clique are partitioned, the total cost of the cut edges should be one, corresponding to the cut of a single hyperedge. However, Ihler et al. <ref> [IWW93] </ref> prove that such a "perfect" clique model is impossible to achieve, and Lengauer [Len90] shows that no matter what weighting function is used, there exists some bipartitioning with ( jej) deviation from the desired unit cost of cutting the hyperedge. <p> Besides the clique model, there are several other methods for transforming a hypergraph to a graph: * One can construct random spanning trees, paths, or cycles over the vertices in every hyperedge (see, e.g., [DH72]). * A dummy vertex may be inserted to represent each hyperedge <ref> [IWW93] </ref> [KWM91], creating a "star" representation where each dummy vertex is connected by an edge to each vertex of the corresponding hyperedge.
Reference: [JAM89] <author> D. S. Johnson, C. R. Aragon, L. A. McGeoch, and C. Schevon. </author> <title> "Optimization by Simulated Annealing: An Experimental Evaluation Part I, Graph Partitioning." </title> <journal> Operations Research, </journal> <volume> 37 </volume> <pages> 865-892, </pages> <year> 1989. </year>
Reference-contexts: Although intended to test scientific computing applications, these matrices nevertheless comprise an excellent set of test cases for graph partitioning. David Johnson (dsj@research.att.com) of AT&T Bell Laboratories also maintains a set of test cases that he has used for simulated annealing studies <ref> [JAM89] </ref>.
Reference: [Joh67] <author> S. C. Johnson. </author> <title> "Hierarchical Clustering Schemes." </title> <journal> Psychometrika, </journal> <volume> 32(3) </volume> <pages> 241-254, </pages> <year> 1967. </year>
Reference-contexts: In this chapter, we analyze previous classic hierarchical approaches to partitioning for the Min-Diameter objective; this is one of the primary cluster analysis objectives in the literature. We prove new results on the worst-case performance of the complete-linkage algorithm <ref> [Joh67] </ref>. We also propose a new non-hierarchical approach that first constructs a "good tour" of the data set and then applies the DP-RP algorithm from Chapter 2 to derive multi-way partitioning solutions.
Reference: [Joh90] <author> D. S. Johnson. </author> <title> "Local Optimization and the Traveling Salesman Problem." </title> <booktitle> In Proc. of the 17th Intl. Colloquium on Automata, Languages and Programming, </booktitle> <pages> pp. 446-460, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Johnson <ref> [Joh90] </ref> has reported that 3-Opt and Lin-Kernighan (along with an iterative version of Lin-Kernighan) generally return tours with very low cost using very little runtime, and that these heuristics are preferable to constructive, simulated annealing, or genetic approaches.
Reference: [Joh96] <author> F. M. Johannes. </author> <title> "Partitioning of VLSI Circuits and Systems." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 83-87, </pages> <year> 1996. </year>
Reference-contexts: There are several reasons why partitioning has recently emerged as a critical optimization in many phases of the VLSI design cycle, and why the past several years have seen so much research activity on the subject. Overviews and surveys of VLSI partitioning have appeared in the works [AK95] <ref> [Joh96] </ref> [Len90] [PL88] [She93] [SY95]. Effective circuit partitioning heuristics are becoming more crucial with the increasing complexity of VLSI designs. Systems with several million transistors are now common with up to 30 million transistors on a single device projected for the year 1998 [HSF96].
Reference: [JW75] <author> W. E. Donath J. Cullum and P. Wolfe. </author> <title> "The Minimization of Certain Nondifferentiable Sums of Eigenvalues of Symmetric Matrices." </title> <booktitle> In Mathematical Programming Study, </booktitle> <volume> volume 3, </volume> <pages> pp. 35-55. </pages> <publisher> North-Holland, </publisher> <year> 1975. </year>
Reference-contexts: Thus, it should be possible to identify such subsets of vectors and thereby construct high-quality clusterings. * Perform diagonal optimization. Cullum et al. <ref> [JW75] </ref> showed how to find a diagonal matrix D that minimizes the sum of the first d eigenvalues of A+D. 158 Many researchers, e.g., [DH73] [RW95] [FRW94], have applied various types of diagonal optimization both to improve the quality of lower bounds on the cost of a solution and to enhance
Reference: [Kah89] <author> A. B. Kahng. </author> <title> "Fast Hypergraph Partition." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 762-766, </pages> <year> 1989. </year> <month> 212 </month>
Reference-contexts: Hu and Moerder [HM85] have used this representation to find the global min cut of a hypergraph using network flows. * A dual representation maps hyperedges, rather than vertices, to vertices in the new graph [PR88] <ref> [Kah89] </ref>. Two vertices representing hyperedges are connected by an edge if the corresponding hyperedges are incident to the same vertex. For real VLSI circuits, this graph is typically quite sparse due to vertex degree bounds [HK91].
Reference: [Kar77] <author> R. M. Karp. </author> <title> "Probabilistic Analysis of Partitioning Algorithms for the Traveling-Salesman Problem in the Plane." </title> <journal> Mathematics of Operations Research, </journal> <volume> 2(3) </volume> <pages> 209-224, </pages> <year> 1977. </year>
Reference-contexts: For example, in the nested dissection algorithm for Gaussian elimination, partitioning is used to find an ordering that results in low fill-in. As another example, the well-known TSP heuristic of Karp <ref> [Kar77] </ref> uses a partitioning of a planar point set to construct a heuristic tour (i.e., a cyclic vertex ordering) where every point in the current cluster is visited before the tour moves on to the next cluster.
Reference: [Kar93] <author> D. Karger. </author> <title> "Global Min-Cuts in RNC, and Other Ramifications of a Simple Min-Cut Algorithm." </title> <booktitle> In Proc. ACM/SIAM Symp. Discrete Algorithms, </booktitle> <pages> pp. 21-30, </pages> <year> 1993. </year>
Reference-contexts: Many algorithms are known which can solve the max-flow problem in polynomial time; see [GTT89] [AMO93] for surveys. Note that finding a minimum cut does not necessarily require a maximum flow fast techniques to find minimum cuts have been proposed in [HO92] <ref> [Kar93] </ref> [NI92]. When cluster size bounds are ignored, optimal min-cut solutions are often quite unbalanced and hence not useful within a hierarchical design methodology; however, they can still form the basis of useful heuristics [YW94] [YW95]. A more practical formulation seeks min-cut bipartitionings with bounds on the cluster weights. <p> The complete-linkage algorithm discussed in Chapter 3 falls under the "agglomerative" category. The criterion for choosing clusters C h and C l is what distinguishes among agglomerative variants. For undirected graphs, Karger <ref> [Kar93] </ref> proposed a heuristic which iteratively chooses a random edge and contracts its two incident clusters into a single cluster. 81 The approach can be extended to hypergraphs by contracting two or more clus-ters incident to a randomly chosen hyperedge.
Reference: [KB95] <author> R. Kuznar and F. Brglez. </author> <title> "PROP: A Recursive Paradigm for Area-Efficient and Performance Oriented Partitioning of Large FPGA Netlists." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 644-649, </pages> <year> 1995. </year>
Reference-contexts: Kring and Newton [KN91] modify FM to allow vertex replication, where a vertex may belong to more than one cluster. Many works have used modified versions of FM to address FPGA partitioning related objectives (with and without replication) [WK93] [KBK93] [KBZ94] <ref> [KB95] </ref>. Other works have used FM and Sanchis based algorithms to address partitioning onto a fixed topology [SK88] [Vij91] [Tra94]. 6.3.3 Using an Iterative Improvement Engine As problem sizes grow larger, the performance of standard iterative improvement algorithms tend to degrade.
Reference: [KBK93] <author> R. Kuznar, F. Brglez, and K. Kozminski. </author> <title> "Cost Minimization of Partitions into Multiple Devices." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 315-320, </pages> <year> 1993. </year>
Reference-contexts: For a given number of clusters k, FPGA partitioning seeks to assign vertices to clusters such that jC h j U with the following objective: FPGA Partitioning: Minimize f (P k ) = max jE (C h )j This objective has been studied in, e.g., [CLC94] [HK95a] <ref> [KBK93] </ref>. The final objective that we study is motivated by data classification. With this application, an instance consists of a complete graph in which each vertex represents a data point and each edge represents the dissimilarity between a pair of data points. <p> Kring and Newton [KN91] modify FM to allow vertex replication, where a vertex may belong to more than one cluster. Many works have used modified versions of FM to address FPGA partitioning related objectives (with and without replication) [WK93] <ref> [KBK93] </ref> [KBZ94] [KB95]. Other works have used FM and Sanchis based algorithms to address partitioning onto a fixed topology [SK88] [Vij91] [Tra94]. 6.3.3 Using an Iterative Improvement Engine As problem sizes grow larger, the performance of standard iterative improvement algorithms tend to degrade.
Reference: [KBZ94] <author> R. Kuznar, F. Brglez, and B. Zajc. </author> <title> "Multi-way Netlist Partitioning into Heterogeneous FPGAs and Minimization of Total Device Cost and Interconnect." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 238-243, </pages> <year> 1994. </year>
Reference-contexts: Kring and Newton [KN91] modify FM to allow vertex replication, where a vertex may belong to more than one cluster. Many works have used modified versions of FM to address FPGA partitioning related objectives (with and without replication) [WK93] [KBK93] <ref> [KBZ94] </ref> [KB95]. Other works have used FM and Sanchis based algorithms to address partitioning onto a fixed topology [SK88] [Vij91] [Tra94]. 6.3.3 Using an Iterative Improvement Engine As problem sizes grow larger, the performance of standard iterative improvement algorithms tend to degrade.
Reference: [KGG95] <author> V. Kumar, A. Grama, A. Gupta, and G. Karypis. </author> <title> Introduction to Parallel Computing, </title> <booktitle> volume 3. </booktitle> <address> Benjamin-Cummings, </address> <year> 1995. </year>
Reference-contexts: apply many of these techniques to VLSI circuit partitioning: Chapters 4, 5 and 6 respectively use search-based, spectral, and multilevel techniques. * Factorization for Sparse Matrix Computations: Partitioning is also useful as part of a preprocessing step for factorization by Gaussian elimination of large sparse linear systems A~x = b <ref> [KGG95] </ref>. (Note that the matrix A can be viewed as the adjacency matrix for the graph.) To solve the system, Gaussian elimination is applied to A to obtain the equivalent matrix LU , where L is a lower- and U is an upper-triangular matrix.
Reference: [Kin69] <author> I. P. King. </author> <title> "An Automatic Reordering Scheme for Simultaneous Equations Derived from Network Systems." </title> <journal> International Journal for Numerical Methods in Engineering, </journal> <volume> 2(4) </volume> <pages> 523-533, </pages> <month> October </month> <year> 1969. </year>
Reference-contexts: Within the context of our experimental testbed, the new ordering construction by itself outperforms existing graph ordering constructions [HK92c] [NI92] [CM69] <ref> [Kin69] </ref>. <p> matrix representation of a graph with n vertices, row reordering in a matrix directly corresponds to vertex ordering in a graph: * The Cuthill-McKee algorithm [CM69] for minimizing bandwidth is a BFS variant in which ties are broken in favor of the vertex with smallest degree. * The King algorithm <ref> [Kin69] </ref> is a min-perimeter approach: it builds a cluster by iteratively adding the vertex that minimizes the perimeter of the cluster (the sequence in which vertices are added to the cluster determines the ordering). <p> of the objectives and two-phase FM optimization. (It is somewhat encouraging that WINDOW appears to outperform ANNEAL for the three largest test cases.) 4.5.2 WINDOW Versus Other Vertex Orderings Finally, we compared WINDOW orderings to seven other vertex ordering constructions: DFS, BFS, EIG1 [HK92c], SFC [AK94c], Max-Adjacency (MA) [NI92], King <ref> [Kin69] </ref> and Cuthill-McKee (CM) [CM69]. We ran DP-RP on the vertex ordering constructed by each algorithm for each test case, again with L = 1, U = 20 and k as specified in Table 4.1.
Reference: [KK95a] <author> G. Karypis and V. Kumar. </author> <title> "Multilevel Graph Partitioning Schemes." </title> <editor> In P. Banerjee and P. Boca, editors, </editor> <booktitle> Proceedings of the 1995 International Conference on Parallel Processing, </booktitle> <volume> volume 3, </volume> <pages> pp. 113-122, </pages> <year> 1995. </year>
Reference-contexts: Multilevel methods iteratively cluster the graph until it reaches some reasonable size, then gradually uncluster the graph while running an iterative improvement based partitioner [HL95b] <ref> [KK95a] </ref> [KK95b]. 2 Geometric approaches use both connectivity information from the graph and the physical locations of the vertices in 2- or 3-dimensional space in order to construct a solution [GMT95] [NRL86]. <p> If the current cluster in the ordering has already been matched to another cluster, it is ignored. Karypis and Kumar <ref> [KK95a] </ref> proposed a very similar "heavy-edge matching" scheme that merges C l with C h such that the weight of the edges connecting C l and C h is maximized. <p> The "two-phase" approach can be extended to a multilevel approach by allowing as many phases as are desired. Figure 6.2 illustrates the multilevel partitioning paradigm with five phases or levels (as in <ref> [KK95a] </ref>). In a multilevel algorithm, a clustering of H (0) is used to induce the coarser hypergraph H (1), then a clustering of H (1) induces H (2), etc. until the most coarsened hyper-graph H (m) is constructed (m = 4 in the figure). <p> This technique permits the efficient computation of the Fiedler vector for very large graphs. A similar approach was later proposed by [DR95]. The works [Bar96] and [BS95] later showed how to utilize this multilevel technique within a parallel recursive implementation of spectral bisection. Karypis and Kumar <ref> [KK95a] </ref> have recently developed the Metis multilevel graph partitioning package (URL: http://www.cs.umn.edu/users/kumar). Metis was designed for efficient performance; it requires only 2.8 seconds of CPU time on a Sun Sparc 5 to bipartition a graph with more than 15,000 vertices and 91,000 edges. <p> Metis contains a modified version of FM that examines only "boundary" vertices during a pass; in addition, passes may terminate before convergence to save CPU time. The authors of <ref> [KK95a] </ref> study various matching-based coarsening algorithms and initial partitioning schemes, and conclude that weighted matching and greedy initial partitioning are good choices for finite-element graphs. The Metis package also includes multilevel algorithms for both top-down and non-hierarchical multi-way partitioning. <p> improve runtimes: (i) the algorithm can terminate before a pass is complete if further improvement appears unlikely; (ii) gains are saved after a pass is complete so that only moved vertices and their neighbors need to have their gains recomputed before the next pass; (iii) a boundary scheme similar to <ref> [KK95a] </ref> is efficiently implemented by saving the boundary vertices during uncoarsening. Cong and Smith [CS93] proposed applying their clique finding clustering algorithm (see Chapter 4) as the coarsening step in a multilevel circuit bipartitioning algorithm. More recently, Hauck and Borriello performed a detailed study of multilevel FPGA partitioning. <p> The result is an efficient partitioner that produces the lowest-cost solutions in the literature. We now describe our new multilevel algorithm, called ML, for partitioning netlist hypergraphs. The ML algorithm has the same basic structure as the Metis algorithm <ref> [KK95a] </ref> shown in Figure 6.2; pseudocode for ML is given in specified parameters T and R. <p> We now outline several algorithmic and implementation issues for the procedures used in Figure 6.3. 6.5.1 The M atch Coarsening Algorithm The Metis <ref> [KK95a] </ref> and Chaco [HL95a] multilevel packages respectively use linear time "heavy-edge" and "random" matching algorithms to construct a clustering. Both of these tools report high-quality results for finite-element graphs and extremely short runtimes. <p> If no unmatched w exists (i.e., all of the neighbors of v are matched), then v is assigned to its own cluster. When computing the conn function, we ignore hyperedges with more than ten vertices in order to reduce runtimes. The matching algorithms of <ref> [KK95a] </ref> [HL95a] both seek maximal matchings which will generally force the ratio of jV (i)j to jV (i + 1)j to be 1 2 . <p> Table 6.6 compares the cuts and obtained by ML C with R = 0:5 for 100 and 10 runs to nine such algorithms in the literature: * GMet [AHK96] combines an adaptation of the Metis multilevel partitioning algorithm of <ref> [KK95a] </ref> to circuit hypergraphs with genetic methods of [HK96] 191 Test MIN AVG CPU Case 1:0 0:5 0:33 1:0 0:5 0:33 1:0 0:5 0:33 balu 27 27 27 33 29 29 110 171 234 bm1 47 47 47 55 55 54 107 177 248 primary1 47 47 47 55 54 54 <p> Motivated by the successful multilevel partitioners of <ref> [KK95a] </ref> [HL95a] for finite-element graphs, we have implemented our own multilevel partitioning package for netlist hypergraphs which achieves excellent results.
Reference: [KK95b] <author> G. Karypis and V. Kumar. </author> <title> "Unstructured Graph Partioning and Sparse Matrix Ordering." </title> <type> Manuscript, </type> <year> 1995. </year>
Reference-contexts: Multilevel methods iteratively cluster the graph until it reaches some reasonable size, then gradually uncluster the graph while running an iterative improvement based partitioner [HL95b] [KK95a] <ref> [KK95b] </ref>. 2 Geometric approaches use both connectivity information from the graph and the physical locations of the vertices in 2- or 3-dimensional space in order to construct a solution [GMT95] [NRL86].
Reference: [KK96] <author> G. Karypis and V. Kumar. </author> <title> "Parallel Multilevel Graph Partitioning." </title> <booktitle> In Proceedings of the 10th International Parallel Processing Symposium, </booktitle> <pages> pp. 314-319, </pages> <year> 1996. </year>
Reference-contexts: The authors of [KK95a] study various matching-based coarsening algorithms and initial partitioning schemes, and conclude that weighted matching and greedy initial partitioning are good choices for finite-element graphs. The Metis package also includes multilevel algorithms for both top-down and non-hierarchical multi-way partitioning. Later, Kumar and Karypis <ref> [KK96] </ref> implemented a parallel version of this algorithm.
Reference: [KL70] <author> B. W. Kernighan and S. Lin. </author> <title> "An Efficient Heuristic Procedure for Partitioning Graphs." </title> <journal> Bell Syst. Tech. J., </journal> <volume> 49(2) </volume> <pages> 291-307, </pages> <year> 1970. </year> <month> 213 </month>
Reference-contexts: Our experiments suggest that the vector partitioning perspective opens the door to new and effective heuristics. * Finally, Chapter 6 explores new multilevel iterative approaches to circuit partitioning. As recently as three years ago, classic iterative approaches <ref> [KL70] </ref> [FM82] were considered outdated, particularly with respect to their poor scaling of solution quality with instance size [HHK95b]. <p> With respect to previous history, some approaches are "memoryless", e.g., simple greed or simulated annealing use only the current solution to derive a move to a neighboring solution. On the other hand, classic iterative improvement methods <ref> [KL70] </ref> [FM82] and tabu search use the history of previous solutions in order to avoid "local minima". Iterative (and more generally, move-based) approaches dominate both the VLSI CAD literature and industry practice for several reasons. <p> Our future work seeks to improve the performance, runtimes and functionality of our partitioning tool. 6.2 Classic Approaches 6.2.1 The Kernighan-Lin (KL) Algorithm In 1970, Kernighan and Lin <ref> [KL70] </ref> introduced what is often described as the first "good" graph bisection heuristic. Their algorithm uses a pair-swap neighborhood structure and proceeds in a series of passes.
Reference: [KN91] <author> C. Kring and A. R. </author> <title> Newton. "A Cell-Replicating Approach to Mincut--Based Circuit Partitioning." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 2-5, </pages> <year> 1991. </year>
Reference-contexts: Numerous variants of FM have been proposed to handle partitioning objectives other than min-cut. Wei and Cheng [WC89] have proposed an FM variant to address the Ratio Cut objective, and Sechen and Chen [SC88] address a hierarchical placement-based objective function. Kring and Newton <ref> [KN91] </ref> modify FM to allow vertex replication, where a vertex may belong to more than one cluster. Many works have used modified versions of FM to address FPGA partitioning related objectives (with and without replication) [WK93] [KBK93] [KBZ94] [KB95].
Reference: [Kri84] <author> B. Krishnamurthy. </author> <title> "An Improved Min-Cut Algorithm for Partitioning VLSI Networks." </title> <journal> IEEE Transactions on Computers, </journal> <volume> 33(5) </volume> <pages> 438-446, </pages> <year> 1984. </year>
Reference-contexts: function, a hyperedge e incident to v and S will exert the same attraction on v regardless of how many pins of e are in S.) Breaking ties by measuring looking ahead to how close the net is to being uncut is similar in spirit to lookahead iterative improvement schemes <ref> [Kri84] </ref> [San89]. In general, naive updates of Attract (v) in Step 3 of the ordering framework may result in an O (n 2 ) construction. However, many attraction functions Attract (v) increase (decrease) monotonically throughout the ordering process. <p> If the bucket indexed by M AXGAIN becomes empty, then M AXGAIN is decreased until it indexes a non-empty bucket. 6.2.3 Tie-Breaking Strategies A frequently cited enhancement to FM is that of Krishnamurthy <ref> [Kri84] </ref>. He suggested that the lack of an "intelligent" tie-breaking mechanism from among the many possible vertices in the highest-gain bucket could cause FM to make poor choices. <p> Note that the 1 st -level gain is identical to the gain in the FM algorithm. Sanchis [San89] extended the FM algorithm, together with the lookahead scheme of <ref> [Kri84] </ref>, to multi-way partitioning. The approach is generally straightforward, although there are several knotty implementation issues. Sanchis' detailed explanation of these issues has led to wide use of her algorithm in industry, as well as its present status as a benchmark against which other multi-way partitioning heuristics are compared. <p> One might even use a random organization, possibly at the cost of increased runtimes may increase or a more complex bucket structure. The authors of [HHK95a] observe that Sanchis [San89], and most likely Krishnamurthy <ref> [Kri84] </ref>, used random bucket selection schemes. <p> We believe that it is worthwhile to spend more CPU time partitioning at these levels, e.g., by calling FM ten times or using LSMC, in order to obtain a better final bipartitioning solution. * Dutt and Deng [DD96b] showed that lookahead schemes <ref> [Kri84] </ref> do not work very well with FM when using a LIFO bucket scheme; however, their impact increases dramatically when using CLIP.
Reference: [KSH94] <author> B. Kumar, P. Sadayappan, and C.-H. Huang. </author> <title> "On Sparse Matrix Reordering for Parallel Factorisation." </title> <booktitle> In 1995 International Conference on Supercomputing, </booktitle> <pages> pp. 431-438, </pages> <year> 1994. </year>
Reference-contexts: Both of these constructions are over 25 years old, and works proposing ordering constructions (especially for massively parallel machines) are still abundant in 90 the literature (e.g., [Rag95] <ref> [KSH94] </ref>). The text of Saad [Saa85] provides a mod-ern overview of sparse matrix ordering schemes to construct preconditioners for iterative solvers. For the construction of sparse graph spanners, Peleg and Schaffer [PS89] have applied a max-perimeter ordering algorithm.
Reference: [KSJ91] <author> J. M. Kleinhans, G. Sigl, F. M. Johannes, and K. J. Antreich. "GORDIAN: </author> <title> VLSI Placement by Quadratic Programming and Slicing Optimization." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 10(3) </volume> <pages> 356-365, </pages> <year> 1991. </year>
Reference-contexts: The main premise of their PARABOLI approach is that the squared wirelength objective is less useful than the linear wirelength objective for 1-dimensional placement; 1 this insight derives from experiments with the GORDIAN placement package <ref> [KSJ91] </ref>. The authors of [RDJ94] use the second eigenvector of the graph's Lapla-cian matrix which to induce a 1-dimensional placement of the vertices. <p> We conclude that for bipartitioning, our multilevel algorithm with a CLIP engine provides excellent cut results compared to previous algorithms, while re quiring reasonable CPU times. 6.6.4 Quadrisection Comparisons Our final set of experiments compares ML for 4-way partitioning partitioning against the GORDIAN <ref> [KSJ91] </ref> standard cell placement program. GORDIAN uses the "proud" benchmark format which contains the physical locations for all 195 the I/O pads. The pads are preplaced, and the rest of the cells are then placed to minimize [RE95] either squared wirelength [KSJ91] or a linear wirelength objective [SDJ91] (GORDIAN-L). <p> compares ML for 4-way partitioning partitioning against the GORDIAN <ref> [KSJ91] </ref> standard cell placement program. GORDIAN uses the "proud" benchmark format which contains the physical locations for all 195 the I/O pads. The pads are preplaced, and the rest of the cells are then placed to minimize [RE95] either squared wirelength [KSJ91] or a linear wirelength objective [SDJ91] (GORDIAN-L). This optimization first induces a vertex ordering in the horizontal direction which is then split into a bipartitioning; then, another optimization induces a vertical vertex ordering which is split to yield a 4-way partitioning.
Reference: [KWM91] <author> Y. Kamidoi, S. Wakabayashi, J. Miyao, and N. Yoshida. </author> <title> "A Fast Heuristic for Hypergraph Bisection." </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, </booktitle> <volume> volume 2, </volume> <pages> pp. 1160-1163, </pages> <year> 1991. </year>
Reference-contexts: Besides the clique model, there are several other methods for transforming a hypergraph to a graph: * One can construct random spanning trees, paths, or cycles over the vertices in every hyperedge (see, e.g., [DH72]). * A dummy vertex may be inserted to represent each hyperedge [IWW93] <ref> [KWM91] </ref>, creating a "star" representation where each dummy vertex is connected by an edge to each vertex of the corresponding hyperedge.
Reference: [Len90] <author> T. Lengauer. </author> <title> Combinatorial Algorithms for Integrated Circuit Layout. </title> <address> Wiley-Teubner, </address> <year> 1990. </year>
Reference-contexts: There are several reasons why partitioning has recently emerged as a critical optimization in many phases of the VLSI design cycle, and why the past several years have seen so much research activity on the subject. Overviews and surveys of VLSI partitioning have appeared in the works [AK95] [Joh96] <ref> [Len90] </ref> [PL88] [She93] [SY95]. Effective circuit partitioning heuristics are becoming more crucial with the increasing complexity of VLSI designs. Systems with several million transistors are now common with up to 30 million transistors on a single device projected for the year 1998 [HSF96]. <p> Related experiments [HK92b] [AK93] have supported the intuition of Bui et al. [BHJ89] and Lengauer <ref> [Len90] </ref> that good local minima in the original instance are more easily reached from good local minima in the clustered instance. <p> Thus, [NI92] use orderings as opposed to traditional flow techniques to find minimum cuts without size constraints. In VLSI CAD, the min-perimeter and max-adjacency orderings are at the heart of "direct" clustering methods used in early placement and partitioning approaches <ref> [Len90] </ref>. Similar types of orderings have been applied to the 1-dimensional gate assignment problem (e.g., [FHK87]). Finally, several vertex orderings are implicit in heuristic global minimization of wirelength functions in 1-dimensional placements. <p> Ideally, no matter how vertices of a clique are partitioned, the total cost of the cut edges should be one, corresponding to the cut of a single hyperedge. However, Ihler et al. [IWW93] prove that such a "perfect" clique model is impossible to achieve, and Lengauer <ref> [Len90] </ref> shows that no matter what weighting function is used, there exists some bipartitioning with ( jej) deviation from the desired unit cost of cutting the hyperedge. Many weighting functions for the clique model have been proposed: * The "standard" clique net model [Len90] assigns weight 1 jej1 to each clique <p> model is impossible to achieve, and Lengauer <ref> [Len90] </ref> shows that no matter what weighting function is used, there exists some bipartitioning with ( jej) deviation from the desired unit cost of cutting the hyperedge. Many weighting functions for the clique model have been proposed: * The "standard" clique net model [Len90] assigns weight 1 jej1 to each clique edge, which ensures that the total vertex degrees remain unchanged in 109 the hypergraph to graph transformation. <p> They also permit the diagonal entries of A to be perturbed before computing the eigenvectors, leading to tighter lower bounds than those given by Donath and Hoffman [DH73]. Further, they extend the average case bisection bound of Boppana [Bop87] to k &gt; 2 (see <ref> [Len90] </ref> for a more complete discussion of spectrally derived lower bounds). Chan et al. [CSZ94] extend Theorem 5.4 to the Scaled Cost objective, proving for this objective that f (P k ) P k i=1 i . <p> We believe that diagonal optimization would aid vector partitioning, because the d optimized eigenvectors would better approximate the exact n-dimensional vector partitioning instance than the d unoptimized vectors. * Find and apply lower bounds. Graph spectra have been very useful for constructing lower bounds on partitioning [DH73] [Bop87] <ref> [Len90] </ref> [HK92c] [RW95], e.g., 2 is a lower bound on the cut of any bipartitioning. We would like to answer such questions as, "Assume that we have the optimal solution for a d-dimensional vector partitioning instance. <p> However, as problem sizes have become larger, their performance tends to degrade such that hundreds of runs are necessary to obtain solutions of reasonable quality <ref> [Len90] </ref>. However, new approaches within the last few years have significantly improved performance and have res cued iterative improvement approaches. 6.3 Modern Approaches 6.3.1 New Tie-breaking Strategies Even when gain vectors are used, ties may still occur in the 1 st through r th -level gains.
Reference: [Lin65] <author> S. Lin. </author> <title> "Computer Solutions of the Traveling Salesman Problem." </title> <journal> The Bell System Technical Journal, </journal> <volume> 44 </volume> <pages> 2245-2269, </pages> <year> 1965. </year>
Reference-contexts: We leave open the effectiveness of ordering heuristics based on such previous frameworks. Because of their widespread availability, ease of implementation and previous heuristic study, we choose to apply three ordering heuristics from the TSP literature; these are the 3-Opt heuristic of Lin <ref> [Lin65] </ref>, the L-K heuristic of Lin and Kernighan [LK73], and the spacefilling curve (SFC) heuristic of Bartholdi and 63 Platzman [BP88].
Reference: [LK73] <author> S. Lin and B. W. Kernighan. </author> <title> "An Effective Heuristics Algorithm for the Traveling Salesman Problem with Thousands of Nodes." </title> <journal> Operations Research, </journal> <volume> 21 </volume> <pages> 498-516, </pages> <year> 1973. </year>
Reference-contexts: Because of their widespread availability, ease of implementation and previous heuristic study, we choose to apply three ordering heuristics from the TSP literature; these are the 3-Opt heuristic of Lin [Lin65], the L-K heuristic of Lin and Kernighan <ref> [LK73] </ref>, and the spacefilling curve (SFC) heuristic of Bartholdi and 63 Platzman [BP88]. <p> Empirical studies by <ref> [LK73] </ref> on Euclidean and nonmetric problems have shown that the run time in practice grows approximately as n 2:2 ; however, the algorithm is PLS-complete [Pap92], i.e., no polynomial bounds on the number of iterations exist.
Reference: [LKH95] <author> L. T. Liu, M.T. Kuo, S.-C. Huang, and C.-K. Cheng. </author> <title> "A Gradient Method on the Initial Partition of Fiduccia-Mattheyses Algorithm." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 229-234, </pages> <year> 1995. </year>
Reference-contexts: We integrate these methods into an efficient multilevel partitioning algorithm which outperforms many previous works [DD96c] [RDJ94] [FHK96] <ref> [LKH95] </ref> in terms of balanced bipartitioning solutions. 24 CHAPTER 2 Restricted Partitioning via Dynamic Programming (DP-RP) 2.1 Partitioning with Vertex Orderings Vertex orderings and partitionings are strongly related concepts: partitioning solutions have been used to find vertex orderings, and vice versa. <p> The approach of Isomoto et al. [IMW94] also searches for a good subset and moves it from one cluster to the other cluster before applying iterative improvement. A similar type of approach was proposed by Liu et al. <ref> [LKH95] </ref>. Their Gradient Fiduccia-Mattheyses algorithm (GFM) alternates FM refinements with gradient descents. <p> They report results that outperform the flow-based algorithm of Yang and Wong [YW94] and spectral bipartitioning [HK92c]. * The PARABOLI (PB) algorithm of Riess et al. [RDJ94] was widely consid-ered to be the state-of-the-art partitioner in 1994 and has been the subject of numerous comparisons since [HB95] [YW94] <ref> [LKH95] </ref> [DD96c] [DD96b]. The authors of [RDJ94] report cuts that are 50% better than spectral bi partitioning. * The GFM results are for 80 runs of the Gradient Fiduccia-Mattheyses algorithm of [LKH95], and the GFM t results are for a single run of a "two-phase" variation of GFM. * Dutt and <p> consid-ered to be the state-of-the-art partitioner in 1994 and has been the subject of numerous comparisons since [HB95] [YW94] <ref> [LKH95] </ref> [DD96c] [DD96b]. The authors of [RDJ94] report cuts that are 50% better than spectral bi partitioning. * The GFM results are for 80 runs of the Gradient Fiduccia-Mattheyses algorithm of [LKH95], and the GFM t results are for a single run of a "two-phase" variation of GFM. * Dutt and Deng [DD96c] show how CLIP and CDIP (see above discussion) can be used within any partitioner.
Reference: [LLC95] <author> J. Li, J. Lillis, and C.-K. Cheng. </author> <title> "Linear Decomposition Algorithm for VLSI Design Applications." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 223-228, </pages> <year> 1995. </year>
Reference-contexts: More relaxed size constraints may permit a much better solution while still maintaining relatively balanced clusters. Indeed, L = 9A (V ) 11A (V ) 20 are the most popular cluster size bounds in the recent literature [RDJ94] [YW94] <ref> [LLC95] </ref> [DD96c] [DD96b]. 14 Rather than minimizing cut subject to cluster size constraints, one can more smoothly integrate the cut and balance criteria within the partitioning objective. Ratio Cut partitioning was introduced in [LR88] and first applied to circuit partitioning by Wei and Cheng [WC89].
Reference: [LPS93] <author> C. A. Leete, B. W. Peyton, and R. F. Sincover. </author> <title> "Toward a Parallel Recursive Spectral Bisection Mapping Tool." </title> <booktitle> In Proceedings of the Sixth SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <volume> volume II, </volume> <pages> pp. 923-928, </pages> <year> 1993. </year>
Reference-contexts: Thus, ~ 2 is commonly referred to as the Fiedler vector and 2 as the Fiedler value. Spectral bipartitioning and such variants as finding vertex separators have been explored by several researchers, notably in the scientific computing community, e.g., [Bar82] [PSL90] [Sim91] [HL95a] [GM95] <ref> [LPS93] </ref> [ST96]. We make the following observation: Theorem 5.3 Spectral bisection may have an arbitrarily high performance ratio.
Reference: [LR71] <author> B. Landman and R. Russo. </author> <title> "On a Pin Versus Block Relationship for Partition of Logic Graphs." </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-20:1469, </volume> <year> 1971. </year>
Reference-contexts: ln A (C) 1 Rent's rule describes an average-case phenomenon in "good" circuit placements, i.e., that there is a power-law relationship jE (C h )j = d (C h ) jC h j r between the number of edges incident to a cluster and the size of the cluster (see <ref> [LR71] </ref> and [HKK94] for reviews). Here, d (C h ) = 1 P v2C deg (v) is the average degree of vertices in the cluster. Because the layout has finite size, the power-law relationship eventually breaks down when the number of clusters is small.
Reference: [LR88] <author> T. Leighton and S. Rao. </author> <title> "An Approximate Max-Flow Min-Cut Theorem for Uniform Multicommodity Flow Problems with Applications to Approximation Algorithms." </title> <booktitle> In Proceedings of the IEEE Symposium on the Foundations of Computer Science, </booktitle> <pages> pp. 422-431, </pages> <year> 1988. </year>
Reference-contexts: Ratio Cut partitioning was introduced in <ref> [LR88] </ref> and first applied to circuit partitioning by Wei and Cheng [WC89]. Ratio Cut: Minimize f (P 2 ) = A (C 1 ) A (C 2 ) The numerator favors a small cut while the denominator favors more balanced cluster sizes.
Reference: [MF95] <author> S. A. Mohamed and M. M. Fahmy. </author> <title> "Binary Image Compression Using Efficient Partitioning into Rectangular Regions." </title> <journal> IEEE Transactions on Communications, </journal> <volume> 43(5) </volume> <pages> 1888-1890, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Matthews and Hearne [MH91] do not bother to actually quantify the relationships between objects since they "believe that it is particularly important : : : to fit the data without distorting the data : : :". See, e.g., [CDB86] [WL93] <ref> [MF95] </ref> for various partitioning formulations and algorithms. The primary research domain of this thesis is the physical design of VLSI circuits.
Reference: [MH91] <author> G. Matthews and J. Hearne. </author> <title> "Clustering Without a Metric." </title> <journal> IEEE Trans. Pattern Analysis and Machine Intelligence, </journal> <volume> 13(2) </volume> <pages> 175-184, </pages> <month> February </month> <year> 1991. </year>
Reference-contexts: An absolute partitioning objective is often difficult to formulate, and the problem instance itself, i.e., the relationship between objects, can be defined in many different ways. Matthews and Hearne <ref> [MH91] </ref> do not bother to actually quantify the relationships between objects since they "believe that it is particularly important : : : to fit the data without distorting the data : : :". See, e.g., [CDB86] [WL93] [MF95] for various partitioning formulations and algorithms.
Reference: [Moh91] <author> B. Mohar. </author> <title> "The Laplacian Spectrum of Graphs." </title> <editor> In Y. Alavi and et al., editors, </editor> <booktitle> Graph Theory, Combinatorics, and Applications, </booktitle> <pages> pp. 871-898. </pages> <publisher> Wiley, </publisher> <year> 1991. </year>
Reference-contexts: The Laplacian has recently become more popular because it has the following desirable properties, the first two of which are a consequence of positive semi-definiteness (see <ref> [Moh91] </ref> [MP93] for excellent surveys of the properties of the spectra of Laplacian matrices): * The eigenvectors are mutually orthogonal, and hence form a basis in n dimensional space. * Each eigenvalue j of Q is real. * The smallest eigenvalue 1 is zero and has corresponding eigenvector ~ 1 =
Reference: [MP93] <author> B. Mohar and S. Poljak. </author> <title> "Eigenvalues in Combinatorial Optimization." </title> <editor> In R. A Bualdi, S. Friedland, and V. Klee, editors, </editor> <title> Combinatorial and Graph-Theoretic Problems in Linear Algebra, </title> <booktitle> volume 50 of IMA Volumes in Mathematics and Its Applications, </booktitle> <pages> pp. 107-151. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The Laplacian has recently become more popular because it has the following desirable properties, the first two of which are a consequence of positive semi-definiteness (see [Moh91] <ref> [MP93] </ref> for excellent surveys of the properties of the spectra of Laplacian matrices): * The eigenvectors are mutually orthogonal, and hence form a basis in n dimensional space. * Each eigenvalue j of Q is real. * The smallest eigenvalue 1 is zero and has corresponding eigenvector ~ 1 = [
Reference: [MS91] <author> C. Monma and S. Suri. </author> <title> "Partitioning Points and Graphs to Minimize the Maximum or the Sum of Diameters." </title> <editor> In Y. Alavi, G. Chartrand, O. R. Oellermann, and A. J. Schwenk, editors, </editor> <booktitle> Proceedings of the Sixth International Conference on the Theory and Applications of Graphs, </booktitle> <address> New York, 1991. </address> <publisher> Wiley. </publisher>
Reference-contexts: Brucker [Bru78] showed that Min-Diameter partitioning can be solved in polynomial time when the instance is 1-dimensional. Rao [Rao71], Hubert [Hub73], and Monma and Suri <ref> [MS91] </ref> proposed optimal polynomial algorithms for finding Min-Diameter bipartitionings of arbitrary instances, and speedups for geometric instances have been found by Asano et al. [ABK86] and Avis [Avi86]. <p> Brucker [Bru78] showed that the Min-Sum-Diameters objective is also NP-hard for k &gt; 2; optimal 2-way partitioning algorithms for this objective have been given by Hansen and Jaumard [HJ87], Monma and Suri <ref> [MS91] </ref>, and Hershberger [Her91]. Optimal max-split partitionings can be found via the well-known "single-linkage" method.
Reference: [MTT93] <author> G. L. Miller, S.-H. Teng, W. Thurston, and S. A. Vavasis. </author> <title> "Automatic Mesh Partitioning." In Graph Theory and Sparse Matrix Computation, </title> <booktitle> volume 56 of IMA Volumes in Mathematics and its Applications, </booktitle> <pages> pp. 57-84. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <month> 215 </month>
Reference-contexts: Some examples include: 1 * Decomposition for Parallel Simulation: A finite-element graph can be used to represent complex physical system that commonly occur in, e.g., astrophysics, computational fluid dynamics, plasma physics, molecular dynamics, and structural analysis <ref> [MTT93] </ref>. Such a graph can also serve as a discretization of a system of partial differential equations (PDEs), which constitute the biggest source of sparse matrix problems [Saa85]. Each graph vertex corresponds to a subcomputation and each edge represents the degree of communication between computations.
Reference: [New91] <author> A. R. Newton, </author> <month> April </month> <year> 1991. </year> <type> Personal communication. </type>
Reference-contexts: All of these considerations motivate the development of circuit partitioning tools that identify interconnection and communication structure in a given system design. Indeed, one of the five-year predictions issued by participants at the 1991 CANDE workshop <ref> [New91] </ref> was that stand-alone partitioning for every phase of system synthesis would comprise the next major class of CAD tools to emerge in the marketplace.
Reference: [NI92] <author> H. Nagamochi and T. Ibaraki. </author> <title> "Computing Edge-Connectivity in Multigraphs and Capacitated Graphs." </title> <journal> Siam Journal of Discrete Mathematics, </journal> <volume> 5(1) </volume> <pages> 54-66, </pages> <year> 1992. </year>
Reference-contexts: Many algorithms are known which can solve the max-flow problem in polynomial time; see [GTT89] [AMO93] for surveys. Note that finding a minimum cut does not necessarily require a maximum flow fast techniques to find minimum cuts have been proposed in [HO92] [Kar93] <ref> [NI92] </ref>. When cluster size bounds are ignored, optimal min-cut solutions are often quite unbalanced and hence not useful within a hierarchical design methodology; however, they can still form the basis of useful heuristics [YW94] [YW95]. A more practical formulation seeks min-cut bipartitionings with bounds on the cluster weights. <p> Our ordering framework centers around the ideas of an attraction function and a window parameter. Unordered vertices are iteratively added to the ordering, based on their attraction to the previously ordered vertices. Various choices of attraction function can capture depth-first, breath-first, max-adjacency <ref> [NI92] </ref>, min-perimeter [PS89], and other well-studied graph traversals. Other choices can capture the intuition behind various VLSI netlist clustering objectives such as Scaled Cost and Absorption. The window parameter allows our framework to adapt to possible cluster size constraints, by limiting attraction to only the most recently ordered vertices. <p> Within the context of our experimental testbed, the new ordering construction by itself outperforms existing graph ordering constructions [HK92c] <ref> [NI92] </ref> [CM69] [Kin69]. <p> For the construction of sparse graph spanners, Peleg and Schaffer [PS89] have applied a max-perimeter ordering algorithm. Within their algorithm to find a minimum cut of a graph, Nagamochi and Ibaraki <ref> [NI92] </ref> use a max-adjacency ordering which iteratively adds the unordered vertex with the most edges incident to previously ordered vertices. In [NI92], the minimum cut separating the last two vertices in the ordering does not cross the global minimum cut of the graph; hence, these two vertices can be contracted into <p> Within their algorithm to find a minimum cut of a graph, Nagamochi and Ibaraki <ref> [NI92] </ref> use a max-adjacency ordering which iteratively adds the unordered vertex with the most edges incident to previously ordered vertices. In [NI92], the minimum cut separating the last two vertices in the ordering does not cross the global minimum cut of the graph; hence, these two vertices can be contracted into a single vertex without affecting the global minimum cut. <p> The ordering-contraction process process is repeated until the remaining graph has only two vertices, and the cutsize of the two-vertex graph will be the same as the minimum cut of the original graph. Thus, <ref> [NI92] </ref> use orderings as opposed to traditional flow techniques to find minimum cuts without size constraints. In VLSI CAD, the min-perimeter and max-adjacency orderings are at the heart of "direct" clustering methods used in early placement and partitioning approaches [Len90]. <p> The best vertex v i fl minimizes Attract (v i fl ) (see Figure 4.4 (b)). * Max-Adjacency Ordering. For general graphs, the authors of <ref> [NI92] </ref> define a traversal where the vertex v i fl with the most edges incident to S is iteratively added to the ordering, i.e., v i fl is maximally adjacent to S. <p> between any of the objectives and two-phase FM optimization. (It is somewhat encouraging that WINDOW appears to outperform ANNEAL for the three largest test cases.) 4.5.2 WINDOW Versus Other Vertex Orderings Finally, we compared WINDOW orderings to seven other vertex ordering constructions: DFS, BFS, EIG1 [HK92c], SFC [AK94c], Max-Adjacency (MA) <ref> [NI92] </ref>, King [Kin69] and Cuthill-McKee (CM) [CM69]. We ran DP-RP on the vertex ordering constructed by each algorithm for each test case, again with L = 1, U = 20 and k as specified in Table 4.1.
Reference: [NOP87] <author> T.-K. Ng, J. Oldfield, and V. Pitchumani. </author> <title> "Improvements of a Mincut Partition Algorithm." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 479-473, </pages> <year> 1987. </year>
Reference-contexts: Ng et al. <ref> [NOP87] </ref> propose an agglomerative circuit clustering algorithm based on Rent's rule. 1 The merging step chooses the pair of clusters C h and C l that minimize the Rent parameter 0 r 1 of the merged cluster C, where r = 1 + ln A (C) 1 Rent's rule describes an <p> Examples of clustering algorithms designed for two-phase approaches are abundant in both the scientific computing and VLSI design literatures, e.g., [AK93] [AK94b] [BJ93] [BHJ89] [HK92b] <ref> [NOP87] </ref> [SK93] [VKF95] [AV96]. The "two-phase" approach can be extended to a multilevel approach by allowing as many phases as are desired. Figure 6.2 illustrates the multilevel partitioning paradigm with five phases or levels (as in [KK95a]).
Reference: [NRL86] <author> B. Nour-Omid, A. Raefsky, and G. Lyzenga. </author> <title> "Solving Finite Element Equations on Concurrent Computers." </title> <editor> In A. K. Noor, editor, </editor> <booktitle> Parallel Computations and Their Impact on Mechanics, </booktitle> <pages> pp. 209-227. </pages> <institution> American Soc. Mech. Eng., </institution> <year> 1986. </year>
Reference-contexts: until it reaches some reasonable size, then gradually uncluster the graph while running an iterative improvement based partitioner [HL95b] [KK95a] [KK95b]. 2 Geometric approaches use both connectivity information from the graph and the physical locations of the vertices in 2- or 3-dimensional space in order to construct a solution [GMT95] <ref> [NRL86] </ref>. Search-based approaches traverse the graph and grow clusters as vertices are visited, starting a new cluster after the current cluster has reached its size threshold [CL96].
Reference: [Pap92] <author> C. H. Papadimitriou. </author> <title> "The Complexity of the Lin-Kernighan Heuristic fo the Traveling Salesman Problem." </title> <journal> SIAM Journal on Computing, </journal> <volume> 21(3) </volume> <pages> 450-465, </pages> <year> 1992. </year>
Reference-contexts: Empirical studies by [LK73] on Euclidean and nonmetric problems have shown that the run time in practice grows approximately as n 2:2 ; however, the algorithm is PLS-complete <ref> [Pap92] </ref>, i.e., no polynomial bounds on the number of iterations exist. The spacefilling curve (SFC) heuristic of [BP88] uses a recursive construction of Sierpinski (1912), the 2-dimensional case of which is shown in Figure 3.11.
Reference: [Pis84] <author> S. Pissanetsky. </author> <title> Sparse Matrix Technology. </title> <publisher> Academic Press, </publisher> <year> 1984. </year>
Reference-contexts: For sparse matrix computations, rows of a symmetric n fi n matrix are reordered to minimize the bandwidth or profile of the matrix, enabling more efficient storage and fast algorithms (see <ref> [Pis84] </ref> [Saa85] for an overview). Row reordering is also useful for reducing the fill-in, i.e., nonzeros inserted in a sparse matrix, when Cholesky factorization or Gaussian elimination is performed.
Reference: [PL88] <editor> B. T. Preas and M. J. Lorenzetti, editors. </editor> <booktitle> Physical Design Automation of VLSI Systems. </booktitle> <address> Benjamin/Cummings, </address> <year> 1988. </year>
Reference-contexts: Overviews and surveys of VLSI partitioning have appeared in the works [AK95] [Joh96] [Len90] <ref> [PL88] </ref> [She93] [SY95]. Effective circuit partitioning heuristics are becoming more crucial with the increasing complexity of VLSI designs. Systems with several million transistors are now common with up to 30 million transistors on a single device projected for the year 1998 [HSF96].
Reference: [Pli86] <author> V. Pliner. </author> <title> "The Problem of Multidimensional Metric Scaling." </title> <journal> Automation and Remote Control, </journal> <volume> 47 </volume> <pages> 560-567, </pages> <year> 1986. </year>
Reference-contexts: Seriation is well-studied; it was first formulated as a combinatorial optimization by Defays [Def78], and various other approaches have been proposed including dynamic programming [HA86], branch search [Def78] and smoothing <ref> [Pli86] </ref> [Pli96]. However, it is not clear how well the (dist (v i ; v j )jx i x j j) 2 terms capture our above intuition.
Reference: [Pli96] <author> V. Pliner. </author> <title> "Metric Unidimensional Scaling and Global Optimization." </title> <journal> Journal of Classification, </journal> <year> 1996. </year>
Reference-contexts: Seriation is well-studied; it was first formulated as a combinatorial optimization by Defays [Def78], and various other approaches have been proposed including dynamic programming [HA86], branch search [Def78] and smoothing [Pli86] <ref> [Pli96] </ref>. However, it is not clear how well the (dist (v i ; v j )jx i x j j) 2 terms capture our above intuition.
Reference: [PMC94] <author> R. Ponnusamy, N. Mansour, A. Choudhary, and G. C. Fox. </author> <title> "Graph Contraction for Mapping Data on Parallel Computers: A Quality-Cost Tradeoff." </title> <journal> Scientific Programming, </journal> <volume> 3(1) </volume> <pages> 73-82, </pages> <month> Spring </month> <year> 1994. </year>
Reference-contexts: The coarsening step finds random maximal matching as in [BHJ89] [BJ93] and the multilevel algorithm of <ref> [PMC94] </ref>.
Reference: [PP93] <author> C.-I. Park and Y.-B. Park. </author> <title> "An Efficient Algorithm for VLSI Network Partitioning Problem using a Cost Function with Balancing Factor." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 12(11) </volume> <pages> 1686-1694, </pages> <year> 1993. </year>
Reference-contexts: In their study on circuit partitioning algorithms, Hauck and Borriello [HB95] conclude that dual passes "are not worthwhile". Another possible modification of FM is to initially relax the cluster size constraints and then gradually tighten them. Park and Park <ref> [PP93] </ref> modify the 173 Sanchis algorithm to handle relaxed balance constraints, using the partitioning objective: f (P k ) = jE (P k )j + R C Bal (P k ) where C Bal (P k ) = 1h&lt;lk and R is a user-chosen parameter. <p> The term C Bal (P k ) is increases as clusters become more unbalanced. The authors of <ref> [PP93] </ref> use a Sanchis-like algorithm (without lookahead vectors) to address this objective; their implementation maintains two gain bucket structures, one for cut values and one for C Bal values. Shin and Kim [SK93] proposed a similar scheme, except that size constraints are not incorporated into the objective function.
Reference: [PR88] <author> L. T. Pillage and R. A. Rohrer. </author> <title> "A Quadratic Metric with a Simple Solution Scheme for Initial Placement." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 324-329, </pages> <year> 1988. </year> <month> 216 </month>
Reference-contexts: Hu and Moerder [HM85] have used this representation to find the global min cut of a hypergraph using network flows. * A dual representation maps hyperedges, rather than vertices, to vertices in the new graph <ref> [PR88] </ref> [Kah89]. Two vertices representing hyperedges are connected by an edge if the corresponding hyperedges are incident to the same vertex. For real VLSI circuits, this graph is typically quite sparse due to vertex degree bounds [HK91].
Reference: [PR95] <author> S. Poljak and F. Rendl. </author> <title> "Solving the Max-Cut Problem using Eigen--values." </title> <journal> Discrete Applied Mathematics, </journal> <volume> 62 </volume> <pages> 249-278, </pages> <year> 1995. </year>
Reference-contexts: can still define the vector partitioning cost function for this maximization objective as g (S k ) = min jjY n 1hk jh (H j ) = f 0 (P k ): Max Cut: Another problem which has shown recent interest in the literature is the Max-Cut problem [DP91] [DP93] <ref> [PR95] </ref>: Maximize: f (P k ) = k X jE (C h )j: Goemans and Williamson [GW95] presented an algorithm similar to the hyper-plane approach of [AR90] that approximates max-cut bipartitioning within a factor of .878 of optimal. This algorithm was extended to multi-way partitioning by [FJ95].
Reference: [PS85] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: For example, computing a minimum spanning tree of a weighted undirected graph requires O (n 2 ) time in general, but only O (n log n) time for points in 2-dimensional geometric space <ref> [PS85] </ref>. Single-source shortest path, all-pairs shortest paths, and matching are other examples of problems that can be solved more efficiently on geometric instances.
Reference: [PS89] <author> D. Peleg and A. Schaffer. </author> <title> "Graph Spanners." </title> <journal> Journal of Graph Theory, </journal> <volume> 13 </volume> <pages> 99-116, </pages> <year> 1989. </year>
Reference-contexts: Our ordering framework centers around the ideas of an attraction function and a window parameter. Unordered vertices are iteratively added to the ordering, based on their attraction to the previously ordered vertices. Various choices of attraction function can capture depth-first, breath-first, max-adjacency [NI92], min-perimeter <ref> [PS89] </ref>, and other well-studied graph traversals. Other choices can capture the intuition behind various VLSI netlist clustering objectives such as Scaled Cost and Absorption. The window parameter allows our framework to adapt to possible cluster size constraints, by limiting attraction to only the most recently ordered vertices. <p> The text of Saad [Saa85] provides a mod-ern overview of sparse matrix ordering schemes to construct preconditioners for iterative solvers. For the construction of sparse graph spanners, Peleg and Schaffer <ref> [PS89] </ref> have applied a max-perimeter ordering algorithm. Within their algorithm to find a minimum cut of a graph, Nagamochi and Ibaraki [NI92] use a max-adjacency ordering which iteratively adds the unordered vertex with the most edges incident to previously ordered vertices.
Reference: [PSL90] <author> A. Pothen, H. D. Simon, and K. P. Liou. </author> <title> "Partitioning Sparse Matrices with Eigenvectors of Graphs." </title> <journal> SIAM Journal of Matrix Analysis and its Applications, </journal> <volume> 11 </volume> <pages> 430-452, </pages> <year> 1990. </year>
Reference-contexts: The effectiveness of this approach 3 directly depends on the partitioning algorithm used to find small vertex separators. Although finding small vertex separators and finding minimum cuts (the problem addressed throughout the thesis), the underlying solution methods are the same. Spectral <ref> [PSL90] </ref> and geometric [EMT95] [FMT92] approaches are popular for this application. * Classification: Researchers in fields ranging from biostatistics to psychology to marketing commonly need to perform cluster analysis on experimentally derived data sets. In fact, Dickenson [Dic86] lists 17 pages of cluster analysis applications. <p> The best split of the ordering is returned as the solution. Pothen et al. <ref> [PSL90] </ref> have used this approach to find vertex separators, and Hendrickson and Leland [HL95a] have extended it to partitioning onto hypercube or mesh architectures. <p> Approaches include "voting" [HK92c] and bipartite matching [CHK92] [CLS96]. All of these approaches focus on bipartitioning. If a multi-way partitioning is desired, such approaches must be applied recursively, e.g., <ref> [PSL90] </ref> [WC91a]. The weakness of recursive hierarchical partitioning is that early greedy decisions for small k may result in poor solutions when continued to larger values of k. As an example, consider dividing the 8-vertex graph of Figure 2.1 (a) into four clusters of size two. <p> Thus, ~ 2 is commonly referred to as the Fiedler vector and 2 as the Fiedler value. Spectral bipartitioning and such variants as finding vertex separators have been explored by several researchers, notably in the scientific computing community, e.g., [Bar82] <ref> [PSL90] </ref> [Sim91] [HL95a] [GM95] [LPS93] [ST96]. We make the following observation: Theorem 5.3 Spectral bisection may have an arbitrarily high performance ratio.
Reference: [Rag95] <author> P. Raghavan. </author> <title> "Distributed Sparse Gaussian Elimination and Orthogonal Factorization." </title> <journal> SIAM Journal on Scientific Computing, </journal> <volume> 6(16) </volume> <pages> 1462-1477, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: Both of these constructions are over 25 years old, and works proposing ordering constructions (especially for massively parallel machines) are still abundant in 90 the literature (e.g., <ref> [Rag95] </ref> [KSH94]). The text of Saad [Saa85] provides a mod-ern overview of sparse matrix ordering schemes to construct preconditioners for iterative solvers. For the construction of sparse graph spanners, Peleg and Schaffer [PS89] have applied a max-perimeter ordering algorithm.
Reference: [Rao64] <author> C. R. Rao. </author> <title> "The Use and Interpretation of Principal Component Analysis in Applied Research." </title> <journal> Sankhya Series A, </journal> <volume> 26 </volume> <pages> 329-358, </pages> <year> 1964. </year>
Reference-contexts: Viewing the rows of C as points in d-space centered at the origin, the bipartitioning problem reduces to finding a subset of points whose center is furthest from the origin. To find an appropriate matrix C, the authors of [AR90] invoke a theorem from principal components analysis <ref> [Rao64] </ref>, that the best rank-d approximation to A with respect to both the spectral and Frobenius norms is U d d U T d . (Fol lowing [AR90], we use the eigenvectors of A so the columns of U d are ~ 1 ; : : : ; ~ d with
Reference: [Rao71] <author> M. R. Rao. </author> <title> "Cluster Analysis and Mathematical Programming." </title> <journal> Journal of the American Statistical Association, </journal> <volume> 66(335) </volume> <pages> 622-626, </pages> <year> 1971. </year>
Reference-contexts: Hansen, Jau-mard, and Frank [HJF87] have proposed to maximize the sum of splits, and Hansen, Jaumard, and Musitu [HJM87] have added size constraints to the Max-Split objective. Both Delattre and Hansen [DH80] and Glasbey [Gla87] have proposed approaches that trade off between diameter and split. For geometric instances, Rao <ref> [Rao71] </ref> discusses minimizing the sum of squared distances from each point to the centroid of its cluster and also minimizing the sum of average distances from each point to its cluster's centroid. The k-means algorithm is commonly used for such objectives (see, e.g., [HW79]). <p> Min-Diameter partitioning is NP-Complete in two or more dimensions for k 3 (e.g., Brucker [Bru78] and Hansen and Delattre [HD78]). Non-polynomial optimal algorithms have been proposed by Rao <ref> [Rao71] </ref>, Hansen and Delattre [HD78], and Guenoche [Gu93] for this case; such algorithms can be effective in practice provided that the number of vertices is not too large. Brucker [Bru78] showed that Min-Diameter partitioning can be solved in polynomial time when the instance is 1-dimensional. Rao [Rao71], Hubert [Hub73], and Monma <p> been proposed by Rao <ref> [Rao71] </ref>, Hansen and Delattre [HD78], and Guenoche [Gu93] for this case; such algorithms can be effective in practice provided that the number of vertices is not too large. Brucker [Bru78] showed that Min-Diameter partitioning can be solved in polynomial time when the instance is 1-dimensional. Rao [Rao71], Hubert [Hub73], and Monma and Suri [MS91] proposed optimal polynomial algorithms for finding Min-Diameter bipartitionings of arbitrary instances, and speedups for geometric instances have been found by Asano et al. [ABK86] and Avis [Avi86]. <p> Iteratively applying Hubert's [Hub73] algorithm yields an O (kn 2 ) implementation for DQ. Guenoche et al. [GHJ91] showed how to modify the bipartitioning algorithm of <ref> [Rao71] </ref> to partition the entire hierarchy in O (n 2 log n) time.
Reference: [RDJ94] <author> B. M. Riess, K. Doll, and F. M. Johannes. </author> <title> "Partitioning Very Large Circuits Using Analytical Placement Techniques." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 646-651, </pages> <year> 1994. </year>
Reference-contexts: More relaxed size constraints may permit a much better solution while still maintaining relatively balanced clusters. Indeed, L = 9A (V ) 11A (V ) 20 are the most popular cluster size bounds in the recent literature <ref> [RDJ94] </ref> [YW94] [LLC95] [DD96c] [DD96b]. 14 Rather than minimizing cut subject to cluster size constraints, one can more smoothly integrate the cut and balance criteria within the partitioning objective. Ratio Cut partitioning was introduced in [LR88] and first applied to circuit partitioning by Wei and Cheng [WC89]. <p> However, several recent works [HHK95a] [DD96c] [DD96b] [FHK96] have shown how small changes can yield significant improvements to classic approaches; these results have propelled iterative methods back to the forefront of partitioning research. We integrate these methods into an efficient multilevel partitioning algorithm which outperforms many previous works [DD96c] <ref> [RDJ94] </ref> [FHK96] [LKH95] in terms of balanced bipartitioning solutions. 24 CHAPTER 2 Restricted Partitioning via Dynamic Programming (DP-RP) 2.1 Partitioning with Vertex Orderings Vertex orderings and partitionings are strongly related concepts: partitioning solutions have been used to find vertex orderings, and vice versa. <p> Hagen and Kahng [HK91] used this algorithm to optimize the Ratio Cut bipartitioning objective. * Another method which constructs a bipartitioning from a vertex ordering is due to Riess et al. <ref> [RDJ94] </ref>. The main premise of their PARABOLI approach is that the squared wirelength objective is less useful than the linear wirelength objective for 1-dimensional placement; 1 this insight derives from experiments with the GORDIAN placement package [KSJ91]. The authors of [RDJ94] use the second eigenvector of the graph's Lapla-cian matrix which <p> from a vertex ordering is due to Riess et al. <ref> [RDJ94] </ref>. The main premise of their PARABOLI approach is that the squared wirelength objective is less useful than the linear wirelength objective for 1-dimensional placement; 1 this insight derives from experiments with the GORDIAN placement package [KSJ91]. The authors of [RDJ94] use the second eigenvector of the graph's Lapla-cian matrix which to induce a 1-dimensional placement of the vertices. <p> Similar types of orderings have been applied to the 1-dimensional gate assignment problem (e.g., [FHK87]). Finally, several vertex orderings are implicit in heuristic global minimization of wirelength functions in 1-dimensional placements. These approaches [Hal70] [HK92c] <ref> [RDJ94] </ref> are discussed extensively in Chapter 5. 91 4.3 The Attraction Function At any point during a sequential construction of a vertex ordering, some vertices have been added to the ordering, while others remain unordered. <p> that we performed with Melo: * Comparisons of the weighting schemes proposed in the previous section, * Comparisons with different values of d, * Multi-way partitioning comparisons with the RSB (recursive spectral bi partitioning) and KP [CSZ94] algorithms, and * Balanced bipartitioning comparisons with the SB (spectral bipartitioning) and PARABOLI <ref> [RDJ94] </ref> algorithms. The eigenvector computations were performed using LASO2 code [Sco80], with a driver provided by the authors of [CSZ94]. <p> We compare Melo to spectral bipartitioning (SB) and also to the PARABOLI algorithm of <ref> [RDJ94] </ref> (see Chapter 2). The reported Melo results reported are the best Ratio Cut values obtained from splitting each of the ten orderings constructed for schemes #2, #3, and #4; we use three schemes since the best scheme for this application remains unclear. <p> +15.7 s9234 166 1.95 74 0.86 79 0.92 108 516 +52.8 -6.53 s15850 125 0.46 91 0.33 52 0.19 308 1197 +58.7 +42.4 industry2 525 1.32 193 0.49 319 0.81 478 1855 +38.6 -39.5 Table 5.5: Min-cut and Ratio Cut (fi10 5 ) comparisons for the Melo, SB and PARABOLI <ref> [RDJ94] </ref> algorithms. All three algorithms require that each cluster contains at least 45% of the total number of vertices. <p> They report results that outperform the flow-based algorithm of Yang and Wong [YW94] and spectral bipartitioning [HK92c]. * The PARABOLI (PB) algorithm of Riess et al. <ref> [RDJ94] </ref> was widely consid-ered to be the state-of-the-art partitioner in 1994 and has been the subject of numerous comparisons since [HB95] [YW94] [LKH95] [DD96c] [DD96b]. The authors of [RDJ94] report cuts that are 50% better than spectral bi partitioning. * The GFM results are for 80 runs of the Gradient Fiduccia-Mattheyses <p> outperform the flow-based algorithm of Yang and Wong [YW94] and spectral bipartitioning [HK92c]. * The PARABOLI (PB) algorithm of Riess et al. <ref> [RDJ94] </ref> was widely consid-ered to be the state-of-the-art partitioner in 1994 and has been the subject of numerous comparisons since [HB95] [YW94] [LKH95] [DD96c] [DD96b]. The authors of [RDJ94] report cuts that are 50% better than spectral bi partitioning. * The GFM results are for 80 runs of the Gradient Fiduccia-Mattheyses algorithm of [LKH95], and the GFM t results are for a single run of a "two-phase" variation of GFM. * Dutt and Deng [DD96c] show how CLIP and
Reference: [RE95] <author> B. M. Riess and G. G. Ettelt. </author> <title> "SPEED: Fast and Effiecient Timing Driven Placement." </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, </booktitle> <volume> volume 1, </volume> <pages> pp. 377-380, </pages> <year> 1995. </year>
Reference-contexts: GORDIAN uses the "proud" benchmark format which contains the physical locations for all 195 the I/O pads. The pads are preplaced, and the rest of the cells are then placed to minimize <ref> [RE95] </ref> either squared wirelength [KSJ91] or a linear wirelength objective [SDJ91] (GORDIAN-L). This optimization first induces a vertex ordering in the horizontal direction which is then split into a bipartitioning; then, another optimization induces a vertical vertex ordering which is split to yield a 4-way partitioning.
Reference: [Rie95] <author> B. M. Riess, </author> <month> February </month> <year> 1995. </year> <type> Personal communication. </type>
Reference-contexts: In other cases, problems may arise from netlist con nectivity, e.g., the authors of GORDIAN discarded the smaller 40-module com ponent of the industry3.vpnr benchmark since it contained no I/O pads <ref> [Rie95] </ref> (other researchers might not remove this smaller component before partitioning). The VLSI partitioning field would greatly benefit from a standard set of 20 test cases exclusively designed for partitioning. <p> The algorithm continues to perform optimization in order to spread out the cells (i.e., prevent overlapping), but this initial 4-way partitioning is preserved in the final solution. We obtained GORDIAN-L placement solutions <ref> [Rie95] </ref> for the test cases in Table 6.8. For each placement solution, we split the placement into four equal-sized clusters and measured the total cut obtained. The best cut of the three GORDIAN variants (sometimes two, since not all the proud benchmarks contain timing information) is reported in the table.
Reference: [RS93] <author> K. Roy and C. Sechen. "A Timing-Driven N -Way Chip and Multi-Chip Partitioner." </author> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 240-247, </pages> <year> 1993. </year>
Reference-contexts: Feo and Khellaf [FK90] proposed merging pairs of vertices into clusters according to a maximum-weight matching. Tight performance bounds were shown for this approach on graphs with edge weights that satisfy the triangle inequality, but the matching process generally requires O (n 3 ) time. Roy and Sechen <ref> [RS93] </ref> also proposed a deterministic contraction approach; they first construct a weighted undirected graph using the standard clique model (see Chapter 1), then contract edges with weight higher than a given threshold. The threshold can be gradually raised until the desired number of clusters is obtained.
Reference: [RW95] <author> F. Rendl and H. Wolkowicz. </author> <title> "A Projection Technique for Partitioning the Nodes of a Graph." </title> <journal> Annals of Operations Research, </journal> <volume> 58 </volume> <pages> 155-179, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: There are many approaches that are commonly applied to this type of problem. Spectral methods use one or more eigenvectors of a matrix representation of the graph in order to help construct a solution [HL95a] [HL93] [Sim91] <ref> [RW95] </ref>. <p> Individual cluster size constraints may be prescribed, e.g., the works [Bar82] <ref> [RW95] </ref> require that A (C h ) = m h for user-prescribed cluster sizes m 1 m 2 : : : m k , or one may impose individual cluster constraints L h A (C h ) U h , 1 h k. <p> When d &lt; n eigenvectors are used, the vector partitioning instance is an approximation of the graph partitioning instance, but as d gets larger, the approximation becomes progressively better until it is exact for d = n. Hence, unlike other spectral partitioning works [Bar82] [HMV92] <ref> [RW95] </ref> [CSZ94], this result shows that the correct approach to multi-way spectral partitioning is to use as many eigenvectors as are practically possible. * We propose a greedy ordering heuristic for our vector partitioning problem, and we demonstrate that the resulting orderings can be used to construct high-quality partitioning solutions. <p> Barnes' algorithm was applied to VLSI circuits by Hadley et al. [HMV92], who also refined the solution via an FM [FM82] post-processing step. Vannelli and Rowan [VR85] also proposed a variant of Barnes' algorithm. Rendl and Wolkowicz <ref> [RW95] </ref> note that Barnes' approach "only makes sense" if U k is very close to an optimal solution. Consequently, the authors of [RW95] first relax the integer constraints of the assignment matrix X and find a matrix Y that is similar to U k , but is more likely to be <p> Vannelli and Rowan [VR85] also proposed a variant of Barnes' algorithm. Rendl and Wolkowicz <ref> [RW95] </ref> note that Barnes' approach "only makes sense" if U k is very close to an optimal solution. Consequently, the authors of [RW95] first relax the integer constraints of the assignment matrix X and find a matrix Y that is similar to U k , but is more likely to be close to a legal assignment matrix than U k They then use the transportation formulation to find the closest legal assignment matrix <p> Thus, it should be possible to identify such subsets of vectors and thereby construct high-quality clusterings. * Perform diagonal optimization. Cullum et al. [JW75] showed how to find a diagonal matrix D that minimizes the sum of the first d eigenvalues of A+D. 158 Many researchers, e.g., [DH73] <ref> [RW95] </ref> [FRW94], have applied various types of diagonal optimization both to improve the quality of lower bounds on the cost of a solution and to enhance the performance of their spectral partitioning heuristics. <p> Graph spectra have been very useful for constructing lower bounds on partitioning [DH73] [Bop87] [Len90] [HK92c] <ref> [RW95] </ref>, e.g., 2 is a lower bound on the cut of any bipartitioning. We would like to answer such questions as, "Assume that we have the optimal solution for a d-dimensional vector partitioning instance.
Reference: [Saa85] <author> Y. Saad. </author> <title> Iterative Methods for Sparse Linear Systems. </title> <publisher> PWS Publishing Company, </publisher> <year> 1985. </year> <month> 217 </month>
Reference-contexts: Such a graph can also serve as a discretization of a system of partial differential equations (PDEs), which constitute the biggest source of sparse matrix problems <ref> [Saa85] </ref>. Each graph vertex corresponds to a subcomputation and each edge represents the degree of communication between computations. To simulate the system on a distributed computing resource, each subcomputation must be assigned to a processor, i.e., each processor will map to a cluster of vertices. <p> For sparse matrix computations, rows of a symmetric n fi n matrix are reordered to minimize the bandwidth or profile of the matrix, enabling more efficient storage and fast algorithms (see [Pis84] <ref> [Saa85] </ref> for an overview). Row reordering is also useful for reducing the fill-in, i.e., nonzeros inserted in a sparse matrix, when Cholesky factorization or Gaussian elimination is performed. <p> Both of these constructions are over 25 years old, and works proposing ordering constructions (especially for massively parallel machines) are still abundant in 90 the literature (e.g., [Rag95] [KSH94]). The text of Saad <ref> [Saa85] </ref> provides a mod-ern overview of sparse matrix ordering schemes to construct preconditioners for iterative solvers. For the construction of sparse graph spanners, Peleg and Schaffer [PS89] have applied a max-perimeter ordering algorithm.
Reference: [Saa95] <author> Y. Saab. </author> <title> "A Fast and Robust Network Bisection Algorithm." </title> <journal> IEEE Transactions on Computers, </journal> <volume> 44(7) </volume> <pages> 903-913, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Besides these sets of VLSI benchmarks, graphs induced from the Harwell-Boeing sparse matrix collection (anonymous ftp to orion.cerfacs.fr) have also been studied in the literature (e.g, <ref> [Saa95] </ref> [GZG95]). Although intended to test scientific computing applications, these matrices nevertheless comprise an excellent set of test cases for graph partitioning. David Johnson (dsj@research.att.com) of AT&T Bell Laboratories also maintains a set of test cases that he has used for simulated annealing studies [JAM89]. <p> However, since its gain values are non-discrete, PROP cannot exploit the FM bucket structure; runtimes thus increase by a factor of four to eight. The heuristic is nevertheless still fairly efficient, and future work on probabilistic gain computations is certainly promising. 6.3.2 Modifying the Basic FM Structure Saab <ref> [Saa95] </ref> observes that in an iterative improvement algorithm, when a vertex is moved it tends to "drag" with it its adjacent vertices. His algorithm first performs a sequence of consecutive moves from C 1 to C 2 and then clusters the first k vertices moved.
Reference: [San89] <author> L. A. Sanchis. </author> <title> "Multiple-Way Network Partitioning." </title> <journal> IEEE Transactions on Computers, </journal> <volume> 38(1) </volume> <pages> 62-81, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: David Johnson (dsj@research.att.com) of AT&T Bell Laboratories also maintains a set of test cases that he has used for simulated annealing studies [JAM89]. Finally, early works in partitioning used various classes of random inputs [BHJ89] [GPS90] <ref> [San89] </ref> [WC89], but this is less common with the increased availability of "real circuits". 1.7 Thesis Overview The remainder of this thesis is divided into five main chapters: * Chapter 2 explores the problem of dividing a vertex ordering into a multi-way partitioning. <p> a hyperedge e incident to v and S will exert the same attraction on v regardless of how many pins of e are in S.) Breaking ties by measuring looking ahead to how close the net is to being uncut is similar in spirit to lookahead iterative improvement schemes [Kri84] <ref> [San89] </ref>. In general, naive updates of Attract (v) in Step 3 of the ordering framework may result in an O (n 2 ) construction. However, many attraction functions Attract (v) increase (decrease) monotonically throughout the ordering process. <p> First, they are 160 generally intuitive the obvious way to improve a given solution is to repeat-edly make it better via small changes. Second, iterative algorithms are simple to describe and implement; for this reason, the bipartitioning method of Fiduccia-Mattheyses [FM82] and the multi-way partitioning method of Sanchis <ref> [San89] </ref> are standards against which nearly all other heuristics are measured. Third, iterative algorithms are generally very fast, so that they can be run multiple times or combined with other schemes (e.g., [FHK96]). <p> Hence, the r th -level gain counts the additional number of hyperedges that may possibly become uncut after r moves, as opposed to after r 1 moves. Note that the 1 st -level gain is identical to the gain in the FM algorithm. Sanchis <ref> [San89] </ref> extended the FM algorithm, together with the lookahead scheme of [Kri84], to multi-way partitioning. The approach is generally straightforward, although there are several knotty implementation issues. <p> However, a First-In-First-Out (FIFO) organization which supports the same update efficiency could have been implemented just as easily. One might even use a random organization, possibly at the cost of increased runtimes may increase or a more complex bucket structure. The authors of [HHK95a] observe that Sanchis <ref> [San89] </ref>, and most likely Krishnamurthy [Kri84], used random bucket selection schemes. <p> The database also contains implementations for the P roject and Induce functions. We have also extended our multilevel code to quadrisection, i.e., 4-way partitioning. Our 4-way partitioner uses the algorithm of Sanchis <ref> [San89] </ref> but without lookahead. We have implemented both the standard multi-way partitioning objective and the total hyperedge cut objective jE (P 4 )j. Our experiments indicate that the former objective yields better results.
Reference: [San93] <author> L. A. Sanchis. </author> <title> "Multiple-Way Network Partitioning with Different Cost Functions." </title> <journal> IEEE Transactions on Computers, </journal> <volume> 42(22) </volume> <pages> 1500-1504, </pages> <year> 1993. </year>
Reference-contexts: In <ref> [San93] </ref>, Sanchis shows how to modify this computation to handle the objective function which assigns cost j 1 to a hyperedge that spans j clusters (this is very similar to f (P k ) = P k For this objective, the r th -level gain is fl r (v) = j
Reference: [SBH93] <author> G. Saucier, D. Brasen, and J. P. Hiol. </author> <title> "Partitioning with Cone Structures." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 236-239, </pages> <year> 1993. </year>
Reference-contexts: Cone-based techniques are well-suited to timing-driven partitioning and layout problems since they are based on efficient directional graph traversals and can capture critical path information. Also, from a methodological viewpoint, it is advantageous for the physical clustering to reflect the logic structure as closely as possible. Saucier et al. <ref> [SBH93] </ref> define a cone as follows: for each primary output v, the cone of v, denoted by fl (v), is the set of all w 2 V such that there is a path from w to v in H.
Reference: [SC88] <author> C. Sechen and D. Chen. </author> <title> "An Improved Objective Function for Mincut Circuit Partitioning." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 502-505, </pages> <year> 1988. </year>
Reference-contexts: Instead, their method simply starts with loosened size constraints which are gradually tightened as iterations progress. Numerous variants of FM have been proposed to handle partitioning objectives other than min-cut. Wei and Cheng [WC89] have proposed an FM variant to address the Ratio Cut objective, and Sechen and Chen <ref> [SC88] </ref> address a hierarchical placement-based objective function. Kring and Newton [KN91] modify FM to allow vertex replication, where a vertex may belong to more than one cluster. Many works have used modified versions of FM to address FPGA partitioning related objectives (with and without replication) [WK93] [KBK93] [KBZ94] [KB95].
Reference: [Sco80] <author> D. S. Scott. </author> <title> "LASO2 Documentation." </title> <type> Technical report, </type> <institution> Univerity of Texas, </institution> <year> 1980. </year>
Reference-contexts: The eigenvector computations were performed using LASO2 code <ref> [Sco80] </ref>, with a driver provided by the authors of [CSZ94]. Before the eigenvectors were computed, each hypergraph was transformed into a graph using the clique model with 150 weight function 4 jej (jej1) 2 jej 2 2 jej to each edge in the clique (see Section 5.1.1).
Reference: [SDJ91] <author> G. Sigl, K. Doll, and F. M. Johannes. </author> <title> "Analytical Placement: A Linear or a Quadratic Objective Function?" In Proceedings of the ACM/IEEE Design Automation Conference, </title> <journal> pp. </journal> <pages> 427-432, </pages> <year> 1991. </year>
Reference-contexts: GORDIAN uses the "proud" benchmark format which contains the physical locations for all 195 the I/O pads. The pads are preplaced, and the rest of the cells are then placed to minimize [RE95] either squared wirelength [KSJ91] or a linear wirelength objective <ref> [SDJ91] </ref> (GORDIAN-L). This optimization first induces a vertex ordering in the horizontal direction which is then split into a bipartitioning; then, another optimization induces a vertical vertex ordering which is split to yield a 4-way partitioning.
Reference: [She93] <author> N. A. Sherwani. </author> <title> Algorithms for VLSI Physical Design Automation. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1993. </year>
Reference-contexts: Overviews and surveys of VLSI partitioning have appeared in the works [AK95] [Joh96] [Len90] [PL88] <ref> [She93] </ref> [SY95]. Effective circuit partitioning heuristics are becoming more crucial with the increasing complexity of VLSI designs. Systems with several million transistors are now common with up to 30 million transistors on a single device projected for the year 1998 [HSF96].
Reference: [Shi93] <author> M. Shih, </author> <year> 1993. </year> <type> Personal communication. </type>
Reference-contexts: For linear placement into fixed slots, Tsay and Kuh [TK91] propose edge weight 2 jej for the squared edgelength objective and ( 2 jej ) 3 for Manhattan edgelength For some algorithms and problem instances, the clique model may actually be a better representation than the original hypergraph, e.g., Shih <ref> [Shi93] </ref> reports that FM bipartitioning [FM82] yields better solutions for the graph representation than the original hypergraph.
Reference: [Sim91] <author> H. D. Simon. </author> <title> "Partitioning of Unstructured Problems for Parallel Processing." </title> <booktitle> Computing Systems in Engineering, </booktitle> <address> 2(2-3):135-148, </address> <year> 1991. </year>
Reference-contexts: There are many approaches that are commonly applied to this type of problem. Spectral methods use one or more eigenvectors of a matrix representation of the graph in order to help construct a solution [HL95a] [HL93] <ref> [Sim91] </ref> [RW95]. <p> Thus, ~ 2 is commonly referred to as the Fiedler vector and 2 as the Fiedler value. Spectral bipartitioning and such variants as finding vertex separators have been explored by several researchers, notably in the scientific computing community, e.g., [Bar82] [PSL90] <ref> [Sim91] </ref> [HL95a] [GM95] [LPS93] [ST96]. We make the following observation: Theorem 5.3 Spectral bisection may have an arbitrarily high performance ratio.
Reference: [SK72] <author> D. G. Schweikert and B. W. Kernighan. </author> <title> "A Proper Model for the Partitioning of Electrical Circuits." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 57-62, </pages> <year> 1972. </year>
Reference-contexts: Dutt [Dut93] reduced the complexity of a KL pass to O (maxfjEj log n; jEj deg max g) where deg max is the maximum vertex degree. Although KL was originally applied only to undirected weighted graphs, Schweik-ert and Kernighan <ref> [SK72] </ref> extended KL to hypergraphs and a similar extension appears possible for the implementation of [Dut93]. 6.2.2 The Fiduccia-Mattheyses (FM) Algorithm Fiduccia and Mattheyses [FM82] presented a KL-inspired algorithm which reduces the complexity of a pass to time linear in the size of the hypergraph.
Reference: [SK88] <author> P. R. Suaris and G. Kedem. </author> <title> "An Algorithm for Quadrisection and Its Application to Standard Cell Placement." </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <volume> 35(3) </volume> <pages> 294-303, </pages> <year> 1988. </year>
Reference-contexts: Many works have used modified versions of FM to address FPGA partitioning related objectives (with and without replication) [WK93] [KBK93] [KBZ94] [KB95]. Other works have used FM and Sanchis based algorithms to address partitioning onto a fixed topology <ref> [SK88] </ref> [Vij91] [Tra94]. 6.3.3 Using an Iterative Improvement Engine As problem sizes grow larger, the performance of standard iterative improvement algorithms tend to degrade. Hagen and Kahng [HK96] [Hag94] report a roughly normal distribution of solution costs for independent FM executions starting from random initial solutions.
Reference: [SK93] <author> H. Shin and C. Kim. </author> <title> "A Simple Yet Effective Technique for Partitioning." </title> <journal> IEEE Transactions on VLSI Systems, </journal> <volume> 1(3), </volume> <month> September </month> <year> 1993. </year> <month> 218 </month>
Reference-contexts: Thus, the authors of [SU72] merge clusters C h and C l to maximize: f (A (C h )) jE (C h )j N hl N hl (4:1) where f is a function of the cluster sizes. More recently, Shin and Kim <ref> [SK93] </ref> proposed a slightly different approach: given P k+1 , they merge clusters C h and C l which maximize N hl minfjE (C h )j; jE (C l )jg ff A (V ) The first term captures the connectivity between clusters, with the denominator favoring the selection of clusters with <p> The term C Bal (P k ) is increases as clusters become more unbalanced. The authors of [PP93] use a Sanchis-like algorithm (without lookahead vectors) to address this objective; their implementation maintains two gain bucket structures, one for cut values and one for C Bal values. Shin and Kim <ref> [SK93] </ref> proposed a similar scheme, except that size constraints are not incorporated into the objective function. Instead, their method simply starts with loosened size constraints which are gradually tightened as iterations progress. Numerous variants of FM have been proposed to handle partitioning objectives other than min-cut. <p> Examples of clustering algorithms designed for two-phase approaches are abundant in both the scientific computing and VLSI design literatures, e.g., [AK93] [AK94b] [BJ93] [BHJ89] [HK92b] [NOP87] <ref> [SK93] </ref> [VKF95] [AV96]. The "two-phase" approach can be extended to a multilevel approach by allowing as many phases as are desired. Figure 6.2 illustrates the multilevel partitioning paradigm with five phases or levels (as in [KK95a]).
Reference: [Spa85] <author> H. Spath. </author> <title> Dlucster Dissection and Analysis. </title> <publisher> Ellis Horwood Limited, </publisher> <year> 1985. </year>
Reference-contexts: Another clustering application arises in analyzing ("data mining") large data samples obtained from marketing surveys, product scanner devices in supermarkets, or direct mail marketing. In his survey text, Spath <ref> [Spa85] </ref> describes many interesting specific applica tions: 46 * A textile firm wishes to determine new sizes for men's suits; however, mak-ing a custom suit for each customer is prohibitively expensive. Making a one-size-fits-all suit is ideal, but obviously impossible. <p> The similarity values can be summed to yield an aggregate similarity matrix, after which clustering can identify groups of similar politicians. This could be used in for forming effective tickets of slates in an election campaign. * Other applications given by <ref> [Spa85] </ref> include forecasting beef consumption, characterizing sales performance of gas stations, finding ideal locations for sales stands in a department store, and identifying consumers who are par ticularly susceptible to certain types of advertising.
Reference: [SS93] <author> W. Sun and C. Sechen. </author> <title> "Efficient and Effective Placements for Very Large Circuits." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 170-177, </pages> <year> 1993. </year>
Reference-contexts: Since DS requires O (n 3 ) time to compute, it is more useful for comparison rather than optimization of clustering solutions. The Absorption objective <ref> [SS93] </ref> measures the sum of the fractions of nets "absorbed" by the clusters: Absorption: Maximize f (P k ) = h=1 e2E j e"C h 6=; jej 1 For example, a hyperedge e incident to cluster C h adds Absorption zero if e has only one vertex in C h , <p> Wei and Cheng [WC91b] also use the Ratio Cut criterion in clustering, iteratively applying their bipartitioning heuristic to the largest remaining cluster as long as the largest cluster contains more than 2% of the total number of vertices. Absorption: Sun and Sechen <ref> [SS93] </ref> state that clustering to maximize the Absorption objective is best suited for use in the TimberWolf simulated annealing placement program. Their method incorporates cluster size bounds 3Y A (C h ) 30Y , 1 h k; here 10Y is the designated mean cluster size ([SS93] do not explain how Y <p> 30Y , 1 h k; here 10Y is the designated mean cluster size (<ref> [SS93] </ref> do not explain how Y is determined). The neighborhood structure of TimberWolf is based on swapping clusters, hence cluster size constraints are crucial: too much variance in cluster sizes may make the placement solution infeasible. Thus, [SS93] uses a simulated annealing clustering algorithm that repeatedly moves single vertices from one cluster to another. The authors of [SS93] claim that 100n moves are sufficient to optimize Absorption. 87 4.1.4 Cone-Based Methods Finally, the class of cone-based clustering techniques specifically exploits signal direction and transitive fan-in/fan-out information, e.g., in <p> The neighborhood structure of TimberWolf is based on swapping clusters, hence cluster size constraints are crucial: too much variance in cluster sizes may make the placement solution infeasible. Thus, <ref> [SS93] </ref> uses a simulated annealing clustering algorithm that repeatedly moves single vertices from one cluster to another. The authors of [SS93] claim that 100n moves are sufficient to optimize Absorption. 87 4.1.4 Cone-Based Methods Finally, the class of cone-based clustering techniques specifically exploits signal direction and transitive fan-in/fan-out information, e.g., in combinational circuits. A combinational circuit can generally be represented as a directed acyclic graph (DAG). <p> other ordering heuristics and split all orderings with DP-RP. 4.5.1 WINDOW Versus Previous Clustering Methods We begin by comparing clusterings derived by our WINDOW + DP-RP methodology to the matching-based compaction algorithm (MBC) algorithm of [BHJ89], the random walk (RW-ST) algorithm of [HK92b], and the simulated annealing (ANNEAL) algorithm of <ref> [SS93] </ref>. Table 4.1 compares the four clustering algorithms in terms of the Scaled Cost, Absorption and DS objectives. Comparisons of WINDOW with the AGG spectral-based clustering algorithm can be found in [AK96a]. <p> The clusterings for MBC and RW-ST were obtained from [HK92b] and we implemented ANNEAL using the same temperature schedule as <ref> [SS93] </ref>. Of the 3 Since DS is monotone, DP-RP can be applied to this objective; however, we did not devise an attraction function for DS, and simply used Scaled Cost attraction for WINDOW order-ings.
Reference: [ST95] <author> P. Sawkar and D. Thomas. </author> <title> "Multi-way Partitioning for Minimum Delay for Look-Up Table Based FPGAs." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 201-205, </pages> <year> 1995. </year>
Reference-contexts: Brasen and Saucier [BS94b] [BS94c] later modified this algorithm to account for critical path delays. Sawkar and Thomas <ref> [ST95] </ref> use these same cones as the basis of a set covering heuristic (cf. [CLC94]). Another cone-based construction was proposed by Cong and Ding [CD93], using a slightly different definition for cones.
Reference: [ST96] <author> D. A. Spielman and S.-H. Teng. </author> <title> "Spectral Partitioning Works: Planar Graphs and Finite Element Meshes." </title> <type> Manuscript, </type> <year> 1996. </year>
Reference-contexts: Thus, ~ 2 is commonly referred to as the Fiedler vector and 2 as the Fiedler value. Spectral bipartitioning and such variants as finding vertex separators have been explored by several researchers, notably in the scientific computing community, e.g., [Bar82] [PSL90] [Sim91] [HL95a] [GM95] [LPS93] <ref> [ST96] </ref>. We make the following observation: Theorem 5.3 Spectral bisection may have an arbitrarily high performance ratio. <p> Guattery and Miller [GM95] present various families of graphs (e.g., bounded-degree planar graphs, 2-dimensional meshes, and well-shaped multi-dimensional meshes) for which spectral bipartitioning will have unbounded performance ratio. Despite this result, Spielman and Teng <ref> [ST96] </ref> maintain that spectral methods based on splitting the Fiedler vector are still effective. They note that "naive" These inconsistencies between the indicator vector and the eigenvector solution can be remedied by using coordinates 1 p n and 1 p n instead of 0 and 1 for the indicator vector.
Reference: [SU72] <author> D. M. Schuler and E. G. Ulrich. </author> <title> "Clustering and Linear Placement." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 50-56, </pages> <year> 1972. </year>
Reference-contexts: An alternative greedy approach simply merges the two clusters with highest connectivity, i.e., choose C h and C l to maximize the number of common hyperedges N hl = jE (C h ) " E (C l )j. Schuler and Ulrich <ref> [SU72] </ref> observe that such a criterion ignores the number of hyperedges incident to the merged cluster. Such a criterion will generally also fail to construct balanced clusterings. Thus, the authors of [SU72] merge clusters C h and C l to maximize: f (A (C h )) jE (C h )j N <p> Schuler and Ulrich <ref> [SU72] </ref> observe that such a criterion ignores the number of hyperedges incident to the merged cluster. Such a criterion will generally also fail to construct balanced clusterings. Thus, the authors of [SU72] merge clusters C h and C l to maximize: f (A (C h )) jE (C h )j N hl N hl (4:1) where f is a function of the cluster sizes. <p> Initially, each vertex is assigned to its own cluster; the clusters are then visited in a random order with each cluster being matched to the neighboring unmatched cluster to which it has highest connectivity (the connectivity criterion of <ref> [SU72] </ref> is used, 84 i.e., maximize Equation (4.1) with f (C h ) = 1 A (C h ) ). If the current cluster in the ordering has already been matched to another cluster, it is ignored. <p> More recently, Hauck and Borriello performed a detailed study of multilevel FPGA partitioning. They studied many variations of the basic paradigm, including (i) partitioning before and after technology mapping; (ii) clustering via shortest-paths [YCL92], pairwise connectivity <ref> [SU72] </ref>, random matching, etc. (iii) partitioning via searches, spectral and iterative techniques; and (iv) uncoarsen-ing in one or multiple steps.
Reference: [SY95] <author> S. M. Sait and H. Youssef. </author> <title> VLSI Physical Design Automation Theory and Practice. </title> <publisher> IEEE Press, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: Overviews and surveys of VLSI partitioning have appeared in the works [AK95] [Joh96] [Len90] [PL88] [She93] <ref> [SY95] </ref>. Effective circuit partitioning heuristics are becoming more crucial with the increasing complexity of VLSI designs. Systems with several million transistors are now common with up to 30 million transistors on a single device projected for the year 1998 [HSF96].
Reference: [TK91] <author> R.-S. Tsay and E. S. Kuh. </author> <title> "A Unified Approach to Partitioning and Placement." </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <volume> 38(5) </volume> <pages> 521-533, </pages> <year> 1991. </year>
Reference-contexts: The VLSI partitioning field would greatly benefit from a standard set of 20 test cases exclusively designed for partitioning. As a first step, TU Mu--nich has made many benchmarks available in PROUD format <ref> [TK91] </ref> (URL: http://www.regent.e-technik.tu-muenchen.de/) and our group has made all of the Table 1.1 benchmarks in Table 1.1 available in a standard hypergraph format (URL: http://ballade.cs.ucla.edu/~cheese). <p> This process is repeated ten times (e.g., the next iteration uses centers of gravity 0.85 and 0.15), and hence a total of ten distinct vertex orderings are created. PARABOLI splits each of these orderings into all possible bipartitionings and returns the best solution. * Tsay and Kuh <ref> [TK91] </ref> have also given an ordering construction in the context of 1-dimensional placement (but it easily extends to two dimensions). Their method assumes that certain vertices (e.g., I/O pads) have already been assigned to fixed locations on the line, while the remaining vertices are free to move. <p> that the hyperedge will be routed as a spanning tree with jej 1 edges; hence, if the weights of these edges are to be evenly distributed among the clique edges, the clique edge weight function should be 2 jej . * For linear placement into fixed slots, Tsay and Kuh <ref> [TK91] </ref> propose edge weight 2 jej for the squared edgelength objective and ( 2 jej ) 3 for Manhattan edgelength For some algorithms and problem instances, the clique model may actually be a better representation than the original hypergraph, e.g., Shih [Shi93] reports that FM bipartitioning [FM82] yields better solutions for
Reference: [TKH88] <author> R.-S. Tsay, E. S. Kuh, and C.-P. Hsu. "PROUD: </author> <title> A Sea-of-Gates Placement Algorithm." </title> <journal> IEEE Design & Test of Computers, </journal> <volume> 5(6) </volume> <pages> 44-56, </pages> <year> 1988. </year>
Reference-contexts: For the squared wirelength objective, the optimal locations of the free vertices can be determined by solving a system of linear equations. In the top-down 2-dimensional placement algorithm called PROUD, Tsay, Kuh and Hsu <ref> [TKH88] </ref> use the generalized Gauss-Seidel method called successive over-relaxation (SOR) to solve this system, then use the resulting ordering to derive an initial bipartitioning solution before further optimization is performed. 27 * Finally, another approach is based on ordering the hyperedges instead of the vertices.
Reference: [Tra94] <author> S. Tragoudas. </author> <title> "An Improved Algorithm for the Generalized Min-Cut Partitioning Problem." </title> <booktitle> In Proc. Great Lakes Symp. VLSI, </booktitle> <pages> pp. 242-247, </pages> <year> 1994. </year>
Reference-contexts: Many works have used modified versions of FM to address FPGA partitioning related objectives (with and without replication) [WK93] [KBK93] [KBZ94] [KB95]. Other works have used FM and Sanchis based algorithms to address partitioning onto a fixed topology [SK88] [Vij91] <ref> [Tra94] </ref>. 6.3.3 Using an Iterative Improvement Engine As problem sizes grow larger, the performance of standard iterative improvement algorithms tend to degrade. Hagen and Kahng [HK96] [Hag94] report a roughly normal distribution of solution costs for independent FM executions starting from random initial solutions.
Reference: [TYA94] <author> M. Toyonaga, S.-T. Yang, T. Akino, and I. Shirakawa. </author> <title> "A New Approach of Fractal-Dimension Based Module Clustering for VLSI Layout." </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, </booktitle> <pages> pp. 185-188, </pages> <year> 1994. </year>
Reference-contexts: The threshold can be gradually raised until the desired number of clusters is obtained. Instead of merging pairs of vertices, entire hyperedges may be contracted. In authors of <ref> [TYA94] </ref> first sort the hyperedges in nondecreasing order by size, then the list is traversed and each hyperedge encountered is contracted into a cluster as long as none of its incident vertices already belong to a cluster.
Reference: [VH90] <author> A. Vannelli and S. W. Hadley. </author> <title> "A Gomory-Hu Cut Tree Representation of a Netlist Partitioning Problem." </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <volume> 37(9) </volume> <pages> 1133-1139, </pages> <year> 1990. </year> <month> 219 </month>
Reference-contexts: maximum cost of a cut hyperedge to be one, Donath [Don88] shows that the appropriate edge weight is 4 jej 2 (jej mod 2) since there are jej 2 (jej mod 2) 4 edges crossing between two clusters when half the vertices of e are in each cluster (also see <ref> [VH90] </ref>).
Reference: [Vij91] <author> G. Vijayan. </author> <title> "Generalization of Min-Cut Partitioning to Tree Struc--tures and Its Applications." </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40(3) </volume> <pages> 307-314, </pages> <year> 1991. </year>
Reference-contexts: Many works have used modified versions of FM to address FPGA partitioning related objectives (with and without replication) [WK93] [KBK93] [KBZ94] [KB95]. Other works have used FM and Sanchis based algorithms to address partitioning onto a fixed topology [SK88] <ref> [Vij91] </ref> [Tra94]. 6.3.3 Using an Iterative Improvement Engine As problem sizes grow larger, the performance of standard iterative improvement algorithms tend to degrade. Hagen and Kahng [HK96] [Hag94] report a roughly normal distribution of solution costs for independent FM executions starting from random initial solutions.
Reference: [VKF95] <author> D. Vanderstaeten, R. Keunings, and C. Farhat. </author> <title> "Optimization of Mesh Partitions and Impact on Parallel CFD." </title> <editor> In A. Ecer, J. Hauser, P. Leca, and J. Periaux, editors, </editor> <booktitle> Parallel Computational Fluid Dynamics: New Trends and Advances, </booktitle> <pages> pp. 233-239. </pages> <publisher> Elsevier, </publisher> <year> 1995. </year>
Reference-contexts: Examples of clustering algorithms designed for two-phase approaches are abundant in both the scientific computing and VLSI design literatures, e.g., [AK93] [AK94b] [BJ93] [BHJ89] [HK92b] [NOP87] [SK93] <ref> [VKF95] </ref> [AV96]. The "two-phase" approach can be extended to a multilevel approach by allowing as many phases as are desired. Figure 6.2 illustrates the multilevel partitioning paradigm with five phases or levels (as in [KK95a]).
Reference: [VR85] <author> A. Vannelli and G. S. Rowan. </author> <title> "A Constrained Clustering Approach for Partitioning Netlists." </title> <booktitle> In Proc. 28th Midwest Symposium on Circuits and Systems, </booktitle> <pages> pp. 211-215, </pages> <year> 1985. </year>
Reference-contexts: For real VLSI circuits, this graph is typically quite sparse due to vertex degree bounds [HK91]. In this representation, a partitioning solution corresponds to a partitioning of hyperedges; thus, this solution must be transformed back into a partitioning of the vertices [HK92c] [CHK92] [CLS94]. * Rowan and Vannelli <ref> [VR85] </ref> propose an alternative construction of the ad jacency matrix which uses edge weights a ij = jN (v i )nN (v j )j + jN (v j )nN (v i )j The term jN (v i )nN (v j )j is the number of hyperedges that are incident to v <p> Barnes' algorithm was applied to VLSI circuits by Hadley et al. [HMV92], who also refined the solution via an FM [FM82] post-processing step. Vannelli and Rowan <ref> [VR85] </ref> also proposed a variant of Barnes' algorithm. Rendl and Wolkowicz [RW95] note that Barnes' approach "only makes sense" if U k is very close to an optimal solution.
Reference: [WC89] <author> Y.-C. Wei and C.-K. Cheng. </author> <title> "Towards Efficient Hierarchical Designs by Ratio Cut Partitioning." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 298-301, </pages> <year> 1989. </year>
Reference-contexts: Ratio Cut partitioning was introduced in [LR88] and first applied to circuit partitioning by Wei and Cheng <ref> [WC89] </ref>. Ratio Cut: Minimize f (P 2 ) = A (C 1 ) A (C 2 ) The numerator favors a small cut while the denominator favors more balanced cluster sizes. <p> David Johnson (dsj@research.att.com) of AT&T Bell Laboratories also maintains a set of test cases that he has used for simulated annealing studies [JAM89]. Finally, early works in partitioning used various classes of random inputs [BHJ89] [GPS90] [San89] <ref> [WC89] </ref>, but this is less common with the increased availability of "real circuits". 1.7 Thesis Overview The remainder of this thesis is divided into five main chapters: * Chapter 2 explores the problem of dividing a vertex ordering into a multi-way partitioning. <p> Works that have adopted this approach include: * Wei and Cheng <ref> [WC89] </ref> [WC91a] have constructed vertex orderings using a greedy clustering algorithm. Their approach starts with initial solution 25 P 2 = fC 1 ; C 2 g where C 1 = fvg and C 2 = V fvg (v is a randomly chosen vertex). <p> Also, by discarding hyperedges with more than five vertices, the algorithm is likely to lose important clustering information. Ratio Cut: Chou et al. [CLC94] and Wei and Cheng [WC91b] have constructed clusterings based on the Ratio Cut objective. The algorithm of [CLC94] applies the Ratio Cut algorithm of <ref> [WC89] </ref> to construct a bipartitioning fC 1 ; C 2 g such that C 1 U for some small U , e.g., U = 50. Cluster C 1 is then removed from the hypergraph and the process is repeated until the remaining hypergraph has fewer than U vertices. <p> Instead, their method simply starts with loosened size constraints which are gradually tightened as iterations progress. Numerous variants of FM have been proposed to handle partitioning objectives other than min-cut. Wei and Cheng <ref> [WC89] </ref> have proposed an FM variant to address the Ratio Cut objective, and Sechen and Chen [SC88] address a hierarchical placement-based objective function. Kring and Newton [KN91] modify FM to allow vertex replication, where a vertex may belong to more than one cluster.
Reference: [WC91a] <author> Y.-C. Wei and C.-K. Cheng. </author> <title> "Ratio Cut Partitioning for Hierarchical Designs." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 10(7) </volume> <pages> 911-921, </pages> <year> 1991. </year>
Reference-contexts: Works that have adopted this approach include: * Wei and Cheng [WC89] <ref> [WC91a] </ref> have constructed vertex orderings using a greedy clustering algorithm. Their approach starts with initial solution 25 P 2 = fC 1 ; C 2 g where C 1 = fvg and C 2 = V fvg (v is a randomly chosen vertex). <p> Approaches include "voting" [HK92c] and bipartite matching [CHK92] [CLS96]. All of these approaches focus on bipartitioning. If a multi-way partitioning is desired, such approaches must be applied recursively, e.g., [PSL90] <ref> [WC91a] </ref>. The weakness of recursive hierarchical partitioning is that early greedy decisions for small k may result in poor solutions when continued to larger values of k. As an example, consider dividing the 8-vertex graph of Figure 2.1 (a) into four clusters of size two.
Reference: [WC91b] <author> Y.-C. A. Wei and C.-K. Cheng. </author> <title> "An Improved Two-Way Partitioning Algorithm with Stable Performance." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 10(12) </volume> <pages> 1502-1511, </pages> <year> 1991. </year>
Reference-contexts: While the approach is amenable to parallel processing, finding dense cliques by enumeration 86 can be computationally expensive. Also, by discarding hyperedges with more than five vertices, the algorithm is likely to lose important clustering information. Ratio Cut: Chou et al. [CLC94] and Wei and Cheng <ref> [WC91b] </ref> have constructed clusterings based on the Ratio Cut objective. The algorithm of [CLC94] applies the Ratio Cut algorithm of [WC89] to construct a bipartitioning fC 1 ; C 2 g such that C 1 U for some small U , e.g., U = 50. <p> Cluster C 1 is then removed from the hypergraph and the process is repeated until the remaining hypergraph has fewer than U vertices. The strategy of finding a good cluster and "peeling" it from the circuit has also been used by [HK95b] and [AV96]. Wei and Cheng <ref> [WC91b] </ref> also use the Ratio Cut criterion in clustering, iteratively applying their bipartitioning heuristic to the largest remaining cluster as long as the largest cluster contains more than 2% of the total number of vertices. <p> The "kick-move" consists of generating ~y from the existing solution ~x. A new solution 176 ~x 0 is then obtained by running FM post-processing on ~y. A variant of this al-gorithm called GFM t uses two-phase FM, generating a clustering by recursively applying the Ratio Cut heuristic of <ref> [WC91b] </ref>. 6.4 The Multilevel Partitioning Paradigm The main idea behind multilevel partitioning is the repeated reduction of instance size via clustering. (See Chapter 4 for an overview of the clustering literature.) The original problem instance is the hypergraph H (0)(V (0); E (0)); we use the notation H (0) instead of
Reference: [WK93] <author> N.-S. Woo and J. Kim. </author> <title> "An Efficient Method of Partitioning Circuits for Multiple-FPGA Implementation." </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <pages> pp. 202-207, </pages> <year> 1993. </year>
Reference-contexts: Kring and Newton [KN91] modify FM to allow vertex replication, where a vertex may belong to more than one cluster. Many works have used modified versions of FM to address FPGA partitioning related objectives (with and without replication) <ref> [WK93] </ref> [KBK93] [KBZ94] [KB95]. Other works have used FM and Sanchis based algorithms to address partitioning onto a fixed topology [SK88] [Vij91] [Tra94]. 6.3.3 Using an Iterative Improvement Engine As problem sizes grow larger, the performance of standard iterative improvement algorithms tend to degrade.
Reference: [WL93] <author> Z. Wu and R. Leahy. </author> <title> "Optimal Graph Theoretic Approach to Data Clustering: Theory and Its Application to Image Segmentation." </title> <journal> IEEE Trans. Pattern Analysis and Machine Intelligence, </journal> <volume> 15(11) </volume> <pages> 1101-1113, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Matthews and Hearne [MH91] do not bother to actually quantify the relationships between objects since they "believe that it is particularly important : : : to fit the data without distorting the data : : :". See, e.g., [CDB86] <ref> [WL93] </ref> [MF95] for various partitioning formulations and algorithms. The primary research domain of this thesis is the physical design of VLSI circuits.
Reference: [YCL92] <author> C.-W. Yeh, C.-K. Cheng, and T.-T. Y. Lin. </author> <title> "A Probabilistic Multi-Commodity Flow Solution to Circuit Clustering Problems." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 428-431, </pages> <year> 1992. </year> <note> Also see IEEE Trans. on CAD, </note> <month> 14:(2), </month> <pages> pp. 154-162, </pages> <year> 1995, </year> <note> for extended version. </note>
Reference-contexts: Note that the two objectives are equivalent for undirected graphs since all cut edges are incident to exactly two clusters. As with bipartitioning, it is possible to integrate cut and cluster size balance within a single objective. To this end, Chan et al. [CSZ94] and Yeh et al. <ref> [YCL92] </ref> respectively proposed the Scaled Cost and Cluster Ratio objectives. <p> More recently, Hauck and Borriello performed a detailed study of multilevel FPGA partitioning. They studied many variations of the basic paradigm, including (i) partitioning before and after technology mapping; (ii) clustering via shortest-paths <ref> [YCL92] </ref>, pairwise connectivity [SU72], random matching, etc. (iii) partitioning via searches, spectral and iterative techniques; and (iv) uncoarsen-ing in one or multiple steps.
Reference: [YCL94] <author> C.-W. Yeh, C.-K. Cheng, and T.-T. Y. Lin. </author> <title> "A General Purpose, Multiple-Way Partitioning Algorithm." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 13(12) </volume> <pages> 1480-1487, </pages> <year> 1994. </year> <month> 220 </month>
Reference-contexts: The algorithm permits a maximum of ten moves per vertex per pass. Dasdan and Aykanat [DA94] have proposed a multi-way variant of FM that allows a small constant number (e.g., three or four) of vertex moves per pass. Yeh et al. <ref> [YCL94] </ref> proposed an extension of Sanchis' multi-way partitioning algorithm that alternates "primal" passes of vertex moves with "dual" passes of hyperedge moves. A dual pass allows more than one vertex to be moved simultaneously, thereby expanding the single vertex move neighborhood structure.
Reference: [YCL95] <author> C.-W. Yeh, C.-K. Cheng, and T.-T. Y. Lin. </author> <title> "Optimization by Iter--ative Improvement: An Experimental Evaluation on Two-way Partitioning." </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> 14(2) </volume> <pages> 145-153, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: For example, the number of modules reported for the test02 06 benchmarks is higher in <ref> [YCL95] </ref> than in [HK92b], which is likely due to the interpretation of I/O pads.
Reference: [YW94] <author> H. Yang and D. F. Wong. </author> <title> "Efficient Network Flow Based Min-Cut Balanced Partitioning." </title> <booktitle> In Proceedings of the IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pp. 50-55, </pages> <year> 1994. </year>
Reference-contexts: When cluster size bounds are ignored, optimal min-cut solutions are often quite unbalanced and hence not useful within a hierarchical design methodology; however, they can still form the basis of useful heuristics <ref> [YW94] </ref> [YW95]. A more practical formulation seeks min-cut bipartitionings with bounds on the cluster weights. A special case of min-cut bipartitioning is called min-cut bisection, in which L = 2 * and U = 2 + *. <p> More relaxed size constraints may permit a much better solution while still maintaining relatively balanced clusters. Indeed, L = 9A (V ) 11A (V ) 20 are the most popular cluster size bounds in the recent literature [RDJ94] <ref> [YW94] </ref> [LLC95] [DD96c] [DD96b]. 14 Rather than minimizing cut subject to cluster size constraints, one can more smoothly integrate the cut and balance criteria within the partitioning objective. Ratio Cut partitioning was introduced in [LR88] and first applied to circuit partitioning by Wei and Cheng [WC89]. <p> They actually set the vertex area to be proportional to its degree (for FPGA applications) yet their resulting bipartitionings still fall within the required size constraints even for unit areas. They report results that outperform the flow-based algorithm of Yang and Wong <ref> [YW94] </ref> and spectral bipartitioning [HK92c]. * The PARABOLI (PB) algorithm of Riess et al. [RDJ94] was widely consid-ered to be the state-of-the-art partitioner in 1994 and has been the subject of numerous comparisons since [HB95] [YW94] [LKH95] [DD96c] [DD96b]. <p> They report results that outperform the flow-based algorithm of Yang and Wong <ref> [YW94] </ref> and spectral bipartitioning [HK92c]. * The PARABOLI (PB) algorithm of Riess et al. [RDJ94] was widely consid-ered to be the state-of-the-art partitioner in 1994 and has been the subject of numerous comparisons since [HB95] [YW94] [LKH95] [DD96c] [DD96b].
Reference: [YW95] <author> H. Yang and D. F. Wong. </author> <title> "Circuit Clustering for Delay Minimization under Area and Pin Constraints." </title> <booktitle> In Proc. European Design and Test Conf., </booktitle> <pages> pp. 65-70, </pages> <month> March </month> <year> 1995. </year> <month> 221 </month>
Reference-contexts: When cluster size bounds are ignored, optimal min-cut solutions are often quite unbalanced and hence not useful within a hierarchical design methodology; however, they can still form the basis of useful heuristics [YW94] <ref> [YW95] </ref>. A more practical formulation seeks min-cut bipartitionings with bounds on the cluster weights. A special case of min-cut bipartitioning is called min-cut bisection, in which L = 2 * and U = 2 + *.
References-found: 237

