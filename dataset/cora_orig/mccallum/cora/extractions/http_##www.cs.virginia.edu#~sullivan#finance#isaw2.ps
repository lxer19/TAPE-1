URL: http://www.cs.virginia.edu/~sullivan/finance/isaw2.ps
Refering-URL: http://www.cs.virginia.edu/~sullivan/finance/finance.html
Root-URL: http://www.cs.virginia.edu
Title: Abstract  
Abstract: Many software engineering principles and concepts that are critical to reasoning about problems in software design (of which software architecture is an important special case) remain ad hoc, idiosyncratic and poorly integrated. I argue that this is due to our lack of a clean theory about how to make software design decisions. In this paper I propose that we should view software design as a process of deciding how to make irreversible capital investment in software assets of uncertain value, and that financial options theory provides a firm, unifying, simplifying and well developed basis for such decision-making. To support this view, I interpret software architecture and other related concepts in options theoretic terms. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Batory, D., L. Coglianese, M. Goodwin and S. Shafer, </author> <title> Creating reference architectures: an example from avionics, </title> <booktitle> Proceedings of SSR95, Software Engineering Notes, </booktitle> <month> April 28-30, </month> <year> 1995, </year> <pages> pp. 27-37. </pages>
Reference-contexts: What I do in the next section is to present some evidence to justify exploring the idea further. The evidence is in the form of reinterpretation in options theoretic terms of software design principles in three areas. The areas are software architecture [5][13], generators <ref> [1] </ref>, and the spiral software process model [2]. 4.1 Architecture An architecture is not a revenue-producing assetan application. Rather, it embodies a portfolio of options to invest small additional amounts to create such assets. <p> Options theory provides a framework for thinking about restructuring, and perhaps can help us to evaluate and time decisions to scrap earlier design commitments. 4.2 Generators Next, like architectures, we can understand domainspecific program generators and the reference architectures they employ <ref> [1] </ref> as portfolios of options. They are not revenue-producing applications but tools that provide options to purchase members of a family of systems for the relatively small cost of easy-to-write specifications.
Reference: 2. <author> Boehm, B.W., </author> <title> A spiral model of software development and enhancement, </title> <journal> IEEE Computer (21,5), </journal> <month> May, </month> <year> 1988, </year> <pages> pp. 61-72. </pages>
Reference-contexts: The evidence is in the form of reinterpretation in options theoretic terms of software design principles in three areas. The areas are software architecture [5][13], generators [1], and the spiral software process model <ref> [2] </ref>. 4.1 Architecture An architecture is not a revenue-producing assetan application. Rather, it embodies a portfolio of options to invest small additional amounts to create such assets. To design an architecture is to make a capital investment to obtain such a portfolio of options.
Reference: 3. <author> DeMarco, </author> <booktitle> On systems architecture, The Atlantic Systems Guild, </booktitle> <month> September 12, </month> <year> 1995, </year> <pages> pp. 26-32. </pages>
Reference-contexts: The view of software artifacts as capital assets is obviously not new, nor of software development as capital investment. DeMarco has written, System architecture is expensive, but probably not as expensive as its absence <ref> [3] </ref>. On the other hand, viewing software as capital is not enough, and such views can leave us with just more rigid dictums: e.g., invest in architecture.
Reference: 4. <author> Dixit, </author> <title> A.K. and R.S. Pindyck, The options approach to capital investment, Harvard Business Review , May-June, </title> <booktitle> 1995, </booktitle> <pages> pp. 105-115. </pages>
Reference-contexts: We get real leverage when we take the second step of reasoning about such capital investment decisions in terms of financial call options <ref> [4] </ref>. We can then reason about software design in terms of call options, for which there is a well-developed theory and body of knowledge. <p> The essence of good capital investing under uncertainty and irreversibility is thus in creating and valuing options and in optimally timing decisions to exercise them (or not). Options theory provides a basis for such decision-making <ref> [4] </ref>. In this paper I make and present evidence for three claims. First, many software design decisions amount to decisions about capital investment under uncertainty and irreversibility. <p> Architectures, documents, program generators, and information hiding interfaces are examples of assets. Second, we can rationalize decisions about whether and when to make such investment by looking at investment opportunities as call options <ref> [4] </ref> and by appealing to options theory (e.g., [10], see also [9]). Lets start with the idea that investment opportunities are call options. The analogy is as follows. Managers decide how to exploit opportunities to invest capital in such things as plant or equipment. <p> To be relieved of the asset requires that you pay to scrap it. Scrapping itself is viewed as an additional capital investment the return on which is a (possibly uncertain) reduction in future costs <ref> [4] </ref>. The isomorphism between call options and capital investments invites the application of the theory of call options to capital investment decision-making. Mathematical options theory is beyond the scope of this paper. However, I do highlight eight options theory concepts that are particularly important and relevant here. 1. <p> Finally, we can interpret restructuring of software systems [6] as capital investments made to scrap assets obtained through prior investments (e.g., obsolete or suboptimal interfaces). The return on the investment in scrapping is a reduction in future costs (c.f., <ref> [4] </ref>). Options theory provides a framework for thinking about restructuring, and perhaps can help us to evaluate and time decisions to scrap earlier design commitments. 4.2 Generators Next, like architectures, we can understand domainspecific program generators and the reference architectures they employ [1] as portfolios of options.
Reference: 5. <author> Garlan, D. and M. Shaw, </author> <title> An introduction to software architecture, </title> <booktitle> Advances in Software Engineering and Knowledge Engineering, </booktitle> <volume> Vol. 1, </volume> <publisher> World Scientific Publishing, </publisher> <year> 1993. </year>
Reference-contexts: might help answer questions such as how much to invest in risk assessment and when. 5 Related Work One thing I have not done in this paper is to discuss software architecture in conventional systems theory terms [8]: of abstract models formulated as entities and relations, or components and connectors <ref> [5] </ref>; of isomorphisms, homomorphisms, differences or other sorts of correspondences between models or between models and reality; or in terms of taxonomies of abstract models. The systems theory perspective is undoubtedly valuable.
Reference: 6. <author> Griswold, W.G. and D. Notkin, </author> <title> Automated assistance for program restructuring, </title> <journal> ACM Transactions on Software Engineering and Methodology (2,3), </journal> <month> July, </month> <year> 1993, </year> <pages> pp. 228-269. </pages>
Reference-contexts: Badly conceived interfaces amount to unwanted capital with high carrying costs. I often delay defining interfaces because of uncertainty about how implementation elements relate. Perhaps we can now better explain why delaying investments in information hiding interfaces sometimes makes sense. Finally, we can interpret restructuring of software systems <ref> [6] </ref> as capital investments made to scrap assets obtained through prior investments (e.g., obsolete or suboptimal interfaces). The return on the investment in scrapping is a reduction in future costs (c.f., [4]).
Reference: 7. <author> Habermann, A.N., L. Flon and L. Cooprider, </author> <title> Modular-ization and hierarchy in a family of operating systems, </title> <journal> Communications of the ACM (19,5), </journal> <month> May, </month> <year> 1976, </year> <pages> pp. 266-272. </pages>
Reference-contexts: Software designers have to balance creation, valuation and exercising of options. 2. Good software engineers understand the value of delaying design decisions. Procrastinating preserves flexibility and may avert investments in worthless assets. Delaying commitments is widely understood to be a key software engineering principle <ref> [7] </ref>. Options theory helps to explain why. Design decisions are like call options. To bind and implement a design decision is to exercise an optionto invest in a software asset. Exercising an option is an irreversible act; but delaying, like holding an option, is not.
Reference: 8. <author> Kramer, N.J.T and J. de Smit, </author> <title> Systems Thinking: Concepts and Notions, </title> <address> Leiden, </address> <year> 1977. </year>
Reference-contexts: Beyond such qualitative interpretations, options theory might help answer questions such as how much to invest in risk assessment and when. 5 Related Work One thing I have not done in this paper is to discuss software architecture in conventional systems theory terms <ref> [8] </ref>: of abstract models formulated as entities and relations, or components and connectors [5]; of isomorphisms, homomorphisms, differences or other sorts of correspondences between models or between models and reality; or in terms of taxonomies of abstract models. The systems theory perspective is undoubtedly valuable.
Reference: 9. <author> Kumar, R., </author> <title> An options view of investments in expansion-flexible manufacturing systems, </title> <journal> International Journal of Production Economics 38, </journal> <year> 1995, </year> <pages> pp. 281-291. </pages>
Reference-contexts: Architectures, documents, program generators, and information hiding interfaces are examples of assets. Second, we can rationalize decisions about whether and when to make such investment by looking at investment opportunities as call options [4] and by appealing to options theory (e.g., [10], see also <ref> [9] </ref>). Lets start with the idea that investment opportunities are call options. The analogy is as follows. Managers decide how to exploit opportunities to invest capital in such things as plant or equipment.
Reference: 10. <author> McDonald, R. and D. Siegel, </author> <title> The value of waiting to invest, </title> <journal> Quarterly Journal of Economics (CI, </journal> <volume> 4), </volume> <month> November, </month> <year> 1986, </year> <pages> pp. 707-727. </pages>
Reference-contexts: If asset values are uncertain, it can pay to delay; but delaying also forgoes the benefit of having the asset now. You have to weigh the value of investing now against the value of investing at all possible future times <ref> [10] </ref>. Timing irreversible investments in software assets of uncertain value is of the essence. 3. Software methodologies often posit rigid dictums. Write a spec ification before design. Write a users manual. Design for change. Get the architecture right first. Always use information hiding. <p> Architectures, documents, program generators, and information hiding interfaces are examples of assets. Second, we can rationalize decisions about whether and when to make such investment by looking at investment opportunities as call options [4] and by appealing to options theory (e.g., <ref> [10] </ref>, see also [9]). Lets start with the idea that investment opportunities are call options. The analogy is as follows. Managers decide how to exploit opportunities to invest capital in such things as plant or equipment.
Reference: 11. <author> Parnas, D., </author> <title> On the criteria to be used in decomposing systems into modules, </title> <journal> Communications of the ACM , December, </journal> <year> 1972, </year> <pages> pp. 1053-1058. </pages>
Reference: 12. <author> Parnas, D., </author> <title> Designing software for ease of extension and contraction, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> (SE-5,2), </volume> <month> March </month> <year> 1979, </year> <pages> pp. 128-138. </pages>
Reference: 13. <author> Shaw, M. and D. Garlan, </author> <title> Software Architecture, </title> <address> Pren-tice-Hall, </address> <year> 1996. </year>
References-found: 13

