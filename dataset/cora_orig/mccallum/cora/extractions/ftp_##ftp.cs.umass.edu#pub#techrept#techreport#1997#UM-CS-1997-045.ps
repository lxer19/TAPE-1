URL: ftp://ftp.cs.umass.edu/pub/techrept/techreport/1997/UM-CS-1997-045.ps
Refering-URL: http://laser.cs.umass.edu/abstracts/97-045.html
Root-URL: 
Email: ljog@cs.umass.edu  
Title: An Adaptable Generation Approach to Agenda Management  
Author: Eric K. McCall, Lori A. Clarke, Leon J. Osterweil fmccall, clarke, 
Keyword: Agenda management, process programming, cooperative work, tool integration  
Date: +1 413 545 2013  
Address: Amherst, MA 01003, USA  
Affiliation: University of Massachusetts  
Abstract: As software engineering efforts move to more complex, distributed environments, coordinating the activities of people and tools becomes very important. While groupware systems address user level communication needs and distributed computing technologies address tool level communication needs, few attempts have been made to synthesize the common needs of both. This paper describes our attempt to do exactly that. We describe a framework for generating an agenda management system (AMS) from a specification of the system's requirements. The framework can support a variety of AMS requirements and produces a customized AMS that is appropriate for use by both humans and software tools. The framework and generated system support evolution in several ways, allowing existing systems to be extended as requirements change. We also describe our experiences using this approach to create an AMS that supports a process programming environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Sergio Bandinelli, Elisabetta Di Nitto, and Alfonso Fuggetta. </author> <title> Supporting Cooperation in the SPADE-1 Environment. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(12):841865, </volume> <month> De-cember </month> <year> 1996. </year>
Reference-contexts: The issue of supporting cooperation in Marvel was explored in [2], how-ever this exploration concentrated on an appropriate concur-rency model for cooperative work, not the higher level issues addressed here. In <ref> [1] </ref> the authors explore using the SPADE-1 environment to support asynchronous cooperative work. Like Grapevine, SPADE-1 is based on the principle of separation of concerns between process model enactment and user interaction environment. The environment consists of a number of tools, among which is an Agenda tool.
Reference: [2] <author> Naser S. Barghouti. </author> <title> Supporting cooperation in the Marvel process-centered SDE. </title> <booktitle> In Proceedings of the Fifth ACM SIG-SOFT Symposium on Software development environments, </booktitle> <pages> pages 2131, </pages> <year> 1992. </year>
Reference-contexts: The prototype does not support concurrency control due to performance considerations. Instead we rely on clients to avoid interfering with one another. It is not clear what sort of concurrency control is appropriate in cooperative environ-ments; this is an area of current research <ref> [2, 15] </ref>. <p> It is possible that both kinds of constraint enforcement are needed; further research is needed. The Marvel software development environment [3] has addressed the issue of assigning tasks to users, though this is tightly integrated with the process environment. The issue of supporting cooperation in Marvel was explored in <ref> [2] </ref>, how-ever this exploration concentrated on an appropriate concur-rency model for cooperative work, not the higher level issues addressed here. In [1] the authors explore using the SPADE-1 environment to support asynchronous cooperative work.
Reference: [3] <author> Israel Z. Ben-Shaul, Gail E. Kaiser, and George T. Heineman. </author> <title> An architecture for multi-user software development environments. </title> <booktitle> In Proceedings of the Fifth ACM SIGSOFT Symposium on Software development environments, </booktitle> <pages> pages 149158, </pages> <year> 1992. </year>
Reference-contexts: In contrast, we might build this function into the system with our policy mechanism. It is possible that both kinds of constraint enforcement are needed; further research is needed. The Marvel software development environment <ref> [3] </ref> has addressed the issue of assigning tasks to users, though this is tightly integrated with the process environment. The issue of supporting cooperation in Marvel was explored in [2], how-ever this exploration concentrated on an appropriate concur-rency model for cooperative work, not the higher level issues addressed here.
Reference: [4] <author> Lotus Development Corporation. </author> <title> A Quick Tour Of Lotus Notes. Lotus Development Corporation, </title> <year> 1993. </year>
Reference-contexts: Agenda has given enormous flexibility to the end user, and in the process has lost the benefits of strong typing. In addition, Agenda is not designed to be used by tools and does not have facilities for controlling flow (as with our policies). Lotus Notes <ref> [4] </ref> can be loosely characterized as a general replicated database system that allows programmers to create a variety of collaborative applications.
Reference: [5] <author> Umeshwar Dayal, Meichun Hsu, and Rivka Ladin. </author> <title> Organizing Long-Running Activities with Triggers and Transactions. </title> <booktitle> In Proceedings of the 1990 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 204214, </pages> <year> 1990. </year>
Reference-contexts: The policy mechanism is the component of the extension mechanism that automates this task. A policy is specified with a named collection of constraint, action and method name triples (similar to the ECA model presented in <ref> [5] </ref>) that is to be applied to class methods. As illustrated below, the keyword policy names a policy and the keywords enforce and for bind to specific meth ods the constraints that make up the policy.
Reference: [6] <author> Christer Fernstrom. </author> <title> PROCESS WEAVER: Adding Process Support to UNIX. </title> <booktitle> In Proceedings of the Second International Conference on the Software Process, </booktitle> <pages> pages 1226. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: The importance of allowing agent adaptation has also been central to the development of systems such as Oval [16] and Agenda [12]. By virtue of the need to communicate with humans in a programmable way, several process execution environments have formalized the notion of agenda. Process Weaver <ref> [6] </ref> has an integrated agenda that is used to coordinate the activities of humans by posting and delegating work contexts. There is apparently no decoupling of agenda from view, so supporting groups of users may be problematic. It is also not clear that work contexts are decomposable into subtasks.
Reference: [7] <author> D. Georgakopoulos, M. Hornick, and A. Sheth. </author> <title> Distributed and Parallel Databases, chapter An Overview of Workflow Management: From Process Modeling to Workflow Automation Infrastructure, pages 119153. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: Considerable overlap between these areas exists <ref> [7] </ref>. In constrast to most related work, we have focused on a solution to the problem that is applicable to a variety of domains and is useful for both human and software tool agents.
Reference: [8] <author> William Harrison and Harold Ossher. </author> <title> Subject-Oriented Programming (A Critique of Pure Objects). </title> <booktitle> In Proceedings of the eighth annual conference on Object-oriented programming systems, languages, and applications (OOPSLA), </booktitle> <pages> pages 411428, </pages> <year> 1993. </year>
Reference-contexts: This mechanism allows policies to be applied to classes orthogonally to the class inheritance hierarchy. This need might also be met with multiple inheritance mechanisms, as in C++, or with subject oriented programming approaches described in the literature <ref> [8] </ref>. The following example will help make the way in which policies are specified clearer.
Reference: [9] <author> Dennis Heimbigner. </author> <title> The ProcessWall: A Process State Server Approach to Process Programming. </title> <booktitle> In Fifth SIGSOFT Symposium on Software Development Environments, </booktitle> <month> December </month> <year> 1992. </year>
Reference-contexts: Our aim has been to build a framework that could be used to construct, for instance, a Process Weaver-style AMS. The importance of decoupling process state representation from process modelling language was noted in <ref> [9] </ref>. Pro-cessWall is a process state server, intended to be used to facilitate process execution, as with an AMS. Process state is represented as a DAG of task nodes, and operations are provided to create tasks, add precedence edges, and add subtasks to the DAG.
Reference: [10] <author> David Hollingsworth. </author> <title> The workflow reference model. </title> <type> Technical Report TC00-1003, </type> <institution> Workflow Management Coalition, </institution> <month> Nov </month> <year> 1994. </year> <note> Draft 1.0. </note>
Reference-contexts: The Workflow Management Coalition's reference model <ref> [10] </ref> has many of the components of our framework and substrate, and has standardized APIs for humans and tools. But, as a reference model, it is not intended to be used to generate specific agenda management systems.
Reference: [11] <author> Stanley M. Sutton Jr. and Leon J. Osterweil. </author> <title> The Design of a Next-Generation Process Language. </title> <booktitle> To appear in the Proceedings of the Fifth annual conference on the Foundations of Software Engineering. </booktitle>
Reference-contexts: prototype is able to support significant dynamism and user adaptability, though we have not yet experimented with these capabilities. 4.2 Evaluation of a Generated AMS The Grapevine prototype was evaluated by using it to generate an AMS to support the execution of process programs written in a subset of JIL <ref> [11] </ref>. JIL programs are executed by human and software agents, and we coordinated these agents with a Grapevine-generated AMS. The utility of the created AMS was evaluated in the context of execution of a rudimentary process program for a phase of the Booch Object Oriented design process.
Reference: [12] <author> S. Jerrold Kaplan, Mitchell D. Kapor, Edward J. Belove, Richard A. Landsman, and Todd R. Drake. </author> <title> Agenda: a personal information manager. </title> <journal> Communications of the ACM, </journal> <volume> 33(7):105116, </volume> <month> Jul </month> <year> 1990. </year>
Reference-contexts: The importance of allowing agent adaptation has also been central to the development of systems such as Oval [16] and Agenda <ref> [12] </ref>. By virtue of the need to communicate with humans in a programmable way, several process execution environments have formalized the notion of agenda. Process Weaver [6] has an integrated agenda that is used to coordinate the activities of humans by posting and delegating work contexts. <p> The Agenda tool is invoked by each human user and allows humans to send and receive information, however, a separate tool, SPADEShell, is used to send requests to the process execution environment. Lotus Agenda <ref> [12] </ref> is a personal information manager characterized as a new type of database, an item/category database. Users add items to the database and assign them to categories either by hand or automatically through selection rules. These categories may be viewed in a variety of ways. <p> This is not currently allowed because of concerns about how an AMS can share object instances without sharing its type hierarchies. This issue has also been problematic in systems such as Lotus Agenda <ref> [12] </ref> and Oval [16]. We expect to explore ways in which to do this, as support for local mod-ifications to type hierarchies can also enable AMS to AMS communication, another desirable capability. We would also like to allow for the modification and extension of existing AMS classes.
Reference: [13] <author> Kum-Yew Lai, Thomas W. Malone, and Keh-Chiang Yu. </author> <title> Object Lens: A Spreadsheet for Cooperative Work. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 6(4):332353, </volume> <month> Oct </month> <year> 1988. </year>
Reference-contexts: The Workflow Management Coalition's reference model [10] has many of the components of our framework and substrate, and has standardized APIs for humans and tools. But, as a reference model, it is not intended to be used to generate specific agenda management systems. Oval <ref> [16, 13] </ref> is a tool for cooperative work that offers adaptation abilities that are well beyond those outlined in this paper. Oval is a radically tailorable system that allows users to create applications from semistructured objects, user customizable views, rule-based agents, and links.
Reference: [14] <author> Barbara Staudt Lerner. TESS: </author> <title> Automated Support for the Evolution of Persistent Types. </title> <booktitle> In Proceedings of the 12th Automated Software Engineering Conference, </booktitle> <year> 1997. </year>
Reference-contexts: We would also like to allow for the modification and extension of existing AMS classes. But this creates the problem of migrating existing instances of those classes, which is a research area itself <ref> [14] </ref>. The generation framework we have developed should be compatible with solutions to such problems, and we expect class evolution mechanisms to be incorporated into future generations of Grapevine. Finally, much future work needs to address the user interface issue.
Reference: [15] <author> Barbara Staudt Lerner, Arvind H. Nithrakashyap, and Lori Clarke. </author> <title> Cooperative concurrency control for software engineering. </title> <booktitle> In OOPSLA '97 Workshop on Collaboration in the Object Development Lifecycle, </booktitle> <year> 1997. </year>
Reference-contexts: The prototype does not support concurrency control due to performance considerations. Instead we rely on clients to avoid interfering with one another. It is not clear what sort of concurrency control is appropriate in cooperative environ-ments; this is an area of current research <ref> [2, 15] </ref>.
Reference: [16] <author> Thomas W. Malone, Kum-Yew Lai, and Christopher Fry. </author> <title> Experiments with Oval: A Radically Tailorable Tool for Cooperative Work. </title> <booktitle> In CSCW '92 Proceedings, </booktitle> <pages> pages 289297, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: The importance of allowing agent adaptation has also been central to the development of systems such as Oval <ref> [16] </ref> and Agenda [12]. By virtue of the need to communicate with humans in a programmable way, several process execution environments have formalized the notion of agenda. Process Weaver [6] has an integrated agenda that is used to coordinate the activities of humans by posting and delegating work contexts. <p> The Workflow Management Coalition's reference model [10] has many of the components of our framework and substrate, and has standardized APIs for humans and tools. But, as a reference model, it is not intended to be used to generate specific agenda management systems. Oval <ref> [16, 13] </ref> is a tool for cooperative work that offers adaptation abilities that are well beyond those outlined in this paper. Oval is a radically tailorable system that allows users to create applications from semistructured objects, user customizable views, rule-based agents, and links. <p> This is not currently allowed because of concerns about how an AMS can share object instances without sharing its type hierarchies. This issue has also been problematic in systems such as Lotus Agenda [12] and Oval <ref> [16] </ref>. We expect to explore ways in which to do this, as support for local mod-ifications to type hierarchies can also enable AMS to AMS communication, another desirable capability. We would also like to allow for the modification and extension of existing AMS classes.
Reference: [17] <author> M. Maybee and D. Heimbigner. </author> <title> Q: A Multi-lingual In-terprocess Communications System. </title> <type> Technical Report CU-ARCADIA-101-93, </type> <institution> University of Colorado, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: The prototype implementation of Grapevine's substrate is split into a client and server as described previously. On the server side, all root classes are written in Pleiades/Ada [19]. Clients communicate with the server via an interlin-gual RPC mechanism, called Q <ref> [17] </ref>. The substrate does not currently provide for callbacks when locally cached AMS data are changed. Thus, clients must poll for changes. Clients are currently implemented in Java. The Java inheritance mechanism is used to support Grapevine inheritence directly.
Reference: [18] <author> Steven P. Reiss. </author> <title> Simplifying Data Integration: </title> <booktitle> The Design of the Desert Software Development Environment. In Proceedings of ICSE-18, </booktitle> <year> 1996. </year>
Reference-contexts: While Notes might be used to provide a substrate on which an approach to agenda management may be based, no guidance to this end is provided: the concepts of agenda and agenda item are absent. Similarly, while approaches to tool integration such as Desert <ref> [18] </ref> and distributed object computing standards such as CORBA address several of the requirements of agenda management provided by the AMS substrate, these systems provide little guidance for implementing an agenda management system and are not explicitly designed to be used by humans.
Reference: [19] <author> Peri L. Tarr and Lori A. Clarke. PLEIADES: </author> <title> An object management system for software engineering environments. </title> <booktitle> In ACM SIGSOFT '93 Symp. on Foundations of Software Engineering, </booktitle> <pages> pages 5670, </pages> <month> Dec </month> <year> 1993. </year>
Reference-contexts: We used this prototype to help generate some simple AMSs and evaluate their utility. The prototype implementation of Grapevine's substrate is split into a client and server as described previously. On the server side, all root classes are written in Pleiades/Ada <ref> [19] </ref>. Clients communicate with the server via an interlin-gual RPC mechanism, called Q [17]. The substrate does not currently provide for callbacks when locally cached AMS data are changed. Thus, clients must poll for changes. Clients are currently implemented in Java.
References-found: 19

