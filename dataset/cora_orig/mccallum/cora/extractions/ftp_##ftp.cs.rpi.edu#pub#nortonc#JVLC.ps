URL: ftp://ftp.cs.rpi.edu/pub/nortonc/JVLC.ps
Refering-URL: http://www.cs.rpi.edu/~nortonc/research.html
Root-URL: http://www.cs.rpi.edu
Email: E-mail addresses: glinert@cs.rpi.edu, nortonc@cs.rpi.edu  
Title: Novis: A Visual Laboratory for Exploring the Design of Processor Arrays to the reader the
Author: Ephraim P. Glinert and Charles D. Norton 
Note: An overview of Novis's features is followed by an example walk-through that imparts  are also discussed.  
Address: Troy, NY 12180  
Affiliation: Computer Science Department Rensselaer Polytechnic Institute  
Abstract: Novis, an experimental visual environment which supports the interactive development and animated simulation of special purpose parallel architectures, is presented. In sharp contrast with other systems which concentrate on the representation of parallelism within programs, Novis lets users design networks at an abstract level by placing processing elements into a connected grid of arbitrary (user selected) shape. The environment's underlying philosophy of maximal information hiding makes it unnecessary for the user to be intimately familiar with the details of low-level issues such as process schedule maintenance and event dispatching. Layout violations and exceptions detected during execution simulation (e.g., deadlock) are automatically reported to the user. fl This paper is a revised and expanded version of material originally presented at VL'90 in Skokie, Ill. This research was supported, in part, by the National Science Foundation under contract CDA-8805910. The first author was also supported, in part, by the National Science Foundation under contract CDA-9015249. The second author was also supported, in part, by a General Electric Company Graduate Fellowship. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Y. Kung. </author> <title> VLSI Array Processors. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1988. </year>
Reference-contexts: Thus, synchronization is partially enforced by the location of the data itself, so that no global timing is required. Due to their inherent regular structure, wavefront array processors are naturally suited for VLSI implementation <ref> [1] </ref>. Concepts associated with wavefront array processors are perhaps best clarified by means of an example. Fig. 1 shows the dependency graph for matrix multiplication, as well as its transformation (mapping) onto a wavefront array processor. <p> When all propagating waves have terminated, the simulation ends, and the results (in the output queues) can be examined. We note that the concept of wavefronts as a mathematical definition of synchronous communication of parallel processes is well documented in the literature <ref> [1] </ref>. The internal system resources for maintaining the parallel simulation environment include the process scheduling and event dispatch system, the process server and the public clients which provide message passing (communication) services to the server. <p> A flexible set of routing primitives is provided. In the current implementation, however, this set is not user-extensible. Although for the most general designs this could be considered a limitation, for a wide range of array processing applications the required set of primitives is well known <ref> [1] </ref>. The primary operation that occurs during the simulation stage is the scheduling and dispatching of PE events. In this paper, a PE event refers to the execution of the C code fragment represented by the PE, subject to the satisfiability of its input specification.
Reference: [2] <author> P. R. Cappello and K. Steiglitz. </author> <title> Unifying VLSI Array Designs with Geometric Transformations. </title> <booktitle> In Proc. Int. Conf. on Parallel Computing , pages 448-457, </booktitle> <year> 1983. </year>
Reference-contexts: The associated index space determines the location and connectivity of processors in the lattice, where the data dependencies are represented by the edges and the processors determine the function computed. Typically, we can use methods from linear algebra to define these properties; however, geometric approaches have also been investigated <ref> [2] </ref>. Returning to Fig. 1, we see that the hyperplanes indicate which processors will compute in parallel. Multiple hyperplanes indicate pipelining in wavefronts that are activated by means of a scheduling vector which is normal to the hyperplanes.
Reference: [3] <author> E. A. Abbott. Flatland: </author> <title> A Romance of Many Dimensions. </title> <publisher> Dover, </publisher> <address> New York, NY, </address> <year> 1952. </year>
Reference-contexts: The Shakespearean scholar and amateur mathematician Edwin Abbott explored a hypothetical two-dimensional "Flatland" <ref> [3] </ref> whose inhabitants were unaware that their world was in fact embedded in a three-dimensional space which, if they could but perceive it, would afford startlingly novel views of their universe.
Reference: [4] <editor> E. P. Glinert, editor. </editor> <booktitle> Tutorial|Visual Programming Environments; Volume 1: Paradigms and Systems; Volume 2: Applications and Issues. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Washing-ton, DC, </address> <year> 1990. </year>
Reference-contexts: Those whose research falls within the area known as visual programming <ref> [4] </ref> believe that tex 3 tual programming languages constitute just such a flatland. They hold that computer graphics can be used to define or help define programs.
Reference: [5] <author> C. Ware. </author> <title> Visual Information Display. Unpublished panel position paper prepared for INTERACT'90, </title> <booktitle> the 3rd IFIP Conference on Human-Computer Interaction, </booktitle> <address> Cambridge (UK), </address> <month> August 27-31, </month> <year> 1990. </year>
Reference-contexts: Are such goals achievable? What role computer graphics should play in human-machine communication is far from settled. Colin Ware has tried to explain some of the skepticism <ref> [5] </ref>: "It is generally accepted that written language has evolved from the pictographic and iconic to the abstract and syntactic.
Reference: [6] <author> C. J. </author> <title> Shaw. </title> <journal> Assemble or Compile? Datamation, </journal> <volume> 10(6) </volume> <pages> 59-62, </pages> <month> September </month> <year> 1966. </year>
Reference-contexts: they will have only limited and specialized utility." While such arguments are hard to refute, it is interesting that the early developers of higher-level textual programming languages encountered similar resistance from devotees of assembler; as late as 1966, articles were being published with titles such as "Assemble or Compile? " <ref> [6] </ref>. Nevertheless, concerns such as those expressed by Ware are legitimate.
Reference: [7] <author> J. H. Larkin and H. A. Simon. </author> <title> Why a Diagram is (Sometimes) Worth Ten Thousand Words. </title> <journal> Cognitive Science, </journal> <volume> 11(1) </volume> <pages> 65-99, </pages> <year> 1987. </year>
Reference-contexts: It is well known <ref> [7] </ref> that, within a given context, a drawing will often be far superior to text for imparting a desired interpretation to viewers, as well as for helping them to later recall it.
Reference: [8] <author> P. Wegner. </author> <title> Introduction to the Special Issue on Programming Language Paradigms. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 253-258, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: In this paper, we focus on the second of these goals as it relates to the domain of concurrent algorithms. Designing, implementing and maintaining reliable programs which exploit novel parallel and distributed architectures remains challenging; currently available tools are only marginally useful. We would like to follow Wegner's advice <ref> [8] </ref> that: "Parallel programs should be written using a paradigm that is natural to the problem." Although Wegner probably didn't have visual programming in mind when he wrote these words, we believe that it is the key.
Reference: [9] <author> E. P. Glinert, M. M. Blattner and C. J. Frerking. </author> <title> Visual Tools and Languages: Directions for the '90s. </title> <booktitle> In Proc. 1991 Workshop on Visual Languages (VL'91), </booktitle> <address> Kobe (Japan), </address> <month> October 8-11, </month> <pages> pages 89-95. </pages>
Reference-contexts: Reasons why this should be so have been discussed at length in the literature; cf. <ref> [9] </ref>.
Reference: [10] <author> K. M. Kahn and V. A. Saraswat. </author> <title> Complete Visualizations of Concurrent Programs and their Executions. </title> <booktitle> In Proc. 1990 IEEE Workshop on Visual Languages (VL'90), Skokie, </booktitle> <pages> pages 7-15, </pages> <month> October 4-6, </month> <year> 1990. </year> <month> 17 </month>
Reference-contexts: Reasons why this should be so have been discussed at length in the literature; cf. [9]. As Kahn and Saraswat have recently put it <ref> [10] </ref>: "[Concurrent programs are] inherently about connections between computational agents, and as such seem especially well suited for visualization." 3 Novis System Overview Visual programming of concurrency, although still an open research area, has received some attention in the literature from a variety of perspectives [11, 12, 13, 14, 15].
Reference: [11] <author> O. Babaoglu, L. Alvisi, A. Amoroso, and R. Davoli. </author> <title> PARALEX: An Environment for Parallel Programming in Distributed Systems. </title> <type> Technical Report UB-LCS-91-01, </type> <institution> Dept. of Mathematics, University of Bologna (Italy), </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: Saraswat have recently put it [10]: "[Concurrent programs are] inherently about connections between computational agents, and as such seem especially well suited for visualization." 3 Novis System Overview Visual programming of concurrency, although still an open research area, has received some attention in the literature from a variety of perspectives <ref> [11, 12, 13, 14, 15] </ref>.
Reference: [12] <author> B. R. Engstrom and P. R. Cappello. </author> <title> The SDEF Programming System. </title> <journal> J. Parallel and Distributed Computing, </journal> <volume> 7(2) </volume> <pages> 201-231, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Saraswat have recently put it [10]: "[Concurrent programs are] inherently about connections between computational agents, and as such seem especially well suited for visualization." 3 Novis System Overview Visual programming of concurrency, although still an open research area, has received some attention in the literature from a variety of perspectives <ref> [11, 12, 13, 14, 15] </ref>.
Reference: [13] <author> L. Snyder. </author> <title> Parallel Programming and the POKER Programming Environment. </title> <booktitle> IEEE Computer , 17(7) </booktitle> <pages> 27-36, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: Saraswat have recently put it [10]: "[Concurrent programs are] inherently about connections between computational agents, and as such seem especially well suited for visualization." 3 Novis System Overview Visual programming of concurrency, although still an open research area, has received some attention in the literature from a variety of perspectives <ref> [11, 12, 13, 14, 15] </ref>.
Reference: [14] <author> P. D. Stotts. </author> <title> The PFG Environment: Parallel Programming with Petri Net Semantics. </title> <booktitle> In Proc. 21st Hawaii Int. Conf. on System Sciences (HICSS-21), Kailua Kona|Volume 2: </booktitle> <pages> Software Track , pages 630-638, </pages> <month> January 5-8, </month> <year> 1988. </year>
Reference-contexts: Saraswat have recently put it [10]: "[Concurrent programs are] inherently about connections between computational agents, and as such seem especially well suited for visualization." 3 Novis System Overview Visual programming of concurrency, although still an open research area, has received some attention in the literature from a variety of perspectives <ref> [11, 12, 13, 14, 15] </ref>.
Reference: [15] <author> S. Sobek, M. Azam and J. C. Browne. </author> <title> Architecture and Language Independent Parallel Programming: A Feasibility Demonstration. </title> <booktitle> In Proc. 1988 Int. Conf. on Parallel Processing, </booktitle> <address> University Park, PA|Volume 2: </address> <booktitle> Software, </booktitle> <pages> pages 80-83, </pages> <month> August 15-19, </month> <year> 1988. </year> <month> 18 </month>
Reference-contexts: Saraswat have recently put it [10]: "[Concurrent programs are] inherently about connections between computational agents, and as such seem especially well suited for visualization." 3 Novis System Overview Visual programming of concurrency, although still an open research area, has received some attention in the literature from a variety of perspectives <ref> [11, 12, 13, 14, 15] </ref>.
References-found: 15

