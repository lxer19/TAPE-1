URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/96-14.ps.Z
Refering-URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/README.html
Root-URL: 
Email: wu,shu@cs.buffalo.edu  
Title: DDE: A Modified Dimension Exchange Method for Load Balancing in k-ary n-cubes  
Author: Min-You Wu and Wei Shu 
Address: Buffalo, NY 14260  
Affiliation: Department of Computer Science State University of New York at Buffalo  
Abstract: The dimension exchange method (DEM) was initially proposed as a load-balancing algorithm for the hypercube structure. It has been generalized to k-ary n-cubes. However, the k-ary n-cube algorithm must take many iterations to converge to a balanced state. In this paper, we propose a direct method to modify DEM. The new algorithm, Direct Dimension Exchange (DDE) method, takes load average in every dimension to eliminate unnecessary load exchange. It balances the load directly without iteratively exchanging the load. It is able to balance the load more accurately and much faster. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Cybenko. </author> <title> Dynamic load balancing for distributed memory multiprocessors. </title> <journal> J. of Parallel Distrib. Comput., </journal> <volume> 7 </volume> <pages> 279-301, </pages> <year> 1989. </year>
Reference-contexts: 1. Introduction The dimension exchange method (DEM) was initially proposed as a fully load-balancing algorithm for the hypercube structure <ref> [5, 1] </ref>. It balances the load for independent tasks on distributed memory machines. The experiment carried by Willebeek-LeMair and Reeves conformed that DEM is superior to other scheduling methods [7]. DEM for the hypercube network is a simple algorithm.
Reference: [2] <author> M. Barnett et al. </author> <title> Broadcasting on meshes with wormhole routing. </title> <type> Technical Report TR-93-24, </type> <institution> Univ. Texas at Austin, </institution> <year> 1993. </year>
Reference-contexts: Therefore, the decision on use of the receive-before-send or send-before-receive algorithms is a trade-off between communication time and locality. Most massively parallel computers use wormhole routing with which the effect of path length on communication time can often be ignored. The recursive doubling algorithm <ref> [2] </ref> can take advantage of the pipeline effect of wormhole routing while avoiding channel contention. This algorithm organizes the nodes in a chain to a tree. An example of eight nodes is shown in communication steps. 7 i=0 i=3 i=5i=6 4.
Reference: [3] <author> S.H. Hosseini, B. Litow, M. Malkawi, J. McPherson, and K. Vairavan. </author> <title> Analysis of a graph coloring based distributed load balancing algorithm. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 10 </volume> <pages> 160-166, </pages> <year> 1990. </year>
Reference-contexts: Unfortunately, when DEM applies to other structures, such as the mesh or the k-ary n-cube, it takes many sweeps to converge to the balanced load. Hosseini et al. extended it for arbitrary structures using the technique of edge-coloring of graphs <ref> [3] </ref>. Xu and Lau proposed the generalized dimension exchange (GDE) method [9]. The GDE method was extended to the k-ary n-cube network [10]. Because a node exchanges workload with only one of its neighbor at a time, GDE is not able to reach the balanced state in one sweep. <p> (w j w i )c tasks from node j w i = d (1 ) fi w i + fi w j e if w i &gt; w j b (1 ) fi w i + fi w j c otherwise is bounded by n, the dimension of the hypercube <ref> [3] </ref>. The number of communication steps of the DEM algorithm is 3n [7]. The GDE algorithm operates on color graphs derived from edge-coloring of the given system graph. The "integer version" of the algorithm is shown in Figure 2.
Reference: [4] <author> E. L. Lawler. </author> <title> Combinatorial Optimization: Networks and Matroids. </title> <publisher> Holt, Rinehart and Winston, </publisher> <year> 1976. </year>
Reference-contexts: The load can be balanced, however, the communication may not be minimal. By utilizing the end-round edge, communication could be reduced. We describe an algorithm to minimize the total number of tasks transferred. The algorithm is derived from the minimum cost flow algorithm <ref> [4] </ref> and shown in Figure 8. <p> Proof: If n p + n z n n 0 and n n + n z n p 0, there is no flow augmenting cycle with negative cost. Therefore, the network flow is of minimum cost <ref> [4] </ref>.
Reference: [5] <author> S. Ranka, Y. Won, and S. Sahni. </author> <title> Programming a hypercube multicomputer. </title> <journal> IEEE Software, </journal> <pages> pages 69-77, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: 1. Introduction The dimension exchange method (DEM) was initially proposed as a fully load-balancing algorithm for the hypercube structure <ref> [5, 1] </ref>. It balances the load for independent tasks on distributed memory machines. The experiment carried by Willebeek-LeMair and Reeves conformed that DEM is superior to other scheduling methods [7]. DEM for the hypercube network is a simple algorithm.
Reference: [6] <author> W. Shu and M.Y. Wu. </author> <title> Runtime parallel scheduling for distributed memory computers. </title> <booktitle> In Int'l Conf. on Parallel Processing, pages II. </booktitle> <pages> 143-150, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: The number of communication steps in step 4 is at most k. Therefore, the total number of communication steps of this algorithm is no more than 3k. This algorithm can be further improved by selecting node k/2 as the root and applying the TWA algorithm in <ref> [6] </ref>. Thus, the total number of communication steps of this algorithm can be reduced to 2k. When T is evenly divided by k, this algorithm minimizes the total number of task transfers and the total number of communications. This algorithm also maximizes locality.
Reference: [7] <author> Marc Willebeek-LeMair and Anthony P. Reeves. </author> <title> Strategies for dynamic load balancing on highly parallel computers. </title> <journal> IEEE Trans. Parallel and Distributed System, </journal> <volume> 9(4) </volume> <pages> 979-993, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: 1. Introduction The dimension exchange method (DEM) was initially proposed as a fully load-balancing algorithm for the hypercube structure [5, 1]. It balances the load for independent tasks on distributed memory machines. The experiment carried by Willebeek-LeMair and Reeves conformed that DEM is superior to other scheduling methods <ref> [7] </ref>. DEM for the hypercube network is a simple algorithm. Load balancing is performed iteratively in each of the log N dimensions, in which only node pairs exchange their load information and attempt to average the number of tasks. After a sweep (log N iterations), the load is balanced. <p> The number of communication steps of the DEM algorithm is 3n <ref> [7] </ref>. The GDE algorithm operates on color graphs derived from edge-coloring of the given system graph. The "integer version" of the algorithm is shown in Figure 2. A node finishes a complete sweep after c consecutive exchange operations, where c is the number of colors. <p> The convergence rate decreases when the dimension order k increases. There is no communication conflict in this algorithm. Willebeek-LeMair and Reeves suggested another approach to extend DEM to an M fi M mesh topology by "folding" the mesh in each dimension dlogM e times <ref> [7] </ref>. This method could be applied 3 to k-ary n-cubes too. The load difference is bounded by ndlogke. However, in this approach, node pairs would no longer be directly linked to one another and communications would conflict. 3.
Reference: [8] <author> M.Y. Wu and W. Shu. </author> <title> High-performance incremental scheduling on massively parallel computers | a global approach. </title> <booktitle> In Supercomputing '95, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Compared to the GDE algorithm, which also extended DEM to the k-ary n-cube, DDE is faster, balances the load well, reduces communications, and keeps better locality. DDE can be further improved for a more balanced load and less communications by extending the Mesh Walking Algorithm <ref> [8] </ref>. However, DDE retains its simplicity of implementation and can deliver a satisfied performance at the same time.
Reference: [9] <author> C. Z. Xu and F. C. M. Lau. </author> <title> Analysis of the generalized dimension exchange method for dynamic load balancing. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 16(4) </volume> <pages> 385-393, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: Hosseini et al. extended it for arbitrary structures using the technique of edge-coloring of graphs [3]. Xu and Lau proposed the generalized dimension exchange (GDE) method <ref> [9] </ref>. The GDE method was extended to the k-ary n-cube network [10]. Because a node exchanges workload with only one of its neighbor at a time, GDE is not able to reach the balanced state in one sweep.
Reference: [10] <author> C. Z. Xu and F. C. M. Lau. </author> <title> The generalized dimension exchange method for load balancing in k-ary n-cubes and variants. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 24(1) </volume> <pages> 72-85, </pages> <month> January </month> <year> 1995. </year> <month> 17 </month>
Reference-contexts: Hosseini et al. extended it for arbitrary structures using the technique of edge-coloring of graphs [3]. Xu and Lau proposed the generalized dimension exchange (GDE) method [9]. The GDE method was extended to the k-ary n-cube network <ref> [10] </ref>. Because a node exchanges workload with only one of its neighbor at a time, GDE is not able to reach the balanced state in one sweep. <p> Each result is the average of 100 test cases. We tested an 8fi8 mesh, a 16fi16 torus, an 8fi8fi8 3D-mesh, and a 16fi16fi16 3D-torus. For these networks, the optimal value of for GDE is 0.723 <ref> [10] </ref>. First, we compare load imbalance of GDE and DDE. The load difference of DDE is bounded by n, whereas that of GDE is bounded by n (k 1) for the mesh and nk=2 for the torus. Figure 12 shows its average in different networks. <p> Here, the load difference of GDE is four to six times larger than that of DDE. 13 DDE completes load balancing in one sweep but GDE needs many sweeps. Figure 13 shows the number of sweeps s for different networks. The value of s is proportional to k <ref> [10] </ref>. Moreover, s increases with the average weight. Table I shows the relationship between the number of sweeps and the average number of tasks, measured on an 8fi8 mesh. Next, we compare the number of communication steps of GDE and DDE.
References-found: 10

