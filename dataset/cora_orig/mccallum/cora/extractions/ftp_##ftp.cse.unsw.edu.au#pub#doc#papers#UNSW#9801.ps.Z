URL: ftp://ftp.cse.unsw.edu.au/pub/doc/papers/UNSW/9801.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/research/tr.html
Root-URL: http://www.cse.unsw.edu.au
Email: falanau,gernotg@cse.unsw.edu.au  
Title: L4 User Manual Version 1.5  
Author: Alan Au, Gernot Heiser 
Date: June 1998  
Address: Sydney 2052, Australia  Sydney 2052, Australia  
Affiliation: Department of Computer Systems School of Computer Science and Engineering The University of New South Wales  Department of Computer Systems School of Computer Science and Engineering The University of New South Wales  
Pubnum: UNSW-CSE-TR-9801  
Abstract-found: 0
Intro-found: 1
Reference: [BH70] <author> Per Brinch Hansen. </author> <title> The nucleus of a multiprogramming operating system. </title> <journal> Communications of the ACM, </journal> <volume> 13:238250, </volume> <year> 1970. </year>
Reference-contexts: In this chapter we will summarise the main ideas behind L4. The basic idea of a -kernel goes back to Brinch Hansen's Nucleus <ref> [BH70] </ref> and Hydra [WCC + 74] and has been popularised by Mach [RTY + 88].
Reference: [CB93] <author> J. Bradley Chen and Brian N. Bershad. </author> <title> The impact of operating system structure on memory system performance. </title> <booktitle> In Proceedings of the 14th ACM Symposium on OS Principles, </booktitle> <pages> pages 120133, </pages> <address> Asheville, NC, USA, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: However, performance of these first-generation microkernels proved disappointing, with applications generally experiencing a significant slowdown compared to a traditional (monolithic) operating system <ref> [CB93] </ref>. Liedtke, however, has shown [Lie93, Lie95, Lie96] that these performance problems are not inherent in the microkernel concept and can be overcome by good design and implementation.
Reference: [EHL97] <author> Kevin Elphinstone, Gernot Heiser, and Jochen Liedtke. </author> <title> L4 Reference Manual MIPS R4x00. </title> <institution> School of Computer Science and Engineering, University of NSW, </institution> <address> Sydney 2052, Australia, </address> <month> December </month> <year> 1997. </year> <note> UNSW-CSE-TR-9709. Latest version available from http://www/cse/unsw.edu.au/ disy/. </note>
Reference: [HHL + 97] <author> Herrmann Hartig, Michael Hohmuth, Jochen Liedtke, Sebastian Sch onberg, and Jean Wolter. </author> <title> The performance of -kernel-based systems. </title> <booktitle> In Proceedings of the 16th ACM Symposium on OS Principles, </booktitle> <pages> pages 6677, </pages> <address> St. Malo, France, </address> <month> October </month> <year> 1997. </year> <note> ACM. </note>
Reference-contexts: Liedtke, however, has shown [Lie93, Lie95, Lie96] that these performance problems are not inherent in the microkernel concept and can be overcome by good design and implementation. L4 is the constructive proof of this theorem, as has been clearly demonstrated by Hartig et al. <ref> [HHL + 97] </ref>. 1.1 L4 design philosophy The most fundamental task of an operating system is to provide secure sharing of resources, in essence this is the only reason why there needs to be an operating system. A -kernel is to be as small as possible.
Reference: [Lie92] <editor> Jochen Liedtke. Clans & chiefs. </editor> <booktitle> In 12. GI/ITG-Fachtagung Architektur von Rechensys-temen, </booktitle> <pages> pages 294305, </pages> <address> Kiel, 1992. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Device control is registered via IPC (although actual device access is memory mapped). 1.2.4 Clans & chiefs Clans and chiefs are L4's basic mechanism enabling the implementation of arbitrary security policies <ref> [Lie92] </ref>. They allow controlling IPC and thus information flow. The basic idea is simple: A task's creator is that task's chief, all tasks (directly) created by a particular chief constitute that chief's clan. Threads can directly send IPC only to other threads in the same clan, or to their chief.
Reference: [Lie93] <author> Jochen Liedtke. </author> <title> Improving IPC by kernel design. </title> <booktitle> In Proceedings of the 14th ACM Symposium on OS Principles, </booktitle> <pages> pages 17588, </pages> <address> Asheville, NC, USA, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: However, performance of these first-generation microkernels proved disappointing, with applications generally experiencing a significant slowdown compared to a traditional (monolithic) operating system [CB93]. Liedtke, however, has shown <ref> [Lie93, Lie95, Lie96] </ref> that these performance problems are not inherent in the microkernel concept and can be overcome by good design and implementation.
Reference: [Lie95] <author> Jochen Liedtke. </author> <booktitle> On -kernel construction. In Proceedings of the 15th ACM Symposium on OS Principles, </booktitle> <pages> pages 237250, </pages> <address> Copper Mountain, CO, USA, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: However, performance of these first-generation microkernels proved disappointing, with applications generally experiencing a significant slowdown compared to a traditional (monolithic) operating system [CB93]. Liedtke, however, has shown <ref> [Lie93, Lie95, Lie96] </ref> that these performance problems are not inherent in the microkernel concept and can be overcome by good design and implementation.
Reference: [Lie96] <author> Jochen Liedtke. </author> <title> Towards real microkernels. </title> <journal> Communications of the ACM, </journal> <volume> 39(9):7077, </volume> <month> September </month> <year> 1996. </year>
Reference-contexts: However, performance of these first-generation microkernels proved disappointing, with applications generally experiencing a significant slowdown compared to a traditional (monolithic) operating system [CB93]. Liedtke, however, has shown <ref> [Lie93, Lie95, Lie96] </ref> that these performance problems are not inherent in the microkernel concept and can be overcome by good design and implementation.
Reference: [RTY + 88] <author> Richard Rashid, Avadis Tevanian, Jr., Michael Young, David Golub, Robert Baron, David Black, William J. Bolosky, and Jonathan Chew. </author> <title> Machine-independent virtual memory management for paged uniprocessor and multiprocessor architectures. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-37:896908, </volume> <year> 1988. </year>
Reference-contexts: In this chapter we will summarise the main ideas behind L4. The basic idea of a -kernel goes back to Brinch Hansen's Nucleus [BH70] and Hydra [WCC + 74] and has been popularised by Mach <ref> [RTY + 88] </ref>. The argument goes that by reducing the size of the kernel, the part of the operating system (OS) executing in privileged mode, it becomes possible to build a system which is more secure and reliable (because the trusted computing base is smaller) and easy to extend.
Reference: [WCC + 74] <author> W. Wulf, E. Cohen, W. Corwin, A. Jones, R. Levin, C. Pierson, and F. Pollack. HYDRA: </author> <title> The kernel of a multiprocessor operating system. </title> <journal> Communications of the ACM, </journal> <volume> 17:337 345, </volume> <year> 1974. </year>
Reference-contexts: In this chapter we will summarise the main ideas behind L4. The basic idea of a -kernel goes back to Brinch Hansen's Nucleus [BH70] and Hydra <ref> [WCC + 74] </ref> and has been popularised by Mach [RTY + 88].
References-found: 10

