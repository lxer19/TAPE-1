URL: http://www.first.gmd.de/promoter/papers/ICHPC95.ps.gz
Refering-URL: http://www.first.gmd.de/promoter/papers/index.html
Root-URL: 
Email: w.giloi@computer.org fmk,schrammg@first.gmd.de  
Title: PROMOTER: A High-Level, Object-Parallel Programming Language  
Author: W. K. Giloi, M. Kessler, A. Schramm 
Keyword: Distributed memory architecture, high-level programming model, parallelizing compiler, algebraic domain specification, distributed types, coordination schemes, mapping, aggregation.  
Note: This research is supported by the Real World Computing Partnership, Japan.  
Address: Berlin, Germany  
Affiliation: RWCP Massively Parallel Systems GMD Laboratory  
Abstract: The superior performance and cost-effectiveness of scalable, distributed memory parallel computers will only then become generally exploitable if the programming difficulties with such machines are overcome. We see the ultimate solution in high-level programming models and appropriate parallelizing compilers that allow the user to formulate a parallel program in terms of application-specific concepts, while low-level issues such as optimal data distribution and coordination of the parallel threads are handled by the compiler. High Performance Fortran (HPF) is a major step in that direction; however, HPF still lacks in the generality of computing domains needed to treat other than regular, data-parallel numerical applications. A more flexible and more abstract programming language for regular and irregular object-parallel applications is PROMOTER. PROMOTER allows the user to program for an application-oriented abstract machine rather than for particular architecture. The wide semantic gap between the abstract machine and the concrete message-passing architecture is closed by the compiler. Hence, the issues of data distribution, communication, and coordination (thread scheduling) are hidden from the user. The paper presents the underlying concepts of PROMOTER and the corresponding language concepts. The PROMOTER compiler translates the parallel program written in terms of distributed types into parallel threads and maps those optimally onto the nodes of the physical machine. The language constructs and their use, the tasks of the compiler, and the challenges encountered in its implementation are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> High Performance Fortran Forum. </author> <title> High Performance Fortran Language Specification. </title> <booktitle> Scientific Programming 2 </booktitle> <pages> 1-170, </pages> <year> 1993. </year>
Reference-contexts: A first major step in this direction is High Performance Fortran (HPF <ref> [1] </ref>); however, HPF still lacks the generality of computing domain definition needed to treat other than only regular, data-parallel numerical applications. A more flexible and more abstract programming language for regular and irregular object-parallel applications, PROMOTER, is discussed in the paper.
Reference: [2] <author> G. E. Blelloch. NESL: </author> <title> A Nested Data-Parallel Language. </title> <type> Technical Report CMU-CS-93-129, </type> <institution> Carnegie-Mellon University, Pittsburgh/PA, </institution> <year> 1993. </year>
Reference-contexts: Finally, PROMOTER has some concepts that do not exist in HPF, e.g., a variety of so-called coordination schemes for parallel operations, and constructs for working with partitionings and coverings. Data-parallel models with recursive data types (e.g., CDT [6], NESL <ref> [2] </ref>, Powerlist [4]): There is no sharp conceptual separation between PROMOTER and programming models with recursive data types; after all, recursive types are possible in PROMOTER as well.
Reference: [3] <author> W. K. Giloi and A. Schramm. </author> <title> PROMOTER, an application-oriented programming model for massive parallelism. </title> <booktitle> In Proceedings of the Massively Parallel Programming Models Working Conference, </booktitle> <pages> pages 198-205. </pages> <publisher> IEEE, </publisher> <year> 1993. </year>
Reference: [4] <author> J. Misra. Powerlist: </author> <title> A Structure for Parallel Recursion. </title> <journal> ACM Transactions on Programming Languages and Systems 16(6) </journal> <pages> 1737-1767, </pages> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: Finally, PROMOTER has some concepts that do not exist in HPF, e.g., a variety of so-called coordination schemes for parallel operations, and constructs for working with partitionings and coverings. Data-parallel models with recursive data types (e.g., CDT [6], NESL [2], Powerlist <ref> [4] </ref>): There is no sharp conceptual separation between PROMOTER and programming models with recursive data types; after all, recursive types are possible in PROMOTER as well.
Reference: [5] <author> H. D. Simon. </author> <title> Partitioning of unstructured problems for parallel processing. </title> <booktitle> Computing Systems in Engineering </booktitle> 2(2/3):135-148, 1991. 
Reference-contexts: In both graphs the edges are marked by weights representing the frequency of communication and latency of the communication channels. This graph-theoretical problem is NP-hard, thus, it is solved by appropriate heuristics, e.g., Recursive Spectral Bisection (see for example <ref> [5] </ref>). 4.3 Cloning A main feature of the PROMOTER computation model is the non-existence of global pointers. Consequently, pointers to local objects which naturally are permitted in the C++ code lose their meaning when passed to other instances of distributed objects.
Reference: [6] <author> D. B. Skillicorn. </author> <title> Practical Parallel Computation, II. Categorical Data Types. </title> <type> External technical report, </type> <institution> Queen's University, Kingston, </institution> <address> Ontario, </address> <year> 1991. </year>
Reference-contexts: Finally, PROMOTER has some concepts that do not exist in HPF, e.g., a variety of so-called coordination schemes for parallel operations, and constructs for working with partitionings and coverings. Data-parallel models with recursive data types (e.g., CDT <ref> [6] </ref>, NESL [2], Powerlist [4]): There is no sharp conceptual separation between PROMOTER and programming models with recursive data types; after all, recursive types are possible in PROMOTER as well.
References-found: 6

