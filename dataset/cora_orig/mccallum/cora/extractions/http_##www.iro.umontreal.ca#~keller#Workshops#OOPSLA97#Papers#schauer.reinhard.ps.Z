URL: http://www.iro.umontreal.ca/~keller/Workshops/OOPSLA97/Papers/schauer.reinhard.ps.Z
Refering-URL: http://www.iro.umontreal.ca/~keller/Workshops/OOPSLA97/index.html
Root-URL: http://www.iro.umontreal.ca
Abstract: We suggest that the quality of software highly depends on how well it supports fundamental architectural patterns for the domain at hand. We propose that these patterns be reified as tangible components, which then can constitute the foundation for an incremental design composition process. To make such design components interchangeable, we further discuss issues that need to be addressed for the definition of a exible standard for the construction of plug-in designs components. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Garlan. </author> <title> Research directions in software architecture. </title> <journal> ACM Computing Surveys, </journal> <volume> 27(2):257261, </volume> <month> June </month> <year> 1995. </year>
Reference-contexts: 1 INTRODUCTION The notion software architecture is often described in terms of components and their interactions: the structure of the components of a program/system, their interrelationships, and principles and guidelines governing their design and evolution over time <ref> [1] </ref> or a sea of classes together with the mechanisms that animate those classes [2]. In this quest for software designed as a sea of exible, composable, and independently evolving building blocks, software architects primarily concentrate on the definition of the systems concrete constituents, the subsystems, packages, and classes.
Reference: [2] <author> Grady Booch. </author> <title> Object Solutions: Managing the Object-Oriented Project. </title> <address> Addison-Wese-ly, </address> <year> 1996. </year>
Reference-contexts: INTRODUCTION The notion software architecture is often described in terms of components and their interactions: the structure of the components of a program/system, their interrelationships, and principles and guidelines governing their design and evolution over time [1] or a sea of classes together with the mechanisms that animate those classes <ref> [2] </ref>. In this quest for software designed as a sea of exible, composable, and independently evolving building blocks, software architects primarily concentrate on the definition of the systems concrete constituents, the subsystems, packages, and classes.
Reference: [3] <author> Rudolf K. Keller and Reinhard Schauer. </author> <title> Raising software composition to the design level. </title> <booktitle> to appear in Proceedings of the Hawaii International Conference on System Sciences. IEEE Computer Society, </booktitle> <address> Kohala Coast: HI, </address> <year> 1998. </year>
Reference-contexts: In this quest for software designed as a sea of exible, composable, and independently evolving building blocks, software architects primarily concentrate on the definition of the systems concrete constituents, the subsystems, packages, and classes. In our approach <ref> [3] </ref>, we embrace the aforementioned definitions of software architectures, yet put much more emphasis on generic architectural abstractions, the architectural design patterns [4] that recur over and over again throughout software engineering.
Reference: [4] <author> Erich Gamma, Richard Helm, Ralph John-son, and John Vlissides. </author> <title> Design Patterns. Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: In our approach [3], we embrace the aforementioned definitions of software architectures, yet put much more emphasis on generic architectural abstractions, the architectural design patterns <ref> [4] </ref> that recur over and over again throughout software engineering. Chronologically following an initial analysis, architectural design should start with a careful selection of those design patterns that best fit the domain at hand.
Reference: [5] <author> Brian Henderson-Sellers. </author> <title> Object-oriented metrics: Measures of complexity. </title> <publisher> Prentice-Hall, </publisher> <year> 1996. </year>
Reference-contexts: To be able to test our hypotheses, we are in the process of developing a software engineering infrastructure that allows for both construction of software by composition of reified design patterns, measurement of the evolving design solution with object-oriented design metrics <ref> [5] </ref>, and identification of design patterns in existing object-oriented software.
Reference: [6] <author> Grady Booch, James Rumbaugh, and Ivar Jacobson. </author> <title> The unified modelling language for object-oriented development. documentation set version 1.0, </title> <month> January </month> <year> 1997. </year> <title> Rational Software Corporation, </title> <address> Santa Clara, CA. </address>
Reference-contexts: The emerging notation standard for object-oriented analysis and design is the UML (Unified Modeling Language) <ref> [6] </ref>. With static structure diagrams, use case diagrams, sequence diagrams, collaboration diagrams, state diagrams, activity diagrams, and implementation diagrams, the UML can provide diagramming techniques that are applicable to most problem domain.
References-found: 6

