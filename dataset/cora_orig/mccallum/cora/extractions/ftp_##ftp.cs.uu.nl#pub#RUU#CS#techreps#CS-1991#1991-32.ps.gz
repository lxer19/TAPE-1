URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1991/1991-32.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: mattern@cs.uni-sb.de  Email: horst@informatik.uni-kl.de  Email: anneke@cs.ruu.nl, gerard@cs.ruu.nl  
Title: Global Virtual Time Approximation with Distributed Termination Detection Algorithms  
Author: Friedemann Mattern Horst Mehl Anneke A. Schoone and Gerard Tel 
Note: The work of H. Mehl is supported by the German National Science Foundation (Deutsche Forschungsgemeinschaft) under grant SPP-322671. The work of A.A. Schoone and G. Tel is supported by the ESPRIT II Basic Research Actions Program of the EC under contract no. 3075 (project ALCOM).  
Date: September 1991  
Address: Im Stadtwald 36, D 6600 Saarbrucken, Fed. Rep. Germany  P.O. Box 3049, D 6750 Kaiserslautern, Fed. Rep. Germany  P.O. Box 80.089, 3508 TB Utrecht, The Netherlands  
Affiliation: Department of Computer Science, University of Saarbrucken,  Department of Computer Science, University of Kaiserslautern,  Department of Computer Science, University of Utrecht,  
Abstract: It is shown that distributed termination detection algorithms can be transformed into efficient algorithms to approximate the so-called Global Virtual Time (GVT) of a distributed monotonic computation. Typical instances of such computations are optimistic distributed simulations based on the time-warp principle. The transformation is exemplified for two termination detection algorithms, namely an algorithm by Dijkstra et al. and a new scheme based on the principle of "sticky flags". The general idea of the transformation is that many termination detection algorithms (viz., one for each possible GVT value) run in parallel. Each algorithm determines a specific lower bound 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bauer, H., Sporrer, C., and Krodel, T. H. </author> <title> On distributed logic simulation using time warp. </title> <booktitle> In Proc. VLSI International Conference (IFIP), </booktitle> <address> Edinburgh (1991). </address>
Reference-contexts: Conversely, however, it is also possible to check for a general distributed monotonic computation whether GV T has reached some threshold value t by using a termination detection algorithm [29, 32]. For that purpose, fix t 2 IR and divide IR in two intervals <ref> [1; t) and [t; 1] </ref>, and call the first t-active and the second t-passive. Then, as above, we can consider a distributed monotonic computation as a basic computation for (t)-termination, whereby t-termination is equivalent to GV T 2 [t; 1]. Formally, we have the following correspondence. <p> Conversely, however, it is also possible to check for a general distributed monotonic computation whether GV T has reached some threshold value t by using a termination detection algorithm [29, 32]. For that purpose, fix t 2 IR and divide IR in two intervals [1; t) and <ref> [t; 1] </ref>, and call the first t-active and the second t-passive. Then, as above, we can consider a distributed monotonic computation as a basic computation for (t)-termination, whereby t-termination is equivalent to GV T 2 [t; 1]. Formally, we have the following correspondence. Theorem 3.2 Let t 2 IR. <p> that purpose, fix t 2 IR and divide IR in two intervals [1; t) and <ref> [t; 1] </ref>, and call the first t-active and the second t-passive. Then, as above, we can consider a distributed monotonic computation as a basic computation for (t)-termination, whereby t-termination is equivalent to GV T 2 [t; 1]. Formally, we have the following correspondence. Theorem 3.2 Let t 2 IR. Define the pseudo-variable state (t) i to have the value t-passive if C i t and t-active if C i &lt; t. <p> The idea of using acknowledgements to catch the timestamps of in-transit messages in GVT approximation schemes was already used by Samadi et al. [27]. Other solutions to the GVT approximation problem were given by Bauer et al. <ref> [1] </ref>, Conception and Kelly [10], Lin and Lazowska [18], Preiss [23], and, as already mentioned above, by Bellenot [3] and Baldwin et al. [2]. Most of these solutions, however, are either rather involved or not proved to be correct.
Reference: [2] <author> Baldwin, R., Chung, M. J., and Chung, Y. </author> <title> Overlapping window algorithm for computing GVT in time warp. </title> <booktitle> In 11th International Conference on Distributed Computing Systems (1991). </booktitle>
Reference-contexts: The resulting finite and elegant GVT approximation algorithm turns out to be an already known algorithm| it was originally proposed by Tel [30] and was recently reinvented by Baldwin et al. <ref> [2] </ref>. We will rigorously prove its correctness, thereby also obtaining a correctness proof for the "sticky flag" termination detection algorithm as a special case. <p> For the GVT approximation algorithms described so far it is required that activation messages be transmitted instantaneously. However, the algorithms are also applicable to synchronous communication and so-called causally ordered communication <ref> [2, 9] </ref>, and they can also be adapted to the asynchronous case where messages may be in transit. In the asynchronous case, GV T is the minimum of all clocks C i and of all timestamps of messages which are in transit. <p> Other solutions to the GVT approximation problem were given by Bauer et al. [1], Conception and Kelly [10], Lin and Lazowska [18], Preiss [23], and, as already mentioned above, by Bellenot [3] and Baldwin et al. <ref> [2] </ref>. Most of these solutions, however, are either rather involved or not proved to be correct. Because of the importance of a fast and efficient GVT approximation for distributed simulation, hardware solutions have also been proposed ([13, 19, 26]).
Reference: [3] <author> Bellenot, S. </author> <title> Global virtual time algorithms. </title> <booktitle> In Proc. of the SCS Multiconference on Distributed Simulation (1990), </booktitle> <pages> pp. 122-127. </pages>
Reference-contexts: In this way, the state indicator is logically assigned all times between the sending and the receipt of the acknowledgement, and thus in particular at the moment when the message is received. This essentially yields a GVT approximation scheme which was presented (without proof) by Bellenot in <ref> [3] </ref>. Another approach to adapt GVT approximation algorithms to the asynchronous case was used by Schoone and Tel in [29]. Instead of sending acknowledgements for messages, the timestamps of messages to be acknowledged are accumulated in multi-sets ACK i [j] (a process needs an entry for each originator). <p> Other solutions to the GVT approximation problem were given by Bauer et al. [1], Conception and Kelly [10], Lin and Lazowska [18], Preiss [23], and, as already mentioned above, by Bellenot <ref> [3] </ref> and Baldwin et al. [2]. Most of these solutions, however, are either rather involved or not proved to be correct. Because of the importance of a fast and efficient GVT approximation for distributed simulation, hardware solutions have also been proposed ([13, 19, 26]).
Reference: [4] <author> Ben-Ari, M. </author> <title> Algorithms for on-the-fly garbage collection. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 6 (1984), </volume> <pages> 333-344. 27 </pages>
Reference-contexts: As we showed in Section 4.3, our "sticky flag" algorithm (which was also derived in [33] when applying to Ben-Ari's garbage collection algorithm <ref> [4] </ref> a scheme that systematically transforms garbage collection algorithms into distributed termination detection algorithms) is similar to the termination detection algorithm by Dijkstra, Feijen, and van Gasteren [11].
Reference: [5] <author> Blanc, P. </author> <title> Detection de Proprietes de Repos Globales dans des Systemes Repartis avec Desequencement de Messages; Application au Probleme de Terminaison. </title> <type> PhD thesis, </type> <institution> Universite Paris 6, Paris, </institution> <year> 1990. </year>
Reference-contexts: It has gained considerable interest in recent years, see for example <ref> [5, 11, 12, 20, 21, 32] </ref>. <p> The DFG-algorithm has already been adapted so as to detect termination of computations using asynchronous communication <ref> [5] </ref>. In those variants, however, the control wave is "lazy" in the sense that a process does not propagate the control message as long as it is active or engaged.
Reference: [6] <author> Chandy, K. M., and Lamport, L. </author> <title> Distributed snapshots: Determining global states of distributed systems. </title> <journal> ACM Trans. Comput. Syst. </journal> <volume> 3 (1985), </volume> <pages> 63-75. </pages>
Reference-contexts: Section 5 contains some further remarks and generalizations. 2 2 Termination Detection Distributed termination detection is a "prototype problem" from the area of distributed computing, which is closely related to other important problems of the field, such as distributed garbage collection [33] and snapshot computation <ref> [6] </ref>. It has gained considerable interest in recent years, see for example [5, 11, 12, 20, 21, 32]. <p> It should be noted that termination of "telepathic computations" is not a stable property in the sense of Chandy and Lamport <ref> [6] </ref> or Lai and Yang [17] 1 . Nevertheless, once an instant of time has been reached where all processes are simultaneously passive (i.e., the computation has terminated), the processes remain passive. <p> Because of the importance of a fast and efficient GVT approximation for distributed simulation, hardware solutions have also been proposed ([13, 19, 26]). Since GVT is a monotonic function of the global state, it is also possible to use distributed snapshot algorithms (as given by Chandy and Lamport <ref> [6] </ref> or Lai and Yang [17]) in order to approximate GVT. In [22] a snapshot based solution for asynchronous communications is proposed which does not rely on acknowledge-ments.
Reference: [7] <author> Chandy, K. M., and Sherman, R. </author> <title> Space-time and simulation. </title> <booktitle> In Proc. of the SCS Multiconference on Distributed Simulation (1989), </booktitle> <pages> pp. 53-57. </pages>
Reference-contexts: This algorithm, however, which is based on Rana's termination detection scheme [24], requires a global clock. The idea has also been sketched by Chandy and Sherman <ref> [7] </ref> although their resulting algorithm is not used for GVT approximation. Connections between termination detection and GVT approximation were made by Jefferson [16] and Tel [30, 32] and, as mentioned above, by Schoone and Tel [29].
Reference: [8] <author> Chang, E. J.-H. </author> <title> Echo algorithms: Depth parallel operations on general graphs. </title> <journal> IEEE Trans. Softw. Eng. </journal> <volume> SE-8 (1982), </volume> <pages> 391-401. </pages>
Reference-contexts: Such algorithms can be implemented in various ways; examples include a control message circulating on a (virtual) ring connecting all processes (see also Raynal and Helary [25]), parallel distributed graph traversal schemes such as the echo algorithm <ref> [8] </ref>, and (virtual) broadcast schemes on a spanning tree. Unfortunately, however, the values of the state indicators collected in that way do not allow the conclusion that the basic computation has terminated.
Reference: [9] <author> Charron-Bost, B., Tel, G., and Mattern, F. </author> <title> Synchronous and asynchronous communication in distributed computations. </title> <type> Tech. rep., </type> <institution> Universite Paris 7, Paris, </institution> <year> 1991. </year>
Reference-contexts: This is not the case for most other termination detection algorithms 2 . Synchronous Communication. Instantaneous message transmissions are not realizable in practice, they are merely an idealization of synchronous communication <ref> [9] </ref>. Interestingly, however, the "sticky flag" principle can also be used with the more realistic synchronous communication mode, where the send operation blocks until the sender knows that the receiver is also blocked and ready to accept the message. <p> For the GVT approximation algorithms described so far it is required that activation messages be transmitted instantaneously. However, the algorithms are also applicable to synchronous communication and so-called causally ordered communication <ref> [2, 9] </ref>, and they can also be adapted to the asynchronous case where messages may be in transit. In the asynchronous case, GV T is the minimum of all clocks C i and of all timestamps of messages which are in transit.
Reference: [10] <author> Concepcion, A. I., and Kelly, S. G. </author> <title> Computing global virtual time using the multilevel token passing algorithm. </title> <booktitle> In Proc. of the SCS Multiconference on Distributed Simulation (1991), </booktitle> <pages> pp. 63-68. </pages>
Reference-contexts: The idea of using acknowledgements to catch the timestamps of in-transit messages in GVT approximation schemes was already used by Samadi et al. [27]. Other solutions to the GVT approximation problem were given by Bauer et al. [1], Conception and Kelly <ref> [10] </ref>, Lin and Lazowska [18], Preiss [23], and, as already mentioned above, by Bellenot [3] and Baldwin et al. [2]. Most of these solutions, however, are either rather involved or not proved to be correct.
Reference: [11] <author> Dijkstra, E. W., Feijen, W. H. J., and van Gasteren, A. J. M. </author> <title> Derivation of a termination detection algorithm for distributed computations. </title> <journal> Inf. Process. Lett. </journal> <volume> 16 (1983), </volume> <pages> 217-219. </pages>
Reference-contexts: It has gained considerable interest in recent years, see for example <ref> [5, 11, 12, 20, 21, 32] </ref>. <p> This property becomes important when the algorithm is used for GVT approximation in Section 4.1. The algorithm we just described is reminiscent of the well-known termination detection algorithm by Dijkstra et al. <ref> [11] </ref>. However, whereas in that algorithm a flag is set when an activation message is sent, our scheme uses a flag (the sticky state indicator) which is set when an activation message is received. We shall come back to Dijkstra's algorithm in Section 4.3. 2.4 Variants Telepathic Computations. <p> This is due to the fact that interference between processes by another mechanism than message passing is not considered. Thus one should redefine the concept of "consistent cut" and hence of "stable property" for telepathic computations. 2 For example, the algorithm of Dijkstra et al. <ref> [11] </ref> requires some control activity whenever a process sends a message, namely coloring the sending process black. <p> Not only for the algorithm of Section 2.3, but for arbitrary termination detection algorithms a transformation of the infinite bundle to a finite algorithm can be carried out. For example, in Section 4.3 we do it for the algorithm of Dijkstra et al. <ref> [11] </ref>, 14 and it is done in [29] for the case of the vector counting algorithm [20]. <p> We will rigorously prove its correctness, thereby also obtaining a correctness proof for the "sticky flag" termination detection algorithm as a special case. We conclude the section with the transformation of the DFG-algorithm by Dijkstra et al. <ref> [11] </ref>. 4.1 Transformation of the Sticky Flag Algorithm For convenience, the text of the termination detection algorithm presented in Section 2.3 is first repeated here. Process P n initiates the algorithm by sending a control message hpassivei to the next process (i.e., P 1 ) on the ring. <p> From this and the monotonicity of G and GV T follows liveness. 2 This correctness proof also applies to the "sticky flag" termination detection algorithm presented in Section 2.3 since termination detection is a particular instance 20 of GVT approximation. 4.3 The DFG-Algorithm Termination Detection. In <ref> [11] </ref> Dijkstra, Feijen, and van Gasteren presented a ring-based termination detection algorithm for distributed computations with instantaneously transmitted activation messages. Their algorithm is similar to the ring-based "sticky flag" algorithm developed in Section 2.3. <p> In the same way as the "sticky flag" algorithm, the DFG-algorithm can be transformed into a GVT approximation algorithm. The internal 4 We sketch the algorithm in a slightly different way than it was originally presented in <ref> [11] </ref>. 21 action I i remains unchanged. <p> Correctness. It is interesting to note that a direct transformation of the invariant given in <ref> [11] </ref> for the correctness of the termination detection algorithm leads to an invariant implying the correctness of the GVT approximation version given above. <p> As we showed in Section 4.3, our "sticky flag" algorithm (which was also derived in [33] when applying to Ben-Ari's garbage collection algorithm [4] a scheme that systematically transforms garbage collection algorithms into distributed termination detection algorithms) is similar to the termination detection algorithm by Dijkstra, Feijen, and van Gasteren <ref> [11] </ref>. Because of its simplicity (messages need not be considered; a single flag is used which is only set when a process actually becomes active) our algorithm compares favorably with this and other termination detection algorithms based on synchronous communication.
Reference: [12] <author> Dijkstra, E. W., and Scholten, C. S. </author> <title> Termination detection for diffusing computations. </title> <journal> Inf. Process. Lett. </journal> <volume> 11 (1980), </volume> <pages> 1-4. </pages>
Reference-contexts: It has gained considerable interest in recent years, see for example <ref> [5, 11, 12, 20, 21, 32] </ref>. <p> In other schemes, activation messages must be counted [20] or acknowledged <ref> [12] </ref>. 7 to be active already at the moment the message is sent (instead of being activated when the message is actually received). Since by rule R1 the sender is also active at the moment of sending the message, rule R2 0 is observed. Asynchronous Communication. <p> Most termination detection algorithms known to date can be made non-lazy by a simple modification, but there are inherently lazy algorithms with favorable properties, such as the algorithm by Dijkstra and Scholten <ref> [12] </ref>. Although the results of Section 3.3 are in principle applicable to lazy algorithms, the reduction to a finite algorithm is not so easy in this case. The application of the transformation to the algorithm of Dijkstra and Scholten is currently under investigation. Distributed Infimum Approximation. <p> This simple and provably correct scheme compares favorably with other known GVT approximation algorithms. It is left for further investigation whether termination detection schemes based on other principles, such as the diffusing computation paradigm <ref> [12] </ref> or the credit recovery paradigm [21], do also yield interesting GVT approximation algorithms.
Reference: [13] <author> Filloque, J. M., Gautrin, E., and Pottier, B. </author> <title> Efficient global computations on a processor network with programmable logic. </title> <booktitle> In Proc. Parallel Architectures and Languages Europe (PARLE) (1991), </booktitle> <editor> E. H. L. Aarts, J. van Leeuwen, and M. Rem, Eds., </editor> <volume> vol. </volume> <booktitle> 505 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 69-82. </pages>
Reference: [14] <author> Fujimoto, R. M. </author> <title> Parallel discrete event simulation. </title> <journal> Commun. ACM 33, </journal> <volume> 10 (1990), </volume> <pages> 30-53. </pages>
Reference-contexts: GVT approximation algorithms are of great practical importance for distributed simulation systems <ref> [14] </ref>, in particular for those based on the time-warp principle [16]. It was already noted by Jefferson [16] that GVT approximation algorithms are generalizations of distributed termination detection algorithms. Therefore, GVT approximation algorithms can be used to detect termination. <p> This global minimum is referred to as the Global Virtual Time (GVT ) of the computation, see Jefferson 3 [16]. Typical instances of distributed monotonic computations are parallel discrete event simulation systems <ref> [14] </ref> where local simulator processes cooperate by scheduling so-called remote events using timestamped messages. Rules S1-S3 translate to the following three atomic actions to model the behavior of a distributed monotonic computation. <p> The determination of a tight lower bound on the current GV T value is of great importance for distributed simulation systems, see, e.g., Fujimoto <ref> [14] </ref> and Jefferson [16]. Since in optimistic distributed simulations a simulator process has to roll back to an earlier state when a message with an earlier timestamp than its current clock value arrives, it must save its state regularly.
Reference: [15] <author> Hughes, J. </author> <title> A distributed garbage collection algorithm. </title> <booktitle> In Functional Programming Language and Computer Architecture (1985), </booktitle> <editor> J. P. Jouannoud, Ed., </editor> <volume> vol. </volume> <booktitle> 201 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 256-272. </pages>
Reference-contexts: Some of the ideas that are developed in this paper were already used, often implicitly, in earlier papers. The idea of using a bundle of termination detection algorithms to approximate GVT did already appear in a distributed garbage collection algorithm by Hughes <ref> [15] </ref>. This algorithm, however, which is based on Rana's termination detection scheme [24], requires a global clock. The idea has also been sketched by Chandy and Sherman [7] although their resulting algorithm is not used for GVT approximation.
Reference: [16] <author> Jefferson, D. </author> <title> Virtual time. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 7, 3 (1985), </volume> <pages> 404-425. </pages>
Reference-contexts: GVT approximation algorithms are of great practical importance for distributed simulation systems [14], in particular for those based on the time-warp principle <ref> [16] </ref>. It was already noted by Jefferson [16] that GVT approximation algorithms are generalizations of distributed termination detection algorithms. Therefore, GVT approximation algorithms can be used to detect termination. <p> GVT approximation algorithms are of great practical importance for distributed simulation systems [14], in particular for those based on the time-warp principle <ref> [16] </ref>. It was already noted by Jefferson [16] that GVT approximation algorithms are generalizations of distributed termination detection algorithms. Therefore, GVT approximation algorithms can be used to detect termination. In this paper we show that the converse is also true, namely that distributed termination detection algorithms can be transformed to obtain GVT approximation algorithms. <p> Computations that behave according to these rules are called distributed monotonic computations [22] because the global minimum of all clocks C i increases monotonically during the computation. This global minimum is referred to as the Global Virtual Time (GVT ) of the computation, see Jefferson 3 <ref> [16] </ref>. Typical instances of distributed monotonic computations are parallel discrete event simulation systems [14] where local simulator processes cooperate by scheduling so-called remote events using timestamped messages. Rules S1-S3 translate to the following three atomic actions to model the behavior of a distributed monotonic computation. <p> The determination of a tight lower bound on the current GV T value is of great importance for distributed simulation systems, see, e.g., Fujimoto [14] and Jefferson <ref> [16] </ref>. Since in optimistic distributed simulations a simulator process has to roll back to an earlier state when a message with an earlier timestamp than its current clock value arrives, it must save its state regularly. <p> A lower bound on GVT is also necessary to know when irrevocable actions (e.g., simulation animation or display of statistical results) can be committed. 3.2 The Relation between GVT and Termination Termination Expressed as Global Virtual Time. It has already been observed by Jefferson and others <ref> [16, 29, 32] </ref> that distributed termination detection is a special case of GVT approximation. <p> This algorithm, however, which is based on Rana's termination detection scheme [24], requires a global clock. The idea has also been sketched by Chandy and Sherman [7] although their resulting algorithm is not used for GVT approximation. Connections between termination detection and GVT approximation were made by Jefferson <ref> [16] </ref> and Tel [30, 32] and, as mentioned above, by Schoone and Tel [29]. The idea of using acknowledgements to catch the timestamps of in-transit messages in GVT approximation schemes was already used by Samadi et al. [27].
Reference: [17] <author> Lai, T. H., and Yang, T. H. </author> <title> On distributed snapshots. </title> <journal> Inf. Process. Lett. </journal> <volume> 25 (1987), </volume> <pages> 153-158. </pages>
Reference-contexts: It should be noted that termination of "telepathic computations" is not a stable property in the sense of Chandy and Lamport [6] or Lai and Yang <ref> [17] </ref> 1 . Nevertheless, once an instant of time has been reached where all processes are simultaneously passive (i.e., the computation has terminated), the processes remain passive. Our algorithm can be used to detect this global termination property of "telepathic computations" as the following argument shows. <p> Since GVT is a monotonic function of the global state, it is also possible to use distributed snapshot algorithms (as given by Chandy and Lamport [6] or Lai and Yang <ref> [17] </ref>) in order to approximate GVT. In [22] a snapshot based solution for asynchronous communications is proposed which does not rely on acknowledge-ments. The results of Lai and Yang [17] indicate that for the detection of termination 26 it is not necessary to compute a so-called consistent snapshot. <p> state, it is also possible to use distributed snapshot algorithms (as given by Chandy and Lamport [6] or Lai and Yang <ref> [17] </ref>) in order to approximate GVT. In [22] a snapshot based solution for asynchronous communications is proposed which does not rely on acknowledge-ments. The results of Lai and Yang [17] indicate that for the detection of termination 26 it is not necessary to compute a so-called consistent snapshot. As is shown in [22], inconsistent snapshots are also sufficient for GVT approximation. Conclusions.
Reference: [18] <author> Lin, Y. B., and Lazowska, D. </author> <title> Determining the global virtual time in a distributed simulation. </title> <type> Tech. Rep. </type> <institution> 90-01-02, Dept. of Comp. Sc., Univ. of Washington, </institution> <address> Seattle, </address> <year> 1990. </year>
Reference-contexts: The idea of using acknowledgements to catch the timestamps of in-transit messages in GVT approximation schemes was already used by Samadi et al. [27]. Other solutions to the GVT approximation problem were given by Bauer et al. [1], Conception and Kelly [10], Lin and Lazowska <ref> [18] </ref>, Preiss [23], and, as already mentioned above, by Bellenot [3] and Baldwin et al. [2]. Most of these solutions, however, are either rather involved or not proved to be correct.
Reference: [19] <author> Livny, M., and Manber, U. </author> <title> Distributed computation via active messages. </title> <journal> IEEE Trans. on Computers C-34, </journal> <volume> 12, </volume> <year> (1985), </year> <pages> 1185-1190. 28 </pages>
Reference: [20] <author> Mattern, F. </author> <title> Algorithms for distributed termination detection. </title> <booktitle> Distributed Com--puting 2 (1987), </booktitle> <pages> 161-175. </pages>
Reference-contexts: It has gained considerable interest in recent years, see for example <ref> [5, 11, 12, 20, 21, 32] </ref>. <p> In other schemes, activation messages must be counted <ref> [20] </ref> or acknowledged [12]. 7 to be active already at the moment the message is sent (instead of being activated when the message is actually received). Since by rule R1 the sender is also active at the moment of sending the message, rule R2 0 is observed. Asynchronous Communication. <p> Then, again, rule R2 0 is observed. It is also possible to use indirect acknowl-edgements and to batch acknowledgements; these techniques are used, for example, in the vector counter algorithm <ref> [20] </ref>. 3 Global Virtual Time and its Approximation In this section, a particular distributed computation scheme is considered, which defines a monotonic function of the global state. A simplifying assumption is made about the domain of this function, namely, that it is a set of real numbers. <p> For example, in Section 4.3 we do it for the algorithm of Dijkstra et al. [11], 14 and it is done in [29] for the case of the vector counting algorithm <ref> [20] </ref>. <p> It was already noted in [29] that a termination detection algorithm can be transformed to yield an algorithm for distributed infimum approximation. There, however, only the transformation for a particular algorithm (the so-called vector counter algorithm <ref> [20] </ref>) is shown, and that transformation yields a rather complicated algo 25 rithm for the general case of arbitrary posets and asynchronous communication. <p> A large number of termination detection algorithms have been published in recent years, and many of those published before 1987 are listed in the bibliography in <ref> [20] </ref>.
Reference: [21] <author> Mattern, F. </author> <title> Global quiescence detection based on credit distribution and recovery. </title> <journal> Inf. Process. Lett. </journal> <volume> 30 (1989), </volume> <pages> 195-200. </pages>
Reference-contexts: It has gained considerable interest in recent years, see for example <ref> [5, 11, 12, 20, 21, 32] </ref>. <p> This simple and provably correct scheme compares favorably with other known GVT approximation algorithms. It is left for further investigation whether termination detection schemes based on other principles, such as the diffusing computation paradigm [12] or the credit recovery paradigm <ref> [21] </ref>, do also yield interesting GVT approximation algorithms.
Reference: [22] <author> Mattern, F. </author> <title> Efficient distributed snapshots and global virtual time algorithms. </title> <type> Tech. Rep. </type> <institution> SFB124-24/90, University of Kaiserslautern, Kaiserslautern, </institution> <year> 1990. </year>
Reference-contexts: The Global Virtual Time approximation problem consists of computing a suitable approximation of this function, as to be defined in this section. A treatment of the generalized problem, in which the domain of the monotonic function is an arbitrary partially ordered set, is given in <ref> [22, 29, 30, 32] </ref>. After defining the GVT problem, we show how termination detection and global virtual time approximation are related. This relation then leads to a general transformation of termination detection algorithms to GVT approximation algorithms. 3.1 The Global Virtual Time Problem Distributed Monotonic Computations. <p> Computations that behave according to these rules are called distributed monotonic computations <ref> [22] </ref> because the global minimum of all clocks C i increases monotonically during the computation. This global minimum is referred to as the Global Virtual Time (GVT ) of the computation, see Jefferson 3 [16]. <p> Since GVT is a monotonic function of the global state, it is also possible to use distributed snapshot algorithms (as given by Chandy and Lamport [6] or Lai and Yang [17]) in order to approximate GVT. In <ref> [22] </ref> a snapshot based solution for asynchronous communications is proposed which does not rely on acknowledge-ments. The results of Lai and Yang [17] indicate that for the detection of termination 26 it is not necessary to compute a so-called consistent snapshot. As is shown in [22], inconsistent snapshots are also sufficient <p> In <ref> [22] </ref> a snapshot based solution for asynchronous communications is proposed which does not rely on acknowledge-ments. The results of Lai and Yang [17] indicate that for the detection of termination 26 it is not necessary to compute a so-called consistent snapshot. As is shown in [22], inconsistent snapshots are also sufficient for GVT approximation. Conclusions. In this paper algorithms for termination detection and GVT approximation were studied; their correctness was proved using an assertional verification technique.
Reference: [23] <author> Preiss, B. R. </author> <title> The Yaddes distributed discrete event simulation specification language and execution environments. </title> <booktitle> In Proc. of the SCS Multiconference on Distributed Simulation (1989), </booktitle> <pages> pp. 139-144. </pages>
Reference-contexts: The idea of using acknowledgements to catch the timestamps of in-transit messages in GVT approximation schemes was already used by Samadi et al. [27]. Other solutions to the GVT approximation problem were given by Bauer et al. [1], Conception and Kelly [10], Lin and Lazowska [18], Preiss <ref> [23] </ref>, and, as already mentioned above, by Bellenot [3] and Baldwin et al. [2]. Most of these solutions, however, are either rather involved or not proved to be correct.
Reference: [24] <author> Rana, S. P. </author> <title> A distributed solution of the distributed termination problem. </title> <journal> Inf. Process. Lett. </journal> <volume> 17 (1983), </volume> <pages> 43-46. </pages>
Reference-contexts: The idea of using a bundle of termination detection algorithms to approximate GVT did already appear in a distributed garbage collection algorithm by Hughes [15]. This algorithm, however, which is based on Rana's termination detection scheme <ref> [24] </ref>, requires a global clock. The idea has also been sketched by Chandy and Sherman [7] although their resulting algorithm is not used for GVT approximation.
Reference: [25] <author> Raynal, M., and H elary, J.-M. </author> <title> Control and Synchronization of Distributed Systems and Programs. </title> <publisher> Wiley, </publisher> <year> 1990. </year>
Reference-contexts: Such algorithms can be implemented in various ways; examples include a control message circulating on a (virtual) ring connecting all processes (see also Raynal and Helary <ref> [25] </ref>), parallel distributed graph traversal schemes such as the echo algorithm [8], and (virtual) broadcast schemes on a spanning tree. Unfortunately, however, the values of the state indicators collected in that way do not allow the conclusion that the basic computation has terminated.
Reference: [26] <author> Reynolds, P. F. </author> <title> An efficient framework for parallel simulation. </title> <booktitle> In Proc. of the SCS Multiconference on Advances in Parallel and Distributed Simulation (1991), </booktitle> <pages> pp. 167-174. </pages>
Reference: [27] <author> Samadi, B., Muntz, R. R., and Parker, D. S. </author> <title> A distributed algorithm to detect a global state of a distributed simulation system. </title> <booktitle> In Proceedings IFIP Conference on Distributed Processing (Amsterdam, 1987), </booktitle> <publisher> North-Holland. </publisher>
Reference-contexts: Connections between termination detection and GVT approximation were made by Jefferson [16] and Tel [30, 32] and, as mentioned above, by Schoone and Tel [29]. The idea of using acknowledgements to catch the timestamps of in-transit messages in GVT approximation schemes was already used by Samadi et al. <ref> [27] </ref>. Other solutions to the GVT approximation problem were given by Bauer et al. [1], Conception and Kelly [10], Lin and Lazowska [18], Preiss [23], and, as already mentioned above, by Bellenot [3] and Baldwin et al. [2].
Reference: [28] <author> Schoone, A. A. </author> <title> Assertional Verification in Distributed Computing. </title> <type> PhD thesis, </type> <institution> University of Utrecht, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: The proof of the theorem implies how these real-valued variables must be updated under the operations of the bundle of algorithms. In proofs of theorems about distributed algorithms we use the method of "system-wide invariants" <ref> [28] </ref>. The idea is to express the desired (safety) property of an algorithm as an assertion about values of program variables and to prove 16 its correctness by means of invariants.
Reference: [29] <author> Schoone, A. A., and Tel, G. </author> <title> Transformation of a termination detection algorithm and its assertional correctness proof. </title> <type> Tech. Rep. </type> <institution> RUU-CS-88-40, University of Utrecht, Utrecht, </institution> <year> 1988. </year> <note> Also [28, Sec. 5.2]. </note>
Reference-contexts: The Global Virtual Time approximation problem consists of computing a suitable approximation of this function, as to be defined in this section. A treatment of the generalized problem, in which the domain of the monotonic function is an arbitrary partially ordered set, is given in <ref> [22, 29, 30, 32] </ref>. After defining the GVT problem, we show how termination detection and global virtual time approximation are related. This relation then leads to a general transformation of termination detection algorithms to GVT approximation algorithms. 3.1 The Global Virtual Time Problem Distributed Monotonic Computations. <p> A lower bound on GVT is also necessary to know when irrevocable actions (e.g., simulation animation or display of statistical results) can be committed. 3.2 The Relation between GVT and Termination Termination Expressed as Global Virtual Time. It has already been observed by Jefferson and others <ref> [16, 29, 32] </ref> that distributed termination detection is a special case of GVT approximation. <p> Conversely, however, it is also possible to check for a general distributed monotonic computation whether GV T has reached some threshold value t by using a termination detection algorithm <ref> [29, 32] </ref>. For that purpose, fix t 2 IR and divide IR in two intervals [1; t) and [t; 1], and call the first t-active and the second t-passive. <p> For example, in Section 4.3 we do it for the algorithm of Dijkstra et al. [11], 14 and it is done in <ref> [29] </ref> for the case of the vector counting algorithm [20]. <p> interval. (The boundaries of these intervals are determined by the timestamps which actually occur in the computation.) In that case, the infinite collection of variables v (k) i can be finitely represented by maintaining the intervals and the value of v i for each interval, as is also proposed in <ref> [29] </ref>. 4 Two Simple GVT Approximation Algorithms In this section the transformation described in Section 3.3 will be applied to the "sticky flag" termination detection algorithm of Section 2.3. <p> This essentially yields a GVT approximation scheme which was presented (without proof) by Bellenot in [3]. Another approach to adapt GVT approximation algorithms to the asynchronous case was used by Schoone and Tel in <ref> [29] </ref>. Instead of sending acknowledgements for messages, the timestamps of messages to be acknowledged are accumulated in multi-sets ACK i [j] (a process needs an entry for each originator). <p> Likewise, the multiset U N ACK i is transferred to the control message upon a visit, whereby acknowledged and unacknowledged messages can cancel each other. For more details we refer to <ref> [29] </ref>. Lazy Algorithms. In this paper we have applied our transformation to two particular non-lazy algorithms where the control message is propagated independently of the state of the process. <p> The resulting problem, of which termination detection and GVT approximation are instances, is called distributed infimum approximation. This problem was defined by Tel [30] and algorithms to approximate a distributed infimum were given in [30, 32]. It was already noted in <ref> [29] </ref> that a termination detection algorithm can be transformed to yield an algorithm for distributed infimum approximation. <p> The idea has also been sketched by Chandy and Sherman [7] although their resulting algorithm is not used for GVT approximation. Connections between termination detection and GVT approximation were made by Jefferson [16] and Tel [30, 32] and, as mentioned above, by Schoone and Tel <ref> [29] </ref>. The idea of using acknowledgements to catch the timestamps of in-transit messages in GVT approximation schemes was already used by Samadi et al. [27].
Reference: [30] <author> Tel, G. </author> <title> Distributed infimum approximation. </title> <booktitle> In Fundamentals of Computation Theory (Kazan, </booktitle> <year> 1987), </year> <editor> L. Budach et al., Eds., </editor> <volume> vol. </volume> <booktitle> 278 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 440-447. </pages> <note> Also [32, Sec. 4.1]. </note>
Reference-contexts: The Global Virtual Time approximation problem consists of computing a suitable approximation of this function, as to be defined in this section. A treatment of the generalized problem, in which the domain of the monotonic function is an arbitrary partially ordered set, is given in <ref> [22, 29, 30, 32] </ref>. After defining the GVT problem, we show how termination detection and global virtual time approximation are related. This relation then leads to a general transformation of termination detection algorithms to GVT approximation algorithms. 3.1 The Global Virtual Time Problem Distributed Monotonic Computations. <p> The resulting finite and elegant GVT approximation algorithm turns out to be an already known algorithm| it was originally proposed by Tel <ref> [30] </ref> and was recently reinvented by Baldwin et al. [2]. We will rigorously prove its correctness, thereby also obtaining a correctness proof for the "sticky flag" termination detection algorithm as a special case. <p> The notion of a monotonic distributed computation can be generalized by replacing the domain IR of the clocks and time-stamps by an arbitrary partially ordered set. The resulting problem, of which termination detection and GVT approximation are instances, is called distributed infimum approximation. This problem was defined by Tel <ref> [30] </ref> and algorithms to approximate a distributed infimum were given in [30, 32]. It was already noted in [29] that a termination detection algorithm can be transformed to yield an algorithm for distributed infimum approximation. <p> The resulting problem, of which termination detection and GVT approximation are instances, is called distributed infimum approximation. This problem was defined by Tel [30] and algorithms to approximate a distributed infimum were given in <ref> [30, 32] </ref>. It was already noted in [29] that a termination detection algorithm can be transformed to yield an algorithm for distributed infimum approximation. <p> The idea has also been sketched by Chandy and Sherman [7] although their resulting algorithm is not used for GVT approximation. Connections between termination detection and GVT approximation were made by Jefferson [16] and Tel <ref> [30, 32] </ref> and, as mentioned above, by Schoone and Tel [29]. The idea of using acknowledgements to catch the timestamps of in-transit messages in GVT approximation schemes was already used by Samadi et al. [27].
Reference: [31] <author> Tel, G. </author> <title> Total algorithms. </title> <booktitle> Algorithms Review 1 (1990), </booktitle> <pages> 13-42. </pages> <note> Also [32, Sec. 4.2]. </note>
Reference-contexts: may start a control wave which visits all processes and returns the values of the state indicators. (More efficiently, it could only return the "accumulated" value passive if all processes were passive, and active otherwise.) To model algorithms that implement control waves the concept of total algorithms was introduced in <ref> [31] </ref>. Such algorithms can be implemented in various ways; examples include a control message circulating on a (virtual) ring connecting all processes (see also Raynal and Helary [25]), parallel distributed graph traversal schemes such as the echo algorithm [8], and (virtual) broadcast schemes on a spanning tree.
Reference: [32] <author> Tel, G. </author> <booktitle> Topics in Distributed Algorithms, vol. 1 of Cambridge International Series on Parallel Computation. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, U.K., </address> <year> 1991. </year>
Reference-contexts: It has gained considerable interest in recent years, see for example <ref> [5, 11, 12, 20, 21, 32] </ref>. <p> The Global Virtual Time approximation problem consists of computing a suitable approximation of this function, as to be defined in this section. A treatment of the generalized problem, in which the domain of the monotonic function is an arbitrary partially ordered set, is given in <ref> [22, 29, 30, 32] </ref>. After defining the GVT problem, we show how termination detection and global virtual time approximation are related. This relation then leads to a general transformation of termination detection algorithms to GVT approximation algorithms. 3.1 The Global Virtual Time Problem Distributed Monotonic Computations. <p> A lower bound on GVT is also necessary to know when irrevocable actions (e.g., simulation animation or display of statistical results) can be committed. 3.2 The Relation between GVT and Termination Termination Expressed as Global Virtual Time. It has already been observed by Jefferson and others <ref> [16, 29, 32] </ref> that distributed termination detection is a special case of GVT approximation. <p> Conversely, however, it is also possible to check for a general distributed monotonic computation whether GV T has reached some threshold value t by using a termination detection algorithm <ref> [29, 32] </ref>. For that purpose, fix t 2 IR and divide IR in two intervals [1; t) and [t; 1], and call the first t-active and the second t-passive. <p> The resulting problem, of which termination detection and GVT approximation are instances, is called distributed infimum approximation. This problem was defined by Tel [30] and algorithms to approximate a distributed infimum were given in <ref> [30, 32] </ref>. It was already noted in [29] that a termination detection algorithm can be transformed to yield an algorithm for distributed infimum approximation. <p> The idea has also been sketched by Chandy and Sherman [7] although their resulting algorithm is not used for GVT approximation. Connections between termination detection and GVT approximation were made by Jefferson [16] and Tel <ref> [30, 32] </ref> and, as mentioned above, by Schoone and Tel [29]. The idea of using acknowledgements to catch the timestamps of in-transit messages in GVT approximation schemes was already used by Samadi et al. [27].
Reference: [33] <author> Tel, G., and Mattern, F. </author> <title> The derivation of termination detection algorithms from garbage collection schemes. </title> <type> Tech. Rep. </type> <institution> RUU-CS-90-24, University of Utrecht, Utrecht, </institution> <year> 1990. </year> <note> (Submitted to: ACM Trans. on Prog. </note> <author> Lang. and Syst.). </author> <month> 29 </month>
Reference-contexts: Section 5 contains some further remarks and generalizations. 2 2 Termination Detection Distributed termination detection is a "prototype problem" from the area of distributed computing, which is closely related to other important problems of the field, such as distributed garbage collection <ref> [33] </ref> and snapshot computation [6]. It has gained considerable interest in recent years, see for example [5, 11, 12, 20, 21, 32]. <p> A large number of termination detection algorithms have been published in recent years, and many of those published before 1987 are listed in the bibliography in [20]. As we showed in Section 4.3, our "sticky flag" algorithm (which was also derived in <ref> [33] </ref> when applying to Ben-Ari's garbage collection algorithm [4] a scheme that systematically transforms garbage collection algorithms into distributed termination detection algorithms) is similar to the termination detection algorithm by Dijkstra, Feijen, and van Gasteren [11].
References-found: 33

