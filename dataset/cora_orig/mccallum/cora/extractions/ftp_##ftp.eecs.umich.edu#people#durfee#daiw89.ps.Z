URL: ftp://ftp.eecs.umich.edu/people/durfee/daiw89.ps.Z
Refering-URL: http://ai.eecs.umich.edu/people/durfee/vita.html
Root-URL: http://www.cs.umich.edu
Email: durfee@caen.engin.umich.edu  
Title: MICE: A Flexible Testbed for Intelligent Coordination Experiments  
Author: Edmund H. Durfee and Thomas A. Montgomery 
Note: 0 This work was supported in part by a grant from the Rackham Graduate  
Address: Ann Arbor, MI 48103  
Affiliation: Artificial Intelligence Laboratory Dept. of Electrical Engineering and Computer Science University of Michigan  School at the University of Michigan.  
Abstract: We describe a flexible testbed for studying a variety of different coordination issues. The MICE (Michigan Intelligent Coordination Experiment) testbed extends previous experimental systems that model interactions between agents that inhabit a two-dimensional world. MICE allows an experimenter to specify the constraints and characteristics of an environment in which agents are simulated to act and interact, and does not assume any particular implementation of an agent's reasoning architecture. MICE therefore provides a platform for investigating and evaluating alternative reasoning architectures and coordination mechanisms in many different simulated environments. We outline the design of MICE and illustrate its flexibility by describing simulated environments that model predators chasing prey, predators attacking each other, agents fighting a fire, and diverse robots that are working together. We conclude by discussing how MICE will act as a foundation for our future research. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Benda, V. Jagannathan, and R. Dodhiawalla. </author> <title> On optimal cooperation of knowl edge sources. </title> <type> Technical Report BCS-G2010-28, </type> <institution> Boeing AI Center, Boeing Computer Services, Bellevue, WA, </institution> <month> August </month> <year> 1985. </year>
Reference-contexts: To overcome this limitation, we have developed a flexible testbed called MICE (Michigan Intelligent Coordination Experiment) that extends the ICE testbed developed at the University of Southern California [6] in which artificially intelligent agents interact on a two-dimensional grid <ref> [1, 4] </ref>. MICE retains this two-dimensional grid model of the world and adds a number of extensions that allow greater flexibility in the coordination issues that can be presented to the agents. <p> to simulate particular multi-agent environments and populate these with agents, we describe several simulations that we have implemented in MICE using 20 by 20 grids. 5.1 Predator-Prey The inspiration for the MICE environment sprang from previous work that simulates the interactions between predators and prey in a two-dimensional grid environment <ref> [1, 4, 6] </ref>. Although different implementations have all concentrated on the problem of how agents of one type (predators) can surround and capture agents of a second type (prey), the constraints and capabilities of the agents have slightly varied from one implementation to the next. <p> If the predators have initially divided into teams which are each too small to successfully surround prey, they can use heuristics involving measures such as the center of gravity <ref> [1] </ref> to decide which teams should be dissolved and which other teams should be enlarged. Our initial blackboard-based implementation has, not surprisingly, shown significant improvement over the much less sophisticated agents first developed. <p> This additional goal can cause major changes in agent behavior, and in team organization. For example, although we have not studied more centralized organizations where one of the team members coordinates and fully controls the other 3 in the capture of some prey <ref> [1, 6] </ref>, these are feasible organizations for predator-prey environments.

Reference: [3] <author> Lee D. Erman, Frederick Hayes-Roth, Victor R. Lesser, and D. Raj Reddy. </author> <title> The Hearsay-II speech-understanding system: Integrating knowledge to resolve uncertainty. </title> <journal> Computing Surveys, </journal> <volume> 12(2) </volume> <pages> 213-253, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: The increased latitude in how MICE agents can be implemented places a greater burden on the agents' developers, but allows experimentation with widely different architectures, including blackboard systems <ref> [3] </ref> and Soar [7]. Because MICE specifies only how agents interact indirectly through the environment, the agents' developers are free to specify how agents interact directly through communication.
Reference: [4] <author> Robert F. Franklin and Laurel A. Harmon. </author> <title> Elements of cooperative behavior. </title> <type> Technical report, </type> <institution> Environmental Research Institute of Michigan, </institution> <address> Ann Arbor, MI 48107, </address> <month> August </month> <year> 1987. </year>
Reference-contexts: To overcome this limitation, we have developed a flexible testbed called MICE (Michigan Intelligent Coordination Experiment) that extends the ICE testbed developed at the University of Southern California [6] in which artificially intelligent agents interact on a two-dimensional grid <ref> [1, 4] </ref>. MICE retains this two-dimensional grid model of the world and adds a number of extensions that allow greater flexibility in the coordination issues that can be presented to the agents. <p> to simulate particular multi-agent environments and populate these with agents, we describe several simulations that we have implemented in MICE using 20 by 20 grids. 5.1 Predator-Prey The inspiration for the MICE environment sprang from previous work that simulates the interactions between predators and prey in a two-dimensional grid environment <ref> [1, 4, 6] </ref>. Although different implementations have all concentrated on the problem of how agents of one type (predators) can surround and capture agents of a second type (prey), the constraints and capabilities of the agents have slightly varied from one implementation to the next.
Reference: [5] <author> Les Gasser, Carl Braganza, and Nava Herman. MACE: </author> <title> A flexible testbed for distributed AI research. </title> <editor> In Michael N. Huhns, editor, </editor> <booktitle> Distributed Artificial Intelligence, Research Notes in Artificial Intelligence, chapter 5, </booktitle> <pages> pages 119-152. </pages> <publisher> Pitman, </publisher> <year> 1987. </year>
Reference-contexts: MICE differs from previous generic DAI testbeds because of the minimal assumptions it makes about how agents are implemented. For example, the MACE <ref> [5] </ref> testbed provides a language for defining both agents and their environments, and provides many facilities for monitoring, error handling, and interacting with the user.
Reference: [6] <author> Les Gasser and Nicolas Rouquette. </author> <title> Representing and using organizational knowledge in distributed AI systems. </title> <booktitle> In Proceedings of the 1988 Distributed AI Workshop, </booktitle> <month> May </month> <year> 1988. </year>
Reference-contexts: To overcome this limitation, we have developed a flexible testbed called MICE (Michigan Intelligent Coordination Experiment) that extends the ICE testbed developed at the University of Southern California <ref> [6] </ref> in which artificially intelligent agents interact on a two-dimensional grid [1, 4]. MICE retains this two-dimensional grid model of the world and adds a number of extensions that allow greater flexibility in the coordination issues that can be presented to the agents. <p> to simulate particular multi-agent environments and populate these with agents, we describe several simulations that we have implemented in MICE using 20 by 20 grids. 5.1 Predator-Prey The inspiration for the MICE environment sprang from previous work that simulates the interactions between predators and prey in a two-dimensional grid environment <ref> [1, 4, 6] </ref>. Although different implementations have all concentrated on the problem of how agents of one type (predators) can surround and capture agents of a second type (prey), the constraints and capabilities of the agents have slightly varied from one implementation to the next. <p> It then moves toward the nearest of its goals. Not surprisingly, the performance of the predators was generally very poor, unless their initial distribution in the area led to fortuitous coordination. As has been discussed more fully elsewhere <ref> [6] </ref>, entrapping prey can require a great amount of coordination between predators|coordination that our original simple predators were not taking into consideration. <p> This additional goal can cause major changes in agent behavior, and in team organization. For example, although we have not studied more centralized organizations where one of the team members coordinates and fully controls the other 3 in the capture of some prey <ref> [1, 6] </ref>, these are feasible organizations for predator-prey environments.
Reference: [7] <author> John E. Laird, Allen Newell, and Paul S. Rosenbloom. </author> <title> SOAR: An architecture for general intelligence. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> pages 1-64, </pages> <year> 1987. </year>
Reference-contexts: The increased latitude in how MICE agents can be implemented places a greater burden on the agents' developers, but allows experimentation with widely different architectures, including blackboard systems [3] and Soar <ref> [7] </ref>. Because MICE specifies only how agents interact indirectly through the environment, the agents' developers are free to specify how agents interact directly through communication.
Reference: [8] <author> Victor R. Lesser and Daniel D. Corkill. </author> <title> The Distributed Vehicle Monitoring Testbed: A tool for investigating distributed problem solving networks. </title> <journal> AI Magazine, </journal> <volume> 4(3) </volume> <pages> 15-33, </pages> <month> Fall </month> <year> 1983. </year> <note> (Also published in Blackboard Systems, </note> <editor> Robert S. Engelmore and An-thony Morgan, </editor> <booktitle> editors, </booktitle> <pages> pages 353-386, </pages> <note> Addison-Wesley, 1988 and in Readings from AI Magazine: Volumes 1-5, </note> <editor> Robert Engelmore, </editor> <booktitle> editor, </booktitle> <pages> pages 69-85, </pages> <publisher> AAAI, </publisher> <address> Menlo Park, California, </address> <year> 1988). </year>
Reference-contexts: 1 Introduction Research in distributed problem solving has investigated several application domains, such as air traffic control [11], distributed vehicle monitoring <ref> [8, 10] </ref>, and factory floor control [9]. Each application emphasizes certain coordination issues.
Reference: [9] <author> H. Van Dyke Parunak. </author> <title> Manufacturing experience with the contract net. </title> <editor> In Michael N. Huhns, editor, </editor> <booktitle> Distributed Artificial Intelligence, Research Notes in Artificial Intelligence, chapter 10, </booktitle> <pages> pages 285-310. </pages> <publisher> Pitman, </publisher> <year> 1987. </year>
Reference-contexts: 1 Introduction Research in distributed problem solving has investigated several application domains, such as air traffic control [11], distributed vehicle monitoring [8, 10], and factory floor control <ref> [9] </ref>. Each application emphasizes certain coordination issues.
Reference: [10] <author> Reid G. Smith. </author> <title> The contract net protocol: High-level communication and control in a distributed problem solver. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-29(12):1104-1113, </volume> <month> December </month> <year> 1980. </year>
Reference-contexts: 1 Introduction Research in distributed problem solving has investigated several application domains, such as air traffic control [11], distributed vehicle monitoring <ref> [8, 10] </ref>, and factory floor control [9]. Each application emphasizes certain coordination issues. <p> For example, coordination is not achieved by starting with an artificially intelligent system and then giving it a coordination technique such as the Contract Net protocol <ref> [10] </ref>. Such an approach overlooks the fact that, to intelligently use this protocol, agents must internally reason about coordination. Deciding how and when to decompose, announce, award, and bid on tasks using the protocol is difficult and can require sophisticated reasoning about local and non-local goals, plans and constraints.
Reference: [11] <author> R. Steeb, S. Cammarata, S. Narain, J. Rothenburg, and W. Giarla. </author> <title> Cooperative intelligence for remotely piloted vehicle fleet control. </title> <type> Technical Report R-3408-ARPA, </type> <institution> Rand Corporation, </institution> <month> October </month> <year> 1986. </year>
Reference-contexts: 1 Introduction Research in distributed problem solving has investigated several application domains, such as air traffic control <ref> [11] </ref>, distributed vehicle monitoring [8, 10], and factory floor control [9]. Each application emphasizes certain coordination issues.
References-found: 10

