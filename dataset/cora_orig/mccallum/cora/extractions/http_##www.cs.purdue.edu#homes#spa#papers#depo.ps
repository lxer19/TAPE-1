URL: http://www.cs.purdue.edu/homes/spa/papers/depo.ps
Refering-URL: http://www.cs.purdue.edu/homes/spa/publications.html
Root-URL: http://www.cs.purdue.edu
Email: jacquet@blagny.inria.fr spa@cs.purdue.edu  
Title: ANALYTICAL DEPOISSONIZATION AND ITS APPLICATIONS May 3, 1997  
Author: Philippe Jacquet Wojciech Szpankowski 
Keyword: Key Words: Poissonization, depoissonization, Cauchy integral formula, saddle point method, limiting distributions, Mellin transform of complex variable, analytical combinatorics, analysis of algorithms and data structures, digital trees.  
Note: This work was partly supported by the Esprit Basic Research Action No. 7141 (Alcom II). The work of this author was supported by NSF Grants NSF CCR-9201078, NCR-9206315 and NCR 9415491, and NATO Collaborative Grant CRG.950060.  
Address: 78153 Le Chesnay Cedex W. Lafayette, IN 47907 France U.S.A.  
Affiliation: INRIA Department of Computer Science Rocquencourt Purdue University  
Abstract: In combinatorics and analysis of algorithms a Poisson version of a problem (henceforth called Poisson model or poissonization) is often easier to solve than the original one, which we name here the Bernoulli model. Poissonization is a technique that replaces the original input (e.g., think of balls thrown into urns) by a Poisson process (e.g., think of balls arriving according to a Poisson process into urns). More precisely, analytical Poisson transform maps a sequence (e.g., characterizing the Bernoulli model) into a generating function of a complex variable. However, after poissonization one must depoissonize in order to translate the results of the Poisson model into the original (i.e., Bernoulli) model. We present in this paper several analytical depoissonization results that fall into the following general scheme: If the Poisson transform has an appropriate growth in the complex plane, then an asymptotic expansion of the sequence can be expressed in terms of the Poisson transform and its derivatives evaluated on the real line. Not surprisingly, actual formulations of de-poissonization results depend on the nature of the growth of the Poisson transform, and thus we have polynomial and exponential depoissonization theorems. Normalization (e.g., as in the central limit theorem) introduces another twist that led us to formulate the so-called diagonal depoissonization theorems. Finally, we illustrate our results on numerous examples from combinatorics and the analysis of algorithms and data structures (e.g., combinatorial assemblies, digital trees, multiaccess protocols, probabilistic counting, selecting a leader, data compression, etc.). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Aldous, </author> <title> Probability Approximations via the Poisson Clumping Heuristic, </title> <publisher> Springer Verlag, </publisher> <address> New York 1989. </address>
Reference-contexts: To the best of our knowledge, poissonization was introduced by Marek Kac [34] who half a century ago investigated the deviations between theoretical and empirical distributions. Recently, poissonization was further popularized in the context of analysis of algorithms and combinatorial structures by Aldous <ref> [1] </ref>, Arratia and Tavare [2], Gonnet [20], Gonnet and Munro [21], Holst [23], Jacquet and Regnier [27], Jacquet and Szpankowski [28, 31], Rais et al. [47], Fill et al. [14], Kirschenhofer et al. [36], Poblete [44], and others. <p> We illustrate the above definition in the example below: Example 3. Functions belonging to D k (!). (i) Let f be infinitely differentiable on <ref> [1; 1] </ref>, and define f n (x) = f (xn ! ) on I n = [n ! ; n ! ]. <p> Thus I 0 = <ref> [0; 1] </ref>; I 1 = [1; 1 + q=p]; : : : . <p> Thus I 0 = [0; 1]; I 1 = <ref> [1; 1 + q=p] </ref>; : : : .
Reference: [2] <author> R. Arratia and S. Tavare, </author> <title> Independent Processes Approximations for Random Combinatorial Structures, </title> <booktitle> Advances in Mathematics, </booktitle> <volume> 104, </volume> <pages> 90-154, </pages> <year> 1994. </year> <month> 63 </month>
Reference-contexts: To the best of our knowledge, poissonization was introduced by Marek Kac [34] who half a century ago investigated the deviations between theoretical and empirical distributions. Recently, poissonization was further popularized in the context of analysis of algorithms and combinatorial structures by Aldous [1], Arratia and Tavare <ref> [2] </ref>, Gonnet [20], Gonnet and Munro [21], Holst [23], Jacquet and Regnier [27], Jacquet and Szpankowski [28, 31], Rais et al. [47], Fill et al. [14], Kirschenhofer et al. [36], Poblete [44], and others. Before we spell out more succinctly our depoissonization results, we first describe another scenario. <p> The Poisson distribution is hidding a little bit behind these formulas, but there is one as noted in <ref> [2] </ref>.
Reference: [3] <author> N. G. de Bruijn, </author> <title> Asymptotic Methods in Analysis, </title> <publisher> Dover, </publisher> <year> 1962. </year>
Reference-contexts: The lemma below is a well know result concerning the gaussian integral and can be found in textbooks (e.g., N. G. Bruijn <ref> [3] </ref>): Lemma 1 The following identities are true: 1 2 1 dx = &lt; 0 k = 1; 3; 5; : : : (k=2)!2 k+1=2 k = 2; 4; 6; : : : and Z 1 x k e tx 2 2 t 2 where is a positive number.
Reference: [4] <author> J. Capetanakis, </author> <title> Tree Algorithms for Packet Broadcast Channels. </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 25, </volume> <pages> 505-515, </pages> <year> 1979. </year>
Reference-contexts: When only one user sends a message, then a successful transmission takes place. Otherwise, there is a conflict, and all users involve in it must apply an algorithm to solve the conflict (i.e., conflict resolution algorithm). We consider two possible solution, namely: tree-type algorithm (cf. <ref> [4, 12, 11, 22, 42, 51, 54] </ref> and interval searching algorithm (cf. [5, 28, 56]).
Reference: [5] <author> J. Capetanakis, </author> <title> Generalized TDMA: The Multiaccessing Tree Protocol, </title> <journal> IEEE Trans. Communications, </journal> <volume> 27, </volume> <pages> 1476-1484, </pages> <year> 1979. </year>
Reference-contexts: Otherwise, there is a conflict, and all users involve in it must apply an algorithm to solve the conflict (i.e., conflict resolution algorithm). We consider two possible solution, namely: tree-type algorithm (cf. [4, 12, 11, 22, 42, 51, 54] and interval searching algorithm (cf. <ref> [5, 28, 56] </ref>). In the tree-type algorithm, all colliding users, say n of them, flip a biased coin and only those who got head are allowed to transmit in the next slot, while the others must wait until the former group solved their subconflicts. <p> Now, we briefly describe the interval searching algorithm (cf. <ref> [5, 28, 56] </ref>). This time access to the channel is controlled by a window based mechanism that we describe below. This window will be referred to as the enabled interval (EI). <p> Roughly speaking, at each step of the algorithm, we compute the endpoints of the EI based on the outcome of the channel. Details can be found in <ref> [5, 28, 56] </ref>. The parameters of interest are: the length of the conflict resolution interval T n , the fraction of resolved interval W n , and the number of resolved packets C n . To derive functional equations for these parameters, we immediately consider the Poisson model. <p> To derive functional equations for these parameters, we immediately consider the Poisson model. For example, e C (z) for C n satisfies (cf. <ref> [5, 28, 56] </ref>) e C (z) = 1 + (1 + z=2)e z=2 e C (z=2) : (5) Indeed, if there is at most one packet in the first half of EI which happens with probability (1 + z=2)e z=2 in the Poisson model then we explore the second half of
Reference: [6] <author> T.S. Chihara, </author> <title> An Introduction to Orthogonal Polynomials, </title> <publisher> Gordon and Breach, </publisher> <address> New York 1978. </address>
Reference-contexts: j2i with nonnegative powers leading to j 2i for non zero coefficients b ij , as desired. 18 (iii) The coefficients b ij and its generating function exp (x log (1 + y) xy) = (1 + y) x e xy are related to Poisson-Charlier polynomials and Laguerre polynomials (cf. <ref> [6] </ref>) as pointed to us by H-K. Hwang who also used them in a different setting (cf. [24]). Indeed, let us define B j (x) = P 1 i=0 b ij x i . <p> Then, B j (x) = [y j ] (e xy (1 + y) x ), and B j (x) is the Poisson-Charlier polynomial which are orthogonal with respect to the discrete measure that puts a weight Po (x) at the integers (cf. <ref> [6] </ref>). Thus, we have B j (x) = P n x (x) jk (jk)! . Also, B j (x) = L j (x) where L (ff) j (x) is the Laguerre polynomial.
Reference: [7] <author> L. Comtet, </author> <title> Advanced Combinatorics, </title> <address> D. </address> <publisher> Reidel Publishing Company, </publisher> <address> Boston 1974. </address>
Reference-contexts: In this case e G (z) = z ` , so we are in the framework of Theorem 2. We use the identity (n) ` = i=0 where the s (n; k)'s are the Stirling numbers of first kind (cf. <ref> [7] </ref>). It is known (cf. [7], Ex. 16, pp. 227) that s (`; ` i) = j=i+1 ` ! where s 2 (n; k) are defined as (cf. [7] Ex. 20 pp. 295) X s 2 (n; k)t n u k =n! = e tu (1 + t) u : (100) <p> In this case e G (z) = z ` , so we are in the framework of Theorem 2. We use the identity (n) ` = i=0 where the s (n; k)'s are the Stirling numbers of first kind (cf. <ref> [7] </ref>). It is known (cf. [7], Ex. 16, pp. 227) that s (`; ` i) = j=i+1 ` ! where s 2 (n; k) are defined as (cf. [7] Ex. 20 pp. 295) X s 2 (n; k)t n u k =n! = e tu (1 + t) u : (100) Noticing that G hji (n) <p> We use the identity (n) ` = i=0 where the s (n; k)'s are the Stirling numbers of first kind (cf. <ref> [7] </ref>). It is known (cf. [7], Ex. 16, pp. 227) that s (`; ` i) = j=i+1 ` ! where s 2 (n; k) are defined as (cf. [7] Ex. 20 pp. 295) X s 2 (n; k)t n u k =n! = e tu (1 + t) u : (100) Noticing that G hji (n) ` n `j , we finally obtain (n) ` = i=0 j=i+1 j = i=0 j=i+1 s 2 (j; j i) n ji
Reference: [8] <author> B. Davis, </author> <title> Integral Transforms and Their Applications, </title> <publisher> Springer Verlag, </publisher> <address> New York 1985. </address>
Reference-contexts: B Mellin Transform of a Complex Variable In various applications of poissonization/depoissonization (and also singularity analysis), one needs to deal with the Mellin transform of a complex analytical function. Since we did not find a proper reference to such an extension (except for some remarks in <ref> [8, 10] </ref>; see also [16, 26]), we add this appendix for completeness of the presentation. In the theorem below, we list basic facts about Mellin transform of a function f (x) of a real variable x.
Reference: [9] <author> L. Devroye, </author> <title> The Expected Length of the Longest Probe Sequence When the Distribution Is Not Uniform, </title> <journal> Journal of Algorithms, </journal> <volume> 6, </volume> <pages> 1-9, </pages> <year> 1985. </year>
Reference: [10] <author> G. Doetsch, </author> <title> Handbuch der Laplace Transformation, </title> <publisher> Verlag Birkhauser, </publisher> <address> Basel 1950. </address>
Reference-contexts: B Mellin Transform of a Complex Variable In various applications of poissonization/depoissonization (and also singularity analysis), one needs to deal with the Mellin transform of a complex analytical function. Since we did not find a proper reference to such an extension (except for some remarks in <ref> [8, 10] </ref>; see also [16, 26]), we add this appendix for completeness of the presentation. In the theorem below, we list basic facts about Mellin transform of a function f (x) of a real variable x. <p> In the theorem below, we list basic facts about Mellin transform of a function f (x) of a real variable x. Its proof is a classical one, and can be found in many places. e.g., <ref> [10, 16] </ref>. 60 Theorem 11 Let f (x) be a function defined for a non-negative real x such that f (x) = O (x c ) for x ! 0 and f (x) = O (x d ) for x ! 1.
Reference: [11] <author> G. Fayolle, P. Flajolet, M. Hofri and P. Jacquet, </author> <title> Analysis of Stack Algorithm for Random Multiple-Access Communication, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 31, </volume> <pages> 244-254, </pages> <year> 1985. </year>
Reference-contexts: When only one user sends a message, then a successful transmission takes place. Otherwise, there is a conflict, and all users involve in it must apply an algorithm to solve the conflict (i.e., conflict resolution algorithm). We consider two possible solution, namely: tree-type algorithm (cf. <ref> [4, 12, 11, 22, 42, 51, 54] </ref> and interval searching algorithm (cf. [5, 28, 56]).
Reference: [12] <author> G. Fayolle, P. Flajolet, and M. Hofri, </author> <title> On a Functional Equation Arising in the Analysis of a Protocol for a Multi-Access Broadcast Channel, </title> <journal> Adv. Appl. Prob., </journal> <volume> 18, </volume> <pages> 441-472, </pages> <year> 1986. </year>
Reference-contexts: When only one user sends a message, then a successful transmission takes place. Otherwise, there is a conflict, and all users involve in it must apply an algorithm to solve the conflict (i.e., conflict resolution algorithm). We consider two possible solution, namely: tree-type algorithm (cf. <ref> [4, 12, 11, 22, 42, 51, 54] </ref> and interval searching algorithm (cf. [5, 28, 56]). <p> Then: e L (z) = fi e L (zp) + fi e L (zq) + e A (z) l 0 e z l 1 ze z : (4) which becomes a linear additive functional equation extensively studied in <ref> [17, 12, 36, 41, 54, 55] </ref>. Now, we briefly describe the interval searching algorithm (cf. [5, 28, 56]). This time access to the channel is controlled by a window based mechanism that we describe below. This window will be referred to as the enabled interval (EI). <p> The reader is referred to <ref> [12, 51] </ref> for conditions on these functions under which a solution of (75) exists. <p> We further assume that p + q = 1 (cf. (4)), but in fact zp and zq could be replaced by more general functions that form a semigroup of substitutions under the operation of composition of functions (cf. <ref> [12, 51] </ref>). In passing, we observe that the above more general equation arises in non-blocking conflict resolution algorithms (cf. [12, 51]) and asymmetric leader election algorithm (cf. [33]). <p> = 1 (cf. (4)), but in fact zp and zq could be replaced by more general functions that form a semigroup of substitutions under the operation of composition of functions (cf. <ref> [12, 51] </ref>). In passing, we observe that the above more general equation arises in non-blocking conflict resolution algorithms (cf. [12, 51]) and asymmetric leader election algorithm (cf. [33]). Let us define for integers m = 0; 1; : : : and a constant such that 0 &lt; maxfp; qg 1 &lt; 1, a sequence of increasing domains (cf.
Reference: [13] <author> W. Feller, </author> <title> An Introduction to Probability Theory and Its Applications, </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1971. </year>
Reference: [14] <author> J. Fill. H. Mahmoud, and W. Szpankowski, </author> <title> On the Distribution for the Duration of a Randomized Leader Election Algorithm, </title> <journal> Ann. Appl. Probab., </journal> <volume> 6, </volume> <pages> 1260-1283, </pages> <year> 1996. </year>
Reference-contexts: Recently, poissonization was further popularized in the context of analysis of algorithms and combinatorial structures by Aldous [1], Arratia and Tavare [2], Gonnet [20], Gonnet and Munro [21], Holst [23], Jacquet and Regnier [27], Jacquet and Szpankowski [28, 31], Rais et al. [47], Fill et al. <ref> [14] </ref>, Kirschenhofer et al. [36], Poblete [44], and others. Before we spell out more succinctly our depoissonization results, we first describe another scenario. <p> we obtain the following differential-equations @D (z; u) = u (pD (zp; u) + qD (zq; u)) + 1 ; (14) dz @L (z; u) = L (zup; u)L (zuq; u) : (16) with H 0 (z) = (1 + z). 3.4 Leader Election Algorithm The following elimination process (cf. <ref> [14, 46] </ref>) has several applications, such as the election of a leader in a distributed or parallel system (a practise exercised when a token is lost 12 or when synchronization is lost in a token-passing ring-connected computer network). <p> If G n (u) = Eu H n denotes its probability generating function and e G (z; u) its Poisson generating function, then the following functional equation can be derived (cf. <ref> [14, 46] </ref>) G n (u) = 2 n k=0 n ! u uG n (u) e G (z; u) = u (1 + e z=2 ) e G z ; u + e z [(1 + z)(1 u) ue z=2 ] : (18) Furthermore, the Poisson mean e X (z) = <p> If u belongs to a compact set, then our previous depoissonization results can be directly applied. For example, we have the following two corollaries that are quite useful in some analysis (cf. <ref> [14, 33, 47] </ref>, and Sections 6.5-6.7). We again only consider linear cones. Corollary 1 Suppose e G k (z) = P 1 z n n! e z , for k belonging to some set K, are entire functions of z. <p> n = D + P (log n) + O (n 1 ) (which is stronger than in [28] where only O (1= p n) error term was established). 6.3 Leader Election Algorithm or Incomplete Tries In Section 3.4 we discussed a leader election algorithm due to Prodinger [46] (cf. also <ref> [14] </ref>). In [14] it was shown that the first moment e X (z) and the second factorial moment f W (z) of the number of steps required to elect a leader in the Poisson model satisfy the following functional equations (cf. (17)-(19)) e X (z) = e X (z=2)(1 + e <p> D + P (log n) + O (n 1 ) (which is stronger than in [28] where only O (1= p n) error term was established). 6.3 Leader Election Algorithm or Incomplete Tries In Section 3.4 we discussed a leader election algorithm due to Prodinger [46] (cf. also <ref> [14] </ref>). In [14] it was shown that the first moment e X (z) and the second factorial moment f W (z) of the number of steps required to elect a leader in the Poisson model satisfy the following functional equations (cf. (17)-(19)) e X (z) = e X (z=2)(1 + e z=2 ) <p> Indeed, in a cone S the authors of <ref> [14] </ref> proved that for large z and any R &gt; 0 e X (z) = log 2 z + 2 f W (z) = log 2 2 6 2fl 1 log 2 2 with ffi 1 () and ffi 2 () being fluctuating functions with small amplitudes. <p> This completes the depoissonization and leads to: Proposition 1 (Prodinger [46], Fill et al. <ref> [14] </ref>) Define L := ln 2 and k := 2ik=L. <p> Hereafter, we are interested in the limiting distribution of the height H n which represents the number of tosses before a leader is elected (cf. <ref> [14, 46] </ref>). <p> below for the reader's convenience e G (z; u) = u (1 + e z=2 ) e G z ; u + e z [(1 + z)(1 u) ue z=2 ] : Actually, using the Mellin transform approach, we can solve asymptotically the above for large z to obtain (cf. <ref> [14] </ref>) e G (z; u) = ln 2 where juj &lt; 1=2 and M is a large positive number, and ffi (z; u) is a fluctuating function with a small amplitude. The above can be used to obtain exact and asymptotic formul for the distribution of H n . <p> In particular, e G (z; u) = O (1) since 1 2 &lt; juj &lt; 1, and therefore by Theorem 10 we conclude that G (u) = e G (n; u) + O (n 1 ) (for details see <ref> [14] </ref>). Knowing that depoissonization of e G (z; u) works, we may ask about the limiting distri bution of H n . <p> = 1 2 flog 2 ngk1 + 1 X 2 j (flog 2 ngk) B 2j (2j)! n : The remaining sum is expressible in terms of the classical generating function of the Bernoulli numbers y = j=0 j! and this yields (with a new improved error term compared to <ref> [14] </ref>) Proposition 3 (Fill et al. [14]) Uniformly over all integers k, PrfH n blog 2 nc + kg = 2 flog 2 ngk exp (2 flog 2 ngk ) 1 + O 1 as n ! 1, where flog 2 ng = log 2 n blog 2 nc. <p> + 1 X 2 j (flog 2 ngk) B 2j (2j)! n : The remaining sum is expressible in terms of the classical generating function of the Bernoulli numbers y = j=0 j! and this yields (with a new improved error term compared to <ref> [14] </ref>) Proposition 3 (Fill et al. [14]) Uniformly over all integers k, PrfH n blog 2 nc + kg = 2 flog 2 ngk exp (2 flog 2 ngk ) 1 + O 1 as n ! 1, where flog 2 ng = log 2 n blog 2 nc. <p> Finally, we observe that the function flog 2 ng is dense on the interval [0; 1) but not uniformly dense, hence a limiting distribution of H n does not exist (but formula above presents the asymptotic distribution). The reader is referred to <ref> [14] </ref> for more details where the above result was derived for the first time ( but, with a weaker error term, namely O (1= n)). <p> Observe that for p = q = 1 2 we obtain F (x) = x j=1 x ; and our results coincide with those of <ref> [14] </ref> and our (94). 6.6 Probabilistic Counting In Section 3.5 we described a generalized probabilistic counting algorithm. We argued that to estimate the cardinality of set, one can measure a quantity R n;d whose generating function and Poisson generating function satisfy functional equations (21) and (22), respectively.
Reference: [15] <author> P. Flajolet and G.N. Martin, </author> <title> Probabilistic Counting Algorithms for Data Base Applications, </title> <journal> J. Comp. Syst. Sci., </journal> <volume> 31, </volume> <pages> 182-209, </pages> <year> 1985. </year>
Reference-contexts: 1)) satisfy the following functional equations: e X (z) = e X (z=2)(1 + e z=2 ) + 1 e z ze z (19) and Var H N = f W (z) + e X (z) [ e X (z)] 2 . 3.5 Generalized Probabilistic Counting In some applications (cf. <ref> [15] </ref>) one needs to estimate quickly the cardinality of a large set. A probabilistic counting is a possible solution. To estimate the cardinality n of a set (with replications) every element of the set is hashed into a binary string. <p> More precisely, the position of the leftmost zero in the bitmap string approximates log 2 n (for details see below and <ref> [15] </ref>). We consider a generalized probabilistic counting as in [36] in which the bitmap is (d+1)- ary string instead of a binary one, where d is an integer parameter of the scheme.
Reference: [16] <author> P. Flajolet, X. Gourdon, P. Dumas, </author> <title> Mellin Transforms and Asymptotics: Harmonic Sums, </title> <journal> Theoretical Computer Science, </journal> <volume> 144, </volume> <pages> 3-58, </pages> <year> 1995. </year>
Reference-contexts: This is possible since the sum in (74) falls under the so called harmonic sum that can be handled by the Mellin transform technique (cf. <ref> [16] </ref>). In general, this allows to derive an asymptotic solution to the above equation for z ! 1, and then "depoissonize" to recover the original sequence. <p> We use complex Mellin transform. Let `(z) = log '(z). Observe that (for d = 0) `(z) = log (1 e z ) + `(2z) : Hence, the Mellin ` fl (s) of `(z) exists in &lt;(s) 2 (0; 1) and it becomes (cf. <ref> [16] </ref>) ` fl (s) = (1 2 s ) There is a triple pole at s = 0 which gives us for z ! 0 (ignoring the fluctuating term) `(z) = 2 55 Thus '(z) = exp (`(z)) = exp ( 1 2 log 2 z 1 2 log z + <p> Since we did not find a proper reference to such an extension (except for some remarks in [8, 10]; see also <ref> [16, 26] </ref>), we add this appendix for completeness of the presentation. In the theorem below, we list basic facts about Mellin transform of a function f (x) of a real variable x. <p> In the theorem below, we list basic facts about Mellin transform of a function f (x) of a real variable x. Its proof is a classical one, and can be found in many places. e.g., <ref> [10, 16] </ref>. 60 Theorem 11 Let f (x) be a function defined for a non-negative real x such that f (x) = O (x c ) for x ! 0 and f (x) = O (x d ) for x ! 1.
Reference: [17] <author> P. Flajolet, M. Regnier and D. Sotteau, </author> <title> Algebraic Methods for Trie Statistics, </title> <journal> Annals of Discrete Mathematics, </journal> <volume> 25, </volume> <pages> 145-188, </pages> <year> 1985. </year>
Reference-contexts: Then: e L (z) = fi e L (zp) + fi e L (zq) + e A (z) l 0 e z l 1 ze z : (4) which becomes a linear additive functional equation extensively studied in <ref> [17, 12, 36, 41, 54, 55] </ref>. Now, we briefly describe the interval searching algorithm (cf. [5, 28, 56]). This time access to the channel is controlled by a window based mechanism that we describe below. This window will be referred to as the enabled interval (EI).
Reference: [18] <author> P. Flajolet and A. Odlyzko, </author> <title> Singularity Analysis of Generating Functions, </title> <journal> SIAM J. Disc. Methods, </journal> <volume> 3, </volume> <pages> 216-240, </pages> <year> 1990. </year>
Reference-contexts: In this case, one can either apply Cauchy residue theorem or the singularities analysis of Flajolet and Odlyzko <ref> [18] </ref>. This well known technique was used by the authors of [20, 21, 44, 45]. A challenging situation in analytical depoissonization arises when the Poisson transform e G (z) is entire (i.e., analytic in the whole complex plane), and consequently does not show any singularity in the complex plane.
Reference: [19] <author> P. Flajolet and B. Richmond, </author> <title> Generalized Digital Trees and Their Difference-Differential Equations, Random Structures & Algorithms, </title> <booktitle> 3, </booktitle> <pages> 305-320, </pages> <year> 1992. </year>
Reference-contexts: as 1 X fi n b (z2 n ; u)'(z2 n ; u) : (74) Solution (74) is often used to derive asymptotics of the functional equation (72), and in particular we used it to solve some problems discussed in Section 3 (e.g., (5) and (19)-(20)) as already presented in <ref> [19, 28, 36] </ref>. This is possible since the sum in (74) falls under the so called harmonic sum that can be handled by the Mellin transform technique (cf. [16]). <p> Let us analyze only the Poisson mean e X (z), however, we consider a more general differential-functional equation (arising in the analysis of the depth in a generalization of digital search trees known as b-digital search trees <ref> [19, 40] </ref>), namely: X hbi (z) = X (zp)e zq + X (zq)e zp + ze z where X hbi (z) denotes the bth derivative of X (z) = e X (z)e z .
Reference: [20] <author> G.H. </author> <title> Gonnet The Expected Length of the Longest Probe Sequence in Hash Code Searching J. </title> <journal> of the ACM, </journal> <volume> 28, </volume> <pages> 289-304, </pages> <year> 1981. </year> <month> 64 </month>
Reference-contexts: To the best of our knowledge, poissonization was introduced by Marek Kac [34] who half a century ago investigated the deviations between theoretical and empirical distributions. Recently, poissonization was further popularized in the context of analysis of algorithms and combinatorial structures by Aldous [1], Arratia and Tavare [2], Gonnet <ref> [20] </ref>, Gonnet and Munro [21], Holst [23], Jacquet and Regnier [27], Jacquet and Szpankowski [28, 31], Rais et al. [47], Fill et al. [14], Kirschenhofer et al. [36], Poblete [44], and others. Before we spell out more succinctly our depoissonization results, we first describe another scenario. <p> For example, this situation arises in a large class of algorithms involving a splitting process and/or digital trees (cf. [12, 14, 15, 26, 27, 28, 30, 31, 36, 37, 38, 41, 47, 48, 54, 55]), and hashing (cf. <ref> [20, 21] </ref>). Imbedding this splitting process into a Poisson process often leads to more tractable functional/differential equations. This was called by Gonnet and Munro [21] the Poisson Transform. We call this technique analytical poissonization. More formally, let g n be a characteristic of the Bernoulli model of size n. <p> Analytical depoissonization is well understood and relatively easy when the Poisson transform e G (z) is a meromorphic function (cf. <ref> [20, 21, 45] </ref>), that is, when the only singularities of e G (z) in the complex plane are either poles or algebraic singularities. In this case, one can either apply Cauchy residue theorem or the singularities analysis of Flajolet and Odlyzko [18]. <p> In this case, one can either apply Cauchy residue theorem or the singularities analysis of Flajolet and Odlyzko [18]. This well known technique was used by the authors of <ref> [20, 21, 44, 45] </ref>. A challenging situation in analytical depoissonization arises when the Poisson transform e G (z) is entire (i.e., analytic in the whole complex plane), and consequently does not show any singularity in the complex plane. <p> There is not much literature on analytical depoissonization, and most published results are tailored to specific problems. Exact analytical depoissonization for meromorphic functions (with simple singularities) was presented in <ref> [20, 21, 44] </ref>. Asymptotic analytical depoissonization for entire functions was initiated by Jacquet and Regnier in the analysis of limiting distributions of depth and size in tries [26, 27, 48]. <p> Indeed, assuming that we know e X (z), we can obtain EX n as the coefficient at z n =n! of X (z) = e X (z)e z . The reader is referred to <ref> [20, 22, 44] </ref> for some results on the exact or approximate "reverse" Poisson transform.
Reference: [21] <author> G. Gonnet and J. Munro, </author> <title> The Analysis of Linear Probing Sort by the Use of a New Mathematical Transform, </title> <journal> Journal of Algorithms, </journal> <volume> 5, </volume> <pages> 451-470, </pages> <year> 1984. </year>
Reference-contexts: Recently, poissonization was further popularized in the context of analysis of algorithms and combinatorial structures by Aldous [1], Arratia and Tavare [2], Gonnet [20], Gonnet and Munro <ref> [21] </ref>, Holst [23], Jacquet and Regnier [27], Jacquet and Szpankowski [28, 31], Rais et al. [47], Fill et al. [14], Kirschenhofer et al. [36], Poblete [44], and others. Before we spell out more succinctly our depoissonization results, we first describe another scenario. <p> For example, this situation arises in a large class of algorithms involving a splitting process and/or digital trees (cf. [12, 14, 15, 26, 27, 28, 30, 31, 36, 37, 38, 41, 47, 48, 54, 55]), and hashing (cf. <ref> [20, 21] </ref>). Imbedding this splitting process into a Poisson process often leads to more tractable functional/differential equations. This was called by Gonnet and Munro [21] the Poisson Transform. We call this technique analytical poissonization. More formally, let g n be a characteristic of the Bernoulli model of size n. <p> Imbedding this splitting process into a Poisson process often leads to more tractable functional/differential equations. This was called by Gonnet and Munro <ref> [21] </ref> the Poisson Transform. We call this technique analytical poissonization. More formally, let g n be a characteristic of the Bernoulli model of size n. <p> If e G (z) is known, then one can extract the coefficient g n = n! [z n ]( e G (z)e z ) (cf. <ref> [21, 22, 44] </ref>). However, in most interesting situations e G (z) satisfies a complicated functional/differential equation that is difficult to solve exactly. <p> Analytical depoissonization is well understood and relatively easy when the Poisson transform e G (z) is a meromorphic function (cf. <ref> [20, 21, 45] </ref>), that is, when the only singularities of e G (z) in the complex plane are either poles or algebraic singularities. In this case, one can either apply Cauchy residue theorem or the singularities analysis of Flajolet and Odlyzko [18]. <p> In this case, one can either apply Cauchy residue theorem or the singularities analysis of Flajolet and Odlyzko [18]. This well known technique was used by the authors of <ref> [20, 21, 44, 45] </ref>. A challenging situation in analytical depoissonization arises when the Poisson transform e G (z) is entire (i.e., analytic in the whole complex plane), and consequently does not show any singularity in the complex plane. <p> There is not much literature on analytical depoissonization, and most published results are tailored to specific problems. Exact analytical depoissonization for meromorphic functions (with simple singularities) was presented in <ref> [20, 21, 44] </ref>. Asymptotic analytical depoissonization for entire functions was initiated by Jacquet and Regnier in the analysis of limiting distributions of depth and size in tries [26, 27, 48]. <p> Equation (1) can be viewed as a definition of the Poisson transform e X (z) (cf. <ref> [21] </ref>) when it is analytically continued to complex z. Indeed, assuming that we know e X (z), we can obtain EX n as the coefficient at z n =n! of X (z) = e X (z)e z .
Reference: [22] <author> M. Hofri, </author> <title> Analysis of Algorithms, </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: If e G (z) is known, then one can extract the coefficient g n = n! [z n ]( e G (z)e z ) (cf. <ref> [21, 22, 44] </ref>). However, in most interesting situations e G (z) satisfies a complicated functional/differential equation that is difficult to solve exactly. <p> Indeed, assuming that we know e X (z), we can obtain EX n as the coefficient at z n =n! of X (z) = e X (z)e z . The reader is referred to <ref> [20, 22, 44] </ref> for some results on the exact or approximate "reverse" Poisson transform. <p> When only one user sends a message, then a successful transmission takes place. Otherwise, there is a conflict, and all users involve in it must apply an algorithm to solve the conflict (i.e., conflict resolution algorithm). We consider two possible solution, namely: tree-type algorithm (cf. <ref> [4, 12, 11, 22, 42, 51, 54] </ref> and interval searching algorithm (cf. [5, 28, 56]).
Reference: [23] <author> L. Holst, </author> <title> On Birthday, Collector's, Occupancy and other Classical Urn Problems, </title> <journal> International Statistical Review, </journal> <volume> 54, </volume> <pages> 15-27, </pages> <year> 1986. </year>
Reference-contexts: Recently, poissonization was further popularized in the context of analysis of algorithms and combinatorial structures by Aldous [1], Arratia and Tavare [2], Gonnet [20], Gonnet and Munro [21], Holst <ref> [23] </ref>, Jacquet and Regnier [27], Jacquet and Szpankowski [28, 31], Rais et al. [47], Fill et al. [14], Kirschenhofer et al. [36], Poblete [44], and others. Before we spell out more succinctly our depoissonization results, we first describe another scenario.
Reference: [24] <author> H-K. Hwang, </author> <title> Asymptotic Estimates of Elementary Probability Distributions, </title> <note> Studies in Applied Mathematics, to appear. </note>
Reference-contexts: Hwang who also used them in a different setting (cf. <ref> [24] </ref>). Indeed, let us define B j (x) = P 1 i=0 b ij x i . <p> Thus, we have B j (x) = P n x (x) jk (jk)! . Also, B j (x) = L j (x) where L (ff) j (x) is the Laguerre polynomial. Finally, as observed in Hwang <ref> [24] </ref>, the following recurrence on B j (x) can be established B 0 (x) = 1 ; B 1 (x) = 0 ; Similarly, one can compute recursively b ij = [x i ]B j (x) as follows: for all i; j 0 (j + 1)b i;j+1 = jb i;j b
Reference: [25] <author> P. </author> <type> Jacquet, </type> <institution> Contribution de l'Analyse d'Algorithmes a l'Evaluation de Protocoles de Communication, These Universite de Paris Sud-Orsay, </institution> <year> 1989. </year>
Reference-contexts: In fact, for many problems encountered in the analysis of algorithms log e G (z; u) increases in a polynomial manner (cf. <ref> [25, 26, 27, 31] </ref>, and Sections 6.8-6.9), thus e G (z; u) grows exponentially fast , and none of the theorems of previous sections can handle such a case. We need, therefore, another depoissonization result to handle these cases. <p> A technique we shall use to demonstrate such bounds for equation (72) was proposed for the first time in <ref> [25, 27] </ref>, and in a more formal way in [31, 47]. It is based on the mathematical induction over the so called increasing domains that we define next.
Reference: [26] <author> P. Jacquet and M. Regnier, </author> <title> Limiting Distributions for Trie Parameters, </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> 214, </volume> <pages> 196-210, </pages> <year> 1986. </year>
Reference-contexts: Exact analytical depoissonization for meromorphic functions (with simple singularities) was presented in [20, 21, 44]. Asymptotic analytical depoissonization for entire functions was initiated by Jacquet and Regnier in the analysis of limiting distributions of depth and size in tries <ref> [26, 27, 48] </ref>. They introduced the basic idea of the analytical depoissonization on an (implicit) solution of a specific non-linear functional equation, that is, the asymptotic analysis of a sequence of Cauchy integrals on the complex plane with saddle point-like estimates. <p> In fact, for many problems encountered in the analysis of algorithms log e G (z; u) increases in a polynomial manner (cf. <ref> [25, 26, 27, 31] </ref>, and Sections 6.8-6.9), thus e G (z; u) grows exponentially fast , and none of the theorems of previous sections can handle such a case. We need, therefore, another depoissonization result to handle these cases. <p> This result extends to PATRICIA trie similar results of Jacquet and Regnier <ref> [26] </ref>, and Jacquet and Szpankowski [29] (no poissonization/depoissonization was used) established for tries. One now must depoissonize (99) in order to establish the central limit law for the Bernoulli model. <p> Since we did not find a proper reference to such an extension (except for some remarks in [8, 10]; see also <ref> [16, 26] </ref>), we add this appendix for completeness of the presentation. In the theorem below, we list basic facts about Mellin transform of a function f (x) of a real variable x.
Reference: [27] <author> P. Jacquet and M. Regnier, </author> <title> Normal Limiting Distribution of the Size of Tries, </title> <booktitle> Proc. Performance'87, </booktitle> <pages> 209-223, </pages> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1987 </year>
Reference-contexts: Recently, poissonization was further popularized in the context of analysis of algorithms and combinatorial structures by Aldous [1], Arratia and Tavare [2], Gonnet [20], Gonnet and Munro [21], Holst [23], Jacquet and Regnier <ref> [27] </ref>, Jacquet and Szpankowski [28, 31], Rais et al. [47], Fill et al. [14], Kirschenhofer et al. [36], Poblete [44], and others. Before we spell out more succinctly our depoissonization results, we first describe another scenario. <p> Exact analytical depoissonization for meromorphic functions (with simple singularities) was presented in [20, 21, 44]. Asymptotic analytical depoissonization for entire functions was initiated by Jacquet and Regnier in the analysis of limiting distributions of depth and size in tries <ref> [26, 27, 48] </ref>. They introduced the basic idea of the analytical depoissonization on an (implicit) solution of a specific non-linear functional equation, that is, the asymptotic analysis of a sequence of Cauchy integrals on the complex plane with saddle point-like estimates. <p> In fact, for many problems encountered in the analysis of algorithms log e G (z; u) increases in a polynomial manner (cf. <ref> [25, 26, 27, 31] </ref>, and Sections 6.8-6.9), thus e G (z; u) grows exponentially fast , and none of the theorems of previous sections can handle such a case. We need, therefore, another depoissonization result to handle these cases. <p> A technique we shall use to demonstrate such bounds for equation (72) was proposed for the first time in <ref> [25, 27] </ref>, and in a more formal way in [31, 47]. It is based on the mathematical induction over the so called increasing domains that we define next. <p> Indeed, Jacquet and Regnier <ref> [27] </ref> (cf. also [48]) proved that log e S (z; u) exists and log e S (z; u) = O (z) inside a linear cone S for some 0 &lt; jj &lt; =2 and u complex in a neighbourhood of 1 (equivalently, by setting u = e t we consider t <p> We first observe that all assumptions of this theorem hold with = 1, - = 1 and ffi = 1: fi = 1=2 2 [1=2; 2=3 [. Thus: Proposition 7 (Jacquet and Regnier <ref> [27] </ref>) The normalized size of a trie that is, (S n ES n ) VarS n d where N (0; 1) is the standard normal distribution.
Reference: [28] <author> P. Jacquet and W. Szpankowski, </author> <title> Ultimate Characterization of the Burst Response of an Interval Searching Algorithm: A Study of a Functional Equation, </title> <journal> SIAM J. Comp., </journal> <volume> 18, </volume> <pages> 777-791, </pages> <year> 1989. </year>
Reference-contexts: Recently, poissonization was further popularized in the context of analysis of algorithms and combinatorial structures by Aldous [1], Arratia and Tavare [2], Gonnet [20], Gonnet and Munro [21], Holst [23], Jacquet and Regnier [27], Jacquet and Szpankowski <ref> [28, 31] </ref>, Rais et al. [47], Fill et al. [14], Kirschenhofer et al. [36], Poblete [44], and others. Before we spell out more succinctly our depoissonization results, we first describe another scenario. <p> This is called analytical depoissonization (which became one of the key tool for the analytical analysis of algorithms [14, 20, 21, 26, 27, 28, 36, 37, 41, 47, 48, 54, 55]) and analytical information theory <ref> [28, 31, 32, 38, 39, 40] </ref>). Analytical depoissonization is well understood and relatively easy when the Poisson transform e G (z) is a meromorphic function (cf. [20, 21, 45]), that is, when the only singularities of e G (z) in the complex plane are either poles or algebraic singularities. <p> They introduced the basic idea of the analytical depoissonization on an (implicit) solution of a specific non-linear functional equation, that is, the asymptotic analysis of a sequence of Cauchy integrals on the complex plane with saddle point-like estimates. Jacquet and Szpankowski <ref> [28, 31] </ref>, and 4 Rais et al. [47] extended this result in order to obtain a first general (simple) version of the depoissonization result. <p> Otherwise, there is a conflict, and all users involve in it must apply an algorithm to solve the conflict (i.e., conflict resolution algorithm). We consider two possible solution, namely: tree-type algorithm (cf. [4, 12, 11, 22, 42, 51, 54] and interval searching algorithm (cf. <ref> [5, 28, 56] </ref>). In the tree-type algorithm, all colliding users, say n of them, flip a biased coin and only those who got head are allowed to transmit in the next slot, while the others must wait until the former group solved their subconflicts. <p> Now, we briefly describe the interval searching algorithm (cf. <ref> [5, 28, 56] </ref>). This time access to the channel is controlled by a window based mechanism that we describe below. This window will be referred to as the enabled interval (EI). <p> Roughly speaking, at each step of the algorithm, we compute the endpoints of the EI based on the outcome of the channel. Details can be found in <ref> [5, 28, 56] </ref>. The parameters of interest are: the length of the conflict resolution interval T n , the fraction of resolved interval W n , and the number of resolved packets C n . To derive functional equations for these parameters, we immediately consider the Poisson model. <p> To derive functional equations for these parameters, we immediately consider the Poisson model. For example, e C (z) for C n satisfies (cf. <ref> [5, 28, 56] </ref>) e C (z) = 1 + (1 + z=2)e z=2 e C (z=2) : (5) Indeed, if there is at most one packet in the first half of EI which happens with probability (1 + z=2)e z=2 in the Poisson model then we explore the second half of <p> Iterating (71), we obtain a general solution of the above equation (cf. <ref> [28, 36, 54] </ref>) e G (z; u) = n=0 n Y a (z2 k ; u) (72) provided e G (0; u) = 0, and all the series above converge. Define '(z; u) = j=0 if the infinite product in (73) converges. <p> as 1 X fi n b (z2 n ; u)'(z2 n ; u) : (74) Solution (74) is often used to derive asymptotics of the functional equation (72), and in particular we used it to solve some problems discussed in Section 3 (e.g., (5) and (19)-(20)) as already presented in <ref> [19, 28, 36] </ref>. This is possible since the sum in (74) falls under the so called harmonic sum that can be handled by the Mellin transform technique (cf. [16]). <p> Let us, as an example, consider (5) which is repeated below e C (z) = 1 + (1 + z=2)e z=2 e C (z=2) : This equation is of the form of (71), thus has (72) as a solution. Jacquet and Szpankowski <ref> [28] </ref> proved that for large z 2 S the above equation attains asymptotically the following solution e C (z) = D + P (log z) + O (1=z) where D is a constant computed in [28], and P (log z) is a fluctuating function with a small amplitude. <p> Jacquet and Szpankowski <ref> [28] </ref> proved that for large z 2 S the above equation attains asymptotically the following solution e C (z) = D + P (log z) + O (1=z) where D is a constant computed in [28], and P (log z) is a fluctuating function with a small amplitude. Can we depoissonize this solution? One must check conditions (I) and (O) of Theorem 1. But, e C (z) = O (1) in a cone S by the results of [28] just cited, thus we need only to <p> where D is a constant computed in <ref> [28] </ref>, and P (log z) is a fluctuating function with a small amplitude. Can we depoissonize this solution? One must check conditions (I) and (O) of Theorem 1. But, e C (z) = O (1) in a cone S by the results of [28] just cited, thus we need only to verify (O) outside the cone S . <p> Thus, by Theorem 10 we conclude that C n = D + P (log n) + O (n 1 ) (which is stronger than in <ref> [28] </ref> where only O (1= p n) error term was established). 6.3 Leader Election Algorithm or Incomplete Tries In Section 3.4 we discussed a leader election algorithm due to Prodinger [46] (cf. also [14]).
Reference: [29] <author> P. Jacquet and W. Szpankowski, </author> <title> Analysis of Digital Tries with Markovian Dependency, </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 37, </volume> <pages> pp. </pages> <month> 1470-1475 </month> <year> (1991). </year>
Reference-contexts: This result extends to PATRICIA trie similar results of Jacquet and Regnier [26], and Jacquet and Szpankowski <ref> [29] </ref> (no poissonization/depoissonization was used) established for tries. One now must depoissonize (99) in order to establish the central limit law for the Bernoulli model. First all, an easy application of Theorem 6 leads us to ED n ~ e X (n) and Var D n ~ e V (n).
Reference: [30] <author> P. Jacquet and W. Szpankowski, </author> <title> Autocorrelation on Words and Its Applications. Analysis of Suffix Trees by String-Ruler Approach, </title> <journal> J. Combin.Theory Ser. A, </journal> <volume> 66, </volume> <pages> 237-269, </pages> <year> 1994. </year>
Reference: [31] <author> P. Jacquet and W. Szpankowski, </author> <title> Asymptotic Behavior of the Lempel-Ziv Parsing Scheme and Digital Search Trees, </title> <journal> Theoretical Computer Science, </journal> <volume> 144, </volume> <pages> 161-197, </pages> <year> 1995. </year>
Reference-contexts: Recently, poissonization was further popularized in the context of analysis of algorithms and combinatorial structures by Aldous [1], Arratia and Tavare [2], Gonnet [20], Gonnet and Munro [21], Holst [23], Jacquet and Regnier [27], Jacquet and Szpankowski <ref> [28, 31] </ref>, Rais et al. [47], Fill et al. [14], Kirschenhofer et al. [36], Poblete [44], and others. Before we spell out more succinctly our depoissonization results, we first describe another scenario. <p> This is called analytical depoissonization (which became one of the key tool for the analytical analysis of algorithms [14, 20, 21, 26, 27, 28, 36, 37, 41, 47, 48, 54, 55]) and analytical information theory <ref> [28, 31, 32, 38, 39, 40] </ref>). Analytical depoissonization is well understood and relatively easy when the Poisson transform e G (z) is a meromorphic function (cf. [20, 21, 45]), that is, when the only singularities of e G (z) in the complex plane are either poles or algebraic singularities. <p> They introduced the basic idea of the analytical depoissonization on an (implicit) solution of a specific non-linear functional equation, that is, the asymptotic analysis of a sequence of Cauchy integrals on the complex plane with saddle point-like estimates. Jacquet and Szpankowski <ref> [28, 31] </ref>, and 4 Rais et al. [47] extended this result in order to obtain a first general (simple) version of the depoissonization result. <p> Jacquet and Szpankowski [28, 31], and 4 Rais et al. [47] extended this result in order to obtain a first general (simple) version of the depoissonization result. The results of this paper have been partially motivated by our depoissonization results of <ref> [31] </ref>, where we dealt with a nonlinear multiplicative differential/functional equation, and some sophisticated tools had to be applied to solve the problem. However, to the best of our knowledge none of the results presented in this paper has been published before in its current form. <p> Such extensions are needed in some applications, e.g., for the analysis of the number of phrases in the Lempel-Ziv parsing algorithm <ref> [31, 59, 61, 60] </ref> and/or redundancy of the Lempel-Ziv code as discussed in [39, 61]. The next theorem refers to the first and second extensions discussed above. 17 Theorem 2 General Depoissonization Lemma. Consider a polynomial cone C (D; ffi) with 1=2 &lt; ffi 1. <p> In fact, for many problems encountered in the analysis of algorithms log e G (z; u) increases in a polynomial manner (cf. <ref> [25, 26, 27, 31] </ref>, and Sections 6.8-6.9), thus e G (z; u) grows exponentially fast , and none of the theorems of previous sections can handle such a case. We need, therefore, another depoissonization result to handle these cases. <p> A technique we shall use to demonstrate such bounds for equation (72) was proposed for the first time in [25, 27], and in a more formal way in <ref> [31, 47] </ref>. It is based on the mathematical induction over the so called increasing domains that we define next. <p> Section 3.3). The Poisson transform of Eu L n satisfies the differential-functional equation (16). One shows that the Poisson mean e X (z) = e G 0 (z; 1) and the Poisson second factorial moment f W (z) = e G 00 (z; 1) become (cf. <ref> [31] </ref>) e X (z) + e X 0 (z) = e X (zp) + e X (zq) + z ; (86) Using Mellin transform approach Jacquet and Szpankowski [31] proved that in a polynomial cone C (D; ffi) (ffi &gt; 1 2 ) z log z + h fl 1 + <p> e G 0 (z; 1) and the Poisson second factorial moment f W (z) = e G 00 (z; 1) become (cf. <ref> [31] </ref>) e X (z) + e X 0 (z) = e X (zp) + e X (zq) + z ; (86) Using Mellin transform approach Jacquet and Szpankowski [31] proved that in a polynomial cone C (D; ffi) (ffi &gt; 1 2 ) z log z + h fl 1 + 2h e V (z) = h 2 + h 3 flh + h 2 2 ffh hffi 1 (log z) ! where e V (z) = f W <p> Interestingly enough, the leading term in the variance of the Poisson model is cancelled resulting in Var L n = O (n log n) (instead of O (z log 2 z) as in the Poisson model). More precisely: 50 Proposition 2 (Jacquet and Szpankowski <ref> [31] </ref>) With the notation as above, we obtain EL n = h log n + 2h + h log n + 2h Var L n = h 3 n log n + O (n) (92) for p 6= q, where h = p log p q log q and h 2 <p> In passing, we should point out that that in the case p = q = 1 2 the variance is O (n) as proved in [35], and in fact the term in front of n contains a fluctuating function. We should add that the techniques of [35] and <ref> [31] </ref> are different even if both use Mellin transforms. 6.5 Leader Election Algorithm Revisited We refer to Section 3.4 or Section 6.3 above for a description of the problem. <p> Section 3.3). Its exponential generating function L (z; u) = e L (z; u)e z satisfies differential-functional multiplicative equation (16) that we repeat below @L (z; u) = L (puz; u)L (quz; u) : This equation was studied in Jacquet and Szpankowski <ref> [31] </ref> in order to determine the limiting distribution of the number of phrases in the Lempel-Ziv parsing scheme [61]. Interestingly enough, the growth of L (z; u) is quite complicated. It was proved in [31] that log L (z; u) exists and log L (z; u) = O (z (u)+" ) <p> u) = L (puz; u)L (quz; u) : This equation was studied in Jacquet and Szpankowski <ref> [31] </ref> in order to determine the limiting distribution of the number of phrases in the Lempel-Ziv parsing scheme [61]. Interestingly enough, the growth of L (z; u) is quite complicated. It was proved in [31] that log L (z; u) exists and log L (z; u) = O (z (u)+" ) for u in a real neighbourhood of 1 and z in a cone C (D; ffi) with ffi &lt; 1 arbitrary close to 1. <p> We should also add that that this problem motivated us to introduce polynomial cones. In such a cone C (D; ffi) with ffi &lt; 1 (but arbitrary close to ffi = 1 when u approaching 1), we shown in <ref> [31] </ref> that any derivative of log L (z; u) grows like O (z (u)+" ) for any " &gt; 0. <p> Thus, by Theorem 7 we immediately see that L N in the Poisson model is normally distributed with the rate of convergence O (z 1 2 +" ). Extension of the above result to the Bernoulli model requires substantial work as demonstrated in <ref> [31] </ref>. Fortunately, we can significantly simplify the proof by applying our Theorem 9. We first observe that (cf. <p> Thus fi = 1=2+" which belongs to [1=2"; 2=34=3"[ (it suffices to choose " small enough). Consequently, the external length in digital search trees is asymptotically normal in distribution and in moments. More formally: Proposition 8 (Jacquet and Szpankowski <ref> [31] </ref>) For arbitrary " &gt; 0 and real t e tEL n = V n E e tL n = V n = e 2 t 2 1 + O 1 1 where EL n is given by (90), and V n = Var L n is computed according to (92).
Reference: [32] <author> P. Jacquet and W. Szpankowski, </author> <title> Towards Analytical Information Theory: Entropy Computations, </title> <institution> Purdue University, CSD-TR-96-085, </institution> <year> 1996. </year>
Reference-contexts: This is called analytical depoissonization (which became one of the key tool for the analytical analysis of algorithms [14, 20, 21, 26, 27, 28, 36, 37, 41, 47, 48, 54, 55]) and analytical information theory <ref> [28, 31, 32, 38, 39, 40] </ref>). Analytical depoissonization is well understood and relatively easy when the Poisson transform e G (z) is a meromorphic function (cf. [20, 21, 45]), that is, when the only singularities of e G (z) in the complex plane are either poles or algebraic singularities. <p> This early result should be compared to several new findings of this paper. (ii) Recently, we proved in <ref> [32] </ref> that if the sequence g n has a polynomial growth (more precisely: the analytical continuation g (z) of g n such that g (n) = g n satisfies g (z) = O (z fi ) in a cone), then e G (z) automatically satisfies condition (O) outside the cone and
Reference: [33] <author> S. Janson and W. Szpankowski, </author> <title> Analysis of an Asymmetric Leader Election Algorithm, </title> <institution> Purdue University, CSD-TR-96-049, </institution> <year> 1996. </year>
Reference-contexts: If u belongs to a compact set, then our previous depoissonization results can be directly applied. For example, we have the following two corollaries that are quite useful in some analysis (cf. <ref> [14, 33, 47] </ref>, and Sections 6.5-6.7). We again only consider linear cones. Corollary 1 Suppose e G k (z) = P 1 z n n! e z , for k belonging to some set K, are entire functions of z. <p> In passing, we observe that the above more general equation arises in non-blocking conflict resolution algorithms (cf. [12, 51]) and asymmetric leader election algorithm (cf. <ref> [33] </ref>). Let us define for integers m = 0; 1; : : : and a constant such that 0 &lt; maxfp; qg 1 &lt; 1, a sequence of increasing domains (cf. <p> The reader is referred to [14] for more details where the above result was derived for the first time ( but, with a weaker error term, namely O (1= n)). An interesting extension was recently considered by Janson and Szpankowski <ref> [33] </ref> who analyzed the asymmetric leader election process in which p is the probability of survival 52 at each round (p 6= 1 2 ). <p> We observe that the Poisson transform e G k (z) = P n0 PrfH n = kg z n n! e z fulfills e G 0 (z) = ze z ; This yields the following solution as proved in <ref> [33] </ref> e G k (z) = p k z 0 where (t) is defined as follows: Partition the positive real axis into an infinite sequence of consecutive intervals I 0 ; I 1 ; ::: such that I k has length (q=p) s (k) , where s (k) is the number <p> This establishes condition (I). Conditions (O) can be proved in a similar manner (cf. <ref> [33] </ref> for details). Now, we are ready to apply Corollary 1 to arrive at, as already proved in [33]: Proposition 4 (Janson and Szpankowski [33]) The following holds, uniformly for all integers k, Prf (H n kg = F (p k n) + O (n 1 ); where F (x) is <p> This establishes condition (I). Conditions (O) can be proved in a similar manner (cf. <ref> [33] </ref> for details). Now, we are ready to apply Corollary 1 to arrive at, as already proved in [33]: Proposition 4 (Janson and Szpankowski [33]) The following holds, uniformly for all integers k, Prf (H n kg = F (p k n) + O (n 1 ); where F (x) is defined in (97). <p> This establishes condition (I). Conditions (O) can be proved in a similar manner (cf. <ref> [33] </ref> for details). Now, we are ready to apply Corollary 1 to arrive at, as already proved in [33]: Proposition 4 (Janson and Szpankowski [33]) The following holds, uniformly for all integers k, Prf (H n kg = F (p k n) + O (n 1 ); where F (x) is defined in (97).
Reference: [34] <author> M. Kac, </author> <title> On the Deviations between Theoretical and Empirical Distributions, </title> <booktitle> Proc. </booktitle> <institution> Natl. Acad. Sci. USA, </institution> <month> 35, </month> <pages> 252-257, </pages> <year> 1949. </year>
Reference-contexts: Observe, however, that poissonization has its own problems since one must "extract" the original results from the Poisson model, that is, depoissonize the Poisson model. To the best of our knowledge, poissonization was introduced by Marek Kac <ref> [34] </ref> who half a century ago investigated the deviations between theoretical and empirical distributions.
Reference: [35] <author> P. Kirschenhofer, H. Prodinger and W. Szpankowski, </author> <title> Digital Search Trees Again Revisited: The Internal Path Length Perspective, </title> <journal> SIAM J. Computing, </journal> <volume> 23, </volume> <pages> 598-616, </pages> <year> 1994. </year>
Reference-contexts: In passing, we should point out that that in the case p = q = 1 2 the variance is O (n) as proved in <ref> [35] </ref>, and in fact the term in front of n contains a fluctuating function. We should add that the techniques of [35] and [31] are different even if both use Mellin transforms. 6.5 Leader Election Algorithm Revisited We refer to Section 3.4 or Section 6.3 above for a description of the <p> In passing, we should point out that that in the case p = q = 1 2 the variance is O (n) as proved in <ref> [35] </ref>, and in fact the term in front of n contains a fluctuating function. We should add that the techniques of [35] and [31] are different even if both use Mellin transforms. 6.5 Leader Election Algorithm Revisited We refer to Section 3.4 or Section 6.3 above for a description of the problem.
Reference: [36] <author> P. Kirschenhofer, H. Prodinger and W. Szpankowski, </author> <title> Analysis of a Splitting Process Arising in Probabilistic Counting and Other Related Algorithms, Random Structures & Algorithms, </title> <booktitle> 9, </booktitle> <pages> 379-402, </pages> <year> 1996. </year> <month> 65 </month>
Reference-contexts: Recently, poissonization was further popularized in the context of analysis of algorithms and combinatorial structures by Aldous [1], Arratia and Tavare [2], Gonnet [20], Gonnet and Munro [21], Holst [23], Jacquet and Regnier [27], Jacquet and Szpankowski [28, 31], Rais et al. [47], Fill et al. [14], Kirschenhofer et al. <ref> [36] </ref>, Poblete [44], and others. Before we spell out more succinctly our depoissonization results, we first describe another scenario. <p> Then: e L (z) = fi e L (zp) + fi e L (zq) + e A (z) l 0 e z l 1 ze z : (4) which becomes a linear additive functional equation extensively studied in <ref> [17, 12, 36, 41, 54, 55] </ref>. Now, we briefly describe the interval searching algorithm (cf. [5, 28, 56]). This time access to the channel is controlled by a window based mechanism that we describe below. This window will be referred to as the enabled interval (EI). <p> More precisely, the position of the leftmost zero in the bitmap string approximates log 2 n (for details see below and [15]). We consider a generalized probabilistic counting as in <ref> [36] </ref> in which the bitmap is (d+1)- ary string instead of a binary one, where d is an integer parameter of the scheme. We can 13 describe this scheme as follows: Let us consider an empty bitmap string, that is, with all positions filled by zeros. <p> More precisely: R n;d = minfk : bitmap (k) &lt; d + 1 and for all 0 i &lt; k bitmap (i) = d + 1g : Let G n (u) = Eu R n;d , and e G (z; u) be its Poisson transform. As in <ref> [36] </ref> we observe that G n (u) = k=0 n ! nd1 X k 2 n G k (u) ; (21) where f d (z) = 1 e d (z)e z and e d (z) = 1 + 1! z d (23) is the truncated exponential function. 4 General Depoissonization Theorems <p> Iterating (71), we obtain a general solution of the above equation (cf. <ref> [28, 36, 54] </ref>) e G (z; u) = n=0 n Y a (z2 k ; u) (72) provided e G (0; u) = 0, and all the series above converge. Define '(z; u) = j=0 if the infinite product in (73) converges. <p> as 1 X fi n b (z2 n ; u)'(z2 n ; u) : (74) Solution (74) is often used to derive asymptotics of the functional equation (72), and in particular we used it to solve some problems discussed in Section 3 (e.g., (5) and (19)-(20)) as already presented in <ref> [19, 28, 36] </ref>. This is possible since the sum in (74) falls under the so called harmonic sum that can be handled by the Mellin transform technique (cf. [16]). <p> Let G n (u) = Eu R n;d , and e G (z; u) = Eu R N;d be the probability generating function and its Poisson transform, respectively. As in <ref> [36] </ref> we observe that e G (z; u) = uf d (z=2) e G (z=2; u) + (u 1)(f d (z=2) 1) ; where f d (z) = 1 e d (z)e z and e d (z) = 1 + z 1 1! + + z d d! is the truncated <p> Thus, by Corollary 1 we prove that PrfR n;d &gt; kg = '(n2 k1 ) '(n) + O (1=n), or more precisely we obtain the following result of <ref> [36] </ref> with a better error term (in [36] only O (n 1 2 +" ) error was established): Proposition 5 (Kirschenhofer et al. [36]) For any integer m PrfR n;d log 2 n + m 1g = 1 ' 2 mflog 2 ng where flog ng = log n blog nc. <p> Thus, by Corollary 1 we prove that PrfR n;d &gt; kg = '(n2 k1 ) '(n) + O (1=n), or more precisely we obtain the following result of <ref> [36] </ref> with a better error term (in [36] only O (n 1 2 +" ) error was established): Proposition 5 (Kirschenhofer et al. [36]) For any integer m PrfR n;d log 2 n + m 1g = 1 ' 2 mflog 2 ng where flog ng = log n blog nc. 6.7 Depth in a PATRICIA Trie We <p> by Corollary 1 we prove that PrfR n;d &gt; kg = '(n2 k1 ) '(n) + O (1=n), or more precisely we obtain the following result of <ref> [36] </ref> with a better error term (in [36] only O (n 1 2 +" ) error was established): Proposition 5 (Kirschenhofer et al. [36]) For any integer m PrfR n;d log 2 n + m 1g = 1 ' 2 mflog 2 ng where flog ng = log n blog nc. 6.7 Depth in a PATRICIA Trie We illustrate in this subsection a usage of the "diagonal depoissonization" with a polynomial bound inside a
Reference: [37] <author> D. Knuth, </author> <title> The Art of Computer Programming. Sorting and Searching, </title> <note> Vol. 3., Addison--Wesley 1973. </note>
Reference-contexts: We assume a binary alphabet, and we think of a key (string) as a (possibly infinite) sequence of zeros and ones (cf. <ref> [37, 41] </ref>). There are three types of digital trees, namely: trie, Patricia trie (PAT), and digital search tree (DST). In tries and Patricia tries the keys are stored in external nodes while internal nodes are used only to branch out. <p> In other words, the access path from the root to an external node (a leaf of a trie) is the minimal prefix of the information contained in this external node; it is minimal in the sense that this prefix is not a prefix of any other strings (cf. <ref> [37, 41] </ref>). In Patricia tries all unary nodes are collapsed into one, that is, Patricia is a binary tree with all internal nodes having degree two.
Reference: [38] <author> G. Louchard and W. Szpankowski, </author> <title> Average Profile and Limiting Distribution for a Phrase Size in the Lempel-Ziv Parsing Algorithm, </title> <journal> IEEE Information Theory, </journal> <volume> 41, </volume> <pages> 478-488, </pages> <year> 1995. </year>
Reference-contexts: This is called analytical depoissonization (which became one of the key tool for the analytical analysis of algorithms [14, 20, 21, 26, 27, 28, 36, 37, 41, 47, 48, 54, 55]) and analytical information theory <ref> [28, 31, 32, 38, 39, 40] </ref>). Analytical depoissonization is well understood and relatively easy when the Poisson transform e G (z) is a meromorphic function (cf. [20, 21, 45]), that is, when the only singularities of e G (z) in the complex plane are either poles or algebraic singularities.
Reference: [39] <author> G. Louchard and W. Szpankowski, </author> <title> On the Average Redundancy Rate of the Lempel-Ziv Code, </title> <journal> IEEE Information Theory, </journal> <volume> 43, </volume> <pages> 2-8, </pages> <year> 1997. </year>
Reference-contexts: This is called analytical depoissonization (which became one of the key tool for the analytical analysis of algorithms [14, 20, 21, 26, 27, 28, 36, 37, 41, 47, 48, 54, 55]) and analytical information theory <ref> [28, 31, 32, 38, 39, 40] </ref>). Analytical depoissonization is well understood and relatively easy when the Poisson transform e G (z) is a meromorphic function (cf. [20, 21, 45]), that is, when the only singularities of e G (z) in the complex plane are either poles or algebraic singularities. <p> Such extensions are needed in some applications, e.g., for the analysis of the number of phrases in the Lempel-Ziv parsing algorithm [31, 59, 61, 60] and/or redundancy of the Lempel-Ziv code as discussed in <ref> [39, 61] </ref>. The next theorem refers to the first and second extensions discussed above. 17 Theorem 2 General Depoissonization Lemma. Consider a polynomial cone C (D; ffi) with 1=2 &lt; ffi 1.
Reference: [40] <author> G. Louchard, W. Szpankowski, and J. Tang, </author> <title> Average Profile for the Generalized Digital Search Trees and the Generalized Lempel-Ziv Algorithm, </title> <journal> SIAM J. Computing, </journal> <note> to appear. </note>
Reference-contexts: This is called analytical depoissonization (which became one of the key tool for the analytical analysis of algorithms [14, 20, 21, 26, 27, 28, 36, 37, 41, 47, 48, 54, 55]) and analytical information theory <ref> [28, 31, 32, 38, 39, 40] </ref>). Analytical depoissonization is well understood and relatively easy when the Poisson transform e G (z) is a meromorphic function (cf. [20, 21, 45]), that is, when the only singularities of e G (z) in the complex plane are either poles or algebraic singularities. <p> Let us analyze only the Poisson mean e X (z), however, we consider a more general differential-functional equation (arising in the analysis of the depth in a generalization of digital search trees known as b-digital search trees <ref> [19, 40] </ref>), namely: X hbi (z) = X (zp)e zq + X (zq)e zp + ze z where X hbi (z) denotes the bth derivative of X (z) = e X (z)e z .
Reference: [41] <author> H. Mahmoud, </author> <title> Evolution of Random Search Trees, </title> <publisher> John Wiley & Sons, </publisher> <address> New York 1992. </address>
Reference-contexts: Then: e L (z) = fi e L (zp) + fi e L (zq) + e A (z) l 0 e z l 1 ze z : (4) which becomes a linear additive functional equation extensively studied in <ref> [17, 12, 36, 41, 54, 55] </ref>. Now, we briefly describe the interval searching algorithm (cf. [5, 28, 56]). This time access to the channel is controlled by a window based mechanism that we describe below. This window will be referred to as the enabled interval (EI). <p> We assume a binary alphabet, and we think of a key (string) as a (possibly infinite) sequence of zeros and ones (cf. <ref> [37, 41] </ref>). There are three types of digital trees, namely: trie, Patricia trie (PAT), and digital search tree (DST). In tries and Patricia tries the keys are stored in external nodes while internal nodes are used only to branch out. <p> In other words, the access path from the root to an external node (a leaf of a trie) is the minimal prefix of the information contained in this external node; it is minimal in the sense that this prefix is not a prefix of any other strings (cf. <ref> [37, 41] </ref>). In Patricia tries all unary nodes are collapsed into one, that is, Patricia is a binary tree with all internal nodes having degree two.
Reference: [42] <author> P. Mathys, P. Flajolet, </author> <title> Q-ary Collision Resolution Algorithms in Random-Access Systems with Free and Blocked Channel Access, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 31, </volume> <pages> 217-243, </pages> <year> 1985. </year>
Reference-contexts: When only one user sends a message, then a successful transmission takes place. Otherwise, there is a conflict, and all users involve in it must apply an algorithm to solve the conflict (i.e., conflict resolution algorithm). We consider two possible solution, namely: tree-type algorithm (cf. <ref> [4, 12, 11, 22, 42, 51, 54] </ref> and interval searching algorithm (cf. [5, 28, 56]). <p> Clearly, L n satisfies the following recurrence L n = 1 + k=0 n ! with L 0 = L 1 = 1. Actually, there are several modifications to the basic tree-type algorithm (cf. <ref> [42, 54] </ref>) that lead to a more general recurrence. Namely: given L 0 and L 1 L n = a n + fi k=0 n ! where a n is a given sequence (also called the additive term), and fi &gt; 0 is constant.
Reference: [43] <author> A. Odlyzko, </author> <title> Asymptotic Enumeration, </title> <booktitle> in Handbook of Combinatorics, </booktitle> <volume> Vol. II, </volume> <editor> (Eds. R. Graham, M. Gotschel and L. Lovasz), </editor> <publisher> Elsevier Science, </publisher> <pages> 1063-1229, </pages> <year> 1995. </year>
Reference: [44] <author> P. V., Poblete, </author> <title> Approximating Functions by Their Poisson Transform, </title> <journal> Information Processing Letters, </journal> <volume> 23, </volume> <pages> 127-130, </pages> <year> 1986. </year>
Reference-contexts: was further popularized in the context of analysis of algorithms and combinatorial structures by Aldous [1], Arratia and Tavare [2], Gonnet [20], Gonnet and Munro [21], Holst [23], Jacquet and Regnier [27], Jacquet and Szpankowski [28, 31], Rais et al. [47], Fill et al. [14], Kirschenhofer et al. [36], Poblete <ref> [44] </ref>, and others. Before we spell out more succinctly our depoissonization results, we first describe another scenario. In the analysis of algorithms and/or enumeration of combinatorial structures, the original problem which we further call the Bernoulli model is often represented by a recurrence equation or by a functional/differential equation. <p> If e G (z) is known, then one can extract the coefficient g n = n! [z n ]( e G (z)e z ) (cf. <ref> [21, 22, 44] </ref>). However, in most interesting situations e G (z) satisfies a complicated functional/differential equation that is difficult to solve exactly. <p> In this case, one can either apply Cauchy residue theorem or the singularities analysis of Flajolet and Odlyzko [18]. This well known technique was used by the authors of <ref> [20, 21, 44, 45] </ref>. A challenging situation in analytical depoissonization arises when the Poisson transform e G (z) is entire (i.e., analytic in the whole complex plane), and consequently does not show any singularity in the complex plane. <p> There is not much literature on analytical depoissonization, and most published results are tailored to specific problems. Exact analytical depoissonization for meromorphic functions (with simple singularities) was presented in <ref> [20, 21, 44] </ref>. Asymptotic analytical depoissonization for entire functions was initiated by Jacquet and Regnier in the analysis of limiting distributions of depth and size in tries [26, 27, 48]. <p> Indeed, assuming that we know e X (z), we can obtain EX n as the coefficient at z n =n! of X (z) = e X (z)e z . The reader is referred to <ref> [20, 22, 44] </ref> for some results on the exact or approximate "reverse" Poisson transform.
Reference: [45] <author> P. Poblete, A. Viola and J.I. Munro, </author> <title> The Diagonal Poisson Transform and its Application to the Analysis of a Hashing Scheme, Random Structures & Algorithms, </title> <booktitle> 10, </booktitle> <pages> 221-256, </pages> <year> 1997. </year>
Reference-contexts: Analytical depoissonization is well understood and relatively easy when the Poisson transform e G (z) is a meromorphic function (cf. <ref> [20, 21, 45] </ref>), that is, when the only singularities of e G (z) in the complex plane are either poles or algebraic singularities. In this case, one can either apply Cauchy residue theorem or the singularities analysis of Flajolet and Odlyzko [18]. <p> In this case, one can either apply Cauchy residue theorem or the singularities analysis of Flajolet and Odlyzko [18]. This well known technique was used by the authors of <ref> [20, 21, 44, 45] </ref>. A challenging situation in analytical depoissonization arises when the Poisson transform e G (z) is entire (i.e., analytic in the whole complex plane), and consequently does not show any singularity in the complex plane. <p> Then, e G (z) = e F (pz) e H (qz). Table 1 summarizes these findings, however, a more complete list of properties can be found in <ref> [45] </ref>. An astute reader may have concluded that g n is asymptotically equivalent to e G (n) (i.e., g n ~ e G (n)) when n ! 1 in all cases in Table 1 except when g n = ff n (think of ff = 1).
Reference: [46] <author> H. Prodinger, </author> <title> How to Select a Loser. </title> <journal> Discrete Math., </journal> <volume> 120, </volume> <pages> 149-159, </pages> <year> 1993. </year>
Reference-contexts: we obtain the following differential-equations @D (z; u) = u (pD (zp; u) + qD (zq; u)) + 1 ; (14) dz @L (z; u) = L (zup; u)L (zuq; u) : (16) with H 0 (z) = (1 + z). 3.4 Leader Election Algorithm The following elimination process (cf. <ref> [14, 46] </ref>) has several applications, such as the election of a leader in a distributed or parallel system (a practise exercised when a token is lost 12 or when synchronization is lost in a token-passing ring-connected computer network). <p> It is easy to notice that this election process can be represented by a special trie which was named by Prodinger <ref> [46] </ref> the incomplete trie since only one side of this tree is developed. <p> If G n (u) = Eu H n denotes its probability generating function and e G (z; u) its Poisson generating function, then the following functional equation can be derived (cf. <ref> [14, 46] </ref>) G n (u) = 2 n k=0 n ! u uG n (u) e G (z; u) = u (1 + e z=2 ) e G z ; u + e z [(1 + z)(1 u) ue z=2 ] : (18) Furthermore, the Poisson mean e X (z) = <p> conclude that C n = D + P (log n) + O (n 1 ) (which is stronger than in [28] where only O (1= p n) error term was established). 6.3 Leader Election Algorithm or Incomplete Tries In Section 3.4 we discussed a leader election algorithm due to Prodinger <ref> [46] </ref> (cf. also [14]). <p> This completes the depoissonization and leads to: Proposition 1 (Prodinger <ref> [46] </ref>, Fill et al. [14]) Define L := ln 2 and k := 2ik=L. <p> Hereafter, we are interested in the limiting distribution of the height H n which represents the number of tosses before a leader is elected (cf. <ref> [14, 46] </ref>).
Reference: [47] <author> B. Rais, P. Jacquet and W. Szpankowski, </author> <title> A Limiting Distribution for the Depth in PATRICIA Tries, </title> <journal> SIAM J. Discrete Mathematics, </journal> <volume> 6, </volume> <pages> 197-213, </pages> <year> 1993. </year>
Reference-contexts: Recently, poissonization was further popularized in the context of analysis of algorithms and combinatorial structures by Aldous [1], Arratia and Tavare [2], Gonnet [20], Gonnet and Munro [21], Holst [23], Jacquet and Regnier [27], Jacquet and Szpankowski [28, 31], Rais et al. <ref> [47] </ref>, Fill et al. [14], Kirschenhofer et al. [36], Poblete [44], and others. Before we spell out more succinctly our depoissonization results, we first describe another scenario. <p> They introduced the basic idea of the analytical depoissonization on an (implicit) solution of a specific non-linear functional equation, that is, the asymptotic analysis of a sequence of Cauchy integrals on the complex plane with saddle point-like estimates. Jacquet and Szpankowski [28, 31], and 4 Rais et al. <ref> [47] </ref> extended this result in order to obtain a first general (simple) version of the depoissonization result. <p> Remark 1. (i) As mentioned in the introduction, analytical depoissonization was initialized by Jacquet and Regnier on an (implicit) solution of a specific non-linear functional equation (cf. Sections 6.8). The first general depoissonization lemma was probably formulated in Rais et al. <ref> [47] </ref>: The authors of [47] gave (a non rigorous) proof of the following: Under conditions (I) and (O) of Theorem 1 one concludes that g n = e G (n) + O (n fi 1 2 ). <p> Remark 1. (i) As mentioned in the introduction, analytical depoissonization was initialized by Jacquet and Regnier on an (implicit) solution of a specific non-linear functional equation (cf. Sections 6.8). The first general depoissonization lemma was probably formulated in Rais et al. <ref> [47] </ref>: The authors of [47] gave (a non rigorous) proof of the following: Under conditions (I) and (O) of Theorem 1 one concludes that g n = e G (n) + O (n fi 1 2 ). <p> If u belongs to a compact set, then our previous depoissonization results can be directly applied. For example, we have the following two corollaries that are quite useful in some analysis (cf. <ref> [14, 33, 47] </ref>, and Sections 6.5-6.7). We again only consider linear cones. Corollary 1 Suppose e G k (z) = P 1 z n n! e z , for k belonging to some set K, are entire functions of z. <p> A technique we shall use to demonstrate such bounds for equation (72) was proposed for the first time in [25, 27], and in a more formal way in <ref> [31, 47] </ref>. It is based on the mathematical induction over the so called increasing domains that we define next. <p> Furthermore, for p 6= q the asymptotic behavior of e D (z; u) inside a cone S (z ! 1) is determined by the first two terms of the above equation. Using Mellin 56 transform Rais et al. <ref> [47] </ref> proved that for large z the Poisson depth is normal, that is, for z large in a cone S , and u = e t where t is complex we have: e t e X (z)=(z) e D (z; e t=(z) ) = e t 2 =2 (1 + O <p> Thus, the mathematical induction over increasing domains works in this case, too, and we can conclude as the authors of <ref> [47] </ref> that e D (z; u) = O (z " ) for any " &gt; 0 inside a cone S for z large. This actually completes the depoissonization, and by Corollary 2 we arrive at (cf. [47]): Proposition 6 (Rais et al. [47]) For complex t e tED n = Var <p> domains works in this case, too, and we can conclude as the authors of <ref> [47] </ref> that e D (z; u) = O (z " ) for any " &gt; 0 inside a cone S for z large. This actually completes the depoissonization, and by Corollary 2 we arrive at (cf. [47]): Proposition 6 (Rais et al. [47]) For complex t e tED n = Var D n Ee tD n = Var D n = e t 2 =2 (1 + O (1= log n)) ; that is, (D n ED n )= p Var D n converges in distribution and <p> and we can conclude as the authors of <ref> [47] </ref> that e D (z; u) = O (z " ) for any " &gt; 0 inside a cone S for z large. This actually completes the depoissonization, and by Corollary 2 we arrive at (cf. [47]): Proposition 6 (Rais et al. [47]) For complex t e tED n = Var D n Ee tD n = Var D n = e t 2 =2 (1 + O (1= log n)) ; that is, (D n ED n )= p Var D n converges in distribution and in moments to the standard normal
Reference: [48] <author> M. Regnier and P. Jacquet, </author> <title> New Results on the Size of Tries, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 35, </volume> <month> 203-205 </month> <year> (1989). </year>
Reference-contexts: Exact analytical depoissonization for meromorphic functions (with simple singularities) was presented in [20, 21, 44]. Asymptotic analytical depoissonization for entire functions was initiated by Jacquet and Regnier in the analysis of limiting distributions of depth and size in tries <ref> [26, 27, 48] </ref>. They introduced the basic idea of the analytical depoissonization on an (implicit) solution of a specific non-linear functional equation, that is, the asymptotic analysis of a sequence of Cauchy integrals on the complex plane with saddle point-like estimates. <p> Indeed, Jacquet and Regnier [27] (cf. also <ref> [48] </ref>) proved that log e S (z; u) exists and log e S (z; u) = O (z) inside a linear cone S for some 0 &lt; jj &lt; =2 and u complex in a neighbourhood of 1 (equivalently, by setting u = e t we consider t in a complex <p> Furthermore, Regnier and Jacquet <ref> [48] </ref> proved that Poisson mean e X (z) = O (z), Poisson variance e V (z) = O (z log z), and the remainder R (z; t) = O (z), thus log e S (z; e t ) = t e X (z) + t 2 e V (z)=2 + t
Reference: [49] <author> R. Remmert, </author> <title> Theory of Complex Functions, </title> <publisher> Springer Verlag, </publisher> <address> New York 1991. </address>
Reference-contexts: Observe that @ log e G (z; 1) = e X (z) ; @u 2 log e G (z; 1) = e V (z) e X (z) : The remainder can be expressed as (cf. <ref> [49] </ref>) R (z; u) = 2i log e G (z; v) Now, we apply (61) to the above to find R (z; u) = O ((u 1) 3 A (z)) which, after substitution u = e t=(z) , finally leads to e G z; e t=(z) e t e X (z)=(z)
Reference: [50] <author> S. Ross, </author> <title> Stochastic Processes, </title> <publisher> John Wiley & Sons, </publisher> <address> New York 1983. </address>
Reference-contexts: One may ask why the Poisson process? Why not to imbed our Bernoulli model into another process? This seems to be a consequence of certain unique properties of the Poisson process, namely: It is the only process that has stationary and independent increments, and which is orderliness (no group arrives) <ref> [50] </ref>.
Reference: [51] <author> U. Schmid, </author> <title> The Average CRI-length of a Tree Collision Resolution Algorithm in Presence of Multiplicity-Dependent Capture Effects, </title> <booktitle> Proc. ICALP 92, Vienna, </booktitle> <pages> 223-234, </pages> <year> 1992. </year>
Reference-contexts: When only one user sends a message, then a successful transmission takes place. Otherwise, there is a conflict, and all users involve in it must apply an algorithm to solve the conflict (i.e., conflict resolution algorithm). We consider two possible solution, namely: tree-type algorithm (cf. <ref> [4, 12, 11, 22, 42, 51, 54] </ref> and interval searching algorithm (cf. [5, 28, 56]). <p> The reader is referred to <ref> [12, 51] </ref> for conditions on these functions under which a solution of (75) exists. <p> We further assume that p + q = 1 (cf. (4)), but in fact zp and zq could be replaced by more general functions that form a semigroup of substitutions under the operation of composition of functions (cf. <ref> [12, 51] </ref>). In passing, we observe that the above more general equation arises in non-blocking conflict resolution algorithms (cf. [12, 51]) and asymmetric leader election algorithm (cf. [33]). <p> = 1 (cf. (4)), but in fact zp and zq could be replaced by more general functions that form a semigroup of substitutions under the operation of composition of functions (cf. <ref> [12, 51] </ref>). In passing, we observe that the above more general equation arises in non-blocking conflict resolution algorithms (cf. [12, 51]) and asymmetric leader election algorithm (cf. [33]). Let us define for integers m = 0; 1; : : : and a constant such that 0 &lt; maxfp; qg 1 &lt; 1, a sequence of increasing domains (cf.
Reference: [52] <author> R. Sedgewick and P. Flajolet, </author> <title> Analysis of Algorithms, </title> <publisher> Addison Wesley, </publisher> <year> 1995. </year>
Reference: [53] <author> R. Stanley, </author> <title> Enumerative Combinatorics, </title> <publisher> Wadsworth, </publisher> <address> Monterey, </address> <year> 1986. </year>
Reference: [54] <author> W. Szpankowski, </author> <title> On a Recurrence Equation Arising in the Analysis of Conflict Resolution Algorithms, Stochastic Models, </title> <booktitle> 3, </booktitle> <pages> 89-114, </pages> <year> 1987. </year> <month> 66 </month>
Reference-contexts: When only one user sends a message, then a successful transmission takes place. Otherwise, there is a conflict, and all users involve in it must apply an algorithm to solve the conflict (i.e., conflict resolution algorithm). We consider two possible solution, namely: tree-type algorithm (cf. <ref> [4, 12, 11, 22, 42, 51, 54] </ref> and interval searching algorithm (cf. [5, 28, 56]). <p> Clearly, L n satisfies the following recurrence L n = 1 + k=0 n ! with L 0 = L 1 = 1. Actually, there are several modifications to the basic tree-type algorithm (cf. <ref> [42, 54] </ref>) that lead to a more general recurrence. Namely: given L 0 and L 1 L n = a n + fi k=0 n ! where a n is a given sequence (also called the additive term), and fi &gt; 0 is constant. <p> Then: e L (z) = fi e L (zp) + fi e L (zq) + e A (z) l 0 e z l 1 ze z : (4) which becomes a linear additive functional equation extensively studied in <ref> [17, 12, 36, 41, 54, 55] </ref>. Now, we briefly describe the interval searching algorithm (cf. [5, 28, 56]). This time access to the channel is controlled by a window based mechanism that we describe below. This window will be referred to as the enabled interval (EI). <p> Iterating (71), we obtain a general solution of the above equation (cf. <ref> [28, 36, 54] </ref>) e G (z; u) = n=0 n Y a (z2 k ; u) (72) provided e G (0; u) = 0, and all the series above converge. Define '(z; u) = j=0 if the infinite product in (73) converges.
Reference: [55] <author> W. Szpankowski, </author> <title> Patricia Trie Again Revisited, </title> <journal> J. of the ACM, </journal> <volume> 37, </volume> <pages> 691-711, </pages> <year> 1990. </year>
Reference-contexts: Then: e L (z) = fi e L (zp) + fi e L (zq) + e A (z) l 0 e z l 1 ze z : (4) which becomes a linear additive functional equation extensively studied in <ref> [17, 12, 36, 41, 54, 55] </ref>. Now, we briefly describe the interval searching algorithm (cf. [5, 28, 56]). This time access to the channel is controlled by a window based mechanism that we describe below. This window will be referred to as the enabled interval (EI). <p> One now must depoissonize (99) in order to establish the central limit law for the Bernoulli model. First all, an easy application of Theorem 6 leads us to ED n ~ e X (n) and Var D n ~ e V (n). In fact, from Szpankowski <ref> [55] </ref> we know that ED n = 1 h log n + O (1) h 3 log n + O (1) where h = p log p q log q is the entropy, and h 2 = p log 2 p + q log 2 q.
Reference: [56] <author> B. Tsybakov, and V. Mikhailiov, </author> <title> Random Multiple Packet Access: Part-and-Try algorithm. </title> <journal> Prob. Information Transmission, </journal> <volume> 16, </volume> <pages> 305-317, </pages> <year> 1980. </year>
Reference-contexts: Otherwise, there is a conflict, and all users involve in it must apply an algorithm to solve the conflict (i.e., conflict resolution algorithm). We consider two possible solution, namely: tree-type algorithm (cf. [4, 12, 11, 22, 42, 51, 54] and interval searching algorithm (cf. <ref> [5, 28, 56] </ref>). In the tree-type algorithm, all colliding users, say n of them, flip a biased coin and only those who got head are allowed to transmit in the next slot, while the others must wait until the former group solved their subconflicts. <p> Now, we briefly describe the interval searching algorithm (cf. <ref> [5, 28, 56] </ref>). This time access to the channel is controlled by a window based mechanism that we describe below. This window will be referred to as the enabled interval (EI). <p> Roughly speaking, at each step of the algorithm, we compute the endpoints of the EI based on the outcome of the channel. Details can be found in <ref> [5, 28, 56] </ref>. The parameters of interest are: the length of the conflict resolution interval T n , the fraction of resolved interval W n , and the number of resolved packets C n . To derive functional equations for these parameters, we immediately consider the Poisson model. <p> To derive functional equations for these parameters, we immediately consider the Poisson model. For example, e C (z) for C n satisfies (cf. <ref> [5, 28, 56] </ref>) e C (z) = 1 + (1 + z=2)e z=2 e C (z=2) : (5) Indeed, if there is at most one packet in the first half of EI which happens with probability (1 + z=2)e z=2 in the Poisson model then we explore the second half of
Reference: [57] <author> J. Vitter and P. Flajolet, </author> <title> Analysis of Algorithms and Data Structures, </title> <note> in Handbook of Theoretical Computer Science (ed. </note> <editor> J. van Leeuwen). </editor> <volume> vol. </volume> <booktitle> A: Algorithms and Complexity, </booktitle> <pages> 431-524, </pages> <publisher> North Holland, </publisher> <address> Amsterdam 1990. </address>
Reference-contexts: There is often a complicated relationship between the enumeration of hands h n;k and decks d n , but their exponential generating functions (as well as the Poisson counterparts) are simply related as follows (cf. <ref> [57, 58] </ref>) H (z; u) = e uD (z) ; (6) and clearly H (z) = e D (z) . The Poisson distribution is hidding a little bit behind these formulas, but there is one as noted in [2].
Reference: [58] <editor> H. Wilf, generatingfunctionology, </editor> <publisher> Academic Press, </publisher> <address> Boston 1990. </address>
Reference-contexts: We adopt here Wilf's language <ref> [58] </ref> and call structures and set of components as "decks" and "hands", respectively. For example, in the permutation assembly a deck is represented by a cyclic permutation of, say n elements, while hands are cyclic decomposition of the permutation. <p> There is often a complicated relationship between the enumeration of hands h n;k and decks d n , but their exponential generating functions (as well as the Poisson counterparts) are simply related as follows (cf. <ref> [57, 58] </ref>) H (z; u) = e uD (z) ; (6) and clearly H (z) = e D (z) . The Poisson distribution is hidding a little bit behind these formulas, but there is one as noted in [2].
Reference: [59] <author> A.D. Wyner and J. Ziv, </author> <title> Some Asymptotic Properties of the Entropy of a Stationary Ergodic Data Source with Applications to Data Compression, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 35, </volume> <month> 1250-1258 </month> <year> (1989). </year>
Reference-contexts: Such extensions are needed in some applications, e.g., for the analysis of the number of phrases in the Lempel-Ziv parsing algorithm <ref> [31, 59, 61, 60] </ref> and/or redundancy of the Lempel-Ziv code as discussed in [39, 61]. The next theorem refers to the first and second extensions discussed above. 17 Theorem 2 General Depoissonization Lemma. Consider a polynomial cone C (D; ffi) with 1=2 &lt; ffi 1.
Reference: [60] <author> J. Ziv and A. Lempel, </author> <title> A Universal Algorithm for Sequential Data Compression, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 23, </volume> <pages> 337-343, </pages> <year> 1977. </year>
Reference-contexts: Such extensions are needed in some applications, e.g., for the analysis of the number of phrases in the Lempel-Ziv parsing algorithm <ref> [31, 59, 61, 60] </ref> and/or redundancy of the Lempel-Ziv code as discussed in [39, 61]. The next theorem refers to the first and second extensions discussed above. 17 Theorem 2 General Depoissonization Lemma. Consider a polynomial cone C (D; ffi) with 1=2 &lt; ffi 1.
Reference: [61] <author> J. Ziv and A. Lempel, </author> <title> Compression of Individual Sequences via Variable-rate Coding, </title> <journal> IEEE Trans. Information Theory, </journal> <volume> 24, </volume> <pages> 530-536, </pages> <year> 1978. </year> <month> 67 </month>
Reference-contexts: Such extensions are needed in some applications, e.g., for the analysis of the number of phrases in the Lempel-Ziv parsing algorithm <ref> [31, 59, 61, 60] </ref> and/or redundancy of the Lempel-Ziv code as discussed in [39, 61]. The next theorem refers to the first and second extensions discussed above. 17 Theorem 2 General Depoissonization Lemma. Consider a polynomial cone C (D; ffi) with 1=2 &lt; ffi 1. <p> Such extensions are needed in some applications, e.g., for the analysis of the number of phrases in the Lempel-Ziv parsing algorithm [31, 59, 61, 60] and/or redundancy of the Lempel-Ziv code as discussed in <ref> [39, 61] </ref>. The next theorem refers to the first and second extensions discussed above. 17 Theorem 2 General Depoissonization Lemma. Consider a polynomial cone C (D; ffi) with 1=2 &lt; ffi 1. <p> e L (z; u)e z satisfies differential-functional multiplicative equation (16) that we repeat below @L (z; u) = L (puz; u)L (quz; u) : This equation was studied in Jacquet and Szpankowski [31] in order to determine the limiting distribution of the number of phrases in the Lempel-Ziv parsing scheme <ref> [61] </ref>. Interestingly enough, the growth of L (z; u) is quite complicated.
References-found: 61

