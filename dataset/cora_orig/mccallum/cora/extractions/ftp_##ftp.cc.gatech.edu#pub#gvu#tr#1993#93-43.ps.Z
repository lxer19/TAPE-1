URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1993/93-43.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1993/
Root-URL: 
Email: srdjan@advtech.uswest.com  
Title: TACTICS for User Interface Design: Coupling the Compositional and Transformational Approach  
Author: Srdjan Kovacevic 
Keyword: UI model, model-based design, UI design tools, UI components, UI representation, automatic generation, design transformations.  
Address: 4001 Discovery Drive, Boulder, CO 80303  
Affiliation: U S WEST Advanced Technologies  
Abstract: The paper describes TACTICS, the model and a model-based tool capable of supporting a wide range of design decisions and providing assistance in the design process. The TACTICS tool automatically generates a user interface for an application and assists in refining it and in detecting and resolving design inconsistencies. The TACTICS model of human-computer interaction integrates a compositional model of UIs and a transformational model of the UI design space. A user interface is viewed as a composition of primitives structured based on the application and on the desired dialogue style, and the model identifies user interface components and structuring principles for assembling components into a coherent interface. The model also defines transformations that modify UI structures to achieve a desired look-and-feel and enable designers to easily explore different UI designs. The paper describes the knowledge structure of the model and the TACTICS approach to generating user interfaces. UI components are discussed and examples of UI structures given. 
Abstract-found: 1
Intro-found: 1
Reference: [Balzer 85] <author> Balzer, Robert, </author> <title> "A 15 Year Perspective on Automatic Programming," </title> <journal> IEEE TSE, </journal> <volume> Vol. SE-11, No.11, </volume> <month> November </month> <year> 1985, </year> <pages> pp. 1257-1268. </pages>
Reference-contexts: UIs that meet application requirements; all other designs are produced by applying transformations. o o o o Application UI Application Conceptual Model Generation step Transformation steps While transformations in software engineering have been used for generating "functional" code for a target program from a high-level specification and for performing optimizations <ref> [Balzer 85, Darlington 81, Partsch 83] </ref>, UIDE was the first to apply the transformation approach to UI design. TACTICS improves on UIDE in two aspects. The first improvement is a separate UI representation capturing UI specifics at finer level of details than in UIDE.
Reference: [Bleser 90] <author> Bleser, T., and Sibert J. Toto: </author> <title> A Tool for Selecting Interaction Techniques. </title> <booktitle> In Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology. </booktitle> <address> Snowbird, Utah, </address> <year> 1990, </year> <pages> pp. 135-142. </pages>
Reference-contexts: Humanoid [Szekely 92] applies the compositional approach to creating presentations based on a template-based model. Others have modeled other UI components <ref> [Card 90, Bleser 90, Myers 90] </ref>. However, they do not model the overall UI as an integral structure. The most advanced model-based UI tools to date are the User Interface Design Environment (UIDE) [Foley 91, 91a] and Humanoid [Szekely 92].
Reference: [Card 90] <author> Card, S.K., Mackinlay J.D., and Robertson G.G. </author> <title> The Design Space of Input Devices. </title> <booktitle> In Proceedings of CHI'90. </booktitle> <address> ACM New York, </address> <year> 1990, </year> <pages> pp. 117-124. </pages>
Reference-contexts: Humanoid [Szekely 92] applies the compositional approach to creating presentations based on a template-based model. Others have modeled other UI components <ref> [Card 90, Bleser 90, Myers 90] </ref>. However, they do not model the overall UI as an integral structure. The most advanced model-based UI tools to date are the User Interface Design Environment (UIDE) [Foley 91, 91a] and Humanoid [Szekely 92].
Reference: [Darlington 81] <author> Darlington John, </author> <title> "An Experimental Program Transformation and Synthesis System," </title> <booktitle> Artificial Intelligence 16, </booktitle> <year> 1986, </year> <pages> pp. 1-46. </pages> <note> [deBaar 92] deBaar, </note> <author> D.J.M.J., Foley, J.D., and Mullet, K.E., </author> <title> "Coupling Application Design and User Interface Design," </title> <booktitle> in Proceedings of CHI'92 (Monterey, </booktitle> <address> CA, May 3-4, 1992), ACM New York, </address> <year> 1992. </year>
Reference-contexts: UIs that meet application requirements; all other designs are produced by applying transformations. o o o o Application UI Application Conceptual Model Generation step Transformation steps While transformations in software engineering have been used for generating "functional" code for a target program from a high-level specification and for performing optimizations <ref> [Balzer 85, Darlington 81, Partsch 83] </ref>, UIDE was the first to apply the transformation approach to UI design. TACTICS improves on UIDE in two aspects. The first improvement is a separate UI representation capturing UI specifics at finer level of details than in UIDE.
Reference: [Foley 87] <author> Foley, J., C. Gibbs, and W. Kim, </author> <title> "Algorithms to Transform the Formal Specification of a User-Computer Interface," </title> <booktitle> in Proceedings INTERACT '87, 2nd IFIP Conference on Human-Computer Interaction, </booktitle> <publisher> Elsevier Science Publishers, </publisher> <address> Amsterdam, </address> <year> 1987, </year> <pages> pp. 1001-1006. </pages>
Reference-contexts: Generally, there may be more than one user interface structure satisfying communication needs of an application. TACTICS captures relationships between these UIs in transformation rules. Design transformations that modify the application conceptual model while preserving the application functionality were first introduced by UIDE <ref> [Foley 87] </ref>. Preserving the application functionality is important because it allows reuse of the application functional part. This means that no new procedural code has to be provided, and a UI designer can explore different designs without programmers' assistance.
Reference: [Foley 91] <author> Foley, J., Kim W., Kovacevic S., and Murray K. </author> <title> UIDE An Intelligent User Interface Design Environment. </title> <editor> In Sullivan, J. and Tyler, S. (eds.), </editor> <title> Architectures for Intelligent Interfaces: Elements and Prototypes, </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: ITS allows a designer to change style rules that establish global policies concerning generation of dialogue boxes and menus. Mecano includes graphical editing capabilities to modify generated forms and dialogue boxes; it also keeps track of edits and can reapply them to later revisions of the same UI. UIDE <ref> [Foley 91] </ref> goes furtherst and provides a set of built-in transformations specifically aimed to make switching from one design to another easy. TACTICS builds on UIDE, by extending its model and its set of transformations. The compositional approach is not new either. <p> Others have modeled other UI components [Card 90, Bleser 90, Myers 90]. However, they do not model the overall UI as an integral structure. The most advanced model-based UI tools to date are the User Interface Design Environment (UIDE) <ref> [Foley 91, 91a] </ref> and Humanoid [Szekely 92]. Cartoonist [Sukaviriya 90], which is developed based on the UIDE framework, also belongs here. UIDE does not have a full-fledged UI representation model, but the application model is extended with some UI-specific details and used as an executable specification. <p> To generate and manage a UI for an application, a tool must know about the application what are the application's communication needs that a UI must meet. Application semantics are captured in the TACTICS model using modeling primitives based on the UIDE model <ref> [Foley 91] </ref>. An application is described in terms of its objects and their properties, actions that can be applied to these objects, information required by each action (action parameters), and action pre and post-conditions.
Reference: [Foley 91a] <author> Foley, J., Gieskens, D., Kim W.C., Kovacevic S., Moran, L., and Sukaviriya, P. </author> <title> A Second-Generation Knowledge Base for the User Interface Design Environment. </title> <type> Technical Report GWU-IIST-91-13, </type> <institution> Dept. of EE&CS, The George Washington University, </institution> <address> Washington, D.C. 20052, </address> <year> 1991. </year>
Reference: [Green 85] <author> Green, M. </author> <note> The University of Alberta UIMS. In Proceedings SIGGRAPH '85, published as Computer Graphics, 19(3), </note> <year> 1985, </year> <pages> pp. 205-213. </pages>
Reference-contexts: Early UI research was based on the premise that an application's UI can be isolated from the application's functionality, allowing for development of different UIs for an application without affecting its noninteractive part. The Seeheim model <ref> [Green 85] </ref> is representative of this traditional approach. However, separation inherently limits the range of interfaces that can be produced; in particular, interfaces providing semantic feedback are not possible without access to the application semantics.
Reference: [Hayes 85] <author> Hayes, P., Szekely P., and Lerner R. </author> <title> Design Alternatives for User Interface Management Systems Based on Experience with COUSIN. </title> <booktitle> In Proceedings of CHI'85, ACM, </booktitle> <address> New York, </address> <year> 1985, </year> <pages> pp. 169-175. </pages>
Reference-contexts: For instance, ITS [Wiecha 90], DON [Kim 90], and DeBaar's integration of D2M2 and DevGuide [DeBaar 92] focus on the creation of dialogue boxes for graphical UIs, but do not address other components needed for different dialogue styles. Mickey [Olsen 89] automatically generates menu and dialogue box-based UIs, Cousin <ref> [Hayes 85] </ref> and Mecano [Puerta 92] generate only form-based UIs, while Diction [Singh 89] supports menu-based UIs. By coupling the compositional and the transformational approach to UI design, TACTICS can provide the automatic generation and yet support a wide range of designs and easy transitions from one design to another.
Reference: [Kim 90] <author> Kim, W.C., and Foley, J., "DON: </author> <title> User Interface Presentation Design Assistant," </title> <booktitle> in Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, </booktitle> <address> Snowbird, Utah, </address> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: For instance, ITS [Wiecha 90], DON <ref> [Kim 90] </ref>, and DeBaar's integration of D2M2 and DevGuide [DeBaar 92] focus on the creation of dialogue boxes for graphical UIs, but do not address other components needed for different dialogue styles.
Reference: [Kovacevic 92] <author> Kovacevic, S. </author> <title> A Compositional Model of Human-Computer Dialogues. </title> <editor> In Blattner M. and Dannenberg R. (Eds), </editor> <title> Multimedia Interface Design, </title> <publisher> ACM Press, </publisher> <year> 1992. </year>
Reference: [Kovacevic 92a] <author> Kovacevic, S. </author> <title> A Compositional Model of Human-Computer Interaction. </title> <type> DSc dissertation, </type> <institution> Dept. of EE&CS, The George Washington University, </institution> <year> 1992. </year>
Reference-contexts: TACTICS extends the UIDE model with additional relationships linking different objects and their properties, and relationships between action parameters <ref> [Kovacevic 92a] </ref>. The knowledge about the application semantics is necessary, but not sufficient for creating an application UI. Also required is adequate user interface domain knowledge the knowledge about UI components and valid UI structures.
Reference: [Myers 90] <author> Myers, </author> <title> B.A., A New Model for Handling Input, </title> <booktitle> ACM TOIS 8(3), </booktitle> <month> July </month> <year> 1990, </year> <note> pp.289-320. 10 </note>
Reference-contexts: Humanoid [Szekely 92] applies the compositional approach to creating presentations based on a template-based model. Others have modeled other UI components <ref> [Card 90, Bleser 90, Myers 90] </ref>. However, they do not model the overall UI as an integral structure. The most advanced model-based UI tools to date are the User Interface Design Environment (UIDE) [Foley 91, 91a] and Humanoid [Szekely 92].
Reference: [Neches 93] <author> Neches, R., Foley, J., Szekely, P., Sukaviriya, P., Luo, P., Kovacevic, S., and Hudson, P. </author> <title> Knowledgeable Development Environments Using Shared Design Models. </title> <booktitle> In Proceedings of 1993 International Workshop on Intelligent User Interfaces, </booktitle> <address> ACM New York. Orlando, FL. </address> <year> 1993. </year> <month> pp.63-71. </month>
Reference-contexts: In addition, Humanoid lacks the explicit data model and its control model is not completely declarative. Consequently, Humanoid is not well suited for providing design assistance that requires reasoning about the UI and application properties. MASTERMIND <ref> [Neches 93] </ref> is an ongoing effort to integrate the strengths of UIDE and Humanoid. TACTICS goes beyond previous tools and models because (1) it identifies a more complete set of UI components, not limited to interaction objects and techniques, and (2) it couples the compositional and transformational approach.
Reference: [Olsen 86] <author> Olsen, D. MIKE: </author> <title> The Menu Interaction Kontrol Environment. </title> <booktitle> ACM TOG 5(4), </booktitle> <month> Oct. </month> <year> 1986, </year> <month> pp.318-344. </month>
Reference: [Olsen 89] <author> Olsen, D., </author> <title> "A Programing Language Basis for User Interface Management," </title> <booktitle> in Proceedings of CHI'89 (Austin, </booktitle> <address> Texas, April 30-May 4, 1989), ACM New York, </address> <year> 1989, </year> <month> pp.171-176. </month>
Reference-contexts: For instance, ITS [Wiecha 90], DON [Kim 90], and DeBaar's integration of D2M2 and DevGuide [DeBaar 92] focus on the creation of dialogue boxes for graphical UIs, but do not address other components needed for different dialogue styles. Mickey <ref> [Olsen 89] </ref> automatically generates menu and dialogue box-based UIs, Cousin [Hayes 85] and Mecano [Puerta 92] generate only form-based UIs, while Diction [Singh 89] supports menu-based UIs.
Reference: [Partsch 83] <author> Partsch, H., and R. Steinbrggen, </author> <title> "Program Transformation Systems," </title> <journal> ACM Computing Surveys, </journal> <volume> 15(3), </volume> <month> September </month> <year> 1983, </year> <month> pp.199-236. </month>
Reference-contexts: UIs that meet application requirements; all other designs are produced by applying transformations. o o o o Application UI Application Conceptual Model Generation step Transformation steps While transformations in software engineering have been used for generating "functional" code for a target program from a high-level specification and for performing optimizations <ref> [Balzer 85, Darlington 81, Partsch 83] </ref>, UIDE was the first to apply the transformation approach to UI design. TACTICS improves on UIDE in two aspects. The first improvement is a separate UI representation capturing UI specifics at finer level of details than in UIDE.
Reference: [Puerta 92] <author> Puerta, A., Eriksson, H., Egar, J., and Musen, M., </author> <title> Generation of Knowledge-Acquisition Tools from Reusable Domain Ontologies, </title> <type> Report KSL-92-81, </type> <institution> Knowledge Systems Laboratory, Stanford University, Stanford, </institution> <address> CA 94305-5479. </address> <year> 1992. </year>
Reference-contexts: Mickey [Olsen 89] automatically generates menu and dialogue box-based UIs, Cousin [Hayes 85] and Mecano <ref> [Puerta 92] </ref> generate only form-based UIs, while Diction [Singh 89] supports menu-based UIs. By coupling the compositional and the transformational approach to UI design, TACTICS can provide the automatic generation and yet support a wide range of designs and easy transitions from one design to another.
Reference: [Singh 89] <author> Singh, and Green M. </author> <title> A High-Level User Interface Management System. </title> <booktitle> In Proceedings of CHI'89. </booktitle> <address> ACM New York, </address> <year> 1989, </year> <pages> pp. 133-138. </pages>
Reference-contexts: Mickey [Olsen 89] automatically generates menu and dialogue box-based UIs, Cousin [Hayes 85] and Mecano [Puerta 92] generate only form-based UIs, while Diction <ref> [Singh 89] </ref> supports menu-based UIs. By coupling the compositional and the transformational approach to UI design, TACTICS can provide the automatic generation and yet support a wide range of designs and easy transitions from one design to another.
Reference: [Sukaviriya 90] <author> Sukaviriya, P., and Foley J. </author> <title> Coupling a UI Framework with Automatic Generation of Context-Sensitive Animated Help. </title> <booktitle> In Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology. </booktitle> <address> Snowbird, Utah, </address> <year> 1990, </year> <pages> pp. 152-166. </pages>
Reference-contexts: Others have modeled other UI components [Card 90, Bleser 90, Myers 90]. However, they do not model the overall UI as an integral structure. The most advanced model-based UI tools to date are the User Interface Design Environment (UIDE) [Foley 91, 91a] and Humanoid [Szekely 92]. Cartoonist <ref> [Sukaviriya 90] </ref>, which is developed based on the UIDE framework, also belongs here. UIDE does not have a full-fledged UI representation model, but the application model is extended with some UI-specific details and used as an executable specification.
Reference: [Szekely 91] <author> Szekely, P. </author> <title> Using Classification and Separation to Build Intelligent Interfaces. </title> <editor> In Sullivan, J. and Tyler, S. (eds.), </editor> <title> Architectures for Intelligent Interfaces: Elements and Prototypes. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: UIDE [Foley 91] goes furtherst and provides a set of built-in transformations specifically aimed to make switching from one design to another easy. TACTICS builds on UIDE, by extending its model and its set of transformations. The compositional approach is not new either. Szekely <ref> [Szekely 91] </ref> models interactive programs based on the notion of communication concepts representing the information that users and programs can communicate, but he focuses only on a class of graphical user interfaces. Humanoid [Szekely 92] applies the compositional approach to creating presentations based on a template-based model.
Reference: [Szekely 92] <author> Szekely, P., Luo, P., and Neches, R., </author> <title> Facilitating the Exploration of Interface Design Alternatives: The HUMANOID Model of Interface Design, </title> <booktitle> in Proceedings of CHI'92. </booktitle> <address> ACM New York, </address> <year> 1992. </year>
Reference-contexts: The compositional approach is not new either. Szekely [Szekely 91] models interactive programs based on the notion of communication concepts representing the information that users and programs can communicate, but he focuses only on a class of graphical user interfaces. Humanoid <ref> [Szekely 92] </ref> applies the compositional approach to creating presentations based on a template-based model. Others have modeled other UI components [Card 90, Bleser 90, Myers 90]. However, they do not model the overall UI as an integral structure. <p> Others have modeled other UI components [Card 90, Bleser 90, Myers 90]. However, they do not model the overall UI as an integral structure. The most advanced model-based UI tools to date are the User Interface Design Environment (UIDE) [Foley 91, 91a] and Humanoid <ref> [Szekely 92] </ref>. Cartoonist [Sukaviriya 90], which is developed based on the UIDE framework, also belongs here. UIDE does not have a full-fledged UI representation model, but the application model is extended with some UI-specific details and used as an executable specification. <p> High-level transformations are themselves composed of lower-level transformations. Specification freedoms are important because they free designers from having to make commitments early in the design process. As such, they have been used in other systems as well. For instance, HUMANOID <ref> [Szekely 92] </ref> also provides defaults for unspecified UI details, allowing designers to execute their design even before it is completely concretized. Designers can experiment with the system and incrementally refine it. These refinements are comparable to the low-level transformations in TACTICS.
Reference: [Wiecha 90] <author> Wiecha, C., Bennet, W., Boies, S., Gould, J., and Greene S., </author> <title> ITS: A Tool for Rapidly Developing Interactive Applications, </title> <journal> ACM TOIS, </journal> <volume> 8(3), </volume> <month> July </month> <year> 1990. </year> <month> pp.204-236. </month>
Reference-contexts: Automatic generation in most of the UI tools comes at the 2 Composition Rules Consistency Rules UI Domain Knowledge UI Structures (Primitives & Structuring Principles) Application Semantics UI Transformation Rules Conceptual Transformation Rules expense of a limited flexibility and range of designs that can be produced. For instance, ITS <ref> [Wiecha 90] </ref>, DON [Kim 90], and DeBaar's integration of D2M2 and DevGuide [DeBaar 92] focus on the creation of dialogue boxes for graphical UIs, but do not address other components needed for different dialogue styles.
References-found: 23

