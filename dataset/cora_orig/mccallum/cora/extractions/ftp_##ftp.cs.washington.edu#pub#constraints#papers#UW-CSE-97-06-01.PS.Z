URL: ftp://ftp.cs.washington.edu/pub/constraints/papers/UW-CSE-97-06-01.PS.Z
Refering-URL: http://www.cs.washington.edu/research/constraints/solvers/uist97-tr.html
Root-URL: 
Email: borning@cs.washington.edu marriott@cs.monash.edu.au  pjs@cs.mu.oz.au yxiao@maths.mu.oz.au  
Title: Solving Linear Arithmetic Constraints for User Interface Applications: Algorithm Details  
Author: Alan Borning, Kim Marriott, Peter Stuckey, and Yi Xiao Alan Borning Kim Marriott Peter Stuckey Yi Xiao 
Address: PO Box 352350 Wellington Road Seattle, Washington 98195, USA Clayton, Victoria 3168, Australia  Parkville, Victoria 3052, Australia Parkville, Victoria 3052, Australia  
Affiliation: Dept. of Computer Science Engr. Dept. of Computer Science University of Washington Monash University  Dept. of Computer Science Dept. of Mathematics Statistics University of Melbourne University of Melbourne  
Date: 1997  
Note: September  Authors' addresses:  
Abstract: Technical Report 97-06-01 Department of Computer Science & Engineering University of Washington Abstract. Linear equality and inequality constraints arise naturally in specifying many aspects of user interfaces, such as requiring that one window be to the left of another, requiring that a pane occupy the leftmost 1/3 of a window, or preferring that an object be contained within a rectangle if possible. Current constraint solvers designed for UI applications cannot efficiently handle simultaneous linear equations and inequalities. This is a major limitation. We describe incremental algorithms based on the dual simplex and active set methods that can solve such systems of constraints efficiently. Both algorithms have been implemented and tested. This informal technical report is adapted from the paper "Solving Linear Arithmetic Constraints for User Interface Applications," which will appear in the Proceedings of UIST'97 (The ACM User Interface and Software Technology Symposium). It contains additional details, in particular of the Cassowary and QOCA algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> David Baraff. </author> <title> Fast contact force computation for nonpenetrating rigid bodies. </title> <booktitle> In SIGGRAPH '94 Conference Proceedings, </booktitle> <pages> pages 23-32. </pages> <publisher> ACM, </publisher> <year> 1994. </year>
Reference-contexts: These earlier descriptions, however, do not give any details of the algorithm, although the incremental deletion algorithm is described in [13]. The current implementation is much improved, in particular through the use of the active set method described in Section 5.2. Baraff <ref> [1] </ref> describes a quadratic optimization algorithm for solving linear constraints that arise in modelling physical systems. Finally, much of the work on constraint solvers has been in the logic programming and constraint logic programming communities. <p> In this case, a scalar ff 2 <ref> [0; 1] </ref> is selected, such that it is as large as possible and the point x 0 + ff (x fl 0 x 0 ) is feasible. <p> If the desired value does not change too much, it is quite likely that x fl 0 is also optimal for QP 3 . Unfortunately, this is not the case for this example, since x fl 0 violates the 3rd constraint x r 100. Choosing ff 2 <ref> [0; 1] </ref> to be as big as possible while still ensuring that x 1 = x 0 + ff (x fl 0 x 0 ) is feasible, we have ff = 0:6687 and x 1 = x 0 + ff (x fl 0 x 0 ) as the new approximate solution,
Reference: [2] <author> Alan Borning, Richard Anderson, and Bjorn Freeman-Benson. Indigo: </author> <title> A local propagation algorithm for inequality constraints. </title> <booktitle> In Proceedings of the 1996 ACM Symposium on User Interface Software and Technology, </booktitle> <pages> pages 129-136, </pages> <address> Seattle, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: The error in satisfying a constraint cn is 0 iff the constraint is satisfied, and becomes larger the less nearly satisfied is the constraint.) As described in <ref> [2] </ref>, for inequality constraints it is important to use a metric rather than a predicate comparator. Thus, plausible comparators for use with linear equality and inequality constraints are locally-error-better, weighted-sum-better, and least-squares-better. <p> Most of the current systems use one-way constraints (e.g. [12, 16]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. [18, 20]). Indigo <ref> [2] </ref> handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [11] and Ultraviolet [3].
Reference: [3] <author> Alan Borning and Bjorn Freeman-Benson. </author> <title> The OTI constraint solver: A constraint library for constructing interactive graphical user interfaces. </title> <booktitle> In Proceedings of the First International Conference on Principles and Practice of Constraint Programming, </booktitle> <pages> pages 624-628, </pages> <address> Cassis, France, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: solutions to the constraints. (In fact any least-squares-better or weighted-sum-better solution is also a locally-error-better solution [4].) It is thus easier to implement algorithms to find a locally-error-better solution, and in particular to design hybrid algorithms that include subsolvers for simultaneous equations and inequalities and also subsolvers for nonnumeric constraints <ref> [3] </ref>. Since each of these different comparators is preferable in certain situations we give algorithms for each. 1.2 Adapting the Simplex Algorithm Linear programming is concerned with solving the following problem. <p> Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [11] and Ultraviolet <ref> [3] </ref>. A number of researchers (including the first author) have experimented with a straightforward use of a simplex package in a UI constraint solver, but the speed was not satisfactory for interactive use. An earlier version of QOCA is described in references [9] and [10].
Reference: [4] <author> Alan Borning, Bjorn Freeman-Benson, and Molly Wilson. </author> <title> Constraint hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5(3) </volume> <pages> 223-270, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Constraint hierarchies <ref> [4] </ref> provide a general theory for this. In a constraint hierarchy each constraint has a strength. The required strength is special, in that required constraints must be satisfied. The other strengths all label non-required constraints. A constraint of a given strength completely dominates any constraint with a weaker strength. <p> Locally-error-better, on the other hand, is a more permissive comparator, in that it admits more solutions to the constraints. (In fact any least-squares-better or weighted-sum-better solution is also a locally-error-better solution <ref> [4] </ref>.) It is thus easier to implement algorithms to find a locally-error-better solution, and in particular to design hybrid algorithms that include subsolvers for simultaneous equations and inequalities and also subsolvers for nonnumeric constraints [3]. <p> We now show how we can solve the problem using optimization algorithms based on the two alternate objective functions: quasi-linear optimization and quadratic optimization. 3 Cassowary: Quasi-linear Optimization Cassowary finds either locally-error-better or weighted-sum-better solutions. Since every weighted-sum-better solution is also a locally-error-better solution <ref> [4] </ref>, the weighted-sum part of the optimization comes automatically from the manner in which the objective function is constructed. 11 For Cassowary both the edit and the stay constraints will be represented as equations of the form v = ff + ffi + v where ffi + v and ffi v
Reference: [5] <author> Alan Borning, Richard Lin, and Kim Marriott. </author> <title> Constraints for the web. </title> <booktitle> In Proceedings of ACM MULTIMEDIA'97, </booktitle> <month> November </month> <year> 1997. </year>
Reference-contexts: A second QOCA application is for layout of trees and graphs in the presence of arbitrary linear arithmetic constraints and with suggested placements for some nodes [8]. A Cassowary application currently being developed using the Java implementation is a web authoring tool <ref> [5] </ref>, in which the appearance of a page is determined by constraints from both the web author and the viewer. 34 Acknowledgments This project has been funded in part by the National Science Foundation under Grants IRI-9302249 and CCR-9402551 and in part by Object Technology International.
Reference: [6] <author> S.S. Chok and K. Marriott. </author> <title> Automatic construction of user interfaces from constraint multiset grammars. </title> <booktitle> In IEEE Symposium on Visual Languages, </booktitle> <pages> pages 242-250, </pages> <year> 1995. </year>
Reference-contexts: QOCA is used for both error correction in parsing and for diagram manipulation in the editor <ref> [6] </ref>. A second QOCA application is for layout of trees and graphs in the presence of arbitrary linear arithmetic constraints and with suggested placements for some nodes [8].
Reference: [7] <author> Roger Fletcher. </author> <title> Practical Methods of Optimization. </title> <publisher> John Wiley & Sons, </publisher> <address> Chichester, New York, Brisbane, Toronto, Singapore, </address> <year> 1987. </year>
Reference-contexts: We are currently exploring an implementation based on complementary pivoting. 5.2 Active Set Method Our current implementation of QOCA uses the active set method <ref> [7] </ref> to solve the convex quadratic programming problem. This method is an iterative technique for solving constrained optimization problems with inequality constraints. It is reasonably robust and quite fast, and is the method of choice for medium scale problems consisting of up to 1000 variables and constraints. <p> This contrasts with the behaviour of the locally-error-better comparator in which the line grew until it bumped against the side. The actual implementation of QOCA is rather more complex than this example suggests and the reader is referred to <ref> [7] </ref> for more details. 6 Empirical Evaluation Both algorithms have been implemented and tested.
Reference: [8] <author> W. He and K. Marriott. </author> <title> Constrained graph layout. In Graph Drawing '96, </title> <booktitle> volume 1190 of LNCS, </booktitle> <pages> pages 217-232. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: QOCA is used for both error correction in parsing and for diagram manipulation in the editor [6]. A second QOCA application is for layout of trees and graphs in the presence of arbitrary linear arithmetic constraints and with suggested placements for some nodes <ref> [8] </ref>.
Reference: [9] <author> Richard Helm, Tien Huynh, Catherine Lassez, and Kim Marriott. </author> <title> A linear constraint technology for interactive graphic systems. </title> <booktitle> In Graphics Interface '92, </booktitle> <pages> pages 301-309, </pages> <year> 1992. </year>
Reference-contexts: A number of researchers (including the first author) have experimented with a straightforward use of a simplex package in a UI constraint solver, but the speed was not satisfactory for interactive use. An earlier version of QOCA is described in references <ref> [9] </ref> and [10]. These earlier descriptions, however, do not give any details of the algorithm, although the incremental deletion algorithm is described in [13]. The current implementation is much improved, in particular through the use of the active set method described in Section 5.2.
Reference: [10] <author> Richard Helm, Tien Huynh, Kim Marriott, and John Vlissides. </author> <title> An object-oriented architecture for constraint-based graphical editing. </title> <booktitle> In Proceedings of the Third Eurographics Workshop on Object-oriented Graphics, </booktitle> <address> Champery, Switzerland, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: A number of researchers (including the first author) have experimented with a straightforward use of a simplex package in a UI constraint solver, but the speed was not satisfactory for interactive use. An earlier version of QOCA is described in references [9] and <ref> [10] </ref>. These earlier descriptions, however, do not give any details of the algorithm, although the incremental deletion algorithm is described in [13]. The current implementation is much improved, in particular through the use of the active set method described in Section 5.2. <p> For example, consider the two constraints weak x = 0 and weak x = 10. The set of LEB solutions is the infinite set of mappings from x to each number in <ref> [0; 10] </ref>. Assuming equal weights on the constraints, the (single) least-squares solution is fx 7! 5g. The TLEB solutions are defined by producing all the totally ordered hierarchies and taking the union of their solutions.
Reference: [11] <author> Hiroshi Hosobe, Satoshi Matsuoka, and Akinori Yonezawa. </author> <title> Generalized local propagation: A framework for solving constraint hierarchies. </title> <booktitle> In Proceedings of the Second International Conference on Principles and Practice of Constraint Programming, </booktitle> <address> Boston, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: Most of the current systems use one-way constraints (e.g. [12, 16]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. [18, 20]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL <ref> [11] </ref> and Ultraviolet [3]. A number of researchers (including the first author) have experimented with a straightforward use of a simplex package in a UI constraint solver, but the speed was not satisfactory for interactive use. An earlier version of QOCA is described in references [9] and [10].
Reference: [12] <author> Scott Hudson and Ian Smith. </author> <title> SubArctic UI toolkit user's manual. </title> <type> Technical report, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <year> 1996. </year>
Reference-contexts: In fact we have recently re-implemented Cassowary in Java. 1.4 Related Work There is a long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system [19]. Most of the current systems use one-way constraints (e.g. <ref> [12, 16] </ref>), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. [18, 20]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [11] and Ultraviolet [3].
Reference: [13] <author> T. Huynh and K. Marriott. </author> <title> Incremental constraint deletion in systems of linear constraints. </title> <journal> Information Processing Letters, </journal> <volume> 55 </volume> <pages> 111-115, </pages> <year> 1995. </year> <month> 35 </month>
Reference-contexts: An earlier version of QOCA is described in references [9] and [10]. These earlier descriptions, however, do not give any details of the algorithm, although the incremental deletion algorithm is described in <ref> [13] </ref>. The current implementation is much improved, in particular through the use of the active set method described in Section 5.2. Baraff [1] describes a quadratic optimization algorithm for solving linear constraints that arise in modelling physical systems.
Reference: [14] <author> Joxan Jaffar, Spiro Michaylov, Peter Stuckey, and Roland Yap. </author> <title> The CLP(R) language and system. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 14(3) </volume> <pages> 339-395, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Baraff [1] describes a quadratic optimization algorithm for solving linear constraints that arise in modelling physical systems. Finally, much of the work on constraint solvers has been in the logic programming and constraint logic programming communities. Current constraint logic programming languages such as CLP (R) <ref> [14] </ref> include efficient solvers for linear equalities and inequalities. (See [15] for a survey.) However, these solvers use a refinement model of computation, in which the values determined for variables are successively refined as the computation progresses, but there is no notion as such of state and change.
Reference: [15] <author> Kim Marriott and Peter Stuckey. </author> <title> Introduction to Constraint Logic Programming. </title> <publisher> Mit Press, </publisher> <year> 1997. </year> <note> In preparation. </note>
Reference-contexts: Finally, much of the work on constraint solvers has been in the logic programming and constraint logic programming communities. Current constraint logic programming languages such as CLP (R) [14] include efficient solvers for linear equalities and inequalities. (See <ref> [15] </ref> for a survey.) However, these solvers use a refinement model of computation, in which the values determined for variables are successively refined as the computation progresses, but there is no notion as such of state and change. <p> Augmented simplex form allows us to handle unrestricted variables efficiently and simply; it was developed for implementing constraint logic programming languages <ref> [15] </ref>, and we have adopted it here. Essentially it uses two tableaux rather than one. All of the unrestricted variables will be placed in C U , the unrestricted variable tableau. C S , the simplex tableau, contains only variables constrained to be non-negative.
Reference: [16] <author> Brad A. Myers. </author> <title> The Amulet user interface development environment. </title> <booktitle> In CHI'96 Conference Companion: Human Factors in Computing Systems, </booktitle> <address> Vancouver, B.C., </address> <month> April </month> <year> 1996. </year> <note> ACM SIGCHI. </note>
Reference-contexts: In fact we have recently re-implemented Cassowary in Java. 1.4 Related Work There is a long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system [19]. Most of the current systems use one-way constraints (e.g. <ref> [12, 16] </ref>), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. [18, 20]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [11] and Ultraviolet [3].
Reference: [17] <author> William H. Press, Brian P. Flannery, Saul A. Teukolsky, and William T. Vetterling. </author> <title> Numerical Recipes: </title> <booktitle> The Art of Scientific Computing. </booktitle> <publisher> Cambridge University Press, </publisher> <address> second edition, </address> <year> 1989. </year>
Reference-contexts: Both of these thorny defenses are lovingly cultivated by a coterie of stern acolytes who have devoted themselves to the field. Actually, the basic ideas of linear programming are quite simple. Numerical Recipes, <ref> [17, page 424] </ref> 3 We now describe an incremental version of the simplex algorithm, adapted to the task at hand. The material presented in this section is common to both Cassowary and QOCA. The two algorithms use different optimization techniques, however, which are described in Sections 3 and 5 respectively.
Reference: [18] <author> Michael Sannella, John Maloney, Bjorn Freeman-Benson, and Alan Borning. </author> <title> Multi-way versus one-way constraints in user interfaces: Experience with the DeltaBlue algorithm. </title> <journal> Software| Practice and Experience, </journal> <volume> 23(5) </volume> <pages> 529-566, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Most of the current systems use one-way constraints (e.g. [12, 16]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. <ref> [18, 20] </ref>). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [11] and Ultraviolet [3].
Reference: [19] <author> Ivan Sutherland. </author> <title> Sketchpad: A man-machine graphical communication system. </title> <booktitle> In Proceedings of the Spring Joint Computer Conference, </booktitle> <pages> pages 329-346. IFIPS, </pages> <year> 1963. </year>
Reference-contexts: In fact we have recently re-implemented Cassowary in Java. 1.4 Related Work There is a long history of using constraints in user interfaces and interactive systems, beginning with Ivan Sutherland's pioneering Sketchpad system <ref> [19] </ref>. Most of the current systems use one-way constraints (e.g. [12, 16]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. [18, 20]). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities).
Reference: [20] <author> Brad Vander Zanden. </author> <title> An incremental algorithm for satisfying hierarchies of multi-way dataflow constraints. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 18(1) </volume> <pages> 30-72, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: Most of the current systems use one-way constraints (e.g. [12, 16]), or local propagation algorithms for acyclic collections of multi-way constraints (e.g. <ref> [18, 20] </ref>). Indigo [2] handles acyclic collections of inequality constraints, but not cycles (simultaneous equations and inequalities). UI systems that handle simultaneous linear equations include DETAIL [11] and Ultraviolet [3].
References-found: 20

