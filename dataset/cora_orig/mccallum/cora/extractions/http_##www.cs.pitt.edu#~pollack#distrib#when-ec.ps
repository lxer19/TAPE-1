URL: http://www.cs.pitt.edu/~pollack/distrib/when-ec.ps
Refering-URL: http://www.cs.pitt.edu/~pollack/distrib/guide.html
Root-URL: http://www.cs.pitt.edu
Email: joslin@cirl.uoregon.edu  pollack@cs.pitt.edu  
Title: Is "early commitment" in plan generation ever a good idea?  
Author: David Joslin Martha E. Pollack 
Address: Eugene, OR 97403  Pittsburgh Pittsburgh, PA 15260  
Affiliation: Computational Intelligence Research Laboratory 1269 University of Oregon  Department of Computer Science and Intelligent Systems Program University of  
Note: Appears in the 13th National Conference on Artificial Intelligence (AAAI-96)  
Abstract: Partial-Order Causal Link planners typically take a "least-commitment" approach to some decisions (notably, step ordering), postponing those decisions until constraints force them to be made. However, these planners rely to some degree on early commitments in making other types of decisions, including threat resolution and operator choice. We show why existing planners cannot support full least-commitment decision-making, and present an alternative approach that can. The approach has been implemented in the Descartes system, which we describe. We also provide experimental results that demonstrate that a least-commitment approach to planning can be profitably extended beyond what is done in POCL and similar planners, but that taking a least-commitment approach to every planning decision can be inefficient: early commitment in plan generation is sometimes a good idea. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Allen, J., and Koomen, J. </author> <year> 1990. </year> <title> Planning using a temporal world model. In Readings in Planning. </title> <publisher> Morgan Kaufmann Publishers. </publisher> <pages> 559-565. </pages>
Reference-contexts: Virtually all modern planners do some of their work by posting constraints, including codesignation constraints on possible bindings, and causal links and temporal constraints on step ordering. Allen and Koomen <ref> (Allen & Koomen 1990) </ref> and Kambhampati (Kamb-hampati 1994) generalize the notions of temporal and causal constraints, respectively. Planners that make more extensive use of constraints include Zeno (Penberthy & Weld 1994) and O-Plan (Tate, Drabble, & Dalton 1994).
Reference: <author> Currie, K., and Tate, A. </author> <year> 1991. </year> <title> O-plan: The open planning architecture. Art. </title> <journal> Int. </journal> <volume> 52 </volume> <pages> 49-86. </pages>
Reference-contexts: The relative advantage of EC (1) over EC (2) suggests that early commitments on action selection are particularly effective. Related work Work related to LCFR includes DUnf and DMin (Peot & Smith 1993), branch-1/branch-n <ref> (Currie & Tate 1991) </ref>, and ZLIFO (Schubert & Gerevini 1995). DMin, which enforces ordering consistency for postponed threats, could be viewed as a "weakly active" approach.
Reference: <author> Joslin, D., and Pollack, M. E. </author> <year> 1994. </year> <title> Least-cost flaw repair: A plan refinement strategy for partial-order planning. </title> <booktitle> In Proc. AAAI-94, </booktitle> <pages> 1004-1009. </pages>
Reference-contexts: The propagation of dead-end nodes is not just a theoretical problem; it can be shown experimentally to cause serious efficiency problems. We ran UCPOP (Penberthy & Weld 1992) on the same test set of 49 problems from 15 domains previously used in <ref> (Joslin & Pollack 1994) </ref>, with the default search heuristics provided by UCPOP. As in the earlier experiments, 32 of these problems were solved by UCPOP, and 17 were not, within a search limit of 8000 nodes generated. <p> See (Joslin 1996) for details. One response to this problem is to continue passive postponement, but to be smarter about which decisions are postponed. This is one way to think about the Least-Cost Flaw Repair (LCFR) flaw selection strategy we presented in <ref> (Joslin & Pollack 1994) </ref>. Indeed, LCFR is a step in the direction of least-commitment planning, because it prefers decisions that are forced to ones that are not. However, even with an LCFR-style strategy, postponed decisions do not play a role in reasoning about the plan until they are selected.
Reference: <author> Joslin, D. </author> <year> 1996. </year> <title> Passive and active decision postponement in plan generation. </title> <type> Ph.D. dissertation, </type> <institution> Intelligent Systems Program, University of Pittsburgh. </institution>
Reference-contexts: For some problems, as many as 98% of the nodes examined were successors of dead-end nodes. The average for successful problems was 24%, and for unsuccessful problems, 48%. See <ref> (Joslin 1996) </ref> for details. One response to this problem is to continue passive postponement, but to be smarter about which decisions are postponed. This is one way to think about the Least-Cost Flaw Repair (LCFR) flaw selection strategy we presented in (Joslin & Pollack 1994). <p> Also note that because it takes a fully least-commitment approach, in a single-action domain LC-Descartes will always generate minimal-length plans, something not guaranteed by either UCPOP or LCFR. We investigated what LC-Descartes is doing on the larger problems (see <ref> (Joslin 1996) </ref> for details), and saw that virtually all of its work is in the form of restricted expansions.
Reference: <author> Kambhampati, S.; Knoblock, C. A.; and Yang, Q. </author> <year> 1995. </year> <title> Planning as refinement search: A unified framework for evaluating design tradeoffs in partial-order planning. </title> <booktitle> Art. Int. </booktitle> <address> 76(1-2):167-238. </address>
Reference: <author> Kambhampati, S. </author> <year> 1994. </year> <title> Multi-contributor causal structures for planning: a formalization and evaluation. </title> <booktitle> Art. Int. </booktitle> <address> 69(1-2):235-278. </address>
Reference-contexts: This approach to goal achievement generalizes multi-contributor causal structures <ref> (Kambhampati 1994) </ref>. If no variable has an empty domain, LC-Descartes invokes Solve, which applies standard CSP search techniques to try to solve the CSP. At any point, the CSP has a solution if and only the current set of plan steps can be used to solve the planning problem.
Reference: <author> Kautz, H. and Selman, B. </author> <year> 1992. </year> <note> Planning as Satisfia-bility. Proc. </note> <institution> ECAI-92 Vienna, Austria, </institution> <year> 1992, </year> <pages> 359-363. </pages>
Reference: <author> Penberthy, J. S., and Weld, D. </author> <year> 1992. </year> <title> UCPOP: A sound, complete, partial order planner for ADL. </title> <booktitle> In Proc. 3rd Int. Conf. on KR and Reasoning, </booktitle> <pages> 103-114. </pages>
Reference-contexts: The propagation of dead-end nodes is not just a theoretical problem; it can be shown experimentally to cause serious efficiency problems. We ran UCPOP <ref> (Penberthy & Weld 1992) </ref> on the same test set of 49 problems from 15 domains previously used in (Joslin & Pollack 1994), with the default search heuristics provided by UCPOP.
Reference: <author> Penberthy, J. S., and Weld, D. </author> <year> 1994. </year> <title> Temporal planning with continuous change. </title> <booktitle> In Proc. AAAI-94, </booktitle> <pages> 1010-1015. </pages>
Reference-contexts: Allen and Koomen (Allen & Koomen 1990) and Kambhampati (Kamb-hampati 1994) generalize the notions of temporal and causal constraints, respectively. Planners that make more extensive use of constraints include Zeno <ref> (Penberthy & Weld 1994) </ref> and O-Plan (Tate, Drabble, & Dalton 1994). Zeno uses constraints and temporal intervals to reason about goals with deadlines and continuous change.
Reference: <author> Peot, M., and Smith, D. E. </author> <year> 1993. </year> <title> Threat-removal strategies for partial-order planning. </title> <booktitle> In Proc. AAAI-93, </booktitle> <pages> 492-499. </pages>
Reference-contexts: The relative advantage of EC (1) over EC (2) suggests that early commitments on action selection are particularly effective. Related work Work related to LCFR includes DUnf and DMin <ref> (Peot & Smith 1993) </ref>, branch-1/branch-n (Currie & Tate 1991), and ZLIFO (Schubert & Gerevini 1995). DMin, which enforces ordering consistency for postponed threats, could be viewed as a "weakly active" approach.
Reference: <author> Pollack, M. E.; Znati, T.; Ephrati, E.; Joslin, D.; Lauzac, S.; Nunes, A.; Onder, N.; Ronen, Y.; and Ur, S. </author> <year> 1994. </year> <title> The DIPART project: A status report. </title> <booktitle> In Proceedings of the Annual ARPI Meeting. </booktitle>
Reference-contexts: The propagation of dead-end nodes is not just a theoretical problem; it can be shown experimentally to cause serious efficiency problems. We ran UCPOP (Penberthy & Weld 1992) on the same test set of 49 problems from 15 domains previously used in <ref> (Joslin & Pollack 1994) </ref>, with the default search heuristics provided by UCPOP. As in the earlier experiments, 32 of these problems were solved by UCPOP, and 17 were not, within a search limit of 8000 nodes generated. <p> See (Joslin 1996) for details. One response to this problem is to continue passive postponement, but to be smarter about which decisions are postponed. This is one way to think about the Least-Cost Flaw Repair (LCFR) flaw selection strategy we presented in <ref> (Joslin & Pollack 1994) </ref>. Indeed, LCFR is a step in the direction of least-commitment planning, because it prefers decisions that are forced to ones that are not. However, even with an LCFR-style strategy, postponed decisions do not play a role in reasoning about the plan until they are selected. <p> * (2) 7.2 6.7 3 * (2) 94.7 * 5 38.0 (1) 5.2 9.8 7 9.0 (1) 7.4 6.2 9 5.8 (1) 5.7 * CPU times are in seconds; * = exceeded time limit both versions of EC-Descartes on a set of nine problems from the DIPART transportation planning domain <ref> (Pollack et al. 1994) </ref>; it also shows in parentheses the number of unrestricted expansions performed by LC-Descartes. EC (1) solved all of the problems, while EC (2) failed on three problems, and LC-Descartes failed to solve four, hitting a search limit of 600 CPU seconds.
Reference: <author> Schubert, L., and Gerevini, A. </author> <year> 1995. </year> <title> Accelerating partial order planners by improving plan and goal choices. </title> <type> Tech. </type> <institution> Rpt. 96-607, Univ. of Rochester Dept. of Computer Science. </institution>
Reference-contexts: The relative advantage of EC (1) over EC (2) suggests that early commitments on action selection are particularly effective. Related work Work related to LCFR includes DUnf and DMin (Peot & Smith 1993), branch-1/branch-n (Currie & Tate 1991), and ZLIFO <ref> (Schubert & Gerevini 1995) </ref>. DMin, which enforces ordering consistency for postponed threats, could be viewed as a "weakly active" approach.
Reference: <author> Stefik, M. </author> <year> 1981. </year> <title> Planning with constraints. Art. </title> <journal> Int. </journal> <volume> 16 </volume> <pages> 111-140. </pages>
Reference-contexts: Both Zeno and O-Plan maintain an agenda; Descartes differs from them in its use of active postponement. Previous work that has used constraints in a more active sense during plan generation includes (Stefik 1981; Kautz & Selman 1992; Yang 1992). MOLGEN <ref> (Stefik 1981) </ref> posts constraints on variables that represent certain kinds of goal interactions in a partial plan. These constraints then guide the planning process, ruling out choices that would conflict with the constraint.
Reference: <author> Tate, A.; Drabble, B.; and Dalton, J. </author> <year> 1994. </year> <title> Reasoning with constraints within O-Plan2. </title> <type> Tech. </type> <institution> Rpt. ARPA-RL/O-Plan2/TP/6 V. 1, AIAI, Edinburgh. </institution>
Reference-contexts: Allen and Koomen (Allen & Koomen 1990) and Kambhampati (Kamb-hampati 1994) generalize the notions of temporal and causal constraints, respectively. Planners that make more extensive use of constraints include Zeno (Penberthy & Weld 1994) and O-Plan <ref> (Tate, Drabble, & Dalton 1994) </ref>. Zeno uses constraints and temporal intervals to reason about goals with deadlines and continuous change. O-Plan makes it possible for a number of specialized "constraint managers" to work on a plan, all sharing a constraint representation that allows them to interact.
Reference: <author> Tsang, E. </author> <year> 1993. </year> <title> Foundations of Constraint Satisfaction. </title> <publisher> Academic Press. </publisher>
Reference-contexts: For any step ff in , add the constraint that if and ff are actually in the plan, they occur at different times. 5. Add step to . 6. Apply constraint reduction techniques <ref> (Tsang 1993) </ref> to prune impossible values from domains. a tentative step for each possible way of achieving the goal, postponing the decision about which might be used in the final plan.
Reference: <author> Yang, Q. </author> <year> 1992. </year> <title> A theory of conflict resolution in planning. </title> <booktitle> Art. Int. </booktitle> <address> 58(1-3):361-392. </address>
Reference-contexts: Kautz and Selman have shown how to represent a planning problem as a CSP, given an initial user-selected set of plan steps; if a solution cannot be found using some or all of those steps, an expansion would be required, much like an unrestricted expansion in LC-Descartes. WATPLAN <ref> (Yang 1992) </ref> uses a CSP mechanism to resolve conflict among possible variable bindings or step orderings; its input is a possibly incorrect plan, which it transforms to a correct one if possible. WATPLAN will not extend the CSP if the input plan is incomplete.
References-found: 16

