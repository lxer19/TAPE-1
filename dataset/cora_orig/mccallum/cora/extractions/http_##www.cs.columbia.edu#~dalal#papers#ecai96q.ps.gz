URL: http://www.cs.columbia.edu/~dalal/papers/ecai96q.ps.gz
Refering-URL: http://www.cs.columbia.edu/~dalal/papers.html
Root-URL: http://www.cs.columbia.edu
Title: An Almost Quadratic Class of Satisfiability Problems  
Author: Mukesh Dalal 
Abstract: Many reasoning problems in Knowledge Representation can be reduced to the satisfiability problem of propositional logic. Since Cook proved that satisfiability is NP-Complete, several classes of propositional formulas have been identified for which satisfiability is polynomially solvable. These polynomial classes form the basis of several tractable knowledge representation systems, for example, those based on Horn clauses. In this paper, we present a new class Quad of formulas for which satisfiability is solvable in O(n 2 k) time, where n is the size of the formula and k is the size of the longest clause in the formula. Formulas in class Quad can be also recognized in O(n 2 k) time. Thus, for any restriction on satisfiability that forces a fixed upper bound on clause length, for example, 3-SAT, the restricted class Quad is recognizable and solvable in quadratic time. The class Quad strictly contains all Horn and binary formulas. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Arvind and S. Biswas, </author> <title> `An O(n 2 ) algorithm for the satisfiability problem of a subset of propositional sentences in CNF that includes all Horn sentences', </title> <journal> Information Processing Letters, </journal> <volume> 24, </volume> <pages> 67-69, </pages> <year> (1987). </year>
Reference-contexts: 1 INTRODUCTION Since Cook [7] proved that the satisfiability problem for propositional logic (SAT) is NP-Complete, several classes of propositional formulas have been identified for which SAT is polynomially solvable <ref> [12, 15, 20, 11, 1, 13, 14, 5, 10, 3, 18] </ref>. Since many important problems in AI can be reduced to SAT, its tractable classes are useful. For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time. <p> Even et. al. [12] showed that SAT restricted to binary clauses is solvable in linear time. Yamasaki and Doshita [20] defined a class H 2 ; that strictly includes Horn clauses, for which Arvind and Biswas <ref> [1] </ref> proved that SAT is solvable in quadratic time.
Reference: [2] <author> A. Borgida and D.W. Etherington, </author> <title> `Hierarchical knowledge bases and efficient disjunctive reasoning', </title> <booktitle> in ProceedingsFirst International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <editor> eds., R.J. Brachman, H.J. Levesque, and R. </editor> <booktitle> Reiter, </booktitle> <pages> pp. 33-43. </pages> <publisher> Morgan Kaufmann, </publisher> <year> (1989). </year>
Reference-contexts: For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time. Moreover, more general formulas are sometimes approximated to tractable formulas in the approach known as knowledge compilation <ref> [19, 2, 4] </ref>. In this paper, we present a new class Quad of formulas for which SAT is solvable in O (n 2 k) time, where n is the size of the input formula and k is the size of the longest clause in the formula.
Reference: [3] <author> E. Boros, P.L. Hammer, and X. Sun, </author> <title> `Recognition of Q-Horn formulae in linear time', </title> <journal> Discrete applied mathematics, </journal> <volume> 55(1), 1, </volume> <year> (1994). </year>
Reference-contexts: 1 INTRODUCTION Since Cook [7] proved that the satisfiability problem for propositional logic (SAT) is NP-Complete, several classes of propositional formulas have been identified for which SAT is polynomially solvable <ref> [12, 15, 20, 11, 1, 13, 14, 5, 10, 3, 18] </ref>. Since many important problems in AI can be reduced to SAT, its tractable classes are useful. For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time. <p> Boros et. al. <ref> [3] </ref> presented a class of Q-Horn formulas, which strictly includes all binary, Horn, and renamable-Horn formulas (formulas that become Horn when some negative literals are systematically replaced by new atoms [15]), that can be recognized and solved in linear time.
Reference: [4] <author> M. Cadoli, </author> <title> `Panel on knowledge compilation and approximations: terminology, questions, and references', </title> <booktitle> in Fourth International Symposium on Artificial Intelligence and Mathematics (AI/MATH-96), </booktitle> <pages> pp. 183-186, </pages> <address> Florida, </address> <year> (1996). </year>
Reference-contexts: For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time. Moreover, more general formulas are sometimes approximated to tractable formulas in the approach known as knowledge compilation <ref> [19, 2, 4] </ref>. In this paper, we present a new class Quad of formulas for which SAT is solvable in O (n 2 k) time, where n is the size of the input formula and k is the size of the longest clause in the formula.
Reference: [5] <author> V. Chandru and J.N. Hooker, </author> <title> `Extended Horn sets in propositional logic', </title> <journal> Journal of the ACM, </journal> <volume> 38, </volume> <pages> 205-221, </pages> <year> (1991). </year>
Reference-contexts: 1 INTRODUCTION Since Cook [7] proved that the satisfiability problem for propositional logic (SAT) is NP-Complete, several classes of propositional formulas have been identified for which SAT is polynomially solvable <ref> [12, 15, 20, 11, 1, 13, 14, 5, 10, 3, 18] </ref>. Since many important problems in AI can be reduced to SAT, its tractable classes are useful. For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time.
Reference: [6] <author> C. Chang and R.C. Lee, </author> <title> Symbolic Logic and Mechanical Theorem Proving, </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1973. </year>
Reference-contexts: For any formula S, let BinSat (S) returns S if S has a non-binary clause, else returns fg if S is satisfiable, and returns f2g otherwise. The basic algorithm RootSat determines satisfiability for formulas in class Root. It implements unit resolution <ref> [6] </ref> using a variation of the linear time forward-chaining algorithm proposed in [11] for testing Horn-clause satisfiability. At each step, it resolves a unit clause with the rest of the formulas, and throws the unit clause away. It continues until no more unit clauses are left.
Reference: [7] <author> S.A. Cook, </author> <title> `The complexity of theorem proving procedures', </title> <booktitle> in Proceedings Third Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pp. 151-158, </pages> <year> (1971). </year>
Reference-contexts: 1 INTRODUCTION Since Cook <ref> [7] </ref> proved that the satisfiability problem for propositional logic (SAT) is NP-Complete, several classes of propositional formulas have been identified for which SAT is polynomially solvable [12, 15, 20, 11, 1, 13, 14, 5, 10, 3, 18]. <p> WWW: http://www.cs.columbia.edu/~dalal/. with several previously known tractable classes. Section 6 presents a summary of the main contributions and suggests some limitations of our approach. 2 A TRACTABLE CLASS OF SAT In this section, we define the satisfiability problem and the class Quad. Several basic definitions are taken from <ref> [7, 10, 8] </ref>. Consider a set A of symbols called atoms. A literal is either an atom (positive literal) or its complement (negative literal). The complement of a literal p is denoted by :p: A clause is a finite set of literals, not containing both an atom and its complement. <p> Two formulas are said to be equivalent () iff they are satisfied by identical valuations. For example, the formula S given above is satisfied by the valuation that maps both a and c to true. The satisfiability problem (SAT), which was the first known NP-Complete problem <ref> [7] </ref>, is defined as follows: Input: A formula, S; Output: yes iff S is satisfiable, no otherwise.
Reference: [8] <author> M. Dalal, </author> <title> `Tractable deduction in knowledge representation systems', </title> <booktitle> in Principles of Knowledge Representation and Reasoning: Proceedings of the Third International Conference (KR'92), </booktitle> <editor> eds., B. Nebel, C. Rich, and W. </editor> <booktitle> Swartout, </booktitle> <pages> pp. 393-402, </pages> <address> Cambridge, Massachusetts, (1992). </address> <publisher> Morgan Kaufmann Publishers. </publisher>
Reference-contexts: WWW: http://www.cs.columbia.edu/~dalal/. with several previously known tractable classes. Section 6 presents a summary of the main contributions and suggests some limitations of our approach. 2 A TRACTABLE CLASS OF SAT In this section, we define the satisfiability problem and the class Quad. Several basic definitions are taken from <ref> [7, 10, 8] </ref>. Consider a set A of symbols called atoms. A literal is either an atom (positive literal) or its complement (negative literal). The complement of a literal p is denoted by :p: A clause is a finite set of literals, not containing both an atom and its complement.
Reference: [9] <author> M. Dalal, </author> <title> `Tractable reasoning in knowledge representation systems', </title> <type> Technical Report CUCS-017-95, </type> <institution> Department of Computer Science, Columbia University, </institution> <address> New York, NY, </address> <month> (July </month> <year> 1995). file://ftp.cs.columbia.edu/reports/reports-1995/cucs-017-95.ps.gz. </year>
Reference-contexts: In the next section, we will show how to improve the speed of these algorithms at the cost of additional space used to cache results. Several basic ideas are taken from <ref> [13, 10, 9] </ref>. All algorithms presented in this paper are sound, that is, they never return an incorrect answer. An algorithm is called complete for a class of formulas iff it returns either fg or f2g for every formula in the class.
Reference: [10] <author> M. Dalal and D. W. Etherington, </author> <title> `A hierarchy of tractable satisfiability problems', </title> <journal> Information Processing Letters, </journal> <volume> 44(4), </volume> <pages> 173-231, </pages> <month> (December </month> <year> 1992). </year>
Reference-contexts: 1 INTRODUCTION Since Cook [7] proved that the satisfiability problem for propositional logic (SAT) is NP-Complete, several classes of propositional formulas have been identified for which SAT is polynomially solvable <ref> [12, 15, 20, 11, 1, 13, 14, 5, 10, 3, 18] </ref>. Since many important problems in AI can be reduced to SAT, its tractable classes are useful. For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time. <p> WWW: http://www.cs.columbia.edu/~dalal/. with several previously known tractable classes. Section 6 presents a summary of the main contributions and suggests some limitations of our approach. 2 A TRACTABLE CLASS OF SAT In this section, we define the satisfiability problem and the class Quad. Several basic definitions are taken from <ref> [7, 10, 8] </ref>. Consider a set A of symbols called atoms. A literal is either an atom (positive literal) or its complement (negative literal). The complement of a literal p is denoted by :p: A clause is a finite set of literals, not containing both an atom and its complement. <p> In the next section, we will show how to improve the speed of these algorithms at the cost of additional space used to cache results. Several basic ideas are taken from <ref> [13, 10, 9] </ref>. All algorithms presented in this paper are sound, that is, they never return an incorrect answer. An algorithm is called complete for a class of formulas iff it returns either fg or f2g for every formula in the class. <p> Dalal and Etherington <ref> [10] </ref> presented an improved hierarchy W = W 0 ; W 1 ; : : : ; of classes, where G k is a strict subset of W k for each k, and for each W k ; SAT is solvable in O (nm k ) time.
Reference: [11] <author> W.F. Dowling and J.H. Gallier, </author> <title> `Linear-time algorithms for testing the satisfiability of propositional Horn formulae', </title> <journal> Journal of Logic Programming, </journal> <volume> 1(3), </volume> <pages> 267-284, </pages> <year> (1984). </year>
Reference-contexts: 1 INTRODUCTION Since Cook [7] proved that the satisfiability problem for propositional logic (SAT) is NP-Complete, several classes of propositional formulas have been identified for which SAT is polynomially solvable <ref> [12, 15, 20, 11, 1, 13, 14, 5, 10, 3, 18] </ref>. Since many important problems in AI can be reduced to SAT, its tractable classes are useful. For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time. <p> The basic algorithm RootSat determines satisfiability for formulas in class Root. It implements unit resolution [6] using a variation of the linear time forward-chaining algorithm proposed in <ref> [11] </ref> for testing Horn-clause satisfiability. At each step, it resolves a unit clause with the rest of the formulas, and throws the unit clause away. It continues until no more unit clauses are left. After that, each of the conditions for membership in class Root is tested. <p> Dalal which the unit clauses are selected. Lines 6 to 9 then test exactly all the criteria by which a formula can be in class Root. An efficient implementation of RootSat, based on <ref> [11] </ref>, maintains a stack of those unit clauses that are yet to be processed. At each step, it removes a unit clause from this stack and propagates it to other clauses. A list of clauses containing each literal is maintained. <p> Thus, for any fixed k, QuadSat runs in quadratic time. 5 COMPARISON There are several cases of SAT for which tractable algorithm are known. Dowling and Gallier <ref> [11] </ref> showed that SAT restricted to Horn clauses is solvable in linear time. Even et. al. [12] showed that SAT restricted to binary clauses is solvable in linear time.
Reference: [12] <author> S. Even, A. Itai, and A. Shamir, </author> <title> `On the complexity of timetable and multicommodity flow problems', </title> <journal> SIAM Journal of Computing, </journal> <volume> 5(4), </volume> <pages> 691-700, </pages> <year> (1976). </year>
Reference-contexts: 1 INTRODUCTION Since Cook [7] proved that the satisfiability problem for propositional logic (SAT) is NP-Complete, several classes of propositional formulas have been identified for which SAT is polynomially solvable <ref> [12, 15, 20, 11, 1, 13, 14, 5, 10, 3, 18] </ref>. Since many important problems in AI can be reduced to SAT, its tractable classes are useful. For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time. <p> In Case 1, the formula is unsatisfiable. In Case 2, a truth valuation that assigns f alse to every atom satisfies the formula, while in Case 3, a truth valuation that assigns true to every atom satisfies the formula. In Case 4, satisfiability can be easily determined <ref> [12] </ref>. Thus, formulas in class Root can be recognized and solved in linear time. For example, consider the formula U = ffp; q; rg; fp; q; :rg; f:p; :q; :rgg: Since U does not satisfy any condition given above, it is not in class Root. <p> A unit clause is generated iff the counter value reaches 1. By maintaining global counters indicating number of negative, positive, and binary clauses clauses in S; the tests for membership in Root can be done in constant time. Note that BinSat has an efficient linear time algorithm <ref> [12] </ref>. This leads to the following claim: Lemma 2 For any input formula R, the function RootSat halts in time O (n), where n is the size of R. The algorithm Qsat determines membership in class Quad. <p> Thus, for any fixed k, QuadSat runs in quadratic time. 5 COMPARISON There are several cases of SAT for which tractable algorithm are known. Dowling and Gallier [11] showed that SAT restricted to Horn clauses is solvable in linear time. Even et. al. <ref> [12] </ref> showed that SAT restricted to binary clauses is solvable in linear time. Yamasaki and Doshita [20] defined a class H 2 ; that strictly includes Horn clauses, for which Arvind and Biswas [1] proved that SAT is solvable in quadratic time.
Reference: [13] <author> G. Gallo and M.G. Scutella, </author> <title> `Polynomially solvable satisfiability problems', </title> <journal> Information Processing Letters, </journal> <volume> 29, </volume> <pages> 221-227, </pages> <year> (1988). </year>
Reference-contexts: 1 INTRODUCTION Since Cook [7] proved that the satisfiability problem for propositional logic (SAT) is NP-Complete, several classes of propositional formulas have been identified for which SAT is polynomially solvable <ref> [12, 15, 20, 11, 1, 13, 14, 5, 10, 3, 18] </ref>. Since many important problems in AI can be reduced to SAT, its tractable classes are useful. For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time. <p> In the next section, we will show how to improve the speed of these algorithms at the cost of additional space used to cache results. Several basic ideas are taken from <ref> [13, 10, 9] </ref>. All algorithms presented in this paper are sound, that is, they never return an incorrect answer. An algorithm is called complete for a class of formulas iff it returns either fg or f2g for every formula in the class. <p> Even et. al. [12] showed that SAT restricted to binary clauses is solvable in linear time. Yamasaki and Doshita [20] defined a class H 2 ; that strictly includes Horn clauses, for which Arvind and Biswas [1] proved that SAT is solvable in quadratic time. Gallo and Scutella <ref> [13] </ref> built a hierarchy, G = G 0 ; G 1 ; : : : ; of classes, where G 0 consists of only Horn clauses and G 1 is H 2 ; such that for each G k ; SAT is solvable in O (nm k ) time, where n
Reference: [14] <author> D.E. Knuth, </author> <title> `Nested satisfiability', </title> <journal> Acta Informatica, </journal> <volume> 28, </volume> <pages> 1-6, </pages> <year> (1990). </year>
Reference-contexts: 1 INTRODUCTION Since Cook [7] proved that the satisfiability problem for propositional logic (SAT) is NP-Complete, several classes of propositional formulas have been identified for which SAT is polynomially solvable <ref> [12, 15, 20, 11, 1, 13, 14, 5, 10, 3, 18] </ref>. Since many important problems in AI can be reduced to SAT, its tractable classes are useful. For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time.
Reference: [15] <author> H.R. Lewis, </author> <title> `Renaming a set of clauses as a horn set', </title> <journal> Journal of the ACM, </journal> <volume> 25, </volume> <pages> 105-117, </pages> <year> (1978). </year>
Reference-contexts: 1 INTRODUCTION Since Cook [7] proved that the satisfiability problem for propositional logic (SAT) is NP-Complete, several classes of propositional formulas have been identified for which SAT is polynomially solvable <ref> [12, 15, 20, 11, 1, 13, 14, 5, 10, 3, 18] </ref>. Since many important problems in AI can be reduced to SAT, its tractable classes are useful. For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time. <p> Boros et. al. [3] presented a class of Q-Horn formulas, which strictly includes all binary, Horn, and renamable-Horn formulas (formulas that become Horn when some negative literals are systematically replaced by new atoms <ref> [15] </ref>), that can be recognized and solved in linear time. Since the hierarchy W and the class Q-Horn are the largest of the above tractable classes, we will compare our class Quad with them. We first show that class Quad is not contained in any class of the hierarchy W.
Reference: [16] <author> D. McAllester, </author> <title> `An outlook on truth maintenance', </title> <type> Memo 551, </type> <institution> MIT AI Lab, </institution> <month> (August </month> <year> 1980). </year>
Reference-contexts: For example, if S = ffag; f:a; :b; cg; f:c; d; egg, then 1. S fl = ff:b; cg; f:c; d; egg; 2. S b = ffag; f:a; cg; f:c; d; egg, and 3. (S b ) fl = ffd; egg: Reduction fl closely corresponds to Boolean Constraint Propagation <ref> [16] </ref>. It is easy to verify that any formula S is satisfiable iff S fl is satisfiable. We will usually abbreviate (S ) fl by S fl , and S fpg by S p .
Reference: [17] <author> E. Mendelson, </author> <title> Introduction to Mathematical Logic, </title> <publisher> Van Nostrand, </publisher> <address> Princeton, N.J., </address> <year> 1964. </year>
Reference-contexts: A formula is a finite set of clauses. For example, the formula S = ffag; f:a; :b; cgg has two clauses. Our formulas correspond to clausal normal form (CNF) formulas of propositional logic <ref> [17] </ref>, except that we do not explicitly represent the logical connectives ^ and _, and that there are no redundant literals in clauses. For example, a CNF formula corresponding to the formula S above is given by a ^ (:a _ :b _ c).
Reference: [18] <author> J.S. Schlipf, F. Annexstein, J. Franco, and R. Swaminathan, </author> <title> `On finding solutions for extended Horn formulas', </title> <journal> Information Processing Letters, </journal> <volume> 54, </volume> <pages> 133-137, </pages> <year> (1995). </year>
Reference-contexts: 1 INTRODUCTION Since Cook [7] proved that the satisfiability problem for propositional logic (SAT) is NP-Complete, several classes of propositional formulas have been identified for which SAT is polynomially solvable <ref> [12, 15, 20, 11, 1, 13, 14, 5, 10, 3, 18] </ref>. Since many important problems in AI can be reduced to SAT, its tractable classes are useful. For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time.
Reference: [19] <author> B. Selman and H. Kautz, </author> <title> `Knowledge compilation using Horn approximations', </title> <booktitle> in Proceedings Ninth National Conference on Artificial Intelligence (AAAI-91), </booktitle> <pages> pp. 904-909, </pages> <year> (1991). </year>
Reference-contexts: For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time. Moreover, more general formulas are sometimes approximated to tractable formulas in the approach known as knowledge compilation <ref> [19, 2, 4] </ref>. In this paper, we present a new class Quad of formulas for which SAT is solvable in O (n 2 k) time, where n is the size of the input formula and k is the size of the longest clause in the formula.
Reference: [20] <author> S. Yamasaki and S. Doshita, </author> <title> `The satisfiability problem for a class consisting of Horn sentences and some non-Horn sentences in propositional logic', </title> <journal> Information and Control, </journal> <pages> 59(1-3), 1-12, </pages> <year> (1983). </year>
Reference-contexts: 1 INTRODUCTION Since Cook [7] proved that the satisfiability problem for propositional logic (SAT) is NP-Complete, several classes of propositional formulas have been identified for which SAT is polynomially solvable <ref> [12, 15, 20, 11, 1, 13, 14, 5, 10, 3, 18] </ref>. Since many important problems in AI can be reduced to SAT, its tractable classes are useful. For example, many knowledge representation systems are based on Horn clauses for which SAT can be solved in linear time. <p> Dowling and Gallier [11] showed that SAT restricted to Horn clauses is solvable in linear time. Even et. al. [12] showed that SAT restricted to binary clauses is solvable in linear time. Yamasaki and Doshita <ref> [20] </ref> defined a class H 2 ; that strictly includes Horn clauses, for which Arvind and Biswas [1] proved that SAT is solvable in quadratic time.
Reference: [21] <author> H. Zhang and M. E. Stickel, </author> <title> `An efficient algorithm for unit propagation', </title> <booktitle> in Fourth International Symposium on Artificial Intelligence and Mathematics (AI/MATH-96), </booktitle> <pages> pp. 166-169, </pages> <address> Florida, </address> <year> (1996). </year> <title> Logic Programming, Theorem Proving and Search 359 M. </title> <type> Dalal </type>
Reference-contexts: In particular, any other linear time recognizable and satisfiable class of formulas can be used instead of Root. Also, rather than implementing RootSat using counters, we can use faster methods, like the one presented in <ref> [21] </ref>. ACKNOWLEDGEMENTS We would like to thank the referees for their comments which helped improve this paper. This work is partially supported by NSF Grant No. IRI-94-10117 and DARPA/ARL Contract No. DAAL01-94-K-0119.
References-found: 21

