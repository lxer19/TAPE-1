URL: http://www.cse.ucsc.edu/research/ccrg/CMPE255/mit-thesis.ps
Refering-URL: http://www.cse.ucsc.edu/research/ccrg/CMPE255/
Root-URL: http://www.cse.ucsc.edu
Title: Building an Active Node on the Internet  
Author: by David M. Murphy John V. Guttag David L. Tennenhouse Arthur C. Smith 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Engineering in Electrical Engineering and Computer Science at the  All rights reserved. Author  Certified by  Professor Thesis Supervisor Certified by  Senior Research Scientist Thesis Supervisor Accepted by  Chairman, Departmental Committee on Graduate Theses  
Date: May 1997  May 27, 1997  
Affiliation: MASSACHUSETTS INSTITUTE OF TECHNOLOGY  c Massachusetts Institute of Technology 1997.  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Mark B. Abbot and Larry L. </author> <title> Peterson A Language-Based Approach to Protocol Implementation September 23, </title> <year> 1993. </year>
Reference: [2] <author> D. Scott Alexander et al. </author> <title> Active Bridging. </title> <note> To appear in ACM Sigcomm, </note> <year> 1997. </year>
Reference-contexts: The Protocol Booster [16] project at the University of Pennsylvania has focused on inserting customized processing into protocol stacks. For example, the processing could be a compression or decompression procedure. Also at the University of Pennsylvania is the Active Bridging <ref> [2] </ref> project that has focused on making an Ethernet bridge that can change its tree discovery protocol "on-the-fly". 2.4 Operating Systems There has been a great deal work done within the operating systems community to build extensible operating systems that allow applications to customize system services.
Reference: [3] <author> D. Scott Alexander et al. </author> <title> Active Network Encapsulation Protocol (ANEP) RFC. </title> <month> July </month> <year> 1997. </year>
Reference-contexts: Presently an AIPv6 node supports the essential portions of the IPv6 protocol which has made it easy to integrate Active Network functionality, and will make it easy to study and add security measures to the system. 2.3.3 An ActiveBONE There presently is a proposal <ref> [3] </ref> to build a test Active Network within the Internet. This network would have similar characteristics to the 6Bone and MBONE, two virtual networks set up to test the IPv6 and Multicast protocols respectively. Both of those test networks connect two disjoint networks by tunneling through IPv4.
Reference: [4] <author> Ken Arnold, James Gosling. </author> <title> The Java Programming Language. </title> <publisher> Addison-Wesley Publishing Company, Inc. </publisher> <year> 1996. </year>
Reference: [5] <author> Brian N. Bershad et al. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the Fifteenth Symposium on Operating Systems Principles, </booktitle> <year> 1995. </year>
Reference-contexts: At the University of Washington work has been done that allows applications to dynamically load extensions into the kernel <ref> [5] </ref>. Like an AIPv6 node their implementation relies on a type-safe language to provide a level of protection between the resource interfaces and imported code. They have also defined a network architecture in which applications can insert protocol extensions [17].
Reference: [6] <author> Samrat Bhattacharjee, Kenneth L. Calvert and Ellen W. Zegura. </author> <title> An Architecture for Active Networking 1996. </title>
Reference-contexts: Unlike the AIPv6 implementation described within this report, the "ActiveBONE" proposal does not support direct interoperation with non-Active IPv6 end nodes. 2.3.4 Applications A number of other researchers have focused on the use of Active Networks to address specific networking problems. Researchers at Georgia Tech. <ref> [6] </ref> have focused on incorporating a small set of Active func 1 Note, this name has not yet been proposed. I am using it to create an analogy between a test Active Network and the test IPv6 and multicast networks of today. 19 tionality into an existing IP implementation.
Reference: [7] <author> Andrew D. Birrell and Bruce Jay Nelson. </author> <title> Implementing Remote Procedure Calls. </title> <journal> In ACM Transactions on Computer Systems, </journal> <volume> Vol. 2, No. 1, </volume> <month> February </month> <year> 1984. </year>
Reference: [8] <author> Andrew Birrell, Greg Nelson, Susan Owicki, and Edward Wobber. </author> <title> Network Objects. </title> <booktitle> In SIGOPS, </booktitle> <month> December </month> <year> 1993. </year>
Reference: [9] <author> David C. Clark. </author> <title> Modularity and Efficiency in Protocol Implementation. </title> <type> RFC 817. </type> <month> July </month> <year> 1982. </year>
Reference: [10] <author> David C. Clark. </author> <title> The Structuring of Systems Using Upcalls. </title> <booktitle> In Proceedings of the Tenth Symposium on Operating Systems Principles, </booktitle> <year> 1985. </year>
Reference-contexts: Inter-module Communication Packets enter an AIPv6 node either from the network or from an application. 1 Since the Java Runtime does not easily support event and interrupt driven processing at the programming level (with the exception of graphical interface events), AIPv6 modules move packets between them by using upcalls <ref> [10] </ref>. Each module implements a send and receive 1 If an AIPv6 node is used as an end node, then the application would be part of the primary path into the node.
Reference: [11] <author> David D. Clark and David L. Tennenhouse. </author> <title> Architectural Considerations for a New Generation of Protocols. </title> <booktitle> ACM Sigcomm, </booktitle> <year> 1990. </year>
Reference-contexts: A wide range of applications use IP to transmit data amongst themselves. However, despite the diversity above and below the network layer, IP itself is rigid, slow to evolve and difficult to adopt to physical and application layer needs. In 1990, Clark and Tennenhouse <ref> [11] </ref> described the need for an adaptable network.
Reference: [12] <author> S.E. Deering and D.R. </author> <title> Cheriton Host Groups: A Multicast Extension to the Internet Protocol RFC 966. </title> <month> December </month> <year> 1985. </year>
Reference-contexts: In IPv4 most of these extension headers were treated as options. The IPv6 specification still does not guarantee support by IPv6 nodes for heavily requested features such as multicast <ref> [12] </ref> and mobility [26]. Using an AIPv6 architecture in a significant portion of the IPv6 network would allow 17 these features to be easily deployed. 2.2 Java Java is a relatively new language that has a number of features which make it amenable to an Active Network.
Reference: [13] <author> S. Deering and R. Hinden. </author> <title> Internet Protocol, Version 6 (IPv6) Specification. </title> <type> RFC 1883. </type> <month> December </month> <year> 1995. </year>
Reference-contexts: performance measurements, and concludes. 16 Chapter 2 Background and Related Work This chapter gives background information on the protocol and tools used to build an AIPv6 node; and relates this work to research done in the network and operating systems communities. 2.1 IPv6 The AIPv6 node supports the IPv6 protocol <ref> [13] </ref>, which is the successor to IPv4. The major benefit IPv6 has over IPv4 is a larger address space; an IPv6 address has a length of 128 bits whereas an IPv4 address has a length of 32 bits.
Reference: [14] <author> Peter Druschel and Gaurav Banga. </author> <title> Lazy Receiver Processing (LRP): A Network Sub 63 system Architecture for Server Systems. </title> <booktitle> In USENIX 2nd Symposium on Operating Systems Design and Implementation, </booktitle> <address> Seattle, Washington, </address> <month> October </month> <year> 1996. </year>
Reference: [15] <author> Dawson R. Engler, M. Frans Kaashoek, and James O'Toole Jr. Exokernel: </author> <title> An Operating System Architecture for Application-Level Resource Management. </title> <booktitle> In Proceedings of the Fifteenth Symposium on Operating Systems Principles, </booktitle> <year> 1995. </year>
Reference-contexts: Unlike the node presented in this report, their work applies only to network host nodes. Work has also been done at MIT that has focused on safely exposing low level system resources to library operating systems <ref> [15] </ref>. A related activity also allows applications to insert customized protocol handlers into their kernels [34]. Finally, Sun Microsystems has also implemented a Java TCP/IP stack for their Java OS platform [23].
Reference: [16] <author> D.C. Feldmeier, A.J. McAuley and J.M. Smith. </author> <title> Protocol Boosters. </title> <note> Submitted to IEEE JSAC. </note>
Reference-contexts: Their goal has been to study the benefits an Active Network could have towards reducing network congestion. For experimental purposes they use an out-of-band code approach in which Active packets can only call predefined methods within the network node. The Protocol Booster <ref> [16] </ref> project at the University of Pennsylvania has focused on inserting customized processing into protocol stacks. For example, the processing could be a compression or decompression procedure.
Reference: [17] <author> Marc E. Fiuczynski and Brian N. Bershad. </author> <title> An Extensible Protocol Architecture for Application-Specific Networking. </title> <booktitle> In Usenix Winter Conference, </booktitle> <year> 1996. </year>
Reference-contexts: Like an AIPv6 node their implementation relies on a type-safe language to provide a level of protection between the resource interfaces and imported code. They have also defined a network architecture in which applications can insert protocol extensions <ref> [17] </ref>. Unlike the node presented in this report, their work applies only to network host nodes. Work has also been done at MIT that has focused on safely exposing low level system resources to library operating systems [15].
Reference: [18] <author> J. Gosling. </author> <title> Java Intermediate Bytecodes. </title> <booktitle> In SIGPLAN Workshop on Intermediate Representations, </booktitle> <month> January </month> <year> 1995, </year> <month> AMC. </month>
Reference: [19] <author> James Gosling, Bill Joy, Guy Steele. </author> <title> The Java Language Specification. </title> <publisher> Addison-Wesley Publishing Company, Inc. </publisher> <month> August </month> <year> 1996. </year>
Reference: [20] <author> N. C. Hutchinson and L. L. Peterson. </author> <title> The x-Kernel: An architecture for Implementing Network Protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan. </month> <year> 1991. </year>
Reference: [21] <author> Dave Katz and Randall Atkinson. </author> <title> IPv6 Router Alert Option. Work in Progress. </title> <publisher> draft-ietf-ipngwg-ipv6-router-alert-01.txt. </publisher>
Reference-contexts: An option could also be inserted into the hop-by-hop options header that would alert AIPv6 routers to the presence of this payload within the packet. This type of option has been proposed in <ref> [21] </ref>. The benefit of this option is that an AIPv6 router would not have to parse every packet's extension headers in search of an Active header.
Reference: [22] <author> Lok Tin Liu, Alan Mainwaring, Chad Yoshikawa. </author> <title> White Paper on Building TCP/IP Active Messages. </title>
Reference: [23] <author> Peter Madany, Susan Keohan, Douglas Kramer, and Tom Saulpaugh. </author> <title> JAVAOS: A Standalone Java Environment (Whitepaper). </title>
Reference-contexts: A related activity also allows applications to insert customized protocol handlers into their kernels [34]. Finally, Sun Microsystems has also implemented a Java TCP/IP stack for their Java OS platform <ref> [23] </ref>.
Reference: [24] <author> Jeffrey C. Mogul and Richard F. Rashid. </author> <title> The Packet Filter: An Efficient Mechanism for User-level Network Code. </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Operating Systems Principles , 1987. </booktitle>
Reference: [25] <editor> Allen B. Montz et al. Scout: </editor> <booktitle> A Communications-Oriented Operating System (Whitepa-per). </booktitle> <month> June 17, </month> <year> 1994. </year>
Reference: [26] <author> Perkins, C.E. </author> <title> IP Mobility Support RFC 2002. </title> <month> October </month> <year> 1996. </year>
Reference-contexts: In IPv4 most of these extension headers were treated as options. The IPv6 specification still does not guarantee support by IPv6 nodes for heavily requested features such as multicast [12] and mobility <ref> [26] </ref>. Using an AIPv6 architecture in a significant portion of the IPv6 network would allow 17 these features to be easily deployed. 2.2 Java Java is a relatively new language that has a number of features which make it amenable to an Active Network.
Reference: [27] <author> J.H. Saltzer, D.P. Reed and D.D. Clark. </author> <title> End-To-End Arguments in System Design. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 2 No. 4, </volume> <month> November </month> <year> 1984, </year> <pages> Pages 277-288. </pages>
Reference: [28] <author> J.S. Shapiro, S.J. Muir, J.M. Smith and D.J. </author> <title> Farber Operating System Support for Active Networks </title>
Reference: [29] <author> J.M. Smith et al. SwitchWare: </author> <title> Accelerating Network Evolution (White Paper). </title> <month> June </month> <year> 1996. </year>
Reference: [30] <author> W. Richard Stevens. </author> <title> TCP/IP Illustrated, Volume 1, The Protocols. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1994. </year> <month> 64 </month>
Reference: [31] <author> David L. Tennenhouse and David J. Wetherall. </author> <title> Towards an Active Network Architec--ture. </title> <booktitle> In Multimedia Computing and Networking, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: Implementing multicast in the same ad hoc manner which developers have implemented firewalls would be problematic because multicast will only work if it is supported on a global scale. In response to IP's inability to adapt to changing application needs, a new type of network architecture, an Active Network <ref> [31] </ref>, has been proposed. This architecture allows 12 applications to dynamically extend the functionality of the network by injecting customized protocols, also known as application specific protocols, into it. In this type of network, packets select the protocol by which they wish to be processed.
Reference: [32] <author> C.A. Thekkath, T.D. Nguyen, Evelyn Moy and E.D. Lazowska. </author> <title> Implementing Network Protocols at User Level. </title> <booktitle> ACM Sigcomm, </booktitle> <year> 1993. </year>
Reference: [33] <author> Robert Wahbe, Steven Lucco, Thomas E. Anderson, and Susan L. Graham. </author> <title> Efficient Software-Based Fault Isolation. </title> <booktitle> In Proceedings of the Fourteenth Annual Symposium on Operating Systems Principles, </booktitle> <year> 1993. </year>
Reference: [34] <author> Deborah A. Wallach, Dawson R. Engler and M. Frans Kaashoek. ASHs: </author> <title> Application-Specific Handlers for High-Performance Messaging. </title> <booktitle> ACM Sigcomm, </booktitle> <year> 1996. </year>
Reference-contexts: Work has also been done at MIT that has focused on safely exposing low level system resources to library operating systems [15]. A related activity also allows applications to insert customized protocol handlers into their kernels <ref> [34] </ref>. Finally, Sun Microsystems has also implemented a Java TCP/IP stack for their Java OS platform [23].
Reference: [35] <author> David Wetherall. </author> <title> Safety Mechanisms for Mobile Code. </title> <type> Area Exam Paper, </type> <institution> MIT Laboratory for Computer Science, </institution> <month> November </month> <year> 1995. </year>
Reference: [36] <author> David Wetherall, John Guttag and David Tennenhouse. </author> <title> ANTS: A Toolkit for Building and Dynamically Deploying Network Protocols. </title> <note> Submitted to IEEE OPENARCH'98, </note> <year> 1998. </year>
Reference-contexts: Network nodes process the packet by executing the accompanying code. Since an in-band code loading scheme maps very well to a datagram network such as IP, it is the one that this implementation supports. 1.1.1 ANTS ANTS (Active Node Transport System) <ref> [36] </ref> is a reference Active Network implementation, and the one which I have incorporated into my architecture. The ANTS implementation uses a variant of the in-band approach towards building an Active Network architecture. <p> The AIPv6 node incorporates the Active Network functionality of ANTS <ref> [36] </ref>. The code transport protocol and resource interfaces in an ANTS node have direct counterparts in the AIPv6 node. ANTS does not support the IPv6 protocol though, and thus cannot interoperate with Active and non-Active IPv6 nodes.
Reference: [37] <author> David J. Wetherall and David L. Tennenhouse. </author> <title> The Active IP Option. </title> <booktitle> In Proceedings of the Seventh ACM SIGOPS European Workshop, </booktitle> <address> Sept.1996. </address>
Reference-contexts: How can commonalities between packets and capsules be exploited in the implementation? How can the node achieve security for its resources? To exploit the similarities between packets and capsules I have made IPv6 the default functionality for all capsule implementations. Building on the work presented in <ref> [37] </ref> AIPv6 packet, which are the IP analogue of ANTS capsules, utilize an option plus an IP payload to transport parameter values and programming code respectively throughout an IPv6 network. This ensures that non-Active IPv6 end nodes will not generate errors when processing AIPv6 packets. <p> cannot use ANTS to either experiment with changes to the IP protocol or study the effects of using Active protocols within a hybrid network of Active and non-Active nodes. 2.3.2 Active Options The prime motivator for building an IP node that incorporates Active Network functionality has been the Active Options <ref> [37] </ref> work done here at MIT. This proof of concept work demonstrated the feasibility of building an Active Network within the IP protocol. IPv4 18 nodes within this architecture interpreted Tcl scripts sent by applications. The Active nodes supported a handful of procedures that the Tcl scripts could call. <p> An IPv6 option would be a good choice for code transport because it can instruct IPv6 nodes (source, destination and intermediate) to ignore the option if the nodes do not understand it. Using an option to transport code continues on the work done in <ref> [37] </ref>. Furthermore since there will be network socket support for applications at the end nodes to insert options in and receive options from the hop-by-hop options header, using an option would allow an application to use Active Network technology while running over an IPv6 end node.
Reference: [38] <author> Gary R. Wright and W. Richard Stevens. </author> <title> TCP/IP Illustrated, </title> <booktitle> Volume 2, The Implementation. </booktitle> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1995. </year> <month> 65 </month>
References-found: 38

