URL: http://www.cs.cornell.edu/Info/People/hayden/maestro.ps
Refering-URL: http://www.cs.cornell.edu/Info/People/hayden/publications.htm
Root-URL: 
Email: fken,roy,haydeng@cs.cornell.edu  
Title: The Maestro Group Manager: A Structuring Tool For Applications With Multiple Quality of Service Requirements  
Author: Ken Birman Roy Friedman Mark Hayden 
Date: February 4, 1997  
Address: Ithaca, NY 14850, USA  
Affiliation: Dept. of Computer Science Cornell University  
Abstract: Maestro is a tool for managing sets of protocol stacks that satisfy varied quality of service or security requirements. Intended primarily for multimedia groupware settings, it permits a single application to efficiently operate over multiple side-by-side protocol stacks, each specialized to a different communication stream. Maestro can also be used to manage other sorts of external protocol stacks, for example to orchestrate connection setups that require coordinated actions at all endpoints in a multicast group. Our tools are fault-tolerant and secure; they can safely distribute session keys or handle delicate synchronization tasks that would otherwise complicate the managed stacks and potentially interfere with their quality-of-service objectives. Moreover, Maestro can automatically track subgroup membership on the basis of "properties", facilitating its use by developers who prefer not to work directly with multicast communication interfaces. fl This work was supported by ARPA/ONR grant N00014-96-I-1014.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A Communication Sub-System for High Availability. </title> <booktitle> In Proc. of the 22nd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year>
Reference: [2] <author> O. Babaoglu, R. Davoli, L. Giachini, and M. Baker. Relacs: </author> <title> A Communication Infrastructure for Constructing Reliable Applications in Large-Scale Distributed Systems. </title> <type> Technical Report UBLCS-94-15, </type> <institution> Department of Computer Science, University of Bologna, </institution> <month> June </month> <year> 1994. </year> <note> Revised January 1995. </note>
Reference: [3] <author> O. Babaoglu, R. Davoli, L. Giachini, and P. Sabattini. </author> <title> The Inherent Cost of Strong-Partial View-Synchronous Communication. </title> <type> Technical Report UBLCS-95-11, </type> <institution> Department of Computer Science, University of Bologna, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: to deliver a message broadcast via cast-group. 4.4 Maestro's Membership Properties Writing a formal definition of group membership, and in particular for virtual synchrony, is a difficult task, which can be a topic for a paper by itself. (See the frenzy of papers on virtual synchrony in recent years, e.g., <ref> [3, 7, 10, 13, 19, 20, 23] </ref>.) In this paper, we only provide an informal definition of the main membership properties provided by Maestro.
Reference: [4] <author> A. Basu, V. Buch, W. Vogels, and T. von Eiken. U-Net: </author> <title> A User-Level Network Interface for Parallel and Distributed Computing. </title> <booktitle> In Proc. of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 40-53, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: Maestro also provides hooks for the application to do more elaborate state transfers if needed. In this paper we also discuss how this approach helps in cluster management, providing prioritized delivery for real-time applications, managing external communication stacks such as TCP and user level communication interfaces (e.g., U-Net <ref> [4] </ref>) in a secure way, and providing multi-level security. The rest of this paper is organized as follows: Group communication systems and virtual synchrony are briefly described in the next section. A discussion of how applications can use Maestro appears in Section 3. <p> And there may be a need for consistent data, such as session keys. Maestro can assist in solving all of these problems. Also, in recent years, several high-performance user level communication stacks, such as U-Net <ref> [4] </ref> and Active Messages have been developed. Such interfaces typically incur user-to-user latencies of 30-40 microseconds, and can saturate ATM links with fairly small messages. This performance is achieved by keeping the system kernel out of the critical path of normal messages, and employing highly efficient memory management policies.
Reference: [5] <author> K. Birman and T. Joseph. </author> <title> Exploiting Virtual Synchrony in Distributed Systems. </title> <booktitle> In Proc. of the 11th ACM Symp. on Operating Systems Principles, </booktitle> <pages> pages 123-138, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: Examples of group communication systems include, Consul, Delta-4, Horus, ISIS, Phoenix, Relacs, RMP, Transis, TOTEM, and the V system. A general treatment of the area can be found in [6]. Our own work was based on the Ensemble system, which supports a communication model called virtual synchrony <ref> [5, 6] </ref>. The details of the model will not be important in this paper, except insofor as they permit consistent, secure, and fault-tolerant actions at sets of communication endpoints.
Reference: [6] <author> K. P. Birman. </author> <title> Building Secure and Reliable Network Applications. </title> <publisher> Manning Publishing Company and Prentice Hall, </publisher> <month> December </month> <year> 1996. </year>
Reference-contexts: This leads to an architecture in which some form of core protocol management group controls a set of managed substacks. For such purposes, we believe that virtually synchronous group communication tools <ref> [6] </ref> find a natural fit. <p> Examples of group communication systems include, Consul, Delta-4, Horus, ISIS, Phoenix, Relacs, RMP, Transis, TOTEM, and the V system. A general treatment of the area can be found in <ref> [6] </ref>. Our own work was based on the Ensemble system, which supports a communication model called virtual synchrony [5, 6]. The details of the model will not be important in this paper, except insofor as they permit consistent, secure, and fault-tolerant actions at sets of communication endpoints. <p> Examples of group communication systems include, Consul, Delta-4, Horus, ISIS, Phoenix, Relacs, RMP, Transis, TOTEM, and the V system. A general treatment of the area can be found in [6]. Our own work was based on the Ensemble system, which supports a communication model called virtual synchrony <ref> [5, 6] </ref>. The details of the model will not be important in this paper, except insofor as they permit consistent, secure, and fault-tolerant actions at sets of communication endpoints.
Reference: [7] <author> T. Chandra, V. Hadzilacos, S. Toueg, and B. Charron-Bost. </author> <title> On the Impossibility of Group Membership. </title> <booktitle> In Proc. of the 15th ACM Symposium of Principles of Distributed Computing, </booktitle> <pages> pages 322-330, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: to deliver a message broadcast via cast-group. 4.4 Maestro's Membership Properties Writing a formal definition of group membership, and in particular for virtual synchrony, is a difficult task, which can be a topic for a paper by itself. (See the frenzy of papers on virtual synchrony in recent years, e.g., <ref> [3, 7, 10, 13, 19, 20, 23] </ref>.) In this paper, we only provide an informal definition of the main membership properties provided by Maestro.
Reference: [8] <author> C. Chang, G. Czajkowski, and T. von Eicken. </author> <title> Design and Performance of Active Messages on the SP-2. </title> <type> Technical Report TR96-1572, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> February </month> <year> 1996. </year>
Reference: [9] <author> G. Chockler, N. Huleihel, I. Keidar, and D. Dolev. </author> <title> Multimedia Multicast Transport Service for Groupware. </title> <booktitle> In Proc. of the TINA 96 Conference, </booktitle> <pages> pages 43-54, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: Also, the work in [22] mainly addresses collaborative computing applications (CSCW), while as explained is Section 3, we explicitly support other kinds of applications, including cluster management, prioritized delivery, and multilevel security. Recently, Chockler et al. <ref> [9] </ref> proposed the "Multimedia Multicast Transport Service for Group-ware" (MMTS) architecture for supporting multiple quality of service for multimedia application using group communication. While MMTS is similar to Maestro in providing support for multiple data stacks, it lacks provisions for having different membership in each subgroup. <p> While MMTS is similar to Maestro in providing support for multiple data stacks, it lacks provisions for having different membership in each subgroup. Moreover, in the model proposed by <ref> [9] </ref>, all messages must belong to a particular bunch, and must be delivered, regardless of the data stack they were sent on, between the begin-bunch and end-bunch operations. 21 We believe that enforcing this on all stacks would be unnecessarily restrictive in the applications of interest to us.
Reference: [10] <author> F. Cristian and F. Schmuck. </author> <title> Agreeing on Processor-Group Membership in Asynchronous Distributed Systems. </title> <type> Technical Report CSE95-428, </type> <institution> Department of Computer Science, University of California, </institution> <address> San Diego, </address> <year> 1995. </year>
Reference-contexts: to deliver a message broadcast via cast-group. 4.4 Maestro's Membership Properties Writing a formal definition of group membership, and in particular for virtual synchrony, is a difficult task, which can be a topic for a paper by itself. (See the frenzy of papers on virtual synchrony in recent years, e.g., <ref> [3, 7, 10, 13, 19, 20, 23] </ref>.) In this paper, we only provide an informal definition of the main membership properties provided by Maestro.
Reference: [11] <author> R. Friedman and K. Birman. </author> <title> Using Group Communication Technology to Develop a Reliable and Scalable Distributed IN Coprocessor. </title> <booktitle> In Proc. of the TINA 96 Conference, </booktitle> <pages> pages 25-41, </pages> <month> September </month> <year> 1996. </year>
Reference-contexts: An example of a typical architecture for such a cluster was given by Friedman and Birman <ref> [11] </ref>, and is depicted in Figure 2. 2 In this case, there are several (two) external adaptors, or EAs for short, to which clients of the system connect and send their requests.
Reference: [12] <author> R. Friedman and R. van Renesse. </author> <title> Packing Messages as a Tool for Boosting the Performance of Total Ordering Protocols. </title> <type> Technical Report TR95-1527, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> July </month> <year> 1995. </year> <note> Submitted for publication. </note>
Reference-contexts: When there are no failures, the view protocol consists one point to point message for each member of the subgroup and two broadcasts by the coordinator to the entire core group. Although the broadcasts are sent to more processes than are necessary, message packing techniques <ref> [12] </ref> are used so that the Sync and View broadcasts for different subgroups can be aggregated and sent in a single message. This reduces the overall load when multiple group changes occur simultaneously, which is often the case when new applications join multiple subgroups.
Reference: [13] <author> R. Friedman and R. van Renesse. </author> <title> Strong and Weak Virtual Synchrony in Horus. </title> <type> Technical Report TR95-1491, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: to deliver a message broadcast via cast-group. 4.4 Maestro's Membership Properties Writing a formal definition of group membership, and in particular for virtual synchrony, is a difficult task, which can be a topic for a paper by itself. (See the frenzy of papers on virtual synchrony in recent years, e.g., <ref> [3, 7, 10, 13, 19, 20, 23] </ref>.) In this paper, we only provide an informal definition of the main membership properties provided by Maestro.
Reference: [14] <author> L. Lamport. </author> <title> How to Make a Multiprocessor Computer that Correctly Executes Multiprocess Programs. </title> <journal> IEEE Trans. on Computers, </journal> <volume> C-28(9):690-691, </volume> <year> 1979. </year> <month> 23 </month>
Reference: [15] <author> C. Malloth, P. Felber, A. Schiper, and U. Wilhelm. </author> <title> Phoenix: A Tollkit for Building Fault--Tolerant Distributed Application in Large Scale. </title> <type> Technical report, </type> <institution> Department d'Informatique, Ecole Polytechnique Federale de Lausanne, </institution> <month> July </month> <year> 1995. </year>
Reference: [16] <author> S. McCanne and V. Jacobson. </author> <title> Vic: A Flexible Framework for Packet Video. </title> <booktitle> In Proc. of ACM Multimedia, </booktitle> <pages> pages 511-522, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: On the other hand, text in the chat area should be delivered reliably and all participants should see postings in the same order. For video, we would probably want to use a coding scheme similar to the one used by vic <ref> [16] </ref>. Here, one stack is used for X-frames, which should be delivered to all participants, while another is used for Y frames, and delivered only to participants running on nodes that support high bandwidth links to the video sender.
Reference: [17] <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> Consul: A Communication Substrate for Fault-Tolerant Distributed Programs. </title> <journal> Distributed Systems Engineering Journal, </journal> <volume> 1(2) </volume> <pages> 87-103, </pages> <month> De-cember </month> <year> 1993. </year>
Reference: [18] <author> L. Moser, P. M. Melliar-Smith, D. Agarwal, R. Budhia, and C. Lingley-Papadopoulos. </author> <month> Totem: </month>
References-found: 18

