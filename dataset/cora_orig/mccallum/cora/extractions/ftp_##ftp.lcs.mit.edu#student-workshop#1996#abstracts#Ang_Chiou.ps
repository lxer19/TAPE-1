URL: ftp://ftp.lcs.mit.edu/student-workshop/1996/abstracts/Ang_Chiou.ps
Refering-URL: http://csg-www.lcs.mit.edu:8001/Users/derek/
Root-URL: 
Email: hahaha@lcs.mit.edu, derek@lcs.mit.edu  
Title: StarT-Voyager  
Author: Boon S. Ang and Derek Chiou 
Web: NE43-205, NE43-203  
Abstract: This paper describes the StarT-Voyager Cluster Area Network (ClAN) Parallel System. ClAN is a new class of parallel systems designed to bridge the performance and functionality gap between traditional MPPs and NOWs (networks of workstations). By constructing a parallel machine with unmodified commercial SMPs as the building block, a ClAN system inherits most of the advantages of the NOW approach. In addition by chosing the coherent memory bus as the point of interface, a ClAN system achieves better message passing performance than NOWs, and also offers coherent distributed shared memory. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Agarwal, R. Bianchini, D. Chaiken, K. L. Johnson, D. Kranz, J. Kubiatowicz, B.-H. Lim, K. Mackenzie, and D. Yeung. </author> <title> The MIT Alewife Machine: Architecture and Performance. </title> <booktitle> In Proceedings of the 22nd Annual International Symposium on Computer Architecture, </booktitle> <year> 1995. </year>
Reference-contexts: coherent distributed shared memory and fast user-level message passing using a small but comprehensive set of mechanisms implemented by the NES hardware and system software. 2 Shared Memory Support The shared memory support in StarT-Voyager builds on earlier works including the Stanford DASH [5, 6], Wisonsin Typhoon [8], MIT Alewife <ref> [1] </ref>, Stanford FLASH [3] and earlier versions of StarT [7, 2]. As a prototype, StarT-Voyager is designed to efficiently support a wide range of experimentation, including studying a diverse set of coherent shared memory schemes.
Reference: [2] <author> D. Chiou, B. S. Ang, Arvind, M. J. Beckerle, A. Boughton, R. Greiner, J. E. Hicks, and J. C. Hoe. StarT-ng: </author> <title> Delivering Seamless Parallel Computing. </title> <booktitle> In Proceedings of EURO-PAR '95, </booktitle> <address> Stockholm, Sweden, </address> <pages> pages 101 - 116, </pages> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: using a small but comprehensive set of mechanisms implemented by the NES hardware and system software. 2 Shared Memory Support The shared memory support in StarT-Voyager builds on earlier works including the Stanford DASH [5, 6], Wisonsin Typhoon [8], MIT Alewife [1], Stanford FLASH [3] and earlier versions of StarT <ref> [7, 2] </ref>. As a prototype, StarT-Voyager is designed to efficiently support a wide range of experimentation, including studying a diverse set of coherent shared memory schemes.
Reference: [3] <author> J. Kuskin, D. Ofelt, M. Heinrich, J. Heinlein, R. Simoni, K. Gharachorloo, J. Chaplin, D. Nakahira, J. Baxter, M. Horowitz, A. Gupta, M. Rosenblum, and J. Hennessy. </author> <title> The Stanford FLASH Multiprocessor. </title> <booktitle> In Proceedings of the 21st Annual International Symposium on Computer Architecture, </booktitle> <address> Chicago, Il, </address> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: memory and fast user-level message passing using a small but comprehensive set of mechanisms implemented by the NES hardware and system software. 2 Shared Memory Support The shared memory support in StarT-Voyager builds on earlier works including the Stanford DASH [5, 6], Wisonsin Typhoon [8], MIT Alewife [1], Stanford FLASH <ref> [3] </ref> and earlier versions of StarT [7, 2]. As a prototype, StarT-Voyager is designed to efficiently support a wide range of experimentation, including studying a diverse set of coherent shared memory schemes.
Reference: [4] <author> C. E. Leiserson et al. </author> <title> The Network Architecture of the Connection Machine CM-5. </title> <booktitle> In Proceedings of the 1992 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <year> 1992. </year>
Reference-contexts: The NES hardware directly supports a small number of resident message queues (resident queues). These queues are buffered in NES SRAM and are managed by dedicated NES hardware, without sP intervention. User application code can directly access the resident message queues, just like in the CM-5 <ref> [4] </ref>. Additional queues, which are buffered in DRAM and have exactly the same software interface as the resident queues, are managed by the sP. For these additional queues, the sP must explicitly move the composed messages from DRAM into a resident queue for transmitting and does similarly for received messages.
Reference: [5] <author> D. Lenoski, J. Laudon, K. Charachorloo, A. Gupta, and J. Hennessy. </author> <title> The Directory-Based Cache Coherence Protocol for the DASH Multiprocesor. </title> <booktitle> In Proceedings of the 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 148 - 159. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference-contexts: StarT-Voyager will support coherent distributed shared memory and fast user-level message passing using a small but comprehensive set of mechanisms implemented by the NES hardware and system software. 2 Shared Memory Support The shared memory support in StarT-Voyager builds on earlier works including the Stanford DASH <ref> [5, 6] </ref>, Wisonsin Typhoon [8], MIT Alewife [1], Stanford FLASH [3] and earlier versions of StarT [7, 2]. As a prototype, StarT-Voyager is designed to efficiently support a wide range of experimentation, including studying a diverse set of coherent shared memory schemes.
Reference: [6] <author> D. Lenoski, J. Laudon, T. Joe, D. Nakahira, L. Stevens, A. Gupta, and J. Hennessy. </author> <title> The DASH Prototype: Implementation and Performance. </title> <booktitle> In Proceedings of the 19th Annual International Symposium on Computer Architecture, </booktitle> <address> Gold Coast, Australia, </address> <pages> pages 92 - 103, </pages> <year> 1992. </year>
Reference-contexts: StarT-Voyager will support coherent distributed shared memory and fast user-level message passing using a small but comprehensive set of mechanisms implemented by the NES hardware and system software. 2 Shared Memory Support The shared memory support in StarT-Voyager builds on earlier works including the Stanford DASH <ref> [5, 6] </ref>, Wisonsin Typhoon [8], MIT Alewife [1], Stanford FLASH [3] and earlier versions of StarT [7, 2]. As a prototype, StarT-Voyager is designed to efficiently support a wide range of experimentation, including studying a diverse set of coherent shared memory schemes.
Reference: [7] <author> R. H. Nikhil, G. M. Papdopoulos, and Arvind. </author> <title> *T: A Multithreaded Massively Parallel Architecture. </title> <booktitle> In The 19th Annual International Symposium on Computer Architecture Conference Proceedings, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: using a small but comprehensive set of mechanisms implemented by the NES hardware and system software. 2 Shared Memory Support The shared memory support in StarT-Voyager builds on earlier works including the Stanford DASH [5, 6], Wisonsin Typhoon [8], MIT Alewife [1], Stanford FLASH [3] and earlier versions of StarT <ref> [7, 2] </ref>. As a prototype, StarT-Voyager is designed to efficiently support a wide range of experimentation, including studying a diverse set of coherent shared memory schemes.
Reference: [8] <author> S. K. Reinhardt, J. R. Larus, and D. A. Wood. Tempest and Typhoon: </author> <title> User-Level Shared Memory. </title> <booktitle> In Proceedings of the 21st Annual International Symposium on Computer Architecture, </booktitle> <address> Chicago, Il, </address> <pages> pages 325 - 336, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: StarT-Voyager will support coherent distributed shared memory and fast user-level message passing using a small but comprehensive set of mechanisms implemented by the NES hardware and system software. 2 Shared Memory Support The shared memory support in StarT-Voyager builds on earlier works including the Stanford DASH [5, 6], Wisonsin Typhoon <ref> [8] </ref>, MIT Alewife [1], Stanford FLASH [3] and earlier versions of StarT [7, 2]. As a prototype, StarT-Voyager is designed to efficiently support a wide range of experimentation, including studying a diverse set of coherent shared memory schemes.
Reference: [9] <author> A. Saulsbury, T. Wilkinson, J. Carter, and A. Landin. </author> <title> An Argument for Simple COMA. </title> <booktitle> In Proceedings of the First IEEE Symposium on High-Performance Computer Architecture, </booktitle> <address> Raleigh, </address> <publisher> North Carolina, </publisher> <pages> pages 276 - 285, </pages> <month> Jan. </month> <year> 1995. </year> <month> 2 </month>
Reference-contexts: In this capacity, the NES behaves as the slave for these addresses. A second view proposed in Typhoon and S-COMA <ref> [9] </ref> "demand maps" part of the shared memory space into local DRAM, essentially using it as a cache of shared memory, with page-level allocation, and cache-line granularity access control. The NES behaves as a snooper for these addresses.
References-found: 9

