URL: http://theory.lcs.mit.edu/~andrews/load.ps
Refering-URL: http://theory.lcs.mit.edu/~andrews/
Root-URL: 
Email: andrews@math.mit.edu  goemans@math.mit.edu  ylz@math.mit.edu  
Title: Improved Bounds for On-line Load Balancing  
Author: Matthew Andrews Michel X. Goemans Lisa Zhang 
Note: Supported by NSF contract 9302476-CCR and ARPA contract N00014-95-1-1246. Supported by NSF contract 9302476-CCR and an NEC research grant. Supported by an NSF graduate fellowship and ARPA contract N00014-95-1-1246.  
Affiliation: Department of Mathematics, MIT.  
Abstract: We consider the following load balancing problem. Jobs arrive on-line and must be assigned to one of m machines thereby increasing the load on that machine by a certain weight. Jobs also depart on-line. The goal is to minimize the maximum load on any machine, the load being defined as the sum of the weights of the jobs assigned to the machine. The scheduler has also the option of preempting a job and reassigning it to another machine. Whenever a job is assigned or reassigned to a machine, the on-line algorithm incurs a reassignment cost depending on the job. For arbitrary reassignment costs, we present an on-line algorithm with a competitive ratio of 3:5981 against current load, i.e. the maximum load at any time is less than 3:5981 times the lowest achievable load at that time. Our algorithm also incurs a reassignment cost less than 6:8285 times the cost of assigning all the jobs. This is the first algorithm with a constant bound both on the competitive ratio and on the reassignment factor. For the special cases in which the reassignment costs are either 1 or proportional to the weights, we present several algorithms which improve upon Westbrook's recent 6-competitive algorithm against current load. Our best competitive ratios are 3 + " and 2 + " for the unit and proportional cases respectively. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Andrews. </author> <title> Constant factor bounds for on-line load balancing on related machines. </title> <type> Unpublished manuscript, </type> <year> 1995. </year> <month> 10 </month>
Reference-contexts: Load balancing problems arise naturally in various settings in which jobs have to compete for the available resources. Machines may represent various kinds of communication channels with certain bandwidth, and jobs request for bandwidth <ref> [1, 2, 3, 4, 5, 6, 12] </ref>. Alternatively, machines may represent distributed database platforms, and the jobs may be application programs accessing the database [1, 12]; here, the increase in the load represents the time for an access. <p> Machines may represent various kinds of communication channels with certain bandwidth, and jobs request for bandwidth [1, 2, 3, 4, 5, 6, 12]. Alternatively, machines may represent distributed database platforms, and the jobs may be application programs accessing the database <ref> [1, 12] </ref>; here, the increase in the load represents the time for an access. The on-line load balancing problem has been much studied in connection with the virtual circuit routing problem [2, 3, 12]. <p> ) P C X 2 `+1 2 L 1 + 2 2 + : : : 4LB + 2t LB + 2LB where we have repeatedly used the definition of the lower bound LB, and the fact that P since c i &lt; 2bc i c. 2 Using different techniques, <ref> [1] </ref> obtains an algorithm with a competitive ratio of 32 and a reassignment factor of 79:5.
Reference: [2] <author> J. Aspnes, Y. Azar, A. Fiat, S. Plotkin, and O. Waarts. </author> <title> On-line load balancing with appli-cations to machine scheduling and virtual circuit routing. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 623-631, </pages> <year> 1993. </year>
Reference-contexts: Load balancing problems arise naturally in various settings in which jobs have to compete for the available resources. Machines may represent various kinds of communication channels with certain bandwidth, and jobs request for bandwidth <ref> [1, 2, 3, 4, 5, 6, 12] </ref>. Alternatively, machines may represent distributed database platforms, and the jobs may be application programs accessing the database [1, 12]; here, the increase in the load represents the time for an access. <p> Alternatively, machines may represent distributed database platforms, and the jobs may be application programs accessing the database [1, 12]; here, the increase in the load represents the time for an access. The on-line load balancing problem has been much studied in connection with the virtual circuit routing problem <ref> [2, 3, 12] </ref>. In this problem, the machines are the edges of a network, the jobs are requests for allocating a certain amount of capacity between two given endpoints, and the goal is to minimize the maximum congestion. <p> If the model does not allow for job departures, as in <ref> [2, 6] </ref>, there is no difference between current load and peak load. However, in general, competitiveness against current load is a much stronger notion than competitiveness against peak load. <p> But identity (2) implies that T i +1 c i c s n &gt; opt . Hence we have a contradiction. 2 In the case of arbitrary job weights, Aspnes et al. <ref> [2] </ref> have shown that the generalization of Greedy is fi (log m)-competitive if jobs never depart. Considering our model in which jobs depart, we divide the jobs into levels according to their weights.
Reference: [3] <author> B. Awerbuch, Y.Azar, S. Plotkin, and O. Waarts. </author> <title> Competitive routing of virtual circuits with unknown duration. </title> <booktitle> In Proceedings of the 5th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 321-330, </pages> <year> 1994. </year>
Reference-contexts: Load balancing problems arise naturally in various settings in which jobs have to compete for the available resources. Machines may represent various kinds of communication channels with certain bandwidth, and jobs request for bandwidth <ref> [1, 2, 3, 4, 5, 6, 12] </ref>. Alternatively, machines may represent distributed database platforms, and the jobs may be application programs accessing the database [1, 12]; here, the increase in the load represents the time for an access. <p> Alternatively, machines may represent distributed database platforms, and the jobs may be application programs accessing the database [1, 12]; here, the increase in the load represents the time for an access. The on-line load balancing problem has been much studied in connection with the virtual circuit routing problem <ref> [2, 3, 12] </ref>. In this problem, the machines are the edges of a network, the jobs are requests for allocating a certain amount of capacity between two given endpoints, and the goal is to minimize the maximum congestion. <p> of load balancing, most analyses that have been performed compared the maximum load at time t of the on-line algorithm to the maximum load at any time between 0 and t, the peak load, of the best off-line algorithm presented with the same sequence of job arrivals and departures (see <ref> [3, 4, 5] </ref>). Westbrook [12], however, pointed out that a competitive analysis against peak load is somewhat unrealistic. Although there was a peak in cellular phone demand on June 17, 1994, one cannot be satisfied with being today within a certain ratio of that peak load.
Reference: [4] <author> Y. Azar, A. Broder, and A. Karlin. </author> <title> On-line load balancing. </title> <booktitle> In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 218-225, </pages> <year> 1992. </year>
Reference-contexts: Load balancing problems arise naturally in various settings in which jobs have to compete for the available resources. Machines may represent various kinds of communication channels with certain bandwidth, and jobs request for bandwidth <ref> [1, 2, 3, 4, 5, 6, 12] </ref>. Alternatively, machines may represent distributed database platforms, and the jobs may be application programs accessing the database [1, 12]; here, the increase in the load represents the time for an access. <p> of load balancing, most analyses that have been performed compared the maximum load at time t of the on-line algorithm to the maximum load at any time between 0 and t, the peak load, of the best off-line algorithm presented with the same sequence of job arrivals and departures (see <ref> [3, 4, 5] </ref>). Westbrook [12], however, pointed out that a competitive analysis against peak load is somewhat unrealistic. Although there was a peak in cellular phone demand on June 17, 1994, one cannot be satisfied with being today within a certain ratio of that peak load. <p> If we assign any incoming job to the machine whose load is smallest then the resulting algorithm is (2 1 m )-competitive against peak 2 load, even in the case where jobs depart <ref> [4] </ref>.
Reference: [5] <author> Y. Azar, B. Kalyanasundaram, S. Plotkin, K. Pruhs, and O. Waarts. </author> <title> Online load balancing of temporary tasks. </title> <booktitle> In Proceedings of the 1993 Workshop on Algorithms and Data Structures (WADS 93), Lecture Notes in Computer Science 709, </booktitle> <pages> pages 119-130. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Load balancing problems arise naturally in various settings in which jobs have to compete for the available resources. Machines may represent various kinds of communication channels with certain bandwidth, and jobs request for bandwidth <ref> [1, 2, 3, 4, 5, 6, 12] </ref>. Alternatively, machines may represent distributed database platforms, and the jobs may be application programs accessing the database [1, 12]; here, the increase in the load represents the time for an access. <p> of load balancing, most analyses that have been performed compared the maximum load at time t of the on-line algorithm to the maximum load at any time between 0 and t, the peak load, of the best off-line algorithm presented with the same sequence of job arrivals and departures (see <ref> [3, 4, 5] </ref>). Westbrook [12], however, pointed out that a competitive analysis against peak load is somewhat unrealistic. Although there was a peak in cellular phone demand on June 17, 1994, one cannot be satisfied with being today within a certain ratio of that peak load.
Reference: [6] <author> Y. Azar, J. Naor, and R. </author> <title> Rom. The competitiveness of on-line assignments. </title> <booktitle> In Proceedings of the 3rd Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 203-210, </pages> <year> 1992. </year>
Reference-contexts: Load balancing problems arise naturally in various settings in which jobs have to compete for the available resources. Machines may represent various kinds of communication channels with certain bandwidth, and jobs request for bandwidth <ref> [1, 2, 3, 4, 5, 6, 12] </ref>. Alternatively, machines may represent distributed database platforms, and the jobs may be application programs accessing the database [1, 12]; here, the increase in the load represents the time for an access. <p> If the model does not allow for job departures, as in <ref> [2, 6] </ref>, there is no difference between current load and peak load. However, in general, competitiveness against current load is a much stronger notion than competitiveness against peak load.
Reference: [7] <author> Y. Bartal, A. Fiat, H. Karloff, and R. Vohra. </author> <title> New algorithms for an ancient scheduling problem. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 51-58, </pages> <year> 1992. </year>
Reference-contexts: If we assign any incoming job to the machine whose load is smallest then the resulting algorithm is (2 1 m )-competitive against peak 2 load, even in the case where jobs depart [4]. Bartal et al. <ref> [7] </ref> and Karger et al. [9] give algorithms which are (2 ")-competitive (" a small constant) for the case where jobs never depart. 2 Unit Reassignment Costs Our competitive analyses against current load will be performed by comparing the load of our on-line algorithm at time t to a lower bound
Reference: [8] <author> R. L. Graham. </author> <title> Bounds for certain multiprocessing anomalies. </title> <journal> Bell System Technical Journal, </journal> <volume> 45 </volume> <pages> 1563-1581, </pages> <year> 1966. </year>
Reference-contexts: On-line load balancing is closely related to on-line scheduling in the case where jobs must be assigned immediately upon arrival. Graham's analysis of the greedy algorithm for scheduling <ref> [8] </ref> on identical machines can easily be extended to load balancing. If we assign any incoming job to the machine whose load is smallest then the resulting algorithm is (2 1 m )-competitive against peak 2 load, even in the case where jobs depart [4].
Reference: [9] <author> D. R. Karger, S. J. Phillips, and E. Torng. </author> <title> A better algorithm for an ancient scheduling problem. </title> <booktitle> In Proceedings of the 5th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 132-140, </pages> <year> 1994. </year>
Reference-contexts: If we assign any incoming job to the machine whose load is smallest then the resulting algorithm is (2 1 m )-competitive against peak 2 load, even in the case where jobs depart [4]. Bartal et al. [7] and Karger et al. <ref> [9] </ref> give algorithms which are (2 ")-competitive (" a small constant) for the case where jobs never depart. 2 Unit Reassignment Costs Our competitive analyses against current load will be performed by comparing the load of our on-line algorithm at time t to a lower bound on the lowest achievable load
Reference: [10] <author> S. Phillips and J. Westbrook. </author> <title> Online load balancing and network flow. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 402-411, </pages> <year> 1993. </year>
Reference-contexts: Phillips and Westbrook <ref> [10] </ref> were the first to present competitive analyses against current load, but the distinction between peak and current load was highlighted in Westbrook [12]. The notion of competitiveness against current load is too strong if we don't allow reassignments of jobs (also called job preemptions).
Reference: [11] <author> D. D. Sleator and R. E. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Communications of the ACM, </journal> <volume> 28(2) </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: As usual, the performance of an on-line algorithm can be measured using the notion of competitive analysis <ref> [11] </ref>.
Reference: [12] <author> J. Westbrook. </author> <title> Load balancing for response time. </title> <booktitle> In Proceedings of the 3rd Annual European Symposium on Algorithms, </booktitle> <pages> pages 355-368, </pages> <year> 1995. </year> <month> 11 </month>
Reference-contexts: Load balancing problems arise naturally in various settings in which jobs have to compete for the available resources. Machines may represent various kinds of communication channels with certain bandwidth, and jobs request for bandwidth <ref> [1, 2, 3, 4, 5, 6, 12] </ref>. Alternatively, machines may represent distributed database platforms, and the jobs may be application programs accessing the database [1, 12]; here, the increase in the load represents the time for an access. <p> Machines may represent various kinds of communication channels with certain bandwidth, and jobs request for bandwidth [1, 2, 3, 4, 5, 6, 12]. Alternatively, machines may represent distributed database platforms, and the jobs may be application programs accessing the database <ref> [1, 12] </ref>; here, the increase in the load represents the time for an access. The on-line load balancing problem has been much studied in connection with the virtual circuit routing problem [2, 3, 12]. <p> Alternatively, machines may represent distributed database platforms, and the jobs may be application programs accessing the database [1, 12]; here, the increase in the load represents the time for an access. The on-line load balancing problem has been much studied in connection with the virtual circuit routing problem <ref> [2, 3, 12] </ref>. In this problem, the machines are the edges of a network, the jobs are requests for allocating a certain amount of capacity between two given endpoints, and the goal is to minimize the maximum congestion. <p> Westbrook <ref> [12] </ref>, however, pointed out that a competitive analysis against peak load is somewhat unrealistic. Although there was a peak in cellular phone demand on June 17, 1994, one cannot be satisfied with being today within a certain ratio of that peak load. <p> Phillips and Westbrook [10] were the first to present competitive analyses against current load, but the distinction between peak and current load was highlighted in Westbrook <ref> [12] </ref>. The notion of competitiveness against current load is too strong if we don't allow reassignments of jobs (also called job preemptions). Indeed, without reassignments, any algorithm is m-competitive against current load and no algorithm is better than m-competitive against current load [12]. <p> peak and current load was highlighted in Westbrook <ref> [12] </ref>. The notion of competitiveness against current load is too strong if we don't allow reassignments of jobs (also called job preemptions). Indeed, without reassignments, any algorithm is m-competitive against current load and no algorithm is better than m-competitive against current load [12]. On the other hand, if we allow an arbitrary amount of reassignment then the problem loses its on-line aspect: the scheduler can "simply" reconfigure all the machines at any departure or arrival to match (or closely match) the optimum configuration (although this is an NP-hard problem). <p> A reassignment factor of 1 therefore means that no reassignment is performed. In the special case in which the reassignment costs are either 1 or proportional to the weights (r j = cw j for some constant c), Westbrook <ref> [12] </ref> was the first to present an on-line algorithm with a constant competitive ratio against current load and a constant reassignment factor. The competitive ratio he proves is 6 and his reassignment factor is 2 for unit reassignments and 3 for proportional reassignments. <p> We pay one unit of cost for each arrival of a job and at most one unit for each departure. Hence the reassignment factor of this algorithm is at most 2. For the case in which the jobs have arbitrary weights, Westbrook <ref> [12] </ref> gave the following generalization of this algorithm and showed that it has a competitive ratio of 6. The jobs are divided into levels according to their weights. Level ` consists of jobs whose weight w j satisfies 2 ` w j &lt; 2 `+1 . <p> Theorem 4 For r j = 1, the ZigZag algorithm with ff = p 3 is 3:5981-competitive against current load and has a reassignment factor of 2. 3 Proportional Reassignment Costs In the case of reassignment costs r j of the form cw j for some constant c, Westbrook's algorithm <ref> [12] </ref> as well as the ZigZag algorithm still apply. Since reassignments occur only within a level, the weight of a reassigned job is at most twice the weight of a departing job. As a result, both algorithms incur a reassignment cost upper bounded by 3S. <p> Without 8 loss of generality we assume that c 1 c 2 c m = 1. When the reassignment costs are proportional to the weights, Westbrook <ref> [12] </ref> has derived a 24-competitive algorithm against current load with a reassignment factor of 4. We shall consider arbitrary reassignment costs and propose a competitive algorithm against current load whose competitive ratio depends logarithmically on the largest capacity c 1 .
References-found: 12

