URL: http://ki.cs.tu-berlin.de/~scheffer/papers/jair97.ps
Refering-URL: http://ki.cs.tu-berlin.de/~scheffer/publications.html
Root-URL: 
Email: email: scheffer@cs.tu-berlin.de  
Title: Efficient Algorithms for -Subsumption  
Author: Tobias Scheffer and Ralf Herbrich and Fritz Wysotzki 
Address: FR 5-8, Franklinstr. 28/29, D-10587 Berlin,  
Affiliation: Technische Universitat Berlin, Artificial Intelligence Research Group,  
Abstract: subsumption is a decidable but incomplete approximation of logic implication, important to inductive logic programming and theorem proving. We show that by context based elimination of possible matches a certain superset of the determinate clauses can be tested for subsumption in polynomial time. We discuss the relation between subsumption and the clique problem, showing in particular that using additional prior knowledge about the substitution space only a small fraction of the search space can be identified as possibly containing globally consistent solutions, which leads to an effective pruning rule. We present empirical results, demonstrating that a combination of both of the above approaches provides an extreme reduction of computational effort.
Abstract-found: 1
Intro-found: 1
Reference: <author> Bolsak, B., & Muggleton, S. </author> <year> (1992). </year> <title> The application of inductive logic programming to finite-element mesh design. In Inductive Logic Programming London. </title> <publisher> Academic Press. </publisher>
Reference-contexts: Empirical results Our experiments are based on a set of large graphs that encode finite element meshs of construction parts. This data set is well known in the ILP community <ref> (Bolsak & Muggleton, 1992) </ref>, where it is used as a benchmark learning problem; The classification problem is to predict the optimal discretization of edges. To obtain different clauses of arbitrary size, we included only those nodes and edges that have only a certain distance from a randomly drawn starting node.
Reference: <author> Carraghan, R., & Pardalos, P. </author> <year> (1990). </year> <title> An exact algorithm for the maximum clique problem. </title> <journal> Operations Research Letters, </journal> <volume> 9, </volume> <pages> 375-382. </pages>
Reference: <author> DeRaedt, L., & Bruynooghe, M. </author> <year> (1993). </year> <title> A theory of clausal discovery. </title> <booktitle> In Proc. Workshop on ILP. </booktitle>
Reference: <author> Dzeroski, S., Muggleton, S., & Russel, S. </author> <year> (1992). </year> <title> Pac-learnability of determinate logic programs. </title> <booktitle> In Proc. 5th ACM Workshop on Computational Learning Theory, </booktitle> <pages> pp. 128-135. </pages> <note> 13 Eisinger, </note> <author> N. </author> <year> (1981). </year> <title> Subsumption and connection graphs. </title> <booktitle> In Proc. IJCAI. </booktitle>
Reference: <author> Feige, U., Goldwasser, S., Lovasz, L., Safra, S., & Szegedy, M. </author> <year> (1991). </year> <title> Approximating the maxclique is almost NP-complete. </title> <booktitle> In Proc. 32nd IEEE Symp. on Foundations of Comp. Sci. </booktitle>
Reference: <author> Geibel, P., & Wysotzki, F. </author> <year> (1996). </year> <title> Learning relational concepts with decision trees. </title> <booktitle> In Proc. ICML. </booktitle>
Reference: <author> Gibbons, L., Hearn, D., & Pardalos, P. </author> <year> (1996). </year> <title> A continuous based heuristic for the maximum clique problem. In Clique, Graph Coloring and Satisfiability: Second DIMACS Implementation Challenge. </title>
Reference: <author> Gottlob, G. </author> <year> (1987). </year> <title> Subsumption and implication. </title> <journal> Information Processing Letters, </journal> <volume> 24, </volume> <pages> 109-111. </pages>
Reference-contexts: While implication is undecidable in general for first-order languages, -subsumption is decidable but incomplete - i.e., there may exist clauses C and D, such that C 6` D but C j= D. This occurs when C is self-resolving (recursive) or if D is tautological <ref> (Gottlob, 1987) </ref>. If tautologies and self-resolution are excluded, then C ` D , C j= D (Gottlob, 1987; Muggleton, 1993; Kietz & Lubbe, 1994). The -subsumption problem is NP-complete in general (Kapur & Narendran, 1986).
Reference: <author> Gottlob, G., & Leitsch, A. </author> <year> (1985). </year> <title> On the efficiency of subsumption algorithms. </title> <journal> J. ACM, </journal> <volume> 32 (2), </volume> <pages> 280-295. </pages>
Reference: <editor> Johnson, D. S., & Trick, M. A. (Eds.). </editor> <year> (1996). </year> <title> Clique, Graph Coloring and Satisfiability: Second DIMACS Implementation Challenge, </title> <booktitle> DIMACS series. </booktitle>
Reference: <author> Kapur, D., & Narendran, P. </author> <year> (1986). </year> <title> NP-completeness of the set unification and matching problems. </title> <booktitle> In Proc. 8th International Conference on Automated Deduction. </booktitle>
Reference-contexts: Decision of -subsumption of two clauses is NP-complete in general <ref> (Kapur & Narendran, 1986) </ref>, even if the second clause is fixed (Kietz & Lubbe, 1994); the NP-completeness results from the ambiguity of variable identification. As subsumption is crucial to the power of ILP learners and theorem provers many approaches to speeding up subsumption have been studied. <p> This occurs when C is self-resolving (recursive) or if D is tautological (Gottlob, 1987). If tautologies and self-resolution are excluded, then C ` D , C j= D (Gottlob, 1987; Muggleton, 1993; Kietz & Lubbe, 1994). The -subsumption problem is NP-complete in general <ref> (Kapur & Narendran, 1986) </ref>. Known algorithms have a worst case time complexity of O (vars (D) vars (C) ), or O (jDj jCj ). Definition 1 (Substitution) A substitution is a mapping from variables to terms.
Reference: <author> Kietz, J.-U., & Lubbe, M. </author> <year> (1994). </year> <title> An efficient subsumption algorithm for inductive logic programming. </title> <booktitle> In Proc. International Conference on Machine Learning. </booktitle>
Reference-contexts: Decision of -subsumption of two clauses is NP-complete in general (Kapur & Narendran, 1986), even if the second clause is fixed <ref> (Kietz & Lubbe, 1994) </ref>; the NP-completeness results from the ambiguity of variable identification. As subsumption is crucial to the power of ILP learners and theorem provers many approaches to speeding up subsumption have been studied. <p> one possible match for each literal that is consistent with the previously matched literals (Muggleton & Feng, 1990), or, more generally, if there is an ordering of literals, such that in each step there is a literal which has exactly one match that is consistent with the previously matched literals <ref> (Kietz & Lubbe, 1994) </ref>. However, determinacy is not an intrinsic property of a clause a pair of clauses may or may not be testable for subsumption deterministically. In general, there may be only a few literals, or none at all, that can be matched deterministically. <p> C ` DET D can be tested with at most O (jCj 2 jDj) unification attempts <ref> (Kietz & Lubbe, 1994) </ref> by the following algorithm: 1. While there is a literal l 1 2 C that matches exactly one literal l 2 2 D with l 1 = l 2 , substitute C with . 2. <p> If we find a literal with only one remaining matching candidate in each step, C ` D can be tested in O (jCj 2 jDj2 2d ), because jCj 2 jDj is the complexity of deterministic subsumption <ref> (Kietz & Lubbe, 1994) </ref> and we need to compare O (2 d ) paths to test for con (l i ) con (l j ), where d is the fixed depth.
Reference: <author> Kim, B. M., & Cho, J. W. </author> <year> (1992). </year> <title> A new subsumption method in the connection graph proof procedure. </title> <journal> Theoretical Computer Science, </journal> <volume> 103, </volume> <pages> 283-309. </pages>
Reference-contexts: In theorem proving, -subsumption is used as a redundancy test in the connection graph proof procedure (Kowalski, 1975; Sickel, 1976), the elimination of clauses that are copies of already deduced clauses provides a strong reduction of the search space <ref> (Kim & Cho, 1992) </ref>. Decision of -subsumption of two clauses is NP-complete in general (Kapur & Narendran, 1986), even if the second clause is fixed (Kietz & Lubbe, 1994); the NP-completeness results from the ambiguity of variable identification. <p> Delete those substitutions, that are strongly compatible with less than jCj 1 different substitutions 3. enumerate the cartesian product of the remaining substitutions of dimension n and check, if there is a strongly compatible n-tuple. 8 This notation of the algorithm is essentially identical to the algorithm in <ref> (Kim & Cho, 1992) </ref> that is expressed in terms of bit vectors.
Reference: <author> Kowalski, R. </author> <year> (1975). </year> <title> A proof procedure using connection graphs. </title> <journal> J. ACM, </journal> <volume> 22 (4), </volume> <pages> 572-595. </pages>
Reference: <author> Loveland, D. W. </author> <year> (1978). </year> <title> Automated theorem proving: A logical basis. </title> <publisher> Elsevier, North Holland. </publisher>
Reference: <author> Muggleton, S. </author> <year> (1993). </year> <title> Inverting implication. </title> <journal> Artificial Intelligence Journal. </journal>
Reference: <author> Muggleton, S., & Feng, C. </author> <year> (1990). </year> <title> Efficient induction of logic programs. </title> <booktitle> In Proc. 1st Conf. on Algorithmic Learning Theory, </booktitle> <pages> pp. 368-381. </pages>
Reference-contexts: A clause is said to be determinate, if there is exactly one possible match for each literal that is consistent with the previously matched literals <ref> (Muggleton & Feng, 1990) </ref>, or, more generally, if there is an ordering of literals, such that in each step there is a literal which has exactly one match that is consistent with the previously matched literals (Kietz & Lubbe, 1994).
Reference: <author> Plotkin, G. D. </author> <year> (1970). </year> <title> A note on inductive generalization. </title> <editor> In Meltzer, B., & Michie, D. (Eds.), </editor> <booktitle> Machine Intelligence, </booktitle> <volume> Vol. 5, </volume> <pages> pp. 153-163. </pages>
Reference-contexts: To obtain different clauses of arbitrary size, we included only those nodes and edges that have only a certain distance from a randomly drawn starting node. We computed the least general generalization <ref> (Plotkin, 1970) </ref> of pairs of such clauses and drew a random subset of the body literals to adjust the clause size more precisely. The D clauses were generated using a fixed variable depth They are of approximately the same size (approximately 130 literals).
Reference: <author> Robinson, J. A. </author> <year> (1965). </year> <title> A machine-oriented logic based on the resolution principle. </title> <journal> J. ACM, </journal> <volume> 12 (1), </volume> <pages> 23-41. </pages>
Reference-contexts: 1. Introduction -subsumption <ref> (Robinson, 1965) </ref> is a correct but incomplete,e.g., decidable consequence relation, while implication is undecidable in general. A clause C -subsumes D (C ` D), iff there is a substitution , such that C D and jCj jDj.
Reference: <author> Scheffer, T., Herbrich, R., & Wysotzki, F. </author> <year> (1996). </year> <title> Efficient theta-subsumption based on graph algorithms. </title> <booktitle> In Proc. Int. Workshop on Inductive Logic Programming. </booktitle>
Reference-contexts: The most expensive test done by the combination of the context and clique based algorithm, based on 25,000 observations, took 0.4 seconds. 1. The curves labeled `literal context' show the behavior of a modified context based algorithm discussed in <ref> (Scheffer et al., 1996) </ref> 11 12 n (t i s i ) 2 , where t i is the observed time and s i the mean time for a clause size of s i literals, for the studied algorithms in the positive and negative case respectively.
Reference: <author> Sickel, S. </author> <year> (1976). </year> <title> A search technique for clause interconnectivity graphs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-25 (8), </volume> <pages> 823-835. </pages>
Reference: <author> Socher, R. </author> <year> (1988). </year> <title> A subsumption algorithm based on characteristic matrices. </title> <booktitle> In Proc. 9th Int. Conf. on Automated Deduction. </booktitle>
Reference-contexts: We will adapt a very general approach to the problem of subsumption, and show that characteristic matrices <ref> (Socher, 1988) </ref> are a special case of this approach. We will characterize the set of clauses that can be tested for subsumption in polynomial time by this algorithm. Eisinger (1981) introduces S-links into the framework of the connection graph resolution proof procedure (Kowalski, 1975; Sickel, 1976). <p> But l a and l b cannot be element of D, because they share a common variable and we assumed that there is no corresponding path in D. The graph context of a literal at depth 1 contains the same amount of information as the characteristic matrix <ref> (Socher, 1988) </ref> of the literal does. Element C ij of a characteristic matrix of a literal l contains the predicate names of those literals l k , such that there is a variable that occurs at position i of l and on position j of l k .
Reference: <author> Tinhofer, G. </author> <year> (1976). </year> <editor> Zum algorithmischen Nachweis der Isomorphie von endlichen Graphen. In Noltemeier, H. (Ed.), Graphen, Algorithmen, Datenstrukturen. </editor> <booktitle> 2. Fachtagung uber Graphen-theoretische Konzepte der Informatik. </booktitle> <publisher> Carl Hanser Verlag. </publisher>
Reference: <author> Unger, S., & Wysotzki, F. </author> <year> (1981). </year> <title> Lernfahige Klassifizierungssysteme. </title> <publisher> Akademie Verlag Berlin. </publisher> <editor> 14 van der Laag, P., & Nienhuys-Cheng, S. </editor> <year> (1993). </year> <title> Subsumption and refinement in model inference. </title> <booktitle> In Machine Learning: ECML. </booktitle>
Reference: <author> Weisfeiler, B. </author> <year> (1976). </year> <title> On Construction and Identification of Graphs. No. </title> <booktitle> 558 in Lecture Notes in Mathematics. </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin. </address>
Reference: <author> Wysotzki, F., Selbig, J., & Kolbe, W. </author> <year> (1981). </year> <title> Concept learning by structured examples an algebraic approach. </title> <booktitle> In Proceedings of the 7th International Joint Conference on Artificial Intelligence. </booktitle> <pages> 15 </pages>
References-found: 26

