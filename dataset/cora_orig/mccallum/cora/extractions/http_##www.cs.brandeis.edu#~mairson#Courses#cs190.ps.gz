URL: http://www.cs.brandeis.edu/~mairson/Courses/cs190.ps.gz
Refering-URL: http://www.cs.brandeis.edu/~mairson/
Root-URL: http://www.cs.brandeis.edu
Title: Introduction to Programming Language Theory Lisp." The -calculus is to programming languages as the Turing
Author: Prerequisites 
Date: 1997)  
Note: Computer Science 190 (Autumn Term,  Course Description This course is mainly about the -calculus, which in a sound bite is best rendered as "theoretical  Required Work Work for the course will include  
Abstract: Course instructor: Harry Mairson, 257 Volen (736-2724), office hours by arrangement. Send me electronic mail at address mairson@lapis.cs.brandeis.edu to arrange meetings, or to ask questions with the fastest, easiest response. Teaching assistant: Zack Mason, 111 Volen (736-2719), electronic mail, zmason@berry. Time and place: Tuesday and Friday, 10.30a.m.-12p.m., Volen 105. We will discuss untyped -calculus and its "universal" power (like that of a Turing machine), typed -calculus and its impact on the design of type systems in programming languages. A brief introduction to the programming language ML shows the "technology transfer" of these more abstract notions into a real language. We conclude with a discussion of some more advanced topics: the handling of explicit control (continuations), and hybrid call-by-value/call-by-name procedure calling protocols (optimal evaluation). Some previous exposure to logic, computation theory, and functional programming. Suggested (but not required!) prerequisite courses are CS21b (Structure and Interpretation of Computer Programs), CS30a (Introduction to the Theory of Computation), CS140 (Logic Programming), and a course on logic, especially CS240 (Computational Logic), or Math 125b/Philosophy 106b (Mathematical Logic). As always, that good old "mathematical maturity" goes a long way. Needless to say, the course will be very theory-oriented, although I will try as hard as I can to make the material accessible, and to connect it to related topics in computer science. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Books: Hendrik Barendregt. </author> <title> The Lambda Calculus: Its Syntax and Semantics. </title> <publisher> North Holland, </publisher> <year> 1984. </year>
Reference: <author> Jean-Yves Girard, Yves Lafont, Paul Taylor. </author> <title> Proofs and Types. </title> <publisher> Cambridge University Press, </publisher> <year> 1989. </year> <month> (chapters 1-3, </month> <title> 5, 13) Carl Gunter. Semantics of Programming Languages. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference: <author> J. Roger Hindley and Jonathan R. Seldin. </author> <title> Introduction to Combinators and -Calculus. </title> <publisher> Cambridge University Press, </publisher> <year> 1987. </year>
Reference: <author> Benjamin Pierce. </author> <title> Basic Category Theory for Computer Scientists. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference: <author> Daniel Friedman, Christopher Haynes, and Mitchell Wand. </author> <title> Essentials of Programming Languages. </title> <publisher> MIT Press, </publisher> <year> 1992. </year> <note> 3 Articles: </note> <author> Andrea Asperti and Cosimo Laneve. </author> <title> Paths, computations, and labels in the -calculus. </title> <booktitle> Theoretical Computer Science 142 (1995), </booktitle> <pages> pp. 277-297. </pages>
Reference: <author> Andrea Asperti and Harry Mairson. </author> <title> Parallel beta reduction is not elementary recursive. </title> <type> Preprint. </type>
Reference: <author> Georges Gonthier, Martin Abadi, and Jean-Jacques Levy. </author> <title> The geometry of optimal lambda reduction. </title> <booktitle> Proceedings, 1992 ACM Conference on Principles of Programming Languages, </booktitle> <pages> pp. 15-26. </pages>
Reference: <author> Robert Harper. </author> <title> Introduction to Standard ML. </title> <type> Technical Report ECS-LFCS-86-14, </type> <institution> University of Edinburgh, </institution> <year> 1989. </year>
Reference: <author> Fritz Henglein and Harry Mairson. </author> <title> The complexity of type inference for higher-order typed -calculi. </title>
Reference: <author> J. </author> <booktitle> Functional Programming 4(4), </booktitle> <year> 1994, </year> <pages> pp. 435-478. </pages>
Reference: <author> Jean-Jacques Levy. </author> <title> Optimal reductions in the lambda-calculus. </title>
Reference: <editor> In To H. B. </editor> <booktitle> Curry: Essays in Combinatory Logic, Lambda Calculus and Formalism, </booktitle> <editor> (J. P. Seldin and J. R. Hindley, </editor> <booktitle> editors), </booktitle> <pages> pp. 159-191. </pages> <publisher> Academic Press, </publisher> <year> 1980. </year>
Reference: <author> Harry Mairson. </author> <title> A simple proof of a theorem of Statman. </title> <booktitle> Theoretical Computer Science 103 (1992), </booktitle> <pages> pp. 387-394. </pages>
Reference: <author> Benjamin Pierce, Scott Dietzen, Spiro Michaylov. </author> <title> Programming in higher-order typed lambda calculi. </title> <institution> Computer Science Department, Carnegie Mellon University, </institution> <year> 1989, </year> <type> TR CMU-CS-89-111. </type>
Reference: <author> Robert D. Tennent. </author> <title> The denotational description of programming languages. </title> <journal> Comm. of the ACM 19(8), </journal> <year> 1977, </year> <pages> pp. 437-453. </pages>
Reference: <editor> Philip Wadler. </editor> <booktitle> The essence of functional programming. Proceedings, 1992 ACM Conference on Principles of Programming Languages, </booktitle> <pages> pp. 1-14. </pages>
References-found: 16

