URL: file://theory.lcs.mit.edu/pub/people/rosario/RSAunden.ps.Z
Refering-URL: http://theory.lcs.mit.edu/~rosario/research.html
Root-URL: 
Title: RSA-Based Undeniable Signatures  
Author: Rosario Gennaro Hugo Krawczyk and Tal Rabin flfl 
Abstract: We present the first undeniable signatures scheme based on RSA. Since their introduction in 1989 a significant amount of work has been devoted to the investigation of undeniable signatures. So far, this work has been based on discrete log systems. In contrast, our scheme uses regular RSA signatures to generate undeniable signatures. In this new setting, both the signature and verification exponents of RSA are kept secret by the signer, while the public key consists of a composite modulus and a sample RSA signature on a single public message. Our scheme possesses several attractive properties. First of all, provable security, as forging the undeniable signatures is as hard as forging regular RSA signatures. Second, both the confirmation and denial protocols are zero-knowledge. In addition, these protocols are efficient (particularly, the confirmation protocol involves only two rounds of communication and a small number of exponentiations). Furthermore the RSA-based structure of our scheme provides with simple and elegant solutions to add several of the more advanced properties of undeniable signatures found in the literature, including convertibility of the undeniable signatures (into publicly verifiable ones), the possibility to delegate the ability to confirm and deny signatures to a third party without giving up the power to sign, and the existence of distributed (threshold) versions of the signing and confirmation operations. Due to the above properties and the fact that our undeniable signatures are identical in form to standard RSA signatures, the scheme we present becomes a very attractive candidate for practical implementations. 
Abstract-found: 1
Intro-found: 1
Reference: [BCC88] <author> G. Brassard, D. Chaum, and C. Crepeau. </author> <title> Minimum disclosure proofs of knowledge. </title> <journal> JCSS, </journal> <volume> 37(2) </volume> <pages> 156-189, </pages> <year> 1988. </year>
Reference-contexts: Fig. 1. Proving that ^ S m 2 SI G (m) (ZK steps omitted) For ease of exposition the protocol in Figure 1 appears in a non zero-knowledge format. However, there are well-known techniques <ref> [GMW86, BCC88, Gol95] </ref> to add the zero-knowledge property to the above protocol using the notion of a commitment function: Instead of P sending A in Step 2, he sends a commitment commit (A), after which V reveals to P the values of i and j. <p> All that is required is for the verifier to have a public key. Then when the prover commits to his answer during the zero-knowledge steps of our protocols he will use a trapdoor commitment scheme (as in <ref> [BCC88] </ref>) which the verifier can open in any way. This will prevent the verifier from transferring the proof (see [JSI96] for the details). Designated Confirmer. Designated confirmer undeniable signatures were introduced by Chaum in [Cha94] and further studied by Okamoto in [Oka94].
Reference: [BCDP91] <author> J. Boyar, D. Chaum, I. Damgard, and T. Pedersen. </author> <title> Convertible undeniable signatures. </title> <editor> In A.J. Menezes and S. A. Vanstone, editors, </editor> <booktitle> Proc. CRYPTO 90, </booktitle> <pages> pages 189-205. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year> <note> Lecture Notes in Computer Science No. 537. </note>
Reference-contexts: These include convertibility (the possibility to transform undeniable signatures into regular, i.e. self-authenticating, signatures by just publishing a short piece of information, <ref> [BCDP91] </ref>), delegation (enabling selected third parties to confirm/deny signatures but not to sign), distribution of power (threshold version of the signature and confirmation protocols, [Ped91]), designated confirmer schemes (in which the recipient of the signature is assured that a specific third party will be able to confirm the signature at a <p> These works have provided a variety of different schemes for undeniable signatures with variable degrees of security, provability, and additional features. Interestingly, all these works are discrete logarithm based. In <ref> [BCDP91] </ref> the problem of constructing schemes based on different assumptions, in particular RSA, was suggested as a possible research direction. Most influential are the works of Chaum and van Antwerpen [CA90] and Chaum [Cha90]. <p> The second improves significantly on the initial solution by providing zero-knowledge ver-sions of these protocols. The formalization of the basic notions behind undeniable signatures was mainly carried out in the works by Boyar, Chaum, Damgard and Pedersen <ref> [BCDP91] </ref> and by Damgard and Pedersen [DP96]. In [BCDP91] the notion of convertible schemes was introduced. In such schemes the signer can publish a short string that converts the scheme into a regular signature scheme. However the scheme presented in [BCDP91] was recently broken in [M96]. <p> The second improves significantly on the initial solution by providing zero-knowledge ver-sions of these protocols. The formalization of the basic notions behind undeniable signatures was mainly carried out in the works by Boyar, Chaum, Damgard and Pedersen <ref> [BCDP91] </ref> and by Damgard and Pedersen [DP96]. In [BCDP91] the notion of convertible schemes was introduced. In such schemes the signer can publish a short string that converts the scheme into a regular signature scheme. However the scheme presented in [BCDP91] was recently broken in [M96]. <p> out in the works by Boyar, Chaum, Damgard and Pedersen <ref> [BCDP91] </ref> and by Damgard and Pedersen [DP96]. In [BCDP91] the notion of convertible schemes was introduced. In such schemes the signer can publish a short string that converts the scheme into a regular signature scheme. However the scheme presented in [BCDP91] was recently broken in [M96]. <p> This is probably the main reason that subsequent work concentrated on these structures as well. Here we show that many of these ideas can be used in the context of RSA, thus answering in the affirmative a question suggested in <ref> [BCDP91] </ref>. In doing so we use ideas from the work of Gennaro et al. [GJKR96]. 2 Preliminaries Notation. <p> Convertible Undeniable Signatures. This variation appeared first in <ref> [BCDP91] </ref>, and secure schemes based on ElGamal signatures have been recently presented in [DP96]. Convertible undeniable signatures enable the signer to publish a value which transforms the undeniable signature into a regular (i.e., self-authenticating) digital signature. <p> We stress that although we consider as valid also signatures of that form (see Section 3.2), it is in the interest of the prover not to In some applications it may be desirable to convert only a subset of the past signatures (selective conversion <ref> [BCDP91] </ref>). For this scenario we can make use of a non-interactive zero-knowledge confirmation proof for those messages. Such an efficient scheme is described in the final paper. Delegation.
Reference: [BR96] <author> M. Bellare and P. Rogaway. </author> <title> The exact security of digital signatures, how to sign with RSA and Rabin. </title> <editor> In U. Maurer, editor, </editor> <booktitle> Advances in Cryptology: EUROCRYPT'96, volume 1070 of Lecture Notes in Computer Science, </booktitle> <pages> pages 399-416. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: will be able to convince V of this fact, while if the signature is invalid then no prover (even a computationally unbounded one) will be able to convince V to the contrary except for a negligible probability. 4 For simplicity we will assume a deterministic encoding; however randomized encodings, e.g. <ref> [BR96] </ref>, can be used as well but then, in our case, the random bits used for the encoding need to be attached to the signature.
Reference: [CA90] <editor> David Chaum and Hans Van Antwerpen. Undeniable signatures. In G. Brassard, editor, </editor> <booktitle> Proc. CRYPTO 89, </booktitle> <pages> pages 212-217. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <note> Lecture Notes in Computer Science No. 435. </note>
Reference-contexts: Email: hugo@ee.technion.ac.il. the whole value of such signatures is seriously questioned. Thus, the question is how to generate signatures which limit the verification capabilities yet without giving up on the central property of non-repudiation. An answer to this problem was provided by Chaum and van Antwerpen <ref> [CA90] </ref> who introduced undeniable signatures. Such signatures are characterized by the property that verification can only be achieved by interacting with the legitimate signer (through a confirmation protocol). On the other hand, the signer can prove that a forgery is such by engaging in a denial protocol. <p> Interestingly, all these works are discrete logarithm based. In [BCDP91] the problem of constructing schemes based on different assumptions, in particular RSA, was suggested as a possible research direction. Most influential are the works of Chaum and van Antwerpen <ref> [CA90] </ref> and Chaum [Cha90]. The first work introduces the notion of undeniable signatures and provides protocols which are the basis for many of the subsequent works. The second improves significantly on the initial solution by providing zero-knowledge ver-sions of these protocols.
Reference: [CEG87] <author> D. Chaum, J.-H. Evertse, and J. van der Graaf. </author> <title> An improved protocol for demonstrating possession of a discrete logarithm and some generalizations. </title> <booktitle> In EUROCRYPT'87, </booktitle> <pages> pages 127-141, </pages> <year> 1987. </year>
Reference-contexts: Such a value must always pass the verification (or otherwise factoring is trivial). VERIFICATION THAT S w 2&lt;w&gt;. The following protocol is essentially the protocol for proving possessionof discrete logarithms as presented in <ref> [CEG87] </ref>, once again modified in order to work with composite moduli. The signer P chooses a value r 2 R [(n)] and sends to V the value w 0 = w r . The verifier V answers with a random bit b.
Reference: [Cha90] <author> D. Chaum. </author> <title> Zero-knowledge undeniable signatures. </title> <booktitle> In Proc. </booktitle> <volume> EURO-CRYPT 90, </volume> <pages> pages 458-464. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <note> Lecture Notes in Computer Science No. 473. </note>
Reference-contexts: Interestingly, all these works are discrete logarithm based. In [BCDP91] the problem of constructing schemes based on different assumptions, in particular RSA, was suggested as a possible research direction. Most influential are the works of Chaum and van Antwerpen [CA90] and Chaum <ref> [Cha90] </ref>. The first work introduces the notion of undeniable signatures and provides protocols which are the basis for many of the subsequent works. The second improves significantly on the initial solution by providing zero-knowledge ver-sions of these protocols. <p> This protocol is basically the same as the protocol of Gennaro et al. [GJKR96] (based on <ref> [Cha90] </ref>) where it is used in a different application, namely, threshold RSA. Our variation on this protocol uses the verification key e rather than the signature key d as originally used in [GJKR96] (in their case, the signer knows only d but not e). <p> Our solution is based on a protocol due to Chaum <ref> [Cha90] </ref>, designed to prove in zero-knowledge the inequality of the discrete logarithms of two elements over a prime field Z p relative to two different bases. <p> The protocol has probability of error 1 k , where k = O (log n) is a parameter chosenby the system. Due to an elegant observation of Chaum <ref> [Cha90] </ref> the desired probability of error can be achieved while incurring only a constant number of exponentiations. He notes that while carrying out k consecutive multiplications, which is equivalent in computation to a single exponentiation, we can compute all the powers in a the range [k].
Reference: [Cha94] <author> David Chaum. </author> <title> Designated confirmer signatures. </title> <booktitle> In EUROCRYPT'94, </booktitle> <pages> pages 86-91, </pages> <year> 1994. </year>
Reference-contexts: selected third parties to confirm/deny signatures but not to sign), distribution of power (threshold version of the signature and confirmation protocols, [Ped91]), designated confirmer schemes (in which the recipient of the signature is assured that a specific third party will be able to confirm the signature at a later time, <ref> [Cha94] </ref>), and designated verifier schemes (in which the prover can make sure that only a specified verifier benefits from interacting with the prover on the confirmation of a signature, [JSI96]). <p> Zero-Knowledge: Our confirmation and denial protocols have the interactive proof properties as explained above and are also zero-knowledge. Therefore they do not leak any information that could otherwise be used for forging signatures. The soundness of our protocols (i.e. the guarantee that the prover/signer cannot 1 Chaum in <ref> [Cha94] </ref> uses RSA signatures on top of regular undeniable signatures to provide designated confirmer signatures; however the underlying undeniable signatures are still discrete log-based. 2 As with regular RSA, the use of a strong one-way hash function is assumed to provide unforge ability against chosen message attacks. 3 However, in our <p> This will prevent the verifier from transferring the proof (see [JSI96] for the details). Designated Confirmer. Designated confirmer undeniable signatures were introduced by Chaum in <ref> [Cha94] </ref> and further studied by Okamoto in [Oka94]. This variant of undeniable signature is used to provide the recipient of a signature with a guarantee that a specified third party (called a designated confirmer) will later be able to confirm that signature. <p> Notice the difference between this variant and the delegation property described above. Indeed in the present case the signature is specifically bound at time of generation to a particular confirmer. The techniques of <ref> [Cha94, Oka94] </ref> easily extend to our scheme. Acknowledgments. We would like to thank Ivan Damgard for useful suggestions.
Reference: [CP93] <author> D. Chaum and T. Pedersen. </author> <title> Wallet databases with observers. </title> <booktitle> In CRYPTO'92, </booktitle> <pages> pages 89-105. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year> <note> Lecture Notes in Computer Science No. 740. </note>
Reference: [CHP92] <author> D. Chaum, E. van Heijst, and B. Pfitzmann. </author> <title> Cryptographically strong undeniable signatures, unconditionally secure for the signer. </title> <editor> In J. Feigenbaum, editor, </editor> <booktitle> Proc. CRYPTO 91, </booktitle> <pages> pages 470-484. </pages> <publisher> Springer, </publisher> <year> 1992. </year> <note> Lecture Notes in Computer Science No. 576. </note>
Reference: [Dam] <author> I. Damgard. </author> <type> Personal communication. </type> <month> November, </month> <year> 1996. </year>
Reference-contexts: a relatively large number k of moduli can be produced. (Although this gives only linear security we stress that under the appropriate legal circumstances a probability of, say 999/1000, to be caught cheating can be a significant deterrent for anyone to register an invalid key.) Finally, there is a solution <ref> [Dam] </ref> that allows for a trade-off between the error probability at the key registration stage and the performance cost of the undeniable signature scheme. Initially, we let P generate 2k moduli. V chooses at random k of them of which the signer must reveal the factorizations.
Reference: [DDFY94] <author> Alfredo De Santis, Yvo Desmedt, Yair Frankel, and Moti Yung. </author> <title> How to share a function securely. </title> <booktitle> In Proc. 26th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 522-533, </pages> <address> Santa Fe, 1994. </address> <publisher> IEEE. </publisher>
Reference-contexts: This is obtained by sharing the key, used to verify signatures, using a (verifiable) secret sharing scheme among the provers. This way only if t out of the n provers cooperate it is possible to verify or deny a signature. The existing solutions for threshold RSA signatures <ref> [DDFY94, GJKR96] </ref> can then be used to obtain an efficient distributed scheme as the only operation needed during confirmation or denial protocols is RSA exponentiations. The fault-tolerance of the protocol in [GJKR96] guarantees the security of the scheme even in the presence of t (out of n) maliciously behaving provers.
Reference: [DP96] <author> I. Damgard and T. Pedersen. </author> <title> New convertible undeniable signature schemes. </title> <booktitle> In Eurocrypt'96, </booktitle> <pages> pages 372-386. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <note> Lecture Notes in Computer Science No. 1070. </note>
Reference-contexts: The second improves significantly on the initial solution by providing zero-knowledge ver-sions of these protocols. The formalization of the basic notions behind undeniable signatures was mainly carried out in the works by Boyar, Chaum, Damgard and Pedersen [BCDP91] and by Damgard and Pedersen <ref> [DP96] </ref>. In [BCDP91] the notion of convertible schemes was introduced. In such schemes the signer can publish a short string that converts the scheme into a regular signature scheme. However the scheme presented in [BCDP91] was recently broken in [M96]. <p> In such schemes the signer can publish a short string that converts the scheme into a regular signature scheme. However the scheme presented in [BCDP91] was recently broken in [M96]. The repaired solution presented therein however does not come with a proof of security. <ref> [DP96] </ref> present the first convertible schemes with proven security (based on cryptographic assumptions). 1.4 Our contribution Our work is the first to present undeniable schemes based on RSA 1 Our undeniable signature scheme produces signatures that are identical in form to RSA signatures. <p> Unforgeability: Our construction allows us to prove in a simple way that security of these signatures against forging is equivalent to the unforgeability of RSA signatures 2 . Provable unforgeability of undeniable signatures was presented for the first time in the recent paper by <ref> [DP96] </ref> where forgery of the proposed scheme is proven equivalent to forgery of the ElGamal scheme. Simulatability: Non-transferability of an RSA signature is a non-standard requirement in the context of traditional RSA. <p> We prove this property under the assumption that deciding on the equality of discrete logarithms under different bases is intractable. This assumption is required in previous works as well 3 although by itself is not always sufficient to prove simulatability of the undeniable signatures. For example in <ref> [DP96] </ref> the simulatability property is only conjectured to follow from such assumptions. Zero-Knowledge: Our confirmation and denial protocols have the interactive proof properties as explained above and are also zero-knowledge. Therefore they do not leak any information that could otherwise be used for forging signatures. <p> For such a formal and complete treatment we refer the reader to the paper by Damgard and Pedersen <ref> [DP96] </ref>; an outline of these notions can be found above in our Introduction (in particular, in Section 1.1). Here we argue the security properties of our solution in an informal way based on this outline. 4.1 Unforgeability of signatures We consider an attacker that cannot forge regular RSA signatures. <p> Following <ref> [DP96] </ref> we need to show that given the public key information and any message m (but not the signature exponent d) one can efficiently generate a simulated signature s (m) of m, in the sense that the distribution of simulated signatures cannot be distinguished (efficiently) from the distribution of true signatures <p> We stress that the analogous assumption modulo a prime number is necessary for claiming the security of previous undeniable signature schemes as well (see <ref> [DP96] </ref>). However in the case of [DP96] the EDL assumption is not sufficient to prove simulatability, which in that paper is indeed simply conjectured. Theorem 6. Under the above EDL assumption, our signatures are simulatable and hence cannot be verified without the signer's (or its delegated confirmers) cooperation. <p> We stress that the analogous assumption modulo a prime number is necessary for claiming the security of previous undeniable signature schemes as well (see <ref> [DP96] </ref>). However in the case of [DP96] the EDL assumption is not sufficient to prove simulatability, which in that paper is indeed simply conjectured. Theorem 6. Under the above EDL assumption, our signatures are simulatable and hence cannot be verified without the signer's (or its delegated confirmers) cooperation. <p> Convertible Undeniable Signatures. This variation appeared first in [BCDP91], and secure schemes based on ElGamal signatures have been recently presented in <ref> [DP96] </ref>. Convertible undeniable signatures enable the signer to publish a value which transforms the undeniable signature into a regular (i.e., self-authenticating) digital signature. In our scheme conversion can be easily achieved by simply publishing the value e = d 1 mod (n).
Reference: [DY91] <author> Y Desmedt and M. Yung. </author> <title> Weaknesses of undeniable signature schemes. </title> <booktitle> In Eurocrypt'91, </booktitle> <pages> pages 205-220, </pages> <year> 1991. </year>
Reference-contexts: Theorem 6. Under the above EDL assumption, our signatures are simulatable and hence cannot be verified without the signer's (or its delegated confirmers) cooperation. Remark: The above theorem does not concern itself with a general problem of undeniable signatures pointed out first by Desmedt and Yung <ref> [DY91] </ref>. It is possible that the signer is fooled into proving a signature to several (mutually distrustful) verifiers while he is convinced of proving the signature to only one of them. <p> Once again in case of possibly maliciously behaving signers a fault-tolerant scheme as [GJKR96] must be used. Designated Verifier. The following problem of undeniable signatures has been pointed out (see <ref> [DY91, Jak94] </ref>): in general a mutually suspicious group of verifiers can get simultaneously convinced of the validity of a signature by interacting with the signer in a single execution of the confirmation protocol (in other words, the signer may believe that it is providing the signature confirmation to a single verifier
Reference: [FOO91] <author> A. Fujioka, T. Okamoto, and K. Ohta. </author> <title> Interactive bi-proof systems and undeniable signature schemes. </title> <booktitle> In Eurocrypt'91, </booktitle> <pages> pages 243-256, </pages> <year> 1991. </year>
Reference: [FS86] <author> Fiat, A. and Shamir, A. </author> <title> How to Prove Yourself: Practical Solutions to Identification and Signature Problems. </title> <booktitle> In Crypto'86, </booktitle> <pages> pages 186-194. </pages> <publisher> Springer-Verlag, </publisher> <year> 1986. </year> <note> Lecture Notes in Computer Science No. 263. </note>
Reference-contexts: As a practical matter, we observe that this protocol can be performed non-interactively if one assumes the existence of an ideal hash function (a la Fiat-Shamir <ref> [FS86] </ref>). VERIFICATION OF THE PRIME FACTORS.
Reference: [GJKR96] <author> R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin. </author> <title> Robust and efficient sharing of RSA functions. </title> <booktitle> In Crypto'96, </booktitle> <pages> pages 157-172. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <note> Lecture Notes in Computer Science No. 1109. Complete version available from http://www.research.ibm.com/security/papers1997.html </note>
Reference-contexts: Here we show that many of these ideas can be used in the context of RSA, thus answering in the affirmative a question suggested in [BCDP91]. In doing so we use ideas from the work of Gennaro et al. <ref> [GJKR96] </ref>. 2 Preliminaries Notation. Throughout the paper we use the following notations: For a positive integer k we denote [k] def n denotes the multiplicative group of integers modulo n, and (n) = (p 1)(q 1) the order of this group. <p> This protocol is basically the same as the protocol of Gennaro et al. <ref> [GJKR96] </ref> (based on [Cha90]) where it is used in a different application, namely, threshold RSA. Our variation on this protocol uses the verification key e rather than the signature key d as originally used in [GJKR96] (in their case, the signer knows only d but not e). <p> This protocol is basically the same as the protocol of Gennaro et al. <ref> [GJKR96] </ref> (based on [Cha90]) where it is used in a different application, namely, threshold RSA. Our variation on this protocol uses the verification key e rather than the signature key d as originally used in [GJKR96] (in their case, the signer knows only d but not e). Still the basic proof given in that paper applies to our case due to the symmetry that exists between d and e when both exponents are kept secret. <p> An interesting aspect of this protocol is that a prover could succeed in convincing the verifier to accept a signature on m even when this signature is not m d mod n but ff m mod n where ff is an element of order 2 (in Z fl n ). <ref> [GJKR96] </ref> solve this problem through the assumption (valid in their case) that the prover cannot factor n and thus cannot find such an element ff. In our case, this assumption does not hold. We deal with this problem by accepting as valid signatures also these multiples of m d . <p> This implementation of a commitment function is very efficient as it does not involve long exponentiations (and is secure since we assume our adversary, the verifier in this case, is unable to break RSA). A proof of the theorem below can be found in <ref> [GJKR96] </ref>. Theorem 3. Confirmation Theorem. Let (n; w; S w ) 2 PK. Completeness. If P and V follow the Signature Confirmation protocol then V always accepts. Soundness. <p> This is obtained by sharing the key, used to verify signatures, using a (verifiable) secret sharing scheme among the provers. This way only if t out of the n provers cooperate it is possible to verify or deny a signature. The existing solutions for threshold RSA signatures <ref> [DDFY94, GJKR96] </ref> can then be used to obtain an efficient distributed scheme as the only operation needed during confirmation or denial protocols is RSA exponentiations. The fault-tolerance of the protocol in [GJKR96] guarantees the security of the scheme even in the presence of t (out of n) maliciously behaving provers. <p> The existing solutions for threshold RSA signatures [DDFY94, GJKR96] can then be used to obtain an efficient distributed scheme as the only operation needed during confirmation or denial protocols is RSA exponentiations. The fault-tolerance of the protocol in <ref> [GJKR96] </ref> guarantees the security of the scheme even in the presence of t (out of n) maliciously behaving provers. As Pedersen pointed out in [Ped91], undeniable signatures with distributed provers present some difficulties. <p> Also solutions for threshold RSA allow to share the power to sign (in addition to the power to verify/deny signatures) among several servers. Once again in case of possibly maliciously behaving signers a fault-tolerant scheme as <ref> [GJKR96] </ref> must be used. Designated Verifier.
Reference: [GMW86] <author> O. Goldreich, S. Micali, and A. Wigderson. </author> <title> Proofs that Yield Nothing but the Validity of the Assertion, and a Methodology of Cryptographic Protocol Design. </title> <booktitle> In Proceeding 27th Annual Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 174-187. </pages> <publisher> ACM, </publisher> <year> 1986. </year>
Reference-contexts: Fig. 1. Proving that ^ S m 2 SI G (m) (ZK steps omitted) For ease of exposition the protocol in Figure 1 appears in a non zero-knowledge format. However, there are well-known techniques <ref> [GMW86, BCC88, Gol95] </ref> to add the zero-knowledge property to the above protocol using the notion of a commitment function: Instead of P sending A in Step 2, he sends a commitment commit (A), after which V reveals to P the values of i and j. <p> We have three alternative solutions for this problem. The first is to use a generic zero-knowledge proof of the above property using the general results of <ref> [GMW86] </ref>; although the resultant solution would be highly inefficient this task is performed only once at system initialization.
Reference: [Gol95] <author> Oded Goldreich. </author> <title> Foundation of Cryptography Fragments of a Book. </title> <booktitle> Electronic Colloquium on Computational Complexity, </booktitle> <month> February </month> <year> 1995. </year> <note> Available online from http://www.eccc.uni-trier.de/eccc/. </note>
Reference-contexts: Fig. 1. Proving that ^ S m 2 SI G (m) (ZK steps omitted) For ease of exposition the protocol in Figure 1 appears in a non zero-knowledge format. However, there are well-known techniques <ref> [GMW86, BCC88, Gol95] </ref> to add the zero-knowledge property to the above protocol using the notion of a commitment function: Instead of P sending A in Step 2, he sends a commitment commit (A), after which V reveals to P the values of i and j.
Reference: [Jak94] <author> M. Jakobsson. </author> <title> Blackmailing using undeniable signatures. </title> <booktitle> In EURO-CRYPT'94, </booktitle> <pages> pages 425-427, </pages> <year> 1994. </year>
Reference-contexts: Once again in case of possibly maliciously behaving signers a fault-tolerant scheme as [GJKR96] must be used. Designated Verifier. The following problem of undeniable signatures has been pointed out (see <ref> [DY91, Jak94] </ref>): in general a mutually suspicious group of verifiers can get simultaneously convinced of the validity of a signature by interacting with the signer in a single execution of the confirmation protocol (in other words, the signer may believe that it is providing the signature confirmation to a single verifier
Reference: [JSI96] <author> M. Jakobsson, K. Sako, and R. Impagliazzo. </author> <title> Designated verifier proofs and their applications. </title> <editor> In U. Maurer, editor, </editor> <booktitle> Advances in Cryptology: EUROCRYPT'96, volume 1070 of Lecture Notes in Computer Science, </booktitle> <pages> pages 143-154. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: of the signature is assured that a specific third party will be able to confirm the signature at a later time, [Cha94]), and designated verifier schemes (in which the prover can make sure that only a specified verifier benefits from interacting with the prover on the confirmation of a signature, <ref> [JSI96] </ref>). More details are provided in Section 5. 1.3 Previous work on undeniable signatures Since their introduction in 1989, undeniable signatures have received a significant attention in the cryptographic research community [CA90, Cha90, BCDP91, DY91, FOO91, Ped91, CHP92, Cha94, Jak94, Oka94, M96, DP96, JSI96, JY96]. <p> While this is not always a problem, in some cases this may defeat the purpose of undeniable signatures (e.g., if the signer wants to receive payment from each verifier that gets a signature confirmation). Jakobsson et al. <ref> [JSI96] </ref> present a solution to this problem through the notion of designated verifiers proofs that is readily applicable to our scheme. All that is required is for the verifier to have a public key. <p> Then when the prover commits to his answer during the zero-knowledge steps of our protocols he will use a trapdoor commitment scheme (as in [BCC88]) which the verifier can open in any way. This will prevent the verifier from transferring the proof (see <ref> [JSI96] </ref> for the details). Designated Confirmer. Designated confirmer undeniable signatures were introduced by Chaum in [Cha94] and further studied by Okamoto in [Oka94].
Reference: [JY96] <author> M. Jakobsson and M. Yung. </author> <title> Proving without knowing: On oblivious, agnostic and blindfolded provers. </title> <booktitle> In Crypto'96, </booktitle> <pages> pages 201-215. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <note> Lecture Notes in Computer Science No. 1109. </note>
Reference-contexts: But this in turn means that a dishonest prover can use the other provers as an oracle to the verification key at his will. The problem applies to our schemes as well. Several ways of dealing with the problem have been suggested in the literature <ref> [Ped91, JY96] </ref> some of which easily extend to our scenario. Also solutions for threshold RSA allow to share the power to sign (in addition to the power to verify/deny signatures) among several servers. Once again in case of possibly maliciously behaving signers a fault-tolerant scheme as [GJKR96] must be used.
Reference: [M96] <author> M. Michels. </author> <title> Breaking and Repairing a Convertible Undeniable Signature Scheme. </title> <booktitle> In Proceedings of the 1996 ACM Conference on Computer and Communications Security, </booktitle> <year> 1996. </year>
Reference-contexts: In [BCDP91] the notion of convertible schemes was introduced. In such schemes the signer can publish a short string that converts the scheme into a regular signature scheme. However the scheme presented in [BCDP91] was recently broken in <ref> [M96] </ref>.
Reference: [Oka94] <author> Tatsuaki Okamoto. </author> <title> Designated confirmer signatures and public-key encryption are equivalent. </title> <editor> In Yvo G. Desmedt, editor, </editor> <booktitle> Advances in Cryptology: CRYPTO '94, volume 839 of Lecture Notes in Computer Science, </booktitle> <pages> pages 61-74. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: This will prevent the verifier from transferring the proof (see [JSI96] for the details). Designated Confirmer. Designated confirmer undeniable signatures were introduced by Chaum in [Cha94] and further studied by Okamoto in <ref> [Oka94] </ref>. This variant of undeniable signature is used to provide the recipient of a signature with a guarantee that a specified third party (called a designated confirmer) will later be able to confirm that signature. Notice the difference between this variant and the delegation property described above. <p> Notice the difference between this variant and the delegation property described above. Indeed in the present case the signature is specifically bound at time of generation to a particular confirmer. The techniques of <ref> [Cha94, Oka94] </ref> easily extend to our scheme. Acknowledgments. We would like to thank Ivan Damgard for useful suggestions.
Reference: [Ped91] <author> T. Pedersen. </author> <title> Distributed provers with applications to undeniable signatures. </title> <booktitle> In Eurocrypt'91, </booktitle> <pages> pages 221-242, </pages> <year> 1991. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: These include convertibility (the possibility to transform undeniable signatures into regular, i.e. self-authenticating, signatures by just publishing a short piece of information, [BCDP91]), delegation (enabling selected third parties to confirm/deny signatures but not to sign), distribution of power (threshold version of the signature and confirmation protocols, <ref> [Ped91] </ref>), designated confirmer schemes (in which the recipient of the signature is assured that a specific third party will be able to confirm the signature at a later time, [Cha94]), and designated verifier schemes (in which the prover can make sure that only a specified verifier benefits from interacting with the <p> Clearly, the recipient of e cannot sign by itself as this is the basic assumption behind regular RSA signatures. Distributed Provers (and signers). Distributed Provers for undeniable signatures were introduced by Pedersen <ref> [Ped91] </ref>. With distributed provers the signer can delegate the capability to confirm/deny signatures, without needing to trust a single party. This is obtained by sharing the key, used to verify signatures, using a (verifiable) secret sharing scheme among the provers. <p> The fault-tolerance of the protocol in [GJKR96] guarantees the security of the scheme even in the presence of t (out of n) maliciously behaving provers. As Pedersen pointed out in <ref> [Ped91] </ref>, undeniable signatures with distributed provers present some difficulties. Indeed when the provers are presented with a message and its alleged signature, they have to decide which protocol (either the denial or the confirmation) to use. <p> But this in turn means that a dishonest prover can use the other provers as an oracle to the verification key at his will. The problem applies to our schemes as well. Several ways of dealing with the problem have been suggested in the literature <ref> [Ped91, JY96] </ref> some of which easily extend to our scenario. Also solutions for threshold RSA allow to share the power to sign (in addition to the power to verify/deny signatures) among several servers. Once again in case of possibly maliciously behaving signers a fault-tolerant scheme as [GJKR96] must be used.
References-found: 24

