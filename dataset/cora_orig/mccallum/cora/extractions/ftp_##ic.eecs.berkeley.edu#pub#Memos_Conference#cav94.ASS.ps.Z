URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/cav94.ASS.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/~vigyan/publications/index.html
Root-URL: 
Email: Email: fadnan,shiple,vigyan,albertog@ic.eecs.berkeley.edu  
Title: Formula-Dependent Equivalence for Compositional CTL Model Checking  
Author: Adnan Aziz Thomas R. Shiple Vigyan Singhal Alberto L. Sangiovanni-Vincentelli 
Keyword: CTL.  
Address: Berkeley, CA 94720  
Affiliation: Department of EECS, University of California,  
Abstract: We present a state equivalence that is defined with respect to a given CTL formula. Since it does not attempt to preserve all CTL formulas, like bisimulation does, we can expect to compute coarser equivalences. We use this equivalence to manage the size of the transition relations encountered when model checking a system of interacting FSMs. Specifically, the equivalence is used to reduce the size of each component FSM, so that their product will be smaller. We show how to apply the method, whether an explicit representation is used for the FSMs, or BDDs are used. Also, we show that in some cases our approach can detect if a formula passes or fails, without composing all the component machines. The method is exact and fully automatic, and handles full 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. Aziz and R. K. Brayton. </author> <title> Verifying interacting finite state machines. </title> <type> Technical Report UCB/ERL M93/52, </type> <institution> Electronics Research Laboratory, College of Engineering, University of California, Berkeley, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: As it turns out, we cannot hope to do better than this in the worst case, because the problem of model checking a system of interacting FSMs is PSPACE-complete <ref> [1] </ref>. Our goal is to develop an algorithm that alleviates the explosion problem by identifying equivalent states in each component machine. These equivalent states are then used to simplify the components before taking their product, thus leading to a smaller product machine.
Reference: 2. <author> A. Aziz, T. R. Shiple, V. Singhal, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> Formula-dependent equivalence for compositional CTL model checking. </title> <type> Technical report, </type> <institution> Electronics Research Laboratory, College of Engineering, University of California, Berkeley, </institution> <year> 1994. </year>
Reference-contexts: In Section 4 we develop our formula-dependent equivalence, and in Section 5 we discuss how this equivalence can be used to simplify compositional model checking. Finally, Section 6 mentions future work and gives conclusions. Proofs for the propositions and theorems can be found in <ref> [2] </ref>. 2 Related Work Other researchers have addressed the problem of reducing the complexity of model checking. As mentioned in the introduction, bisimulation preserves the truth of all CTL formulas, and hence can be used to identify equivalent states to derive smaller component machines.
Reference: 3. <author> A. Bouajjani, J.-C. Fernandez, N. Halbwachs, P. Raymond, and C. Ratel. </author> <title> Minimal state graph generation. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 18(3) </volume> <pages> 247-271, </pages> <year> 1992. </year>
Reference-contexts: As mentioned in the introduction, bisimulation preserves the truth of all CTL formulas, and hence can be used to identify equivalent states to derive smaller component machines. This technique has been used by <ref> [3] </ref>. Clarke et al. presented the interface rule, which can be applied when a CTL formula refers to the atomic propositions of just one machine, the "main" machine [7]. In this case, the outputs of the other machines that cannot be sensed by the main machine, can be "hidden".
Reference: 4. <author> M. C. Browne, E. M. Clarke, and O. Grumberg. </author> <title> Characterizing Kripke structures in temporal logic. </title> <type> Technical Report CS 87-104, </type> <institution> Department of Computer Science, Carnegie Mellon University, </institution> <year> 1987. </year>
Reference-contexts: These equivalent states are then used to simplify the components before taking their product, thus leading to a smaller product machine. It is well known that bisimulation equivalence is the coarsest (or weakest) equivalence that preserves the truth of all CTL formulas <ref> [4] </ref>. However, in general we are interested in model checking a system with respect to just a few formulas, and hence preserving all CTL formulas is stronger than needed.
Reference: 5. <author> M. Chiodo, T. R. Shiple, A. L. Sangiovanni-Vincentelli, and R. K. Brayton. </author> <title> Automatic compositional minimization in CTL model checking. </title> <booktitle> In Proc. Int'l Conf. on Computer-Aided Design, </booktitle> <pages> pages 172-178, </pages> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: This is especially true when ascertaining if the environment for a system has been correctly modeled so that it can produce the stimuli of interest. Hence, we are interested in techniques that can handle full CTL. The work of Chiodo et al. <ref> [5] </ref> has similar aims as ours, and the current work can be seen as an outgrowth of that work. Both approaches are exact, fully automatic, and formula dependent.
Reference: 6. <author> E. M. Clarke, E. A. Emerson, and A. P. Sistla. </author> <title> Automatic verification of finite-state concurrent systems using temporal logic specifications. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> Apr. </month> <year> 1986. </year>
Reference-contexts: A well known verification technique is computation tree logic (CTL) model checking. In this approach, a design is modeled as a finite state machine (FSM), properties are stated using CTL formulas, and a "model checker" is used to prove that the FSM satisfies the given CTL formulas <ref> [6] </ref>. The complexity of model checking a formula is linear in the number of states of the FSM. Oftentimes, large designs are constructed by linking together a set of FSMs. <p> The semantics of CTL is usually defined on finite Kripke structures, which are directed graphs where each node is labeled by a set of atomic propositions <ref> [6] </ref>. To extend these semantics to FSMs, we just ignore the labels on the transitions of the FSMs, and we view the outputs as atomic propositions. Let M = (S; I; J; T; O) be an FSM.
Reference: 7. <author> E. M. Clarke, D. E. Long, and K. L. McMillan. </author> <title> Compositional model checking. </title> <booktitle> In 4th Annual Symposium on Logic in Computer Science, Asilomar, </booktitle> <address> CA, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: This technique has been used by [3]. Clarke et al. presented the interface rule, which can be applied when a CTL formula refers to the atomic propositions of just one machine, the "main" machine <ref> [7] </ref>. In this case, the outputs of the other machines that cannot be sensed by the main machine, can be "hidden". After hiding such outputs, some states in the other machines may become equivalent, and hence the number of states can be reduced.
Reference: 8. <author> O. Coudert, C. Berthet, and J. C. Madre. </author> <title> Verification of synchronous sequential machines based on symbolic execution. </title> <editor> In J. Sifakis, editor, </editor> <booktitle> Proceedings of the Workshop on Automatic Verification Methods for Finite State Systems, volume 407 of Lecture Notes in Computer Science, </booktitle> <pages> pages 365-373. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1989. </year>
Reference-contexts: The lower bound is T itself. Given these bounds, a heuristic like restrict <ref> [8] </ref> is used to find a small BDD between T and T max . It can be shown that any transition relation between T and T max can be used without altering the result returned by the model checker.
Reference: 9. <author> D. Dams, O. Grumberg, and R. Gerth. </author> <title> Generation of reduced models for checking fragments of CTL. </title> <editor> In C. Courcoubetis, editor, </editor> <booktitle> Proceedings of the Conference on Computer-Aided Verification, volume 697 of Lecture Notes in Computer Science, </booktitle> <pages> pages 479-490. </pages> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: If the formula is false, then the product machine must always be formed. An asset of this approach is that it handles fairness constraints on the system. Dams et al. have also devised an approach using ACTL <ref> [9] </ref>. Like our method, they compute an equivalence with respect to a single formula. Although they are limited to formulas of ACTL, it may turn out that coarser equivalences are possible by restricting to a subset of CTL.
Reference: 10. <author> E. A. Emerson. </author> <title> Temporal and modal logic. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 995-1072. </pages> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1990. </year>
Reference-contexts: In fact, by generalizing this reasoning, we can show that if FAIL were defined in such a way that the converse of Proposition 2 did hold, then FAIL would be EXPTIME-hard to compute. The reduction is from CTL satisfiability, which is known to be EXPTIME-complete <ref> [10] </ref>. To check if a formula is satisfiable, compute FAIL for the component M shown in Figure 4, where p is some atomic proposition not in .
Reference: 11. <author> O. Grumberg and D. E. </author> <title> Long. Model checking and modular verification. </title> <editor> In J. C. M. Baeten and J. F. Groote, editors, </editor> <booktitle> CONCUR '91, International Conference on Concurrency Theory, volume 527 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: In general, any output not referred to by the formula, and not observable by other machines, can be hidden. Grumberg et al. defined a subset of CTL, known as ACTL, which permits only universal path quantification, and not existential path quantification <ref> [11] </ref>. They go on to develop an approach to compositional model checking for ACTL. If an ACTL formula is true of one component in a system, then it is true of the entire system. Thus, in some cases the full product machine can be avoided. <p> The output function takes a state in S and returns an assignment to the outputs, i.e. O : S ! 2 J . Our definition of FSM is equivalent to that of a Moore machine in <ref> [11] </ref>. Composition is defined in the usual way. In composing two interacting FSMs, some inputs of each machine may be equal to the outputs of the other machine, whereas other inputs may come from the environment of the composed FSM.
Reference: 12. <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1989. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: When the top level is reached and just a single machine remains, the usual CTL model checking algorithm is applied to determine the states that satisfy . Our formula dependent equivalence can be best explained by comparing it to bisimulation. ("strong bisimulation" of Milner <ref> [12, p. 88] </ref>) Given an FSM M = (S; I; J; T; O), the bisimulation equivalence relation, denoted by ~, is the coarsest equivalence relation satisfying the following: For all x; y 2 S, x ~ y implies * O (x) = O (y) and * for all a 2 (recall
References-found: 12

