URL: ftp://ftp.cc.gatech.edu/pub/coc/tech_reports/1998/GIT-CC-98-08.ps.Z
Refering-URL: http://www.cs.gatech.edu/tech_reports/index.98.html
Root-URL: 
Email: phyllis,schwan@cc.gatech.edu  
Title: Dynamic Authentication for High-Performance Networked Applications  
Author: Phyllis A. Schneck and Karsten Schwan 
Date: February 6, 1998  
Address: Atlanta, GA 30332-0280  
Affiliation: College of Computing Georgia Institute of Technology  
Note: This work was funded by DARPA, Aasert grant DAAH04-96-1-0209. Patent pending.  
Abstract: Both government and business are increasingly interested in addressing the growing threats imposed by the lack of adequate information security. Consistent with these efforts, our work focuses on the integrity and protection of information exchanged in high-performance networked computing applications such as video teleconferencing and other streamed interactive data exchanges. For these applications, security procedures are often omitted in the interest of performance. Since this may not be acceptable when using public communications media, our research makes explicit and then utilizes the inherent tradeoffs in realizing performance vs. security in communications. In this paper, we expand the notion of QoS to include the level of security that can be offered within performance and CPU resource availability constraints. To address performance and security tradeoffs in asymmetric and dynamic client-server environments, we developed Authenticast, a dynamically configurable, user-level communications protocol, offering variable levels of security throughout execution. The Authenticast protocol comprises a suite of heuristics to realize dynamic security levels, as well as heuristics that decide when and how to apply dynamic security. To demonstrate this protocol, we have implemented a prototype of a high performance privacy system. We have developed and experimented with a novel security control abstraction with which trade offs in security vs. performance may be made explicit and then utilized with dynamic client-server asymmetries. This abstraction is called a security thermostat [12], and interacts directly with Authen-ticast to enable adaptive security processing. Our results demonstrate overall increased scalability and improved performance when adaptive security is applied to the client-server platform with varying numbers of clients and varying resource availabilities at clients. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> I. Agi and L. Gong. </author> <title> An empirical study of secure mpeg video transmission. </title> <booktitle> In Symposium on Network and Distributed Systems Security. IEEE, </booktitle> <year> 1996. </year>
Reference: [2] <author> A. Campbell, C. Aurrecoechea, and L. Hauw. </author> <title> A review of qos architectures. </title> <booktitle> In Proceedings of 4th IFIP International Workshop on Quality of Service, </booktitle> <address> IWQS'96, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Our work addresses adjustments that also encompass security as part of overall QoS. We provide user-level heuristics to best use the allocation of resources provided in a resource reservation protocol, as defined in <ref> [2] </ref>. However, we also leave room for renegotiation as defined in [13]. Nahrstedt and Steinmetz present further schemes for dynamic resource allocation in networked multimedia systems in [11]. Our work, although it addresses CPU resources rather than network resources, is similar in spirit to that presented in [11].
Reference: [3] <author> W.D. Diffie and M.E. Hellman. </author> <title> New directions in cryptography. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> 22(6), </volume> <month> November </month> <year> 1976. </year>
Reference: [4] <author> ATM Forum. </author> <title> Atm user-network interface (uni) signalling specification 3.1. </title> <publisher> PTR Prentice Hall, </publisher> <year> 1993. </year>
Reference: [5] <author> J.F. Huard, I. Inoue, A. A. Lazar Lazar, and H. Yamanaka. </author> <title> Meeting qos guarantees by end-to-end qos monitoring and adaptation. </title> <booktitle> In Workshop on Multimedia and Collaborative Environments of the Fifth IEEE International Symposium On High Performance Distributed Computing (HPDC-5). IEEE, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: In comparison to varied levels of security, a large body of work has been done addressing the categorization of other application behaviors into "levels". For example, Huard, Inoue, Lazar and Ya-manaka address traffic classes in <ref> [5] </ref>, where network services are mapped to traffic classes as defined by the COMET group. There exists substantial indication that future trends in network security may lead to "security classes," creating the need for similar mappings in the security context, such as those presented in our work in this paper. [5] <p> <ref> [5] </ref>, where network services are mapped to traffic classes as defined by the COMET group. There exists substantial indication that future trends in network security may lead to "security classes," creating the need for similar mappings in the security context, such as those presented in our work in this paper. [5] also addresses adaptive mechanisms by which a host may dynamically adjust its parameters to prevent QoS violation. Our work addresses adjustments that also encompass security as part of overall QoS.
Reference: [6] <author> J.F. Huard and A.A. Lazar. </author> <title> On qos mapping in multimedia networks. </title> <booktitle> In 21th IEEE Annual International Computer Software and Application Conference (COMPSAC '97). IEEE, </booktitle> <month> August </month> <year> 1997. </year>
Reference: [7] <author> D. Le Gall. </author> <title> Mpeg: A video compression standard for multimedia applications. </title> <journal> Communications of the ACM, </journal> <volume> 34(4), </volume> <month> April </month> <year> 1991. </year>
Reference: [8] <author> Y. Li, Z. Chen, S. Tan, and R. Campbell. </author> <title> Security enhanced mpeg player. </title> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <year> 1996. </year>
Reference-contexts: Varied levels of security are also employed in the MPEG player described by Campbell et al in <ref> [8] </ref>, which also considers the issue of security vs. performance, yet focuses on encryption whereas we emphasize authentication. As with [10], [8] also employs 3 information, such as frame type, to select the par-ticular frames to be encrypted. <p> Varied levels of security are also employed in the MPEG player described by Campbell et al in <ref> [8] </ref>, which also considers the issue of security vs. performance, yet focuses on encryption whereas we emphasize authentication. As with [10], [8] also employs 3 information, such as frame type, to select the par-ticular frames to be encrypted. Extensions of our work with authentication could use similar tactics for dynamically identifying frames to be verified. 3 Enabling Flexible Authentica tion Security requirements vary with information sensitivity and user desires.
Reference: [9] <editor> A.J. Menezes, P.C. van Oorschot, and S. A. Vanstone. </editor> <booktitle> Handbook of Applied Cryptography. </booktitle> <publisher> CRC Press, Inc., </publisher> <year> 1997. </year>
Reference-contexts: In addition, this public/private key authentication tactic can also provide non-repudiation. 2 Since we know by 1 We note that data integrity and authentication may be provided at much less computational cost with only message digests <ref> [9] </ref> and no signature or verification overheads. However, this will not satisfy those users whose transactions require strong public key authentication, or a method that can fully guarantee proof of origination (message digest functions cannot always offer this guarantee due to collisions in hash functions). <p> Often, policies dictate strong security, even if CPUs cannot comply. Therefore, we use strong public key authentication to demonstrate and highlight the tradeoffs that come with the highest levels of data security. 2 We do not provide the adjudication process or third-party judge <ref> [9] </ref> to enable the non-repudiation service; we employ definition that the sender is ostensibly the only party with the sender's private key, then a sender cannot deny having sent any data that verify as having been signed with that sender's private key. <p> over another, or leave these tasks to the automated option provided. * Choosing an authentication algorithm and pa rameters (e.g., key and key length) A user (or the automatic heuristic) may choose to employ any of these above authentication tactics using different signing and verification computation algorithms, such as RSA <ref> [9] </ref> and DSA. [9] These algorithms differ in their on-line signing and verification processing overheads; RSA is sender-heavy, whereas DSA imposes a higher load on the receiver. <p> leave these tasks to the automated option provided. * Choosing an authentication algorithm and pa rameters (e.g., key and key length) A user (or the automatic heuristic) may choose to employ any of these above authentication tactics using different signing and verification computation algorithms, such as RSA <ref> [9] </ref> and DSA. [9] These algorithms differ in their on-line signing and verification processing overheads; RSA is sender-heavy, whereas DSA imposes a higher load on the receiver. <p> The verification of this larger buffer takes no more time than the verification of a single received packet. This is because all data to be verified are hashed <ref> [9] </ref>, which compresses them to a standard size, independent of how much data are hashed. For example, the product of hashing 90 packets' worth of data is the same size as the result of hashing a single packet's data. <p> However, in neither case does the user sacrifice any security. 3. Secret Key Connection This heuristic, invoked only at user request, provides the option to use a "secret key" <ref> [9] </ref> shared between a given sender and receiver, instead of a public and private key for each. This secret key, known only by that sender and receiver pair, can be used to scramble data. <p> Algorithm change Certain authentication algorithms such as DSA are more computation-intensive in verification, which is done at the client. Further, DSA can actually be extremely efficient in the signing, because signature generation requires a single 6 modular exponentiation <ref> [9] </ref>, which can be pre-computed and, thus, not consume CPU cycles during application execution. Other algorithms, such as RSA, have the opposite load and are more computation-intensive in signing, done by the server.
Reference: [10] <author> J. Meyer and F. Gadegast. </author> <title> Security mechanisms for multimedia-data with the example mpeg-i-project. Project description of SECMPEG, </title> <year> 1995. </year>
Reference-contexts: Our work, although it addresses CPU resources rather than network resources, is similar in spirit to that presented in [11]. We are expanding on this dynamic adaptation trend to provide for security processing. SECMPEG <ref> [10] </ref>, has some parallels with Authen-ticast in that it offers varied levels of security for encrypted MPEG. SECMPEG includes the capability to encrypt only the most important and significant data, in order to improve performance. <p> Varied levels of security are also employed in the MPEG player described by Campbell et al in [8], which also considers the issue of security vs. performance, yet focuses on encryption whereas we emphasize authentication. As with <ref> [10] </ref>, [8] also employs 3 information, such as frame type, to select the par-ticular frames to be encrypted. Extensions of our work with authentication could use similar tactics for dynamically identifying frames to be verified. 3 Enabling Flexible Authentica tion Security requirements vary with information sensitivity and user desires.
Reference: [11] <author> K. Nahrstedt and Steinmentz. R. </author> <title> Resource management in multimedia networked systems. </title> <editor> In Jim Cavanagh, editor, </editor> <booktitle> Handbook of Multimedia Networking, </booktitle> <pages> pages 381-405. </pages> <publisher> Auerbach Publications, </publisher> <year> 1995. </year>
Reference-contexts: We provide user-level heuristics to best use the allocation of resources provided in a resource reservation protocol, as defined in [2]. However, we also leave room for renegotiation as defined in [13]. Nahrstedt and Steinmetz present further schemes for dynamic resource allocation in networked multimedia systems in <ref> [11] </ref>. Our work, although it addresses CPU resources rather than network resources, is similar in spirit to that presented in [11]. We are expanding on this dynamic adaptation trend to provide for security processing. <p> However, we also leave room for renegotiation as defined in [13]. Nahrstedt and Steinmetz present further schemes for dynamic resource allocation in networked multimedia systems in <ref> [11] </ref>. Our work, although it addresses CPU resources rather than network resources, is similar in spirit to that presented in [11]. We are expanding on this dynamic adaptation trend to provide for security processing. SECMPEG [10], has some parallels with Authen-ticast in that it offers varied levels of security for encrypted MPEG. SECMPEG includes the capability to encrypt only the most important and significant data, in order to improve performance.
Reference: [12] <author> P. Schneck and K. Schwan. Authenticast: </author> <title> An adaptive protocol for high-performance, secure. </title> <type> Technical Report GIT-CC-97-22, </type> <institution> Network Ap-plicationsGeorgia Institute of Technology, </institution> <address> At-lanta, GA 30332-0280, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: Using this prototype, we have developed and experimented with a novel security control abstraction with which tradeoffs in security vs. performance may be made explicit and then utilized with dynamic client-server asymmetries. This abstraction is called a security thermostat <ref> [12] </ref>, and interacts directly with Authenticast. In transmissions which require security operations at the clients, we show performance improvements when using the security thermostat with multimedia streams. <p> The Au-thenticast protocol also serves as CPU resource manager, in comparison to the the DRRM [13], which manages network resources. * We improve platform scalability and performance of secure communications in a heterogeneous client-server environment. This is achieved by developing the concept of the Security Thermostat <ref> [12] </ref> which enables dynamic runtime modification of securityLevel for each connection by communicating with Au-thenticast. The thermostat setting is mapped to a user-level QoS specification expressing a range of permissible security levels. * We provide feedback to end users depicting the security level of the data presented to them. <p> We present our experimentation results and discuss some lessons learned in Section 5, and our conclusions and future work directions are in Section 6. 2 Related Work Numerous systems, protocols, and user applications are currently being enhanced to provide greater se curity and thus increased flexibility for systems and end-users. <ref> [12] </ref> details the concept of the security thermostat as well as how this is coupled with the Authenti-cast dynamic authentication protocol. <p> Upon sensing a gap, the heuristic switches from delayed authentication to percentage-based authentication, clearly with a percentage of less than 100% 3 Each packet is given an "Authenticast sequence number," which is part of the Authenticast control information sent with each packet <ref> [12] </ref>, and is independent of any sequencing identification assigned at the network level but greater than any user-specified minimum percentage.
Reference: [13] <author> P. Schneck, E.W. Zegura, and K. Schwan. Drrm: </author> <title> Dynamic resource reservaion manager. </title> <booktitle> In International Conference on Computer Communications and Networks. IEEE, </booktitle> <year> 1996. </year>
Reference-contexts: Authenticast comprises the dynamic authentication heuristics presented herein, and it is responsible for the non-user-driven decisions for changes in heuristics in response to CPU resource availability changes. The Au-thenticast protocol also serves as CPU resource manager, in comparison to the the DRRM <ref> [13] </ref>, which manages network resources. * We improve platform scalability and performance of secure communications in a heterogeneous client-server environment. This is achieved by developing the concept of the Security Thermostat [12] which enables dynamic runtime modification of securityLevel for each connection by communicating with Au-thenticast. <p> Our work addresses adjustments that also encompass security as part of overall QoS. We provide user-level heuristics to best use the allocation of resources provided in a resource reservation protocol, as defined in [2]. However, we also leave room for renegotiation as defined in <ref> [13] </ref>. Nahrstedt and Steinmetz present further schemes for dynamic resource allocation in networked multimedia systems in [11]. Our work, although it addresses CPU resources rather than network resources, is similar in spirit to that presented in [11]. We are expanding on this dynamic adaptation trend to provide for security processing. <p> For instance, if the user chooses to allow the protocol to manage all adjustments given a specified range, then the user can enter that range into the thermostat as well. Authenticast and its applications communicate with the underlying network medium through the Dynamic Resource Reservation Manager <ref> [13] </ref>. The DRRM provides the capability to renegotiate a new connection without interrupting application execution. This is used to implement the Secret Key Connection (also referred to as "Secure Connection") heuristic, in which authentication is used in connection negotiation. <p> If users do not require non-repudiation, then they may choose to enhance their performance by selecting the secret key authentication method over public/private key pairs. In fact, Authenticast can orchestrate this change using the DRRM <ref> [13] </ref>, if agreed upon by both hosts, during application execution, and it will indicate to both hosts when the change occurs. The process of obtaining this new connection is discussed in Section 4.1.1. 4.
Reference: [14] <author> Bruce Schneier. </author> <title> Cryptography, security, and the future. </title> <journal> Communications of the ACM, </journal> <volume> 40(1):138, </volume> <month> January </month> <year> 1997. </year> <month> 12 </month>
Reference-contexts: Authenticast tracks security levels specified by each connection, and treats this as a user-level system resource component of a user's requested QoS. To demonstrate this protocol, we have implemented a prototype of a high performance privacy system <ref> [14] </ref> with strong public key security which enables experimentation with strongly-authenticated video transmission. Using this prototype, we have developed and experimented with a novel security control abstraction with which tradeoffs in security vs. performance may be made explicit and then utilized with dynamic client-server asymmetries.
References-found: 14

