URL: ftp://ftp.docs.uu.se/docs/papers/exrt_group/bjornfot.Tri-95.ps.Z
Refering-URL: http://www.csd.uu.se/~stinal/publications.html
Root-URL: 
Email: E-mail: bjornfot@docs.uu.se  
Title: TERMINATION OF ADA TASKS IN HARDWARE  
Author: Lars Bjrnfot, Kristina Lundqvist, Gran Wall and Lars Asplund 
Address: P.O. Box 325, S-751 05 Uppsala, Sweden  
Affiliation: Department of Computer Systems, Uppsala University  
Abstract: A highly parallel algorithm for termination of Ada tasks is suggested. The algorithm is intended for hardware implementation in order to overcome the complexity of recursive software algorithms. High efficiency and determinism is expected to be achieved with a hardware implementation. A VHDL implementation of termination units is presented together with simulations that show that the termination condition can be evaluated in constant time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Lipsett, C. Schaefer, C. Ussery, </author> <title> VHDL: Hardware Description and Design, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1989. </year>
Reference-contexts: We present an algorithm for evaluation of the termination condition. The algorithm is intended for hardware implementation, and we give the design and implementation in a hardware description language, VHDL <ref> [1] </ref>. High efficiency is achieved by having a state machine per task evaluating the termination condition. The state machines execute in parallel. The implementation is written in a way that allows synthesis as well as simulation.
Reference: [2] <author> L. Bjrnfot, L. Asplund, K. Lundqvist, and G. Wall, </author> <title> Distributed Run-Time Systems, a Protocol for Ada, </title> <publisher> LNCS 688, </publisher> <pages> pp. 249 - 263, </pages> <address> 1993, </address> <publisher> Springer-Verlag. </publisher>
Reference: [3] <author> L. Bjrnfot, K. Lundqvist, G. Wall, and L. Asplund, </author> <title> Distribution of Tasks Within a Centrally Scheduled Local Area Network, </title> <booktitle> Proceedings from the First Symposium 'Ada in Europe', </booktitle> <address> Copenhagen Denmark, </address> <month> September </month> <year> 1994. </year>
Reference: [4] <institution> United States Department of Defence, </institution> <note> Reference Manual for the Ada Programming Language, ANSI/ MIL-STD-1815A, 1983. ATAC </note>
Reference-contexts: We suggest a hardware implementation of Ada tasking as a separate node in a distributed system [2][3]. The concept is not language dependent. Any language with a clearly defined tasking mechanism could benefit from such hardware support, but we have primarily concentrated on Ada 83 <ref> [4] </ref>, since it is standardized (with Ada we mean Ada 83 in this paper). Most important of the previous work in the area of hardware implementation of Ada tasking, is ATAC [5]. Full Ada 83 tasking is implemented as a co-processor.

Reference: [6] <author> Stefan Asserhll, </author> <title> A Microprocessor with Ada Real-Time Support, in Ada i Komersiella system, </title> <booktitle> Ada in Sweden and SESAM, </booktitle> <month> Apr </month> <year> 1991. </year> <title> SAAB Ericsson Space, THOR A 32-bit RISC with on-chip Ada Support and Error Detection, </title> <month> Oct </month> <year> 1992. </year> <title> Advance information. </title> <publisher> FASTHARD </publisher>
Reference-contexts: Full Ada 83 tasking is implemented as a co-processor. ATAC in its current version 2.0 handles 32 tasks on-chip, but the number of tasks can be expanded to 2048 with external RAM. Other hardware solutions for increasing performance of Ada is the microprocessor Thor <ref> [6] </ref>, a general purpose 32-bit RISC with support for Ada tasking. There are other hardware implementations of real-time kernels that are language independent, e.g. the co-processor FASTHARD [7], and the CPU FASTCHART [8], but they do not address the Ada tasking mechanism.
Reference: [7] <author> Lennart Lindh, </author> <title> FASTHARD A Fast Time Deterministic HARDware Based Real-Time Kernel, </title> <booktitle> in Euromi-cro '92 workshop on Real-Time Systems, </booktitle> <year> 1992. </year> <title> Lennart Lindh, A Real-Time Kernel Implemented in One Chip, </title> <booktitle> in Euromicro '93 workshop on Real-Time Systems, </booktitle> <year> 1993. </year> <month> FASTCHART </month>
Reference-contexts: Other hardware solutions for increasing performance of Ada is the microprocessor Thor [6], a general purpose 32-bit RISC with support for Ada tasking. There are other hardware implementations of real-time kernels that are language independent, e.g. the co-processor FASTHARD <ref> [7] </ref>, and the CPU FASTCHART [8], but they do not address the Ada tasking mechanism. An efficient implementation of Ada task termination for shared memory MIMD architecture is presented in [9]. The solution is highly parallel and distributed. Hardware support for Ada tasking is also discussed in [10].
Reference: [8] <author> L. Lindh and F. Stanischewski, </author> <title> FASTCHART A Fast Time Deterministic CPU and Hardware Based Real-Time Kernel, 1991. Collection of technical reports, </title> <editor> CUS, Vsters, Sweden. F. Stanischewski and L. Lindh, </editor> <title> A Design of a Real-Time Unit (RTU) in Hardware, </title> <booktitle> in SNART Symposium, </booktitle> <pages> pp 52-58, </pages> <month> June </month> <year> 1991. </year> <title> ISSN 0283-0574 Frank Stanischewski, FASTCHART Performance and Benefits and Disadvantages of the Architecture, </title> <booktitle> in Euromicro '93 workshop on Real-Time Systems, </booktitle> <year> 1993. </year> <title> Termination of Ada Tasks in Hardware 13 MISCELLANEOUS </title>
Reference-contexts: Other hardware solutions for increasing performance of Ada is the microprocessor Thor [6], a general purpose 32-bit RISC with support for Ada tasking. There are other hardware implementations of real-time kernels that are language independent, e.g. the co-processor FASTHARD [7], and the CPU FASTCHART <ref> [8] </ref>, but they do not address the Ada tasking mechanism. An efficient implementation of Ada task termination for shared memory MIMD architecture is presented in [9]. The solution is highly parallel and distributed. Hardware support for Ada tasking is also discussed in [10].
Reference: [9] <author> S. Flynn, E. Shonberg, and E. Schonberg, </author> <title> The Efficient Termination of Ada Tasks in a Multiprocessor Environment, </title> <journal> in Ada Letters, </journal> <volume> vol VII, </volume> <pages> pp 55-76, </pages> <month> Nov/Dec </month> <year> 1987. </year>
Reference-contexts: There are other hardware implementations of real-time kernels that are language independent, e.g. the co-processor FASTHARD [7], and the CPU FASTCHART [8], but they do not address the Ada tasking mechanism. An efficient implementation of Ada task termination for shared memory MIMD architecture is presented in <ref> [9] </ref>. The solution is highly parallel and distributed. Hardware support for Ada tasking is also discussed in [10]. A distributed version of ATAC is suggested in [11].
Reference: [10] <author> Anders Ard, </author> <title> Hardware Support for Efficient Execution of Ada Tasking, </title> <publisher> IEEE, </publisher> <year> 1988. </year>
Reference-contexts: An efficient implementation of Ada task termination for shared memory MIMD architecture is presented in [9]. The solution is highly parallel and distributed. Hardware support for Ada tasking is also discussed in <ref> [10] </ref>. A distributed version of ATAC is suggested in [11].
Reference: [11] <author> Lars Lundberg, </author> <title> A Coprocessor for High Performance Multiprocessor Ada Tasking, </title> <booktitle> in Proc. of the Ada Europe International Conference, Athes, </booktitle> <pages> pp 147-165. </pages> <publisher> Springer Verlag, </publisher> <year> 1991. </year> <month> SPRING </month>
Reference-contexts: An efficient implementation of Ada task termination for shared memory MIMD architecture is presented in [9]. The solution is highly parallel and distributed. Hardware support for Ada tasking is also discussed in [10]. A distributed version of ATAC is suggested in <ref> [11] </ref>.
Reference: [12] <author> J. A. Stankovic and K. Ramamritham, </author> <title> The Spring kernel: A new paradigm for real-time systems, </title> <journal> IEEE Software, </journal> <volume> vol 8, nr 3, </volume> <pages> pp 62-72, </pages> <month> May </month> <year> 1991. </year> <title> M.C. Ko and W.P. Burleson, The Spring Scheduling Co-Processor, </title> <institution> TR-93-CSE-4, Dept. of Electrical and Computer Engineering, University of Massachusetts, </institution> <year> 1993. </year>
Reference-contexts: An efficient implementation of Ada task termination for shared memory MIMD architecture is presented in [9]. The solution is highly parallel and distributed. Hardware support for Ada tasking is also discussed in [10]. A distributed version of ATAC is suggested in [11]. The scheduling co-processor in SPRING <ref> [12] </ref> performes on-the-fly scheduling analysis to decide if new tasks can be created with all deadlines guaranteed. 1.1 Outline The rest of this paper is structured in the following manner: Section 2: Discusses Ada's task model with the purpose of explaining and clarifying important aspect of the semantics.
References-found: 11

