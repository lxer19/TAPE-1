URL: http://www.cs.umn.edu/Users/dept/users/gini/8599/cutkosky.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/gini/8599/
Root-URL: http://www.cs.umn.edu
Title: PACT: An Experiment in Integrating Concurrent Engineering Systems Enterprise Integration Technologies Keywords: agents, distributed design,
Author: Mark R. Cutkosky, Robert S. Engelmore, Richard E. Fikes, Michael R. Genesereth, Thomas R. Gruber, William Mark, Jay M. Tenenbaum, Jay C. Weber, 
Note: This work was partially supported by DARPA prime contract DAAA15-91-C-0104 through Lockheed subcontract SQ70A3030R (monitored by the U.S. Army Ballistic Research Laboratory), through the support of Hewlett-Packard Laboratories, and by the Office of Naval Research (ONR N00014-92-J-1833).  
Affiliation: Stanford University  Lockheed Palo Alto Research Labs  
Abstract: The Palo Alto Collaborative Testbed (PACT) is a laboratory for joint experimentation in computer-aided concurrent engineering being pursued by research groups at Stanford University, Lockheed, Hewlett-Packard, and Enterprise Integration Technologies. The current prototype integrates four preexisting concurrent engineering systems into a common framework. Each individual system is used to model different aspects of a small robotic manipulator, and to reason about them from a different engineering perspective (dynamics, digital electronics, and software). The systems interact via knowledge-based communication languages and services. Initial PACT experiments have explored engineering knowledge exchange in the context of a distributed simulation and simple incremental redesign scenario. This paper describes the nature of these experiments, the technology underlying them, and the results produced. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Neches, R. E. Fikes, T. Finin, T. Gruber, R. Patil, T. Senator, and W. R. Swartout, </author> <title> "Enabling Technology for Knowledge Sharing," </title> <journal> AI Magazine 12(3), </journal> <pages> 16-36, </pages> <year> 1991. </year>
Reference-contexts: We review our initial experiments in distributed simulation and incremental redesign, describe PACT's agent-based architecture, and discuss lessons learned and future directions. For details on the underlying language, protocols and knowledge-sharing research issues, we refer the reader to references <ref> [1, 2, 4] </ref>. The Distributed Design Problem Although concurrent engineering is almost universally advocated today, it is hard to accomplish when large, multidisciplinary projects are involved. To illustrate some of the issues, consider the team depicted in Figure 1. <p> Each of these levels is the subject of widespread discussion and development, primarily by DARPA-sponsored knowledge-representation standards committees <ref> [1] </ref>. One group has proposed an agent communication language called the Knowledge Query and Manipulation Language (KQML) [2]. 5 KQML specifies a relatively small set of performatives that categorize the services that agents may request of one another. <p> This shared language need only cover the intersection of tool interests, usually a small fraction of the contents of a full, shared design model. In principle, the language can evolve from a few core concepts <ref> [1, 6] </ref>. The agents communicate among themselves using KQML and KIF. Most KQML messages consist of queries and assertions in KIF (as well as basic control functions such as reset).
Reference: [2] <author> T. Finin, D. McKay, and R. Fritzson, </author> <title> "An Overview of KQML: A Knowledge Query and Manipulation Language," </title> <type> Technical Report, </type> <institution> Computer Science Department, University of Maryland, </institution> <year> 1992. </year>
Reference-contexts: We review our initial experiments in distributed simulation and incremental redesign, describe PACT's agent-based architecture, and discuss lessons learned and future directions. For details on the underlying language, protocols and knowledge-sharing research issues, we refer the reader to references <ref> [1, 2, 4] </ref>. The Distributed Design Problem Although concurrent engineering is almost universally advocated today, it is hard to accomplish when large, multidisciplinary projects are involved. To illustrate some of the issues, consider the team depicted in Figure 1. <p> Each of these levels is the subject of widespread discussion and development, primarily by DARPA-sponsored knowledge-representation standards committees [1]. One group has proposed an agent communication language called the Knowledge Query and Manipulation Language (KQML) <ref> [2] </ref>. 5 KQML specifies a relatively small set of performatives that categorize the services that agents may request of one another. For example, one agent may request to assert a fact to another's local data/knowledge, retract a previous assertion, or obtain the answer to some query.
Reference: [3] <author> J. A. Fulton, </author> <title> "The Semantic Unification meta-model: technical approach," Standards Working Document ISO TC184/SC4/* WG3 N 81 (P 0), IGES/PDES Organization, Dictionary/Methodology Committee, 1991. </title> <type> Contact James Fulton, </type> <institution> Boeing Computer Services, </institution> <address> P. O. Box 24346, MS 7L-64, Seattle, WA 98124-0346. </address>
Reference-contexts: PACT serves as a testbed for knowledge sharing research emerging from the artificial intelligence community, as well as for emerging data exchange standards such as PDES/STEP <ref> [3] </ref>. The PACT architecture is based on interacting agents (programs that encapsulate engineering tools).
Reference: [4] <author> M. R. Genesereth, R. E. Fikes, et al., </author> <title> "Knowledge Interchange Format, Version 3.0 Reference Manual," </title> <type> Technical Report Logic-92-1, </type> <institution> Computer Science Department, Stanford University, </institution> <year> 1992. </year>
Reference-contexts: We review our initial experiments in distributed simulation and incremental redesign, describe PACT's agent-based architecture, and discuss lessons learned and future directions. For details on the underlying language, protocols and knowledge-sharing research issues, we refer the reader to references <ref> [1, 2, 4] </ref>. The Distributed Design Problem Although concurrent engineering is almost universally advocated today, it is hard to accomplish when large, multidisciplinary projects are involved. To illustrate some of the issues, consider the team depicted in Figure 1. <p> For example, one agent may request to assert a fact to another's local data/knowledge, retract a previous assertion, or obtain the answer to some query. A second proposal is a specification of the knowledge interchange format called KIF <ref> [4] </ref>. KIF can be used as a format for KQML arguments (KQML allows multiple formats). KIF is a prefix version of the language of first order predicate calculus, with various extensions to enhance its expressiveness. KIF provides for the communication of constraints, negations, disjunctions, rules, quantified expressions, and so forth.
Reference: [5] <author> D. B. Lenat, R. V. Guha, K. Pittman, D. Pratt, and M. Shepherd, </author> <title> "Cyc: Toward Programs with Common Sense," </title> <journal> Communications of the ACM 33(8), </journal> <pages> 30-49, </pages> <year> 1990. </year>

References-found: 5

