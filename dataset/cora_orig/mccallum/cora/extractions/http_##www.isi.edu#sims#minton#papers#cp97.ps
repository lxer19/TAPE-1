URL: http://www.isi.edu/sims/minton/papers/cp97.ps
Refering-URL: http://www.isi.edu/sims/minton/homepage.html
Root-URL: 
Email: minton@isi.edu  
Title: Configurable Solvers: Tailoring General Methods to Specific Applications  
Author: Steven Minton 
Address: 4676 Admiralty Way Marina del Rey, CA 90292  
Affiliation: USC Information Sciences Institute  
Abstract: Applying constraint-based problem solving methods in a new domain often requires considerable work. In this talk I will examine the state of the art in constraint-based problem solving techniques and the difficulties involved in selecting and tuning an algorithm to solve a problem. Most constraint-based solvers have many algorithmic variations, and it can make a very significant difference exactly which algorithm is used and how the problem is encoded. I will describe promising new approaches in which generic algorithms are automatically configured for specific applications. Using the "right" heuristic algorithm can make a tremendous difference in the efficiency of solving a constraint-satisfaction problem (CSP). Without a good algorithm, solving even a moderate-sized CSP (or any combinatorial problem) may be extremely time consuming. A great variety of heuristic algorithms have been described in the literature, each purported to perform well on some example problems. Unfortunately, it is rarely clear which method will perform best for a given problem, and the literature provides almost no guidance on this topic. In the past few years, several research groups have been experimenting with configurable solvers that can be automatically, or semi-automatically, configured for new applications. This work capitalizes on the fact that most CSP algorithms can be described as variations of a few basic approaches: backtracking, repair-based local search, branch-and-bound, etc. Rather than focusing on new CSP algorithms, these projects have considered the issues involved in specializing "generic" search methods. Synthesizing problem-specific versions of generic algorithms offers the advantages of both generality and efficiency. In this talk we will describe and contrast three systems, each of which represents a different approach to creating configurable solvers. The kids algorithm synthesis system [5] enables a user to synthesize an algorithm semi-automatically. Multi-tac [4] is a system that automatically configures constraint satisfaction algorithms, using a set of sample problem instances to guide the search for the best configuration. Eureka [2] represents a third approach, in which the system learns a classifier that predicts which configuration would be best, based on a set of training instances. The remainder of this paper summarizes my work with Multi-tac, outlining some of the basic issues that we have considered. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> J. Allen and S. Minton. </author> <title> Selecting the right heuristic algorithm: Runtime performance predictors. </title> <booktitle> In Proceedings of the Canadian AI Conference, </booktitle> <year> 1996. </year>
Reference: 2. <author> D.J. Cook and R.Craig Varnell. </author> <title> Maximizing the benefits of parallel search using machine learning. </title> <booktitle> In Proceedings AAAI-97, </booktitle> <year> 1997. </year>
Reference: 3. <author> S. Minton. </author> <title> An analytic learning system for specializing heuristics. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <year> 1993. </year>
Reference: 4. <author> S. Minton. </author> <title> Automatically configuring constraint satisfaction programs: A case study (in press). Constraints, </title> <type> 1(1), </type> <year> 1996. </year>
Reference: 5. <author> D.R. Smith. KIDS: </author> <title> A knowledge-based software development system. In M.R. </title> <editor> Lowry and R.D. McCartney, editors, </editor> <title> Automating Software Design. </title> <publisher> AAAI Press, </publisher> <year> 1991. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
References-found: 5

