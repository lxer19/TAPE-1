URL: ftp://ftp.cs.vu.nl/pub/papers/theory/IR-332.ps.Z
Refering-URL: http://www.cs.vu.nl/vakgroepen/ti/ftpindex.html
Root-URL: 
Email: oostrom@cs.vu.nl vink@cs.vu.nl  
Title: Transition system specifications in stalk format with bisimulation as a congruence  
Author: V. van Oostrom E.P. de Vink 
Keyword: and phrases semantics of programming languages, Structured Operational Semantics, transition system specifications, bisimulation equivalence  
Address: Boelelaan 1081a, NL-1081 HV Amsterdam  
Affiliation: Department of Mathematics and Computer Science, Vrije Universiteit De  
Abstract: A many-sorted variant, called stalk format, of the single sorted tyft-format for transition system specifications, introduced by Groote and Vaandrager, is proposed. The stalk format is shown to be a convenient formalism to express continuation-style transition systems for languages incorporating concepts as, e.g., process creation or backtracking, for which the existing formats seem less adequate. It is proved, extending a similar result for the single sorted case, that for an appropriate generalization of (strong) bisimilarity for the present many-sorted setting, bisimulation with respect to a transition system specification in stalk format, is a congruence. It is argued that the several conditions, required for the type of transition system specification put forward in the paper, can not be relaxed without loosing this congruence. Finally, the present format is compared with several existing ones in the literature, viz. De Simone-, GSOS- and pure tyft-format. 
Abstract-found: 1
Intro-found: 1
Reference: [AB88] <author> P. America and J.W. de Bakker. </author> <title> Designing equivalent models for process creation. </title> <journal> Theoretical Computer Science, </journal> <volume> 60 </volume> <pages> 109-176, </pages> <year> 1988. </year>
Reference-contexts: In the present paper we propose yet another format for transition system specifications which is suitably expressive to describe continuation style transition systems, as has been frequently used in comparative (metric) semantics, <ref> [AB88, AR89, Rut90b, BV91b, BV89, Bak91, EV93, BV92b] </ref>. The transition system specifications of these papers do not fit in the formats mentioned above, but will fit into the format introduced by the present paper, that we will call the stalk format. <p> This language is a prominent example of an (abstract) imperative programming language, for which the use of a many-sorted signature in describing its transitional behavior is pivotal when aiming for a comparison with an equivalent continuation-style deno- tational semantics. We base our treatment on the presentation of <ref> [AB88, BV91a] </ref> and refer to these papers for a more detailed explanation of the various transition schemes. <p> However, the many-sortedness is natural in the context of continuation- style operational semantics. In fact, main inspiration for the formulation of a transition system specification in stalk format for which bisimulation is a congruence are the studies in comparative semantics dealing with resumptions/continuations. Cf. <ref> [AB88, AR89, Bak91, BK88, BV91a, BV91b, BV92b, BV89, EV93, Rut90b] </ref>. There transition system specifications not fitting in the De Simone, GSOS and tyft formats are used as a basis for an operational semantics to be compared with a denotational one.
Reference: [AR89] <author> P.H.M. America and J.J.M.M. Rutten. </author> <title> A parallel object-oriented language: Design and semantic foundations. </title> <editor> In J.W. de Bakker, editor, </editor> <booktitle> Languages for Parallel Architectures: Design, Semantics, Implementation Models, </booktitle> <pages> pages 1-49. </pages> <publisher> Wiley, </publisher> <year> 1989. </year>
Reference-contexts: In the present paper we propose yet another format for transition system specifications which is suitably expressive to describe continuation style transition systems, as has been frequently used in comparative (metric) semantics, <ref> [AB88, AR89, Rut90b, BV91b, BV89, Bak91, EV93, BV92b] </ref>. The transition system specifications of these papers do not fit in the formats mentioned above, but will fit into the format introduced by the present paper, that we will call the stalk format. <p> However, the many-sortedness is natural in the context of continuation- style operational semantics. In fact, main inspiration for the formulation of a transition system specification in stalk format for which bisimulation is a congruence are the studies in comparative semantics dealing with resumptions/continuations. Cf. <ref> [AB88, AR89, Bak91, BK88, BV91a, BV91b, BV92b, BV89, EV93, Rut90b] </ref>. There transition system specifications not fitting in the De Simone, GSOS and tyft formats are used as a basis for an operational semantics to be compared with a denotational one.
Reference: [Bak91] <author> J.W. de Bakker. </author> <title> Comparative semantics for flow of control in logic programming without logic. </title> <journal> Information and Computation, </journal> <volume> 91 </volume> <pages> 123-179, </pages> <year> 1991. </year>
Reference-contexts: In the present paper we propose yet another format for transition system specifications which is suitably expressive to describe continuation style transition systems, as has been frequently used in comparative (metric) semantics, <ref> [AB88, AR89, Rut90b, BV91b, BV89, Bak91, EV93, BV92b] </ref>. The transition system specifications of these papers do not fit in the formats mentioned above, but will fit into the format introduced by the present paper, that we will call the stalk format. <p> Example 3.8 The next transition system specification exemplifying the stalk format, is a specification for ( cut ; cut ). The system is used, in the literature, for an operational model for the flow of control of Prolog with cut. See <ref> [Bak91, Vin90, BV89] </ref>. <p> However, the many-sortedness is natural in the context of continuation- style operational semantics. In fact, main inspiration for the formulation of a transition system specification in stalk format for which bisimulation is a congruence are the studies in comparative semantics dealing with resumptions/continuations. Cf. <ref> [AB88, AR89, Bak91, BK88, BV91a, BV91b, BV92b, BV89, EV93, Rut90b] </ref>. There transition system specifications not fitting in the De Simone, GSOS and tyft formats are used as a basis for an operational semantics to be compared with a denotational one.
Reference: [BD92] <author> E. Badouel and P. Darondeau. </author> <title> Structural operational specifications and trace automata. </title> <editor> In W.R. Cleaveland, editor, </editor> <booktitle> Proc. CONCUR'92, </booktitle> <pages> pages 302-316. </pages> <note> LNCS 630, 1992. 16 </note>
Reference-contexts: However, the general theory of transition system specifications has, compared to the bulk of the applications, attracted little attention. Apart from some comparative studies between SOS and differently formalized computational models, e.g., <ref> [BD92, BD93] </ref>, a small number of formats for transition system specifications have been 1 proposed in the literature, [Sim84, BIM88, GV92, Gro90, Fok93], viz. so-called De Simone, GSOS, tyft/tyxt, ntyft/ntyxt and tree rule format, respectively.
Reference: [BD93] <author> E. Badouel and P. Darondeau. </author> <title> Trace nets. </title> <editor> In J.W. de Bakker, W.-P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Semantics: Foundations and Applications, </booktitle> <pages> pages 2150. </pages> <note> LNCS 666, </note> <year> 1993. </year>
Reference-contexts: However, the general theory of transition system specifications has, compared to the bulk of the applications, attracted little attention. Apart from some comparative studies between SOS and differently formalized computational models, e.g., <ref> [BD92, BD93] </ref>, a small number of formats for transition system specifications have been 1 proposed in the literature, [Sim84, BIM88, GV92, Gro90, Fok93], viz. so-called De Simone, GSOS, tyft/tyxt, ntyft/ntyxt and tree rule format, respectively.
Reference: [BG91] <author> R. Bol and J.F. Groote. </author> <title> The meaning of negative premises in transition system specifications. </title> <editor> In J. Leach Albert, B. Monien, and M. Rodrguez Artalejo, editors, </editor> <booktitle> Proc. ICALP'91, </booktitle> <pages> pages 481-494. </pages> <note> LNCS 510, </note> <year> 1991. </year>
Reference-contexts: Further research spawning off now involves the incorporation of negative premises along the lines of the ntyft/ntyxt format <ref> [Gro90, BG91] </ref>. One might be optimistic about incorporation of the GSOS format by the stalk-format with negative premises, if such can be achieved.
Reference: [BIM88] <author> B. Bloom, S. Istrail, and A.R. Meyer. </author> <title> Bisimulation can't be traced. </title> <booktitle> In Proc. Principles of Programming Languages, </booktitle> <pages> pages 229-239. </pages> <address> San Diego, </address> <year> 1988. </year>
Reference-contexts: Apart from some comparative studies between SOS and differently formalized computational models, e.g., [BD92, BD93], a small number of formats for transition system specifications have been 1 proposed in the literature, <ref> [Sim84, BIM88, GV92, Gro90, Fok93] </ref>, viz. so-called De Simone, GSOS, tyft/tyxt, ntyft/ntyxt and tree rule format, respectively. Main questions studied are the bisimulation and complete trace congruences induced by the type of transition system specifications. <p> The form of a GSOS rule or, as it is called in <ref> [BIM88] </ref>, a Structured Transition Rule is the following x k ! y ij (i 2 I; j 2 J) x k 9 (i 2 I 0 ; k 2 K) a where x i , y ij (1 k `; j 2 J) are all different variables I; I 0 f
Reference: [BK88] <author> J.W. de Bakker and J.N. Kok. </author> <title> Uniform abstraction, atomicity and contractions in the comparative semantics of Concurrent Prolog. </title> <booktitle> In Proc. of the International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pages 347-355. </pages> <institution> Institute for New Generation Computer Technology, </institution> <year> 1988. </year>
Reference-contexts: one of the variables x 1 ; : : : ; x ` or, otherwise, may already have occurred as right-hand side of a premise. (This is a rephrasing of the inductivity requirement in the presentation of the tyft format in [Rut92].) Thus a rule of the form, taken from <ref> [BK88] </ref>, x ! x 1 x 1 ! x 2 : : : x n ! E a where x; x 1 ; : : : ; x n are variables, E is a constant and [] is unary function symbol, is permitted in the tyft format. <p> However, the many-sortedness is natural in the context of continuation- style operational semantics. In fact, main inspiration for the formulation of a transition system specification in stalk format for which bisimulation is a congruence are the studies in comparative semantics dealing with resumptions/continuations. Cf. <ref> [AB88, AR89, Bak91, BK88, BV91a, BV91b, BV92b, BV89, EV93, Rut90b] </ref>. There transition system specifications not fitting in the De Simone, GSOS and tyft formats are used as a basis for an operational semantics to be compared with a denotational one.
Reference: [BKO88] <author> J.A. Bergstra, J.W. Klop, and E.-R. Olderog. </author> <title> Readies and failures in the algebra of communicating processes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17 </volume> <pages> 1134-1177, </pages> <year> 1988. </year>
Reference-contexts: By characterizing trace congruence by a specialized (bi)simulation one 15 can classify (restricting to image finite transition system specifications) the various formats: completed trace congruence for De Simone format corresponds to failure equivalence F <ref> [Sim84, BKO88] </ref>, for GSOS it corresponds to 2 3 -bisimulation equivalence $ 2 3 while for the tyft format it corresponds to 2-nested simulation equivalence t 2 [GV92]. Since F $ 2 t 2 the result then follows.
Reference: [Bou85] <author> G. Boudol. </author> <title> Notes on algebraic calculi of processes. </title> <editor> In K. Apt, editor, </editor> <booktitle> Logics and Models of Concurrent Systems, </booktitle> <pages> pages 261-303. </pages> <publisher> Springer, NATO ASI Series F13, </publisher> <year> 1985. </year>
Reference-contexts: Referring to the collection of steps as a transition system one may call the description itself, the axioms and rules, a transition system specification. Presently, all core example languages for concurrency theory have been given an operational semantics using SOS, e.g., CCS [Mil80], TCSP [OH86], ACP [Gla87] and Meije <ref> [Bou85] </ref> and many more variants and extensions. However, the general theory of transition system specifications has, compared to the bulk of the applications, attracted little attention.
Reference: [BV89] <author> A. de Bruin and E.P. de Vink. </author> <title> Continuation semantics for Prolog with cut (ex-tended abstract). </title> <editor> In J. Daz and F. Orejas, editors, </editor> <booktitle> Proc. Theory and Practice of Software Development '89, </booktitle> <volume> volume 1, </volume> <pages> pages 178-192. </pages> <note> LNCS 351, </note> <year> 1989. </year>
Reference-contexts: In the present paper we propose yet another format for transition system specifications which is suitably expressive to describe continuation style transition systems, as has been frequently used in comparative (metric) semantics, <ref> [AB88, AR89, Rut90b, BV91b, BV89, Bak91, EV93, BV92b] </ref>. The transition system specifications of these papers do not fit in the formats mentioned above, but will fit into the format introduced by the present paper, that we will call the stalk format. <p> Example 3.8 The next transition system specification exemplifying the stalk format, is a specification for ( cut ; cut ). The system is used, in the literature, for an operational model for the flow of control of Prolog with cut. See <ref> [Bak91, Vin90, BV89] </ref>. <p> However, the many-sortedness is natural in the context of continuation- style operational semantics. In fact, main inspiration for the formulation of a transition system specification in stalk format for which bisimulation is a congruence are the studies in comparative semantics dealing with resumptions/continuations. Cf. <ref> [AB88, AR89, Bak91, BK88, BV91a, BV91b, BV92b, BV89, EV93, Rut90b] </ref>. There transition system specifications not fitting in the De Simone, GSOS and tyft formats are used as a basis for an operational semantics to be compared with a denotational one.
Reference: [BV91a] <editor> J.W. de Bakker and E.P. de Vink. </editor> <title> CCS for OO and LP. </title> <editor> In S. Abramsky and T.S.E. Maibaum, editors, </editor> <booktitle> Proc. TAPSOFT'91, </booktitle> <volume> volume 2, </volume> <pages> pages 1-28. </pages> <note> LNCS 494, </note> <year> 1991. </year>
Reference-contexts: This language is a prominent example of an (abstract) imperative programming language, for which the use of a many-sorted signature in describing its transitional behavior is pivotal when aiming for a comparison with an equivalent continuation-style deno- tational semantics. We base our treatment on the presentation of <ref> [AB88, BV91a] </ref> and refer to these papers for a more detailed explanation of the various transition schemes. <p> However, the many-sortedness is natural in the context of continuation- style operational semantics. In fact, main inspiration for the formulation of a transition system specification in stalk format for which bisimulation is a congruence are the studies in comparative semantics dealing with resumptions/continuations. Cf. <ref> [AB88, AR89, Bak91, BK88, BV91a, BV91b, BV92b, BV89, EV93, Rut90b] </ref>. There transition system specifications not fitting in the De Simone, GSOS and tyft formats are used as a basis for an operational semantics to be compared with a denotational one.
Reference: [BV91b] <editor> J.W. de Bakker and E.P. de Vink. </editor> <title> Rendez-vous with metric semantics. </title> <editor> In E.H.L. Aarts, J. van Leeuwen, and M. Rem, editors, </editor> <booktitle> Proc. Parallel Architectures and Languages '91, </booktitle> <pages> pages 27-57. </pages> <note> LNCS 506, </note> <year> 1991. </year>
Reference-contexts: In the present paper we propose yet another format for transition system specifications which is suitably expressive to describe continuation style transition systems, as has been frequently used in comparative (metric) semantics, <ref> [AB88, AR89, Rut90b, BV91b, BV89, Bak91, EV93, BV92b] </ref>. The transition system specifications of these papers do not fit in the formats mentioned above, but will fit into the format introduced by the present paper, that we will call the stalk format. <p> However, the many-sortedness is natural in the context of continuation- style operational semantics. In fact, main inspiration for the formulation of a transition system specification in stalk format for which bisimulation is a congruence are the studies in comparative semantics dealing with resumptions/continuations. Cf. <ref> [AB88, AR89, Bak91, BK88, BV91a, BV91b, BV92b, BV89, EV93, Rut90b] </ref>. There transition system specifications not fitting in the De Simone, GSOS and tyft formats are used as a basis for an operational semantics to be compared with a denotational one.
Reference: [BV92a] <author> J.C.M. Baeten and F.W. Vaandrager. </author> <title> An algebra for process creation. </title> <journal> Acta Informatica, </journal> <volume> 29 </volume> <pages> 303-334, </pages> <year> 1992. </year>
Reference-contexts: In particular a characterization of completed trace congruences in terms of a special bisimulation would facilitate the comparison with general GSOS and pure tyft. On the other hand, for particular cases it seems possible, following <ref> [BV92a] </ref> to discard the many sortedness of the format. It therefore may very well be the case that the restrictions of the format (contexts in the shape of smooth stalks) can be relaxed. <p> A first difference, in comparing the stalk format to the three formats given above, concerns the many-sortedness of the former vs. the single-sortedness of the latter three. The many- sortedness is not an essential distinction, since following <ref> [BV92a] </ref>, many-sortedness can be, so to speak, coded into the transition schemes by ensuring the well-sortedness of the x 1 ; : : : ; x ` by adding extra premises x i X ! sort (S i ) and rules x i ! sort (S i ) (1 i k)
Reference: [BV92b] <editor> J.W. de Bakker and E.P. de Vink. </editor> <title> Bisimulation semantics for concurrency with atomicity and action refinement. </title> <type> Technical Report CS-R9210, </type> <institution> CWI, </institution> <year> 1992. </year>
Reference-contexts: In the present paper we propose yet another format for transition system specifications which is suitably expressive to describe continuation style transition systems, as has been frequently used in comparative (metric) semantics, <ref> [AB88, AR89, Rut90b, BV91b, BV89, Bak91, EV93, BV92b] </ref>. The transition system specifications of these papers do not fit in the formats mentioned above, but will fit into the format introduced by the present paper, that we will call the stalk format. <p> However, the many-sortedness is natural in the context of continuation- style operational semantics. In fact, main inspiration for the formulation of a transition system specification in stalk format for which bisimulation is a congruence are the studies in comparative semantics dealing with resumptions/continuations. Cf. <ref> [AB88, AR89, Bak91, BK88, BV91a, BV91b, BV92b, BV89, EV93, Rut90b] </ref>. There transition system specifications not fitting in the De Simone, GSOS and tyft formats are used as a basis for an operational semantics to be compared with a denotational one.
Reference: [EV93] <author> A. Eliens and E.P. de Vink. </author> <title> Asynchronous rendez-vous in Distributed Logic Programming. </title> <editor> In J.W. de Bakker, W.-P. de Roever, and G. Rozenberg, editors, </editor> <booktitle> Semantics: Foundations and Applications, </booktitle> <pages> pages 174-203. </pages> <note> LNCS 666, </note> <year> 1993. </year>
Reference-contexts: In the present paper we propose yet another format for transition system specifications which is suitably expressive to describe continuation style transition systems, as has been frequently used in comparative (metric) semantics, <ref> [AB88, AR89, Rut90b, BV91b, BV89, Bak91, EV93, BV92b] </ref>. The transition system specifications of these papers do not fit in the formats mentioned above, but will fit into the format introduced by the present paper, that we will call the stalk format. <p> However, the many-sortedness is natural in the context of continuation- style operational semantics. In fact, main inspiration for the formulation of a transition system specification in stalk format for which bisimulation is a congruence are the studies in comparative semantics dealing with resumptions/continuations. Cf. <ref> [AB88, AR89, Bak91, BK88, BV91a, BV91b, BV92b, BV89, EV93, Rut90b] </ref>. There transition system specifications not fitting in the De Simone, GSOS and tyft formats are used as a basis for an operational semantics to be compared with a denotational one.
Reference: [Fok93] <author> W.J. Fokkink. </author> <title> The tyft/tyxt format reduces to tree rules. </title> <type> Technical report, </type> <institution> CWI, </institution> <year> 1993. </year> <note> Draft. Extended abstract to appear in proc. TACS'94. </note>
Reference-contexts: Apart from some comparative studies between SOS and differently formalized computational models, e.g., [BD92, BD93], a small number of formats for transition system specifications have been 1 proposed in the literature, <ref> [Sim84, BIM88, GV92, Gro90, Fok93] </ref>, viz. so-called De Simone, GSOS, tyft/tyxt, ntyft/ntyxt and tree rule format, respectively. Main questions studied are the bisimulation and complete trace congruences induced by the type of transition system specifications. <p> Also, such questions as finite vs. infinite expressibility as in an issue in comparing the tree rule and tyft format in <ref> [Fok93] </ref> should be considered. Furthermore, related decidability and termrewriting questions should be explored. A final direction into which to extend the research concerns the derivation of denotational semantics from transition system specifications. In [Rut90a] such a construction is achieved in a setting of metric spaces for the De Simone format.
Reference: [Gla87] <author> R.J. van Glabbeek. </author> <title> Bounded nondeterminism and the approximation induction principle in process algebra. </title> <editor> In F.J. Brandenburg, G. Vidal-Naquet, and M. Wirsing, editors, </editor> <booktitle> Proc. STACS'87, </booktitle> <pages> pages 336-347. </pages> <note> LNCS 247, 1987. 17 </note>
Reference-contexts: Referring to the collection of steps as a transition system one may call the description itself, the axioms and rules, a transition system specification. Presently, all core example languages for concurrency theory have been given an operational semantics using SOS, e.g., CCS [Mil80], TCSP [OH86], ACP <ref> [Gla87] </ref> and Meije [Bou85] and many more variants and extensions. However, the general theory of transition system specifications has, compared to the bulk of the applications, attracted little attention.
Reference: [Gro90] <author> J.F. Groote. </author> <title> Transition system specifications with negative premises. </title> <editor> In J.C.M. Baeten and J.W. Klop, editors, </editor> <booktitle> Proc. CONCUR'90, Theories of Concurrency: Unification and Extension, </booktitle> <pages> pages 332-342. </pages> <note> LNCS 458, </note> <year> 1990. </year>
Reference-contexts: Apart from some comparative studies between SOS and differently formalized computational models, e.g., [BD92, BD93], a small number of formats for transition system specifications have been 1 proposed in the literature, <ref> [Sim84, BIM88, GV92, Gro90, Fok93] </ref>, viz. so-called De Simone, GSOS, tyft/tyxt, ntyft/ntyxt and tree rule format, respectively. Main questions studied are the bisimulation and complete trace congruences induced by the type of transition system specifications. <p> Further research spawning off now involves the incorporation of negative premises along the lines of the ntyft/ntyxt format <ref> [Gro90, BG91] </ref>. One might be optimistic about incorporation of the GSOS format by the stalk-format with negative premises, if such can be achieved.
Reference: [GV92] <author> J.F. Groote and F.W. Vaandrager. </author> <title> Structured operational semantics and bisimulation as a congruence. </title> <journal> Information and Computation, </journal> <volume> 100 </volume> <pages> 202-260, </pages> <year> 1992. </year>
Reference-contexts: Apart from some comparative studies between SOS and differently formalized computational models, e.g., [BD92, BD93], a small number of formats for transition system specifications have been 1 proposed in the literature, <ref> [Sim84, BIM88, GV92, Gro90, Fok93] </ref>, viz. so-called De Simone, GSOS, tyft/tyxt, ntyft/ntyxt and tree rule format, respectively. Main questions studied are the bisimulation and complete trace congruences induced by the type of transition system specifications. <p> It will be illustrated that transition system specifications for such concepts as process creation and backtracking fit neatly within the stalk format. As will be discussed below in Section 5, the stalk format does not precisely generalize the tyft format of <ref> [GV92] </ref> due to the absence of lookahead. A technical condition on variable occurrences, necessitated by the proof of the congruence theorem, prohibits the stalk format of having such a facility. <p> Bisimilarity as a congruence is the subject of Section 4. The notion of contextual bisimilarity is defined and it is shown that this observational equivalence is substitutive. Furthermore, following <ref> [GV92] </ref>, evidence is given that the conditions of the format can not be dropped. <p> Example 2.2 (Basic Process Algebra with ffi and *, <ref> [GV92] </ref> Example 3.4) Let a be a typical element of a set Act of so-called actions. Put Act X = Act [fXg where X is some new symbol. Act X is ranged over by ff. <p> If variables among fl i (i 2 I) are allowed in the B i 's (as is the case under certain non-circularity conditions for the tyft-format of <ref> [GV92] </ref>) we can only conclude (B i ) ['] fl t (B i ). <p> In <ref> [GV92] </ref> various counter examples (Examples 5.11.1 through 5.11.5) are constructed which show that, generally, for the single-sorted tyft-format, bisimulation is no longer a congruence in case any of the conditions (3) through (6) in Definition 3.5 is omitted. <p> We observe that the transition system specification of P (BP A * ffi ), on which the counter examples are based, fits into the stalk format (cf. Example 3.6). Therefore the examples given in <ref> [GV92] </ref> illustrate that also for the present format, the conditions are essential for Theorem 4.8 to hold. <p> As discussed above, we need, for technical reasons, a stronger requirement. At the moment, it is an open question whether or not the more liberal version, equation (4.2), can be used instead. We will not copy the counter examples of <ref> [GV92] </ref> but refer the reader to the particular paper. 5 Comparison and future work In positioning the proposed stalk format, let us first describe, translated to our present setting, the De Simone, GSOS and tyft format. <p> The antecedents x i b ik 9 are so-called negative premises and express the absence of any transition x i b ik ! t ik (for the current instance of x i ). Finally, a tyft rule of <ref> [GV92] </ref> fits into the format t i ! y i (i 2 I) a 14 where the variables x k , y i (1 k `; i 2 I) are all distinct, and following from an addi-tional well-foundedness and freeness condition, var (t) f x k ; y i j 1 <p> This feature, referred to as lookahead, is not allowed by the stalk-format (for otherwise the proof of Theorem 4.8 would not hold). In the transition system specifications of <ref> [GV92] </ref> also rules in the so-called tyxt-format are allowed. Since such rules can be replaced using rules in tyft-format only without changing the induced set of transitions, we do not consider them in the comparison below. <p> Thus, from a syntactic point of view, the stalk format is incomparable to the GSOS and tyft format and subsumes the De Simone format, as can be directly verified from the definitions. In <ref> [GV92] </ref> it is argued that, from the semantic point of view of completed trance congru- ences, the tyft format is more distinctive then GSOS, which, in turn, is more distinctive than the De Simone format. <p> classify (restricting to image finite transition system specifications) the various formats: completed trace congruence for De Simone format corresponds to failure equivalence F [Sim84, BKO88], for GSOS it corresponds to 2 3 -bisimulation equivalence $ 2 3 while for the tyft format it corresponds to 2-nested simulation equivalence t 2 <ref> [GV92] </ref>. Since F $ 2 t 2 the result then follows. In the perspective of such a relationship, future work includes the characterization of completed trace congruence for the stalk format.
Reference: [LS89] <author> K.G. Larsen and A. Skou. </author> <title> Bisimulation through probabilistic testing. </title> <booktitle> In Proc. Principles of Programming Languages, </booktitle> <pages> pages 344-352, </pages> <year> 1989. </year>
Reference: [Mil80] <author> R. Milner. </author> <title> A Calculus of Communicating Systems. </title> <publisher> LNCS 92, </publisher> <year> 1980. </year>
Reference-contexts: Referring to the collection of steps as a transition system one may call the description itself, the axioms and rules, a transition system specification. Presently, all core example languages for concurrency theory have been given an operational semantics using SOS, e.g., CCS <ref> [Mil80] </ref>, TCSP [OH86], ACP [Gla87] and Meije [Bou85] and many more variants and extensions. However, the general theory of transition system specifications has, compared to the bulk of the applications, attracted little attention.
Reference: [Mil90] <author> R. Milner. </author> <title> Operational and algebraic semantics of concurrent processes. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <pages> pages 1201-1242. </pages> <publisher> Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: Property 2.5 Let T and A be sets and ! T fi A fi T. (a) $ = f fl T 2 j `fl' a bisimulation g is a bisimulation relation. (b) $ is an equivalence relation. Proof See <ref> [Mil90] </ref>. 2 3 The stalk format In this section we introduce a special kind of many-sorted signatures, called layered signature, in which the set of sorts is partially ordered. On the basis of the ordering of the sorts, one can distinguish certain one-hole contexts, referred to as smooth stalks.
Reference: [OH86] <author> E.-R. </author> <title> Olderog and C.A.R. Hoare. Specification-oriented semantics for communi-cating processes. </title> <journal> Acta Informatica, </journal> <volume> 23 </volume> <pages> 9-66, </pages> <year> 1986. </year>
Reference-contexts: Referring to the collection of steps as a transition system one may call the description itself, the axioms and rules, a transition system specification. Presently, all core example languages for concurrency theory have been given an operational semantics using SOS, e.g., CCS [Mil80], TCSP <ref> [OH86] </ref>, ACP [Gla87] and Meije [Bou85] and many more variants and extensions. However, the general theory of transition system specifications has, compared to the bulk of the applications, attracted little attention.
Reference: [Plo81] <author> G.D. Plotkin. </author> <title> A structural approach to operational semantics. </title> <type> Technical Report DAIMI FN-19, </type> <institution> Computer Science Department, Aarhus University, </institution> <year> 1981. </year>
Reference-contexts: 1 Introduction In providing an operational semantics for programming language concepts the Structural Operational Semantics (SOS) or Plotkin-style approach <ref> [Plo81] </ref> based on labeled transition systems is likely to be the most widely used technique. The behavior of an abstract machine executing the language under consideration is described using a set of syntax-driven axioms and rules.
Reference: [Rut90a] <author> J.J.M.M. Rutten. </author> <title> Deriving denotational models for bisimulation from Structured Operational Semantics. </title> <editor> In M. Broy and C.B. Jones, editors, </editor> <booktitle> Programming concepts and methods, proc. of the IFIP Working Group 2.2/2.3 Working Conference, </booktitle> <pages> pages 155-177. </pages> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: Furthermore, related decidability and termrewriting questions should be explored. A final direction into which to extend the research concerns the derivation of denotational semantics from transition system specifications. In <ref> [Rut90a] </ref> such a construction is achieved in a setting of metric spaces for the De Simone format. In [Rut92] this is extended, in a setting of non-wellfounded sets, to the (image finite) tyft-format. In both cases, the denotational semantics obtained is of a direct nature.
Reference: [Rut90b] <author> J.J.M.M. Rutten. </author> <title> Semantic correctness for a parallel object-oriented language. </title> <journal> SIAM Journal on Computing, </journal> <volume> 19 </volume> <pages> 341-383, </pages> <year> 1990. </year>
Reference-contexts: In the present paper we propose yet another format for transition system specifications which is suitably expressive to describe continuation style transition systems, as has been frequently used in comparative (metric) semantics, <ref> [AB88, AR89, Rut90b, BV91b, BV89, Bak91, EV93, BV92b] </ref>. The transition system specifications of these papers do not fit in the formats mentioned above, but will fit into the format introduced by the present paper, that we will call the stalk format. <p> However, the many-sortedness is natural in the context of continuation- style operational semantics. In fact, main inspiration for the formulation of a transition system specification in stalk format for which bisimulation is a congruence are the studies in comparative semantics dealing with resumptions/continuations. Cf. <ref> [AB88, AR89, Bak91, BK88, BV91a, BV91b, BV92b, BV89, EV93, Rut90b] </ref>. There transition system specifications not fitting in the De Simone, GSOS and tyft formats are used as a basis for an operational semantics to be compared with a denotational one.
Reference: [Rut92] <author> J.J.M.M. Rutten. </author> <title> Processes as terms: non-well-founded models for bisimulation. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 2 </volume> <pages> 257-275, </pages> <year> 1992. </year>
Reference-contexts: in the left-hand side of the premise is either one of the variables x 1 ; : : : ; x ` or, otherwise, may already have occurred as right-hand side of a premise. (This is a rephrasing of the inductivity requirement in the presentation of the tyft format in <ref> [Rut92] </ref>.) Thus a rule of the form, taken from [BK88], x ! x 1 x 1 ! x 2 : : : x n ! E a where x; x 1 ; : : : ; x n are variables, E is a constant and [] is unary function symbol, is <p> Furthermore, related decidability and termrewriting questions should be explored. A final direction into which to extend the research concerns the derivation of denotational semantics from transition system specifications. In [Rut90a] such a construction is achieved in a setting of metric spaces for the De Simone format. In <ref> [Rut92] </ref> this is extended, in a setting of non-wellfounded sets, to the (image finite) tyft-format. In both cases, the denotational semantics obtained is of a direct nature. The stalk format is inspired by continuation style models.
Reference: [Sim84] <author> R. de Simone. </author> <title> Calculabilite et Expressivite dans l'Algebre de Processus Paralleles MEIJE. </title> <type> PhD thesis, </type> <institution> These de 3eme cycle, Universite de Paris VII, </institution> <year> 1984. </year>
Reference-contexts: Apart from some comparative studies between SOS and differently formalized computational models, e.g., [BD92, BD93], a small number of formats for transition system specifications have been 1 proposed in the literature, <ref> [Sim84, BIM88, GV92, Gro90, Fok93] </ref>, viz. so-called De Simone, GSOS, tyft/tyxt, ntyft/ntyxt and tree rule format, respectively. Main questions studied are the bisimulation and complete trace congruences induced by the type of transition system specifications. <p> See the discussion following Theorem 4.8. Example 3.6 The transition system specification T bpa over the single-sorted signature bpa of Example 2.2 is in stalk format. The only stalk involved is the empty context. (In fact, T bpa is in the so-called De Simone format of <ref> [Sim84] </ref>, which is a special subcase of a transition system specification in stalk format. See Section 5.) 6 Example 3.7 For a more illustrative example we turn to a simple uniform language with process creation. <p> We will not copy the counter examples of [GV92] but refer the reader to the particular paper. 5 Comparison and future work In positioning the proposed stalk format, let us first describe, translated to our present setting, the De Simone, GSOS and tyft format. The De Simone format <ref> [Sim84, Sim85] </ref>, which is historically the first format introduced, allows rules of the form x i f (x 1 ; : : : ; x ` ) ! t where the variables x k , y i (1 k `; i 2 I) are all distinct, I f 1; : : <p> By characterizing trace congruence by a specialized (bi)simulation one 15 can classify (restricting to image finite transition system specifications) the various formats: completed trace congruence for De Simone format corresponds to failure equivalence F <ref> [Sim84, BKO88] </ref>, for GSOS it corresponds to 2 3 -bisimulation equivalence $ 2 3 while for the tyft format it corresponds to 2-nested simulation equivalence t 2 [GV92]. Since F $ 2 t 2 the result then follows.
Reference: [Sim85] <author> R. de Simone. </author> <title> Higher-level synchronising devices in Meije-SCCS. </title> <journal> Theoretical Computer Science, </journal> <volume> 37 </volume> <pages> 245-267, </pages> <year> 1985. </year>
Reference-contexts: We will not copy the counter examples of [GV92] but refer the reader to the particular paper. 5 Comparison and future work In positioning the proposed stalk format, let us first describe, translated to our present setting, the De Simone, GSOS and tyft format. The De Simone format <ref> [Sim84, Sim85] </ref>, which is historically the first format introduced, allows rules of the form x i f (x 1 ; : : : ; x ` ) ! t where the variables x k , y i (1 k `; i 2 I) are all distinct, I f 1; : :
Reference: [SNGM89] <author> G. Smolka, W. Nutt, J. Goguen, and J. Meseguer. </author> <title> Order sorted equational compu-tation. </title> <editor> In H. At-Kaci and M. Nivat, editors, </editor> <title> Resolution of Equations in Algebraic Structures Volume 2: </title> <booktitle> Rewriting Techniques, </booktitle> <pages> pages 297-367. </pages> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: Remark There is no direct relationship between our use of the ordering `' of the sorts for a layered signature (; ) and the use of an ordering for the notion of an order-sorted signature in the sense of <ref> [SNGM89] </ref>.
Reference: [Vin90] <author> E.P. de Vink. </author> <title> Comparative semantics for Prolog with cut. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 13 </volume> <pages> 341-383, </pages> <year> 1990. </year>
Reference-contexts: Example 3.8 The next transition system specification exemplifying the stalk format, is a specification for ( cut ; cut ). The system is used, in the literature, for an operational model for the flow of control of Prolog with cut. See <ref> [Bak91, Vin90, BV89] </ref>.
Reference: [Wec92] <author> W. Wechler. </author> <title> Universal Algebra for Computer Scientists, </title> <booktitle> volume 25 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer, </publisher> <year> 1992. </year> <month> 18 </month>
Reference-contexts: Hence f (u 1 ; : : : ; u k ) [fl] f (v 1 ; : : : ; v k ). (Cf., e.g., <ref> [Wec92] </ref>, Sc. 2.1.2 for a similar type of argument.) In general, the notion of contextual bisimilarity, as given in Definition 4.1, is not always a congruence.
References-found: 33

