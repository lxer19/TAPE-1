URL: ftp://ftp.db.toronto.edu/pub/papers/adb94.col.ps.Z
Refering-URL: http://www.cs.toronto.edu/~mendel/papers.html
Root-URL: 
Title: Visualizing and Querying Distributed Event Traces with Hy  
Author: Mariano P. Consens, Masum Z. Hasan, Alberto O. Mendelzon 
Address: Toronto, 6 King's College Road, Toronto, Ontario, canada, M5S 1A1  
Affiliation: Computer Systems Research Institute, University of  
Abstract: A programmer attempting to understand and debug a dis tributed program deals with large volumes of trace data that describe the program's behaviour. Visualization is widely believed to help in this and similar tasks. We contend that visualization is indeed useful, but only if accompanied of powerful data management facilities to support abstrac tion and filtering. The Hy + visualization system and GraphLog query language provide these facilities. They support not just a fixed way of vi sualizing data, but visualizations that can be specified and manipulated through declarative queries, like data are manipulated in a database. In this paper we show how the Hy + /GraphLog system can be used by dis tributed program debuggers to meet their information manipulation and visualization goals. The Hy + /GraphLog system can be used for observing behaviour of distributed and parallel applications by specifying normal or abnormal patterns that the programmer is looking for as declarative GraphLog queries and manipulating the resulting visualizations to understand the behaviour of the program.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Peter Bates. </author> <title> Debugging heterogeneous distributed systems using event-based mod els of behavior. </title> <booktitle> Proceedings of the ACM SIGPLAN/SIGOPS Workshop on Paral lel and Distributed Debugging, published in ACM SIGPLAN Notices, </booktitle> <volume> 24(1) </volume> <pages> 11-22, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: An examination of the survey [12] reveals that most distributed program analysis systems do not provide all the facilities provided by the Hy + system in one single system. Hy + combines to a certain extent the methods proposed in [15], [18], and <ref> [1] </ref>. The system described in [15] uses the query language TQuel [16]. [18] does not provide a querying capability, and the abstraction, filtering and visualization capabilities are also limited. The EBBA system [1] provides higher-level event abstraction mechanism, but ignores precedence information and lacks visualiza tion capability provided by Hy + <p> Hy + combines to a certain extent the methods proposed in [15], [18], and <ref> [1] </ref>. The system described in [15] uses the query language TQuel [16]. [18] does not provide a querying capability, and the abstraction, filtering and visualization capabilities are also limited. The EBBA system [1] provides higher-level event abstraction mechanism, but ignores precedence information and lacks visualiza tion capability provided by Hy + .
Reference: 2. <author> Mariano Consens and Masum Hasan. </author> <title> Supporting network management through declaratively specified data visualizations. </title> <editor> In H.G. Hegering and Y. Yemini, edi tors, </editor> <booktitle> Proceedings of the IEEE/IFIP Third International Symposium on Integrated Network Management, III, </booktitle> <pages> pages 725-738. </pages> <publisher> Elsevier North Holland, </publisher> <month> April </month> <year> 1993. </year>
Reference-contexts: The Hy + /GraphLog system developed at the University of Toronto is a general purpose environment for visualizing structural data that has been applied to areas such as software engineering [6], hypertext [3] and network management <ref> [2] </ref>. GraphLog [4] is the visual query language for the Hy + system. Debugging can be viewed as the detection and diagnosis of unexpected be haviour by examining actual behaviour at different levels of abstraction.
Reference: 3. <author> Mariano Consens and Alberto Mendelzon. </author> <title> Expressing structural hypertext queries in GraphLog. </title> <booktitle> In Proceedings of the Second ACM Hypertext Conference, </booktitle> <pages> pages 269 292, </pages> <year> 1989. </year>
Reference-contexts: The Hy + /GraphLog system developed at the University of Toronto is a general purpose environment for visualizing structural data that has been applied to areas such as software engineering [6], hypertext <ref> [3] </ref> and network management [2]. GraphLog [4] is the visual query language for the Hy + system. Debugging can be viewed as the detection and diagnosis of unexpected be haviour by examining actual behaviour at different levels of abstraction.
Reference: 4. <author> Mariano Consens and Alberto Mendelzon. </author> <title> GraphLog: a visual formalism for real life recursion. </title> <booktitle> In Proceedings of the Ninth ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 404-416, </pages> <year> 1990. </year>
Reference-contexts: The Hy + /GraphLog system developed at the University of Toronto is a general purpose environment for visualizing structural data that has been applied to areas such as software engineering [6], hypertext [3] and network management [2]. GraphLog <ref> [4] </ref> is the visual query language for the Hy + system. Debugging can be viewed as the detection and diagnosis of unexpected be haviour by examining actual behaviour at different levels of abstraction. <p> The visual queries supported by the Hy + system are expressions of the GraphLog query language <ref> [4] </ref>. GraphLog queries are graph patterns whose nodes are labeled by sequences of variables and constants and whose edges are labeled by path regular expressions on relations.
Reference: 5. <author> Mariano Consens and Alberto Mendelzon. </author> <title> Low complexity aggregation in GraphLog and Datalog. </title> <booktitle> In Proceedings of the Third International Conference on Database Theory, Lecture Notes in Computer Science Nr. </booktitle> <volume> 470, </volume> <pages> pages 379-394. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <note> A revised version has been accepted for publication in TCS. </note>
Reference: 6. <author> Mariano Consens, Alberto Mendelzon, and Arthur Ryman. </author> <title> Visualizing and query ing software structures. </title> <booktitle> In 14th. Intl. Conference on Software Engineering, </booktitle> <pages> pages 138-156, </pages> <year> 1992. </year>
Reference-contexts: The Hy + /GraphLog system developed at the University of Toronto is a general purpose environment for visualizing structural data that has been applied to areas such as software engineering <ref> [6] </ref>, hypertext [3] and network management [2]. GraphLog [4] is the visual query language for the Hy + system. Debugging can be viewed as the detection and diagnosis of unexpected be haviour by examining actual behaviour at different levels of abstraction.
Reference: 7. <author> Mariano P. Consens. </author> <title> Creating and Filtering Structural Data Visualizations using Hygraph Patterns. </title> <type> Fothcoming PhD Thesis, </type> <institution> University of Toronto, </institution> <year> 1993. </year>
Reference-contexts: The visualizations manipulated by the system are labeled graphs and hygraphs <ref> [7] </ref>.
Reference: 8. <author> Milan Fukar. </author> <title> Translating GraphLog into Prolog. </title> <type> Technical report, </type> <institution> Center for Advanced Studies IBM Canada Limited, </institution> <month> October </month> <year> 1991. </year>
Reference-contexts: The Hy + visual query system is implemented as a front-end that can com municate with multiple back-ends for the actual evaluation of the queries. The front-end, written in Smalltalk, includes the user interface of the system. We have experimented with several different back-end query processors: Prolog <ref> [8] </ref>, the LDL deductive database system from MCC [13], and CORAL [14], the deduc tive database system from Wisconsin. The current implementation uses CORAL. The architecture of the Hy + system is shown in Figure 2.
Reference: 9. <author> David Harel. </author> <title> On visual formalisms. </title> <journal> Communications of the ACM, </journal> <volume> 31(5) </volume> <pages> 514-530, </pages> <year> 1988. </year>
Reference-contexts: The function symbol in the term (process in this case) is used to select the icon that represents the node. The (a) Tuples (b) Hygraphs Fig. 1. Visualizing tuples and hygraphs. data model we use is more general than graphs. Hygraphs, are a hybrid between Harel's higraphs <ref> [9] </ref> and directed hypergraphs. A hygraph extends the notion of a graph by incorporating blobs in addition to edges.
Reference: 10. <author> Masum Z. Hasan. </author> <title> A visual and temporal framework for behavior observation of active databases. </title> <type> PhD Thesis Proposal, </type> <institution> Department of Computer Science, Uni versity of Waterloo, Waterloo, </institution> <address> Ontario, Canada, </address> <year> 1994. </year>
Reference-contexts: GraphLog augmented with temporal operators will be able to express important temporal properties of concurrent programs. Work is in progress to define a temporal event and interval specification language (TEISL) incorporating operators similar to interval operators in [16] and a visual equivalent of the proposed operators <ref> [10] </ref>. TEISL will be incorporated seamlessly into GraphLog. The proposed extension will be a vehicle for visual specification of temporal events in an active database and temporal queries in a temporal database. Work is in progress to add active database features as required by the dynamic analysis. <p> Work is in progress to add active database features as required by the dynamic analysis. The resulting tool will also be useful for behavior observation of active databases <ref> [10] </ref>.
Reference: 11. <author> W. Korfhage. </author> <title> The panorama monitoring system. </title> <type> Technical report, </type> <institution> Polytechnic University, Brooklyn, </institution> <year> 1992. </year>
Reference-contexts: In our experiments, we used traces produced by the IPC event collection modules of the Panorama <ref> [11] </ref> monitor. The steps of debugging with Hy + are the following. Treat the traces of primitive communication, process creation, and termina tion events as tuples in the database. Create the causality graph through the use of simple GraphLog queries.
Reference: 12. <author> Charles E. McDowell and David P. Helmbold. </author> <title> Debugging concurrent programs. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(4) </volume> <pages> 593-622, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: The current implementation uses CORAL. The architecture of the Hy + system is shown in Figure 2. An examination of the survey <ref> [12] </ref> reveals that most distributed program analysis systems do not provide all the facilities provided by the Hy + system in one single system. Hy + combines to a certain extent the methods proposed in [15], [18], and [1].
Reference: 13. <author> Shamim Naqvi and Tsur Shalom. </author> <title> A logical language for data and knowledge bases. </title> <publisher> Computer Science Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: The front-end, written in Smalltalk, includes the user interface of the system. We have experimented with several different back-end query processors: Prolog [8], the LDL deductive database system from MCC <ref> [13] </ref>, and CORAL [14], the deduc tive database system from Wisconsin. The current implementation uses CORAL. The architecture of the Hy + system is shown in Figure 2.
Reference: 14. <author> R. Ramakrishnan, D. Srivastava, and S. Sudarshan. </author> <title> CORAL: Control, Relations and Logic. </title> <booktitle> In Proceedings of International Conference on Very Large Databases, </booktitle> <year> 1992. </year>
Reference-contexts: The front-end, written in Smalltalk, includes the user interface of the system. We have experimented with several different back-end query processors: Prolog [8], the LDL deductive database system from MCC [13], and CORAL <ref> [14] </ref>, the deduc tive database system from Wisconsin. The current implementation uses CORAL. The architecture of the Hy + system is shown in Figure 2.
Reference: 15. <author> Richard Snodgrass. </author> <title> A relational approach to monitoring complex systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(2) </volume> <pages> 157-196, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: An examination of the survey [12] reveals that most distributed program analysis systems do not provide all the facilities provided by the Hy + system in one single system. Hy + combines to a certain extent the methods proposed in <ref> [15] </ref>, [18], and [1]. The system described in [15] uses the query language TQuel [16]. [18] does not provide a querying capability, and the abstraction, filtering and visualization capabilities are also limited. <p> An examination of the survey [12] reveals that most distributed program analysis systems do not provide all the facilities provided by the Hy + system in one single system. Hy + combines to a certain extent the methods proposed in <ref> [15] </ref>, [18], and [1]. The system described in [15] uses the query language TQuel [16]. [18] does not provide a querying capability, and the abstraction, filtering and visualization capabilities are also limited. The EBBA system [1] provides higher-level event abstraction mechanism, but ignores precedence information and lacks visualiza tion capability provided by Hy + .
Reference: 16. <author> R.T. Snodgrass. </author> <title> The temporal query language TQuel. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(2) </volume> <pages> 247-298, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: Hy + combines to a certain extent the methods proposed in [15], [18], and [1]. The system described in [15] uses the query language TQuel <ref> [16] </ref>. [18] does not provide a querying capability, and the abstraction, filtering and visualization capabilities are also limited. The EBBA system [1] provides higher-level event abstraction mechanism, but ignores precedence information and lacks visualiza tion capability provided by Hy + . <p> GraphLog augmented with temporal operators will be able to express important temporal properties of concurrent programs. Work is in progress to define a temporal event and interval specification language (TEISL) incorporating operators similar to interval operators in <ref> [16] </ref> and a visual equivalent of the proposed operators [10]. TEISL will be incorporated seamlessly into GraphLog. The proposed extension will be a vehicle for visual specification of temporal events in an active database and temporal queries in a temporal database.
Reference: 17. <author> R.E. Strom, D.F. Bacon, A.P. Goldberg, A. Lowry, D.M. Yellin, and S.A. Yem ini. </author> <title> HERMES: A Language for Distributed Computing. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1991. </year>
Reference-contexts: In dynamic analysis, each time the database is updated, the specified queries are evaluated. Details are discussed in Section 6. 4.1 Description of Traces In this subsection we describe the trace formats we obtained from running Her mes <ref> [17] </ref> programs. Hermes is an experimental programming language for dis tributed computing developed at IBM Research. We shall use Hermes terminol ogy for describing communication events, but the ideas are applicable in general, and the system is independent of any particular trace format.
Reference: 18. <author> Dror Zernik and Larry Rudolph. </author> <title> Animating work and time for debugging par allel programs foundation and experience. Proceedings of the ACM/ONR Work shop on Parallel and Distributed Debugging, </title> <journal> published in ACM SIGPLAN Notices, </journal> <volume> 26(12) </volume> <pages> 46-56, </pages> <month> December </month> <year> 1991. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: GraphLog [4] is the visual query language for the Hy + system. Debugging can be viewed as the detection and diagnosis of unexpected be haviour by examining actual behaviour at different levels of abstraction. The trace data can be viewed as a causality graph, as in <ref> [18] </ref>, capturing information about interprocess communication events and their precedence. But a simplistic display of the causality graph to the user is impractical; there is too much infor mation in it at too low a level. <p> An examination of the survey [12] reveals that most distributed program analysis systems do not provide all the facilities provided by the Hy + system in one single system. Hy + combines to a certain extent the methods proposed in [15], <ref> [18] </ref>, and [1]. The system described in [15] uses the query language TQuel [16]. [18] does not provide a querying capability, and the abstraction, filtering and visualization capabilities are also limited. <p> Hy + combines to a certain extent the methods proposed in [15], <ref> [18] </ref>, and [1]. The system described in [15] uses the query language TQuel [16]. [18] does not provide a querying capability, and the abstraction, filtering and visualization capabilities are also limited. The EBBA system [1] provides higher-level event abstraction mechanism, but ignores precedence information and lacks visualiza tion capability provided by Hy + .
References-found: 18

