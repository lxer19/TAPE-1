URL: ftp://ftp.cs.huji.ac.il/users/transis/icalp.ps.gz
Refering-URL: http://www.cs.huji.ac.il/labs/transis/abstracts94.html
Root-URL: http://www.cs.huji.ac.il
Title: On Distributed Algorithms in a Broadcast Domain  
Author: Danny Dolev Dalia Malki 
Address: Jerusalem, Israel  
Affiliation: The Hebrew University of  
Abstract: This paper studies the usage of broadcast communication in distributed services. The approach taken is practical: all the algorithms are asynchronous, and tolerate realistic faults. We study four problems in a broadcast domain: clock synchronization, reliable and ordered broadcast, membership, and file replication. The clock synchronization algorithm shows for the first time how to utilize broadcast communication for synchronization. The master synchronizes any number of slaves while incurring a constant load. The approach taken in the file replication tool uses snooping in order to enhance the availability of file systems, at al most no cost.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Membership Algorithms for Mul-ticast Communication Groups. </title> <booktitle> In Intl. Workshop on Distributed Algorithms proceedings (WDAG-6), (LCNS, 647), number 6th, </booktitle> <pages> pages 292-312, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: The membership problem is to maintain the set of participating machines in agreement among all the machines. This basic problem of distributed computing has received considerable attention in the past (see <ref> [9, 1, 19, 20, 23, 24, 16, 3, 4] </ref>). We are mainly interested in membership protocols for broadcast communication environments. In these environments, the membership changes are reported via special messages, that are delivered to the upper level application among the stream of regular messages. <p> Joining with other machine (s) is triggered when a message from a machine that does not belong to the current membership view is intercepted in the broadcast domain. Fault handling is triggered by timeout. (A closely related membership protocol that satisfies the above requisites is presented in <ref> [1] </ref>). Whenever the membership protocol starts, each machine sends a message with the best suggestion it has for the current membership. Each membership suggestion contains two sets: all the known machines, called M , and all the suspected faulty/detached machines, called F .
Reference: 2. <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A Communication SubSystem for High Availability. </title> <booktitle> In Annual International Symposium on Fault-Tolerant Computing, </booktitle> <volume> number 22, </volume> <pages> pages 76-84, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The problem is that current transport protocols provide only datagram broadcast services (e.g. UDP [22], IP-multicast [10]). Today, there are several projects that develop protocols for reliable broadcast services while utilizing the broadcast hardware where possible, e.g. <ref> [18, 17, 3, 2] </ref> and the recent version of the ISIS system [7]. We discuss some of them in this section.
Reference: 3. <author> Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, and P. Ciarfella. </author> <title> Fast Message Ordering and Membership Using a Logical Token-Passing Ring. </title> <booktitle> In Intl. conf. on Distributed Computing Systems, </booktitle> <year> 1993. </year> <note> to appear. </note>
Reference-contexts: The problem is that current transport protocols provide only datagram broadcast services (e.g. UDP [22], IP-multicast [10]). Today, there are several projects that develop protocols for reliable broadcast services while utilizing the broadcast hardware where possible, e.g. <ref> [18, 17, 3, 2] </ref> and the recent version of the ISIS system [7]. We discuss some of them in this section. <p> The membership problem is to maintain the set of participating machines in agreement among all the machines. This basic problem of distributed computing has received considerable attention in the past (see <ref> [9, 1, 19, 20, 23, 24, 16, 3, 4] </ref>). We are mainly interested in membership protocols for broadcast communication environments. In these environments, the membership changes are reported via special messages, that are delivered to the upper level application among the stream of regular messages.
Reference: 4. <author> J. Auerbach, M. Gopal, M. Kaplan, and S. Kutten. </author> <title> Multicast group membership management in high speed wide area networks. </title> <booktitle> In proc. intl. conference on Distributed Computing Systems, </booktitle> <volume> number 11, </volume> <pages> pages 231-238, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: The membership problem is to maintain the set of participating machines in agreement among all the machines. This basic problem of distributed computing has received considerable attention in the past (see <ref> [9, 1, 19, 20, 23, 24, 16, 3, 4] </ref>). We are mainly interested in membership protocols for broadcast communication environments. In these environments, the membership changes are reported via special messages, that are delivered to the upper level application among the stream of regular messages.
Reference: 5. <author> K. Birman, R. Cooper, and B. Gleeson. </author> <title> Programming with Process Groups: Group and Multicast Semantics. </title> <type> TR 91-1185, </type> <institution> dept. of Computer Science, Cornell University, </institution> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Furthermore, in order for all the machines to respond in the same manner to broadcast messages, they should see the same messages between every pair of membership changes. This valuable principle is defined in <ref> [5] </ref>, and is called virtual synchrony. Informally, we require that membership changes maintain: Membership changes occur in the same order at all the machines that view them. Every failed or disconnected machine is removed from its membership within a finite time.
Reference: 6. <author> K. Birman, R. Cooper, T. A. Joseph, K. Marzullo, M. Makpangou, K. Kane, F. Schmuck, and M. Wood. </author> <title> The ISIS System Manual. </title> <institution> Dept of Computer Science, Cornell University, </institution> <month> Sep 90. </month>
Reference: 7. <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight Causal and Atomic Group Multicast. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <year> 1991. </year>
Reference-contexts: The problem is that current transport protocols provide only datagram broadcast services (e.g. UDP [22], IP-multicast [10]). Today, there are several projects that develop protocols for reliable broadcast services while utilizing the broadcast hardware where possible, e.g. [18, 17, 3, 2] and the recent version of the ISIS system <ref> [7] </ref>. We discuss some of them in this section.
Reference: 8. <author> D. R. Cheriton and W. Zwaenepoel. </author> <title> Distributed Process Groups in the V Kernel. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 2(3) </volume> <pages> 77-107, </pages> <month> May </month> <year> 1985. </year>
Reference: 9. <author> F. Cristian. </author> <title> Reaching Agreement on Processor Group Membership in Synchronous Distributed Systems. </title> <journal> Distributed Computing, </journal> <volume> 4(4), </volume> <month> April </month> <year> 1991. </year>
Reference-contexts: The membership problem is to maintain the set of participating machines in agreement among all the machines. This basic problem of distributed computing has received considerable attention in the past (see <ref> [9, 1, 19, 20, 23, 24, 16, 3, 4] </ref>). We are mainly interested in membership protocols for broadcast communication environments. In these environments, the membership changes are reported via special messages, that are delivered to the upper level application among the stream of regular messages.
Reference: 10. <author> S. E. Deering. </author> <title> Host extensions for IP multicasting. </title> <type> RFC 1112, </type> <institution> SRI Network Information Center, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: This approach is costly when there are several participants. It would be preferable to use the available broadcast hardware where possible, for efficient dissemination of mes-sages to multiple destinations via a single transmission. The problem is that current transport protocols provide only datagram broadcast services (e.g. UDP [22], IP-multicast <ref> [10] </ref>). Today, there are several projects that develop protocols for reliable broadcast services while utilizing the broadcast hardware where possible, e.g. [18, 17, 3, 2] and the recent version of the ISIS system [7]. We discuss some of them in this section.
Reference: 11. <author> D. Dolev, C. Dwork, and L. Stockmeyer. </author> <title> On the minimal synchrony needed for distributed consensus. </title> <journal> J. ACM, </journal> <volume> 34(1) </volume> <pages> 77-97, </pages> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: Fischer Lynch and Paterson ([14]) were the first to point out that there is no way to reach consensus in an asynchronous distributed system, when faults may occur. Moreover the asynchrony that produces the difficulty can be very limited, as can be seen in <ref> [11] </ref>. The basic idea behind all these impossibility results is that there is no way to distinguish between a very slow machine and a failed one.
Reference: 12. <author> D. Dolev, S. Kramer, and D. Malki. </author> <title> Early Delivery Totally Ordered Broadcast in Asynchronous Environments. </title> <booktitle> In Annual International Symposium on Fault-Tolerant Computing, </booktitle> <volume> number 23, </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: On the other hand, these methods can sustain steady transmission loads that are close to the network limits, when all the machines are fairly uniformly active (e.g. the ToTo protocol was measured delivering around 500 1K messages per second over an Ethernet of 10 Indigo stations, see <ref> [12] </ref>). A different family of protocols orders the messages in a total order by employing a centrally controlled ordering scheme ([7, 3, 17]). The Isis ABCAST protocol ([7]) employs a token-holder within each group of communicating processes.
Reference: 13. <author> D. Dolev, R.Reischuk, and H.R.Strong. </author> <title> Clock Synchronization Algorithms on a LAN. </title> <note> in preparation, </note> <year> 1993. </year>
Reference-contexts: The master waits for an echo on its previous message before time-stamping and sending the next one. In a sense, the master and this machine follow the basic idea of a master-slave protocol. The rest of the receivers synchronize their clocks just by listening in. In the <ref> [13] </ref> the reader can find the complete study of this approach and various optimizations to the problem. 4 Reliable Broadcast The topic of consistent dissemination of information in distributed systems has been the focus of many studies, both theoretical and practical.
Reference: 14. <author> M. Fischer, N. Lynch, and M. Paterson. </author> <title> Impossibility of Distributed Consensus with One Faulty Process. </title> <journal> J. ACM, </journal> <volume> 32 </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: Another category of distributed algorithms that are examined in the broadcast domain are algorithms that need to achieve coordinated decisions. The impossibility result of <ref> [14] </ref> bounds all these problems within an asynchronous environment. The problem is the inability to distinguish between a slow machine and one that crashed. In practical asynchronous systems it is often preferable to give-up on a slow machine, rather than get stuck in waiting.
Reference: 15. <author> Y. Harari. </author> <title> Warm Backup Tool for Unix Network File System. </title> <type> internal manuscript, </type> <year> 1992. </year>
Reference: 16. <author> F. Jahanian and W. Moran. </author> <title> Strong, Weak and Hybrid Group Membership. unpublished, IBM internal draft, </title> <year> 1992. </year>
Reference-contexts: The membership problem is to maintain the set of participating machines in agreement among all the machines. This basic problem of distributed computing has received considerable attention in the past (see <ref> [9, 1, 19, 20, 23, 24, 16, 3, 4] </ref>). We are mainly interested in membership protocols for broadcast communication environments. In these environments, the membership changes are reported via special messages, that are delivered to the upper level application among the stream of regular messages.
Reference: 17. <author> M. F. Kaashoek, A. S. Tanenbaum, S. F. Hummel, and H. E. Bal. </author> <title> An Efficient Reliable Broadcast Protocol. </title> <journal> Operating Systems Review, </journal> <volume> 23(4) </volume> <pages> 5-19, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: The problem is that current transport protocols provide only datagram broadcast services (e.g. UDP [22], IP-multicast [10]). Today, there are several projects that develop protocols for reliable broadcast services while utilizing the broadcast hardware where possible, e.g. <ref> [18, 17, 3, 2] </ref> and the recent version of the ISIS system [7]. We discuss some of them in this section.
Reference: 18. <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast Protocols for Distributed Systems. </title> <journal> IEEE Trans. Parallel & Distributed Syst., </journal> <volume> (1), </volume> <month> Jan </month> <year> 1990. </year>
Reference-contexts: The problem is that current transport protocols provide only datagram broadcast services (e.g. UDP [22], IP-multicast [10]). Today, there are several projects that develop protocols for reliable broadcast services while utilizing the broadcast hardware where possible, e.g. <ref> [18, 17, 3, 2] </ref> and the recent version of the ISIS system [7]. We discuss some of them in this section.
Reference: 19. <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Membership Algorithms for Asynchronous Distributed Systems. </title> <booktitle> In Intl. Conf. Distributed Computing Systems, </booktitle> <month> May 91. </month>
Reference-contexts: The membership problem is to maintain the set of participating machines in agreement among all the machines. This basic problem of distributed computing has received considerable attention in the past (see <ref> [9, 1, 19, 20, 23, 24, 16, 3, 4] </ref>). We are mainly interested in membership protocols for broadcast communication environments. In these environments, the membership changes are reported via special messages, that are delivered to the upper level application among the stream of regular messages.
Reference: 20. <author> S. Mishra, L. L. Peterson, and R. D. Schlichting. </author> <title> A Membership Protocol based on Partial Order. </title> <booktitle> In proc. of the intl. working conf. on Dependable Computing for Critical Applications, </booktitle> <month> Feb </month> <year> 1991. </year>
Reference-contexts: The membership problem is to maintain the set of participating machines in agreement among all the machines. This basic problem of distributed computing has received considerable attention in the past (see <ref> [9, 1, 19, 20, 23, 24, 16, 3, 4] </ref>). We are mainly interested in membership protocols for broadcast communication environments. In these environments, the membership changes are reported via special messages, that are delivered to the upper level application among the stream of regular messages.
Reference: 21. <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and Using Context Information in Interprocess Communication. </title> <journal> ACM Trans. Comput. Syst., </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August 89. </month>
Reference: 22. <author> J. B. Postel. </author> <title> User Datagram Protocol. </title> <type> RFC 768, </type> <institution> SRI Network Information Center, </institution> <month> August </month> <year> 1980. </year>
Reference-contexts: This approach is costly when there are several participants. It would be preferable to use the available broadcast hardware where possible, for efficient dissemination of mes-sages to multiple destinations via a single transmission. The problem is that current transport protocols provide only datagram broadcast services (e.g. UDP <ref> [22] </ref>, IP-multicast [10]). Today, there are several projects that develop protocols for reliable broadcast services while utilizing the broadcast hardware where possible, e.g. [18, 17, 3, 2] and the recent version of the ISIS system [7]. We discuss some of them in this section.
Reference: 23. <author> A. M. Ricciardi and K. P. Birman. </author> <title> Using Process Groups to Implement Failure Detection in Asynchronous Environments. </title> <booktitle> In proc. annual ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 341-352, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: The membership problem is to maintain the set of participating machines in agreement among all the machines. This basic problem of distributed computing has received considerable attention in the past (see <ref> [9, 1, 19, 20, 23, 24, 16, 3, 4] </ref>). We are mainly interested in membership protocols for broadcast communication environments. In these environments, the membership changes are reported via special messages, that are delivered to the upper level application among the stream of regular messages.
Reference: 24. <author> A. M. Ricciardi, K. P. Birman, and P. Stephenson. </author> <title> The Cost of Order in Asynchronous Systems. </title> <booktitle> In Intl. Workshop on Distributed Algorithms proceedings (WDAG-6), (LCNS, 647), number 6th, </booktitle> <pages> pages 329-345, </pages> <month> November </month> <year> 1992. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: The membership problem is to maintain the set of participating machines in agreement among all the machines. This basic problem of distributed computing has received considerable attention in the past (see <ref> [9, 1, 19, 20, 23, 24, 16, 3, 4] </ref>). We are mainly interested in membership protocols for broadcast communication environments. In these environments, the membership changes are reported via special messages, that are delivered to the upper level application among the stream of regular messages.
References-found: 24

