URL: http://www.cs.utah.edu/~ganesh/w97-asic/hans-micro-engine.ps
Refering-URL: http://www.cs.utah.edu/~ganesh/w97-asic/
Root-URL: 
Title: Design of an Asynchronous Micro Engine Architecture  
Author: Hans Jacobson 
Affiliation: Department of Computer Science University of Utah  
Abstract: Micro engines has been a widely used approach to achieve rapid prototyping and flexible, reprogrammable designs in the synchronous design community. Little work however, seems to have been done for the same in the area of asynchronous design. This paper presents an approach to an asynchronous micro engine architecture and will address modularity and efficiency considerations related to such an architecture. As an example, an SRT division unit exploiting the inherent average case completion of a basic SRT algorithm has been designed and implemented in VHDL. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> HENNESSY, J. H, PATTERSON, D. A. </author> <title> Computer Architecture A Quantitative Approach. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction Micro engines <ref> [1] </ref> have been widely used to achieve rapid prototyping and flexible, reprogrammable designs in the synchronous design community. Micro engines are often used in situations where late binding to a design specification or communication protocol is of importance. <p> There are many ways of performing branch prediction. The approach used in our micro engine architecture is a simple one. According to empirical data <ref> [1] </ref> the branch probabilities of a general program are 50/50 for forward branches, if-statements, and in the order of 90/10 for backward branches, loop-statements.
Reference: [2] <author> NOWICK, S. M, YUN, K. Y, BEEREL, P. A, DOOPLY, A. E. </author> <title> Speculative Completion for the Design of High-Performance AsynchronousDynamic Adders. </title> <booktitle> Proceedings of the 1997 International Symposium on Advanced Research in Asynchronous Circuits and Systems, IEEE Computer Society, </booktitle> <year> 1997. </year>
Reference-contexts: The desired result is then selected using a mux. To take advantage of the shorter delay of a shift operation compared to that of a substraction or addition, datapath element 5 features abort detect logic in much the same style as presented in <ref> [2] </ref> but in a different context to abort the operation, not detect when it has completed. This delay depends on the evaluation of the signal selecting the value to latch next in register P.
Reference: [3] <author> NOWICK, S. M. </author> <title> Automatic synthesis of burst-mode asynchronous controllers. </title> <type> Tech. rep., Ph.D Thesis, </type> <institution> Computer Systems Laboratory, Stanford University, </institution> <year> 1993. </year>
Reference-contexts: This approach greatly reduces the complexity of the request control logic neccessary, and simplifies timing assumptions and analyses. For implementation of the request generation logic, burstmode <ref> [3, 7] </ref> type of asynchronous state machines are used. A new event on this global request signal then is generated as a response to acknowledges from the individual datapath elements. There are many ways in which to implement the generation of such a signal.
Reference: [4] <author> OBERMANN S. F, FLYNN, M. J. </author> <title> An Analysis of Division Algorithms and Implementations. </title> <type> Technical Report, </type> <institution> CSL-TR-95-675, Stanford University, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: This request generation logic then forms what is called the completion detection unit used to generate new request signals to latch new data from the memory and trigger datapath elements to execute. 3 Example Implementation As an implementation example using the presented micro engine architecture an SRT style division <ref> [4] </ref> datapath was implemented. The reason for selecting the SRT algorithm for implementing division was based on its potential to exploit data input patterns in order to select what operation to perform. <p> While taking advantage of the varying completion delay of these operations is hard to exploit in a synchronous system it may offer an advantage in an asynchronous implementation. SRT is therefore an interesting algorithm from an asynchronous point of view. 3.1 SRT Division The SRT division <ref> [4, 5, 6] </ref> belongs to the family of digit recurrence algorithms. Digit recurrence algorithms form the quotient one digit at a time, in a manner similar to traditional paper and pencil divison.
Reference: [5] <author> SODERQUIST, P., LEESER, M. </author> <title> Area and Performance Tradeoffs in Floating-Point Divide and Square-Root Implementations. </title> <journal> ACM Computing Surveys, </journal> <volume> 28(3), </volume> <month> Sept </month> <year> 1996. </year>
Reference-contexts: While taking advantage of the varying completion delay of these operations is hard to exploit in a synchronous system it may offer an advantage in an asynchronous implementation. SRT is therefore an interesting algorithm from an asynchronous point of view. 3.1 SRT Division The SRT division <ref> [4, 5, 6] </ref> belongs to the family of digit recurrence algorithms. Digit recurrence algorithms form the quotient one digit at a time, in a manner similar to traditional paper and pencil divison.
Reference: [6] <author> WILLIAMS, T. E, HOROWITZ, M. A. </author> <title> A 160nS 54bit CMOS Division Implementation Using Self-Timing and Symmetrically Overlapped SRT Stages. </title> <publisher> IEEE, </publisher> <address> CH3015-5, </address> <year> 1991. </year>
Reference-contexts: While taking advantage of the varying completion delay of these operations is hard to exploit in a synchronous system it may offer an advantage in an asynchronous implementation. SRT is therefore an interesting algorithm from an asynchronous point of view. 3.1 SRT Division The SRT division <ref> [4, 5, 6] </ref> belongs to the family of digit recurrence algorithms. Digit recurrence algorithms form the quotient one digit at a time, in a manner similar to traditional paper and pencil divison.
Reference: [7] <author> YUN, K. Y. </author> <title> Synthesis of asynchronous controllers for heterogeneous systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> Aug. </month> <year> 1994. </year> <month> 7 </month>
Reference-contexts: This approach greatly reduces the complexity of the request control logic neccessary, and simplifies timing assumptions and analyses. For implementation of the request generation logic, burstmode <ref> [3, 7] </ref> type of asynchronous state machines are used. A new event on this global request signal then is generated as a response to acknowledges from the individual datapath elements. There are many ways in which to implement the generation of such a signal.
References-found: 7

