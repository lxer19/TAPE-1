URL: http://eksl-www.cs.umass.edu/papers/ctai94_oates.ps
Refering-URL: http://eksl-www.cs.umass.edu/~oates/home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: oates@cs.umass.edu, cohen@cs.umass.edu  
Title: Evaluation of a Mixed-Initiative Approach to Schedule Maintenance  
Author: Tim Oates and Paul R. Cohen 
Address: Box 34610 Amherst, MA 01003-4610  
Affiliation: Experimental Knowledge Systems Laboratory Computer Science Department, LGRC University of Massachusetts  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Ambros-Ingerson, Jose A. and Steel, Sam. </author> <title> Integrating planning, execution and monitoring. </title> <booktitle> In Proceedings of the Fifth National Conference on Artificial Intelligence, </booktitle> <pages> pages 83-88, </pages> <address> Minneapo-lis, Minnesota, </address> <year> 1988. </year>
Reference-contexts: An unexpected, high priority order may arrive at the job shop or a piece of equipment used to process orders may break down. Existing methods to deal with this problem include real time recovery from plan failures <ref> [1] </ref> [2] [7] and post-hoc plan repair based on failures observed while executing the plan [6]. Failure recovery mechanisms, such as replanning, can be expensive, and it may not be feasible to repair a plan by letting it repeatedly fail.
Reference: [2] <author> Lopez-Mellado, Ernesto and Alami, Rachid. </author> <title> A failure recovery scheme for assembly workcells. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation, </booktitle> <volume> volume 1, </volume> <pages> pages 702-707, </pages> <year> 1990. </year>
Reference-contexts: An unexpected, high priority order may arrive at the job shop or a piece of equipment used to process orders may break down. Existing methods to deal with this problem include real time recovery from plan failures [1] <ref> [2] </ref> [7] and post-hoc plan repair based on failures observed while executing the plan [6]. Failure recovery mechanisms, such as replanning, can be expensive, and it may not be feasible to repair a plan by letting it repeatedly fail.
Reference: [3] <author> Oates, T. and Cohen, P.R. </author> <title> Toward a plan steering agent: experiments with schedule maintenance. </title> <booktitle> To appear in Proceedings of the Second International Conference on AI Planning Systems, </booktitle> <year> 1994. </year> <note> Also Computer Science Department Technical Report 94-02, </note> <institution> University of Massachusetts at Amherst. </institution>
Reference-contexts: Doing so admits the possibility of effecting plan modifications in real time to avoid pathological states. Plan steering is a mixed-initiative approach to real time prediction and avoidance of plan failures <ref> [3] </ref>. A plan steering system comprises a pathology demon that monitors the execution environment to detect and predict pathological states, a plan steering agent that evaluates the demon's predictions and formulates plan modifications to avoid predicted pathologies, and a human user who monitors the environment, the demon, and the agent. <p> In the assisted condition the agent evaluates the state of the network and generates advice for the user. Advice identifies both a port that is thought to be 1 The results described in this section are presented in detail in <ref> [3] </ref>. 2 a potential bottleneck and a piece of cargo bound for that port, and suggests an alternative route. The human evaluates the agent's advice via the graphical interface and may decide to accept or reject the advice.
Reference: [4] <author> Oates, T. and Cohen, Paul R. </author> <title> Mixed-Initiative Schedule Maintenance: a First Step Toward Plan Steering. </title> <booktitle> To appear in Proceedings of the ARPA/Rome Lab Planning Initiative Workshop, </booktitle> <address> Tucson, AZ, </address> <month> Feb. </month> <year> 1994. </year> <note> Also Computer Science Department Technical Report 94-31, </note> <institution> University of Massachusetts at Amherst. </institution>
Reference-contexts: Tracking hundreds of events over time and understanding primary and secondary effects of schedule modifications is not something that people do well. Therefore, we ran a series of experiments in which humans were asked to perform the same task at which the agent was previously evaluated <ref> [4] </ref>. We provided a set of graphical displays that gave the human user essentially the same information and rerouting capabilities available to the agent. In one half of the trials the human works alone. In the other half the human has the aid of the schedule steering agent.
Reference: [5] <author> Sadeh, N. </author> <title> Micro-opportunistic scheduling: the Micro-Boss factory scheduler, to appear in Intelligent Scheduling, edited by M. </title> <editor> Zweben and M. Fox, </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Failure recovery mechanisms, such as replanning, can be expensive, and it may not be feasible to repair a plan by letting it repeatedly fail. An alternative strategy is to monitor the execution of the plan, attempting to predict pathological states that make it difficult or impossible to achieve goals <ref> [5] </ref>. Doing so admits the possibility of effecting plan modifications in real time to avoid pathological states. Plan steering is a mixed-initiative approach to real time prediction and avoidance of plan failures [3].
Reference: [6] <author> Simmons, Reid G. </author> <title> A theory of debugging plans and interpretations. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 94-99, </pages> <address> Minneapolis, Minnesota. </address>
Reference-contexts: Existing methods to deal with this problem include real time recovery from plan failures [1] [2] [7] and post-hoc plan repair based on failures observed while executing the plan <ref> [6] </ref>. Failure recovery mechanisms, such as replanning, can be expensive, and it may not be feasible to repair a plan by letting it repeatedly fail.
Reference: [7] <author> Wilkins, David E. </author> <title> Recovering from execution errors in SIPE. </title> <type> Technical Report 346, </type> <institution> Artificial Intelligence Center, Computer Science and Technology Center, SRI International, </institution> <year> 1985. </year> <note> 2 The results described in this section are presented in detail in [4]. 4 </note>
Reference-contexts: An unexpected, high priority order may arrive at the job shop or a piece of equipment used to process orders may break down. Existing methods to deal with this problem include real time recovery from plan failures [1] [2] <ref> [7] </ref> and post-hoc plan repair based on failures observed while executing the plan [6]. Failure recovery mechanisms, such as replanning, can be expensive, and it may not be feasible to repair a plan by letting it repeatedly fail.
References-found: 7

