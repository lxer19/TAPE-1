URL: http://choices.cs.uiuc.edu/uChoices/Papers/uChoices/hotos/hotos2.ps
Refering-URL: http://choices.cs.uiuc.edu/choices/uChoices.html
Root-URL: http://www.cs.uiuc.edu
Email: froy,stang@cs.uiuc.edu  
Title: Choices: An Object-Oriented Multimedia Operating System  
Author: Roy H. Campbell See-Mong Tan 
Address: 1304 W. Springfield Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign Digital Computer Laboratory  
Abstract: This paper describes the design of the Choices object-oriented multimedia operating system. Choices provides an architecture for interconnecting different OS subsystems, with these subsystems realized as separate modules. The modules will be implemented as independent object-oriented frameworks. Frameworks interact through exported abstract interfaces. The sub-classing of components within frameworks enables application and media-specific customization. Choices also provides a unified scheme for memory handling and passing across, as well as between, all OS subsystems. This allows buffer transfers and manipulation within and between operating system modules without copying, while allowing subsystems to specialize their views of memory buffers for efficient handling of problem-specific behavior. Interpreted agents may be embedded in the kernel that can control system level processing of multimedia streams without interference, eliminating excessive system call overhead. Operating system support for authentication, encryption, and delegation is transparently provided via an extensible framework that customizes interfaces to operating system resources. A new networking subsystem based on an Asynchronous Transfer Mode network environment will allow Quality of Service guarantees within the network protocol stack. These features are combined in Choices to give an environment that will support high bandwidth multimedia streams. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Maurice J. Bach. </author> <title> The Design of the UNIX Operating System. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1986. </year>
Reference-contexts: Our idea unifies memory use across the entire operating system by reifying memory buffers (regions of memory). Memory buffers are represented as MemoryObjects, which may be thought of as generalizations of Unix mbufs <ref> [1] </ref>. Thus a physical page frame may be represented as a MemoryObject . Either swapping the page to disk or sending it out over the network requires no copying or format conversions since the virtual memory, disk and network subsystems all operate on the same abstraction.
Reference: [2] <author> B. N. Bershad, C. Chambers, S. Eggers, C. Maeda, D. McNamee, P. Pardyak, and S. Savage amd E. G. Sirer. </author> <title> SPIN: An extensible micro-kernel for application-specific operating system services. </title> <type> Technical Report 94-03-03, </type> <institution> Department of Computer Science, University of Washington, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: In designing the Jetstream [10] LAN, Edwards et al. amortize system call overhead over several operations by batching operations into a script. Recent systems such as SPIN <ref> [2] </ref> allow user applications to insert properly verified application code sequences into the kernel to customize the operating system for application-specific operating system services. Our approach is to embed interpreted agents into the kernel.
Reference: [3] <author> A. Campbell, G. Coulson, F. Garcia, D. Hutchin-son, and H. Leopold. </author> <title> Integrated Quality of Service for Multimedia Communications. </title> <booktitle> In COMM '92, </booktitle> <pages> pages 99-110, </pages> <year> 1992. </year>
Reference-contexts: Video and audio data streams are likely to be pervasive in the network and compute fabric of the future. We designed Choices to support ubiquitous video and au dio streams. Previous work on multimedia support in operating systems <ref> [27, 3, 14, 17] </ref> have concentrated primarily on scheduling algorithms for continuous media. Our work will complement the existing corpus by providing frameworks for organizing the various mechanisms and optimizations.
Reference: [4] <author> Roy Campbell, Nayeem Islam, Peter Madany, and David Raila. </author> <title> Designing and Implementing Choices:an Object-Oriented System in C++. </title> <journal> Communications of the ACM, </journal> <month> September </month> <year> 1993. </year>
Reference-contexts: The operating system is targeted toward uniprocessor as well as small to medium scale multiprocessor (2 to 32 processor) machines. Choices draws many of its design ideas from lessons learned in our work on the original Choices <ref> [5, 4] </ref> operating system, while incorporating several new innovative ideas. This paper presents our design of Choices. A multimedia capable operating system must support a wide range of traffic types. Video and audio data streams are likely to be pervasive in the network and compute fabric of the future.
Reference: [5] <author> Roy H. Campbell and Nayeem Islam. </author> " <title> Choices: A Parallel Object-Oriented Operating System". </title> <editor> In Gul Agha, Peter Wegner, and Aki-nori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The operating system is targeted toward uniprocessor as well as small to medium scale multiprocessor (2 to 32 processor) machines. Choices draws many of its design ideas from lessons learned in our work on the original Choices <ref> [5, 4] </ref> operating system, while incorporating several new innovative ideas. This paper presents our design of Choices. A multimedia capable operating system must support a wide range of traffic types. Video and audio data streams are likely to be pervasive in the network and compute fabric of the future.
Reference: [6] <author> Roy H. Campbell, Nayeem Islam, Ralph Johnson, Panos Kougiouris, and Peter Madany. </author> <title> Choices, Frameworks and Refinement. </title> <editor> In Luis-Felipe Cabrera and Vincent Russo, and Marc Shapiro, editor, </editor> <booktitle> Object-Orientation in Operating Systems, </booktitle> <pages> pages 9-15, </pages> <address> Palo Alto, CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Abstract classes are used to capture the properties of system resources, while subclasses implement the actual details for particular machines or processors. This achieves portability across different platforms. A collection of abstract classes may cooperate to form a framework for a particular OS subsystem <ref> [6] </ref>. We envision Choices to have independent sub-frameworks for each OS subsystem. That is, each OS subsystem is a module realized as a set of abstract classes. Sound software engineering principles may be used to decompose the operating system into interacting modules. Modules may interact only through well-defined interfaces.
Reference: [7] <author> P. Druschel, M. B. Abbot, M. A. Pagels, and L. L. Peterson. </author> <title> Network Subsystem Design. </title> <journal> IEEE Network Magazine, </journal> <month> July </month> <year> 1993. </year>
Reference-contexts: Ideally, memory buffers should not be copied when passed as arguments between different OS subsystems, or to user applications. The memory copying overhead on networking paths from user to networking device and vice versa is well known to impact negatively on network throughput and latency <ref> [7] </ref>. However, different modules of traditional operating systems often have different abstractions for memory buffers. For example, the disk subsystem may operate on buffers of disk blocks, while the networking sub system may operate on network messages or packets.
Reference: [8] <author> P. Druschel and L. Peterson. </author> <title> Experiences with a High-Speed Network Adaptor: A Software Perspective. </title> <booktitle> In SIGCOMM '94, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: Choices is designed with an ATM network environment in mind. ATM provides virtual connections between network nodes. We treat ATM virtual connections as representing end-to-end application communication. Early demultiplexing <ref> [8, 11] </ref> based on ATM virtual path and circuit identifiers can identify data streams once they arrive at the network interface. Message handling for different streams within the network subsystem can then inherit the Quality of Service parameters from the application. Having explicit session objects in the networking subsystem (eg.
Reference: [9] <author> P. Druschel and L. L. Peterson. Fbufs: </author> <title> A high-bandwidth cross domain transfer facility. </title> <booktitle> In Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 189-202, </pages> <month> Dec </month> <year> 1993. </year>
Reference-contexts: We are currently considering the merits of each approach. This idea negates the penalty imposed by changing memory buffer abstractions across modules within the operating system. It is possible for particular subclasses of MemoryObject to allow the fast cross-domain page remapping strategy used in Fbufs <ref> [9] </ref>. Memory buffer allocation needs to be aligned within a protection domain, otherwise page remapping may cause fragments of a memory buffer for another domain be mapped into the virtual memory space of another domain.
Reference: [10] <author> A. Edwards, G. Watson, J. Lumley, D. Banks, C. Calamvokis, and C. Dalton. </author> <title> User-space protocols deliver high performance to applications on a low-cost Gb/s LAN. </title> <type> SIGCOMM '94, </type> <month> August </month> <year> 1994. </year>
Reference-contexts: Spring [15]). With newer RISC machine architectures built around deep instruction pipelines, a user trap into the kernel to access operating system services is becoming more and more expensive to service. In designing the Jetstream <ref> [10] </ref> LAN, Edwards et al. amortize system call overhead over several operations by batching operations into a script. Recent systems such as SPIN [2] allow user applications to insert properly verified application code sequences into the kernel to customize the operating system for application-specific operating system services. <p> Choices includes interpreted agents that can control system level processing of multimedia streams within the kernel. Doing so eliminates the overhead of cross-domain user to kernel system call invocations for operating system services when a scripted agent can do the job. It also provides more flexibility than simple batching <ref> [10] </ref>. The unified memory buffer management scheme for Choices will allow the manipulation and passing of memory buffers between subsystems without copying. This allows low latency data paths between system modules.
Reference: [11] <author> D. C. Feldmeier. </author> <title> Multiplexing issues in communication system design. </title> <booktitle> In SIGCOMM '90, </booktitle> <pages> pages 209-219, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Choices is designed with an ATM network environment in mind. ATM provides virtual connections between network nodes. We treat ATM virtual connections as representing end-to-end application communication. Early demultiplexing <ref> [8, 11] </ref> based on ATM virtual path and circuit identifiers can identify data streams once they arrive at the network interface. Message handling for different streams within the network subsystem can then inherit the Quality of Service parameters from the application. Having explicit session objects in the networking subsystem (eg.
Reference: [12] <author> M. Gasser, A. Goldstein, C. Kaufman, and B. Lampson. </author> <title> The Digital Distributed System Security Architecture. </title> <booktitle> In Proceedings of the 12th National Computer Security Conference, </booktitle> <pages> pages 305-319, </pages> <year> 1989. </year>
Reference-contexts: The access control model of security [20] extended with compound principals <ref> [12] </ref> will be used throughout the system. As with other subsystems of Choices, security is implemented through a customizable framework [26], which provides for authentication and encryption without requiring restructuring of applications.
Reference: [13] <author> Morrie Gasser and Ellen McDermott. </author> <title> An Architecture for Practical Delegation in a Distributed System. </title> <booktitle> In Proceedings of the Symposium on Security and Privacy, </booktitle> <pages> pages 20-30, </pages> <year> 1990. </year>
Reference-contexts: We are also investigating methods of increasing performance of security operations to allow greater integration and use with multimedia data. The use of delegation and authentication methods allow trading of current CPU time for future performance improvement of secure sessions, such as found in <ref> [13] </ref>. 7 Network Subsystem The networking subsystem forms an integral part of a multimedia operating system. However, traditional networking subsystems are strongly IP-centric. The data structures and scheduling policies within traditional OS kernels are tuned toward supporting IP.
Reference: [14] <author> R. Govindan and D. Anderson. </author> <title> Scheduling and IPC Mechanisms for Continuous Media. </title> <booktitle> In ACM, </booktitle> <pages> pages 68-79, </pages> <year> 1991. </year>
Reference-contexts: Video and audio data streams are likely to be pervasive in the network and compute fabric of the future. We designed Choices to support ubiquitous video and au dio streams. Previous work on multimedia support in operating systems <ref> [27, 3, 14, 17] </ref> have concentrated primarily on scheduling algorithms for continuous media. Our work will complement the existing corpus by providing frameworks for organizing the various mechanisms and optimizations.
Reference: [15] <author> G. Hamilton, M. L. Powell, and J. J. Mitchell. Subcontract: </author> <title> A flexible base for distributed programming. </title> <booktitle> Fourteenth Symposium on Operating Systems Principles, </booktitle> <pages> pages 69-79, </pages> <month> Dec </month> <year> 1993. </year>
Reference-contexts: For performance reasons, newer kernels allow the migration of some services back into the kernel, alleviating the need for multiple cross domain inter-process communication calls. What services exist in the kernel and what are outside it is a configuration decision (eg. Spring <ref> [15] </ref>). With newer RISC machine architectures built around deep instruction pipelines, a user trap into the kernel to access operating system services is becoming more and more expensive to service.
Reference: [16] <author> Norman Hutchinson and Larry Peterson. </author> <title> The x-kernel: An archtecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-75, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Message handling for different streams within the network subsystem can then inherit the Quality of Service parameters from the application. Having explicit session objects in the networking subsystem (eg. Peterson and Hutchinson's work with the x-kernel <ref> [16] </ref>) together with early demultiplexing can lead to a network subsystem architecture with all data streams decoupled from one another. This is advantageous for multiprocessor implementation. 8 Conclusion New operating systems are required to handle the pervasive video and audio streams of the near future.
Reference: [17] <author> E. A. Hyden. </author> <title> Operating System Support for Quality of Service. </title> <type> PhD thesis, </type> <institution> Wolfson College, University of Cambridge, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: Video and audio data streams are likely to be pervasive in the network and compute fabric of the future. We designed Choices to support ubiquitous video and au dio streams. Previous work on multimedia support in operating systems <ref> [27, 3, 14, 17] </ref> have concentrated primarily on scheduling algorithms for continuous media. Our work will complement the existing corpus by providing frameworks for organizing the various mechanisms and optimizations. <p> Multimedia data streams have a wide range of characteristics | high bandwidth constant and variable bit rate video, low bandwidth audio or compact disc quality audio. Different traffic types require specialized operating system support in order to maintain quality of service guarantees <ref> [17] </ref>. For example, different scheduling disciplines and resource allocation strategies are required for different traffic classes. We extend our previous ideas on application-specific customization through the use of object-oriented frameworks. Components in the framework may be subclassed in Choices to customize behavior for different classes of multimedia data streams.
Reference: [18] <author> N. Islam. </author> <title> Customized Message Passing and Scheduling for Parallel and Distributed Applications. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1994. </year>
Reference-contexts: We consider inheritance across module boundaries ill-advised, leading to complicated dependencies and interrelationships between classes in different modules. 3 Customization for Multimedia Streams Replacing traditional operating system communication and scheduling mechanisms with customized implementations can improve the performance of applications <ref> [18] </ref>. We used object-oriented frameworks to organize the large range of optimizations possible in the Choices operating system. Multimedia data streams have a wide range of characteristics | high bandwidth constant and variable bit rate video, low bandwidth audio or compact disc quality audio.
Reference: [19] <author> Nayeem Islam, Robert E. McGrath, and Roy Campbell. </author> <title> "Parallel Distributed Application Performance and Message Passing: A case study". In Symposium on Experiences with Distributed and Multiprocessor Systems (SEDMS IV), </title> <address> San Diego, California, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: In previous work, we showed that application-specific customiz-ability can significantly improve the performance of regular scientific applications <ref> [19] </ref>. We extend our work to traffic-specific and media-specific customization. Continuous data streams have a strong impact on memory resource management.
Reference: [20] <author> Butler Lampson. </author> <title> Protection. </title> <journal> ACM Operating Systems Review, </journal> <volume> 8(1) </volume> <pages> 18-24, </pages> <month> January </month> <year> 1974. </year>
Reference-contexts: Our unified scheme can provide a low latency path for passing memory buffers between operating system modules, as well as user space applications. 6 Security and Authentication Choices will provide a secure environment through the use of authentication, encryption, and delegation. The access control model of security <ref> [20] </ref> extended with compound principals [12] will be used throughout the system. As with other subsystems of Choices, security is implemented through a customizable framework [26], which provides for authentication and encryption without requiring restructuring of applications.
Reference: [21] <author> C. Maeda and B. N. Bershad. </author> <title> Networking Perfor--mance for Microkernels. </title> <booktitle> In Thirteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 154-159, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: The communication overhead incurred when invoking server operations in micro-kernel designs is often significantly high <ref> [21] </ref>. For performance reasons, newer kernels allow the migration of some services back into the kernel, alleviating the need for multiple cross domain inter-process communication calls. What services exist in the kernel and what are outside it is a configuration decision (eg. Spring [15]).
Reference: [22] <author> J. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1994. </year>
Reference-contexts: Instead, the agent may control system processing of video frames arriving from network subsystem to display subsystem without interference or crossing protection domains. We envision agents to be implemented in a simple, flexible scripting language similar to Tcl <ref> [22] </ref>. We are experimenting with different ways for efficient execution of interpreted agent scripts. 5 Unified Buffer Management Choices is composed of independent modules interacting through well specified module interfaces.
Reference: [23] <author> Richard Rashid. </author> <title> Threads of a New System. UNIX Review, </title> <year> 1986. </year>
Reference-contexts: for Asynchronous Transfer Mode (ATM) connections, or small numbers of large messages in the case of IP over an Ethernet. 4 Agents Operating system design has moved from monolithic, single kernels such as Unix [24] where all OS services are implemented in the kernel, to micro-kernel designs such as Mach <ref> [23] </ref>, where the majority of OS services are user-space applications. The communication overhead incurred when invoking server operations in micro-kernel designs is often significantly high [21].
Reference: [24] <author> Dennis M. Ritchie and Kenneth Thompson. </author> <title> The UNIX Time-Sharing System. </title> <journal> AT&T Bell Laboratories Technical Journal, </journal> <volume> 57(6):1905, </volume> <year> 1975. </year>
Reference-contexts: Buffer handling for the networking subsystem may be specialized toward large numbers of small cells for Asynchronous Transfer Mode (ATM) connections, or small numbers of large messages in the case of IP over an Ethernet. 4 Agents Operating system design has moved from monolithic, single kernels such as Unix <ref> [24] </ref> where all OS services are implemented in the kernel, to micro-kernel designs such as Mach [23], where the majority of OS services are user-space applications. The communication overhead incurred when invoking server operations in micro-kernel designs is often significantly high [21].
Reference: [25] <author> L. Sha, R. Rajkumar, and J. Lehoczky. </author> <title> Priority Inheritance Protocols: An Approach to Real Time Synchronization. </title> <journal> IEEE Transactions on Computers, </journal> <month> September </month> <year> 1990. </year>
Reference-contexts: Current multiplexed protocol stacks are unsuited for efficient multiprocessing. Message multiplexing at each protocol layer requires locking of shared protocol data structures, leading to undesirable blocking and potential problems with priority inversion <ref> [25] </ref>. Choices is designed with an ATM network environment in mind. ATM provides virtual connections between network nodes. We treat ATM virtual connections as representing end-to-end application communication.
Reference: [26] <author> Theron Tock, Daniel Sturman, and Roy Camp-bell. </author> <title> Security, Delegation, and Extensibility. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, Urbana, Illinois, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: The access control model of security [20] extended with compound principals [12] will be used throughout the system. As with other subsystems of Choices, security is implemented through a customizable framework <ref> [26] </ref>, which provides for authentication and encryption without requiring restructuring of applications. Implementation of the security framework of Choices will take advantage of the MemoryObject class, using subclassed MemoryObjectViews to provide encryption, authentication, and any other security features necessary to the user.
Reference: [27] <author> H. Tokuda, Y. Tobe, S. Chou, and J. Moura. </author> <title> Continuous Media Communication with Dynamic QOS Control Using ARTS with an FDDI Network. </title> <booktitle> In COMM '92, </booktitle> <pages> pages 88-98, </pages> <year> 1992. </year>
Reference-contexts: Video and audio data streams are likely to be pervasive in the network and compute fabric of the future. We designed Choices to support ubiquitous video and au dio streams. Previous work on multimedia support in operating systems <ref> [27, 3, 14, 17] </ref> have concentrated primarily on scheduling algorithms for continuous media. Our work will complement the existing corpus by providing frameworks for organizing the various mechanisms and optimizations.
References-found: 27

