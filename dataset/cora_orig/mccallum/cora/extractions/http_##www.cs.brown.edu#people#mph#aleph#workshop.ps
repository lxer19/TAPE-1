URL: http://www.cs.brown.edu/people/mph/aleph/workshop.ps
Refering-URL: http://www.cs.brown.edu/people/mph/aleph/home.html
Root-URL: http://www.cs.brown.edu/
Email: herlihy@cs.brown.edu  
Title: The Aleph Toolkit: Platform-Independent Distributed Shared Memory (preliminary report)  
Author: Maurice Herlihy 
Note: This work is supported by AFOSR Agreement F30602-96-2-0228, DARPA Order D885.  
Date: October 3, 1997  
Address: Providence RI 02912  
Affiliation: Computer Science Department Brown University  
Abstract: The Aleph Toolkit is a collection of Java packages that implements a simple, platform-independent distributed shared memory. Aleph supports distributed computations that run across networks of heterogeneous workstations. It provides the ability to start threads on remote processors, to share objects among processors (with transparent synchronization and caching), and the ability to to execute simple transactions. This paper describes the design and rationale for the Aleph API, as well as our preliminary experience implementing a distributed shared memory system in Java. A research goal of the Aleph toolkit project is facilitate experimentation with heterogeneous architectures, particularly with respect to communication, synchronization, and coherence. To this end, the internal APIs for these packages are given by Java Interfaces. The toolkit currently provides a simple default implementation of each component, and we expect to have more sophisticated implementations in the future, including native implementations that exploit specialized local hardware. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Ahuja, N. Carriero, and D. Gelernter. </author> <title> Linda and Friends. </title> <journal> IEEE Computer, </journal> <volume> 19(8) </volume> <pages> 26-34, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Early work on language support for DSM includes Linda <ref> [1] </ref> and Orca [2]. The Aleph design was substantially influenced by experience using the Cid DSM system [10]. (In fact, our reliable datagram protocol is a port 7 to Java of the protocol used in Cid).
Reference: [2] <author> H. E. Bal, M. F. Kaashoek, and A. S. Tanenbaum. </author> <title> Experience with Distributed Programming in Orca. </title> <booktitle> In Proc. of the 1990 Int'l Conf. on Computer Languages, </booktitle> <pages> pages 79-89, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Early work on language support for DSM includes Linda [1] and Orca <ref> [2] </ref>. The Aleph design was substantially influenced by experience using the Cid DSM system [10]. (In fact, our reliable datagram protocol is a port 7 to Java of the protocol used in Cid).
Reference: [3] <author> J. K. Bennett, J. B. Carter, and W. Zwaenepoel. Munin: </author> <title> Distributed Shared Memory Based on Type-Specific Memory Coherence. </title> <booktitle> In Proc. of the Second ACM SIGPLAN Symp. on Principles and Practice of Parallel Programming (PPOPP'90), </booktitle> <pages> pages 168-177, </pages> <month> March </month> <year> 1990. </year> <month> 8 </month>
Reference-contexts: The complete Aleph API can be perused at http://www.cs.brown.edu/~mph/aleph.html We hope Aleph will be sufficiently stable to permit a public release before the end of 1997. 6 Related Work Pioneering work on DSM systems includes Ivy [9], Munin <ref> [3] </ref>, Treadmarks [7], Midway [4], and others. Early work on language support for DSM includes Linda [1] and Orca [2].
Reference: [4] <author> B. N. Bershad, M. J. Zekauskas, and W. A. Sawdon. </author> <title> The Midway Dis--tributed Shared Memory System. </title> <booktitle> In Proc. of the 38th IEEE Int'l Computer Conf. (COMPCON Spring'93), </booktitle> <pages> pages 528-537, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: The optimistic modes are intended for objects for which concurrent method invocations are infrequent. Transaction manager implementations are free to support other modes. Any unrecognized mode is treated as a write. The Aleph toolkit also supports transactions, analogous to synchronization objects in Midway <ref> [4] </ref>. Using a transaction, a thread can execute a critical section in which it atomically makes multiple updates to one or more objects. <p> The complete Aleph API can be perused at http://www.cs.brown.edu/~mph/aleph.html We hope Aleph will be sufficiently stable to permit a public release before the end of 1997. 6 Related Work Pioneering work on DSM systems includes Ivy [9], Munin [3], Treadmarks [7], Midway <ref> [4] </ref>, and others. Early work on language support for DSM includes Linda [1] and Orca [2]. The Aleph design was substantially influenced by experience using the Cid DSM system [10]. (In fact, our reliable datagram protocol is a port 7 to Java of the protocol used in Cid).
Reference: [5] <author> M.P. Herlihy and J.E.B. Moss. </author> <title> Transactional memory: architectural support for lock-free data structures. </title> <booktitle> In Proc. of the 20th Annual Int'l Symp. on Computer Architecture (ISCA'93), </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: The method void release () throws AlephException indicates that the calling thread is done with the object. Under some circumstances, the release may fail, throwing AlephException. Our coherence model for global objects is based on transactional memory <ref> [5] </ref>. An access is successful if the subsequent release does not throw an 1 Because starting a RemoteThread actually starts a copy of the thread object, a single RemoteThread instance can be started more than once. 3 exception.
Reference: [6] <author> K. L. Johnson, M. F. Kaashoek, and D. A. Wallach. </author> <title> CRL: High-Performance All-Software Distributed Shared Memory. </title> <booktitle> In Proc. of the 15th ACM Symp. on Operating Systems Principles (SOSP-15), </booktitle> <pages> pages 213-228, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: The Aleph design was substantially influenced by experience using the Cid DSM system [10]. (In fact, our reliable datagram protocol is a port 7 to Java of the protocol used in Cid). In Cid, as in CRL <ref> [6] </ref>, an object is constrained to be a contiguous region of memory, a restriction not well-suited to languages such as C++ or Java where objects are typically implemented as non-contiguous list structures. We are aware of two other DSM projects based on Java: Java/DSM [13], and Mocha [11].
Reference: [7] <author> P. Keleher, S. Dwarkadas, A. L. Cox, and W. Zwaenepoel. TreadMarks: </author> <title> Distributed Shared Memory on Standard Workstations and Operating Systems. </title> <booktitle> In Proc. of the Winter 1994 USENIX Conference, </booktitle> <pages> pages 115-131, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: The complete Aleph API can be perused at http://www.cs.brown.edu/~mph/aleph.html We hope Aleph will be sufficiently stable to permit a public release before the end of 1997. 6 Related Work Pioneering work on DSM systems includes Ivy [9], Munin [3], Treadmarks <ref> [7] </ref>, Midway [4], and others. Early work on language support for DSM includes Linda [1] and Orca [2]. The Aleph design was substantially influenced by experience using the Cid DSM system [10]. (In fact, our reliable datagram protocol is a port 7 to Java of the protocol used in Cid). <p> We are aware of two other DSM projects based on Java: Java/DSM [13], and Mocha [11]. Java/DSM implements a parallel Java Virtual Machine (JVM) running on top of Treadmarks <ref> [7] </ref>. Mocha, like Aleph, provides the ability to run threads at different nodes, and to share objects among those threads, without modifications to the JVM.
Reference: [8] <author> L. Lamport. </author> <title> How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-28(9):690-691, </volume> <month> September </month> <year> 1979. </year>
Reference-contexts: An access is successful if the subsequent release does not throw an 1 Because starting a RemoteThread actually starts a copy of the thread object, a single RemoteThread instance can be started more than once. 3 exception. All successful accesses are sequentially consistent <ref> [8] </ref>, but unsuc-cessful updates have no effect, and unsuccessful reads may return incorrect values.
Reference: [9] <author> K. Li and P. Hudak. </author> <title> Memory Coherence in Shared Virtual Memory Systems. </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> 7(4) </volume> <pages> 321-359, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: The complete Aleph API can be perused at http://www.cs.brown.edu/~mph/aleph.html We hope Aleph will be sufficiently stable to permit a public release before the end of 1997. 6 Related Work Pioneering work on DSM systems includes Ivy <ref> [9] </ref>, Munin [3], Treadmarks [7], Midway [4], and others. Early work on language support for DSM includes Linda [1] and Orca [2].
Reference: [10] <author> R. S. Nikhil. Cid: </author> <title> A Parallel, "Shared Memory" C for Distributed-Memory Machines. </title> <booktitle> In Proc. of the 7th Int'l Workshop on Languages and Compilers for Parallel Computing, </booktitle> <month> August </month> <year> 1994. </year>
Reference-contexts: Early work on language support for DSM includes Linda [1] and Orca [2]. The Aleph design was substantially influenced by experience using the Cid DSM system <ref> [10] </ref>. (In fact, our reliable datagram protocol is a port 7 to Java of the protocol used in Cid).
Reference: [11] <author> B. Topol, M. Ahamad, and J.T. Stasko. </author> <title> Robust state sharing for wide area distributed applications. </title> <type> Technical Report GIT-CC-97-25, </type> <institution> Georia Institute of Technology, </institution> <address> Atlanta, GA, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: We are aware of two other DSM projects based on Java: Java/DSM [13], and Mocha <ref> [11] </ref>. Java/DSM implements a parallel Java Virtual Machine (JVM) running on top of Treadmarks [7]. Mocha, like Aleph, provides the ability to run threads at different nodes, and to share objects among those threads, without modifications to the JVM.
Reference: [12] <author> T. von Eicken, D.E. Culler, S.C. Goldstein, and K.E. Schauser. </author> <title> Active messages: a mechanism for integrated communication and computation. </title> <booktitle> In Proc. of the 19th Annual Int'l Symp. on Computer Architecture (ISCA'92), </booktitle> <month> May </month> <year> 1992. </year> <month> 9 </month>
Reference-contexts: The default transaction manager implementation currently uses a simple invalidation-based, write-back caching scheme to manage global objects. The Aleph run-time system uses a bewildering variety of messages for global object and remote thread synchronization. Ideally, we would like to structure them as active messages <ref> [12] </ref>, encompassing a procedure's address and its arguments. When the message is received, the arguments are un-marshalled and control jumps directly to the procedure. Unfortunately, it is not possible to implement active messages as such in Java, but we can do something similar.
Reference: [13] <author> W. M. Yu and A. L. Cox. Java/DSM: </author> <title> a Platform for Heterogeneous Computing. </title> <booktitle> In ACM 1997 Workshop on Java for Science and Engineering Computation, </booktitle> <month> June </month> <year> 1997. </year> <month> 10 </month>
Reference-contexts: In Cid, as in CRL [6], an object is constrained to be a contiguous region of memory, a restriction not well-suited to languages such as C++ or Java where objects are typically implemented as non-contiguous list structures. We are aware of two other DSM projects based on Java: Java/DSM <ref> [13] </ref>, and Mocha [11]. Java/DSM implements a parallel Java Virtual Machine (JVM) running on top of Treadmarks [7]. Mocha, like Aleph, provides the ability to run threads at different nodes, and to share objects among those threads, without modifications to the JVM.
References-found: 13

