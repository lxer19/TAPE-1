URL: ftp://ftp.irisa.fr/techreports/1997/PI-1112.ps.gz
Refering-URL: http://www.cs.gatech.edu/grads/c/Richard.Clayton/ll.html
Root-URL: 
Title: 1112 A DOMAIN-SPECIFIC LANGUAGE FOR VIDEO DEVICE DRIVERS: FROM DESIGN TO IMPLEMENTATION  
Author: SCOTT THIBAULT RENAUD MARLET CHARLES CONSEL 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> B.R.T. Arnold, A. van Deursen, and M. </author> <title> Res. An algebraic specification of a language describing financial products. </title> <editor> In M. Wirsing, editor, </editor> <booktitle> ICSE-17 IEEE Workshop on Formal Methods Application in Software Engineering, </booktitle> <pages> pages 6-13, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: It is often small and declarative; it may be textual or graphic. DSLs have also been called application domain languages [6], little or micro-languages [2], and are related to coordination languages [8] and scripting languages [18]. DSLs have been used in various domains such as financial products <ref> [1, 21] </ref>, telephone switching systems [12, 17], operating systems [19], protocols [7], and robot languages [5]. Languages such as SQL, T E X and shells may also be considered DSLs. Software architectures based on DSLs primarily aim at achieving faster development of safer applications.
Reference: [2] <author> J. Bentley. </author> <title> Programming pearls: Little languages. </title> <journal> Comm. of the ACM, </journal> <pages> pages 711-716, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: It is often small and declarative; it may be textual or graphic. DSLs have also been called application domain languages [6], little or micro-languages <ref> [2] </ref>, and are related to coordination languages [8] and scripting languages [18]. DSLs have been used in various domains such as financial products [1, 21], telephone switching systems [12, 17], operating systems [19], protocols [7], and robot languages [5].
Reference: [3] <author> H.K. Berg, W.E. Boebert, W.R. Franta, and T.G. Moher. </author> <title> Formal Methods of Program Verification and Specification. </title> <publisher> Prentice-Hall, </publisher> <address> EngleWood Cliffs, NJ, </address> <year> 1982. </year>
Reference-contexts: The separation of the abstract machine and the DSL provides an intermediate level at which analyses can be performed and could allow analysis at run-time. In fact, this separation corresponds to a standard technique of program specification, which factors the verification process into two parts <ref> [3] </ref>. As an example of analysis at run-time, we may wish to check that device access within a video driver is safe (e.g., does not access the disk device). This cannot be done until run-time because it depends on what devices are present at run-time.
Reference: [4] <author> J. A. Bergstra and P. Klint. </author> <title> The ToolBus coordination architecture. </title> <booktitle> In Ciancarini and Hankin [8], </booktitle> <pages> pages 75-88. </pages>
Reference-contexts: compilers (translation from the DSL to a target machine or GPL) are not easy to write or to extend, and extensions require skills in compiler technology that cannot be expected from "domain developers"; those that are based on interpreters are easier to write or to extend but are less efficient <ref> [4] </ref>. This issue also impacts maintainability [22] because complexity in the compiler defeats the software engineering goals of using a DSL. Depending on objectives, either one or the other style of implementation is thus chosen: application generator or interpreter.
Reference: [5] <author> E. Bjarnason. Applab: </author> <title> a laboratory for application languages. </title> <booktitle> In Proceedings of th NWPER'96 (Nor-dic Whorkshop on Programming Environment Research), </booktitle> <institution> Aalborg, number R-96-2019 in Dept. of Mathematics and Computer Science. Aalborg University, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: DSLs have been used in various domains such as financial products [1, 21], telephone switching systems [12, 17], operating systems [19], protocols [7], and robot languages <ref> [5] </ref>. Languages such as SQL, T E X and shells may also be considered DSLs. Software architectures based on DSLs primarily aim at achieving faster development of safer applications.
Reference: [6] <author> J. Bosch and G. Hedin, </author> <title> editors. Proceedings of ALEL'96 (Compiler Techniques for Application Domain Languages and Extensible Language Models), </title> <type> Linkoping., </type> <institution> number LU-CS-TR:96-173 in Dept. of Computer Science. Lund University, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: It is often small and declarative; it may be textual or graphic. DSLs have also been called application domain languages <ref> [6] </ref>, little or micro-languages [2], and are related to coordination languages [8] and scripting languages [18]. DSLs have been used in various domains such as financial products [1, 21], telephone switching systems [12, 17], operating systems [19], protocols [7], and robot languages [5].
Reference: [7] <author> Satish Chandra, Brad Richards, and James R. La-rus. Teapot: </author> <title> Language support for writing memory Irisa </title>
Reference-contexts: DSLs have also been called application domain languages [6], little or micro-languages [2], and are related to coordination languages [8] and scripting languages [18]. DSLs have been used in various domains such as financial products [1, 21], telephone switching systems [12, 17], operating systems [19], protocols <ref> [7] </ref>, and robot languages [5]. Languages such as SQL, T E X and shells may also be considered DSLs. Software architectures based on DSLs primarily aim at achieving faster development of safer applications.
References-found: 7

