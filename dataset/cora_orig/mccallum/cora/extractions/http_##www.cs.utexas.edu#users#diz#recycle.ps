URL: http://www.cs.utexas.edu/users/diz/recycle.ps
Refering-URL: http://www.cs.utexas.edu/users/diz/pubs.html
Root-URL: 
Title: How to Recycle Random Bits  
Author: Russell Impagliazzo David Zuckerman 
Abstract: We show that modified versions of the linear congru-ential generator and the shift register generator are provably good for amplifying the correctness of a probabilistic algorithm. More precisely, if r random bits are needed for a BPP algorithm to be correct with probability at least 2=3, then O(r + k 2 ) bits are needed to improve this probability to 1 2 k . We also present a different pseudo-random generator that is optimal, up to a constant factor, in this regard: it uses only O(r + k) bits to improve the probability to 1 2 k . This generator is based on random walks on expanders. Our results do not depend on any unproven assumptions. Next we show that our modified versions of the shift register and linear congruential generators can be used to sample from distributions using, in the limit, the information-theoretic lower bound on random bits. 
Abstract-found: 1
Intro-found: 1
Reference: [AKS] <author> M. Ajtai, J. Komlos, and E. Szemeredi, </author> <title> "Deterministic Simulation of Logspace," </title> <booktitle> 19th STOC, </booktitle> <year> 1987. </year>
Reference-contexts: The first construction involves taking a random walk on a type of expander graph known to be constructible [GG]. The proof, which was independently discovered by Cohen and Wigderson [CWi], uses techniques similar to those in <ref> [AKS] </ref>. These quasi-perfect prg's can be implemented simply and efficiently using explicit constructions of expanders from [GG] or [LPS]. <p> This requires r = O (r 0 ) bits; we could also use the technique described later to use even fewer bits. Next, we take a random walk on an expander, an idea used in <ref> [AKS] </ref>. <p> For every i 2 f1; 2; : : :7kg query if a 2 L using the r-bit pseudo-random string represented by X ci . Output the majority vote of these queries. Proof of Correctness: We use the techniques in <ref> [AKS] </ref> to show that the error probability is at most 2 k . First, some notation: C G is the set of vertices representing strings for which queries are answered correctly. P is the vector space R s , where s = 2 r . P represents probabilities.
Reference: [Ba] <author> E. Bach, </author> <title> "Realistic Analysis of Some Randomized Algorithms", </title> <booktitle> 19th STOC, </booktitle> <year> 1987. </year>
Reference: [BM] <author> M. Blum and S. Micali, </author> <title> "How to Generate Cryptographically Strong Sequences of Pseudo-Random Bits," </title> <journal> SIAM J. Comput., </journal> <volume> 13 </volume> <month> 270-299 </month> <year> (1984). </year>
Reference-contexts: It is hoped that this longer output will serve the same purpose as a truly random string of the same size. The most commonly used prg is some sort of linear-congruential generator. Recent theoretical work has provided some good ways of conserving random bits. Blum and Micali <ref> [BM] </ref> introduced the notion of a cryptographically secure prg; Yao [Y] showed that such a generator produces output strings which are computationally indistinguishable (in polynomial time) from truly random strings. Nevertheless, there are problems with using cryptographically secure prg's. First, such generators must be fl Supported by NSF Grant CCR88-13632.
Reference: [CW] <author> L. Carter and M. Wegman, </author> <title> "Universal Hash Functions," </title> <journal> JCSS, </journal> <year> 1979. </year>
Reference-contexts: We say H is universal or a universal family of hash functions if, for every x; y 2 f0; 1g n ; x 6= y, the probability that h (x) = h (y), for h selected randomly from H, is 1=2 l (see <ref> [CW] </ref>). We say H is almost universal if, for every such pair, the aforementioned probability is at most 1=2 l + 1=2 n One example of a universal family of hash functions is the set of all n fi l matrices over the field with 2 elements.
Reference: [CWi] <author> A. Cohen and A. Wigderson, "Dispersers, </author> <title> Deterministic Amplification, and Weak Random Sources," </title> <booktitle> 30th FOCS, </booktitle> <year> 1989. </year>
Reference-contexts: The first construction involves taking a random walk on a type of expander graph known to be constructible [GG]. The proof, which was independently discovered by Cohen and Wigderson <ref> [CWi] </ref>, uses techniques similar to those in [AKS]. These quasi-perfect prg's can be implemented simply and efficiently using explicit constructions of expanders from [GG] or [LPS].
Reference: [FKL] <author> D. Frieze, R. Kannan, and J. C. Lagarias, </author> <title> "Linear Congruential Generators Do Not Produce Random Sequences," </title> <booktitle> 25th FOCS, </booktitle> <year> 1984. </year>
Reference: [GG] <author> O. Gabber and Z. Galil, </author> <title> "Explicit Construction of Linear-Sized Superconcentrators," </title> <booktitle> 20th FOCS, </booktitle> <year> 1979. </year>
Reference-contexts: The first construction involves taking a random walk on a type of expander graph known to be constructible <ref> [GG] </ref>. The proof, which was independently discovered by Cohen and Wigderson [CWi], uses techniques similar to those in [AKS]. These quasi-perfect prg's can be implemented simply and efficiently using explicit constructions of expanders from [GG] or [LPS]. <p> construction involves taking a random walk on a type of expander graph known to be constructible <ref> [GG] </ref>. The proof, which was independently discovered by Cohen and Wigderson [CWi], uses techniques similar to those in [AKS]. These quasi-perfect prg's can be implemented simply and efficiently using explicit constructions of expanders from [GG] or [LPS]. <p> The only fact we'll need about an expander is that the associated transition matrix A has 2 1 *, for some constant * &gt; 0. We take G to be the 7-regular expander on the s = 2 r vertices f0; 1g r given in <ref> [GG] </ref>. This construction has the property that the neighbors of a vertex can be found in O (1) time, so a random walk can be simulated efficiently. It is also important for our construction that the i are bounded away from 1.
Reference: [ILL] <author> R. Impagliazzo, L. Levin, and M. Luby, </author> <title> "Pseudorandom generation from one-way functions," </title> <booktitle> 21st STOC, </booktitle> <year> 1989. </year>
Reference-contexts: This method uses O (r + k 2 ) random bits to reduce the error probability to 2 k . The proof is based on a lemma from <ref> [ILL] </ref>, and is just one application of a general technique which can be used to reduce the random bits used in computation. <p> We say D is quasi-random within * on S if D is statistically indistinguishable from the uniform distribution on S within *. The following lemma is a somewhat stronger and cleaner version of a lemma in <ref> [ILL] </ref>; the strengthened version and proof found here are due to Rackoff [R]. Leftover Hash Lemma. Let X f0; 1g n ; jXj 2 l . Let e &gt; 0, and let H be an almost universal family of hash functions mapping n bits to l 2e bits.
Reference: [JVV] <author> M. Jerrum, L. Valiant, and V. </author> <title> Vazirani "Random Generation of Combinatorial Structures from a Uniform Distribution," </title> <journal> Theoretical Computer Science, </journal> <volume> 43 </volume> <month> 169-188 </month> <year> (1986). </year>
Reference-contexts: Other situations where these techniques might be used are: cryptography, where it might be necessary to generate many keys or problem instances from a certain distribution, such as a long list of primes, or pre-factored Blum integers; approximation algorithms such as in <ref> [JVV] </ref>, where many samples from a distribution are used to determine a succinctly describable quantity; or any probabilistic algorithm which has a subroutine or subroutines which output fewer bits than the amount of randomness they use.
Reference: [KR] <author> H. Karloff and P. Raghavan, </author> <title> "Randomized Algorithms and Pseudorandom Numbers," </title> <booktitle> 20th STOC, </booktitle> <year> 1988. </year>
Reference-contexts: Another recent direction of research has been to theoretically explain the practical success of simple prg's like the linear congruential generator. Bach [B] and Karloff and Raghavan <ref> [KR] </ref> have shown that linear congruen-tial generators or variants thereof have provably good performances when used in specific algorithms, such as taking square roots modulo a prime and Quicksort; the latter paper also gives a task for which the usual linear congruential generators are inadequate.
Reference: [LPS] <author> A. Lubotzky, R. Phillips, and N. </author> <title> Sarnak "Explicit Expanders and the Ramanujan conjecture," </title> <booktitle> 18th STOC, </booktitle> <year> 1986. </year>
Reference-contexts: The proof, which was independently discovered by Cohen and Wigderson [CWi], uses techniques similar to those in [AKS]. These quasi-perfect prg's can be implemented simply and efficiently using explicit constructions of expanders from [GG] or <ref> [LPS] </ref>.
Reference: [P] <author> J. Plumstead, </author> <title> "Inferring a Sequence Generated by a Linear Congruence," </title> <booktitle> 24th FOCS, </booktitle> <year> 1983. </year>
Reference: [R] <author> M. O. Rabin, </author> <title> "Probabilistic algorithm for testing primality," </title> <journal> J. of Number Theory, </journal> <volume> 12 </volume> <month> 128-138 </month> <year> (1980). </year>
Reference-contexts: More concretely, suppose we wish to generate at random n bit primes (for use in a cryptographic protocol, say). A naive algorithm might work as follows. Pick a random n bit number. Use a probabilistic algorithm (e.g. Rabin's <ref> [R] </ref>) to test whether the number you picked is prime. If so, output it. If not, start over. <p> We say D is quasi-random within * on S if D is statistically indistinguishable from the uniform distribution on S within *. The following lemma is a somewhat stronger and cleaner version of a lemma in [ILL]; the strengthened version and proof found here are due to Rackoff <ref> [R] </ref>. Leftover Hash Lemma. Let X f0; 1g n ; jXj 2 l . Let e &gt; 0, and let H be an almost universal family of hash functions mapping n bits to l 2e bits. <p> Proof.Apply the previous lemma to the distribution D = logjf 1 (f (x))j. D is a distribution on <ref> [0; r] </ref> with mean r E. The log of the number of preimages of x under f t has the same distribution as the sum of t random elements of D. Proof of Theorem 3.
Reference: [Sa] <author> M. Santha, </author> <title> "On Using Deterministic Functions to Reduce Randomness in Probabilistic Algorithms," </title> <type> Manuscript. </type>
Reference-contexts: Linear congruential generators, although known not to be cryptographically secure (see e.g. [FKL],[P]), continue to be used in practice. Because of these disadvantages, work has been done to construct good generators for more specific tasks. For example, Santha <ref> [Sa] </ref> and Sipser [Si] introduced the notion of a "quasi-perfect pseudo-random generator." A quasi-perfect prg can be used to decrease the probability of error of a BPP or RP algorithm from a constant &lt; 1=2 to an exponentially small amount, using only a constant factor more random bits.
Reference: [Sh] <author> C.E. Shannon, </author> <title> "A Mathematical Theory of Communication," </title> <journal> Bell Syst. Tech. J., </journal> <volume> 27 </volume> <month> 379-423,623-656 </month> <year> (1948). </year>
Reference-contexts: will deviate from a truly random sequence of primes by an exponentially small amount.) This can be construed as an effective version of Shannon's information theoretic result that Ent (D) is equal (within a bit) to the minimum expected number of random bits for a method of sampling from D <ref> [Sh] </ref>. We generalize this result still further. In order to get the amortized savings in random bits, it is not necessary to always sample from the same distribution D. <p> This is the information-theoretic lower bound. Thus, the above theorem can be thought of as an effective version of Shannon's Theorem <ref> [Sh] </ref>. We require some lemmas from probability theory. The following lemma follows from the Martingale Tail Inequality [Sp]. Lemma 4 Let D be a distribution on the interval [a; b], with expectation E. Let t be a positive integer, and let 0 &lt; ff &lt; t 1=2 .
Reference: [Si] <author> M. Sipser, "Expanders, </author> <title> Randomness, or Time versus Space," Structure in Complexity, </title> <year> 1986. </year>
Reference-contexts: Linear congruential generators, although known not to be cryptographically secure (see e.g. [FKL],[P]), continue to be used in practice. Because of these disadvantages, work has been done to construct good generators for more specific tasks. For example, Santha [Sa] and Sipser <ref> [Si] </ref> introduced the notion of a "quasi-perfect pseudo-random generator." A quasi-perfect prg can be used to decrease the probability of error of a BPP or RP algorithm from a constant &lt; 1=2 to an exponentially small amount, using only a constant factor more random bits. <p> Sipser has shown that the existence of certain types of constructive expanders implies that of quasi-perfect prg's; our results could be rephrased as explicit constructions of Sipser expanders (with somewhat weaker parameters than those used in <ref> [Si] </ref>). The first construction involves taking a random walk on a type of expander graph known to be constructible [GG]. The proof, which was independently discovered by Cohen and Wigderson [CWi], uses techniques similar to those in [AKS].
Reference: [Sp] <author> J. Spencer, </author> <title> "Ten Lectures on the Probabilistic Method," </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1987, </year> <pages> pp. 55-56. </pages>
Reference-contexts: This is the information-theoretic lower bound. Thus, the above theorem can be thought of as an effective version of Shannon's Theorem [Sh]. We require some lemmas from probability theory. The following lemma follows from the Martingale Tail Inequality <ref> [Sp] </ref>. Lemma 4 Let D be a distribution on the interval [a; b], with expectation E. Let t be a positive integer, and let 0 &lt; ff &lt; t 1=2 . Pick d 1 ; : : :; d t independently according to D.
Reference: [V] <author> U. Vazirani, </author> <title> "Efficiency Considerations in Using Semi-Random Sources," </title> <booktitle> 19th STOC, </booktitle> <year> 1987. </year>
Reference-contexts: Until now, no prg was proven to be quasi-perfect, although Vazirani <ref> [V] </ref> conjectured that a specific prg, related to the shift register prg presented here, is quasi-perfect. Another recent direction of research has been to theoretically explain the practical success of simple prg's like the linear congruential generator. <p> In particular, we prove that modified versions of both the linear congruential and shift register generators (from <ref> [V] </ref>) are quasi-perfect. The modification is that only the r O (k) least significant bits of the generator's output on an r bit seed are used; the remaining bits are replaced by truly random bits. <p> Then let C n;l be the set of all strings of length p. Let the value of the function described by a string r on an n bit input x be the first l bits of r (1 ffi x), where ffi denotes concatenation. The results in <ref> [V] </ref> imply that C n;l , interpreted as a family of functions as above, is universal. The length required to hash an n bit string using this method is the first prime &gt; n with 2 a generator. If the extended Riemann Hypothesis holds, this will be O (n) (see [V]) <p> <ref> [V] </ref> imply that C n;l , interpreted as a family of functions as above, is universal. The length required to hash an n bit string using this method is the first prime &gt; n with 2 a generator. If the extended Riemann Hypothesis holds, this will be O (n) (see [V]) and, for infinitely many n, will be n + 1. Since the prime involved is of size O (n), rather than length O (n), every number between n and cn can be tested until such a prime is found.
Reference: [V2] <author> U. Vazirani, </author> <title> "Randomness, Adversaries and Computation," </title> <type> PhD Thesis, </type> <institution> University of California, Berke-ley, </institution> <year> 1986. </year>
Reference-contexts: Remark. The above directly implies a version of Vazi-rani's result that quasi-random sources can be used to perform BPP computations <ref> [V2] </ref>. Specifically, there is a ffi &gt; 1 such that if each r-bit string occurs with probability at most 2 ffir , the above construction works. To see this, say a prg needs Cr bits to reduce the probability of error to 2 r .
Reference: [Y] <author> A. Yao, </author> <title> "Theory and Applications of Trapdoor Functions," </title> <booktitle> 23rd FOCS, </booktitle> <year> 1982. </year>
Reference-contexts: The most commonly used prg is some sort of linear-congruential generator. Recent theoretical work has provided some good ways of conserving random bits. Blum and Micali [BM] introduced the notion of a cryptographically secure prg; Yao <ref> [Y] </ref> showed that such a generator produces output strings which are computationally indistinguishable (in polynomial time) from truly random strings. Nevertheless, there are problems with using cryptographically secure prg's. First, such generators must be fl Supported by NSF Grant CCR88-13632.
References-found: 20

