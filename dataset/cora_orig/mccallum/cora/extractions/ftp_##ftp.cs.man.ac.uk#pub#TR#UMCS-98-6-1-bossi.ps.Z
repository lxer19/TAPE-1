URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1-bossi.ps.Z
Refering-URL: ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-98-6-1.html
Root-URL: http://www.cs.man.ac.uk
Email: e-mail: bossi@dsi.unive.it  e-mail: sabina@math.unipd.it  
Title: Specialising Logic Programs wrt Pre/Post Specifications  
Author: Annalisa Bossi and Sabina Rossi flfl 
Address: via Torino 155, 30173 Venezia, Italy  via Belzoni 7, 35131 Padova, Italy  
Affiliation: Dipartimento di Matematica e Informatica,  flfl Dipartimento di Matematica,  
Abstract: In this paper we introduce the concept of specialised derivations. They are intended to describe program behaviour whenever some constraints on procedure calls (preconditions) are assumed. Operational and fixpoint semantics, in the s-semantics style, are derived. They characterize successful derivations where only atoms satisfying the given precondition are selected. A novel notion of specialised partial correcteness (s.p.c.) of a program with respect to pre/post specifications is introduced and a proof method is defined. The latter consists in one application of the specialised immediate consequence operator to the "relevant" part of the postcondition. Programs, which are proved to be s.p.c. wrt a given pre/post specification, can be transformed into partially correct ones. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. R. Apt. </author> <title> Introduction to Logic Programming. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Models and Semantics. </booktitle> <publisher> Elsevier, Amsterdam and The MIT Press, </publisher> <address> Cambridge, </address> <year> 1990. </year>
Reference-contexts: specialised semantics of P is equivalent to the s-semantics of P Pre and that in P Pre all selected atoms in any derivation satisfy its precondition. 2 Specialised Derivations The reader is assumed to be familiar with the terminology of and the basic results in the semantics of logic programs <ref> [1, 3, 11] </ref>. We denote by T the set of terms built on a finite set of data conctructors C and a denumerable set of variable symbols V.
Reference: [2] <author> K. R. Apt. </author> <title> Program verification and prolog. </title> <editor> In E. Borger, editor, </editor> <booktitle> Specification and Validation Methods for Programming Languages and Systems, </booktitle> <pages> pages 55-95. </pages> <publisher> Oxford University Press, Oxford, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction Techniques for proving correctness of a program with respect to a given pre/post specification are usually based on inductive methods <ref> [7, 4, 6, 2, 3] </ref>. As in any inductive proof, the choice of the inductive hypothesis is critical to carry out the proof. A stronger hypothesis is often necessary, namely that the precondition holds for all atoms selected in the derivations.
Reference: [3] <author> K. R. Apt. </author> <title> From Logic Programming to Prolog. </title> <publisher> Prentice Hall, </publisher> <year> 1997. </year>
Reference-contexts: 1 Introduction Techniques for proving correctness of a program with respect to a given pre/post specification are usually based on inductive methods <ref> [7, 4, 6, 2, 3] </ref>. As in any inductive proof, the choice of the inductive hypothesis is critical to carry out the proof. A stronger hypothesis is often necessary, namely that the precondition holds for all atoms selected in the derivations. <p> Clearly, there exist programs which have a correct behaviour with respect to a pre/post specification even if some selected atoms do not satisfy the precondition. As an example, consider the program PERM <ref> [3] </ref> perm ([ ]; [ ]): perm (X s ; [XjY s ]) append (X1 s ; [XjX2 s ]; X s ); append (X1 s ; X2 s ; Z s ); perm (Z s ; Y s ) append ([ ]; X s ; X s ): append ([XjX <p> specialised semantics of P is equivalent to the s-semantics of P Pre and that in P Pre all selected atoms in any derivation satisfy its precondition. 2 Specialised Derivations The reader is assumed to be familiar with the terminology of and the basic results in the semantics of logic programs <ref> [1, 3, 11] </ref>. We denote by T the set of terms built on a finite set of data conctructors C and a denumerable set of variable symbols V.
Reference: [4] <author> A. Bossi and N. Cocco. </author> <title> Verifying Correctness of Logic Programs. </title> <editor> In G. Levi and M. Martelli, editors, </editor> <booktitle> Proc. Sixth Int'l Conf. on Logic Programming, </booktitle> <pages> pages 96-110. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: 1 Introduction Techniques for proving correctness of a program with respect to a given pre/post specification are usually based on inductive methods <ref> [7, 4, 6, 2, 3] </ref>. As in any inductive proof, the choice of the inductive hypothesis is critical to carry out the proof. A stronger hypothesis is often necessary, namely that the precondition holds for all atoms selected in the derivations.
Reference: [5] <author> A. Bossi, M. Martelli, M. Gabrielli, and G. Levi. </author> <title> The s-semantics approach: </title> <journal> theory and applications. Journal of Logic Programming, </journal> <volume> 19-20:149-197, </volume> <year> 1994. </year>
Reference-contexts: This notion refers to a definition of specialised derivations which is introduced in order to describe the intended behaviour of a program which meets its pre/post specification at each procedure call. We show that the s-semantics approach <ref> [8, 9, 5] </ref> can be specialised to preconditions. The specialised denotations can be computed both by a top-down and a bottom-up construction. Moreover, we develop a simple program transformation which transforms a s.p.c. program P into a specialised program P Pre .
Reference: [6] <author> P. Deransart. </author> <title> Proof methods of declarative properties of definite programs. </title> <journal> Theoretical Computer Science, </journal> <volume> 118 </volume> <pages> 99-166, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction Techniques for proving correctness of a program with respect to a given pre/post specification are usually based on inductive methods <ref> [7, 4, 6, 2, 3] </ref>. As in any inductive proof, the choice of the inductive hypothesis is critical to carry out the proof. A stronger hypothesis is often necessary, namely that the precondition holds for all atoms selected in the derivations.
Reference: [7] <author> W. Drabent and J. Maluszynski. </author> <title> Inductive Assertion Method for Logic Programs. </title> <journal> Theoretical Computer Science, </journal> <volume> 59(1) </volume> <pages> 133-155, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction Techniques for proving correctness of a program with respect to a given pre/post specification are usually based on inductive methods <ref> [7, 4, 6, 2, 3] </ref>. As in any inductive proof, the choice of the inductive hypothesis is critical to carry out the proof. A stronger hypothesis is often necessary, namely that the precondition holds for all atoms selected in the derivations.
Reference: [8] <author> M. Falaschi, G. Levi, M. Martelli, and C. Palamidessi. </author> <title> A new Declarative Semantics for Logic Languages. </title> <editor> In R. A. Kowalski and K. A. Bowen, editors, </editor> <booktitle> Proc. Fifth Int'l Conf. on Logic Programming, </booktitle> <pages> pages 993-1005. </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1988. </year>
Reference-contexts: This notion refers to a definition of specialised derivations which is introduced in order to describe the intended behaviour of a program which meets its pre/post specification at each procedure call. We show that the s-semantics approach <ref> [8, 9, 5] </ref> can be specialised to preconditions. The specialised denotations can be computed both by a top-down and a bottom-up construction. Moreover, we develop a simple program transformation which transforms a s.p.c. program P into a specialised program P Pre .
Reference: [9] <author> M. Falaschi, G. Levi, M. Martelli, and C. Palamidessi. </author> <title> Declarative Modeling of the Operational Behavior of Logic Languages. </title> <journal> Theoretical Computer Science, </journal> <volume> 69(3) </volume> <pages> 289-318, </pages> <year> 1989. </year>
Reference-contexts: This notion refers to a definition of specialised derivations which is introduced in order to describe the intended behaviour of a program which meets its pre/post specification at each procedure call. We show that the s-semantics approach <ref> [8, 9, 5] </ref> can be specialised to preconditions. The specialised denotations can be computed both by a top-down and a bottom-up construction. Moreover, we develop a simple program transformation which transforms a s.p.c. program P into a specialised program P Pre . <p> It is well known that set inclusion does not adequately reflect the property of non-ground atoms of being representatives of all their ground instances. So, we refer to the partial ordering v on interpretations defined by Falaschi et al. <ref> [9] </ref> as follows: * I 1 I 2 iff 8A 1 2 I 1 ; 9A 2 2 I 2 such that A 2 A 1 . * I 1 v I 2 iff (I 1 I 2 ) and (I 2 I 1 implies I 1 I 2 ). <p> ; X n distinct variables in V; 9; p (X 1 ; : : : ; X n ) 7! P;I 2; Note that if I is the extended Herbrand base B E , then O B E (P ) is the original s-semantics defined by Falaschi et al. in <ref> [9] </ref>. Example 2.6 Consider the program APPEND and the interpretation I of Example 2.1. <p> variant of atoms in J and renamed apart, 9 = mgu I ((B 1 ; : : : ; B n ); (B 0 n )); Note that if I is the extended Herbrand base B E , then T P;B E coincides with the S-transformation T S defined in <ref> [9] </ref>. For any interpretation I, the transformation T P;I is monotonic and continuous in the complete lattice hI; i.
Reference: [10] <author> M. Falaschi, G. Levi, M. Martelli, and C. Palamidessi. </author> <title> A model-theoretic reconstruction of the operational semantics of logic programs. </title> <journal> Theoretical Computer Science, </journal> <volume> 103(1) </volume> <pages> 86-113, </pages> <year> 1993. </year>
Reference-contexts: The ordering induced by on B E will still be denoted by . For the sake of simplicity, we represent the equivalence class of an atom A by A itself. An interpretation I is any subset of B E . Let us recall from <ref> [10] </ref> some definitions of useful operators on interpretations. Let I be an interpretation. <p> Lemma 2.1 (Specialised Lifting Lemma) Let I be an interpretation and ffi := Q oe successful I-derivation of a query Q. Then, there exists a successful I-derivation ffi 0 := Q oe 0 where oe 0 oe. 2.3 Specialised Semantics Based on the s-semantics approach <ref> [10] </ref>, we can model various observable properies of specialised derivations, such as specialised computed answer substitutions, in terms of denotations which are Herbrand interpretations (extended with variables).
Reference: [11] <author> J. W. Lloyd. </author> <title> Foundations of Logic Programming. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1987. </year> <note> Second edition. </note>
Reference-contexts: specialised semantics of P is equivalent to the s-semantics of P Pre and that in P Pre all selected atoms in any derivation satisfy its precondition. 2 Specialised Derivations The reader is assumed to be familiar with the terminology of and the basic results in the semantics of logic programs <ref> [1, 3, 11] </ref>. We denote by T the set of terms built on a finite set of data conctructors C and a denumerable set of variable symbols V.
Reference: [12] <author> Lee Naish. </author> <title> Types and the intended meaning of logic programs. </title> <editor> In Frank Pfenning, editor, </editor> <booktitle> Types in logic programming, </booktitle> <pages> pages 189-216. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1992. </year>
Reference-contexts: Technical Report Series, Department of Computer Science, University of Manchester, ISSN 1361-6161. Report number UMCS-98-6-1. http://www.cs.man.ac.uk/cstechrep/titles98.html 1 which do not satisfy the precondition since Z s is a variable. In <ref> [12, 13, 14] </ref>, Naish provides a three-value semantics that allows to reason about correctness of programs without the need for undue retrictions on programming style. In this paper, we introduce a notion of specialised partial correctness.
Reference: [13] <author> Lee Naish. </author> <title> Verification of logic programs and imperative programs. </title> <editor> In Jean-Marie Jacquet, editor, </editor> <booktitle> Constructing logic programs, </booktitle> <pages> pages 143-164. </pages> <publisher> Wiley, </publisher> <address> Chichester, England, </address> <year> 1993. </year>
Reference-contexts: Technical Report Series, Department of Computer Science, University of Manchester, ISSN 1361-6161. Report number UMCS-98-6-1. http://www.cs.man.ac.uk/cstechrep/titles98.html 1 which do not satisfy the precondition since Z s is a variable. In <ref> [12, 13, 14] </ref>, Naish provides a three-value semantics that allows to reason about correctness of programs without the need for undue retrictions on programming style. In this paper, we introduce a notion of specialised partial correctness.
Reference: [14] <author> Lee Naish. </author> <title> A three-valued semantics for horn clause programs. </title> <type> Technical Report 98/4, </type> <institution> Department of Computer Science, University of Melbourne, </institution> <address> Melbourne, Australia, </address> <month> March </month> <year> 1998. </year> <month> 8 </month>
Reference-contexts: Technical Report Series, Department of Computer Science, University of Manchester, ISSN 1361-6161. Report number UMCS-98-6-1. http://www.cs.man.ac.uk/cstechrep/titles98.html 1 which do not satisfy the precondition since Z s is a variable. In <ref> [12, 13, 14] </ref>, Naish provides a three-value semantics that allows to reason about correctness of programs without the need for undue retrictions on programming style. In this paper, we introduce a notion of specialised partial correctness.
References-found: 14

