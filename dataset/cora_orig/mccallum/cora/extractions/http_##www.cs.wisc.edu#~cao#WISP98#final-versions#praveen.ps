URL: http://www.cs.wisc.edu/~cao/WISP98/final-versions/praveen.ps
Refering-URL: http://www.cs.wisc.edu/~cao/WISP98-program.html
Root-URL: http://www.cs.wisc.edu
Email: praveen@cs.cornell.edu  
Title: Java in Next-Generation Database Systems  
Author: Praveen Seshadri 
Web: http://www.cs.cornell.edu/home/praveen/  
Affiliation: Computer Science Department, Cornell University  
Abstract: This position paper describes the impact of Java on the next generation of database systems. These observations are based on our ongoing research in building the PREDATOR object-relational database system at Cornell. We believe that Java will play a critical role in two complementary components of the DBMS: (a) user-defined extensions of the database server, (b) migration of query processing between server and client. We are beginning to explore these topics in the context of the Jaguar project. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> Shoring up Persistent Objects: M.J.Carey, et al., </editor> <booktitle> Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <year> 1994. </year>
Reference-contexts: It is a highly functional system, capable of supporting a large subset of SQL-92, multiple concurrent transactions, and database applications involving gigabytes of data. It exploits the storage management functionality of the Shore Storage Manager software library <ref> [1] </ref>. PREDATOR has primarily been used for research into efficient techniques for the support of complex data types [2]. It has a clientserver architecture; clients are expected to acquire queries, ship them to the server, and display the returned results.
Reference: 2. <institution> The Case for Enhanced Abstract Data Types: </institution> <note> P.Seshadri, </note> <editor> M.Livny. and R.Ramakrishnan, </editor> <booktitle> Proceedings of the Twenty Third International Conference on Very Large Databases, </booktitle> <year> 1997. </year>
Reference-contexts: It exploits the storage management functionality of the Shore Storage Manager software library [1]. PREDATOR has primarily been used for research into efficient techniques for the support of complex data types <ref> [2] </ref>. It has a clientserver architecture; clients are expected to acquire queries, ship them to the server, and display the returned results. A Java client library (JCL) has been written that provides a superset of the functionality of JDBC [11].
Reference: 3. <institution> Optimization of Queries with User-Defined Predicates: </institution> <address> S.Chaudhuri and K.Shim, </address> <booktitle> Proceedings of the Twenty Second International Conference on Very Large Databases, </booktitle> <year> 1996 </year>
Reference: 4. <institution> Optimization and Execution Techniques for Queries with Expensive Methods: J.M.Hellerstein, </institution> <type> PhD Thesis, </type> <institution> University of Wisconsin, </institution> <year> 1995. </year>
Reference: 5. <institution> Java-Relational Database Management Systems : Cimarron Taylor. </institution> <note> http://www.jbdev.com/, 1997. </note>
Reference-contexts: Does this imply that the entire database server is written in Java? There are some current research and commercial projects attempting to build such all-Java systems (for example, <ref> [5] </ref>). However, we believe it is undesirable (for performance reasons and practical reasons of inertia) to implement many of the lower levels of the server in anything other than a language like C or C++.
Reference: 6. <author> L.Haas, et.al. </author> : <title> Starburst mid-flight: As the dust clears, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> March </month> <year> 1990. </year>
Reference: 7. <institution> Application of Abstract Data Types and Abstract Indices to CAD DataBases : M.Stonebraker, </institution> <note> B.Rubenstein, </note> <editor> and A.Guttman. </editor> <booktitle> Proceedings of the Engineering Applications Stream of Database Week, </booktitle> <address> San Jose, CA, </address> <month> May </month> <year> 1983. </year>
Reference: 8. <institution> Inclusion of New Types in Relational Data Base Systems: </institution> <address> Michael Stonebraker, </address> <booktitle> Proceedings of the Second IEEE Conference on Data Engineering pgs 262-269, </booktitle> <year> 1986. </year>
Reference-contexts: Instead, the boundaries between client, server and network need to be blurred so as to derive efficient query processing performance. This Web-based environment leads to new challenges for next-generation database applications. Extensibility mechanisms have been studied in the context of database support for complex data types <ref> [8] </ref>. Clientserver query processing has been studied in the context of homogeneous distributed systems [9]. What is needed is an integrated approach, knowing that the applications run over the Web with Java available as a portable programming environment. 2.
Reference: 9. <institution> Performance Tradeoffs for ClientServer Query Processing: </institution> <address> M.J.Franklin, B.T.Jonsson, D.Kossman, </address> <booktitle> Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <year> 1996. </year>
Reference-contexts: This Web-based environment leads to new challenges for next-generation database applications. Extensibility mechanisms have been studied in the context of database support for complex data types [8]. Clientserver query processing has been studied in the context of homogeneous distributed systems <ref> [9] </ref>. What is needed is an integrated approach, knowing that the applications run over the Web with Java available as a portable programming environment. 2. Background This section contains a brief overview of database technology related to this position paper. <p> However, the JDBC protocol essentially ignores the issue of database extensibility. Work on ClientServer Query Processing Distributed database systems and clientserver systems use a variety of query processing techniques. These techniques have traditionally been categorized as either query-shipping or data-shipping <ref> [9] </ref>. Query-shipping is common in relational and object-relational databases, where clients send entire queries to the server and wait for the results to be sent back. Data-shipping is common in objectoriented databases, where the server is simply a data repository and all the query processing is done at the clients. <p> Data-shipping is common in objectoriented databases, where the server is simply a data repository and all the query processing is done at the clients. Another proposal is a hybridshipping strategy, which combines elements of data-shipping and query-shipping. Researchers in the DIMSUM project <ref> [9] </ref> explored hybridshipping strategies primarily with the motivation of exploiting cached data at the client. In web-based applications, cached data is likely to arise in the middleware layer of Three-Tier applications. The database query optimizer needs to be augmented to consider hybrid-shipping query plans in addition to traditional plans.
Reference: 10. <editor> ClientServer Caching Revisited: M.J. Franklin and M.Carey, </editor> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, </address> <publisher> CA,1994, </publisher> <editor> Editors: Ozsu, Valduriez, </editor> <publisher> Dayal.. </publisher>
Reference: 11. <editor> JDBC Database Access with Java: G.Hamilton, R.Cattell and M.Fisher, </editor> <publisher> Addison Wesley, </publisher> <year> 1997. </year>
Reference-contexts: The issues raised by this paper apply to applications built with either architecture. However, for the sake of simplicity, we will assume a Two-Tier architecture. All the large relational database vendors sell products that facilitate Web/DB connectivity using a multi-tier architecture. The JDBC protocol <ref> [11] </ref> establishes an important step towards Java-based database clients; it specifies a standard Java interface using which an application can interact with any database system, independent of vendorspecific details. However, the JDBC protocol essentially ignores the issue of database extensibility. <p> It has a clientserver architecture; clients are expected to acquire queries, ship them to the server, and display the returned results. A Java client library (JCL) has been written that provides a superset of the functionality of JDBC <ref> [11] </ref>. The JCL can be used to build application clients either as middleware programs or as applets that run within a Web browser. This position paper arises out of our observations in building database applications over the Web. 3.
Reference: 12. <editor> The Java Virtual Machine Specification: T.Lindholm and F.Yellin, </editor> <publisher> Addison Wesley, </publisher> <year> 1997. </year>
Reference-contexts: Specifically, we make the following observations: 1. Web browsers are universal, making them the ideal client interface for all interactive applications, including database applications. This brings a much wider audience in direct contact with database systems. 2. Most browsers support the Java Virtual Machine <ref> [12] </ref>, which executes Java byte codes. Consequently, Java has become a desirable implementation language for clients. 3. Because of the large number of users with diverse needs, the importance of extensible database systems has increased.
Reference: 13. <editor> Implementing Multiple Protection Domains in Java: T.von Eicken, C.Hawblitzel, C.Chang and G.Czajkowski, </editor> <booktitle> Proceedings of the Usenix Annual Technical Conference, </booktitle> <month> June </month> <year> 1998. </year>
Reference-contexts: Thus, simple denial-of-service attacks (or inadvertent resource overconsumption) are possible. This is one of the issues currently being addressed in the J-Kernel project <ref> [13] </ref>. The third topic may initially appear to be a mundane implementation detail. However, we have realized that the UDF invocation mechanism (specifically, the parameter passing mechanism to a UDF) requires nontrivial design.
Reference: 14. <editor> Secure and Portable Database Extensibility: M.Godfrey,T.Mayr,P.Seshadri, and T.vonEicken, </editor> <booktitle> Proceedings of the ACM SIGMOD Conference on Management of Data, </booktitle> <year> 1998. </year>
Reference-contexts: What are the suitable interfaces that accomplish this location transparency? 4. What changes are needed to the database query optimizer to consider and cost the new query processing alternatives that involve migration between server and client. We have done initial work in exploring the first couple of issues <ref> [14] </ref>. While the obvious security mechanisms address the safety of memory accesses and control transfers, the memory, CPU, and I/O resource usage of individual extensions are difficult to monitor or police. Thus, simple denial-of-service attacks (or inadvertent resource overconsumption) are possible.
References-found: 14

