URL: http://bugle.cs.uiuc.edu/People/derose/Local_reports/svpablo_sbac.ps.gz
Refering-URL: http://bugle.cs.uiuc.edu/People/derose/pablo_publications.html
Root-URL: http://www.cs.uiuc.edu
Email: (derose@cs.uiuc.edu)  
Title: Performance Analysis Using SvPablo Esse tutorial descreve a interface integra o software de instrumenta~c~ao de
Author: Luiz De Rose grafica SvPablo que foi desenvolvida na cientficas. 
Note: Resumo  This work was supported in part by Army contract DABT63-91-K-0004.  
Address: Urbana, Illinois 61801, U.S.A.  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  University of Illinois para instrumenta~c~ao e visualiza~c~ao de desempenho de programas. SvPablo  
Abstract: In this tutorial we present SvPablo, a graphical source code browser and performance visualizer that integrates the University of Illinois Pablo project's dynamic performance instrumentation software with HPF and C compilers and with the MIPS R10000 hardware performance mechanism. The following topics will be covered in the tutorial: an introduction to the SvPablo environment, including an overview of the Self-Defining Data Format, used to store the performance files; the instrumentation and visualization of HPF and C programs; the integration with the MIPS R10000 hardware performance counters; and finally an experiment using a real life application running on an SGI Origin 2000, that demonstrates the usefulness of SvPablo for tuning application programs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Adve, V., Mellor-Crummey, J., Wang, J.-C., and Reed, D. </author> <title> Integrating Compilation and Performance Analysis for Data-Parallel Programs. </title> <booktitle> Proceedings of Supercomputing'95 (November 1995). </booktitle>
Reference-contexts: Thus, they must integrate dynamic performance data with information recorded by the compiler that describes the mapping from the high-level source to the resulting low-level, explicitly parallel code <ref> [1] </ref>. Furthermore, performance analysis becomes even harder due to the complexity of new parallel architectures, such as DSM architectures, which have multi-level memory hierarchies and exploit speculative execution through branch predictions.
Reference: [2] <author> Aydt, R. </author> <title> The Pablo Self-Defining Data Format. </title> <type> Tech. rep., </type> <institution> Department of Computer Science at the University of Illinois at Urbana-Champaign, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: Performance browsing is accomplished by correlating the performance data gathered at runtime with the source code, performing statistical analyses, and creating a performance file. This performance file, stored in the Pablo Self-Defining Data Format (SDDF) <ref> [2] </ref>, is used as input to the SvPablo tool which presents the performance information as it relates to the original source code. The Pablo SDDF is a performance data description language that specifies both data record structures and data record instances.
Reference: [3] <institution> MIPS Technologies Inc. Definition of MIPS R10000 Performance Counters, </institution> <year> 1996. </year> <note> http://www.sgi.com/MIPS/products/r10k/Perf Cnt/R10K PF Count.doc.html. </note>
Reference-contexts: SvPablo, derived from the phrase "Source view Pablo", integrates the University of Illinois Pablo project's dynamic performance instrumentation software with PGI HPF (pghpf) [5], the Portland Group's commercial HPF compiler, and the MIPS R10000 [4] hardware performance counters <ref> [3, 6] </ref>. In addition, using the same interface, SvPablo allows the interactive instrumentation of C programs, with ongoing work for the interactive instrumentation of Fortran 77 and Fortran 90 programs. The rest of this document briefly describe the topics that will be covered in the tutorial.
Reference: [4] <institution> MIPS Technologies Inc. </institution> <note> R10000 Microprocessor User's Manual, version 2.0 ed., Oc-tober 1996. http://www.sgi.com/MIPS/products/r10k/UMan V2.0/R10K UM.cv.html. </note>
Reference-contexts: SvPablo, derived from the phrase "Source view Pablo", integrates the University of Illinois Pablo project's dynamic performance instrumentation software with PGI HPF (pghpf) [5], the Portland Group's commercial HPF compiler, and the MIPS R10000 <ref> [4] </ref> hardware performance counters [3, 6]. In addition, using the same interface, SvPablo allows the interactive instrumentation of C programs, with ongoing work for the interactive instrumentation of Fortran 77 and Fortran 90 programs. The rest of this document briefly describe the topics that will be covered in the tutorial.
Reference: [5] <institution> The Portland Group, Inc. </institution> <note> PGHPF User's Guide, </note> <year> 1994. </year>
Reference-contexts: In this tutorial we will present SvPablo, a graphical user interface tool for instrumenting source code and browsing runtime performance data. SvPablo, derived from the phrase "Source view Pablo", integrates the University of Illinois Pablo project's dynamic performance instrumentation software with PGI HPF (pghpf) <ref> [5] </ref>, the Portland Group's commercial HPF compiler, and the MIPS R10000 [4] hardware performance counters [3, 6]. In addition, using the same interface, SvPablo allows the interactive instrumentation of C programs, with ongoing work for the interactive instrumentation of Fortran 77 and Fortran 90 programs.
Reference: [6] <author> Zagha, M., Larson, B., Turner, S., and Itzkowitz, M. </author> <title> Performance Analysis Using the MIPS R10000 Performance Counters. </title> <booktitle> Proceedings of Supercomputing'96 (November 1996). </booktitle>
Reference-contexts: SvPablo, derived from the phrase "Source view Pablo", integrates the University of Illinois Pablo project's dynamic performance instrumentation software with PGI HPF (pghpf) [5], the Portland Group's commercial HPF compiler, and the MIPS R10000 [4] hardware performance counters <ref> [3, 6] </ref>. In addition, using the same interface, SvPablo allows the interactive instrumentation of C programs, with ongoing work for the interactive instrumentation of Fortran 77 and Fortran 90 programs. The rest of this document briefly describe the topics that will be covered in the tutorial.
References-found: 6

