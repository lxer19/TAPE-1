URL: ftp://ftp.cs.unc.edu/pub/users/jeffay/papers/RTAS-95.ps.Z
Refering-URL: http://www.cs.unc.edu/Research/real-time.html
Root-URL: http://www.cs.unc.edu
Email: bollella,jeffay-@cs.unc.edu  
Title: SUPPORT FOR REAL-TIME COMPUTING WITHIN GENERAL PURPOSE OPERATING SYSTEMS Supporting CoResident Operating Systems  
Author: Gregory Bollella Kevin Jeffay 
Address: Chapel Hill, NC 27599-3175  
Affiliation: University of North Carolina at Chapel Hill Department of Computer Science  
Note: In: Proceedings of the IEEE Real-Time Technology and Applications Symposium, Chicago, IL, May 1995, pp. 4-14.  1 Introduction Supported in part by grants from the IBM and Intel Corporations.  
Abstract: Distributed multimedia applications are typical of a new class of workstation applications that require real-time communication and computation services to be effective. Unfortunately, there remains a wide gap between the development of real-time computing technology in the research community and the deployment of real-time solutions in commercial systems. In this work we explore technology for allowing two operating systems, a general purpose operating system and a predictable real-time kernel, to coexist on the same hardware. We discuss the problems of multiplexing shared devices and partitioning shared data structures to accommodate two operating systems, and present a CPU executive that allows the IBM Microkernel (a derivative of the Mach microkernel) with an OSF/1 server to coexist with a simple real-time kernel we have built. We also extend the traditional theory of scheduling periodic tasks on a uniprocessor to accommodate the case where a real-time kernel is allocated only a fraction of the total CPU capacity. Recent advances in highspeed networks, workstation processors, and digital audio and video acquisition/compression/display hardware have led to tremendous interest in the problems of supporting the real-time computation and communication requirements of distributed multimedia applications [1-7]. However, although much research has been performed on the design of real-time operating systems, and much is ongoing in the distributed multimedia domain, the vast majority of computers in use today use operating systems that provide no support for real-time computing beyond allowing tasks to manipulate their execution priority. Operating systems that (1) allow programs to specify their real-time performance requirements and (2) guarantee these requirements are met, have been, and are still, largely confined to academic and industrial research laboratories. To date there have been two identifiable approaches to marrying real-time and non-real-time technologies. First, there have been several attempts to add real-time features such as periodic tasks and priority-inversion-free inter-process communication mechanisms into existing general purpose operating systems such as Unix and Mach [1, 3, 4]. The second approach is to design a general purpose but dynamically configurable operating system kernel that is capable of accommodating user or application specific process, scheduling, and memory management modules [11]. Here we investigate a third approach: supporting co-resident operating systems. Our interest lies in developing a methodology for allowing existing, well-understood real-time systems technology to coexist with commercial, general purpose operating systems to support applications such as desktop multimedia conferencing. Thus our emphasis is not so much on the development of new real-time systems technology per se, but rather on developing a vehicle for the incorporation and use of existing technology in conventional desktop operating systems. Our approach is to partition the central processor and other system resources into two virtual machines a machine running a largely unmodified general purpose operating system and a machine running a real-time kernel and multiplex accesses to the physical hardware by the virtual machines. By allowing the coexistence of two operating systems, this approach allows a clean separation of concerns between the requirements and desired solutions for non-real-time, general purpose computing services and those for real-time services. If we are successful, one should be able to mix-and-match general purpose operating systems and real-time kernels to suit the needs of the system user. Our approach is based on a set of simple, small, executives that execute on the bare machine and allow a general purpose operating system and a real-time kernel to 
Abstract-found: 1
Intro-found: 1
References-found: 0

