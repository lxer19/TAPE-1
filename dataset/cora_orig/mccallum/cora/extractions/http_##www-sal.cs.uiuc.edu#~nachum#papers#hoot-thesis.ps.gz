URL: http://www-sal.cs.uiuc.edu/~nachum/papers/hoot-thesis.ps.gz
Refering-URL: http://sal.cs.uiuc.edu/~nachum/papers/
Root-URL: http://www.cs.uiuc.edu
Title: TERMINATION OF NON-SIMPLE REWRITE SYSTEMS  
Author: BY CHARLES GLEN HOOT 
Degree: THESIS Submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy in Computer Science in the Graduate College of the  
Date: 1985  
Address: San Diego, 1982 M.A., Princeton University,  1996 Urbana, Illinois  
Affiliation: B.A., University of California,  University of Illinois at Urbana-Champaign,  
Abstract-found: 0
Intro-found: 1
Reference: [ BD94 ] <author> Leo Bachmair and Nachum Dershowitz. </author> <title> Equational inference, canonical proofs, and proof orderings. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 41(2) </volume> <pages> 236-276, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: But one must ensure that the semantics are consistent with the rules (which is analogous to showing that f (x) = x is a fix point of the definition). This can be done using standard rewriting techniques ("proof by consistency"; see Bachmair and Dershowitz <ref> [BD94] </ref>).
Reference: [ Bit93 ] <author> Elias Tahhan Bittar. </author> <title> Non erasing, right linear, orthogonal term rewrite systems application to Zantema's problem. </title> <type> Technical Report RR 2202, </type> <institution> INRIA, </institution> <year> 1993. </year>
Reference-contexts: Other solutions to this problem are due to Geser [Ges93] and Bittar <ref> [Bit93] </ref>. See also McNaughton [McN94] who considers termination of semi-Thue systems such as this example. 72 9 FORWARD CLOSURES AND COMPLETION In the following chapter an application of forward closures for determining if a rewrite system terminates is examined.
Reference: [ CL87 ] <author> Ahlem Ben Cherifa and Pierre Lescanne. </author> <title> Termination of rewriting systems by polynomial interpretations and its implementation. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 9(2) </volume> <pages> 137-159, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: In cases where the code cannot make a determination, it will query the user for an authoritative answer. The part of the code that does this testing could be upgraded to provide heuristics such as those described in Lankford [Lan79], Ben Cherifa and Lescanne <ref> [CL87] </ref>, or Steinbach and Zehnter [SZ90]. 106 Forward closures provide a more specialized method for showing termination, applicable to locally-confluent overlaying or right-linear systems. Special cases of interest are orthogonal and string rewrite systems which are terminating whenever their forward closures are.
Reference: [ Dau89 ] <author> M. Dauchet. </author> <title> Simulation of Turing machines by a left-linear rewrite rule. </title> <editor> In N. Der-showitz, editor, </editor> <booktitle> Proceedings of the Third International Conference on Rewriting Techniques and Applications (Chapel Hill, NC), volume 355 of Lecture Notes in Computer Science, </booktitle> <pages> pages 109-120, </pages> <address> Berlin, April 1989. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The proof that this demonstrates non-termination is trivial. One should note that even if the rewrite system consists of a single rule, there is no general method for showing termination, since one is able to simulate a Turing machine with a single rule <ref> [Dau89] </ref>. The non-decidability of the halting problem for a Turing machine then corresponds to the non-decidability of termination of rewrite systems. But even for a single left-linear, right-linear, non-erasing, non-overlapping, overlaying rule with unary function symbols, Purdom's 76 method may not discover non-termination.
Reference: [ Der81 ] <author> Nachum Dershowitz. </author> <title> Termination of linear rewriting systems. </title> <booktitle> In Proceedings of the Eighth International Colloquium on Automata, Languages and Programming (Acre, Israel), volume 115 of Lecture Notes in Computer Science, </booktitle> <pages> pages 448-458, </pages> <address> Berlin, </address> <month> July </month> <year> 1981. </year> <booktitle> European Association of Theoretical Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The well-founded general path ordering is shown to be a well-founded quasi ordering and the conditions under which it can be applied are presented. Finally, comparisons are made between the two general path orderings. One under-used approach to termination is the use of restricted derivations <ref> [Der81; GKM83; Geu89] </ref>. The forward closures of a given rewrite system are an inductively defined set of derivations. The basic idea is to only consider derivations in which application of rules is in that part of a term created by previous rewrites. <p> The forward closure f ssx ! sf psf sx ! sf pssf psf x is innermost, but not outermost. Proposition 36 (Dershowitz <ref> [Der81] </ref>). A right-linear rewrite system is terminating if, and only if, there are no infinite forward closures. In particular, forward closures suffice for string-rewriting systems. <p> Proposition 37 (Geupel [Geu89]). A non-overlapping rewrite system is terminating if, and only if, there are no infinite forward closures. This improves the result in <ref> [Der81] </ref> for orthogonal systems. In general, though, a rewrite system need not terminate even if all its forward closures do [Der81]. <p> Proposition 37 (Geupel [Geu89]). A non-overlapping rewrite system is terminating if, and only if, there are no infinite forward closures. This improves the result in <ref> [Der81] </ref> for orthogonal systems. In general, though, a rewrite system need not terminate even if all its forward closures do [Der81]. <p> More recently, it has been shown that this problem has a polynomial time algorithm [GNP + 93]. Alternately, to show decidability, one can employ forward closures <ref> [Der81] </ref>. Each of the forward closures must start from the left-hand side of one of the rules. Consider the forward closures resulting from some left-hand side l i . If that left-hand side is ever replicated, the rewrite system is non-terminating.
Reference: [ Der82 ] <author> Nachum Dershowitz. </author> <title> Orderings for term-rewriting systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 17(3) </volume> <pages> 279-301, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: Syntactic "path" orderings (see Dershowitz [Der87]) work in this case, too. Lipton and Snyder [LS77] gave a particular method for proving termination with interpretations (order-isomorphic to !) for which rules are "value-preserving", as this example is for the natural interpretation. Virtually all orderings used in practice are simplification orderings <ref> [Der82] </ref>, satisfying the replacement property, that s t implies that any term containing s as a subterm is at least as large (under ) as the same term with s replaced by t, and the subterm property, that any term containing s is at least as large as s. <p> Simplification orderings are surveyed by Steinbach 1 [Ste89]; their well-foundedness is a consequence of Kruskal's Tree Theorem. (See Dershowitz <ref> [Der82] </ref>.) A non-simple rewrite system (such as f f x ! f gf x) is one for which no simplification ordering will show termination. <p> Another class of simplification orderings, the path orderings were introduced around 1980. Plaisted in [Par78] defined the simple path ordering which mapped a term t to multiset of paths in the term. The recursive path ordering introduced in Dershowitz <ref> [Der82] </ref>, is based on the idea that a term u should be bigger than any term that is built from smaller terms, all held together by a structure of function symbols that are smaller in some precedence ordering than the root symbol of u. <p> In other words, one requires that consistently replacing function symbols in two terms with others of the same arity and with the same relative ordering has no effect on the ordering of the two. The recursive path orderings <ref> [Der82; KL80; Les90] </ref> are syntactic; the Knuth-Bendix and polynomial orderings are not. <p> Such an ordering can be used to prove the termination of a rewrite relation, by showing that the rewrite relation embeds within the well-founded ordering (and thus that every rewrite step shows a decrease within the ordering). Virtually all orderings used in practice are simplification orderings <ref> [Der82] </ref>, satisfying * the replacement property, that s t implies that any term containing s as a subterm is at least as large (under ) as the same term with s replaced by t, and * the subterm property, that any term containing s is at least as large as s. <p> This was shown by Kruskal in [Kru54] and [Kru60]. The special case where each of the function symbols is of fixed arity was shown earlier by Higman in [Hig52]. Proposition 2. If a finite rewrite system is non-terminating, then it is self-embedding. Proof. This is due to Dershowitz in <ref> [Der82] </ref>. If the rewrite system R does not terminate then there must be an infinite derivation. Since there are only a finite number of function symbols, by Proposition 1 there must two terms t i and t j such that t i fi t j and i &lt; j. <p> Proposition 3. Given a rewrite system R and two terms t and s such that t is homeomorphi-cally embedded in s (t fi s) and t ! s, R can not be shown terminating by any simplification ordering. A simplification ordering extends the the relation fl <ref> [Der82] </ref>. Thus, in the simplification ordering s t and the derivation can not be shown to terminating. 2.3 Quasi-Orderings This section reviews quasi-orderings. It contains several Propositions that will be used later in the thesis. <p> Size and weight are strictly monotonic; depth is monotonic. A simple example of a precedence uses the ordering + &gt; s &gt; 0 with + = x:"+", s = x:"s", and 0 = x:"0". (The subterm property is guaranteed for strictly monotonic homomorphisms into well-ordered sets <ref> [Der82] </ref>.) An example of a multiset component ordering is = R 1 ; it extracts the maximal immediate subterms in . Another example is = P f1g which gives the leftmost subterm. Definition 7 (Well-Quasi General Path Ordering). <p> Multiset path ordering (the original version of the "recursive path ordering", Dershowitz <ref> [Der82] </ref>) 0 is a precedence; 1 extracts the multiset of immediate subterms. 28 Extended path ordering (Dershowitz [Der82]) 0 extracts one of the immediate subterms; 1 extracts a multiset of the remaining immediate subterms. <p> Multiset path ordering (the original version of the "recursive path ordering", Dershowitz <ref> [Der82] </ref>) 0 is a precedence; 1 extracts the multiset of immediate subterms. 28 Extended path ordering (Dershowitz [Der82]) 0 extracts one of the immediate subterms; 1 extracts a multiset of the remaining immediate subterms. Lexicographic path ordering (Kamin and Levy [KL80]) 0 is a precedence; 1 ; : : :; n give a permutation of the subterms. <p> For this ordering, one must separately insure that s ! t implies s 0 t. Indeed any terminating system can be (uninterestingly) proven terminating in this way [KL80], by taking 0 to be the reflexive-transitive closure of !. Extended Knuth-Bendix ordering (Dershowitz <ref> [Der82] </ref>, Steinbach and Zehnter [SZ90]) 0 is a monotonic interpretation; 1 is a precedence; 2 ; : : : ; n+1 give the subterms in order, permuted, or multisets of immediate subterms, depending on the function symbol. <p> One way to attempt to deal with this problem is to use a path ordering (typically the recursive path ordering <ref> [Der82] </ref> seen 73 in Section 5.1) which is only partially specified. When two terms are encountered which are incomparable, the completion process presents the user with extensions to the ordering (if they exist) which will orient the pair.
Reference: [ Der87 ] <author> Nachum Dershowitz. </author> <title> Termination of rewriting. </title> <journal> J. Symbolic Computation, </journal> 3(1&2):69-115, February/April 1987. Corrigendum: <volume> 4, </volume> 3 (December 1987), <pages> 409-410; </pages> reprinted in Rewriting Techniques and Applications, J.-P. Jouannaud, ed., pp. 69|115, Academic Press, 1987. 
Reference-contexts: The use, in particular, of polynomial interpretations which map terms into the natural numbers was developed by Lankford [Lan79]. For a survey of termination methods, see Dershowitz <ref> [Der87] </ref>. The rule x fi (y + z) ! (x fi y) + (x fi z) (1.1) is terminating. This can be shown by interpreting fi as multiplication, + as xy:x + y + 1, and constants as 2. <p> It can also be proved terminating by considering the multiset of "natural" interpretations of all products in a term, letting + and fi stand for addition and multiplication, and assigning some fixed value to constants; see Dershowitz and Manna [DM79] for similar examples. Syntactic "path" orderings (see Dershowitz <ref> [Der87] </ref>) work in this case, too. Lipton and Snyder [LS77] gave a particular method for proving termination with interpretations (order-isomorphic to !) for which rules are "value-preserving", as this example is for the natural interpretation. <p> The notion of path ordering was extended by Kamin and Levy [KL80] to compare subterms lexicographically and to allow for a semantic component; see Dershowitz <ref> [Der87] </ref>. In the thesis quasi-orderings (reflexive-transitive binary relations), rather than partial or-derings, are used to prove termination of rewrite systems. If ~ is a quasi-ordering and ~ is its inverse, then its strict part ( ~ ~ ) is a partial order. <p> In particular, it must be that t (x) &gt; t (px) for all x satisfying the condition in the last rule. For that, one must first characterize those x such that pos? x rewrites to true. This is in contrast to the unconditional case <ref> [Der87] </ref>, in which termination can usually be separated from other aspects of correctness. In the following examples, a value preserving homomorphism will be used when showing termination. The value preserving homomorphism is exploited by the joinability condition.
Reference: [ Der95 ] <author> Nachum Dershowitz. </author> <title> 33 examples of termination. </title> <editor> In H. Comon and J.-P. Jouannaud, editors, </editor> <booktitle> French Spring School of Theoretical Computer Science Advanced Course on 120 Term Rewriting (Font Romeux, </booktitle> <address> France, </address> <month> May </month> <year> 1993), </year> <booktitle> volume 909 of Lecture Notes in Computer Science, </booktitle> <pages> pages 16-26, </pages> <address> Berlin, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Therefore, the rewrite system terminates for terms made from those symbols. It is well known that if one can show termination of a rewrite system for a given alphabet, it is also terminating for extensions of that alphabet that do not include any symbols in the rules <ref> [Der95] </ref>. Therefore the above rewrite system terminates in general. Other commonly used well-founded orderings used to prove termination are total. In this case, as well, the ordering is a well-quasi ordering.
Reference: [ DH95 ] <author> Nachum Dershowitz and Charles Hoot. </author> <title> Natural termination. </title> <journal> Theoretical Computer Science, </journal> <volume> 142 </volume> <pages> 170-207, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: Let T be a set of variable-free terms (over some alphabet). A component order = h; i consists of a termination function : T ! A, from terms to an algebra A along with an associated well-quasi-ordering over A. 1 The definition of the general path ordering given in <ref> [DH95] </ref> is a little different. <p> As specified above, the corresponding well-founded component ordering is the usual greater-than for natural numbers. The proof of termination proceeds with no difficulties. 43 7 THE WELL-FOUNDED GPO In <ref> [DH95] </ref> a slightly different version of the general path ordering was presented. <p> To avoid confusion in this thesis, the "general path ordering" presented in <ref> [DH95] </ref> is referred to as the well-founded general path ordering and and symbolically the ordering will be denoted with a dot as shown here by ~ and . <p> The consequence of this is that the proof of Specific Termination in <ref> [DH95] </ref> does not apply to the well-founded general path ordering. <p> the well-founded general path ordering, but are ordered by the well-quasi general path ordering. 7.7 Reconciling Well-Quasi and Well-founded General Path Orderings One question that will remain unanswered in this paper is whether one must require that the component orderings be well-quasi-orderings (i.e., whether Theorem 3 (Special Termination) in the <ref> [DH95] </ref> is in fact true, if not proven so.) While this chapter shows that for many common cases it will be true, there is no guarantee.
Reference: [ DJ90 ] <author> Nachum Dershowitz and Jean-Pierre Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Methods and Semantics, chapter 6, </booktitle> <pages> pages 243-320. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: The theory of rewriting is an outgrowth of the study of the lambda calculus and combinatory logic, and has important applications in abstract data type specifications, functional programming, symbolic computation, and automated deduction. For surveys of the theory of rewriting, see Dershowitz and Jouannaud <ref> [DJ90] </ref>, Klop [Klo92] and Plaisted [Pla93b]. If no infinite sequences of rewrites are possible, a rewrite system is said to have the termination property. In practice, one usually guarantees termination by devising a well-founded (strict partial) ordering such that s t whenever s rewrites to t (written, s ! t). <p> Useful results are presented for well-quasi orderings. 2.1 Terminology The following notation, definitions, and propositions are reasonably standard and usually conform with those presented by Dershowitz and Jouannaud in <ref> [DJ90] </ref>. 2.1.1 Terms Terms are constructed recursively from a set of function symbols F and a set of variables X . Each function symbol f 2 F has an arity which is the number of subterms that the function f has.
Reference: [ DM79 ] <author> Nachum Dershowitz and Zohar Manna. </author> <title> Proving termination with multiset order-ings. </title> <journal> Communications of the ACM, </journal> <volume> 22(8) </volume> <pages> 465-476, </pages> <month> August </month> <year> 1979. </year>
Reference-contexts: It can also be proved terminating by considering the multiset of "natural" interpretations of all products in a term, letting + and fi stand for addition and multiplication, and assigning some fixed value to constants; see Dershowitz and Manna <ref> [DM79] </ref> for similar examples. Syntactic "path" orderings (see Dershowitz [Der87]) work in this case, too. Lipton and Snyder [LS77] gave a particular method for proving termination with interpretations (order-isomorphic to !) for which rules are "value-preserving", as this example is for the natural interpretation. <p> the immediate subterms of rank k, R k (I (t)), or 3. a multiset whose elements are the immediate subterms of rank k or less (R k (I (t)) = S k and is the multiset ordering ~ M induced by a well-quasi-ordering ~ on terms. (See Dershowitz and Manna <ref> [DM79] </ref> for more on multiset orderings.) Simple examples of homomorphisms from terms to the natural numbers are size (number of function symbols, including constants), depth (maximum nesting of function symbols), and weight (sum of weights of function symbols). Size and weight are strictly monotonic; depth is monotonic.
Reference: [ Ges93 ] <author> Alfons Geser. </author> <title> A solution to zantema's problem. </title> <type> Technical Report MIP-9314, </type> <institution> Uni-versitat Passau, Passau, Germany, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Other solutions to this problem are due to Geser <ref> [Ges93] </ref> and Bittar [Bit93]. See also McNaughton [McN94] who considers termination of semi-Thue systems such as this example. 72 9 FORWARD CLOSURES AND COMPLETION In the following chapter an application of forward closures for determining if a rewrite system terminates is examined.
Reference: [ Ges94 ] <author> Alfons Geser. </author> <title> An improved general path order. </title> <type> Technical Report MIP-9407, </type> <institution> Uni-versitat Passau, Passau, Germany, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: It can be applied in situations in which the more familiar simplification order-ings cannot, as when the rewrite system is self-embedding. It encompasses virtually all popular methods, including polynomial (and other) interpretations, the Knuth-Bendix ordering and its extensions, and the recursive path orderings and its variants. Geser <ref> [Ges94] </ref> has suggested a weakening of the subterm conditions, thereby strengthening the general path ordering. Two versions of the general path ordering were presented in this thesis. One requires that the component orderings be well-founded quasi-orderings.
Reference: [ Geu89 ] <author> Oliver Geupel. </author> <title> Overlap closures and termination of term rewriting systems. </title> <type> Report MIP-8922, </type> <institution> Universitat Passau, Passau, West Germany, </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: The well-founded general path ordering is shown to be a well-founded quasi ordering and the conditions under which it can be applied are presented. Finally, comparisons are made between the two general path orderings. One under-used approach to termination is the use of restricted derivations <ref> [Der81; GKM83; Geu89] </ref>. The forward closures of a given rewrite system are an inductively defined set of derivations. The basic idea is to only consider derivations in which application of rules is in that part of a term created by previous rewrites. <p> An innermost derivation is one in which the redex chosen at every rewrite step contains no rewritable proper subterm. In particular, orthogonal systems are locally confluent and have no (non-trivial) overlays; the proposition for this case was shown by O'Donnell [O'D77]. Geupel <ref> [Geu89] </ref> showed that left-linearity is unnecessary, that is, a non-overlapping system is terminating if, and only if, innermost rewriting always leads to a normal form. An alternate proof to the one in [Gra92] is presented. (See also Middeldorp [Mid94].) It is similar in style to Geupel's proof [Geu89] that forward closures <p> Geupel <ref> [Geu89] </ref> showed that left-linearity is unnecessary, that is, a non-overlapping system is terminating if, and only if, innermost rewriting always leads to a normal form. An alternate proof to the one in [Gra92] is presented. (See also Middeldorp [Mid94].) It is similar in style to Geupel's proof [Geu89] that forward closures suffice for showing termination of non-overlapping rewrite systems. Proof. <p> Proposition 37 (Geupel <ref> [Geu89] </ref>). A non-overlapping rewrite system is terminating if, and only if, there are no infinite forward closures. This improves the result in [Der81] for orthogonal systems. In general, though, a rewrite system need not terminate even if all its forward closures do [Der81].
Reference: [ GKM83 ] <author> John V. Guttag, Deepak Kapur, and David R. Musser. </author> <title> On proving uniform termination and restricted termination of rewriting systems. </title> <journal> SIAM J. on Computing, </journal> <volume> 12(1) </volume> <pages> 189-214, </pages> <month> February </month> <year> 1983. </year>
Reference-contexts: The well-founded general path ordering is shown to be a well-founded quasi ordering and the conditions under which it can be applied are presented. Finally, comparisons are made between the two general path orderings. One under-used approach to termination is the use of restricted derivations <ref> [Der81; GKM83; Geu89] </ref>. The forward closures of a given rewrite system are an inductively defined set of derivations. The basic idea is to only consider derivations in which application of rules is in that part of a term created by previous rewrites.
Reference: [ GNP + 93 ] <author> Jean Gallier, Paliath Narendran, David Plaisted, Stan Raatz, and Wayne Snyder. </author> <title> An algorithm for finding canonical sets of ground rewrite rules in polynomial time. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 40(1) </volume> <pages> 1-16, </pages> <year> 1993. </year>
Reference-contexts: More recently, it has been shown that this problem has a polynomial time algorithm <ref> [GNP + 93] </ref>. Alternately, to show decidability, one can employ forward closures [Der81]. Each of the forward closures must start from the left-hand side of one of the rules. Consider the forward closures resulting from some left-hand side l i .
Reference: [ Gra92 ] <author> Bernhard Gramlich. </author> <title> Relating innermost, weak, uniform and modular termination of term rewriting systems. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Proceedings of the Conference on Logic Programming and Automated Reasoning (St. Petersburg, Russia), volume 624 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 285-296, </pages> <address> Berlin, July 1992. </address> <publisher> Springer-Verlag. </publisher> <pages> 121 </pages>
Reference-contexts: Proposition 35 (Gramlich <ref> [Gra92] </ref>). A locally confluent overlaying system is terminating if, and only if, innermost rewriting always leads to a normal form. An innermost derivation is one in which the redex chosen at every rewrite step contains no rewritable proper subterm. <p> Geupel [Geu89] showed that left-linearity is unnecessary, that is, a non-overlapping system is terminating if, and only if, innermost rewriting always leads to a normal form. An alternate proof to the one in <ref> [Gra92] </ref> is presented. (See also Middeldorp [Mid94].) It is similar in style to Geupel's proof [Geu89] that forward closures suffice for showing termination of non-overlapping rewrite systems. Proof.
Reference: [ Gra93 ] <author> Bernhard Gramlich. </author> <title> On termination, innermost termination and completeness of heirarchically structured rewrite systems. </title> <type> Technical Report SR-93-09, SEKI, </type> <institution> Uni-versitat Kaiserslautern, </institution> <year> 1993. </year>
Reference-contexts: For a different proof of this see Gramlich <ref> [Gra93] </ref>. Theorem 54. If R 1 and R 2 are rewrite systems which only share constructors and are innermost terminating, then their union is also innermost terminating Proof. Since both R 1 and R 2 are innermost terminating their innermost forward closures are also innermost terminating.
Reference: [ Gra94 ] <author> Bernhard Gramlich. </author> <type> personal communication, </type> <year> 1994. </year>
Reference-contexts: The following generalizes Proposition 42. Theorem 44. A non-erasing non-overlapping system is terminating if, and only if, it is normalizing. This is a corollary of Lemma 43. Gramlich <ref> [Gra94] </ref> gives an independent proof of this. Theorem 45. A non-erasing non-overlapping system is terminating if, and only if, no right-hand side of an arbitrary strategy basic forward closure initiates an infinite derivation.
Reference: [ Hig52 ] <author> Graham Higman. </author> <title> Ordering by divisibility in abstract algebras. </title> <booktitle> Proceedings of the London Mathematical Society (3), </booktitle> <volume> 2(7) </volume> <pages> 326-336, </pages> <month> September </month> <year> 1952. </year>
Reference-contexts: This was shown by Kruskal in [Kru54] and [Kru60]. The special case where each of the function symbols is of fixed arity was shown earlier by Higman in <ref> [Hig52] </ref>. Proposition 2. If a finite rewrite system is non-terminating, then it is self-embedding. Proof. This is due to Dershowitz in [Der82]. If the rewrite system R does not terminate then there must be an infinite derivation. <p> Proposition 6 (Higman's Lemma). An embedding relation ffi ~ defined on the set of finite sequences S fl over the set S is well-quasi ordered if, and only if, the ordering ~ is a well-quasi ordering over S. This was shown by Higman in <ref> [Hig52] </ref> and shows that the embedding relation preserves the well-quasi ordering. The proof proceeds by a minimal counter example. Proposition 7. If ~ is a well-quasi-ordering over S, the extension of ~ to multi-sets ~ M is also a well-quasi-ordering. Proof.
Reference: [ HL78 ] <author> Gerard Huet and Dallas S. Lankford. </author> <title> On the uniform halting problem for term rewriting systems. </title> <institution> Rapport laboria 283, Institut de Recherche en Informatique et en Automatique, Le Chesnay, France, </institution> <month> March </month> <year> 1978. </year>
Reference-contexts: 87 The next approximation is: a ! b f (a; b) ! g (a) f (b; b) ! g (b) f (a; g (b)) ! g (a) f (g (a); f (a; a)) ! g (g (a)) (9.34) Huet and Lankford showed that termination is decidable for ground rewrite systems <ref> [HL78] </ref>. More recently, it has been shown that this problem has a polynomial time algorithm [GNP + 93]. Alternately, to show decidability, one can employ forward closures [Der81]. Each of the forward closures must start from the left-hand side of one of the rules.
Reference: [ HR86 ] <author> Jieh Hsiang and Michael Rusinowitch. </author> <title> A new method for establishing refutational completeness in theorem proving. </title> <editor> In J. H. Siekmann, editor, </editor> <booktitle> Proceedings of the Eighth International Conference on Automated Deduction (Oxford, England), volume 230 of Lecture Notes in Computer Science, </booktitle> <pages> pages 141-152, </pages> <address> Berlin, July 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: A modification of the above allows pairs of terms which can not be ordered to be kept as an equation and applied in either direction, provided that for the particular instance there is a decrease based on the ordering <ref> [HR86] </ref>. One can view the completion process as a search through orientations of the equations, where one is looking for a rewrite system which is * terminating, * locally confluent, and * finite.
Reference: [ KB70 ] <author> Donald E. Knuth and P. B. Bendix. </author> <title> Simple word problems in universal algebras. </title> <editor> In J. Leech, editor, </editor> <booktitle> Computational Problems in Abstract Algebra, </booktitle> <pages> pages 263-297. </pages> <publisher> Pergamon Press, Oxford, </publisher> <editor> U. K., </editor> <booktitle> 1970. Reprinted in Automation of Reasoning 2, </booktitle> <publisher> Springer-Verlag, Berlin, </publisher> <pages> pp. </pages> <month> 342-376 </month> <year> (1983). </year>
Reference-contexts: Simplification orderings are surveyed by Steinbach 1 [Ste89]; their well-foundedness is a consequence of Kruskal's Tree Theorem. (See Dershowitz [Der82].) A non-simple rewrite system (such as f f x ! f gf x) is one for which no simplification ordering will show termination. Knuth and Bendix <ref> [KB70] </ref> designed a particular class of well-orderings which assigns a weight to a term that is the sum of the weights of its constituent function symbols. Terms of equal weight and headed by the same symbol have their subterms compared lexicographically. <p> For the other orderings, as long as the signature of the rewrite system is finite, one can restrict the precedence to those symbols and it will be well-quasi-ordered. Therefore, they can then be applied to any finite rewrite system. Knuth-Bendix ordering (Knuth and Bendix <ref> [KB70] </ref>) 0 gives the sum of (non-negative integer) "weights" of the function symbols appearing in a term; 0 is the ordering on the natural numbers; 1 gives a (total) precedence; 2 ; : : : ; n+1 give (a permutation of) the immediate subterms. <p> It is considered in the context of completion of an equational theory. One particular viewpoint of completion is as a search over rule orientations via an ordering. In this approach the ordering is replaced by a non-termination test. 9.1 Completion as Search In the classical Knuth-Bendix completion process <ref> [KB70] </ref>, one starts with a set of equations. Before beginning an ordering is chosen. Equations are oriented into rewrite rules via the ordering (typically one at a time). Critical pairs are computed for the rewrite rules, and any which are not joinable are added to the set of equations.
Reference: [ KL80 ] <author> Sam Kamin and Jean-Jacques Levy. </author> <title> Two generalizations of the recursive path ordering. Unpublished note, </title> <institution> Department of Computer Science, University of Illinois, Urbana, IL, </institution> <month> February </month> <year> 1980. </year>
Reference-contexts: The notion of path ordering was extended by Kamin and Levy <ref> [KL80] </ref> to compare subterms lexicographically and to allow for a semantic component; see Dershowitz [Der87]. In the thesis quasi-orderings (reflexive-transitive binary relations), rather than partial or-derings, are used to prove termination of rewrite systems. <p> In other words, one requires that consistently replacing function symbols in two terms with others of the same arity and with the same relative ordering has no effect on the ordering of the two. The recursive path orderings <ref> [Der82; KL80; Les90] </ref> are syntactic; the Knuth-Bendix and polynomial orderings are not. <p> For example, consider the following contrived system for computing factorial in unary arithmetic (expanding on one 2 in Kamin and Levy <ref> [KL80] </ref>): p (s (x)) ! x f act (s (x)) ! s (x) fi f act (p (s (x))) s (x) fi y ! (x fi y) + y x + s (y) ! s (x + y) : It would be nice to be able to use a natural interpretation, <p> In combination with s t, it must be that R k (IS (u)) ~ R k (IS (v)). Whereas only lexicographic and multiset mappings are used in the general path orderings, in <ref> [KL80] </ref>, Kamin and Levy consider the more general case of orderings based on a mapping fl from well-founded quasi-orderings to well-founded quasi-orderings. They allow a component order t = ht 1 ; : : : ; t n i and =fl, where fl recursively makes finitely many comparisons of subterms. <p> Lexicographic path ordering (Kamin and Levy <ref> [KL80] </ref>) 0 is a precedence; 1 ; : : :; n give a permutation of the subterms. <p> Value-preserving path ordering (Plaisted [Pla79], Kamin and Levy <ref> [KL80] </ref>) is a value-preserving homomorphism and is a well-founded quasi-order; 0 is a precedence; 1 is applied to the first subterm and 1 is ; 2 is applied to the second subterm and 2 is ; and so forth. <p> The ordering interleaves precedences with recursive comparisons of subterms and thus is unlike either the semantic path ordering <ref> [KL80] </ref> or semantic labeling [Zan92b]. No semantic interpretation of the function symbols is required to prove termination in this example. If one were to use an ordering just based on the precedence 2 , all of the rules except for the sixth would be oriented in the appropriate direction. <p> ordering, will now also be applicable to rewrite systems with an infinite signature. 51 In addition, the following three path orderings are covered. (They are not covered by the Well-Quasi General Path Ordering since they use component orderings that are well-founded, but not well-quasi-orderings.) Semantic path ordering (Kamin and Levy <ref> [KL80] </ref>) 0 is the identity homomorphism; 0 is a well-founded ordering; 1 ; : : : ; n give a permutation of the subterms. For this ordering, one must separately insure that s ! t implies s 0 t. <p> For this ordering, one must separately insure that s ! t implies s 0 t. Indeed any terminating system can be (uninterestingly) proven terminating in this way <ref> [KL80] </ref>, by taking 0 to be the reflexive-transitive closure of !. <p> The next special case is not a simplification ordering, but the conditions of Theorem 20 hold for it as well. Value-preserving path ordering (Plaisted [Pla79], Kamin and Levy <ref> [KL80] </ref>) is a value-preserving homomorphism and is a well-founded quasi-order; 0 is a precedence; 1 is applied to the first subterm and 1 is ; 2 is applied to the second subterm and 2 is ; and so forth.
Reference: [ Klo92 ] <author> Jan Willem Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 2, chapter 1, </volume> <pages> pages 1-117. </pages> <publisher> Oxford University Press, Oxford, </publisher> <year> 1992. </year>
Reference-contexts: The theory of rewriting is an outgrowth of the study of the lambda calculus and combinatory logic, and has important applications in abstract data type specifications, functional programming, symbolic computation, and automated deduction. For surveys of the theory of rewriting, see Dershowitz and Jouannaud [DJ90], Klop <ref> [Klo92] </ref> and Plaisted [Pla93b]. If no infinite sequences of rewrites are possible, a rewrite system is said to have the termination property. In practice, one usually guarantees termination by devising a well-founded (strict partial) ordering such that s t whenever s rewrites to t (written, s ! t).
Reference: [ KMNS88 ] <author> Deepak Kapur, David Musser, Paliath Narendran, and Jonathan Stillman. </author> <title> Semi-unification. </title> <editor> In G. Goos and J. Harmanis, editors, </editor> <booktitle> Foundation of Software Technology and Theoretical Computer Science, 8th Conference, (Pune, India), Lecture Notes in Computer Science, </booktitle> <address> Berlin, </address> <month> December </month> <year> 1988. </year> <note> Springer-Verlag. 122 </note>
Reference-contexts: The presence of certain kinds of rules in a rewrite system have no effect in determining the outcome of MSP. In particular, collapsing rules can not contribute usefully to a non terminating derivation. 3. MSP requires the use of semi-unification. While work has been done in <ref> [KMNS88] </ref> to improve the efficiency of the decidability of semi-unification to polynomial time, it is still desirable to avoid its use if possible.
Reference: [ Kru54 ] <author> Joseph B. Kruskal. </author> <title> The theory of well-partially-ordered sets. </title> <type> PhD thesis, </type> <institution> Princeton, NJ, </institution> <month> June </month> <year> 1954. </year> <type> Ph.D. thesis. </type>
Reference-contexts: This was shown by Kruskal in <ref> [Kru54] </ref> and [Kru60]. The special case where each of the function symbols is of fixed arity was shown earlier by Higman in [Hig52]. Proposition 2. If a finite rewrite system is non-terminating, then it is self-embedding. Proof. This is due to Dershowitz in [Der82].
Reference: [ Kru60 ] <author> Joseph B. Kruskal. </author> <title> Well-quasi-ordering, the Tree Theorem, and Vazsonyi's conjecture. </title> <journal> Transactions of the American Mathematical Society, </journal> <volume> 95 </volume> <pages> 210-225, </pages> <month> May </month> <year> 1960. </year>
Reference-contexts: Simplification orderings are surveyed by Steinbach [Ste89]; their well-foundedness is a conse quence of Kruskal's Tree Theorem <ref> [Kru60] </ref>. Definition 1. <p> This was shown by Kruskal in [Kru54] and <ref> [Kru60] </ref>. The special case where each of the function symbols is of fixed arity was shown earlier by Higman in [Hig52]. Proposition 2. If a finite rewrite system is non-terminating, then it is self-embedding. Proof. This is due to Dershowitz in [Der82]. <p> This definition was first proposed by Kruskal in <ref> [Kru60] </ref>. Any well-quasi-ordering must also be well-founded. In addition, there can not be an infinite number of incomparable elements. For a history of well-quasi orderings and a survey of their uses, see [Kru72]. Proposition 4.
Reference: [ Kru72 ] <author> Joseph B. Kruskal. </author> <title> The theory of well-quasi-ordering: A frequently discovered concept. </title> <journal> J. Combinatorial Theory Ser. A, </journal> <volume> 13(3) </volume> <pages> 297-305, </pages> <month> November </month> <year> 1972. </year>
Reference-contexts: This definition was first proposed by Kruskal in [Kru60]. Any well-quasi-ordering must also be well-founded. In addition, there can not be an infinite number of incomparable elements. For a history of well-quasi orderings and a survey of their uses, see <ref> [Kru72] </ref>. Proposition 4.
Reference: [ Lan79 ] <author> Dallas S. Lankford. </author> <title> On proving term rewriting systems are Noetherian. </title> <institution> Memo MTP-3, Mathematics Department, Louisiana Tech. University, Ruston, LA, </institution> <month> May </month> <year> 1979. </year> <note> Revised October 1979. </note>
Reference-contexts: As suggested by Manna and Ness [MN70], it is often convenient to express reduction orderings as a homomorphism from terms to an algebra equipped with a well-founded ordering. The use, in particular, of polynomial interpretations which map terms into the natural numbers was developed by Lankford <ref> [Lan79] </ref>. For a survey of termination methods, see Dershowitz [Der87]. The rule x fi (y + z) ! (x fi y) + (x fi z) (1.1) is terminating. This can be shown by interpreting fi as multiplication, + as xy:x + y + 1, and constants as 2. <p> Polynomial path ordering (Lankford <ref> [Lan79] </ref>) 0 is a strict monotonic homomorphism with each f a polynomial with positive integer coefficients; 0 is the ordering on the natural numbers; 1 gives a precedence; 2 ; : : : ; n+1 give a permutation of the immediate subterms. <p> In cases where the code cannot make a determination, it will query the user for an authoritative answer. The part of the code that does this testing could be upgraded to provide heuristics such as those described in Lankford <ref> [Lan79] </ref>, Ben Cherifa and Lescanne [CL87], or Steinbach and Zehnter [SZ90]. 106 Forward closures provide a more specialized method for showing termination, applicable to locally-confluent overlaying or right-linear systems. Special cases of interest are orthogonal and string rewrite systems which are terminating whenever their forward closures are.
Reference: [ Les90 ] <author> Pierre Lescanne. </author> <title> On the recursive decomposition ordering with lexicographical status and other related orderings. </title> <journal> J. Automated Reasoning, </journal> <volume> 6 </volume> <pages> 39-49, </pages> <year> 1990. </year>
Reference-contexts: In other words, one requires that consistently replacing function symbols in two terms with others of the same arity and with the same relative ordering has no effect on the ordering of the two. The recursive path orderings <ref> [Der82; KL80; Les90] </ref> are syntactic; the Knuth-Bendix and polynomial orderings are not. <p> Lexicographic path ordering (Kamin and Levy [KL80]) 0 is a precedence; 1 ; : : :; n give a permutation of the subterms. Recursive path ordering ("with status", Lescanne <ref> [Les90] </ref>) 0 is a total precedence; 1 ; : : : ; n give a permutation of the subterms or multisets of subterms, depending on the function symbol. 5.2 The Natural Path Ordering The following is not a simplification ordering or an instance of the well-quasi general path ordering, but it
Reference: [ LM78 ] <author> Dallas S. Lankford and David R. Musser. </author> <title> A finite termination criterion. </title> <month> May </month> <year> 1978. </year>
Reference-contexts: The idea, first suggested by Lankford and Musser <ref> [LM78] </ref>, is to restrict application of rules to that part of a term created by previous rewrites. Innermost (outermost) forward closures are defined as those closures which are innermost (outermost) derivations. More generally, arbitrary redex choice strategies may be captured in an appropriate forward closure.
Reference: [ LS77 ] <author> R. Lipton and L. Snyder. </author> <title> On the halting of tree replacement systems. </title> <booktitle> In Proceedings of the Conference on Theoretical Computer Science, </booktitle> <pages> pages 43-46, </pages> <address> Waterloo, Canada, </address> <month> August </month> <year> 1977. </year>
Reference-contexts: Syntactic "path" orderings (see Dershowitz [Der87]) work in this case, too. Lipton and Snyder <ref> [LS77] </ref> gave a particular method for proving termination with interpretations (order-isomorphic to !) for which rules are "value-preserving", as this example is for the natural interpretation.
Reference: [ Mar89 ] <author> Ursula Martin. </author> <title> A geometrical approach to multiset orderings. </title> <journal> Information Processing Letters, </journal> <volume> 67 </volume> <pages> 37-54, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: They allow a component order t = ht 1 ; : : : ; t n i and =fl, where fl recursively makes finitely many comparisons of subterms. In particular, one can use weighted multisets, as in Martin <ref> [Mar89] </ref>. 27 5 INSTANCES OF THE WELL-QUASI GENERAL PATH ORDERING In this chapter it is shown that several common orderings are specific instances of the well-quasi general path ordering. A new kind of ordering called the "Natural Path Ordering" is defined which is a instance of a General Path Ordering.
Reference: [ McN94 ] <author> Robert McNaughton. </author> <title> The uniform halting problem for one-rule semi-thue systems. </title> <type> Technical Report 94-18, </type> <institution> Rensselaer, Department of Computer Science, Rensselaer Polytechnic Institute,Troy, </institution> <address> New York 12180-3590, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: Other solutions to this problem are due to Geser [Ges93] and Bittar [Bit93]. See also McNaughton <ref> [McN94] </ref> who considers termination of semi-Thue systems such as this example. 72 9 FORWARD CLOSURES AND COMPLETION In the following chapter an application of forward closures for determining if a rewrite system terminates is examined. It is considered in the context of completion of an equational theory.
Reference: [ Mid90 ] <author> Aart Middeldorp. </author> <title> Modular Properties of Term Rewriting Systems. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit, </institution> <address> Amsterdam, The Netherlands, </address> <year> 1990. </year>
Reference-contexts: Unfortunately, confluence and termination alone are not sufficient to show termination of the combined system. But innermost termination is modular. (Innermost rewriting can be used to show that weak normalization is modular. See <ref> [Mid90] </ref> for more information on this and other modularity topics.) A final advantage is that restricting completion to innermost derivations severely limits the number of critical pairs which need to be considered. 10.1 Modularity Using forward closures, it is easy to show the modularity of innermost termination and even extend it
Reference: [ Mid94 ] <author> Aart Middeldorp. </author> <title> A simple proof to a result of Bernhard Gramlich. Unpublished note, </title> <month> February </month> <year> 1994. </year>
Reference-contexts: Geupel [Geu89] showed that left-linearity is unnecessary, that is, a non-overlapping system is terminating if, and only if, innermost rewriting always leads to a normal form. An alternate proof to the one in [Gra92] is presented. (See also Middeldorp <ref> [Mid94] </ref>.) It is similar in style to Geupel's proof [Geu89] that forward closures suffice for showing termination of non-overlapping rewrite systems. Proof.
Reference: [ MMR86 ] <author> A. Martelli, C. Moiso, and G. F. Rossi. </author> <title> An algorithm for unification in equational theories. </title> <booktitle> In Proceedings of the IEEE Symposium on Logic Programming, </booktitle> <pages> pages 180-186, </pages> <address> Salt Lake City, UT, </address> <month> September </month> <year> 1986. </year> <month> 123 </month>
Reference-contexts: Second, one wants to use the work done in previous unifications to check for matches. Both requirements can be met easily with a slight modification (denoted as r-unification for restricted unification) of the standard unification algorithm which employs a conditional rewrite system <ref> [MMR86] </ref>. Definition 15. When r-unifying a term v (^x) with the left-hand side of a rule l (^y), do not add a variable in ^x to the substitution if there is any other unification rule applicable.
Reference: [ MN70 ] <author> Zohar Manna and Steven Ness. </author> <title> On the termination of Markov algorithms. </title> <booktitle> In Proceedings of the Third Hawaii International Conference on System Science, </booktitle> <pages> pages 789-792, </pages> <address> Honolulu, HI, </address> <month> January </month> <year> 1970. </year>
Reference-contexts: In practice, one usually guarantees termination by devising a well-founded (strict partial) ordering such that s t whenever s rewrites to t (written, s ! t). As suggested by Manna and Ness <ref> [MN70] </ref>, it is often convenient to express reduction orderings as a homomorphism from terms to an algebra equipped with a well-founded ordering. The use, in particular, of polynomial interpretations which map terms into the natural numbers was developed by Lankford [Lan79]. For a survey of termination methods, see Dershowitz [Der87].
Reference: [ New42 ] <author> M. H. A. Newman. </author> <title> On theories with a combinatorial definition of `equivalence'. </title> <journal> Annals of Mathematics, </journal> <volume> 43(2) </volume> <pages> 223-243, </pages> <year> 1942. </year>
Reference-contexts: If a term has no frontier subterms, then it must be terminating. Conversely, if a term has a frontier subterm, it is non-terminating. For a locally confluent rewrite system, any terminating term t has a unique normal form ^ t by Newman's Lemma <ref> [New42] </ref>. <p> To show innermost termination, one can examine the innermost forward closures. For both rewrite systems, the only innermost forward closure is a ! b. Since this is terminating, the two systems must be innermost terminating as well. Innermost confluence then follows from Newman's lemma <ref> [New42] </ref>. 97 10.3 Innermost Confluence without Termination One reason that orthogonal rewrite systems are studied in depth is that they are confluent (regardless of whether they terminate or not.) This, in turn, guarantees that they have the unique normal form property and thus compute partial functions.
Reference: [ O'D77 ] <author> Michael J. O'Donnell. </author> <title> Computing in systems described by equations, </title> <booktitle> volume 58 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1977. </year>
Reference-contexts: An innermost derivation is one in which the redex chosen at every rewrite step contains no rewritable proper subterm. In particular, orthogonal systems are locally confluent and have no (non-trivial) overlays; the proposition for this case was shown by O'Donnell <ref> [O'D77] </ref>. Geupel [Geu89] showed that left-linearity is unnecessary, that is, a non-overlapping system is terminating if, and only if, innermost rewriting always leads to a normal form. <p> Recall that a system is non-erasing if any variable on the left-hand side of a rule is also on the right-hand side. Proposition 42 (O'Donnell <ref> [O'D77] </ref>). A non-erasing orthogonal system is terminating if, and only if, it is normalizing (every term has a normal form).
Reference: [ Par78 ] <editor> Rohit Parikh. </editor> <title> Effectiveness. </title> <type> Technical Report Report, </type> <month> July </month> <year> 1978. </year>
Reference-contexts: Terms of equal weight and headed by the same symbol have their subterms compared lexicographically. If they are headed by different symbols, a "precedence" ordering determines which term is larger. Another class of simplification orderings, the path orderings were introduced around 1980. Plaisted in <ref> [Par78] </ref> defined the simple path ordering which mapped a term t to multiset of paths in the term.
Reference: [ Pla78 ] <author> David A. Plaisted. </author> <title> Well-founded orderings for proving termination of systems of rewrite rules. </title> <type> Report R-78-932, </type> <institution> Department of Computer Science, University of Illinois, Urbana, IL, </institution> <month> July </month> <year> 1978. </year>
Reference-contexts: One cannot use a syntactic simplification ordering like the simple path ordering <ref> [Pla78] </ref>, since the first rule is embedding. In fact, termination must be combined with the semantics (f (x) = x), as is done for the functional proof.
Reference: [ Pla79 ] <author> David A. Plaisted. </author> <type> Personal communication, </type> <institution> 1979. Department of Computer Science, University of Illinois. </institution>
Reference-contexts: Value-preserving path ordering (Plaisted <ref> [Pla79] </ref>, Kamin and Levy [KL80]) is a value-preserving homomorphism and is a well-founded quasi-order; 0 is a precedence; 1 is applied to the first subterm and 1 is ; 2 is applied to the second subterm and 2 is ; and so forth. <p> The next special case is not a simplification ordering, but the conditions of Theorem 20 hold for it as well. Value-preserving path ordering (Plaisted <ref> [Pla79] </ref>, Kamin and Levy [KL80]) is a value-preserving homomorphism and is a well-founded quasi-order; 0 is a precedence; 1 is applied to the first subterm and 1 is ; 2 is applied to the second subterm and 2 is ; and so forth.
Reference: [ Pla86 ] <author> David A. Plaisted. </author> <title> A simple non-termination test for the Knuth-Bendix method. </title> <editor> In J. H. Siekmann, editor, </editor> <booktitle> Proceedings of the Eighth International Conference on Automated Deduction (Oxford, England), volume 230 of Lecture Notes in Computer Science, </booktitle> <pages> pages 79-88, </pages> <address> Berlin, July 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: For standard completion, this was not a problem since the rules always showed a decrease in the given ordering. 9.2 Previous Approaches for Avoiding Non-termination There are two previous approaches to this problem. The first, by Plaisted <ref> [Pla86] </ref>, proposes that during any derivation, a check for embeddings be employed. The other, by Purdom [Pur87], proposes a specific test for detecting non-termination of a rewrite system. Both of these approaches are examined in more detail in this section. 9.2.1 Plaisted's Approach The approach introduced by Plaisted [Pla86] was to <p> by Plaisted <ref> [Pla86] </ref>, proposes that during any derivation, a check for embeddings be employed. The other, by Purdom [Pur87], proposes a specific test for detecting non-termination of a rewrite system. Both of these approaches are examined in more detail in this section. 9.2.1 Plaisted's Approach The approach introduced by Plaisted [Pla86] was to check for embeddings. If an embedding is found, then there may be a non-terminating derivation. On the other hand, if there is no embedding, then the rewrite system must be terminating as the following theorem by Kruskal shows. Proposition 46.
Reference: [ Pla93a ] <author> David A. Plaisted. </author> <title> Polynomial time termination and constraint satisfaction tests. </title> <editor> In Claude Kirchner, editor, </editor> <booktitle> Proceedings of the Fifth International Conference on Rewriting Techniques and Applications, </booktitle> <pages> pages 405-420, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1993. </year> <title> Vol. </title> <booktitle> 690 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer , Berlin. </publisher>
Reference-contexts: , each s i is a frontier subterm of u i , and s i ! fl below top s i 0 ! at top u i+1 [s i+1 ] q i+1 ; where p i+1 = p i q i+1 . (This is a constricting derivation a la Plaisted <ref> [Pla93a] </ref>, making the proof a little simpler.) Notice that each redex in the infinite derivation is either terminating (those below p i in s i ) or on the frontier (at p i in s i ).
Reference: [ Pla93b ] <author> David A. Plaisted. </author> <title> Term rewriting systems. </title> <editor> In D. M. Gabbay, C. J. Hogger, and J. A. Robinson, editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 4, chapter 2. </volume> <publisher> Oxford University Press, Oxford, </publisher> <year> 1993. </year> <note> To appear. </note>
Reference-contexts: The theory of rewriting is an outgrowth of the study of the lambda calculus and combinatory logic, and has important applications in abstract data type specifications, functional programming, symbolic computation, and automated deduction. For surveys of the theory of rewriting, see Dershowitz and Jouannaud [DJ90], Klop [Klo92] and Plaisted <ref> [Pla93b] </ref>. If no infinite sequences of rewrites are possible, a rewrite system is said to have the termination property. In practice, one usually guarantees termination by devising a well-founded (strict partial) ordering such that s t whenever s rewrites to t (written, s ! t). <p> In addition, restricting completion to innermost derivations has the benefit of severely limiting the number of possible critical pairs to be considered. Only overlaps at the top position need to be considered <ref> [Pla93b] </ref>. In Chapter 10, using innermost forward closures with completion are explored. It is shown that while the set of forward closures may 4 be infinite, innermost termination for terms of restricted size may be determined by examining a finite number of forward closures. <p> If one actually computes the forward closures for the combined system, the only forward closures are the rules themselves! 10.2 Critical Pairs and Local Confluence When computing critical pairs, only overlaps at the top position need to be considered <ref> [Pla93b] </ref>. Overlaps at proper subterms need not be considered since one of the redexes will be below the other, and hence only one rule can be applied.
Reference: [ Pur87 ] <author> Paul Purdom. </author> <title> Detecting loop simplifications. </title> <editor> In P. Lescanne, editor, </editor> <booktitle> Proceedings of the Second International Conference on Rewriting Techniques and Applications (Bordeaux, France), volume 256 of Lecture Notes in Computer Science, </booktitle> <pages> pages 54-61, </pages> <address> Berlin, </address> <month> May </month> <year> 1987. </year> <note> Springer-Verlag. 124 </note>
Reference-contexts: This process can be using heuristics to orient the rules independently of an ordering. In this thesis, a previous method of detecting a non-terminating set of rules due to Purdom <ref> [Pur87] </ref> is analyzed. A new method using forward closures is proposed which is shown to be strictly more powerful. Termination of innermost forward closures is sufficient to guarantee innermost termination of a rewrite system. This can be exploited in a number of cases. <p> The first, by Plaisted [Pla86], proposes that during any derivation, a check for embeddings be employed. The other, by Purdom <ref> [Pur87] </ref>, proposes a specific test for detecting non-termination of a rewrite system. Both of these approaches are examined in more detail in this section. 9.2.1 Plaisted's Approach The approach introduced by Plaisted [Pla86] was to check for embeddings. If an embedding is found, then there may be a non-terminating derivation. <p> This method's most serious defect when employed as a heuristic to guide search is that it may discard orientations of rules which are, in fact, terminating. 9.3 Purdom's Approach Purdom proposed in <ref> [Pur87] </ref> that instead of checking for embeddings, one should employ a test for non-termination. The basic idea is that one is allowed to make arbitrary instantiations of the rules.
Reference: [ Ste89 ] <author> Joachim Steinbach. </author> <title> Extensions and comparison of simplification orderings. </title> <editor> In Nachum Dershowitz, editor, </editor> <booktitle> Proceedings of the Third International Conference on Rewriting Techniques and Applications (Chapel Hill, NC), volume 355 of Lecture Notes in Computer Science, </booktitle> <pages> pages 434-448, </pages> <address> Berlin, April 1989. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Simplification orderings are surveyed by Steinbach 1 <ref> [Ste89] </ref>; their well-foundedness is a consequence of Kruskal's Tree Theorem. (See Dershowitz [Der82].) A non-simple rewrite system (such as f f x ! f gf x) is one for which no simplification ordering will show termination. <p> Simplification orderings are surveyed by Steinbach <ref> [Ste89] </ref>; their well-foundedness is a conse quence of Kruskal's Tree Theorem [Kru60]. Definition 1.
Reference: [ Ste90 ] <author> Guy L. Steele, Jr. </author> <title> Common Lisp:The Language, Second Edition. </title> <publisher> Digital Press, </publisher> <address> Bedford, Massachusetts, </address> <year> 1990. </year>
Reference-contexts: The most recent version can be obtained by e-mailing a request the author. The following gives a brief description of the functions available in the interface. The code was developed in Macintosh Common Lisp and just uses functions/special forms as described in Steele <ref> [Ste90] </ref>. The code uses packages for modularity and information hiding. A.1 General Description of the System for GPO Before running the general path ordering, you will need to adjust the path names for the files in the file Start.Lisp.
Reference: [ SZ90 ] <author> Joachim Steinbach and Michael Zehnter. </author> <title> Vade-mecum of polynomial orderings. </title> <type> Report SR-90-03, </type> <institution> Fachbereich Informatik, Universitat Kaiserslautern, Kaiserslautern, West Germany, </institution> <year> 1990. </year>
Reference-contexts: For this ordering, one must separately insure that s ! t implies s 0 t. Indeed any terminating system can be (uninterestingly) proven terminating in this way [KL80], by taking 0 to be the reflexive-transitive closure of !. Extended Knuth-Bendix ordering (Dershowitz [Der82], Steinbach and Zehnter <ref> [SZ90] </ref>) 0 is a monotonic interpretation; 1 is a precedence; 2 ; : : : ; n+1 give the subterms in order, permuted, or multisets of immediate subterms, depending on the function symbol. <p> In cases where the code cannot make a determination, it will query the user for an authoritative answer. The part of the code that does this testing could be upgraded to provide heuristics such as those described in Lankford [Lan79], Ben Cherifa and Lescanne [CL87], or Steinbach and Zehnter <ref> [SZ90] </ref>. 106 Forward closures provide a more specialized method for showing termination, applicable to locally-confluent overlaying or right-linear systems. Special cases of interest are orthogonal and string rewrite systems which are terminating whenever their forward closures are.
Reference: [ TKB89 ] <author> Yoshihito Toyama, Jan Willem Klop, and Hendrik Pieter Barendregt. </author> <title> Termination for the direct sum of left-linear term rewriting systems. </title> <editor> In Nachum Dershowitz, editor, </editor> <booktitle> Proceedings of the Third International Conference on Rewriting Techniques and Applications (Chapel Hill, NC), volume 355 of Lecture Notes in Computer Science, </booktitle> <pages> pages 477-491, </pages> <address> Berlin, April 1989. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This can be exploited in a number of cases. For example, many programming languages are applicative, and hence innermost derivations may be all that one is interested in when proving termination. Another advantage is seen for showing the termination of modular rewrite systems. Toyama, Klop and Barendregt <ref> [TKB89] </ref> showed that termination is a modular property of left-linear confluent terminating rewrite systems. Unfortunately, confluence and termination alone are not sufficient to show termination of the combined system. But innermost termination is modular. (Innermost rewriting can be used to show that weak normalization is modular.
Reference: [ Zan92a ] <author> Hans Zantema. </author> <type> personal communication, </type> <year> 1992. </year>
Reference-contexts: Since no right-hand side admits a non-terminating rewrite sequence, the system is terminating. System 7.1 can be shown terminating via similar reasoning (though the expressions for the forward closures are more complicated). 8.7 Example of Using Forward Closures to Prove Termination Zantema's Problem <ref> [Zan92a] </ref> is to prove termination of the following one-rule string-rewriting system: 1100 ! 000111; (8.12) corresponding to the term-rewriting rule 1100x ! 000111x. (Theorem 44 applies as well, since string rewriting systems are non-erasing and this rule is non-overlapping.) First note that for any term of the form ff00fi, if ff00

References-found: 53

