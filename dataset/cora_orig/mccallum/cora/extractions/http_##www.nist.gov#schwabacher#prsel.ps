URL: http://www.nist.gov/schwabacher/prsel.ps
Refering-URL: http://www.nist.gov/msidstaff/schwabac/papers.html
Root-URL: 
Title: Learning to Set Up Numerical Optimizations of Engineering Designs  
Author: Mark Schwabacher Thomas Ellman Haym Hirsh 
Keyword: Numerical Optimization, Engi neering Design, Decision Tree Induction, Reformulation, Case-Based Reasoning.  
Address: Gaithersburg, MD 20899  Piscataway, NJ 08855  
Affiliation: National Institute of Standards and Technology,  Department of Computer Science, Rutgers University,  
Date: 12(2), 1998  
Note: To appear in AIEDAM  
Abstract: Gradient-based numerical optimization of complex engineering designs offers the promise of rapidly producing better designs. However, such methods generally assume that the objective function and constraint functions are continuous, smooth, and defined everywhere. Unfortunately, realistic simulators tend to violate these assumptions, making optimization unreliable. Several decisions that need to be made in setting up an optimization, such as the choice of a starting prototype, and the choice of a formulation of the search space, can make a difference in the reliability of the optimization. Machine learning can improve gradient-based methods by making these choices based on the results of previous optimizations. This article demonstrates this idea by using machine learning for four parts of the optimization setup problem: selecting a starting prototype from a database of prototypes, synthesizing a new starting prototype, predicting which design goals are achievable, and selecting a formulation of the search space. We use standard tree-induction algorithms (C4.5 and CART). We present results in two realistic engineering domains: racing yachts, and supersonic aircraft. Our experimental results show that using inductive learning to make setup decisions improves both the speed and the reliability of design optimization. 
Abstract-found: 1
Intro-found: 1
Reference: [ Bhatta and Goel 1995 ] <author> S. Bhatta and A. Goel. </author> <title> Model-based design idexing and index learning in engineering design. </title> <booktitle> In Working Notes of the IJCAI Workshop on Machine Learning in Engineering, </booktitle> <month> August </month> <year> 1995. </year>
Reference-contexts: in which the prototype-selection method is the retrieval process, and the optimization method is the adaptation process. 27 Researchers in case-based reasoning have investigated the use of library-retrieval techniques for case-based design [ Sycara and Navinchandra 1992 ] , but have not used them to initialize an iterative design process. <ref> [ Bhatta and Goel 1995 ] </ref> describe a system 27 We use the word prototype to refer to a complete design, not an incomplete prototype. The optimization process modifies the retrieved design to satisfy the new goal.
Reference: [ Bouchard et al. 1988 ] <author> E. E. Bouchard, G. H. Kidwell, and J. E. Rogan. </author> <title> The application of artificial intelligence technology to aeronautical system design. </title> <booktitle> In AIAA/AHS/ASEE Aircraft Design Systems and Operations Meeting, </booktitle> <address> Atlanta, Georgia, </address> <month> September </month> <year> 1988. </year> <note> AIAA Paper 88-4426. </note>
Reference-contexts: A number of research efforts have combined AI techniques with numerical optimization. [ Ellman et al. 1993 ] describes a method for switching between a less expensive, less accurate simulator, and a more expensive, more accurate simulator during optimization, based on the magnitude of the gradient. <ref> [ Bouchard et al. 1988 ] </ref> describes ways in which expert sys 26 tems could be applied to the parametric design of aeronautical systems. [ Hoeltzel and Chieng 1987 ] describe a system for digital chip design in which design is done at an abstract level, using machine learning to estimate
Reference: [ Breiman 1984 ] <author> L. Breiman. </author> <title> Classification And Regression Trees. </title> <booktitle> Wadsworth International Group, </booktitle> <address> Belmont, Calif., </address> <year> 1984. </year>
Reference-contexts: The specific inductive-learning systems used in this work are C4.5 [ Quinlan 1993 ] (release 3.0, with windowing turned off) for problems requiring discrete-class induction, and CART <ref> [ Breiman 1984 ] </ref> for problems requiring continuous-class induction. Both of these systems represent the learned knowledge in the form of decision trees. <p> We used CART (Classification And Regression Trees), which builds a "regression tree" that has a numerical constant at each leaf <ref> [ Breiman 1984 ] </ref> .
Reference: [ Burns 1989 ] <author> S. A. Burns. </author> <title> Graphical representation of design optimization processes. </title> <booktitle> Computer Aided Design, </booktitle> <volume> 21(1) </volume> <pages> 21-24, </pages> <year> 1989. </year>
Reference-contexts: They evaluate the performance of this indexing system based on its effect on retrieval time, and not based on its impact on optimization performance. <ref> [ Burns 1989 ] </ref> presents a graphical representation that can be used to compare different design optimization processes. He uses the technique to show that small changes in the starting prototype can result in large differences in the final design.
Reference: [ Cerbone 1992 ] <author> G. Cerbone. </author> <title> Machine learning in engineering: Techniques to speed up numerical optimization. </title> <type> Technical Report 92-30-09, </type> <institution> Oregon State University Department of Computer Science, </institution> <year> 1992. </year> <type> Ph.D. Thesis. 30 </type>
Reference-contexts: Another interesting thing to note is that while the difference between MFC and C4.5 was small (but statistically significant) in the yacht domain, it was much larger in the airframe domain. 7 Related work Cerbone <ref> [ Cerbone 1992 ] </ref> has reported work which applied machine-learning techniques to a problem similar to our prototype-selection problem. His design space, in the domain of truss design, has an exponential number of disconnected search spaces.

Reference: [ Ellman et al. 1992 ] <author> T. Ellman, J. Keane, and M. Schwabacher. </author> <title> The Rutgers CAP Project Design Associate. </title> <type> Technical Report CAP-TR-7, </type> <institution> Department of Computer Science, Rut-gers University, </institution> <address> New Brunswick, NJ, </address> <year> 1992. </year> <month> ftp://ftp.cs.rutgers.edu/pub/technical-reports/cap-tr-7.ps.Z. </month>
Reference-contexts: assigning labels to future, unlabeled data. 2 The cost of generating this table is discussed in Section 4.3. 3 The Design Associate Our prototype-selection and formulation-selection techniques have been developed as part of the "Design Associate," a system for assisting human experts in the design of complex physical engineering structures <ref> [ Ellman et al. 1992 ] </ref> . Figure 1 shows a block diagram of the system's software architecture. The inductive learner learns from the design library a decision tree. <p> In many cases, the quality of competing designs can be assessed using domain-specific evaluation functions. In such cases the design-modification process is often accomplished by an optimization method such as hill-climbing search <ref> [ Ramachandran et al. 1992, Ellman et al. 1992 ] </ref> . In the context of such case-based design systems, the choice of an initial prototype can affect both the quality of the final design and the computational cost of obtaining that design, for three reasons.
Reference: [ Ellman et al. 1993 ] <author> T. Ellman, J. Keane, and M. Schwabacher. </author> <title> Intelligent model selection for hillclimbing search in computer-aided design. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 594-599, </pages> <address> Washington, DC, 1993. </address> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference-contexts: A number of research efforts have combined AI techniques with numerical optimization. <ref> [ Ellman et al. 1993 ] </ref> describes a method for switching between a less expensive, less accurate simulator, and a more expensive, more accurate simulator during optimization, based on the magnitude of the gradient. [ Bouchard et al. 1988 ] describes ways in which expert sys 26 tems could be applied
Reference: [ Gelsey et al. 1996a ] <author> A. Gelsey, D. Smith, M. Schwabacher, K. Rasheed, and K. Miyake. </author> <title> A search space toolkit: SST. </title> <booktitle> Decision Support Systems, </booktitle> <volume> 18 </volume> <pages> 341-356, </pages> <year> 1996. </year>
Reference-contexts: He uses the technique to show that small changes in the starting prototype can result in large differences in the final design. Gelsey et al. <ref> [ Gelsey et al. 1996a ] </ref> describe a Search Space Toolkit, which assists in determining properties of the search space that can be used for reformulation. [ Choy and Agogino 1986 ] describe a system that automates [ Papalambros and Wilde 1988 ] 's method of using monotonicity analysis to detect
Reference: [ Gelsey et al. 1996b ] <author> Andrew Gelsey, Mark Schwabacher, and Don Smith. </author> <title> Using modeling knowledge to guide design space search. </title> <editor> In J.S. Gero and F. Sudweeks, editors, </editor> <booktitle> Artificial Intelligence in Design '96, </booktitle> <pages> pages 367-385. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Dor-drecht, The Netherlands, </address> <year> 1996. </year> [ <editor> Grecu and Brown 1996 ] D. Grecu and D. Brown. </editor> <booktitle> Dimensions of learning in agent-based design. In Workshop Notes, Machine Learning in Design, Artificial Intelligence in Design '96, </booktitle> <month> June </month> <year> 1996. </year> <note> http://cs.wpi.edu/~dcb/AID/Papers/AID96-MLinD-ws.html. </note>
Reference-contexts: We have supplemented CFSQP with rule-based gradients [ Schwabacher and Gelsey 1997 ] and model constraints <ref> [ Gelsey et al. 1996b ] </ref> . Because the search space has many local optima, we use a technique that we call "random multistart" to attempt to find the global optimum.
Reference: [ Hoeltzel and Chieng 1987 ] <author> D. Hoeltzel and W. Chieng. </author> <title> Statistical machine learning for the cognitive selection of nonlinear programming algorithms in engineering design optimization. </title> <booktitle> In Advances in Design Automation, </booktitle> <address> Boston, MA, </address> <year> 1987. </year>
Reference-contexts: method for switching between a less expensive, less accurate simulator, and a more expensive, more accurate simulator during optimization, based on the magnitude of the gradient. [ Bouchard et al. 1988 ] describes ways in which expert sys 26 tems could be applied to the parametric design of aeronautical systems. <ref> [ Hoeltzel and Chieng 1987 ] </ref> describe a system for digital chip design in which design is done at an abstract level, using machine learning to estimate the performance that would be obtained if the design were carried out at a more detailed level. [ Ore-lup et al. 1988 ] describes
Reference: [ IYRU 1985 ] <institution> The Rating Rule and Measurement Instructions of the International Twelve Metre Class. International Yacht Racing Union, </institution> <year> 1985. </year>
Reference-contexts: the yacht, before adding any ballast, must be less than or equal to the mass of the water that it displaces. (In other words, the boat must not 18 sink.) 19 Yachts entered in the 1987 America's Cup race had to satisfy a hard constraint known as the 12-Meter Rule <ref> [ IYRU 1985 ] </ref> .
Reference: [ Kolodner 1993 ] <author> J. Kolodner. </author> <title> Case-Based Reasoning. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: In contrast to this, our work has evaluated retrieval strategies in terms of the quality of the resulting designs, in addition to the number of iterations needed to find them. There has been much work on case-based reasoning <ref> [ Kolodner 1993 ] </ref> .
Reference: [ Lawrence et al. 1995 ] <author> C. Lawrence, J. Zhou, and A. </author> <title> Tits. User's guide for CFSQP version 2.3: A C code for solving (large scale) constrained nonlinear (minimax) optimization problems, generating iterates satisfying all inequality constraints. </title> <type> Technical Report TR-94-16r1, </type> <institution> Institute for Systems Research, University of Maryland, College Park, MD, </institution> <month> August </month> <year> 1995. </year> <month> 31 </month>
Reference-contexts: There was a 1/2 probability of including the takeoff phase. The numerical optimizer used in the prototype synthesis experiments is CFSQP <ref> [ Lawrence et al. 1995 ] </ref> 13 , a state-of-the-art implementation of the Sequential Quadratic Programming (SQP) method.
Reference: [ Letcher et al. 1987 ] <author> J. Letcher, J. Marshall, J. Oliver, and N. Salvesen. </author> <title> Stars and Stripes. </title> <journal> Scientific American, </journal> <volume> 257(2), </volume> <month> August </month> <year> 1987. </year>
Reference-contexts: Course time is evaluated using a "Velocity 4 In 1992, the 12-meter class was replaced with the new America's Cup Class. 5 This is the boat that won the 1987 America's Cup competition, returning the trophy to the United States after an Australian win in 1983 <ref> [ Letcher et al. 1987 ] </ref> .) 4 1987 America's Cup competition '87. Prediction Program" (VPP) called "AHVPP" from AeroHydro, Inc., which is a marketed product used in yacht design [ Letcher 1991 ] .
Reference: [ Letcher 1991 ] <author> J. Letcher. </author> <title> The Aero/Hydro VPP Manual. </title> <institution> Aero/Hydro, Inc., Southwest Harbor, ME, </institution> <year> 1991. </year>
Reference-contexts: Prediction Program" (VPP) called "AHVPP" from AeroHydro, Inc., which is a marketed product used in yacht design <ref> [ Letcher 1991 ] </ref> . A search space is specified by providing an initial prototype geometry and a set of operators for modifying that prototype.
Reference: [ Murthy et al. 1994 ] <author> S. Murthy, S. Kasif, S. Salzberg, and R. Beigel. </author> <title> A system for induction of oblique decision trees. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 2 </volume> <pages> 1-32, </pages> <year> 1994. </year>
Reference-contexts: Such problems may arise when we test this method in still other domains. It would be interesting to see if learning performance could be improved by using neural networks, nearest-neighbor methods, statistical regression, or an "oblique" decision tree learner (such as OC1 <ref> [ Murthy et al. 1994 ] </ref> ). Another approach to improving learning performance is to integrate background knowledge into the learning process. One form of background knowledge that is often available is modality constraints. This is knowledge that expresses the modality of the learned class with respect to the attributes.
Reference: [ Orelup et al. 1988 ] <author> M. F. Orelup, J. R. Dixon, P. R. Cohen, and M. K. Simmons. Dominic II: </author> <title> Meta-level control in iterative redesign. </title> <booktitle> In Proceedings of the National Conference on Artificial Intelligence, </booktitle> <pages> pages 25-30, </pages> <address> St. Paul, MN, 1988. </address> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address>
Reference: [ Papalambros and Wilde 1988 ] <author> P. Papalam-bros and J. Wilde. </author> <title> Principles of Optimal Design. </title> <publisher> Cambridge University Press, </publisher> <address> New York, NY, </address> <year> 1988. </year> [ <editor> Powell and Skolnick 1993 ] D. Powell and M. </editor> <title> Skolnick. Using genetic algorithms in engineering design optimization with non-linear constraints. </title> <booktitle> In Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <pages> pages 424-431, </pages> <institution> Univeristy of Illinois at Urbana-Champaign, </institution> <address> July 1993. </address> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA. </address>
Reference-contexts: This incorporation is done by making the inequality constraint into an equality constraint, and then solving for one of the design parameters in terms of the other design parameters. <ref> [ Papalambros and Wilde 1988 ] </ref> describe how monotonicity knowledge can be used to determine that certain 17 Table 10: Performance of one random probe, averaged over ten trials. Measure Success Cost (number of simulations) Mean 8.8/16 15062 Standard Deviation 1.9/16 3102 constraints will be active at the optimum. <p> These soft constraints are: * draft constraint * beam constraint * displacement constraint * winglet span constraint For example, the beam constraint states if beam &lt; 3:6m, then add four times the difference to length While constructing the simulator, we used a reasoning process similar to that described in <ref> [ Papalambros and Wilde 1988 ] </ref> to determine that the constraint described by the basic formula of the 12-Meter Rule, above, will always be active, since the objective function being minimized, course-time, is monotonically nonincreasing in sail-area, 20 and the left-hand-side 19 Actually, the mass of the yacht must equal the <p> Gelsey et al. [ Gelsey et al. 1996a ] describe a Search Space Toolkit, which assists in determining properties of the search space that can be used for reformulation. [ Choy and Agogino 1986 ] describe a system that automates <ref> [ Papalambros and Wilde 1988 ] </ref> 's method of using monotonicity analysis to detect constraint activity. [ Williams and Cagan 1994 ] presents activity analysis, a technique inspired by monotonicity analysis.
Reference: [ Powell 1990 ] <author> D. Powell. Inter-GEN: </author> <title> A Hybrid Approach to Engineering Design Optimization. </title> <type> PhD thesis, </type> <institution> Rensselaer Polytechnic Institute Department of Computer Science, </institution> <address> Troy, NY, </address> <month> December </month> <year> 1990. </year>
Reference: [ Quinlan 1990 ] <author> J. R. Quinlan. </author> <title> Learning logical definitions from relations. </title> <journal> Machine Learning, </journal> <volume> 5 </volume> <pages> 239-266, </pages> <year> 1990. </year>
Reference-contexts: Learning methods operating on more expressive representations, such as inductive logic programming systems like FOIL <ref> [ Quinlan 1990 ] </ref> , may enable going beyond the simple representation of goals used here and handling more complicated goals.
Reference: [ Quinlan 1993 ] <author> John Ross Quinlan. C4.5: </author> <title> Programs for Machine Learning. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1993. </year>
Reference-contexts: If learning is successful, this mapping interpolates or extrapolates from the training data and can be used successfully in future design sessions to map each new goal into an appropriate initial prototype in the design library. The specific inductive-learning systems used in this work are C4.5 <ref> [ Quinlan 1993 ] </ref> (release 3.0, with windowing turned off) for problems requiring discrete-class induction, and CART [ Breiman 1984 ] for problems requiring continuous-class induction. Both of these systems represent the learned knowledge in the form of decision trees.
Reference: [ Ramachandran et al. 1992 ] <author> N. Ramachan-dran, N. Langrana, L. Steinberg, and V. Ja-malabad. </author> <title> Initial design strategies for iterative design. </title> <booktitle> Research in Engineering Design, </booktitle> <volume> 4 </volume> <pages> 159-169, </pages> <note> 1992. </note> [ <author> Rogers and Adams 1990 ] D. Rogers and J. Adams. </author> <title> Mathematical elements for computer graphics. </title> <publisher> McGraw-Hill, </publisher> <address> 2nd edition, </address> <year> 1990. </year> [ <editor> Schwabacher and Gelsey 1997 ] M. Schwabacher and A. Gelsey. </editor> <title> Intelligent gradient-based search of incompletely defined design spaces. </title> <booktitle> Artificial Intelligence for Engineering Design, Analysis and Manufacturing, </booktitle> <volume> 11(3) </volume> <pages> 199-210, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: In many cases, the quality of competing designs can be assessed using domain-specific evaluation functions. In such cases the design-modification process is often accomplished by an optimization method such as hill-climbing search <ref> [ Ramachandran et al. 1992, Ellman et al. 1992 ] </ref> . In the context of such case-based design systems, the choice of an initial prototype can affect both the quality of the final design and the computational cost of obtaining that design, for three reasons.
Reference: [ Schwabacher 1996 ] <author> Mark Schwabacher. </author> <title> The use of artificial intelligence to improve the numerical optimization of complex engineering designs. </title> <type> Technical Report HPCD-TR-45, </type> <institution> Department of Computer Science, Rutgers University, </institution> <address> New Brunswick, NJ, </address> <month> October </month> <year> 1996. </year> <type> Ph.D. Thesis. </type> <note> http://www.cs.rutgers.edu/~schwabac/thesis.html. [ Sycara and Navinchandra 1992 ] K. </note> <author> Sycara and D. Navinchandra. </author> <title> Retrieval strategies in a case-based design system. </title> <editor> In C. Tong and D. Sriram, editors, </editor> <booktitle> Artificial Intelligence in Engineering Design (Volume II), </booktitle> <pages> pages 145 - 164. </pages> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1992. </year>
Reference-contexts: First, prototype selection may impact quality when the design process is guided by a nonlinear evaluation function with unknown global properties. Since there is no known method that is guaranteed to find the global optimum of an arbitrary nonlinear function <ref> [ Schwabacher 1996 ] </ref> , most design systems rely on iterative local search methods whose results are sensitive to the initial starting point. Second, prototype selection may impact quality when the prototypes lie in disjoint search spaces. <p> Our experiments therefore explored how prototype selection affects the quality of the final design. For the prototype selection experiments in the yacht domain, we used the Rutgers Hill-climber as our optimizer <ref> [ Schwabacher 1996 ] </ref> . It is an implementation of steepest-descent hill-climbing, that has been augmented so as to allow it to "climb over" bumps in the surface defined by the objective function that have less than a certain width or a certain height. <p> We performed some experiments to test our first new hypothesis that the closest-goal and smallest-initial-evaluation methods performed poorly because of the "bumps" in the evaluation function. We repeated the earlier experiments using a simplified, "smooth" velocity prediction program, called "RUVPP," that we developed at Rutgers <ref> [ Schwabacher 1996 ] </ref> . RUVPP differs from the more complex AHVPP in several respects. To begin with, RUVPP represents a yacht as a list of major geometric dimensions such as length, depth, and beam, rather than B-spline surfaces.
Reference: [ Tong et al. 1992 ] <author> Siu Shing Tong, David Powell, and Sanjay Goel. </author> <title> Integration of artificial intelligence and numerical optimization techniques for the design of complex aerospace systems. </title> <booktitle> In 1992 Aerospace Design Conference, </booktitle> <address> Irvine, CA, </address> <month> February </month> <year> 1992. </year> <note> AIAA Paper 92-1189. 32 </note>
Reference: [ Tong 1988 ] <author> S. S. Tong. </author> <title> Coupling symbolic manipulation and numerical simulation for complex engineering designs. </title> <booktitle> In International Association of Mathematics and Computers in Simulation Conference on Expert Systems for Numerical Computing, </booktitle> <institution> Purdue University, West Lafayette, IN, </institution> <year> 1988. </year>
Reference-contexts: They tend to require thousands, or even tens of thousands, of simulations, and are thus not practical when each simulation is expensive. Powell [ Powell 1990, Tong et al. 1992, Powell and Skolnick 1993 ] has built a module called Inter-GEN, part of the ENGINEOUS system <ref> [ Tong 1988 ] </ref> , that seeks to combine the ability of genetic algorithms to handle multiple local optima with the speed of numerical optimization algorithms. It contains a genetic algorithm, and a numerical optimizer, and uses a rule-based expert system to decide when to switch between the two.

References-found: 25

