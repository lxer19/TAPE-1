URL: ftp://ftp.dcs.exeter.ac.uk/pub/parallel/models/t9p4.ps.Z
Refering-URL: http://www.dcs.exeter.ac.uk/reports/reports.html
Root-URL: 
Title: A T9000 Implementation of the p4 Parallel Programming Model  
Author: Stephen J. Turner and Adam Back 
Address: Exeter, Exeter EX4 4PT England  
Affiliation: Department of Computer Science University of  
Abstract: Although parallel computers have significant price/performance advantages over conventional sequential machines, they are still not widely used for general purpose computing. One of the main reasons for this is the lack of portability between different classes of parallel architecture, each of which has its own individual programming style. This paper discusses p4, a programming model for portable, heterogeneous, parallel computing, developed by the Argonne National Laboratory, and its implementation on the T9000 series of transputers. Experimental results are presented which demonstrate the performance of p4 relative to the raw performance of the T9000. These results are compared with similar experiments carried out with a T800 version of the p4 system. Since implementations of p4 exist on a wide range of parallel computers, the model provides a convenient route for transferring applications onto T9000 networks.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Back and S. J. Turner. </author> <title> Portability and Parallelism with Lightweight p4. </title> <booktitle> In Proc. BCS PPSG Conference on General Purpose Parallel Computing, </booktitle> <year> 1993. </year>
Reference-contexts: Experimental results are then presented in section 4 and these demonstrate the communications performance of p4 relative to the raw performance of the T9000. These results are compared with similar tests carried out using an earlier implementation of p4 on a T805 network <ref> [1] </ref>. Finally, in the conclusions, this work is discussed in the context of the recently published standard for a message passing interface (MPI) for distributed memory architectures [7]. 2. The p4 Parallel Programming Model 2.1. Clusters The cluster model in p4 groups together processes into clusters. <p> The message handler for a particular channel will forward all messages destined for the remote processor via the virtual channel. Further details of the implementation of the message passing mechanism may be found in <ref> [1] </ref>. On the T9000, virtual channels are multiplexed onto the physical links of the trans-puter network by the on-chip virtual channel processor. In conjunction with the C104 router, this provides virtual channel routing by hardware.
Reference: [2] <author> J. Boyle, R. Butler, T. Disz, B. Glickfeld, E. Lusk, R. Overbeek, J. Patterson, and R. Stevens. </author> <title> Portable Programs for Parallel Processors. </title> <publisher> Holt, Rinehart, Winston, </publisher> <year> 1987. </year>
Reference-contexts: The p4 parallel programming system [3, 4], which originates from the Argonne National Laboratory, provides a portable programming model for a large range of parallel machines. Its predecessor was the system described in the book "Portable Programs for Parallel Processors" <ref> [2] </ref>, from which p4 takes its name. The model combines message passing with shared memory to form a cluster based model of parallel computing. In this paper, we describe our work in porting the p4 system onto the T9000 series of transputers.
Reference: [3] <author> R. Butler and E. Lusk. </author> <title> User's Guide to the p4 Parallel Programming System. </title> <type> Technical report, </type> <institution> ANL-92/17, Argonne National Laboratory, </institution> <year> 1992. </year>
Reference-contexts: Different machines can require different programming styles and this limits the lifetime of parallel software written for a particular architecture, which in turn inhibits investment in developing large parallel applications. The p4 parallel programming system <ref> [3, 4] </ref>, which originates from the Argonne National Laboratory, provides a portable programming model for a large range of parallel machines. Its predecessor was the system described in the book "Portable Programs for Parallel Processors" [2], from which p4 takes its name.
Reference: [4] <author> R. Butler and E. Lusk. </author> <title> Monitors, Messages, and Clusters: the p4 Parallel Programming System. </title> <type> Technical report, </type> <institution> Argonne National Laboratory, </institution> <year> 1993. </year>
Reference-contexts: Different machines can require different programming styles and this limits the lifetime of parallel software written for a particular architecture, which in turn inhibits investment in developing large parallel applications. The p4 parallel programming system <ref> [3, 4] </ref>, which originates from the Argonne National Laboratory, provides a portable programming model for a large range of parallel machines. Its predecessor was the system described in the book "Portable Programs for Parallel Processors" [2], from which p4 takes its name.
Reference: [5] <author> M. Debbage, M. B. Hill, D. Nicole, and A. Sturges. </author> <title> The Virtual Channel Router. </title> <journal> Transputer Communications, </journal> <volume> 1(1) </volume> <pages> 1-16, </pages> <year> 1993. </year>
Reference-contexts: A parallel Mandelbrot Set program was written using the p4 system, organised as a processor farm. As the necessary through-routing is carried out entirely by the p4 system, it is possible to organise the p4 processes in a way that matches the algorithmic topology of the application <ref> [5] </ref>. In order to keep the processors busy, it is necessary to buffer an extra item of work for each processor, and this buffering is also provided automatically by the p4 system using asynchronous message passing. both T805 and T9000 transputer networks.
Reference: [6] <author> J. J. Dongarra, R. Hempel, A. J. G. Hey, and D. W. Walker. </author> <title> A proposal for a User-Level Message Passing Interface in a Distributed Memory Environment. </title> <type> Technical report, </type> <institution> ORNL/TM-12231, Oak Ridge National Laboratory, </institution> <year> 1993. </year>
Reference-contexts: Message passing paradigms such as p4 are widely used on parallel machines, but the lack of a standard has impeded the development of portable software and libraries for message passing machines. Recently, a new standard message passing interface (MPI) has been published <ref> [6, 7] </ref>, which is intended to replace the machine specific and other currently used interfaces. Its development has been strongly supported by many of the major vendors and it seems likely to be adopted for a wide range of systems.
Reference: [7] <author> MPI Forum. </author> <title> MPI: A Message-Passing Interface Standard. </title> <type> Technical report, </type> <institution> University of Tennessee, </institution> <year> 1994. </year>
Reference-contexts: These results are compared with similar tests carried out using an earlier implementation of p4 on a T805 network [1]. Finally, in the conclusions, this work is discussed in the context of the recently published standard for a message passing interface (MPI) for distributed memory architectures <ref> [7] </ref>. 2. The p4 Parallel Programming Model 2.1. Clusters The cluster model in p4 groups together processes into clusters. All p4 processes can communicate via message passing, but only p4 processes within the same cluster can share memory. Thus a cluster forms a shared address space. <p> Message passing paradigms such as p4 are widely used on parallel machines, but the lack of a standard has impeded the development of portable software and libraries for message passing machines. Recently, a new standard message passing interface (MPI) has been published <ref> [6, 7] </ref>, which is intended to replace the machine specific and other currently used interfaces. Its development has been strongly supported by many of the major vendors and it seems likely to be adopted for a wide range of systems.
Reference: [8] <author> A. Hipperson. </author> <title> The Virtual Link Communications Performance of Early Pre-Production T9000s. </title> <booktitle> In Proc. 7th PARSYS User Group Meeting, </booktitle> <address> Oxford. PARSYS, </address> <year> 1994. </year>
Reference-contexts: Note that with the Ping application, there is only one virtual channel (in each direction) mapped onto the physical link connecting the two transputers. To achieve maximum bandwidth with a T9000 system, it is desirable to map a number of virtual channels onto the same physical link <ref> [8] </ref>. This would happen with a more complicated p4 application. On the T805, the p4 throughput is limited by that of the software VCR, which itself is rather less than the throughput achieved with raw communication.
Reference: [9] <author> Inmos. </author> <title> D4314 ANSI C Toolset User Guide, </title> <year> 1993. </year>
Reference-contexts: On parallel machines with special purpose communication hardware, vendor specific communication libraries are normally used. In the T800 version of p4, we implemented the p4 message passing calls using the Virtual Channel Router (VCR) of the Inmos D4314A ANSI C toolset <ref> [9] </ref>. This provides virtual channels which can be placed between processes on any processor in a transputer network, the necessary through-routing and multiplexing being performed by the VCR software. <p> this header from the overhead due to buffer management and the provision of typed messages, the line "T9 raw+32" shows the performance obtained with raw communications when a 32 byte header is sent as a separate message before the actual message. messages with and without the Inmos VCR communications software <ref> [9] </ref>. The performance difference between VCR and raw messages is due to packetization and multiplexing of multiple virtual channels on a single hardware link.
Reference: [10] <author> Inmos. </author> <title> T9000 ANSI C Toolset User Guide, </title> <year> 1994. </year>
Reference-contexts: In conjunction with the C104 router, this provides virtual channel routing by hardware. We were able to transfer our implementation of the p4 message passing routines onto the T9000 without any modification using the Inmos T9000 (D4394) toolset <ref> [10] </ref>. However, it is possible that improvements in the efficiency of the message passing routines could be obtained by making use of some of the specific features of the T9000 such as resource channels [11]. 3.3.
Reference: [11] <author> M. D. May, P. W. Thompson, and P. H. Welch. </author> <title> Networks, Routers and Transputers. </title> <publisher> IOS Press, </publisher> <year> 1993. </year>
Reference-contexts: However, it is possible that improvements in the efficiency of the message passing routines could be obtained by making use of some of the specific features of the T9000 such as resource channels <ref> [11] </ref>. 3.3. Priority Scheduling This is an extension to the p4 model which was designed to enable us to use p4 as a portable base for our research into the use of optimistic parallel execution mechanisms in general purpose computing [14]. <p> On the T9000, p4 almost achieves the throughput of raw communications for very large messages, although this is less than the theoretical figure of 9.55 Mbytes/sec that might be expected for a 100 Mbits/sec link <ref> [11] </ref>. Note that with the Ping application, there is only one virtual channel (in each direction) mapped onto the physical link connecting the two transputers. To achieve maximum bandwidth with a T9000 system, it is desirable to map a number of virtual channels onto the same physical link [8].
Reference: [12] <author> SUN Microsystems. </author> <title> Network Programming Guide, </title> <year> 1990. </year>
Reference-contexts: Some clusters could be located on Unix workstations, some on the nodes of a transputer network and some on shared memory multiprocessors. To allow messages to be passed between machines of different architectures, p4 uses the XDR (eXternal Data Representation) library. XDR <ref> [12] </ref> provides a standard representation for float, double, int, long into which messages must be translated on send and from which they must be translated on receive.
Reference: [13] <author> K. M. Shea, M. H. Cheung, and F. C. M. Lau. </author> <title> An Efficient Multi-priority Scheduler for the Transputer. </title> <booktitle> In Proc. 15th WoTUG Technical Meeting (Aberdeen), </booktitle> <pages> pages 139-153. </pages> <publisher> IOS Press, </publisher> <year> 1992. </year>
Reference-contexts: If at any time a higher priority process becomes ready, the lower priority process is pre-emptively descheduled. On the T800, a multi-priority scheduler with the capability of pre-emptively de-scheduling processes has been constructed based on the work of Shea et. al. <ref> [13] </ref>. The library is able to pre-emptively schedule and deschedule processes within two trans-puter time-slices. That is, if a higher priority process becomes ready while a lower priority process is running, the lower priority process will run for at most two time slices before being descheduled.
Reference: [14] <author> S. Turner and A. </author> <title> Back. General Purpose Optimistic Parallel Computing. </title> <booktitle> In Proc. 7th PARSYS User Group Meeting, </booktitle> <address> Oxford. PARSYS, </address> <year> 1994. </year>
Reference-contexts: Priority Scheduling This is an extension to the p4 model which was designed to enable us to use p4 as a portable base for our research into the use of optimistic parallel execution mechanisms in general purpose computing <ref> [14] </ref>. This has the requirement that it must be possible to control the scheduling of processes at run time. We wished to be able to do this in a lightweight process environment, but at the same time we did not wish to lose the portability of our system.
Reference: [15] <institution> University of Kent. T9000 Systems Workshop, </institution> <year> 1992. </year>
Reference-contexts: This pre-processor was originally intended for p4 applications which run on the T800 transputer. Although it can also be used with the T9000 version, we are currently investigating how it might be possible to take advantage of the protection and memory management features of the T9000 <ref> [15] </ref> to provide improved support for segments. 3.2. Message Passing The generic Unix implementation of p4 uses the socket mechanism for communication. On parallel machines with special purpose communication hardware, vendor specific communication libraries are normally used.
Reference: [16] <author> E. L. White, J. R. Callahan, and J. M. Purtilo. </author> <title> The NewYacc User's Manual. </title> <type> Technical report, </type> <institution> University of Maryland, </institution> <year> 1989. </year>
Reference-contexts: These restrictions do not present a problem as far as many p4 applications are concerned. For p4 programs which assume such replication, a pre-processor has been implemented using NewYacc <ref> [16] </ref> which groups together all global and static data items into a structure, and modifies all accesses to these data items to go indirectly through a pointer to this structure.
References-found: 16

