URL: http://www.cs.ucsb.edu/~tyang/papers/irregular96.ps
Refering-URL: http://www.cs.ucsb.edu/~tyang/papers/
Root-URL: http://www.cs.ucsb.edu
Title: Parallel Progressive Radiosity with Adaptive Meshing  
Author: Yizhou Yu, Oscar H. Ibarra, Tao Yang 
Address: Santa Barbara, CA 93106, USA  
Affiliation: Department of Computer Science, University of California  
Abstract: Radiosity plays an important role in computer graphics. This paper presents an efficient parallel algorithm for progressive radiosity with adaptive meshing, which adopts a novel static processor assignment strategy and takes advantages of hierarchical computation structure in this problem to minimize communication and balance dynamic load. Our experiments on a Meiko CS-2 distributed memory machine show that this algorithm has achieved good performance for the tested cases.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Baum, D., Winget, J.: </author> <title> Real Time Radiosity Through Parallel Processing and Hardware Acceleration. </title> <journal> Computer Graphics 24(1990), No.2, </journal> <pages> 67-75. </pages>
Reference-contexts: A further improvement to increase the image quality of radiosity is to incorporate adaptive subdivision [6, 10]. It is important to further reduce the radiosity time since it still takes minutes to see the obvious improvement from one view to another. There have been several parallel algorithms proposed in <ref> [1, 2, 9, 11] </ref> but speedups for progressive radiosity with adaptive meshing are still low because the computation associated with patches in a 3D space is unstructured and the cost varies during iterations.
Reference: 2. <author> Bouatouch, K., Priol, T.: </author> <title> Data Management Scheme for Parallel Radiosity. </title> <booktitle> Computer-Aided Design 26 (1994) 876-882. </booktitle>
Reference-contexts: A further improvement to increase the image quality of radiosity is to incorporate adaptive subdivision [6, 10]. It is important to further reduce the radiosity time since it still takes minutes to see the obvious improvement from one view to another. There have been several parallel algorithms proposed in <ref> [1, 2, 9, 11] </ref> but speedups for progressive radiosity with adaptive meshing are still low because the computation associated with patches in a 3D space is unstructured and the cost varies during iterations. <p> Furthermore, adaptive refinement of patches may increase the number of patches on some processors dynamically, consequently it worsens the load balance. Thus, load balancing is the main challenge in achieving high speedups [9]. Recent research <ref> [2, 9] </ref> improves parallel performance by concurrentizing several iterations on different processors. This is called to exploit control parallelism. In this scheme, synchronization is needed when several iterations modify the same patch object and communication overhead is high on distributed memory machines. <p> The hierarchical computing method eliminates unnecessary computation in a superpatch with a large subdivision tree, and thus smoothes cost difference between different patch subdivision trees. We will show the effectiveness of this hierarchical strategy in our experiments. 3.3 Form-factor Calculation It is indicated in <ref> [2] </ref> that the form-factor calculation and the radiosity update require an access to the information regarding all patches. That is actually not necessary. One good method for the form-factor calculation is discussed in [13] and reviewed in Sect. 2.3. <p> The sequential time for each scene is about 3 hours. Scalability. The parallel time speedup for each test scene is shown in Fig. 9. This result is comparable to the recent results for progressive radiosity <ref> [2] </ref> without adaptive meshing, and is much better than previous results for both adaptive and non-adaptive progressive radiosity [9]. Due to the difficulties arising from adaptive meshing, the above experimental result shows that our algorithm deals with irregular and adaptive load variation very well.
Reference: 3. <author> Cohen, M., Chen, S., et al.: </author> <title> A Progressive Refinement Approach to Fast Radiosity Image Generation. </title> <journal> Computer Graphics 22(1988), </journal> <volume> No.4, </volume> <pages> 75-84. </pages>
Reference-contexts: At the present time, radiosity can be used for such cases but they are too time-consuming to accomplish real-time interaction. A compromise solution to reduce the radiosity time is to use progressive illumination calculation <ref> [3, 13] </ref>. The basic idea is to conduct a sequence of refinement iterations to improve the image quality. The intermediate result after a few iterations can be used for displaying and a user can revise the design based on this intermediate solution without waiting for the entire computation to end. <p> This system of simultaneous equations represents the equilibrium energy interchange via multiple interreflections and emissions in the environment. 2.1 Progressive Radiosity Directly solving (1) is too costly for large N . Progressive radiosity <ref> [3] </ref> is a kind of iterative method to solve 1. The algorithm is given in Fig. 1. At each iteration, the patch with maximum unshot light flux is chosen to shoot its energy. All patches will receive some part of this flux and update their radiosity values.
Reference: 4. <author> Hanrahan, P., Salzman, D., Aupperle, L.: </author> <title> A Rapid Hierarchical Radiosity Algorithm. </title> <journal> Computer Graphics 25(1991), </journal> <volume> No.4, </volume> <pages> 197-206. </pages>
Reference-contexts: That is actually not true for each patch with a large area. To achieve a good accuracy, adaptive meshing was integrated with radiosity in <ref> [4, 6, 10, 15] </ref>.
Reference: 5. <author> Kawai, J., Painter, J., Cohen, M.: </author> <title> Radioptimization-Goal Based Rendering. </title> <booktitle> Proceedings of SIGGRAPH'93, </booktitle> <pages> 147-154. </pages>
Reference-contexts: 1 Introduction The main application of realistic image synthesis in computer graphics is to create simulated scenes of photo realistic quality. Recently radiosity method becomes increasingly popular for determining global illumination in architectural modeling and virtual reality <ref> [5, 12] </ref> because it accurately portrays illumination effects such as shadows and interreflections in diffuse environments. An important application requirement is to provide real-time interaction when a user modifies a high-quality synthesized image in a computer aided design process.
Reference: 6. <author> Lischinski, D., Tampieri, F., Greenberg, D.: </author> <title> Discontinuity Meshing for Accurate Radiosity. </title> <journal> IEEE CG&A 12(1992), </journal> <volume> No.6, </volume> <pages> 25-39. </pages>
Reference-contexts: The intermediate result after a few iterations can be used for displaying and a user can revise the design based on this intermediate solution without waiting for the entire computation to end. A further improvement to increase the image quality of radiosity is to incorporate adaptive subdivision <ref> [6, 10] </ref>. It is important to further reduce the radiosity time since it still takes minutes to see the obvious improvement from one view to another. <p> That is actually not true for each patch with a large area. To achieve a good accuracy, adaptive meshing was integrated with radiosity in <ref> [4, 6, 10, 15] </ref>.
Reference: 7. <author> Liu, P., Bhatt, S.: </author> <title> Experiences with parallel N-body simulation. </title> <booktitle> Proceedings of 6th Annual ACM Symposium on Parallel Algorithms and Architectures(1994) 122-131. </booktitle>
Reference-contexts: Since the amount of computation differs for different patches, it is not sufficient to only make each processor have an equal number of patches. The problem of partitioning irregular data space has been studied in other scientific application areas, for example n-body simulations <ref> [7] </ref>. Usually the quadtree (octree) partitioning method is used and neighboring leafs are directly mapped to the same processor. This mapping may not be effective for our problem, which will be justified in our performance analysis. Dynamic load balancing that migrates patches between processors looks reasonable.
Reference: 8. <author> MacDonald, J., Booth, K.: </author> <title> Heuristics for ray tracing using space subdivision. </title> <booktitle> the Visual Computer 6 (1990) 153-166. </booktitle>
Reference-contexts: For the method discussed in Sect. 2.3, visibility test only uses surface geometry. It is done by casting rays from the current receiving patch to some sample points on the shooting patch. This process can be significantly accelerated by using the octree space partition <ref> [8] </ref>. To accelerate form-factor calculation, we can also fit a coarser mesh for the shooting patch by combining some of the tiny patches.
Reference: 9. <author> Paddon, D., Chalmers, A.: </author> <title> Parallel processing of the radiosity method. </title> <booktitle> Computer-Aided Design 26 (1994) 917-927. </booktitle>
Reference-contexts: A further improvement to increase the image quality of radiosity is to incorporate adaptive subdivision [6, 10]. It is important to further reduce the radiosity time since it still takes minutes to see the obvious improvement from one view to another. There have been several parallel algorithms proposed in <ref> [1, 2, 9, 11] </ref> but speedups for progressive radiosity with adaptive meshing are still low because the computation associated with patches in a 3D space is unstructured and the cost varies during iterations. <p> Furthermore, adaptive refinement of patches may increase the number of patches on some processors dynamically, consequently it worsens the load balance. Thus, load balancing is the main challenge in achieving high speedups <ref> [9] </ref>. Recent research [2, 9] improves parallel performance by concurrentizing several iterations on different processors. This is called to exploit control parallelism. In this scheme, synchronization is needed when several iterations modify the same patch object and communication overhead is high on distributed memory machines. <p> Furthermore, adaptive refinement of patches may increase the number of patches on some processors dynamically, consequently it worsens the load balance. Thus, load balancing is the main challenge in achieving high speedups [9]. Recent research <ref> [2, 9] </ref> improves parallel performance by concurrentizing several iterations on different processors. This is called to exploit control parallelism. In this scheme, synchronization is needed when several iterations modify the same patch object and communication overhead is high on distributed memory machines. <p> Scalability. The parallel time speedup for each test scene is shown in Fig. 9. This result is comparable to the recent results for progressive radiosity [2] without adaptive meshing, and is much better than previous results for both adaptive and non-adaptive progressive radiosity <ref> [9] </ref>. Due to the difficulties arising from adaptive meshing, the above experimental result shows that our algorithm deals with irregular and adaptive load variation very well. Distribution of computation time, idle time and communication overhead. <p> The communication cost is extremely low, used for selecting the shooting patch and broadcasting the data for the shooting patch. The load imbalance factor is within 10%. That is probably the best we can achieve for a static assignment in responding to the dynamically-changing workload. The previous work <ref> [9] </ref> using dynamic balancing does not have a good speedup because of high communication overhead. Table 2. Cost of communication and standard deviation of workload. Scene 1 Scene 2 Scene 3 Communication 0.87% 1.21% 1.65% SDev. of workload 9.94% 7.40% 9.78% Effectiveness of the hierarchical calculation strategy. <p> Here Speedup without is the speedup without using this strategy and Speedup with is the speedup using our method. The improvement is around 22% for scene 1, 16% for scene 2, and 24% for scene 3. That is another reason we can obtain a much better performance compared to <ref> [9] </ref>. 6 Conclusions We presented an efficient parallel progressive radiosity algorithm with adaptive patch refinement using a hierarchical computing and octree-based cyclic mapping scheme. This algorithm can significantly reduce the time in generating high-quality realistic images for real-time interaction.
Reference: 10. <author> Paulin, M., Jessel, J.: </author> <title> Adaptive mesh generation for progressive radiosity: A ray-tracing based algorithm. </title> <booktitle> Proceedings of Eurographics'94, </booktitle> <address> C421-C432. </address>
Reference-contexts: The intermediate result after a few iterations can be used for displaying and a user can revise the design based on this intermediate solution without waiting for the entire computation to end. A further improvement to increase the image quality of radiosity is to incorporate adaptive subdivision <ref> [6, 10] </ref>. It is important to further reduce the radiosity time since it still takes minutes to see the obvious improvement from one view to another. <p> That is actually not true for each patch with a large area. To achieve a good accuracy, adaptive meshing was integrated with radiosity in <ref> [4, 6, 10, 15] </ref>.
Reference: 11. <author> Recker, R., George, D., Greenberg, D.: </author> <title> Acceleration Techniques for Progressive Refinement Radiosity. </title> <journal> Computer Graphics 24(1990), No.2, </journal> <pages> 59-66. </pages>
Reference-contexts: A further improvement to increase the image quality of radiosity is to incorporate adaptive subdivision [6, 10]. It is important to further reduce the radiosity time since it still takes minutes to see the obvious improvement from one view to another. There have been several parallel algorithms proposed in <ref> [1, 2, 9, 11] </ref> but speedups for progressive radiosity with adaptive meshing are still low because the computation associated with patches in a 3D space is unstructured and the cost varies during iterations.
Reference: 12. <author> Schoeneman, C., Dorsey, J., Smits, B., Arvo, J., Greenberg, D.: </author> <title> Painting with Light. </title> <booktitle> Proceedings of SIGGRAPH'93, </booktitle> <pages> 143-146. </pages>
Reference-contexts: 1 Introduction The main application of realistic image synthesis in computer graphics is to create simulated scenes of photo realistic quality. Recently radiosity method becomes increasingly popular for determining global illumination in architectural modeling and virtual reality <ref> [5, 12] </ref> because it accurately portrays illumination effects such as shadows and interreflections in diffuse environments. An important application requirement is to provide real-time interaction when a user modifies a high-quality synthesized image in a computer aided design process.
Reference: 13. <author> Wallace, J., Elmquist, K., Haines, E.: </author> <title> A Ray Tracing Algorithm for Progressive Radiosity. </title> <journal> Computer Graphics 23(1989), </journal> <volume> No.3, </volume> <pages> 315-324. </pages>
Reference-contexts: At the present time, radiosity can be used for such cases but they are too time-consuming to accomplish real-time interaction. A compromise solution to reduce the radiosity time is to use progressive illumination calculation <ref> [3, 13] </ref>. The basic idea is to conduct a sequence of refinement iterations to improve the image quality. The intermediate result after a few iterations can be used for displaying and a user can revise the design based on this intermediate solution without waiting for the entire computation to end. <p> That is why form-factor calculation is the main concern in radiosity algorithms. Given area A 1 in the receiving patch and A 2 in the shooting patch, as shown in Fig. 3, <ref> [13] </ref> proposed a disk formula for approximating the analytic expression for form-factor from area A 2 to a differential area dA 1 on area A 1 . <p> That is actually not necessary. One good method for the form-factor calculation is discussed in <ref> [13] </ref> and reviewed in Sect. 2.3. We only need the radiosity and geometrical information of the shooting patch, the albedo and geometrical information of the receiving patches and occluding information implied in the octree space partition. Thus each processor only accesses local patch information and the replicated surface data.
Reference: 14. <author> Yu, Y., Ibarra, O., Yang, T.: </author> <title> Parallel Progressive Radiosity with Adaptive Meshing. </title> <institution> UCSB Computer Science Technical Report(1996). </institution>
Reference-contexts: There is a small area light source hanging above the center of the upper left quarter of the planar surface and the position of this light source is very close to that surface. One example is shown is Fig. 7. Based on an analysis <ref> [14] </ref> similar to that for Scenario 1, we can show our method can reach near optimal speedup (p) while the speedup of octree-based block mapping is much less than p.
Reference: 15. <author> Yu, Y., Peng, Q.: </author> <title> Multiresolution B-spline Radiosity. Proceedings of Eurograph-ics'95, C285-C298. This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: That is actually not true for each patch with a large area. To achieve a good accuracy, adaptive meshing was integrated with radiosity in <ref> [4, 6, 10, 15] </ref>.
References-found: 15

