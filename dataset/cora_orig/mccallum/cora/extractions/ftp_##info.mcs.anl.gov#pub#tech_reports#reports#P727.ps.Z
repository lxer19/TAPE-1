URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P727.ps.Z
Refering-URL: http://www.mcs.anl.gov/publications/abstracts/abstracts98.htm
Root-URL: http://www.mcs.anl.gov
Title: A Microkernel Design for Component-based Parallel Numerical Software Systems a mechanism for loading objects at
Author: Satish Balay, Bill Gropp, Lois Curfman McInnes, and Barry Smith 
Note: a few basic services, namely,  
Abstract: What is the minimal software infrastructure and what type of conventions are needed to simplify development of sophisticated parallel numerical application codes using a variety of software components that are not necessarily available as source code? We propose an opaque object-based model where the objects are dynamically loadable from the file system or network. The microkernel required to manage such a system needs to include, at most We are experimenting with these ideas in the context of extensible numerical software within the ALICE (Advanced Large-scale Integrated Computational Environment) project, where we are building the microkernel to manage the interoperability among various tools for large-scale scientific simulations. This paper presents some preliminary observations and conclusions from our work with microkernel design. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> ALICE Web page. http://www.mcs.anl.gov/alice, Mathematics and Computer Science Division, Argonne National Laboratory. </institution>
Reference-contexts: The microkernel work presented here forms part of a flexible architecture within the Advanced Large-scale Integrated Computational Environment (ALICE) <ref> [1] </ref>, under development at Argonne National Laboratory. We aim to provide low-overhead mechanisms to enable different groups to contribute and maintain their own libraries (as painlessly as possible) in a distributed fashion.
Reference: [2] <author> R. Armstrong and A. Cheung, </author> <title> POET (Parallel Object-oriented Environment and Toolkit) and frameworks for scientific distributed computing, </title> <booktitle> in Proceedings of HICSS97, </booktitle> <year> 1997. </year>
Reference-contexts: Such issues are under consideration by a variety of researchers, including <ref> [2, 20, 26, 25, 30, 3] </ref>. 2.2 Comparison of Approaches There are two main alternatives to the component model that we propose in this paper. One is a more library-oriented approach, with a long and successful history in numerical computing.
Reference: [3] <author> R. Armstrong et al., </author> <title> Common Component Architecture Working Group Web page. </title> <address> http://z.ca.sandia.gov/~cca-forum. </address>
Reference-contexts: Such issues are under consideration by a variety of researchers, including <ref> [2, 20, 26, 25, 30, 3] </ref>. 2.2 Comparison of Approaches There are two main alternatives to the component model that we propose in this paper. One is a more library-oriented approach, with a long and successful history in numerical computing. <p> For PVODE/PETSc interoperability we acknowledge support from the DOE2000 Initiative [11] and the work of Liyang Xu. In addition, we thank Paul Hovland, Boyanna Norris, and our colleagues in the DOE Common Component Architecture (CCA) Working Group <ref> [3] </ref> for stimulating discussions of issues in component design for high-performance scientific computing.
Reference: [4] <author> S. Balay, W. D. Gropp, L. C. McInnes, and B. F. Smith, </author> <title> PETSc Web page. http://www.mcs.anl.gov/petsc. [5] , Efficient management of parallelism in object oriented numerical software libraries, in Modern Software Tools in Scientific Computing, </title> <editor> E. Arge, A. M. Bruaset, and H. P. Langtangen, eds., </editor> <publisher> Birkhauser Press, </publisher> <year> 1997, </year> <pages> pp. 163-202. </pages>
Reference-contexts: the complementary capabilities of (1) mathematical sintering models of Zhang and Schneibel; (2) ODE solvers within the PVODE [17] software of Hindmarsh et al. of Lawrence Livermore National Laboratory, and (3) preconditioning techniques, matrix coloring tools for finite differencing Jacobian approximation, and parallel problem decomposition infrastructure within the PETSc software <ref> [4, 5] </ref>. PVODE and PETSc complement each other well because PVODE provides higher-order, adaptive ODE schemes and robust nonlinear solvers tailored for ODE solution, but does not focus on parallel preconditioners and coloring tools; likewise, PETSc does not provide higher-order ODE integrators. <p> For example, PETSc <ref> [4] </ref> provides a variety of C objects, while ISIS++ [8] provides a variety of C++ objects. * standardized object toolkit object toolkit that supports some standardized objects.
Reference: [6] <author> R. Barrett, M. Berry, T. F. Chan, J. Demmel, J. Donato, J. Dongarra, V. Eijkhout, R. Pozo, C. Romine, and H. V. der Vorst, </author> <title> Templates for the Solution of Linear Systems: Building Blocks for Iterative Methods, </title> <publisher> SIAM, </publisher> <address> Philadelphia, PA, </address> <year> 1994. </year>
Reference-contexts: However, this approach still does not work well for scientific computing because of the wide variety of needs within meaningful applications. Templates <ref> [6] </ref> (algorithmic, not C++ templates) have been proposed as a method for providing advanced numerical methods to applications writers without dictating a particular choice of data structure or even interface.
Reference: [7] <author> G. Burns, R. Daoud, and J. Vaigl, LAM: </author> <title> An open cluster environment for MPI, </title> <booktitle> in Proceedings of Supercomputing Symposium '94, </booktitle> <editor> J. W. Ross, ed., </editor> <address> University of Toronto, </address> <year> 1994, </year> <pages> pp. 379-386. </pages>
Reference-contexts: For example, PETSc [4] provides a variety of C objects, while ISIS++ [8] provides a variety of C++ objects. * standardized object toolkit object toolkit that supports some standardized objects. X-windows and MPI [24] are examples of standards for object toolkits, while MPICH [15] and LAM <ref> [7] </ref> are examples of standardized object toolkits that implement the MPI standard. * component an encapsulated software object that provides a certain set of functionalities or services and can be used in conjunction with other components to build applications.
Reference: [8] <author> R. L. Clay, K. Mish, and A. B. Williams, </author> <note> ISIS++ Web page. http://ca.sandia.gov/isis. </note>
Reference-contexts: For example, PETSc [4] provides a variety of C objects, while ISIS++ <ref> [8] </ref> provides a variety of C++ objects. * standardized object toolkit object toolkit that supports some standardized objects.
Reference: [9] <author> R. Clay et al., </author> <title> Equation Solver Interface Working Group Web page. </title> <note> http://z.ca.sandia.gov/esi. 10 </note>
Reference-contexts: To enable more dynamic component-based interactions, we must consider issues such as mechanisms for specifying software APIs (input/output parameters) and behavior (services that a toolkit provides as well as those it requires), approaches for establishing dynamic connections among tools, "standard" interfaces for particular functionalities (see, e.g., <ref> [9] </ref> for linear algebra interface work), and language interoperability (see, e.g., [10],[21]). Such issues are under consideration by a variety of researchers, including [2, 20, 26, 25, 30, 3]. 2.2 Comparison of Approaches There are two main alternatives to the component model that we propose in this paper.
Reference: [10] <author> A. Cleary, S. Kohn, S. Smith, and B. Smolinski, </author> <title> Language interoperability mechanisms for high-performance scientific applications, </title> <booktitle> in Proceedings of the SIAM Workshop on Object Oriented Methods for Inter-operable Scientific and Engineering Computing, </booktitle> <publisher> SIAM, </publisher> <month> Oct. 21-23 </month> <year> 1998. </year> <note> (to appear). </note>
Reference: [11] <institution> DOE2000 Initiative Web page. </institution> <note> http://www.mcs.anl.gov/DOE2000. </note>
Reference-contexts: Our experiences thus far are merely the first steps toward much larger computing and component sharing. Acknowledgments We thank Wen Zhang for working with us on the parallelization of her sintering simulations. For PVODE/PETSc interoperability we acknowledge support from the DOE2000 Initiative <ref> [11] </ref> and the work of Liyang Xu. In addition, we thank Paul Hovland, Boyanna Norris, and our colleagues in the DOE Common Component Architecture (CCA) Working Group [3] for stimulating discussions of issues in component design for high-performance scientific computing.
Reference: [12] <author> L. Frietag, M. Jones, and P. Plassmann, </author> <title> Component integration for unstructured mesh algorithms and software, </title> <booktitle> in Proceedings of the SIAM Workshop on Object Oriented Methods for Inter-operable Scientific and Engineering Computing, </booktitle> <publisher> SIAM, </publisher> <month> Oct. 21-23 </month> <year> 1998. </year> <title> (to appear). [13] , The scalability of mesh improvement algorithms, in Algorithms for Parallel Processing, </title> <editor> M. T. Heath, A. Ranade, and R. S. Schreiber, eds., </editor> <volume> vol. </volume> <booktitle> 105 of The IMA Volumes in Mathematics and Its Applications, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1998, </year> <pages> pp. 185-212. </pages>
Reference-contexts: This capability has enabled interfacing between the unstructured meshing tools of SUMAA3d [13] and the algebraic solvers of PETSc, without introducing a single change to either software package <ref> [12] </ref>. * query (Object,char *name,Object *) retrieves an object that has been attached to the first object via attach (). * attachfunction (Object,char *name,char *fname) attaches a function pointer to an object.
Reference: [14] <author> W. Gropp, </author> <title> Exploiting existing software in libraries: Successes, failures, and reasons why, </title> <booktitle> in Proceedings of the SIAM Workshop on Object Oriented Methods for Inter-operable Scientific and Engineering Computing, </booktitle> <publisher> SIAM, </publisher> <month> Oct. 21-23 </month> <year> 1998. </year> <note> (to appear). </note>
Reference-contexts: Preliminary observations and directions of future work are discussed in Section 5. 2 Interoperability Issues As we investigate techniques for dynamic component-based interactions in scientific computing, we must bear in mind our target customers <ref> [14] </ref>. The microkernel work presented here forms part of a flexible architecture within the Advanced Large-scale Integrated Computational Environment (ALICE) [1], under development at Argonne National Laboratory.
Reference: [15] <author> W. Gropp and E. Lusk, </author> <note> MPICH Web page. http://www.mcs.anl.gov/mpi/mpich. </note>
Reference-contexts: For example, PETSc [4] provides a variety of C objects, while ISIS++ [8] provides a variety of C++ objects. * standardized object toolkit object toolkit that supports some standardized objects. X-windows and MPI [24] are examples of standards for object toolkits, while MPICH <ref> [15] </ref> and LAM [7] are examples of standardized object toolkits that implement the MPI standard. * component an encapsulated software object that provides a certain set of functionalities or services and can be used in conjunction with other components to build applications.
Reference: [16] <author> W. D. Gropp, D. E. Keyes, L. C. McInnes, and M. D. Tidriri, </author> <title> Globalized Newton-Krylov-Schwarz algorithms and software for parallel implicit CFD, </title> <type> Tech. Rep. 98-24, </type> <institution> ICASE, </institution> <month> Aug. </month> <year> 1998. </year>
Reference-contexts: For example, several projects that motivate our current work are the modeling of microstructural evolution in sintering [31, 32, 33], astrophysical thermonuclear simulations [27], and multi-model aerodynamic computations <ref> [23, 16, 22] </ref>.
Reference: [17] <author> A. Hindmarsh et al., </author> <note> PVODE Web page. http://www.llnl.gov/CASC/PVODE. </note>
Reference-contexts: For large-scale parallel simulations, we have incorporated the complementary capabilities of (1) mathematical sintering models of Zhang and Schneibel; (2) ODE solvers within the PVODE <ref> [17] </ref> software of Hindmarsh et al. of Lawrence Livermore National Laboratory, and (3) preconditioning techniques, matrix coloring tools for finite differencing Jacobian approximation, and parallel problem decomposition infrastructure within the PETSc software [4, 5].
Reference: [18] <author> P. Hovland, B. Norris, and B. Smith, </author> <title> Developing a derivative-enhanced object-oriented toolkit for scientific computations, </title> <booktitle> in Proceedings of the SIAM Workshop on Object Oriented Methods for Inter-operable Scientific and Engineering Computing, </booktitle> <publisher> SIAM, </publisher> <month> Oct. 21-23 </month> <year> 1998. </year> <note> (to appear). </note>
Reference-contexts: For example, the sintering simulations could potentially benefit from algorithmic alternatives for preconditioning and ODE solution provided by different software packages as well as complementary capabilities such as derivative-enhanced sensitivity analysis <ref> [18] </ref>, visualization, and steering. One-to-one interfacing is excessively burdensome, and the current generation of infrastructure is inadequate, even for software packages that individually have been built using object-oriented design.
Reference: [19] <author> InfoBus Web page. </author> <note> http://www.java.sun.com/beans/infobus. </note>
Reference-contexts: As other component infrastructures begin to address the issue of high performance, we can move our object design to those platforms. For example, an implementation in Java using something like InfoBus <ref> [19] </ref> to communicate data and Java's mechanisms for managing components (or remote method invocation for more distributed applications) would still need to provide the component operations that we describe here. 3 Scope of Solution We specify two design requirements for this work: basic functionality should be as efficient as standard procedural
Reference: [20] <author> Infospheres Web page. </author> <note> http://www.infospheres.caltech.edu/. </note>
Reference-contexts: Such issues are under consideration by a variety of researchers, including <ref> [2, 20, 26, 25, 30, 3] </ref>. 2.2 Comparison of Approaches There are two main alternatives to the component model that we propose in this paper. One is a more library-oriented approach, with a long and successful history in numerical computing.
Reference: [21] <author> B. Janssen, M. Spreitzer, D. Larner, and C. </author> <title> Jacobi, Inter-Language Unification reference manual. </title> <institution> ftp://ftp.parc.xerox.com/ilu/ilu.html, Xerox Corporation. </institution>
Reference: [22] <author> D. Kaushik, D. Keyes, and B. Smith, </author> <title> On the interaction of architecture and algorithm in the domain based parallelism of an unstructured grid incompressible flow code, in Domain Decomposition Methods 10, </title> <publisher> AMS, </publisher> <year> 1998, </year> <pages> pp. 287-295. </pages>
Reference-contexts: For example, several projects that motivate our current work are the modeling of microstructural evolution in sintering [31, 32, 33], astrophysical thermonuclear simulations [27], and multi-model aerodynamic computations <ref> [23, 16, 22] </ref>.
Reference: [23] <author> D. E. Keyes et al., </author> <title> Multi-Model Multi-Domain Computational Methods in Aerodynamics and Acoustics Web page. </title> <address> http://www.cs.odu.edu/~keyes/nsf. </address>
Reference-contexts: For example, several projects that motivate our current work are the modeling of microstructural evolution in sintering [31, 32, 33], astrophysical thermonuclear simulations [27], and multi-model aerodynamic computations <ref> [23, 16, 22] </ref>.
Reference: [24] <author> MPI: </author> <title> A message-passing interface standard, </title> <booktitle> International J. Supercomputing Applications, </booktitle> <month> 8 </month> <year> (1994). </year>
Reference-contexts: For example, PETSc [4] provides a variety of C objects, while ISIS++ [8] provides a variety of C++ objects. * standardized object toolkit object toolkit that supports some standardized objects. X-windows and MPI <ref> [24] </ref> are examples of standards for object toolkits, while MPICH [15] and LAM [7] are examples of standardized object toolkits that implement the MPI standard. * component an encapsulated software object that provides a certain set of functionalities or services and can be used in conjunction with other components to build
Reference: [25] <author> S. G. Parker, D. W. Weinstein, and C. R. Johnson, </author> <title> The SCIRun computational steering system, in Modern Software Tools in Scientific Computing, </title> <editor> E. Arge, A. M. Bruaset, and H. P. Langtangen, eds., </editor> <publisher> Birkhauser Press, </publisher> <year> 1997. </year>
Reference-contexts: Such issues are under consideration by a variety of researchers, including <ref> [2, 20, 26, 25, 30, 3] </ref>. 2.2 Comparison of Approaches There are two main alternatives to the component model that we propose in this paper. One is a more library-oriented approach, with a long and successful history in numerical computing.
Reference: [26] <author> PSEware Web page. </author> <note> http://www.extreme.indiana.edu/pseware/. </note>
Reference-contexts: Such issues are under consideration by a variety of researchers, including <ref> [2, 20, 26, 25, 30, 3] </ref>. 2.2 Comparison of Approaches There are two main alternatives to the component model that we propose in this paper. One is a more library-oriented approach, with a long and successful history in numerical computing.
Reference: [27] <author> R. Rosner et al., </author> <note> University of Chicago Center on Astrophysical Thermonuclear Flashes Web page. http://www.asci.uchicago.edu. </note>
Reference-contexts: 1 Introduction The complexity of large-scale scientific simulations, often collaborative efforts among scientists and engineers, necessitates the combined use of multiple software packages developed by different groups. For example, several projects that motivate our current work are the modeling of microstructural evolution in sintering [31, 32, 33], astrophysical thermonuclear simulations <ref> [27] </ref>, and multi-model aerodynamic computations [23, 16, 22].
Reference: [28] <author> B. F. Smith and W. D. Gropp, </author> <title> The design of data-structure-neutral libraries for the iterative solution of sparse linear systems, </title> <booktitle> Scientific Programming, 5 (1996), </booktitle> <pages> pp. 329-336. </pages>
Reference-contexts: PVODE and PETSc complement each other well because PVODE provides higher-order, adaptive ODE schemes and robust nonlinear solvers tailored for ODE solution, but does not focus on parallel preconditioners and coloring tools; likewise, PETSc does not provide higher-order ODE integrators. Due to data-structure-neutral design <ref> [28] </ref> with well-defined application programming interfaces (APIs), this interoperability required no changes to the source code of either PVODE or PETSc.
Reference: [29] <author> C. Szyperski, </author> <title> Component Software: Beyond Object-Oriented Programming, </title> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1997. </year>
Reference-contexts: A component consists of an API and one or more component implementations, and conforms to a prescribed behavior within the context of a given framework. This is our working definition of the term component; however, since this term is so overloaded with partial meanings (see, e.g., <ref> [29] </ref>), and since the remainder of this discussion focuses on functionality within encapsulated software objects that in part comprise components, the remainder of this discussion will not employ the term component.
Reference: [30] <author> S. Weerawarana, E. N. Houstis, J. R. Rice, A. C. Catlin, C. Crabill, C. C. Chui, and S. Markus, PDELab: </author> <title> An object-oriented framework for building problem solving environments for PDE based applications, </title> <type> Tech. Rep. </type> <institution> CSD-TR-94-021, Department of Computer Sciences, Purdue University, </institution> <year> 1994. </year>
Reference-contexts: Such issues are under consideration by a variety of researchers, including <ref> [2, 20, 26, 25, 30, 3] </ref>. 2.2 Comparison of Approaches There are two main alternatives to the component model that we propose in this paper. One is a more library-oriented approach, with a long and successful history in numerical computing.
Reference: [31] <author> W. Zhang, </author> <title> Using MOL to solve a high order nonlinear PDE with a moving boundary in the simulation of a sintering process, </title> <journal> Appl. Numer. Math., </journal> <volume> 20 (1996), </volume> <pages> pp. 235-244. </pages>
Reference-contexts: 1 Introduction The complexity of large-scale scientific simulations, often collaborative efforts among scientists and engineers, necessitates the combined use of multiple software packages developed by different groups. For example, several projects that motivate our current work are the modeling of microstructural evolution in sintering <ref> [31, 32, 33] </ref>, astrophysical thermonuclear simulations [27], and multi-model aerodynamic computations [23, 16, 22]. <p> Zhang and J. Schneibel <ref> [31, 32, 33] </ref>. At the heart of these simulations is the solution of a set of coupled ordinary differential equations (ODEs), which requires the solution of nonlinear systems, which in turn can be addressed by preconditioned Newton-Krylov methods.
Reference: [32] <author> W. Zhang and I. Gladwell, </author> <title> The sintering of two particles by surface and grain boundary diffusion a three-dimensional numerical study, </title> <institution> Comp. Mater. Sci. </institution> <note> (in press). </note>
Reference-contexts: 1 Introduction The complexity of large-scale scientific simulations, often collaborative efforts among scientists and engineers, necessitates the combined use of multiple software packages developed by different groups. For example, several projects that motivate our current work are the modeling of microstructural evolution in sintering <ref> [31, 32, 33] </ref>, astrophysical thermonuclear simulations [27], and multi-model aerodynamic computations [23, 16, 22]. <p> Zhang and J. Schneibel <ref> [31, 32, 33] </ref>. At the heart of these simulations is the solution of a set of coupled ordinary differential equations (ODEs), which requires the solution of nonlinear systems, which in turn can be addressed by preconditioned Newton-Krylov methods.
Reference: [33] <author> W. Zhang and J. H. Schneibel, </author> <title> Microstructural Evolution in Sintering an Experimental, Mathematical and Numerical Study. </title> <address> http://www.oakland.edu/~w2zhang/sintering.htm. </address>
Reference-contexts: 1 Introduction The complexity of large-scale scientific simulations, often collaborative efforts among scientists and engineers, necessitates the combined use of multiple software packages developed by different groups. For example, several projects that motivate our current work are the modeling of microstructural evolution in sintering <ref> [31, 32, 33] </ref>, astrophysical thermonuclear simulations [27], and multi-model aerodynamic computations [23, 16, 22]. <p> Zhang and J. Schneibel <ref> [31, 32, 33] </ref>. At the heart of these simulations is the solution of a set of coupled ordinary differential equations (ODEs), which requires the solution of nonlinear systems, which in turn can be addressed by preconditioned Newton-Krylov methods.
References-found: 31

