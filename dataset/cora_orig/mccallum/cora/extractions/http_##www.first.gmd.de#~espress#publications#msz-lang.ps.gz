URL: http://www.first.gmd.de/~espress/publications/msz-lang.ps.gz
Refering-URL: http://www.first.gmd.de/~espress/gesamt_public.html
Root-URL: 
Title: The SZ Notation Version 1.0  
Author: Robert Bussow, Robert Geisler, Wolfgang Grieskamp, Marcus Klar 
Affiliation: Bericht-Nr. 97-26  
Abstract-found: 0
Intro-found: 1
Reference: [BDG + 96] <author> Robert Bussow, Heiko Dorr, Robert Geisler, Wolfgang Grieskamp, and Marcus Klar. </author> <title> SZ - Ein Ansatz zur systematischen Verbindung von Z und Statecharts. </title> <type> Technical Report 96-32, </type> <institution> Technische Universitat Berlin, Fachbereich Informatik, </institution> <month> February </month> <year> 1996. </year>
Reference: [BG97] <author> Robert Bussow and Wolfgang Grieskamp. </author> <title> Combining Z and temporal interval logics for the formalization of properties and behaviors of embedded systems. </title> <editor> In R. K. Shyamasundar and K. Ueda, editors, </editor> <booktitle> Advances in Computing Science - Asian '97, volume 1345 of LNCS, </booktitle> <pages> pages 46-56. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: This extension of Z is called Dynamic Z and is described in <ref> [BG97] </ref>. The following explanations and definitions can be skipped by users of SZ who do not intend to use Dynamic Z or temporal logic. We give a short informal introduction to Dynamic Z. For the semantics of Dynamic Z, see [BG97]. <p> of Z is called Dynamic Z and is described in <ref> [BG97] </ref>. The following explanations and definitions can be skipped by users of SZ who do not intend to use Dynamic Z or temporal logic. We give a short informal introduction to Dynamic Z. For the semantics of Dynamic Z, see [BG97]. The interplay between Dynamic Z and SZ is discussed in the next section. 5.1 Dynamic Values and Dynamic Schemata Dynamic Z adds to Z the concepts of dynamic values and dynamic schemata.
Reference: [BGK97] <author> R. Bussow, R. Geisler, and M. Klar. </author> <title> Spezifikation eingebetteter Steuerungssysteme mit Z und Statecharts. </title> <booktitle> In Tagungsband zur 5. Fachtagung Entwurf komplexer Au-tomatisierungssysteme. </booktitle> <institution> TU Braunschweig, </institution> <year> 1997. </year>
Reference: [BGK98] <author> R. Bussow, R. Geisler, and M. Klar. </author> <title> Specifying safety-critical embedded systems with statecharts and Z: A case study. </title> <note> Accepted for publication at ETAPS'98, </note> <year> 1998. </year>
Reference: [BGKM97] <author> R. Bussow, R. Geisler, M. Klar, and S. Mann. </author> <title> Spezifikation einer Lichtsignalanlagen-Steuerung mit SZ. </title> <type> Technical Report 97-13, </type> <institution> Technische Universitat Berlin, Fachbere-ich Informatik, </institution> <year> 1997. </year>
Reference: [CW97] <author> M. Conrad and D. Wetter. </author> <title> An adaptive cruise control system a case study for the industrial use of formal methods. </title> <booktitle> In Proceedings of the First Workshop on Formal Design of Safety Critical Embedded Systems, </booktitle> <year> 1997. </year>
Reference: [GHD98] <author> Wolfgang Grieskamp, Maritta Heisel, and Heiko Dorr. </author> <title> Specifying safety-critical embedded systems with statecharts and Z: An agenda for cyclic software components. </title> <note> Accepted for publication at ETAPS'98, </note> <year> 1998. </year>
Reference: [Guh97] <author> Markus Guhe. </author> <title> Formale Spezifikation und systematische Implementierung der Steue-rung einer Lichtsignalanlage in SZ . Diplomarbeit, </title> <institution> Technische Universitat Berlin, </institution> <year> 1997. </year>
Reference: [Har87] <author> David Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8(3) </volume> <pages> 231-274, </pages> <month> June </month> <year> 1987. </year>
Reference: [HLN + 90] <author> David Harel, Hagi Lachover, Amnon Naamad, Amir Pnueli, Michal Politi, Rivi Sher-man, Aharon Shtull-Trauring, and Mark Trakhtenbrot. Statemate: </author> <title> A working environment for the development of complex reactive systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16 No. 4, </volume> <month> April </month> <year> 1990. </year>
Reference-contexts: Using Statemate E Using Statemate The operational behavior as well as the configuration of a process class can be specified with the Statemate tool <ref> [HLN + 90] </ref>. The ESPRESS tool environment provides support to translate Statemate models into SZ and thus supplement a SZ specification with Statemate specifications. E.1 Configurations Statemate activity charts can be used to describe SZ configurations.
Reference: [HN96] <author> David Harel and Amnon Naamad. </author> <title> The statemate semantics of statecharts. </title> <journal> ACM Trans. Soft. Eng. </journal> <note> Method., </note> <month> October </month> <year> 1996. </year>
Reference-contexts: Whenever the value of x is changed, y and z are changed implicitly, according to the predicate. 4.7 An Outline of the Step Algorithm We give a short explanation of the statecharts step algorithm. For a detailed description see <ref> [HN96] </ref>. The input for the step algorithm is the current process status (), e.g. the states the process currently resides in and a binding of the variables of the data space. Using this information, the set of enabled transitions is computed.
Reference: [HP96] <author> David Harel and Michael Politi. </author> <title> Modeling reactive systems with statecharts: The statemate approach. </title> <publisher> i-Logix Inc, </publisher> <address> Three Riverside Drive, Andover, MA 01810, USA, </address> <month> June </month> <year> 1996. </year> <title> Part No. </title> <journal> D-1100-43, </journal> <volume> 6/96. </volume>
Reference-contexts: And states are additionally partitioned with dashed lines. Boxes denoting an xor state contain a statechart. Boxes denoting an and-state contain a statechart in each partition. A statechart can contain default, history, deep history, or, fork and junction connectors. These connectors are described in <ref> [HP96, p. 4-13] </ref> in detail. Transitions are labeled arrows that connect states and connectors. Default connectors may not be targets of a transition. <p> Note that an activity chart of the class might have a control activity. This control activity always denotes the root statechart. E.3 Statemate Label Expressions A subset of the Statemate textual expression language is supported <ref> [HP96] </ref>. Generally, it is intended that guards and actions are specified using pure SZ and the Statemate textual language is only used for simple logical operators such as and, or, or not. <p> In particular, loops and context variables (variables prefixed by $), bit operations, arrays, records, subroutines (specified in Statemate) and queues are not supported. 7 Subroutines are introduced in Statemate Magnum 1.2 and documented in the updated version of <ref> [HP96] </ref> shipped with the release. 30 E.

References-found: 12

