URL: ftp://ftp.cs.huji.ac.il/users/transis/idish/dimacs98.ps
Refering-URL: http://www.cs.huji.ac.il/~grishac/grishac.html
Root-URL: http://www.cs.huji.ac.il
Title: Scalable Group Membership Services for Novel Applications  
Author: Tal Anker, Gregory V. Chockler, Danny Dolev, and Idit Keidar 
Note: DIMACS Series in Discrete Mathematics and Theoretical Computer Science  
Abstract: Group communication is a useful abstraction in the development of highly available distributed and communication-oriented applications in wide area networks (WANs). The most important aspects of this abstraction are the dynamic maintenance of group membership and its diverse semantics for interleaving membership change notifications within the flow of regular messages. In this paper we propose a new architecture for a scalable group membership service for wide area environments. Our architecture provides two different service levels and their semantics, each geared to different applications with different needs: The congress membership service which provides simple semantics of membership approximation, and the moshe service, which extends congress, provides full virtual synchrony semantics. The novelty of our design is in its client-server approach, which allows lightweight clients to benefit from advanced membership services. Furthermore, our design supports the coexistence of full-fledged clients along with thin clients. 
Abstract-found: 1
Intro-found: 1
Reference: [ABCD96] <author> Y. Amir, D. Breitgand, G. Chockler, and D. Dolev, </author> <title> Group communication as an infrastructure for distributed system management, </title> <booktitle> 3rd International Workshop on Services in Distributed and Networked Environment (SDNE), </booktitle> <month> June </month> <year> 1996, </year> <pages> pp. 84-91. </pages>
Reference-contexts: CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR change notifications with regular messages. Other examples are pay-TV and highly-available video-on-demand servers [ACK + 97]. On the other end of the spectrum, consistent data replication may greatly benefit from strong semantics <ref> [BJ87, ABCD96, KD96, FLS97, ADMSM94, SM98] </ref>. For example, some group communication systems provide virtual synchrony semantics, which synchronize membership notifications with regular messages and thus simulate a "benign" world in which message delivery is reliable within the set of live processes. <p> There are many different formulations of group membership services (some examples may be found in [VKCD98, DMS94, DMS95, BDM97]), and various definitions of virtual synchrony semantics (e.g., [VKCD98, BJ87, FvR95, MAMSA94]). Our protocol provides semantics which have been proven useful for several distributed applications <ref> [ABCD96, KD96, FLS97, ADMSM94, SM98] </ref>. In Section 5.1 we specify the semantics provided by the moshe VS membership protocol. Numerous group membership protocols providing similar semantics were constructed (e.g., [CS95, AMMS + 95, MMSA + 96, EMS95, ADKM92, MPS91, MSMA91, DMS94, MS94, BDM97]). <p> Virtual synchrony requires synchronization among the applications and the membership service. This synchronization greatly facilitates the design of applications that require consistency (e.g., applications with shared data <ref> [BJ87, ABCD96, KD96, FLS97, ADMSM94] </ref>), 18 TAL ANKER, GREGORY V. CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR but is too costly for applications that require real-time message delivery (e.g., video transmission). Therefore, we provide virtually synchronous communication only for groups that explicitly request this service. We have implemented moshe in Java.
Reference: [ABDL96] <author> T. Anker, D. Breitgand, D. Dolev, and Z. Levy, </author> <title> Congress: CONnection-oriented Group-address RESolution Service, </title> <type> Tech. Report CS96-23, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <month> December </month> <year> 1996, </year> <note> Available from: http://www.cs.huji.ac.il/~transis/. </note>
Reference-contexts: In addition, network topology changes and client or server crash/recovery events 1 change the topology of the spanning tree. Obviously, since congress operates in an asynchronous environment, the spanning tree of a group can only be a best-effort approximation. The details of the congress algorithm may be found in <ref> [ABDL96, ABDL97] </ref>. 4.4. congress guarantees. In this section, we intuitively describe the properties that congress guarantees w.r.t. the membership information it provides.
Reference: [ABDL97] <author> T. Anker, D. Breitgand, D. Dolev, and Z. Levy, </author> <title> Congress: Connection-oriented group-address resolution service, </title> <booktitle> Proceedings of SPIE on Broadband Networking Technologies, </booktitle> <month> November 2-3 </month> <year> 1997. </year>
Reference-contexts: In addition, our membership server provides advanced services such as a hierarchical directory of groups and secure group services. The two different service semantics are geared towards different kinds of applications: the congress <ref> [ABDL97, Ank97] </ref> membership service provides simple semantics of membership approximation, and the moshe [KSDM] service, which extends congress, provides full virtual synchrony semantics. In our design, membership is not maintained by every process, but only by a few dedicated servers. <p> In addition, network topology changes and client or server crash/recovery events 1 change the topology of the spanning tree. Obviously, since congress operates in an asynchronous environment, the spanning tree of a group can only be a best-effort approximation. The details of the congress algorithm may be found in <ref> [ABDL96, ABDL97] </ref>. 4.4. congress guarantees. In this section, we intuitively describe the properties that congress guarantees w.r.t. the membership information it provides.
Reference: [ACK + 97] <author> T. Anker, G. Chockler, I. Keidar, M. Rozman, and J. </author> <title> Wexler, Exploiting group communication for highly available video-on-demand services, </title> <booktitle> Proceedings of the IEEE 13th International Conference on Advanced Science and Technology (ICAST 97) and the 2nd International Conference on Multimedia Information Systems (ICMIS 97), </booktitle> <month> April </month> <year> 1997, </year> <pages> pp. 265-270. </pages>
Reference-contexts: Idit Keidar's research was supported by the Israeli Ministry of Science. c fl0000 (copyright holder) 1 2 TAL ANKER, GREGORY V. CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR change notifications with regular messages. Other examples are pay-TV and highly-available video-on-demand servers <ref> [ACK + 97] </ref>. On the other end of the spectrum, consistent data replication may greatly benefit from strong semantics [BJ87, ABCD96, KD96, FLS97, ADMSM94, SM98].
Reference: [ACM96] <institution> ACM, Commun. </institution> <note> acm 39(4), special issue on Group Communications Systems, </note> <month> April </month> <year> 1996. </year>
Reference-contexts: 1. Introduction Group communication <ref> [ACM96] </ref> is an important abstraction, widely used for distributed and communication-oriented applications. Such applications typically require the coordination of large and dynamic sets of processes at different sites. The group communication abstraction is essential for the modular design of group-ware and other multi-user applications in such networks.
Reference: [ADKM92] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki, </author> <title> Membership algorithms for multi-cast communication groups, </title> <booktitle> 6th International Workshop on Distributed Algorithms (WDAG), </booktitle> <month> November </month> <year> 1992, </year> <pages> pp. 292-312. </pages>
Reference: [ADMSM94] <author> Y. Amir, D. Dolev, P. M. Melliar-Smith, and L. E. Moser, </author> <title> Robust and Efficient Replication using Group Communication., </title> <type> Tech. Report CS94-20, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <year> 1994. </year>
Reference-contexts: CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR change notifications with regular messages. Other examples are pay-TV and highly-available video-on-demand servers [ACK + 97]. On the other end of the spectrum, consistent data replication may greatly benefit from strong semantics <ref> [BJ87, ABCD96, KD96, FLS97, ADMSM94, SM98] </ref>. For example, some group communication systems provide virtual synchrony semantics, which synchronize membership notifications with regular messages and thus simulate a "benign" world in which message delivery is reliable within the set of live processes. <p> There are many different formulations of group membership services (some examples may be found in [VKCD98, DMS94, DMS95, BDM97]), and various definitions of virtual synchrony semantics (e.g., [VKCD98, BJ87, FvR95, MAMSA94]). Our protocol provides semantics which have been proven useful for several distributed applications <ref> [ABCD96, KD96, FLS97, ADMSM94, SM98] </ref>. In Section 5.1 we specify the semantics provided by the moshe VS membership protocol. Numerous group membership protocols providing similar semantics were constructed (e.g., [CS95, AMMS + 95, MMSA + 96, EMS95, ADKM92, MPS91, MSMA91, DMS94, MS94, BDM97]). <p> Virtual synchrony requires synchronization among the applications and the membership service. This synchronization greatly facilitates the design of applications that require consistency (e.g., applications with shared data <ref> [BJ87, ABCD96, KD96, FLS97, ADMSM94] </ref>), 18 TAL ANKER, GREGORY V. CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR but is too costly for applications that require real-time message delivery (e.g., video transmission). Therefore, we provide virtually synchronous communication only for groups that explicitly request this service. We have implemented moshe in Java.
Reference: [AMMS + 93] <author> Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, and P. Ciarfella, </author> <title> Fast message ordering and membership using a logical token-passing ring, </title> <booktitle> 13th International Conference on Distributed Computing Systems (ICDCS), </booktitle> <month> May </month> <year> 1993, </year> <pages> pp. 551-560. </pages>
Reference: [AMMS + 95] <author> Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, and P. Ciarfella, </author> <title> The totem single-ring ordering and membership protocol, </title> <journal> ACM Trans. Comput. Syst. </journal> <volume> 13 (1995), no. </volume> <month> 4. </month> <title> SCALABLE GROUP MEMBERSHIP SERVICES FOR NOVEL APPLICATIONS 19 </title>
Reference: [Ank97] <author> T. Anker, </author> <title> Congress: CONnection-oriented Group-address RESolution Service, </title> <type> Master's thesis, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <year> 1997. </year>
Reference-contexts: In addition, our membership server provides advanced services such as a hierarchical directory of groups and secure group services. The two different service semantics are geared towards different kinds of applications: the congress <ref> [ABDL97, Ank97] </ref> membership service provides simple semantics of membership approximation, and the moshe [KSDM] service, which extends congress, provides full virtual synchrony semantics. In our design, membership is not maintained by every process, but only by a few dedicated servers. <p> This membership will consist of exactly the set of members of G during the interval [t 1 ; t 2 ]. The stronger guarantees are formulated and proven in <ref> [Ank97] </ref>. 5. Virtually synchronous membership services Some applications require membership services with only weak semantics, and some require strong semantics. Applications that need to consistently maintain a replicated state (e.g., coherent cache), greatly benefit from virtually synchronous communication and membership semantics.
Reference: [BDM97] <author> O. Babaoglu, R. Davoli, and A. Montresor, </author> <title> Partitionalbe Group Membership: Specification and Algorithms, </title> <type> TR UBLCS97-1, </type> <institution> Department of Conmputer Science, University of Bologna, </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: The moshe membership service provides such semantics for groups that explicitly request this service. We call such groups VS groups. The protocol that implements these semantics is the moshe VS membership protocol. There are many different formulations of group membership services (some examples may be found in <ref> [VKCD98, DMS94, DMS95, BDM97] </ref>), and various definitions of virtual synchrony semantics (e.g., [VKCD98, BJ87, FvR95, MAMSA94]). Our protocol provides semantics which have been proven useful for several distributed applications [ABCD96, KD96, FLS97, ADMSM94, SM98]. In Section 5.1 we specify the semantics provided by the moshe VS membership protocol. <p> We have removed the causal order, total order, and safe delivery properties from that semantic, in the belief that these are optional properties that one might build on top of this service. There are other group membership specifications in the literature, such as [FvR95], <ref> [BDM97] </ref> and [DMS95, VKCD98]. These differ in various details, but have much in common with the semantic that is used here. 5.2. Implementation of the moshe VS membership protocol. In this section we describe an overview of the implementation of the moshe VS membership protocol.
Reference: [BFHR98] <author> K. Birman, R. Friedman, M. Hayden, and I. Rhee, </author> <title> Middleware support for distributed multimedia and collaborative computing, </title> <journal> Multimedia Computing and Networking (MMCN98), </journal> <note> 1998, To appear. </note>
Reference-contexts: Different applications utilize group communication for different purposes, and hence require different semantics from the group membership service they utilize (as explained in <ref> [BFHR98, CHKD96, Bir96] </ref>). For example, video conferencing applications need a general knowledge of which peers are interested in joining the conference, in order to know where to multicast the video stream, and where to receive it from. Such applications do not require the synchronization of membership 1991 Mathematics Subject Classification.
Reference: [Bir96] <author> K. Birman, </author> <title> Building Secure and Reliable Network Applications, </title> <type> ch. 18, Manning, </type> <year> 1996. </year>
Reference-contexts: Different applications utilize group communication for different purposes, and hence require different semantics from the group membership service they utilize (as explained in <ref> [BFHR98, CHKD96, Bir96] </ref>). For example, video conferencing applications need a general knowledge of which peers are interested in joining the conference, in order to know where to multicast the video stream, and where to receive it from. Such applications do not require the synchronization of membership 1991 Mathematics Subject Classification.
Reference: [BJ87] <author> K. Birman and T. Joseph, </author> <title> Exploiting virtual synchrony in distributed systems, </title> <booktitle> 11th ACM SIGOPS Symposium on Operating Systems Principles (SOSP), ACM, </booktitle> <month> Nov </month> <year> 1987, </year> <pages> pp. 123-138. </pages>
Reference-contexts: CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR change notifications with regular messages. Other examples are pay-TV and highly-available video-on-demand servers [ACK + 97]. On the other end of the spectrum, consistent data replication may greatly benefit from strong semantics <ref> [BJ87, ABCD96, KD96, FLS97, ADMSM94, SM98] </ref>. For example, some group communication systems provide virtual synchrony semantics, which synchronize membership notifications with regular messages and thus simulate a "benign" world in which message delivery is reliable within the set of live processes. <p> We call such groups VS groups. The protocol that implements these semantics is the moshe VS membership protocol. There are many different formulations of group membership services (some examples may be found in [VKCD98, DMS94, DMS95, BDM97]), and various definitions of virtual synchrony semantics (e.g., <ref> [VKCD98, BJ87, FvR95, MAMSA94] </ref>). Our protocol provides semantics which have been proven useful for several distributed applications [ABCD96, KD96, FLS97, ADMSM94, SM98]. In Section 5.1 we specify the semantics provided by the moshe VS membership protocol. <p> The protocol copes with network and host failures, and exploits the network's hierarchical addressing scheme to support world-wide scalability and scoping. The moshe VS membership protocol provides agreement on membership and strong semantics of message ordering w.r.t. membership changes, namely, virtual synchrony <ref> [BJ87, FvR95, MAMSA94, VKCD98] </ref>. Virtual synchrony requires synchronization among the applications and the membership service. This synchronization greatly facilitates the design of applications that require consistency (e.g., applications with shared data [BJ87, ABCD96, KD96, FLS97, ADMSM94]), 18 TAL ANKER, GREGORY V. <p> Virtual synchrony requires synchronization among the applications and the membership service. This synchronization greatly facilitates the design of applications that require consistency (e.g., applications with shared data <ref> [BJ87, ABCD96, KD96, FLS97, ADMSM94] </ref>), 18 TAL ANKER, GREGORY V. CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR but is too costly for applications that require real-time message delivery (e.g., video transmission). Therefore, we provide virtually synchronous communication only for groups that explicitly request this service. We have implemented moshe in Java.
Reference: [Car94] <author> Georg Carle, </author> <title> Reliable group communication in ATM networks, </title> <booktitle> Proceedings of the Twelve Annual Conference on European Fibre Optic Communications and Networks EFOC&N'94, </booktitle> <month> June 21-24 </month> <year> 1994. </year>
Reference-contexts: Extensive research is currently being carried out to optimize scalable reliable multicast protocols in order to meet the demands of such applications <ref> [Car94, FJM + 95, PSK94, PSLB97] </ref>. Many of these applications make use of highly dynamic multicast groups. One example is a TV broadcasting service that serves groups of clients that may join or leave at any time.
Reference: [CHKD96] <author> G. Chockler, N. Huleihel, I. Keidar, and D. Dolev, </author> <title> Multimedia multicast transport service for groupware, TINA Conference on the Convergence of Telecommunications and Distributed Computing Technologies, </title> <month> September </month> <year> 1996, </year> <note> Full version available as Technical Report CS96-3, </note> <institution> The Hebrew University, Jerusalem, Israel. </institution>
Reference-contexts: Different applications utilize group communication for different purposes, and hence require different semantics from the group membership service they utilize (as explained in <ref> [BFHR98, CHKD96, Bir96] </ref>). For example, video conferencing applications need a general knowledge of which peers are interested in joining the conference, in order to know where to multicast the video stream, and where to receive it from. Such applications do not require the synchronization of membership 1991 Mathematics Subject Classification. <p> CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR Processes that communicate with each other are clients of the membership service. The clients communicate with each other using a multicast transport service, called MMTS <ref> [CHKD96] </ref> which allows them to multicast messages to all the members of a group. In this section, we describe the overall design of the membership service. The description of the multicast service is beyond the scope of this paper. In Section 3.1 we explain how client and server communicate.
Reference: [CHTCB96] <author> T.D. Chandra, V. Hadzilacos, S. Toueg, and B. Charron-Bost, </author> <title> On the impossibility of group membership, </title> <booktitle> ACM Symposium on Principles of Distributed Computing (PODC), </booktitle> <month> May </month> <year> 1996, </year> <pages> pp. 322-330. </pages>
Reference-contexts: As noted in Section 4.4, stability does not have to actually hold forever. It only has to hold "long enough" for the membership protocol to stabilize. We would like to note that perfectly precise membership services are impossible to implement in truly asynchronous environments <ref> [CHTCB96, VKCD98] </ref>. A powerful adversary that fully controls the communication can force every deterministic membership algorithm to be imprecise, to block, or to constantly change its mind.
Reference: [CS95] <author> F. Cristian and F. Schmuck, </author> <title> Agreeing on Process Group Membership in Asynchronous Distributed Systems, </title> <type> Tech. Report CSE95-428, </type> <institution> Department of Conmputer Science and Engineering, University of California, </institution> <address> San Diego, </address> <year> 1995. </year>
Reference: [CT96] <author> T. D. Chandra and S. Toueg, </author> <title> Unreliable failure detectors for reliable distributed systems, </title> <journal> J. ACM 43 (1996), </journal> <volume> no. 2, </volume> <pages> 225-267. </pages>
Reference-contexts: In this paper, we do not discuss how the failure detector is implemented. A framework for implementing a failure detector in a WAN is provided in [Vog96]. Theoretical aspects of failure detectors are discussed in <ref> [CT96, DFKM96, DFKM97] </ref>. 3. The service architecture Group communication systems introduce the notion of group abstraction, which allows processes to be easily arranged into multicast groups. Each message targeted to the group is delivered to all currently connected and operational group members. <p> If the failure detector is highly unreliable, then it is possible that our membership algorithm would never be precise. If, however, the failure detector is an eventual perfect one (please see <ref> [CT96, DFKM96, DFKM97] </ref>), and the communication stabilizes, then our membership service is guaranteed to eventually be precise. 2 This requirement is fulfilled if the failure detector is eventually perfect. Please see [CT96, DFKM96, DFKM97]. 12 TAL ANKER, GREGORY V. CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR 5.1.2. Virtual synchrony. <p> If, however, the failure detector is an eventual perfect one (please see <ref> [CT96, DFKM96, DFKM97] </ref>), and the communication stabilizes, then our membership service is guaranteed to eventually be precise. 2 This requirement is fulfilled if the failure detector is eventually perfect. Please see [CT96, DFKM96, DFKM97]. 12 TAL ANKER, GREGORY V. CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR 5.1.2. Virtual synchrony. Virtual synchrony involves synchronizing multicast communication with membership notifications. In this programming model, group multicast send and receive events occur within the context of views.
Reference: [DFKM96] <author> D. Dolev, R. Friedman, I. Keidar, and D. Malki, </author> <title> Failure Detectors in Omission Failure Environments, </title> <type> TR 96-13, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <month> September </month> <year> 1996, </year> <type> Also Technical Report 96-1608, </type> <institution> Department of Computer Science, Cornell University. </institution>
Reference-contexts: In this paper, we do not discuss how the failure detector is implemented. A framework for implementing a failure detector in a WAN is provided in [Vog96]. Theoretical aspects of failure detectors are discussed in <ref> [CT96, DFKM96, DFKM97] </ref>. 3. The service architecture Group communication systems introduce the notion of group abstraction, which allows processes to be easily arranged into multicast groups. Each message targeted to the group is delivered to all currently connected and operational group members. <p> If the failure detector is highly unreliable, then it is possible that our membership algorithm would never be precise. If, however, the failure detector is an eventual perfect one (please see <ref> [CT96, DFKM96, DFKM97] </ref>), and the communication stabilizes, then our membership service is guaranteed to eventually be precise. 2 This requirement is fulfilled if the failure detector is eventually perfect. Please see [CT96, DFKM96, DFKM97]. 12 TAL ANKER, GREGORY V. CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR 5.1.2. Virtual synchrony. <p> If, however, the failure detector is an eventual perfect one (please see <ref> [CT96, DFKM96, DFKM97] </ref>), and the communication stabilizes, then our membership service is guaranteed to eventually be precise. 2 This requirement is fulfilled if the failure detector is eventually perfect. Please see [CT96, DFKM96, DFKM97]. 12 TAL ANKER, GREGORY V. CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR 5.1.2. Virtual synchrony. Virtual synchrony involves synchronizing multicast communication with membership notifications. In this programming model, group multicast send and receive events occur within the context of views.
Reference: [DFKM97] <author> D. Dolev, R. Friedman, I. Keidar, and D. Malki, </author> <title> Failure detectors in omission failure environments, </title> <booktitle> ACM Symposium on Principles of Distributed Computing (PODC), </booktitle> <month> August </month> <year> 1997, </year> <title> Brief announcement. </title>
Reference-contexts: In this paper, we do not discuss how the failure detector is implemented. A framework for implementing a failure detector in a WAN is provided in [Vog96]. Theoretical aspects of failure detectors are discussed in <ref> [CT96, DFKM96, DFKM97] </ref>. 3. The service architecture Group communication systems introduce the notion of group abstraction, which allows processes to be easily arranged into multicast groups. Each message targeted to the group is delivered to all currently connected and operational group members. <p> If the failure detector is highly unreliable, then it is possible that our membership algorithm would never be precise. If, however, the failure detector is an eventual perfect one (please see <ref> [CT96, DFKM96, DFKM97] </ref>), and the communication stabilizes, then our membership service is guaranteed to eventually be precise. 2 This requirement is fulfilled if the failure detector is eventually perfect. Please see [CT96, DFKM96, DFKM97]. 12 TAL ANKER, GREGORY V. CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR 5.1.2. Virtual synchrony. <p> If, however, the failure detector is an eventual perfect one (please see <ref> [CT96, DFKM96, DFKM97] </ref>), and the communication stabilizes, then our membership service is guaranteed to eventually be precise. 2 This requirement is fulfilled if the failure detector is eventually perfect. Please see [CT96, DFKM96, DFKM97]. 12 TAL ANKER, GREGORY V. CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR 5.1.2. Virtual synchrony. Virtual synchrony involves synchronizing multicast communication with membership notifications. In this programming model, group multicast send and receive events occur within the context of views.
Reference: [DMS94] <author> D. Dolev, D. Malki, and H. R. </author> <title> Strong, An Asynchronous Membership Protocol that Tolerates Partitions, </title> <type> Tech. Report CS94-6, </type> <institution> Institute of Computer Science, The He-brew University of Jerusalem, Jerusalem, Israel, </institution> <year> 1994. </year>
Reference-contexts: The moshe membership service provides such semantics for groups that explicitly request this service. We call such groups VS groups. The protocol that implements these semantics is the moshe VS membership protocol. There are many different formulations of group membership services (some examples may be found in <ref> [VKCD98, DMS94, DMS95, BDM97] </ref>), and various definitions of virtual synchrony semantics (e.g., [VKCD98, BJ87, FvR95, MAMSA94]). Our protocol provides semantics which have been proven useful for several distributed applications [ABCD96, KD96, FLS97, ADMSM94, SM98]. In Section 5.1 we specify the semantics provided by the moshe VS membership protocol.
Reference: [DMS95] <author> D. Dolev, D. Malki, and H. R. </author> <title> Strong, A Framework for Partitionable Membership Service, </title> <type> TR 95-4, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: The moshe membership service provides such semantics for groups that explicitly request this service. We call such groups VS groups. The protocol that implements these semantics is the moshe VS membership protocol. There are many different formulations of group membership services (some examples may be found in <ref> [VKCD98, DMS94, DMS95, BDM97] </ref>), and various definitions of virtual synchrony semantics (e.g., [VKCD98, BJ87, FvR95, MAMSA94]). Our protocol provides semantics which have been proven useful for several distributed applications [ABCD96, KD96, FLS97, ADMSM94, SM98]. In Section 5.1 we specify the semantics provided by the moshe VS membership protocol. <p> We have removed the causal order, total order, and safe delivery properties from that semantic, in the belief that these are optional properties that one might build on top of this service. There are other group membership specifications in the literature, such as [FvR95], [BDM97] and <ref> [DMS95, VKCD98] </ref>. These differ in various details, but have much in common with the semantic that is used here. 5.2. Implementation of the moshe VS membership protocol. In this section we describe an overview of the implementation of the moshe VS membership protocol.
Reference: [EMS95] <author> P. D. Ezhilchelvan, A. Macedo, and S. K. Shrivastava, Newtop: </author> <title> a fault tolerant group communication protocol, </title> <booktitle> 15th International Conference on Distributed Computing Systems (ICDCS), </booktitle> <month> June </month> <year> 1995. </year>
Reference: [FJM + 95] <author> Sally Floyd, Van Jacobson, Steven McCanne, Ching-Gung Liu, and Lixia Zhang, </author> <title> A reliable multicast framework for light-weight sessions and application level framing, </title> <journal> Proceedings of the IEEE/ACM Transactions on Networking., </journal> <month> November </month> <year> 1995, </year> <note> An earlier version of this paper appeared in ACM SIGCOMM 95, </note> <month> August </month> <year> 1995, </year> <pages> pp. 342-356. </pages>
Reference-contexts: Extensive research is currently being carried out to optimize scalable reliable multicast protocols in order to meet the demands of such applications <ref> [Car94, FJM + 95, PSK94, PSLB97] </ref>. Many of these applications make use of highly dynamic multicast groups. One example is a TV broadcasting service that serves groups of clients that may join or leave at any time.
Reference: [FLS97] <author> A. Fekete, N. Lynch, and A. Shvartsman, </author> <title> Specifying and using a partionable group communication service, </title> <booktitle> 16th ACM Symposium on Principles of Distributed Computing (PODC), </booktitle> <month> August </month> <year> 1997. </year>
Reference-contexts: CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR change notifications with regular messages. Other examples are pay-TV and highly-available video-on-demand servers [ACK + 97]. On the other end of the spectrum, consistent data replication may greatly benefit from strong semantics <ref> [BJ87, ABCD96, KD96, FLS97, ADMSM94, SM98] </ref>. For example, some group communication systems provide virtual synchrony semantics, which synchronize membership notifications with regular messages and thus simulate a "benign" world in which message delivery is reliable within the set of live processes. <p> There are many different formulations of group membership services (some examples may be found in [VKCD98, DMS94, DMS95, BDM97]), and various definitions of virtual synchrony semantics (e.g., [VKCD98, BJ87, FvR95, MAMSA94]). Our protocol provides semantics which have been proven useful for several distributed applications <ref> [ABCD96, KD96, FLS97, ADMSM94, SM98] </ref>. In Section 5.1 we specify the semantics provided by the moshe VS membership protocol. Numerous group membership protocols providing similar semantics were constructed (e.g., [CS95, AMMS + 95, MMSA + 96, EMS95, ADKM92, MPS91, MSMA91, DMS94, MS94, BDM97]). <p> Virtual synchrony requires synchronization among the applications and the membership service. This synchronization greatly facilitates the design of applications that require consistency (e.g., applications with shared data <ref> [BJ87, ABCD96, KD96, FLS97, ADMSM94] </ref>), 18 TAL ANKER, GREGORY V. CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR but is too costly for applications that require real-time message delivery (e.g., video transmission). Therefore, we provide virtually synchronous communication only for groups that explicitly request this service. We have implemented moshe in Java.
Reference: [FvR95] <author> Roy Friedman and Robbert van Renesse, </author> <title> Strong and Weak Virtual Synchrony in Horus, </title> <type> TR 95-1537, </type> <institution> dept. of Computer Science, Cornell University, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: This enables synchronization among applications, but is costly: it incurs a delay period in which messages may not be transmitted <ref> [FvR95] </ref>. Therefore, it is not appropriate for applications that require real-time message delivery (e.g., video transmission). <p> We call such groups VS groups. The protocol that implements these semantics is the moshe VS membership protocol. There are many different formulations of group membership services (some examples may be found in [VKCD98, DMS94, DMS95, BDM97]), and various definitions of virtual synchrony semantics (e.g., <ref> [VKCD98, BJ87, FvR95, MAMSA94] </ref>). Our protocol provides semantics which have been proven useful for several distributed applications [ABCD96, KD96, FLS97, ADMSM94, SM98]. In Section 5.1 we specify the semantics provided by the moshe VS membership protocol. <p> We have removed the causal order, total order, and safe delivery properties from that semantic, in the belief that these are optional properties that one might build on top of this service. There are other group membership specifications in the literature, such as <ref> [FvR95] </ref>, [BDM97] and [DMS95, VKCD98]. These differ in various details, but have much in common with the semantic that is used here. 5.2. Implementation of the moshe VS membership protocol. In this section we describe an overview of the implementation of the moshe VS membership protocol. <p> The flush messages are propagated to all the membership servers. The clients also multicast the flush messages to the other members of the 3 This can be relaxed in various ways, which are not in the scope of this paper. Please see <ref> [FvR95, SM98, VKCD98] </ref>. SCALABLE GROUP MEMBERSHIP SERVICES FOR NOVEL APPLICATIONS 13 VS group G. group in order to synchronize view delivery with the multicast message flow, as explained in Section 5.2.2 below. <p> Supporting virtual synchrony. Virtual synchrony requires synchronization among the clients: In order to fulfill Properties 5.6 (Synchronous Delivery) and 5.7 (View Synchrony) the clients have to synchronize their multicast messages with membership events. Such synchronization necessarily incurs a delay period in which messages may not be transmitted <ref> [FvR95] </ref>. The synchronization mechanism is based on the flush messages described above. The purpose of flush messages is to synchronize views with the multicast message flow. Therefore, flush messages are multicast via the MMTS, and serve as place holders which denote where (in the message flow) the previous view ends. <p> The protocol copes with network and host failures, and exploits the network's hierarchical addressing scheme to support world-wide scalability and scoping. The moshe VS membership protocol provides agreement on membership and strong semantics of message ordering w.r.t. membership changes, namely, virtual synchrony <ref> [BJ87, FvR95, MAMSA94, VKCD98] </ref>. Virtual synchrony requires synchronization among the applications and the membership service. This synchronization greatly facilitates the design of applications that require consistency (e.g., applications with shared data [BJ87, ABCD96, KD96, FLS97, ADMSM94]), 18 TAL ANKER, GREGORY V.
Reference: [KD96] <author> I. Keidar and D. Dolev, </author> <title> Efficient message ordering in dynamic networks, </title> <booktitle> 15th ACM Symposium on Principles of Distributed Computing (PODC), </booktitle> <month> May </month> <year> 1996, </year> <pages> pp. 68-76. </pages> <note> 20 TAL ANKER, </note> <author> GREGORY V. CHOCKLER, DANNY DOLEV, </author> <note> AND IDIT KEIDAR </note>
Reference-contexts: CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR change notifications with regular messages. Other examples are pay-TV and highly-available video-on-demand servers [ACK + 97]. On the other end of the spectrum, consistent data replication may greatly benefit from strong semantics <ref> [BJ87, ABCD96, KD96, FLS97, ADMSM94, SM98] </ref>. For example, some group communication systems provide virtual synchrony semantics, which synchronize membership notifications with regular messages and thus simulate a "benign" world in which message delivery is reliable within the set of live processes. <p> There are many different formulations of group membership services (some examples may be found in [VKCD98, DMS94, DMS95, BDM97]), and various definitions of virtual synchrony semantics (e.g., [VKCD98, BJ87, FvR95, MAMSA94]). Our protocol provides semantics which have been proven useful for several distributed applications <ref> [ABCD96, KD96, FLS97, ADMSM94, SM98] </ref>. In Section 5.1 we specify the semantics provided by the moshe VS membership protocol. Numerous group membership protocols providing similar semantics were constructed (e.g., [CS95, AMMS + 95, MMSA + 96, EMS95, ADKM92, MPS91, MSMA91, DMS94, MS94, BDM97]). <p> Virtual synchrony requires synchronization among the applications and the membership service. This synchronization greatly facilitates the design of applications that require consistency (e.g., applications with shared data <ref> [BJ87, ABCD96, KD96, FLS97, ADMSM94] </ref>), 18 TAL ANKER, GREGORY V. CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR but is too costly for applications that require real-time message delivery (e.g., video transmission). Therefore, we provide virtually synchronous communication only for groups that explicitly request this service. We have implemented moshe in Java.
Reference: [KSDM] <author> I. Keidar, J. Sussman, D. Dolev, and K. Marzullo, </author> <title> A Client-Server Oriented Algorithm for Virtually Synchronous Group Membership, </title> <note> In preparation. </note>
Reference-contexts: In addition, our membership server provides advanced services such as a hierarchical directory of groups and secure group services. The two different service semantics are geared towards different kinds of applications: the congress [ABDL97, Ank97] membership service provides simple semantics of membership approximation, and the moshe <ref> [KSDM] </ref> service, which extends congress, provides full virtual synchrony semantics. In our design, membership is not maintained by every process, but only by a few dedicated servers. <p> These differ in various details, but have much in common with the semantic that is used here. 5.2. Implementation of the moshe VS membership protocol. In this section we describe an overview of the implementation of the moshe VS membership protocol. The implementation details may be found in <ref> [KSDM] </ref>. The moshe membership algorithm maintains the list of members in each group.
Reference: [MAMSA94] <author> L. E. Moser, Y. Amir, P. M. Melliar-Smith, and D. A. Agarwal, </author> <title> Extended virtual synchrony, </title> <booktitle> 14th International Conference on Distributed Computing Systems (ICDCS), </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: We call such groups VS groups. The protocol that implements these semantics is the moshe VS membership protocol. There are many different formulations of group membership services (some examples may be found in [VKCD98, DMS94, DMS95, BDM97]), and various definitions of virtual synchrony semantics (e.g., <ref> [VKCD98, BJ87, FvR95, MAMSA94] </ref>). Our protocol provides semantics which have been proven useful for several distributed applications [ABCD96, KD96, FLS97, ADMSM94, SM98]. In Section 5.1 we specify the semantics provided by the moshe VS membership protocol. <p> Two processes undergoing the same two consecutive views in a group G deliver the same set of messages in G within the former view. The moshe VS guarantees are very similar to the Extended Virtual Synchrony semantic described in <ref> [MAMSA94] </ref>. We have removed the causal order, total order, and safe delivery properties from that semantic, in the belief that these are optional properties that one might build on top of this service. There are other group membership specifications in the literature, such as [FvR95], [BDM97] and [DMS95, VKCD98]. <p> The protocol copes with network and host failures, and exploits the network's hierarchical addressing scheme to support world-wide scalability and scoping. The moshe VS membership protocol provides agreement on membership and strong semantics of message ordering w.r.t. membership changes, namely, virtual synchrony <ref> [BJ87, FvR95, MAMSA94, VKCD98] </ref>. Virtual synchrony requires synchronization among the applications and the membership service. This synchronization greatly facilitates the design of applications that require consistency (e.g., applications with shared data [BJ87, ABCD96, KD96, FLS97, ADMSM94]), 18 TAL ANKER, GREGORY V.
Reference: [MMSA + 96] <author> L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, R. K. Budhia, and C. A. Lingley-Papadopoulos, Totem: </author> <title> A fault-tolerant multicast group communication system, </title> <journal> Commun. ACM 39 (1996), </journal> <volume> no. </volume> <pages> 4. </pages>
Reference: [MPS91] <author> S. Mishra, L. L. Peterson, and R. D. Schlichting, </author> <title> A Membership Protocol based on Partial Order, </title> <booktitle> Proc. of the intl. working conf. on Dependable Computing for Critical Applications, </booktitle> <month> Feb </month> <year> 1991. </year>
Reference: [MS94] <author> C. Malloth and A. Schiper, </author> <title> View synchronous communication in large scale networks, 2nd Open Workshop of the ESPRIT project BROADCAST (Number 6360), </title> <note> July 1995 (also available as a Technical Report Nr. </note> <institution> 94/84 at Ecole Polytechnique Federale de Lausanne (Switzerland), </institution> <month> October </month> <year> 1994). </year>
Reference: [MSMA91] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala, </author> <title> Membership algorithms for asynchronous distributed systems, </title> <booktitle> International Conference on Distributed Computing Systems (ICDCS), </booktitle> <month> May </month> <year> 1991. </year>
Reference: [Now98] <author> A. Nowersztern, MOSHE: </author> <title> Membership Object-oriented Service for Heterogeneous Environments, </title> <institution> Lab project, High Availability lab, The Hebrew University of Jerusalem, Jerusalem, Israel, </institution> <month> January </month> <year> 1998, </year> <note> Available from: http://www.cs.huji.ac.il/labs/transis/. </note>
Reference-contexts: All remaining steps (which include: locating the remote object, call parameters marshalling/de-marshalling and message passing) are transparently accomplished by the ORB. 3.2. The membership server. The membership server is designed according to the object-oriented paradigm and written in the Java programming language <ref> [Now98] </ref>. The membership server consists of two objects: the Membership Object-oriented Service for Heterogeneous Environments (moshe) and CONnection-oriented Group-address RESolution Service (congress). <p> Such proposals are not echoed in flush messages. 7 The alternative server may be located using CORBA services, or using a list of alternative servers that the client holds. For details please see <ref> [Now98] </ref>. SCALABLE GROUP MEMBERSHIP SERVICES FOR NOVEL APPLICATIONS 17 6.
Reference: [PSK94] <author> Sanjoy Paul, Krishan K. Sabnani, and David M. Kristol, </author> <title> Multicast transport protocols for high speed networks, </title> <booktitle> Proceedings of the International Conference on Network Protocols, </booktitle> <year> 1994, </year> <pages> pp. 4-14. </pages>
Reference-contexts: Extensive research is currently being carried out to optimize scalable reliable multicast protocols in order to meet the demands of such applications <ref> [Car94, FJM + 95, PSK94, PSLB97] </ref>. Many of these applications make use of highly dynamic multicast groups. One example is a TV broadcasting service that serves groups of clients that may join or leave at any time.
Reference: [PSLB97] <author> Sanjoy Paul, K. Sabnani, J.C. Lin, and S. Bhattacharyya, </author> <title> Reliable multicast transport protocol (RMTP), </title> <journal> IEEE Journal on Selected Areas in Communications (1997). </journal>
Reference-contexts: Extensive research is currently being carried out to optimize scalable reliable multicast protocols in order to meet the demands of such applications <ref> [Car94, FJM + 95, PSK94, PSLB97] </ref>. Many of these applications make use of highly dynamic multicast groups. One example is a TV broadcasting service that serves groups of clients that may join or leave at any time.
Reference: [Rod91] <author> Tom Rodden, </author> <title> A survey of CSCW systems, </title> <booktitle> Interacting with Computers 3 (1991), </booktitle> <volume> no. 3, </volume> <pages> 319-353. </pages>
Reference-contexts: This enables synchronization among applications, but is costly: it incurs a delay period in which messages may not be transmitted [FvR95]. Therefore, it is not appropriate for applications that require real-time message delivery (e.g., video transmission). Computer Supported Cooperative Work (CSCW) <ref> [Rod91] </ref> groupware and multimedia applications involve different services that require different Qualities of Service (QoS) and different semantics from the group membership which they use, for example, an on-line conferencing application may incorporate multimedia multicast as well as coordination and sharing of consistent information (e.g., a shared white board).
Reference: [SM98] <author> J. Sussman and K. Marzullo, </author> <title> The bancomat problem: An example of resource allocation in a partitionable asynchronous system, </title> <booktitle> 12th International Symposium on DIStributed Computing (DISC), </booktitle> <month> September </month> <year> 1998, </year> <note> To appear. </note>
Reference-contexts: CHOCKLER, DANNY DOLEV, AND IDIT KEIDAR change notifications with regular messages. Other examples are pay-TV and highly-available video-on-demand servers [ACK + 97]. On the other end of the spectrum, consistent data replication may greatly benefit from strong semantics <ref> [BJ87, ABCD96, KD96, FLS97, ADMSM94, SM98] </ref>. For example, some group communication systems provide virtual synchrony semantics, which synchronize membership notifications with regular messages and thus simulate a "benign" world in which message delivery is reliable within the set of live processes. <p> There are many different formulations of group membership services (some examples may be found in [VKCD98, DMS94, DMS95, BDM97]), and various definitions of virtual synchrony semantics (e.g., [VKCD98, BJ87, FvR95, MAMSA94]). Our protocol provides semantics which have been proven useful for several distributed applications <ref> [ABCD96, KD96, FLS97, ADMSM94, SM98] </ref>. In Section 5.1 we specify the semantics provided by the moshe VS membership protocol. Numerous group membership protocols providing similar semantics were constructed (e.g., [CS95, AMMS + 95, MMSA + 96, EMS95, ADKM92, MPS91, MSMA91, DMS94, MS94, BDM97]). <p> The flush messages are propagated to all the membership servers. The clients also multicast the flush messages to the other members of the 3 This can be relaxed in various ways, which are not in the scope of this paper. Please see <ref> [FvR95, SM98, VKCD98] </ref>. SCALABLE GROUP MEMBERSHIP SERVICES FOR NOVEL APPLICATIONS 13 VS group G. group in order to synchronize view delivery with the multicast message flow, as explained in Section 5.2.2 below.
Reference: [VKCD98] <author> R. Vitenberg, I. Keidar, G. V. Chockler, and D. Dolev, </author> <title> Group Communication System Specifications: A Comprehensive Study, </title> <type> Tech. report, </type> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, </institution> <year> 1998, </year> <note> In preparation. </note>
Reference-contexts: The moshe membership service provides such semantics for groups that explicitly request this service. We call such groups VS groups. The protocol that implements these semantics is the moshe VS membership protocol. There are many different formulations of group membership services (some examples may be found in <ref> [VKCD98, DMS94, DMS95, BDM97] </ref>), and various definitions of virtual synchrony semantics (e.g., [VKCD98, BJ87, FvR95, MAMSA94]). Our protocol provides semantics which have been proven useful for several distributed applications [ABCD96, KD96, FLS97, ADMSM94, SM98]. In Section 5.1 we specify the semantics provided by the moshe VS membership protocol. <p> We call such groups VS groups. The protocol that implements these semantics is the moshe VS membership protocol. There are many different formulations of group membership services (some examples may be found in [VKCD98, DMS94, DMS95, BDM97]), and various definitions of virtual synchrony semantics (e.g., <ref> [VKCD98, BJ87, FvR95, MAMSA94] </ref>). Our protocol provides semantics which have been proven useful for several distributed applications [ABCD96, KD96, FLS97, ADMSM94, SM98]. In Section 5.1 we specify the semantics provided by the moshe VS membership protocol. <p> As noted in Section 4.4, stability does not have to actually hold forever. It only has to hold "long enough" for the membership protocol to stabilize. We would like to note that perfectly precise membership services are impossible to implement in truly asynchronous environments <ref> [CHTCB96, VKCD98] </ref>. A powerful adversary that fully controls the communication can force every deterministic membership algorithm to be imprecise, to block, or to constantly change its mind. <p> We have removed the causal order, total order, and safe delivery properties from that semantic, in the belief that these are optional properties that one might build on top of this service. There are other group membership specifications in the literature, such as [FvR95], [BDM97] and <ref> [DMS95, VKCD98] </ref>. These differ in various details, but have much in common with the semantic that is used here. 5.2. Implementation of the moshe VS membership protocol. In this section we describe an overview of the implementation of the moshe VS membership protocol. <p> The flush messages are propagated to all the membership servers. The clients also multicast the flush messages to the other members of the 3 This can be relaxed in various ways, which are not in the scope of this paper. Please see <ref> [FvR95, SM98, VKCD98] </ref>. SCALABLE GROUP MEMBERSHIP SERVICES FOR NOVEL APPLICATIONS 13 VS group G. group in order to synchronize view delivery with the multicast message flow, as explained in Section 5.2.2 below. <p> The protocol copes with network and host failures, and exploits the network's hierarchical addressing scheme to support world-wide scalability and scoping. The moshe VS membership protocol provides agreement on membership and strong semantics of message ordering w.r.t. membership changes, namely, virtual synchrony <ref> [BJ87, FvR95, MAMSA94, VKCD98] </ref>. Virtual synchrony requires synchronization among the applications and the membership service. This synchronization greatly facilitates the design of applications that require consistency (e.g., applications with shared data [BJ87, ABCD96, KD96, FLS97, ADMSM94]), 18 TAL ANKER, GREGORY V.
Reference: [Vog96] <author> Werner Vogels, </author> <title> World wide failures, </title> <booktitle> Proceedings of the ACM SIGOPS 1996 Euro-pean Workshop, </booktitle> <month> September </month> <year> 1996. </year> <institution> Institute of Computer Science, The Hebrew University of Jerusalem, Givat Ram, Jerusalem 91904, Israel E-mail address: anker@cs.huji.ac.il Institute of Computer Science, The Hebrew University of Jerusalem, Givat Ram, Jerusalem 91904, Israel E-mail address: grishac@cs.huji.ac.il Institute of Computer Science, The Hebrew University of Jerusalem, Givat Ram, Jerusalem 91904, Israel E-mail address: dolev@cs.huji.ac.il Institute of Computer Science, The Hebrew University of Jerusalem, Givat Ram, Jerusalem 91904, Israel E-mail address: idish@cs.huji.ac.il </institution>
Reference-contexts: In this paper, we do not discuss how the failure detector is implemented. A framework for implementing a failure detector in a WAN is provided in <ref> [Vog96] </ref>. Theoretical aspects of failure detectors are discussed in [CT96, DFKM96, DFKM97]. 3. The service architecture Group communication systems introduce the notion of group abstraction, which allows processes to be easily arranged into multicast groups.
References-found: 41

