URL: http://www.cs.washington.edu/research/projects/spin/www/papers/WCS/m3os.ps
Refering-URL: http://www.cs.washington.edu/homes/bershad/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Writing an Operating System with Modula-3  
Author: Emin Gun Sirer Stefan Savage Przemys law Pardyak Greg P. DeFouw Mary Ann Alapat Brian N. Bershad 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract-found: 0
Intro-found: 1
Reference: [Appel et al. 88] <author> Appel, A. W., Ellis, J. R., and Li, K. </author> <title> Real-time concurrent collection on stock multiprocessors. </title> <booktitle> In Proceedings of ACM SIGPLAN '88 Conf. on Programming Language Design and Implementation, </booktitle> <month> June </month> <year> 1988. </year>
Reference-contexts: A typical collection takes about 100 ms. on our platform, which introduces perceptible delays into the system. We are dealing with the collector overhead in two ways. The first is to use a better collector. We are examining concurrent and incremental garbage collection techniques <ref> [Seligmann & Grarup 95, Appel et al. 88] </ref> to reduce disruptive system pauses. While a better collector can reduce the pause times, it will not directly address the overhead problem. If garbage is created, there is going to be a penalty to clean it up.
Reference: [Bershad et al. 95] <author> Bershad, B. N., Savage, S., Pardyak, P., Sirer, E. G., Fiuczynski, M., Becker, D., Eggers, S., and Chambers, C. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the Fifteenth ACM Symposium on Operating Systems Principles, </booktitle> <address> Copper Mountain, CO, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: We were able to strip out 25% of the runtime simply by identifying those portions which were not needed by the operating system. We also created a dynamic linking facility <ref> [Bershad et al. 95, Sirer et al. 96] </ref> that eliminates multiple copies of the runtime by allowing clients access to shared code and data. <p> As part of the initial development of our kernel, we reimplemented the Modula-3 thread, scheduler and synchronization services directly on top of a lightweight kernel threading interface called strands <ref> [Bershad et al. 95] </ref>. The strands interface allows thread packages and schedulers to be tightly integrated with each other as well as with their clients.
Reference: [Campbell & Tan 95] <author> Campbell, R. H. and Tan, S.-M. </author> <title> Choices: An Object-Oriented Multimedia Operating System. </title> <booktitle> In Proceedings of the Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <pages> pages 90-94, </pages> <address> Orcas Island, WA, </address> <month> May </month> <year> 1995. </year>
Reference: [Chambers et al. 95] <author> Chambers, C., Dean, J., and Grove, J. </author> <title> Vortex Compiler, An Optimizing Compiler for Object-Oriented Languages. </title> <institution> University of Washington. </institution> <note> http://www.cs.washington.edu/research/projects/cecil/www/cecil-home.html, December 1995. </note>
Reference-contexts: Techniques to eliminate unnecessary range checks are well-known within the compiler community [Gupta 90, Gupta 93, Kolte & Wolfe 95], and are clearly applicable to Modula-3. The Vortex research compiler <ref> [Chambers et al. 95] </ref>, being developed at the University of Washington, performs redundant range check elimination among other optimizations and typically eliminates 30-90% of range checks in our benchmarks.
Reference: [Gupta 90] <author> Gupta, R. </author> <title> A Fresh Look at Optimizing Array Bound Checking. </title> <booktitle> In Proceedings of the ACM SIGPLAN '90 Conference on Programming Language Design and Implementation, </booktitle> <volume> volume 25, </volume> <pages> pages 272-282, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: As mentioned in the introduction, this is not an issue with the language, but with the implementation of the language. Techniques to eliminate unnecessary range checks are well-known within the compiler community <ref> [Gupta 90, Gupta 93, Kolte & Wolfe 95] </ref>, and are clearly applicable to Modula-3. The Vortex research compiler [Chambers et al. 95], being developed at the University of Washington, performs redundant range check elimination among other optimizations and typically eliminates 30-90% of range checks in our benchmarks.
Reference: [Gupta 93] <author> Gupta, R. </author> <title> Optimizing Array Bounds Checks Using Flow Analysis. </title> <journal> ACM Letters on Programming Languages and Systems, </journal> <volume> 2 </volume> <pages> 135-150, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: As mentioned in the introduction, this is not an issue with the language, but with the implementation of the language. Techniques to eliminate unnecessary range checks are well-known within the compiler community <ref> [Gupta 90, Gupta 93, Kolte & Wolfe 95] </ref>, and are clearly applicable to Modula-3. The Vortex research compiler [Chambers et al. 95], being developed at the University of Washington, performs redundant range check elimination among other optimizations and typically eliminates 30-90% of range checks in our benchmarks.
Reference: [Hsieh et al. 96] <author> Hsieh, W. C., Fiuczynski, M. E., Garrett, C., Savage, S., Becker, D., and Bershad, B. N. </author> <title> Language Support for Extensible Systems. </title> <booktitle> In First Annual Workshop on Compiler Support for System Software, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: For example, the language does not allow for safe casting operations, whereby a data structure is represented as a union of possible types, even though the cast would not create a situation that might violate typesafety. In a companion paper <ref> [Hsieh et al. 96] </ref> we describe some of the changes that we have made to the language and its compiler in order to satisfy these types of problems. 2 Evaluating the concerns We discuss the major concerns about Modula-3 from several angles.
Reference: [Kolte & Wolfe 95] <author> Kolte, P. and Wolfe, M. </author> <title> Elimination of Redundant Array Subscript Range Checks. </title> <booktitle> In Proceedings of the ACM SIGPLAN '95 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 270-278, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: As mentioned in the introduction, this is not an issue with the language, but with the implementation of the language. Techniques to eliminate unnecessary range checks are well-known within the compiler community <ref> [Gupta 90, Gupta 93, Kolte & Wolfe 95] </ref>, and are clearly applicable to Modula-3. The Vortex research compiler [Chambers et al. 95], being developed at the University of Washington, performs redundant range check elimination among other optimizations and typically eliminates 30-90% of range checks in our benchmarks.
Reference: [Nelson 91] <author> Nelson, G., </author> <title> editor. Systems Programming with Modula-3. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Our borrowed sources implement platform specific services, such as device drivers, and are available to the Modula-3 component of the system through about 80 functions in a dozen interfaces. Despite the fact that the primary reference for Modula-3 is titled "Systems Programming with Modula-3," <ref> [Nelson 91] </ref> we have found that the general systems community has remained skeptical of the language. Instead, they hold to languages such as C and C++ which offer little more than an environment for advanced assembly language programming.
Reference: [Rivest 92] <author> Rivest, R. </author> <title> The MD5 Message-Digest Algorithm. Request for Comments 1321, </title> <institution> Internet Engineering Task Force, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Our benchmarks consist of common operating system tasks and typical operating system extensions [Ber-shad et al. 95, Campbell & Tan 95, Small & Seltzer 94]. MD5 is a digital signature algorithm <ref> [Rivest 92] </ref> implemented in Modula-3. It is very array intensive which results in the DEC SRC compiler placing 10 range checks in its inner loop.
Reference: [Seligmann & Grarup 95] <author> Seligmann, J. and Grarup, S. </author> <title> Incremental Mature Garbage Collection Using the Train Algorithm. </title> <booktitle> In Proceedings of ECOOP'95, Ninth European Conference on Object-Oriented Programming, </booktitle> <volume> volume 952, </volume> <pages> pages 235-252, </pages> <year> 1995. </year>
Reference-contexts: A typical collection takes about 100 ms. on our platform, which introduces perceptible delays into the system. We are dealing with the collector overhead in two ways. The first is to use a better collector. We are examining concurrent and incremental garbage collection techniques <ref> [Seligmann & Grarup 95, Appel et al. 88] </ref> to reduce disruptive system pauses. While a better collector can reduce the pause times, it will not directly address the overhead problem. If garbage is created, there is going to be a penalty to clean it up.
Reference: [Sirer et al. 96] <author> Sirer, E. G., Fiuczynski, M., Pardyak, P., and Bershad, B. N. </author> <title> Safe Dynamic Linking in an Extensible Operating System. </title> <booktitle> In First Annual Workshop on Compiler Support for System Software, </booktitle> <month> January </month> <year> 1996. </year>
Reference-contexts: We were able to strip out 25% of the runtime simply by identifying those portions which were not needed by the operating system. We also created a dynamic linking facility <ref> [Bershad et al. 95, Sirer et al. 96] </ref> that eliminates multiple copies of the runtime by allowing clients access to shared code and data.
Reference: [Small & Seltzer 94] <author> Small, C. and Seltzer, M. VINO: </author> <title> An Integrated Platform for Operating System and Database Research. </title> <type> Technical Report TR-30-94, </type> <institution> Harvard University, </institution> <year> 1994. </year>
Reference: [Small & Seltzer 96] <author> Small, C. and Seltzer, M. </author> <title> A Comparison of OS Extension Technologies. </title> <booktitle> In Proceedings of the 1996 Winter USENIX Conference, </booktitle> <address> San Diego, CA, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: In this instance, Modula-3 can guarantee safe behaviour without recourse to any dynamic checks. Hence the C and Modula-3 versions of the benchmark have essentially identical performance. MD5, hotlist and lld were contributed by Small <ref> [Small & Seltzer 96] </ref>. Richards is an operating system simulator with a synthetic workload of process creation and termination. The coding style encouraged by Modula-3 allows the compiler to produce better code for a commonly executed switch statement, resulting in higher performance than C, even for safe code. <p> Richards is an operating system simulator with a synthetic workload of process creation and termination. The coding style encouraged by Modula-3 allows the compiler to produce better code for a commonly executed switch statement, resulting in higher performance than C, even for safe code. From these results, other measurements <ref> [Small & Seltzer 96] </ref>, and our experience with the SPIN kernel, it seems evident that Modula-3 compiler technology is currently comparable to that of C, yet offers stronger guarantees about program safety. 2.2 Modula-3 compiler execution time The DEC SRC Modula-3 compiler consists of a platform-specific back end and a mostly
Reference: [Stallman 90] <author> Stallman, R. M. </author> <title> Using and Porting GNU CC. </title> <type> Technical report, </type> <institution> Free Software Foundation, </institution> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: The DEC SRC implementation is a publicly available, highly portable Modula-3 system that consists of a compiler front-end, a code-generator, a set of runtime services, standard libraries, a debugger, and a distributed object library. The compiler front-end translates Modula-3 source code into GNU RTL intermediate representation <ref> [Stallman 90] </ref>, and a gcc based code generator emits object code directly. The goals of the DEC SRC implementation have always been portability (the system runs on 12 different architectures and 25 different operating systems) and functionality (the system's runtime services consist of over 230 interfaces).
Reference: [Stroustrup 83] <author> Stroustrup, B. </author> <title> Adding Classes to the C Language, An Exercise in Language Evolution. </title> <journal> Software|Practice and Experience, </journal> <volume> 13(2) </volume> <pages> 139-161, </pages> <month> February </month> <year> 1983. </year>
Reference-contexts: Gradually, improvements in the compiler and the libraries allowed people to hold C up as the "language to be beat" in terms of expressiveness and performance. A similar evolution occurred with C++, for which the first implementation (ATT's cfront) <ref> [Stroustrup 83] </ref> substantially underperformed C. Over time, though, the compiler and runtime improved, 0 This research was sponsored by the Advanced Research Projects Agency, the National Science Foundation (Grants no. CDA-9123308 and CCR-9200832) and by an equipment grant from Digital Equipment Corporation.
References-found: 16

