URL: http://osl.cs.uiuc.edu/~nvenkata/phdthesis.ps.gz
Refering-URL: http://osl.cs.uiuc.edu/~nvenkata/
Root-URL: http://www.cs.uiuc.edu
Note: c flCopyright by Nalini Venkatasubramanian, 1998  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> M. Abadi and L. Lamport. </author> <title> Composing specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(1) </volume> <pages> 73-132, </pages> <year> 1993. </year>
Reference-contexts: A commercial effort attempting to create a global ubiquitous computing framework is the HP Information Utility [80]. 2.6 Formal Reasoning about Distributed Systems A number of formalisms have been developed for specifying and reasoning about concurrent systems <ref> [1, 30, 112, 113] </ref>. These include language independent formalisms based on temporal logic [108, 96, 98], behavior histories [122], and I/O automata [105]. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs.
Reference: [2] <author> M. Abadi and L. Lamport. </author> <title> Conjoining specifications. </title> <type> Technical Report 118, </type> <institution> DEC Systems Research Center, </institution> <year> 1994. </year>
Reference-contexts: Thus, standard safety and liveness properties are not adequate to specify components of ODS. Non-interference properties must also be specified and checked. Similar observations have been made for traditional one level systems. For example, in <ref> [2] </ref> Abadi and Lamport give a method for describing open components of concurrent systems using assumption/guarantee assertions [86]. Assumptions are requirements on the components environment.
Reference: [3] <author> G. Agha. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: Java implements distribution via the Remote Method Invocation (RMI) model which currently supports RPC semantics for method invocations. Java Beans [140] is a more generalized version of distributed objects in Java that provides event-based interfaces for connecting plug-in objects. Unlike Java, Actors <ref> [3] </ref>, described later in this thesis is a model of concurrency based on active objects and asynchronous message passing and weakly fair execution. <p> The meta-architectural model proposed in this thesis is a first step towards providing a formal semantics for open distributed systems, and a basis for specifying and reasoning about properties of and interactions between components of such systems. Application concurrency is provided by paradigms such as concurrent object oriented programming <ref> [11, 177, 3, 49] </ref>. However, in a distributed system, various applications share a common underlying set of resources. <p> What is required is a model that allows distributed applications to be developed, implemented and enhanced while maintaining the desired level of service quality. We characterize such systems as open distributed systems (ODS). The Actor model or Actors, first proposed by Carl Hewitt [78] and later developed by Agha <ref> [3] </ref>, captures the essence of concurrent computation in open distributed systems at an abstract level. 23 3.1.1 About Actors Open Distributed Systems (ODS) evolve dynamically and components of ODS interact with an environment that is not under their control. <p> In general, models and methodologies that deal with sequential programs are inadequate for creating correct distributed applications. Abstractions required to represent and manage the complexity of distributed applications are inherent in the framework of distributed objects or actors <ref> [3] </ref>. Actors can be used as the basis for (a) a system model for managing the end-to-end application and (b) a programming model where application programmers can specify application characteristics and interactions between applications (such as Java and scripting languages).
Reference: [4] <author> G. Agha. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1986. </year>
Reference-contexts: Will Clinger [51] developed a powerdomain semantics of actor systems, showing the consistency of these axioms. An interleaving transition system semantics for an actor language is given in [9, 10]. This work builds on the formulation in <ref> [4] </ref> and develops methods for reasoning about equivalence of actor programs [13, 143] and the composition of activities in actor systems [160]. (See [79, 4, 6] for more discussion of the Actor model, and for many examples of programming with actors.) Note that the Actor model is, like the theory of <p> An interleaving transition system semantics for an actor language is given in [9, 10]. This work builds on the formulation in [4] and develops methods for reasoning about equivalence of actor programs [13, 143] and the composition of activities in actor systems [160]. (See <ref> [79, 4, 6] </ref> for more discussion of the Actor model, and for many examples of programming with actors.) Note that the Actor model is, like the theory of higher order nets or the -calculus, general and inherently parallel.
Reference: [5] <author> G. Agha. </author> <title> Concurrent object-oriented programming. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 125-141, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Of course, it is possible to define actor-like buffered, asynchronous communication in terms of synchronous communication, provided dynamic actor (or process) creation is allowed. On the other hand, more complex communication patterns, such as remote procedure calls, can also be expressed as a series of asynchronous messages <ref> [5] </ref>. Note also that Actors can be used to express different forms of concurrency and parallelism. Data parallelism is expressed as a broadcast message sent to multiple actors. Functional parallelism is expressed by concurrent messages to multiple actors whose responses can be synchronized later via join continuations [5]. 3.1.2 Evaluation of <p> of asynchronous messages <ref> [5] </ref>. Note also that Actors can be used to express different forms of concurrency and parallelism. Data parallelism is expressed as a broadcast message sent to multiple actors. Functional parallelism is expressed by concurrent messages to multiple actors whose responses can be synchronized later via join continuations [5]. 3.1.2 Evaluation of the Actor Model Portability of Actor Programs A concrete way to think of actors is that they represent an abstraction over concurrent architectures. Actor primitive operations provide a simple and powerful base on which to build higher level features and abstractions for concurrent programming.
Reference: [6] <author> G. Agha, S. Frolund, W. Kim, R. Panwar, A. Patterson, and D. Sturman. </author> <title> Abstraction and Modularity Mechanisms for Concurrent Computing. </title> <journal> IEEE Parallel and Distributed Technology: Systems and Applications, </journal> <volume> 1(2) </volume> <pages> 3-14, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Some of the more recent research on actors has focused on coordination structures and meta-architectures <ref> [6] </ref>. Actor based reflective runtime systems include Broadway [141] and the Actor Foundry [124]. Broadway [141] provides C++ support for distributed actor programs including asynchronous communication, dynamic actor creation and scheduling of actors. <p> An interleaving transition system semantics for an actor language is given in [9, 10]. This work builds on the formulation in [4] and develops methods for reasoning about equivalence of actor programs [13, 143] and the composition of activities in actor systems [160]. (See <ref> [79, 4, 6] </ref> for more discussion of the Actor model, and for many examples of programming with actors.) Note that the Actor model is, like the theory of higher order nets or the -calculus, general and inherently parallel. <p> Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179]. Representation of dependability protocols as meta-level programs is presented in [7]. Some of the more recent research on actors has focused on coordination structures and meta-architectures <ref> [6, 63, 141] </ref>. The Aspect Oriented Programming paradigm [92] makes it possible to express programs where design decisions (aspects) can be appropriately isolated permitting composition and re-use of the aspect code. Many of these languages or systems lack clearly defined semantics.
Reference: [7] <author> G. Agha, S. Frolund, R. Panwar, and D. Sturman. </author> <title> A linguistic framework for dynamic composition of dependability protocols. </title> <booktitle> In Proceedings of the 3rd IFIP Working Conference on Dependable Computing for Critical Applications, </booktitle> <month> September </month> <year> 1992. </year>
Reference-contexts: Reflection has been used in the Muse Operating System [174, 175, 176] for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179]. Representation of dependability protocols as meta-level programs is presented in <ref> [7] </ref>. The Aspect Oriented Programming paradigm [92] makes it possible to express programs where design decisions (aspects) can be appropriately isolated permitting composition and re-use of the aspect code. <p> This independence allows a wide variety of protocols and aspects of execution behavior to be composed from a small number of basic modules. An example of this modular composition is the layered or onion-skin approach for combining dependability protocols <ref> [7] </ref>. Another essential characteristic of an open system is the ability to install system and runtime services on the fly. This gives us the ability to add new features to an operating system without halting the system or rebooting an essential characteristic of open systems. <p> In this section, we represent a composable, application-independent mechanism to guard against fail-stop failures in a system by using replication. The replication protocol modeled here has been described in <ref> [7] </ref>, which introduces MAUD (Meta Architecture for Ultra Dependability). Based on the degree of consistency desired by the application, replication can use one or more of the core services. Firstly, replication can be implemented as state capture followed by remote creation on a replica node using the captured state. <p> The behaviors of the distributor, collector, and replicas are is described below. Figure 3.6 gives a picture of a replicated server. * Distributor: The Distributor (called serveMQ in <ref> [7] </ref>) has as acquaintances the list of replicas. It also has a generator of new identifiers. When a client request arrives, a new identifier is generated and a message containing the identifier and the original request is sent to each replica. * Collector: The collector (called serveDispatcher in [7]) maintains a <p> serveMQ in <ref> [7] </ref>) has as acquaintances the list of replicas. It also has a generator of new identifiers. When a client request arrives, a new identifier is generated and a message containing the identifier and the original request is sent to each replica. * Collector: The collector (called serveDispatcher in [7]) maintains a log of replies received for each request, using the unique identifier associated with each request. <p> Reflection has been used in the Muse Operating System [172] for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179]. Representation of dependability protocols as meta-level programs is presented in <ref> [7] </ref>. Some of the more recent research on actors has focused on coordination structures and meta-architectures [6, 63, 141]. The Aspect Oriented Programming paradigm [92] makes it possible to express programs where design decisions (aspects) can be appropriately isolated permitting composition and re-use of the aspect code.
Reference: [8] <author> G. Agha, W. Kim, and R. Panwar. </author> <title> Actor languages for specification of parallel computations. </title> <editor> In G. E. Blelloch, K. Mani Chandy, and S. Jagannathan, editors, </editor> <booktitle> DIMACS. Series in Discrete Mathematics and Theoretical Computer Science. </booktitle> <volume> vol 18. </volume> <booktitle> Specification of Parallel Algorithms, </booktitle> <pages> pages 239-258. </pages> <publisher> American Mathematical Society, </publisher> <year> 1994. </year>
Reference-contexts: Actor primitive operations provide a simple and powerful base on which to build higher level features and abstractions for concurrent programming. These include programming abstractions for specifications of key concepts such as communication, synchronization, scheduling and placement <ref> [8] </ref>. An actor runtime system provides the interface to services such as global addressing, memory management, fair scheduling, and communication. It turns out that these services can be efficiently implemented, thus raising the level of abstraction while reducing the size and complexity of code on concurrent architectures [93].
Reference: [9] <author> G. Agha, I. A. Mason, S. F. Smith, and C. L. Talcott. </author> <title> Towards a theory of actor computation. </title> <booktitle> In The Third International Conference on Concurrency Theory (CONCUR '92), volume 630 of Lecture Notes in Computer Science, </booktitle> <pages> pages 565-579. </pages> <publisher> Springer Verlag, </publisher> <month> August </month> <year> 1992. </year>
Reference-contexts: Actors can be viewed as a model of coordination between autonomous interacting components. Semantics of actor interactions are relatively well understood and reasoning about systems of actors has been formalized <ref> [9, 143, 145] </ref>. The meta-architectural model proposed in this thesis is a first step towards providing a formal semantics for open distributed systems, and a basis for specifying and reasoning about properties of and interactions between components of such systems. <p> Axioms expressing the essential features of actor computation such as the acquaintance relation and ordering of events are given in [19]. Will Clinger [51] developed a powerdomain semantics of actor systems, showing the consistency of these axioms. An interleaving transition system semantics for an actor language is given in <ref> [9, 10] </ref>. <p> Base level actors carry out application level computation, while meta-actors are part of the runtime system which manages system resources and controls the runtime behavior of the base level. The application level of the model refines the model of <ref> [9, 143] </ref>, explicitly representing more of the runtime structures and resources. It also abstracts from the choice of a specific programming language or system architecture, providing a framework for reasoning about heterogeneous systems.
Reference: [10] <author> G. Agha, I. A. Mason, S. F. Smith, and C. L. Talcott. </author> <title> A foundation for actor computation. </title> <journal> Journal of Functional Programming, </journal> <note> 1997. to appear. </note>
Reference-contexts: Axioms expressing the essential features of actor computation such as the acquaintance relation and ordering of events are given in [19]. Will Clinger [51] developed a powerdomain semantics of actor systems, showing the consistency of these axioms. An interleaving transition system semantics for an actor language is given in <ref> [9, 10] </ref>. <p> We then show that acq implies mnR , and that base-level systems satisfy acq . The second fact can be proved using the methods of <ref> [10] </ref>. Detailed discussion of the use of these methods is beyond the scope of this work. <p> fi &lt; 0 fi RN ! RS Update oe (m; o; s) = 8 &gt; : newState if 9pSat oe (m; p; s); and p is an update pattern in s oe (s) otherwise The standard operational semantics of ART systems is build on top of the basic actor semantics <ref> [10] </ref> with two extensions: (1) there is a special actor Timer whose state o represents the current time in the system, (2) constraints are imposed on the invocation of messages.
Reference: [11] <editor> G. Agha, P. Wegner, and A. Yonezawa, editors. </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Massachussets, </address> <year> 1993. </year> <month> 295 </month>
Reference-contexts: The meta-architectural model proposed in this thesis is a first step towards providing a formal semantics for open distributed systems, and a basis for specifying and reasoning about properties of and interactions between components of such systems. Application concurrency is provided by paradigms such as concurrent object oriented programming <ref> [11, 177, 3, 49] </ref>. However, in a distributed system, various applications share a common underlying set of resources.
Reference: [12] <author> Gul Agha, Mark Astley, Jamil Sheikh, and Carlos Varela. </author> <title> Modular heterogeneous system development: A critical analysis of java. </title> <booktitle> In Proceedings of the Heterogeneous Computing Workshop, </booktitle> <year> 1998. </year>
Reference-contexts: Java's main advantage is mobility; however the semantics of interaction with other customizations is dependent on the implementation. The passive object model leads to separation of object and thread and powerful constructs for efficiently controlling synchronization and coordination of distributed entities is required <ref> [12] </ref>. For example, the use of the synchronized keyword for thread coordination leads to over-serialization resulting in a loss of performance. Furthermore, the ability to deal with the management of thread priorities for real-time thread management is dependent on the underlying threads implementation, making QoS support complicated to achieve.
Reference: [13] <author> Gul A. Agha. </author> <title> Abstracting interaction patterns: A programming paradigm for open distributed systems. </title> <booktitle> In Proceedings of the IFIP Conference on Formal Methods for Open Object-baed Distributed Systems, </booktitle> <year> 1996. </year>
Reference-contexts: Will Clinger [51] developed a powerdomain semantics of actor systems, showing the consistency of these axioms. An interleaving transition system semantics for an actor language is given in [9, 10]. This work builds on the formulation in [4] and develops methods for reasoning about equivalence of actor programs <ref> [13, 143] </ref> and the composition of activities in actor systems [160]. (See [79, 4, 6] for more discussion of the Actor model, and for many examples of programming with actors.) Note that the Actor model is, like the theory of higher order nets or the -calculus, general and inherently parallel.
Reference: [14] <author> Yair Amir, Baruch Awerbuch, and Ryan S. Borgstrom. </author> <title> The java market: Transforming the internet into a metacomputer. </title> <type> Technical Report CNDS-98-1, </type> <institution> Johns Hopkins University, Baltimore, Maryland, </institution> <year> 1998. </year>
Reference-contexts: The Metacomputing Project at JHU is exploring ways to effectively utilize unused resources available on the network to complete computation on time on networks of workstations and the global Internet <ref> [15, 14] </ref>. A commercial effort attempting to create a global ubiquitous computing framework is the HP Information Utility [80]. 2.6 Formal Reasoning about Distributed Systems A number of formalisms have been developed for specifying and reasoning about concurrent systems [1, 30, 112, 113].
Reference: [15] <author> Yair Amir, Alec Peterson, and David Shaw. </author> <title> Seamlessly selecting the best copy from internet-wide replicated web servers. </title> <type> Technical Report CNDS-98-3, </type> <institution> Johns Hopkins University, Baltimore, Maryland, </institution> <year> 1998. </year>
Reference-contexts: The Metacomputing Project at JHU is exploring ways to effectively utilize unused resources available on the network to complete computation on time on networks of workstations and the global Internet <ref> [15, 14] </ref>. A commercial effort attempting to create a global ubiquitous computing framework is the HP Information Utility [80]. 2.6 Formal Reasoning about Distributed Systems A number of formalisms have been developed for specifying and reasoning about concurrent systems [1, 30, 112, 113].
Reference: [16] <author> D.P. Anderson, Y. Osawa, and R. Govindan. </author> <title> A file system for continuous media. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 311-337, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Work on resource management mechanisms for multimedia servers has focussed on placement of media on disk to ensure real-time retrieval <ref> [16, 180] </ref>, admission control procedures to maximize server throughput [166], buffer management policies to minimize memory requirements [66, 104], replication and striping strategies for optimizing storage across disk arrays [90, 151], batching mechanisms that group closely spaced requests for the same objects [55], load balancing mechanisms for effective utilization [170, 163, <p> addition to bandwidth and storage, other resources in the video server including buffer memory and CPU processing power need to be optimized. 7.1.4 An Integrated Approach to Load Management Many of the initial efforts in designing multimedia servers have focussed on placement of media on disk to ensure real-time retrieval <ref> [16, 180] </ref>. Admission control procedures to maximize server throughput [166] and buffer management policies to minimize memory requirements [66, 104] have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in [90, 151].
Reference: [17] <author> Martin F. Arlitt and Carey L. Williamson. </author> <title> Web server workload characterization: The search for invariants. </title> <booktitle> In ACM Sigmetrics, </booktitle> <address> Philadephia, PA, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: To sustain the increasing volume of service requests to Internet servers <ref> [17] </ref>, many distributed architectures and configurations have been proposed. Most architectures and distribution models are based on clusters of systems distributed over a wide area backbone network. <p> Load characterization involves determining/estimating the access properties of transient (sporadic), periodic and aperiodic requests with heterogeneous service requests. Workload characterizations of general Internet Web traffic <ref> [17] </ref>, provide information that assist a system designer in implementing cost-effective mechanisms for load management. Load management may be distributed or centralized. Feedback-control mechanisms use previous measures of load as an indicator of what is likely to happen in future.
Reference: [18] <author> W. Athas. </author> <title> Fine Grain Concurrent Computations. </title> <type> PhD thesis, </type> <institution> Computer Science Department, California Institute of Technology, </institution> <year> 1987. </year> <note> Also published as technical report 5242:TR:87. </note>
Reference-contexts: Actor languages can be implemented on a number of computer architectures such as sequential processors, shared memory processors and SIMD architectures. However, multicomputers are particularly interesting because of their scalability characteristics. Actor languages have proven especially useful as a language model for computation on multicomputers <ref> [18] </ref> because the implementation of actors on message-passing architectures is straight-forward. The network in multicomputers supports the actor mail ab 26 straction; memory is distributed and information is localized on each computer.
Reference: [19] <author> Henry G. Baker and Carl Hewitt. </author> <title> Laws for communicating parallel processes. </title> <booktitle> In IFIP Congress, </booktitle> <pages> pages 987-992. </pages> <publisher> IFIP, </publisher> <month> August </month> <year> 1977. </year>
Reference-contexts: The local computation carried out by the components may be specified in any sequential language. Axioms expressing the essential features of actor computation such as the acquaintance relation and ordering of events are given in <ref> [19] </ref>. Will Clinger [51] developed a powerdomain semantics of actor systems, showing the consistency of these axioms. An interleaving transition system semantics for an actor language is given in [9, 10]. <p> In our model, semantic values have an operational flavor. They are essentially instructions that are further interpreted in terms of a machine state or configuration. The constraints on the interpretation of actor descriptions insure that the actor acquaintance laws <ref> [19, 144] </ref> hold for base level actors when computation is restricted to the base level; and for meta acquaintances of metal level actors.
Reference: [20] <author> J. Eric Baldeschwieler, Robert D. Blumofe, and Eric A. Brewer. </author> <title> ATLAS: An Infrastructure for Global Computing. </title> <booktitle> In Proceedings of the The Seventh ACM SIGOPS European Workshop on Systems Support for Worldwide Applications, </booktitle> <year> 1996. </year>
Reference-contexts: Wax, Legion, Atlas <ref> [20] </ref>, Globus [31]. The Legion system [71] provides a unified view of a global network of computers using an extensible object model and services such as replication, migration and global persistent namespace management. The Globus metacomputing project [62, 52, 61] develops a framework for creating networked virtual supercomputers.
Reference: [21] <author> A. Banerjea, D. Ferrari, B. Mah, M. Moran, D. Verma, and H. Zhang. </author> <title> The tenet real-time protocol suite: Design, implementation and experiences. </title> <journal> IEEE Transactions on Networking, </journal> <volume> 4(1) </volume> <pages> 1-10, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: New protocols that include timing and media specification support (e.g. RTP) and implement connection setup 125 via resource reservation and admissions control (e.g. RSVP) are required to ensure continuous transmission. The TENET project <ref> [21, 60, 22] </ref> explores high-speed computer networking, real-time communication services, network support for continuous media applications, and internet studies. Classification of services into deterministic service, statistical service, predicted service and feedback based schemes deal with tradeoffs in QoS, network utilization and overload.
Reference: [22] <author> A. Banerjea, E. Knightly, F. Templin, and H. Zhang. </author> <title> Experiments with the tenet real-time protocol suite on the sequoia 2000 wide area network. </title> <booktitle> In ACM Multimedia '94, </booktitle> <address> San Francisco, California, </address> <pages> pages 183-192, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: New protocols that include timing and media specification support (e.g. RTP) and implement connection setup 125 via resource reservation and admissions control (e.g. RSVP) are required to ensure continuous transmission. The TENET project <ref> [21, 60, 22] </ref> explores high-speed computer networking, real-time communication services, network support for continuous media applications, and internet studies. Classification of services into deterministic service, statistical service, predicted service and feedback based schemes deal with tradeoffs in QoS, network utilization and overload.
Reference: [23] <author> Yolande Berbers, Bart De Decker, and Wouter Joosen. </author> <title> Infrastructure for mobile agents. </title> <booktitle> In Proc. of the 7th ACM SIGOPS European Workshop: System Support for Worldwide Applications. ACM, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Such services include support for the creation, execution and migration of agents and mechanisms for the composition of migratory agents with other system customizations. Understanding of the effect of system related operations on migrating agents <ref> [27, 23] </ref>. will require formal specifications of the components of the mobile environment and well established theoretical techniques to reason about system and application behavior. Research on programming mobile agents [73] can be used as a starting point for developing a programming model for mobile environments.
Reference: [24] <author> B. N. Bershad, S. Savage, P. Pardyak, E. G. Sirer, M. E. Fiuczynski, D. Becker, C. Chambers, and S. Eggers. </author> <title> Extensibility, Safety and Performance in the SPIN Operating System. </title> <booktitle> In Proceedings of the 15th Symposium on Operating System Principles, </booktitle> <month> December </month> <year> 1995. </year> <month> 296 </month>
Reference-contexts: However, once customized, the characteristics may not change dynamically. More recent systems support a higher degree of dynamic reconfiguration. For instance, in Choices [102, 37], the kernel contains a Java interpreter and dynamically loads new modules into the kernel. Similarly SPIN <ref> [24] </ref> can dynamically load modules written in type-safe Modula-3 and compiled using a trusted compiler. The Synthetix [128] system dynamically generates optimized code for each situation while Exokernel [59, 87] provides a minimal kernel that multiplexes hardware resources and user libraries (that tailor abstractions of OS services).
Reference: [25] <author> R. Bettati, D. Ferrari, A. Gupta, W. Heffner, W. Howe, M. Moran, Q. Nguyen, and R. Yavatkar. </author> <title> Connection establishment for multi-party real-time communication. </title> <editor> In Thomas D.C. Little and Riccardo Gusella, editors, </editor> <booktitle> 4th International Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <address> NOSSDAV 95 Durham, New Hampshire, USA, </address> <pages> pages 240-250, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: To understand network support required for MM applications, video-conferencing applications are characterized and and QoS parameters for MM networking are derived. Supporting real-time multiparty applications like video conferencing with guaranteed QoS requires specialized protocols for connection establishment <ref> [25] </ref>. INA/DPE is an architecture for telecommunication software design proposed by Bellcore. Frameworks such as TINA-C [101] integrate components and concepts in distributed computing, telecommunications and network management, e.g. call/configuration/bandwidth management, connection setup and teardown.
Reference: [26] <author> Chatschik Bisdikian and Baiju V. Patel. </author> <title> Issues on movie allocation in distributed video-on-demand systems. </title> <booktitle> In Proceedings of the IEEE International Conference on Communications, </booktitle> <volume> volume 1, </volume> <pages> pages 250-255, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: The video server stores 50 MPEG-2 movies, each with an average bandwidth requirement of 3 Mbps. The average duration of the movies is assumed to vary uniformly between 30 and 120 minutes. Following the results reported in <ref> [26, 46] </ref>, we assume that the popularity of movies follows Zipf's law, with the request arrivals per day for each movie m i being given by: 191 Pr. (movie m i is requested) = K M i where K M = i P M 1 j 1 Assuming that the request
Reference: [27] <author> Andrew Black and Jon Inouye. </author> <title> System support for mobility. </title> <booktitle> In Proc. of the 7th ACM SIGOPS European Workshop: System Support for Worldwide Applications. ACM, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Such services include support for the creation, execution and migration of agents and mechanisms for the composition of migratory agents with other system customizations. Understanding of the effect of system related operations on migrating agents <ref> [27, 23] </ref>. will require formal specifications of the components of the mobile environment and well established theoretical techniques to reason about system and application behavior. Research on programming mobile agents [73] can be used as a starting point for developing a programming model for mobile environments.
Reference: [28] <author> W.J. Bolosky, R.P. Draves, R.P. Fitzgerald, C.W. Fraser, M.B. Jones, T.B. Knoblock, and R. Rashid. </author> <title> Operating system directions for the next millenium: </title> <type> White paper. Technical report, </type> <institution> Microsoft Research, </institution> <year> 1997. </year>
Reference-contexts: The WebOS system is a framework that provides a common set of OS services to wide-area applications. The Millenium project <ref> [28] </ref> is an effort to build a pervasive, distributed OS that is self-tuning, scalable and secure.
Reference: [29] <author> Howard Bowman, Gordon Blair, Lynne Blair, and Amanda Chetwynd. </author> <title> Formal description of distributed multimedia systems: An assessment of potential techniques. </title> <journal> Computer Communications, </journal> <volume> 18(12), </volume> <month> December </month> <year> 1995. </year>
Reference-contexts: Other approaches address formal description methodologies for specifying QoS via dual language techniques that specify functional behavior and QoS constraints distinctly using two different languages <ref> [29] </ref>. These methodologies are based on synchronous communica 136 tion and therefore hide the overhead of synchronization and communication. The synchronous communication hypothesis is hard to realize because real systems cannot run infinitely fast.
Reference: [30] <author> S.D. Brookes, C.A.R. Hoare, and A.W. Roscoe. </author> <title> A Theory of Communicating Sequential Processes. </title> <journal> Journal of the ACM, </journal> <volume> 31(3) </volume> <pages> 560-599, </pages> <month> July </month> <year> 1984. </year>
Reference-contexts: A commercial effort attempting to create a global ubiquitous computing framework is the HP Information Utility [80]. 2.6 Formal Reasoning about Distributed Systems A number of formalisms have been developed for specifying and reasoning about concurrent systems <ref> [1, 30, 112, 113] </ref>. These include language independent formalisms based on temporal logic [108, 96, 98], behavior histories [122], and I/O automata [105]. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. <p> One can view a distributed computation model as a set of abstractions that capture the semantics and functionality of concurrent program execution. Many models of concurrency and distributed computing have been proposed <ref> [105, 81, 30, 112, 113] </ref>. With MM transmission, there is a rising demand for an infrastructure that supports a wide range of services and applications. With global multimedia applications, the main challenge is that of openness and performance in a distributed environment.
Reference: [31] <author> S. Brunett, D. Davis, T. Gottschalk, P. Messina, and C. Kesselman. </author> <title> Implementing distributed synthetic forces simulations in metacomputing environments. </title> <booktitle> In Proceedings of the Heterogeneous Computing Workshop, </booktitle> <month> March </month> <year> 1998. </year>
Reference-contexts: Wax, Legion, Atlas [20], Globus <ref> [31] </ref>. The Legion system [71] provides a unified view of a global network of computers using an extensible object model and services such as replication, migration and global persistent namespace management. The Globus metacomputing project [62, 52, 61] develops a framework for creating networked virtual supercomputers.
Reference: [32] <author> M. Buddhikot and G. Parulkar. </author> <title> Efficient data layout, scheduling and playout control in mars. </title> <booktitle> In Proceedings of NOSSDAV'95, </booktitle> <pages> pages 339-351, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: These multimedia servers are being deployed over emerging broadband networks to deliver a variety of interactive, digital multimedia services to thousands of residential subscribers [45]. To meet the scalability requirements in such large deployments, distributed multimedia server architectures are being considered <ref> [32] </ref>. In this section of the thesis, we describe a two-level multimedia management architecture base actors encapsulate media processing activities, i.e. streaming of video data residing on a particular server. and a group of meta-actors coordinate the execution of base-actors.
Reference: [33] <author> C. J. Callsen and G. A. Agha. </author> <title> Open Heterogeneous Computing in ActorSpace. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <pages> pages 289-300, </pages> <year> 1994. </year>
Reference-contexts: Using a flexible naming scheme offers support for transparent heterogeneity where objects are transparent to the details of the underlying architecture. In the ActorSpace model <ref> [33] </ref>, extensions to naming schemes provide flexible coordination patterns. Similarly, with naming as a basis, we can define complex interaction patterns and security mechanisms.
Reference: [34] <author> R. Campbell, N. Islam, D. Raila, and P. Madany. </author> <title> Designing and Implementing Choices: An Object-Oriented System in C++. </title> <journal> CACM, </journal> <pages> pages 117-126, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Non-reflective systems which support customization do so only on a static basis. In an object-oriented system such as Choices <ref> [34] </ref>, or Spring [75], frameworks may be customized for a particular application. However, once customized, the characteristics may not change dynamically. Traditional reflective systems aim at providing customizable and adaptable execution of concurrent systems.
Reference: [35] <author> Roy Campbell, Nayeem Islam, David Raila, and Peter Madany. </author> <title> Designing and implementing choices: An object-oriented system in c++. </title> <journal> Communications of the ACM, </journal> <pages> pages 117-126, </pages> <year> 1993. </year>
Reference-contexts: This project also addresses composable communication mechanisms in the middleware [42] and a variant of the global snapshot algorithm [38] for archiving distributed state. 16 2.2 Extensible and Distributed OS Environments In early object-oriented operating systems such as Choices <ref> [35] </ref>, and Spring [74], frameworks may be customized for a particular application. However, once customized, the characteristics may not change dynamically. More recent systems support a higher degree of dynamic reconfiguration. <p> Traditional reflective systems aim at providing a customizable and adaptable execution of concurrent systems [178, 168, 172]. However, these systems are very difficult and complex to reason about. Non-reflective systems which support customization do so only on a static basis. In an object-oriented system such as Choices <ref> [35] </ref>, or Spring [75], frameworks may be customized for a particular application. However, once customized, the characteristics may not change dynamically. What we require is an architecture that allows runtime aspects of an application and interaction protocols to be programmed and tuned independently of the basic application behavior.
Reference: [36] <author> Roy Campbell and Tin Qian. </author> <title> Dynamic agent-based security architecture for mobile computers. </title> <note> Submitted to IEEE Internet Computing Magzine, </note> <year> 1998. </year>
Reference-contexts: It is well-understood that no single security policy is suitable for all applications and framework. For instance, electronic commerce applications require stringent security mechanisms such as authorization, authentication and encryption whereas access to many educational websites do not. A customizable framework will provide facilities to enable various security mechanisms <ref> [36] </ref> to be implemented and allow flexibility in the degree of coupling between the security, access control and naming policies.
Reference: [37] <author> Roy H. Campbell and See-Mong Tan. </author> <title> Choices: An Object-Oriented Multimedia Operating System. </title> <booktitle> In Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <address> Orcas Island, Washington, </address> <month> May </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: However, once customized, the characteristics may not change dynamically. More recent systems support a higher degree of dynamic reconfiguration. For instance, in Choices <ref> [102, 37] </ref>, the kernel contains a Java interpreter and dynamically loads new modules into the kernel. Similarly SPIN [24] can dynamically load modules written in type-safe Modula-3 and compiled using a trusted compiler.
Reference: [38] <author> K. M. Chandy and L. Lamport. </author> <title> Distributed snapshots: determining global states of a distributed system. </title> <journal> ACM Transactions on Computing Systems, </journal> <volume> 3(1) </volume> <pages> 63-75, </pages> <year> 1985. </year> <month> 297 </month>
Reference-contexts: The Infospheres Infrastructure [43] uses active objects to define compositional structures for collaboration such as personal networks [41] and sessions [44] and develops techniques to permit customizations in this framework. This project also addresses composable communication mechanisms in the middleware [42] and a variant of the global snapshot algorithm <ref> [38] </ref> for archiving distributed state. 16 2.2 Extensible and Distributed OS Environments In early object-oriented operating systems such as Choices [35], and Spring [74], frameworks may be customized for a particular application. However, once customized, the characteristics may not change dynamically. <p> Thus the reachability snapshot service can be used as the basis for design, implementation, and verification of a distributed garbage collection service (cf. [157, 158]). The reachability snapshot specializes the notion of global snapshot of a distributed computation which is an important tool for distributed programming (cf. <ref> [38, 39] </ref>). Reachability allows us to illustrate some of the issues that arise in reasoning about object based systems where object identity is a fundamental concept.
Reference: [39] <author> K. M. Chandy and J. Misra. </author> <title> Parallel Program Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: These include language independent formalisms based on temporal logic [108, 96, 98], behavior histories [122], and I/O automata [105]. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. The Unity language <ref> [39] </ref> is a notation for describing systems. The focus of this work has been the development of methods for program specification and proof rules that support reasoning about these specifications and their relations. Actors can be viewed as a model of coordination between autonomous interacting components. <p> Thus the reachability snapshot service can be used as the basis for design, implementation, and verification of a distributed garbage collection service (cf. [157, 158]). The reachability snapshot specializes the notion of global snapshot of a distributed computation which is an important tool for distributed programming (cf. <ref> [38, 39] </ref>). Reachability allows us to illustrate some of the issues that arise in reasoning about object based systems where object identity is a fundamental concept. <p> They have been used to specify and verify a variety of protocols. One difficulty with existing formalisms is that components are not represented as objects of the formalisms, rather as instances signatures and formulae. Thus they do not address issues such as equivalence and transformations. The Unity language <ref> [39] </ref> is a notation for describing systems, the focus of this work has been methods for program specification and development of proof rules that support reasoning about these specifications and their relations. The underlying semantic model is a state transition system.
Reference: [40] <author> K. Mani Chandy. </author> <title> Properties of concurrent programs. </title> <journal> Formal Aspects of Computing, </journal> <volume> 6(6) </volume> <pages> 607-619, </pages> <year> 1994. </year>
Reference-contexts: The basic idea follows principles of program development based on use of high level abstractions that hide much of the implementation complexity. Recent work applying these ideas to distributed computing includes <ref> [40] </ref> where programming tools, each with associated proof rules for reasoning about, them are proposed. What is new in our work is the application of these ideas to two level systems. In this thesis, we consider two examples of basic services with non-trivial base-meta interactions: remote creation and reachability snapshot.
Reference: [41] <author> K. Mani Chandy, Joseph Kiniry, Adam Rifkin, and Daniel Zimmerman. </author> <title> Journal of supercomputing. </title> <type> 11(3), </type> <month> August </month> <year> 1997. </year>
Reference-contexts: Unlike Java, Actors [3], described later in this thesis is a model of concurrency based on active objects and asynchronous message passing and weakly fair execution. The Infospheres Infrastructure [43] uses active objects to define compositional structures for collaboration such as personal networks <ref> [41] </ref> and sessions [44] and develops techniques to permit customizations in this framework.
Reference: [42] <author> K.Mani Chandy, Adam Rifkin, and Eve Schooler. </author> <title> Using announce-listen with global events to develop distributed control systems. </title> <booktitle> In Proceedings of the ACM 1998 Workshop on Java for High-Performance Network Computing, </booktitle> <year> 1998. </year>
Reference-contexts: The Infospheres Infrastructure [43] uses active objects to define compositional structures for collaboration such as personal networks [41] and sessions [44] and develops techniques to permit customizations in this framework. This project also addresses composable communication mechanisms in the middleware <ref> [42] </ref> and a variant of the global snapshot algorithm [38] for archiving distributed state. 16 2.2 Extensible and Distributed OS Environments In early object-oriented operating systems such as Choices [35], and Spring [74], frameworks may be customized for a particular application. However, once customized, the characteristics may not change dynamically.
Reference: [43] <author> K.Mani Chandy, Adam Rifkin, Paolo A.G. Sivilotti, Jacob Mandelson, Matthew Richard-son, Wesley Tanaka, and Luke Weisman. </author> <title> A world-wide distributed system using java and the internet. </title> <booktitle> In Proceedings of IEEE International Symposium on High Performance Distributed Computing (HPDC-5), </booktitle> <address> Syracuse, New York, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: Unlike Java, Actors [3], described later in this thesis is a model of concurrency based on active objects and asynchronous message passing and weakly fair execution. The Infospheres Infrastructure <ref> [43] </ref> uses active objects to define compositional structures for collaboration such as personal networks [41] and sessions [44] and develops techniques to permit customizations in this framework.
Reference: [44] <author> M. Chandy and A. Rifkin. </author> <title> Systematic composition of objects in distributed internet applications processes and sessions. </title> <booktitle> In Hawaiian International Conference on System Sciences, </booktitle> <year> 1997. </year>
Reference-contexts: Unlike Java, Actors [3], described later in this thesis is a model of concurrency based on active objects and asynchronous message passing and weakly fair execution. The Infospheres Infrastructure [43] uses active objects to define compositional structures for collaboration such as personal networks [41] and sessions <ref> [44] </ref> and develops techniques to permit customizations in this framework. <p> Effective utilization of resources while composing protocols requires an understanding of how the policies work in unison. Composition of application level objects in the context of Web-based collaborative applications has been addressed by the Infospheres project at Caltech <ref> [44] </ref>. Collaborative applications are designed using entities known as dapplets which are processes that encapsulate state information and receive requests to modify state. Each process has a well-defined interface and communication among processes is asynchronous.
Reference: [45] <author> Y.H. Chang, D. Coggins, D. Pitt, D. Skellern, and M. Thapar. </author> <title> An open-systems approach to video on demand. </title> <journal> IEEE Communications, </journal> <volume> 32(5) </volume> <pages> 68-80, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Non-continuous Media Objects changes. Some of these policies have been addressed in commercial multimedia servers and prototypes <ref> [54, 45] </ref>. Multimedia systems must have the ability to deliver dependable and continuous transmission of remote media information to the subscriber with minimal jitters, hiccups and observable delays. <p> Real-time transfer, resource reservation and admission control techniques are features that must be implemented to provide guaranteed bitrate service. Traditional video-on-demand servers deal with issues in delivering isochronous data transfer to clients <ref> [45, 149, 56] </ref>. <p> These multimedia servers are being deployed over emerging broadband networks to deliver a variety of interactive, digital multimedia services to thousands of residential subscribers <ref> [45] </ref>. To meet the scalability requirements in such large deployments, distributed multimedia server architectures are being considered [32].
Reference: [46] <author> Y.S. Chen and P.Chong. </author> <title> Mathematical modeling of empirical laws in computer applications. </title> <journal> Comput. Math. Appl., </journal> <pages> pages 77-87, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The video server stores 50 MPEG-2 movies, each with an average bandwidth requirement of 3 Mbps. The average duration of the movies is assumed to vary uniformly between 30 and 120 minutes. Following the results reported in <ref> [26, 46] </ref>, we assume that the popularity of movies follows Zipf's law, with the request arrivals per day for each movie m i being given by: 191 Pr. (movie m i is requested) = K M i where K M = i P M 1 j 1 Assuming that the request
Reference: [47] <author> Zhigang Chen Chen, See-Mong Tan, Roy H. Campbell, and Yongchen Li. </author> <title> Real time video and audio in the world wide web. </title> <booktitle> In World Wide Web Conference, </booktitle> <address> Boston, MA, </address> <year> 1995. </year>
Reference-contexts: To understand real workload environments and user behav-ioral patterns, we conducted an extensive empirical study of sample video-on-demand systems such as VOSAIC (video-over-the-Web) system <ref> [47] </ref>, a hierarchical video-on-demand (VOD) system [115], and a remote VCR system [129]. Based on these results, we define parameters of resource consumption (e.g. storage, network bandwidth) and user satisfaction (e.g. jitter, synchronization skew) and derive analytical interrelationships among the metric parameters. <p> From the workload model it follows that selecting a unified metric will involve a choice of multiple parameters. This choice is based on empirical and statistical data which provides a base for analytical models with user requirements and resource allocations. User access logs obtained from the VOSAIC (video-over-the-internet) system <ref> [47] </ref>, allow us to analyze the user access statistics and general user information important for modeling of user satisfaction.
Reference: [48] <author> A. Chien, V. Karamcheti, and J. Plevyak. </author> <title> The concert system compiler and runtime support for efficient fine-grained concurrent object-oriented programs. </title> <type> Technical Report UIUCDCS-R-93-1815, </type> <institution> University of Illinois at Urbana-Champaign, Department of Computer Science, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Concurrent Aggregates (CA) is an extension of the Actor model which defines multi-access aggregates that allow several messages to arrive simultaneously, removing the need for serialization of messages. Concert is a system based on CA <ref> [48] </ref>, that facilitates the expression of irregular parallel programs and the construction of large applications. Metaarchitectural frameworks using the Actor model [160] provide dynamic customizability in designing and reasoning about components and protocols in open concurrent systems.
Reference: [49] <author> A. A. Chien. </author> <title> Concurrent Aggregates: Supporting Modularity in Massively Parallel Programs. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The meta-architectural model proposed in this thesis is a first step towards providing a formal semantics for open distributed systems, and a basis for specifying and reasoning about properties of and interactions between components of such systems. Application concurrency is provided by paradigms such as concurrent object oriented programming <ref> [11, 177, 3, 49] </ref>. However, in a distributed system, various applications share a common underlying set of resources.
Reference: [50] <author> David D. Clark, Scott Shenker, and Zhang Lixia. </author> <title> Supporting real-time applications in an integrated services packet network; architecture and mechanism. </title> <journal> ACM SIGCOMM '92, </journal> <volume> 22(4) </volume> <pages> 14-26, </pages> <month> August 17-20 </month> <year> 1992. </year> <note> (Softbound) ISBN 0-89791-526-7 (Casebound) ACM Order Number 533920 Copies may be ordered from 1 800 342-6626 1 410 528-4261 (Outside US, </note> <institution> MD and AK) ACM Order Department PO Box 64145 Baltimore, </institution> <address> MD 21264. </address>
Reference-contexts: The EPIQ project [83] provides interfaces, mechanisms, and protocols to support QoS management of flexible applications.Other work explores enhancements to the existing Web infrastructure to support applications with predictable QoS [95] and resource reservation protocols at the networking layer <ref> [50] </ref>.
Reference: [51] <author> W. D. Clinger. </author> <title> Foundations of actor semantics. </title> <type> AI-TR- 633, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <month> May </month> <year> 1981. </year>
Reference-contexts: The local computation carried out by the components may be specified in any sequential language. Axioms expressing the essential features of actor computation such as the acquaintance relation and ordering of events are given in [19]. Will Clinger <ref> [51] </ref> developed a powerdomain semantics of actor systems, showing the consistency of these axioms. An interleaving transition system semantics for an actor language is given in [9, 10].
Reference: [52] <author> K. Czajkowski, I. Foster, N. Karonis, C. Kesselman, S. Martin, W. Smith, and S. Tuecke. </author> <title> A resource management architecture for metacomputing systems. </title> <booktitle> In The 4th Workshop on Job Scheduling Strategies for Parallel Processing, </booktitle> <pages> pages 4-18. </pages> <publisher> IEEE-P, </publisher> <month> March </month> <year> 1998. </year> <month> 298 </month>
Reference-contexts: Wax, Legion, Atlas [20], Globus [31]. The Legion system [71] provides a unified view of a global network of computers using an extensible object model and services such as replication, migration and global persistent namespace management. The Globus metacomputing project <ref> [62, 52, 61] </ref> develops a framework for creating networked virtual supercomputers. Globus defines a QoS component called Qualis [100] where low level QoS mechanisms can be integrated and tested.
Reference: [53] <author> W. Dally and D. Wills. </author> <title> Universal mechanisms for concurrency. </title> <booktitle> In Proceedings of Parallel Architectures and Languages Europe, Vol. I: Parallel Architectures (PARLE '89), </booktitle> <pages> pages 19-33. </pages> <address> Espirit, </address> <publisher> Springer-Verlag, </publisher> <year> 1989. </year> <note> LNCS 366. </note>
Reference-contexts: It should be observed that actors can be directly supported on multicomputers whereas implementing other paradigms on such computers may require their implementation in terms of some simple variant of the actor execution model <ref> [53] </ref>. Scalability and Openness The Actor model promotes scalable computing via the use of suitable programming abstractions. Group abstractions allow us to simplify computation and enhance performance in applications where there is uniformity of behavior among a group of actors.
Reference: [54] <author> A. Dan, M. Kienzle, and D. Sitaram. </author> <title> Dynamic policy of segment replication for load-balancing in video-on-demand servers. </title> <journal> ACM Multimedia Systems, </journal> <volume> 3(3) </volume> <pages> 93-103, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Non-continuous Media Objects changes. Some of these policies have been addressed in commercial multimedia servers and prototypes <ref> [54, 45] </ref>. Multimedia systems must have the ability to deliver dependable and continuous transmission of remote media information to the subscriber with minimal jitters, hiccups and observable delays. <p> The goal of the dynamic phase is the minimization of an objective function that optimally balances disk loads, again, using a graph theoretic approach. A dynamic segment replication scheme for partial replication of video objects is proposed in <ref> [54] </ref>. This mechanism permits the executing requests to be dynamically migrated to a replica on a less loaded device. The trade-offs between storage space and transfer bandwidth are highlighted in [57].
Reference: [55] <author> A. Dan, D. Sitaram, and P. Shahabuddin. </author> <title> Dynamic batching policies for an on-demand video server. </title> <journal> ACM Multimedia Systems, </journal> <volume> 4 </volume> <pages> 112-121, </pages> <year> 1996. </year>
Reference-contexts: of media on disk to ensure real-time retrieval [16, 180], admission control procedures to maximize server throughput [166], buffer management policies to minimize memory requirements [66, 104], replication and striping strategies for optimizing storage across disk arrays [90, 151], batching mechanisms that group closely spaced requests for the same objects <ref> [55] </ref>, load balancing mechanisms for effective utilization [170, 163, 57]. 2.5 Internet Computing (Metacomputing) Various systems use resources on the Internet for wide-area parallel computing, e.g. Wax, Legion, Atlas [20], Globus [31]. <p> Replication and striping strategies for optimizing storage across disk arrays are described in [90, 151]. Batching mechanisms that group closely spaced requests for the same videos, thereby minimizing disk I/O and network bandwidth, are proposed in <ref> [55] </ref>.
Reference: [56] <author> Asit Dan, D. Dias, R. Mukherjee, D. Sitaram, and Tewari. R. </author> <title> Buffering and caching in large scale video servers. </title> <booktitle> In IEEE Compcon, </booktitle> <pages> pages 217-224, </pages> <year> 1995. </year>
Reference-contexts: Real-time transfer, resource reservation and admission control techniques are features that must be implemented to provide guaranteed bitrate service. Traditional video-on-demand servers deal with issues in delivering isochronous data transfer to clients <ref> [45, 149, 56] </ref>.
Reference: [57] <author> Asit Dan and Dinkar Sitaram. </author> <title> An online video placement policy based on bandwidth to space ratio (bsr). </title> <booktitle> In SIGMOD '95, </booktitle> <pages> pages 376-385, </pages> <year> 1995. </year>
Reference-contexts: retrieval [16, 180], admission control procedures to maximize server throughput [166], buffer management policies to minimize memory requirements [66, 104], replication and striping strategies for optimizing storage across disk arrays [90, 151], batching mechanisms that group closely spaced requests for the same objects [55], load balancing mechanisms for effective utilization <ref> [170, 163, 57] </ref>. 2.5 Internet Computing (Metacomputing) Various systems use resources on the Internet for wide-area parallel computing, e.g. Wax, Legion, Atlas [20], Globus [31]. <p> A dynamic segment replication scheme for partial replication of video objects is proposed in [54]. This mechanism permits the executing requests to be dynamically migrated to a replica on a less loaded device. The trade-offs between storage space and transfer bandwidth are highlighted in <ref> [57] </ref>. This work proposes a multi-phase online video placement policy that attempts to match the bandwidth to space ratios of videos with that of storage devices in a video server, in order to increase server throughput. <p> Since the data sources are connected via an external network and may have heterogeneous and distinct resources that are not shared with the other data sources, the tradeoffs to be considered for load management differ from those that exist in switched-storage servers <ref> [170, 57] </ref>. For instance, the application of the dynamic segment replication scheme in the context of a distributed multimedia server requires renegotiation and reestablishment of network connections for every request migration, thereby introducing unacceptable jitter during playback. <p> movies follows Zipf's law, with the request arrivals per day for each movie m i being given by: 191 Pr. (movie m i is requested) = K M i where K M = i P M 1 j 1 Assuming that the request arrivals per hour follow a Zipf-like distribution <ref> [57] </ref>, we compute the probability of request arrival in hour j to be: p j = c=(j 1OE ), for 1 j 24, where OE is the degree of skew and is assumed to be 0.8. The constant c = 1=( P (1=j 1OE )), 1 j 24.
Reference: [58] <author> Sean Dorward, Rob Pike, Dave Presotto, Howard Trickey, and Phil Winterbottom. </author> <title> Inferno: </title> <booktitle> La commedia Interattiva. In Proceedings of the OSDI'96 (WIP). USENIX, </booktitle> <year> 1996. </year>
Reference-contexts: Distributed real-time operating systems such as Rialto [109], and RT-Mach [111, 89] address issues of resource negotiation, processor reservation etc. The Inferno system <ref> [58] </ref> provides an environment for distributed programming to create new services with built in network protocols and the ability to create a footprint OS useful in embedded systems. The WebOS system is a framework that provides a common set of OS services to wide-area applications.
Reference: [59] <author> Dawson R. Engler, M. Frans Kaashoek, and James O'Toole Jr. Exokernel: </author> <title> An operating system architecture for application-level resource management. </title> <booktitle> In Proceedings of the Fifteenth Symposium on Operating Systems Principles, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Similarly SPIN [24] can dynamically load modules written in type-safe Modula-3 and compiled using a trusted compiler. The Synthetix [128] system dynamically generates optimized code for each situation while Exokernel <ref> [59, 87] </ref> provides a minimal kernel that multiplexes hardware resources and user libraries (that tailor abstractions of OS services). In all of these systems, the task of writing a module to extend the system requires a working knowledge of the specific system.
Reference: [60] <author> D. Ferrari, A. Banerjea, and H. Zhang. </author> <title> Network support for multimedia a discussion of the tenet approach. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 26 </volume> <pages> 1267-1280, </pages> <year> 1994. </year>
Reference-contexts: New protocols that include timing and media specification support (e.g. RTP) and implement connection setup 125 via resource reservation and admissions control (e.g. RSVP) are required to ensure continuous transmission. The TENET project <ref> [21, 60, 22] </ref> explores high-speed computer networking, real-time communication services, network support for continuous media applications, and internet studies. Classification of services into deterministic service, statistical service, predicted service and feedback based schemes deal with tradeoffs in QoS, network utilization and overload.
Reference: [61] <author> I. Foster and C. Kesselman. Globus: </author> <title> A metacomputing infrastructure toolkit. </title> <journal> International Journal of Supercomputer Applications, </journal> <volume> 11(2) </volume> <pages> 115-128, </pages> <year> 1997. </year>
Reference-contexts: Wax, Legion, Atlas [20], Globus [31]. The Legion system [71] provides a unified view of a global network of computers using an extensible object model and services such as replication, migration and global persistent namespace management. The Globus metacomputing project <ref> [62, 52, 61] </ref> develops a framework for creating networked virtual supercomputers. Globus defines a QoS component called Qualis [100] where low level QoS mechanisms can be integrated and tested.
Reference: [62] <author> I. Foster and C. Kesselman. </author> <title> The Globus project: A progress report. </title> <booktitle> In Proceedings of the Heterogeneous Computing Workshop, </booktitle> <month> March </month> <year> 1998. </year>
Reference-contexts: Wax, Legion, Atlas [20], Globus [31]. The Legion system [71] provides a unified view of a global network of computers using an extensible object model and services such as replication, migration and global persistent namespace management. The Globus metacomputing project <ref> [62, 52, 61] </ref> develops a framework for creating networked virtual supercomputers. Globus defines a QoS component called Qualis [100] where low level QoS mechanisms can be integrated and tested.
Reference: [63] <author> Svend Frolund. </author> <title> Coordinating Distributed Objects: An Actor-Based Approach to Synchronization. </title> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: However most do not support the factorization of fault tolerance characteristics from the application specific code. Similarly developing systematic means of describing and ensuring synchronization constraints on interactions between system components can be complex. High level language constructs for expressing such constraints include synchronizers and activators <ref> [63] </ref>. <p> Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179]. Representation of dependability protocols as meta-level programs is presented in [7]. Some of the more recent research on actors has focused on coordination structures and meta-architectures <ref> [6, 63, 141] </ref>. The Aspect Oriented Programming paradigm [92] makes it possible to express programs where design decisions (aspects) can be appropriately isolated permitting composition and re-use of the aspect code. Many of these languages or systems lack clearly defined semantics. <p> The synchronization skew oe is defined as: oe = t i;a t i;v (6.3) For acceptable QoS in a distributed multimedia system, these parameters are bounded. 6.4.1 Actors and Multimedia Specifying QoS in the Actor based model is essentially a problem of specifying coordination constraints between distributed objects. Synchronizers <ref> [63] </ref> allow us to express these coordination constraints, i.e. local synchronization constraints or multi-actor coordination constraints.Synchronizers also allow us to qualitatively control the semantics of message delivery. Another construct, activators, permit abstract specification of a behavior activated by a set of messages instead of by a single message [63]. <p> Synchronizers <ref> [63] </ref> allow us to express these coordination constraints, i.e. local synchronization constraints or multi-actor coordination constraints.Synchronizers also allow us to qualitatively control the semantics of message delivery. Another construct, activators, permit abstract specification of a behavior activated by a set of messages instead of by a single message [63]. However, Synchronizers do not incorporate the notion of quantitative time. The basic Actor model captures the fundamental properties of general purpose distributed computing in which only logical time is concerned. Individual objects are constrained only by the computational causal order. <p> This implies that the media-actors themselves directly communicate with each other to enforce constraint satisfaction. A more centralized implementation consists of a single entity that represents the synchronizer through which the media actors are controlled. The implementation of Synchronizers in <ref> [63] </ref> uses a hybrid approach where some constraints are implemented using a centralized entity and some constraints are distributed among the controlled actors. <p> In this case, media actors constitute the application or base-level subsystem. In order to reason about the implementation, we propose meta-level implementation entities that represent the QoS Synchronizer known as 150 ' $ QoS meta-actors (similar to constraint servers in <ref> [63] </ref>) that monitor events on base-level media-actors. The QoS meta-actors evaluate timing constraints and communicate them to a message scheduler which is itself another meta-level actor controlling the mailqueue orderings of media actors.
Reference: [64] <author> G. Hamilton, M. Powell, and J. Mitchell. Subcontract: </author> <title> a Flexible Base for Distributed Programming. </title> <booktitle> In Proceedings of the 14th Symposium on Operating Systems Principles, </booktitle> <address> Asheville, NC, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: In all of these systems, the task of writing a module to extend the system requires a working knowledge of the specific system. Distributed operating systems developed in the late 80s and early 90s such as Sprite [125], Plan 9 [127], Spring <ref> [114, 64] </ref> and Amoeba [146, 117, 147] have provided significant insight into issues such as distributed filesystems and process migration. Distributed real-time operating systems such as Rialto [109], and RT-Mach [111, 89] address issues of resource negotiation, processor reservation etc.
Reference: [65] <author> Francisco Garcia, David Hutchison snd Andreas Mauthe, and Nicholas Yeadon. </author> <title> Qos support for distributed multimedia communications. </title> <booktitle> In 1st International Conference on Distributed Platforms, </booktitle> <address> Dresden, Germany, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: This translation is required during the admission control process where resource availability at different levels must be queried and negotiated for. Approaches that focus on QoS management and its mapping on to the transport system include the Heidelberg High Speed Transport System [167], the Lancaster QoS architecture, <ref> [65] </ref> and the CINEMA system [84]. These architectures deal with QoS support in a heterogeneous environment with diverse com munication requirements, varying levels of QoS in terms of latency, bandwidth, jitter etc.
Reference: [66] <author> J. Gemmell and S. Christodoulakis. </author> <title> Principles of delay sensitive multimedia data storage and retrieval. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 51-90, </pages> <year> 1992. </year>
Reference-contexts: Work on resource management mechanisms for multimedia servers has focussed on placement of media on disk to ensure real-time retrieval [16, 180], admission control procedures to maximize server throughput [166], buffer management policies to minimize memory requirements <ref> [66, 104] </ref>, replication and striping strategies for optimizing storage across disk arrays [90, 151], batching mechanisms that group closely spaced requests for the same objects [55], load balancing mechanisms for effective utilization [170, 163, 57]. 2.5 Internet Computing (Metacomputing) Various systems use resources on the Internet for wide-area parallel computing, e.g. <p> Admission control procedures to maximize server throughput [166] and buffer management policies to minimize memory requirements <ref> [66, 104] </ref> have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in [90, 151]. Batching mechanisms that group closely spaced requests for the same videos, thereby minimizing disk I/O and network bandwidth, are proposed in [55].
Reference: [67] <author> Aniruddha Gokhale, Tim Harrison, Douglas C. Schmidt, and Guru Parulkar. </author> <title> Operating System Support for Real-time CORBA. </title> <booktitle> In Proceedings of the 5th International Workshop on Object-Orientation in Operating Systems: IWOOOS 1996, </booktitle> <address> Seattle, Washington, </address> <year> 1996. </year> <month> 299 </month>
Reference-contexts: TAO is a framework that supports real-time CORBA extensions to provide 15 end-to-end QoS and it has been used to study performance optimizations [68, 70], real-time inter-ORB protocols and real-time scheduling [69], wide-area networking <ref> [67] </ref>, event management [76], and patterns for extensible middleware [106, 135]. Similarly, real-time method invocations have been explored by transmitting timing information in CORBA data structures [171]. Preliminary work on defining reflective ORBs to customize scheduling is reported in [138].
Reference: [68] <author> Aniruddha Gokhale and Douglas C. Schmidt. </author> <title> Measuring the Performance of Communica--tion Middleware on High-Speed Networks. </title> <booktitle> In Proceedings of SIGCOMM96, </booktitle> <address> San Francisco, CA, </address> <year> 1996. </year>
Reference-contexts: Various researchers have investigated architectures that provide real-time extensions to CORBA [136, 171, 150] necessary to support timing-based QoS requirements [182]. TAO is a framework that supports real-time CORBA extensions to provide 15 end-to-end QoS and it has been used to study performance optimizations <ref> [68, 70] </ref>, real-time inter-ORB protocols and real-time scheduling [69], wide-area networking [67], event management [76], and patterns for extensible middleware [106, 135]. Similarly, real-time method invocations have been explored by transmitting timing information in CORBA data structures [171].
Reference: [69] <author> Aniruddha Gokhale and Douglas C. Schmidt. </author> <title> Performance of the CORBA Dynamic Invocation Interface and Internet Inter-ORB Protocol over High-Speed ATM Networks . In Proceedings of GLOBECOM '96, </title> <month> November, </month> <year> 1996. </year>
Reference-contexts: TAO is a framework that supports real-time CORBA extensions to provide 15 end-to-end QoS and it has been used to study performance optimizations [68, 70], real-time inter-ORB protocols and real-time scheduling <ref> [69] </ref>, wide-area networking [67], event management [76], and patterns for extensible middleware [106, 135]. Similarly, real-time method invocations have been explored by transmitting timing information in CORBA data structures [171]. Preliminary work on defining reflective ORBs to customize scheduling is reported in [138].
Reference: [70] <author> Aniruddha Gokhale and Douglas C. Schmidt. </author> <title> Evaluating the Performance of Demulti-plexing Strategies for Real-time CORBA. </title> <booktitle> In Proceedings of GLOBECOM '97, </booktitle> <address> Phoenix, AZ, </address> <year> 1997. </year>
Reference-contexts: Various researchers have investigated architectures that provide real-time extensions to CORBA [136, 171, 150] necessary to support timing-based QoS requirements [182]. TAO is a framework that supports real-time CORBA extensions to provide 15 end-to-end QoS and it has been used to study performance optimizations <ref> [68, 70] </ref>, real-time inter-ORB protocols and real-time scheduling [69], wide-area networking [67], event management [76], and patterns for extensible middleware [106, 135]. Similarly, real-time method invocations have been explored by transmitting timing information in CORBA data structures [171].
Reference: [71] <author> Andrew S. Grimshaw, William A. Wulf, and et al. </author> <title> The Legion Vision of a Worldwide Virtual Computer. </title> <journal> Communications of the ACM, </journal> <volume> 40(1), </volume> <month> January </month> <year> 1997. </year>
Reference-contexts: Wax, Legion, Atlas [20], Globus [31]. The Legion system <ref> [71] </ref> provides a unified view of a global network of computers using an extensible object model and services such as replication, migration and global persistent namespace management. The Globus metacomputing project [62, 52, 61] develops a framework for creating networked virtual supercomputers.
Reference: [72] <institution> Object Management Group. "The Corba 2.0 Specification". </institution> <type> Technical report, </type> <month> March </month> <year> 1996. </year>
Reference-contexts: In the following sections, we describe related work in these areas and briefly summarize the contributions in this thesis. 2.1 Existing Middleware Infrastructures Commercially available object-based middleware infrastructures include CORBA (Common Object Request Broker Architecture) <ref> [72] </ref>, the product of a consortium of industries and OMG (Object Management Group), DCOM (Distributed Component Object Model) [130], and Ac-tiveX from Microsoft Corporation. DCE (Distributed Computing Environment) from OSF (Open Software Foundation) is a commercially available non-object framework.
Reference: [73] <author> David Halls, John Bates, and Jean Bacon. </author> <title> Flexible distributed programming using mobile code. </title> <booktitle> In Proc. of the 7th ACM SIGOPS European Workshop: System Support for Worldwide Applications. ACM, </booktitle> <month> September </month> <year> 1996. </year>
Reference-contexts: Understanding of the effect of system related operations on migrating agents [27, 23]. will require formal specifications of the components of the mobile environment and well established theoretical techniques to reason about system and application behavior. Research on programming mobile agents <ref> [73] </ref> can be used as a starting point for developing a programming model for mobile environments. Other applications include distributed transactional and fault-tolerant systems.
Reference: [74] <author> G. Hamilton, M. L. Powell, and J. J. Mitchell. Subcontract: </author> <title> A flexible base for distributed programming. </title> <booktitle> Fourteenth Symposium on Operating Systems Principles, </booktitle> <pages> pages 69-79, </pages> <month> Dec </month> <year> 1993. </year>
Reference-contexts: This project also addresses composable communication mechanisms in the middleware [42] and a variant of the global snapshot algorithm [38] for archiving distributed state. 16 2.2 Extensible and Distributed OS Environments In early object-oriented operating systems such as Choices [35], and Spring <ref> [74] </ref>, frameworks may be customized for a particular application. However, once customized, the characteristics may not change dynamically. More recent systems support a higher degree of dynamic reconfiguration. For instance, in Choices [102, 37], the kernel contains a Java interpreter and dynamically loads new modules into the kernel.
Reference: [75] <author> Graham Hamilton, Michael Powell, and James Mitchell. Subcontract: </author> <title> A flexible base for distributed programming. </title> <booktitle> In ACM Symposium on Operating System Principles, </booktitle> <pages> pages 69-79, </pages> <year> 1993. </year>
Reference-contexts: However, these systems are very difficult and complex to reason about. Non-reflective systems which support customization do so only on a static basis. In an object-oriented system such as Choices [35], or Spring <ref> [75] </ref>, frameworks may be customized for a particular application. However, once customized, the characteristics may not change dynamically. What we require is an architecture that allows runtime aspects of an application and interaction protocols to be programmed and tuned independently of the basic application behavior. <p> Non-reflective systems which support customization do so only on a static basis. In an object-oriented system such as Choices [34], or Spring <ref> [75] </ref>, frameworks may be customized for a particular application. However, once customized, the characteristics may not change dynamically. Traditional reflective systems aim at providing customizable and adaptable execution of concurrent systems.
Reference: [76] <author> Tim Harrison, David Levine, and Douglas C. Schmidt. </author> <title> The Design and Performance of a Real-time CORBA Event Service. </title> <booktitle> In Proceedings of OOPSLA'97, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: TAO is a framework that supports real-time CORBA extensions to provide 15 end-to-end QoS and it has been used to study performance optimizations [68, 70], real-time inter-ORB protocols and real-time scheduling [69], wide-area networking [67], event management <ref> [76] </ref>, and patterns for extensible middleware [106, 135]. Similarly, real-time method invocations have been explored by transmitting timing information in CORBA data structures [171]. Preliminary work on defining reflective ORBs to customize scheduling is reported in [138].
Reference: [77] <author> J. Helary. </author> <title> Observing global states of asynchronous distributed applications. </title> <booktitle> In Proceedings of the Workshop on Distributed Algorithms, </booktitle> <pages> pages 124-135. </pages> <publisher> Esprit, Springer-Verlag, </publisher> <year> 1989. </year> <note> LNCS 392. </note>
Reference-contexts: This termination signal will also serve as a synchronization point in the snapshot mechanism. Note that this generalizes the notions of wave and global snapshot discussed in <ref> [77] </ref> where the snapshots explicitly do not account for information contained in messages in transit. We assume that the nodes in the network topology are ordered, such that it is possible to designate a start node and a finish node.
Reference: [78] <author> C. Hewitt. </author> <title> Viewing control structures as patterns of passing messages. </title> <journal> Journal of Artificial Intelligence, </journal> <volume> 8-3:323-364, </volume> <month> June </month> <year> 1977. </year>
Reference-contexts: What is required is a model that allows distributed applications to be developed, implemented and enhanced while maintaining the desired level of service quality. We characterize such systems as open distributed systems (ODS). The Actor model or Actors, first proposed by Carl Hewitt <ref> [78] </ref> and later developed by Agha [3], captures the essence of concurrent computation in open distributed systems at an abstract level. 23 3.1.1 About Actors Open Distributed Systems (ODS) evolve dynamically and components of ODS interact with an environment that is not under their control.
Reference: [79] <author> C. Hewitt. </author> <title> Viewing control structures as patterns of passing messages. </title> <journal> Journal of Artificial Intelligence, </journal> <volume> 8(3) </volume> <pages> 323-364, </pages> <year> 1977. </year>
Reference-contexts: An interleaving transition system semantics for an actor language is given in [9, 10]. This work builds on the formulation in [4] and develops methods for reasoning about equivalence of actor programs [13, 143] and the composition of activities in actor systems [160]. (See <ref> [79, 4, 6] </ref> for more discussion of the Actor model, and for many examples of programming with actors.) Note that the Actor model is, like the theory of higher order nets or the -calculus, general and inherently parallel.
Reference: [80] <institution> Hewlett-Packard Laboratories. </institution> <note> Toward pervasive information systems. http://www.hpl.hp.com/speeches/pervasive.html. </note>
Reference-contexts: The Metacomputing Project at JHU is exploring ways to effectively utilize unused resources available on the network to complete computation on time on networks of workstations and the global Internet [15, 14]. A commercial effort attempting to create a global ubiquitous computing framework is the HP Information Utility <ref> [80] </ref>. 2.6 Formal Reasoning about Distributed Systems A number of formalisms have been developed for specifying and reasoning about concurrent systems [1, 30, 112, 113]. These include language independent formalisms based on temporal logic [108, 96, 98], behavior histories [122], and I/O automata [105].
Reference: [81] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference-contexts: One can view a distributed computation model as a set of abstractions that capture the semantics and functionality of concurrent program execution. Many models of concurrency and distributed computing have been proposed <ref> [105, 81, 30, 112, 113] </ref>. With MM transmission, there is a rising demand for an infrastructure that supports a wide range of services and applications. With global multimedia applications, the main challenge is that of openness and performance in a distributed environment.
Reference: [82] <author> P. Homburg, M. van Steen, </author> <title> and A.S. Tanenbaum. An architecture for a wide area distributed system. </title> <booktitle> In Proc. Seventh ACM SIGOPS European Workshop, </booktitle> <address> Connemara, Ire-land, </address> <year> 1996. </year> <month> 300 </month>
Reference-contexts: The WebOS system is a framework that provides a common set of OS services to wide-area applications. The Millenium project [28] is an effort to build a pervasive, distributed OS that is self-tuning, scalable and secure. The Globe system <ref> [82, 156, 155] </ref> explores the construction of large scale distributed systems using the paradigm of distributed shared objects; here shared objects can be managed by appropriate subobjects. 2.3 Reflective Systems Reflection allows application objects to customize the system behavior (Figure 2.2).
Reference: [83] <author> David Hull, Arjun Shankar, Klara Nahrstedt, and Jane W.S. Li. </author> <title> An end-to-end qos model and management architecture. </title> <booktitle> In Proceedings of IEEE Workshop on Middleware for Distributed Real Time Systems and Services, </booktitle> <address> San Francisco, </address> <month> December </month> <year> 1997. </year>
Reference-contexts: QualMan [118] is a QoS aware resource management platform which contains a set of resource brokers that provides negotiation, admission and reservation capabilities for sharing end-system resources such as CPU, memory and network bandwidth. The EPIQ project <ref> [83] </ref> provides interfaces, mechanisms, and protocols to support QoS management of flexible applications.Other work explores enhancements to the existing Web infrastructure to support applications with predictable QoS [95] and resource reservation protocols at the networking layer [50].
Reference: [84] <author> Tino Hutschenreuther and Sascha Kummel. </author> <title> Ina-qos t integrated network architecture for qos-based transmission in heterogeneous environments. </title> <editor> In Jan de Meer and Andreas Vogel, editors, </editor> <booktitle> 4th International IFIP Workshop on Quality of Service, </booktitle> <address> IwQos96 Paris, France, </address> <pages> pages 55-65, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Approaches that focus on QoS management and its mapping on to the transport system include the Heidelberg High Speed Transport System [167], the Lancaster QoS architecture, [65] and the CINEMA system <ref> [84] </ref>. These architectures deal with QoS support in a heterogeneous environment with diverse com munication requirements, varying levels of QoS in terms of latency, bandwidth, jitter etc. In 131 ' $ the Omega architecture, QoS parameters are translated between application and network by a QoS broker [120, 119].
Reference: [85] <author> Jun ichiro Itoh, Rodger Lea, and Yasuhiko Yokote. </author> <title> Using meta-objects to support optimization in the Apertos operating system. </title> <booktitle> In USENIX COOTS (Conference on Object-Oriented Technologies, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: In the Multi-Model Reflective Framework (MMRF) [123], an object is represented by multiple models allowing behavior to be described at different levels of abstraction. Aper-tos <ref> [173, 85] </ref> uses reflection as a fundamental basis for developing an operating system and provides mechanisms for reification, customizing communication and object migration. 2K [94] is a recent reflective, component based operating system effort that supports dynamic loading of new components.
Reference: [86] <author> C. B. Jones. </author> <title> Specification and design of parallel programs. </title> <editor> In R. E. A. Mason, editor, </editor> <booktitle> Information Processing 83: Proceedings of the IFIP 9th World Congress, </booktitle> <pages> pages 321-332, </pages> <year> 1983. </year>
Reference-contexts: Non-interference properties must also be specified and checked. Similar observations have been made for traditional one level systems. For example, in [2] Abadi and Lamport give a method for describing open components of concurrent systems using assumption/guarantee assertions <ref> [86] </ref>. Assumptions are requirements on the components environment. Here we consider 57 object based systems and have the additional important problem of ensuring that meta-level activities do not have unintended effects on the base level semantics.
Reference: [87] <author> M. Frans Kaashoek, Dawson R. Engler, Gregory R. Ganger, Hector Brice~no, Russell Hunt, David Mazieres, Tom Pinckney, Robert Grimm, John Janotti, and Kenneth Mackenzie. </author> <title> Application Performance and Flexibility on Exokernel Systems. </title> <booktitle> In Proceedings of the Sixteenth Symposium on Operating Systems Principles, </booktitle> <address> Saint Malo, FR, </address> <month> October </month> <year> 1997. </year> <note> ACM. </note>
Reference-contexts: Similarly SPIN [24] can dynamically load modules written in type-safe Modula-3 and compiled using a trusted compiler. The Synthetix [128] system dynamically generates optimized code for each situation while Exokernel <ref> [59, 87] </ref> provides a minimal kernel that multiplexes hardware resources and user libraries (that tailor abstractions of OS services). In all of these systems, the task of writing a module to extend the system requires a working knowledge of the specific system.
Reference: [88] <author> D. Kafura, D. Washabaugh, and J. Nelson. </author> <title> Garbage collection of actors. </title> <editor> In N. Meyrowitz, editor, </editor> <booktitle> Proceedings 1990 ECOOP/OOPSLA, </booktitle> <pages> pages 126-134. </pages> <publisher> ACM Press, </publisher> <year> 1990. </year>
Reference-contexts: Furthermore, the ability of an "apparently unreachable" object to send its mail address to a reachable object must also be considered. Our definition of reachable in an actor-based system is derived from the work of Kafura et. al. <ref> [88] </ref>. The root set is a fixed set of actors from which reachability is traced. <p> Furthermore, the ability of an "apparently unreachable" object to send its mail address to a reachable object must also be considered. Our definition of reachable in an actor-based system is derived from the work of Kafura et. al. <ref> [88] </ref>. We consider reachability from a root set (See Figure 5.3), a set of actors which are to be considered independently reachable. As mentioned above, the acquaintances of an actor in a configuration are the identifiers contained in the actors state plus those contained in undelivered messages to that actor.
Reference: [89] <author> Kiyokuni Kawachiya and et al. </author> <title> Evaluation of qos-control servers on real-time mach. </title> <editor> In Thomas D.C. Little and Riccardo Gusella, editors, </editor> <booktitle> 4th International Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <address> NOSSDAV 95 Durham, New Hampshire, USA, </address> <pages> pages 117-128, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Distributed operating systems developed in the late 80s and early 90s such as Sprite [125], Plan 9 [127], Spring [114, 64] and Amoeba [146, 117, 147] have provided significant insight into issues such as distributed filesystems and process migration. Distributed real-time operating systems such as Rialto [109], and RT-Mach <ref> [111, 89] </ref> address issues of resource negotiation, processor reservation etc. The Inferno system [58] provides an environment for distributed programming to create new services with built in network protocols and the ability to create a footprint OS useful in embedded systems. <p> Several QoS parameters such as deadlines and packet losses <ref> [89] </ref> must dynamically adapt during processing and communication.
Reference: [90] <author> K. Keeton and R. Katz. </author> <title> The evaluation of video layout strategies on a high-bandwidth file server. </title> <booktitle> In Proceedings of the Fourth International Workshop on Network and Operating System Support for Digital Audio and Video, Lancaster, UK, </booktitle> <pages> pages 237-250, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Work on resource management mechanisms for multimedia servers has focussed on placement of media on disk to ensure real-time retrieval [16, 180], admission control procedures to maximize server throughput [166], buffer management policies to minimize memory requirements [66, 104], replication and striping strategies for optimizing storage across disk arrays <ref> [90, 151] </ref>, batching mechanisms that group closely spaced requests for the same objects [55], load balancing mechanisms for effective utilization [170, 163, 57]. 2.5 Internet Computing (Metacomputing) Various systems use resources on the Internet for wide-area parallel computing, e.g. Wax, Legion, Atlas [20], Globus [31]. <p> Admission control procedures to maximize server throughput [166] and buffer management policies to minimize memory requirements [66, 104] have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in <ref> [90, 151] </ref>. Batching mechanisms that group closely spaced requests for the same videos, thereby minimizing disk I/O and network bandwidth, are proposed in [55].
Reference: [91] <author> Gregor Kiczales, Jim des Riviers, and DanielG. Bobrow. </author> <title> The Art of the Metaobject Protocol. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: A reflective implementation of object migration is reported in [168]. Reflection has been used in the Muse Operating System [174, 175, 176] for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns <ref> [91, 179] </ref>. Representation of dependability protocols as meta-level programs is presented in [7]. The Aspect Oriented Programming paradigm [92] makes it possible to express programs where design decisions (aspects) can be appropriately isolated permitting composition and re-use of the aspect code. <p> A reflective im 55 plementation of object migration is reported in [168]. Reflection has been used in the Muse Operating System [172] for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns <ref> [91, 179] </ref>. Representation of dependability protocols as meta-level programs is presented in [7]. Some of the more recent research on actors has focused on coordination structures and meta-architectures [6, 63, 141].
Reference: [92] <author> Gregor Kiczales, John Lamping, Anurag Mendhekar, Chris Maeda, Cristina Videira Lopes, Jean-Marc Loingtier, and John Irwin. </author> <booktitle> Aspect-Oriented Programming. In Proceedings of ECOOP'97 European Conference on Object-Oriented Programming, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179]. Representation of dependability protocols as meta-level programs is presented in [7]. The Aspect Oriented Programming paradigm <ref> [92] </ref> makes it possible to express programs where design decisions (aspects) can be appropriately isolated permitting composition and re-use of the aspect code. In the Multi-Model Reflective Framework (MMRF) [123], an object is represented by multiple models allowing behavior to be described at different levels of abstraction. <p> Representation of dependability protocols as meta-level programs is presented in [7]. Some of the more recent research on actors has focused on coordination structures and meta-architectures [6, 63, 141]. The Aspect Oriented Programming paradigm <ref> [92] </ref> makes it possible to express programs where design decisions (aspects) can be appropriately isolated permitting composition and re-use of the aspect code. Many of these languages or systems lack clearly defined semantics.
Reference: [93] <author> W. Kim. THAL: </author> <title> An Actor System for Efficient and Scalable Concurrent Computing. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: An actor runtime system provides the interface to services such as global addressing, memory management, fair scheduling, and communication. It turns out that these services can be efficiently implemented, thus raising the level of abstraction while reducing the size and complexity of code on concurrent architectures <ref> [93] </ref>. Application portability is achieved via a well-defined interface exported to the compiler this makes the application architecture independent. Architecture dependent modules are separated; hence porting the runtime system across multiple platforms is fairly straightforward. <p> For instance, the time taken for remote actor creation varies considerably as it is dependent on processor load and network traffic. Hence, in platforms where hardware context switching is available, it is desirable to implement a technique called split-phase remote creation <ref> [93] </ref>. Here, the processor requesting remote creation context switches to another thread from the one requesting the remote creation effectively hiding latency and improving processor utilization. This approach is however not suitable on platforms where context switch is expensive.
Reference: [94] <author> Fabio Kon, Ashish Singhai, Roy H. Campbell, Dulcineia Carvalho, Robert Moore, and Franscisco J. Ballesteros. </author> <title> 2K: A Reflective, Component-Based Operating System for Rapidly Changing Environments . In Proceedings of ECOOP'98 Workshop on Reflective Object-Oriented Programming and Systems, </title> <address> Brussels, Belgium, </address> <month> July </month> <year> 1998. </year> <month> 301 </month>
Reference-contexts: In the Multi-Model Reflective Framework (MMRF) [123], an object is represented by multiple models allowing behavior to be described at different levels of abstraction. Aper-tos [173, 85] uses reflection as a fundamental basis for developing an operating system and provides mechanisms for reification, customizing communication and object migration. 2K <ref> [94] </ref> is a recent reflective, component based operating system effort that supports dynamic loading of new components. Some of the more recent research on actors has focused on coordination structures and meta-architectures [6]. Actor based reflective runtime systems include Broadway [141] and the Actor Foundry [124].
Reference: [95] <author> K. Lakshman, Madan Manoharan, and Raj Yavatkar. </author> <title> Adding Realtime Applets and Quality of Service Support to the World Wide Web. </title> <booktitle> In Proceedings of the The Seventh ACM SIGOPS European Workshop on Systems Support for Worldwide Applications, </booktitle> <year> 1996. </year>
Reference-contexts: The EPIQ project [83] provides interfaces, mechanisms, and protocols to support QoS management of flexible applications.Other work explores enhancements to the existing Web infrastructure to support applications with predictable QoS <ref> [95] </ref> and resource reservation protocols at the networking layer [50].
Reference: [96] <author> L. Lamport. </author> <title> Specifying concurrent program modules. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 5(2) </volume> <pages> 190-222, </pages> <year> 1983. </year>
Reference-contexts: These include language independent formalisms based on temporal logic <ref> [108, 96, 98] </ref>, behavior histories [122], and I/O automata [105]. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. The Unity language [39] is a notation for describing systems. <p> These include formalisms based on temporal logic <ref> [108, 96, 97] </ref>, behavior histories [122], and I/O automata [105]. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. They have been used to specify and verify a variety of protocols.
Reference: [97] <author> L. Lamport. </author> <title> A temporal logic of actions. </title> <type> Technical Report 57, </type> <institution> DEC Systems Research Center, </institution> <year> 1990. </year>
Reference-contexts: These include formalisms based on temporal logic <ref> [108, 96, 97] </ref>, behavior histories [122], and I/O automata [105]. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. They have been used to specify and verify a variety of protocols.
Reference: [98] <author> L. Lamport. </author> <title> The temporal logic of actions. </title> <type> Technical Report 79, </type> <institution> DEC Systems Research Center, </institution> <year> 1991. </year> <note> To appear in ACM TOPLAS. </note>
Reference-contexts: These include language independent formalisms based on temporal logic <ref> [108, 96, 98] </ref>, behavior histories [122], and I/O automata [105]. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. The Unity language [39] is a notation for describing systems.
Reference: [99] <author> Doug Lea. </author> <title> Concurrent Programming in Java: Design Principles and Patterns. </title> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Similarly, real-time method invocations have been explored by transmitting timing information in CORBA data structures [171]. Preliminary work on defining reflective ORBs to customize scheduling is reported in [138]. The Java Development Environment <ref> [99] </ref> is another distributed object implementation framework that transforms a heterogeneous network of machines into a homogeneous network of Java virtual machines. Java's main advantage is mobility; however the semantics of interaction with other customizations is dependent on the implementation.
Reference: [100] <author> C. Lee, C. Kesselman, J. Stepanek, R. Lindell, S. Hwang, B. Scott Michel, J. Bannister, I. Foster, and A. Roy. </author> <title> The quality of service component for the globus metacomputing system. </title> <booktitle> Proceedings of IWQoS '98, </booktitle> <pages> pages 140-142, </pages> <year> 1998. </year>
Reference-contexts: The Globus metacomputing project [62, 52, 61] develops a framework for creating networked virtual supercomputers. Globus defines a QoS component called Qualis <ref> [100] </ref> where low level QoS mechanisms can be integrated and tested. Active Networks [148], is an effort to make Internet routers dynamically programmable and proposes to extend network protocols to provide new services. These extensions minimize bandwidth consumption, minimize network latencies and provide congestion control.
Reference: [101] <author> Peter Leydekkers and Valerie Gay. </author> <title> Odp view on qos for open distributed mm environments. </title> <editor> In Jan de Meer and Andreas Vogel, editors, </editor> <booktitle> 4th International IFIP Workshop on Quality of Service, </booktitle> <address> IwQos96 Paris, France, </address> <pages> pages 45-55, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Supporting real-time multiparty applications like video conferencing with guaranteed QoS requires specialized protocols for connection establishment [25]. INA/DPE is an architecture for telecommunication software design proposed by Bellcore. Frameworks such as TINA-C <ref> [101] </ref> integrate components and concepts in distributed computing, telecommunications and network management, e.g. call/configuration/bandwidth management, connection setup and teardown. These systems control the components in the system, e.g. switching elements, port configurations and manage alarms. <p> Dynamic QoS control mechanisms attempt to share resources across multiple streams while ensuring the required response from each stream. For instance, the QoS server may upgrade or throttle an application's resource allocation based on load and availability. A service contract, similar to the approach in TINA-ODL <ref> [101] </ref>, formalizes negotiated end-to-end QoS specifications between the end-user and service provider. Selection criteria for MM QoS metrics come from two perspectives the end-user and the service provider. With a VOD application, the end-user requirements are dominant and stringent, the QoS is prespecified and is expected to be met accurately. <p> Here, QoS is viewed as a set of qualities associated with the collective behavior of one or more objects. Multimedia QoS concepts specified in the ISO-QoS framework and the ODP (Open Distributed Processing) architecture can be integrated <ref> [101] </ref>. The ODP architecture has multiple viewpoints of a distributed system enterprise, information, computation, engineering and technology and these levels correspond to different levels of QoS abstraction. <p> A drawback with some implementation driven methods of QoS specification is that the specification of QoS requirements is intermixed with the service specification <ref> [101, 103] </ref>. While the correctness of program execution, e.g. data delivery, relies on meeting the QoS requirements, merging the specifications results in loss of modularity and complicates the correctness validation process.
Reference: [102] <author> Yongcheng Li, See-Mong Tan, Mohalehfi Sefika, Roy H. Campbell, and Willy S. Liao. </author> <title> Dynamic Customization in the Choices Operating System. </title> <note> Submitted to Reflection '96 Conference. </note>
Reference-contexts: However, once customized, the characteristics may not change dynamically. More recent systems support a higher degree of dynamic reconfiguration. For instance, in Choices <ref> [102, 37] </ref>, the kernel contains a Java interpreter and dynamically loads new modules into the kernel. Similarly SPIN [24] can dynamically load modules written in type-safe Modula-3 and compiled using a trusted compiler.
Reference: [103] <author> Flavio Henrique de Souza Lima and Edmundo Roberto Mauro Madeira. </author> <title> Odp based qos specification for the multiware platform. </title> <editor> In Jan de Meer and Andreas Vogel, editors, </editor> <booktitle> 4th International IFIP Workshop on Quality of Service, </booktitle> <address> IwQos96 Paris, France, </address> <pages> pages 45-55, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Majority of QoS metrics are directed toward an application class (such as multimedia) and translation of these metrics to network level parameters. Multilevel specification of QoS requirements include factors such as synchronism, interactivity and availability <ref> [103] </ref>. Dynamic QoS control mechanisms attempt to share resources across multiple streams while ensuring the required response from each stream. For instance, the QoS server may upgrade or throttle an application's resource allocation based on load and availability. <p> A drawback with some implementation driven methods of QoS specification is that the specification of QoS requirements is intermixed with the service specification <ref> [101, 103] </ref>. While the correctness of program execution, e.g. data delivery, relies on meeting the QoS requirements, merging the specifications results in loss of modularity and complicates the correctness validation process.
Reference: [104] <author> P. Lougher and D. Shepherd. </author> <title> The design of a storage server for continuous media. </title> <journal> The Computer Journal Special Issue on Distributed Multimedia Systems, </journal> <volume> 36(1) </volume> <pages> 32-42, </pages> <month> Febru-ary </month> <year> 1993. </year>
Reference-contexts: Work on resource management mechanisms for multimedia servers has focussed on placement of media on disk to ensure real-time retrieval [16, 180], admission control procedures to maximize server throughput [166], buffer management policies to minimize memory requirements <ref> [66, 104] </ref>, replication and striping strategies for optimizing storage across disk arrays [90, 151], batching mechanisms that group closely spaced requests for the same objects [55], load balancing mechanisms for effective utilization [170, 163, 57]. 2.5 Internet Computing (Metacomputing) Various systems use resources on the Internet for wide-area parallel computing, e.g. <p> Admission control procedures to maximize server throughput [166] and buffer management policies to minimize memory requirements <ref> [66, 104] </ref> have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in [90, 151]. Batching mechanisms that group closely spaced requests for the same videos, thereby minimizing disk I/O and network bandwidth, are proposed in [55].
Reference: [105] <author> N. A. Lynch and M. R. Tuttle. </author> <title> An introduction to input/output automata. </title> <type> Technical Report MIT/LCS/TM-373, </type> <institution> MIT Laboratory for Computer Science, </institution> <year> 1988. </year>
Reference-contexts: These include language independent formalisms based on temporal logic [108, 96, 98], behavior histories [122], and I/O automata <ref> [105] </ref>. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. The Unity language [39] is a notation for describing systems. <p> One can view a distributed computation model as a set of abstractions that capture the semantics and functionality of concurrent program execution. Many models of concurrency and distributed computing have been proposed <ref> [105, 81, 30, 112, 113] </ref>. With MM transmission, there is a rising demand for an infrastructure that supports a wide range of services and applications. With global multimedia applications, the main challenge is that of openness and performance in a distributed environment. <p> These include formalisms based on temporal logic [108, 96, 97], behavior histories [122], and I/O automata <ref> [105] </ref>. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. They have been used to specify and verify a variety of protocols.
Reference: [106] <author> Silvano Maffeis and Douglas C. Schmidt. </author> <title> Constructing reliable distributed communication systems with corba. </title> <journal> IEEE Communications, </journal> <volume> 14(2), </volume> <month> February </month> <year> 1997. </year>
Reference-contexts: Many ORB implementations require extensions to provide and maintain architectural properties such as robustness, scalability, and the ability to support bandwidth sensitive and real-time applications. For instance, the Electra framework <ref> [106] </ref> extends CORBA to provide support for fault tolerance using group-communication facilities and protocols like reliable multicast. Various researchers have investigated architectures that provide real-time extensions to CORBA [136, 171, 150] necessary to support timing-based QoS requirements [182]. <p> TAO is a framework that supports real-time CORBA extensions to provide 15 end-to-end QoS and it has been used to study performance optimizations [68, 70], real-time inter-ORB protocols and real-time scheduling [69], wide-area networking [67], event management [76], and patterns for extensible middleware <ref> [106, 135] </ref>. Similarly, real-time method invocations have been explored by transmitting timing information in CORBA data structures [171]. Preliminary work on defining reflective ORBs to customize scheduling is reported in [138].
Reference: [107] <author> K. Mani Chandy and Leslie Lamport. </author> <title> Distributed snapshots: Determining global states of distributed systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(1) </volume> <pages> 63-75, </pages> <month> February </month> <year> 1985. </year>
Reference-contexts: To fully represent the global state of the distributed system, we need a mechanism for recording the state of all nodes including the portion of node state being communicated in the network channels <ref> [107] </ref>. As state information is accessible explicitly only in nodes, a snapshot mechanism must ensure 39 that node state information in channels are recorded at some node in the system (possibly the target node itself).
Reference: [108] <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Programs. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1992. </year> <month> 302 </month>
Reference-contexts: These include language independent formalisms based on temporal logic <ref> [108, 96, 98] </ref>, behavior histories [122], and I/O automata [105]. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. The Unity language [39] is a notation for describing systems. <p> These include formalisms based on temporal logic <ref> [108, 96, 97] </ref>, behavior histories [122], and I/O automata [105]. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. They have been used to specify and verify a variety of protocols.
Reference: [109] <author> M.B. Jones and P.J. Leac and J.S. Barrera, III and R.P. Draves. </author> <title> Modular Real-Time Resource Management in the Rialto Operating System. </title> <booktitle> In Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <address> Orcas Island, WA, </address> <month> May </month> <year> 1995. </year> <journal> IEEE Computer Society. </journal>
Reference-contexts: Distributed operating systems developed in the late 80s and early 90s such as Sprite [125], Plan 9 [127], Spring [114, 64] and Amoeba [146, 117, 147] have provided significant insight into issues such as distributed filesystems and process migration. Distributed real-time operating systems such as Rialto <ref> [109] </ref>, and RT-Mach [111, 89] address issues of resource negotiation, processor reservation etc. The Inferno system [58] provides an environment for distributed programming to create new services with built in network protocols and the ability to create a footprint OS useful in embedded systems.
Reference: [110] <author> R.E. McGrath. </author> <title> What we do and don't know about the load on the ncsa www server. </title> <note> In http://www.ncsa.uiuc.edu/InformationServers/Colloquia/28.Sep.94/Begin.html, Septem-ber 1994. </note>
Reference-contexts: WWW, are designed for the static class of document based information. Emerging systems will need to handle multimedia applications that possess varying traffic characteristics and have QoS requirements in terms of delay, jitter, loss rate etc. <ref> [110, 116] </ref>. Many MM applications can tolerate minor, infrequent violations of their performance requirements this degree of freedom is specified as a quality-of-service (QoS) parameter. It is a measurable parameter that indicates how well a service is performing.
Reference: [111] <author> Clifford W. Mercer, Jim Zelenka, and Ragunathan Rajkumar. </author> <title> On predictable operating system protocol processing. </title> <type> Technical Report CMU//CS-94-165, </type> <institution> Carnegie Mellon University, School of Computer Science, </institution> <month> May </month> <year> 1994. </year> <title> Distributed multimedia systems, protocol processing, resource reservation, operating systems, predictability, reservation, admission control, scheduling, </title> <booktitle> performance measurement. </booktitle>
Reference-contexts: Distributed operating systems developed in the late 80s and early 90s such as Sprite [125], Plan 9 [127], Spring [114, 64] and Amoeba [146, 117, 147] have provided significant insight into issues such as distributed filesystems and process migration. Distributed real-time operating systems such as Rialto [109], and RT-Mach <ref> [111, 89] </ref> address issues of resource negotiation, processor reservation etc. The Inferno system [58] provides an environment for distributed programming to create new services with built in network protocols and the ability to create a footprint OS useful in embedded systems.
Reference: [112] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: A commercial effort attempting to create a global ubiquitous computing framework is the HP Information Utility [80]. 2.6 Formal Reasoning about Distributed Systems A number of formalisms have been developed for specifying and reasoning about concurrent systems <ref> [1, 30, 112, 113] </ref>. These include language independent formalisms based on temporal logic [108, 96, 98], behavior histories [122], and I/O automata [105]. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. <p> One can view a distributed computation model as a set of abstractions that capture the semantics and functionality of concurrent program execution. Many models of concurrency and distributed computing have been proposed <ref> [105, 81, 30, 112, 113] </ref>. With MM transmission, there is a rising demand for an infrastructure that supports a wide range of services and applications. With global multimedia applications, the main challenge is that of openness and performance in a distributed environment.
Reference: [113] <author> R. Milner, J. G. Parrow, and D. J. Walker. </author> <title> A calculus of mobile processes, Parts I and II. </title> <type> Technical Report ECS-LFCS-89-85, </type> <institution> -86, Edinburgh University, </institution> <year> 1989. </year>
Reference-contexts: A commercial effort attempting to create a global ubiquitous computing framework is the HP Information Utility [80]. 2.6 Formal Reasoning about Distributed Systems A number of formalisms have been developed for specifying and reasoning about concurrent systems <ref> [1, 30, 112, 113] </ref>. These include language independent formalisms based on temporal logic [108, 96, 98], behavior histories [122], and I/O automata [105]. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. <p> One can view a distributed computation model as a set of abstractions that capture the semantics and functionality of concurrent program execution. Many models of concurrency and distributed computing have been proposed <ref> [105, 81, 30, 112, 113] </ref>. With MM transmission, there is a rising demand for an infrastructure that supports a wide range of services and applications. With global multimedia applications, the main challenge is that of openness and performance in a distributed environment.
Reference: [114] <author> J. Mitchell and et al. </author> <title> An Overview of the Spring System. </title> <booktitle> In Proceedings of Compcon 'Spring 1994, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: In all of these systems, the task of writing a module to extend the system requires a working knowledge of the specific system. Distributed operating systems developed in the late 80s and early 90s such as Sprite [125], Plan 9 [127], Spring <ref> [114, 64] </ref> and Amoeba [146, 117, 147] have provided significant insight into issues such as distributed filesystems and process migration. Distributed real-time operating systems such as Rialto [109], and RT-Mach [111, 89] address issues of resource negotiation, processor reservation etc.
Reference: [115] <author> Yasuhiko Miyazaki. </author> <title> Hierarchical client-server multimedia systems. </title> <type> Master's thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: To understand real workload environments and user behav-ioral patterns, we conducted an extensive empirical study of sample video-on-demand systems such as VOSAIC (video-over-the-Web) system [47], a hierarchical video-on-demand (VOD) system <ref> [115] </ref>, and a remote VCR system [129]. Based on these results, we define parameters of resource consumption (e.g. storage, network bandwidth) and user satisfaction (e.g. jitter, synchronization skew) and derive analytical interrelationships among the metric parameters. <p> 3 3 3 333 3 33333 3 3 3 3 3 3 3 134 In order to model resource consumption and observe performance characteristics such as jitter and loss rate, we obtained detailed performance measurements of two VOD systems the hierarchical VOD system with a hierarchical set of video servers <ref> [115] </ref>, and a remote VCR system [129]. These measurements provide jitter, loss rate and synchronization skew characteristics that allow us to analyze the system access and resource dependencies important for modeling of resource consumption. Performance results from an experiment in [115] showing video jitter at the client under a light workload <p> hierarchical VOD system with a hierarchical set of video servers <ref> [115] </ref>, and a remote VCR system [129]. These measurements provide jitter, loss rate and synchronization skew characteristics that allow us to analyze the system access and resource dependencies important for modeling of resource consumption. Performance results from an experiment in [115] showing video jitter at the client under a light workload is shown below. Below , we depict synchronization skew from an experiment in [129]. Evaluation criteria for most systems are user-centric, network-centric or system-centric.
Reference: [116] <author> J.C. Mogul. </author> <title> Operating systems support for busy internet services. </title> <booktitle> In Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <address> Orcas Island, WA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: WWW, are designed for the static class of document based information. Emerging systems will need to handle multimedia applications that possess varying traffic characteristics and have QoS requirements in terms of delay, jitter, loss rate etc. <ref> [110, 116] </ref>. Many MM applications can tolerate minor, infrequent violations of their performance requirements this degree of freedom is specified as a quality-of-service (QoS) parameter. It is a measurable parameter that indicates how well a service is performing.
Reference: [117] <author> Sape J. Mullendar, Guido van Rossum, Andrew S. Tanenbaun, Robbert van Renesse, and Hans van Staveren. </author> <title> Amoeba: A Distributed Operating System for the 1990s. </title> <journal> IEEE Computer, </journal> <volume> 23(5) </volume> <pages> 44-53, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: In all of these systems, the task of writing a module to extend the system requires a working knowledge of the specific system. Distributed operating systems developed in the late 80s and early 90s such as Sprite [125], Plan 9 [127], Spring [114, 64] and Amoeba <ref> [146, 117, 147] </ref> have provided significant insight into issues such as distributed filesystems and process migration. Distributed real-time operating systems such as Rialto [109], and RT-Mach [111, 89] address issues of resource negotiation, processor reservation etc.
Reference: [118] <author> Klara Nahrstedt, Hao-Hua Chu, and Srinivas Narayan. </author> <title> Qos-aware resource management for distributed multimedia applications. </title>
Reference-contexts: QualMan <ref> [118] </ref> is a QoS aware resource management platform which contains a set of resource brokers that provides negotiation, admission and reservation capabilities for sharing end-system resources such as CPU, memory and network bandwidth.
Reference: [119] <author> Klara Nahrstedt and Jonathan M. Smith. </author> <title> Design, implementation and experiences of the omega endpoint architecture. In CLARIFY. </title>
Reference-contexts: The Actor Foundry is a collection of Java packages which allow the construction of actor programs from regular Java objects and customize activities such as actor creation and sending of messages. 18 2.4 Multimedia QoS Enforcement The Omega architecture <ref> [119, 120, 121] </ref> developed end-to-end real-time communication protocols and QoS brokers at the endpoints to supply end-to-end QoS. <p> These architectures deal with QoS support in a heterogeneous environment with diverse com munication requirements, varying levels of QoS in terms of latency, bandwidth, jitter etc. In 131 ' $ the Omega architecture, QoS parameters are translated between application and network by a QoS broker <ref> [120, 119] </ref>. The admission control process represents a second challenge and consists of a variety of tests such as EED (end-to-end delay), buffer allocation and schedulability tests [121].
Reference: [120] <author> Klara Nahrstedt and Jonathan M. Smith. </author> <title> The qos broker. </title> <journal> IEEE Multimedia, </journal> <volume> 2 </volume> <pages> 53-67, </pages> <year> 1995. </year>
Reference-contexts: The Actor Foundry is a collection of Java packages which allow the construction of actor programs from regular Java objects and customize activities such as actor creation and sending of messages. 18 2.4 Multimedia QoS Enforcement The Omega architecture <ref> [119, 120, 121] </ref> developed end-to-end real-time communication protocols and QoS brokers at the endpoints to supply end-to-end QoS. <p> It is a measurable parameter that indicates how well a service is performing. QoS 129 is defined as a collection of perceivable attributes expressed in user-understandable language through parameters that may be subjective or objective <ref> [120] </ref>. Objective values are parameters related to a particular service that are measurable and verifiable. Subjective values are based on the opinions of the end-users. In order to design and deploy these complex and evolving systems with proper cost/performance ratios, we must understand their expected behaviors and workloads. <p> These architectures deal with QoS support in a heterogeneous environment with diverse com munication requirements, varying levels of QoS in terms of latency, bandwidth, jitter etc. In 131 ' $ the Omega architecture, QoS parameters are translated between application and network by a QoS broker <ref> [120, 119] </ref>. The admission control process represents a second challenge and consists of a variety of tests such as EED (end-to-end delay), buffer allocation and schedulability tests [121]. <p> In a system with multiple sessions, we need to address the issue of satisfying QoS constraints for each session. To facilitate this, we propose an agent called the QoS broker <ref> [120] </ref> that acts as a coordinator for all the ongoing sessions and performs admission control for new incoming sessions. Since the overall system QoS cannot be violated, every QoS Synchronizer must interact with the QoS broker. The structure of a unified system is depicted in Figure 6.5.
Reference: [121] <author> Klara Nahrstedt and Ralf Steinmetz. </author> <title> Resource management in networked multimedia systems. </title> <journal> IEEE Computer, </journal> <volume> 28(5) </volume> <pages> 52-65, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: The Actor Foundry is a collection of Java packages which allow the construction of actor programs from regular Java objects and customize activities such as actor creation and sending of messages. 18 2.4 Multimedia QoS Enforcement The Omega architecture <ref> [119, 120, 121] </ref> developed end-to-end real-time communication protocols and QoS brokers at the endpoints to supply end-to-end QoS. <p> In 131 ' $ the Omega architecture, QoS parameters are translated between application and network by a QoS broker [120, 119]. The admission control process represents a second challenge and consists of a variety of tests such as EED (end-to-end delay), buffer allocation and schedulability tests <ref> [121] </ref>. The parameters required for these tests must be a part of the translation process and are obtained during the negotiation process, Since network and system conditions are likely to be dynamic, the optimal operating point is not constant and this represents yet another challenge in QoS enforcement. <p> End-to-end solutions to QoS imply that the constraints must be obeyed by all the elements in the application path, both hardware devices and software components such as protocol stacks, schedulers etc. <ref> [121] </ref>. In practice, multiple system and application activities will need to occur concurrently in a distributed multimedia system, e.g., scheduling, QoS monitoring, inter and intra stream synchronization, protocol processing.
Reference: [122] <author> V. Nguyen, D. Demers, A.and Gries, and S. Owicki. </author> <title> A model and temporal proof system for networks of processes. </title> <journal> Distributed Computing, </journal> <volume> 1 </volume> <pages> 7-25, </pages> <year> 1986. </year>
Reference-contexts: These include language independent formalisms based on temporal logic [108, 96, 98], behavior histories <ref> [122] </ref>, and I/O automata [105]. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. The Unity language [39] is a notation for describing systems. <p> These include formalisms based on temporal logic [108, 96, 97], behavior histories <ref> [122] </ref>, and I/O automata [105]. These formalisms provide a general framework for specifying safety and liveness properties and a means of organizing proofs. They have been used to specify and verify a variety of protocols.
Reference: [123] <author> H. Okamura, Y. Ishikawa, and M. Tokoro. Al-1/d: </author> <title> A distributed programming system with multi-model reflection framework. </title> <editor> In A. Yonezawa and B. C. Smith, editors, </editor> <booktitle> Reflection and Meta-Level Architetures, </booktitle> <pages> pages 36-47. </pages> <booktitle> ACM SIGPLAN, </booktitle> <year> 1992. </year> <month> 303 </month>
Reference-contexts: Representation of dependability protocols as meta-level programs is presented in [7]. The Aspect Oriented Programming paradigm [92] makes it possible to express programs where design decisions (aspects) can be appropriately isolated permitting composition and re-use of the aspect code. In the Multi-Model Reflective Framework (MMRF) <ref> [123] </ref>, an object is represented by multiple models allowing behavior to be described at different levels of abstraction. <p> Meta-actors communicate with each other via message passing as do base level actors, but they may also examine and modify the state of the base actors located on the same node. The multi-model reflective framework (MMRF) for distributed object computation <ref> [123] </ref> has many of the same motivations and objectives as the TLAM framework. We briefly compare the two approaches. In MMRF an object is represented by multiple models allowing behavior to 56 be described at different levels of abstraction and from different points of view.
Reference: [124] <author> Open Systems Lab. </author> <title> The actor foundry: A java-based actor programming environment. </title> <note> Available for download at http://osl.cs.uiuc.edu/foundry. </note>
Reference-contexts: Some of the more recent research on actors has focused on coordination structures and meta-architectures [6]. Actor based reflective runtime systems include Broadway [141] and the Actor Foundry <ref> [124] </ref>. Broadway [141] provides C++ support for distributed actor programs including asynchronous communication, dynamic actor creation and scheduling of actors.
Reference: [125] <author> John K. Ousterhout, Andrew R. Cherenson, Frederick Douglis, Michael N. Nelson, and Brent B. Welch. </author> <title> The Sprite network operating system. </title> <booktitle> IEEE Computer, </booktitle> <month> February </month> <year> 1988. </year>
Reference-contexts: In all of these systems, the task of writing a module to extend the system requires a working knowledge of the specific system. Distributed operating systems developed in the late 80s and early 90s such as Sprite <ref> [125] </ref>, Plan 9 [127], Spring [114, 64] and Amoeba [146, 117, 147] have provided significant insight into issues such as distributed filesystems and process migration. Distributed real-time operating systems such as Rialto [109], and RT-Mach [111, 89] address issues of resource negotiation, processor reservation etc.
Reference: [126] <author> Venkata N. Padmanabhan and Jeffrey C. Mogul. </author> <title> Improving http latency. </title> <type> Technical report, </type> <institution> Digital Equipment Corporation Western Research Laboratory, </institution> <year> 1994. </year>
Reference-contexts: Classification of services into deterministic service, statistical service, predicted service and feedback based schemes deal with tradeoffs in QoS, network utilization and overload. Real-time protocols guarantee performance of communication via resource management and admission control and designed mechanisms to support VBR (variable bit rate) video on packet-switched networks. In <ref> [126] </ref>, a method for modifying the HTTP protocol to reduce communication latencies is proposed. To understand network support required for MM applications, video-conferencing applications are characterized and and QoS parameters for MM networking are derived.
Reference: [127] <author> Pike, Presotto, Trickey, and Thompson. </author> <title> Plan 9 from Bell Labs. </title> <booktitle> In Proceedings of the 1990 UKUUG, </booktitle> <year> 1990. </year>
Reference-contexts: In all of these systems, the task of writing a module to extend the system requires a working knowledge of the specific system. Distributed operating systems developed in the late 80s and early 90s such as Sprite [125], Plan 9 <ref> [127] </ref>, Spring [114, 64] and Amoeba [146, 117, 147] have provided significant insight into issues such as distributed filesystems and process migration. Distributed real-time operating systems such as Rialto [109], and RT-Mach [111, 89] address issues of resource negotiation, processor reservation etc.
Reference: [128] <author> Calton Pu, Tito Autrey, Andrew Black, Charles Consel, Crispin Cowan, Jon Inouye, Lak-shmi Kethana, Jonathan Walpole, and Ke Zhang. </author> <title> Optimistic Incremental Specialization: Streamlining a Commercial Operating System. </title> <booktitle> In 15th ACM Symposium on Operating Systems Principles (SOSP'95), </booktitle> <address> Copper Mountain, Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: More recent systems support a higher degree of dynamic reconfiguration. For instance, in Choices [102, 37], the kernel contains a Java interpreter and dynamically loads new modules into the kernel. Similarly SPIN [24] can dynamically load modules written in type-safe Modula-3 and compiled using a trusted compiler. The Synthetix <ref> [128] </ref> system dynamically generates optimized code for each situation while Exokernel [59, 87] provides a minimal kernel that multiplexes hardware resources and user libraries (that tailor abstractions of OS services).
Reference: [129] <author> Lintian Qiao and Klara Nahrstedt. </author> <title> Lip synchronization within an adaptive vod system. </title> <booktitle> In SPIE International Conference on Multimedia Computing and Networking (MMNC '97), </booktitle> <address> San Jose, CA, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: To understand real workload environments and user behav-ioral patterns, we conducted an extensive empirical study of sample video-on-demand systems such as VOSAIC (video-over-the-Web) system [47], a hierarchical video-on-demand (VOD) system [115], and a remote VCR system <ref> [129] </ref>. Based on these results, we define parameters of resource consumption (e.g. storage, network bandwidth) and user satisfaction (e.g. jitter, synchronization skew) and derive analytical interrelationships among the metric parameters. <p> 3 3 3 3 3 3 3 134 In order to model resource consumption and observe performance characteristics such as jitter and loss rate, we obtained detailed performance measurements of two VOD systems the hierarchical VOD system with a hierarchical set of video servers [115], and a remote VCR system <ref> [129] </ref>. These measurements provide jitter, loss rate and synchronization skew characteristics that allow us to analyze the system access and resource dependencies important for modeling of resource consumption. Performance results from an experiment in [115] showing video jitter at the client under a light workload is shown below. <p> Performance results from an experiment in [115] showing video jitter at the client under a light workload is shown below. Below , we depict synchronization skew from an experiment in <ref> [129] </ref>. Evaluation criteria for most systems are user-centric, network-centric or system-centric. End-to-end measurements are likewise specific to some components, for e.g. network delays 135 measure transmission delays incurred within the network but ignore protocol processing com-ponents executed by the CPU.
Reference: [130] <author> Frank E Redmond III. DCOM: </author> <title> Microsoft Distributed Component Object Model. </title> <publisher> IDG Books Worldwide, </publisher> <year> 1997. </year>
Reference-contexts: sections, we describe related work in these areas and briefly summarize the contributions in this thesis. 2.1 Existing Middleware Infrastructures Commercially available object-based middleware infrastructures include CORBA (Common Object Request Broker Architecture) [72], the product of a consortium of industries and OMG (Object Management Group), DCOM (Distributed Component Object Model) <ref> [130] </ref>, and Ac-tiveX from Microsoft Corporation. DCE (Distributed Computing Environment) from OSF (Open Software Foundation) is a commercially available non-object framework. The CORBA specification consists of an interface definition language, an object broker specification and an extensive set of bus related services for object management.
Reference: [131] <author> S. Ren, G. Agha, and M. Saito. </author> <title> A modular approach for programming distributed real-time systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 36(1), </volume> <month> July </month> <year> 1996. </year>
Reference-contexts: Earlier work separates real-time constraints from the computational aspects of an application; real-time constraints are described by synchronization code between the interfaces of objects <ref> [131] </ref>. A high-level programming language construct called RTsynchronizer, a real-time variant of actors, specifies a collection of temporal constraints between actors.
Reference: [132] <author> Shangping Ren. </author> <title> Modularization of Time Constraint Specification in Real-time Distributed Computing (to be published). </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <year> 1997. </year>
Reference-contexts: Structures describing the RTsynchronizer, the distribution of state information between an RTsynchronizer and its domain of control and strategies for maintaining interobject consistency are described in <ref> [132] </ref>. 6.4.3 Formalizing MM Sessions The basic Actor model captures the fundamental properties of general purpose distributed computing in which only logical time is concerned. Individual objects are constrained only by the computational causal order. <p> Two new transitions are added into ART systems to express system failure and time progression. The short version of ART system operational semantics using transition rules are given in Figure C.2. The detailed semantics can be found in <ref> [132] </ref>. 2 The details of these transition rules can be found in [132] 293 &lt;rcv : adesc r ; cv &gt; DD A; [R [[ready (v )]]] adesc r ; (o ) Timer m; M h oe k & i EE DD A; [app (v ; cv )] adesc r ; <p> The short version of ART system operational semantics using transition rules are given in Figure C.2. The detailed semantics can be found in <ref> [132] </ref>. 2 The details of these transition rules can be found in [132] 293 &lt;rcv : adesc r ; cv &gt; DD A; [R [[ready (v )]]] adesc r ; (o ) Timer m; M h oe k & i EE DD A; [app (v ; cv )] adesc r ; (o ) Timer M h (s ! Update oe (m; o; s))
Reference: [133] <author> Shangping Ren, Nalini Venkatasubramanian, and Gul Agha. </author> <title> Formalizing qos constraints using actors. </title> <booktitle> In Proceedings of Second IFIP International Conference on Formal Methods for Open Object Based Distributed Systems,FMOODS'97, </booktitle> <month> July </month> <year> 1997. </year> <note> Also post-conference book, </note> <editor> Editors Bowman and Derrick, </editor> <publisher> Published by Chapman and Hall, </publisher> <pages> pp. 139-157. </pages>
Reference-contexts: Since a multimedia session often involves the coordination of multiple media-actors (for e.g. audio/video related), QoS Synchronizers allow the programmer to treat the session as a group of actors instead of having to deal with each component independently. In <ref> [133] </ref>, we illustrate examples of programming with QoS Synchronizers.
Reference: [134] <author> Jerome Rolia and Richard Friedrich. </author> <title> Quality of service management for federated applications. </title> <editor> In Jan de Meer and Andreas Vogel, editors, </editor> <booktitle> 4th International IFIP Workshop on Quality of Service, </booktitle> <address> IwQos96 Paris, France, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: The presence of independent control domains as in federated applications complicates the situation further. An object based approach for the specification and management of application QoS metrics explores the notion of a QoS object, i.e. a logical collection of performance attributes that can monitored by the system <ref> [134] </ref>. A drawback with some implementation driven methods of QoS specification is that the specification of QoS requirements is intermixed with the service specification [101, 103].
Reference: [135] <author> Douglas C. Schmidt and Chris Cleeland. </author> <title> Applying patterns to develop extensible and maintainable orb middleware. </title> <journal> Communications of the ACM, </journal> <note> 1998. (to appear). </note>
Reference-contexts: TAO is a framework that supports real-time CORBA extensions to provide 15 end-to-end QoS and it has been used to study performance optimizations [68, 70], real-time inter-ORB protocols and real-time scheduling [69], wide-area networking [67], event management [76], and patterns for extensible middleware <ref> [106, 135] </ref>. Similarly, real-time method invocations have been explored by transmitting timing information in CORBA data structures [171]. Preliminary work on defining reflective ORBs to customize scheduling is reported in [138].
Reference: [136] <author> Douglas C. Schmidt, David Levine, and Sumedh Mungee. </author> <title> The design of the tao real-time object request broker. Computer Communications Special Issue on Building Quality of Service into Distributed System, </title> <year> 1997. </year>
Reference-contexts: For instance, the Electra framework [106] extends CORBA to provide support for fault tolerance using group-communication facilities and protocols like reliable multicast. Various researchers have investigated architectures that provide real-time extensions to CORBA <ref> [136, 171, 150] </ref> necessary to support timing-based QoS requirements [182].
Reference: [137] <author> Louis C. Schreier and Michael B. Davis. </author> <title> System-level resource management for network-based mm applications. </title> <editor> In Thomas D.C. Little and Riccardo Gusella, editors, </editor> <booktitle> 4th International Workshop on Network and Operating Systems Support for Digital Audio and Video, </booktitle> <address> NOSSDAV 95 Durham, New Hampshire, USA, </address> <pages> pages 121-125, </pages> <month> April </month> <year> 1995. </year> <month> 304 </month>
Reference-contexts: Network QoS parameters include bandwidth, delay, jitter and loss rate. End-system parameters include CPU load, utilization, buffering mechanisms and storage related parameters. Users express dynamic preferences for media quality through benefit functions, <ref> [137] </ref>, for e.g. (1) frame rate benefit function which indicates that beyond a threshold frame rate, there is no additional benefit, (2) synchronization benefit function which indicates that the benefit is high only when the audio/video synchronization skew is low.
Reference: [138] <author> Ashish Singhai, Aamod Sane, and Roy Campbell. </author> <title> Reflective ORBs: Support for Robust, Time-Critical Distribution. </title> <booktitle> In Proceedings of the ECOOP'97 Workshop on Reflective Real-Time Object-Oriented Programming and Systems, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: Similarly, real-time method invocations have been explored by transmitting timing information in CORBA data structures [171]. Preliminary work on defining reflective ORBs to customize scheduling is reported in <ref> [138] </ref>. The Java Development Environment [99] is another distributed object implementation framework that transforms a heterogeneous network of machines into a homogeneous network of Java virtual machines. Java's main advantage is mobility; however the semantics of interaction with other customizations is dependent on the implementation.
Reference: [139] <author> Brian C. Smith. </author> <title> Reflection and Semantics in a Procedural Langauge. </title> <type> PhD thesis, </type> <institution> Mas-sahusetts Institute of Technology, </institution> <month> January </month> <year> 1982. </year>
Reference-contexts: Traditional reflective languages and systems aim at providing a customizable and adaptable execution of 17 by reflection via meta-level objects. concurrent systems <ref> [178, 139] </ref>. A reflective implementation of object migration is reported in [168]. Reflection has been used in the Muse Operating System [174, 175, 176] for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179].
Reference: [140] <author> Prashant Sridharan. </author> <title> JavaBeans Developer's Resource. </title> <publisher> Prentice-Hall Inc, </publisher> <year> 1997. </year>
Reference-contexts: Furthermore, the ability to deal with the management of thread priorities for real-time thread management is dependent on the underlying threads implementation, making QoS support complicated to achieve. Java implements distribution via the Remote Method Invocation (RMI) model which currently supports RPC semantics for method invocations. Java Beans <ref> [140] </ref> is a more generalized version of distributed objects in Java that provides event-based interfaces for connecting plug-in objects. Unlike Java, Actors [3], described later in this thesis is a model of concurrency based on active objects and asynchronous message passing and weakly fair execution.
Reference: [141] <author> D. Sturman. </author> <title> Modular Specification of Interaction Policies in Distributed Computing. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> May </month> <year> 1996. </year> <note> TR UIUCDCS-R-96-1950. </note>
Reference-contexts: Some of the more recent research on actors has focused on coordination structures and meta-architectures [6]. Actor based reflective runtime systems include Broadway <ref> [141] </ref> and the Actor Foundry [124]. Broadway [141] provides C++ support for distributed actor programs including asynchronous communication, dynamic actor creation and scheduling of actors. <p> Some of the more recent research on actors has focused on coordination structures and meta-architectures [6]. Actor based reflective runtime systems include Broadway <ref> [141] </ref> and the Actor Foundry [124]. Broadway [141] provides C++ support for distributed actor programs including asynchronous communication, dynamic actor creation and scheduling of actors. <p> Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179]. Representation of dependability protocols as meta-level programs is presented in [7]. Some of the more recent research on actors has focused on coordination structures and meta-architectures <ref> [6, 63, 141] </ref>. The Aspect Oriented Programming paradigm [92] makes it possible to express programs where design decisions (aspects) can be appropriately isolated permitting composition and re-use of the aspect code. Many of these languages or systems lack clearly defined semantics. <p> This is a starting point for reflective customization of system parameters based on dynamic execution characteristics. 155 There are many actor-based languages and systems; two relevant ones include Broadway and Rosette. Broadway <ref> [141] </ref> is a prototype runtime system that supports the development of distributed actor programs. In addition to providing support for creation, communication, migration, naming, scheduling and synchronization of actors, Broadway also supports a meta-level architecture for the customization of interaction protocols.
Reference: [142] <author> D. Sturman and G Agha. </author> <title> A protocol description language for customizing failure semantics. </title> <booktitle> In The 13th Symposium on Reliable Distributed Systems, Dana Point, </booktitle> <address> California. </address> <publisher> IEEE, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: The unified actor model embeds the meta-architectural framework needed to reason about this composition and this is discussed in the next chapter. In order to customize and configure services and protocols, meta-architectures and linguistic mechanisms for describing and implementing interaction policies are necessary <ref> [142] </ref>. The separation of interaction policies and protocols from the functionality is desirable when deploying a MM service with multiple constraints - e.g. atomicity requirements for financial transactions, availability requirements for fault tolerance and real-time requirements for synchronization.
Reference: [143] <author> C. L. Talcott. </author> <title> Interaction semantics for components of distributed systems. </title> <booktitle> In 1st IFIP Workshop on Formal Methods for Open Object-based Distributed Systems, </booktitle> <address> FMOODS'96, </address> <year> 1996. </year>
Reference-contexts: Actors can be viewed as a model of coordination between autonomous interacting components. Semantics of actor interactions are relatively well understood and reasoning about systems of actors has been formalized <ref> [9, 143, 145] </ref>. The meta-architectural model proposed in this thesis is a first step towards providing a formal semantics for open distributed systems, and a basis for specifying and reasoning about properties of and interactions between components of such systems. <p> Will Clinger [51] developed a powerdomain semantics of actor systems, showing the consistency of these axioms. An interleaving transition system semantics for an actor language is given in [9, 10]. This work builds on the formulation in [4] and develops methods for reasoning about equivalence of actor programs <ref> [13, 143] </ref> and the composition of activities in actor systems [160]. (See [79, 4, 6] for more discussion of the Actor model, and for many examples of programming with actors.) Note that the Actor model is, like the theory of higher order nets or the -calculus, general and inherently parallel. <p> The TLAM (Two Level Actor Machine) model is a first step towards providing a formal semantics for such languages, and a basis for specifying and reasoning about properties of and interactions between components of such systems. A preliminary version of this model was presented in [159, 160]. In <ref> [143] </ref> the notion of abstract actor structure as a framework for high-level, programming language independent, specification of individual actor behaviors is developed. This is just the TLAM two-level actor structure notion restricted to purely base-level systems. <p> Base level actors carry out application level computation, while meta-actors are part of the runtime system which manages system resources and controls the runtime behavior of the base level. The application level of the model refines the model of <ref> [9, 143] </ref>, explicitly representing more of the runtime structures and resources. It also abstracts from the choice of a specific programming language or system architecture, providing a framework for reasoning about heterogeneous systems.
Reference: [144] <author> C. L. Talcott. </author> <title> Composable semantic models for actor theories. </title> <booktitle> In Theoretical Aspects of Computer Science, volume 1281 of Lecture Notes in Computer Science, </booktitle> <pages> pages 321-364. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: In our model, semantic values have an operational flavor. They are essentially instructions that are further interpreted in terms of a machine state or configuration. The constraints on the interpretation of actor descriptions insure that the actor acquaintance laws <ref> [19, 144] </ref> hold for base level actors when computation is restricted to the base level; and for meta acquaintances of metal level actors.
Reference: [145] <author> Carolyn L. Talcott. </author> <title> An actor rewriting theory. </title> <booktitle> In Workshop on Rewriting Logic, number 4 in Electronic Notes in Theoretical Computer Science, </booktitle> <year> 1996. </year>
Reference-contexts: Actors can be viewed as a model of coordination between autonomous interacting components. Semantics of actor interactions are relatively well understood and reasoning about systems of actors has been formalized <ref> [9, 143, 145] </ref>. The meta-architectural model proposed in this thesis is a first step towards providing a formal semantics for open distributed systems, and a basis for specifying and reasoning about properties of and interactions between components of such systems.
Reference: [146] <author> Andrew S. Tanenbaum, Robbert van Renesse, Hans van Staveren, Gregory J. Sharp, Sape J. Mullender, Jack Jansen, and Guido van Rossum. </author> <title> Experiences with the Amoeba distributed operating system. </title> <journal> Communications of the ACM, </journal> <volume> 33(12), </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: In all of these systems, the task of writing a module to extend the system requires a working knowledge of the specific system. Distributed operating systems developed in the late 80s and early 90s such as Sprite [125], Plan 9 [127], Spring [114, 64] and Amoeba <ref> [146, 117, 147] </ref> have provided significant insight into issues such as distributed filesystems and process migration. Distributed real-time operating systems such as Rialto [109], and RT-Mach [111, 89] address issues of resource negotiation, processor reservation etc.
Reference: [147] <author> Andrew S. Tanenbaun, Robbert van Renesse, Hans van Staveren, Gregory J. Sharp, Sape J. Mullendar, Jack Jansen, and Guido van Rossum. </author> <title> Experience with the Amoeba Distributed Operating System. </title> <journal> Communications of the ACM, </journal> <volume> 33(12) </volume> <pages> 47-63, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: In all of these systems, the task of writing a module to extend the system requires a working knowledge of the specific system. Distributed operating systems developed in the late 80s and early 90s such as Sprite [125], Plan 9 [127], Spring [114, 64] and Amoeba <ref> [146, 117, 147] </ref> have provided significant insight into issues such as distributed filesystems and process migration. Distributed real-time operating systems such as Rialto [109], and RT-Mach [111, 89] address issues of resource negotiation, processor reservation etc.
Reference: [148] <author> David L. Tennenhouse, Jonathan M. Smith, W. David Sincoskie, David J. Wetherall, and Gary J. Minden. </author> <title> A survey of active network research. </title> <journal> IEEE Communications Magazine, </journal> <volume> 35(1) </volume> <pages> 80-86, </pages> <month> January </month> <year> 1997. </year>
Reference-contexts: The Globus metacomputing project [62, 52, 61] develops a framework for creating networked virtual supercomputers. Globus defines a QoS component called Qualis [100] where low level QoS mechanisms can be integrated and tested. Active Networks <ref> [148] </ref>, is an effort to make Internet routers dynamically programmable and proposes to extend network protocols to provide new services. These extensions minimize bandwidth consumption, minimize network latencies and provide congestion control.
Reference: [149] <author> M. Thapar and B. Koerner. </author> <title> Architecture for video servers. </title> <booktitle> In Proceedings of the 43rd Annual NCTA Convention and Exposition, </booktitle> <address> New Orleans, </address> <publisher> Louisiana, </publisher> <pages> pages 141-148, </pages> <year> 1994. </year>
Reference-contexts: Real-time transfer, resource reservation and admission control techniques are features that must be implemented to provide guaranteed bitrate service. Traditional video-on-demand servers deal with issues in delivering isochronous data transfer to clients <ref> [45, 149, 56] </ref>. <p> The main components of the multimedia server are a number of independent and distributed data sources, each of which includes high capacity storage devices (e.g. hard-disks), a processor, buffer memory, and high-speed network interfaces for real-time multimedia retrieval and transmission <ref> [149] </ref>. Since the number of multimedia objects (e.g., movies, news, 158 ' $ advertisements, etc.) that can be requested for access by subscribers far exceeds the available disk capacity, the multimedia server also includes tertiary storage.
Reference: [150] <author> B. Thuraisingham, P. Krupp, A. Schafer, V. Wolfe, and J. Black. </author> <title> On Real-time Extensions to the Common Object Request Broker Architecture. </title> <booktitle> In Proceedings of the OOPSLA'94 Workshop on Experiences with CORBA, </booktitle> <month> December </month> <year> 1994. </year>
Reference-contexts: For instance, the Electra framework [106] extends CORBA to provide support for fault tolerance using group-communication facilities and protocols like reliable multicast. Various researchers have investigated architectures that provide real-time extensions to CORBA <ref> [136, 171, 150] </ref> necessary to support timing-based QoS requirements [182].
Reference: [151] <author> F.A. Tobagi, J. Pang, R. Baird, and M. Gang. </author> <title> Streaming raid: A disk storage system for video and audio files. </title> <booktitle> In Proceedings of ACM Multimedia'93, </booktitle> <address> Anaheim, CA, </address> <pages> pages 393-400, </pages> <month> August </month> <year> 1993. </year> <month> 305 </month>
Reference-contexts: Work on resource management mechanisms for multimedia servers has focussed on placement of media on disk to ensure real-time retrieval [16, 180], admission control procedures to maximize server throughput [166], buffer management policies to minimize memory requirements [66, 104], replication and striping strategies for optimizing storage across disk arrays <ref> [90, 151] </ref>, batching mechanisms that group closely spaced requests for the same objects [55], load balancing mechanisms for effective utilization [170, 163, 57]. 2.5 Internet Computing (Metacomputing) Various systems use resources on the Internet for wide-area parallel computing, e.g. Wax, Legion, Atlas [20], Globus [31]. <p> Admission control procedures to maximize server throughput [166] and buffer management policies to minimize memory requirements [66, 104] have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in <ref> [90, 151] </ref>. Batching mechanisms that group closely spaced requests for the same videos, thereby minimizing disk I/O and network bandwidth, are proposed in [55].
Reference: [152] <author> C. Tomlinson, P. Cannata, G. Meredith, and D. Woelk. </author> <title> The extensible services switch in carnot. </title> <journal> IEEE Parallel and Distributed Technology: Systems and Applications, </journal> <volume> 1(2) </volume> <pages> 16-20, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Rosette [153] is a concurrent object oriented programming language based on the Actor Model. Rosette is used to provide distributed support services in the Carnot project <ref> [152] </ref> at MCC that explores facilities for managing heterogeneous, distributed enterprise information. Rosette WebWorks Inc. has commercialized actor technology to provide solutions to applications such as Web servers, distributed data integration, and Internet-related protocol implementations.
Reference: [153] <author> C. Tomlinson, W. Kim, M. Schevel, V. Singh, B. Will, and G. Agha. Rosette: </author> <title> An object oriented concurrent system architecture. </title> <journal> Sigplan Notices, </journal> <volume> 24(4) </volume> <pages> 91-93, </pages> <year> 1989. </year>
Reference-contexts: Broadway [141] is a prototype runtime system that supports the development of distributed actor programs. In addition to providing support for creation, communication, migration, naming, scheduling and synchronization of actors, Broadway also supports a meta-level architecture for the customization of interaction protocols. Rosette <ref> [153] </ref> is a concurrent object oriented programming language based on the Actor Model. Rosette is used to provide distributed support services in the Carnot project [152] at MCC that explores facilities for managing heterogeneous, distributed enterprise information.
Reference: [154] <author> M. van Sinderen, L. F. Pires, and C. A. Vissers. </author> <title> Design concepts for open distributed systems. </title> <editor> In J. de Meer, B. Mahr, and S. Storp, editors, </editor> <booktitle> Proceedings of Open Distributed Computing II, </booktitle> <pages> pages 369-371. </pages> <publisher> North-Holland, </publisher> <year> 1993. </year> <title> IFIP Transactions - C, </title> <publisher> IFIP TC6/WG6.1 ODP. </publisher>
Reference-contexts: Our various levels of abstraction include levels similar in spirit to the three abstraction levels identified in the OSI reference model and proposed to strengthen the enterprise level of the ODP Reference Model in <ref> [154] </ref>. These levels are: the combined behavior of a system and 59 its environment (service); the role of the system in this combined behavior (service provider); and the decomposition of this role (protocol).
Reference: [155] <author> M. van Steen, A.S. Tanenbaum, I. Kuz, and H.J. Sip. </author> <title> A scalable middleware solution for advanced wide-area web services. </title> <booktitle> In Proc.Middleware '98, </booktitle> <address> The Lake District, UK, </address> <year> 1998. </year>
Reference-contexts: The WebOS system is a framework that provides a common set of OS services to wide-area applications. The Millenium project [28] is an effort to build a pervasive, distributed OS that is self-tuning, scalable and secure. The Globe system <ref> [82, 156, 155] </ref> explores the construction of large scale distributed systems using the paradigm of distributed shared objects; here shared objects can be managed by appropriate subobjects. 2.3 Reflective Systems Reflection allows application objects to customize the system behavior (Figure 2.2).
Reference: [156] <author> Maarten van Steen, Philip Homburg, and Andrew Tanenbaum. </author> <title> The architectural design of globe: A wide-area distributed system. </title> <type> Technical Report Internal Report IR-422, </type> <institution> Faculty of Mathematics and Computer Science. Vrije Universiteit, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: The WebOS system is a framework that provides a common set of OS services to wide-area applications. The Millenium project [28] is an effort to build a pervasive, distributed OS that is self-tuning, scalable and secure. The Globe system <ref> [82, 156, 155] </ref> explores the construction of large scale distributed systems using the paradigm of distributed shared objects; here shared objects can be managed by appropriate subobjects. 2.3 Reflective Systems Reflection allows application objects to customize the system behavior (Figure 2.2).
Reference: [157] <author> N. Venkatasubramanian. </author> <title> Hierarchical garbage collection in scalable distributed systems. </title> <type> Master's thesis, </type> <institution> University of Illinois, Urbana-Champaign, </institution> <year> 1992. </year>
Reference-contexts: The TLAM model can be used to show that a reachability snapshot is a safe criterion to be used for garbage collection. Thus the reachability snapshot service can be used as the basis for design, implementation, and verification of a distributed garbage collection service (cf. <ref> [157, 158] </ref>). The reachability snapshot specializes the notion of global snapshot of a distributed computation which is an important tool for distributed programming (cf. [38, 39]). Reachability allows us to illustrate some of the issues that arise in reasoning about object based systems where object identity is a fundamental concept. <p> It is based on the three phase algorithm described in more detail in <ref> [157, 158] </ref>. The basic idea is that the system as a whole is in one of three phases: * stable; * initializing a new recording; * or finalizing a recording. <p> We will not deal with the mechanisms for detecting termination of the various phases and of the snapshot recording here. These can be assumed to be strictly meta level interactions requiring some additional assumptions about the network topology and routing mechanism. Details for one approach can be found in <ref> [157, 158] </ref>. In particular, by making the worker actors accessible only by other workers and the snapshot server, the phase detection termination properties will not be affected by composition with other meta systems.
Reference: [158] <author> N. Venkatasubramanian, G. Agha, and C. L. Talcott. </author> <title> Scalable distributed garbage collection for systems of active objects. </title> <booktitle> In International Workshop on Memory Management, </booktitle> <address> IWMM92, Saint-Malo, </address> <publisher> LNCS, </publisher> <year> 1992. </year>
Reference-contexts: We present a non-halting garbage collection algorithm for active objects in a distributed system <ref> [165, 158] </ref>. We describe a mechanism called HDGC (hierarchical distributed garbage collection), suitable for systems of active objects distributed across a network of nodes. Hierarchical organization provides for scalability. It partitions a distributed system into smaller subsystems, which in turn may be further partitioned. <p> The TLAM model can be used to show that a reachability snapshot is a safe criterion to be used for garbage collection. Thus the reachability snapshot service can be used as the basis for design, implementation, and verification of a distributed garbage collection service (cf. <ref> [157, 158] </ref>). The reachability snapshot specializes the notion of global snapshot of a distributed computation which is an important tool for distributed programming (cf. [38, 39]). Reachability allows us to illustrate some of the issues that arise in reasoning about object based systems where object identity is a fundamental concept. <p> It is based on the three phase algorithm described in more detail in <ref> [157, 158] </ref>. The basic idea is that the system as a whole is in one of three phases: * stable; * initializing a new recording; * or finalizing a recording. <p> We will not deal with the mechanisms for detecting termination of the various phases and of the snapshot recording here. These can be assumed to be strictly meta level interactions requiring some additional assumptions about the network topology and routing mechanism. Details for one approach can be found in <ref> [157, 158] </ref>. In particular, by making the worker actors accessible only by other workers and the snapshot server, the phase detection termination properties will not be affected by composition with other meta systems.
Reference: [159] <author> N. Venkatasubramanian and C. L. Talcott. </author> <title> A metaarchitecture for distributed resource management. </title> <booktitle> In Hawaii International Conference on System Sciences, </booktitle> <address> HICSS-26, </address> <month> Jan-uary </month> <year> 1993. </year>
Reference-contexts: The TLAM (Two Level Actor Machine) model is a first step towards providing a formal semantics for such languages, and a basis for specifying and reasoning about properties of and interactions between components of such systems. A preliminary version of this model was presented in <ref> [159, 160] </ref>. In [143] the notion of abstract actor structure as a framework for high-level, programming language independent, specification of individual actor behaviors is developed. This is just the TLAM two-level actor structure notion restricted to purely base-level systems.
Reference: [160] <author> N. Venkatasubramanian and C. L. Talcott. </author> <title> Reasoning about Meta Level Activities in Open Distributed Systems. </title> <booktitle> In Principles of Distributed Computation, </booktitle> <year> 1995. </year>
Reference-contexts: An interleaving transition system semantics for an actor language is given in [9, 10]. This work builds on the formulation in [4] and develops methods for reasoning about equivalence of actor programs [13, 143] and the composition of activities in actor systems <ref> [160] </ref>. (See [79, 4, 6] for more discussion of the Actor model, and for many examples of programming with actors.) Note that the Actor model is, like the theory of higher order nets or the -calculus, general and inherently parallel. <p> Concert is a system based on CA [48], that facilitates the expression of irregular parallel programs and the construction of large applications. Metaarchitectural frameworks using the Actor model <ref> [160] </ref> provide dynamic customizability in designing and reasoning about components and protocols in open concurrent systems. Performance Issues Effective implementations of distributed systems involves tradeoffs in expressiveness, complexity and efficiency. With distributed programs, one cannot separate algorithm and program design from architectural details. <p> The TLAM (Two Level Actor Machine) model is a first step towards providing a formal semantics for such languages, and a basis for specifying and reasoning about properties of and interactions between components of such systems. A preliminary version of this model was presented in <ref> [159, 160] </ref>. In [143] the notion of abstract actor structure as a framework for high-level, programming language independent, specification of individual actor behaviors is developed. This is just the TLAM two-level actor structure notion restricted to purely base-level systems.
Reference: [161] <author> Nalini Venkatasubramanian and Gul Agha. </author> <title> An actor based framework for managing multimedia qos. </title> <booktitle> In Proceedings of the 3rd International Workshop on Multimedia Information Systems, </booktitle> <address> MISC '97, Como, Italy, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: If the timing constraints expressed in the synchronizer are hard real-time constraints, then a pessimistic evaluation of constraints is required prior to message scheduling. We propose a meta-level implementation of QoS Synchronizers that observe events on media-actors and control the invocation of messages on media actors <ref> [161] </ref>. In this case, media actors constitute the application or base-level subsystem. In order to reason about the implementation, we propose meta-level implementation entities that represent the QoS Synchronizer known as 150 ' $ QoS meta-actors (similar to constraint servers in [63]) that monitor events on base-level media-actors.
Reference: [162] <author> Nalini Venkatasubramanian and Klara Nahrstedt. </author> <title> An integrated metric for video qos. </title> <booktitle> In Proceedings of ACM Multimedia '97, </booktitle> <address> Seattle, Washington, </address> <month> November </month> <year> 1997. </year>
Reference-contexts: QoS in a distributed system. * Enforcement of QoS using a two level multimedia meta-architecture. 1.4.1 QoS Specification for Multimedia We investigate metric parameters for QoS based on conflicting requirements from two per spectives: the user who "desires" improved quality and the service provider who "desires" 10 effective system utilization <ref> [162] </ref>. To understand real workload environments and user behav-ioral patterns, we conducted an extensive empirical study of sample video-on-demand systems such as VOSAIC (video-over-the-Web) system [47], a hierarchical video-on-demand (VOD) system [115], and a remote VCR system [129]. <p> The mapping between the user specification and resource parameters can be complex and involves an understanding of user pricing models and development of revenue-based resource allocation policies. A new cost-based metric for measuring the effectiveness of video transmission in adaptive situations is the weighted cost-satisfaction ratio <ref> [162] </ref>. 6.4 An Actor Based Approach to QoS Specification Standardization efforts by the ISO have defined terminology, models and mechanisms for QoS in telecommunication environments. Here, QoS is viewed as a set of qualities associated with the collective behavior of one or more objects. <p> Hence pricing strategies can play a role in determining QoS constraints specified by the user. Prior work on defining unified metrics of QoS addresses the price-performance tradeoff <ref> [162] </ref> using an economic framework and develops negotiation protocols that express and implement resource tradeoffs.
Reference: [163] <author> Nalini Venkatasubramanian and Srinivas Ramanathan. </author> <title> Effective load management for scalable video servers. </title> <booktitle> In Proceedings of the International Conference on Distributed Computing Systems (ICDCS97), </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: retrieval [16, 180], admission control procedures to maximize server throughput [166], buffer management policies to minimize memory requirements [66, 104], replication and striping strategies for optimizing storage across disk arrays [90, 151], batching mechanisms that group closely spaced requests for the same objects [55], load balancing mechanisms for effective utilization <ref> [170, 163, 57] </ref>. 2.5 Internet Computing (Metacomputing) Various systems use resources on the Internet for wide-area parallel computing, e.g. Wax, Legion, Atlas [20], Globus [31]. <p> To optimize storage utilization, we also devise methods for dereplication of videos based on changes in their popularity and in server usage patterns <ref> [163] </ref>.
Reference: [164] <author> Nalini Venkatasubramanian, Carolyn Talcott, and Gul Agha. </author> <title> A metaarchitecture for qos-based resource management. </title> <note> In To be submitted journal paper, </note> <month> July </month> <year> 1998. </year>
Reference-contexts: For example, by modeling the scheduler explicitly and providing access to it we can introduce the notion of priorities, preemption and real-time into the two-level system. The TLAM has been used to develop an architecture for managing Quality of Service in multimedia applications <ref> [164] </ref>. Other interesting services to consider are debugging tools and event monitors. A number of languages and systems offer support for constructing fault tolerant systems. However most do not support the factorization of fault tolerance characteristics from the application specific code.
Reference: [165] <author> N. Venkatasubramian. </author> <title> Hierarchical memory management in scalable parallel systems. </title> <type> Master's thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1991. </year>
Reference-contexts: We present a non-halting garbage collection algorithm for active objects in a distributed system <ref> [165, 158] </ref>. We describe a mechanism called HDGC (hierarchical distributed garbage collection), suitable for systems of active objects distributed across a network of nodes. Hierarchical organization provides for scalability. It partitions a distributed system into smaller subsystems, which in turn may be further partitioned. <p> Step 2: The Distributed Scavenge Phase. During this step, actors that are non-garbage relative to the GC snapshot are marked touched. We use the definition of reachability in actors to determine non-garbage and develop a distributed scavenge algorithm for marking non-garbage actors <ref> [165] </ref>. Step 3: Local-Clear Initiation. Each node in the system is informed that the distributed scavenge phase has completed and local clearance begins.
Reference: [166] <author> H. M. Vin and P. V. Rangan. </author> <title> Designing a multi-user hdtv storage server. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 11(1) </volume> <pages> 153-164, </pages> <month> January </month> <year> 1993. </year> <month> 306 </month>
Reference-contexts: Work on resource management mechanisms for multimedia servers has focussed on placement of media on disk to ensure real-time retrieval [16, 180], admission control procedures to maximize server throughput <ref> [166] </ref>, buffer management policies to minimize memory requirements [66, 104], replication and striping strategies for optimizing storage across disk arrays [90, 151], batching mechanisms that group closely spaced requests for the same objects [55], load balancing mechanisms for effective utilization [170, 163, 57]. 2.5 Internet Computing (Metacomputing) Various systems use resources <p> Admission control procedures to maximize server throughput <ref> [166] </ref> and buffer management policies to minimize memory requirements [66, 104] have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in [90, 151].
Reference: [167] <author> C. Vogt and R. Herrtwich, R.G. snd Nagarajan. HeiRAT: </author> <title> The heidelberg rsource admin-istration technique, design philosophy and goals. </title> <booktitle> In Conference on Communication in Distributed Systems, </booktitle> <address> Munchen, Germany, </address> <year> 1992. </year>
Reference-contexts: This translation is required during the admission control process where resource availability at different levels must be queried and negotiated for. Approaches that focus on QoS management and its mapping on to the transport system include the Heidelberg High Speed Transport System <ref> [167] </ref>, the Lancaster QoS architecture, [65] and the CINEMA system [84]. These architectures deal with QoS support in a heterogeneous environment with diverse com munication requirements, varying levels of QoS in terms of latency, bandwidth, jitter etc.
Reference: [168] <author> T. Watanabe and A. Yonezawa. </author> <title> An actor-based metalevel architecture for group-wide reflection. </title> <booktitle> In Foundations of Object Oriented Languages, </booktitle> <pages> pages 405-425. </pages> <year> 1990. </year>
Reference-contexts: Traditional reflective languages and systems aim at providing a customizable and adaptable execution of 17 by reflection via meta-level objects. concurrent systems [178, 139]. A reflective implementation of object migration is reported in <ref> [168] </ref>. Reflection has been used in the Muse Operating System [174, 175, 176] for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179]. Representation of dependability protocols as meta-level programs is presented in [7]. <p> This is an important topic of ongoing research. 3.2 Core Services for Open Distributed Systems Open distributed systems should provide strong support for customization and adaptation. Traditional reflective systems aim at providing a customizable and adaptable execution of concurrent systems <ref> [178, 168, 172] </ref>. However, these systems are very difficult and complex to reason about. Non-reflective systems which support customization do so only on a static basis. In an object-oriented system such as Choices [35], or Spring [75], frameworks may be customized for a particular application. <p> Traditional reflective systems aim at providing customizable and adaptable execution of concurrent systems. For example, the scheduling problem of the Time Warp algorithm for parallel discrete event simulation is modeled by means of reflection in [178]. A reflective im 55 plementation of object migration is reported in <ref> [168] </ref>. Reflection has been used in the Muse Operating System [172] for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179]. Representation of dependability protocols as meta-level programs is presented in [7].
Reference: [169] <author> D. Wetherall, J. Guttag, and D. Tennenhous. </author> <title> ANTS: A Toolkit for Building and Dynamically Deploying Network Protocols. </title> <booktitle> In IEEE OPENARCH'98, </booktitle> <address> San Francisco, CA, </address> <month> April </month> <year> 1998. </year>
Reference-contexts: Active Networks [148], is an effort to make Internet routers dynamically programmable and proposes to extend network protocols to provide new services. These extensions minimize bandwidth consumption, minimize network latencies and provide congestion control. ANTS <ref> [169] </ref> is an experimental toolkit along with a protocol programming facility that permits users to 19 perform customizations on network packets in an active network.
Reference: [170] <author> Joel L. Wolf, Philip S. Yu, and Hadas Shachnai. </author> <title> Dasd dancing: A disk load balancing optimization scheme for video-on-demand computer systems. </title> <booktitle> In Proceedings of ACM SIGMETRICS '95, Performance Evaluation Review, </booktitle> <pages> pages 157-166, </pages> <month> May </month> <year> 1995. </year>
Reference-contexts: retrieval [16, 180], admission control procedures to maximize server throughput [166], buffer management policies to minimize memory requirements [66, 104], replication and striping strategies for optimizing storage across disk arrays [90, 151], batching mechanisms that group closely spaced requests for the same objects [55], load balancing mechanisms for effective utilization <ref> [170, 163, 57] </ref>. 2.5 Internet Computing (Metacomputing) Various systems use resources on the Internet for wide-area parallel computing, e.g. Wax, Legion, Atlas [20], Globus [31]. <p> Considering the storage subsystem alone, a two-stage DASD dancing scheme for load balancing <ref> [170] </ref> uses an initial static stage followed by a dynamic phase. In the initial static stage, a greedy assignment of videos to disk groups is obtained using a graph-theoretic approach. The dynamic phase that follows uses the static assignment to perform real-time disk scheduling effectively. <p> Since the data sources are connected via an external network and may have heterogeneous and distinct resources that are not shared with the other data sources, the tradeoffs to be considered for load management differ from those that exist in switched-storage servers <ref> [170, 57] </ref>. For instance, the application of the dynamic segment replication scheme in the context of a distributed multimedia server requires renegotiation and reestablishment of network connections for every request migration, thereby introducing unacceptable jitter during playback.
Reference: [171] <author> Victor Fay Wolfe, John K. Black, Bhavani Thuraisingham, and Peter Krupp. </author> <title> Real-time method invocations in distributed environments. </title> <booktitle> In Proceedings of the HiPC'95 Intl. Conference on High Performance COmputing, </booktitle> <year> 1995. </year>
Reference-contexts: For instance, the Electra framework [106] extends CORBA to provide support for fault tolerance using group-communication facilities and protocols like reliable multicast. Various researchers have investigated architectures that provide real-time extensions to CORBA <ref> [136, 171, 150] </ref> necessary to support timing-based QoS requirements [182]. <p> Similarly, real-time method invocations have been explored by transmitting timing information in CORBA data structures <ref> [171] </ref>. Preliminary work on defining reflective ORBs to customize scheduling is reported in [138]. The Java Development Environment [99] is another distributed object implementation framework that transforms a heterogeneous network of machines into a homogeneous network of Java virtual machines.
Reference: [172] <author> Y. Yokote, A. Mitsuzawa, N. Fujinami, and M. Tokoro. </author> <title> The muse object architecture: A new operating system structuring concept. </title> <type> Technical report, </type> <institution> Sony Computer Science Laboratory, </institution> <year> 1991. </year>
Reference-contexts: This is an important topic of ongoing research. 3.2 Core Services for Open Distributed Systems Open distributed systems should provide strong support for customization and adaptation. Traditional reflective systems aim at providing a customizable and adaptable execution of concurrent systems <ref> [178, 168, 172] </ref>. However, these systems are very difficult and complex to reason about. Non-reflective systems which support customization do so only on a static basis. In an object-oriented system such as Choices [35], or Spring [75], frameworks may be customized for a particular application. <p> For example, the scheduling problem of the Time Warp algorithm for parallel discrete event simulation is modeled by means of reflection in [178]. A reflective im 55 plementation of object migration is reported in [168]. Reflection has been used in the Muse Operating System <ref> [172] </ref> for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179]. Representation of dependability protocols as meta-level programs is presented in [7].
Reference: [173] <author> Yasuhiko Yokote. </author> <title> The Apertos Reflecive Operating System: The Concept and Its Implementation. </title> <booktitle> In Proceedings of the 1992 International Conference on Object-Oriented Programming, Systems, Languages, and Applications, </booktitle> <month> October </month> <year> 1992. </year>
Reference-contexts: In the Multi-Model Reflective Framework (MMRF) [123], an object is represented by multiple models allowing behavior to be described at different levels of abstraction. Aper-tos <ref> [173, 85] </ref> uses reflection as a fundamental basis for developing an operating system and provides mechanisms for reification, customizing communication and object migration. 2K [94] is a recent reflective, component based operating system effort that supports dynamic loading of new components.
Reference: [174] <author> Yasuhiko Yokote, Atsushi Mitsuzawa, Nobuhisa Fujinami, and Mario Tokoro. </author> <title> Reflective Object Management in the Muse Operating System. </title> <booktitle> In Proceedings of the 1991 International Workshop on Object Orientation in Operating Systems, </booktitle> <pages> pages 16-23. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: Traditional reflective languages and systems aim at providing a customizable and adaptable execution of 17 by reflection via meta-level objects. concurrent systems [178, 139]. A reflective implementation of object migration is reported in [168]. Reflection has been used in the Muse Operating System <ref> [174, 175, 176] </ref> for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179]. Representation of dependability protocols as meta-level programs is presented in [7].
Reference: [175] <author> Yasuhiko Yokote, Atsushi Mitsuzawa, Nobuhisa Fujinami, and Mario Tokoro. </author> <title> The Muse Object Architecture: A New Operating System Structuring Concept. </title> <journal> ACM Operating Systems Review, </journal> <volume> 25(2) </volume> <pages> 22-46, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Traditional reflective languages and systems aim at providing a customizable and adaptable execution of 17 by reflection via meta-level objects. concurrent systems [178, 139]. A reflective implementation of object migration is reported in [168]. Reflection has been used in the Muse Operating System <ref> [174, 175, 176] </ref> for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179]. Representation of dependability protocols as meta-level programs is presented in [7].
Reference: [176] <author> Yasuhiko Yokote, Fumio Teraoka, and Mario Tokoro. </author> <title> A Reflective Architecture for an Object-Oriented Distributed Operating System. </title> <booktitle> In Proceedings of ECOOP'91 European Conference on Object-Oriented Programming, </booktitle> <month> July </month> <year> 1989. </year>
Reference-contexts: Traditional reflective languages and systems aim at providing a customizable and adaptable execution of 17 by reflection via meta-level objects. concurrent systems [178, 139]. A reflective implementation of object migration is reported in [168]. Reflection has been used in the Muse Operating System <ref> [174, 175, 176] </ref> for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179]. Representation of dependability protocols as meta-level programs is presented in [7].
Reference: [177] <author> A. Yonezawa, </author> <title> editor. ABCL An Object-Oriented Concurrent System. </title> <publisher> MIT Press, </publisher> <address> Cam-bridge, Mass., </address> <year> 1990. </year>
Reference-contexts: The meta-architectural model proposed in this thesis is a first step towards providing a formal semantics for open distributed systems, and a basis for specifying and reasoning about properties of and interactions between components of such systems. Application concurrency is provided by paradigms such as concurrent object oriented programming <ref> [11, 177, 3, 49] </ref>. However, in a distributed system, various applications share a common underlying set of resources.
Reference: [178] <author> A. Yonezawa. </author> <title> Reflection in an object-oriented concurrent language. In ABCL: </title> <booktitle> A Object Oriented Concurrent System, </booktitle> <pages> pages 45-70. </pages> <year> 1990. </year>
Reference-contexts: Traditional reflective languages and systems aim at providing a customizable and adaptable execution of 17 by reflection via meta-level objects. concurrent systems <ref> [178, 139] </ref>. A reflective implementation of object migration is reported in [168]. Reflection has been used in the Muse Operating System [174, 175, 176] for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179]. <p> This is an important topic of ongoing research. 3.2 Core Services for Open Distributed Systems Open distributed systems should provide strong support for customization and adaptation. Traditional reflective systems aim at providing a customizable and adaptable execution of concurrent systems <ref> [178, 168, 172] </ref>. However, these systems are very difficult and complex to reason about. Non-reflective systems which support customization do so only on a static basis. In an object-oriented system such as Choices [35], or Spring [75], frameworks may be customized for a particular application. <p> However, once customized, the characteristics may not change dynamically. Traditional reflective systems aim at providing customizable and adaptable execution of concurrent systems. For example, the scheduling problem of the Time Warp algorithm for parallel discrete event simulation is modeled by means of reflection in <ref> [178] </ref>. A reflective im 55 plementation of object migration is reported in [168]. Reflection has been used in the Muse Operating System [172] for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns [91, 179].
Reference: [179] <author> A. Yonezawa and B. C. Smith, </author> <title> editors. Reflection and Meta-Level Architecture. </title> <booktitle> ACM SIGPLAN, </booktitle> <year> 1992. </year> <month> 307 </month>
Reference-contexts: A reflective implementation of object migration is reported in [168]. Reflection has been used in the Muse Operating System [174, 175, 176] for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns <ref> [91, 179] </ref>. Representation of dependability protocols as meta-level programs is presented in [7]. The Aspect Oriented Programming paradigm [92] makes it possible to express programs where design decisions (aspects) can be appropriately isolated permitting composition and re-use of the aspect code. <p> A reflective im 55 plementation of object migration is reported in [168]. Reflection has been used in the Muse Operating System [172] for dynamically modifying the system behavior. Reflection also underlies recent work in language and system design that supports customization and separation of design concerns <ref> [91, 179] </ref>. Representation of dependability protocols as meta-level programs is presented in [7]. Some of the more recent research on actors has focused on coordination structures and meta-architectures [6, 63, 141].
Reference: [180] <author> P. Yu, M.S. Chen, and D.D. Kandlur. </author> <title> Design and analysis of a grouped sweeping scheme for multimedia storage management. </title> <booktitle> Proceedings of Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> San Diego, </address> <pages> pages 38-49, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Work on resource management mechanisms for multimedia servers has focussed on placement of media on disk to ensure real-time retrieval <ref> [16, 180] </ref>, admission control procedures to maximize server throughput [166], buffer management policies to minimize memory requirements [66, 104], replication and striping strategies for optimizing storage across disk arrays [90, 151], batching mechanisms that group closely spaced requests for the same objects [55], load balancing mechanisms for effective utilization [170, 163, <p> addition to bandwidth and storage, other resources in the video server including buffer memory and CPU processing power need to be optimized. 7.1.4 An Integrated Approach to Load Management Many of the initial efforts in designing multimedia servers have focussed on placement of media on disk to ensure real-time retrieval <ref> [16, 180] </ref>. Admission control procedures to maximize server throughput [166] and buffer management policies to minimize memory requirements [66, 104] have also been studied. Replication and striping strategies for optimizing storage across disk arrays are described in [90, 151].
Reference: [181] <author> L. Yun and D. Messerschmitt. </author> <title> Architectures for multi-source multi-user video compositing. </title> <booktitle> In Proceedings of ACM Multimedia'93, </booktitle> <pages> pages 215-223, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: In some cases, the retrieved data may be processed before transmission: for example, in order to provide picture-in-picture capability or to embed other information in the extracted data, compositing functions are incorporated in this module <ref> [181] </ref>. * Communication Module: The extracted and processed data from the data manipulation modules is passed to the communication module that implements the protocols required for data transmission over the interconnecting network.
Reference: [182] <author> J.A. Zinky, D.E. Bakken, and R.E. Schantz. </author> <title> Architectural support of quality of service. </title> <journal> Theory and Practice of Object Systems, </journal> <volume> 3(1), </volume> <year> 1997. </year> <month> 308 </month>
Reference-contexts: For instance, the Electra framework [106] extends CORBA to provide support for fault tolerance using group-communication facilities and protocols like reliable multicast. Various researchers have investigated architectures that provide real-time extensions to CORBA [136, 171, 150] necessary to support timing-based QoS requirements <ref> [182] </ref>. TAO is a framework that supports real-time CORBA extensions to provide 15 end-to-end QoS and it has been used to study performance optimizations [68, 70], real-time inter-ORB protocols and real-time scheduling [69], wide-area networking [67], event management [76], and patterns for extensible middleware [106, 135].
References-found: 182

