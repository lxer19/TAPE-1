URL: http://world.std.com/~dtd/compliance/compliance.ps
Refering-URL: http://world.std.com/~dtd/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Compliance Defects in Public-Key Cryptography  
Author: Don Davis 
Date: March 10, 1997  
Abstract: Public-key cryptography has low infrastructural overhead because public-key users bear a substantial but hidden administrative burden. A public-key security system trusts its users to validate each others' public keys rigorously and to manage their own private keys securely. Both tasks are hard to do well, but public-key security systems lack a centralized infrastructure for enforcing users' discipline. A compliance defect in a cryptosystem is such a rule of operation that is both difficult to follow and unenforceable. This paper presents five compliance defects that are inherent in public-key cryptography; these defects make public-key cryptography more suitable for server-to-server security than for desktop applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.J. Anderson, </author> <title> "Why Cryptosystems Fail," </title> <journal> Comm. ACM, </journal> <volume> v bf 37 no. </volume> <month> 11 (November </month> <year> 1994), </year> <pages> pp. 32-40 </pages>
Reference-contexts: What's worse, an organization's overall security depends primarily on all users to be diligent in their key-management duties. This reliance on users' diligence is utterly unrealistic. Anderson has collected many case-studies of poor security practices among financial users of symmetric-key security <ref> [1] </ref>. He consistently found that application-programmers and end-users do not understand, and will not perform, simple key-management duties.
Reference: [2] <author> R.J. Anderson, R.M. Needham, </author> <title> "Robustness Principles for Public-Key Protocols," </title> <booktitle> Advances in Cryptology - CRYPTO '95, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1995. </year>
Reference-contexts: However, this real-time reliance on a centralized infrastructure negates one of the main advantages of public-key cryptography as originally conceived, public-key protocols would avoid depen 4 Simply signing the ciphertext doesn't work; see <ref> [3, 10, 2] </ref>. dence on centralized points-of-failure. Further, note that a rigorous check of a certificate's validity requires that the public key of each CRL in the chain to the Root has to be revocation-checked, just as with signature validations.
Reference: [3] <author> M. Burrows, M. Abadi, and R. Needham, </author> <title> "A Logic of Authentication," </title> <journal> Proc. R. Soc. Lond. </journal> <note> A 426(1989) pp. 233-271. </note>
Reference-contexts: However, this real-time reliance on a centralized infrastructure negates one of the main advantages of public-key cryptography as originally conceived, public-key protocols would avoid depen 4 Simply signing the ciphertext doesn't work; see <ref> [3, 10, 2] </ref>. dence on centralized points-of-failure. Further, note that a rigorous check of a certificate's validity requires that the public key of each CRL in the chain to the Root has to be revocation-checked, just as with signature validations.
Reference: [4] <author> D.A. Curry, </author> <title> UNIX System Security: A Guide for Users and System Administrators, Addison-Wesley Professional Computing Series (Reading, </title> <address> Mass.) </address> <year> 1992. </year>
Reference: [5] <author> D. Davis, </author> <title> "Kerberos Plus RSA for World Wide Web Security," </title> <booktitle> Proc. 1 st USENIX Workshop on Electronic Commerce (NYC, </booktitle> <volume> 7/95), </volume> <month> pp.185-8. </month>
Reference-contexts: Making sure that the CPU's copy is incorrupt ible; 3. Using a separate security system, like a smart-card or Kerberos [15, 20], to convey an authentic copy to the CPU. It is not sufficient to pass the top-level keys inside the application-client's executable, as Netscape's Web browser does <ref> [14, 5] </ref>. <p> At the cost of introducing administrative trust, symmetric-key systems solve all but the problem of long-distance account-creation, which is hard for any security system. We can combine both cryptosystems' administrative benefits, by restricting public-key deployment to servers, and by using symmetric-key protocols for desktop clients. <ref> [5] </ref> The clients' KDC can enforce password-quality, issue short-lived keys, validate servers' public keys, and maintain CRLs.
Reference: [6] <author> D. Davis and R. Swick, </author> <title> "Network Security via Private-Key Certificates," </title> <booktitle> USENIX 3 rd Security Symposium Proceedings, (Baltimore; Sept. </booktitle> <pages> '92) pp. 239-42. </pages> <note> Also in ACM Operating Systems Review, v.24, </note> <month> 4 (Oct. </month> <year> 1990). </year>
Reference-contexts: For signatures and asynchronous messaging, a symmetric-key-based signature system can mediate between native symmetric-key users and external public-key users. <ref> [13, 6] </ref> This hybrid security system would put public key-pairs only in the hands of well-trained sys-admins, and would also minimize the CRLs' scaling problems. Hybridization trades away theoretically perfect privacy, so as to strengthen public-key's practical weak link: user compliance.
Reference: [7] <author> D. Geer and J. Rochlis, </author> <title> "Network Security: The Kerberos Approach," </title> <booktitle> Usenix Workshop Tutorial. </booktitle>
Reference-contexts: A fair, if simplistic, rule of thumb is that the cost of key-issuance plus the cost of revocation is a constant <ref> [7] </ref>. For symmetric-key systems, these costs are roughly equal, but for public-key systems, certificate revocation is much harder than issuance. Revocation is the classic Achilles' Heel of public-key cryptography.
Reference: [8] <author> L. Guillou and J. Quisquater, </author> <title> "A Practical Zero-Knowledge Protocol Fitted to Security Microprocessor Minimizing Both Transmission and Memory." </title> <booktitle> Advances in Cryptology - EURO-CRYPT '88, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference-contexts: For signature operations only, it is possible to avoid keeping the private key on hand, by using a secret signature as a temporary private key. <ref> [8, 12] </ref> This temporary key's signature can be checked with the user's public key. 5 However, if the user is to be able to decrypt private messages, he has to keep his private key in memory, and in plain-text form, throughout his login-session.
Reference: [9] <institution> Clyde Hoover wrote the npasswd command at U. Texas at Austin: ftp://emx.utexas.edu/pub/npasswd. </institution> <note> For a concise description, see [4], p. 171. </note>
Reference-contexts: Then, the KDC can apply various rules and filters to ensure that the password is hard to guess. For example, the Kerberos system has incorporated most of the features of U. Texas' npasswd command <ref> [9] </ref>, password-expiration, and other password-QA features, in a flexible password-policy mechanism. 6 Another valuable approach is proactive dictionary-checking.
Reference: [10] <author> C. I'Anson and C. Mitchell, </author> <title> "Security Defects in CCITT Recommendation X.509 The Directory Authentication Framework," </title> <journal> ACM Comp. Comm. Rev., </journal> <volume> (Apr '90), </volume> <pages> pp. 30-34. </pages>
Reference-contexts: However, this real-time reliance on a centralized infrastructure negates one of the main advantages of public-key cryptography as originally conceived, public-key protocols would avoid depen 4 Simply signing the ciphertext doesn't work; see <ref> [3, 10, 2] </ref>. dence on centralized points-of-failure. Further, note that a rigorous check of a certificate's validity requires that the public key of each CRL in the chain to the Root has to be revocation-checked, just as with signature validations.
Reference: [11] <author> International Telegraph and Telephone Consultative Committee (CCITT). </author> <title> Recommendation X.509: The Directory Authentication Framework. In Data Communications Network Directory, </title> <booktitle> Recommendations X.500-X.521, </booktitle> <pages> pp. 48-81. </pages> <note> Vol. 8, Fascicle 8.8 of CCITT Blue Book. </note> <institution> Geneva: International Telecommunication Union, </institution> <year> 1989. </year>
Reference-contexts: This step is recursive, and ends with the out-of-band validation of the Root CA's public key. 1 A similar summary for symmetric-key security systems appears in the Appendix. My outlines are loosely based on the X.509 <ref> [11] </ref> and Kerberos systems [15, 20]. 4. Password-Change * The user should regularly change the passphrase with which he decrypts his asymmetric private key. 5.
Reference: [12] <author> C. Kaufman, R. Perlman, and M. Spencer, </author> <title> Network Security: PRIVATE Communication in a PUBLIC World, </title> <booktitle> Prentice-Hall Series in Computer Networking and Distributed Systems, </booktitle> <address> (En-glewood Cliffs, NJ) 1995, </address> <pages> pp. 436-8. </pages>
Reference-contexts: For signature operations only, it is possible to avoid keeping the private key on hand, by using a secret signature as a temporary private key. <ref> [8, 12] </ref> This temporary key's signature can be checked with the user's public key. 5 However, if the user is to be able to decrypt private messages, he has to keep his private key in memory, and in plain-text form, throughout his login-session.
Reference: [13] <author> B. Lampson, M. Abadi, M. Burrows, E. </author> <title> Wob-ber , "Authentication in Distributed Systems: </title> <booktitle> Theory and Practice" 13th ACM Symposium on Operating Systems Principles pp. </booktitle> <pages> 165-182, </pages> <month> Oct. </month> <year> 1991 </year>
Reference-contexts: For signatures and asynchronous messaging, a symmetric-key-based signature system can mediate between native symmetric-key users and external public-key users. <ref> [13, 6] </ref> This hybrid security system would put public key-pairs only in the hands of well-trained sys-admins, and would also minimize the CRLs' scaling problems. Hybridization trades away theoretically perfect privacy, so as to strengthen public-key's practical weak link: user compliance.
Reference: [14] <author> Netscape Communications, </author> <title> "Secure Socket Layer Reference Document," Unofficial Internet Draft. </title>
Reference-contexts: CAs cannot scale as well as might seem possible, because account-initiation is less a technical scaling problem than a social one. 3.2 Authenticating the CA It is a telling and ominous fact that every electronic-commerce protocol specification explicitly disavows all responsibility for the validation of the Root CA's public key <ref> [14, 16, 22, 23] </ref>. "Outside the scope of this document" is a typical waiver. [14] Before using a public-key certificate, a user must authenticate it by checking its certifying signature and the signature on each public key in its chain of certifying authorities. <p> technical scaling problem than a social one. 3.2 Authenticating the CA It is a telling and ominous fact that every electronic-commerce protocol specification explicitly disavows all responsibility for the validation of the Root CA's public key [14, 16, 22, 23]. "Outside the scope of this document" is a typical waiver. <ref> [14] </ref> Before using a public-key certificate, a user must authenticate it by checking its certifying signature and the signature on each public key in its chain of certifying authorities. It's commonly forgotten that public-key cryptography cannot afford the user any automatic procedure for validating the top-level CA key. <p> Making sure that the CPU's copy is incorrupt ible; 3. Using a separate security system, like a smart-card or Kerberos [15, 20], to convey an authentic copy to the CPU. It is not sufficient to pass the top-level keys inside the application-client's executable, as Netscape's Web browser does <ref> [14, 5] </ref>.
Reference: [15] <author> C. Neuman and J. Kohl, </author> <title> The Kerberos Network Authentication Service (V5), Internet RFC 1510, </title> <month> September </month> <year> 1993. </year>
Reference-contexts: This step is recursive, and ends with the out-of-band validation of the Root CA's public key. 1 A similar summary for symmetric-key security systems appears in the Appendix. My outlines are loosely based on the X.509 [11] and Kerberos systems <ref> [15, 20] </ref>. 4. Password-Change * The user should regularly change the passphrase with which he decrypts his asymmetric private key. 5. <p> To make sure the top-level CA key is authentic, the user has three choices: 1. Hand-checking it against an authentic paper copy; 2. Making sure that the CPU's copy is incorrupt ible; 3. Using a separate security system, like a smart-card or Kerberos <ref> [15, 20] </ref>, to convey an authentic copy to the CPU. It is not sufficient to pass the top-level keys inside the application-client's executable, as Netscape's Web browser does [14, 5].
Reference: [16] <author> E. Rescorla and A. Schiffman, </author> <title> "Secure Hypertext Transfer Protocol," Internet Draft RFC, </title> <month> May '95. </month>
Reference-contexts: CAs cannot scale as well as might seem possible, because account-initiation is less a technical scaling problem than a social one. 3.2 Authenticating the CA It is a telling and ominous fact that every electronic-commerce protocol specification explicitly disavows all responsibility for the validation of the Root CA's public key <ref> [14, 16, 22, 23] </ref>. "Outside the scope of this document" is a typical waiver. [14] Before using a public-key certificate, a user must authenticate it by checking its certifying signature and the signature on each public key in its chain of certifying authorities.
Reference: [17] <author> R. Rivest, A, Shamir, L. Adleman, </author> <title> "A Method for Obtaining Digital Signatures and Public-Key Cryptosystems," </title> <journal> Comm. ACM, v. </journal> <volume> 21, 2, </volume> <month> Feb. </month> <pages> '78, pp. 120-126. </pages>
Reference: [18] <author> J.I. Schiller and D. Atkins, </author> <title> "Scaling the Web of Trust: Combining Kerberos and PGP to Provide Large Scale Authentication," </title> <booktitle> USENIX Winter Conference Proceedings, </booktitle> <month> January </month> <year> 1995. </year>
Reference-contexts: It is possible to use a symmetric-key security system to authenticate a public-key certification-request. MIT has added a PGP-signing service to the Ker-beros authentication system. <ref> [18] </ref> In this scheme, the authenticity of the certificate's name-to-key binding is as sound as the Kerberos account's creation was. If the user-accounts administrator checked IDs in face-to-face meetings, the Kerberized CA's certificates will be meaningful.
Reference: [19] <author> E.H. Spafford, </author> <title> "Observing Reusable Password Choices," </title> <booktitle> USENIX 3 rd Security Symposium Proceedings, (Baltimore; Sept. </booktitle> <volume> '92), </volume> <pages> pp. 299-312. </pages>
Reference-contexts: Open-Vision has offices in Cambridge, Mass., Pleasanton, Calif., and London, UK. divulging the passwords to any trusted party. <ref> [19] </ref> Left to their own choices, users tend to choose passwords that are easy to guess, and they tend not to change their passwords unless the security system obliges them to do so. Thus, lacking effective password-quality controls, most public-key systems are vulnerable to off-line guessing attacks.
Reference: [20] <author> J.G. Steiner, C. Neuman, and J.I. Schiller, </author> <title> "Kerberos: An Authentication Service for Open Network Systems", </title> <booktitle> USENIX Winter Conference Proceedings, </booktitle> <month> February </month> <year> 1988. </year> <month> [athena-dist.mit.edu:pub/kerberos/doc/usenix.PS] </month>
Reference-contexts: This step is recursive, and ends with the out-of-band validation of the Root CA's public key. 1 A similar summary for symmetric-key security systems appears in the Appendix. My outlines are loosely based on the X.509 [11] and Kerberos systems <ref> [15, 20] </ref>. 4. Password-Change * The user should regularly change the passphrase with which he decrypts his asymmetric private key. 5. <p> To make sure the top-level CA key is authentic, the user has three choices: 1. Hand-checking it against an authentic paper copy; 2. Making sure that the CPU's copy is incorrupt ible; 3. Using a separate security system, like a smart-card or Kerberos <ref> [15, 20] </ref>, to convey an authentic copy to the CPU. It is not sufficient to pass the top-level keys inside the application-client's executable, as Netscape's Web browser does [14, 5].
Reference: [21] <institution> USPS Electronic Commerce Services, product information sheet (Washington, </institution> <address> DC), </address> <year> 1995. </year>
Reference-contexts: Often it will be even weaker than this, since Verisign is planning to issue its lowest-level certificates by e-mail. Perhaps the only U.S. organization that already has the infrastructure necessary for correctly issuing public-key certificates is the U.S. Postal Service <ref> [21] </ref>. Certainly, the degree of certainty that one requires for a certificate varies with the application. A full discus sion of such issues and their relevance to the present argument is beyond the scope of this paper, but it's clear that unauthenticated issuance offers no security guarantees.
Reference: [22] <author> Visa International and MasterCard, </author> <title> "Secure Electronic Transactions Protocol Specification." </title>
Reference-contexts: CAs cannot scale as well as might seem possible, because account-initiation is less a technical scaling problem than a social one. 3.2 Authenticating the CA It is a telling and ominous fact that every electronic-commerce protocol specification explicitly disavows all responsibility for the validation of the Root CA's public key <ref> [14, 16, 22, 23] </ref>. "Outside the scope of this document" is a typical waiver. [14] Before using a public-key certificate, a user must authenticate it by checking its certifying signature and the signature on each public key in its chain of certifying authorities.
Reference: [23] <institution> Visa International and Microsoft Corp., "Secure Transaction Technology Specifications." </institution>
Reference-contexts: CAs cannot scale as well as might seem possible, because account-initiation is less a technical scaling problem than a social one. 3.2 Authenticating the CA It is a telling and ominous fact that every electronic-commerce protocol specification explicitly disavows all responsibility for the validation of the Root CA's public key <ref> [14, 16, 22, 23] </ref>. "Outside the scope of this document" is a typical waiver. [14] Before using a public-key certificate, a user must authenticate it by checking its certifying signature and the signature on each public key in its chain of certifying authorities.
Reference: [24] <author> A. Young, M. Yung, </author> <title> "The Dark Side of Black-Box Cryptography -or- Should We Trust Capstone?" Advances in Cryptology - CRYPTO '96, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1996. </year>
Reference-contexts: For example, if the user leaves his keyboard unattended, or if his laptop is stolen, his private key will likely be compromised. Similarly, viruses and Trojan-Horse programs have been built to steal long-lived keys. <ref> [24] </ref> So, the private key is only as secure as the user's computer.
Reference: [25] <author> P. Zimmermann, </author> <title> The Official PGP User's Guide, </title> <publisher> MIT Press (Cambridge, </publisher> <address> Mass.) </address> <year> 1995. </year>
Reference-contexts: Further, in the public-key world, users and CAs usually are widely separated, so universal face-to-face certificate issuance is really practical only for PGP hobbyists <ref> [25] </ref>. Properly authenticated certificates will have to be expensive, because of the labor cost in a face-to-face identity check. For most people, a certificate's ownership will be no more airtight than a credit card's privacy, especially since credit-card companies will be issuing certificates.
References-found: 25

