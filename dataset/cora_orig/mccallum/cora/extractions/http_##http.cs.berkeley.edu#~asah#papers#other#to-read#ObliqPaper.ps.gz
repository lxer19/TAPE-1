URL: http://http.cs.berkeley.edu/~asah/papers/other/to-read/ObliqPaper.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~asah/papers/other/to-read/
Root-URL: http://www.cs.berkeley.edu
Title: A language with distributed scope  
Author: Luca Cardelli 
Affiliation: Digital Equipment Corporation, Systems Research Center  
Date: November 21, 1994 2:38 PM Page 1  
Abstract: Obliq is a lexically-scoped untyped interpreted language that supports distributed objectoriented computation. An Obliq computation may involve multiple threads of control within an address space, multiple address spaces on a machine, heterogeneous machines over a local network, and multiple net - works over the Internet. Obliq objects have state and are local to a site. Obliq computations can roam over the network, while maintaining network connections. 
Abstract-found: 1
Intro-found: 1
Reference: [Abadi, Cardelli 1994] <author> M. Abadi and L. Cardelli. </author> <title> A theory of primitive objects: untyped and first-order systems. </title> <booktitle> Proc. Theoretical Aspects of Computer Software. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The Obliq object primitives were designed in parallel with work on the type theory of objects <ref> [Abadi, Cardelli 1994] </ref>; distributed scoping and distributed semantics, however, are not treated there. Status Obliq has been available at Digital SRC for about a year.
Reference: [Apple 1993] <author> Apple, </author> <title> AppleScript Language Guide. </title> <publisher> Addison Wesley. </publisher>
Reference-contexts: Related Work Obliqs features and application domains overlap with programming languages such as ML [Milner, Tofte, Harper 1989; Reppy 1991] , Modula-3 [Nelson 1991], and Self [Ungar, Smith 1987] , with scripting languages such as Tcl [Ousterhout 1994], AppleScript <ref> [Apple 1993] </ref>, VBA [Brockschmidt 1994; Mansfield 1994] , and Telescript [White 1994], and with distributed languages such as Orca [Bal, Kaashoek, Tanenbaum 1992], Fort [Fort 1994], and Facile [Thomsen, et al. 1993]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects.
Reference: [Avrahami, Brooks, Brown 1989] <author> G. Avrahami, K.P. Brooks, and M.H. Brown, </author> <title> A two-view approach to constructing user interfaces. </title> <booktitle> Computer Graphics 23(3), </booktitle> <pages> 137-146. </pages>
Reference-contexts: These include threads, mutexes, conditions, processes, and forms (see appendix C). It is however easy to bundle the built-in operations for these values into objects, and then export those objects to the network. In the case of forms <ref> [Avrahami, Brooks, Brown 1989] </ref>, it is possible to transmit a textual form description, and generate the form remotely. Readers and writers (appendix B.6.11 and B.6.12) can be transmitted over the network; then they operate as efficient network streams.
Reference: [Bal, Kaashoek, Tanenbaum 1992] <author> H.E. Bal, M.F. Kaashoek, </author> <title> and A.S. Tanenbaum, Orca: a language for parallel programming of distributed systems. </title> <journal> IEEE Transactions on Software Engineering 18(3), </journal> <pages> 190-205. </pages>
Reference-contexts: Note that requirement (2) does not contradict invariant (1), because an invocation through self suspends a method before activating a sibling. The obvious approach to implementing serialized objects, adopted by many concurrent languages is to associate mutexes with objects (for example, see <ref> [Bal, Kaashoek, Tanenbaum 1992] </ref>). Such mu-texes are locked when a method of an object is invoked, and unlocked when the method returns, guar - anteeing condition (1). This way, however, we have a deadlock whenever a method calls a sibling, vio - lating condition (2). <p> with programming languages such as ML [Milner, Tofte, Harper 1989; Reppy 1991] , Modula-3 [Nelson 1991], and Self [Ungar, Smith 1987] , with scripting languages such as Tcl [Ousterhout 1994], AppleScript [Apple 1993], VBA [Brockschmidt 1994; Mansfield 1994] , and Telescript [White 1994], and with distributed languages such as Orca <ref> [Bal, Kaashoek, Tanenbaum 1992] </ref>, Fort [Fort 1994], and Facile [Thomsen, et al. 1993]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects.
Reference: [Bharat, Brown 1994] <author> K. Bharat and M.H. Brown. </author> <title> Building distributed applications by direct manipulation. </title> <booktitle> Proc. </booktitle> <address> UIST94. </address>
Reference-contexts: November 21, 1994 2:38 PM Page 27 end-; This way, old clients of obj1 go through aliasing indirections, but new clients acquiring obj1 from the name server operate directly on the migrated object. 5.8 Application Servers Visual Obliq <ref> [Bharat, Brown 1994] </ref> is an interactive distributed-application and user-interface generator, based on Obliq. All distributed applications built in Visual Obliq follow the same model, which we may call the application server model. <p> Status Obliq has been available at Digital SRC for about a year. In addition to incidental programming, it has been used extensively as a scripting language for algorithm animation [Brown 1994] and 3D graphics [Najork, Brown 1994] , and as the basis of a distributed-application builder (Visual Obliq <ref> [Bharat, Brown 1994] </ref>). The Obliq implementation provides access to many popular Modula-3 libraries [Horning, et al. 1993] and to an extensive user interface tool kit [Brown, Meehan 1994]. Obliq can be used as a standalone interactive interpeter.
Reference: [Birrell 1991] <author> A.D. Birrell, </author> <title> An introduction to programming with threads. In Systems Programming with Modula-3, Chapter 4, </title> <editor> G. Nelson, ed. </editor> <publisher> Prentice Hall. </publisher>
Reference-contexts: More complex situations require both sophisti - cated uses of explicit mutexes, and conditional synchronization (where threads wait on conditions in addition to mutexes). Because of these more complex situations, Obliq supports the full spectrum of Modula-3 threads primitives <ref> [Birrell 1991; Horning, et al. 1993] </ref> some through an external interface, and some directly in the syntax. Conditional synchronization can be used also with the implicit object mutexes. A new condition c can be created by condition () and signaled by signal (c).
Reference: [Birrell, et al. 1993a] <author> A.D. Birrell, D. Evers, G. Nelson, S. Owicki, and E. Wobber. </author> <title> Distributed garbage collection for network objects. </title> <type> Report 116. </type> <institution> Digital Equipment Corporation, Systems Research Center. </institution>
Reference-contexts: made available to a third site by transmitting it through an established communication channel: Site2: site3Obj.op (site1Obj) Page 16 November 21, 1994 2:38 PM Site1 TCP Site3 Site2 Name Server Objects are garbage collected at a site when they are no longer referred to, either locally or via network references <ref> [Birrell, et al. 1993a] </ref>. Another name service operation returns status information about a network reference, as a text string. It can be used to ping a remote object without affecting it: net_who (site1Obj); Communication failures raise an exception ( net_failure), which can be trapped. <p> 1 to 10 do pause (6.0); report := searchAgent.report (); if successful (report) then exit end; if promising (report) then report := join (searchThread); exit; end; searchAgent.stop (); Client resources at the server site are released when the client garbage collects the search agents, or when the client site dies <ref> [Birrell, et al. 1993a] </ref>. This technique for remotely allocating objects can be extended to multiple agents searching multi - ple databases simultaneously, and to agents initiating their own sub-agents.
Reference: [Birrell, et al. 1993b] <author> A.D. Birrell, G. Nelson, S. Owicki, and E. Wobber. </author> <title> Network objects. </title> <booktitle> Proc. 14th Symposium on Operating Systems Principles. </booktitle>
Reference-contexts: Network services normally accept a variety of messages; it is then natural to see each service as a network object (or, more neutrally, as a network interface). Obliq supports objects in this spirit, relying for its implementation on Modula-3s network objects <ref> [Birrell, et al. 1993b] </ref> The Obliq object primitives are designed to be simple and powerful, with a coherent relationship between their local and distributed semantics. Obliq objects are collections of named fields, with four basic operations: selection/invocation, updating/overriding, cloning, and redirection. There are no class hierarchies, nor complex method-lookup procedures.
Reference: [Birrell, et al. 1994] <author> A.D. Birrell, G. Nelson, S. Owicki, and E. Wobber. </author> <title> Network objects. </title> <type> Report 115. </type> <institution> Digital Equipment Corporation, Systems Research Center. </institution>
Reference-contexts: But such channels must first be established by interaction with a name server. A name server for Obliq programs is an ex - ternal process that is uniquely identified by its IP address; it simply maintains a table associating text strings with network references <ref> [Birrell, et al. 1994] </ref>. The connection protocol between two Obliq sites is as follows. The first site registers a local, or remote, object under a certain name with a known name server. The second site asks the name server for (the network reference to) the object registered under that name. <p> In the case of forms [Avrahami, Brooks, Brown 1989], it is possible to transmit a textual form description, and generate the form remotely. Readers and writers (appendix B.6.11 and B.6.12) can be transmitted over the network; then they operate as efficient network streams. However, their usage is significantly restricted <ref> [Birrell, et al. 1994] </ref>; it is safe to transmit each reader/writer only once away from a site, and from then on to use it only at the receiving site, where it can be retransmitted with the same restrictions. <p> Using this mechanism, it is possible to add definitions to built-in libraries, for example by module text2 for text;. B.5 The Network Objects Daemon A name server must be running before net_export and similar operations can work. Obliq uses the name server provided with Modula-3 Network Objects <ref> [Birrell, et al. 1994] </ref>, it can be started by the Unix command netobjd.
Reference: [Brewer, Waldspurger 1992] <author> E.A. Brewer and C.A. Waldspurger. </author> <title> Preventing recursion deadlock in concurrent object-oriented systems. </title> <booktitle> Proc. 1992 International Parallel Processing Symposium, </booktitle> <address> Beverly Hills, California. </address> <note> (Also, Report MIT/LCS/TR-526.). </note>
Reference: [Brockschmidt 1994] <author> K. Brockschmidt, </author> <title> Inside OLE2. </title> <publisher> Microsoft Press. </publisher>
Reference-contexts: Related Work Obliqs features and application domains overlap with programming languages such as ML [Milner, Tofte, Harper 1989; Reppy 1991] , Modula-3 [Nelson 1991], and Self [Ungar, Smith 1987] , with scripting languages such as Tcl [Ousterhout 1994], AppleScript [Apple 1993], VBA <ref> [Brockschmidt 1994; Mansfield 1994] </ref> , and Telescript [White 1994], and with distributed languages such as Orca [Bal, Kaashoek, Tanenbaum 1992], Fort [Fort 1994], and Facile [Thomsen, et al. 1993]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects.
Reference: [Brown 1994] <author> M.H. Brown. </author> <title> Report on the 1993 SRC algorithm animation festival. </title> <type> Report n.126. </type> <institution> Digital Equipment Corporation, Systems Research Center. </institution> <note> To appear. </note>
Reference-contexts: November 21, 1994 2:38 PM Page 27 end-; This way, old clients of obj1 go through aliasing indirections, but new clients acquiring obj1 from the name server operate directly on the migrated object. 5.8 Application Servers Visual Obliq <ref> [Bharat, Brown 1994] </ref> is an interactive distributed-application and user-interface generator, based on Obliq. All distributed applications built in Visual Obliq follow the same model, which we may call the application server model. <p> Status Obliq has been available at Digital SRC for about a year. In addition to incidental programming, it has been used extensively as a scripting language for algorithm animation <ref> [Brown 1994] </ref> and 3D graphics [Najork, Brown 1994] , and as the basis of a distributed-application builder (Visual Obliq [Bharat, Brown 1994]). The Obliq implementation provides access to many popular Modula-3 libraries [Horning, et al. 1993] and to an extensive user interface tool kit [Brown, Meehan 1994]. <p> Status Obliq has been available at Digital SRC for about a year. In addition to incidental programming, it has been used extensively as a scripting language for algorithm animation [Brown 1994] and 3D graphics <ref> [Najork, Brown 1994] </ref> , and as the basis of a distributed-application builder (Visual Obliq [Bharat, Brown 1994]). The Obliq implementation provides access to many popular Modula-3 libraries [Horning, et al. 1993] and to an extensive user interface tool kit [Brown, Meehan 1994]. <p> Status Obliq has been available at Digital SRC for about a year. In addition to incidental programming, it has been used extensively as a scripting language for algorithm animation [Brown 1994] and 3D graphics [Najork, Brown 1994] , and as the basis of a distributed-application builder (Visual Obliq <ref> [Bharat, Brown 1994] </ref>). The Obliq implementation provides access to many popular Modula-3 libraries [Horning, et al. 1993] and to an extensive user interface tool kit [Brown, Meehan 1994]. Obliq can be used as a standalone interactive interpeter.
Reference: [Brown, Meehan 1994] <author> M.H. Brown and J.R. Meehan. </author> <title> The FormsVBT Reference Manual. </title> <type> Unpublished. </type> <institution> Digital Equipment Corporation, Systems Research Center. </institution>
Reference-contexts: The Obliq implementation provides access to many popular Modula-3 libraries [Horning, et al. 1993] and to an extensive user interface tool kit <ref> [Brown, Meehan 1994] </ref>. Obliq can be used as a standalone interactive interpeter. It can also be embedded as a library in Modula-3 applications, allowing them to interact remotely through Obliq scripts. The implementation and complete documentation is available on the World Wide Web at http://www.-research.-digital.-com/-SRC/-home.-html.
Reference: [Fort 1994] <author> Fort. </author> <title> TOOL reference manual. Fort, </title> <publisher> Inc. </publisher>
Reference-contexts: works well sequentially may suddenly deadlock when a mutex is added. ([Brewer, Waldspurger 1992] gives an overview of previous solutions to this problem.) A way to satisfy condition (2) is to use reentrant mutexes, that is, mutexes that do not deadlock when relocked by the same thread (for example, see <ref> [Fort 1994] </ref>). On one hand, this solution is too liberal, because it allows a method to call an arbitrary method of a different object, which then can call back a method of the present object without deadlocking. <p> ML [Milner, Tofte, Harper 1989; Reppy 1991] , Modula-3 [Nelson 1991], and Self [Ungar, Smith 1987] , with scripting languages such as Tcl [Ousterhout 1994], AppleScript [Apple 1993], VBA [Brockschmidt 1994; Mansfield 1994] , and Telescript [White 1994], and with distributed languages such as Orca [Bal, Kaashoek, Tanenbaum 1992], Fort <ref> [Fort 1994] </ref>, and Facile [Thomsen, et al. 1993]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects.
Reference: [Horning, et al. 1993] <author> J. Horning, B. Kalsow, P. McJones, and G. Nelson. </author> <title> Some useful Modula-3 interfaces. </title> <type> Report 113. </type> <institution> Digital Equipment Corporation, Systems Research Center. </institution>
Reference-contexts: More complex situations require both sophisti - cated uses of explicit mutexes, and conditional synchronization (where threads wait on conditions in addition to mutexes). Because of these more complex situations, Obliq supports the full spectrum of Modula-3 threads primitives <ref> [Birrell 1991; Horning, et al. 1993] </ref> some through an external interface, and some directly in the syntax. Conditional synchronization can be used also with the implicit object mutexes. A new condition c can be created by condition () and signaled by signal (c). <p> In addition to incidental programming, it has been used extensively as a scripting language for algorithm animation [Brown 1994] and 3D graphics [Najork, Brown 1994] , and as the basis of a distributed-application builder (Visual Obliq [Bharat, Brown 1994]). The Obliq implementation provides access to many popular Modula-3 libraries <ref> [Horning, et al. 1993] </ref> and to an extensive user interface tool kit [Brown, Meehan 1994]. Obliq can be used as a standalone interactive interpeter. It can also be embedded as a library in Modula-3 applications, allowing them to interact remotely through Obliq scripts. <p> In the case of map, a shortened array is returned containing the values of the iterations computed so far. A.3.8 Concurrency The primitives described in this section are built on top of, and have the same semantics as, the Modula-3 threads primitives having similar names <ref> [Horning, et al. 1993] </ref> . The full thread interface is described in appendix B.6.10. The mutex primitive returns a new mutex. The lock statement locks a mutex in a scope, re - turning the value of its second expression. <p> The operating system and file system of a server site are not necessarily available (see section A.2.9); lexical scoping prevents any unauthorized access. B.6 Built-in Libraries In this appendix we list the Obliq built-in libraries, many of which are entry points into popular Modula-3 libraries <ref> [Horning, et al. 1993] </ref>. We use an informal typing notation in the specification of the operations, including a specification of the exceptions that may be raised (see section A.4.1). Many operations raise errors as well, but these are not made explicit. <p> We use the type comments of section A.4.1; all the exception conditions are documented, but the more obvious error conditions are not. We often provide informal English descriptions of the opera - tions. For details of some operations one should look at the specification of the respective Modula-3 interfaces <ref> [Horning, et al. 1993] </ref>. The sys library is special: it contains entry points into the implementation of Obliq and its com puting environment. B.6.1 Sys All (T)sys_copy (x: T): T ! net_failure (also copy (x)) Make a local copy of a value, including most distributed values.
Reference: [Mansfield 1994] <author> R. Mansfield, </author> <title> Visual Basic for Applications. </title> <publisher> Ventana Press. </publisher>
Reference-contexts: Related Work Obliqs features and application domains overlap with programming languages such as ML [Milner, Tofte, Harper 1989; Reppy 1991] , Modula-3 [Nelson 1991], and Self [Ungar, Smith 1987] , with scripting languages such as Tcl [Ousterhout 1994], AppleScript [Apple 1993], VBA <ref> [Brockschmidt 1994; Mansfield 1994] </ref> , and Telescript [White 1994], and with distributed languages such as Orca [Bal, Kaashoek, Tanenbaum 1992], Fort [Fort 1994], and Facile [Thomsen, et al. 1993]. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects.
Reference: [Milner, Tofte, Harper 1989] <author> R. Milner, M. Tofte, and R. Harper, </author> <title> The definition of Standard ML. </title> <publisher> MIT Press. </publisher>
Reference-contexts: In this spirit, for example, Obliq could be used to experiment in the design and implementation of agent/place paradigms [White 1994], using the basic techniques of section 5. Related Work Obliqs features and application domains overlap with programming languages such as ML <ref> [Milner, Tofte, Harper 1989; Reppy 1991] </ref> , Modula-3 [Nelson 1991], and Self [Ungar, Smith 1987] , with scripting languages such as Tcl [Ousterhout 1994], AppleScript [Apple 1993], VBA [Brockschmidt 1994; Mansfield 1994] , and Telescript [White 1994], and with distributed languages such as Orca [Bal, Kaashoek, Tanenbaum 1992], Fort [Fort 1994],
Reference: [Najork, Brown 1994] <author> M. Najork and M.H. Brown. </author> <title> A library for visualizing combinatorial structures. </title> <booktitle> Proc. IEEE Visualization94. </booktitle>
Reference-contexts: Status Obliq has been available at Digital SRC for about a year. In addition to incidental programming, it has been used extensively as a scripting language for algorithm animation [Brown 1994] and 3D graphics <ref> [Najork, Brown 1994] </ref> , and as the basis of a distributed-application builder (Visual Obliq [Bharat, Brown 1994]). The Obliq implementation provides access to many popular Modula-3 libraries [Horning, et al. 1993] and to an extensive user interface tool kit [Brown, Meehan 1994].
Reference: [Nelson 1991] <author> G. Nelson, ed. </author> <title> Systems programming with Modula-3. </title> <publisher> Prentice Hall. </publisher> <pages> Page 62 November 21, </pages> <note> 1994 2:38 PM </note>
Reference-contexts: Related Work Obliqs features and application domains overlap with programming languages such as ML [Milner, Tofte, Harper 1989; Reppy 1991] , Modula-3 <ref> [Nelson 1991] </ref>, and Self [Ungar, Smith 1987] , with scripting languages such as Tcl [Ousterhout 1994], AppleScript [Apple 1993], VBA [Brockschmidt 1994; Mansfield 1994] , and Telescript [White 1994], and with distributed languages such as Orca [Bal, Kaashoek, Tanenbaum 1992], Fort [Fort 1994], and Facile [Thomsen, et al. 1993].
Reference: [Ousterhout 1994] <author> J.K. Ousterhout, </author> <title> Tcl and the Tk toolkit. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Related Work Obliqs features and application domains overlap with programming languages such as ML [Milner, Tofte, Harper 1989; Reppy 1991] , Modula-3 [Nelson 1991], and Self [Ungar, Smith 1987] , with scripting languages such as Tcl <ref> [Ousterhout 1994] </ref>, AppleScript [Apple 1993], VBA [Brockschmidt 1994; Mansfield 1994] , and Telescript [White 1994], and with distributed languages such as Orca [Bal, Kaashoek, Tanenbaum 1992], Fort [Fort 1994], and Facile [Thomsen, et al. 1993].
Reference: [Reppy 1991] <author> Reppy. </author> <title> A higher-order concurrent language. </title> <booktitle> Proc. SIGPLAN91 Conference on Programming Language Design and Implementation. </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: In this spirit, for example, Obliq could be used to experiment in the design and implementation of agent/place paradigms [White 1994], using the basic techniques of section 5. Related Work Obliqs features and application domains overlap with programming languages such as ML <ref> [Milner, Tofte, Harper 1989; Reppy 1991] </ref> , Modula-3 [Nelson 1991], and Self [Ungar, Smith 1987] , with scripting languages such as Tcl [Ousterhout 1994], AppleScript [Apple 1993], VBA [Brockschmidt 1994; Mansfield 1994] , and Telescript [White 1994], and with distributed languages such as Orca [Bal, Kaashoek, Tanenbaum 1992], Fort [Fort 1994],
Reference: [Thomsen, et al. 1993] <author> B. Thomsen, L. Leth, S. Prasad, T.-M. Kuo, A. Kramer, F. Knabe, and A. Giacalone. </author> <title> Facile Antigua Release Programming Guide. </title> <institution> ECRC-93-20. European Computer-Industry Research Centre. </institution>
Reference-contexts: 1989; Reppy 1991] , Modula-3 [Nelson 1991], and Self [Ungar, Smith 1987] , with scripting languages such as Tcl [Ousterhout 1994], AppleScript [Apple 1993], VBA [Brockschmidt 1994; Mansfield 1994] , and Telescript [White 1994], and with distributed languages such as Orca [Bal, Kaashoek, Tanenbaum 1992], Fort [Fort 1994], and Facile <ref> [Thomsen, et al. 1993] </ref>. None of these languages, however, has the same mix of features as Obliq, particularly concerning the distribution aspects.
Reference: [Ungar, Smith 1987] <author> D. Ungar and R.B. Smith. </author> <title> Self: the power of simplicity. </title> <journal> Proc. OOPSLA87. ACM SIGPLAN Notices 2(12). </journal>
Reference-contexts: Related Work Obliqs features and application domains overlap with programming languages such as ML [Milner, Tofte, Harper 1989; Reppy 1991] , Modula-3 [Nelson 1991], and Self <ref> [Ungar, Smith 1987] </ref> , with scripting languages such as Tcl [Ousterhout 1994], AppleScript [Apple 1993], VBA [Brockschmidt 1994; Mansfield 1994] , and Telescript [White 1994], and with distributed languages such as Orca [Bal, Kaashoek, Tanenbaum 1992], Fort [Fort 1994], and Facile [Thomsen, et al. 1993].

References-found: 23

