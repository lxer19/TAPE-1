URL: http://www.cs.columbia.edu/~jakka/pdcs953.ps
Refering-URL: http://www.cs.columbia.edu/~jakka/pricing.html
Root-URL: http://www.cs.columbia.edu
Email: dfferg@watson.ibm.com  
Title: Black Holes, Sacrificial Lambs, and a Robust Approach to Transaction Routing  
Author: D. F. Ferguson, J. Sairamesh and R. A. Cieslak 
Address: P.O. Box 704, Yorktown Heights, NY 10598.  
Affiliation: IBM T.J. Watson Research Center  
Abstract: We consider a transaction processing system with multiple servers (e.g. computer systems) in which transactions may fail at the different servers independently (due to the heterogeneity), and only a subset of the total transactions are affected. Due to this nature, a system is faulty for some transaction classes and good for others. Because failed transactions have a lower processing time, algorithms such as JSQ (join shortest queue) will route a disproportionate number of transactions to the failure prone systems, causing an artificially high transaction failure rate. We call this the black hole phenomena. In this paper, we present two algorithms for transaction routing to detect and control the black hole problem. The first algorithm routes transactions to systems based on server queue lengths and perceived failure rate. It also ensures that error prone systems are not completely ignored; occasional transactions (called sacrificial lambs) probe systems to detect repair. Detailed simulation results are presented using realistic system and workload models. Our results show that the new algorithm reduces the number of transaction failures per class compared to the well known JSQ algorithm while still performing dynamic load balancing. The second algorithm is based on a non-linear optimization problem which is presented under simplified system and workload models. This algorithm studies the analytical basis of the black hole problem to provide insight and comparisons. The numerical results indicate that the second algorithm is better in controlling the failure rates than the first. Keywords: On-line transaction processing, transaction routing, fault tolerance, non-linear optimization. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P.P. Bhattacharya, L. Georgiadis, P. Tsoucas, and I. Viniotis. </author> <title> Adaptive lexicographic optimization in multi-class M/GI/1 queues. </title> <journal> Mathematics of Operations Research, </journal> <volume> 18(3) </volume> <pages> 705-740, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: For example, ATM submitted DEBIT/CREDIT transactions might be in one class while all teller submitted transactions might be in another. Partitioning the transaction workload into disjoint transaction classes and specifying class performance goals is extremely common in commercial on-line transaction processing OLTP <ref> [1, 3, 6, 5] </ref>. The systems where transactions are processed are heterogeneous in nature. They may have different processing speeds, memory and disk resources, and operating systems. The systems also have differing, dynamically varying processing loads. <p> The router monitors the transaction arrival rate per class; the arrival rate of class C i is L (i): Each transaction class has an administration defined response time goal G (i) <ref> [1, 3, 5, 6] </ref>. The database system administrator defines the rules for assigning arriving transactions to transaction classes, and the performance goals for each transaction class. The arriving transaction is passed to the router, which makes a routing decision and updates system state information. <p> We assume that the failure probability is estimated using the algorithms mentioned in the previous sections. Numerical Results: The three routing policies (JSQ, JSQAbend and JSQRatio) are compared under a heterogeneous system of 4 servers with failure probability of F (i) at server i (i 2 <ref> [1; 4] </ref>). For simplicity, we consider one traffic class. We study the average response time and average failure rate under various loading conditions and failure probabilities. The service rates (in job units per second) are: S (1)=10, S (2)=20, S (3)=30 and S (4)=40.
Reference: [2] <author> A. Ephremides, P. Varaiya, and J. Walrand. </author> <title> A simple dynamic routing problem. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 25 </volume> <pages> 690-693, </pages> <year> 1980. </year>
Reference-contexts: We will focus on the case of one router as shown in Figure 2. The techniques we discuss easily generalize to multiple routers. Previous routing algorithms have not dealt with these kinds of failures in the systems <ref> [2, 3, 8, 7, 9, 10] </ref>. Our algorithms are described in Section 2. Section 3 presents detailed simulation results of the performance of the algorithms. Section 4 describes a simplified analytical model of the system and a new algorithm based on this model.
Reference: [3] <author> D. Ferguson, L. Georgiadis, and C. Nikolaou. </author> <title> Satisfying response time goals in a transaction processing system. </title> <booktitle> In Proceedings of the Conference on Parallel and Distributed Information Systems, </booktitle> <pages> pages 138-147, </pages> <year> 1993. </year>
Reference-contexts: For example, ATM submitted DEBIT/CREDIT transactions might be in one class while all teller submitted transactions might be in another. Partitioning the transaction workload into disjoint transaction classes and specifying class performance goals is extremely common in commercial on-line transaction processing OLTP <ref> [1, 3, 6, 5] </ref>. The systems where transactions are processed are heterogeneous in nature. They may have different processing speeds, memory and disk resources, and operating systems. The systems also have differing, dynamically varying processing loads. <p> In such an environment, transactions of the same class will experience different response times (behavior) at different systems. Transaction routing is extremely important in multi-server OLTP systems, and has been shown to significantly decrease response time and improve throughput by avoiding load skew and imbalance. <ref> [3, 9, 10] </ref> Running systems often enter failure modes in which the system is operational, but certain transaction classes experience random failures. Figure 1 presents a simple example of such a situation. There are two systems, each of which runs a transaction manager. <p> We will focus on the case of one router as shown in Figure 2. The techniques we discuss easily generalize to multiple routers. Previous routing algorithms have not dealt with these kinds of failures in the systems <ref> [2, 3, 8, 7, 9, 10] </ref>. Our algorithms are described in Section 2. Section 3 presents detailed simulation results of the performance of the algorithms. Section 4 describes a simplified analytical model of the system and a new algorithm based on this model. <p> The router monitors the transaction arrival rate per class; the arrival rate of class C i is L (i): Each transaction class has an administration defined response time goal G (i) <ref> [1, 3, 5, 6] </ref>. The database system administrator defines the rules for assigning arriving transactions to transaction classes, and the performance goals for each transaction class. The arriving transaction is passed to the router, which makes a routing decision and updates system state information. <p> The classes differ in the amount of application level CPU time, database reads and database writes performed. The servers have the same CPU processing speeds. The database subsystem exhibits exponentially distributed I/O response times. Details of workload parameters and the simulation model can be found in a previous paper <ref> [3] </ref>. The simulation is run until 10; 000 transactions in each class complete (failed and successful). The statistics are gathered in time intervals which correspond to 200 transaction completions. During each interval, the number of ABENDs and average response time per transaction class is computed.
Reference: [4] <author> L. Kleinrock. </author> <title> Queueing Systems, Vol. 1: Theory. </title> <publisher> John Wiley and Sons Inc., </publisher> <year> 1975. </year>
Reference-contexts: L (i) is the C i arrival rate, and G (i) is the average response time goal. If, on average, N (i) L (i) fi G (i), then Little's Law <ref> [4] </ref> states that class C i 's goal will be met. In our algorithm, an arrival is never routed to a system with F (i; j) &gt; LF T if N (i) L (i) fi G (i): Little's Law is only valid in long-term steady state. <p> We assume that under such a policy, traffic splits at the rate L (j) to queue j. We also assume that this traffic process is Poisson to each queue. Therefore, each queue i behaves independently as a M=M=1 <ref> [4] </ref> queue. The average number in system for queue j from the M=M=1 model is given by W (j) = L (j)=(S (j) L (j)) and average delay is given by R (j) = 1=(S (j) L (j)). <p> We assume that the failure probability is estimated using the algorithms mentioned in the previous sections. Numerical Results: The three routing policies (JSQ, JSQAbend and JSQRatio) are compared under a heterogeneous system of 4 servers with failure probability of F (i) at server i (i 2 <ref> [1; 4] </ref>). For simplicity, we consider one traffic class. We study the average response time and average failure rate under various loading conditions and failure probabilities. The service rates (in job units per second) are: S (1)=10, S (2)=20, S (3)=30 and S (4)=40.
Reference: [5] <author> J. Noonan. </author> <title> Automated service level management and its supporting technologies. </title> <journal> Mainframe Journal, </journal> <month> October </month> <year> 1989. </year>
Reference-contexts: For example, ATM submitted DEBIT/CREDIT transactions might be in one class while all teller submitted transactions might be in another. Partitioning the transaction workload into disjoint transaction classes and specifying class performance goals is extremely common in commercial on-line transaction processing OLTP <ref> [1, 3, 6, 5] </ref>. The systems where transactions are processed are heterogeneous in nature. They may have different processing speeds, memory and disk resources, and operating systems. The systems also have differing, dynamically varying processing loads. <p> The router monitors the transaction arrival rate per class; the arrival rate of class C i is L (i): Each transaction class has an administration defined response time goal G (i) <ref> [1, 3, 5, 6] </ref>. The database system administrator defines the rules for assigning arriving transactions to transaction classes, and the performance goals for each transaction class. The arriving transaction is passed to the router, which makes a routing decision and updates system state information.
Reference: [6] <author> Cheryl Watson. SLOs, SLAs, SLM: </author> <title> The three phases of service levels. </title> <journal> Mainframe Journal, </journal> <month> July </month> <year> 1989. </year>
Reference-contexts: For example, ATM submitted DEBIT/CREDIT transactions might be in one class while all teller submitted transactions might be in another. Partitioning the transaction workload into disjoint transaction classes and specifying class performance goals is extremely common in commercial on-line transaction processing OLTP <ref> [1, 3, 6, 5] </ref>. The systems where transactions are processed are heterogeneous in nature. They may have different processing speeds, memory and disk resources, and operating systems. The systems also have differing, dynamically varying processing loads. <p> The router monitors the transaction arrival rate per class; the arrival rate of class C i is L (i): Each transaction class has an administration defined response time goal G (i) <ref> [1, 3, 5, 6] </ref>. The database system administrator defines the rules for assigning arriving transactions to transaction classes, and the performance goals for each transaction class. The arriving transaction is passed to the router, which makes a routing decision and updates system state information.
Reference: [7] <author> R. Weber. </author> <title> On the optimal assignment of customers to parallel servers. </title> <journal> Journal of Applied Probability, </journal> <volume> 15 </volume> <pages> 406-413, </pages> <year> 1978. </year>
Reference-contexts: We will focus on the case of one router as shown in Figure 2. The techniques we discuss easily generalize to multiple routers. Previous routing algorithms have not dealt with these kinds of failures in the systems <ref> [2, 3, 8, 7, 9, 10] </ref>. Our algorithms are described in Section 2. Section 3 presents detailed simulation results of the performance of the algorithms. Section 4 describes a simplified analytical model of the system and a new algorithm based on this model.
Reference: [8] <author> W. Winston. </author> <title> Optimality of the shortest line discipline. </title> <journal> Journal of Applied Probability, </journal> <volume> 14 </volume> <pages> 181-189, </pages> <year> 1977. </year>
Reference-contexts: We will focus on the case of one router as shown in Figure 2. The techniques we discuss easily generalize to multiple routers. Previous routing algorithms have not dealt with these kinds of failures in the systems <ref> [2, 3, 8, 7, 9, 10] </ref>. Our algorithms are described in Section 2. Section 3 presents detailed simulation results of the performance of the algorithms. Section 4 describes a simplified analytical model of the system and a new algorithm based on this model.
Reference: [9] <author> Phillip S. Yu, Simonetta Balsamo, and Yann-Hang Lee. </author> <title> Dynamic transaction routing in distributed database systems. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-14(9), </volume> <month> September </month> <year> 1988. </year>
Reference-contexts: In such an environment, transactions of the same class will experience different response times (behavior) at different systems. Transaction routing is extremely important in multi-server OLTP systems, and has been shown to significantly decrease response time and improve throughput by avoiding load skew and imbalance. <ref> [3, 9, 10] </ref> Running systems often enter failure modes in which the system is operational, but certain transaction classes experience random failures. Figure 1 presents a simple example of such a situation. There are two systems, each of which runs a transaction manager. <p> We will focus on the case of one router as shown in Figure 2. The techniques we discuss easily generalize to multiple routers. Previous routing algorithms have not dealt with these kinds of failures in the systems <ref> [2, 3, 8, 7, 9, 10] </ref>. Our algorithms are described in Section 2. Section 3 presents detailed simulation results of the performance of the algorithms. Section 4 describes a simplified analytical model of the system and a new algorithm based on this model.
Reference: [10] <author> Phillip S. Yu, Avraham Leff, and Yann-Hang Lee. </author> <title> On robust transaction routing and load sharing. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 16(3) </volume> <pages> 476-512, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: In such an environment, transactions of the same class will experience different response times (behavior) at different systems. Transaction routing is extremely important in multi-server OLTP systems, and has been shown to significantly decrease response time and improve throughput by avoiding load skew and imbalance. <ref> [3, 9, 10] </ref> Running systems often enter failure modes in which the system is operational, but certain transaction classes experience random failures. Figure 1 presents a simple example of such a situation. There are two systems, each of which runs a transaction manager. <p> We will focus on the case of one router as shown in Figure 2. The techniques we discuss easily generalize to multiple routers. Previous routing algorithms have not dealt with these kinds of failures in the systems <ref> [2, 3, 8, 7, 9, 10] </ref>. Our algorithms are described in Section 2. Section 3 presents detailed simulation results of the performance of the algorithms. Section 4 describes a simplified analytical model of the system and a new algorithm based on this model.
References-found: 10

