URL: http://acuity.cis.ohio-state.edu/techref/inputforms.ps
Refering-URL: http://acuity.cis.ohio-state.edu/techref/techref.html
Root-URL: 
Email: fsinha,bowers,mamrakg@cis.ohio-state.edu  
Title: Accessing a Medical Database using WWW-Based User Interfaces  
Author: Saurabh Sinha, S. Kirk Bowers, and Sandra A. Mamrak 
Note: 1 This work was supported in part by Grant No. 5 U01 CA50910-08 from the National Cancer Institute.  
Date: March 16, 1998  
Address: 2015 Neil Avenue Mall  Columbus, OH 43210  
Affiliation: Department of Computer and Information Science  The Ohio State University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Robert G. Fichman and Chris F. Kemerer. </author> <title> Object technology and reuse: Lessons from early adopters. </title> <booktitle> Computer, </booktitle> <pages> pages 47-58, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: Considerably more advantage can be realized if the patterns of interaction among the components are similar or identical across different applications in the project. Many nontechnical factors can mitigate against success. An emerging consensus in the reuse community <ref> [1] </ref> is that the primary nontechnical reuse barriers stem from the organization and management of the software development team and include: * Poor investment in organizational learning. * A lack of attention or effort to develop a complete software architecture, including not only tangible products (languages, databases, class libraries, etc.), but
Reference: [2] <author> Sandra A. Mamrak, John Boyd, and Ivan Ordo nez. </author> <title> Building an information system for collaborative researchers. </title> <journal> Software Practice and Experience, </journal> <volume> 27(3) </volume> <pages> 253-263, </pages> <month> March </month> <year> 1997. </year>
Reference-contexts: possible, allowing close to total code reuse in the generation of new applications in the project. 2 Background We have been serving the data storage and retrieval needs of a national group of brain-tumor researchers for many years by way of an information system designed for this group of collaborators <ref> [2, 3] </ref>. The Neuro-Oncology Information System (NOIS) follows a client-server architecture. The server is implemented as a centralized database and the clients run on heterogeneous platforms scattered throughout the United States. The NOIS database server is implemented using Oracle relational database software [4].
Reference: [3] <institution> Department of Computer and Information Science, The Ohio State University, Columbus, Ohio. </institution> <note> Neuro-Oncology Information System Technical Reference, June 1996. Also found at http://www.acuity.cis.ohio-state.edu. </note>
Reference-contexts: possible, allowing close to total code reuse in the generation of new applications in the project. 2 Background We have been serving the data storage and retrieval needs of a national group of brain-tumor researchers for many years by way of an information system designed for this group of collaborators <ref> [2, 3] </ref>. The Neuro-Oncology Information System (NOIS) follows a client-server architecture. The server is implemented as a centralized database and the clients run on heterogeneous platforms scattered throughout the United States. The NOIS database server is implemented using Oracle relational database software [4].
Reference: [4] <author> Oracle Corporation, </author> <title> Redwood City, CA. ORACLE7 Server Application Developer's Guide, </title> <month> December </month> <year> 1992. </year> <note> PN 6695-70-1292. </note>
Reference-contexts: The Neuro-Oncology Information System (NOIS) follows a client-server architecture. The server is implemented as a centralized database and the clients run on heterogeneous platforms scattered throughout the United States. The NOIS database server is implemented using Oracle relational database software <ref> [4] </ref>. Originally, the client software also was based on Oracle software: the Oracle Data Browser [5] for query capability and Oracle Forms [6, 7] for input capability. <p> There are also methods to change user password, and fetch sequence numbers from the database. A sequence is a database object that generates unique, monotonically increasing integers <ref> [4] </ref>. The NOIS database uses such sequences to generate primary key values for relations.
Reference: [5] <institution> Oracle Corporation, </institution> <address> Redwood City, CA. </address> <note> Oracle Data Browser User's Guide, October 1992. (Version 1.0) PN 6480-10-1092. </note>
Reference-contexts: The server is implemented as a centralized database and the clients run on heterogeneous platforms scattered throughout the United States. The NOIS database server is implemented using Oracle relational database software [4]. Originally, the client software also was based on Oracle software: the Oracle Data Browser <ref> [5] </ref> for query capability and Oracle Forms [6, 7] for input capability. We have now migrated our client software to WWW-based Java code. 2.1 The Neuro-Oncology Information System The NOIS is a collaborative project established at the Ohio State University with the goal of supporting cooperative research in brain tumors.
Reference: [6] <author> Oracle Corporation, </author> <title> Redwood City, CA. Oracle Forms Reference Manual Volume 1, </title> <month> July </month> <year> 1993. </year> <note> (Version 4.0) PN A11988-1. </note>
Reference-contexts: The NOIS database server is implemented using Oracle relational database software [4]. Originally, the client software also was based on Oracle software: the Oracle Data Browser [5] for query capability and Oracle Forms <ref> [6, 7] </ref> for input capability. We have now migrated our client software to WWW-based Java code. 2.1 The Neuro-Oncology Information System The NOIS is a collaborative project established at the Ohio State University with the goal of supporting cooperative research in brain tumors.
Reference: [7] <author> Oracle Corporation, </author> <title> Redwood City, CA. Oracle Forms Reference Manual Volume 2, </title> <month> July </month> <year> 1993. </year> <note> (Version 4.0) PN A11989-1. </note>
Reference-contexts: The NOIS database server is implemented using Oracle relational database software [4]. Originally, the client software also was based on Oracle software: the Oracle Data Browser [5] for query capability and Oracle Forms <ref> [6, 7] </ref> for input capability. We have now migrated our client software to WWW-based Java code. 2.1 The Neuro-Oncology Information System The NOIS is a collaborative project established at the Ohio State University with the goal of supporting cooperative research in brain tumors.
Reference: [8] <institution> Oracle Corporation, </institution> <address> Redwood City, CA. </address> <note> SQL*Net Administrator's Guide, July 1993. (Version 2.0) PN A11325-1. </note>
Reference-contexts: The Oracle Forms Runtime has to be installed on each client machine that wishes to access the database through the user interfaces. The connection between the Forms interface and the database is handled transparently through Oracle's proprietary communication protocol called SQL*Net <ref> [8] </ref>. Versions 1 and 2 of the NOIS input forms were implemented in this manner.
Reference: [9] <author> David H. Friedel Jr. and Anthony Potts. </author> <title> Java Programming Language Handbook. </title> <publisher> Coriolis Group Books, </publisher> <year> 1996. </year>
Reference-contexts: Based on our experience with client-side software installation and maintenance, we also desired a solution that allowed for developing and maintaining only one, machine-independent version of each form, that did not require client-side installation, and that could penetrate firewalls. The Java paradigm <ref> [9, 10] </ref> presented to us a truly compelling, revolutionary solution, having all of the desired characteristics for which we were looking. Java is object-oriented, so could help us manage complexity both in terms of high-level design methods and its reuse capability.
Reference: [10] <author> Jamie Jaworski. </author> <title> Java Developer's Guide. Sams Net, </title> <year> 1996. </year>
Reference-contexts: Based on our experience with client-side software installation and maintenance, we also desired a solution that allowed for developing and maintaining only one, machine-independent version of each form, that did not require client-side installation, and that could penetrate firewalls. The Java paradigm <ref> [9, 10] </ref> presented to us a truly compelling, revolutionary solution, having all of the desired characteristics for which we were looking. Java is object-oriented, so could help us manage complexity both in terms of high-level design methods and its reuse capability.
Reference: [11] <author> Brent B. Welch. </author> <title> Practical Programming in Tcl and Tk. </title> <publisher> Prentice Hall PTR, </publisher> <address> New Jersy, </address> <year> 1995. </year> <month> 28 </month>
Reference-contexts: There is no remote installation requirement (aside from having a WWW browser) and Java applets penetrate most firewalls. We are aware of no other approach to, or toolkit for, user interface design that meets all of our desired criteria. For example, Tk/TCL <ref> [11] </ref> is a scripting language, and not able to easily handle the level of complexity of our forms or to easily support reuse. The X Window System/Motif [12] is tied to Unix platforms only. The Application Environment Specification from the Open Software Foundation [13] must be installed on the client.
Reference: [12] <author> Valerie Quericia and Tim O'Reilly. </author> <title> X Window System User's Guide. </title> <publisher> O'Reilly & Associates, Inc, </publisher> <year> 1991. </year>
Reference-contexts: For example, Tk/TCL [11] is a scripting language, and not able to easily handle the level of complexity of our forms or to easily support reuse. The X Window System/Motif <ref> [12] </ref> is tied to Unix platforms only. The Application Environment Specification from the Open Software Foundation [13] must be installed on the client.
Reference: [13] <author> Open Software Foundation. </author> <title> Application Environment Specification (AES) User Environment Volume. Open Software Foundation, </title> <year> 1990. </year>
Reference-contexts: For example, Tk/TCL [11] is a scripting language, and not able to easily handle the level of complexity of our forms or to easily support reuse. The X Window System/Motif [12] is tied to Unix platforms only. The Application Environment Specification from the Open Software Foundation <ref> [13] </ref> must be installed on the client. Commercial database forms systems typically will not penetrate firewalls (e.g., this is true for Oracle Forms). 2.4 Factors Affecting Reuse in the NOIS Project Ours is relatively small development project, set in an academic Computer Science department.
Reference: [14] <author> Mohamed E. Fayad and Douglas C. Schmidt. </author> <title> Object-oriented application frameworks. </title> <journal> Communications of the ACM, </journal> <volume> 40(10) </volume> <pages> 32-38, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: Common Patterns. At this point in the project we advanced from using a simple object-oriented approach to one in which our goal was to create an object-oriented framework <ref> [14, 15] </ref>. Software developers have a variety of definitions and conceptualizations of frameworks. The description that is closest to our use of the term is that a framework is a reusable, not fully-specified application that can be specialized to produce custom applications. <p> They also discovered a need for one new listener. Such periodic maintenace of frameworks is to be expected because of their generic nature; frameworks can only be tested and debugged in the context of specific applications <ref> [14] </ref>. Therefore, a new application might suggest a modification or an adaptation of the framework that was not apparent before. Such modifications, however, have been minimal for us. Another commonly cited problem with frameworks is the lack of suitable documentation for new users of the framework [15].
Reference: [15] <author> Ralph E. Johnson. </author> <title> Frameworks = (components + patterns). </title> <journal> Communications of the ACM, </journal> <volume> 40(10) </volume> <pages> 39-42, </pages> <month> October </month> <year> 1997. </year>
Reference-contexts: Common Patterns. At this point in the project we advanced from using a simple object-oriented approach to one in which our goal was to create an object-oriented framework <ref> [14, 15] </ref>. Software developers have a variety of definitions and conceptualizations of frameworks. The description that is closest to our use of the term is that a framework is a reusable, not fully-specified application that can be specialized to produce custom applications. <p> Therefore, a new application might suggest a modification or an adaptation of the framework that was not apparent before. Such modifications, however, have been minimal for us. Another commonly cited problem with frameworks is the lack of suitable documentation for new users of the framework <ref> [15] </ref>.
Reference: [16] <author> Shishir Gundavaram. </author> <title> CGI Programming on the World Wide Web. </title> <publisher> O'Reilly & Associates, Inc, </publisher> <year> 1996. </year>
Reference-contexts: These applets are comprised of a `front-end' component and a `back-end' component. The `front-end' manages the interface with which users interact; the `back-end' handles all database accesses. The `back-end' connects to Oracle WebServer with appropriate parameters. The server in turn invokes a CGI <ref> [16] </ref> program that posts a user request to the database. The results from the database are interpreted by the `back-end' and passed on to the `front-end'. The `front-end' includes graphical user interfaces for the NOIS Browser and the Input Forms, through which users interact with the system. <p> A fourth option, the one we chose, was to implement the connection mechanism as a series of server processes: an Oracle WebServer to establish a firewall-penetrable URL connection from the client side, paired with a Perl CGI <ref> [16] </ref> program to handle decoding the request and forwarding it on to the database server. The Java components of the `back-end' are grouped under nois.ndbc package, and comprise of two classes: NdbcConn and NdbcTable. These classes define the interface to the `back-end', and execute on the client machines.
Reference: [17] <author> Grady Booch. </author> <title> Object-Oriented Analysis and Design. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1994. </year>
Reference-contexts: Each diagram shows the inheritance and containment relationships among classes. A containment relationship is qualified as either containment-by-value, or containment-by-reference, as suggested by Booch <ref> [17] </ref>. Each of these relationships is shown by a different arrow. The cardinality of a containment-by-value relationship is shown next to the arrow.
Reference: [18] <author> E. F. Codd. </author> <title> A relational model for large shared data banks. </title> <journal> Communications of the ACM, </journal> <volume> 13(6) </volume> <pages> 377-387, </pages> <month> June </month> <year> 1970. </year>
Reference-contexts: With this background, we now look at the specifics of each class instantiated in FormWindow. 4.2 Database Classes The database-related classes provide a useful abstraction for NOIS database objects like tables and views, that are referenced by the Input Forms. The NOIS database schema follows the relational data model <ref> [18, 19] </ref>. It contains a number of relations or base tables that hold records of data. The users of NOIS can update data in most of these tables. A few of them, however, serve as lookup tables a lookup table lists valid values for a field in another table.
Reference: [19] <author> Peter Pin-Shan Chen. </author> <title> The Entity-Relationship Model | Toward a Unified View of Data. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 1(1) </volume> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: With this background, we now look at the specifics of each class instantiated in FormWindow. 4.2 Database Classes The database-related classes provide a useful abstraction for NOIS database objects like tables and views, that are referenced by the Input Forms. The NOIS database schema follows the relational data model <ref> [18, 19] </ref>. It contains a number of relations or base tables that hold records of data. The users of NOIS can update data in most of these tables. A few of them, however, serve as lookup tables a lookup table lists valid values for a field in another table.
Reference: [20] <author> Fernando Brita e Abreu and Rogerio Carapuca. </author> <title> Candidate metrics for object-oriented software within a taxonomy framework. </title> <journal> Journal of Systems Software, </journal> <volume> 26 </volume> <pages> 87-96, </pages> <year> 1994. </year>
Reference-contexts: object-oriented metrics that would allow us to quantify our experience and to relate it to others in a manner that might be as convincing to them as it was evident to us. 4 See http://acuity.cis.ohio-state.edu:8888/using framework.html 25 7.1.1 Metrics for Reuse For reuse, we found several suggestions for possible measures <ref> [20] </ref>: * Verbatim reuse (absolute): the number of times a class is reused as is. * Leveraged reuse (absolute): the number of times a class is reused with adaptation. * Verbatim reuse (relative): the percentage of reused, as is, classes. * Leveraged reuse (relative): the percentage of reused, with adaptation, classes.
Reference: [21] <author> Shyam R. Chidamber and Chris F. Kemerer. </author> <title> A metrics suite for object oriented design. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(6) </volume> <pages> 476-493, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: One important property of a metric, noncoarseness, is that not every class can have the same value for a metric, otherwise it has lost its value as a measurement <ref> [21] </ref>. The metrics defined above are not noncoarse with respect to our framework. Each class in the framework is reused, as is, in every application. <p> Some of the metrics proposed for evaluating object-oriented design include <ref> [21] </ref>: * Weighted methods per class. * Depth of inheritance tree. * Number of children. * Coupling between object classes (typically interpreted as an object in one class calling methods defined in an object in another class). * Response for a class (set of methods that can potentially be executed in
Reference: [22] <author> Victor R. Basili, Lionel C. Briand, and Walcelio L. Melo. </author> <title> A validation of object-oriented design metrics as quality indicators. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(10) </volume> <pages> 751-761, </pages> <month> October </month> <year> 1996. </year> <month> 29 </month>
Reference-contexts: Basili, Briand and Melo investigated these metrics as quality indicators by generating a set of hypotheses relating these metrics with fault-proneness <ref> [22] </ref>. In general, they hypothesize that the simpler the design, the less fault-prone and so the higher the quality.
References-found: 22

