URL: http://www.cc.gatech.edu/systems/papers/PlaleSRDS.ps
Refering-URL: http://www.cs.gatech.edu/people/home/beth/
Root-URL: 
Email: fbeth,schwang@cc.gatech.edu  
Title: Dynamic Optimization in Hazard Detection for Continuous Safety-Critical Systems  
Author: Beth Plale Karsten Schwan 
Keyword: software safety, safety-critical systems, on-line monitoring, distributed systems, query optimization  
Note: Submitted to Symposium on Reliable Distributed Systems, SRDS'98  
Address: Atlanta, Georgia 30332  
Affiliation: College of Computing Georgia Institute of Technology  
Abstract: Safety critical systems are pervasive in modern society. Financial systems, transportation systems, medical record retrieval systems, and air traffic control systems all could potentially threaten economic, property, or personal safety. However, this class of safety critical system is not amenable to the existing approaches to achieving safe software. Hence a new approach to software safety is needed; one that can accommodate distributed systems, that may contain COTS components, and that may consist of components not all of which were designed to be used in safety-critical settings. In response to this need, we have developed a software hazard detection tool that we argue increases the safety level of continuous safety critical systems, in part by employing dynamic behavior to enhance the flexibility of hazard detection and to expand the potential for optimizations of the detection process. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Afjeh, P. Homer, H. Lewandowski, J. Reed, and R. Schlichting. </author> <title> Development of an intelligent monitoring and control system for a heterogeneous numerical propulsion system simulation. </title> <booktitle> In Proc. 28th Annual Simulation Symposium, </booktitle> <address> Phoenix, AZ, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: can abstract away details about components (e.g., cnets, applicaition components) until the component types have been reduced to just a handful, then it is possible to express the components and their relationships as an abstract syntax tree upon which cost-based optimizations can be applied. 6 Related Work Afjeh et. al <ref> [1] </ref> propose a monitoring and control system for observing the progress of a parallel propulsion system simulation and for steering the simulation. Monitoring data is obtained from the simulation via one or more watchdog processes then forwarded to the analysis component.
Reference: [2] <author> Tucker Balch and Ronald Arkin. </author> <title> Communication in reactive multiagent robot systems. </title> <booktitle> Autonomous Robots, </booktitle> <volume> 1(1) </volume> <pages> 27-52, </pages> <year> 1994. </year>
Reference-contexts: Related research appears in Section 6 and conclusions and future work in Section 7. 2 Hazard Detection for a Robotics Application The sample application used in our work is a multiagent reactive robotic system simulation developed by Balch and Arkin <ref> [2] </ref> in their work on the Autonomous Robot Architecture (AuRA) at the Georgia Institute of Technology. The authors tested their strategy through an iteration of simulation and instantiation on real systems.
Reference: [3] <author> Kenneth Birman. </author> <title> Keynote speech. </title> <booktitle> 6th IEEE Int'l Symposium on High Performance Distributed Computing (HPDC-6), </booktitle> <year> 1997. </year>
Reference-contexts: For example, our definition of safety-critical systems has expanded to include economic damage. To illustrate, in a recent keynote speech, Kenneth Birman observed that a growing number of software components that were never intended to be safety-critical are today appearing in safety critical settings <ref> [3] </ref>. For example, an emergency room physician may access a remotely located patient record for information essential to an accurate diagnosis. A delay in responding to the request could potentially endanger the patient.
Reference: [4] <author> Monica Brockmeyer, Farnam Jahanian, Connie Heitmeyer, and Bruce Labaw. </author> <title> An approach to monitoring and assertion-checking of real time specifications in Modechart. </title> <booktitle> In Workshop on Parallel and Distributed Real-Time Systems, </booktitle> <month> April </month> <year> 1996. </year>
Reference-contexts: First, while Cnet detection and analysis is easily distributed, this is not possible with an expert system-based approach. Second, rules in expert systems are typically designed to capture domain-specific knowledge which is acquired through 15 significant setup times. Brockmeyer and Jahanian <ref> [4] </ref> incorporate a monitoring and assertion checking tool into the Modechart Toolset (MT). The monitoring and assertion checking is performed on trace data from symbolic executions of real-time specifications written in Modechart, the same language used for specification of assertions.
Reference: [5] <author> Greg Eisenhauer, Beth (Plale) Schroeder, and Karsten Schwan. DataExchange: </author> <title> High performance communication in distributed laboratories. </title> <booktitle> In Proceedings Ninth IASTED Int'l Conference on Parallel and Distributed Computing Systems, </booktitle> <month> October </month> <year> 1997. </year>
Reference-contexts: Falcon, running as one or more separate threads in the application, communicates with the application via shared buffers. Falcon extracts event data from the buffer and sends it to the analysis tool via DataExchange <ref> [5] </ref>, a communication and binary I/O infrastructure offering a publish-subscribe model and fast heterogeneous data transfer, and services such as dynamic connection of clients, information filtering, and control flow. 5 The analysis tool interacts with the infrastructure by registering its interest in a set of event types. <p> The placement daemon registers new Cnets and 14 invoke the reoptimizer as needed. The component registrar is a server that maintains input/output event information about each active entity in the environment; including both application and Cnet components. The precedence for such a server exists in the DataExchange/PBIO <ref> [5] </ref> format server. The format server is needed when a non-connected communication protocol such as ATM or UDP is used. PBIO always sends meta information describing a message format prior to any messages of that type being sent.
Reference: [6] <author> Ramez Elmasri and Shamkant B. Navathe. </author> <title> Fundamentals of Database Systems. </title> <publisher> Addison-Wesley, </publisher> <address> 2 edition, </address> <year> 1994. </year>
Reference-contexts: Cost functions are commonly used in relational databases during query plan selection to estimate the I/O cost of the query. I/O costs include access cost to secondary storage, storage cost, cost of storing intermediate files <ref> [6] </ref>. For Cnet's application, we do not care about I/O costs and instead formulate cost functions that are used during query reoptimization. The set of cost factors and cost functions we employ are shown in Figures 4 and 5 respectively. We illustrate its use with the following example.
Reference: [7] <author> Weiming Gu, Greg Eisenhauer, Eileen Kraemer, Karsten Schwan, John Stasko, Jeffrey Vetter, and Nirupama Mallavarupu. </author> <title> Falcon: On-line monitoring and steering of large-scale parallel programs. </title> <booktitle> In Proceedings of FRONTIERS'95, </booktitle> <month> February </month> <year> 1995. </year>
Reference-contexts: Communication between the analysis tool, user interface, and application is achieved using a communication infrastructure. Analysis tool execution is handled by a dispatcher. Cnet connects to the application via a communication and monitoring infrastructure. Monitoring is accomplished through Falcon <ref> [7] </ref>, a tool providing low perturbation and low latency monitoring support. Falcon, running as one or more separate threads in the application, communicates with the application via shared buffers.
Reference: [8] <author> Jeffrey K. Hollingsworth, Barton P. Miller, Marcelo J. R. Goncalves, Oscar Naim, Zhichen Xu, and Ling Zheng. </author> <title> MDL: A language and compiler for dynamic program instrumentation. </title> <booktitle> In Proceedings International Conference on Parallel Architectures and Compilation Techniques, </booktitle> <month> November </month> <year> 1997. </year>
Reference-contexts: But other, more dynamic instrumentation techniques such as Paradyn's binary editing <ref> [8] </ref> could be used as well. Second, is it not a limitation that the temporal query language does not support the specification of timing constraint violations such as occur in real-time sytems [15]. To this we answer that there may be more appropriate hazard detection approaches for hard-deadline real-time systems.
Reference: [9] <author> Carol Kilpatrick, Karsten Schwan, and David Ogle. </author> <title> Using languages for capture, analysis and display of performance information for parallel and distributed applications. </title> <booktitle> In Proceedings 1990 Int'l Conference on Programming Languages, </booktitle> <year> 1990. </year>
Reference-contexts: The program states and activities observed by the monitor are specified by a high-level query language called TQuel (considerably refined in [22]). Based, in part, on the relational approach originated by Snodgrass, Ogle et al. explore application-dependent and on-line monitoring of parallel and distributed applications [16]. Kilpatrick and Schwan <ref> [9] </ref> further refine the language-based approach for specifying application-dependent monitoring requests. Kilpatrick also explores the idea of integrating all components of a parallel programming environment using the uniform Entity-Relationship information model. As evidenced by earlier work, the relational model is an appropriate formalism for processing monitoring information.
Reference: [10] <author> Herman Kopetz and Paulo Verissimo. </author> <title> Real-time and dependability concepts. </title> <editor> In Sape Mullen-der, editor, </editor> <booktitle> Distributed Systems. </booktitle> <publisher> Addison-Wesley, </publisher> <address> 2 edition, </address> <year> 1993. </year> <month> 17 </month>
Reference-contexts: Moreover, unlike real-time systems, continuous safety-critical systems are time dependent but only some of their components may have real-time constraints. The remainder of the system does not have the strict guarantees required of a real-time system, and its effort is considered to be best-effort as opposed to guaranteed-response <ref> [10] </ref>. Finally, unlike implanted devices, which are inaccessible once installed (e.g., defibrillators), continuous safety-critical systems are accessible. This emerging class of safety critical systems is less amenable to existing approaches to achieving safe software (i.e., formal methods and guaranteed deadlines) than are traditional safety-critical applications.
Reference: [11] <author> Joh Kuhl, Douglas Evans, Yiannis Papelis, Richard Romano, and Ginger Watson. </author> <title> The Iowa Driving Simulator: An immersive research environment. </title> <journal> Computer, </journal> <volume> 28(7) </volume> <pages> 35-41, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Future work includes expanding cost data and cost function heuristics to better utilize the dynamic flexibility built into the implementation, and the application of the analysis tool to a virtual environment. For instance, in the Iowa Driving Simulator (IDS) <ref> [11] </ref> a fully immersive ground-vehicle simulator can place a driver in a highly realistic driving environment. Hazard conditions in such an environment are the same as in real-life but without the attendant risk of harm or loss.
Reference: [12] <author> Nancy G. Leveson and Timothy J. Shimeall. </author> <title> Safety assertions for process-control systems. </title> <booktitle> In Proceedings 13th Int'l Symposium on Fault Tolerant Computing, </booktitle> <pages> pages 236-240, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: In addition, prior approaches to monitoring were static, that is, they required that all constraints be known at compile time. Given the exploratory and `what-if' potential of safety constraints, application of the relational model to hazard detection must be accompanied by adaption techniques. Leveson's work in the early 1980's <ref> [12] </ref> is early recognition of the need for run-time checking for hazard prevention. Her synchronous approach, though, requires embedding all constraints in the application.
Reference: [13] <author> Ling Liu, Calton Pu, Roger Barga, and Tong Zhou. </author> <title> Differential evaluation of continual queries. </title> <type> Technical Report TR95-17, </type> <institution> Department of Computer Science, University of Alberta, </institution> <year> 1996. </year>
Reference-contexts: This approach, although similar to ours in its support of temporal and complex specifications, cannot be directly applied to on-line hazard detection. In Liu and Pu's work on continual queries <ref> [13] </ref>, a client specifies a continual query over information stored in a distributed environment such as the Internet. The objective is to compute the query and return the entire resulting relation upon the first triggering only. On subsequent triggerings, only change information is returned.
Reference: [14] <author> John McLean and Constance Heitmeyer. </author> <title> High assurance computer systems: A research agenda, safety track report. </title> <booktitle> In America in the Age of Information, National Science and Technology Council Committee on Information and Communications Forum, </booktitle> <year> 1995. </year>
Reference-contexts: Electronic, telephone, and telecommunications networks are also safety critical systems if one considers that loss of service removes the capability to summon emergency services. Similarly, loss of long-distance service can cause serious disruption of business activities and an ensuing loss of revenue <ref> [14] </ref>.
Reference: [15] <author> Aloysius K. Mok and Guangtian Liu. </author> <title> Early detection of timing constraint violation at run-time. </title> <booktitle> In Proceedings of the 18th Annual Real-time Systems Symposium. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1997. </year>
Reference-contexts: But other, more dynamic instrumentation techniques such as Paradyn's binary editing [8] could be used as well. Second, is it not a limitation that the temporal query language does not support the specification of timing constraint violations such as occur in real-time sytems <ref> [15] </ref>. To this we answer that there may be more appropriate hazard detection approaches for hard-deadline real-time systems.
Reference: [16] <author> David Ogle, Karsten Schwan, and Richard Snodgrass. </author> <title> Application-dependent dynamic monitoring of distributed and parallel systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(7) </volume> <pages> 762-778, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: The program states and activities observed by the monitor are specified by a high-level query language called TQuel (considerably refined in [22]). Based, in part, on the relational approach originated by Snodgrass, Ogle et al. explore application-dependent and on-line monitoring of parallel and distributed applications <ref> [16] </ref>. Kilpatrick and Schwan [9] further refine the language-based approach for specifying application-dependent monitoring requests. Kilpatrick also explores the idea of integrating all components of a parallel programming environment using the uniform Entity-Relationship information model.
Reference: [17] <author> Patrick O'Neil. </author> <title> Database: Principles, Programming, Performance. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: Storing the parse tree obviously eliminates the need for re-parsing the original query. The dispatcher responds to requests from the optimizer to alter a node. 3.3.1 Cost Functions A cost function of a predicate P, CF (P) is the fraction of events resulting from the predicate restriction P <ref> [17] </ref>. Estimating cost functions is done under a number of assumptions, including uniform distribution of individual attribute values and independent joint distributions of values from any two unallied attributes. Cost functions are commonly used in relational databases during query plan selection to estimate the I/O cost of the query.
Reference: [18] <author> Beth Plale and Karsten Schwan. Cnet: </author> <title> language-based approach to on-line constraint analysis. </title> <type> Technical Report GIT-CC-97-36, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <year> 1997. </year> <note> http://www.cc.gatech.edu/tech reports. </note>
Reference-contexts: A more complete description of the robotics application and language is given in <ref> [18] </ref>. 3 Adaptive Hazard Detection A significant contribution of this paper is the adaptive capability inherent in the approach that makes it uniquely responsive to the evolving nature of continuous applications. <p> Dynamic adaption, which is the analysis tool's response to the evolving nature of the application, is facilitated by the dispatcher's ability to integrate user and algorithmic generated commands into its event handling process. Fairness is insured by a rule processing algorithm largely based on depth first search <ref> [18] </ref>. The dispatcher's primary function is in controlling Cnet execution. As such, it is responsible for: * maintaining a record of the current set of active nodes, * linking nodes, and * maintaining information about the relationship between nodes. <p> The user manages the constraint set by creating rules in the constraint language. As described in <ref> [18] </ref>, the language provides five rules: the create rule, alter rule, drop rule, activate rule, and deactivate rule, all of which are available to the user for managing the active constraint set.
Reference: [19] <author> Anuj Puri and Pravin Varaiya. </author> <title> Driving safely in smart cars. </title> <month> June </month> <year> 1995. </year>
Reference-contexts: A delay in responding to the request could potentially endanger the patient. Examples in addition to the medical record retrieval system includes transportation systems, financial systems, and electronic, telephone and telecommunications networks. The Automated Vehicle/Highway System (AVHS) <ref> [19] </ref> is a transportation system under development at UC Berkeley in which car-like vehicles travel in strictly controlled platoons so as to be able to minimize the distance between each vehicle.
Reference: [20] <author> Beth (Plale) Schroeder, Sudhir Aggarwal, and Karsten Schwan. </author> <title> Software approach to hazard detection using on-line analysis of safety constraints. </title> <booktitle> In Proceedings 16th Symposium on Reliable and Distributed Systems, </booktitle> <pages> pages 80-87. </pages> <publisher> IEEE Computer Society, </publisher> <month> October </month> <year> 1997. </year>
Reference-contexts: User controlled constraint management is provided through an external user interface task that forwards user-directed commands to the analysis tool. Through the interface the user is able to add, remove, alter, activate, and deactivate constraints. Before describing the adaptive capabilities, we briefly review the run-time environment and event-handling mechanisms <ref> [20] </ref>. 3.1 Run-time Environment Hazard detection is implemented in terms of nodes, queues between nodes, and a dispatcher controlling overall execution. Integral to the approach is a language and compiler for writing constraint specifications and optimizing the resulting parse trees.
Reference: [21] <author> Richard Snodgrass. </author> <title> A relational approach to monitoring complex systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(2) </volume> <pages> 157-196, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Fast response requires query reevaluation upon every event data arrival. Because constraints are infrequently violated, there often is no returned relation, or if there is, it is a single event. The objectives of the two approaches are entirely different. Snodgrass <ref> [21] </ref> develops an information based approach to modeling program behavior that treats monitoring information (runtime data, states of processes, states of processors, messages, etc.) as relations. The program states and activities observed by the monitor are specified by a high-level query language called TQuel (considerably refined in [22]).
Reference: [22] <author> Richard T. Snodgrass, </author> <title> editor. The TSQL2 Temporal Query Language. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: Snodgrass [21] develops an information based approach to modeling program behavior that treats monitoring information (runtime data, states of processes, states of processors, messages, etc.) as relations. The program states and activities observed by the monitor are specified by a high-level query language called TQuel (considerably refined in <ref> [22] </ref>). Based, in part, on the relational approach originated by Snodgrass, Ogle et al. explore application-dependent and on-line monitoring of parallel and distributed applications [16]. Kilpatrick and Schwan [9] further refine the language-based approach for specifying application-dependent monitoring requests.
Reference: [23] <author> Richard T. Snodgrass, Michael H. Bohlen, Christian S. Jensen, and Andreas Steiner. </author> <title> Adding valid time to SQL/temporal. </title> <editor> In ISO/IEC JTC1/SC21/WG3 DBL MAD-146r2, </editor> <month> November </month> <year> 1996. </year>
Reference-contexts: The language incorporates features from the active database rule language Starburst [24] for its meta statements, and from the relational temporal query language ATSQL2 <ref> [23] </ref> for specifying constraint conditions. A simple constraint for the robotics example appears in Figure 2.
Reference: [24] <author> Jennifer Widom and Stefano Ceri, </author> <title> editors. Active Database Systems. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1996. </year> <month> 18 </month>
Reference-contexts: The language incorporates features from the active database rule language Starburst <ref> [24] </ref> for its meta statements, and from the relational temporal query language ATSQL2 [23] for specifying constraint conditions. A simple constraint for the robotics example appears in Figure 2.
References-found: 24

