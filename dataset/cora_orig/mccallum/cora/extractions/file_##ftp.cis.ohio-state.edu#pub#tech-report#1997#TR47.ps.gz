URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1997/TR47.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: fsinghal,yangyg@cis.ohio-state.edu  
Title: Fast Join Execution Using Summary Information in Large Databases  
Author: Mukesh Singhal, Yuping Yang 
Date: September 22, 1997  
Address: Columbus, OH 43210  
Affiliation: Department of Computer and Information Science, The Ohio State University  
Abstract: It is well known that a query execution in relational databases is not fast and join execution is generally the most expensive operation in query executions. All three major join methods, namely, nested loops, sorting, and hashing have been perfected to an extent that any further improvement in these methods will enhance the performance of join execution only marginally. Even with the advent of parallel database, the enhancement in the performance of join execution is limited: join execution is often I/O bounded and an increase in the number of processors can only have a marginal effect after a certain point. The use of join index to speed up join execution is also limited due to its huge storage requirement. In this paper, we propose to use summary information to expedite query execution, especially join execution, in large databases. Summary information is stored in a summary database which forms the upper layer of a multi-layer database. The size of the summary database is much smaller than the size of a join index. An interesting feature of our approach is that it allows the full set of query processing, including join operation, to be carried out in the summary database. The results of the query processing in the summary database are used to narrow down the search efforts in the main relational database and can greatly expedite the overall query execution in the main database. The main contribution of this paper is that it proposes a mechanism to perform join using summary information for performance enhancement in query execution in relational databases. We present a performance analysis that shows that the proposed technique can greatly speed up query execution, especially join execution. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. B. Yao. </author> <title> Approximating block accesses in database organizations. </title> <journal> Commun. ACM 20, </journal> <volume> 4(Apr. </volume> <year> 1977), </year> <pages> pp. 260-261. </pages>
Reference-contexts: B. <ref> [1] </ref>: Y ao (k f ; m f ; n f ) = m f m f fl i=1 n f i + 1 Performance (B+ index, Hybrid hash join): The number of disk I/Os for two direct selection operations in two relations is: C hs = 2 fl IO ii
Reference: [2] <author> R. Sacks-Davis, K. Ramamohanarao. </author> <title> A two level superimposed coding scheme for a partial match retrieval. </title> <journal> Information Systems, </journal> <volume> Vol. 8, No. 4, </volume> <year> 1983, </year> <pages> pp. 273-280. </pages>
Reference-contexts: Section 7 gives a performance comparison between a hybrid hash join in a traditional relational database and in a M DB. Finally, Section 8 presents the concluding remarks. 2 Background 2.1 Signature Method Signature method has been extensively investigated since early 80's <ref> [2, 3, 5] </ref>. Here we give a brief description of the signature method. A signature is a 0/1 bit pattern obtained by hashing data values. Several signatures can be superimposed to form a group signature. hashed into a signature, called an individual signature. <p> The huge size of the spatial data and the complexity of query execution in spatial database justify the use of a join index. We are not considering a materialized view here because it is even larger than a join index. Signature methods have been investigated extensively since early 80's <ref> [2, 3, 5] </ref> and is primarily used in text retrieval. Some have proposed to use signature file as an indexing structure to do preprocessing to reduce search space in the relational database [5]. However, they did not consider doing join operation in signature files.
Reference: [3] <author> C. Faloutsos. </author> <title> Signature files: Design and performance comparison of some signature extraction methods. </title> <booktitle> Proc. of the Int'l SIGMOD Conf. on the Management of Data, </booktitle> <year> 1985, </year> <pages> pp. 63-82. </pages>
Reference-contexts: Section 7 gives a performance comparison between a hybrid hash join in a traditional relational database and in a M DB. Finally, Section 8 presents the concluding remarks. 2 Background 2.1 Signature Method Signature method has been extensively investigated since early 80's <ref> [2, 3, 5] </ref>. Here we give a brief description of the signature method. A signature is a 0/1 bit pattern obtained by hashing data values. Several signatures can be superimposed to form a group signature. hashed into a signature, called an individual signature. <p> The huge size of the spatial data and the complexity of query execution in spatial database justify the use of a join index. We are not considering a materialized view here because it is even larger than a join index. Signature methods have been investigated extensively since early 80's <ref> [2, 3, 5] </ref> and is primarily used in text retrieval. Some have proposed to use signature file as an indexing structure to do preprocessing to reduce search space in the relational database [5]. However, they did not consider doing join operation in signature files.
Reference: [4] <author> P. ValDuriez. </author> <title> Join Indices. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol 12, </volume> <pages> No.2, </pages> <year> 1987, </year> <pages> pp. 218-246. </pages>
Reference-contexts: However, since join execution is often I/O bounded, without deploying multiple I/O channels and disks, simply increasing the number of parallelly executing processors will only have a marginal effect on the performance of join execution when the number of processors reach a certain level. Join index was proposed <ref> [4, 16] </ref> to speed up join execution. It is essentially a pre-computed join to turn a join between two relations R and S into a selection in a join index. Join index is a two-attribute relation. Each tuple of a join index has two entries. <p> term 1 A join attribute in a relation is an attribute that shares the same data domain with another attribute in another relation, and therefore join between these two attributes is possible 6 "join index" to be the one that is directly applied on the main database as proposed in <ref> [4] </ref>, and let the join index that is applied on the summary database be called a summary join index. A bonding table is used to map results of selection or other join operations from one summary relation to another summary relation that share the same base relation. <p> Though it is conceivable that in the worst case, the number 8 of rows in a bonding table could be the cross product of the numbers of tuples in the two summary relations that it connects, it will always be much smaller than the size of a join index <ref> [4] </ref>. In addition, the groupings that are used to build summary relations can be adjusted to reduce the size of a bonding table. In comparison, this flexibility does not exist in a join index. This will be discussed in more details in Section 5.
Reference: [5] <author> R. Sacks-Davis, A. Kent, K. Ramamohanarao. </author> <title> Multikey Access Methods Based on Superimposed Coding Techniques. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 12, No.4, </volume> <year> 1987, </year> <pages> pp. 655-696. </pages>
Reference-contexts: Section 7 gives a performance comparison between a hybrid hash join in a traditional relational database and in a M DB. Finally, Section 8 presents the concluding remarks. 2 Background 2.1 Signature Method Signature method has been extensively investigated since early 80's <ref> [2, 3, 5] </ref>. Here we give a brief description of the signature method. A signature is a 0/1 bit pattern obtained by hashing data values. Several signatures can be superimposed to form a group signature. hashed into a signature, called an individual signature. <p> The huge size of the spatial data and the complexity of query execution in spatial database justify the use of a join index. We are not considering a materialized view here because it is even larger than a join index. Signature methods have been investigated extensively since early 80's <ref> [2, 3, 5] </ref> and is primarily used in text retrieval. Some have proposed to use signature file as an indexing structure to do preprocessing to reduce search space in the relational database [5]. However, they did not consider doing join operation in signature files. <p> Signature methods have been investigated extensively since early 80's [2, 3, 5] and is primarily used in text retrieval. Some have proposed to use signature file as an indexing structure to do preprocessing to reduce search space in the relational database <ref> [5] </ref>. However, they did not consider doing join operation in signature files. Multiple layered database has been proposed before [11, 13, 14, 15]. However, the term "multiple layer" have been used differently and multiple layers have been used to improve modeling capability or database security.
Reference: [6] <author> J. A. Blakeley, and N. L. Martin. </author> <title> Join Index, Materialized View, and Hybrid-Hash Join: A Performance Analysis. </title> <booktitle> IEEE Proc. of 6th Int'l Conf. on Data Engineering, </booktitle> <year> 1990, </year> <pages> pp. 256-263. </pages>
Reference-contexts: Further reduction of the size of addressing tables will be discussed in Section 5. 4 Relation to Existing Works A comparison among join index, materialized view, and hybrid-hash join by Blakeley et al. <ref> [6] </ref> found that when the data size is huge and the selectivity is low, the performance of the hybrid-hash join is the worst, the materialized view is better, and the join index is the best. However, a join index is a huge data structure. <p> in a relation e 4 average number of bytes of a data entry i 4 number of bytes in an address s 4 number of bytes in a signature p 2,048 number of bytes in a page M 5,000 available memory pages F h 2 space overhead factor for hashing <ref> [6] </ref> m t fl a fl e=p number of pages in a base relation n (t fl a fl s)=(g fl p) in M DB, number of pages in the summary relation b (t fl f b fl i)=(g fl p) in M DB, number of pages in a bonding table <p> Each base database relation is assumed to have a attributes, t tuples, and each tuple has a fl e bytes, so each base database relation has t fl a fl e=p pages. Formulas We adopt the formula in <ref> [6] </ref> for computing IO ii , the number of pages accessed when accessing k f tuples in a relation having m f pages and n f tuples via an inverted B+ index of two or three levels [6]: IO ii (k f ; m f ; n f ) = [Y <p> Formulas We adopt the formula in <ref> [6] </ref> for computing IO ii , the number of pages accessed when accessing k f tuples in a relation having m f pages and n f tuples via an inverted B+ index of two or three levels [6]: IO ii (k f ; m f ; n f ) = [Y ao (k f ; m f ; n f ) + Y ao (k f ; n f =F O; n f ) + T 3 (k f ; n f ); (1) where T 3 (k <p> We conducted an analytic study of the proposed method. The performance of M DB is especially good when the selectivity of the query is low, i.e., query that only returns small amount of information. This is similar to that of the joining index <ref> [6] </ref>. Overall, M DB approach is suitable for query-intensive large relational databases with low query selectivities. As for further research, the grouping of data values, both for text values as well as for numerical values, is critical to the performance of M DB and more study is needed in this direction.
Reference: [7] <author> D. Rotem. </author> <title> Spatial Join Indices. </title> <booktitle> IEEE Proc. of 7th Int'l Conf. on Data Engineering, </booktitle> <year> 1991, </year> <pages> pp. 500-509. </pages>
Reference-contexts: Because of its huge size, join index is not used in common relational databases with text and numerical data values, but used chiefly in spatial database <ref> [7, 10] </ref>. The huge size of the spatial data and the complexity of query execution in spatial database justify the use of a join index. We are not considering a materialized view here because it is even larger than a join index.
Reference: [8] <author> J. Han, Y. Cai and N. Cercone. </author> <title> Concept-Based Data Classification in Relational Databases. </title> <booktitle> Workshop Notes of 1991 AAAI Workshop on Knowledge Discovery in Databases (KDD'91), </booktitle> <address> Anaheim, CA, </address> <month> July </month> <year> 1991, </year> <month> pp.77-94. </month>
Reference-contexts: These identification numbers are entered into the same row of a summary join index. This approach establishes the connection between tuples in different summary relations that stem from different base relations that are joinable. Groupings can be done with the help of concept hierarchies. A concept hierarchy <ref> [8, 9, 12, 13] </ref> is a tree-like structure. Each concept is represented as a node and the relationship between a node and its parent node denotes an "is-a" relationship.
Reference: [9] <author> J. Han, Y. Cai, and N. Cercone. </author> <title> Knowledge Discovery in Databases: An Attribute-Oriented Approach. </title> <booktitle> Proc. of 18th VLDB Conf., </booktitle> <year> 1992, </year> <pages> pp. 547-559. </pages>
Reference-contexts: These identification numbers are entered into the same row of a summary join index. This approach establishes the connection between tuples in different summary relations that stem from different base relations that are joinable. Groupings can be done with the help of concept hierarchies. A concept hierarchy <ref> [8, 9, 12, 13] </ref> is a tree-like structure. Each concept is represented as a node and the relationship between a node and its parent node denotes an "is-a" relationship.
Reference: [10] <author> Wei Lu, J. Han. </author> <title> Distance-Associated Join Indices for spatial range search. </title> <booktitle> IEEE Proc. of 8th Int'l Conf. on Data Engineering, </booktitle> <year> 1992, </year> <pages> pp. 284-292. </pages>
Reference-contexts: Because of its huge size, join index is not used in common relational databases with text and numerical data values, but used chiefly in spatial database <ref> [7, 10] </ref>. The huge size of the spatial data and the complexity of query execution in spatial database justify the use of a join index. We are not considering a materialized view here because it is even larger than a join index.
Reference: [11] <author> K. Smith, M. Winslett. </author> <title> Entity Modeling in the MLS Relational Model. </title> <booktitle> Proc. of the 18th VLDB Conf., </booktitle> <year> 1992, </year> <pages> pp. 199-210. </pages>
Reference-contexts: Some have proposed to use signature file as an indexing structure to do preprocessing to reduce search space in the relational database [5]. However, they did not consider doing join operation in signature files. Multiple layered database has been proposed before <ref> [11, 13, 14, 15] </ref>. However, the term "multiple layer" have been used differently and multiple layers have been used to improve modeling capability or database security.
Reference: [12] <author> J. Han, Y. Cai, and N. Cercone. </author> <title> Data-driven discovery of quantitative rules in relational databases. </title> <journal> IEEE Trans. on Knowledge and Data Engineering, 1993, </journal> <volume> 5 </volume> <pages> 29-40. </pages>
Reference-contexts: These identification numbers are entered into the same row of a summary join index. This approach establishes the connection between tuples in different summary relations that stem from different base relations that are joinable. Groupings can be done with the help of concept hierarchies. A concept hierarchy <ref> [8, 9, 12, 13] </ref> is a tree-like structure. Each concept is represented as a node and the relationship between a node and its parent node denotes an "is-a" relationship.
Reference: [13] <author> J. Han, Y. Fu and R.T. Ng. </author> <title> Cooperative Query Answering Using Multiple Layered Databases. </title> <booktitle> Proc. of the 2nd Int'l Conf. on Cooperative Information Systems, </booktitle> <address> Toronto, Canada, </address> <month> May </month> <year> 1994. </year> <pages> pp. 47-58. </pages>
Reference-contexts: Section 3 describes the structures and purposes of major structural components of the M DB. Section 4 compares M DB approach to three related approaches, i.e., the join index, the signature file methods, and the multi-layer database proposed in <ref> [13] </ref>. Section 5 2 presents some optimization considerations for various components of M DB. Before Section 6, all the discussions are for text data and signature is used as a way to embody summary information. In Section 6, the treatment of numerical data in the summary database are discussed. <p> Some have proposed to use signature file as an indexing structure to do preprocessing to reduce search space in the relational database [5]. However, they did not consider doing join operation in signature files. Multiple layered database has been proposed before <ref> [11, 13, 14, 15] </ref>. However, the term "multiple layer" have been used differently and multiple layers have been used to improve modeling capability or database security. <p> However, they did not consider doing join operation in signature files. Multiple layered database has been proposed before [11, 13, 14, 15]. However, the term "multiple layer" have been used differently and multiple layers have been used to improve modeling capability or database security. Only <ref> [13] </ref> proposed a multiple layered database structure to do preprocessing in the upper layer of the database to reduce search effort in the lower layer. However, a join operation is avoided in upper layer in [13]. The main differences between our approach and Han et al. [13] are that in our <p> Only <ref> [13] </ref> proposed a multiple layered database structure to do preprocessing in the upper layer of the database to reduce search effort in the lower layer. However, a join operation is avoided in upper layer in [13]. The main differences between our approach and Han et al. [13] are that in our approach, there is a complete relational database in each layer (this is not mentioned in [13]), and join operations can be carried out in upper layer databases (this is explicitly avoided in [13]). <p> Only <ref> [13] </ref> proposed a multiple layered database structure to do preprocessing in the upper layer of the database to reduce search effort in the lower layer. However, a join operation is avoided in upper layer in [13]. The main differences between our approach and Han et al. [13] are that in our approach, there is a complete relational database in each layer (this is not mentioned in [13]), and join operations can be carried out in upper layer databases (this is explicitly avoided in [13]). <p> However, a join operation is avoided in upper layer in <ref> [13] </ref>. The main differences between our approach and Han et al. [13] are that in our approach, there is a complete relational database in each layer (this is not mentioned in [13]), and join operations can be carried out in upper layer databases (this is explicitly avoided in [13]). <p> layer in <ref> [13] </ref>. The main differences between our approach and Han et al. [13] are that in our approach, there is a complete relational database in each layer (this is not mentioned in [13]), and join operations can be carried out in upper layer databases (this is explicitly avoided in [13]). In addition, though not essential to our idea, signatures are used to store summary information for text data to reduce size of upper layer databases. 5 Implementation Considerations Grouping of values: Tuples in a base relation are grouped based on groupings of values in one of its join attributes. <p> These identification numbers are entered into the same row of a summary join index. This approach establishes the connection between tuples in different summary relations that stem from different base relations that are joinable. Groupings can be done with the help of concept hierarchies. A concept hierarchy <ref> [8, 9, 12, 13] </ref> is a tree-like structure. Each concept is represented as a node and the relationship between a node and its parent node denotes an "is-a" relationship.
Reference: [14] <author> X. Qian. </author> <title> A model-theoretic semantics of the multilevel relational model. </title> <booktitle> Advances in Database Technology - EDBT'94, Lecture Notes in Computer Science 779, </booktitle> <pages> pp. 201-214, </pages> <editor> Jarke, M., Bubenko, J. and Jeffery, K. (editors), </editor> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Some have proposed to use signature file as an indexing structure to do preprocessing to reduce search space in the relational database [5]. However, they did not consider doing join operation in signature files. Multiple layered database has been proposed before <ref> [11, 13, 14, 15] </ref>. However, the term "multiple layer" have been used differently and multiple layers have been used to improve modeling capability or database security.
Reference: [15] <author> F. Chen, R. S. Sandhu. </author> <title> The Multilevel Relational (MLR) Data Model. </title> <type> Technical Report, </type> <institution> ISSE-TR-95-101, 1995, George Mason University. </institution>
Reference-contexts: Some have proposed to use signature file as an indexing structure to do preprocessing to reduce search space in the relational database [5]. However, they did not consider doing join operation in signature files. Multiple layered database has been proposed before <ref> [11, 13, 14, 15] </ref>. However, the term "multiple layer" have been used differently and multiple layers have been used to improve modeling capability or database security.
Reference: [16] <author> Z. Li, K. A. Ross. </author> <title> Fast Joins Using Join Indices. </title> <type> Technical Report, </type> <institution> CUCS-032-96, 1996, Columbia University. </institution>
Reference-contexts: However, since join execution is often I/O bounded, without deploying multiple I/O channels and disks, simply increasing the number of parallelly executing processors will only have a marginal effect on the performance of join execution when the number of processors reach a certain level. Join index was proposed <ref> [4, 16] </ref> to speed up join execution. It is essentially a pre-computed join to turn a join between two relations R and S into a selection in a join index. Join index is a two-attribute relation. Each tuple of a join index has two entries.
Reference: [17] <author> T. Zhang, R. Ramakrishnan, and M. Livny. </author> <title> BIRCH: An Efficient Data Clustering Method for Very Large Databases. </title> <booktitle> Proc. of the ACM SIGMOD Int'l Conf. on Management of Data, </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year> <month> 21 </month>
Reference-contexts: Instead of group signatures, statistics like average, minimum, and maximum values are used to represent a group of numerical values in a compact way. Partitioning by range or clustering, such as BIRCH <ref> [17] </ref>, can be used to group numerical values. For rational numbers, the groups should be such that between any pairs of values within the same group lies no values belonging to other groups.
References-found: 17

