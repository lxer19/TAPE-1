URL: http://www.cs.gatech.edu/computing/Telecomm/people/Phd/rhk/papers/ps/hpn-crc.ps
Refering-URL: http://www.cs.gatech.edu/computing/Telecomm/people/Phd/rhk.html
Root-URL: 
Email: email: frobink,calvert,schwang@cc.gatech.edu  email: pk@research.bell-labs.com  
Title: Adaptive Variation of Reliability  
Author: Robin Kravets, Ken Calvert, P. Krishnan and Karsten Schwan 
Keyword: adaptive communication, variable reliability, sliding window protocol, data partitioning  
Address: Atlanta, Georgia, USA  Holmdel, New Jersey, USA  
Affiliation: Georgia Institute of Technology, Bell Labs College of Computing Georgia Institute of Technology  Bell Labs  
Abstract: This paper presents the specification and implementation of a variable reliability framework. By using this framework, applications can explore interesting performance enhancing techniques. Some of these techniques include the use of quality-based partitioning of data and the use of adaptation of reliability based on the current state of the application and the network. We present results from an initial implementation and demonstrate the usefulness of adaptive reliability variation for sample distributed applications. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bihari, T. and Schwan, K. </author> <title> (1991) Dynamic Adaptation of Real-Time Software. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> Vol. 9, No. 2, </volume> <pages> 143-174, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: We define two adaptation algorithms: threshold adaptation and payoff adaptation. This research investigates reactive adaptation methods. Future work will consider the use of predictive <ref> (Bihari et al. 1991) </ref> and learning-theory-based adaptation methods (Krishnan et al. 1995, Keshav et al. 1984). Threshold Adaptation: A controller using threshold adaptation has a fixed scheme that it uses to value resource information. Whenever a predefined threshold is crossed, the controller automatically changes the communication.
Reference: <author> Clark, </author> <title> D.D. and Tennenhouse, D.L. (1984) Architectural Considerations for a New Generation of Protocols. </title> <booktitle> Proceedings of the SIGCOMM '90 Symposium, </booktitle> <pages> 200-208. </pages>
Reference-contexts: In comparison, our approach is to provide a framework in which each application can define the notion of "reliability" it needs. Implicit in our design is the concept of application layer framing (ALF) <ref> (Clark et al. 1984) </ref>. Namely, we assume that an application can deal independently with the data units that it sends. In other words, each unit of data sent by the application contains sufficient identifying information to allow the ap-plication to process it.
Reference: <author> Delgrossi, L., Halstrick, C., Herrtwich, R.G., Hoffmann, F., Sandvoss, J. and Twachtmann, B. </author> <title> (1993) The desirability of adjusting for residual effects in a crossover design. </title> <booktitle> First IEEE Workshop on the Architecture and Implementation of High Performance Communication Subsystems (HPCS) '93. </booktitle>
Reference-contexts: Marasli, Amer and Conrad (Marasli et al. 1996) quantify the cost of "too much" or "too little" reliability within the specification of their protocol. Similarly, Delgrossi, et al. <ref> (Delgrossi et al. 1993) </ref>, evaluate the cost of using standard reliable sliding window protocols like go-back-n and selective retransmission in situations where reliability could be relaxed. In comparison, our approach is to provide a framework in which each application can define the notion of "reliability" it needs. <p> This paper focuses on the issues for non-realtime data (i.e., data that is time-sensitive, but not time-critical). Work by Delgrossi, et al. <ref> (Delgrossi et al. 1993) </ref> and Papadopoulos and Parulkar (Papadopoulos et al. 1996) addresses reliability for realtime continuous traffic streams. By concentrating on non-realtime data, we can ignore lifetime issues for individual messages, and concentrate on issues about the amount of data received and the spacing of message losses.
Reference: <author> Diot, C., Huitema, C. and Turletti, T. </author> <title> (1995) Multimedia Applications Should Be Adaptive. </title> <booktitle> Third IEEE Workshop on the Architecture and Implementation of High Performance Communication Subsystems (HPCS) '95. </booktitle>
Reference-contexts: Examples of these characteristics are response time, image quality, or speech comprehension. This may be difficult if the application considers the communication to be a static entity. The ability to adapt to current network conditions can make the difference between a usable and an unusable application <ref> (Diot et al. 1995) </ref>. In this section, we consider the concepts involved in communication adaptation and study the effects of different adaptation methods, focusing on reliability. Our ongoing work deals with intelligent variation of other parameters like flow control, acceptable compression, etc.
Reference: <author> Gong, F. and Parulkar, G. </author> <title> (1992) An Application-Oriented Error Control Scheme for High Speed Networks. </title> <institution> Washington University, St. Louis, </institution> <type> TR 92-37. </type>
Reference-contexts: At the sliding window level, the application can define the maximum number of losses allowed in a window. These parameters are similar to those specified by Gong and Parulkar <ref> (Gong et al. 1992) </ref>.
Reference: <author> Keshav, S., Lund, C., Phillips, S.J., Reingold, N. and Saran, H. </author> <title> (1984) An Empirical Evaluation of Virtual Circuit Holding Time Policies in IP-over-ATM Networks. </title> <booktitle> Proceedings of IEEE INFOCOM 95. </booktitle>
Reference: <author> Kravets, R., Calvert, K. and Schwan, K. </author> <title> (1996) Dynamically Configurable Communication Protocols and Distributed Applications: Motivation and Experience. </title> <institution> Georgia Institute of Technology, GIT-CC-96-16. </institution>
Reference-contexts: In runs using quality-based partitioning, only 7% to 22% of the losses trigger retransmission requests. This percentage increases as the amount of reliability requested is increased. For a more detailed explanation of this experiment and the results, see <ref> (Kravets et al. 1996) </ref>.
Reference: <author> Krishnan, P., Long, P.M. and Vitter, J.S. </author> <title> (1995) Learning to Make Rent-to-Buy Decisions in Probabilistic Environments. </title> <booktitle> Machine Learning: Proceedings of the Twelfth International Conference. </booktitle>
Reference-contexts: We define two adaptation algorithms: threshold adaptation and payoff adaptation. This research investigates reactive adaptation methods. Future work will consider the use of predictive (Bihari et al. 1991) and learning-theory-based adaptation methods <ref> (Krishnan et al. 1995, Keshav et al. 1984) </ref>. Threshold Adaptation: A controller using threshold adaptation has a fixed scheme that it uses to value resource information. Whenever a predefined threshold is crossed, the controller automatically changes the communication.
Reference: <author> Marasli, R., Amer, P. and Conrad, P. </author> <title> (1996) Retransmission-Based Partially Reliable Services: An Analytical Model. </title> <booktitle> Proceedings of IEEE INFO-COM 96. </booktitle>
Reference-contexts: Given a lack of choice, such applications must use reliability even when they do not need it or implement their own versions of reliability on top of an existing unreliable protocol. Marasli, Amer and Conrad <ref> (Marasli et al. 1996) </ref> quantify the cost of "too much" or "too little" reliability within the specification of their protocol. Similarly, Delgrossi, et al. (Delgrossi et al. 1993), evaluate the cost of using standard reliable sliding window protocols like go-back-n and selective retransmission in situations where reliability could be relaxed. <p> This type of specification can be particularly useful for applications running over low-bandwidth and/or high error rate networks (e.g., wireless networks). The scheme we specify below defines a service based on simple loss measurement and retransmission policies. The protocol specified by Marasli, Amer and Conrad <ref> (Marasli et al. 1996) </ref> provides probabilistic reliability guarantees based on the number of retransmissions of a message. In contrast, our protocol provides applications with hard guarantees about reliability based on specified loss allowances.
Reference: <author> Papadopoulos, C. and Parulkar, G. </author> <title> (1996) Retransmission-Based Error Control for Continuous Media Applications. </title> <booktitle> The 6th International Workshop on Network and Operating Systems Support for Digital Audio and Video (NOSSDAV) '96. </booktitle>
Reference-contexts: This paper focuses on the issues for non-realtime data (i.e., data that is time-sensitive, but not time-critical). Work by Delgrossi, et al. (Delgrossi et al. 1993) and Papadopoulos and Parulkar <ref> (Papadopoulos et al. 1996) </ref> addresses reliability for realtime continuous traffic streams. By concentrating on non-realtime data, we can ignore lifetime issues for individual messages, and concentrate on issues about the amount of data received and the spacing of message losses.
Reference: <author> Williamson, C.L. and Cheriton, </author> <title> D.R. (1991) Loss-Load Curves: Support for Rate-Based Congestion Control in High-Speed Datagram Networks. </title> <booktitle> Proceedings of the SIGCOMM '91 Symposium. </booktitle>
Reference-contexts: For our current measurements, we have two variables: transfer time and reliability. Their payoff functions are P time (TransferTime) and P reliability (Reliability). Net payoff is defined as P total = Q (P time (TransferTime); P reliability (Reliability)). Williamson and Cheriton <ref> (Williamson et al. 1991) </ref> define the concept of loss-load curves to determine the action of the application in the face of congestion. Given an application's transmission rate and the current state of the network, the loss-load curve provides the application with the percentage of packets that may be dropped.
References-found: 11

