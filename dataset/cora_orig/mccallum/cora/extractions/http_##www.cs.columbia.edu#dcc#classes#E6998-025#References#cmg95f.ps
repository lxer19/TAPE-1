URL: http://www.cs.columbia.edu/dcc/classes/E6998-025/References/cmg95f.ps
Refering-URL: http://www.cs.columbia.edu/dcc/classes/E6998-025/projects.html
Root-URL: http://www.cs.columbia.edu
Title: Automating Performance Management Using Case-Based Reasoning based on their own experience. Such automation can empower
Author: Joseph L. Hellerstein 
Date: 1995]  
Note: [In the Proceedings of the Computer Measurement Group,  lored by end-users  
Address: Yorktown Heights, New York 10598  
Affiliation: IBM Research Division T.J. Watson Research Center  
Abstract: Resolving performance problems in information systems is a time consuming task for which automation can be of great benefit. Traditionally, this automation has been provided by rule-based systems. Herein is described an alternative approach that employs case-based reasoning (CBR). CBR matches new problem instances against previously solved problems (or cases), retrieving only those cases that are most similar to the problem instance. Case-based reasoning has the disadvantage of being less flexible than rules due to several hard-to-change decisions that are made at design time: the choice of attributes to match, the encodings used for attribute values, and the similarity metric employed. Also, compared with rules, CBR is less adept at explaining its conclusions. However, CBR is much more modular than rule-based approaches in that adding (or removing) a new case does not affect any existing case; in contrast, modifying a rule-base is, in general, a complex task. The modularity of CBR systems enables performance management automation that is custom tai 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Russ Blake: </author> <title> "Optimizing Windows NT," </title> <publisher> Microsoft Press, </publisher> <year> 1995. </year>
Reference-contexts: To aid in this presentation, a running example is used. The context is a single user workstation from which process-level information can be extracted (e.g., as in <ref> [1] </ref> and [9]).
Reference: [2] <author> Bernard Doman-ski: </author> <title> "A PROLOG-based Expert System for Tuning MVS/XA," </title> <booktitle> Proceedings of the Computer Measurement Group, </booktitle> <pages> 160-166, </pages> <year> 1987. </year>
Reference-contexts: To date, tools that automate aspects of performance management have employed rule-based programming, a technology that employs if-then statements to encode problem solving strategies used by performance experts. Examples of rule-based systems for performance management include: [3], which makes recommendations on DASD tuning; <ref> [2] </ref>, which analyzes MVS, CICS, and DB2 performance; [4], which provides recommendations for MVS performance problems; and [5], which advises on tuning VM computer systems.
Reference: [3] <author> Boole & Babbage: </author> <type> DASD ADVISOR Technical Backgrounder, </type> <institution> Boole & Bab-bage, Inc., 10BAB34.BGR, </institution> <month> December, </month> <year> 1987. </year>
Reference-contexts: Here too it is essential to have automation, especially decision support systems. To date, tools that automate aspects of performance management have employed rule-based programming, a technology that employs if-then statements to encode problem solving strategies used by performance experts. Examples of rule-based systems for performance management include: <ref> [3] </ref>, which makes recommendations on DASD tuning; [2], which analyzes MVS, CICS, and DB2 performance; [4], which provides recommendations for MVS performance problems; and [5], which advises on tuning VM computer systems.
Reference: [4] <institution> Computer Associates: "CA-MINDOVER," Computer Associates, </institution> <address> 711 Stewart Avenue, Garden City, New York, </address> <year> 1993. </year>
Reference-contexts: Examples of rule-based systems for performance management include: [3], which makes recommendations on DASD tuning; [2], which analyzes MVS, CICS, and DB2 performance; <ref> [4] </ref>, which provides recommendations for MVS performance problems; and [5], which advises on tuning VM computer systems. While some systems use case-based reasoning for diagnosing faults in information systems (e.g., [6] and [7]), we are unaware of others who have applied CBR to performance management.
Reference: [5] <author> Siegmund Gralla: </author> <title> "An Expert System for VM Performance Analysis," </title> <type> Research Report, RC 12784, </type> <institution> IBM Corporation, </institution> <year> 1987. </year>
Reference-contexts: Examples of rule-based systems for performance management include: [3], which makes recommendations on DASD tuning; [2], which analyzes MVS, CICS, and DB2 performance; [4], which provides recommendations for MVS performance problems; and <ref> [5] </ref>, which advises on tuning VM computer systems. While some systems use case-based reasoning for diagnosing faults in information systems (e.g., [6] and [7]), we are unaware of others who have applied CBR to performance management. Despite their widespread use, rule-based systems have significant deficiencies.
Reference: [6] <author> Nialini Joshi: </author> <title> "Knowledge-Based Network Diagnostics," </title> <booktitle> Proceedings of the Computer Measurement Group, </booktitle> <pages> 8-17, </pages> <year> 1992. </year>
Reference-contexts: While some systems use case-based reasoning for diagnosing faults in information systems (e.g., <ref> [6] </ref> and [7]), we are unaware of others who have applied CBR to performance management. Despite their widespread use, rule-based systems have significant deficiencies. First, it is difficult to develop rules that are applicable to diverse applications, workloads, and hardware platforms.
Reference: [7] <author> Lundy Lewis: </author> <title> "Case-Based Reasoning Approach to the Management of Faults in Communications Networks," </title> <journal> IEEE INFOCOM, </journal> <volume> Vol. 3, </volume> <year> 1993. </year>
Reference-contexts: While some systems use case-based reasoning for diagnosing faults in information systems (e.g., [6] and <ref> [7] </ref>), we are unaware of others who have applied CBR to performance management. Despite their widespread use, rule-based systems have significant deficiencies. First, it is difficult to develop rules that are applicable to diverse applications, workloads, and hardware platforms. As a result, the rule base tends to be complex.
Reference: [8] <author> Janet Kolodner: </author> <title> "Case-Based Reasoning," </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <year> 1993. </year>
Reference-contexts: extending the case repository by creating new cases that are generalizations of cases in the repository * case adaptation: transforming a case so that it better matches a problem in stance Herein, the focus is on case acquisition and retrieval. (Details on case generalization and adaptation can be found in <ref> [8] </ref>.) Case acquisition takes place when a problem instance is encountered for which there is no suitable case in the repository. Consider how case 1 in Fig. 3 is acquired when the case repository is initially empty.
Reference: [9] <author> X/Open Company Ltd: </author> <title> "Systems Management: UMA Data Pool Definitions," Company Review Draft, </title> <month> (May 30 June 24, </month> <year> 1994), 1994. </year> <month> 10 </month>
Reference-contexts: To aid in this presentation, a running example is used. The context is a single user workstation from which process-level information can be extracted (e.g., as in [1] and <ref> [9] </ref>).
References-found: 9

