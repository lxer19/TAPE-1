URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS92-25.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: The Composability of ASTRAL Realtime Specifications  
Author: Alberto Coen-Porisini Richard A. Kemmerer 
Keyword: Key Words: Formal methods, Formal specification and verification, Realtime systems, Timing requirements, Composability, State machines, ASLAN, TRIO, ASTRAL.  
Address: Santa Barbara, CA 93106  
Affiliation: Reliable Software Group Department of Computer Science University of California  
Abstract: ASTRAL is a formal specification language for realtime systems. It is intended to support formal software development, and therefore has been formally defined. In ASTRAL a realtime system is modeled by a collection of state machine specifications and a single global specification. This paper focuses on extending the ASTRAL methodology to allow the composition of ASTRAL system specifications into specifications of larger and more complex systems. The ASTRAL language includes structuring mechanisms that allow one to build modularized specifications of complex systems with layering. In this paper we concentrate on how to combine these complex system specifications into specifications for even more complex realtime systems. This is accomplished by adding a COMPOSE section to the language that provides the needed information to combine two or more ASTRAL specifications into a single new one. In this paper we also introduce the necessary proof obligations to assure that the assumptions of each of the components of the larger system are satisfied by the other components of the system, which replace the previous external environment. We also discuss how some exported transitions become internal transitions of the new system. A telephony example with local central controls that interface to long distance units is used to motivate the extensions. 
Abstract-found: 1
Intro-found: 1
Reference: [BKP 86] <author> Barringer H., Kuiper R., and Pnueli A., </author> <title> "Now You May Compose Temporal Logic Specifications," </title> <booktitle> Proceedings of 18th POPL, </booktitle> <pages> pages 173-183. </pages> <publisher> ACM, </publisher> <year> 1986. </year>
Reference-contexts: The main benefit of compositional specification is that it often makes designs easier to write and reason about. Recently, compositionality has been the focus of much research in concurrent and distributed systems, and, to a lesser extent, in realtime systems. Barringer, Kuiper and Pnueli <ref> [BKP 86] </ref> were among the first to develop a compositional proof system for concurrent programs. Their work is noteworthy for considering both shared variable and message passing models.
Reference: [CK 92] <author> Coen-Porisini A. and Kemmerer R. </author> <title> "The Composability of ASTRAL Realtime Specifications", </title> <type> Technical Report TRCS 92-25, </type> <institution> Department of Computer Science, University of California Santa Barbara, </institution> <month> December </month> <year> 1992 </year>
Reference-contexts: N: InProg L: Conn N: Conn L: Conn N: Conn L: InProg N: Conn L: Talk N: Talk L: Talk N: Talk L: Conn Rec_Long_R Rec_Local_R Long_C_Est Local_C_Est Local_C_Est Long_C_Est St_Local_T St_Local_T St_Long_T St_Long_T S_Local_Tout E_Long_C E_Long_C, E_Local_C E_Long_C, E_Local_C The complete details of the specifications can be found in <ref> [CK 92] </ref>. 11 4 . Composing ASTRAL Specifications Consider two ASTRAL top level specifications S' and S". Composing S' and S" means to build a new top level specification C, that is the specification of a system obtained by making S' and S" interact.
Reference: [CKM 92] <author> Coen-Porisini A., Kemmerer R. and Mandrioli D., </author> <title> "Proving the correcteness of Realtime Systems in ASTRAL", </title> <type> Technical Report TRCS 92-22, </type> <institution> Department of Computer Science, University of California Santa Barbara, </institution> <month> September </month> <year> 1992 </year>
Reference-contexts: In ASTRAL a system is modeled by a collection of state machine specifications (one per process type) and a single global specification that contains the global invariants for the system. In <ref> [CKM 92] </ref> a proof theory that prescribes how the proofs of the individual state machine specifications can be combined to produce a proof of the entire system is presented. <p> Both S' and S" may have a local and/or global schedule and/or invariant, representing some of the properties of S' and S". In <ref> [CKM 92] </ref> it was shown how such properties can be formally proved. When S' and S" are composed, the "environment" in which S' (S") runs is given by the external environment and the exported features of S" (S'). <p> A1 & A2" & A3 & A4 & Env G ' & CG' -| F s ' fi Env G " , for S" A1, A2", A3 and A4 are the axioms describing the ASTRAL abstract machine as in the global schedule proof obligation <ref> [CKM 92] </ref>; Env G ' and Env G " are the global environment clauses of S' and S", respectively. F s ' and 1 This is not the case for the example discussed in the paper 18 F s " are sequences of events of S' and S", respectively.
Reference: [GF 91] <author> Gabrielian, A. and M. Franklin, </author> <title> "Multilevel Specification of Realtime Systems," </title> <journal> CACM 34, </journal> <volume> 5, </volume> <pages> pp. 51-60, </pages> <month> May </month> <year> 1991. </year>
Reference: [GK 91a] <author> Ghezzi, C. and R. Kemmerer, "ASTRAL: </author> <title> An Assertion Language for Specifying Realtime Systems," </title> <booktitle> Proceedings of the Third European Software Engineering Conference, Milano, Italy, </booktitle> <pages> pp. 122-146, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: 1 . Introduction ASTRAL is a formal specification language for realtime systems. It is intended to support formal software development, and therefore has been formally defined. <ref> [GK 91a] </ref> discusses the rational of ASTRAL's design and demonstrates how the language builds on previous language experiments. [GK 91b] discusses how ASTRAL's semantics are specified in the TRIO formal realtime logic and outlines how ASTRAL specifications can be formally analyzed by translating them into TRIO. <p> Invariants and schedules can be both local and global. A detailed description of ASTRAL and of its underlying motivations is provided in <ref> [GK 91a] </ref>. In this paper, due to space limitations, only the concepts of ASTRAL that are needed to present the composability issues are discussed in detail. These concepts are illustrated via an extension of the phone example presented in [GK 91a] that includes long distance dialing and area codes. 3 . <p> description of ASTRAL and of its underlying motivations is provided in <ref> [GK 91a] </ref>. In this paper, due to space limitations, only the concepts of ASTRAL that are needed to present the composability issues are discussed in detail. These concepts are illustrated via an extension of the phone example presented in [GK 91a] that includes long distance dialing and area codes. 3 . Example System The example system used in this paper is a simple phone network. <p> digits long, a customer can be connected at most with one other phone (either local or in another area) and ongoing calls cannot be interrupted. 3 . 1 The local phone system The local phone system specified is derived from a previous ASTRAL specification of a phone system presented in <ref> [GK 91a] </ref>. This system is composed of a set of process instances of type Phone and a set of Central_Control units that provide all the functionalities needed to set up a local call, i.e., a call between two phones connected to the same Central_Control unit.
Reference: [GK 91b] <author> Ghezzi, C. and R. Kemmerer, </author> <title> "Executing Formal Spec ifi catio ns: the AST RAL to TRIO T ran slatio n Approach,"Proceedings of TAV4: the Symposium on Testing, Analysis, and Verification, </title> <address> Victoria, B.C., Canada, </address> <pages> pp. 112-119, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: 1 . Introduction ASTRAL is a formal specification language for realtime systems. It is intended to support formal software development, and therefore has been formally defined. [GK 91a] discusses the rational of ASTRAL's design and demonstrates how the language builds on previous language experiments. <ref> [GK 91b] </ref> discusses how ASTRAL's semantics are specified in the TRIO formal realtime logic and outlines how ASTRAL specifications can be formally analyzed by translating them into TRIO. This paper focuses on the composability of ASTRAL specifications.
Reference: [Hoo 87] <author> Hooman, J., </author> <title> "A Compositional Proof System for an Occam-like Real-Time Language," </title> <type> Technical Report CSN 87/14, </type> <institution> Department of Mathematics and Computer Science, Eindhoven University of Technology, </institution> <month> November </month> <year> 1987. </year> <month> 20 </month>
Reference-contexts: However, their goal was only to demonstrate feasibility of a compositional proof system based on temporal logic, so their published results are very preliminary. One of the most thorough treatments of compositionality in concurrent systems appears in [Zwi 89]. The work of Hooman <ref> [Hoo 87] </ref>, and of Hooman 3 and Widom [HW 88] both focus on developing a compositional proof system for realtime systems.
Reference: [HW 88] <author> Hooman J. and Widom J., </author> <title> "A Temporal-Logic Based Compositional Proof System for Real-Time Message Passing," </title> <type> Technical Report 88-919, </type> <institution> Department of Computer Science, Cornell University, </institution> <month> June </month> <year> 1988. </year>
Reference-contexts: One of the most thorough treatments of compositionality in concurrent systems appears in [Zwi 89]. The work of Hooman [Hoo 87], and of Hooman 3 and Widom <ref> [HW 88] </ref> both focus on developing a compositional proof system for realtime systems. In ASTRAL a system is modeled by a collection of state machine specifications (one per process type) and a single global specification that contains the global invariants for the system.
Reference: [Ost 88] <author> Ostroff, J.S., </author> <title> "Modular Reasoning in the ESM/RTTL Framework for Real-Time Systems," </title> <type> Technical Report CS-88-03, </type> <institution> Department of Computer Science, York University, </institution> <month> April </month> <year> 1988. </year>

References-found: 9

