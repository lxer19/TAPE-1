URL: http://www.pdos.lcs.mit.edu/papers/mazieres:hotos6.ps.gz
Refering-URL: http://www.pdos.lcs.mit.edu/PDOS-papers.html
Root-URL: 
Email: E-mail: dm@lcs.mit.edu, kaashoek@lcs.mit.edu  
Title: Secure Applications Need Flexible Operating Systems  
Author: David Mazieres and M. Frans Kaashoek 
Address: 545 Technology Square, Cambridge MA 02139  
Affiliation: MIT Laboratory for Computer Science  
Abstract: As information exchange over wide area networks becomes an increasingly essential component of new applications, firewalls will no longer provide an adequate defense against malicious attackers. Individual workstations will need to provide strong enough security to contain malicious processes and prevent the domino effect of a pierced firewall. Some of the most commonly found security holes today result from the fact that simple operations can be surprisingly difficult to implement correctly on top of a traditional POSIX-like interface. We claim that by combining hierarchically-named capabilities, a novel generalization of the Unix user and group ID concept, with the low-level system calls of an exokernel operating system, we can achieve a system call interface flexible enough to avoid much of the complexity that often leads to security holes in discretionary access control operating systems like Unix. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bishop and M. Dilger. </author> <title> Checking for race conditions in file accesses. </title> <booktitle> Computing Systems, </booktitle> <address> 9(2):131152, </address> <month> Spring </month> <year> 1996. </year>
Reference-contexts: Thus a subverted gzip has the potential to cause great damage. 4. A namespace decoupled from underlying files The decoupling of file names from actual files in Unix has lead to numerous race conditions, called Time of Check to Time of Use or TOCTTOU bugs <ref> [1] </ref>. Consider an extremely common example: Many sites periodically delete old files in the scratch directory /tmp.
Reference: [2] <author> J. B. Dennis and E. C. V. Horn. </author> <title> Programming semantics for multiprogrammed computations. </title> <journal> Communications of the ACM, </journal> <volume> 9(3):143155, </volume> <month> March </month> <year> 1966. </year>
Reference-contexts: Though one can imagine several ways of avoiding unkillable processes and unfreable resources, we propose hierarchically-named capabilities, a novel protection scheme with a simple and efficient implementation. Despite the name, these capabilities more closely resemble a generalized form of Unix user and group ID than traditional capabilities <ref> [2] </ref>. Our terminology and the hierarchical naming we use come from the VSTa [6] operating system, though exokernel capabilities function differently from VSTa ones. capability. A capability is 8 bytes long. The first byte records the properties of a capability and the other 7 bytes its name.
Reference: [3] <author> D. R. Engler, M. F. Kaashoek, and J. W. O'Toole. Exok-ernel: </author> <title> An operating system architecture for application-level resource management. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <address> Copper Mountain, CO, 1995. </address> <publisher> ACM. </publisher>
Reference-contexts: Our approach combines hierarchically-named capabilities, a novel generalization of the Unix user and group ID concept, with the low-level interfaces of the exokernel <ref> [3] </ref>, an operating system that attempts to provide as few abstractions as possible in privileged software. Our scheme provides a single kernel access control mechanism for all resources, designed to be used directly by applications. <p> Thus, name to file translations should move to user-space to give programmers control over all aspects of the process including such details as whether symbolic links are followed or filesystem boundaries crossed. The exokernel operating system <ref> [3] </ref> already provides applications with such control, and is consequently the platform on which this work is based. * Trusted applications should rely on the kernel to make access control decisions.
Reference: [4] <author> N. M. Haller. </author> <title> The S/KEY one-time password system. </title> <booktitle> In Proceedings of the ISOC Symposium on Network and Distributed System Security, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: Insecure network protocols Most of the network protocols in use today transmit secret passwords or filehandles in cleartext over the network, or rely on the source address of packets for authentication. Even one-time password systems such as s/key <ref> [4] </ref> allow an active attacker to hijack an authenticated TCP stream. Inexperienced attackers can easily obtain software packages for exploiting various insecure but widely-used net work protocols. 2.
Reference: [5] <author> J. G. Steiner, B. C. Neuman, and J. I. Schiller. </author> <title> Kerberos: An authentication service for open network systems. </title> <booktitle> In Proceedings of the Winter 1988 USENIX. USENIX, </booktitle> <year> 1988. </year>
Reference-contexts: Since login begins with a unique capability, the worst an attacker can do is consume memory and CPU time. No data on the system could be disclosed or tampered with. Unprivileged login programs are nothing new, particularly to distributed systems such as Kerberos <ref> [5] </ref>, but this simple authentication server could have saved a large number of security holes in Unix. Example: Using the Kernel for Access Control The ssh [8] secure login program, a privileged setuid-root application, needs to read a protected file as root.
Reference: [6] <author> A. </author> <title> Valencia. An overview of the VSTa micro-kernel. </title> <note> from http://www.igcom.net/jeske/ VSTa/vsta intro.html. </note>
Reference-contexts: Despite the name, these capabilities more closely resemble a generalized form of Unix user and group ID than traditional capabilities [2]. Our terminology and the hierarchical naming we use come from the VSTa <ref> [6] </ref> operating system, though exokernel capabilities function differently from VSTa ones. capability. A capability is 8 bytes long. The first byte records the properties of a capability and the other 7 bytes its name.
Reference: [7] <author> E. P. Wobber, M. Abadi, M. Burrows, and B. Lampson. </author> <title> Authentication in the Taos operating system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(1):332, </volume> <year> 1994. </year>
Reference-contexts: For instance, it should be trivial for privileged software to make system calls on behalf of unprivileged users. The kernel should never assume default credentials, as this would prevent code that uses implicit credentials from being reused in privileged applications. Though previous systems (for instance Taos <ref> [7] </ref>) have used such explicit credential arguments, POSIX has nothing like this and Windows NT requires credentials to be assigned per thread rather than for each system call. * All applications, even unprivileged ones, should rely on the kernel's universal access control mechanism to achieve safe sharing of resources.
Reference: [8] <author> T. Ylonen. </author> <title> SSH secure login connections over the Internet. </title> <booktitle> In Proceedings of the 6th USENIX Security Symposium, </booktitle> <pages> pages 3742, </pages> <month> July </month> <year> 1996. </year> <month> 6 </month>
Reference-contexts: Unprivileged login programs are nothing new, particularly to distributed systems such as Kerberos [5], but this simple authentication server could have saved a large number of security holes in Unix. Example: Using the Kernel for Access Control The ssh <ref> [8] </ref> secure login program, a privileged setuid-root application, needs to read a protected file as root.
References-found: 8

