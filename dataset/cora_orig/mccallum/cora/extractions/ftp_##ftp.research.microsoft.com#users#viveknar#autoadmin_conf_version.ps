URL: ftp://ftp.research.microsoft.com/users/viveknar/autoadmin_conf_version.ps
Refering-URL: http://www.research.microsoft.com/~surajitc/
Root-URL: http://www.research.microsoft.com
Email: surajitc@microsoft.com  viveknar@microsoft.com  
Title: AutoAdmin What-if Index Analysis Utility  
Author: Surajit Chaudhuri Vivek Narasayya 
Affiliation: Microsoft Research  Microsoft Research  
Abstract: As databases get widely deployed, it becomes increasingly important to reduce the overhead of database administration. An important aspect of data administration that critically influences performance is the ability to select indexes for a database. In order to decide the right indexes for a database, it is crucial for the database administrator (DBA) to be able to perform a quantitative analysis of the existing indexes. Furthermore, the DBA should have the ability to propose hypothetical (what-if) indexes and quantitatively analyze their impact on performance of the system. Such impact analysis may consist of analyzing workloads over the database, estimating changes in the cost of a workload, and studying index usage while taking into account projected changes in the sizes of the database tables. In this paper we describe a novel index analysis utility that we have prototyped for Microsoft SQL Server 7.0. We describe the interfaces exposed by this utility that can be leveraged by a variety of front-end tools and sketch important aspects of the user interfaces enabled by the utility. We also discuss the implementation techniques for efficiently supporting what-if indexes. Our framework can be extended to incorporate analysis of other aspects of physical database design. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> AutoAdmin Project, Database Group, Microsoft Research, </institution> <note> http://www.research.microsoft.com/db. </note>
Reference-contexts: Database Administrators (DBAs) need to take into account resources on the database system, application requirements, and characteristics of the workload and DBMS. With large-scale deployment of databases, minimizing database administration function becomes important. The AutoAdmin project at Microsoft Research <ref> [1] </ref> is investigating new techniques to make it easy to tune external and internal database system parameters to achieve competitive performance. One important area where tuning is required is in determining physical database design and specifically in the choice of indexes to build for a database.
Reference: [2] <author> Choenni S., Blanken H. M., Chang T., </author> <title> Index Selection in Relational Databases, </title> <booktitle> Proceedings of 5 th IEEE ICCI 1993. </booktitle>
Reference: [3] <author> Chaudhuri, S., Motwani, R., Narasayya, V., </author> <title> Random Sampling for Histogram Construction: How Much Is Enough?. </title> <booktitle> Proceedings of ACM SIGMOD 98. </booktitle>
Reference-contexts: In addition to the above, there is a significant body of work in index selection, including [2,5,7,9,11]. Most of the other work in index selection has the serious shortcoming that the index selection tools do not stay in step with the optimizer (see <ref> [3] </ref> for a discussion). In any case, these papers do not discuss support for hypothetical configurations. 3. Simulating Hypothetical Configurations In this section we present the interfaces for hypothetical configuration simulation and describe how these interfaces are implemented efficiently. <p> Such information consists of (a) a histogram on the column values on which the index is defined (b) density. Moreover, to gather these statistics it is not necessary to scan all rows in the table. These statistical measures can be efficiently gathered via sampling, without significantly compromising accuracy <ref> [3] </ref>. Once these statistics have been collected, it is possible for the optimizer to consider the hypothetical index for plan generation (although execution of that plan is not possible). We will discuss our approach to collecting the statistics in Section 3.2.1. <p> This addition is done via a merge algorithm to build a new Sample-Table that is in sorted order. In the absence of convergence, the above step is repeated. The technical details of the algorithm and its behavior on varying data distributions are presented elsewhere <ref> [3] </ref>. As an example of the effectiveness of this server extension, we present the requests made by an index selection tool [4] to the HCA engine to create hypothetical indexes. Figure 4 shows the distribution of hypothetical indexes explored by the tool over tables of the TPC-D 1GB database.
Reference: [4] <author> Chaudhuri, S., Narasayya, V., </author> <title> "An Efficient, Cost-Driven Index Selection Tool for Microsoft SQL Server. </title> ". <booktitle> Proceedings of the 23rd VLDB Conference, </booktitle> <address> Greece, </address> <year> 1997. </year>
Reference-contexts: In the context of the AutoAdmin project, we have built an index selection tool as well as an index analysis utility. The index selection tool has been described in <ref> [4] </ref> and it leverages off the index analysis component. This paper focuses on the index analysis utility. We now provide an overview of the what-if index analysis utility and the system architecture for index selection in AutoAdmin. 1.1 Overview of Architecture index selection. <p> This metric is justified since the consumer of a configuration is the optimizer. In other words, unless the optimizer finds a hypothetical index useful, it is unlikely to make use of that index when it is made real (see <ref> [4] </ref> for additional justification). An optimizers decision on whether or not use an index is solely based on the statistical information on the column (s) in the index. Such information consists of (a) a histogram on the column values on which the index is defined (b) density. <p> In the absence of convergence, the above step is repeated. The technical details of the algorithm and its behavior on varying data distributions are presented elsewhere [3]. As an example of the effectiveness of this server extension, we present the requests made by an index selection tool <ref> [4] </ref> to the HCA engine to create hypothetical indexes. Figure 4 shows the distribution of hypothetical indexes explored by the tool over tables of the TPC-D 1GB database. Figure 5 confirms our expectation that sampling can significantly reduce the cost of creating a hypothetical index. <p> In both cases, the index selection tool recommended the same final set of indexes. We now present an example to show that using sampling to create hypothetical indexes does not adversely affect the optimizers estimates. We ran an index selection tool <ref> [4] </ref> on a workload consisting of the five most expensive queries on the TPC-D 1GB database. The adaptive sampling algorithm sampled about 5% of the data for hypothetical indexes on largest table (lineitem).
Reference: [5] <author> Frank M., Omiecinski E., Navathe S., </author> <title> Adaptive and Automative Index Selection in RDBMS, </title> <booktitle> Proceedings of EDBT 92. </booktitle>
Reference: [6] <author> Finkelstein S, Schkolnick M, </author> <title> Tiberio P.Physical Database Design for Relational Databases, </title> <journal> ACM TODS, </journal> <month> Mar </month> <year> 1988. </year>
Reference: [7] <author> Gupta H., Harinarayan V., Rajaramana A., Ullman J.D., </author> <title> Index Selection for OLAP, </title> <booktitle> Proceedings of ICDE97. </booktitle>
Reference: [8] <author> Harinarayan V., Rajaramana A., Ullman J.D., </author> <title> Implementing Data Cubes Efficiently, </title> <booktitle> Proceedings of ACM SIGMOD 96. </booktitle>
Reference: [9] <author> Labio W.J., Quass D., Adelberg B., </author> <title> Physical Database Design for Data Warehouses, </title> <booktitle> Proceedings of ICDE97. </booktitle>
Reference: [10] <author> Olken F., </author> <title> Random Sampling in Databases, </title> <type> Technical Report, </type> <year> 1993. </year>
Reference: [11] <author> Rozen S., Shasha D. </author> <title> A Framework for Automating Physical Database Design, </title> <booktitle> Proceedings of VLDB 1991. </booktitle>
Reference: [12] <author> Stonebraker M., </author> <title> Hypothetical Data Bases as Views. </title> <booktitle> Proceedings of ACM SIGMOD 1981. </booktitle>
Reference-contexts: Nonetheless, to the best of our knowledge, no previous work has addressed the problem of estimating the impact of possible changes to the index configurations and database size in a comprehensive manner. Stonebraker <ref> [12] </ref> discusses the use of views in simulating hypothetical databases. His approach creates a query to simulate the hypothetical database and therefore relies on actual execution. This is very computation intensive.
References-found: 12

