URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-93-32/s2k-93-32.ps.Z
Refering-URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-93-32/
Root-URL: http://www.cs.berkeley.edu
Email: sunita@cs.berkeley.edu, mike@cs.berkeley.edu  
Title: Efficient Organization of Large Multidimensional Arrays  
Author: Sunita Sarawagi Michael Stonebraker 
Address: Berkeley  
Affiliation: Computer Science Division University of California at  
Abstract: Large multidimensional arrays are widely used in scientific and engineering database applications. In this paper, we present methods of organizing arrays to make their access on secondary and tertiary memory devices fast and efficient. We have developed four techniques for doing this: (1) storing the array in multidimensional "chunks" to minimize the number of blocks fetched, (2) reordering the chunked array to minimize seek distance between accessed blocks, (3) maintaining redundant copies of the array, each organized for a different chunk size and ordering and (4) partitioning the array onto platters of a tertiary memory device so as to minimize the number of platter switches. Our measurements on real data sets obtained from global change scientists demonstrate that accesses on arrays organized using the above techniques are often an order of magnitude faster than on the original unoptimized data.
Abstract-found: 1
Intro-found: 1
Reference: [DOZ91] <author> Jeff Dozier and H.K. Ramapriyan. </author> <title> Planning for the EOS Data and Information System. In Global Environment Change, volume 1. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Scientific and engineering applications often utilize large multidimensional arrays. Earth sci entists routinely process satellite images in the form of large two and three dimensional arrays <ref> [DOZ91] </ref>. Their simulations of atmosphere and ocean climatic conditions generate large regular arrays of floating point numbers as output [MEC92].
Reference: [EQU89] <author> William H. Equitz. </author> <title> A New Vector Quantization Clustering Algorithm. </title> <journal> IEEE Transactions on Accoustics, Speech and Signal Processing, </journal> <volume> 37(10), </volume> <year> 1989. </year>
Reference-contexts: Initially, each class belongs to a different cluster and we progressively merge pairs of clusters with the minimal weighted distance between them until R clusters remain. Algorithms for computing minimal distance are given in <ref> [EQU89] </ref>. When a read request arrives for a replicated array, the runtime system first finds the replica with the smallest estimated access cost. The estimated cost is a weighted sum of the number of block fetches, seek distance and media switches (in case of tertiary devices).
Reference: [FRA92] <author> James Franklin. </author> <title> Tiled Virtual Memory for UNIX. </title> <booktitle> In Proceedings of USENIX, </booktitle> <address> San Antonio,TX, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Chunking in the context of image processing has been used to build tiled virtual memory systems [WAD84] [REU80] <ref> [FRA92] </ref>. Whereas those systems deal only with two dimensional arrays and assume magnetic disk as the storage device, our interest is in multidimensional arrays with both magnetic disk and tertiary memory as storage devices. A more theoretical approach to organizing multidimensional arrays is presented in [ROS75].
Reference: [JAI88] <author> Anil K. Jain and Richard C. Dubes. </author> <title> Algorithms for Clustering Data. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: A more theoretical approach to organizing multidimensional arrays is presented in [ROS75]. Their approach organizes data without regard to access pattern, whereas our work considers access patterns to optimize layout. 2 Array organization is related to the general problem of data clustering. Most clustering algorithms <ref> [JAI88] </ref> work on a collection of records that are not structured in any way. Arrays have a regular structure that facilitates a different approach to storage organization. The rest of this paper is organized as follows.
Reference: [LIN80] <author> Yoseph Linde, Andres Buzo, and Robert Gray. </author> <title> An Algorithm for Vector Quantizer Design. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 28(1), </volume> <year> 1980. </year>
Reference-contexts: In the worst scenario, the number of partitions to be considered is exponential in the number of elements in the access pattern. * Use vector clustering techniques <ref> [LIN80] </ref> to group classes into clusters. We have a starting set of K classes and wish to divide them into R clusters. Initially, each class belongs to a different cluster and we progressively merge pairs of clusters with the minimal weighted distance between them until R clusters remain.
Reference: [MEC92] <author> C. Mechoso et al. </author> <title> Parallelization and Distribution of a Coupled Atmosphere-Ocean General Circulation Model, </title> <note> 1992. Submitted to Monthly Weather Review, </note> <month> Aug </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Scientific and engineering applications often utilize large multidimensional arrays. Earth sci entists routinely process satellite images in the form of large two and three dimensional arrays [DOZ91]. Their simulations of atmosphere and ocean climatic conditions generate large regular arrays of floating point numbers as output <ref> [MEC92] </ref>. For example, typical runs of the UCLA fl This research was sponsored by the National Science Foundation under grant IRI-9107455, the Defense Advanced Research Projects Agency under grant T63-92-C-0007, and the Army Research Office under grant 91-G-0183. <p> The first source of data was ocean model output from the General Circulation Model (GCM) simulations done at UCLA <ref> [MEC92] </ref> [WEI93]. The arrays consist of three-dimensional snapshots of the ocean (covering the world or a region of it) taken at regular intervals of time with horizontal grid resolution varying from 1 3 to 1 ffi .
Reference: [MOS92] <author> Claire Mosher. </author> <title> Postgres Reference Manual, </title> <type> version 4.0. </type> <institution> Electronics Research Laboratory, University of California, Berkeley, CA-94720, </institution> <year> 1992. </year> <note> No. UCB/ERL M92/85. 16 </note>
Reference-contexts: Postgres tuples cannot span pages, so the entire array must be smaller than the page size (currently 8KB). The data field in this case is used to store the array elements contiguously in their respective internal representation 9 Store the array as a Postgres large object <ref> [MOS92] </ref> and keep a pointer to the large object in the data field of the array structure. The large object interface in Postgres provides a file-oriented access to data that span multiple pages.
Reference: [REU80] <author> J.L. Reuss, S.K. Chang, and B.H. McCormick. </author> <title> Picture Paging for Efficient Image Pro--cessing. </title> <editor> In S.K. Chang and K.S. Fu, editors, </editor> <booktitle> Pictorial Information Systems, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: Chunking in the context of image processing has been used to build tiled virtual memory systems [WAD84] <ref> [REU80] </ref> [FRA92]. Whereas those systems deal only with two dimensional arrays and assume magnetic disk as the storage device, our interest is in multidimensional arrays with both magnetic disk and tertiary memory as storage devices. A more theoretical approach to organizing multidimensional arrays is presented in [ROS75].
Reference: [ROS75] <author> Arnold L. Rosenberg. </author> <title> Preserving Proximity in Arrays. </title> <journal> SIAM Journal on Computing, </journal> <volume> 4, </volume> <year> 1975. </year>
Reference-contexts: Whereas those systems deal only with two dimensional arrays and assume magnetic disk as the storage device, our interest is in multidimensional arrays with both magnetic disk and tertiary memory as storage devices. A more theoretical approach to organizing multidimensional arrays is presented in <ref> [ROS75] </ref>. Their approach organizes data without regard to access pattern, whereas our work considers access patterns to optimize layout. 2 Array organization is related to the general problem of data clustering. Most clustering algorithms [JAI88] work on a collection of records that are not structured in any way.
Reference: [SON89] <author> Sony Corporation, </author> <title> Japan. Writable Disk Auto Changer WDA-610 Specifications and Operating Instructions, </title> <year> 1989. </year> <month> 3-751-106-21(1). </month>
Reference-contexts: The first set of results is for a local 1 GB magnetic disk using the Ultrix file system. The block size, C was set to 8 KB, which is the file system block size. A second set of results was taken from data stored on a write-once optical jukebox <ref> [SON89] </ref>; the tertiary storage device currently supported by Postgres [STON93]. The jukebox consists of 50 double sided platters, each of which has a 3.27 GB capacity per side. At any time a maximum of two platters can be physically mounted, and mounting a platter takes about ten seconds.
Reference: [STO91a] <author> Michael Stonebraker and Jeff Dozier. </author> <title> Large Capacity Object Servers to Support Global Change Research. </title> <type> Technical Report 91/1, </type> <institution> University of California at Berkeley, </institution> <year> 1991. </year>
Reference-contexts: Because of the large storage requirements for such arrays, they are usually allocated to tertiary storage devices. Achieving high performance in spite of the non-uniform access times and the high latency of such storage devices requires good allocation strategies <ref> [STO91a] </ref>. The traditional method of storing a multidimensional array is linear allocation whereby the array is laid out linearly by a nested traversal of the axes in some predetermined order.
Reference: [STO91b] <author> Michael Stonebraker and Greg Kemnitz. </author> <title> The POSTGRES Next Generation Database Management System. </title> <journal> Communications of the ACM, </journal> <volume> 34 (10), </volume> <year> 1991. </year>
Reference-contexts: The rest of this paper is organized as follows. In Section 2 we present the different schemes we used for organizing arrays, namely chunking, reordering, redundancy and partitioning. In Section 3 we describe our implementation of multidimensional arrays in the next generation DBMS Postgres <ref> [STO91b] </ref>. Section 4 presents our simulation of several earth science arrays used by global change researchers in the Sequoia 2000 project [STO91c] and shows the results of our array organization schemes on this data. <p> However, for tapes the average seek time (45 seconds) is large compared to the switch time. Hence, minimizing media switches is less crucial than minimizing seek time. 3 Implementation in Postgres Postgres <ref> [STO91b] </ref> is an extended relational database system being developed at Berkeley. We have built into Postgres a generalized interface for multidimensional arrays.
Reference: [STO91c] <author> Michael Stonebraker. </author> <title> An Overview of the Sequoia 2000 Project. </title> <type> Technical Report 91/5, </type> <institution> University of California at Berkeley, </institution> <year> 1991. </year>
Reference-contexts: In Section 3 we describe our implementation of multidimensional arrays in the next generation DBMS Postgres [STO91b]. Section 4 presents our simulation of several earth science arrays used by global change researchers in the Sequoia 2000 project <ref> [STO91c] </ref> and shows the results of our array organization schemes on this data. Lastly, we present future work and conclusions in Section 5. 2 Storage of Arrays We begin this section by presenting the access pattern model that we use for optimization of array layout. <p> data set 2 342.75 MB [112 180 170 020 05] 4 bytes magnetic disk data set 3 4.255 GB [072 090 038 144 30] 4 bytes tertiary memory data set 4 4.255 GB [114 360 180 024 06] 4 bytes tertiary memory Table 1: Benchmarks scientists in the Sequoia project <ref> [STO91c] </ref>. The first source of data was ocean model output from the General Circulation Model (GCM) simulations done at UCLA [MEC92] [WEI93].
Reference: [STON93] <author> Michael Stonebraker and Michael Olson. </author> <title> Large Object Support in POSTGRES. </title> <booktitle> Proc. 9th Intl. Conf. on Data Engineering, </booktitle> <month> April </month> <year> 1993, </year> <institution> Vienna, Austria. </institution>
Reference-contexts: We have built into Postgres a generalized interface for multidimensional arrays. Postgres is well-suited for handling massive amounts of data; it supports large objects that allow attributes to span multiple pages and it has a generalized storage structure that supports huge capacity storage devices as tertiary memory <ref> [STON93] </ref>. In our implementation, arrays are first class objects. Therefore any attribute of a class can be declared to be an array of any base type. <p> The block size, C was set to 8 KB, which is the file system block size. A second set of results was taken from data stored on a write-once optical jukebox [SON89]; the tertiary storage device currently supported by Postgres <ref> [STON93] </ref>. The jukebox consists of 50 double sided platters, each of which has a 3.27 GB capacity per side. At any time a maximum of two platters can be physically mounted, and mounting a platter takes about ten seconds.
Reference: [WAD84] <author> B.T Wada. </author> <title> A Virtual Memory System for Picture Processing. </title> <journal> Communications of the ACM, </journal> <volume> 27, </volume> <year> 1984. </year>
Reference-contexts: Other areas where large arrays are commonly used include image processing <ref> [WAD84] </ref>, computational chemistry, structural dynamics and seismology. Because of the large storage requirements for such arrays, they are usually allocated to tertiary storage devices. Achieving high performance in spite of the non-uniform access times and the high latency of such storage devices requires good allocation strategies [STO91a]. <p> The above techniques can be used, in combination, to tune the array's internal structure to an access pattern obtained from either an end user or from statistical sampling by a data management system. Chunking in the context of image processing has been used to build tiled virtual memory systems <ref> [WAD84] </ref> [REU80] [FRA92]. Whereas those systems deal only with two dimensional arrays and assume magnetic disk as the storage device, our interest is in multidimensional arrays with both magnetic disk and tertiary memory as storage devices. A more theoretical approach to organizing multidimensional arrays is presented in [ROS75].
Reference: [WEI93] <author> William Weibel, Chung Chu Ma and Joseph Spahr. </author> <type> Personal Communication. 17 </type>
Reference-contexts: The first source of data was ocean model output from the General Circulation Model (GCM) simulations done at UCLA [MEC92] <ref> [WEI93] </ref>. The arrays consist of three-dimensional snapshots of the ocean (covering the world or a region of it) taken at regular intervals of time with horizontal grid resolution varying from 1 3 to 1 ffi .
References-found: 16

