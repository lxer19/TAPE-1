URL: http://www.cs.wustl.edu/~schmidt/C++-report-col17.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/new.html
Root-URL: http://www.cs.wustl.edu
Email: schmidt@cs.wustl.edu vinoski@iona.com  
Title: Object Interconnections Time-Independent Invocation and Interoperable Routing (Column 17)  
Author: Douglas C. Schmidt Steve Vinoski 
Note: This column will appear in the April 1999 issue of the SIGS C++ Report magazine.  
Address: St. Louis, MO 63130 60 Aberdeen Ave., Cambridge, MA 02138  
Affiliation: Department of Computer Science IONA Technologies, Inc. Washington University,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <institution> Object Management Group, </institution> <note> CORBA Messaging Specification, OMG Document orbos/98-05-05yes ed., </note> <month> May </month> <year> 1998. </year>
Reference-contexts: 1 Introduction This column focuses on a new feature defined in the CORBA Messaging Specification <ref> [1] </ref> called time-independent invocation (TII), which adds store-and-forward features to CORBA. Prior to the Messaging spec, CORBA requests were sent by a client and handled immediately by the server, with the server returning any response as soon as it finished processing the request, as shown in Figure 1.
Reference: [2] <author> D. C. Schmidt and S. Vinoski, </author> <title> Introduction to CORBA Messaging, </title> <journal> C++ Report, </journal> <volume> vol. 10, </volume> <month> November/December </month> <year> 1998. </year>
Reference-contexts: This is the third column of our series covering the new CORBA Messaging Specification. The first column of the series outlined the capabilities of the new messaging features and described how they greatly improve the status quo for invoking nonsynchronous CORBA requests <ref> [2] </ref>. The second column showed examples of how to write applications that use CORBA asynchronous method invocation (AMI) features. AMI uses the static invocation interface (SII) to send requests asynchronously and receive responses either by polling via Pollers or through ReplyHandler call-backs [3], which we review briefly below.
Reference: [3] <author> D. C. Schmidt and S. Vinoski, </author> <title> Programming Asynchronous Method Invocations with CORBA Messaging, </title> <journal> C++ Report, </journal> <volume> vol. 11, </volume> <month> February </month> <year> 1999. </year> <month> 5 </month>
Reference-contexts: The second column showed examples of how to write applications that use CORBA asynchronous method invocation (AMI) features. AMI uses the static invocation interface (SII) to send requests asynchronously and receive responses either by polling via Pollers or through ReplyHandler call-backs <ref> [3] </ref>, which we review briefly below.
References-found: 3

