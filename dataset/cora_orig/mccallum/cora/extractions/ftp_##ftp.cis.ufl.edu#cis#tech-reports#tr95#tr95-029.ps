URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr95/tr95-029.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr95-abstracts.html
Root-URL: http://www.cis.ufl.edu
Abstract-found: 0
Intro-found: 1
Reference: [AMC93] <author> E. Anwar, L. Maugis, and S. Chakravarthy. </author> <title> A New Perspective on Rule Support for Object-Oriented Databases. </title> <booktitle> In Proceedings, International Conference on Management of Data, </booktitle> <pages> pages 99-108, </pages> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: This permits applications and transaction semantics to be modified independently of each other as well as use of existing applications without major modifications. For concreteness, we show how various transaction models can be translated into a set of ECA rules in the context of Sentinel <ref> [AMC93, CKAK94, CKTB95] </ref>, an active OODBMS developed at UF. However, our framework and approach [CA95] is general and can be applied to any DBMS supporting active capability at the system level (relational or otherwise). The remainder of this paper is structured as follows. <p> To summarize, not only does the active database paradigm allow for the specification of transaction semantics but arbitrary semantics as well in an extensible manner. 2.1 Overview of Sentinel Sentinel <ref> [CM94, AMC93, CKAK94, CKTB95] </ref> is an active object-oriented DBMS that seamlessly integrates ECA rules into the object-oriented paradigm. The Sentinel architecture is an extension of the passive Open OODB system architecture [OOD93]. <p> These set of rules become part of the pool of rules available for grouping. 3 Implementation Details This section presents detailed design and implementation aspects of ECA rules for supporting various transaction models. Our implementation assumes the ECA rule functionality provided by Sentinel <ref> [AMC93, CKAK94, CKTB95] </ref>, an active OODBMS developed at UF. Although the details are presented in the context of an OODBMS, the approach is independent of the database model as explained earlier.
Reference: [ASRS92] <author> P. Attie, M. Singh, M. Rusinkiewicz, and A. Sheth. </author> <title> Specifying and enforcing intertask dependencies. </title> <type> Technical Report MCC Report: </type> <institution> Carnot-245-92, Microelectronica and Computer Technology Corporation, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: This approach, if successful, will obviate the need for developing DBMSs suited for specific application classes. It is equally important to avoid hardwiring the semantics of all known transaction models, as this increases runtime checking as well as the footprint of the transaction manager. Several frameworks including <ref> [Tra91, ASRS92, BP95, Moh94, BDG + 94, GHKM94] </ref> have been proposed for supporting various transaction models. Our approach differs from current approaches in that we use the active database paradigm as a mechanism for supporting extended transaction models in a novel way.
Reference: [Bad93] <author> R. Badani. </author> <title> Nested Transactions for Concurrent Execution of Rules: Design and Implementation. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> Gainesville, FL 32611, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: As reusability of rule sets among 3 We also have a 2 level implementation of the nested transaction model in the client/server architecture <ref> [Bad93] </ref>. 7 different transaction models is a key aspect of this approach, it may be possible to define a new rule set using existing rules. * Rule sets to support various transaction models can be provided by the DBC.
Reference: [Bat88] <author> D. Batory. </author> <title> GENESIS: An Extensible Database Management System. </title> <journal> IEEE Transactions on Software Eng, </journal> <month> Nov. </month> <year> 1988. </year>
Reference-contexts: In this paper, we focus on the concurrency control aspects of 1 There exists an extensive body of research on database extensibility; some of the proposed techniques can be applied to transaction management (e.g., <ref> [Tra91, Bat88] </ref>). However, most of the approaches have concentrated on its applicability to other database functionality such as access methods, optimization and data types. In contrast, transaction management extensibility has so far received little attention. 2 transaction management and the uniform framework for capturing both application and transac-tion model semantics.
Reference: [BDG + 94] <author> A. Biliris, S. Dar, N. Gehani, H.V.Jagadish, and K. Ramamritham. </author> <title> ASSET: A System for Supporting Extended Transactions. </title> <booktitle> In Proceedings, International Conference on Management of Data, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: This approach, if successful, will obviate the need for developing DBMSs suited for specific application classes. It is equally important to avoid hardwiring the semantics of all known transaction models, as this increases runtime checking as well as the footprint of the transaction manager. Several frameworks including <ref> [Tra91, ASRS92, BP95, Moh94, BDG + 94, GHKM94] </ref> have been proposed for supporting various transaction models. Our approach differs from current approaches in that we use the active database paradigm as a mechanism for supporting extended transaction models in a novel way. <p> Similarly, the abort of a compensating transaction performs all operations executed when a top-level transaction aborts. However, it also restarts the compensating transaction again, i.e., the aborted compensating transaction is retried until it successfully commits. 5 Related Work Several efforts including <ref> [BDG + 94, GHKM94, BP95] </ref> have addressed the problem of supporting extended transaction models. ASSET [BDG + 94] provides a procedural approach for realizing transac 17 tion semantics in applications. Basically, a set of transaction primitives (e.g., begin, commit, wait) are provided along with their semantics. <p> However, it also restarts the compensating transaction again, i.e., the aborted compensating transaction is retried until it successfully commits. 5 Related Work Several efforts including [BDG + 94, GHKM94, BP95] have addressed the problem of supporting extended transaction models. ASSET <ref> [BDG + 94] </ref> provides a procedural approach for realizing transac 17 tion semantics in applications. Basically, a set of transaction primitives (e.g., begin, commit, wait) are provided along with their semantics.
Reference: [BP95] <author> Roger Barga and Calton Pu. </author> <title> A practical and modular method to implement extended transaction models. </title> <booktitle> In Proceedings, International Conference on Very Large Data Bases, </booktitle> <pages> pages 206-217, </pages> <address> Zurich, Switzerland, </address> <year> 1995. </year>
Reference-contexts: This approach, if successful, will obviate the need for developing DBMSs suited for specific application classes. It is equally important to avoid hardwiring the semantics of all known transaction models, as this increases runtime checking as well as the footprint of the transaction manager. Several frameworks including <ref> [Tra91, ASRS92, BP95, Moh94, BDG + 94, GHKM94] </ref> have been proposed for supporting various transaction models. Our approach differs from current approaches in that we use the active database paradigm as a mechanism for supporting extended transaction models in a novel way. <p> Similarly, the abort of a compensating transaction performs all operations executed when a top-level transaction aborts. However, it also restarts the compensating transaction again, i.e., the aborted compensating transaction is retried until it successfully commits. 5 Related Work Several efforts including <ref> [BDG + 94, GHKM94, BP95] </ref> have addressed the problem of supporting extended transaction models. ASSET [BDG + 94] provides a procedural approach for realizing transac 17 tion semantics in applications. Basically, a set of transaction primitives (e.g., begin, commit, wait) are provided along with their semantics. <p> Dependencies are classified into state and correctness dependencies. DOM supports extended transactions by accepting dependencies and enforcing them. Dependencies are expressed using the provided transaction specification language. State dependencies are implemented by translating their specifications into ECA rules while correctness dependencies are implemented using traditional scheduler technology. <ref> [BP95] </ref> adopts a layered approach for implementing extended transaction models. Specifically, add-on modules, referred to as transaction adapters, are built on top of existing transaction processing (TP) monitor components, aiming at extending the component's functionality for supporting extended transactions.
Reference: [CA95] <author> S. Chakravarthy and E. Anwar. </author> <title> Exploiting active database paradigm for supporting flexible transaction models. </title> <type> Technical Report UF-CIS TR-95-026, </type> <institution> University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: For concreteness, we show how various transaction models can be translated into a set of ECA rules in the context of Sentinel [AMC93, CKAK94, CKTB95], an active OODBMS developed at UF. However, our framework and approach <ref> [CA95] </ref> is general and can be applied to any DBMS supporting active capability at the system level (relational or otherwise). The remainder of this paper is structured as follows. In section 2 we present our general approach for supporting transaction models using ECA rules. <p> In the following sections we briefly describe the semantics of nested transactions, Sagas and Split transactions and show the ECA rule sets necessary for modeling each. High-level specifications of ECA rules are given in order to enhance readability. The reader is referred <ref> [CA95] </ref> to for the high-level support provided to users for enabling rule sets in application programs.
Reference: [CKAK94] <author> S. Chakravarthy, V. Krishnaprasad, E. Anwar, and S.-K. Kim. </author> <title> Composite Events for Active Databases: Semantics, Contexts, and Detection. </title> <booktitle> In Proceedings, International Conference on Very Large Data Bases, </booktitle> <pages> pages 606-617, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: This permits applications and transaction semantics to be modified independently of each other as well as use of existing applications without major modifications. For concreteness, we show how various transaction models can be translated into a set of ECA rules in the context of Sentinel <ref> [AMC93, CKAK94, CKTB95] </ref>, an active OODBMS developed at UF. However, our framework and approach [CA95] is general and can be applied to any DBMS supporting active capability at the system level (relational or otherwise). The remainder of this paper is structured as follows. <p> To summarize, not only does the active database paradigm allow for the specification of transaction semantics but arbitrary semantics as well in an extensible manner. 2.1 Overview of Sentinel Sentinel <ref> [CM94, AMC93, CKAK94, CKTB95] </ref> is an active object-oriented DBMS that seamlessly integrates ECA rules into the object-oriented paradigm. The Sentinel architecture is an extension of the passive Open OODB system architecture [OOD93]. <p> These set of rules become part of the pool of rules available for grouping. 3 Implementation Details This section presents detailed design and implementation aspects of ECA rules for supporting various transaction models. Our implementation assumes the ECA rule functionality provided by Sentinel <ref> [AMC93, CKAK94, CKTB95] </ref>, an active OODBMS developed at UF. Although the details are presented in the context of an OODBMS, the approach is independent of the database model as explained earlier.
Reference: [CKTB95] <author> S. Chakravarthy, V. Krishnaprasad, Z. Tamizuddin, and R. Badani. </author> <title> ECA Rule Integration into an OODBMS: </title> <booktitle> Architecture and Implementation. In Proceedings, International Conference on Data Engineering, </booktitle> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: This permits applications and transaction semantics to be modified independently of each other as well as use of existing applications without major modifications. For concreteness, we show how various transaction models can be translated into a set of ECA rules in the context of Sentinel <ref> [AMC93, CKAK94, CKTB95] </ref>, an active OODBMS developed at UF. However, our framework and approach [CA95] is general and can be applied to any DBMS supporting active capability at the system level (relational or otherwise). The remainder of this paper is structured as follows. <p> To summarize, not only does the active database paradigm allow for the specification of transaction semantics but arbitrary semantics as well in an extensible manner. 2.1 Overview of Sentinel Sentinel <ref> [CM94, AMC93, CKAK94, CKTB95] </ref> is an active object-oriented DBMS that seamlessly integrates ECA rules into the object-oriented paradigm. The Sentinel architecture is an extension of the passive Open OODB system architecture [OOD93]. <p> These set of rules become part of the pool of rules available for grouping. 3 Implementation Details This section presents detailed design and implementation aspects of ECA rules for supporting various transaction models. Our implementation assumes the ECA rule functionality provided by Sentinel <ref> [AMC93, CKAK94, CKTB95] </ref>, an active OODBMS developed at UF. Although the details are presented in the context of an OODBMS, the approach is independent of the database model as explained earlier.
Reference: [CM94] <author> S. Chakravarthy and D. Mishra. Snoop: </author> <title> An Expressive Event Specification Language for Active Databases. </title> <journal> Data and Knowledge Engineering, </journal> <volume> 14(10) </volume> <pages> 1-26, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: To summarize, not only does the active database paradigm allow for the specification of transaction semantics but arbitrary semantics as well in an extensible manner. 2.1 Overview of Sentinel Sentinel <ref> [CM94, AMC93, CKAK94, CKTB95] </ref> is an active object-oriented DBMS that seamlessly integrates ECA rules into the object-oriented paradigm. The Sentinel architecture is an extension of the passive Open OODB system architecture [OOD93].
Reference: [ELLR90] <author> A. Elmagarmid, Y. Leu, W. Litwin, and M. Rusinkiewicz. </author> <title> A multidatabase transaction model for Interbase. </title> <booktitle> In Proceedings of International Conference of Very Large Data Bases, </booktitle> <month> August </month> <year> 1990. </year>
Reference-contexts: The current solution for meeting the diverse requirements of these applications has been the proposal of advanced or extended transaction models such as nested transactions, Sagas, ConTract model, and Flex transactions <ref> [Mos81, GMS87, Reu89, ELLR90] </ref>. These transaction models relax the ACID properties in various ways to better model the parallelism, consistency, and serializabil-ity requirements of non-traditional applications. Despite their benefits, the proposed transaction models are application-specific. In other words, each model serves the requirements of a particular class of applications.
Reference: [GHKM94] <author> D. Georgakopoulos, M. Hornick, P. Krychniak, and F. Manola. </author> <title> Specification and management of extended transactions in a programmable transaction environment. </title> <booktitle> In Proceedings IEEE Conference on Data Engineering, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: This approach, if successful, will obviate the need for developing DBMSs suited for specific application classes. It is equally important to avoid hardwiring the semantics of all known transaction models, as this increases runtime checking as well as the footprint of the transaction manager. Several frameworks including <ref> [Tra91, ASRS92, BP95, Moh94, BDG + 94, GHKM94] </ref> have been proposed for supporting various transaction models. Our approach differs from current approaches in that we use the active database paradigm as a mechanism for supporting extended transaction models in a novel way. <p> Similarly, the abort of a compensating transaction performs all operations executed when a top-level transaction aborts. However, it also restarts the compensating transaction again, i.e., the aborted compensating transaction is retried until it successfully commits. 5 Related Work Several efforts including <ref> [BDG + 94, GHKM94, BP95] </ref> have addressed the problem of supporting extended transaction models. ASSET [BDG + 94] provides a procedural approach for realizing transac 17 tion semantics in applications. Basically, a set of transaction primitives (e.g., begin, commit, wait) are provided along with their semantics. <p> A sophisticated used could also use these primitives directly. The data structures and the algorithms used to sketch the implementation of these primitives were described in a modified version of the EOS storage manager. DOM <ref> [GHKM94] </ref> views extended transactions as complex transactions which consist of a set of constituent transactions and a set of dependencies between them. Dependencies are classified into state and correctness dependencies. DOM supports extended transactions by accepting dependencies and enforcing them. Dependencies are expressed using the provided transaction specification language.
Reference: [GMS87] <author> H. Garcia-Molina and K. Salem. Sagas. </author> <booktitle> In Proceedings of the Conference on Database Systems in Office, Technique and Science, </booktitle> <pages> pages 249-259, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: The current solution for meeting the diverse requirements of these applications has been the proposal of advanced or extended transaction models such as nested transactions, Sagas, ConTract model, and Flex transactions <ref> [Mos81, GMS87, Reu89, ELLR90] </ref>. These transaction models relax the ACID properties in various ways to better model the parallelism, consistency, and serializabil-ity requirements of non-traditional applications. Despite their benefits, the proposed transaction models are application-specific. In other words, each model serves the requirements of a particular class of applications. <p> = set of objects held by T1 8 o i such that o i 2 OBJECTS delegate (o i , Tx-&gt;tid); // delegate all locks & uncommitted operations on o i to Tx T1-&gt;~ T ransaction Descriptor (); // remove transaction issuing join operation from transaction table 4.2 Sagas Sagas <ref> [GMS87] </ref> is a transaction model introduced to more adequately serve the requirements of long-lived transactions.
Reference: [GR93] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: 1 Introduction Conventional database management systems (DBMSs) guarantee atomicity, consistency, isolation and durability for each transaction (commonly referred to as the ACID properties) <ref> [GR93] </ref>. <p> The rules presented in this section 8 focus on concurrency control and functionality issues. Performance and recovery issues are being addressed separately and are beyond the scope of this paper. We have chosen commonly used data structures <ref> [GR93] </ref> to keep the description simple and easy to understand. The data structures, on which operations need to be trapped, are depicted in Figure 3 and are the transaction table, the object table and scheduler.
Reference: [LS95] <author> F. Llirbat and E. Simon. </author> <title> Optimizing active database transactions: A new perspective. </title> <booktitle> In proc. of the 1st Int'l Workshop on Active and Real-Time Database Systems, </booktitle> <address> Skovde, Sweden, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: In other words, efficiency need not necessarily be sacrificed if only one or a small set of transaction models are desired. This can be achieved by using the subscribe/unsubscribe functionality, or by compiling desired rules at configuration time <ref> [LS95] </ref>. Subscribe and unsubscribe allows us to decouple rules (condition-action pairs) from events, thereby reducing runtime overhead. * When a new event, such as delegate, is introduced for modeling the semantics of new transaction models, multiple rules can be associated with that event to provide different semantics.
Reference: [Moh94] <author> C. Mohan. </author> <title> Tutorial: A Survey and Critique of Advanced Transaction Models. </title> <booktitle> In Proceedings, International Conference on Management of Data, </booktitle> <pages> page 521, </pages> <address> Minneapolis, Minnesota, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: This approach, if successful, will obviate the need for developing DBMSs suited for specific application classes. It is equally important to avoid hardwiring the semantics of all known transaction models, as this increases runtime checking as well as the footprint of the transaction manager. Several frameworks including <ref> [Tra91, ASRS92, BP95, Moh94, BDG + 94, GHKM94] </ref> have been proposed for supporting various transaction models. Our approach differs from current approaches in that we use the active database paradigm as a mechanism for supporting extended transaction models in a novel way.
Reference: [Mos81] <author> J. E. Moss. </author> <title> Nested Transactions: An Approach to Reliable Distributed Computing. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, MIT, </institution> <year> 1981. </year>
Reference-contexts: The current solution for meeting the diverse requirements of these applications has been the proposal of advanced or extended transaction models such as nested transactions, Sagas, ConTract model, and Flex transactions <ref> [Mos81, GMS87, Reu89, ELLR90] </ref>. These transaction models relax the ACID properties in various ways to better model the parallelism, consistency, and serializabil-ity requirements of non-traditional applications. Despite their benefits, the proposed transaction models are application-specific. In other words, each model serves the requirements of a particular class of applications. <p> In the interest of efficient main memory utilization (hash tables reside in main memory), we did not opt for this. 10 3.1 Modeling Nested Transactions In the nested transaction model <ref> [Mos81] </ref>, a transaction may contain any number of subtransac-tions, and each subtransaction, in turn, may contain any number of subtransactions. Hence, the entire transaction forms a hierarchy of transactions the root of which is called the root or top-level transaction.
Reference: [OOD93] <author> OODB. </author> <title> Open OODB Toolkit, Release 0.2 (Alpha) Document. </title> <institution> Texas Instruments, Dallas, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: The Sentinel architecture is an extension of the passive Open OODB system architecture <ref> [OOD93] </ref>. The behavior of objects has been extended to facilitate support of both system level and application level active capability in a uniform manner. Specifically, objects, in Sentinel, are classified into: passive, reactive and notifiable objects.
Reference: [PKH88] <author> C. Pu, G. Kaiser, and N. Hutchinson. </author> <title> Split-transactions for open-ended activities. </title> <booktitle> In Proceedings, International Conference on Very Large Data Bases, </booktitle> <year> 1988. </year>
Reference-contexts: Specifically, we show how existing rules can be reused to express the semantics of other transaction models. Split transactions and Sagas are used as a basis for illustrating this. 4.1 Split Transactions Split transactions <ref> [PKH88] </ref>, were proposed mainly for supporting open-ended applications. In this transaction model, a transaction can execute the operation split-transaction which basically creates a new top-level transaction. The original transaction and the new transaction are serialized as if they are two independent transactions.
Reference: [Reu89] <author> A. Reuter. </author> <title> Contract: A means for extending control beyond transaction boundaries. </title> <booktitle> In Proceedings of the 2nd International Workshop on High Performance Transaction Systems, </booktitle> <month> September </month> <year> 1989. </year>
Reference-contexts: The current solution for meeting the diverse requirements of these applications has been the proposal of advanced or extended transaction models such as nested transactions, Sagas, ConTract model, and Flex transactions <ref> [Mos81, GMS87, Reu89, ELLR90] </ref>. These transaction models relax the ACID properties in various ways to better model the parallelism, consistency, and serializabil-ity requirements of non-traditional applications. Despite their benefits, the proposed transaction models are application-specific. In other words, each model serves the requirements of a particular class of applications.
Reference: [Tra91] <author> Transarc. </author> <title> Encina product review. </title> <type> Technical report, </type> <institution> Transarc Corp., </institution> <year> 1991. </year>
Reference-contexts: This approach, if successful, will obviate the need for developing DBMSs suited for specific application classes. It is equally important to avoid hardwiring the semantics of all known transaction models, as this increases runtime checking as well as the footprint of the transaction manager. Several frameworks including <ref> [Tra91, ASRS92, BP95, Moh94, BDG + 94, GHKM94] </ref> have been proposed for supporting various transaction models. Our approach differs from current approaches in that we use the active database paradigm as a mechanism for supporting extended transaction models in a novel way. <p> In this paper, we focus on the concurrency control aspects of 1 There exists an extensive body of research on database extensibility; some of the proposed techniques can be applied to transaction management (e.g., <ref> [Tra91, Bat88] </ref>). However, most of the approaches have concentrated on its applicability to other database functionality such as access methods, optimization and data types. In contrast, transaction management extensibility has so far received little attention. 2 transaction management and the uniform framework for capturing both application and transac-tion model semantics. <p> Each transaction adapter maintains the necessary data structures and operations on them for supporting extended transactions. Implementation of the transaction adapters is outlined using Encina <ref> [Tra91] </ref> as the underlying TP monitor. Our approach is different from ASSET in that our approach is based on system level ECA rules. Unlike the ASSET approach, we realize the semantics of individual units work in a transaction model and build ECA rules.
References-found: 21

