URL: http://www.cs.washington.edu/homes/sgberg/521/report.ps
Refering-URL: http://www.cs.washington.edu/homes/sgberg/521/index.html
Root-URL: 
Title: A Study of Linear-Time Sorting Algorithms  
Author: Stefan G. Berg 
Address: Seattle, WA 98105-2350  
Affiliation: Department of Computer Science Engineering University of Washington  
Date: 7 March 1995  
Abstract: This paper discusses performance differences between radix sort and bucket sort. Both sorting algorithms run in linear time given a fixed word size, but they differ in the assumptions they make on their input. Radix sort works equally well on any input. Bucket sort assumes that the input data is evenly distributed. One question this paper will try to answer is when one algorithm should be prefered over the other. Several implementation issues to improve performance of the algorithms are discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Thomas H. Cormen, Charles E. Leiserson, Ron-ald L. Rivest. </author> <title> Introduction To Algorithms. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1994. </year>
Reference-contexts: Of course this is cheating in a way, since we are assuming the availability of COUNTING-SORT. In this paper we will assume that the reader is familiar with counting sort and insertion sort <ref> [1] </ref>. A major shortcoming of counting sort is that its temporary storage requirements increases exponentially with the size of a word. In fact it turns out to be impractical on regular 32-bit integers, since one would need a 4 GB large temporary array for completing the algorithm.
Reference: [2] <author> Harry R. Lewis, Larry Denenberg. </author> <title> Data Structures & Their Algorithms. </title> <publisher> Harper Collins Publishers, </publisher> <address> New York, NY, </address> <year> 1991. </year> <month> 4 </month>
Reference-contexts: This may be used to verify if the reasoning in this paper is correct and may help to find other interesting aspects of the two sorting algorithms. * Look at radix exchange sort <ref> [2] </ref> and see if it is a good alternative to radix sort.
References-found: 2

