URL: http://www.research.att.com/library/trs/TRs/98/98.15/98.15.1.body.ps
Refering-URL: http://www.research.att.com/library/trs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: GRAPH PLANARIZATION  
Author: MAURICIO G.C. RESENDE AND CELSO C. RIBEIRO 
Abstract: We survey graph planarization and related problems. We first describe variants and applications of graph planarization. Then we focus on algorithms. We begin by describing the branch-and-cut algorithm of Junger and Mutzel (1996). Then, we review work on heuristics based on planarity testing and those based on two-phase procedures. Finally, computational results comparing algorithms for graph planarization are presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Angluin and L.G. Valiant. </author> <title> Probabilistic algorithms for Hamiltonian circuits and matchings. </title> <journal> J. Comp. Sys. Sci., </journal> <volume> 18 </volume> <pages> 155-190, </pages> <year> 1979. </year>
Reference-contexts: Their approach was later extended and improved by Goldschmidt and Takvo-rian [8]. In the first phase, these authors attempt to use a linear permutation of the nodes associated with an Hamiltonian cycle of G. Two strategies are used: (i) a randomized algorithm <ref> [1] </ref> that almost certainly finds a Hamiltonian cycle if one exists, and (ii) a greedy deterministic algorithm that seeks a Hamiltonian cycle. In the latter, the first node in the linear permutation is a minimum degree node in G.
Reference: [2] <author> R.J. Cimikowski. </author> <title> An analysis of heuristics for the maximum planar subgraph problem. </title> <booktitle> In Proceedings of the 6th ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 322-331, </pages> <year> 1995. </year>
Reference-contexts: In case this reassignment of colors is possible, then the size of the planar subgraph is increased by one edge. This post-optimization procedure is incorporated at the end of each GRASP iteration. 5. Computational Results Detailed results on a set of 75 test problems described in the literature <ref> [2, 8] </ref> are reported in [16]. Here, we summarize computational results illustrating the effectiveness of the two-phase heuristics described in the previous section, as well as that of the exact branch-and-cut algorithm.
Reference: [3] <author> G. Di Battista, P. Eades, R. Tamassia, and I.G. Tollis. </author> <title> Algorithms for drawing graphs: An annotated bibliography. Computational Geometry: </title> <journal> Theory and Applications, </journal> <volume> 1 </volume> <pages> 235-282, </pages> <year> 1994. </year>
Reference-contexts: A GRASP and path relinking approach for the two-layer case is given in Laguna and Mart [12], where one can also find a survey of the literature. Algorithms for graph drawing are reviewed in Battista, Eades, Tamassia, and Tollis <ref> [3] </ref>. In the planar augmentation problem, one wants to determine the minimum number of edges that need to be added to a planar graph such that the resulting graph is still planar and at least k-connected, where k is usually fixed to two or three.
Reference: [4] <author> P. Eades, L.R. Foulds, and J.W. Giffin. </author> <title> An efficient heuristic for identifying a maximum weight planar subgraph. </title> <booktitle> Lecture Notes in Mathematics, </booktitle> <volume> 952 </volume> <pages> 239-251, </pages> <year> 1982. </year>
Reference-contexts: In this paper, the authors also propose simulated annealing and tabu search heuristics for the approximate solution of the maximum weighted planar graph problem. Constructive heuristics based on maintaining a triangulated subgraph while making node and edge insertions are given in Foulds and Robinson [7], Eades, Foulds, and Giffin <ref> [4] </ref>, and Leung [14]. Another related variant is that of drawing a given graph such that the number of edge crossings is minimized. The crossing number problem has practical applications in circuit design and graph drawing, such as in CASE tools [20] and automated graphical display systems.
Reference: [5] <author> T.A. Feo and M.G.C. Resende. </author> <title> Greedy randomized adaptive search procedures. </title> <journal> Journal of Global Optimization, </journal> <volume> 6 </volume> <pages> 109-133, </pages> <year> 1995. </year>
Reference-contexts: To produce possibly better permutations, randomization and local search have been introduced in the greedy algorithm by Resende and Ribeiro [16] in the form of a greedy randomized adaptive search procedure (GRASP). A GRASP <ref> [5] </ref> is an iterative process, in which each iteration consists of two phases: construction and local search. The construction phase builds a feasible solution, whose neighborhood is explored by local search. The best solution over all GRASP iterations is returned as the result.
Reference: [6] <author> L.R. Foulds and R.W. Robinson. </author> <title> A strategy for solving the plant layout problem. </title> <journal> Operational Research Quarterly, </journal> <volume> 27 </volume> <pages> 845-855, </pages> <year> 1976. </year>
Reference-contexts: This variant has applications in automatic graph drawing, as well as in the design of survivable networks [17]. 3. An exact algorithm An exact branch-and-bound algorithm for the weighted graph planarization problem was introduced by Foulds and Robinson <ref> [6] </ref>, but was limited to small dense graphs. Only recently has there been a leap in the performance of exact methods for graph planarization with the branch-and-cut algorithm of Junger and Mutzel [11], which we describe next.
Reference: [7] <author> L.R. Foulds and R.W. Robinson. </author> <title> Graph theoretic heuristics for the plant layout problem. </title> <journal> Int. J. Production Research, </journal> <volume> 16 </volume> <pages> 27-37, </pages> <year> 1978. </year>
Reference-contexts: In this paper, the authors also propose simulated annealing and tabu search heuristics for the approximate solution of the maximum weighted planar graph problem. Constructive heuristics based on maintaining a triangulated subgraph while making node and edge insertions are given in Foulds and Robinson <ref> [7] </ref>, Eades, Foulds, and Giffin [4], and Leung [14]. Another related variant is that of drawing a given graph such that the number of edge crossings is minimized.
Reference: [8] <author> O. Goldschmidt and A. Takvorian. </author> <title> An efficient graph planarization two-phase heuristic. </title> <journal> Networks, </journal> <volume> 24 </volume> <pages> 69-73, </pages> <year> 1994. </year>
Reference-contexts: Take-fuji, Lee, and Cho [18] claimed superior performance of the two-phase approach of Takefuji and Lee [19] with respect to the heuristics described in he previous section. Their approach was later extended and improved by Goldschmidt and Takvo-rian <ref> [8] </ref>. In the first phase, these authors attempt to use a linear permutation of the nodes associated with an Hamiltonian cycle of G. <p> In case this reassignment of colors is possible, then the size of the planar subgraph is increased by one edge. This post-optimization procedure is incorporated at the end of each GRASP iteration. 5. Computational Results Detailed results on a set of 75 test problems described in the literature <ref> [2, 8] </ref> are reported in [16]. Here, we summarize computational results illustrating the effectiveness of the two-phase heuristics described in the previous section, as well as that of the exact branch-and-cut algorithm. <p> These results are based on a Fortran implementation of the GRASP heuristic of Resende and Ribeiro [16], on the original code of the branch-and-cut algorithm of Junger and Mutzel [11], and on published results for the heuristics of Takefuji and Lee [19] and Goldschmidt and Takvorian <ref> [8] </ref> (using the greedy algorithm for building the linear permutation) of the nodes. <p> 69 69 G13 50 367 70 131 135 125 G15 50 582 101 142 144 138 G17 100 742 116 219 236 213 G19 150 1064 127 297 311 290 We give, in the table above, results comparing the four approaches on a subset of the test problems described in <ref> [8] </ref>. For each instance, the table lists the number of nodes, the number of edges, and the size of the planar subgraphs produced by each algorithm.
Reference: [9] <author> M. Hasan and I.H. Osman. </author> <title> Local search algorithms for the maximal planar layout problem. </title> <journal> International Transactions in Operational Research, </journal> <volume> 2 </volume> <pages> 89-106, </pages> <year> 1995. </year>
Reference-contexts: To appear in Encyclopaedia of Optimization, Kluwer Academic Publishers, 1999. AT&T Labs Research Technical Report: 98.15.1. 1 2 M. G. C. RESENDE AND C. C. RIBEIRO weights are equal to one. An application of this problem to facility layout is described in <ref> [9] </ref>. A graph is built in which the vertices represent the facilities and the edges define the relationships between them. The weight of each edge is the desirability that the two facilities that define the edge be adjacent in the design.
Reference: [10] <author> J. Hopcroft and R.E. Tarjan. </author> <title> Efficient planarity testing. </title> <journal> J. ACM, </journal> <volume> 21 </volume> <pages> 549-568, </pages> <year> 1974. </year>
Reference-contexts: For 0 * 1, let E * = fe 2 E j x e 1 *g and consider the graph G * = (V; E * ), to which the planarity-testing algorithm of Hopcroft and Tarjan <ref> [10] </ref> is applied. The algorithm stops if it finds an edge set F which induces a nonplanar graph in G. If the inequality x (F ) jF j 1 is violated, it is added to the set of constraints of the current LP.
Reference: [11] <author> M. Junger and P. Mutzel. </author> <title> Maximum planar subgraphs and nice embeddings: Practical layout tools. </title> <journal> Algorithmica, </journal> <volume> 16 </volume> <pages> 33-59, </pages> <year> 1996. </year>
Reference-contexts: In this article, we survey graph planarization and related problems. In the next section, we describe variants and applications of the basic problem formulated above. Next, we describe the branch-and-cut algorithm of Junger and Mutzel <ref> [11] </ref>. We then review work on heuristics based on planarity testing and those based on two-phase procedures. Finally, computational results are considered. 2. <p> Only recently has there been a leap in the performance of exact methods for graph planarization with the branch-and-cut algorithm of Junger and Mutzel <ref> [11] </ref>, which we describe next. Given a graph G = (V; E), their approach uses facet-defining inequalities for the planar subgraph polytope PLS (G). <p> These results are based on a Fortran implementation of the GRASP heuristic of Resende and Ribeiro [16], on the original code of the branch-and-cut algorithm of Junger and Mutzel <ref> [11] </ref>, and on published results for the heuristics of Takefuji and Lee [19] and Goldschmidt and Takvorian [8] (using the greedy algorithm for building the linear permutation) of the nodes.
Reference: [12] <author> M. Laguna and R. Mart. </author> <title> Grasp and path relinking for 2-layer straight line crossing minimization. </title> <journal> INFORMS Journal on Computing, </journal> <note> 1998. to appear. </note>
Reference-contexts: One particular case is that of minimizing straight-line crossings in layered graphs. A GRASP and path relinking approach for the two-layer case is given in Laguna and Mart <ref> [12] </ref>, where one can also find a survey of the literature. Algorithms for graph drawing are reviewed in Battista, Eades, Tamassia, and Tollis [3].
Reference: [13] <author> T. Lengauer. </author> <title> Combinatorial algorithms for integrated circuit layout. </title> <publisher> John Wiley, </publisher> <year> 1990. </year>
Reference-contexts: Finally, computational results are considered. 2. Variants and applications An application of graph planarization arises in the design of integrated circuits, in which a graph describing the circuit has to be decomposed into a minimum number of layers, each of which is a planar graph <ref> [13] </ref>. Other applications arise from variants of the basic graph planarization problem. One such variant is the maximum weighted planar graph problem, in which positive weights are associated with the edges of the graph and one seeks a planar subgraph of maximum weight.
Reference: [14] <author> J. Leung. </author> <title> A new graph-theoretic heuristic for facility layout. </title> <journal> Management Science, </journal> <volume> 38 </volume> <pages> 594-605, </pages> <year> 1992. </year>
Reference-contexts: Constructive heuristics based on maintaining a triangulated subgraph while making node and edge insertions are given in Foulds and Robinson [7], Eades, Foulds, and Giffin [4], and Leung <ref> [14] </ref>. Another related variant is that of drawing a given graph such that the number of edge crossings is minimized. The crossing number problem has practical applications in circuit design and graph drawing, such as in CASE tools [20] and automated graphical display systems.
Reference: [15] <author> P.C. Liu and R.C. Geldmacher. </author> <title> On the deletion of nonplanar edges of a graph. </title> <booktitle> In Proceedings of the 10th SE Conf. on Comb., Graph Theory, and Comp., </booktitle> <pages> pages 727-738, </pages> <address> Boca Raton, </address> <year> 1977. </year>
Reference-contexts: Graph planarization is known to be NP-hard <ref> [15] </ref>. The proof of NP-completeness of its decision version is based on a transformation from the Hamiltonian path problem restricted to bipartite graphs. Although exact methods for solving the maximum planar subgraph problem have been recently proposed, most algorithms to date attempt to find good approximate solutions.
Reference: [16] <author> M.G.C. Resende and C.C. Ribeiro. </author> <title> A GRASP for graph planarization. </title> <journal> Networks, </journal> <volume> 29 </volume> <pages> 173-189, </pages> <year> 1997. </year>
Reference-contexts: Moreover, it is not clear that the permutation produced by the greedy algorithm is the best. To produce possibly better permutations, randomization and local search have been introduced in the greedy algorithm by Resende and Ribeiro <ref> [16] </ref> in the form of a greedy randomized adaptive search procedure (GRASP). A GRASP [5] is an iterative process, in which each iteration consists of two phases: construction and local search. The construction phase builds a feasible solution, whose neighborhood is explored by local search. <p> Hence, it is almost always beneficial to apply a local search to attempt to improve each constructed solution. A local search algorithm works in an iterative fashion by successively replacing the current solution by a better solution from its neighborhood. Resende and Ribeiro <ref> [16] </ref> propose an extension of the above described heuristic of Goldschmidt and Takvorian, in which a GRASP is used for finding a linear permutation of the nodes. <p> This post-optimization procedure is incorporated at the end of each GRASP iteration. 5. Computational Results Detailed results on a set of 75 test problems described in the literature [2, 8] are reported in <ref> [16] </ref>. Here, we summarize computational results illustrating the effectiveness of the two-phase heuristics described in the previous section, as well as that of the exact branch-and-cut algorithm. These results are based on a Fortran implementation of the GRASP heuristic of Resende and Ribeiro [16], on the original code of the branch-and-cut <p> the literature [2, 8] are reported in <ref> [16] </ref>. Here, we summarize computational results illustrating the effectiveness of the two-phase heuristics described in the previous section, as well as that of the exact branch-and-cut algorithm. These results are based on a Fortran implementation of the GRASP heuristic of Resende and Ribeiro [16], on the original code of the branch-and-cut algorithm of Junger and Mutzel [11], and on published results for the heuristics of Takefuji and Lee [19] and Goldschmidt and Takvorian [8] (using the greedy algorithm for building the linear permutation) of the nodes. <p> G. C. RESENDE AND C. C. RIBEIRO The GRASP consistently outperforms both other two-phase heuristics, not only for the problems reported in this table, but also for all of the remaining instances considered in <ref> [16] </ref>. A comparison of GRASP with the branch-and-cut algorithm depends heavily on the instances. The results reported in [16] can be separated into two groups. On 49 of the 55 instances in the first group, the GRASP either matched or produced better solutions than the branch-and-cut algorithm. <p> C. RIBEIRO The GRASP consistently outperforms both other two-phase heuristics, not only for the problems reported in this table, but also for all of the remaining instances considered in <ref> [16] </ref>. A comparison of GRASP with the branch-and-cut algorithm depends heavily on the instances. The results reported in [16] can be separated into two groups. On 49 of the 55 instances in the first group, the GRASP either matched or produced better solutions than the branch-and-cut algorithm. On 30 of those 55 instances, the GRASP solution was strictly better than the branch-and-cut solution.
Reference: [17] <author> M. Stoer. </author> <title> Design of survivable networks, </title> <booktitle> volume 1531 of Lecture Notes in Mathematics. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: This variant has applications in automatic graph drawing, as well as in the design of survivable networks <ref> [17] </ref>. 3. An exact algorithm An exact branch-and-bound algorithm for the weighted graph planarization problem was introduced by Foulds and Robinson [6], but was limited to small dense graphs.
Reference: [18] <author> Y. Takefuji, K.-C. Lee, and Y.B. Cho. </author> <title> Comments on "An O(n 2 ) algorithm for graph pla-narization". </title> <journal> IEEE Transactions on Computer Aided Design, </journal> <volume> 10 </volume> <pages> 1582-1583, </pages> <year> 1991. </year>
Reference-contexts: Takefuji and Lee [19] were the first to propose a heuristic using this idea. They use an arbitrary sequence of nodes in the first phase and apply a parallel heuristic using a neural network for the second phase. Take-fuji, Lee, and Cho <ref> [18] </ref> claimed superior performance of the two-phase approach of Takefuji and Lee [19] with respect to the heuristics described in he previous section. Their approach was later extended and improved by Goldschmidt and Takvo-rian [8].
Reference: [19] <author> Y. Takefuji and K.C. Lee. </author> <title> A near-optimum parallel planarization algorithm. </title> <journal> Science, </journal> <volume> 245 </volume> <pages> 1221-1223, </pages> <year> 1989. </year>
Reference-contexts: The first phase consists in devising a linear permutation of the nodes of the input graph, followed by placing them along a line. The second phase determines two sets of edges that may be represented without crossings above and below that line, respectively. Takefuji and Lee <ref> [19] </ref> were the first to propose a heuristic using this idea. They use an arbitrary sequence of nodes in the first phase and apply a parallel heuristic using a neural network for the second phase. <p> They use an arbitrary sequence of nodes in the first phase and apply a parallel heuristic using a neural network for the second phase. Take-fuji, Lee, and Cho [18] claimed superior performance of the two-phase approach of Takefuji and Lee <ref> [19] </ref> with respect to the heuristics described in he previous section. Their approach was later extended and improved by Goldschmidt and Takvo-rian [8]. In the first phase, these authors attempt to use a linear permutation of the nodes associated with an Hamiltonian cycle of G. <p> These results are based on a Fortran implementation of the GRASP heuristic of Resende and Ribeiro [16], on the original code of the branch-and-cut algorithm of Junger and Mutzel [11], and on published results for the heuristics of Takefuji and Lee <ref> [19] </ref> and Goldschmidt and Takvorian [8] (using the greedy algorithm for building the linear permutation) of the nodes.
Reference: [20] <author> R. Tamassia and G. Di Battista. </author> <title> Automatic graph drawing and readability of diagrams. </title> <journal> IEEE Trans. Sys., Man., and Cyber., </journal> <volume> 18 </volume> <pages> 61-79, </pages> <year> 1988. </year> <note> GRAPH PLANARIZATION 7 Information Sciences Research, </note> <institution> AT&T Labs Research, Florham Park, NJ 07932 USA. E-mail address: mgcr@research.att.com Department of Computer Science, Catholic University of Rio de Janeiro, Rio de Janeiro, </institution> <address> RJ 22453-900 Brazil. </address> <publisher> E-mail address: celso@inf.puc-rio.br </publisher>
Reference-contexts: Another related variant is that of drawing a given graph such that the number of edge crossings is minimized. The crossing number problem has practical applications in circuit design and graph drawing, such as in CASE tools <ref> [20] </ref> and automated graphical display systems. One particular case is that of minimizing straight-line crossings in layered graphs. A GRASP and path relinking approach for the two-layer case is given in Laguna and Mart [12], where one can also find a survey of the literature.
References-found: 20

