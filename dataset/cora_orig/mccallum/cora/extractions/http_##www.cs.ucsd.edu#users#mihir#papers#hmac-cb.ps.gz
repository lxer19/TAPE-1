URL: http://www.cs.ucsd.edu/users/mihir/papers/hmac-cb.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/mihir/papers/hmac.html
Root-URL: http://www.cs.ucsd.edu
Title: Message Authentication using Hash Functions| The HMAC Construction  
Author: Mihir Bellare Ran Canetti Hugo Krawczyk 
Date: 1, Spring 1996.  
Note: Appears in RSA Laboratories' CryptoBytes, Vol. 2, No.  
Abstract: There has recently been a lot of interest in the subject of authenticating information using cryptographic hash functions like MD5 and SHA, particularly for Internet security protocols. We report on our HMAC construction [1] which seems to be gaining acceptance as a solution. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Bellare, R. Canetti and H. Kraw-czyk. </author> <title> Keying hash functions for message authentication. </title> <booktitle> Advances in Cryptology - Crypto 96 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> ??, <editor> N. Koblitz ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: We now move on to discuss the HMAC construction, status, and rationale. For a complete description, implementation guidelines, and detailed analysis we refer the reader to <ref> [1, 9] </ref>. HMAC Let H be the hash function. For simplicity of description we may assume H to be MD5 or SHA-1; however the construction and analysis can be applied to other functions as well (see below). <p> For this purpose HMAC is described in the Internet Draft [9], and in an upcoming RFC. Other Internet protocols are adopting HMAC as well (e.g., s-http [14], SSL [7]). The rationale We now briefly explain some of the rationale used in <ref> [1] </ref> to justify the HMAC construction. As we indicated above, hash functions were not originally designed to be used for message authentication. In particular they are not keyed primitives, and it is not clear how best to "key" them. <p> Indeed the adversary is even allowed a chosen message attack under which she can influence the choice of messages for which the sender computes MACs. Following [4, 3] we quantify security in terms of the probability of successful forgery under such attacks. The analysis of <ref> [1] </ref> applies to hash functions of the iterated type, a class that includes MD5 and SHA, and consists of hash functions built by iterating applications of a compression function f according to the procedure of Merkle [11] and Damg-ard [5]. (In this construction a l-bit initial variable IV is fixed, and <p> this construction a l-bit initial variable IV is fixed, and the output of H on text x is computed by breaking x into 512 bit blocks and hashing in stages using f , in a simple way that the reader can find described in many places, e.g. [8].) Roughly what <ref> [1] </ref> say is that an attacker who can forge the HMAC function can, with the same effort (time and collected information), break the underlying hash function in one of the following ways: (1) The attacker finds collisions in the hash function even when the IV is random and secret, or (2) <p> The success of the second attack above would imply that these randomness properties of the hash functions are very poor. The analyses in <ref> [1] </ref> used to establish the above are exact (no asymptotics involved), consider generic rather than particular attacks, and establish a tight relationship between the securities. 3 Resistance to known attacks As shown in [12, 2], birthday attacks, that are the basis to finding collisions in cryptographic hash functions, can be applied
Reference: [2] <author> M. Bellare, R. Canetti and H. Kraw-czyk. </author> <title> Pseudorandom functions revisited: The cascade construction. </title> <type> Manuscript, </type> <month> April </month> <year> 1996. </year>
Reference-contexts: The analyses in [1] used to establish the above are exact (no asymptotics involved), consider generic rather than particular attacks, and establish a tight relationship between the securities. 3 Resistance to known attacks As shown in <ref> [12, 2] </ref>, birthday attacks, that are the basis to finding collisions in cryptographic hash functions, can be applied to attack also keyed MAC schemes based on iterated functions (including also CBC-MAC, and other schemes). These attacks apply to most (or all) of the proposed hash-based constructions of MACs.
Reference: [3] <author> M. Bellare, R. Gu erin and P. Rogaway. </author> <title> XOR MACs: New methods for message authentication using finite pseudorandom functions. </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Indeed the adversary is even allowed a chosen message attack under which she can influence the choice of messages for which the sender computes MACs. Following <ref> [4, 3] </ref> we quantify security in terms of the probability of successful forgery under such attacks.
Reference: [4] <author> M. Bellare, J. Kilian and P. Rogaway. </author> <title> The security of cipher block chaining. </title> <booktitle> Advances in Cryptology - Crypto 94 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 839, </volume> <editor> Y. Desmedt ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Email: canetti@theory. lcs.mit.edu. Supported by a post-doctoral grant from the Rothschild Foundation. z IBM T.J. Watson Research Center, PO Box 704, York-town Heights, New York 10598. Email: hugo@watson.ibm. com. the most popular is the CBC MAC. (Its security is analyzed in <ref> [4, 12] </ref>). More recently, however, people have suggested that MACs might be constructed from cryptographic hash functions like MD5 and SHA. <p> Indeed the adversary is even allowed a chosen message attack under which she can influence the choice of messages for which the sender computes MACs. Following <ref> [4, 3] </ref> we quantify security in terms of the probability of successful forgery under such attacks.
Reference: [5] <author> I. Damg -ard. </author> <title> A design principle for hash functions. </title> <booktitle> Advances in Cryptology - Crypto 89 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 435, </volume> <editor> G. Brassard ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: The analysis of [1] applies to hash functions of the iterated type, a class that includes MD5 and SHA, and consists of hash functions built by iterating applications of a compression function f according to the procedure of Merkle [11] and Damg-ard <ref> [5] </ref>. (In this construction a l-bit initial variable IV is fixed, and the output of H on text x is computed by breaking x into 512 bit blocks and hashing in stages using f , in a simple way that the reader can find described in many places, e.g. [8].) Roughly
Reference: [6] <author> National Institute for Standards and Technology. </author> <title> Digital Signature Standard (DSS). </title> <journal> Federal Register, </journal> <volume> Vol. 56, No. 169, </volume> <month> August, </month> <year> 1991 </year>
Reference-contexts: Thus, even if the hash function is not collision-free in the traditional sense, our schemes could be secure. Some "randomness" of hash functions is assumed in their usage for key generation and as pseudorandom generators. (For example the designers of SHA suggested that SHA be used for this purpose <ref> [6] </ref>.) Randomness of the function is also used as a design methodology towards achieving collision-resistance. The success of the second attack above would imply that these randomness properties of the hash functions are very poor.
Reference: [7] <author> A.O. Freier, P. Karlton, and P. C. Kocher. </author> <title> The SSL Protocol Version 3.0. Internet draft draft-freier-ssl-version3-01.txt, </title> <month> March </month> <year> 1996. </year>
Reference-contexts: For this purpose HMAC is described in the Internet Draft [9], and in an upcoming RFC. Other Internet protocols are adopting HMAC as well (e.g., s-http [14], SSL <ref> [7] </ref>). The rationale We now briefly explain some of the rationale used in [1] to justify the HMAC construction. As we indicated above, hash functions were not originally designed to be used for message authentication.
Reference: [8] <author> B. Kaliski and M. Robshaw. </author> <title> Message Authentication with MD5. </title> <journal> RSA Labs' Crypto-Bytes, </journal> <volume> Vol. 1 No. 1, </volume> <month> Spring </month> <year> 1995. </year>
Reference-contexts: In particular the reader is referred to Tsudik [17], who provides one of the earliest works on the subject; Kaliski and Robshaw who, in the first CryptoBytes <ref> [8] </ref>, compare various possible constructions; updates appearing in succeeding issues of CryptoBytes; and Preneel and van Oorschot [12, 13], who present a detailed description of the effect of birthday attacks on "iterated constructions" and also a new construction called MDx-MAC. <p> Damg-ard [5]. (In this construction a l-bit initial variable IV is fixed, and the output of H on text x is computed by breaking x into 512 bit blocks and hashing in stages using f , in a simple way that the reader can find described in many places, e.g. <ref> [8] </ref>.) Roughly what [1] say is that an attacker who can forge the HMAC function can, with the same effort (time and collected information), break the underlying hash function in one of the following ways: (1) The attacker finds collisions in the hash function even when the IV is random and
Reference: [9] <author> H. Krawczyk, M. Bellare and R. Can-etti. HMAC-MD5: </author> <title> Keyed-MD5 for Message Authentication. Internet draft draft-ietf-ipsec-hmac-md5-txt.00, </title> <month> March </month> <year> 1996. </year>
Reference-contexts: We now move on to discuss the HMAC construction, status, and rationale. For a complete description, implementation guidelines, and detailed analysis we refer the reader to <ref> [1, 9] </ref>. HMAC Let H be the hash function. For simplicity of description we may assume H to be MD5 or SHA-1; however the construction and analysis can be applied to other functions as well (see below). <p> HMAC was recently chosen as the mandatory-to-implement authentication transform for the Internet security protocols being designed by the IPSEC working group of the IETF (it replaces as a mandatory transform the one described in [10]). For this purpose HMAC is described in the Internet Draft <ref> [9] </ref>, and in an upcoming RFC. Other Internet protocols are adopting HMAC as well (e.g., s-http [14], SSL [7]). The rationale We now briefly explain some of the rationale used in [1] to justify the HMAC construction.
Reference: [10] <author> P. Metzger and W. Simpson. </author> <title> IP Authentication using Keyed MD5", IETF Network Working Group, </title> <type> RFC 1828, </type> <month> August </month> <year> 1995. </year>
Reference-contexts: HMAC was recently chosen as the mandatory-to-implement authentication transform for the Internet security protocols being designed by the IPSEC working group of the IETF (it replaces as a mandatory transform the one described in <ref> [10] </ref>). For this purpose HMAC is described in the Internet Draft [9], and in an upcoming RFC. Other Internet protocols are adopting HMAC as well (e.g., s-http [14], SSL [7]). The rationale We now briefly explain some of the rationale used in [1] to justify the HMAC construction.
Reference: [11] <author> R. Merkle. </author> <title> One way hash functions and DES. </title> <booktitle> Advances in Cryptology - Crypto 89 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 435, </volume> <editor> G. Brassard ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1989. </year> <title> (Based on unpublished paper from 1979 and his Ph. </title> <type> D thesis, </type> <institution> Stanford, </institution> <year> 1979). </year>
Reference-contexts: The analysis of [1] applies to hash functions of the iterated type, a class that includes MD5 and SHA, and consists of hash functions built by iterating applications of a compression function f according to the procedure of Merkle <ref> [11] </ref> and Damg-ard [5]. (In this construction a l-bit initial variable IV is fixed, and the output of H on text x is computed by breaking x into 512 bit blocks and hashing in stages using f , in a simple way that the reader can find described in many places,
Reference: [12] <author> B. Preneel and P. van Oorschot. </author> <title> MD-x MAC and building fast MACs from hash functions. </title> <booktitle> Advances in Cryptology - Crypto 95 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 963, </volume> <editor> D. Coppersmith ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Email: canetti@theory. lcs.mit.edu. Supported by a post-doctoral grant from the Rothschild Foundation. z IBM T.J. Watson Research Center, PO Box 704, York-town Heights, New York 10598. Email: hugo@watson.ibm. com. the most popular is the CBC MAC. (Its security is analyzed in <ref> [4, 12] </ref>). More recently, however, people have suggested that MACs might be constructed from cryptographic hash functions like MD5 and SHA. <p> In particular the reader is referred to Tsudik [17], who provides one of the earliest works on the subject; Kaliski and Robshaw who, in the first CryptoBytes [8], compare various possible constructions; updates appearing in succeeding issues of CryptoBytes; and Preneel and van Oorschot <ref> [12, 13] </ref>, who present a detailed description of the effect of birthday attacks on "iterated constructions" and also a new construction called MDx-MAC. We now move on to discuss the HMAC construction, status, and rationale. <p> The analyses in [1] used to establish the above are exact (no asymptotics involved), consider generic rather than particular attacks, and establish a tight relationship between the securities. 3 Resistance to known attacks As shown in <ref> [12, 2] </ref>, birthday attacks, that are the basis to finding collisions in cryptographic hash functions, can be applied to attack also keyed MAC schemes based on iterated functions (including also CBC-MAC, and other schemes). These attacks apply to most (or all) of the proposed hash-based constructions of MACs.
Reference: [13] <author> B. Preneel and P. van Oorschot. </author> <title> On the security of two MAC algorithms. </title> <booktitle> Advances in Cryptology - Eurocrypt 96 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> ??, <editor> U. Maurer ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: In particular the reader is referred to Tsudik [17], who provides one of the earliest works on the subject; Kaliski and Robshaw who, in the first CryptoBytes [8], compare various possible constructions; updates appearing in succeeding issues of CryptoBytes; and Preneel and van Oorschot <ref> [12, 13] </ref>, who present a detailed description of the effect of birthday attacks on "iterated constructions" and also a new construction called MDx-MAC. We now move on to discuss the HMAC construction, status, and rationale.
Reference: [14] <author> E. Rescorla and A. Schiffman. </author> <title> The Secure HyperText Transfer Protocol. Internet draft draft-ietf-wts-shttp-01.txt, </title> <booktitle> Febru-ary 1996. </booktitle> <pages> 4 </pages>
Reference-contexts: For this purpose HMAC is described in the Internet Draft [9], and in an upcoming RFC. Other Internet protocols are adopting HMAC as well (e.g., s-http <ref> [14] </ref>, SSL [7]). The rationale We now briefly explain some of the rationale used in [1] to justify the HMAC construction. As we indicated above, hash functions were not originally designed to be used for message authentication.
Reference: [15] <author> R. Rivest. </author> <title> The MD5 message-digest al-gorithm. IETF Network Working Group, </title> <type> RFC 1321, </type> <month> April </month> <year> 1992. </year>
Reference: [16] <editor> FIPS 180-1. </editor> <title> Secure Hash Standard. Federal Information Processing Standard (FIPS), </title> <type> Publication 180-1, </type> <institution> National Institute of Standards and Technology, US Department of Commerce, </institution> <address> Washington D.C., </address> <month> April </month> <year> 1995. </year>
Reference: [17] <author> G. Tsudik. </author> <title> Message authentication with one-way hash functions. </title> <booktitle> Proceedings of Info-com 92. </booktitle>
Reference-contexts: In particular the reader is referred to Tsudik <ref> [17] </ref>, who provides one of the earliest works on the subject; Kaliski and Robshaw who, in the first CryptoBytes [8], compare various possible constructions; updates appearing in succeeding issues of CryptoBytes; and Preneel and van Oorschot [12, 13], who present a detailed description of the effect of birthday attacks on "iterated
Reference: [18] <author> P. van Oorschot and M. Wiener. </author> <title> Parallel Collision Search with Applications to Hash Functions and Discrete Logarithms. </title> <booktitle> Proceedings of the 2nd ACM Conf. Computer and Communications Security, </booktitle> <address> Fairfax, VA, </address> <month> November </month> <year> 1994. </year> <month> 5 </month>
Reference-contexts: On a 1 Gbit/sec communication link, one would need 250,000 years to process all the data required by such an attack. This is in sharp contrast to birthday attacks on key-less hash functions which allow for far more efficient and close-to-realistic attacks <ref> [18] </ref>.
References-found: 18

