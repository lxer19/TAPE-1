URL: http://www.cs.umd.edu/users/cml/work/pubs/1995-ewspt.ps.gz
Refering-URL: http://www.cs.umd.edu/users/cml/work/pubs/
Root-URL: 
Email: flott, hoisl, rombachg@informatik.uni-kl.de  
Title: The Use of Roles and Measurement to Enact Project Plans in MVP-S Establishment of Measurement
Author: Christopher Lott, Barbara Hoisl, and H. Dieter Rombach 
Date: 35 April 1995  
Note: Appeared in the Proceedings of the Fourth European Workshop on Software Process Technology,  Supported by the Software Technology Transfer Initiative Kaiserslautern (STTI-KL). Supported by ESSI Project Number 10358, Customized  
Address: 67653 Kaiserslautern, Germany  
Affiliation: Research Group for Software Engineering Department of Computer Science University of Kaiserslautern  
Abstract: Software development organizations are beginning to recognize that measurement is a prerequisite for systematic process improvement, and have started to measure their products and processes in order to understand, analyze, plan, and guide their projects. Successful measurement requires a solid understanding of the products, processes, and resources to be measured, an understanding which can only be gained via explicit models. In the MVP Project we are integrating the G/Q/M measurement paradigm with the MVP-L process modeling language in order to guide teams of software developers. This integrated approach is supported by a prototype system, MVP-S, a process-sensitive software engineering environment which offers advanced project guidance using role definitions and measurement data. We motivate the need for measurement, sketch an 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Victor R. Basili. </author> <title> The Experience Factory and its relationship to other improvement paradigms. </title> <booktitle> In Ian Sommerville and Manfred Appeared in Proc. 4th European Workshop on Software Process Technology, </booktitle> <month> April </month> <year> 1995 </year> <month> 19 Paul, </month> <editor> editors, </editor> <booktitle> Proceedings of the Fourth Euro-pean Software Engineering Conference, </booktitle> <pages> pages 6883. </pages> <note> Lecture Notes in Computer Science Nr. 717, SpringerVerlag, </note> <year> 1993. </year>
Reference-contexts: We claim that integrating measurement and modeling will yield synergy effects from which both the group developing a product (the project organization) and the group responsible for corporate process improvement (the Experience Factory, <ref> [1] </ref>) will benefit. First, quantitative criteria are added to process models to define the successful outcome for a process step; the data collected during the project are used to evaluate these criteria and thereby help developers decide on appropriate courses of action.
Reference: [2] <author> Victor R. Basili and H. Dieter Rombach. </author> <title> The TAME Project: Towards improvement oriented software environments. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-14(6):758773, </volume> <month> June </month> <year> 1988. </year>
Reference-contexts: The problem of deciding what data to collect is outside the scope of the paper; see <ref> [3, 2] </ref>. We offer the following definitions to avoid misun derstandings caused by overloaded terminology: 1. Empirical data: objective and subjective data gathered from a project's products, processes, and resources, including data collected by querying people and by using tools to measure work products. 2. <p> Measurement and modeling are complementary approaches which enjoy a synergy effect when applied together [25]. We use the G/Q/M Paradigm for defining measurement plans <ref> [3, 2] </ref>, and the formalism MVP-L for writing project plans. The integration of measurement into project plans means defining the 2 Includes designers, programmers, testers, quality assurance engineers, maintainers, etc.
Reference: [3] <author> Victor R. Basili and David M. Weiss. </author> <title> A methodology for collecting valid software engineering data. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(6):728738, </volume> <month> Novem-ber </month> <year> 1984. </year>
Reference-contexts: The problem of deciding what data to collect is outside the scope of the paper; see <ref> [3, 2] </ref>. We offer the following definitions to avoid misun derstandings caused by overloaded terminology: 1. Empirical data: objective and subjective data gathered from a project's products, processes, and resources, including data collected by querying people and by using tools to measure work products. 2. <p> Providing this information on-line will help people understand the goals and allow them to refresh their memories as needed. These issues, also discussed in <ref> [3] </ref>, motivate the following requirements: R12, explain data definitions on-line. R13, explain goals and intended use of the collected data on-line. Next we discuss data which is linked to individuals. First, storage of such data is restricted by law in many countries, Germany among them. <p> Measurement and modeling are complementary approaches which enjoy a synergy effect when applied together [25]. We use the G/Q/M Paradigm for defining measurement plans <ref> [3, 2] </ref>, and the formalism MVP-L for writing project plans. The integration of measurement into project plans means defining the 2 Includes designers, programmers, testers, quality assurance engineers, maintainers, etc.
Reference: [4] <author> Steve Benford, Edmund Burke, and Eric Fox-ley. </author> <title> Learning to construct quality software with the Ceilidh system. </title> <journal> Software Quality Journal, </journal> <volume> 2(3):177197, </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: Provence offers process definition capabilities via its subcomponent Marvel [17], but the collected data are not used for guiding the process. The Ceilidh system <ref> [4] </ref> is a quality control system for teaching students to develop programs according to specifications (functional correctness) and to predefined, empirical quality standards for the code (style, complexity, etc.) Ceilidh supports only the coding activity and collects its data when students submit their code for evaluation.
Reference: [5] <author> Alfred Brockers, Christopher M. Lott, H. Dieter Rombach, and Martin Verlage. </author> <title> MVP Language Report. </title> <type> Technical Report 229/92, </type> <institution> Fach-bereich Informatik, Universitat Kaiserslautern, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: allows the use of empirical data to write constraints that describe the legal start (entry), Appeared in Proc. 4th European Workshop on Software Process Technology, April 1995 8 Appeared in Proc. 4th European Workshop on Software Process Technology, April 1995 9 execution (invariant), and termination (exit) conditions for process steps <ref> [5, 20] </ref>. The formalism supports abstraction and refinement of processes, products, and resources, and encourages reuse of models by splitting all models according to their specification (externally visible interface) and body (implementation or refinement of that interface). 4.1.2 The Use of Roles in MVP-S.
Reference: [6] <author> R. Conradi, C. C. Malm, E. Lyngra, P. H. Westby, and C. Liu. </author> <title> The EPOS approach to the software process model example problem. </title> <booktitle> In Collected Solutions from the Sixth International Software Process Workshop, </booktitle> <month> October </month> <year> 1990. </year>
Reference: [7] <author> Bill Curtis, Herb Krasner, and Neil Iscoe. </author> <title> A field study of the software design process for large systems. </title> <journal> Communications of the ACM, </journal> <volume> 31(11):12681287, </volume> <month> November </month> <year> 1988. </year>
Reference-contexts: We believe that causes of poor intellectual control over projects include an organization's uncertain understanding of its weaknesses and strengths, continual changes in the marketplace leading to volatile requirements, and inadequate communication among personnel during projects <ref> [7] </ref>. One approach towards gaining a solid understanding of the organization, managing constant change within a project, and improving communi 1 Appeared in Proc. 4th European Workshop on Software Process Technology, April 1995 2 cation among personnel is planning and guiding a project using measurement and explicit process models.
Reference: [8] <author> Susan A. Dart, Robert J. Ellison, Peter H. Feiler, and A. Nico Habermann. </author> <booktitle> Software development environments. IEEE Computer, </booktitle> <pages> pages 1828, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: Section 4 presents our prototype system, MVP-S. Section 5 uses a well-known process to give a detailed example of using measurement data to enact a project plan using MVP-S, and Sect. 6 offers some conclusions. 2 Related Work Many systems support defining and performing processes <ref> [8, 32, 18, 12] </ref>, but only a few support the collection and use of empirical data [23, 24]. A few SEEs which address the issue of measurement in some way, including data collection for understanding and use of data to provide guidance, are summarized here.
Reference: [9] <author> Raymond Dion. </author> <title> Process improvement and the corporate balance sheet. </title> <journal> IEEE Software, </journal> <volume> 10(4):2835, </volume> <month> July </month> <year> 1993. </year>
Reference-contexts: To address this issue, both management and technical people must be educated about the costs associated with collecting and validating data, as well as the benefits that stem from analyzing the data (for cost-benefit analyses, see <ref> [28, 9] </ref>). Second, all attempts must be made to minimize the effort of providing data and the intrusiveness on people's work. The computer can reduce the effort of collecting data by automating some collection activities and decreasing the effort required for other activities.
Reference: [10] <author> William M. Evanco and Robert Lacovara. </author> <title> A model-based framework for the integration of software metrics. </title> <journal> Journal of Systems and Software, </journal> <volume> 26(1):7786, </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: These models capture organizational knowledge and are often expressed as formulas. Empirical models invariably depend on the organizational context and may be used to predict such attributes as cost or reliability for future projects that are performed in the same context <ref> [10] </ref>. 3. Role: a set of activities which an agent performs. Lonchamp describes the functionality of a role definition in [22] as permissions to perform the set of activities [...] and obligations to satisfy the corresponding constraints. 4.
Reference: [11] <author> Christer Fernstr om. </author> <title> Process WEAVER: Adding process support to UNIX. </title> <booktitle> In Proceedings of the Second International Conference on the Software Process, </booktitle> <pages> pages 1226. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> February </month> <year> 1993. </year>
Reference-contexts: R2, recognize occurrences of triggers. R3, invoke tools to collect data. The SEEs must be coupled with on-line work to justify the preceding discussion of invoking tools to collect data. Fernstrom introduces four coupling levels in <ref> [11] </ref>, namely loosely coupled (a euphemism for uncoupled; the SEE only knows what people tell it), active support (access to work products is partially automated), process enforcement, (access to work products is totally controlled), and process automation (no human intervention is required).
Reference: [12] <author> Alfonso Fuggetta and Carlo Ghezzi. </author> <title> State of the art and open issues in process-centered software engineering environments. </title> <journal> Journal of Systems and Software, </journal> <volume> 26(1):5360, </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: Section 4 presents our prototype system, MVP-S. Section 5 uses a well-known process to give a detailed example of using measurement data to enact a project plan using MVP-S, and Sect. 6 offers some conclusions. 2 Related Work Many systems support defining and performing processes <ref> [8, 32, 18, 12] </ref>, but only a few support the collection and use of empirical data [23, 24]. A few SEEs which address the issue of measurement in some way, including data collection for understanding and use of data to provide guidance, are summarized here.
Reference: [13] <author> P. Giese, B. Hoisl, C. M. Lott, and H. D. Rom-bach. </author> <title> Data collection in a process-sensitive software engineering environment. </title> <booktitle> In Proceedings of the Ninth International Software Process Workshop, </booktitle> <pages> pages 4749, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: We state requirements which a process-sensitive software engineering environment must satisfy in order to collect empirical data from personnel during a software project. Our requirements, which were first sketched in <ref> [13] </ref>, are divided into basic technical issues, technical issues due to human involvement, and nontechnical issues.
Reference: [14] <author> Robert B. Grady. </author> <title> Work-product analysis: </title> <journal> the philosopher's stone of software? IEEE Software, </journal> <volume> 7:2634, </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: Third, feedback can be provided early during process steps when corrective action may be taken <ref> [14, 39] </ref>, not after a process step has ended. We have implemented MVP-S, a process-sensitive software engineering environment (SEE), that supports our integrated approach for enacting project plans using role definitions and measurement data. This system is the first prototype of our ideas for integrating process modeling and measurement [25].
Reference: [15] <author> Hewlet Packard Company. Synervision marketing literature, </author> <year> 1992-1994. </year>
Reference-contexts: Ceilidh, like Ginger, does not treat the process as a variable. The SynerVision system <ref> [15] </ref> supports defining, guiding, and enforcing a process for software development activities by defining and enacting process scripts.
Reference: [16] <author> Karen E. Huff. </author> <title> Software process measurement session summary. </title> <editor> In Wilhelm Schafer, editor, </editor> <booktitle> Proceedings of the Eighth International Software Process Workshop, </booktitle> <pages> pages 1821. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1993. </year> <booktitle> Appeared in Proc. 4th European Workshop on Software Process Technology, </booktitle> <month> April </month> <year> 1995 </year> <month> 20 </month>
Reference-contexts: script, but all other data collection and use of data in dependencies is supported by the tools, not the system. 3 Requirements for Data Collection This section addresses the problem of gathering empirical data from an ongoing software project using a SEE, sometimes called placing hooks into the real world <ref> [16] </ref>. But unlike programmatic hooks, by which some software packages may be customized and which run automatically, data collection hooks often depend on human interaction.
Reference: [17] <author> Gail Kaiser, N. S. Barghouti, and M. H. Sokol-sky. </author> <title> Preliminary experience with process modeling in the MARVEL software development environment kernel. </title> <booktitle> In Proceedings of the 23 rd Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume II, </volume> <pages> pages 131140. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1990. </year>
Reference-contexts: Appeared in Proc. 4th European Workshop on Software Process Technology, April 1995 4 The Provence system [21] is a process monitoring and data visualization system that has advanced hooks into the file system of its host computer. Provence offers process definition capabilities via its subcomponent Marvel <ref> [17] </ref>, but the collected data are not used for guiding the process.
Reference: [18] <author> Anthony S. Karrer and Walt Scacchi. </author> <title> Meta-environments for software production. </title> <journal> International Journal of Software Engineering & Knowledge Engineering, </journal> <volume> 3(1):139162, </volume> <year> 1993. </year>
Reference-contexts: Section 4 presents our prototype system, MVP-S. Section 5 uses a well-known process to give a detailed example of using measurement data to enact a project plan using MVP-S, and Sect. 6 offers some conclusions. 2 Related Work Many systems support defining and performing processes <ref> [8, 32, 18, 12] </ref>, but only a few support the collection and use of empirical data [23, 24]. A few SEEs which address the issue of measurement in some way, including data collection for understanding and use of data to provide guidance, are summarized here.
Reference: [19] <author> Marc I. Kellner, Peter H. Feiler, Anthony Finkelstein, Takuya Katayama, Leon J. Oster-weil, Maria H. Penedo, and H. Dieter Rom-bach. </author> <title> Software process modeling example problem. </title> <editor> In Takuya Katayama, editor, </editor> <booktitle> Proceedings of the Sixth International Software Process Workshop, pages 1929. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1990. </year>
Reference-contexts: For our project we reuse the Software Process Modeling Example Problem that was developed for the Sixth International Software Process Workshop <ref> [19] </ref>. In this scenario, a team of maintainers cooperates to design, code, and test a maintenance change to a software module. Figure 5 presents a view of the project showing the major control flow relationships among the individual process steps.
Reference: [20] <author> C. D. Klingler, M. Neviaser, A. Marmor-Squires, C. M. Lott, and H. D. Rombach. </author> <title> A case study in process representation using MVPL. </title> <booktitle> In Proceedings of the Seventh Annual Conference on Computer Assurance (COMPASS 92), </booktitle> <pages> pages 137146, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: allows the use of empirical data to write constraints that describe the legal start (entry), Appeared in Proc. 4th European Workshop on Software Process Technology, April 1995 8 Appeared in Proc. 4th European Workshop on Software Process Technology, April 1995 9 execution (invariant), and termination (exit) conditions for process steps <ref> [5, 20] </ref>. The formalism supports abstraction and refinement of processes, products, and resources, and encourages reuse of models by splitting all models according to their specification (externally visible interface) and body (implementation or refinement of that interface). 4.1.2 The Use of Roles in MVP-S.
Reference: [21] <author> Balachander Krishnamurthy and Naser S. Barghouti. Provence: </author> <title> a process visualization and enactment environment. </title> <editor> In Ian Som-merville and Manfred Paul, editors, </editor> <booktitle> Proceedings of the Fourth European Software Engineering Conference, pages 451465. Lecture Notes in Computer Science Nr. </booktitle> <volume> 717, </volume> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: A particular focus in this system is on using templates to support the construction of measurement plans in the form of a set of goals, questions, and metrics. Appeared in Proc. 4th European Workshop on Software Process Technology, April 1995 4 The Provence system <ref> [21] </ref> is a process monitoring and data visualization system that has advanced hooks into the file system of its host computer. Provence offers process definition capabilities via its subcomponent Marvel [17], but the collected data are not used for guiding the process. <p> However, it is simple to specify such triggers as saving a file from an editor or compiling a source-code file, and it is equally simple for a machine to recognize their occurrences. For example, in the Provence system <ref> [21] </ref>, a recognizable trigger consists Appeared in Proc. 4th European Workshop on Software Process Technology, April 1995 5 of moving a document into a designated directory. <p> Second, all attempts must be made to minimize the effort of providing data and the intrusiveness on people's work. The computer can reduce the effort of collecting data by automating some collection activities and decreasing the effort required for other activities. The following requirement is also addressed in <ref> [21] </ref>: R15, minimize intrusiveness and overhead. Appeared in Proc. 4th European Workshop on Software Process Technology, April 1995 7 4 MVP-S, A Prototype SEE The MVP-S system provides role-specific guidance to software developers during their projects based on explicit project plans, role definitions, quality models, and collected measurement data.
Reference: [22] <author> Jaques Lonchamp. </author> <title> A structured conceptual and terminological framework for software process engineering. </title> <booktitle> In Proceedings of the Second International Conference on the Software Process, </booktitle> <pages> pages 4153. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> February </month> <year> 1993. </year>
Reference-contexts: Role: a set of activities which an agent performs. Lonchamp describes the functionality of a role definition in <ref> [22] </ref> as permissions to perform the set of activities [...] and obligations to satisfy the corresponding constraints. 4. <p> We specify entry and exit constraints using empirical data. 5. Guidance: indirect support to actual software developers or managers working with a process-centered software engineering environment through interpretation of an instantiated process model <ref> [22] </ref>. The support may consist of indicating which activities need to be performed or of showing collected data values as compared to target values. <p> Process-sensitive software engineering environment (SEE): a computer system that provides some assistance to its users by interpreting explicit guidance-oriented [...] software process models <ref> [22] </ref>. Our understanding extends this definition in that the system also collects data during the project and provides feedback based on the collected data.
Reference: [23] <author> Christopher M. </author> <title> Lott. </title> <booktitle> Process and measurement support in SEEs. ACM SIGSOFT Software Engineering Notes, </booktitle> <address> 18(4):8393, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: well-known process to give a detailed example of using measurement data to enact a project plan using MVP-S, and Sect. 6 offers some conclusions. 2 Related Work Many systems support defining and performing processes [8, 32, 18, 12], but only a few support the collection and use of empirical data <ref> [23, 24] </ref>. A few SEEs which address the issue of measurement in some way, including data collection for understanding and use of data to provide guidance, are summarized here.
Reference: [24] <author> Christopher M. Lott. </author> <title> Measurement support in software engineering environments. </title> <journal> International Journal of Software Engineering & Knowledge Engineering, </journal> <volume> 4(3):409426, </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: well-known process to give a detailed example of using measurement data to enact a project plan using MVP-S, and Sect. 6 offers some conclusions. 2 Related Work Many systems support defining and performing processes [8, 32, 18, 12], but only a few support the collection and use of empirical data <ref> [23, 24] </ref>. A few SEEs which address the issue of measurement in some way, including data collection for understanding and use of data to provide guidance, are summarized here.
Reference: [25] <author> Christopher M. Lott and H. Dieter Rom-bach. </author> <title> Measurement-based guidance of software projects using explicit project plans. </title> <journal> Information and Software Technology, </journal> <volume> 35(6/7):407419, </volume> <month> June/July </month> <year> 1993. </year>
Reference-contexts: We have implemented MVP-S, a process-sensitive software engineering environment (SEE), that supports our integrated approach for enacting project plans using role definitions and measurement data. This system is the first prototype of our ideas for integrating process modeling and measurement <ref> [25] </ref>. We give a detailed example of enacting a project plan using role definitions and measurement data to illustrate the advantages of our integrated approach. <p> The prototype offers limited support for all activities involving these roles, but concentrates on collecting data from and offering guidance to the personnel who play the technical roles. 4.1.3 Integration of Measurement. Measurement and modeling are complementary approaches which enjoy a synergy effect when applied together <ref> [25] </ref>. We use the G/Q/M Paradigm for defining measurement plans [3, 2], and the formalism MVP-L for writing project plans. The integration of measurement into project plans means defining the 2 Includes designers, programmers, testers, quality assurance engineers, maintainers, etc.
Reference: [26] <author> Vahid Mashayekhi, Janet M. Drake, Wei-Tek Tsai, and John Riedl. </author> <title> Distributed, collaborative software inspection. </title> <journal> IEEE Software, </journal> <volume> 10:6675, </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: One involves attaching data collection to a version control system, where the action of checking a document into the system is defined as the trigger. Another example is presented by the tools for conducting inspections of documents on-line <ref> [26] </ref>, which could be used to gather data about the complex inspection process at low cost. Finally, CASE tools for constructing software work products offer a great (yet mostly neglected) possibility for collecting data about those products.
Reference: [27] <author> Ken-ichi Matsumoto, Shinji Kusumoto, Tohru Kikuno, and Koji Torii. </author> <title> A new framework of measuring software development processes. </title> <booktitle> In Proceedings of the First International Software Metrics Symposium, </booktitle> <pages> pages 108118. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1993. </year>
Reference-contexts: A few SEEs which address the issue of measurement in some way, including data collection for understanding and use of data to provide guidance, are summarized here. The Ginger system <ref> [27] </ref> consists of a set of monitoring and feedback tools designed to record and improve programmer productivity during coding activities. Data is collected from on-line activities unobtrusively and automatically, and this data is used to provide real-time feedback to the programmers.
Reference: [28] <author> Frank E. McGarry and R. Pajerski. </author> <title> Towards understanding software - 15 years in the SEL. </title> <booktitle> In Proceedings of the Fifteenth Annual Software Engineering Workshop. </booktitle> <institution> NASA Goddard Space Flight Center, Greenbelt MD 20771, </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: To address this issue, both management and technical people must be educated about the costs associated with collecting and validating data, as well as the benefits that stem from analyzing the data (for cost-benefit analyses, see <ref> [28, 9] </ref>). Second, all attempts must be made to minimize the effort of providing data and the intrusiveness on people's work. The computer can reduce the effort of collecting data by automating some collection activities and decreasing the effort required for other activities.
Reference: [29] <author> Peiwei Mi and Walt Scacchi. </author> <title> Process integration in CASE environments. </title> <journal> IEEE Software, </journal> <volume> 9:4553, </volume> <month> March </month> <year> 1992. </year> <booktitle> Appeared in Proc. 4th European Workshop on Software Process Technology, </booktitle> <month> April </month> <year> 1995 </year> <month> 21 </month>
Reference-contexts: This means that MVP-S does not completely satisfy requirement R4 (SEE coupled to on-line work products). We would like to have graphical representations of processes, products, and resources similar to <ref> [29] </ref> in order to improve comprehension of this information. Given such a representation, the current status of each activity could be indicated graphically, for example by using different colors.
Reference: [30] <author> National Aeronautics and Space Administration. </author> <title> Software Engineering Laboratory (SEL) Database Organization and User's Guide, Revision 1. </title> <type> Technical Report SEl-89-101, </type> <institution> NASA Goddard Space Flight Center, Greenbelt MD 20771, </institution> <month> February </month> <year> 1990. </year>
Reference: [31] <author> Markku Oivo and Victor R. Basili. </author> <title> Representing software engineering models: The TAME goal oriented approach. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(10):886898, </volume> <month> Octo-ber </month> <year> 1992. </year>
Reference-contexts: Online mechanisms recognize triggers generated by the process-enactment system and respond by invoking tools to collect and analyze data. Amadeus does not directly support process modeling or enactment. The ES-TAME system <ref> [31] </ref> is a prototype expert system to support the design process for real-time software. The system's knowledge representation framework supports the development and representation of both work processes and product quality models according to the G/Q/M Paradigm.
Reference: [32] <author> Dewane E. Perry and Gail E. Kaiser. </author> <title> Models of software development environments. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(3):283295, </volume> <month> March </month> <year> 1991. </year>
Reference-contexts: Section 4 presents our prototype system, MVP-S. Section 5 uses a well-known process to give a detailed example of using measurement data to enact a project plan using MVP-S, and Sect. 6 offers some conclusions. 2 Related Work Many systems support defining and performing processes <ref> [8, 32, 18, 12] </ref>, but only a few support the collection and use of empirical data [23, 24]. A few SEEs which address the issue of measurement in some way, including data collection for understanding and use of data to provide guidance, are summarized here.
Reference: [33] <author> Burkhard Peuschel, Wilhelm Schafer, and Ste-fan Wolf. </author> <title> A knowledge-based software development environment supporting cooperative work. </title> <journal> International Journal of Software Engineering & Knowledge Engineering, </journal> <volume> 2(1):79 106, </volume> <year> 1992. </year>
Reference: [34] <author> Shari Lawrence Pfleeger. </author> <title> Lessons learned in building a corporate metrics program. </title> <journal> IEEE Software, </journal> <volume> 10:6774, </volume> <month> May </month> <year> 1993. </year>
Reference-contexts: In that case, people will do everything in their power to make themselves look good; this is absolutely understandable but it ruins data validity. The ultimate solution is to mask out identities when the data is stored. These issues are discussed at length elsewhere (see <ref> [34] </ref>) and motivate this requirement: R14, allow the identities of all data submitters to be masked. The third and last nontechnical issue is the extra work, intrusion, and annoyance associated with providing data.
Reference: [35] <author> Raimo Rask, Petteri Laamanen, and Kalle Lyytinen. </author> <title> Simulation and comparison of Al-brecht's function point and DeMarco's function bang metrics in a CASE environment. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 19(7):661671, </volume> <month> July </month> <year> 1993. </year>
Reference-contexts: Finally, CASE tools for constructing software work products offer a great (yet mostly neglected) possibility for collecting data about those products. For example, the JoYCASE system automatically collects values for the function point and function bang metrics from structured analysis diagrams drawn using that system <ref> [35] </ref>. Data collection activities can be expected to yield an enormous store of data for which persistence and querying capabilities will be required.
Reference: [36] <author> H. Dieter Rombach. </author> <title> The role of measurement in ISEEs. </title> <editor> In Carlo Ghezzi and John McDer-mid, editors, </editor> <booktitle> Proceedings of the Second Euro-pean Software Engineering Conference, </booktitle> <pages> pages 6585. </pages> <note> Lecture Notes in Computer Science Nr. 387, SpringerVerlag, </note> <month> September </month> <year> 1989. </year>
Reference-contexts: The difficulty of using a SEE to collect data by interacting with people encouraged us to refine a few of the high-level requirements presented in <ref> [36] </ref> to focus solely on data collection. We state requirements which a process-sensitive software engineering environment must satisfy in order to collect empirical data from personnel during a software project. <p> R9, accept data from people asynchronously. R10, function with incomplete data. In order to collect data about off-line work such as think time, brainstorming sessions, meetings, and inspections, the people involved must be queried. Online forms offer a reasonable method for querying people without requiring a human interviewer <ref> [36] </ref>. a possible implementation of this requirement: R11, query people using on-line forms. 3.3 Nontechnical Issues These issues are primarily concerned with gaining the trust and acceptance of the humans who supply data.
Reference: [37] <author> Richard W. Selby, Adam A. Porter, Doug C. Schmidt, and Jim Berney. </author> <title> Metric-driven analysis and feedback systems for enabling empirically guided software development. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Software Engineering, </booktitle> <pages> pages 288 298. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: Data is collected from on-line activities unobtrusively and automatically, and this data is used to provide real-time feedback to the programmers. Measurement support is fixed, and Ginger does not support process definition. Amadeus <ref> [37] </ref>, more a subcomponent of a SEE rather than a stand-alone system, supports data collection and analysis activities when used in conjunction with a process-enactment system. Online mechanisms recognize triggers generated by the process-enactment system and respond by invoking tools to collect and analyze data.
Reference: [38] <author> Martin Verlage. </author> <title> Multiview modeling of software processes. </title> <editor> In Brian C. Warboys, editor, </editor> <booktitle> Proceedings of the Third European Workshop on Software Process Technology, </booktitle> <pages> pages 123127, </pages> <address> Grenoble, France, </address> <year> 1994. </year> <note> Nr. 772, SpringerVerlag. </note>
Reference-contexts: In the real world, a role, as defined above, determines the set of activities which a person may perform. In the model world, a view provides all needed information for a person who performs the processes (activities) associated with the role <ref> [38] </ref>. Section 2 summarizes SEE research projects which address the issue of measurement in some way. Section 3 expresses our ideas about practical support for data collection in a process-sensitive software engineering environment as a set of requirements. Section 4 presents our prototype system, MVP-S.
Reference: [39] <author> Edward F. Weller. </author> <title> Lessons from three years of inspection data. </title> <journal> IEEE Software, </journal> <volume> 10:3845, </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: Third, feedback can be provided early during process steps when corrective action may be taken <ref> [14, 39] </ref>, not after a process step has ended. We have implemented MVP-S, a process-sensitive software engineering environment (SEE), that supports our integrated approach for enacting project plans using role definitions and measurement data. This system is the first prototype of our ideas for integrating process modeling and measurement [25].
References-found: 39

