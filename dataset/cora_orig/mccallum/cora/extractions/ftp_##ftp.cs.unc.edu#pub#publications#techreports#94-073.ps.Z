URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/94-073.ps.Z
Refering-URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/FILE.html
Root-URL: http://www.cs.unc.edu
Title: The Design, Implementation, and Use of a Sporadic Tasking Model  
Author: Kevin Jeffay David Becker David Bennett Shaun Bharrat Timothy Gramling Mark Housel 
Date: April 1994  
Address: Chapel Hill, NC 27599-3175 USA  
Affiliation: University of North Carolina at Chapel Hill Department of Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Bettati, R., Liu, J.W.-S., </author> <title> End-to-End Scheduling to Meet Deadlines in Distributed Systems, </title> <booktitle> Proc. </booktitle> <address> IJDCS 92, Yokohama, Japan, </address> <pages> pp. 452-459. </pages>
Reference: [2] <author> Draves, R.P., Bershad, B.N., Rashid, R.F., Dean, R.W., </author> <title> Using Continuations to Implement Thread Management and Communication in Operating Systems , Proc. </title> <booktitle> 13 th ACM Symp. on Operating System Principles, </booktitle> <address> Pacific Grove, CA, </address> <month> October </month> <year> 1991, </year> <pages> pp. 122-136. </pages>
Reference: [3] <author> Harbour, M.G., Klein, M.H., Lehoczky, J., </author> <title> Fixed Priority Scheduling of Periodic Tasks with Varying Execution Priority , Proc. </title> <booktitle> 12 th IEEE Real-Time Systems Symp., </booktitle> <address> San Antonio, TX, </address> <month> December </month> <year> 1991, </year> <pages> pp. 116-128. </pages>
Reference: [4] <author> Jeffay, K., Stone, D.L., and Smith, </author> <title> F.D., Transport and Display Mechanisms for Multimedia Conferencing Across PacketSwitched Networks, Computer Networks and ISDN Systems, </title> <note> to appear. </note>
Reference-contexts: This style of interaction can eliminate the need for copying large amounts of data from a sender to a receiver. 2.1 Example: A videoconferencing system We have used the discipline outlined above to design and implement a videoconferencing system <ref> [4] </ref>. The video conferencing application runs as an application in user space. conferencing system. This is the portion of the system that acquires audio and video data from the respective hardware subsystems, compresses the data in software, and packages the data for transmission across a network.
Reference: [5] <author> Jeffay, K., Stone, D.L., and Smith, </author> <title> F.D., Kernel Support for Live Digital Audio and Video. </title> <journal> Computer Communications, </journal> <volume> Vol. 16, No. </volume> <month> 6 (July), </month> <pages> pp. 388-395. </pages>
Reference-contexts: A subset of this theory was applied to a design and implementation of a videoconferencing system <ref> [5] </ref>. A special purpose real-time kernel and programming system was developed for that effort [7].
Reference: [6] <author> Jeffay, K., Stone, </author> <title> D.L., Accounting for Interrupt Handling Costs in Dynamic Priority Task Systems , K. Jeffay, D.L. Stone, </title> <booktitle> Proc. 14 th IEEE Real-Time Systems Symp., </booktitle> <address> Durham, NC, </address> <month> December </month> <year> 1993, </year> <pages> pp. 212-221. </pages>
Reference-contexts: The second is a new result in the theory of sporadic tasks that is used to greatly simplify the implementation of sporadic tasks. The starting point for this work is the model of sporadic tasks developed by Mok [12], and later extended by Jeffay [8], and Jeffay and Stone <ref> [6] </ref>. A sporadic task is a simple variant of a periodic task. Whereas periodic tasks recur at constant intervals, sporadic tasks simply have an upper bound on the their rate of occurrence ( i.e., a lower bound on their inter-arrival time). <p> At present, the theory of sporadic tasks is general enough to accommodate a model of computation wherein tasks may communicate via shared memory (i.e. , tasks may have 2 critical sections) [8], and tasks may preempted by interrupt handlers ( i.e., realistic device interactions can be modeled) <ref> [6] </ref>. A set of relations on model parameters that are necessary and sufficient for tasks to execute in real-time are known and an optimal algorithm for scheduling tasks (based on earliest-deadline first scheduling) has been developed.
Reference: [7] <author> Jeffay, K., Stone, D.L., Poirier, D., YARTOS: </author> <title> Kernel support for efficient, predictable real-time systems , in Real-Time Programming, </title> <editor> W. Halang and K. Ramamritham, eds., </editor> <publisher> Pergamon Press, Oxford, </publisher> <address> UK, </address> <year> 1992, </year> <pages> pp. 7-12. 13 </pages>
Reference-contexts: A subset of this theory was applied to a design and implementation of a videoconferencing system [5]. A special purpose real-time kernel and programming system was developed for that effort <ref> [7] </ref>. The goal now is to provide a more complete realization of the theory and to refine the programming model to deal with issues arising from the implementation of sporadic tasks in a more general purpose computing environment.
Reference: [8] <author> Jeffay, K., </author> <title> Scheduling Sporadic Tasks with Shared Resources in Hard-Real-Time Systems, </title> <booktitle> Proc. 13 th IEEE Real-Time Systems Symp., </booktitle> <address> Phoenix, AZ, </address> <month> December </month> <year> 1992, </year> <pages> pp. 89-99. </pages>
Reference-contexts: The second is a new result in the theory of sporadic tasks that is used to greatly simplify the implementation of sporadic tasks. The starting point for this work is the model of sporadic tasks developed by Mok [12], and later extended by Jeffay <ref> [8] </ref>, and Jeffay and Stone [6]. A sporadic task is a simple variant of a periodic task. Whereas periodic tasks recur at constant intervals, sporadic tasks simply have an upper bound on the their rate of occurrence ( i.e., a lower bound on their inter-arrival time). <p> At present, the theory of sporadic tasks is general enough to accommodate a model of computation wherein tasks may communicate via shared memory (i.e. , tasks may have 2 critical sections) <ref> [8] </ref>, and tasks may preempted by interrupt handlers ( i.e., realistic device interactions can be modeled) [6]. <p> This would lead to an overly pessimistic analysis. 3. Implementation In reality, the programming discipline we have developed is a thin (but useful) veneer of programming abstractions on top of the scheduling model presented in <ref> [8] </ref>. There, a real - time system was modeled as a set of sporadic tasks that share a set of serially reusable, single-unit, software resources. A sporadic task is a sequential program that is partitioned into a sequence of disjoint phases. <p> In <ref> [8] </ref>, an optimal scheduling algorithm based on earliest deadline first scheduling was developed. This is the algorithm we employ. This model of sporadic tasks is used to implement the programming discipline as follows. Message channels are implemented as sporadic tasks.
Reference: [9] <author> Jeffay, K., </author> <title> The Real-Time Producer/ Consumer Paradigm: A paradigm for the construction of efficient, </title> <booktitle> predictable real-time systems , Proc. 1993 ACM/SIGAPP Symposium on Applied Computing, Indianapolis, IN, </booktitle> <publisher> ACM Press, </publisher> <month> February </month> <year> 1993, </year> <pages> pp. 796-804. </pages>
Reference-contexts: When a message is sent on a channel it will be received and processed before the next message is sent on that channel. (This paradigm of programming is elaborated on more completely in <ref> [9] </ref>.) For example, if a process S acts as a server for a client process C, then S will consume each message from C before C sends its next message. More precisely, for each output 4 port of a process we define a transmission rate function.
Reference: [10] <author> Liu, C.L., Layland, J.W., </author> <title> Scheduling Algorithms for Multiprogramming in a Hard-Real-Time Environment, </title> <journal> Journal of the ACM, </journal> <volume> Vol. 20, No. 1, </volume> <month> (January </month> <year> 1973), </year> <pages> pp. 46-61. </pages>
Reference: [11] <author> Mercer, C.W., Savage, S., Tokuda, H., </author> <title> Processor Capacity Reserves: </title> <booktitle> Operating System Support for Multimedia Applications , IEEE Intl. Conf. on Multimedia Computing and Systems, </booktitle> <address> Boston, MA, </address> <month> May </month> <year> 1994, </year> <note> to appear. </note>
Reference-contexts: time-constrained event handlers and virtual memory support for multimedia applications [14]; the work on integrating scheduling and IPC mechanisms to avoid unbounded priority inversions when real-time tasks (clients) invoke non-real-time services (services) [13]; and the work on providing real-time performance predictability within the context of a general purpose timesharing system <ref> [11] </ref>. Each work seeks to better design operating system services to meet the needs of real-time (and in particular multimedia) applications. Our work shares these goals, however, we have chosen to experiment with a different set of resource allocation policies, particularly those based on deadline scheduling.
Reference: [12] <author> Mok, A.K.-L., </author> <title> Fundamental Design Problems of Distributed Systems for the Hard Real-Time Environment , Ph.D. </title> <type> Thesis, </type> <institution> MIT, Department of EE and CS, MIT/LCS/TR-297, </institution> <month> May </month> <year> 1983. </year>
Reference-contexts: The second is a new result in the theory of sporadic tasks that is used to greatly simplify the implementation of sporadic tasks. The starting point for this work is the model of sporadic tasks developed by Mok <ref> [12] </ref>, and later extended by Jeffay [8], and Jeffay and Stone [6]. A sporadic task is a simple variant of a periodic task.
Reference: [13] <author> Nakajima, T., Kitayama, T., Arakawa, H., Tokuda, H., </author> <title> Integrated Management of Priority Inversion in Real-Time Mach, </title> <booktitle> Proc. 14 th IEEE Real-Time Systems Symp., </booktitle> <address> Durham, NC, </address> <month> December </month> <year> 1993, </year> <pages> pp. 120-130. </pages>
Reference-contexts: Related work includes the extensions to the (non-real-time) Mach kernel to provide time-constrained event handlers and virtual memory support for multimedia applications [14]; the work on integrating scheduling and IPC mechanisms to avoid unbounded priority inversions when real-time tasks (clients) invoke non-real-time services (services) <ref> [13] </ref>; and the work on providing real-time performance predictability within the context of a general purpose timesharing system [11]. Each work seeks to better design operating system services to meet the needs of real-time (and in particular multimedia) applications.
Reference: [14] <author> Nakajima, J., Yazaki, M., Matsumoto, H., </author> <title> Multimedia/Realtime Extensions for Mach 3.0 , USENIX Workshop on Micro-Kernels and Other Kernel Architectures, </title> <address> Seattle, WA, </address> <month> April </month> <year> 1992, </year> <pages> pp. 161-175. </pages>
Reference-contexts: Related work includes the extensions to the (non-real-time) Mach kernel to provide time-constrained event handlers and virtual memory support for multimedia applications <ref> [14] </ref>; the work on integrating scheduling and IPC mechanisms to avoid unbounded priority inversions when real-time tasks (clients) invoke non-real-time services (services) [13]; and the work on providing real-time performance predictability within the context of a general purpose timesharing system [11].
Reference: [15] <author> Tokuda, H., Nakajima, T., Rao, P., </author> <title> Real-Time Mach: Toward a Predictable Real - Time System, </title> <booktitle> Proc. of the USENIX Mach Workshop, </booktitle> <month> October, </month> <year> 1990. </year> <month> 14 </month>
Reference-contexts: 1. Introduction This paper describes the design, implementation, and use of a model of sporadic tasks in the Real-Time Mach kernel (MK83) <ref> [15] </ref>. The purpose of this exercise was twofold. First, was our desire to provide a programming model in real-Time Mach (RT-Mach) that was better suited to the demands and requirements of applications that must execute in response to non-periodic, but repetitive events. <p> Message are typed collections of data that are passed between threads. A memory object is a storage object that is backed by secondary storage. RT-Mach is a variant of the Mach designed to simultaneously support both real-time and non-real time applications <ref> [15] </ref>. There are three major enhancements over standard Mach. The RT-Mach thread model has been extended to included both non-real-time threads, real-time periodic threads, and real-time aperiodic threads, and, to support these new thread models, the scheduling policy is selectable by user applications.
References-found: 15

