URL: http://www.aic.nrl.navy.mil/papers/1993/AIC-93-048.ps
Refering-URL: http://www.aic.nrl.navy.mil/~breslow/index.html
Root-URL: 
Title: A Data-Flow Graphical User Interface for Querying a Scientific Database  
Author: Bosco S. Tjan, Leonard Breslow, Sait Dogru, Vijay Rajan, Keith Rieck, James R. Slagle, and Marius O. Poliac 
Address: Minneapolis MN 55455  
Affiliation: Computer Science Department University of Minnesota,  
Abstract: We describe the design principles and functionality of a visual query language called SeeQL that represents data retrieval and analysis operations as a data-flow graph. A query is viewed as a sequence of relational algebra and other data transformation operations applied to database tables. The language is well-suited for large-scale scientific database applications, where data analysis is a major component and the typical queries or data retrieval patterns are unrestricted. The language provides a flexible yet easy-to-use environment for database access and data analysis for non-programmer research scientists. We have implemented this language in a system being used in a long-term data-intensive highway pavement research project (MnRoad) conducted by the Minnesota Department of Transportation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. F. Codd, </author> <title> "How About Recently?," Databases: Improving Usability and Responsiveness, </title> <publisher> Academic Press, </publisher> <year> 1978. </year>
Reference-contexts: Our system provides a graphical query interface for the SQL language and extends SQL's power and flexibility with a variety of data analysis and presentation capabilities. Previous approaches to providing user-friendly interfaces to databases have included English-like natural language query systems <ref> [1] </ref> and form-based templates. More recently, graphical query languages [2, 3, 4, 7, 8] have been introduced to provide greater ease-of-use and power than these early methods. Most of these languages, like SQL, are declarative in nature.
Reference: [2] <author> I. F. Cruz, A. O. Mendelzon, and P. T. Wood, </author> <title> G+ : Recursive queries without recursion, </title> <booktitle> Proceedings of the 2nd International Conference on Expert Database Systems, </booktitle> <year> 1989. </year>
Reference-contexts: Previous approaches to providing user-friendly interfaces to databases have included English-like natural language query systems [1] and form-based templates. More recently, graphical query languages <ref> [2, 3, 4, 7, 8] </ref> have been introduced to provide greater ease-of-use and power than these early methods. Most of these languages, like SQL, are declarative in nature. While declarative languages are considered suitable for data retrieval tasks, they may not meet all the needs of scientific applications.
Reference: [3] <author> R. Elmasri and G. Wiederhold, "GORDAS: </author> <title> A Formal Hig-Level Query Language for the Entity-Relationship Model", </title> <editor> in P. Chen (ed.), </editor> <title> Entity-Relationship Approach to Information Modeling and Analysis, </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1983. </year>
Reference-contexts: Previous approaches to providing user-friendly interfaces to databases have included English-like natural language query systems [1] and form-based templates. More recently, graphical query languages <ref> [2, 3, 4, 7, 8] </ref> have been introduced to provide greater ease-of-use and power than these early methods. Most of these languages, like SQL, are declarative in nature. While declarative languages are considered suitable for data retrieval tasks, they may not meet all the needs of scientific applications.
Reference: [4] <editor> Idiot Proof your SQL Queries, InfoWorld, </editor> <volume> Vol 38, Number 7, </volume> <month> April 01, </month> <year> 1992. </year>
Reference-contexts: Previous approaches to providing user-friendly interfaces to databases have included English-like natural language query systems [1] and form-based templates. More recently, graphical query languages <ref> [2, 3, 4, 7, 8] </ref> have been introduced to provide greater ease-of-use and power than these early methods. Most of these languages, like SQL, are declarative in nature. While declarative languages are considered suitable for data retrieval tasks, they may not meet all the needs of scientific applications.
Reference: [5] <institution> Interactive Data Language, </institution> <note> Version 2.2, </note> <institution> Research Systems, Inc, Boulder CO, </institution> <year> 1991. </year>
Reference-contexts: Conceptually, each arc carries one table between two modules. The system runs under the X Window System. We use the Oracle Relational Database Management System [12] as our database engine and IDL (Interactive Data Language) <ref> [5] </ref> as our data visualization tool. IDL provides general two- and three-dimensional graphing capabilities, as well as certain data processing capabilities which can be used in User Function modules. Starting the program brings up a single window with menus and a drawing area.
Reference: [6] <author> J. R. Rasure and C. S. Williams, </author> <title> An integrated data flow visual language and software development environment, </title> <journal> Journal of Visual Language and Computing, </journal> <volume> Vol 2, Issue 3, </volume> <month> September </month> <year> 1991. </year>
Reference-contexts: A procedural language allows researchers to clearly represent and incrementally construct such sequences of operations according to their individual needs. In scientific visualization applications that do not involve database retrieval, procedurally-oriented languages <ref> [6, 10] </ref> have already shown promise. These languages represent sequences of operations visually as data-flow graphs. We developed SeeQL as a procedure-oriented graphical query language using data-flow graphs. Targeted for scientific database applications, SeeQL combines easy data retrieval, analysis, and visualization capabilities.
Reference: [7] <author> M. Schneider and C. Trepied, </author> <title> Extensions for the graphical query language CANDID, </title> <journal> IFIP Transactions, </journal> <volume> Vol A-7, </volume> <year> 1992. </year>
Reference-contexts: Previous approaches to providing user-friendly interfaces to databases have included English-like natural language query systems [1] and form-based templates. More recently, graphical query languages <ref> [2, 3, 4, 7, 8] </ref> have been introduced to provide greater ease-of-use and power than these early methods. Most of these languages, like SQL, are declarative in nature. While declarative languages are considered suitable for data retrieval tasks, they may not meet all the needs of scientific applications.
Reference: [8] <author> M. Senko, </author> <title> "DIAM II with FORAL LP: Making Pointed Queries with Light Pen," </title> <booktitle> Proceedings of the IFIP congress 77, </booktitle> <address> Toronto, Canada, </address> <year> 1977. </year>
Reference-contexts: Previous approaches to providing user-friendly interfaces to databases have included English-like natural language query systems [1] and form-based templates. More recently, graphical query languages <ref> [2, 3, 4, 7, 8] </ref> have been introduced to provide greater ease-of-use and power than these early methods. Most of these languages, like SQL, are declarative in nature. While declarative languages are considered suitable for data retrieval tasks, they may not meet all the needs of scientific applications.
Reference: [9] <author> J. D. Ullman, </author> <title> Principles of Database Systems, </title> <journal> Computer software engineering series, </journal> <note> Computer Science Press, second edition, </note> <year> 1982. </year>
Reference-contexts: Relational query languages, such as SQL, are the current industrial standard for data retrieval. The procedural approach to data analysis contrasts with the primarily declarative nature of these languages. However, it is possible to express any data retrieval query procedurally as a series of operations in relational algebra <ref> [9] </ref>. In SQL, for example, a data retrieval query is expressed by the SELECT statement, which can be decomposed into seven relational algebra operations, namely, union, set difference, intersect, Cartesian product, selection, projection, and join. Conversely, each of these relational algebra operations can be di-rectly translated into SQL.
Reference: [10] <author> C. Upson, T. Faulhaber, Jr., D Kamins, D. Laid-law, D. Schlegel, J. Vroom, R. Gurwitz, and A. van Dam, </author> <title> The Application Visualization System: </title>
Reference-contexts: A procedural language allows researchers to clearly represent and incrementally construct such sequences of operations according to their individual needs. In scientific visualization applications that do not involve database retrieval, procedurally-oriented languages <ref> [6, 10] </ref> have already shown promise. These languages represent sequences of operations visually as data-flow graphs. We developed SeeQL as a procedure-oriented graphical query language using data-flow graphs. Targeted for scientific database applications, SeeQL combines easy data retrieval, analysis, and visualization capabilities.
References-found: 10

