URL: http://www.eecs.umich.edu/~avigupta/papers/iccad96.ps
Refering-URL: http://www.eecs.umich.edu/~avigupta/professional.html
Root-URL: http://www.eecs.umich.edu
Note: This research was supported by a grant from Intel Corporation. Abstract  
Abstract: We address the problem of CMOS cell width minimization in the general two-dimensional (2-D) layout style and propose a novel technique based on integer linear programming (ILP) to solve it exactly. We formulate a 0-1 ILP model whose solution minimizes cell width along with the routing complexity across the diffusion rows. We present experimental results that evaluate the performance of two ILP solvers that have very different solution methods, and assess the effect of the number of rows on cell width. Run-times for optimal layouts are in seconds for cells with up to 20 transistors. For larger cells, we propose a practical circuit pre-processing scheme that dramatically reduces the run time with little or no loss in optimality. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Barth, </author> <title> A Davis-Putnam Based Enumeration Algorithm for Linear Pseudo-Boolean Optimization, </title> <type> Technical report MIP-I-95-2-003, </type> <institution> Max-Planck-Institut Fur Informatik, </institution> <month> Jan </month> <year> 1995. </year>
Reference-contexts: For the example in Fig. 4d, above <ref> [1, out] </ref> = 1, below [1, out] = 0, top [1, out] = 0, bottom [1, out] = 1, and thus, vertical [1, out] = 1. vertical [j, n] = (above [j, n] and below [j, n] and not top [j, n]) or (above [j, n] and bottom [j, n] and <p> For the example in Fig. 4d, above <ref> [1, out] </ref> = 1, below [1, out] = 0, top [1, out] = 0, bottom [1, out] = 1, and thus, vertical [1, out] = 1. vertical [j, n] = (above [j, n] and below [j, n] and not top [j, n]) or (above [j, n] and bottom [j, n] and not top [j, n]) or <p> For the example in Fig. 4d, above <ref> [1, out] </ref> = 1, below [1, out] = 0, top [1, out] = 0, bottom [1, out] = 1, and thus, vertical [1, out] = 1. vertical [j, n] = (above [j, n] and below [j, n] and not top [j, n]) or (above [j, n] and bottom [j, n] and not top [j, n]) or (below [j, n] and not <p> For the example in Fig. 4d, above <ref> [1, out] </ref> = 1, below [1, out] = 0, top [1, out] = 0, bottom [1, out] = 1, and thus, vertical [1, out] = 1. vertical [j, n] = (above [j, n] and below [j, n] and not top [j, n]) or (above [j, n] and bottom [j, n] and not top [j, n]) or (below [j, n] and not bottom [j, n] and top <p> For the example in Fig. 4d, above <ref> [1, out] </ref> = 1, below [1, out] = 0, top [1, out] = 0, bottom [1, out] = 1, and thus, vertical [1, out] = 1. vertical [j, n] = (above [j, n] and below [j, n] and not top [j, n]) or (above [j, n] and bottom [j, n] and not top [j, n]) or (below [j, n] and not bottom [j, n] and top [j, n]) The variable above [j, n] <p> solutions, and hence preserves optimality. 5 Experimental Results The foregoing 0-1 ILP model has been programmed in AMPL (A Mathematical Programming Language) and solved using two integer solvers based on widely varying solution techniques: OSL [9], a commercial MILP solver based on linear programming, and OPBDP (Optimization with Pseudo-Boolean Davis-Putnam) <ref> [1] </ref>, a specialized 0-1 solver based on constraint satisfaction. Most generic ILP solution techniques use a branch-and-bound approach [13] that explores a search tree, every node of which represents a relaxed LP problem in which the integrality constraints on a subset of the integer variables are relaxed. <p> The leaf nodes satisfy all integrality con Minimize W c subject to: Pair inclusion: " k -p 1 , ..., p 14 - 1 = (cover [c 1 , k] . X <ref> [c 1 , 1] </ref> + cover [c 1 , k] . X [c 1 , 2]) + ... + (cover [c 92 , k] . X [c 92 , 1] + cover [c 92 , k] . <p> X [c 1 , 1] + cover [c 1 , k] . X [c 1 , 2]) + ... + (cover [c 92 , k] . X <ref> [c 92 , 1] </ref> + cover [c 92 , k] . <p> X [c 1 , 2]) + ... + (cover [c 92 , k] . X [c 92 , 1] + cover [c 92 , k] . X [c 92 , 2]) Chain inclusion: " i -c 1 , ..., c 92 - 1 = X <ref> [i, 1] </ref> + X [i, 2] Row occupancy: " j = 1, 2 1 X [c 1 , j] + X [c 2 , j] + ... + X [c 92 , j] Objective linearization: " j = 1, 2 W c (X [c 1 , j] length [c 1 ] <p> [j, n] = (above [j, n] and below [j, n] and not top [j, n]) or (above [j, n] and bottom [j, n] and not top [j, n]) or (below [j, n] and not bottom [j, n] and top [j, n]) " n -n 1 , ..., n 17 above <ref> [1, n] </ref> = top [2, n] or bottom [2, n] " n -n 1 , ..., n 17 below [2, n] = top [1, n] or bottom [1, n] " n -n 1 , ..., n 17 -, j = 1, 2 top [j, n] = topChain [c 1 , j, <p> and not top [j, n]) or (below [j, n] and not bottom [j, n] and top [j, n]) " n -n 1 , ..., n 17 above <ref> [1, n] </ref> = top [2, n] or bottom [2, n] " n -n 1 , ..., n 17 below [2, n] = top [1, n] or bottom [1, n] " n -n 1 , ..., n 17 -, j = 1, 2 top [j, n] = topChain [c 1 , j, n] . X [c 1 , j]) or ... or (topChain [c 92 , j, n] . <p> n]) or (below [j, n] and not bottom [j, n] and top [j, n]) " n -n 1 , ..., n 17 above <ref> [1, n] </ref> = top [2, n] or bottom [2, n] " n -n 1 , ..., n 17 below [2, n] = top [1, n] or bottom [1, n] " n -n 1 , ..., n 17 -, j = 1, 2 top [j, n] = topChain [c 1 , j, n] . X [c 1 , j]) or ... or (topChain [c 92 , j, n] .
Reference: [2] <author> D. G. Baltus and J. Allen, </author> <title> SOLO: A Generator of Efficient Layouts From Optimized MOS Circuit Schematics, </title> <booktitle> Proc. 25th Design Automation Conf., </booktitle> <pages> pp. 445-452, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Hence, cells have to either satisfy constraints on their width or use a specified number of P/N rows for abutment with adjacent cells. adder circuit from <ref> [2] </ref> with 28 transistors paired into 14 P/N pairs. <p> We illustrate the model formulation using the full adder circuit of <ref> [2] </ref> for 2-D placement in two rows; its ILP model, shown in Table 3, consists of logical constraints which can be linearized as discussed later. <p> The leaf nodes satisfy all integrality con Minimize W c subject to: Pair inclusion: " k -p 1 , ..., p 14 - 1 = (cover [c 1 , k] . X [c 1 , 1] + cover [c 1 , k] . X <ref> [c 1 , 2] </ref>) + ... + (cover [c 92 , k] . X [c 92 , 1] + cover [c 92 , k] . <p> X [c 1 , 1] + cover [c 1 , k] . X [c 1 , 2]) + ... + (cover [c 92 , k] . X [c 92 , 1] + cover [c 92 , k] . X <ref> [c 92 , 2] </ref>) Chain inclusion: " i -c 1 , ..., c 92 - 1 = X [i, 1] + X [i, 2] Row occupancy: " j = 1, 2 1 X [c 1 , j] + X [c 2 , j] + ... + X [c 92 , j] <p> X [c 1 , 2]) + ... + (cover [c 92 , k] . X [c 92 , 1] + cover [c 92 , k] . X [c 92 , 2]) Chain inclusion: " i -c 1 , ..., c 92 - 1 = X [i, 1] + X <ref> [i, 2] </ref> Row occupancy: " j = 1, 2 1 X [c 1 , j] + X [c 2 , j] + ... + X [c 92 , j] Objective linearization: " j = 1, 2 W c (X [c 1 , j] length [c 1 ] + ... + X <p> [j, n] and below [j, n] and not top [j, n]) or (above [j, n] and bottom [j, n] and not top [j, n]) or (below [j, n] and not bottom [j, n] and top [j, n]) " n -n 1 , ..., n 17 above [1, n] = top <ref> [2, n] </ref> or bottom [2, n] " n -n 1 , ..., n 17 below [2, n] = top [1, n] or bottom [1, n] " n -n 1 , ..., n 17 -, j = 1, 2 top [j, n] = topChain [c 1 , j, n] . <p> [j, n] and not top [j, n]) or (above [j, n] and bottom [j, n] and not top [j, n]) or (below [j, n] and not bottom [j, n] and top [j, n]) " n -n 1 , ..., n 17 above [1, n] = top <ref> [2, n] </ref> or bottom [2, n] " n -n 1 , ..., n 17 below [2, n] = top [1, n] or bottom [1, n] " n -n 1 , ..., n 17 -, j = 1, 2 top [j, n] = topChain [c 1 , j, n] . <p> and bottom [j, n] and not top [j, n]) or (below [j, n] and not bottom [j, n] and top [j, n]) " n -n 1 , ..., n 17 above [1, n] = top <ref> [2, n] </ref> or bottom [2, n] " n -n 1 , ..., n 17 below [2, n] = top [1, n] or bottom [1, n] " n -n 1 , ..., n 17 -, j = 1, 2 top [j, n] = topChain [c 1 , j, n] . X [c 1 , j]) or ... or (topChain [c 92 , j, n] . <p> X [c 1 , j]) or ... or (bottomChain [c 92 , j, n] . X [c 92 , j]) Table 3: The ILP model for minimum-width two-row placement of the full adder circuit of <ref> [2] </ref> Logical constraint Equivalent linear constraints z = x or y z ( x + y ) z = x or y or w z ( x + y + w ) z = x and y z ( x + y ) / 2 z = x and not y <p> A * indicates that OSL did not terminate after 10,000 seconds c. OPBDP version 1.0 was used with the -h103 variable selection heuristic Cct. # Circuit No. of trans. No. of nets No. of chains 1. 2-input parity circuit (Xor) <ref> [2] </ref> 10 7 16 2. Non-series-parallel bridge circuit [20] 10 10 20 3. 2-level implementation of z = (a' . (e + f)' + d)' [12] 4. 2-to-1 multiplexer 14 10 28 5. <p> Series-parallel circuit [12] for z = (a.b.c.d + e.f.g.h + (i + j).(k + l))' 8. 4-to-1 multiplexer [7] 24 17 367 9. Full adder <ref> [2] </ref> 28 17 92 10. 4-bit parity stage (implements 5-bit parity circuit) [7] 40 25 214 Table 5: Circuits used for experimentation Cct. <p> Hence, most practical designs require that and-stacks be placed together as in Fig. 5a. The P/N pairs that contain transistors belonging to an and-stack are clustered into single pairs. The final set of eight pairs for the full-adder circuit of <ref> [2] </ref> is listed in Fig. 5c, of which four contain and-stacks. And-stacks can be exploited to reduce the complexity of the 2-D cell layout model. <p> In most cases, our technique yields layouts whose widths are significantly smaller than those produced by Virtuoso. For the full adder circuit of <ref> [2] </ref>, two, three, and four-row Virtuoso layouts have width nine, compared to optimal widths of eight, five, and five, respectively, obtained with our method. Virtuosos run times are in seconds in all cases. <p> (4+0+1) 5 (4+0+1) (2+0+2) (4+0+0) (1+0+4) (3+0+1) 16 8 (8+0+0) (5+0+0) (5+0+0) (4+0+1) (3+0+1) 5 (3+0+1) (3+1+0) Table 7: Contribution of individual P/N rows to the optimum cell width W c layout of a chain not forming an and-stack; and (c) the final eight pairs of the full-adder circuit of <ref> [2] </ref> (a) Layout of and-stack (b) Layout of transistor N 1 N 2 N 3 N 4 N 5 N 6 no straps required out out N 1 N 3 N 5 N 6 Pair # P part N part 1 3 5 7 P 1 P 3 P 9 P
Reference: [3] <author> Cadence Design Systems, Inc., </author> <title> Virtuoso Layout Synthesizer Tutorial and Reference, </title> <type> 1992-94. </type>
Reference-contexts: Hence, cells have to either satisfy constraints on their width or use a specified number of P/N rows for abutment with adjacent cells. adder circuit from [2] with 28 transistors paired into 14 P/N pairs. These layouts were generated using Virtuoso <ref> [3] </ref>, a commercial cell synthesis tool from Cadence. (a) 2-D layouts using (b) two and (c) three P/N rows (b) (c) Width Minimization of Two-Dimensional CMOS Cells Using Integer Programming * Avaneendra Gupta = and John P. Hayes = -avigupta, jhayes-@eecs.umich.edu = Advanced Computer Architecture Lab. <p> In contrast to the 1-D style, the 2-D style has received little attention and the few techniques proposed are ad hoc [15, 16, 20]. A few tools such as Virtuoso <ref> [3] </ref> that perform 2-D cell synthesis also use heuristic techniques that, while capable of handling cells as large as a few hundred transistors, yield non-optimal layouts; such layouts are inadequate for applications such as high-performance microprocessor designs that demand the best possible layout area and performance.
Reference: [4] <author> B. C. Carlson, </author> <title> Transistor Chaining and Transistor Reordering in the Design of CMOS Complex Gates, </title> <type> Ph.D. Dissertation, </type> <institution> Syracuse University, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: Section 6 proposes a circuit pre-processing scheme that improves run times by several orders of magnitude with little or no loss in optimality. 2 Problem Definition The 2-D layout style, illustrated in Fig. 2, is an extension of the more widely studied 1-D style <ref> [4, 5, 6, 12, 14, 17] </ref>. Table 1 summarizes the assumptions underlying the 2-D style and its associated width minimization problem. A linear sequence of transistors in which pairs of adjacent transistors share their diffusion terminals is called a transistor chain.
Reference: [5] <author> C. C. Chen and S. L. Chow, </author> <title> The Layout Synthesizer: An Automatic Netlist-to-Layout System, </title> <booktitle> Proc. 26th Design Automation Conf., </booktitle> <pages> pp. 232-238, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: The first general technique for 1-D cell width minimization of dual static CMOS cells was proposed by Uehara and VanCleemput [17]. Since then, considerable work has been done on 1-D cell layout generation <ref> [5, 6, 8, 11, 12, 14, 15, 19] </ref>. In contrast to the 1-D style, the 2-D style has received little attention and the few techniques proposed are ad hoc [15, 16, 20]. <p> Section 6 proposes a circuit pre-processing scheme that improves run times by several orders of magnitude with little or no loss in optimality. 2 Problem Definition The 2-D layout style, illustrated in Fig. 2, is an extension of the more widely studied 1-D style <ref> [4, 5, 6, 12, 14, 17] </ref>. Table 1 summarizes the assumptions underlying the 2-D style and its associated width minimization problem. A linear sequence of transistors in which pairs of adjacent transistors share their diffusion terminals is called a transistor chain.
Reference: [6] <author> A. Gupta, S-C. The, and J. P. Hayes, XPRESS: </author> <title> A Cell Layout Generator with Integrated Transistor Folding, </title> <booktitle> Proc. European Design & Test Conf., </booktitle> <pages> pp. 393-400, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: The first general technique for 1-D cell width minimization of dual static CMOS cells was proposed by Uehara and VanCleemput [17]. Since then, considerable work has been done on 1-D cell layout generation <ref> [5, 6, 8, 11, 12, 14, 15, 19] </ref>. In contrast to the 1-D style, the 2-D style has received little attention and the few techniques proposed are ad hoc [15, 16, 20]. <p> Section 6 proposes a circuit pre-processing scheme that improves run times by several orders of magnitude with little or no loss in optimality. 2 Problem Definition The 2-D layout style, illustrated in Fig. 2, is an extension of the more widely studied 1-D style <ref> [4, 5, 6, 12, 14, 17] </ref>. Table 1 summarizes the assumptions underlying the 2-D style and its associated width minimization problem. A linear sequence of transistors in which pairs of adjacent transistors share their diffusion terminals is called a transistor chain. <p> The 2-D width minimization problem then translates into a covering prob-lema subset of chains that covers each pair and has the minimum cell width needs to be determined. Although the problem of chain generation has been solved using various algorithms <ref> [6, 8, 12, 19] </ref>, a technique that is applicable to the entire class of complex dual CMOS networks is required. We use the chain generation algorithm proposed by Gupta et al. for the XPRESS cell synthesis tool [6]. <p> Although the problem of chain generation has been solved using various algorithms [6, 8, 12, 19], a technique that is applicable to the entire class of complex dual CMOS networks is required. We use the chain generation algorithm proposed by Gupta et al. for the XPRESS cell synthesis tool <ref> [6] </ref>. Circuit parameters and variables: Table 2 summarizes the circuit parameters that are inputs to the ILP model.
Reference: [7] <author> D. V. Heinbuch, </author> <title> CMOS3 Cell Library, </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1988. </year>
Reference-contexts: Series-parallel circuit for z = (a.b + (c+d) . (e+f) + g.h)' [17] 6. 2-level implementation of the majority function z = a.b + b.c + a.c 18 12 45 7. Series-parallel circuit [12] for z = (a.b.c.d + e.f.g.h + (i + j).(k + l))' 8. 4-to-1 multiplexer <ref> [7] </ref> 24 17 367 9. Full adder [2] 28 17 92 10. 4-bit parity stage (implements 5-bit parity circuit) [7] 40 25 214 Table 5: Circuits used for experimentation Cct. <p> Series-parallel circuit [12] for z = (a.b.c.d + e.f.g.h + (i + j).(k + l))' 8. 4-to-1 multiplexer <ref> [7] </ref> 24 17 367 9. Full adder [2] 28 17 92 10. 4-bit parity stage (implements 5-bit parity circuit) [7] 40 25 214 Table 5: Circuits used for experimentation Cct.
Reference: [8] <author> Y-C Hsieh, C-Y Hwang, Y-L Lin, and Y-C Hsu, </author> <title> LiB: A CMOS Cell Compiler, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 10, </volume> <pages> pp. 994-1005, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: The first general technique for 1-D cell width minimization of dual static CMOS cells was proposed by Uehara and VanCleemput [17]. Since then, considerable work has been done on 1-D cell layout generation <ref> [5, 6, 8, 11, 12, 14, 15, 19] </ref>. In contrast to the 1-D style, the 2-D style has received little attention and the few techniques proposed are ad hoc [15, 16, 20]. <p> The 2-D width minimization problem then translates into a covering prob-lema subset of chains that covers each pair and has the minimum cell width needs to be determined. Although the problem of chain generation has been solved using various algorithms <ref> [6, 8, 12, 19] </ref>, a technique that is applicable to the entire class of complex dual CMOS networks is required. We use the chain generation algorithm proposed by Gupta et al. for the XPRESS cell synthesis tool [6].
Reference: [9] <institution> IBM Corp., Optimization Subroutine Library, </institution> <year> 1990. </year>
Reference-contexts: This linearization is exact in that it does not eliminate any feasible integer solutions, and hence preserves optimality. 5 Experimental Results The foregoing 0-1 ILP model has been programmed in AMPL (A Mathematical Programming Language) and solved using two integer solvers based on widely varying solution techniques: OSL <ref> [9] </ref>, a commercial MILP solver based on linear programming, and OPBDP (Optimization with Pseudo-Boolean Davis-Putnam) [1], a specialized 0-1 solver based on constraint satisfaction.
Reference: [10] <author> T. Lengauer and R. Muller, </author> <title> Linear Algorithms for Optimizing the Layout of Dynamic CMOS Cells, </title> <journal> IEEE Trans. on Circuits and Systems, </journal> <volume> Vol. 35, </volume> <pages> pp. 279-285, </pages> <month> March </month> <year> 1988. </year>
Reference: [11] <author> E. Malavasi and D. Pandini, </author> <title> Optimum CMOS stack generation with analog constraints, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 14, </volume> <pages> pp. 107-122, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: The first general technique for 1-D cell width minimization of dual static CMOS cells was proposed by Uehara and VanCleemput [17]. Since then, considerable work has been done on 1-D cell layout generation <ref> [5, 6, 8, 11, 12, 14, 15, 19] </ref>. In contrast to the 1-D style, the 2-D style has received little attention and the few techniques proposed are ad hoc [15, 16, 20].
Reference: [12] <author> R. L. Maziasz and J. P. Hayes, </author> <title> Layout Minimization of CMOS Cells, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1992. </year>
Reference-contexts: We focus on one such domainthe layout of transistor-level CMOS circuits in the two-dimensional styleand propose a novel algorithmic technique that guarantees optimal width layouts. Functional cell layouts can be classified into two categories: one-dimensional (1-D or linear) and two-dimensional (2-D or multi-row) layouts <ref> [12, 16] </ref>. While the 1-D style restricts transistor placement to two parallel diffusion rows (called a P/N row), one for the P and the other for the N transistors, the 2-D style allows multiple such P/N rows. <p> The first general technique for 1-D cell width minimization of dual static CMOS cells was proposed by Uehara and VanCleemput [17]. Since then, considerable work has been done on 1-D cell layout generation <ref> [5, 6, 8, 11, 12, 14, 15, 19] </ref>. In contrast to the 1-D style, the 2-D style has received little attention and the few techniques proposed are ad hoc [15, 16, 20]. <p> Section 6 proposes a circuit pre-processing scheme that improves run times by several orders of magnitude with little or no loss in optimality. 2 Problem Definition The 2-D layout style, illustrated in Fig. 2, is an extension of the more widely studied 1-D style <ref> [4, 5, 6, 12, 14, 17] </ref>. Table 1 summarizes the assumptions underlying the 2-D style and its associated width minimization problem. A linear sequence of transistors in which pairs of adjacent transistors share their diffusion terminals is called a transistor chain. <p> Hence, the cell width in a 1-D layout depends on two factors: the number of pairs p, and the number of diffusion gaps c 1. Assuming a virtual grid in which each transistor and diffusion gap has unit width, W c for a 1-D layout is defined as follows <ref> [12] </ref>: W c = no. of pairs + no. of chains 1 = p + c 1 (2) As we see later, the width W i of row i in the 2-D layout style can be expressed as W i = p i + c i 1 + v i , <p> Chain cover: The effects of interconnect will be temporarily ignored in order to simplify this discussion. We use a CMOS circuit T with fourteen P/N pairs, whose N sub-circuit and dual graph representations <ref> [12] </ref> are shown in Fig. 3, to illustrate the inuence of diffusion sharing and chain cover selection on 2-D cell width. <p> The 2-D width minimization problem then translates into a covering prob-lema subset of chains that covers each pair and has the minimum cell width needs to be determined. Although the problem of chain generation has been solved using various algorithms <ref> [6, 8, 12, 19] </ref>, a technique that is applicable to the entire class of complex dual CMOS networks is required. We use the chain generation algorithm proposed by Gupta et al. for the XPRESS cell synthesis tool [6]. <p> No. of nets No. of chains 1. 2-input parity circuit (Xor) [2] 10 7 16 2. Non-series-parallel bridge circuit [20] 10 10 20 3. 2-level implementation of z = (a' . (e + f)' + d)' <ref> [12] </ref> 4. 2-to-1 multiplexer 14 10 28 5. Series-parallel circuit for z = (a.b + (c+d) . (e+f) + g.h)' [17] 6. 2-level implementation of the majority function z = a.b + b.c + a.c 18 12 45 7. Series-parallel circuit [12] for z = (a.b.c.d + e.f.g.h + (i + <p> z = (a' . (e + f)' + d)' <ref> [12] </ref> 4. 2-to-1 multiplexer 14 10 28 5. Series-parallel circuit for z = (a.b + (c+d) . (e+f) + g.h)' [17] 6. 2-level implementation of the majority function z = a.b + b.c + a.c 18 12 45 7. Series-parallel circuit [12] for z = (a.b.c.d + e.f.g.h + (i + j).(k + l))' 8. 4-to-1 multiplexer [7] 24 17 367 9. Full adder [2] 28 17 92 10. 4-bit parity stage (implements 5-bit parity circuit) [7] 40 25 214 Table 5: Circuits used for experimentation Cct. <p> And-stacks can be exploited to reduce the complexity of the 2-D cell layout model. It is well-known that for a 1-D layout of a dual series-parallel circuit, and-stacks with odd numbers of transistors will appear together in any optimal solution <ref> [12] </ref> because the odd number of edges in a graph representation of the circuit can be collapsed to a single edge without affecting optimality. However, for and-stacks with an even number of transistors, forcing their transistors to be placed contiguously can lead to sub-optimal layouts.
Reference: [13] <author> G. L. Nemhauser and L. A. Wolsey, </author> <title> Integer and Combinatorial Optimization, </title> <publisher> John Wiley, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: at the cell bottom In the next section, we present an exact technique based on integer linear programming to generate optimum-width 2-D cell layouts. 4 ILP Formulation The general mixed integer linear programming (MILP) problem, of which an ILP problem is a special case, is stated below using matrix notation <ref> [13] </ref>. <p> Most generic ILP solution techniques use a branch-and-bound approach <ref> [13] </ref> that explores a search tree, every node of which represents a relaxed LP problem in which the integrality constraints on a subset of the integer variables are relaxed.
Reference: [14] <author> C.L. Ong, J.T. Li, and C.Y. Lo, GENAC: </author> <title> An Automatic Cell Synthesis Tool, </title> <booktitle> Proc. 26th Design Automation Conf., </booktitle> <pages> pp. 239-244, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: The first general technique for 1-D cell width minimization of dual static CMOS cells was proposed by Uehara and VanCleemput [17]. Since then, considerable work has been done on 1-D cell layout generation <ref> [5, 6, 8, 11, 12, 14, 15, 19] </ref>. In contrast to the 1-D style, the 2-D style has received little attention and the few techniques proposed are ad hoc [15, 16, 20]. <p> Section 6 proposes a circuit pre-processing scheme that improves run times by several orders of magnitude with little or no loss in optimality. 2 Problem Definition The 2-D layout style, illustrated in Fig. 2, is an extension of the more widely studied 1-D style <ref> [4, 5, 6, 12, 14, 17] </ref>. Table 1 summarizes the assumptions underlying the 2-D style and its associated width minimization problem. A linear sequence of transistors in which pairs of adjacent transistors share their diffusion terminals is called a transistor chain.
Reference: [15] <author> C.J. Poirier, Excellerator: </author> <title> Custom CMOS Leaf Cell Layout Generator, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 8, </volume> <pages> pp. 744-755, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: The first general technique for 1-D cell width minimization of dual static CMOS cells was proposed by Uehara and VanCleemput [17]. Since then, considerable work has been done on 1-D cell layout generation <ref> [5, 6, 8, 11, 12, 14, 15, 19] </ref>. In contrast to the 1-D style, the 2-D style has received little attention and the few techniques proposed are ad hoc [15, 16, 20]. <p> Since then, considerable work has been done on 1-D cell layout generation [5, 6, 8, 11, 12, 14, 15, 19]. In contrast to the 1-D style, the 2-D style has received little attention and the few techniques proposed are ad hoc <ref> [15, 16, 20] </ref>.
Reference: [16] <author> K. Tani, et al., </author> <title> Two-Dimensional Layout Synthesis for Large-Scale CMOS Circuits, </title> <booktitle> Proc. Intl Conf. on CAD, </booktitle> <pages> pp. 490-493, </pages> <year> 1991. </year>
Reference-contexts: We focus on one such domainthe layout of transistor-level CMOS circuits in the two-dimensional styleand propose a novel algorithmic technique that guarantees optimal width layouts. Functional cell layouts can be classified into two categories: one-dimensional (1-D or linear) and two-dimensional (2-D or multi-row) layouts <ref> [12, 16] </ref>. While the 1-D style restricts transistor placement to two parallel diffusion rows (called a P/N row), one for the P and the other for the N transistors, the 2-D style allows multiple such P/N rows. <p> Since then, considerable work has been done on 1-D cell layout generation [5, 6, 8, 11, 12, 14, 15, 19]. In contrast to the 1-D style, the 2-D style has received little attention and the few techniques proposed are ad hoc <ref> [15, 16, 20] </ref>.
Reference: [17] <author> T. Uehara and W.M. VanCleemput, </author> <title> Optimal Layout of CMOS Functional Arrays, </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. C-30, </volume> <pages> pp. 305-312, </pages> <month> May </month> <year> 1981. </year>
Reference-contexts: In contrast, the 2-D layouts in Figs. 1b and 1c have areas of only 1120mm 2 (18% smaller) and 1244mm 2 (9% smaller), respectively, and require fewer tracks. The first general technique for 1-D cell width minimization of dual static CMOS cells was proposed by Uehara and VanCleemput <ref> [17] </ref>. Since then, considerable work has been done on 1-D cell layout generation [5, 6, 8, 11, 12, 14, 15, 19]. In contrast to the 1-D style, the 2-D style has received little attention and the few techniques proposed are ad hoc [15, 16, 20]. <p> Section 6 proposes a circuit pre-processing scheme that improves run times by several orders of magnitude with little or no loss in optimality. 2 Problem Definition The 2-D layout style, illustrated in Fig. 2, is an extension of the more widely studied 1-D style <ref> [4, 5, 6, 12, 14, 17] </ref>. Table 1 summarizes the assumptions underlying the 2-D style and its associated width minimization problem. A linear sequence of transistors in which pairs of adjacent transistors share their diffusion terminals is called a transistor chain. <p> Non-series-parallel bridge circuit [20] 10 10 20 3. 2-level implementation of z = (a' . (e + f)' + d)' [12] 4. 2-to-1 multiplexer 14 10 28 5. Series-parallel circuit for z = (a.b + (c+d) . (e+f) + g.h)' <ref> [17] </ref> 6. 2-level implementation of the majority function z = a.b + b.c + a.c 18 12 45 7. Series-parallel circuit [12] for z = (a.b.c.d + e.f.g.h + (i + j).(k + l))' 8. 4-to-1 multiplexer [7] 24 17 367 9.
Reference: [18] <author> H. P. Williams, </author> <title> Model Building in Mathematical Programming, 2nd ed., </title> <publisher> John Wiley, </publisher> <address> New York, </address> <year> 1985. </year>
Reference: [19] <author> S. Wimer, R.Y. Pinter, and J.A. Feldman, </author> <title> Optimal Chaining of CMOS Transistors in a Functional Cell, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. CAD-6, </volume> <pages> pp. 795-801, </pages> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: The first general technique for 1-D cell width minimization of dual static CMOS cells was proposed by Uehara and VanCleemput [17]. Since then, considerable work has been done on 1-D cell layout generation <ref> [5, 6, 8, 11, 12, 14, 15, 19] </ref>. In contrast to the 1-D style, the 2-D style has received little attention and the few techniques proposed are ad hoc [15, 16, 20]. <p> The 2-D width minimization problem then translates into a covering prob-lema subset of chains that covers each pair and has the minimum cell width needs to be determined. Although the problem of chain generation has been solved using various algorithms <ref> [6, 8, 12, 19] </ref>, a technique that is applicable to the entire class of complex dual CMOS networks is required. We use the chain generation algorithm proposed by Gupta et al. for the XPRESS cell synthesis tool [6].

References-found: 19

