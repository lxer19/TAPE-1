URL: http://www.cs.cmu.edu/afs/cs/project/rtmach/public/papers/disk-bw-reserves.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/raj/www/recent-papers.html
Root-URL: 
Email: -amolano, kjuvva, raj+-@cs.cmu.edu  
Title: Real-Time Filesystems Guaranteeing Timing Constraints for Disk Accesses in RT-Mach  
Author: Anastasio Molano, Kanaka Juvva and Ragunathan Rajkumar 
Address: Pittsburgh, PA 15146  
Affiliation: Real-Time and Multimedia Laboratory 1 Department of Computer Science Carnegie Mellon University  
Abstract: Traditional real-time systems have largely avoided the use of disks due to their relative slow speeds and their unpredictability. However, many real-time applications including multimedia systems and real-time database applications benefit significantly from the use of disks to store and access real-time data. In this paper, we investigate the problem of obtaining guaranteed timely access to files on a disk in a real-time system. Our study focuses on several aspects of this problem of providing a real-time filesystem. First, we consider the use of two real-time disk scheduling algorithms: earliest deadline scheduling and just-in-time scheduling, a variation of aperiodic servers for the disk. The latter algorithm is designed to improve disk throughput that can be hurt when a real-time scheduling algorithm such as EDF is applied directly. Admission control policies with practically acceptable properties of performance and usability are provided. Next, we design and implement a real-time filesystem on the RT-Mach microkernel-based system running a real-time shell. The new interface we develop is based on RT-Mach's resource reservation paradigm and provides guaranteed and timely access for multiple concurrent applications requiring disk bandwidth with different timing and volume requirements. Finally, we perform a detailed performance evaluation of the real-time filesystem including its raw performance. We show the following positive but rather surprising result: our real-time scheduling filesystem not only provides guaranteed and timely access but also does so at relatively high levels of throughput. Traditional disk scheduling algorithms offer completely unacceptable file access latencies for real-time applications and do so only at slightly higher throughput. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Abbott and H. Garcia-Molina. </author> <title> Scheduling Real-Time Transactions with Disk Resident Data X Server. </title> <type> Tech. </type> <institution> Rept. CS-TR-207-89, Department of Computer Science, Princeton University, </institution> <month> Feb., </month> <year> 1989. </year>
Reference-contexts: Mr. Molano was funded by a research grant from the Community of Madrid and by the National R&D Program of Spain under contracts TIC96-0982 and TIC97-0438. one type (namely network packets). Work described in <ref> [1, 2, 7, 8] </ref> study various aspects of real-time disks and filesystems. The approach used in [1] is a variation of the Scan algorithm in which the SCAN direction changes towards the Earliest Deadline First request only if the deadline is considered to be met. <p> Molano was funded by a research grant from the Community of Madrid and by the National R&D Program of Spain under contracts TIC96-0982 and TIC97-0438. one type (namely network packets). Work described in [1, 2, 7, 8] study various aspects of real-time disks and filesystems. The approach used in <ref> [1] </ref> is a variation of the Scan algorithm in which the SCAN direction changes towards the Earliest Deadline First request only if the deadline is considered to be met. <p> Chen et al. [7] propose two algorithms which combine deadline information and disk service time information. They show that these algorithms minimize transaction loss ratio in real-time database applications. Both <ref> [1] </ref> and [7] are proposed and studied under soft deadline schemes. A scheduling model close to ours is found in [2] but its approach is one of using fixed priority scheduling, minimizing blocking through the use of "chunking" and using a static task set.
Reference: 2. <author> S. J. Daigle and J. K. Strosnider. </author> <title> "Disk Scheduling for Multimedia Data Streams". </title> <booktitle> Proceedings of the SPIE Conference on High-Speed Networking and Multimedia Networking (1994). </booktitle>
Reference-contexts: Mr. Molano was funded by a research grant from the Community of Madrid and by the National R&D Program of Spain under contracts TIC96-0982 and TIC97-0438. one type (namely network packets). Work described in <ref> [1, 2, 7, 8] </ref> study various aspects of real-time disks and filesystems. The approach used in [1] is a variation of the Scan algorithm in which the SCAN direction changes towards the Earliest Deadline First request only if the deadline is considered to be met. <p> They show that these algorithms minimize transaction loss ratio in real-time database applications. Both [1] and [7] are proposed and studied under soft deadline schemes. A scheduling model close to ours is found in <ref> [2] </ref> but its approach is one of using fixed priority scheduling, minimizing blocking through the use of "chunking" and using a static task set. Also, only simulation studies were carried out.
Reference: 3. <author> Joseph, M. and Pandya. </author> <title> "Finding Response Times in a Real-Time System". </title> <journal> The Computer Journal (British Computing Society) 29, </journal> <month> 5 (October </month> <year> 1986), </year> <pages> 390-395. </pages>
Reference-contexts: For the rate-monotonic [6] and the deadline-monotonic [5] fixed priority schemes, the completion time CT i of a reservation t i with a resource allocation can be computed using a recurrence relation <ref> [3, 16] </ref>. If this completion time is less than the deadline for all reservations including the incoming one, a reservation request can be admitted. Else, it will be rejected. For the earliest deadline first policy, the reservations requiring disk bandwidth are ordered according to rate-monotonic priorities, (i.e.
Reference: 4. <author> Lehoczky, J. P., Sha, L., Strosnider, J. K. and Tokuda, H. </author> <title> "Fixed Priority Scheduling Theory for Hard Real-Time Systems". </title> <type> Technical Report, </type> <institution> Department of Statistics, Car-negie Mellon University (1991). </institution>
Reference-contexts: When such stealing happens, the cur rent slack factors are updated as "j, j -J-, k j (k j -1). 3 Such "slack-stealing" has been done in the context of processor scheduling theory in order to provide better response to aperiodic activities <ref> [4] </ref>. The optimization, cost functions and implementation tradeoffs seem to be different for the processor and the disk, however.
Reference: 5. <author> Leung, J. Y., and Whitehead, J. </author> <title> "On the Complexity of Fixed-Priority Scheduling of Periodic, Real-Time Tasks". Performance Evaluation 2, </title> <address> 4 (Dec. </address> <year> 1982), </year> <pages> 237-250. </pages>
Reference-contexts: When D i &lt; T i , the required earlier completion time (T i - D i ) is added to the blocking factor. For the rate-monotonic [6] and the deadline-monotonic <ref> [5] </ref> fixed priority schemes, the completion time CT i of a reservation t i with a resource allocation can be computed using a recurrence relation [3, 16]. If this completion time is less than the deadline for all reservations including the incoming one, a reservation request can be admitted.
Reference: 6. <author> Liu, C. L. and Layland J. W. </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real Time Environment". </title> <journal> JACM 20 (1) (1973), </journal> <volume> 46 - 61. </volume>
Reference-contexts: If there are no pending requests, the disk remains idle. 2.5. Admission Control Our simplest disk head scheduling scheme employs the earliest deadline scheduling algorithm (EDF) <ref> [6] </ref>. Since EDF is a preemptive scheduling algorithm, a higher priority reservation must be able to preempt a lower priority reservation. However, instantaneous preemptions are not possible in disk scheduling. An ongoing disk block access must complete before the next highest priority disk block access request can be issued. <p> This introduces a blocking (priority inversion) factor of a single filesystem block access when D i = T i (as per [13]). When D i &lt; T i , the required earlier completion time (T i - D i ) is added to the blocking factor. For the rate-monotonic <ref> [6] </ref> and the deadline-monotonic [5] fixed priority schemes, the completion time CT i of a reservation t i with a resource allocation can be computed using a recurrence relation [3, 16].
Reference: 7. <author> S. Chen, J. A. Stankovic, J. F. Kurose, D. Towsley. </author> <title> "Performance Evaluation of Two New Disk Scheduling Algorithms for Real-Time Systems". </title> <booktitle> The Real-Time Systems Journal 3 (1991), </booktitle> <pages> 307-336. </pages>
Reference-contexts: Mr. Molano was funded by a research grant from the Community of Madrid and by the National R&D Program of Spain under contracts TIC96-0982 and TIC97-0438. one type (namely network packets). Work described in <ref> [1, 2, 7, 8] </ref> study various aspects of real-time disks and filesystems. The approach used in [1] is a variation of the Scan algorithm in which the SCAN direction changes towards the Earliest Deadline First request only if the deadline is considered to be met. <p> At any scheduling point the request with the Earliest Feasible deadline is chosen for service and the disk head scans towards it. Chen et al. <ref> [7] </ref> propose two algorithms which combine deadline information and disk service time information. They show that these algorithms minimize transaction loss ratio in real-time database applications. Both [1] and [7] are proposed and studied under soft deadline schemes. <p> Chen et al. <ref> [7] </ref> propose two algorithms which combine deadline information and disk service time information. They show that these algorithms minimize transaction loss ratio in real-time database applications. Both [1] and [7] are proposed and studied under soft deadline schemes. A scheduling model close to ours is found in [2] but its approach is one of using fixed priority scheduling, minimizing blocking through the use of "chunking" and using a static task set. Also, only simulation studies were carried out.
Reference: 8. <author> P. Lougher and D. Shepherd. </author> <title> "The Design and Implementation of a Continuous Media Storage Server ". Proceedings of the 3rd International Workshop on Network and Operating System Support for Audio and Video (November 1992). </title>
Reference-contexts: Mr. Molano was funded by a research grant from the Community of Madrid and by the National R&D Program of Spain under contracts TIC96-0982 and TIC97-0438. one type (namely network packets). Work described in <ref> [1, 2, 7, 8] </ref> study various aspects of real-time disks and filesystems. The approach used in [1] is a variation of the Scan algorithm in which the SCAN direction changes towards the Earliest Deadline First request only if the deadline is considered to be met.
Reference: 9. <author> C. W. Mercer and R. Rajkumar and J. Zelenka. </author> <title> Temporal Protection in Real-Time Operating Systems. </title> <booktitle> Proceedings of the 11th IEEE Workshop on Real-Time Operating Systems and Software, </booktitle> <month> May, </month> <year> 1994, </year> <pages> pp. 79-83. </pages>
Reference-contexts: Our detailed set of experiments presented later in this paper show that guaranteed timely access to files on disk is possible, and that this can be achieved at relatively low cost in terms of disk throughput. 1.2. A Brief Overview of RT-Mach The primary goal behind the RT-Mach effort <ref> [9] </ref> 2 is to 2 URL: "http://www.cs.cmu.edu/~rtmach" design, develop, demonstrate and distribute an integrated framework that encompasses task scheduling, virtual memory management, synchronization mechanisms, inter-process communications, real-time disk scheduling, network protocol processing and distributed coordination. The framework is intended to ease and facilitate the development of predictable real-time applications.
Reference: 10. <author> C. W. Mercer and S. Savage and H. Tokuda. </author> <title> Processor Capacity Reserves for Multimedia Operating Systems. </title> <booktitle> Proceedings of the IEEE International Conference on Multimedia Computing and Systems, </booktitle> <month> May, </month> <year> 1994. </year>
Reference-contexts: The framework is intended to ease and facilitate the development of predictable real-time applications. RT-Mach adopts the resource reservation model <ref> [10, 12] </ref>, which allows applications to specify their resource demands independent of the scheduling algorithm actually used in the kernel. A real-time socket library provides predictable and efficient protocol processing for networked applications.
Reference: 11. <author> Nakajima, T., Kitayama, T., Arakawa, H. and Tokuda, H. </author> <title> "Integrated Management of Priority Inversion in RT-Mach". </title> <booktitle> Proceedings of the IEEE Real-Time Systems Symposium (December 1993). </booktitle>
Reference-contexts: The most salient feature of RTS is the use of RT-IPC, a realtime interprocess communication mechanism to avoid priority inversion at the server side that includes priority based message queue ordering, establishment of the message buffer size, and control of the handoff policy <ref> [11] </ref>. The file system runs in the context of realtime worker threads which execute concurrently and attend user requests sent by means of RT-IPC messages (see Figure 3-1. The file system invokes I/O operations using the RT-Mach device driver interface (ds_routines ()) implemented as IPC messages to the kernel.
Reference: 12. <author> R. Rajkumar, K. Juvva, A. Molano and S. Oikawa. </author> <title> Resource Kernels: A Resource-Centric Approach to Real-Time Systems. </title> <booktitle> To Appear in the Proceedings of the SPIE Conference on Multimedia Computing and Networking, </booktitle> <month> Jan, </month> <year> 1998. </year>
Reference-contexts: The framework is intended to ease and facilitate the development of predictable real-time applications. RT-Mach adopts the resource reservation model <ref> [10, 12] </ref>, which allows applications to specify their resource demands independent of the scheduling algorithm actually used in the kernel. A real-time socket library provides predictable and efficient protocol processing for networked applications. <p> A schedulability analysis tool and a distributed monitoring facility provide support for the analysis and debugging of distributed real-time applications. Extensive support is available for multimedia devices including full-duplex audio, real-time video capture, mobile networking with networking support. 1.2.1. Resource Kernels A resource kernel <ref> [12] </ref> is defined to be one which provides timely, guaranteed and protected access to system resources. The resource kernel allows applications to specify only their resource demands leaving the kernel to satisfy those demands using hidden resource management schemes.
Reference: 13. <author> Sha, L., Rajkumar, R. and Lehoczky, J. P. </author> <title> "Priority Inheritance Protocols: An Approach to Real-Time Synchronization". </title> <type> Technical Report (CMU-CS-87-181), </type> <institution> Department of Computer Science, </institution> <address> CMU (1987). </address>
Reference-contexts: However, instantaneous preemptions are not possible in disk scheduling. An ongoing disk block access must complete before the next highest priority disk block access request can be issued. This introduces a blocking (priority inversion) factor of a single filesystem block access when D i = T i (as per <ref> [13] </ref>). When D i &lt; T i , the required earlier completion time (T i - D i ) is added to the blocking factor.
Reference: 14. <author> Sprunt, H.M.B., Sha, L., and Lehoczky, J.P. </author> <title> "Aperiodic Task Scheduling on Hard Real-Time Systems". The Real-Time Systems Journal (June 1989). </title>
Reference-contexts: Fortunately, a hybrid scheme which can obtain all the benefits of the earliest deadline scheduling algorithm and at least part of the benefits of the scan algorithm is possible. Using the notion of slack-stealing inherent in all aperiodic servers <ref> [14] </ref>, a scheduling algorithm can exploit the slack available to higher priority tasks to schedule accesses of other disk blocks which are closer to the current head position. 3 A brief description of the just-in-time disk scheduling algorithm is as follows.
Reference: 15. <author> H. Tezuka and T. Nakajima. </author> <title> Simple Continuous Media Storage Server on Real-Time Mach. </title> <booktitle> The USENIX 1996 Annual Technical Conference, </booktitle> <address> San Diego, </address> <month> January, </month> <year> 1996. </year>
Reference-contexts: Also, only simulation studies were carried out. In contrast, we use dynamic priority scheduling, exploit blocking instead of minimizing it and evaluate an implementation within our resource framework. A multimedia storage server design and implementation is reported in <ref> [15] </ref>. In this scheme, the disk request queue is divided into two different queues, one for real-time threads and another for non-real-time threads. Both queues were scheduled following C-Scan with the real-time queue taking precedence over the non-real-time queue.
Reference: 16. <author> Tindell, K. </author> <title> An Extendible Approach for Analysing Fixed Priority Hard Real-Time Tasks. </title> <type> Tech. </type> <institution> Rept. YCS189, Department of Computer Science, University of York, </institution> <month> December, </month> <year> 1992. </year> <title> Table of Contents </title>
Reference-contexts: For the rate-monotonic [6] and the deadline-monotonic [5] fixed priority schemes, the completion time CT i of a reservation t i with a resource allocation can be computed using a recurrence relation <ref> [3, 16] </ref>. If this completion time is less than the deadline for all reservations including the incoming one, a reservation request can be admitted. Else, it will be rejected. For the earliest deadline first policy, the reservations requiring disk bandwidth are ordered according to rate-monotonic priorities, (i.e.
Reference: 1. <author> Introduction 0 1.1. </author> <title> Comparison with Related Work 0 1.2. A Brief Overview of RT-Mach 1 1.2.1. Resource Kernels 1 1.2.2. RT-Mach as a Resource Kernel 1 1.3. Organization of the Paper 2 </title>
Reference-contexts: Mr. Molano was funded by a research grant from the Community of Madrid and by the National R&D Program of Spain under contracts TIC96-0982 and TIC97-0438. one type (namely network packets). Work described in <ref> [1, 2, 7, 8] </ref> study various aspects of real-time disks and filesystems. The approach used in [1] is a variation of the Scan algorithm in which the SCAN direction changes towards the Earliest Deadline First request only if the deadline is considered to be met. <p> Molano was funded by a research grant from the Community of Madrid and by the National R&D Program of Spain under contracts TIC96-0982 and TIC97-0438. one type (namely network packets). Work described in [1, 2, 7, 8] study various aspects of real-time disks and filesystems. The approach used in <ref> [1] </ref> is a variation of the Scan algorithm in which the SCAN direction changes towards the Earliest Deadline First request only if the deadline is considered to be met. <p> Chen et al. [7] propose two algorithms which combine deadline information and disk service time information. They show that these algorithms minimize transaction loss ratio in real-time database applications. Both <ref> [1] </ref> and [7] are proposed and studied under soft deadline schemes. A scheduling model close to ours is found in [2] but its approach is one of using fixed priority scheduling, minimizing blocking through the use of "chunking" and using a static task set.
Reference: 2. <editor> Disk Bandwidth Resource Management 2 2.1. </editor> <title> Important Considerations 2 2.2. Filesystem Bandwidth Specification 2 2.3. Resource Specification Notation 2 2.4. Scheduling Policy 2 2.5. Admission Control 3 2.6. Exploiting 'B': Just-In-Time Disk Scheduling 3 2.7. "Just-in-Time" Slack-Stealing Algorithm for Disk Bandwidth 4 2.8. The JIT Replenishment Algorithm 4 </title>
Reference-contexts: Mr. Molano was funded by a research grant from the Community of Madrid and by the National R&D Program of Spain under contracts TIC96-0982 and TIC97-0438. one type (namely network packets). Work described in <ref> [1, 2, 7, 8] </ref> study various aspects of real-time disks and filesystems. The approach used in [1] is a variation of the Scan algorithm in which the SCAN direction changes towards the Earliest Deadline First request only if the deadline is considered to be met. <p> They show that these algorithms minimize transaction loss ratio in real-time database applications. Both [1] and [7] are proposed and studied under soft deadline schemes. A scheduling model close to ours is found in <ref> [2] </ref> but its approach is one of using fixed priority scheduling, minimizing blocking through the use of "chunking" and using a static task set. Also, only simulation studies were carried out.
Reference: 3. <editor> Disk Bandwidth Reservation in Real-Time Mach 4 3.1. </editor> <booktitle> The Architecture of the Reserved Filesystem 4 3.2. The API 5 </booktitle>
Reference-contexts: For the rate-monotonic [6] and the deadline-monotonic [5] fixed priority schemes, the completion time CT i of a reservation t i with a resource allocation can be computed using a recurrence relation <ref> [3, 16] </ref>. If this completion time is less than the deadline for all reservations including the incoming one, a reservation request can be admitted. Else, it will be rejected. For the earliest deadline first policy, the reservations requiring disk bandwidth are ordered according to rate-monotonic priorities, (i.e.
Reference: 4. <author> Performance Evaluation 5 4.1. </author> <title> Disk Parameters 5 4.2. Overhead Components of Raw Disk Access 6 4.3. Experiment #1 6 4.3.1. Experiment #2 8 4.3.2. Sensitivity of File Location to Disk Throughput 9 </title>
Reference-contexts: When such stealing happens, the cur rent slack factors are updated as "j, j -J-, k j (k j -1). 3 Such "slack-stealing" has been done in the context of processor scheduling theory in order to provide better response to aperiodic activities <ref> [4] </ref>. The optimization, cost functions and implementation tradeoffs seem to be different for the processor and the disk, however.
Reference: 5. <institution> Concluding Remarks 9 References 10 </institution>
Reference-contexts: When D i &lt; T i , the required earlier completion time (T i - D i ) is added to the blocking factor. For the rate-monotonic [6] and the deadline-monotonic <ref> [5] </ref> fixed priority schemes, the completion time CT i of a reservation t i with a resource allocation can be computed using a recurrence relation [3, 16]. If this completion time is less than the deadline for all reservations including the incoming one, a reservation request can be admitted.
References-found: 21

