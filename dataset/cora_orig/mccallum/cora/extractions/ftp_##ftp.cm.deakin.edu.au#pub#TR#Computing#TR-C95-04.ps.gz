URL: ftp://ftp.cm.deakin.edu.au/pub/TR/Computing/TR-C95-04.ps.gz
Refering-URL: http://gollum.cm.deakin.edu.au/techreports.html
Root-URL: 
Email: ang-@deakin.edu.au  
Title: Memory Spaces for the RHODOS Multi-threaded Microkernel System  
Author: M. Hobbs, G. Wickham, D. De Paoli, A. Goscinski -mick, gjw, ddp, 
Note: *This work was partly supported by the Australian Research Council under Grant A49232429 and the Deakin University Research Grant 0504010151.  
Address: Geelong Victoria 3217, Australia.  
Affiliation: School of Computing and Mathematics Deakin University,  
Date: October 23, 1995  
Pubnum: RHODOS  
Abstract: Enhancing the RHODOS microkernel to provide the benefits of multithreading required a number of areas to be redesigned and redeveloped. A major component of the RHODOS system that required careful planning, study and development was the RHODOS unit of memory management termed a space. The concept of a space is used to arbitrarily identify and manage (in an architecture independent fashion) an area of memory which may or may not be shadowed to a file on disk. This report introduces the requirements and design issues that the RHODOS multi-threaded microkernel imposes on the memory management subsystem. The differences between this implementation and the original implementation are also highlighted. 
Abstract-found: 1
Intro-found: 1
Reference: [Abrosimov, et al. 89] <author> V. Abrosimov, M. Rozier, M. Sapiro. </author> <title> Generic Memory Management for Operating System Kernels. </title> <booktitle> 12th Symposium on Operating System Principles (SOSP 89): </booktitle> <address> pp123-136. </address>
Reference: [De Paoli, et al. 94] <author> D. De Paoli, M. Hobbs, G. Wickham, A. Goscinski. </author> <title> RHODOS A Microkernel based Distributed Operating System: An Overview of the 1993 Version. </title> <type> Technical Report TR C94/04, </type> <institution> School of Computing and Mathematics, Deakin University, Geelong. </institution>
Reference-contexts: The spaces were attached to a process through the Process Control Block in an array of pointers <ref> [De Paoli, et al. 94] </ref>, with the location in the array determining the type of space that the pointer points to (either a Text, Data or Stack space). <p> This is used by the Space Manager in its maintenance of the process hierarchy (child/sibling relationships). Block 3: ProcessSpace ID Structure Also contained in this data structure are fields specific to the context switching module of the Nucleus <ref> [De Paoli, et al. 94] </ref>, indicating whether the process (and its spaces) required to be reinstalled into a given address space. The next fields of the Process ID structure are the head and tail pointers to the singly linked list that combine to form this process.
Reference: [Gerrity, et al., 91] <author> G. Gerrity, A. Goscinski, J. Indulska, W. Toomey and Z. Zhu. </author> <title> RHODOS A Test Bed for the Studying Design Issues in Distributed Operating Systems. </title> <booktitle> Proceedings of the 2nd Singapore International Conference on Networks (SINCON91). </booktitle> <month> September. </month> <note> RHODOS October 23, 1995 References Page 19 </note>
Reference: [Gingell, et al. 88] <author> R. Gingell, J. Moran, W. Shannon. </author> <title> Virtual Memory Architecture in SunOS. </title> <booktitle> Proceedings of the Summer 87 USENIX Conference, </booktitle> <month> June. </month>
Reference: [Goscinski, et al. 94] <author> A. Goscinski, M. Hobbs, P. Joyce and G. Wickham. </author> <title> Message Passing and RPC-based Interprocess Communication in RHODOS. </title> <type> Technical Report TR C94/09, </type> <institution> School of Computing and Mathematics, Deakin University, Geelong. </institution>
Reference-contexts: The exibility (and therefore extensibility) of this system is achieved by separating the entire system into three layers of abstraction: a hardware dependent level; a kernel management level; and a user interface level. Spaces are identified through the use of a RHODOS SName <ref> [Goscinski, et al. 94] </ref> (System Name). This identifying entity, defined as a structure, also contains fields for protection mechanisms to be utilised such as capability techniques. Therefore, RHODOS Spaces can be shared throughout the system by the passing around of their identifying SNames. <p> This required the full use of the RHODOS naming system. As stated in Section 2.1, the RHODOS SName is used for this purpose and both processes, and their spaces are allocated a system name <ref> [Goscinski, et al. 94] </ref>. RHODOS October 23, 1995 RHODOS Memory Management Data Structures Page 13 The process itself may have a dynamic number of spaces associated to it. Therefore spaces are attached to the process/space identification structure using a linked list. Block 3 shows this data structure.
Reference: [Khalidi, et al. 93] <author> Y. Khalidi, M. Talluri, M. Nelson, D. Williams. </author> <title> Virtual Memory Support for Multiple Pages. </title> <type> Technical Report, </type> <institution> Sun Microsystems Labs Inc. SMLI TR-93-17, </institution> <month> September </month> <year> 1993. </year>
Reference: [Rashid, et al. 88] <author> R. Rashid, A. Tevanian, M. Young, D. Golub, R. Baron, D. Black, W. Bolosky, J. Chew. </author> <title> Machine-Independent Virtual Memory Management for Paged Uniprocessors and Multiprocessor Architectures. </title> <journal> IEEE Transactions on Computers 37, </journal> <volume> no 8. </volume> <month> August, pp896-908. </month>
Reference: [Toomey 90] <author> W. Toomey. </author> <title> Memory Management in RHODOS. </title> <type> Technical Report CS90/19, </type> <institution> Department of Computer Science, University College, University of New South Wales. </institution> <month> May. </month>
Reference-contexts: Although the technical content of this stage was not as complex as that of the multi-threading of the microkernel, the scope and extent of this stage certainly surpasses the first stage modifications. The initial implementation of the RHODOS space <ref> [Toomey 90] </ref> suffered from an over simplification of the process entities, and therefore the restrictions this imposed on them. The most obvious restriction imposed was the maximum size and number of spaces a process could contain. <p> The data structures and their linking which support the RHODOS Spaces are presented in Section 4. 2 RHODOS Memory Management The concept of memory spaces was developed for RHODOS to provide the requirements of naming, shareability and protection <ref> [Toomey 90] </ref>. A secondary requirement was to ensure a separation between the underlying hardware and the interface provided by RHODOS spaces, which allows simple portability over different memory architectures whilst the higher level view from kernel, system and user processes, are that they have remained unchanged. <p> In the case of the Sun 3/50, segments are groups of 16 pages which can be mapped in and out as an entire block. Therefore they reduce significantly the number of memory management calls <ref> [Toomey 90] </ref>. This allows an extremely quick mapping in and out of processes from an address space (or context). Since segments are hardware specific, they have to be kept separate from the space elements themselves.
Reference: [Wickham, et al. 94a] <author> G. Wickham, M. Hobbs, A. Goscinski. </author> <title> Research into the Development of the RHODOS Multi-threaded Microkernel. </title> <type> Technical Report TR C94/05, </type> <institution> School of Computing and Mathematics, Deakin University, Geelong. </institution>
Reference-contexts: A considerable amount of effort was devoted to ensuring that the final product resulted in a microkernel that provided all that was necessary, not only for the present but also for the near future. Research into this area and the logical design of such a system are presented in <ref> [Wickham, et al. 94a] </ref> and [Wickham, et al. 94b] respectively, whilst the implementation aspects are reported in [Wickham, et al. 94c]. With the foundations of the RHODOS system firmly in place, the second and more involved stage was undertaken. <p> The duplication of the page (the fourth page) is shown in Figure 4. The ability to implement paging effectively was not possible in the previous version of RHODOS due to the microkernel being single threaded <ref> [Wickham, et al. 94a] </ref> and the space structures not being as rich and exible as required. The new space structures, in combination with the multi-threaded microkernel allows the implementation of paging. All physical pages used by processes on a given host are all contained within a list of used pages.
Reference: [Wickham, et al. 94b] <author> G. Wickham, M. Hobbs, A. Goscinski. </author> <title> The Logical Design of the RHODOS Multi-threaded Microkernel. </title> <type> Technical Report TR C94/06, </type> <institution> School of Computing and Mathematics, Deakin University, Geelong. </institution>
Reference-contexts: Research into this area and the logical design of such a system are presented in [Wickham, et al. 94a] and <ref> [Wickham, et al. 94b] </ref> respectively, whilst the implementation aspects are reported in [Wickham, et al. 94c]. With the foundations of the RHODOS system firmly in place, the second and more involved stage was undertaken.
Reference: [Wickham, et al. 94c] <author> G. Wickham, M. Hobbs, A. Goscinski. </author> <title> The Implementation of the RHODOS Multi-threaded Microkernel. </title> <type> Technical Report, </type> <institution> School of Computing and Mathematics, Deakin University, </institution> <note> Geelong (in preparation). </note>
Reference-contexts: Research into this area and the logical design of such a system are presented in [Wickham, et al. 94a] and [Wickham, et al. 94b] respectively, whilst the implementation aspects are reported in <ref> [Wickham, et al. 94c] </ref>. With the foundations of the RHODOS system firmly in place, the second and more involved stage was undertaken.
References-found: 11

