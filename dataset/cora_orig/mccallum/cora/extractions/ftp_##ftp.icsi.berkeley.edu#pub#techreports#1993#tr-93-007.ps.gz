URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1993/tr-93-007.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1993.html
Root-URL: http://www.icsi.berkeley.edu
Email: E-mail: luby@icsi.berkeley.edu.  E-mail: naor@cs.technion.ac.il.  E-mail: naor@wisdom.weizmann.ac.il.  
Title: On Removing Randomness from a Parallel Algorithm for Minimum Cuts (Extended Abstract)  
Author: Michael Luby Joseph Naor Moni Naor 
Note: Research supported in part by NSF Grant CCR-9016468 and grant No. 89-00312 from the United States-Israel Binational Science Foundation (BSF), Jerusalem, Israel  Part of this work was done while the author was visiting the International  This work was done while the author was at the  
Address: Berkeley.  University.  Science.  
Affiliation: ICSI, UC  Computer Science Department, Technion  Computer Science Institute at Berkeley, CA. Department of Applied Mathematics, Weizmann Institute of  IBM Almaden Research Center.  
Date: February 1993  
Pubnum: TR-93-007  
Abstract: The weighted minimum cut problem in a graph is a fundamental problem in combinatorial optimization. Recently, Karger suggested a randomized parallel algorithm for this problem. We show that a similar algorithm can be implemented using only O(log 2 n) random bits. We also show that our result holds for computing minimum weight k-cuts, where k is fixed. 
Abstract-found: 1
Intro-found: 1
Reference: [Al] <author> N. Alon, </author> <title> Generating pseudo-random permutations and maximum flow algorithms, </title> <journal> Information Processing Letters, </journal> <volume> Vol. 35, </volume> <pages> pp. 201-204, </pages> <year> 1990. </year>
Reference-contexts: The running time of the current best algorithm for maximum flow is slightly more than O (mn). This was first achieved by Goldberg and Tarjan [GT] and the complexity of their algorithm is O (mn log (n 2 =m). Their result was later improved by <ref> [Al, CH, CHM, KRT, PW] </ref> For many years, since the paper of Gomory and Hu appeared, the only approach to the minimum cut problem was via maximum flows.
Reference: [AS] <author> N. Alon and J. Spencer, </author> <title> The probabilistic method, </title> <publisher> John Wiley and Sons Inc., </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: The ratio between them is bounded by a polynomial in n and m. We set the weight of each edge e 2 E E 0 to be bw (e)=c. We conclude with the next proposition that follows from <ref> [AS, pp. 228-232] </ref>. Proposition 4.1 The number of random bits needed to generate m f0; 1g random variables is O (log n) if: (i) the variables are pairwise independent; (ii) the probability that each variable is "1" (or "0") is not less than 1 poly (n) .
Reference: [CG] <author> B. Chor and O. Goldreich, </author> <title> On the power of two point sampling, </title> <journal> Journal of Complexity, </journal> <volume> Vol. 5, </volume> <pages> pp. 96-106, </pages> <year> 1989. </year>
Reference-contexts: Each stage in the algorithm can be implemented using O (log n) random bits; independence, however, is required between stages and the total number of random bits needed is O (log 2 n). We use the standard method of two point sampling <ref> [CG] </ref> to amplify the probability of success to a constant with only a constant factor increase in the number of random bits. The precise time and processor bounds are determined in Section 4.3. We also consider multiway cuts, or k-cuts. <p> Recall that there are two reasons for simultaneous runs. The first one is to decrease the probability of error. However, to decrease the probability of error 10 to a constant it suffices to use the method of two point sampling of Chor and Goldreich <ref> [CG] </ref>. Generating random bits using this method guarantees that runs of the basic algorithm are pairwise independent. The number of random bits needed for implementing two point sampling remains O (log 2 n). The second reason for simultaneous runs is testing all the values in the set B.
Reference: [CH] <author> J. Cheriyan and T. Hagerup, </author> <title> A randomized maximum flow algorithm, </title> <booktitle> Proceedings of the 29th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1988, </year> <pages> pp. 118-123. </pages>
Reference-contexts: The running time of the current best algorithm for maximum flow is slightly more than O (mn). This was first achieved by Goldberg and Tarjan [GT] and the complexity of their algorithm is O (mn log (n 2 =m). Their result was later improved by <ref> [Al, CH, CHM, KRT, PW] </ref> For many years, since the paper of Gomory and Hu appeared, the only approach to the minimum cut problem was via maximum flows.
Reference: [CHM] <author> J. Cheriyan, T. Hagerup and S. N. Maheshwari, </author> <title> Can a maximum flow be computed in o(mn) time?, </title> <booktitle> Proceedings of International Colloquium on Automata, Languages and Programming, </booktitle> <year> 1990. </year>
Reference-contexts: The running time of the current best algorithm for maximum flow is slightly more than O (mn). This was first achieved by Goldberg and Tarjan [GT] and the complexity of their algorithm is O (mn log (n 2 =m). Their result was later improved by <ref> [Al, CH, CHM, KRT, PW] </ref> For many years, since the paper of Gomory and Hu appeared, the only approach to the minimum cut problem was via maximum flows.
Reference: [Ga] <author> H. N. Gabow, </author> <title> Applications of a Poset Representation to Edge Connectivity and Graph Rigidity, </title> <booktitle> Proceedings of the 32nd Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <address> San Juan, Puerto Rico, </address> <year> 1991, </year> <pages> pp. 812-821. </pages>
Reference-contexts: In the unweighted case, there are several efficient algorithms for computing the minimum cut. An O (mn) algorithm was discovered by Podderyugin [Po], and independently by Matula [Ma]. Recently, Gabow <ref> [Ga] </ref> showed how to compute the minimum cut in O (`n log (n 2 =m)), where ` denotes 1 the cardinality of the minimum cut.
Reference: [GH1] <author> R.E. Gomory, T.C. Hu, </author> <title> Multi-Terminal Network Flows, </title> <journal> Siam J. Appl. Math., </journal> <volume> Vol. 9, </volume> <pages> pp. 551-560, </pages> <year> 1961. </year>
Reference-contexts: Each fs; tg-minimum cut can be found by computing the maximum flow from s to t. In a classic paper, Gomory and Hu <ref> [GH1] </ref> have shown that the minimum cut can be determined by computing an equivalent flow-tree which requires considering only n 1 fs; tg minimum cuts chosen appropriately.
Reference: [GH2] <author> O. Goldschmidt and D. S. Hochbaum, </author> <title> Polynomial algorithm for the k-cut problem, </title> <booktitle> Proceedings of the 29th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1988, </year> <pages> pp. 444-451. </pages>
Reference-contexts: If the graph is weighted, we want to minimize the weight of the edges in the cut. This problem is NP-complete for arbitrary k [GJ]. Hochbaum and Goldschmidt <ref> [GH2] </ref> have shown that for fixed k, the minimum k-cut can be computed in polynomial time. It follows from Karger's results [Ka] that this problem is also in RNC.
Reference: [GJ] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and intractability a guide to the theory of NP-completeness, </title> <editor> W. H. </editor> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: If the graph is weighted, we want to minimize the weight of the edges in the cut. This problem is NP-complete for arbitrary k <ref> [GJ] </ref>. Hochbaum and Goldschmidt [GH2] have shown that for fixed k, the minimum k-cut can be computed in polynomial time. It follows from Karger's results [Ka] that this problem is also in RNC.
Reference: [GSS] <author> L. Goldschlager, R. Shaw and J. </author> <title> Staples, The maximum flow problem is log space complete for P, </title> <journal> Theoretical Computer Science, </journal> <volume> Vol. 21, </volume> <pages> pp. 105-111, </pages> <year> 1982. </year> <month> 11 </month>
Reference-contexts: An O (mn) algorithm was discovered by Podderyugin [Po], and independently by Matula [Ma]. Recently, Gabow [Ga] showed how to compute the minimum cut in O (`n log (n 2 =m)), where ` denotes 1 the cardinality of the minimum cut. In the parallel context, Goldschlager, Shaw and Staples <ref> [GSS] </ref> proved that for a given pair of vertices, s and t, finding the minimum fs; tg cut is P-complete. Karp, Upfal and Wigder-son [KUW], and Mulmuley, Vazirani and Vazirami [MVV] placed the maximum matching problem in RNC.
Reference: [GT] <author> A. Goldberg and R. E. Tarjan, </author> <title> A new approach to the maximum flow problem, </title> <journal> Journal of the ACM, </journal> <volume> Vol. 35, </volume> <pages> pp. 921-940, </pages> <year> 1988. </year>
Reference-contexts: The running time of the current best algorithm for maximum flow is slightly more than O (mn). This was first achieved by Goldberg and Tarjan <ref> [GT] </ref> and the complexity of their algorithm is O (mn log (n 2 =m). Their result was later improved by [Al, CH, CHM, KRT, PW] For many years, since the paper of Gomory and Hu appeared, the only approach to the minimum cut problem was via maximum flows.
Reference: [HO] <author> J. Hao and J. B. Orlin, </author> <title> A faster algorithm for finding the minimum cut in a graph, </title> <booktitle> Proceedings of the 3rd Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1992, </year> <pages> pp. 165-174. </pages>
Reference-contexts: In a classic paper, Gomory and Hu [GH1] have shown that the minimum cut can be determined by computing an equivalent flow-tree which requires considering only n 1 fs; tg minimum cuts chosen appropriately. Recently, Hao and Orlin <ref> [HO] </ref> have shown how to pipeline the computation of the n 1 minimum cuts so that the total running time is no more than a single maximum flow computation. The running time of the current best algorithm for maximum flow is slightly more than O (mn).
Reference: [Ka] <author> D. R. Karger, </author> <title> Global min-cuts in RNC, and other ramifications of a simple min-cut algorithm, </title> <booktitle> Proceedings of the 4th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1993. </year>
Reference-contexts: It is a fundamental problem in combinatorial optimization and has numerous applications, e.g., network design and reliability, sequencing and scheduling, location theory, partitioning problems, and heuristics for solving integer programming problems. (See [PQ]). The parallel complexity, however, remained unresolved. Recently, Karger <ref> [Ka] </ref> proposed a randomized algorithm for computing the minimum cut in a graph. This placed the problem in the complexity class RNC. Let G = (V; E) be a graph (or multigraph) where jV j = n and jEj = m. <p> Alternatively, one can view random bits as a resource (such as time and space), to be used as sparingly as possible, and our result reduces the use of this resource over the algorithm suggested by Karger <ref> [Ka] </ref>. <p> Karp, Upfal and Wigder-son [KUW], and Mulmuley, Vazirani and Vazirami [MVV] placed the maximum matching problem in RNC. This implies, using a standard reduction of flow to matching, that the unweighted minimum cut problem is also in RNC. As mentioned earlier, very recently, Karger <ref> [Ka] </ref> showed that the minimum cut can be computed in RNC in the weighted case as well. <p> If the graph is weighted, we want to minimize the weight of the edges in the cut. This problem is NP-complete for arbitrary k [GJ]. Hochbaum and Goldschmidt [GH2] have shown that for fixed k, the minimum k-cut can be computed in polynomial time. It follows from Karger's results <ref> [Ka] </ref> that this problem is also in RNC. We show that for fixed k we can compute in RNC a minimum weight k-cut using only O (log 2 n) random bits. The paper is organized as follows.
Reference: [KRT] <author> V. King, S. Rao and R. Tarjan, </author> <title> A faster deterministic maximum flow algorithm, </title> <booktitle> Proceedings of the 3rd Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1992, </year> <pages> pp. 157-164. </pages>
Reference-contexts: The running time of the current best algorithm for maximum flow is slightly more than O (mn). This was first achieved by Goldberg and Tarjan [GT] and the complexity of their algorithm is O (mn log (n 2 =m). Their result was later improved by <ref> [Al, CH, CHM, KRT, PW] </ref> For many years, since the paper of Gomory and Hu appeared, the only approach to the minimum cut problem was via maximum flows.
Reference: [KS] <author> D. R. Karger and C. Stein, </author> <title> An ~ O(n 2 ) algorithm for minimum cuts, To appear in: </title> <booktitle> Proceeding of the 25th ACM Annual Symposium on Theory of Computing, </booktitle> <year> 1993. </year>
Reference-contexts: Nagamochi and Ibaraki [NI] gave an algorithm that runs in O (mn + n 2 log n) time, and this is currently the best deterministic algorithm. Very recently, Karger and Stein <ref> [KS] </ref> suggested a sequential version of Karger's parallel algorithm that runs in time O (n 2 polylog (n)), and finds the minimum cut with probability 1 1 poly (n) . In the unweighted case, there are several efficient algorithms for computing the minimum cut. <p> As mentioned earlier, very recently, Karger [Ka] showed that the minimum cut can be computed in RNC in the weighted case as well. The running time is O (log 3 n) time and the number of processors is O (n 2 log 4 n). (See <ref> [KS] </ref>). 1.2 Our results The basic operation in our algorithm is that of contraction: when an edge is contracted, the two vertices adjacent to it are contracted and the set of edges connecting the two vertices is deleted; the set of edges leaving the contracted vertex is the union of the
Reference: [KUW] <author> R. M. Karp, E. Upfal and A. Wigderson, </author> <title> Constructing a perfect matching is in random NC, </title> <journal> Combinatorica, </journal> <volume> Vol. 6, </volume> <pages> pp. 35-48, </pages> <year> 1986. </year>
Reference-contexts: In the parallel context, Goldschlager, Shaw and Staples [GSS] proved that for a given pair of vertices, s and t, finding the minimum fs; tg cut is P-complete. Karp, Upfal and Wigder-son <ref> [KUW] </ref>, and Mulmuley, Vazirani and Vazirami [MVV] placed the maximum matching problem in RNC. This implies, using a standard reduction of flow to matching, that the unweighted minimum cut problem is also in RNC.
Reference: [Ma] <author> D. W. Matula, </author> <title> Determining the edge connectivity in O(nm), </title> <booktitle> Proceedings of the 28th IEEE Symposium on the Foundations of Computer Science, </booktitle> <address> Los Angeles, CA, </address> <year> 1987, </year> <pages> pp. 249-251. </pages>
Reference-contexts: In the unweighted case, there are several efficient algorithms for computing the minimum cut. An O (mn) algorithm was discovered by Podderyugin [Po], and independently by Matula <ref> [Ma] </ref>. Recently, Gabow [Ga] showed how to compute the minimum cut in O (`n log (n 2 =m)), where ` denotes 1 the cardinality of the minimum cut.
Reference: [MVV] <author> K. Mulmuley, U. V. Vazirani and V. V. Vazirani, </author> <title> Matching is as easy as matrix inversion, </title> <journal> Combinatorica, </journal> <volume> Vol. 7, </volume> <pages> pp. </pages> <month> 105-113 </month> <year> (1987). </year>
Reference-contexts: In the parallel context, Goldschlager, Shaw and Staples [GSS] proved that for a given pair of vertices, s and t, finding the minimum fs; tg cut is P-complete. Karp, Upfal and Wigder-son [KUW], and Mulmuley, Vazirani and Vazirami <ref> [MVV] </ref> placed the maximum matching problem in RNC. This implies, using a standard reduction of flow to matching, that the unweighted minimum cut problem is also in RNC.
Reference: [NI] <author> H. Nagamochi and T. Ibaraki, </author> <title> Computing edge-connectivity in multigraphs and capacitated graphs, </title> <journal> Siam Journal on Discrete Math, </journal> <volume> Vol. 5, </volume> <pages> pp. </pages> <month> 54-66 </month> <year> (1992). </year>
Reference-contexts: This has changed in the last years, and several papers have shown that a minimum cut can be solved more efficiently than maximum flow. Nagamochi and Ibaraki <ref> [NI] </ref> gave an algorithm that runs in O (mn + n 2 log n) time, and this is currently the best deterministic algorithm.
Reference: [Po] <author> V.D. Podderyugin, </author> <title> An Algorithm for Finding the Edge Connectivity of Graphs, </title> <journal> Vopr. Kibern., </journal> <volume> No. 2, 136, </volume> <year> 1973. </year>
Reference-contexts: In the unweighted case, there are several efficient algorithms for computing the minimum cut. An O (mn) algorithm was discovered by Podderyugin <ref> [Po] </ref>, and independently by Matula [Ma]. Recently, Gabow [Ga] showed how to compute the minimum cut in O (`n log (n 2 =m)), where ` denotes 1 the cardinality of the minimum cut.
Reference: [PQ] <author> J. C. Picard and M. Querayne, </author> <title> Selected applications of minimum cuts in networks, </title> <journal> INFOR, </journal> <volume> Vol. 20, </volume> <pages> pp. 394-422, </pages> <year> 1982. </year>
Reference-contexts: This problem has received much attention in the literature in the last 40 years. It is a fundamental problem in combinatorial optimization and has numerous applications, e.g., network design and reliability, sequencing and scheduling, location theory, partitioning problems, and heuristics for solving integer programming problems. (See <ref> [PQ] </ref>). The parallel complexity, however, remained unresolved. Recently, Karger [Ka] proposed a randomized algorithm for computing the minimum cut in a graph. This placed the problem in the complexity class RNC. Let G = (V; E) be a graph (or multigraph) where jV j = n and jEj = m.
Reference: [PW] <author> S. Phillips and J. Westbrook, </author> <title> Online load balancing and network flow, To appear in: </title> <booktitle> Proceeding of the 25th ACM Annual Symposium on Theory of Computing, </booktitle> <year> 1993. </year>
Reference-contexts: The running time of the current best algorithm for maximum flow is slightly more than O (mn). This was first achieved by Goldberg and Tarjan [GT] and the complexity of their algorithm is O (mn log (n 2 =m). Their result was later improved by <ref> [Al, CH, CHM, KRT, PW] </ref> For many years, since the paper of Gomory and Hu appeared, the only approach to the minimum cut problem was via maximum flows.
References-found: 22

