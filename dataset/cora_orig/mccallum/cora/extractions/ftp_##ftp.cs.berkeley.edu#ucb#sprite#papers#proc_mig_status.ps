URL: ftp://ftp.cs.berkeley.edu/ucb/sprite/papers/proc_mig_status.ps
Refering-URL: http://www.cs.berkeley.edu/projects/sprite/sprite.papers.html
Root-URL: http://www.cs.berkeley.edu
Email: spriters@ginger.Berkeley.EDU  
Author: Fred Douglis John Ousterhout 
Address: Berkeley, CA 94720  
Affiliation: Computer Science Division Department of Electrical Engineering and Computer Sciences University of California  
Abstract: Process Migration in Sprite: A Status Report 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Douglis and J. Ousterhout. </author> <title> Process migration in the Sprite operating system. </title> <booktitle> In Proceedings of the 7th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 18-25, </pages> <address> Berlin, West Germany, </address> <month> September </month> <year> 1987. </year> <note> IEEE. </note>
Reference-contexts: The history of process migration in Sprite is telling: although migration first worked for simple test cases as early as the fall of 1986, and we presented a paper on migration in the fall of 1987 <ref> [1] </ref>, we only started using migration regularly in the late fall of 1988.
Reference: [2] <author> M. Nelson, B. Welch, and J. Ousterhout. </author> <title> Caching in the Sprite network file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 134-154, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: example, if a process has a file open for writing, and it forks and migrates a child, the file would then be open for writing on two different hosts; Sprite's cache consistency algorithm dictates that the file be made non-cacheable on the machines on which the two processes are executing <ref> [2] </ref>.
Reference: [3] <author> G. J. Popek and B. J. Walker, </author> <title> editors. The LOCUS Distributed System Architecture. </title> <booktitle> Computer Systems Series. </booktitle> <publisher> The MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: One may perform operations on processes regardless of their location, such as sending them signals. * Processes may be moved at any time. not only at specific times such as fork and exec (e.g., LOCUS <ref> [3] </ref>) .
Reference: [4] <author> M. </author> <title> Theimer. </title> <type> Personal communication. </type>
Reference-contexts: As we understand it, other systems have experienced similar problems with process migration because it interacts intimately with so many parts of the kernel <ref> [4] </ref>. In retrospect, our greatest mistake was to fail to put process migration into general use at the first opportunity: there was a window of time when we potentially could have started using migration (if we had been prepared with suitable user-level utilities to manage such things as host selection).
Reference: [5] <author> M. Theimer. </author> <title> Preemptable Remote Execution Facilities for Loosely-Coupled Distributed Systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1986. </year>
Reference-contexts: Permitting an evicted process to execute while its virtual memory image is transferred to disk would reduce the time during which the process is frozen but also reduce the processing power available to the machine's owner while the evicted process continues to execute <ref> [5] </ref>. 4. No residual dependencies may be left on the host after eviction. The time to migrate a process may be reduced substantially by retrieving the memory image of a migrated process from its previous host as pages are referenced [6].
Reference: [6] <author> E. Zayas. </author> <title> Attacking the process migration bottleneck. </title> <booktitle> In Proceedings of the Eleventh ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 13-22, </pages> <address> Austin, TX, </address> <month> November </month> <year> 1987. </year> <month> 4 </month>
Reference-contexts: No residual dependencies may be left on the host after eviction. The time to migrate a process may be reduced substantially by retrieving the memory image of a migrated process from its previous host as pages are referenced <ref> [6] </ref>. However, copy-on-reference requires that the former host continue to dedicate resources and service requests from the evicted process 2 for a longer period of time than would be necessary in a system that copies the memory along with the rest of the process's state.
References-found: 6

