URL: http://www.cs.cornell.edu/kozen/papers/gentzen.ps
Refering-URL: http://www.cs.cornell.edu/kozen/papers/papers.html
Root-URL: 
Email: e-mail:facheng,kozeng@cs.cornell.edu  
Title: A Complete Gentzen-Style Axiomatization for Set Constraints  
Author: Allan Cheng and Dexter Kozen 
Address: Ithaca, New York 14853, USA  
Affiliation: Computer Science Department Cornell University  
Abstract: Set constraints are inclusion relations between expressions denoting sets of ground terms over a ranked alphabet. They are the main ingredient in set-based program analysis. In this paper we provide a Gentzen-style axiomatization for sequents ` , where and are finite sets of set constraints, based on the axioms of termset algebra. Sequents of the restricted form ` ? correspond to positive set constraints, and those of the more general form ` correspond to systems of mixed positive and negative set constraints. We show that the deductive system is (i) complete for the restricted sequents ` ? over standard models, (ii) incomplete for general sequents ` over standard models, but (iii) complete for general sequents over set-theoretic termset algebras.
Abstract-found: 1
Intro-found: 1
Reference: [AKVW93] <author> Alexander Aiken, Dexter Kozen, Moshe Vardi, and Edward Wimmers. </author> <title> The complexity of set constraints. </title> <editor> In E. Borger, Y. Gurevich, and K. Meinke, editors, </editor> <booktitle> Proc. 1993 Conf. Computer Science Logic (CSL'93), volume 832 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 1-17. </pages> <institution> Eur. Assoc. Comput. Sci. </institution> <address> Logic, </address> <publisher> Springer, </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the complexity of the satisfiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. <p> For details see <ref> [AKVW93, Koz93, Koz95] </ref>. 6 Completeness and Incompleteness In this section we give a Gentzen-style axiomatization for sequents ` , based on the axioms of termset algebra. <p> Simultaneously, we show how to derive ` ? from t B ; 0 ` ?. This is essentially a formalization of the normal form algorithm of <ref> [AKVW93] </ref> in terms of the sequent rules.
Reference: [AKW95] <author> Alexander Aiken, Dexter Kozen, and Edward Wimmers. </author> <title> Decidability of systems of set constraints with negative constraints. </title> <institution> Infor. and Comput., </institution> <year> 1995. </year> <note> To appear. Also Cornell University Tech. Report 93-1362, </note> <month> June, </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the complexity of the satisfiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. <p> We feel that these results are of both theoretical and practical interest. Theoretically, they shed light on the distinction between exclusively positive and mixed positive and negative constraints. Although several interesting results involving the decidability and complexity of negative constraints have appeared <ref> [CP94b, GTT93b, AKW95, Ste94] </ref>, the distinction between the two cases is still far from clear from a deductive standpoint. <p> Every system of mixed positive and negative set constraints is equivalent to a system in normal form <ref> [AKW95] </ref>. Each positive system in normal form (t B ; ) has an associated hypergraph; the nodes are the elements of U and the hyperedges are specified by the sets E f (ff 1 ;:::;ff n ) . Let M be a model.
Reference: [AM91a] <author> A. Aiken and B. Murphy. </author> <title> Implementing regular tree expressions. </title> <booktitle> In Proc. 1991 Conf. Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 427-447, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the complexity of the satisfiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94].
Reference: [AM91b] <author> A. Aiken and B. Murphy. </author> <title> Static type inference in a dynamically typed language. </title> <booktitle> In Proc. 18th Symp. Principles of Programming Languages, </booktitle> <pages> pages 279-290. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the complexity of the satisfiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94].
Reference: [AW92] <author> A. Aiken and E. Wimmers. </author> <title> Solving systems of set constraints. </title> <booktitle> In Proc. 7th Symp. Logic in Computer Science, </booktitle> <pages> pages 329-340. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the complexity of the satisfiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure.
Reference: [BGW93] <author> L. Bachmair, H. Ganzinger, and U. Waldmann. </author> <title> Set constraints are the monadic class. </title> <booktitle> In Proc. 8th Symp. Logic in Computer Science, </booktitle> <pages> pages 75-83. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the complexity of the satisfiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. <p> Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic <ref> [BGW93, CP94a] </ref>, Boolean algebras with operators [JT51, JT52], and modal logic [Koz93].
Reference: [Col82] <author> A. Colmerauer. </author> <title> PROLOG and infinite trees. </title> <editor> In S.-A. Tarnlund and K. L. Clark, editors, </editor> <booktitle> Logic Programming, </booktitle> <pages> pages 231-251. </pages> <publisher> Academic Press, </publisher> <month> Jan-uary </month> <year> 1982. </year>
Reference-contexts: The infinite term s is regular since it has only two subterms, namely s and a. 4 4.1 Term Automata It is well known that an infinite regular term can be represented by a finite labeled graph such that the infinite term is obtained by "unwinding" the graph (see <ref> [Cou83, Col82] </ref>). We use the automata-theoretic formulation introduced in [KPS92] of this idea. Definition 2.
Reference: [Cou83] <author> Bruno Courcelle. </author> <title> Fundamental properties of infinite trees. </title> <journal> Theor. Comput. Sci., </journal> <volume> 25 </volume> <pages> 95-169, </pages> <year> 1983. </year>
Reference-contexts: The law is useful for pushing occurrences of the negation operator ~ inward. 4 Term Automata and Models Following Courcelle <ref> [Cou83] </ref>, we define (-)terms. Definition 1. Let ! denote the set of natural numbers and let be a finite ranked alphabet. <p> The infinite term s is regular since it has only two subterms, namely s and a. 4 4.1 Term Automata It is well known that an infinite regular term can be represented by a finite labeled graph such that the infinite term is obtained by "unwinding" the graph (see <ref> [Cou83, Col82] </ref>). We use the automata-theoretic formulation introduced in [KPS92] of this idea. Definition 2.
Reference: [CP94a] <author> W. Charatonik and L. Pacholski. </author> <title> Negative set constraints with equality. </title> <booktitle> In Proc. 9th Symp. Logic in Computer Science, </booktitle> <pages> pages 128-136. </pages> <publisher> IEEE, </publisher> <month> July </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the complexity of the satisfiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. <p> Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic <ref> [BGW93, CP94a] </ref>, Boolean algebras with operators [JT51, JT52], and modal logic [Koz93].
Reference: [CP94b] <author> W. Charatonik and L. Pacholski. </author> <title> Set constraints with projections are in NEXPTIME. </title> <booktitle> In Proc. 35th Symp. Foundations of Computer Science, </booktitle> <pages> pages 642-653. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the complexity of the satisfiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. <p> We feel that these results are of both theoretical and practical interest. Theoretically, they shed light on the distinction between exclusively positive and mixed positive and negative constraints. Although several interesting results involving the decidability and complexity of negative constraints have appeared <ref> [CP94b, GTT93b, AKW95, Ste94] </ref>, the distinction between the two cases is still far from clear from a deductive standpoint.
Reference: [Gri87] <author> Timothy G. Griffin. </author> <title> An environment for formal systems. </title> <type> Technical Report TR87-846, </type> <institution> Cornell University, </institution> <month> June </month> <year> 1987. </year>
Reference-contexts: Practically, we were interested in recasting the axioms of [Koz93] in a Gentzen style so as to take advantage of one of a number of automated deduction systems to implement a constraint solving package <ref> [Gri87] </ref>. We foresee this as being a useful alternative approach to building a set constraint solver for use in program analysis or constraint logic programming over set constraints. This paper is organized as follows.
Reference: [GTT93a] <author> R. Gilleron, S. Tison, and M. Tommasi. </author> <title> Solving systems of set constraints using tree automata. </title> <journal> In Proc. Symp. Theor. Aspects of Comput. Sci., </journal> <volume> volume 665, </volume> <pages> pages 505-514. </pages> <note> Springer-Verlag Lect. Notes in Comput. Sci., </note> <month> February </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the complexity of the satisfiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. <p> Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory <ref> [GTT93a, GTT93b] </ref>, type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93].
Reference: [GTT93b] <author> R. Gilleron, S. Tison, and M. Tommasi. </author> <title> Solving systems of set constraints with negated subset relationships. </title> <booktitle> In Proc. 34th Symp. Foundations of Comput. Sci., </booktitle> <pages> pages 372-380. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the complexity of the satisfiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. <p> Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory <ref> [GTT93a, GTT93b] </ref>, type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93]. <p> We feel that these results are of both theoretical and practical interest. Theoretically, they shed light on the distinction between exclusively positive and mixed positive and negative constraints. Although several interesting results involving the decidability and complexity of negative constraints have appeared <ref> [CP94b, GTT93b, AKW95, Ste94] </ref>, the distinction between the two cases is still far from clear from a deductive standpoint.
Reference: [Hei93] <author> Nevin Heintze. </author> <title> Set Based Program Analysis. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1993. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the complexity of the satisfiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94].
Reference: [HJ90a] <author> N. Heintze and J. Jaffar. </author> <title> A decision procedure for a class of set constraints. </title> <booktitle> In Proc. 5th Symp. Logic in Computer Science, </booktitle> <pages> pages 42-51. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the complexity of the satisfiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure.
Reference: [HJ90b] <author> N. Heintze and J. Jaffar. </author> <title> A finite presentation theorem for approximating logic programs. </title> <booktitle> In Proc. 17th Symp. Principles of Programming Languages, </booktitle> <pages> pages 197-209. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1990. </year> <month> 18 </month>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the complexity of the satisfiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94].
Reference: [JM79] <author> N. D. Jones and S. S. Muchnick. </author> <title> Flow analysis and optimization of LISP--like structures. </title> <booktitle> In Proc. 6th Symp. Principles of Programming Languages, </booktitle> <pages> pages 244-256. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1979. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the complexity of the satisfiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94].
Reference: [JT51] <author> B. Jonsson and A. Tarski. </author> <title> Boolean algebras with operators. </title> <journal> Amer. J. Math., </journal> <volume> 73 </volume> <pages> 891-939, </pages> <year> 1951. </year>
Reference-contexts: Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators <ref> [JT51, JT52] </ref>, and modal logic [Koz93].
Reference: [JT52] <author> B. Jonsson and A. Tarski. </author> <title> Boolean algebras with operators. </title> <journal> Amer. J. Math., </journal> <volume> 74 </volume> <pages> 127-162, </pages> <year> 1952. </year>
Reference-contexts: Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators <ref> [JT51, JT52] </ref>, and modal logic [Koz93].
Reference: [Koz93] <author> Dexter Kozen. </author> <title> Logical aspects of set constraints. </title> <editor> In E. Borger, Y. Gurevich, and K. Meinke, editors, </editor> <booktitle> Proc. 1993 Conf. Computer Science Logic (CSL'93), volume 832 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 175-188. </pages> <institution> Eur. Assoc. Comput. Sci. </institution> <address> Logic, </address> <publisher> Springer, </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic <ref> [Koz93] </ref>. <p> There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93]. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality <ref> [Koz93, Koz95] </ref>. fl Technical Report TR95-1518, Cornell University, May 1995. y Visiting from Aarhus, BRICS, Basic Research in Computer Science, Center of the Danish National Research Foundation. e-mail:acheng@daimi.aau.dk An axiomatization of the main properties of set constraints was proposed in [Koz93]. General models of these axioms are called termset algebras. <p> and "hard" typing respectively, which are related by Stone duality [Koz93, Koz95]. fl Technical Report TR95-1518, Cornell University, May 1995. y Visiting from Aarhus, BRICS, Basic Research in Computer Science, Center of the Danish National Research Foundation. e-mail:acheng@daimi.aau.dk An axiomatization of the main properties of set constraints was proposed in <ref> [Koz93] </ref>. General models of these axioms are called termset algebras. In [Koz93], a representation theorem was proved showing that every termset algebra is isomorphic to a set-theoretic termset algebra. <p> Koz95]. fl Technical Report TR95-1518, Cornell University, May 1995. y Visiting from Aarhus, BRICS, Basic Research in Computer Science, Center of the Danish National Research Foundation. e-mail:acheng@daimi.aau.dk An axiomatization of the main properties of set constraints was proposed in <ref> [Koz93] </ref>. General models of these axioms are called termset algebras. In [Koz93], a representation theorem was proved showing that every termset algebra is isomorphic to a set-theoretic termset algebra. <p> Although several interesting results involving the decidability and complexity of negative constraints have appeared [CP94b, GTT93b, AKW95, Ste94], the distinction between the two cases is still far from clear from a deductive standpoint. Practically, we were interested in recasting the axioms of <ref> [Koz93] </ref> in a Gentzen style so as to take advantage of one of a number of automated deduction systems to implement a constraint solving package [Gri87]. <p> A negative set constraint is the negation of a positive set constraint: s 6 t or s 6= t. We use '; ; : : : to denote set constraints and ; ; : : : to denote finite sets of set constraints. 3 Axioms of Termset Algebra In <ref> [Koz93] </ref>, the following axiomatization of the algebra of sets of ground terms was introduced: f (: : : ; x [ y; : : :) = f (: : : ; x; : : :) [ f (: : : ; y; : : :) (1) [ f (1; : : <p> For details see <ref> [AKVW93, Koz93, Koz95] </ref>. 6 Completeness and Incompleteness In this section we give a Gentzen-style axiomatization for sequents ` , based on the axioms of termset algebra. <p> Using standard and nonstandard models involving set-theoretic termset algebras as introduced in <ref> [Koz93] </ref>, we have shown that the deductive system is (i) complete for restricted sequents of the form ` ? over standard models, (ii) incomplete for general sequents ` over standard models, but (iii) complete for general sequents over nonstandard models.
Reference: [Koz94] <author> Dexter Kozen. </author> <title> Set constraints and logic programming (abstract). </title> <editor> In J.-P. Jouannaud, editor, </editor> <booktitle> Proc. First Conf. Constraints in Computational Logics (CCL'94), volume 845 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 302-303. </pages> <publisher> ESPRIT, Springer, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain <ref> [Koz94] </ref>. Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93].
Reference: [Koz95] <author> Dexter Kozen. </author> <title> Rational spaces and set constraints. </title> <editor> In Peter D. Mosses, Mogens Nielsen, and Michael I. Schwartzbach, editors, </editor> <booktitle> Proc. Sixth Int. Joint Conf. Theory and Practice of Software Develop. (TAPSOFT'95), volume 915 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 42-61. </pages> <publisher> Springer, </publisher> <month> May </month> <year> 1995. </year>
Reference-contexts: There are strong connections to automata theory [GTT93a, GTT93b], type theory [KPS93, KPS94], first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93]. There are algebraic and topological formulations, corresponding roughly to "soft" and "hard" typing respectively, which are related by Stone duality <ref> [Koz93, Koz95] </ref>. fl Technical Report TR95-1518, Cornell University, May 1995. y Visiting from Aarhus, BRICS, Basic Research in Computer Science, Center of the Danish National Research Foundation. e-mail:acheng@daimi.aau.dk An axiomatization of the main properties of set constraints was proposed in [Koz93]. General models of these axioms are called termset algebras. <p> For details see <ref> [AKVW93, Koz93, Koz95] </ref>. 6 Completeness and Incompleteness In this section we give a Gentzen-style axiomatization for sequents ` , based on the axioms of termset algebra.
Reference: [KPS92] <author> Dexter Kozen, Jens Palsberg, and Michael I. Schwartzbach. </author> <title> Efficient inference of partial types. </title> <booktitle> In Proc. 33rd Symp. Found. Comput. Sci., </booktitle> <pages> pages 363-371. </pages> <publisher> IEEE, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: These models include the standard models in which set expressions are interpreted as sets of ground terms, as well as nonstandard models in which set expressions are interpreted as sets of states of term automata <ref> [KPS92] </ref>. In this paper we propose a Gentzen-style axiomatization involving sequents of the form ` , where and are finite sets of set constraints. <p> We use the automata-theoretic formulation introduced in <ref> [KPS92] </ref> of this idea. Definition 2.
Reference: [KPS93] <author> Dexter Kozen, Jens Palsberg, and Michael I. Schwartzbach. </author> <title> Efficient recursive subtyping. </title> <booktitle> In Proc. 20th Symp. Princip. Programming Lang., </booktitle> <pages> pages 419-428. </pages> <publisher> ACM, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory <ref> [KPS93, KPS94] </ref>, first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93]. <p> In this sense the notion of term automaton (Definition 2) is a generalization of the notion of term (Definition 1). A term is regular if and only if it is t q for some state q of some finite term automaton <ref> [KPS93, Lemma 8] </ref>. For example, if q is the state labeled f in the term automaton a q 1 q ? then t q is the infinite regular term s of Example 1.
Reference: [KPS94] <author> Dexter Kozen, Jens Palsberg, and Michael I. Schwartzbach. </author> <title> Efficient inference of partial types. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 49(2) </volume> <pages> 306-324, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. There are strong connections to automata theory [GTT93a, GTT93b], type theory <ref> [KPS93, KPS94] </ref>, first-order monadic logic [BGW93, CP94a], Boolean algebras with operators [JT51, JT52], and modal logic [Koz93].
Reference: [Mis84] <author> P. Mishra. </author> <title> Towards a theory of types in PROLOG. </title> <booktitle> In Proc. 1st Symp. Logic Programming, </booktitle> <pages> pages 289-298. </pages> <publisher> IEEE, </publisher> <year> 1984. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the complexity of the satisfiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94].
Reference: [MR85] <author> P. Mishra and U. Reddy. </author> <title> Declaration-free type checking. </title> <booktitle> In Proc. 12th Symp. Principles of Programming Languages, </booktitle> <pages> pages 7-21. </pages> <publisher> ACM, </publisher> <year> 1985. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the complexity of the satisfiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94].
Reference: [Rey69] <author> J. C. Reynolds. </author> <title> Automatic computation of data set definitions. </title> <booktitle> In Information Processing 68, </booktitle> <pages> pages 456-461. </pages> <publisher> North-Holland, </publisher> <year> 1969. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the complexity of the satisfiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94].
Reference: [Ste94] <author> K. Stefansson. </author> <title> Systems of set constraints with negative constraints are NEXPTIME-complete. </title> <booktitle> In Proc. 9th Symp. Logic in Computer Science, </booktitle> <pages> pages 137-141. </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88]. Considerable recent effort has focussed on the complexity of the satisfiability problem <ref> [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94] </ref>. Set constraints have also recently been used to define a constraint logic programming language over sets of ground terms that generalizes ordinary logic programming over an Herbrand domain [Koz94]. Set constraints exhibit a rich mathematical structure. <p> We feel that these results are of both theoretical and practical interest. Theoretically, they shed light on the distinction between exclusively positive and mixed positive and negative constraints. Although several interesting results involving the decidability and complexity of negative constraints have appeared <ref> [CP94b, GTT93b, AKW95, Ste94] </ref>, the distinction between the two cases is still far from clear from a deductive standpoint.
Reference: [YO88] <author> J. Young and P. O'Keefe. </author> <title> Experience with a type evaluator. </title> <editor> In D. Bjtrner, A. P. Ershov, and N. D. Jones, editors, </editor> <booktitle> Partial Evaluation and Mixed Computation, </booktitle> <pages> pages 573-581. </pages> <publisher> North-Holland, </publisher> <year> 1988. </year> <title> This article was processed using the L a T E X macro package with LLNCS style 19 </title>
Reference-contexts: 1 Introduction Set constraints are inclusions between expressions denoting sets of ground terms. They have been used extensively in program analysis and type inference for many years <ref> [AM91a, AM91b, Hei93, HJ90b, JM79, Mis84, MR85, Rey69, YO88] </ref>. Considerable recent effort has focussed on the complexity of the satisfiability problem [AKVW93, AKW95, AW92, BGW93, CP94a, CP94b, GTT93a, GTT93b, HJ90a, Ste94].
References-found: 30

