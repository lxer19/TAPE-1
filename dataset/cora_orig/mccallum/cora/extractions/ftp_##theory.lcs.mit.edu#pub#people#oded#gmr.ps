URL: ftp://theory.lcs.mit.edu/pub/people/oded/gmr.ps
Refering-URL: http://theory.lcs.mit.edu/~oded/cryptography.html
Root-URL: 
Title: Two Remarks Concerning the Goldwasser-Micali-Rivest Signature Scheme (Reproduced from preprint)  
Author: Oded Goldreich 
Address: Scienve, Rehovot, Israel  
Affiliation: Department of Computer Science and Applied Mathematics Weizmann Institute of  
Note: Appeared in Advances in Cryptology Crypto `86 (Proceedings), (A.M. Odlyzko ed.), Lecture Note in Computer Science (263) Springer Verlag, pages 104-110, 1987.  Work done while author was in the Laboratory for Computer Science, MIT. Partially supported by a Weizmann Postdoctoral Fellowship, an IBM Postdoctoral Fellow ship, and NSF Grant DCR-8509905.  
Abstract: The focus of this note is the Goldwasser-Micali-Rivest Signature Scheme (presented in the 25th POCS , 1984). The GMR scheme has the salient property that, unless factoring is easy, it is infeasible to forge any signature even through an adaptive chosen message attack. We present two technical contributions with respect to the GMR scheme: 1) The GMR scheme can be made totally "memoryless": That is, the signature generated by the signer on message M does not depend on the previous signed messages. (In the original scheme, the signature to a message depends on the number of messages signed before.) 2) The GMR scheme can be implemented almost as efficiently as the RSA: The original implementation of the GMR scheme based on factoring, can be speeded-up by a factor of jN j. Thus, both signing and verifying take time O(jN j 3 log 2 jN j). (Here N is the moduli.) 
Abstract-found: 1
Intro-found: 1
Reference: [D] <author> Damgard, </author> <title> I.B., "Collision Free Hash Functions and Public Key Signature Schemes", </title> <type> manuscript, </type> <year> 1986. </year>
Reference-contexts: A different approach suggested recently by Damgard is to first hash the message using collision free hash functions and then to sign the hashed value <ref> [D] </ref>. Interestingly, Damgard also shows that such hash functions can be constructed based on the existence of any pair of clawfree permutations. 5 ACKNOWLEDGEMENTS Section 4 is joint work with Shafi Goldwasser. I would like to thank her for the collaboration, and for the permission to present the result here.
Reference: [DH] <author> Diffie, W. and M.E. Hellman, </author> <title> "New Directions in Cryptography", </title> <journal> IEEE Trans. Inform. Theory, </journal> <volume> Vol. IT-22, No. 6, </volume> <month> November </month> <year> 1976, </year> <pages> pp. 644-654. </pages>
Reference: [GGM] <author> Goldreich, O., S. Goldwasser and S. Micali, </author> <title> "How to Construct Random Functions", </title> <booktitle> Proc. 25 th Symp. on Foundation of Computer Science, </booktitle> <year> 1984, </year> <pages> pp. 464-479. </pages> <note> To appear in J. ACM </note> . 
Reference-contexts: same names are always used for the same nodes, without having to store these names. (The idea to use pseudorandom functions to eliminate this part of the storage requirement in the GMR scheme was suggested by Leonid Levin.) Assuming the existence of one-way permutations, pseudorandom functions can be efficiently constructed <ref> [GGM] </ref>. Proving that the modified signature scheme is as secure as the original scheme requires a two-step argument. First, one should consider a hybrid scheme where the names of the nodes in the REF tree are generated randomly as in the original scheme.
Reference: [GMR] <author> Goldwasser, S., S. Micali and R.L. Rivest, </author> <title> "A Paradoxical Solution to the Signature Problem", </title> <booktitle> Proc. 25 th Symp. on Foundation of Computer Science, </booktitle> <year> 1984, </year> <pages> pp. 441-448. </pages> <note> A better version is available from the authors. </note>
Reference-contexts: 1. Introduction In 1984, Goldwasser, Micali and Rivest presented a signature scheme robust against adaptive chosen message attack <ref> [GMR] </ref>: no adversary who first receives signatures to messages of his choice, can later create a signature of even a single additional message. <p> The rest of this note is organized as follows. In Section 2 we briefly review the GMR signature scheme. The reader is encourage to consult the original paper <ref> [GMR] </ref> for a more complete exposition of the GMR scheme. (This reference is also an excellent source for the critical review and a historical account of the problem of obtaining digital signatures.) In Section 3, we present a modification which makes the GMR scheme "memoryless". <p> Each internal node in the REF tree has a constant number of children (say three). Leaves in the REF tree are used to authenticate messages (in the second stage of the signing process). It was originally proposed <ref> [GMR] </ref> that only the third node of each internal node be a leaf, while the other children be potential internal nodes. As we will see in the sequel, this particular tree 2 structure (for the REF tree) is not essential. <p> First, one should consider a hybrid scheme where the names of the nodes in the REF tree are generated randomly as in the original scheme. The proof of security for this scheme is conceptionally identical to the proof presented in <ref> [GMR] </ref>, and is only a little more involved in details. Next, one uses the polynomially indistinguishability of the pseudorandom functions (from random functions), to show that the proposed scheme is as secure as the hybrid scheme. <p> Speeding-up the Signing Process in the Factoring Based Implementation The computational bottleneck in the signing/verifying process are, respectively, the computation of F 1 (; ) given the trapdoor and the computation of F (; ). In the factoring-based implementation presented in <ref> [GMR] </ref>, F 1 (; ) was computed in jN j 4 steps, while F (; ) was computed in jN j 3 steps, where N is the modulus in use. In this section we show how to compute F 1 in jN j 3 steps. <p> Note that p 4 6= 2 (mod N ). This observation is the key for proving that, unless factoring is easy, the permutations f 0 and f 1 defined above constitute a pair of (trapdoor) clawfree permutations. For more details see <ref> [GMR] </ref>. Recall the definition of F 1 (ff; x) F 1 ( 1 2 n ; x) = f 1 2 f 1 4 The obvious way to compute F 1 (ff; x) is by successively taking square roots. This results in fi (jffj) exponentiations. <p> Also note that the length of the argument to f is k = (log 2 n) 2 .) The "dependency on the past" in the original GMR scheme has nothing to do with the resolution of the "Paradox" mentioned in <ref> [GMR] </ref>. The paradox is resolved by observing that the adversary is uniform, while the real signer is "non-uniform". For further discussion see [GMR]. Throughout this note, we have implicitly assumed that the length of the message to be signed is linear in the security parameter (n). <p> = (log 2 n) 2 .) The "dependency on the past" in the original GMR scheme has nothing to do with the resolution of the "Paradox" mentioned in <ref> [GMR] </ref>. The paradox is resolved by observing that the adversary is uniform, while the real signer is "non-uniform". For further discussion see [GMR]. Throughout this note, we have implicitly assumed that the length of the message to be signed is linear in the security parameter (n). However, the GMR scheme works also if this is not the case, while the running time (naturally) increases.
Reference: [RSA] <author> Rivest, R.L., A. Shamir and L. Adleman, </author> <title> "A Method for Obtaining Digital Signatures and Public Key Cryptosystems", </title> <journal> Comm. ACM , Vol. </journal> <volume> 21, </volume> <month> February </month> <year> 1978, </year> <pages> pp. 120-126. </pages>
References-found: 5

