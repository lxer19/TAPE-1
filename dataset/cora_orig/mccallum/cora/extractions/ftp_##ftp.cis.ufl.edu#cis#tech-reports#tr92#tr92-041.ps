URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr92/tr92-041.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr92-abstracts.html
Root-URL: http://www.cis.ufl.edu
Email: email: sharma@snapper.cis.ufl.edu  
Title: Architectures and Monitoring Techniques for Active Databases An Evaluation  
Author: Sharma Chakravarthy 
Address: Building  Gainesville, Florida 32611  
Note: UF-CIS-TR-92-041 (Submited for publication) (This work was (in part) supported by the Office of Naval Technology and the Navy Command, Control and Ocean Surveillance Center RDT&E Division and in part by the NSF grant IRI-9011216. Also, part of this work was carried out when the author was at Xerox Advanced Information technology, Cambridge, MA and was supported by the DARPA and Rome Air Development Center under contract No. F30602-C-0029.)  
Affiliation: University of Florida Computer and Information Sciences  Department of Computer and Information Sciences Computer Science Engineering  University of Florida  
Abstract-found: 0
Intro-found: 1
Reference: [Anw92] <author> E. Anwar. </author> <title> Supporting complex events and rules in an oodbms: A seamless approach. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Although a number of active database issues such as, expressive event specification language [CM91, GJS92, HJ91], integration of ECA rules into an object-oriented database <ref> [Anw92, GJ91, GrD93] </ref> and others [Tan92, C + 93, CN90] are being pursued vigorously, to the best of our knowledge, there is no work on the discussion of architectural alternatives, techniques for condition monitoring, and evaluation and comparison of the suitability of these techniques. <p> All the active database issues outlined earlier are being addressed in various research efforts in the context of an integrated architecture. Currently, Ode [GJS92, GJ91], Sentinel <ref> [CHS93, Anw92] </ref>, SAMOS [GrD93] are some of the efforts that are integrating active capability into an object-oriented database. 8 3.3 Analysis Of all the architectures discussed above, the integrated architecture is the most versatile and flexible which does not have any of the problems associated with the other two architectures.
Reference: [Bac88] <author> Maurice J. Bach. </author> <title> The Design of the Unix Operating System. </title> <publisher> Prentice-Hall International, Inc., </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1988. </year>
Reference-contexts: 1 Introduction The concept of monitoring conditions, which forms the basis for supporting active capability, is not entirely new. ON conditions in programming languages and early DBMSs [Oll78], and signals in operating systems <ref> [Bac88, Geh84, Hug79, LMKQ89] </ref> have been used early on. Later, Artificial Intelligence (AI) systems have used daemons for asynchronous execution of procedures attached to frame slots [CRM80, WB79].
Reference: [BS83] <author> D. G. Bobrow and M. Stefik. </author> <title> The Loops Manual. </title> <institution> Intelligent Systems Laboratory, Xerox Corporation, </institution> <year> 1983. </year>
Reference-contexts: ON conditions in programming languages and early DBMSs [Oll78], and signals in operating systems [Bac88, Geh84, Hug79, LMKQ89] have been used early on. Later, Artificial Intelligence (AI) systems have used daemons for asynchronous execution of procedures attached to frame slots [CRM80, WB79]. Furthermore, multi-paradigm systems, such as LOOPS <ref> [BS83] </ref> and KEE [Int85] have incorporated active values as a new technique that generalizes asynchronous rule processing. However, most of these systems do not support typical database functionality, such as data sharing, consistency, and multi-user execution.
Reference: [C + 89] <author> S. Chakravarthy et al. HiPAC: </author> <title> A Research Project in Active, Time-Constrained Database Management, </title> <type> Final Report. Technical Report XAIT-89-02, </type> <institution> Xerox Advanced Information Technology, </institution> <address> Cambridge, MA, </address> <month> Aug. </month> <year> 1989. </year> <month> 25 </month>
Reference-contexts: However, the semantics of rule execution in the context of databases requires that several additional issues be considered <ref> [WF90, Cha89, C + 89] </ref>. Here we include only those issues that are relevant to the rest of the discussion in the paper: * Rule execution points: In HiPAC [HLM88], three coupling modes for rule execution were introduced to support application needs.
Reference: [C + 93] <author> S. Ceri et al. </author> <title> Constraint enforcement through production rules: Putting active databases to work. </title> <journal> To appear in IEEE Quarterly Bulletin on Data Engineering, </journal> <month> Jan-uary </month> <year> 1993. </year>
Reference-contexts: Although a number of active database issues such as, expressive event specification language [CM91, GJS92, HJ91], integration of ECA rules into an object-oriented database [Anw92, GJ91, GrD93] and others <ref> [Tan92, C + 93, CN90] </ref> are being pursued vigorously, to the best of our knowledge, there is no work on the discussion of architectural alternatives, techniques for condition monitoring, and evaluation and comparison of the suitability of these techniques.
Reference: [Cha89] <author> U. S. Chakravarthy. </author> <title> Rule management and Evaluation: An Active DBMS Perspective. </title> <booktitle> Special issue of ACM Sigmod Record on rule processing in databases, </booktitle> <volume> 18(3) </volume> <pages> 20-28, </pages> <month> Sep. </month> <year> 1989. </year>
Reference-contexts: However, the semantics of rule execution in the context of databases requires that several additional issues be considered <ref> [WF90, Cha89, C + 89] </ref>. Here we include only those issues that are relevant to the rest of the discussion in the paper: * Rule execution points: In HiPAC [HLM88], three coupling modes for rule execution were introduced to support application needs.
Reference: [CHS93] <author> S. Chakravarthy, E. Hanson, and S.Y.W. Su. </author> <title> Active Database Research at the University of Florida. </title> <journal> To appear in IEEE Quarterly Bulletin on Data Engineering, </journal> <month> January </month> <year> 1993. </year>
Reference-contexts: All the active database issues outlined earlier are being addressed in various research efforts in the context of an integrated architecture. Currently, Ode [GJS92, GJ91], Sentinel <ref> [CHS93, Anw92] </ref>, SAMOS [GrD93] are some of the efforts that are integrating active capability into an object-oriented database. 8 3.3 Analysis Of all the architectures discussed above, the integrated architecture is the most versatile and flexible which does not have any of the problems associated with the other two architectures. <p> We also propose to evaluate the above approaches for large databases involving secondary storage access (which is not addressed in the present discussion). We have already identified a set of techniques for optimizing the evaluating situation-action rules for the Sentinel project <ref> [CHS93] </ref> and are investigating them in more detail. Our long term goal is to develop and consolidate a variety of techniques that are useful for condition monitoring and to develop a set of comprehensive criteria using which appropriate techniques can be chosen. 7 Acknowledgments I want to thank Ms.
Reference: [CM91] <author> S. Chakravarthy and D. Mishra. </author> <title> An event specification language (snoop) for active databases and its detection. </title> <type> Technical Report UF-CIS TR-91-23, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> E470-CSE, Gainesville, FL 32611, </address> <month> Sep. </month> <year> 1991. </year>
Reference-contexts: Active capability is viewed as a unifying mechanism for supporting a number of DBMS functionality, such as integrity/security enforcement, maintenance of materialized (e.g., view) data, constraint management, and rule-based inferencing. Although a number of active database issues such as, expressive event specification language <ref> [CM91, GJS92, HJ91] </ref>, integration of ECA rules into an object-oriented database [Anw92, GJ91, GrD93] and others [Tan92, C + 93, CN90] are being pursued vigorously, to the best of our knowledge, there is no work on the discussion of architectural alternatives, techniques for condition monitoring, and evaluation and comparison of the
Reference: [CN90] <author> U. S. Chakravarthy and S. Nesson. </author> <title> Making an Object-Oriented DBMS Active: Design, Implementation and Evaluation of a Prototype. </title> <booktitle> In Proc. of Int'l Conf. on Extended Database Technology (EDBT), </booktitle> <address> Kobe, Japan, </address> <pages> pages 482-490, </pages> <month> Apr. </month> <year> 1990. </year>
Reference-contexts: Although a number of active database issues such as, expressive event specification language [CM91, GJS92, HJ91], integration of ECA rules into an object-oriented database [Anw92, GJ91, GrD93] and others <ref> [Tan92, C + 93, CN90] </ref> are being pursued vigorously, to the best of our knowledge, there is no work on the discussion of architectural alternatives, techniques for condition monitoring, and evaluation and comparison of the suitability of these techniques.
Reference: [CRM80] <author> Eugene Charniak, Christopher K. Riesbeck, and Drew V. McDermott. </author> <booktitle> Artificial Intelligence Programming. </booktitle> <publisher> Lawrence Erlbaum Associates, Publishers, </publisher> <address> Hillsdale, New Jersey, </address> <year> 1980. </year>
Reference-contexts: ON conditions in programming languages and early DBMSs [Oll78], and signals in operating systems [Bac88, Geh84, Hug79, LMKQ89] have been used early on. Later, Artificial Intelligence (AI) systems have used daemons for asynchronous execution of procedures attached to frame slots <ref> [CRM80, WB79] </ref>. Furthermore, multi-paradigm systems, such as LOOPS [BS83] and KEE [Int85] have incorporated active values as a new technique that generalizes asynchronous rule processing. However, most of these systems do not support typical database functionality, such as data sharing, consistency, and multi-user execution.
Reference: [D + 85] <author> U. Dayal et al. </author> <title> PROBE A Research Project in Knowledge-Oriented Database Systems: Preliminary Analysis. </title> <type> Technical Report CCA-85-03, </type> <institution> Computer Corporation of America, </institution> <month> Jul. </month> <year> 1985. </year>
Reference-contexts: Needless to say that transaction processing and concurrency control were not included in the prototype. 1 The prototype has the functionality of a subset of PROBE a passive, extensible DBMS developed at CCA <ref> [D + 85, DMB + 87] </ref>. The remainder of this paper is structured as follows. In section 2 we briefly overview a subset of the active database issues that are relevant to this paper.
Reference: [D + 87] <author> U. Dayal et al. </author> <title> PROBE A Research Project in Knowledge-Oriented Database Systems: </title> <type> Final Report. Technical report, </type> <institution> Computer Corporation of America, </institution> <month> November </month> <year> 1987. </year>
Reference-contexts: and its object-oriented 2 otherwise this has to be built as the part of the mediator layer; however, as the layer is likely to have differences depending upon the underlying system, it is best done as part of the system rather than as part of the mediator layer. 3 PROBE <ref> [MD86, RHDM86, D + 87] </ref>, supports a rich data model incorporating spatial/temporal objects as well as recursion at the kernel level. The Probe Data Model (PDM) provides objects and functions as basic constructs. An object is used to represent a real world object.
Reference: [DB87] <author> M. Darnovsky and J. Bowman. </author> <title> TRANSACT-SQL USER'S GUIDE. Document 3231-2.1, </title> <publisher> Sybase Inc., </publisher> <year> 1987. </year>
Reference-contexts: In this architecture, the kernel functionality of a passive DBMS is enhanced to include event detection, condition monitoring, and an extended transaction management to support concurrent rule processing. An integrated approach does not necessarily have to support full active capability as evidenced by commercial systems such as Sybase <ref> [DB87] </ref>, Interbase [Int90a, Int90b] and others. All the active database issues outlined earlier are being addressed in various research efforts in the context of an integrated architecture.
Reference: [DBAB + 88] <author> U. Dayal, B. Blaustein, S. Chakravarthy A. Buchmann, et al. </author> <title> The HiPAC project: Combining active databases and timing constraints. Special Issue of Real Time Data Base Systems, </title> <booktitle> SIGMOD Record, </booktitle> <volume> 17(1) </volume> <pages> 51-70, </pages> <month> Mar. </month> <year> 1988. </year>
Reference: [DKM86] <author> K. R. Dittrich, A. M. Kotz, and J. A. Mulle. </author> <title> An Event/Trigger Mechanism to Enforce Complex Consistency Constraints in Design Databases. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 15(3) </volume> <pages> 22-36, </pages> <month> Sep. </month> <year> 1986. </year>
Reference: [DMB + 87] <author> U. Dayal, F. Manola, A. Buchmann, U. Chakravarthy, D. Goldhirsch, S. Heiler, J. Orenstein, and A. Rosenthal. </author> <title> Simplifying Complex Objects: The PROBE Approach to Modelling and Querying Them. </title> <booktitle> In Proceedings German Database Conference (BTW), </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Needless to say that transaction processing and concurrency control were not included in the prototype. 1 The prototype has the functionality of a subset of PROBE a passive, extensible DBMS developed at CCA <ref> [D + 85, DMB + 87] </ref>. The remainder of this paper is structured as follows. In section 2 we briefly overview a subset of the active database issues that are relevant to this paper.
Reference: [DPG91] <author> O. Diaz, N. Paton, and P. Gray. </author> <title> Rule Management in Object-Oriented Databases: A Unified Approach. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <address> Barcelona (Catalonia, Spain), </address> <month> Sept. </month> <year> 1991. </year>
Reference: [Geh84] <author> Narain Gehani. </author> <title> Ada, An Adavanced Introduction including Reference Manual For The Ada Programming Language. </title> <publisher> Prentice-Hall, Inc. </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1984. </year>
Reference-contexts: 1 Introduction The concept of monitoring conditions, which forms the basis for supporting active capability, is not entirely new. ON conditions in programming languages and early DBMSs [Oll78], and signals in operating systems <ref> [Bac88, Geh84, Hug79, LMKQ89] </ref> have been used early on. Later, Artificial Intelligence (AI) systems have used daemons for asynchronous execution of procedures attached to frame slots [CRM80, WB79].
Reference: [GJ91] <author> N. H. Gehani and H. V. Jagadish. </author> <title> Ode as an Active Database: Constraints and Triggers. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <pages> pages 327-336, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> Sep. </month> <year> 1991. </year> <month> 26 </month>
Reference-contexts: Although a number of active database issues such as, expressive event specification language [CM91, GJS92, HJ91], integration of ECA rules into an object-oriented database <ref> [Anw92, GJ91, GrD93] </ref> and others [Tan92, C + 93, CN90] are being pursued vigorously, to the best of our knowledge, there is no work on the discussion of architectural alternatives, techniques for condition monitoring, and evaluation and comparison of the suitability of these techniques. <p> An integrated approach does not necessarily have to support full active capability as evidenced by commercial systems such as Sybase [DB87], Interbase [Int90a, Int90b] and others. All the active database issues outlined earlier are being addressed in various research efforts in the context of an integrated architecture. Currently, Ode <ref> [GJS92, GJ91] </ref>, Sentinel [CHS93, Anw92], SAMOS [GrD93] are some of the efforts that are integrating active capability into an object-oriented database. 8 3.3 Analysis Of all the architectures discussed above, the integrated architecture is the most versatile and flexible which does not have any of the problems associated with the other
Reference: [GJS92] <author> N. H. Gehani, H. V. Jagadish, and O. Shmueli. </author> <title> Event Specification in an Object--Oriented Database. </title> <booktitle> In Proceedings International Conference on Management of Data, </booktitle> <pages> pages 81-90, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Active capability is viewed as a unifying mechanism for supporting a number of DBMS functionality, such as integrity/security enforcement, maintenance of materialized (e.g., view) data, constraint management, and rule-based inferencing. Although a number of active database issues such as, expressive event specification language <ref> [CM91, GJS92, HJ91] </ref>, integration of ECA rules into an object-oriented database [Anw92, GJ91, GrD93] and others [Tan92, C + 93, CN90] are being pursued vigorously, to the best of our knowledge, there is no work on the discussion of architectural alternatives, techniques for condition monitoring, and evaluation and comparison of the <p> An integrated approach does not necessarily have to support full active capability as evidenced by commercial systems such as Sybase [DB87], Interbase [Int90a, Int90b] and others. All the active database issues outlined earlier are being addressed in various research efforts in the context of an integrated architecture. Currently, Ode <ref> [GJS92, GJ91] </ref>, Sentinel [CHS93, Anw92], SAMOS [GrD93] are some of the efforts that are integrating active capability into an object-oriented database. 8 3.3 Analysis Of all the architectures discussed above, the integrated architecture is the most versatile and flexible which does not have any of the problems associated with the other
Reference: [GrD93] <author> S. Gatziu and K. r. Dittrich. SAMOS: </author> <title> an Active, Object-Oriented Database System. </title> <journal> To appear in IEEE Quarterly Bulletin on Data Engineering, </journal> <month> January </month> <year> 1993. </year>
Reference-contexts: Although a number of active database issues such as, expressive event specification language [CM91, GJS92, HJ91], integration of ECA rules into an object-oriented database <ref> [Anw92, GJ91, GrD93] </ref> and others [Tan92, C + 93, CN90] are being pursued vigorously, to the best of our knowledge, there is no work on the discussion of architectural alternatives, techniques for condition monitoring, and evaluation and comparison of the suitability of these techniques. <p> All the active database issues outlined earlier are being addressed in various research efforts in the context of an integrated architecture. Currently, Ode [GJS92, GJ91], Sentinel [CHS93, Anw92], SAMOS <ref> [GrD93] </ref> are some of the efforts that are integrating active capability into an object-oriented database. 8 3.3 Analysis Of all the architectures discussed above, the integrated architecture is the most versatile and flexible which does not have any of the problems associated with the other two architectures.
Reference: [Han89] <author> Eric N. Hanson. </author> <title> An Initial Report on the Design of Ariel: a DBMS with an integrated production rule system. </title> <journal> ACM SIGMOD RECORD, </journal> <volume> 18(3) </volume> <pages> 12-19, </pages> <month> Sep. </month> <year> 1989. </year>
Reference: [HJ91] <author> R. Hull and D. Jacobs. </author> <title> Language constructs for programming active databases. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <pages> pages 455-468, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Active capability is viewed as a unifying mechanism for supporting a number of DBMS functionality, such as integrity/security enforcement, maintenance of materialized (e.g., view) data, constraint management, and rule-based inferencing. Although a number of active database issues such as, expressive event specification language <ref> [CM91, GJS92, HJ91] </ref>, integration of ECA rules into an object-oriented database [Anw92, GJ91, GrD93] and others [Tan92, C + 93, CN90] are being pursued vigorously, to the best of our knowledge, there is no work on the discussion of architectural alternatives, techniques for condition monitoring, and evaluation and comparison of the
Reference: [HLM88] <author> M. Hsu, R. Ladin, and D. McCarthy. </author> <title> An Execution Model for Active Data Base Management Systems. </title> <booktitle> In Proceedings 3rd International Conference on Data and Knowledge Bases, </booktitle> <month> Jun. </month> <year> 1988. </year>
Reference-contexts: However, the semantics of rule execution in the context of databases requires that several additional issues be considered [WF90, Cha89, C + 89]. Here we include only those issues that are relevant to the rest of the discussion in the paper: * Rule execution points: In HiPAC <ref> [HLM88] </ref>, three coupling modes for rule execution were introduced to support application needs. <p> Either a conflict resolution strategy can be used to totally order the rules or traditional serializability theory can be applied to execute rules concurrently. Starburst [WF90] uses the former approach whereas HiPAC <ref> [HLM88] </ref> uses the latter. * Nested rules: When rule actions can trigger other rules, there is potential for nested (or even cyclic) rule execution. <p> The main advantage of this technique is that it does not require any changes to the underlying system as all the condition monitoring is done by the application developer as part of the application. A secondary advantage of this approach is that various coupling modes proposed in HiPAC <ref> [HLM88] </ref> (except the causally dependent mode) can be easily implemented.
Reference: [Hug79] <author> Joan K. Hughes. </author> <title> PL/I Structured Programming. </title> <publisher> John Wiley & Sons, </publisher> <year> 1979. </year>
Reference-contexts: 1 Introduction The concept of monitoring conditions, which forms the basis for supporting active capability, is not entirely new. ON conditions in programming languages and early DBMSs [Oll78], and signals in operating systems <ref> [Bac88, Geh84, Hug79, LMKQ89] </ref> have been used early on. Later, Artificial Intelligence (AI) systems have used daemons for asynchronous execution of procedures attached to frame slots [CRM80, WB79].
Reference: [Int85] <author> IntelliCorp., </author> <title> Mountain View. KEE Software Development System User's Manual, </title> <year> 1985. </year>
Reference-contexts: Later, Artificial Intelligence (AI) systems have used daemons for asynchronous execution of procedures attached to frame slots [CRM80, WB79]. Furthermore, multi-paradigm systems, such as LOOPS [BS83] and KEE <ref> [Int85] </ref> have incorporated active values as a new technique that generalizes asynchronous rule processing. However, most of these systems do not support typical database functionality, such as data sharing, consistency, and multi-user execution.
Reference: [Int90a] <institution> Interbase Software Corporation, </institution> <address> 209 Burlington Road, Bedford, MA 01730. </address> <booktitle> Data Definition Guide, </booktitle> <month> February </month> <year> 1990. </year>
Reference-contexts: An integrated approach does not necessarily have to support full active capability as evidenced by commercial systems such as Sybase [DB87], Interbase <ref> [Int90a, Int90b] </ref> and others. All the active database issues outlined earlier are being addressed in various research efforts in the context of an integrated architecture.
Reference: [Int90b] <institution> Interbase Software Corporation, </institution> <address> 209 Burlington Road, Bedford, MA 01730. DDL Reference, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: An integrated approach does not necessarily have to support full active capability as evidenced by commercial systems such as Sybase [DB87], Interbase <ref> [Int90a, Int90b] </ref> and others. All the active database issues outlined earlier are being addressed in various research efforts in the context of an integrated architecture.
Reference: [KDM88] <author> A. M. Kotz, K. R. Dittrich, and J. A. Mulle. </author> <title> Supporting Semantic Rules by a Generalized Event/Trigger Mechanism. </title> <booktitle> In Proceedings International Conference on Extended Data Base Technology, </booktitle> <address> Venice, </address> <month> Mar. </month> <year> 1988. </year>
Reference: [LMKQ89] <author> Samuel J. Le*er, Marshall Kirk McKusick, Michael J. Karels, and John S. Quarter-man. </author> <title> The Design and Implementation of the 4.3BSD Unix Operating System. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction The concept of monitoring conditions, which forms the basis for supporting active capability, is not entirely new. ON conditions in programming languages and early DBMSs [Oll78], and signals in operating systems <ref> [Bac88, Geh84, Hug79, LMKQ89] </ref> have been used early on. Later, Artificial Intelligence (AI) systems have used daemons for asynchronous execution of procedures attached to frame slots [CRM80, WB79].
Reference: [MD86] <author> F. Manola and U. Dayal. PDM: </author> <title> An Object-Oriented Data Model. </title> <booktitle> In Proceedings 1st International Workshop on Object-Oriented Database Systems, </booktitle> <month> Sept. </month> <year> 1986. </year>
Reference-contexts: and its object-oriented 2 otherwise this has to be built as the part of the mediator layer; however, as the layer is likely to have differences depending upon the underlying system, it is best done as part of the system rather than as part of the mediator layer. 3 PROBE <ref> [MD86, RHDM86, D + 87] </ref>, supports a rich data model incorporating spatial/temporal objects as well as recursion at the kernel level. The Probe Data Model (PDM) provides objects and functions as basic constructs. An object is used to represent a real world object.
Reference: [NTC93] <author> S. B. Navathe, A. K. Tanaka, and S. Chakravarthy. </author> <title> Active Database Modeling and Design Tools: Issues, Approach, and Architecture. </title> <journal> To appear in IEEE Quarterly Bulletin on Data Engineering, </journal> <month> January </month> <year> 1993. </year>
Reference-contexts: The application shown in Figure 1 is a tool that supports design interface at one end (extended ER diagram, for example) and generates ECA rules either for the layered or for the integrated architecture. Such a system is being implemented in <ref> [Tan92, NTC93] </ref>. capability 2 . The approach proposed in this paper will help address some of the problems faced by a global transaction manager [SRK92] in a multidatabase environment.
Reference: [Oll78] <author> William T. Olle. </author> <title> The Codasyl Approach to Data Base Management. </title> <publisher> John Wiley & Sons, </publisher> <year> 1978. </year>
Reference-contexts: 1 Introduction The concept of monitoring conditions, which forms the basis for supporting active capability, is not entirely new. ON conditions in programming languages and early DBMSs <ref> [Oll78] </ref>, and signals in operating systems [Bac88, Geh84, Hug79, LMKQ89] have been used early on. Later, Artificial Intelligence (AI) systems have used daemons for asynchronous execution of procedures attached to frame slots [CRM80, WB79].
Reference: [RCBB89] <author> A. Rosenthal, U. S. Chakravarthy, B. Blaustein, and J. Blakeley. </author> <title> Situation Monitoring in Active Databases. </title> <booktitle> In Proc. of the 15th Int'l Conf. on Very Large Databases, </booktitle> <pages> pages 455-464, </pages> <address> Amsterdam, </address> <month> Aug. </month> <year> 1989. </year>
Reference: [RHDM86] <author> A. Rosenthal, S. Heiler, U. Dayal, and F. A. Manola. </author> <title> "traversal recursion: A practical approach to supporting recursive applications". </title> <booktitle> In Proceedings International Conference on Management of Data, </booktitle> <year> 1986. </year>
Reference-contexts: and its object-oriented 2 otherwise this has to be built as the part of the mediator layer; however, as the layer is likely to have differences depending upon the underlying system, it is best done as part of the system rather than as part of the mediator layer. 3 PROBE <ref> [MD86, RHDM86, D + 87] </ref>, supports a rich data model incorporating spatial/temporal objects as well as recursion at the kernel level. The Probe Data Model (PDM) provides objects and functions as basic constructs. An object is used to represent a real world object.
Reference: [S + 86] <author> M. Stonebraker et al. </author> <title> A Rule Manager For Relational Database Systems. </title> <note> The POST-GRES Papers, Memo No. </note> <institution> UCB/ERL M86/85, Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA, </address> <month> Nov. </month> <year> 1986. </year> <month> 27 </month>
Reference-contexts: New types of locks were introduced into the lock table for recognizing various types of events in the initial design of POSTGRES <ref> [S + 86] </ref>. As it is necessary to have the locks for condition monitoring survive system failures, it seems appropriate to associate the mechanism for recognizing events with the data items (which survive system failures).
Reference: [S + 91] <author> U. Schreier et al. Alert: </author> <title> An architecture for transforming a passive dbms into an active dbms. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <pages> pages 469-478, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: All applications that require active capability have to interact with the system through this interface; otherwise, active capability will 6 7 not be available. Alert <ref> [S + 91] </ref> proposed a layered architecture. Layered Architecture requires that a layer be built (on top of a passive DBMS such as ORACLE or INGRES) through which all the ECA rule specifications are routed.
Reference: [SHP87] <author> M. Stonebraker, M. Hanson, and S. Potamianos. </author> <title> A Rule manager for Relational database Systems. </title> <type> Technical report, </type> <institution> Dept. of Electrical Engineering and Computer Science, Univ. of California, Berkeley, </institution> <year> 1987. </year>
Reference: [SLE91] <author> A. Sheth, Y. Leu, and A. Elmagarmid. </author> <title> Maintaining consistency of interdependent data in multidatabases. </title> <type> Technical Report CSD-TR-91-016, </type> <institution> Purdue University, Computer Sciences Department, West Lafayette, </institution> <note> IN 47907, </note> <month> March </month> <year> 1991. </year>
Reference-contexts: Such a system is being implemented in [Tan92, NTC93]. capability 2 . The approach proposed in this paper will help address some of the problems faced by a global transaction manager [SRK92] in a multidatabase environment. Also, federated active databases is likely to be useful for enforcing interdatabase dependencies <ref> [SLE91] </ref> as the situation monitor layer (or the active capability of the integrated architecture) can be used to reveal some of the information in the underlying system to help make global decisions.
Reference: [SR86] <author> M. Stonebraker and L. Rowe. </author> <title> The Design of POSTGRES. </title> <booktitle> In Proceedings of ACM-SIGMOD, </booktitle> <pages> pages 340-355, </pages> <year> 1986. </year>
Reference: [SRK92] <author> A. P. Sheth, M. R. Rusinkiewicz, and G. Karabatis. </author> <title> Database Transaction Models for Advanced Applications, chapter Using Polytransactions to Manage Interdependent Data, </title> <address> pages 555-581. </address> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San mateo, CA, </address> <year> 1992. </year>
Reference-contexts: Such a system is being implemented in [Tan92, NTC93]. capability 2 . The approach proposed in this paper will help address some of the problems faced by a global transaction manager <ref> [SRK92] </ref> in a multidatabase environment. Also, federated active databases is likely to be useful for enforcing interdatabase dependencies [SLE91] as the situation monitor layer (or the active capability of the integrated architecture) can be used to reveal some of the information in the underlying system to help make global decisions.
Reference: [Tan92] <author> A. Tanaka. </author> <title> On Conceptual Design of Active Databases. </title> <type> PhD thesis, </type> <institution> Georgia Institute of Technology, College of Computing, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: Although a number of active database issues such as, expressive event specification language [CM91, GJS92, HJ91], integration of ECA rules into an object-oriented database [Anw92, GJ91, GrD93] and others <ref> [Tan92, C + 93, CN90] </ref> are being pursued vigorously, to the best of our knowledge, there is no work on the discussion of architectural alternatives, techniques for condition monitoring, and evaluation and comparison of the suitability of these techniques. <p> The underlying DBMS is augmented with a layer that is responsible for providing active capability. The architecture shown permits access to the augmented system either through a user interface tool that transforms user active database design to underlying system constructs <ref> [Tan92] </ref> or through a stand-alone interface. Although full active capability cannot be obtained in this approach, a number of techniques can be used and some optimizations can be performed by the situation monitor layer. <p> The application shown in Figure 1 is a tool that supports design interface at one end (extended ER diagram, for example) and generates ECA rules either for the layered or for the integrated architecture. Such a system is being implemented in <ref> [Tan92, NTC93] </ref>. capability 2 . The approach proposed in this paper will help address some of the problems faced by a global transaction manager [SRK92] in a multidatabase environment.
Reference: [WB79] <author> Patrick Henry Winston and Richard Henry Brown. </author> <title> Artificial Intelligence: An MIT Perspective. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1979. </year>
Reference-contexts: ON conditions in programming languages and early DBMSs [Oll78], and signals in operating systems [Bac88, Geh84, Hug79, LMKQ89] have been used early on. Later, Artificial Intelligence (AI) systems have used daemons for asynchronous execution of procedures attached to frame slots <ref> [CRM80, WB79] </ref>. Furthermore, multi-paradigm systems, such as LOOPS [BS83] and KEE [Int85] have incorporated active values as a new technique that generalizes asynchronous rule processing. However, most of these systems do not support typical database functionality, such as data sharing, consistency, and multi-user execution.
Reference: [WCB91] <author> J. Widom, R. J. Cochrane, and . Lindsay B, G. </author> <title> Implemented Set-Oriented Production Rules as an Extension of Starburst. </title> <booktitle> In Proceedings 17th International Conference on Very Large Data Bases, </booktitle> <pages> pages 275-286, </pages> <address> Barcelona (Catalonia, Spain), </address> <month> Sep. </month> <year> 1991. </year>
Reference: [WF90] <author> J. Widom and S. Finkelstein. </author> <title> Set-Oriented Production Rules in Relational Database Systems. </title> <booktitle> In Proc. of ACM-SIGMOD, </booktitle> <pages> pages 259-270, </pages> <month> May </month> <year> 1990. </year> <month> 28 </month>
Reference-contexts: However, the semantics of rule execution in the context of databases requires that several additional issues be considered <ref> [WF90, Cha89, C + 89] </ref>. Here we include only those issues that are relevant to the rest of the discussion in the paper: * Rule execution points: In HiPAC [HLM88], three coupling modes for rule execution were introduced to support application needs. <p> Either a conflict resolution strategy can be used to totally order the rules or traditional serializability theory can be applied to execute rules concurrently. Starburst <ref> [WF90] </ref> uses the former approach whereas HiPAC [HLM88] uses the latter. * Nested rules: When rule actions can trigger other rules, there is potential for nested (or even cyclic) rule execution.
References-found: 45

