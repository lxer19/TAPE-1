URL: http://charm.cs.uiuc.edu/manuals/yaddes-basics.ps.gz
Refering-URL: http://charm.cs.uiuc.edu/manuals/
Root-URL: http://www.cs.uiuc.edu
Title: THE YADDES DISTRIBUTED DISCRETE EVENT SIMULATION SPECIFICATION LANGUAGE AND EXECUTION ENVIRONMENTS  
Author: Bruno R. Preiss 
Address: Waterloo, Ontario, Canada, N2L 3G1  
Affiliation: Department of Electrical Engineering University of Waterloo,  
Note: Copyright (c) 1989 by Simulation Councils, Inc.  
Abstract: This paper describes a simulation specification language and execution environments that are being used to study the performance of distributed discrete event simulation. First, a simulation programming model based on Chandy-Misra distributed discrete event simulation is presented. Then, the Yaddes simulation specification language is described. Yaddes specifications are translated into C language programs which are then compiled and linked with a run-time support library. Next, the implementation of the run-time support libraries is described. The four libraries currently supported are: (1) traditional, event-list-driven discrete event simulation, (2) distributed discrete event simulation based on multiple, synchronized event lists, (3) Chandy-Misra distributed discrete event simulation, and (4) virtual-time-based distributed discrete event simulation. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Apollo. </author> <year> 1987. </year> <title> Network Computing System (NCS) Reference. Order No. </title> <type> 010200, </type> <institution> Apollo Computer Inc., Chelmsford, </institution> <address> MA. </address>
Reference-contexts: This version has been run under BSD4.3 Unix on a DEC microVAX II, under DOMAIN/IX on an Apollo DN3010, and under MS-DOS on a Toshiba 3100 (PC-compatible). 3. The multiprocessor version of the libraries is implemented using Apollo's Network Computing System <ref> (Apollo 1987) </ref> to provide a distributed processing environment. This ver sion runs under DOMAIN/IX on a ring of Apollo DN3010 workstations. 7.
Reference: <author> Brown, R. </author> <year> 1988. </year> <title> ``Calendar Queues: A Fast O(1) Priority Queue Implementation of the Simulation Event Set Problem.'' </title> <journal> Communications of the ACM 31, </journal> <volume> no. 10 (Oct.): </volume> <pages> 1220-1227. </pages>
Reference-contexts: The current implementation of the event-list-driven mechanism uses a linear list to hold the future events. It is well known that this is not the optimal data structure for this application. In order to obtain uninflated speedup figures, a more efficient data structure such as calendar queues <ref> (Brown 1988) </ref> should be used. model . . . state model . . . state event list output tables input events output events Simulation Environment Copyright (c) 1989 by Simulation Councils, Inc. - 6 - 4.2.
Reference: <author> Jefferson, D., Beckman, B., Wieland, F., Blume, L., DiLoreto, M., Hontalas, P., Laroche, P., Sturdevant, K., Tupman, J., Warren, V., Wedel, J., Younger, H., and Bellenot, S. </author> <year> 1987. </year> <title> ``Distributed Simulation and the Time Warp Operating System.'' </title> <booktitle> In Proc. 12th SIGOPS Symposium on Operating Systems Principles, </booktitle> <pages> 77-93. </pages>
Reference-contexts: Chandy-Misra distributed discrete event simulation (Misra 1986), and 4. virtual-time-based (Jefferson 1985) distributed discrete event simulation using the time warp <ref> (Jefferson et al. 1987) </ref> mechanism. The Yaddes user need not be concerned with the execution mechanism used. A Yaddes specification can be executed using any of the mechanisms merely by linking to the appropriate run-time library. <p> Hence, a simulation written for the Chandy-Misra environment can be executed under the other execution environments without change. Copyright (c) 1989 by Simulation Councils, Inc. - 9 - 4.4. Virtual-Time-Based Distributed Discrete Event Simulation The virtual-time distributed discrete event simulation environment is based on the time warp operating system <ref> (Jefferson et al. 1987) </ref>. As in the Chandy-Misra environment, each logical process runs as a separate task on a separate processor and logical processes consist of the Yaddes model, state, and output tables together with an envelope.
Reference: <author> Jefferson, D. R. </author> <year> 1985. </year> <title> ``Virtual Time.'' </title> <journal> ACM Transactions on Programming Languages and Systems 7, </journal> <volume> no. </volume> <month> 3 (Jul.): </month> <pages> 404-425. </pages>
Reference-contexts: Chandy-Misra distributed discrete event simulation (Misra 1986), and 4. virtual-time-based <ref> (Jefferson 1985) </ref> distributed discrete event simulation using the time warp (Jefferson et al. 1987) mechanism. The Yaddes user need not be concerned with the execution mechanism used. A Yaddes specification can be executed using any of the mechanisms merely by linking to the appropriate run-time library. <p> Fossils <ref> (Jefferson 1985) </ref> are past inputs, states, and antimessages that are no longer required and may be discarded. The Yaddes fossil collection algorithm uses a circulating token message.
Reference: <author> Johnson, S. C. </author> <year> 1979. </year> <title> ``Yacc Yet Another Compiler Compiler.'' In Unix Programmer's Manual, </title> <institution> Bell Laboratories, </institution> <address> Murray Hill, NJ. </address>
Reference-contexts: THE YADDES LANGUAGE The Yaddes language is a specification language in the style of Yacc <ref> (Johnson 1979) </ref> and Lex (Lesk 1979). That is, it is a specification language based on the C programming language. Yaddes source files are translated into C language programs that are then compiled and linked to a Yaddes run-time support library to produce an executable simulation program.
Reference: <author> Kernighan, B. W. and Ritchie, D. M. </author> <year> 1978. </year> <title> The C Programming Language. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ. </address>
Reference-contexts: The principle features of the Yaddes system are: 1. the Yaddes simulation specification language and compiler, 2. run-time libraries that support various simulation execution mechanisms. The Yaddes user prepares a specification of the desired simulation. Yaddes then translates the specification into a C language <ref> (Kernighan and Ritchie 1978) </ref> program. This program is then compiled and linked to an execution mechanism library to form a complete program that performs the desired simulation. The advantage of the Yaddes system is that it uses a programming model that supports several different simulation execution mechanisms.
Reference: <author> Lesk, M. E. </author> <year> 1979. </year> <title> ``Lex A Lexical Analyzer Generator.'' In Unix Programmer's Manual, </title> <institution> Bell Laboratories, </institution> <address> Murray Hill, NJ. </address>
Reference-contexts: THE YADDES LANGUAGE The Yaddes language is a specification language in the style of Yacc (Johnson 1979) and Lex <ref> (Lesk 1979) </ref>. That is, it is a specification language based on the C programming language. Yaddes source files are translated into C language programs that are then compiled and linked to a Yaddes run-time support library to produce an executable simulation program.

References-found: 7

