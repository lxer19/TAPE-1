URL: http://www.cs.unm.edu/~moret/map.ps
Refering-URL: http://www.cs.unm.edu/stats/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Map Labeling and Its Generalizations  
Author: Srinivas Doddi, Madhav V. Marathe, Andy Mirzaian, Bernard M.E. Moret, and Binhai Zhu 
Keyword: Approximation algorithms, map labeling, NP -hardness  
Abstract: Map labeling is of fundamental importance in cartography and geographical information systems and is one of the areas targeted for research by the ACM Computational Geometry Impact Task Force. Previous work on map labeling has focused on the problem of placing maximal uniform, axis-aligned, disjoint rectangles on the plane so that each point feature to be labeled lies at the corner of one rectangle. Here, we consider a number of variants of the map labeling problem. We obtain three general types of results. First, we devise constant-factor polynomial-time approximation algorithms for labeling point features by rectangular labels, where the feature may lie anywhere on the boundary of its label region and where labeling rectangles may be placed in any orientation. These results generalize to the case of elliptical labels. Secondly, we consider the problem of labeling a map consisting of disjoint rectilinear line segments. We obtain constant-factor polynomial-time approximation algorithms for the general problem and an optimal algorithm for the special case where all segments are horizontal. Finally, we formulate a bicriteria version of the map-labeling problem and provide bicriteria polynomial-time approximation schemes for a number of such problems.
Abstract-found: 1
Intro-found: 1
Reference: [CGI96] <institution> ACM Computational Geometry Impact Task Force, </institution> <note> Application challenges to computational geometry, Princeton U. Technical Report TR-521-96,. </note>
Reference-contexts: Although nearly two decades of development have led to some good map-making algorithms, cartographic knowledge and experience remain critical to the production of good maps: the craft of making maps is still an indispensable ingredient [BC94]. Map labeling has been targeted by the ACM Computational Geometry Task Force <ref> [CGI96] </ref> as one of the important areas of research in Discrete Computational Geometry.
Reference: [AF84] <author> J. Ahn and H. Freeman, </author> <title> A program for automatic name placement, </title> <booktitle> Cartographica 21 (2 & 3) (1984), </booktitle> <pages> 101-109. </pages>
Reference: [AHU] <author> A. Aho, J. Hopcroft and J. Ullman, </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison Wesley, </publisher> <address> Reading MA., </address> <year> 1974. </year>
Reference: [BO79] <author> J.L. Bentley and T.A. Ottmann, </author> <title> Algorithms for reporting and counting geometric intersections, </title> <journal> IEEE Trans. Comput. </journal> <month> C28 </month> <year> (1979), </year> <pages> 643-647. </pages>
Reference-contexts: It is well known that the set of relations is a vertical neighbor of (also called a trapezoidal decomposition or a vertical visibility map) can be computed in O (n log n) time, e.g., through simple scanning (as was first observed by Bentley and Ottmann <ref> [BO79] </ref>). The resulting map, which we shall call the VVM, is linear in size and can be used for point location in logarithmic time.
Reference: [BC94] <author> D. Beus and D. Crockett, </author> <title> Automated production of 1:24,000 scale quadrangle maps, </title> <booktitle> Proc. 1994 ASPRS/ACSM Ann. Convention and Exposition, </booktitle> <volume> Vol. 1, </volume> <year> (1994), </year> <pages> 94-99. </pages>
Reference-contexts: 1 Introduction Automatic map-making is an important part of Geographic Information Systems (GIS). Although nearly two decades of development have led to some good map-making algorithms, cartographic knowledge and experience remain critical to the production of good maps: the craft of making maps is still an indispensable ingredient <ref> [BC94] </ref>. Map labeling has been targeted by the ACM Computational Geometry Task Force [CGI96] as one of the important areas of research in Discrete Computational Geometry.
Reference: [BO83] <author> M. Ben-Or, </author> <title> Lower bounds for algebraic computation trees, </title> <booktitle> Proc. 15th Ann. ACM Symp. on Theory of Comput. </booktitle> <address> STOC-83, </address> <year> (1983), </year> <pages> 80-86. </pages>
Reference-contexts: Proof: The upper bound follows easily from the above discussion. We use a linear time reduction from the Min-Gap problem of n reals, which is known to have a lower bound of (n log n) under the algebraic decision tree model of computation <ref> [BO83] </ref>, to show that computing the optimal value v opt when all n segments are horizontal, has the same lower bound.
Reference: [AF84] <author> L. Carstensen, </author> <title> A Comparison of Simple Mathematical Approaches to the Placement of Spot Symbols, </title> <booktitle> Cartographica 24 (3) (1987), </booktitle> <pages> 46-63. </pages>
Reference: [CMS93] <author> J. Christensen, J. Marks, and S. Shieber, </author> <title> Algorithms for cartographic label placement, </title> <booktitle> Proc. 1993 ASPRS/ACSM Ann. Convention and Exposition Vol. </booktitle> <volume> 1, </volume> <year> (1993), </year> <pages> 75-89. </pages>
Reference-contexts: Other researchers have built automated map-labeling systems since the early 70's, typically using a combination of heuristics such as mathematical programming, gradient descent, etc.; a comprehensive survey and list of references can be found in <ref> [CMS93] </ref>. <p> Our results significantly extend and generalize those of <ref> [CMS93, FW91] </ref> on the complexity and approximability of the map-labeling problem.
Reference: [CMS95] <author> J. Christenson, J. Marks, and S. Shieber. </author> <title> An Empirical Study of Algorithms for Point-Feature Label Placement, </title> <journal> ACM Transactions on Graphics, </journal> <year> 1995. </year>
Reference-contexts: Map labeling has been targeted by the ACM Computational Geometry Task Force [CGI96] as one of the important areas of research in Discrete Computational Geometry. As pointed out in <ref> [CMS95] </ref>, applications in cartography require three different label-placement tasks: (i) labeling area features (such as countries and oceans); (ii) labeling line (segment) features (such as rivers and roads); and (iii) labeling point features (such as cities and mountain peaks). An efficient algorithm must solve these three label-placement tasks simultaneously. <p> An efficient algorithm must solve these three label-placement tasks simultaneously. Note that all three tasks share a combinatorial aspect: labels must not overlap; as remarked in <ref> [CMS95] </ref>, this aspect of label placement is independent of the nature of the features being labeled and is perhaps the most basic problem to solve for automating label placement.
Reference: [DF92] <author> J. Doerschler and H. Freeman, </author> <title> A rule-based system for cartographic name placement, </title> <booktitle> Com-mun. ACM 35 (1992), </booktitle> <pages> 68-79. </pages>
Reference-contexts: Given that map-labeling can be thought of as attempting to meet a set of rules [Im75], several researchers have also attempted to solve the problem using techniques from artificial intelligence and logic programming (see, for instance, [Jo89]); the aforementioned survey also discusses these attempts as does <ref> [DF92] </ref>. 2 Our Results We study several variants of the general point-feature map-labeling problem. Our results significantly extend and generalize those of [CMS93, FW91] on the complexity and approximability of the map-labeling problem.
Reference: [DLSS] <author> A. Datta, P. Lenhof, C. Schwarz, and M. Smid, </author> <title> Static and dynamic algorithms for k-point clustering problems, </title> <booktitle> Proc. 3rd Workshop on Algorithms and Data Structures WADS-93, </booktitle> <publisher> Springer-Verlag LNCS #709, </publisher> <year> (1993), </year> <pages> 265-276. </pages>
Reference-contexts: The minimum k-diameter of S, denoted D k (S), is the smallest value of the k-diameter among all subsets of S of size k. How to compute the minimum k-diameter was studied by <ref> [EE94, DLSS] </ref>; they gave an algorithm that returns the value in O (n log n) time. We make some simple observations about the minimum k-diameter. Lemma 1. D 1 D 2 : : : D n1 D n . Lemma 2.
Reference: [EE94] <author> D. Eppstein and J. Erickson, </author> <title> Iterated nearest neighbors and finding minimal polytopes, </title> <journal> Discrete & Comput. Geom. </journal> <volume> 11 (1994), </volume> <pages> 321-350. </pages>
Reference-contexts: The minimum k-diameter of S, denoted D k (S), is the smallest value of the k-diameter among all subsets of S of size k. How to compute the minimum k-diameter was studied by <ref> [EE94, DLSS] </ref>; they gave an algorithm that returns the value in O (n log n) time. We make some simple observations about the minimum k-diameter. Lemma 1. D 1 D 2 : : : D n1 D n . Lemma 2. <p> Using the results of <ref> [EE94] </ref>, we can compute D 3 (S) in O (n log n) time. We can determine the nearest neighbor of each point (the p j for our p i ) in O (n log n) time using standard techniques. Placing the labeling circles takes constant time per circle.
Reference: [FW91] <author> M. Formann and F. Wagner, </author> <title> A packing problem with applications to lettering of maps, </title> <booktitle> Proc. 7th Ann. ACM Sympos. </booktitle> <institution> Comput. Geom. CG-91, </institution> <year> (1991), </year> <pages> 281-288. </pages>
Reference-contexts: Legibility may take precedence over aesthetic placement, especially for technical maps where every feature must be labeled <ref> [FW91] </ref>. These considerations lead us to define the general point-feature map-labeling problem. An instance of this problem consists of a set of point features and a set of constraints (such as permissible amount of overlap) for placing labels. <p> An instance of this problem consists of a set of point features and a set of constraints (such as permissible amount of overlap) for placing labels. The goal of the problem is to label each feature so as to satisfy the constraints. On the theoretical side, Formann and Wagner <ref> [FW91] </ref> studied the problem of labeling a set of n points such that each point is assigned an axis-aligned labeling rectangle, each rectangle is placed so that one of its corners is the point feature it labels, all rectangles have the same size, and the size of the rectangles is maximized. <p> Our results significantly extend and generalize those of <ref> [CMS93, FW91] </ref> on the complexity and approximability of the map-labeling problem. <p> We present a simple, yet very general technique, based on discretization of the map and its labels, to construct a polynomial-time approximation scheme for this problem and its variants. Since it has been shown in <ref> [FW91] </ref> that the map-labeling problem cannot be approximated within a factor of 2 unless P = NP, our bicriteria framework offers one way to overcome the limitations imposed by labeling every feature. 3 Preliminaries We define formally our two problems for labeling point features and briefly discuss a related tractable problem <p> All other steps take constant time. Note that log D 5 (S) is bounded by a polynomial in the input size, since it is the logarithm of a distance between two points given (by their coordinates) in the input. For the case of the map labeling problem of <ref> [FW91] </ref>, we can further reduce the running time by observing that we have only four possible positions for placing each square. Also note that our algorithms extend to the case when we are allowed to place uniform rectangles at each point feature. <p> to lack of space. 7.2 An Approximation Solution for the General Problem If we allow two of the three possible placements for a label (excluding the placement athwart the segment), then the problem can be modelled as a series of 2SAT problems and solved in O (n 2 ) time <ref> [FW91] </ref>. Denote the optimal solution to this restricted version of the problem by v fl and denote the optimal solution to our version (with three choices of placement allowed) by v opt .
Reference: [GJ79] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability. A Guide to the Theory of NP-Completeness, </title> <publisher> Freeman, </publisher> <address> San Francisco CA, </address> <year> 1979. </year>
Reference: [Hi82] <author> S. Hirsh, </author> <title> An Algorithm for Automatic Name Placement Around Point Data, </title> <booktitle> The American Cartographer 9 (1) (1982), </booktitle> <pages> 5-17. 11 </pages>
Reference: [HM85] <author> D. Hochbaum and W. </author> <title> Maass Approximation Schemes for Covering and Packing Problems in Image Processing and VLSI, </title> <journal> Journal of ACM, </journal> <volume> 32 (1), </volume> <month> Jan. </month> <year> (1985), </year> <pages> pp. 130-136. </pages>
Reference: [HM+95] <author> H. B. Hunt III, M. V. Marathe, V. Radhakrishnan, S. S. Ravi, D. J. Rosenkrantz and R. E. Stearns, </author> <title> A Unified Approach to Approximation Schemes for NP and PSPACE-Hard Problems for Geometric Graphs, </title> <booktitle> Proc. 2nd European Symp. on Algorithms ESA-94, </booktitle> <year> (1994), </year> <pages> 468-477. </pages>
Reference-contexts: For each square graph thus created, we obtain an approximate solution to the Maximum Independent Set problemfor which a polynomial-time approximation scheme is known to exist in a variety of geometric graphs <ref> [HM+95] </ref>. Theorem 5. <p> Denote the set of squares thus obtained by S k = fS 1 ; : : : ; S 4qn g. (b) Solve the Maximum Independent Set problem for the set of squares S k using the algorithm of <ref> [HM+95] </ref>; let m k be the size of the independent set returned by the algorithm. 3. Let k fl denote the largest value of k obeying m k (1 *) n. 4. <p> The maximum value of r is O (log D 5 (S)). Steps 2a and 2b take O (n) time for each iteration, since, for each fixed *, we obtain a -precision square graph with n squares. The algorithm of <ref> [HM+95] </ref> runs in linear time. All other steps take constant time. Note that log D 5 (S) is bounded by a polynomial in the input size, since it is the logarithm of a distance between two points given (by their coordinates) in the input. <p> The algorithm otherwise pro ceeds as outlined in the case of MLUS-AP, albeit with higher running-time factors. 2. Circles and other regular polygons: The algorithm can easily be extended to other regular polygons. (The algorithm of <ref> [HM+95] </ref> works on many variations of geometric graphs, not just square graphs.) 8 It can also be applied with a slight modification to circles: we then use the maximum independent set algorithm for unit disk graphs given in [HM+95]. 3. <p> algorithm can easily be extended to other regular polygons. (The algorithm of <ref> [HM+95] </ref> works on many variations of geometric graphs, not just square graphs.) 8 It can also be applied with a slight modification to circles: we then use the maximum independent set algorithm for unit disk graphs given in [HM+95]. 3. Placement with non-uniform squares: Assume that different-sized squares can be used under the condition that the ratio of the sides of the largest to the smallest square be bounded (a reasonable aesthetic requirement). <p> In Step 2b we again solve the maximum independent set problem for the induced graph. This time, we use the algorithm given in <ref> [HM+95] </ref> to find a large independent set for (p; q)-civilized graphs. 4. Placement for vertices of a graph: Consider a generalization of the map labeling problem in which we are given a graph in the plane and we wish to label the vertices of the graph.
Reference: [Im75] <author> E. Imhof, </author> <title> Positioning names on maps, </title> <booktitle> The American Cartographer 2 (1975), </booktitle> <pages> 128-144. </pages>
Reference-contexts: part by NSERC. x Dept. of Computer Science, University of New Mexico, Albuquerque, NM 87131, moret@cs.unm.edu; research sup ported in part by ONR contract N00014-92-C-2144. -Dept. of Computer Science, City University of Hong Kong, and Los Alamos National Laboratory, bhz@c3.lanl.gov; research supported by Los Alamos National Lab. 1 area, Imhof <ref> [Im75] </ref> illustrates these goals by giving 100 examples of good and bad labeling decisions. <p> Given that map-labeling can be thought of as attempting to meet a set of rules <ref> [Im75] </ref>, several researchers have also attempted to solve the problem using techniques from artificial intelligence and logic programming (see, for instance, [Jo89]); the aforementioned survey also discusses these attempts as does [DF92]. 2 Our Results We study several variants of the general point-feature map-labeling problem.
Reference: [Jo89] <author> C. Jones, </author> <title> Cartographic name placement with Prolog, </title> <booktitle> IEEE Computer Graphics and Applications 5 (1989), </booktitle> <pages> 36-47. </pages>
Reference-contexts: Given that map-labeling can be thought of as attempting to meet a set of rules [Im75], several researchers have also attempted to solve the problem using techniques from artificial intelligence and logic programming (see, for instance, <ref> [Jo89] </ref>); the aforementioned survey also discusses these attempts as does [DF92]. 2 Our Results We study several variants of the general point-feature map-labeling problem. Our results significantly extend and generalize those of [CMS93, FW91] on the complexity and approximability of the map-labeling problem.
Reference: [KR92] <author> D. Knuth and A. Raghunathan, </author> <title> The problem of compatible representatives, </title> <journal> SIAM J. Disc. Math. </journal> <volume> 5 (1992), </volume> <pages> 422-427. </pages>
Reference-contexts: More recently, Wagner and Wolff [WW95, WF95] introduced some heuristics that appear to perform well on small problems. In general, map labeling appears to be a hard problem since it is closely related to the NP-hard independent set and kSAT problems <ref> [KR92] </ref>. Other researchers have built automated map-labeling systems since the early 70's, typically using a combination of heuristics such as mathematical programming, gradient descent, etc.; a comprehensive survey and list of references can be found in [CMS93].
Reference: [MS91] <author> J. Marks and S. Shieber, </author> <title> The Computational Complexity of Cartographic Label Placement, </title> <month> March </month> <year> (1991). </year>
Reference-contexts: As pointed out in <ref> [MS91] </ref>, the following concerns are of particular importance: (i) the degree to which labels overlap with each other and obscure cartographic features; (ii) the degree to which labels are unambiguously and clearly associated with the features they identify; (iii) a priori preferences among a canonical set of potential label positions; and <p> Our approximation algorithms for labeling point features are very efficient and easily implemented; all run in O (n log n) time with small constants. Going back to the criteria of <ref> [MS91] </ref>, we note that one criterion listed is the number of features left unlabeledwe all have encountered maps with unlabeled features. Yet all the algorithms mentioned above label every feature. By allowing a small number of features to remain unlabeled, we may be able to better label the other features.
Reference: [PS85] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference: [vR89] <author> J. van Roessel, </author> <title> An Algorithm for Locating Candidate Labeling Boxes within a Polygon, </title> <booktitle> The American Cartographer 16 (3) (1989), </booktitle> <pages> 201-209. </pages>
Reference: [Wag94] <author> F. Wagner, </author> <title> Approximate map labeling is in (n log n), </title> <journal> Inform. Process. Lett. </journal> <volume> 52 (1994), </volume> <pages> 161-165. </pages>
Reference-contexts: They proved that this problem is NP-complete and that, unless P = NP, no polynomial-time approximation algorithm can do better than 50% of optimal; moreover, they presented an O (n log n) time approximation algorithm achieving this bound. Wagner <ref> [Wag94] </ref> then proved that an approximation algorithm that achieves this bound must take (n log n) time. More recently, Wagner and Wolff [WW95, WF95] introduced some heuristics that appear to perform well on small problems.
Reference: [WW95] <author> F. Wagner and A. Wolff, </author> <title> Map labeling heuristics: provably good and practically useful, </title> <booktitle> Proc. 11th Ann. ACM Sympos. </booktitle> <institution> Comput. Geom. CG-95, </institution> <year> (1995), </year> <pages> 109-118. </pages>
Reference-contexts: Wagner [Wag94] then proved that an approximation algorithm that achieves this bound must take (n log n) time. More recently, Wagner and Wolff <ref> [WW95, WF95] </ref> introduced some heuristics that appear to perform well on small problems. In general, map labeling appears to be a hard problem since it is closely related to the NP-hard independent set and kSAT problems [KR92].
Reference: [WF95] <author> A. Wolff, </author> <title> Map Labeling, </title> <type> Diploma Report, </type> <institution> Freie University, Berlin, Department of Mathematics. </institution> <year> (1995). </year>
Reference-contexts: Wagner [Wag94] then proved that an approximation algorithm that achieves this bound must take (n log n) time. More recently, Wagner and Wolff <ref> [WW95, WF95] </ref> introduced some heuristics that appear to perform well on small problems. In general, map labeling appears to be a hard problem since it is closely related to the NP-hard independent set and kSAT problems [KR92].
Reference: [Yo72] <author> P. Yoeli, </author> <title> The Logic of Automated Map Lettering, </title> <booktitle> The Cartographic Journal 9 (2) (1972), </booktitle> <pages> 99-108. </pages>
Reference: [Zo86] <author> S. Zoraster, </author> <title> Integer Programming Applied to the Map Label Placement Problem, </title> <booktitle> Carto-graphica 23 (3) (1986), </booktitle> <pages> 16-27. 12 </pages>
References-found: 28

