URL: ftp://ftp.eecs.umich.edu/groups/gasm/softdev.code.ps
Refering-URL: http://www.eecs.umich.edu/gasm/papers.html
Root-URL: http://www.cs.umich.edu
Email: luca@tex.odd.it)  
Title: Refining an ASM Specification of the Production Cell to C++ Code  
Author: Luca Mearelli 
Address: Pisa, Italy  
Affiliation: (Universita di  
Abstract: We present here the transformation to C++ code of the refined ASM model for the production cell developed in the paper "Integrating ASMs into the Software Development Life Cycle" (see this volume) which serves as program documentation. This implementation is a refinement step and produces code which has been validated through extensive experimentation with the production cell simulator of FZI Karlsruhe. Key Words: Programming Techniques, Stepwise Refinement,Code Documentation, Code Inspection, Abstract State Machines. Category: D.1, D.1.3, D.1.5, D.2.1, D.2.4, D.2.5 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T. Lindner. </author> <title> Task Description . in C. </title> <editor> Lewerentz, T. Lindner (eds.), </editor> <title> Formal Development Of Reactive Systems. Case Study "Production Cell". </title> <publisher> Springer LNCS-891. 1995.pp.9-21 </publisher>
Reference: 2. <author> A. Brauer, T. Lindner. </author> <title> Simulation. </title> <editor> in C. Lewerentz, T. Lindner (eds.), </editor> <title> Formal Development Of Reactive Systems. Case Study "Production Cell". </title> <publisher> Springer LNCS-891. 1995.pp.273-284 </publisher>
Reference-contexts: Some additional code simulates a (piece inserting) operator, and processes the error messages coming from the simulation. See <ref> [2] </ref> for a detailed description of the simulation environment. 2 The C++ code 2.1 The Main Program The file control.cc contains the main loop of the controller program. <p> We have some include and a definition for the infinite loop to be used in the main program. #include &lt;iostream.h&gt; #include &lt;String.h&gt; #include &lt;SLList.h&gt; #define loop for (;;) We define the following arrays of commands for the actuators, as defined for the simulation in <ref> [2] </ref>. <p> proven the consistency of the updates to interface functions (see chap. 3 of [3]). bool TableLoaded; bool PressLoaded; bool FeedBeltFree; bool DepositBeltReadyForLoading; bool PieceAtDepositBeltEnd; bool TableInLoadPosition; bool TableInUnloadPosition; bool PressInUnloadPosition; bool PressInLoadPosition; bool TravellingCraneLoaded; The AskNewStatus function is used to require new sensors readings (the get_status command is defined in <ref> [2] </ref>). void AskNewStatus () - cout&lt;< "get_status"&lt;< endl &lt;< flush; -; The class cModule: ASM module abstract base class, gives the structure to all the classes implementing the modules from the ASM specification.
Reference: 3. <author> E. Borger, L. Mearelli. </author> <title> Integrating ASMs into the Software Development Life Cycle . This volume. 688 Mearelli L.: Refining an ASM Specification for the Production Cell to C++ Code </title>
Reference-contexts: Each agent reacts to these new sensor values and outputs the actuator commands. At last the error messages are collected and the (function simulating a) piece inserting operator is called. For the correctness of the underlying sequentialization of the distributed ASM we refer to section 5 of <ref> [3] </ref>. # include "control.h" cElist Errors; cFeedBelt FeedBelt; cElevRotTable ElevatingRotaryTable; Journal of Universal Computer Science, vol. 3, no. 5 (1997), 666-688 submitted: 20/12/96, accepted: 20/5/97, appeared: 28/5/97 Springer Pub. <p> They are global functions because we need to share them among the classes, but we are sure that no conflicts will arise in their use since we have proven the consistency of the updates to interface functions (see chap. 3 of <ref> [3] </ref>). bool TableLoaded; bool PressLoaded; bool FeedBeltFree; bool DepositBeltReadyForLoading; bool PieceAtDepositBeltEnd; bool TableInLoadPosition; bool TableInUnloadPosition; bool PressInUnloadPosition; bool PressInLoadPosition; bool TravellingCraneLoaded; The AskNewStatus function is used to require new sensors readings (the get_status command is defined in [2]). void AskNewStatus () - cout&lt;< "get_status"&lt;< endl &lt;< flush; -; The class cModule: <p> The constructor is used to initialize the module status functions, including the globals related to the corresponding machine. It is easy to recognize in the code all the elements of the RefCELL module (functions, macro definitions, rules). Therefore we refer to <ref> [3] </ref> for further comments. 2.2.1 The Feed Belt class cFeedBelt : public cModule - bool Delivering; bool NormalRun; bool CriticalRun; bool Stopped; bool TableReadyForLoading; // The Sensor cSensor&lt;bool&gt; PieceInFeedBeltLightBarrier; // The Actuator cActuator&lt;OnOff&gt; FeedBeltMot; void Where () - NormalRun = (FeedBeltMot == on)&&(!Delivering); CriticalRun = (FeedBeltMot == on)&&Delivering; Stopped = FeedBeltMot <p> This explains the additional lines of code for the robot with respect to the rules in RefCELL (see <ref> [3] </ref>). <p> Refining an ASM Specification for the Production Cell to C++ Code r.Where (); r.Rules (); return is; -; 2.2.4 The Press The press has to start in the position where it is unloaded and ready to be loaded by the robot as imposed by the simulation (see section 5 of <ref> [3] </ref>). class cPress : public cModule - bool OpenForUnloading; bool MovingToMiddlePosition; bool OpenForLoading; bool MovingToTopPosition; bool ClosedForForging; bool MovingToBottomPosition; bool ForgingCompleted; // The Sensors cSensor&lt;bool&gt; BottomPosition; cSensor&lt;bool&gt; MiddlePosition; cSensor&lt;bool&gt; TopPosition; // The Actuator cActuator&lt;VertMov&gt; PressMot; void Where () - OpenForUnloading = (BottomPosition () && (PressMot == idlev)); MovingToMiddlePosition = ((!PressLoaded) &&
References-found: 3

