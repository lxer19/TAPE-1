URL: http://cairo.cs.uiuc.edu/papers/thesis.ntran.ps
Refering-URL: http://cairo.cs.uiuc.edu/papers.html
Root-URL: http://www.cs.uiuc.edu
Note: c Copyright by Nancy Ngoc Tran, 1997  
Abstract-found: 0
Intro-found: 1
Reference: [CTCL96] <author> Z. Chen, S. Tan, R. Campbell, Y. Li, </author> <title> Real Time Video and Audio in the World Wide Web. </title> <journal> World Wide Web Journal, </journal> <volume> Volume 1, </volume> <month> January </month> <year> 1996. </year>
Reference-contexts: It also highlights some major differences from Vosaic's real-time video datagram protocol VDP <ref> [CTCL96] </ref>. Finally, it presents a brief overview of mobile agent computing from the perspective of active networks [TW96]. 2.1 Mobile Agents Our motivation to deploy mobile agents to control and manage QoS is drawn from the several benefits they offer. * Mobile agents support the concept of modular programming. <p> In contrast, schemes which are sender driven and which do not use reservations simply establish connections without considering the various QoS needs of heterogeneous receivers. 2.3 A Comparison with Vosaic VDP Our adaptation protocol distinguishes from Vosaic's Video Transport Protocol (VDP) <ref> [CTCL96] </ref> in several aspects. * Through delegation, a receiver can specify its requirements, characteristics and control functions in a mobile program. This program is dynamically dispatched, loaded and executed at the server host. This property allows a flexible, fine-grained customization for each receiver. <p> It then enforces the source to adjust its frame sending rates based on the collected statistics. This solves the problematic case experienced by Vosaic when handling high quality MPEG1 videos (e.g. sent at the recorded rate of 30 frames a second) <ref> [CTCL96] </ref>. * There is no requirement for the client to wait for a large buffer to fill up before frame display can start. Instead, frames are displayed as their characteristics are collected and learned. <p> This is in contrast with protocols that require users to wait for a large buffer to fill up before the first frame is displayed as in <ref> [CTCL96] </ref>. However, the frame arrival rates are slower because, during this phase, acknowledgment is engaged. In total, 13 frames are processed. They belong to roughly 2 complete groups IBBPBB plus one I frame. <p> Our results are different from Vosaic VDP's. In Vosaic, a client, in the presence of high quality videos (recorded and transmitted at 30 fps), experienced disequilibrium: severe frame loss was observed soon after the first 200 frames in the buffer were displayed <ref> [CTCL96] </ref>. Only then adaptation was performed. Processing capabilities of heterogeneous clients were not addressed at the beginning of a video session.
Reference: [Gol96] <author> G. Goldszmidt, </author> <title> Distributed Management by Delegation. </title> <type> PhD Thesis, </type> <institution> Columbia University, </institution> <address> New York, </address> <year> 1996. </year>
Reference-contexts: They require data to be sent to them so that computation can be performed on the data received. Depending on applications, there are times when large amounts of data and overhead are generated, causing congestion in the underlying network <ref> [Gol96] </ref>. More importantly, the arrived data could suffer long network delays, making it rather difficult to deliver a desired level of QoS in a timely manner. * Being fixed, programs cannot be replaced dynamically to accommodate various user/applications QoS control policy changes. <p> on the limitations of our architecture and some thoughts on future work conclude this thesis. 4 Chapter 2 Related Work This chapter provides an overview of concepts and models that form the basis for the design of our architecture: 1) elastic processing approach to mobile agents developed at Columbia University <ref> [Gol96] </ref>, 2) receiver-initiated concept first proposed in the IETF's resource reservation protocol (RSVP) [ZDESZ93]. It also highlights some major differences from Vosaic's real-time video datagram protocol VDP [CTCL96]. <p> For example, a server can dispatch a desired agent close to a client where data are generated <ref> [Gol96] </ref> and have the agent executed on site. By avoiding massive data movement. network traffic 5 can be reduced considerably, leaving the much needed bandwidth for other tasks. <p> In this thesis, we will demonstrate an example to illustrate how this power can be applied to perform adaptation. In mid 1990's, Goldszmidt presented his work on a process-based model to mobile agents computing, called elastic processing <ref> [Gol96] </ref>. His model supports remote delegation service through an elastic process which has an architecture to permit agents to integrate=withdraw their functions directly into=from the process. An elastic process is an active program which can dynamically accept= remove, load and execute agents 1 dispatched by some external processes. <p> Furthermore, compared to the heavy weight full process scheme, threads deployment reduces context switching overhead. This is particularly desirable when the number of delegated agents is large. It makes the elastic process more scalable. Goldszmidt's architecture <ref> [Gol96] </ref> is built as a middleware on top of the host operating system. It provides applications with remote agent delegation services which are depicted in figure 2.1: * dispatch (delegate) an agent to an elastic process. <p> To support the services above, the middleware, called elastic processing runtime, is designed with several components. Figure 2.2, adapted from 7 <ref> [Gol96] </ref>, depicts the runtime environment. * A controller to configure and initialize the elastic process. * A network protocol to handle communication between remote pro cesses. It uses TCP/IP and UDP/IP. * A repository to store delegated programs in the elastic process's host file system. <p> Concurrent accesses by threads to shared data structures are protected. SMARTS Inc. operations server (SOS) implements Goldszmidt's architecture. It provides remote agent delegation services through a set of library routines. Only authorized parties can request services which are in turn authenticated by MD5 (Message Digest scheme) <ref> [Gol96] </ref>. In this thesis, delegation service routines are used extensively in tasks leading to agent delegation and flow control enforcement. 2.2 Receiver-Initiated Model in RSVP Our notion of a receiver-initiated, on demand feedback is inspired by the IETF's Resource Reservation Protocol (RSVP). <p> The SOS server stores delegated program codes in its file system and keeps track of them in a data structure for ease of identification and retrieval. It manages resources (e.g. CPU, memory) used by agent threads. It schedules threads according to a pre-emptive, multi-priority, round-robin, time-sliced policy <ref> [Gol96] </ref>. Agent threads which run in the SOS server address space communicate among themselves via shared memory. 3.9 Delegated Agent Mobile Program to Control Video Flow There is nothing magic about a mobile program. Any program can be made mobile by the remote delegation mechanism as described in section 3.6.1.
Reference: [Jac88] <author> V. Jacobson, </author> <title> Congestion Avoidance and Control. </title> <booktitle> Proceedings of ACM SIGCOMM Aug. 1988, </booktitle> <address> Stanford, California. </address>
Reference-contexts: Communication between remote hosts engages TCP/IP to send control information and UDP/IP to send video pictures. 12 3.1 Assumptions Due to its exponential timer back-off and retransmit property <ref> [Jac88] </ref>, the Internet Transport Control Protocol (TCP) is unsuitable for video data delivery. A retransmitted frame becomes obsolete when its narrow time window for display at a receiver has passed. Furthermore, imperfections inherent in human visual perception often obviates the need for video data reliability. <p> To regulate video flow, it applies the principle of conservation <ref> [Jac88] </ref>: a frame is not placed into the network until an old frame leaves. For the principle of conservation to work, two conditions must be satisfied. * At startup, a receiver must attempt to reach stable state.
Reference: [Sta93] <author> W. Stallings, SNMP, SNMPV2 & CMIP. Addison Wesley, Mas-sachussetts, </author> <year> 1993. </year>
Reference-contexts: Capacity is defined as the total amount of resources a computer has available. It consists of resources already allocated to existing tasks and all other remaining available resources <ref> [Sta93] </ref>. In an heterogeneous environment, machines often have different hardware and software structures. In particular, the differences in processing power, memory sizes and the possession of specific components such as hardware/software-based video decoders, all characterize a machine's capacity.
Reference: [Ste90] <author> W.R. Stevens, </author> <title> Unix Network Programming. </title> <publisher> Prentice Hall Software Series, </publisher> <year> 1990. </year>
Reference-contexts: According to <ref> [Ste90] </ref>, the system wide, maximum number of unique semaphore sets for most Unix systems is 10. This constraint is more apparent at the server end where a set of 2 semaphores is used for every client. <p> This problem can be alleviated by employing message queues instead of shared memory, at the expense of longer processing times (lower performance) due to copy operations overhead. Note that message queues themselves have limits, e.g., a maximum of 40, system wide <ref> [Ste90] </ref>. However, for our purpose, they are less stringent than semaphores. Furthermore, experience gained in the implementation of this prototype tells that programming using semaphores is not easy. The SOS server only provides a fixed, pre-emptive round-robin scheduler for the agent threads that it manages.
Reference: [Str93] <author> B. Stroustrup, </author> <title> The C++ Programming Language. Second Edition. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: Each agent can be considered as a module, composed of a set of related functions together with data they manipulate <ref> [Str93] </ref>. Each module can assume a set of responsibilities and tasks specifically tailored to timely respond to particular situations.
Reference: [TW96] <author> D. Tennenhouse, D. Wetherall, </author> <title> Towards an Active Network Architecture. </title> <journal> pp. 5-18, Computer Communication Review, ACM SIGCOMM 1996. </journal>
Reference-contexts: In contrast, this thesis proposes and experimentally validates a new approach to the control and management of QoS by using the active program passing model. In this model, programs are movable and reconfig urable. * Being movable, programs can be dispatched dynamically to where computations are needed <ref> [TW96] </ref>. By enabling applications to send computations close to the locations of needed data, massive data movement can be avoided. Generally, the size of a program is much 1 smaller than the amount of data it processes. As a result, moving pro-grams is often cheaper than moving data. <p> It also highlights some major differences from Vosaic's real-time video datagram protocol VDP [CTCL96]. Finally, it presents a brief overview of mobile agent computing from the perspective of active networks <ref> [TW96] </ref>. 2.1 Mobile Agents Our motivation to deploy mobile agents to control and manage QoS is drawn from the several benefits they offer. * Mobile agents support the concept of modular programming. <p> workload from network load should provide a clearer view on the behavior of a video system under the stress of a changing workload alone. 2.4 From the Perspective of Active Networks Based on Tennenhouse and Wetherall's paper on active networks, delegation can be viewed under two angles: discrete and integrated <ref> [TW96] </ref>. 'Discrete' delegation refers to separating the delegation of program (which contains intelligence to process the data) from the transfer of data (which will be evaluated by the program). This method can be used when data are simple. <p> Simple data can be passed as arguments in a vector. This is an example of the discrete approach referred in <ref> [TW96] </ref>. On the other hand, complex data can be stored in structures embedded in the pre-compiled program and transferred with it as a single unit. This is known as the integrated method in active networks [TW96]. <p> This is an example of the discrete approach referred in <ref> [TW96] </ref>. On the other hand, complex data can be stored in structures embedded in the pre-compiled program and transferred with it as a single unit. This is known as the integrated method in active networks [TW96]. For our purpose, the flow control data which merely consist of RFPT averages are quite simple.
Reference: [Xil] <institution> X Imaging Library Reference Manual. Sun Microsystems Corp. Sunnyvale, California. </institution>
Reference-contexts: It has two parts, one in the client machine, and the other in the server machine. Xil, abbreviation for X Imaging Library, is an image processing toolkit that supplies a library of routines to perform image related operations <ref> [Xil] </ref>. * A mobile agent application built on top of the SOS server. This server provides support for remote delegation of agents and their con trol. Agents run as threads inside the address space of SOS.
Reference: [ZDESZ93] <author> L. Zhang, S. Deering, D. Estrin, S. Shenker, D. Zappala, </author> <month> RSVP: </month>
Reference-contexts: this thesis. 4 Chapter 2 Related Work This chapter provides an overview of concepts and models that form the basis for the design of our architecture: 1) elastic processing approach to mobile agents developed at Columbia University [Gol96], 2) receiver-initiated concept first proposed in the IETF's resource reservation protocol (RSVP) <ref> [ZDESZ93] </ref>. It also highlights some major differences from Vosaic's real-time video datagram protocol VDP [CTCL96]. <p> RSVP is a receiver-oriented, simplex reservation protocol designed for the Internet. One of its design principles is to make the receiver directly responsible for initiating resource reservation requests. This paradigm offers several advantages over the traditional sender-driven approach especially in multicast groups where multiple, heterogeneous receivers and senders interact <ref> [ZDESZ93] </ref>. In particular, it allows each receiver in the group to specify its own processing requirements 9 and quality of service demand based on its processing capabilities, constraints and workload. Figure 2.3 gives a simple example of RSVP's receiver-initiated model.
References-found: 9

