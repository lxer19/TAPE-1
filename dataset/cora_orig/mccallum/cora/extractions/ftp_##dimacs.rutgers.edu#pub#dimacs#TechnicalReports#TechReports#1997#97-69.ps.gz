URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1997/97-69.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1997.html
Root-URL: http://www.cs.rutgers.edu
Email: E-mail: liberato@cs.rutgers.edu.  
Title: Uniform Multipaging Reduces to Paging  
Author: by Vincenzo Liberatore ; 
Note: 2 Research supported by a DIMACS Graduate Fellowship. DIMACS is a partnership of Rutgers University, Princeton University, AT&T Labs, Bellcore, and Bell Labs. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology.  
Web: URL: http://www.cs.rutgers.edu/~liberato/.  
Address: New Brunswick, NJ 08903.  
Affiliation: Department of Computer Science, Hill Center, Rutgers University,  
Abstract: DIMACS Technical Report 97-69 October 1997 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. A. Belady. </author> <title> A study of replacement algorithms for a virtual storage computer. </title> <journal> IBM Systems Journal, </journal> <volume> 5(2) </volume> <pages> 78-101, </pages> <year> 1966. </year>
Reference-contexts: Then, we will show how to transform an on-line paging algorithm into an on-line multipaging algorithm with no greater cost. Let OPT 0 be Beladi's optimum off-line algorithm for paging: in response to a page fault, evict the page that will be referenced furthest in the future <ref> [1] </ref>. Define the multipaging algorithm OPT as the algorithm that, in response to s i , brings into fast memory exactly the pages that are in the fast memory of OPT 0 at the end of s 0 i .
Reference: [2] <author> M. Farach and V. Liberatore. </author> <title> On local register allocation. </title> <type> Technical Report TR97-33, </type> <institution> DIMACS, </institution> <year> 1997. </year>
Reference-contexts: The cost of a multipaging algorithm is, in the uniform cost model, equal to the number of pages brought into fast memory. The off-line version of uniform multipaging is a simplification of local register allocation <ref> [2] </ref>. Uniform multipaging was observed to be similar to traditional paging. However, paging and multipaging were not tied by a formal equivalence statement. As a consequence, multi-paging algorithms were analyzed from first principles, and without using known facts from paging.
Reference: [3] <author> E. </author> <title> Feuerstein. Paging more than one page. </title> <journal> Theoretical Computer Science, </journal> <volume> 181(1) </volume> <pages> 75-90, </pages> <month> July </month> <year> 1997. </year>
Reference-contexts: All the pages referenced in one request must be simultaneously present in fast memory in order for the request to be satisfied. Multipaging has been recently proposed to model paging of graph algorithms and database applications <ref> [3] </ref>. The cost of a multipaging algorithm is, in the uniform cost model, equal to the number of pages brought into fast memory. The off-line version of uniform multipaging is a simplification of local register allocation [2]. Uniform multipaging was observed to be similar to traditional paging. <p> Consequently, competitiveness results for multipaging can be deduced from competitiveness results for paging. In fact, the proof of Theorem 1 is constructive, and allows us to transform any competitive algorithm for paging into a competitive algorithm for multipag-ing. As a result, all known results on uniform multipaging <ref> [3] </ref> can be deduced as a corollary of Theorem 1. Furthermore, we obtain the first strongly competitive randomized algorithm for multipaging. The gist of the proof of Theorem 1 is to transform a multipage request s into a paging request sequence by demanding all the pages in s twice. <p> In the next section, we will prove Theorem 1. - 2 - 2 From Multipaging to Paging In this section, we will show how to reduce uniform multipaging to the traditional paging problem. Paging and multipaging algorithms can be assumed without loss of generality to be lazy <ref> [7, 3] </ref>, that is, * Fast memory changes only in response to page faults, and * No unrequested page is loaded into fast memory. If G is a paging or multipaging algorithm, c (G) will denote the total cost of G. We will use the following notation. <p> Then, c (G) c (G 0 ) by summing over the whole sequence. Remark. Although G is not lazy, it is routine to modify it into a lazy algorithm without increasing its cost <ref> [3] </ref>. - 4 - Proof of Theorem 1. Let G 0 be a c-competitive paging algorithm, and G the corresponding multipaging algorithm defined above.
Reference: [4] <author> A. Fiat, R. M. Karp, M. Luby, L. A. McGeoch, D. D. Sleator, and N. E. Young. </author> <title> Competitive paging algorithms. </title> <journal> Journal of Algorithms, </journal> <volume> 12(4) </volume> <pages> 685-699, </pages> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: An on-line strategy is said to be strongly competitive if it achieves the best possible competitive ratio [5, 6]. On-line paging and its competitiveness analysis have attracted substantial attention in the literature <ref> [4, 5, 8, 9] </ref>. Multipaging is a version of the paging problem that allows for more than one page to be requested in one step. All the pages referenced in one request must be simultaneously present in fast memory in order for the request to be satisfied. <p> Inequality (1) establishes that G is c-competitive, and the theorem is proved. 2 Theorem 1, the algorithm in [8], and the lower bound in <ref> [4] </ref> yield the following Corollary 4 There is a randomized algorithm for the multipaging problem that is strongly competitive against an oblivious adversary. Acknowledgements We thank Martin Farach for proofreading this paper.
Reference: [5] <author> S. Irani and A. R. Karlin. </author> <title> Online computation. </title> <editor> In D. S. Hochbaum, editor, </editor> <title> Approximation Algorithms for NP-hard problems, </title> <booktitle> chapter 13, </booktitle> <pages> pages 521-564. </pages> <publisher> PWS Publishing Company, </publisher> <address> Boston, </address> <year> 1997. </year>
Reference-contexts: The performance of on-line algorithms is often measured in terms of their competitive ratio, which is defined as the ratio of the algorithm cost over the cost of the optimum off-line strategy <ref> [5, 9] </ref>. An on-line strategy is said to be strongly competitive if it achieves the best possible competitive ratio [5, 6]. On-line paging and its competitiveness analysis have attracted substantial attention in the literature [4, 5, 8, 9]. <p> An on-line strategy is said to be strongly competitive if it achieves the best possible competitive ratio <ref> [5, 6] </ref>. On-line paging and its competitiveness analysis have attracted substantial attention in the literature [4, 5, 8, 9]. Multipaging is a version of the paging problem that allows for more than one page to be requested in one step. <p> An on-line strategy is said to be strongly competitive if it achieves the best possible competitive ratio [5, 6]. On-line paging and its competitiveness analysis have attracted substantial attention in the literature <ref> [4, 5, 8, 9] </ref>. Multipaging is a version of the paging problem that allows for more than one page to be requested in one step. All the pages referenced in one request must be simultaneously present in fast memory in order for the request to be satisfied.
Reference: [6] <author> A. R. Karlin, M. S. Manasse, L. Rudolph, and D. D. Sleator. </author> <title> Competitive snoopy caching. </title> <journal> Algorithmica, </journal> <volume> 3(1) </volume> <pages> 79-119, </pages> <year> 1988. </year>
Reference-contexts: An on-line strategy is said to be strongly competitive if it achieves the best possible competitive ratio <ref> [5, 6] </ref>. On-line paging and its competitiveness analysis have attracted substantial attention in the literature [4, 5, 8, 9]. Multipaging is a version of the paging problem that allows for more than one page to be requested in one step.
Reference: [7] <author> M. S. Manasse, L. A. McGeoch, and D. D. Sleator. </author> <title> Competitive algorithms for server problems. </title> <journal> Journal of Algorithms, </journal> <volume> 11 </volume> <pages> 208-230, </pages> <year> 1990. </year>
Reference-contexts: In the next section, we will prove Theorem 1. - 2 - 2 From Multipaging to Paging In this section, we will show how to reduce uniform multipaging to the traditional paging problem. Paging and multipaging algorithms can be assumed without loss of generality to be lazy <ref> [7, 3] </ref>, that is, * Fast memory changes only in response to page faults, and * No unrequested page is loaded into fast memory. If G is a paging or multipaging algorithm, c (G) will denote the total cost of G. We will use the following notation.
Reference: [8] <author> L. A. McGeoch and D. D. Sleator. </author> <title> A strongly competitive randomized paging algorithm. </title> <journal> Algorithmica, </journal> <volume> 6(6) </volume> <pages> 816-825, </pages> <year> 1991. </year> <month> - 5 </month> - 
Reference-contexts: An on-line strategy is said to be strongly competitive if it achieves the best possible competitive ratio [5, 6]. On-line paging and its competitiveness analysis have attracted substantial attention in the literature <ref> [4, 5, 8, 9] </ref>. Multipaging is a version of the paging problem that allows for more than one page to be requested in one step. All the pages referenced in one request must be simultaneously present in fast memory in order for the request to be satisfied. <p> Uniform multipaging was observed to be similar to traditional paging. However, paging and multipaging were not tied by a formal equivalence statement. As a consequence, multi-paging algorithms were analyzed from first principles, and without using known facts from paging. Furthermore, paging has a strongly competitive randomized algorithm <ref> [8] </ref>, whereas no such algorithm was known for multipaging. In this note, we prove that Theorem 1 If there is a deterministic (randomized) c-competitive paging algorithm, then there is a deterministic (randomized) c-competitive multipaging algorithm. Consequently, competitiveness results for multipaging can be deduced from competitiveness results for paging. <p> Inequality (1) establishes that G is c-competitive, and the theorem is proved. 2 Theorem 1, the algorithm in <ref> [8] </ref>, and the lower bound in [4] yield the following Corollary 4 There is a randomized algorithm for the multipaging problem that is strongly competitive against an oblivious adversary. Acknowledgements We thank Martin Farach for proofreading this paper.
Reference: [9] <author> D. D. Sleator and R. E. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Communications of the ACM, </journal> <volume> 28 </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: The performance of on-line algorithms is often measured in terms of their competitive ratio, which is defined as the ratio of the algorithm cost over the cost of the optimum off-line strategy <ref> [5, 9] </ref>. An on-line strategy is said to be strongly competitive if it achieves the best possible competitive ratio [5, 6]. On-line paging and its competitiveness analysis have attracted substantial attention in the literature [4, 5, 8, 9]. <p> An on-line strategy is said to be strongly competitive if it achieves the best possible competitive ratio [5, 6]. On-line paging and its competitiveness analysis have attracted substantial attention in the literature <ref> [4, 5, 8, 9] </ref>. Multipaging is a version of the paging problem that allows for more than one page to be requested in one step. All the pages referenced in one request must be simultaneously present in fast memory in order for the request to be satisfied.
References-found: 9

