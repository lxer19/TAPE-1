URL: http://www.cs.utah.edu/~cs686/Previous/a97/interpreters.ps
Refering-URL: http://www.cs.utah.edu/~cs686/Previous/a97/
Root-URL: 
Title: The Structure and Performance of Interpreters  
Author: Theodore H. Romer, Dennis Lee, Geoffrey M. Voelker, Alec Wolman, Wayne A. Wong, Jean-Loup Baer, Brian N. Bershad, and Henry M. Levy 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: This paper examines interpreter performance by measuring and analyzing interpreters from both software and hardware perspectives. As examples, we measure the MIPSI, Java, Perl, and Tcl interpreters running an array of micro and macro benchmarks on a DEC Alpha platform. Our measurements of these interpreters relate performance to the complexity of the interpreter's virtual machine and demonstrate that native runtime libraries can play a key role in providing good performance. From an architectural perspective, we show that interpreter performance is primarily a function of the interpreter itself and is relatively independent of the application being interpreted. We also demonstrate that high-level interpreters' demands on processor resources are comparable to those of other complex compiled programs, such as gcc. We conclude that interpreters, as a class of applications, do not currently motivate special hardware support for increased performance. 
Abstract-found: 1
Intro-found: 1
Reference: [Adl-Tabatabai et al. 96] <author> Adl-Tabatabai, A., Langdale, G., Lucco, S., and Wahbe, R. </author> <title> Efficient and Language-Independent Mobile Programs. </title> <booktitle> In Proceedings of the 1996 ACM Symposium on Programming Languages Design and Implementation, </booktitle> <pages> pages 127-136, </pages> <month> May </month> <year> 1996. </year>
Reference: [Afzal et al. 96] <author> Afzal, T., Brenternitz, M., Kacher, M., Menyher, S., Om-merman, M., and Su, W. </author> <title> Motorola PowerPC Migration Tools Emulation and Transition. </title> <booktitle> In Digest of Papers, COMPCON '96, </booktitle> <pages> pages 145-150, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: For example, Java and Perl are now standard languages for building internet applications, while Tcl is commonly used for rapid development of interactive user interfaces. Interpreters also play a crucial role as binary emulators, enabling code to port directly from one architecture to another <ref> [Afzal et al. 96] </ref>. Such environments reflect the extent to which program function, ease of development, portability, and safety represent important concerns This research was supported by grants from the National Science Foundation (CCR-9401689, CCR-9200832, CDA-9123308, CCR-9632769), the Office of Naval Research (N00014-941-0559),the Digital EquipmentCorporationand the Intel Corporation.
Reference: [Alexander & Wortman 75] <author> Alexander, W. G. and Wortman, D. B. </author> <title> Static and Dynamic Characteristics of XPL Programs. </title> <journal> IEEE Computer, </journal> <volume> 8(11) </volume> <pages> 41-46, </pages> <month> November </month> <year> 1975. </year>
Reference-contexts: Early measurement studies of commercial minicomputer systems looked at instruction set usage and showed that only a small percentage of the processor's instruction set accounted for more than 80% of the dynamic instructions used in typical programs <ref> [Foster et al. 71, Alexander & Wortman 75, Elshoff 76] </ref>. Similar studies on CISCs provided the rationale for moving to RISC processors [Clark & Levy 82, Hennessy & Patterson 90].
Reference: [Andrews & Sand 92] <author> Andrews, K. and Sand, D. </author> <title> Migrating a CISC Computer Family onto RISC via Object Code Translation. </title> <booktitle> In Proceedings of the Fifth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 213-222, </pages> <month> October </month> <year> 1992. </year>
Reference: [Bell 73] <author> Bell, J. </author> <title> Threaded Code. </title> <journal> Communications of the ACM, </journal> <volume> 16(6) </volume> <pages> 370-372, </pages> <month> June </month> <year> 1973. </year>
Reference: [Calder et al. 94] <author> Calder, B., Grunwald, D., and Zorn, B. </author> <title> Quantifying Behavioral Differences Between C and C++ Programs. </title> <type> Technical Report CU-CS-698, </type> <institution> University of Colorado-Boulder, </institution> <month> January </month> <year> 1994. </year>
Reference: [Clark & Levy 82] <author> Clark, D. W. and Levy, H. M. </author> <title> Measurement and Analysis of Instruction Use on the VAX-11/780. </title> <booktitle> In Proceedings of the 9th Annual Symposium on Computer Architecture, </booktitle> <month> April </month> <year> 1982. </year>
Reference-contexts: Similar studies on CISCs provided the rationale for moving to RISC processors <ref> [Clark & Levy 82, Hennessy & Patterson 90] </ref>. More recently, researchers have looked at the interaction of the memory system and various object-oriented and functional languages [Calder et al. 94, Diwan et al. 95, Goncalves & Appel 95, Holzle & Ungar 95].
Reference: [Cmelik & Keppel 94] <author> Cmelik, R. F. and Keppel, D. Shade: </author> <title> A Fast Instruction-Set Simulator for Execution Profiling. </title> <booktitle> In Proceedings of the 1994 ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems, </booktitle> <pages> pages 128-137, </pages> <month> May </month> <year> 1994. </year>
Reference: [Deutsch & Schiffman 84] <author> Deutsch, L. P. and Schiffman, A. M. </author> <title> Efficient Implementation of the Smalltalk-80 System. </title> <booktitle> In Conference Record of the Eleventh Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 297-302, </pages> <address> Salt Lake City, Utah, </address> <month> January </month> <year> 1984. </year>
Reference: [Ditzel & Patterson 80] <author> Ditzel, D. and Patterson, D. </author> <title> Retrospective on High-level Language Computer Architecture. </title> <booktitle> In Proceedings of the 7th Annual Symposium on Computer Architecture, </booktitle> <pages> pages 97-104, </pages> <address> La Baule, France, </address> <month> June </month> <year> 1980. </year>
Reference: [Diwan et al. 95] <author> Diwan, A., Tarditi, D., and Moss, E. </author> <title> Memory System Performance of Programs with Intensive Heap Allocation. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 13(3) </volume> <pages> 244-273, </pages> <month> August </month> <year> 1995. </year>
Reference: [Elshoff 76] <author> Elshoff, J. </author> <title> An Analysis of Some Commercial PL/1 Programs. </title> <journal> IEEE Transactions on Software Engineering,2:113-120, </journal> <month> June </month> <year> 1976. </year>
Reference-contexts: Early measurement studies of commercial minicomputer systems looked at instruction set usage and showed that only a small percentage of the processor's instruction set accounted for more than 80% of the dynamic instructions used in typical programs <ref> [Foster et al. 71, Alexander & Wortman 75, Elshoff 76] </ref>. Similar studies on CISCs provided the rationale for moving to RISC processors [Clark & Levy 82, Hennessy & Patterson 90].
Reference: [Flynn 80] <author> Flynn, M. J. </author> <title> Directions and Issues in Architecture and Language. </title> <journal> IEEE Computer, </journal> <volume> 13(10) </volume> <pages> 5-22, </pages> <month> October </month> <year> 1980. </year>
Reference: [Foster et al. 71] <author> Foster, C. C., Gonter, R. H., and Riseman, E. M. </author> <title> Measures of Opcode Utilizations. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 13 </volume> <pages> 582-584, </pages> <month> May </month> <year> 1971. </year>
Reference-contexts: Early measurement studies of commercial minicomputer systems looked at instruction set usage and showed that only a small percentage of the processor's instruction set accounted for more than 80% of the dynamic instructions used in typical programs <ref> [Foster et al. 71, Alexander & Wortman 75, Elshoff 76] </ref>. Similar studies on CISCs provided the rationale for moving to RISC processors [Clark & Levy 82, Hennessy & Patterson 90].
Reference: [Goncalves & Appel 95] <author> Goncalves, M. and Appel, A. </author> <title> Cache Performance of Fast-Allocating Programs. </title> <booktitle> In Proceedings of the Seventh International Conference of Functional Programming and Computer Architecture, </booktitle> <pages> pages 293-305, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: MIPSI has been used to investigate architectural alternatives for garbage collection <ref> [Goncalves & Appel 95] </ref> and multithreaded processors [Tullsen et al. 95], and as a teaching tool in architecture and operating system classes.
Reference: [Hennessy & Patterson 90] <author> Hennessy, J. L. and Patterson, D. A. </author> <title> Computer Architecture: A Quantitative Approach. </title> <publisher> Morgan Kaufmann, </publisher> <address> Palo Alto, CA, </address> <year> 1990. </year>
Reference-contexts: Similar studies on CISCs provided the rationale for moving to RISC processors <ref> [Clark & Levy 82, Hennessy & Patterson 90] </ref>. More recently, researchers have looked at the interaction of the memory system and various object-oriented and functional languages [Calder et al. 94, Diwan et al. 95, Goncalves & Appel 95, Holzle & Ungar 95].
Reference: [Holzle & Ungar 95] <author> Holzle, U. and Ungar, D. </author> <booktitle> Do Object-Oriented Languages Need Special Hardware Support? In ECOOP '95 - Object-Orented Programming, </booktitle> <pages> pages 283-202. </pages> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1995. </year>
Reference: [Kane & Heinrich 92] <author> Kane, G. and Heinrich, J. </author> <title> MIPS RISC Architecture. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1992. </year>
Reference-contexts: Section 5 summarizes our measurements and results, and concludes the paper. 2 Interpreter Descriptions We examined four interpreters in our study: * MIPSI [Sirer 93] is an instruction-level emulator that executes MIPS R3000 <ref> [Kane & Heinrich 92] </ref> binaries compiled for the DEC Ultrix operating system. MIPSI has been used to investigate architectural alternatives for garbage collection [Goncalves & Appel 95] and multithreaded processors [Tullsen et al. 95], and as a teaching tool in architecture and operating system classes.
Reference: [Klint 81] <author> Klint, P. </author> <title> Interpretation Techniques. </title> <journal> Software Practice and Experience, </journal> <volume> 11(9) </volume> <pages> 963-973, </pages> <month> September </month> <year> 1981. </year>
Reference: [Maynard et al. 94] <author> Maynard, A. G., Donnelly, C. M., and Olszewski, B. R. </author> <title> Contrasting Characteristics and Cache Performance of Technical and Multi-user Commercial Workloads. </title> <booktitle> In Proceedings of the Sixth International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 145-156, </pages> <address> San Jose, California, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: More recently, researchers have looked at the interaction of the memory system and various object-oriented and functional languages [Calder et al. 94, Diwan et al. 95, Goncalves & Appel 95, Holzle & Ungar 95]. Researchers have also studied the interaction of particular classes of applications with architecture: for example, <ref> [Maynard et al. 94] </ref> and [Uhlig et al. 95] studied the memory system behavior of commercial and productivity applications. In a similar vein, we investigate the interaction of interpreters with modern architectures and show how interpreted applications use the facilities provided by interpreters.
Reference: [Meyers 82] <author> Meyers, G. J. </author> <booktitle> Advances in Computer Architecture. </booktitle> <publisher> Wiley, </publisher> <address> NY, </address> <year> 1982. </year>
Reference: [Moon 87] <author> Moon, D. A. </author> <title> Symbolics Architecture. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 43-54, </pages> <month> January </month> <year> 1987. </year>
Reference: [Ousterhout 94] <author> Ousterhout, J. </author> <title> Tcl and the Tk Toolkit. </title> <address> Addision-Wesley, Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Perl programs are not interpreted directly, but are compiled at startup time into an internal representation of the source program. Perl performs this compilation step each time a program is invoked. * Tcl is an embeddable command language that allows applications to be customized with a single scripting language <ref> [Ousterhout 94] </ref>. Tcl is also used as a stand-alone programming environment, providing a programming language interface that includes basic functionality comparable to that found in Perl, as well as mechanisms for easily extending the interpreter with compiled application-specific commands.
Reference: [Ousterhout 96] <institution> Ousterhout, J. What's Happening at Sun Labs. </institution> <note> http://www.sunlabs.com/research/tcl/team.html, April 1996. </note>
Reference-contexts: For the interpreters we studied, however, it is clear that significant potential still exists for improvement through software means. For example, future implementations of Java and Tcl may involve more sophisticated compiling and run-time code generation <ref> [Symantec Corporation 96, Ousterhout 96] </ref>.
Reference: [Sirer 93] <author> Sirer, E. G. </author> <title> Measuring Limits of Fine-Grain Parallelism. </title> <institution> Princeton University Senior Project, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Section 5 summarizes our measurements and results, and concludes the paper. 2 Interpreter Descriptions We examined four interpreters in our study: * MIPSI <ref> [Sirer 93] </ref> is an instruction-level emulator that executes MIPS R3000 [Kane & Heinrich 92] binaries compiled for the DEC Ultrix operating system.
Reference: [Sites et al. 92] <author> Sites, R. L., Chernoff, A., Kirck, M. B., Marks, M. P., and Robinson, S. G. </author> <title> Binary Translation. </title> <journal> Digital Technical Journal, </journal> <volume> 4(4) </volume> <pages> 137-152, </pages> <year> 1992. </year>
Reference: [Smith et al. 71] <author> Smith, W. R., Rice, R. R., Chesley, G. D., Laliotis, T. A., Lundstrom, S. F., Chalhoun, M. A., Gerould, L. D., and Cook, T. C. </author> <title> SYMBOL: A Large Experimental System Exploring Major Hardware Replacement of Software. </title> <booktitle> In Proceedings AFIPS Spring Joint Computer Conference, </booktitle> <pages> pages 601-616, </pages> <year> 1971. </year>
Reference: [Srivastava & Eustace 94] <author> Srivastava, A. and Eustace, A. </author> <title> ATOM: A System for Building Customized Program Analysis Tools. </title> <booktitle> In Proceedings of the 1994 ACM Symposium on Programming Languages Design and Implementation, </booktitle> <pages> pages 196-205. </pages> <publisher> ACM, </publisher> <year> 1994. </year>
Reference-contexts: Finally, we show how the memory model that each interpreter presents can affect overall performance. All of our measurements were performed on 175-MHz DEC Alpha 3000/300X workstations running Digital Unix 3.2. Instrumentation data and traces were gathered using ATOM <ref> [Srivastava & Eustace 94] </ref>, a binary-rewriting tool from DEC WRL. Explicit timings and cycle counts were gathered by modifying interpreter source to sample the Alpha cycle counter.
Reference: [Sun Microsystems 95] <author> Sun Microsystems. </author> <title> The Java Virtual Machine Specification. </title> <note> http://java.sun.com/doc/vmspec/html/vmspec-1.html, 1995. </note>
Reference-contexts: Java also provides an extensive collection of native runtime libraries that define a high-level interface to routines for building graphical user interfaces. Instead of direct interpretation, Java source programs are compiled offline into byte codes defined by the Java Virtual Machine (JVM) <ref> [Sun Microsystems 95] </ref>. The Java interpreter operates directly on files containing JVM byte codes. * Perl is a scripting language designed for manipulating text, data, files, and processes [Wall & Schwartz 90].
Reference: [Symantec Corporation 96] <author> Symantec Corporation. </author> <note> Symantec Cafe. http://cafe.symantec.com, June 1996. </note>
Reference-contexts: For the interpreters we studied, however, it is clear that significant potential still exists for improvement through software means. For example, future implementations of Java and Tcl may involve more sophisticated compiling and run-time code generation <ref> [Symantec Corporation 96, Ousterhout 96] </ref>.
Reference: [Tullsen et al. 95] <author> Tullsen, D., Eggers, S., and Levy, H. </author> <title> Simultaneous Mul-tithreading: Maximizing On-Chip Parallelism. </title> <booktitle> In Proceedings of the 22nd Annual Symposium on Computer Architecture, </booktitle> <pages> pages 392-403, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: MIPSI has been used to investigate architectural alternatives for garbage collection [Goncalves & Appel 95] and multithreaded processors <ref> [Tullsen et al. 95] </ref>, and as a teaching tool in architecture and operating system classes. <p> We then focus on the behavior of the memory system and explore how different cache parameters affect interpreter performance. 4.1 Simulation Results To evaluate overall execution behavior, we use a detailed instruction-level simulator of a modern microprocessor based on the design of the DEC Alpha 21064 <ref> [Tullsen et al. 95] </ref>. The simulator processes all instructions and memory references of an executing program, and accounts for the sources of all processor stalls during instruction execution.
Reference: [Uhlig et al. 95] <author> Uhlig, R., Nagle, D., Mudge, T., Sechrest, S., and Emer, J. </author> <title> Instruction Fetching: Coping with Code Bloat. </title> <booktitle> In Proceedings of the 22nd Annual Symposium on Computer Architecture, </booktitle> <pages> pages 345-356, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Researchers have also studied the interaction of particular classes of applications with architecture: for example, [Maynard et al. 94] and <ref> [Uhlig et al. 95] </ref> studied the memory system behavior of commercial and productivity applications. In a similar vein, we investigate the interaction of interpreters with modern architectures and show how interpreted applications use the facilities provided by interpreters.
Reference: [Ungar & Patterson 87] <author> Ungar, D. and Patterson, D. </author> <title> At What Price Smalltalk. </title> <journal> IEEE Computer, </journal> <volume> 20(1) </volume> <pages> 67-74, </pages> <month> January </month> <year> 1987. </year>
Reference: [Wall & Schwartz 90] <author> Wall, L. and Schwartz, R. </author> <title> Programming Perl. </title> <publisher> O'Reilly and Associates, Inc., </publisher> <address> Sebastopol, CA, </address> <year> 1990. </year>
Reference-contexts: Instead of direct interpretation, Java source programs are compiled offline into byte codes defined by the Java Virtual Machine (JVM) [Sun Microsystems 95]. The Java interpreter operates directly on files containing JVM byte codes. * Perl is a scripting language designed for manipulating text, data, files, and processes <ref> [Wall & Schwartz 90] </ref>. Perl supports a variety of advanced programming abstractions useful for string and file processing, including regular expressions, a high-level I/O interface, automatic memory management, and associative arrays.
Reference: [Wilkinson 96] <author> Wilkinson, T. </author> <note> KAFFE A Virual Machine to Run Java(tm) Code. http://web.soi.city.ac.uk/homes/tim/kaffe/kaffe.html, 1996. </note>
References-found: 35

