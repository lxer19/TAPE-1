URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/iccd94.ASS.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/~vigyan/publications/index.html
Root-URL: http://www.cs.berkeley.edu
Email: fadnan,vigyan,gms,braytong@ic.eecs.berkeley.edu  
Title: Minimizing Interacting Finite State Machines: A Compositional Approach to Language Containment  
Author: Adnan Aziz Vigyan Singhal Gitanjali M. Swamy Robert K. Brayton 
Address: Berkeley, CA 94720, USA  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  
Abstract: We address the problem of compositional minimization of collections of interacting finite state machines that arise in the context of formal verification of hardware designs by language containment. Typically much of the behavior of the system is redundant with respect to a given property being verified, and so the system can be replaced by substantially simpler representations. We show that these redundancies can be captured by computing states that are input-output equivalent in the presence of fairness. Since computing complete equivalences is computationally expensive, we propose a spectrum of approximations which are efficiently computable. Directly minimizing the entire system requires forming the complete product machine, which can be very large, and hence we describe procedures that hierarchically minimize the system with respect to explicit and BDD representations. We present experimental results on some standard verification examples to show that our algorithms allow the product machine to be represented by very small implicit or explicit representations. We conclude with some further directions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. GUPTA, </author> <title> FORMAL HARDWARE VERIFICATION METHODS: A SURVEY, </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> VOL. 1, </volume> <pages> PP. 151-238, </pages> <month> OCT. </month> <year> 1993. </year>
Reference-contexts: Registers provide the state and logic gates define the transition dynamics and outputs. There are two popular approaches model checking using temporal logic and language containment. It has been shown these two approaches are complementary in nature and both have certain advantages; refer to <ref> [1] </ref> for an extensive survey of these and other paradigms for formal verification. fl This research was supported by SRC Grant 94-DC-324and NSF/DARPA Grant MIP-8719546 Large designs arising in practice are invariably the product of small interacting finite state machines.
Reference: [2] <author> O. GR UMBERG AND D. E. </author> <title> LONG, MODEL CHECKING AND MODULAR VERIFICATION, </title> <booktitle> IN Proc. of CONCUR '91: 2nd Inter. Conf. on Concurrency Theory (J. </booktitle> <editor> C. M. BAETEN AND J. F. GROOTE, EDS.), </editor> <volume> VOL. </volume> <booktitle> 527 OF Lecture Notes in Computer Science, </booktitle> <publisher> SPRINGER-VERLAG, </publisher> <month> AUG. </month> <year> 1991. </year>
Reference-contexts: Industrial experience indicates that few components, even in large designs, have more than a hundred states. However, taking the product of these components to form the product machine leads to the state explosion problem <ref> [2, 3] </ref>. Informally, this refers to the fact that given n Finite State Machines (FSMs) fM 1 ; M 2 ; : : : ; M n g, the number of states in the product machine is the product of the number of states in each individual machine. <p> Many other compositional strategies for forming a re s3 d/4 e/2 e/1 s1 d/3 d/1 STG duced product exist e.g. <ref> [7, 8, 2, 9] </ref>. Our major contributions are defining equivalences in the presence of fairness that are fast to compute, using the property to achieve greater minimization, and using knowledge of equivalent states to derive dont care's to minimize the BDD representation for the system.
Reference: [3] <author> K. L. MCMILLAN, </author> <title> Symbolic Model Checking. </title> <publisher> KLUWER ACADEMIC PUBLISHERS, </publisher> <year> 1993. </year>
Reference-contexts: Industrial experience indicates that few components, even in large designs, have more than a hundred states. However, taking the product of these components to form the product machine leads to the state explosion problem <ref> [2, 3] </ref>. Informally, this refers to the fact that given n Finite State Machines (FSMs) fM 1 ; M 2 ; : : : ; M n g, the number of states in the product machine is the product of the number of states in each individual machine. <p> Coping with the explosion of states has been at the forefront of synthesis and verification. Binary Decision Diagrams (BDDs) are extensively used to implicitly represent states and transition relations. BDD-based methods are widely used for formal verification <ref> [3, 4] </ref>. However, on designs with many components these standard BDD-based techniques also reach their limit. The complexity of systems of interacting finite state machines has been investigated [5]. It was proved in [5] that such systems are substantially more difficult to synthesize and verify than single machines.
Reference: [4] <author> H. TOUATI, R. K. BRAYTON, AND R. P. KUR-SHAN, </author> <title> CHECKING LANGUAGE CONTAINMENT USING BDDS, </title> <booktitle> IN Proc. of Intl. Workshop on Formal Methods in VLSI Design, </booktitle> <address> (MIAMI, FL), </address> <month> JAN. </month> <year> 1990. </year>
Reference-contexts: Coping with the explosion of states has been at the forefront of synthesis and verification. Binary Decision Diagrams (BDDs) are extensively used to implicitly represent states and transition relations. BDD-based methods are widely used for formal verification <ref> [3, 4] </ref>. However, on designs with many components these standard BDD-based techniques also reach their limit. The complexity of systems of interacting finite state machines has been investigated [5]. It was proved in [5] that such systems are substantially more difficult to synthesize and verify than single machines.
Reference: [5] <author> A. AZIZ AND R. K. BRAYTON, </author> <title> VERIFYING INTERACT--ING FINITE STATE MACHINES, </title> <type> TECH. REP. </type> <institution> UCB/ERL M93/52, ELECTRONICS RESEARCH LAB, UNIV. OF CALIFORNIA, BERKELEY, </institution> <address> CA 94720, </address> <month> JULY </month> <year> 1993. </year>
Reference-contexts: BDD-based methods are widely used for formal verification [3, 4]. However, on designs with many components these standard BDD-based techniques also reach their limit. The complexity of systems of interacting finite state machines has been investigated <ref> [5] </ref>. It was proved in [5] that such systems are substantially more difficult to synthesize and verify than single machines. We propose strategies to cope with this problem of combinatorial explosion of state space. <p> BDD-based methods are widely used for formal verification [3, 4]. However, on designs with many components these standard BDD-based techniques also reach their limit. The complexity of systems of interacting finite state machines has been investigated <ref> [5] </ref>. It was proved in [5] that such systems are substantially more difficult to synthesize and verify than single machines. We propose strategies to cope with this problem of combinatorial explosion of state space. <p> Such a path corresponds to behavior generated by the system which is not in L P i.e. it is a witness to the failure of the property. 3 Compositional Minimization Theory 3.1 Introduction The intractability results proved in <ref> [5] </ref> do not immediately mean that formal verification of large designs is infeasible. Rather, they imply the need for heuristics for dealing with the state explosion problem. In particular, the observation that much of the design is redundant with respect to individual properties can be exploited. <p> In the absence of unreachable states, T max-1 equals T max-2 , and they are in fact both maximum. The above expressions give maximal and minimal bounds on the transition structure that preserve behavioral equivalence; refer to <ref> [5] </ref> for a proof. Given the range of BDDs possible for the transition relation, our objective at this stage is to compute a small BDD within that range. There is no known efficient method to solve this problem. <p> Since our experiments pertain to the language containment model, we start with the component which represents the property. Then we sequence the other components in the order in which they are connected to the property as described in <ref> [5] </ref>. We ran our experiments on a series of examples, including both commonly cited verification benchmarks, and examples from industry. For each example we compute statistics for both the explicit and the implicit representa-tions. Results for minimizing explicit representations are reported in table 3.
Reference: [6] <author> A. AZIZ, T. R. SHIPLE, V. SINGHAL, R. K. BRAYTON, AND A. L. SANGIOVANNI-VINCENTELLI, </author> <title> FORMULA-DEPENDENT EQUIVALENCE FOR COMPOSITIONAL CTL MODEL CHECKING, </title> <booktitle> IN Proc. of the Computer Aided Verification Conf., </booktitle> <year> 1994. </year>
Reference-contexts: We describe our approach in detail for the language containment paradigm of formal verification; we briefly suggest extensions of our approach to the model checking paradigm, details of which are available in <ref> [6] </ref>. Many other compositional strategies for forming a re s3 d/4 e/2 e/1 s1 d/3 d/1 STG duced product exist e.g. [7, 8, 2, 9]. <p> A large body of literature exists on synthesizing interacting finite state machines [23, 24]; these results should provide a mechanism for approximating the environment and thus allow more minimization. We have developed the theory behind compositional minimization with respect to properties expressed as CTL formula in <ref> [6] </ref>; we plan to implement a model checker which embodies these ideas. It is widely believed that verification procedures that require explicit enumeration of the state space are not feasible because of the state explosion problem; this is the primary reason for the advent of BDD based techniques.
Reference: [7] <author> D. E. </author> <title> LONG, Model Checking, </title> <type> Abstraction and Compositional Verification . PHD THESIS, </type> <institution> CARNEGIE MEL-LON UNIVERSITY, </institution> <address> PITTSBURGH, PA, </address> <month> JULY </month> <year> 1993. </year>
Reference-contexts: Many other compositional strategies for forming a re s3 d/4 e/2 e/1 s1 d/3 d/1 STG duced product exist e.g. <ref> [7, 8, 2, 9] </ref>. Our major contributions are defining equivalences in the presence of fairness that are fast to compute, using the property to achieve greater minimization, and using knowledge of equivalent states to derive dont care's to minimize the BDD representation for the system.
Reference: [8] <author> M. CHIODO, T. R. SHIPLE, AND A. L. SANGIOVANNI-VINCENTELLI, </author> <title> AUTOMATIC COMPOSITIONAL MINIMIZATION IN CTL MODEL CHECKING, </title> <booktitle> IN Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> PP. 172-178, </pages> <year> 1992. </year>
Reference-contexts: Many other compositional strategies for forming a re s3 d/4 e/2 e/1 s1 d/3 d/1 STG duced product exist e.g. <ref> [7, 8, 2, 9] </ref>. Our major contributions are defining equivalences in the presence of fairness that are fast to compute, using the property to achieve greater minimization, and using knowledge of equivalent states to derive dont care's to minimize the BDD representation for the system. <p> Suppose there is a transition T (s; i; o; s 0 ). Then a transition from t to s 0 under input i, and output o may be added. In the spirit of <ref> [8] </ref> we derive maximal don't care sets which we use to simplify the BDD representing the STG, using some new BDD minimization techniques [19]. 4.2 Bounds on the STG Let M = (S; r; I; O; T ) be an FSM, and * R (x) be the set of reached states,
Reference: [9] <author> A. BOUAJJANI, J. FERNANDEZ, AND N. HALBWACHS, </author> <title> MINIMAL MODEL GENERATION, </title> <booktitle> IN Proc. of CAV 1990 (E. </booktitle> <editor> CLARKE AND R. KURSHAN, EDS.), </editor> <volume> VOL. </volume> <booktitle> 531 OF Lecture Notes in Computer Science, </booktitle> <publisher> SPRINGER-VERLAG, </publisher> <year> 1990. </year>
Reference-contexts: Many other compositional strategies for forming a re s3 d/4 e/2 e/1 s1 d/3 d/1 STG duced product exist e.g. <ref> [7, 8, 2, 9] </ref>. Our major contributions are defining equivalences in the presence of fairness that are fast to compute, using the property to achieve greater minimization, and using knowledge of equivalent states to derive dont care's to minimize the BDD representation for the system.
Reference: [10] <author> R. P. KURSHAN, </author> <title> Automata-Theoretic Verification of Coordinating Processes. </title> <publisher> PRINCETON UNIVERSITY PRESS, </publisher> <year> 1993. </year> <note> TO APPEAR. </note>
Reference-contexts: observable out puts. * The transition relation of the product is defined by the requirement that the transition in each component M i satisfies T i , and that the input and output assignments be consistent; it is the conjunction of the component transition relations in an appropriate boolean algebra <ref> [10] </ref>. Intuitively, we are dealing with interacting Mealy machines. The definition of the product machine is motivated by the physical basis for hardware: (1) wire values must be consistent, (2) registers are triggered by common clock, and so all machines change state synchronously. <p> Verifying that the property holds of the system consists of checking that all system behavior is acceptable, i.e. checking that L S L P . In the paradigm proposed by Kurshan <ref> [10] </ref>, the complement of the set of acceptable output traces L c P is defined by a monitor FSM with a fairness condition. The monitor has no outputs, and its inputs are the outputs of the system.
Reference: [11] <author> A. AZIZ, V. SINGHAL, G. M. SWAMY, AND R. K. BRAY-TON, </author> <title> MINIMIZING INTERACTING FINITE STATE MACHINES, </title> <type> TECH. REP. </type> <institution> UCB/ERL M93/68, ELECTRONICS RESEARCH LAB, UNIV. OF CALIFORNIA, </institution> <address> BERKE-LEY, CA 94720, </address> <month> SEPT. </month> <year> 1993. </year>
Reference-contexts: Another approach is to incremen tally form the product by multiplying in one machine at a time and minimizing the incremental product at each stage. Details are available in <ref> [11] </ref>. 3.2 Capturing Redundancy When the system is represented explicitly by its state transition graph, the number of states is a measure of the complexity of the system. Therefor, identifying equivalent states provides a mechanism for finding redundancy - equivalent states can be replaced by a single representative state.
Reference: [12] <author> M. C. BROWNE, E. M. CLARKE, AND O. GR UMBERG, </author> <title> CHARACTERIZING KRIPKE STRUCTURES IN TEMPORAL LOGIC, </title> <type> TECH. REP. </type> <institution> CMU-CS-87-104, DEPARTMENT OF COMPUTER SCIENCE, CARNEGIE MELLON UNIVERSITY, </institution> <year> 1987. </year>
Reference-contexts: It is known that states that are bisimulation equivalent are exactly those that satisfy the same set of properties expressible by formulae in the logic CTL <ref> [12] </ref>. Similarly, states that have identical input-output (I/O) behavior will agree on all properties expressible in the language containment paradigm.
Reference: [13] <author> J. E. HOPCROFT AND J. D. ULLMAN, </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> ADDISON-WESLEY, </publisher> <year> 1979. </year>
Reference-contexts: Assume without loss of generality that s has a fair path on input producing . Furthermore, by an extension of the pumping lemma <ref> [13] </ref>, can be taken to be ultimately periodic (i.e. of the form i i i 2 : : : i k (i k+1 : : : i n ) ! ); simi larly for .
Reference: [14] <author> A. P. SISTLA, M. Y. VARDI, AND P. L. WOLPER, </author> <title> THE COMPLEMENTATION PROBLEM FOR B UCHI AUTOMATA, WITH APPLICATIONS TO TEMPORAL LOGIC, </title> <journal> Theoretical Computer Science, </journal> <volume> VOL. 49, </volume> <pages> PP. 217-237, </pages> <year> 1987. </year>
Reference-contexts: no external inputs or outputs, and there are only two equivalence classes states from which there is a fair path, and states from which there is no fair path. 3.3 Efficient Approximations to E I/O-fair Deciding if two states in an FSM with fairness are E I/O-fair equivalent is PSPACE-complete <ref> [14] </ref>. This motivates the search for conservative approximations to E I/O-fair equivalence which are efficiently computable. Park defines the notion of bisimulation [15], which can be viewed as a structural equivalence on the states of an FSM without fairness conditions.
Reference: [15] <author> R. MILNER, </author> <title> Communication and Concurrency. </title> <address> NEW YORK: </address> <publisher> PRENTICE HALL, </publisher> <year> 1989. </year>
Reference-contexts: This motivates the search for conservative approximations to E I/O-fair equivalence which are efficiently computable. Park defines the notion of bisimulation <ref> [15] </ref>, which can be viewed as a structural equivalence on the states of an FSM without fairness conditions.
Reference: [16] <author> A. AZIZ, V. SINGHAL, F. BALARIN, R. K. BRAY-TON, AND A. L. SANGIOVANNI-VINCENTELLI, </author> <title> EQUIVALENCES FOR FAIR KRIPKE STRUCTURES, </title> <booktitle> IN International Colloquium on Automata, Languages and Programming, </booktitle> <publisher> SPRINGER VERLAG, </publisher> <month> JULY </month> <year> 1994. </year>
Reference-contexts: on input and output such that E fair-bis (; t ) , and 2. 9 fair path t starting at t on input and output implies 9 fair path starting at s on input and output such that E fair-bis (t; ) Theoretical properties of this equivalence are described in <ref> [16] </ref>. It is is a conservative approximation to I/O-equivalence. We have not been able to come up with a polynomial time algorithm for computing this equivalence, and we conjecture that it is PSPACE-complete to decide. Dill [17] gives techniques for language containment by simulation relations for Buchi automaton.
Reference: [17] <author> D. L. DILL, A. J. HU, AND H. WONG-TOI, </author> <title> CHECKING FOR LANGUAGE INCLUSION USING SIMULATION PREORDER, </title> <booktitle> IN Proc. of the Third Workshop on Computer-Aided Verification, </booktitle> <year> 1991. </year>
Reference-contexts: It is is a conservative approximation to I/O-equivalence. We have not been able to come up with a polynomial time algorithm for computing this equivalence, and we conjecture that it is PSPACE-complete to decide. Dill <ref> [17] </ref> gives techniques for language containment by simulation relations for Buchi automaton. We extend his definitions to equivalence in the presence of fairness.
Reference: [18] <author> A. AZIZ, F. BALARIN, R. K. BRAYTON, S.-T. CHENG, R. HOJATI, T. KAM, S. C. KRISHNAN, R. K. RAN-JAN, A. L. SANGIOVANNI-VINCENTELLI, T. R. SHIPLE, V. SINGHAL, S. TASIRAN, AND H.-Y. WANG, HSIS: </author> <title> A BDD-BASED ENVIRONMENT FOR FORMAL VERIFICATION, </title> <booktitle> IN Proc. of the Design Automation Conf., </booktitle> <month> JUNE </month> <year> 1994. </year>
Reference-contexts: The relation T S fi I fi O fi S is represented by its characteristic function T (x; i; o; y) = 1 $ (x; i; o; y) 2 T . We have developed a BDD based hierarchical verification tool at Berkeley called HSIS <ref> [18] </ref>. The size of the BDD for a subset of f0; 1g n bears no correlation to the cardinality of the set, and hence given an equivalence relation on the states, it is not sufficient to take the quotient in order to minimize the BDD representation of the system.
Reference: [19] <author> T. R. SHIPLE, R. HOJATI, A. L. SANGIOVANNI-VINCENTELLI, AND R. K. BRAYTON, </author> <title> HEURISTIC MINIMIZATION OF BDDS USING DON'T CARES, </title> <booktitle> IN Proc. of the Design Automation Conf., </booktitle> <month> JUNE </month> <year> 1994. </year>
Reference-contexts: Then a transition from t to s 0 under input i, and output o may be added. In the spirit of [8] we derive maximal don't care sets which we use to simplify the BDD representing the STG, using some new BDD minimization techniques <ref> [19] </ref>. 4.2 Bounds on the STG Let M = (S; r; I; O; T ) be an FSM, and * R (x) be the set of reached states, and * E (x; y) be an equivalence relation on the state space Given any arbitrary equivalence relation E S fi S ex-pressed <p> There is no known efficient method to solve this problem. Several heuristic methods exist, among the most common are the constrain and restrict heuristics [21]. We use a version of this heuristic <ref> [19] </ref>. Given a function and a care set, it returns a BDD between f c and f + c, which is chosen to have a small size. <p> Finally we report the reductions obtained when both equivalent state pairs and reached states are used minimize the BDD for the transition relation at each iteration. To minimize the BDDs using don't care information, we use techniques in <ref> [19] </ref> (these are based on methods described in [21]). These techniques are currently not very robust (for example, sometimes using a strictly larger don't care set for the same representation set, the resulting BDD is larger than the one obtained by using the smaller don't care set).
Reference: [20] <author> B. LIN, </author> <title> Synthesis of VLSI Design with Symbolic Techniques. </title> <type> PHD THESIS, </type> <institution> UNIVERSITY OF CALIFORNIA BERKELEY, ELECTRONICS RESEARCH LABORATORY, COLLEGE OF ENGINEERING, UNIVERSITY OF CALI-FORNIA, BERKELEY, </institution> <address> CA 94720, </address> <year> 1991. </year>
Reference-contexts: STG Let M = (S; r; I; O; T ) be an FSM, and * R (x) be the set of reached states, and * E (x; y) be an equivalence relation on the state space Given any arbitrary equivalence relation E S fi S ex-pressed as a BDD, Lin <ref> [20] </ref> defines the cproject operator, which is an efficient BDD function returning a set C (x) S containing exactly one element from each equivalence class of E . Elements of C will be referred to as representative elements.
Reference: [21] <author> O. COUDERT AND J. C. MADRE, </author> <title> A UNIFIED FRAMEWORK FOR THE FORMAL VERIFICATION OF SEQUENTIAL CIRCUITS, </title> <booktitle> IN Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> PP. 126-129, </pages> <month> NOV. </month> <year> 1990. </year>
Reference-contexts: Given the range of BDDs possible for the transition relation, our objective at this stage is to compute a small BDD within that range. There is no known efficient method to solve this problem. Several heuristic methods exist, among the most common are the constrain and restrict heuristics <ref> [21] </ref>. We use a version of this heuristic [19]. Given a function and a care set, it returns a BDD between f c and f + c, which is chosen to have a small size. <p> Finally we report the reductions obtained when both equivalent state pairs and reached states are used minimize the BDD for the transition relation at each iteration. To minimize the BDDs using don't care information, we use techniques in [19] (these are based on methods described in <ref> [21] </ref>). These techniques are currently not very robust (for example, sometimes using a strictly larger don't care set for the same representation set, the resulting BDD is larger than the one obtained by using the smaller don't care set). Improved BDD minimization techniques will enhance our results.
Reference: [22] <author> R. HOJATI, V. SINGHAL, AND R. K. BRAYTON, </author> <title> EDGE-STREETT/EDGE-RABIN AUTOMATA ENVIRONMENT FOR FORMAL VERIFICATION USING LANGUAGE CONTAINMENT, </title> <type> TECH. REP. </type> <note> SRC PUB C93284, </note> <institution> SEMICONDUCTOR RESEARCH CORP., </institution> <type> 79 ALEXANDER DR., BUILDING 4401, SUITE 300, </type> <address> P. O. BOX 12053, RESEARCH TRIANGLE PARK, NC 27709, </address> <year> 1993. </year>
Reference-contexts: 462 1,888 idlc.1 6,621 17,336 3,951 13,268 44 91 Table 4: Results on BDD minimization also see table 2 5 Conclusion and Future Work An efficient way of expressing and computing property verification through language containment is to use Streett automata to express the fairness constraints and the property specifications <ref> [22] </ref>. We intend to implement the equivalence relation computations for Streett automata and evaluate their effectiveness. We also hope to investigate the effectiveness of the more general equivalence definitions (bisim-lc in Section 3.1).
Reference: [23] <author> J.-K. RHO, G. HACHTEL, AND F. SOMENZI, </author> <title> DON'T CARE SEQUENCES AND THE OPTIMIZATION OF INTERACTING FINITE STATE MACHINES, </title> <booktitle> IN Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> PP. 418-421, </pages> <month> NOV. </month> <year> 1991. </year>
Reference-contexts: We intend to implement the equivalence relation computations for Streett automata and evaluate their effectiveness. We also hope to investigate the effectiveness of the more general equivalence definitions (bisim-lc in Section 3.1). A large body of literature exists on synthesizing interacting finite state machines <ref> [23, 24] </ref>; these results should provide a mechanism for approximating the environment and thus allow more minimization. We have developed the theory behind compositional minimization with respect to properties expressed as CTL formula in [6]; we plan to implement a model checker which embodies these ideas.
Reference: [24] <author> Y. WATANABE AND R. K. BRAYTON, </author> <title> THE MAXIMUM SET OF PERMISSIBLE BEHAVIORS FOR FSM NETWORKS, </title> <booktitle> IN Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <year> 1993. </year>
Reference-contexts: We intend to implement the equivalence relation computations for Streett automata and evaluate their effectiveness. We also hope to investigate the effectiveness of the more general equivalence definitions (bisim-lc in Section 3.1). A large body of literature exists on synthesizing interacting finite state machines <ref> [23, 24] </ref>; these results should provide a mechanism for approximating the environment and thus allow more minimization. We have developed the theory behind compositional minimization with respect to properties expressed as CTL formula in [6]; we plan to implement a model checker which embodies these ideas.
References-found: 24

