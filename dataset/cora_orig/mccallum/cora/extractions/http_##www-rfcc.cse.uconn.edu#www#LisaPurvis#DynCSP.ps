URL: http://www-rfcc.cse.uconn.edu/www/LisaPurvis/DynCSP.ps
Refering-URL: http://www-rfcc.cse.uconn.edu/www/LisaHome.html
Root-URL: 
Email: E-Mail: lpurvis@wrc.xerox.com  
Title: Dynamic Constraint Satisfaction using Case-Based Reasoning Techniques  
Author: Lisa Purvis 
Address: 800 Phillips Road, 128-51E Webster, NY 14580  
Affiliation: Xerox Corporation,  
Abstract: The Dynamic Constraint Satisfaction Problem (DCSP) formalism has been gaining attention as a valuable and often necessary extension of the static CSP framework. Dynamic Constraint Satisfaction enables CSP techniques to be applied more extensively, since it can be applied in domains where the set of constraints and variables involved in the problem evolves with time. At the same time, the Case-Based Reasoning (CBR) community has been working on techniques by which to reuse existing solutions when solving new problems. We have observed that dynamic constraint satisfaction matches very closely the case-based reasoning process of case adaptation. These observations emerged from our previous work on combining CBR and CSP to achieve a constraint-based adaptation. This paper summarizes our previous results, describes the similarity of the challenges facing both DCSP and case adaptation, and shows how CSP and CBR can together begin to address these chal lenges.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Donnellan A. Goel, K. Ali and A. Garza. </author> <title> Multistrategy adaptive navigational path planning. </title> <booktitle> In IEEE Expert, </booktitle> <year> 1995. </year>
Reference-contexts: Another approach is case-based adaptation [18, 27], in which cases rather than rules provide the information necessary to adapt to new solutions. Finally, reuse of subcases (or portions of a solution) has been explored in several systems <ref> [2, 1, 25] </ref>. Yet another approach to increasing the effectiveness of adaptation is to decrease the need for adaptation by retrieving more adaptable cases [25].
Reference: 2. <author> D. Aha and K. Branting. </author> <title> Stratified case-based reasoning: Reusing hierarchical problem solving episodes. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <year> 1995. </year>
Reference-contexts: Another approach is case-based adaptation [18, 27], in which cases rather than rules provide the information necessary to adapt to new solutions. Finally, reuse of subcases (or portions of a solution) has been explored in several systems <ref> [2, 1, 25] </ref>. Yet another approach to increasing the effectiveness of adaptation is to decrease the need for adaptation by retrieving more adaptable cases [25].
Reference: 3. <author> R. Alterman. </author> <title> An adaptive planner. </title> <booktitle> In Proceedings of the Fifth National Conference on Artificial Intelligence, </booktitle> <year> 1986. </year>
Reference-contexts: These are problems such as design [21, 11, 10, 14], planning <ref> [3, 20] </ref>, and scheduling [17], where the problem characteristics evolve as time progresses. 5 Results and Observations from Combining CBR and CSP Through our previous work on combining CSP and CBR, we found that the challenges for dynamic CSP and case adaptation are the same.
Reference: 4. <author> Amit Bellicha. </author> <title> Maintenance of solution in a dynamic constraint satisfaction problem. </title> <booktitle> In Artificial Intelligence in Engineering, </booktitle> <year> 1994. </year>
Reference-contexts: Van Henten-ryck developed a technique for maintaining a solution to the CSP once the current solution has been disabled by a new constraint [12]. Bellicha has proposed a method by which to achieve a new solution as 'close' as possible to the previous one, with several criteria of closeness <ref> [4] </ref>. Verfaillie and Schiex describe a method by which to reuse a previous solution to produce a new one by making local changes on the previous one [29]. 2 The fundamental motivation for all of these approaches is that re-computing a solution each time a change occurs can be costly. <p> Significant effort is being placed on discovering ways by which to reuse solutions in DCSPs <ref> [4, 12, 29] </ref>. Similarly, one of the foundational principles of CBR is that reasoning by remembering is a natural and efficient way to solve new problems. Furthermore, both DCSP and CBR recognize the importance not only of reuse, but of efficient reuse.
Reference: 5. <author> Christian Bessiere. </author> <title> Arc-consistency in dynamic constraint satisfaction problems. </title> <booktitle> In Proceedings of the 9th National Conference of AAAI, </booktitle> <pages> pages 221 -226, </pages> <year> 1991. </year>
Reference-contexts: For instance, Bessiere has proposed a filtering technique which can achieve partial consistency in dynamic constraint networks <ref> [5] </ref>. Dechter and Dechter first described the DCSP, along with a method by which to achieve global consistency in constraint networks [9]. Van Henten-ryck developed a technique for maintaining a solution to the CSP once the current solution has been disabled by a new constraint [12].
Reference: 6. <author> J.G. Carbonell. </author> <title> Learning by analogy: Formulating and generalizing plans from past experience. </title> <booktitle> In Machine Learning: An Artificial Intelligence Approach, </booktitle> <year> 1983. </year>
Reference-contexts: This is contrary to the original goal of CBR of avoiding difficult knowledge acquisition issues by reasoning with past experiences. Several approaches to developing adaptation methods that decrease the need for domain specific adaptation rules have been developed. Reasoning with abstract rules has been explored <ref> [6, 16, 13] </ref>, but the rules can be difficult to apply without additional domain knowledge. Alternatively, derivational analogy can be used, which stores the method by which the problem was solved, and replays this method to solve new problems [7, 28].
Reference: 7. <author> J.G. Carbonell. </author> <title> Derivational analogy: A theory of reconstructive problem solving and expertise acquisition. </title> <booktitle> In Machine Learning: An Artificial Intelligence Approach, </booktitle> <year> 1986. </year>
Reference-contexts: Reasoning with abstract rules has been explored [6, 16, 13], but the rules can be difficult to apply without additional domain knowledge. Alternatively, derivational analogy can be used, which stores the method by which the problem was solved, and replays this method to solve new problems <ref> [7, 28] </ref>. Another approach is case-based adaptation [18, 27], in which cases rather than rules provide the information necessary to adapt to new solutions. Finally, reuse of subcases (or portions of a solution) has been explored in several systems [2, 1, 25].
Reference: 8. <author> Lawrence Davis. </author> <title> Handbook of Genetic Algorithms. </title> <publisher> Van Nostrand Reinhold Publishers, </publisher> <year> 1991. </year>
Reference-contexts: Delete the old population to make room for new population. 5. Evaluate new chromosomes and insert them into the population. 6. If time is up, stop and return the best chromosome; if not, go to 3. Fig. 7. Operation of a Genetic Algorithm <ref> [8] </ref> A GA operates by generating a population of chromosomes, evaluating each chromosome's fitness, creating new chromosomes, and applying selective mutation and recombination as the parent chromosomes mate. The fittest chromosomes are kept for the next generation, and the process repeats.
Reference: 9. <author> R. Dechter and A. Dechter. </author> <title> Belief maintenance in dynamic constraint networks. </title> <booktitle> In Proceedings of the Sixth National Conference on Artificial Intelligence, </booktitle> <pages> pages 37 - 42, </pages> <year> 1988. </year>
Reference-contexts: For these reasons, the dynamic CSP formalism has been developed, which relaxes the assumption that the problem variables and constraints remain fixed. The DCSP is a sequence of CSPs, where each one differs from the previous one by the addition or removal of some constraints <ref> [9] </ref>. 2.2 Reusing Solutions for DCSP Since solving a CSP is a computationally expensive task, much work in DCSP is focused on finding efficient methods by which to solve subsequent CSPs after a change in the constraint network. <p> For instance, Bessiere has proposed a filtering technique which can achieve partial consistency in dynamic constraint networks [5]. Dechter and Dechter first described the DCSP, along with a method by which to achieve global consistency in constraint networks <ref> [9] </ref>. Van Henten-ryck developed a technique for maintaining a solution to the CSP once the current solution has been disabled by a new constraint [12].
Reference: 10. <author> E. Domeshek and J. Kolodner. </author> <title> A case-based design aid for architecture. </title> <booktitle> In Artificial Intelligence in Design '92, </booktitle> <year> 1992. </year> <month> 13 </month>
Reference-contexts: These are problems such as design <ref> [21, 11, 10, 14] </ref>, planning [3, 20], and scheduling [17], where the problem characteristics evolve as time progresses. 5 Results and Observations from Combining CBR and CSP Through our previous work on combining CSP and CBR, we found that the challenges for dynamic CSP and case adaptation are the same.
Reference: 11. <author> A. Goel. </author> <title> Integration of Case-Based Reasoning and Model-Based Reasoning for Adaptive Design Problem Solving. </title> <type> PhD thesis, </type> <institution> Ohio State University, </institution> <year> 1989. </year>
Reference-contexts: These are problems such as design <ref> [21, 11, 10, 14] </ref>, planning [3, 20], and scheduling [17], where the problem characteristics evolve as time progresses. 5 Results and Observations from Combining CBR and CSP Through our previous work on combining CSP and CBR, we found that the challenges for dynamic CSP and case adaptation are the same.
Reference: 12. <author> Pascal Van Hentenryck. </author> <title> Incremental constraint satisfaction in logic programming. </title> <booktitle> In Seventh International Conference on Logic Programming, </booktitle> <pages> pages 189 - 202, </pages> <year> 1990. </year>
Reference-contexts: Dechter and Dechter first described the DCSP, along with a method by which to achieve global consistency in constraint networks [9]. Van Henten-ryck developed a technique for maintaining a solution to the CSP once the current solution has been disabled by a new constraint <ref> [12] </ref>. Bellicha has proposed a method by which to achieve a new solution as 'close' as possible to the previous one, with several criteria of closeness [4]. <p> Significant effort is being placed on discovering ways by which to reuse solutions in DCSPs <ref> [4, 12, 29] </ref>. Similarly, one of the foundational principles of CBR is that reasoning by remembering is a natural and efficient way to solve new problems. Furthermore, both DCSP and CBR recognize the importance not only of reuse, but of efficient reuse.
Reference: 13. <author> T.R. Hinrichs. </author> <title> Problem Solving in Open Worlds: A Case Study in Design. </title> <publisher> Lawrence Erlbaum, </publisher> <year> 1992. </year>
Reference-contexts: This is contrary to the original goal of CBR of avoiding difficult knowledge acquisition issues by reasoning with past experiences. Several approaches to developing adaptation methods that decrease the need for domain specific adaptation rules have been developed. Reasoning with abstract rules has been explored <ref> [6, 16, 13] </ref>, but the rules can be difficult to apply without additional domain knowledge. Alternatively, derivational analogy can be used, which stores the method by which the problem was solved, and replays this method to solve new problems [7, 28].
Reference: 14. <author> Kefeng Hua and Boi Faltings. </author> <title> Exploring case-based building design cadre. </title> <booktitle> In Artificial Intelligence in Engineering Design, Analysis, and Manufacturing, </booktitle> <year> 1993. </year>
Reference-contexts: These are problems such as design <ref> [21, 11, 10, 14] </ref>, planning [3, 20], and scheduling [17], where the problem characteristics evolve as time progresses. 5 Results and Observations from Combining CBR and CSP Through our previous work on combining CSP and CBR, we found that the challenges for dynamic CSP and case adaptation are the same.
Reference: 15. <author> Kefeng Hua and Boi Faltings. </author> <title> Exploring case-based building design cadre. </title> <booktitle> Artificial Intelligence in Engineering Design, Analysis and Manufacturing (AI EDAM), </booktitle> <year> 1993. </year>
Reference-contexts: Controlled Adaptation Controlling adaptation can be difficult, as observed by Hua and Faltings <ref> [15] </ref> where they observed that changing one feature during the adaptation process may result in non-convergent behavior for the adaptation a problem they term the assimilation problem. CSP provides a technique by which to ensure convergence on a solution, thereby controlling the adaptation process.
Reference: 16. <author> P. Koton. </author> <title> Reasoning about evidence in causal explanation. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 256-261, </pages> <year> 1988. </year>
Reference-contexts: This is contrary to the original goal of CBR of avoiding difficult knowledge acquisition issues by reasoning with past experiences. Several approaches to developing adaptation methods that decrease the need for domain specific adaptation rules have been developed. Reasoning with abstract rules has been explored <ref> [6, 16, 13] </ref>, but the rules can be difficult to apply without additional domain knowledge. Alternatively, derivational analogy can be used, which stores the method by which the problem was solved, and replays this method to solve new problems [7, 28].
Reference: 17. <author> M. Fromherz L. Getoor, G. Ottosson and B. Carlson. </author> <title> Effective redundant constraints for online scheduling. </title> <booktitle> In Proceedings of AAAI'97, </booktitle> <year> 1997. </year>
Reference-contexts: These are problems such as design [21, 11, 10, 14], planning [3, 20], and scheduling <ref> [17] </ref>, where the problem characteristics evolve as time progresses. 5 Results and Observations from Combining CBR and CSP Through our previous work on combining CSP and CBR, we found that the challenges for dynamic CSP and case adaptation are the same.
Reference: 18. <author> David Leake. </author> <title> Toward a computer model of memory search strategy learning. </title> <booktitle> In Proceedings of the Sixth Annual Conference of the Cognitive Science Society, </booktitle> <year> 1994. </year>
Reference-contexts: Alternatively, derivational analogy can be used, which stores the method by which the problem was solved, and replays this method to solve new problems [7, 28]. Another approach is case-based adaptation <ref> [18, 27] </ref>, in which cases rather than rules provide the information necessary to adapt to new solutions. Finally, reuse of subcases (or portions of a solution) has been explored in several systems [2, 1, 25].
Reference: 19. <author> David Leake. </author> <title> Cbr in context: The present and future. In Case Based Reasoning: Experiences, Lessons, and Future Directions, </title> <year> 1995. </year>
Reference-contexts: In short, it is sometimes called reasoning by remembering <ref> [19] </ref>. 3.1 Motivation for CBR To understand why dynamic CSP fits naturally into a CBR framework, we must first understand the motivation behind case-based reasoning. The motivation behind problem solving with CBR is based on two tenets of the world, as described by Leake [19]. <p> is sometimes called reasoning by remembering <ref> [19] </ref>. 3.1 Motivation for CBR To understand why dynamic CSP fits naturally into a CBR framework, we must first understand the motivation behind case-based reasoning. The motivation behind problem solving with CBR is based on two tenets of the world, as described by Leake [19]. The first is that the world is regular. This means that similar problems will have similar solutions, and leads us to the conclusion that solutions for similar problems are a useful starting point for new problem solving. <p> This is the adaptation component of the case based reasoning system, which adapts retrieved cases to fit new circumstances. Adaptation is often considered to be the most difficult problem in case based reasoning, but at the same time, it is also considered to be the most important <ref> [19] </ref>. Adaptation allows the case based reasoner to be more than just a storage and retrieval tool that leaves the final solution synthesis to the user. Rather, it can automatically integrate, adapt, or modify existing solutions to provide complete solutions to new problems. Effective case adaptation depends on several things.
Reference: 20. <author> K. Hammond M. Marks and T. </author> <title> Converse. Planning in an open world: A pluralistic approach. </title> <booktitle> In Proceedings of the Eleventh Annual Conference of the Cognitive Science Society, </booktitle> <year> 1989. </year>
Reference-contexts: These are problems such as design [21, 11, 10, 14], planning <ref> [3, 20] </ref>, and scheduling [17], where the problem characteristics evolve as time progresses. 5 Results and Observations from Combining CBR and CSP Through our previous work on combining CSP and CBR, we found that the challenges for dynamic CSP and case adaptation are the same.
Reference: 21. <author> D. Navinchandra. </author> <title> Case-based reasoning in cyclops, a design problem solver. </title> <booktitle> In Proceedings of the DARPA Case-Based Reasoning Workshop, </booktitle> <year> 1988. </year>
Reference-contexts: These are problems such as design <ref> [21, 11, 10, 14] </ref>, planning [3, 20], and scheduling [17], where the problem characteristics evolve as time progresses. 5 Results and Observations from Combining CBR and CSP Through our previous work on combining CSP and CBR, we found that the challenges for dynamic CSP and case adaptation are the same.
Reference: 22. <author> L. Purvis and S. Athalye. </author> <title> Towards improving case adaptability with a genetic algorithm. </title> <booktitle> In Proceedings of the Second International Conference on Case-Based Reasoning, </booktitle> <pages> pages 403-412, </pages> <year> 1997. </year>
Reference-contexts: To achieve this goal, we have begun to investigate augmenting our adaptation strategies with a genetic algorithm (GA) <ref> [22] </ref>. We have chosen a GA because of its ability to both operate with a progression towards an improved solution, and to examine multiple regions of the search space via crossover and mutation operators, thereby enabling an escape from initial local minima.
Reference: 23. <author> Lisa Purvis. </author> <title> Intelligent Design Problem Solving Using Case-Based and Constraint-Based Techniques. </title> <type> PhD thesis, </type> <institution> The University of Connecticut, </institution> <year> 1995. </year>
Reference-contexts: Our previous work on case adaptation showed a synergy between CSP and CBR, where CBR helped to make CSP problem solving more efficient, while CSP helped to formalize the case combination process <ref> [23, 24] </ref>. We also found that dynamic CSP encounters the same challenges as does case adaptation, and have begun to develop CBR techniques that can begin to address these challenges. We begin in Section 2 by reviewing DCSP, and continue in Section 3 with a brief overview of CBR. <p> Finally, reuse of subcases (or portions of a solution) has been explored in several systems [2, 1, 25]. Yet another approach to increasing the effectiveness of adaptation is to decrease the need for adaptation by retrieving more adaptable cases [25]. Our previous work <ref> [23] </ref> focused on formalizing the adaptation process and eliminating the need for domain-dependent adaptation rules by combining subcases using the minimum conflicts constraint satisfaction algorithm [26]. 4 Dynamic CSP and CBR What are the Similarities? There are numerous similarities between dynamic CSP and case adaptation. 4.1 Problem Solving is not Static <p> Our experiments with assembly sequence generation and configuration design problems showed that the minimum conflicts algorithm could not perform an efficient case combination when there were a large number of highly constrained, initially inconsistent edge variables <ref> [23] </ref>. This situation corresponds to that shown in Figure 2, where two sub-solutions are combined. Edge Variables consistent sub-caseconsistent sub-case Fig. 2. Difficult Case Adaptation Each sub-solution is individually consistent, since it came from the case base, but the two solutions are inconsistent with one another. <p> Increased Efficiency of Re-Solving First, our experiments showed that using solutions from the case base outperformed solving the CSP from random initial solutions. We ran experiments in both configuration design as well as assembly sequence generation, as described in detail in <ref> [23] </ref>. We compared the number of backtracks necessary to find a solution for the minimum-conflicts algorithm seeded with a greedy initialization, and seeded with solutions from the case base. <p> Thus, the experience of previous solutions can be re-used even in the first iteration of a dynamic CSP. Those sub-cases that best match the new larger problem can be retrieved and combined via the constraint-based adaptation algorithm we described in our previous work <ref> [23, 24] </ref>. Second, a similarity measure can be defined that will search the case base full of previously solved problems for those that are 'most similar' to the new problem.
Reference: 24. <author> Lisa Purvis and Pearl Pu. </author> <title> Adaptation using constraint satisfaction techniques. </title> <booktitle> In Proceedings of the First International Conference on Case-Based Reasoning, </booktitle> <address> Sesimbra, Portugal, </address> <pages> pages 289-300, </pages> <year> 1995. </year>
Reference-contexts: Our previous work on case adaptation showed a synergy between CSP and CBR, where CBR helped to make CSP problem solving more efficient, while CSP helped to formalize the case combination process <ref> [23, 24] </ref>. We also found that dynamic CSP encounters the same challenges as does case adaptation, and have begun to develop CBR techniques that can begin to address these challenges. We begin in Section 2 by reviewing DCSP, and continue in Section 3 with a brief overview of CBR. <p> We showed in our previous work on the system COMPOSER that in this way, CSP techniques can be used to enable a domain-independent adaptation of any problem that can be described as a discrete CSP <ref> [24] </ref>. Uniform Representation of Cases and Systematicity in Adaptation The systematic nature of CSP algorithms allows us to more efficiently combine several cases a topic that has been problematic in CBR thus far. <p> Thus, the experience of previous solutions can be re-used even in the first iteration of a dynamic CSP. Those sub-cases that best match the new larger problem can be retrieved and combined via the constraint-based adaptation algorithm we described in our previous work <ref> [23, 24] </ref>. Second, a similarity measure can be defined that will search the case base full of previously solved problems for those that are 'most similar' to the new problem.
Reference: 25. <author> B. Smyth and M. Keane. </author> <title> Experiments on adaptation-guided retrieval in case-based design. </title> <booktitle> In Proceedings of the First International Conference on Case-Based Reasoning, </booktitle> <pages> pages 313-324, </pages> <year> 1995. </year>
Reference-contexts: Another approach is case-based adaptation [18, 27], in which cases rather than rules provide the information necessary to adapt to new solutions. Finally, reuse of subcases (or portions of a solution) has been explored in several systems <ref> [2, 1, 25] </ref>. Yet another approach to increasing the effectiveness of adaptation is to decrease the need for adaptation by retrieving more adaptable cases [25]. <p> Finally, reuse of subcases (or portions of a solution) has been explored in several systems [2, 1, 25]. Yet another approach to increasing the effectiveness of adaptation is to decrease the need for adaptation by retrieving more adaptable cases <ref> [25] </ref>.
Reference: 26. <author> A. Philips Steven Minton, M. Johnston and P. Laird. </author> <title> Minimizing conflicts: A heuristic repair method for constraint satisfaction and scheduling problems. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> pages 161-205, </pages> <year> 1992. </year>
Reference-contexts: Our previous work [23] focused on formalizing the adaptation process and eliminating the need for domain-dependent adaptation rules by combining subcases using the minimum conflicts constraint satisfaction algorithm <ref> [26] </ref>. 4 Dynamic CSP and CBR What are the Similarities? There are numerous similarities between dynamic CSP and case adaptation. 4.1 Problem Solving is not Static The first similarity is the observation that in many real-world environments, problem solving is not a static activity.
Reference: 27. <author> K. Sycara. </author> <title> Using case-based reasoning for plan adaptation and repair. </title> <booktitle> In Proceedings of the DARPA Case-Based Reasoning Workshop, </booktitle> <year> 1988. </year>
Reference-contexts: Alternatively, derivational analogy can be used, which stores the method by which the problem was solved, and replays this method to solve new problems [7, 28]. Another approach is case-based adaptation <ref> [18, 27] </ref>, in which cases rather than rules provide the information necessary to adapt to new solutions. Finally, reuse of subcases (or portions of a solution) has been explored in several systems [2, 1, 25].
Reference: 28. <author> M. Veloso. </author> <title> Flexible strategy learning using analogical replay of problem solving episodes. In Case Based Reasoning: Experiences, Lessons and Future DIrections, </title> <year> 1995. </year>
Reference-contexts: Reasoning with abstract rules has been explored [6, 16, 13], but the rules can be difficult to apply without additional domain knowledge. Alternatively, derivational analogy can be used, which stores the method by which the problem was solved, and replays this method to solve new problems <ref> [7, 28] </ref>. Another approach is case-based adaptation [18, 27], in which cases rather than rules provide the information necessary to adapt to new solutions. Finally, reuse of subcases (or portions of a solution) has been explored in several systems [2, 1, 25].
Reference: 29. <author> G. Verfaillie and T. Schiex. </author> <title> Solution reuse in dynamic constraint satisfaction problems. </title> <booktitle> In Proceedings of the 12th National Conference on Artificial Intelligence, </booktitle> <pages> pages 307-312, </pages> <year> 1994. </year> <month> 14 </month>
Reference-contexts: Verfaillie and Schiex describe a method by which to reuse a previous solution to produce a new one by making local changes on the previous one <ref> [29] </ref>. 2 The fundamental motivation for all of these approaches is that re-computing a solution each time a change occurs can be costly. Therefore, the focus is on finding a method that can avoid unnecessary re-computation. <p> Significant effort is being placed on discovering ways by which to reuse solutions in DCSPs <ref> [4, 12, 29] </ref>. Similarly, one of the foundational principles of CBR is that reasoning by remembering is a natural and efficient way to solve new problems. Furthermore, both DCSP and CBR recognize the importance not only of reuse, but of efficient reuse. <p> In DCSP, this translates to minimizing the amount of re-solving when constraints are added or removed. 4 4.3 Stability of Subsequent Solutions can be Important As Verfaillie and Schiex pointed out <ref> [29] </ref>, when solving from scratch, the subsequent solutions are not guaranteed to be stable. That is, subsequent solutions may not have any relation to the initial solution. Stability can be very important for subsequent solutions of a dynamic CSP, as work may have already begun based on the previous solution.
References-found: 29

