URL: http://http.cs.berkeley.edu/~miyamoto/classes/spring98/cs265/expert/papers/ASPLOS.final.ps.gz
Refering-URL: http://http.cs.berkeley.edu/~miyamoto/classes/spring98/cs265/expert/index.html
Root-URL: http://www.cs.berkeley.edu
Title: References Dynamic Dependency Analysis of Ordinary Programs, Proc. of 19th ISCA, 1992. Memory Bandwidth Limitations
Author: [] T. M. Austin and G. S. Sohi, [] Doug Burger, Alain Kagi, and James R. Goodman, [] D. Callahan, S Carr, and K. Kennedy, [] D. Callahan, K. Kennedy, and A. Porterfield, [] S. Carr and K. Kennedy, [] T. Chen and J. Baer, . [] W. Y. Chen, S. A. Mahlke, P. P. Chang, and W. W. Hwu, [] C. Chi and H. Dietz, [] D. Gannon, W. Jalby, and K. Gallivan, [] J. L. Hennessy and D. A. Patterson, [] A. S. Huang and J. P. Shen, [] A. C. Klaiber and H. M. Levy, . [] G. D. McNiven and E. S. Davidson, [] T. C. Mowry, M. S. Lam, and A. Gupta, [] Anne Rogers and Kai Li, 
Date: October, 1996.  May 1996.  24(1), Jan. 1994.  12, September 12, 1994.  1992.  
Note: Page 10 of 10 To appear in ASPLOS-VII Proceedings,  Microprocessors, Proc. of 23rd ISCA,  and Experience, vol.  Proc. of PLDI, 1989. [9] Digital Equipment Corporation, Alpha 21164  Computing, vol 5, 1988. [11] G. F. Grohoski, Machine Organization of the IBM RISC System/6000 Processor, IBM Journal of Research and Development, Vol 34, Num 1, January 1990, pp. 37-58. [12] L. Gwennap, Digital Leads the Pack with 21164, Microprocessor Report, Vol 8, Num  Proc. of 5th ASPLOS,  6.0 Conclusion 7.0 Acknowledgment  
Abstract: 19] A. Srivastava and A. Eustace, ATOM: A System for Building Customized Program Analysis Tools, Proc. of PLDI, 1994. O traffic it generates is amortized by a longer running time to result in lower average traffic. The data spectrums for the other three benchmarks are somewhat similar. A larger input or longer running time (as in the case of applu) results in more longer-lived values. This causes the curve to flatten out at larger capacities. If the program is not an I/O intensive program, the curve flattens out with a smaller average I/O bandwidth. However, the basic shape of the spectrum does not change much. For the instruction stream, increasing the size of the input affects the spectrums even less. For small capacities, the curves remain the same as before. As the capacity increases, the train input curve starts to drop off as the traffic due to infrequently access parts of the program is amortized by the longer running time. Processors are increasing in complexity and aggressiveness. In order to continue to push the performance of microprocessor even higher, it is necessary to consider new methods of memory management. A good way to start is to gain a better understanding of programs intrinsic memory requirements. It is for this purpose that we introduce the bandwidth spectrum. The bandwidth spectrum is based on the efficient memory system, which has the partition insensitive property. This property makes it possible for one spectrum to describe the bandwidth requirement of a program at any level of the memory hierarchy for any combinations of capacities in the hierarchy. We show how the bandwidth spectrum can be used to evaluate a design space involving three variables--instruction issue rate, memory capacity and memory bandwidth. Although an efficient memory system may not be realized, assuming its existence serves two purposes. First, it provides a limit against which existing memory systems can be compared. And second, it provides a framework in which it is easy to compare the intrinsic memory requirements of programs. Using the bandwidth spectrum, we have decomposed memory traffic into two parts. One part is due to value reuse and can be reduced by increasing the capacity of local memories. The second part is due to I/O. This part cannot be reduced, except by reducing issue rate. As issue rate increases, microprocessor designers have increased the capacities of on-chip local memories to hold down off-chip traffic. As the bandwidth spectrum shows, this will have varying degrees of effectiveness for different programs, especially the floating-point programs. However, performance is eventually bound by I/O traffic. Most of todays microprocessors issue between one and four instructions per cycle. According to the bandwidth spectrums, this is a region in which bandwidth requirement scales linearly with the issue rate. However, as issue rate increases beyond eight instructions per cycle, the growth in bandwidth requirement can increase much more rapidly. This is a phenomenon that deserves further investigation. This research has been sponsored by NSF Grant CCR9423272 and an IBM Cooperative Fellowship. We would like to thank the anonymous reviewers for the valuable feedbacks that they gave us. We would also like to thank Gail Lyons of Digital Equipment Corporation for helping us with the ATOM tools. This research is powered by Intel donated Pentium Pros. 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> T. M. Austin and G. S. Sohi, </author> <title> Dynamic Dependency Analysis of Ordinary Programs, </title> <booktitle> Proc. of 19th ISCA, </booktitle> <year> 1992. </year>
Reference: [2] <author> Doug Burger, Alain Kagi, and James R. Goodman, </author> <title> Memory Bandwidth Limitations of Future Microprocessors, </title> <booktitle> Proc. of 23rd ISCA, </booktitle> <month> May </month> <year> 1996. </year>
Reference: [3] <author> D. Callahan, S Carr, and K. Kennedy, </author> <title> Improving Register Allocation for Subscripted Variables, </title> <booktitle> Proc. of PLDI, </booktitle> <year> 1990. </year>
Reference: [4] <author> D. Callahan, K. Kennedy, and A. Porterfield, </author> <title> Software Prefetching, </title> <booktitle> Proc. of 4th ASPLOS, </booktitle> <year> 1991. </year>
Reference: [5] <author> S. Carr and K. Kennedy, </author> <title> Scalar Replacement in the Presence of Conditional Control Flow, </title> <journal> Software--Practice and Experience, </journal> <volume> vol. 24(1), </volume> <month> Jan. </month> <year> 1994. </year>
Reference: [6] <author> T. Chen and J. Baer, </author> <title> Reducing Memory Latency via Non-blocking and Prefetching Caches, </title> <booktitle> Proc. of 5th ASPLOS, </booktitle> <year> 1992. </year>
Reference: [7] <author> W. Y. Chen, S. A. Mahlke, P. P. Chang, and W. W. Hwu, </author> <title> Data Access Microarchitectures for Superscalar Processors with Compiler-Assisted Data Prefetching, </title> <booktitle> Proc. of 25th MICRO, </booktitle> <year> 1991. </year>
Reference: [8] <author> C. Chi and H. Dietz, </author> <title> Unified Management of Registers and Cache Using Liveness and Cache Bypass, </title> <booktitle> Proc. of PLDI, </booktitle> <year> 1989. </year>
Reference: [9] <author> Digital Equipment Corporation, </author> <title> Alpha 21164 Microprocessor Hardware Reference Manual, Part Number: </title> <address> EC-QAEQA-TE, </address> <year> 1994. </year>
Reference: [10] <author> D. Gannon, W. Jalby, and K. Gallivan, </author> <title> Strategies for Cache and Local Memory Management by Global Program Transformation, </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol 5, </volume> <year> 1988. </year>
Reference: [11] <author> G. F. Grohoski, </author> <title> Machine Organization of the IBM RISC System/6000 Processor, </title> <journal> IBM Journal of Research and Development, </journal> <volume> Vol 34, Num 1, </volume> <month> January </month> <year> 1990, </year> <pages> pp. 37-58. </pages>
Reference: [12] <author> L. Gwennap, </author> <title> Digital Leads the Pack with 21164, </title> <type> Microprocessor Report, </type> <note> Vol 8, Num 12, September 12, </note> <year> 1994. </year>
Reference: [13] <author> J. L. Hennessy and D. A. Patterson, </author> <booktitle> Computer Architecture: </booktitle>
References-found: 13

