URL: http://www.cis.ohio-state.edu/volviz/Papers/1996/octree_mc.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/volviz/papers_subject.html
Root-URL: 
Title: Octree-Based Decimation of Marching Cubes Surfaces  
Author: Raj Shekhar , Elias Fayyad Roni Yagel J. Fredrick Cornhill , 
Note: Foundation  
Affiliation: 1 Biomedical Engineering Center and 2 Department of Computer and Information Science, The Ohio State University 3 Department of Biomedical Engineering, The Cleveland Clinic  
Abstract: The Marching Cubes (MC) algorithm is a commonly used method for generating isosurfaces. The MC algorithm also generates an excessively large number of triangles to represent an isosurface. Generating many triangles increases the rendering time which is directly proportional to the number of triangles. This paper presents a decimation method to reduce the number of triangles generated by the MC algorithm. Decimation is carried out within the framework of the MC algorithm before creating a large number of triangles. Four major steps comprise the reported implementation of the algorithm: a) surface tracking, b) merging, c) crack patching, and d) triangulation. Surface tracking is an enhanced implementation of the MC algorithm. Starting from a seed point, the surface tracker visits only those cells likely to compose part of the desired isosurface. This results in up to approximately 80% computational saving The cells making up the extracted surface are stored in an octree that is further processed. A bottom-up approach is taken in merging the cells containing a relatively flat approximating surface. The finer surface details are maintained. Cells are merged as long as the error due to such an operation is within a userspecified error parameter, or a cell acquires more than one connected surface component in it. A simple, yet general, crack patching method is described that forces edges of smaller cells to lie along those of the larger neighboring cells. Patching does not introduce new triangles. The overall saving in the number of triangles depends both on the specified error value and the nature of the data. We demonstrate savings of more than 90% for two artificial datasets and an MRI head dataset for an error value of less than half the minimum voxel dimension. Use of the hierarchical octree data structure also presents the potential of incremental representation of surfaces. We can generate a highly smoothed surface representation which can be progressively refined as the userspecified error value is decreased. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Cline, H. E., Dumoulin, C. L., Hart, H. R Jr., Lorensen, W. E., Ludke, S. </author> <title> 3D Reconstruction of the brain from magnetic resonance images using a connectivity algorithm. Magnetic Resonance Imaging 5, </title> <booktitle> (1987), </booktitle> <pages> 345-352. </pages>
Reference-contexts: Moreover, the efficiency increases with higher resolution datasets as shown in Table 1. Another advantage of surface tracking is that a connected surface is always obtained. This eliminates the need to apply a connectivity algorithm <ref> [1, 2] </ref> following surface extraction in many applications. Any stray surface primitives arising due to noise in the data are also avoided. The final surface descriptions obtained from the two methods are identical if a single surface component is present in the data.
Reference: [2] <author> Cline, H. E., Lorensen, W. E., Kikinis, R., Jolesz, F. </author> <title> Three dimensional segmentation of MR images of the head using probability and connectivity. </title> <journal> Journal of Computer Assisted Tomography 14, </journal> <volume> 6 (1990), </volume> <pages> 1037-1045. </pages>
Reference-contexts: Moreover, the efficiency increases with higher resolution datasets as shown in Table 1. Another advantage of surface tracking is that a connected surface is always obtained. This eliminates the need to apply a connectivity algorithm <ref> [1, 2] </ref> following surface extraction in many applications. Any stray surface primitives arising due to noise in the data are also avoided. The final surface descriptions obtained from the two methods are identical if a single surface component is present in the data.
Reference: [3] <author> Lorensen, W. E., Cline, H. E. </author> <title> Marching cubes: A high resolution 3D surface construction algorithm. </title> <journal> Comput. Graph. </journal> <volume> 21, 4 (1987), </volume> <pages> 163-169. </pages>
Reference-contexts: Availability of dedicated hardware to speed up surface rendering and thus achieve real-time or near real-time interaction has been a major contributing factor to this interest. Several algorithms can generate isosurfaces from 3D data. The Marching Cubes (MC) algorithm <ref> [3] </ref> has, by far, been the most popular one in generating high-quality surface representation. Experience with visualizing medical datasets has proved that, despite the attractiveness of the surface rendering approach, the number of surface primitives (triangles) generated by the MC algorithm can be prohibitive to achieving a reasonable rendering speed. <p> Each step of the algorithm is explained in detail below. Surface tracking is optional as far as decimation is concerned. The Discussion section elaborates on a possible implementation without surface tracking. Step 1: Surface Tracking The original MC algorithm by Lorensen and Cline <ref> [3] </ref> exhaustively searches all the cells in a 3D dataset in its attempt to find an isosurface.
Reference: [4] <author> Montani, C., Scateni, R., Scopigno, R. </author> <title> Discretized marching cubes. </title> <booktitle> Proceedings of Visualization, </booktitle> <year> (1994), </year> <pages> 281-287. </pages>
Reference-contexts: In addition, crack patching replaces the cracks with equivalent polygons which may counter the saving. And finally, the algorithm is limited to datasets of resolutions of the power of 2. Montani et al. <ref> [4] </ref> have proposed a discretized MC algorithm where the edge intersections are approximated by edge midpoints. The authors argue that the error introduced with midpoint selection is within acceptable limits. The saving in their approach results primarily from the removal of smaller facets and the merging of the coplanar facets.
Reference: [5] <author> Schroeder, W. J., Zarge, J. A., Lorensen, W. E. </author> <title> Decimation of triangle meshes. </title> <journal> Comput. Graph. </journal> <volume> 26, </volume> <year> (1992), </year> <pages> 65-70. </pages>
Reference-contexts: The overall surface quality is controlled by the user through the error value. RELATED WORK Several attempts have been made to reduce the number of triangles generated by the MC algorithm. The most notable, the decimation algorithm by Schroeder et al. <ref> [5] </ref>, substitutes the triangular mesh obtained by the MC algorithm with a simpler mesh generated from a subset of original vertices. Vertices are classified as one of the six types based on their interconnections with neighboring vertices.
Reference: [6] <author> Shu, R., Chen, Z., Kankanhalli, M. S. </author> <title> Adaptive marching cubes. </title> <booktitle> The Visual Computer 11, </booktitle> <year> (1995), </year> <pages> 202-217. </pages>
Reference-contexts: The algorithm has been shown to reduce the number of triangles by as much as 90% without much distortion. One major problem with this method is that a large number of triangles is generated, only to be eliminated later on. Shu et al. <ref> [6] </ref> report an adaptive MC algorithm. The MC algorithm is first applied to cells of a given size, which is a power of 2 (2 2 2, 4 4 4, 8 8 8 or so).
Reference: [7] <author> Wilhelms, J., Van Gelder, A. </author> <title> Octree for faster isosurface generation. </title> <journal> ACM Trans. Graph. </journal> <volume> 11, </volume> <year> (1992), </year> <pages> 201-227. </pages>
Reference-contexts: Midpoint selection improves the chances that facets from neighboring cells will be coplanar. The investigators also report 80-90% savings in the number of triangles. The algorithm we propose can incorporate this idea and result in further saving. Wilhelms and Van Gelder <ref> [7] </ref> report use of an octree data structure to enhance the MC algorithm. Visiting only a subset of all the possible cells increases the efficiency. Octrees, with their hierarchical structure, provide a natural framework for avoiding the unnecessary cells.
References-found: 7

