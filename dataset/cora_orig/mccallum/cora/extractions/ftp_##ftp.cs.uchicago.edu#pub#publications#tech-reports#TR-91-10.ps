URL: ftp://ftp.cs.uchicago.edu/pub/publications/tech-reports/TR-91-10.ps
Refering-URL: http://cs-www.uchicago.edu/publications/tech-reports/
Root-URL: 
Title: NON-DETERMINISTIC EXPONENTIAL TIME HAS TWO-PROVER INTERACTIVE PROTOCOLS  
Author: L aszl o Babai, Lance Fortnow and Carsten Lund 
Note: 2 under the same condition.  
Abstract: We determine the exact power of two-prover interactive proof systems introduced by Ben-Or, Goldwasser, Kilian, and Wigder-son (1988). In this system, two all-powerful noncommunicating provers convince a randomizing polynomial time verifier in polynomial time that the input x belongs to the language L. It was previously suspected (and proved in a relativized sense) that coNP -complete languages do not admit such proof systems. In sharp contrast, we show that the class of languages having two-prover interactive proof systems is nondeterministic exponential time. After the recent results that all languages in P SP ACE have single prover interactive proofs (Lund, Fortnow, Karloff, Nisan, and Shamir), this represents a further step demonstrating the unexpectedly immense power of randomization and interaction in efficient provability. Indeed, it follows that multiple provers with coins are strictly stronger than without, since N EXP 6= N P . In particular, for the first time, provably polynomial time intractable languages turn out to admit "efficient proof systems" since NEXP 6= P . We show that to prove membership in languages in EXP , the honest provers need the power of EXP only. A consequence, linking more standard concepts of structural complexity, states that if EXP has polynomial size circuits then EXP = M A, strengthening a result of A. Meyer that EXP = P The first part of the proof of the main result extends recent techniques of polynomial extrapolation of truth values used in the single prover case. The second part is a verification scheme for multilinearity of function in several variables held by an oracle and can be viewed as an independent result on program verification. Its proof rests on combinatorial techniques employing a simple isoperimetric inequality for certain 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman, </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading MA, </address> <year> 1974. </year>
Reference-contexts: Remarks 3.6, 3.7). The notion of approximation is defined as follows. Definition 3.4. Let f; g be functions over a finite set X. For ffi 2 <ref> [0; 1] </ref> we say that f ffi-approximates g if the number of places x 2 X such that f (x) 6= g (x) is less than ffijXj. Lemma 3.5. Let d; m; k 0, a field F and a subset I F, jIj = kdm be the input. <p> Preliminary remarks. Look at the tableau describing the computation of a non-deterministic exponential time Turing machine M on input x. Convert this to a 3-CNF like in the proof of the Cook-Levin theorem (N P -completeness of 3-satisfiability; [16], [27], cf. <ref> [1, p. 385] </ref>) There will be an exponential number of variables and an exponential number of clauses. However, the clauses are easily definable, in fact there exists a polynomial-time computable function f x (i) that describes the variables of clause i. <p> Let f : I n ! Q be a function. We call f multilinear if its restriction to any line (in the above sense) of I n is linear. Definition 5.2. Let f : I n ! Q. For ffi 2 <ref> [0; 1] </ref> we say that f is ffi-approximately multilinear if there exists a multilinear g such that g ffi-approximates f . If n = 1, we obtain the concept of ffi-approximately linear functions. Definition 5.3.
Reference: [2] <author> D. Aldous, </author> <title> On the Markov chain simulation method for uniform combinatorial distributions and simulated annealing, </title> <booktitle> Probability in the Engineering and Informational Sciences 1 (1987), </booktitle> <pages> 33-46. </pages>
Reference-contexts: Lemma 5.8. (Expansion Lemma) Let S X n . If jSj jXj n =2 then j Sj jSj (1 + 1=2n). This lemma was proved by D. Aldous <ref> [2, Lemma 3.1] </ref>. It is also implicit in work by Babai and Erd-os [5, Lemma].
Reference: [3] <author> L. Babai, </author> <title> Trading group theory for randomness, </title> <booktitle> in Proc. 17th Ann. ACM Symp. Theory of Computing, </booktitle> <year> 1985, </year> <pages> 421-429. </pages>
Reference: [4] <author> L. Babai, </author> <title> E-mail and the unexpected power of interaction, </title> <booktitle> in: Proc. 5th Ann. IEEE Structures in Complexity Theory Conf., </booktitle> <year> 1990, </year> <pages> 30-44. </pages>
Reference-contexts: 1. Introduction The concept of N P was introduced in the early 70's as a model of languages with efficient proof of membership (Cook [16], Levin [27]). As an extension of this concept, two variants of single prover interactive proofs were introduced in 1985 by Babai <ref> [4] </ref> and Goldwasser, Micali, Rackoff [23]. The power of this extension has not been recognized until very recently, when combined work of Lund, Fortnow, Karloff, Nisan [29], and Shamir [35] has shown that every language in P SP ACE has an interactive proof. <p> Here M A denotes the Merlin-Arthur class: Non-deterministic move first, followed by a random move. Arguably this represents the class of "publishable proofs" (not requiring direct interaction between prover and verifier). Babai <ref> [4] </ref> has shown M A P 2 " P 2 . We note that Santha [33] constructed an oracle under which M A is properly contained in AM , itself still a subclass of P 2 . Proof.
Reference: [5] <author> L. Babai and P. Erd -os, </author> <title> Representation of group elements as short products, </title> <booktitle> Annals of Discrete Mathematics 12 (1982), </booktitle> <pages> 27-30. </pages>
Reference-contexts: Lemma 5.8. (Expansion Lemma) Let S X n . If jSj jXj n =2 then j Sj jSj (1 + 1=2n). This lemma was proved by D. Aldous [2, Lemma 3.1]. It is also implicit in work by Babai and Erd-os <ref> [5, Lemma] </ref>. The key step in the induction argument that will yield Theorem 5.13 is the verification that if a function passes the Test and it is multilinear on a fair portion of the space then it is actually multilinear almost everywhere.
Reference: [6] <author> L. Babai and L. Fortnow, Arithmetization: </author> <title> a new method in structural complexity theory, Computational Complexity 1 (1991), to appear. (Preliminary version appeared as: A characterization of #P by arithmetic straight line programs, </title> <booktitle> in Proc. 31st Ann. IEEE Symp. Foundations of Comp. Sci., </booktitle> <year> 1990, </year> <pages> 26-34.) </pages>
Reference-contexts: Arithmetization: a Variant of the LFKN Protocol The purpose of the first half of this section is largely didactical. We describe a variant of the LFKN protocol using ideas from Babai-Fortnow <ref> [6] </ref> (cf. also Shamir [35]). The reader needs to thoroughly understand this protocol before moving on to the proof of the Main Theorem. At the end of this section we derive a lemma which will be used directly in the proof of the Main Theorem. Two-Prover Interactive Protocols 7 3.1. <p> However we cannot immediately do such universal quantification with multi-provers. The obvious "statistical approach", replacing the "for all i" with "for most i" will clearly fail. We might try handling the universal quantification with the techniques of Lund-Fortnow-Karloff-Nisan [29], Babai-Fortnow <ref> [6] </ref>, and Shamir [35], but these results do not relativize and A may not have the proper algebraic properties necessary for this proof. We need a further reduction of the problem, involving a deeper arithmeti-zation of the fact that f x (i) is polynomial time computable. 4.2.
Reference: [7] <author> L. Babai, L. Fortnow, L. Levin, M. Szegedy, </author> <title> Checking computations in polylogarithmic time, </title> <booktitle> in: Proc. 23rd ACM Symp. Theory of Computing, </booktitle> <year> 1991, </year> <note> to appear. 36 Babai, Fortnow & Lund </note>
Reference-contexts: The oracle can be thought of as a very long proof of a theorem, which the Verifier can rapidly check. This aspect of this concept will be developed and refined in <ref> [7] </ref>. Theorem 2.3. (Fortnow-Rompel-Sipser [21]) L is accepted by a probabilistic oracle machine if and only if L is accepted by a multi-prover interactive proto col. A further important result states that two provers always suffice. <p> In another direction, in joint work with L. Levin and M. Szegedy, we have further explored the implications of our protocols to the verification of program instances and mathematical proofs. In particular, we have introduced a concept of transparent proofs <ref> [7] </ref>.
Reference: [8] <author> L. Babai, L. Fortnow, C. Lund, </author> <title> Non-deterministic exponential time has two-prover interactive protocols (extended abstract), </title> <booktitle> Proc. 31st Ann. IEEE Symp. </booktitle> <institution> Found. Comp. Sci., </institution> <year> 1990, </year> <pages> 16-25. </pages>
Reference: [9] <author> L. Babai and P. Frankl, </author> <title> Linear Algebra Methods in Combinatorics, I, </title> <note> Preliminary Version, </note> <institution> University of Chicago, Dept. </institution> <address> C. S. </address> <year> 1988. </year>
Reference-contexts: This error-correcting property of the protocol is related to the next remark. Remark 3.7. A well-known lemma of Jacob Schwartz asserts that a nonzero polynomial of total degree d vanishes at no more than a d=jIj fraction of I m (m is the number of variables) [37] (cf. <ref> [9, Lemma 2.35] </ref>). (The proof is a simple induction on m.) It follows that given h, its low degree correction (if exists) is unique. Indeed, assume both f 1 and f 2 are ffi-approximations of h, and let f = f 1 f 2 .
Reference: [10] <author> D. Beaver and J. Feigenbaum, </author> <title> Hiding instances in multioracle queries, </title> <booktitle> in Proc. 7th Symp. on Theoretical Aspects of Comp. Sci., Lecture Notes in Comp. Sci. 415 (1990), </booktitle> <pages> 37-48. </pages>
Reference-contexts: Since a P SP ACE machine can simulate an alternating polynomial-time Turing machine, if L is P SP ACE-robust then g is Turing-reducible to L. 2 In particular, we have multilinear P SP ACE-complete functions, EXP - complete functions, etc. This lemma, inspired by Beaver-Feigenbaum <ref> [10] </ref> and spelled out simultaneously by the authors of this paper and of [10], has significant consequences, as we shall see below. <p> This lemma, inspired by Beaver-Feigenbaum <ref> [10] </ref> and spelled out simultaneously by the authors of this paper and of [10], has significant consequences, as we shall see below. <p> We now use ideas of Beaver-Feigenbaum <ref> [10] </ref> and Lipton [28] to create the correcting function C. Suppose we wish to compute g n (x 1 ; : : : ; x n ).
Reference: [11] <author> M. Ben-Or, S. Goldwasser, J. Kilian, and A. Wigderson, </author> <title> Multi-prover interactive proofs: How to remove the intractability assumptions, </title> <booktitle> in Proc. 20th Ann. ACM Symp. Theory of Computing, </booktitle> <year> 1988, </year> <pages> 113-131. </pages>
Reference-contexts: This actually means IP = P SP ACE because the inclusion IP P SP ACE has been known for long (see Papadimitriou [31]). This paper looks at the class M IP of languages that have multiple-prover interactive proof systems. Ben-Or, Goldwasser, Kilian and Wigderson <ref> [11] </ref> created the model of multiple provers consisting of provers that cannot communicate and no prover can listen to conversations between the verifier and other provers. <p> This paper shows this upper bound is tight. Theorem 1.1. (Main Theorem) M IP = NEXP . In other words, the set of languages with two-prover interactive proof systems is exactly the set of languages computable in non-deterministic exponential time. BGKW <ref> [11] </ref> in fact shows that all languages that have multi-prover proof systems have perfect zero-knowledge multi-prover proof systems with no cryptographic assumptions. Combining this with our result shows that all of NEXP has perfect zero-knowledge multi-prover proof systems. Two-Prover Interactive Protocols 3 Remark 1.2. <p> A more efficient multilinearity test, with important consequences, has been found recently by Mario Szegedy [38]. 4 Babai, Fortnow & Lund 2. Multi-prover Protocols and Probabilistic Oracle Machines In this section we give some basic background on multiprover interactive proof systems. The definitions and results first appeared in Ben-Or-Goldwasser-Kilian-Wigderson <ref> [11] </ref> and Fortnow-Rompel-Sipser [21]. For completeness, we include an outline of the proofs. Let P 1 ; P 2 ; : : : ; P k be infinitely powerful machines and V be a probabilistic polynomial-time machine, all of which share the same read-only input tape. <p> Theorem 2.3. (Fortnow-Rompel-Sipser [21]) L is accepted by a probabilistic oracle machine if and only if L is accepted by a multi-prover interactive proto col. A further important result states that two provers always suffice. Theorem 2.4. (Ben-Or-Goldwasser-Kilian-Wigderson <ref> [11] </ref>) If a language L is accepted by a multi-prover interactive protocol then L is accepted by a two-prover interactive protocol. 6 Babai, Fortnow & Lund We combine the proofs of these two theorems. Proof. 1. First we show how to simulate a probabilistic oracle machine by two provers.
Reference: [12] <author> M. Blum and S. Kannan, </author> <title> Designing programs that check their work, </title> <booktitle> in Proc. 21st Ann. ACM Symp. Theory of Computing, </booktitle> <year> 1989, </year> <pages> 86-97. </pages>
Reference-contexts: In the course of the proof of the main theorem, we show how to test whether a function in several variables over Z, given as an oracle, is multilinear over a large interval. This test has independent interest for program testing and correction, in the context of Blum-Kannan <ref> [12] </ref>, Blum-Luby-Rubinfeld [13], and Lipton [28] (see Section 6). The reduction to the test involves ideas of the P SP ACE = IP proof (arithmetic extrapolation of truth values). The proof of correctness of the multilinear-ity test rests on combinatorial techniques. <p> There are natural classes of languages satisfying the conclusion of Lemma 6.2 which are not known to be P SP ACE-robust; P #P -complete languages being the prime example, since they are equivalent to the permanent, a multilinear function (Valiant [41]). 6.2. Instance Checking. In Blum-Kannan <ref> [12] </ref>, "function-restricted IP" is defined as follows: The set of all decision problems for which there is an interactive proof system for YES-instances of satisfying the conditions that the honest prover must compute the function and any prover (whether honest or not) must be a function from the set of instances <p> Every EXP -complete language has a function-restricted interactive proof system and thus a program checker. Thus not every language in function-restricted IP has a single prover interactive proof unless P SP ACE=EXP . This essentially gives a negative answer to the open question of Blum-Kannan <ref> [12] </ref> as to whether IP contains function-restricted IP . Still open is the question as to whether N P -complete languages have program checkers. This is directly related to the question of whether coN P languages have protocols with N P provers (see Section 4.6). 6.3. Self-Testing and Self-Correcting Programs.
Reference: [13] <author> M. Blum, M. Luby, and R. Rubinfeld, </author> <title> Self-testing and self-correcting programs, with applications to numerical programs, </title> <booktitle> in Proc. 22nd Ann. ACM Symp. Theory of Computing, </booktitle> <year> 1990, </year> <pages> 73-83. </pages>
Reference-contexts: This test has independent interest for program testing and correction, in the context of Blum-Kannan [12], Blum-Luby-Rubinfeld <ref> [13] </ref>, and Lipton [28] (see Section 6). The reduction to the test involves ideas of the P SP ACE = IP proof (arithmetic extrapolation of truth values). The proof of correctness of the multilinear-ity test rests on combinatorial techniques. <p> This is directly related to the question of whether coN P languages have protocols with N P provers (see Section 4.6). 6.3. Self-Testing and Self-Correcting Programs. Our test of multilinear functions (Section 5) also has applications to program testing as described by Blum-Luby-Rubinfeld <ref> [13] </ref> and Lipton [28]. We will use the following definition of self-testing/correcting programs slightly different from but in the spirit of the Blum-Luby-Rubinfeld definition. We make the connection between the two models clear in Section 6.4. <p> The checker C L (Q; x) will just output C g (P; (x 1 ; : : : ; x n )) where x = x 1 : : : x n . 2 6.4. Comparison with the Blum-Luby-Rubinfeld Model. Blum, Luby and Rubinfeld <ref> [13] </ref> give the following series of definitions for self-testing/correcting pairs: Let D = fD n jn 0g be an ensemble of probability distributions such that D n is a distribution on I n . Let P be a program that purports to compute g.
Reference: [14] <author> L. Babai and S. Moran, </author> <title> Arthur-Merlin games: a randomized proof system, and a hierarchy of complexity classes, </title> <journal> J. Comp. Sys. Sci. </journal> <volume> 36 (1988), </volume> <pages> 254-276. </pages>
Reference: [15] <author> J. Cai, </author> <title> PSPACE is provable by two provers in one round, </title> <type> manuscript, </type> <year> 1990. </year>
Reference-contexts: They also show that only two provers are necessary for any language in M IP . Recently, building on the work of Lund-Fortnow-Karloff-Nisan and Shamir, Cai <ref> [15] </ref> has shown that P SP ACE has one-round interactive proofs with two provers. Surprisingly, the proof that P SP ACE contains IP does not carry through for multiple-prover proof systems.
Reference: [16] <author> S. A. Cook, </author> <title> The complexity of theorem proving procedures, </title> <booktitle> in Proc. 3rd Ann. ACM Symp. Theory of Computing, </booktitle> <year> 1971, </year> <pages> 151-158. </pages>
Reference-contexts: 1. Introduction The concept of N P was introduced in the early 70's as a model of languages with efficient proof of membership (Cook <ref> [16] </ref>, Levin [27]). As an extension of this concept, two variants of single prover interactive proofs were introduced in 1985 by Babai [4] and Goldwasser, Micali, Rackoff [23]. <p> Preliminary remarks. Look at the tableau describing the computation of a non-deterministic exponential time Turing machine M on input x. Convert this to a 3-CNF like in the proof of the Cook-Levin theorem (N P -completeness of 3-satisfiability; <ref> [16] </ref>, [27], cf. [1, p. 385]) There will be an exponential number of variables and an exponential number of clauses. However, the clauses are easily definable, in fact there exists a polynomial-time computable function f x (i) that describes the variables of clause i.
Reference: [17] <author> U. Feige, S. Goldwasser, L. Lov asz, S. Safra, </author> <title> On the complexity of clique approximation, </title> <note> in preparation. </note>
Reference-contexts: Recent Developments. The M IP protocol described in this paper has recently found curious applications and extensions. A clique approximation algorithm is an algorithm that computes the size of maximum cliques in a graph within a constant factor. Feige, Goldwasser, Lovasz, and Safra <ref> [17] </ref> made the striking observation that our Main Theorem has the following fairly immediate consequence: If there exists a polynomial-time clique approximation algorithm then EXP = N EXP: They also proved 34 Babai, Fortnow & Lund that a slight modification yields (under the same assumption) the stronger consequence that N P
Reference: [18] <author> P. Feldman, </author> <title> The Optimum Prover lives in P SP ACE; manuscript, </title> <year> 1986. </year>
Reference-contexts: In particular, provers of power P P are equivalent to provers of power #P since P P P = P #P . The result of Feldman <ref> [18] </ref> combined with Shamir's [35] implies that P SP ACE has single prover interactive proof systems with a prover of complexity P SP ACE. The result of Lund et al. [29] implies that P #P has single prover interactive proof systems with a prover of complexity #P .
Reference: [19] <author> L. Fortnow, </author> <title> The Complexity of Perfect Zero-Knowledge, </title> <editor> In S. Micali, ed., </editor> <booktitle> Randomness and Computation, Advances in Computing Research 5 (1989), </booktitle> <pages> 327-343. </pages>
Reference-contexts: BGKW showed in this model that all languages in N P have perfect zero-knowledge multi-prover proof systems, a statement not true for one prover unless the polynomial-time hierarchy collapses (Fortnow <ref> [19] </ref>). They also show that only two provers are necessary for any language in M IP . Recently, building on the work of Lund-Fortnow-Karloff-Nisan and Shamir, Cai [15] has shown that P SP ACE has one-round interactive proofs with two provers.
Reference: [20] <author> L. Fortnow, </author> <title> Complexity-Theoretic Aspects of Interactive Proof Systems, </title> <type> Ph.D. Thesis, </type> <institution> Massachusetts Institute of Technology, Laboratory for Computer Science, Tech. </institution> <note> Report MIT/LCS/TR-447 1989. Two-Prover Interactive Protocols 37 </note>
Reference-contexts: by just encoding each prover's answer to each question. (b) If an oracle O could convince M to accept a string x then the provers could convince the verifier to accept by just using that O to create their responses. (The full details of this proof can be found in <ref> [20] </ref>.) 2 3. Arithmetization: a Variant of the LFKN Protocol The purpose of the first half of this section is largely didactical. We describe a variant of the LFKN protocol using ideas from Babai-Fortnow [6] (cf. also Shamir [35]).
Reference: [21] <author> L. Fortnow, J. Rompel, and M. Sipser, </author> <title> On the power of multi-prover interactive protocols, </title> <booktitle> Proc. 3rd Structure in Complexity Theory Conf., </booktitle> <year> 1988, </year> <pages> 156-161. </pages>
Reference-contexts: Surprisingly, the proof that P SP ACE contains IP does not carry through for multiple-prover proof systems. The best upper bound known, due to Fort-now, Rompel, and Sipser <ref> [21] </ref>, is non-deterministic exponential time: Guess the strategies of the provers and check for all possible coin tosses of the verifier. This paper shows this upper bound is tight. Theorem 1.1. (Main Theorem) M IP = NEXP . <p> Multi-prover Protocols and Probabilistic Oracle Machines In this section we give some basic background on multiprover interactive proof systems. The definitions and results first appeared in Ben-Or-Goldwasser-Kilian-Wigderson [11] and Fortnow-Rompel-Sipser <ref> [21] </ref>. For completeness, we include an outline of the proofs. Let P 1 ; P 2 ; : : : ; P k be infinitely powerful machines and V be a probabilistic polynomial-time machine, all of which share the same read-only input tape. <p> The oracle can be thought of as a very long proof of a theorem, which the Verifier can rapidly check. This aspect of this concept will be developed and refined in [7]. Theorem 2.3. (Fortnow-Rompel-Sipser <ref> [21] </ref>) L is accepted by a probabilistic oracle machine if and only if L is accepted by a multi-prover interactive proto col. A further important result states that two provers always suffice. <p> We remark that if we allow a polynomial number of provers then a bounded number of rounds does suffice <ref> [21] </ref>. ffi What complexity of provers do we need to prove coN P and N EXP languages (see Section 4.6)? ffi Finally, there seems occasion to cautiously express hope that the techniques discussed above might lead to a solution of some long standing Two-Prover Interactive Protocols 35 separation problems such as
Reference: [22] <author> L. Fortnow and M. Sipser, </author> <title> Are there interactive protocols for co-NP languages?, </title> <journal> Inf. Process. Letters, </journal> <volume> 28 (1988), </volume> <pages> 249-251. </pages>
Reference: [23] <author> S. Goldwasser, S. Micali, and C. Rackoff, </author> <title> The knowledge complexity of interactive proofs, </title> <note> SIAM Journal on Computing 18 (1989), 186-208. (Preliminary version appeared in Proc. </note> <editor> 18th Ann. </editor> <booktitle> ACM Symp. Theory of Computing, </booktitle> <year> 1985, </year> <pages> 291-304.) </pages>
Reference-contexts: As an extension of this concept, two variants of single prover interactive proofs were introduced in 1985 by Babai [4] and Goldwasser, Micali, Rackoff <ref> [23] </ref>. The power of this extension has not been recognized until very recently, when combined work of Lund, Fortnow, Karloff, Nisan [29], and Shamir [35] has shown that every language in P SP ACE has an interactive proof. <p> We allow k to be as large as a polynomial in the size of the input; any larger and V could not access all the provers. Formally, similarly to the prover of a single prover interactive proof system <ref> [23] </ref>, each P i is a function that outputs a message determined by the input and the conversation it has seen so far.
Reference: [24] <author> J. Hartmanis, N. Immerman, and V. Sewelson, </author> <title> Sparse sets in N P P : EXP T IM E versus N EXP T IM E, Inf. </title> <booktitle> and Control 65 (1985), </booktitle> <pages> 158-181. </pages>
Reference-contexts: N EXP (cf. <ref> [24] </ref>, [25]). Although there exist oracles which collapse these classes, this fact no longer seems as discouraging as it used to be, in view of a substantial mass of new techniques that do not relativize. Acknowledgments The first author was partially supported by NSF Grant CCR-8710078.
Reference: [25] <author> H. Heller, </author> <title> On Relativized Exponential and Probabilistic Complexity Classes, </title> <booktitle> Information and Computation 71 (1986), </booktitle> <pages> 231-243. </pages>
Reference-contexts: Indeed, there exists an oracle that makes these two classes collapse (Heller <ref> [25] </ref>), thus eliminating the hopes for an easy separation. Theorem 1.1 and the result that IP = P SP ACE have the same flavor of replacing universal quantification by probabilistic quantification. <p> N EXP (cf. [24], <ref> [25] </ref>). Although there exist oracles which collapse these classes, this fact no longer seems as discouraging as it used to be, in view of a substantial mass of new techniques that do not relativize. Acknowledgments The first author was partially supported by NSF Grant CCR-8710078.
Reference: [26] <author> R. Karp, R. Lipton, </author> <title> Some Connections between Nonuniform and Uniform Complexity Classes, </title> <booktitle> Proc. 12th Ann. ACM Symp. Theory of Computing, </booktitle> <year> 1980, </year> <pages> 302-309. </pages>
Reference-contexts: The proof is virtually identical to the proof of Lemma 6.5. We can also replace "multilinear" by "small-degree polynomial" as defined in Remark 4.9. 6.5. Circuit Reductions: Uniform vs. Nonuniform Complexity. Karp and Lipton <ref> [26] </ref> have considered the effect of nonuniform simulation of large complexity classes by small circuits on uniform complexity classes. They credit A.
Reference: [27] <author> L. Levin, </author> <title> Universal'nye perebornye zadachi (Universal search problems, in Russian), </title> <journal> Problemy Peredachi Informatsii 9 (1973), </journal> <pages> 265-266. </pages> <note> A corrected English translation appears in an appendix to Trakhtenbrot [39] </note>
Reference-contexts: 1. Introduction The concept of N P was introduced in the early 70's as a model of languages with efficient proof of membership (Cook [16], Levin <ref> [27] </ref>). As an extension of this concept, two variants of single prover interactive proofs were introduced in 1985 by Babai [4] and Goldwasser, Micali, Rackoff [23]. <p> Preliminary remarks. Look at the tableau describing the computation of a non-deterministic exponential time Turing machine M on input x. Convert this to a 3-CNF like in the proof of the Cook-Levin theorem (N P -completeness of 3-satisfiability; [16], <ref> [27] </ref>, cf. [1, p. 385]) There will be an exponential number of variables and an exponential number of clauses. However, the clauses are easily definable, in fact there exists a polynomial-time computable function f x (i) that describes the variables of clause i.
Reference: [28] <author> R. Lipton, </author> <title> New directions in testing, </title> <booktitle> in Proceedings of the DIMACS Workshop on Distributed Computing and Cryptography, </booktitle> <year> 1989, </year> <note> to appear. </note>
Reference-contexts: This test has independent interest for program testing and correction, in the context of Blum-Kannan [12], Blum-Luby-Rubinfeld [13], and Lipton <ref> [28] </ref> (see Section 6). The reduction to the test involves ideas of the P SP ACE = IP proof (arithmetic extrapolation of truth values). The proof of correctness of the multilinear-ity test rests on combinatorial techniques. <p> This is directly related to the question of whether coN P languages have protocols with N P provers (see Section 4.6). 6.3. Self-Testing and Self-Correcting Programs. Our test of multilinear functions (Section 5) also has applications to program testing as described by Blum-Luby-Rubinfeld [13] and Lipton <ref> [28] </ref>. We will use the following definition of self-testing/correcting programs slightly different from but in the spirit of the Blum-Luby-Rubinfeld definition. We make the connection between the two models clear in Section 6.4. <p> We now use ideas of Beaver-Feigenbaum [10] and Lipton <ref> [28] </ref> to create the correcting function C. Suppose we wish to compute g n (x 1 ; : : : ; x n ).
Reference: [29] <author> C. Lund, L. Fortnow, H. Karloff, and N. Nisan, </author> <title> Algebraic methods for interactive proof systems, </title> <booktitle> in Proc. 31st Ann. IEEE Symp. Foundations of Comp. Sci., </booktitle> <year> 1990, </year> <pages> 1-10. </pages>
Reference-contexts: As an extension of this concept, two variants of single prover interactive proofs were introduced in 1985 by Babai [4] and Goldwasser, Micali, Rackoff [23]. The power of this extension has not been recognized until very recently, when combined work of Lund, Fortnow, Karloff, Nisan <ref> [29] </ref>, and Shamir [35] has shown that every language in P SP ACE has an interactive proof. This actually means IP = P SP ACE because the inclusion IP P SP ACE has been known for long (see Papadimitriou [31]). <p> However we cannot immediately do such universal quantification with multi-provers. The obvious "statistical approach", replacing the "for all i" with "for most i" will clearly fail. We might try handling the universal quantification with the techniques of Lund-Fortnow-Karloff-Nisan <ref> [29] </ref>, Babai-Fortnow [6], and Shamir [35], but these results do not relativize and A may not have the proper algebraic properties necessary for this proof. We need a further reduction of the problem, involving a deeper arithmeti-zation of the fact that f x (i) is polynomial time computable. 4.2. <p> The result of Feldman [18] combined with Shamir's [35] implies that P SP ACE has single prover interactive proof systems with a prover of complexity P SP ACE. The result of Lund et al. <ref> [29] </ref> implies that P #P has single prover interactive proof systems with a prover of complexity #P . A similar property of EXP follows from our proof. Corollary 4.10. For any L 2 EXP , there is a multiple-prover interactive proof system with provers of complexity EXP . <p> Lund et al. <ref> [29] </ref> show that #P provers are sufficient. We know of no better bound. 5. Verification of Multilinear Functions and Polynomials of Low Degree First we need some definitions and notation. <p> Blum-Kannan show that a language has a program checker if and only if the language and its complement each have a function-restricted interactive proof system. The recent results by Lund-Fortnow-Karloff-Nisan <ref> [29] </ref> and Shamir [35] show all P #P -complete and P SP ACE-complete languages have function restricted interactive proofs and (since both classes are closed under complements) program checkers. <p> Recent results on the power of interactive proofs (including our main result) lead to a strengthening of the conclusion in each case, replacing P 2 by its subclass M A. For C = P #P , this is a result of LFKN <ref> [29] </ref>. The following result generalizes a corollary in Lund-Fortnow-Karloff-Nisan [29]. For the definition of the complexity of provers see Section 4.6. Corollary 6.9. <p> For C = P #P , this is a result of LFKN <ref> [29] </ref>. The following result generalizes a corollary in Lund-Fortnow-Karloff-Nisan [29]. For the definition of the complexity of provers see Section 4.6. Corollary 6.9. If a language L has a multiple-prover interactive proof sys tem with provers of complexity C (see Section 4.6) and if C has polynomial-size circuits then L 2 M A.
Reference: [30] <author> P. Orponen, </author> <title> Complexity Classes of Alternating Machines with Oracles, </title> <booktitle> Proc. 10th ICALP, Lecture Notes in Comp. Sci 154 (1983), </booktitle> <pages> 573-584. </pages>
Reference-contexts: Peterson and Reif [32] show that NEXP can be described by a game with three players, two existential players unable to communicate and one universal player who communicates with the other two. Simon [36] and Orponen <ref> [30] </ref> describe a game between an existential oracle and a universal player and show the equivalence to NEXP . Remarkably, in all of these cases, the universal player can be replaced by a probabilistic polynomial time player without reducing the strength of the models. <p> We construct in polynomial time an instance (B; r; s) of oracle-3-satisfiability which is accepted if and only if x 2 L. The first part of this construction is essentially due to J. Simon [36]; similar proofs appear in Peterson-Reif [32] and Orponen <ref> [30] </ref>, describing N EXP analogues of the Cook-Levin theorem (N P -completeness of 3-SAT). Let M be the N EXP Turing machine accepting L. Look at the tableau describing the computation of M on input x. Convert this to a 3-CNF x like in the proof of the Cook-Levin theorem.
Reference: [31] <author> C. Papadimitriou, </author> <title> Games against Nature, </title> <booktitle> Proc. 24th Ann. IEEE Symp. Foundations of Comp. Sci., </booktitle> <year> 1983, </year> <pages> 446-450. </pages>
Reference-contexts: This actually means IP = P SP ACE because the inclusion IP P SP ACE has been known for long (see Papadimitriou <ref> [31] </ref>). This paper looks at the class M IP of languages that have multiple-prover interactive proof systems. Ben-Or, Goldwasser, Kilian and Wigderson [11] created the model of multiple provers consisting of provers that cannot communicate and no prover can listen to conversations between the verifier and other provers.
Reference: [32] <author> G. Peterson and J. Reif, </author> <title> Multiple-person alternation, </title> <booktitle> Proc. 20th Ann. IEEE Symp. Foundations of Comp. Sci., </booktitle> <year> 1979, </year> <pages> 348-363. </pages> <note> 38 Babai, Fortnow & Lund </note>
Reference-contexts: P SP ACE is exactly the class of languages accepted by a game between two players, one who makes existential moves and the other makes universal moves. Peterson and Reif <ref> [32] </ref> show that NEXP can be described by a game with three players, two existential players unable to communicate and one universal player who communicates with the other two. <p> We construct in polynomial time an instance (B; r; s) of oracle-3-satisfiability which is accepted if and only if x 2 L. The first part of this construction is essentially due to J. Simon [36]; similar proofs appear in Peterson-Reif <ref> [32] </ref> and Orponen [30], describing N EXP analogues of the Cook-Levin theorem (N P -completeness of 3-SAT). Let M be the N EXP Turing machine accepting L. Look at the tableau describing the computation of M on input x.
Reference: [33] <author> M. Santha, </author> <title> Relativized Arthur-Merlin versus Merlin-Arthur games, Inf. </title> <booktitle> and Computation 80 (1989), </booktitle> <pages> 44-49. </pages>
Reference-contexts: Here M A denotes the Merlin-Arthur class: Non-deterministic move first, followed by a random move. Arguably this represents the class of "publishable proofs" (not requiring direct interaction between prover and verifier). Babai [4] has shown M A P 2 " P 2 . We note that Santha <ref> [33] </ref> constructed an oracle under which M A is properly contained in AM , itself still a subclass of P 2 . Proof.
Reference: [34] <author> J. Seiferas, M. Fischer, and A. Meyer, </author> <title> Separating Nondeterministic Time Complexity Classes, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 25 (1978), </volume> <pages> 146-167. </pages>
Reference-contexts: We should also point out that it follows from our result that multiple provers with coins are provably strictly stronger than without, since NEXP 6= NP (Seiferas, Fischer, Meyer <ref> [34] </ref>).
Reference: [35] <author> A. Shamir, </author> <title> IP = PSPACE, </title> <booktitle> in Proc. 31st Ann. IEEE Symp. Foundations of Comp. Sci., </booktitle> <year> 1990, </year> <pages> 11-15. </pages>
Reference-contexts: As an extension of this concept, two variants of single prover interactive proofs were introduced in 1985 by Babai [4] and Goldwasser, Micali, Rackoff [23]. The power of this extension has not been recognized until very recently, when combined work of Lund, Fortnow, Karloff, Nisan [29], and Shamir <ref> [35] </ref> has shown that every language in P SP ACE has an interactive proof. This actually means IP = P SP ACE because the inclusion IP P SP ACE has been known for long (see Papadimitriou [31]). <p> Remarkably, in all of these cases, the universal player can be replaced by a probabilistic polynomial time player without reducing the strength of the models. For P SP ACE, this follows from <ref> [35] </ref>; for NEXP , the equivalence is established by our main result. In the course of the proof of the main theorem, we show how to test whether a function in several variables over Z, given as an oracle, is multilinear over a large interval. <p> Arithmetization: a Variant of the LFKN Protocol The purpose of the first half of this section is largely didactical. We describe a variant of the LFKN protocol using ideas from Babai-Fortnow [6] (cf. also Shamir <ref> [35] </ref>). The reader needs to thoroughly understand this protocol before moving on to the proof of the Main Theorem. At the end of this section we derive a lemma which will be used directly in the proof of the Main Theorem. Two-Prover Interactive Protocols 7 3.1. Arithmetization. <p> However we cannot immediately do such universal quantification with multi-provers. The obvious "statistical approach", replacing the "for all i" with "for most i" will clearly fail. We might try handling the universal quantification with the techniques of Lund-Fortnow-Karloff-Nisan [29], Babai-Fortnow [6], and Shamir <ref> [35] </ref>, but these results do not relativize and A may not have the proper algebraic properties necessary for this proof. We need a further reduction of the problem, involving a deeper arithmeti-zation of the fact that f x (i) is polynomial time computable. 4.2. A N EXP -complete language. <p> In particular, provers of power P P are equivalent to provers of power #P since P P P = P #P . The result of Feldman [18] combined with Shamir's <ref> [35] </ref> implies that P SP ACE has single prover interactive proof systems with a prover of complexity P SP ACE. The result of Lund et al. [29] implies that P #P has single prover interactive proof systems with a prover of complexity #P . <p> Blum-Kannan show that a language has a program checker if and only if the language and its complement each have a function-restricted interactive proof system. The recent results by Lund-Fortnow-Karloff-Nisan [29] and Shamir <ref> [35] </ref> show all P #P -complete and P SP ACE-complete languages have function restricted interactive proofs and (since both classes are closed under complements) program checkers.
Reference: [36] <author> J. Simon, </author> <title> On Some Central Problems in Computational Complexity, </title> <type> Ph.D. Thesis, </type> <institution> Cornell University, Computer Science, </institution> <type> Tech. Report TR 75-224, </type> <year> 1975. </year>
Reference-contexts: Peterson and Reif [32] show that NEXP can be described by a game with three players, two existential players unable to communicate and one universal player who communicates with the other two. Simon <ref> [36] </ref> and Orponen [30] describe a game between an existential oracle and a universal player and show the equivalence to NEXP . Remarkably, in all of these cases, the universal player can be replaced by a probabilistic polynomial time player without reducing the strength of the models. <p> We construct in polynomial time an instance (B; r; s) of oracle-3-satisfiability which is accepted if and only if x 2 L. The first part of this construction is essentially due to J. Simon <ref> [36] </ref>; similar proofs appear in Peterson-Reif [32] and Orponen [30], describing N EXP analogues of the Cook-Levin theorem (N P -completeness of 3-SAT). Let M be the N EXP Turing machine accepting L. Look at the tableau describing the computation of M on input x.
Reference: [37] <author> J. T. Schwartz, </author> <title> Fast probabilistic algorithms for verification of polynomial identities, </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 27 (1980), </volume> <pages> 701-717. </pages>
Reference-contexts: This error-correcting property of the protocol is related to the next remark. Remark 3.7. A well-known lemma of Jacob Schwartz asserts that a nonzero polynomial of total degree d vanishes at no more than a d=jIj fraction of I m (m is the number of variables) <ref> [37] </ref> (cf. [9, Lemma 2.35]). (The proof is a simple induction on m.) It follows that given h, its low degree correction (if exists) is unique. Indeed, assume both f 1 and f 2 are ffi-approximations of h, and let f = f 1 f 2 .
Reference: [38] <author> M. Szegedy, </author> <title> Efficient M IP protocol and a stronger condition on clique approximation, </title> <note> in preparation. </note>
Reference-contexts: The reduction to the test involves ideas of the P SP ACE = IP proof (arithmetic extrapolation of truth values). The proof of correctness of the multilinear-ity test rests on combinatorial techniques. A more efficient multilinearity test, with important consequences, has been found recently by Mario Szegedy <ref> [38] </ref>. 4 Babai, Fortnow & Lund 2. Multi-prover Protocols and Probabilistic Oracle Machines In this section we give some basic background on multiprover interactive proof systems. The definitions and results first appeared in Ben-Or-Goldwasser-Kilian-Wigderson [11] and Fortnow-Rompel-Sipser [21]. For completeness, we include an outline of the proofs. <p> With the obvious modifications, the same proof applies. Remark 5.16. Recently, Mario Szegedy <ref> [38] </ref> succeeded in devising a more efficient protocol for multilinearity (and low degree) testing; at the same time the proof of correctness of his protocol is also simpler. 6. Program Testing, Verification and Self-Reducibility The results of this paper have many connections to program testing, verification and self-correcting code. <p> Digging considerably deeper into our protocols, Szegedy <ref> [38] </ref> achieved remarkable improvements, yielding in particular that a polynomial time clique approximation algorithm implies that N P is in DT IM E (n O (log log n) ). This means nearly polynomial time, where "nearly polynomial" is defined as n (log log n) O (1) .
Reference: [39] <author> B. A. Trakhtenbrot, </author> <title> A survey of Russian approaches to Perebor (brute-force search) algorithms, </title> <booktitle> Annals of the History of Computing 6 (1984), </booktitle> <pages> 384-400. </pages>
Reference: [40] <author> S. </author> <title> Toda, </title> <booktitle> On the computational power of P P and P , in Proc. 30th Ann. IEEE Symp. Foundations of Comp. Sci., </booktitle> <year> 1989, </year> <pages> 514-519. </pages>
Reference: [41] <author> L. Valiant, </author> <title> The complexity of computing the permanent, </title> <booktitle> Theoretical Computer Science 8 (1979), </booktitle> <pages> 189-201. </pages>
Reference-contexts: There are natural classes of languages satisfying the conclusion of Lemma 6.2 which are not known to be P SP ACE-robust; P #P -complete languages being the prime example, since they are equivalent to the permanent, a multilinear function (Valiant <ref> [41] </ref>). 6.2. Instance Checking.
Reference: [42] <author> L. Valiant, V. Vazirani, </author> <title> N P is as Easy as Detecting Unique Solutions, </title> <booktitle> Theoretical Computer Science 47 (1986), </booktitle> <pages> 85-93. </pages> <institution> Manuscript received 30 March 1990 Laszlo Babai University of Chicago Chicago, IL 60637 and Eotvos University, Budapest, Hungary laci@cs.uchicago.edu Lance Fortnow Department of Computer Science University of Chicago 1100 E. 58th St. Chicago, IL 60637 fortnow@cs.uchicago.edu Two-Prover Interactive Protocols 39 Carsten Lund Department of Computer Science University of Chicago 1100 E. 58th St. Chicago, IL 60637 Current Address of Carsten Lund: DIMACS P.O. Box 1179 Rutgers University Piscataway, </institution> <address> NJ 08855-1179 clund@dimacs.rutgers.edu </address>
Reference-contexts: This way if g is not identically zero then the above sum will have at least 1=(4 (m + 1)) chance of being nonzero according to a lemma of Rabin (see <ref> [42] </ref>). Now the characteristic function of U can be expressed as a polynomial of degree m and the protocol of Lemma 3.5 can be used. Variations of this method use classes of hash-functions to specify the subset U . Below we describe a different procedure with a self-contained proof.
References-found: 42

