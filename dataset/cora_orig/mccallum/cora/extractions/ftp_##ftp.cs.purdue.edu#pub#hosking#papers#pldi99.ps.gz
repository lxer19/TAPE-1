URL: ftp://ftp.cs.purdue.edu/pub/hosking/papers/pldi99.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/hosking/papers.html
Root-URL: http://www.cs.purdue.edu
Title: on Programming Language Design and Implementation Partial Redundancy Elimination for Access Path Expressions  
Author: Nathaniel Nystrom Antony L. Hosking David Whitlock Quintin Cutts Amer Diwan 
Address: West Lafayette, IN 47907-1398, USA  Glasgow G12 8QQ, Scotland  Stanford, CA 94305-9030, USA  
Affiliation: Department of Computer Sciences Purdue University  Department of Computing Science University of Glasgow  Department of Computer Science Stanford University  
Note: Submitted to 1999 ACM Conference  
Abstract: Pointer traversals pose significant overhead to the execution of object-oriented programs, since every access to an object's state requires a pointer dereference. Eliminating redundant pointer traversals reduces both instructions executed as well as redundant memory accesses to relieve pressure on the memory subsystem. We describe an approach to elimination of redundant access expressions that combines partial redundancy elimination (PRE) with type-based alias analysis (TBAA). To explore the potential of this approach we have implemented an optimization framework for Java class files incorporating TBAA-based PRE over pointer access expressions. The framework is implemented as a classfile-to-classfile transformer; optimized classes can then be run in any standard Java execution environment. Our experiments demonstrate significant improvements in the execution of optimized code for several Java benchmarks running in diverse execution environments: the standard interpreted JDK virtual machine, a virtual machine using just-in-time compilation, and native binaries compiled off-line (way-ahead-of-time). We isolate the impact of TBAA-based access path PRE, and demonstrate that Java's requirement of precise exceptions can noticeably impact code-motion optimizations like PRE. 
Abstract-found: 1
Intro-found: 1
Reference: <author> AGESEN, O., DETLEFS, D., AND MOSS, J. E. B. </author> <year> 1998. </year> <title> Garbage collection and local variable type-precision and liveness in Java virtual machines. </title> <note> See PLDI [1998], 269279. </note>
Reference: <author> ALPERN, B., WEGMAN, M. N., AND ZADECK, F. K. </author> <year> 1988. </year> <title> Detecting equality of values in programs. </title> <note> See POPL [1988], 111. </note>
Reference: <author> APPEL, A. W. </author> <year> 1998. </year> <title> Modern Compiler Implementation in Java. </title> <publisher> Cambridge University Press. </publisher>
Reference: <editor> ATKINSON, M. AND MORRISON, R., Eds. </editor> <booktitle> 1998. Proceedings of the Eighth International Workshop on Persistent Object Systems (Tiburon, </booktitle> <address> California, August 1998). </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> ATKINSON, M. P., DAYN ES, L., JORDAN, M. J., PRINTEZIS, T., AND SPENCE, S. </author> <year> 1996. </year> <title> An orthogonally persistent Java. </title> <booktitle> ACM SIGMOD Record 25, </booktitle> <month> 4 (Dec.), 6875. </month>
Reference: <author> BOEHM, H.-J. AND WEISER, M. </author> <year> 1988. </year> <title> Garbage collection in an uncooperative environment. </title> <journal> Software: Practice and Experience 18, </journal> <volume> 9 (Sept.), </volume> <pages> 807820. </pages>
Reference: <author> BRAHNMATH, K., NYSTROM, N., HOSKING, A. L., AND CUTTS, Q. </author> <year> 1998. </year> <title> Swizzle barrier optimizations for orthogonal persistence in Java. </title> <booktitle> In Proceedings of the Third International Workshop on Persistence and Java (Tiburon, </booktitle> <address> California, </address> <month> Sept.), </month> <editor> M. P. Atkinson and M. J. Jordan, Eds. </editor> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> BRIGGS, P., COOPER, K. D., HARVEY, T. J., AND SIMPSON, L. T. </author> <year> 1998. </year> <title> Practical improvements to the construction and destruction 11 of static single assignment form. </title> <journal> Software: </journal> <note> Practice and Experience 28, 8 (July), 859881. </note>
Reference: <author> BRIGGS, P., COOPER, K. D., AND SIMPSON, L. T. </author> <year> 1997. </year> <title> Value numbering. </title> <journal> Software: </journal> <note> Practice and Experience 27, 6 (June), 701724. </note>
Reference: <author> BRIGGS, P., COOPER, K. D., AND TORCZON, L. </author> <year> 1994. </year> <title> Improvements to graph coloring register allocation. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 16, </volume> <month> 3 (May), 428455. </month>
Reference: <author> BUDIMLIC, Z. AND KENNEDY, K. </author> <year> 1997. </year> <title> Optimizing Java: </title> <journal> Theory and practice. Software: </journal> <note> Practice and Experience 9, 6 (June), 445463. </note>
Reference: <author> CHAITIN, G. J. </author> <year> 1982. </year> <title> Register allocation and spilling via graph coloring. </title> <booktitle> In Proceedings of the ACM Symposium on Compiler Construction (Boston, </booktitle> <address> Massachusetts, </address> <month> June). </month> <journal> ACM SIGPLAN Notices 17, </journal> <note> 6 (June), 98105. </note>
Reference: <author> CHAMBERS, C. </author> <year> 1992. </year> <title> The design and implementation of the SELF compiler, an optimizing compiler for object-oriented programming languages. </title> <type> Ph.D. thesis, </type> <institution> Stanford University. </institution>
Reference: <author> CHAMBERS, C. AND UNGAR, D. </author> <year> 1989. </year> <title> Customization: Optimizing compiler technology for SELF, a dynamically-typed object-oriented programming language. </title> <booktitle> In Proceedings of the ACM Conference on Programming Language Design and Implementation (Portland, </booktitle> <address> Oregon, </address> <month> June). </month> <journal> ACM SIGPLAN Notices 24, </journal> <volume> 7 (July), </volume> <pages> 146160. </pages>
Reference: <author> CHAMBERS, C. AND UNGAR, D. </author> <year> 1990. </year> <title> Iterative type analysis and extended message splitting: Optimizing dynamically-typed object-oriented programs. </title> <booktitle> In Proceedings of the ACM Conference on Programming Language Design and Implementation (White Plains, </booktitle> <address> New York, </address> <month> June). </month> <journal> ACM SIGPLAN Notices 25, </journal> <note> 6 (June), 150164. </note>
Reference: <author> CHAMBERS, C. AND UNGAR, D. </author> <year> 1991. </year> <title> Making pure object oriented languages practical. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications (Phoenix, Arizona, Oct.). ACM SIGPLAN Notices 26, </booktitle> <volume> 11 (Nov.), </volume> <pages> 115. </pages>
Reference: <author> CHAMBERS, C., UNGAR, D., AND LEE, E. </author> <year> 1989. </year> <title> An efficient implementation of Self, a dynamically-typed object-oriented language based on prototypes. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications (New Orleans, Louisiana, Oct.). ACM SIGPLAN Notices 24, </booktitle> <address> 10 (Oct.), </address> <month> 4970. </month>
Reference: <author> CHOW, F., CHAN, S., KENNEDY, R., LIU, S.-M., LO, R., AND TU, P. </author> <year> 1997. </year> <title> A new algorithm for partial redundancy elimination based on SSA form. </title> <note> See PLDI [1997], 273286. </note>
Reference: <author> CIERNIAK, M. AND LI, W. </author> <year> 1997. </year> <title> Optimizing Java bytecodes. </title> <journal> Concurrency: </journal> <note> Practice and Experience 9, 6 (June), 427444. </note>
Reference: <author> CLICK, C. </author> <year> 1995. </year> <title> Global code motion/global value numbering. </title> <booktitle> In Proceedings of the ACM Conference on Programming Language Design and Implementation (La Jolla, </booktitle> <address> California, </address> <month> June). </month> <journal> ACM SIGPLAN Notices 30, </journal> <note> 6 (June), 246257. </note>
Reference: <author> CMELIK, B. AND KEPPEL, D. </author> <year> 1994. </year> <title> Shade: A fast instruction-set simulator for execution profiling. </title> <booktitle> In Proceedings of the ACM Conference on the Measurement and Modeling of Computer Systems (Nashville, </booktitle> <address> Tennessee, </address> <month> May). </month> <booktitle> ACM ACM SIGMETRICS Performance Evaluation Review 22, </booktitle> <month> 1 (May), 128137. </month>
Reference: <author> COOPER, K. AND LU, J. </author> <year> 1997. </year> <title> Register promotion in C programs. </title> <note> See PLDI [1997], 308319. </note>
Reference: <author> COOPER, K. AND SIMPSON, L. T. </author> <year> 1995. </year> <title> SCC-based value numbering. </title> <type> Tech. Rep. </type> <institution> CRPC-TR95636-S, Rice University. </institution> <month> Oct. </month>
Reference: <author> CUTTS, Q. AND HOSKING, A. L. </author> <year> 1997. </year> <title> Analysing, profiling and optimising orthogonal persistence for Java. </title> <booktitle> In Proceedings of the Second International Workshop on Persistence and Java (Half Moon Bay, </booktitle> <address> California, </address> <month> Aug.), </month> <editor> M. P. Atkinson and M. J. Jordan, </editor> <title> Eds. </title> <type> Sun Microsystems Laboratories Technical Report 97-63, 107115. </type>
Reference: <author> CUTTS, Q., LENNON, S., AND HOSKING, A. L. </author> <year> 1998. </year> <title> Reconciling buffer management with persistence optimizations. </title> <note> See Atkinson and Morrison [1998]. </note>
Reference: <author> CYTRON, R., FERRANTE, J., ROSEN, B. K., WEGMAN, M. N., AND ZADECK, F. K. </author> <year> 1991. </year> <title> Efficiently computing static single assignment form and the program dependence graph. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 13, 4 (Oct.), </volume> <pages> 451490. </pages>
Reference: <author> DIWAN, A., MCKINLEY, K. S., AND MOSS, J. E. B. </author> <year> 1998. </year> <note> Type-based alias analysis. See PLDI [1998], 106117. </note>
Reference: <author> GERLEK, M. P., STOLTZ, E., AND WOLFE, M. </author> <year> 1995. </year> <title> Beyond induction variables: detecting and classifying sequences using a demand-driven SSA form. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 17, </volume> <month> 1 (Jan.), 85122. </month>
Reference: <author> GOSLING, J., JOY, B., AND STEELE, G. </author> <year> 1996. </year> <title> The Java Language Specification. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> GOSLING, J., YELLIN, F., </author> <title> AND THE JAVA TEAM. 1996. The Java Application Programming Interface. Vol. 1: Core Packages. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> HAVLAK, P. </author> <year> 1997. </year> <title> Nesting of reducible and irreducible loops. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 19, </volume> <month> 4 (July), 557567. </month>
Reference: <author> HOSKING, A. L., NYSTROM, N., CUTTS, Q., AND BRAHNMATH, K. </author> <year> 1998. </year> <title> Optimizing the read and write barriers for orthogonal persistence. </title> <note> See Atkinson and Morrison [1998]. </note>
Reference: <author> LARUS, J. R. AND HILFINGER, P. N. </author> <year> 1988. </year> <title> Detecting conflicts between structure accesses. </title> <booktitle> In Proceedings of the ACM Conference on Programming Language Design and Implementation (Atlanta, </booktitle> <address> Georgia, </address> <month> June). 2134. </month>
Reference: <author> LINDHOLM, T. AND YELLIN, F. </author> <year> 1996. </year> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> LO, R., CHOW, F., KENNEDY, R., LIU, S.-M., AND TU, P. </author> <year> 1998. </year> <title> Register promotion by sparse partial redundancy elimination of loads and stores. </title> <note> See PLDI [1998], 2637. </note>
Reference: <author> MOREL, E. AND RENVOISE, C. </author> <year> 1979. </year> <title> Global optimization by suppression of partial redundancies. </title> <journal> Commun. ACM 22, </journal> <volume> 2 (Feb.), </volume> <pages> 96103. </pages>
Reference: <author> PALSBERG, J. AND SCHWARTZBACH, M. I. </author> <year> 1994. </year> <title> Object-Oriented Type Systems. Wiley. </title> <booktitle> PLDI 1997. Proceedings of the ACM Conference on Programming Language Design and Implementation (Las Vegas, </booktitle> <address> Nevada, </address> <month> June). </month> <journal> ACM SIGPLAN Notices 32, </journal> <volume> 5 (May). </volume> <booktitle> PLDI 1998. Proceedings of the ACM Conference on Programming Language Design and Implementation (Montreal, </booktitle> <address> Canada, </address> <month> June). </month> <journal> ACM SIGPLAN Notices 33, </journal> <volume> 5 (May). </volume> <booktitle> POPL 1988. Conference Record of the ACM Symposium on Principles of Programming Languages (San Diego, </booktitle> <address> California, Jan.). </address>
Reference: <author> PROEBSTING, T. A., TOWNSEND, G., BRIDGES, P., HARTMAN, J. H., NEWSHAM, T., AND WATTERSON, S. A. </author> <year> 1997. </year> <title> Toba: Java for applications a way ahead of time (WAT) compiler. </title> <booktitle> In Proceedings of the Third USENIX Conference on Object-Oriented Technologies and Systems (Portland, </booktitle> <address> Oregon, </address> <month> June). </month> <note> USENIX. See http://www.cs.arizona.edu/sumatra/toba. </note>
Reference: <author> ROSEN, B. K., WEGMAN, M. N., AND ZADECK, F. K. </author> <year> 1988. </year> <title> Global value numbers and redundant computations. </title> <note> See POPL [1988], 1227. </note>
Reference: <author> SASTRY, A. V. S. AND JU, R. D. C. </author> <year> 1998. </year> <title> A new algorithm for scalar register promotion based on ssa form. </title> <note> See PLDI [1998], 1525. </note>
Reference: <author> SIMPSON, L. T. </author> <year> 1996. </year> <title> Value-driven redundancy elimination. </title> <type> Ph.D. thesis, </type> <institution> Rice University, Houston, Texas. </institution> <note> SunSoft 1997. Java On Solaris 2.6: A White Paper. SunSoft. </note>
Reference: <author> WEGMAN, M. N. AND ZADECK, F. K. </author> <year> 1991. </year> <title> Constant propagation with conditional branches. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 13, </volume> <month> 2 (Apr.), 181210. </month>
Reference: <author> WOLFE, M. </author> <year> 1996. </year> <title> High Performance Compilers for Parallel Computing. </title> <publisher> Addison-Wesley. </publisher> <pages> 12 </pages>
References-found: 43

