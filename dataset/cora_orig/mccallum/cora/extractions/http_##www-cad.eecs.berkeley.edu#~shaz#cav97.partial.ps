URL: http://www-cad.eecs.berkeley.edu/~shaz/cav97.partial.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/~shaz/recent.html
Root-URL: 
Email: Email: falur, brayton, tah, shaz, sriramrg@eecs.berkeley.edu  
Title: Partial-Order Reduction in Symbolic State Space Exploration  
Author: R. Alur R.K. Brayton T.A. Henzinger S. Qadeer S.K. Rajamani 
Address: Berkeley, CA 94720, U.S.A.  
Affiliation: EECS Department, University of California,  
Abstract: State space explosion is a fundamental obstacle in formal verification of designs and protocols. Several techniques for combating this problem have emerged in the past few years, among which two are significant: partial-order reductions and symbolic state space search. In asynchronous systems, interleavings of independent concurrent events are equivalent, and only a representative interleaving needs to be explored to verify local properties. Partial-order methods exploit this redundancy and visit only a subset of the reachable states. Symbolic techniques, on the other hand, capture the transition relation of a system and the set of reachable states as boolean functions. In many cases, these functions can be represented compactly using binary decision diagrams (BDDs). Traditionally, the two techniques have been practiced by two different schoolspartial-order methods with enumerative depth-first search for the analysis of asynchronous network protocols, and symbolic breadth-first search for the analysis of synchronous hardware designs. We combine both approaches and develop a method for using partial-order reduction techniques in symbolic BDD-based invariant checking. We present theoretical results to prove the correctness of the method, and experimental results to demonstrate its efficacy.
Abstract-found: 1
Intro-found: 1
Reference: [BCL91] <author> J.R. Burch, E.M. Clarke, and D.E. </author> <title> Long. Symbolic Model Checking with Partitioned Transition Relations. </title> <booktitle> In Proc. of the 28th Design Automation Conference, </booktitle> <pages> pages 403-407, </pages> <year> 1991. </year>
Reference-contexts: Instead of computing images with the whole transition relation, it suffices to compute symbolically an ample set of successor states, or any set of successor states that contains an ample set. This flexibility adds a new dimension to heuristic techniques like modified search order <ref> [BCL91] </ref> and use of don't cares [RAP + 95], in symbolic state space exploration. The following toy example illustrates the advantage of combining symbolic and partial-order methods. Consider n processes P 1 ; P 2 ; : : : ; P n .
Reference: [BCMD92] <author> J.R. Burch, E.M. Clarke, K.L. McMillan, and D.L. Dill. </author> <title> Symbolic Model Checking: 10 20 States and Beyond. </title> <journal> Information and Computation, </journal> <volume> 98 </volume> <pages> 142-170, </pages> <year> 1992. </year>
Reference-contexts: Two significant solutions that are supported by existing tools are symbolic model checking and partial-order reduction: In synchronous hardware designs, state space explosion manifests itself in the number of states growing exponentially with the number of state variables in the design. Symbolic model checking <ref> [BCMD92, McM93] </ref> avoids explicit construction of the state space. The transition relation of the system and state sets are modeled as boolean functions and represented using binary decision diagrams (BDDs). Model checking of temporal-logic properties, then, reduces to symbolic fixpoint computation that uses BDD-based image computation as a primitive. <p> The boolean functions are represented and manipulated as BDDs <ref> [BCMD92, McM93] </ref>. The functional representation of the transition relation is denoted by T , where T (s; ff; t) is true iff s ff ! t.
Reference: [BHSV + 96] <author> R.K. Brayton, G.D. Hachtel, A. Sangiovanni-Vincentelli, F. Somenzi, A. Aziz, S.-T. Cheng, S. Edwards, S. Khatri, Y. Kukimoto, A. Pardo, S. Qadeer, R.K. Ranjan, S. Sarwary, T.R. Shiple, G. Swamy, and T. Villa. </author> <title> VIS: A System for Verification and Synthesis. </title> <booktitle> In Proc. of the 8th International Conference on Computer-Aided Verification, vol. 1102 of Lecture Notes in Computer Science, </booktitle> <pages> pages 428-432. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: To impose interleaving semantics on a Verilog description, we added a scheduler to the model which nondeterministically schedules one process at a time. The symbolic reachability computation was performed with VIS <ref> [BHSV + 96] </ref>. The ample sets were manually computed as functions of global states and implemented using an ample scheduler that nondeterministically chooses one among a subset of enabled processes (corresponding to the ample set) at each state.
Reference: [CP96] <author> C.-T. Chou and D.A. Peled. </author> <title> Formal Verification of a Partial-Order Reduction Technique for Model Checking. </title> <booktitle> In Proc. of the Second International Workshop on Tools and Algorithms for the Construction and Analysis of Systems, vol. 1055 of Lecture Notes in Computer Science, </booktitle> <pages> pages 241-257. </pages> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: We generalize their results to obtain a modified breadth-first search algorithm, which can then be used to explore the reduced state space symbolically. A similar generalization is also obtained by <ref> [CP96] </ref> in the context of mechanically verifying the partial-order reduction techniques implemented in the model checker SPIN [HP94]. A labeled transition graph is a 5-tuple G = hV; S; S; ; !i with the following components: A finite set V of binary variables.
Reference: [Dil89] <author> D.L. Dill. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-Independent Circuits. </title> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: We model the arbiter cells as interacting asynchronously with each other. Four-phase signaling is used for communication between the arbiter cells. The circuit is verified in <ref> [Dil89] </ref>. We label all processes (processors and arbiter cells) by levels, starting at the leaves: at the lowest level, label the processors from left to right with the leftmost processor having the least label; then label the first level of arbiters from left to right; etc.
Reference: [DKR82] <author> D. Dolev, M. Klawe, and M. Rodeh. </author> <title> An O(n log n) Unidirectional Distributed Algorithm for Extrema Finding in a Circle. </title> <journal> Journal of Algorithms, </journal> <volume> 3 </volume> <pages> 245-260, </pages> <year> 1982. </year>
Reference-contexts: The purpose of the experiments is to investigate if savings in BDD sizes could be obtained, if such ample sets were available, and the answer is in the affirmative. 4.1 Leader-election protocol We consider the leader-election protocol described in <ref> [DKR82] </ref>. Extensive reduction in reachable state space sizes for this problem is reported by [HP94], using partial-order reductions with enumerative depth-first search of the state space. There are N processes connected in a circular ring, with a finite FIFO unidirectional queue between adjacent processes. <p> In fact, there are certain lines of code in the protocol that are never exercised in the former case but are exercised in the latter. Our method verifies the correctness claim as stated in <ref> [DKR82] </ref>, for all initial states. of processes. Two curves are shownone for the entire transition relation and another for the ample transition relation. Note that reachability analysis with the entire transition relation runs out of memory for 5 processes.
Reference: [God96] <author> P. Godefroid. </author> <title> Partial-Order Methods for the Verification of Concurrent Systems: An Approach to the State-Explosion Problem, </title> <booktitle> vol. 1032 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Consequently, during state space exploration, in each state it suffices to search an ample subset of the enabled transitions, rather than all of them, leading to significant reduction in the explored state space for some asynchronous protocols <ref> [HP94, God96] </ref>. In this work, we address the problem of combining partial-order reduction methods with symbolic state space traversal for invariant checking. <p> Partial-order methods explore only a subset of the enabled transitions at each state, called an ample set. For the automatic implementation of our method, ample sets have to be computed automatically in a symbolic setting. In Section 3, we present a symbolic version of a standard algorithm <ref> [God96] </ref> for computing ample sets. 2 Partial-Order Reduction for Breadth-First Search In [Val91, Pel93, GW94], partial-order reductions are obtained by a modified depth-first search of the state space. <p> We note that depth-first search can also be used to construct a partial-order reduction. For this purpose, the set of states in the stack can be used as a history function <ref> [God96] </ref>. Verification using partial-order reductions Partial-order reductions are sound and complete for checking the invariance of local properties. We formalize local properties as independence-preserving regions. <p> We now show that a heuristic for computing persistent sets in <ref> [God96] </ref> can be implemented symbolically to yield a persistent transition relation. We assume a model of the transition system annotated with processes and give a symbolic procedure for computing persistent sets in this model. A process structure is a structured description of a labeled transition graph. <p> We call the resulting set P (s) a persistent set of processes at s. The algorithm described above checks only a sufficient condition for persistence; it is possible to formulate more complex schemes that yield smaller persistent sets <ref> [God96] </ref>. Our aim is to compute a boolean function I such that I (s; p) is true iff p 2 P (s) for the global state s. In effect, I encodes persistent sets of processes for all global states. <p> The dependence relation can be overapproximated by sufficient syntactic checks (e.g., disjointness of support variables) <ref> [God96] </ref>.
Reference: [GW94] <author> P. Godefroid and P. Wolper. </author> <title> A Partial Approach to Model Checking. </title> <journal> Information and Computation, </journal> <volume> 110 </volume> <pages> 305-326, </pages> <year> 1994. </year>
Reference-contexts: Partial-order semantics described in [Maz88] for the composition of concurrent processes group equivalent interleavings of concurrent events together into traces. It has been shown that sometimes it suffices to explore just one representative interleaving from each trace for verifying temporal-logic properties <ref> [Val91, Pel93, GW94] </ref>. Consequently, during state space exploration, in each state it suffices to search an ample subset of the enabled transitions, rather than all of them, leading to significant reduction in the explored state space for some asynchronous protocols [HP94, God96]. <p> For the automatic implementation of our method, ample sets have to be computed automatically in a symbolic setting. In Section 3, we present a symbolic version of a standard algorithm [God96] for computing ample sets. 2 Partial-Order Reduction for Breadth-First Search In <ref> [Val91, Pel93, GW94] </ref>, partial-order reductions are obtained by a modified depth-first search of the state space. We generalize their results to obtain a modified breadth-first search algorithm, which can then be used to explore the reduced state space symbolically.
Reference: [HP94] <author> G.J. Holzmann and D.A. Peled. </author> <title> An Improvement in Formal Verification. </title> <booktitle> In Proc. of the 7th International Conference on Formal Description Techniques, </booktitle> <pages> pages 197-211. </pages> <publisher> Chapman & Hall, </publisher> <year> 1994. </year>
Reference-contexts: Consequently, during state space exploration, in each state it suffices to search an ample subset of the enabled transitions, rather than all of them, leading to significant reduction in the explored state space for some asynchronous protocols <ref> [HP94, God96] </ref>. In this work, we address the problem of combining partial-order reduction methods with symbolic state space traversal for invariant checking. <p> We generalize their results to obtain a modified breadth-first search algorithm, which can then be used to explore the reduced state space symbolically. A similar generalization is also obtained by [CP96] in the context of mechanically verifying the partial-order reduction techniques implemented in the model checker SPIN <ref> [HP94] </ref>. A labeled transition graph is a 5-tuple G = hV; S; S; ; !i with the following components: A finite set V of binary variables. The set S = 2 V of all possible valuations for the variables, called the state set. A set of initial states S S. <p> Extensive reduction in reachable state space sizes for this problem is reported by <ref> [HP94] </ref>, using partial-order reductions with enumerative depth-first search of the state space. There are N processes connected in a circular ring, with a finite FIFO unidirectional queue between adjacent processes. Each process has a unique id associated with it. <p> The transition graph of the protocol is acyclic and hence every persistent set is ample. Exponential partial-order reductions on this example are reported in <ref> [HP94] </ref> for a ring of 5 processes. There, however, the id's of the processes are assumed to be initialized to 0, 1, 2, 3, and 4 in circular order around the ring. Though the protocol is verified for this initial state, it is not verified for other initial states.
Reference: [Maz88] <author> A. Mazurkiewicz. </author> <title> Basic Notions of Trace Theory. In Workshop on Linear Time, Branching Time, and Partial Order in Logics and Models for Concurrency, </title> <booktitle> vol. 354 of Lecture Notes in Computer Science, </booktitle> <pages> pages 285-363. </pages> <publisher> Springer, </publisher> <year> 1988. </year>
Reference-contexts: One source of state space explosion are the n! possible interleavings for n concurrent events. If the concurrent events are independent, then all interleavings are equivalent in that they lead to the same state. Partial-order semantics described in <ref> [Maz88] </ref> for the composition of concurrent processes group equivalent interleavings of concurrent events together into traces. It has been shown that sometimes it suffices to explore just one representative interleaving from each trace for verifying temporal-logic properties [Val91, Pel93, GW94]. <p> Intuitively, two action sequences are partial-order equivalent if one can be obtained from the other by repeatedly commuting adjacent independent actions. The set of all action sequences partial-order equivalent to an action sequence ff is represented by [ff]. Such an equivalence class is called a Mazurkiewicz trace <ref> [Maz88] </ref>. Persistent functions The actions in the subset of actions selected to be explored from a state should be independent, not only of all the remaining actions enabled in state s, but also independent of all actions enabled in a state reachable from s by executing other actions.
Reference: [McM93] <author> K.L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: Two significant solutions that are supported by existing tools are symbolic model checking and partial-order reduction: In synchronous hardware designs, state space explosion manifests itself in the number of states growing exponentially with the number of state variables in the design. Symbolic model checking <ref> [BCMD92, McM93] </ref> avoids explicit construction of the state space. The transition relation of the system and state sets are modeled as boolean functions and represented using binary decision diagrams (BDDs). Model checking of temporal-logic properties, then, reduces to symbolic fixpoint computation that uses BDD-based image computation as a primitive. <p> The boolean functions are represented and manipulated as BDDs <ref> [BCMD92, McM93] </ref>. The functional representation of the transition relation is denoted by T , where T (s; ff; t) is true iff s ff ! t.
Reference: [Pel93] <author> D.A. Peled. </author> <title> All from One, One for All: On Model Checking Using Representatives. </title> <booktitle> In Proc. of the 5th International Conference on Computer-Aided Verification, vol. 697 of Lecture Notes in Computer Science, </booktitle> <pages> pages 409-423. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference-contexts: Partial-order semantics described in [Maz88] for the composition of concurrent processes group equivalent interleavings of concurrent events together into traces. It has been shown that sometimes it suffices to explore just one representative interleaving from each trace for verifying temporal-logic properties <ref> [Val91, Pel93, GW94] </ref>. Consequently, during state space exploration, in each state it suffices to search an ample subset of the enabled transitions, rather than all of them, leading to significant reduction in the explored state space for some asynchronous protocols [HP94, God96]. <p> For the automatic implementation of our method, ample sets have to be computed automatically in a symbolic setting. In Section 3, we present a symbolic version of a standard algorithm [God96] for computing ample sets. 2 Partial-Order Reduction for Breadth-First Search In <ref> [Val91, Pel93, GW94] </ref>, partial-order reductions are obtained by a modified depth-first search of the state space. We generalize their results to obtain a modified breadth-first search algorithm, which can then be used to explore the reduced state space symbolically.
Reference: [RAP + 95] <author> R.K. Ranjan, A. Aziz, B. Plessier, C. Pixley, and R.K. Brayton. </author> <title> Efficient Formal Design Verification: Data Structures + Algorithms. </title> <booktitle> In Workshop Notes of the International Workshop on Logic Synthesis, </booktitle> <year> 1995. </year>
Reference-contexts: This flexibility adds a new dimension to heuristic techniques like modified search order [BCL91] and use of don't cares <ref> [RAP + 95] </ref>, in symbolic state space exploration. The following toy example illustrates the advantage of combining symbolic and partial-order methods. Consider n processes P 1 ; P 2 ; : : : ; P n .
Reference: [Val91] <author> A. Valmari. </author> <title> Stubborn Sets for Reduced State Space Generation. </title> <booktitle> In Advances in Petri Nets, vol. 483 of Lecture Notes in Computer Science, </booktitle> <pages> pages 491-515. </pages> <publisher> Springer, </publisher> <year> 1991. </year>
Reference-contexts: Partial-order semantics described in [Maz88] for the composition of concurrent processes group equivalent interleavings of concurrent events together into traces. It has been shown that sometimes it suffices to explore just one representative interleaving from each trace for verifying temporal-logic properties <ref> [Val91, Pel93, GW94] </ref>. Consequently, during state space exploration, in each state it suffices to search an ample subset of the enabled transitions, rather than all of them, leading to significant reduction in the explored state space for some asynchronous protocols [HP94, God96]. <p> For the automatic implementation of our method, ample sets have to be computed automatically in a symbolic setting. In Section 3, we present a symbolic version of a standard algorithm [God96] for computing ample sets. 2 Partial-Order Reduction for Breadth-First Search In <ref> [Val91, Pel93, GW94] </ref>, partial-order reductions are obtained by a modified depth-first search of the state space. We generalize their results to obtain a modified breadth-first search algorithm, which can then be used to explore the reduced state space symbolically.
References-found: 14

