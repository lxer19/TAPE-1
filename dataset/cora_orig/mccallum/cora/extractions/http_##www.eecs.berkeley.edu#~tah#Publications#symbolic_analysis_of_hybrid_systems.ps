URL: http://www.eecs.berkeley.edu/~tah/Publications/symbolic_analysis_of_hybrid_systems.ps
Refering-URL: http://www.eecs.berkeley.edu/~tah/Publications/symbolic_analysis_of_hybrid_systems.html
Root-URL: 
Title: Symbolic Analysis of Hybrid Systems  
Author: Rajeev Alur Thomas A. Henzinger Howard Wong-Toi 
Abstract: A hybrid system is a dynamical system whose behavior exhibits both discrete and continuous change. A hybrid automaton is a mathematical model for hybrid systems, which combines, in a single formalism, automaton transitions for capturing discrete change with differential equations for capturing continuous change. In this survey, we demonstrate symbolic algorithms for the verification and controller synthesis of linear hybrid automata, a subclass of hybrid automata that can be analyzed automatically. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alur, C. Courcoubetis, and D. Dill. </author> <title> Model checking in dense real time. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 2-34, </pages> <year> 1993. </year>
Reference-contexts: Here, we conclude with some noteworthy aspects of symbolic analysis. Timed Automata. A timed automaton [3] is a linear hybrid automaton in which all continuous variables change at the constant rate 1. Model checking of temporal requirements of a timed automaton, unlike a linear hybrid automaton, is decidable <ref> [1] </ref>. Furthermore, symbolic analysis of a timed automaton requires the manipulation of a special class of linear constraints, namely, disjunctions of inequalities of the form x ~ c 6 and x y ~ c, for clock vectors x and y [10].
Reference: [2] <author> R. Alur, C. Courcoubetis, N. Halbwachs, T. Hen-zinger, P.-H. Ho, X. Nicollin, A. Olivero, J. Sifakis, and S. Yovine. </author> <title> The algorithmic analysis of hybrid systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 138 </volume> <pages> 3-34, </pages> <year> 1995. </year>
Reference-contexts: The model of our choice is the hybrid automaton|a finite automaton augmented with a finite number of real-valued variables that change continuously, as specified by differential equations and differential inequalities <ref> [2] </ref>. fl A preliminary version of this paper appeared in the Proceedings of the 36th Annual IEEE Conference on Decision and Control (CDC 1997), pp. 702-707. y This research was supported in part by the ONR YIP award N00014-95-1-0520, by the NSF CAREER award CCR-9501708, by the NSF grant CCR-9504469, by <p> A convex linear predicate is a finite conjunction of linear inequalities. A linear predicate is a finite disjunction of convex linear predicates. A linear hybrid automaton is a system A = (X; V; flow ; inv ; init; E; jump; ; syn) that consists of the following components <ref> [2] </ref>: Variables A finite ordered set X = fx 1 ; x 2 ; : : : ; x n g of real-valued variables. Control modes A finite set V of control modes.
Reference: [3] <author> R. Alur and D. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: Here, we conclude with some noteworthy aspects of symbolic analysis. Timed Automata. A timed automaton <ref> [3] </ref> is a linear hybrid automaton in which all continuous variables change at the constant rate 1. Model checking of temporal requirements of a timed automaton, unlike a linear hybrid automaton, is decidable [1].
Reference: [4] <author> R. Alur, T. Henzinger, and P.-H. Ho. </author> <title> Automatic symbolic verification of embedded systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(3) </volume> <pages> 181-201, </pages> <year> 1996. </year>
Reference-contexts: can be extended to a class of hybrid automata called linear hybrid automata by admitting linear constraints on continuous variables, namely, disjunctions of inequalities of the form Ax ~ c, where A is a constant matrix, c is a constant vector, and ~ 2 f; g is an inequality operator <ref> [4] </ref>. <p> A state assertion ' is linear if for every control mode v 2 X, the predicate '(v) is linear. If A is a linear hybrid automaton, and ' a state assertion for A, then Post (A) is computable, and is itself a linear state assertion <ref> [4] </ref>. This theorem enables the efficient automatic analysis of safety requirements and more general temporal-logic requirements for linear hybrid automata. 3.2 Safety verification of the pursuit game We wish to verify that the evader's strategy is a winning strategy for the given initial position.
Reference: [5] <author> R. Alur and T. Henzinger. </author> <title> Modularity for timed and hybrid systems. </title> <booktitle> In Proc. Ninth CONCUR, </booktitle> <volume> LNCS 1243, </volume> <pages> pp. 74-88, </pages> <year> 1997. </year>
Reference-contexts: In controller synthesis, this issue arises even for safety requirements: we do not want a controller which would avoid the unsafe states by forcing infinitely many controlled switches within a finite duration of time. The interested reader should consult <ref> [5, 13] </ref> for treatment of the divergence problem.
Reference: [6] <author> J. Burch, E. Clarke, K. McMillan, D. Dill, and L. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <journal> Information and Computation, </journal> <volume> 98(2) </volume> <pages> 142-70, </pages> <year> 1992. </year>
Reference-contexts: Because of its ability to deal with very large state spaces, symbolic model checking has been proven an effective technique for debugging of complex hardware <ref> [6] </ref>. <p> The variables evolve in mode clockwise according to the differential equations _e = 5 and _ t = 1, and the differential inequality _p 2 <ref> [1=2; 6] </ref>. The invariant conditions 0 e; p 40 and the mode switches appearing as selfloops above the modes reflect the fact that the track is circular and 40 meters long.
Reference: [7] <author> E. Clarke and E. Emerson. </author> <title> Design and synthesis of synchronization skeletons using branching-time temporal logic. </title> <booktitle> In Workshop on Logic of Programs, LNCS 131, </booktitle> <year> 1981. </year>
Reference-contexts: For analyzing hybrid systems, we build on the model-checking technology, in which a formal model of the system is checked, fully automatically, for correctness with respect to a requirement expressed in temporal logic <ref> [7, 12] </ref>. Model checking requires exploration of the entire state space of the system. For discrete finite-state systems, this can be done enumer-atively, by considering each state individually, or symbolically, by computing with constraints over boolean variables that encode state sets.
Reference: [8] <author> T. Henzinger. </author> <title> The theory of hybrid automata. </title> <booktitle> In Proc. 11th LICS, </booktitle> <pages> pp. 278-292, </pages> <year> 1996. </year>
Reference-contexts: _ (e + 40 p) mod 40 2 t)); (counter ; (0 t 2 ^ 0 e; p 40) ^ (e + 40 p) mod 40 11 (2 t)); (rescued ; false)g: 4 Discussion We refer the reader to [9] for more information on HyTech and its applications, and to <ref> [8] </ref> for a survey of theoretical results. Here, we conclude with some noteworthy aspects of symbolic analysis. Timed Automata. A timed automaton [3] is a linear hybrid automaton in which all continuous variables change at the constant rate 1.
Reference: [9] <author> T. Henzinger, P.-H. Ho and H. Wong-Toi. HyTech: </author> <title> a model checker for hybrid systems. Software Tools for Technology Transfer, 1(1). </title> <publisher> Springer, </publisher> <year> 1997. </year>
Reference-contexts: The procedure is implemented in the verifier HyTech <ref> [9] </ref>. Model checking can be used to provide more than a mere "yes" or "no" answer to the question of whether a system satisfies a correctness requirement. HyTech provides also diagnostic information that aids in design and debugging. <p> e; p 40) ^ ((p + 40 e) mod 40 11 _ (e + 40 p) mod 40 2 t)); (counter ; (0 t 2 ^ 0 e; p 40) ^ (e + 40 p) mod 40 11 (2 t)); (rescued ; false)g: 4 Discussion We refer the reader to <ref> [9] </ref> for more information on HyTech and its applications, and to [8] for a survey of theoretical results. Here, we conclude with some noteworthy aspects of symbolic analysis. Timed Automata. A timed automaton [3] is a linear hybrid automaton in which all continuous variables change at the constant rate 1.
Reference: [10] <author> T. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111(2) </volume> <pages> 193-244, </pages> <year> 1994. </year>
Reference-contexts: Furthermore, symbolic analysis of a timed automaton requires the manipulation of a special class of linear constraints, namely, disjunctions of inequalities of the form x ~ c 6 and x y ~ c, for clock vectors x and y <ref> [10] </ref>. Con--sequently, the analysis can be performed using more efficient representations. Linear Approximations. While linear hybrid automata are expressive compared to other formalisms for which model checking is possible, such as finite automata and timed automata, many embedded applications do not meet the linearity constraints.
Reference: [11] <author> O. Maler, A. Pnueli, and J. Sifakis. </author> <title> On the synthesis of discrete controllers for timed systems. </title> <booktitle> In STACS 95, </booktitle> <volume> LNCS 900, </volume> <pages> pp. 229-242, </pages> <year> 1995. </year>
Reference-contexts: The goal of parametric analysis is to determine necessary and sufficient constraints on the parameters under which safety violations cannot occur. HyTech can perform such analysis for linear hybrid automata. Symbolic analysis methods can be applied to the problem of generating controller designs in addition to verifying existing designs <ref> [11, 13] </ref>. This approach provides a methodology to synthesize provably correct controllers, thereby avoiding the need for verification. The plant is modeled as a linear hybrid automaton whose mode-switches are partitioned into controllable and uncontrollable.
Reference: [12] <author> J. Queille and J. Sifakis. </author> <title> Specification and verification of concurrent systems in CESAR. </title> <booktitle> In Fifth Intl. Symp. on Programming, </booktitle> <volume> LNCS 137, </volume> <pages> pp. 337-351, </pages> <year> 1981. </year>
Reference-contexts: For analyzing hybrid systems, we build on the model-checking technology, in which a formal model of the system is checked, fully automatically, for correctness with respect to a requirement expressed in temporal logic <ref> [7, 12] </ref>. Model checking requires exploration of the entire state space of the system. For discrete finite-state systems, this can be done enumer-atively, by considering each state individually, or symbolically, by computing with constraints over boolean variables that encode state sets.
Reference: [13] <author> H. Wong-Toi. </author> <title> The synthesis of controllers for linear hybrid automata. </title> <booktitle> In Proc. 36th CDC, </booktitle> <year> 1997. </year> <month> 7 </month>
Reference-contexts: The goal of parametric analysis is to determine necessary and sufficient constraints on the parameters under which safety violations cannot occur. HyTech can perform such analysis for linear hybrid automata. Symbolic analysis methods can be applied to the problem of generating controller designs in addition to verifying existing designs <ref> [11, 13] </ref>. This approach provides a methodology to synthesize provably correct controllers, thereby avoiding the need for verification. The plant is modeled as a linear hybrid automaton whose mode-switches are partitioned into controllable and uncontrollable. <p> In controller synthesis, this issue arises even for safety requirements: we do not want a controller which would avoid the unsafe states by forcing infinitely many controlled switches within a finite duration of time. The interested reader should consult <ref> [5, 13] </ref> for treatment of the divergence problem.
References-found: 13

