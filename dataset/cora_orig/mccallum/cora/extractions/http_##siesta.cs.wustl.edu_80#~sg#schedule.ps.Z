URL: http://siesta.cs.wustl.edu:80/~sg/schedule.ps.Z
Refering-URL: http://siesta.cs.wustl.edu:80/~sg/
Root-URL: 
Email: fsg, jp, surig@cs.wustl.edu  
Title: On-line Scheduling with Hard Deadlines (Extended Abstract)  
Author: Sally A. Goldman and Jyoti Parwatikar and Subhash Suri 
Address: St. Louis MO 63130, USA  
Affiliation: Dept. of CS, Washington University,  
Abstract: We study non-preemptive, online admission control in the hard deadline model: each job must be either serviced prior to its deadline, or be rejected. Our setting consists of a single resource that services an online sequence of jobs; each job has a length indicating the length of time for which it needs the resource, and a delay indicating the maximum time it can wait for the service to be started. The goal is to maximize total resource utilization. We obtain a series of results, under varying assumptions of job lengths and delays.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. Awerbuch, Y. Azar, and S. Plotkin. </author> <title> Throughput-competitive on-line routing. </title> <booktitle> In Proc. of the 34th Ann. Symp. on Foundations of Comp. Sci., </booktitle> <pages> pp. 32-41. </pages> <publisher> IEEE, Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1993. </year>
Reference-contexts: Delay 1 1:5 f1; kg Arbitrary 4 f1; kg Uniform dke f1; 2; 2 2 ; : : : ; 2 c g Arbitrary 3 (c + 1) f1; 2; 2 2 ; : : : ; 2 c g Uniform 2:5 (c + 1) <ref> [1; 2 c ] </ref> Arbitrary 6 (c + 1) [1; 2 c ] "Uniform" 5 (c + 1) Table 1. Summary of Results. We require that k is a real number greater than 1 and that c is a known integer. <p> kg Arbitrary 4 f1; kg Uniform dke f1; 2; 2 2 ; : : : ; 2 c g Arbitrary 3 (c + 1) f1; 2; 2 2 ; : : : ; 2 c g Uniform 2:5 (c + 1) <ref> [1; 2 c ] </ref> Arbitrary 6 (c + 1) [1; 2 c ] "Uniform" 5 (c + 1) Table 1. Summary of Results. We require that k is a real number greater than 1 and that c is a known integer. <p> ATM networks are well-suited for latency-sensitive real-time traffic, such as video, voice, and multimedia. Consequently, there has been considerable recent work on non-preemptive admission control <ref> [1, 11, 3, 2, 4, 7] </ref>. Our work is most closely related to, and a generalization of, Lipton and Tomkins [11]. Our main results are summarized in Table 1. (By appropriate scaling, we can assume that the shortest job has length one.
Reference: 2. <author> B. Awerbuch, Y. Azar, S. Plotkin, and O. Waarts. </author> <title> Competitive routing of virtual circuits with unknown durations. </title> <booktitle> In Proc. of the 5th Ann. ACM-SIAM Symp. on Discrete Algs., </booktitle> <pages> pp. 321-327. </pages> <publisher> SIAM, </publisher> <address> San Fransico, CA, </address> <year> 1994. </year>
Reference-contexts: ATM networks are well-suited for latency-sensitive real-time traffic, such as video, voice, and multimedia. Consequently, there has been considerable recent work on non-preemptive admission control <ref> [1, 11, 3, 2, 4, 7] </ref>. Our work is most closely related to, and a generalization of, Lipton and Tomkins [11]. Our main results are summarized in Table 1. (By appropriate scaling, we can assume that the shortest job has length one.
Reference: 3. <author> B. Awerbuch, Y. Bartal, A. Fiat, and A. Rosen. </author> <title> Competitive non-preemptive call control. </title> <booktitle> In Proc. of the 5th Ann. ACM-SIAM Symp. on Discrete Algs., </booktitle> <pages> pp. 312-320. </pages> <publisher> SIAM, </publisher> <address> San Fransico, CA, </address> <year> 1994. </year>
Reference-contexts: ATM networks are well-suited for latency-sensitive real-time traffic, such as video, voice, and multimedia. Consequently, there has been considerable recent work on non-preemptive admission control <ref> [1, 11, 3, 2, 4, 7] </ref>. Our work is most closely related to, and a generalization of, Lipton and Tomkins [11]. Our main results are summarized in Table 1. (By appropriate scaling, we can assume that the shortest job has length one. <p> Finally, we extend our results to jobs of multiple lengths. 1.2 Previous Work Our work is most closely related to the work of Lipton and Tomkins [11] and Awerbuch, Bartal, Fiat, and Rosen <ref> [3] </ref>. The paper of Lipton and Tomkins [11] considers scheduling without delays, and we extend their work by considering several models of delays. If all delays are set to zero, our results achieve the same performance as [11]. <p> If all delays are set to zero, our results achieve the same performance as [11]. Finally, our results can be combined with the methods of Awerbuch et. al <ref> [3] </ref> to handle routing on a tree network or the situation in which the bandwidth of the requests can vary. The paper by Awerbuch, Bartal, Fiat, and Rosen [3] considers admission control for tree networks. Again, no delays are allowed, meaning a request must be either scheduled immediately or rejected. <p> Finally, our results can be combined with the methods of Awerbuch et. al <ref> [3] </ref> to handle routing on a tree network or the situation in which the bandwidth of the requests can vary. The paper by Awerbuch, Bartal, Fiat, and Rosen [3] considers admission control for tree networks. Again, no delays are allowed, meaning a request must be either scheduled immediately or rejected. They present a general technique called "classify-and-randomly-select" that randomly selects a bandwidth b, length `, and benefit f , all of which are powers of 2. <p> While our algorithm is similar to the Marriage Algorithm of Lipton and Tomkins [11], our analysis is completely different. Note that the classify-and-randomly-select paradigm <ref> [3] </ref> in this case would just pick one randomly selected length to schedule. Our approach, in contrast, seems much more reasonable in practice: though there is a bias in favor of longer jobs, shorter length jobs also have a chance of being scheduled.
Reference: 4. <author> B. Awerbuch, R. Gawlick, T. Leighton, and Y. Rabani. </author> <title> On-line admission control and circuit routing for high performance computing and communication. </title> <booktitle> In Proc. of the 35th Ann. Symp. on Foundations of Comp. Sci., </booktitle> <pages> pp. 412-423. </pages> <publisher> IEEE, Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1994. </year>
Reference-contexts: ATM networks are well-suited for latency-sensitive real-time traffic, such as video, voice, and multimedia. Consequently, there has been considerable recent work on non-preemptive admission control <ref> [1, 11, 3, 2, 4, 7] </ref>. Our work is most closely related to, and a generalization of, Lipton and Tomkins [11]. Our main results are summarized in Table 1. (By appropriate scaling, we can assume that the shortest job has length one.
Reference: 5. <author> S. Ben-David, A. Borodin, R. Karp, G. Tardos, and A. Wigderson. </author> <title> On the power of randomization in on-line algorithms. </title> <journal> Algorithmica, </journal> <volume> 11(1) </volume> <pages> 2-14, </pages> <year> 1994. </year>
Reference-contexts: As the table shows, for these settings we are able 4 We consider the oblivious competitive ratio in which the input sequence is selected independently of the random choices of the algorithm <ref> [5] </ref>. to get stronger results by enforcing uniform delays; this seems like a reasonable way to treat equal-length jobs.
Reference: 6. <author> A. Borodin, N. Linial, and M. Saks. </author> <title> An optimal online algorithm for metrical task systems. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 745-763, </pages> <year> 1992. </year>
Reference-contexts: The requests or packets must be serviced online in these applications since the future arrival sequence is generally not known. We use competitive analysis 4 to measure the quality of our algorithms <ref> [12, 10, 6] </ref>; we consider both deterministic as well as randomized algorithms. 1.1 Our Results In earlier work, admission control algorithms have allowed preemption [8, 9], however, newer technologies seem to favor non-preemption. In particular, high speed networks based on packet switching technology (e.g. <p> We let G A (S) = P When the algorithm being studied is clear, we just use G (J ) and G (S). We use standard competitive analysis <ref> [12, 10, 6] </ref> to evaluate our algorithms. Namely, let fl be an optimal solution. We say that algorithm A is c-competitive if 8S : c G A (S) j fl j.
Reference: 7. <author> A. Feldmann, B. Maggs, J. Sgall, D. Sleator, and A. Tomkins. </author> <title> Competitive analysis of call admission algorithms that allow delay. </title> <type> Technical Report CMU-CS-95-102, </type> <institution> School of Computer Science, </institution> <address> CMU, Pittsburgh, PA 15213, </address> <year> 1995. </year>
Reference-contexts: ATM networks are well-suited for latency-sensitive real-time traffic, such as video, voice, and multimedia. Consequently, there has been considerable recent work on non-preemptive admission control <ref> [1, 11, 3, 2, 4, 7] </ref>. Our work is most closely related to, and a generalization of, Lipton and Tomkins [11]. Our main results are summarized in Table 1. (By appropriate scaling, we can assume that the shortest job has length one. <p> There are instances (a large number of jobs arriving at roughly the same time, but each with a large allowable delay) where the optimal solution with delays is significantly better than that with no delays. While Feldmann et. al <ref> [7] </ref> show that there are worst-case inputs where delay does not help, we believe that in practice delay will help increase the resource utilization significantly. <p> Allowing users to specify a maximum delay would eliminate such behavior. Our algorithm is also more natural for real-life use since it does not pre-select the lengths of the requests to accept. Finally, Feldmann et. al <ref> [7] </ref> consider scheduling jobs with delays for a network that is a linear array of n nodes. They show that in some cases fixed length delays do not help.
Reference: 8. <author> J. Garay and I. Gopal. </author> <title> Call preemption in communication networks. </title> <booktitle> In Proc. of INFOCOM '92, </booktitle> <pages> pp. 1043-1050. </pages> <publisher> IEEE, Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1992. </year>
Reference-contexts: We use competitive analysis 4 to measure the quality of our algorithms [12, 10, 6]; we consider both deterministic as well as randomized algorithms. 1.1 Our Results In earlier work, admission control algorithms have allowed preemption <ref> [8, 9] </ref>, however, newer technologies seem to favor non-preemption. In particular, high speed networks based on packet switching technology (e.g. Asynchronous Transfer Mode) are connection oriented, meaning that resources are reserved during a call set up, and the overhead of this setup makes preemption highly undesirable.
Reference: 9. <author> J. Garay, I. Gopal, S. Kutten, Y. Mansour, and M. Yung. </author> <title> Efficient on-line call control algorithms. </title> <booktitle> In Proc. of the 2nd Israel Symp. on Theory and Computing Systems, </booktitle> <pages> pp. 285-293. </pages> <publisher> IEEE, Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1993. </year>
Reference-contexts: We use competitive analysis 4 to measure the quality of our algorithms [12, 10, 6]; we consider both deterministic as well as randomized algorithms. 1.1 Our Results In earlier work, admission control algorithms have allowed preemption <ref> [8, 9] </ref>, however, newer technologies seem to favor non-preemption. In particular, high speed networks based on packet switching technology (e.g. Asynchronous Transfer Mode) are connection oriented, meaning that resources are reserved during a call set up, and the overhead of this setup makes preemption highly undesirable.
Reference: 10. <author> A. Karlin, M. Manasse, L. Rudolpoh, and D. Sleator. </author> <title> Competitive snoopy caching. </title> <journal> Algorithmica, </journal> <volume> 3(1) </volume> <pages> 79-119, </pages> <year> 1988. </year>
Reference-contexts: The requests or packets must be serviced online in these applications since the future arrival sequence is generally not known. We use competitive analysis 4 to measure the quality of our algorithms <ref> [12, 10, 6] </ref>; we consider both deterministic as well as randomized algorithms. 1.1 Our Results In earlier work, admission control algorithms have allowed preemption [8, 9], however, newer technologies seem to favor non-preemption. In particular, high speed networks based on packet switching technology (e.g. <p> We let G A (S) = P When the algorithm being studied is clear, we just use G (J ) and G (S). We use standard competitive analysis <ref> [12, 10, 6] </ref> to evaluate our algorithms. Namely, let fl be an optimal solution. We say that algorithm A is c-competitive if 8S : c G A (S) j fl j.
Reference: 11. <author> R. Lipton and A. Tomkins. </author> <title> Online interval scheduling. </title> <booktitle> In Proc. of the 5th Ann. ACM-SIAM Symp. on Discrete Algs., </booktitle> <pages> pp. 302-311. </pages> <publisher> SIAM, </publisher> <address> San Fransico, CA, </address> <year> 1994. </year>
Reference-contexts: ATM networks are well-suited for latency-sensitive real-time traffic, such as video, voice, and multimedia. Consequently, there has been considerable recent work on non-preemptive admission control <ref> [1, 11, 3, 2, 4, 7] </ref>. Our work is most closely related to, and a generalization of, Lipton and Tomkins [11]. Our main results are summarized in Table 1. (By appropriate scaling, we can assume that the shortest job has length one. <p> ATM networks are well-suited for latency-sensitive real-time traffic, such as video, voice, and multimedia. Consequently, there has been considerable recent work on non-preemptive admission control [1, 11, 3, 2, 4, 7]. Our work is most closely related to, and a generalization of, Lipton and Tomkins <ref> [11] </ref>. Our main results are summarized in Table 1. (By appropriate scaling, we can assume that the shortest job has length one. Uniform delay means that jobs of the same length have the same delay. <p> Additionally, if the delays are uniform, meaning that equal-length jobs have the same maximum delay, we give a randomized algorithm that is dke -competitive. For k an integer, this algorithm is strongly 2-competitive. This generalizes the result of Lipton and Tomkins <ref> [11] </ref>, who consider jobs with no delays, and settles an open question of their paper. There are instances (a large number of jobs arriving at roughly the same time, but each with a large allowable delay) where the optimal solution with delays is significantly better than that with no delays. <p> Finally, we extend our results to jobs of multiple lengths. 1.2 Previous Work Our work is most closely related to the work of Lipton and Tomkins <ref> [11] </ref> and Awerbuch, Bartal, Fiat, and Rosen [3]. The paper of Lipton and Tomkins [11] considers scheduling without delays, and we extend their work by considering several models of delays. If all delays are set to zero, our results achieve the same performance as [11]. <p> Finally, we extend our results to jobs of multiple lengths. 1.2 Previous Work Our work is most closely related to the work of Lipton and Tomkins <ref> [11] </ref> and Awerbuch, Bartal, Fiat, and Rosen [3]. The paper of Lipton and Tomkins [11] considers scheduling without delays, and we extend their work by considering several models of delays. If all delays are set to zero, our results achieve the same performance as [11]. <p> the work of Lipton and Tomkins <ref> [11] </ref> and Awerbuch, Bartal, Fiat, and Rosen [3]. The paper of Lipton and Tomkins [11] considers scheduling without delays, and we extend their work by considering several models of delays. If all delays are set to zero, our results achieve the same performance as [11]. Finally, our results can be combined with the methods of Awerbuch et. al [3] to handle routing on a tree network or the situation in which the bandwidth of the requests can vary. The paper by Awerbuch, Bartal, Fiat, and Rosen [3] considers admission control for tree networks. <p> Thus E C 2c [gain (S j )] k ff k + dke = k k k . ut The lower bound of 2 given by Lipton and Tomkins <ref> [11] </ref> holds here (since all delays could be zero), thus we immediately obtain the following corollary. Corollary 6. <p> We first consider the case when job lengths are powers of 2, namely, 1; 2; 4; : : : ; 2 c , for some known constant c. While our algorithm is similar to the Marriage Algorithm of Lipton and Tomkins <ref> [11] </ref>, our analysis is completely different. Note that the classify-and-randomly-select paradigm [3] in this case would just pick one randomly selected length to schedule. <p> Our approach, in contrast, seems much more reasonable in practice: though there is a bias in favor of longer jobs, shorter length jobs also have a chance of being scheduled. The following lower bound was shown by Lipton and Tomkins <ref> [11] </ref>. <p> Our admission control algorithm for when the jobs have lengths of 1; 2; 4; : : :; 2 c1 , or 2 c for a known constant c. Theorem 7. <ref> [11] </ref> Let = 2 c be the ratio between the longest and shortest lengths. There is a lower bound of (log ) = (c) for the randomized competitive ratio in the model with no delays. Following Schedule-Two-Lengths we maintain a queue Q ` for jobs of length 2 ` .
Reference: 12. <author> D. Sleator and R. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Communications of the ACM, </journal> <volume> 28(2) </volume> <pages> 202-208, </pages> <year> 1985. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The requests or packets must be serviced online in these applications since the future arrival sequence is generally not known. We use competitive analysis 4 to measure the quality of our algorithms <ref> [12, 10, 6] </ref>; we consider both deterministic as well as randomized algorithms. 1.1 Our Results In earlier work, admission control algorithms have allowed preemption [8, 9], however, newer technologies seem to favor non-preemption. In particular, high speed networks based on packet switching technology (e.g. <p> We let G A (S) = P When the algorithm being studied is clear, we just use G (J ) and G (S). We use standard competitive analysis <ref> [12, 10, 6] </ref> to evaluate our algorithms. Namely, let fl be an optimal solution. We say that algorithm A is c-competitive if 8S : c G A (S) j fl j.
References-found: 12

