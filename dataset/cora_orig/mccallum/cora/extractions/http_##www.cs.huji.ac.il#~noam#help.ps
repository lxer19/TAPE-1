URL: http://www.cs.huji.ac.il/~noam/help.ps
Refering-URL: http://www.cs.huji.ac.il/~noam/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Products and Help Bits in Decision Trees Preliminary Version  
Author: Noam Nisan Steven Rudich Michael Saks 
Note: Supported by BSF grant 92-00043 and by a Wolfson award administered by the Israeli  Partially sup ported by NSF grant CCR-9119319.  08903. Supported in part by NSF contracts CCR-9215293 and STC-91-19999 and by DIMACS  
Address: Jerusalem, Israel.  Pittsburgh, Pa.  New Brunswick, NJ  
Affiliation: Computer Science Department, Hebrew University,  Academy of Sciences. Department of Computer Science, Carnegie-Mellon University,  Department of Mathematics, Rutgers University,  
Date: October 18, 1994  
Abstract: We investigate two problems concerning the complexity of evaluating a function f at a k-tuple of unrelated inputs by k parallel decision tree algorithms. In the product problem, for some fixed depth bound d, we seek to maximize the fraction of input k-tuples for which all k decision trees are correct. Assume that for a single input to f , the best decision tree algorithm of depth d is correct on a fraction p of inputs. We prove that the maximum fraction of k-tuples on which k depth d algorithms are all correct is at most p k , which is the trivial lower bound. We show that if we replace the depth d restriction by "expected depth d", then this result fails. In the help-bit problem, we are permitted to ask k 1 arbitrary binary questions about the k-tuple of inputs. For each possible k 1-tuple of answers to these queries we will have a k-tuple of decision trees which are supposed to correctly compute all functions on k-tuples that are consistent with the particular answers. The complexity here is the maximum depth of any of the trees in the algorithm. We show that for all k sufficiently large, this complexity is equal to deg s (f ) which is the minimum degree of a multivariate polynomial whose sign is equal to f . Finally, we give a brief discussion of these problems in the context of other complexity models. 
Abstract-found: 1
Intro-found: 1
Reference: [ABG] <author> A. Amir, R. Beigel, W. Gasarch, </author> <title> Some connections between bounded query classes and nonuniform complexity, </title> <booktitle> Proceedings 5th Conference on Structure in Complexity Theory , 1990. </booktitle>
Reference-contexts: complexity less than c, and if so, by how much? How about computing f on k inputs with k 1 help bits? The help-bit problem was introduced (to our knowledge) in the context of constant depth circuits in [Cai], and was also studied in the context of boolean circuits in <ref> [ABG] </ref>. The point here is that if we have k inputs, then with k help bits we can use them to obtain the value of f on each of the inputs, and no further computation is necessary. <p> For the case of boolean circuits, this was proven in <ref> [ABG] </ref>. 5.3 The log k Barrier The "approximate product" theorem and the "randomized help-bit" theorem can be naturally generalized to up to log k functions where the family F EAS is closed under k-counting. After that, these techniques break down.
Reference: [Bsh] <author> N.H. Bshouty, </author> <title> On the extended direct sum conjecture, </title> <booktitle> Proc. 21st ACM Symp. on Theory of Computing, </booktitle> <year> 1989, </year> <pages> pp. 177-185. </pages>
Reference-contexts: The Direct-sum problem: Suppose that the complexity of computing some function f is c. Is it true that computing f twice, on two unrelated inputs requires complexity 2c? How about computing f on k unrelated inputs? This question was introduced (to our knowledge) in the context of bilinear circuits <ref> [J, Bsh] </ref>, and has been studied also in the contexts of boolean circuits [FKN] and communication complexity [KRW].
Reference: [Cai] <author> J. Cai, </author> <title> Lower bounds for constant depth circuits in the presence of help bits, </title> <booktitle> Proc. 30th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1989, </year> <pages> pp. 532-537, </pages> <year> 1989. </year>
Reference-contexts: (a) and f (b) can each be computed by a computation of complexity less than c, and if so, by how much? How about computing f on k inputs with k 1 help bits? The help-bit problem was introduced (to our knowledge) in the context of constant depth circuits in <ref> [Cai] </ref>, and was also studied in the context of boolean circuits in [ABG]. The point here is that if we have k inputs, then with k help bits we can use them to obtain the value of f on each of the inputs, and no further computation is necessary.
Reference: [CGHFRS] <author> B. Chor, O. Goldreich, J. H-astad, J. Friedman, S. Rudich, R. Smolensky, </author> <title> The bit extraction problem of t-resilient functions, </title> <booktitle> Proc. 26th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1985, </year> <pages> 396-407. </pages>
Reference-contexts: In fact, the distribution on (c 1 ; c 2 ; : : : ; c k ) is uniform on f0; 1g k . By the XOR lemma of [Vaz] (see also <ref> [CGHFRS] </ref>) a distribution over f0; 1g k is uniform if for any subset J of [k], the random variable c J defined to be the XOR of the c i for i 2 J is unbiased. Let s J be the probability that c J = 0.
Reference: [FKN] <author> T. Feder, E. Kushilevitz, M. Naor, </author> <title> Amortized Communication Complexity, </title> <booktitle> Proc. 32nd IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1991, </year> <pages> pp. 239-248. </pages>
Reference-contexts: Is it true that computing f twice, on two unrelated inputs requires complexity 2c? How about computing f on k unrelated inputs? This question was introduced (to our knowledge) in the context of bilinear circuits [J, Bsh], and has been studied also in the contexts of boolean circuits <ref> [FKN] </ref> and communication complexity [KRW]. In this paper we consider two related problems of a similar flavor: The Product Problem: Let f be a function and suppose that for any complexity c computation, the fraction of inputs on which it correctly computes f is at most p.
Reference: [HW] <author> J. Hastad, A. Wigderson, </author> <title> Composition of the Universal Relation, in "Advances in Computational Complexity Theory", AMS-DIMACS book series, </title> <note> to appear. </note>
Reference: [J] <author> J. Ja'Ja', J. </author> <title> Takche On the Validity of the Direct Sum Conjecture, </title> <journal> SIAM J. </journal> <volume> Comput.15 (4), </volume> <year> 1986, </year> <pages> pp. 1004-1020. </pages>
Reference-contexts: The Direct-sum problem: Suppose that the complexity of computing some function f is c. Is it true that computing f twice, on two unrelated inputs requires complexity 2c? How about computing f on k unrelated inputs? This question was introduced (to our knowledge) in the context of bilinear circuits <ref> [J, Bsh] </ref>, and has been studied also in the contexts of boolean circuits [FKN] and communication complexity [KRW]. <p> Since this directed graph has outdegree one, it has a directed cycle. Let j 1 be the length of the cycle. Let us rename the set of indices in the cycle by the set <ref> [j] </ref> = f1; 2; : : : ; jg in such a way that for each i &lt; j, the first probe of T i is a variable, denoted x i+1 , in X i+1 and the first probe of T j is a variable, denoted x i , in X <p> The intuition behind the rest of the proof is that for i 2 <ref> [j] </ref>, it is possible to replace each tree T i by trees of the same depth in which the first probe in T i is x i , without decreasing the probability of simultaneous agreement. <p> For each b 2 B <ref> [j] </ref> , the conditional probability of C ([k]) given A (b) is at most: ( i=1 i i ; T d i ))( i=j+1 Assuming the claim for the moment, we can then substitute into the expression (1) to obtain the following bound on the probability that all of the trees
Reference: [KKN] <author> M. Karchmer, E. Kushilevitz, N. Nisan, </author> <title> Fractional Covers and Communication Complexity, </title> <booktitle> in Proc. 7th Structures in Complexity Theory Conference, </booktitle> <year> 1992, </year> <pages> pp. 262-274. </pages>
Reference: [KRW] <author> M. Karchmer, R. Raz, A. Wigderson, </author> <title> On Proving Super-Logarithmic Depth Lower Bounds via the Direct Sum in Communication Complexity, </title> <booktitle> Proc. 6th Conference on Structures in Complexity Theory, </booktitle> <year> 1991, </year> <pages> pp. 299-304. </pages>
Reference-contexts: true that computing f twice, on two unrelated inputs requires complexity 2c? How about computing f on k unrelated inputs? This question was introduced (to our knowledge) in the context of bilinear circuits [J, Bsh], and has been studied also in the contexts of boolean circuits [FKN] and communication complexity <ref> [KRW] </ref>. In this paper we consider two related problems of a similar flavor: The Product Problem: Let f be a function and suppose that for any complexity c computation, the fraction of inputs on which it correctly computes f is at most p.
Reference: [IRW] <author> R. Impagliazzo, R. Raz, A. Wigderson, </author> <title> A Direct Product Theorem, </title> <booktitle> Proc. 9th IEEE Conference on Structure in Complexity Theory, </booktitle> <year> 1994, </year> <note> to appear. </note>
Reference-contexts: Intuition suggests that there is no advantage in having each computation access the others input. A variant of this problem, in which we seek to compute f on the two inputs by a single computation was studied recently in <ref> [IRW] </ref>. The Help-bit Problem: Suppose that the complexity of computing the boolean 1 function f is c. Suppose that one wishes to compute f on two inputs a and b, and is allowed for free one "help-bit", i.e. an arbitrary function of the two inputs. <p> This modified statement of the Theorem seems similarly obvious, but, as we will see, it is false. The recent work of <ref> [IRW] </ref>, which was done independently of ours, includes a (substantially different) proof of a weaker variant of this theorem, namely that a single depth d tree that tries to compute all k functions can be correct on at most a p k fraction of the inputs.
Reference: [Lin] <author> Nathan Linial, </author> <type> personal communication. </type>
Reference-contexts: Our result shows that even if we use k parallel decision trees then we can't do better than this. For the help bit problem, the answer is more complicated. Nathan Linial <ref> [Lin] </ref> has 2 shown that the complexity of computing f on two inputs with one help bit is at least deg (f ), the degree of the (unique) multilinear real polynomial that is equal to f .
Reference: [NW] <author> N. Nisan, A. Wigderson, </author> <title> Rounds in Communication Complexity Revisited, </title> <journal> SIAM Journal on Computing, </journal> <volume> 22, </volume> <month> (1) </month> <year> 1993. </year> <month> 20 </month>
Reference: [Vaz] <author> U. Vazirani, </author> <title> Randomness, adversaries and computation, </title> <type> Ph.D. Thesis, </type> <institution> UC Berkeley, </institution> <year> 1986. </year>
Reference-contexts: In fact, the distribution on (c 1 ; c 2 ; : : : ; c k ) is uniform on f0; 1g k . By the XOR lemma of <ref> [Vaz] </ref> (see also [CGHFRS]) a distribution over f0; 1g k is uniform if for any subset J of [k], the random variable c J defined to be the XOR of the c i for i 2 J is unbiased. Let s J be the probability that c J = 0.
Reference: [Y1] <author> A. Yao, </author> <title> Theory and applications of trapdoor functions, </title> <booktitle> Proc. 23rd Annual IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1982, </year> <pages> 80-91. </pages>
Reference-contexts: Lemma 4.2 For any (Y; R)-boolean function f and integer d 0, there exists a distribution ^ D on assignments to Y such that q ^ D (f; d) = p (f; d). This is a variant of a fundamental observation of Yao <ref> [Y1] </ref>, and follows from the min-max theorem for two person zero sum games. Let ^ D be the distribution of the lemma. Suppose that F 1 ; F 2 ; : : : ; F t is a family of forests that cover all assignments ff to X.
Reference: [Y2] <author> A. Yao, </author> <title> Probabilistic computations: towards a unified measure of complexity, </title> <booktitle> Proc. 18th Annual IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1977, </year> <pages> 222-227. </pages>
Reference-contexts: Thus, for example, for the case of poly-size 16 circuits, the lower bounds given below for two-input algorithms apply to all poly-size circuits as well. 5.1 Products A product theorem in such a setting may be proven using Yao's XOR-lemma <ref> [Y2] </ref>, which we observe applies in this general setting. Let D 1 ; D 2 distributions, and denote p 1 = q D 1 (f 1 ; F EAS), p 2 = q D 2 (f 2 ; F EAS).
References-found: 15

