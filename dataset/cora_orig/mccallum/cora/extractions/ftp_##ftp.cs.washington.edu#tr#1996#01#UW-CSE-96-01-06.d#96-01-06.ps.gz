URL: ftp://ftp.cs.washington.edu/tr/1996/01/UW-CSE-96-01-06.d/96-01-06.ps.gz
Refering-URL: http://www.cs.washington.edu/research/projects/grail2/www/pub/abstracts.html
Root-URL: 
Title: Hierarchical Image Caching for Accelerated Walkthroughs of Complex Environments  
Author: Jonathan Shade Dani Lischinski David H. Salesin Tony DeRose John Snyder 
Affiliation: Department of Computer Science and Engineering University of Washington Microsoft Research  
Abstract: Technical Report UW-CSE-96-01-06 January 1996 Abstract We present a new method for accelerating walkthroughs of geometrically complex static scenes. As a preprocessing step, our method constructs a BSP-tree that hierarchically partitions the geometric primitives in the scene. In the course of a walkthrough, images of nodes at various levels of the hierarchy are cached for reuse in subsequent frames. A cached image is applied as a texture map to a single quadrilateral that is drawn instead of the geometry contained in the corresponding node. Visual artifacts are kept under control by using an error metric that quantifies the discrepancy between the appearance of the geometry contained in a node and the cached image. The new method is shown to achieve significant speedups for a walkthrough of a complex outdoor scene, with little or no loss in rendering quality. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> John M. Airey, John H. Rohlf, and Frederick P. Brooks, Jr. </author> <title> Towards image realism with interactive update rates in complex virtual building environments. </title> <booktitle> Computer Graphics (1990 Symposium on Interactive 3D Graphics), </booktitle> <volume> 24(2) </volume> <pages> 41-50, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: View-frustum culling techniques are most effective when only a small part of the geometry is inside the view frustum at any single frame. In a complex environment enough geometry falls inside the view-frustum to overload the graphics pipeline, and additional acceleration techniques are required. Airey et al. <ref> [1] </ref> and Teller [16] described methods for interactive walkthoughs of complex buildings that compute for each room in the building the potentially visible set of polygons. At each frame it suffices to render only the potentially visible set of the room currently containing the viewer.
Reference: [2] <author> Shenchang Eric Chen and Lance Williams. </author> <title> View interpolation for image synthesis. </title> <booktitle> In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 279-288, </pages> <publisher> ACM SIGGRAPH, </publisher> <month> August </month> <year> 1993. </year>
Reference-contexts: Image-Based Rendering A different approach for interactive scene display is based on the idea of view interpolation, in which different views of a scene are rendered as a pre-processing step, and intermediate views are generated by performing image morphing on the source images in real time. Chen and Williams <ref> [2] </ref> and McMillan and Bishop [12] have demonstrated two variants of this approach for restricted movement in three-dimensional environments. Although not general purpose, these algorithms provide a viable method of rendering complex environments on machines that do not have fast graphics hardware.
Reference: [3] <author> James H. Clark. </author> <title> Hierarchical geometric models for visible surface algorithms. </title> <journal> Communications of the ACM, </journal> 19(10) 547-554, October 1976. 
Reference-contexts: Visibility culling Visibility culling algorithms attempt to avoid drawing objects that are completely occluded. This approach was first investigated by Clark <ref> [3] </ref>, who used an object hierarchy to rapidly cull surfaces that lie outside the viewing frustum. Garlick et al. [7] applied this idea to spatial subdivisions of scenes.
Reference: [4] <author> Matthias Eck, Tony DeRose, Tom Duchamp, Hugues Hoppe, Michael Lounsbery, and Werner Stuetzle. </author> <title> Multiresolution analysis for arbitrary meshes. </title> <booktitle> In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 173-182, </pages> <publisher> ACM SIGGRAPH, </publisher> <month> August </month> <year> 1995. </year>
Reference-contexts: One of the chief difficulties with the LOD approach is the problem of generating the various coarse-level representations of a model. Funkhouser and S equin [6] created the different LOD models manually. Eck et al. <ref> [4] </ref> describe methods based on wavelet analysis that can be used to automatically create reasonably accurate low-detail models of surfaces. Maciel and Shirley [11] used a number of LOD representations, including geometric simplifications created by hand, texture maps, and colored bounding boxes. <p> Thus, instead of drawing such objects in full detail, we could draw a coarser model of the same object, using a multi-resolution representation such as the one by Eck et al. <ref> [4] </ref>. Using a multi-resolution representation could also accelerate rendering of objects for which no cached images were created. Persistent caches As regions of the scene pass out of the view frustum, the images cached for the newly culled nodes are invalidated and the memory is released.
Reference: [5] <author> Henry Fuchs, Zvi M. Kedem, and Bruce Naylor. </author> <title> On visible surface generation by a priori tree structures. </title> <journal> Computer Graphics, </journal> <volume> 14(3) </volume> <pages> 175-181, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: We exploit this coherence by caching images created in one frame for possible reuse in many subsequent frames. Our method starts with a preprocessing stage. Given an unstructured set of objects comprising the scene, we construct a BSP-tree <ref> [5] </ref> by placing splitting planes inside gaps between objects. This construction produces a hierarchical spatial partitioning of the scene with geometry stored only at the leaves of the hierarchy. <p> An image can be computed and cached for any node in the hierarchy; hence the name hierarchical image caching. We construct the hierarchy as a preprocessing step by computing a BSP-tree <ref> [5] </ref> partitioning of the environment, as described in Section 4. We chose to use a BSP-tree since it allows us to traverse the scene in back-to-front order, which is necessary to ensure that the partially-transparent textured quadrilaterals are composited correctly in the frame buffer. <p> Thus, assuming that the positive Y axis points up, all of the objects are spread above the XZ plane. Our partitioning algorithm takes advantage of this structure by constructing a BSP-tree <ref> [5] </ref> whose splitting planes are perpendicular to the XZ plane.
Reference: [6] <author> Thomas A. Funkhouser and Carlo H. S equin. </author> <title> Adaptive display algorithm for interactive frame rates during visualization of complex virtual environments. </title> <booktitle> In Computer Graphics Proceedings, </booktitle> <pages> pages 247-254, </pages> <publisher> ACM SIGGRAPH, </publisher> <month> August </month> <year> 1993. </year>
Reference-contexts: The idea is to use progressively coarser representations of a model as it moves further from the viewer. Such an approach has been used since the early days of flight simulators, and has more recently been incorporated in walk through systems for complex environments by Funkhouser and S equin <ref> [6] </ref>, and Maciel and Shirley [11]. One of the chief difficulties with the LOD approach is the problem of generating the various coarse-level representations of a model. Funkhouser and S equin [6] created the different LOD models manually. <p> simulators, and has more recently been incorporated in walk through systems for complex environments by Funkhouser and S equin <ref> [6] </ref>, and Maciel and Shirley [11]. One of the chief difficulties with the LOD approach is the problem of generating the various coarse-level representations of a model. Funkhouser and S equin [6] created the different LOD models manually. Eck et al. [4] describe methods based on wavelet analysis that can be used to automatically create reasonably accurate low-detail models of surfaces.
Reference: [7] <author> B. Garlick, D. Baum, and J. Winget. </author> <title> Interactive viewing of large geometric databases using multiprocessor graphics workstations. SIGGRAPH `90 Course Nores: Parallel Algorithms and Architectures for 3D Image Generation, </title> <year> 1990. </year>
Reference-contexts: Visibility culling Visibility culling algorithms attempt to avoid drawing objects that are completely occluded. This approach was first investigated by Clark [3], who used an object hierarchy to rapidly cull surfaces that lie outside the viewing frustum. Garlick et al. <ref> [7] </ref> applied this idea to spatial subdivisions of scenes. View-frustum culling techniques are most effective when only a small part of the geometry is inside the view frustum at any single frame.
Reference: [8] <author> Ned Greene, Michael Kass, and Gavin Miller. </author> <title> Hierarchical z-buffer visibility. </title> <booktitle> In Computer Graphics Proceedings, </booktitle> <pages> pages 231-238, </pages> <publisher> ACM SIGGRAPH, </publisher> <month> August </month> <year> 1993. </year>
Reference-contexts: In addition, they require a lengthy precomputation step. More recently, Luebke and Georges [10] developed an online version of this algorithm that eliminated the precomputation. However, analytical computation of the potentially visible set is still fundamentally restricted to densely occluded environments. The hierarchical Z-buffer <ref> [8] </ref> is another approach to fast visibility culling that allows a region of the scene to be culled whenever its closest depth value is greater than those of the pixels that have already been drawn at its projected screen location.
Reference: [9] <author> Timothy L. Kay and James T. Kajiya. </author> <title> Ray tracing complex scenes. </title> <journal> Computer Graphics, </journal> <volume> 20(4) </volume> <pages> 269-278, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: To facilitate finding the gaps between objects, we compute their extents with a method similar to the parallelepiped bounding volumes of Kay and Kajiya <ref> [9] </ref>. For each object, we compute its extent along each of N vectors that evenly divide the unit circle perpendicular to the Y axis (N is a user specified parameter). Each splitting plane in the BSP-tree is constrained to be perpendicular to one of the N vectors.
Reference: [10] <author> Daivid Luebke and Chris Georges. </author> <title> Portals and mirrors: Simple, fast evaluation of potentially visible sets. </title> <booktitle> In 1995 Symposium on Interactive 3D Graphics, ACM SIG-GRAPH, </booktitle> <month> April </month> <year> 1995. </year>
Reference-contexts: Such methods can be very effective for densely occluded polyhedral environments, such as building interiors, but they are not effective for mostly unoccluded outdoor scenes. In addition, they require a lengthy precomputation step. More recently, Luebke and Georges <ref> [10] </ref> developed an online version of this algorithm that eliminated the precomputation. However, analytical computation of the potentially visible set is still fundamentally restricted to densely occluded environments.
Reference: [11] <author> Paulo W. C. Maciel and Peter Shirley. </author> <title> Visual navigation of large environments using textured clusters. </title> <booktitle> In 1995 Symposium on Interactive 3D Graphics, </booktitle> <pages> pages 95-102, </pages> <publisher> ACM SIGGRAPH, </publisher> <month> April </month> <year> 1995. </year>
Reference-contexts: Such an approach has been used since the early days of flight simulators, and has more recently been incorporated in walk through systems for complex environments by Funkhouser and S equin [6], and Maciel and Shirley <ref> [11] </ref>. One of the chief difficulties with the LOD approach is the problem of generating the various coarse-level representations of a model. Funkhouser and S equin [6] created the different LOD models manually. <p> Funkhouser and S equin [6] created the different LOD models manually. Eck et al. [4] describe methods based on wavelet analysis that can be used to automatically create reasonably accurate low-detail models of surfaces. Maciel and Shirley <ref> [11] </ref> used a number of LOD representations, including geometric simplifications created by hand, texture maps, and colored bounding boxes.
Reference: [12] <author> Leonard McMillan and Gary Bishop. </author> <title> Plenoptic modeling: An image-based rendering system. </title> <booktitle> In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 39-46, </pages> <publisher> ACM SIGGRAPH, </publisher> <month> August </month> <year> 1995. </year> <month> 19 </month>
Reference-contexts: Chen and Williams [2] and McMillan and Bishop <ref> [12] </ref> have demonstrated two variants of this approach for restricted movement in three-dimensional environments. Although not general purpose, these algorithms provide a viable method of rendering complex environments on machines that do not have fast graphics hardware.
Reference: [13] <author> Jackie Neider, Tom Davis, and Mason Woo. </author> <title> OpengGL Programming Guide. </title> <publisher> Addison Wesley, </publisher> <address> Reading, Massachusets, </address> <year> 1993. </year>
Reference-contexts: After that, the complexity slowly subsides until, beyond frame 900, the model becomes simple enough that image caching degenerates to simple view frustum culling. An important limiting factor on the performance of image caching is the constraint imposed by OpenGL <ref> [13] </ref> that texture maps have dimensions in powers of 2, and that the smallest textures allowed are 64x64 pixels. As the camera approaches the island, increasing numbers of caches are becoming out of date and need refreshing. This results in many calls to OpenGL to define texture maps.
Reference: [14] <author> Matthew Regan and Ronald Pose. </author> <title> Priority rendering with a virtual reality address recalculation pipeline. </title> <booktitle> In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pages 155-162, </pages> <publisher> ACM SIGGRAPH, </publisher> <month> July </month> <year> 1994. </year>
Reference-contexts: Images provide a method of rendering arbitrarily complex scenes in a constant amount of time. This idea is central to both of these papers and to the method we present here. Another image-based approach, described by Regan and Pose <ref> [14] </ref>, renders the scene onto the faces of a cube centered around the viewer location. This allows the display to be updated very rapidly when the viewer is standing in place and looking about. <p> In the case that the viewer is simply looking around, these culled caches are still valid representations of their regions. Suspending invalidation of image caches in this case could potentially save a great deal of computation, much in the same way as in the method of Regan and Pose <ref> [14] </ref>. In summary, we have presented a new method for accelerating walkthroughs of complex environments by utilizing frame coherence. We have demonstrated speedups of an order of magnitude on a current graphics architecture, the Indigo2 High Impact.
Reference: [15] <author> Jarek Rossignac and Paul Borrel. </author> <title> Multi-resolution 3D approximations for rendering complex scenes. </title> <type> Research Report RC 17697 (#77951), </type> <institution> IBM, </institution> <address> Yorktown Heights, New York 10598, </address> <year> 1992. </year> <note> Also appeared in the IFIP TC 5.WG 5.10. </note>
Reference-contexts: Maciel and Shirley [11] used a number of LOD representations, including geometric simplifications created by hand, texture maps, and colored bounding boxes. Another approach to cre 3 ating LOD models is described by Rossignac and Borrel <ref> [15] </ref>, in which objects of arbitrary topology are simplified by collapsing groups of nearby vertices into a single representative vertex, regardless of whether they belong to the same logical part. Our approach can be thought of as a technique for automatically creating view-dependent image-based LOD models.
Reference: [16] <author> Seth J. Teller. </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments. </title> <type> PhD thesis, </type> <institution> Computer Science Division (EECS), UC Berkeley, Berkeley, </institution> <address> California 94720, </address> <month> October </month> <year> 1992. </year> <note> Available as Report No. </note> <author> UCB/CSD-92-708. </author> <title> 20 islandcam.ps skycam.ps (a) (b) image_frames.ps skycam_frames.ps (c) (d) cache_380.ps geometry_380.ps (a) (b) artifact.ps (d) no_artifact.ps </title>
Reference-contexts: In a complex environment enough geometry falls inside the view-frustum to overload the graphics pipeline, and additional acceleration techniques are required. Airey et al. [1] and Teller <ref> [16] </ref> described methods for interactive walkthoughs of complex buildings that compute for each room in the building the potentially visible set of polygons. At each frame it suffices to render only the potentially visible set of the room currently containing the viewer.
References-found: 16

