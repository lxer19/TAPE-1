URL: http://www.csl.sri.com/reports/postscript/csl-93-9.ps.gz
Refering-URL: http://www.csl.sri.com/pvs.html
Root-URL: 
Email: fowre, shankarg@csl.sri.com  
Phone: Phone: (415)859-5272  
Title: Abstract Datatypes in PVS  
Author: S. Owre N. Shankar 
Web: URL: http://www.csl.sri.com/sri-csl-fm.html  
Address: Menlo Park CA 94025  
Affiliation: Computer Science Laboratory SRI International  
Abstract: Technical Report CSL-93-9R December 1993, Substantially Revised June 1997 
Abstract-found: 1
Intro-found: 1
Reference: [Bir95] <author> Richard S. Bird. </author> <title> Functional algorithm design. </title> <editor> In Bernhard Moller, editor, </editor> <booktitle> Mathematics of Program Construction '95, number 947 in Lecture Notes in Computer Science, </booktitle> <pages> pages 2-17. </pages> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference-contexts: It therefore has the disadvantage that it is not possible to prove general theorems about all recursive datatypes in the way that one can about all inductive definitions given as least fixed points. For example, Bird's fusion theorem <ref> [Bir95] </ref> cannot be uniformly proved for all recursive datatypes and has to be proved for each datatype individually [Sha96]. 14 Related Work There are a number of algebraic specification languages such as Larch [GJMW93], OBJ [FGJM85], and ACT-ONE [EM85] that can be used to specify abstract datatypes but these specifications are
Reference: [BM79] <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1979. </year>
Reference-contexts: Future versions of the report will be similarly revised to maintain accuracy. 3 The abstract datatype mechanism of PVS is partly inspired by the shell principle used in the Boyer-Moore theorem prover <ref> [BM79] </ref>. <p> The Isabelle datatype mechanism also accomodates infinitely branching trees. The Coq system has a facility for defining recursive and co-recursive datatypes which, like PVS and unlike HOL and Isabelle, is a primitive construct of the Coq logic [Gim96]. The shell principle used in the Boyer-Moore theorem prover <ref> [BM79, BM88] </ref> is quite similar to the PVS DATATYPE mechanism. It permits recursive datatypes to be specified by means of constructors, accessors, and recognizers. Like PVS, the axioms corresponding to a shell datatype are built into the inference mechanisms of the theorem prover.
Reference: [BM88] <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1988. </year>
Reference-contexts: The Isabelle datatype mechanism also accomodates infinitely branching trees. The Coq system has a facility for defining recursive and co-recursive datatypes which, like PVS and unlike HOL and Isabelle, is a primitive construct of the Coq logic [Gim96]. The shell principle used in the Boyer-Moore theorem prover <ref> [BM79, BM88] </ref> is quite similar to the PVS DATATYPE mechanism. It permits recursive datatypes to be specified by means of constructors, accessors, and recognizers. Like PVS, the axioms corresponding to a shell datatype are built into the inference mechanisms of the theorem prover.
Reference: [EM85] <author> H. Ehrig and B. Mahr. </author> <title> Fundamentals of Algebraic Specification 1. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: For example, Bird's fusion theorem [Bir95] cannot be uniformly proved for all recursive datatypes and has to be proved for each datatype individually [Sha96]. 14 Related Work There are a number of algebraic specification languages such as Larch [GJMW93], OBJ [FGJM85], and ACT-ONE <ref> [EM85] </ref> that can be used to specify abstract datatypes but these specifications are manually axiomatized and not automatically generated from a succinct description as is the case with the PVS DATATYPE construct.
Reference: [FGJM85] <author> Kokichi Futatsugi, Joseph Goguen, Jean-Pierre Jouannaud, and Jose Meseguer. </author> <title> Principles of OBJ2. </title> <editor> In Brian K. Reid, editor, </editor> <booktitle> 12th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 52-66. </pages> <institution> Association for Computing Machinery, </institution> <year> 1985. </year>
Reference-contexts: For example, Bird's fusion theorem [Bir95] cannot be uniformly proved for all recursive datatypes and has to be proved for each datatype individually [Sha96]. 14 Related Work There are a number of algebraic specification languages such as Larch [GJMW93], OBJ <ref> [FGJM85] </ref>, and ACT-ONE [EM85] that can be used to specify abstract datatypes but these specifications are manually axiomatized and not automatically generated from a succinct description as is the case with the PVS DATATYPE construct.
Reference: [Gim96] <author> Eduardo Gimenez. </author> <title> A tutorial on recursive types in Coq. </title> <type> Draft. </type> <note> Available from ftp://cri.ens-lyon.fr/pub/LIP/COQ/V6.1.beta/doc/RecTutorial. ps.gz, </note> <month> March </month> <year> 1996. </year>
Reference-contexts: The Isabelle datatype mechanism also accomodates infinitely branching trees. The Coq system has a facility for defining recursive and co-recursive datatypes which, like PVS and unlike HOL and Isabelle, is a primitive construct of the Coq logic <ref> [Gim96] </ref>. The shell principle used in the Boyer-Moore theorem prover [BM79, BM88] is quite similar to the PVS DATATYPE mechanism. It permits recursive datatypes to be specified by means of constructors, accessors, and recognizers.
Reference: [GJMW93] <author> John V. Guttag and James J. Horning with S. J. Garland, K. D. Jones, A. Modet, and J. M. Wing. </author> <title> Larch: Languages and Tools for Formal Specification. Texts and Monographs in Computer Science. </title> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: For example, Bird's fusion theorem [Bir95] cannot be uniformly proved for all recursive datatypes and has to be proved for each datatype individually [Sha96]. 14 Related Work There are a number of algebraic specification languages such as Larch <ref> [GJMW93] </ref>, OBJ [FGJM85], and ACT-ONE [EM85] that can be used to specify abstract datatypes but these specifications are manually axiomatized and not automatically generated from a succinct description as is the case with the PVS DATATYPE construct.
Reference: [GMW79] <author> M. Gordon, R. Milner, and C. Wadsworth. </author> <title> Edinburgh LCF: A Mechanized Logic of Computation, </title> <booktitle> volume 78 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1979. </year> <month> 51 </month>
Reference-contexts: The first proof illustrates the various low level datatype related proof commands that are provided by PVS, and the second proof illustrates how these commands can be combined to form more powerful and automatic proof strategies. Strategies are similar to the tactics of the LCF <ref> [GMW79] </ref> family of proof checkers. 25 10.1 A Low-level Proof When we invoke M-x pr on ordered? insert, the theorem to be proved is displayed in the *pvs* buffer, and we are prompted for an inference rule by the Rule? prompt.
Reference: [Gun93] <author> Elsa L. Gunter. </author> <title> Why we can't have SML style datatype declarations in HOL. </title> <editor> In L. J. M. Claesen and M. J. C. Gordon, editors, </editor> <title> Higher Order Logic Theorem Proving and its Applications, </title> <booktitle> number 20 in IFIP Transactions A, </booktitle> <pages> pages 561-568. </pages> <publisher> North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: Unlike the PVS mechanism, the ML construct allows arbitrary forms of recursion. As noted earlier, such recursive type definitions do not always have a proper set-theoretic semantics. Gunter <ref> [Gun93] </ref> explains how certain recursive datatypes that are admissible in ML can lead to unsoundnesses if admitted into a higher-order logic.
Reference: [HJ97] <author> Ulrich Hensel and Bart Jacobs. </author> <title> Proof principles for datatypes with iterated recursion. </title> <booktitle> In Category Theory in Computer Science, </booktitle> <year> 1997. </year> <note> Also appears as Technical Report CSI-R9703, </note> <institution> Computing Science Institute, Faculty of Mathematics and Informatics, Catholic University of Nijmegen. </institution>
Reference-contexts: PVS does not yet have a similar mechanism for introducing co-datatypes, and this would be a useful extension to the language. Such a theory of sequences has been formalized in PVS by Hensel and Jacobs <ref> [HJ97] </ref> (see also the URL: http://www.cs.kun.nl/~bart/sequences.html). PVS is a specification language with a set-theoretic semantics. Types are therefore interpreted as sets of elements and a function type [A -&gt; B] is interpreted as the set of all total maps from the set corresponding to A to that for B.
Reference: [Mel89] <author> Thomas F. Melham. </author> <title> Automating recursive type definitions in higher order logic. </title> <editor> In G. Birtwistle and P. A. Subrahmanyam, editors, </editor> <booktitle> Current Trends in Hardware Verification and Theorem Proving, </booktitle> <pages> pages 341-386, </pages> <address> New York, NY, 1989. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: As noted earlier, such recursive type definitions do not always have a proper set-theoretic semantics. Gunter [Gun93] explains how certain recursive datatypes that are admissible in ML can lead to unsoundnesses if admitted into a higher-order logic. The HOL system has a mechanism for defining abstract datatypes <ref> [Mel89] </ref> that is somewhat more restrictive than that of PVS: there are more constraints on recursion and HOL lacks the useful notion of subtyping that is available in PVS.
Reference: [MTH90] <author> R. Milner, M. Tofte, and R. Harper. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: The axioms are used as rewrite rules so that there is no built-in automation of the simplification of datatype expressions. 48 The programming language ML <ref> [MTH90] </ref> has a similar recursive datatype mechanism. Unlike the PVS mechanism, the ML construct allows arbitrary forms of recursion. As noted earlier, such recursive type definitions do not always have a proper set-theoretic semantics.
Reference: [OSR93] <author> S. Owre, N. Shankar, and J. M. Rushby. </author> <title> User Guide for the PVS Specification and Verification System. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> February </month> <year> 1993. </year> <title> Three volumes: Language, System, and Prover Reference Manuals; A new edition for PVS Version 2 is expected in late 1996. </title>
Reference-contexts: 1 Introduction PVS is a specification and verification environment developed at SRI International. 1 Several documents describe the use of PVS <ref> [OSR93] </ref>; this document explains the PVS mechanisms for defining and using abstract datatypes. 2 It describes a PVS specification for the data structure of ordered binary trees, defines various operations on this structure, and contains PVS proofs of some useful properties of these operations. <p> The PVS manuals <ref> [OSR93] </ref> provides more details. These strategies are quite useful for proofs of datatype-related theorems.
Reference: [Pau97] <author> L. C. Paulson. </author> <title> Mechanizing coinduction and corecursion in higher-order logic. </title> <journal> Journal of Logic and Computation, </journal> <volume> 7 </volume> <pages> 175-204, </pages> <month> March </month> <year> 1997. </year>
Reference-contexts: The axioms generated from the datatype declaration are shown to be sound with respect to this interpretation. Isabelle/ZF and Isabelle/HOL both have a similar but more general facility for defining datatypes and co-datatypes <ref> [Pau97] </ref>. The Isabelle datatype mechanism also accomodates infinitely branching trees. The Coq system has a facility for defining recursive and co-recursive datatypes which, like PVS and unlike HOL and Isabelle, is a primitive construct of the Coq logic [Gim96].
Reference: [Pet67] <author> R. Peter. </author> <title> Recursive Functions. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1967. </year>
Reference-contexts: The Ackermann function provides a well known example of a doubly recursive function that requires a lexicographic measure. Peter's version <ref> [Pet67] </ref> of the Ackermann function is defined in the theory ackermann as ack. 35 ackermann: THEORY BEGIN i, j, k, m, n: VAR nat ack (m,n): RECURSIVE nat = (IF m=0 THEN n+1 ELSIF n=0 THEN ack (m-1,1) ELSE ack (m-1, ack (m, n-1)) ENDIF) MEASURE lex2 (m, n) . .
Reference: [Rus95] <author> John Rushby. </author> <title> Proof Movie II: A proof with PVS. </title> <type> Technical report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <year> 1995. </year> <title> Available, with specification files, </title> <note> from http://www.csl.sri.com/movie.html. </note>
Reference-contexts: Rushby <ref> [Rus95] </ref> presents a toy compiler verification exercise [WW93] in PVS and presents an extensive discussion of the use of disjoint unions in PVS specifications and proofs. 7 Mutually Recursive Datatypes Mutually recursive datatypes arise quite frequently in programming and specification.
Reference: [Sha96] <author> N. Shankar. </author> <title> Steps towards mechanizing program transformations using PVS. </title> <booktitle> Science of Computer Programming, </booktitle> <address> 26(1-3):33-57, </address> <year> 1996. </year>
Reference-contexts: For example, Bird's fusion theorem [Bir95] cannot be uniformly proved for all recursive datatypes and has to be proved for each datatype individually <ref> [Sha96] </ref>. 14 Related Work There are a number of algebraic specification languages such as Larch [GJMW93], OBJ [FGJM85], and ACT-ONE [EM85] that can be used to specify abstract datatypes but these specifications are manually axiomatized and not automatically generated from a succinct description as is the case with the PVS DATATYPE
Reference: [WW93] <author> Debora Weber-Wulff. </author> <title> Proof Movie|a proof with the Boyer-Moore prover. </title> <journal> Formal Aspects of Computing, </journal> <volume> 5(2) </volume> <pages> 121-151, </pages> <year> 1993. </year> <month> 52 </month>
Reference-contexts: Rushby [Rus95] presents a toy compiler verification exercise <ref> [WW93] </ref> in PVS and presents an extensive discussion of the use of disjoint unions in PVS specifications and proofs. 7 Mutually Recursive Datatypes Mutually recursive datatypes arise quite frequently in programming and specification. A common example is that of a language definition where type expressions contain terms and vice-versa.
References-found: 18

