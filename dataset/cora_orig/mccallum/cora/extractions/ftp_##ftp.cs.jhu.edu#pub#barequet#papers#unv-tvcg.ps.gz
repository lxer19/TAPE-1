URL: ftp://ftp.cs.jhu.edu/pub/barequet/papers/unv-tvcg.ps.gz
Refering-URL: http://www.cs.jhu.edu/~barequet/papers.html
Root-URL: http://www.cs.jhu.edu
Email: Email: fbarequet,cduncan,subodhg@cs.jhu.edu  
Title: RSVP: A Geometric Toolkit for Controlled Repair of Solid Models  
Author: Gill Barequet Christian A. Duncan Subodh Kumar 
Keyword: Model repair, edge matching.  
Web: URL: http://www.cs.jhu.edu/~fbarequet,cduncan,subodhg  
Address: Baltimore, MD 21218-2694  
Affiliation: Center for Geometric Computing Department of Computer Science Johns Hopkins University  
Abstract: This paper presents a system and the associated algorithms for repairing the boundary representation of CAD models. Two types of errors are considered: topological errors, i.e., aggregate errors like zero-volume parts, duplicate or missing parts, inconsistent surface orientation, etc., and geometric errors, i.e., numerical imprecision errors like cracks or overlaps of geometry. The output of our system describes a set of clean and consistent 2-manifolds (possibly with boundaries) with derived adjacencies. Such solid representation enables the application of a variety of rendering and analysis algorithms, e.g., finite-element analysis, radiosity computation, model simplification, and solid free-form fabrication. The algorithms described here were originally designed to correct errors in polygonal B-Reps. We also present an extension for spline surfaces. Central to our system is a procedure for inferring local adjacencies of edges. The geometric representation of topologically-adjacent edges are merged to evolve a set of 2-manifolds. Aggregate errors are discovered during the merging step. Unfortunately, there are many ambiguous situations, where errors admit more than one valid solution. Our system proposes an object-repairing process based on a set of user-tunable heuristics. The system also allows the user to override the algorithm's decisions in a repair-visualization step. In essence, this visualization step presents an organized and intuitive way for the user to explore the space of valid solutions and to select the correct one. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Stereolithography interface specification. 3D Systems Inc. (Valencia, </institution> <address> CA), </address> <year> 1989. </year> <note> p/n 50065-S01-00. </note>
Reference-contexts: 1 Introduction CAD (Computer-Aided Design) models are often represented as unordered lists of polygons or surfaces | sometimes referred to as "soups" of polygons or surfaces. File formats like IGES [3], DXF [2] and STL <ref> [1] </ref> (the de facto standard in the rapid-prototyping industry) allow users to represent models as such soups. For example, each polygon may be listed independently as an ordered list of its vertex-coordinates, occasionally along with its normal vector.
Reference: [2] <institution> Data Interchange Format. </institution> <note> http://www.autodesk.com, 1995. AutoCAD Release 13. </note>
Reference-contexts: 1 Introduction CAD (Computer-Aided Design) models are often represented as unordered lists of polygons or surfaces | sometimes referred to as "soups" of polygons or surfaces. File formats like IGES [3], DXF <ref> [2] </ref> and STL [1] (the de facto standard in the rapid-prototyping industry) allow users to represent models as such soups. For example, each polygon may be listed independently as an ordered list of its vertex-coordinates, occasionally along with its normal vector.
Reference: [3] <institution> Initial graphics exchange specification (IGES), </institution> <note> version 5.1. </note> <institution> National Computer Graphics Association, </institution> <year> 1991. </year>
Reference-contexts: 1 Introduction CAD (Computer-Aided Design) models are often represented as unordered lists of polygons or surfaces | sometimes referred to as "soups" of polygons or surfaces. File formats like IGES <ref> [3] </ref>, DXF [2] and STL [1] (the de facto standard in the rapid-prototyping industry) allow users to represent models as such soups. For example, each polygon may be listed independently as an ordered list of its vertex-coordinates, occasionally along with its normal vector.
Reference: [4] <author> E. Arge, M. Dhlen, T. Lyche, and K. Mtrken. </author> <title> Constrained spline approximation of functions and data based on constrained knot removal. </title> <editor> In J. Mason and M. Cox, eds., </editor> <title> Algorithms for Approximation II, </title> <booktitle> Lecture Notes in Mathematics, </booktitle> <pages> pages 4-20. </pages> <publisher> Chapman and Hall, </publisher> <address> London, </address> <year> 1990. </year>
Reference-contexts: This conversion also eliminates in practice most cases of the type shown in Fig. 5. However, tangency cases like that shown in Figs. 5 (c,d) can still occur. These can be resolved by curve subdivision. Once all mergers have been completed, the inverse process of knot deletion <ref> [4, 22] </ref> (and curve joining [14]) may be used to restore the original form of representation, if required. If the degrees of two "-coincident boundary curves are not equal, we degree-elevate the lower-degree curve.
Reference: [5] <author> G. Barequet, M. Dickerson, and D. Eppstein. </author> <title> On triangulating three-dimensional polygons. </title> <booktitle> In Proc. 12th Ann. ACM Symp. on Computational Geometry, </booktitle> <pages> pages 38-47, </pages> <address> Philadelphia, PA, </address> <month> May </month> <year> 1996. </year> <note> To appear in Computational Geometry: Theory and Applications. </note>
Reference-contexts: Our system automatically triangulates these holes (unless this feature is turned off by the user). A triangulation of a three-dimensional polygonal contour C is a collection of triangles which define a simply-connected 2-manifold whose boundary is C. Barequet et al. show in <ref> [5] </ref> that the decision whether a three-dimensional polygon is trian-gulable, i.e, whether it has a triangulation which does not intersect itself, is N P-complete. For practical reasons, we do not check whether a hole is triangulable or not.
Reference: [6] <author> G. Barequet and S. Kumar. </author> <title> Repairing CAD models. </title> <booktitle> In Proc. IEEE Visualization, </booktitle> <pages> pages 363-370, </pages> <address> Phoenix, AZ, </address> <year> 1997. </year>
Reference-contexts: This process is continued to user's satisfaction. In practice, only a few automatic decisions need to be overridden in most cases. 1.3 Related Work A preliminary version of this work was recently published <ref> [6] </ref>. This paper reports several enhancements over [6], that include additional features in the geometric and visualization subsystems, maintenance of topological constraints at each stage, an improved vertex positioning algorithm, efficient geometric pruning to obtain significant speed-ups, and an extension to spline surfaces. <p> This process is continued to user's satisfaction. In practice, only a few automatic decisions need to be overridden in most cases. 1.3 Related Work A preliminary version of this work was recently published <ref> [6] </ref>. This paper reports several enhancements over [6], that include additional features in the geometric and visualization subsystems, maintenance of topological constraints at each stage, an improved vertex positioning algorithm, efficient geometric pruning to obtain significant speed-ups, and an extension to spline surfaces. <p> This simple, yet powerful, data structure, used on realistic CAD models and for small ranges answers each query efficiently; performances of around O (log n) per query can be expected. This is a vast improvement over the brute-force method (used in <ref> [6] </ref>). 3 Component Construction We start by considering each input polygon as an open manifold by itself. We evolve the complete model by merging edges of neighboring polygons. <p> As a result minor variations of the weight do not usually affect the results. For each candidate, we maintain its score, the respective edges, and their endpoints. In the implementation presented in <ref> [6] </ref> we sorted all the matching candidates in ascending order of score, and processed the candidates in this order. In the current implementation we insert all the candidates into a heap, and later remove one candidate at a time by using a standard DeleteMin operation on the heap. <p> Fig. 12 (b) shows the gaps in this model. In this example the remaining holes need not be triangulated in most cases. Table 1 summarizes the performance of our implementation on the examples described above. Some of the running times reported here differ from those of <ref> [6] </ref> since the introduction of a k-D tree (to locate match candidates) and of a heap (to store the candidates) expedited the algorithm significantly (except for toy models, where the overhead dominates the running time). 9 Conclusion A number of applications in computer graphics, e.g., virtual prototyping, global illumination, surface simplification,
Reference: [7] <author> G. Barequet and M. Sharir. </author> <title> Filling gaps in the boundary of a polyhedron. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 12(2) </volume> <pages> 207-229, </pages> <year> 1995. </year>
Reference-contexts: They use local techniques for filling a hole by triangles. Makela and Dolenc [23] also use local techniques for filling cracks in the model surface. Barequet and Sharir <ref> [7] </ref> describe a globally-consistent approach for identifying and filling holes. Unfortunately, when a large number of cracks is involved, simple-minded hole filling may result in an explosion of the number of polygons needed to describe the model. <p> RSVP corrects such errors by slightly shifting the vertex positions. Our method ensures that no vertex is moved farther than a user-specified error-tolerance. Larger holes are filled using the triangulation technique of <ref> [7] </ref>. The rest of this paper is organized as follows. Section 2 briefly describes our point and edge location data structure. Section 3 discusses the algorithm to generate connected components of the given model. Section 4 describes our candidate ranking and processing algorithms. Section 5 presents the final topological classification. <p> If this assumption is invalid for an application, each polygon may be considered as a single component and passed on to the merging phase. We compute the connected components of the model using a procedure similar to that of <ref> [7] </ref>. We first construct G, the adjacency graph of the model. Each facet of the model is a vertex in G. <p> In addition, we need to determine the preceding and following boundary-edges for each edge in a component (which are used later for computing scores). To obtain the boundary contours of a component, we compute the binary sum (see <ref> [7] </ref>) of all the facets (as cycles of graph-edges). The result is the collection of the boundary polygonal contours (see Fig. 2). Note that in case of a T-joint (Fig. 3) there are two possible preceding or following edges; we maintain pointers to both. <p> 0 THEN Move b towards v (but not beyond v) until P does not intersects P 0 ; IF no intersections remain THEN Report Success; OD Report Failure; 10 4.3 Orientation Checking If the original orientations of facets are not consistent, we need the following modifications (using some methods of <ref> [7] </ref>) to our algorithm: * Orient all the facets of each connected component consistently with respect to other facets of the component. * For each pair of boundary edges, compute two matching candidates. <p> Barequet et al. show in [5] that the decision whether a three-dimensional polygon is trian-gulable, i.e, whether it has a triangulation which does not intersect itself, is N P-complete. For practical reasons, we do not check whether a hole is triangulable or not. As in <ref> [7] </ref>, we use a simple dynamic-programming technique which computes the triangulation of a hole with n edges in O (n 3 ) time.
Reference: [8] <author> G. Barequet, D. Shapiro, and A. Tal. </author> <title> History-driven reconstruction of polyhedral surfaces from parallel slices. </title> <booktitle> In Proc. IEEE Visualization, </booktitle> <pages> pages 149-156, </pages> <address> San Fransisco, CA, </address> <year> 1996. </year>
Reference-contexts: For practical reasons, we do not check whether a hole is triangulable or not. As in [7], we use a simple dynamic-programming technique which computes the triangulation of a hole with n edges in O (n 3 ) time. Following <ref> [8] </ref>, we minimize a measure which is a linear combination of the area of the triangles and the ratio (for each triangle) between the lengths of the longest and the shortest edges.
Reference: [9] <author> D. Baum, S. Mann, K. Smith, and J. Winget. </author> <title> Making radiosity usable: Automatic preprocessing and meshing techniques for the generation of accurate radiosity solutions. </title> <journal> ACM Computer Graphics, </journal> <volume> 25(4) </volume> <pages> 51-60, </pages> <year> 1991. </year> <note> (SIGGRAPH Proceedings). </note>
Reference-contexts: The presence of these errors can complicate, and even preclude, application of algorithms that assume manifold properties. For example, cracks or degenerate geometry can result in leaking of light and create artifacts in a radiosity solution. Baum et al. <ref> [9] </ref> catalog some common types of errors and propose rules to avoid them. Other algorithms like visibility computation, constructive solid geometry, or collision detection, which require inside-outside classification of points with respect to a model, also fail due to errors in the model.
Reference: [10] <author> J.L. Bentley, </author> <title> Multidimensional binary search trees used for associative searching. </title> <journal> Commun. ACM, </journal> <volume> 18(9) </volume> <pages> 509-517, </pages> <year> 1975. </year> <month> 21 </month>
Reference-contexts: It closes small cracks and fills larger gaps with polygons. Small overlaps are detected and separated. Extraneous geometry, zero-volume parts and T-joints are also handled. Here is a brief description of the algorithm: * We first preprocess the model and construct a k-D tree <ref> [10] </ref> in which we store the vertices. Due to coherence, updates of the tree are inexpensive on the average. This k-D tree is used subsequently for efficient location of points, edges, and polygons. * We then compute the connected components of the object, which are oriented 2-manifolds, often with boundaries. <p> We therefore use a data structure which can efficiently answer range queries. Note that intersecting geometry are also proximate in Euclidean space. Thus range search can also be used to efficiently detect intersections. It is well-known that the k-D tree <ref> [10] </ref> is an efficient range searching data structure when the elements are expected to be spread uniformly in space, and its inherent simplicity allows us to process such range queries with minimal overhead. The data structure is quite simple.
Reference: [11] <author> J.H. Bthn and M.J. Wozny. </author> <title> Automatic cad-model repair: </title> <editor> Shell-closure. In H.L. Marcus et al., eds., </editor> <booktitle> Proc. Solid Freeform Fabrication Symp., </booktitle> <pages> pages 86-94, </pages> <address> U. Texas, Austin, TX, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: In addition, vertex-shifting closes gaps as well. Rock and Wozny [28] sort vertices using an AVL tree for efficient location of vertices in an " neighborhood|these vertices are then merged. Bthn and Wozny <ref> [11, 12] </ref> present a technique based on Jordan curve construction for identifying holes bounded by edges at each of which only one facet occurs. They use local techniques for filling a hole by triangles. Makela and Dolenc [23] also use local techniques for filling cracks in the model surface.
Reference: [12] <author> J.H. Bthn and M.J. Wozny. </author> <title> A topology-based approach for shell-closure. </title> <editor> In P.R. Wilson et al., eds., </editor> <booktitle> Geometric Modeling for Product Realization, </booktitle> <pages> pages 297-319. </pages> <publisher> North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: In addition, vertex-shifting closes gaps as well. Rock and Wozny [28] sort vertices using an AVL tree for efficient location of vertices in an " neighborhood|these vertices are then merged. Bthn and Wozny <ref> [11, 12] </ref> present a technique based on Jordan curve construction for identifying holes bounded by edges at each of which only one facet occurs. They use local techniques for filling a hole by triangles. Makela and Dolenc [23] also use local techniques for filling cracks in the model surface.
Reference: [13] <author> J. Cohen, A. Varshney, D. Manocha, and G. Turk et al. </author> <title> Simplification envelopes. </title> <booktitle> In Proc. ACM SIGGRAPH, </booktitle> <pages> pages 119-128, </pages> <year> 1996. </year>
Reference-contexts: Other algorithms like visibility computation, constructive solid geometry, or collision detection, which require inside-outside classification of points with respect to a model, also fail due to errors in the model. For example, it is more difficult to determine whether two open 2-manifolds in 3-space intersect. Many surface simplification schemes <ref> [13, 20, 31] </ref> require consistently-oriented polygons with unambiguous adjacency information. The fabrication process in most rapid-prototyping techniques often fails due to erroneous solid descriptions. Accidental deletion of primitives or lack of complete information in 3d-scans also result in unintended holes in the model representation.
Reference: [14] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design: A Practical Guide. </title> <publisher> Academic Press Inc., </publisher> <year> 1993. </year>
Reference-contexts: This is a compromise we chose to make in the current implementation. Fortunately, most of these problems can be addressed rather easily. In order to gain finer control over mergers, it is useful to have relatively small surface patches. We use knot insertion <ref> [14] </ref> to first subdivide larger NURBs surfaces into Bezier patches. Individual Bezier boundary curves are more easily merged. This conversion also eliminates in practice most cases of the type shown in Fig. 5. However, tangency cases like that shown in Figs. 5 (c,d) can still occur. <p> However, tangency cases like that shown in Figs. 5 (c,d) can still occur. These can be resolved by curve subdivision. Once all mergers have been completed, the inverse process of knot deletion [4, 22] (and curve joining <ref> [14] </ref>) may be used to restore the original form of representation, if required. If the degrees of two "-coincident boundary curves are not equal, we degree-elevate the lower-degree curve.
Reference: [15] <author> D. </author> <title> Filip. Blending parametric surfaces. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 8(3) </volume> <pages> 3-16, </pages> <year> 1989. </year>
Reference: [16] <author> R. Goldman and T. Lyche, eds. </author> <title> Knot Insertion and Deletion Algorithms for B-spline Curves and Surfaces. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1993. </year>
Reference: [17] <author> A. Gueziec, G. Taubin, F. Lazarus, and W. Horn. </author> <title> Cutting and stitching: Efficient conversion of a non-manifold polygonal surface to a manifold. </title> <institution> Computer science research report rc20935(92693), IBM Research Division, </institution> <year> 1997. </year>
Reference-contexts: Unfortunately, there is no control on the topology of the result, which can be significantly different from the input. This technique works well in the absence of degeneracies or narrow angles between adjacent polygons. The approach of Gueziec et al. <ref> [17] </ref> is similar to ours. They merge close vertices, but their work is primarily focussed on topological construction and does not consider geometric intersections. In addition, the candidate edge pairs for their stitching operation is restricted in order to avoid inconsistent topology without having to consider geometric properties. <p> In addition, the candidate edge pairs for their stitching operation is restricted in order to avoid inconsistent topology without having to consider geometric properties. The "zipping" operation of Sheng and Meier [29] is also similar in flavor, but both <ref> [17] </ref> and [29] can violate our consistency constraints. In our work we propose a heuristic based on the observation that most of the cracks and overlaps occur due to numerical errors in the computation of vertex coordinates. RSVP corrects such errors by slightly shifting the vertex positions.
Reference: [18] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1989. </year>
Reference-contexts: For example, each polygon may be listed independently as an ordered list of its vertex-coordinates, occasionally along with its normal vector. The collection of polygons is assumed to bound a complete solid model, i.e., a closed 2-manifold tamely embedded in IR 3 <ref> [18] </ref>. Unfortunately this is often not the case. Typical problems include tears or cracks in the surface, degenerate primitives, duplication (of surface patches or triangles), fl Supported in part by the U.S. <p> A geometric embedding maps the vertices of the complex to Euclidean vertices. Informally, we seek to construct geometric surfaces, each point of which is locally similar to a point on a plane. For further details on algebraic topology, the reader is referred to <ref> [18, 27] </ref>. We call two edges coincident if they geometrically overlap. Not all geometrically coincident edges may be topologically adjacent, however.
Reference: [19] <author> C.M. Hoffmann. </author> <title> Algebraic and numeric techniques for offsets and blends. </title> <editor> In W. Dahmen, M. Gasca, and C. Micchelli, eds., </editor> <booktitle> Computations of Curves and Surfaces, </booktitle> <pages> pages 499-528. </pages> <publisher> Kluwer Academic Publishers, </publisher> <year> 1990. </year>
Reference: [20] <author> H. Hoppe. </author> <title> Progressive meshes. </title> <booktitle> In Proc. ACM SIGGRAPH, </booktitle> <pages> pages 99-108, </pages> <year> 1996. </year>
Reference-contexts: Other algorithms like visibility computation, constructive solid geometry, or collision detection, which require inside-outside classification of points with respect to a model, also fail due to errors in the model. For example, it is more difficult to determine whether two open 2-manifolds in 3-space intersect. Many surface simplification schemes <ref> [13, 20, 31] </ref> require consistently-oriented polygons with unambiguous adjacency information. The fabrication process in most rapid-prototyping techniques often fails due to erroneous solid descriptions. Accidental deletion of primitives or lack of complete information in 3d-scans also result in unintended holes in the model representation.
Reference: [21] <author> K. Hsu and D. Tsay. </author> <title> Corner blending of free-form n-sided holes. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 18(1) </volume> <pages> 72-78, </pages> <year> 1998. </year>
Reference: [22] <author> T. Lyche and K. Mtrken. </author> <title> A discrete approach to knot removal and degree reduction algorithms for splines. </title> <editor> In J. Mason and M. Cox, eds., </editor> <booktitle> Algorithms for Approximation, </booktitle> <pages> pages 67-82. </pages> <publisher> Oxford University Press, </publisher> <year> 1987. </year>
Reference-contexts: This conversion also eliminates in practice most cases of the type shown in Fig. 5. However, tangency cases like that shown in Figs. 5 (c,d) can still occur. These can be resolved by curve subdivision. Once all mergers have been completed, the inverse process of knot deletion <ref> [4, 22] </ref> (and curve joining [14]) may be used to restore the original form of representation, if required. If the degrees of two "-coincident boundary curves are not equal, we degree-elevate the lower-degree curve.
Reference: [23] <author> I. Makela and A. Dolenc. </author> <title> Some efficient procedures for correcting triangulated models. </title> <editor> In H.L. Marcus et al., ed., </editor> <booktitle> Proc. Solid Freeform Fabrication Symp., </booktitle> <pages> pages 126-134, </pages> <address> U. Texas, Austin, TX, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Bthn and Wozny [11, 12] present a technique based on Jordan curve construction for identifying holes bounded by edges at each of which only one facet occurs. They use local techniques for filling a hole by triangles. Makela and Dolenc <ref> [23] </ref> also use local techniques for filling cracks in the model surface. Barequet and Sharir [7] describe a globally-consistent approach for identifying and filling holes.
Reference: [24] <author> S.M. Morvan and G.M. Fadel. IVECS: </author> <title> An interactive virtual environment for the correction of .STL files. </title> <booktitle> In Conf. on Virtual Design, </booktitle> <address> U. California, Irvine, CA, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: These techniques use variants of tolerancing schemes. In general, vertices closer than a user-specified parameter " are merged. Such indiscriminate merging often fails since an appropriate value of " is difficult to guess. Morvan and Fadel <ref> [24, 25] </ref> describe a virtual environment that provides tools for model correction, controlled primarily by the user. Unfortunately, this can be a cumbersome and inefficient procedure for large models.
Reference: [25] <author> S.M. Morvan and G.M. Fadel. IVECS, </author> <title> interactive correction of .STL files in a virtual environment. </title> <booktitle> In Proc. Solid Freeform Fabrication Symp., </booktitle> <address> U. Texas, Austin, TX, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: These techniques use variants of tolerancing schemes. In general, vertices closer than a user-specified parameter " are merged. Such indiscriminate merging often fails since an appropriate value of " is difficult to guess. Morvan and Fadel <ref> [24, 25] </ref> describe a virtual environment that provides tools for model correction, controlled primarily by the user. Unfortunately, this can be a cumbersome and inefficient procedure for large models.
Reference: [26] <author> T. Murali and T. Funkhouser. </author> <title> Consistent solid and boundary representations from arbitrary polygonal data. </title> <booktitle> In Proc. Symp. on Interactive 3D Graphics, </booktitle> <pages> pages 155-162, </pages> <address> Providence, RI, </address> <year> 1997. </year>
Reference-contexts: Barequet and Sharir [7] describe a globally-consistent approach for identifying and filling holes. Unfortunately, when a large number of cracks is involved, simple-minded hole filling may result in an explosion of the number of polygons needed to describe the model. The approach of Murali and Funkhouser <ref> [26] </ref> is to determine regions of space that lie inside a solid using spatial partitioning, and use the partition as the description of solids. This is a simple and promising technique which generates topologically-correct solids.
Reference: [27] <author> B. O'Neill. </author> <title> Elementary Differential Geometry. </title> <publisher> Academic Press, </publisher> <year> 1966. </year>
Reference-contexts: We present algorithms to eliminate dangling geometry, T-joints, holes, cracks, and overlaps in a solid model, and generate consistent orientations and adjacencies. We assume that the input model is an unordered collection of polygons (or splines) and that the target model is a set of closed 2-manifolds <ref> [27] </ref>, but allow users to override this assumption. 1.1 Definitions The problem for the polygonal (piecewise-linear) case may be stated as follows: Input: * fP i g: A set of polygons, where each polygon is specified as an ordered sequence of vertices fv i j g. <p> A geometric embedding maps the vertices of the complex to Euclidean vertices. Informally, we seek to construct geometric surfaces, each point of which is locally similar to a point on a plane. For further details on algebraic topology, the reader is referred to <ref> [18, 27] </ref>. We call two edges coincident if they geometrically overlap. Not all geometrically coincident edges may be topologically adjacent, however.
Reference: [28] <author> S.J. Rock and M.J. Wozny. </author> <title> Generating topological information from a `bucket of facets'. </title> <editor> In H.L. Marcus et al., eds., </editor> <booktitle> Proc. Solid Freeform Fabrication Symp., </booktitle> <pages> pages 251-259, </pages> <address> U. Texas, Austin, TX, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: Unlike their work, which handles a collection of scattered points, our system always has the recent version of a polyhedral model available, so that vertex-shifting causes smaller perturbation to the input. In addition, vertex-shifting closes gaps as well. Rock and Wozny <ref> [28] </ref> sort vertices using an AVL tree for efficient location of vertices in an " neighborhood|these vertices are then merged. Bthn and Wozny [11, 12] present a technique based on Jordan curve construction for identifying holes bounded by edges at each of which only one facet occurs.
Reference: [29] <author> X. Sheng and I.R. Meier. </author> <title> Generating topological structures for surface models. </title> <journal> IEEE Computer Graphics & Applications, </journal> <volume> 15(6) </volume> <pages> 35-41, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: In addition, the candidate edge pairs for their stitching operation is restricted in order to avoid inconsistent topology without having to consider geometric properties. The "zipping" operation of Sheng and Meier <ref> [29] </ref> is also similar in flavor, but both [17] and [29] can violate our consistency constraints. In our work we propose a heuristic based on the observation that most of the cracks and overlaps occur due to numerical errors in the computation of vertex coordinates. <p> In addition, the candidate edge pairs for their stitching operation is restricted in order to avoid inconsistent topology without having to consider geometric properties. The "zipping" operation of Sheng and Meier <ref> [29] </ref> is also similar in flavor, but both [17] and [29] can violate our consistency constraints. In our work we propose a heuristic based on the observation that most of the cracks and overlaps occur due to numerical errors in the computation of vertex coordinates. RSVP corrects such errors by slightly shifting the vertex positions.
Reference: [30] <author> G. Turk and M. Levoy. </author> <title> Zippered polygon meshes from range images. </title> <booktitle> In Proc. ACM SIGGRAPH, </booktitle> <pages> pages 311-318, </pages> <year> 1994. </year>
Reference-contexts: The user can visualize errors which are clearly highlighted in the rendering and can guide the correction algorithm. Geometric constraints are always maintained to avoid accidental introduction of errors. Turk and Levoy <ref> [30] </ref> remove overlaps of polygons by clipping them against each other in order to generate polygonal models from range data.
Reference: [31] <author> J. Xia and A. Varshney. </author> <title> A dynamic view-dependent simplification for polygonal models. </title> <booktitle> In Proc. IEEE Visualization, </booktitle> <pages> pages 327-334, </pages> <address> San Fransisco, CA, </address> <year> 1996. </year> <type> 22 Color Plate 23 </type>
Reference-contexts: Other algorithms like visibility computation, constructive solid geometry, or collision detection, which require inside-outside classification of points with respect to a model, also fail due to errors in the model. For example, it is more difficult to determine whether two open 2-manifolds in 3-space intersect. Many surface simplification schemes <ref> [13, 20, 31] </ref> require consistently-oriented polygons with unambiguous adjacency information. The fabrication process in most rapid-prototyping techniques often fails due to erroneous solid descriptions. Accidental deletion of primitives or lack of complete information in 3d-scans also result in unintended holes in the model representation.
References-found: 31

