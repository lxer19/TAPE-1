URL: ftp://ftp.win.tue.nl/pub/techreports/michelr/ComputingScienceReports96-14.ps.Z
Refering-URL: http://www.win.tue.nl/win/cs/fm/michelr/pub.html
Root-URL: http://www.win.tue.nl
Title: The I 2 C-bus in Discrete-Time Process Algebra  
Author: S.H.J. Bos and M.A. Reniers 
Address: Netherlands  
Affiliation: Department of Mathematics and Computing Science, Eindhoven University of Technology, The  
Abstract: Using discrete time process algebra with relative timing, a model for the I 2 C-bus is designed. The model of the I 2 C-bus is divided in three parts: a model for the bus lines, a model for the master interfaces and a model for the slave interfaces. The model of the bus lines is based on a model for a wired-AND. For the models of the interfaces, the approach is to start from a high level bus protocol and refine it step by step. First, a single master without timing constraints is considered. Then the model is adapted to deal with the timing constraints. Then also the restriction to a single master is relaxed. It turns out that the model for the slave interfaces can be based on the model for the master interfaces. The use of the model obtained is discussed and illustrated.
Abstract-found: 1
Intro-found: 1
Reference: [ACC93] <institution> ACCESS.bus Industry Group, Sunnyvale, California. </institution> <note> ACCESS.bus Specifications - Version 2.1, </note> <year> 1993. </year>
Reference: [BB92] <author> J. C. M. Baeten and J. A. Bergstra. </author> <title> Discrete time process algebra (extended abstract). </title> <editor> In W.R. Cleaveland, editor, </editor> <booktitle> CONCUR '92, Third International Conference on Con-currency Theory, volume 630 of Lecture Notes in Computer Science, </booktitle> <pages> pages 401-420, </pages> <address> Stony Brook, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: These terms represent processes. The axioms express which processes are to be considered equal. The axioms for this process algebra are given in Appendix A. In the axioms also auxiliary operators rel , b c ! , k , and j appear. The axioms can also be found in <ref> [BB92, BB95, BB96, Bos95] </ref>. Also for other issues concerning discrete time process algebra we refer to these papers. We only list the operators that play a role in the main text of this paper.
Reference: [BB95] <author> J. C. M. Baeten and J. A. Bergstra. </author> <title> Discrete time process algebra with abstraction. </title> <editor> In H. Reichel, editor, </editor> <booktitle> FCT '95, International Conference on Fundamentals of Computation Theory, volume 965 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-15, </pages> <address> Dresden, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: These terms represent processes. The axioms express which processes are to be considered equal. The axioms for this process algebra are given in Appendix A. In the axioms also auxiliary operators rel , b c ! , k , and j appear. The axioms can also be found in <ref> [BB92, BB95, BB96, Bos95] </ref>. Also for other issues concerning discrete time process algebra we refer to these papers. We only list the operators that play a role in the main text of this paper.
Reference: [BB96] <author> J. C. M. Baeten and J. A. Bergstra. </author> <title> Discrete time process algebra. </title> <journal> Formal Aspects of Computing, </journal> <volume> 8(2) </volume> <pages> 188-208, </pages> <year> 1996. </year>
Reference-contexts: These terms represent processes. The axioms express which processes are to be considered equal. The axioms for this process algebra are given in Appendix A. In the axioms also auxiliary operators rel , b c ! , k , and j appear. The axioms can also be found in <ref> [BB92, BB95, BB96, Bos95] </ref>. Also for other issues concerning discrete time process algebra we refer to these papers. We only list the operators that play a role in the main text of this paper.
Reference: [Bos95] <author> S. H. J. Bos. </author> <title> The I 2 C-bus in discrete time process algebra. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1995. </year>
Reference-contexts: University of Technology), Loe Feijs (Eindhoven University of Technology and Philips Research Laboratory Eindhoven), and the anonymous referees for their valuable comments. 2 The I C-bus In this section we will give a concise introduction into the I 2 C-bus; for a more thorough description and explanation we refer to <ref> [Phi89, Han93, Bos95] </ref>. The I 2 C-bus is used to interconnect integrated circuits. Devices communicating with each other on the bus must have some form of protocol which avoids all possibilities of confusion, data loss and blockage of information. Fast devices must be able to communicate with slow devices. <p> The meta-protocol states that arbitration is not allowed between a start condition and a data bit, a stop condition and a data bit, and a start condition and a stop condition [Phi89]. For a more thorough explanation of the meta-protocol we refer to <ref> [Bos95] </ref>. For our model, it is important that start and stop signals never will be involved in the arbitration procedure. 3 Discrete Time Process Algebra with Relative Timing In this section, we will introduce the process algebra used for modelling the I 2 C-bus in this paper. <p> These terms represent processes. The axioms express which processes are to be considered equal. The axioms for this process algebra are given in Appendix A. In the axioms also auxiliary operators rel , b c ! , k , and j appear. The axioms can also be found in <ref> [BB92, BB95, BB96, Bos95] </ref>. Also for other issues concerning discrete time process algebra we refer to these papers. We only list the operators that play a role in the main text of this paper. <p> Thirdly, in situations where a number of devices have to communicate via the I 2 C-bus it is useful to establish that there is absence of deadlock. Given specifications of those devices (in process algebra), one can easily check whether the complete system has absence of deadlock (see <ref> [Bos95] </ref> for some examples). The main technique involved is that of normalizing a process term. Such a normal form only contains atomic actions, the constant deadlock and the operators and C. For more information about normalization and related issues we refer to [BW90, BV95].
Reference: [BV95] <author> J. C. M. Baeten and C. Verhoef. </author> <title> Concrete process algebra. </title> <editor> In S. Abramsky, D.M. Gabbay, and T.S.E. Maibaum, editors, </editor> <booktitle> Semantic Modelling, volume 4 of Handbook of Logic in Computer Science, </booktitle> <pages> pages 149-268. </pages> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: The main technique involved is that of normalizing a process term. Such a normal form only contains atomic actions, the constant deadlock and the operators and C. For more information about normalization and related issues we refer to <ref> [BW90, BV95] </ref>. From a normal form one also easily inspects the actual transitions on the bus lines, which might be useful to compare with the bus transitions that were expected.
Reference: [BW90] <author> J. C. M. Baeten and W. P. Weijland. </author> <title> Process Algebra, </title> <booktitle> volume 18 of Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: The main technique involved is that of normalizing a process term. Such a normal form only contains atomic actions, the constant deadlock and the operators and C. For more information about normalization and related issues we refer to <ref> [BW90, BV95] </ref>. From a normal form one also easily inspects the actual transitions on the bus lines, which might be useful to compare with the bus transitions that were expected.
Reference: [Han93] <author> A. Hanse. </author> <title> Connecting asynchronous devices to the I 2 C-bus. </title> <type> Master's thesis, </type> <institution> Eindhoven University of Technology, </institution> <year> 1993. </year>
Reference-contexts: University of Technology), Loe Feijs (Eindhoven University of Technology and Philips Research Laboratory Eindhoven), and the anonymous referees for their valuable comments. 2 The I C-bus In this section we will give a concise introduction into the I 2 C-bus; for a more thorough description and explanation we refer to <ref> [Phi89, Han93, Bos95] </ref>. The I 2 C-bus is used to interconnect integrated circuits. Devices communicating with each other on the bus must have some form of protocol which avoids all possibilities of confusion, data loss and blockage of information. Fast devices must be able to communicate with slow devices.
Reference: [Phi89] <author> Philips. </author> <title> I 2 C-bus compatbible ICs, volume IC 12 of Philips Data Handbook: integrated circuits. </title> <institution> Philips, Eindhoven, </institution> <year> 1989. </year> <month> 23 </month>
Reference-contexts: University of Technology), Loe Feijs (Eindhoven University of Technology and Philips Research Laboratory Eindhoven), and the anonymous referees for their valuable comments. 2 The I C-bus In this section we will give a concise introduction into the I 2 C-bus; for a more thorough description and explanation we refer to <ref> [Phi89, Han93, Bos95] </ref>. The I 2 C-bus is used to interconnect integrated circuits. Devices communicating with each other on the bus must have some form of protocol which avoids all possibilities of confusion, data loss and blockage of information. Fast devices must be able to communicate with slow devices. <p> In Figure 1 the timing constraints are depicted in relation to both the SDA and SCL lines. The names of the timing constraints are taken from <ref> [Phi89] </ref>. 4 In the previous part of this section the protocol on the I 2 C-bus is described. In this protocol the communication primitives have been discussed. We described how these primitives are used in relation to each other to build a complete bus session. <p> This meta-protocol describes the communication behaviour between masters and slaves. The meta-protocol states that arbitration is not allowed between a start condition and a data bit, a stop condition and a data bit, and a start condition and a stop condition <ref> [Phi89] </ref>. For a more thorough explanation of the meta-protocol we refer to [Bos95]. <p> As mentioned before, a session consists of communication actions. In between consecutive actions, the SCL line has to be clamped by the master. This situation is represented by process N . Allthough the I 2 C-bus-specification <ref> [Phi89] </ref> does not restrict the value of the SDA line, while the SCL line is low, we will demand that the master releases the SDA line. With this assumption a slave which is waiting to manipulate the data line is able to do so as soon as possible.
References-found: 9

