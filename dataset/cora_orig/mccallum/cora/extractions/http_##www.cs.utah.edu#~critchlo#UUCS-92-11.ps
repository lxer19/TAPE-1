URL: http://www.cs.utah.edu/~critchlo/UUCS-92-11.ps
Refering-URL: http://www.cs.utah.edu/~critchlo/
Root-URL: 
Title: A Distributed Garbage Collection Algorithm  
Author: Terence Critchlow 
Date: July 30, 1992  
Address: Salt Lake City, UT 84112 USA  
Affiliation: Department of Computer Science University of Utah  
Pubnum: UUCS-92-11  
Abstract: Concurrent Scheme extends the Scheme programming language, providing parallel program execution on a distributed network. The Concurrent Scheme environment requires a garbage collector to reclaim global objects; objects that exist in a portion of the global heap located on the node that created them. Because a global object may be referenced by several nodes, traditional garbage collection algorithms cannot be used. The garbage collector used must be able to reclaim global objects with minimal disturbance to the user program, and without the use of global state information. It must operate asynchronously, have a low network overhead, and be able to handle out-of-order messages. This thesis describes a distributed reference counting garbage collector appropriate for the reclamation of global objects in the Concurrent Scheme environment. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Abelson and G. Sussman. </author> <title> Structure and Interpretation of Computer Programs. </title> <publisher> MIT Press, </publisher> <year> 1985. </year>
Reference: [2] <author> Santosh G. Abraham and Janak H. Patel. </author> <title> Parallel garbage collection on a virtual memeory machine. </title> <booktitle> Parallel Processing, </booktitle> <year> 1987. </year>
Reference: [3] <author> Andrew W. Appel, John R. Ellis, and Kai Li. </author> <title> Real-time concurrent collection on stock multiprocessors. </title> <booktitle> In Proceedings of the SIGPLAN '88 Conference on Programming Language Design and Implementation, </booktitle> <year> 1988. </year>
Reference: [4] <author> H.G. Baker. </author> <title> List processing in real time on a serial computer. </title> <journal> Communications of the ACM, </journal> <volume> 21(4) </volume> <pages> 280-294, </pages> <month> April </month> <year> 1978. </year>
Reference: [5] <author> D. I. Bevan. </author> <title> Distributed garbage collection using reference counting. </title> <booktitle> PARLE, </booktitle> <volume> 2 </volume> <pages> 176-187, </pages> <month> June </month> <year> 1987. </year>
Reference: [6] <author> Daniel G. Bobrow. </author> <title> Managing reentrant structures using reference counts. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 2(3) </volume> <pages> 270-273, </pages> <year> 1980. </year>
Reference: [7] <author> D. R. Brownbridge. </author> <title> Cyclic reference counting for combinator machines. </title> <booktitle> In Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 273-288, </pages> <year> 1985. </year>
Reference: [8] <author> Jacques Cohen. </author> <title> Garbage collection of linked data structures. </title> <journal> ACM Computing Surveys, </journal> <volume> 13(3) </volume> <pages> 341-364, </pages> <year> 1981. </year>
Reference: [9] <author> Al Davis. Mayfly: </author> <title> A general purpose, scalable, parallel processing architecture. </title> <type> Technical report, </type> <institution> Hewlett-Packard Laboratories 3L, </institution> <year> 1990. </year>
Reference: [10] <author> Al Davis. Mayfly: </author> <title> A general purpose, scalable, parallel processing architecture. </title> <journal> International Journal on Lisp and Symbolic Computation, </journal> 5(1/2):7-47, May 1992. 
Reference: [11] <author> Jeffrey L. Dawson. </author> <title> Improved effectiveness from a real time Lisp garbage collector. </title> <booktitle> In ACM Symposium on Lisp and Functional Programming, </booktitle> <pages> pages 159-167, </pages> <year> 1982. </year>
Reference: [12] <author> John DeTreville. </author> <title> Experience with concurrent garbage collectors for Modula-2+. </title> <type> Technical Report 64, </type> <institution> Digital, </institution> <month> November </month> <year> 1990. </year> <month> 54 </month>
Reference: [13] <author> L. P. Deutsch and D. G. Bobrow. </author> <title> An efficient, incremental, automatic garbage collector. </title> <journal> Communications of the ACM, </journal> <volume> 19(9) </volume> <pages> 522-526, </pages> <month> September </month> <year> 1976. </year>
Reference: [14] <author> Edsger W. Dijkstra, Leslie Lamport, A.J. Martin, C.S. Scholten, and E.F.M. Steffens. </author> <title> On-the-fly garbage collection: An exercise in cooperation. </title> <journal> Communications of the ACM, </journal> <volume> 21(11) </volume> <pages> 966-975, </pages> <month> November </month> <year> 1978. </year>
Reference: [15] <author> Daniel P. Friedman and David S. Wise. </author> <title> Reference counts can handle the circular environments of mututal recursion. </title> <journal> Information Processing Letters, </journal> <volume> 8(1) </volume> <pages> 41-45, </pages> <year> 1979. </year>
Reference: [16] <author> Benjamin Goldberg. </author> <title> Generational reference counting: A reduced communication distributed storage reclamation scheme. </title> <booktitle> In Proceedings of the SIGPLAN '89 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 313-321, </pages> <year> 1989. </year>
Reference: [17] <author> P. Hudak and R.M. Keller. </author> <title> Garbage collection and task deletion in distributed applicative processing systems. </title> <booktitle> In ACM Symposium on Lisp and Functional Programming, </booktitle> <pages> pages 168-178, </pages> <year> 1982. </year>
Reference: [18] <author> John Hughes. </author> <title> A distributed garbage collection algorithm. </title> <booktitle> In Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 256-272, </pages> <year> 1985. </year>
Reference: [19] <author> Joseph S. Barrera III. </author> <title> A fast Mach network IPC implementation. </title> <booktitle> In Proceedings of the USENIX Mach Symposium, </booktitle> <pages> pages 1-11, </pages> <year> 1991. </year>
Reference-contexts: Although this algorithm is currently implemented only in CUS, there is no reason why it could not be implemented in a wide variety of environments. For example, this algorithm may be used to implement the no-senders notification option for Mach ports <ref> [19] </ref>. In Mach, a task creates a port, to which it has read rights. It then distributes send rights to other tasks, which can also distribute send rights to other tasks. The no-senders option notifies the task with the read right when there are no tasks with send rights.
Reference: [20] <author> Niels Christian Juul. </author> <title> A distributed faulting garbage collector for Emerald. </title> <booktitle> In OOPSLA Workshop on Garbage Collection, </booktitle> <year> 1990. </year>
Reference: [21] <author> R. Kessler, H. Carr, L. Stoller, and M. Swanson. </author> <title> Implementing Concurrent Scheme for the Mayfly distributed parallel processing system. </title> <journal> International Journal on Lisp and Symbolic Computation, </journal> 5(1/2):73-93, May 1992. 
Reference: [22] <author> Henry Lieberman and Carl Hewitt. </author> <title> A real-time garbage collector based on the lifetime of objects. </title> <journal> Communications of the ACM, </journal> <volume> 26(6) </volume> <pages> 419-429, </pages> <year> 1983. </year>
Reference: [23] <author> Alejandro D. Martnez and Rosita Wachenchauzer. </author> <title> Cyclic refence counting with local mark-scan. </title> <journal> Information Processing Letters, </journal> <volume> 34(1) </volume> <pages> 22-35, </pages> <year> 1990. </year>
Reference: [24] <author> Shogo Matsui, Yoshinobu Kato, Shinsuke Teramura, Tomoyuki Tanaka, Nobuyuki Mohri, Atsushi Maeda, and Masakazu Nakanishi. </author> <title> SYNAPSE: A multi-microprocessor Lisp machine with parallel garbage collector. </title> <booktitle> In Parallel Algorithms and Architectures International Workshop, </booktitle> <pages> pages 131-137, </pages> <month> May </month> <year> 1987. </year>
Reference: [25] <author> David A. Moon. </author> <title> Garbage collection in a large Lisp system. </title> <booktitle> In ACM Symposium on Lisp and Functional Programming, </booktitle> <pages> pages 235-246, </pages> <year> 1984. </year> <month> 55 </month>
Reference: [26] <author> F. Lockwood Morris. </author> <title> A time- and space-efficient garbage compaction algorithm. </title> <journal> Communications of the ACM, </journal> <volume> 21(8) </volume> <pages> 662-665, </pages> <month> August </month> <year> 1978. </year>
Reference: [27] <author> Marc Shapiro. </author> <title> A fault-tolerant, scalable, low-overhead distributed garbage detection protocol. </title> <booktitle> In IEEE 10th Symposium on Reliable Distributed Systems, </booktitle> <year> 1991. </year>
Reference: [28] <author> Marc Shapiro, David Plainfosse, and Olivier Gruber. </author> <title> A garbage detection protocol for a realistic distributed object-support system. </title> <type> Technical Report 1320, </type> <institution> Institut National de la Recherche en Iformatique et Automatique, </institution> <month> November </month> <year> 1990. </year>
Reference: [29] <author> Heonshik Shin and Miroslaw Malek. </author> <title> Parallel garbage collection with associative tag. </title> <booktitle> IEEE Parallel Processing, </booktitle> <pages> pages 369-375, </pages> <year> 1985. </year>
Reference: [30] <author> M. R. Swanson. </author> <title> Concurrent Scheme, A Language for Concurrent Symbolic Computing. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Utah, </institution> <address> Salt Lake City, Utah 84112, </address> <month> January </month> <year> 1991. </year>
Reference: [31] <author> M. R. Swanson and R. R. Kessler. </author> <title> Parallel Lisp: </title> <booktitle> Languages and Systems, volume 441 of Lecture Notes in Computer Science, </booktitle> <pages> pages 200-234. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference: [32] <author> Douglas M. Wasahbaugh and Dennis Kafura. </author> <title> Incremental garbage collection of concurrent objects for real-time applications. </title> <booktitle> IEEE Real-Time Systems Symposium, </booktitle> <pages> pages 21-30, </pages> <year> 1990. </year>
Reference: [33] <author> Paul Watson and Ian Watson. </author> <title> An efficient garbage collection scheme for parallel computer architectures. </title> <booktitle> PARLE, </booktitle> <volume> 2, </volume> <month> June </month> <year> 1987. </year>
Reference: [34] <author> Joseph Weizenbaum. </author> <title> Recovery of reentrant list structures in SLIP. </title> <journal> Communications of the ACM, </journal> <volume> 12(7) </volume> <pages> 370-372, </pages> <month> July </month> <year> 1969. </year>
Reference: [35] <author> K-S Weng. </author> <title> An abstract implementation for a generalized dataflow language. </title> <type> Technical Report 228, </type> <institution> MIT Laboratory for Computer Science, </institution> <year> 1979. </year>
References-found: 35

