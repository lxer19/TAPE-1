URL: http://ptolemy.eecs.berkeley.edu/papers/extended_partitioning/partitioning_rapid95.ps.Z
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/codesign/
Root-URL: http://www.cs.berkeley.edu
Title: Comparison with ILP The extended partitioning problem seeks to jointly opti Scenario hardware area run
Keyword: 6.3: Mapping vs. Extended Partitioning  
Date: MIBS 181 3 minutes  3 MIBS 362 0.4918  
Note: 6.2:  7.0: Conclusions  8.0: Acknowledgements 9.0: References  
Pubnum: ILP 158 3.5 hours  530 0.7201  
Abstract: 7 communication. Hardware and software for the nodes is synthesized using techniques reported in [7]. On an average, there are 7-8 hardware implementation bins per node. A single software implementation is assumed. The solution obtained by the MIBS algorithm is compared to an exact (integer linear program) solution. In the ILP formulation, a 15 node problem required 718 constraints and 396 variables (381 integer variables). The ILP was solved using CPLEX on a Sun SPARCstation10. Table 3 summarizes these results. The closeness of the solutions is encouraging, especially since ILP becomes formidable for even small problems. In the following examples we show that the ability to select an implementation bin, rather than just use a single bin for all the nodes, significantly reduces the overall hardware area. Three cases are considered. In the first case, the GCLP algorithm is applied to the graph, where the execution times and areas for all the nodes correspond to their L bins values. In the second case, the GCLP algorithm is applied to the graph where the area and execution time values correspond to the median implementation bins. In the third case, the MIBS algorithm is applied. Table 4 shows the re sults for the three cases for the modem example. Case 2 gave a better solution (28% smaller hardware area) than case 1 as expected. The MIBS solution is far superior to that obtained with just GCLP (50% less hardware compared to the fastest case, and 32% less than the median case). This proves that the implementation flexibility can be used in partitioning to reduce the overall hardware area. Table 4: Area improvement using the MIBS. mize the mapping of nodes to hardware or software, and the selection of implementation bins within a mapping. The MIBS heuristic is presented to solve this problem efficiently (O(|N| 3 )). It solves the extended partitioning problem by decomposing it into an iterative process consisting of two steps: mapping and implementation-bin selection. The GCLP algorithm computes the mapping by using an adaptive optimization objective at each step. This objective is selected on the basis of a global time criticality measure and local optimality measures. The IBS algorithm solves the implementation-bin selection problem. It uses a bin sensitivity measure, which correlates the implementation-bin motion with the overall hardware area reduction, to select an implementation bin for a node for a given mapping. This GCLP-IBS sequence is repeated for |N| nodes in the DAG. Experimental results indicate that the added dimension of design flexibility (offered by implementation bins) can be used effectively in partitioning to reduce the overall area. The solution obtained by the MIBS algorithm is close to the ILP solution. This research is part of the Ptolemy project, which is supported by ARPA and the U.S. Air Force (under the RASSP program F33615-93-C-1317), SRC (95-DC-324-016), NSF (MIP-9201605), Office of Naval Technology (via NRL), the State of California MICRO program, and the following companies: Bell Northern Research, Dolby, Hitachi, Mentor Graphics, Mitsubishi, NEC, Pacific Bell, Philips, Rockwell, Sony, and Synopsys. [1] A. Kalavade, E. A. Lee, A Global Criticality/ Local Phase Driven Algorithm for the Constrained Hardware/Software Partitioning Problem, Proc. of CODES/CASHE, Third Intl. Workshop on Hardware/Software Codesign, Grenoble, France, Sept. 22-24, 1994, pp 42-48. [2] R. Gupta, G. Micheli, System-level Synthesis Using Re-programmable Components, Proc. of European Conf. on Design Automation, Brussels, Belgium, Feb.1992, pp 2-7. [3] R. Ernest, J. Henkel, Hardware/software Codesign of Embedded Controllers based on Hardware Extraction, Handouts of the 1st Intl. Workshop on Hardware/Software Codesign, Estes Park, Colorado, Sept. 1992. [4] J. M. Rabaey et al. Fast Prototyping of datapath-intensive Architectures, IEEE Design & Test, June 1991, pp. 40-51. [5] D. E. Thomas, J. K. Adams, H. Schmit, A Model and Methodology for Hardware/Software Codesign, IEEE Design and Test of Computers, Sept. 1993, pp 6-15. [6] J. Buck, et al. Ptolemy: a Framework for Simulating and Prototyping Heterogeneous Systems, Intl. Journal of Computer Simulation, special issue Simulation Software Development, Apr. 1994, v4, pp 155-182. [7] A. Kalavade, E. A. Lee, A Hardware/Software Codesign Methodology for DSP applications, IEEE Design and Test of Computers, Sept. 1993, pp 16-28. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Kalavade, E. A. Lee, </author> <title> A Global Criticality/ Local Phase Driven Algorithm for the Constrained Hardware/Software Partitioning Problem, </title> <booktitle> Proc. of CODES/CASHE, Third Intl. Workshop on Hardware/Software Codesign, </booktitle> <address> Grenoble, France, </address> <month> Sept. </month> <pages> 22-24, </pages> <year> 1994, </year> <pages> pp 42-48. </pages>
Reference: [2] <author> R. Gupta, G. </author> <title> Micheli, System-level Synthesis Using Re-programmable Components, </title> <booktitle> Proc. of European Conf. on Design Automation, </booktitle> <address> Brussels, Belgium, </address> <publisher> Feb.1992, </publisher> <pages> pp 2-7. </pages>
Reference: [3] <author> R. Ernest, J. Henkel, </author> <title> Hardware/software Codesign of Embedded Controllers based on Hardware Extraction, </title> <booktitle> Handouts of the 1st Intl. Workshop on Hardware/Software Codesign, </booktitle> <address> Estes Park, Colorado, </address> <month> Sept. </month> <year> 1992. </year>
Reference: [4] <author> J. M. Rabaey et al. </author> <title> Fast Prototyping of datapath-intensive Architectures, </title> <booktitle> IEEE Design & Test, </booktitle> <month> June </month> <year> 1991, </year> <pages> pp. 40-51. </pages>
Reference: [5] <author> D. E. Thomas, J. K. Adams, H. </author> <title> Schmit, A Model and Methodology for Hardware/Software Codesign, </title> <booktitle> IEEE Design and Test of Computers, </booktitle> <month> Sept. </month> <year> 1993, </year> <pages> pp 6-15. </pages>
Reference: [6] <author> J. Buck, et al. Ptolemy: </author> <title> a Framework for Simulating and Prototyping Heterogeneous Systems, </title> <journal> Intl. Journal of Computer Simulation, special issue Simulation Software Development, </journal> <month> Apr. </month> <year> 1994, </year> <pages> v4, pp 155-182. </pages>

References-found: 6

