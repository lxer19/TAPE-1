URL: http://www-sal.cs.uiuc.edu/~kamin/dsl/papers/pfahler.ps
Refering-URL: http://www-sal.cs.uiuc.edu/~kamin/dsl/index.html
Root-URL: http://www.cs.uiuc.edu
Email: Email: fpeter, uweg@uni-paderborn.de  
Title: Language Design and Implementation by Selection  
Author: Peter Pfahler, Uwe Kastens 
Address: 17, D-33095 Paderborn/Germany  
Affiliation: Universitat-GH Paderborn, Fachbereich  
Abstract: This paper demonstrates that design and implementation of languages for a specific domain can be done on a very high level of abstraction: elements and properties of a language are composed mainly by simple yes/no decisions. Consistency and completeness of the decisions are automatically checked. An implementation of the chosen language is obtained by selecting combinable specification components according to the user decisions and then feeding them into the language implementation system Eli. This approach is especially useful for designers of domain specific languages who usually have to deal with languages that have to be revised quite frequently and who normally do not have deep knowledge in the field of languages design and implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [BH96] <author> J. Bosch and G. Hedin. </author> <title> Editors's Introduction. In Proceedings ALEL'96 Workshop on Compiler Techniques for Application Domain Languages and Extensible Language Models, </title> <type> Technical Report LU-CS-TR:96-173. </type> <institution> Lund University, Sweden, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: This, however, puts considerable requirements on the user-friendliness of the compiler techniques implementing the domain specific language <ref> [BH96] </ref>. Our approach goes one step further by letting the domain experts own the generator system that produces the application specific language implementation and providing him with a prefabricated set of combinable and parametrizable input specifications for this generator.
Reference: [Bja96] <author> E. Bjarnason. </author> <title> APPLAB A Laboratory for Application Languages. </title> <type> Technical Report LU-CS-TR:96-177, </type> <institution> Lund Institute of Technology, Lund, Sweden, </institution> <year> 1996. </year>
Reference-contexts: Asf+Sdf [Kli93] stands for "Algebraic specification formalism" and "Syntax definition formalism". Based on Asf+Sdf a Meta-environment called gipe has been built that allows for rapid prototyping of language specifications. The Mjtlner Orm system has also been used as a structure-based Meta Environment [MM92]. The system applab <ref> [Bja96] </ref> is a extension of Orm that especially aims at supporting interactive language development. Structure-based Meta Environments have in common that they provide immediate feedback. This means that their users can freely switch between specifying the domain specific language and writing programs in that language using a structure editor.
Reference: [Cle88] <author> J.C. Cleaveland. </author> <title> Building Application Generators. </title> <journal> IEEE Software, </journal> <pages> pages 25-33, </pages> <month> Jul </month> <year> 1988. </year>
Reference-contexts: For our approach language design considerations influence the specification base components as well as the knowledge base rules to combine these components. Application Generators were introduced in [HKN85] for domain specific system descriptions in the domain of data base tools. <ref> [Cle88] </ref> generalizes the principle of application generators, points out their relation to compilers, and describes tools to construct them. In [Kas96] application generator construction using Eli is presented. Application generators are discussed in [Kru92] as one of the several general principles for software reuse.
Reference: [Eli96] <author> Eli Development Team. </author> <title> The Eli Home Page. </title> <address> http://www.uni-paderborn.de/fachbereich/AG/agkastens/eli homeE.html, </address> <year> 1996. </year> <title> 4 i.e. application generators in the domain of language specification </title>
Reference-contexts: The knowledge base contains a set of decisions and related questions and rules that ensure their completeness and consistency. The specification base consists of parametrized specification fragments for the Eli system <ref> [GHL + 92, Eli96] </ref> being used as underlying language implementation machine. New domain specific language design systems are easily obtained by exchanging the knowledge and specification bases. The language designer uses our system to interactively select language properties and elements. <p> This correspondence is specified by the evaluation rules. The system's evaluator module interprets these rules and produces an instantiated specification base as input for the Eli machine. 4 The Language Implementation Machine The language design system uses the compiler construction environment Eli <ref> [Eli96] </ref> [GHL + 92] as its language implementation machine. Eli combines a variety of standard tools that implement powerful compiler construction strategies into a domain-specific programming environment. Using this environment, one can automatically generate complete language implementations from application-oriented specifications.
Reference: [FJS86] <author> P. H. Feiler, F. Jalili, and J. H. Schlichter. </author> <title> An Interactive Proto--typing Environment for Language Design. </title> <booktitle> In 19th Annual Hai-waii International Conference on System Sciences, </booktitle> <address> HICSS-19, </address> <month> January </month> <year> 1986. </year>
Reference-contexts: Similar to our approach such systems can be used as language laboratories. The users can experiment with different design alternatives and can explore their consequences interactively in an evolutionary process. dose <ref> [FJS86] </ref> is an interactive prototyping environment for language design. It is based on a structure editor and uses formal specifications for syntax and semantics. Asf+Sdf [Kli93] stands for "Algebraic specification formalism" and "Syntax definition formalism".
Reference: [GHL + 92] <author> R.W. Gray, V.P. Heuring, S.P. Levi, A.M. Sloane, and W.M. W aite. Eli: </author> <title> A Complete, Flexible Compiler Construction System. </title> <journal> Communications of the ACM, </journal> <volume> 35(2) </volume> <pages> 121-131, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: The knowledge base contains a set of decisions and related questions and rules that ensure their completeness and consistency. The specification base consists of parametrized specification fragments for the Eli system <ref> [GHL + 92, Eli96] </ref> being used as underlying language implementation machine. New domain specific language design systems are easily obtained by exchanging the knowledge and specification bases. The language designer uses our system to interactively select language properties and elements. <p> This correspondence is specified by the evaluation rules. The system's evaluator module interprets these rules and produces an instantiated specification base as input for the Eli machine. 4 The Language Implementation Machine The language design system uses the compiler construction environment Eli [Eli96] <ref> [GHL + 92] </ref> as its language implementation machine. Eli combines a variety of standard tools that implement powerful compiler construction strategies into a domain-specific programming environment. Using this environment, one can automatically generate complete language implementations from application-oriented specifications.
Reference: [HKN85] <author> Ellis Horowitz, Alfons Kemper, and Balaji Narasimhan. </author> <title> A Survey of Application Generators. </title> <journal> IEEE Software, </journal> <pages> pages 44-50, </pages> <month> Jan </month> <year> 1985. </year>
Reference-contexts: For our approach language design considerations influence the specification base components as well as the knowledge base rules to combine these components. Application Generators were introduced in <ref> [HKN85] </ref> for domain specific system descriptions in the domain of data base tools. [Cle88] generalizes the principle of application generators, points out their relation to compilers, and describes tools to construct them. In [Kas96] application generator construction using Eli is presented.
Reference: [Kas96] <author> Uwe Kastens. </author> <title> Construction of Application Generators using Eli. In Proceedings ALEL'96 Workshop on Compiler Techniques for Application Domain Languages and Extensible Language Models, </title> <type> Technical Report LU-CS-TR:96-173. </type> <institution> Lund University, Sweden, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: Application Generators were introduced in [HKN85] for domain specific system descriptions in the domain of data base tools. [Cle88] generalizes the principle of application generators, points out their relation to compilers, and describes tools to construct them. In <ref> [Kas96] </ref> application generator construction using Eli is presented. Application generators are discussed in [Kru92] as one of the several general principles for software reuse.
Reference: [Kli93] <author> Paul Klint. </author> <title> A Meta-Environment for Generating Programming Environments. </title> <journal> ACM Transactions of Software Engineering and Methodology, </journal> <volume> 2(2) </volume> <pages> 176-201, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: The users can experiment with different design alternatives and can explore their consequences interactively in an evolutionary process. dose [FJS86] is an interactive prototyping environment for language design. It is based on a structure editor and uses formal specifications for syntax and semantics. Asf+Sdf <ref> [Kli93] </ref> stands for "Algebraic specification formalism" and "Syntax definition formalism". Based on Asf+Sdf a Meta-environment called gipe has been built that allows for rapid prototyping of language specifications. The Mjtlner Orm system has also been used as a structure-based Meta Environment [MM92].
Reference: [Kru92] <author> Charles W. Krueger. </author> <title> Software Reuse. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(2) </volume> <pages> 131-183, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: In [Kas96] application generator construction using Eli is presented. Application generators are discussed in <ref> [Kru92] </ref> as one of the several general principles for software reuse. Structure-oriented environments support the interactive development of domain specific applications by providing a graphical user interface integrating a set of application specific tools (e.g. structure editor, graphical execution observation, incremental compilation).
Reference: [KW91] <author> Uwe Kastens and William M. Waite. </author> <title> An abstract data type for name analysis. </title> <journal> Acta Informatica, </journal> <volume> 28 </volume> <pages> 539-558, </pages> <year> 1991. </year>
Reference-contexts: Apart from these general features of a powerful compiler construction environment there are some Eli characteristics which make it especially well suited for our purpose: * Specifications can be decomposed in both dimensions by language elements as well as by the addressed implementation task. <ref> [KW91] </ref> demonstrates, for instance, how the name analysis subtask can be separated from other tasks and that it can be described independently from the syntactical structure of the language being implemented. * Eli's input specification is a collection of typed specification components.
Reference: [KW92] <author> Uwe Kastens and William M. Waite. </author> <title> Modularity and Reusability in Attribute Grammars. </title> <type> Technical Report 102, </type> <institution> Reihe Informatik, Universitat-GH Paderborn, Fachbereich Mathematik-Informatik, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: Eli combines a variety of standard tools that implement powerful compiler construction strategies into a domain-specific programming environment. Using this environment, one can automatically generate complete language implementations from application-oriented specifications. Eli offers complete solutions for commonly-encountered language implementation subtasks and contains libraries of reusable specifications <ref> [KW92] </ref>, making possible the production of high-quality implementations from simple problem descriptions.
Reference: [MM92] <author> S. Minor and B. Magnusson. </author> <title> Using Mjtlner Orm as a Structure-Based Meta Environment. </title> <type> Technical report, </type> <institution> Department of Computer Science Lund University, </institution> <year> 1992. </year>
Reference-contexts: Asf+Sdf [Kli93] stands for "Algebraic specification formalism" and "Syntax definition formalism". Based on Asf+Sdf a Meta-environment called gipe has been built that allows for rapid prototyping of language specifications. The Mjtlner Orm system has also been used as a structure-based Meta Environment <ref> [MM92] </ref>. The system applab [Bja96] is a extension of Orm that especially aims at supporting interactive language development. Structure-based Meta Environments have in common that they provide immediate feedback.
Reference: [Seb96] <author> Robert W. </author> <title> Sebesta. </title> <booktitle> Concepts of Programming Languages. </booktitle> <address> Ben-jamin/Cummings, Redwood City, Calif., third edition, </address> <year> 1996. </year>
Reference-contexts: User interface, knowledge base and the user advice system hide compiler technological aspects such that our system should be usable by application domain experts without computer science background. The following fields of research relate to our work: Language design <ref> [Wat90, Seb96] </ref> is primarily concerned with design issues for general purpose programming languages. General programming language design principles (like readability, writability, support for abstraction, reliability, simplicity and orthogonality) are certainly valuable for domain specific languages, too.
Reference: [Wat90] <author> David A. Watt. </author> <title> Programming Language Concepts and Paradigms. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: User interface, knowledge base and the user advice system hide compiler technological aspects such that our system should be usable by application domain experts without computer science background. The following fields of research relate to our work: Language design <ref> [Wat90, Seb96] </ref> is primarily concerned with design issues for general purpose programming languages. General programming language design principles (like readability, writability, support for abstraction, reliability, simplicity and orthogonality) are certainly valuable for domain specific languages, too.
References-found: 15

