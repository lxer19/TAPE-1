URL: http://www.cs.utah.edu/~ampsem/omniware-inet.ps
Refering-URL: http://www.cs.utah.edu/~ampsem/omniware.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: NET omniware@colusa.com  
Phone: TEL (510) 525-7133 FAX (510) 845-4426  
Title: Colusa Software White Paper Omniware: A Universal Substrate for Mobile Code  
Web: WEB http://www.colusa.com  
Note: Colusa Software  
Abstract-found: 0
Intro-found: 1
Reference: [Bounds92] <author> J. L. Stefen, </author> <title> Adding RunTime Checking to the Portable C Compiler, </title> <journal> Software Practice and Experience, </journal> <month> April </month> <year> 1992, </year> <note> vol.22, </note> <author> no.4, p. </author> <month> 305-16. </month>
Reference-contexts: At some point in the future the Java project plans to offer a virtual machine that employs dynamic compilation. Certain features of the virtual machine, such as array bounds checking, stack based operations, and garbage collection will make it difficult to implement efficiently <ref> [GC84, GC93, Bounds92, Interp77] </ref>. Omniware can work together with Java in two ways. First, the Java language can be compiled directly into OmniVM instructions. Second, the Java VM, since it is implemented in C, can be compiled into an Omniware module.
Reference: [GC84] <author> R. Brooks, </author> <title> Trading Data Space for Reduced Time and Code Space in Real-Time Garbage Collection on Stock Hardware, </title> <booktitle> ACM Software Engineering Symposium on Practical Software Development Environments, 1984, p. </booktitle> <pages> 256-262. </pages>
Reference-contexts: At some point in the future the Java project plans to offer a virtual machine that employs dynamic compilation. Certain features of the virtual machine, such as array bounds checking, stack based operations, and garbage collection will make it difficult to implement efficiently <ref> [GC84, GC93, Bounds92, Interp77] </ref>. Omniware can work together with Java in two ways. First, the Java language can be compiled directly into OmniVM instructions. Second, the Java VM, since it is implemented in C, can be compiled into an Omniware module.
Reference: [GC93] <author> B. Zorn, </author> <title> The Measured Cost of Conservative Garbage Collection, </title> <journal> Software - Practice and Experience, </journal> <volume> vol 23, no. 7, </volume> <month> July </month> <year> 1993, </year> <pages> p. 733-56. </pages>
Reference-contexts: At some point in the future the Java project plans to offer a virtual machine that employs dynamic compilation. Certain features of the virtual machine, such as array bounds checking, stack based operations, and garbage collection will make it difficult to implement efficiently <ref> [GC84, GC93, Bounds92, Interp77] </ref>. Omniware can work together with Java in two ways. First, the Java language can be compiled directly into OmniVM instructions. Second, the Java VM, since it is implemented in C, can be compiled into an Omniware module.
Reference: [Guile95] <author> T. Lord, </author> <title> The Guile Architecture for Ubiquitous Computing, to appear in: </title> <booktitle> Usenix Tcl/Tk Workshop, </booktitle> <year> 1995. </year>
Reference-contexts: Second, the Java VM, since it is implemented in C, can be compiled into an Omniware module. Omniware-enabled Web tools wishing to execute a compiled Java module could dynamically load and retrieve the Java VM. Another approach to supporting mobile code is the Guile <ref> [Guile95] </ref> project from Cygnus Support. Its implementation is still underway at the time this paper is being written, but the idea is to provide a library that includes an interpreter for a language based on Scheme [Scheme91]. The library provides a set of data structures and system services.
Reference: [HTML95] <author> I. S. Graham. </author> <title> The HTML Sourcebook, </title> <publisher> Wiley: </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: In addition to the debugger and C/C++ compilers, the development environment includes an assembler (OmniAsm), a library archive utility (OmniAr), and a linker (OmniLd). Building Omniware modules is exactly analogous to building conventional programs. As a concrete example of using the Omniware system, consider the HTML <ref> [HTML95] </ref> browser depicted in the diagram below that uses Omniware to support dynamic behavior for Web pages. The browser would allow Web pages to include executable Omniware modules, just as todays browsers support GIF and JPEG images.
Reference: [IEEE85] <editor> IEEE Standard 754-1985. </editor> <title> IEEE Standard for Binary Floating-Point Arithmetic. </title> <publisher> IEEE: </publisher> <address> New York, </address> <year> 1985. </year>
Reference: [Interp77] <author> J. P. Fitch and A. C. Norman, </author> <title> Implementing LISP in a High-Level Language, </title> <journal> Software Practice and Experience, </journal> <volume> vol. 7, </volume> <year> 1977, </year> <pages> p. 713-725. </pages>
Reference-contexts: At some point in the future the Java project plans to offer a virtual machine that employs dynamic compilation. Certain features of the virtual machine, such as array bounds checking, stack based operations, and garbage collection will make it difficult to implement efficiently <ref> [GC84, GC93, Bounds92, Interp77] </ref>. Omniware can work together with Java in two ways. First, the Java language can be compiled directly into OmniVM instructions. Second, the Java VM, since it is implemented in C, can be compiled into an Omniware module.
Reference: [Java95] <author> J. Gosling. </author> <title> Java Intermediate Bytecodes, </title> <booktitle> ACM SIGPLAN Workshop on Intermediate Representations (IR'95), </booktitle> <address> San Francisco, CA, </address> <month> Jan. </month> <year> 1995. </year>
Reference: [Pentium94] <institution> Pentium Processor User's Manual. Intel Corporation: Mt. Prospect, IL, </institution> <year> 1994. </year>
Reference: [Perl92] <author> L. Wall and R. L. Schwartz. </author> <title> Programming Perl. </title> <publisher> OReilly and Associates: </publisher> <address> Sebastopol, CA, </address> <year> 1992. </year> <note> [Python94] http://minsky.med.virginia.edu/sdm7g/Projects/Python/SafePython.html </note>
Reference: [Safe-Tcl94] <author> N. S. Borenstein. </author> <title> Email With a Mind of its Own: The Safe-Tcl Language for Enabled Mail, </title> <booktitle> IFIP International Conference, </booktitle> <address> Barcelona, Spain, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: The intent is to merge the two versions of the language in the future so that Python can be used to build distributed applications and to support mobile code. Safe-Tcl <ref> [Safe-Tcl94] </ref> is a modified version of the Tcl language [Tcl94]. Tcl was primarily designed to allow programmers to write graphical applications more quickly. Safe-Tcl is a restricted version of the full language that is safe to incorporate into a mail message.
Reference: [Scheme91] <editor> J. Rees and W. Clinger, eds. </editor> <title> The Revised^4 Report on the Algorithmic Language Scheme, </title> <journal> ACM Lisp Pointers, </journal> <volume> vol. 4, no. 3, </volume> <year> 1991. </year>
Reference-contexts: Another approach to supporting mobile code is the Guile [Guile95] project from Cygnus Support. Its implementation is still underway at the time this paper is being written, but the idea is to provide a library that includes an interpreter for a language based on Scheme <ref> [Scheme91] </ref>. The library provides a set of data structures and system services. Like Omniware, the Guile library is linked into a host application and allows it to manage code modules. The host can declare functions that become new primitives in the Guile language and are thus available to the modules.
Reference: [SFI93] <author> R. Wahbe, S. Lucco, T. Anderson, and S. L. Graham. </author> <title> Efficient Software-Based Fault Isolation, </title> <booktitle> 14th ACM Symposium on Operating Systems Principles, </booktitle> <address> Ashville, NC, </address> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: For maximum performance and power, OmniVM is modeled after an enhanced RISC processor. When OmniVM loads a mobile code module, it dynamically compiles the module into native machine code. Safety is ensured through the use of software fault isolation technology <ref> [SFI93] </ref>. Software fault isolation inserts specialized checking code into the modules native instruction stream so that an modules access to all resources can be controlled. Omniware has two unique features. First, Omniware is open. <p> The ORE uses a technology called software fault isolation (SFI) to implement the semantics of the OmniVM protection architecture. This technology is described extensively elsewhere <ref> [SFI93] </ref>. Two essential properties of software fault isolation are: 1. It is based on the semantics of the underlying processor architecture and not the high-level source language. 2. It uses a form of runtime checking that can be heavily optimized so that protection overhead is small (see performance measurements in [SFI93] <p> <ref> [SFI93] </ref>. Two essential properties of software fault isolation are: 1. It is based on the semantics of the underlying processor architecture and not the high-level source language. 2. It uses a form of runtime checking that can be heavily optimized so that protection overhead is small (see performance measurements in [SFI93] and section 4 of this paper). 3.2 Omniware System Libraries The Omniware Runtime Environment contains operating system independent libraries for memory management, file I/O, threads, synchronization and signals. We are in the process of implementing a window and graphics library.
Reference: [SPEC92] <author> SPEC92 Release Notes. </author> <title> Standard Performance Evaluation Corporation (SPEC): </title> <address> Fairfax, VA, </address> <year> 1992. </year>
Reference: [Tcl94] <author> J. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley: </publisher> <address> Reading, Mass., </address> <year> 1994. </year>
Reference-contexts: The HTML browser is statically linked to the ORE. Functions exported by the browser to Omniware modules might include graphical user interface routines, existing libraries that perform mathematical or 3D computations, or protected operating system calls. For instance, the Tcl/Tk <ref> [Tcl94] </ref> package makes it easy to build a graphical interface. By exporting a few interface functions from the Tcl/Tk libraries, the browser can allow modules to construct their own user interface. <p> The intent is to merge the two versions of the language in the future so that Python can be used to build distributed applications and to support mobile code. Safe-Tcl [Safe-Tcl94] is a modified version of the Tcl language <ref> [Tcl94] </ref>. Tcl was primarily designed to allow programmers to write graphical applications more quickly. Safe-Tcl is a restricted version of the full language that is safe to incorporate into a mail message.
Reference: [Telescript93] <author> Telescript Technology: </author> <title> The Foundation for the Electronic Marketplace, General Magic: </title> <address> Sunnvale, CA, </address> <year> 1993. </year>
Reference-contexts: Like Omniware, the Guile library is linked into a host application and allows it to manage code modules. The host can declare functions that become new primitives in the Guile language and are thus available to the modules. No performance information has yet been published for Guile. The Telescript <ref> [Telescript93] </ref> system from General Magic focuses on the development of network agents. These are autonomous programs that can move through a network, interacting with the hosts that execute them and with other agents that they encounter. Like Java, there are two levels of Telescript: High Telescript and Low Telescript.
Reference: [WWW94] <author> T. Berners-Lee, R. Cailliau, A. Loutonen, H. F. Nielsen and A. </author> <title> Secret. The WorldWide Web, </title> <journal> Communications of the ACM, </journal> <volume> vol. 37, no. 8, </volume> <month> August </month> <year> 1994, </year> <pages> p. 76-82. </pages>
References-found: 17

