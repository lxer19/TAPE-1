URL: ftp://ftp.cs.brown.edu/pub/techreports/96/cs96-28.ps.Z
Refering-URL: http://www.cs.brown.edu/cgc/cgc-papers/cgc-papers.html
Root-URL: http://www.cs.brown.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> F. Avnaim, J.-D. Boissonnat, O. Devillers, F. Preparata, and M. Yvinec. </author> <title> Evaluating signs of determinants using single-precision arithmetic. </title> <type> Research Report 2306, </type> <institution> INRIA, BP93, 06902 Sophia-Antipolis, France, </institution> <year> 1994. </year>
Reference-contexts: To overcome such discomfort, a considerable effort is being invested in re-visiting classical computational geometry problems and in re-designing simple, effective and reliable solutions for such problems. A limited list of papers that are devoted to robust computational geometry includes <ref> [20, 1, 5, 4, 7, 10, 8] </ref>. In this paper, we re-visit the problem of efficiently computing and checking the Gabriel graph of a set of points S.
Reference: [2] <author> P. Bose, W. Lenhart, and G. Liotta. </author> <title> Characterizing proximity trees. </title> <journal> Algorithmica, </journal> <pages> pages 83-110, </pages> <year> 1996. </year> <title> (special issue on Graph Drawing, </title> <editor> edited by G. Di Battista and R. </editor> <publisher> Tamassia). </publisher>
Reference-contexts: The second application shows an optimal-degree solution to the problem of checking the correctness of a program that computes Gabriel graphs. Our characterization generalizes a previous result presented in <ref> [2] </ref> to solve a graph drawing problem.
Reference: [3] <author> C. Burnikel. </author> <title> Exact Computation of Voronoi Diagrams and Line Segment Intersections. </title> <type> PhD thesis, </type> <institution> Technische Fakultat der Universitat des Saarlandes, Saarbrucken Germany, </institution> <month> March </month> <year> 1996. </year> <note> Available at URL: http://www.mpi-sb.mpg.de:80/ burnikel/thesis/. </note>
Reference-contexts: To this aim we adopt the notion of degree that was first introduced in [18] and independently in <ref> [3] </ref> as a measure of the arithmetic precision needed to carry out exact computation during the execution of geometric algorithms. For reasons of space we give here only the basic definitions. The reader is referred to [18] for a more detailed description of the concepts in this section.
Reference: [4] <author> C. Burnikel, K. Mehlhorn, and S. Schirra. </author> <title> How to compute the Voronoi diagram of line segments: Theoretical and experimental results. </title> <booktitle> In Proc. 2nd Annu. European Sympos. Algorithms (ESA '94), volume 855 of Lecture Notes in Computer Science, </booktitle> <pages> pages 227-239. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: To overcome such discomfort, a considerable effort is being invested in re-visiting classical computational geometry problems and in re-designing simple, effective and reliable solutions for such problems. A limited list of papers that are devoted to robust computational geometry includes <ref> [20, 1, 5, 4, 7, 10, 8] </ref>. In this paper, we re-visit the problem of efficiently computing and checking the Gabriel graph of a set of points S.
Reference: [5] <author> C. Burnikel, K. Mehlhorn, and S. Schirra. </author> <title> On degeneracy in geometric computations. </title> <booktitle> In Proc. 5th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 16-23, </pages> <year> 1994. </year>
Reference-contexts: To overcome such discomfort, a considerable effort is being invested in re-visiting classical computational geometry problems and in re-designing simple, effective and reliable solutions for such problems. A limited list of papers that are devoted to robust computational geometry includes <ref> [20, 1, 5, 4, 7, 10, 8] </ref>. In this paper, we re-visit the problem of efficiently computing and checking the Gabriel graph of a set of points S.
Reference: [6] <author> D. Cheriton and R. E. Tarjan. </author> <title> Finding minimum spanning trees. </title> <journal> SIAM J. Comput., </journal> <volume> 5 </volume> <pages> 724-742, </pages> <year> 1976. </year>
Reference-contexts: The problem of efficiently computing subgraphs of the Delaunay diagram of a set of points is the subject of a rich body of literature in computational geometry. One of the first papers is due to Cheriton and Tarjan <ref> [6] </ref>, who show a O (n)-time algorithm to compute an Euclidean minimum spanning tree from a Delaunay diagram with n vertices. The Gabriel graph can be computed from the Delaunay diagram in O (n)-time by using the algorithm of Matula and Sokal [19].
Reference: [7] <author> K. L. Clarkson. </author> <title> Safe and effective determinant evaluation. </title> <booktitle> In Proc. 33rd Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 387-395, </pages> <year> 1992. </year>
Reference-contexts: To overcome such discomfort, a considerable effort is being invested in re-visiting classical computational geometry problems and in re-designing simple, effective and reliable solutions for such problems. A limited list of papers that are devoted to robust computational geometry includes <ref> [20, 1, 5, 4, 7, 10, 8] </ref>. In this paper, we re-visit the problem of efficiently computing and checking the Gabriel graph of a set of points S.
Reference: [8] <author> D. P. </author> <title> Dobkin. </title> <journal> Computational geometry and computer graphics. Proc. IEEE, </journal> <volume> 80(9) </volume> <pages> 1400-1411, </pages> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: To overcome such discomfort, a considerable effort is being invested in re-visiting classical computational geometry problems and in re-designing simple, effective and reliable solutions for such problems. A limited list of papers that are devoted to robust computational geometry includes <ref> [20, 1, 5, 4, 7, 10, 8] </ref>. In this paper, we re-visit the problem of efficiently computing and checking the Gabriel graph of a set of points S.
Reference: [9] <author> H. Edelsbrunner. </author> <title> Algorithms in Combinatorial Geometry, </title> <booktitle> volume 10 of EATCS Monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1987. </year>
Reference-contexts: We refer to such algorithm as the conventional algorithm, since it is usually accepted by computational geometers as "the algorithm" to compute a Gabriel graph (see, for example <ref> [22, 21, 9] </ref>). The conventional algorithm consists of two steps. In the first step the Voronoi diagram V (S) of S is computed from D (S) and the coordinates of its vertices are stored with exact arithmetic, i.e. as rational numbers (pairs of integers).
Reference: [10] <author> H. Edelsbrunner and E. P. Mucke. </author> <title> Simulation of simplicity: a technique to cope with degenerate cases in geometric algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 9 </volume> <pages> 66-104, </pages> <year> 1990. </year>
Reference-contexts: To overcome such discomfort, a considerable effort is being invested in re-visiting classical computational geometry problems and in re-designing simple, effective and reliable solutions for such problems. A limited list of papers that are devoted to robust computational geometry includes <ref> [20, 1, 5, 4, 7, 10, 8] </ref>. In this paper, we re-visit the problem of efficiently computing and checking the Gabriel graph of a set of points S.
Reference: [11] <author> K. R. Gabriel and R. R. Sokal. </author> <title> A new statistical approach to geographic variation analysis. </title> <journal> Systematic Zoology, </journal> <volume> 18 </volume> <pages> 259-278, </pages> <year> 1969. </year>
Reference-contexts: In a proximity graph points are connected by edges if and only if they are deemed close by some proximity measure. It is the measure that determines the type of graphs that result. Minimum spanning trees [22], Gabriel graphs <ref> [11] </ref>, relative neighborhood graphs [26], Delaunay diagrams (often referred to as Delaunay triangulations if all internal faces are three-cycles) [22] , all describe different notions of closeness between the points of the input point set. <p> Notice that a Delaunay edge and its dual edge may or may not intersect. If they intersect, the intersection point is the midpoint of the Delaunay edge [21]. The Gabriel graph <ref> [11] </ref> of S, denoted by GG (S), is the planar subdivision obtained with the following rule: Two vertices u; v 2 S are connected by a straight-line segment if and only if d 2 (u; v) &lt; d 2 (u; w) + d 2 (v; w); for all w 2 S;
Reference: [12] <author> L. J. Guibas and J. Stolfi. </author> <title> Primitives for the manipulation of general subdivisions and the computation of Voronoi diagrams. </title> <journal> ACM Trans. Graph., </journal> <volume> 4 </volume> <pages> 74-123, </pages> <year> 1985. </year> <month> 10 </month>
Reference-contexts: For example, one can use the algorithm of Guibas and Stolfi <ref> [12] </ref>. The Guibas-Stolfi algorithm robustly computes D (S) and stores it in a suitable data structure, called quad-edge, that allows to determine in O (1) time for each edge (u; v) 2 D (S), what are the two faces sharing (u; v). <p> For values of fi such that 1 fi 2, fi graphs are subgraphs of the Delaunay diagram. 2. Study the degree of the problem of computing the Delaunay diagram of a set of points in the plane. It has been proven that the algorithm by Guibas and Stolfi <ref> [12] </ref> has degree 4 [18]. It would be very interesting to understand whether a lower degree is achievable. 3. An immediate implication of Lemma 2 is that the problem of reporting the intersections among a finite set of segments on the plane has degree 2.
Reference: [13] <author> J. W. Jaromczyk and M. Kowaluk. </author> <title> A note on relative neighborhood graphs. </title> <booktitle> In Proc. 3rd Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 233-241, </pages> <year> 1987. </year>
Reference-contexts: The first O (n log n)-time algorithm to compute a relative neighborhood graph from a Delaunay diagram is due to Supowit [24], who improves the previous O (n 2 )-time bound showed by Toussaint [26]. Jaromczyk and Kowaluk <ref> [13] </ref> show that the relative neighborhood graph can be computed from the Delaunay diagram in O (nff (n; n))-time, where ff () is the inverse of the Ackermann's function. The bound is reduced to O (n) by Jaromczyk, Kowaluk, and Yao [14].
Reference: [14] <author> J. W. Jaromczyk, M. Kowaluk, and F. Yao. </author> <title> An optimal algorithm for constructing fi-skeletons in the l p metric. </title> <journal> SIAM journal on computing. </journal> <note> to appear. </note>
Reference-contexts: Jaromczyk and Kowaluk [13] show that the relative neighborhood graph can be computed from the Delaunay diagram in O (nff (n; n))-time, where ff () is the inverse of the Ackermann's function. The bound is reduced to O (n) by Jaromczyk, Kowaluk, and Yao <ref> [14] </ref>. A different proof of this last result is given by Lingas [17]. For a complete survey on algorithms that compute proximity drawings see [15]. <p> For example, the linear-time algorithm of <ref> [14] </ref> is based on complex UNION-FIND data structures and assumes that all internal faces of the Delaunay diagram are three-cycles. On the other hand, issues of robustness, experimentation, and implementation have become central to the development of geometric algorithms.
Reference: [15] <author> J. W. Jaromczyk and G. T. Toussaint. </author> <title> Relative neighborhood graphs and their relatives. </title> <journal> Proc. IEEE, </journal> <volume> 80(9) </volume> <pages> 1502-1517, </pages> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: Several graphs that capture the notion of shape of a set S of points on the plane have been described in the literature. In the survey by Toussaint <ref> [15] </ref> such graphs are classified by using the notion of proximity between sets of points. In a proximity graph points are connected by edges if and only if they are deemed close by some proximity measure. It is the measure that determines the type of graphs that result. <p> The bound is reduced to O (n) by Jaromczyk, Kowaluk, and Yao [14]. A different proof of this last result is given by Lingas [17]. For a complete survey on algorithms that compute proximity drawings see <ref> [15] </ref>. Existing algorithms, however, often accomplish the asymptotically optimal efficiency at the expenses of simplicity; also they often rely on simplifying assumptions on the input configuration (no three points are collinear and no four points are co-circular) that make them fail when implemented in practice. <p> We assume that A computes O (S) by first computing the Delaunay diagram. This is a reasonable assumption since all known efficient algorithms compute Gabriel graphs by first constructing D (S) and then deleting from D (S) those edges that do not belong to GG (S) (see e.g. <ref> [15] </ref>). We follow the approach proposed by Mehlhorn et al. [20] to the verification of geometric algorithms. According to such approach, we slightly augment the tasks executed by program P in order to facilitate the 8 checker. Namely, we ask P to output with O (S) also D (S).
Reference: [16] <author> D. G. Kirkpatrick and J. D. Radke. </author> <title> A framework for computational morphology. </title> <editor> In G. T. Toussaint, editor, </editor> <booktitle> Computational Geometry, </booktitle> <pages> pages 217-248. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, Netherlands, </address> <year> 1985. </year>
Reference-contexts: that is a supergraph of the relative neighborhood graph that is a supergraph of the minimum spanning tree), the shape of a set of points can be analyzed by considering the spectrum of progressively less detailed descriptions when going from the Delaunay diagram to the minimum spanning tree (see, e.g. <ref> [16, 23] </ref>). Clearly, fast and reliable algorithms to construct the wanted proximity subgraphs of the Delaunay diagram play a crucial role within this approach. <p> For example, 1. Extend the result of this paper to the robust computation of other proximity subgraphs of the Delaunay diagram. To this respect, a family of particular interest are the so-called fi-graphs <ref> [16, 23] </ref>. fi-graphs are an infinite family of proximity graphs for which the definition of proximity varies according to the value of a parameter fi. For values of fi such that 1 fi 2, fi graphs are subgraphs of the Delaunay diagram. 2.
Reference: [17] <author> A. Lingas. </author> <title> A linear-time construction of the relative neighborhood graph from the delaunay triangulation. Computation Geometry: </title> <booktitle> Theory and Applications, </booktitle> <pages> pages 199-208, </pages> <year> 1994. </year>
Reference-contexts: The bound is reduced to O (n) by Jaromczyk, Kowaluk, and Yao [14]. A different proof of this last result is given by Lingas <ref> [17] </ref>. For a complete survey on algorithms that compute proximity drawings see [15].
Reference: [18] <author> G. Liotta, F. P. Preparata, and R. Tamassia. </author> <title> Robust proximity queries in implicit voronoi diagrams. </title> <type> Technical Report CS-96-16, </type> <institution> Center for Geometric coputing, Comput. Sci. Dept., Brown Univ., Providence, RI, </institution> <year> 1996. </year>
Reference-contexts: To this aim, we adopt the concept of degree of an algorithm <ref> [18] </ref>, which characterizes, up to a small additive constant, the number of bits needed by a geometric algorithm to be error free, i.e. to construct topologically consistent outputs even in the presence 1 of degenerate configurations of the input. <p> We then briefly describe the notion of degree of a geometric algorithm. For more details the reader is referred to [22] and to <ref> [18] </ref>. 2.1 Voronoi Diagrams, Gabriel Graphs, and Delaunay Diagrams Let S be a finite set of n distinct points on the plane; we assume n 2. <p> To this aim we adopt the notion of degree that was first introduced in <ref> [18] </ref> and independently in [3] as a measure of the arithmetic precision needed to carry out exact computation during the execution of geometric algorithms. For reasons of space we give here only the basic definitions. The reader is referred to [18] for a more detailed description of the concepts in this <p> adopt the notion of degree that was first introduced in <ref> [18] </ref> and independently in [3] as a measure of the arithmetic precision needed to carry out exact computation during the execution of geometric algorithms. For reasons of space we give here only the basic definitions. The reader is referred to [18] for a more detailed description of the concepts in this section. A geometric algorithm executes computations of two types: tests (also called predicates) and constructions. Tests are associated with branching decisions in the algorithm that determine the flow of control, constructions produce the output data of the algorithm. <p> This justifies our use of the degree of an algorithm to characterize the precision required to execute error-free tests. We say that a problem has degree d if any algorithm that solves has degree at least d. In <ref> [18] </ref> it is proven that the degree of the nearest neighbor problem is 2. An immediate implication of this resultis the following. Corollary 1 Let u, v, and w be three points of the plane. <p> Study the degree of the problem of computing the Delaunay diagram of a set of points in the plane. It has been proven that the algorithm by Guibas and Stolfi [12] has degree 4 <ref> [18] </ref>. It would be very interesting to understand whether a lower degree is achievable. 3. An immediate implication of Lemma 2 is that the problem of reporting the intersections among a finite set of segments on the plane has degree 2.
Reference: [19] <author> D. W. Matula and R. R. Sokal. </author> <title> Properties of Gabriel graphs relevant to geographic variation research and clustering of points in the plane. </title> <journal> Geogr. Anal., </journal> <volume> 12 </volume> <pages> 205-222, </pages> <year> 1980. </year>
Reference-contexts: The Gabriel graph can be computed from the Delaunay diagram in O (n)-time by using the algorithm of Matula and Sokal <ref> [19] </ref>. The first O (n log n)-time algorithm to compute a relative neighborhood graph from a Delaunay diagram is due to Supowit [24], who improves the previous O (n 2 )-time bound showed by Toussaint [26]. <p> We compare a brute-force O (n 2 )-time approach to the well-known O (n log n)-time algorithm by Matula and Sokal <ref> [19] </ref> that constructs the Gabriel graph from the Delaunay diagram in two steps. In the first step the Voronoi diagram is computed from and the coordinates of its vertices are stored with exact arithmetic, i.e. as rational numbers (pairs of integers). <p> To present such characterization we need a preliminary definition: Two straight-line segments are said to properly intersect if they share a point that is not one of their endpoints. Theorem 1 <ref> [19] </ref> Let e be and edge of D (S) and let e v be the dual edge of e. <p> Because of Theorem 2, degree 2 is optimal. 2 A linear-time algorithm to compute the Gabriel graph from the Delaunay diagram is based on Theorem 1 and was first suggested by Matula and Sokal <ref> [19] </ref>. We refer to such algorithm as the conventional algorithm, since it is usually accepted by computational geometers as "the algorithm" to compute a Gabriel graph (see, for example [22, 21, 9]). The conventional algorithm consists of two steps.
Reference: [20] <author> K. Mehlhorn, S. Naher, T. Schilz, S. Schirra, M. Seel, R. Seidel, and C. Uhrig. </author> <title> Checking geometric programs or verification of geometric structures. </title> <booktitle> In Proc. 12th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 159-165, </pages> <year> 1996. </year>
Reference-contexts: To overcome such discomfort, a considerable effort is being invested in re-visiting classical computational geometry problems and in re-designing simple, effective and reliable solutions for such problems. A limited list of papers that are devoted to robust computational geometry includes <ref> [20, 1, 5, 4, 7, 10, 8] </ref>. In this paper, we re-visit the problem of efficiently computing and checking the Gabriel graph of a set of points S. <p> We present an optimal-degree linear-time checker. We show that our procedure satisfies the requirements of correctness, simplicity, and efficiency invocated by Mehlhorn et al. <ref> [20] </ref> as mandatory for effective geometric checkers. Furthermore, as a side effect of the lower bounds techniques presented in this paper, a lower bound on the degree of the segment intersection problem is established. 2 Preliminaries We give first some basic geometric definitions and notation. <p> D [u; v] is also called the Gabriel disk of u and v and it is assumed to be a closed set. An example of a Gabriel graph is depicted in Figure 1, where also the Gabriel disk of an edge (u; v) is represented. Matula and Sokal <ref> [20] </ref> prove that the Gabriel graph is a subgraph of the Delaunay diagram, i.e. every straight-line segment representing an edge of GG (S) is also an edge of D (S). <p> This is a reasonable assumption since all known efficient algorithms compute Gabriel graphs by first constructing D (S) and then deleting from D (S) those edges that do not belong to GG (S) (see e.g. [15]). We follow the approach proposed by Mehlhorn et al. <ref> [20] </ref> to the verification of geometric algorithms. According to such approach, we slightly augment the tasks executed by program P in order to facilitate the 8 checker. Namely, we ask P to output with O (S) also D (S). Observe that this does not affect the asymptotic performance of P. <p> We assume that D (S) has been correctly computed. An efficient checker for a Delaunay diagram is presented in <ref> [20] </ref>. <p> If degree 2 were not optimal, then there would exist a degree 1 procedure to detect whether an edge of the Delaunay diagram belongs or not to the Gabriel graph. Which contradicts Theorem 2. 2 Melhlhorn et al. <ref> [20] </ref> define the main requirements for a program checker as correctness, simplicity, and efficiency. Theorem 5 proves the correctness and the efficiency of Algorithm Optimal Check.
Reference: [21] <author> A. Okabe, B. Boots, and K. Sugihara. </author> <title> Spatial Tessellations: Concepts and Applications of Voronoi Diagrams. </title> <publisher> John Wiley & Sons, </publisher> <address> Chichester, England, </address> <year> 1992. </year>
Reference-contexts: Notice that a Delaunay edge and its dual edge may or may not intersect. If they intersect, the intersection point is the midpoint of the Delaunay edge <ref> [21] </ref>. <p> We refer to such algorithm as the conventional algorithm, since it is usually accepted by computational geometers as "the algorithm" to compute a Gabriel graph (see, for example <ref> [22, 21, 9] </ref>). The conventional algorithm consists of two steps. In the first step the Voronoi diagram V (S) of S is computed from D (S) and the coordinates of its vertices are stored with exact arithmetic, i.e. as rational numbers (pairs of integers).
Reference: [22] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference-contexts: In a proximity graph points are connected by edges if and only if they are deemed close by some proximity measure. It is the measure that determines the type of graphs that result. Minimum spanning trees <ref> [22] </ref>, Gabriel graphs [11], relative neighborhood graphs [26], Delaunay diagrams (often referred to as Delaunay triangulations if all internal faces are three-cycles) [22] , all describe different notions of closeness between the points of the input point set. <p> It is the measure that determines the type of graphs that result. Minimum spanning trees <ref> [22] </ref>, Gabriel graphs [11], relative neighborhood graphs [26], Delaunay diagrams (often referred to as Delaunay triangulations if all internal faces are three-cycles) [22] , all describe different notions of closeness between the points of the input point set. <p> We then briefly describe the notion of degree of a geometric algorithm. For more details the reader is referred to <ref> [22] </ref> and to [18]. 2.1 Voronoi Diagrams, Gabriel Graphs, and Delaunay Diagrams Let S be a finite set of n distinct points on the plane; we assume n 2. <p> Sketch of proof: Let u (x u ; y u ), v (x v ; y v ), and w (x w ; y w ). It is well known (see, e.g. <ref> [22] </ref>) that executing the which-side-test (w,s) is equivalent to determining the sign of the following determinant. = fi fi fi x u y u 1 fi fi fi = x u y v x v y u x w y v + x v y w + x w y u <p> We refer to such algorithm as the conventional algorithm, since it is usually accepted by computational geometers as "the algorithm" to compute a Gabriel graph (see, for example <ref> [22, 21, 9] </ref>). The conventional algorithm consists of two steps. In the first step the Voronoi diagram V (S) of S is computed from D (S) and the coordinates of its vertices are stored with exact arithmetic, i.e. as rational numbers (pairs of integers). <p> Although the segment intersection problem is a classical subject of study in computational geometry, none of the asymptotically efficient algorithms that solve the problem have optimal degree (see, e.g. <ref> [22] </ref>). On the other hand, a brute-force quadratic time algorithm is straight-forward. Closing the gap between asymptotic efficiency and optimal degree seems to be a very challenging task. Acknowledgments I am grateful to Franco Preparata, Roberto Tamassia, Luca Vismara, and Paola Vocca for their encourage ment, their comments, their friendship.
Reference: [23] <author> J. D. Radke. </author> <title> On the shape of a set of points. </title> <editor> In G. T. Toussaint, editor, </editor> <booktitle> Computational Morphology, </booktitle> <pages> pages 105-136. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, Netherlands, </address> <year> 1988. </year>
Reference-contexts: that is a supergraph of the relative neighborhood graph that is a supergraph of the minimum spanning tree), the shape of a set of points can be analyzed by considering the spectrum of progressively less detailed descriptions when going from the Delaunay diagram to the minimum spanning tree (see, e.g. <ref> [16, 23] </ref>). Clearly, fast and reliable algorithms to construct the wanted proximity subgraphs of the Delaunay diagram play a crucial role within this approach. <p> For example, 1. Extend the result of this paper to the robust computation of other proximity subgraphs of the Delaunay diagram. To this respect, a family of particular interest are the so-called fi-graphs <ref> [16, 23] </ref>. fi-graphs are an infinite family of proximity graphs for which the definition of proximity varies according to the value of a parameter fi. For values of fi such that 1 fi 2, fi graphs are subgraphs of the Delaunay diagram. 2.
Reference: [24] <author> K. J. Supowit. </author> <title> The relative neighborhood graph with an application to minimum spanning trees. </title> <journal> J. ACM, </journal> <volume> 30 </volume> <pages> 428-448, </pages> <year> 1983. </year>
Reference-contexts: The Gabriel graph can be computed from the Delaunay diagram in O (n)-time by using the algorithm of Matula and Sokal [19]. The first O (n log n)-time algorithm to compute a relative neighborhood graph from a Delaunay diagram is due to Supowit <ref> [24] </ref>, who improves the previous O (n 2 )-time bound showed by Toussaint [26]. Jaromczyk and Kowaluk [13] show that the relative neighborhood graph can be computed from the Delaunay diagram in O (nff (n; n))-time, where ff () is the inverse of the Ackermann's function.
Reference: [25] <author> G. Toussaint. </author> <title> Computational Morphology. </title> <publisher> North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: In computational perception we would like an algorithm that joins pairs of points so that the resulting graph is perceptually meaningful in some sense (for more details on these problems see also <ref> [25] </ref>). Several graphs that capture the notion of shape of a set S of points on the plane have been described in the literature. In the survey by Toussaint [15] such graphs are classified by using the notion of proximity between sets of points.
Reference: [26] <author> G. T. Toussaint. </author> <title> The relative neighbourhood graph of a finite planar set. </title> <journal> Pattern Recogn., </journal> <volume> 12 </volume> <pages> 261-268, </pages> <year> 1980. </year> <month> 11 </month>
Reference-contexts: In a proximity graph points are connected by edges if and only if they are deemed close by some proximity measure. It is the measure that determines the type of graphs that result. Minimum spanning trees [22], Gabriel graphs [11], relative neighborhood graphs <ref> [26] </ref>, Delaunay diagrams (often referred to as Delaunay triangulations if all internal faces are three-cycles) [22] , all describe different notions of closeness between the points of the input point set. <p> The first O (n log n)-time algorithm to compute a relative neighborhood graph from a Delaunay diagram is due to Supowit [24], who improves the previous O (n 2 )-time bound showed by Toussaint <ref> [26] </ref>. Jaromczyk and Kowaluk [13] show that the relative neighborhood graph can be computed from the Delaunay diagram in O (nff (n; n))-time, where ff () is the inverse of the Ackermann's function. The bound is reduced to O (n) by Jaromczyk, Kowaluk, and Yao [14].
References-found: 26

