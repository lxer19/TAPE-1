URL: http://dimacs.rutgers.edu/Workshops/Security/program2/stillman.ps
Refering-URL: http://dimacs.rutgers.edu/Workshops/Security/program2/program.html
Root-URL: http://www.cs.rutgers.edu
Title: Analysis and Implementation of Secure Electronic Mail Protocols  
Author: Milica Barjaktarovic (Wilkes 
Note: Chet Hosmer (Odyssey Research Associates), David Rosenthal (Odyssey Research Associates), Geoffrey Hird (Odyssey Research Associates), Maureen Stillman (Odyssey Research Associates), and Dan Zhou (Syracuse University) Note: This work supported by USAF Rome Laboratory, NSA and Air Force Office of Scientific Research  
Affiliation: University), Shiu-Kai Chin (Syracuse University/Rome Lab), John Faust (Rome Lab),  
Abstract-found: 0
Intro-found: 1
Reference: [1] <institution> FORTEZZA Application Developers Guide. </institution> <note> Publicly available documents at http://www.armadillo.huntsville.al.us, 14 July 1995. </note>
Reference-contexts: In order to analyze the lower level details of MISSI, we investigated Privacy Enhanced Mail (PEM), which is similar to MISSI. The Multilevel Information System Security Initiative (MISSI) is a National Security Agency (NSA) program, designed to send protected messages over unprotected networks such as Internet <ref> [1] </ref>. MISSI provides the following security services: data integrity and authentication (via hashing, digital signatures, and certificate authentication); confidentiality (via public and secret cryptography); non-repudiation with proof of origin; and non-repudiation with proof of receipt (optional).
Reference: [2] <author> National Security Agency and SDNS Vendor Participants. </author> <title> Secure Data Network System SDNS Message Security Protocol (MSP). </title> <booktitle> SDN.701 Revision 3.0, </booktitle> <month> 21 March </month> <year> 1984. </year>
Reference-contexts: Users' public cryptography information is posted in the public distributed database called the Directory, in files called certificates <ref> [2] </ref>, [7]. Users are authorized by certification authorities (CAs), which issue certificates ("tickets") to the users. 1 MISSI-capable workstations are equipped with either FORTEZZA Cards (F) or FORTEZZA Plus cards (FP), or they have no cards.
Reference: [3] <author> Milica Barjaktarovic. </author> <title> Formal Specification and Verification of MISSI Architecture Using SPIN. </title> <type> Technical Report 4, </type> <institution> AFOSR Summer Research Program, Rome Laboratory, Rome NY, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: We employed all these approaches in our modeling. Our model consists of modules, where we abstract the modules which are less important by their input-output function, and focus on the modules of interest. Currently, we have three different models of MISSI: <ref> [3] </ref> specifies a detailed model of MISSI sender with an abstraction of local cache and certificate verification; [4] also specifies the sender, but focuses on the local cache and certificate verification, and abstracts away the processes necessary to prepare a message for sending; [5] model abstracts away the sending process, and
Reference: [4] <author> Milica Barjaktarovic. </author> <title> Formal Specification and Verification of MISSI Local Cashe Using SPIN. </title> <type> Technical report, </type> <institution> Rome Laboratory and ORA, Rome Laboratory, Rome NY, </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: Currently, we have three different models of MISSI: [3] specifies a detailed model of MISSI sender with an abstraction of local cache and certificate verification; <ref> [4] </ref> also specifies the sender, but focuses on the local cache and certificate verification, and abstracts away the processes necessary to prepare a message for sending; [5] model abstracts away the sending process, and focuses on the receiver. 3.2 Results In order to formalize MISSI access policy, we put together a
Reference: [5] <author> Milica Barjaktarovic. </author> <title> Formal Specification and Verification of MISSI Reciever and Forwarding Policy Using SPIN. </title> <type> Technical report, </type> <institution> AFOSR Summer Research Program, Rome Laboratory, Rome NY, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: we have three different models of MISSI: [3] specifies a detailed model of MISSI sender with an abstraction of local cache and certificate verification; [4] also specifies the sender, but focuses on the local cache and certificate verification, and abstracts away the processes necessary to prepare a message for sending; <ref> [5] </ref> model abstracts away the sending process, and focuses on the receiver. 3.2 Results In order to formalize MISSI access policy, we put together a more formal definition of terms and rules scattered throughout MISSI documentation. We also proposed solutions in case of ambiguity, conflict, or incomplete specifications.
Reference: [6] <author> Milica Barjaktarovic. </author> <title> Formal Specification and Verification of MISSI Sender Using SPIN. </title> <booktitle> In COMPASS97, </booktitle> <month> submitted November </month> <year> 1996. </year>
Reference-contexts: It is straightforward to map HOL terms into Slang. 4.4 Hardware The cryptographic functions such as DES, RSA, MD-2, and MD-5 are implemented in hardware using an assured hardware design process. The assured hardware implementation process in is described in COMPASS '97 <ref> [6] </ref>. The process uses a link between structural descriptions in higher-order and HOL, and the Mentor Graphics GDT VLSI design system [20]. A compiler called HOL2GDT [15] maps recursive and non-recursive structural descriptions in HOL to parameterized cell generators in GDT. <p> Simulation usually catches most of the errors. After the initial simulations are done and initial design corrections are made, formal verification is done. This catches the subtle errors. This process has been used to create many designs, both custom VLSI circuits and FPGA implementations. <ref> [6] </ref> describes a working bit-serial multiplier chip which was fabricated at MOSIS.
Reference: [7] <author> CCITT. </author> <title> Data Communication Networks Message Handling Systems, Recommendations x.500-x.521. </title> <type> Technical report. </type>
Reference-contexts: Users' public cryptography information is posted in the public distributed database called the Directory, in files called certificates [2], <ref> [7] </ref>. Users are authorized by certification authorities (CAs), which issue certificates ("tickets") to the users. 1 MISSI-capable workstations are equipped with either FORTEZZA Cards (F) or FORTEZZA Plus cards (FP), or they have no cards.
Reference: [8] <author> John P. Van Tassel D. Randolf Johnson, Fay F. Saydjari. </author> <title> MISSI Security Policy: A Formal Approach. </title> <type> Technical Report R2SPO-TR001-95, </type> <institution> INFOSEC Research and Technology Group, National Security Agency, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: One purpose of the effort is to demonstrate the practicality of a formal design process for high-confidence hardware and software. The work described here builds on two previous efforts to formally model NSA's Multilevel Information System Security Initiative (MISSI). The first effort by Johnson, Saydjari, and Van Tassel in <ref> [8] </ref> defines various MISSI security properties in higher-order logic. The MISSI Certificate Authority Workstation (CAW) has been modeled by Marron using PROMELA and the SPIN model checker, [18]. MISSI is based in part on Privacy Enhanced Mail (PEM).
Reference: [9] <author> Dan Zhou and Shiu-Kai Chin. </author> <title> Verifying Privacy Enhanced Mail Functions with Higher Order Logic. </title> <booktitle> In DIMACS Workshop on Network Threats, </booktitle> <institution> Rutgers University, </institution> <address> Piscataway, NJ, </address> <month> December 4-6 </month> <year> 1996. </year>
Reference-contexts: While the message field names and structure may differ somewhat between MISSI and PEM, the formal design process used here is applicable to both. The design process used here is an extension of the design method described in the DIMACS Network Threats workshop <ref> [9] </ref>. In [9], PEM message structures and operations were defined and verified against top-level security properties such as privacy, authentication, and integrity. <p> While the message field names and structure may differ somewhat between MISSI and PEM, the formal design process used here is applicable to both. The design process used here is an extension of the design method described in the DIMACS Network Threats workshop <ref> [9] </ref>. In [9], PEM message structures and operations were defined and verified against top-level security properties such as privacy, authentication, and integrity. <p> Security operations such as integrity checking are defined using encryption and hash algorithms as parameters and message destructor functions to access parameter values such as specific hash function names, message integrity codes, etc. The correctness of these operations is verified using higher-order logic (see <ref> [9] </ref>). C++ code for these operations is obtained by specification refinement and code generation [23]. The actual implementation of hash and encryption functions is done using Xilinx field programmable gate arrays (FPGA) and/or custom VLSI circuits. The functions and implementations are described and verified in higher-order logic.
Reference: [10] <author> M.J.C. Gordon. </author> <title> A proof generating system for higher-order logic. </title> <editor> In G. Birtwistle and P. A. Subramanyam, editors, </editor> <title> VLSI specification, verification and synthesis. </title> <publisher> Kluwer, </publisher> <year> 1987. </year> <month> 19 </month>
Reference-contexts: When the Specware refinement uses only existing data types and operations in its C++ library, code can be synthesized. The language of Specware is Slang [16]. Slang is Specware's specification language and roughly corresponds to the higher-order logic in the HOL system 16 <ref> [10] </ref>. It is straightforward to map HOL terms into Slang. 4.4 Hardware The cryptographic functions such as DES, RSA, MD-2, and MD-5 are implemented in hardware using an assured hardware design process. The assured hardware implementation process in is described in COMPASS '97 [6].
Reference: [11] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: FPGA netlists and VLSI layouts are obtained by compiling the implementation descriptions in higher-order logic into hardware generation functions within a VLSI CAD system [15]. 12 4.2 Sender and Receiver Processes PEM sender and receiver processes are implemented in C++ which are specified using a CSP (Communicating Sequential Process)-like <ref> [11] </ref> process language called PROMELA and the SPIN model checker, [13]. The sender and receiver processes correspond to the "control path" of a process. They specify the functions called and the sequence of the function calls.
Reference: [12] <author> Gerard J. Holtzman. </author> <title> Validation and Verification of Communication Protocols. </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: We chose formal language PROMELA, based on Hoare's CSP, to specify and test various MISSI components. PROMELA is a language based on Hoare's CSP and implemented in C. SPIN is the publicly distributed automated verification tool which supports PROMELA <ref> [12] </ref>, [14], [13], [22]. PROMELA uses processes that can be thought of as C functions executed concurrently. PROMELA uses channels for communication. A channel is a FIFO queue of a certain capacity.
Reference: [13] <author> Gerard J. Holzmann. </author> <title> Basic SPIN Manual. </title> <institution> AT&T Bell Laboratories, </institution> <address> Murray Hill, New Jersey, </address> <month> 079074. </month>
Reference-contexts: We chose formal language PROMELA, based on Hoare's CSP, to specify and test various MISSI components. PROMELA is a language based on Hoare's CSP and implemented in C. SPIN is the publicly distributed automated verification tool which supports PROMELA [12], [14], <ref> [13] </ref>, [22]. PROMELA uses processes that can be thought of as C functions executed concurrently. PROMELA uses channels for communication. A channel is a FIFO queue of a certain capacity. <p> the implementation descriptions in higher-order logic into hardware generation functions within a VLSI CAD system [15]. 12 4.2 Sender and Receiver Processes PEM sender and receiver processes are implemented in C++ which are specified using a CSP (Communicating Sequential Process)-like [11] process language called PROMELA and the SPIN model checker, <ref> [13] </ref>. The sender and receiver processes correspond to the "control path" of a process. They specify the functions called and the sequence of the function calls.
Reference: [14] <author> Gerard J. Holzmann. </author> <title> Design and Validation of Protocols: a Tutorial. </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> 25 </volume> <pages> 981-1017, </pages> <year> 1993. </year>
Reference-contexts: We chose formal language PROMELA, based on Hoare's CSP, to specify and test various MISSI components. PROMELA is a language based on Hoare's CSP and implemented in C. SPIN is the publicly distributed automated verification tool which supports PROMELA [12], <ref> [14] </ref>, [13], [22]. PROMELA uses processes that can be thought of as C functions executed concurrently. PROMELA uses channels for communication. A channel is a FIFO queue of a certain capacity.
Reference: [15] <author> Juin-Yeu Lu and Shiu-Kai Chin. </author> <title> Linking HOL to a VLSI CAD System. </title> <editor> In Jeffrey J. Joyce and Carl-Johan H. Seger, editors, </editor> <title> Higher Order Logic Theorem Proving and Its Applications, </title> <booktitle> number 780 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The functions and implementations are described and verified in higher-order logic. FPGA netlists and VLSI layouts are obtained by compiling the implementation descriptions in higher-order logic into hardware generation functions within a VLSI CAD system <ref> [15] </ref>. 12 4.2 Sender and Receiver Processes PEM sender and receiver processes are implemented in C++ which are specified using a CSP (Communicating Sequential Process)-like [11] process language called PROMELA and the SPIN model checker, [13]. The sender and receiver processes correspond to the "control path" of a process. <p> The assured hardware implementation process in is described in COMPASS '97 [6]. The process uses a link between structural descriptions in higher-order and HOL, and the Mentor Graphics GDT VLSI design system [20]. A compiler called HOL2GDT <ref> [15] </ref> maps recursive and non-recursive structural descriptions in HOL to parameterized cell generators in GDT. These cell generators are called to create layouts and net lists for custom chips. The GDT net lists can be compiled into Xilinx net list format for FPGA implementations.
Reference: [16] <institution> Kestrel Institute, </institution> <address> 3260 Hillview Ave, Palo Alto, CA. </address> <note> Specware Language Manual, 1.02 edition, </note> <month> June </month> <year> 1995. </year>
Reference-contexts: With each kind of message formally defined as a data type with verified security functions, the types and functions are refined into code by the Specware specification refinement system <ref> [16] </ref>. Specware supports both composition of specifications and refinements (implementations) using category and sheaf theory [23]. It depends heavily on refining abstract data types to concrete representations. The correctness of these representations is checked using the HOL theorem-prover. <p> It depends heavily on refining abstract data types to concrete representations. The correctness of these representations is checked using the HOL theorem-prover. When the Specware refinement uses only existing data types and operations in its C++ library, code can be synthesized. The language of Specware is Slang <ref> [16] </ref>. Slang is Specware's specification language and roughly corresponds to the higher-order logic in the HOL system 16 [10]. It is straightforward to map HOL terms into Slang. 4.4 Hardware The cryptographic functions such as DES, RSA, MD-2, and MD-5 are implemented in hardware using an assured hardware design process.
Reference: [17] <author> J. Linn. </author> <title> Privacy Enhancement for Internet Electronic Mail: Part I: Message Encryption and Authentication Procedures. </title> <type> RFC 1421, </type> <month> DEC, February </month> <year> 1993. </year> <note> ftp: ds.internic.net. </note>
Reference-contexts: The MISSI Certificate Authority Workstation (CAW) has been modeled by Marron using PROMELA and the SPIN model checker, [18]. MISSI is based in part on Privacy Enhanced Mail (PEM). PEM is described in four Request for Comment (RFC) papers: RFC 1421, RFC 1422, RFC 1423, and RFC 1424, <ref> [17] </ref>. While the message field names and structure may differ somewhat between MISSI and PEM, the formal design process used here is applicable to both. The design process used here is an extension of the design method described in the DIMACS Network Threats workshop [9].
Reference: [18] <author> Christopher S. Marron. </author> <title> A PROMELA Model of the MISSI Architecture. </title> <type> Technical Report R2SPO-TR002-95, </type> <institution> INFOSEC Research and Technology Group, National Security Agency, </institution> <month> 21 September </month> <year> 1995. </year>
Reference-contexts: The first effort by Johnson, Saydjari, and Van Tassel in [8] defines various MISSI security properties in higher-order logic. The MISSI Certificate Authority Workstation (CAW) has been modeled by Marron using PROMELA and the SPIN model checker, <ref> [18] </ref>. MISSI is based in part on Privacy Enhanced Mail (PEM). PEM is described in four Request for Comment (RFC) papers: RFC 1421, RFC 1422, RFC 1423, and RFC 1424, [17].
Reference: [19] <author> T. Melham. </author> <title> Automating Recursive Type Definitions in Higher Order Logic. </title> <editor> In G. Birtwistle and P. Subrahmanyam, editors, </editor> <booktitle> Current Trends in Hardware Verification and Automated Theorem Proving, </booktitle> <pages> pages 341-386. </pages> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: By defining PEM messages as types, we can eliminate tuples which never occur which simplifies verification. How types are introduced in higher-order logic is described by Melham in <ref> [19] </ref>. MICaCLEARaisaIntact shown below is the integrity checking function for MICaCLEAR messages. It has as part of its definition the use of message accessor functions to get the parameter values needed by isaIntact.
Reference: [20] <institution> Mentor Graphics Inc., </institution> <address> San Jose, CA. </address> <note> GDT Led, Lx Standard Cell, Explorer Lsim V.5.3 users manuals, </note> <year> 1990. </year>
Reference-contexts: The assured hardware implementation process in is described in COMPASS '97 [6]. The process uses a link between structural descriptions in higher-order and HOL, and the Mentor Graphics GDT VLSI design system <ref> [20] </ref>. A compiler called HOL2GDT [15] maps recursive and non-recursive structural descriptions in HOL to parameterized cell generators in GDT. These cell generators are called to create layouts and net lists for custom chips. The GDT net lists can be compiled into Xilinx net list format for FPGA implementations.
Reference: [21] <author> National Security Agency, </author> <title> http://www.armadillo.huntsville.al.us. Network Security Managers (NSM) Functional Requirements Specification and Concept of Operations (CONOP), </title> <month> June </month> <year> 1996. </year> <month> 20 </month>
Reference-contexts: W=signed+encrypted if msgalevel==S. Secret enclaves cannot send unprotected messages. 3. Secret enclaves cannot receive unprotected messages. That is, Wsigned if wkstalevel==S. In other words, Secret enclaves must send and receive signed or signed-and-encrypted messages. This requirement is enforced by SNS filtering <ref> [21] </ref>, p.11. 4. Vanilla workstations can receive only unprotected messages, because they do not have any FORTEZZA capability. 5. The above discussion brings us to formalize one additional requirement: Secret enclaves can communicate with vanilla workstations only if the vanilla workstations are on an enclave with SNS.
Reference: [22] <author> J.M. Troya P. Merino. </author> <title> Modeling and Verification of the ITU-T Multi--point Communication Service with SPIN. </title> <booktitle> In Proceedings of the 2nd International Workshop on the SPIN Verification System, </booktitle> <institution> DIMACS, Rutgers University, </institution> <address> New Brunswick, New Jersey, </address> <month> August </month> <year> 1996. </year>
Reference-contexts: We chose formal language PROMELA, based on Hoare's CSP, to specify and test various MISSI components. PROMELA is a language based on Hoare's CSP and implemented in C. SPIN is the publicly distributed automated verification tool which supports PROMELA [12], [14], [13], <ref> [22] </ref>. PROMELA uses processes that can be thought of as C functions executed concurrently. PROMELA uses channels for communication. A channel is a FIFO queue of a certain capacity.
Reference: [23] <author> Yellamraju V. Srinivas and Richard Jullig. Specware: </author> <title> Formal Support for Composing Software. </title> <booktitle> In Conference on Mathematics of Program Construction, </booktitle> <address> Kloster Irsee, Germany, </address> <month> July </month> <year> 1995. </year> <month> 21 </month>
Reference-contexts: The correctness of these operations is verified using higher-order logic (see [9]). C++ code for these operations is obtained by specification refinement and code generation <ref> [23] </ref>. The actual implementation of hash and encryption functions is done using Xilinx field programmable gate arrays (FPGA) and/or custom VLSI circuits. The functions and implementations are described and verified in higher-order logic. <p> With each kind of message formally defined as a data type with verified security functions, the types and functions are refined into code by the Specware specification refinement system [16]. Specware supports both composition of specifications and refinements (implementations) using category and sheaf theory <ref> [23] </ref>. It depends heavily on refining abstract data types to concrete representations. The correctness of these representations is checked using the HOL theorem-prover. When the Specware refinement uses only existing data types and operations in its C++ library, code can be synthesized. The language of Specware is Slang [16].
References-found: 23

