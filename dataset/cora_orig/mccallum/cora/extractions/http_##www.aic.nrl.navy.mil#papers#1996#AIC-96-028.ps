URL: http://www.aic.nrl.navy.mil/papers/1996/AIC-96-028.ps
Refering-URL: http://www.aic.nrl.navy.mil/~aha/pub-details.html
Root-URL: 
Email: aha@aic.nrl.navy.mil  
Title: A Proposal for Refining Case Libraries  
Author: David W. Aha 
Web: http://www.aic.nrl.navy.mil/~aha  
Address: Code 5510 Washington, DC 20375 USA  
Affiliation: Navy Center for Applied Research in Artificial Intelligence Naval Research Laboratory,  
Abstract: Conversational case-based reasoning (CCBR) systems are used in many commer cial applications. Their distinguishing behavior is that they interactively acquire fea tures values from users (i.e., they incrementally build queries), and typically address problem diagnosis tasks. Users want CCBR systems to be precise (i.e., retrieve the correct case for solving their problem) and efficient (i.e., require a minimal amount of interaction before cases are retrieved). Case authors require substantial expertise to ensure that their case libraries satisfy these demands. Commercial CCBR vendors help by supplying documents describing guidelines for designing case libraries, but mastering them involves a challenging learning curve. Software is needed that helps authors to design and refine case libraries according to these design guidelines. This paper outlines a proposal for using machine learning and data mining techniques to support the process of case authoring by refining case libraries.
Abstract-found: 1
Intro-found: 1
Reference: <author> Althoff, K.-D., & Weis, K.-H., jr. </author> <year> (1996). </year> <title> An evaluation of the INRECA CBR system for decision support and diagnosis. </title> <editor> In H.-D. Burkhard & M. Lenz (Eds.) </editor> <booktitle> Proceedings of the Fourth Ger man Workshop on Case-Based Reasoning (Technical Report 55). </booktitle> <address> Berlin: </address> <institution> Humbolt University, Institut fur Informatik. </institution>
Reference-contexts: This evaluation process was inspired by Drummond et al. (1993), who used a similar simulator to evaluate the learning behavior of their intelligent browser. There are many ways to evaluate a case library's problem solving behavior. We focus on user satisfaction, which is an ergonomic criterion <ref> (Althoff & Weis, 1996) </ref>. However, we assume user satisfaction is a function of technical criteria concerning system performance (i.e., precision and speed). Thus, we confound these types of criteria; they are not always easily separated.
Reference: <author> Avesani, P., Perini, A., & Ricci, F. </author> <year> (1993). </year> <title> Combining CBR and constraint reasoning in planning forest fire fighting. </title> <booktitle> Proceedings of the First European Workshop on Case-Based Reasoning (pp. </booktitle> <pages> 235-239). </pages> <address> Kaiserslautern, Germany: </address> <note> Unpublished. </note>
Reference: <author> Craw, S., & Hutton, P. </author> <year> (1995). </year> <title> Protein folding: Symbolic refinement competes with neural net works. </title> <booktitle> Proceedings of the Twelfth International Conference on Machine Learning (pp. 133 141). </booktitle> <address> Tahoe City, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: On Dirty Terminals Tight Clean Terminals Thus, we will vary the manner in which Rover selects from the ranked list of questions, using both knowledge-poor and knowledge-intensive strategies to bias its question selection behavior. 5 Discussion and Future Research Goals The general topic of this paper is knowledge base refinement <ref> (e.g., Craw & Hutton, 1995) </ref> in the context of case-based reasoning. We expect that some approaches for automatically refining theories can apply to the task of transforming case libraries, but that many others cannot be applied easily because the cases are not all defined by the same set of questions.
Reference: <author> Drummond, C., Holte, R. C., & Ionescu, D. </author> <year> (1993). </year> <title> Accelerating browsing by automatically in ferring a user's search goal. </title> <booktitle> Proceedings of the Eighth Knowledge-Based Software Engineering Conference (pp. </booktitle> <pages> 160-167). </pages> <address> Chicago, IL: </address> <publisher> IEEE Press. </publisher>
Reference: <author> Fisher, D. H. </author> <year> (1989). </year> <title> Knowledge acquisition via incremental conceptual clustering. </title> <journal> Machine Learning, </journal> <volume> 2, </volume> <pages> 139-172. </pages>
Reference-contexts: Examples of top-down approaches are top-down induction of decision trees (TDIDT) algorithms (e.g., C4.5 (Quinlan, 1993)) and unsupervised algorithms that use divisive methods to induce concept hierarchies (e.g., COBWEB <ref> (Fisher, 1989) </ref>). Bottom-up approaches include agglomerative algorithms (e.g., OODG (Kohavi, 1994)). Both types of approaches require information on the similarity among cases to generate hierarchies that accurately reflect the cases' commonalities.
Reference: <author> Kohavi, R. </author> <year> (1994). </year> <title> Bottom-up induction of oblivious, read-once decision graphs. </title> <booktitle> Proceedings of the European Conference on Machine Learning (pp. </booktitle> <pages> 154-169). </pages> <address> Catania, Italy: </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Examples of top-down approaches are top-down induction of decision trees (TDIDT) algorithms (e.g., C4.5 (Quinlan, 1993)) and unsupervised algorithms that use divisive methods to induce concept hierarchies (e.g., COBWEB (Fisher, 1989)). Bottom-up approaches include agglomerative algorithms (e.g., OODG <ref> (Kohavi, 1994) </ref>). Both types of approaches require information on the similarity among cases to generate hierarchies that accurately reflect the cases' commonalities. For example, top-down approaches require information on the similarity of the cases' solutions, such as their topic and subtopic groupings.
Reference: <author> Murthy, S. K., & Salzberg, S. </author> <year> (1995). </year> <title> Lookahead and pathology in decision tree induction. </title> <booktitle> Pro ceedings of the Fourteenth International Joint Conference on Artificial Intelligence (pp. 1025 1031). </booktitle> <address> Montreal, Canada: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Alternatively, operators that directly modify the hierarchies can be used. For instance, if the hierarchies are represented as trees, then tree-balancing operators <ref> (Murthy & Salzberg, 1995) </ref> can be used to help standardize the number of questions per case. Hierarchy-balancing operators attempt to eliminate questions from cases with many questions and introduce others in cases with few questions.
Reference: <author> Purvis, L. & Pu, P. </author> <year> (1995). </year> <title> Adaptation using constraint satisfaction techniques, </title> <booktitle> Proceedings of the First International Conference on Case Based Reasoning (pp. </booktitle> <pages> 289-300). </pages> <address> Sesimbra, Portugal: </address> <publisher> Springer Verlag. </publisher>
Reference: <author> Quinlan, J. R. </author> <year> (1993). </year> <title> C4.5: Programs for machine learning. </title> <address> San Mateo, CA: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Topics can be automatically identified in several ways, but we will restrict our present dis cussion to familiar top-down and bottom-up induction approaches, although others are certainly feasible (see Section 5). Examples of top-down approaches are top-down induction of decision trees (TDIDT) algorithms (e.g., C4.5 <ref> (Quinlan, 1993) </ref>) and unsupervised algorithms that use divisive methods to induce concept hierarchies (e.g., COBWEB (Fisher, 1989)). Bottom-up approaches include agglomerative algorithms (e.g., OODG (Kohavi, 1994)). Both types of approaches require information on the similarity among cases to generate hierarchies that accurately reflect the cases' commonalities. <p> Typically, one case should be extracted for each path in each hierarchy. Alternatively, the number of cases extracted could be reduced using ideas similar to how rules are extracted from C4.5 <ref> (Quinlan, 1993) </ref>. Compared with the previous two steps, this is a simple process. However, there are both correct and incorrect ways to extract cases for supporting design guidelines.
Reference: <author> Schlimmer, J. C., & Hermens, L. A. </author> <year> (1993). </year> <title> Software agents: Completing patterns and construct ing user interfaces. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1, </volume> <pages> 61-89. </pages>
Reference-contexts: Interactive querying: If only a few cases in a topic grouping are missing answers for the topic's most frequently answered question, then their answers for that question might be obtainable from the user. Tentative defaults can be supplied to assist in this process <ref> (Schlimmer & Hermens, 1993) </ref>. 4. Multiple copies: Include cases with a key unanswered question in multiple subgroupings, each corresponding to a different answer. After obtaining a common question for a topic's cases, a top-down approach can be used to begin generating a hierarchy.
Reference: <author> Thompson, K., & Langley, P. </author> <year> (1989). </year> <title> Organization and retrieval of composite concepts. </title> <booktitle> Pro ceedings of the Third Case-Based Reasoning Workshop (pp. </booktitle> <pages> 329-333). </pages> <address> Pensacola Beach, FL: </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: In addition to algorithmic details, several key concerns are not addressed in this proposal. For example, we limit our discussion to feature value representations. Agglomerative clustering methods for structured cases have not proven as successful for structured representations <ref> (e.g., Thompson & Langley, 1989) </ref> as they have for simpler representations, which suggests scale-up problems when considering more complex case representations.
Reference: <author> Utgoff, P. E. </author> <year> (1995). </year> <title> Decision tree induction based on efficient tree restructuring (Technical Report 95-18). </title> <address> Amherst, MA: </address> <institution> University of Massachusetts, Department of Computer Science. </institution>
Reference-contexts: Thus, we confound these types of criteria; they are not always easily separated. We outlined a broad proposal that does not discourage certain strategies for performance im provements, such as storing the induced hierarchies and incrementally updating them rather than re-inducing them from scratch. Efficient incremental algorithms now exist <ref> (e.g., Utgoff, 1995) </ref> that makes this strategy more feasible, which is important in situations when case library transformation is repeatedly applied as cases are added to the library.
References-found: 12

