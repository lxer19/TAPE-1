URL: http://www.robotics.stanford.edu/~murali/papers/SCG-triangles-bsp.ps.gz
Refering-URL: http://www.robotics.stanford.edu/~murali/papers/papers.html
Root-URL: http://www.robotics.stanford.edu
Title: Cylindrical Static and Kinetic Binary Space Partitions  
Author: Pankaj K. Agarwal Leonidas J. Guibas T. M. Murali Jeffrey Scott Vitter 
Abstract: We describe the first known algorithm for efficiently maintaining a Binary Space Partition (BSP) for n continuously moving segments in the plane. Under reasonable assumptions on the motion, we show that the total number of times the BSP changes is O(n 2 ), and that we can update the BSP in O(log n) expected time per change. We also consider the problem of constructing a BSP for n triangles in R 3 . We present a randomized algorithm that constructs a BSP of expected size O(n 2 ) in O(n 2 log 2 n) expected time. We also describe a deterministic algorithm that constructs a BSP of size O((n + k) log n) and height O(log n) in O((n + k) log 2 n) time, where k is the number of intersection points between the edges of the projections of the triangles onto the xy-plane. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. K. Agarwal, J. Erickson, and L. J. Guibas, </author> <title> Kinetic binary space partitions in R 3 , In preparation, </title> <year> 1997. </year>
Reference-contexts: Currently, we do not know any non-trivial lower bounds for this problem. Recently, Agarwal et al. <ref> [1] </ref> have extended our result and developed an algorithm to maintain BSPs for moving triangles in R 3 . We have also presented algorithms to construct BSPs for triangles in R 3 . The algorithms are (near-)optimal in the worst-case.
Reference: [2] <author> P. K. Agarwal, E. F. Grove, T. M. Murali, and J. S. Vit-ter, </author> <title> Binary space partitions for fat rectangles, </title> <booktitle> Proceedings of the 37th IEEE Annual Symposium on foundations of Computer Science (FOCS '96), </booktitle> <month> October </month> <year> 1996. </year>
Reference-contexts: They also show that their algorithm can be made deterministic without affecting its asymptotic running time. It has been an open problem whether a BSP for n triangles in R 3 can be constructed in near-quadratic time. Sub-quadratic bounds are known for special cases <ref> [2, 14, 25] </ref>. However, none of these approaches lead to a near-quadratic algorithm for triangles in R 3 . We present a randomized algorithm (in Section 4) that constructs a BSP for S of expected size O (n 2 ) in O (n 2 log 2 n) time.
Reference: [3] <author> P. K. Agarwal and S. Suri, </author> <title> Surface approximation and geometric partitions, </title> <booktitle> Proc. 5th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <year> 1994, </year> <pages> pp. 24-33. </pages>
Reference-contexts: Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation [10, 11], visibility determination [4, 28], and ray tracing [21]), solid modeling [22, 20, 29], geometric data repair [19], robotics [5], network design [18], and surface simplification <ref> [3] </ref>. Key to fl Support was provided by National Science Foundation research grant CCR-93-01259, by Army Research Office MURI grant DAAH04-96-1-0013, by a Sloan fellowship, by a National Science Foundation NYI award and matching funds from Xerox Corp, and by a grant from the U.S.-Israeli Binational Science Foundation.
Reference: [4] <author> J. M. Airey, </author> <title> Increasing Update Rates in the Building Walkthrough System with Automatic Model-space Subdivision and Potentially Visible Set Calculations, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, University of North Carolina, Chapel Hill, </institution> <year> 1990. </year>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schumacker et al. [26] and further refined by Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation [10, 11], visibility determination <ref> [4, 28] </ref>, and ray tracing [21]), solid modeling [22, 20, 29], geometric data repair [19], robotics [5], network design [18], and surface simplification [3]. <p> The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed; see <ref> [4, 8, 16, 24, 25, 28, 29] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input objects are made by hyperplanes parallel to the same fixed direction. We address two problems.
Reference: [5] <author> C. Ballieux, </author> <title> Motion planning using binary space partitions, </title> <type> Tech. Rep. </type> <institution> inf/src/93-25, Utrecht University, </institution> <year> 1993. </year>
Reference-contexts: et al. [26] and further refined by Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation [10, 11], visibility determination [4, 28], and ray tracing [21]), solid modeling [22, 20, 29], geometric data repair [19], robotics <ref> [5] </ref>, network design [18], and surface simplification [3].
Reference: [6] <author> J. Basch, L. Guibas, and J. Hershberger, </author> <title> Data structures for mobile data, </title> <booktitle> Proc. 7th SIAM Symp. on Discr. Algorithms, </booktitle> <year> 1997, </year> <pages> pp. 747-756. </pages>
Reference-contexts: Our algorithm, instead, treats the BSP as a kinetic data structure, as defined by Basch et al. <ref> [6] </ref>. We view the equations of the cuts made at the nodes of the BSP and the edges and faces of the subdivision induced by the BSP as functions of time. The cuts and the edges and faces of the subdivision change continuously with time. <p> In Section 3, we describe a randomized kinetic algorithm for maintaining a BSP for moving segments in the plane. We assume that the segment motions are oblivious to the random bits used by the algorithm. Following Basch et al. <ref> [6] </ref>, we assume that each moving segment has a posted flight plan that gives full or partial information about its current motion. Whenever a flight plan changes (possibly due to an external agent), our algorithm is notified and it updates a global event queue to reflect the change. <p> Note that this theorem makes our BSP a kinetic data structure that is responsive, efficient, local, and compact, in the sense defined by Basch et al. <ref> [6] </ref>. We say that the trajectories followed by a set of segments are pseudo-algebraic if the segments move so that each pair of endpoints exchanges y-order only O (1) times. A special case of pseudo-algebraic trajectories is when all the trajectories of the endpoints are constant-degree polynomials.
Reference: [7] <author> A. T. Campbell, </author> <title> Modeling Global Diffuse Illumination for Image Synthesis, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Sciences, University of Texas, Austin, </institution> <year> 1991. </year>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schumacker et al. [26] and further refined by Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination <ref> [7] </ref>, shadow generation [10, 11], visibility determination [4, 28], and ray tracing [21]), solid modeling [22, 20, 29], geometric data repair [19], robotics [5], network design [18], and surface simplification [3].
Reference: [8] <author> T. Cassen, K. R. Subramanian, and Z. Michalewicz, </author> <title> Near-optimal construction of partitioning trees by evolutionary techniques, </title> <booktitle> Proc. of Graphics Interface '95, </booktitle> <year> 1995, </year> <pages> pp. 263-271. </pages>
Reference-contexts: The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed; see <ref> [4, 8, 16, 24, 25, 28, 29] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input objects are made by hyperplanes parallel to the same fixed direction. We address two problems.
Reference: [9] <author> B. Chazelle, L. J. Guibas, and D. T. Lee, </author> <title> The power of geometric duality, </title> <journal> BIT, </journal> <volume> 25 (1985), </volume> <pages> 76-90. </pages>
Reference-contexts: Observe that the sum P 1ki (fl; k) equals the total number of edges bounding the boundary faces of A (fl). Each such edge lies in the zone (in A (fl)) of one of the edges of s. Hence, by the Zone Theorem <ref> [9, 15] </ref>, X (A (fl); k) = O (i): Since ` i is chosen randomly from the set L (i) , i can be any of the lines 1 ; 2 ; : : : ; i with equal probability. <p> The total time spent in processing ` i is f2Z O (k f log k f ). Using the Zone Theorem <ref> [9, 15] </ref> and the theory of random-sampling [13, 17], we can show that the expected value of P f2Z k f is O (n log n), which implies the following theorem: Theorem 4.2 Let S be a set of n non-intersecting triangles in R 3 .
Reference: [10] <author> N. Chin and S. Feiner, </author> <title> Near real-time shadow generation using BSP trees, </title> <booktitle> Proc. SIGGRAPH '89, Comput. Graph., </booktitle> <volume> Vol. 23, </volume> <booktitle> ACM SIGGRAPH, </booktitle> <year> 1989, </year> <pages> pp. 99-106. </pages>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schumacker et al. [26] and further refined by Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation <ref> [10, 11] </ref>, visibility determination [4, 28], and ray tracing [21]), solid modeling [22, 20, 29], geometric data repair [19], robotics [5], network design [18], and surface simplification [3].
Reference: [11] <author> N. Chin and S. Feiner, </author> <title> Fast object-precision shadow generation for areal light sources using BSP trees, Comput. Graph. </title> <booktitle> (Proc. 1992 Symp. on Interactive 3D Graphics), </booktitle> <volume> Vol. 25, </volume> <year> 1992, </year> <pages> pp. 21-30. </pages>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schumacker et al. [26] and further refined by Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation <ref> [10, 11] </ref>, visibility determination [4, 28], and ray tracing [21]), solid modeling [22, 20, 29], geometric data repair [19], robotics [5], network design [18], and surface simplification [3].
Reference: [12] <author> Y. Chrysanthou, </author> <title> Shadow Computation for 3D Interaction and Animation, </title> <type> Ph.D. Thesis, </type> <institution> Queen Mary and Westfield College, University of London, </institution> <year> 1996. </year>
Reference-contexts: This approach does try to exploit (by introducing additional planes) the spatial coherence of the dynamic changes in the tree. Chrysanthou suggests a more general approach, which does not make any distinction between static and moving objects <ref> [12] </ref>. By keeping additional information about topological adjacencies in the tree, the algorithm performs insertions and deletions of a node in a more localized way.
Reference: [13] <author> K. L. Clarkson and P. W. Shor, </author> <title> Applications of random sampling in computational geometry, II, </title> <journal> Discrete Comput. Geom., </journal> <volume> 4 (1989), </volume> <pages> 387-421. </pages>
Reference-contexts: Known techniques for analyzing randomized algorithms, such as the Clarkson-Shor framework <ref> [13] </ref> or backwards analysis [27], cannot be used to obtain a near-quadratic bound on the size of the convex subdivision corresponding to the BSP constructed by the Paterson-Yao algorithm, since the BSP constructed by the algorithm depends on the order in which triangles are added. <p> The total time spent in processing ` i is f2Z O (k f log k f ). Using the Zone Theorem [9, 15] and the theory of random-sampling <ref> [13, 17] </ref>, we can show that the expected value of P f2Z k f is O (n log n), which implies the following theorem: Theorem 4.2 Let S be a set of n non-intersecting triangles in R 3 .
Reference: [14] <author> M. de Berg, </author> <title> Linear size binary space partitions for fat objects, </title> <booktitle> Proc. Third Europ. Symp. on Algorithms, </booktitle> <publisher> LNCS 979, Springer-Verlag, </publisher> <month> September </month> <year> 1995, </year> <pages> pp. 252-263. </pages>
Reference-contexts: They also show that their algorithm can be made deterministic without affecting its asymptotic running time. It has been an open problem whether a BSP for n triangles in R 3 can be constructed in near-quadratic time. Sub-quadratic bounds are known for special cases <ref> [2, 14, 25] </ref>. However, none of these approaches lead to a near-quadratic algorithm for triangles in R 3 . We present a randomized algorithm (in Section 4) that constructs a BSP for S of expected size O (n 2 ) in O (n 2 log 2 n) time.
Reference: [15] <author> H. Edelsbrunner, </author> <title> Algorithms in Combinatorial Geometry, </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg, West Germany, </address> <year> 1987. </year>
Reference-contexts: We construct the BSP for S in such a way that there is a close relationship between the BSP and the planar arrangement of lines supporting the edges of the xy-projections of the triangles in S. We use results from "-net theory [17] and on arrangements of lines <ref> [15] </ref> to bound the expected number of vertices in the convex subdivision of R 3 induced by the BSP and the expected running time of the algorithm. Finally, we present a deterministic algorithm (Section 5) for constructing a BSP for a set S of n triangles in R 3 . <p> In order to execute each stage efficiently, we maintain the following additional information: (i) For each active cell in B (i) , we store the set S S of triangles that intersect the interior of . (ii) We maintain the arrangement A (L (i) ) as a planar graph; see <ref> [15] </ref>. For each active face f in A (L (i) ), we maintain the list (f ) of those ac tive cells in B (i) that lie inside the cylinder f (p; z) j p 2 f; z 2 R 3 g. <p> Observe that the sum P 1ki (fl; k) equals the total number of edges bounding the boundary faces of A (fl). Each such edge lies in the zone (in A (fl)) of one of the edges of s. Hence, by the Zone Theorem <ref> [9, 15] </ref>, X (A (fl); k) = O (i): Since ` i is chosen randomly from the set L (i) , i can be any of the lines 1 ; 2 ; : : : ; i with equal probability. <p> The total time spent in processing ` i is f2Z O (k f log k f ). Using the Zone Theorem <ref> [9, 15] </ref> and the theory of random-sampling [13, 17], we can show that the expected value of P f2Z k f is O (n log n), which implies the following theorem: Theorem 4.2 Let S be a set of n non-intersecting triangles in R 3 .
Reference: [16] <author> H. Fuchs, Z. M. Kedem, and B. Naylor, </author> <title> On visible surface generation by a priori tree structures, </title> <booktitle> Proc. SIGGRAPH '80, Comput. Graph., </booktitle> <volume> Vol. 14, </volume> <publisher> ACM SIG-GRAPH, </publisher> <year> 1980, </year> <pages> pp. 124-133. </pages>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schumacker et al. [26] and further refined by Fuchs et al. <ref> [16] </ref>, is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation [10, 11], visibility determination [4, 28], and ray tracing [21]), solid modeling [22, 20, 29], geometric data repair [19], robotics [5], network design [18], and surface simplification [3]. <p> The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed; see <ref> [4, 8, 16, 24, 25, 28, 29] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input objects are made by hyperplanes parallel to the same fixed direction. We address two problems.
Reference: [17] <author> D. Haussler and E. Welzl, </author> <title> Epsilon-nets and simplex range queries, </title> <journal> Discrete Comput. Geom., </journal> <volume> 2 (1987), </volume> <pages> 127-151. </pages>
Reference-contexts: We construct the BSP for S in such a way that there is a close relationship between the BSP and the planar arrangement of lines supporting the edges of the xy-projections of the triangles in S. We use results from "-net theory <ref> [17] </ref> and on arrangements of lines [15] to bound the expected number of vertices in the convex subdivision of R 3 induced by the BSP and the expected running time of the algorithm. <p> The total time spent in processing ` i is f2Z O (k f log k f ). Using the Zone Theorem [9, 15] and the theory of random-sampling <ref> [13, 17] </ref>, we can show that the expected value of P f2Z k f is O (n log n), which implies the following theorem: Theorem 4.2 Let S be a set of n non-intersecting triangles in R 3 .
Reference: [18] <author> C. Mata and J. S. Mitchell, </author> <title> Approximation algorithms for geometric tour and network design problems, </title> <booktitle> Proc. 11th Annu. ACM Sympos. </booktitle> <institution> Comput. Geom., </institution> <year> 1995, </year> <pages> pp. 360-369. </pages>
Reference-contexts: and further refined by Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation [10, 11], visibility determination [4, 28], and ray tracing [21]), solid modeling [22, 20, 29], geometric data repair [19], robotics [5], network design <ref> [18] </ref>, and surface simplification [3].
Reference: [19] <author> T. M. Murali and T. A. Funkhouser, </author> <title> Consistent solid and boundary representations from arbitrary polygonal data, </title> <note> To appear in Proc. 1997 Symp. on Interactive 3D Graphics, </note> <year> 1997. </year>
Reference-contexts: by Schumacker et al. [26] and further refined by Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation [10, 11], visibility determination [4, 28], and ray tracing [21]), solid modeling [22, 20, 29], geometric data repair <ref> [19] </ref>, robotics [5], network design [18], and surface simplification [3].
Reference: [20] <author> B. Naylor, J. A. Amanatides, and W. Thibault, </author> <title> Merg--ing BSP trees yields polyhedral set operations, Comput. Graph., </title> <booktitle> 24 (1990), </booktitle> <pages> 115-124. </pages> <note> Proc. SIGGRAPH '90. </note>
Reference-contexts: known as BSP tree), originally proposed by Schumacker et al. [26] and further refined by Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation [10, 11], visibility determination [4, 28], and ray tracing [21]), solid modeling <ref> [22, 20, 29] </ref>, geometric data repair [19], robotics [5], network design [18], and surface simplification [3].
Reference: [21] <author> B. Naylor and W. Thibault, </author> <title> Application of BSP trees to ray-tracing and CSG evaluation, </title> <type> Technical Report GIT-ICS 86/03, </type> <institution> Georgia Institute of Tech., School of Information and Computer Science, </institution> <year> 1986. </year>
Reference-contexts: Partition (BSP, also known as BSP tree), originally proposed by Schumacker et al. [26] and further refined by Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation [10, 11], visibility determination [4, 28], and ray tracing <ref> [21] </ref>), solid modeling [22, 20, 29], geometric data repair [19], robotics [5], network design [18], and surface simplification [3].
Reference: [22] <author> B. F. Naylor, SCULPT: </author> <title> an interactive solid modeling tool, </title> <booktitle> Proc. Graphics Interface '90, </booktitle> <year> 1990, </year> <pages> pp. 138-148. </pages>
Reference-contexts: known as BSP tree), originally proposed by Schumacker et al. [26] and further refined by Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation [10, 11], visibility determination [4, 28], and ray tracing [21]), solid modeling <ref> [22, 20, 29] </ref>, geometric data repair [19], robotics [5], network design [18], and surface simplification [3].
Reference: [23] <author> B. F. Naylor, </author> <title> Interactive solid geometry via partitioning trees, </title> <booktitle> Proc. Graphics Interface '92, </booktitle> <year> 1992, </year> <pages> pp. 11-18. </pages>
Reference-contexts: Naylor describes a method to implement dynamic changes in a BSP, where the static objects are represented by a balanced BSP (computed in a preprocessing stage), and then the moving objects are inserted at each time step into the static tree <ref> [23] </ref>. Using the same assumption that moving objects are known a priori, Torres proposes the augmentation of BSPs with additional separating planes, which may localize the updates needed for deletion and re-insertion of moving objects in a BSP [30].
Reference: [24] <author> M. S. Paterson and F. F. Yao, </author> <title> Efficient binary space partitions for hidden-surface removal and solid modeling, </title> <journal> Discrete Comput. Geom., </journal> <volume> 5 (1990), </volume> <pages> 485-503. </pages>
Reference-contexts: The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed; see <ref> [4, 8, 16, 24, 25, 28, 29] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input objects are made by hyperplanes parallel to the same fixed direction. We address two problems. <p> Most of the work to date deals with constructing a BSP for a set of "static" segments, which do not move. Paterson and Yao propose a randomized algorithm that constructs a BSP of expected O (n log n) size for a set of n segments in the plane <ref> [24] </ref>. They also propose a deterministic algorithm, based on a divide-and-conquer approach, that constructs a BSP of size O (n log n) in O (n log n) time [24]. <p> randomized algorithm that constructs a BSP of expected O (n log n) size for a set of n segments in the plane <ref> [24] </ref>. They also propose a deterministic algorithm, based on a divide-and-conquer approach, that constructs a BSP of size O (n log n) in O (n log n) time [24]. Both of these algorithms are not "robust," in the sense that a small motion of one of the segments may cause many changes in the tree, or may cause non-local changes. Therefore, they are ill-suited for maintaining a BSP for a set of moving segments. <p> As far as we know, this is the first nontrivial algorithm for maintaining a BSP for moving segments in the plane. Next, we study the problem of computing a BSP for a set S of n interior-disjoint triangles in R 3 . Paterson and Yao <ref> [24] </ref> describe a randomized incremental algorithm that constructs a BSP of expected size O (n 2 ) in time O (n 3 ). They also show that their algorithm can be made deterministic without affecting its asymptotic running time. <p> This completes the description of our algorithm. Note that once we fix the permutation, the algorithm is deterministic and constructs a unique BSP. Using an analysis similar to Paterson and Yao's <ref> [24] </ref>, we can prove the following lemmas: z 1 y v p 2i1 v 0 B (i) p 2i x 2 z s i x v v 0 u w w s i p 2i1 ith stage, and BSP B (i) . At each step, the shaded trapezoids are split. <p> However, if we assign appropriate weights to each free triangle in F v and to each anchored edge and choose a weighted median of the free triangles or the anchored edges, we can improve the height of B to O (log n); for example, see <ref> [24] </ref>. Following an analysis similar to the one given in [24], we can show that the number of nodes in B is O ((n + k) log n), and that the running time of the algorithm is O ((n + k) log 2 n). <p> weights to each free triangle in F v and to each anchored edge and choose a weighted median of the free triangles or the anchored edges, we can improve the height of B to O (log n); for example, see <ref> [24] </ref>. Following an analysis similar to the one given in [24], we can show that the number of nodes in B is O ((n + k) log n), and that the running time of the algorithm is O ((n + k) log 2 n).
Reference: [25] <author> M. S. Paterson and F. F. Yao, </author> <title> Optimal binary space partitions for orthogonal objects, </title> <journal> J. Algorithms, </journal> <volume> 13 (1992), </volume> <pages> 99-113. </pages>
Reference-contexts: The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed; see <ref> [4, 8, 16, 24, 25, 28, 29] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input objects are made by hyperplanes parallel to the same fixed direction. We address two problems. <p> They also show that their algorithm can be made deterministic without affecting its asymptotic running time. It has been an open problem whether a BSP for n triangles in R 3 can be constructed in near-quadratic time. Sub-quadratic bounds are known for special cases <ref> [2, 14, 25] </ref>. However, none of these approaches lead to a near-quadratic algorithm for triangles in R 3 . We present a randomized algorithm (in Section 4) that constructs a BSP for S of expected size O (n 2 ) in O (n 2 log 2 n) time.
Reference: [26] <author> R. A. Schumacker, R. Brand, M. Gilliland, and W. Sharp, </author> <title> Study for applying computer-generated images to visual simulation, </title> <type> Tech. Rep. </type> <institution> AFHRL-TR-69-14, U.S. Air Force Human Resources Laboratory, </institution> <year> 1969. </year>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schumacker et al. <ref> [26] </ref> and further refined by Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation [10, 11], visibility determination [4, 28], and ray tracing [21]), solid modeling [22, 20, 29], geometric data repair [19], robotics [5], network design
Reference: [27] <author> R. Seidel, </author> <title> Backwards analysis of randomized geometric algorithms, in: New Trends in Discrete and Computational Geometry (J. Pach, </title> <editor> ed.), </editor> <booktitle> Algorithms and Combinatorics, </booktitle> <volume> Vol. 10, </volume> <publisher> Springer-Verlag, </publisher> <year> 1993, </year> <pages> pp. 37-68. </pages>
Reference-contexts: Known techniques for analyzing randomized algorithms, such as the Clarkson-Shor framework [13] or backwards analysis <ref> [27] </ref>, cannot be used to obtain a near-quadratic bound on the size of the convex subdivision corresponding to the BSP constructed by the Paterson-Yao algorithm, since the BSP constructed by the algorithm depends on the order in which triangles are added. Our algorithm is a variant of the Paterson-Yao algorithm.
Reference: [28] <author> S. J. Teller, </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Science, University of California, Berke-ley, </institution> <year> 1992. </year>
Reference-contexts: 1 Introduction The Binary Space Partition (BSP, also known as BSP tree), originally proposed by Schumacker et al. [26] and further refined by Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation [10, 11], visibility determination <ref> [4, 28] </ref>, and ray tracing [21]), solid modeling [22, 20, 29], geometric data repair [19], robotics [5], network design [18], and surface simplification [3]. <p> The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed; see <ref> [4, 8, 16, 24, 25, 28, 29] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input objects are made by hyperplanes parallel to the same fixed direction. We address two problems.
Reference: [29] <author> W. C. Thibault and B. F. Naylor, </author> <title> Set operations on polyhedra using binary space partitioning trees, Com-put. Graph., </title> <booktitle> 21 (1987), </booktitle> <pages> 153-162. </pages> <note> Proc. SIGGRAPH '87. </note>
Reference-contexts: known as BSP tree), originally proposed by Schumacker et al. [26] and further refined by Fuchs et al. [16], is a hierarchical partitioning of space widely used in several areas, including computer graphics (global illumination [7], shadow generation [10, 11], visibility determination [4, 28], and ray tracing [21]), solid modeling <ref> [22, 20, 29] </ref>, geometric data repair [19], robotics [5], network design [18], and surface simplification [3]. <p> The efficiency of BSP-based algorithms depends on the number of nodes in the tree and on the height of the tree. As a result, several algorithms for constructing BSPs of small size and/or small height have been proposed; see <ref> [4, 8, 16, 24, 25, 28, 29] </ref>. In this paper, we study cylindrical BSPs in which all the cuts that do not contain any input objects are made by hyperplanes parallel to the same fixed direction. We address two problems.
Reference: [30] <author> E. Torres, </author> <title> Optimization of the binary space partition algorithm (BSP) for the visualization of dynamic scenes, Eurographics '90, </title> <publisher> North-Holland, </publisher> <year> 1990, </year> <pages> pp. 507-518. </pages>
Reference-contexts: Using the same assumption that moving objects are known a priori, Torres proposes the augmentation of BSPs with additional separating planes, which may localize the updates needed for deletion and re-insertion of moving objects in a BSP <ref> [30] </ref>. This approach does try to exploit (by introducing additional planes) the spatial coherence of the dynamic changes in the tree. Chrysanthou suggests a more general approach, which does not make any distinction between static and moving objects [12].
References-found: 30

