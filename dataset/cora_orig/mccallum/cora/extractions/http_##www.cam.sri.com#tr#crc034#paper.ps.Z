URL: http://www.cam.sri.com/tr/crc034/paper.ps.Z
Refering-URL: http://www.cam.sri.com/tr/ABSTRACTS.html
Root-URL: 
Title: Mechanizing Programming Logics in Higher Order Logic 1  
Author: Michael J.C. Gordon 
Address: New Museums Site Suite 23 Pembroke Street Millers Yard Cambridge CB2 3QG Cambridge CB2 1RQ  
Affiliation: Computer Laboratory SRI International  
Web: URL: http://www.cam.sri.com/tr/crc034/paper.ps.Z1988  
Abstract: Formal reasoning about computer programs can be based directly on the semantics of the programming language, or done in a special purpose logic like Hoare logic. The advantage of the first approach is that it guarantees that the formal reasoning applies to the language being used (it is well known, for example, that Hoare's assignment axiom fails to hold for most programming languages). The advantage of the second approach is that the proofs can be more direct and natural. In this paper, an attempt to get the advantages of both approaches is described. The rules of Hoare logic are mechanically derived from the semantics of a simple imperative programming language (using the HOL system). These rules form the basis for a simple program verifier in which verification conditions are generated by LCF-style tactics whose validations use the derived Hoare rules. Because Hoare logic is derived, rather than postulated, it is straightforward to mix semantic and axiomatic reasoning. It is also straightforward to combine the constructs of Hoare logic with other application-specific notations. This is briefly illustrated for various logical constructs, including termination statements, VDM-style `relational' correctness specifications, weakest precondition statements and dynamic logic formulae . The theory underlying the work presented here is well known. Our contribution is to propose a way of mechanizing this theory in a way that makes certain practical details work out smoothly. 1 Earlier versions of this paper appear as University of Cambridge Computer Laboratory Technical 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Andrews, P.B., </author> <title> An Introduction to Mathematical Logic and Type Theory, </title> <publisher> Academic Press, </publisher> <year> 1986. </year>
Reference-contexts: Then, for example, P <ref> [1; . . . ; n] </ref> would denote the result of substituting 1, . . . , n for X 1 , . . . , X n in P respectively.
Reference: [2] <author> Boyer, R.S. and Moore, J S., </author> <title> A Computational Logic, </title> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference: [3] <author> Boyer, R.S., and Moore, J S., `Metafunctions: </author> <title> proving them correct and using them efficiently as new proof procedures' in Boyer, R.S. </title> <editor> and Moore, J S. (eds), </editor> <booktitle> The Correctness Problem in Computer Science, </booktitle> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1981. </year>
Reference: [4] <author> Clarke, E.M. Jr., </author> <title> `The characterization problem for Hoare logics', in Hoare, C.A.R. </title> <editor> and Shepherdson, J.C. (eds), </editor> <booktitle> Mathematical Logic and Programming Languages, </booktitle> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference: [5] <author> A. Church, </author> <title> `A Formulation of the Simple Theory of Types', </title> <journal> Journal of Symbolic Logic 5, </journal> <year> 1940. </year>
Reference: [6] <author> Dijkstra, </author> <title> E.W., A Discipline of Programming, </title> <publisher> Prentice-Hall, </publisher> <year> 1976. </year>
Reference: [7] <author> Floyd, R.W., </author> <title> `Assigning meanings to programs', </title> <editor> in Schwartz, J.T. (ed.), </editor> <booktitle> Mathematical Aspects of Computer Science, Proceedings of Symposia in Applied Mathematics 19 (American Mathematical Society), </booktitle> <address> Providence, </address> <pages> pp. 19-32, </pages> <year> 1967. </year>
Reference: [8] <author> Good, D.I., </author> <title> `Mechanical proofs about computer programs', in Hoare, C.A.R. </title> <editor> and Shepherdson, J.C. (eds), </editor> <booktitle> Mathematical Logic and Programming Languages, </booktitle> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference: [9] <author> Goldblatt, R., </author> <title> Logics of Time and Computation, </title> <booktitle> CSLI Lecture Notes 7, </booktitle> <address> CSLI/Stanford, </address> <publisher> Ventura Hall, Stanford, </publisher> <address> CA 94305, USA, </address> <year> 1987. </year>
Reference: [10] <author> Gordon, M.J.C., </author> <title> `Representing a logic in the LCF metalanguage', </title> <editor> in Neel, D. (ed.), </editor> <title> Tools and Notions for Program Construction, </title> <publisher> Cambridge University Press, </publisher> <year> 1982. </year>
Reference: [11] <author> Gordon, M.J.C., Milner, A.J.R.G. and Wadsworth, </author> <title> C.P., Edinburgh LCF: a mechanized logic of computation, </title> <booktitle> Springer Lecture Notes in Computer Science 78, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference: [12] <author> M. Gordon, </author> <title> `Why Higher-order Logic is a Good Formalism for Specifying and Verifying Hardware', </title> <editor> in G. Milne and P. A. Subrahmanyam (eds), </editor> <title> Formal Aspects of VLSI Design, </title> <publisher> North-Holland, </publisher> <year> 1986. </year>
Reference: [13] <author> Gordon, M.J.C., </author> <title> `HOL: A Proof Generating System for Higher-Order Logic', </title> <institution> University of Cambridge, Computer Laboratory, Tech. </institution> <note> Report No. 103, 1987; Revised version in G. </note> <editor> Birtwistle and P.A. Subrahmanyam (eds), </editor> <title> VLSI Specification, Verification and Synthesis, </title> <publisher> Kluwer, </publisher> <year> 1987. </year>
Reference: [14] <author> Gordon, M.J.C., </author> <title> Programming Language Theory and its Implementation, </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference: [15] <editor> Gries, D., </editor> <booktitle> The Science of Programming, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference: [16] <author> Hoare, </author> <title> C.A.R., `An axiomatic basis for computer programming', </title> <journal> Communications of the ACM 12, </journal> <pages> pp. 576-583, </pages> <month> October </month> <year> 1969. </year>
Reference: [17] <author> Igarashi, S., </author> <title> London, R.L., Luckham, D.C., `Automatic program verification I: logical basis and its implementation', </title> <journal> Acta Informatica 4, </journal> <year> 1975, </year> <pages> pp. 145-182. </pages>
Reference: [18] <author> INMOS Limited, </author> <title> `Occam Programming Language', </title> <publisher> Prentice-Hall. </publisher>
Reference: [19] <author> Jones, C.B., </author> <title> `Systematic Program Development' in Gehani, </title> <editor> N. & McGettrick, A.D. (eds), </editor> <title> Software Specification Techniques, </title> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference: [20] <author> Joyce, J.J., </author> <type> Forthcoming Ph.D. thesis, </type> <institution> University of Cambridge Computer Laboratory, </institution> <note> expected 1989. </note>
Reference: [21] <author> Ligler, G.T., </author> <title> `A mathematical approach to language design', </title> <booktitle> in Proceedings of the Second ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 41-53. </pages>
Reference: [22] <author> Loeckx, J. and Sieber, K., </author> <title> The Foundations of Program Verification, </title> <publisher> John Wiley & Sons Ltd. and B.G. Teubner, Stuttgart, </publisher> <year> 1984. </year>
Reference: [23] <author> London, R.L., et al. </author> <title> `Proof rules for the programming language Euclid', </title> <journal> Acta Informatica 10, </journal> <volume> No. 1, </volume> <year> 1978. </year>
Reference: [24] <author> Fourman, </author> <title> M.P., `The Logic of Topoi', </title> <editor> in Barwise, J. (ed.), </editor> <booktitle> Handbook of Mathematical Logic, </booktitle> <publisher> North-Holland, </publisher> <year> 1977. </year>
Reference: [25] <author> Melham. T.F., </author> <title> `Automating Recursive Type Definitions in Higher Order Logic', </title> <editor> in Birtwistle, G. and P.A. Subrahmanyam (eds), </editor> <booktitle> Proceedings of the 1988 Banff Conference on Hardware Verification (exact book title unknown), </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference: [26] <author> Mosses, </author> <title> P.D., `Compiler Generation using Denotational Semantics', </title> <booktitle> in Mathematical Foundations of Computer Science, Lecture Notes in Computer Science 45, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1976. </year> <month> 52 </month>
Reference: [27] <author> Milner, A.R.J.G., </author> <title> `A Theory of Type Polymorphism in Programming', </title> <journal> Journal of Computer and System Sciences 17, </journal> <year> 1978. </year>
Reference: [28] <author> Paulson, </author> <title> L.C., `A higher-order implementation of rewriting', </title> <booktitle> Science of Computer Programming 3, </booktitle> <pages> pp 143-170, </pages> <year> 1985. </year>
Reference: [29] <author> Paulson, </author> <title> L.C., `Natural deduction as higher-order resolution', </title> <journal> Journal of Logic Programming 3, </journal> <pages> pp 237-258, </pages> <year> 1986. </year>
Reference: [30] <author> Paulson, </author> <title> L.C., Logic and Computation: Interactive Proof with Cambridge LCF, </title> <publisher> Cambridge University Press, </publisher> <year> 1987. </year>
Reference: [31] <editor> Plotkin, G.D., `Dijkstra's Predicate Transformers and Smyth's Powerdomains', in Bjtrner, D. (ed.), </editor> <title> Abstract Software Specifications, </title> <booktitle> Lecture Notes in Computer Science 86, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1986. </year>
Reference: [32] <author> Pratt, </author> <title> V.R., `Semantical Considerations on Floyd-Hoare Logic', </title> <booktitle> Proceedings of the 17th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1976. </year>
Reference: [33] <author> Hayes, I. (ed.), </author> <title> Specification Case Studies, </title> <publisher> Prentice-Hall. </publisher> <address> 53 Index fPg C fQg, </address> <month> 5 </month>

References-found: 33

