URL: http://www.cs.wvu.edu/~atkinson/pubs/ozoview.ps.gz
Refering-URL: http://www.cs.wvu.edu/~atkinson/publications.html
Root-URL: http://www.cs.wvu.edu
Title: Object Orientation in Z accommodate object orientation[6, 1]. The main reason for this extension is
Author: Gordon Rose S. Stepney and R. Barden and D. Cooper 
Note: 1992, sv, Workshops in Computing pp 59-77 1.1 Object-Z Overview 1.1.1 Introduction Object-Z[2, 3, 4] is an extension of the formal specification language Z[5, 7, 8] to  An Object-Z  
Affiliation: Software Verification Research Centre Department of Computer Science University of Queensland Queensland 4072, Australia  
Abstract: A Z specification typically defines a number of state and operation schemas. A state schema groups together variables and defines the relationship that holds between their values. At any instant, these variables define the state of that part of the system which they model. An operation schema defines the relationship between the `before' and `after' states corresponding to one or more state schemas. Therefore, inferring which operation schemas may affect a particular state schema requires examining the signatures of all operation schemas. In large specifications this is impracticable. Conventions, such as chapters, group states and operations informally, but cannot enforce structure. Object-Z overcomes this problem by confining individual operations to refer to one state schema. The definition of a state schema with the definitions of its associated operations (and those of other components to be detailed later) constitute a class. A class is a template for objects of that class: for each such object, its states are instances of the class' state schema and its individual state transitions conform to individual operations of the class. An object is said to be an instance of a class and to evolve according to the definitions of its class. A class may specify part of a system, so that the potential behaviour of that part may be considered and understood in isolation. Complex classes can be specified to inherit other classes, or to include references to objects. These structuring mechanisms are called inheritance and instantiation respectively. 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> G. Booch. </author> <title> Object-Oriented Design with Applications. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference-contexts: 1.1 Object-Z Overview 1.1.1 Introduction Object-Z [2, 3, 4] is an extension of the formal specification language Z [5, 7, 8] to accommodate object orientation <ref> [6, 1] </ref>. The main reason for this extension is to improve the clarity of large specifications through enhanced structuring. A Z specification typically defines a number of state and operation schemas. A state schema groups together variables and defines the relationship that holds between their values.
Reference: [2] <author> D. Carrington, D. Duke, R. Duke, P. King, G. Rose, and G. Smith. Object-Z: </author> <title> An object-oriented extension to Z. </title> <editor> In S. Vuong, editor, </editor> <booktitle> Formal Description Techniques, II (FORTE'89), </booktitle> <pages> pages 281-296. </pages> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: 1.1 Object-Z Overview 1.1.1 Introduction Object-Z <ref> [2, 3, 4] </ref> is an extension of the formal specification language Z [5, 7, 8] to accommodate object orientation [6, 1]. The main reason for this extension is to improve the clarity of large specifications through enhanced structuring. A Z specification typically defines a number of state and operation schemas.
Reference: [3] <author> D. Duke and R. Duke. </author> <title> Towards a semantics for Object-Z. </title> <editor> In D. Bjorner, C.A.R. Hoare, and H. Langmaack, editors, VDM'90: VDM and Z!, </editor> <booktitle> volume 428 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 242-262. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: 1.1 Object-Z Overview 1.1.1 Introduction Object-Z <ref> [2, 3, 4] </ref> is an extension of the formal specification language Z [5, 7, 8] to accommodate object orientation [6, 1]. The main reason for this extension is to improve the clarity of large specifications through enhanced structuring. A Z specification typically defines a number of state and operation schemas.
Reference: [4] <author> R. Duke, P. King, G. Rose, and G. Smith. </author> <title> The Object-Z specification language: </title> <type> Version 1. Technical Report 91-1, </type> <institution> Software Verification Research Centre, Dept. of Computer Science, Univ. of Queensland, Australia, </institution> <year> 1991. </year>
Reference-contexts: 1.1 Object-Z Overview 1.1.1 Introduction Object-Z <ref> [2, 3, 4] </ref> is an extension of the formal specification language Z [5, 7, 8] to accommodate object orientation [6, 1]. The main reason for this extension is to improve the clarity of large specifications through enhanced structuring. A Z specification typically defines a number of state and operation schemas.
Reference: [5] <author> I. Hayes, </author> <title> editor. Specification Case Studies. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: 1.1 Object-Z Overview 1.1.1 Introduction Object-Z [2, 3, 4] is an extension of the formal specification language Z <ref> [5, 7, 8] </ref> to accommodate object orientation [6, 1]. The main reason for this extension is to improve the clarity of large specifications through enhanced structuring. A Z specification typically defines a number of state and operation schemas.
Reference: [6] <author> B. Meyer. </author> <title> Object-Oriented Software Construction. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: 1.1 Object-Z Overview 1.1.1 Introduction Object-Z [2, 3, 4] is an extension of the formal specification language Z [5, 7, 8] to accommodate object orientation <ref> [6, 1] </ref>. The main reason for this extension is to improve the clarity of large specifications through enhanced structuring. A Z specification typically defines a number of state and operation schemas. A state schema groups together variables and defines the relationship that holds between their values.
Reference: [7] <author> J.M. Spivey. </author> <title> The Z Notation: A Reference Manual. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1989. </year> <month> 19 </month>
Reference-contexts: 1.1 Object-Z Overview 1.1.1 Introduction Object-Z [2, 3, 4] is an extension of the formal specification language Z <ref> [5, 7, 8] </ref> to accommodate object orientation [6, 1]. The main reason for this extension is to improve the clarity of large specifications through enhanced structuring. A Z specification typically defines a number of state and operation schemas.
Reference: [8] <author> J. Woodcock and M. Loomes. </author> <title> Software Engineering Mathematics. </title> <publisher> Pitman, </publisher> <year> 1988. </year> <month> 20 </month>
Reference-contexts: 1.1 Object-Z Overview 1.1.1 Introduction Object-Z [2, 3, 4] is an extension of the formal specification language Z <ref> [5, 7, 8] </ref> to accommodate object orientation [6, 1]. The main reason for this extension is to improve the clarity of large specifications through enhanced structuring. A Z specification typically defines a number of state and operation schemas.
References-found: 8

