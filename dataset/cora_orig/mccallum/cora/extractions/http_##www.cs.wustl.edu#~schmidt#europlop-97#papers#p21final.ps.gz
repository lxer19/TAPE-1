URL: http://www.cs.wustl.edu/~schmidt/europlop-97/papers/p21final.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/europlop-97/workshops.html
Root-URL: 
Title: Architectural Styles for Distribution Using macro-patterns for system design  
Author: Charles Weir Charles Weir, 
Date: June 1997  
Abstract: This paper highlights the problem of describing the software architecture of a distributed system, and introduces the Architectural Styles proposed by Shaw&Garlan as a possible solution. Using a pattern template, it explores four major styles for distribution architecture: Host-Terminal, ClientServer, Broadcast Data and Batch Communication. 
Abstract-found: 1
Intro-found: 1
Reference: [Coplien&Schmidt] <institution> Pattern Languages of Programming, </institution> <note> Coplien and Schmidt, Addison-Wesley, ISBN 0-201-60734-4 </note>
Reference: [Gamma+] <author> Design Patterns, Gamma, Helm, Johnson and Vlissides, </author> <note> Addison-Wesley, ISBN 0- 201-63361-2 </note>
Reference: [Jackson] <editor> Software Requirements and Specifications, Michael Jackson, </editor> <publisher> Addison-Wesley, </publisher> <address> ISBN 0-201-87712-0 </address>
Reference-contexts: From then on we can use the name in our discussions and documentation. I am aware of two leading researchers using this kind of approach: <ref> [Jackson] </ref> describes Problem Frames (structures for a system), and uses a narrative approach to describe them and the architectural issues surrounding them. [Shaw&Garlan] describe Architectural Styles, using approach similar to that of the pattern movement.
Reference: [Orfali+] <editor> Essential Distributed Objects Survival Guide, Orfali, Harkey and Edwards, </editor> <publisher> John Wiley and Sons Ltd., </publisher> <address> ISBN 0-471-12993-3 </address>
Reference-contexts: Since data locks can become the main bottleneck in large-scale systems, this improvement is significant. [Waldo+] provides a further discussion of the problems of state-based distribution. Examples The CORBA standard and the Microsoft COM system (see <ref> [Orfali+] </ref>) are both based on a clientserver model. Here the components are objects that may be distributed over a network. The DCE standard uses a clientserver model to provide interprocess communication across a network. Forte and Dynasty are development environments using the clientserver model.
Reference: [Shaw&Garlan] <editor> Software Architecture - Perspectives on a Emerging Discipline, Shaw and Garlan, </editor> <publisher> Prentice Hall ISBN 0-13-182957-2 </publisher>
Reference-contexts: From then on we can use the name in our discussions and documentation. I am aware of two leading researchers using this kind of approach: [Jackson] describes Problem Frames (structures for a system), and uses a narrative approach to describe them and the architectural issues surrounding them. <ref> [Shaw&Garlan] </ref> describe Architectural Styles, using approach similar to that of the pattern movement. This paper extends the work of [Shaw&Garlan] to explore styles for the architecture of distributed systems. Shaw&Garlans Architectural Styles [Shaw&Garlan] distils the essence of large system design using an approach very similar to the software patterns first promoted <p> of two leading researchers using this kind of approach: [Jackson] describes Problem Frames (structures for a system), and uses a narrative approach to describe them and the architectural issues surrounding them. <ref> [Shaw&Garlan] </ref> describe Architectural Styles, using approach similar to that of the pattern movement. This paper extends the work of [Shaw&Garlan] to explore styles for the architecture of distributed systems. Shaw&Garlans Architectural Styles [Shaw&Garlan] distils the essence of large system design using an approach very similar to the software patterns first promoted by Richard Gabriel and derived from the work of Christopher Alexander. <p> (structures for a system), and uses a narrative approach to describe them and the architectural issues surrounding them. <ref> [Shaw&Garlan] </ref> describe Architectural Styles, using approach similar to that of the pattern movement. This paper extends the work of [Shaw&Garlan] to explore styles for the architecture of distributed systems. Shaw&Garlans Architectural Styles [Shaw&Garlan] distils the essence of large system design using an approach very similar to the software patterns first promoted by Richard Gabriel and derived from the work of Christopher Alexander. As with a pattern, each architectural style has a simple short descriptive name. <p> What is the underlying computational model? What are the essential invariants of the style? What are common examples of its use? What are the advantages and disadvantages of using that style? What are some of the common specialisations? Table 1: Elements of a Shaw&Garlan Architectural Style Using Styles The book <ref> [Shaw&Garlan] </ref> goes on to stress that in practice any given system will use a combination of styles, rather than exclusively one. In this respect, architectural styles appear very similar to software patterns ([Gamma+]). I myself have used styles to discuss the overall software architecture for two new software projects. <p> I myself have used styles to discuss the overall software architecture for two new software projects. I find, as with patterns, the names and the rules of behaviour implied by each style helps considerably when sketching out options for the high-level design of a system. However the descriptions in <ref> [Shaw&Garlan] </ref> are limited. Their narrative approach leads to some being explained well; others sketched only in the vaguest detail. My experiments with describing styles in this informal way (see [Weir]) have led me to conclude that a more structured approach, based on the pattern format, is more profitable. <p> A common approach is to use the ClientServer style (see page 4). The Broadcast data style is the distributed analogue of Event System style in <ref> [Shaw&Garlan] </ref>. The broadcast messages correspond to events in the Event System style. Invariants The broadcast stream is one-way, from the server to any number of receivers. The server has no interest in whether any specific receiver has received a particular message. <p> This style is suitable where very fast communication is required between the processes on a single host. Shared database systems. The distributed systems use clientserver facilities provided by their database vendor. From the point of view of the application designer, the approach is the Database style of <ref> [Shaw&Garlan] </ref>. This style is suitable for applications that need data consistency between the different components. Examples include airline reservation or sales entry systems.
Reference: [Waldo+] <institution> A Note on Distributed Computing, Waldo, Wyant, Wollrath and Kendall, Sun Microsystems Laboratories, </institution> <note> http://www.sunlabs.com/smli/technical-reports/1994/smli_tr-94-29.ps </note>
Reference-contexts: However it can make it much easier to optimise the performance of the server, since there is no requirement to preserve data locks between client calls. Since data locks can become the main bottleneck in large-scale systems, this improvement is significant. <ref> [Waldo+] </ref> provides a further discussion of the problems of state-based distribution. Examples The CORBA standard and the Microsoft COM system (see [Orfali+]) are both based on a clientserver model. Here the components are objects that may be distributed over a network.
Reference: [Weir] <author> A ClientServer Architectural Style, Charles Weir, </author> <note> Submission to Working Group at Object Technology 97. http://www.cix.co.uk/~cweir/ot97wg/papers/cli-ser.ps </note>
Reference-contexts: However the descriptions in [Shaw&Garlan] are limited. Their narrative approach leads to some being explained well; others sketched only in the vaguest detail. My experiments with describing styles in this informal way (see <ref> [Weir] </ref>) have led me to conclude that a more structured approach, based on the pattern format, is more profitable. This paper uses such a pattern structure to describe several styles commonly used in distribution architectures.
References-found: 7

