URL: http://www.cs.utexas.edu/users/dmcl/papers/ps/Computer95.ps
Refering-URL: http://www.cs.utexas.edu/users/dmcl/allpapers.html
Root-URL: 
Email: E-mail: gemmell@cs.sfu.ca  E-mail: vin@cs.utexas.edu  E-mail: kandlur@watson.ibm.com  E-mail: venkat@cs.ucsd.edu  E-mail: larry@cs.berkeley.edu  
Title: Multimedia Storage Servers: A Tutorial  
Author: D. James Gemmell Harrick M. Vin Dilip D. Kandlur P. Venkat Rangan Lawrence A. Rowe 
Address: Austin  San Diego  Berkeley  
Affiliation: Department of Computer Science, Simon Fraser University  Department of Computer Sciences, The University of Texas at  IBM T.J. Watson Research Center  Department of Computer Science and Engineering, University of California at  Department of Electrical Engineering and Computer Science, University of California at  
Abstract: Multimedia storage servers provide access to multimedia objects including text, images, audio, and video. The design of such servers fundamentally differs from conventional servers due to: (1) the real-time storage and retrieval requirements, as well as (2) the large storage space and data transfer rate requirements of digital multimedia. In this paper, we present an overview of the architectures and algorithms required for designing digital multimedia storage servers. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Anderson, Y. Osawa, and R. Govindan. </author> <title> A File System for Continuous Media. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 311-337, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Although semantically different, both of these operations have been shown to be mathematically equivalent with respect to their real-time performance requirements <ref> [1] </ref>. Consequently, for the sake of clarity, we will iii only discuss techniques for retrieving media information from disk for real-time playback. Analysis for real-time recording can be carried out similarly. <p> This means that on a round-by-round basis, the production of data never falls behind the consumption, and there is never a net decrease in the amount of buffered data. Algorithms having this property have been referred to as workahead-augmenting <ref> [1] </ref> or buffer-conserving [5]. It is also conceivable that an algorithm may be developed which proceeds in rounds, but is not buffer-conserving. Such an algorithm would allow production to fall behind consumption in one round, and then make up for it in a later round. <p> In fact, it can be shown that in order to enable a multimedia server to service the maximum number of streams simultaneously, the number of blocks retrieved for each stream during each round should be proportional to its consumption rate requirements <ref> [1, 6, 7, 13] </ref>. Naturally, these reading requirements dictate that the server manage its buffers in such a way that there is always sufficient free space for the next reads to be performed. <p> For processing of requests in rounds, this is usually a matter of checking whether increasing the round length by servicing another client will cause the amount buffered for existing clients to be inadequate to prevent starvation <ref> [1, 13] </ref>. Some schemes dynamically change the client buffer spaces based on the current round length. Alternately, all client buffer spaces may be allocated assuming a maximum round length, and for admission the new round length only needs to be compared to the maximum [5]. <p> Alternately, the system may store data in clusters which correspond to a fixed amount of time, with a variable cluster size. Furthermore, compressed media quanta may not correspond to an even number of disk sectors, which raises questions about packing 4 A constrained scheme is also briefly discussed in <ref> [1] </ref>. x xi data [6]. With scalable compression, placement of data must be carefully managed to ensure that the extraction of low-resolution subsets is efficient. 3.2 Multiple Disk Configurations So far, we have considered storage on a single disk.
Reference: [2] <author> Ming-Syan Chen, Dilip D. Kandlur, and Philip S. Yu. </author> <title> Support For Fully Interactive Playout in a Disk-Array-Based Video Server. </title> <booktitle> In Proceedings of the ACM Multimedia'94, </booktitle> <address> San Francisco, </address> <month> October </month> <year> 1994. </year> <pages> xviii </pages>
Reference-contexts: For example, the I and P frames of MPEG are much larger than the average frame size. These means that the data rate required during FF operation would be higher than the normal rate. Chen, Kandlur, and Yu <ref> [2] </ref> present a different solution for FF operations on MPEG video files. Their method performs block skipping using an intelligent arrangement of blocks (called segments) that takes into account the inter-frame dependencies of the compressed video.
Reference: [3] <author> A. Dan, D. Sitaram, and P. Shahabuddin. </author> <title> Dynamic Batching Policies for an On-Demand Video Server. </title> <booktitle> In Proc. ACM Multimedia'94, </booktitle> <pages> pages 15-24, </pages> <address> San Francisco, </address> <month> October </month> <year> 1994. </year> <note> also, to appear in ACM Multimedia Systems. </note>
Reference-contexts: Additionally, a multimedia server must also support interactive control functions such as pause/resume, fast forward (FF) and fast backward (FB). The pause/resume operations pose a significant challenge for buffer management since it interferes with the sharing of a multimedia stream between different viewers <ref> [3] </ref>. The FF and FB operations can be implemented either by playing back media at a rate higher than normal, or by continuing playback at the normal rate while skipping some data.
Reference: [4] <author> C. Federighi and L.A. Rowe. </author> <title> The Design and Implementation of the UCB Distributed Video On-Demand System. </title> <booktitle> In Proceedings of the IS&T/SPIE 1994 International SYmposium on Electronic Imaging: Science and Technology, </booktitle> <address> San Jose, </address> <pages> pages 185-197, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: In addition to maintaining one or more tertiary storage devices that contain the video streams as well as the corresponding metadata, each AS will also provide an interface that will permit users to query the database to locate pertinent video streams, and then schedule their retrieval <ref> [4, 11] </ref>. 4 Implementing a Multimedia File System 4.1 Interfacing With The Client Based on their access models, servers can be roughly classified as file-system-oriented or stream-oriented .
Reference: [5] <author> D. James Gemmell and Jiawei Han. </author> <title> Multimedia Network File Servers:Multi-Channel Delay Sensitive Data Retrieval. </title> <journal> Multimedia Systems, </journal> <volume> 1(6) </volume> <pages> 240-252, </pages> <year> 1994. </year>
Reference-contexts: To reduce the latencies in each round, it is possible to simply apply the SCAN algorithm. For CM servers, minor alterations to SCAN can lead to minimization of the seek latencies, and hence the round length <ref> [5] </ref>. However, minimization of the round length is not the only issue for the CM server. Notice that in the case of the round-robin algorithm, the order in which clients are serviced is fixed across rounds. <p> This means that on a round-by-round basis, the production of data never falls behind the consumption, and there is never a net decrease in the amount of buffered data. Algorithms having this property have been referred to as workahead-augmenting [1] or buffer-conserving <ref> [5] </ref>. It is also conceivable that an algorithm may be developed which proceeds in rounds, but is not buffer-conserving. Such an algorithm would allow production to fall behind consumption in one round, and then make up for it in a later round. However, this would necessarily be more complex. <p> With three buffers, the only time that a whole block could not be read would be when at least two were full, in which case there is already enough buffered so that reading is not necessary until the next round. Solutions are possible with less than three buffers <ref> [5] </ref>. 2.3 Admission Control Algorithms Given the real-time performance requirements of each client, a multimedia server must employ admission control algorithms to determine whether a new client can be admitted without violating the performance requirements of the clients already being serviced. <p> Some schemes dynamically change the client buffer spaces based on the current round length. Alternately, all client buffer spaces may be allocated assuming a maximum round length, and for admission the new round length only needs to be compared to the maximum <ref> [5] </ref>. Implementing statistical service would proceed as with deterministic service, but instead of using worst case values in computing the change to round length, some statistical distributions would be used. <p> If an algorithm like SCAN is used, which orders blocks regardless of the stream they belong to, then the impact of constrained placement is marginal <ref> [5] </ref>. An approach to the problem of seek reduction comes from the adaptation of log-structured file systems [7]. When modifying blocks of data, log-structured systems do not store modified blocks in their original positions.
Reference: [6] <author> J. Gemmell and S. Christodoulakis. </author> <title> Principles of Delay Sensitive Multimedia Data Storage and Retrieval. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 51-90, </pages> <year> 1992. </year>
Reference-contexts: Consequently, information retrieved from the disk may have to be buffered prior to playback. Therefore, the challenge for the server is to keep enough data in stream buffers at all times so as to ensure that the playback processes do not starve <ref> [6] </ref>. In the simplest case, continuous playback can be ensured by buffering the entire stream prior to initiating the playback. Such a scheme, however, will require very large buffer space and may also yield a very large latency for initiating playback. <p> It has been shown that these two minimization problems are, in fact, one and the same minimizing one will minimize the other <ref> [6] </ref>. <p> In fact, it can be shown that in order to enable a multimedia server to service the maximum number of streams simultaneously, the number of blocks retrieved for each stream during each round should be proportional to its consumption rate requirements <ref> [1, 6, 7, 13] </ref>. Naturally, these reading requirements dictate that the server manage its buffers in such a way that there is always sufficient free space for the next reads to be performed. <p> Furthermore, compressed media quanta may not correspond to an even number of disk sectors, which raises questions about packing 4 A constrained scheme is also briefly discussed in [1]. x xi data <ref> [6] </ref>. With scalable compression, placement of data must be carefully managed to ensure that the extraction of low-resolution subsets is efficient. 3.2 Multiple Disk Configurations So far, we have considered storage on a single disk.
Reference: [7] <author> Philip Lougher and Doug Shepherd. </author> <title> The Design of a Storage Server for Continuous Media. </title> <journal> The Computer Journal, </journal> <volume> 36(1) </volume> <pages> 32-42, </pages> <year> 1993. </year>
Reference-contexts: In fact, it can be shown that in order to enable a multimedia server to service the maximum number of streams simultaneously, the number of blocks retrieved for each stream during each round should be proportional to its consumption rate requirements <ref> [1, 6, 7, 13] </ref>. Naturally, these reading requirements dictate that the server manage its buffers in such a way that there is always sufficient free space for the next reads to be performed. <p> If an algorithm like SCAN is used, which orders blocks regardless of the stream they belong to, then the impact of constrained placement is marginal [5]. An approach to the problem of seek reduction comes from the adaptation of log-structured file systems <ref> [7] </ref>. When modifying blocks of data, log-structured systems do not store modified blocks in their original positions. Instead, all writes for all clients are performed sequentially in a large contiguous free space (see figure 4).
Reference: [8] <author> T. Mori, K. Nishimura, H. Nakano, and Y. Ishibashi. </author> <title> Video-on-Demand System using Optical Mass Storage System. </title> <journal> Japanese Journal of Applied Physics, </journal> <volume> 1(11B):5433-5438, </volume> <month> November </month> <year> 1993. </year>
Reference-contexts: On the other hand, it is also possible to use the disks to only provide storage for the beginning segments of the multimedia streams. These segments may be used to reduce the startup latency and to ensure smooth transitions in the playback <ref> [8] </ref>. A distributed hierarchical storage management extends this idea by allowing multiple magnetic disk-based caches to be distributed across a network.
Reference: [9] <author> P. Venkat Rangan and Harrick M. Vin. </author> <title> Efficient Storage Techniques for Digital Continuous Multimedia. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 5(4) </volume> <pages> 564-573, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: If more than one block would be required to prevent starvation prior to the next read, then intra-file seeks are a necessity. Instead of avoiding intra-file seeks, another approach is to attempt to reduce them to a reasonable bound. This is referred to as the constrained placement approach <ref> [9] </ref>. Constrained placement systems ensure that the separation between successive blocks of a file are bounded. However, it does not do this for each pair of successive blocks, but only on average over a finite sequence of blocks (see figure 4).
Reference: [10] <author> A.L. Narasimha Reddy and J. Wyllie. </author> <title> I/O Issues in a Multimedia System. </title> <journal> COMPUTER, </journal> <volume> 27(3) </volume> <pages> 69-74, </pages> <year> 1994. </year>
Reference-contexts: Hence, poor utilization of the server resources is to be expected with EDF. One variant of this basic algorithm combines SCAN with EDF, and is referred to as the SCAN-EDF scheduling algorithm <ref> [10] </ref>. SCAN operates by scanning the disk head back and forth across the surface of the disk, retrieving a requested block as the head passes over it. By limiting the amount of back-tracking that the disk head does, SCAN can achieve a significant reduction in seek latencies.
Reference: [11] <author> L.A. Rowe, J. Boreczky, and C. Eads. </author> <title> Indexes for User Access to Large Video Databases. </title> <booktitle> In Proceedings of the IS&T/SPIE 1994 International SYmposium on Electronic Imaging: Science and Technology, </booktitle> <address> San Jose, </address> <pages> pages 150-161, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: In addition to maintaining one or more tertiary storage devices that contain the video streams as well as the corresponding metadata, each AS will also provide an interface that will permit users to query the database to locate pertinent video streams, and then schedule their retrieval <ref> [4, 11] </ref>. 4 Implementing a Multimedia File System 4.1 Interfacing With The Client Based on their access models, servers can be roughly classified as file-system-oriented or stream-oriented .
Reference: [12] <author> D.B. Terry and D.C. Swinehart. </author> <title> Managing Stored Voice in the Etherphone System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 3-27, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: A media stream, no part of which is referred to by any multimedia object, can be deleted to reclaim its storage space. A garbage collection algorithm such as the one presented by Terry and Swinehart in the Etherphone system <ref> [12] </ref>, which uses a reference count mechanism called interests, can be used for this purpose. Another problem arises when material is cut from or pasted into multimedia files. The simplest approach to such a change in the material is to simply re-write the file from the edited point onwards.

References-found: 12

