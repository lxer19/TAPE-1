URL: http://ftp.eecs.umich.edu/people/zheng/rlanconf.ps
Refering-URL: http://ftp.eecs.umich.edu/people/zheng/
Root-URL: http://www.eecs.umich.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> F. E. Ross, </author> <title> "An overview of FDDI: The fiber distributed data interface," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 7, no. 7, </volume> <pages> pp. 1043 - 1051, </pages> <month> September </month> <year> 1989. </year>
Reference: [2] <author> M. Teener and R. Gvozdanovic, </author> <title> "FDDI-II operation and architectures," </title> <booktitle> in proceedings of the 14th conference on local computer networks, </booktitle> <pages> pp. 49-61, </pages> <year> 1989. </year>
Reference: [3] <author> D. Dykeman and W. Bux, </author> <title> "Analysis and tuning of the FDDI media-access control protocol," </title> <journal> IEEE Journal on Selected Areas in Communications, pp. </journal> <volume> 997 - 1010, </volume> <month> July </month> <year> 1988. </year>
Reference: [4] <author> K. G. Shin and Q. Zheng, </author> <title> "Mixed time-constrained and non-time-constrained communications in local area networks," </title> <journal> IEEE Transactions on Communication (in press), </journal> <year> 1992. </year>
Reference: [5] <author> D. A. Reed and R. M. Fujimoto, </author> <title> Multicom-puter Networks: Message-Based Parallel Processing, </title> <editor> M. I. T. </editor> <publisher> Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1987. </year>
Reference-contexts: The first function is basically a buffer bookkeeping function which can be implemented with several linked lists manipulated by dedicated hardware as discussed in <ref> [5, 13] </ref>. The hardware implementation of the second function, i.e., deadline scheduling, is relatively new. Thus, we will give a detailed account of scheduler design in the rest of this section. The architecture of the BMU is shown in Fig. 3.
Reference: [6] <author> R. Suaya and G. Birtwistle, </author> <title> VLSI and Parallel Computation, </title> <publisher> Morgan Kaufmann Publishers, Inc., </publisher> <address> San Mateo, California, </address> <year> 1990. </year>
Reference: [7] <author> D. Ferrari and D. C. Verma, </author> <title> "A scheme for real-time channel establishment in wide-area networks," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. SAC-8, no. 3, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference: [8] <author> D. D. Kandlur, K. G. Shin, and D. Ferrari, </author> <title> "Real-time communication in multi-hop networks," </title> <booktitle> in Proc. 11th Int. Conf. on Distributed Computer Systems, </booktitle> <pages> pp. 300-307. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1991. </year>
Reference: [9] <author> Q. Zheng and K. G. Shin, </author> <title> "On the ability of establishing real-time channels in point-to-point packet-switched networks," </title> <journal> IEEE Transactions on Communication (in press), </journal> <year> 1992. </year> <month> 9 </month>
Reference: [10] <author> Q. Zheng and K. G. Shin, </author> <title> "Fault-tolerant real--time communication in distributed computing systems," </title> <booktitle> in Proc. 22nd Annual International Symposium on Fault-tolerant Computing, </booktitle> <year> 1992. </year>
Reference: [11] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling algorithms for multiprogramming in a hard real-time environment," </title> <journal> Journal of the ACM, </journal> <volume> vol. 20, no. 1, </volume> <pages> pp. 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference: [12] <author> K. C. Sevicik and M. J. Johnson, </author> <title> "Analysis and tuning of the FDDI media access control protocol," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 6, no. 6, </volume> <pages> pp. 997 - 1010, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: [0:31] WAIT Packet ID to PQ Packet ID to M2 R1 [6:63] ==&gt; DR2 1 ==&gt; FLAG M1 (R1 [0:5]) ==&gt; DR1 R1 [0:5] ==&gt; AR1 [0:5] Otherwise Otherwise IN = 0 FLAG = 0 & OUT = 0 IN = 1 FLAG = 0 & OUT = 0 DR1 <ref> [12] </ref> = 0 DR1 [12] = 1 PQ (0) ==&gt; PDO 1 ==&gt; SHIFT M1 [PDO [0:5]] ==&gt; DR1 1 ==&gt; FLAG; 0 ==> SHIFT Shift PQ DR1 [0:5] ==&gt; AR2 [6:11] M2 [AR2] ==&gt; DR2 DR1 [0:5]+1 ==&gt; DR1 [0:5] -PDO [0:5], DR2- ==&gt; PQ (PAR) phase 1 IF DR1 <p> to PQ Packet ID to M2 R1 [6:63] ==&gt; DR2 1 ==&gt; FLAG M1 (R1 [0:5]) ==&gt; DR1 R1 [0:5] ==&gt; AR1 [0:5] Otherwise Otherwise IN = 0 FLAG = 0 & OUT = 0 IN = 1 FLAG = 0 & OUT = 0 DR1 <ref> [12] </ref> = 0 DR1 [12] = 1 PQ (0) ==&gt; PDO 1 ==&gt; SHIFT M1 [PDO [0:5]] ==&gt; DR1 1 ==&gt; FLAG; 0 ==> SHIFT Shift PQ DR1 [0:5] ==&gt; AR2 [6:11] M2 [AR2] ==&gt; DR2 DR1 [0:5]+1 ==&gt; DR1 [0:5] -PDO [0:5], DR2- ==&gt; PQ (PAR) phase 1 IF DR1 [0:5] = DR1 [6:11] <p> M2 [AR2] ==&gt; DR2 DR1 [0:5]+1 ==&gt; DR1 [0:5] -PDO [0:5], DR2- ==&gt; PQ (PAR) phase 1 IF DR1 [0:5] = DR1 [6:11] -PDO [0:5], DR2- ==&gt; PQ (PAR) phase 1 DR1 ==&gt; M1 (PDO [0:5]) 0 ==&gt; FLAG DR1 ==&gt; M1 (PDO [0:5]) 0 ==&gt; FLAG 0 ==&gt; DR1 <ref> [12] </ref> IDLE WAIT Otherwise Otherwise FLAG = 0 FLAG = 0 OUT = 0 OUT = 1 Get a packet ID from M2 No more packets of the channel 8 channel.
Reference: [13] <author> Intel, </author> <title> LAN Components User's Manual, </title> <year> 1984. </year>
Reference-contexts: The first function is basically a buffer bookkeeping function which can be implemented with several linked lists manipulated by dedicated hardware as discussed in <ref> [5, 13] </ref>. The hardware implementation of the second function, i.e., deadline scheduling, is relatively new. Thus, we will give a detailed account of scheduler design in the rest of this section. The architecture of the BMU is shown in Fig. 3. <p> indicate that PQ no longer contains the ID of a packet belonging to the 7 DR1 ==&gt; M1 (R1 [0:5]) PQ (PAR) phase 1 -R1 [0:5], DR2- ==&gt; PQ (PAR) phase 2 1 ==&gt; FLAG DR2 [0:25] ==&gt; PAR DR1 ==&gt; M1 (R1 [0:5]) 0 ==&gt; FLAG 1 ==&gt; DR1 <ref> [13] </ref> DR2 ==&gt; M2 (AR2) IDLE BUS 1 ==&gt; R1 [0:31] WAIT Packet ID to PQ Packet ID to M2 R1 [6:63] ==&gt; DR2 1 ==&gt; FLAG M1 (R1 [0:5]) ==&gt; DR1 R1 [0:5] ==&gt; AR1 [0:5] Otherwise Otherwise IN = 0 FLAG = 0 & OUT = 0 IN =
Reference: [14] <author> A. Indiresan and Q. Zheng, </author> <title> "Design and evaluation of a fast deadline scheduling switch for multi-computers," RTCL working document, </title> <month> December </month> <year> 1991. </year>
Reference-contexts: When this packet is transmitted, the identifier of the second packet of the channel (if there is one waiting in the buffer) gets inserted in the priority queue. Given below is an example implementation of the above ideas. The details of its design and evaluation are presented in <ref> [14] </ref>. Suppose the interface of the scheduler to the BAU is composed of two buses, BUS 1 of width 32 and BUS 2 of width 33, and two signaling lines IN and OUT (see Fig. 3).
References-found: 14

