URL: http://www.cse.ogi.edu/cse526/papers/jip.ps
Refering-URL: http://www.cse.ogi.edu/cse526/schedule.html
Root-URL: http://www.cse.ogi.edu
Title: Microkernel Operating System Architecture and Mach  
Author: David L. Black David B. Golub Daniel P. Julin Richard F. Rashid Richard P. Draves Randall W. Dean Alessandro Forin Joseph Barrera Hideyuki Tokuda Gerald Malan David Bohman 
Date: June 16, 1991  
Note: DRAFT of  
Abstract: Modular architectures based on a microkernel are suitable bases for the design and implementation of operating systems. Prototype systems employing microkernel architectures are achieving the levels of functionality and performance expected and required of commercial products. Researchers at Carnegie Mellon University, the Open Software Foundation, and other sites are investigating implementations of a number of operating systems (e.g., Unix 1 , MS-DOS 2 ) that use the Mach microkernel. This paper describes the Mach microkernel, its use to support implementations of other operating systems, and the status of these efforts. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: [1] <author> Accetta, M., R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young, </author> <note> Mach: </note>
Reference-contexts: Finally, the use of common underlying services provides support for the coexistence and interoperability of multiple operating system environments on a single host. Experience with implementations based on the Mach system demonstrates that these advantages can be achieved without sacrificing performance. The Mach kernel <ref> [1] </ref> is an example of this modular layered approach to operating system design. Mach is a multiprocessor kernel that incorporates in one system a number of key facilities that allow the efficient implementation of those functions necessary to support binary compatibility with existing operating system environments. <p> efficiently. 3.1 Mach Kernel Features The key features of Mach are: * Task and thread management * Interprocess communication * Memory object management * System call redirection * Device support * User multiprocessing support * Multicomputer support A more detailed description of Mach and its abstractions can be found in <ref> [1] </ref>. Task and thread management Mach supports the task and thread abstractions for managing execution. A task is a passive resource abstraction, consisting of an address space and communication access to system and server facilities.
References-found: 2

