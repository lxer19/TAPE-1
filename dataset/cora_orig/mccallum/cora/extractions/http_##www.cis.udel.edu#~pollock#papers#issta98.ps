URL: http://www.cis.udel.edu/~pollock/papers/issta98.ps
Refering-URL: http://www.cis.udel.edu/~jochen/passages/pubs.htm
Root-URL: http://www.cis.udel.edu
Email: fyang,souter,pollockg@cis.udel.edu  
Phone: (302) 831-1953 (302) 831-8458 (Fax)  
Title: All-du-path Coverage for Parallel Programs  
Author: Cheer-Sun D. Yang Amie L. Souter Lori L. Pollock 
Keyword: parallel programming, testing tool, all-du-path coverage  
Address: 19716  
Affiliation: Department of Computer and Information Sciences University of Delaware, Newark, DE  
Abstract: One significant challenge in bringing the power of parallel machines to application programmers is providing them with a suite of software tools similar to the tools that sequential programmers currently utilize. In particular, automatic or semi-automatic testing tools for parallel programs are lacking. This paper describes our work in automatic generation of all-du-paths for testing parallel programs. Our goal is to demonstrate that, with some extension, sequential test data adequacy criteria are still applicable to parallel program testing. The concepts and algorithms in this paper have been incorporated as the foundation of our DELaware PArallel Software Testing Aid, della pasta. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Bertolino and M. Marr e. </author> <title> Automatic generation of path covers based on the control flow analysis of computer programs. </title> <journal> IEEE Trans. on Soft. Eng., </journal> 20(12) 885-899, Dec. 1994. 
Reference-contexts: wait or vice versa, we expect that the compiler will report a warning message prior to the execution of our algorithm. 5 Related Work In the context of sequential programs, several researchers have examined the problems of generating test cases using path finding as well as finding minimum path coverage <ref> [3, 11, 1] </ref>. All of these methods for finding actual paths focus on programs without parallel programming features and, therefore, cannot be applied directly to finding all-du-path coverage for parallel programs. <p> Bertolino and Marr e have developed an algorithm (which we call DT-IT) that uses dominator trees (DT) and implied trees (IT) (i.e., post-dominator trees) to find a path coverage for all branches in a sequential program <ref> [1] </ref>.
Reference: [2] <author> L. A. Clarke. </author> <title> A system to generate test data and symbolically execute programs. </title> <journal> IEEE Trans. on Soft. Eng., </journal> <volume> 2(3) </volume> <pages> 215-222, </pages> <month> Sept. </month> <year> 1976. </year>
Reference: [3] <author> H. N. Gabow, S. N. Maheshwari, and L. J. Osterweil. </author> <title> On two problems in the generation of program test paths. </title> <journal> IEEE Trans. on Soft. Eng., </journal> <volume> SE-2(3):227-231, </volume> <month> Sept. </month> <year> 1976. </year>
Reference-contexts: wait or vice versa, we expect that the compiler will report a warning message prior to the execution of our algorithm. 5 Related Work In the context of sequential programs, several researchers have examined the problems of generating test cases using path finding as well as finding minimum path coverage <ref> [3, 11, 1] </ref>. All of these methods for finding actual paths focus on programs without parallel programming features and, therefore, cannot be applied directly to finding all-du-path coverage for parallel programs. <p> We first look at their limitations for providing all-du-path coverage for parallel programs when used in isolation. Gabow, Maheshwari, and Osterweil <ref> [3] </ref> showed how to use depth-first search (DFS) to find actual paths that connect two nodes in a sequential program. When applying DFS alone to parallel programs, we claim that it is not appropriate even for finding PAT H a , not to mention PAT H w .
Reference: [4] <author> W. Gropp, E. Lusk, and A. Skjellum. </author> <title> Using MPI: Portable Parallel Programming with the Message Passing Interface. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [5] <author> D. Grunwald and H. Srinivasan. </author> <title> Data flow equations for explicitly parallel programs. </title> <booktitle> In Fourth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 159-168, </pages> <address> California, USA, </address> <year> 1993. </year>
Reference-contexts: The algorithm assumes that the individual du-pairs of the parallel program have been found. Previous work computing reaching definitions for shared memory parallel programs has been done by Grunwald and Srinivasan <ref> [5] </ref>. 6.1 Data Structures The main data structures used in the hybrid algorithm are: (1) a PPFG, (2) a working queue per thread to store the post nodes that are required in the final path coverage, (3)a traversal control number (TRN) associated with every node used to decide which node must <p> The static analyzer uses a modified version of the Grunwald and Srinivasan algorithm <ref> [5] </ref> to find du-pairs in parallel programs of this model, and is implemented using the compiler optimizer generating tool called nsharlit, which is part of the SUIF compiler infrastructure [8].
Reference: [6] <author> M. J. Harrold and M. L. Soffa. </author> <title> Efficient computation of in-terprocedural definition-use chains. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(2) </volume> <pages> 175-204, </pages> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: Several researchers have developed interprocedural reaching definitions data flow analysis techniques, even in the presence of aliasing in C programs <ref> [12, 6] </ref>. Although this analysis may find define-use pairs that may not ac tually occur during each execution of the program, the reaching definition information is sufficient for program testing.
Reference: [7] <author> B. Korel. </author> <title> Automated software test data generation. </title> <journal> IEEE Trans. on Soft. Eng., </journal> <volume> 16(8) </volume> <pages> 870-879, </pages> <month> Aug. </month> <year> 1980. </year>
Reference: [8] <author> M. S. Lam. </author> <title> Introduction to the SUIF compiler system. </title> <booktitle> In First SUIF Compiler Workshop, </booktitle> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: The static analyzer uses a modified version of the Grunwald and Srinivasan algorithm [5] to find du-pairs in parallel programs of this model, and is implemented using the compiler optimizer generating tool called nsharlit, which is part of the SUIF compiler infrastructure <ref> [8] </ref>. The path handler is built on top of dflo which is a data-flow equation visualizing tool developed at Oregon Graduate Institute. 2 The user interface of della pasta is illustrated in figure 7.
Reference: [9] <author> D. Long and L. Clarke. </author> <title> Data flow analysis of concurrent systems that use the rendezvous model of synchronization. </title> <type> Technical Report COINS 91-31, </type> <institution> University of Massachusetts, Dept of Computer Science, </institution> <month> July </month> <year> 1991. </year>
Reference-contexts: Then, the running time is equal to O (2 fl k fl jEj). Q.E.D. 7 Other Parallel Paradigms 7.1 Rendezvous communication Among other researchers, Long and Clarke developed a data flow analysis technique for concurrent programs <ref> [9] </ref>. After their data flow analysis is performed, we can apply a modified version of our algorithm to find all-du-path coverage for a concurrent program with rendezvous communication.
Reference: [10] <author> S. Morasca and M. Pezz e. </author> <title> Using high-level petri nets for testing concurrent and real-time systems. </title> <editor> In H. Zedan, editor, </editor> <booktitle> Real-Time Systems: Theory and Applications, Proceedings of the conference organized by the British Computer Society, </booktitle> <pages> pages 119-131. </pages> <address> Elsevier Science Publishings, </address> <year> 1990. </year>
Reference-contexts: Army Research Laboratory under Cooperative Agreement DAAL01-96-2-0002. programs is the nondeterministic nature of these programs. Some researchers have focused on solving this problem [13, 15], while others propose state-oriented program testing criteria for testing concurrent programs <ref> [14, 10] </ref>. Our hypothesis is that, with some extension, sequential test data adequacy criteria are still applicable to parallel program testing of various models of communication.
Reference: [11] <author> S. C. Ntafos and S. L. Hakimi. </author> <title> On path cover problems in digraphs and applications to program testing. </title> <journal> IEEE Trans. on Soft. Eng., </journal> <volume> 5(5) </volume> <pages> 520-529, </pages> <month> Sept. </month> <year> 1979. </year>
Reference-contexts: wait or vice versa, we expect that the compiler will report a warning message prior to the execution of our algorithm. 5 Related Work In the context of sequential programs, several researchers have examined the problems of generating test cases using path finding as well as finding minimum path coverage <ref> [3, 11, 1] </ref>. All of these methods for finding actual paths focus on programs without parallel programming features and, therefore, cannot be applied directly to finding all-du-path coverage for parallel programs.
Reference: [12] <author> H. D. Pande, W. Landi, and B. G. Ryder. </author> <title> Interprocedural def-use associations for C systems with single level pointers. </title> <journal> IEEE Trans. on Soft. Eng., </journal> <volume> 20(5), </volume> <year> 1994. </year>
Reference-contexts: Several researchers have developed interprocedural reaching definitions data flow analysis techniques, even in the presence of aliasing in C programs <ref> [12, 6] </ref>. Although this analysis may find define-use pairs that may not ac tually occur during each execution of the program, the reaching definition information is sufficient for program testing.
Reference: [13] <author> K. C. Tai. </author> <title> Testing of concurrent software. </title> <booktitle> In Proceedings of the 13th Annual International Computer Software and Applications Conference, </booktitle> <month> Sept. </month> <year> 1989. </year>
Reference-contexts: Army Research Laboratory under Cooperative Agreement DAAL01-96-2-0002. programs is the nondeterministic nature of these programs. Some researchers have focused on solving this problem <ref> [13, 15] </ref>, while others propose state-oriented program testing criteria for testing concurrent programs [14, 10]. Our hypothesis is that, with some extension, sequential test data adequacy criteria are still applicable to parallel program testing of various models of communication.
Reference: [14] <author> R. N. Taylor, D. L. Levine, and C. D. Kelly. </author> <title> Structural testing of concurrent programs. </title> <journal> IEEE Trans. on Soft. Eng., </journal> <volume> 18(3) </volume> <pages> 206-215, </pages> <month> Mar. </month> <year> 1992. </year>
Reference-contexts: Army Research Laboratory under Cooperative Agreement DAAL01-96-2-0002. programs is the nondeterministic nature of these programs. Some researchers have focused on solving this problem [13, 15], while others propose state-oriented program testing criteria for testing concurrent programs <ref> [14, 10] </ref>. Our hypothesis is that, with some extension, sequential test data adequacy criteria are still applicable to parallel program testing of various models of communication.
Reference: [15] <author> S. N. Weiss. </author> <title> A formal framework for studying concurrent program testing. </title> <booktitle> In Proceedings of the 4th Symposium on Testing, Analysis, and Verification, </booktitle> <pages> pages 106-113, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: Army Research Laboratory under Cooperative Agreement DAAL01-96-2-0002. programs is the nondeterministic nature of these programs. Some researchers have focused on solving this problem <ref> [13, 15] </ref>, while others propose state-oriented program testing criteria for testing concurrent programs [14, 10]. Our hypothesis is that, with some extension, sequential test data adequacy criteria are still applicable to parallel program testing of various models of communication.
Reference: [16] <author> E. J. Weyuker. </author> <title> The evaluation of program-based software test data adequacy criteria. </title> <journal> Communications of the ACM, </journal> <volume> 31(6) </volume> <pages> 668-675, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Message passing operations can be blocking or nonblocking. Shared memory parallel programming uses shared variables for communication, and event synchronization operations. In this paper, we focus on the applicability of one of the major testing criteria, all-du-path testing <ref> [16] </ref>, to both shared memory and message passing parallel programming. In particular, we examine the problem of finding all-du-path coverage for testing a parallel program. The ultimate goal is to be able to generate test cases automatically for testing programs adequately according to the all-du-path criteria.
Reference: [17] <author> C. Yang and L. L. Pollock. </author> <title> The challenges in automated testing of multithreaded programs. </title> <booktitle> In the 14th International Conference on Testing Computer Software, </booktitle> <pages> pages 157-166, </pages> <month> June </month> <year> 1997. </year>
Reference-contexts: web site http://www.cse.ogi.edu:80/Sparse/dflo.html for details. information already available through our static analyzer to answer queries of the following kind: Will the test case execute successfully without infinite wait caused by the path coverage? What other du-pairs does a particular path coverage cover? We are also incorporating our temporal testing techniques <ref> [17] </ref> into the tool in order to provide testing aid for delayed execution in addition to the traditional all-du-path testing. 9 Summary and Future Work To our knowledge, this is the first effort to apply a sequential testing criterion to shared memory or message passing parallel programs.
Reference: [18] <author> C.-S. D. Yang and L. L. Pollock. </author> <title> An algorithm for all-du-path testing coverage of shared memory parallel programs. </title> <booktitle> In Sixth Asian Test Symposium, </booktitle> <month> Nov. </month> <year> 1997. </year>
Reference-contexts: In our earlier paper, we focused strictly on the all-du-path finding algorithm <ref> [18] </ref>. We begin with a description of the graph representation of a parallel program used in our work. We then describe our testing paradigm and how we cope with the nondeterministic nature of parallel programs during the testing process.
Reference: [19] <author> C.-S. D. Yang and L. L. Pollock. </author> <title> Semi-automatic temporal testing for parallel programs. </title> <type> Technical Report 98-05, </type> <institution> U. of Delaware, Dept of CIS, </institution> <month> Sept. </month> <year> 1997. </year>
Reference-contexts: Instead, we advocate temporal testing for this stage of testing. We briefly describe our temporal testing paradigm here, and refer the reader to <ref> [19] </ref> for a more detailed description. Temporal testing alters the scheduled execution time of program segments in order to detect synchronization errors.
Reference: [20] <author> R.-D. Yang and C.-G. Chung. </author> <title> Path analysis testing of concurrent programs. </title> <journal> Information and Software Technology, </journal> <volume> 34(1) </volume> <pages> 43-56, </pages> <month> Jan. </month> <year> 1992. </year>
Reference-contexts: For instance, in Figure 3, an incorrect path coverage will be generated using the DT-IT approach alone. The final path will have de f ine 6 use. Thus, using this method alone cannot guarantee that we find a PAT H a . Yang and Chung <ref> [20] </ref> proposed a model to represent the execution behavior of a concurrent program, and described a test execution strategy, testing process and a formal analysis of the effectiveness of applying path analysis to detect various faults in a concurrent program.
References-found: 20

