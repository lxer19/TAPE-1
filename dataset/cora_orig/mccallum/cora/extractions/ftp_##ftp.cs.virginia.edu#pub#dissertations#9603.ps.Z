URL: ftp://ftp.cs.virginia.edu/pub/dissertations/9603.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/dissertations/README.html
Root-URL: http://www.cs.virginia.edu
Title: A Dissertation  Specification and Verification of Security Policies  
Author: Ramesh V. Peri 
Degree: Presented to the Faculty of the School of Engineering and Applied Science at the University of Virginia In Partial Fulfillment of the Requirements for the Degree Doctor of Philosophy (Computer Science)  
Date: January 1996  
Note: by  
Abstract-found: 0
Intro-found: 1
Reference: [AL90] <author> Abadi, M., Lamport, L., </author> <title> 'Composing Specifications', </title> <type> DEC-SRC Technical Report 66, </type> <year> 1990. </year>
Reference-contexts: In this work, a property is said to hold for a system only if the set of traces of the system is a subset of the set of traces that characterize the property. Based on this notion of a system and its property, Abadi and Lamport <ref> [AL90] </ref> gave a composition principle that can be used to determine whether a composite system satisfies some property from the properties of its components. An important restriction on this composition principle is that it is applicable only to properties of individual traces.
Reference: [AMM92] <author> Amman, P. E., Sandhu, R. S., </author> <title> 'The Extended Schematic Protection Model', </title> <journal> Journal of Computer Security, </journal> <volume> Vol 1, nos 3, 4, </volume> <year> 1992. </year>
Reference-contexts: A number of access control models have been proposed that differ from each other in the state changing rules. These models include HRU model [HAR76], SPM model [SAN88], take-grant model [SNY81], ESPM model <ref> [AMM92] </ref>, grammatical protection models [SNY81], CPD model [BAA90], Typed Access Matrix model [SAN92], and Transform model [SAN89]. <p> Access control models were first described by Lampson in [LAM74]. Later, a number of models were proposed that differ in expressive power and decidability of safety; these include the HRU model [HAR76], take-grant model [SNY81], Grammatical protection models [SNY81], Schematic Protection model [SAN88], Extended Schematic Protection model <ref> [AMM92] </ref>, and Typed Access Matrix model [SAN92]. Although a number of interesting results about the question of safety exist with respect to these models, none of them have been used in practice to analyze the safety of the protection mechanisms of large scale systems.
Reference: [AP92] <author> Abadi, M., Plotkin, G. D., </author> <title> 'A Logical View of Composition', </title> <type> Digital Technical Report 86, </type> <year> 1992. </year>
Reference: [AS85] <author> Alpern, B., Schneider, F., </author> <title> 'Defining Liveness', </title> <journal> Information Processing Letters, </journal> <month> October </month> <year> 1985. </year>
Reference-contexts: Considerable work has been done to investigate the properties of information ow predicates under different composition constructs. An important work in this area is that of Alpern and Schneider <ref> [AS85] </ref> who define both the property and a system as a set of behavior sequences (referred to as traces).
Reference: [BAD89] <author> Badger, L., </author> <title> 'A Model for Specifying Multi-Granularity Integrity Policies', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> July </month> <year> 1989. </year>
Reference: [BAA90] <author> Benson, G. S., Akyildiz, I. F., Appelbe, W. F., </author> <title> 'A Formal Protection Model of Security in Centralized, Parallel and Distributed Systems', </title> <journal> ACM transactions on Computer Systems, </journal> <month> August </month> <year> 1990. </year>
Reference-contexts: A number of access control models have been proposed that differ from each other in the state changing rules. These models include HRU model [HAR76], SPM model [SAN88], take-grant model [SNY81], ESPM model [AMM92], grammatical protection models [SNY81], CPD model <ref> [BAA90] </ref>, Typed Access Matrix model [SAN92], and Transform model [SAN89].
Reference: [BEL88] <author> Bell, D.E., </author> <title> 'Concerning Modeling of Computer Security', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1988. </year>
Reference-contexts: In response <ref> [BEL88] </ref>, it was argued that the BLP model is in fact correct as defined due to the presence of the tranquility principle which states that the levels of active entities cannot change.
Reference: [BIS84] <author> Bishop, M., </author> <title> 'Practical take-grant systems: Do they exist?', </title> <type> Ph.D Dissertation, </type> <institution> Purdue University, </institution> <month> May </month> <year> 1984. </year>
Reference: [BIS91] <author> Bishop, M., </author> <title> 'Theft of Information in Take-Grant Protection Model', </title> <note> Dart-mouth Technical Report 1991. </note>
Reference: [BKY85] <author> Boebert, W. E., Kain, R. Y., Young, W. D., Hanson, S. A., </author> <title> 'Secure ADA Target: Issues, System Design and Verification', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <year> 1985, </year> <pages> pp 176-183. </pages>
Reference-contexts: For example, the MLS policy is a generic policy that is used primarily in military systems but no system enforces it exactly as defined in the literature. Major military information systems, such as CMW [CFG87], MMS [MCL84] and LOCK <ref> [BKY85] </ref>, enforce policies that resemble the MLS policy at a very high level of abstraction. In these systems, the specification of the security policy is not independent of functional description of the system.
Reference: [BL74] <author> Bell, D. E., LaPadula, L. J., </author> <title> 'Secure Computer Systems', </title> <type> Tech Rep. ESD-TR-73-278, vols 1-3, </type> <institution> MITRE, </institution> <year> 1974. </year> <note> Bibliography 156 </note>
Reference-contexts: Ideally, the policy specification language should be independent of the access control model and the mapping between them should define the security requirements of the system under consideration. The Bell and LaPadula model (BLP) <ref> [BL74] </ref> is an access control security model that enforces the MLS policy by the following two restrictions on the actions of the entities: An entity cannot read an entity at a higher level than itself (no read-up) and An entity cannot write to an entity at a lower level than itself
Reference: [BN89] <author> Brewer, D. F. C., Nash, M. J., </author> <title> 'The Chinese Wall Security Policy', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> July </month> <year> 1989. </year>
Reference-contexts: Another policy that is common in commercial applications is called the Chinese-Wall policy <ref> [BN89] </ref>. In this policy, entities are divided into conict of interest class sets, and information is allowed to ow from an entity to at most one entity belonging to a conict of interest class set. <p> A number of security policies have been proposed in the literature such as the MLS policy [BL73], the Chinese Wall security policy <ref> [BN89] </ref> and the Clarke-Wilson A policy is a temporary creed liable to be changed, but while it holds good it has to be pursued with apostolic zeal - Mohandas K . Gandhi Chapter 3: Formal Specification of Information Flow Policies 49 Commercial security policy [CW87].
Reference: [CFG87] <author> Cummings, P. T., Fullam, D. A., Goldstein, M. J., Gosselin, M. J., Picciotto, J., Woodward, J. P. L., Wynn, J., </author> <title> 'Compartmented Mode Workstation: Results through prototyping', </title> <booktitle> Proceedings of the IEEE Symposium of Security and Privacy, </booktitle> <year> 1987. </year>
Reference-contexts: These policies, as defined, are representatives of a class of policies. For example, the MLS policy is a generic policy that is used primarily in military systems but no system enforces it exactly as defined in the literature. Major military information systems, such as CMW <ref> [CFG87] </ref>, MMS [MCL84] and LOCK [BKY85], enforce policies that resemble the MLS policy at a very high level of abstraction. In these systems, the specification of the security policy is not independent of functional description of the system.
Reference: [CHE81] <author> Cheheyl, M., et. al., </author> <title> 'Verifying Security', </title> <journal> Computer Surveys, </journal> <month> September </month> <year> 1981. </year>
Reference-contexts: Security verification is inuenced by the work in program verification. A number of systems that resemble programming languages have been proposed to specify the design of information systems. Some such systems are Gypsy <ref> [CHE81] </ref>, InaJo [CHE81], and SPECIAL [CHE81]. These languages are part of larger environments that contain verification condition generators that perform information ow analysis on the specification and generate conditions for enforcement of MLS Policy, and a theorem prover used to prove the conditions generated by the verification condi tion generator. <p> Security verification is inuenced by the work in program verification. A number of systems that resemble programming languages have been proposed to specify the design of information systems. Some such systems are Gypsy <ref> [CHE81] </ref>, InaJo [CHE81], and SPECIAL [CHE81]. These languages are part of larger environments that contain verification condition generators that perform information ow analysis on the specification and generate conditions for enforcement of MLS Policy, and a theorem prover used to prove the conditions generated by the verification condi tion generator. <p> Security verification is inuenced by the work in program verification. A number of systems that resemble programming languages have been proposed to specify the design of information systems. Some such systems are Gypsy <ref> [CHE81] </ref>, InaJo [CHE81], and SPECIAL [CHE81]. These languages are part of larger environments that contain verification condition generators that perform information ow analysis on the specification and generate conditions for enforcement of MLS Policy, and a theorem prover used to prove the conditions generated by the verification condi tion generator.
Reference: [CUM91] <author> Cumming, J. G., </author> <booktitle> 'On Refinement of Non-Interference', Proceedings of the IEEE Symposium of Security and Privacy, </booktitle> <year> 1991. </year>
Reference: [CUP93] <author> Cuppens, F., </author> <title> 'A Logical Analysis of Authorized and Prohibited Information Flows', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <year> 1993. </year>
Reference-contexts: Informal specification of security policies can result in ambiguities and misinterpretations. Therefore, formal specification methods based on predicate calculus Chapter 1: Introduction 23 [FOL88a] and modal logic <ref> [CUP93] </ref> have been developed for precisely specifying these policies. In Chapter 3 we develop an alternate framework based on partial order temporal logic for specifying the security policies that is more expressive than the ones found in the literature. <p> This approach has been used in <ref> [CUP93] </ref> for specifying security policies. 3.4.1.1 The Model A system is modeled as &lt;O, D, T, S, A&gt; where Chapter 3: Formal Specification of Information Flow Policies 63 O is the set of Objects. D is the domain of the values of objects. T is the set of time points. <p> The above logic can be used to express different kinds of security policies by identifying a group of formulas that possess certain properties. Some of the groups identified in <ref> [CUP93] </ref> are: Right (A, s, t) contains formulas whose truth value must be known to role A i.e., for every formula y in Right (A, s, t), K A,t y should be true in s. This is used to express policies like the MLS and Chinese Wall policies. <p> Prohib (A, s, t) contains formulas whose truth value should not be known to role A i.e., for every formula y in Prohib (A, s, t), (K A,t y K A,t ( y)) should be true in s. 3.4.1.3 Comparison In the modal logic approach of <ref> [CUP93] </ref>, the notion of time is explicitly present in the model, whereas in a temporal logic based approach it is captured by the temporal operators. <p> In the case where the lifetime of the system is infinite it may even be impossible to enumerate them. One of the drawbacks of the approach in <ref> [CUP93] </ref> is that it cannot be used to specify security policies where only part of a trace must satisfy a certain property. <p> In our formalism the above policy requirement can be easily specified as In <ref> [CUP93] </ref>, policies are specified by grouping formulas into sets that have to satisfy some modal properties. For example, the sets Right and Prohib mentioned in the previous section are used to specify the policies that contain explicit permission and prohibition of information ow requirements.
Reference: [CW87] <author> Clark, D. D., Wilson, D. R., </author> <title> 'A Comparison of Commercial and Military Computer Security Policies', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> April </month> <year> 1987. </year>
Reference-contexts: Gandhi Chapter 3: Formal Specification of Information Flow Policies 49 Commercial security policy <ref> [CW87] </ref>. These policies, as defined, are representatives of a class of policies. For example, the MLS policy is a generic policy that is used primarily in military systems but no system enforces it exactly as defined in the literature.
Reference: [DEN76] <author> Denning, D., </author> <title> 'A Lattice Model of Secure Information Flow', </title> <journal> Communications of the ACM, </journal> <month> May </month> <year> 1976. </year>
Reference-contexts: This notion of information ow was first proposed by Denning <ref> [DEN76] </ref> whose definition can be phrased as information is said to ow from object a to object b if the value of object b some how depends on the value of object a. <p> Information ow security policies are specified as restrictions on the information ows that can occur between different information classes. These policies can be enforced by a lattice model of information ow which is defined below. Definition: A Lattice model of information ow <ref> [DEN76] </ref> consists of a set of labels with an ordering relation that forms a lattice (hence the name) and information is allowed to ow from an entity labeled A to an entity labeled B if the label A is less than label B in the ordering relation of the lattice.
Reference: [DEN83] <author> Denning, D., </author> <title> 'Cryptography and Data Security', </title> <publisher> Addison Wesley, </publisher> <year> 1983. </year>
Reference-contexts: In a lattice model, the number of labels is finite and is decided at the system design time. But the assignment of labels to the entities can be <ref> [DEN83] </ref> static which means that the labels associated with the entities do not change as a result of state changes in the system, or dynamic which means that the labels can change as a result of state changes in the system.
Reference: [DL88] <author> Denning, D. R., Lunt, T. F., </author> <title> 'The SeaView Security Model', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1988. </year>
Reference: [DOB89] <author> Dobson, J.E., McDermid, J. A., </author> <title> 'A Framework for Expressing Models of Security Policy', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> July </month> <year> 1989. </year>
Reference: [DOW85] <author> Downs, D. D., et. al.,' </author> <title> Issues in Discretionary Access Control', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> April </month> <year> 1985. </year>
Reference: [FAR90] <author> Farmer, D., Spafford, E. H., </author> <title> 'The COPS Security Checker System', </title> <booktitle> Proceedings of the summer 1990 USENIX Conference, </booktitle> <month> June </month> <year> 1990. </year>
Reference: [FIN90] <author> Fine, T., </author> <title> 'Constructively Using Noninterference to Analyze Systems', </title> <booktitle> Proceedings of the IEEE Conference on Security and Privacy, </booktitle> <year> 1990. </year>
Reference: [FOL89a] <author> Foley, S. N., </author> <title> 'A Model for Secure Information Flow', </title> <booktitle> Proceedings of the IEEE Conference on Security and Privacy, </booktitle> <month> July </month> <year> 1989. </year>
Reference-contexts: A A Bfi ( ) A B Cfi ( )( )fi ( ) Chapter 3: Formal Specification of Information Flow Policies 66 3.4.2 Operator Based Model A model for specifying information ow policies that contain information classes and a set of information ow operators, has been proposed in <ref> [FOL89a] </ref>. <p> However, the class of information ow policies that can be expressed using the above approach is limited due to the small number of information ow operators. For example, there is no way of expressing a policy requirement such as using the two information operators defined in <ref> [FOL89a] </ref>. An underlying assumption in the approach of [FOL89b] is that information ow policies are specified as sets of allowed information ows. In practice, this is not usually the case.
Reference: [FOL89b] <author> Foley, S. N., </author> <title> 'A Taxonomy of Information Flow Policies', </title> <booktitle> Proceedings of the IEEE Conference on Security and Privacy, </booktitle> <month> July </month> <year> 1989. </year>
Reference-contexts: Based on this model a taxonomy of information ow policies is developed in <ref> [FOL89b] </ref>. 3.4.2.1 The Model The security model consists of a set of Information classes C and Information ow operators FO = -fi, , - (a fi b) means information can ow from class a to class b, (A a) means information can ow from any subset of A to class a, <p> Example 3.7: The Multi-Level security policy can be specified as follows: The information classes are -Top-Secret, Secret, Classified, Un-Classified-. The policy formulas are: Chapter 3: Formal Specification of Information Flow Policies 67 (-Un-classified- Classified) (-Un-classified, classified- Secret) (-Un-classified, Classified, Secret- Top-Secret) <ref> [FOL89b] </ref> identifies different classes of information policies such as an separation policy that satisfies the following condition "A1, A2, a ((((A1 a) P) ((A2 a) P)) fi ((A1 A2) a) P)) an aggregation policy that satisfies the following condition "A1, A2, a ((A1 A2) a) P)) fi (((A1 a) P) ((A2 <p> ((((A1 a) P) ((A2 a) P)) fi ((A1 A2) a) P)) an aggregation policy that satisfies the following condition "A1, A2, a ((A1 A2) a) P)) fi (((A1 a) P) ((A2 a) P)) Other kinds of policies which are referred to as quasi-ordered policies and reexive policies are identified in <ref> [FOL89b] </ref>. [FOL89b] also gives a high water mark mechanism for implementing different kinds of policies by converting the policies into a lattice. 3.4.2.3 Comparison The work in [FOL89b] is the first attempt at classifying the information ow policies and proposing a taxonomy for them. <p> a) P) ((A2 a) P)) fi ((A1 A2) a) P)) an aggregation policy that satisfies the following condition "A1, A2, a ((A1 A2) a) P)) fi (((A1 a) P) ((A2 a) P)) Other kinds of policies which are referred to as quasi-ordered policies and reexive policies are identified in <ref> [FOL89b] </ref>. [FOL89b] also gives a high water mark mechanism for implementing different kinds of policies by converting the policies into a lattice. 3.4.2.3 Comparison The work in [FOL89b] is the first attempt at classifying the information ow policies and proposing a taxonomy for them. <p> (((A1 a) P) ((A2 a) P)) Other kinds of policies which are referred to as quasi-ordered policies and reexive policies are identified in <ref> [FOL89b] </ref>. [FOL89b] also gives a high water mark mechanism for implementing different kinds of policies by converting the policies into a lattice. 3.4.2.3 Comparison The work in [FOL89b] is the first attempt at classifying the information ow policies and proposing a taxonomy for them. However, the class of information ow policies that can be expressed using the above approach is limited due to the small number of information ow operators. <p> For example, there is no way of expressing a policy requirement such as using the two information operators defined in [FOL89a]. An underlying assumption in the approach of <ref> [FOL89b] </ref> is that information ow policies are specified as sets of allowed information ows. In practice, this is not usually the case. Most of the security policies in the literature MLS policy, Chinese Wall policy are specified in terms of disallowed information ows. <p> We use the taxonomy of the information ow policies that was first investigated in <ref> [FOL89b] </ref> to develop these labeling mechanisms. Information ow security policies are specified as restrictions on the information ows that can occur between different information classes. These policies can be enforced by a lattice model of information ow which is defined below.
Reference: [FOL90] <author> Foley, S. N., </author> <title> 'Secure Information Flow Using Security Groups', </title> <booktitle> Proceedings of the Computer Security Foundations Workshop III, </booktitle> <month> June </month> <year> 1990. </year> <note> Bibliography 157 </note>
Reference: [GJ79] <author> Garey, M. R., Johnson, D. S., </author> <title> 'Computers and Intractability: A Guide to the Theory of NP-Completeness', W H Freeman, </title> <year> 1979. </year>
Reference-contexts: It means that we need to find a graph G = (V, X) where X X such that G is transitive. This problem has been shown to be NP-Complete <ref> [GJ79] </ref>. But since the total number of information classes is fairly small this is not a great concern in the system design. 5.5.2.2 Intransitive Policies An information ow policy whose policy statements are of the form where A, B and C are the information classes is called an intransitive policy.
Reference: [GM82] <author> Goguen, J. A., Meseguer, J., </author> <title> 'Security Policies and Security Models', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> April </month> <year> 1982. </year>
Reference-contexts: The last thing one discovers in composing a work is what to put first - Blaise Pascal Chapter 2: Composition Properties of Information Flow Predicates 26 For example, Noninterference is an information ow predicate proposed by Goguen and Meseguer <ref> [GM82] </ref> that has been used quite extensively in security models. It defines a system to be secure if high-level users cannot inuence the behavior of low-level users when the policy mandates that information should not ow from high-level users to low-level users.
Reference: [GM84] <author> Goguen, J. A., Meseguer, J., </author> <title> 'Unwinding and Inference Control', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> April </month> <year> 1984. </year>
Reference-contexts: These predicates are defined in terms of the traces of a system, where a trace is a possible sequence of inputs and outputs that characterize the operations of the system. One of the earliest and most fi Chapter 1: Introduction 17 popular information ow predicates is Noninterference <ref> [GM84] </ref> which states that information ows from entity a to entity b if the inputs of entity a can affect either the inputs or the outputs of entity b.
Reference: [GM87] <author> Glasgow, J.I., MacEwen, </author> <title> G.H., 'The Development and Proof of a Formal Specification for a Multilevel Secure System', </title> <journal> ACM Transactions on Computer Systems, </journal> <month> May </month> <year> 1987. </year>
Reference: [GM88] <author> Glasgow, J. I., MacEwen, G. H., </author> <title> 'Reasoning About Knowledge in Multilevel Secure Distributed Systems', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1988. </year>
Reference: [GM90] <author> Glasgow, J., MacEwen, G., </author> <title> 'A Logic for Reasoning About Security', </title> <booktitle> Proceedings of the Computer Security Foundations Workshop III, </booktitle> <month> June </month> <year> 1990. </year>
Reference: [GMP93] <author> Glasgow, J., MacEwen, G., </author> <title> 'A Logic for Reasoning About Security', </title> <journal> ACM Transactions in Computer Systems, </journal> <year> 1993. </year>
Reference-contexts: This sort of specification is more difficult to develop since the specifier has to be cognizant of the subtleties of the underlying trace semantics of the modal operators. Another approach based on modal logic is the logic of security <ref> [GMP93] </ref>, in which policies are specified by the modal operators P (permission) and O (obligation) as well as the afore mentioned K (knowledge) operator. Here, P is used to specify the secrecy policies and O is used to specify the integrity policies.
Reference: [HAR76] <author> Harrison, M., et al, </author> <title> 'Protection in Operating Systems', </title> <journal> Communications of the ACM, </journal> <month> August </month> <year> 1976. </year>
Reference-contexts: A number of access control models have been proposed that differ from each other in the state changing rules. These models include HRU model <ref> [HAR76] </ref>, SPM model [SAN88], take-grant model [SNY81], ESPM model [AMM92], grammatical protection models [SNY81], CPD model [BAA90], Typed Access Matrix model [SAN92], and Transform model [SAN89]. <p> The state transitions occur non-deterministically provided the appropriate access rights are present. Security analysis in these systems is concerned with the reachability of a state from the initial state. This is referred to as the Question of Safety and was shown to be undecidable in the general case <ref> [HAR76] </ref>. Access control models were first described by Lampson in [LAM74]. Later, a number of models were proposed that differ in expressive power and decidability of safety; these include the HRU model [HAR76], take-grant model [SNY81], Grammatical protection models [SNY81], Schematic Protection model [SAN88], Extended Schematic Protection model [AMM92], and Typed <p> is referred to as the Question of Safety and was shown to be undecidable in the general case <ref> [HAR76] </ref>. Access control models were first described by Lampson in [LAM74]. Later, a number of models were proposed that differ in expressive power and decidability of safety; these include the HRU model [HAR76], take-grant model [SNY81], Grammatical protection models [SNY81], Schematic Protection model [SAN88], Extended Schematic Protection model [AMM92], and Typed Access Matrix model [SAN92]. <p> The safety question in this model is the reachability of a specified state from the initial state with a given set of commands. It was shown in <ref> [HAR76] </ref> that this safety question is undecidable. The Schematic Protection model (SPM) is a restricted form of HRU model where the entities are associated with types (not just Subject and Object as in HRU model) and the operations are limited to creation of new entities and copying of rights.
Reference: [HAR85] <author> Harrison, M., </author> <title> 'Theoretical Issues Concerning Protection in Operating Systems', </title> <booktitle> Advances in Computers, </booktitle> <address> v24, </address> <year> 1985. </year>
Reference: [JAC88] <author> Jacob, J., </author> <title> 'Security Specifications', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1988. </year>
Reference: [JL78] <author> Jones, A. and Lipton, R., </author> <title> 'The Enforcement of Security Policies for Computation', </title> <journal> Journal of Computer and Systems Sciences, </journal> <month> August </month> <year> 1978. </year>
Reference: [JON78] <author> Jones, A., </author> <title> 'Protection Mechanism Models: Their Usefulness', Foundations of Secure Computation, </title> <publisher> Academic Press, </publisher> <year> 1978. </year>
Reference-contexts: members are essentially ascetic and indifferent in social rituals has to be provided with blue prints and specifications for evoking the right form for every occasion - Marshall McLuhan Chapter 4: Specification of Security Critical Systems 70 card reader daemon could install a Trojan horse in a user file space <ref> [JON78] </ref>. Although security holes similar to the one in Multics have been found in modern operating systems, access control models had very little role in discovering them.
Reference: [JT88] <author> Johnson, </author> <title> D.M., Thayer, F.J., 'Stating Security Requirements with Tolerable Sets', </title> <journal> ACM Transactions on Computer Systems, </journal> <month> August </month> <year> 1988. </year>
Reference: [KL85] <author> Kain, R. Y., Landwehr, C. E., </author> <title> 'On Access Checking in Capability based systems', </title> <booktitle> Proceedings of the Symposium on Security and Privacy, </booktitle> <year> 1985. </year>
Reference: [LAM74] <author> Lampson, B., </author> <title> 'Protection', </title> <booktitle> Proceedings of the 5th Symposium on Operating Systems, </booktitle> <month> January </month> <year> 1974. </year>
Reference-contexts: Security analysis in these systems is concerned with the reachability of a state from the initial state. This is referred to as the Question of Safety and was shown to be undecidable in the general case [HAR76]. Access control models were first described by Lampson in <ref> [LAM74] </ref>. Later, a number of models were proposed that differ in expressive power and decidability of safety; these include the HRU model [HAR76], take-grant model [SNY81], Grammatical protection models [SNY81], Schematic Protection model [SAN88], Extended Schematic Protection model [AMM92], and Typed Access Matrix model [SAN92].
Reference: [LAM93] <author> Lamport, L., </author> <title> Temporal Logic of Actions, </title> <note> DEC-SRC Research Report 79, </note> <year> 1993. </year>
Reference-contexts: A framework for carrying out this verification will be developed in next chapter. 4.6 Related Work The framework that we presented in this chapter for specification of the traces has some similarities to the Temporal Logic of Actions (TLA) <ref> [LAM93] </ref> that is used for specifying and reasoning about concurrent systems. In this section we compare our framework with TLA. 4.6.1 Temporal Logic of Actions (TLA) TLA is a logic for specifying and reasoning about concurrent programs. <p> In order to prove that a temporal property P is true about a program it is required to prove that If this statement is valid then the program which represents the antecedent satisfies the property P. A set of rules were given in <ref> [LAM93] </ref> that can be used to prove statements of the above form depending on the structure of property P. 4.6.2 Comparison TLA uses temporal logic to specify both programs and properties which is very appealing from the point of view of verification but it allows one to assume properties that may
Reference: [LAN81] <author> Landwehr, C., </author> <title> 'Formal Models for Computer Security', </title> <journal> Computing Surveys, </journal> <note> Bibliography 158 September 1981. </note>
Reference-contexts: This least restrictive policy is denoted by ^. 3.2.3 Formal Specification of Security Policies In this section we formally specify some common security policies using the language that was developed in the previous section. Example 3.1: In the classic Multi-Level security policy <ref> [LAN81] </ref>, there are some number of information classes over which a partial order is defined. Information is permitted to ow between two classes only if they are properly ordered with respect to one another. <p> These models were used in the design of secure operating systems such as the UCLA Data Secure Unix [WAL80], and PSOS <ref> [LAN81] </ref>. <p> These are: Abstraction mechanisms, Security Analysis, and Policy Specification. In the following sections we elaborate on each of these issues by means of examples. 4.2.1 Abstraction Mechanisms Access control models were initially proposed to model the protection of main memory between processes in multi-programmed systems <ref> [LAN81] </ref>. The advent of timesharing and networking changed the protection landscape drastically, but access control models have not changed to accommodate these developments. Modern operating systems are complicated, with diverse features that affect the protection state in a number of ways.
Reference: [LEE88] <author> Lee, T. M. P., </author> <title> 'Using Mandatory Integrity to Enforce Commercial Security', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1988. </year>
Reference: [LIP82] <author> Lipner, S. B., </author> <title> 'Non-Discretionary Controls for Commercial Applications', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <year> 1982. </year>
Reference: [LS77] <author> Lipton, R and Snyder, L., </author> <title> 'A Linear Time Algorithm for Deciding Subject Security', </title> <journal> Journal of the ACM, </journal> <month> July </month> <year> 1977. </year>
Reference: [MCC87] <author> McCullough, D., </author> <title> 'Specifications for Multi-level Security and Hook-Up Property', </title> <booktitle> Proceedings of the IEEE Symposium of Security and Privacy, </booktitle> <year> 1987. </year>
Reference-contexts: A number of other information ow predicates such as Restrictiveness <ref> [MCC87] </ref>, Nondeducibility [SUT86], Separability [MCL94], Nondeducibility on Strategies [WJ90] have been defined that capture different notions of information ow. <p> The simple and elegant specification made Noninterference a basis for a general theory of security. Later, a number of other information ow predicates were proposed such as Nondeducibility [SUT86], Restrictiveness <ref> [MCC87] </ref>, Noninference [MCL94]. These predicates tried to take into account non-deterministic systems, more prevalent in the real world. An important difference between these predicates is their composition property i.e., whether a system obtained by composing two systems satisfying the security property also satisfies that property. <p> We propose a different framework for specifying the possibilistic security properties based on many-sorted predicate logic; this framework can also be used to specify the composition constructs. A drawback of selective interleaving functions is that they cannot be used to express security predicates such as McCulloughs Generalized Noninterference <ref> [MCC87] </ref> in an elegant manner [MCL87]. This is because the interleaved trace in Generalized Noninterference is constructed by different functions for different parts of the input traces.
Reference: [MCC88] <author> McCullough, D., </author> <title> 'Noninterference and the Composability of Security Properties', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1988. </year>
Reference: [MCL84] <author> McLean, J., et. al, </author> <title> 'A Formal Statement of the MMS Security Model', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> April </month> <year> 1984. </year>
Reference-contexts: In this chapter we develop an alternative method to the one presented in [MCL94] for specifying and reasoning about the composition properties of the information ow predicates that is amenable to automatic theorem proving. 2.2 Composition Properties of Information Flow Predicates In this section we present the trace model <ref> [MCL84] </ref> and describe McLeans approach to specifying and reasoning about the composition properties of information ow predicates. <p> These policies, as defined, are representatives of a class of policies. For example, the MLS policy is a generic policy that is used primarily in military systems but no system enforces it exactly as defined in the literature. Major military information systems, such as CMW [CFG87], MMS <ref> [MCL84] </ref> and LOCK [BKY85], enforce policies that resemble the MLS policy at a very high level of abstraction. In these systems, the specification of the security policy is not independent of functional description of the system.
Reference: [MCL87] <author> McLean, J., </author> <title> 'Reasoning about Security Models', </title> <booktitle> Proceedings of the IEEE Symposium of Security and Privacy, </booktitle> <year> 1987. </year>
Reference-contexts: A drawback of selective interleaving functions is that they cannot be used to express security predicates such as McCulloughs Generalized Noninterference [MCC87] in an elegant manner <ref> [MCL87] </ref>. This is because the interleaved trace in Generalized Noninterference is constructed by different functions for different parts of the input traces. In our method, reasoning about composition of different security properties is straightforward and intuitive since we can use the rich and powerful logical formalism of predicate logic. <p> the MLS policy by the following two restrictions on the actions of the entities: An entity cannot read an entity at a higher level than itself (no read-up) and An entity cannot write to an entity at a lower level than itself (no write-down), This model was criticized by McLean <ref> [MCL87] </ref> because it includes systems that are insecure according to the MLS policy a system containing an operation that changes the levels of all the entities to a single level.
Reference: [MCL88] <author> McLean, J., </author> <title> 'The Algebra of Security', </title> <booktitle> Proceedings of the IEEE Symposium of Security and Privacy, </booktitle> <year> 1988. </year>
Reference: [MCL90] <author> McLean, J., </author> <title> 'Security Models and Information Flow', </title> <booktitle> Proceedings of the IEEE Conference on Security and Privacy, </booktitle> <year> 1990. </year>
Reference: [MCL94] <author> McLean, J, </author> <title> 'A general Theory of Composition for Trace Sets Closed Under Selective Interleaving Functions', </title> <booktitle> Proceedings of the IEEE Symposium on Research in Security and Privacy, </booktitle> <year> 1994. </year>
Reference-contexts: A number of other information ow predicates such as Restrictiveness [MCC87], Nondeducibility [SUT86], Separability <ref> [MCL94] </ref>, Nondeducibility on Strategies [WJ90] have been defined that capture different notions of information ow. <p> An important restriction on this composition principle is that it is applicable only to properties of individual traces. Unfortunately, the Abadi-Lamport composition is not applicable to information ow predicates since they are not properties of traces but properties of sets of traces <ref> [MCL94] </ref>. Therefore a composition principle, or at least a framework, that can be used to reason about composite systems built out of components that satisfy some information ow property is required. <p> The first task has been extensively dealt with in the literature resulting in a number of information ow predicates. An important aspect that has been extensively studied is the composition of each predicate with itself. In <ref> [MCL94] </ref>, McLean developed a framework based on set theory for reasoning about the composition of an information ow predicate with any other predicate. <p> The simple and elegant specification made Noninterference a basis for a general theory of security. Later, a number of other information ow predicates were proposed such as Nondeducibility [SUT86], Restrictiveness [MCC87], Noninference <ref> [MCL94] </ref>. These predicates tried to take into account non-deterministic systems, more prevalent in the real world. An important difference between these predicates is their composition property i.e., whether a system obtained by composing two systems satisfying the security property also satisfies that property. <p> Although considerable work has been done on the composition properties of each of these information ow predicates with themselves, few results exist about their composition with each other. An important work in this area is that of McLean <ref> [MCL94] </ref>. In this chapter we develop an alternative method to the one presented in [MCL94] for specifying and reasoning about the composition properties of the information ow predicates that is amenable to automatic theorem proving. 2.2 Composition Properties of Information Flow Predicates In this section we present the trace model [MCL84] <p> An important work in this area is that of McLean <ref> [MCL94] </ref>. In this chapter we develop an alternative method to the one presented in [MCL94] for specifying and reasoning about the composition properties of the information ow predicates that is amenable to automatic theorem proving. 2.2 Composition Properties of Information Flow Predicates In this section we present the trace model [MCL84] and describe McLeans approach to specifying and reasoning about the composition properties of information <p> Without loss of generality, we will consider a simpler system where there are only two inputs lin and hin (which denote low-input and high-input) and two outputs lout and hout (which stands for low-output and high-output) <ref> [MCL94] </ref>. This assumption means that the state space is a set of a tuples of the form (lout, lin, hout, hin) where lout, lin, hout and hin are the values of the state variables hin, lin, hout and lout that range over -0, 1-. <p> Unfortunately, the Abadi and Lamport composition principle mentioned in Section 1.1.1.3 cannot be applied to information ow properties, since they do not fall in the class of functional properties [PW94] <ref> [MCL94] </ref>. Therefore a different composition principle needs to be developed that can be applied to possibilistic properties in general and information ow properties in particular. 2.2.2 McLeans Framework McLean [MCL94] developed a framework to reason about the composition properties of information ow predicates based on an informal notation. <p> Section 1.1.1.3 cannot be applied to information ow properties, since they do not fall in the class of functional properties [PW94] <ref> [MCL94] </ref>. Therefore a different composition principle needs to be developed that can be applied to possibilistic properties in general and information ow properties in particular. 2.2.2 McLeans Framework McLean [MCL94] developed a framework to reason about the composition properties of information ow predicates based on an informal notation. In this approach, information ow predicates, which fall under the category of possibilistic security properties, are expressed as closure properties of functions called selective interleaving functions. <p> In the above statement, the conditions that involve i1, i2, j1, j2, i, j is of the form (i = i1 = i2) and (j = j1 = j2). In <ref> [MCL94] </ref>, McLean enumerates these conditions for the composition properties of the information ow predicates. <p> The information ow predicates, can be expressed as an implication of the form where A and B are formulae as defined earlier (ignoring the universal quantifiers). In fact, a selective interleaving function of the type F (&lt;1,2&gt;, &lt;1,2&gt;) of <ref> [MCL94] </ref> can be expressed in this algebraic notation as The above formula means that, if there are two traces x and y in a system S then there is a trace p in S where trace p has the same high-level behavior as trace x and the same low-level behavior as <p> Definition: A property X is said to be weaker than the property Y if is a valid formula. From the above definition we can see that Generalized Noninterference is weaker than Separability. In fact, the following partial order specified in <ref> [MCL94] </ref> can be easily derived from the above definitions. x y S p ( ) LOUT p ( ) LOUT x ( )=( ) LIN p ( ) LIN x ( )=( ) HIN p ( ) HIN y ( )=( ) "" Separability Generalized Noninterference Noninference Generalized Noninference Chapter 2: <p> Also prove that the set of traces S in S implies that Q is true in system S. It should be noted that the above method is a generalization of a number of proofs given in <ref> [MCL94] </ref> for composition theorems for a variety of composition constructs and A Bfi ( ) P Qfi ( ) A Bfi ( ) R Tfi ( ) Chapter 2: Composition Properties of Information Flow Predicates 43 that they can all be derived using the above approach. <p> The traces r and s in S imply that it satisfies Generalized Noninterference. All the other theorems about the properties of composition constructs in <ref> [MCL94] </ref> can be proved in a systematic manner using the above approach. x12 y11 y12 x11 r s P Qfi ( ) Chapter 2: Composition Properties of Information Flow Predicates 47 2.5 Automated Proof of the Composition Properties The framework given in the previous section can be easily automated since each
Reference: [NEE5] <author> Neely, R. B., Freeman, J. W., </author> <title> 'Structuring Systems for Formal Verification', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> April </month> <year> 1985. </year>
Reference: [ORA85] <institution> DoD 5200.28-STD, 'Department of Defense Trusted Computer System Evaluation Criteria',1985 </institution>
Reference-contexts: the reasons for the reluctance on the part of security practitioners to use access control models in security verification and propose an alternative approach for modeling the protection features of information systems. 4.2 Access Control Models and Security Verification The general approach mandated by the Trusted Computer Systems Evaluation Criteria <ref> [ORA85] </ref> for building secure systems is illustrated by the following figure. <p> There is no natural way to enforce the concept of groups where the entities belonging to the same group possess the same access privileges. This notion of groups is important in secure systems since the Computer Systems Evaluations Criteria Chapter 4: Specification of Security Critical Systems 74 <ref> [ORA85] </ref> of the Department of Defense mandates that systems provide facilities so that groups can be realized and their affect on the security of the system can be analyzed.
Reference: [POP78] <author> Popek, G.J., Farber, D. </author> <title> 'A Model for Verification of Data Security in Operating Systems', </title> <journal> Communications of the ACM, </journal> <month> September </month> <year> 1978. </year>
Reference: [PFL89] <author> Pfleeger, C., </author> <title> 'Security in Computing', </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference: [PN77] <author> Pnueli, A., </author> <title> 'The Temporal Logic of Programs', </title> <booktitle> Proceedings of the Eighteenth Symposium on Foundations of Computer Science, </booktitle> <month> November </month> <year> 1977. </year>
Reference-contexts: The fact that security policies are properties of sequences of transitions suggests that they can be specified using temporal logic. Chapter 3: Formal Specification of Information Flow Policies 50 3.2.1 Temporal Logic Temporal logic was proposed by Pneuli <ref> [PN77] </ref> as a tool for specifying and verifying the properties of concurrent programs. Considerable work has been done on the theory of temporal logic, and it has been applied in several areas other than concurrent program verification.
Reference: [PW94] <author> Peri, R. V., Wulf, W. A., </author> <title> 'Formal Specification of Information Flow Security Policies and Their Enforcement in Security Critical Systems', </title> <booktitle> Proceed Bibliography 159 ings of the Computer Security Foundations Workshop VII, </booktitle> <address> Franconia, </address> <year> 1994. </year>
Reference-contexts: Unfortunately, the Abadi and Lamport composition principle mentioned in Section 1.1.1.3 cannot be applied to information ow properties, since they do not fall in the class of functional properties <ref> [PW94] </ref> [MCL94]. Therefore a different composition principle needs to be developed that can be applied to possibilistic properties in general and information ow properties in particular. 2.2.2 McLeans Framework McLean [MCL94] developed a framework to reason about the composition properties of information ow predicates based on an informal notation.
Reference: [SAN88] <author> Sandhu, R. S., </author> <title> 'The Schematic Protection Model: Its definition and Analysis for Acyclic Attenuating Schemes', </title> <journal> JACM, </journal> <month> April </month> <year> 1988. </year>
Reference-contexts: A number of access control models have been proposed that differ from each other in the state changing rules. These models include HRU model [HAR76], SPM model <ref> [SAN88] </ref>, take-grant model [SNY81], ESPM model [AMM92], grammatical protection models [SNY81], CPD model [BAA90], Typed Access Matrix model [SAN92], and Transform model [SAN89]. <p> Access control models were first described by Lampson in [LAM74]. Later, a number of models were proposed that differ in expressive power and decidability of safety; these include the HRU model [HAR76], take-grant model [SNY81], Grammatical protection models [SNY81], Schematic Protection model <ref> [SAN88] </ref>, Extended Schematic Protection model [AMM92], and Typed Access Matrix model [SAN92]. Although a number of interesting results about the question of safety exist with respect to these models, none of them have been used in practice to analyze the safety of the protection mechanisms of large scale systems. <p> Therefore, these models make some assumptions about the system to make the safety question decidable. These assumptions typically are: restrictions on the form of the transition relation so that the size of the protection state of the system is bounded. For example, in the SPM <ref> [SAN88] </ref>, a newly created entity must be less powerful than its parent so that the number of possible states is finite in number. the set of transitions in the model need to satisfy the restoration principle; that is, any of the access rights that might be deleted can be reinstated. <p> For example, it has been shown [SNY81] that the question of safety in take-grant model can be decided in linear time. it was proved that the question of safety is undecidable for SPM <ref> [SAN88] </ref> in the general case but it is decidable when the instance of the model is acyclic (the create graph is acyclic) and attenuating (the newly created entities do not have more rights than their creators). <p> A similar kind of analysis methodology is desirable for the specification method that we proposed in the earlier chapter that can handle both access control and information ow requirements. But unfortunately the generality of the framework makes it very difficult to design an algorithm as in [SNY81] and <ref> [SAN88] </ref>. Instead we propose a set of rules that can be applied inductively to prove that a system enforces a security policy. Given a system specified as (s, I, -Op 1 , ..., Op n -) we can use the following set of rules to carry out the verification process.
Reference: [SAN89] <author> Sandhu, R. S., </author> <title> 'Transformation of Access Rights', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> July </month> <year> 1989. </year>
Reference-contexts: A number of access control models have been proposed that differ from each other in the state changing rules. These models include HRU model [HAR76], SPM model [SAN88], take-grant model [SNY81], ESPM model [AMM92], grammatical protection models [SNY81], CPD model [BAA90], Typed Access Matrix model [SAN92], and Transform model <ref> [SAN89] </ref>. An important goal of modeling a system using an access control model is to answer the safety question: is a particular state reachable from the initial state In most of the models listed earlier it was shown that this question of safety is undecidable.
Reference: [SAN92] <author> Sandhu, R. S., </author> <title> 'Typed Access matrix Mode', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: A number of access control models have been proposed that differ from each other in the state changing rules. These models include HRU model [HAR76], SPM model [SAN88], take-grant model [SNY81], ESPM model [AMM92], grammatical protection models [SNY81], CPD model [BAA90], Typed Access Matrix model <ref> [SAN92] </ref>, and Transform model [SAN89]. An important goal of modeling a system using an access control model is to answer the safety question: is a particular state reachable from the initial state In most of the models listed earlier it was shown that this question of safety is undecidable. <p> Later, a number of models were proposed that differ in expressive power and decidability of safety; these include the HRU model [HAR76], take-grant model [SNY81], Grammatical protection models [SNY81], Schematic Protection model [SAN88], Extended Schematic Protection model [AMM92], and Typed Access Matrix model <ref> [SAN92] </ref>. Although a number of interesting results about the question of safety exist with respect to these models, none of them have been used in practice to analyze the safety of the protection mechanisms of large scale systems. The HRU model is the first and most general model. <p> Although it is not as general as the HRU-model, SPM has better safety analysis techniques. The Typed Access Matrix model <ref> [SAN92] </ref> is similar to HRU except that the entities have types associated with them. The conditions for making the safety question decidable are tighter in this model than the corresponding ones of the HRU model.
Reference: [SNY81] <author> Snyder, L., </author> <title> 'Formal Models of Capability-Based Protection Systems', </title> <journal> IEEE Transactions on Computers, </journal> <month> March </month> <year> 1981. </year>
Reference-contexts: A number of access control models have been proposed that differ from each other in the state changing rules. These models include HRU model [HAR76], SPM model [SAN88], take-grant model <ref> [SNY81] </ref>, ESPM model [AMM92], grammatical protection models [SNY81], CPD model [BAA90], Typed Access Matrix model [SAN92], and Transform model [SAN89]. <p> A number of access control models have been proposed that differ from each other in the state changing rules. These models include HRU model [HAR76], SPM model [SAN88], take-grant model <ref> [SNY81] </ref>, ESPM model [AMM92], grammatical protection models [SNY81], CPD model [BAA90], Typed Access Matrix model [SAN92], and Transform model [SAN89]. <p> Here we describe the take-grant model that is used in most of the examples in subsequent chapters. A state in take-grant model <ref> [SNY81] </ref> is represented as a graph, referred to as the tg-graph. The nodes in the tg-graph, referred to as entities, represent either subjects (active entities like users) or objects (passive entities like files) and the labeled arcs are the rights that the entities have over other entities. <p> Access control models were first described by Lampson in [LAM74]. Later, a number of models were proposed that differ in expressive power and decidability of safety; these include the HRU model [HAR76], take-grant model <ref> [SNY81] </ref>, Grammatical protection models [SNY81], Schematic Protection model [SAN88], Extended Schematic Protection model [AMM92], and Typed Access Matrix model [SAN92]. <p> Access control models were first described by Lampson in [LAM74]. Later, a number of models were proposed that differ in expressive power and decidability of safety; these include the HRU model [HAR76], take-grant model <ref> [SNY81] </ref>, Grammatical protection models [SNY81], Schematic Protection model [SAN88], Extended Schematic Protection model [AMM92], and Typed Access Matrix model [SAN92]. <p> It is assumed that such a variable is assigned a value by the underlying system at the time of operation invocation. 4.3.2 An Example The take-grant model <ref> [SNY81] </ref> is an access control model used to describe the protection mechanisms in operating systems. This model can be specified in Z by giving schemas for the state description, the state changing operations, and the initial state. The schema for state description is given below. <p> In most access control models this safety question is undecidable in general but is decidable when the system is suitably restricted. For example, it has been shown <ref> [SNY81] </ref> that the question of safety in take-grant model can be decided in linear time. it was proved that the question of safety is undecidable for SPM [SAN88] in the general case but it is decidable when the instance of the model is acyclic (the create graph is acyclic) and attenuating <p> A similar kind of analysis methodology is desirable for the specification method that we proposed in the earlier chapter that can handle both access control and information ow requirements. But unfortunately the generality of the framework makes it very difficult to design an algorithm as in <ref> [SNY81] </ref> and [SAN88]. Instead we propose a set of rules that can be applied inductively to prove that a system enforces a security policy. <p> This is not a major drawback since all the security policies that we have dealt with so far can be handled by the above rules. 5.3 Verification of Access Control Policies To illustrate the above framework we first use it to prove the conditions developed for the take-grant model <ref> [SNY81] </ref> for the safety question i.e., given any initial state, whether an entity A can get x right to another entity B usually referred to as can-share (A, B, x). <p> It I C Op 1 Op n , ,( ) - I C Op 1 Op n , ,( )( ) Chapter 5: Security Policy Verification 100 was proposed <ref> [SNY81] </ref> that can-share (A, B, x) is true only if connected (AM, A, B, x) is true where the predicate connected is defined as shown below. <p> The above statement is a reformulation of the conditions given in <ref> [SNY81] </ref> where only an informal argument for the proof of the above statement was given. This theorem can be formally proved in the verification framework that we proposed earlier in this chapter. The predicate can-share (A, B, x) can be represented as in temporal logic. <p> The system that we consider is similar to the take-grant model <ref> [SNY81] </ref> with a few changes so that the MLS policy can be enforced. 5.4.1 The Security Policy Specification The MLS policy to be enforced by the system is (C, Op, P, A) where The set of information classes C is -l1, l2,..., ln-.
Reference: [SPI87] <author> Spivey, J. M., </author> <title> 'The Z Notation - A Reference Manual', </title> <publisher> Prentice Hall International Series in Computer Science, </publisher> <year> 1987. </year>
Reference: [SUT86] <author> Sutherland, D., </author> <title> 'A Model of Information', </title> <booktitle> 9th National Security Conference, </booktitle> <year> 1986. </year>
Reference-contexts: A number of other information ow predicates such as Restrictiveness [MCC87], Nondeducibility <ref> [SUT86] </ref>, Separability [MCL94], Nondeducibility on Strategies [WJ90] have been defined that capture different notions of information ow. <p> The simple and elegant specification made Noninterference a basis for a general theory of security. Later, a number of other information ow predicates were proposed such as Nondeducibility <ref> [SUT86] </ref>, Restrictiveness [MCC87], Noninference [MCL94]. These predicates tried to take into account non-deterministic systems, more prevalent in the real world. An important difference between these predicates is their composition property i.e., whether a system obtained by composing two systems satisfying the security property also satisfies that property.
Reference: [VIN88] <author> Vinter, S. T., </author> <title> 'Extended Discretionary Access Controls', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1988. </year>
Reference: [WAL80] <author> Walker, B.J., et al., </author> <title> 'Specification and Verification of the UCLA Unix Security Kernel', </title> <journal> Communications of the ACM, </journal> <month> February </month> <year> 1980. </year>
Reference-contexts: These models were used in the design of secure operating systems such as the UCLA Data Secure Unix <ref> [WAL80] </ref>, and PSOS [LAN81].
Reference: [WD87] <author> Williams, J. C., Dinolt, G. W., </author> <title> 'A Graph-Theoretic Formulation of Multilevel Secure Distributed Systems: An Overview', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> April </month> <year> 1987. </year>
Reference: [WJ90] <author> Wittbold, J. T., Johnson, D. M., </author> <title> 'Information Flow in Non-Deterministic Systems', </title> <booktitle> Proceedings of the IEEE Conference on Security and Privacy, </booktitle> <year> 1990. </year>
Reference-contexts: A number of other information ow predicates such as Restrictiveness [MCC87], Nondeducibility [SUT86], Separability [MCL94], Nondeducibility on Strategies <ref> [WJ90] </ref> have been defined that capture different notions of information ow.
Reference: [WL89] <author> Whitehurst R. A., Lunt T. F., </author> <title> 'The SeaView Verification', </title> <booktitle> Proceedings of the Computer Security Foundations Workshop II, </booktitle> <month> June </month> <year> 1989. </year>
Reference: [WN86] <author> Wing, J. M., Nixon, M. R., </author> <title> 'Extending INA JO with Temporal Logic', </title> <booktitle> Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <month> April </month> <year> 1986. </year>
Reference: [WOL87] <author> Wolper, P., </author> <title> 'On the Relation of Programs and Computations to Models of Temporal Logic', Proceedings of Temporal Logic in specification, </title> <publisher> LNCS 398, </publisher> <month> April </month> <year> 1987. </year>
Reference-contexts: It can be seen that POTL is at least as powerful than LTL and BTL by the fact that it subsumes both LTL and BTL. Chapter 3: Formal Specification of Information Flow Policies 51 Temporal logic is used in the verification of properties of programs in the following manner <ref> [WOL87] </ref>: an axiomatic system is specified to relate the program constructs and the temporal formulas, the property to be verified is specified as a temporal formula, and the axiomatic system is applied to the program, proving the desired formula.
Reference: [WUL74] <author> Wulf, W., et al, </author> <title> 'Hydra - The Kernel of a Multiprocessor Operating System,' </title> <journal> Communications of the ACM, </journal> <month> June </month> <year> 1974. </year>
Reference: [WUL80] <author> Wulf, W., et. al., 'Hydra/C.mmp: </author> <title> An Experimental Computer System'. </title> <publisher> McGraw-Hill Publishing Co., </publisher> <year> 1980. </year> <month> 160 </month>
Reference-contexts: A security policy might state that such a state is safe if B explicitly authorizes the read access for A, otherwise it is not. It is widely accepted that security policies and the mechanisms used to enforce them are orthogonal <ref> [WUL80] </ref> and therefore should be treated as such. Although a given access Chapter 4: Specification of Security Critical Systems 76 control model can answer questions about the reachability of certain unsafe states, ideally we would like it to answer questions about an arbitrary policy.
References-found: 75

