URL: http://www.isi.edu/expect/papers/tallis-gil-aaai99.ps
Refering-URL: http://www.isi.edu/~tallis/etm/etm-papers.html
Root-URL: http://www.isi.edu
Email: tallis@isi.edu, gil@isi.edu  
Title: Designing Scripts to Guide Users in Modifying Knowledge-based Systems  
Author: Marcelo Tallis and Yolanda Gil 
Note: Submitted for Publication  
Address: Marina del Rey, CA 90292  
Affiliation: Information Sciences Institute University of Southern California  
Abstract: Knowledge Acquisition (KA) Scripts capture typical modification sequences that users follow when they modify knowledge bases. KA tools can use these scripts to guide users in making these modifications, ensuring that they follow all the ramifications of the change until it is completed. This paper describes our approach to design, develop, and organize a library of KA Scripts. We report the results of three different analysis to develop this library, including a detail study of actual modification scenarios in two knowledge bases. In addition to identifying a good number of KA Scripts, we found a set of useful attributes to describe and organize the KA Scripts. These attributes allow us to analyze the size of the library and generate new KA Scripts in a systematic way. We have implemented a portion of this library and conducted two different studies to evaluate it. The result of this evaluation showed a 28 to 36 percent time savings in modifying knowledge bases and that the library included relevant and useful KA Scripts to assist users in realistic settings. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Cohen, P.; Schrag, R.; Jones, E.; Pease, A.; Lin, A.; Starr, B.; Gunning, D.; and Burke, M. </author> <year> 1998. </year> <title> The darpa high-performance knowledge bases project. </title> <journal> AI Magazine 19(4). </journal>
Reference-contexts: An issue that had also concerned us. Realistic and Unseen Scenarios For this study we used the knowledge-bases and scenarios of the Challenge Problems from the High Performance Knowledge Bases (HPKB) DARPA project <ref> (Cohen et al. 1998) </ref>. These problems were developed independently and with the specific purpose of testing the technologies being developed within the project. In particular, both, the domain and the modification scenarios were unknown to the designers of the KA script library before this experiment.
Reference: <author> Gil, Y., and Melz, E. </author> <year> 1996. </year> <title> Explicit representations of problem-solving strategies to support knowledge acquisition. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence. </booktitle>
Reference: <author> Gil, Y., and Tallis, M. </author> <year> 1997. </year> <title> A script-based approach to modifying knowledge-based systems. </title> <booktitle> In Proceedings of the Fourteenth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Users need KA tools to guide them make these changes, because it is hard for them to foresee and follow up on all the effects and implications of each individual modification that they make. Script-based KA tools <ref> (Gil & Tallis 1997) </ref> helps users follow typical modification procedures (KA Scripts), ensuring that they follow up the effects of each individual change and complete the overall modification. <p> Previous work has showed promising results with a scripts-based tool that contained a limited set of KA Scripts <ref> (Gil & Tallis 1997) </ref>. We set out to scale up this ap proach and develop a library of KA Scripts that would provide a more extensive coverage of situations when users modify knowledge bases. <p> Then we describe each one of the analysis that we have carried out and report on their results. Finally we describe our implementation of a SBKA tool and present some results from its evaluation. Background: Script-based Knowledge Acquisition The script-based knowledge acquisition (SBKA) approach <ref> (Gil & Tallis 1997) </ref> was conceived to support users in completing a KBS modification. KBS modifications usually require changing several related parts of the system.
Reference: <author> Gil, Y. </author> <year> 1994. </year> <title> Knowledge refinement in a reflective architecture. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence. </booktitle>
Reference: <author> Johnson, W. L., and Feather, M. S. </author> <year> 1991. </year> <title> Using evolution transformations to construct specifications. In Automating Software Design. </title> <publisher> AAAI Press. </publisher> <pages> 65-92. </pages>
Reference: <author> Johnson, W. L.; Father, M. S.; and Harris, D. R. </author> <year> 1992. </year> <title> Representation and presentation of requirements knowledge. </title> <journal> IEEE Transactions on Software Engineering 18(10) </journal> <pages> 853-869. </pages>
Reference: <author> Swartout, B., and Gil, Y. </author> <year> 1995. </year> <title> EXPECT: Explicit Representations for Flexible Acquisition. </title> <booktitle> In Proceedings of the Ninth Knowledge-Acquisition for Knowledge-Based Systems Workshop. </booktitle>
Reference: <author> Waters, R. </author> <year> 1985. </year> <title> The programmer`s apprentice: A session with kbemacs. </title> <journal> IEEE Transactions on Software Engineering 11(11) </journal> <pages> 1296-1320. </pages>
Reference-contexts: KA scripts are useful not only to make changes faster but also as checklists to ensure that the changes are completed well. Related Work Some knowledge-based software engineering (KBSE) tools have incorporated a concept similar to our KA Scripts. KBEmacs <ref> (Waters 1985) </ref> is a knowledge-based program editor that permits the construction of a program by combining algorithmic fragments (called cliches) from a library.
References-found: 8

