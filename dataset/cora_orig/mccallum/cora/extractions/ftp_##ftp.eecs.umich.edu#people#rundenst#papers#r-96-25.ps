URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/r-96-25.ps
Refering-URL: http://www.eecs.umich.edu/~rundenst/group/papers.html
Root-URL: http://www.cs.umich.edu
Email: rundenst@cs.wpi.edu  
Title: Object-Oriented View Technology: Challenges and Promises  
Author: Elke Angelika Rundensteiner 
Web: http://cs.wpi.edu/~rundenst  
Address: 100 Institute Road, Worcester, MA 01609  
Affiliation: Department of Computer Science, Worcester Polytechnic Institute  
Abstract: With object-oriented database (OODB) systems reaching the status of a maturing technology, increased attention has been given in recent years to the realization of view mechanisms in OODBs. Object-oriented views have the potential for achieving important services, including system interoperability, security, heterogeneous systems integration, schema evolution, data warehousing, and workflow management, to just name a few. Given this rising interest, we report on the MultiView project which, now in its middle phase, is a five-year NSF-funded effort on exploring object-oriented view foundation and implementation issues as well as on applying view technology to a select subset of problems to evaluate its potential. In this paper, we review our results on designing, implementing, and optimizing object-oriented view mechanisms, which include object-centric view materialization algorithms and view redefinition techniques. In this paper, we also outline three promising directions of applying object-oriented view technology to solve important problems, namely, transparent schema evolution, complex object-based interoperability, and active self-adaptive virtual catalogs for electronic commerce. We not only outline our experiences and results for providing these services but more importantly we point out open problems for future research. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul and A. Bonner. </author> <title> Objects and views. </title> <booktitle> SIGMOD, </booktitle> <pages> pages 238-247, </pages> <year> 1991. </year>
Reference-contexts: We would also like to thank our industrial sponsors, in particular, IBM, AT&T, Illustra, and Intel. idiosyncrasies of component systems to be integrated into one unified, yet federated system <ref> [1, 3, 4, 13] </ref>. In addition to the more traditional uses of views, new application domains that can benefit from view technology have arisen. Examples of this include the transparent evolution of databases by simulating schema change via views [27]. <p> Our system must therefore support dynamic class restructuring. This dynamic class restructuring includes support for the possible migration of state as properties are moved from class to class. While a number of researchers have begun to study view mechanisms with regard to OODBs <ref> [1, 36, 32, 34] </ref>, little work has been done regarding implementa-tion issues related to object-oriented views. <p> Rather TSE2 requires only the availability of (1) traditional schema evolution support offered by most commercial OODB systems (e.g., by Orion [2] or GemStone) and (2) conventional object-oriented view mechanisms (which are currently provided by our MultiView system [32] or O 2 views <ref> [1] </ref> and which are likely to be supported by other commercial products in the near future due to the rising popularity of view technology). TSE Research Issues We have developed the necessary theoretical foundation for realizing transparency of schema changes in TSE2 [26], referred to as transparency theory.
Reference: [2] <author> J. Banerjee and W. Kim and H. J. Kim and H. F. Korth", </author> <title> "Semantics and Implementation of Schema Evolution in Object-Oriented Databases", </title> <booktitle> SIGMOD, </booktitle> <pages> pages "311-322", </pages> <year> 1987. </year>
Reference-contexts: In contrast to TSE1, TSE2 is no longer confined to capacity-preserving/reducing schema changes nor requires a view mechanism that supports capacity-augmenting virtual classes. Rather TSE2 requires only the availability of (1) traditional schema evolution support offered by most commercial OODB systems (e.g., by Orion <ref> [2] </ref> or GemStone) and (2) conventional object-oriented view mechanisms (which are currently provided by our MultiView system [32] or O 2 views [1] and which are likely to be supported by other commercial products in the near future due to the rising popularity of view technology). <p> We have established the correctness of the propagation of in-place changes against a select set of view derivation operators available in MultiView [26, 29]. Since a formal proof of the completeness of the schema evolution operations is neither feasible nor meaningful <ref> [2] </ref>, it is important to demonstrate that our TSE2 methodology covers a comprehensive set of schema change operations in order for it to be considered a practical approach. Elsewhere [26, 29] we show that indeed we are able to handle all schema evolution operations proposed in [2] for the Orion OODB <p> neither feasible nor meaningful <ref> [2] </ref>, it is important to demonstrate that our TSE2 methodology covers a comprehensive set of schema change operations in order for it to be considered a practical approach. Elsewhere [26, 29] we show that indeed we are able to handle all schema evolution operations proposed in [2] for the Orion OODB and adopted in most other schema evolution research transparently within our framework.
Reference: [3] <author> E. Bertino. </author> <title> Integration of heterogeneous data repositories by using object-oriented views. </title> <booktitle> International Workshop on Interoperability in Mul-tidatabase Systems, </booktitle> <pages> pages 22-29, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: We would also like to thank our industrial sponsors, in particular, IBM, AT&T, Illustra, and Intel. idiosyncrasies of component systems to be integrated into one unified, yet federated system <ref> [1, 3, 4, 13] </ref>. In addition to the more traditional uses of views, new application domains that can benefit from view technology have arisen. Examples of this include the transparent evolution of databases by simulating schema change via views [27]. <p> Examples of this include the transparent evolution of databases by simulating schema change via views [27]. Because the object-oriented paradigm offers a more powerful model for integration than the relational one, the integration of heterogeneous data repositories via object-oriented views has been studied by numerous researchers <ref> [3, 13] </ref>. Maintaining materialized (possibly self-maintainable) views can be exploited for optimizing workflow systems, for answering queries efficiently by using precomputed views, and for analyzing data in a data warehouse [37].
Reference: [4] <author> E. Bertino. </author> <title> A view mechanism for object-oriented databases. </title> <booktitle> In 3rd International Conference on Extending Database Technology, </booktitle> <pages> pages 136-151, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: We would also like to thank our industrial sponsors, in particular, IBM, AT&T, Illustra, and Intel. idiosyncrasies of component systems to be integrated into one unified, yet federated system <ref> [1, 3, 4, 13] </ref>. In addition to the more traditional uses of views, new application domains that can benefit from view technology have arisen. Examples of this include the transparent evolution of databases by simulating schema change via views [27].
Reference: [5] <author> J. A. Blakeley, N. Coburn, and P-A Larson. </author> <title> Updating derived relations: Detecting irrelevant and autonomously computable updates. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 14(3) </volume> <pages> 369-400, </pages> <month> September </month> <year> 1989. </year>
Reference: [6] <author> Svein Erik Bratsberg. </author> <title> Unified class evolution by object-oriented views. </title> <booktitle> In Proc. 12th Intl. Conf. on the Entity-Relationship Approach, </booktitle> <pages> pages 423-439, </pages> <year> 1992. </year>
Reference: [7] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> In International Conference on Very Large Data Bases, </booktitle> <pages> pages 577-589, </pages> <month> September </month> <year> 1991. </year>
Reference: [8] <author> V. M. Crestana, A. Lee, and E. A. Rundensteiner, </author> <title> "Sustaining Software Interoperability Via Shared, Evolving Object Repositories: System Optimization and Evaluation", IBM CASCON, </title> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: In this paper, we outline our results on designing, implementing and optimizing object-oriented views, including object-centric view materialization algorithms [22, 23] and view redefinition and removal tech niques <ref> [8, 9] </ref> 1 . We also report on three promising directions of applying views to solve critical problems, namely, transparent schema evolution, complex object-based interoperability, and active self-adaptive virtual stores on the world-wide-web. <p> While our results are promising, they are just the tip of an iceberg of exploiting object-oriented model features for view materialization. Issues also being explored include path query views [23], optimizing batched updates, and merging of simple view classes into view classes of more complex derivation types <ref> [9, 8] </ref>. 3 Three Promising Directions 3.1 Transparent Schema Evolution One of the potential applications of object-oriented view technology is its use for realizing schema evolution.
Reference: [9] <author> V. Crestana and E. A. Rundensteiner. </author> <title> Consistent view removal in transparent schema evolution systems. </title> <booktitle> Sixth Int. Workshop on Research Issues on Data Eng., Interop. of Nontraditional DBMSs, (RIDE'96, IEEE), </booktitle> <year> 1996. </year>
Reference-contexts: In this paper, we outline our results on designing, implementing and optimizing object-oriented views, including object-centric view materialization algorithms [22, 23] and view redefinition and removal tech niques <ref> [8, 9] </ref> 1 . We also report on three promising directions of applying views to solve critical problems, namely, transparent schema evolution, complex object-based interoperability, and active self-adaptive virtual stores on the world-wide-web. <p> While our results are promising, they are just the tip of an iceberg of exploiting object-oriented model features for view materialization. Issues also being explored include path query views [23], optimizing batched updates, and merging of simple view classes into view classes of more complex derivation types <ref> [9, 8] </ref>. 3 Three Promising Directions 3.1 Transparent Schema Evolution One of the potential applications of object-oriented view technology is its use for realizing schema evolution.
Reference: [10] <author> M. Jones and E. A. Rundensteiner, </author> <title> "Extending View Technology for Complex Integration Tasks," </title> <booktitle> Proc. 4th Int. Working Conf. on Electronic Design Automation Frameworks, </booktitle> <pages> pp. 71-80, </pages> <year> 1994. </year>
Reference-contexts: be applied to a view schema if it would cause a cycle in the inheritance structure of the underlying global schema. 3.2 Enabling Interoperability Via Com plex Object View Types One promising application of database views is their utilization as transformation tools for virtually restructuring data shared by diverse applications <ref> [31, 10] </ref> | thus effectively achieving interoperability and coordination among such tools via object sharing. However, most current efforts in the literature focus on "traditional" object-oriented views in the sense of transferring the concepts of project-select-join type of views from relational systems to the object-oriented context. <p> One of our long standing interests is thus to push upon these traditional boundaries of what (object-oriented) view functions have come to mean to increase their utility for application integration <ref> [31, 10] </ref>. Representative examples of this include supporting both matrix- and graph-based object views for simulation tools, supporting both ordered-vector and set-oriented views for software applications, and graph- and path-based views for electronic design tools. Object-oriented databases have the potential of achieving such complex object-based interoperability for several reasons.
Reference: [11] <author> M. Jones and E. A. Rundensteiner, Jones, M., and Rundensteiner, E. A., </author> <title> "An Object Model and Algebra for the Implicit Unfolding of Hierarchical Structures," </title> <type> Elect. </type> <institution> Eng. and Computer Science Dept., Univ. of Mich., Ann Arbor, </institution> <type> Tech. Rep. </type> <institution> CSE-TR-251-95, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Such unfolded view must deal with issues such as how to efficiently flatten hierarchical relationships such as connections between components for the CAD example (Figure 7). For this purpose, we define an hierarchical set object type called HierSet <ref> [11] </ref>. Informally speaking, a HierSet object corresponds to a collection of Abstraction Instances which in turn can be either primitives or abstractions of other Hierset objects thus resulting in a nesting of Hiersets. <p> For this purpose, we have defined an object algebra for Hier Sets which unlike previously defined object algebras has the unique property of providing implicit flattening <ref> [11] </ref>. We also provide update functions for the HierSet data type, distinguishing between out-of-context and in-context updates. Out-of-context updates operate on the hierarchical view of HierSet objects directly, thus modifying the complete substructure of a HierSet object with each update. <p> We provide a novel solution to this problem of selective materialization of values for virtual flattened objects without requiring the generation of the explicit flattened (and thus extremely expensive) view of the data <ref> [11] </ref>. Our performance study evaluating several alternate implementation options for this selective materialization (such as dictionary structures, partial unfold structures, etc.) clearly demonstrates the advantage of operating upon our HierSet object model (both via both hierarchical and flattened views) as compared to operating upon the flattened data representation [12].
Reference: [12] <author> M. Jones and E. A. Rundensteiner, </author> <title> "An Evaluation of Materialization Strategies for Complex Hierarchical Structures," </title> <type> Elect. </type> <institution> Eng. and Computer Science Dept., Univ. of Mich., Ann Arbor, </institution> <type> Tech. Rep., </type> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: Our performance study evaluating several alternate implementation options for this selective materialization (such as dictionary structures, partial unfold structures, etc.) clearly demonstrates the advantage of operating upon our HierSet object model (both via both hierarchical and flattened views) as compared to operating upon the flattened data representation <ref> [12] </ref>. In short, our HierSet data type represents one solution along the general spectrum of supporting interoperability via interchangeable object views over shared complex object types.
Reference: [13] <author> M. Kaul, K. Drosten, and E. J. Neuhold. Viewsystem: </author> <title> Integrating heterogeneous information bases by object-oriented views. </title> <booktitle> In IEEE International Conference on Data Engineering, </booktitle> <pages> pages 2-10, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: We would also like to thank our industrial sponsors, in particular, IBM, AT&T, Illustra, and Intel. idiosyncrasies of component systems to be integrated into one unified, yet federated system <ref> [1, 3, 4, 13] </ref>. In addition to the more traditional uses of views, new application domains that can benefit from view technology have arisen. Examples of this include the transparent evolution of databases by simulating schema change via views [27]. <p> Examples of this include the transparent evolution of databases by simulating schema change via views [27]. Because the object-oriented paradigm offers a more powerful model for integration than the relational one, the integration of heterogeneous data repositories via object-oriented views has been studied by numerous researchers <ref> [3, 13] </ref>. Maintaining materialized (possibly self-maintainable) views can be exploited for optimizing workflow systems, for answering queries efficiently by using precomputed views, and for analyzing data in a data warehouse [37].
Reference: [14] <author> W. Kim and H. Chou. </author> <title> Versions of schema for OODBs. </title> <booktitle> In VLDB, </booktitle> <pages> pages 148-159, </pages> <year> 1988. </year>
Reference: [15] <author> W. Kim. </author> <title> Modern Database Systems: the Object Model, Interoperability, and Beyond. </title> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: In object-slicing, a real-world object corresponds to a hierarchy of implementation objects (one for each class whose type the object possesses) linked to a conceptual object (used to represent the object-itself) rather than associating one implementation with each conceptual object as is commonly assumed in OODB systems <ref> [15] </ref>. classes, Cat and HouseCat, and two virtual classes, HeavyCat (derived from a selection query upon the Cat class) and DietingHeavyCat (derived by refining HeavyCat to add a new instance variable, diet).
Reference: [16] <author> S. Konomi, T. Furukawa, and Y. Kambayashi. </author> <title> Super-key classes for updating materialized derived classes in object bases. </title> <booktitle> In International Conference on Deductive and Object-Oriented Databases, </booktitle> <pages> pages 310-326, </pages> <month> July </month> <year> 1993. </year>
Reference: [17] <author> H. A. Kuno, </author> <title> View Materialization Issues for Object-oriented Databases, </title> <type> Ph.D. Dissertation, </type> <institution> Univ. of Michigan, </institution> <year> 1996. </year>
Reference: [18] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> The Multi-View OODB view system: Design and implementation. </title> <editor> In Harold Ossher and William Harrison, editors, </editor> <title> Accepted by Theory and Practice of Object Systems, Special Issue on Subjectivity in OO Systems. </title> <publisher> John Wiley N.Y., </publisher> <year> 1996. </year>
Reference: [19] <author> Kuno, H., Ra, Y.G., and Rundensteiner, E. A., "Object-Slicing: </author> <title> A Flexible Object Representation and Its Evaluation," </title> <type> Elect. </type> <institution> Eng. and Computer Science Dept., Univ. of Mich., Ann Arbor, </institution> <type> Tech. Rep. </type> <institution> CSE-TR-241-95, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: We therefore developed an object-slicing representational model, a flexible and powerful technique, that addresses these deficiencies <ref> [19] </ref>. <p> Outlook A detailed performance evaluation confirming the benefit of these and other optimization strategies for view materialization can be found elsewhere <ref> [20, 19] </ref>. While our results are promising, they are just the tip of an iceberg of exploiting object-oriented model features for view materialization. <p> The TSE1 Approach. For TSE1, we overcome the limitation of views by extending object-oriented view mechanisms to also support capacity-augmentation <ref> [19, 29] </ref>. This means that stored data can now be associated with a virtual class even if this data is not maintained with any base class. The TSE1 methodology described in depth in [29] proceeds as follows. <p> We have implemented a version of the MultiView view system that is capacity-augmenting by exploiting the object-slicing principles of our implementation architecture. However, capacity-augmenting views impose the restriction on view classes to be physically materialized so to store these additional attributes specific to the view classes <ref> [19] </ref>. While achievable from a technical point of view, the TSE1 solution approach is limited from a practical point of view in the sense that no commercial OODB system currently supports capacity-augmenting views 6 .
Reference: [20] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> Using object-oriented principles to optimize update propagation to materialized views. </title> <booktitle> In IEEE International Conference on Data Engineering, </booktitle> <pages> pages 310-317, </pages> <year> 1996. </year>
Reference-contexts: this, we use inherent object-oriented features, such as the integration of classes into a generalization hierarchy, encapsulation, and membership materialization, both to facilitate the identification of the classes that are directly-affected by an update and also to optimize the propagation to the classes derived from classes directly-affected by the update <ref> [20] </ref>. <p> Outlook A detailed performance evaluation confirming the benefit of these and other optimization strategies for view materialization can be found elsewhere <ref> [20, 19] </ref>. While our results are promising, they are just the tip of an iceberg of exploiting object-oriented model features for view materialization.
Reference: [21] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> Materialized object-oriented views in MultiView. </title> <booktitle> In ACM Research Issues in Data Engineering Workshop, </booktitle> <pages> pages 78-85, </pages> <month> March </month> <year> 1995. </year>
Reference: [22] <author> A. Kuno and E. A. Rundensteiner, </author> <title> "Augmented Inherited Multi-Index for Path Views" ACM Int. </title> <booktitle> Workshop on Research Issues on Data Eng., Interoperability of Nontrad. itional Database Systems, RIDE'96, IEEE, </booktitle> <year> 1996, </year> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: In this paper, we outline our results on designing, implementing and optimizing object-oriented views, including object-centric view materialization algorithms <ref> [22, 23] </ref> and view redefinition and removal tech niques [8, 9] 1 . We also report on three promising directions of applying views to solve critical problems, namely, transparent schema evolution, complex object-based interoperability, and active self-adaptive virtual stores on the world-wide-web.
Reference: [23] <author> A. Kuno and E. A. Rundensteiner, </author> <title> The Satisfiability-Indicating Multi-Index Organization for Maintaining Materialized Path Query OODB Views, </title> <institution> Univ. of Mich, </institution> <type> Technical Report, </type> <institution> CSE-TR-302-96, </institution> <year> 1996. </year>
Reference-contexts: In this paper, we outline our results on designing, implementing and optimizing object-oriented views, including object-centric view materialization algorithms <ref> [22, 23] </ref> and view redefinition and removal tech niques [8, 9] 1 . We also report on three promising directions of applying views to solve critical problems, namely, transparent schema evolution, complex object-based interoperability, and active self-adaptive virtual stores on the world-wide-web. <p> While our results are promising, they are just the tip of an iceberg of exploiting object-oriented model features for view materialization. Issues also being explored include path query views <ref> [23] </ref>, optimizing batched updates, and merging of simple view classes into view classes of more complex derivation types [9, 8]. 3 Three Promising Directions 3.1 Transparent Schema Evolution One of the potential applications of object-oriented view technology is its use for realizing schema evolution.
Reference: [24] <author> O2 Technology. </author> <title> O2 Views User Manual, </title> <note> version 1 edition, </note> <month> December </month> <year> 1993. </year>
Reference-contexts: To the best of our knowledge, commercial OODB systems do not support full view capabilities (besides the O2 OODB system that currently offers the O2 Views tool as a limited beta release version <ref> [24] </ref>), and of the few research papers that discuss implementations of OODB view systems, most support only limited functionality at this time.
Reference: [25] <author> Z. Peng and Y. Kambayashi. </author> <title> Deputy mechanisms for object-oriented databases. </title> <booktitle> In IEEE International Conference on Data Eng., </booktitle> <pages> pages 333-340, </pages> <month> March </month> <year> 1995. </year>
Reference: [26] <author> Y. G. Ra, </author> <title> Transparent Schema Evolution (TSE) Using Object-Oriented View Technology: Transparency Theory, Methodology and System, </title> <type> Ph.D. Dissertation, </type> <institution> Univ. of Michigan, </institution> <year> 1996. </year>
Reference-contexts: TSE Research Issues We have developed the necessary theoretical foundation for realizing transparency of schema changes in TSE2 <ref> [26] </ref>, referred to as transparency theory. <p> This includes an investigation of the associativity and commutativity of schema transformations and view derivations, the definition of transparency of a primitive transformation in terms of the existence of an inverse view derivation function, and a theorem for guaranteeing the composition of two transparent transformations to be transparent <ref> [26] </ref>. Note that in the TSE2 methodology, user schemas are implemented as views on the underlying global schema. Because the users would perceive the views as base schemas, the views generated in TSE2 should preserve the update semantics of the base schemas. <p> We have established the correctness of the propagation of in-place changes against a select set of view derivation operators available in MultiView <ref> [26, 29] </ref>. Since a formal proof of the completeness of the schema evolution operations is neither feasible nor meaningful [2], it is important to demonstrate that our TSE2 methodology covers a comprehensive set of schema change operations in order for it to be considered a practical approach. Elsewhere [26, 29] we <p> in MultiView <ref> [26, 29] </ref>. Since a formal proof of the completeness of the schema evolution operations is neither feasible nor meaningful [2], it is important to demonstrate that our TSE2 methodology covers a comprehensive set of schema change operations in order for it to be considered a practical approach. Elsewhere [26, 29] we show that indeed we are able to handle all schema evolution operations proposed in [2] for the Orion OODB and adopted in most other schema evolution research transparently within our framework. <p> One important result of our investigation is the identification of some limitations to our framework <ref> [26] </ref>.
Reference: [27] <author> Y. G. Ra and E. A. Rundensteiner. </author> <title> A transparent object-oriented schema change approach using view schema evolution. </title> <booktitle> In IEEE Int. Conf. on Data Eng., </booktitle> <pages> pages 165-172, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: In addition to the more traditional uses of views, new application domains that can benefit from view technology have arisen. Examples of this include the transparent evolution of databases by simulating schema change via views <ref> [27] </ref>. Because the object-oriented paradigm offers a more powerful model for integration than the relational one, the integration of heterogeneous data repositories via object-oriented views has been studied by numerous researchers [3, 13].
Reference: [28] <author> Ra, Y.G., and Rundensteiner, </author> <title> E.A., "Supporting Hard Changes in TSE," </title> <booktitle> ACM 4th Int. Conf on Information and Knowledge Management (CIKM'95), </booktitle> <month> Nov. </month> <year> 1995. </year>
Reference: [29] <author> Y. G. Ra and E. A. Rundensteiner. </author> <title> A transparent schema evolution system based on object-oriented view technology. </title> <note> In to appear in IEEE Trans. on Knowledge and Data Engineering, </note> <year> 1997. </year>
Reference-contexts: The TSE1 Approach. For TSE1, we overcome the limitation of views by extending object-oriented view mechanisms to also support capacity-augmentation <ref> [19, 29] </ref>. This means that stored data can now be associated with a virtual class even if this data is not maintained with any base class. The TSE1 methodology described in depth in [29] proceeds as follows. <p> This means that stored data can now be associated with a virtual class even if this data is not maintained with any base class. The TSE1 methodology described in depth in <ref> [29] </ref> proceeds as follows. Given a requested schema change applied to VS1, TSE1 computes a new schema (VS2) as a view derived from the global schema that provides the desired enhanced interface rather than directly modifying the old schema (VS1). <p> We have established the correctness of the propagation of in-place changes against a select set of view derivation operators available in MultiView <ref> [26, 29] </ref>. Since a formal proof of the completeness of the schema evolution operations is neither feasible nor meaningful [2], it is important to demonstrate that our TSE2 methodology covers a comprehensive set of schema change operations in order for it to be considered a practical approach. Elsewhere [26, 29] we <p> in MultiView <ref> [26, 29] </ref>. Since a formal proof of the completeness of the schema evolution operations is neither feasible nor meaningful [2], it is important to demonstrate that our TSE2 methodology covers a comprehensive set of schema change operations in order for it to be considered a practical approach. Elsewhere [26, 29] we show that indeed we are able to handle all schema evolution operations proposed in [2] for the Orion OODB and adopted in most other schema evolution research transparently within our framework.
Reference: [30] <author> E. Rundensteiner, H. A. Kuno, Y.-G. Ra, M. C. Jones, V. Crestana, and P. J. Marron. </author> <title> The MultiView project: Object-oriented view technology and applications. </title> <booktitle> ACM Proc. of SIGMOD, Demonstration, </booktitle> <pages> page 555, </pages> <year> 1996. </year>
Reference: [31] <author> E. A. Rundensteiner, </author> <title> "Design Tool Integration Using Object-Oriented Database Views," </title> <booktitle> in Proc. IEEE Int. Conf. on Computer-Aided Design, </booktitle> <year> 1993, </year> <pages> pp. 104-107. </pages>
Reference-contexts: be applied to a view schema if it would cause a cycle in the inheritance structure of the underlying global schema. 3.2 Enabling Interoperability Via Com plex Object View Types One promising application of database views is their utilization as transformation tools for virtually restructuring data shared by diverse applications <ref> [31, 10] </ref> | thus effectively achieving interoperability and coordination among such tools via object sharing. However, most current efforts in the literature focus on "traditional" object-oriented views in the sense of transferring the concepts of project-select-join type of views from relational systems to the object-oriented context. <p> One of our long standing interests is thus to push upon these traditional boundaries of what (object-oriented) view functions have come to mean to increase their utility for application integration <ref> [31, 10] </ref>. Representative examples of this include supporting both matrix- and graph-based object views for simulation tools, supporting both ordered-vector and set-oriented views for software applications, and graph- and path-based views for electronic design tools. Object-oriented databases have the potential of achieving such complex object-based interoperability for several reasons.
Reference: [32] <author> E. A. Rundensteiner. </author> <title> MultiView: A methodology for supporting multiple views in object-oriented databases. </title> <booktitle> In VLDB, </booktitle> <pages> pages 187-198, </pages> <year> 1992. </year>
Reference-contexts: case and in May 1996 at ACM SIGMOD. ties for future research by identifying challenging open problems that we have encountered during the course of this project. 2 The MultiView: Model and System 2.1 Virtual Classes and View Schemata Our MultiView view model is based on standard object-oriented modeling concepts <ref> [32] </ref>, such as object, properties, behavior, types, events, and classes. In addition, MultiView supports a full range of virtual classes defined by object algebra operators, such as select, hide, union, etc. [32]. <p> and System 2.1 Virtual Classes and View Schemata Our MultiView view model is based on standard object-oriented modeling concepts <ref> [32] </ref>, such as object, properties, behavior, types, events, and classes. In addition, MultiView supports a full range of virtual classes defined by object algebra operators, such as select, hide, union, etc. [32]. One unique feature of MultiView is the incorporation of virtual classes into the global schema as first-class database citizens, assuring that properties shared among base and virtual classes are defined exactly once in the global schema 2 (see middle of Figure 1). <p> Our system must therefore support dynamic class restructuring. This dynamic class restructuring includes support for the possible migration of state as properties are moved from class to class. While a number of researchers have begun to study view mechanisms with regard to OODBs <ref> [1, 36, 32, 34] </ref>, little work has been done regarding implementa-tion issues related to object-oriented views. <p> In the context of the MultiView project, we thus have set out to not only address view issues in a theoretical manner but rather to put emphasis on implementing a view management system capable of supporting updatable materialized views <ref> [32] </ref>. Such system development effort not only verifies the feasibility and practicality of our approach but it also serves as testbed for further investigation. <p> Rather TSE2 requires only the availability of (1) traditional schema evolution support offered by most commercial OODB systems (e.g., by Orion [2] or GemStone) and (2) conventional object-oriented view mechanisms (which are currently provided by our MultiView system <ref> [32] </ref> or O 2 views [1] and which are likely to be supported by other commercial products in the near future due to the rising popularity of view technology).
Reference: [33] <author> E. A. Rundensteiner. </author> <title> Tools for view generation in OODBs. </title> <booktitle> In Int. Conf. on Info. and Knowledge Management, </booktitle> <pages> pages 635-644, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Virtual and base classes should be fully integrated into a global class hierarchy in terms of both type and extent. As detailed in <ref> [33] </ref>, this integration requires both multiple classification and multiple inheritance. For example, if a virtual class is formed by applying a union query to two base classes, then the newly-formed union class should be classified as a superclass of both base classes. <p> Furthermore, MultiView users can specify (at any time) view classes (both base and virtual) from the augmented global schema for membership in a particular view. The system then automatically computes the proper hierarchical relationships for classes in a view schema <ref> [33] </ref>. 2.3 View Materialization Strategies We have incorporated incremental strategies for updating and maintaining views in MultiView.
Reference: [34] <author> E. A. Rundensteiner. </author> <title> A classification algorithm for supporting object-oriented views. </title> <booktitle> In Int. Conf. on Info. and Knowledge Management, </booktitle> <pages> pages 18-25, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Our system must therefore support dynamic class restructuring. This dynamic class restructuring includes support for the possible migration of state as properties are moved from class to class. While a number of researchers have begun to study view mechanisms with regard to OODBs <ref> [1, 36, 32, 34] </ref>, little work has been done regarding implementa-tion issues related to object-oriented views. <p> For instance, MultiView automatically integrates the newly specified virtual classes with existing classes into a single consistent global schema graph, maintaining relationships between base and virtual classes <ref> [34] </ref>. Such complete classification offers a number of advantages, as detailed earlier. Furthermore, MultiView users can specify (at any time) view classes (both base and virtual) from the augmented global schema for membership in a particular view.
Reference: [35] <author> C. Souza dos Santos, S. Abiteboul, and C. Delo-bel. </author> <title> Virtual schemas and bases. </title> <booktitle> In Int. Conf. on Extending Database Technology (EDBT), </booktitle> <year> 1994. </year>
Reference: [36] <author> M. H. Scholl, C. Laasch, and M. Tresch. </author> <title> Updat-able views in object-oriented databases. </title> <booktitle> In Proceedings of the Second DOOD Conference, </booktitle> <month> Decem-ber </month> <year> 1991. </year>
Reference-contexts: Our system must therefore support dynamic class restructuring. This dynamic class restructuring includes support for the possible migration of state as properties are moved from class to class. While a number of researchers have begun to study view mechanisms with regard to OODBs <ref> [1, 36, 32, 34] </ref>, little work has been done regarding implementa-tion issues related to object-oriented views. <p> For instance, a delete-attribute operation applied to a virtual class C, e.g., "delete-att Salary from Employee class" can be realized in TSE by applying the view specification hide (X,Salary) with the class variable X ranging over the class Employee and all its subclasses. However, it has been observed <ref> [36] </ref> that the full range of schema evolution operations could not be achieved. In particular, view mechanisms, being derived functions on the stored database, cannot simulate capacity-augmenting schema changes due to their inherent limitation of not augmenting the underlying schema.
Reference: [37] <institution> ACM Workshop on Materialized Views and Applications, Montreal, Canada, </institution> <year> 1996. </year>
Reference-contexts: Maintaining materialized (possibly self-maintainable) views can be exploited for optimizing workflow systems, for answering queries efficiently by using precomputed views, and for analyzing data in a data warehouse <ref> [37] </ref>. Given the rising interest in view technology, we report in this paper on the MultiView project a five-year NSF-funded effort which started at the University of Michigan in 1994 and is now being continued at the Worcester Polytechnic Institute.
Reference: [38] <author> L. Zhou, E. A. Rundensteiner, and K.G. Shin, </author> <title> "Schema Evolution of an Object-Oriented Real-Time Database System for Manufacturing Automation," </title> <journal> IEEE Transaction on Data and Knowledge Engineering, </journal> <note> 1997, to appear. </note>
References-found: 38

