URL: http://www.cs.indiana.edu/l/www/ftp/pierce/fomega.ps.gz
Refering-URL: http://www.cs.indiana.edu/l/www/ftp/pierce/
Root-URL: http://www.cs.indiana.edu
Title: Higher-Order Subtyping  Revised version with Fun subtyping  
Author: Martin Steffen Benjamin Pierce 
Keyword: lambda-calculus, type systems, subtyping, polymorphism, bounded quantification, typechecking.  
Affiliation: University of Edinburgh  and IMMD VII, Universitat Erlangen-Nurnberg  
Date: February 2, 1994  
Pubnum: Technical Report ECS-LFCS-94-280  Interner Bericht IMMD7-01/94  
Abstract: System F ! is an extension with subtyping of Girard's higher-order polymorphic -calculus. We develop the fundamental metatheory of this calculus: decidability of fi-conversion on well-kinded types, elimination of the "cut-rule" of transitivity from the subtype relation, and the soundness, completeness, and termination of algorithms for subtyping and typechecking. 
Abstract-found: 1
Intro-found: 1
Reference: [Aba93] <author> Martn Abadi. </author> <title> Baby Modula-3 and a theory of objects. </title> <type> Research Report 95, </type> <institution> Digital Equipment Corporation, Systems Research Center, Palo Alto, California, </institution> <month> February </month> <year> 1993. </year> <note> To appear in Journal of Functional Programming. </note>
Reference: [AC94a] <author> Martn Abadi and Luca Cardelli. </author> <title> A theory of primitive objects: Second-order systems. </title> <booktitle> In European Symposium on Programming (ESOP), </booktitle> <address> Edinburgh, Scotland, </address> <year> 1994. </year>
Reference: [AC94b] <author> Martn Abadi and Luca Cardelli. </author> <title> A theory of primitive objects: Untyped and first-order systems. </title> <booktitle> In Theoretical Aspects of Computer Software (TACS), Sendai, </booktitle> <address> Japan, </address> <year> 1994. </year>
Reference: [Bar84] <author> Hendrik Barendregt. </author> <title> The Lambda Calculus: Its Syntax and Semantics, </title> <booktitle> volume 103 of Studies in Logic and the Foundations of Mathematics. </booktitle> <publisher> North-Holland, </publisher> <address> revised edition, </address> <year> 1984. </year>
Reference-contexts: The main result of this section is the Church-Rosser property, by a straightforward adaptation of Tait and Martin-Lof's proof for ordinary fi-reduction (c.f. <ref> [Bar84] </ref>). 3.1 Definition [Parallel reduction]: Single-step parallel reduction is the least relation closed under the following rules: Top (K 1 !K 2 ) T -fi&gt; Top (K 2 ) (F un (A:K) S) T -fi&gt; [T 0 =A]S 0 S T -fi&gt; S 0 T 0 F un (A:K) T -fi&gt; <p> S 1 @ 1 S 1 S 2 1 1 S 3 Proof: Straightforward extension of the standard argument (c.f. <ref> [Bar84] </ref>). fl 3.7 Corollary [Church-Rosser for -? fi&gt; ]: For all types S, S 1 , and S 2 with S -? fi&gt; S 1 and S ! ? S 2 , there is a type S 3 such that S 1 -? fi&gt; S 3 and S 2 -? The <p> Proof: By Newman's Lemma, which states that the weak diamond property and strong normalization together imply Church-Rosser (c.f. <ref> [Bar84] </ref>). fl 5.9 Lemma [Substitution commutes with -reduction]: If U - ? V and S -? then [U=A]S - ? [V =A]T . Proof: Since A's bound is Top (K), it is not a (; A Top (K))-redex, so [U=A]S - ? [U=A]T .
Reference: [BCGS91] <author> Val Breazu-Tannen, Thierry Coquand, Carl Gunter, and Andre Scedrov. </author> <title> Inheritance as implicit coercion. </title> <journal> Information and Computation, </journal> <volume> 93 </volume> <pages> 172-221, </pages> <year> 1991. </year> <month> 35 </month>
Reference-contexts: Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. The second order fragment of F ! , called F , has been studied in detail, yielding both positive <ref> [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] </ref> and some surprising negative results [Ghe93a, Ghe93b, GP92, Pie92] including undecidability. Decidable variants of F have been proposed [CW85, KS92, CP94] (our formulation of F ! is based on [CW85]). <p> This is also the case in F ! . 6.1 Proof Outline Although the details of our development will be somewhat more involved, it is helpful to start by reviewing the standard argument <ref> [CG92, Ghe90, CMMS91, BCGS91, etc.] </ref> for the decidability of subtyping in the second-order system F : 1. Begin with an "original" presentation of the subtyping system that directly expresses its intended meaning, but which is not directly implementable. 2. <p> The following section will show that these conditions can always be achieved. With these restrictions, the proof of cut elimination is a straightforward extension of standard proofs for the second-order fragment (c.f. <ref> [BCGS91, CG92, CMMS91, CP94] </ref>). We begin with one technical lemma. 22 6.3.1 Lemma: Suppose ` S 2 K S and ` A T 1 : : : T n 2 K T .
Reference: [BL90] <author> Kim B. Bruce and Giuseppe Longo. </author> <title> A modest model of records, inheritance, and bounded quantification. </title> <journal> Information and Computation, </journal> <volume> 87 </volume> <pages> 196-240, </pages> <year> 1990. </year> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (MIT Press; to appear, </title> <note> 1994). An earlier version appeared in the proceedings of the IEEE Symposium on Logic in Computer Science, </note> <year> 1988. </year>
Reference-contexts: Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. The second order fragment of F ! , called F , has been studied in detail, yielding both positive <ref> [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] </ref> and some surprising negative results [Ghe93a, Ghe93b, GP92, Pie92] including undecidability. Decidable variants of F have been proposed [CW85, KS92, CP94] (our formulation of F ! is based on [CW85]).
Reference: [BM92] <author> Kim Bruce and John Mitchell. </author> <title> PER models of subtyping, recursive types and higher-order polymorphism. </title> <booktitle> In Proceedings of the Nineteenth ACM Symposium on Principles of Programming Languages, </booktitle> <address> Albequerque, NM, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: Many of the ideas behind this system, called F ! ("F-omega-sub"), are due to Cardelli, particularly to his 1988 paper, "Structural Subtyping and the Notion of Power Type" [Car88]; the extension of the subtype relation to type operators was developed by Cardelli and Mitchell <ref> [Car90, Mit90, BM92] </ref>. An early semantic model was given by Cardelli and Longo [CL91] using partial equivalence relations. Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. <p> An early semantic model was given by Cardelli and Longo [CL91] using partial equivalence relations. Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell <ref> [BM92] </ref>. The second order fragment of F ! , called F , has been studied in detail, yielding both positive [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] and some surprising negative results [Ghe93a, Ghe93b, GP92, Pie92] including undecidability.
Reference: [Bru93] <author> Kim B. Bruce. </author> <title> Safe type checking in a statically typed object-oriented programming language. </title> <booktitle> In Proceedings of the Twentieth ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1993. </year> <note> To appear in Journal of Functional Programming. </note>
Reference-contexts: A number of typed object models have been given in this general setting. 1 Cook, Canning, Hill, Olthoff, and Mitchell [CCH + 89, CHC90] proposed a variant called F-bounded quantification, which was used by Bruce <ref> [Bru93] </ref> to give the first full account of static typing for Smalltalk-style objects. Pierce and Turner [PT93a, PT93b] gave a similar model using existential types instead of recursive types to capture object encapsulation, effectively working within pure F ! .
Reference: [Car84] <author> Luca Cardelli. </author> <title> A semantics of multiple inheritance. </title> <editor> In G. Kahn, D. MacQueen, and G. Plotkin, editors, </editor> <booktitle> Semantics of Data Types, volume 173 of Lecture Notes in Computer Science, </booktitle> <pages> pages 51-67. </pages> <publisher> Springer-Verlag, </publisher> <year> 1984. </year> <note> Full version in Information and Computation 76 138-164, </note> <year> 1988. </year>
Reference-contexts: 1 Introduction Since the early 1980's, increasing attention in the programming language community has been devoted to formal models for statically typed object-oriented languages. Cardelli <ref> [Car84] </ref> observed that refinement of object interfaces can be modeled by records and a simple form of subtyping. To account for the types of message-sending operations, Cardelli and Wegner [CW85] introduced bounded quantification.
Reference: [Car88] <author> Luca Cardelli. </author> <title> Structural subtyping and the notion of power type. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 70-79, </pages> <address> San Diego, CA, </address> <month> January </month> <year> 1988. </year>
Reference-contexts: Many of the ideas behind this system, called F ! ("F-omega-sub"), are due to Cardelli, particularly to his 1988 paper, "Structural Subtyping and the Notion of Power Type" <ref> [Car88] </ref>; the extension of the subtype relation to type operators was developed by Cardelli and Mitchell [Car90, Mit90, BM92]. An early semantic model was given by Cardelli and Longo [CL91] using partial equivalence relations. Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types.
Reference: [Car90] <author> Luca Cardelli. </author> <title> Notes about F ! &lt;: </title> . <type> Unpublished manuscript, </type> <month> October </month> <year> 1990. </year>
Reference-contexts: Many of the ideas behind this system, called F ! ("F-omega-sub"), are due to Cardelli, particularly to his 1988 paper, "Structural Subtyping and the Notion of Power Type" [Car88]; the extension of the subtype relation to type operators was developed by Cardelli and Mitchell <ref> [Car90, Mit90, BM92] </ref>. An early semantic model was given by Cardelli and Longo [CL91] using partial equivalence relations. Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. <p> ) U, but it is not clear that this refinement would be useful in practice, and it would complicate the metatheory, since we would then need to introduce a subkinding relation. 4 Again, richer definitions of operator subtyping are possible: for example, we might allow monotone subtyping, antimonotone subtyping, etc. <ref> [Car90] </ref>.
Reference: [Car92] <author> Luca Cardelli. </author> <title> Extensible records in a pure calculus of subtyping. </title> <type> Research report 81, </type> <institution> DEC Systems Research Center, </institution> <month> January </month> <year> 1992. </year> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (MIT Press; to appear, </title> <year> 1994). </year>
Reference: [Cas92] <author> Giuseppe Castagna. </author> <title> Strong typing in object-oriented paradigms. </title> <institution> Rapport de Recherche LIENS-92-11, Ecole Normale Superieure, Paris, </institution> <month> May </month> <year> 1992. </year>
Reference: [CCH + 89] <author> Peter Canning, William Cook, Walter Hill, Walter Olthoff, and John Mitchell. </author> <title> F-bounded quantification for object-oriented programming. </title> <booktitle> In Fourth International Conference on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 273-280, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: A number of typed object models have been given in this general setting. 1 Cook, Canning, Hill, Olthoff, and Mitchell <ref> [CCH + 89, CHC90] </ref> proposed a variant called F-bounded quantification, which was used by Bruce [Bru93] to give the first full account of static typing for Smalltalk-style objects.
Reference: [CG91] <author> Pierre-Louis Curien and Giorgio Ghelli. </author> <title> Subtyping + extensionality: </title> <booktitle> Confluence of fi-reductions in F . In Ito and Meyer [IM91], </booktitle> <pages> pages 731-749. </pages>
Reference-contexts: Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. The second order fragment of F ! , called F , has been studied in detail, yielding both positive <ref> [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] </ref> and some surprising negative results [Ghe93a, Ghe93b, GP92, Pie92] including undecidability. Decidable variants of F have been proposed [CW85, KS92, CP94] (our formulation of F ! is based on [CW85]).
Reference: [CG92] <author> Pierre-Louis Curien and Giorgio Ghelli. </author> <title> Coherence of subsumption: Minimum typing and type-checking in F . Mathematical Structures in Computer Science, </title> <booktitle> 2 </booktitle> <pages> 55-91, </pages> <year> 1992. </year> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (MIT Press; to appear, </title> <year> 1994). </year>
Reference-contexts: Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. The second order fragment of F ! , called F , has been studied in detail, yielding both positive <ref> [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] </ref> and some surprising negative results [Ghe93a, Ghe93b, GP92, Pie92] including undecidability. Decidable variants of F have been proposed [CW85, KS92, CP94] (our formulation of F ! is based on [CW85]). <p> When T has a normal form (it will necessarily be unique), we denote it by T ! . Reduction to fi&gt;-normal form is written -! fi&gt; . 2.4 Subtyping The F ! subtyping relation ` S T is a straightforward extension of the subtyping relation of F <ref> [CW85, CG92, CP94] </ref>. We start by stipulating that fi&gt;-convertible types always lie in the same equivalence class in the subtype ordering (S-Conv), and that the subtype relation at every kind is reflexive (R-Refl) and transitive (R-Trans). Type assumptions from the context may be used as axioms (S-TVar). <p> ` A (A) (S-TVar) ` S 2 K (S-Top) ` Fun (A:K) S Fun (A:K) T ` S T (S-App) ` S 1 !S 2 T 1 !T 2 (S-Arrow) ; A U ` S 2 T 2 (S-All) 2.5 Typing The typing relation ` t 2 T is standard <ref> [CW85, CG92] </ref>, modulo a few extra kinding assumptions. <p> This is also the case in F ! . 6.1 Proof Outline Although the details of our development will be somewhat more involved, it is helpful to start by reviewing the standard argument <ref> [CG92, Ghe90, CMMS91, BCGS91, etc.] </ref> for the decidability of subtyping in the second-order system F : 1. Begin with an "original" presentation of the subtyping system that directly expresses its intended meaning, but which is not directly implementable. 2. <p> The following section will show that these conditions can always be achieved. With these restrictions, the proof of cut elimination is a straightforward extension of standard proofs for the second-order fragment (c.f. <ref> [BCGS91, CG92, CMMS91, CP94] </ref>). We begin with one technical lemma. 22 6.3.1 Lemma: Suppose ` S 2 K S and ` A T 1 : : : T n 2 K T .
Reference: [CGL92] <author> G. Castagna, G. Ghelli, and G. Longo. </author> <title> A calculus for overloaded functions with subtyping. </title> <booktitle> In ACM conference on LISP and Functional Programming, </booktitle> <pages> pages 182-192, </pages> <address> San Francisco, </address> <month> July </month> <year> 1992. </year> <note> ACM Press. Also available as Rapport de Recherche LIENS-92-4, </note> <institution> Ecole Normale Superieure, Paris. </institution>
Reference: [CHC90] <author> William R. Cook, Walter L. Hill, and Peter S. Canning. </author> <title> Inheritance is not subtyping. </title> <booktitle> In Seventeenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 125-135, </pages> <address> San Francisco, CA, </address> <month> January </month> <year> 1990. </year> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object Oriented Programming: Types, Semantics, and Language Design (MIT Press; to appear, </title> <year> 1994). </year>
Reference-contexts: A number of typed object models have been given in this general setting. 1 Cook, Canning, Hill, Olthoff, and Mitchell <ref> [CCH + 89, CHC90] </ref> proposed a variant called F-bounded quantification, which was used by Bruce [Bru93] to give the first full account of static typing for Smalltalk-style objects.
Reference: [Chu40] <author> Alonzo Church. </author> <title> A formulation of the simple theory of types. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 5 </volume> <pages> 56-68, </pages> <year> 1940. </year>
Reference-contexts: Those not shown are straightforward when performed in the order given. 2 Definition of F ! Girard's System F ! [Gir72] is a typed -calculus with higher-order polymorphism. Besides the term abstraction (fun (x:T ) t) and application (f a) of the simply typed -calculus <ref> [Chu40] </ref> and the type abstraction (fun (A:K) t) and application (t [T ]) of the second-order polymorphic -calculus [Gir72, Rey74], it includes the possibility of abstraction (Fun (A:K) T ) and application (T U ) within type expressions.
Reference: [CL91] <author> Luca Cardelli and Giuseppe Longo. </author> <title> A semantic basis for Quest. </title> <journal> Journal of Functional Programming, </journal> <volume> 1(4) </volume> <pages> 417-458, </pages> <month> October </month> <year> 1991. </year> <title> Preliminary version in ACM Conference on Lisp and Functional Program ming, </title> <month> June </month> <year> 1990. </year> <note> Also available as DEC SRC Research Report 55, </note> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: An early semantic model was given by Cardelli and Longo <ref> [CL91] </ref> using partial equivalence relations. Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell [BM92].
Reference: [CMMS91] <author> Luca Cardelli, Simone Martini, John C. Mitchell, and Andre Scedrov. </author> <title> An extension of system F with subtyping. </title> <booktitle> In Ito and Meyer [IM91], </booktitle> <pages> pages 750-770. </pages>
Reference-contexts: Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. The second order fragment of F ! , called F , has been studied in detail, yielding both positive <ref> [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] </ref> and some surprising negative results [Ghe93a, Ghe93b, GP92, Pie92] including undecidability. Decidable variants of F have been proposed [CW85, KS92, CP94] (our formulation of F ! is based on [CW85]). <p> This is also the case in F ! . 6.1 Proof Outline Although the details of our development will be somewhat more involved, it is helpful to start by reviewing the standard argument <ref> [CG92, Ghe90, CMMS91, BCGS91, etc.] </ref> for the decidability of subtyping in the second-order system F : 1. Begin with an "original" presentation of the subtyping system that directly expresses its intended meaning, but which is not directly implementable. 2. <p> The following section will show that these conditions can always be achieved. With these restrictions, the proof of cut elimination is a straightforward extension of standard proofs for the second-order fragment (c.f. <ref> [BCGS91, CG92, CMMS91, CP94] </ref>). We begin with one technical lemma. 22 6.3.1 Lemma: Suppose ` S 2 K S and ` A T 1 : : : T n 2 K T .
Reference: [Com94] <author> Adriana B. Compagnoni. </author> <title> Subtyping in F ! ^ is decidable. </title> <type> Draft technical report, </type> <month> January </month> <year> 1994. </year>
Reference-contexts: The declaration of each type variable A in is extended with an upper bound, written A T , which constrains A to range only over subtypes of T in the appropriate kind. To allow new constraints of this form to be introduced 2 Compagnoni <ref> [Com94] </ref> has independently achieved some results closely related to ours. After early joint work on the formulation of F ! (c.f. [CP93]), vagaries of geography led our efforts onto separate, but parallel, tracks.
Reference: [CP93] <author> Adriana B. Compagnoni and Benjamin C. Pierce. </author> <title> Multiple inheritance via intersection types. </title> <type> Technical Report ECS-LFCS-93-275, </type> <institution> LFCS, University of Edinburgh, </institution> <month> August </month> <year> 1993. </year> <note> Also available as Catholic University Nijmegen computer science technical report 93-18. </note>
Reference-contexts: An early semantic model was given by Cardelli and Longo [CL91] using partial equivalence relations. Compagnoni and Pierce <ref> [CP93] </ref> gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. <p> To allow new constraints of this form to be introduced 2 Compagnoni [Com94] has independently achieved some results closely related to ours. After early joint work on the formulation of F ! (c.f. <ref> [CP93] </ref>), vagaries of geography led our efforts onto separate, but parallel, tracks.
Reference: [CP94] <author> Giuseppe Castagna and Benjamin Pierce. </author> <title> Decidable bounded quantification. </title> <booktitle> In Proceedings of Twenty First Annual ACM Symposium on Principles of Programming Languages, Portland, Oregon. ACM, Janu-ary 1994. </booktitle> <pages> 36 </pages>
Reference-contexts: The second order fragment of F ! , called F , has been studied in detail, yielding both positive [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] and some surprising negative results [Ghe93a, Ghe93b, GP92, Pie92] including undecidability. Decidable variants of F have been proposed <ref> [CW85, KS92, CP94] </ref> (our formulation of F ! is based on [CW85]). <p> it only requires S 2 T 2 when A is constrained to the common part of their domain: ` T 1 S 1 ; A T 1 ` S 2 T 2 This, indeed, is the form in which the rule appears in most presentations of second-order bounded quantification (c.f. <ref> [CP94] </ref> for a survey). <p> When T has a normal form (it will necessarily be unique), we denote it by T ! . Reduction to fi&gt;-normal form is written -! fi&gt; . 2.4 Subtyping The F ! subtyping relation ` S T is a straightforward extension of the subtyping relation of F <ref> [CW85, CG92, CP94] </ref>. We start by stipulating that fi&gt;-convertible types always lie in the same equivalence class in the subtype ordering (S-Conv), and that the subtype relation at every kind is reflexive (R-Refl) and transitive (R-Trans). Type assumptions from the context may be used as axioms (S-TVar). <p> The following section will show that these conditions can always be achieved. With these restrictions, the proof of cut elimination is a straightforward extension of standard proofs for the second-order fragment (c.f. <ref> [BCGS91, CG92, CMMS91, CP94] </ref>). We begin with one technical lemma. 22 6.3.1 Lemma: Suppose ` S 2 K S and ` A T 1 : : : T n 2 K T .
Reference: [CW85] <author> Luca Cardelli and Peter Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> Com--puting Surveys, </journal> <volume> 17(4), </volume> <month> December </month> <year> 1985. </year>
Reference-contexts: Cardelli [Car84] observed that refinement of object interfaces can be modeled by records and a simple form of subtyping. To account for the types of message-sending operations, Cardelli and Wegner <ref> [CW85] </ref> introduced bounded quantification. Fully capturing the object model of languages like Smalltalk required one further refinement, the extension to calculi with higher-order polymorphism, to deal properly with the interaction between subtyping and object encapsulation. <p> The second order fragment of F ! , called F , has been studied in detail, yielding both positive [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] and some surprising negative results [Ghe93a, Ghe93b, GP92, Pie92] including undecidability. Decidable variants of F have been proposed <ref> [CW85, KS92, CP94] </ref> (our formulation of F ! is based on [CW85]). <p> Decidable variants of F have been proposed [CW85, KS92, CP94] (our formulation of F ! is based on <ref> [CW85] </ref>). But for the full !-order calculus, next to nothing is known. 2 The analysis of F ! is significantly more challenging than that of F , principally because F ! introduces a rule of conversion guaranteeing that fi-convertible types occupy the same equivalence class in the subtype relation. <p> When T has a normal form (it will necessarily be unique), we denote it by T ! . Reduction to fi&gt;-normal form is written -! fi&gt; . 2.4 Subtyping The F ! subtyping relation ` S T is a straightforward extension of the subtyping relation of F <ref> [CW85, CG92, CP94] </ref>. We start by stipulating that fi&gt;-convertible types always lie in the same equivalence class in the subtype ordering (S-Conv), and that the subtype relation at every kind is reflexive (R-Refl) and transitive (R-Trans). Type assumptions from the context may be used as axioms (S-TVar). <p> ` A (A) (S-TVar) ` S 2 K (S-Top) ` Fun (A:K) S Fun (A:K) T ` S T (S-App) ` S 1 !S 2 T 1 !T 2 (S-Arrow) ; A U ` S 2 T 2 (S-All) 2.5 Typing The typing relation ` t 2 T is standard <ref> [CW85, CG92] </ref>, modulo a few extra kinding assumptions.
Reference: [Gal90] <author> Jean H. Gallier. </author> <title> On Girard's "candidats de reductibilite". </title> <editor> In Piergiorgio Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, number 31 in APIC Studies in Data Processing, </booktitle> <pages> pages 123-203. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: Now, any fi&gt;-reduction in F ! from S can be mirrored by a fi-reduction from F (S) of the same length in F ! . The existence of an infinite fi&gt;-reduction in F ! would thus contradict the strong normalization of F ! <ref> [Gir72, Gal90] </ref>. fl Next, we define the notion of -reduction and establish some of its basic properties. 10 5.3 Definition: Single-step -reduction is the least family of relations closed under: (A) 6= Top (K) A - (A) S -(; ATop (K)) S 0 F un (A:K)S Fun (A:K)S 0 S T
Reference: [Ghe90] <author> Giorgio Ghelli. </author> <title> Proof Theoretic Studies about a Minimal Type System Integrating Inclusion and Parametric Polymorphism. </title> <type> PhD thesis, </type> <institution> Universita di Pisa, </institution> <month> March </month> <year> 1990. </year> <type> Technical report TD-6/90, </type> <institution> Dipartimento di Informatica, Universita di Pisa. </institution>
Reference-contexts: Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. The second order fragment of F ! , called F , has been studied in detail, yielding both positive <ref> [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] </ref> and some surprising negative results [Ghe93a, Ghe93b, GP92, Pie92] including undecidability. Decidable variants of F have been proposed [CW85, KS92, CP94] (our formulation of F ! is based on [CW85]). <p> This is also the case in F ! . 6.1 Proof Outline Although the details of our development will be somewhat more involved, it is helpful to start by reviewing the standard argument <ref> [CG92, Ghe90, CMMS91, BCGS91, etc.] </ref> for the decidability of subtyping in the second-order system F : 1. Begin with an "original" presentation of the subtyping system that directly expresses its intended meaning, but which is not directly implementable. 2.
Reference: [Ghe93a] <author> G. Ghelli. </author> <title> Divergence of F type checking. </title> <type> Technical Report 5/93, </type> <institution> Dipartimento di Informatica, Uni-versita di Pisa, </institution> <year> 1993. </year>
Reference-contexts: A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. The second order fragment of F ! , called F , has been studied in detail, yielding both positive [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] and some surprising negative results <ref> [Ghe93a, Ghe93b, GP92, Pie92] </ref> including undecidability. Decidable variants of F have been proposed [CW85, KS92, CP94] (our formulation of F ! is based on [CW85]). <p> However, the extra flexibility offered by this refinement does not seem to be useful in practice and it is very costly: this rule is responsible for the failure of a number of important proof-theoretic properties in standard formulations of F <ref> [Ghe93a, Ghe93b, GP92, Pie92] </ref>, including decidability of subtyping.
Reference: [Ghe93b] <author> Giorgio Ghelli. </author> <title> Recursive types are not conservative over F . In Typed Lambda Calculus and Applications, </title> <month> March </month> <year> 1993. </year>
Reference-contexts: Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. The second order fragment of F ! , called F , has been studied in detail, yielding both positive <ref> [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] </ref> and some surprising negative results [Ghe93a, Ghe93b, GP92, Pie92] including undecidability. Decidable variants of F have been proposed [CW85, KS92, CP94] (our formulation of F ! is based on [CW85]). <p> A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. The second order fragment of F ! , called F , has been studied in detail, yielding both positive [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] and some surprising negative results <ref> [Ghe93a, Ghe93b, GP92, Pie92] </ref> including undecidability. Decidable variants of F have been proposed [CW85, KS92, CP94] (our formulation of F ! is based on [CW85]). <p> However, the extra flexibility offered by this refinement does not seem to be useful in practice and it is very costly: this rule is responsible for the failure of a number of important proof-theoretic properties in standard formulations of F <ref> [Ghe93a, Ghe93b, GP92, Pie92] </ref>, including decidability of subtyping.
Reference: [Gir72] <author> Jean-Yves Girard. </author> <title> Interpretation fonctionelle et elimination des coupures de l'arithmetique d'ordre superieur. </title> <type> PhD thesis, </type> <institution> Universite Paris VII, </institution> <year> 1972. </year>
Reference-contexts: Section 7 extends the analysis to the decidability of typing. In the technical development, we sometimes elide routine proofs. Those not shown are straightforward when performed in the order given. 2 Definition of F ! Girard's System F ! <ref> [Gir72] </ref> is a typed -calculus with higher-order polymorphism. <p> Besides the term abstraction (fun (x:T ) t) and application (f a) of the simply typed -calculus [Chu40] and the type abstraction (fun (A:K) t) and application (t [T ]) of the second-order polymorphic -calculus <ref> [Gir72, Rey74] </ref>, it includes the possibility of abstraction (Fun (A:K) T ) and application (T U ) within type expressions. <p> Now, any fi&gt;-reduction in F ! from S can be mirrored by a fi-reduction from F (S) of the same length in F ! . The existence of an infinite fi&gt;-reduction in F ! would thus contradict the strong normalization of F ! <ref> [Gir72, Gal90] </ref>. fl Next, we define the notion of -reduction and establish some of its basic properties. 10 5.3 Definition: Single-step -reduction is the least family of relations closed under: (A) 6= Top (K) A - (A) S -(; ATop (K)) S 0 F un (A:K)S Fun (A:K)S 0 S T
Reference: [GLT89] <author> Jean-Yves Girard, Yves Lafont, and Paul Taylor. </author> <title> Proofs and Types, </title> <booktitle> volume 7 of Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1989. </year>
Reference-contexts: By analogy with the sequent calculus or the simply typed -calculus (c.f. <ref> [GLT89] </ref>), this cut rule can be almost completely eliminated by rewriting derivations. But not completely. In one situation, transitivity is actually essential. Statements with variables on the left-hand side cannot, in general, be proved without using transitivity.
Reference: [GP92] <author> Giorgio Ghelli and Benjamin Pierce. </author> <title> Bounded existentials and minimal typing. </title> <type> Draft report, </type> <month> June </month> <year> 1992. </year>
Reference-contexts: A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. The second order fragment of F ! , called F , has been studied in detail, yielding both positive [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] and some surprising negative results <ref> [Ghe93a, Ghe93b, GP92, Pie92] </ref> including undecidability. Decidable variants of F have been proposed [CW85, KS92, CP94] (our formulation of F ! is based on [CW85]). <p> However, the extra flexibility offered by this refinement does not seem to be useful in practice and it is very costly: this rule is responsible for the failure of a number of important proof-theoretic properties in standard formulations of F <ref> [Ghe93a, Ghe93b, GP92, Pie92] </ref>, including decidability of subtyping.
Reference: [HP94] <author> Martin Hofmann and Benjamin Pierce. </author> <title> A unifying type-theoretic framework for objects. </title> <booktitle> In Symposium on Theoretical Aspects of Computer Science, </booktitle> <year> 1994. </year> <note> Extended version available as "An Abstract View of Objects and Subtyping (Preliminary Report)," </note> <institution> University of Edinburgh, </institution> <type> LFCS technical report ECS-LFCS-92-226, </type> <year> 1992. </year>
Reference-contexts: Pierce and Turner [PT93a, PT93b] gave a similar model using existential types instead of recursive types to capture object encapsulation, effectively working within pure F ! . These two approaches were generalized by Hofmann and Pierce <ref> [HP94] </ref> to an abstract, axiomatic presentation of objects and subtyping. fl University of Erlangen-Nurnberg, IMMD VII, Martensstr. 3, 91058 Erlangen, Germany. Electronic mail: mnsteffe@informatik.uni-erlangen.de. y Department of Computer Science, University of Edinburgh, The King's Buildings, Edinburgh, EH9 3JZ, U.K. <p> This extension does seem useful in practice (e.g. <ref> [HP94] </ref>), but its algorithmic implications are unclear. 3 2.1 Syntax The kinds, types, terms, and contexts of F ! are defined by the following abstract grammar: K ::= ? kind of types j K!K kind of type operators T ::= A type variable j Fun (A:K) T type operator j T
Reference: [IM91] <editor> T. Ito and A. R. Meyer, editors. </editor> <booktitle> Theoretical Aspects of Computer Software (Sendai, Japan), number 526 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1991. </year>
Reference: [KS92] <author> Dinesh Katiyar and Sriram Sankar. </author> <title> Completely bounded quantification is decidable. </title> <booktitle> In Proceedings of the ACM SIGPLAN Workshop on ML and its Applications, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: The second order fragment of F ! , called F , has been studied in detail, yielding both positive [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] and some surprising negative results [Ghe93a, Ghe93b, GP92, Pie92] including undecidability. Decidable variants of F have been proposed <ref> [CW85, KS92, CP94] </ref> (our formulation of F ! is based on [CW85]).
Reference: [Mar88] <author> Simone Martini. </author> <title> Bounded quantifiers have interval models. </title> <booktitle> In Proceedings of the ACM Conference on Lisp and Functional Programming, </booktitle> <pages> pages 174-183, </pages> <address> Snowbird, Utah, </address> <month> July </month> <year> 1988. </year> <note> ACM. </note>
Reference-contexts: Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. The second order fragment of F ! , called F , has been studied in detail, yielding both positive <ref> [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] </ref> and some surprising negative results [Ghe93a, Ghe93b, GP92, Pie92] including undecidability. Decidable variants of F have been proposed [CW85, KS92, CP94] (our formulation of F ! is based on [CW85]).
Reference: [MHF93] <author> John C. Mitchell, Furio Honsell, and Kathleen Fisher. </author> <title> A lambda calculus of objects and method specialization. </title> <booktitle> In 1993 IEEE Symposium on Logic in Computer Science, </booktitle> <month> June </month> <year> 1993. </year>
Reference: [Mit90] <author> John C. Mitchell. </author> <title> Toward a typed foundation for method specialization and inheritance. </title> <booktitle> In Proceedings of the 17th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 109-124, </pages> <month> January </month> <year> 1990. </year> <editor> Also in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (MIT Press; to appear, </title> <year> 1994). </year>
Reference-contexts: Many of the ideas behind this system, called F ! ("F-omega-sub"), are due to Cardelli, particularly to his 1988 paper, "Structural Subtyping and the Notion of Power Type" [Car88]; the extension of the subtype relation to type operators was developed by Cardelli and Mitchell <ref> [Car90, Mit90, BM92] </ref>. An early semantic model was given by Cardelli and Longo [CL91] using partial equivalence relations. Compagnoni and Pierce [CP93] gave a model for an extension of F ! with intersection types. A more powerful model including recursive types was given by Bruce and Mitchell [BM92].
Reference: [Pie92] <author> Benjamin C. Pierce. </author> <title> Bounded quantification is undecidable. </title> <booktitle> In Proceedings of the Nineteenth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <address> (Albequerque, New Mexico), </address> <month> January </month> <year> 1992. </year> <note> To appear in Information and Computation, </note> <editor> and in Carl A. Gunter and John C. Mitchell, editors, </editor> <title> Theoretical Aspects of Object-Oriented Programming: Types, Semantics, and Language Design (MIT Press; to appear, </title> <year> 1994). </year>
Reference-contexts: A more powerful model including recursive types was given by Bruce and Mitchell [BM92]. The second order fragment of F ! , called F , has been studied in detail, yielding both positive [Mar88, BL90, BCGS91, Ghe90, CG92, CG91, CMMS91, Ghe93b] and some surprising negative results <ref> [Ghe93a, Ghe93b, GP92, Pie92] </ref> including undecidability. Decidable variants of F have been proposed [CW85, KS92, CP94] (our formulation of F ! is based on [CW85]). <p> However, the extra flexibility offered by this refinement does not seem to be useful in practice and it is very costly: this rule is responsible for the failure of a number of important proof-theoretic properties in standard formulations of F <ref> [Ghe93a, Ghe93b, GP92, Pie92] </ref>, including decidability of subtyping.
Reference: [PT93a] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Simple type-theoretic foundations for object-oriented programming. </title> <journal> Journal of Functional Programming, </journal> <note> 1993. To appear; a preliminary version appeared in Principles of Programming Languages, </note> <year> 1993, </year> <title> and as University of Edinburgh technical report ECS-LFCS-92-225, under the title "Object-Oriented Programming Without Recursive Types". </title>
Reference-contexts: Pierce and Turner <ref> [PT93a, PT93b] </ref> gave a similar model using existential types instead of recursive types to capture object encapsulation, effectively working within pure F ! .
Reference: [PT93b] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Statically typed friendly functions via partially abstract types. </title> <type> Technical Report ECS-LFCS-93-256, </type> <institution> University of Edinburgh, LFCS, </institution> <month> April </month> <year> 1993. </year> <note> Also available as INRIA-Rocquencourt Rapport de Recherche No. 1899. </note>
Reference-contexts: Pierce and Turner <ref> [PT93a, PT93b] </ref> gave a similar model using existential types instead of recursive types to capture object encapsulation, effectively working within pure F ! .
Reference: [Rey74] <author> John Reynolds. </author> <title> Towards a theory of type structure. </title> <booktitle> In Proc. Colloque sur la Programmation, </booktitle> <pages> pages 408-425, </pages> <address> New York, 1974. </address> <publisher> Springer-Verlag LNCS 19. </publisher>
Reference-contexts: Besides the term abstraction (fun (x:T ) t) and application (f a) of the simply typed -calculus [Chu40] and the type abstraction (fun (A:K) t) and application (t [T ]) of the second-order polymorphic -calculus <ref> [Gir72, Rey74] </ref>, it includes the possibility of abstraction (Fun (A:K) T ) and application (T U ) within type expressions.
Reference: [SP93] <author> Paula Severi and Erik Poll. </author> <title> Pure type systems with definitions. </title> <note> Computing science note 93/24, </note> <institution> Eindhoven University of Technology, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Besides the usual fi and &gt; reductions, we allow variables to be replaced by their upper bounds from the context. -reduction is reminiscent of the common operation in type checker and proof checker implementations of replacing a type definition by its expansion (c.f. <ref> [SP93] </ref>).
Reference: [Wan87] <author> Mitchell Wand. </author> <title> Complete type inference for simple objects. </title> <booktitle> In Proceedings of the IEEE Symposium on Logic in Computer Science, </booktitle> <address> Ithaca, NY, </address> <month> June </month> <year> 1987. </year>
Reference: [Wan88] <author> Mitchell Wand. </author> <title> Corrigendum: Complete type inference for simple objects. </title> <booktitle> In Proceedings of the IEEE Symposium on Logic in Computer Science, </booktitle> <year> 1988. </year>
Reference: [Wan89] <author> Mitchell Wand. </author> <title> Type inference for record concatenation and multiple inheritance. </title> <booktitle> In Fourth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 92-97, </pages> <address> Pacific Grove, CA, </address> <month> June </month> <year> 1989. </year> <month> 37 </month>
References-found: 46

