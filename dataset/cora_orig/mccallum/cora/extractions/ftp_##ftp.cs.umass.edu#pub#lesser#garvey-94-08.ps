URL: ftp://ftp.cs.umass.edu/pub/lesser/garvey-94-08.ps
Refering-URL: http://dis.cs.umass.edu/~garvey/publications.html
Root-URL: 
Title: A Negotiation-based Interface Between a Real-time Scheduler and a Decision-Maker 1  
Author: Alan Garvey and Keith Decker and Victor Lesser 
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: UMass Computer Science Technical Report 94-08 March 17, 1994 Abstract In our work on real-time problem solving we have found that the interface between the decision-maker and the real-time scheduler needs to be complex and bidirectional. We argue that this interface can usefully be modeled as a negotiation process. In this paper we present the details of the interface, as well as our scheduler that is capable of scheduling real-time tasks and providing the information required by the interface. 
Abstract-found: 1
Intro-found: 1
Reference: [ Brooks, 1986 ] <author> Rodney A. Brooks. </author> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Journal of Robotics and Automation, </journal> <volume> RA-2(1):14-23, </volume> <month> March </month> <year> 1986. </year>
Reference-contexts: A related paper [ Decker and Lesser, 1994 ] describes how the coordination modules communicate with one another. Another layered architecture approach is the subsumption architecture <ref> [ Brooks, 1986 ] </ref> . In this architecture modules at a higher level can modulate the behavior of lower-level modules by overriding their inputs and outputs.
Reference: [ Cheng et al., 1988 ] <author> S. Cheng, J. Stankovic, and K. Ramamritham. </author> <title> Scheduling algorithms for hard real-time systems. In Hard Real-Time Systems. </title> <publisher> IEEE Press, </publisher> <year> 1988. </year>
Reference-contexts: The importance of local commitments such as these are as soft constraints on the possible solutions. Any scheduler that can schedule real-time method executions can already deal with hard constraints such as deadlines and earliest start times. Hard commitments can be used to provide guarantees <ref> [ Cheng et al., 1988 ] </ref> by requiring commitments to be satisfied in all valid schedules. Soft commitments are needed to handle the coordination of multiple agents where there is more than one way to solve a task or where there are soft coordination relationships such as facilitates. <p> Soft commitments are needed to handle the coordination of multiple agents where there is more than one way to solve a task or where there are soft coordination relationships such as facilitates. They are also useful in real-time systems, as shown by SPRING's use of endorsements <ref> [ Cheng et al., 1988 ] </ref> to indicate commitments that may only be violated when more important tasks arrive. <p> Such uncertainty increases the difficulty of scheduling and potentially reduces the reliability of commitments. Guaranteeing the satisfaction of commitments would require the same kind of worst-case execution time scheduling currently done by systems-oriented real-time operating systems <ref> [ Cheng et al., 1988 ] </ref> , however, a more probabilistic scheduler could try to produce schedules that improve performance in most cases, but occasionally fail due to worst-case task performance. 10
Reference: [ Decker and Lesser, 1993 ] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Quantitative modeling of complex computational task environments. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 217-224, </pages> <address> Washington, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: In our work, problems are presented to the decision-maker as TMS task structures. The form of such task structures is described in more detail in <ref> [ Decker and Lesser, 1993 ] </ref> .
Reference: [ Decker and Lesser, 1994 ] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Designing a family of coordination algorithms. </title> <note> Submitted to AAAI-94, </note> <year> 1994. </year>
Reference-contexts: As mentioned above, this paper focuses on the interface between each coordination module and local scheduler, as well as on the scheduling algorithm used by the local scheduler. A related paper <ref> [ Decker and Lesser, 1994 ] </ref> describes how the coordination modules communicate with one another. Another layered architecture approach is the subsumption architecture [ Brooks, 1986 ] . In this architecture modules at a higher level can modulate the behavior of lower-level modules by overriding their inputs and outputs.
Reference: [ Garvey and Lesser, 1993 ] <author> Alan Garvey and Victor Lesser. </author> <title> Design-to-time real-time scheduling. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 23(6) </volume> <pages> 1491-1502, </pages> <year> 1993. </year>
Reference-contexts: The algorithm we present 5 here is an implemented version of the design-to-time scheduling paradigm discussed in <ref> [ Garvey and Lesser, 1993 ] </ref> . a problem of the form described above, the scheduler attempts to produce schedules that adequately solve the problem.
Reference: [ Garvey et al., 1993 ] <author> Alan Garvey, Marty Humphrey, and Victor Lesser. </author> <title> Task interdependencies in design-to-time real-time scheduling. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 580-585, </pages> <address> Washington, D.C., </address> <month> July </month> <year> 1993. </year>
Reference-contexts: In real-time scenarios it is crucial to at least be able to predict the worst-case performance of the scheduler. 2.2 Basic Scheduling Algorithm In general, these scheduling problems are NP-Hard. For that reason, heuristic scheduling is necessary for all but the smallest problem instances. <ref> [ Garvey et al., 1993 ] </ref> describes an optimal algorithm for a simplified version of this kind of scheduling problem.
Reference: [ Hudlick a and Lesser, 1987 ] <author> E. Hudlick a and V. R. Lesser. </author> <title> Modeling and diagnosing problem-solving system behavior. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 17(3) </volume> <pages> 407-419, </pages> <month> May/June </month> <year> 1987. </year>
Reference-contexts: Our approach to modulation is more complex since our modulations can be bidirectional and take the form of constraints on inputs and outputs rather than simple overrides. A layered approach is described in <ref> [ Hudlick a and Lesser, 1987 ] </ref> where a diagnosis system watches and informs the scheduling process. Another layered architecture 1 (briefly mentioned above) that has been proposed for real-time AI tasks is the extensions to the Spring real-time operating system described in [ Stankovic et al., 1989 ] .
Reference: [ L aasri et al., 1992 ] <author> Brigitte L aasri, Hassan L aasri, Susan Lander, and Victor Lesser. </author> <title> A generic model for intelligent negotiating agents. </title> <journal> International Journal on Intelligent Cooperative Information Systems, </journal> <volume> 1(2) </volume> <pages> 291-317, </pages> <year> 1992. </year>
Reference-contexts: It is undesirable to reproduce a scheduler each time a new problem area is investigated. We believe that the communication between the decision-maker and the scheduler can best be modeled as a process of negotiation. Negotiation is coordinated communication with the goal of enabling or improving problem solving. <ref> [ L aasri et al., 1992 ] </ref> describe the information exchanged in negotiation in terms of proposals, critiques, and explanations. The description of the interface in this paper is arranged around these kinds of information.
Reference: [ Russell and Wefald, 1991 ] <author> Stuart Russell and Eric Wefald. </author> <title> Do the Right Thing: Studies in Limited Rationality. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: by which the scheduler should complete; a satisficing value for a schedule (the scheduler completes when a schedule of at least this value is found); or a decision-theoretic tradeoff function that indicates the added value of spending time finding better schedules versus executing the first element of the current schedule <ref> [ Russell and Wefald, 1991 ] </ref> . In non-real-time scenarios, this might not be particularly important as long as the runtime of the scheduler is small compared to the grain size of application tasks.
Reference: [ Shoham and Tennenholtz, 1992 ] <author> Y. Shoham and M. Tennenholtz. </author> <title> On the synthesis of useful social laws for artificial agnet societies (preliminary report). </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 276-281, </pages> <address> San Jose, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: This component is necessary for achieving coordinated behavior in complex domains. These non-local commitments might be created at run time by the decision-makers, or they might be derived from pre-defined `social laws' <ref> [ Shoham and Tennenholtz, 1992 ] </ref> that all agents agree to, or are constructed to, satisfy.
Reference: [ Stankovic et al., 1989 ] <author> J. A. Stankovic, K. Ramamritham, and D. Niehaus. </author> <title> On using the Spring kernel to support real-time AI applications. </title> <booktitle> In Proceedings of the EuroMicro Workshop on Real-time Systems, </booktitle> <year> 1989. </year> <month> 11 </month>
Reference-contexts: It is usually assumed that the application passes tasks on to the scheduler for scheduling and does not react when the scheduler is unable to schedule some tasks before their deadlines or only able to provide low quality solutions. A more complex interface is proposed in <ref> [ Stankovic et al., 1989 ] </ref> that allows the application to ask what-if questions of the scheduler and modulate the behavior of the scheduler, however these ideas have not been implemented to date. <p> A layered approach is described in [ Hudlick a and Lesser, 1987 ] where a diagnosis system watches and informs the scheduling process. Another layered architecture 1 (briefly mentioned above) that has been proposed for real-time AI tasks is the extensions to the Spring real-time operating system described in <ref> [ Stankovic et al., 1989 ] </ref> . In this work, elements of the interface between the AI level and the scheduler include time planners that allow the AI level to ask what-if scheduling questions without disrupting the low level scheduling.
References-found: 11

