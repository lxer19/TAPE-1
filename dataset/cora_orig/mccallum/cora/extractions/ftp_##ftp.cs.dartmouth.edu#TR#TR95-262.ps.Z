URL: ftp://ftp.cs.dartmouth.edu/TR/TR95-262.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR95-262/
Root-URL: http://www.cs.dartmouth.edu
Title: A 2 3 -Approximation Algorithm for the Shortest Superstring Problem Abstract Given a collection of
Author: Chris Armen and Clifford Stein 
Note: proposed by Gallant, Maier and Storer (JCSS '80). Much of the recent interest in the problem is  4 -approximation (WADS '95).  
Date: November 20, 1995  
Affiliation: Dartmouth College  
Pubnum: Technical Report PCS-TR95-262  
Abstract: The problem has been shown to be NP-hard; in fact, it was shown by Blum et al.(JACM '94) to be MAX SNP-hard. The first O(1)-approximation was also due to Blum et al., who gave an algorithm that always returns a superstring no more than 3 times the length of an optimal solution. Several researchers have published results that improve on the approximation ratio; of these, the best previous result is our algorithm ShortString, which achieves a 2 3 We present our new algorithm, G-ShortString, which achieves a ratio of 2 2 3 . It generalizes the ShortString algorithm, but the analysis differs substantially from that of ShortString. Our previous work identified classes of strings that have a nested periodic structure, and which must be present in the worst case for our algorithms. We introduced machinery to descibe these strings and proved strong structural properties about them. In this paper we extend this study to strings that exhibit a more relaxed form of the same structure, and we use this understanding to obtain our improved result. 1 Introduction 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Armen and C.Stein. </author> <title> Improved length bounds for the shortest superstring problem. </title> <booktitle> In Proceedings of Workshop on Algorithms and Data Structures, </booktitle> <pages> pages 494-505, </pages> <year> 1995. </year>
Reference-contexts: Kosaraju et al. obtained an improved result for the maximum traveling salesman problem; this more general result can be used by the algorithm of [4] to obtain an approximation slightly better than 2:8 [15]. Our result of 2 3 4 <ref> [2, 1] </ref> was the best known until recently, and in fact can be combined with the algorithm of [15] to obtain an approximation ratio of about 2:725. In this report we describe our 2 2 3 -approximation algorithm for the shortest superstring problem, which also appears in [3].
Reference: [2] <author> C. Armen and C. Stein. </author> <title> Short supertrings and the structure of overlapping strings. </title> <note> To appear in J. of Computational Biology, </note> <year> 1995. </year>
Reference-contexts: Kosaraju et al. obtained an improved result for the maximum traveling salesman problem; this more general result can be used by the algorithm of [4] to obtain an approximation slightly better than 2:8 [15]. Our result of 2 3 4 <ref> [2, 1] </ref> was the best known until recently, and in fact can be combined with the algorithm of [15] to obtain an approximation ratio of about 2:725. In this report we describe our 2 2 3 -approximation algorithm for the shortest superstring problem, which also appears in [3]. <p> In this report we describe our 2 2 3 -approximation algorithm for the shortest superstring problem, which also appears in [3]. Algorithmically, the approach is a generalization of the one taken in <ref> [2] </ref>, but the analysis is very different. We now give a brief overview of our approach. <p> In this section we describe the machinery for describing 2-cycles developed in <ref> [2] </ref>. Suppose we choose v and t as representatives of two cycles of the first cycle cover C, and they form a 2-cycle in CC in which one of ov (v; t) or ov (t; v) is large but the other is small. <p> As in <ref> [2] </ref>, our strategy is to anticipate, when we select a representative r j , the possible involvement of r j as the larger-period string in a (g; h)-HO2-cycle. In [2] we used criteria for doing so which were based on our detailed knowledge of the structure of ( 3 4 ; <p> As in <ref> [2] </ref>, our strategy is to anticipate, when we select a representative r j , the possible involvement of r j as the larger-period string in a (g; h)-HO2-cycle. In [2] we used criteria for doing so which were based on our detailed knowledge of the structure of ( 3 4 ; 3 4 )-repeaters. <p> In order to prove the lemma, we require a proof technique introduced in <ref> [2] </ref>, the shift argument. We describe this technique below. We apply the shift argument to cycles that include two or more repeaters. We are generally interested in proving that some property holds; we assume that it does not, and use the shift argument to derive a contradiction. <p> The structure of our approach is similar to that of <ref> [2] </ref>, though the analysis we use in each case is completely different than that used for ShortString. We relate the performance of our algorithm to that of Generic; the case of interest is when a cycle in CC is a ( 2 3 ; 2 3 )-HO2-cycle.
Reference: [3] <author> Chris Armen. </author> <title> Approximation Algorithms for the Shortest Superstring Problem. </title> <type> PhD thesis, </type> <institution> Dartmouth College, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: In this report we describe our 2 2 3 -approximation algorithm for the shortest superstring problem, which also appears in <ref> [3] </ref>. Algorithmically, the approach is a generalization of the one taken in [2], but the analysis is very different. We now give a brief overview of our approach.
Reference: [4] <author> A. Blum, T. Jiang, M. Li, J. Tromp, and M. Yannakakis. </author> <title> Linear approximation of shortest superstrings. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 328-336, </pages> <year> 1991. </year>
Reference-contexts: The shortest superstring problem is the problem of finding a superstring ff of minimum length. The shortest superstring problem is MAX SNP-hard <ref> [4] </ref>; several heuristics and approximation algorithms have been proposed. One often used algorithm is a greedy algorithm that repeatedly merges the pair of strings with the maximum amount of overlap. <p> Czumaj et al.[6] refined the algorithm of [22] to achieve a 2 5 6 approximation. Kosaraju et al. obtained an improved result for the maximum traveling salesman problem; this more general result can be used by the algorithm of <ref> [4] </ref> to obtain an approximation slightly better than 2:8 [15]. Our result of 2 3 4 [2, 1] was the best known until recently, and in fact can be combined with the algorithm of [15] to obtain an approximation ratio of about 2:725. <p> The key to our new algorithm is to exploit the periodic structure of the cycles of strings that arise in this problem. In particular, the 3-approximation of <ref> [4] </ref> uses a theorem about infinite periodic functions [8], and the correspondence between periodic functions and strings in cycles. <p> Given this understanding, we will be able to predict the ways in which overlap between certain strings can occur, and thus plan for it algorithmically. 2 Preliminaries For consistency, we use some notation and definitions of <ref> [4] </ref> and [22]. We assume, without loss of generality, that the set S of strings is substring free, i.e. no s j is a substring of s i , i 6= j. <p> Step (6) correctly extends the superstring for R into a superstring for S, as proved in [22]. We now analyze the generic algorithm in a way that anticipates our improvements. A more detailed analysis appears in <ref> [4] </ref>. Let d (C 0 ) be the sum of the distances and ov (C 0 ) be the sum of the overlaps of the edges in a cycle cover C 0 . Consider the second cycle cover CC. <p> Now we employ a key lemma from <ref> [4] </ref>: Lemma 2.1 ([4]) Let c; c 0 be cycles in a minimum cycle cover C with strings s 2 c and s 0 2 c 0 . Then the overlap between s; s 0 is less than d (c) + d (c 0 ). <p> We define a few terms describing the structure of cycles. The reader is referred to <ref> [4] </ref> for a more complete discussion. We call a string s irreducible if all cyclic shifts of s yield unique strings, and reducible otherwise. We say that s has periodicity x if there exists a string t with jtj = x such that s is substring of t 1 .
Reference: [5] <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press/McGraw-Hill, </publisher> <year> 1990. </year>
Reference: [6] <author> A. Czumaj, L. Gasieniec, M. Piotrow, and W. Rytter. </author> <title> Parallel and sequential approximations of shortest superstrings. </title> <booktitle> In Proceedings of Fourth Scandinavian Workshop on Algorithm Theory, </booktitle> <pages> pages 95-106, </pages> <year> 1994. </year>
Reference-contexts: However, this correspondence breaks down for approximations; approximating the largest overlap appears to be an easier problem (cf. [23, 22, 15]) than approximating the shortest superstring. We now describe a generic superstring algorithm used, in some form, by [4],[22] and <ref> [6] </ref>. An execution of the algorithm appears as Fig. 1. Generic SuperString Algorithm 1) Find a minimum cost cycle cover C in the distance graph G. 3 2) For each cycle c 2 C, choose one string to be a representative r c .
Reference: [7] <author> A. </author> <title> Lesk (edited). Computational Molecular Biology, Sources and Methods for Sequence Analysis. </title> <publisher> Oxford University Press, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction The shortest superstring problem has applications in both computational biology <ref> [7, 16, 18] </ref> and data compression [10, 20]. We begin by describing the former. DNA sequencing is the task of determining the sequence of nucleotides in a molecule of DNA.
Reference: [8] <author> N. Fine and H. Wilf. </author> <title> Uniqueness theorems for periodic functions. </title> <journal> Proceedings of the American Mathematical Society, </journal> <volume> 16 </volume> <pages> 109-114, </pages> <year> 1965. </year>
Reference-contexts: The key to our new algorithm is to exploit the periodic structure of the cycles of strings that arise in this problem. In particular, the 3-approximation of [4] uses a theorem about infinite periodic functions <ref> [8] </ref>, and the correspondence between periodic functions and strings in cycles. However, the particular instances of cycle patching that appear to be difficult actually involve short periodic strings, that is, strings that are periodic, but whose period may repeat only slightly more than once.
Reference: [9] <author> A.M. Frieze, G. Galbiati, and F. Maffoli. </author> <title> On the worst case performance of some algorithms for the asymmetric travelling salesman problem. </title> <journal> Networks, </journal> <volume> 12 </volume> <pages> 23-39, </pages> <year> 1982. </year>
Reference-contexts: Since pref (s i ; s j ) jsj, we can conclude that opt (T SP ) opt (S), where opt (T SP ) is the optimal solution to TSP defined above. This TSP is directed (sometimes called asymmetric); thus the best known approximation <ref> [9] </ref> is only within a factor of O (log n). Therefore, we must exploit more of the structure of the problem in order to achieve better bounds.
Reference: [10] <author> J. Gallant, D. Maier, and J. Storer. </author> <title> On finding minimal length superstrings. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 20 </volume> <pages> 50-58, </pages> <year> 1980. </year>
Reference-contexts: 1 Introduction The shortest superstring problem has applications in both computational biology [7, 16, 18] and data compression <ref> [10, 20] </ref>. We begin by describing the former. DNA sequencing is the task of determining the sequence of nucleotides in a molecule of DNA. These nucleotides are one of adenine, cytosine, guanine, and thymine, and are typically represented by the alphabet fa; c; g; tg.
Reference: [11] <author> D. Gusfield, G. Landau, and B. Schieber. </author> <title> An efficient algorithm for the all pairs suffix-prefix problem. </title> <journal> Information Processing Letters, </journal> (41):181-185, March 1992. 
Reference-contexts: Each string is therefore included in the solution ff. G-ShortString runs in polynomial time. The distance graph G can be built in O (jSj + n 2 ) time <ref> [11] </ref>, and the cycle cover computations take O (n 3 ) time [17]. These two results determine the running time of Generic. In addition, our algorithm must find all of the ( 2 3 )-repeaters in each cycle c 2 C in G-FindReps (c).
Reference: [12] <author> Tao Jiang and Ming Li. </author> <title> Approximating shortest superstrings with constraints. </title> <journal> Therotical Computer Science, </journal> (134):473-491, 1994. 
Reference: [13] <author> J.D. Kececioglu and E.W. Myers. </author> <title> Combinatorial algorithms for dna sequence assembly. </title> <journal> Algorithmica, </journal> 13(1/2):7-51, 1995. 
Reference: [14] <author> John D. Kececioglu. </author> <title> Exact and approximation algorithms for DNA sequence reconstruction. </title> <type> PhD thesis, </type> <institution> University of Arizona, </institution> <year> 1991. </year>
Reference: [15] <author> R. Kosaraju, J. Park, and C. Stein. </author> <title> Long tours and short superstrings. </title> <booktitle> In Proceedings of the 35th Annual Symposium on Foundations of Computer Science, </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: Czumaj et al.[6] refined the algorithm of [22] to achieve a 2 5 6 approximation. Kosaraju et al. obtained an improved result for the maximum traveling salesman problem; this more general result can be used by the algorithm of [4] to obtain an approximation slightly better than 2:8 <ref> [15] </ref>. Our result of 2 3 4 [2, 1] was the best known until recently, and in fact can be combined with the algorithm of [15] to obtain an approximation ratio of about 2:725. <p> the maximum traveling salesman problem; this more general result can be used by the algorithm of [4] to obtain an approximation slightly better than 2:8 <ref> [15] </ref>. Our result of 2 3 4 [2, 1] was the best known until recently, and in fact can be combined with the algorithm of [15] to obtain an approximation ratio of about 2:725. In this report we describe our 2 2 3 -approximation algorithm for the shortest superstring problem, which also appears in [3]. Algorithmically, the approach is a generalization of the one taken in [2], but the analysis is very different. <p> A superstring which has minimum length, or distance, also has maximum overlap. However, this correspondence breaks down for approximations; approximating the largest overlap appears to be an easier problem (cf. <ref> [23, 22, 15] </ref>) than approximating the shortest superstring. We now describe a generic superstring algorithm used, in some form, by [4],[22] and [6]. An execution of the algorithm appears as Fig. 1.
Reference: [16] <author> M. Li. </author> <title> Towards a DNA sequencing theory (learning a string). </title> <booktitle> In Proceedings of the 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 125-134, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction The shortest superstring problem has applications in both computational biology <ref> [7, 16, 18] </ref> and data compression [10, 20]. We begin by describing the former. DNA sequencing is the task of determining the sequence of nucleotides in a molecule of DNA.
Reference: [17] <author> Christos H. Papadimitriou and Kenneth Steiglitz. </author> <title> Combinatorial Optimization, Algorithms and Complexity. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1982. </year>
Reference-contexts: A minimum-cost cycle cover is a cycle cover such that the sum of the weights of the edges in all the cycles is minimized. A minimum-cost cycle cover can be computed in O (n 3 ) time by a well-known reduction to the assignment problem <ref> [17] </ref>. Since a tour is a cycle cover, opt (C) opt (T SP ). When we say that a string s i is in some cycle c of cycle cover C, we mean that the vertex v i with which s i is associated is in cycle c. <p> Each string is therefore included in the solution ff. G-ShortString runs in polynomial time. The distance graph G can be built in O (jSj + n 2 ) time [11], and the cycle cover computations take O (n 3 ) time <ref> [17] </ref>. These two results determine the running time of Generic. In addition, our algorithm must find all of the ( 2 3 )-repeaters in each cycle c 2 C in G-FindReps (c).
Reference: [18] <author> H. Peltola, H. Soderlund, J. Tarjio, and E. Ukkonen. </author> <title> Algorithms for some string matching problems arising in molecular genetics. </title> <booktitle> In Proceedings of the IFIP Congress, </booktitle> <pages> pages 53-64, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction The shortest superstring problem has applications in both computational biology <ref> [7, 16, 18] </ref> and data compression [10, 20]. We begin by describing the former. DNA sequencing is the task of determining the sequence of nucleotides in a molecule of DNA.
Reference: [19] <author> Graham A. Stephen. </author> <title> String searching algorithms. </title> <publisher> World Scientific, </publisher> <year> 1994. </year> <month> 23 </month>
Reference: [20] <author> J. Storer. </author> <title> Data compression: methods and theory. </title> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction The shortest superstring problem has applications in both computational biology [7, 16, 18] and data compression <ref> [10, 20] </ref>. We begin by describing the former. DNA sequencing is the task of determining the sequence of nucleotides in a molecule of DNA. These nucleotides are one of adenine, cytosine, guanine, and thymine, and are typically represented by the alphabet fa; c; g; tg.
Reference: [21] <author> J. Tarhio and E. Ukkonen. </author> <title> A greedy approximation algorithm for constructing shortest common superstrings. </title> <journal> Theoretical Computer Science, </journal> <volume> 57 </volume> <pages> 131-145, </pages> <year> 1988. </year>
Reference-contexts: The shortest superstring problem is MAX SNP-hard [4]; several heuristics and approximation algorithms have been proposed. One often used algorithm is a greedy algorithm that repeatedly merges the pair of strings with the maximum amount of overlap. Turner [23] and Tarhio and Ukkonnen <ref> [21] </ref> independently proved that the greedy algorithm constructs a superstring that achieves at least half as much overlap as an optimal superstring. However, this does not guarantee a constant approximation with respect to the length of the resulting superstring.
Reference: [22] <author> Shang-Hua Teng and Frances Yao. </author> <title> Approximating shortest superstrings. </title> <booktitle> In Proceedings of the 34th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 158-165, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Teng and Yao <ref> [22] </ref> gave a nongreedy algorithm that finds a string that is within 2 8 9 of optimal. Subsequently, three results appeared that achieved better approximation ratios using very different techniques. Czumaj et al.[6] refined the algorithm of [22] to achieve a 2 5 6 approximation. <p> Teng and Yao <ref> [22] </ref> gave a nongreedy algorithm that finds a string that is within 2 8 9 of optimal. Subsequently, three results appeared that achieved better approximation ratios using very different techniques. Czumaj et al.[6] refined the algorithm of [22] to achieve a 2 5 6 approximation. Kosaraju et al. obtained an improved result for the maximum traveling salesman problem; this more general result can be used by the algorithm of [4] to obtain an approximation slightly better than 2:8 [15]. <p> Given this understanding, we will be able to predict the ways in which overlap between certain strings can occur, and thus plan for it algorithmically. 2 Preliminaries For consistency, we use some notation and definitions of [4] and <ref> [22] </ref>. We assume, without loss of generality, that the set S of strings is substring free, i.e. no s j is a substring of s i , i 6= j. <p> A superstring which has minimum length, or distance, also has maximum overlap. However, this correspondence breaks down for approximations; approximating the largest overlap appears to be an easier problem (cf. <ref> [23, 22, 15] </ref>) than approximating the shortest superstring. We now describe a generic superstring algorithm used, in some form, by [4],[22] and [6]. An execution of the algorithm appears as Fig. 1. <p> This allows us to form the second cycle cover, in which approximating overlap and the string length are roughly comparable, so stronger bounds apply. Step (6) correctly extends the superstring for R into a superstring for S, as proved in <ref> [22] </ref>. We now analyze the generic algorithm in a way that anticipates our improvements. A more detailed analysis appears in [4]. <p> The analysis above makes it clear that the cycle cover CC actually partitions the cycles in the cycle cover C, and hence each cycle in CC can be analyzed separately. As was observed by <ref> [22] </ref> in their 2 8 9 algorithm, if fl has three or more vertices, then ov n 3 c2fl d (c). Thus we can restrict our attention to 2-cycles in CC.
Reference: [23] <author> J. Turner. </author> <title> Approximation algorithms for the shortest common superstring problem. </title> <journal> Information and Computation, </journal> <volume> 83 </volume> <pages> 1-20, </pages> <year> 1989. </year> <month> 24 </month>
Reference-contexts: The shortest superstring problem is MAX SNP-hard [4]; several heuristics and approximation algorithms have been proposed. One often used algorithm is a greedy algorithm that repeatedly merges the pair of strings with the maximum amount of overlap. Turner <ref> [23] </ref> and Tarhio and Ukkonnen [21] independently proved that the greedy algorithm constructs a superstring that achieves at least half as much overlap as an optimal superstring. However, this does not guarantee a constant approximation with respect to the length of the resulting superstring. <p> A superstring which has minimum length, or distance, also has maximum overlap. However, this correspondence breaks down for approximations; approximating the largest overlap appears to be an easier problem (cf. <ref> [23, 22, 15] </ref>) than approximating the shortest superstring. We now describe a generic superstring algorithm used, in some form, by [4],[22] and [6]. An execution of the algorithm appears as Fig. 1.
References-found: 23

