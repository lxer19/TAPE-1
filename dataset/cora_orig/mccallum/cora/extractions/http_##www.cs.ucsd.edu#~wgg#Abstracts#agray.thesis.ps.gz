URL: http://www.cs.ucsd.edu/~wgg/Abstracts/agray.thesis.ps.gz
Refering-URL: http://www.cs.ucsd.edu/~wgg/Abstracts/agray.thesis.html
Root-URL: http://www.cs.ucsd.edu
Title: Development of an Unanticipated Member of a Program Family  
Author: Andrew J. Gray 
Degree: A thesis submitted in partial satisfaction of the requirements for the degree Master of Science in Computer Science by  Committee in charge: Professor William G. Griswold, Chair Professor Joseph Goguen Professor Scott Baden  
Date: 1997  
Affiliation: UNIVERSITY OF CALIFORNIA, SAN DIEGO  
Abstract-found: 0
Intro-found: 0
Reference: [Aho, Sethi, & Ullman 88] <author> A. V. Aho, R. Sethi, and J. D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1988. </year>
Reference-contexts: We also had some problems with the Ada grammar that we obtained out-of-the-box. We found that we needed to change certain productions in the grammar from right-recursive to left-recursive <ref> [Aho, Sethi, & Ullman 88, p. 48] </ref> in order for them to work correctly with Cstructure classes and build up correct data structures.
Reference: [ANSI 89] <institution> American National Standards Institute. Programming Language C. ANSI standard X3.159-1989. ANSI, </institution> <month> December </month> <year> 1989. </year>
Reference: [ANSI 95] <institution> American National Standards Institute, Accredited Standards Committee X3, </institution> <note> Information Processing Systems. Working Paper for Draft Proposed International Standard for Information Systems Programming Language C++. Document No. X3J16/95-0185, WG21/N0785. ANSI, </note> <year> 1995. </year>
Reference-contexts: objects; this, however, means that Cstructure contains a large amount (over 23,000 lines) of mostly-redundant C++ code that implements all of the individual collection classes. 38 While the development of Cstructure was underway, the ANSI C++ committee 7 incorporated the Standard Template Library (STL) into the ANSI/ISO C++ draft standard <ref> [ANSI 95] </ref>. The Standard Template Library provides a set of generic components and template algorithms which provide many useful functions, including the management of collections [Musser and Saini 96]. <p> However, many compilers are available that conform to the draft of the C++ standard <ref> [ANSI 95] </ref>. 39 code intact, but to discard the existing collection class code and reimplement the existing GNU C++ Library interfaces using the Standard Template Library. b.
Reference: [Boehm 75] <author> B. W. Boehm. </author> <title> The high cost of software. </title> <editor> In E. Horowitz, editor, </editor> <title> Practical Strategies for Developing Large Software Systems. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1975. </year>
Reference: [Bowdidge 95] <author> R. W. Bowdidge. </author> <title> Supporting the Restructuring of Data Abstractions through Manipulation of a Program Visualization. </title> <type> Ph.D. dissertation, </type> <institution> University of California, San Diego, Department of Computer Science and Engineering, </institution> <month> November </month> <year> 1995. </year> <note> Technical Report CS95-457. </note>
Reference-contexts: Star Diagram Generation 1. Relevant Design Decisions Star diagrams are generated directly from the abstract syntax tree for a program, so their construction depends primarily on the correct construction of this tree. The generic algorithm for the generation of a star diagram <ref> [Bowdidge 95, section III.B] </ref> uses six generic methods that determine the root of a star diagram, determine the successor of a node, test two nodes for similarity, test a node for relevance to encapsulation, test a node for ending processing, and generate a meaningful label for the node.
Reference: [Brooks 95] <author> F. P. Brooks Jr. </author> <title> The Mythical Man-Month, Anniversary Edition. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference: [Cabaniss 97] <author> J. L. Cabaniss. </author> <title> Lessons Learned from Applying HCI Techniques to the Redesign of a User Interface. </title> <type> Masters thesis, </type> <institution> University of California, San Diego, Department of Computer Science and Engineering, </institution> <year> 1997. </year> <note> Technical Report CS97-548. 84 </note>
Reference: [Chen 96] <author> M. I. Chen. </author> <title> A Tool for Planning the Restructuring of Data Abstractions in Large Systems. </title> <type> Masters thesis, </type> <institution> University of California, San Diego, Department of Computer Science and Engineering, </institution> <year> 1996. </year> <note> Technical Report CS96-472. [comp.compilers archive] comp.compilers Internet archive. Available via anonymous FTP: ftp://primost.cs.wisc.edu or via email at compilers-server@iecc.cambridge.ma.us. </note>
Reference: [DeMarco 95] <author> T. </author> <title> DeMarco. </title> <booktitle> On systems architecture. In Proceedings of the 1995 Monterey Workshop on Increasing the Practical Impact of Formal Methods for Computer-Aided Software Development: Specification-Based Software Architectures, </booktitle> <year> 1995. </year>
Reference: [Ellis & Stroustrup 90] <author> M. A. Ellis and B. Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference: [Free Software Foundation 91] <author> Free Software Foundation. </author> <title> GNU C++ Library, </title> <type> version 2. </type> <address> Cambridge, MA, </address> <year> 1991. </year> <note> Available via anonymous FTP: ftp://prep.ai.mit.edu. </note>
Reference: [Free Software Foundation 93a] <institution> Free Software Foundation. GNU Bison, version 1.22. </institution> <address> Cambridge, MA, </address> <year> 1993. </year> <note> Available via anonymous FTP: ftp://prep.ai.mit.edu. </note>
Reference-contexts: Relevant Design Decisions As described in Chapter II, Cstructure makes use of a lexical analyzer that is generated by GNU flex [Free Software Foundation 95] and a parser that is generated by GNU bison <ref> [Free Software Foundation 93a] </ref>. The actions specified in the lexical analyzer and parser description files instantiate the appropriate objects in the ASTnode class hierarchy and build the abstract syntax tree.
Reference: [Free Software Foundation 93b] <author> Free Software Foundation. </author> <title> GNU C++ Compiler, version 2.7.2. </title> <address> Cambridge, MA, </address> <year> 1993. </year> <note> Available via anonymous FTP: ftp://prep.ai.mit.edu. </note>
Reference-contexts: Difficulties Encountered We experienced three types of difficulties during the translation process. First, we encountered some problems with our development tools. For example, our compiler, the GNU C++ Compiler 11 version 2.7.2 <ref> [Free Software Foundation 93b] </ref> did not handle C++ templates very robustly, and thus had difficulties compiling the template-intensive Standard Template Library. We also experienced problems with conflicts between the Standard Template Library and the portions of the GNU C++ Library that we were not removing from Cstructure.
Reference: [Free Software Foundation 95] <institution> Free Software Foundation. GNU Flex, version 2.5.2. </institution> <address> Cambridge, MA, </address> <year> 1995. </year> <note> Available via anonymous FTP: ftp://prep.ai.mit.edu. </note>
Reference-contexts: The goal of this phase was to construct an abstract syntax tree for Ada programs. 1. Relevant Design Decisions As described in Chapter II, Cstructure makes use of a lexical analyzer that is generated by GNU flex <ref> [Free Software Foundation 95] </ref> and a parser that is generated by GNU bison [Free Software Foundation 93a]. The actions specified in the lexical analyzer and parser description files instantiate the appropriate objects in the ASTnode class hierarchy and build the abstract syntax tree.
Reference: [Gamma et al. 93] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design patterns: abstraction and reuse of objectoriented design. </title> <booktitle> In Proceedings of the Seventh European Conference on ObjectOriented Programming (ECOOP 93), </booktitle> <year> 1993: </year> <pages> 406-431. </pages>
Reference-contexts: technique for Adastructure, both in terms of the collection class library used by Cstructure and in terms of the Clanguage-specific abstract syntax tree class definitions. 36 Interestingly, Gamma, Helm, Johnson, and Vlissides suggest that design patterns are sometimes best applied retroactively in order to improve the design of an architecture <ref> [Gamma et al. 93] </ref>. 2. Revised Strategy Details This section describes the details of our revised strategy. a. Restrict Scope of Analysis As described in Chapter II, Cstructure carries with it much of the complexity traditionally associated with a compiler. <p> Gamma, Helm, Johnson, and Vlissides suggest that the application of patterns can be useful in guiding restructuring, an observation consistent with our findings here <ref> [Gamma et al. 93] </ref>. 72 4. Guidance of Transformational Approach Likewise, we found using a transformational approach during the creation of Adastructure helped us to discover the differences between Ada and C on a case-by-case basis.
Reference: [Gamma et al. 95] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides. </author> <title> Design Patterns: Elements of Reusable ObjectOriented Software. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1995. </year>
Reference-contexts: Adapter Pattern Design patterns describe general solution paradigms for specific design problems. They attempt to capture, in a tangible way, solutions that have endured and evolved over time. Gamma, Helm, Johnson, and Vlissides have applied design patterns to objectoriented software development <ref> [Gamma et al. 95] </ref>. One of the particular patterns that they describe is called Adapter. The intent of this pattern is simply to convert one existing module interface into another interface that clients expect.
Reference: [Griswold 91] <author> W. G. Griswold. </author> <title> Program Restructuring as an Aid to Software Maintenance. </title> <type> Ph.D. dissertation, </type> <institution> University of Washington, Department of Computer Science and Engineering, </institution> <month> August </month> <year> 1991. </year> <note> Technical Report 91-08-04. 85 </note>
Reference: [Griswold 96] <author> W. G. Griswold. </author> <title> Just-in-time architecture: planning software in an uncertain world. </title> <booktitle> Position paper for the Second International Workshop on Software Architecture (ISAW-2), </booktitle> <address> San Francisco, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: Griswold: Delay Architecture Griswold suggests delaying the introduction of costly architecture, writing, Architecture of uncertain value can be delayed until the value is more clear <ref> [Griswold 96] </ref>. This is the principle behind the just-in-time architecture concept, as described in Chapter I, Section D. 32 B. Initial Strategy Based on these principles, we developed a strategy for developing Adastructure. However, we subsequently encountered difficulties with this strategy, as described in this section. 1.
Reference: [Griswold et al. 96] <author> W. G. Griswold, M. I. Chen, R. W. Bowdidge, and J. D. Morgenthaler. </author> <title> Tool support for planning the restructuring of data abstractions in large systems. </title> <booktitle> In ACM SIGSOFT 96 Symposium on the Foundations of Software Engineering, </booktitle> <month> October </month> <year> 1996. </year>
Reference: [Johnson 75] <author> S. C. Johnson. </author> <note> YaccYet Another Compiler-Compiler. Computer Science Technical Report 32. </note> <institution> Bell Laboratories, </institution> <month> July </month> <year> 1975. </year>
Reference: [Johnson 78] <author> S. C. Johnson. </author> <title> A portable compiler: theory and practice. </title> <booktitle> In Proceedings of the Fifth Symposium on Principles of Programming Languages: </booktitle> <pages> 97-104, </pages> <month> January </month> <year> 1978. </year>
Reference-contexts: Our experiences with Adastructure call to mind of the advice given by Johnson in the context of another retargetable system: let theoretical results serve as guidelines for your project, but dont let them become restrictive rules <ref> [Johnson 78] </ref>. Theories are inevitably simplified in contrast to the the real world, which is more chaotic and arbitrary. 69 2.
Reference: [Kernighan & Ritchie 88] <author> B. W. Kernighan and D. M. Ritchie. </author> <title> The C Programming Language: ANSI C Version, second edition. </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference: [Lehman & Belady 85] <author> M. M. Lehman and L. A. Belady. </author> <title> Program Evolution: Processes of Software Change. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1985. </year>
Reference: [Lesk 75] <author> M. E. Lesk. </author> <title> LexA Lexical Analyzer Generator. </title> <institution> Computer Science Technical Report 39. Bell Laboratories, </institution> <month> October </month> <year> 1975. </year>
Reference: [Levine et al. 92] <author> J. R. Levine, T. Mason, and D. Brown. </author> <title> lex & yacc, second edition. </title> <publisher> OReilly & Associates, </publisher> <address> Sebastopol, CA, </address> <year> 1992. </year>
Reference: [Lientz & Swanson 80] <author> B. Lientz and E. Swanson. </author> <title> Software Maintenance Management: A Study of the Maintenance of Computer Applications Software in 487 Data Processing Organizations. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1980. </year>
Reference: [Malan & Wentzel 93] <author> R. A. Malan and K. Wentzel. </author> <title> Economics of software reuse revisited. </title> <booktitle> In Proceedings of the 3 rd Irvine Software Symposium: </booktitle> <pages> 109-121, </pages> <month> April </month> <year> 1993. </year>
Reference: [Morgenthaler & Griswold 95] <author> J. D. Morgenthaler and W. G. Griswold. </author> <title> Program analysis for practical program restructuring. </title> <booktitle> In Proceedings of the ICSE-17 Workshop on Program Transformations for Software Evolution, </booktitle> <year> 1995. </year> <type> Technical Report CS95-418, </type> <institution> Department of Computer Science & Engineering, University of California, </institution> <address> San Diego. </address> <month> 86 </month>
Reference: [Musser & Saini 96] <author> D. L. Musser and A. Saini. </author> <title> STL Tutorial and Reference Guide. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA 1996. </address>
Reference: [Nguyen 97] <author> V. B. Nguyen. </author> <title> Impact of Adding Customizability on Software Architecture: A Case Study. </title> <type> Masters thesis, </type> <institution> University of California, San Diego, Department of Computer Science and Engineering, </institution> <year> 1997. </year> <note> Technical Report CS97-532. </note>
Reference: [Ossher 87] <author> H. L. Ossher. </author> <title> A mechanism for specifying the structure of large, layered programs. In Research Directions in ObjectOriented Programming, </title> <editor> B. Shriver and P. Wegner, eds.. </editor> <publisher> MIT Press, </publisher> <address> Boston, MA, </address> <year> 1987: </year> <pages> 219-252. </pages>
Reference-contexts: This orthogonal grouping is reminiscent of the grid organization proposed by Ossher <ref> [Ossher 87] </ref>, and indicates more of a syntax-directed organization than an object-oriented one. The benefits of this organization suggest another type of source code transformation that could be applied to a software system by a meaning-preserving restructuring tool.
Reference: [Ousterhout 94] <author> J. Ousterhaut. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference: [Parnas 72] <author> D. L. Parnas. </author> <title> On the criteria to be used in decomposing systems into modules. </title> <journal> Communications of the ACM, </journal> <volume> 15(12): </volume> <pages> 1053-1058, </pages> <month> December </month> <year> 1972. </year>
Reference: [Parnas 76] <author> D. L. Parnas. </author> <title> On the design and development of program families. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 2(1) </volume> <pages> 1-9, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: Parnas: Postpone Design Decisions In describing his program families development approach, Parnas wrote, The aim of the early work is not to make decisions about a program, but to make it possible to postpone (and therefore easily change) decisions about the program <ref> [Parnas 76] </ref>." The point is that delaying design decisions makes it easier to later change those decisions. Design decisions that are made early in the development of a program are frequently more difficult to reverse.
Reference: [Rumbaugh et al. 91] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and W. Lorenson. </author> <title> ObjectOriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference: [Rosson & Carroll 93] <author> M. B. Rosson and J. M. Carroll. </author> <title> Active programming strategies in reuse. </title> <booktitle> In Proceedings of the Seventh European Conference on Object-Oriented Programming (ECOOP 93), </booktitle> <year> 1993: </year> <pages> 4-20. </pages>
Reference: [United States Department of Defense 83] <institution> Reference Manual for the Ada Programming Language. </institution> <address> ANSI/MIL-STD-1815A-1983. </address> <booktitle> Ada Joint Program Office, </booktitle> <address> Washington D.C., </address> <year> 1983. </year> <note> Available via anonymous FTP: ftp://ajpo.sei.cmu.edu. </note>
Reference-contexts: particular, the ability to support Ada packages would be very valuable. 15 Similarly, Adastructure should be enhanced to support the newer specifications and objectoriented features of Ada (popularly known as Ada 95), as all of the work on this project was done according to the 1983 specification of the language <ref> [United States Department of Defense 83] </ref>. From the perspective of the restructuring tool program family, this project demonstrated that a restructuring tool for C could be modified to restructure programs written in Ada.
References-found: 37

