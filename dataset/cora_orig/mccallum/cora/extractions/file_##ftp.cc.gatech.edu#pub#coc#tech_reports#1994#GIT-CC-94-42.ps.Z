URL: file://ftp.cc.gatech.edu/pub/coc/tech_reports/1994/GIT-CC-94-42.ps.Z
Refering-URL: http://www.cs.gatech.edu/fac/Mostafa.Ammar/MP.html
Root-URL: 
Title: Protocol Discovery in Multiprotocol Networks  
Author: Russell J. Clark Mostafa H. Ammar Kenneth L. Calvert 
Keyword: multiprotocol systems, protocol discovery, protocol feedback, IPng transition  
Note: This research is supported by a grant from the National Science Foundation (NCR-9305115) and the TRANSOPEN project of the Army Research Lab (formerly AIRMICS) under contract number DAKF11-91-D-0004.  
Address: Atlanta, GA 30332-0280  
Affiliation: College of Computing Georgia Institute of Technology  
Pubnum: GIT-CC-94/42  
Email: rjc@cc.gatech.edu  
Date: August 4, 1994  
Abstract: Multiprotocol systems can be an important tool for achieving interoperability. As the number of protocols available on such systems grows, there is an increasing need for support mechanisms that enable users to effectively access these protocols. Of particular importance is the need to determine which of several protocols to use for a given communication task. In this work, we propose architectures for a protocol discovery system that uses protocol feedback mechanisms to determine which protocols are supported. We describe the issues related to protocol discovery and present feedback mechanisms necessary to support discovery. We present a prototype implementation of a discovery system that supports next generation IP protocols. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young. </author> <title> Mach: A new kernel foundation for Unix development. </title> <booktitle> In Proceedings Summer Usenix, </booktitle> <month> July </month> <year> 1986. </year>
Reference-contexts: When implementing an automated discovery system in other architectures where protocols are not part of the same privileged address space (e.g., Mach <ref> [1] </ref>), it will be important to provide access to the protocol feedback systems. Addressing: One interesting challenge with this architecture is how to specify the appropriate address information for each of the protocols that will be attempted.
Reference: [2] <author> AT&T. </author> <title> STREAMS Programmer's Guide, 1988. Unix System V. </title>
Reference-contexts: This is the idea behind our third approach where a multiprotocol network subsystem is used to provide multiprotocol support through standard programming interfaces. The network subsystem is the portion of a host operating system that supports protocol implementations. Two popular examples are the System V Streams <ref> [2] </ref> and BSD UNIX Socket [11] environments. Implementing the discovery algorithm as part of the network subsystem enables current applications to run over multiple protocols with little or no modification to the actual application. The degree of connectivity provided is essentially the same as in the multiprotocol application approach.
Reference: [3] <author> R. W. Callon. </author> <title> TCP and UDP with bigger addresses (TUBA), a simple proposal for internet addressing and routing. </title> <type> RFC 1347, </type> <month> June </month> <year> 1992. </year>
Reference-contexts: This host supports three different network layer protocols. It supports the standard Internet protocol version 4, identified as IP. It also supports SIPP, one of the current proposed next generation Internet protocols (IPng) [7]. The OSI CLNP protocol is also supported along with the TUBA option <ref> [3] </ref> for providing TCP applications over CLNP. Each of the graphs in Figure 2 provides a single protocol path. Figures 2a and 2f represent single stack architectures for the Internet and OSI protocols respectively. FTP using the SIPP IPng proposal is shown in Figure 2b. <p> While these are less popular than 2g, they are indeed possible in our multiprotocol system. Figure 2c depicts a mixed stack architecture that provides the upper layer Internet applications using the OSI network protocol <ref> [3] </ref>. In addition to communicating with the two previous simple protocol stacks, the multiprotocol system of Figure 1 includes all the protocols necessary to communicate with these two new, mixed protocol stacks. Unfortunately, in most current examples, multiprotocol architectures like that in system. <p> Addressing: One interesting challenge with this architecture is how to specify the appropriate address information for each of the protocols that will be attempted. In current systems, the application creates an address structure of the appropriate 7 The TUBA proposal <ref> [3] </ref> recommends the addition of these as two new ER types. 17 type (e.g., AF INET) and passes it in as an argument to the connect () system call. With our system, it is necessary to have addresses for each of the several different protocols that will be attempted.
Reference: [4] <author> R. J. Clark, M. H. Ammar, and K. L. Calvert. </author> <title> Multi-protocol architectures as a paradigm for achieving inter-operability. </title> <booktitle> In Proceedings of IEEE INFOCOM, </booktitle> <month> April </month> <year> 1993. </year>
Reference-contexts: This will require mechanisms for negotiating commonality between network systems [20]. In our research, we consider ways in which multiprotocol networking can be accommodated through the use of multiprotocol systems <ref> [4] </ref>. In previous work, we have shown how a directory service can be used to provide the configuration information necessary for a multiprotocol system to communicate [5].
Reference: [5] <author> R. J. Clark, K. L. Calvert, and M. H. Ammar. </author> <title> On the use of directory services to support multiprotocol interoperability. </title> <booktitle> In Proceedings of IEEE INFOCOM, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: In our research, we consider ways in which multiprotocol networking can be accommodated through the use of multiprotocol systems [4]. In previous work, we have shown how a directory service can be used to provide the configuration information necessary for a multiprotocol system to communicate <ref> [5] </ref>. In this paper we present our research addressing the problem of what to do when no protocol configuration information is available through a directory lookup or the information that is available is inaccurate. We call our approach to solving this problem protocol discovery. <p> We call this the Protocol Determination task. In performing this task, a system determines the combination of protocols necessary to provide the needed service. For achieving interoperability, protocols are selected from the intersection of those supported on the systems that must communicate. In previous work <ref> [5] </ref>, we presented mechanisms for using directory services to assist in protocol determination.
Reference: [6] <author> D. E. Comer and J. C. Lin. </author> <title> Probing TCP implementations. </title> <booktitle> In Summer USENIX, </booktitle> <pages> pages 245-255, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Two early examples of this approach are the Network Command Language described by Falcone [8] and the meta-protocol concept proposed by Meandzija [13]. Similarly, Tschudin describes a generic protocol in [19]. The recent work of Comer and Lin <ref> [6] </ref> describes the use of a technique called active probing to deduce characteristics of a TCP implementation.
Reference: [7] <author> S. Deering. </author> <title> Simple internet protocol plus (SIPP) specification. </title> <type> Internet Draft, </type> <month> July </month> <year> 1994. </year>
Reference-contexts: It supports the FTP application using TCP and the FTAM application using TP0 or TP4. This host supports three different network layer protocols. It supports the standard Internet protocol version 4, identified as IP. It also supports SIPP, one of the current proposed next generation Internet protocols (IPng) <ref> [7] </ref>. The OSI CLNP protocol is also supported along with the TUBA option [3] for providing TCP applications over CLNP. Each of the graphs in Figure 2 provides a single protocol path. Figures 2a and 2f represent single stack architectures for the Internet and OSI protocols respectively.
Reference: [8] <author> J. R. Falcone. </author> <title> A programmable interface language for heterogeneous distributed systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(4) </volume> <pages> 330-351, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: One approach to achieving interoperability in diverse systems is to provide a mechanism for hosts to exchange protocol information before carrying out the communication task. Two early examples of this approach are the Network Command Language described by Falcone <ref> [8] </ref> and the meta-protocol concept proposed by Meandzija [13]. Similarly, Tschudin describes a generic protocol in [19]. The recent work of Comer and Lin [6] describes the use of a technique called active probing to deduce characteristics of a TCP implementation.
Reference: [9] <author> R. Govindan and S. Deering. </author> <title> ICMP and IGMP for the simple internet protocol plus (SIPP). </title> <type> Internet Draft, </type> <month> March </month> <year> 1994. </year>
Reference-contexts: For the other compatibility problems listed in Table 2 there are unique feedback messages in ICMP to indicate the problem. These messages can be used by a multiprotocol system to determine where an incompatibility occurs. The feedback presently proposed for SIPP is a straightforward extension of the current ICMP <ref> [9] </ref>. In the current proposal, there are few differences between the ICMP feedback messages for IP and SIPP. Unlike IP and SIPP, CLNP includes a feedback mechanism as part of the network protocol definition.
Reference: [10] <author> P. Janson, R. Molva, and S. Zatti. </author> <title> Architectural directions for opening IBM networks: The case of OSI. </title> <journal> IBM Systems Journal, </journal> <volume> 31(2) </volume> <pages> 313-335, </pages> <year> 1992. </year>
Reference-contexts: Ogle et al. [14] are developing a TCP/IP and SNA system that performs protocol selection below the socket level interface. Janson et al. <ref> [10] </ref> consider options for interoperability between OSI and SNA networks, and analyze the addressing issues arising when these protocols are combined in a single network. One approach to achieving interoperability in diverse systems is to provide a mechanism for hosts to exchange protocol information before carrying out the communication task.
Reference: [11] <author> S. J. Leffler, M. K. McKusick, M. J. Karels, and J. S. Quarterman. </author> <title> The Design and Implementation of the 4.3 BSD UNIX Operating System. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: The network subsystem is the portion of a host operating system that supports protocol implementations. Two popular examples are the System V Streams [2] and BSD UNIX Socket <ref> [11] </ref> environments. Implementing the discovery algorithm as part of the network subsystem enables current applications to run over multiple protocols with little or no modification to the actual application. The degree of connectivity provided is essentially the same as in the multiprotocol application approach.
Reference: [12] <author> B. Leiner and Y. Rekhter. </author> <title> The multiprotocol internet. </title> <address> RFC1560, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: Instead, large numbers of systems continue to be installed that support any one of the standards or one of numerous proprietary protocols (e.g., IPX, AppleTalk, SNA). Even the Internet is no longer a single protocol network <ref> [12] </ref>. While TCP/IP remains the primary protocol suite, other protocols (e.g., IPX, AppleTalk, OSI) exist either natively or encapsulated as data within IP.
Reference: [13] <author> B. Meandzija. </author> <title> Integration through meta-communication. </title> <booktitle> In Proceedings of IEEE INFOCOM, </booktitle> <pages> pages 702-709, </pages> <month> June </month> <year> 1990. </year> <month> 19 </month>
Reference-contexts: One approach to achieving interoperability in diverse systems is to provide a mechanism for hosts to exchange protocol information before carrying out the communication task. Two early examples of this approach are the Network Command Language described by Falcone [8] and the meta-protocol concept proposed by Meandzija <ref> [13] </ref>. Similarly, Tschudin describes a generic protocol in [19]. The recent work of Comer and Lin [6] describes the use of a technique called active probing to deduce characteristics of a TCP implementation.
Reference: [14] <author> D. M. Ogle, K. M. Tracey, R. A. Floyd, and G. Bollella. </author> <title> Dynamically selecting protocols for socket applications. </title> <journal> IEEE Network, </journal> <volume> 7(3) </volume> <pages> 48-57, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: In this section we review related work in this area and then present the model for our research. 2.1 Related Work Recently, others have begun to research the issues involved in integrating protocols from different architectures. Ogle et al. <ref> [14] </ref> are developing a TCP/IP and SNA system that performs protocol selection below the socket level interface. Janson et al. [10] consider options for interoperability between OSI and SNA networks, and analyze the addressing issues arising when these protocols are combined in a single network.
Reference: [15] <author> D. Piscitello. </author> <title> FTP operation over big address records FOOBAR. </title> <address> RFC1639, </address> <month> June </month> <year> 1994. </year>
Reference-contexts: Another issue is that since the discovery process is done automatically, the application programmer loses some control over the actual protocols used as well as the discovery process. 4 Some of the changes needed to provide this support in FTP have already been proposed <ref> [15] </ref>. 10 3.4 Issues With Discovery Algorithms Each of the discovery architectures proposed in the previous section incorporates some form of algorithm or set of rules that directs the operation of the discovery process.
Reference: [16] <author> J. B. Postel. </author> <title> Internet control message protocol. </title> <type> RFC 792, </type> <month> September </month> <year> 1981. </year>
Reference-contexts: We developed this algorithm after carefully analyzing the feedback provided by these protocols for various compatibility problems. Before describing the algorithm we summarize our findings regarding this feedback. 4.1 Feedback Analysis With IP, network layer feedback is provided by the Internet Control Message Protocol (ICMP) <ref> [16] </ref>. ICMP is an unusual protocol in that it is both an integral part of IP and a user of IP, using IP to transfer its messages. ICMP has several different message types, most of which are used to provide feedback during communication.
Reference: [17] <author> M. T. Rose. </author> <title> The Open Book. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1990. </year>
Reference-contexts: Generic Application: The first approach to automated discovery is to perform protocol discovery as part of a generic user application that provides a common service. The generic File Transfer Service of Figure 4 presents the user with a consistent interface, regardless of the actual protocols or applications used <ref> [17] </ref>. This discovery approach incorporates the entire protocol graph, including the applications, into the discovery system. The main advantage of this approach is that it allows the user to communicate with a wide range of currently-installed systems, including those supporting a variety of applications.
Reference: [18] <author> M. T. Rose and D. E. Cass. </author> <title> ISO Transport Services on top of the TCP. </title> <type> RFC 1006, </type> <month> May </month> <year> 1987. </year>
Reference-contexts: Figures 2a and 2f represent single stack architectures for the Internet and OSI protocols respectively. FTP using the SIPP IPng proposal is shown in Figure 2b. Figure 2g depicts a mixed stack architecture that provides the upper layer OSI services using the Internet 4 protocols <ref> [18] </ref>. This is an example of a transition architecture for providing OSI applications without requiring a full OSI implementation. Figures 2d and 2e represent two other mixed stacks for providing OSI applications over the Internet. While these are less popular than 2g, they are indeed possible in our multiprotocol system.
Reference: [19] <author> C. Tschudin. </author> <title> Flexible protocol stacks. </title> <booktitle> In Computer Communication Review, </booktitle> <pages> pages 197-205. </pages> <publisher> ACM Press, </publisher> <month> September </month> <year> 1991. </year>
Reference-contexts: Two early examples of this approach are the Network Command Language described by Falcone [8] and the meta-protocol concept proposed by Meandzija [13]. Similarly, Tschudin describes a generic protocol in <ref> [19] </ref>. The recent work of Comer and Lin [6] describes the use of a technique called active probing to deduce characteristics of a TCP implementation.
Reference: [20] <author> M. K. Vernon, E. D. Lazowska, and S. D. Personick. </author> <title> R&D for the NII: </title> <type> Technical Challenges. </type> <institution> Interuniversity Communications Council, Inc. (EDUCOM), </institution> <year> 1994. </year> <month> 20 </month>
Reference-contexts: It has recently been pointed out that the National Information Infrastructure will be a multi-supplier, multi-technology endeavor that will create difficult interoperability problems. This will require mechanisms for negotiating commonality between network systems <ref> [20] </ref>. In our research, we consider ways in which multiprotocol networking can be accommodated through the use of multiprotocol systems [4]. In previous work, we have shown how a directory service can be used to provide the configuration information necessary for a multiprotocol system to communicate [5].
References-found: 20

