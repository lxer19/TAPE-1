URL: ftp://ftp.isi.edu/pub/cengiz/publications/MISC:PSTV.ps.gz
Refering-URL: http://www.isi.edu/~cengiz/publications/
Root-URL: http://www.isi.edu
Title: Stepwise Assertional Design of Distance-Vector Routing Algorithms  
Author: Cengiz Alaettinoglu and A. Udaya Shankar 
Keyword: Keyword Codes: C.2.2; D.2.4 Keywords: Computer-Communication Networks, Network Protocols; Software Engineering, Program Verification  
Address: College Park, Maryland 20742, USA  
Affiliation: Department of Computer Science, University of Maryland,  
Abstract: There are many kinds of distance-vector algorithms for adaptive routing in wide-area computer networks, ranging from the classical Distributed Bellman-Ford to several recent algorithms that have better performance. However, these algorithms have very complicated behaviors and their analyses in the literature has been incomplete (and operational). In this paper, we present a stepwise assertional design of a recently proposed distance-vector algorithm. Our design starts with the Distributed Bellman-Ford and goes through two intermediate algorithms. The properties established for each algorithm hold for the succeeding algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Alaettinoglu and A. U. Shankar. </author> <title> Stepwise Assertional Design of Distance-Vector Routing Algorithms. </title> <type> Technical Report UMIACS-TR-92-39, </type> <institution> CS-TR-2869, Institute for Advanced Computer Studies and Department of Computer Science, University of Maryland, College Park, MD 20742, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Given a state transition system and a set of fairness requirements, a leads-to assertion holds for the system iff it holds for every behavior of the system which satisfies the fairness requirements. The proof rules used to establish the results in this paper can be found in <ref> [1] </ref>. 3. Algorithm A1 We consider a computer network whose nodes and links form an arbitrary directed graph such that if there is a link from node u to node v, then there is a link from node v to node u. <p> A is In (z) = Reachable (z)): M 1 : Symmetric leads-to T C _ In (z) = Reachable (z) M 2 : u 2 In (z) unless T C Theorem 1. A1 satisfies M 1 and M 2 . (Proof in <ref> [1] </ref>.) Even though, we have shown that after any succession of topology changes, the nodes that can reach the destination obtain the optimal paths, this convergence may contain long-lived loops and be very lengthy. <p> Theorem 2. A2 satisfies M 1 and M 2 . (Proof in <ref> [1] </ref>.) Next, we establish that after any succession of topology changes that leaves the network symmetric, A2 achieves optimal paths within N + H steps assuming synchronous execution, where H is the length (in number of links) of a maximum length shortest cost path between any two nodes after the topology <p> N 1 : Symmetric ^ Step = 0 leads-to T C _ (Step N + H ^ R2 (z) = Reachable (z)) N 2 : R2 (z) = Reachable (z) unless T C Theorem 3. Assuming synchronous execution, A2 satisfies N 1 and N 2 . (Proof in <ref> [1] </ref>.) 5. Algorithm A3 Table 3 specifies the state variables and events of a node in A3. (Refer to the table in the following discussion.) A3 differs from A2 only in the procedure U pdate&Send. In A3, the node id's are considered totally ordered. <p> Theorem 4. (Proof in <ref> [1] </ref>) (a) A3 satisfies M 1 and M 2 . (b) Assuming synchronous execution, A3 satisfies N 1 and N 2 . 6. Algorithm A4 Table 4 specifies the state variables and events of a node in A4. <p> The proof of Theorem 5 is done by showing that A4 is a well formed refinement of A3. It involves showing the routes constructed from prefinal nodes are the same as the routes of A3 <ref> [1] </ref>. 7. Concluding Remarks Distance-vector routing algorithms are difficult to understand. Most of their analyses in the literature is operational.
Reference: [2] <author> C. Cheng, R. Riley, S. P. R. Kumar, and J. J. Garcia-Luna-Aceves. </author> <title> A Loop-free Bellman-Ford Routing Protocol Without Bouncing Effect. </title> <booktitle> In Proc. ACM SIGCOMM '89, </booktitle> <pages> pages 224-237, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Since 1979, many new kinds of distance-vector algorithms have been proposed <ref> [9, 6, 12, 2, 5, 11] </ref> which avoid long-lived loops by using various node coordination mechanisms. For example [9, 6] use diffusion computations [3] to avoid loops entirely. References [12, 2, 11] avoid long-lived loops, but not short-lived loops, i.e. loops that disappear in time proportional to N or less. <p> Since 1979, many new kinds of distance-vector algorithms have been proposed [9, 6, 12, 2, 5, 11] which avoid long-lived loops by using various node coordination mechanisms. For example [9, 6] use diffusion computations [3] to avoid loops entirely. References <ref> [12, 2, 11] </ref> avoid long-lived loops, but not short-lived loops, i.e. loops that disappear in time proportional to N or less. In [12], each node maintains for each destination a set of paths (in addition to the distances), one for each of its neighbors. <p> Long-lived loops are avoided by not choosing a neighbor as a next-hop if that would lead to a loop. However maintaining and exchanging paths is expensive and requires more than O (N fi e) storage. References <ref> [2, 11] </ref> overcome this problem by having nodes maintain prefinal nodes instead of the paths. The prefinal node for a destination is intended to be the last node before the destination on the next-hop path. <p> In the course of our work, we discovered that they are often incomplete or inaccurate; for example, reference [11] considers only one or two link failures rather than an arbitrary succession of topology changes, to prove the properties of their algorithm; the routing table update procedure in <ref> [2] </ref> is inaccurate; the example in [2] to illustrate O (N ) convergence is wrong, etc. A stepwise assertional design, such as the one presented here, is very effective at making it easier to understand these algorithms. <p> of our work, we discovered that they are often incomplete or inaccurate; for example, reference [11] considers only one or two link failures rather than an arbitrary succession of topology changes, to prove the properties of their algorithm; the routing table update procedure in <ref> [2] </ref> is inaccurate; the example in [2] to illustrate O (N ) convergence is wrong, etc. A stepwise assertional design, such as the one presented here, is very effective at making it easier to understand these algorithms.
Reference: [3] <author> E. Dijkstra and C. Scholten. </author> <title> Termination Detection for Diffusing Computations. </title> <journal> Information Processing Letters, </journal> <volume> 11(1) </volume> <pages> 1-4, </pages> <year> 1980. </year>
Reference-contexts: Since 1979, many new kinds of distance-vector algorithms have been proposed [9, 6, 12, 2, 5, 11] which avoid long-lived loops by using various node coordination mechanisms. For example [9, 6] use diffusion computations <ref> [3] </ref> to avoid loops entirely. References [12, 2, 11] avoid long-lived loops, but not short-lived loops, i.e. loops that disappear in time proportional to N or less. In [12], each node maintains for each destination a set of paths (in addition to the distances), one for each of its neighbors.
Reference: [4] <author> L. Ford and D. Fulkerson. </author> <booktitle> Flows in Networks, </booktitle> <pages> pages 297-333. </pages> <publisher> Prentice-Hall, Inc., </publisher> <year> 1962. </year>
Reference-contexts: Government. the destination (unless the destination is unreachable); and (b) the cost of this next-hop path should be minimum amongst all paths from the node to the destination. A popular approach to routing is the distance-vector approach, which is based on the Bellman-Ford algorithm <ref> [4] </ref>. In this approach, each node maintains for each destination a set of distances, one for each of its neighbors, and chooses a neighbor with minimum distance as the next-hop.
Reference: [5] <author> J.J. Garcia-Luna-Aceves. </author> <title> A Unified Approach to Loop Free Routing Using Distance Vectors or Link States. </title> <booktitle> In Proc. ACM SIGCOMM '89, </booktitle> <pages> pages 212-223, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Since 1979, many new kinds of distance-vector algorithms have been proposed <ref> [9, 6, 12, 2, 5, 11] </ref> which avoid long-lived loops by using various node coordination mechanisms. For example [9, 6] use diffusion computations [3] to avoid loops entirely. References [12, 2, 11] avoid long-lived loops, but not short-lived loops, i.e. loops that disappear in time proportional to N or less.
Reference: [6] <author> J. M. Jaffe and F.H. Moss. </author> <title> A Responsive Distributed Routing Algorithm for Computer Networks. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-30(7):1758-1762, </volume> <month> July </month> <year> 1982. </year>
Reference-contexts: Since 1979, many new kinds of distance-vector algorithms have been proposed <ref> [9, 6, 12, 2, 5, 11] </ref> which avoid long-lived loops by using various node coordination mechanisms. For example [9, 6] use diffusion computations [3] to avoid loops entirely. References [12, 2, 11] avoid long-lived loops, but not short-lived loops, i.e. loops that disappear in time proportional to N or less. <p> Since 1979, many new kinds of distance-vector algorithms have been proposed [9, 6, 12, 2, 5, 11] which avoid long-lived loops by using various node coordination mechanisms. For example <ref> [9, 6] </ref> use diffusion computations [3] to avoid loops entirely. References [12, 2, 11] avoid long-lived loops, but not short-lived loops, i.e. loops that disappear in time proportional to N or less.
Reference: [7] <author> S. S. Lam and A. U. Shankar. </author> <title> A Relational Notation for State Transition Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-16(7):755-775, </volume> <month> July </month> <year> 1990. </year> <title> An abriviated version appeared in Protocol Specification, Testing, and Verification VIII, </title> <year> 1988. </year>
Reference-contexts: In the case of A2 and A3, it is easy to see this from the proofs for the previous algorithms. For A4, it is not as easy to see this, and we establish it by proving that A4 is a well-formed refinement <ref> [7] </ref> of A3; thus, all safety and progress assertions satisfied by A3 hold for A4 [7]. In section 2, we present our system model and proof rules. In sections 3, 4, 5, 6, we describe A1, A2, A3, and A4 respectively. In section 7, we give concluding remarks. 2. <p> For A4, it is not as easy to see this, and we establish it by proving that A4 is a well-formed refinement <ref> [7] </ref> of A3; thus, all safety and progress assertions satisfied by A3 hold for A4 [7]. In section 2, we present our system model and proof rules. In sections 3, 4, 5, 6, we describe A1, A2, A3, and A4 respectively. In section 7, we give concluding remarks. 2. <p> In section 7, we give concluding remarks. 2. Preliminaries: System Model and Proof Rules We use state transition systems and fairness requirements to specify routing protocols, and safety and progress assertions to describe their behaviors (e.g. <ref> [7] </ref>). A state transition system consists of a set of state variables, a set of events, and an initial condition on the state variables. The state variables define the set of system states.
Reference: [8] <author> J. M. McQuillan, G. Falk, and I. Richer. </author> <title> A Review of the Development and Performance of the ARPANET Routing Algorithm. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-26:1802-1811, </volume> <month> Dec </month> <year> 1978. </year>
Reference-contexts: However it is well known that the straight-forward distributed implementation of the Bellman-Ford algorithm can have long-lived loops (of the order of distances) <ref> [8] </ref>.
Reference: [9] <author> P. M. Merlin and A. Segall. </author> <title> A Failsafe Distributed Routing Protocol. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-27(9):1280-1287, </volume> <month> September </month> <year> 1979. </year>
Reference-contexts: Since 1979, many new kinds of distance-vector algorithms have been proposed <ref> [9, 6, 12, 2, 5, 11] </ref> which avoid long-lived loops by using various node coordination mechanisms. For example [9, 6] use diffusion computations [3] to avoid loops entirely. References [12, 2, 11] avoid long-lived loops, but not short-lived loops, i.e. loops that disappear in time proportional to N or less. <p> Since 1979, many new kinds of distance-vector algorithms have been proposed [9, 6, 12, 2, 5, 11] which avoid long-lived loops by using various node coordination mechanisms. For example <ref> [9, 6] </ref> use diffusion computations [3] to avoid loops entirely. References [12, 2, 11] avoid long-lived loops, but not short-lived loops, i.e. loops that disappear in time proportional to N or less.
Reference: [10] <author> S. Owicki and D. Gries. </author> <title> An Axiomatic Proof Technique for Parallel Programs I. </title> <journal> Acta Informatica, </journal> <volume> 6 </volume> <pages> 319-340, </pages> <year> 1976. </year>
Reference-contexts: z) are auxiliary variables, and are needed for verification of the Theorem 3, and do not have to be implemented. (Formally they satisfy the following conditions: (1) they do not affect the enabling condition of any event, and (2) they do not affect the update of any nonauxiliary state variable <ref> [10] </ref>.) Algorithm A2 is like algorithm A1, except that A2 uses paths to avoid long-lived loops. Long-lived loops in the next-hop path for destination z are avoided by having node u not choose a neighbor v as its next-hop if Routevia u (v; z) contains a cycle.
Reference: [11] <author> B. Rajagopalan and M. Faiman. </author> <title> A New Responsive Distributed Shortest-Path Routing Algorithm. </title> <booktitle> In Proc. ACM SIGCOMM '89, </booktitle> <pages> pages 237-246, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Since 1979, many new kinds of distance-vector algorithms have been proposed <ref> [9, 6, 12, 2, 5, 11] </ref> which avoid long-lived loops by using various node coordination mechanisms. For example [9, 6] use diffusion computations [3] to avoid loops entirely. References [12, 2, 11] avoid long-lived loops, but not short-lived loops, i.e. loops that disappear in time proportional to N or less. <p> Since 1979, many new kinds of distance-vector algorithms have been proposed [9, 6, 12, 2, 5, 11] which avoid long-lived loops by using various node coordination mechanisms. For example [9, 6] use diffusion computations [3] to avoid loops entirely. References <ref> [12, 2, 11] </ref> avoid long-lived loops, but not short-lived loops, i.e. loops that disappear in time proportional to N or less. In [12], each node maintains for each destination a set of paths (in addition to the distances), one for each of its neighbors. <p> Long-lived loops are avoided by not choosing a neighbor as a next-hop if that would lead to a loop. However maintaining and exchanging paths is expensive and requires more than O (N fi e) storage. References <ref> [2, 11] </ref> overcome this problem by having nodes maintain prefinal nodes instead of the paths. The prefinal node for a destination is intended to be the last node before the destination on the next-hop path. <p> Concluding Remarks Distance-vector routing algorithms are difficult to understand. Most of their analyses in the literature is operational. In the course of our work, we discovered that they are often incomplete or inaccurate; for example, reference <ref> [11] </ref> considers only one or two link failures rather than an arbitrary succession of topology changes, to prove the properties of their algorithm; the routing table update procedure in [2] is inaccurate; the example in [2] to illustrate O (N ) convergence is wrong, etc.

References-found: 11

