URL: ftp://dis.cs.umass.edu/pub/macron.ps
Refering-URL: http://dis.cs.umass.edu/~wagner/pubs.html
Root-URL: 
Email: fdecker,lesser,nagendra,wagnerg@cs.umass.edu  
Title: MACRON: An Architecture for Multi-agent Cooperative Information Gathering  
Author: Keith Decker, Victor Lesser, M. V. Nagendra Prasad and Thomas Wagner 
Date: November 16, 1995  
Address: Amherst, MA 01003, USA.  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: The complexity of the modern information carrying landscape requires a sophisticated view in which information is acquired rather than simply retrieved; where the process must be dynamic, incremental, and constrained by resource limitations. In this paper, we describe a multi-agent architecture called MACRON based on the Cooperative Information Gathering (CIG) paradigm designed specifically for such complex information gathering environments. Top level user queries drive the creation of partially elaborated information gathering plans, resulting in the employment of multiple cooperative agents for the purpose of achieving goals and subgoals within those plans. Agents in MACRON incorporate capabilities to exploit subproblem interdependencies, manage uncertainty inherent in multi-agent search, intelligently trade-off solution quality for resource limitations and exploit or avoid redundancy as needed.
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> CIG Searchbots . http://dis.cs.umass.edu/research/searchbots.html. </institution>
Reference-contexts: The basic agent communication infrastructure is the KQML-based Lockheed KAPI integrated with Harlequin Lispworks. We have a rudimentary multi-agent information gathering system <ref> [1] </ref> with a Mosaic forms interface that receives a query from the user and invokes a query agent.
Reference: [2] <author> M. C. Bowman, P. B. Danzig, U. Manber, and M. F. Schwartz. </author> <title> Scalable internet resource discovery: Research problems and approaches. </title> <journal> Communications of the ACM, </journal> <year> 1994. </year>
Reference-contexts: The planner agent is set up to answer queries on Macintosh products. 4 Conclusion Information Gathering systems proposed in the literature typically either do not fully exploit the potential of knowledge-intensive methods for the task <ref> [2, 3, 9] </ref> or fail to exploit the dependencies between agents working on different aspects of an information gathering task [14]. The system by Knoblock et al.[10] is an exception in the sense that it is knowledge-intensive and has some notion of exploiting dependencies.
Reference: [3] <author> J. Callan. </author> <type> Personal communication, </type> <month> July </month> <year> 1994. </year>
Reference-contexts: The planner agent is set up to answer queries on Macintosh products. 4 Conclusion Information Gathering systems proposed in the literature typically either do not fully exploit the potential of knowledge-intensive methods for the task <ref> [2, 3, 9] </ref> or fail to exploit the dependencies between agents working on different aspects of an information gathering task [14]. The system by Knoblock et al.[10] is an exception in the sense that it is knowledge-intensive and has some notion of exploiting dependencies.
Reference: [4] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Generalizing the partial global planning algorithm. </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 1(2) </volume> <pages> 319-346, </pages> <month> jun </month> <year> 1992. </year>
Reference-contexts: worlds|the flexibility to put together an efficient team on the fly, and the 5 ability to intelligently and dynamically assign and track these agent resources. 2.2 The DECAF Agent Architecture This architecture is based on the one used to test the GPGP (Generalized Partial Global Planning) coordination approach described in <ref> [4, 5] </ref>. <p> It then causes the creation of new local scheduling constraints, called commitments, which can be communicated to other agents. Various kinds of subproblem interaction or goal interrelationships like facilitates, enables, overlaps, and subsumes that exist between subproblems can be detected and exploited in a variety of ways <ref> [4, 5] </ref>. Different coordination mechanisms are used to deal with different classes of interdependencies.
Reference: [5] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Designing a family of coordination algorithms. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 73-80, </pages> <address> San Francisco, </address> <month> June </month> <year> 1995. </year> <note> AAAI Press. Longer version available as UMass CS-TR 94-14. </note>
Reference-contexts: worlds|the flexibility to put together an efficient team on the fly, and the 5 ability to intelligently and dynamically assign and track these agent resources. 2.2 The DECAF Agent Architecture This architecture is based on the one used to test the GPGP (Generalized Partial Global Planning) coordination approach described in <ref> [4, 5] </ref>. <p> It then causes the creation of new local scheduling constraints, called commitments, which can be communicated to other agents. Various kinds of subproblem interaction or goal interrelationships like facilitates, enables, overlaps, and subsumes that exist between subproblems can be detected and exploited in a variety of ways <ref> [4, 5] </ref>. Different coordination mechanisms are used to deal with different classes of interdependencies.
Reference: [6] <author> Alan Garvey. </author> <title> Design-to-time Real-time Scheduling. </title> <type> PhD thesis, </type> <institution> University of Mas-sachusetts, </institution> <year> 1995. </year>
Reference-contexts: The DTT approach subsumes other popular real-time approaches such as anytime algorithms and imprecise computation <ref> [6] </ref> * A decision-maker that chooses an appropriate schedule, based on the agent's current, dynamically changing view of its performance criteria. In general, the problems that DECAF agents are trying to solve have multiple performance criteria.
Reference: [7] <author> Alan Garvey, Keith Decker, and Victor Lesser. </author> <title> A negotiation-based interface between a real-time scheduler and a decision-maker. </title> <type> CS Technical Report 94-08, </type> <institution> University of Massachusetts, </institution> <year> 1994. </year> <month> 10 </month>
Reference: [8] <author> Alan Garvey and Victor Lesser. </author> <title> Design-to-time scheduling with uncertainty. </title> <type> CS Tech--nical Report 95-03, </type> <institution> University of Massachusetts, </institution> <year> 1995. </year>
Reference-contexts: A TAEMS task structure combined with some performance metric creates a well-defined NP-hard scheduling problem that we attack using a "Design-To-Time" heuristic scheduler <ref> [8] </ref>. The Design-To-Time (DTT) approach assumes that our task structures (retrieved by the planner) have multiple ways available to achieve tasks that trade-off the various performance criteria such as execution time and result quality.
Reference: [9] <author> M. Huhns, U. Mukhopadhyay, L. M. Stephens, and R. Bonnell. </author> <title> DAI for document retrieval: The MINDS project. </title> <booktitle> In Distributed Artificial Intelligence. </booktitle>
Reference-contexts: The planner agent is set up to answer queries on Macintosh products. 4 Conclusion Information Gathering systems proposed in the literature typically either do not fully exploit the potential of knowledge-intensive methods for the task <ref> [2, 3, 9] </ref> or fail to exploit the dependencies between agents working on different aspects of an information gathering task [14]. The system by Knoblock et al.[10] is an exception in the sense that it is knowledge-intensive and has some notion of exploiting dependencies.
Reference: [10] <author> C. A. Knoblock and Y. Arens. </author> <title> An architecture for information retrieval agents. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Software Agents. </booktitle>
Reference: [11] <author> C. A. Knoblock, Y. Arens, and C. Hsu. </author> <title> Cooperating agents for information retrieval. </title> <booktitle> In Proceedings of the 2nd International Conference on Cooperating Information Systems, </booktitle> <year> 1994. </year>
Reference-contexts: Information agents can be constructed and maintained separately. An agent can build upon other information agents to provide an abstraction of these information sources. In addition, passive data sources like databases can be transformed into information agents by wrapping them with intelligent interfaces <ref> [11] </ref>. 2 The rest of the paper is organized as follows. Section 2 introduces the MACRON as a Cooperative Information Gathering organizational architecture and discusses it in detail. Section 3 discusses the status of implementation and our future plans.
Reference: [12] <author> V. R. Lesser. </author> <title> A retrospective view of FA/C distributed problem solving. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(6) </volume> <pages> 1347-1363, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: The CIG model [13] views information gathering as a distributed problem solving activity characterized by the existence of interdependencies between subproblems, leading to a need for the agents to coordinate extensively during problem solving. Lesser <ref> [12] </ref> presents the functionally accurate, cooperative (FA/C) paradigm as an approach to distributed problem solving. In FA/C systems, various soft and hard constraining goal/task interrelationships among subproblems motivate agents to coordinate their problem solving activities in order to enhance the efficiency of the ongoing problem solving process.
Reference: [13] <author> T. Oates, M. V. Nagendra Prasad, and V. R. Lesser. </author> <title> Cooperative Information Gathering: A Distributed Problem Solving Approach. </title> <institution> Computer Science Technical Report 94-66, University of Massachusetts, </institution> <year> 1994. </year>
Reference-contexts: Given information about the statistical execution characteristics of task, the scheduler will schedule various monitoring points, and indicate the envelope that dictates when a method execution has fallen so far behind that the agent will need to reschedule to recover. The CIG model <ref> [13] </ref> views information gathering as a distributed problem solving activity characterized by the existence of interdependencies between subproblems, leading to a need for the agents to coordinate extensively during problem solving. Lesser [12] presents the functionally accurate, cooperative (FA/C) paradigm as an approach to distributed problem solving.
Reference: [14] <author> E. M. Vorhees. </author> <title> Software agents for information retrieval. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Software Agents. </booktitle> <pages> 11 </pages>
Reference-contexts: up to answer queries on Macintosh products. 4 Conclusion Information Gathering systems proposed in the literature typically either do not fully exploit the potential of knowledge-intensive methods for the task [2, 3, 9] or fail to exploit the dependencies between agents working on different aspects of an information gathering task <ref> [14] </ref>. The system by Knoblock et al.[10] is an exception in the sense that it is knowledge-intensive and has some notion of exploiting dependencies. However, their system has no notion of scheduling to maximize quality given deadlines and cost limits. MACRON is an attempt to overcome these shortcomings.
References-found: 14

