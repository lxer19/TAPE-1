URL: http://pertsserver.cs.uiuc.edu/papers/TDSS95.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/members/jsun/publications.html
Root-URL: http://www.cs.uiuc.edu
Title: Probabilistic Performance Guarantee for Real-Time Tasks with Varying Computation Times  
Author: T.-S. Tia Z. Deng M. Shankar M. Storch J. Sun L.-C. Wu J. W.-S. Liu 
Date: January 13, 1995  
Address: Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: In this paper, we examine a class of applications that do not fit the periodic-task model. We call the tasks in these applications semi-periodic tasks. Like periodic tasks, the requests in a semi-periodic task are released regularly. However, their computation times vary widely. We focus on systems where the total maximum utilization of the tasks on each processor is larger than 1. Hence according to the existing schedulability conditions for periodic tasks, we cannot guarantee that the semi-periodic tasks are schedulable, even though their total average utilization is very small. We describe two methods of providing probabilistic schedulability guarantees for the semi-periodic tasks: The first method, called the probabilistic time-demand analysis, is a modification of the exact schedulability test for periodic tasks. The second method, called the transform-task method, transforms each task into a periodic task followed by a sporadic task. The transform-task method can be used to provide an absolute guarantee for requests with shorter computation times and a probabilistic guarantee for the longer requests. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Chetto and M. Chetto, </author> <title> "Some Results of the Earliest Deadline Scheduling Algorithm," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 15(10), </volume> <pages> pp. 1261-1269, </pages> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: A Markov-chain model is proposed to analyze the probability of the sporadic tasks missing their deadlines. The second algorithm uses the EDF algorithm to schedule the periodic tasks and a slack stealing algorithm <ref> [1, 10, 11] </ref> to schedule the sporadic tasks. The probabilistic time-demand analysis is applicable only to tasks with deadlines equal to or less than their periods while the transform-task method does not have this restriction. <p> The periodic tasks are scheduled on the EDF basis. The sporadic requests of all tasks are then scheduled according to the slack stealing algorithm described in [10, 11]. Conceptually, this algorithm is the same as Chetto and Chetto's algorithm <ref> [1] </ref>: Sporadic requests are scheduled on the FIFO basis whenever the execution of periodic requests can be 15 postponed. It differs from Chetto and Chetto's algorithm in implementation. Its complexity is linear in the number of periodic tasks while the latter is a pseudo-polynomial time algorithm.
Reference: [2] <author> K. Kant, </author> <title> Introduction to Computer System Performance Evaluation. </title> <address> New York: </address> <publisher> McGraw-Hill, </publisher> <year> 1992. </year>
Reference-contexts: Given the co-variance of computation times of different requests, we can compute the probability distribution W i (t; x) more accurately. However, the computation is more expensive, especially when the number of terms is small and even the meta-form of central-limit theorem <ref> [2] </ref> cannot be applied. The bound given by (1) and the analysis method based on it implicitly assume that the request T i;j being analyzed is released at a critical instant [7], that is, at a time instant when a request of every higher priority task is released.
Reference: [3] <author> J. Lehoczky, L. Sha, and Y. Ding, </author> <title> "The Rate Monotonic Scheduling Algorithm Exact Characterization and Average Case Behavior," </title> <booktitle> in Proceedings of the Real-Time System Symposium, </booktitle> <pages> pp. 166-171, </pages> <year> 1989. </year>
Reference-contexts: We describe two methods of providing schedulability guarantees for systems of semi-periodic tasks. The first method assumes that the semi-periodic tasks are scheduled according to a fixed-priority algorithm. This method, called the probabilistic time-demand analysis method, is a modification of the exact schedulability test <ref> [3] </ref> for periodic tasks. The modification takes into account the variations in the computation times. It provides the probability that requests of each task will meet their deadlines. The second method, called the transform-task method, transforms each semi-periodic task into a periodic task followed by a sporadic task. <p> schedule them on a fixed-priority basis. (In this section, we index the tasks so that the priority of T i is higher than that of T j if i &lt; j.) The total maximum utilizations of the tasks are such that they fail the exact schedulability test for periodic tasks <ref> [3] </ref>. Therefore, we seek to find the probability that any request T i;j in T i will meet its deadline. Our method for finding this probability is a straightforward extension of the time-demand analysis method used to derive the exact schedulability test. <p> Each server, together with all other servers whose parameters are chosen in the same manner and all the periodic tasks, is schedulable according to the exact schedulability test <ref> [3] </ref>. 5. A sporadic request is said to miss its deadline if it is not completed within k server periods after its arrival. The probability of missed deadlines computed based on this definition is an upper bound of actual probability of missed deadlines.
Reference: [4] <author> J. P. Lehoczky, L. Sha, J. K. Strosnider, and H. Tokuda, </author> <title> "Fixed Priority Scheduling Theory for Hard Real-Time Systems," in Foundations of Real-Time Computing, Scheduling and Resource Management (A. </title> <editor> M. Tilborg and G. M. Koob, eds.), ch. </editor> <volume> 1, </volume> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: Schedulability conditions exist for many well-known algorithms for scheduling periodic tasks, including the rate-monotonic (RM) algorithm, the deadline-monotonic (DM) algorithm, and the earliest-deadline-first (EDF) algorithm <ref> [4, 5] </ref>. These conditions are conservative but not overly pessimistic. For applications that fit the periodic task model (i.e., applications where the requests of each task are released more or less regularly and have similar computation times), the schedulability conditions can serve as design rules.
Reference: [5] <author> J. Y.-T. Leung and J. Whitehead, </author> <title> "On the Complexity of Fixed-Priority Scheduling of Periodic Real-Time Tasks," </title> <journal> Performance Evaluation, </journal> <volume> vol. 2, </volume> <pages> pp. 237-250, </pages> <year> 1982. </year>
Reference-contexts: Schedulability conditions exist for many well-known algorithms for scheduling periodic tasks, including the rate-monotonic (RM) algorithm, the deadline-monotonic (DM) algorithm, and the earliest-deadline-first (EDF) algorithm <ref> [4, 5] </ref>. These conditions are conservative but not overly pessimistic. For applications that fit the periodic task model (i.e., applications where the requests of each task are released more or less regularly and have similar computation times), the schedulability conditions can serve as design rules.
Reference: [6] <author> J. W.-S. Liu, Z. Deng, M. Shankar, M. Storch, J. Sun, T.-S. Tia, and L.-C. Wu, </author> <title> "The Use of PERTS for an Architecture and Timing Study," </title> <type> Tech. Rep. </type> <note> in preparation (available upon request), </note> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <year> 1995. </year>
Reference-contexts: As a specific example, we consider an actual application system that contains 30 semi-periodic tasks, including the tasks shown in Figure 1. Detailed timing information about the system, being voluminous and mostly of small relevance here, can be found in <ref> [6] </ref>. The tasks are assigned and bound to three processors. The assignments of tasks to processors are listed in Appendix A. <p> However, with the help of a design tool, such as the PERTS schedulability analyzer [8], the designer can adjust these parameters one or several at a time and use the tool to find a good tradeoff. The use of PERTS for this purpose is described in <ref> [6] </ref>. Using RM and Sporadic Servers One way to schedule the transformed tasks is to schedule the periodic tasks on a fixed-priority basis and use one or more sporadic servers to schedule the sporadic requests.
Reference: [7] <author> C. L. Liu and J. W. Layland, </author> <title> "Scheduling Algorithms for Multiprogramming in a Hard Real Time Environment," </title> <journal> in J. Assoc. Comput. Mach., </journal> <volume> vol. 20(1), </volume> <pages> pp. 46-61, </pages> <year> 1973. </year>
Reference-contexts: 1 Introduction The periodic-task model <ref> [7] </ref> has been used extensively to characterize real-time applications. According to this model, computations that provide continuous control, signal processing, and monitoring functions are modeled as periodic tasks. Each periodic task is an infinite stream 1 of requests for computation. <p> The bound given by (1) and the analysis method based on it implicitly assume that the request T i;j being analyzed is released at a critical instant <ref> [7] </ref>, that is, at a time instant when a request of every higher priority task is released.
Reference: [8] <author> J. W. S. Liu, J. L. R. Redondo, Z. Deng, T. S. Tia, R. Bettati, A. Silberman, M. Storch, R. Ha, and W. K. Shih, "PERTS: </author> <title> A Prototyping Environment for Real-Time Systems," </title> <booktitle> in Proceedings of the Real-Time System Symposium, </booktitle> <pages> pp. 184-188, </pages> <year> 1993. </year> <month> 18 </month>
Reference-contexts: Similarly, we can also choose differing ff i 's, which gives us another dimension of tradeoff. It is impractical to tune the 2N parameters ff i 's and A i 's manually. However, with the help of a design tool, such as the PERTS schedulability analyzer <ref> [8] </ref>, the designer can adjust these parameters one or several at a time and use the tool to find a good tradeoff. The use of PERTS for this purpose is described in [6].
Reference: [9] <author> B. Sprunt, L. Sha, and J. P. Lehoczky, </author> <title> "Aperiodic Task Scheduling for Hard Real-Time Systems," </title> <journal> The Journal of Real-Time Systems, </journal> <volume> vol. 1, </volume> <pages> pp. 27-60, </pages> <year> 1989. </year>
Reference-contexts: The second method, called the transform-task method, transforms each semi-periodic task into a periodic task followed by a sporadic task. The periodic tasks are guaranteed to be schedulable. Two different algorithms are used to schedule the periodic and sporadic tasks. The first algorithm uses sporadic servers <ref> [9] </ref> to serve the sporadic tasks while the periodic tasks are scheduled in a fixed-priority basis. A Markov-chain model is proposed to analyze the probability of the sporadic tasks missing their deadlines. <p> The use of PERTS for this purpose is described in [6]. Using RM and Sporadic Servers One way to schedule the transformed tasks is to schedule the periodic tasks on a fixed-priority basis and use one or more sporadic servers to schedule the sporadic requests. The sporadic server scheme <ref> [9] </ref> is a well-known bandwidth preserving scheme that has good performance and is easy to implement. According to this scheme, a sporadic server may serve one or more client sporadic tasks.
Reference: [10] <author> T.-S. Tia, J. W.-S. Liu, J. Sun, and R. Ha, </author> <title> "A Linear-Time Optimal Acceptance Test for Scheduling of Hard Real-Time Tasks," </title> <journal> Submitted to IEEE Transaction on Software Engineering, </journal> <year> 1994. </year>
Reference-contexts: A Markov-chain model is proposed to analyze the probability of the sporadic tasks missing their deadlines. The second algorithm uses the EDF algorithm to schedule the periodic tasks and a slack stealing algorithm <ref> [1, 10, 11] </ref> to schedule the sporadic tasks. The probabilistic time-demand analysis is applicable only to tasks with deadlines equal to or less than their periods while the transform-task method does not have this restriction. <p> The periodic tasks are scheduled on the EDF basis. The sporadic requests of all tasks are then scheduled according to the slack stealing algorithm described in <ref> [10, 11] </ref>. Conceptually, this algorithm is the same as Chetto and Chetto's algorithm [1]: Sporadic requests are scheduled on the FIFO basis whenever the execution of periodic requests can be 15 postponed. It differs from Chetto and Chetto's algorithm in implementation.
Reference: [11] <author> T.-S. Tia, M. Shankar, and M. Storch, </author> <title> "A Flexible and Predictable EDF Scheduling Strategy for Periodic, Aperiodic, and Sporadic Requests," </title> <note> In preparation, 1995. 19 </note>
Reference-contexts: A Markov-chain model is proposed to analyze the probability of the sporadic tasks missing their deadlines. The second algorithm uses the EDF algorithm to schedule the periodic tasks and a slack stealing algorithm <ref> [1, 10, 11] </ref> to schedule the sporadic tasks. The probabilistic time-demand analysis is applicable only to tasks with deadlines equal to or less than their periods while the transform-task method does not have this restriction. <p> The periodic tasks are scheduled on the EDF basis. The sporadic requests of all tasks are then scheduled according to the slack stealing algorithm described in <ref> [10, 11] </ref>. Conceptually, this algorithm is the same as Chetto and Chetto's algorithm [1]: Sporadic requests are scheduled on the FIFO basis whenever the execution of periodic requests can be 15 postponed. It differs from Chetto and Chetto's algorithm in implementation.
References-found: 11

