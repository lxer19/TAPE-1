URL: http://www.cs.indiana.edu/~asengupt/asengupt/papers/jasis_fi.ps
Refering-URL: http://www.cs.indiana.edu/~asengupt/
Root-URL: http://www.cs.indiana.edu
Email: asengupt@indiana.edu adillon@indiana.edu  
Title: Extending SGML to accommodate database functions: A Methodological Overview  
Author: Arijit Sengupta Andrew Dillon 
Note: Partially supported by US Dept. of Education award number P200A502367 and NSF Research and Infrastructure grant, award number NSF CDA-9303189.  
Affiliation: Computer Science School of Library Information Science Indiana University Indiana University  
Abstract: A method for augmenting an SGML document repository with database functionality is presented. SGML [ISO 8879, 1986] has been widely accepted as a standard language for writing text with added structural information that gives the text greater applicability. Recently there has been a trend to use this structural information as meta-data in databases. The complex structure of documents, however, makes it difficult to directly map the structural information in documents to database structures. In particular, the flat nature of relational databases makes it extremely difficult to model documents that are inherently hierarchical in nature. Consequently, documents are modeled in objectoriented databases [Abiteboul et al., 1993], and object-relational databases [Holst, 1995], in which SGML documents are mapped into the corresponding database models and are later reconstructed as necessary. However, this mapping strategy is not natural and can potentially cause loss of information in the original SGML documents. Moreover, interfaces for building queries for current document databases are mostly built on form-based query techniques and do not use the look and feel of the documents. This paper introduces an implementation method for a complex-object modeling technique specifically for SGML documents and describes interface techniques tailored for text databases. Some of the concepts for a Structured Document Database Management System (SDDBMS) specifically designed for SGML documents are described. A small survey of some current products is also presented to demonstrate the need for such a system. 
Abstract-found: 1
Intro-found: 1
Reference: [Abiteboul, 1993] <author> Serge Abiteboul, Sophie Cluet, Tova Milo. </author> <title> Querying and Updating the File. </title> <booktitle> Proceedings, 19 th Intl. Conference on Very Large Databases, </booktitle> <pages> 73-84, </pages> <year> 1993 </year>
Reference: [Abiteboul, 1995] <author> Serge Abiteboul, Sophie Cluet, Tova Milo. </author> <title> A Database Interface for File Update. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 24(2) </volume> <pages> 386-394, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Some additional information is incorporated and some definitions modified in order to make this conversion [Christophides et al., 1994]. Subsequently, O 2 s query language O 2 SQL is used for querying the document. This can also be used for database update of the document <ref> [Abiteboul, 1995] </ref>. The internal indexing mechanism and the query language of O 2 can be used for posing queries on the converted documents. The primary problem with this approach is that the mapping technique is not one-to-one.
Reference: [ANSI, 1986] <author> ANSI X3.135-1986. </author> <title> Information Technology - Database Languages - Structured Query Language (SQL). </title> <institution> American National Standards Institute. </institution> <address> New York, </address> <year> 1992. </year>
Reference-contexts: Some of these features are: A strong theoretical basis on which the query language, internal indexing mechanisms and data structures, and optimization techniques are built A standard data definition language (DDL) for defining and inserting data Structured Query Language (SQL) <ref> [ANSI, 1986] </ref>, a standard data manipulation or query language (DML) for inserting, updating, and que rying data Query By Example (QBE) [Ullman, 1988, citing Zloof, 1977], an intuitive interface for specifying queries involving multiple tables and complex query types Strong closure - inputs and outputs are in form of tables enabling <p> The optimization heavily depends on the presence of special optional indices on specific tags. Because of the introductory nature of this paper, the details of the optimization are omitted here. 5.3 Query Language The proposed query language is an extended form of SQL (Structured Query Language) <ref> [ANSI, 1986] </ref>, the universally accepted query language for relational databases. SQL can not be directly used with structured documents, since it is designed specifically for flat tabular structures.
Reference: [Chadwyck-Healey, 1994] <author> Chadwyck-Healey. </author> <title> The English Poetry Full-Text Database. </title> <note> The works of more than 1,250 poets from 600 to 1900, </note> <year> 1994. </year>
Reference-contexts: Although browsing is the most popular (and often, the only) means for traversing through documents in the web, interest in automated searches was manifest in the users studied here. One of the document sets used in this experiment was the English Poetry Full-Text Database from Chad-wyck-Healey <ref> [Chadwyck-Healey, 1994] </ref>. Since these documents were not organized in a form suitable for comfortable browsing, we generated some index-like navigational structures from the embedded information in the documents. We also converted individual poems from the internal SGML format to HTML to make them viewable in any WWW browser. <p> However, a generic template that works with any document is also necessary, in case a personalized template is not available. The current implementation emphasizes personalized templates for poems (using the Chadwyck-Healey English Poetry Database <ref> [Chadwyck-Healey, 1994] </ref>) and a simple generic template for any kind of document. 5.5 Advantages of this approach Besides the fact that this model is a built-from-scratch model for SGML, it has many other advantages over the current state-of-the-art systems.
Reference: [Christophides,1994] <author> V. Christophides, S. Abiteboul, S. Cluet, M. Scholl. </author> <title> From Structured Documents to Novel Query Facilities. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 23(2) </volume> <pages> 313-324, </pages> <month> June </month> <year> 1994. </year>
Reference: [Colby, 1992] <author> Latha S. Colby. </author> <title> An Algebra for List-oriented Applications. </title> <type> Technical Report 347, </type> <institution> In-diana University, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: This system also suffers from the lack of closure and completeness. 3.3 Other related work In addition to the four products or projects described here, a few other systems and theories have been built or proposed. The list-based algebra <ref> [Colby, 1992, 1994] </ref> has a very strong theoretical basis, but currently do not have efficient implementation. An extension to this work forms the theoretical basis of the current approach.
Reference: [Colby, 1994] <author> L. Colby, L.V. Saxton, D. Van Gucht. </author> <title> Concepts for modeling and querying list-structured data. </title> <booktitle> Information Processing and Management, </booktitle> <volume> 30(5): </volume> <pages> 687-709, </pages> <year> 1994. </year>
Reference-contexts: This calls for a strong theoretical basis and supporting implementation capabilities, since without a strong theoretical foundation, the results from the system can not be formally verified. 5.1 Theoretical basis The theory behind the system described here an extension to Colbys work on liststructured data <ref> [Colby, 1994] </ref>. The original work by Colby used list-structures to represent data in which sequence is important. Hierarchically structured data such as SGML documents were modeled as finite trees.
Reference: [DeRose, 1994] <author> Steven J. Derose, David G. Durand. </author> <title> Making Hypermedia Work: A Users Guide to HyTime. </title> <publisher> Kluwer Academic. </publisher> <year> 1994. </year>
Reference: [Dillon, 1994] <author> A. Dillon. </author> <title> Designing Usable Electronic Text: Ergonomic Aspects of Human Information Usage. </title> <publisher> Taylor & Francis. </publisher> <year> 1994. </year>
Reference-contexts: The issue of document type invokes the concept of superstructure [Van Dijk et al., 1983], the high level form of narrative information that has been shown to influence users navigation by affording the development of an accurate model of the information space being explored <ref> [Dillon, 1994] </ref>. This appears to be a fruitful area for further research, and ties cognitive theories of linguistic processing and human information usage to database design.
Reference: [Gonnet, 1987] <author> Gaston H. Gonnet, Frank Wm. Tompa. </author> <title> Mind Your Grammar: a New Approach to Modelling Text. </title> <booktitle> Proceedings: 13 th Intl. Conference on Very Large Databases, </booktitle> <pages> 339-346, </pages> <year> 1987. </year>
Reference-contexts: An extension to this work forms the theoretical basis of the current approach. Other related works use the concept of grammars and parse strings based on the grammars to model the structure of documents, and special operations on these parse strings to query the documents <ref> [see for example, Gonnet, 1987] </ref>. There are a few other commercial as well as public-domain systems for SGML, but they are not included here because of the lack of available information and publications. 4.
Reference: [Gonnet, 1991] <author> Gaston H. Gonnet, Ricardo A. Baeza-Yates. </author> <title> Lexicographical indices for text: Inverted files vs Pat Trees. </title> <type> Technical Report TR-OED-91-01. </type> <institution> University of Waterloo, </institution> <year> 1991. </year>
Reference-contexts: cases are selected from two mostly adopted approaches: (a) using a proprietary indexing mechanism, and (b) using existing database technology, such as a relational database or an objectoriented or object-relational database. 3.1 Proprietary Indexes: Open Text and Patricia Trees Patricia Trees (or Pat, in short) were initially applied by Gonnet <ref> [Gonnet, 1991] </ref> for the purpose of indexing structured documents to perform efficient searches in structured text. This method was applied to a commercial document database by Open Text [Open Text, 1994].
Reference: [Hammond, 1989] <author> N. Hammond, L. Allinson. </author> <title> Extending Hypertext for Learning: an Investigation of Access and Guidance Tools. People and Computers V, </title> <year> 1989. </year>
Reference: [Holst, 1995] <author> Sebastian Holst. </author> <title> Database Evolution: the View From Over Here (A Document-centric perspective). </title> <booktitle> Proceedings of the SGML 95 Conference, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: In order to properly obtain a closed system, one needs to map the O 2 objects back to SGML, which again raises the possibility of losing original information. 3.2.3 Texcel Information Manager Information Manager from Texcel International <ref> [Holst, 1995] </ref> is the first commercial information system for SGML documents. This system has a built-in process-control mechanism for authoring, querying, and storing SGML documents in a repository. The repository is enhanced with version-control mechanisms and can be used for cooperative authoring and publishing SGML documents.
Reference: [HTML Working Group, 1995] <author> T. Berners-Lee, D. Connolly. </author> <title> HyperText Markup Language - 2.0. Specification of the HyperText Markup Language from the HTML Working Group. </title> <address> Nov 22, </address> <year> 1995. </year>
Reference-contexts: These querying capabilities could prevent users from getting lost in hyperspace, a common problem with complex databases [Hammond and Allinson, 1989]. HyperText Markup Language (HTML), the popular language for the World Wide Web (WWW), has recently been adapted as an application of SGML <ref> [HTML Working Group, 1995] </ref>. We utilized this fact to perform a small experiment to understand the need for querying capabilities in SGML hypertext systems. To accomplish this, we put together two sets of SGML documents of differing sizes and subject matters with a hypertext navigation and search facility.
Reference: [Inforium, 1995] <institution> Inforium Inc. Livepage TM </institution>
Reference-contexts: These pieces are later joined together when necessary. However, for a moderately complex hierarchy, this fragmentation becomes very complicated and affects the performance of the database system. LivePage TM <ref> [Inforium, 1995] </ref> uses a different type of fragmentation than the theoretical conversion strategy. The strategy adopted in this product is to use a fixed model for any type of document, treating documents as a chain of words and tags.
References-found: 15

