URL: http://swarm.cs.wustl.edu/csg/papers/1994-1.ps.Z
Refering-URL: http://swarm.cs.wustl.edu/cgi-bin/pubs/papers/
Root-URL: http://www.cs.wustl.edu
Title: A Characterization of the Computational Power of Rule-based Visualization  
Author: Kenneth C. Cox Gruia-Catalin Roman 
Date: Printed 9/3/93  February 1993  
Address: IN ST LOUIS  Saint Louis, MO 63130-4899 One Brookings Drive Campus Box 1045  
Affiliation: WASHINGTON UNIVERSITY  Washington School of Engineering Applied Science  Washington University Department of Computer Science  
Pubnum: WUCS-93-15  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Brown, M. H., </author> <title> Exploring Algorithms using Balsa-II, </title> <journal> IEEE Computer, </journal> <volume> vol. 21, no. 5, </volume> <pages> pp. 14-36, </pages> <year> 1988. </year>
Reference: [2] <author> Brown, M. H., Zeus: </author> <title> A System for Algorithm Animation and Multi-View Editing, </title> <booktitle> 1991 IEEE Workshop on Visual Languages, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Kobe, Japan, </address> <pages> pp. 4-9, </pages> <year> 1991. </year>
Reference: [3] <author> Forgy, C. L., </author> <title> RETE: A Fast Algorithm for the Many Pattern/Many Object Pattern Match Problem, </title> <journal> Artificial Intelligence, </journal> <volume> vol. 19, no. 1, </volume> <pages> pp. 17-37, </pages> <year> 1982. </year>
Reference-contexts: Further, the fixpoint computation can be implemented with reasonable efficiency using an incremental, RETE-like algorithm <ref> [3] </ref> which only processes the changes in the output space. Finally, the use of the fixpoint provides us with the needed capability to perform unbounded serial computationindeed, as we will show in the next section, the fixpoint model is computationally equivalent to a Turing machine.
Reference: [4] <author> Helttula, E., Hyrskykari, A., and Raiha, K.-J., </author> <title> Graphical Specification of Algorithm Animations with ALADDIN, </title> <booktitle> in Proceedings of the 22nd Annual Conference on Systems Sciences, </booktitle> <pages> pp. 892-901, </pages> <year> 1988. </year> <month> 17 </month>
Reference-contexts: This declarative treatment of visualization is used indirectly by such traditional systems as Balsa and Zeus [1,2], where program events are mapped to operations on an image. Other systems, such as Aladdin <ref> [4] </ref>, Tango [9], and our own Pavane [7] are more explicit in their modeling of visualization as a mapping.
Reference: [5] <author> London, R. L., and Duisberg, R. A., </author> <title> Animating Programs Using Smalltalk, </title> <journal> IEEE Computer, </journal> <volume> vol. 18, no. 8, </volume> <pages> pp. 61-71, </pages> <year> 1985. </year>
Reference-contexts: This equation can also be viewed as defining constraints on the distances of the nodes. The roots are constrained to have a distance of 0, and each other node is constrained to have a distance one greater than that of its parent. Several visualization systems, including Tango and Animus <ref> [5] </ref>, use such constraint-based specification of the relationships between objects; our results will thus allow a comparison of the capabilities of rule-based and constraint-based systems. The calculation of this function can be cast this into the form of a rule-based mapping as follows.
Reference: [6] <author> Roman, G.-C., and Cox, K. C., </author> <title> A Declarative Approach to Visualizing Concurrent Computations, </title> <journal> IEEE Computer, </journal> <volume> vol 22, no. 10, </volume> <pages> pp 25-36, </pages> <year> 1989. </year>
Reference-contexts: Program visualization has become increasingly popular in recent years, with applications ranging from simple monitoring of program execution to pedagogical presentations of algorithms designed to enhance the viewers understanding. As we have argued previously <ref> [6] </ref>, program visualization may be viewed as a mapping from some aspect of the program (code, data or control state, or execution behavior) to a graphical representation. <p> The second rule is similar but generates unfilled circles. The bottom portion of the figure shows a possible state space, the corresponding animation space, and the image represented by this animation space. Our original concept of a rule-based declarative system <ref> [6] </ref> only permitted such direct mappings from the state to the image. Subsequent development work showed that these mappings are both inconvenient to use and incapable of producing many of the visualizations that we wanted.
Reference: [7] <author> Roman, G.-C., Cox, K. C., Wilcox, C. D., and Plun, J. Y., Pavane: </author> <title> a System for Declarative Visualization of Concurrent Computations, </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> vol. 3, no. 1, </volume> <pages> pp. 161-193, </pages> <year> 1992. </year>
Reference-contexts: This declarative treatment of visualization is used indirectly by such traditional systems as Balsa and Zeus [1,2], where program events are mapped to operations on an image. Other systems, such as Aladdin [4], Tango [9], and our own Pavane <ref> [7] </ref> are more explicit in their modeling of visualization as a mapping. The mappings used in program visualization range from simple direct associations between the values of program variables and the attributes of graphical objects to complex transformations of arbitrary data structures into multipart graphical representations.
Reference: [8] <author> Roman, G.-C., and Cox, K. C., </author> <title> Program Visualization: The Art of Mapping Programs to Pictures, </title> <booktitle> in Proceedings of the 14th International Conference on Software Engineering, </booktitle> <pages> pp. 412-420, </pages> <year> 1992. </year> <note> (A revised version of this paper, titled A Taxonomy of Program Visualization Systems, is currently in submission to IEEE Computer.) </note>
Reference-contexts: Unfortunately at this time we do not have a parallel version of Pavane and so cannot provide any concrete figures. 5 . Abstractive Capabilities We have used our view of visualization as a mapping of information to graphical form as the basis for a taxonomy of visualization systems <ref> [8] </ref>. One component of our taxonomy is the level of abstraction that a system supports, by which we mean the type of transformation performed by the visualization.

References-found: 8

